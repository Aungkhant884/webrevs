{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true SetSoLinger\n@@ -40,1 +41,4 @@\n-        ServerSocket ss = new ServerSocket(0);\n+        ServerSocket ss = new ServerSocket();\n+\n+        InetSocketAddress socketAddress = new InetSocketAddress(addr, 0);\n+        ss.bind(socketAddress);\n","filename":"test\/jdk\/java\/net\/Socket\/SetSoLinger.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -29,0 +30,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true AsyncDisconnect\n@@ -33,1 +35,0 @@\n-import java.util.*;\n@@ -39,0 +40,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -46,1 +49,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws Exception {\n@@ -50,7 +53,3 @@\n-    public AsyncDisconnect() {\n-        try {\n-            startHttpServer();\n-            doClient();\n-        } catch (IOException ioe) {\n-            System.err.println(ioe);\n-        }\n+    public AsyncDisconnect() throws Exception {\n+        startHttpServer();\n+        doClient();\n@@ -59,1 +58,3 @@\n-    void doClient() {\n+    void doClient() throws Exception {\n+        Thread t = new Thread(this);\n+\n@@ -62,2 +63,7 @@\n-            URL url = new URL(\"http:\/\/\" + address.getHostName() + \":\" + address.getPort() + \"\/test\/\");\n-            uc = (HttpURLConnection)url.openConnection();\n+            URL url = URIBuilder.newBuilder()\n+                    .scheme(\"http\")\n+                    .host(address.getAddress())\n+                    .port(address.getPort())\n+                    .path(\"\/test\/\")\n+                    .toURL();\n+            uc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n@@ -66,1 +72,1 @@\n-            (new Thread(this)).start();\n+            t.start();\n@@ -76,2 +82,0 @@\n-        } catch (IOException e) {\n-            e.printStackTrace();\n@@ -80,0 +84,1 @@\n+            t.join();\n@@ -81,0 +86,1 @@\n+\n@@ -96,1 +102,3 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress address = new InetSocketAddress(loopback, 0);\n+        httpServer = com.sun.net.httpserver.HttpServer.create(address, 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/AsyncDisconnect.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n- * @summary Wrong Cookie separator used in HttpURLConnection\n+ * @library \/test\/lib\n+ * @run main\/othervm B6641309\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true B6641309\n+ * @summary Wrong Cookie separator used in HttpURLConnection B6641309\n@@ -38,0 +41,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -43,2 +48,1 @@\n-    public static void main(String[] args)\n-    {\n+    public static void main(String[] args) throws Exception {\n@@ -48,8 +52,3 @@\n-    public B6641309()\n-    {\n-        try {\n-            startHttpServer();\n-            doClient();\n-        } catch (IOException ioe) {\n-            System.err.println(ioe);\n-        }\n+    public B6641309() throws Exception {\n+        startHttpServer();\n+        doClient();\n@@ -58,1 +57,1 @@\n-    void doClient() {\n+    void doClient() throws Exception {\n@@ -60,2 +59,1 @@\n-        try {\n-            InetSocketAddress address = httpServer.getAddress();\n+        ProxySelector.setDefault(ProxySelector.of(null));\n@@ -63,8 +61,1 @@\n-            \/\/ GET Request\n-            URL url = new URL(\"http:\/\/localhost:\" + address.getPort() + \"\/test\/\");\n-            CookieHandler ch = CookieHandler.getDefault();\n-            Map<String,List<String>> header = new HashMap<String,List<String>>();\n-            List<String> values = new LinkedList<String>();\n-            values.add(\"Test1Cookie=TEST1; path=\/test\/\");\n-            values.add(\"Test2Cookie=TEST2; path=\/test\/\");\n-            header.put(\"Set-Cookie\", values);\n+        InetSocketAddress address = httpServer.getAddress();\n@@ -72,7 +63,7 @@\n-            \/\/ preload the CookieHandler with a cookie for our URL\n-            \/\/ so that it will be sent during the first request\n-            ch.put(url.toURI(), header);\n-            HttpURLConnection uc = (HttpURLConnection)url.openConnection();\n-            int resp = uc.getResponseCode();\n-            if (resp != 200)\n-                throw new RuntimeException(\"Failed: Response code from GET is not 200\");\n+        \/\/ GET Request\n+        URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(address.getAddress())\n+                .port(address.getPort())\n+                .path(\"\/test\/\")\n+                .toURL();\n@@ -80,1 +71,6 @@\n-            System.out.println(\"Response code from GET = 200 OK\");\n+        CookieHandler ch = CookieHandler.getDefault();\n+        Map<String,List<String>> header = new HashMap<String,List<String>>();\n+        List<String> values = new LinkedList<String>();\n+        values.add(\"Test1Cookie=TEST1; path=\/test\/\");\n+        values.add(\"Test2Cookie=TEST2; path=\/test\/\");\n+        header.put(\"Set-Cookie\", values);\n@@ -82,7 +78,8 @@\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (URISyntaxException e) {\n-            e.printStackTrace();\n-        } finally {\n-            httpServer.stop(1);\n-            executorService.shutdown();\n+        \/\/ preload the CookieHandler with a cookie for our URL\n+        \/\/ so that it will be sent during the first request\n+        ch.put(url.toURI(), header);\n+        HttpURLConnection uc = (HttpURLConnection)url.openConnection();\n+        int resp = uc.getResponseCode();\n+        if (resp != 200) {\n+            throw new RuntimeException(\"Failed: Response code from GET is not 200: \"\n+                    + resp);\n@@ -90,0 +87,4 @@\n+        System.out.println(\"Response code from GET = 200 OK\");\n+\n+        httpServer.stop(1);\n+        executorService.shutdown();\n@@ -96,1 +97,3 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress address = new InetSocketAddress(loopback, 0);\n+        httpServer = com.sun.net.httpserver.HttpServer.create(address, 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B6641309.java","additions":42,"deletions":39,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n- * @summary HttpURLConnection returns the wrong InputStream\n+ * @library \/test\/lib\n+ * @run main\/othervm B6660405\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true B6660405\n+ * @summary HttpURLConnection returns the wrong InputStream B6660405\n@@ -37,0 +40,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -75,1 +80,2 @@\n-        public CacheResponse get(URI uri, String rqstMethod, Map<String, List<String>> rqstHeaders) throws IOException\n+        public CacheResponse get(URI uri, String rqstMethod, Map<String, List<String>> rqstHeaders)\n+                throws IOException\n@@ -91,1 +97,1 @@\n-    public static void main(String[] args)\n+    public static void main(String[] args) throws Exception\n@@ -96,8 +102,3 @@\n-    public B6660405()\n-    {\n-        try {\n-            startHttpServer();\n-            doClient();\n-        } catch (IOException ioe) {\n-            System.err.println(ioe);\n-        }\n+    public B6660405() throws Exception {\n+        startHttpServer();\n+        doClient();\n@@ -106,1 +107,1 @@\n-    void doClient() {\n+    void doClient() throws Exception {\n@@ -108,22 +109,17 @@\n-        try {\n-            InetSocketAddress address = httpServer.getAddress();\n-\n-            \/\/ GET Request\n-            URL url = new URL(\"http:\/\/localhost:\" + address.getPort() + \"\/test\/index.html\");\n-            HttpURLConnection uc = (HttpURLConnection)url.openConnection();\n-            int code = uc.getResponseCode();\n-            System.err.println(\"response code = \" + code);\n-            int l = uc.getContentLength();\n-            System.err.println(\"content-length = \" + l);\n-            InputStream in = uc.getInputStream();\n-            int i = 0;\n-            \/\/ Read till end of stream\n-            do {\n-                i = in.read();\n-            } while (i != -1);\n-            in.close();\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"Got the wrong InputStream after checking headers\");\n-        } finally {\n-            httpServer.stop(1);\n-            executorService.shutdown();\n+        InetSocketAddress address = httpServer.getAddress();\n+\n+        \/\/ GET Request\n+        URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(address.getAddress())\n+                .port(address.getPort())\n+                .path(\"\/test\/index.html\")\n+                .toURL();\n+\n+        HttpURLConnection uc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);\n+        int code = uc.getResponseCode();\n+        System.err.println(\"response code = \" + code);\n+        int l = uc.getContentLength();\n+        System.err.println(\"content-length = \" + l);\n+        if (l != 1024) {\n+            throw new AssertionError(\"Bad content length: \" + l);\n@@ -131,0 +127,16 @@\n+\n+        InputStream in = uc.getInputStream();\n+        int i = 0;\n+        \/\/ Read till end of stream\n+        do {\n+            l--;\n+            i = in.read();\n+        } while (i != -1);\n+        in.close();\n+        if (l != -1) {\n+            throw new AssertionError(\"Only \" + (1024 - (l + 1))\n+                    + \" bytes read from stream.\");\n+        }\n+\n+        httpServer.stop(1);\n+        executorService.shutdown();\n@@ -137,1 +149,3 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress address = new InetSocketAddress(loopback,0);\n+        httpServer = com.sun.net.httpserver.HttpServer.create(address, 0);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B6660405.java","additions":50,"deletions":36,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -27,0 +28,1 @@\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true B6890349\n@@ -37,1 +39,5 @@\n-            ServerSocket server = new ServerSocket (0);\n+            ServerSocket server = new ServerSocket();\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            InetSocketAddress address = new InetSocketAddress(loopback, 0);\n+            server.bind(address);\n+\n@@ -47,1 +53,1 @@\n-            HttpURLConnection urlc = (HttpURLConnection)u.openConnection ();\n+            HttpURLConnection urlc = (HttpURLConnection)u.openConnection(Proxy.NO_PROXY);\n@@ -51,1 +57,1 @@\n-            System.out.println (\"OK\");\n+            System.out.println (\"Caught expected exception: \" + e);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B6890349.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+ * @library \/test\/lib\n+ * @run main\/othervm Modified\n+ * @run main\/othervm -Djava.net.preferIPv6Addresses=true Modified\n@@ -33,0 +36,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -81,1 +85,6 @@\n-        ss = new ServerSocket(0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress address = new InetSocketAddress(loopback, 0);\n+        ss = new ServerSocket();\n+        ss.bind(address);\n+        int port = ss.getLocalPort();\n+\n@@ -85,3 +94,7 @@\n-        URL testURL = new URL(\"http:\/\/localhost:\" + ss.getLocalPort() +\n-                              \"\/index.html\");\n-        URLConnection URLConn = testURL.openConnection();\n+        URL testURL = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(loopback)\n+                .port(port)\n+                .path(\"\/index.html\")\n+                .toURL();\n+        URLConnection URLConn = testURL.openConnection(Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/Modified.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"}]}