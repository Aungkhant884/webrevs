{"files":[{"patch":"@@ -26,0 +26,2 @@\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertNotNull;\n@@ -33,0 +35,1 @@\n+import java.util.Map;\n@@ -41,0 +44,3 @@\n+import jdk.internal.platform.CgroupV1MetricsImpl;\n+import jdk.internal.platform.cgroupv1.CgroupV1Subsystem;\n+import jdk.internal.platform.Metrics;\n@@ -49,0 +55,1 @@\n+ *          java.base\/jdk.internal.platform.cgroupv1\n@@ -69,0 +76,3 @@\n+    private Path cgroupv1CgroupsOnlyCPUCtrl;\n+    private Path cgroupv1SelfCgroupsOnlyCPUCtrl;\n+    private Path cgroupv1MountInfoCgroupsOnlyCPUCtrl;\n@@ -85,0 +95,6 @@\n+    private String cgroupsNonZeroCpuControllerOnly =\n+            \"#subsys_name hierarchy num_cgroups enabled\\n\" +\n+            \"cpu\\t4\\t153\\t1\\n\" +\n+            \"cpuacct\\t4\\t153\\t1\\n\";\n+    private String selfCgroupNonZeroCpuControllerOnly =\n+            \"4:cpu,cpuacct:\/user.slice\/user-1000.slice\/session-3.scope\\n\";\n@@ -121,0 +137,3 @@\n+    private String mntInfoCpuOnly =\n+            \"30 23 0:26 \/ \/sys\/fs\/cgroup ro,nosuid,nodev,noexec shared:4 - tmpfs tmpfs ro,seclabel,mode=755\\n\" +\n+            \"40 30 0:36 \/ \/sys\/fs\/cgroup\/cpu,cpuacct rw,nosuid,nodev,noexec,relatime shared:12 - cgroup none rw,seclabel,cpu,cpuacct\\n\";\n@@ -212,0 +231,9 @@\n+\n+            cgroupv1CgroupsOnlyCPUCtrl = Paths.get(existingDirectory.toString(), \"cgroups_cpu_only_controller\");\n+            Files.writeString(cgroupv1CgroupsOnlyCPUCtrl, cgroupsNonZeroCpuControllerOnly);\n+\n+            cgroupv1SelfCgroupsOnlyCPUCtrl = Paths.get(existingDirectory.toString(), \"self_cgroup_cpu_only_controller\");\n+            Files.writeString(cgroupv1SelfCgroupsOnlyCPUCtrl, selfCgroupNonZeroCpuControllerOnly);\n+\n+            cgroupv1MountInfoCgroupsOnlyCPUCtrl = Paths.get(existingDirectory.toString(), \"self_mountinfo_cpu_only_controller\");\n+            Files.writeString(cgroupv1MountInfoCgroupsOnlyCPUCtrl, mntInfoCpuOnly);\n@@ -226,0 +254,28 @@\n+    @Test\n+    public void testCgroupv1CpuControllerOnly() throws IOException {\n+        String cgroups = cgroupv1CgroupsOnlyCPUCtrl.toString();\n+        String mountInfo = cgroupv1MountInfoCgroupsOnlyCPUCtrl.toString();\n+        String selfCgroup = cgroupv1SelfCgroupsOnlyCPUCtrl.toString();\n+        Optional<CgroupTypeResult> result = CgroupSubsystemFactory.determineType(mountInfo, cgroups, selfCgroup);\n+\n+        assertTrue(\"Expected non-empty cgroup result\", result.isPresent());\n+        CgroupTypeResult res = result.get();\n+        assertFalse(\"Expected cgroup v1\", res.isCgroupV2());\n+        Map<String, CgroupInfo> infos = res.getInfos();\n+        assertNull(\"Memory controller expected null\", infos.get(\"memory\"));\n+        assertNotNull(\"Cpu controller expected non-null\", infos.get(\"cpu\"));\n+\n+        \/\/ cgroup v1 tests only as this isn't possible with unified hierarchy\n+        \/\/ where all controllers have the same mount point\n+        CgroupV1Subsystem subsystem = CgroupV1Subsystem.getInstance(infos);\n+        \/\/ This throws NPEs prior JDK-8257746\n+        long val = subsystem.getMemoryAndSwapLimit();\n+        assertEquals(\"expected unlimited, and no NPE\", -1, val);\n+        val = subsystem.getMemoryAndSwapFailCount();\n+        assertEquals(\"expected unlimited, and no NPE\", -1, val);\n+        val = subsystem.getMemoryAndSwapMaxUsage();\n+        assertEquals(\"expected unlimited, and no NPE\", -1, val);\n+        val = subsystem.getMemoryAndSwapUsage();\n+        assertEquals(\"expected unlimited, and no NPE\", -1, val);\n+    }\n+\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/TestCgroupSubsystemFactory.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"}]}