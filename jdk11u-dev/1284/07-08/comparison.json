{"files":[{"patch":"@@ -234,0 +234,97 @@\n+  linux_x64_clang_build:\n+    name: Linux x64 clang\n+    runs-on: \"ubuntu-22.04\"\n+    needs: prerequisites\n+    if: needs.prerequisites.outputs.should_run != 'false' && (needs.prerequisites.outputs.platform_linux_x64 != 'false' || needs.prerequisites.outputs.platform_linux_additional == 'true')\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+        include:\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v3\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v3\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore jtreg artifact\n+        id: jtreg_restore\n+        uses: actions\/download-artifact@v3\n+        with:\n+          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jtreg\/\n+        continue-on-error: true\n+\n+      - name: Restore jtreg artifact (retry)\n+        uses: actions\/download-artifact@v3\n+        with:\n+          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jtreg\/\n+        if: steps.jtreg_restore.outcome == 'failure'\n+\n+      - name: Fix jtreg permissions\n+        run: chmod -R a+rx ${HOME}\/jtreg\/\n+\n+      - name: Install dependencies\n+        run: |\n+          sudo apt-get update\n+          sudo apt-get install clang-14=1:14.0.0-1ubuntu1 libxrandr-dev libxtst-dev libcups2-dev libasound2-dev\n+\n+      - name: Configure\n+        run: >\n+          bash configure\n+          --with-conf-name=linux-x64-clang\n+          ${{ matrix.flags }}\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-version-build=0\n+          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          --with-jtreg=${HOME}\/jtreg\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-zlib=system\n+          --with-toolchain-type=clang\n+          --with-jvm-features=shenandoahgc\n+          --enable-jtreg-failure-handler\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: make CONF_NAME=linux-x64-clang\n+        working-directory: jdk\n+\n+      - name: Persist test bundles\n+        uses: actions\/upload-artifact@v3\n+        with:\n+          name: transient_jdk-linux-x64-clang${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: |\n+            jdk\/build\/linux-x64-clang\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin${{ matrix.artifact }}.tar.gz\n+            jdk\/build\/linux-x64-clang\/bundles\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin-tests${{ matrix.artifact }}.tar.gz\n+\n@@ -503,0 +600,269 @@\n+  linux_x64_clang_test:\n+    name: Linux x64\n+    runs-on: \"ubuntu-22.04\"\n+    needs:\n+      - prerequisites\n+      - linux_x64_clang_build\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        test:\n+          - jdk\/tier1 part 1\n+          - jdk\/tier1 part 2\n+          - jdk\/tier1 part 3\n+          - langtools\/tier1\n+          - hs\/tier1 common\n+          - hs\/tier1 compiler\n+          - hs\/tier1 gc\n+          - hs\/tier1 runtime\n+          - hs\/tier1 serviceability\n+        include:\n+          - test: jdk\/tier1 part 1\n+            suites: test\/jdk\/:tier1_part1\n+          - test: jdk\/tier1 part 2\n+            suites: test\/jdk\/:tier1_part2\n+          - test: jdk\/tier1 part 3\n+            suites: test\/jdk\/:tier1_part3\n+          - test: langtools\/tier1\n+            suites: test\/langtools\/:tier1\n+          - test: hs\/tier1 common\n+            suites: test\/hotspot\/jtreg\/:tier1_common\n+            artifact: -debug\n+          - test: hs\/tier1 compiler\n+            suites: test\/hotspot\/jtreg\/:tier1_compiler\n+            artifact: -debug\n+          - test: hs\/tier1 gc\n+            suites: test\/hotspot\/jtreg\/:tier1_gc\n+            artifact: -debug\n+          - test: hs\/tier1 runtime\n+            suites: test\/hotspot\/jtreg\/:tier1_runtime\n+            artifact: -debug\n+          - test: hs\/tier1 serviceability\n+            suites: test\/hotspot\/jtreg\/:tier1_serviceability\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ needs.prerequisites.outputs.jdk_version }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v3\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v3\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore jtreg artifact\n+        id: jtreg_restore\n+        uses: actions\/download-artifact@v3\n+        with:\n+          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jtreg\/\n+        continue-on-error: true\n+\n+      - name: Restore jtreg artifact (retry)\n+        uses: actions\/download-artifact@v3\n+        with:\n+          name: transient_jtreg_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jtreg\/\n+        if: steps.jtreg_restore.outcome == 'failure'\n+\n+      - name: Restore build artifacts\n+        id: build_restore\n+        uses: actions\/download-artifact@v3\n+        with:\n+          name: transient_jdk-linux-x64-clang${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jdk-linux-x64-clang${{ matrix.artifact }}\n+        continue-on-error: true\n+\n+      - name: Restore build artifacts (retry)\n+        uses: actions\/download-artifact@v3\n+        with:\n+          name: transient_jdk-linux-x64-clang${{ matrix.artifact }}_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jdk-linux-x64-clang${{ matrix.artifact }}\n+        if: steps.build_restore.outcome == 'failure'\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin${{ matrix.artifact }}\"\n+\n+      - name: Unpack tests\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin-tests${{ matrix.artifact }}\"\n+          tar -xf \"${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin-tests${{ matrix.artifact }}.tar.gz\" -C \"${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin-tests${{ matrix.artifact }}\"\n+\n+      - name: Find root of jdk image dir\n+        run: |\n+          imageroot=`find ${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin${{ matrix.artifact }} -name release -type f`\n+          echo \"imageroot=`dirname ${imageroot}`\" >> $GITHUB_ENV\n+\n+      - name: Run tests\n+        id: run_tests\n+        run: >\n+          JDK_IMAGE_DIR=${{ env.imageroot }}\n+          TEST_IMAGE_DIR=${HOME}\/jdk-linux-x64-clang${{ matrix.artifact }}\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64-clang_bin-tests${{ matrix.artifact }}\n+          BOOT_JDK=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          JT_HOME=${HOME}\/jtreg\n+          make run-test-prebuilt\n+          CONF_NAME=run-test-prebuilt\n+          LOG_CMDLINES=true\n+          JTREG_VERBOSE=fail,error,time\n+          TEST=\"${{ matrix.suites }}\"\n+          TEST_OPTS_JAVA_OPTIONS=\n+          JTREG_KEYWORDS=\"!headful\"\n+          JTREG=\"JAVA_OPTIONS=-XX:-CreateCoredumpOnCrash\"\n+\n+      - name: Generate test failure summary\n+        run: |\n+          #\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+          failure_count=$(echo $failures | wc -w || true)\n+          error_count=$(echo $errors | wc -w || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n+          fi\n+\n+          echo \"::error:: Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n+\n+          echo \"### :boom: Test failures summary\" >> $GITHUB_STEP_SUMMARY\n+\n+          if [[ \"$failures\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported failure:\" >> $GITHUB_STEP_SUMMARY\n+            for test in $failures; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+          if [[ \"$errors\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported errors:\"  >> $GITHUB_STEP_SUMMARY\n+            for test in $errors; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+      - name: Collect failed test output\n+        run: |\n+          #\n+          # This is a separate step, since if the markdown from a step gets bigger than\n+          # 1024 kB it is skipped, but then the summary above is still generated\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+          report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n+          fi\n+\n+          echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n+          for test in $failures $errors; do\n+            anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+            base_path=\"$(echo \"$test\" | tr '#' '_')\"\n+            report_file=\"$report_dir\/$base_path.jtr\"\n+            hs_err_files=\"$report_dir\/$base_path\/hs_err*.log\"\n+            echo \"####  <a id=\"$anchor\">$test\"\n+\n+            echo \"<details><summary>View test results<\/summary>\"\n+            echo \"\"\n+            echo '```'\n+            if [[ -f \"$report_file\" ]]; then\n+              cat \"$report_file\"\n+            else\n+              echo \"Error: Result file $report_file not found\"\n+            fi\n+            echo '```'\n+            echo \"<\/details>\"\n+            echo \"\"\n+\n+            if [[ \"$hs_err_files\" != \"\" ]]; then\n+              echo \"<details><summary>View HotSpot error log<\/summary>\"\n+              echo \"\"\n+              for hs_err in $hs_err_files; do\n+                echo '```'\n+                echo \"$hs_err:\"\n+                echo \"\"\n+                cat \"$hs_err\"\n+                echo '```'\n+              done\n+\n+              echo \"<\/details>\"\n+              echo \"\"\n+            fi\n+\n+          done >> $GITHUB_STEP_SUMMARY\n+\n+          echo \":arrow_right: To see the entire test log, click the job in the list to the left\"  >> $GITHUB_STEP_SUMMARY\n+\n+          # This will abort the entire job in GHA, which is what we want\n+          exit 1\n+\n+      - name: Create suitable test log artifact name\n+        if: always()\n+        run: echo \"logsuffix=`echo ${{ matrix.test }} | sed -e 's!\/!_!'g -e 's! !_!'g`\" >> $GITHUB_ENV\n+\n+      - name: Package test results\n+        if: always()\n+        working-directory: build\/run-test-prebuilt\/test-results\/\n+        run: >\n+          zip -r9\n+          \"$HOME\/linux-x64-clang${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\"\n+          .\n+        continue-on-error: true\n+\n+      - name: Package test support\n+        if: always()\n+        working-directory: build\/run-test-prebuilt\/test-support\/\n+        run: >\n+          zip -r9\n+          \"$HOME\/linux-x64-clang${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\"\n+          .\n+          -i *.jtr\n+          -i *\/hs_err*.log\n+          -i *\/replay*.log\n+        continue-on-error: true\n+\n+      - name: Persist test results\n+        if: always()\n+        uses: actions\/upload-artifact@v3\n+        with:\n+          path: ~\/linux-x64-clang${{ matrix.artifact }}_testresults_${{ env.logsuffix }}.zip\n+        continue-on-error: true\n+\n+      - name: Persist test outputs\n+        if: always()\n+        uses: actions\/upload-artifact@v3\n+        with:\n+          path: ~\/linux-x64-clang${{ matrix.artifact }}_testsupport_${{ env.logsuffix }}.zip\n+        continue-on-error: true\n+\n@@ -1884,0 +2250,1 @@\n+      - linux_x64_clang_test\n","filename":".github\/workflows\/submit.yml","additions":367,"deletions":0,"binary":false,"changes":367,"status":"modified"}]}