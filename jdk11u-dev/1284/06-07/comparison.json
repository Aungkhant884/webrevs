{"files":[{"patch":"@@ -3614,1 +3614,1 @@\n-      __ mov(rscratch1, (intptr_t)markOop::prototype());\n+      __ mov(rscratch1, (intptr_t)markOop::prototype().value());\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1318,1 +1318,1 @@\n-  intptr_t bits = (intptr_t)markOop::prototype();\n+  intptr_t bits = (intptr_t)markOop::prototype().value();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -631,1 +631,1 @@\n-  assert(markOop::encode_pointer_as_mark(_base)->decode_pointer() == _base,\n+  assert(markOop::encode_pointer_as_mark(_base).decode_pointer() == _base,\n@@ -633,1 +633,1 @@\n-  assert(markOop::encode_pointer_as_mark(&_base[size])->decode_pointer() == &_base[size],\n+  assert(markOop::encode_pointer_as_mark(&_base[size]).decode_pointer() == &_base[size],\n","filename":"src\/hotspot\/share\/memory\/virtualspace.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  return mark()->is_unlocked();\n+  return mark().is_unlocked();\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -800,2 +800,3 @@\n-    assert(temp->is_neutral(), \"invariant\");\n-    test = Atomic::cmpxchg(temp, monitor->header_addr(), mark);\n+    assert(temp.is_neutral(), \"invariant\");\n+    uintptr_t t = Atomic::cmpxchg(temp.value(), (volatile uintptr_t*)monitor->header_addr(), mark.value());\n+    test = markOop(t);\n@@ -1379,1 +1380,1 @@\n-    assert(mark.monitor()->header()->is_neutral(), \"monitor must record a good object header\");\n+    assert(mark.monitor()->header().is_neutral(), \"monitor must record a good object header\");\n@@ -1412,1 +1413,1 @@\n-      assert(inf->header()->is_neutral(), \"invariant\");\n+      assert(inf->header().is_neutral(), \"invariant\");\n@@ -1496,1 +1497,1 @@\n-      assert(dmw->is_neutral(), \"invariant\");\n+      assert(dmw.is_neutral(), \"invariant\");\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}