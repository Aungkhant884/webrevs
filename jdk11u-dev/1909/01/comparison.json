{"files":[{"patch":"@@ -35,2 +35,1 @@\n-import sun.security.x509.AlgorithmId;\n-import static sun.security.rsa.RSAUtil.KeyType;\n+import sun.security.rsa.RSAUtil.KeyType;\n@@ -214,1 +213,1 @@\n-        checkKeyAlgo(key, type.keyAlgo());\n+        checkKeyAlgo(key, type.keyAlgo);\n@@ -262,1 +261,1 @@\n-                    RSAUtil.createAlgorithmId(type, rsaKey.getParams()),\n+                    type, rsaKey.getParams(),\n@@ -272,1 +271,1 @@\n-            checkKeyAlgo(translated, type.keyAlgo());\n+            checkKeyAlgo(translated, type.keyAlgo);\n@@ -287,1 +286,1 @@\n-                    RSAUtil.createAlgorithmId(type, rsaKey.getParams()),\n+                    type, rsaKey.getParams(),\n@@ -305,1 +304,1 @@\n-                    RSAUtil.createAlgorithmId(type, rsaKey.getParams()),\n+                    type, rsaKey.getParams(),\n@@ -317,1 +316,1 @@\n-            checkKeyAlgo(translated, type.keyAlgo());\n+            checkKeyAlgo(translated, type.keyAlgo);\n@@ -332,1 +331,1 @@\n-            checkKeyAlgo(generated, type.keyAlgo());\n+            checkKeyAlgo(generated, type.keyAlgo);\n@@ -338,1 +337,1 @@\n-                    RSAUtil.createAlgorithmId(type, rsaSpec.getParams()),\n+                    type, rsaSpec.getParams(),\n@@ -358,1 +357,1 @@\n-            checkKeyAlgo(generated, type.keyAlgo());\n+            checkKeyAlgo(generated, type.keyAlgo);\n@@ -364,1 +363,1 @@\n-                    RSAUtil.createAlgorithmId(type, rsaSpec.getParams()),\n+                    type, rsaSpec.getParams(),\n@@ -381,1 +380,1 @@\n-                    RSAUtil.createAlgorithmId(type, rsaSpec.getParams()),\n+                    type, rsaSpec.getParams(),\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyFactory.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import sun.security.rsa.RSAUtil.KeyType;\n+\n@@ -37,2 +39,0 @@\n-import sun.security.x509.AlgorithmId;\n-import static sun.security.rsa.RSAUtil.KeyType;\n@@ -58,1 +58,1 @@\n-    private AlgorithmId rsaId;\n+    private AlgorithmParameterSpec keyParams;\n@@ -119,1 +119,1 @@\n-            this.rsaId = RSAUtil.createAlgorithmId(type, tmpParams);\n+            this.keyParams = RSAUtil.checkParamsAgainstType(type, tmpParams);\n@@ -180,3 +180,4 @@\n-                PublicKey publicKey = new RSAPublicKeyImpl(rsaId, n, e);\n-                PrivateKey privateKey = new RSAPrivateCrtKeyImpl(\n-                    rsaId, n, e, d, p, q, pe, qe, coeff);\n+                PublicKey publicKey = new RSAPublicKeyImpl(type, keyParams,\n+                        n, e);\n+                PrivateKey privateKey = new RSAPrivateCrtKeyImpl(type,\n+                        keyParams, n, e, d, p, q, pe, qe, coeff);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyPairGenerator.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import sun.security.x509.AlgorithmId;\n@@ -40,1 +39,1 @@\n-import static sun.security.rsa.RSAUtil.KeyType;\n+import sun.security.rsa.RSAUtil.KeyType;\n@@ -69,0 +68,2 @@\n+    private transient KeyType type;\n+\n@@ -72,1 +73,1 @@\n-    private AlgorithmParameterSpec keyParams;\n+    private transient AlgorithmParameterSpec keyParams;\n@@ -87,1 +88,1 @@\n-                key.algid,\n+                key.type, key.keyParams,\n@@ -116,1 +117,0 @@\n-        AlgorithmId rsaId = RSAUtil.createAlgorithmId(type, params);\n@@ -121,1 +121,1 @@\n-            return new RSAPrivateKeyImpl(rsaId, n, d);\n+            return new RSAPrivateKeyImpl(type, params, n, d);\n@@ -123,1 +123,1 @@\n-            return new RSAPrivateCrtKeyImpl(rsaId, n, e, d,\n+            return new RSAPrivateCrtKeyImpl(type, params, n, e, d,\n@@ -139,2 +139,4 @@\n-            \/\/ this will check the validity of params\n-            this.keyParams = RSAUtil.getParamSpec(algid);\n+            \/\/ check the validity of oid and params\n+            Object[] o = RSAUtil.getTypeAndParamSpec(algid);\n+            this.type = (KeyType) o[0];\n+            this.keyParams = (AlgorithmParameterSpec) o[1];\n@@ -150,1 +152,1 @@\n-    RSAPrivateCrtKeyImpl(AlgorithmId rsaId,\n+    RSAPrivateCrtKeyImpl(KeyType type, AlgorithmParameterSpec keyParams,\n@@ -164,1 +166,0 @@\n-        this.keyParams = RSAUtil.getParamSpec(rsaId);\n@@ -166,2 +167,0 @@\n-        \/\/ generate the encoding\n-        algid = rsaId;\n@@ -169,0 +168,11 @@\n+            \/\/ validate and generate the algid encoding\n+            algid = RSAUtil.createAlgorithmId(type, keyParams);\n+        } catch (ProviderException exc) {\n+            throw new InvalidKeyException(exc);\n+        }\n+\n+        this.type = type;\n+        this.keyParams = keyParams;\n+\n+        try {\n+            \/\/ generate the key encoding\n@@ -191,1 +201,1 @@\n-        return algid.getName();\n+        return type.keyAlgo;\n@@ -251,3 +261,3 @@\n-        return \"SunRsaSign \" + getAlgorithm() + \" private CRT key, \" + n.bitLength()\n-               + \" bits\" + \"\\n  params: \" + keyParams + \"\\n  modulus: \" + n\n-               + \"\\n  private exponent: \" + d;\n+        return \"SunRsaSign \" + type.keyAlgo + \" private CRT key, \"\n+               + n.bitLength() + \" bits\" + \"\\n  params: \" + keyParams\n+               + \"\\n  modulus: \" + n + \"\\n  private exponent: \" + d;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateCrtKeyImpl.java","additions":28,"deletions":18,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import sun.security.x509.AlgorithmId;\n@@ -39,0 +38,2 @@\n+import sun.security.rsa.RSAUtil.KeyType;\n+\n@@ -60,0 +61,2 @@\n+    private transient final KeyType type;\n+\n@@ -63,1 +66,1 @@\n-    private final AlgorithmParameterSpec keyParams;\n+    private transient final AlgorithmParameterSpec keyParams;\n@@ -69,2 +72,3 @@\n-    RSAPrivateKeyImpl(AlgorithmId rsaId, BigInteger n, BigInteger d)\n-            throws InvalidKeyException {\n+    RSAPrivateKeyImpl(KeyType type, AlgorithmParameterSpec keyParams,\n+            BigInteger n, BigInteger d) throws InvalidKeyException {\n+\n@@ -75,1 +79,0 @@\n-        this.keyParams = RSAUtil.getParamSpec(rsaId);\n@@ -77,2 +80,0 @@\n-        \/\/ generate the encoding\n-        algid = rsaId;\n@@ -80,0 +81,11 @@\n+            \/\/ validate and generate the algid encoding\n+            algid = RSAUtil.createAlgorithmId(type, keyParams);\n+        } catch (ProviderException pe) {\n+            throw new InvalidKeyException(pe);\n+        }\n+\n+        this.type = type;\n+        this.keyParams = keyParams;\n+\n+        try {\n+            \/\/ generate the key encoding\n@@ -102,1 +114,1 @@\n-        return algid.getName();\n+        return type.keyAlgo;\n@@ -126,1 +138,1 @@\n-        return \"Sun \" + getAlgorithm() + \" private key, \" + n.bitLength()\n+        return \"Sun \" + type.keyAlgo + \" private key, \" + n.bitLength()\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateKeyImpl.java","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import sun.security.x509.AlgorithmId;\n@@ -39,1 +38,1 @@\n-import static sun.security.rsa.RSAUtil.KeyType;\n+import sun.security.rsa.RSAUtil.KeyType;\n@@ -61,0 +60,2 @@\n+    private transient KeyType type;\n+\n@@ -64,1 +65,1 @@\n-    private AlgorithmParameterSpec keyParams;\n+    private transient AlgorithmParameterSpec keyParams;\n@@ -82,2 +83,1 @@\n-        AlgorithmId rsaId = RSAUtil.createAlgorithmId(type, params);\n-        return new RSAPublicKeyImpl(rsaId, n, e);\n+        return new RSAPublicKeyImpl(type, params, n, e);\n@@ -87,1 +87,1 @@\n-     * Construct a RSA key from AlgorithmId and its components. Used by\n+     * Construct a RSA key from the specified type and components. Used by\n@@ -90,2 +90,3 @@\n-    RSAPublicKeyImpl(AlgorithmId rsaId, BigInteger n, BigInteger e)\n-            throws InvalidKeyException {\n+    RSAPublicKeyImpl(KeyType type, AlgorithmParameterSpec keyParams,\n+            BigInteger n, BigInteger e) throws InvalidKeyException {\n+\n@@ -97,1 +98,0 @@\n-        this.keyParams = RSAUtil.getParamSpec(rsaId);\n@@ -99,2 +99,0 @@\n-        \/\/ generate the encoding\n-        algid = rsaId;\n@@ -102,0 +100,11 @@\n+            \/\/ validate and generate algid encoding\n+            algid = RSAUtil.createAlgorithmId(type, keyParams);\n+        } catch (ProviderException pe) {\n+            throw new InvalidKeyException(pe);\n+        }\n+\n+        this.type = type;\n+        this.keyParams = keyParams;\n+\n+        try {\n+            \/\/ generate the key encoding\n@@ -127,2 +136,4 @@\n-            \/\/ this will check the validity of params\n-            this.keyParams = RSAUtil.getParamSpec(algid);\n+            \/\/ check the validity of oid and params\n+            Object[] o = RSAUtil.getTypeAndParamSpec(algid);\n+            this.type = (KeyType) o[0];\n+            this.keyParams = (AlgorithmParameterSpec) o[1];\n@@ -151,1 +162,1 @@\n-        return algid.getName();\n+        return type.keyAlgo;\n@@ -196,1 +207,1 @@\n-        return \"Sun \" + getAlgorithm() + \" public key, \" + n.bitLength()\n+        return \"Sun \" + type.keyAlgo + \" public key, \" + n.bitLength()\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPublicKeyImpl.java","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-        RSA (\"RSA\"),\n-        PSS (\"RSASSA-PSS\")\n+        RSA (\"RSA\", AlgorithmId.RSAEncryption_oid, null),\n+        PSS (\"RSASSA-PSS\", AlgorithmId.RSASSA_PSS_oid, PSSParameterSpec.class)\n@@ -47,1 +47,3 @@\n-        private final String algo;\n+        final String keyAlgo;\n+        final ObjectIdentifier oid;\n+        final Class<? extends AlgorithmParameterSpec> paramSpecCls;\n@@ -49,2 +51,5 @@\n-        KeyType(String keyAlgo) {\n-            this.algo = keyAlgo;\n+        KeyType(String keyAlgo, ObjectIdentifier oid,\n+                Class<? extends AlgorithmParameterSpec> paramSpecCls) {\n+            this.keyAlgo = keyAlgo;\n+            this.oid = oid;\n+            this.paramSpecCls = paramSpecCls;\n@@ -52,12 +57,13 @@\n-        public String keyAlgo() {\n-            return algo;\n-        }\n-        public static KeyType lookup(String name)\n-                throws InvalidKeyException, ProviderException {\n-            if (name == null) {\n-                throw new InvalidKeyException(\"Null key algorithm\");\n-            }\n-            for (KeyType kt : KeyType.values()) {\n-                if (kt.keyAlgo().equalsIgnoreCase(name)) {\n-                    return kt;\n-                }\n+\n+        public static KeyType lookup(String name) throws ProviderException {\n+\n+            requireNonNull(name, \"Key algorithm should not be null\");\n+\n+            \/\/ match loosely in order to work with 3rd party providers which\n+            \/\/ may not follow the standard names\n+            if (name.indexOf(\"PSS\") != -1) {\n+                return PSS;\n+            } else if (name.indexOf(\"RSA\") != -1) {\n+                return RSA;\n+            } else { \/\/ no match\n+                throw new ProviderException(\"Unsupported algorithm \" + name);\n@@ -65,2 +71,0 @@\n-            \/\/ no match\n-            throw new ProviderException(\"Unsupported algorithm \" + name);\n@@ -70,1 +74,5 @@\n-    public static void checkParamsAgainstType(KeyType type,\n+    private static void requireNonNull(Object obj, String msg) {\n+        if (obj == null) throw new ProviderException(msg);\n+    }\n+\n+    public static AlgorithmParameterSpec checkParamsAgainstType(KeyType type,\n@@ -72,17 +80,28 @@\n-        switch (type) {\n-            case RSA:\n-                if (paramSpec != null) {\n-                    throw new ProviderException(\"null params expected for \" +\n-                        type.keyAlgo());\n-                }\n-                break;\n-            case PSS:\n-                if ((paramSpec != null) &&\n-                    !(paramSpec instanceof PSSParameterSpec)) {\n-                    throw new ProviderException\n-                        (\"PSSParmeterSpec expected for \" + type.keyAlgo());\n-                }\n-                break;\n-            default:\n-                throw new ProviderException\n-                    (\"Unsupported RSA algorithm \" + type);\n+\n+        \/\/ currently no check for null parameter spec\n+        \/\/ assumption is parameter spec is optional and can be null\n+        if (paramSpec == null) return null;\n+\n+        Class<? extends AlgorithmParameterSpec> expCls = type.paramSpecCls;\n+        if (expCls == null) {\n+            throw new ProviderException(\"null params expected for \" +\n+                    type.keyAlgo);\n+        } else if (!expCls.isInstance(paramSpec)) {\n+            throw new ProviderException\n+                    (expCls + \" expected for \" + type.keyAlgo);\n+        }\n+        return paramSpec;\n+    }\n+\n+    public static AlgorithmParameters getParams(KeyType type,\n+            AlgorithmParameterSpec spec) throws ProviderException {\n+\n+        if (spec == null) return null;\n+\n+        try {\n+            AlgorithmParameters params =\n+                    AlgorithmParameters.getInstance(type.keyAlgo);\n+            params.init(spec);\n+            return params;\n+        } catch (NoSuchAlgorithmException | InvalidParameterSpecException ex) {\n+            throw new ProviderException(ex);\n@@ -97,29 +116,3 @@\n-        ObjectIdentifier oid = null;\n-        AlgorithmParameters params = null;\n-        try {\n-            switch (type) {\n-                case RSA:\n-                    oid = AlgorithmId.RSAEncryption_oid;\n-                    break;\n-                case PSS:\n-                    if (paramSpec != null) {\n-                        params = AlgorithmParameters.getInstance(type.keyAlgo());\n-                        params.init(paramSpec);\n-                    }\n-                    oid = AlgorithmId.RSASSA_PSS_oid;\n-                    break;\n-                default:\n-                    throw new ProviderException\n-                        (\"Unsupported RSA algorithm \"  + type);\n-            }\n-            AlgorithmId result;\n-            if (params == null) {\n-                result = new AlgorithmId(oid);\n-            } else {\n-                result = new AlgorithmId(oid, params);\n-            }\n-            return result;\n-        } catch (NoSuchAlgorithmException | InvalidParameterSpecException e) {\n-            \/\/ should not happen\n-            throw new ProviderException(e);\n-        }\n+        ObjectIdentifier oid = type.oid;\n+        AlgorithmParameters params = getParams(type, paramSpec);\n+        return new AlgorithmId(oid, params);\n@@ -128,4 +121,17 @@\n-    public static AlgorithmParameterSpec getParamSpec(AlgorithmId algid)\n-            throws ProviderException {\n-        if (algid == null) {\n-            throw new ProviderException(\"AlgorithmId should not be null\");\n+    public static AlgorithmParameterSpec getParamSpec(\n+            AlgorithmParameters params) throws ProviderException {\n+\n+        if (params == null) return null;\n+\n+        String algName = params.getAlgorithm();\n+\n+        KeyType type = KeyType.lookup(algName);\n+        Class<? extends AlgorithmParameterSpec> specCls = type.paramSpecCls;\n+        if (specCls == null) {\n+            throw new ProviderException(\"No params accepted for \" +\n+                    type.keyAlgo);\n+        }\n+        try {\n+            return params.getParameterSpec(specCls);\n+        } catch (InvalidParameterSpecException ex) {\n+            throw new ProviderException(ex);\n@@ -133,1 +139,0 @@\n-        return getParamSpec(algid.getParameters());\n@@ -136,1 +141,1 @@\n-    public static AlgorithmParameterSpec getParamSpec(AlgorithmParameters params)\n+    public static Object[] getTypeAndParamSpec(AlgorithmId algid)\n@@ -138,1 +143,0 @@\n-        if (params == null) return null;\n@@ -140,0 +144,5 @@\n+        requireNonNull(algid, \"AlgorithmId should not be null\");\n+\n+        Object[] result = new Object[2];\n+\n+        String algName = algid.getName();\n@@ -141,14 +150,1 @@\n-            String algName = params.getAlgorithm();\n-            KeyType type = KeyType.lookup(algName);\n-            Class<? extends AlgorithmParameterSpec> specCls;\n-            switch (type) {\n-                case RSA:\n-                    throw new ProviderException(\"No params accepted for \" +\n-                        type.keyAlgo());\n-                case PSS:\n-                    specCls = PSSParameterSpec.class;\n-                    break;\n-                default:\n-                    throw new ProviderException(\"Unsupported RSA algorithm: \" + algName);\n-            }\n-            return params.getParameterSpec(specCls);\n+            result[0] = KeyType.lookup(algName);\n@@ -156,4 +152,8 @@\n-            \/\/ pass it up\n-            throw pe;\n-        } catch (Exception e) {\n-            throw new ProviderException(e);\n+            \/\/ accommodate RSA keys encoded with various RSA signature oids\n+            \/\/ for backward compatibility\n+            if (algName.indexOf(\"RSA\") != -1) {\n+                result[0] = KeyType.RSA;\n+            } else {\n+                \/\/ pass it up\n+                throw pe;\n+            }\n@@ -161,0 +161,3 @@\n+\n+        result[1] = getParamSpec(algid.getParameters());\n+        return result;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAUtil.java","additions":95,"deletions":92,"binary":false,"changes":187,"status":"modified"},{"patch":"@@ -359,0 +359,5 @@\n+    OIW_SHA1withRSA_Odd(\"1.3.14.3.2.15\", \"SHA1withRSA\") {\n+        @Override\n+        boolean registerNames() { return false; }\n+    },\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KnownOIDs.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8242897\n+ * @summary Ensure that RSA key factory can parse X.509 encodings containing\n+ * non-standard RSA oid as in older JDK releases before JDK-8146293\n+ * @run main TestRSAOidSupport\n+ *\/\n+\n+import java.security.KeyFactory;\n+import java.security.interfaces.RSAPublicKey;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.security.spec.InvalidKeySpecException;\n+\n+public class TestRSAOidSupport {\n+\n+    \/\/ SubjectKeyInfo DER encoding w\/ Algorithm id 1.3.14.3.2.15\n+    \/\/ which can be used to generate RSA Public Key before PSS\n+    \/\/ support is added\n+    private static String DER_BYTES =\n+             \"3058300906052b0e03020f0500034b003048024100d7157c65e8f22557d8\" +\n+             \"a857122cfe85bddfaba3064c21b345e2a7cdd8a6751e519ab861c5109fb8\" +\n+             \"8cce45d161b9817bc0eccdc30fda69e62cc577775f2c1d66bd0203010001\";\n+\n+    \/\/ utility method for converting hex string to byte array\n+    static byte[] toByteArray(String s) {\n+        byte[] bytes = new byte[s.length() \/ 2];\n+        for (int i = 0; i < bytes.length; i++) {\n+            int index = i * 2;\n+            int v = Integer.parseInt(s.substring(index, index + 2), 16);\n+            bytes[i] = (byte) v;\n+        }\n+        return bytes;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        X509EncodedKeySpec x509Spec = new X509EncodedKeySpec\n+                (toByteArray(DER_BYTES));\n+        String keyAlgo = \"RSA\";\n+        KeyFactory kf = KeyFactory.getInstance(keyAlgo, \"SunRsaSign\");\n+        RSAPublicKey rsaKey = (RSAPublicKey) kf.generatePublic(x509Spec);\n+\n+        if (rsaKey.getAlgorithm() != keyAlgo) {\n+            throw new RuntimeException(\"Key algo should be \" + keyAlgo +\n+                    \", but got \" + rsaKey.getAlgorithm());\n+        }\n+        kf = KeyFactory.getInstance(\"RSASSA-PSS\", \"SunRsaSign\");\n+        try {\n+            kf.generatePublic(x509Spec);\n+            throw new RuntimeException(\"Should throw IKSE\");\n+        } catch (InvalidKeySpecException ikse) {\n+            System.out.println(\"Expected IKSE exception thrown\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/security\/rsa\/TestRSAOidSupport.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -32,2 +32,1 @@\n-import sun.security.x509.AlgorithmId;\n-import static sun.security.rsa.RSAUtil.KeyType;\n+import sun.security.rsa.RSAUtil.KeyType;\n@@ -47,1 +46,1 @@\n-    private AlgorithmId rsaId;\n+    private AlgorithmParameterSpec keyParams;\n@@ -101,1 +100,1 @@\n-            this.rsaId = RSAUtil.createAlgorithmId(type, tmpParams);\n+            this.keyParams = RSAUtil.checkParamsAgainstType(type, tmpParams);\n@@ -539,1 +538,1 @@\n-            PublicKey publicKey = new RSAPublicKeyImpl(rsaId, n, e);\n+            PublicKey publicKey = new RSAPublicKeyImpl(type, keyParams, n, e);\n@@ -541,1 +540,1 @@\n-                    rsaId, n, e, d, p, q, pe, qe, coeff);\n+                    type, keyParams, n, e, d, p, q, pe, qe, coeff);\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/java.base\/sun\/security\/rsa\/RSAKeyPairGenerator.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}