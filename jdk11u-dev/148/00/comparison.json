{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,1 +121,1 @@\n-     * Create trust store with given certificates.\n+     * Create trust store with given certificates and corresponding aliases.\n@@ -125,0 +125,1 @@\n+     * @param aliases the aliases corresponding to the trust entries respectively\n@@ -128,2 +129,7 @@\n-    public static KeyStore createTrustStore(String type, String[] certStrs)\n-            throws Exception {\n+    public static KeyStore createTrustStore(String type, String[] certStrs,\n+            String[] aliases) throws Exception {\n+        if (aliases != null && aliases.length != certStrs.length) {\n+            throw new IllegalArgumentException(\n+                    \"The counts of certs and aliases are not matching.\");\n+        }\n+\n@@ -133,1 +139,2 @@\n-            trustStore.setCertificateEntry(\"trust-\" + i,\n+            String alias = aliases == null ? \"trust-\" + i : aliases[i];\n+            trustStore.setCertificateEntry(alias,\n@@ -143,0 +150,1 @@\n+     * @param type the key store type\n@@ -147,1 +155,1 @@\n-    public static KeyStore createTrustStore(String[] certStrs)\n+    public static KeyStore createTrustStore(String type, String[] certStrs)\n@@ -149,1 +157,1 @@\n-        return createTrustStore(DEFAULT_TYPE, certStrs);\n+        return createTrustStore(type, certStrs, null);\n@@ -153,1 +161,25 @@\n-     * Create key store with given entries.\n+     * Create trust store with given certificates and corresponding aliases.\n+     *\n+     * @param certStrs the certificates added to the trust store\n+     * @param aliases the aliases corresponding to the trust entries respectively\n+     * @return the trust store\n+     * @throws Exception on errors\n+     *\/\n+    public static KeyStore createTrustStore(String[] certStrs, String[] aliases)\n+            throws Exception {\n+        return createTrustStore(DEFAULT_TYPE, certStrs, aliases);\n+    }\n+\n+    \/**\n+     * Create trust store with given certificates.\n+     *\n+     * @param certStrs the certificates added to the trust store\n+     * @return the trust store\n+     * @throws Exception on errors\n+     *\/\n+    public static KeyStore createTrustStore(String[] certStrs) throws Exception {\n+        return createTrustStore(DEFAULT_TYPE, certStrs, null);\n+    }\n+\n+    \/**\n+     * Create key store with given entries and corresponding aliases.\n@@ -157,0 +189,1 @@\n+     * @param aliases the aliases corresponding to the key entries respectively\n@@ -160,2 +193,7 @@\n-    public static KeyStore createKeyStore(String type, KeyEntry[] entries)\n-            throws Exception {\n+    public static KeyStore createKeyStore(String type, KeyEntry[] entries,\n+            String[] aliases) throws Exception {\n+        if (aliases != null && aliases.length != entries.length) {\n+            throw new IllegalArgumentException(\n+                    \"The counts of entries and aliases are not matching.\");\n+        }\n+\n@@ -176,1 +214,2 @@\n-            keyStore.setKeyEntry(\"cert-\" + i, key, password, chain);\n+            String alias = aliases == null ? \"cert-\" + i : aliases[i];\n+            keyStore.setKeyEntry(alias, key, password, chain);\n@@ -185,0 +224,1 @@\n+     * @param type the key store type\n@@ -189,1 +229,1 @@\n-    public static KeyStore createKeyStore(KeyEntry[] entries)\n+    public static KeyStore createKeyStore(String type, KeyEntry[] entries)\n@@ -191,1 +231,1 @@\n-        return createKeyStore(DEFAULT_TYPE, entries);\n+        return createKeyStore(type, entries, null);\n@@ -195,5 +235,1 @@\n-     * Create key store with given private keys and associated certificate chains.\n-     * Note that here one chain contains only one certificate. If a chain needs\n-     * to contain multiple certificates, please use the following methods:\n-     * createKeyStore(String type, KeyEntry[] entries);\n-     * createKeyStore(KeyEntry[] entries)\n+     * Create key store with given entries and corresponding aliases.\n@@ -201,6 +237,3 @@\n-     * @param type the key store type\n-     * @param keyAlgos the key algorithm array\n-     * @param keyStrs the PEM-encoded PKCS8 key string array\n-     * @param passwords the key-associated password array\n-     * @param certStrs the key-associated certificate array\n-     * @return  the key store\n+     * @param entries the key entries added to the key store\n+     * @param aliases the aliases corresponding to the key entries respectively\n+     * @return the key store\n@@ -209,2 +242,1 @@\n-    public static KeyStore createKeyStore(String type, String[] keyAlgos,\n-            String[] keyStrs, String[] passwords, String[] certStrs)\n+    public static KeyStore createKeyStore(KeyEntry[] entries, String[] aliases)\n@@ -212,9 +244,1 @@\n-        KeyEntry[] entries = new KeyEntry[keyStrs.length];\n-        for (int i = 0; i < entries.length; i++) {\n-            entries[i] = new KeyEntry(\n-                    keyAlgos[i],\n-                    keyStrs[i],\n-                    passwords == null ? null : passwords[i],\n-                    new String[] { certStrs[i] });\n-        }\n-        return createKeyStore(type, entries);\n+        return createKeyStore(DEFAULT_TYPE, entries, aliases);\n@@ -224,5 +248,1 @@\n-     * Create key store with given private keys and associated certificate chains.\n-     * Note that here one chain contains only one certificate. If a chain needs\n-     * to contain multiple certificates, please use the following methods:\n-     * createKeyStore(String type, KeyEntry[] entries);\n-     * createKeyStore(KeyEntry[] entries)\n+     * Create key store with given entries.\n@@ -230,5 +250,2 @@\n-     * @param keyAlgos the key algorithm array\n-     * @param keyStrs the PEM-encoded PKCS8 key string array\n-     * @param passwords the key-associated password array\n-     * @param certStrs the key-associated certificate array\n-     * @return  the key store\n+     * @param entries the key entries added to the key store\n+     * @return the key store\n@@ -237,4 +254,2 @@\n-    public static KeyStore createKeyStore(String[] keyAlgos, String[] keyStrs,\n-            String[] passwords, String[] certStrs) throws Exception {\n-        return createKeyStore(DEFAULT_TYPE, keyAlgos, keyStrs, passwords,\n-                certStrs);\n+    public static KeyStore createKeyStore(KeyEntry[] entries) throws Exception {\n+        return createKeyStore(DEFAULT_TYPE, entries, null);\n@@ -243,0 +258,2 @@\n+    \/\/ Initialize key store with given store type.\n+    \/\/ Note that it always has no password.\n","filename":"test\/lib\/jdk\/test\/lib\/security\/KeyStoreUtils.java","additions":66,"deletions":49,"binary":false,"changes":115,"status":"modified"}]}