{"files":[{"patch":"@@ -0,0 +1,244 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Checks HTTP versions when interacting with an HTTP\/2 server\n+ * @bug 8242044\n+ * @modules java.base\/sun.net.www.http\n+ *          java.net.http\/jdk.internal.net.http.common\n+ *          java.net.http\/jdk.internal.net.http.frame\n+ *          java.net.http\/jdk.internal.net.http.hpack\n+ *          java.logging\n+ * @library \/lib\/testlibrary \/test\/lib http2\/server\n+ * @build Http2TestServer\n+ * @build jdk.testlibrary.SimpleSSLContext\n+ * @build jdk.test.lib.Platform\n+ * @run testng\/othervm HttpVersionsTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import javax.net.ssl.SSLContext;\n+import jdk.testlibrary.SimpleSSLContext;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import static java.lang.String.format;\n+import static java.lang.System.out;\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static java.net.http.HttpResponse.BodyHandlers.ofString;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class HttpVersionsTest {\n+\n+    SSLContext sslContext;\n+    Http2TestServer http2TestServer;\n+    Http2TestServer https2TestServer;\n+    String http2URI;\n+    String https2URI;\n+\n+    static final int ITERATIONS = 3;\n+    static final String[] BODY = new String[] {\n+            \"I'd like another drink I think\",\n+            \"Another drink to make me pink\",\n+            \"I think I'll drink until I stink\",\n+            \"I'll drink until I cannot blink\"\n+    };\n+    int nextBodyId;\n+\n+    @DataProvider(name = \"scenarios\")\n+    public Object[][] scenarios() {\n+        return new Object[][] {\n+                { http2URI,  true  },\n+                { https2URI, true  },\n+                { http2URI,  false },\n+                { https2URI, false },\n+        };\n+    }\n+\n+    \/** Checks that an HTTP\/2 request receives an HTTP\/2 response. *\/\n+    @Test(dataProvider = \"scenarios\")\n+    void testHttp2Get(String uri, boolean sameClient) throws Exception {\n+        out.println(format(\"\\n--- testHttp2Get uri:%s, sameClient:%s\", uri, sameClient));\n+        HttpClient client = null;\n+        for (int i=0; i<ITERATIONS; i++) {\n+            if (!sameClient || client == null)\n+                client = HttpClient.newBuilder()\n+                                   .sslContext(sslContext)\n+                                   .version(HTTP_2)\n+                                   .build();\n+\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(uri))\n+                    .build();\n+            HttpResponse<String> response = client.send(request, ofString());\n+            out.println(\"Got response: \" + response);\n+            out.println(\"Got body: \" + response.body());\n+\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), HTTP_2);\n+            assertEquals(response.body(), \"\");\n+            if (uri.startsWith(\"https\"))\n+                assertTrue(response.sslSession().isPresent());\n+        }\n+    }\n+\n+    @Test(dataProvider = \"scenarios\")\n+    void testHttp2Post(String uri, boolean sameClient) throws Exception {\n+        out.println(format(\"\\n--- testHttp2Post uri:%s, sameClient:%s\", uri, sameClient));\n+        HttpClient client = null;\n+        for (int i=0; i<ITERATIONS; i++) {\n+            if (!sameClient || client == null)\n+                client = HttpClient.newBuilder()\n+                                   .sslContext(sslContext)\n+                                   .version(HTTP_2)\n+                                   .build();\n+\n+            String msg = BODY[nextBodyId++%4];\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(uri))\n+                    .POST(BodyPublishers.ofString(msg))\n+                    .build();\n+            HttpResponse<String> response = client.send(request, ofString());\n+            out.println(\"Got response: \" + response);\n+            out.println(\"Got body: \" + response.body());\n+\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), HTTP_2);\n+            assertEquals(response.body(), msg);\n+            if (uri.startsWith(\"https\"))\n+                assertTrue(response.sslSession().isPresent());\n+        }\n+    }\n+\n+    \/** Checks that an HTTP\/1.1 request receives an HTTP\/1.1 response, from the HTTP\/2 server. *\/\n+    @Test(dataProvider = \"scenarios\")\n+    void testHttp1dot1Get(String uri, boolean sameClient) throws Exception {\n+        out.println(format(\"\\n--- testHttp1dot1Get uri:%s, sameClient:%s\", uri, sameClient));\n+        HttpClient client = null;\n+        for (int i=0; i<ITERATIONS; i++) {\n+            if (!sameClient || client == null)\n+                client = HttpClient.newBuilder()\n+                                   .sslContext(sslContext)\n+                                   .version(HTTP_1_1)\n+                                   .build();\n+\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(uri))\n+                    .build();\n+            HttpResponse<String> response = client.send(request, ofString());\n+            out.println(\"Got response: \" + response);\n+            out.println(\"Got body: \" + response.body());\n+            response.headers().firstValue(\"X-Received-Body\").ifPresent(s -> out.println(\"X-Received-Body:\" + s));\n+\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), HTTP_1_1);\n+            assertEquals(response.body(), \"\");\n+            assertEquals(response.headers().firstValue(\"X-Magic\").get(),\n+                         \"HTTP\/1.1 request received by HTTP\/2 server\");\n+            assertEquals(response.headers().firstValue(\"X-Received-Body\").get(), \"\");\n+            if (uri.startsWith(\"https\"))\n+                assertTrue(response.sslSession().isPresent());\n+        }\n+    }\n+\n+    @Test(dataProvider = \"scenarios\")\n+    void testHttp1dot1Post(String uri, boolean sameClient) throws Exception {\n+        out.println(format(\"\\n--- testHttp1dot1Post uri:%s, sameClient:%s\", uri, sameClient));\n+        HttpClient client = null;\n+        for (int i=0; i<ITERATIONS; i++) {\n+            if (!sameClient || client == null)\n+                client = HttpClient.newBuilder()\n+                                   .sslContext(sslContext)\n+                                   .version(HTTP_1_1)\n+                                   .build();\n+            String msg = BODY[nextBodyId++%4];\n+            HttpRequest request = HttpRequest.newBuilder(URI.create(uri))\n+                    .POST(BodyPublishers.ofString(msg))\n+                    .build();\n+            HttpResponse<String> response = client.send(request, ofString());\n+            out.println(\"Got response: \" + response);\n+            out.println(\"Got body: \" + response.body());\n+            response.headers().firstValue(\"X-Received-Body\").ifPresent(s -> out.println(\"X-Received-Body:\" + s));\n+\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.version(), HTTP_1_1);\n+            assertEquals(response.body(), \"\");\n+            assertEquals(response.headers().firstValue(\"X-Magic\").get(),\n+                         \"HTTP\/1.1 request received by HTTP\/2 server\");\n+            assertEquals(response.headers().firstValue(\"X-Received-Body\").get(), msg);\n+            if (uri.startsWith(\"https\"))\n+                assertTrue(response.sslSession().isPresent());\n+        }\n+    }\n+\n+    \/\/ -- Infrastructure\n+\n+    static final ExecutorService executor = Executors.newCachedThreadPool();\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        sslContext = new SimpleSSLContext().get();\n+        if (sslContext == null)\n+            throw new AssertionError(\"Unexpected null sslContext\");\n+\n+        http2TestServer =  new Http2TestServer(\"localhost\", false, 0, executor, 50, null, null, true);\n+        http2TestServer.addHandler(new Http2VerEchoHandler(), \"\/http2\/vts\");\n+        http2URI = \"http:\/\/\" + http2TestServer.serverAuthority() + \"\/http2\/vts\";\n+\n+        https2TestServer =  new Http2TestServer(\"localhost\", true, 0, executor, 50, null, sslContext, true);\n+        https2TestServer.addHandler(new Http2VerEchoHandler(), \"\/https2\/vts\");\n+        https2URI = \"https:\/\/\" + https2TestServer.serverAuthority() + \"\/https2\/vts\";\n+\n+        http2TestServer.start();\n+        https2TestServer.start();\n+    }\n+\n+    @AfterTest\n+    public void teardown() throws Exception {\n+        http2TestServer.stop();\n+        https2TestServer.stop();\n+        executor.shutdown();\n+    }\n+\n+    static class Http2VerEchoHandler implements Http2Handler {\n+        @Override\n+        public void handle(Http2TestExchange t) throws IOException {\n+            try (InputStream is = t.getRequestBody();\n+                 OutputStream os = t.getResponseBody()) {\n+                byte[] bytes = is.readAllBytes();\n+                t.sendResponseHeaders(200, bytes.length);\n+                os.write(bytes);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpVersionsTest.java","additions":244,"deletions":0,"binary":false,"changes":244,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+    final boolean supportsHTTP11;\n@@ -114,0 +115,12 @@\n+    public Http2TestServer(String serverName,\n+                           boolean secure,\n+                           int port,\n+                           ExecutorService exec,\n+                           int backlog,\n+                           Properties properties,\n+                           SSLContext context)\n+        throws Exception\n+    {\n+        this(serverName, secure, port, exec, backlog, properties, context, false);\n+    }\n+\n@@ -117,1 +130,6 @@\n-     * or TLS \"h2\"\/\n+     * or TLS \"h2\".\n+     *\n+     * The HTTP\/1.1 support, when supportsHTTP11 is true, is currently limited\n+     * to a canned 0-length response that contains the following headers:\n+     *       \"X-Magic\", \"HTTP\/1.1 request received by HTTP\/2 server\",\n+     *       \"X-Received-Body\", <the request body>);\n@@ -126,0 +144,4 @@\n+     * @param supportsHTTP11 if true, the server may issue an HTTP\/1.1 response\n+     *        to either 1) a non-Upgrade HTTP\/1.1 request, or 2) a secure\n+     *        connection without the h2 ALPN. Otherwise, false to operate in\n+     *        HTTP\/2 mode exclusively.\n@@ -133,1 +155,2 @@\n-                           SSLContext context)\n+                           SSLContext context,\n+                           boolean supportsHTTP11)\n@@ -137,0 +160,1 @@\n+        this.supportsHTTP11 = supportsHTTP11;\n@@ -223,1 +247,5 @@\n-        sslp.setApplicationProtocols(new String[]{\"h2\"});\n+        if (supportsHTTP11) {\n+            sslp.setApplicationProtocols(new String[]{\"h2\", \"http\/1.1\"});\n+        } else {\n+            sslp.setApplicationProtocols(new String[]{\"h2\"});\n+        }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServer.java","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -126,0 +127,2 @@\n+        System.err.println(\"TestServer: New connection from \" + socket);\n+\n@@ -127,1 +130,5 @@\n-            handshake(server.serverName(), (SSLSocket)socket);\n+            SSLSocket sslSocket = (SSLSocket)socket;\n+            handshake(server.serverName(), sslSocket);\n+            if (!server.supportsHTTP11 && !\"h2\".equals(sslSocket.getApplicationProtocol())) {\n+                throw new IOException(\"Unexpected ALPN: [\" + sslSocket.getApplicationProtocol() + \"]\");\n+            }\n@@ -129,1 +136,0 @@\n-        System.err.println(\"TestServer: New connection from \" + socket);\n@@ -251,1 +257,1 @@\n-            \/\/ no name set. No need to check\n+            sock.getSession(); \/\/ awaits handshake completion\n@@ -307,2 +313,1 @@\n-    Http1InitialRequest doUpgrade() throws IOException {\n-        Http1InitialRequest upgrade = readHttp1Request();\n+    Http1InitialRequest doUpgrade(Http1InitialRequest upgrade) throws IOException {\n@@ -354,0 +359,16 @@\n+    \/** Sends a pre-canned HTTP\/1.1 response. *\/\n+    private void standardHTTP11Response(Http1InitialRequest request)\n+        throws IOException\n+    {\n+        String upgradeHeader = getHeader(request.headers, \"Upgrade\");\n+        if (upgradeHeader != null) {\n+            throw new IOException(\"Unexpected Upgrade header:\" + upgradeHeader);\n+        }\n+\n+        sendHttp1Response(200, \"OK\",\n+                          \"Connection\", \"close\",\n+                          \"Content-Length\", \"0\",\n+                          \"X-Magic\", \"HTTP\/1.1 request received by HTTP\/2 server\",\n+                          \"X-Received-Body\", new String(request.body, UTF_8));\n+    }\n+\n@@ -357,7 +378,18 @@\n-            upgrade = doUpgrade();\n-        } else {\n-            readPreface();\n-            sendSettingsFrame(true);\n-            clientSettings = (SettingsFrame) readFrame();\n-            if (clientSettings.getFlag(SettingsFrame.ACK)) {\n-                \/\/ we received the ack to our frame first\n+            Http1InitialRequest request = readHttp1Request();\n+            String h2c = getHeader(request.headers, \"Upgrade\");\n+            if (h2c == null || !h2c.equals(\"h2c\")) {\n+                if (server.supportsHTTP11) {\n+                    standardHTTP11Response(request);\n+                    socket.close();\n+                    return;\n+                } else {\n+                    System.err.println(\"Server:HEADERS: \" + upgrade);\n+                    throw new IOException(\"Bad upgrade 1 \" + h2c);\n+                }\n+            }\n+            upgrade = doUpgrade(request);\n+        } else { \/\/ secure\n+            SSLSocket sslSocket = (SSLSocket)socket;\n+            if (sslSocket.getApplicationProtocol().equals(\"h2\")) {\n+                readPreface();\n+                sendSettingsFrame(true);\n@@ -365,0 +397,13 @@\n+                if (clientSettings.getFlag(SettingsFrame.ACK)) {\n+                    \/\/ we received the ack to our frame first\n+                    clientSettings = (SettingsFrame) readFrame();\n+                }\n+                nextstream = 1;\n+            } else if (sslSocket.getApplicationProtocol().equals(\"http\/1.1\") ||\n+                       sslSocket.getApplicationProtocol().equals(\"\")) {\n+                standardHTTP11Response(readHttp1Request());\n+                socket.shutdownOutput();\n+                socket.close();\n+                return;\n+            } else {\n+                throw new IOException(\"Unexpected ALPN:\" + sslSocket.getApplicationProtocol());\n@@ -366,1 +411,0 @@\n-            nextstream = 1;\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServerConnection.java","additions":58,"deletions":14,"binary":false,"changes":72,"status":"modified"}]}