{"files":[{"patch":"@@ -246,9 +246,14 @@\n-        Set<String> platformAnnotations = new HashSet<>();\n-        platformAnnotations.add(\"java.lang.Deprecated\");\n-        platformAnnotations.add(\"java.lang.Override\");\n-        platformAnnotations.add(\"java.lang.SuppressWarnings\");\n-        platformAnnotations.add(\"java.lang.annotation.Documented\");\n-        platformAnnotations.add(\"java.lang.annotation.Inherited\");\n-        platformAnnotations.add(\"java.lang.annotation.Retention\");\n-        platformAnnotations.add(\"java.lang.annotation.Target\");\n-        return Collections.unmodifiableSet(platformAnnotations);\n+        final String module_prefix =\n+            Feature.MODULES.allowedInSource(source) ? \"java.base\/\" : \"\";\n+        return Set.of(module_prefix + \"java.lang.Deprecated\",\n+                      module_prefix + \"java.lang.FunctionalInterface\",\n+                      module_prefix + \"java.lang.Override\",\n+                      module_prefix + \"java.lang.SafeVarargs\",\n+                      module_prefix + \"java.lang.SuppressWarnings\",\n+\n+                      module_prefix + \"java.lang.annotation.Documented\",\n+                      module_prefix + \"java.lang.annotation.Inherited\",\n+                      module_prefix + \"java.lang.annotation.Native\",\n+                      module_prefix + \"java.lang.annotation.Repeatable\",\n+                      module_prefix + \"java.lang.annotation.Retention\",\n+                      module_prefix + \"java.lang.annotation.Target\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8193214\n+ * @summary Verify annotations without processors warning not given for base module annotations.\n+ * @library \/tools\/javac\/lib\n+ * @modules java.compiler\n+ * @build JavacTestingAbstractProcessor TestAnnotationsWithoutProcessors\n+ * @compile\/ref=empty.out -XDrawDiagnostics -Xlint:processing -processor TestAnnotationsWithoutProcessors --release 8 TestAnnotationsWithoutProcessors.java\n+ * @compile\/ref=empty.out -XDrawDiagnostics -Xlint:processing -processor TestAnnotationsWithoutProcessors TestAnnotationsWithoutProcessors.java\n+ *\/\n+\n+import java.lang.annotation.*;\n+import java.util.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.*;\n+\n+\/**\n+ * Use various annotations in java.base.\n+ *\/\n+@SuppressWarnings(\"unchecked\")\n+public class TestAnnotationsWithoutProcessors extends JavacTestingAbstractProcessor {\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        return false;\n+    }\n+\n+    @SafeVarargs\n+    @Deprecated\n+    public static void main(String... args) {\n+        return;\n+    }\n+\n+    @FunctionalInterface\n+    interface OneMethod {\n+        String method();\n+    }\n+\n+    @Native\n+    public double TAU = 2.0 * Math.PI;\n+\n+    @Documented\n+    @Inherited\n+    @Repeatable(TestAnnotationTypes.class)\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE)\n+    @interface TestAnnotationType {\n+    }\n+\n+    @Documented\n+    @Inherited\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target(ElementType.TYPE)\n+    @interface TestAnnotationTypes {\n+        TestAnnotationType[] value();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/warnings\/LintProcessing\/TestAnnotationsWithoutProcessors.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/processing\/warnings\/LintProcessing\/empty.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/langtools\/test\/TEST.ROOT","status":"copied"}]}