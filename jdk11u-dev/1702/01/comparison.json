{"files":[{"patch":"@@ -39,1 +39,1 @@\n-ifeq ($(OPENJDK_BUILD_OS), windows)\n+ifeq ($(call isBuildOs, windows), true)\n@@ -159,1 +159,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(DEBUG_LEVEL), macosx-release)\n+ifeq ($(call isTargetOs, macosx)+$(DEBUG_LEVEL), true+release)\n@@ -211,1 +211,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/Bundles.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/CompileDemos.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-ifneq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), false)\n@@ -61,4 +61,1 @@\n-ifeq ($(filter $(OPENJDK_TARGET_OS), solaris macosx aix), )\n-  #\n-  # only solaris, macosx and aix\n-  #\n+ifeq ($(call isTargetOs, solaris macosx aix), false)\n@@ -68,1 +65,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -127,1 +124,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -189,1 +186,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -197,2 +194,1 @@\n-# Used on windows and macosx\n-ifeq ($(filter $(OPENJDK_TARGET_OS), windows macosx), )\n+ifeq ($(call isTargetOs, windows macosx), false)\n@@ -377,1 +373,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -381,1 +377,1 @@\n-ifeq ($(OPENJDK_TARGET_OS),aix)\n+ifeq ($(call isTargetOs, aix), true)\n","filename":"make\/CompileJavaModules.gmk","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/CopyImportModules.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/CreateJmods.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-    ifeq ($(OPENJDK_TARGET_OS), macosx)\n+    ifeq ($(call isTargetOs, macosx), true)\n@@ -299,1 +299,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -319,1 +319,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/Images.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -491,1 +491,1 @@\n-  ifeq ($(OPENJDK_BUILD_OS), windows)\n+  ifeq ($(call isBuildOs, windows), true)\n","filename":"make\/InitSupport.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/MacBundles.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1126,1 +1126,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/Main.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/ModuleWrapper.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -203,1 +203,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU_ARCH), sparc)\n+  ifeq ($(call isTargetCpuArch, sparc), true)\n@@ -635,1 +635,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU_ARCH), sparc)\n+  ifeq ($(call isTargetCpuArch, sparc), true)\n@@ -676,1 +676,1 @@\n-  ifeq ($$(OPENJDK_TARGET_OS), windows)\n+  ifeq ($$(call isTargetOs, windows), true)\n","filename":"make\/RunTests.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -83,1 +83,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU), x86_64)\n+  ifeq ($(call isTargetCpu, x86_64), true)\n","filename":"make\/ZipSecurity.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+#\n+# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+ifeq (,$(_MAKEBASE_GMK))\n+  $(error You must include MakeBase.gmk prior to including CopyFiles.gmk)\n+endif\n+\n+################################################################################\n+#\n+# Code for handling the SetupCopyFiles macro.\n+#\n+################################################################################\n+\n+define AddFileToCopy\n+  # Helper macro for SetupCopyFiles\n+  # 1 : Source file\n+  # 2 : Dest file\n+  # 3 : Variable to add targets to\n+  # 4 : Macro to call for copy operation\n+  # 5 : Action text to log\n+  $2: $1\n+\t$$(call LogInfo, $(strip $5) $$(patsubst $(OUTPUTDIR)\/%,%,$$(call DecodeSpace, $$@)))\n+\t$$($$(strip $4))\n+\n+  $3 += $2\n+  $3_SOURCES += $1\n+endef\n+\n+# Returns the value of the first argument\n+identity = \\\n+    $(strip $1)\n+\n+# Setup make rules for copying files, with an option to do more complex\n+# processing instead of copying.\n+#\n+# Parameter 1 is the name of the rule. This name is used as variable prefix,\n+# and the targets generated are listed in a variable by that name.\n+#\n+# The list of all source files is returned in $1_SOURCES.\n+#\n+# Remaining parameters are named arguments. These include:\n+#   SRC     : Source root dir (defaults to dir of first file)\n+#   DEST    : Dest root dir\n+#   FILES   : List of files to copy with absolute paths, or path relative to SRC.\n+#             Must be in SRC.\n+#   FLATTEN : Set to flatten the directory structure in the DEST dir.\n+#   MACRO   : Optionally override the default macro used for making the copy.\n+#             Default is 'install-file'\n+#   NAME_MACRO : Optionally supply a macro that rewrites the target file name\n+#                based on the source file name\n+#   LOG_ACTION : Optionally specify a different action text for log messages\n+SetupCopyFiles = $(NamedParamsMacroTemplate)\n+define SetupCopyFilesBody\n+\n+  ifeq ($$($1_MACRO), )\n+    $1_MACRO := install-file\n+  endif\n+\n+  # Default SRC to the dir of the first file.\n+  ifeq ($$($1_SRC), )\n+    $1_SRC := $$(dir $$(firstword $$($1_FILES)))\n+  endif\n+\n+  ifeq ($$($1_NAME_MACRO), )\n+    $1_NAME_MACRO := identity\n+  endif\n+\n+  ifeq ($$($1_LOG_ACTION), )\n+    $1_LOG_ACTION := Copying\n+  endif\n+\n+  # Remove any trailing slash from SRC and DEST\n+  $1_SRC := $$(patsubst %\/,%,$$($1_SRC))\n+  $1_DEST := $$(patsubst %\/,%,$$($1_DEST))\n+\n+  # Need to wrap arguments in DoubleDollar because of the eval nested inside an\n+  # eval macro body.\n+  $$(foreach f, $$(patsubst $$($1_SRC)\/%,%,$$($1_FILES)), \\\n+    $$(eval $$(call AddFileToCopy, \\\n+        $$(call DoubleDollar, $$($1_SRC)\/$$f), \\\n+        $$(call DoubleDollar, \\\n+            $$($1_DEST)\/$$(call $$(strip $$($1_NAME_MACRO)),$$(if $$($1_FLATTEN),$$(notdir $$f),$$f)) \\\n+        ), \\\n+        $1, \\\n+        $$($1_MACRO), \\\n+        $$($1_LOG_ACTION) \\\n+    )) \\\n+  )\n+\n+endef\n","filename":"make\/common\/CopyFiles.gmk","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,3 +78,0 @@\n-##############################\n-# Functions\n-##############################\n@@ -82,1 +79,2 @@\n-### Debug functions\n+# For convenience, MakeBase.gmk continues to include these separate files, at\n+# least for now.\n@@ -84,3 +82,3 @@\n-# Prints the name and value of a variable\n-PrintVar = \\\n-    $(info $(strip $1) >$($(strip $1))<)\n+include $(TOPDIR)\/make\/common\/Utils.gmk\n+include $(TOPDIR)\/make\/common\/MakeIO.gmk\n+include $(TOPDIR)\/make\/common\/CopyFiles.gmk\n@@ -88,1 +86,3 @@\n-### Functions for timers\n+################################################################################\n+# Functions for timers\n+################################################################################\n@@ -124,221 +124,0 @@\n-################################################################################\n-# This macro translates $ into \\$ to protect the $ from expansion in the shell.\n-# To make this macro resilient against already escaped strings, first remove\n-# any present escapes before escaping so that no double escapes are added.\n-EscapeDollar = $(subst $$,\\$$,$(subst \\$$,$$,$(strip $1)))\n-\n-################################################################################\n-# This macro works just like EscapeDollar above, but for #.\n-EscapeHash = $(subst \\#,\\\\\\#,$(subst \\\\\\#,\\#,$(strip $1)))\n-\n-################################################################################\n-# This macro translates $ into $$ to protect the string from make itself.\n-DoubleDollar = $(subst $$,$$$$,$(strip $1))\n-\n-################################################################################\n-# ListPathsSafely can be used to print command parameters to a file. This is\n-# typically done if the command line lenght risk being too long for the\n-# OS\/shell. In later make versions, the file function can be used for this\n-# purpose. For earlier versions, a more complex implementation is provided.\n-#\n-# The function ListPathsSafely can be called either directly or, more commonly\n-# from a recipe line. If called from a recipe, it will be executed in the\n-# evaluation phase of that recipe, which means that it will write to the file\n-# before any other line in the recipe has been run.\n-ifeq ($(HAS_FILE_FUNCTION), true)\n-  # Param 1 - Name of variable containing paths\/arguments to output\n-  # Param 2 - File to print to\n-  # Param 3 - Set to true to append to file instead of overwriting\n-  define ListPathsSafely\n-    $$(call MakeDir, $$(dir $$(strip $2)))\n-    $$(file $$(if $$(filter true, $$(strip $3)),>>,>) \\\n-        $$(strip $2),$$(subst $$(SPACE),$$(NEWLINE),$$(strip $$($$(strip $1)))))\n-  endef\n-\n-else # HAS_FILE_FUNCTION = false\n-\n-  $(eval compress_paths = \\\n-      $(strip $(shell $(CAT) $(TOPDIR)\/make\/common\/support\/ListPathsSafely-pre-compress.incl)))\n-  compress_paths += \\\n-      $(subst $(TOPDIR),X97, \\\n-      $(subst $(OUTPUTDIR),X98, \\\n-      $(subst X,X00, \\\n-      $(subst $(SPACE),\\n,$(strip $1)))))\n-  $(eval compress_paths += \\\n-      $(strip $(shell $(CAT) $(TOPDIR)\/make\/common\/support\/ListPathsSafely-post-compress.incl)))\n-\n-  decompress_paths=$(SED) -f $(TOPDIR)\/make\/common\/support\/ListPathsSafely-uncompress.sed \\\n-      -e 's|X99|\\\\n|g' \\\n-      -e 's|X98|$(OUTPUTDIR)|g' -e 's|X97|$(TOPDIR)|g' \\\n-      -e 's|X00|X|g'\n-\n-  ListPathsSafely_IfPrintf = \\\n-      $(if $(word $3,$($(strip $1))), \\\n-          $(shell $(PRINTF) -- \"$(strip $(call EscapeDollar, \\\n-              $(call compress_paths, $(wordlist $3,$4,$($(strip $1))))))\\n\" \\\n-              | $(decompress_paths) >> $2))\n-\n-  # Param 1 - Name of variable containing paths\/arguments to output\n-  # Param 2 - File to print to\n-  # Param 3 - Set to true to append to file instead of overwriting\n-  define ListPathsSafely\n-    ifneq (,$$(word 30001,$$($$(strip $1))))\n-      $$(error Cannot list safely more than 30000 paths. $1 has $$(words $$($$(strip $1))) paths!)\n-    endif\n-    $$(call MakeDir, $$(dir $2))\n-    ifneq ($$(strip $3), true)\n-      $$(shell $(RM) $$(strip $2))\n-    endif\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,1,250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,251,500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,501,750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,751,1000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,1001,1250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,1251,1500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,1501,1750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,1751,2000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,2001,2250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,2251,2500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,2501,2750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,2751,3000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,3001,3250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,3251,3500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,3501,3750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,3751,4000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,4001,4250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,4251,4500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,4501,4750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,4751,5000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,5001,5250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,5251,5500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,5501,5750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,5751,6000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,6001,6250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,6251,6500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,6501,6750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,6751,7000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,7001,7250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,7251,7500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,7501,7750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,7751,8000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,8001,8250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,8251,8500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,8501,8750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,8751,9000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,9001,9250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,9251,9500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,9501,9750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,9751,10000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,10001,10250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,10251,10500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,10501,10750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,10751,11000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,11001,11250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,11251,11500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,11501,11750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,11751,12000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,12001,12250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,12251,12500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,12501,12750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,12751,13000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,13001,13250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,13251,13500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,13501,13750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,13751,14000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,14001,14250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,14251,14500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,14501,14750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,14751,15000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,15001,15250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,15251,15500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,15501,15750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,15751,16000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,16001,16250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,16251,16500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,16501,16750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,16751,17000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,17001,17250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,17251,17500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,17501,17750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,17751,18000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,18001,18250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,18251,18500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,18501,18750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,18751,19000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,19001,19250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,19251,19500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,19501,19750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,19751,20000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,20001,20250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,20251,20500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,20501,20750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,20751,21000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,21001,21250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,21251,21500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,21501,21750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,21751,22000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,22001,22250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,22251,22500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,22501,22750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,22751,23000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,23001,23250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,23251,23500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,23501,23750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,23751,24000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,24001,24250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,24251,24500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,24501,24750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,24751,25000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,25001,25250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,25251,25500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,25501,25750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,25751,26000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,26001,26250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,26251,26500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,26501,26750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,26751,27000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,27001,27250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,27251,27500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,27501,27750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,27751,28000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,28001,28250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,28251,28500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,28501,28750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,28751,29000)\n-\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,29001,29250)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,29251,29500)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,29501,29750)\n-    $$(call ListPathsSafely_IfPrintf,$1,$2,29751,30000)\n-  endef\n-endif # HAS_FILE_FUNCTION\n-\n@@ -416,15 +195,0 @@\n-################################################################################\n-# Creates a sequence of increasing numbers (inclusive).\n-# Param 1 - starting number\n-# Param 2 - ending number\n-sequence = \\\n-    $(wordlist $1, $2, $(strip \\\n-        $(eval SEQUENCE_COUNT :=) \\\n-        $(call _sequence-do,$(strip $2))))\n-\n-_sequence-do = \\\n-    $(if $(word $1, $(SEQUENCE_COUNT)),, \\\n-      $(eval SEQUENCE_COUNT += .) \\\n-      $(words $(SEQUENCE_COUNT)) \\\n-      $(call _sequence-do,$1))\n-\n@@ -472,10 +236,0 @@\n-################################################################################\n-# Replace question marks with space in string. This macro needs to be called on\n-# files from FindFiles in case any of them contains space in their file name,\n-# since FindFiles replaces space with ?.\n-# Param 1 - String to replace in\n-DecodeSpace = \\\n-    $(subst ?,$(SPACE),$(strip $1))\n-EncodeSpace = \\\n-    $(subst $(SPACE),?,$(strip $1))\n-\n@@ -509,7 +263,0 @@\n-################################################################################\n-# Assign a variable only if it is empty\n-# Param 1 - Variable to assign\n-# Param 2 - Value to assign\n-SetIfEmpty = \\\n-    $(if $($(strip $1)),,$(eval $(strip $1) := $2))\n-\n@@ -519,1 +266,1 @@\n-ifeq ($(OPENJDK_TARGET_OS),solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n@@ -545,1 +292,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS),macosx)\n+else ifeq ($(call isTargetOs, macosx), true)\n@@ -583,41 +330,0 @@\n-################################################################################\n-# Take two paths and return the path of the last common directory.\n-# Ex: \/foo\/bar\/baz, \/foo\/bar\/banan -> \/foo\/bar\n-#     foo\/bar\/baz, \/foo\/bar -> <empty>\n-#\n-# The x prefix is used to preserve the presence of the initial slash\n-#\n-# $1 - Path to compare\n-# $2 - Other path to compare\n-FindCommonPathPrefix = \\\n-    $(patsubst x%,%,$(subst $(SPACE),\/,$(strip \\\n-        $(call FindCommonPathPrefixHelper, \\\n-            $(subst \/,$(SPACE),x$(strip $1)), $(subst \/,$(SPACE),x$(strip $2))) \\\n-    )))\n-\n-FindCommonPathPrefixHelper = \\\n-    $(if $(call equals, $(firstword $1), $(firstword $2)), \\\n-      $(firstword $1) \\\n-      $(call FindCommonPathPrefixHelper, \\\n-          $(wordlist 2, $(words $1), $1), $(wordlist 2, $(words $2), $2) \\\n-      ) \\\n-    )\n-\n-# Convert a partial path into as many directory levels of ..\/, removing\n-# leading and following \/.\n-# Ex: foo\/bar\/baz\/ -> ..\/..\/..\n-#     foo\/bar -> ..\/..\n-#     \/foo -> ..\n-DirToDotDot = \\\n-    $(subst $(SPACE),\/,$(foreach d, $(subst \/,$(SPACE),$1),..))\n-\n-# Computes the relative path from a directory to a file\n-# $1 - File to compute the relative path to\n-# $2 - Directory to compute the relative path from\n-RelativePath = \\\n-    $(eval $1_prefix := $(call FindCommonPathPrefix, $1, $2)) \\\n-    $(eval $1_dotdots := $(call DirToDotDot, $(patsubst $($(strip $1)_prefix)%, %, $2))) \\\n-    $(eval $1_dotdots := $(if $($(strip $1)_dotdots),$($(strip $1)_dotdots),.)) \\\n-    $(eval $1_suffix := $(patsubst $($(strip $1)_prefix)\/%, %, $1)) \\\n-    $($(strip $1)_dotdots)\/$($(strip $1)_suffix)\n-\n@@ -660,51 +366,0 @@\n-################################################################################\n-# Filter out duplicate sub strings while preserving order. Keeps the first occurance.\n-uniq = \\\n-    $(strip $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1))))\n-\n-# Returns all whitespace-separated words in $2 where at least one of the\n-# whitespace-separated words in $1 is a substring.\n-containing = \\\n-    $(strip \\\n-        $(foreach v,$(strip $2),\\\n-          $(call uniq,$(foreach p,$(strip $1),$(if $(findstring $p,$v),$v)))))\n-\n-# Returns all whitespace-separated words in $2 where none of the\n-# whitespace-separated words in $1 is a substring.\n-not-containing = \\\n-    $(strip $(filter-out $(call containing,$1,$2),$2))\n-\n-# Return a list of all string elements that are duplicated in $1.\n-dups = \\\n-    $(strip $(foreach v, $(sort $1), $(if $(filter-out 1, \\\n-        $(words $(filter $v, $1))), $v)))\n-\n-# String equals\n-equals = \\\n-    $(and $(findstring $(strip $1),$(strip $2)),\\\n-        $(findstring $(strip $2),$(strip $1)))\n-\n-# Remove a whole list of prefixes\n-# $1 - List of prefixes\n-# $2 - List of elements to process\n-remove-prefixes = \\\n-    $(strip $(if $1,$(patsubst $(firstword $1)%,%,\\\n-      $(call remove-prefixes,$(filter-out $(firstword $1),$1),$2)),$2))\n-\n-# Convert the string given to upper case, without any $(shell)\n-# Inspired by http:\/\/lists.gnu.org\/archive\/html\/help-make\/2013-09\/msg00009.html\n-uppercase_table := a,A b,B c,C d,D e,E f,F g,G h,H i,I j,J k,K l,L m,M n,N o,O \\\n-    p,P q,Q r,R s,S t,T u,U v,V w,W x,X y,Y z,Z\n-\n-uppercase_internal = \\\n-  $(if $(strip $1), $$(subst $(firstword $1), $(call uppercase_internal, \\\n-      $(wordlist 2, $(words $1), $1), $2)), $2)\n-\n-# Convert a string to upper case. Works only on a-z.\n-# $1 - The string to convert\n-uppercase = \\\n-  $(strip \\\n-    $(eval uppercase_result := $(call uppercase_internal, $(uppercase_table), $1)) \\\n-    $(uppercase_result) \\\n-  )\n-\n@@ -825,138 +480,0 @@\n-################################################################################\n-\n-define AddFileToCopy\n-  # Helper macro for SetupCopyFiles\n-  # 1 : Source file\n-  # 2 : Dest file\n-  # 3 : Variable to add targets to\n-  # 4 : Macro to call for copy operation\n-  # 5 : Action text to log\n-  $2: $1\n-\t$$(call LogInfo, $(strip $5) $$(patsubst $(OUTPUTDIR)\/%,%,$$(call DecodeSpace, $$@)))\n-\t$$($$(strip $4))\n-\n-  $3 += $2\n-  $3_SOURCES += $1\n-endef\n-\n-# Returns the value of the first argument\n-identity = \\\n-    $(strip $1)\n-\n-# Setup make rules for copying files, with an option to do more complex\n-# processing instead of copying.\n-#\n-# Parameter 1 is the name of the rule. This name is used as variable prefix,\n-# and the targets generated are listed in a variable by that name.\n-#\n-# The list of all source files is returned in $1_SOURCES.\n-#\n-# Remaining parameters are named arguments. These include:\n-#   SRC     : Source root dir (defaults to dir of first file)\n-#   DEST    : Dest root dir\n-#   FILES   : List of files to copy with absolute paths, or path relative to SRC.\n-#             Must be in SRC.\n-#   FLATTEN : Set to flatten the directory structure in the DEST dir.\n-#   MACRO   : Optionally override the default macro used for making the copy.\n-#             Default is 'install-file'\n-#   NAME_MACRO : Optionally supply a macro that rewrites the target file name\n-#                based on the source file name\n-#   LOG_ACTION : Optionally specify a different action text for log messages\n-SetupCopyFiles = $(NamedParamsMacroTemplate)\n-define SetupCopyFilesBody\n-\n-  ifeq ($$($1_MACRO), )\n-    $1_MACRO := install-file\n-  endif\n-\n-  # Default SRC to the dir of the first file.\n-  ifeq ($$($1_SRC), )\n-    $1_SRC := $$(dir $$(firstword $$($1_FILES)))\n-  endif\n-\n-  ifeq ($$($1_NAME_MACRO), )\n-    $1_NAME_MACRO := identity\n-  endif\n-\n-  ifeq ($$($1_LOG_ACTION), )\n-    $1_LOG_ACTION := Copying\n-  endif\n-\n-  # Remove any trailing slash from SRC and DEST\n-  $1_SRC := $$(patsubst %\/,%,$$($1_SRC))\n-  $1_DEST := $$(patsubst %\/,%,$$($1_DEST))\n-\n-  # Need to wrap arguments in DoubleDollar because of the eval nested inside an\n-  # eval macro body.\n-  $$(foreach f, $$(patsubst $$($1_SRC)\/%,%,$$($1_FILES)), \\\n-    $$(eval $$(call AddFileToCopy, \\\n-        $$(call DoubleDollar, $$($1_SRC)\/$$f), \\\n-        $$(call DoubleDollar, \\\n-            $$($1_DEST)\/$$(call $$(strip $$($1_NAME_MACRO)),$$(if $$($1_FLATTEN),$$(notdir $$f),$$f)) \\\n-        ), \\\n-        $1, \\\n-        $$($1_MACRO), \\\n-        $$($1_LOG_ACTION) \\\n-    )) \\\n-  )\n-\n-endef\n-\n-################################################################################\n-# Parse a multiple-keyword variable, like FOO=\"KEYWORD1=val1;KEYWORD2=val2;...\"\n-# These will be converted into a series of variables like FOO_KEYWORD1=val1,\n-# FOO_KEYWORD2=val2, etc. Unknown keywords will cause an error.\n-#\n-# Parameter 1 is the name of the rule, and is also the name of the variable.\n-#\n-# Remaining parameters are named arguments. These include:\n-#   SINGLE_KEYWORDS   A list of valid keywords with single string values\n-#   STRING_KEYWORDS   A list of valid keywords, processed as string. This means\n-#       that '%20' will be replaced by ' ' to allow for multi-word strings.\n-#\n-ParseKeywordVariable = $(NamedParamsMacroTemplate)\n-define ParseKeywordVariableBody\n-  ifneq ($$($1), )\n-    # To preserve spaces, substitute them with a hopefully unique pattern\n-    # before splitting and then re-substitute spaces back.\n-    $1_MANGLED := $$(subst $$(SPACE),||||,$$($1))\n-    $$(foreach mangled_part, $$(subst ;, , $$($1_MANGLED)), \\\n-      $$(eval mangled_part_eval := $$(call DoubleDollar, $$(mangled_part))) \\\n-      $$(eval part := $$$$(subst ||||,$$$$(SPACE),$$$$(mangled_part_eval))) \\\n-      $$(eval $1_NO_MATCH := true) \\\n-      $$(foreach keyword, $$($1_SINGLE_KEYWORDS), \\\n-        $$(eval keyword_eval := $$(call DoubleDollar, $$(keyword))) \\\n-        $$(if $$(filter $$(keyword)=%, $$(part)), \\\n-          $$(eval $(strip $1)_$$$$(keyword_eval) := $$$$(strip $$$$(patsubst $$$$(keyword_eval)=%, %, $$$$(part)))) \\\n-          $$(eval $1_NO_MATCH := ) \\\n-        ) \\\n-      ) \\\n-      $$(foreach keyword, $$($1_STRING_KEYWORDS), \\\n-        $$(eval keyword_eval := $$(call DoubleDollar, $$(keyword))) \\\n-        $$(if $$(filter $$(keyword)=%, $$(part)), \\\n-          $$(eval $(strip $1)_$$$$(keyword_eval) := $$$$(strip $$$$(subst %20, , $$$$(patsubst $$$$(keyword_eval)=%, %, $$$$(part))))) \\\n-          $$(eval $1_NO_MATCH := ) \\\n-        ) \\\n-      ) \\\n-      $$(if $$($1_NO_MATCH), \\\n-        $$(if $$(filter $$(part), $$($1_SINGLE_KEYWORDS) $$($1_STRING_KEYWORDS)), \\\n-          $$(info Keyword $$(part) for $1 needs to be assigned a value.) \\\n-        , \\\n-          $$(info $$(part) is not a valid keyword for $1.) \\\n-          $$(info Valid keywords: $$($1_SINGLE_KEYWORDS) $$($1_STRING_KEYWORDS).) \\\n-        ) \\\n-        $$(error Cannot continue) \\\n-      ) \\\n-    )\n-  endif\n-endef\n-\n-################################################################################\n-# ShellQuote\n-#\n-# Quotes a string with single quotes and replaces single quotes with '\\'' so\n-# that the contents survives being given to the shell.\n-\n-ShellQuote = \\\n-    $(SQUOTE)$(subst $(SQUOTE),$(SQUOTE)\\$(SQUOTE)$(SQUOTE),$(strip $1))$(SQUOTE)\n-\n@@ -973,1 +490,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -981,29 +498,0 @@\n-################################################################################\n-# Write to and read from file\n-\n-# Param 1 - File to read\n-ReadFile = \\\n-    $(shell $(CAT) $1)\n-\n-# Param 1 - Text to write\n-# Param 2 - File to write to\n-ifeq ($(HAS_FILE_FUNCTION), true)\n-  WriteFile = \\\n-      $(file >$2,$(strip $1))\n-else\n-  # Use printf to get consistent behavior on all platforms.\n-  WriteFile = \\\n-      $(shell $(PRINTF) \"%s\" $(call ShellQuote, $1) > $2)\n-endif\n-\n-# Param 1 - Text to write\n-# Param 2 - File to write to\n-ifeq ($(HAS_FILE_FUNCTION), true)\n-  AppendFile = \\\n-      $(file >>$2,$(strip $1))\n-else\n-  # Use printf to get consistent behavior on all platforms.\n-  AppendFile = \\\n-      $(shell $(PRINTF) \"%s\" $(call ShellQuote, $1) >> $2)\n-endif\n-\n@@ -1096,69 +584,0 @@\n-################################################################################\n-# Find lib dir for module\n-# Param 1 - module name\n-FindLibDirForModule = \\\n-    $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(strip $1)\n-\n-################################################################################\n-# Find executable dir for module\n-# Param 1 - module name\n-FindExecutableDirForModule = \\\n-    $(SUPPORT_OUTPUTDIR)\/modules_cmds\/$(strip $1)\n-\n-################################################################################\n-# Return a string suitable for use after a -classpath or --module-path option. It\n-# will be correct and safe to use on all platforms. Arguments are given as space\n-# separate classpath entries. Safe for multiple nested calls.\n-# param 1 : A space separated list of classpath entries\n-# The surrounding strip is needed to keep additional whitespace out\n-PathList = \\\n-  \"$(subst $(SPACE),:,$(strip $(subst $(DQUOTE),,$1)))\"\n-\n-################################################################################\n-# Check if a specified hotspot variant is being built, or at least one of a\n-# list of variants. Will return 'true' or 'false'.\n-# $1 - the variant to test for\n-check-jvm-variant = \\\n-  $(strip \\\n-    $(if $(filter-out $(VALID_JVM_VARIANTS), $1), \\\n-      $(error Internal error: Invalid variant tested: $1)) \\\n-    $(if $(filter $1, $(JVM_VARIANTS)), true, false))\n-\n-################################################################################\n-# Converts a space separated list to a comma separated list.\n-#\n-# Replacing double-comma with a single comma is to workaround the issue with\n-# some version of make on windows that doesn't substitute spaces with one comma\n-# properly.\n-CommaList = \\\n-  $(strip \\\n-      $(subst $(COMMA)$(COMMA),$(COMMA),$(subst $(SPACE),$(COMMA),$(strip $1))) \\\n-  )\n-\n-################################################################################\n-# Converts a space separated list to a colon separated list.\n-#\n-# Replacing double-colon with a single colon is to workaround the issue with\n-# some version of make on windows that doesn't substitute spaces with one colon\n-# properly.\n-ColonList = \\\n-  $(strip \\\n-      $(subst ::,:,$(subst $(SPACE),:,$(strip $1))) \\\n-  )\n-\n-################################################################################\n-# Given a list of files, filters out locale specific files for translations\n-# that should be excluded from this build.\n-# $1 - The list of files to filter\n-# $2 - The suffix of the files that should be considered (.java or .properties)\n-FilterExcludedTranslations = \\\n-  $(strip $(if $(EXCLUDE_TRANSLATIONS), \\\n-    $(filter-out \\\n-        $(foreach suffix, $2, \\\n-          $(addprefix %_, $(addsuffix $(suffix), $(EXCLUDE_TRANSLATIONS))) \\\n-        ), \\\n-        $1 \\\n-    ), \\\n-    $1 \\\n-  ))\n-\n","filename":"make\/common\/MakeBase.gmk","additions":12,"deletions":593,"binary":false,"changes":605,"status":"modified"},{"patch":"@@ -0,0 +1,272 @@\n+#\n+# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+ifeq (,$(_MAKEBASE_GMK))\n+  $(error You must include MakeBase.gmk prior to including MakeIO.gmk)\n+endif\n+\n+################################################################################\n+#\n+# Functions for dealing with reading and writing from makefiles. Prior to GNU\n+# Make 4.0, this was tricky business.\n+#\n+################################################################################\n+\n+\n+################################################################################\n+# ListPathsSafely can be used to print command parameters to a file. This is\n+# typically done if the command line lenght risk being too long for the\n+# OS\/shell. In later make versions, the file function can be used for this\n+# purpose. For earlier versions, a more complex implementation is provided.\n+#\n+# The function ListPathsSafely can be called either directly or, more commonly\n+# from a recipe line. If called from a recipe, it will be executed in the\n+# evaluation phase of that recipe, which means that it will write to the file\n+# before any other line in the recipe has been run.\n+ifeq ($(HAS_FILE_FUNCTION), true)\n+  # Param 1 - Name of variable containing paths\/arguments to output\n+  # Param 2 - File to print to\n+  # Param 3 - Set to true to append to file instead of overwriting\n+  define ListPathsSafely\n+    $$(call MakeDir, $$(dir $$(strip $2)))\n+    $$(file $$(if $$(filter true, $$(strip $3)),>>,>) \\\n+        $$(strip $2),$$(subst $$(SPACE),$$(NEWLINE),$$(strip $$($$(strip $1)))))\n+  endef\n+\n+else # HAS_FILE_FUNCTION = false\n+\n+  $(eval compress_paths = \\\n+      $(strip $(shell $(CAT) $(TOPDIR)\/make\/common\/support\/ListPathsSafely-pre-compress.incl)))\n+  compress_paths += \\\n+      $(subst $(TOPDIR),X97, \\\n+      $(subst $(OUTPUTDIR),X98, \\\n+      $(subst X,X00, \\\n+      $(subst $(SPACE),\\n,$(strip $1)))))\n+  $(eval compress_paths += \\\n+      $(strip $(shell $(CAT) $(TOPDIR)\/make\/common\/support\/ListPathsSafely-post-compress.incl)))\n+\n+  decompress_paths=$(SED) -f $(TOPDIR)\/make\/common\/support\/ListPathsSafely-uncompress.sed \\\n+      -e 's|X99|\\\\n|g' \\\n+      -e 's|X98|$(OUTPUTDIR)|g' -e 's|X97|$(TOPDIR)|g' \\\n+      -e 's|X00|X|g'\n+\n+  ListPathsSafely_IfPrintf = \\\n+      $(if $(word $3,$($(strip $1))), \\\n+          $(shell $(PRINTF) -- \"$(strip $(call EscapeDollar, \\\n+              $(call compress_paths, $(wordlist $3,$4,$($(strip $1))))))\\n\" \\\n+              | $(decompress_paths) >> $2))\n+\n+  # Param 1 - Name of variable containing paths\/arguments to output\n+  # Param 2 - File to print to\n+  # Param 3 - Set to true to append to file instead of overwriting\n+  define ListPathsSafely\n+    ifneq (,$$(word 30001,$$($$(strip $1))))\n+      $$(error Cannot list safely more than 30000 paths. $1 has $$(words $$($$(strip $1))) paths!)\n+    endif\n+    $$(call MakeDir, $$(dir $2))\n+    ifneq ($$(strip $3), true)\n+      $$(shell $(RM) $$(strip $2))\n+    endif\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,1,250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,251,500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,501,750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,751,1000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,1001,1250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,1251,1500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,1501,1750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,1751,2000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,2001,2250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,2251,2500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,2501,2750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,2751,3000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,3001,3250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,3251,3500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,3501,3750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,3751,4000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,4001,4250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,4251,4500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,4501,4750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,4751,5000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,5001,5250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,5251,5500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,5501,5750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,5751,6000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,6001,6250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,6251,6500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,6501,6750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,6751,7000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,7001,7250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,7251,7500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,7501,7750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,7751,8000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,8001,8250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,8251,8500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,8501,8750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,8751,9000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,9001,9250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,9251,9500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,9501,9750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,9751,10000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,10001,10250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,10251,10500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,10501,10750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,10751,11000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,11001,11250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,11251,11500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,11501,11750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,11751,12000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,12001,12250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,12251,12500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,12501,12750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,12751,13000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,13001,13250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,13251,13500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,13501,13750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,13751,14000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,14001,14250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,14251,14500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,14501,14750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,14751,15000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,15001,15250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,15251,15500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,15501,15750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,15751,16000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,16001,16250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,16251,16500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,16501,16750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,16751,17000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,17001,17250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,17251,17500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,17501,17750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,17751,18000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,18001,18250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,18251,18500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,18501,18750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,18751,19000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,19001,19250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,19251,19500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,19501,19750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,19751,20000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,20001,20250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,20251,20500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,20501,20750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,20751,21000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,21001,21250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,21251,21500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,21501,21750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,21751,22000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,22001,22250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,22251,22500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,22501,22750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,22751,23000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,23001,23250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,23251,23500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,23501,23750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,23751,24000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,24001,24250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,24251,24500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,24501,24750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,24751,25000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,25001,25250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,25251,25500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,25501,25750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,25751,26000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,26001,26250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,26251,26500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,26501,26750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,26751,27000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,27001,27250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,27251,27500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,27501,27750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,27751,28000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,28001,28250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,28251,28500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,28501,28750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,28751,29000)\n+\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,29001,29250)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,29251,29500)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,29501,29750)\n+    $$(call ListPathsSafely_IfPrintf,$1,$2,29751,30000)\n+  endef\n+endif # HAS_FILE_FUNCTION\n+\n+################################################################################\n+# Write to and read from file\n+\n+# Param 1 - File to read\n+ReadFile = \\\n+    $(shell $(CAT) $1)\n+\n+# Param 1 - Text to write\n+# Param 2 - File to write to\n+ifeq ($(HAS_FILE_FUNCTION), true)\n+  WriteFile = \\\n+      $(file >$2,$(strip $1))\n+else\n+  # Use printf to get consistent behavior on all platforms.\n+  WriteFile = \\\n+      $(shell $(PRINTF) \"%s\" $(call ShellQuote, $1) > $2)\n+endif\n+\n+# Param 1 - Text to write\n+# Param 2 - File to write to\n+ifeq ($(HAS_FILE_FUNCTION), true)\n+  AppendFile = \\\n+      $(file >>$2,$(strip $1))\n+else\n+  # Use printf to get consistent behavior on all platforms.\n+  AppendFile = \\\n+      $(shell $(PRINTF) \"%s\" $(call ShellQuote, $1) >> $2)\n+endif\n","filename":"make\/common\/MakeIO.gmk","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"},{"patch":"@@ -121,1 +121,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -125,1 +125,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/common\/Modules.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -912,1 +912,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), true)\n@@ -953,1 +953,1 @@\n-    ifneq ($(OPENJDK_TARGET_OS), windows)\n+    ifeq ($(call isTargetOs, windows), false)\n@@ -1012,1 +1012,1 @@\n-        else ifeq ($(OPENJDK_TARGET_OS), macosx)\n+        else ifeq ($(call isTargetOs, macosx), true)\n@@ -1018,1 +1018,1 @@\n-        endif # OPENJDK_TARGET_OS\n+        endif\n@@ -1104,1 +1104,1 @@\n-    ifeq ($(OPENJDK_TARGET_OS), windows)\n+    ifeq ($(call isTargetOs, windows), true)\n@@ -1184,1 +1184,1 @@\n-                ifeq ($(OPENJDK_TARGET_OS), windows)\n+                ifeq ($(call isTargetOs, windows), true)\n@@ -1202,1 +1202,1 @@\n-                ifeq ($(OPENJDK_TARGET_OS), windows)\n+                ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/common\/NativeCompilation.gmk","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,365 @@\n+#\n+# Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+ifeq (,$(_MAKEBASE_GMK))\n+  $(error You must include MakeBase.gmk prior to including Utils.gmk)\n+endif\n+\n+################################################################################\n+#\n+# Common utility functions\n+#\n+################################################################################\n+\n+### Debug functions\n+\n+# Prints the name and value of a variable\n+PrintVar = \\\n+    $(info $(strip $1) >$($(strip $1))<)\n+\n+################################################################################\n+# This macro translates $ into \\$ to protect the $ from expansion in the shell.\n+# To make this macro resilient against already escaped strings, first remove\n+# any present escapes before escaping so that no double escapes are added.\n+EscapeDollar = $(subst $$,\\$$,$(subst \\$$,$$,$(strip $1)))\n+\n+################################################################################\n+# This macro works just like EscapeDollar above, but for #.\n+EscapeHash = $(subst \\#,\\\\\\#,$(subst \\\\\\#,\\#,$(strip $1)))\n+\n+################################################################################\n+# This macro translates $ into $$ to protect the string from make itself.\n+DoubleDollar = $(subst $$,$$$$,$(strip $1))\n+\n+################################################################################\n+# Creates a sequence of increasing numbers (inclusive).\n+# Param 1 - starting number\n+# Param 2 - ending number\n+sequence = \\\n+    $(wordlist $1, $2, $(strip \\\n+        $(eval SEQUENCE_COUNT :=) \\\n+        $(call _sequence-do,$(strip $2))))\n+\n+_sequence-do = \\\n+    $(if $(word $1, $(SEQUENCE_COUNT)),, \\\n+      $(eval SEQUENCE_COUNT += .) \\\n+      $(words $(SEQUENCE_COUNT)) \\\n+      $(call _sequence-do,$1))\n+\n+################################################################################\n+# Replace question marks with space in string. This macro needs to be called on\n+# files from FindFiles in case any of them contains space in their file name,\n+# since FindFiles replaces space with ?.\n+# Param 1 - String to replace in\n+DecodeSpace = \\\n+    $(subst ?,$(SPACE),$(strip $1))\n+EncodeSpace = \\\n+    $(subst $(SPACE),?,$(strip $1))\n+\n+################################################################################\n+# Assign a variable only if it is empty\n+# Param 1 - Variable to assign\n+# Param 2 - Value to assign\n+SetIfEmpty = \\\n+    $(if $($(strip $1)),,$(eval $(strip $1) := $2))\n+\n+################################################################################\n+# Take two paths and return the path of the last common directory.\n+# Ex: \/foo\/bar\/baz, \/foo\/bar\/banan -> \/foo\/bar\n+#     foo\/bar\/baz, \/foo\/bar -> <empty>\n+#\n+# The x prefix is used to preserve the presence of the initial slash\n+#\n+# $1 - Path to compare\n+# $2 - Other path to compare\n+FindCommonPathPrefix = \\\n+    $(patsubst x%,%,$(subst $(SPACE),\/,$(strip \\\n+        $(call FindCommonPathPrefixHelper, \\\n+            $(subst \/,$(SPACE),x$(strip $1)), $(subst \/,$(SPACE),x$(strip $2))) \\\n+    )))\n+\n+FindCommonPathPrefixHelper = \\\n+    $(if $(call equals, $(firstword $1), $(firstword $2)), \\\n+      $(firstword $1) \\\n+      $(call FindCommonPathPrefixHelper, \\\n+          $(wordlist 2, $(words $1), $1), $(wordlist 2, $(words $2), $2) \\\n+      ) \\\n+    )\n+\n+# Convert a partial path into as many directory levels of ..\/, removing\n+# leading and following \/.\n+# Ex: foo\/bar\/baz\/ -> ..\/..\/..\n+#     foo\/bar -> ..\/..\n+#     \/foo -> ..\n+DirToDotDot = \\\n+    $(subst $(SPACE),\/,$(foreach d, $(subst \/,$(SPACE),$1),..))\n+\n+# Computes the relative path from a directory to a file\n+# $1 - File to compute the relative path to\n+# $2 - Directory to compute the relative path from\n+RelativePath = \\\n+    $(eval $1_prefix := $(call FindCommonPathPrefix, $1, $2)) \\\n+    $(eval $1_dotdots := $(call DirToDotDot, $(patsubst $($(strip $1)_prefix)%, %, $2))) \\\n+    $(eval $1_dotdots := $(if $($(strip $1)_dotdots),$($(strip $1)_dotdots),.)) \\\n+    $(eval $1_suffix := $(patsubst $($(strip $1)_prefix)\/%, %, $1)) \\\n+    $($(strip $1)_dotdots)\/$($(strip $1)_suffix)\n+\n+################################################################################\n+# Filter out duplicate sub strings while preserving order. Keeps the first occurance.\n+uniq = \\\n+    $(strip $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1))))\n+\n+# Returns all whitespace-separated words in $2 where at least one of the\n+# whitespace-separated words in $1 is a substring.\n+containing = \\\n+    $(strip \\\n+        $(foreach v,$(strip $2),\\\n+          $(call uniq,$(foreach p,$(strip $1),$(if $(findstring $p,$v),$v)))))\n+\n+# Returns all whitespace-separated words in $2 where none of the\n+# whitespace-separated words in $1 is a substring.\n+not-containing = \\\n+    $(strip $(filter-out $(call containing,$1,$2),$2))\n+\n+# Return a list of all string elements that are duplicated in $1.\n+dups = \\\n+    $(strip $(foreach v, $(sort $1), $(if $(filter-out 1, \\\n+        $(words $(filter $v, $1))), $v)))\n+\n+# String equals\n+equals = \\\n+    $(and $(findstring $(strip $1),$(strip $2)),\\\n+        $(findstring $(strip $2),$(strip $1)))\n+\n+# Remove a whole list of prefixes\n+# $1 - List of prefixes\n+# $2 - List of elements to process\n+remove-prefixes = \\\n+    $(strip $(if $1,$(patsubst $(firstword $1)%,%,\\\n+      $(call remove-prefixes,$(filter-out $(firstword $1),$1),$2)),$2))\n+\n+# Convert the string given to upper case, without any $(shell)\n+# Inspired by http:\/\/lists.gnu.org\/archive\/html\/help-make\/2013-09\/msg00009.html\n+uppercase_table := a,A b,B c,C d,D e,E f,F g,G h,H i,I j,J k,K l,L m,M n,N o,O \\\n+    p,P q,Q r,R s,S t,T u,U v,V w,W x,X y,Y z,Z\n+\n+uppercase_internal = \\\n+  $(if $(strip $1), $$(subst $(firstword $1), $(call uppercase_internal, \\\n+      $(wordlist 2, $(words $1), $1), $2)), $2)\n+\n+# Convert a string to upper case. Works only on a-z.\n+# $1 - The string to convert\n+uppercase = \\\n+  $(strip \\\n+    $(eval uppercase_result := $(call uppercase_internal, $(uppercase_table), $1)) \\\n+    $(uppercase_result) \\\n+  )\n+\n+################################################################################\n+# Boolean operators.\n+\n+# Return the word \"true\" if all the boolean words given as argument is \"true\",\n+# and returns \"false\" otherwise. Boolean words must be \"true\" or \"false\". It is\n+# an error to supply a non-boolean word. An empty string is considered \"true\".\n+And = \\\n+  $(strip $(if $(filter-out true false, $1), $(error Non-boolean values: $1)) \\\n+  $(if $(strip $(filter-out true, $1)), false, true))\n+\n+# Return the word \"false\" if all the boolean words given as argument is \"false\",\n+# and returns \"true\" otherwise. Boolean words must be \"true\" or \"false\". It is\n+# an error to supply a non-boolean word.  An empty string is considered \"false\".\n+Or = \\\n+  $(strip $(if $(filter-out true false, $1), $(error Non-boolean values: $1)) \\\n+  $(if $(strip $(filter-out false, $1)), true, false))\n+\n+################################################################################\n+# Parse a multiple-keyword variable, like FOO=\"KEYWORD1=val1;KEYWORD2=val2;...\"\n+# These will be converted into a series of variables like FOO_KEYWORD1=val1,\n+# FOO_KEYWORD2=val2, etc. Unknown keywords will cause an error.\n+#\n+# Parameter 1 is the name of the rule, and is also the name of the variable.\n+#\n+# Remaining parameters are named arguments. These include:\n+#   SINGLE_KEYWORDS   A list of valid keywords with single string values\n+#   STRING_KEYWORDS   A list of valid keywords, processed as string. This means\n+#       that '%20' will be replaced by ' ' to allow for multi-word strings.\n+#\n+ParseKeywordVariable = $(NamedParamsMacroTemplate)\n+define ParseKeywordVariableBody\n+  ifneq ($$($1), )\n+    # To preserve spaces, substitute them with a hopefully unique pattern\n+    # before splitting and then re-substitute spaces back.\n+    $1_MANGLED := $$(subst $$(SPACE),||||,$$($1))\n+    $$(foreach mangled_part, $$(subst ;, , $$($1_MANGLED)), \\\n+      $$(eval mangled_part_eval := $$(call DoubleDollar, $$(mangled_part))) \\\n+      $$(eval part := $$$$(subst ||||,$$$$(SPACE),$$$$(mangled_part_eval))) \\\n+      $$(eval $1_NO_MATCH := true) \\\n+      $$(foreach keyword, $$($1_SINGLE_KEYWORDS), \\\n+        $$(eval keyword_eval := $$(call DoubleDollar, $$(keyword))) \\\n+        $$(if $$(filter $$(keyword)=%, $$(part)), \\\n+          $$(eval $(strip $1)_$$$$(keyword_eval) := $$$$(strip $$$$(patsubst $$$$(keyword_eval)=%, %, $$$$(part)))) \\\n+          $$(eval $1_NO_MATCH := ) \\\n+        ) \\\n+      ) \\\n+      $$(foreach keyword, $$($1_STRING_KEYWORDS), \\\n+        $$(eval keyword_eval := $$(call DoubleDollar, $$(keyword))) \\\n+        $$(if $$(filter $$(keyword)=%, $$(part)), \\\n+          $$(eval $(strip $1)_$$$$(keyword_eval) := $$$$(strip $$$$(subst %20, , $$$$(patsubst $$$$(keyword_eval)=%, %, $$$$(part))))) \\\n+          $$(eval $1_NO_MATCH := ) \\\n+        ) \\\n+      ) \\\n+      $$(if $$($1_NO_MATCH), \\\n+        $$(if $$(filter $$(part), $$($1_SINGLE_KEYWORDS) $$($1_STRING_KEYWORDS)), \\\n+          $$(info Keyword $$(part) for $1 needs to be assigned a value.) \\\n+        , \\\n+          $$(info $$(part) is not a valid keyword for $1.) \\\n+          $$(info Valid keywords: $$($1_SINGLE_KEYWORDS) $$($1_STRING_KEYWORDS).) \\\n+        ) \\\n+        $$(error Cannot continue) \\\n+      ) \\\n+    )\n+  endif\n+endef\n+\n+################################################################################\n+# ShellQuote\n+#\n+# Quotes a string with single quotes and replaces single quotes with '\\'' so\n+# that the contents survives being given to the shell.\n+ShellQuote = \\\n+    $(SQUOTE)$(subst $(SQUOTE),$(SQUOTE)\\$(SQUOTE)$(SQUOTE),$(strip $1))$(SQUOTE)\n+\n+################################################################################\n+# Find lib dir for module\n+# Param 1 - module name\n+FindLibDirForModule = \\\n+    $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(strip $1)\n+\n+################################################################################\n+# Find executable dir for module\n+# Param 1 - module name\n+FindExecutableDirForModule = \\\n+    $(SUPPORT_OUTPUTDIR)\/modules_cmds\/$(strip $1)\n+\n+################################################################################\n+# Return a string suitable for use after a -classpath or --module-path option. It\n+# will be correct and safe to use on all platforms. Arguments are given as space\n+# separate classpath entries. Safe for multiple nested calls.\n+# param 1 : A space separated list of classpath entries\n+# The surrounding strip is needed to keep additional whitespace out\n+PathList = \\\n+  \"$(subst $(SPACE),:,$(strip $(subst $(DQUOTE),,$1)))\"\n+\n+################################################################################\n+# Check if a specified hotspot variant is being built, or at least one of a\n+# list of variants. Will return 'true' or 'false'.\n+# $1 - the variant to test for\n+check-jvm-variant = \\\n+  $(strip \\\n+    $(if $(filter-out $(VALID_JVM_VARIANTS), $1), \\\n+      $(error Internal error: Invalid variant tested: $1)) \\\n+    $(if $(filter $1, $(JVM_VARIANTS)), true, false))\n+\n+################################################################################\n+# Check if our build or target conforms to certain restrictions. This set of\n+# functions all work in similar ways, testing the property that the name\n+# implies, so e.g. isTargetCpu test the CPU of the target system.\n+#\n+# $1 - A property, or a space separated list of properties to test for.\n+#\n+# Returns true if the actual property matches one of the properties in the list,\n+# and false otherwise.\n+#\n+# Examples: $(call isTargetOs, linux solaris) will return true when executed\n+# on either linux or solaris, and false otherwise.\n+# $(call isBuildCpuArch, x86) will return true iff the build CPU Arch is x86.\n+\n+isTargetOs = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_OS), $1), true, false))\n+\n+isTargetOsType = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_OS_TYPE), $1), true, false))\n+\n+isTargetCpu = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_CPU), $1), true, false))\n+\n+isTargetCpuArch = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_CPU_ARCH), $1), true, false))\n+\n+isTargetCpuBits = \\\n+  $(strip $(if $(filter $(OPENJDK_TARGET_CPU_BITS), $1), true, false))\n+\n+isBuildOs = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_OS), $1), true, false))\n+\n+isBuildOsType = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_OS_TYPE), $1), true, false))\n+\n+isBuildOsEnv = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_OS_ENV), $1), true, false))\n+\n+isBuildCpu = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_CPU), $1), true, false))\n+\n+isBuildCpuArch = \\\n+  $(strip $(if $(filter $(OPENJDK_BUILD_CPU_ARCH), $1), true, false))\n+\n+################################################################################\n+# Converts a space separated list to a comma separated list.\n+#\n+# Replacing double-comma with a single comma is to workaround the issue with\n+# some version of make on windows that doesn't substitute spaces with one comma\n+# properly.\n+CommaList = \\\n+  $(strip \\\n+      $(subst $(COMMA)$(COMMA),$(COMMA),$(subst $(SPACE),$(COMMA),$(strip $1))) \\\n+  )\n+\n+################################################################################\n+# Converts a space separated list to a colon separated list.\n+#\n+# Replacing double-colon with a single colon is to workaround the issue with\n+# some version of make on windows that doesn't substitute spaces with one colon\n+# properly.\n+ColonList = \\\n+  $(strip \\\n+      $(subst ::,:,$(subst $(SPACE),:,$(strip $1))) \\\n+  )\n+\n+################################################################################\n+# Given a list of files, filters out locale specific files for translations\n+# that should be excluded from this build.\n+# $1 - The list of files to filter\n+# $2 - The suffix of the files that should be considered (.java or .properties)\n+FilterExcludedTranslations = \\\n+  $(strip $(if $(EXCLUDE_TRANSLATIONS), \\\n+    $(filter-out \\\n+        $(foreach suffix, $2, \\\n+          $(addprefix %_, $(addsuffix $(suffix), $(EXCLUDE_TRANSLATIONS))) \\\n+        ), \\\n+        $1 \\\n+    ), \\\n+    $1 \\\n+  ))\n","filename":"make\/common\/Utils.gmk","additions":365,"deletions":0,"binary":false,"changes":365,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n-ifneq ($(findstring $(OPENJDK_TARGET_OS), windows aix),)\n+ifeq ($(call isTargetOs, windows aix), true)\n@@ -92,1 +92,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU), windows-x86)\n+ifeq ($(call And, $(call isTargetOs, windows) $(call isTargetCpu, x86)), true)\n@@ -154,1 +154,1 @@\n-ifneq ($(filter $(OPENJDK_TARGET_OS), windows solaris), )\n+ifeq ($(call isTargetOs, windows solaris), true)\n@@ -194,1 +194,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/copy\/Copy-java.base.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/copy\/Copy-jdk.crypto.cryptoki.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/copy\/Copy-jdk.crypto.ucrypto.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-ifneq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), false)\n@@ -35,1 +35,1 @@\n-ifneq ($(filter $(OPENJDK_TARGET_OS), linux solaris aix), )\n+ifeq ($(call isTargetOs, linux solaris aix), true)\n@@ -55,1 +55,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -62,1 +62,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -69,1 +69,1 @@\n-ifeq ($(filter $(OPENJDK_TARGET_OS), windows macosx), )\n+ifeq ($(call isTargetOs, windows macosx), false)\n","filename":"make\/gensrc\/Gensrc-java.desktop.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/gensrc\/Gensrc-jdk.hotspot.agent.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/gensrc\/GensrcIcons.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-ifneq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), false)\n@@ -116,1 +116,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/gensrc\/GensrcMisc.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/hotspot\/CopyToExplodedJdk.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  ifeq ($(OPENJDK_BUILD_OS), linux)\n+  ifeq ($(call isBuildOs, linux), true)\n@@ -39,1 +39,1 @@\n-  else ifeq ($(OPENJDK_BUILD_OS), solaris)\n+  else ifeq ($(call isBuildOs, solaris), true)\n@@ -43,1 +43,1 @@\n-  else ifeq ($(OPENJDK_BUILD_OS), aix)\n+  else ifeq ($(call isBuildOs, aix), true)\n@@ -46,1 +46,1 @@\n-  else ifeq ($(OPENJDK_BUILD_OS), windows)\n+  else ifeq ($(call isBuildOs, windows), true)\n@@ -94,1 +94,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), linux)\n+  ifeq ($(call isTargetOs, linux), true)\n@@ -96,1 +96,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), solaris)\n+  else ifeq ($(call isTargetOs, solaris), true)\n@@ -98,1 +98,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), aix)\n+  else ifeq ($(call isTargetOs, aix), true)\n@@ -100,1 +100,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  else ifeq ($(call isTargetOs, macosx), true)\n@@ -114,1 +114,1 @@\n-  ifneq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), false)\n@@ -126,1 +126,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)\n+  ifeq ($(call isTargetCpuBits, 64), true)\n","filename":"make\/hotspot\/gensrc\/GensrcAdlc.gmk","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), solaris)\n+  ifeq ($(call isTargetOs, solaris), true)\n@@ -34,1 +34,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  else ifeq ($(call isTargetOs, macosx), true)\n@@ -36,1 +36,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), linux)\n+  else ifeq ($(call isTargetOs, linux), true)\n@@ -57,1 +57,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), solaris)\n+  ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/hotspot\/gensrc\/GensrcDtrace.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/hotspot\/ide\/CreateVSProject.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), solaris)\n+  ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/hotspot\/lib\/CompileDtraceLibraries.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -42,1 +42,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/hotspot\/lib\/CompileGtest.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-ifeq ($(OPENJDK_TARGET_CPU), x86_64)\n+ifeq ($(call isTargetCpu, x86_64), true)\n@@ -63,1 +63,1 @@\n-else ifeq ($(OPENJDK_TARGET_CPU), sparcv9)\n+else ifeq ($(call isTargetCpu, sparcv9), true)\n@@ -89,1 +89,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU), linux-arm)\n+ifeq ($(call And, $(call isTargetOs, linux) $(call isTargetCpu, arm)), true)\n@@ -92,1 +92,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU), linux-aarch64)\n+else ifeq ($(call And, $(call isTargetOs, linux) $(call isTargetCpu, aarch64)), true)\n@@ -101,1 +101,1 @@\n-ifneq ($(filter $(OPENJDK_TARGET_OS), linux macosx windows), )\n+ifeq ($(call isTargetOs, linux macosx windows), true)\n@@ -105,1 +105,1 @@\n-ifeq ($(OPENJDK_TARGET_CPU), x86)\n+ifeq ($(call isTargetCpu, x86), true)\n@@ -107,1 +107,1 @@\n-else ifeq ($(OPENJDK_TARGET_CPU), x86_64)\n+else ifeq ($(call isTargetCpu, x86_64), true)\n@@ -112,2 +112,2 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n-  ifeq ($(OPENJDK_TARGET_CPU), x86_64)\n+ifeq ($(call isTargetOs, solaris), true)\n+  ifeq ($(call isTargetCpu, x86_64), true)\n@@ -115,1 +115,1 @@\n-  else ifeq ($(OPENJDK_TARGET_CPU), sparcv9)\n+  else ifeq ($(call isTargetCpu, sparcv9), true)\n@@ -125,1 +125,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU), solaris-sparcv9)\n+ifeq ($(call And, $(call isTargetOs, solaris) $(call isTargetCpu, sparcv9)), true)\n@@ -134,2 +134,2 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n-  ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)\n+ifeq ($(call isTargetOs, windows), true)\n+  ifeq ($(call isTargetCpuBits, 64), true)\n@@ -193,1 +193,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), solaris)\n+  ifeq ($(call isTargetOs, solaris), true)\n@@ -134,1 +134,1 @@\n-        ifeq ($(OPENJDK_TARGET_CPU_ARCH), sparc)\n+        ifeq ($(call isTargetCpuArch, sparc), true)\n","filename":"make\/hotspot\/lib\/JvmDtraceObjects.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU), sparcv9)\n+  ifeq ($(call isTargetCpu, sparcv9), true)\n@@ -57,1 +57,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), linux)\n+  ifeq ($(call isTargetOs, linux), true)\n","filename":"make\/hotspot\/lib\/JvmFeatures.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  ifeq ($(filter $(OPENJDK_TARGET_OS), windows aix), )\n+  ifeq ($call isTargetOs, windows aix), false)\n","filename":"make\/hotspot\/lib\/JvmFlags.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-ifneq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU), windows-x86_64)\n+ifeq ($(call And, $(call isTargetOs, windows) $(call isTargetCpu, x86_64)), false)\n@@ -37,1 +37,1 @@\n-ifeq ($(OPENJDK_TARGET_OS_TYPE), unix)\n+ifeq ($(call isTargetOsType, unix), true)\n@@ -51,1 +51,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n@@ -67,1 +67,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), linux)\n+ifeq ($(call isTargetOs, linux), true)\n@@ -79,1 +79,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), solaris)\n+else ifeq ($(call isTargetOs, solaris), true)\n@@ -93,1 +93,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), macosx)\n+else ifeq ($(call isTargetOs, macosx), true)\n@@ -110,1 +110,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), aix)\n+else ifeq ($(call isTargetOs, aix), true)\n@@ -126,1 +126,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), windows)\n+else ifeq ($(call isTargetOs, windows), true)\n@@ -156,1 +156,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -161,1 +161,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), windows)\n+else ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/hotspot\/lib\/JvmMapfile.gmk","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), linux)\n+ifeq ($(call isTargetOs, linux), true)\n@@ -67,1 +67,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU), x86)\n+  ifeq ($(call isTargetCpu, x86), true)\n@@ -85,1 +85,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), solaris)\n+else ifeq ($(call isTargetOs, solaris), true)\n@@ -99,1 +99,1 @@\n-    ifeq ($(OPENJDK_TARGET_CPU), x86_64)\n+    ifeq ($(call isTargetCpu, x86_64), true)\n@@ -120,1 +120,1 @@\n-    ifeq ($(OPENJDK_TARGET_CPU_ARCH), x86)\n+    ifeq ($(call isTargetCpuArch, x86), true)\n@@ -131,1 +131,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), macosx)\n+else ifeq ($(call isTargetOs, macosx), true)\n@@ -158,1 +158,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), aix)\n+else ifeq ($(call isTargetOs, aix), true)\n@@ -183,1 +183,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), windows)\n+else ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/hotspot\/lib\/JvmOverrideFiles.gmk","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -71,1 +71,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/hotspot\/test\/GtestImage.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -59,1 +59,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), linux)\n+ifeq ($(call isTargetOs, linux), true)\n@@ -78,1 +78,1 @@\n-ifneq ($(findstring $(OPENJDK_TARGET_OS), macosx solaris aix linux), )\n+ifeq ($(call isTargetOs, macosx solaris aix linux), true)\n","filename":"make\/launcher\/Launcher-java.base.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/launcher\/Launcher-java.security.jgss.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -101,1 +101,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU_BITS), 32)\n+  ifeq ($(call isTargetCpuBits, 32), true)\n","filename":"make\/launcher\/Launcher-jdk.accessibility.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  ifneq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), false)\n","filename":"make\/launcher\/Launcher-jdk.pack.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), aix)\n+  ifeq ($(call isTargetOs, aix), true)\n@@ -214,1 +214,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/launcher\/LauncherCommon.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)\n+ifeq ($(call isTargetCpuBits, 64), true)\n@@ -71,1 +71,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU_ARCH), solaris-sparc)\n+ifeq ($(call And, $(call isTargetOs, solaris) $(call isTargetCpuArch, sparc)), true)\n@@ -83,1 +83,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)\n+  ifeq ($(call isTargetCpuBits, 64), true)\n@@ -130,1 +130,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU_ARCH), solaris-sparc)\n+ifeq ($(call And, $(call isTargetOs, solaris) $(call isTargetCpuArch, sparc)), true)\n@@ -134,1 +134,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -143,1 +143,1 @@\n-ifneq ($(filter $(OPENJDK_TARGET_OS), solaris linux macosx aix), )\n+ifeq ($(call isTargetOs, solaris linux macosx aix), true)\n@@ -147,1 +147,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -151,1 +151,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -158,1 +158,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU), solaris-sparcv9)\n+ifeq ($(call And, $(call isTargetOs, solaris) $(call isTargetCpu, sparcv9)), true)\n@@ -185,1 +185,1 @@\n-ifeq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU), solaris-sparcv9)\n+ifeq ($(call And, $(call isTargetOs, solaris) $(call isTargetCpu, sparcv9)), true)\n@@ -192,1 +192,1 @@\n-ifneq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), false)\n@@ -196,1 +196,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -198,1 +198,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU_BITS), 64)\n+  ifeq ($(call isTargetCpuBits, 64), true)\n@@ -206,1 +206,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), linux)\n+ifeq ($(call isTargetOs, linux), true)\n@@ -264,1 +264,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -272,1 +272,1 @@\n-ifeq ($(findstring $(OPENJDK_TARGET_OS), windows macosx), )\n+ifeq ($(call isTargetOs, windows macosx), false)\n@@ -299,1 +299,1 @@\n-    ifeq ($(OPENJDK_TARGET_OS), solaris)\n+    ifeq ($(call isTargetOs, solaris), true)\n@@ -303,1 +303,1 @@\n-    ifeq ($(OPENJDK_TARGET_OS), linux)\n+    ifeq ($(call isTargetOs, linux), true)\n@@ -311,1 +311,1 @@\n-    ifeq ($(OPENJDK_TARGET_OS), linux)\n+    ifeq ($(call isTargetOs, linux), true)\n@@ -451,1 +451,1 @@\n-ifeq ($(findstring $(OPENJDK_TARGET_OS), windows macosx),)\n+ifeq ($(call isTargetOs, windows macosx), false)\n@@ -511,1 +511,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), true)\n@@ -547,1 +547,1 @@\n-  ifneq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), false)\n@@ -553,1 +553,1 @@\n-  ifneq (, $(findstring $(OPENJDK_TARGET_OS), linux macosx))\n+  ifeq ($(call isTargetOs, linux macosx), true)\n@@ -556,1 +556,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), solaris)\n+  ifeq ($(call isTargetOs, solaris), true)\n@@ -605,1 +605,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -609,1 +609,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), macosx)\n+else ifeq ($(call isTargetOs, macosx), true)\n@@ -663,1 +663,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -675,1 +675,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -691,1 +691,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU), x86)\n+  ifeq ($(call isTargetCpu, x86), true)\n@@ -716,1 +716,1 @@\n-else # OPENJDK_TARGET_OS not windows\n+else # not windows\n@@ -718,1 +718,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -723,1 +723,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -727,1 +727,1 @@\n-    ifneq ($(OPENJDK_TARGET_OS), solaris)\n+    ifeq ($(call isTargetOs, solaris), false)\n@@ -734,1 +734,1 @@\n-      ifeq ($(OPENJDK_TARGET_OS), linux)\n+      ifeq ($(call isTargetOs, linux), true)\n@@ -765,1 +765,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -769,1 +769,1 @@\n-endif # OPENJDK_TARGET_OS\n+endif\n@@ -821,1 +821,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -829,2 +829,2 @@\n-  ifeq ($(OPENJDK_TARGET_OS), linux)\n-    ifeq ($(OPENJDK_TARGET_CPU_ARCH), ppc)\n+  ifeq ($(call isTargetOs, linux), true)\n+    ifeq ($(call isTargetCpuArch, ppc), true)\n@@ -835,1 +835,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -846,1 +846,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), windows)\n+  else ifeq ($(call isTargetOs, windows), true)\n@@ -854,1 +854,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -860,1 +860,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), windows)\n+  else ifeq ($(call isTargetOs, windows), true)\n@@ -900,1 +900,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -908,1 +908,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -975,1 +975,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/lib\/Awt2dLibraries.gmk","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n@@ -70,1 +70,1 @@\n-ifneq ($(findstring $(OPENJDK_TARGET_OS), solaris linux), )\n+ifeq ($(call isTargetOs, solaris linux), true)\n@@ -94,1 +94,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -202,1 +202,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -211,1 +211,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -266,1 +266,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), aix)\n+ifeq ($(call isTargetOs, aix), true)\n","filename":"make\/lib\/CoreLibraries.gmk","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -129,1 +129,1 @@\n-ifeq ($(OPENJDK_TARGET_OS_TYPE), unix)\n+ifeq ($(call isTargetOsType, unix), true)\n","filename":"make\/lib\/Lib-java.base.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-ifneq ($(OPENJDK_TARGET_OS), aix)\n+ifeq ($(call isTargetOs, aix), false)\n@@ -51,1 +51,1 @@\n-  ifneq ($(OPENJDK_TARGET_OS), solaris)\n+  ifeq ($(call isTargetOs, solaris), false)\n@@ -58,1 +58,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n@@ -88,1 +88,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n@@ -144,1 +144,0 @@\n-\n","filename":"make\/lib\/Lib-java.desktop.gmk","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -67,1 +67,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), aix)\n+ifeq ($(call isTargetOs, aix), true)\n","filename":"make\/lib\/Lib-java.instrument.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-ifneq ($(findstring $(OPENJDK_TARGET_OS), solaris linux), )\n+ifeq ($(call isTargetOs, solaris linux), true)\n@@ -60,1 +60,0 @@\n-\n","filename":"make\/lib\/Lib-java.management.gmk","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/lib\/Lib-java.prefs.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), windows)\n+  ifeq ($(call isTargetOs, windows), true)\n@@ -71,1 +71,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/lib\/Lib-java.security.jgss.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -103,1 +103,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU_BITS), 32)\n+  ifeq ($(call isTargetCpuBits, 32), true)\n","filename":"make\/lib\/Lib-jdk.accessibility.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/lib\/Lib-jdk.attach.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/lib\/Lib-jdk.crypto.mscapi.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n","filename":"make\/lib\/Lib-jdk.crypto.ucrypto.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), linux)\n+ifeq ($(call isTargetOs, linux), true)\n@@ -35,1 +35,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), solaris)\n+else ifeq ($(call isTargetOs, solaris), true)\n@@ -38,1 +38,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), macosx)\n+else ifeq ($(call isTargetOs, macosx), true)\n@@ -42,1 +42,1 @@\n-else ifeq ($(OPENJDK_TARGET_OS), windows)\n+else ifeq ($(call isTargetOs, windows), true)\n@@ -44,1 +44,1 @@\n-  ifeq ($(OPENJDK_TARGET_CPU), x86_64)\n+  ifeq ($(call isTargetCpu, x86_64), true)\n","filename":"make\/lib\/Lib-jdk.hotspot.agent.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -42,1 +42,1 @@\n-endif # OPENJDK_TARGET_OS\n+endif\n","filename":"make\/lib\/Lib-jdk.internal.le.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -45,1 +45,1 @@\n-endif # OPENJDK_TARGET_OS\n+endif\n","filename":"make\/lib\/Lib-jdk.jdi.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -41,1 +41,1 @@\n-ifneq ($(findstring $(OPENJDK_TARGET_OS), solaris linux), )\n+ifeq ($(call isTargetOs, solaris linux), true)\n@@ -67,1 +67,0 @@\n-\n","filename":"make\/lib\/Lib-jdk.management.gmk","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifneq ($(filter $(OPENJDK_TARGET_OS), solaris linux macosx), )\n+ifeq ($(call isTargetOs, solaris linux macosx), true)\n","filename":"make\/lib\/Lib-jdk.net.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-ifeq ($(OPENJDK_TARGET_OS_TYPE), unix)\n+ifeq ($(call isTargetOsType, unix), true)\n@@ -32,1 +32,1 @@\n-  ifeq ($(filter $(OPENJDK_TARGET_OS), macosx aix), )\n+  ifeq ($(call isTargetOs, macosx aix), false)\n","filename":"make\/lib\/Lib-jdk.sctp.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -102,1 +102,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/test\/BuildFailureHandler.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-ifeq ($(OPENJDK_TARGET_OS),linux)\n+ifeq ($(call isTargetOs, linux), true)\n@@ -852,1 +852,1 @@\n-ifneq ($(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU_ARCH), solaris-sparc)\n+ifeq ($(call And, $(call isTargetOs, solaris) $(call isTargetCpuArch, sparc)), false)\n@@ -856,1 +856,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), linux)\n+ifeq ($(call isTargetOs, linux), true)\n@@ -873,1 +873,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), solaris)\n+ifeq ($(call isTargetOs, solaris), true)\n@@ -877,1 +877,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), windows)\n+ifeq ($(call isTargetOs, windows), true)\n@@ -68,1 +68,1 @@\n-  ifeq ($(OPENJDK_TARGET_OS), linux)\n+  ifeq ($(call isTargetOs, linux), true)\n@@ -70,1 +70,1 @@\n-  else ifeq ($(OPENJDK_TARGET_OS), solaris)\n+  else ifeq ($(call isTargetOs, solaris), true)\n@@ -78,1 +78,1 @@\n-ifeq ($(OPENJDK_TARGET_OS), macosx)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -105,0 +105,22 @@\n+################################################################################\n+# Test boolean operators\n+\n+$(eval $(call assert-equals, $(call And,  true  true  true ), true))\n+$(eval $(call assert-equals, $(call And,  true  false true ), false))\n+$(eval $(call assert-equals, $(call And,  false false false ), false))\n+$(eval $(call assert-equals, $(call And, true), true))\n+$(eval $(call assert-equals, $(call And, false), false))\n+$(eval $(call assert-equals, $(call And,    ), true))\n+\n+$(eval $(call assert-equals, $(call Or,  true  true  true ), true))\n+$(eval $(call assert-equals, $(call Or,  true  false true ), true))\n+$(eval $(call assert-equals, $(call Or,  false false false ), false))\n+$(eval $(call assert-equals, $(call Or, true), true))\n+$(eval $(call assert-equals, $(call Or, false), false))\n+$(eval $(call assert-equals, $(call Or,    ), false))\n+\n+# We cannot catch $(error) while testing, but you can enable this manually\n+# by uncommenting and watch make fails.\n+#$(eval $(call assert-equals, $(call And,  non-boolean  ), $(error ...)))\n+#$(eval $(call assert-equals, $(call Or,  non-boolean  ), $(error ...)))\n+\n","filename":"test\/make\/TestMakeBase.gmk","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-ifeq ($(OPENJDK_BUILD_OS), macosx)\n+ifeq ($(call isBuildOs, macosx), true)\n","filename":"test\/make\/UtilsForTests.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}