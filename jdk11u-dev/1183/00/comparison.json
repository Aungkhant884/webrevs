{"files":[{"patch":"@@ -213,2 +213,4 @@\n-  \/\/ start a new block after jsr-bytecode and link this block into cfg\n-  make_block_at(next_bci, current);\n+  if (next_bci < method()->code_size()) {\n+    \/\/ start a new block after jsr-bytecode and link this block into cfg\n+    make_block_at(next_bci, current);\n+  }\n@@ -234,0 +236,2 @@\n+  int end_bci = method()->code_size();\n+\n@@ -304,1 +308,3 @@\n-        make_block_at(s.next_bci(), current);\n+        if (s.next_bci() < end_bci) {\n+          make_block_at(s.next_bci(), current);\n+        }\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+  assert(bci >= 0 && bci < _code_size, \"valid bytecode range\");\n@@ -41,1 +42,1 @@\n-  assert(bci >=0 && bci < _code_size, \"valid bytecode range\");\n+  assert(bci >= 0 && bci < _code_size, \"valid bytecode range\");\n@@ -149,1 +150,3 @@\n-        ciBlock *fall_through = make_block_at(s.next_bci());\n+        if (s.next_bci() < limit_bci) {\n+          ciBlock *fall_through = make_block_at(s.next_bci());\n+        }\n@@ -169,1 +172,3 @@\n-        ciBlock *ret = make_block_at(s.next_bci());\n+        if (s.next_bci() < limit_bci) {\n+          ciBlock *ret = make_block_at(s.next_bci());\n+        }\n@@ -227,1 +232,3 @@\n-        ciBlock *ret = make_block_at(s.next_bci());\n+        if (s.next_bci() < limit_bci) {\n+          ciBlock *ret = make_block_at(s.next_bci());\n+        }\n","filename":"src\/hotspot\/share\/ci\/ciMethodBlocks.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -266,4 +266,5 @@\n-        dest = _block_map->at(bytes.next_bci());\n-        assert(dest != NULL, \"must be a block immediately following this one.\");\n-        dest->add_normal_predecessor(current_block);\n-\n+        if (bytes.next_bci() < method_len) {\n+          dest = _block_map->at(bytes.next_bci());\n+          assert(dest != NULL, \"must be a block immediately following this one.\");\n+          dest->add_normal_predecessor(current_block);\n+        }\n","filename":"src\/hotspot\/share\/compiler\/methodLiveness.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler\/parsing;\n+\n+super public class Custom {\n+\n+    public static Method test:\"(I)V\" stack 2 locals 1 {\n+        return;\n+Loop:\n+        \/\/ Unreachable block\n+        iload_0;\n+        bipush        100;\n+        if_icmpge     Loop;\n+        \/\/ Falls through\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/parsing\/Custom.jasm","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test UnreachableBlockFallsThroughEndOfCode.java\n+ * @bug 8283441\n+ * @compile Custom.jasm UnreachableBlockFallsThroughEndOfCode.java\n+ * @summary Compiling method that falls off the end of the code array\n+ * @run main\/othervm -XX:TieredStopAtLevel=1 -Xbatch compiler.parsing.UnreachableBlockFallsThroughEndOfCode\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch compiler.parsing.UnreachableBlockFallsThroughEndOfCode\n+ *\/\n+\n+package compiler.parsing;\n+\n+public class UnreachableBlockFallsThroughEndOfCode {\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 20000; i++) {\n+            Custom.test(i);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/parsing\/UnreachableBlockFallsThroughEndOfCode.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"}]}