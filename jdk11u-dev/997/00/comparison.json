{"files":[{"patch":"@@ -124,1 +124,1 @@\n-    CFLAGS_DEBUG_SYMBOLS=\"-g\"\n+    CFLAGS_DEBUG_SYMBOLS=\"-g1\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -281,0 +281,15 @@\n+  # on AIX, check for xlclang++ on the PATH and TOOLCHAIN_PATH and use it if it is available\n+  if test \"x$OPENJDK_TARGET_OS\" = xaix; then\n+    if test \"x$TOOLCHAIN_PATH\" != x; then\n+      XLC_TEST_PATH=${TOOLCHAIN_PATH}\/\n+    fi\n+\n+    XLCLANG_VERSION_OUTPUT=`${XLC_TEST_PATH}xlclang++ -qversion 2>&1 | $HEAD -n 1`\n+    $ECHO \"$XLCLANG_VERSION_OUTPUT\" | $GREP \"IBM XL C\/C++ for AIX\" > \/dev\/null\n+    if test $? -eq 0; then\n+      AC_MSG_NOTICE([xlclang++ output: $XLCLANG_VERSION_OUTPUT])\n+    else\n+      AC_MSG_ERROR([xlclang++ version output check failed, output: $XLCLANG_VERSION_OUTPUT])\n+    fi\n+  fi\n+\n@@ -285,1 +300,1 @@\n-  TOOLCHAIN_CC_BINARY_xlc=\"xlc_r\"\n+  TOOLCHAIN_CC_BINARY_xlc=\"xlclang\"\n@@ -291,1 +306,1 @@\n-  TOOLCHAIN_CXX_BINARY_xlc=\"xlC_r\"\n+  TOOLCHAIN_CXX_BINARY_xlc=\"xlclang++\"\n","filename":"make\/autoconf\/toolchain.m4","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -521,1 +521,1 @@\n-  trcVerbose(\"Can use 64K pages dynamically with shared meory: %s\",\n+  trcVerbose(\"Can use 64K pages dynamically with shared memory: %s\",\n@@ -1436,1 +1436,1 @@\n-  st->print_cr(\"  Can use 64K pages dynamically with shared meory:  %s\",\n+  st->print_cr(\"  Can use 64K pages dynamically with shared memory:  %s\",\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013 SAP SE. All rights reserved.\n+ * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n@@ -37,0 +37,6 @@\n+\/\/ distinguish old xlc and xlclang++, where\n+\/\/ <ibmdemangle.h> is suggested but not found in GA release (might come with a fix)\n+#if defined(__clang__)\n+#define DISABLE_DEMANGLE\n+\/\/ #include <ibmdemangle.h>\n+#else\n@@ -38,0 +44,2 @@\n+#endif\n+\n@@ -240,0 +248,1 @@\n+#ifndef DISABLE_DEMANGLE\n@@ -252,0 +261,1 @@\n+#endif\n","filename":"src\/hotspot\/os\/aix\/porting_aix.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#if !defined(USE_XLC_PREFETCH_WRITE_BUILTIN)\n+#if !defined(USE_XLC_BUILTINS)\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/prefetch_aix_ppc.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,4 +170,1 @@\n-  \/\/ xlC on AIX can't compile test_oopStorage.cpp with following private\n-  \/\/ classes. C++03 introduced access for nested classes with DR45, but xlC\n-  \/\/ version 12 rejects it.\n-NOT_AIX( private: )\n+private:\n@@ -212,1 +209,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -223,3 +223,0 @@\n-#ifdef __IBMCPP__\n- public:\n-#endif\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3907,1 +3907,1 @@\n-  UNSUPPORTED_OPTION(AllocateHeapAt);\n+  UNSUPPORTED_OPTION_NULL(AllocateHeapAt);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -668,1 +668,13 @@\n-#endif \/\/ SHARE_VM_RUNTIME_ARGUMENTS_HPP\n+\/\/ similar to UNSUPPORTED_OPTION but sets flag to NULL\n+#define UNSUPPORTED_OPTION_NULL(opt)                     \\\n+do {                                                     \\\n+  if (opt) {                                             \\\n+    if (FLAG_IS_CMDLINE(opt)) {                          \\\n+      warning(\"-XX flag \" #opt \" not supported in this VM\"); \\\n+    }                                                    \\\n+    FLAG_SET_DEFAULT(opt, NULL);                         \\\n+  }                                                      \\\n+} while(0)\n+\n+\n+#endif \/\/ SHARE_RUNTIME_ARGUMENTS_HPP\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2012, 2017 SAP SE. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019 SAP SE. All rights reserved.\n@@ -54,0 +54,13 @@\n+\/\/ check for xlc16 or higher\n+#ifdef __ibmxl_version__\n+  #if __ibmxl_version__ < 16\n+  #error \"xlc < 16 not supported\"\n+  #endif\n+#else\n+  #error \"xlc < 16 not supported, macro __ibmxl_version__ not found\"\n+#endif\n+\n+#ifndef _AIX\n+#error \"missing AIX-specific definition _AIX\"\n+#endif\n+\n@@ -56,0 +69,1 @@\n+\n@@ -58,11 +72,1 @@\n-  #if __IBMCPP__ < 1000\n-  \/\/ the funtion prototype for __dcbtst(void *) is missing in XLC V8.0\n-  \/\/ I could compile a little test, where I provided the prototype.\n-  \/\/ The generated code was correct there. This is the prototype:\n-  \/\/ extern \"builtin\" void __dcbtst (void *);\n-  \/\/ For now we don't make use of it when compiling with XLC V8.0\n-  #else\n-  \/\/ __IBMCPP__ >= 1000\n-  \/\/ XLC V10 provides the prototype for __dcbtst (void *);\n-  #define USE_XLC_PREFETCH_WRITE_BUILTIN\n-  #endif\n+\/\/ XLC V10 and higher provide the prototype for __dcbtst (void *);\n@@ -72,10 +76,3 @@\n-\/\/ On Linux NULL is defined as a special type '__null'. Assigning __null to\n-\/\/ integer variable will cause gcc warning. Use NULL_WORD in places where a\n-\/\/ pointer is stored as integer value.  On some platforms, sizeof(intptr_t) >\n-\/\/ sizeof(void*), so here we want something which is integer type, but has the\n-\/\/ same size as a pointer.\n-#ifdef __GNUC__\n-  #error XLC and __GNUC__?\n-#else\n-  #define NULL_WORD  NULL\n-#endif\n+\/\/ Some platform\/tool-chain combinations can't assign NULL to an integer\n+\/\/ type so we define NULL_WORD to use in those contexts. For xlc they are the same.\n+#define NULL_WORD  NULL\n@@ -87,10 +84,7 @@\n-\/\/ (see jmv_aix.h).\n-#ifdef AIX\n-  #include <dirent.h>\n-  #ifdef _LP64\n-    #undef NULL\n-    #define NULL 0L\n-  #else\n-    #ifndef NULL\n-      #define NULL 0\n-    #endif\n+#include <dirent.h>\n+#ifdef _LP64\n+  #undef NULL\n+  #define NULL 0L\n+#else\n+  #ifndef NULL\n+    #define NULL 0\n@@ -98,1 +92,1 @@\n-#endif \/\/ AIX\n+#endif\n@@ -111,1 +105,0 @@\n-#ifdef AIX\n@@ -114,3 +107,0 @@\n-#else\n-#error \"missing platform-specific definition here\"\n-#endif\n@@ -119,1 +109,0 @@\n-\n@@ -123,1 +112,0 @@\n-\n@@ -125,1 +113,0 @@\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_xlc.hpp","additions":28,"deletions":41,"binary":false,"changes":69,"status":"modified"}]}