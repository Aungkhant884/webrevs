{"files":[{"patch":"@@ -131,2 +131,2 @@\n-reg_def R27     (  NS, SOE, Op_RegI, 27, r27->as_VMReg()        ); \/\/ heapbase\n-reg_def R27_H   (  NS, SOE, Op_RegI, 27, r27->as_VMReg()->next());\n+reg_def R27     ( SOC, SOE, Op_RegI, 27, r27->as_VMReg()        ); \/\/ heapbase\n+reg_def R27_H   ( SOC, SOE, Op_RegI, 27, r27->as_VMReg()->next());\n@@ -438,3 +438,2 @@\n-\/\/ Class for all 32 bit integer registers -- excludes SP which will\n-\/\/ never be used as an integer register\n-reg_class any_reg32(\n+\/\/ Class for all 32 bit general purpose registers\n+reg_class all_reg32(\n@@ -469,1 +468,2 @@\n-    R30\n+    R30,\n+    R31\n@@ -472,0 +472,7 @@\n+\n+\/\/ Class for all 32 bit integer registers (excluding SP which\n+\/\/ will never be used as an integer register)\n+reg_class any_reg32 %{\n+  return _ANY_REG32_mask;\n+%}\n+\n@@ -484,2 +491,5 @@\n-\/\/ Class for all long integer registers (including RSP)\n-reg_class any_reg(\n+\/\/ Singleton class for R31 int register\n+reg_class int_r31_reg(R31);\n+\n+\/\/ Class for all 64 bit general purpose registers\n+reg_class all_reg(\n@@ -518,33 +528,4 @@\n-\/\/ Class for all non-special integer registers\n-reg_class no_special_reg32_no_fp(\n-    R0,\n-    R1,\n-    R2,\n-    R3,\n-    R4,\n-    R5,\n-    R6,\n-    R7,\n-    R10,\n-    R11,\n-    R12,                        \/\/ rmethod\n-    R13,\n-    R14,\n-    R15,\n-    R16,\n-    R17,\n-    R18,\n-    R19,\n-    R20,\n-    R21,\n-    R22,\n-    R23,\n-    R24,\n-    R25,\n-    R26\n- \/* R27, *\/                     \/\/ heapbase\n- \/* R28, *\/                     \/\/ thread\n- \/* R29, *\/                     \/\/ fp\n- \/* R30, *\/                     \/\/ lr\n- \/* R31 *\/                      \/\/ sp\n-);\n+\/\/ Class for all long integer registers (including SP)\n+reg_class any_reg %{\n+  return _ANY_REG_mask;\n+%}\n@@ -552,31 +533,5 @@\n-reg_class no_special_reg32_with_fp(\n-    R0,\n-    R1,\n-    R2,\n-    R3,\n-    R4,\n-    R5,\n-    R6,\n-    R7,\n-    R10,\n-    R11,\n-    R12,                        \/\/ rmethod\n-    R13,\n-    R14,\n-    R15,\n-    R16,\n-    R17,\n-    R18,\n-    R19,\n-    R20,\n-    R21,\n-    R22,\n-    R23,\n-    R24,\n-    R25,\n-    R26\n- \/* R27, *\/                     \/\/ heapbase\n- \/* R28, *\/                     \/\/ thread\n-    R29,                        \/\/ fp\n- \/* R30, *\/                     \/\/ lr\n- \/* R31 *\/                      \/\/ sp\n+\/\/ Class for non-allocatable 32 bit registers\n+reg_class non_allocatable_reg32(\n+    R28,                        \/\/ thread\n+    R30,                        \/\/ lr\n+    R31                         \/\/ sp\n@@ -585,34 +540,5 @@\n-reg_class_dynamic no_special_reg32(no_special_reg32_no_fp, no_special_reg32_with_fp, %{ PreserveFramePointer %});\n-\n-\/\/ Class for all non-special long integer registers\n-reg_class no_special_reg_no_fp(\n-    R0, R0_H,\n-    R1, R1_H,\n-    R2, R2_H,\n-    R3, R3_H,\n-    R4, R4_H,\n-    R5, R5_H,\n-    R6, R6_H,\n-    R7, R7_H,\n-    R10, R10_H,\n-    R11, R11_H,\n-    R12, R12_H,                 \/\/ rmethod\n-    R13, R13_H,\n-    R14, R14_H,\n-    R15, R15_H,\n-    R16, R16_H,\n-    R17, R17_H,\n-    R18, R18_H,\n-    R19, R19_H,\n-    R20, R20_H,\n-    R21, R21_H,\n-    R22, R22_H,\n-    R23, R23_H,\n-    R24, R24_H,\n-    R25, R25_H,\n-    R26, R26_H,\n- \/* R27, R27_H, *\/              \/\/ heapbase\n- \/* R28, R28_H, *\/              \/\/ thread\n- \/* R29, R29_H, *\/              \/\/ fp\n- \/* R30, R30_H, *\/              \/\/ lr\n- \/* R31, R31_H *\/               \/\/ sp\n+\/\/ Class for non-allocatable 64 bit registers\n+reg_class non_allocatable_reg(\n+    R28, R28_H,                 \/\/ thread\n+    R30, R30_H,                 \/\/ lr\n+    R31, R31_H                  \/\/ sp\n@@ -621,32 +547,4 @@\n-reg_class no_special_reg_with_fp(\n-    R0, R0_H,\n-    R1, R1_H,\n-    R2, R2_H,\n-    R3, R3_H,\n-    R4, R4_H,\n-    R5, R5_H,\n-    R6, R6_H,\n-    R7, R7_H,\n-    R10, R10_H,\n-    R11, R11_H,\n-    R12, R12_H,                 \/\/ rmethod\n-    R13, R13_H,\n-    R14, R14_H,\n-    R15, R15_H,\n-    R16, R16_H,\n-    R17, R17_H,\n-    R18, R18_H,\n-    R19, R19_H,\n-    R20, R20_H,\n-    R21, R21_H,\n-    R22, R22_H,\n-    R23, R23_H,\n-    R24, R24_H,\n-    R25, R25_H,\n-    R26, R26_H,\n- \/* R27, R27_H, *\/              \/\/ heapbase\n- \/* R28, R28_H, *\/              \/\/ thread\n-    R29, R29_H,                 \/\/ fp\n- \/* R30, R30_H, *\/              \/\/ lr\n- \/* R31, R31_H *\/               \/\/ sp\n-);\n+\/\/ Class for all non-special integer registers\n+reg_class no_special_reg32 %{\n+  return _NO_SPECIAL_REG32_mask;\n+%}\n@@ -654,1 +552,4 @@\n-reg_class_dynamic no_special_reg(no_special_reg_no_fp, no_special_reg_with_fp, %{ PreserveFramePointer %});\n+\/\/ Class for all non-special long integer registers\n+reg_class no_special_reg %{\n+  return _NO_SPECIAL_REG_mask;\n+%}\n@@ -727,32 +628,3 @@\n-reg_class ptr_reg(\n-    R0, R0_H,\n-    R1, R1_H,\n-    R2, R2_H,\n-    R3, R3_H,\n-    R4, R4_H,\n-    R5, R5_H,\n-    R6, R6_H,\n-    R7, R7_H,\n-    R10, R10_H,\n-    R11, R11_H,\n-    R12, R12_H,\n-    R13, R13_H,\n-    R14, R14_H,\n-    R15, R15_H,\n-    R16, R16_H,\n-    R17, R17_H,\n-    R18, R18_H,\n-    R19, R19_H,\n-    R20, R20_H,\n-    R21, R21_H,\n-    R22, R22_H,\n-    R23, R23_H,\n-    R24, R24_H,\n-    R25, R25_H,\n-    R26, R26_H,\n-    R27, R27_H,\n-    R28, R28_H,\n-    R29, R29_H,\n-    R30, R30_H,\n-    R31, R31_H\n-);\n+reg_class ptr_reg %{\n+  return _PTR_REG_mask;\n+%}\n@@ -761,32 +633,3 @@\n-reg_class no_special_ptr_reg(\n-    R0, R0_H,\n-    R1, R1_H,\n-    R2, R2_H,\n-    R3, R3_H,\n-    R4, R4_H,\n-    R5, R5_H,\n-    R6, R6_H,\n-    R7, R7_H,\n-    R10, R10_H,\n-    R11, R11_H,\n-    R12, R12_H,\n-    R13, R13_H,\n-    R14, R14_H,\n-    R15, R15_H,\n-    R16, R16_H,\n-    R17, R17_H,\n-    R18, R18_H,\n-    R19, R19_H,\n-    R20, R20_H,\n-    R21, R21_H,\n-    R22, R22_H,\n-    R23, R23_H,\n-    R24, R24_H,\n-    R25, R25_H,\n-    R26, R26_H,\n- \/* R27, R27_H, *\/              \/\/ heapbase\n- \/* R28, R28_H, *\/              \/\/ thread\n- \/* R29, R29_H, *\/              \/\/ fp\n- \/* R30, R30_H, *\/              \/\/ lr\n- \/* R31, R31_H *\/               \/\/ sp\n-);\n+reg_class no_special_ptr_reg %{\n+  return _NO_SPECIAL_PTR_REG_mask;\n+%}\n@@ -1005,0 +848,7 @@\n+extern RegMask _ANY_REG32_mask;\n+extern RegMask _ANY_REG_mask;\n+extern RegMask _PTR_REG_mask;\n+extern RegMask _NO_SPECIAL_REG32_mask;\n+extern RegMask _NO_SPECIAL_REG_mask;\n+extern RegMask _NO_SPECIAL_PTR_REG_mask;\n+\n@@ -1065,0 +915,46 @@\n+  \/\/ Derived RegMask with conditionally allocatable registers\n+\n+  RegMask _ANY_REG32_mask;\n+  RegMask _ANY_REG_mask;\n+  RegMask _PTR_REG_mask;\n+  RegMask _NO_SPECIAL_REG32_mask;\n+  RegMask _NO_SPECIAL_REG_mask;\n+  RegMask _NO_SPECIAL_PTR_REG_mask;\n+\n+  void reg_mask_init() {\n+    \/\/ We derive below RegMask(s) from the ones which are auto-generated from\n+    \/\/ adlc register classes to make AArch64 rheapbase (r27) and rfp (r29)\n+    \/\/ registers conditionally reserved.\n+\n+    _ANY_REG32_mask = _ALL_REG32_mask;\n+    _ANY_REG32_mask.Remove(OptoReg::as_OptoReg(r31_sp->as_VMReg()));\n+\n+    _ANY_REG_mask = _ALL_REG_mask;\n+\n+    _PTR_REG_mask = _ALL_REG_mask;\n+\n+    _NO_SPECIAL_REG32_mask = _ALL_REG32_mask;\n+    _NO_SPECIAL_REG32_mask.SUBTRACT(_NON_ALLOCATABLE_REG32_mask);\n+\n+    _NO_SPECIAL_REG_mask = _ALL_REG_mask;\n+    _NO_SPECIAL_REG_mask.SUBTRACT(_NON_ALLOCATABLE_REG_mask);\n+\n+    _NO_SPECIAL_PTR_REG_mask = _ALL_REG_mask;\n+    _NO_SPECIAL_PTR_REG_mask.SUBTRACT(_NON_ALLOCATABLE_REG_mask);\n+\n+    \/\/ r27 is not allocatable when compressed oops is on and heapbase is not\n+    \/\/ zero, compressed klass pointers doesn't use r27 after JDK-8234794\n+    if (UseCompressedOops && Universe::narrow_ptrs_base() != NULL) {\n+      _NO_SPECIAL_REG32_mask.Remove(OptoReg::as_OptoReg(r27->as_VMReg()));\n+      _NO_SPECIAL_REG_mask.SUBTRACT(_HEAPBASE_REG_mask);\n+      _NO_SPECIAL_PTR_REG_mask.SUBTRACT(_HEAPBASE_REG_mask);\n+    }\n+\n+    \/\/ r29 is not allocatable when PreserveFramePointer is on\n+    if (PreserveFramePointer) {\n+      _NO_SPECIAL_REG32_mask.Remove(OptoReg::as_OptoReg(r29->as_VMReg()));\n+      _NO_SPECIAL_REG_mask.SUBTRACT(_FP_REG_mask);\n+      _NO_SPECIAL_PTR_REG_mask.SUBTRACT(_FP_REG_mask);\n+    }\n+  }\n+\n@@ -7026,1 +6922,1 @@\n-instruct storeImmN0(iRegIHeapbase heapbase, immN0 zero, memory mem)\n+instruct storeImmN0(immN0 zero, memory mem)\n@@ -7029,3 +6925,1 @@\n-  predicate(Universe::narrow_oop_base() == NULL &&\n-            Universe::narrow_klass_base() == NULL &&\n-            (!needs_releasing_store(n)));\n+  predicate(!needs_releasing_store(n));\n@@ -7034,1 +6928,1 @@\n-  format %{ \"strw  rheapbase, $mem\\t# compressed ptr (rheapbase==0)\" %}\n+  format %{ \"strw  zr, $mem\\t# compressed ptr\" %}\n@@ -7036,1 +6930,1 @@\n-  ins_encode(aarch64_enc_strw(heapbase, mem));\n+  ins_encode(aarch64_enc_strw0(mem));\n@@ -7038,1 +6932,1 @@\n-  ins_pipe(istore_reg_mem);\n+  ins_pipe(istore_mem);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":104,"deletions":210,"binary":false,"changes":314,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2019, Red Hat Inc. All rights reserved.\n@@ -30,1 +30,3 @@\n-\/\/ processor dependent initialization for i486\n+\/\/ processor dependent initialization for AArch64\n+\n+extern void reg_mask_init();\n@@ -34,2 +36,1 @@\n-  \/\/ QQQ presumably all 64bit cpu's support this. Seems like the ifdef could\n-  \/\/ simply be left out.\n+  reg_mask_init();\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_init_aarch64.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2116,0 +2116,4 @@\n+  if (!UseCompressedOops || Universe::ptr_base() == NULL) {\n+    \/\/ rheapbase is allocated as general register\n+    return;\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-    if (r < rheapbase && r != rscratch1 && r != rscratch2) {\n+    if (r <= rfp && r != rscratch1 && r != rscratch2) {\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}