{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.util.List;\n@@ -264,7 +265,11 @@\n-        String authval = hdrs.firstValue(authname).orElse(null);\n-        if (authval == null) {\n-            if (exchange.client().authenticator().isPresent()) {\n-                throw new IOException(authname + \" header missing for response code \" + status);\n-            } else {\n-                \/\/ No authenticator? let the caller deal with this.\n-                return null;\n+        List<String> authvals = hdrs.allValues(authname);\n+        if (authvals.isEmpty() && exchange.client().authenticator().isPresent()) {\n+            throw new IOException(authname + \" header missing for response code \" + status);\n+        }\n+        String authval = null;\n+        for (String aval : authvals) {\n+            HeaderParser parser = new HeaderParser(aval);\n+            String scheme = parser.findKey(0);\n+            if (scheme.equalsIgnoreCase(\"Basic\")) {\n+                authval = aval;\n+                break;\n@@ -273,8 +278,2 @@\n-\n-        HeaderParser parser = new HeaderParser(authval);\n-        String scheme = parser.findKey(0);\n-\n-        \/\/ TODO: Need to generalise from Basic only. Delegate to a provider class etc.\n-\n-        if (!scheme.equalsIgnoreCase(\"Basic\")) {\n-            return null;   \/\/ error gets returned to app\n+        if (authval == null) {\n+            return null;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AuthenticationFilter.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8217237\n+ * @modules java.net.http\n+ * @run main\/othervm AuthSchemesTest\n+ * @summary HttpClient does not deal well with multi-valued WWW-Authenticate challenge headers\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.*;\n+import java.net.Authenticator;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+\n+public class AuthSchemesTest {\n+    static class BasicServer extends Thread {\n+\n+        ServerSocket server;\n+\n+        Socket s;\n+        InputStream is;\n+        OutputStream os;\n+        static final String RESPONSE = \"Hello world\";\n+        static final String respLength = Integer.toString(RESPONSE.length());\n+        static final String realm = \"wally world\";\n+\n+        String reply1 = \"HTTP\/1.1 401 Unauthorized\\r\\n\"+\n+                \"WWW-Authenticate: BarScheme\\r\\n\" +\n+                \"WWW-Authenticate: FooScheme realm=\\\"\"+realm+\"\\\"\\r\\n\" +\n+                \"WWW-Authenticate: Basic realm=\\\"\"+realm+\"\\\"\\r\\n\" +\n+                \"WWW-Authenticate: WoofScheme\\r\\n\\r\\n\";\n+\n+        String reply2 = \"HTTP\/1.1 200 OK\\r\\n\"+\n+                \"Date: Mon, 15 Jan 2001 12:18:21 GMT\\r\\n\" +\n+                \"Server: Apache\/1.3.14 (Unix)\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Type: text\/html; charset=iso-8859-1\\r\\n\" +\n+                \"Content-Length: \" + respLength + \"\\r\\n\\r\\n\";\n+\n+        BasicServer(ServerSocket s) {\n+            server = s;\n+        }\n+\n+        String response() {\n+            return RESPONSE;\n+        }\n+\n+        void readAll(Socket s) throws IOException {\n+            byte[] buf = new byte [128];\n+            InputStream is = s.getInputStream();\n+            s.setSoTimeout(1000);\n+            try {\n+                while (is.read(buf) > 0) ;\n+            } catch (SocketTimeoutException x) { }\n+        }\n+\n+        public void run() {\n+            try {\n+                System.out.println(\"Server 1: accept\");\n+                s = server.accept();\n+                System.out.println(\"accepted\");\n+                os = s.getOutputStream();\n+                os.write(reply1.getBytes());\n+                readAll(s);\n+                s.close();\n+\n+                System.out.println(\"Server 2: accept\");\n+                s = server.accept();\n+                System.out.println(\"accepted\");\n+                os = s.getOutputStream();\n+                os.write((reply2+RESPONSE).getBytes());\n+                readAll(s);\n+                s.close();\n+\n+            }\n+            catch (Exception e) {\n+                System.out.println(e);\n+            }\n+            finished();\n+        }\n+\n+        boolean isfinished = false;\n+\n+        public synchronized void finished() {\n+            isfinished = true;\n+            notifyAll();\n+        }\n+\n+        public synchronized void waitforfinish() {\n+            while (!isfinished) {\n+                try {\n+                    wait();\n+                } catch (InterruptedException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+\n+    static class Auth extends Authenticator {\n+        protected PasswordAuthentication getPasswordAuthentication() {\n+            return new PasswordAuthentication(\"user\", new char[] {'a','b','c'});\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ServerSocket serversocket = null;\n+        BasicServer server = null;\n+        Auth authenticator = new Auth();\n+\n+        serversocket = new ServerSocket(0, 10, InetAddress.getLoopbackAddress());\n+        int port = serversocket.getLocalPort();\n+        server = new BasicServer(serversocket);\n+\n+        HttpClient client = HttpClient.newBuilder()\n+                .authenticator(authenticator)\n+                .build();\n+        server.start();\n+        URI uri = URI.create(\"http:\/\/127.0.0.1:\" + port + \"\/foo\");\n+        HttpRequest request = HttpRequest.newBuilder(uri)\n+                .GET()\n+                .build();\n+        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+        if (response.statusCode() != 200 || !response.body().equals(server.response())) {\n+            System.out.println(\"Status code = \" + response.statusCode());\n+            serversocket.close();\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+        serversocket.close();\n+        server.waitforfinish();\n+        System.out.println(\"OK\");\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/AuthSchemesTest.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}