{"files":[{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2014, 2019, Red Hat, Inc. All rights reserved.\n+\/\/ Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2014, 2022, Red Hat, Inc. All rights reserved.\n@@ -2419,0 +2419,34 @@\n+  static void loadStore(MacroAssembler masm, mem_insn insn,\n+                         Register reg, int opcode,\n+                         Register base, int index, int size, int disp,\n+                         int size_in_memory)\n+  {\n+    Address::extend scale;\n+\n+    \/\/ Hooboy, this is fugly.  We need a way to communicate to the\n+    \/\/ encoder that the index needs to be sign extended, so we have to\n+    \/\/ enumerate all the cases.\n+    switch (opcode) {\n+    case INDINDEXSCALEDI2L:\n+    case INDINDEXSCALEDI2LN:\n+    case INDINDEXI2L:\n+    case INDINDEXI2LN:\n+      scale = Address::sxtw(size);\n+      break;\n+    default:\n+      scale = Address::lsl(size);\n+    }\n+\n+    if (index == -1) {\n+      Address addr(base, disp);\n+      \/* Fix up any out-of-range offsets. *\/\n+      assert_different_registers(rscratch1, base);\n+      assert_different_registers(rscratch1, reg);\n+      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);\n+      (masm.*insn)(reg, addr);\n+    } else {\n+      assert(disp == 0, \"unsupported address mode: disp = %d\", disp);\n+      (masm.*insn)(reg, Address(base, as_Register(index), scale));\n+    }\n+  }\n+\n@@ -2501,0 +2535,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2507,0 +2543,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2513,0 +2551,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2519,0 +2559,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2525,0 +2567,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2531,0 +2575,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2537,0 +2583,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2543,0 +2591,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2549,0 +2599,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2555,0 +2607,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2561,0 +2615,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2567,0 +2623,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2573,0 +2631,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2579,0 +2639,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2585,0 +2647,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2591,0 +2655,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2597,0 +2663,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2603,0 +2671,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2609,0 +2679,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2615,0 +2687,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2622,0 +2696,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2625,1 +2701,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 2);\n@@ -2628,0 +2704,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2631,1 +2709,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 2);\n@@ -2634,0 +2712,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2637,1 +2717,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n@@ -2640,0 +2720,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2643,1 +2725,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n@@ -2646,0 +2728,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2657,1 +2741,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n@@ -2660,0 +2744,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2663,1 +2749,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n@@ -2666,0 +2752,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2672,0 +2760,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2678,0 +2768,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2684,0 +2776,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2690,0 +2784,2 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -2695,1 +2791,1 @@\n-\n+ \n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":105,"deletions":9,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-dnl Copyright (c) 2014, Red Hat Inc. All rights reserved.\n+dnl Copyright (c) 2014, 2022 Red Hat Inc. All rights reserved.\n@@ -26,3 +26,20 @@\n-define(choose, `loadStore($1, &MacroAssembler::$3, $2, $4,\n-               $5, $6, $7, $8);dnl\n-\n+dnl\n+dnl\n+define(LOAD,`\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  enc_class aarch64_enc_$2($1 dst, memory mem) %{\n+    $3Register dst_reg = as_$3Register($dst$$reg);\n+    loadStore(MacroAssembler(&cbuf), &MacroAssembler::$2, dst_reg, $mem->opcode(),\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+  %}')dnl\n+dnl\n+dnl\n+dnl\n+define(LOADV,`\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  enc_class aarch64_enc_$2($1 dst, memory mem) %{\n+    FloatRegister dst_reg = as_FloatRegister($dst$$reg);\n+    loadStore(MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::$3,\n+       $mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n@@ -30,21 +47,3 @@\n-define(access, `\n-    $3Register $1_reg = as_$3Register($$1$$reg);\n-    $4choose(MacroAssembler(&cbuf), $1_reg,$2,$mem->opcode(),\n-        as_Register($mem$$base),$mem$$index,$mem$$scale,$mem$$disp)')dnl\n-define(load,`\n-  enc_class aarch64_enc_$2($1 dst, memory mem) %{dnl\n-access(dst,$2,$3)')dnl\n-load(iRegI,ldrsbw)\n-load(iRegI,ldrsb)\n-load(iRegI,ldrb)\n-load(iRegL,ldrb)\n-load(iRegI,ldrshw)\n-load(iRegI,ldrsh)\n-load(iRegI,ldrh)\n-load(iRegL,ldrh)\n-load(iRegI,ldrw)\n-load(iRegL,ldrw)\n-load(iRegL,ldrsw)\n-load(iRegL,ldr)\n-load(vRegF,ldrs,Float)\n-load(vRegD,ldrd,Float)\n+dnl\n+dnl\n+dnl\n@@ -52,2 +51,10 @@\n-  enc_class aarch64_enc_$2($1 src, memory mem) %{dnl\n-access(src,$2,$3,$4)')dnl\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  enc_class aarch64_enc_$2($1 src, memory mem) %{\n+    $3Register src_reg = as_$3Register($src$$reg);\n+    $4loadStore(MacroAssembler(&cbuf), &MacroAssembler::$2, src_reg, $mem->opcode(),\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+  %}')dnl\n+dnl\n+dnl\n+dnl\n@@ -55,0 +62,24 @@\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  enc_class aarch64_enc_$2`'0(memory mem) %{\n+    MacroAssembler _masm(&cbuf);\n+    $4loadStore(_masm, &MacroAssembler::$2, zr, $mem->opcode(),\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+  %}')dnl\n+dnl\n+dnl\n+dnl\n+define(STOREL,`\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  enc_class aarch64_enc_$2($1 src, memory mem) %{\n+    $3Register src_reg = as_$3Register($src$$reg);\n+    $4loadStore(MacroAssembler(&cbuf), &MacroAssembler::$2, src_reg, $mem->opcode(),\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, $5);\n+  %}')dnl\n+dnl\n+dnl\n+dnl\n+define(STOREL0,`\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n@@ -57,2 +88,34 @@\n-    choose(_masm,zr,$2,$mem->opcode(),\n-        as_$3Register($mem$$base),$mem$$index,$mem$$scale,$mem$$disp)')dnl\n+    $4loadStore(_masm, &MacroAssembler::$2, zr, $mem->opcode(),\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, $5);\n+  %}')dnl\n+dnl\n+dnl\n+dnl\n+define(STOREV,`\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  enc_class aarch64_enc_$2($1 src, memory mem) %{\n+    FloatRegister src_reg = as_FloatRegister($src$$reg);\n+    loadStore(MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::$3,\n+       $mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+  %}')dnl\n+dnl\n+dnl\n+dnl\n+LOAD(iRegI,ldrsbw)\n+LOAD(iRegI,ldrsb)\n+LOAD(iRegI,ldrb)\n+LOAD(iRegL,ldrb)\n+LOAD(iRegI,ldrshw)\n+LOAD(iRegI,ldrsh)\n+LOAD(iRegI,ldrh)\n+LOAD(iRegL,ldrh)\n+LOAD(iRegI,ldrw)\n+LOAD(iRegL,ldrw)\n+LOAD(iRegL,ldrsw)\n+LOAD(iRegL,ldr)\n+LOAD(vRegF,ldrs,Float)\n+LOAD(vRegD,ldrd,Float)\n+LOADV(vecD,ldrvS,S)\n+LOADV(vecD,ldrvD,D)\n+LOADV(vecX,ldrvQ,Q)\n@@ -61,5 +124,15 @@\n-STORE(iRegI,strh)\n-STORE0(iRegI,strh)\n-STORE(iRegI,strw)\n-STORE0(iRegI,strw)\n-STORE(iRegL,str,,\n+\n+  \/\/ This encoding class is generated automatically from ad_encode.m4.\n+  \/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  enc_class aarch64_enc_strb0_ordered(memory mem) %{\n+    MacroAssembler _masm(&cbuf);\n+    __ membar(Assembler::StoreStore);\n+    loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+  %}dnl\n+\n+STOREL(iRegI,strh,,,2)\n+STOREL0(iRegI,strh,,,2)\n+STOREL(iRegI,strw,,,4)\n+STOREL0(iRegI,strw,,,4)\n+STOREL(iRegL,str,,\n@@ -74,2 +147,2 @@\n-    ')\n-STORE0(iRegL,str)\n+    ',8)\n+STOREL0(iRegL,str,,,8)\n@@ -78,21 +151,3 @@\n-\n-  enc_class aarch64_enc_strw_immn(immN src, memory mem) %{\n-    MacroAssembler _masm(&cbuf);\n-    address con = (address)$src$$constant;\n-    \/\/ need to do this the hard way until we can manage relocs\n-    \/\/ for 32 bit constants\n-    __ movoop(rscratch2, (jobject)con);\n-    if (con) __ encode_heap_oop_not_null(rscratch2);\n-    choose(_masm,rscratch2,strw,$mem->opcode(),\n-        as_Register($mem$$base),$mem$$index,$mem$$scale,$mem$$disp)\n-\n-  enc_class aarch64_enc_strw_immnk(immN src, memory mem) %{\n-    MacroAssembler _masm(&cbuf);\n-    address con = (address)$src$$constant;\n-    \/\/ need to do this the hard way until we can manage relocs\n-    \/\/ for 32 bit constants\n-    __ movoop(rscratch2, (jobject)con);\n-    __ encode_klass_not_null(rscratch2);\n-    choose(_masm,rscratch2,strw,$mem->opcode(),\n-        as_Register($mem$$base),$mem$$index,$mem$$scale,$mem$$disp)\n-\n+STOREV(vecD,strvS,S)\n+STOREV(vecD,strvD,D)\n+STOREV(vecX,strvQ,Q)\n","filename":"src\/hotspot\/cpu\/aarch64\/ad_encode.m4","additions":112,"deletions":57,"binary":false,"changes":169,"status":"modified"}]}