{"files":[{"patch":"@@ -2419,0 +2419,38 @@\n+  static void loadStore(MacroAssembler masm, mem_insn insn,\n+                         Register reg, int opcode,\n+                         Register base, int index, int size, int disp,\n+                         int size_in_memory)\n+  {\n+    Address::extend scale;\n+\n+    \/\/ Hooboy, this is fugly.  We need a way to communicate to the\n+    \/\/ encoder that the index needs to be sign extended, so we have to\n+    \/\/ enumerate all the cases.\n+    switch (opcode) {\n+    case INDINDEXSCALEDI2L:\n+    case INDINDEXSCALEDI2LN:\n+    case INDINDEXI2L:\n+    case INDINDEXI2LN:\n+      scale = Address::sxtw(size);\n+      break;\n+    default:\n+      scale = Address::lsl(size);\n+    }\n+\n+    if (index == -1) {\n+      Address addr(base, disp);\n+      \/* If we get an out-of-range offset it is a bug in the compiler,\n+         so we assert here. *\/\n+      assert(Address::offset_ok_for_immed(addr.offset(), exact_log2(size_in_memory)),\n+             \"c2 compiler bug\");\n+      \/* Fix up any out-of-range offsets. *\/\n+      assert_different_registers(rscratch1, base);\n+      assert_different_registers(rscratch1, reg);\n+      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);\n+      (masm.*insn)(reg, addr);\n+    } else {\n+      assert(disp == 0, \"unsupported address mode: disp = %d\", disp);\n+      (masm.*insn)(reg, Address(base, as_Register(index), scale));\n+    }\n+  }\n+\n@@ -2625,1 +2663,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 2);\n@@ -2631,1 +2669,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 2);\n@@ -2637,1 +2675,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n@@ -2643,1 +2681,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n@@ -2657,1 +2695,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n@@ -2663,1 +2701,1 @@\n-               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+               as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":44,"deletions":6,"binary":false,"changes":50,"status":"modified"}]}