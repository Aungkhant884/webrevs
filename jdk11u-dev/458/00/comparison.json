{"files":[{"patch":"@@ -3525,0 +3525,3 @@\n+      assert((uintptr_t)addr >= stack_extent,\n+             \"Sanity: addr should be larger than extent, \" PTR_FORMAT \" >= \" PTR_FORMAT,\n+             p2i(addr), stack_extent);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -320,0 +320,14 @@\n+  if (os::is_primordial_thread()) {\n+    \/\/ primordial thread needs special handling because pthread_getattr_np()\n+    \/\/ may return bogus value.\n+    address stack_bottom = os::Linux::initial_thread_stack_bottom();\n+    size_t stack_bytes  = os::Linux::initial_thread_stack_size();\n+\n+    assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n+    assert(os::current_stack_pointer() < stack_bottom + stack_bytes, \"should do\");\n+\n+    *bottom = stack_bottom;\n+    *size = stack_bytes;\n+    return;\n+  }\n+\n@@ -368,12 +382,0 @@\n-  \/\/ The initial thread has a growable stack, and the size reported\n-  \/\/ by pthread_attr_getstack is the maximum size it could possibly\n-  \/\/ be given what currently mapped.  This can be huge, so we cap it.\n-  if (os::is_primordial_thread()) {\n-    stack_bytes = stack_top - stack_bottom;\n-\n-    if (stack_bytes > JavaThread::stack_size_at_create())\n-      stack_bytes = JavaThread::stack_size_at_create();\n-\n-    stack_bottom = stack_top - stack_bytes;\n-  }\n-\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"}]}