{"files":[{"patch":"@@ -229,0 +229,3 @@\n+  # Setup reproducible build environment\n+  $(eval $(call SetupReproducibleBuild))\n+\n","filename":"make\/Init.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -306,0 +306,9 @@\n+  # Setup the build environment to match the requested specification on\n+  # level of reproducible builds\n+  define SetupReproducibleBuild\n+    ifeq ($$(SOURCE_DATE), updated)\n+      SOURCE_DATE := $$(shell $$(DATE) +\"%s\")\n+    endif\n+    export SOURCE_DATE_EPOCH := $$(SOURCE_DATE)\n+  endef\n+\n","filename":"make\/InitSupport.gmk","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -238,0 +238,1 @@\n+JDKOPT_SETUP_REPRODUCIBLE_BUILD\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -686,0 +686,73 @@\n+\n+################################################################################\n+#\n+# Check and set options related to reproducible builds.\n+#\n+AC_DEFUN_ONCE([JDKOPT_SETUP_REPRODUCIBLE_BUILD],\n+[\n+  AC_ARG_WITH([source-date], [AS_HELP_STRING([--with-source-date],\n+      [how to set SOURCE_DATE_EPOCH ('updated', 'current', 'version' a timestamp or an ISO-8601 date) @<:@updated@:>@])],\n+      [with_source_date_present=true], [with_source_date_present=false])\n+\n+  AC_MSG_CHECKING([what source date to use])\n+\n+  if test \"x$with_source_date\" = xyes; then\n+    AC_MSG_ERROR([--with-source-date must have a value])\n+  elif test \"x$with_source_date\" = xupdated || test \"x$with_source_date\" = x; then\n+    # Tell the makefiles to update at each build\n+    SOURCE_DATE=updated\n+    AC_MSG_RESULT([determined at build time, from 'updated'])\n+  elif test \"x$with_source_date\" = xcurrent; then\n+    # Set the current time\n+    SOURCE_DATE=$($DATE +\"%s\")\n+    AC_MSG_RESULT([$SOURCE_DATE, from 'current'])\n+  elif test \"x$with_source_date\" = xversion; then\n+    # Use the date from version-numbers\n+    UTIL_GET_EPOCH_TIMESTAMP(SOURCE_DATE, $DEFAULT_VERSION_DATE)\n+    if test \"x$SOURCE_DATE\" = x; then\n+      AC_MSG_RESULT([unavailable])\n+      AC_MSG_ERROR([Cannot convert DEFAULT_VERSION_DATE to timestamp])\n+    fi\n+    AC_MSG_RESULT([$SOURCE_DATE, from 'version'])\n+  else\n+    # It's a timestamp, an ISO-8601 date, or an invalid string\n+    # Additional [] needed to keep m4 from mangling shell constructs.\n+    if [ [[ \"$with_source_date\" =~ ^[0-9][0-9]*$ ]] ] ; then\n+      SOURCE_DATE=$with_source_date\n+      AC_MSG_RESULT([$SOURCE_DATE, from timestamp on command line])\n+    else\n+      UTIL_GET_EPOCH_TIMESTAMP(SOURCE_DATE, $with_source_date)\n+      if test \"x$SOURCE_DATE\" != x; then\n+        AC_MSG_RESULT([$SOURCE_DATE, from ISO-8601 date on command line])\n+      else\n+        AC_MSG_RESULT([unavailable])\n+        AC_MSG_ERROR([Cannot parse date string \"$with_source_date\"])\n+      fi\n+    fi\n+  fi\n+\n+  REPRODUCIBLE_BUILD_DEFAULT=$with_source_date_present\n+\n+  if test \"x$OPENJDK_BUILD_OS\" = xwindows && \\\n+      test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = xfalse; then\n+    # To support banning absolute paths on Windows, we must use the -pathmap\n+    # method, which requires reproducible builds.\n+    REPRODUCIBLE_BUILD_DEFAULT=true\n+  fi\n+\n+  UTIL_ARG_ENABLE(NAME: reproducible-build, DEFAULT: $REPRODUCIBLE_BUILD_DEFAULT,\n+      RESULT: ENABLE_REPRODUCIBLE_BUILD,\n+      DESC: [enable reproducible builds (not yet fully functional)],\n+      DEFAULT_DESC: [enabled if --with-source-date is given or on Windows without absolute paths])\n+\n+  if test \"x$OPENJDK_BUILD_OS\" = xwindows && \\\n+      test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = xfalse && \\\n+      test \"x$ENABLE_REPRODUCIBLE_BUILD\" = xfalse; then\n+    AC_MSG_NOTICE([On Windows it is not possible to combine  --disable-reproducible-builds])\n+    AC_MSG_NOTICE([with --disable-absolute-paths-in-output.])\n+    AC_MSG_ERROR([Cannot continue])\n+  fi\n+\n+  AC_SUBST(SOURCE_DATE)\n+  AC_SUBST(ENABLE_REPRODUCIBLE_BUILD)\n+])\n","filename":"make\/autoconf\/jdk-options.m4","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  if [ ! [[ \"$2\" =~ ^0*([1-9][0-9]*)|(0)$ ]] ] ; then\n+  if [ ! [[ \"$2\" =~ ^0*([1-9][0-9]*)$|^0*(0)$ ]] ] ; then\n","filename":"make\/autoconf\/jdk-version.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -129,0 +129,3 @@\n+SOURCE_DATE := @SOURCE_DATE@\n+ENABLE_REPRODUCIBLE_BUILD := @ENABLE_REPRODUCIBLE_BUILD@\n+\n","filename":"make\/autoconf\/spec.gmk.in","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    m4_foreach(arg, m4_split($2), [\n+    m4_foreach(arg, m4_split(m4_normalize($2)), [\n@@ -68,0 +68,1 @@\n+      m4_if(m4_bregexp(arg, [: ]), -1, m4_define([arg], m4_bpatsubst(arg, [:], [: ])))\n@@ -69,1 +70,1 @@\n-      m4_set_contains(legal_named_args, arg_name, [],[AC_MSG_ERROR([Internal error: arg_name is not a valid named argument to [$1]. Valid arguments are 'm4_set_contents(legal_named_args, [ ])'.])])\n+      m4_set_contains(legal_named_args, arg_name, [],[AC_MSG_ERROR([Internal error: m4_if(arg_name, , arg, arg_name) is not a valid named argument to [$1]. Valid arguments are 'm4_set_contents(defined_args, [ ]) m4_set_contents(legal_named_args, [ ])'.])])\n@@ -72,1 +73,1 @@\n-      m4_pushdef([ARG_][]arg_name, m4_substr(arg, m4_incr(m4_incr(m4_bregexp(arg, [: ])))))\n+      m4_pushdef([ARG_][]arg_name, m4_bpatsubst(m4_substr(arg, m4_incr(m4_incr(m4_bregexp(arg, [: ])))), [^\\s*], []))\n@@ -97,0 +98,77 @@\n+###############################################################################\n+# Assert that a programmatic condition holds. If not, exit with an error message.\n+# Check that a shell expression gives return code 0\n+#\n+# $1: The shell expression to evaluate\n+# $2: A message to describe the expression in case of failure\n+# $2: An message to print in case of failure [optional]\n+#\n+AC_DEFUN([UTIL_ASSERT_SHELL_TEST],\n+[\n+  ASSERTION_MSG=\"m4_normalize([$3])\"\n+  if $1; then\n+    $ECHO Assertion failed: $2\n+    if test \"x$3\" != x; then\n+      $ECHO Assertion message: \"$3\"\n+    fi\n+    exit 1\n+  fi\n+])\n+\n+\n+###############################################################################\n+# Assert that a programmatic condition holds. If not, exit with an error message.\n+# Check that two strings are equal.\n+#\n+# $1: The actual string found\n+# $2: The expected string\n+# $3: An message to print in case of failure [optional]\n+#\n+AC_DEFUN([UTIL_ASSERT_STRING_EQUALS],\n+[\n+  UTIL_ASSERT_SHELL_TEST(\n+      [test \"x[$1]\" != \"x[$2]\"],\n+      [Actual value '[$1]' \\(\"[$1]\"\\) did not match expected value '[$2]' \\(\"[$2]\"\\)],\n+      $3)\n+])\n+\n+###############################################################################\n+# Assert that a programmatic condition holds. If not, exit with an error message.\n+# Check that two strings not are equal.\n+#\n+# $1: The actual string found\n+# $2: The expected string\n+# $3: An message to print in case of failure [optional]\n+#\n+AC_DEFUN([UTIL_ASSERT_STRING_NOT_EQUALS],\n+[\n+  UTIL_ASSERT_SHELL_TEST(\n+      [test \"x[$1]\" = \"x[$2]\"],\n+      [Actual value '[$1]' \\(\"[$1]\"\\) unexpectedly matched '[$2]' \\(\"[$2]\"\\)],\n+      $3)\n+])\n+\n+###############################################################################\n+# Assert that a programmatic condition holds. If not, exit with an error message.\n+# Check that the given expression evaluates to the string 'true'\n+#\n+# $1: The expression to evaluate\n+# $2: An message to print in case of failure [optional]\n+#\n+AC_DEFUN([UTIL_ASSERT_TRUE],\n+[\n+  UTIL_ASSERT_STRING_EQUALS($1, true, $3)\n+])\n+\n+###############################################################################\n+# Assert that a programmatic condition holds. If not, exit with an error message.\n+# Check that the given expression does not evaluate to the string 'true'\n+#\n+# $1: The expression to evaluate\n+# $2: An message to print in case of failure [optional]\n+#\n+AC_DEFUN([UTIL_ASSERT_NOT_TRUE],\n+[\n+  UTIL_ASSERT_STRING_NOT_EQUALS($1, true, $3)\n+])\n+\n@@ -151,0 +229,23 @@\n+###############################################################################\n+# Converts an ISO-8601 date\/time string to a unix epoch timestamp. If no\n+# suitable conversion method was found, an empty string is returned.\n+#\n+# Sets the specified variable to the resulting list.\n+#\n+# $1: result variable name\n+# $2: input date\/time string\n+AC_DEFUN([UTIL_GET_EPOCH_TIMESTAMP],\n+[\n+  timestamp=$($DATE --utc --date=$2 +\"%s\" 2> \/dev\/null)\n+  if test \"x$timestamp\" = x; then\n+    # GNU date format did not work, try BSD date options\n+    timestamp=$($DATE -j -f \"%F %T\" \"$2\" \"+%s\" 2> \/dev\/null)\n+    if test \"x$timestamp\" = x; then\n+      # Perhaps the time was missing\n+      timestamp=$($DATE -j -f \"%F %T\" \"$2 00:00:00\" \"+%s\" 2> \/dev\/null)\n+      # If this did not work, we give up and return the empty string\n+    fi\n+  fi\n+  $1=$timestamp\n+])\n+\n@@ -229,0 +330,142 @@\n+\n+###############################################################################\n+# Creates a command-line option using the --enable-* pattern. Will return a\n+# value of 'true' or 'false' in the RESULT variable, depending on whether the\n+# option was enabled or not by the user. The option can not be turned on if it\n+# is not available, as specified by AVAILABLE and\/or CHECK_AVAILABLE.\n+#\n+# Arguments:\n+#   NAME: The base name of this option (i.e. what follows --enable-). Required.\n+#   RESULT: The name of the variable to set to the result. Defaults to\n+#     <NAME in uppercase>_ENABLED.\n+#   DEFAULT: The default value for this option. Can be true, false or auto.\n+#     Defaults to true.\n+#   AVAILABLE: If true, this option is allowed to be selected. Defaults to true.\n+#   DESC: A description of this option. Defaults to a generic and unhelpful\n+#     string.\n+#   DEFAULT_DESC: A message describing the default value, for the help. Defaults\n+#     to the literal value of DEFAULT.\n+#   CHECKING_MSG: The message to present to user when checking this option.\n+#     Defaults to a generic message.\n+#   CHECK_AVAILABLE: An optional code block to execute to determine if the\n+#     option should be available. Must set AVAILABLE to 'false' if not.\n+#   IF_GIVEN:  An optional code block to execute if the option was given on the\n+#     command line (regardless of the value).\n+#   IF_NOT_GIVEN:  An optional code block to execute if the option was not given\n+#     on the command line (regardless of the value).\n+#   IF_ENABLED:  An optional code block to execute if the option is turned on.\n+#   IF_DISABLED:  An optional code block to execute if the option is turned off.\n+#\n+UTIL_DEFUN_NAMED([UTIL_ARG_ENABLE],\n+    [*NAME RESULT DEFAULT AVAILABLE DESC DEFAULT_DESC CHECKING_MSG\n+    CHECK_AVAILABLE IF_GIVEN IF_NOT_GIVEN IF_ENABLED IF_DISABLED], [$@],\n+[\n+  ##########################\n+  # Part 1: Set up m4 macros\n+  ##########################\n+\n+  # If DEFAULT is not specified, set it to 'true'.\n+  m4_define([ARG_DEFAULT], m4_if(ARG_DEFAULT, , true, ARG_DEFAULT))\n+\n+  # If AVAILABLE is not specified, set it to 'true'.\n+  m4_define([ARG_AVAILABLE], m4_if(ARG_AVAILABLE, , true, ARG_AVAILABLE))\n+\n+  # If DEFAULT_DESC is not specified, calculate it from DEFAULT.\n+  m4_define([ARG_DEFAULT_DESC], m4_if(ARG_DEFAULT_DESC, , m4_if(ARG_DEFAULT, true, enabled, m4_if(ARG_DEFAULT, false, disabled, ARG_DEFAULT)), ARG_DEFAULT_DESC))\n+\n+  # If RESULT is not specified, set it to 'ARG_NAME[_ENABLED]'.\n+  m4_define([ARG_RESULT], m4_if(ARG_RESULT, , m4_translit(ARG_NAME, [a-z-], [A-Z_])[_ENABLED], ARG_RESULT))\n+  # Construct shell variable names for the option\n+  m4_define(ARG_OPTION, [enable_]m4_translit(ARG_NAME, [-], [_]))\n+  m4_define(ARG_GIVEN, m4_translit(ARG_NAME, [a-z-], [A-Z_])[_GIVEN])\n+\n+  # If DESC is not specified, set it to a generic description.\n+  m4_define([ARG_DESC], m4_if(ARG_DESC, , [Enable the ARG_NAME feature], m4_normalize(ARG_DESC)))\n+\n+  # If CHECKING_MSG is not specified, set it to a generic description.\n+  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --enable-ARG_NAME], m4_normalize(ARG_CHECKING_MSG)))\n+\n+  # If the code blocks are not given, set them to the empty statements to avoid\n+  # tripping up bash.\n+  m4_define([ARG_CHECK_AVAILABLE], m4_if(ARG_CHECK_AVAILABLE, , :, ARG_CHECK_AVAILABLE))\n+  m4_define([ARG_IF_GIVEN], m4_if(ARG_IF_GIVEN, , :, ARG_IF_GIVEN))\n+  m4_define([ARG_IF_NOT_GIVEN], m4_if(ARG_IF_NOT_GIVEN, , :, ARG_IF_NOT_GIVEN))\n+  m4_define([ARG_IF_ENABLED], m4_if(ARG_IF_ENABLED, , :, ARG_IF_ENABLED))\n+  m4_define([ARG_IF_DISABLED], m4_if(ARG_IF_DISABLED, , :, ARG_IF_DISABLED))\n+\n+  ##########################\n+  # Part 2: Set up autoconf shell code\n+  ##########################\n+\n+  # Check that DEFAULT has a valid value\n+  if test \"[x]ARG_DEFAULT\" != xtrue && test \"[x]ARG_DEFAULT\" != xfalse && \\\n+      test \"[x]ARG_DEFAULT\" != xauto ; then\n+    AC_MSG_ERROR([Internal error: Argument DEFAULT to [UTIL_ARG_ENABLE] can only be true, false or auto, was: 'ARG_DEFAULT'])\n+  fi\n+\n+  # Check that AVAILABLE has a valid value\n+  if test \"[x]ARG_AVAILABLE\" != xtrue && test \"[x]ARG_AVAILABLE\" != xfalse; then\n+    AC_MSG_ERROR([Internal error: Argument AVAILABLE to [UTIL_ARG_ENABLE] can only be true or false, was: 'ARG_AVAILABLE'])\n+  fi\n+\n+  AC_ARG_ENABLE(ARG_NAME, AS_HELP_STRING([--enable-]ARG_NAME,\n+      [ARG_DESC [ARG_DEFAULT_DESC]]), [ARG_GIVEN=true], [ARG_GIVEN=false])\n+\n+  # Check if the option is available\n+  AVAILABLE=ARG_AVAILABLE\n+  # Run the available check block (if any), which can overwrite AVAILABLE.\n+  ARG_CHECK_AVAILABLE\n+\n+  # Check if the option should be turned on\n+  AC_MSG_CHECKING(ARG_CHECKING_MSG)\n+  if test x$ARG_GIVEN = xfalse; then\n+    if test ARG_DEFAULT = auto; then\n+      # If not given, and default is auto, set it to true iff it's available.\n+      ARG_RESULT=$AVAILABLE\n+      REASON=\"from default 'auto'\"\n+    else\n+      ARG_RESULT=ARG_DEFAULT\n+      REASON=\"default\"\n+    fi\n+  else\n+    if test x$ARG_OPTION = xyes; then\n+      ARG_RESULT=true\n+      REASON=\"from command line\"\n+    elif test x$ARG_OPTION = xno; then\n+      ARG_RESULT=false\n+      REASON=\"from command line\"\n+    elif test x$ARG_OPTION = xauto; then\n+      if test ARG_DEFAULT = auto; then\n+        # If both given and default is auto, set it to true iff it's available.\n+        ARG_RESULT=$AVAILABLE\n+      else\n+        ARG_RESULT=ARG_DEFAULT\n+      fi\n+      REASON=\"from command line 'auto'\"\n+    else\n+      AC_MSG_ERROR([Option [--enable-]ARG_NAME can only be 'yes', 'no' or 'auto'])\n+    fi\n+  fi\n+\n+  if test x$ARG_RESULT = xtrue; then\n+    AC_MSG_RESULT([enabled, $REASON])\n+    if test x$AVAILABLE = xfalse; then\n+      AC_MSG_ERROR([Option [--enable-]ARG_NAME is not available])\n+    fi\n+  else\n+    AC_MSG_RESULT([disabled, $REASON])\n+  fi\n+\n+  # Execute result payloads, if present\n+  if test x$ARG_GIVEN = xtrue; then\n+    ARG_IF_GIVEN\n+  else\n+    ARG_IF_NOT_GIVEN\n+  fi\n+\n+  if test x$ARG_RESULT = xtrue; then\n+    ARG_IF_ENABLED\n+  else\n+    ARG_IF_DISABLED\n+  fi\n+])\n","filename":"make\/autoconf\/util.m4","additions":246,"deletions":3,"binary":false,"changes":249,"status":"modified"}]}