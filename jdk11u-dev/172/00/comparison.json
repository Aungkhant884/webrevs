{"files":[{"patch":"@@ -47,0 +47,20 @@\n+Register InterpreterRuntime::SignatureHandlerGenerator::next_gpr() {\n+  if (_num_reg_int_args < Argument::n_int_register_parameters_c-1) {\n+    return as_Register(_num_reg_int_args++ + c_rarg1->encoding());\n+  }\n+  return noreg;\n+}\n+\n+FloatRegister InterpreterRuntime::SignatureHandlerGenerator::next_fpr() {\n+  if (_num_reg_fp_args < Argument::n_float_register_parameters_c) {\n+    return as_FloatRegister(_num_reg_fp_args++);\n+  }\n+  return fnoreg;\n+}\n+\n+int InterpreterRuntime::SignatureHandlerGenerator::next_stack_offset() {\n+  int ret = _stack_offset;\n+  _stack_offset += wordSize;\n+  return ret;\n+}\n+\n@@ -50,2 +70,2 @@\n-  _num_int_args = (method->is_static() ? 1 : 0);\n-  _num_fp_args = 0;\n+  _num_reg_int_args = (method->is_static() ? 1 : 0);\n+  _num_reg_fp_args = 0;\n@@ -58,35 +78,6 @@\n-  switch (_num_int_args) {\n-  case 0:\n-    __ ldr(c_rarg1, src);\n-    _num_int_args++;\n-    break;\n-  case 1:\n-    __ ldr(c_rarg2, src);\n-    _num_int_args++;\n-    break;\n-  case 2:\n-    __ ldr(c_rarg3, src);\n-    _num_int_args++;\n-    break;\n-  case 3:\n-    __ ldr(c_rarg4, src);\n-    _num_int_args++;\n-    break;\n-  case 4:\n-    __ ldr(c_rarg5, src);\n-    _num_int_args++;\n-    break;\n-  case 5:\n-    __ ldr(c_rarg6, src);\n-    _num_int_args++;\n-    break;\n-  case 6:\n-    __ ldr(c_rarg7, src);\n-    _num_int_args++;\n-    break;\n-  default:\n-    __ ldr(r0, src);\n-    __ str(r0, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_int_args++;\n-    break;\n+  Register reg = next_gpr();\n+  if (reg != noreg) {\n+    __ ldr(reg, src);\n+  } else {\n+    __ ldrw(r0, src);\n+    __ strw(r0, Address(to(), next_stack_offset()));\n@@ -99,30 +90,4 @@\n-  switch (_num_int_args) {\n-  case 0:\n-    __ ldr(c_rarg1, src);\n-    _num_int_args++;\n-    break;\n-  case 1:\n-    __ ldr(c_rarg2, src);\n-    _num_int_args++;\n-    break;\n-  case 2:\n-    __ ldr(c_rarg3, src);\n-    _num_int_args++;\n-    break;\n-  case 3:\n-    __ ldr(c_rarg4, src);\n-    _num_int_args++;\n-    break;\n-  case 4:\n-    __ ldr(c_rarg5, src);\n-    _num_int_args++;\n-    break;\n-  case 5:\n-    __ ldr(c_rarg6, src);\n-    _num_int_args++;\n-    break;\n-  case 6:\n-    __ ldr(c_rarg7, src);\n-    _num_int_args++;\n-    break;\n-  default:\n+  Register reg = next_gpr();\n+  if (reg != noreg) {\n+    __ ldr(reg, src);\n+  } else {\n@@ -130,4 +95,1 @@\n-    __ str(r0, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_int_args++;\n-    break;\n+    __ str(r0, Address(to(), next_stack_offset()));\n@@ -140,2 +102,3 @@\n-  if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-    __ ldrs(as_FloatRegister(_num_fp_args++), src);\n+  FloatRegister reg = next_fpr();\n+  if (reg != fnoreg) {\n+    __ ldrs(reg, src);\n@@ -144,3 +107,1 @@\n-    __ strw(r0, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_fp_args++;\n+    __ strw(r0, Address(to(), next_stack_offset()));\n@@ -153,2 +114,3 @@\n-  if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-    __ ldrd(as_FloatRegister(_num_fp_args++), src);\n+  FloatRegister reg = next_fpr();\n+  if (reg != fnoreg) {\n+    __ ldrd(reg, src);\n@@ -157,3 +119,1 @@\n-    __ str(r0, Address(to(), _stack_offset));\n-    _stack_offset += wordSize;\n-    _num_fp_args++;\n+    __ str(r0, Address(to(), next_stack_offset()));\n@@ -164,3 +124,2 @@\n-\n-  switch (_num_int_args) {\n-  case 0:\n+  Register reg = next_gpr();\n+  if (reg == c_rarg1) {\n@@ -169,87 +128,16 @@\n-    _num_int_args++;\n-    break;\n-  case 1:\n-    {\n-      __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n-      __ mov(c_rarg2, 0);\n-      __ ldr(temp(), r0);\n-      Label L;\n-      __ cbz(temp(), L);\n-      __ mov(c_rarg2, r0);\n-      __ bind(L);\n-      _num_int_args++;\n-      break;\n-    }\n-  case 2:\n-    {\n-      __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n-      __ mov(c_rarg3, 0);\n-      __ ldr(temp(), r0);\n-      Label L;\n-      __ cbz(temp(), L);\n-      __ mov(c_rarg3, r0);\n-      __ bind(L);\n-      _num_int_args++;\n-      break;\n-    }\n-  case 3:\n-    {\n-      __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n-      __ mov(c_rarg4, 0);\n-      __ ldr(temp(), r0);\n-      Label L;\n-      __ cbz(temp(), L);\n-      __ mov(c_rarg4, r0);\n-      __ bind(L);\n-      _num_int_args++;\n-      break;\n-    }\n-  case 4:\n-    {\n-      __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n-      __ mov(c_rarg5, 0);\n-      __ ldr(temp(), r0);\n-      Label L;\n-      __ cbz(temp(), L);\n-      __ mov(c_rarg5, r0);\n-      __ bind(L);\n-      _num_int_args++;\n-      break;\n-    }\n-  case 5:\n-    {\n-      __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n-      __ mov(c_rarg6, 0);\n-      __ ldr(temp(), r0);\n-      Label L;\n-      __ cbz(temp(), L);\n-      __ mov(c_rarg6, r0);\n-      __ bind(L);\n-      _num_int_args++;\n-      break;\n-    }\n-  case 6:\n-    {\n-      __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n-      __ mov(c_rarg7, 0);\n-      __ ldr(temp(), r0);\n-      Label L;\n-      __ cbz(temp(), L);\n-      __ mov(c_rarg7, r0);\n-      __ bind(L);\n-      _num_int_args++;\n-      break;\n-    }\n- default:\n-   {\n-      __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n-      __ ldr(temp(), r0);\n-      Label L;\n-      __ cbnz(temp(), L);\n-      __ mov(r0, zr);\n-      __ bind(L);\n-      __ str(r0, Address(to(), _stack_offset));\n-      _stack_offset += wordSize;\n-      _num_int_args++;\n-      break;\n-   }\n+  } else if (reg != noreg) {\n+    __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n+    __ mov(reg, 0);\n+    __ ldr(temp(), r0);\n+    Label L;\n+    __ cbz(temp(), L);\n+    __ mov(reg, r0);\n+    __ bind(L);\n+  } else {\n+    __ add(r0, from(), Interpreter::local_offset_in_bytes(offset()));\n+    __ ldr(temp(), r0);\n+    Label L;\n+    __ cbnz(temp(), L);\n+    __ mov(r0, zr);\n+    __ bind(L);\n+    __ str(r0, Address(to(), next_stack_offset()));\n@@ -284,2 +172,2 @@\n-  unsigned int _num_int_args;\n-  unsigned int _num_fp_args;\n+  unsigned int _num_reg_int_args;\n+  unsigned int _num_reg_fp_args;\n@@ -287,3 +175,2 @@\n-  virtual void pass_int()\n-  {\n-    jint from_obj = *(jint *)(_from+Interpreter::local_offset_in_bytes(0));\n+  intptr_t* single_slot_addr() {\n+    intptr_t* from_addr = (intptr_t*)(_from+Interpreter::local_offset_in_bytes(0));\n@@ -291,8 +178,1 @@\n-\n-    if (_num_int_args < Argument::n_int_register_parameters_c-1) {\n-      *_int_args++ = from_obj;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = from_obj;\n-      _num_int_args++;\n-    }\n+    return from_addr;\n@@ -301,3 +181,2 @@\n-  virtual void pass_long()\n-  {\n-    intptr_t from_obj = *(intptr_t*)(_from+Interpreter::local_offset_in_bytes(1));\n+  intptr_t* double_slot_addr() {\n+    intptr_t* from_addr = (intptr_t*)(_from+Interpreter::local_offset_in_bytes(1));\n@@ -305,0 +184,2 @@\n+    return from_addr;\n+  }\n@@ -306,6 +187,4 @@\n-    if (_num_int_args < Argument::n_int_register_parameters_c-1) {\n-      *_int_args++ = from_obj;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = from_obj;\n-      _num_int_args++;\n+  int pass_gpr(intptr_t value) {\n+    if (_num_reg_int_args < Argument::n_int_register_parameters_c-1) {\n+      *_int_args++ = value;\n+      return _num_reg_int_args++;\n@@ -313,0 +192,1 @@\n+    return -1;\n@@ -315,4 +195,7 @@\n-  virtual void pass_object()\n-  {\n-    intptr_t *from_addr = (intptr_t*)(_from + Interpreter::local_offset_in_bytes(0));\n-    _from -= Interpreter::stackElementSize;\n+  int pass_fpr(intptr_t value) {\n+    if (_num_reg_fp_args < Argument::n_float_register_parameters_c) {\n+      *_fp_args++ = value;\n+      return _num_reg_fp_args++;\n+    }\n+    return -1;\n+  }\n@@ -320,6 +203,8 @@\n-    if (_num_int_args < Argument::n_int_register_parameters_c-1) {\n-      *_int_args++ = (*from_addr == 0) ? NULL : (intptr_t)from_addr;\n-      _num_int_args++;\n-    } else {\n-      *_to++ = (*from_addr == 0) ? NULL : (intptr_t) from_addr;\n-      _num_int_args++;\n+  void pass_stack(intptr_t value) {\n+    *_to++ = value;\n+  }\n+\n+  virtual void pass_int() {\n+    jint value = *(jint*)single_slot_addr();\n+    if (pass_gpr(value) < 0) {\n+      pass_stack(value);\n@@ -329,4 +214,6 @@\n-  virtual void pass_float()\n-  {\n-    jint from_obj = *(jint*)(_from+Interpreter::local_offset_in_bytes(0));\n-    _from -= Interpreter::stackElementSize;\n+  virtual void pass_long() {\n+    intptr_t value = *double_slot_addr();\n+    if (pass_gpr(value) < 0) {\n+      pass_stack(value);\n+    }\n+  }\n@@ -334,6 +221,5 @@\n-    if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-      *_fp_args++ = from_obj;\n-      _num_fp_args++;\n-    } else {\n-      *_to++ = from_obj;\n-      _num_fp_args++;\n+  virtual void pass_object() {\n+    intptr_t* addr = single_slot_addr();\n+    intptr_t value = *addr == 0 ? NULL : (intptr_t)addr;\n+    if (pass_gpr(value) < 0) {\n+      pass_stack(value);\n@@ -343,4 +229,6 @@\n-  virtual void pass_double()\n-  {\n-    intptr_t from_obj = *(intptr_t*)(_from+Interpreter::local_offset_in_bytes(1));\n-    _from -= 2*Interpreter::stackElementSize;\n+  virtual void pass_float() {\n+    jint value = *(jint*)single_slot_addr();\n+    if (pass_fpr(value) < 0) {\n+      pass_stack(value);\n+    }\n+  }\n@@ -348,4 +236,5 @@\n-    if (_num_fp_args < Argument::n_float_register_parameters_c) {\n-      *_fp_args++ = from_obj;\n-      *_fp_identifiers |= (1 << _num_fp_args); \/\/ mark as double\n-      _num_fp_args++;\n+  virtual void pass_double() {\n+    intptr_t value = *double_slot_addr();\n+    int arg = pass_fpr(value);\n+    if (0 <= arg) {\n+      *_fp_identifiers |= (1ull << arg); \/\/ mark as double\n@@ -353,2 +242,1 @@\n-      *_to++ = from_obj;\n-      _num_fp_args++;\n+      pass_stack(value);\n@@ -369,2 +257,2 @@\n-    _num_int_args = (method->is_static() ? 1 : 0);\n-    _num_fp_args = 0;\n+    _num_reg_int_args = (method->is_static() ? 1 : 0);\n+    _num_reg_fp_args = 0;\n","filename":"src\/hotspot\/cpu\/aarch64\/interpreterRT_aarch64.cpp","additions":113,"deletions":225,"binary":false,"changes":338,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-  unsigned int _num_fp_args;\n-  unsigned int _num_int_args;\n+  unsigned int _num_reg_fp_args;\n+  unsigned int _num_reg_int_args;\n@@ -47,0 +47,4 @@\n+  Register next_gpr();\n+  FloatRegister next_fpr();\n+  int next_stack_offset();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/interpreterRT_aarch64.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}