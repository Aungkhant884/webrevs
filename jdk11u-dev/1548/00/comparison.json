{"files":[{"patch":"@@ -93,3 +93,0 @@\n-\n-static jobject sAccessibilityClass = NULL;\n-\n@@ -295,33 +292,0 @@\n-\n-    if (sAccessibilityClass == NULL) {\n-        JNIEnv *env = [ThreadUtilities getJNIEnv];\n-\n-        GET_CACCESSIBILITY_CLASS();\n-        DECLARE_STATIC_METHOD(jm_getAccessibility, sjc_CAccessibility, \"getAccessibility\", \"([Ljava\/lang\/String;)Lsun\/lwawt\/macosx\/CAccessibility;\");\n-\n-#ifdef JAVA_AX_NO_IGNORES\n-        NSArray *ignoredKeys = [NSArray array];\n-#else\n-        NSArray *ignoredKeys = [sRoles allKeysForObject:JavaAccessibilityIgnore];\n-#endif\n-        jobjectArray result = NULL;\n-        jsize count = [ignoredKeys count];\n-\n-        DECLARE_CLASS(jc_String, \"java\/lang\/String\");\n-        result = (*env)->NewObjectArray(env, count, jc_String, NULL);\n-        CHECK_EXCEPTION();\n-        if (!result) {\n-            NSLog(@\"In %s, can't create Java array of String objects\", __FUNCTION__);\n-            return;\n-        }\n-\n-        NSInteger i;\n-        for (i = 0; i < count; i++) {\n-            jstring jString = NSStringToJavaString(env, [ignoredKeys objectAtIndex:i]);\n-            (*env)->SetObjectArrayElement(env, result, i, jString);\n-            (*env)->DeleteLocalRef(env, jString);\n-        }\n-\n-        sAccessibilityClass = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibility, result); \/\/ AWT_THREADING Safe (known object)\n-        CHECK_EXCEPTION();\n-    }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaComponentAccessibility.m","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -27,4 +27,0 @@\n-#import \"JNIUtilities.h\"\n-#import \"ThreadUtilities.h\"\n-\n-static jclass sjc_CAccessibility = NULL;\n@@ -43,11 +39,1 @@\n-    AWT_ASSERT_APPKIT_THREAD;\n-    JNIEnv* env = [ThreadUtilities getJNIEnv];\n-\n-    GET_CACCESSIBILITY_CLASS_RETURN(FALSE);\n-    DECLARE_STATIC_METHOD_RETURN(jm_doAccessibleAction, sjc_CAccessibility, \"doAccessibleAction\",\n-                     \"(Ljavax\/accessibility\/AccessibleAction;ILjava\/awt\/Component;)V\", FALSE);\n-    (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_doAccessibleAction,\n-                                 [self axContextWithEnv:(env)], 0, fComponent);\n-    CHECK_EXCEPTION();\n-\n-    return TRUE;\n+    return [self performAccessibleAction:0];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ButtonAccessibility.m","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+- (BOOL)performAccessibleAction:(int)index;\n+- (BOOL)isAccessibilityElement;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+NSString *const IgnoreClassName = @\"IgnoreAccessibility\";\n+static jobject sAccessibilityClass = NULL;\n@@ -49,1 +51,8 @@\n-    rolesMap = [[NSMutableDictionary alloc] initWithCapacity:1];\n+    rolesMap = [[NSMutableDictionary alloc] initWithCapacity:26];\n+    [rolesMap setObject:@\"ImageAccessibility\" forKey:@\"icon\"];\n+    [rolesMap setObject:@\"ImageAccessibility\" forKey:@\"desktopicon\"];\n+    [rolesMap setObject:@\"SpinboxAccessibility\" forKey:@\"spinbox\"];\n+    [rolesMap setObject:@\"StaticTextAccessibility\" forKey:@\"hyperlink\"];\n+    [rolesMap setObject:@\"StaticTextAccessibility\" forKey:@\"label\"];\n+    [rolesMap setObject:@\"RadiobuttonAccessibility\" forKey:@\"radiobutton\"];\n+    [rolesMap setObject:@\"CheckboxAccessibility\" forKey:@\"checkbox\"];\n@@ -51,1 +60,56 @@\n-    [rolesMap setObject:@\"ButtonAccessibility\" forKey:@\"pushbutton\"];\n+    \/*\n+     * All the components below should be ignored by the accessibility subsystem,\n+     * If any of the enclosed component asks for a parent the first ancestor\n+     * participating in accessibility exchange should be returned.\n+     *\/\n+    [rolesMap setObject:IgnoreClassName forKey:@\"alert\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"colorchooser\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"desktoppane\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"dialog\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"directorypane\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"filechooser\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"filler\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"fontchooser\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"frame\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"glasspane\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"layeredpane\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"optionpane\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"panel\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"rootpane\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"separator\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"tooltip\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"viewport\"];\n+    [rolesMap setObject:IgnoreClassName forKey:@\"window\"];\n+\n+    \/*\n+     * Initialize CAccessibility instance\n+     *\/\n+#ifdef JAVA_AX_NO_IGNORES\n+    NSArray *ignoredKeys = [NSArray array];\n+#else\n+    NSArray *ignoredKeys = [rolesMap allKeysForObject:IgnoreClassName];\n+#endif\n+\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_getAccessibility, sjc_CAccessibility, \"getAccessibility\", \"([Ljava\/lang\/String;)Lsun\/lwawt\/macosx\/CAccessibility;\");\n+    jobjectArray result = NULL;\n+    jsize count = [ignoredKeys count];\n+\n+    DECLARE_CLASS(jc_String, \"java\/lang\/String\");\n+    result = (*env)->NewObjectArray(env, count, jc_String, NULL);\n+    CHECK_EXCEPTION();\n+    if (!result) {\n+        NSLog(@\"In %s, can't create Java array of String objects\", __FUNCTION__);\n+        return;\n+    }\n+\n+    NSInteger i;\n+    for (i = 0; i < count; i++) {\n+        jstring jString = NSStringToJavaString(env, [ignoredKeys objectAtIndex:i]);\n+        (*env)->SetObjectArrayElement(env, result, i, jString);\n+        (*env)->DeleteLocalRef(env, jString);\n+    }\n+\n+    sAccessibilityClass = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibility, result);\n+    CHECK_EXCEPTION();\n@@ -61,1 +125,0 @@\n-\n@@ -98,0 +161,20 @@\n+\/\/ AccessibleAction support\n+- (BOOL)performAccessibleAction:(int)index\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+\n+    GET_CACCESSIBILITY_CLASS_RETURN(FALSE);\n+    DECLARE_STATIC_METHOD_RETURN(jm_doAccessibleAction, sjc_CAccessibility, \"doAccessibleAction\",\n+                                 \"(Ljavax\/accessibility\/AccessibleAction;ILjava\/awt\/Component;)V\", FALSE);\n+    (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_doAccessibleAction,\n+                                 [self axContextWithEnv:(env)], index, fComponent);\n+    CHECK_EXCEPTION();\n+\n+    return TRUE;\n+}\n+\n+- (BOOL)isAccessibilityElement {\n+    return YES;\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.m","additions":87,"deletions":4,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"JavaComponentAccessibility.h\"\n+#import \"CommonComponentAccessibility.h\"\n+\n+#import <AppKit\/AppKit.h>\n+\n+@interface IgnoreAccessibility : CommonComponentAccessibility {\n+\n+};\n+- (BOOL)isAccessibilityElement;\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/IgnoreAccessibility.h","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"IgnoreAccessibility.h\"\n+\n+\/*\n+ * Indicates that component does not participate in accessibility exchange\n+ *\/\n+@implementation IgnoreAccessibility\n+- (BOOL)isAccessibilityElement\n+{\n+    return NO;\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/IgnoreAccessibility.m","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ButtonAccessibility.h\"\n+\n+#import <AppKit\/AppKit.h>\n+\n+@interface RadiobuttonAccessibility : ButtonAccessibility <NSAccessibilityRadioButton> {\n+\n+};\n+- (id)accessibilityValue;\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/RadiobuttonAccessibility.h","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"RadiobuttonAccessibility.h\"\n+#import \"JNIUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+\n+\/*\n+ * Implementation of the accessibility peer for the pushbutton role\n+ *\/\n+@implementation RadiobuttonAccessibility\n+\n+- (id) accessibilityValue\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    return [self accessibilityValueAttribute];\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/RadiobuttonAccessibility.m","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"JavaComponentAccessibility.h\"\n+#import \"CommonComponentAccessibility.h\"\n+\n+#import <AppKit\/AppKit.h>\n+\n+@interface SpinboxAccessibility : CommonComponentAccessibility <NSAccessibilityStepper> {\n+\n+};\n+\n+- (nullable NSString *)accessibilityLabel;\n+- (nullable id)accessibilityValue;\n+- (BOOL)accessibilityPerformDecrement;\n+- (BOOL)accessibilityPerformIncrement;\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/SpinboxAccessibility.h","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"SpinboxAccessibility.h\"\n+\n+#define INCREMENT 0\n+#define DECREMENT 1\n+\n+\/*\n+ * Implementation of the accessibility peer for the spinner role\n+ *\/\n+@implementation SpinboxAccessibility\n+- (nullable NSString *)accessibilityLabel\n+{\n+    return [self accessibilityTitleAttribute];\n+}\n+\n+- (nullable id)accessibilityValue\n+{\n+    return [self accessibilityValueAttribute];\n+}\n+\n+- (BOOL)accessibilityPerformIncrement\n+{\n+    return [self performAccessibleAction:INCREMENT];\n+}\n+\n+\n+- (BOOL)accessibilityPerformDecrement\n+{\n+    return [self performAccessibleAction:DECREMENT];\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/SpinboxAccessibility.m","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,271 @@\n+\/*\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4975116 7040022 8023577 8025447 8286624\n+ * @key headful\n+ * @summary verify the rounding of negative coordinates in Shape objects\n+ * @run main\/othervm CoordinateTruncationBug\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Canvas;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Robot;\n+import java.awt.Rectangle;\n+import java.awt.Point;\n+import java.awt.Dimension;\n+import java.awt.Color;\n+import java.awt.AWTException;\n+import java.awt.geom.Line2D;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.VolatileImage;\n+\n+public class CoordinateTruncationBug {\n+    static boolean failure;\n+    static boolean verbose;\n+\n+    static final int W = 80;\n+    static final int H = 80;\n+\n+    static final Line2D vertline = new Line2D.Float(-0.7f, 0f, -0.7f, H);\n+    static final Line2D horizline = new Line2D.Float(0f, -0.7f, W, -0.7f);\n+\n+    public static void main(String argv[]) {\n+        verbose = (argv.length > 0);\n+        new Screen().test();\n+        new BufImg().test();\n+        new VolImg().test();\n+        if (failure) {\n+            throw new RuntimeException(\"Test failed due to 1 or more failures\");\n+        }\n+    }\n+\n+    public static abstract class Test {\n+        public abstract String getName();\n+        public abstract void makeDest();\n+        public abstract void runTest();\n+        public abstract void dispose();\n+        public abstract BufferedImage getSnapshot();\n+\n+        public void test() {\n+            makeDest();\n+            runTest();\n+            dispose();\n+        }\n+\n+        public void runTest(Graphics2D g2d) {\n+            g2d.setColor(Color.white);\n+            g2d.fillRect(0, 0, W, H);\n+\n+            if (!checkAllWhite()) {\n+                System.err.println(\"Aborting test of \"+getName()+\n+                                   \" due to readback failure!\");\n+                return;\n+            }\n+\n+            g2d.setColor(Color.red);\n+            g2d.draw(vertline);\n+            g2d.draw(horizline);\n+            if (!checkAllWhite()) {\n+                System.err.println(getName()+\" failed!\");\n+                failure = true;\n+            }\n+        }\n+\n+        public boolean checkAllWhite() {\n+            BufferedImage bimg = getSnapshot();\n+            if (bimg == null) {\n+                System.err.println(getName()+\" returned null snapshot!\");\n+                return false;\n+            }\n+            boolean ret = true;\n+            for (int y = 0; y < H; y++) {\n+                for (int x = 0; x < W; x++) {\n+                    int rgb = bimg.getRGB(x, y);\n+                    if (rgb != -1) {\n+                        System.err.println(getName()+\"(\"+x+\", \"+y+\") == \"+\n+                                           Integer.toHexString(rgb));\n+                        if (verbose) {\n+                            ret = false;\n+                        } else {\n+                            return false;\n+                        }\n+                    }\n+                }\n+            }\n+            return ret;\n+        }\n+    }\n+\n+    public static class Screen extends Test {\n+        Frame frame;\n+        TestCanvas canvas;\n+\n+        public String getName() {\n+            return \"Screen\";\n+        }\n+\n+        public void makeDest() {\n+            frame = new Frame(\"Screen test\");\n+            frame.setUndecorated(true);\n+            canvas = new TestCanvas(this);\n+            frame.add(canvas);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+        }\n+\n+        public void runTest() {\n+            frame.show();\n+            canvas.waitForTest();\n+        }\n+\n+        public Graphics2D createGraphics() {\n+            return null;\n+        }\n+\n+        public BufferedImage getSnapshot() {\n+            \/\/ bypass window animation\n+            try {\n+                Thread.sleep(500);\n+            } catch (InterruptedException e) {\n+            };\n+\n+            try {\n+                Robot r = new Robot();\n+                Point p = canvas.getLocationOnScreen();\n+                return r.createScreenCapture(new Rectangle(p.x, p.y, W, H));\n+            } catch (AWTException e) {\n+                return null;\n+            }\n+        }\n+\n+        public void dispose() {\n+            frame.hide();\n+            frame.dispose();\n+        }\n+\n+        public static class TestCanvas extends Canvas {\n+            Test test;\n+            boolean done;\n+\n+            public TestCanvas(Test test) {\n+                this.test = test;\n+            }\n+\n+            public Dimension getPreferredSize() {\n+                return new Dimension(W, H);\n+            }\n+\n+            public synchronized void waitForTest() {\n+                while (!done) {\n+                    try {\n+                        wait();\n+                    } catch (InterruptedException e) {\n+                        System.err.println(getName()+\" interrupted!\");\n+                        failure = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            public void paint(Graphics g) {\n+                if (!done) {\n+                    test.runTest((Graphics2D) g);\n+                    notifyDone();\n+                }\n+            }\n+\n+            public synchronized void notifyDone() {\n+                done = true;\n+                notifyAll();\n+            }\n+        }\n+    }\n+\n+    public abstract static class Standalone extends Test {\n+        public abstract Graphics2D createGraphics();\n+\n+        public void runTest() {\n+            Graphics2D g2d = createGraphics();\n+            runTest(g2d);\n+            g2d.dispose();\n+        }\n+    }\n+\n+    public static class BufImg extends Standalone {\n+        public BufferedImage bimg;\n+\n+        public String getName() {\n+            return \"BufferedImage\";\n+        }\n+\n+        public void makeDest() {\n+            bimg = new BufferedImage(W, H, BufferedImage.TYPE_INT_RGB);\n+        }\n+\n+        public Graphics2D createGraphics() {\n+            return bimg.createGraphics();\n+        }\n+\n+        public BufferedImage getSnapshot() {\n+            return bimg;\n+        }\n+\n+        public void dispose() {\n+        }\n+    }\n+\n+    public static class VolImg extends Standalone {\n+        Frame frame;\n+        VolatileImage vimg;\n+\n+        public String getName() {\n+            return \"VolatileImage\";\n+        }\n+\n+        public void makeDest() {\n+            frame = new Frame();\n+            frame.setSize(W, H);\n+            frame.setLocationRelativeTo(null);\n+            frame.show();\n+            vimg = frame.createVolatileImage(W, H);\n+        }\n+\n+        public Graphics2D createGraphics() {\n+            return vimg.createGraphics();\n+        }\n+\n+        public BufferedImage getSnapshot() {\n+            return vimg.getSnapshot();\n+        }\n+\n+        public void dispose() {\n+            vimg.flush();\n+            frame.hide();\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/java2d\/SunGraphics2D\/CoordinateTruncationBug.java","additions":271,"deletions":0,"binary":false,"changes":271,"status":"added"}]}