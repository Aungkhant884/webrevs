{"files":[{"patch":"@@ -174,1 +174,7 @@\n-        String scheme = \"ws\".equalsIgnoreCase(s) ? \"http\" : \"https\";\n+        String newUri = uri.toString();\n+        if (s.equalsIgnoreCase(\"ws\")) {\n+            newUri = \"http\" + newUri.substring(2);\n+        }\n+        else {\n+            newUri = \"https\" + newUri.substring(3);\n+        }\n@@ -176,7 +182,1 @@\n-            return new URI(scheme,\n-                           uri.getUserInfo(),\n-                           uri.getHost(),\n-                           uri.getPort(),\n-                           uri.getPath(),\n-                           uri.getQuery(),\n-                           null); \/\/ No fragment\n+            return new URI(newUri);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/websocket\/OpeningHandshake.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,213 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8245245\n+ * @summary Test for Websocket URI encoding during HandShake\n+ * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n+ * @build jdk.testlibrary.SimpleSSLContext\n+ * @modules java.net.http\n+ *          jdk.httpserver\n+ * @run testng\/othervm -Djdk.internal.httpclient.debug=true HandshakeUrlEncodingTest\n+ *\/\n+\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.HttpsConfigurator;\n+import com.sun.net.httpserver.HttpsServer;\n+import com.sun.net.httpserver.HttpExchange;\n+import jdk.test.lib.net.URIBuilder;\n+import jdk.testlibrary.SimpleSSLContext;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import javax.net.ssl.SSLContext;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.WebSocket;\n+import java.net.http.WebSocketHandshakeException;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.fail;\n+import static java.lang.System.out;\n+\n+public class HandshakeUrlEncodingTest {\n+\n+    SSLContext sslContext;\n+    HttpServer httpTestServer;\n+    HttpsServer httpsTestServer;\n+    String httpURI;\n+    String httpsURI;\n+\n+    static String queryPart;\n+\n+    static final int ITERATION_COUNT = 10;\n+    \/\/ a shared executor helps reduce the amount of threads created by the test\n+    static final ExecutorService executor = Executors.newCachedThreadPool();\n+\n+    @DataProvider(name = \"variants\")\n+    public Object[][] variants() {\n+        return new Object[][]{\n+            { httpURI,   false },\n+            { httpsURI,  false },\n+            { httpURI,   true  },\n+            { httpsURI,  true  }\n+        };\n+    }\n+\n+    HttpClient newHttpClient() {\n+        return HttpClient.newBuilder()\n+                         .proxy(NO_PROXY)\n+                         .executor(executor)\n+                         .sslContext(sslContext)\n+                         .build();\n+    }\n+\n+    @Test(dataProvider = \"variants\")\n+    public void test(String uri, boolean sameClient) {\n+        HttpClient client = null;\n+        out.println(\"The url is \" + uri);\n+        for (int i = 0; i < ITERATION_COUNT; i++) {\n+            System.out.printf(\"iteration %s%n\", i);\n+            if (!sameClient || client == null)\n+                client = newHttpClient();\n+\n+            try {\n+                client.newWebSocketBuilder()\n+                    .buildAsync(URI.create(uri), new WebSocket.Listener() { })\n+                    .join();\n+                fail(\"Expected to throw\");\n+            } catch (CompletionException ce) {\n+                final Throwable t = getCompletionCause(ce);\n+                if (!(t instanceof WebSocketHandshakeException)) {\n+                    throw new AssertionError(\"Unexpected exception\", t);\n+                }\n+                final WebSocketHandshakeException wse = (WebSocketHandshakeException) t;\n+                assertNotNull(wse.getResponse());\n+                assertNotNull(wse.getResponse().uri());\n+                assertNotNull(wse.getResponse().statusCode());\n+                final String rawQuery = wse.getResponse().uri().getRawQuery();\n+                final String expectedRawQuery = \"&raw=abc+def\/ghi=xyz&encoded=abc%2Bdef%2Fghi%3Dxyz\";\n+                assertEquals(rawQuery, expectedRawQuery);\n+                \/\/ [JDK-8240666] Websocket client's OpeningHandshake discards the HTTP response body\n+                if (wse.getResponse().body() != null &&\n+                        (wse.getResponse().body().getClass().equals(String.class))) {\n+                    final String body = (String) wse.getResponse().body();\n+                    final String expectedBody = \"\/?\" + expectedRawQuery;\n+                    assertEquals(body, expectedBody);\n+                }\n+                out.println(\"Status code is \" + wse.getResponse().statusCode());\n+                out.println(\"Response is \" + wse.getResponse());\n+                assertEquals(wse.getResponse().statusCode(), 400);\n+            }\n+        }\n+    }\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        sslContext = new SimpleSSLContext().get();\n+        if (sslContext == null)\n+            throw new AssertionError(\"Unexpected null sslContext\");\n+\n+\n+        InetSocketAddress sa = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        queryPart = \"?&raw=abc+def\/ghi=xyz&encoded=abc%2Bdef%2Fghi%3Dxyz\";\n+        httpTestServer = HttpServer.create(sa, 10);\n+        httpURI = URIBuilder.newBuilder()\n+                            .scheme(\"ws\")\n+                            .host(\"localhost\")\n+                            .port(httpTestServer.getAddress().getPort())\n+                            .path(\"\/\")\n+                            .build()\n+                            .toString() + queryPart;\n+\n+        httpTestServer.createContext(\"\/\", new UrlHandler());\n+\n+        httpsTestServer = HttpsServer.create(sa, 10);\n+        httpsTestServer.setHttpsConfigurator(new HttpsConfigurator(sslContext));\n+        httpsURI = URIBuilder.newBuilder()\n+                             .scheme(\"wss\")\n+                             .host(\"localhost\")\n+                             .port(httpsTestServer.getAddress().getPort())\n+                             .path(\"\/\")\n+                             .build()\n+                             .toString() + queryPart;\n+\n+        httpsTestServer.createContext(\"\/\", new UrlHandler());\n+\n+        httpTestServer.start();\n+        httpsTestServer.start();\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        httpTestServer.stop(0);\n+        httpsTestServer.stop(0);\n+        executor.shutdownNow();\n+    }\n+\n+    private static Throwable getCompletionCause(Throwable x) {\n+        if (!(x instanceof CompletionException)\n+            && !(x instanceof ExecutionException)) return x;\n+        final Throwable cause = x.getCause();\n+        if (cause == null) {\n+            throw new InternalError(\"Unexpected null cause\", x);\n+        }\n+        return cause;\n+    }\n+\n+    static class UrlHandler implements HttpHandler {\n+\n+        @Override\n+        public void handle(HttpExchange e) throws IOException {\n+            try(InputStream is = e.getRequestBody();\n+                OutputStream os = e.getResponseBody()) {\n+                String testUri = \"\/?&raw=abc+def\/ghi=xyz&encoded=abc%2Bdef%2Fghi%3Dxyz\";\n+                URI uri = e.getRequestURI();\n+                byte[] bytes = is.readAllBytes();\n+                if (uri.toString().equals(testUri)) {\n+                    bytes = testUri.getBytes();\n+                }\n+                e.sendResponseHeaders(400, bytes.length);\n+                os.write(bytes);\n+\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/HandshakeUrlEncodingTest.java","additions":213,"deletions":0,"binary":false,"changes":213,"status":"added"}]}