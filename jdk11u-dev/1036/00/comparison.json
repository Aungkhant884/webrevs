{"files":[{"patch":"@@ -130,1 +130,7 @@\n-        if (!(publicKey instanceof RSAPublicKey)) {\n+        if (publicKey instanceof RSAPublicKey) {\n+            RSAPublicKey rsaPubKey = (RSAPublicKey)publicKey;\n+            isPublicKeyValid(rsaPubKey);\n+            this.pubKey = rsaPubKey;\n+            this.privKey = null;\n+            resetDigest();\n+        } else {\n@@ -133,3 +139,0 @@\n-        this.pubKey = (RSAPublicKey) isValid((RSAKey)publicKey);\n-        this.privKey = null;\n-        resetDigest();\n@@ -149,1 +152,9 @@\n-        if (!(privateKey instanceof RSAPrivateKey)) {\n+        if (privateKey instanceof RSAPrivateKey) {\n+            RSAPrivateKey rsaPrivateKey = (RSAPrivateKey)privateKey;\n+            isPrivateKeyValid(rsaPrivateKey);\n+            this.privKey = rsaPrivateKey;\n+            this.pubKey = null;\n+            this.random =\n+                    (random == null ? JCAUtil.getSecureRandom() : random);\n+            resetDigest();\n+        } else {\n@@ -152,5 +163,0 @@\n-        this.privKey = (RSAPrivateKey) isValid((RSAKey)privateKey);\n-        this.pubKey = null;\n-        this.random =\n-            (random == null? JCAUtil.getSecureRandom() : random);\n-        resetDigest();\n@@ -208,0 +214,46 @@\n+    \/**\n+     * Validate the specified RSAPrivateKey\n+     *\/\n+    private void isPrivateKeyValid(RSAPrivateKey prKey)  throws InvalidKeyException {\n+        try {\n+            if (prKey instanceof RSAPrivateCrtKey) {\n+                RSAPrivateCrtKey crtKey = (RSAPrivateCrtKey)prKey;\n+                if (RSAPrivateCrtKeyImpl.checkComponents(crtKey)) {\n+                    RSAKeyFactory.checkRSAProviderKeyLengths(\n+                            crtKey.getModulus().bitLength(),\n+                            crtKey.getPublicExponent());\n+                } else {\n+                    throw new InvalidKeyException(\n+                            \"Some of the CRT-specific components are not available\");\n+                }\n+            } else {\n+                RSAKeyFactory.checkRSAProviderKeyLengths(\n+                        prKey.getModulus().bitLength(),\n+                        null);\n+            }\n+        } catch (InvalidKeyException ikEx) {\n+            throw ikEx;\n+        } catch (Exception e) {\n+            throw new InvalidKeyException(\n+                    \"Can not access private key components\", e);\n+        }\n+        isValid(prKey);\n+    }\n+\n+    \/**\n+     * Validate the specified RSAPublicKey\n+     *\/\n+    private void isPublicKeyValid(RSAPublicKey pKey)  throws InvalidKeyException {\n+        try {\n+            RSAKeyFactory.checkRSAProviderKeyLengths(\n+                    pKey.getModulus().bitLength(),\n+                    pKey.getPublicExponent());\n+        } catch (InvalidKeyException ikEx) {\n+            throw ikEx;\n+        } catch (Exception e) {\n+            throw new InvalidKeyException(\n+                    \"Can not access public key components\", e);\n+        }\n+        isValid(pKey);\n+    }\n+\n@@ -212,1 +264,1 @@\n-    private RSAKey isValid(RSAKey rsaKey) throws InvalidKeyException {\n+    private void isValid(RSAKey rsaKey) throws InvalidKeyException {\n@@ -230,1 +282,0 @@\n-            return rsaKey;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPSSSignature.java","additions":63,"deletions":12,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -83,6 +83,3 @@\n-        if ((key.getPublicExponent().signum() == 0) ||\n-            (key.getPrimeExponentP().signum() == 0) ||\n-            (key.getPrimeExponentQ().signum() == 0) ||\n-            (key.getPrimeP().signum() == 0) ||\n-            (key.getPrimeQ().signum() == 0) ||\n-            (key.getCrtCoefficient().signum() == 0)) {\n+        if (checkComponents(key)) {\n+            return key;\n+        } else {\n@@ -92,4 +89,1 @@\n-                key.getPrivateExponent()\n-            );\n-        } else {\n-            return key;\n+                key.getPrivateExponent());\n@@ -99,0 +93,12 @@\n+    \/**\n+     * Validate if all CRT-specific components are available.\n+     *\/\n+    static boolean checkComponents(RSAPrivateCrtKey key) {\n+        return !((key.getPublicExponent().signum() == 0) ||\n+            (key.getPrimeExponentP().signum() == 0) ||\n+            (key.getPrimeExponentQ().signum() == 0) ||\n+            (key.getPrimeP().signum() == 0) ||\n+            (key.getPrimeQ().signum() == 0) ||\n+            (key.getCrtCoefficient().signum() == 0));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateCrtKeyImpl.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"}]}