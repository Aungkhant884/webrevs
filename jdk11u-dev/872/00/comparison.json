{"files":[{"patch":"@@ -6542,0 +6542,3 @@\n+  assert(vector_len == AVX_128bit ? VM_Version::supports_avx() :\n+         vector_len == AVX_256bit ? VM_Version::supports_avx2() :\n+         vector_len == AVX_512bit ? VM_Version::supports_evex() : 0, \"\");\n@@ -6550,0 +6553,3 @@\n+  assert(vector_len == AVX_128bit ? VM_Version::supports_avx() :\n+         vector_len == AVX_256bit ? VM_Version::supports_avx2() :\n+         vector_len == AVX_512bit ? VM_Version::supports_evex() : 0, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1343,2 +1343,8 @@\n-  void vpxor(XMMRegister dst, XMMRegister src) { Assembler::vpxor(dst, dst, src, true); }\n-  void vpxor(XMMRegister dst, Address src) { Assembler::vpxor(dst, dst, src, true); }\n+  void vpxor(XMMRegister dst, XMMRegister src) {\n+    assert(UseAVX >= 2, \"Should be at least AVX2\");\n+    Assembler::vpxor(dst, dst, src, AVX_256bit);\n+  }\n+  void vpxor(XMMRegister dst, Address src) {\n+    assert(UseAVX >= 2, \"Should be at least AVX2\");\n+    Assembler::vpxor(dst, dst, src, AVX_256bit);\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}