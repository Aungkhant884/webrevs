{"files":[{"patch":"@@ -144,1 +144,1 @@\n-                        options.toArray(new String[0])));\n+                        options));\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-                javaFlags.toArray(new String[javaFlags.size()]));\n+                javaFlags);\n","filename":"test\/hotspot\/jtreg\/compiler\/graalunit\/common\/GraalUnitTestLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,2 +149,1 @@\n-        OutputAnalyzer outputAnalyzer = ProcessTools.\n-            executeTestJvm(vmOpts.toArray(new String[vmOpts.size()]));\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJvm(vmOpts);\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/bmi\/BMITestRunner.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -64,2 +64,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                argsList.toArray(new String[argsList.size()]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(argsList);\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/ContinuousCallSiteTargetChange.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,2 +67,5 @@\n-        String[] arguments = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:+EnableJVMCI\", \"-XX:+PrintFlagsFinal\", \"-version\"};\n-        pb = ProcessTools.createJavaProcessBuilder(arguments);\n+        pb = ProcessTools.createJavaProcessBuilder(\n+            \"-XX:+UnlockExperimentalVMOptions\",\n+            \"-XX:+EnableJVMCI\",\n+            \"-XX:+PrintFlagsFinal\",\n+            \"-version\");\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/compilerToVM\/GetFlagValueTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,6 +45,9 @@\n-            String[] flags = {\"-noverify\", \"-XX:-TieredCompilation\",\n-                              \"-XX:CompileCommand=dontinline,compiler\/linkage\/OSRWithBadOperandStack.m*\",\n-                              \"-XX:-CreateCoredumpOnCrash\",\n-                              \"-Xmx64m\",\n-                              \"compiler.linkage.TestLinkageErrorInGenerateOopMap\", \"run\"};\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(flags);\n+            String[] flags = {};\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                    \"-noverify\",\n+                    \"-XX:-TieredCompilation\",\n+                    \"-XX:CompileCommand=dontinline,compiler\/linkage\/OSRWithBadOperandStack.m*\",\n+                    \"-XX:-CreateCoredumpOnCrash\",\n+                    \"-Xmx64m\",\n+                    \"compiler.linkage.TestLinkageErrorInGenerateOopMap\",\n+                    \"run\");\n","filename":"test\/hotspot\/jtreg\/compiler\/linkage\/TestLinkageErrorInGenerateOopMap.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        final String[] arguments = {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n@@ -95,4 +95,1 @@\n-            GCTest.class.getName()\n-            };\n-\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(arguments);\n+            GCTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/TestAgeOutput.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,3 +43,3 @@\n-    String test_dir = System.getProperty(\"test.dir\", \".\");\n-    String[] flags = {\n-        \"-XX:AllocateHeapAt=\" + test_dir,\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        true,\n+        \"-XX:AllocateHeapAt=\" + System.getProperty(\"test.dir\", \".\"),\n@@ -49,3 +49,1 @@\n-        \"-version\"};\n-\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n+        \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAt.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-    String[] flags = {\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        true,\n@@ -54,3 +55,1 @@\n-        \"-version\"};\n-\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n+        \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtError.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,2 +65,1 @@\n-      ProcessBuilder pb =\n-          ProcessTools.createJavaProcessBuilder(true, flags.toArray(String[]::new));\n+      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n","filename":"test\/hotspot\/jtreg\/gc\/TestAllocateHeapAtMultiple.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,2 +48,5 @@\n-        String[] opts = {Xmx, \"-XX:NativeMemoryTracking=detail\", \"-XX:+UseParallelGC\", \"-version\"};\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            Xmx,\n+            \"-XX:NativeMemoryTracking=detail\",\n+            \"-XX:+UseParallelGC\",\n+            \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/TestCardTablePageCommits.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        final String[] arguments = {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n@@ -86,4 +86,1 @@\n-            GCTest.class.getName()\n-            };\n-\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(arguments);\n+            GCTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/TestNumWorkerOutput.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -105,7 +105,5 @@\n-        LinkedList<String> vmOptions = new LinkedList<>();\n-        vmOptions.add(gc);\n-        vmOptions.add(\"-Xmx\" + minMaxHeap);\n-        vmOptions.add(\"-XX:+PrintFlagsFinal\");\n-        vmOptions.add(VerifyHeapSize.class.getName());\n-\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            gc,\n+            \"-Xmx\" + minMaxHeap,\n+            \"-XX:+PrintFlagsFinal\",\n+            VerifyHeapSize.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/TestSmallHeap.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-    String[] flags = {\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        true,\n@@ -46,3 +47,1 @@\n-        \"-version\"};\n-\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, flags);\n+        \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifyDuringStartup.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,2 +61,1 @@\n-    ProcessBuilder pb =\n-      ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySilently.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,2 +59,1 @@\n-        ProcessBuilder pb =\n-            ProcessTools.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/TestVerifySubSet.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,0 +69,10 @@\n+    static public ProcessBuilder createJavaProcessBuilder(List<String> arguments) {\n+        return createJavaProcessBuilder(false, arguments);\n+    }\n+\n+    static public ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions,\n+                                                          List<String> arguments) {\n+        return createJavaProcessBuilder(addTestVmAndJavaOptions,\n+                                        arguments.toArray(String[]::new));\n+    }\n+\n@@ -78,1 +88,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/GCArguments.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcMarkStepDurationMillis.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1ConcRefinementThreads.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flagList.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flagList);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1HeapRegionSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-        String[] flags = new String[] { \"-XX:+UseG1GC\", flag, \"-version\" };\n-        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n+                \"-XX:+UseG1GC\", flag, \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1PercentageOptions.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n@@ -128,1 +128,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxMinHeapFreeRatioFlags.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs);\n@@ -134,1 +134,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(new String[0]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMaxNewSize.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestMinAndInitialSurvivorRatioFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestNewSizeFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts.toArray(new String[vmOpts.size()]));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestObjectTenuringFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,0 @@\n-\n@@ -103,2 +102,5 @@\n-      String[] flags = new String[] {\"-XX:+Use\" + gc + \"GC\", \"-XX:ParallelGCThreads=0\", \"-XX:+PrintFlagsFinal\", \"-version\"};\n-      ProcessBuilder pb = GCArguments.createJavaProcessBuilder(flags);\n+      ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n+          \"-XX:+Use\" + gc + \"GC\",\n+          \"-XX:ParallelGCThreads=0\",\n+          \"-XX:+PrintFlagsFinal\",\n+          \"-version\");\n@@ -110,2 +112,5 @@\n-        flags = new String[] {\"-XX:+Use\" + gc + \"GC\", \"-XX:ParallelGCThreads=\" + i, \"-XX:+PrintFlagsFinal\", \"-version\"};\n-        long count = getParallelGCThreadCount(flags);\n+        long count = getParallelGCThreadCount(\n+            \"-XX:+Use\" + gc + \"GC\",\n+            \"-XX:ParallelGCThreads=\" + i,\n+            \"-XX:+PrintFlagsFinal\",\n+            \"-version\");\n@@ -120,2 +125,5 @@\n-      String[] flags = new String[] {\"-XX:+UseSerialGC\", \"-XX:ParallelGCThreads=\" + i, \"-XX:+PrintFlagsFinal\", \"-version\"};\n-      long count = getParallelGCThreadCount(flags);\n+      long count = getParallelGCThreadCount(\n+          \"-XX:+UseSerialGC\",\n+          \"-XX:ParallelGCThreads=\" + i,\n+          \"-XX:+PrintFlagsFinal\",\n+          \"-version\");\n@@ -126,1 +134,1 @@\n-  public static long getParallelGCThreadCount(String flags[]) throws Exception {\n+  public static long getParallelGCThreadCount(String... flags) throws Exception {\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelGCThreads.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(result.toArray(new String[0]));\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(result);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestParallelRefProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,7 +51,0 @@\n-        String[] args = new String[] {\n-          \"-XX:\" + (actAsServer ? \"+\" : \"-\") + \"AlwaysActAsServerClassMachine\",\n-          \"-XX:\" + (actAsServer ? \"-\" : \"+\") + \"NeverActAsServerClassMachine\",\n-          \"-XX:+PrintFlagsFinal\",\n-          \"-version\"\n-        };\n-\n@@ -59,1 +52,5 @@\n-        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(args);\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n+            \"-XX:\" + (actAsServer ? \"+\" : \"-\") + \"AlwaysActAsServerClassMachine\",\n+            \"-XX:\" + (actAsServer ? \"-\" : \"+\") + \"NeverActAsServerClassMachine\",\n+            \"-XX:+PrintFlagsFinal\",\n+            \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSelectDefaultGC.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -63,9 +63,8 @@\n-    String[] vmArgs = {\"-XX:+UseParallelGC\",\n-                       \"-Xms\" + String.valueOf(initHeap),\n-                       \"-Xmx\" + String.valueOf(maxHeap),\n-                       \"-XX:+UseNUMA\",\n-                       \"-XX:+UseHugeTLBFS\",\n-                       \"-XX:+PrintFlagsFinal\",\n-                       \"-version\"};\n-\n-    ProcessBuilder pb_enabled = GCArguments.createJavaProcessBuilder(vmArgs);\n+    ProcessBuilder pb_enabled = GCArguments.createJavaProcessBuilder(\n+        \"-XX:+UseParallelGC\",\n+        \"-Xms\" + String.valueOf(initHeap),\n+        \"-Xmx\" + String.valueOf(maxHeap),\n+        \"-XX:+UseNUMA\",\n+        \"-XX:+UseHugeTLBFS\",\n+        \"-XX:+PrintFlagsFinal\",\n+        \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSmallInitialHeapWithLargePageAndNUMA.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestSurvivorRatioFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n@@ -155,1 +155,1 @@\n-        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));\n+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestTargetSurvivorRatioFlag.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs.toArray(String[]::new));\n+    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsErgoTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-        String[] vmargs = new String[]{\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n+            true,\n@@ -47,3 +48,1 @@\n-            \"-version\"\n-        };\n-        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(true, vmargs);\n+            \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseNUMAInterleaving.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -91,4 +91,2 @@\n-        ProcessBuilder procBuilder =\n-            GCArguments.createJavaProcessBuilder(vmOpts.toArray(\n-                                                     new String[vmOpts.size()]));\n-        OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());\n+        ProcessBuilder pb = GCArguments.createJavaProcessBuilder(vmOpts);\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestVerifyBeforeAndAfterGCFlags.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,3 +78,0 @@\n-    \/\/ UseDynamicNumberOfGCThreads and TraceDynamicGCThreads enabled\n-    String[] baseArgs = {\"-XX:+UnlockExperimentalVMOptions\", \"-XX:+\" + gcFlag, \"-Xmx10M\", \"-XX:+UseDynamicNumberOfGCThreads\", \"-Xlog:gc+task=trace\", \"-version\"};\n-\n@@ -82,1 +79,7 @@\n-    ProcessBuilder pb_enabled = ProcessTools.createJavaProcessBuilder(baseArgs);\n+    ProcessBuilder pb_enabled = ProcessTools.createJavaProcessBuilder(\n+        \"-XX:+UnlockExperimentalVMOptions\",\n+        \"-XX:+\" + gcFlag,\n+        \"-Xmx10M\",\n+        \"-XX:+UseDynamicNumberOfGCThreads\",\n+        \"-Xlog:gc+task=trace\",\n+        \"-version\");\n","filename":"test\/hotspot\/jtreg\/gc\/ergonomics\/TestInitialGCThreadLogging.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(testArguments.toArray(new String[0]));\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(testArguments);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/Test2GbHeap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        final String[] arguments = {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n@@ -66,4 +66,1 @@\n-            GCTest.class.getName()\n-            };\n-\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(arguments);\n+            GCTest.class.getName());\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsLog.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs.toArray(String[]::new));\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousCodeCacheRoots.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(testArguments.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(testArguments);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPLABSizeBounds.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,2 +73,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            finalargs.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPrintRegionRememberedSetInfo.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -83,2 +83,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            finalargs.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(finalargs);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestRemsetLoggingTools.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(dump_args.toArray(new String[0]));\n+        pb = ProcessTools.createJavaProcessBuilder(dump_args);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestSharedArchiveWithPreTouch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,4 +107,1 @@\n-        ProcessBuilder pb\n-                = ProcessTools.createJavaProcessBuilder(true,\n-                        opts.toArray(new String[opts.size()])\n-                );\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, opts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestShrinkAuxiliaryData.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args.toArray(new String[args.size()]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestStringDeduplicationTools.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,2 +158,1 @@\n-        ProcessBuilder procBuilder =  ProcessTools.createJavaProcessBuilder(basicOpts.toArray(\n-                                                                            new String[basicOpts.size()]));\n+        ProcessBuilder procBuilder =  ProcessTools.createJavaProcessBuilder(basicOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestVerifyGCType.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -131,2 +131,1 @@\n-        OutputAnalyzer out;\n-        out = ProcessTools.executeTestJvm(options.toArray(new String[options.size()]));\n+        OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPErgo.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(options.toArray(new String[options.size()]));\n+        OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/ihop\/TestIHOPStatic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(options.toArray(new String[options.size()]));\n+        OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/logging\/TestG1LoggingFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                testOpts.toArray(new String[testOpts.size()]));\n+                testOpts);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/mixedgc\/TestLogging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(testOptions.toArray(new String[testOptions.size()]));\n+        OutputAnalyzer out = ProcessTools.executeTestJvm(testOptions);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABEvacuationFailure.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-            OutputAnalyzer out = ProcessTools.executeTestJvm(options.toArray(new String[options.size()]));\n+            OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABPromotion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-            OutputAnalyzer out = ProcessTools.executeTestJvm(options.toArray(new String[options.size()]));\n+            OutputAnalyzer out = ProcessTools.executeTestJvm(options);\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/plab\/TestPLABResize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,3 +66,2 @@\n-        ProcessBuilder pb_default =\n-            ProcessTools.createJavaProcessBuilder(baseargs.toArray(new String[] {}));\n-        verifySymbolMemoryUsageNotTooHigh(new OutputAnalyzer(pb_default.start()));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(baseargs);\n+        verifySymbolMemoryUsageNotTooHigh(new OutputAnalyzer(pb.start()));\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestReclaimStringsLeaksMemory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(options.toArray(new String[options.size()]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(options);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestStressG1Humongous.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-            true, finalArgs.toArray(new String[0]));\n+            true, finalArgs);\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/gclocker\/TestExcessGCLockerCollections.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n-        out = new OutputAnalyzer(ProcessTools.createJavaProcessBuilder(runJava.toArray(new String[0])).start());\n+        out = new OutputAnalyzer(ProcessTools.createJavaProcessBuilder(runJava).start());\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/common\/optionsvalidation\/JVMOption.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -491,1 +491,1 @@\n-        p = ProcessTools.createJavaProcessBuilder(runJava.toArray(new String[0])).start();\n+        p = ProcessTools.createJavaProcessBuilder(runJava).start();\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/OptionsValidation\/common\/optionsvalidation\/JVMOptionsUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,5 @@\n-      String[] javaArgs1 = {\"-XX:-UnlockDiagnosticVMOptions\", \"-XX:+LogTouchedMethods\", \"-XX:+PrintTouchedMethodsAtExit\", \"TestLogTouchedMethods\"};\n-      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(javaArgs1);\n+      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:-UnlockDiagnosticVMOptions\",\n+          \"-XX:+LogTouchedMethods\",\n+          \"-XX:+PrintTouchedMethodsAtExit\",\n+          \"TestLogTouchedMethods\");\n@@ -51,2 +54,5 @@\n-      String[] javaArgs2 = {\"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+LogTouchedMethods\", \"-XX:+PrintTouchedMethodsAtExit\", \"TestLogTouchedMethods\"};\n-      pb = ProcessTools.createJavaProcessBuilder(javaArgs2);\n+      pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-XX:+LogTouchedMethods\",\n+          \"-XX:+PrintTouchedMethodsAtExit\",\n+          \"TestLogTouchedMethods\");\n@@ -74,2 +80,6 @@\n-      String[] javaArgs3 = {\"-XX:+UnlockDiagnosticVMOptions\", \"-Xint\", \"-XX:+LogTouchedMethods\", \"-XX:+PrintTouchedMethodsAtExit\", \"TestLogTouchedMethods\"};\n-      pb = ProcessTools.createJavaProcessBuilder(javaArgs3);\n+      pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-Xint\",\n+          \"-XX:+LogTouchedMethods\",\n+          \"-XX:+PrintTouchedMethodsAtExit\",\n+          \"TestLogTouchedMethods\");\n@@ -92,2 +102,7 @@\n-      String[] javaArgs4 = {\"-XX:+UnlockDiagnosticVMOptions\", \"-Xint\", \"-XX:+LogTouchedMethods\", \"-XX:+PrintTouchedMethodsAtExit\", \"-XX:-TieredCompilation\", \"TestLogTouchedMethods\"};\n-      pb = ProcessTools.createJavaProcessBuilder(javaArgs4);\n+      pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:+UnlockDiagnosticVMOptions\",\n+          \"-Xint\",\n+          \"-XX:+LogTouchedMethods\",\n+          \"-XX:+PrintTouchedMethodsAtExit\",\n+          \"-XX:-TieredCompilation\",\n+          \"TestLogTouchedMethods\");\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/PrintTouchedMethods.java","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -40,3 +40,2 @@\n-      String[] javaArgs = {\"-XX:SharedBaseAddress=0x1D000000\", \"-version\"};\n-      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(javaArgs);\n-\n+      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:SharedBaseAddress=0x1D000000\", \"-version\");\n@@ -47,2 +46,2 @@\n-      String[] javaArgs1 = {\"-XX:SharedBaseAddress=1D000000\", \"-version\"};\n-      pb = ProcessTools.createJavaProcessBuilder(javaArgs1);\n+      pb = ProcessTools.createJavaProcessBuilder(\n+          \"-XX:SharedBaseAddress=1D000000\", \"-version\");\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestHexArguments.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-        pb = ProcessTools.createJavaProcessBuilder(runJava.toArray(new String[0]));\n+        pb = ProcessTools.createJavaProcessBuilder(runJava);\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMOptionsFile\/TestVMOptionsFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n","filename":"test\/hotspot\/jtreg\/runtime\/CompressedOops\/UseCompressedOops.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(processArgs.toArray(new String[0]));\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(processArgs);\n","filename":"test\/hotspot\/jtreg\/runtime\/SharedArchiveFile\/MaxMetaspaceSize.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,2 +150,1 @@\n-        String[] cmdLine = cmd.toArray(new String[cmd.size()]);\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, makeCommandLineForAppCDS(cmdLine));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n@@ -176,2 +175,1 @@\n-        String[] cmdLine = cmd.toArray(new String[cmd.size()]);\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, makeCommandLineForAppCDS(cmdLine));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/TestCommon.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        return ProcessTools.createJavaProcessBuilder(argsList.toArray(new String[argsList.size()]));\n+        return ProcessTools.createJavaProcessBuilder(argsList);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassLoadUnloadTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        return ProcessTools.createJavaProcessBuilder(argsList.toArray(new String[argsList.size()]));\n+        return ProcessTools.createJavaProcessBuilder(argsList);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/LoaderConstraintsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -330,1 +330,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args.toArray(new String[args.size()]));\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args);\n","filename":"test\/hotspot\/jtreg\/runtime\/memory\/LargePages\/TestLargePagesFlags.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        ProcessBuilder testAppPb = ProcessTools.createJavaProcessBuilder(javaArgs.toArray(new String[javaArgs.size()]));\n+        ProcessBuilder testAppPb = ProcessTools.createJavaProcessBuilder(javaArgs);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/gc\/RunFinalizationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,4 +104,5 @@\n-            String[] javaArgs1 = { \"-XX:MetaspaceSize=12m\", \"-XX:MaxMetaspaceSize=12m\",\n-                                   \"-javaagent:redefineagent.jar\", \"RedefineLeak\"};\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(javaArgs1);\n-\n+            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                    \"-XX:MetaspaceSize=12m\",\n+                    \"-XX:MaxMetaspaceSize=12m\",\n+                    \"-javaagent:redefineagent.jar\",\n+                    \"RedefineLeak\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/RedefineLeak.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        String[] args = {\n+        OutputAnalyzer output = ProcessTools.executeTestJvm(\n@@ -84,2 +84,1 @@\n-            \"UnresolvedClassAgent\" };\n-        OutputAnalyzer output = ProcessTools.executeTestJvm(args);\n+            \"UnresolvedClassAgent\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestRedefineWithUnresolvedClass.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm\/timeout=600 TestLogRotation\n+ * @run driver\/timeout=600 TestLogRotation\n@@ -75,16 +75,10 @@\n-        ArrayList<String> args = new ArrayList();\n-        String[] logOpts = new String[]{\n-            \"-cp\", System.getProperty(\"java.class.path\"),\n-            \"-Xlog:gc=debug:\" + logFileName + \"::filesize=\" + logFileSizeK + \"k,filecount=\" + numberOfFiles,\n-            \"-XX:-DisableExplicitGC\", \/\/ to ensure that System.gc() works\n-            \"-Xmx128M\"};\n-        \/\/ System.getProperty(\"test.java.opts\") is '' if no options is set\n-        \/\/ need to skip such empty\n-        String[] externalVMopts = System.getProperty(\"test.java.opts\").length() == 0\n-                ? new String[0]\n-                : System.getProperty(\"test.java.opts\").split(\" \");\n-        args.addAll(Arrays.asList(externalVMopts));\n-        args.addAll(Arrays.asList(logOpts));\n-        args.add(GCLoggingGenerator.class.getName());\n-        args.add(String.valueOf(numberOfFiles * logFileSizeK * 1024));\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(args.toArray(new String[0]));\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                true,\n+                \"-cp\", System.getProperty(\"java.class.path\"),\n+                \"-Xlog:gc=debug:\" + logFileName\n+                        + \"::filesize=\" + logFileSizeK + \"k\"\n+                        + \",filecount=\" + numberOfFiles,\n+                \"-XX:-DisableExplicitGC\", \/\/ to ensure that System.gc() works\n+                \"-Xmx128M\",\n+                GCLoggingGenerator.class.getName(),\n+                String.valueOf(numberOfFiles * logFileSizeK * 1024));\n","filename":"test\/hotspot\/jtreg\/serviceability\/logging\/TestLogRotation.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n-\n-        String[] toolArgs = {\n+        \/\/ Start a new process to attach to the lingered app\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n@@ -102,5 +102,1 @@\n-            Long.toString(lingeredAppPid)\n-        };\n-\n-        \/\/ Start a new process to attach to the lingered app\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(toolArgs);\n+            Long.toString(lingeredAppPid));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestCpoolForInvokeDynamic.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-\n-        String[] toolArgs = {\n+        \/\/ Start a new process to attach to the lingered app\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n@@ -108,5 +108,1 @@\n-            Long.toString(lingeredAppPid)\n-        };\n-\n-        \/\/ Start a new process to attach to the lingered app\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(toolArgs);\n+             Long.toString(lingeredAppPid));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestDefaultMethods.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,1 +74,2 @@\n-        String[] toolArgs = {\n+        \/\/ Start a new process to attach to the lingered app\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n@@ -81,5 +82,1 @@\n-            Long.toString(lingeredAppPid)\n-        };\n-\n-        \/\/ Start a new process to attach to the lingered app\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(toolArgs);\n+            Long.toString(lingeredAppPid));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestG1HeapRegion.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-            String[] toolArgs = {\n+            ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n@@ -118,2 +118,1 @@\n-                Long.toString(app.getPid())\n-            };\n+                Long.toString(app.getPid()));\n@@ -124,2 +123,0 @@\n-            ProcessBuilder processBuilder = ProcessTools\n-                                            .createJavaProcessBuilder(toolArgs);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestInstanceKlassSize.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -100,2 +100,2 @@\n-\n-        String[] toolArgs = {\n+        \/\/ Start a new process to attach to the LingeredApp process to get SA info\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n@@ -108,2 +108,1 @@\n-            Integer.toString(lingeredAppPid)\n-        };\n+            Integer.toString(lingeredAppPid));\n@@ -111,3 +110,0 @@\n-        \/\/ Start a new process to attach to the LingeredApp process\n-        ProcessBuilder processBuilder = ProcessTools\n-                  .createJavaProcessBuilder(toolArgs);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestInstanceKlassSizeForInterface.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,1 +68,2 @@\n-        String[] toolArgs = {\n+        \/\/ Start a new process to attach to the lingered app\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n@@ -73,5 +74,1 @@\n-            Long.toString(lingeredAppPid)\n-        };\n-\n-        \/\/ Start a new process to attach to the lingered app\n-        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(toolArgs);\n+            Long.toString(lingeredAppPid));\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestRevPtrsForInvokeDynamic.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -97,2 +97,1 @@\n-        var pb = ProcessTools.createJavaProcessBuilder(true,\n-                cmd.toArray(new String[cmd.size()]));\n+        var pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n@@ -111,2 +110,1 @@\n-        var pb = ProcessTools.createJavaProcessBuilder(true,\n-                cmd.toArray(new String[cmd.size()]));\n+        var pb = ProcessTools.createJavaProcessBuilder(true, cmd);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/huge\/quicklook\/largeheap\/MemOptions\/MemOptionsTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.util.concurrent.CountDownLatch;\n+import java.util.List;\n@@ -35,0 +35,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -262,0 +263,9 @@\n+    \/**\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     *\n+     * @param command Arguments to pass to the java command.\n+     * @return The ProcessBuilder instance representing the java command.\n+     *\/\n+    public static ProcessBuilder createJavaProcessBuilder(List<String> command) {\n+        return createJavaProcessBuilder(false, command);\n+    }\n@@ -263,0 +273,11 @@\n+    \/**\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     *\n+     * @param addTestVmAndJavaOptions If true, adds test.vm.opts and test.java.opts\n+     *        to the java arguments.\n+     * @param command Arguments to pass to the java command.\n+     * @return The ProcessBuilder instance representing the java command.\n+     *\/\n+    public static ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions, List<String> command) {\n+        return createJavaProcessBuilder(addTestVmAndJavaOptions, command.toArray(String[]::new));\n+    }\n@@ -265,2 +286,4 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested and\n-     * with any platform specific arguments prepended\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n+     *\n+     * @param command Arguments to pass to the java command.\n+     * @return The ProcessBuilder instance representing the java command.\n@@ -273,2 +296,1 @@\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested,\n-     * and with any platform specific arguments prepended.\n+     * Create ProcessBuilder using the java launcher from the jdk to be tested.\n@@ -302,1 +324,1 @@\n-        return new ProcessBuilder(args.toArray(new String[args.size()]));\n+        return new ProcessBuilder(args);\n@@ -316,0 +338,17 @@\n+    \/**\n+     * Executes a test jvm process, waits for it to finish and returns the process output.\n+     * The default jvm options from jtreg, test.vm.opts and test.java.opts, are added.\n+     * The java from the test.jdk is used to execute the command.\n+     *\n+     * The command line will be like:\n+     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n+     *\n+     * The jvm process will have exited before this method returns.\n+     *\n+     * @param cmds User specified arguments.\n+     * @return The output from the process.\n+     *\/\n+    public static OutputAnalyzer executeTestJvm(List<String> cmds) throws Exception {\n+        return executeTestJvm(cmds.toArray(String[]::new));\n+    }\n+\n@@ -330,1 +369,1 @@\n-        ProcessBuilder pb = createJavaProcessBuilder(Utils.addTestJavaOpts(cmds));\n+        ProcessBuilder pb = createJavaProcessBuilder(true, cmds);\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":46,"deletions":7,"binary":false,"changes":53,"status":"modified"}]}