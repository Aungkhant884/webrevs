{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @author Mike McCloskey\n+ * @run testng\/othervm\/timeout=20 SRTest\n@@ -33,1 +33,6 @@\n-import java.nio.charset.*;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.stream.Stream;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n@@ -35,0 +40,1 @@\n+import org.testng.annotations.*;\n@@ -38,0 +44,1 @@\n+    ExecutorService executorService;\n@@ -40,2 +47,5 @@\n-    public static void main(String[] args) throws Exception {\n-        test();\n+    static final String DATA_STRING = \"hello\";\n+\n+    @BeforeClass\n+    public void beforeClass() {\n+        executorService = Executors.newCachedThreadPool();\n@@ -44,3 +54,4 @@\n-    static void test() throws Exception {\n-        ClassicReader classicReader;\n-        NioReader nioReader;\n+    @AfterClass\n+    public void afterClass() {\n+        executorService.shutdown();\n+    }\n@@ -48,2 +59,6 @@\n-        classicReader = new ClassicReader();\n-        invoke(classicReader, new ClassicWriter(classicReader.port()));\n+    @Test\n+    public void classicReaderClassicWriter() throws Exception {\n+        try (ClassicReader cr = new ClassicReader();\n+             ClassicWriter cw = new ClassicWriter(cr.port())) {\n+            invoke(executorService, cr, cw);\n+        }\n@@ -51,0 +66,1 @@\n+    }\n@@ -52,2 +68,6 @@\n-        classicReader = new ClassicReader();\n-        invoke(classicReader, new NioWriter(classicReader.port()));\n+    @Test\n+    public void classicReaderNioWriter() throws Exception {\n+        try (ClassicReader cr = new ClassicReader();\n+             NioWriter nw = new NioWriter(cr.port())) {\n+            invoke(executorService, cr, nw);\n+        }\n@@ -55,0 +75,1 @@\n+    }\n@@ -56,2 +77,6 @@\n-        nioReader = new NioReader();\n-        invoke(nioReader, new ClassicWriter(nioReader.port()));\n+    @Test\n+    public void nioReaderClassicWriter() throws Exception {\n+        try (NioReader nr = new NioReader();\n+             ClassicWriter cw = new ClassicWriter(nr.port())) {\n+            invoke(executorService, nr, cw);\n+        }\n@@ -59,0 +84,1 @@\n+    }\n@@ -60,2 +86,6 @@\n-        nioReader = new NioReader();\n-        invoke(nioReader, new NioWriter(nioReader.port()));\n+    @Test\n+    public void nioReaderNioWriter() throws Exception {\n+        try (NioReader nr = new NioReader();\n+             NioWriter nw = new NioWriter(nr.port())) {\n+            invoke(executorService, nr, nw);\n+        }\n@@ -65,13 +95,4 @@\n-    static void invoke(Sprintable reader, Sprintable writer) throws Exception {\n-        Thread readerThread = new Thread(reader);\n-        readerThread.start();\n-        Thread.sleep(50);\n-\n-        Thread writerThread = new Thread(writer);\n-        writerThread.start();\n-\n-        writerThread.join();\n-        readerThread.join();\n-\n-        reader.throwException();\n-        writer.throwException();\n+    private static void invoke(ExecutorService e, Runnable reader, Runnable writer) {\n+        CompletableFuture<Void> f1 = CompletableFuture.runAsync(writer, e);\n+        CompletableFuture<Void> f2 = CompletableFuture.runAsync(reader, e);\n+        wait(f1, f2);\n@@ -80,2 +101,9 @@\n-    public interface Sprintable extends Runnable {\n-        public void throwException() throws Exception;\n+    \/\/ Exit with CompletionException if any passed futures complete exceptionally\n+    private static void wait(CompletableFuture<?>... futures) throws CompletionException {\n+        CompletableFuture<?> future = CompletableFuture.allOf(futures);\n+        Stream.of(futures)\n+                .forEach(f -> f.exceptionally(ex -> {\n+                    future.completeExceptionally(ex);\n+                    return null;\n+                }));\n+        future.join();\n@@ -84,7 +112,3 @@\n-    public static class ClassicWriter implements Sprintable {\n-        final int port;\n-        Exception e = null;\n-\n-        ClassicWriter(int port) {\n-            this.port = port;\n-        }\n+    public static class ClassicWriter implements Runnable, AutoCloseable {\n+        final DatagramSocket ds;\n+        final int dstPort;\n@@ -92,3 +116,3 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n+        ClassicWriter(int dstPort) throws SocketException {\n+            this.dstPort = dstPort;\n+            this.ds = new DatagramSocket();\n@@ -99,4 +123,2 @@\n-                DatagramSocket ds = new DatagramSocket();\n-                String dataString = \"hello\";\n-                byte[] data = dataString.getBytes();\n-                InetAddress address = InetAddress.getLocalHost();\n+                byte[] data = DATA_STRING.getBytes(US_ASCII);\n+                InetAddress address = InetAddress.getLoopbackAddress();\n@@ -104,1 +126,1 @@\n-                                                       address, port);\n+                                                       address, dstPort);\n@@ -106,4 +128,5 @@\n-                Thread.sleep(50);\n-                ds.send(dp);\n-            } catch (Exception ex) {\n-                e = ex;\n+            } catch (Exception e) {\n+                log.println(\"ClassicWriter [\" + ds.getLocalAddress() + \"]\");\n+                throw new RuntimeException(\"ClassicWriter threw exception: \" + e);\n+            } finally {\n+                log.println(\"ClassicWriter finished\");\n@@ -112,5 +135,0 @@\n-    }\n-\n-    public static class NioWriter implements Sprintable {\n-        final int port;\n-        Exception e = null;\n@@ -118,2 +136,3 @@\n-        NioWriter(int port) {\n-            this.port = port;\n+        @Override\n+        public void close() throws IOException {\n+            ds.close();\n@@ -121,0 +140,5 @@\n+    }\n+\n+    public static class NioWriter implements Runnable, AutoCloseable {\n+        final DatagramChannel dc;\n+        final int dstPort;\n@@ -122,3 +146,3 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n+        NioWriter(int dstPort) throws IOException {\n+            this.dc = DatagramChannel.open();\n+            this.dstPort = dstPort;\n@@ -129,1 +153,0 @@\n-                DatagramChannel dc = DatagramChannel.open();\n@@ -131,1 +154,1 @@\n-                bb.put(\"hello\".getBytes());\n+                bb.put(DATA_STRING.getBytes(US_ASCII));\n@@ -133,4 +156,2 @@\n-                InetAddress address = InetAddress.getLocalHost();\n-                InetSocketAddress isa = new InetSocketAddress(address, port);\n-                dc.send(bb, isa);\n-                Thread.sleep(50);\n+                InetAddress address = InetAddress.getLoopbackAddress();\n+                InetSocketAddress isa = new InetSocketAddress(address, dstPort);\n@@ -139,1 +160,4 @@\n-                e = ex;\n+                log.println(\"NioWriter [\" + dc.socket().getLocalAddress() + \"]\");\n+                throw new RuntimeException(\"NioWriter threw exception: \" + ex);\n+            } finally {\n+                log.println(\"NioWriter finished\");\n@@ -142,0 +166,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            dc.close();\n+        }\n@@ -144,1 +173,1 @@\n-    public static class ClassicReader implements Sprintable {\n+    public static class ClassicReader implements Runnable, AutoCloseable {\n@@ -146,1 +175,0 @@\n-        Exception e = null;\n@@ -149,1 +177,2 @@\n-            this.ds = new DatagramSocket();\n+            InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+            this.ds = new DatagramSocket(address);\n@@ -156,5 +185,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -166,3 +190,2 @@\n-                String received = new String(dp.getData());\n-                log.println(received);\n-                ds.close();\n+                String received = new String(dp.getData(), dp.getOffset(), dp.getLength(), US_ASCII);\n+                log.println(\"ClassicReader received: \" + received);\n@@ -170,1 +193,4 @@\n-                e = ex;\n+                log.println(\"ClassicReader [\" + ds.getLocalAddress() +\"]\");\n+                throw new RuntimeException(\"ClassicReader threw exception: \" + ex);\n+            } finally {\n+                log.println(\"ClassicReader finished\");\n@@ -173,0 +199,5 @@\n+\n+        @Override\n+        public void close() throws IOException {\n+            ds.close();\n+        }\n@@ -175,1 +206,1 @@\n-    public static class NioReader implements Sprintable {\n+    public static class NioReader implements Runnable, AutoCloseable {\n@@ -177,1 +208,0 @@\n-        Exception e = null;\n@@ -180,1 +210,2 @@\n-            this.dc = DatagramChannel.open().bind(new InetSocketAddress(0));\n+            InetSocketAddress address = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+            this.dc = DatagramChannel.open().bind(address);\n@@ -187,5 +218,0 @@\n-        public void throwException() throws Exception {\n-            if (e != null)\n-                throw e;\n-        }\n-\n@@ -195,1 +221,1 @@\n-                SocketAddress sa = dc.receive(bb);\n+                dc.receive(bb);\n@@ -197,4 +223,2 @@\n-                CharBuffer cb = Charset.forName(\"US-ASCII\").\n-                    newDecoder().decode(bb);\n-                log.println(\"From: \"+sa+ \" said \" +cb);\n-                dc.close();\n+                CharBuffer cb = US_ASCII.newDecoder().decode(bb);\n+                log.println(\"NioReader received: \" + cb);\n@@ -202,1 +226,4 @@\n-                e = ex;\n+                log.println(\"NioReader [\" + dc.socket().getLocalAddress() +\"]\");\n+                throw new RuntimeException(\"NioReader threw exception: \" + ex);\n+            } finally {\n+                log.println(\"NioReader finished\");\n@@ -205,1 +232,0 @@\n-    }\n@@ -207,0 +233,5 @@\n+        @Override\n+        public void close() throws IOException {\n+            dc.close();\n+        }\n+    }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/SRTest.java","additions":125,"deletions":94,"binary":false,"changes":219,"status":"modified"}]}