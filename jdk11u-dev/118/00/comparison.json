{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4503641 8130394\n+ * @bug 4503641 8130394 8249773\n@@ -34,0 +34,1 @@\n+import static java.lang.System.out;\n@@ -39,30 +40,1 @@\n-        \/\/ clients\n-        DatagramChannel dc1 = DatagramChannel.open();\n-        DatagramChannel dc2 = DatagramChannel.open();\n-\n-        \/\/ bind server to any port\n-        DatagramChannel dc3 = DatagramChannel.open();\n-        dc3.socket().bind((SocketAddress)null);\n-\n-        \/\/ get server address\n-        InetAddress lh = InetAddress.getLocalHost();\n-        InetSocketAddress isa\n-            = new InetSocketAddress( lh, dc3.socket().getLocalPort() );\n-\n-        ByteBuffer bb = ByteBuffer.allocateDirect(100);\n-        bb.put(\"Dia duit!\".getBytes());\n-        bb.flip();\n-\n-        dc1.send(bb, isa);      \/\/ packet 1 from dc1\n-        dc1.send(bb, isa);      \/\/ packet 2 from dc1\n-        dc2.send(bb, isa);      \/\/ packet 3 from dc1\n-\n-        \/\/ receive 3 packets\n-        dc3.socket().setSoTimeout(1000);\n-        ByteBuffer rb = ByteBuffer.allocateDirect(100);\n-        SocketAddress sa[] = new SocketAddress[3];\n-        for (int i=0; i<3; i++) {\n-            sa[i] = dc3.receive(rb);\n-            System.out.println(\"received \"+ sa[i] );\n-            rb.clear();\n-        }\n+        String regex = \"Dia duit![0-2]\";\n@@ -70,3 +42,4 @@\n-        dc1.close();\n-        dc2.close();\n-        dc3.close();\n+        try (DatagramChannel dc1 = DatagramChannel.open();        \/\/ client\n+             DatagramChannel dc2 = DatagramChannel.open();        \/\/ client\n+             DatagramChannel dc3 = DatagramChannel.open();\n+             DatagramChannel dc4 = DatagramChannel.open()) {      \/\/ client\n@@ -74,4 +47,1 @@\n-        \/*\n-         * Check that sa[0] equals sa[1] (both from dc1)\n-         * Check that sa[1] not equal to sa[2] (one from dc1, one from dc2)\n-         *\/\n+            dc3.socket().bind((SocketAddress) null); \/\/ bind server to any port\n@@ -79,3 +49,24 @@\n-        if (!sa[0].equals(sa[1])) {\n-            throw new Exception(\"Source address for packets 1 & 2 should be equal\");\n-        }\n+            \/\/ get server address\n+            InetAddress lh = InetAddress.getLocalHost();\n+            InetSocketAddress isa = new InetSocketAddress(lh, dc3.socket().getLocalPort());\n+\n+            ByteBuffer bb = ByteBuffer.allocateDirect(100);\n+            bb.put(\"Dia duit!0\".getBytes());\n+            bb.flip();\n+\n+            ByteBuffer bb1 = ByteBuffer.allocateDirect(100);\n+            bb1.put(\"Dia duit!1\".getBytes());\n+            bb1.flip();\n+\n+            ByteBuffer bb2 = ByteBuffer.allocateDirect(100);\n+            bb2.put(\"Dia duit!2\".getBytes());\n+            bb2.flip();\n+\n+            ByteBuffer bb3 = ByteBuffer.allocateDirect(100);\n+            bb3.put(\"garbage\".getBytes());\n+            bb3.flip();\n+\n+            dc1.send(bb, isa);      \/\/ packet 1 from dc1\n+            dc4.send(bb3, isa);     \/\/ interference, packet 4 from dc4\n+            dc1.send(bb1, isa);     \/\/ packet 2 from dc1\n+            dc2.send(bb2, isa);     \/\/ packet 3 from dc2\n@@ -83,2 +74,45 @@\n-        if (sa[1].equals(sa[2])) {\n-            throw new Exception(\"Source address for packets 2 & 3 should be different\");\n+\n+            \/\/ receive 4 packets\n+            dc3.socket().setSoTimeout(1000);\n+            ByteBuffer rb = ByteBuffer.allocateDirect(100);\n+            SocketAddress sa[] = new SocketAddress[3];\n+\n+            for (int i = 0; i < 3;) {\n+                SocketAddress receiver = dc3.receive(rb);\n+                rb.flip();\n+                byte[] bytes = new byte[rb.limit()];\n+                rb.get(bytes, 0, rb.limit());\n+                String msg = new String(bytes);\n+\n+                if (msg.matches(\"Dia duit![0-2]\")) {\n+                    if (msg.equals(\"Dia duit!0\")) {\n+                        sa[0] = receiver;\n+                        i++;\n+                    }\n+                    if (msg.equals(\"Dia duit!1\")) {\n+                        sa[1] = receiver;\n+                        i++;\n+                    }\n+                    if (msg.equals(\"Dia duit!2\")) {\n+                        sa[2] = receiver;\n+                        i++;\n+                    }\n+                } else {\n+                    out.println(\"Interfered packet sender address is : \" + receiver);\n+                    out.println(\"random interfered packet is : \" + msg);\n+                }\n+                rb.clear();\n+            }\n+\n+            \/*\n+             * Check that sa[0] equals sa[1] (both from dc1)\n+             * Check that sa[1] not equal to sa[2] (one from dc1, one from dc2)\n+             *\/\n+\n+            if (!sa[0].equals(sa[1])) {\n+                throw new Exception(\"Source address for packets 1 & 2 should be equal\");\n+            }\n+\n+            if (sa[1].equals(sa[2])) {\n+                throw new Exception(\"Source address for packets 2 & 3 should be different\");\n+            }\n@@ -87,1 +121,0 @@\n-\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/ReceiveISA.java","additions":78,"deletions":45,"binary":false,"changes":123,"status":"modified"}]}