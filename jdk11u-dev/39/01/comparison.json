{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -287,0 +287,3 @@\n+\n+  \/\/ Only generated code frames should be patched, therefore the return address will not be signed.\n+  assert(pauth_ptr_is_raw(*pc_addr), \"cannot be signed\");\n@@ -451,1 +454,3 @@\n-  return frame(sender_sp, unextended_sp, link(), sender_pc());\n+  \/\/ Use the raw version of pc - the interpreter should not have signed it.\n+\n+  return frame(sender_sp, unextended_sp, link(), sender_pc_maybe_signed());\n@@ -514,0 +519,1 @@\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,0 +152,1 @@\n+  inline address  sender_pc_maybe_signed() const;\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"pauth_aarch64.hpp\"\n@@ -48,0 +49,1 @@\n+  assert(pauth_ptr_is_raw(pc), \"cannot be signed\");\n@@ -72,0 +74,1 @@\n+  assert(pauth_ptr_is_raw(pc), \"cannot be signed\");\n@@ -158,2 +161,3 @@\n-inline address* frame::sender_pc_addr()      const { return (address*) addr_at( return_addr_offset); }\n-inline address  frame::sender_pc()           const { return *sender_pc_addr(); }\n+inline address* frame::sender_pc_addr()         const { return (address*) addr_at( return_addr_offset); }\n+inline address  frame::sender_pc_maybe_signed() const { return *sender_pc_addr(); }\n+inline address  frame::sender_pc()              const { return pauth_strip_pointer(sender_pc_maybe_signed()); }\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_AARCH64_PAUTH_AARCH64_INLINE_HPP\n+#define CPU_AARCH64_PAUTH_AARCH64_INLINE_HPP\n+\n+#include OS_CPU_HEADER_INLINE(pauth)\n+\n+inline bool pauth_ptr_is_raw(address ptr) {\n+  \/\/ Confirm none of the high bits are set in the pointer.\n+  return ptr == pauth_strip_pointer(ptr);\n+}\n+\n+#endif \/\/ CPU_AARCH64_PAUTH_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/aarch64\/pauth_aarch64.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_CPU_LINUX_AARCH64_PAUTH_LINUX_AARCH64_INLINE_HPP\n+#define OS_CPU_LINUX_AARCH64_PAUTH_LINUX_AARCH64_INLINE_HPP\n+\n+\/\/ Only the PAC instructions in the NOP space can be used. This ensures the\n+\/\/ binaries work on systems without PAC. Write these instructions using their\n+\/\/ alternate \"hint\" instructions to ensure older compilers can still be used.\n+\n+#define XPACLRI \"hint #0x7;\"\n+\n+inline address pauth_strip_pointer(address ptr) {\n+  register address result __asm__(\"x30\") = ptr;\n+  asm (XPACLRI : \"+r\"(result));\n+  return result;\n+}\n+\n+#undef XPACLRI\n+\n+#endif \/\/ OS_CPU_LINUX_AARCH64_PAUTH_LINUX_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/pauth_linux_aarch64.inline.hpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"}]}