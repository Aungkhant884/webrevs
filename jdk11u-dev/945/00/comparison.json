{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n@@ -42,1 +42,0 @@\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jigsaw\/modulepath\/AddModules.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n@@ -42,1 +42,0 @@\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jigsaw\/modulepath\/AddOpens.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jigsaw\/modulepath\/AddReads.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jigsaw\/modulepath\/ExportModule.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n@@ -44,1 +44,0 @@\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jigsaw\/modulepath\/MainModuleOnly.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n@@ -43,1 +43,0 @@\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jigsaw\/modulepath\/ModulePathAndCP.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,1 +32,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -35,1 +34,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/com\/sun\/jdi\/BadAgentPath.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -46,0 +46,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/com\/sun\/jdi\/BadHandshakeTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,0 +33,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/com\/sun\/jdi\/DoubleAgentTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/com\/sun\/jdi\/ExclusiveBind.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -35,0 +35,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/com\/sun\/jdi\/NoLaunchOptionTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -42,0 +42,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/com\/sun\/jdi\/ProcessAttachTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- * @build jdk.testlibrary.* VMConnection RunToExit Exit0\n+ * @build VMConnection RunToExit Exit0\n@@ -45,1 +45,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/jdi\/RunToExit.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -30,1 +30,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -32,1 +32,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/com\/sun\/jdi\/SuspendNoFlagTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/com\/sun\/jdi\/cds\/CDSBreakpointTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/com\/sun\/jdi\/cds\/CDSDeleteAllBkptsTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -34,1 +34,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/com\/sun\/jdi\/cds\/CDSFieldWatchpoints.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/jdi\/cds\/CDSJDITest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -33,1 +33,0 @@\n- * @build jdk.testlibrary.*\n@@ -47,1 +46,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/CheckOrigin.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/management\/HotSpotDiagnosticMXBean\/DumpHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n- * @library \/lib\/testlibrary\n@@ -34,1 +33,0 @@\n- * @build TestTotalSwap jdk.testlibrary.*\n@@ -60,2 +58,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/com\/sun\/management\/OperatingSystemMXBean\/TestTotalSwap.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/BasicTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/PermissionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,3 +25,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.JDKToolLauncher;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/ProviderTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/RunnerUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n- * @run build Application SimpleProvider jdk.testlibrary.*\n+ * @run build jdk.testlibrary.* Application SimpleProvider jdk.testlibrary.*\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/StartManagementAgent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/com\/sun\/tools\/attach\/TempDirTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.*\n+ * @library \/test\/lib\n@@ -37,1 +36,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/java\/io\/BufferedInputStream\/LargeCopyWithMark.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n@@ -44,1 +44,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -49,1 +49,1 @@\n- *        jdk.testlibrary.ProcessTools\n+ *        jdk.test.lib.process.ProcessTools\n","filename":"test\/jdk\/java\/lang\/Class\/forName\/modules\/TestDriver.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n@@ -36,1 +36,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -38,1 +38,1 @@\n- * @build ResourcesTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build ResourcesTest jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/Class\/getResource\/ResourcesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/EndorsedDirs.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/ExtDirs.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.*\n+ * @library \/test\/lib\n@@ -40,1 +39,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/GetDotResource.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @library \/lib\/testlibrary\n- * @build package2.Class2 GetSystemPackage jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build package2.Class2 GetSystemPackage\n@@ -44,1 +44,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/GetSystemPackage.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @build jdk.testlibrary.ProcessTools\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.ProcessTools\n@@ -48,1 +49,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/getResource\/GetResource.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -28,1 +28,1 @@\n- *        jdk.test.lib.util.JarUtils jdk.testlibrary.ProcessTools\n+ *        jdk.test.lib.util.JarUtils\n@@ -42,1 +42,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/getResource\/automaticmodules\/Driver.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n@@ -37,1 +37,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -39,1 +39,1 @@\n- * @build ResourcesTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build ResourcesTest jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/getResource\/modules\/ResourcesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- * @library \/lib\/testlibrary\n@@ -53,1 +52,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/securityManager\/ClassLoaderTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n@@ -38,1 +38,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -40,1 +40,1 @@\n- * @build AccessTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build AccessTest jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/lang\/ModuleTests\/access\/AccessTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.*\n+ * @library \/test\/lib\n@@ -34,3 +33,3 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import static jdk.testlibrary.ProcessTools.createJavaProcessBuilder;\n-import static jdk.testlibrary.ProcessTools.executeProcess;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import static jdk.test.lib.process.ProcessTools.createJavaProcessBuilder;\n+import static jdk.test.lib.process.ProcessTools.executeProcess;\n","filename":"test\/jdk\/java\/lang\/Runtime\/shutdown\/ShutdownInterruptedMain.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.*\n+ * @library \/test\/lib\n@@ -33,2 +32,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/java\/lang\/StackWalker\/CallerFromMain.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n+import static jdk.test.lib.process.ProcessTools.executeCommand;\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/Base.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,13 +24,0 @@\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.testlibrary.JDKToolFinder;\n-\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n-\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/JDKLoggerForImageTest.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,13 +24,0 @@\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.testlibrary.JDKToolFinder;\n-\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n-\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/JDKLoggerForJDKTest.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,13 +24,0 @@\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.testlibrary.JDKToolFinder;\n-\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n-\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/LoggerInImageTest.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,11 +25,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.testlibrary.JDKToolFinder;\n-\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/NamedLoggerForImageTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,11 +25,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.testlibrary.JDKToolFinder;\n-\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/NamedLoggerForJDKTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,11 +25,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.testlibrary.JDKToolFinder;\n-\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/UnnamedLoggerForImageTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,11 +25,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.testlibrary.JDKToolFinder;\n-\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n","filename":"test\/jdk\/java\/lang\/System\/LoggerFinder\/modules\/UnnamedLoggerForJDKTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -34,2 +34,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build jdk.test.lib.Platform\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/lang\/System\/OsVersionTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n- * @build jdk.testlibrary.* DummyAgent DummyClass TestDaemonThreadLauncher TestDaemonThread\n+ * @build DummyAgent DummyClass TestDaemonThreadLauncher TestDaemonThread\n","filename":"test\/jdk\/java\/lang\/instrument\/DaemonThread\/TestDaemonThread.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/instrument\/DaemonThread\/TestDaemonThreadLauncher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,0 +33,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/lang\/instrument\/PremainClass\/NoPremainAgentTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,0 +33,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/lang\/instrument\/PremainClass\/PremainClassTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,0 +33,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/lang\/instrument\/PremainClass\/ZeroArgPremainAgentTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @library \/lib\/testlibrary\n@@ -28,1 +27,1 @@\n- * @build ExecJarWithAgent Main Agent AgentHelper jdk.testlibrary.*\n+ * @build ExecJarWithAgent Main Agent AgentHelper\n@@ -43,2 +42,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/java\/lang\/instrument\/executableJAR\/ExecJarWithAgent.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library src \/lib\/testlibrary\n+ * @library src \/test\/lib\n@@ -33,0 +33,2 @@\n+import jdk.test.lib.JDKToolFinder;\n+\n@@ -34,1 +36,3 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import java.util.stream.Stream;\n+\n+import static jdk.test.lib.process.ProcessTools.*;\n@@ -44,4 +48,0 @@\n-        ProcessBuilder pb =\n-            createJavaProcessBuilder(\"-javaagent:Agent.jar\",\n-                                     \"--module-path\", modulepath,\n-                                     \"-m\", \"test\/jdk.test.Main\");\n@@ -49,1 +49,7 @@\n-        \/\/ remove CLASSPATH environment variable\n+        \/\/ can't use ProcessTools.createJavaProcessBuilder as it always adds -cp\n+        ProcessBuilder pb = new ProcessBuilder(\n+                JDKToolFinder.getTestJDKTool(\"java\"),\n+                \"-javaagent:Agent.jar\",\n+                \"--module-path\", modulepath,\n+                \"-m\", \"test\/jdk.test.Main\");\n+\n@@ -51,1 +57,2 @@\n-        String value = env.remove(\"CLASSPATH\");\n+        \/\/ remove CLASSPATH environment variable\n+        env.remove(\"CLASSPATH\");\n","filename":"test\/jdk\/java\/lang\/instrument\/modules\/AppendToClassPathModuleTest.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/LowMemoryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -33,1 +34,0 @@\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/jdk\/java\/lang\/management\/MemoryMXBean\/RunUtil.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n@@ -41,1 +41,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -43,1 +43,1 @@\n- * @build ProxyClassAccessTest q.NP jdk.testlibrary.*\n+ * @build ProxyClassAccessTest q.NP\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/ProxyClassAccessTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n@@ -41,1 +41,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -43,1 +43,1 @@\n- * @build ProxyTest jdk.testlibrary.ProcessTools\n+ * @build ProxyTest jdk.test.lib.process.ProcessTools\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/ProxyLayerTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n@@ -38,1 +38,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -40,1 +40,1 @@\n- * @build ProxyTest q.U jdk.testlibrary.*\n+ * @build ProxyTest q.U\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/ProxyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @library \/lib\/testlibrary\n- * @build SetDefaultProvider TestProvider m\/* jdk.testlibrary.ProcessTools\n+ * @library \/test\/lib\n+ * @build SetDefaultProvider TestProvider m\/* jdk.test.lib.process.ProcessTools\n@@ -41,1 +41,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/nio\/file\/spi\/SetDefaultProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @library \/lib\/testlibrary \/test\/lib\n- * @build jdk.testlibrary.ProcessTools\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.ProcessTools\n@@ -35,1 +35,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n","filename":"test\/jdk\/java\/rmi\/module\/ModuleTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/java\/security\/AccessController\/DoPrivAccompliceTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -40,0 +40,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/KeytoolReaderP12Test.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -35,0 +35,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/KeytoolWriteP12Test.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/MetadataEmptyTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/MetadataStoreLoadTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/StoreTrustedCertAPITest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -42,0 +42,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/StoreTrustedCertKeytool.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/java\/security\/KeyStore\/PKCS12\/Utils.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -36,1 +36,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/Policy\/ExtensiblePolicy\/ExtensiblePolicyWithJarTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -37,1 +37,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n","filename":"test\/jdk\/java\/security\/Policy\/SignedJar\/SignedJarTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -32,1 +32,0 @@\n- * @build jdk.testlibrary.*\n@@ -44,3 +43,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/util\/Arrays\/TimSortStackSize2.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- * @build DefaultLocaleTest jdk.testlibrary.*\n+ * @build DefaultLocaleTest\n@@ -34,1 +34,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n","filename":"test\/jdk\/java\/util\/Locale\/bcp47u\/SystemPropertyTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -29,1 +29,1 @@\n- * @build CacheTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build CacheTest jdk.test.lib.compiler.CompilerUtils\n@@ -33,1 +33,0 @@\n-import java.io.File;\n@@ -38,2 +37,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/cache\/CacheTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- *        jdk.testlibrary.ProcessTools CaseInsensitiveNameClash\n+ *        jdk.test.lib.process.ProcessTools CaseInsensitiveNameClash\n@@ -37,1 +37,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/casesensitive\/CaseInsensitiveNameClash.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import static jdk.testlibrary.ProcessTools.executeTestJava;\n+import static jdk.test.lib.process.ProcessTools.executeTestJava;\n@@ -38,1 +38,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -40,1 +40,1 @@\n- * @build TestPermission jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build TestPermission jdk.test.lib.compiler.CompilerUtils\n","filename":"test\/jdk\/java\/util\/ResourceBundle\/modules\/security\/TestPermission.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -41,0 +41,1 @@\n+ * @library \/test\/lib\n@@ -43,1 +44,1 @@\n- * @build jdk.testlibrary.ProcessTools\n+ * @build jdk.test.lib.process.ProcessTools\n","filename":"test\/jdk\/java\/util\/logging\/TestLoggerWeakRefLeak.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n@@ -39,1 +39,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -42,1 +42,1 @@\n- * @build GetResourceBundleTest jdk.testlibrary.ProcessTools\n+ * @build GetResourceBundleTest jdk.test.lib.process.ProcessTools\n","filename":"test\/jdk\/java\/util\/logging\/modules\/GetResourceBundleTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -47,2 +47,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/java\/util\/zip\/EntryCount64k.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -61,1 +62,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/javax\/management\/mxbean\/MXBeanWeirdParamTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -57,1 +58,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/connection\/DefaultAgentFilterTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -67,1 +68,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/javax\/management\/security\/AuthorizationTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -83,1 +84,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/javax\/management\/security\/SecurityTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -53,1 +53,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n","filename":"test\/jdk\/javax\/security\/auth\/Subject\/doAs\/NestedActions.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -37,1 +37,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/jdk\/internal\/misc\/VM\/RuntimeArguments.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @library src \/lib\/testlibrary\n+ * @library src \/test\/lib\n@@ -40,3 +40,0 @@\n-import java.lang.module.ModuleDescriptor;\n-import java.lang.module.ModuleFinder;\n-import java.lang.module.ModuleReference;\n@@ -45,2 +42,1 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/jdk\/modules\/etc\/DefaultModules.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -50,1 +50,1 @@\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n+import static jdk.test.lib.process.ProcessTools.executeCommand;\n","filename":"test\/jdk\/jdk\/modules\/incubator\/DefaultImage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -57,1 +57,1 @@\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n+import static jdk.test.lib.process.ProcessTools.executeCommand;\n","filename":"test\/jdk\/jdk\/modules\/incubator\/ImageModules.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library  \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -33,1 +33,1 @@\n- *        jdk.testlibrary.ProcessTools\n+ *        jdk.test.lib.process.ProcessTools\n@@ -44,1 +44,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/automaticmodules\/RunWithAutomaticModules.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -31,1 +31,1 @@\n- * @build ContainerTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build ContainerTest jdk.test.lib.compiler.CompilerUtils\n@@ -42,1 +42,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/container\/ContainerTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -28,1 +28,1 @@\n- * @build OverlappingPackagesTest jdk.testlibrary.*\n+ * @build OverlappingPackagesTest\n@@ -41,1 +41,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/jdk\/modules\/scenarios\/overlappingpackages\/OverlappingPackagesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-package jdk.testlibrary;\n-\n@@ -32,2 +30,2 @@\n- * @build jdk.testlibrary.*\n- * @run main jdk.testlibrary.OutputAnalyzerReportingTest\n+ * @library \/test\/lib\n+ * @run main OutputAnalyzerReportingTest\n@@ -36,0 +34,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n","filename":"test\/jdk\/lib\/testlibrary\/OutputAnalyzerReportingTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package jdk.testlibrary;\n@@ -29,2 +28,2 @@\n- * @build jdk.testlibrary.*\n- * @run main jdk.testlibrary.OutputAnalyzerTest\n+ * @library \/test\/lib\n+ * @run main OutputAnalyzerTest\n@@ -33,0 +32,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n@@ -153,2 +154,4 @@\n-        if (output.shouldMatchByLine(byLinePattern) != 1) {\n-            throw new Exception(\"shouldMatchByLine() should find one line\");\n+        try {\n+            output.shouldMatchByLine(byLinePattern);\n+        } catch (RuntimeException e) {\n+            throw new Exception(\"shouldMatchByLine() failed\", e);\n@@ -156,0 +159,1 @@\n+\n@@ -162,2 +166,5 @@\n-        if (output.stdoutShouldMatchByLine(stdoutByLinePattern) != 1) {\n-            throw new Exception(\"stdoutShouldMatchByLine() should find one line\");\n+\n+        try {\n+            output.stdoutShouldMatchByLine(stdoutByLinePattern);\n+        } catch (RuntimeException e) {\n+            throw new Exception(\"stdoutShouldMatchByLine() failed\", e);\n","filename":"test\/jdk\/lib\/testlibrary\/OutputAnalyzerTest.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,580 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.testlibrary;\n-\n-import static jdk.testlibrary.Asserts.*;\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.io.StringReader;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-\n-\/**\n- * Utility class for verifying output and exit value from a {@code Process}.\n- *\n- * @deprecated  This class is deprecated. Use the one from\n- *              {@code <root>\/test\/lib\/jdk\/test\/lib\/process}\n- *\n- *\/\n-@Deprecated\n-public final class OutputAnalyzer {\n-    private final OutputBuffer output;\n-    private final String stdout;\n-    private final String stderr;\n-    private final int exitValue;    \/\/ useless now. output contains exit value.\n-\n-    \/**\n-     * Create an OutputAnalyzer, a utility class for verifying output and exit\n-     * value from a Process.\n-     * <p>\n-     * OutputAnalyzer should never be instantiated directly -\n-     * use {@linkplain ProcessTools#executeProcess(ProcessBuilder)} instead\n-     *\n-     * @param process\n-     *            Process to analyze\n-     * @throws IOException\n-     *             If an I\/O error occurs.\n-     *\/\n-    OutputAnalyzer(Process process) throws IOException {\n-        output = new OutputBuffer(process);\n-        exitValue = -1;\n-        this.stdout = null;\n-        this.stderr = null;\n-    }\n-\n-    \/**\n-     * Create an OutputAnalyzer, a utility class for verifying output.\n-     *\n-     * @param buf\n-     *            String buffer to analyze\n-     *\/\n-    OutputAnalyzer(String buf) {\n-        this(buf, buf);\n-    }\n-\n-    \/**\n-     * Create an OutputAnalyzer, a utility class for verifying output\n-     *\n-     * @param stdout\n-     *            stdout buffer to analyze\n-     * @param stderr\n-     *            stderr buffer to analyze\n-     *\/\n-    OutputAnalyzer(String stdout, String stderr) {\n-        this.output = null;\n-        this.stdout = stdout;\n-        this.stderr = stderr;\n-        exitValue = -1;\n-    }\n-\n-    \/**\n-     * Verify that the stdout and stderr contents of output buffer contains the\n-     * string\n-     *\n-     * @param expectedString\n-     *            String that buffer should contain\n-     * @throws RuntimeException\n-     *             If the string was not found\n-     *\/\n-    public OutputAnalyzer shouldContain(String expectedString) {\n-        if (!getStdout().contains(expectedString)\n-                && !getStderr().contains(expectedString)) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + expectedString\n-                    + \"' missing from stdout\/stderr \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stdout contents of output buffer contains the string\n-     *\n-     * @param expectedString\n-     *            String that buffer should contain\n-     * @throws RuntimeException\n-     *             If the string was not found\n-     *\/\n-    public OutputAnalyzer stdoutShouldContain(String expectedString) {\n-        if (!getStdout().contains(expectedString)) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + expectedString\n-                    + \"' missing from stdout \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stderr contents of output buffer contains the string\n-     *\n-     * @param expectedString\n-     *            String that buffer should contain\n-     * @throws RuntimeException\n-     *             If the string was not found\n-     *\/\n-    public OutputAnalyzer stderrShouldContain(String expectedString) {\n-        if (!getStderr().contains(expectedString)) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + expectedString\n-                    + \"' missing from stderr \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stdout and stderr contents of output buffer does not\n-     * contain the string\n-     *\n-     * @param notExpectedString\n-     *            String that the buffer should not contain\n-     * @throws RuntimeException\n-     *             If the string was found\n-     *\/\n-    public OutputAnalyzer shouldNotContain(String notExpectedString) {\n-        if (getStdout().contains(notExpectedString)) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + notExpectedString\n-                    + \"' found in stdout \\n\");\n-        }\n-        if (getStderr().contains(notExpectedString)) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + notExpectedString\n-                    + \"' found in stderr \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stdout contents of output buffer does not contain the\n-     * string\n-     *\n-     * @param notExpectedString\n-     *            String that the buffer should not contain\n-     * @throws RuntimeException\n-     *             If the string was found\n-     *\/\n-    public OutputAnalyzer stdoutShouldNotContain(String notExpectedString) {\n-        if (getStdout().contains(notExpectedString)) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + notExpectedString\n-                    + \"' found in stdout \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stderr contents of output buffer does not contain the\n-     * string\n-     *\n-     * @param notExpectedString\n-     *            String that the buffer should not contain\n-     * @throws RuntimeException\n-     *             If the string was found\n-     *\/\n-    public OutputAnalyzer stderrShouldNotContain(String notExpectedString) {\n-        if (getStderr().contains(notExpectedString)) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + notExpectedString\n-                    + \"' found in stderr \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stdout and stderr contents of output buffer matches the\n-     * pattern\n-     *\n-     * @param pattern\n-     * @throws RuntimeException\n-     *             If the pattern was not found\n-     *\/\n-    public OutputAnalyzer shouldMatch(String pattern) {\n-        Matcher stdoutMatcher = Pattern.compile(pattern, Pattern.MULTILINE)\n-                .matcher(getStdout());\n-        Matcher stderrMatcher = Pattern.compile(pattern, Pattern.MULTILINE)\n-                .matcher(getStderr());\n-        if (!stdoutMatcher.find() && !stderrMatcher.find()) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + pattern\n-                    + \"' missing from stdout\/stderr \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stdout contents of output buffer matches the pattern\n-     *\n-     * @param pattern\n-     * @throws RuntimeException\n-     *             If the pattern was not found\n-     *\/\n-    public OutputAnalyzer stdoutShouldMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(\n-                getStdout());\n-        if (!matcher.find()) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + pattern\n-                    + \"' missing from stdout \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stderr contents of output buffer matches the pattern\n-     *\n-     * @param pattern\n-     * @throws RuntimeException\n-     *             If the pattern was not found\n-     *\/\n-    public OutputAnalyzer stderrShouldMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(\n-                getStderr());\n-        if (!matcher.find()) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + pattern\n-                    + \"' missing from stderr \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stdout and stderr contents of output buffer does not\n-     * match the pattern\n-     *\n-     * @param pattern\n-     * @throws RuntimeException\n-     *             If the pattern was found\n-     *\/\n-    public OutputAnalyzer shouldNotMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(\n-                getStdout());\n-        if (matcher.find()) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + pattern + \"' found in stdout: '\"\n-                    + matcher.group() + \"' \\n\");\n-        }\n-        matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(getStderr());\n-        if (matcher.find()) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + pattern + \"' found in stderr: '\"\n-                    + matcher.group() + \"' \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stdout contents of output buffer does not match the\n-     * pattern\n-     *\n-     * @param pattern\n-     * @throws RuntimeException\n-     *             If the pattern was found\n-     *\/\n-    public OutputAnalyzer stdoutShouldNotMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(\n-                getStdout());\n-        if (matcher.find()) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + pattern + \"' found in stdout \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Verify that the stderr contents of output buffer does not match the\n-     * pattern\n-     *\n-     * @param pattern\n-     * @throws RuntimeException\n-     *             If the pattern was found\n-     *\/\n-    public OutputAnalyzer stderrShouldNotMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(\n-                getStderr());\n-        if (matcher.find()) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"'\" + pattern + \"' found in stderr \\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Get the captured group of the first string matching the pattern. stderr\n-     * is searched before stdout.\n-     *\n-     * @param pattern\n-     *            The multi-line pattern to match\n-     * @param group\n-     *            The group to capture\n-     * @return The matched string or null if no match was found\n-     *\/\n-    public String firstMatch(String pattern, int group) {\n-        Matcher stderrMatcher = Pattern.compile(pattern, Pattern.MULTILINE)\n-                .matcher(getStderr());\n-        Matcher stdoutMatcher = Pattern.compile(pattern, Pattern.MULTILINE)\n-                .matcher(getStdout());\n-        if (stderrMatcher.find()) {\n-            return stderrMatcher.group(group);\n-        }\n-        if (stdoutMatcher.find()) {\n-            return stdoutMatcher.group(group);\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * Get the first string matching the pattern. stderr is searched before\n-     * stdout.\n-     *\n-     * @param pattern\n-     *            The multi-line pattern to match\n-     * @return The matched string or null if no match was found\n-     *\/\n-    public String firstMatch(String pattern) {\n-        return firstMatch(pattern, 0);\n-    }\n-\n-    \/**\n-     * Verify the exit value of the process\n-     *\n-     * @param expectedExitValue\n-     *            Expected exit value from process\n-     * @throws RuntimeException\n-     *             If the exit value from the process did not match the expected\n-     *             value\n-     *\/\n-    public OutputAnalyzer shouldHaveExitValue(int expectedExitValue) {\n-        if (getExitValue() != expectedExitValue) {\n-            reportDiagnosticSummary();\n-            throw new RuntimeException(\"Expected to get exit value of [\"\n-                    + expectedExitValue + \"]\\n\");\n-        }\n-        return this;\n-    }\n-\n-    \/**\n-     * Report summary that will help to diagnose the problem Currently includes:\n-     * - standard input produced by the process under test - standard output -\n-     * exit code Note: the command line is printed by the ProcessTools\n-     *\/\n-    private OutputAnalyzer reportDiagnosticSummary() {\n-        String msg = \" stdout: [\" + getStdout() + \"];\\n\" + \" stderr: [\" + getStderr()\n-                + \"]\\n\" + \" exitValue = \" + getExitValue() + \"\\n\";\n-\n-        System.err.println(msg);\n-        return this;\n-    }\n-\n-    \/**\n-     * Get the contents of the output buffer (stdout and stderr)\n-     *\n-     * @return Content of the output buffer\n-     *\/\n-    public String getOutput() {\n-        return getStdout() + getStderr();\n-    }\n-\n-    \/**\n-     * Get the contents of the stdout buffer\n-     *\n-     * @return Content of the stdout buffer\n-     *\/\n-    public String getStdout() {\n-        return output == null ? stdout : output.getStdout();\n-    }\n-\n-    \/**\n-     * Get the contents of the stderr buffer\n-     *\n-     * @return Content of the stderr buffer\n-     *\/\n-    public String getStderr() {\n-        return output == null ? stderr : output.getStderr();\n-    }\n-\n-    \/**\n-     * Get the process exit value\n-     *\n-     * @return Process exit value\n-     *\/\n-    public int getExitValue() {\n-        return output == null ? exitValue : output.getExitValue();\n-    }\n-\n-\n-    \/**\n-     * Print the stdout buffer to the given {@code PrintStream}.\n-     *\n-     * @return this OutputAnalyzer\n-     *\/\n-    public OutputAnalyzer outputTo(PrintStream out) {\n-        out.println(getStdout());\n-        return this;\n-    }\n-\n-    \/**\n-     * Print the stderr buffer to the given {@code PrintStream}.\n-     *\n-     * @return this OutputAnalyzer\n-     *\/\n-    public OutputAnalyzer errorTo(PrintStream out) {\n-        out.println(getStderr());\n-        return this;\n-    }\n-\n-\n-    \/**\n-     * Get the contents of the output buffer (stdout and stderr)\n-     * as a list of strings. Output will be split at new-lines as\n-     * recognized by java.io.BufferedReader.readLine().\n-     *\n-     * @return Contents of the output buffer as list of strings\n-     *\/\n-    public List<String> asLines() {\n-        return asLines(getOutput());\n-    }\n-\n-    private List<String> asLines(String buffer) {\n-        return new BufferedReader(new StringReader(buffer))\n-            .lines().collect(Collectors.toList());\n-    }\n-\n-    \/**\n-     * Check if there is a line matching {@code pattern} and return its index\n-     *\n-     * @param pattern Matching pattern\n-     * @param fromIndex Start matching after so many lines skipped\n-     * @return Index of first matching line\n-     *\/\n-    private int indexOf(List<String> lines, String pattern, int fromIndex) {\n-        for (int i = fromIndex; i < lines.size(); i++) {\n-            if (lines.get(i).matches(pattern)) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    \/**\n-     * @see #shouldMatchByLine(String, String, String)\n-     *\/\n-    public int shouldMatchByLine(String pattern) {\n-        return shouldMatchByLine(null, null, pattern);\n-    }\n-\n-    \/**\n-     * @see #stdoutShouldMatchByLine(String, String, String)\n-     *\/\n-    public int stdoutShouldMatchByLine(String pattern) {\n-        return stdoutShouldMatchByLine(null, null, pattern);\n-    }\n-\n-    \/**\n-     * @see #shouldMatchByLine(String, String, String)\n-     *\/\n-    public int shouldMatchByLineFrom(String from, String pattern) {\n-        return shouldMatchByLine(from, null, pattern);\n-    }\n-\n-    \/**\n-     * @see #shouldMatchByLine(String, String, String)\n-     *\/\n-    public int shouldMatchByLineTo(String to, String pattern) {\n-        return shouldMatchByLine(null, to, pattern);\n-    }\n-\n-    \/**\n-     * Verify that the stdout and stderr contents of output buffer match the\n-     * {@code pattern} line by line. The whole output could be matched or\n-     * just a subset of it.\n-     *\n-     * @param from\n-     *            The line (excluded) from where output will be matched.\n-     *            Set {@code from} to null for matching from the first line.\n-     * @param to\n-     *            The line (excluded) until where output will be matched.\n-     *            Set {@code to} to null for matching until the last line.\n-     * @param pattern\n-     *            Matching pattern\n-     * @return Count of lines which match the {@code pattern}\n-     *\/\n-    public int shouldMatchByLine(String from, String to, String pattern) {\n-        return shouldMatchByLine(getOutput(), from, to, pattern);\n-    }\n-\n-    \/**\n-     * Verify that the stdout contents of output buffer matches the\n-     * {@code pattern} line by line. The whole stdout could be matched or\n-     * just a subset of it.\n-     *\n-     * @param from\n-     *            The line (excluded) from where stdout will be matched.\n-     *            Set {@code from} to null for matching from the first line.\n-     * @param to\n-     *            The line (excluded) until where stdout will be matched.\n-     *            Set {@code to} to null for matching until the last line.\n-     * @param pattern\n-     *            Matching pattern\n-     * @return Count of lines which match the {@code pattern}\n-     *\/\n-    public int stdoutShouldMatchByLine(String from, String to, String pattern) {\n-        return shouldMatchByLine(getStdout(), from, to, pattern);\n-    }\n-\n-    private int shouldMatchByLine(String buffer, String from, String to, String pattern) {\n-        List<String> lines = asLines(buffer);\n-\n-        int fromIndex = 0;\n-        if (from != null) {\n-            fromIndex = indexOf(lines, from, 0) + 1; \/\/ + 1 -> apply 'pattern' to lines after 'from' match\n-            assertGreaterThan(fromIndex, 0,\n-                    \"The line\/pattern '\" + from + \"' from where the output should match can not be found\");\n-        }\n-\n-        int toIndex = lines.size();\n-        if (to != null) {\n-            toIndex = indexOf(lines, to, fromIndex);\n-            assertGreaterThan(toIndex, fromIndex,\n-                    \"The line\/pattern '\" + to + \"' until where the output should match can not be found\");\n-        }\n-\n-        List<String> subList = lines.subList(fromIndex, toIndex);\n-        assertFalse(subList.isEmpty(), \"There are no lines to check:\"\n-                + \" range \" + fromIndex + \"..\" + toIndex + \", subList = \" + subList);\n-        int matchedCount = 0;\n-        for (String line : subList) {\n-            assertTrue(line.matches(pattern),\n-                    \"The line '\" + line + \"' does not match pattern '\" + pattern + \"'\");\n-            matchedCount++;\n-        }\n-\n-        return matchedCount;\n-    }\n-\n-}\n","filename":"test\/jdk\/lib\/testlibrary\/jdk\/testlibrary\/OutputAnalyzer.java","additions":0,"deletions":580,"binary":false,"changes":580,"status":"deleted"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.testlibrary;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.util.concurrent.CancellationException;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Future;\n-\n-\/**\n- * @deprecated This class is deprecated. Use the one from\n- *             {@code <root>\/test\/lib\/jdk\/test\/lib\/process}\n- *\/\n-@Deprecated\n-class OutputBuffer {\n-    private static class OutputBufferException extends RuntimeException {\n-        private static final long serialVersionUID = 8528687792643129571L;\n-\n-        public OutputBufferException(Throwable cause) {\n-            super(cause);\n-        }\n-    }\n-\n-    private final Process p;\n-    private final Future<Void> outTask;\n-    private final Future<Void> errTask;\n-    private final ByteArrayOutputStream stderrBuffer = new ByteArrayOutputStream();\n-    private final ByteArrayOutputStream stdoutBuffer = new ByteArrayOutputStream();\n-\n-    \/**\n-     * Create an OutputBuffer, a class for storing and managing stdout and\n-     * stderr results separately\n-     *\n-     * @param stdout\n-     *            stdout result\n-     * @param stderr\n-     *            stderr result\n-     *\/\n-    OutputBuffer(Process p) {\n-        this.p = p;\n-        StreamPumper outPumper = new StreamPumper(p.getInputStream(),\n-                stdoutBuffer);\n-        StreamPumper errPumper = new StreamPumper(p.getErrorStream(),\n-                stderrBuffer);\n-\n-        outTask = outPumper.process();\n-        errTask = errPumper.process();\n-    }\n-\n-    \/**\n-     * Returns the stdout result\n-     *\n-     * @return stdout result\n-     *\/\n-    public String getStdout() {\n-        try {\n-            outTask.get();\n-            return stdoutBuffer.toString();\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            throw new OutputBufferException(e);\n-        } catch (ExecutionException | CancellationException e) {\n-            throw new OutputBufferException(e);\n-        }\n-    }\n-\n-    \/**\n-     * Returns the stderr result\n-     *\n-     * @return stderr result\n-     *\/\n-    public String getStderr() {\n-        try {\n-            errTask.get();\n-            return stderrBuffer.toString();\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            throw new OutputBufferException(e);\n-        } catch (ExecutionException | CancellationException e) {\n-            throw new OutputBufferException(e);\n-        }\n-    }\n-\n-    public int getExitValue() {\n-        try {\n-            return p.waitFor();\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            throw new OutputBufferException(e);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/lib\/testlibrary\/jdk\/testlibrary\/OutputBuffer.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -1,560 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.testlibrary;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.io.PrintStream;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n-import java.util.function.Predicate;\n-import java.util.function.Consumer;\n-import java.util.stream.Collectors;\n-\n-\n-\/**\n- * @deprecated This class is deprecated. Use the one from\n- *             {@code <root>\/test\/lib\/jdk\/test\/lib\/process}\n- *\/\n-@Deprecated\n-public final class ProcessTools {\n-    private static final class LineForwarder extends StreamPumper.LinePump {\n-        private final PrintStream ps;\n-        private final String prefix;\n-        LineForwarder(String prefix, PrintStream os) {\n-            this.ps = os;\n-            this.prefix = prefix;\n-        }\n-        @Override\n-        protected void processLine(String line) {\n-            ps.println(\"[\" + prefix + \"] \" + line);\n-        }\n-    }\n-\n-    private ProcessTools() {\n-    }\n-\n-    \/**\n-     * <p>Starts a process from its builder.<\/p>\n-     * <span>The default redirects of STDOUT and STDERR are started<\/span>\n-     * @param name The process name\n-     * @param processBuilder The process builder\n-     * @return Returns the initialized process\n-     * @throws IOException\n-     *\/\n-    public static Process startProcess(String name,\n-                                       ProcessBuilder processBuilder)\n-    throws IOException {\n-        return startProcess(name, processBuilder, (Consumer<String>)null);\n-    }\n-\n-    \/**\n-     * <p>Starts a process from its builder.<\/p>\n-     * <span>The default redirects of STDOUT and STDERR are started<\/span>\n-     * <p>It is possible to monitor the in-streams via the provided {@code consumer}\n-     * @param name The process name\n-     * @param consumer {@linkplain Consumer} instance to process the in-streams\n-     * @param processBuilder The process builder\n-     * @return Returns the initialized process\n-     * @throws IOException\n-     *\/\n-    @SuppressWarnings(\"overloads\")\n-    public static Process startProcess(String name,\n-                                       ProcessBuilder processBuilder,\n-                                       Consumer<String> consumer)\n-    throws IOException {\n-        try {\n-            return startProcess(name, processBuilder, consumer, null, -1, TimeUnit.NANOSECONDS);\n-        } catch (InterruptedException | TimeoutException e) {\n-            \/\/ will never happen\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    \/**\n-     * <p>Starts a process from its builder.<\/p>\n-     * <span>The default redirects of STDOUT and STDERR are started<\/span>\n-     * <p>\n-     * It is possible to wait for the process to get to a warmed-up state\n-     * via {@linkplain Predicate} condition on the STDOUT\n-     * <\/p>\n-     * @param name The process name\n-     * @param processBuilder The process builder\n-     * @param linePredicate The {@linkplain Predicate} to use on the STDOUT\n-     *                      Used to determine the moment the target app is\n-     *                      properly warmed-up.\n-     *                      It can be null - in that case the warmup is skipped.\n-     * @param timeout The timeout for the warmup waiting; -1 = no wait; 0 = wait forever\n-     * @param unit The timeout {@linkplain TimeUnit}\n-     * @return Returns the initialized {@linkplain Process}\n-     * @throws IOException\n-     * @throws InterruptedException\n-     * @throws TimeoutException\n-     *\/\n-    public static Process startProcess(String name,\n-                                       ProcessBuilder processBuilder,\n-                                       final Predicate<String> linePredicate,\n-                                       long timeout,\n-                                       TimeUnit unit)\n-    throws IOException, InterruptedException, TimeoutException {\n-        return startProcess(name, processBuilder, null, linePredicate, timeout, unit);\n-    }\n-\n-    \/**\n-     * <p>Starts a process from its builder.<\/p>\n-     * <span>The default redirects of STDOUT and STDERR are started<\/span>\n-     * <p>\n-     * It is possible to wait for the process to get to a warmed-up state\n-     * via {@linkplain Predicate} condition on the STDOUT and monitor the\n-     * in-streams via the provided {@linkplain Consumer}\n-     * <\/p>\n-     * @param name The process name\n-     * @param processBuilder The process builder\n-     * @param lineConsumer  The {@linkplain Consumer} the lines will be forwarded to\n-     * @param linePredicate The {@linkplain Predicate} to use on the STDOUT\n-     *                      Used to determine the moment the target app is\n-     *                      properly warmed-up.\n-     *                      It can be null - in that case the warmup is skipped.\n-     * @param timeout The timeout for the warmup waiting; -1 = no wait; 0 = wait forever\n-     * @param unit The timeout {@linkplain TimeUnit}\n-     * @return Returns the initialized {@linkplain Process}\n-     * @throws IOException\n-     * @throws InterruptedException\n-     * @throws TimeoutException\n-     *\/\n-    public static Process startProcess(String name,\n-                                       ProcessBuilder processBuilder,\n-                                       final Consumer<String> lineConsumer,\n-                                       final Predicate<String> linePredicate,\n-                                       long timeout,\n-                                       TimeUnit unit)\n-    throws IOException, InterruptedException, TimeoutException {\n-        System.out.println(\"[\"+name+\"]:\" + processBuilder.command().stream().collect(Collectors.joining(\" \")));\n-        Process p = processBuilder.start();\n-        StreamPumper stdout = new StreamPumper(p.getInputStream());\n-        StreamPumper stderr = new StreamPumper(p.getErrorStream());\n-\n-        stdout.addPump(new LineForwarder(name, System.out));\n-        stderr.addPump(new LineForwarder(name, System.err));\n-        if (lineConsumer != null) {\n-            StreamPumper.LinePump pump = new StreamPumper.LinePump() {\n-                @Override\n-                protected void processLine(String line) {\n-                    lineConsumer.accept(line);\n-                }\n-            };\n-            stdout.addPump(pump);\n-            stderr.addPump(pump);\n-        }\n-\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-        if (linePredicate != null) {\n-            StreamPumper.LinePump pump = new StreamPumper.LinePump() {\n-                @Override\n-                protected void processLine(String line) {\n-                    if (latch.getCount() > 0 && linePredicate.test(line)) {\n-                        latch.countDown();\n-                    }\n-                }\n-            };\n-            stdout.addPump(pump);\n-            stderr.addPump(pump);\n-        } else {\n-            latch.countDown();\n-        }\n-        final Future<Void> stdoutTask = stdout.process();\n-        final Future<Void> stderrTask = stderr.process();\n-\n-        try {\n-            if (timeout > -1) {\n-                if (timeout == 0) {\n-                    latch.await();\n-                } else {\n-                    if (!latch.await(Utils.adjustTimeout(timeout), unit)) {\n-                        throw new TimeoutException();\n-                    }\n-                }\n-            }\n-        } catch (TimeoutException | InterruptedException e) {\n-            System.err.println(\"Failed to start a process (thread dump follows)\");\n-            for(Map.Entry<Thread, StackTraceElement[]> s : Thread.getAllStackTraces().entrySet()) {\n-                printStack(s.getKey(), s.getValue());\n-            }\n-\n-            if (p.isAlive()) {\n-                p.destroyForcibly();\n-            }\n-\n-            stdoutTask.cancel(true);\n-            stderrTask.cancel(true);\n-            throw e;\n-        }\n-\n-        return new ProcessImpl(p, stdoutTask, stderrTask);\n-    }\n-\n-    \/**\n-     * <p>Starts a process from its builder.<\/p>\n-     * <span>The default redirects of STDOUT and STDERR are started<\/span>\n-     * <p>\n-     * It is possible to wait for the process to get to a warmed-up state\n-     * via {@linkplain Predicate} condition on the STDOUT. The warm-up will\n-     * wait indefinitely.\n-     * <\/p>\n-     * @param name The process name\n-     * @param processBuilder The process builder\n-     * @param linePredicate The {@linkplain Predicate} to use on the STDOUT\n-     *                      Used to determine the moment the target app is\n-     *                      properly warmed-up.\n-     *                      It can be null - in that case the warmup is skipped.\n-     * @return Returns the initialized {@linkplain Process}\n-     * @throws IOException\n-     * @throws InterruptedException\n-     * @throws TimeoutException\n-     *\/\n-    @SuppressWarnings(\"overloads\")\n-    public static Process startProcess(String name,\n-                                       ProcessBuilder processBuilder,\n-                                       final Predicate<String> linePredicate)\n-    throws IOException, InterruptedException, TimeoutException {\n-        return startProcess(name, processBuilder, linePredicate, 0, TimeUnit.SECONDS);\n-    }\n-\n-    \/**\n-     * Get the process id of the current running Java process\n-     *\n-     * @return Process id\n-     *\/\n-    public static long getProcessId() {\n-        return ProcessHandle.current().pid();\n-    }\n-\n-    \/**\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested,\n-     * and with any platform specific arguments prepended.\n-     *\n-     * @param command Arguments to pass to the java command.\n-     * @return The ProcessBuilder instance representing the java command.\n-     *\/\n-    public static ProcessBuilder createJavaProcessBuilder(String... command) {\n-        return createJavaProcessBuilder(false, command);\n-    }\n-\n-    \/**\n-     * Create ProcessBuilder using the java launcher from the jdk to be tested,\n-     * and with any platform specific arguments prepended.\n-     *\n-     * @param addTestVmAndJavaOptions If true, adds test.vm.opts and test.java.opts\n-     *        to the java arguments.\n-     * @param command Arguments to pass to the java command.\n-     * @return The ProcessBuilder instance representing the java command.\n-     *\/\n-    public static ProcessBuilder createJavaProcessBuilder(boolean addTestVmAndJavaOptions, String... command) {\n-        String javapath = JDKToolFinder.getJDKTool(\"java\");\n-\n-        ArrayList<String> args = new ArrayList<>();\n-        args.add(javapath);\n-\n-        if (addTestVmAndJavaOptions) {\n-            \/\/ -cp is needed to make sure the same classpath is used whether the test is\n-            \/\/ run in AgentVM mode or OtherVM mode. It was added to the hotspot version\n-            \/\/ of this API as part of 8077608. However, for the jdk version it is only\n-            \/\/ added when addTestVmAndJavaOptions is true in order to minimize\n-            \/\/ disruption to existing JDK tests, which have yet to be tested with -cp\n-            \/\/ being added. At some point -cp should always be added to be consistent\n-            \/\/ with what the hotspot version does.\n-            args.add(\"-cp\");\n-            args.add(System.getProperty(\"java.class.path\"));\n-            Collections.addAll(args, Utils.getTestJavaOpts());\n-        }\n-\n-        Collections.addAll(args, command);\n-\n-        \/\/ Reporting\n-        StringBuilder cmdLine = new StringBuilder();\n-        for (String cmd : args)\n-            cmdLine.append(cmd).append(' ');\n-        System.out.println(\"Command line: [\" + cmdLine.toString() + \"]\");\n-\n-        return new ProcessBuilder(args.toArray(new String[args.size()]));\n-    }\n-\n-    private static void printStack(Thread t, StackTraceElement[] stack) {\n-        System.out.println(\"\\t\" +  t +\n-                           \" stack: (length = \" + stack.length + \")\");\n-        if (t != null) {\n-            for (StackTraceElement stack1 : stack) {\n-                System.out.println(\"\\t\" + stack1);\n-            }\n-            System.out.println();\n-        }\n-    }\n-\n-    \/**\n-     * Executes a test java process, waits for it to finish and returns the process output.\n-     * The default options from jtreg, test.vm.opts and test.java.opts, are added.\n-     * The java from the test.jdk is used to execute the command.\n-     *\n-     * The command line will be like:\n-     * {test.jdk}\/bin\/java {test.vm.opts} {test.java.opts} cmds\n-     *\n-     * The java process will have exited before this method returns.\n-     *\n-     * @param cmds User specifed arguments.\n-     * @return The output from the process.\n-     *\/\n-    public static OutputAnalyzer executeTestJava(String... options) throws Exception {\n-        ProcessBuilder pb = createJavaProcessBuilder(Utils.addTestJavaOpts(options));\n-        return executeProcess(pb);\n-    }\n-\n-    \/**\n-     * @deprecated Use executeTestJava instead\n-     *\/\n-    public static OutputAnalyzer executeTestJvm(String... options) throws Exception {\n-        return executeTestJava(options);\n-    }\n-\n-    \/**\n-     * Executes a process, waits for it to finish and returns the process output.\n-     * The process will have exited before this method returns.\n-     * @param pb The ProcessBuilder to execute.\n-     * @return The {@linkplain OutputAnalyzer} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzer executeProcess(ProcessBuilder pb) throws Exception {\n-        return executeProcess(pb, null);\n-    }\n-\n-    \/**\n-     * Executes a process, pipe some text into its STDIN, waits for it\n-     * to finish and returns the process output. The process will have exited\n-     * before this method returns.\n-     * @param pb The ProcessBuilder to execute.\n-     * @param input The text to pipe into STDIN. Can be null.\n-     * @return The {@linkplain OutputAnalyzer} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzer executeProcess(ProcessBuilder pb, String input)\n-            throws Exception {\n-        OutputAnalyzer output = null;\n-        Process p = null;\n-        boolean failed = false;\n-        try {\n-            p = pb.start();\n-            if (input != null) {\n-                try (OutputStream os = p.getOutputStream();\n-                        PrintStream ps = new PrintStream(os)) {\n-                    ps.print(input);\n-                    ps.flush();\n-                }\n-            }\n-            output = new OutputAnalyzer(p);\n-            p.waitFor();\n-\n-            return output;\n-        } catch (Throwable t) {\n-            if (p != null) {\n-                p.destroyForcibly().waitFor();\n-            }\n-\n-            failed = true;\n-            System.out.println(\"executeProcess() failed: \" + t);\n-            throw t;\n-        } finally {\n-            if (failed) {\n-                System.err.println(getProcessLog(pb, output));\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Executes a process, waits for it to finish and returns the process output.\n-     *\n-     * The process will have exited before this method returns.\n-     *\n-     * @param cmds The command line to execute.\n-     * @return The output from the process.\n-     *\/\n-    public static OutputAnalyzer executeProcess(String... cmds) throws Exception {\n-        return executeProcess(new ProcessBuilder(cmds));\n-    }\n-\n-    \/**\n-     * Used to log command line, stdout, stderr and exit code from an executed process.\n-     * @param pb The executed process.\n-     * @param output The output from the process.\n-     *\/\n-    public static String getProcessLog(ProcessBuilder pb, OutputAnalyzer output) {\n-        String stderr = output == null ? \"null\" : output.getStderr();\n-        String stdout = output == null ? \"null\" : output.getStdout();\n-        String exitValue = output == null ? \"null\": Integer.toString(output.getExitValue());\n-        StringBuilder logMsg = new StringBuilder();\n-        final String nl = System.getProperty(\"line.separator\");\n-        logMsg.append(\"--- ProcessLog ---\" + nl);\n-        logMsg.append(\"cmd: \" + getCommandLine(pb) + nl);\n-        logMsg.append(\"exitvalue: \" + exitValue + nl);\n-        logMsg.append(\"stderr: \" + stderr + nl);\n-        logMsg.append(\"stdout: \" + stdout + nl);\n-\n-        return logMsg.toString();\n-    }\n-\n-    \/**\n-     * @return The full command line for the ProcessBuilder.\n-     *\/\n-    public static String getCommandLine(ProcessBuilder pb) {\n-        if (pb == null) {\n-            return \"null\";\n-        }\n-        StringBuilder cmd = new StringBuilder();\n-        for (String s : pb.command()) {\n-            cmd.append(s).append(\" \");\n-        }\n-        return cmd.toString().trim();\n-    }\n-\n-    \/**\n-     * Executes a process, waits for it to finish, prints the process output\n-     * to stdout, and returns the process output.\n-     *\n-     * The process will have exited before this method returns.\n-     *\n-     * @param cmds The command line to execute.\n-     * @return The {@linkplain OutputAnalyzer} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzer executeCommand(String... cmds)\n-            throws Throwable {\n-        String cmdLine = Arrays.stream(cmds).collect(Collectors.joining(\" \"));\n-        System.out.println(\"Command line: [\" + cmdLine + \"]\");\n-        OutputAnalyzer analyzer = ProcessTools.executeProcess(cmds);\n-        System.out.println(analyzer.getOutput());\n-        return analyzer;\n-    }\n-\n-    \/**\n-     * Executes a process, waits for it to finish, prints the process output\n-     * to stdout and returns the process output.\n-     *\n-     * The process will have exited before this method returns.\n-     *\n-     * @param pb The ProcessBuilder to execute.\n-     * @return The {@linkplain OutputAnalyzer} instance wrapping the process.\n-     *\/\n-    public static OutputAnalyzer executeCommand(ProcessBuilder pb)\n-            throws Throwable {\n-        String cmdLine = pb.command().stream().collect(Collectors.joining(\" \"));\n-        System.out.println(\"Command line: [\" + cmdLine + \"]\");\n-        OutputAnalyzer analyzer = ProcessTools.executeProcess(pb);\n-        System.out.println(analyzer.getOutput());\n-        return analyzer;\n-    }\n-\n-    private static class ProcessImpl extends Process {\n-\n-        private final Process p;\n-        private final Future<Void> stdoutTask;\n-        private final Future<Void> stderrTask;\n-\n-        public ProcessImpl(Process p, Future<Void> stdoutTask, Future<Void> stderrTask) {\n-            this.p = p;\n-            this.stdoutTask = stdoutTask;\n-            this.stderrTask = stderrTask;\n-        }\n-\n-        @Override\n-        public OutputStream getOutputStream() {\n-            return p.getOutputStream();\n-        }\n-\n-        @Override\n-        public InputStream getInputStream() {\n-            return p.getInputStream();\n-        }\n-\n-        @Override\n-        public InputStream getErrorStream() {\n-            return p.getErrorStream();\n-        }\n-\n-        @Override\n-        public int waitFor() throws InterruptedException {\n-            int rslt = p.waitFor();\n-            waitForStreams();\n-            return rslt;\n-        }\n-\n-        @Override\n-        public int exitValue() {\n-            return p.exitValue();\n-        }\n-\n-        @Override\n-        public void destroy() {\n-            p.destroy();\n-        }\n-\n-        @Override\n-        public long pid() {\n-            return p.pid();\n-        }\n-\n-        @Override\n-        public boolean isAlive() {\n-            return p.isAlive();\n-        }\n-\n-        @Override\n-        public Process destroyForcibly() {\n-            return p.destroyForcibly();\n-        }\n-\n-        @Override\n-        public boolean waitFor(long timeout, TimeUnit unit) throws InterruptedException {\n-            boolean rslt = p.waitFor(timeout, unit);\n-            if (rslt) {\n-                waitForStreams();\n-            }\n-            return rslt;\n-        }\n-\n-        private void waitForStreams() throws InterruptedException {\n-            try {\n-                stdoutTask.get();\n-            } catch (ExecutionException e) {\n-            }\n-            try {\n-                stderrTask.get();\n-            } catch (ExecutionException e) {\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/lib\/testlibrary\/jdk\/testlibrary\/ProcessTools.java","additions":0,"deletions":560,"binary":false,"changes":560,"status":"deleted"},{"patch":"@@ -1,204 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.testlibrary;\n-\n-import java.io.BufferedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.OutputStream;\n-import java.io.InputStream;\n-import java.io.IOException;\n-import java.util.HashSet;\n-import java.util.Set;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.FutureTask;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-\/**\n- * @deprecated This class is deprecated. Use the one from\n- *             {@code <root>\/test\/lib\/jdk\/test\/lib\/process}\n- *\/\n-@Deprecated\n-public final class StreamPumper implements Runnable {\n-\n-    private static final int BUF_SIZE = 256;\n-\n-    \/**\n-     * Pump will be called by the StreamPumper to process the incoming data\n-     *\/\n-    abstract public static class Pump {\n-        abstract void register(StreamPumper d);\n-    }\n-\n-    \/**\n-     * OutputStream -> Pump adapter\n-     *\/\n-    final public static class StreamPump extends Pump {\n-        private final OutputStream out;\n-        public StreamPump(OutputStream out) {\n-            this.out = out;\n-        }\n-\n-        @Override\n-        void register(StreamPumper sp) {\n-            sp.addOutputStream(out);\n-        }\n-    }\n-\n-    \/**\n-     * Used to process the incoming data line-by-line\n-     *\/\n-    abstract public static class LinePump extends Pump {\n-        @Override\n-        final void register(StreamPumper sp) {\n-            sp.addLineProcessor(this);\n-        }\n-\n-        abstract protected void processLine(String line);\n-    }\n-\n-    private final InputStream in;\n-    private final Set<OutputStream> outStreams = new HashSet<>();\n-    private final Set<LinePump> linePumps = new HashSet<>();\n-\n-    private final AtomicBoolean processing = new AtomicBoolean(false);\n-    private final FutureTask<Void> processingTask = new FutureTask<>(this, null);\n-\n-    public StreamPumper(InputStream in) {\n-        this.in = in;\n-    }\n-\n-    \/**\n-     * Create a StreamPumper that reads from in and writes to out.\n-     *\n-     * @param in\n-     *            The stream to read from.\n-     * @param out\n-     *            The stream to write to.\n-     *\/\n-    public StreamPumper(InputStream in, OutputStream out) {\n-        this(in);\n-        this.addOutputStream(out);\n-    }\n-\n-    \/**\n-     * Implements Thread.run(). Continuously read from {@code in} and write to\n-     * {@code out} until {@code in} has reached end of stream. Abort on\n-     * interruption. Abort on IOExceptions.\n-     *\/\n-    @Override\n-    public void run() {\n-        try (BufferedInputStream is = new BufferedInputStream(in)) {\n-            ByteArrayOutputStream lineBos = new ByteArrayOutputStream();\n-            byte[] buf = new byte[BUF_SIZE];\n-            int len = 0;\n-            int linelen = 0;\n-\n-            while ((len = is.read(buf)) > 0 && !Thread.interrupted()) {\n-                for(OutputStream out : outStreams) {\n-                    out.write(buf, 0, len);\n-                }\n-                if (!linePumps.isEmpty()) {\n-                    int i = 0;\n-                    int lastcrlf = -1;\n-                    while (i < len) {\n-                        if (buf[i] == '\\n' || buf[i] == '\\r') {\n-                            int bufLinelen = i - lastcrlf - 1;\n-                            if (bufLinelen > 0) {\n-                                lineBos.write(buf, lastcrlf + 1, bufLinelen);\n-                            }\n-                            linelen += bufLinelen;\n-\n-                            if (linelen > 0) {\n-                                lineBos.flush();\n-                                final String line = lineBos.toString();\n-                                linePumps.stream().forEach((lp) -> {\n-                                    lp.processLine(line);\n-                                });\n-                                lineBos.reset();\n-                                linelen = 0;\n-                            }\n-                            lastcrlf = i;\n-                        }\n-\n-                        i++;\n-                    }\n-                    if (lastcrlf == -1) {\n-                        lineBos.write(buf, 0, len);\n-                        linelen += len;\n-                    } else if (lastcrlf < len - 1) {\n-                        lineBos.write(buf, lastcrlf + 1, len - lastcrlf - 1);\n-                        linelen += len - lastcrlf - 1;\n-                    }\n-                }\n-            }\n-\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } finally {\n-            for(OutputStream out : outStreams) {\n-                try {\n-                    out.flush();\n-                } catch (IOException e) {}\n-            }\n-            try {\n-                in.close();\n-            } catch (IOException e) {}\n-        }\n-    }\n-\n-    final void addOutputStream(OutputStream out) {\n-        outStreams.add(out);\n-    }\n-\n-    final void addLineProcessor(LinePump lp) {\n-        linePumps.add(lp);\n-    }\n-\n-    final public StreamPumper addPump(Pump ... pump) {\n-        if (processing.get()) {\n-            throw new IllegalStateException(\"Can not modify pumper while \" +\n-                                            \"processing is in progress\");\n-        }\n-        for(Pump p : pump) {\n-            p.register(this);\n-        }\n-        return this;\n-    }\n-\n-    final public Future<Void> process() {\n-        if (!processing.compareAndSet(false, true)) {\n-            throw new IllegalStateException(\"Can not re-run the processing\");\n-        }\n-        Thread t = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                processingTask.run();\n-            }\n-        });\n-        t.setDaemon(true);\n-        t.start();\n-\n-        return processingTask;\n-    }\n-}\n","filename":"test\/jdk\/lib\/testlibrary\/jdk\/testlibrary\/StreamPumper.java","additions":0,"deletions":204,"binary":false,"changes":204,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.OutputAnalyzer\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.OutputAnalyzer\n@@ -32,2 +32,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/native_sanity\/simplenativelauncher\/ProgramTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,0 @@\n-import java.io.File;\n@@ -37,2 +36,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -69,1 +68,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -73,1 +72,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/sun\/jvmstat\/monitor\/MonitoredVm\/MonitorVmStartTerminate.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/management\/jdp\/DynamicLauncher.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jdp\/JdpDefaultsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jdp\/JdpJmxRemoteDynamicPortTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jdp\/JdpOffTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jdp\/JdpSpecificAddressTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/sun\/management\/jdp\/PortAlreadyInUseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/AbstractFilePermissionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -45,1 +45,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -50,1 +50,0 @@\n- * @build jdk.testlibrary.*\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/CustomLauncherTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -51,1 +51,0 @@\n- * @library \/lib\/testlibrary\n@@ -55,1 +54,1 @@\n- * @build jdk.testlibrary.* JMXAgentInterfaceBinding\n+ * @build JMXAgentInterfaceBinding\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/JMXInterfaceBindingTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -42,0 +42,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/LocalManagementTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -47,0 +47,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jmxremote\/bootstrap\/RmiRegistrySslTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -61,0 +61,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jmxremote\/startstop\/JMXStartStopTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -46,0 +46,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jmxremote\/startstop\/JMXStatusPerfCountersTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n@@ -42,0 +42,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/management\/jmxremote\/startstop\/JMXStatusTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/management\/jmxremote\/startstop\/ManagementAgentJcmd.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -35,1 +35,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/tools\/KinitConfPlusProps.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -56,1 +57,2 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -58,1 +60,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/SSLEngineKeyLimit.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -50,2 +51,0 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n@@ -60,1 +59,2 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -62,1 +62,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketKeyLimit.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TsacertOptionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/Warning.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,2 +67,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/Compatibility.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @library \/test\/lib \/lib\/testlibrary ..\/warnings\n+ * @library \/test\/lib ..\/warnings\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/SignTwice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/AliasNotInStoreTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/BadExtendedKeyUsageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/BadKeyUsageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/BadNetscapeCertTypeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -34,1 +34,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/ChainNotValidatedTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/HasExpiredCertTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/HasExpiringCertTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/HasUnsignedEntryTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/LowerCaseManifest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/MultipleWarningsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -38,1 +38,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/NoTimestampTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/NotSignedByAliasTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -31,1 +31,1 @@\n- * @library \/lib\/testlibrary \/test\/lib ..\/\n+ * @library \/test\/lib ..\/\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/NotYetValidCertTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/tools\/jcmd\/JcmdBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.io.File;\n@@ -33,1 +32,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -43,0 +42,1 @@\n+ * @library \/test\/lib\n@@ -93,1 +93,0 @@\n-     * @throws Exception\n@@ -95,4 +94,2 @@\n-    private static void matchListedProcesses(OutputAnalyzer output) throws Exception {\n-        int matchedCount = output.shouldMatchByLine(JCMD_LIST_REGEX);\n-        assertGreaterThan(matchedCount , 0,\n-                \"Found no lines matching pattern: \" + JCMD_LIST_REGEX);\n+    private static void matchListedProcesses(OutputAnalyzer output) {\n+        output.shouldMatchByLine(JCMD_LIST_REGEX);\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdDefaults.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -44,0 +44,1 @@\n+ * @library \/test\/lib\n@@ -137,2 +138,2 @@\n-    private static void matchJcmdCommands(OutputAnalyzer output) throws Exception {\n-        int matchedCount = output.shouldMatchByLine(JCMD_COMMAND_REGEX,\n+    private static void matchJcmdCommands(OutputAnalyzer output) {\n+        output.shouldMatchByLine(JCMD_COMMAND_REGEX,\n@@ -141,2 +142,0 @@\n-        assertGreaterThan(matchedCount , 0,\n-                \"Found no lines matching pattern: \" + JCMD_COMMAND_REGEX);\n@@ -157,2 +156,2 @@\n-    private static void matchPerfCounters(OutputAnalyzer output) throws Exception {\n-        int matchedCount = output.shouldMatchByLineFrom(PERF_COUNTER_REGEX,\n+    private static void matchPerfCounters(OutputAnalyzer output) {\n+        output.shouldMatchByLineFrom(PERF_COUNTER_REGEX,\n@@ -160,2 +159,0 @@\n-        assertGreaterThan(matchedCount , 0,\n-                \"Found no lines matching pattern: \" + PERF_COUNTER_REGEX);\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdSanity.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -43,4 +43,2 @@\n-import jdk.testlibrary.JDKToolLauncher;\n-import jdk.testlibrary.Utils;\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -49,0 +47,2 @@\n+import jdk.testlibrary.JDKToolLauncher;\n+import jdk.testlibrary.Utils;\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/BasicLauncherTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,3 +41,3 @@\n-import jdk.testlibrary.JDKToolLauncher;\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -47,0 +47,1 @@\n+import jdk.testlibrary.JDKToolLauncher;\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/HeapDumpTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -27,2 +29,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n@@ -34,0 +34,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/tools\/jinfo\/BasicJInfoTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -32,2 +34,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/jdk\/sun\/tools\/jmap\/BasicJMapTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -40,1 +42,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n@@ -42,1 +43,0 @@\n-import jdk.testlibrary.ProcessTools;\n@@ -187,1 +187,1 @@\n-    public static void verifyJpsOutput(OutputAnalyzer output, String regex) throws Exception {\n+    public static void verifyJpsOutput(OutputAnalyzer output, String regex) {\n@@ -189,2 +189,1 @@\n-        int matchedCount = output.stdoutShouldMatchByLine(regex);\n-        assertGreaterThan(matchedCount , 0, \"Found no lines matching pattern: \" + regex);\n+        output.stdoutShouldMatchByLine(regex);\n","filename":"test\/jdk\/sun\/tools\/jps\/JpsHelper.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/sun\/tools\/jps\/TestJpsSanity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -27,2 +29,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n@@ -34,0 +34,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/tools\/jstack\/BasicJStackTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -34,2 +36,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/jdk\/sun\/tools\/jstack\/DeadlockDetectionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -36,1 +37,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/tools\/jstat\/JStatInterval.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -35,2 +37,0 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n","filename":"test\/jdk\/sun\/tools\/jstatd\/JstatdTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,2 +25,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/sun\/tools\/jstatd\/TestJstatdUsage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,2 @@\n- * @library \/lib\/testlibrary\n- * @build jdk.testlibrary.ProcessTools\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.process.ProcessTools\n@@ -37,1 +37,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/jimage\/JImageToolTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -29,2 +29,2 @@\n- * @build jdk.testlibrary.ProcessTools\n- *        jdk.testlibrary.OutputAnalyzer\n+ * @build jdk.test.lib.process.ProcessTools\n+ *        jdk.test.lib.process.OutputAnalyzer\n@@ -52,1 +52,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/jlink\/basic\/AllModulePath.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,2 @@\n- * @build jdk.testlibrary.ProcessTools\n- *        jdk.testlibrary.OutputAnalyzer\n+ * @build jdk.test.lib.process.ProcessTools\n+ *        jdk.test.lib.process.OutputAnalyzer\n@@ -50,2 +50,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/jlink\/basic\/BasicTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n@@ -46,1 +46,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -48,1 +48,1 @@\n- * @build BindServices jdk.testlibrary.ProcessTools\n+ * @build BindServices jdk.test.lib.process.ProcessTools\n","filename":"test\/jdk\/tools\/jlink\/bindservices\/BindServices.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n@@ -43,1 +43,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -48,1 +48,1 @@\n- *        CompiledVersionTest jdk.testlibrary.ProcessTools\n+ *        CompiledVersionTest jdk.test.lib.process.ProcessTools\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/CompiledVersionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n@@ -54,1 +54,1 @@\n- *        ModuleTargetHelper UserModuleTest jdk.testlibrary.ProcessTools\n+ *        ModuleTargetHelper UserModuleTest jdk.test.lib.process.ProcessTools\n","filename":"test\/jdk\/tools\/jlink\/plugins\/SystemModuleDescriptors\/UserModuleTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @library \/lib\/testlibrary\n- * @build InfoStreams jdk.testlibrary.ProcessTools\n+ * @library \/test\/lib\n+ * @build InfoStreams jdk.test.lib.process.ProcessTools\n@@ -32,3 +32,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n-\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/tools\/launcher\/InfoStreams.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -28,1 +28,1 @@\n- * @build AddExportsTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build AddExportsTest jdk.test.lib.compiler.CompilerUtils\n@@ -38,2 +38,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import static jdk.testlibrary.ProcessTools.*;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/AddExportsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -32,1 +32,0 @@\n- *        jdk.testlibrary.*\n@@ -45,2 +44,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import static jdk.testlibrary.ProcessTools.*;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/AddExportsTestWarningError.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @library \/lib\/testlibrary\n@@ -29,1 +28,1 @@\n- * @build AddExportsAndOpensInManifest Test2 jdk.testlibrary.*\n+ * @build AddExportsAndOpensInManifest Test2\n@@ -44,2 +43,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addexports\/manifest\/AddExportsAndOpensInManifest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -29,1 +29,1 @@\n- * @build AddModsTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build AddModsTest jdk.test.lib.compiler.CompilerUtils\n@@ -39,1 +39,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addmods\/AddModsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -28,1 +28,1 @@\n- * @build AddReadsTest jdk.testlibrary.*\n+ * @build AddReadsTest\n@@ -39,1 +39,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -41,1 +41,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addreads\/AddReadsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -32,1 +32,0 @@\n- * @build jdk.testlibrary.*\n@@ -46,2 +45,2 @@\n-import jdk.testlibrary.OutputAnalyzer;\n-import static jdk.testlibrary.ProcessTools.*;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/addreads\/AddReadsTestWarningError.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- * @build BasicTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build BasicTest jdk.test.lib.compiler.CompilerUtils\n@@ -42,1 +42,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/launcher\/modules\/basic\/BasicTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @library \/lib\/testlibrary\n- * @build InitErrors jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build InitErrors\n@@ -35,2 +35,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/tools\/launcher\/modules\/basic\/InitErrors.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.stream.Stream;\n@@ -33,0 +34,2 @@\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.Platform;\n@@ -34,1 +37,1 @@\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -40,1 +43,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n@@ -46,1 +49,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -49,1 +52,1 @@\n- * @build jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build jdk.test.lib.compiler.CompilerUtils\n@@ -200,4 +203,6 @@\n-        ProcessBuilder pb = createJavaProcessBuilder(\n-            options.stream()\n-                   .map(this::autoQuote)\n-                   .toArray(String[]::new)\n+        \/\/ can't use ProcessTools.createJavaProcessBuilder as it always adds -cp\n+        ProcessBuilder pb = new ProcessBuilder(\n+                Stream.concat(Stream.of(JDKToolFinder.getTestJDKTool(\"java\")),\n+                              options.stream()\n+                                     .map(this::autoQuote))\n+                      .toArray(String[]::new)\n@@ -208,1 +213,1 @@\n-        String value = env.remove(\"CLASSPATH\");\n+        env.remove(\"CLASSPATH\");\n@@ -214,3 +219,0 @@\n-    private static final boolean IS_WINDOWS\n-        = System.getProperty(\"os.name\").startsWith(\"Windows\");\n-\n@@ -221,1 +223,1 @@\n-        if (IS_WINDOWS && arg.isEmpty()) {\n+        if (Platform.isWindows() && arg.isEmpty()) {\n","filename":"test\/jdk\/tools\/launcher\/modules\/classpath\/JavaClassPathTest.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n- * @library \/lib\/testlibrary\n- * @build DescribeModuleTest jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build DescribeModuleTest\n@@ -33,1 +33,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/launcher\/modules\/describe\/DescribeModuleTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- * @build DryRunTest jdk.testlibrary.ProcessTools\n+ * @build DryRunTest jdk.test.lib.process.ProcessTools\n@@ -44,1 +44,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/launcher\/modules\/dryrun\/DryRunTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @library \/test\/lib \/lib\/testlibrary modules\n+ * @library \/test\/lib modules\n@@ -33,1 +33,0 @@\n- *        jdk.testlibrary.*\n@@ -49,2 +48,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/tools\/launcher\/modules\/illegalaccess\/IllegalAccessTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -29,1 +29,1 @@\n- * @build LimitModsTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build LimitModsTest jdk.test.lib.compiler.CompilerUtils\n@@ -38,1 +38,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/limitmods\/LimitModsTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -29,1 +29,1 @@\n- * @build ListModsTest jdk.test.lib.compiler.CompilerUtils jdk.testlibrary.*\n+ * @build ListModsTest jdk.test.lib.compiler.CompilerUtils\n@@ -38,2 +38,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/tools\/launcher\/modules\/listmods\/ListModsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -29,1 +29,1 @@\n- * @build PatchTest jdk.testlibrary.*\n+ * @build PatchTest\n@@ -45,1 +45,1 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/basic\/PatchTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary \/test\/lib\n+ * @library \/test\/lib\n@@ -30,1 +30,1 @@\n- * @build PatchTestWarningError jdk.testlibrary.*\n+ * @build PatchTestWarningError\n@@ -44,1 +44,2 @@\n-import static jdk.testlibrary.ProcessTools.*;\n+import jdk.test.lib.util.JarUtils;\n+import static jdk.test.lib.process.ProcessTools.*;\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/basic\/PatchTestWarningError.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-import static jdk.testlibrary.ProcessTools.executeCommand;\n+import static jdk.test.lib.process.ProcessTools.executeCommand;\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/systemmodules\/PatchSystemModules.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n- * @library \/lib\/testlibrary\n- * @build ShowModuleResolutionTest jdk.testlibrary.*\n+ * @library \/test\/lib\n+ * @build ShowModuleResolutionTest\n@@ -34,1 +34,1 @@\n-import jdk.testlibrary.ProcessTools;\n+import jdk.test.lib.process.ProcessTools;\n","filename":"test\/jdk\/tools\/launcher\/modules\/showmoduleresolution\/ShowModuleResolutionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n- * @library src \/lib\/testlibrary \/test\/lib\n- * @build ValidateModulesTest hello\/* jdk.test.lib.util.JarUtils jdk.testlibrary.*\n+ * @library src \/test\/lib\n+ * @build ValidateModulesTest hello\/* jdk.test.lib.util.JarUtils\n@@ -39,2 +39,2 @@\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n","filename":"test\/jdk\/tools\/launcher\/modules\/validate\/ValidateModulesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-            output = new OutputBuffer(stdoutBuffer.toString(), stderrBuffer.toString());\n+            output = OutputBuffer.of(stdoutBuffer.toString(), stderrBuffer.toString());\n","filename":"test\/lib\/jdk\/test\/lib\/apps\/LingeredApp.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-     * @return an {@link jdk.testlibrary.OutputAnalyzer} encapsulating the output of the command\n+     * @return an {@link jdk.test.lib.process.OutputAnalyzer} encapsulating the output of the command\n@@ -51,1 +51,1 @@\n-     * @return an {@link jdk.testlibrary.OutputAnalyzer} encapsulating the output of the command\n+     * @return an {@link jdk.test.lib.process.OutputAnalyzer} encapsulating the output of the command\n","filename":"test\/lib\/jdk\/test\/lib\/dcmd\/CommandExecutor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -36,4 +38,1 @@\n-    private final String stdout;\n-    private final String stderr;\n-    private final int exitValue;\n-\n+    private final OutputBuffer buffer;\n@@ -48,4 +47,1 @@\n-        OutputBuffer output = ProcessTools.getOutput(process);\n-        exitValue = process.exitValue();\n-        this.stdout = output.getStdout();\n-        this.stderr = output.getStderr();\n+        buffer = OutputBuffer.of(process);\n@@ -60,1 +56,1 @@\n-        this(buf, buf);\n+        buffer = OutputBuffer.of(buf, buf);\n@@ -70,3 +66,1 @@\n-        this.stdout = stdout;\n-        this.stderr = stderr;\n-        exitValue = -1;\n+        buffer = OutputBuffer.of(stdout, stderr);\n@@ -84,3 +78,1 @@\n-        this.stdout = stdout;\n-        this.stderr = stderr;\n-        this.exitValue = exitValue;\n+        buffer = OutputBuffer.of(stdout, stderr, exitValue);\n@@ -95,1 +87,1 @@\n-    public void stdoutShouldBeEmpty() {\n+    public OutputAnalyzer stdoutShouldBeEmpty() {\n@@ -100,0 +92,1 @@\n+        return this;\n@@ -108,1 +101,1 @@\n-    public void stderrShouldBeEmpty() {\n+    public OutputAnalyzer stderrShouldBeEmpty() {\n@@ -113,0 +106,1 @@\n+        return this;\n@@ -122,1 +116,1 @@\n-    public void stderrShouldBeEmptyIgnoreVMWarnings() {\n+    public OutputAnalyzer stderrShouldBeEmptyIgnoreVMWarnings() {\n@@ -127,0 +121,1 @@\n+        return this;\n@@ -135,1 +130,1 @@\n-    public void stdoutShouldNotBeEmpty() {\n+    public OutputAnalyzer stdoutShouldNotBeEmpty() {\n@@ -140,0 +135,1 @@\n+        return this;\n@@ -148,1 +144,1 @@\n-    public void stderrShouldNotBeEmpty() {\n+    public OutputAnalyzer stderrShouldNotBeEmpty() {\n@@ -153,0 +149,1 @@\n+        return this;\n@@ -162,0 +159,2 @@\n+        String stdout = getStdout();\n+        String stderr = getStderr();\n@@ -176,0 +175,1 @@\n+        String stdout = getStdout();\n@@ -190,0 +190,1 @@\n+        String stderr = getStderr();\n@@ -200,1 +201,1 @@\n-     * @param expectedString String that the buffer should not contain\n+     * @param notExpectedString String that the buffer should not contain\n@@ -204,0 +205,2 @@\n+        String stdout = getStdout();\n+        String stderr = getStderr();\n@@ -221,0 +224,2 @@\n+        String stdout = getStdout();\n+        String stderr = getStderr();\n@@ -235,1 +240,1 @@\n-     * @param expectedString String that the buffer should not contain\n+     * @param notExpectedString String that the buffer should not contain\n@@ -239,0 +244,1 @@\n+        String stdout = getStdout();\n@@ -249,1 +255,1 @@\n-     * @param expectedString String that the buffer should not contain\n+     * @param notExpectedString String that the buffer should not contain\n@@ -253,0 +259,1 @@\n+        String stderr = getStderr();\n@@ -264,1 +271,1 @@\n-     * @param pattern\n+     * @param regexp\n@@ -267,3 +274,6 @@\n-    public OutputAnalyzer shouldMatch(String pattern) {\n-        Matcher stdoutMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n-        Matcher stderrMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n+    public OutputAnalyzer shouldMatch(String regexp) {\n+        String stdout = getStdout();\n+        String stderr = getStderr();\n+        Pattern pattern = Pattern.compile(regexp, Pattern.MULTILINE);\n+        Matcher stdoutMatcher = pattern.matcher(stdout);\n+        Matcher stderrMatcher = pattern.matcher(stderr);\n@@ -272,1 +282,1 @@\n-            throw new RuntimeException(\"'\" + pattern\n+            throw new RuntimeException(\"'\" + regexp\n@@ -282,1 +292,1 @@\n-     * @param pattern\n+     * @param regexp\n@@ -285,2 +295,3 @@\n-    public OutputAnalyzer stdoutShouldMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n+    public OutputAnalyzer stdoutShouldMatch(String regexp) {\n+        String stdout = getStdout();\n+        Matcher matcher = Pattern.compile(regexp, Pattern.MULTILINE).matcher(stdout);\n@@ -289,1 +300,1 @@\n-            throw new RuntimeException(\"'\" + pattern\n+            throw new RuntimeException(\"'\" + regexp\n@@ -303,1 +314,1 @@\n-\n+        String stderr = getStderr();\n@@ -317,1 +328,1 @@\n-     * @param pattern\n+     * @param regexp\n@@ -320,2 +331,4 @@\n-    public OutputAnalyzer shouldNotMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n+    public OutputAnalyzer shouldNotMatch(String regexp) {\n+        String stdout = getStdout();\n+        Pattern pattern = Pattern.compile(regexp, Pattern.MULTILINE);\n+        Matcher matcher = pattern.matcher(stdout);\n@@ -324,1 +337,1 @@\n-            throw new RuntimeException(\"'\" + pattern\n+            throw new RuntimeException(\"'\" + regexp\n@@ -327,1 +340,3 @@\n-        matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n+\n+        String stderr = getStderr();\n+        matcher = pattern.matcher(stderr);\n@@ -330,1 +345,1 @@\n-            throw new RuntimeException(\"'\" + pattern\n+            throw new RuntimeException(\"'\" + regexp\n@@ -333,0 +348,1 @@\n+\n@@ -340,1 +356,1 @@\n-     * @param pattern\n+     * @param regexp\n@@ -343,2 +359,3 @@\n-    public OutputAnalyzer stdoutShouldNotMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n+    public OutputAnalyzer stdoutShouldNotMatch(String regexp) {\n+        String stdout = getStdout();\n+        Matcher matcher = Pattern.compile(regexp, Pattern.MULTILINE).matcher(stdout);\n@@ -347,1 +364,1 @@\n-            throw new RuntimeException(\"'\" + pattern\n+            throw new RuntimeException(\"'\" + regexp\n@@ -357,1 +374,1 @@\n-     * @param pattern\n+     * @param regexp\n@@ -360,2 +377,3 @@\n-    public OutputAnalyzer stderrShouldNotMatch(String pattern) {\n-        Matcher matcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n+    public OutputAnalyzer stderrShouldNotMatch(String regexp) {\n+        String stderr = getStderr();\n+        Matcher matcher = Pattern.compile(regexp, Pattern.MULTILINE).matcher(stderr);\n@@ -364,1 +382,1 @@\n-            throw new RuntimeException(\"'\" + pattern\n+            throw new RuntimeException(\"'\" + regexp\n@@ -374,1 +392,1 @@\n-     * @param pattern The multi-line pattern to match\n+     * @param regexp The multi-line pattern to match\n@@ -378,3 +396,4 @@\n-    public String firstMatch(String pattern, int group) {\n-        Matcher stderrMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stderr);\n-        Matcher stdoutMatcher = Pattern.compile(pattern, Pattern.MULTILINE).matcher(stdout);\n+    public String firstMatch(String regexp, int group) {\n+        Pattern pattern = Pattern.compile(regexp, Pattern.MULTILINE);\n+        String stderr = getStderr();\n+        Matcher stderrMatcher = pattern.matcher(stderr);\n@@ -384,0 +403,2 @@\n+        String stdout = getStdout();\n+        Matcher stdoutMatcher = pattern.matcher(stdout);\n@@ -442,2 +463,2 @@\n-            \" stdout: [\" + stdout + \"];\\n\" +\n-            \" stderr: [\" + stderr + \"]\\n\" +\n+            \" stdout: [\" + getStdout() + \"];\\n\" +\n+            \" stderr: [\" + getStderr() + \"]\\n\" +\n@@ -475,1 +496,1 @@\n-        return stdout + stderr;\n+        return getStdout() + getStderr();\n@@ -484,1 +505,1 @@\n-        return stdout;\n+        return buffer.getStdout();\n@@ -493,1 +514,1 @@\n-        return stderr;\n+        return buffer.getStderr();\n@@ -502,1 +523,1 @@\n-        return exitValue;\n+        return buffer.getExitValue();\n@@ -516,1 +537,1 @@\n-        return Arrays.asList(buffer.split(\"(\\\\r\\\\n|\\\\n|\\\\r)\"));\n+        return Arrays.asList(buffer.split(\"\\\\R\"));\n@@ -529,0 +550,2 @@\n+        String stdout = getStdout();\n+        String stderr = getStderr();\n@@ -548,1 +571,1 @@\n-        String stderr = this.stderr.replaceAll(jvmwarningmsg + \"\\\\R\", \"\");\n+        String stderr = getStderr().replaceAll(jvmwarningmsg + \"\\\\R\", \"\");\n@@ -565,4 +588,114 @@\n-        return Arrays.asList(getOutput().split(\"\\\\R\"))\n-                .stream()\n-                .filter(Pattern.compile(jvmwarningmsg).asPredicate().negate())\n-                .collect(Collectors.toList());\n+        return Arrays.stream(getOutput().split(\"\\\\R\"))\n+                     .filter(Pattern.compile(jvmwarningmsg).asPredicate().negate())\n+                     .collect(Collectors.toList());\n+    }\n+\n+    \/**\n+     * @see #shouldMatchByLine(String, String, String)\n+     *\/\n+    public OutputAnalyzer shouldMatchByLine(String pattern) {\n+        return shouldMatchByLine(null, null, pattern);\n+    }\n+\n+    \/**\n+     * @see #stdoutShouldMatchByLine(String, String, String)\n+     *\/\n+    public OutputAnalyzer stdoutShouldMatchByLine(String pattern) {\n+        return stdoutShouldMatchByLine(null, null, pattern);\n+    }\n+\n+    \/**\n+     * @see #shouldMatchByLine(String, String, String)\n+     *\/\n+    public OutputAnalyzer shouldMatchByLineFrom(String from, String pattern) {\n+        return shouldMatchByLine(from, null, pattern);\n+    }\n+\n+    \/**\n+     * @see #shouldMatchByLine(String, String, String)\n+     *\/\n+    public OutputAnalyzer shouldMatchByLineTo(String to, String pattern) {\n+        return shouldMatchByLine(null, to, pattern);\n+    }\n+\n+    \/**\n+     * Verify that the stdout and stderr contents of output buffer match the\n+     * {@code pattern} line by line. The whole output could be matched or\n+     * just a subset of it.\n+     *\n+     * @param from\n+     *            The line (excluded) from where output will be matched.\n+     *            Set {@code from} to null for matching from the first line.\n+     * @param to\n+     *            The line (excluded) until where output will be matched.\n+     *            Set {@code to} to null for matching until the last line.\n+     * @param pattern\n+     *            Matching pattern\n+     *\/\n+    public OutputAnalyzer shouldMatchByLine(String from, String to, String pattern) {\n+        return shouldMatchByLine(getOutput(), from, to, pattern);\n+    }\n+\n+    \/**\n+     * Verify that the stdout contents of output buffer matches the\n+     * {@code pattern} line by line. The whole stdout could be matched or\n+     * just a subset of it.\n+     *\n+     * @param from\n+     *            The line (excluded) from where stdout will be matched.\n+     *            Set {@code from} to null for matching from the first line.\n+     * @param to\n+     *            The line (excluded) until where stdout will be matched.\n+     *            Set {@code to} to null for matching until the last line.\n+     * @param pattern\n+     *            Matching pattern\n+     *\/\n+    public OutputAnalyzer stdoutShouldMatchByLine(String from, String to, String pattern) {\n+        return shouldMatchByLine(getStdout(), from, to, pattern);\n+    }\n+\n+    private OutputAnalyzer shouldMatchByLine(String buffer, String from, String to, String pattern) {\n+        List<String> lines = asLines(buffer);\n+\n+        int fromIndex = 0;\n+        if (from != null) {\n+            fromIndex = indexOf(lines, from, 0) + 1; \/\/ + 1 -> apply 'pattern' to lines after 'from' match\n+            Asserts.assertGreaterThan(fromIndex, 0,\n+                    \"The line\/pattern '\" + from + \"' from where the output should match can not be found\");\n+        }\n+\n+        int toIndex = lines.size();\n+        if (to != null) {\n+            toIndex = indexOf(lines, to, fromIndex);\n+            Asserts.assertGreaterThan(toIndex, fromIndex,\n+                    \"The line\/pattern '\" + to + \"' until where the output should match can not be found\");\n+        }\n+\n+        List<String> subList = lines.subList(fromIndex, toIndex);\n+        Asserts.assertFalse(subList.isEmpty(), \"There are no lines to check:\"\n+                + \" range \" + fromIndex + \"..\" + toIndex + \", subList = \" + subList);\n+\n+        subList.stream()\n+               .filter(Pattern.compile(pattern).asPredicate().negate())\n+               .findAny()\n+               .ifPresent(line -> Asserts.fail(\n+                       \"The line '\" + line + \"' does not match pattern '\" + pattern + \"'\"));\n+\n+        return this;\n+    }\n+\n+    \/**\n+     * Check if there is a line matching {@code regexp} and return its index\n+     *\n+     * @param regexp Matching pattern\n+     * @param fromIndex Start matching after so many lines skipped\n+     * @return Index of first matching line\n+     *\/\n+    private int indexOf(List<String> lines, String regexp, int fromIndex) {\n+        Pattern pattern = Pattern.compile(regexp);\n+        for (int i = fromIndex; i < lines.size(); i++) {\n+            if (pattern.matcher(lines.get(i)).matches()) {\n+                return i;\n+            }\n+        }\n+        return -1;\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputAnalyzer.java","additions":196,"deletions":63,"binary":false,"changes":259,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,5 @@\n-public class OutputBuffer {\n-  private final String stdout;\n-  private final String stderr;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n@@ -30,10 +32,7 @@\n-  \/**\n-   * Create an OutputBuffer, a class for storing and managing stdout and stderr\n-   * results separately\n-   *\n-   * @param stdout stdout result\n-   * @param stderr stderr result\n-   *\/\n-  public OutputBuffer(String stdout, String stderr) {\n-    this.stdout = stdout;\n-    this.stderr = stderr;\n+public interface OutputBuffer {\n+  public static class OutputBufferException extends RuntimeException {\n+    private static final long serialVersionUID = 8528687792643129571L;\n+\n+    public OutputBufferException(Throwable cause) {\n+      super(cause);\n+    }\n@@ -47,4 +46,1 @@\n-  public String getStdout() {\n-    return stdout;\n-  }\n-\n+  public String getStdout();\n@@ -56,2 +52,94 @@\n-  public String getStderr() {\n-    return stderr;\n+  public String getStderr();\n+  public int getExitValue();\n+\n+  public static OutputBuffer of(Process p) {\n+    return new LazyOutputBuffer(p);\n+  }\n+\n+  public static OutputBuffer of(String stdout, String stderr, int exitValue) {\n+    return new EagerOutputBuffer(stdout, stderr, exitValue);\n+  }\n+\n+  public static OutputBuffer of(String stdout, String stderr) {\n+    return of(stdout, stderr, -1);\n+  }\n+\n+  class LazyOutputBuffer implements OutputBuffer {\n+    private static class StreamTask {\n+      private final ByteArrayOutputStream buffer;\n+      private final Future<Void> future;\n+\n+      private StreamTask(InputStream stream) {\n+        this.buffer = new ByteArrayOutputStream();\n+        this.future = new StreamPumper(stream, buffer).process();\n+      }\n+\n+      public String get() {\n+        try {\n+          future.get();\n+          return buffer.toString();\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+          throw new OutputBufferException(e);\n+        } catch (ExecutionException | CancellationException e) {\n+          throw new OutputBufferException(e);\n+        }\n+      }\n+    }\n+\n+    private final StreamTask outTask;\n+    private final StreamTask errTask;\n+    private final Process p;\n+\n+    private LazyOutputBuffer(Process p) {\n+      this.p = p;\n+      outTask = new StreamTask(p.getInputStream());\n+      errTask = new StreamTask(p.getErrorStream());\n+    }\n+\n+    @Override\n+    public String getStdout() {\n+      return outTask.get();\n+    }\n+\n+    @Override\n+    public String getStderr() {\n+      return errTask.get();\n+    }\n+\n+    @Override\n+    public int getExitValue() {\n+      try {\n+        return p.waitFor();\n+      } catch (InterruptedException e) {\n+        Thread.currentThread().interrupt();\n+        throw new OutputBufferException(e);\n+      }\n+    }\n+  }\n+\n+  class EagerOutputBuffer implements OutputBuffer {\n+    private final String stdout;\n+    private final String stderr;\n+    private final int exitValue;\n+\n+    private EagerOutputBuffer(String stdout, String stderr, int exitValue) {\n+      this.stdout = stdout;\n+      this.stderr = stderr;\n+      this.exitValue = exitValue;\n+    }\n+\n+    @Override\n+    public String getStdout() {\n+      return stdout;\n+    }\n+\n+    @Override\n+    public String getStderr() {\n+      return stderr;\n+    }\n+\n+    @Override\n+    public int getExitValue() {\n+      return exitValue;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/process\/OutputBuffer.java","additions":108,"deletions":20,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.io.ByteArrayOutputStream;\n@@ -67,44 +66,0 @@\n-    \/**\n-     * Pumps stdout and stderr from running the process into a String.\n-     *\n-     * @param processBuilder ProcessBuilder to run.\n-     * @return Output from process.\n-     * @throws IOException If an I\/O error occurs.\n-     *\/\n-    public static OutputBuffer getOutput(ProcessBuilder processBuilder) throws IOException {\n-        return getOutput(privilegedStart(processBuilder));\n-    }\n-\n-    \/**\n-     * Pumps stdout and stderr the running process into a String.\n-     *\n-     * @param process Process to pump.\n-     * @return Output from process.\n-     * @throws IOException If an I\/O error occurs.\n-     *\/\n-    public static OutputBuffer getOutput(Process process) throws IOException {\n-        ByteArrayOutputStream stderrBuffer = new ByteArrayOutputStream();\n-        ByteArrayOutputStream stdoutBuffer = new ByteArrayOutputStream();\n-        StreamPumper outPumper = new StreamPumper(process.getInputStream(), stdoutBuffer);\n-        StreamPumper errPumper = new StreamPumper(process.getErrorStream(), stderrBuffer);\n-        Thread outPumperThread = new Thread(outPumper);\n-        Thread errPumperThread = new Thread(errPumper);\n-\n-        outPumperThread.setDaemon(true);\n-        errPumperThread.setDaemon(true);\n-\n-        outPumperThread.start();\n-        errPumperThread.start();\n-\n-        try {\n-            process.waitFor();\n-            outPumperThread.join();\n-            errPumperThread.join();\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            return null;\n-        }\n-\n-        return new OutputBuffer(stdoutBuffer.toString(), stderrBuffer.toString());\n-    }\n-\n@@ -395,0 +350,12 @@\n+        return executeProcess(pb, null);\n+    }\n+\n+    \/**\n+     * Executes a process, pipe some text into its STDIN, waits for it\n+     * to finish and returns the process output. The process will have exited\n+     * before this method returns.\n+     * @param pb The ProcessBuilder to execute.\n+     * @param input The text to pipe into STDIN. Can be null.\n+     * @return The {@linkplain OutputAnalyzer} instance wrapping the process.\n+     *\/\n+    public static OutputAnalyzer executeProcess(ProcessBuilder pb, String input) throws Exception {\n@@ -400,0 +367,6 @@\n+            if (input != null) {\n+               try (PrintStream ps = new PrintStream(p.getOutputStream())) {\n+                   ps.print(input);\n+               }\n+            }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":18,"deletions":45,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    abstract public static class Pump {\n+    public abstract static class Pump {\n@@ -51,1 +51,1 @@\n-    final public static class StreamPump extends Pump {\n+    public final static class StreamPump extends Pump {\n@@ -66,1 +66,1 @@\n-    abstract public static class LinePump extends Pump {\n+    public abstract static class LinePump extends Pump {\n@@ -72,1 +72,1 @@\n-        abstract protected void processLine(String line);\n+        protected abstract void processLine(String line);\n@@ -80,1 +80,0 @@\n-    private final FutureTask<Void> processingTask = new FutureTask<>(this, null);\n@@ -111,1 +110,1 @@\n-                for(OutputStream out : outStreams) {\n+                for (OutputStream out : outStreams) {\n@@ -128,3 +127,1 @@\n-                                linePumps.stream().forEach((lp) -> {\n-                                    lp.processLine(line);\n-                                });\n+                                linePumps.forEach((lp) -> lp.processLine(line));\n@@ -152,1 +149,1 @@\n-            for(OutputStream out : outStreams) {\n+            for (OutputStream out : outStreams) {\n@@ -171,1 +168,1 @@\n-    final public StreamPumper addPump(Pump ... pump) {\n+    public final StreamPumper addPump(Pump ... pump) {\n@@ -176,1 +173,1 @@\n-        for(Pump p : pump) {\n+        for (Pump p : pump) {\n@@ -182,1 +179,1 @@\n-    final public Future<Void> process() {\n+    public final Future<Void> process() {\n@@ -186,6 +183,2 @@\n-        Thread t = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                processingTask.run();\n-            }\n-        });\n+        FutureTask<Void> result = new FutureTask<>(this, null);\n+        Thread t = new Thread(result);\n@@ -195,1 +188,1 @@\n-        return processingTask;\n+        return result;\n","filename":"test\/lib\/jdk\/test\/lib\/process\/StreamPumper.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"}]}