{"files":[{"patch":"@@ -38,0 +38,2 @@\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n@@ -46,1 +48,0 @@\n-import java.nio.file.Path;\n@@ -48,0 +49,1 @@\n+import java.nio.file.Path;\n@@ -50,1 +52,0 @@\n-import java.util.Arrays;\n@@ -52,0 +53,1 @@\n+import java.util.Arrays;\n@@ -60,0 +62,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -62,1 +65,0 @@\n-import java.util.jar.Manifest;\n@@ -64,1 +66,1 @@\n-import java.util.concurrent.TimeUnit;\n+import java.util.jar.Manifest;\n@@ -67,0 +69,1 @@\n+\n@@ -71,2 +74,0 @@\n-import static java.nio.charset.StandardCharsets.UTF_8;\n-\n@@ -182,1 +183,1 @@\n-        boolean failed = generateReport(tsaList, signItems);\n+        boolean failed = generateReport(jdkInfoList, tsaList, signItems);\n@@ -418,0 +419,1 @@\n+        int index = 0;\n@@ -423,0 +425,3 @@\n+                jdkInfo.index = index++;\n+                jdkInfo.version = String.format(\n+                        \"%s(%d)\", jdkInfo.version, jdkInfo.index);\n@@ -911,1 +916,1 @@\n-    private static boolean generateReport(List<TsaInfo> tsaList,\n+    private static boolean generateReport(List<JdkInfo> jdkList, List<TsaInfo> tsaList,\n@@ -918,0 +923,9 @@\n+\n+        \/\/ Generates JDK list\n+        report.append(\"JDK list:\\n\");\n+        for(JdkInfo jdkInfo : jdkList) {\n+            report.append(String.format(\"%d=%s%n\",\n+                    jdkInfo.index,\n+                    jdkInfo.runtimeVersion));\n+        }\n+\n@@ -1027,0 +1041,1 @@\n+        private int index;\n@@ -1029,1 +1044,2 @@\n-        private final String version;\n+        private final String runtimeVersion;\n+        private String version;\n@@ -1037,2 +1053,3 @@\n-            version = execJdkUtils(jdkPath, JdkUtils.M_JAVA_RUNTIME_VERSION);\n-            if (version == null || version.isBlank()) {\n+            jarsignerPath = jarsignerPath(jdkPath);\n+            runtimeVersion = execJdkUtils(jdkPath, JdkUtils.M_JAVA_RUNTIME_VERSION);\n+            if (runtimeVersion == null || runtimeVersion.isBlank()) {\n@@ -1042,3 +1059,3 @@\n-            majorVersion = Integer.parseInt((version.matches(\"^1[.].*\") ?\n-                 version.substring(2) : version).replaceAll(\"[^0-9].*$\", \"\"));\n-            jarsignerPath = jarsignerPath(jdkPath);\n+            version = execJdkUtils(jdkPath, JdkUtils.M_JAVA_VERSION);\n+            majorVersion = Integer.parseInt((runtimeVersion.matches(\"^1[.].*\") ?\n+                    runtimeVersion.substring(2) : runtimeVersion).replaceAll(\"[^0-9].*$\", \"\"));\n@@ -1076,1 +1093,1 @@\n-                    + ((version == null) ? 0 : version.hashCode());\n+                    + ((runtimeVersion == null) ? 0 : runtimeVersion.hashCode());\n@@ -1089,2 +1106,2 @@\n-            if (version == null) {\n-                if (other.version != null)\n+            if (runtimeVersion == null) {\n+                if (other.runtimeVersion != null)\n@@ -1092,1 +1109,1 @@\n-            } else if (!version.equals(other.version))\n+            } else if (!runtimeVersion.equals(other.runtimeVersion))\n@@ -1099,1 +1116,1 @@\n-            return \"JdkInfo[\" + version + \", \" + jdkPath + \"]\";\n+            return \"JdkInfo[\" + runtimeVersion + \", \" + jdkPath + \"]\";\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/Compatibility.java","additions":36,"deletions":19,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    static final String M_JAVA_VERSION = \"javaVersion\";\n@@ -45,0 +46,5 @@\n+    static String javaVersion() {\n+        return System.getProperty(\"java.version\");\n+    }\n+\n+    \/\/ Returns the JDK build runtime version.\n@@ -66,1 +72,3 @@\n-        if (M_JAVA_RUNTIME_VERSION.equals(args[0])) {\n+        if (M_JAVA_VERSION.equals(args[0])) {\n+            System.out.print(javaVersion());\n+        } else if (M_JAVA_RUNTIME_VERSION.equals(args[0])) {\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/JdkUtils.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}