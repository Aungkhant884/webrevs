{"files":[{"patch":"@@ -31,1 +31,1 @@\n- * @run main\/othervm -Xmx256m -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM compiler.loopopts.TestRangeCheckPredicatesControl\n+ * @run main\/othervm -Xmx256m -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:+StressGCM compiler.loopopts.TestRangeCheckPredicatesControl\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestRangeCheckPredicatesControl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xcomp -XX:-PartialPeelLoop -XX:CompileCommand=compileonly,compiler.loopopts.TestUnswitchCloneSkeletonPredicates::*\n+ * @run main\/othervm -Xcomp -XX:+IgnoreUnrecognizedVMOptions -XX:-PartialPeelLoop -XX:CompileCommand=compileonly,compiler.loopopts.TestUnswitchCloneSkeletonPredicates::*\n@@ -32,1 +32,1 @@\n- * @run main\/othervm -XX:-PartialPeelLoop compiler.loopopts.TestUnswitchCloneSkeletonPredicates\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-PartialPeelLoop compiler.loopopts.TestUnswitchCloneSkeletonPredicates\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestUnswitchCloneSkeletonPredicates.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @run main\/othervm -XX:-BackgroundCompilation -XX:+UseCountedLoopSafepoints -XX:LoopStripMiningIter=2 -XX:-TieredCompilation TestVectorsNotSavedAtSafepoint test1\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:+IgnoreUnrecognizedVMOptions -XX:+UseCountedLoopSafepoints -XX:LoopStripMiningIter=2 -XX:-TieredCompilation TestVectorsNotSavedAtSafepoint test1\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestVectorsNotSavedAtSafepoint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8072452\n+ * @bug 8072452 8163498\n@@ -28,0 +28,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see SupportedDHParamGensLongKey.java)\n@@ -33,1 +36,0 @@\n- * @run main\/timeout=700 SupportedDHParamGens 3072\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KeyAgreement\/SupportedDHParamGens.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8072452\n+ * @bug 8072452 8163498\n@@ -28,0 +28,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see SupportedDSAParamGenLongKey.java)\n@@ -31,1 +34,0 @@\n- * @run main\/timeout=700 SupportedDSAParamGen 3072 256\n","filename":"test\/jdk\/sun\/security\/provider\/DSA\/SupportedDSAParamGen.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n- * @bug 8075286\n+ * @bug 8075286 8163498\n@@ -42,0 +42,3 @@\n+ *          This test has been split based on lower\/higher key sizes in order to\n+ *          reduce individual execution times and run in parallel\n+ *          (see TestDSAGenParameterSpecLongKey.java)\n@@ -49,2 +52,0 @@\n- * @run main\/timeout=700 TestDSAGenParameterSpec 3072 256 true\n- * @run main TestDSAGenParameterSpec 4096 256\n","filename":"test\/jdk\/sun\/security\/provider\/NSASuiteB\/TestDSAGenParameterSpec.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.test.lib.Asserts;\n@@ -37,2 +38,4 @@\n- * @bug 8044199 8146293\n- * @summary Create a signature for RSA and get its signed data. re-initiate\n+ * @bug 8044199 8146293 8163498\n+ * @summary Ensure keys created from KeyFactory::getKeySpec and from constructors\n+ *          are equal.\n+ *          Create a signature for RSA and get its signed data. re-initiate\n@@ -41,1 +44,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib ..\/tools\/keytool\/fakegen\n@@ -43,0 +46,1 @@\n+ * @build java.base\/sun.security.rsa.RSAKeyPairGenerator\n@@ -136,0 +140,14 @@\n+                RSAPublicKeySpec pubKeySpec1 = kf.getKeySpec(key, RSAPublicKeySpec.class);\n+                RSAPublicKeySpec pubKeySpec2 = new RSAPublicKeySpec(\n+                        ((RSAPublicKey) key).getModulus(),\n+                        ((RSAPublicKey) key).getPublicExponent());\n+\n+                Asserts.assertTrue(keySpecEquals(pubKeySpec1, pubKeySpec2),\n+                        \"Both RSAPublicKeySpec should be equal\");\n+\n+                X509EncodedKeySpec x509KeySpec1 = kf.getKeySpec(key, X509EncodedKeySpec.class);\n+                X509EncodedKeySpec x509KeySpec2 = new X509EncodedKeySpec(key.getEncoded());\n+\n+                Asserts.assertTrue(encodedKeySpecEquals(x509KeySpec1, x509KeySpec2),\n+                        \"Both X509EncodedKeySpec should be equal\");\n+\n@@ -137,5 +155,3 @@\n-                    kf.generatePublic(kf.getKeySpec(key, RSAPublicKeySpec.class)),\n-                    kf.generatePublic(new X509EncodedKeySpec(key.getEncoded())),\n-                    kf.generatePublic(new RSAPublicKeySpec(\n-                    ((RSAPublicKey) key).getModulus(),\n-                    ((RSAPublicKey) key).getPublicExponent()))\n+                        key,\n+                        kf.generatePublic(pubKeySpec1),\n+                        kf.generatePublic(x509KeySpec1)\n@@ -150,0 +166,14 @@\n+                RSAPrivateKeySpec privKeySpec1 = kf.getKeySpec(key, RSAPrivateKeySpec.class);\n+                RSAPrivateKeySpec privKeySpec2 = new RSAPrivateKeySpec(\n+                        ((RSAPrivateKey) key).getModulus(),\n+                        ((RSAPrivateKey) key).getPrivateExponent());\n+\n+                Asserts.assertTrue(keySpecEquals(privKeySpec1, privKeySpec2),\n+                        \"Both RSAPrivateKeySpec should be equal\");\n+\n+                PKCS8EncodedKeySpec pkcsKeySpec1 = kf.getKeySpec(key, PKCS8EncodedKeySpec.class);\n+                PKCS8EncodedKeySpec pkcsKeySpec2 = new PKCS8EncodedKeySpec(key.getEncoded());\n+\n+                Asserts.assertTrue(encodedKeySpecEquals(pkcsKeySpec1, pkcsKeySpec2),\n+                        \"Both PKCS8EncodedKeySpec should be equal\");\n+\n@@ -151,6 +181,3 @@\n-                    kf.generatePrivate(kf.getKeySpec(key,\n-                    RSAPrivateKeySpec.class)),\n-                    kf.generatePrivate(new PKCS8EncodedKeySpec(\n-                    key.getEncoded())),\n-                    kf.generatePrivate(new RSAPrivateKeySpec(((RSAPrivateKey) key).getModulus(),\n-                    ((RSAPrivateKey) key).getPrivateExponent()))\n+                        key,\n+                        kf.generatePrivate(privKeySpec1),\n+                        kf.generatePrivate(pkcsKeySpec1)\n@@ -200,0 +227,18 @@\n+\n+    private static boolean keySpecEquals(RSAPublicKeySpec spec1, RSAPublicKeySpec spec2) {\n+        return spec1.getModulus().equals(spec2.getModulus())\n+                && spec1.getPublicExponent().equals(spec2.getPublicExponent())\n+                && Objects.equals(spec1.getParams(), spec2.getParams());\n+    }\n+\n+    private static boolean keySpecEquals(RSAPrivateKeySpec spec1, RSAPrivateKeySpec spec2) {\n+        return spec1.getModulus().equals(spec2.getModulus())\n+                && spec1.getPrivateExponent().equals(spec2.getPrivateExponent())\n+                && Objects.equals(spec1.getParams(), spec2.getParams());\n+    }\n+\n+    private static boolean encodedKeySpecEquals(EncodedKeySpec spec1, EncodedKeySpec spec2) {\n+        return Objects.equals(spec1.getAlgorithm(), spec2.getAlgorithm())\n+                && spec1.getFormat().equals(spec2.getFormat())\n+                && Arrays.equals(spec1.getEncoded(), spec2.getEncoded());\n+    }\n","filename":"test\/jdk\/sun\/security\/rsa\/SignatureTest.java","additions":60,"deletions":15,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,0 +123,16 @@\n+            case 512:\n+                p = new BigInteger(\"8020197120481219323433199611941970\" +\n+                        \"7343202627066030554371666273840736868057027\");\n+\n+                q = new BigInteger(\"1034972075609195648369724560234440\" +\n+                        \"70295399787770567842730763283716564384306019\");\n+                break;\n+            case 768:\n+                p = new BigInteger(\"3014340057405340213534944319905083\" +\n+                        \"307463736669377067548946180566257416015519309\" +\n+                        \"4284652308891881268862122066025991763\");\n+\n+                q = new BigInteger(\"2296482383752927761663381890127318\" +\n+                        \"246354728737890494883686642246681037847109357\" +\n+                        \"2243186228256258231783150577032535521\");\n+                break;\n@@ -234,0 +250,84 @@\n+            case 5120:\n+                p = new BigInteger(\"3832424741858359087085019371467455\" +\n+                        \"477820253497664907405863412466091484202728975\" +\n+                        \"073716151647542449749677812957312366114168136\" +\n+                        \"601126462176029012452318767677007998900979141\" +\n+                        \"998941420505000455608776648534383479255437038\" +\n+                        \"823585008944551642245975099397794466252853815\" +\n+                        \"203014018988068346182132859181656248769392421\" +\n+                        \"674329339264774434516306264105498304974256178\" +\n+                        \"026250495864309250770172644263271598862641423\" +\n+                        \"631834585580910907527816840629665632700476957\" +\n+                        \"043059773597106256672930878739201142231424811\" +\n+                        \"069114153595397879660681041405350927706894635\" +\n+                        \"213653200929550087449740488813888141436925212\" +\n+                        \"442118365403614623169477625363286007075561882\" +\n+                        \"667104018888315477880055907473210438614579462\" +\n+                        \"496680112778003198202297772073923181825706950\" +\n+                        \"337756420826065243712623977225389265073815099\" +\n+                        \"11493486387569031\");\n+\n+                q = new BigInteger(\"4146920568848191633539637174274014\" +\n+                        \"273474016268898436739861681496795368277264211\" +\n+                        \"347843247126933726314115942365962498640261418\" +\n+                        \"205807625467516350689984100345264883329988411\" +\n+                        \"779552170850267866351632396757500932855514738\" +\n+                        \"069918613980688598735820287717773558232108195\" +\n+                        \"582003010318600589422737510968348435291394630\" +\n+                        \"302856598706075108993749783272560317909096664\" +\n+                        \"669346475063020551195971583247945204761628694\" +\n+                        \"928169578936651221139603528255637489949563762\" +\n+                        \"679333707194876390341639312682559633604823162\" +\n+                        \"011775857712214779083777623361101169846144970\" +\n+                        \"895460110829130520744350827300192454548398367\" +\n+                        \"308247776459836067815323028595970305077016546\" +\n+                        \"572729562552659889374473339319508744706500295\" +\n+                        \"871005194700994677334996554312946263536447080\" +\n+                        \"506480369599180714418422948431890690584559846\" +\n+                        \"74443760221378817\");\n+                break;\n+            case 6144:\n+                p = new BigInteger(\"4116778174071734089881578561570208\" +\n+                        \"284278483208207611885263908178511953898663059\" +\n+                        \"734920127853932340647715543357847246656399270\" +\n+                        \"584421304381161243387321196180504266791989629\" +\n+                        \"037762533723859313828066684108658077147663308\" +\n+                        \"349610753424620992228874944364889251603796733\" +\n+                        \"651690820777521473807836887101380451450340893\" +\n+                        \"342182241046213770274098088066973392388380321\" +\n+                        \"597140066726105421813589290486721393630060991\" +\n+                        \"762786515266517210263824648882183969111257670\" +\n+                        \"482546599227987866663009035297583354975557124\" +\n+                        \"885067375690161316321537733738836231124022045\" +\n+                        \"342294989201664821765828714777945420537586846\" +\n+                        \"048441021936371397157175119512813296245432265\" +\n+                        \"178387966306100222317125784086707249132094899\" +\n+                        \"996583841504000177878867233453992573758531314\" +\n+                        \"930995997084778704191508142386227640558575022\" +\n+                        \"133615865313158902645671060856578407704407774\" +\n+                        \"541333134066077091323113676552873589627627108\" +\n+                        \"360212137049807676300972916221155242551418611\" +\n+                        \"845736012720292530472299883528545969\");\n+\n+                q = new BigInteger(\"4309839393870191337347865939376524\" +\n+                        \"576203152274153819273872971875048034824772989\" +\n+                        \"396672731779116057590220960038178464518939532\" +\n+                        \"420543642549157490693480032819877624270041000\" +\n+                        \"978557189754354533164374250973267430850549095\" +\n+                        \"826504764380972668230808804187197733712467810\" +\n+                        \"336183971273199424298548393174475795085431856\" +\n+                        \"013835093176229700961388036392126193800974224\" +\n+                        \"471901942503594710577458613014825799700253747\" +\n+                        \"894059557606488589338390076087557449706202211\" +\n+                        \"490152794976124198853288767811370937925352946\" +\n+                        \"840084185059748423462857292189804953877120675\" +\n+                        \"812342626896129968757865091819031550949977046\" +\n+                        \"088481307609680346652447103811683263607048407\" +\n+                        \"341877388569162602224005230757828237769174382\" +\n+                        \"379831366827054223659952996908127997873168014\" +\n+                        \"060581963520521443425267958786876837371303659\" +\n+                        \"489061589736155453144095545148190985660891326\" +\n+                        \"576261326549991792303912873247304434509759694\" +\n+                        \"274088584815015779154382635174538158301861164\" +\n+                        \"439921681110768794043391613853281233\");\n+                break;\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/fakegen\/java.base\/sun\/security\/rsa\/RSAKeyPairGenerator.java","additions":101,"deletions":1,"binary":false,"changes":102,"status":"modified"}]}