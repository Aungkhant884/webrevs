{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -651,0 +651,4 @@\n+        return lookupPackage(msym, flatName, false);\n+    }\n+\n+    private PackageSymbol lookupPackage(ModuleSymbol msym, Name flatName, boolean onlyExisting) {\n@@ -673,1 +677,1 @@\n-        if (pack != null && pack.exists())\n+        if ((pack != null && pack.exists()) || onlyExisting)\n@@ -745,1 +749,2 @@\n-        return lookupPackage(msym, fullname).exists();\n+        PackageSymbol pack = lookupPackage(msym, fullname, true);\n+        return pack != null && pack.exists();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8133884 8162711 8133896 8172158 8172262 8173636 8175119 8189747\n+ * @bug 8133884 8162711 8133896 8172158 8172262 8173636 8175119 8189747 8263432\n@@ -47,0 +47,1 @@\n+import java.util.Collection;\n@@ -81,0 +82,1 @@\n+import javax.tools.ForwardingJavaFileManager;\n@@ -1554,0 +1556,95 @@\n+    @Test\n+    public void testClassPhantomPackageClash(Path base) throws Exception {\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src,\n+                          \"module m {}\",\n+                          \"package api; public class Nested {}\",\n+                          \"package api.nested; public class C {}\");\n+\n+        class TestFileManager extends ForwardingJavaFileManager<JavaFileManager>\n+                              implements StandardJavaFileManager {\n+\n+            public TestFileManager(StandardJavaFileManager fileManager) {\n+                super(fileManager);\n+            }\n+\n+            @Override\n+            public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException {\n+                if (\"api.Nested\".equals(packageName)) {\n+                    \/\/simulate case insensitive filesystem:\n+                    packageName = \"api.nested\";\n+                }\n+                return super.list(location, packageName, kinds, recurse);\n+            }\n+\n+            @Override\n+            public void setLocationFromPaths(Location location, Collection<? extends Path> paths) throws IOException {\n+                ((StandardJavaFileManager) fileManager).setLocationFromPaths(location, paths);\n+            }\n+\n+            @Override\n+            public Iterable<? extends Path> getLocationAsPaths(Location location) {\n+                return ((StandardJavaFileManager) fileManager).getLocationAsPaths(location);\n+            }\n+\n+            @Override\n+            public Iterable<? extends JavaFileObject> getJavaFileObjectsFromFiles(Iterable<? extends File> files) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public Iterable<? extends JavaFileObject> getJavaFileObjects(File... files) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public Iterable<? extends JavaFileObject> getJavaFileObjectsFromStrings(Iterable<String> names) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public Iterable<? extends JavaFileObject> getJavaFileObjects(String... names) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public void setLocation(Location location, Iterable<? extends File> files) throws IOException {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public Iterable<? extends File> getLocation(Location location) {\n+                throw new UnsupportedOperationException();\n+            }\n+        }\n+\n+        try (StandardJavaFileManager fm = ToolProvider.getSystemJavaCompiler().getStandardFileManager(null, null, null);\n+             JavaFileManager testFM = new TestFileManager(fm)) {\n+            new JavacTask(tb)\n+                .fileManager(testFM)\n+                .options(\"-processor\", NoOpTestAP.class.getName(),\n+                         \"-sourcepath\", src.toString())\n+                .outdir(classes)\n+                .files(src.resolve(\"module-info.java\"),\n+                       src.resolve(\"api\").resolve(\"Nested.java\"))\n+                .run()\n+                .writeAll()\n+                .getOutputLines(OutputKind.STDERR);\n+        }\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static final class NoOpTestAP extends AbstractProcessor {\n+\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n+\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationProcessing.java","additions":99,"deletions":2,"binary":false,"changes":101,"status":"modified"}]}