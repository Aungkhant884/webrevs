{"files":[{"patch":"@@ -6089,12 +6089,0 @@\n-  if (DumpSharedSpaces && _major_version < JAVA_6_VERSION) {\n-    ResourceMark rm;\n-    warning(\"Pre JDK 6 class not supported by CDS: %u.%u %s\",\n-            _major_version,  _minor_version, _class_name->as_C_string());\n-    Exceptions::fthrow(\n-      THREAD_AND_LOCATION,\n-      vmSymbols::java_lang_UnsupportedClassVersionError(),\n-      \"Unsupported major.minor version for dump time %u.%u\",\n-      _major_version,\n-      _minor_version);\n-  }\n-\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -262,1 +262,3 @@\n-    !klass->is_shared() &&\n+    \/\/ However, bytecodes for shared old classes can be verified because\n+    \/\/ they have not been rewritten.\n+    !(klass->is_shared() && klass->is_rewritten()) &&\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -569,2 +569,3 @@\n-  if (!DumpSharedSpaces) {\n-    assert(!klass->is_shared(), \"archive methods must not be rewritten at run time\");\n+  if (klass->is_shared()) {\n+    assert(!klass->is_rewritten(), \"rewritten shared classes cannot be rewritten again\");\n+    assert(!klass->can_be_verified_at_dumptime(), \"only shared old classes aren't rewritten\");\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -557,1 +557,3 @@\n-        rewrite_nofast_bytecode(m);\n+        if (!MetaspaceShared::is_old_class(ik)) {\n+          rewrite_nofast_bytecode(m);\n+        }\n@@ -1593,2 +1595,3 @@\n-      _made_progress |= MetaspaceShared::try_link_class(ik, THREAD);\n-      guarantee(!HAS_PENDING_EXCEPTION, \"exception in link_class\");\n+      if (!MetaspaceShared::is_old_class(ik)) {\n+        _made_progress |= MetaspaceShared::try_link_class(ik, THREAD);\n+        guarantee(!HAS_PENDING_EXCEPTION, \"exception in link_class\");\n@@ -1596,1 +1599,2 @@\n-      ik->constants()->resolve_class_constants(THREAD);\n+        ik->constants()->resolve_class_constants(THREAD);\n+      }\n@@ -1615,0 +1619,23 @@\n+\/\/ Check if a class or its super class\/interface is old.\n+bool MetaspaceShared::is_old_class(InstanceKlass* ik) {\n+  if (ik == NULL) {\n+    return false;\n+  }\n+  if (ik->major_version() < 50 \/*JAVA_6_VERSION*\/) {\n+    return true;\n+  }\n+  if (is_old_class(ik->java_super())) {\n+    return true;\n+  }\n+  Array<Klass*>* interfaces = ik->local_interfaces();\n+  int len = interfaces->length();\n+  for (int i = 0; i < len; i++) {\n+    Klass* k = interfaces->at(i);\n+    InstanceKlass* ik = InstanceKlass::cast(k);\n+    if (is_old_class(ik)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -1773,1 +1800,1 @@\n-  if (ik->init_state() < InstanceKlass::linked) {\n+  if (ik->init_state() < InstanceKlass::linked && !MetaspaceShared::is_old_class(ik)) {\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -228,0 +228,1 @@\n+  static bool is_old_class(InstanceKlass* ik);\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -408,2 +408,5 @@\n-\n-  it->push(&_constants);\n+  if (!method()->method_holder()->is_rewritten()) {\n+    it->push(&_constants, MetaspaceClosure::_writable);\n+  } else {\n+    it->push(&_constants);\n+  }\n@@ -543,0 +546,19 @@\n+\n+AdapterHandlerEntry* ConstMethod::adapter() {\n+  if (is_shared() && !_constants->pool_holder()->is_shared_old_klass()) {\n+    return *_adapter_trampoline;\n+  } else {\n+    return _adapter;\n+  }\n+}\n+\n+void ConstMethod::update_adapter_trampoline(AdapterHandlerEntry* adapter) {\n+  assert(is_shared() && !_constants->pool_holder()->is_shared_old_klass()(), \"must be\");\n+  *_adapter_trampoline = adapter;\n+  assert(this->adapter() == adapter, \"must be\");\n+}\n+\n+void ConstMethod::set_adapter_entry(AdapterHandlerEntry* adapter) {\n+  assert(!(is_shared() && !_constants->pool_holder()->is_shared_old_klass()()), \"shared methods have fixed adapter_trampoline\");\n+  _adapter = adapter;\n+}\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -292,4 +292,1 @@\n-  void set_adapter_entry(AdapterHandlerEntry* adapter) {\n-    assert(!is_shared(), \"shared methods have fixed adapter_trampoline\");\n-    _adapter = adapter;\n-  }\n+  void set_adapter_entry(AdapterHandlerEntry* adapter);\n@@ -301,13 +298,2 @@\n-  void update_adapter_trampoline(AdapterHandlerEntry* adapter) {\n-    assert(is_shared(), \"must be\");\n-    *_adapter_trampoline = adapter;\n-    assert(this->adapter() == adapter, \"must be\");\n-  }\n-  AdapterHandlerEntry* adapter() {\n-    if (is_shared()) {\n-      return *_adapter_trampoline;\n-    } else {\n-      return _adapter;\n-    }\n-  }\n-\n+  void update_adapter_trampoline(AdapterHandlerEntry* adapter);\n+  AdapterHandlerEntry* adapter();\n","filename":"src\/hotspot\/share\/oops\/constMethod.hpp","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -329,0 +329,3 @@\n+  if (!_pool_holder->is_linked() && !_pool_holder->is_rewritten()) {\n+    return;\n+  }\n@@ -365,0 +368,3 @@\n+  if (!_pool_holder->is_linked() && _pool_holder->is_shared_old_klass()) {\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2243,1 +2243,5 @@\n-  it->push(&_constants);\n+  if (!is_rewritten()) {\n+    it->push(&_constants, MetaspaceClosure::_writable);\n+  } else {\n+    it->push(&_constants);\n+  }\n@@ -2249,1 +2253,5 @@\n-  it->push(&_methods);\n+  if (!is_rewritten()) {\n+    it->push(&_methods, MetaspaceClosure::_writable);\n+  } else {\n+    it->push(&_methods);\n+  }\n@@ -2281,0 +2289,4 @@\n+  if (MetaspaceShared::is_old_class(this)) {\n+    \/\/ Set the old class bit.\n+    set_is_shared_old_klass();\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1337,1 +1337,0 @@\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -180,1 +180,2 @@\n-    _has_signer_and_not_archived = 1 << 2\n+    _has_signer_and_not_archived = 1 << 2,\n+    _is_shared_old_klass = 8\n@@ -327,0 +328,7 @@\n+  void set_is_shared_old_klass() {\n+    CDS_ONLY(_shared_class_flags |= _is_shared_old_klass;)\n+  }\n+  bool is_shared_old_klass() const {\n+    CDS_ONLY(return (_shared_class_flags & _is_shared_old_klass) != 0;)\n+    NOT_CDS(return false;)\n+  }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  return _klass->is_shared() && !MetaspaceShared::remapped_readwrite();\n+  return _klass->is_shared() && !MetaspaceShared::remapped_readwrite() && !_klass->is_shared_old_klass();\n@@ -1055,1 +1055,2 @@\n-     !MetaspaceShared::remapped_readwrite()) {\n+     !MetaspaceShared::remapped_readwrite() &&\n+     !MetaspaceShared::is_old_class(m->method_holder()) {\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -318,1 +318,5 @@\n-  it->push(&_constMethod);\n+  if (!method_holder()->is_rewritten()) {\n+    it->push(&_constMethod, MetaspaceClosure::_writable);\n+  } else {\n+    it->push(&_constMethod);\n+  }\n@@ -333,1 +337,1 @@\n-  if (is_shared() && !MetaspaceShared::remapped_readwrite()) {\n+  if (is_shared() && !MetaspaceShared::remapped_readwrite() && !method_holder()->is_shared_old_klass()) {\n@@ -344,1 +348,1 @@\n-  if (is_shared() && !MetaspaceShared::remapped_readwrite()) {\n+  if (is_shared() && !MetaspaceShared::remapped_readwrite() && !method_holder()->is_shared_old_klass()) {\n@@ -985,2 +989,7 @@\n-  _i2i_entry = Interpreter::entry_for_cds_method(this);\n-  _from_interpreted_entry = _i2i_entry;\n+  if (!method_holder()->is_shared_old_klass()) {\n+    _i2i_entry = Interpreter::entry_for_cds_method(this);\n+    _from_interpreted_entry = _i2i_entry;\n+  } else {\n+    _i2i_entry = NULL;\n+    _from_interpreted_entry = NULL;\n+  }\n@@ -994,5 +1003,8 @@\n-  CDSAdapterHandlerEntry* cds_adapter = (CDSAdapterHandlerEntry*)adapter();\n-  constMethod()->set_adapter_trampoline(cds_adapter->get_adapter_trampoline());\n-  _from_compiled_entry = cds_adapter->get_c2i_entry_trampoline();\n-  assert(*((int*)_from_compiled_entry) == 0, \"must be NULL during dump time, to be initialized at run time\");\n-\n+  if (!method_holder()->is_shared_old_klass()) {\n+    CDSAdapterHandlerEntry* cds_adapter = (CDSAdapterHandlerEntry*)adapter();\n+    constMethod()->set_adapter_trampoline(cds_adapter->get_adapter_trampoline());\n+    _from_compiled_entry = cds_adapter->get_c2i_entry_trampoline();\n+    assert(*((int*)_from_compiled_entry) == 0, \"must be NULL during dump time, to be initialized at run time\");\n+  } else {\n+    _from_interpreted_entry = NULL;\n+  }\n@@ -1080,1 +1092,1 @@\n-  if (is_shared()) {\n+  if (is_shared() && !method_holder()->is_shared_old_klass()) {\n@@ -1097,1 +1109,1 @@\n-  if (!is_shared()) {\n+  if (!(is_shared() && !method_holder()->is_shared_old_klass())) {\n@@ -1141,2 +1153,1 @@\n-\n-  if (mh->is_shared()) {\n+  if (mh->is_shared() && !mh->method_holder()->is_shared_old_klass()) {\n@@ -1153,1 +1164,3 @@\n-  assert(is_method() && is_valid_method(this), \"ensure C++ vtable is restored\");\n+  if (method_holder()->is_shared_old_klass()) {\n+    return;\n+  }\n@@ -1155,0 +1168,1 @@\n+  assert(is_method() && is_valid_method(this), \"ensure C++ vtable is restored\");\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":29,"deletions":15,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-    assert(!is_shared(), \"shared method's interpreter entry should not be changed at run time\");\n+    assert(!(is_shared() && method_holder()->verified_at_dump_time()), \"shared method's interpreter entry should not be changed at run time\");\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2591,1 +2591,1 @@\n-  if (entry != NULL && method->is_shared()) {\n+  if (entry != NULL && (method->is_shared() && !method->method_holder()->is_shared_old_klass())) {\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary classes with major version < JDK_6 (50) should not be included in CDS\n+ * @summary CDS support of old classes with major version < JDK_6 (50) for static archive\n@@ -66,1 +66,1 @@\n-    TestCommon.checkExecReturn(output, 0, true, \"Pre JDK 6 class not supported by CDS\");\n+    TestCommon.checkExecReturn(output, 0, false, \"Pre JDK 6 class not supported by CDS\");\n@@ -72,1 +72,4 @@\n-      .assertNormalExit(\"Hello Unicode world (Old)\");\n+      .assertNormalExit(out -> {\n+          out.shouldContain(\"Hello Unicode world (Old)\");\n+          out.shouldContain(\"Hello source: shared objects file\");\n+      });\n@@ -78,1 +81,1 @@\n-    TestCommon.checkExecReturn(output, 0, true, \"Pre JDK 6 class not supported by CDS\");\n+    TestCommon.checkExecReturn(output, 0, false, \"Pre JDK 6 class not supported by CDS\");\n@@ -84,1 +87,4 @@\n-      .assertNormalExit(\"Hello Unicode world (Old)\");\n+      .assertNormalExit(out -> {\n+          out.shouldContain(\"Hello Unicode world (Old)\");\n+          out.shouldContain(\"Hello source: shared objects file\");\n+      });\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/OldClassTest.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8261090\n+ * @summary CDS support of old classes with major version < JDK_6 (50) for static archive.\n+ *          Test with old super class.\n+ * @requires vm.cds\n+ * @modules java.base\/jdk.internal.misc\n+ *          jdk.jartool\/sun.tools.jar\n+ * @library \/test\/lib\n+ * @compile test-classes\/OldSuper.jasm\n+ * @compile test-classes\/ChildOldSuper.java\n+ * @compile test-classes\/GChild.java\n+ * @compile test-classes\/OldSuperApp.java\n+ * @run driver OldSuperClass\n+ *\/\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class OldSuperClass {\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"OldSuperApp\";\n+        String namePrefix = \"oldsuperclass\";\n+        String appClasses[] = TestCommon.list(\"OldSuper\", \"ChildOldSuper\", \"GChild\", mainClass);\n+        JarBuilder.build(namePrefix, appClasses);\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+\n+        \/\/ create archive with class list\n+        OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:class+load,cds=debug,verification=trace\");\n+        TestCommon.checkExecReturn(output, 0,\n+                                   false,\n+                                   \"Pre JDK 6 class not supported by CDS\");\n+\n+        \/\/ run with archive\n+        TestCommon.run(\n+            \"-cp\", appJar,\n+            \"-Xlog:class+load,cds=debug,verification=trace\",\n+            mainClass)\n+          .assertNormalExit(out -> {\n+              out.shouldContain(\"Verifying class OldSuper with old format\")\n+                 .shouldContain(\"Verifying class ChildOldSuper with new format\")\n+                 .shouldContain(\"Verifying class GChild with new format\");\n+              out.shouldContain(\"OldSuper source: shared objects file\")\n+                 .shouldContain(\"ChildOldSuper source: shared objects file\")\n+                 .shouldContain(\"GChild source: shared objects file\");\n+          });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/OldSuperClass.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8261090\n+ * @summary CDS support of old classes with major version < JDK_6 (50) for static archive.\n+ *          Test with old super interface.\n+ * @requires vm.cds\n+ * @modules java.base\/jdk.internal.misc\n+ *          jdk.jartool\/sun.tools.jar\n+ * @library \/test\/lib\n+ * @compile test-classes\/OldInf.jasm\n+ * @compile test-classes\/ChildOldInf.java\n+ * @compile test-classes\/GChild2.java\n+ * @compile test-classes\/OldSuperInfApp.java\n+ * @run driver OldSuperInf\n+ *\/\n+\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class OldSuperInf {\n+\n+    public static void main(String[] args) throws Exception {\n+        String mainClass = \"OldSuperInfApp\";\n+        String namePrefix = \"oldsuperinf\";\n+        String appClasses[] = TestCommon.list(\"OldInf\", \"ChildOldInf\", \"GChild2\", mainClass);\n+        JarBuilder.build(namePrefix, appClasses);\n+\n+        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n+        String archiveName = namePrefix + \".jsa\";\n+\n+\n+        \/\/ create archive with class list\n+        OutputAnalyzer output = TestCommon.dump(appJar, appClasses, \"-Xlog:class+load,cds=debug,verification=trace\");\n+        TestCommon.checkExecReturn(output, 0,\n+                                   false,\n+                                   \"Pre JDK 6 class not supported by CDS\");\n+\n+        \/\/ run with archive\n+        TestCommon.run(\n+            \"-cp\", appJar,\n+            \"-Xlog:class+load,cds=debug,verification=trace\",\n+            mainClass)\n+          .assertNormalExit(out -> {\n+              out.shouldContain(\"Verifying class OldInf with old format\")\n+                 .shouldContain(\"Verifying class ChildOldInf with new format\")\n+                 .shouldContain(\"Verifying class GChild2 with new format\");\n+              out.shouldContain(\"OldInf source: shared objects file\")\n+                 .shouldContain(\"ChildOldInf source: shared objects file\")\n+                 .shouldContain(\"GChild2 source: shared objects file\");\n+          });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/OldSuperInf.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class ChildOldInf implements OldInf {\n+    public String doit() {\n+        return \"ChildOldInf\";\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/ChildOldInf.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class ChildOldSuper extends OldSuper {\n+    public String doit() {\n+        return super.doit();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/ChildOldSuper.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class GChild extends ChildOldSuper {\n+    public String doit() {\n+        return super.doit();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/GChild.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class GChild2 extends ChildOldInf {\n+    public String doit() {\n+        return super.doit();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/GChild2.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public interface  OldInf\n+\tversion 49:0\n+{\n+\n+\n+public abstract Method doit:\"()Ljava\/lang\/String;\";\n+\n+} \/\/ end Class OldInf\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/OldInf.jasm","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+super public class OldSuper\n+\tversion 49:0\n+{\n+\n+\n+public Method \"<init>\":\"()V\"\n+\tstack 1 locals 1\n+{\n+\t\taload_0;\n+\t\tinvokespecial\tMethod java\/lang\/Object.\"<init>\":\"()V\";\n+\t\treturn;\n+}\n+\n+public Method doit:\"()Ljava\/lang\/String;\"\n+\tstack 1 locals 1\n+{\n+\t\tldc\tString \"Hello\";\n+\t\tareturn;\n+}\n+\n+} \/\/ end Class OldSuper\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/OldSuper.jasm","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class OldSuperApp {\n+    public static void main(String args[]) {\n+        ChildOldSuper c = new ChildOldSuper();\n+        System.out.println(c.doit());\n+\n+        GChild g = new GChild();\n+        System.out.println(g.doit());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/OldSuperApp.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+public class OldSuperInfApp {\n+    public static void main(String args[]) {\n+        ChildOldInf c = new ChildOldInf();\n+        System.out.println(c.doit());\n+\n+        GChild2 g = new GChild2();\n+        System.out.println(g.doit());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/test-classes\/OldSuperInfApp.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"}]}