{"files":[{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * The certificates used by this test.\n+ * They are generated by script gen-certs.sh.\n+ *\/\n+public enum Cert {\n+\n+    \/*\n+     * Version: 3 (0x2)\n+     * Serial Number:\n+     *     65:24:13:3c:7a:98:0c:16:a2:91:9c:8e:42:84:cf:be:be:d2:f1:42\n+     * Signature Algorithm: sha256WithRSAEncryption\n+     * Issuer: CN = evil\n+     * Validity\n+     *     Not Before: Feb  8 03:59:27 2020 GMT\n+     *     Not After : Feb  5 03:59:27 2030 GMT\n+     * Subject: CN = evil\n+     * X509v3 extensions:\n+     *     X509v3 Subject Key Identifier:\n+     *         09:D0:E8:51:6C:0F:88:59:47:D1:FD:05:C2:00:10:D6:A4:80:04:07\n+     *     X509v3 Authority Key Identifier:\n+     *         keyid:09:D0:E8:51:6C:0F:88:59:47:D1:FD:05:C2:00:10:D6:A4:80:04:07\n+     *\/\n+    BAD_CERT(\n+        \"RSA\",\n+        \"-----BEGIN CERTIFICATE-----\\n\" +\n+        \"MIIC7jCCAdagAwIBAgIUZSQTPHqYDBaikZyOQoTPvr7S8UIwDQYJKoZIhvcNAQEL\\n\" +\n+        \"BQAwDzENMAsGA1UEAwwEZXZpbDAeFw0yMDAyMDgwMzU5MjdaFw0zMDAyMDUwMzU5\\n\" +\n+        \"MjdaMA8xDTALBgNVBAMMBGV2aWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\\n\" +\n+        \"AoIBAQCmirsTOW1G+LoI\/Aj59lMk3KLywAbXASeTdnBoWkchuJ0QJWO\/5b5kgf6Q\\n\" +\n+        \"VFfe9lXof9psGIKaCGq6KsI0uqj7+7y++\/\/l+E6GB8UshVB8MXc1SLFe8AxPYhWC\\n\" +\n+        \"TXaKWyWGl7PXvugzbByFrf4IwE9+6phYkvl\/zHvaMKqdwnkpXuyuBgT3BiYTSNsx\\n\" +\n+        \"k1Ma+s5rqiwsOODSzwhadwmU9T4z11KypYb\/DixJgHvUET4gTB+i3ll+PllVdQtX\\n\" +\n+        \"zBLpEuj5HadK0PsqlOIok3eoSU+MpRqsz0gFEQ95y+Les3MlBeQ7fVKBz8GbrFDB\\n\" +\n+        \"Atzca+iknEh8fkLIUUuCjTjUtLvfAgMBAAGjQjBAMB0GA1UdDgQWBBQJ0OhRbA+I\\n\" +\n+        \"WUfR\/QXCABDWpIAEBzAfBgNVHSMEGDAWgBQJ0OhRbA+IWUfR\/QXCABDWpIAEBzAN\\n\" +\n+        \"BgkqhkiG9w0BAQsFAAOCAQEAQMfPfYfVSSdsiEUOlVg6M5D90HRONzqlg\/v0RqQI\\n\" +\n+        \"fb3uufXJs20dg8iamVORXIIeUpGv1OQ2Rx4ndnV3bRLK6ep3gswIkOnD8z\/CeNgl\\n\" +\n+        \"odZPvWyklHTMenGqU2TR3ceFep\/DvQkrP4aZWyr3e2fjatKR\/s4pXgBwHs\/hR76O\\n\" +\n+        \"vDYLRDyCG\/+MtUClFsc9HLedbU4Wp8JyaafFZ63\/VjaIcvdHoDGNILRu5AIN\/JVM\\n\" +\n+        \"Sgz4blkWJxS1dlqBYwxvbpJWrHUcktsa3Bzw2zWOkTVGQJi3pMvzRBkgliNaXPi3\\n\" +\n+        \"qcPViqgzVoB4QdOQBnvDtQ9+8Nt\/dQY1VJFSBLxZQIefiQ==\\n\" +\n+        \"-----END CERTIFICATE-----\",\n+        \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCmirsTOW1G+LoI\\n\" +\n+        \"\/Aj59lMk3KLywAbXASeTdnBoWkchuJ0QJWO\/5b5kgf6QVFfe9lXof9psGIKaCGq6\\n\" +\n+        \"KsI0uqj7+7y++\/\/l+E6GB8UshVB8MXc1SLFe8AxPYhWCTXaKWyWGl7PXvugzbByF\\n\" +\n+        \"rf4IwE9+6phYkvl\/zHvaMKqdwnkpXuyuBgT3BiYTSNsxk1Ma+s5rqiwsOODSzwha\\n\" +\n+        \"dwmU9T4z11KypYb\/DixJgHvUET4gTB+i3ll+PllVdQtXzBLpEuj5HadK0PsqlOIo\\n\" +\n+        \"k3eoSU+MpRqsz0gFEQ95y+Les3MlBeQ7fVKBz8GbrFDBAtzca+iknEh8fkLIUUuC\\n\" +\n+        \"jTjUtLvfAgMBAAECggEATyu2QS5Un5+QOMMvtTx\/TA\/DOulElyNKYBS23TTFiedM\\n\" +\n+        \"ayeLIuehuf\/+NziRSUILlupouGhyda04p2W6SvzNZnTGxnffr8B5+8dn2YFKwK93\\n\" +\n+        \"PxJel4ZAI+C53ubaSm2IClLFwPNVSVTEvlv3XsulPu1hHQJJr5JS8meeRD72AE8G\\n\" +\n+        \"brKbLlq6OGey6u9teao0m4Wo05MzaEoOx4fztPP4BiJJobuPYrdthUwfXJ2mQYeg\\n\" +\n+        \"fJKl+JeLUnAXmq8e+6Zs88NzGK8Gmd2TvGnUahxSDtXHuRkB2lOrGFrEJKkAXDBx\\n\" +\n+        \"2q8r3vvcay6+k95fS2HOvggFDALS37BGckWg4+HYuQKBgQDXkxw0u2G7rCYbF691\\n\" +\n+        \"jil++DLNUzejZonAvA\/cceVHShfAMlWCBf58cLNsY33rkRsFazhrdDoDAFqKxejB\\n\" +\n+        \"xWM8U7UHiHZSznuXTL0YbUombfz+0lp\/KwXcirnB7O3AdIW4lfMo\/ozeMMIuEzsL\\n\" +\n+        \"G\/MDvbNSdawEso\/qtxFvz87ctQKBgQDFxcCSyWb\/SQVr3RkZkO3BW2efuANxNeUh\\n\" +\n+        \"35L4inWTa8ml8UL4SrTrkfUHzu5TnBGbSb2n8CdkPnInA81dKagX6LXuONeLkX\/e\\n\" +\n+        \"RXyWIwWRiBkpYSaw2OGApl49DRvk2kCzwoVRWwh8qfhpC0P6AClFRaVAovYcTxm3\\n\" +\n+        \"vhCJL3jmwwKBgGMLvTbhLStMEgn6nOwXECu9H6JE7NhPgVUjUupHDj\/t4\/GzbqQZ\\n\" +\n+        \"2u4T3ewb3jwAZHjd5YNBWHIOlIsUGTgGV+zczN0ULsEnC5Pddzgk5p+3gzkVLu0k\\n\" +\n+        \"uEG3H1fhYu882j+P7bPVGKXxoxYGUedtxP7gBucJF6rk28jMqd9EjFfNAoGBAKcc\\n\" +\n+        \"ASwGodDzknEh0SOZIkxPP6\/lfIMcVw\/YKgd4dwCqAykEQuIpvdWO7sw6PYbISNg9\\n\" +\n+        \"5tMQSTiayznMLKqbmD0blR5FSVvVBYZ6kFsMHJhrt1cPj\/G+UEy0RsyvVvJ4uFMr\\n\" +\n+        \"+hpUIUe1FwErU7TajgTKZGfJSsuAyupG3xIL2syhAoGALv+ulZAY\/gUKH8NigsXo\\n\" +\n+        \"pFPTpiXMyTD\/O4RUH\/5LcxDELVZ8cnV2q3qEX+ep24y0AtNiBx4oHpZ\/vIxtwBCR\\n\" +\n+        \"JKU2xmIGC6NyQMRSzfmNgi0X450rgKbTAxn\/LAU8syXmNpBUrFZ8+02pQvWzxqfU\\n\" +\n+        \"zGaMEK3+f1sq8Byzau\/qhKU=\"),\n+\n+    \/*\n+     * Version: 3 (0x2)\n+     * Serial Number:\n+     *     70:41:2f:71:43:d1:67:b5:29:c6:3e:ce:62:ba:d5:aa:4a:f1:f7:f0\n+     * Signature Algorithm: sha256WithRSAEncryption\n+     * Issuer: CN = localhost\n+     * Validity\n+     *     Not Before: Feb  8 03:59:18 2020 GMT\n+     *     Not After : Feb  5 03:59:18 2030 GMT\n+     * Subject: CN = localhost\n+     * X509v3 extensions:\n+     *     X509v3 Subject Key Identifier:\n+     *         12:65:C7:4B:D8:77:D8:55:6E:2D:AF:C4:F8:09:FE:08:F4:22:EA:D5\n+     *     X509v3 Authority Key Identifier:\n+     *         keyid:12:65:C7:4B:D8:77:D8:55:6E:2D:AF:C4:F8:09:FE:08:F4:22:EA:D5\n+     *\/\n+    GOOD_CERT(\n+        \"RSA\",\n+        \"-----BEGIN CERTIFICATE-----\\n\" +\n+        \"MIIC+DCCAeCgAwIBAgIUcEEvcUPRZ7Upxj7OYrrVqkrx9\/AwDQYJKoZIhvcNAQEL\\n\" +\n+        \"BQAwFDESMBAGA1UEAwwJbG9jYWxob3N0MB4XDTIwMDIwODAzNTkxOFoXDTMwMDIw\\n\" +\n+        \"NTAzNTkxOFowFDESMBAGA1UEAwwJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEF\\n\" +\n+        \"AAOCAQ8AMIIBCgKCAQEAtSOmfkF0zjPeZ4DDsJZO3OaDq+XHtPLB+xvri1iuL9b+\\n\" +\n+        \"dZDXOqPZ5+koWM9NzDR6Um+IN46oTU+8eJw+hYcZaE9tzS9kH+6qOBk\/827yEyVa\\n\" +\n+        \"jh9Wqw164xj16QPyQJuHEeeDJ7elNfaOQXRu2UqZB9suKbolqsHe42hbg0\/tbln7\\n\" +\n+        \"C8C6qEJOpnEaapFHi3\/3AeoQQ57zywqrzopeiiuUDWmBhXY30ve33RrJl\/OIM1sB\\n\" +\n+        \"QSoVCPcaF0mXaDwUTYIksxelon1K9PJa76p9ybGnsxkYfCAGZ8O+fTjJfQONU+Gu\\n\" +\n+        \"zOmcyXL5D5O\/nI8lxN8hbZwVIAYXLYRUonECIOJ\/iQIDAQABo0IwQDAdBgNVHQ4E\\n\" +\n+        \"FgQUEmXHS9h32FVuLa\/E+An+CPQi6tUwHwYDVR0jBBgwFoAUEmXHS9h32FVuLa\/E\\n\" +\n+        \"+An+CPQi6tUwDQYJKoZIhvcNAQELBQADggEBAFatzXsT9YZ0TF66G6apSbbs6mH9\\n\" +\n+        \"PMVE9IuE4yv2zyKofSMmDHFdmfNdkMHWkIxcZKuiL00IPFL76LAb9DWNQVy4otq6\\n\" +\n+        \"3+n0CCi808gDNUMYMQLlXVooZsByXuMuokyg29F5mWEH4rswU6ru33lAB7CT7BuN\\n\" +\n+        \"z5\/eUhxTcXcJV6pLgcEM68NIc755PULevmqmd8SrVgcFjkxAFOsYd9L86wYLdiPO\\n\" +\n+        \"uXfN\/EjLMGHG2gpEqHEzQpEEAA\/IsCJ1HQ8vvGkeggUIXPrwlIMbQcz\/8WBSDel5\\n\" +\n+        \"hvVRmADJCLf\/0IwxKsSOMWZ4OMmcXMjxnae3lWPQomlzWHMZlFraG2rE\/Vo=\\n\" +\n+        \"-----END CERTIFICATE-----\",\n+        \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC1I6Z+QXTOM95n\\n\" +\n+        \"gMOwlk7c5oOr5ce08sH7G+uLWK4v1v51kNc6o9nn6ShYz03MNHpSb4g3jqhNT7x4\\n\" +\n+        \"nD6FhxloT23NL2Qf7qo4GT\/zbvITJVqOH1arDXrjGPXpA\/JAm4cR54Mnt6U19o5B\\n\" +\n+        \"dG7ZSpkH2y4puiWqwd7jaFuDT+1uWfsLwLqoQk6mcRpqkUeLf\/cB6hBDnvPLCqvO\\n\" +\n+        \"il6KK5QNaYGFdjfS97fdGsmX84gzWwFBKhUI9xoXSZdoPBRNgiSzF6WifUr08lrv\\n\" +\n+        \"qn3JsaezGRh8IAZnw759OMl9A41T4a7M6ZzJcvkPk7+cjyXE3yFtnBUgBhcthFSi\\n\" +\n+        \"cQIg4n+JAgMBAAECggEAD2O4AYIOKna9ro2CEr6ydJIhHbmn\/feiA3Obz3r5UZcy\\n\" +\n+        \"h0qG\/rRtDwcAJot2UKMkwVw4dn\/oTKk5mgWsSivwPKyC56vfFddxHtMGW+hRKM9D\\n\" +\n+        \"ok+HTYEXr7OvMNzk+Bg+oYbJ3dX8c1k\/PNBnmo578e7tPR5TlO5jwW5cWAuyYG2f\\n\" +\n+        \"+YUCqMNe02yZvvlvK1kOSSgqlNH0S14\/hVZTYkyxXMCCrkxPFXh5j8w6ZUzVipXg\\n\" +\n+        \"99EYcRdq7dA3XVBSgQQ4m5772FIIzlBn8LdIIfw3VQrtZ9HapowLk6QdcHSHBKMK\\n\" +\n+        \"0rqb1PlG2ynD2n8hKn4MssJ+tkzvbGrQcLjL\/+XHAQKBgQDmiOIke90T8puq3FkN\\n\" +\n+        \"NlgdBA9Zem5U2t3TvtQa36cuO\/paYrLaVK5U0ucNZ9d4i6avdyp8TyKJrUHDcazi\\n\" +\n+        \"QkDpjxb0KBhisutDZ4o1JFW4ZtB3zwIGIYWBBIE1kRIc0ucYoAurSdOmAsKq6XJQ\\n\" +\n+        \"B0CQYBJPrTHq5niCl0tKPtrISwKBgQDJJfNcKSz46zdnqsNZAmL+q+cMQf4txiCS\\n\" +\n+        \"v0JefOeKKlwNcYWxRgf1yTNENamKKh8wyqOhc\/OkxXjglRo9BFMt6BFFARzDddWE\\n\" +\n+        \"Wo18cyLc2WvTTv2FCZ0J\/eF1jPTGJsTpCU6Prbt4XPjZpzSTF2cQR7CxLp15FsJm\\n\" +\n+        \"2LMcQ8ma+wKBgQC72So8hFme2X+S+D3wECo4aoh\/Zs3kgvtigQqgY0H84I6de\/M1\\n\" +\n+        \"CO+M2tW\/DLB8336RV87cwDbqbK07rrMrIsV2C0yu4sUMF7Kwl\/v8VYEr40tXdOy3\\n\" +\n+        \"RjVc7ejDV1Sk\/A2m+TLI\/j1h9rndPqARKfeoLUB+gCg+ulHUR6fn9dOchQKBgByx\\n\" +\n+        \"uj6qbQzxWQ0D0iwvZ\/nWgfZAr8bN3bWxbQFXphwSoOEWEbFRQS9xzUtssEvSaHKo\\n\" +\n+        \"ZaFRji8yMGUxP\/X2WPtSgKwsVXMYqyXfWRGoxw9kQLp7KTVCQtG7Et+XBRADVdG8\\n\" +\n+        \"jyV17ilkcedyr9BP5VbwMyeDc9ljQsYzIZHlpavjAoGAct8Wktj0hegCoTxSukU1\\n\" +\n+        \"SkJ7t4376sSfxVbbUrH86Y1Z55le1O+VkGtqETmk+Q8qf5Ymnal3W9zZ0O9mOE04\\n\" +\n+        \"otFbiB3ifUbpBAipyxS06SIFwMctmSk2EqBcXa3nZ9eUGqx0JhoQahfyDkFzfwJY\\n\" +\n+        \"hiBTWnlMjCiJ40yRYAWDzZg=\"),\n+\n+    \/*\n+     * Version: 3 (0x2)\n+     * Serial Number:\n+     *     3f:62:91:39:7e:02:e9:77:20:61:ce:7e:a2:3c:c0:6c:3f:2e:08:49\n+     * Signature Algorithm: sha256WithRSAEncryption\n+     * Issuer: CN = UNKOWN\n+     * Validity\n+     *     Not Before: Feb  8 04:00:04 2020 GMT\n+     *     Not After : Feb  5 04:00:04 2030 GMT\n+     * Subject: CN = unknown\n+     * X509v3 extensions:\n+     *     X509v3 Subject Key Identifier:\n+     *         F7:D7:AE:80:DF:EC:7A:60:5A:E8:62:60:70:03:B6:BD:23:05:19:62\n+     *     X509v3 Authority Key Identifier:\n+     *         keyid:F7:D7:AE:80:DF:EC:7A:60:5A:E8:62:60:70:03:B6:BD:23:05:19:62\n+     *     X509v3 Subject Alternative Name:\n+     *         IP Address:127.0.0.1\n+     *\/\n+    LOOPBACK_CERT(\n+        \"RSA\",\n+        \"-----BEGIN CERTIFICATE-----\\n\" +\n+        \"MIIDBTCCAe2gAwIBAgIUP2KROX4C6XcgYc5+ojzAbD8uCEkwDQYJKoZIhvcNAQEL\\n\" +\n+        \"BQAwEjEQMA4GA1UEAwwHdW5rbm93bjAeFw0yMDAyMDgwNDAwMDRaFw0zMDAyMDUw\\n\" +\n+        \"NDAwMDRaMBIxEDAOBgNVBAMMB3Vua25vd24wggEiMA0GCSqGSIb3DQEBAQUAA4IB\\n\" +\n+        \"DwAwggEKAoIBAQC8dBwc+nhzuGOcqmeQkcms6JrUPDPcvq6gEEH3dxorzngfxrsl\\n\" +\n+        \"lfM6SPJBV4A7HVEcsGhcMoPzzpFVISi3XyLkGuw2WnEW6nKcB2QgaS0Ub8PoDZ7P\\n\" +\n+        \"erWGOIjHF1slKxX40tZBiEp1oJANDq7CzSGWiyTorCjbX6OiWZCbhQkw+SpXrAdD\\n\" +\n+        \"fzjEAr3y8cgsC7qqTxoz\/T9C1+UMmzc88kpAqih7jj2L\/i6387dBmV+zrMsNyO0Q\\n\" +\n+        \"UPGACzMiSZV3tiwYA6cvDY3WS3fCwLSYUWdHi1orerHQuGOHLK4eyPVDcvuQdUJ\/\\n\" +\n+        \"T0+jbNZa51scqrBUT\/aDlCMCxFUY3vquz2xfAgMBAAGjUzBRMB0GA1UdDgQWBBT3\\n\" +\n+        \"166A3+x6YFroYmBwA7a9IwUZYjAfBgNVHSMEGDAWgBT3166A3+x6YFroYmBwA7a9\\n\" +\n+        \"IwUZYjAPBgNVHREECDAGhwR\/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQBcfcv2J73T\\n\" +\n+        \"nHFsCPU3WM6UW2uE8BIM\/s\/VbjkV1nalFyHi\/TU6CN01sDymTABhzIlx5N6PW0HP\\n\" +\n+        \"Z0q1C7l1nsoQHwmJO+avOHu3ZjDrLMpU6wTQLEemTd3R5HTyA3\/I\/FUVFHeuLwJg\\n\" +\n+        \"L7OLNc8ouT1hkiIZD+xKwfCEdT3o+ldB+9L4WYRJPt2W3bf3W\/yM8JmwW8uf6+U3\\n\" +\n+        \"V46xiE5GoOKoIkeAkBAaIbepsZH9rPb7alBSgYgwQYDft9wuGMeNcvPvgVsXjA7I\\n\" +\n+        \"RafJVdxVinVMEaOjckIZ5WlrR5667aIJapZH1r7\/tiSQCRaJcILx7pL4x8C+x34z\\n\" +\n+        \"dPHbbyP\/Rdq9\\n\" +\n+        \"-----END CERTIFICATE-----\",\n+        \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC8dBwc+nhzuGOc\\n\" +\n+        \"qmeQkcms6JrUPDPcvq6gEEH3dxorzngfxrsllfM6SPJBV4A7HVEcsGhcMoPzzpFV\\n\" +\n+        \"ISi3XyLkGuw2WnEW6nKcB2QgaS0Ub8PoDZ7PerWGOIjHF1slKxX40tZBiEp1oJAN\\n\" +\n+        \"Dq7CzSGWiyTorCjbX6OiWZCbhQkw+SpXrAdDfzjEAr3y8cgsC7qqTxoz\/T9C1+UM\\n\" +\n+        \"mzc88kpAqih7jj2L\/i6387dBmV+zrMsNyO0QUPGACzMiSZV3tiwYA6cvDY3WS3fC\\n\" +\n+        \"wLSYUWdHi1orerHQuGOHLK4eyPVDcvuQdUJ\/T0+jbNZa51scqrBUT\/aDlCMCxFUY\\n\" +\n+        \"3vquz2xfAgMBAAECggEAEcYNpLoGxDs+wdbcf6kQUUt61st6xLYDODtwTUuhX0JQ\\n\" +\n+        \"2AZhPjE\/SF764ijDgk\/Ih6EnppJpGYSA9ntzIKBLZSIY5yNuiQ\/BkW+tBNWGl+fW\\n\" +\n+        \"nTszoDPdjPQmCkjsorvGjbos1O9qvl9PVrvsxZidM1qaN4uNKuuBPl2eItzQOhsM\\n\" +\n+        \"YFbmw1nqSX31gukv9a6yM2VgDUiGMlEGwkOphutbqt+wTO+9hEopGZHB7mNc5NO9\\n\" +\n+        \"foWVVI1rzS2yR2d85lsG4YBqBMDp2s2cBofIAe\/SSSpBYPR4RfEBDpSaVceR4+cL\\n\" +\n+        \"Lq52DhLVe\/zgVj7LEGdyTZTQxw414sRBIz8KXcRIkQKBgQDon26R0\/vToZcxgnpr\\n\" +\n+        \"ososGh+iTov883DCxX30sntl\/GbyUhg50q7Tq5mXGyzodoFHGTL+bOcU3g5O4MOV\\n\" +\n+        \"6HlTFe1dUjyC7M0ah6NaCSsl4SPTxtWjeHMBMhNisInDAO+ju4MJAhgoHuYL6p39\\n\" +\n+        \"NDmKSDtpaegFz1Q64C1Ea9fsFwKBgQDPZFvQNjSCm06ObsfXLZKS6IEqgGbihMfM\\n\" +\n+        \"cv\/HjIpAKXNp\/Y6Y\/YmdFBpdHDkOJ9BXwJqTuMuM69BuldvNXkkY7zrhPFPawWyF\\n\" +\n+        \"O\/N1aMNCT89AreBwXMYmgG9yLm1EF1FOuz2oAnWWpcUHBups+cZQikYSQxcOSqrL\\n\" +\n+        \"bNTEWffG+QKBgDTk+8lhAGQQ3EY\/uwJ6k6oPjp3jamVsHXnMWmWnp\/N6vxXeoO+U\\n\" +\n+        \"\/nfXDyeS4FVDjQXTrwq3TJwsGejJpu+RWvUPiVes+WFz4vdjXDt+1jbYyMLA9Zck\\n\" +\n+        \"LlJZRpssNUcIEXWTj6oetct5qymOgbovg93zqr6\/fCjGCgsRKnniY8ilAoGAcWGH\\n\" +\n+        \"hGQt\/v1TTDEqVexXRrOP8iFyngJDjPWN+pVN+9ftfhOeAuwRcOvNofvNAX0ovODS\\n\" +\n+        \"YVJVDfzZ3atWGIekZNpdEUg++8hlQM3OwvB8V2N0hgLJQgSmW+Q5iW3yVJh+3hEl\\n\" +\n+        \"mxWFHdAQ0E+ql9tR3TRLLK67CxgtGbus8o\/RE1kCgYAuf9o6Q++l8H0vNZTnzBNu\\n\" +\n+        \"bt0QnLxyh7RuViYuCkzLK+jGftgadVfsRgnOKvxQkMzcXfBgpV5JcVKXtaxDhPxM\\n\" +\n+        \"xHwblgOEGlrD4tAwvtPw3GLhmD4Shy8zcT0Lwto81fquskA5yyDGJxbq9CMzWk3w\\n\" +\n+        \"dSOT2C7lwW+hkycUio\/fTQ==\");\n+\n+    public final String keyAlgo;\n+    public final String certStr;\n+    public final String keyStr;\n+\n+    private Cert(String keyAlgo, String certStr, String keyStr) {\n+        this.keyAlgo = keyAlgo;\n+        this.certStr = certStr;\n+        this.keyStr = keyStr;\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/ssltest\/Cert.java","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-import java.io.File;\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+\n@@ -28,1 +29,0 @@\n-import java.net.http.HttpResponse.BodyHandlers;\n@@ -31,0 +31,2 @@\n+import java.net.http.HttpResponse.BodyHandlers;\n+\n@@ -33,2 +35,4 @@\n-import javax.net.ssl.SSLParameters;\n-import static java.net.http.HttpClient.Builder.NO_PROXY;\n+\n+import jdk.test.lib.security.KeyEntry;\n+import jdk.test.lib.security.KeyStoreUtils;\n+import jdk.test.lib.security.SSLContextBuilder;\n@@ -38,0 +42,1 @@\n+ * @library \/test\/lib\n@@ -39,2 +44,2 @@\n- * @run main\/othervm CertificateTest good.keystore expectSuccess\n- * @run main\/othervm CertificateTest bad.keystore expectFailure\n+ * @run main\/othervm CertificateTest GOOD_CERT expectSuccess\n+ * @run main\/othervm CertificateTest BAD_CERT expectFailure\n@@ -43,1 +48,1 @@\n- *       CertificateTest bad.keystore expectSuccess\n+ *       CertificateTest BAD_CERT expectSuccess\n@@ -46,1 +51,1 @@\n- *       CertificateTest bad.keystore expectSuccess\n+ *       CertificateTest BAD_CERT expectSuccess\n@@ -49,1 +54,1 @@\n- *       CertificateTest bad.keystore expectFailure\n+ *       CertificateTest BAD_CERT expectFailure\n@@ -52,2 +57,2 @@\n- *       CertificateTest bad.keystore expectFailure\n- * @run main\/othervm CertificateTest loopback.keystore expectSuccess\n+ *       CertificateTest BAD_CERT expectFailure\n+ * @run main\/othervm CertificateTest LOOPBACK_CERT expectSuccess\n@@ -62,1 +67,1 @@\n- * For the \"good\" run the cert contains the correct hostname of the target server\n+ * The GOOD_CERT cert contains the correct hostname of the target server\n@@ -64,1 +69,4 @@\n- * For the \"bad\" run, the cert contains an invalid hostname, and should be rejected.\n+ * The BAD_CERT cert contains an invalid hostname, and should be rejected.\n+ * The LOOPBACK_CERT cert contains an invalid hostname, but it also contains a\n+ * subject alternative name for IP address 127.0.0.1, so it should be accepted\n+ * for this address.\n@@ -67,2 +75,2 @@\n-    static SSLContext ctx;\n-    static SSLParameters params;\n+\n+    private static Cert cert;\n@@ -70,1 +78,0 @@\n-    static String trustStoreProp;\n@@ -74,1 +81,0 @@\n-    static String TESTSRC = System.getProperty(\"test.src\");\n@@ -78,3 +84,1 @@\n-            String keystore = args[0];\n-            trustStoreProp = TESTSRC + File.separatorChar + keystore;\n-\n+            String certName = args[0];\n@@ -88,1 +92,3 @@\n-            server = new Server(trustStoreProp);\n+\n+            cert = Cert.valueOf(certName);\n+            server = new Server(getSSLContext(cert));\n@@ -90,4 +96,1 @@\n-            System.setProperty(\"javax.net.ssl.trustStore\", trustStoreProp);\n-            System.setProperty(\"javax.net.ssl.trustStorePassword\", \"passphrase\");\n-            init();\n-            test(args);\n+            test(cert);\n@@ -95,1 +98,3 @@\n-            server.stop();\n+            if (server != null) {\n+                server.stop();\n+            }\n@@ -99,5 +104,8 @@\n-    static void init() throws Exception\n-    {\n-        ctx = SSLContext.getDefault();\n-        params = ctx.getDefaultSSLParameters();\n-        \/\/params.setProtocols(new String[] { \"TLSv1.2\" });\n+    private static SSLContext getSSLContext(Cert cert) throws Exception {\n+        SSLContextBuilder builder = SSLContextBuilder.builder();\n+        builder.trustStore(\n+                KeyStoreUtils.createTrustStore(new String[] { cert.certStr }));\n+        builder.keyStore(KeyStoreUtils.createKeyStore(\n+                new KeyEntry[] { new KeyEntry(cert.keyAlgo,\n+                        cert.keyStr, new String[] { cert.certStr }) }));\n+        return builder.build();\n@@ -106,1 +114,1 @@\n-    static void test(String[] args) throws Exception\n+    static void test(Cert cert) throws Exception\n@@ -109,1 +117,1 @@\n-        if (args[0].equals(\"loopback.keystore\"))\n+        if (cert == Cert.LOOPBACK_CERT)\n@@ -116,0 +124,2 @@\n+\n+        SSLContext ctx = getSSLContext(cert);\n@@ -119,1 +129,1 @@\n-                .sslParameters(params)\n+                .sslParameters(ctx.getDefaultSSLParameters())\n","filename":"test\/jdk\/java\/net\/httpclient\/ssltest\/CertificateTest.java","additions":45,"deletions":35,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\n@@ -28,3 +29,0 @@\n-import java.net.URI;\n-import java.security.*;\n-import java.util.*;\n@@ -47,1 +45,1 @@\n-    public Server(String certfile) throws Exception {\n+    public Server(SSLContext ctx) throws Exception {\n@@ -49,1 +47,0 @@\n-        SSLContext ctx = getContext(\"TLSv1.2\", certfile);\n@@ -51,1 +48,2 @@\n-        InetSocketAddress addr = new InetSocketAddress(InetAddress.getLoopbackAddress(),0);\n+        InetSocketAddress addr = new InetSocketAddress(\n+                InetAddress.getLoopbackAddress(), 0);\n@@ -55,1 +53,1 @@\n-        server.setExecutor((exec=Executors.newCachedThreadPool()));\n+        server.setExecutor((exec = Executors.newCachedThreadPool()));\n@@ -57,1 +55,1 @@\n-        System.out.println (\"Listening on port \" + port);\n+        System.out.println(\"Listening on port \" + port);\n@@ -70,16 +68,0 @@\n-    SSLContext getContext(String protocol, String certfile) throws Exception {\n-        char[] passphrase = \"passphrase\".toCharArray();\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(new FileInputStream(certfile), passphrase);\n-\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-        kmf.init(ks, passphrase);\n-\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n-        tmf.init(ks);\n-\n-        SSLContext ssl = SSLContext.getInstance(protocol);\n-        ssl.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        return ssl;\n-    }\n-\n@@ -123,1 +105,1 @@\n-            System.err.println(\"PArams = \" + p);\n+            System.err.println(\"Params = \" + p);\n","filename":"test\/jdk\/java\/net\/httpclient\/ssltest\/Server.java","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"},{"filename":"test\/jdk\/java\/net\/httpclient\/ssltest\/bad.keystore","binary":true,"status":"deleted"},{"patch":"@@ -0,0 +1,53 @@\n+# Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+\n+# Generate OpenSSL configuration file\n+echo \"[req]\" > openssl.conf\n+echo \"distinguished_name = dn\" >> openssl.conf\n+echo \"x509_extensions = v3_ext\" >> openssl.conf\n+echo \"[dn]\" >> openssl.conf\n+echo \"[v3_ext]\" >> openssl.conf\n+echo \"subjectKeyIdentifier = hash\" >> openssl.conf\n+echo \"authorityKeyIdentifier = keyid\" >> openssl.conf\n+echo \"basicConstraints = critical,CA:FALSE\" >> openssl.conf\n+\n+# Generate X.509 version 3 extension file\n+echo \"subjectKeyIdentifier = hash\" > v3.ext\n+echo \"authorityKeyIdentifier = keyid,issuer\" >> v3.ext\n+\n+# Generate good cert\n+openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:65537 -out good.key\n+openssl req -config openssl.conf -new -key good.key -subj \"\/CN=localhost\" -sha256 -out good.csr\n+openssl x509 -extfile v3.ext -req -CAcreateserial -days 3650 -in good.csr -sha256 -signkey good.key -out good.cer\n+\n+# Generate bad cert\n+openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:65537 -out bad.key\n+openssl req -config openssl.conf -new -key bad.key -subj \"\/CN=evil\" -sha256 -out bad.csr\n+openssl x509 -extfile v3.ext -req -CAcreateserial -days 3650 -in bad.csr -sha256 -signkey bad.key -out bad.cer\n+\n+# Generate loopback cert with subject alternative name\n+echo \"subjectAltName = @alt_names\" >> v3.ext\n+echo \"[alt_names]\" >> v3.ext\n+echo \"IP.1 = 127.0.0.1\" >> v3.ext\n+\n+openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:65537 -out loopback.key\n+openssl req -config openssl.conf -new -key loopback.key -subj \"\/CN=unknown\" -sha256 -out loopback.csr\n+openssl x509 -extfile v3.ext -req -CAcreateserial -days 3650 -in loopback.csr -sha256 -signkey loopback.key -out loopback.cer\n","filename":"test\/jdk\/java\/net\/httpclient\/ssltest\/gen-certs.sh","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"filename":"test\/jdk\/java\/net\/httpclient\/ssltest\/good.keystore","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/net\/httpclient\/ssltest\/loopback.keystore","binary":true,"status":"deleted"}]}