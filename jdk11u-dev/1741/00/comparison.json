{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,9 +25,5 @@\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.StringReader;\n-import java.util.ArrayList;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.StringTokenizer;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.time.Instant;\n@@ -41,2 +37,1 @@\n-\n-    private final List<String> cmdArgs = new LinkedList<>();\n+    private final String[] cmdArgs;\n@@ -45,4 +40,1 @@\n-        StringTokenizer st = new StringTokenizer(cmdLine);\n-        while (st.hasMoreTokens()) {\n-            cmdArgs.add(st.nextToken());\n-        }\n+        cmdArgs = cmdLine.split(\" +\");\n@@ -59,1 +51,0 @@\n-\n@@ -61,7 +52,2 @@\n-        OutputAnalyzer oa = ProcessTools.executeProcess(pb);\n-\n-        return new ToolResults(oa.getExitValue(),\n-                stringToList(oa.getStdout()),\n-                stringToList(oa.getStderr()));\n-\n-    }\n+        Path out = Files.createTempFile(Paths.get(\".\"), \"out.\", \".txt\");\n+        Path err = out.resolveSibling(out.getFileName().toString().replaceFirst(\"out\", \"err\"));\n@@ -69,8 +55,9 @@\n-    private static List<String> stringToList(String s) throws IOException {\n-        BufferedReader reader = new BufferedReader(new StringReader(s));\n-        List<String> strings = new ArrayList<>();\n-        for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n-            strings.add(line);\n-        }\n-        reader.close();\n-        return strings;\n+        Process p = pb.redirectOutput(ProcessBuilder.Redirect.to(out.toFile()))\n+                      .redirectError(ProcessBuilder.Redirect.to(err.toFile()))\n+                      .start();\n+        System.out.printf(\"[%s] started process %d %s with out\/err redirected to '%s' and '%s'%n\",\n+                Instant.now().toString(), p.pid(), pb.command(), out.toString(), err.toString());\n+        int exitCode = p.waitFor();\n+        System.out.printf(\"[%s] process %d finished with exit code = %d%n\",\n+                Instant.now().toString(), p.pid(), exitCode);\n+        return new ToolResults(exitCode, Files.readAllLines(out), Files.readAllLines(err));\n","filename":"test\/hotspot\/jtreg\/serviceability\/tmtools\/share\/common\/ToolRunner.java","additions":19,"deletions":32,"binary":false,"changes":51,"status":"modified"}]}