{"files":[{"patch":"@@ -2971,1 +2971,1 @@\n-    u_int32_t con = (u_int32_t)$src$$constant;\n+    uint32_t con = (uint32_t)$src$$constant;\n@@ -2983,1 +2983,1 @@\n-    u_int64_t con = (u_int64_t)$src$$constant;\n+    uint64_t con = (uint64_t)$src$$constant;\n@@ -3025,1 +3025,1 @@\n-    __ mov(dst_reg, (u_int64_t)1);\n+    __ mov(dst_reg, (uint64_t)1);\n@@ -3159,1 +3159,1 @@\n-    u_int32_t val = (u_int32_t)$src2$$constant;\n+    uint32_t val = (uint32_t)$src2$$constant;\n@@ -3181,1 +3181,1 @@\n-      __ orr(rscratch1, zr, (u_int64_t)val);\n+      __ orr(rscratch1, zr, (uint64_t)val);\n@@ -3189,1 +3189,1 @@\n-    u_int64_t val = (u_int64_t)$src2$$constant;\n+    uint64_t val = (uint64_t)$src2$$constant;\n@@ -13447,2 +13447,2 @@\n-  predicate((u_int64_t)n->in(2)->get_long()\n-            < (u_int64_t)(BlockZeroingLowLimit >> LogBytesPerWord));\n+  predicate((uint64_t)n->in(2)->get_long()\n+            < (uint64_t)(BlockZeroingLowLimit >> LogBytesPerWord));\n@@ -13456,1 +13456,1 @@\n-    __ zero_words($base$$Register, (u_int64_t)$cnt$$constant);\n+    __ zero_words($base$$Register, (uint64_t)$cnt$$constant);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2045,1 +2045,1 @@\n-    __ mov(dst->as_register(), (u_int64_t)-1L);\n+    __ mov(dst->as_register(), (uint64_t)-1L);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include <stdint.h>\n@@ -37,1 +38,1 @@\n-static u_int64_t LITable[LI_TABLE_SIZE];\n+static uint64_t LITable[LI_TABLE_SIZE];\n@@ -43,2 +44,2 @@\n-  u_int64_t immediate;\n-  u_int32_t encoding;\n+  uint64_t immediate;\n+  uint32_t encoding;\n@@ -66,1 +67,1 @@\n-static inline u_int64_t ones(int N)\n+static inline uint64_t ones(int N)\n@@ -68,1 +69,1 @@\n-  return (N == 64 ? (u_int64_t)-1UL : ((1UL << N) - 1));\n+  return (N == 64 ? (uint64_t)-1UL : ((1UL << N) - 1));\n@@ -76,1 +77,1 @@\n-static inline u_int32_t mask32(int hi = 31, int lo = 0)\n+static inline uint32_t mask32(int hi = 31, int lo = 0)\n@@ -82,1 +83,1 @@\n-static inline u_int64_t mask64(int hi = 63, int lo = 0)\n+static inline uint64_t mask64(int hi = 63, int lo = 0)\n@@ -89,1 +90,1 @@\n-static inline u_int32_t pick32(u_int32_t val, int hi = 31, int lo = 0)\n+static inline uint32_t pick32(uint32_t val, int hi = 31, int lo = 0)\n@@ -95,1 +96,1 @@\n-static inline u_int64_t pick64(u_int64_t val, int hi = 31, int lo = 0)\n+static inline uint64_t pick64(uint64_t val, int hi = 31, int lo = 0)\n@@ -101,1 +102,1 @@\n-static inline u_int32_t pickbits32(u_int32_t val, int hi = 31, int lo = 0)\n+static inline uint32_t pickbits32(uint32_t val, int hi = 31, int lo = 0)\n@@ -107,1 +108,1 @@\n-static inline u_int64_t pickbits64(u_int64_t val, int hi = 63, int lo = 0)\n+static inline uint64_t pickbits64(uint64_t val, int hi = 63, int lo = 0)\n@@ -113,1 +114,1 @@\n-static inline u_int64_t pickbit(u_int64_t val, int N)\n+static inline uint64_t pickbit(uint64_t val, int N)\n@@ -118,1 +119,1 @@\n-static inline u_int32_t uimm(u_int32_t val, int hi, int lo)\n+static inline uint32_t uimm(uint32_t val, int hi, int lo)\n@@ -126,1 +127,1 @@\n-u_int64_t replicate(u_int64_t bits, int nbits, int count)\n+uint64_t replicate(uint64_t bits, int nbits, int count)\n@@ -128,1 +129,1 @@\n-  u_int64_t result = 0;\n+  uint64_t result = 0;\n@@ -130,1 +131,1 @@\n-  u_int64_t mask = ones(nbits);\n+  uint64_t mask = ones(nbits);\n@@ -143,2 +144,2 @@\n-int expandLogicalImmediate(u_int32_t immN, u_int32_t immr,\n-                            u_int32_t imms, u_int64_t &bimm)\n+int expandLogicalImmediate(uint32_t immN, uint32_t immr,\n+                            uint32_t imms, uint64_t &bimm)\n@@ -146,9 +147,9 @@\n-  int len;                  \/\/ ought to be <= 6\n-  u_int32_t levels;         \/\/ 6 bits\n-  u_int32_t tmask_and;      \/\/ 6 bits\n-  u_int32_t wmask_and;      \/\/ 6 bits\n-  u_int32_t tmask_or;       \/\/ 6 bits\n-  u_int32_t wmask_or;       \/\/ 6 bits\n-  u_int64_t imm64;          \/\/ 64 bits\n-  u_int64_t tmask, wmask;   \/\/ 64 bits\n-  u_int32_t S, R, diff;     \/\/ 6 bits?\n+  int len;                 \/\/ ought to be <= 6\n+  uint32_t levels;         \/\/ 6 bits\n+  uint32_t tmask_and;      \/\/ 6 bits\n+  uint32_t wmask_and;      \/\/ 6 bits\n+  uint32_t tmask_or;       \/\/ 6 bits\n+  uint32_t wmask_or;       \/\/ 6 bits\n+  uint64_t imm64;          \/\/ 64 bits\n+  uint64_t tmask, wmask;   \/\/ 64 bits\n+  uint32_t S, R, diff;     \/\/ 6 bits?\n@@ -160,1 +161,1 @@\n-    u_int32_t val = (~imms & 0x3f);\n+    uint32_t val = (~imms & 0x3f);\n@@ -173,1 +174,1 @@\n-    u_int32_t val2 = (~immr & 0x3f);\n+    uint32_t val2 = (~immr & 0x3f);\n@@ -202,6 +203,6 @@\n-    u_int64_t and_bit = pickbit(tmask_and, i);\n-    u_int64_t or_bit = pickbit(tmask_or, i);\n-    u_int64_t and_bits_sub = replicate(and_bit, 1, nbits);\n-    u_int64_t or_bits_sub = replicate(or_bit, 1, nbits);\n-    u_int64_t and_bits_top = (and_bits_sub << nbits) | ones(nbits);\n-    u_int64_t or_bits_top = (0 << nbits) | or_bits_sub;\n+    uint64_t and_bit = pickbit(tmask_and, i);\n+    uint64_t or_bit = pickbit(tmask_or, i);\n+    uint64_t and_bits_sub = replicate(and_bit, 1, nbits);\n+    uint64_t or_bits_sub = replicate(or_bit, 1, nbits);\n+    uint64_t and_bits_top = (and_bits_sub << nbits) | ones(nbits);\n+    uint64_t or_bits_top = (0 << nbits) | or_bits_sub;\n@@ -221,6 +222,6 @@\n-    u_int64_t and_bit = pickbit(wmask_and, i);\n-    u_int64_t or_bit = pickbit(wmask_or, i);\n-    u_int64_t and_bits_sub = replicate(and_bit, 1, nbits);\n-    u_int64_t or_bits_sub = replicate(or_bit, 1, nbits);\n-    u_int64_t and_bits_top = (ones(nbits) << nbits) | and_bits_sub;\n-    u_int64_t or_bits_top = (or_bits_sub << nbits) | 0;\n+    uint64_t and_bit = pickbit(wmask_and, i);\n+    uint64_t or_bit = pickbit(wmask_or, i);\n+    uint64_t and_bits_sub = replicate(and_bit, 1, nbits);\n+    uint64_t or_bits_sub = replicate(or_bit, 1, nbits);\n+    uint64_t and_bits_top = (ones(nbits) << nbits) | and_bits_sub;\n+    uint64_t or_bits_top = (or_bits_sub << nbits) | 0;\n@@ -251,3 +252,3 @@\n-    u_int32_t N = uimm(index, 12, 12);\n-    u_int32_t immr = uimm(index, 11, 6);\n-    u_int32_t imms = uimm(index, 5, 0);\n+    uint32_t N = uimm(index, 12, 12);\n+    uint32_t immr = uimm(index, 11, 6);\n+    uint32_t imms = uimm(index, 5, 0);\n@@ -267,1 +268,1 @@\n-u_int64_t logical_immediate_for_encoding(u_int32_t encoding)\n+uint64_t logical_immediate_for_encoding(uint32_t encoding)\n@@ -272,1 +273,1 @@\n-u_int32_t encoding_for_logical_immediate(u_int64_t immediate)\n+uint32_t encoding_for_logical_immediate(uint64_t immediate)\n@@ -296,1 +297,1 @@\n-u_int64_t fp_immediate_for_encoding(u_int32_t imm8, int is_dp)\n+uint64_t fp_immediate_for_encoding(uint32_t imm8, int is_dp)\n@@ -301,1 +302,1 @@\n-    u_int64_t val;\n+    uint64_t val;\n@@ -304,1 +305,1 @@\n-  u_int32_t s, e, f;\n+  uint32_t s, e, f;\n@@ -332,1 +333,1 @@\n-u_int32_t encoding_for_fp_immediate(float immediate)\n+uint32_t encoding_for_fp_immediate(float immediate)\n@@ -344,1 +345,1 @@\n-    u_int32_t val;\n+    uint32_t val;\n@@ -347,1 +348,1 @@\n-  u_int32_t s, r, f, res;\n+  uint32_t s, r, f, res;\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.cpp","additions":53,"deletions":52,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -49,4 +49,4 @@\n-u_int64_t logical_immediate_for_encoding(u_int32_t encoding);\n-u_int32_t encoding_for_logical_immediate(u_int64_t immediate);\n-u_int64_t fp_immediate_for_encoding(u_int32_t imm8, int is_dp);\n-u_int32_t encoding_for_fp_immediate(float immediate);\n+uint64_t logical_immediate_for_encoding(uint32_t encoding);\n+uint32_t encoding_for_logical_immediate(uint64_t immediate);\n+uint64_t fp_immediate_for_encoding(uint32_t imm8, int is_dp);\n+uint32_t encoding_for_fp_immediate(float immediate);\n","filename":"src\/hotspot\/cpu\/aarch64\/immediate_aarch64.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-      u_int64_t dest = (u_int64_t)target;\n+      uint64_t dest = (uint64_t)target;\n@@ -149,1 +149,1 @@\n-    u_int64_t dest = (u_int64_t)target;\n+    uint64_t dest = (uint64_t)target;\n@@ -275,1 +275,1 @@\n-    u_int32_t *insns = (u_int32_t *)insn_addr;\n+    uint32_t *insns = (uint32_t *)insn_addr;\n@@ -279,3 +279,3 @@\n-    return address(u_int64_t(Instruction_aarch64::extract(insns[0], 20, 5))\n-                   + (u_int64_t(Instruction_aarch64::extract(insns[1], 20, 5)) << 16)\n-                   + (u_int64_t(Instruction_aarch64::extract(insns[2], 20, 5)) << 32));\n+    return address(uint64_t(Instruction_aarch64::extract(insns[0], 20, 5))\n+                   + (uint64_t(Instruction_aarch64::extract(insns[1], 20, 5)) << 16)\n+                   + (uint64_t(Instruction_aarch64::extract(insns[2], 20, 5)) << 32));\n@@ -1483,1 +1483,1 @@\n-  u_int64_t imm64 = (u_int64_t)dest.target();\n+  uint64_t imm64 = (uint64_t)dest.target();\n@@ -1516,1 +1516,1 @@\n-void MacroAssembler::mov(FloatRegister Vd, SIMD_Arrangement T, u_int32_t imm32) {\n+void MacroAssembler::mov(FloatRegister Vd, SIMD_Arrangement T, uint32_t imm32) {\n@@ -1523,1 +1523,1 @@\n-  u_int32_t nimm32 = ~imm32;\n+  uint32_t nimm32 = ~imm32;\n@@ -1529,1 +1529,1 @@\n-  u_int32_t x = imm32;\n+  uint32_t x = imm32;\n@@ -1553,1 +1553,1 @@\n-void MacroAssembler::mov_immediate64(Register dst, u_int64_t imm64)\n+void MacroAssembler::mov_immediate64(Register dst, uint64_t imm64)\n@@ -1567,1 +1567,1 @@\n-    u_int64_t imm_h[4];\n+    uint64_t imm_h[4];\n@@ -1588,1 +1588,1 @@\n-          movz(dst, (u_int32_t)imm_h[i], (i << 4));\n+          movz(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1596,1 +1596,1 @@\n-          movn(dst, (u_int32_t)imm_h[i] ^ 0xffffL, (i << 4));\n+          movn(dst, (uint32_t)imm_h[i] ^ 0xffffL, (i << 4));\n@@ -1604,1 +1604,1 @@\n-          movz(dst, (u_int32_t)imm_h[i], (i << 4));\n+          movz(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1611,1 +1611,1 @@\n-          movk(dst, (u_int32_t)imm_h[i], (i << 4));\n+          movk(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1618,1 +1618,1 @@\n-          movn(dst, (u_int32_t)imm_h[i] ^ 0xffffL, (i << 4));\n+          movn(dst, (uint32_t)imm_h[i] ^ 0xffffL, (i << 4));\n@@ -1625,1 +1625,1 @@\n-          movk(dst, (u_int32_t)imm_h[i], (i << 4));\n+          movk(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1632,1 +1632,1 @@\n-          movz(dst, (u_int32_t)imm_h[i], (i << 4));\n+          movz(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1639,1 +1639,1 @@\n-          movk(dst, (u_int32_t)imm_h[i], (i << 4));\n+          movk(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1646,1 +1646,1 @@\n-          movn(dst, (u_int32_t)imm_h[i] ^ 0xffffL, (i << 4));\n+          movn(dst, (uint32_t)imm_h[i] ^ 0xffffL, (i << 4));\n@@ -1653,1 +1653,1 @@\n-          movk(dst, (u_int32_t)imm_h[i], (i << 4));\n+          movk(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1658,1 +1658,1 @@\n-      movz(dst, (u_int32_t)imm_h[0], 0);\n+      movz(dst, (uint32_t)imm_h[0], 0);\n@@ -1660,1 +1660,1 @@\n-        movk(dst, (u_int32_t)imm_h[i], (i << 4));\n+        movk(dst, (uint32_t)imm_h[i], (i << 4));\n@@ -1666,1 +1666,1 @@\n-void MacroAssembler::mov_immediate32(Register dst, u_int32_t imm32)\n+void MacroAssembler::mov_immediate32(Register dst, uint32_t imm32)\n@@ -1680,1 +1680,1 @@\n-    u_int32_t imm_h[2];\n+    uint32_t imm_h[2];\n@@ -5444,1 +5444,1 @@\n-void MacroAssembler::zero_words(Register base, u_int64_t cnt)\n+void MacroAssembler::zero_words(Register base, uint64_t cnt)\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -451,2 +451,2 @@\n-  void mov_immediate64(Register dst, u_int64_t imm64);\n-  void mov_immediate32(Register dst, u_int32_t imm32);\n+  void mov_immediate64(Register dst, uint64_t imm64);\n+  void mov_immediate32(Register dst, uint32_t imm32);\n@@ -475,1 +475,1 @@\n-    mov_immediate64(dst, (u_int64_t)addr);\n+    mov_immediate64(dst, (uint64_t)addr);\n@@ -478,1 +478,1 @@\n-  inline void mov(Register dst, u_int64_t imm64)\n+  inline void mov(Register dst, uint64_t imm64)\n@@ -483,1 +483,1 @@\n-  inline void movw(Register dst, u_int32_t imm32)\n+  inline void movw(Register dst, uint32_t imm32)\n@@ -490,1 +490,1 @@\n-    mov(dst, (u_int64_t)l);\n+    mov(dst, (uint64_t)l);\n@@ -507,1 +507,1 @@\n-  void mov(FloatRegister Vd, SIMD_Arrangement T, u_int32_t imm32);\n+  void mov(FloatRegister Vd, SIMD_Arrangement T, uint32_t imm32);\n@@ -1235,1 +1235,1 @@\n-  void zero_words(Register base, u_int64_t cnt);\n+  void zero_words(Register base, uint64_t cnt);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1708,1 +1708,1 @@\n-  __ mov(r0, (u_int64_t)-1L);\n+  __ mov(r0, (uint64_t)-1L);\n@@ -1732,1 +1732,1 @@\n-    __ mov(r0, (u_int64_t)-1L);\n+    __ mov(r0, (uint64_t)-1L);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}