{"files":[{"patch":"@@ -185,0 +185,1 @@\n+        VAR_SYNTAX_IMPLICIT_LAMBDAS(JDK11, Fragments.FeatureVarSyntaxInImplicitLambda, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1693,1 +1693,3 @@\n-                    log.error(DiagnosticFlag.SYNTAX, param.pos, Errors.VarNotAllowedArray);\n+                    log.error(DiagnosticFlag.SYNTAX, param.pos,\n+                        Feature.VAR_SYNTAX_IMPLICIT_LAMBDAS.allowedInSource(source)\n+                            ? Errors.VarNotAllowedArray : Errors.VarNotAllowedHere);\n@@ -1704,1 +1706,3 @@\n-                if (param.vartype != null && isRestrictedLocalVarTypeName(param.vartype, true)) {\n+                if (param.vartype != null\n+                        && isRestrictedLocalVarTypeName(param.vartype, true)) {\n+                    checkSourceLevel(param.pos, Feature.VAR_SYNTAX_IMPLICIT_LAMBDAS);\n@@ -1714,3 +1718,3 @@\n-        EXPLICIT(0),\n-        IMPLICIT(1),\n-        VAR(2),\n+        VAR(0),\n+        EXPLICIT(1),\n+        IMPLICIT(2),\n@@ -1726,5 +1730,5 @@\n-    private final static Fragment[][] decisionTable = new Fragment[][]{\n-        \/*              EXPLICIT                         IMPLICIT                         VAR  *\/\n-        \/* EXPLICIT *\/ {null,                            ImplicitAndExplicitNotAllowed,   VarAndExplicitNotAllowed},\n-        \/* IMPLICIT *\/ {ImplicitAndExplicitNotAllowed,   null,                            VarAndImplicitNotAllowed},\n-        \/* VAR      *\/ {VarAndExplicitNotAllowed,        VarAndImplicitNotAllowed,        null}\n+    private final static Fragment[][] decisionTable = new Fragment[][] {\n+        \/*              VAR                              EXPLICIT                         IMPLICIT  *\/\n+        \/* VAR      *\/ {null,                            VarAndExplicitNotAllowed,        VarAndImplicitNotAllowed},\n+        \/* EXPLICIT *\/ {VarAndExplicitNotAllowed,        null,                            ImplicitAndExplicitNotAllowed},\n+        \/* IMPLICIT *\/ {VarAndImplicitNotAllowed,        ImplicitAndExplicitNotAllowed,   null},\n@@ -1759,1 +1763,4 @@\n-                diagFragment = decisionTable[currentKind.index][newKind.index];\n+                boolean varIndex = currentKind.index == LambdaParameterKind.VAR.index ||\n+                        newKind.index == LambdaParameterKind.VAR.index;\n+                diagFragment = Feature.VAR_SYNTAX_IMPLICIT_LAMBDAS.allowedInSource(source) || !varIndex ?\n+                        decisionTable[currentKind.index][newKind.index] : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2798,0 +2798,3 @@\n+compiler.misc.feature.var.syntax.in.implicit.lambda=\\\n+    var syntax in implicit lambdas\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.misc.feature.var.syntax.in.implicit.lambda\n+\/\/ key: compiler.err.feature.not.supported.in.source.plural\n+\/\/ options: -source 10 -Xlint:-options\n+\n+import java.util.function.*;\n+\n+class VarInImplicitLambda {\n+    IntBinaryOperator f2 = (var x, y) -> x + y;\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/VarInImplicitLambda.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -110,2 +110,2 @@\n-        SOURCE_9(\"9\"),\n-        SOURCE_10(\"10\");\n+        SOURCE_10(\"10\"),\n+        SOURCE_11(\"11\");\n@@ -124,3 +124,3 @@\n-        EXPLIICT_SIMPLE(\"A\", ExplicitKind.EXPLICIT),\n-        EXPLIICT_SIMPLE_ARR1(\"A[]\", ExplicitKind.EXPLICIT),\n-        EXPLIICT_SIMPLE_ARR2(\"A[][]\", ExplicitKind.EXPLICIT),\n+        EXPLICIT_SIMPLE(\"A\", ExplicitKind.EXPLICIT),\n+        EXPLICIT_SIMPLE_ARR1(\"A[]\", ExplicitKind.EXPLICIT),\n+        EXPLICIT_SIMPLE_ARR2(\"A[][]\", ExplicitKind.EXPLICIT),\n@@ -160,7 +160,1 @@\n-            switch (explicitKind) {\n-                case IMPLICIT_VAR:\n-                    return (sk == SourceKind.SOURCE_9) ?\n-                            ExplicitKind.EXPLICIT : ExplicitKind.IMPLICIT_VAR;\n-                default:\n-                    return explicitKind;\n-            }\n+            return explicitKind;\n@@ -302,0 +296,9 @@\n+        for (int i = 0; i < lk.arity(); i++) {\n+            if (!lk.isShort() &&\n+                    pks[i].explicitKind(sk) == LambdaParameterKind.ExplicitKind.IMPLICIT_VAR &&\n+                    sk == SourceKind.SOURCE_10) {\n+                errorExpected = true;\n+                break;\n+            }\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaParserTest.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+ * @compile\/fail\/ref=VarInImplicitLambdaNegTest01_source10.out -source 10 -XDrawDiagnostics VarInImplicitLambdaNegTest01.java\n","filename":"test\/langtools\/tools\/javac\/var_implicit_lambda\/VarInImplicitLambdaNegTest01.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-VarInImplicitLambdaNegTest01.java:11:28: compiler.err.invalid.lambda.parameter.declaration: (compiler.misc.var.and.implicit.not.allowed)\n@@ -3,3 +2,4 @@\n-VarInImplicitLambdaNegTest01.java:13:28: compiler.err.invalid.lambda.parameter.declaration: (compiler.misc.var.and.explicit.not.allowed)\n-VarInImplicitLambdaNegTest01.java:14:28: compiler.err.invalid.lambda.parameter.declaration: (compiler.misc.implicit.and.explicit.not.allowed)\n-VarInImplicitLambdaNegTest01.java:16:52: compiler.err.var.not.allowed.array\n+VarInImplicitLambdaNegTest01.java:13:28: compiler.err.invalid.lambda.parameter.declaration: (compiler.misc.var.and.implicit.not.allowed)\n+VarInImplicitLambdaNegTest01.java:14:28: compiler.err.invalid.lambda.parameter.declaration: (compiler.misc.var.and.explicit.not.allowed)\n+VarInImplicitLambdaNegTest01.java:15:28: compiler.err.invalid.lambda.parameter.declaration: (compiler.misc.implicit.and.explicit.not.allowed)\n+VarInImplicitLambdaNegTest01.java:17:52: compiler.err.var.not.allowed.array\n","filename":"test\/langtools\/tools\/javac\/var_implicit_lambda\/VarInImplicitLambdaNegTest01.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,6 @@\n+- compiler.warn.source.no.bootclasspath: 10\n+VarInImplicitLambdaNegTest01.java:12:36: compiler.err.feature.not.supported.in.source.plural: (compiler.misc.feature.var.syntax.in.implicit.lambda), 10, 11\n+VarInImplicitLambdaNegTest01.java:15:28: compiler.err.invalid.lambda.parameter.declaration: (compiler.misc.implicit.and.explicit.not.allowed)\n+VarInImplicitLambdaNegTest01.java:17:52: compiler.err.var.not.allowed.here\n+3 errors\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/var_implicit_lambda\/VarInImplicitLambdaNegTest01_source10.out","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"}]}