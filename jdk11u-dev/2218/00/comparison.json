{"files":[{"patch":"@@ -39,1 +39,1 @@\n-  static const char field[] = \"FILE_DELTA_CHANGE\";\n+  static const char field[] = \"CHUNK_ROTATION_MONITOR\";\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,2 @@\n-  template(jdk_jfr_internal_JVM,          \"jdk\/jfr\/internal\/JVM\")\n+  template(jdk_jfr_internal_JVM,          \"jdk\/jfr\/internal\/JVM\")                                                    \\\n+  template(jfr_chunk_rotation_monitor,                                \"jdk\/jfr\/internal\/JVM$ChunkRotationMonitor\")   \\\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1396,0 +1396,6 @@\n+static inline bool is_excluded(const Klass* monitor_klass) {\n+  assert(monitor_klass != NULL, \"invariant\");\n+  NOT_JFR_RETURN_(false);\n+  JFR_ONLY(return vmSymbols::jfr_chunk_rotation_monitor() == monitor_klass->name());\n+}\n+\n@@ -1403,1 +1409,5 @@\n-  event->set_monitorClass(((oop)monitor->object())->klass());\n+  const Klass* monitor_klass = ((oop)monitor->object())->klass();\n+  if (is_excluded(monitor_klass)) {\n+    return;\n+  }\n+  event->set_monitorClass(monitor_klass);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -282,0 +282,2 @@\n+#define NOT_JFR_RETURN()      \/* next token must be ; *\/\n+#define NOT_JFR_RETURN_(code) \/* next token must be ; *\/\n@@ -284,0 +286,2 @@\n+#define NOT_JFR_RETURN()      {}\n+#define NOT_JFR_RETURN_(code) { return code; }\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,3 +41,0 @@\n-    \/\/ JVM signals file changes by doing Object#notifu on this object\n-    static final Object FILE_DELTA_CHANGE = new Object();\n-\n@@ -46,0 +43,9 @@\n+    private static class ChunkRotationMonitor {}\n+\n+    \/*\n+     * The JVM uses the chunk rotation monitor to notify Java that a rotation is warranted.\n+     * The monitor type is used to exclude jdk.JavaMonitorWait events from being generated\n+     * when Object.wait() is called on this monitor.\n+     *\/\n+    static final Object CHUNK_ROTATION_MONITOR = new ChunkRotationMonitor();\n+\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -447,2 +447,2 @@\n-            synchronized (JVM.FILE_DELTA_CHANGE) {\n-                JVM.FILE_DELTA_CHANGE.wait(duration < 10 ? 10 : duration);\n+            synchronized (JVM.CHUNK_ROTATION_MONITOR) {\n+                JVM.CHUNK_ROTATION_MONITOR.wait(duration < 10 ? 10 : duration);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}