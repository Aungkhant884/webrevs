{"files":[{"patch":"@@ -624,0 +624,5 @@\n+static bool is_in_asgct() {\n+  Thread* current_thread = Thread::current_or_null_safe();\n+  return current_thread != NULL && current_thread->is_Java_thread() && ((JavaThread*)current_thread)->in_asgct();\n+}\n+\n@@ -630,2 +635,6 @@\n-  guarantee(result == NULL || !result->is_zombie() || result->is_locked_by_vm() || VMError::is_error_reported(), \"unsafe access to zombie method\");\n-  return result;\n+  bool is_zombie = result != NULL && result->is_zombie();\n+  bool is_result_safe = !is_zombie || result->is_locked_by_vm() || VMError::is_error_reported();\n+  guarantee(is_result_safe || is_in_asgct(), \"unsafe access to zombie method\");\n+  \/\/ When in ASGCT the previous gurantee will pass for a zombie method but we still don't want that code blob returned in order\n+  \/\/ to minimize the chance of accessing dead memory\n+  return is_result_safe ? result : NULL;\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -554,0 +554,3 @@\n+  \/\/ !important! make sure all to call thread->set_in_asgct(false) before every return\n+  thread->set_in_asgct(true);\n+\n@@ -611,0 +614,1 @@\n+  thread->set_in_asgct(false);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1614,0 +1614,1 @@\n+  _in_asgct = false;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -931,0 +931,1 @@\n+  bool           _in_asgct;                      \/\/ Is set when this JavaThread is handling ASGCT call\n@@ -2057,0 +2058,4 @@\n+\n+  \/\/ AsyncGetCallTrace support\n+  inline bool in_asgct(void) {return _in_asgct;}\n+  inline void set_in_asgct(bool value) {_in_asgct = value;}\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}