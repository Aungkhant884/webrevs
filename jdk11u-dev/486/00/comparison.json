{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4981566 5028634 5094412 6304984 7025786 7025789 8001112 8028545 8000961 8030610 8028546 8188870 8173382 8173382\n+ * @bug 4981566 5028634 5094412 6304984 7025786 7025789 8001112 8028545 8000961 8030610 8028546 8188870 8173382 8173382 8245147\n@@ -46,0 +46,1 @@\n+import java.util.function.Consumer;\n@@ -77,6 +78,6 @@\n-        SIX(true,     \"50.0\",  \"6\", Versions::checksrc16),\n-        SEVEN(true,   \"51.0\",  \"7\", Versions::checksrc17),\n-        EIGHT(true,   \"52.0\",  \"8\", Versions::checksrc18),\n-        NINE(true,    \"53.0\",  \"9\", Versions::checksrc19),\n-        TEN(true,     \"54.0\", \"10\", Versions::checksrc110),\n-        ELEVEN(false, \"55.0\", \"11\", Versions::checksrc111);\n+        SIX(true,     \"50.0\",  \"6\", Versions::checksrc6),\n+        SEVEN(true,   \"51.0\",  \"7\", Versions::checksrc7),\n+        EIGHT(true,   \"52.0\",  \"8\", Versions::checksrc8),\n+        NINE(true,    \"53.0\",  \"9\", Versions::checksrc9),\n+        TEN(true,     \"54.0\", \"10\", Versions::checksrc10),\n+        ELEVEN(false, \"55.0\", \"11\", Versions::checksrc11);\n@@ -87,1 +88,1 @@\n-        private final BiConsumer<Versions, String[]> checker;\n+        private final BiConsumer<Versions, List<String>> checker;\n@@ -90,1 +91,1 @@\n-                             BiConsumer<Versions, String[]> checker) {\n+                             BiConsumer<Versions, List<String>> checker) {\n@@ -97,1 +98,1 @@\n-        public void checksrc(Versions version, String... args) {\n+        public void checksrc(Versions version, List<String> args) {\n@@ -120,1 +121,1 @@\n-            check(LATEST_MAJOR_VERSION, \"-source \" + source);\n+            check(LATEST_MAJOR_VERSION, List.of(\"-source \" + source));\n@@ -132,1 +133,1 @@\n-            check_source_target(dotOne, classFileVer, target, target);\n+            check_source_target(dotOne, List.of(classFileVer, target, target));\n@@ -135,1 +136,1 @@\n-                check_source_target(dotOne, classFileVer, source, target);\n+                check_source_target(dotOne, List.of(classFileVer, source, target));\n@@ -144,2 +145,2 @@\n-            st.checksrc(this, \"-source \" + st.target());\n-            st.checksrc(this, \"-source \" + st.target(), \"-target \" + st.target());\n+            st.checksrc(this, List.of(\"-source \" + st.target()));\n+            st.checksrc(this, List.of(\"-source \" + st.target(), \"-target \" + st.target()));\n@@ -148,2 +149,2 @@\n-                st.checksrc(this, \"-source 1.\" + st.target());\n-                st.checksrc(this, \"-source 1.\" + st.target(), \"-target 1.\" + st.target());\n+                st.checksrc(this, List.of(\"-source 1.\" + st.target()));\n+                st.checksrc(this, List.of(\"-source 1.\" + st.target(), \"-target 1.\" + st.target()));\n@@ -156,1 +157,1 @@\n-                st.checksrc(this, \"-target \" + st.target());\n+                st.checksrc(this, List.of(\"-target \" + st.target()));\n@@ -168,1 +169,1 @@\n-            fail(\"-source \" + sourceTargets[i].target(),\n+            fail(List.of(\"-source \" + sourceTargets[i].target(),\n@@ -170,1 +171,1 @@\n-                 \"Base.java\");\n+                         \"Base.java\"));\n@@ -175,1 +176,1 @@\n-            fail(\"-source \" + source, \"-target \" + source, \"Base.java\");\n+            fail(List.of(\"-source \" + source, \"-target \" + source, \"Base.java\"));\n@@ -185,1 +186,1 @@\n-    protected void printargs(String fname,String... args) {\n+    protected void printargs(String fname, List<String> args) {\n@@ -193,1 +194,1 @@\n-    protected void check_source_target(boolean dotOne, String... args) {\n+    protected void check_source_target(boolean dotOne, List<String> args) {\n@@ -195,1 +196,1 @@\n-        check_target(dotOne, args[0], args[1], args[2]);\n+        check_target(dotOne, List.of(args.get(0), args.get(1), args.get(2)));\n@@ -197,1 +198,1 @@\n-            check_target(dotOne, args[0], \"1.\" + args[1], args[2]);\n+            check_target(dotOne, List.of(args.get(0), \"1.\" + args.get(1), args.get(2)));\n@@ -201,2 +202,2 @@\n-    protected void check_target(boolean dotOne, String... args) {\n-        check(args[0], \"-source \" + args[1], \"-target \" + args[2]);\n+    protected void check_target(boolean dotOne, List<String> args) {\n+        check(args.get(0), List.of(\"-source \" + args.get(1), \"-target \" + args.get(2)));\n@@ -204,1 +205,1 @@\n-            check(args[0], \"-source \" + args[1], \"-target 1.\" + args[2]);\n+            check(args.get(0), List.of(\"-source \" + args.get(1), \"-target 1.\" + args.get(2)));\n@@ -208,1 +209,5 @@\n-    protected void check(String major, String... args) {\n+    protected void check(String major) {\n+        check(major, List.of());\n+    }\n+\n+    protected void check(String major, List<String> args) {\n@@ -234,9 +239,4 @@\n-    protected void checksrc16(String... args) {\n-        printargs(\"checksrc16\", args);\n-        int asize = args.length;\n-        String[] newargs = new String[asize + 1];\n-        System.arraycopy(args, 0, newargs, 0, asize);\n-        newargs[asize] = \"Base.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New17.java\";\n-        fail(newargs);\n+    protected void checksrc6(List<String> args) {\n+        printargs(\"checksrc6\", args);\n+        expectedPass(args, List.of(\"Base.java\"));\n+        expectedFail(args, List.of(\"New7.java\"));\n@@ -245,9 +245,4 @@\n-    protected void checksrc17(String... args) {\n-        printargs(\"checksrc17\", args);\n-        int asize = args.length;\n-        String[] newargs = new String[asize+1];\n-        System.arraycopy(args, 0, newargs,0 , asize);\n-        newargs[asize] = \"New17.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New18.java\";\n-        fail(newargs);\n+    protected void checksrc7(List<String> args) {\n+        printargs(\"checksrc7\", args);\n+        expectedPass(args, List.of(\"New7.java\"));\n+        expectedFail(args, List.of(\"New8.java\"));\n@@ -256,11 +251,4 @@\n-    protected void checksrc18(String... args) {\n-        printargs(\"checksrc18\", args);\n-        int asize = args.length;\n-        String[] newargs = new String[asize+1];\n-        System.arraycopy(args, 0, newargs,0 , asize);\n-        newargs[asize] = \"New17.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New18.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New110.java\";\n-        fail(newargs);\n+    protected void checksrc8(List<String> args) {\n+        printargs(\"checksrc8\", args);\n+        expectedPass(args, List.of(\"New7.java\", \"New8.java\"));\n+        expectedFail(args, List.of(\"New10.java\"));\n@@ -269,3 +257,29 @@\n-    protected void checksrc19(String... args) {\n-        printargs(\"checksrc19\", args);\n-        checksrc18(args);\n+    protected void checksrc9(List<String> args) {\n+        printargs(\"checksrc9\", args);\n+        expectedPass(args, List.of(\"New7.java\", \"New8.java\"));\n+        expectedFail(args, List.of(\"New10.java\"));\n+    }\n+\n+    protected void checksrc10(List<String> args) {\n+        printargs(\"checksrc10\", args);\n+        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\"));\n+        \/\/ Test fails because \"8211148: var in implicit lambdas shouldn't be accepted\n+        \/\/ for source < 11\" was not yet backported.\n+        \/\/expectedFail(args, List.of(\"New11.java\"));\n+    }\n+\n+    protected void checksrc11(List<String> args) {\n+        printargs(\"checksrc11\", args);\n+        expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\"));\n+        expectedFail(args, List.of(\"New14.java\"));\n+    }\n+\n+    protected void expected(List<String> args, List<String> fileNames,\n+                            Consumer<List<String>> passOrFail) {\n+        ArrayList<String> fullArguments = new ArrayList<>(args);\n+        \/\/ Issue compile with each filename in turn.\n+        for(String fileName : fileNames) {\n+            fullArguments.add(fileName);\n+            passOrFail.accept(fullArguments);\n+            fullArguments.remove(fullArguments.size() - 1);\n+        }\n@@ -274,11 +288,2 @@\n-    protected void checksrc110(String... args) {\n-        printargs(\"checksrc110\", args);\n-        int asize = args.length;\n-        String[] newargs = new String[asize+1];\n-        System.arraycopy(args, 0, newargs,0 , asize);\n-        newargs[asize] = \"New17.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New18.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New110.java\";\n-        pass(newargs);\n+    protected void expectedPass(List<String> args, List<String> fileNames) {\n+        expected(args, fileNames, this::pass);\n@@ -287,13 +292,2 @@\n-    protected void checksrc111(String... args) {\n-        printargs(\"checksrc111\", args);\n-        int asize = args.length;\n-        String[] newargs = new String[asize+1];\n-        System.arraycopy(args, 0, newargs,0 , asize);\n-        newargs[asize] = \"New17.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New18.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New110.java\";\n-        pass(newargs);\n-        newargs[asize] = \"New111.java\";\n-        pass(newargs);\n+    protected void expectedFail(List<String> args, List<String> fileNames) {\n+        expected(args, fileNames, this::fail);\n@@ -302,1 +296,1 @@\n-    protected void pass(String... args) {\n+    protected void pass(List<String> args) {\n@@ -305,1 +299,1 @@\n-        List<String> jcargs = new ArrayList<String>();\n+        List<String> jcargs = new ArrayList<>();\n@@ -340,1 +334,1 @@\n-    protected void fail(String... args) {\n+    protected void fail(List<String> args) {\n@@ -343,1 +337,1 @@\n-        List<String> jcargs = new ArrayList<String>();\n+        List<String> jcargs = new ArrayList<>();\n@@ -372,0 +366,2 @@\n+            System.out.println(\"GLGLGL!!! 6\");\n+            System.err.println(\"GLGLGL!!! 6\");\n@@ -376,1 +372,1 @@\n-    protected boolean compile(String sourceFile, List<String>options) {\n+    protected boolean compile(String sourceFile, List<String> options) {\n@@ -411,1 +407,1 @@\n-         * Create a file with a new feature in 1.7, not in 1.6 : \"<>\"\n+         * Create a file with a new feature in 7, not in 6 : \"<>\"\n@@ -413,1 +409,1 @@\n-        writeSourceFile(\"New17.java\",\n+        writeSourceFile(\"New7.java\",\n@@ -416,1 +412,1 @@\n-            \"class New17 { List<String> s = new ArrayList<>(); }\\n\"\n+            \"class New7 { List<String> s = new ArrayList<>(); }\\n\"\n@@ -420,1 +416,1 @@\n-         * Create a file with a new feature in 1.8, not in 1.7 : lambda\n+         * Create a file with a new feature in 8, not in 7 : lambda\n@@ -422,2 +418,2 @@\n-        writeSourceFile(\"New18.java\",\n-            \"public class New18 { \\n\" +\n+        writeSourceFile(\"New8.java\",\n+            \"public class New8 { \\n\" +\n@@ -431,1 +427,1 @@\n-         * Create a file with a new feature in 1.10, not in 1.9 : var\n+         * Create a file with a new feature in 10, not in 9 : var\n@@ -433,2 +429,2 @@\n-        writeSourceFile(\"New110.java\",\n-            \"public class New110 { \\n\" +\n+        writeSourceFile(\"New10.java\",\n+            \"public class New10 { \\n\" +\n@@ -444,3 +440,3 @@\n-        writeSourceFile(\"New111.java\",\n-            \"public class New111 { \\n\" +\n-            \"    static java.util.function.Function<String,String> f = (var x) -> x.substring(0);\\n\" +\n+        writeSourceFile(\"New11.java\",\n+            \"public class New11 { \\n\" +\n+            \"    static java.util.function.Function<String,String> f = (var x) -> x.substring(0); \\n\" +\n@@ -452,0 +448,17 @@\n+\n+        \/*\n+         * Create a file with a new feature in 14, not in 13 : switch expressions\n+         *\/\n+        writeSourceFile(\"New14.java\",\n+            \"public class New14 { \\n\" +\n+            \"    static { \\n\" +\n+            \"        int i = 5; \\n\" +\n+            \"        System.out.println( \\n\" +\n+            \"            switch(i) { \\n\" +\n+            \"                case 0 -> false; \\n\" +\n+            \"                default -> true; \\n\" +\n+            \"            } \\n\" +\n+            \"        ); \\n\" +\n+            \"    } \\n\" +\n+            \"} \\n\"\n+        );\n","filename":"test\/langtools\/tools\/javac\/versions\/Versions.java","additions":116,"deletions":103,"binary":false,"changes":219,"status":"modified"}]}