{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+static jrawMonitorID wait_lock;\n@@ -43,1 +44,0 @@\n-static jboolean printdump = JNI_FALSE;\n@@ -45,0 +45,1 @@\n+\n@@ -51,10 +52,3 @@\n-static int entry_count = 0;\n-static int entry_error_count = 0;\n-static int exit_count = 0;\n-static int exit_error_count = 0;\n-\n-void JNICALL VMInit(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr) {\n-    jvmtiError err;\n-\n-    err = jvmti_env->SetEventNotificationMode(JVMTI_ENABLE,\n-        JVMTI_EVENT_THREAD_START, NULL);\n+static void\n+lock(const char* func_name, jrawMonitorID lock) {\n+    jvmtiError err = jvmti->RawMonitorEnter(lock);\n@@ -62,2 +56,2 @@\n-        printf(\"Failed to enable THREAD_START event: %s (%d)\\n\",\n-               TranslateError(err), err);\n+        printf(\"%s: unexpected error in RawMonitorEnter: %s (%d)\\n\",\n+               func_name, TranslateError(err), err);\n@@ -66,20 +60,0 @@\n-\n-    if (caps.can_generate_method_entry_events) {\n-        err = jvmti_env->SetEventNotificationMode(JVMTI_ENABLE,\n-            JVMTI_EVENT_METHOD_ENTRY, NULL);\n-        if (err != JVMTI_ERROR_NONE) {\n-            printf(\"Failed to enable METHOD_ENTRY event: %s (%d)\\n\",\n-                   TranslateError(err), err);\n-            result = STATUS_FAILED;\n-        }\n-    }\n-\n-    if (caps.can_generate_method_exit_events) {\n-        err = jvmti_env->SetEventNotificationMode(JVMTI_ENABLE,\n-            JVMTI_EVENT_METHOD_EXIT, NULL);\n-        if (err != JVMTI_ERROR_NONE) {\n-            printf(\"Failed to enable METHOD_EXIT event: %s (%d)\\n\",\n-                   TranslateError(err), err);\n-            result = STATUS_FAILED;\n-        }\n-    }\n@@ -88,26 +62,3 @@\n-void JNICALL\n-ThreadStart(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n-    jvmtiError err;\n-    jvmtiThreadInfo thrInfo;\n-\n-    err = jvmti_env->RawMonitorEnter(access_lock);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(RawMonitorEnter#TS) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n-\n-    err = jvmti_env->GetThreadInfo(thread, &thrInfo);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(GetThreadInfo#TS) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n-    if (thrInfo.name != NULL && strcmp(thrInfo.name, \"thr1\") == 0) {\n-        thr_ptr = env->NewGlobalRef(thread);\n-        if (printdump == JNI_TRUE) {\n-            printf(\">>> ThreadStart: \\\"%s\\\", 0x%p\\n\", thrInfo.name, thr_ptr);\n-        }\n-    }\n-\n-    err = jvmti_env->RawMonitorExit(access_lock);\n+static void\n+unlock(const char* func_name, jrawMonitorID lock) {\n+    jvmtiError err = jvmti->RawMonitorExit(lock);\n@@ -115,2 +66,2 @@\n-        printf(\"(RawMonitorExit#TS) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n+        printf(\"%s: unexpected error in RawMonitorExit: %s (%d)\\n\",\n+               func_name, TranslateError(err), err);\n@@ -121,7 +72,3 @@\n-void JNICALL MethodEntry(jvmtiEnv *jvmti_env, JNIEnv *env,\n-        jthread thread, jmethodID mid) {\n-    jvmtiError err;\n-    jvmtiThreadInfo thrInfo;\n-    jint thrState;\n-\n-    err = jvmti_env->RawMonitorEnter(access_lock);\n+static void\n+wait(const char* func_name, jrawMonitorID lock, jint millis) {\n+    jvmtiError err = jvmti->RawMonitorWait(lock, (jlong)millis);\n@@ -129,2 +76,2 @@\n-        printf(\"(RawMonitorEnter#ME) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n+        printf(\"%s: unexpected error in RawMonitorWait: %s (%d)\\n\",\n+               func_name, TranslateError(err), err);\n@@ -133,0 +80,1 @@\n+}\n@@ -134,24 +82,7 @@\n-    entry_count++;\n-    err = jvmti_env->GetThreadState(thread, &thrState);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(GetThreadState#ME) unexpected error: %s (%d)\\n\",\n-            TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n-    if ((thrState & JVMTI_THREAD_STATE_RUNNABLE) == 0) {\n-        if (entry_error_count == 0) {\n-            err = jvmti_env->GetThreadInfo(thread, &thrInfo);\n-            if (err != JVMTI_ERROR_NONE) {\n-                printf(\"(GetThreadInfo#ME) unexpected error: %s (%d)\\n\",\n-                       TranslateError(err), err);\n-                result = STATUS_FAILED;\n-            }\n-            printf(\"Wrong thread \\\"%s\\\" state on MethodEntry event:\\n\",\n-                   thrInfo.name);\n-            printf(\"    expected: JVMTI_THREAD_STATE_RUNNABLE\\n\");\n-            printf(\"    got: %s (%d)\\n\",\n-                   TranslateState(thrState), thrState);\n-        }\n-        entry_error_count++;\n-        result = STATUS_FAILED;\n-    }\n+static void\n+set_notification_mode(const char* event_name,\n+                      jvmtiEventMode mode,\n+                      jvmtiEvent event_type,\n+                      jthread event_thread) {\n+    const char* action = (mode == JVMTI_ENABLE) ? \"enable\" : \"disable\";\n+    jvmtiError err = jvmti->SetEventNotificationMode(mode, event_type, event_thread);\n@@ -159,1 +90,0 @@\n-    err = jvmti_env->RawMonitorExit(access_lock);\n@@ -161,2 +91,2 @@\n-        printf(\"(RawMonitorExit#ME) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n+        printf(\"Failed to %s %s event: %s (%d)\\n\",\n+               action, event_name, TranslateError(err), err);\n@@ -165,0 +95,1 @@\n+}\n@@ -166,0 +97,3 @@\n+void JNICALL VMInit(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr) {\n+    set_notification_mode(\"JVMTI_EVENT_THREAD_START\", JVMTI_ENABLE,\n+                          JVMTI_EVENT_THREAD_START, NULL);\n@@ -168,3 +102,2 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti_env, JNIEnv *env,\n-        jthread thread, jmethodID mid,\n-        jboolean was_poped_by_exception, jvalue return_value) {\n+void JNICALL\n+ThreadStart(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n@@ -173,1 +106,0 @@\n-    jint thrState;\n@@ -175,6 +107,1 @@\n-    err = jvmti_env->RawMonitorEnter(access_lock);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(RawMonitorEnter#MX) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n+    lock(\"ThreadStart\", access_lock);\n@@ -182,2 +109,1 @@\n-    exit_count++;\n-    err = jvmti_env->GetThreadState(thread, &thrState);\n+    err = jvmti_env->GetThreadInfo(thread, &thrInfo);\n@@ -185,2 +111,2 @@\n-        printf(\"(GetThreadState#MX) unexpected error: %s (%d)\\n\",\n-            TranslateError(err), err);\n+        printf(\"(GetThreadInfo#TS) unexpected error: %s (%d)\\n\",\n+               TranslateError(err), err);\n@@ -189,16 +115,5 @@\n-    if ((thrState & JVMTI_THREAD_STATE_RUNNABLE) == 0) {\n-        if (exit_error_count == 0) {\n-            err = jvmti_env->GetThreadInfo(thread, &thrInfo);\n-            if (err != JVMTI_ERROR_NONE) {\n-                printf(\"(GetThreadInfo#MX) unexpected error: %s (%d)\\n\",\n-                       TranslateError(err), err);\n-                result = STATUS_FAILED;\n-            }\n-            printf(\"Wrong thread \\\"%s\\\" state on MethodExit event:\\n\",\n-                   thrInfo.name);\n-            printf(\"    expected: JVMTI_THREAD_STATE_RUNNABLE\\n\");\n-            printf(\"    got: %s (%d)\\n\",\n-                   TranslateState(thrState), thrState);\n-        }\n-        exit_error_count++;\n-        result = STATUS_FAILED;\n+    if (thrInfo.name != NULL && strcmp(thrInfo.name, \"thr1\") == 0) {\n+        thr_ptr = env->NewGlobalRef(thread);\n+        printf(\">>> ThreadStart: \\\"%s\\\", 0x%p\\n\", thrInfo.name, thr_ptr);\n+        set_notification_mode(\"JVMTI_EVENT_THREAD_START\", JVMTI_DISABLE,\n+                              JVMTI_EVENT_THREAD_START, NULL);\n@@ -207,6 +122,1 @@\n-    err = jvmti_env->RawMonitorExit(access_lock);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(RawMonitorExit#MX) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n+    unlock(\"ThreadStart\", access_lock);\n@@ -226,0 +136,1 @@\n+\n@@ -230,3 +141,1 @@\n-    if (options != NULL && strcmp(options, \"printdump\") == 0) {\n-        printdump = JNI_TRUE;\n-    }\n+    printf(\"Agent_Initialize started\\n\");\n@@ -263,1 +172,8 @@\n-        printf(\"(CreateRawMonitor) unexpected error: %s (%d)\\n\",\n+        printf(\"(CreateRawMonitor)#access_lock unexpected error: %s (%d)\\n\",\n+               TranslateError(err), err);\n+        return JNI_ERR;\n+    }\n+\n+    err = jvmti->CreateRawMonitor(\"_wait_lock\", &wait_lock);\n+    if (err != JVMTI_ERROR_NONE) {\n+        printf(\"(CreateRawMonitor#wait_lock) unexpected error: %s (%d)\\n\",\n@@ -270,10 +186,0 @@\n-    if (caps.can_generate_method_entry_events) {\n-        callbacks.MethodEntry = &MethodEntry;\n-    } else {\n-        printf(\"Warning: MethodEntry event is not implemented\\n\");\n-    }\n-    if (caps.can_generate_method_exit_events) {\n-        callbacks.MethodExit = &MethodExit;\n-    } else {\n-        printf(\"Warning: MethodExit event is not implemented\\n\");\n-    }\n@@ -287,7 +193,2 @@\n-    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE,\n-        JVMTI_EVENT_VM_INIT, NULL);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"Failed to enable VM_INIT event: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n+    set_notification_mode(\"JVMTI_EVENT_VM_INIT\", JVMTI_ENABLE,\n+                          JVMTI_EVENT_VM_INIT, NULL);\n@@ -295,0 +196,1 @@\n+    printf(\"Agent_Initialize finished\\n\\n\");\n@@ -302,1 +204,0 @@\n-    jrawMonitorID wait_lock;\n@@ -306,0 +207,1 @@\n+    printf(\"native method checkStatus started\\n\");\n@@ -319,6 +221,0 @@\n-    err = jvmti->CreateRawMonitor(\"_wait_lock\", &wait_lock);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(CreateRawMonitor) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n@@ -335,24 +231,3 @@\n-        err = jvmti->RawMonitorEnter(wait_lock);\n-        if (err != JVMTI_ERROR_NONE) {\n-            printf(\"(RawMonitorEnter) unexpected error: %s (%d)\\n\",\n-                   TranslateError(err), err);\n-            result = STATUS_FAILED;\n-        }\n-        err = jvmti->RawMonitorWait(wait_lock, (jlong)millis);\n-        if (err != JVMTI_ERROR_NONE) {\n-            printf(\"(RawMonitorWait) unexpected error: %s (%d)\\n\",\n-                   TranslateError(err), err);\n-            result = STATUS_FAILED;\n-        }\n-        err = jvmti->RawMonitorExit(wait_lock);\n-        if (err != JVMTI_ERROR_NONE) {\n-            printf(\"(RawMonitorExit) unexpected error: %s (%d)\\n\",\n-                   TranslateError(err), err);\n-            result = STATUS_FAILED;\n-        }\n-    }\n-    err = jvmti->DestroyRawMonitor(wait_lock);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"(DestroyRawMonitor) unexpected error: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n+        lock(\"checkStatus\", wait_lock);\n+        wait(\"checkStatus\", wait_lock, millis);\n+        unlock(\"checkStatus\", wait_lock);\n@@ -361,2 +236,1 @@\n-    if (printdump == JNI_TRUE) {\n-        printf(\">>> thread \\\"thr1\\\" (0x%p) state: %s (%d)\\n\",\n+    printf(\">>> thread \\\"thr1\\\" (0x%p) state: %s (%d)\\n\",\n@@ -364,1 +238,0 @@\n-    }\n@@ -374,0 +247,1 @@\n+    printf(\"native method checkStatus finished\\n\\n\");\n@@ -378,45 +252,1 @@\n-    jvmtiError err;\n-\n-    err = jvmti->SetEventNotificationMode(JVMTI_DISABLE,\n-        JVMTI_EVENT_THREAD_START, NULL);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"Failed to disable THREAD_START event: %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-    }\n-\n-    if (caps.can_generate_method_entry_events) {\n-        err = jvmti->SetEventNotificationMode(JVMTI_DISABLE,\n-            JVMTI_EVENT_METHOD_ENTRY, NULL);\n-        if (err != JVMTI_ERROR_NONE) {\n-            printf(\"Failed to disable METHOD_ENTRY event: %s (%d)\\n\",\n-                   TranslateError(err), err);\n-            result = STATUS_FAILED;\n-        }\n-    }\n-\n-    if (caps.can_generate_method_exit_events) {\n-        err = jvmti->SetEventNotificationMode(JVMTI_DISABLE,\n-            JVMTI_EVENT_METHOD_EXIT, NULL);\n-        if (err != JVMTI_ERROR_NONE) {\n-            printf(\"Failed to disable METHOD_EXIT event: %s (%d)\\n\",\n-                   TranslateError(err), err);\n-            result = STATUS_FAILED;\n-        }\n-    }\n-\n-    if (printdump == JNI_TRUE) {\n-        printf(\">>> total number of method entry events = %d\\n\", entry_count);\n-        printf(\">>> total number of method exit events = %d\\n\", exit_count);\n-    }\n-\n-    if (entry_error_count != 0) {\n-        printf(\"Total number of errors on METHOD_ENTRY: %d of %d events\\n\",\n-               entry_error_count, entry_count);\n-    }\n-\n-    if (exit_error_count != 0) {\n-        printf(\"Total number of errors on METHOD_EXIT: %d of %d events\\n\",\n-               exit_error_count, exit_count);\n-    }\n-\n+    printf(\"native method getRes: result: %d\\n\\n\", result);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetThreadState\/thrstat001\/thrstat001.cpp","additions":64,"deletions":234,"binary":false,"changes":298,"status":"modified"}]}