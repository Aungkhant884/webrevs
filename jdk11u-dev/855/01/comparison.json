{"files":[{"patch":"@@ -1032,10 +1032,6 @@\n-    \/**\n-     * Enter the symbols found in a list of parse trees if the compilation\n-     * is expected to proceed beyond anno processing into attr.\n-     * As a side-effect, this puts elements on the \"todo\" list.\n-     * Also stores a list of all top level classes in rootClasses.\n-     *\/\n-    public List<JCCompilationUnit> enterTreesIfNeeded(List<JCCompilationUnit> roots) {\n-       if (shouldStop(CompileState.ATTR))\n-           return List.nil();\n-        return enterTrees(initModules(roots));\n+   \/**\n+    * Returns true iff the compilation will continue after annotation processing\n+    * is done.\n+    *\/\n+    public boolean continueAfterProcessAnnotations() {\n+        return !shouldStop(CompileState.ATTR);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1389,1 +1389,0 @@\n-        round.finalCompiler();\n@@ -1396,3 +1395,0 @@\n-        \/\/ Free resources\n-        this.close();\n-\n@@ -1403,1 +1399,9 @@\n-        compiler.enterTreesIfNeeded(roots);\n+        if (compiler.continueAfterProcessAnnotations()) {\n+            round.finalCompiler();\n+            compiler.enterTrees(compiler.initModules(roots));\n+        } else {\n+            compiler.todo.clear();\n+        }\n+\n+        \/\/ Free resources\n+        this.close();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8210649\n+ * @summary Check that diagnostics can be printed even after the compilation\n+ *          stopped.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.TestRunner toolbox.ToolBox T8210649\n+ * @run main T8210649\n+ *\/\n+\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+import javax.tools.DiagnosticCollector;\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.function.Consumer;\n+import javax.tools.DiagnosticListener;\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.TestRunner.Test;\n+import toolbox.ToolBox;\n+\n+public class T8210649 extends TestRunner {\n+\n+    public static void main(String... args) throws Exception {\n+        new T8210649().runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    public T8210649() {\n+        super(System.err);\n+    }\n+\n+    @Test\n+    public void testErrorsAfter(Path outerBase) throws Exception {\n+        Path libSrc = outerBase.resolve(\"libsrc\");\n+        tb.writeJavaFiles(libSrc,\n+                          \"package lib;\\n\" +\n+                          \"@lib2.Helper(1)\\n\" +\n+                          \"public @interface Lib {\\n\" +\n+                          \"}\",\n+                          \"package lib2;\\n\" +\n+                          \"public @interface Helper {\\n\" +\n+                          \"    public int value() default 0;\\n\" +\n+                          \"}\");\n+        Path libClasses = outerBase.resolve(\"libclasses\");\n+        Files.createDirectories(libClasses);\n+        new JavacTask(tb)\n+                .outdir(libClasses.toString())\n+                .files(tb.findJavaFiles(libSrc))\n+                .run()\n+                .writeAll();\n+        Files.delete(libClasses.resolve(\"lib2\").resolve(\"Helper.class\"));\n+        Path src = outerBase.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                          \"package t;\\n\" +\n+                          \"import lib.Lib;\\n\" +\n+                          \"public class T {\\n\" +\n+                          \"  Undefined<String> undef() {}\\n\" +\n+                          \"}\");\n+        Path classes = outerBase.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        Path tTarget = classes.resolve(\"t\").resolve(\"T.class\");\n+        Files.createDirectories(tTarget.getParent());\n+        try (OutputStream in = Files.newOutputStream(tTarget)) {}\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        try (StandardJavaFileManager sjfm = compiler.getStandardFileManager(null, null, null)) {\n+            Consumer<DiagnosticListener<JavaFileObject>> runCompiler = dl -> {\n+                try {\n+                    List<String> options = List.of(\"-processor\", \"T8210649$P\",\n+                                                   \"-processorpath\", System.getProperty(\"test.classes\"),\n+                                                   \"-classpath\", libClasses.toString() + \":\" + classes.toString(),\n+                                                   \"-d\", classes.toString());\n+                    ToolProvider.getSystemJavaCompiler()\n+                                .getTask(null, null, dl, options, null, sjfm.getJavaFileObjects(tb.findJavaFiles(src)))\n+                                .call();\n+                } catch (IOException ex) {\n+                    throw new IllegalStateException(ex);\n+                }\n+            };\n+\n+            List<String> expected = new ArrayList<>();\n+            runCompiler.accept(d -> expected.add(d.getMessage(null)));\n+\n+            DiagnosticCollector<JavaFileObject> dc = new DiagnosticCollector<>();\n+            runCompiler.accept(dc);\n+\n+            List<String> actual = dc.getDiagnostics()\n+                                    .stream()\n+                                    .map(d -> d.getMessage(null))\n+                                    .collect(Collectors.toList());\n+            if (!expected.equals(actual)) {\n+                throw new IllegalStateException(\"Unexpected output: \" + actual);\n+            }\n+        }\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static class P extends AbstractProcessor {\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/T8210649.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}