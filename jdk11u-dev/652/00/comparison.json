{"files":[{"patch":"@@ -5320,1 +5320,1 @@\n-  predicate(os::is_MP());\n+  predicate(VM_Version::has_multiprocessing_extensions());\n@@ -5337,1 +5337,1 @@\n-  predicate(!os::is_MP());\n+  predicate(!VM_Version::has_multiprocessing_extensions());\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -437,1 +437,3 @@\n-    assert(VM_Version::arm_arch() >= 7 && os::is_MP(), \"no pldw on this processor\");\n+    assert(!VM_Version::is_initialized() ||\n+           (VM_Version::arm_arch() >= 7 && VM_Version::has_multiprocessing_extensions()),\n+           \"PLDW is available on ARMv7 with Multiprocessing Extensions only\");\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm_32.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+  static bool has_multiprocessing_extensions() { return true; }\n@@ -67,0 +68,1 @@\n+    mp_ext = 3\n@@ -76,0 +78,1 @@\n+    mp_ext_m  = 1 << mp_ext\n@@ -118,0 +121,1 @@\n+  static bool has_multiprocessing_extensions() { return (_features & mp_ext_m) != 0; }\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+  typedef bool (*check_mp_ext_t)(int *addr);\n@@ -98,0 +99,14 @@\n+\n+  address generate_check_mp_ext() {\n+    StubCodeMark mark(this, \"VM_Version\", \"check_mp_ext\");\n+    address start = __ pc();\n+\n+    \/\/ PLDW is available with Multiprocessing Extensions only\n+    __ pldw(Address(R0));\n+    \/\/ Return true if instruction caused no signals\n+    __ mov(R0, 1);\n+    \/\/ JVM_handle_linux_signal moves PC here if SIGILL happens\n+    __ bx(LR);\n+\n+    return start;\n+  };\n@@ -106,0 +121,1 @@\n+extern \"C\" address check_mp_ext_fault_instr;\n@@ -168,0 +184,7 @@\n+  address check_mp_ext_pc = g.generate_check_mp_ext();\n+  check_mp_ext_t check_mp_ext = CAST_TO_FN_PTR(check_mp_ext_t, check_mp_ext_pc);\n+  check_mp_ext_fault_instr = (address)check_mp_ext;\n+  int dummy_local_variable;\n+  if (check_mp_ext(&dummy_local_variable)) {\n+    _features |= mp_ext_m;\n+  }\n@@ -250,1 +273,1 @@\n-  jio_snprintf(buf, sizeof(buf), \"(ARMv%d)%s%s%s\",\n+  jio_snprintf(buf, sizeof(buf), \"(ARMv%d)%s%s%s%s\",\n@@ -254,1 +277,2 @@\n-               (has_simd() ? \", simd\" : \"\"));\n+               (has_simd() ? \", simd\" : \"\"),\n+               (has_multiprocessing_extensions() ? \", mp_ext\" : \"\"));\n","filename":"src\/hotspot\/cpu\/arm\/vm_version_arm_32.cpp","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -262,0 +262,1 @@\n+extern \"C\" address check_mp_ext_fault_instr;\n@@ -265,0 +266,1 @@\n+address check_mp_ext_fault_instr = NULL;\n@@ -286,1 +288,2 @@\n-       NOT_AARCH64(|| info->si_addr == (caddr_t)check_vfp3_32_fault_instr))) {\n+       NOT_AARCH64(|| info->si_addr == (caddr_t)check_vfp3_32_fault_instr)\n+       NOT_AARCH64(|| info->si_addr == (caddr_t)check_mp_ext_fault_instr))) {\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}