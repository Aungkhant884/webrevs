{"files":[{"patch":"@@ -3008,1 +3008,1 @@\n-          uintptr_t offset;\n+          uint64_t offset;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1535,1 +1535,1 @@\n-void Assembler::adrp(Register reg1, const Address &dest, uintptr_t &byte_offset) {\n+void Assembler::adrp(Register reg1, const Address &dest, uint64_t &byte_offset) {\n@@ -1705,1 +1705,1 @@\n-  uint64_t uimm = (uint64_t)uabs(imm);\n+  uint64_t uimm = (uint64_t)uabs((jlong)imm);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -383,1 +383,1 @@\n-  Address(Register r, int64_t o)\n+  Address(Register r, long o)\n@@ -385,1 +385,7 @@\n-  Address(Register r, uint64_t o)\n+  Address(Register r, long long o)\n+    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n+  Address(Register r, unsigned int o)\n+    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n+  Address(Register r, unsigned long o)\n+    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n+  Address(Register r, unsigned long long o)\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -408,1 +408,1 @@\n-    uintptr_t offset;\n+    uint64_t offset;\n@@ -426,1 +426,1 @@\n-    uintptr_t offset;\n+    uint64_t offset;\n@@ -1495,1 +1495,1 @@\n-    snprintf(buffer, sizeof(buffer), \"0x%\"PRIX64, imm64);\n+    snprintf(buffer, sizeof(buffer), \"0x%\"PRIX64, (uint64_t)imm64);\n@@ -2499,1 +2499,1 @@\n-      tty->print_cr(\" pc = 0x%016lx\", pc);\n+      tty->print_cr(\" pc = 0x%016\" PRIx64, pc);\n@@ -2505,31 +2505,31 @@\n-      tty->print_cr(\" r0 = 0x%016lx\", regs[0]);\n-      tty->print_cr(\" r1 = 0x%016lx\", regs[1]);\n-      tty->print_cr(\" r2 = 0x%016lx\", regs[2]);\n-      tty->print_cr(\" r3 = 0x%016lx\", regs[3]);\n-      tty->print_cr(\" r4 = 0x%016lx\", regs[4]);\n-      tty->print_cr(\" r5 = 0x%016lx\", regs[5]);\n-      tty->print_cr(\" r6 = 0x%016lx\", regs[6]);\n-      tty->print_cr(\" r7 = 0x%016lx\", regs[7]);\n-      tty->print_cr(\" r8 = 0x%016lx\", regs[8]);\n-      tty->print_cr(\" r9 = 0x%016lx\", regs[9]);\n-      tty->print_cr(\"r10 = 0x%016lx\", regs[10]);\n-      tty->print_cr(\"r11 = 0x%016lx\", regs[11]);\n-      tty->print_cr(\"r12 = 0x%016lx\", regs[12]);\n-      tty->print_cr(\"r13 = 0x%016lx\", regs[13]);\n-      tty->print_cr(\"r14 = 0x%016lx\", regs[14]);\n-      tty->print_cr(\"r15 = 0x%016lx\", regs[15]);\n-      tty->print_cr(\"r16 = 0x%016lx\", regs[16]);\n-      tty->print_cr(\"r17 = 0x%016lx\", regs[17]);\n-      tty->print_cr(\"r18 = 0x%016lx\", regs[18]);\n-      tty->print_cr(\"r19 = 0x%016lx\", regs[19]);\n-      tty->print_cr(\"r20 = 0x%016lx\", regs[20]);\n-      tty->print_cr(\"r21 = 0x%016lx\", regs[21]);\n-      tty->print_cr(\"r22 = 0x%016lx\", regs[22]);\n-      tty->print_cr(\"r23 = 0x%016lx\", regs[23]);\n-      tty->print_cr(\"r24 = 0x%016lx\", regs[24]);\n-      tty->print_cr(\"r25 = 0x%016lx\", regs[25]);\n-      tty->print_cr(\"r26 = 0x%016lx\", regs[26]);\n-      tty->print_cr(\"r27 = 0x%016lx\", regs[27]);\n-      tty->print_cr(\"r28 = 0x%016lx\", regs[28]);\n-      tty->print_cr(\"r30 = 0x%016lx\", regs[30]);\n-      tty->print_cr(\"r31 = 0x%016lx\", regs[31]);\n+      tty->print_cr(\" r0 = 0x%016\" PRIx64, regs[0]);\n+      tty->print_cr(\" r1 = 0x%016\" PRIx64, regs[1]);\n+      tty->print_cr(\" r2 = 0x%016\" PRIx64, regs[2]);\n+      tty->print_cr(\" r3 = 0x%016\" PRIx64, regs[3]);\n+      tty->print_cr(\" r4 = 0x%016\" PRIx64, regs[4]);\n+      tty->print_cr(\" r5 = 0x%016\" PRIx64, regs[5]);\n+      tty->print_cr(\" r6 = 0x%016\" PRIx64, regs[6]);\n+      tty->print_cr(\" r7 = 0x%016\" PRIx64, regs[7]);\n+      tty->print_cr(\" r8 = 0x%016\" PRIx64, regs[8]);\n+      tty->print_cr(\" r9 = 0x%016\" PRIx64, regs[9]);\n+      tty->print_cr(\"r10 = 0x%016\" PRIx64, regs[10]);\n+      tty->print_cr(\"r11 = 0x%016\" PRIx64, regs[11]);\n+      tty->print_cr(\"r12 = 0x%016\" PRIx64, regs[12]);\n+      tty->print_cr(\"r13 = 0x%016\" PRIx64, regs[13]);\n+      tty->print_cr(\"r14 = 0x%016\" PRIx64, regs[14]);\n+      tty->print_cr(\"r15 = 0x%016\" PRIx64, regs[15]);\n+      tty->print_cr(\"r16 = 0x%016\" PRIx64, regs[16]);\n+      tty->print_cr(\"r17 = 0x%016\" PRIx64, regs[17]);\n+      tty->print_cr(\"r18 = 0x%016\" PRIx64, regs[18]);\n+      tty->print_cr(\"r19 = 0x%016\" PRIx64, regs[19]);\n+      tty->print_cr(\"r20 = 0x%016\" PRIx64, regs[20]);\n+      tty->print_cr(\"r21 = 0x%016\" PRIx64, regs[21]);\n+      tty->print_cr(\"r22 = 0x%016\" PRIx64, regs[22]);\n+      tty->print_cr(\"r23 = 0x%016\" PRIx64, regs[23]);\n+      tty->print_cr(\"r24 = 0x%016\" PRIx64, regs[24]);\n+      tty->print_cr(\"r25 = 0x%016\" PRIx64, regs[25]);\n+      tty->print_cr(\"r26 = 0x%016\" PRIx64, regs[26]);\n+      tty->print_cr(\"r27 = 0x%016\" PRIx64, regs[27]);\n+      tty->print_cr(\"r28 = 0x%016\" PRIx64, regs[28]);\n+      tty->print_cr(\"r30 = 0x%016\" PRIx64, regs[30]);\n+      tty->print_cr(\"r31 = 0x%016\" PRIx64, regs[31]);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -473,4 +473,1 @@\n-  inline void mov(Register dst, address addr)\n-  {\n-    mov_immediate64(dst, (uint64_t)addr);\n-  }\n+  inline void mov(Register dst, address addr)             { mov_immediate64(dst, (uint64_t)addr); }\n@@ -478,4 +475,6 @@\n-  inline void mov(Register dst, uint64_t imm64)\n-  {\n-    mov_immediate64(dst, imm64);\n-  }\n+  inline void mov(Register dst, int imm64)                { mov_immediate64(dst, (uint64_t)imm64); }\n+  inline void mov(Register dst, long imm64)               { mov_immediate64(dst, (uint64_t)imm64); }\n+  inline void mov(Register dst, long long imm64)          { mov_immediate64(dst, (uint64_t)imm64); }\n+  inline void mov(Register dst, unsigned int imm64)       { mov_immediate64(dst, (uint64_t)imm64); }\n+  inline void mov(Register dst, unsigned long imm64)      { mov_immediate64(dst, (uint64_t)imm64); }\n+  inline void mov(Register dst, unsigned long long imm64) { mov_immediate64(dst, (uint64_t)imm64); }\n@@ -488,10 +487,0 @@\n-  inline void mov(Register dst, int64_t l)\n-  {\n-    mov(dst, (uint64_t)l);\n-  }\n-\n-  inline void mov(Register dst, int i)\n-  {\n-    mov(dst, (int64_t)i);\n-  }\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"}]}