{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- *\n+ * @test\n@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -30,0 +31,3 @@\n+\n+import jdk.test.lib.NetworkConfiguration;\n+\n@@ -31,1 +35,0 @@\n-import java.util.Enumeration;\n@@ -33,0 +36,1 @@\n+import java.util.stream.Collectors;\n@@ -35,33 +39,3 @@\n-\n-    public static void main(String args[]) throws Exception {\n-\n-        boolean ipv6_available = false;\n-        NetworkInterface ni = null;\n-\n-        \/*\n-         * Examine the network interfaces and determine :-\n-         *\n-         * 1. If host has IPv6 support\n-         * 2. Get reference to a non-loopback interface\n-         *\/\n-        Enumeration nifs = NetworkInterface.getNetworkInterfaces();\n-        while (nifs.hasMoreElements()) {\n-            NetworkInterface this_ni = (NetworkInterface)nifs.nextElement();\n-\n-            Enumeration addrs = this_ni.getInetAddresses();\n-            while (addrs.hasMoreElements()) {\n-                InetAddress addr = (InetAddress)addrs.nextElement();\n-                if (addr instanceof Inet6Address) {\n-                    ipv6_available = true;\n-                }\n-\n-                if (!addr.isLoopbackAddress() && ni == null) {\n-                    ni = this_ni;\n-                }\n-            }\n-\n-            if (ipv6_available) {\n-                break;\n-            }\n-        }\n-\n+    public static void runTest(NetworkInterface ni,\n+                               String[] multicasts,\n+                               String[] nonMulticasts) throws Exception {\n@@ -70,13 +44,0 @@\n-        String multicasts[] = {\n-                \"224.80.80.80\",\n-                \"ff01::1\",\n-                \"ff02::1234\",\n-                \"ff05::a\",\n-                \"ff0e::1234:a\" };\n-\n-        String non_multicasts[] = {\n-                \"129.1.1.1\",\n-                \"::1\",\n-                \"::129.1.1.1\",\n-                \"fe80::a00:20ff:fee5:bc02\" };\n-\n@@ -86,2 +47,1 @@\n-\n-        for (int i=0; i<multicasts.length; i++) {\n+        for (int i = 0; i < multicasts.length; i++) {\n@@ -89,5 +49,0 @@\n-            if (ia instanceof Inet6Address && !ipv6_available) {\n-                continue;\n-            }\n-\n-            System.out.println(\"Test: \" + ia);\n@@ -95,0 +50,1 @@\n+            System.out.println(\"Test: \" + ia + \" \" + \" ni: \" + ni);\n@@ -103,2 +59,2 @@\n-                s.joinGroup(new InetSocketAddress(ia,0), ni);\n-                s.leaveGroup(new InetSocketAddress(ia,0), ni);\n+                s.joinGroup(new InetSocketAddress(ia, 0), ni);\n+                s.leaveGroup(new InetSocketAddress(ia, 0), ni);\n@@ -114,7 +70,2 @@\n-\n-        for (int i=0; i<non_multicasts.length; i++) {\n-            InetAddress ia = InetAddress.getByName(non_multicasts[i]);\n-            if (ia instanceof Inet6Address && !ipv6_available) {\n-                continue;\n-            }\n-\n+        for (int i = 0; i < nonMulticasts.length; i++) {\n+            InetAddress ia = InetAddress.getByName(nonMulticasts[i]);\n@@ -133,1 +84,0 @@\n-\n@@ -139,3 +89,0 @@\n-\n-        \/* done *\/\n-\n@@ -143,1 +90,0 @@\n-\n@@ -149,0 +95,44 @@\n+\n+    public static void main(String args[]) throws Exception {\n+\n+        String[] multicastIPv4 = {\n+                \"224.80.80.80\",\n+        };\n+        String[] multicastIPv6 = {\n+                \"ff01::1\",\n+                \"ff02::1234\",\n+                \"ff05::a\",\n+                \"ff0e::1234:a\"};\n+\n+        String[] nonMulticastIPv4 = {\n+                \"129.1.1.1\"\n+        };\n+\n+        String[] nonMulticastIPv6 = {\n+                \"::1\",\n+                \"::129.1.1.1\",\n+                \"fe80::a00:20ff:fee5:bc02\"};\n+\n+        \/*\n+         * Examine the network interfaces and determine :-\n+         *\n+         * 1. If host has IPv6 support\n+         * 2. Get reference to a non-loopback interface\n+         *\/\n+        NetworkConfiguration nc = NetworkConfiguration.probe();\n+        var ipv6List = nc.ip6MulticastInterfaces(false)\n+                .collect(Collectors.toList());\n+\n+        var ipv4List = nc.ip4MulticastInterfaces(false)\n+                .collect(Collectors.toList());\n+\n+        if (ipv6List.retainAll(ipv4List)) {\n+            runTest(ipv6List.get(0), multicastIPv4, nonMulticastIPv4);\n+            runTest(ipv6List.get(0), multicastIPv6, nonMulticastIPv6);\n+        } else {\n+            if (!ipv4List.isEmpty())\n+                runTest(ipv4List.get(0), multicastIPv4, nonMulticastIPv4);\n+            if (!ipv6List.isEmpty())\n+                runTest(ipv6List.get(0), multicastIPv6, nonMulticastIPv6);\n+        }\n+    }\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/MulticastAddresses.java","additions":60,"deletions":70,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+\/*\n+ * @test\n+ * @summary Check if MulticastSocket sets SO_REUSEADDR\n+ *\/\n+\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/Reuse.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * Regression test for URLClassLoader getURLs() and addURL() methods.\n+ * @test\n+ * @summary Regression test for URLClassLoader getURLs() and addURL() methods.\n@@ -31,1 +32,3 @@\n-class GetURLsTest {\n+public class GetURLsTest {\n+    static final String TEST_DIR = System.getProperty(\"test.src\", \".\");\n+\n@@ -33,0 +36,2 @@\n+        File testJars = new File(TEST_DIR, \"jars\");\n+\n@@ -40,1 +45,1 @@\n-        ucl.addURL(new File(\"jars\", \"class_path_test.jar\").toURL());\n+        ucl.addURL(new File(testJars, \"class_path_test.jar\").toURL());\n","filename":"test\/jdk\/java\/net\/URLClassLoader\/GetURLsTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}