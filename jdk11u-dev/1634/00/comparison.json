{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,8 @@\n+    public static final double TIMEOUT_FACTOR;\n+    static {\n+        String toFactor = System.getProperty(\"test.timeout.factor\", \"1.0\");\n+        TIMEOUT_FACTOR = Double.parseDouble(toFactor);\n+    }\n+    static int adjustCount(int count) {\n+        return (int) Math.ceil(TIMEOUT_FACTOR * count);\n+    }\n@@ -216,1 +224,1 @@\n-        int max = 3;\n+        int max = adjustCount(3);\n@@ -220,1 +228,1 @@\n-            Thread.sleep(100);\n+            Thread.sleep(1000);\n@@ -331,15 +339,19 @@\n-            fooChild = null;\n-            System.out.println(\"Setting fooChild to: \" + fooChild);\n-            while ((ref2 = queue.poll()) == null) {\n-                System.gc();\n-                Thread.sleep(1000);\n-            }\n-            if (ref2 != fooRef) {\n-                throw new RuntimeException(\"Unexpected reference: \"\n-                        + ref2 +\"\\n\\texpected: \" + fooRef);\n-            }\n-            if (ref2.get() != null) {\n-                throw new RuntimeException(\"Referent not cleared: \" + ref2.get());\n-            }\n-            System.out.println(\"Got fooRef after reset(), fooChild is \" + fooChild);\n-\n+            try {\n+                fooChild = null;\n+                System.out.println(\"Setting fooChild to: \" + fooChild);\n+                while ((ref2 = queue.poll()) == null) {\n+                    System.gc();\n+                    Thread.sleep(1000);\n+                }\n+                if (ref2 != fooRef) {\n+                    throw new RuntimeException(\"Unexpected reference: \"\n+                            + ref2 +\"\\n\\texpected: \" + fooRef);\n+                }\n+                if (ref2.get() != null) {\n+                    throw new RuntimeException(\"Referent not cleared: \" + ref2.get());\n+                }\n+                System.out.println(\"Got fooRef after reset(), fooChild is \" + fooChild);\n+             } catch(Throwable t) {\n+                if (failed != null) t.addSuppressed(failed);\n+                throw t;\n+             }\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/updateConfiguration\/HandlersOnComplexResetUpdate.java","additions":30,"deletions":18,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,8 @@\n+    public static final double TIMEOUT_FACTOR;\n+    static {\n+        String toFactor = System.getProperty(\"test.timeout.factor\", \"1.0\");\n+        TIMEOUT_FACTOR = Double.parseDouble(toFactor);\n+    }\n+    static int adjustCount(int count) {\n+        return (int) Math.ceil(TIMEOUT_FACTOR * count);\n+    }\n@@ -216,1 +224,1 @@\n-        int max = 3;\n+        int max = adjustCount(3);\n@@ -220,1 +228,1 @@\n-            Thread.sleep(100);\n+            Thread.sleep(1000);\n@@ -319,15 +327,19 @@\n-            fooChild = null;\n-            System.out.println(\"Setting fooChild to: \" + fooChild);\n-            while ((ref2 = queue.poll()) == null) {\n-                System.gc();\n-                Thread.sleep(1000);\n-            }\n-            if (ref2 != fooRef) {\n-                throw new RuntimeException(\"Unexpected reference: \"\n-                        + ref2 +\"\\n\\texpected: \" + fooRef);\n-            }\n-            if (ref2.get() != null) {\n-                throw new RuntimeException(\"Referent not cleared: \" + ref2.get());\n-            }\n-            System.out.println(\"Got fooRef after reset(), fooChild is \" + fooChild);\n-\n+            try {\n+                fooChild = null;\n+                System.out.println(\"Setting fooChild to: \" + fooChild);\n+                while ((ref2 = queue.poll()) == null) {\n+                    System.gc();\n+                    Thread.sleep(1000);\n+                }\n+                if (ref2 != fooRef) {\n+                    throw new RuntimeException(\"Unexpected reference: \"\n+                            + ref2 +\"\\n\\texpected: \" + fooRef);\n+                }\n+                if (ref2.get() != null) {\n+                    throw new RuntimeException(\"Referent not cleared: \" + ref2.get());\n+                }\n+                System.out.println(\"Got fooRef after reset(), fooChild is \" + fooChild);\n+           } catch (Throwable t) {\n+               if (failed != null) t.addSuppressed(failed);\n+               throw t;\n+           }\n","filename":"test\/jdk\/java\/util\/logging\/LogManager\/Configuration\/updateConfiguration\/HandlersOnComplexUpdate.java","additions":30,"deletions":18,"binary":false,"changes":48,"status":"modified"}]}