{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -63,1 +64,1 @@\n-    static int reqnum = 0;\n+    static final AtomicInteger reqnum = new AtomicInteger();\n@@ -66,2 +67,1 @@\n-        URL url = new URL(uri + \"?foo=\"+reqnum);\n-        reqnum ++;\n+        URL url = new URL(uri + \"?foo=\"+reqnum.getAndIncrement());\n@@ -69,1 +69,0 @@\n-\n@@ -160,2 +159,11 @@\n-        if (cnt > threads) { \/\/ could be less\n-            throw new RuntimeException (\"Expected \"+threads + \" connections: used \" +cnt);\n+\n+        \/\/ We may have received traffic from something else than\n+        \/\/ our client. We should only count those workers for which\n+        \/\/ the expected header has been found.\n+        int validConnections = 0;\n+        for (Worker w : svr.workers()) {\n+            if (w.headerFound) validConnections++;\n+        }\n+\n+        if (validConnections > threads + 1 || validConnections == 0) { \/\/ could be less\n+            throw new RuntimeException (\"Expected \" + threads + \" connections: used \" + validConnections);\n@@ -163,1 +171,16 @@\n-        if  (reqs != threads*requests) {\n+\n+        \/\/ Sometimes the client drops a connection after a while and\n+        \/\/ spawns a new one. Why this is happening is not clear,\n+        \/\/ and JDK-8223783 is logged to follow up on this. For the sake\n+        \/\/ of test stabilization we don't fail on `threads + 1` connections\n+        \/\/ but log a warning instead.\n+        if (validConnections == threads + 1) {\n+            debug(\"WARNING: \" + validConnections\n+                + \" have been used, where only \" + threads\n+                + \" were expected!\");\n+        }\n+\n+        if (validConnections != cnt) {\n+            debug(\"WARNING: got \" + (cnt - validConnections) + \" unexpected connections!\");\n+        }\n+        if  (validConnections == cnt && reqs != threads*requests) {\n@@ -166,0 +189,1 @@\n+\n@@ -182,1 +206,1 @@\n-        private Queue<Worker> workers = new ConcurrentLinkedQueue<>();\n+        private final Queue<Worker> workers = new ConcurrentLinkedQueue<>();\n@@ -249,0 +273,1 @@\n+        volatile boolean headerFound;\n@@ -251,0 +276,1 @@\n+            super(\"Worker-\" + id);\n@@ -263,0 +289,1 @@\n+\n@@ -269,1 +296,1 @@\n-        int readUntil(InputStream in, char[] seq) throws IOException {\n+        int readUntil(InputStream in, StringBuilder headers, char[] seq) throws IOException {\n@@ -275,0 +302,1 @@\n+                headers.append((char)c);\n@@ -303,3 +331,2 @@\n-\n-                    n = readUntil(in, new char[] {'\\r','\\n', '\\r','\\n'});\n-\n+                    StringBuilder headers = new StringBuilder();\n+                    n = readUntil(in, headers, new char[] {'\\r','\\n', '\\r','\\n'});\n@@ -311,0 +338,5 @@\n+                    if (headers.toString().contains(\"\/foo.html?foo=\")) {\n+                        headerFound = true;\n+                    } else {\n+                        MultiThreadTest.debug(\"worker: \" + id + \": Unexpected request received: \" + headers);\n+                    }\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/MultiThreadTest.java","additions":44,"deletions":12,"binary":false,"changes":56,"status":"modified"}]}