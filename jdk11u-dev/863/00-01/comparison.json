{"files":[{"patch":"@@ -31,0 +31,1 @@\n+    private boolean swapenabled;\n@@ -44,0 +45,7 @@\n+    boolean isSwapEnabled() {\n+        return swapenabled;\n+    }\n+\n+    void setSwapEnabled(boolean swapenabled) {\n+        this.swapenabled = swapenabled;\n+    }\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1MemorySubSystemController.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.io.UncheckedIOException;\n@@ -80,0 +81,2 @@\n+        } catch (UncheckedIOException e) {\n+            return null;\n@@ -114,0 +117,2 @@\n+        } catch (UncheckedIOException e) {\n+            return null;\n@@ -160,33 +165,25 @@\n-    private static void setSubSystemControllerPath(CgroupV1Subsystem subsystem, String[] entry) {\n-        String controllerName;\n-        String base;\n-        CgroupV1SubsystemController controller = null;\n-        CgroupV1SubsystemController controller2 = null;\n-\n-        controllerName = entry[1];\n-        base = entry[2];\n-        if (controllerName != null && base != null) {\n-            switch (controllerName) {\n-                case \"memory\":\n-                    controller = subsystem.memoryController();\n-                    break;\n-                case \"cpuset\":\n-                    controller = subsystem.cpuSetController();\n-                    break;\n-                case \"cpu,cpuacct\":\n-                case \"cpuacct,cpu\":\n-                    controller = subsystem.cpuController();\n-                    controller2 = subsystem.cpuAcctController();\n-                    break;\n-                case \"cpuacct\":\n-                    controller = subsystem.cpuAcctController();\n-                    break;\n-                case \"cpu\":\n-                    controller = subsystem.cpuController();\n-                    break;\n-                case \"blkio\":\n-                    controller = subsystem.blkIOController();\n-                    break;\n-                \/\/ Ignore subsystems that we don't support\n-                default:\n-                    break;\n+private static void setSubSystemControllerPath(CgroupV1Subsystem subsystem, String[] entry) {\n+        String controller = entry[1];\n+        String base = entry[2];\n+        if (controller != null && base != null) {\n+            for (String cName: controller.split(\",\")) {\n+                switch (cName) {\n+                    case \"memory\":\n+                        setPath(subsystem, subsystem.memoryController(), base);\n+                        break;\n+                    case \"cpuset\":\n+                        setPath(subsystem, subsystem.cpuSetController(), base);\n+                        break;\n+                    case \"cpuacct\":\n+                        setPath(subsystem, subsystem.cpuController(), base);\n+                        break;\n+                    case \"cpu\":\n+                        setPath(subsystem, subsystem.cpuAcctController(), base);\n+                        break;\n+                    case \"blkio\":\n+                        setPath(subsystem, subsystem.blkIOController(), base);\n+                        break;\n+                    \/\/ Ignore subsystems that we don't support\n+                    default:\n+                        break;\n+                }\n@@ -195,0 +192,1 @@\n+    }\n@@ -196,1 +194,2 @@\n-        if (controller != null) {\n+   private static void setPath(CgroupV1Subsystem subsystem, CgroupV1SubsystemController controller, String base) {        \n+\tif (controller != null) {\n@@ -202,0 +201,2 @@\n+                boolean isSwapEnabled = getSwapEnabled(memorySubSystem);\n+                memorySubSystem.setSwapEnabled(isSwapEnabled);\n@@ -205,3 +206,0 @@\n-        if (controller2 != null) {\n-            controller2.setPath(base);\n-        }\n@@ -216,0 +214,5 @@\n+    private static boolean getSwapEnabled(CgroupV1MemorySubSystemController controller) {\n+        long retval = getLongValue(controller, \"memory.memsw.limit_in_bytes\");\n+        return retval > 0;\n+    }\n+\n@@ -445,0 +448,4 @@\n+        if (memory != null && !memory.isSwapEnabled()) {\n+            return getMemoryLimit();\n+        }\n+\n@@ -460,0 +467,3 @@\n+        if (memory != null && !memory.isSwapEnabled()) {\n+            return getMemoryMaxUsage();\n+        }\n@@ -464,0 +474,3 @@\n+        if (memory != null && !memory.isSwapEnabled()) {\n+            return getMemoryUsage();\n+        }\n@@ -490,0 +503,2 @@\n+    private static native boolean isUseContainerSupport();\n+\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1Subsystem.java","additions":52,"deletions":37,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -844,1 +844,1 @@\n-                      mainClass.getName(), mainClass.getModule().getName(),\n+                      mainClass.getName(), mainClass.getModule(),\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -211,0 +211,6 @@\n+                long deltaLimit = memSwapLimit - memLimit;\n+                \/\/ Return 0 when memSwapLimit == memLimit, which means no swap space is allowed.\n+                \/\/ And the same for memSwapLimit < memLimit.\n+                if (deltaLimit <= 0) {\n+                    return 0;\n+                }\n@@ -218,2 +224,6 @@\n-                        if ((memSwapUsage - memUsage) >= 0) {\n-                            return memSwapLimit - memLimit - (memSwapUsage - memUsage);\n+                        long deltaUsage = memSwapUsage - memUsage;\n+                        if (deltaUsage >= 0) {\n+                            long freeSwap = deltaLimit - deltaUsage;\n+                            if (freeSwap >= 0) {\n+                                return freeSwap;\n+                            }\n@@ -277,1 +287,1 @@\n-            return containerMetrics.getCpuSetCpus().length == getHostConfiguredCpuCount0();\n+            return containerMetrics.getCpuSetCpus().length == getHostOnlineCpuCount0();\n","filename":"src\/jdk.management\/unix\/classes\/com\/sun\/management\/internal\/OperatingSystemImpl.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+\n+    private static final long UNLIMITED = -1;\n+\n@@ -66,12 +69,22 @@\n-        long count = Metrics.systemMetrics().getMemoryFailCount();\n-\n-        \/\/ Allocate 512M of data\n-        byte[][] bytes = new byte[64][];\n-        boolean atLeastOneAllocationWorked = false;\n-        for (int i = 0; i < 64; i++) {\n-            try {\n-                bytes[i] = new byte[8 * 1024 * 1024];\n-                atLeastOneAllocationWorked = true;\n-                \/\/ Break out as soon as we see an increase in failcount\n-                \/\/ to avoid getting killed by the OOM killer.\n-                if (Metrics.systemMetrics().getMemoryFailCount() > count) {\n+        long memAndSwapLimit = Metrics.systemMetrics().getMemoryAndSwapLimit();\n+        long memLimit = Metrics.systemMetrics().getMemoryLimit();\n+\n+        \/\/ We need swap to execute this test or will SEGV\n+        if (memAndSwapLimit <= memLimit) {\n+            System.out.println(\"No swap memory limits, test case skipped\");\n+        } else {\n+            long count = Metrics.systemMetrics().getMemoryFailCount();\n+\n+            \/\/ Allocate 512M of data\n+            byte[][] bytes = new byte[64][];\n+            boolean atLeastOneAllocationWorked = false;\n+            for (int i = 0; i < 64; i++) {\n+                try {\n+                    bytes[i] = new byte[8 * 1024 * 1024];\n+                    atLeastOneAllocationWorked = true;\n+                    \/\/ Break out as soon as we see an increase in failcount\n+                    \/\/ to avoid getting killed by the OOM killer.\n+                    if (Metrics.systemMetrics().getMemoryFailCount() > count) {\n+                        break;\n+                    }\n+                } catch (Error e) { \/\/ OOM error\n@@ -80,2 +93,0 @@\n-            } catch (Error e) { \/\/ OOM error\n-                break;\n@@ -83,11 +94,11 @@\n-        }\n-        if (!atLeastOneAllocationWorked) {\n-            System.out.println(\"Allocation failed immediately. Ignoring test!\");\n-            return;\n-        }\n-        \/\/ Be sure bytes allocations don't get optimized out\n-        System.out.println(\"DEBUG: Bytes allocation length 1: \" + bytes[0].length);\n-        if (Metrics.systemMetrics().getMemoryFailCount() <= count) {\n-            throw new RuntimeException(\"Memory fail count : new : [\"\n-                    + Metrics.systemMetrics().getMemoryFailCount() + \"]\"\n-                    + \", old : [\" + count + \"]\");\n+            if (!atLeastOneAllocationWorked) {\n+                System.out.println(\"Allocation failed immediately. Ignoring test!\");\n+                return;\n+            }\n+            \/\/ Be sure bytes allocations don't get optimized out\n+            System.out.println(\"DEBUG: Bytes allocation length 1: \" + bytes[0].length);\n+            if (Metrics.systemMetrics().getMemoryFailCount() <= count) {\n+                throw new RuntimeException(\"Memory fail count : new : [\"\n+                        + Metrics.systemMetrics().getMemoryFailCount() + \"]\"\n+                        + \", old : [\" + count + \"]\");\n+            }\n@@ -131,0 +142,1 @@\n+        long actualMemAndSwap = Metrics.systemMetrics().getMemoryAndSwapLimit();\n@@ -133,2 +145,3 @@\n-                || expectedMemAndSwap != Metrics.systemMetrics().getMemoryAndSwapLimit()) {\n-            System.err.println(\"Memory and swap limit not equal, expected : [\"\n+                || (expectedMemAndSwap != actualMemAndSwap\n+                && expectedMem != actualMemAndSwap)) {\n+            throw new RuntimeException(\"Memory and swap limit not equal, expected : [\"\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/MetricsMemoryTester.java","additions":40,"deletions":27,"binary":false,"changes":67,"status":"modified"}]}