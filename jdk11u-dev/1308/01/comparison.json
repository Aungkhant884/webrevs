{"files":[{"patch":"@@ -35,37 +35,0 @@\n-################################################################################\n-# Setup global test running parameters\n-################################################################################\n-\n-# Each factor variable comes in 3 variants. The first one is reserved for users\n-# to use on command line. The other two are for predifined configurations in JDL\n-# and for machine specific configurations respectively.\n-TEST_JOBS_FACTOR ?= 1\n-TEST_JOBS_FACTOR_JDL ?= 1\n-TEST_JOBS_FACTOR_MACHINE ?= 1\n-\n-ifeq ($(TEST_JOBS), 0)\n-  CORES_DIVIDER := 2\n-  ifeq ($(OPENJDK_TARGET_CPU_ARCH), sparc)\n-    # For smaller SPARC machines we see reasonable scaling of throughput up to\n-    # cpus\/4 without affecting test reliability. On the bigger machines, cpus\/4\n-    # causes intermittent timeouts.\n-    ifeq ($(shell $(EXPR) $(NUM_CORES) \\> 16), 1)\n-      CORES_DIVIDER := 5\n-    else\n-      CORES_DIVIDER := 4\n-    endif\n-  endif\n-  MEMORY_DIVIDER := 2048\n-  TEST_JOBS := $(shell $(AWK) \\\n-    'BEGIN { \\\n-      c = $(NUM_CORES) \/ $(CORES_DIVIDER); \\\n-      m = $(MEMORY_SIZE) \/ $(MEMORY_DIVIDER); \\\n-      if (c > m) c = m; \\\n-      c = c * $(TEST_JOBS_FACTOR); \\\n-      c = c * $(TEST_JOBS_FACTOR_JDL); \\\n-      c = c * $(TEST_JOBS_FACTOR_MACHINE); \\\n-      if (c < 1) c = 1; \\\n-      printf \"%.0f\", c; \\\n-    }')\n-endif\n-\n@@ -244,1 +207,25 @@\n-  # Concurrency based on min(cores \/ 2, 12) * TEST_JOBS_FACTOR\n+  CORES_DIVIDER := 2\n+  ifeq ($(OPENJDK_TARGET_CPU_ARCH), sparc)\n+    # For smaller SPARC machines we see reasonable scaling of throughput up to\n+    # cpus\/4 without affecting test reliability. On the bigger machines, cpus\/4\n+    # causes intermittent timeouts.\n+    ifeq ($(shell $(EXPR) $(NUM_CORES) \\> 16), 1)\n+      CORES_DIVIDER := 5\n+    else\n+      CORES_DIVIDER := 4\n+    endif\n+  endif\n+  # For some big multi-core machines with low ulimit -u setting we hit the max\n+  # threads\/process limit. In such a setup the memory\/cores-only-guided\n+  # TEST_JOBS config is insufficient. From experience a concurrency setting of\n+  # 14 works reasonably well for low ulimit values (<= 4096). Thus, use\n+  # divider 4096\/14. For high ulimit -u values this shouldn't make a difference.\n+  ULIMIT_DIVIDER := (4096\/14)\n+  PROC_ULIMIT := -1\n+  ifneq ($(OPENJDK_TARGET_OS), windows)\n+    PROC_ULIMIT := $(shell $(ULIMIT) -u)\n+    ifeq ($(PROC_ULIMIT), unlimited)\n+      PROC_ULIMIT := -1\n+    endif\n+  endif\n+  MEMORY_DIVIDER := 2048\n@@ -247,2 +234,8 @@\n-      c = $(NUM_CORES) \/ 2; \\\n-      if (c > 12) c = 12; \\\n+      c = $(NUM_CORES) \/ $(CORES_DIVIDER); \\\n+      m = $(MEMORY_SIZE) \/ $(MEMORY_DIVIDER); \\\n+      u = $(PROC_ULIMIT); \\\n+      if (u > -1) { \\\n+        u = u \/ $(ULIMIT_DIVIDER); \\\n+        if (u < c) c = u; \\\n+      } \\\n+      if (c > m) c = m; \\\n","filename":"make\/RunTests.gmk","additions":33,"deletions":40,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -178,0 +178,1 @@\n+ULIMIT := ulimit\n","filename":"make\/RunTestsPrebuiltSpec.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -542,0 +542,20 @@\n+###############################################################################\n+# Like BASIC_REQUIRE_PROGS but also allows for bash built-ins\n+# $1: variable to set\n+# $2: executable name (or list of names) to look for\n+# $3: [path]\n+AC_DEFUN([BASIC_REQUIRE_BUILTIN_PROGS],\n+[\n+  BASIC_SETUP_TOOL($1, [AC_PATH_PROGS($1, $2, , $3)])\n+  if test \"x[$]$1\" = x; then\n+    AC_MSG_NOTICE([Required tool $2 not found in PATH, checking built-in])\n+    if help $2 > \/dev\/null 2>&1; then\n+      AC_MSG_NOTICE([Found $2 as shell built-in. Using it])\n+      $1=\"$2\"\n+    else\n+      AC_MSG_ERROR([Required tool $2 also not found as built-in.])\n+    fi\n+  fi\n+  BASIC_CHECK_NONEMPTY($1)\n+])\n+\n@@ -1275,0 +1295,3 @@\n+  if ! test \"x$OPENJDK_TARGET_OS\" = \"xwindows\"; then\n+    BASIC_REQUIRE_BUILTIN_PROGS(ULIMIT, ulimit)\n+  fi\n","filename":"make\/autoconf\/basics.m4","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -760,0 +760,1 @@\n+ULIMIT:=@ULIMIT@\n","filename":"make\/autoconf\/spec.gmk.in","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @run driver\/timeout=300 compiler.jsr292.ContinuousCallSiteTargetChange\n+ * @run driver compiler.jsr292.ContinuousCallSiteTargetChange\n","filename":"test\/hotspot\/jtreg\/compiler\/jsr292\/ContinuousCallSiteTargetChange.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}