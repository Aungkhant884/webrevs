{"files":[{"patch":"@@ -2850,3 +2850,3 @@\n-void PhaseIdealLoop::build_and_optimize(LoopOptsMode mode) {\n-  bool do_split_ifs = (mode == LoopOptsDefault || mode == LoopOptsLastRound);\n-  bool skip_loop_opts = (mode == LoopOptsNone);\n+void PhaseIdealLoop::build_and_optimize() {\n+  bool do_split_ifs = (_mode == LoopOptsDefault || _mode == LoopOptsLastRound);\n+  bool skip_loop_opts = (_mode == LoopOptsNone);\n@@ -2854,2 +2854,2 @@\n-  bool shenandoah_opts = (mode == LoopOptsShenandoahExpand ||\n-                          mode == LoopOptsShenandoahPostExpand);\n+  bool shenandoah_opts = (_mode == LoopOptsShenandoahExpand ||\n+                          _mode == LoopOptsShenandoahPostExpand);\n@@ -3023,1 +3023,1 @@\n-    assert(C->unique() == unique, \"verification mode made Nodes? ? ?\");\n+    assert(C->unique() == unique, \"verification _mode made Nodes? ? ?\");\n@@ -3054,2 +3054,2 @@\n-    \/\/ Check to see if the verify mode is broken\n-    assert(C->unique() == unique, \"non-optimize mode made Nodes? ? ?\");\n+    \/\/ Check to see if the verify _mode is broken\n+    assert(C->unique() == unique, \"non-optimize _mode made Nodes? ? ?\");\n@@ -3080,1 +3080,1 @@\n-  if (UseShenandoahGC && ((ShenandoahBarrierSetC2*) BarrierSet::barrier_set()->barrier_set_c2())->optimize_loops(this, mode, visited, nstack, worklist)) {\n+  if (UseShenandoahGC && ((ShenandoahBarrierSetC2*) BarrierSet::barrier_set()->barrier_set_c2())->optimize_loops(this, _mode, visited, nstack, worklist)) {\n@@ -3119,1 +3119,1 @@\n-    split_if_with_blocks( visited, nstack, mode == LoopOptsLastRound );\n+    split_if_with_blocks( visited, nstack, _mode == LoopOptsLastRound );\n@@ -3121,1 +3121,1 @@\n-    if (mode == LoopOptsLastRound) {\n+    if (_mode == LoopOptsLastRound) {\n@@ -4483,0 +4483,4 @@\n+#if INCLUDE_SHENANDOAHGC\n+  bool shenandoah_opts = (_mode == LoopOptsShenandoahExpand ||\n+                          _mode == LoopOptsShenandoahPostExpand);\n+#endif\n@@ -4485,1 +4489,1 @@\n-  if (least != early) {\n+  if (least != early SHENANDOAHGC_ONLY(&& !shenandoah_opts)) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -930,0 +930,1 @@\n+  LoopOptsMode _mode;\n@@ -981,2 +982,3 @@\n-    _verify_only(true) {\n-    build_and_optimize(LoopOptsVerify);\n+    _verify_only(true),\n+    _mode(LoopOptsVerify) {\n+    build_and_optimize();\n@@ -986,1 +988,1 @@\n-  void build_and_optimize(LoopOptsMode mode);\n+  void build_and_optimize();\n@@ -1001,0 +1003,1 @@\n+    _mode(mode),\n@@ -1003,1 +1006,1 @@\n-    build_and_optimize(mode);\n+    build_and_optimize();\n@@ -1013,0 +1016,1 @@\n+    _mode(LoopOptsVerify),\n@@ -1014,1 +1018,1 @@\n-    build_and_optimize(LoopOptsVerify);\n+    build_and_optimize();\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * bug 8281811\n+ * @summary assert(_base == Tuple) failed: Not a Tuple after JDK-8280799\n+ * @requires vm.gc.Shenandoah\n+ * @run main\/othervm -XX:+UseShenandoahGC -XX:-BackgroundCompilation -XX:LoopMaxUnroll=1 TestBarrierAboveProj\n+ *\/\n+\n+\n+public class TestBarrierAboveProj {\n+    private static C objField = new C();\n+    private static final Object[] arrayField = new Object[1000];\n+    private static volatile int volatileField;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test1();\n+            test2();\n+        }\n+    }\n+\n+    private static float test1() {\n+        float v = 1;\n+        for (int i = 1; i < 1000; i++) {\n+            if (objField == arrayField[i]) {\n+                return v;\n+            }\n+            v *= 2;\n+        }\n+        return v;\n+    }\n+\n+    private static float test2() {\n+        float v = 1;\n+        volatileField = 0x42;\n+        for (int i = 1; i < 1000; i++) {\n+            if (objField == arrayField[i]) {\n+                return v;\n+            }\n+            v *= 2;\n+        }\n+        return v;\n+    }\n+\n+    private static class C {\n+        public float floatField;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/compiler\/TestBarrierAboveProj.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}