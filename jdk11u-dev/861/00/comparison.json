{"files":[{"patch":"@@ -373,7 +373,7 @@\n-inline CountedLoopEndNode *CountedLoopNode::loopexit_or_null() const {\n-  Node *bc = back_control();\n-  if( bc == NULL ) return NULL;\n-  Node *le = bc->in(0);\n-  if( le->Opcode() != Op_CountedLoopEnd )\n-    return NULL;\n-  return (CountedLoopEndNode*)le;\n+inline CountedLoopEndNode* CountedLoopNode::loopexit_or_null() const {\n+  Node* bctrl = back_control();\n+  if (bctrl == NULL) return NULL;\n+\n+  Node* lexit = bctrl->in(0);\n+  return (CountedLoopEndNode*)\n+      (lexit->Opcode() == Op_CountedLoopEnd ? lexit : NULL);\n@@ -381,1 +381,2 @@\n-inline CountedLoopEndNode *CountedLoopNode::loopexit() const {\n+\n+inline CountedLoopEndNode* CountedLoopNode::loopexit() const {\n@@ -386,7 +387,29 @@\n-inline Node *CountedLoopNode::init_trip() const { return loopexit_or_null() ? loopexit()->init_trip() : NULL; }\n-inline Node *CountedLoopNode::stride() const { return loopexit_or_null() ? loopexit()->stride() : NULL; }\n-inline int CountedLoopNode::stride_con() const { return loopexit_or_null() ? loopexit()->stride_con() : 0; }\n-inline bool CountedLoopNode::stride_is_con() const { return loopexit_or_null() && loopexit()->stride_is_con(); }\n-inline Node *CountedLoopNode::limit() const { return loopexit_or_null() ? loopexit()->limit() : NULL; }\n-inline Node *CountedLoopNode::incr() const { return loopexit_or_null() ? loopexit()->incr() : NULL; }\n-inline Node *CountedLoopNode::phi() const { return loopexit_or_null() ? loopexit()->phi() : NULL; }\n+\n+inline Node* CountedLoopNode::init_trip() const {\n+  CountedLoopEndNode* cle = loopexit_or_null();\n+  return cle != NULL ? cle->init_trip() : NULL;\n+}\n+inline Node* CountedLoopNode::stride() const {\n+  CountedLoopEndNode* cle = loopexit_or_null();\n+  return cle != NULL ? cle->stride() : NULL;\n+}\n+inline int CountedLoopNode::stride_con() const {\n+  CountedLoopEndNode* cle = loopexit_or_null();\n+  return cle != NULL ? cle->stride_con() : 0;\n+}\n+inline bool CountedLoopNode::stride_is_con() const {\n+  CountedLoopEndNode* cle = loopexit_or_null();\n+  return cle != NULL && cle->stride_is_con();\n+}\n+inline Node* CountedLoopNode::limit() const {\n+  CountedLoopEndNode* cle = loopexit_or_null();\n+  return cle != NULL ? cle->limit() : NULL;\n+}\n+inline Node* CountedLoopNode::incr() const {\n+  CountedLoopEndNode* cle = loopexit_or_null();\n+  return cle != NULL ? cle->incr() : NULL;\n+}\n+inline Node* CountedLoopNode::phi() const {\n+  CountedLoopEndNode* cle = loopexit_or_null();\n+  return cle != NULL ? cle->phi() : NULL;\n+}\n@@ -638,2 +661,2 @@\n-\/\/ Computes the mapping from Nodes to IdealLoopTrees.  Organizes IdealLoopTrees into a\n-\/\/ loop tree.  Drives the loop-based transformations on the ideal graph.\n+\/\/ Computes the mapping from Nodes to IdealLoopTrees. Organizes IdealLoopTrees\n+\/\/ into a loop tree. Drives the loop-based transformations on the ideal graph.\n@@ -738,2 +761,1 @@\n-  \/\/ Helper function for directing control inputs away from CFG split\n-  \/\/ points.\n+  \/\/ Helper function for directing control inputs away from CFG split points.\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"}]}