{"files":[{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Twitter, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package gc.metaspace;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/* @test TestSizeTransitionsSerial\n+ * @key gc\n+ * @requires vm.gc.Serial\n+ * @summary Tests that the metaspace size transition logging is done correctly.\n+ * @library \/test\/lib\n+ * @run driver gc.metaspace.TestSizeTransitions false -XX:+UseSerialGC\n+ * @run driver gc.metaspace.TestSizeTransitions true  -XX:+UseSerialGC\n+ *\/\n+\n+\/* @test TestSizeTransitionsParallel\n+ * @key gc\n+ * @requires vm.gc.Parallel\n+ * @summary Tests that the metaspace size transition logging is done correctly.\n+ * @library \/test\/lib\n+ * @run driver gc.metaspace.TestSizeTransitions false -XX:+UseParallelGC\n+ * @run driver gc.metaspace.TestSizeTransitions true  -XX:+UseParallelGC\n+ *\/\n+\n+\/* @test TestSizeTransitionsG1\n+ * @key gc\n+ * @requires vm.gc.G1\n+ * @summary Tests that the metaspace size transition logging is done correctly.\n+ * @library \/test\/lib\n+ * @run driver gc.metaspace.TestSizeTransitions false -XX:+UseG1GC\n+ * @run driver gc.metaspace.TestSizeTransitions true  -XX:+UseG1GC\n+ *\/\n+\n+\/* @test TestSizeTransitionsCMS\n+ * @key gc\n+ * @requires vm.gc.ConcMarkSweep\n+ * @summary Tests that the metaspace size transition logging is done correctly.\n+ * @library \/test\/lib\n+ * @run driver gc.metaspace.TestSizeTransitions false -XX:+UseConcMarkSweepGC\n+ * @run driver gc.metaspace.TestSizeTransitions true  -XX:+UseConcMarkSweepGC\n+ *\/\n+\n+public class TestSizeTransitions {\n+  public static class Run {\n+    public static void main(String... args) throws Exception {\n+      System.out.println(\"Run started.\");\n+\n+      \/\/ easiest way to generate a metaspace transition is to ask for a full GC\n+      System.gc();\n+\n+      System.out.println(\"Run finished.\");\n+    }\n+  }\n+\n+  \/\/ matches the log tags\n+  \/\/   e.g., [0.043s][info][gc]\n+  private static final String LOG_TAGS_REGEX = \"(\\\\[.*\\\\])+ \";\n+\n+  \/\/ matches a size transition\n+  \/\/   e.g., 177K(4864K)->177K(4864K)\n+  private static final String SIZE_TRANSITION_REGEX = \"\\\\d+K\\\\(\\\\d+K\\\\)->\\\\d+K\\\\(\\\\d+K\\\\)\";\n+\n+  \/\/ matches -coops metaspace size transitions\n+  private static final String NO_COOPS_REGEX =\n+    String.format(\"^%s.* Metaspace: %s$\",\n+                  LOG_TAGS_REGEX,\n+                  SIZE_TRANSITION_REGEX);\n+\n+  \/\/ matches +coops metaspace size transitions\n+  private static final String COOPS_REGEX =\n+    String.format(\"^%s.* Metaspace: %s NonClass: %s Class: %s$\",\n+                  LOG_TAGS_REGEX,\n+                  SIZE_TRANSITION_REGEX,\n+                  SIZE_TRANSITION_REGEX,\n+                  SIZE_TRANSITION_REGEX);\n+\n+  public static void main(String... args) throws Exception {\n+    \/\/ args: <use-coops> <gc-arg>\n+    if (args.length != 2) {\n+      throw new RuntimeException(\"wrong number of args: \" + args.length);\n+    }\n+\n+    final boolean hasCoops = Platform.is64bit();\n+    final boolean useCoops = Boolean.parseBoolean(args[0]);\n+    final String gcArg = args[1];\n+\n+    if (!hasCoops && useCoops) {\n+       \/\/ No need to run this configuration.\n+       System.out.println(\"Skipping test.\");\n+       return;\n+    }\n+\n+    List<String> jvmArgs = new ArrayList<>();\n+    if (hasCoops) {\n+      jvmArgs.add(useCoops ? \"-XX:+UseCompressedOops\" : \"-XX:-UseCompressedOops\");\n+    }\n+    jvmArgs.add(gcArg);\n+    jvmArgs.add(\"-Xmx256m\");\n+    jvmArgs.add(\"-Xlog:gc,gc+metaspace=info\");\n+    jvmArgs.add(TestSizeTransitions.Run.class.getName());\n+\n+    System.out.println(\"JVM args:\");\n+    for (String a : jvmArgs) {\n+      System.out.println(\"  \" + a);\n+    }\n+\n+    final ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(jvmArgs);\n+    final OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    System.out.println(output.getStdout());\n+    output.shouldHaveExitValue(0);\n+\n+    if (useCoops) {\n+      output.stdoutShouldMatch(COOPS_REGEX);\n+      output.stdoutShouldNotMatch(NO_COOPS_REGEX);\n+    } else {\n+      output.stdoutShouldMatch(NO_COOPS_REGEX);\n+      output.stdoutShouldNotMatch(COOPS_REGEX);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestSizeTransitions.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}