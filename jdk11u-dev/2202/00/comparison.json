{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import jdk.internal.event.SecurityProviderServiceEvent;\n+\n@@ -1281,0 +1283,1 @@\n+        Service s = null;\n@@ -1282,4 +1285,1 @@\n-            Service s = serviceMap.get(key);\n-            if (s != null) {\n-                return s;\n-            }\n+            s = serviceMap.get(key);\n@@ -1287,4 +1287,6 @@\n-        synchronized (this) {\n-            ensureLegacyParsed();\n-            if (legacyMap != null && !legacyMap.isEmpty()) {\n-                return legacyMap.get(key);\n+        if (s == null) {\n+            synchronized (this) {\n+                ensureLegacyParsed();\n+                if (legacyMap != null && !legacyMap.isEmpty()) {\n+                    s = legacyMap.get(key);\n+                }\n@@ -1293,1 +1295,10 @@\n-        return null;\n+\n+        if (s != null && SecurityProviderServiceEvent.isTurnedOn()) {\n+            var e  = new SecurityProviderServiceEvent();\n+            e.provider = getName();\n+            e.type = type;\n+            e.algorithm = algorithm;\n+            e.commit();\n+        }\n+\n+        return s;\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.event;\n+\n+\/**\n+ * Event recording details of Provider.getService(String type, String algorithm) calls\n+ *\/\n+\n+public final class SecurityProviderServiceEvent extends Event {\n+    private final static SecurityProviderServiceEvent EVENT = new SecurityProviderServiceEvent();\n+\n+    \/**\n+     * Returns {@code true} if event is enabled, {@code false} otherwise.\n+     *\/\n+    public static boolean isTurnedOn() {\n+        return EVENT.isEnabled();\n+    }\n+\n+    public String type;\n+    public String algorithm;\n+    public String provider;\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SecurityProviderServiceEvent.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.events;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+import jdk.jfr.internal.MirrorEvent;\n+\n+@Category({\"Java Development Kit\", \"Security\"})\n+@Label(\"Security Provider Instance Request\")\n+@Name(\"jdk.SecurityProviderService\")\n+@Description(\"Details of Provider.getInstance(String type, String algorithm) calls\")\n+@MirrorEvent(className = \"jdk.internal.event.SecurityProviderServiceEvent\")\n+public final class SecurityProviderServiceEvent extends AbstractJDKEvent {\n+    @Label(\"Type of Service\")\n+    public String type;\n+\n+    @Label(\"Algorithm Name\")\n+    public String algorithm;\n+\n+    @Label(\"Security Provider\")\n+    public String provider;\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/SecurityProviderServiceEvent.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -42,0 +42,1 @@\n+import jdk.jfr.events.SecurityProviderServiceEvent;\n@@ -60,0 +61,1 @@\n+        SecurityProviderServiceEvent.class,\n@@ -78,0 +80,1 @@\n+        jdk.internal.event.SecurityProviderServiceEvent.class,\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -616,0 +616,5 @@\n+    <event name=\"jdk.SecurityProviderService\">\n+       <setting name=\"enabled\">false<\/setting>\n+       <setting name=\"stackTrace\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -616,0 +616,5 @@\n+    <event name=\"jdk.SecurityProviderService\">\n+       <setting name=\"enabled\">false<\/setting>\n+       <setting name=\"stackTrace\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -177,0 +177,1 @@\n+        insertSetting(doc, EventNames.SecurityProviderService, \"threshold\", \"0 ns\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestDefaultConfigurations.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.security;\n+\n+import java.security.*;\n+import java.security.cert.CertPathBuilder;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.*;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.Events;\n+import jdk.test.lib.jfr.EventNames;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+\/*\n+ * @test\n+ * @bug 8254711\n+ * @summary Add JFR events for security crypto algorithms\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.events\n+ * @run main\/othervm jdk.jfr.event.security.TestSecurityProviderServiceEvent\n+ *\/\n+public class TestSecurityProviderServiceEvent {\n+\n+    public static void main(String[] args) throws Exception {\n+        testAlg(cipherFunc, \"AES\", \"SunJCE\",\n+                \"SunEC\", \"Cipher\", 1, Collections.emptyList());\n+        testAlg(signatureFunc, \"SHA256withRSA\", \"SunRsaSign\",\n+                \"SunEC\", \"Signature\", 2, List.of(\"MessageDigest\"));\n+        testAlg(messageDigestFunc, \"SHA-512\", \"SUN\",\n+                \"SunEC\", \"MessageDigest\", 1, Collections.emptyList());\n+        testAlg(keystoreFunc, \"PKCS12\", \"SUN\",\n+                \"SunEC\", \"KeyStore\", 1, Collections.emptyList());\n+        testAlg(certPathBuilderFunc, \"PKIX\", \"SUN\",\n+                \"SunEC\", \"CertPathBuilder\", 2, List.of(\"CertificateFactory\"));\n+    }\n+\n+    private static void testAlg(BiFunction<String, String, Provider> bif, String alg,\n+                String workingProv, String brokenProv, String algType,\n+                                int expected, List<String> other) throws Exception {\n+        \/\/ bootstrap security Provider services\n+        Provider p =  bif.apply(alg, workingProv);\n+\n+        try (Recording recording = new Recording()) {\n+            recording.enable(EventNames.SecurityProviderService);\n+            recording.start();\n+            p = bif.apply(alg, workingProv);\n+            bif.apply(alg, brokenProv);\n+            recording.stop();\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            Asserts.assertEquals(events.size(), expected, \"Incorrect number of events\");\n+            assertEvent(events, algType, alg, p.getName(), other);\n+        }\n+    }\n+\n+    private static BiFunction<String, String, Provider> cipherFunc = (s1, p1 ) -> {\n+        Cipher c;\n+        try {\n+            c = Cipher.getInstance(s1, p1);\n+            return c.getProvider();\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException | NoSuchProviderException e) {\n+            \/\/ expected\n+        }\n+        return null;\n+    };\n+\n+    private static BiFunction<String, String, Provider> signatureFunc = (s1, p1 ) -> {\n+        Signature s;\n+        try {\n+            s = Signature.getInstance(s1, p1);\n+            return s.getProvider();\n+        } catch (NoSuchAlgorithmException | NoSuchProviderException e) {\n+            \/\/ expected\n+        }\n+        return null;\n+    };\n+\n+    private static BiFunction<String, String, Provider> messageDigestFunc = (s1, p1 ) -> {\n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(s1, p1);\n+            return md.getProvider();\n+        } catch (NoSuchAlgorithmException | NoSuchProviderException e) {\n+            \/\/ expected\n+        }\n+        return null;\n+    };\n+\n+    private static BiFunction<String, String, Provider> keystoreFunc = (s1, p1 ) -> {\n+        KeyStore ks;\n+        try {\n+            ks = KeyStore.getInstance(s1, p1);\n+            return ks.getProvider();\n+        } catch (NoSuchProviderException | KeyStoreException e) {\n+            \/\/ expected\n+        }\n+        return null;\n+    };\n+\n+    private static BiFunction<String, String, Provider> certPathBuilderFunc = (s1, p1 ) -> {\n+        CertPathBuilder cps;\n+        try {\n+            cps = CertPathBuilder.getInstance(s1, p1);\n+            return cps.getProvider();\n+        } catch (NoSuchProviderException | NoSuchAlgorithmException e) {\n+            \/\/ expected\n+        }\n+        return null;\n+    };\n+\n+    private static void assertEvent(List<RecordedEvent> events, String type,\n+            String alg, String workingProv, List<String> other) {\n+        boolean secondaryEventOK = other.isEmpty() ? true : false;\n+        for (RecordedEvent e : events) {\n+            if (other.contains(e.getValue(\"type\"))) {\n+                \/\/ secondary operation in service stack while constructing this request\n+                secondaryEventOK = true;\n+                continue;\n+            }\n+            Events.assertField(e, \"provider\").equal(workingProv);\n+            Events.assertField(e, \"type\").equal(type);\n+            Events.assertField(e, \"algorithm\").equal(alg);\n+        }\n+        if (!secondaryEventOK) {\n+            throw new RuntimeException(\"Secondary events missing\");\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/security\/TestSecurityProviderServiceEvent.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"},{"patch":"@@ -178,0 +178,1 @@\n+    public final static String SecurityProviderService = PREFIX + \"SecurityProviderService\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}