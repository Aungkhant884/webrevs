{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,5 @@\n-import java.util.prefs.*;\n-import java.io.*;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.prefs.BackingStoreException;\n+import java.util.prefs.Preferences;\n@@ -37,0 +40,3 @@\n+    private static final String NODE_NAME_1 = \"ExportNodeTestName1\";\n+    private static final String NODE_NAME_2 = \"ExportNodeTestName2\";\n+\n@@ -38,15 +44,30 @@\n-                                            BackingStoreException, IOException {\n-            Preferences N1 = Preferences.userRoot().node(\"ExportNodeTest1\");\n-            N1.put(\"ExportNodeTestName1\",\"ExportNodeTestValue1\");\n-            Preferences N2 = N1.node(\"ExportNodeTest2\");\n-            N2.put(\"ExportNodeTestName2\",\"ExportNodeTestValue2\");\n-            ByteArrayOutputStream exportStream = new ByteArrayOutputStream();\n-            N2.exportNode(exportStream);\n-\n-            \/\/ Removal of preference node should always succeed on Solaris\/Linux\n-            \/\/ by successfully acquiring the appropriate file lock (4947349)\n-            N1.removeNode();\n-\n-            if (((exportStream.toString()).lastIndexOf(\"ExportNodeTestName2\")== -1) ||\n-               ((exportStream.toString()).lastIndexOf(\"ExportNodeTestName1\")!= -1)) {\n-            }\n+        BackingStoreException, IOException {\n+        Preferences N1 = Preferences.userRoot().node(\"ExportNodeTest1\");\n+        N1.put(NODE_NAME_1,\"ExportNodeTestValue1\");\n+        Preferences N2 = N1.node(\"ExportNodeTest2\");\n+        N2.put(NODE_NAME_2,\"ExportNodeTestValue2\");\n+        ByteArrayOutputStream exportStream = new ByteArrayOutputStream();\n+        N2.exportNode(exportStream);\n+\n+        \/\/ Removal of preference node should always succeed on Solaris\/Linux\n+        \/\/ by successfully acquiring the appropriate file lock (4947349)\n+        N1.removeNode();\n+\n+        String streamAsString = exportStream.toString(\"UTF-8\");\n+\n+        StringBuilder sb = null;\n+        if (streamAsString.lastIndexOf(NODE_NAME_2) == -1) {\n+            if (sb == null)\n+                sb = new StringBuilder();\n+            sb.append(NODE_NAME_2 + \" should have been found\");\n+        }\n+        if (streamAsString.lastIndexOf(NODE_NAME_1) != -1) {\n+            if (sb == null)\n+                sb = new StringBuilder();\n+            else\n+                sb.append(\"; \");\n+            sb.append(NODE_NAME_1 + \" should *not* have been found\");\n+        }\n+\n+        if (sb != null)\n+            throw new RuntimeException(sb.toString());\n","filename":"test\/jdk\/java\/util\/prefs\/ExportNode.java","additions":39,"deletions":18,"binary":false,"changes":57,"status":"modified"}]}