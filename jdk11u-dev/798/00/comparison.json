{"files":[{"patch":"@@ -617,4 +617,0 @@\n-        URI uri = request.uri();\n-        if (uri != null) {\n-            h.setHeader(\"host\", Utils.hostString(request));\n-        }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @bug 8203771\n+ * @bug 8203771 8218546\n@@ -67,2 +67,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -77,2 +75,0 @@\n-\n-import static java.lang.System.err;\n@@ -81,0 +77,1 @@\n+import static java.net.http.HttpClient.Version.HTTP_2;\n@@ -84,0 +81,1 @@\n+import static org.testng.Assert.assertTrue;\n@@ -154,1 +152,5 @@\n-    void test(String uriString, String headerNameAndValue, boolean sameClient) throws Exception {\n+    void test(String uriString,\n+              String headerNameAndValue,\n+              boolean sameClient)\n+        throws Exception\n+    {\n@@ -186,6 +188,15 @@\n-            String receivedHeaderString = value == null ? null\n-                    : resp.headers().firstValue(\"X-\"+key).get();\n-            out.println(\"Got X-\" + key + \": \" + resp.headers().allValues(\"X-\"+key));\n-            if (value != null) {\n-                assertEquals(receivedHeaderString, value);\n-                assertEquals(resp.headers().allValues(\"X-\"+key), List.of(value));\n+            boolean isInitialRequest = i == 0;\n+            boolean isSecure = uri.getScheme().equalsIgnoreCase(\"https\");\n+            boolean isHTTP2 = resp.version() == HTTP_2;\n+            boolean isNotH2CUpgrade = isSecure || (sameClient == true && !isInitialRequest);\n+            boolean isDefaultHostHeader = name.equalsIgnoreCase(\"host\") && useDefault;\n+\n+            \/\/ By default, HTTP\/2 sets the `:authority:` pseudo-header, instead\n+            \/\/ of the `Host` header. Therefore, there should be no \"X-Host\"\n+            \/\/ header in the response, except the response to the h2c Upgrade\n+            \/\/ request which will have been sent through HTTP\/1.1.\n+\n+            if (isDefaultHostHeader && isHTTP2 && isNotH2CUpgrade) {\n+                assertTrue(resp.headers().firstValue(\"X-\" + key).isEmpty());\n+                assertTrue(resp.headers().allValues(\"X-\" + key).isEmpty());\n+                out.println(\"No X-\" + key + \" header received, as expected\");\n@@ -193,1 +204,9 @@\n-                assertEquals(resp.headers().allValues(\"X-\"+key).size(), 0);\n+                String receivedHeaderString = value == null ? null\n+                        : resp.headers().firstValue(\"X-\"+key).get();\n+                out.println(\"Got X-\" + key + \": \" + resp.headers().allValues(\"X-\"+key));\n+                if (value != null) {\n+                    assertEquals(receivedHeaderString, value);\n+                    assertEquals(resp.headers().allValues(\"X-\"+key), List.of(value));\n+                } else {\n+                    assertEquals(resp.headers().allValues(\"X-\"+key).size(), 0);\n+                }\n@@ -195,1 +214,0 @@\n-\n@@ -200,1 +218,5 @@\n-    void testHomeMadeIllegalHeader(String uriString, String headerNameAndValue, boolean sameClient) throws Exception {\n+    void testHomeMadeIllegalHeader(String uriString,\n+                                   String headerNameAndValue,\n+                                   boolean sameClient)\n+        throws Exception\n+    {\n@@ -269,0 +291,5 @@\n+            boolean isInitialRequest = i == 0;\n+            boolean isSecure = uri.getScheme().equalsIgnoreCase(\"https\");\n+            boolean isNotH2CUpgrade = isSecure || (sameClient == true && !isInitialRequest);\n+            boolean isDefaultHostHeader = name.equalsIgnoreCase(\"host\") && useDefault;\n+\n@@ -276,6 +303,9 @@\n-                        String receivedHeaderString = value == null ? null\n-                                : resp.headers().firstValue(\"X-\"+key).get();\n-                        out.println(\"Got X-\" + key + \": \" + resp.headers().allValues(\"X-\"+key));\n-                        if (value != null) {\n-                            assertEquals(receivedHeaderString, value);\n-                            assertEquals(resp.headers().allValues(\"X-\" + key), List.of(value));\n+                        \/\/ By default, HTTP\/2 sets the `:authority:` pseudo-header, instead\n+                        \/\/ of the `Host` header. Therefore, there should be no \"X-Host\"\n+                        \/\/ header in the response, except the response to the h2c Upgrade\n+                        \/\/ request which will have been sent through HTTP\/1.1.\n+\n+                        if (isDefaultHostHeader && resp.version() == HTTP_2 && isNotH2CUpgrade) {\n+                            assertTrue(resp.headers().firstValue(\"X-\" + key).isEmpty());\n+                            assertTrue(resp.headers().allValues(\"X-\" + key).isEmpty());\n+                            out.println(\"No X-\" + key + \" header received, as expected\");\n@@ -283,2 +313,11 @@\n-                            assertEquals(resp.headers().allValues(\"X-\" + key).size(), 1);\n-                        } })\n+                            String receivedHeaderString = value == null ? null\n+                                    : resp.headers().firstValue(\"X-\"+key).get();\n+                            out.println(\"Got X-\" + key + \": \" + resp.headers().allValues(\"X-\"+key));\n+                            if (value != null) {\n+                                assertEquals(receivedHeaderString, value);\n+                                assertEquals(resp.headers().allValues(\"X-\" + key), List.of(value));\n+                            } else {\n+                                assertEquals(resp.headers().allValues(\"X-\" + key).size(), 1);\n+                            }\n+                        }\n+                    })\n","filename":"test\/jdk\/java\/net\/httpclient\/SpecialHeadersTest.java","additions":63,"deletions":24,"binary":false,"changes":87,"status":"modified"}]}