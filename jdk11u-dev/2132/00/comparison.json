{"files":[{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4257143\n+  @summary RFE: Cannot set some AWT properties until peer has been created\n+  @key headful\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+public class PeerlessSetCaret {\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            TextField tf = new TextField(\"Hello, World!\");\n+            TextArea ta = new TextArea(\"Hello, World!\");\n+\n+            \/\/ without the fix these will throw IllegalComponentStateException\n+            tf.setCaretPosition(1);\n+            ta.setCaretPosition(1);\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/PeerlessSetCaret\/PeerlessSetCaret.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4118247\n+  @summary Make sure bounds are enforced correctly on\n+           TextComponent.Select(int, int)\n+  @key headful\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+\n+public class SelectionBounds {\n+    public static TextComponent tc;\n+\n+    public static int[][] index = {\n+        {0, 0},     \/\/ 0 = selectionStart = selectionEnd\n+        {5, 5},     \/\/ selectionStart = selectionEnd\n+        {5, 7},     \/\/ 0 < selectionStart < selectionEnd < textLength\n+        {-50, 7},   \/\/ selectionStart < 0 < selectionEnd < textLength\n+        {-50, 50},  \/\/ selectionStart < 0 < textLength < selectionEnd\n+        {5, 50},    \/\/ 0 < selectionStart < textLength < selectionEnd\n+        {40, 50},   \/\/ 0 < textLength < selectionStart < selectionEnd\n+        {-50, -40}, \/\/ selectionStart < selectionEnd < 0 < textLength\n+        {7, 5},     \/\/ 0 < selectionEnd < selectionStart < textLength\n+        {7, -50},   \/\/ selectionEnd < 0 < selectionStart < textLength\n+        {50, -50},  \/\/ selectionEnd < 0 < textLength < selectionStart\n+        {50, 5},    \/\/ 0 < selectionEnd < textLength < selectionStart\n+        {50, 40},   \/\/ 0 < textLength < selectionEnd < selectionStart\n+        {-40, -50}  \/\/ selectionEnd < selectionStart < 0 < textLength\n+    };\n+\n+    public static String[] selections = {\n+        \"\",\n+        \"\",\n+        \"56\",\n+        \"0123456\",\n+        \"0123456789\",\n+        \"56789\",\n+        \"\",\n+        \"\",\n+        \"\",\n+        \"\",\n+        \"\",\n+        \"\",\n+        \"\",\n+        \"\"\n+    };\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            tc = new TextArea(\"0123456789\");\n+            runTheTest();\n+        });\n+    }\n+\n+    private static void runTheTest() {\n+        int i;\n+        String str1;\n+\n+        for (i=0; i<index.length; i++) {\n+            tc.select(index[i][0], index[i][1]);\n+            str1 = tc.getSelectedText();\n+\n+            if (!str1.equals(selections[i])) {\n+                System.out.println(\"Test \" + i + \" FAILED:  \" + str1 +\n+                    \" != \" + selections[i]);\n+                System.out.println(\"Test \" + i + \" FAILED:  \" + str1 +\n+                    \" != \" + selections[i]);\n+                throw new RuntimeException(\"Test \" + i + \" FAILED:  \" + str1 +\n+                    \" != \" + selections[i]);\n+            }\n+            else {\n+                System.out.println(\"Test \" + i + \" PASSED:  \" + str1 +\n+                    \" = \" + selections[i]);\n+                System.out.println(\"Test \" + i + \" PASSED:  \" + str1 +\n+                    \" = \" + selections[i]);\n+            }\n+        }\n+\n+        System.out.println(\"\\nAll tests PASSED.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/SelectionBounds\/SelectionBounds.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4701398 4652358 4659958 4697796 4666876\n+  @summary REGRESSION: TextArea.append does not work consistently with \\r.\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+\n+public class TextAreaCRLFTest {\n+    private static final char[] DIGITS = {\n+        '0', '1', '2', '3', '4', '5', '6', '7',\n+        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'\n+    };\n+\n+    public static Dialog aDialog;\n+    public static TextArea area;\n+    public static boolean passed = true;\n+    public static boolean res;\n+    public static String atext = \"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String atextCRLF = \"row1\\r\\nrow2\\r\\nrow3\";\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                aDialog = new Dialog(new Frame());\n+                aDialog.setTitle(\"ADialog\");\n+                aDialog.setBackground(Color.lightGray);\n+                aDialog.setLayout(new BorderLayout());\n+                Panel mainPanel = new Panel();\n+                mainPanel.setLayout(new BorderLayout(6, 6));\n+                area = new TextArea(atextCRLF, 25, 68,\n+                    TextArea.SCROLLBARS_VERTICAL_ONLY);\n+                area.setFont(new Font(\"Monospaced\", Font.PLAIN, 11));\n+                mainPanel.add(area, \"Center\");\n+                aDialog.add(mainPanel, \"Center\");\n+                aDialog.pack();\n+                System.out.println(\"before: \"+hexEncode(atextCRLF));\n+                System.out.println(\" after: \"+hexEncode(area.getText()));\n+                res = area.getText().equals(atextCRLF);\n+                System.out.println(\"01: \" + res + \"\\n\");\n+                passed = passed && res;\n+                area.setText(atextCRLF);\n+                System.out.println(\"before: \"+hexEncode(atextCRLF));\n+                System.out.println(\" after: \"+hexEncode(area.getText()));\n+                res = area.getText().equals(atextCRLF);\n+                System.out.println(\"02: \" + res + \"\\n\");\n+                passed = passed && res;\n+\n+                area.setText(\"\");\n+                atext = \"row1\";\n+                area.append(atext+\"\\r\");\n+                area.append(atext+\"\\r\");\n+                System.out.println(\"before: \"\n+                    +hexEncode(atext+\"\\r\" + atext+\"\\r\"));\n+                System.out.println(\" after: \"+hexEncode(area.getText()));\n+                res = area.getText().equals(atext + atext);\n+                System.out.println(\"03: \" + res + \"\\n\");\n+                passed = passed && res;\n+\n+                area.setText(\"\");\n+                String atext1 = \"fine.\";\n+                String atext2 = \"messed up.\";\n+                atext = atext1 +\"\\r\\n\"+ atext2;\n+                for (int i = 0; i < atext.length(); i++) {\n+                    area.append(atext.substring(i, i+1));\n+                }\n+                System.out.println(\"before: \"\n+                    +hexEncode(atext1 +\"\\r\\n\"+ atext2));\n+                System.out.println(\" after: \"+hexEncode(area.getText()));\n+                String s = area.getText();\n+                String t = s.substring(s.length()-atext2.length());\n+                res = t.equals(atext2);\n+                System.out.println(\"04: \" + res);\n+                passed = passed && res;\n+\n+                area.setText(\"\");\n+                atext = \"\\r\";\n+                area.append(atext);\n+                System.out.println(\"before: \"+hexEncode(atext));\n+                System.out.println(\" after: \"+hexEncode(area.getText()));\n+                res = area.getText().equals(\"\");\n+                System.out.println(\"05: \" + res + \"\\n\");\n+                passed = passed && res;\n+\n+                if (System.getProperty(\"os.name\").toUpperCase().\n+                    startsWith(\"WIN\")) {\n+                    if (!passed) {\n+                        throw new RuntimeException(\"TextAreaCRLFTest FAILED.\");\n+                    } else {\n+                        System.out.println(\"TextAreaCRLFTest PASSED\");\n+                    }\n+                } else {\n+                    System.out.println(\"This is a Windows oriented testcase.\");\n+                }\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (aDialog != null) {\n+                    aDialog.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static String hexEncode(String str) {\n+        return hexEncode(str.getBytes());\n+    }\n+\n+    private static String hexEncode(byte[] bytes) {\n+        StringBuffer buffer = new StringBuffer(bytes.length * 2);\n+        for (int i = 0; i < bytes.length; i++) {\n+            byte b = bytes[i];\n+            buffer.append(DIGITS[(b & 0xF0) >> 4]);\n+            buffer.append(DIGITS[b & 0x0F]);\n+        }\n+        return buffer.toString();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/TextAreaCRLFTest\/TextAreaCRLFTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4290704\n+  @summary Test use of AWTEventListenerProxyTest class\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.EventQueue;\n+import java.awt.Toolkit;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.AWTEventListenerProxy;\n+import java.util.EventListener;\n+\n+public class AWTEventListenerProxyTest {\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            Toolkit tk = Toolkit.getDefaultToolkit();\n+            if (\"sun.awt.X11.XToolkit\".equals(tk.getClass().getName())) {\n+                System.out.println(\"Do not test for XAWT Toolkit.\");\n+                System.out.println(\"Passing automatically.\");\n+                return;\n+            }\n+\n+            \/\/ check that if no listeners added, returns a 0-length array,\n+            \/\/ not null\n+            AWTEventListener[] array1 = tk.getAWTEventListeners();\n+            if (array1 == null || array1.length != 0) {\n+                System.out.println(\"[Empty array test failed!!]\");\n+                throw new RuntimeException(\"Test failed -\" +\n+                    \" didn't return 0-sized array\");\n+            }\n+            System.out.println(\"[Empty array test passed]\");\n+\n+            \/\/ simple add\/get test\n+            DumbListener dl1 = new DumbListener();\n+            final long dl1MASK = AWTEvent.ACTION_EVENT_MASK;\n+            tk.addAWTEventListener(dl1, dl1MASK);\n+\n+            array1 = tk.getAWTEventListeners();\n+            if (array1 == null || array1.length != 1) {\n+                System.out.println(\"[Simple add\/get test failed!!]\");\n+                throw new RuntimeException(\"Test failed - didn't \" +\n+                    \"return array of 1\");\n+            }\n+            AWTEventListenerProxy dp1 = (AWTEventListenerProxy) array1[0];\n+            EventListener getdl1 = dp1.getListener();\n+            if (getdl1 != dl1) {\n+                System.out.println(\"[Simple add\/get test failed - \" +\n+                    \"wrong listener!!]\");\n+                throw new RuntimeException(\"Test failed - wrong \" +\n+                    \"listener in proxy\");\n+            }\n+\n+            long getmask = dp1.getEventMask();\n+            if (getmask != dl1MASK) {\n+                System.out.println(\"[Simple add\/get test failed - \" +\n+                    \"wrong mask!!]\");\n+                throw new RuntimeException(\"Test failed - wrong mask in proxy\");\n+            }\n+            System.out.println(\"[Simple add\/get test passed]\");\n+\n+            \/\/ add the same listener inside a proxy, with a different mask\n+            \/\/ should get back one listener, with the ORed mask\n+            final long dl2MASK = AWTEvent.CONTAINER_EVENT_MASK;\n+            AWTEventListenerProxy newp = new AWTEventListenerProxy(dl2MASK,\n+                dl1);\n+            tk.addAWTEventListener(newp, dl2MASK);\n+            array1 = tk.getAWTEventListeners();\n+            if (array1.length != 1) {\n+                System.out.println(\"[Proxy add\/get test failed!!]\");\n+                throw new RuntimeException(\"Test failed - added proxy, \" +\n+                    \"but didn't return array of 1\");\n+            }\n+            dp1 = (AWTEventListenerProxy) array1[0];\n+            getdl1 = dp1.getListener();\n+            if (getdl1 != dl1) {\n+                System.out.println(\"[Proxy add\/get test \" +\n+                    \"failed - wrong listener!!]\");\n+                throw new RuntimeException(\"Test failed - added proxy, \" +\n+                    \"wrong listener in proxy\");\n+            }\n+            getmask = dp1.getEventMask();\n+            if (getmask != (dl1MASK | dl2MASK)) {\n+                System.out.println(\"[Proxy add\/get test failed - \" +\n+                    \"wrong mask!!]\");\n+                throw new RuntimeException(\"Test failed - added proxy, \" +\n+                    \"wrong mask in proxy\");\n+            }\n+            System.out.println(\"[Proxy add\/get test passed]\");\n+\n+            \/\/ add some other listener\n+            DumbListener dl3 = new DumbListener();\n+            final long dl3MASK = AWTEvent.FOCUS_EVENT_MASK;\n+            tk.addAWTEventListener(dl3, dl3MASK);\n+\n+            \/\/ test getting with a mask for a listener already added\n+            array1 = tk.getAWTEventListeners(dl1MASK);\n+            if (array1.length != 1) {\n+                System.out.println(\"[Get w\/ mask test failed!! - \" +\n+                    \"not 1 listener!]\");\n+                throw new RuntimeException(\"Test failed - tried to \" +\n+                    \"get w\/ mask\");\n+            }\n+            dp1 = (AWTEventListenerProxy) array1[0];\n+            getdl1 = dp1.getListener();\n+            if (getdl1 != dl1) {\n+                System.out.println(\"[Get w\/ mask test failed!! - \" +\n+                    \"wrong listener]\");\n+                throw new RuntimeException(\"Test failed - tried to get \" +\n+                    \"w\/ mask, wrong listener in proxy\");\n+            }\n+            System.out.println(\"[Get w\/ mask test passed]\");\n+\n+            \/\/ test getting with a mask for a listener not added\n+            array1 = tk.getAWTEventListeners(AWTEvent.MOUSE_EVENT_MASK);\n+            if (array1.length != 0) {\n+                System.out.println(\"[Get w\/ mask test 2 failed!! - \" +\n+                    \"not 0 listeners!]\");\n+                throw new RuntimeException(\"Test failed - tried to get \" +\n+                    \"w\/ mask 2\");\n+            }\n+            System.out.println(\"[Get w\/ mask test 2 passed]\");\n+\n+\n+            \/\/ test getting with a compound mask for a listener already added\n+            array1 = tk.getAWTEventListeners(dl1MASK | dl2MASK);\n+            if (array1.length != 1) {\n+                System.out.println(\"[Get w\/ compound mask test failed!! - \" +\n+                    \"not 1 listeners!]\");\n+                throw new RuntimeException(\"Test failed - tried to get w\/ 2 \" +\n+                    \"ORed masks\");\n+            }\n+            dp1 = (AWTEventListenerProxy) array1[0];\n+            getdl1 = dp1.getListener();\n+            if (getdl1 != dl1) {\n+                System.out.println(\"[Get w\/ compound mask test failed!! - \" +\n+                    \"wrong listener]\");\n+                throw new RuntimeException(\"Test failed - tried to get w\/ \" +\n+                    \"compound mask, wrong listener in proxy\");\n+            }\n+            System.out.println(\"[Get w\/ compound mask test passed]\");\n+        });\n+    }\n+\n+    public static class DumbListener implements AWTEventListener {\n+        public DumbListener() {}\n+        public void eventDispatched(AWTEvent e) {}\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Toolkit\/AWTEventListenerProxyTest\/AWTEventListenerProxyTest.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4338463\n+  @summary excessive synchronization in notifyAWTEventListeners leads to\n+  deadlock\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.EventQueue;\n+import java.awt.Panel;\n+import java.awt.Toolkit;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.ActionEvent;\n+\n+public class ListenerDeadlockTest {\n+    public static final Object lock = new Object();\n+\n+    public static final Toolkit toolkit = Toolkit.getDefaultToolkit();\n+\n+    public static Panel panel = new Panel();\n+\n+    public static final AWTEventListener listener = new AWTEventListener() {\n+        public void eventDispatched(AWTEvent e) {\n+            if (e.getSource() == panel) {\n+                System.out.println(e);\n+                System.out.println(\"No deadlock\");\n+                synchronized(lock) {\n+                    lock.notifyAll();\n+                }\n+            }\n+        }\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            toolkit.addAWTEventListener(listener, -1);\n+\n+            Thread thread = new Thread(new Runnable() {\n+                public void run() {\n+                    synchronized (toolkit) {\n+                        synchronized (lock) {\n+                            try {\n+                                lock.notifyAll();\n+                                lock.wait();\n+                            } catch (InterruptedException ex) {\n+                            }\n+                        }\n+                    }\n+                }\n+            });\n+\n+            synchronized (lock) {\n+                thread.start();\n+                try {\n+                    lock.wait();\n+                } catch (InterruptedException ex) {\n+                }\n+            }\n+\n+            panel.dispatchEvent(new ActionEvent(panel,\n+                ActionEvent.ACTION_PERFORMED, \"Try\"));\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Toolkit\/ListenersDeadlockTest\/ListenerDeadlockTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}