{"files":[{"patch":"@@ -28,1 +28,1 @@\n- * @library \/lib\/testlibrary\n+ * @library \/test\/lib\n@@ -30,3 +30,1 @@\n- * @modules java.management\n- *          jdk.jdi\n- * @build jdk.testlibrary.* VMConnection ExclusiveBind HelloWorld\n+ * @build ExclusiveBind HelloWorld\n@@ -35,5 +33,0 @@\n-import java.net.ServerSocket;\n-import com.sun.jdi.Bootstrap;\n-import com.sun.jdi.VirtualMachine;\n-import com.sun.jdi.connect.Connector;\n-import com.sun.jdi.connect.AttachingConnector;\n@@ -41,8 +34,2 @@\n-import java.util.ArrayList;\n-import java.util.Map;\n-import java.util.List;\n-import java.util.Iterator;\n-import java.util.concurrent.TimeUnit;\n-\n-import jdk.testlibrary.ProcessTools;\n-import jdk.testlibrary.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import lib.jdb.Debuggee;\n@@ -52,43 +39,3 @@\n-     * Find a connector by name\n-     *\/\n-    private static Connector findConnector(String name) {\n-        List connectors = Bootstrap.virtualMachineManager().allConnectors();\n-        Iterator iter = connectors.iterator();\n-        while (iter.hasNext()) {\n-            Connector connector = (Connector)iter.next();\n-            if (connector.name().equals(name)) {\n-                return connector;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    \/*\n-     * Launch (in server mode) a debuggee with the given address and\n-     * suspend mode.\n-     *\/\n-    private static ProcessBuilder prepareLauncher(String address, boolean suspend, String class_name) throws Exception {\n-        List<String> args = new ArrayList<>();\n-        for(String dbgOption : VMConnection.getDebuggeeVMOptions().split(\" \")) {\n-            if (!dbgOption.trim().isEmpty()) {\n-                args.add(dbgOption);\n-            }\n-        }\n-        String lib = \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=\";\n-        if (suspend) {\n-            lib += \"y\";\n-        } else {\n-            lib += \"n\";\n-        }\n-        lib += \",address=\" + address;\n-\n-        args.add(lib);\n-        args.add(class_name);\n-\n-        return ProcessTools.createJavaProcessBuilder(args.toArray(new String[args.size()]));\n-    }\n-\n-    \/*\n-     * - pick a TCP port\n-     * - Launch a debuggee in server=y,suspend=y,address=${port}\n-     * - Launch a second debuggee in server=y,suspend=n with the same port\n+     * - Launch a debuggee with server=y,suspend=y\n+     * - Parse listening port\n+     * - Launch a second debuggee in server=y,suspend=n with the parsed port\n@@ -99,7 +46,0 @@\n-        \/\/ find a free port\n-        ServerSocket ss = new ServerSocket(0);\n-        int port = ss.getLocalPort();\n-        ss.close();\n-\n-        String address = String.valueOf(port);\n-\n@@ -107,12 +47,6 @@\n-        ProcessBuilder process1 = prepareLauncher(address, true, \"HelloWorld\");\n-        \/\/ start the debuggee and wait for the \"ready\" message\n-        Process p = ProcessTools.startProcess(\n-                \"process1\",\n-                process1,\n-                line -> line.equals(\"Listening for transport dt_socket at address: \" + address),\n-                Utils.adjustTimeout(5000),\n-                TimeUnit.MILLISECONDS\n-        );\n-\n-        \/\/ launch a second debuggee with the same address\n-        ProcessBuilder process2 = prepareLauncher(address, false, \"HelloWorld\");\n+        try (Debuggee process1 = Debuggee.launcher(\"HelloWorld\").launch(\"process1\")) {\n+            \/\/ launch a second debuggee with the same address\n+            ProcessBuilder process2 = Debuggee.launcher(\"HelloWorld\")\n+                    .setSuspended(false)\n+                    .setAddress(process1.getAddress())\n+                    .prepare();\n@@ -120,2 +54,2 @@\n-        \/\/ get exit status from second debuggee\n-        int exitCode = ProcessTools.startProcess(\"process2\", process2).waitFor();\n+            \/\/ get exit status from second debuggee\n+            int exitCode = ProcessTools.startProcess(\"process2\", process2).waitFor();\n@@ -123,14 +57,6 @@\n-        \/\/ clean-up - attach to first debuggee and resume it\n-        AttachingConnector conn = (AttachingConnector)findConnector(\"com.sun.jdi.SocketAttach\");\n-        Map conn_args = conn.defaultArguments();\n-        Connector.IntegerArgument port_arg =\n-            (Connector.IntegerArgument)conn_args.get(\"port\");\n-        port_arg.setValue(port);\n-        VirtualMachine vm = conn.attach(conn_args);\n-        vm.resume();\n-\n-        \/\/ if the second debuggee ran to completion then we've got a problem\n-        if (exitCode == 0) {\n-            throw new RuntimeException(\"Test failed - second debuggee didn't fail to bind\");\n-        } else {\n-            System.out.println(\"Test passed - second debuggee correctly failed to bind\");\n+            \/\/ if the second debuggee ran to completion then we've got a problem\n+            if (exitCode == 0) {\n+                throw new RuntimeException(\"Test failed - second debuggee didn't fail to bind\");\n+            } else {\n+                System.out.println(\"Test passed - second debuggee correctly failed to bind\");\n+            }\n","filename":"test\/jdk\/com\/sun\/jdi\/ExclusiveBind.java","additions":21,"deletions":95,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package lib.jdb;\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * Helper class to run java debuggee and parse agent listening transport\/address.\n+ * Usage:\n+ *   1)\n+ *      Debugee debugee = Debuggee.launcher(\"MyClass\").setTransport(\"dt_shmem\").launch();\n+ *      try {\n+ *          String transport = debuggee.getTransport();\n+ *          String addr = debuggee.getAddress();\n+ *      } finally {\n+ *          debuggee.shutdown();\n+ *      }\n+ *   2) (using try-with-resource)\n+ *      try (Debugee debugee = Debuggee.launcher(\"MyClass\").launch()) {\n+ *          String transport = debuggee.getTransport();\n+ *          String addr = debuggee.getAddress();\n+ *      }\n+ *   3)\n+ *      ProcessBuilder pb = Debuggee.launcher(\"MyClass\").setSuspended(false).prepare();\n+ *      ProcessTools.executeProcess(pb);\n+ *\/\n+public class Debuggee implements Closeable {\n+\n+    public static Launcher launcher(String mainClass) {\n+        return new Launcher(mainClass);\n+    }\n+\n+    public static class Launcher {\n+        private final String mainClass;\n+        private final List<String> options = new LinkedList<>();\n+        private String transport = \"dt_socket\";\n+        private String address = null;\n+        private boolean suspended = true;\n+        private boolean addTestVmAndJavaOptions = true;\n+\n+        private Launcher(String mainClass) {\n+            this.mainClass = mainClass;\n+        }\n+        public Launcher addOption(String option) {\n+            options.add(option);\n+            return this;\n+        }\n+        public Launcher addOptions(List<String> options) {\n+            this.options.addAll(options);\n+            return this;\n+        }\n+        \/\/ default is \"dt_socket\"\n+        public Launcher setTransport(String value) {\n+            transport = value;\n+            return this;\n+        }\n+        \/\/ default is \"null\" (auto-generate)\n+        public Launcher setAddress(String value) {\n+            address = value;\n+            return this;\n+        }\n+        \/\/ default is \"true\"\n+        public Launcher setSuspended(boolean value) {\n+            suspended = value;\n+            return this;\n+        }\n+        \/\/ default is \"true\"\n+        public Launcher addTestVmAndJavaOptions(boolean value) {\n+            addTestVmAndJavaOptions = value;\n+            return this;\n+        }\n+\n+        public ProcessBuilder prepare() {\n+            List<String> debuggeeArgs = new LinkedList<>();\n+            debuggeeArgs.add(\"-agentlib:jdwp=transport=\" + transport\n+                    + (address == null ? \"\" : \",address=\" + address)\n+                    + \",server=y,suspend=\" + (suspended ? \"y\" : \"n\"));\n+            debuggeeArgs.addAll(options);\n+            debuggeeArgs.add(mainClass);\n+            return ProcessTools.createJavaProcessBuilder(addTestVmAndJavaOptions,\n+                    debuggeeArgs.toArray(new String[0]));\n+        }\n+\n+        public Debuggee launch(String name) {\n+            return new Debuggee(prepare(), name);\n+        }\n+        public Debuggee launch() {\n+            return launch(\"debuggee\");\n+        }\n+    }\n+\n+    \/\/ starts the process, waits for \"Listening for transport\" output and detects transport\/address\n+    private Debuggee(ProcessBuilder pb, String name) {\n+        \/\/ debuggeeListen[0] - transport, debuggeeListen[1] - address\n+        String[] debuggeeListen = new String[2];\n+        Pattern listenRegexp = Pattern.compile(\"Listening for transport \\\\b(.+)\\\\b at address: \\\\b(.+)\\\\b\");\n+        try {\n+            p = ProcessTools.startProcess(name, pb,\n+                    s -> output.add(s),  \/\/ output consumer\n+                    s -> {  \/\/ warm-up predicate\n+                        Matcher m = listenRegexp.matcher(s);\n+                        if (!m.matches()) {\n+                            return false;\n+                        }\n+                        debuggeeListen[0] = m.group(1);\n+                        debuggeeListen[1] = m.group(2);\n+                        return true;\n+                    },\n+                    30, TimeUnit.SECONDS);\n+            transport = debuggeeListen[0];\n+            address = debuggeeListen[1];\n+        } catch (IOException | InterruptedException | TimeoutException ex) {\n+            throw new RuntimeException(\"failed to launch debuggee\", ex);\n+        }\n+    }\n+\n+    private final Process p;\n+    private final List<String> output = new LinkedList<>();\n+    private final String transport;\n+    private final String address;\n+\n+    public void shutdown() {\n+        try {\n+            close();\n+        } catch (IOException ex) {\n+            \/\/ ignore\n+        }\n+    }\n+\n+    \/\/ waits until the process shutdown or crash\n+    public boolean waitFor(long timeout, TimeUnit unit) {\n+        try {\n+            return p.waitFor(Utils.adjustTimeout(timeout), unit);\n+        } catch (InterruptedException e) {\n+            return false;\n+        }\n+    }\n+\n+    \/\/ returns the whole debuggee output as a string\n+    public String getOutput() {\n+        return output.stream().collect(Collectors.joining(Utils.NEW_LINE));\n+    }\n+\n+    String getTransport() {\n+        return transport;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (p.isAlive()) {\n+            p.destroy();\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/Debuggee.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -26,1 +26,0 @@\n-import jdk.test.lib.Utils;\n@@ -28,1 +27,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -37,3 +35,0 @@\n-import java.util.concurrent.TimeoutException;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n@@ -79,2 +74,1 @@\n-    protected Process debuggee;\n-    private final List<String> debuggeeOutput = new LinkedList<>();\n+    protected Debuggee debuggee;\n@@ -90,1 +84,1 @@\n-        return debuggeeOutput.stream().collect(Collectors.joining(lineSeparator));\n+        return debuggee == null ? \"\" : debuggee.getOutput();\n@@ -109,1 +103,1 @@\n-            java -agentlib:jdwp=transport=dt_socket,address=0,server=n,suspend=y <debuggeeClass>\n+            java -agentlib:jdwp=transport=dt_socket,server=n,suspend=y <debuggeeClass>\n@@ -115,26 +109,3 @@\n-        List<String> debuggeeArgs = new LinkedList<>();\n-        \/\/ specify address=0 to automatically select free port\n-        debuggeeArgs.add(\"-agentlib:jdwp=transport=dt_socket,address=0,server=y,suspend=y\");\n-        debuggeeArgs.addAll(launchOptions.debuggeeOptions);\n-        debuggeeArgs.add(launchOptions.debuggeeClass);\n-        ProcessBuilder pbDebuggee = ProcessTools.createJavaProcessBuilder(true, debuggeeArgs.toArray(new String[0]));\n-\n-        \/\/ debuggeeListen[0] - transport, debuggeeListen[1] - address\n-        String[] debuggeeListen = new String[2];\n-        Pattern listenRegexp = Pattern.compile(\"Listening for transport \\\\b(.+)\\\\b at address: \\\\b(\\\\d+)\\\\b\");\n-        try {\n-            debuggee = ProcessTools.startProcess(\"debuggee\", pbDebuggee,\n-                    s -> debuggeeOutput.add(s),  \/\/ output consumer\n-                    s -> {  \/\/ warm-up predicate\n-                        Matcher m = listenRegexp.matcher(s);\n-                        if (!m.matches()) {\n-                            return false;\n-                        }\n-                        debuggeeListen[0] = m.group(1);\n-                        debuggeeListen[1] = m.group(2);\n-                        return true;\n-                    },\n-                    30, TimeUnit.SECONDS);\n-        } catch (IOException | InterruptedException | TimeoutException ex) {\n-            throw new RuntimeException(\"failed to launch debuggee\", ex);\n-        }\n+        debuggee = Debuggee.launcher(launchOptions.debuggeeClass)\n+                .addOptions(launchOptions.debuggeeOptions)\n+                .launch();\n@@ -144,1 +115,1 @@\n-            jdb = new Jdb(\"-connect\", \"com.sun.jdi.SocketAttach:port=\" + debuggeeListen[1]);\n+            jdb = new Jdb(\"-connect\", \"com.sun.jdi.SocketAttach:port=\" + debuggee.getAddress());\n@@ -147,1 +118,1 @@\n-            debuggee.destroy();\n+            debuggee.shutdown();\n@@ -161,9 +132,3 @@\n-        if (debuggee != null && debuggee.isAlive()) {\n-            try {\n-                debuggee.waitFor(Utils.adjustTimeout(10), TimeUnit.SECONDS);\n-            } catch (InterruptedException e) {\n-                \/\/ ignore\n-            } finally {\n-                if (debuggee.isAlive()) {\n-                    debuggee.destroy();\n-                }\n+        if (debuggee != null) {\n+            if (!debuggee.waitFor(10, TimeUnit.SECONDS)) {\n+                debuggee.shutdown();\n","filename":"test\/jdk\/com\/sun\/jdi\/lib\/jdb\/JdbTest.java","additions":11,"deletions":46,"binary":false,"changes":57,"status":"modified"}]}