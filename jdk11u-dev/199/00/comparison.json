{"files":[{"patch":"@@ -59,25 +59,0 @@\n-    private KeyListener keyListener = null;\n-\n-    @SuppressWarnings(\"serial\")\n-    private class SelectPreviousBtn extends AbstractAction {\n-        public SelectPreviousBtn() {\n-            super(\"Previous\");\n-        }\n-\n-        @Override\n-        public void actionPerformed(ActionEvent e) {\n-            AquaButtonRadioUI.this.selectRadioButton(e, false);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"serial\")\n-    private class SelectNextBtn extends AbstractAction {\n-        public SelectNextBtn() {\n-            super(\"Next\");\n-        }\n-\n-        @Override\n-        public void actionPerformed(ActionEvent e) {\n-            AquaButtonRadioUI.this.selectRadioButton(e, true);\n-        }\n-    }\n@@ -118,265 +93,0 @@\n-\n-    private KeyListener createKeyListener() {\n-        if (keyListener == null) {\n-            keyListener = new KeyHandler();\n-        }\n-\n-        return keyListener;\n-    }\n-\n-    private boolean isValidRadioButtonObj(Object obj) {\n-        return ((obj instanceof JRadioButton) &&\n-                    ((JRadioButton)obj).isVisible() &&\n-                    ((JRadioButton)obj).isEnabled());\n-    }\n-\n-    @Override\n-    protected void installListeners(AbstractButton button) {\n-        super.installListeners(button);\n-\n-        \/\/Only for JRadioButton\n-        if (!(button instanceof JRadioButton))\n-            return;\n-\n-        keyListener = createKeyListener();\n-        button.addKeyListener(keyListener);\n-\n-        button.setFocusTraversalKeysEnabled(false);\n-\n-        button.getActionMap().put(\"Previous\", new SelectPreviousBtn());\n-        button.getActionMap().put(\"Next\", new SelectNextBtn());\n-\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"UP\"), \"Previous\");\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"DOWN\"), \"Next\");\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"LEFT\"), \"Previous\");\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"RIGHT\"), \"Next\");\n-    }\n-\n-    @Override\n-    protected void uninstallListeners(AbstractButton button) {\n-        super.uninstallListeners(button);\n-\n-        \/\/Only for JRadioButton\n-        if (!(button instanceof JRadioButton))\n-            return;\n-\n-        \/\/Unmap actions from the arrow keys.\n-        button.getActionMap().remove(\"Previous\");\n-        button.getActionMap().remove(\"Next\");\n-\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            remove(KeyStroke.getKeyStroke(\"UP\"));\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            remove(KeyStroke.getKeyStroke(\"DOWN\"));\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            remove(KeyStroke.getKeyStroke(\"LEFT\"));\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            remove(KeyStroke.getKeyStroke(\"RIGHT\"));\n-\n-        if (keyListener != null ) {\n-            button.removeKeyListener(keyListener);\n-            keyListener = null;\n-        }\n-    }\n-\n-    \/**\n-     * Select radio button based on \"Previous\" or \"Next\" operation\n-     *\n-     * @param event, the event object.\n-     * @param next, indicate if it's next one\n-     *\/\n-    private void selectRadioButton(ActionEvent event, boolean next) {\n-        Object eventSrc = event.getSource();\n-\n-        \/\/Check whether the source is JRadioButton, if so, whether it is visible\n-        if (!isValidRadioButtonObj(eventSrc))\n-            return;\n-\n-        ButtonGroupInfo btnGroupInfo = new ButtonGroupInfo((JRadioButton)eventSrc);\n-        btnGroupInfo.selectNewButton(next);\n-    }\n-\n-    \/**\n-     * ButtonGroupInfo, used to get related info in button group\n-     * for given radio button.\n-     *\/\n-    private class ButtonGroupInfo {\n-        JRadioButton activeBtn = null;\n-\n-        JRadioButton firstBtn = null;\n-        JRadioButton lastBtn = null;\n-\n-        JRadioButton previousBtn = null;\n-        JRadioButton nextBtn = null;\n-\n-        HashSet<JRadioButton> btnsInGroup = null;\n-        boolean srcFound = false;\n-\n-        public ButtonGroupInfo(JRadioButton btn) {\n-            activeBtn = btn;\n-            btnsInGroup = new HashSet<JRadioButton>();\n-        }\n-\n-        \/\/Check if given object is in the button group\n-        boolean containsInGroup(Object obj) {\n-            return btnsInGroup.contains(obj);\n-        }\n-\n-        \/\/Check if the next object to gain focus belongs\n-        \/\/to the button group or not\n-        Component getFocusTransferBaseComponent(boolean next) {\n-            return firstBtn;\n-        }\n-\n-        boolean getButtonGroupInfo() {\n-            if (activeBtn == null)\n-                return false;\n-\n-            btnsInGroup.clear();\n-\n-            \/\/Get the button model from ths source.\n-            ButtonModel model = activeBtn.getModel();\n-            if (!(model instanceof DefaultButtonModel))\n-                return false;\n-\n-            \/\/ If the button model is DefaultButtonModel, and use it, otherwise return.\n-            DefaultButtonModel bm = (DefaultButtonModel) model;\n-\n-            \/\/get the ButtonGroup of the button from the button model\n-            ButtonGroup group = bm.getGroup();\n-            if (group == null)\n-                return false;\n-\n-            Enumeration<AbstractButton> e = group.getElements();\n-            if (e == null)\n-                return false;\n-\n-            while (e.hasMoreElements()) {\n-                AbstractButton curElement = e.nextElement();\n-                if (!isValidRadioButtonObj(curElement))\n-                    continue;\n-\n-                btnsInGroup.add((JRadioButton) curElement);\n-\n-                \/\/ If firstBtn is not set yet, curElement is that first button\n-                if (null == firstBtn)\n-                    firstBtn = (JRadioButton)curElement;\n-\n-                if (activeBtn == curElement)\n-                    srcFound = true;\n-                else if (!srcFound) {\n-                    \/\/The source has not been yet found and the current element\n-                    \/\/ is the last previousBtn\n-                    previousBtn = (JRadioButton) curElement;\n-                } else if (nextBtn == null) {\n-                    \/\/The source has been found and the current element\n-                    \/\/is the next valid button of the list\n-                    nextBtn = (JRadioButton) curElement;\n-                }\n-\n-                \/\/Set new last \"valid\" JRadioButton of the list\n-                lastBtn = (JRadioButton)curElement;\n-            }\n-\n-            return true;\n-        }\n-\n-        \/**\n-         * Find the new radio button that focus needs to be\n-         * moved to in the group, select the button\n-         *\n-         * @param next, indicate if it's arrow up\/left or down\/right\n-         *\/\n-        void selectNewButton(boolean next) {\n-            if (!getButtonGroupInfo())\n-                return;\n-\n-            if (srcFound) {\n-                JRadioButton newSelectedBtn = null;\n-                if (next) {\n-                    \/\/Select Next button. Cycle to the first button if the source\n-                    \/\/button is the last of the group.\n-                    newSelectedBtn = (null == nextBtn) ? firstBtn : nextBtn;\n-                } else {\n-                    \/\/Select previous button. Cycle to the last button if the source\n-                    \/\/button is the first button of the group.\n-                    newSelectedBtn = (null == previousBtn) ? lastBtn: previousBtn;\n-                }\n-                if (newSelectedBtn != null && newSelectedBtn != activeBtn) {\n-                    newSelectedBtn.requestFocusInWindow();\n-                    newSelectedBtn.setSelected(true);\n-                }\n-            }\n-        }\n-\n-        \/**\n-         * Find the button group the passed in JRadioButton belongs to, and\n-         * move focus to next component of the last button in the group\n-         * or previous compoennt of first button\n-         *\n-         * @param next, indicate if jump to next component or previous\n-         *\/\n-        void jumpToNextComponent(boolean next) {\n-            if (!getButtonGroupInfo()) {\n-                \/\/In case the button does not belong to any group, it needs\n-                \/\/to be treated as a component\n-                if (activeBtn != null) {\n-                    lastBtn = activeBtn;\n-                    firstBtn = activeBtn;\n-                } else\n-                    return;\n-            }\n-\n-            \/\/If next component in the parent window is not in the button\n-            \/\/group, current active button will be base, otherwise, the base\n-            \/\/ will be first or last button in the button group\n-            Component focusBase = getFocusTransferBaseComponent(next);\n-            if (focusBase != null) {\n-                if (next) {\n-                    KeyboardFocusManager.\n-                        getCurrentKeyboardFocusManager().focusNextComponent(focusBase);\n-                } else {\n-                    KeyboardFocusManager.\n-                        getCurrentKeyboardFocusManager().focusPreviousComponent(focusBase);\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Radiobutton KeyListener\n-     *\/\n-    private class KeyHandler implements KeyListener {\n-        \/\/This listener checks if the key event is a focus traversal key event\n-        \/\/ on a radio button, consume the event if so and move the focus\n-        \/\/ to next\/previous component\n-        @Override\n-        public void keyPressed(KeyEvent e) {\n-            AWTKeyStroke stroke = AWTKeyStroke.getAWTKeyStrokeForEvent(e);\n-            if (stroke != null && e.getSource() instanceof JRadioButton) {\n-                JRadioButton source = (JRadioButton) e.getSource();\n-                boolean next = isFocusTraversalKey(source,\n-                                KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, stroke);\n-                if (next || isFocusTraversalKey(source,\n-                                KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, stroke)) {\n-                                    e.consume();\n-                                    ButtonGroupInfo btnGroupInfo = new ButtonGroupInfo(source);\n-                                    btnGroupInfo.jumpToNextComponent(next);\n-                }\n-            }\n-        }\n-\n-        private boolean isFocusTraversalKey(JComponent c, int id,\n-                                                AWTKeyStroke stroke) {\n-            Set<AWTKeyStroke> keys = c.getFocusTraversalKeys(id);\n-            return keys != null && keys.contains(stroke);\n-        }\n-\n-        @Override public void keyReleased(KeyEvent e) {}\n-\n-        @Override public void keyTyped(KeyEvent e) {}\n-    }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonRadioUI.java","additions":0,"deletions":290,"binary":false,"changes":290,"status":"modified"},{"patch":"@@ -188,1 +188,2 @@\n-        final AquaButtonListener listener = createButtonListener(b);\n+        super.installListeners(b);\n+        AquaButtonListener listener = getAquaButtonListener(b);\n@@ -194,5 +195,0 @@\n-            b.addMouseListener(listener);\n-            b.addMouseMotionListener(listener);\n-            b.addFocusListener(listener);\n-            b.addPropertyChangeListener(listener);\n-            b.addChangeListener(listener);\n@@ -224,0 +220,1 @@\n+        super.uninstallListeners(b);\n@@ -227,6 +224,0 @@\n-            b.removeMouseListener(listener);\n-            b.removeMouseListener(listener);\n-            b.removeMouseMotionListener(listener);\n-            b.removeFocusListener(listener);\n-            b.removeChangeListener(listener);\n-            b.removePropertyChangeListener(listener);\n@@ -249,0 +240,17 @@\n+    \/**\n+     * Returns the AquaButtonListener for the passed in Button, or null if one\n+     * could not be found.\n+     *\/\n+    private AquaButtonListener getAquaButtonListener(AbstractButton b) {\n+        MouseMotionListener[] listeners = b.getMouseMotionListeners();\n+\n+        if (listeners != null) {\n+            for (MouseMotionListener listener : listeners) {\n+                if (listener instanceof AquaButtonListener) {\n+                    return (AquaButtonListener) listener;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaButtonUI.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -38,0 +38,3 @@\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -71,0 +74,2 @@\n+    private KeyListener keyListener = null;\n+\n@@ -159,0 +164,21 @@\n+\n+        if (b instanceof JToggleButton) {\n+            keyListener = createKeyListener();\n+            b.addKeyListener(keyListener);\n+\n+            \/\/ Need to get traversal key event\n+            b.setFocusTraversalKeysEnabled(false);\n+\n+            \/\/ Map actions to the arrow keys\n+            b.getActionMap().put(\"Previous\", new BasicButtonUI.SelectPreviousBtn());\n+            b.getActionMap().put(\"Next\", new BasicButtonUI.SelectNextBtn());\n+\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                    put(KeyStroke.getKeyStroke(\"UP\"), \"Previous\");\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                    put(KeyStroke.getKeyStroke(\"DOWN\"), \"Next\");\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                    put(KeyStroke.getKeyStroke(\"LEFT\"), \"Previous\");\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n+                    put(KeyStroke.getKeyStroke(\"RIGHT\"), \"Next\");\n+        }\n@@ -211,0 +237,18 @@\n+        if (b instanceof JToggleButton) {\n+            \/\/ Unmap actions from the arrow keys\n+            b.getActionMap().remove(\"Previous\");\n+            b.getActionMap().remove(\"Next\");\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n+                    .remove(KeyStroke.getKeyStroke(\"UP\"));\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n+                    .remove(KeyStroke.getKeyStroke(\"DOWN\"));\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n+                    .remove(KeyStroke.getKeyStroke(\"LEFT\"));\n+            b.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n+                    .remove(KeyStroke.getKeyStroke(\"RIGHT\"));\n+\n+            if (keyListener != null) {\n+                b.removeKeyListener(keyListener);\n+                keyListener = null;\n+            }\n+        }\n@@ -569,0 +613,258 @@\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ Private functions \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    \/**\n+     * Creates the key listener to handle tab navigation in JToggleButton Group.\n+     *\/\n+    private KeyListener createKeyListener() {\n+        if (keyListener == null) {\n+            keyListener = new BasicButtonUI.KeyHandler();\n+        }\n+        return keyListener;\n+    }\n+\n+\n+    private boolean isValidToggleButtonObj(Object obj) {\n+        return ((obj instanceof JToggleButton) &&\n+                ((JToggleButton) obj).isVisible() &&\n+                ((JToggleButton) obj).isEnabled());\n+    }\n+\n+    \/**\n+     * Select toggle button based on \"Previous\" or \"Next\" operation\n+     *\n+     * @param event, the event object.\n+     * @param next, indicate if it's next one\n+     *\/\n+    private void selectToggleButton(ActionEvent event, boolean next) {\n+        \/\/ Get the source of the event.\n+        Object eventSrc = event.getSource();\n+\n+        \/\/ Check whether the source is JToggleButton, it so, whether it is visible\n+        if (!isValidToggleButtonObj(eventSrc))\n+            return;\n+\n+        BasicButtonUI.ButtonGroupInfo btnGroupInfo = new BasicButtonUI.ButtonGroupInfo((JToggleButton)eventSrc);\n+        btnGroupInfo.selectNewButton(next);\n+    }\n+\n+    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ Inner Classes \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+    @SuppressWarnings(\"serial\")\n+    private class SelectPreviousBtn extends AbstractAction {\n+        public SelectPreviousBtn() {\n+            super(\"Previous\");\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            BasicButtonUI.this.selectToggleButton(e, false);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    private class SelectNextBtn extends AbstractAction{\n+        public SelectNextBtn() {\n+            super(\"Next\");\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            BasicButtonUI.this.selectToggleButton(e, true);\n+        }\n+    }\n+\n+    \/**\n+     * ButtonGroupInfo, used to get related info in button group\n+     * for given toggle button\n+     *\/\n+    private class ButtonGroupInfo {\n+\n+        JToggleButton activeBtn = null;\n+\n+        JToggleButton firstBtn = null;\n+        JToggleButton lastBtn = null;\n+\n+        JToggleButton previousBtn = null;\n+        JToggleButton nextBtn = null;\n+\n+        HashSet<JToggleButton> btnsInGroup = null;\n+\n+        boolean srcFound = false;\n+        public ButtonGroupInfo(JToggleButton btn) {\n+            activeBtn = btn;\n+            btnsInGroup = new HashSet<JToggleButton>();\n+        }\n+\n+        \/\/ Check if given object is in the button group\n+        boolean containsInGroup(Object obj){\n+            return btnsInGroup.contains(obj);\n+        }\n+\n+        \/\/ Check if the next object to gain focus belongs\n+        \/\/ to the button group or not\n+        Component getFocusTransferBaseComponent(boolean next){\n+            return firstBtn;\n+        }\n+\n+        boolean getButtonGroupInfo() {\n+            if (activeBtn == null)\n+                return false;\n+\n+            btnsInGroup.clear();\n+\n+            \/\/ Get the button model from the source.\n+            ButtonModel model = activeBtn.getModel();\n+            if (!(model instanceof DefaultButtonModel))\n+                return false;\n+\n+            \/\/ If the button model is DefaultButtonModel, and use it, otherwise return.\n+            DefaultButtonModel bm = (DefaultButtonModel) model;\n+\n+            \/\/ get the ButtonGroup of the button from the button model\n+            ButtonGroup group = bm.getGroup();\n+            if (group == null)\n+                return false;\n+\n+            \/\/ Get all the buttons in the group\n+            Enumeration<AbstractButton> e = group.getElements();\n+            if (e == null)\n+                return false;\n+\n+            while (e.hasMoreElements()) {\n+                AbstractButton curElement = e.nextElement();\n+                if (!isValidToggleButtonObj(curElement))\n+                    continue;\n+\n+                btnsInGroup.add((JToggleButton) curElement);\n+\n+                \/\/ If firstBtn is not set yet, curElement is that first button\n+                if (null == firstBtn)\n+                    firstBtn = (JToggleButton) curElement;\n+\n+                if (activeBtn == curElement)\n+                    srcFound = true;\n+                else if (!srcFound) {\n+                    \/\/ The source has not been yet found and the current element\n+                    \/\/ is the last previousBtn\n+                    previousBtn = (JToggleButton) curElement;\n+                } else if (nextBtn == null) {\n+                    \/\/ The source has been found and the current element\n+                    \/\/ is the next valid button of the list\n+                    nextBtn = (JToggleButton) curElement;\n+                }\n+\n+                \/\/ Set new last \"valid\" JToggleButton of the list\n+                lastBtn = (JToggleButton) curElement;\n+            }\n+\n+            return true;\n+        }\n+\n+        \/**\n+         * Find the new toggle button that focus needs to be\n+         * moved to in the group, select the button\n+         *\n+         * @param next, indicate if it's arrow up\/left or down\/right\n+         *\/\n+        void selectNewButton(boolean next) {\n+            if (!getButtonGroupInfo())\n+                return;\n+\n+            if (srcFound) {\n+                JToggleButton newSelectedBtn = null;\n+                if (next) {\n+                    \/\/ Select Next button. Cycle to the first button if the source\n+                    \/\/ button is the last of the group.\n+                    newSelectedBtn = (null == nextBtn) ? firstBtn : nextBtn;\n+                } else {\n+                    \/\/ Select previous button. Cycle to the last button if the source\n+                    \/\/ button is the first button of the group.\n+                    newSelectedBtn = (null == previousBtn) ? lastBtn : previousBtn;\n+                }\n+                if (newSelectedBtn != null &&\n+                        (newSelectedBtn != activeBtn)) {\n+                    ButtonModel btnModel = newSelectedBtn.getModel();\n+                    btnModel.setPressed(true);\n+                    btnModel.setArmed(true);\n+                    newSelectedBtn.requestFocusInWindow();\n+                    newSelectedBtn.setSelected(true);\n+                    btnModel.setPressed(false);\n+                    btnModel.setArmed(false);\n+                }\n+            }\n+        }\n+\n+        \/**\n+         * Find the button group the passed in JToggleButton belongs to, and\n+         * move focus to next component of the last button in the group\n+         * or previous component of first button\n+         *\n+         * @param next, indicate if jump to next component or previous\n+         *\/\n+        void jumpToNextComponent(boolean next) {\n+            if (!getButtonGroupInfo()){\n+                \/\/ In case the button does not belong to any group, it needs\n+                \/\/ to be treated as a component\n+                if (activeBtn != null){\n+                    lastBtn = activeBtn;\n+                    firstBtn = activeBtn;\n+                }\n+                else\n+                    return;\n+            }\n+\n+            \/\/ Update the component we will use as base to transfer\n+            \/\/ focus from\n+            JComponent compTransferFocusFrom = activeBtn;\n+\n+            \/\/ If next component in the parent window is not in\n+            \/\/ the button group, current active button will be\n+            \/\/ base, otherwise, the base will be first or last\n+            \/\/ button in the button group\n+            Component focusBase = getFocusTransferBaseComponent(next);\n+            if (focusBase != null){\n+                if (next) {\n+                    KeyboardFocusManager.\n+                            getCurrentKeyboardFocusManager().focusNextComponent(focusBase);\n+                } else {\n+                    KeyboardFocusManager.\n+                            getCurrentKeyboardFocusManager().focusPreviousComponent(focusBase);\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Togglebutton KeyListener\n+     *\/\n+    private class KeyHandler implements KeyListener {\n+\n+        \/\/ This listener checks if the key event is a focus traversal key event\n+        \/\/ on a toggle button, consume the event if so and move the focus\n+        \/\/ to next\/previous component\n+        public void keyPressed(KeyEvent e) {\n+            AWTKeyStroke stroke = AWTKeyStroke.getAWTKeyStrokeForEvent(e);\n+            if (stroke != null && e.getSource() instanceof JToggleButton) {\n+                JToggleButton source = (JToggleButton) e.getSource();\n+                boolean next = isFocusTraversalKey(source,\n+                        KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n+                        stroke);\n+                if (next || isFocusTraversalKey(source,\n+                        KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,\n+                        stroke)) {\n+                    e.consume();\n+                    BasicButtonUI.ButtonGroupInfo btnGroupInfo = new BasicButtonUI.ButtonGroupInfo(source);\n+                    btnGroupInfo.jumpToNextComponent(next);\n+                }\n+            }\n+        }\n+\n+        private boolean isFocusTraversalKey(JComponent c, int id,\n+                                            AWTKeyStroke stroke) {\n+            Set<AWTKeyStroke> keys = c.getFocusTraversalKeys(id);\n+            return keys != null && keys.contains(stroke);\n+        }\n+\n+        public void keyReleased(KeyEvent e) {\n+        }\n+\n+        public void keyTyped(KeyEvent e) {\n+        }\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicButtonUI.java","additions":302,"deletions":0,"binary":false,"changes":302,"status":"modified"},{"patch":"@@ -116,59 +116,0 @@\n-    \/\/ ********************************\n-    \/\/        Install Listeners\n-    \/\/ ********************************\n-    @Override\n-    protected void installListeners(AbstractButton button) {\n-        super.installListeners(button);\n-\n-        \/\/ Only for JRadioButton\n-        if (!(button instanceof JRadioButton))\n-            return;\n-\n-        keyListener = createKeyListener();\n-        button.addKeyListener(keyListener);\n-\n-        \/\/ Need to get traversal key event\n-        button.setFocusTraversalKeysEnabled(false);\n-\n-        \/\/ Map actions to the arrow keys\n-        button.getActionMap().put(\"Previous\", new SelectPreviousBtn());\n-        button.getActionMap().put(\"Next\", new SelectNextBtn());\n-\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"UP\"), \"Previous\");\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"DOWN\"), \"Next\");\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"LEFT\"), \"Previous\");\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).\n-            put(KeyStroke.getKeyStroke(\"RIGHT\"), \"Next\");\n-    }\n-\n-    \/\/ ********************************\n-    \/\/        UnInstall Listeners\n-    \/\/ ********************************\n-    @Override\n-    protected void uninstallListeners(AbstractButton button) {\n-        super.uninstallListeners(button);\n-\n-        \/\/ Only for JRadioButton\n-        if (!(button instanceof JRadioButton))\n-            return;\n-\n-        \/\/ Unmap actions from the arrow keys\n-        button.getActionMap().remove(\"Previous\");\n-        button.getActionMap().remove(\"Next\");\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n-                    .remove(KeyStroke.getKeyStroke(\"UP\"));\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n-                    .remove(KeyStroke.getKeyStroke(\"DOWN\"));\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n-                    .remove(KeyStroke.getKeyStroke(\"LEFT\"));\n-        button.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)\n-                    .remove(KeyStroke.getKeyStroke(\"RIGHT\"));\n-\n-        if (keyListener != null) {\n-            button.removeKeyListener(keyListener);\n-            keyListener = null;\n-        }\n-    }\n@@ -351,258 +292,0 @@\n-\n-    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ Private functions \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-    \/**\n-     * Creates the key listener to handle tab navigation in JRadioButton Group.\n-     *\/\n-    private KeyListener createKeyListener() {\n-         if (keyListener == null) {\n-            keyListener = new KeyHandler();\n-        }\n-        return keyListener;\n-    }\n-\n-\n-    private boolean isValidRadioButtonObj(Object obj) {\n-        return ((obj instanceof JRadioButton) &&\n-                    ((JRadioButton) obj).isVisible() &&\n-                    ((JRadioButton) obj).isEnabled());\n-    }\n-\n-    \/**\n-     * Select radio button based on \"Previous\" or \"Next\" operation\n-     *\n-     * @param event, the event object.\n-     * @param next, indicate if it's next one\n-     *\/\n-    private void selectRadioButton(ActionEvent event, boolean next) {\n-        \/\/ Get the source of the event.\n-        Object eventSrc = event.getSource();\n-\n-        \/\/ Check whether the source is JRadioButton, it so, whether it is visible\n-        if (!isValidRadioButtonObj(eventSrc))\n-            return;\n-\n-        ButtonGroupInfo btnGroupInfo = new ButtonGroupInfo((JRadioButton)eventSrc);\n-        btnGroupInfo.selectNewButton(next);\n-    }\n-\n-    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ Inner Classes \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-    @SuppressWarnings(\"serial\")\n-    private class SelectPreviousBtn extends AbstractAction {\n-        public SelectPreviousBtn() {\n-            super(\"Previous\");\n-        }\n-\n-        public void actionPerformed(ActionEvent e) {\n-           BasicRadioButtonUI.this.selectRadioButton(e, false);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"serial\")\n-    private class SelectNextBtn extends AbstractAction{\n-        public SelectNextBtn() {\n-            super(\"Next\");\n-        }\n-\n-        public void actionPerformed(ActionEvent e) {\n-            BasicRadioButtonUI.this.selectRadioButton(e, true);\n-        }\n-    }\n-\n-    \/**\n-     * ButtonGroupInfo, used to get related info in button group\n-     * for given radio button\n-     *\/\n-    private class ButtonGroupInfo {\n-\n-        JRadioButton activeBtn = null;\n-\n-        JRadioButton firstBtn = null;\n-        JRadioButton lastBtn = null;\n-\n-        JRadioButton previousBtn = null;\n-        JRadioButton nextBtn = null;\n-\n-        HashSet<JRadioButton> btnsInGroup = null;\n-\n-        boolean srcFound = false;\n-        public ButtonGroupInfo(JRadioButton btn) {\n-            activeBtn = btn;\n-            btnsInGroup = new HashSet<JRadioButton>();\n-        }\n-\n-        \/\/ Check if given object is in the button group\n-        boolean containsInGroup(Object obj){\n-           return btnsInGroup.contains(obj);\n-        }\n-\n-        \/\/ Check if the next object to gain focus belongs\n-        \/\/ to the button group or not\n-        Component getFocusTransferBaseComponent(boolean next){\n-            return firstBtn;\n-        }\n-\n-        boolean getButtonGroupInfo() {\n-            if (activeBtn == null)\n-                return false;\n-\n-            btnsInGroup.clear();\n-\n-            \/\/ Get the button model from the source.\n-            ButtonModel model = activeBtn.getModel();\n-            if (!(model instanceof DefaultButtonModel))\n-                return false;\n-\n-            \/\/ If the button model is DefaultButtonModel, and use it, otherwise return.\n-            DefaultButtonModel bm = (DefaultButtonModel) model;\n-\n-            \/\/ get the ButtonGroup of the button from the button model\n-            ButtonGroup group = bm.getGroup();\n-            if (group == null)\n-                return false;\n-\n-            \/\/ Get all the buttons in the group\n-            Enumeration<AbstractButton> e = group.getElements();\n-            if (e == null)\n-                return false;\n-\n-            while (e.hasMoreElements()) {\n-                AbstractButton curElement = e.nextElement();\n-                if (!isValidRadioButtonObj(curElement))\n-                    continue;\n-\n-                btnsInGroup.add((JRadioButton) curElement);\n-\n-                \/\/ If firstBtn is not set yet, curElement is that first button\n-                if (null == firstBtn)\n-                    firstBtn = (JRadioButton) curElement;\n-\n-                if (activeBtn == curElement)\n-                    srcFound = true;\n-                else if (!srcFound) {\n-                    \/\/ The source has not been yet found and the current element\n-                    \/\/ is the last previousBtn\n-                    previousBtn = (JRadioButton) curElement;\n-                } else if (nextBtn == null) {\n-                    \/\/ The source has been found and the current element\n-                    \/\/ is the next valid button of the list\n-                    nextBtn = (JRadioButton) curElement;\n-                }\n-\n-                \/\/ Set new last \"valid\" JRadioButton of the list\n-                lastBtn = (JRadioButton) curElement;\n-            }\n-\n-            return true;\n-        }\n-\n-        \/**\n-          * Find the new radio button that focus needs to be\n-          * moved to in the group, select the button\n-          *\n-          * @param next, indicate if it's arrow up\/left or down\/right\n-          *\/\n-        void selectNewButton(boolean next) {\n-            if (!getButtonGroupInfo())\n-                return;\n-\n-            if (srcFound) {\n-                JRadioButton newSelectedBtn = null;\n-                if (next) {\n-                    \/\/ Select Next button. Cycle to the first button if the source\n-                    \/\/ button is the last of the group.\n-                    newSelectedBtn = (null == nextBtn) ? firstBtn : nextBtn;\n-                } else {\n-                    \/\/ Select previous button. Cycle to the last button if the source\n-                    \/\/ button is the first button of the group.\n-                    newSelectedBtn = (null == previousBtn) ? lastBtn : previousBtn;\n-                }\n-                if (newSelectedBtn != null &&\n-                    (newSelectedBtn != activeBtn)) {\n-                    ButtonModel btnModel = newSelectedBtn.getModel();\n-                    btnModel.setPressed(true);\n-                    btnModel.setArmed(true);\n-                    newSelectedBtn.requestFocusInWindow();\n-                    newSelectedBtn.setSelected(true);\n-                    btnModel.setPressed(false);\n-                    btnModel.setArmed(false);\n-                }\n-            }\n-        }\n-\n-        \/**\n-          * Find the button group the passed in JRadioButton belongs to, and\n-          * move focus to next component of the last button in the group\n-          * or previous component of first button\n-          *\n-          * @param next, indicate if jump to next component or previous\n-          *\/\n-        void jumpToNextComponent(boolean next) {\n-            if (!getButtonGroupInfo()){\n-                \/\/ In case the button does not belong to any group, it needs\n-                \/\/ to be treated as a component\n-                if (activeBtn != null){\n-                    lastBtn = activeBtn;\n-                    firstBtn = activeBtn;\n-                }\n-                else\n-                    return;\n-            }\n-\n-            \/\/ Update the component we will use as base to transfer\n-            \/\/ focus from\n-            JComponent compTransferFocusFrom = activeBtn;\n-\n-            \/\/ If next component in the parent window is not in\n-            \/\/ the button group, current active button will be\n-            \/\/ base, otherwise, the base will be first or last\n-            \/\/ button in the button group\n-            Component focusBase = getFocusTransferBaseComponent(next);\n-            if (focusBase != null){\n-                if (next) {\n-                    KeyboardFocusManager.\n-                        getCurrentKeyboardFocusManager().focusNextComponent(focusBase);\n-                } else {\n-                    KeyboardFocusManager.\n-                        getCurrentKeyboardFocusManager().focusPreviousComponent(focusBase);\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Radiobutton KeyListener\n-     *\/\n-    private class KeyHandler implements KeyListener {\n-\n-        \/\/ This listener checks if the key event is a focus traversal key event\n-        \/\/ on a radio button, consume the event if so and move the focus\n-        \/\/ to next\/previous component\n-        public void keyPressed(KeyEvent e) {\n-            AWTKeyStroke stroke = AWTKeyStroke.getAWTKeyStrokeForEvent(e);\n-            if (stroke != null && e.getSource() instanceof JRadioButton) {\n-                JRadioButton source = (JRadioButton) e.getSource();\n-                boolean next = isFocusTraversalKey(source,\n-                        KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,\n-                        stroke);\n-                if (next || isFocusTraversalKey(source,\n-                        KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,\n-                        stroke)) {\n-                    e.consume();\n-                    ButtonGroupInfo btnGroupInfo = new ButtonGroupInfo(source);\n-                    btnGroupInfo.jumpToNextComponent(next);\n-                }\n-            }\n-        }\n-\n-        private boolean isFocusTraversalKey(JComponent c, int id,\n-                                            AWTKeyStroke stroke) {\n-            Set<AWTKeyStroke> keys = c.getFocusTraversalKeys(id);\n-            return keys != null && keys.contains(stroke);\n-        }\n-\n-        public void keyReleased(KeyEvent e) {\n-        }\n-\n-        public void keyTyped(KeyEvent e) {\n-        }\n-    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicRadioButtonUI.java","additions":0,"deletions":317,"binary":false,"changes":317,"status":"modified"},{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8249548\n+ * @summary Test focus traversal in button group containing JToggleButton\n+ * and JRadioButton\n+ * @run main TestButtonGroupFocusTraversal\n+ *\/\n+\n+import javax.swing.ButtonGroup;\n+import javax.swing.JFrame;\n+import javax.swing.JRadioButton;\n+import javax.swing.JTextField;\n+import javax.swing.JToggleButton;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+\n+public class TestButtonGroupFocusTraversal {\n+    private static JFrame frame;\n+    private static JTextField textFieldFirst, textFieldLast;\n+    private static JToggleButton toggleButton1, toggleButton2;\n+    private static JRadioButton radioButton1, radioButton2;\n+    private static Robot robot;\n+\n+    private static void blockTillDisplayed(Component comp) {\n+        Point p = null;\n+        while (p == null) {\n+            try {\n+                p = comp.getLocationOnScreen();\n+            } catch (IllegalStateException e) {\n+                try {\n+                    Thread.sleep(500);\n+                } catch (InterruptedException ie) {\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void createUI() throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            public void run() {\n+                textFieldFirst = new JTextField(\"First\");\n+                textFieldLast = new JTextField(\"Last\");\n+                toggleButton1 = new JToggleButton(\"1\");\n+                toggleButton2 = new JToggleButton(\"2\");\n+                radioButton1 = new JRadioButton(\"1\");\n+                radioButton2 = new JRadioButton(\"2\");\n+\n+                ButtonGroup toggleGroup = new ButtonGroup();\n+                toggleGroup.add(toggleButton1);\n+                toggleGroup.add(toggleButton2);\n+\n+                ButtonGroup radioGroup = new ButtonGroup();\n+                radioGroup.add(radioButton1);\n+                radioGroup.add(radioButton2);\n+\n+                toggleButton2.setSelected(true);\n+                radioButton2.setSelected(true);\n+\n+                frame = new JFrame(\"Test\");\n+                frame.setLayout(new FlowLayout());\n+\n+                Container pane = frame.getContentPane();\n+                pane.add(textFieldFirst);\n+                pane.add(toggleButton1);\n+                pane.add(toggleButton2);\n+                pane.add(radioButton1);\n+                pane.add(radioButton2);\n+                pane.add(textFieldLast);\n+\n+                frame.pack();\n+                frame.setAlwaysOnTop(true);\n+                frame.setLocationRelativeTo(null);\n+                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                frame.setVisible(true);\n+            }\n+        });\n+    }\n+\n+    private static void pressKey(int ...keys) {\n+        int num = keys.length;\n+        for (int i=0; i<num; i++)\n+            robot.keyPress(keys[i]);\n+        for (int i=num; i>0; i--)\n+            robot.keyRelease(keys[i-1]);\n+\n+        robot.waitForIdle();\n+        robot.delay(200);\n+    }\n+\n+    private static void checkFocusedComponent (Component component) {\n+        Component focusedComponent = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();\n+        if (!focusedComponent.equals(component)) {\n+            System.out.println(component);\n+            System.out.println(focusedComponent);\n+            throw new RuntimeException(\"Wrong Component Selected\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+\n+        UIManager.LookAndFeelInfo infos[] = UIManager.getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo info : infos) {\n+            UIManager.setLookAndFeel(info.getClassName());\n+            System.out.println(info.getClassName());\n+            try {\n+                createUI();\n+\n+                robot.waitForIdle();\n+                robot.delay(200);\n+\n+                blockTillDisplayed(frame);\n+\n+                SwingUtilities.invokeAndWait(textFieldFirst::requestFocus);\n+\n+                if (!textFieldFirst.equals(KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                        .getFocusOwner())) {\n+                    try {\n+                        Thread.sleep(100);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                    SwingUtilities.invokeAndWait(textFieldFirst::requestFocus);\n+                }\n+\n+                robot.waitForIdle();\n+                robot.delay(200);\n+\n+                pressKey(KeyEvent.VK_TAB);\n+                checkFocusedComponent(toggleButton2);\n+\n+                pressKey(KeyEvent.VK_TAB);\n+                checkFocusedComponent(radioButton2);\n+\n+                pressKey(KeyEvent.VK_TAB);\n+                checkFocusedComponent(textFieldLast);\n+\n+                pressKey(KeyEvent.VK_SHIFT, KeyEvent.VK_TAB);\n+                checkFocusedComponent(radioButton2);\n+\n+                pressKey(KeyEvent.VK_SHIFT, KeyEvent.VK_TAB);\n+                checkFocusedComponent(toggleButton2);\n+\n+                pressKey(KeyEvent.VK_SHIFT, KeyEvent.VK_TAB);\n+                checkFocusedComponent(textFieldFirst);\n+\n+                pressKey(KeyEvent.VK_TAB);\n+                checkFocusedComponent(toggleButton2);\n+\n+                pressKey(KeyEvent.VK_LEFT);\n+                checkFocusedComponent(toggleButton1);\n+\n+                pressKey(KeyEvent.VK_RIGHT);\n+                checkFocusedComponent(toggleButton2);\n+\n+                pressKey(KeyEvent.VK_UP);\n+                checkFocusedComponent(toggleButton1);\n+\n+                pressKey(KeyEvent.VK_DOWN);\n+                checkFocusedComponent(toggleButton2);\n+\n+                pressKey(KeyEvent.VK_TAB);\n+                checkFocusedComponent(radioButton2);\n+\n+                pressKey(KeyEvent.VK_LEFT);\n+                checkFocusedComponent(radioButton1);\n+\n+                pressKey(KeyEvent.VK_RIGHT);\n+                checkFocusedComponent(radioButton2);\n+\n+                pressKey(KeyEvent.VK_UP);\n+                checkFocusedComponent(radioButton1);\n+\n+                pressKey(KeyEvent.VK_DOWN);\n+                checkFocusedComponent(radioButton2);\n+\n+            } finally {\n+                if (frame != null) {\n+                    SwingUtilities.invokeAndWait(frame::dispose);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/ButtonGroup\/TestButtonGroupFocusTraversal.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"}]}