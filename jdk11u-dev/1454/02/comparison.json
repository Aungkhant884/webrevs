{"files":[{"patch":"@@ -30,3 +30,3 @@\n-\n-import static javax.swing.UIManager.*;\n-import static javax.swing.SwingUtilities.*;\n+import javax.swing.UIManager;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UnsupportedLookAndFeelException;\n@@ -37,1 +37,1 @@\n- * @bug 8172269\n+ * @bug 8172269 8244557\n@@ -39,0 +39,1 @@\n+ * @run main TestBackgroundScrollPolicy\n@@ -41,4 +42,1 @@\n-public class TestBackgroundScrollPolicy implements Runnable {\n-    private static final ArrayList<String> LIST = new ArrayList<>();\n-    private static final LookAndFeelInfo[] INFO = getInstalledLookAndFeels();\n-    private static final CountDownLatch LATCH = new CountDownLatch(INFO.length);\n+public class TestBackgroundScrollPolicy {\n@@ -49,4 +47,15 @@\n-        invokeLater(new TestBackgroundScrollPolicy());\n-        LATCH.await();\n-        if (!LIST.isEmpty()) {\n-            throw new RuntimeException(LIST.toString());\n+        ROBOT.setAutoWaitForIdle(true);\n+        ROBOT.setAutoDelay(100);\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing L&F: \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+            try {\n+                SwingUtilities.invokeAndWait(() -> createGUI());\n+                ROBOT.waitForIdle();\n+                ROBOT.delay(1000);\n+                SwingUtilities.invokeAndWait(() -> test(laf));\n+                ROBOT.delay(2000);\n+            } finally {\n+                if (frame != null) SwingUtilities.invokeAndWait(() -> frame.dispose());\n+            }\n+            ROBOT.delay(1000);\n@@ -56,2 +65,9 @@\n-    private static void addOpaqueError(boolean opaque) {\n-        LIST.add(getLookAndFeel().getName() + \" background color wrong for opaque=\" + opaque);\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                 | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -60,13 +76,2 @@\n-    private static boolean updateLookAndFeel() {\n-        int index = (int) LATCH.getCount() - 1;\n-        if (index >= 0) {\n-            try {\n-                LookAndFeelInfo info = INFO[index];\n-                System.err.println(\"L&F: \" + info.getName());\n-                setLookAndFeel(info.getClassName());\n-                return true;\n-            } catch (Exception exception) {\n-                exception.printStackTrace();\n-            }\n-        }\n-        return false;\n+    private static void addOpaqueError(UIManager.LookAndFeelInfo laf, boolean opaque) {\n+        throw new RuntimeException(laf.getClassName() + \" background color wrong for opaque=\" + opaque);\n@@ -75,2 +80,2 @@\n-    private JFrame frame;\n-    private JTabbedPane pane;\n+    private static JFrame frame;\n+    private static JTabbedPane pane;\n@@ -78,23 +83,18 @@\n-    public void run() {\n-        if (this.frame == null) {\n-            if (!updateLookAndFeel()) {\n-                return;\n-            }\n-            this.pane = new JTabbedPane();\n-            this.pane.setOpaque(false);\n-            this.pane.setBackground(Color.RED);\n-            for (int i = 0; i < 3; i++) {\n-                this.pane.addTab(\"Tab \" + i, new JLabel(\"Content area \" + i));\n-            }\n-            this.pane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n-            this.frame = new JFrame(getClass().getSimpleName());\n-            this.frame.getContentPane().setBackground(Color.BLUE);\n-            this.frame.add(this.pane);\n-            this.frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n-            this.frame.setSize(400, 200);\n-            this.frame.setLocationRelativeTo(null);\n-            this.frame.setVisible(true);\n-        } else {\n-            Point point = new Point(this.pane.getWidth() - 2, 2);\n-            convertPointToScreen(point, this.pane);\n-            Color actual = ROBOT.getPixelColor(point.x, point.y);\n+    public static void createGUI() {\n+        pane = new JTabbedPane();\n+        pane.setOpaque(true);\n+        pane.setBackground(Color.RED);\n+        for (int i = 0; i < 3; i++) {\n+            pane.addTab(\"Tab \" + i, new JLabel(\"Content area \" + i));\n+        }\n+        pane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);\n+        pane.repaint();\n+        frame = new JFrame();\n+        frame.getContentPane().setBackground(Color.BLUE);\n+        frame.add(pane);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setSize(400, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.toFront();\n+    }\n@@ -102,4 +102,4 @@\n-            boolean opaque = this.pane.isOpaque();\n-            Color expected = opaque\n-                    ? this.pane.getBackground()\n-                    : this.frame.getContentPane().getBackground();\n+    public static void test(UIManager.LookAndFeelInfo laf) {\n+        Point point = new Point(pane.getWidth() - 2, 2);\n+        SwingUtilities.convertPointToScreen(point, pane);\n+        Color actual = ROBOT.getPixelColor(point.x, point.y);\n@@ -107,13 +107,4 @@\n-            System.out.println(\"expected \" + expected + \" actual \" + actual);\n-            if (!expected.equals(actual)){\n-                addOpaqueError(opaque);\n-            }\n-            if (!opaque) {\n-                this.pane.setOpaque(true);\n-                this.pane.repaint();\n-            } else {\n-                this.frame.dispose();\n-                this.frame = null;\n-                this.pane = null;\n-                LATCH.countDown();\n-            }\n+        boolean opaque = pane.isOpaque();\n+        Color expected = opaque\n+                ? pane.getBackground()\n+                : frame.getContentPane().getBackground();\n@@ -121,0 +112,3 @@\n+        if (!expected.equals(actual)){\n+            System.out.println(\"expected \" + expected + \" actual \" + actual);\n+            addOpaqueError(laf, opaque);\n@@ -122,16 +116,1 @@\n-        ROBOT.delay(2000);\n-        SecondaryLoop secondaryLoop =\n-                Toolkit.getDefaultToolkit().getSystemEventQueue()\n-                        .createSecondaryLoop();\n-        new Thread() {\n-            @Override\n-            public void run() {\n-                try {\n-                    Thread.sleep(200);\n-                } catch (InterruptedException e) {\n-                }\n-                secondaryLoop.exit();\n-                invokeLater(TestBackgroundScrollPolicy.this);\n-            }\n-        }.start();\n-        secondaryLoop.enter();\n+\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/TestBackgroundScrollPolicy.java","additions":64,"deletions":85,"binary":false,"changes":149,"status":"modified"}]}