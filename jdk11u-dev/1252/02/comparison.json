{"files":[{"patch":"@@ -1,2 +1,2 @@\n-\/**\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+\/*\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -69,0 +70,1 @@\n+import org.testng.annotations.BeforeMethod;\n@@ -84,4 +86,5 @@\n-    private final Path mods;\n-    private final Path srcDir;\n-    private final Path lib;\n-    private final ModuleInfoMaker builder;\n+    static final AtomicInteger counter = new AtomicInteger(0);\n+\n+    private Path mods;\n+    private Path lib;\n+    private ModuleInfoMaker builder;\n@@ -89,1 +92,3 @@\n-    HashesTest(Path dest) throws IOException {\n+    @BeforeMethod\n+    public void setTestPath() throws IOException {\n+        Path dest = Path.of(\"test\" + counter.addAndGet(1));\n@@ -94,1 +99,0 @@\n-        this.srcDir = dest.resolve(\"src\");\n@@ -96,1 +100,1 @@\n-        this.builder = new ModuleInfoMaker(srcDir);\n+        this.builder = new ModuleInfoMaker(dest.resolve(\"src\"));\n@@ -103,4 +107,1 @@\n-    public static void test() throws IOException {\n-        Path dest = Paths.get(\"test\");\n-        HashesTest ht = new HashesTest(dest);\n-\n+    public void test() throws IOException {\n@@ -108,3 +109,3 @@\n-        ht.makeModule(\"m2\");\n-        ht.makeModule(\"m3\");\n-        ht.makeModule(\"m1\", \"m2\", \"m3\");\n+        makeModule(\"m2\");\n+        makeModule(\"m3\");\n+        makeModule(\"m1\", \"m2\", \"m3\");\n@@ -112,2 +113,2 @@\n-        ht.makeModule(\"org.bar\", TRANSITIVE, \"m1\");\n-        ht.makeModule(\"org.foo\", TRANSITIVE, \"org.bar\");\n+        makeModule(\"org.bar\", TRANSITIVE, \"m1\");\n+        makeModule(\"org.foo\", TRANSITIVE, \"org.bar\");\n@@ -116,2 +117,2 @@\n-        ht.makeJmod(\"m2\");\n-        ht.makeJmod(\"m3\");\n+        makeJmod(\"m2\");\n+        makeJmod(\"m3\");\n@@ -120,1 +121,1 @@\n-        ht.jmodHashModules(\"m1\", \".*\");\n+        jmodHashModules(\"m1\", \".*\");\n@@ -123,3 +124,3 @@\n-        assertTrue(ht.hashes(\"m1\") == null);\n-        assertTrue(ht.hashes(\"m2\") == null);\n-        assertTrue(ht.hashes(\"m3\") == null);\n+        assertNull(hashes(\"m1\"));\n+        assertNull(hashes(\"m2\"));\n+        assertNull(hashes(\"m3\"));\n@@ -128,2 +129,2 @@\n-        ht.jmodHashModules(\"m2\",  \"m1\");\n-        ht.checkHashes(\"m2\", \"m1\");\n+        jmodHashModules(\"m2\",  \"m1\");\n+        checkHashes(\"m2\", Set.of(\"m1\"));\n@@ -132,2 +133,2 @@\n-        ht.jmodHashModules(\"m2\",  \".*\");\n-        ht.checkHashes(\"m2\", \"m1\");\n+        jmodHashModules(\"m2\",  \".*\");\n+        checkHashes(\"m2\", Set.of(\"m1\"));\n@@ -136,1 +137,1 @@\n-        ht.makeJmod(\"m2\");\n+        makeJmod(\"m2\");\n@@ -138,1 +139,1 @@\n-        runJmod(List.of(\"hash\", \"--module-path\", ht.lib.toString(),\n+        runJmod(List.of(\"hash\", \"--module-path\", lib.toString(),\n@@ -140,2 +141,2 @@\n-        ht.checkHashes(\"m2\", \"m1\");\n-        ht.checkHashes(\"m3\", \"m1\");\n+        checkHashes(\"m2\", Set.of(\"m1\"));\n+        checkHashes(\"m3\", Set.of(\"m1\"));\n@@ -144,2 +145,2 @@\n-        ht.makeJmod(\"org.bar\");\n-        ht.makeJmod(\"org.foo\");\n+        makeJmod(\"org.bar\");\n+        makeJmod(\"org.foo\");\n@@ -147,2 +148,2 @@\n-        ht.jmodHashModules(\"org.bar\", \"org.*\");\n-        ht.checkHashes(\"org.bar\", \"org.foo\");\n+        jmodHashModules(\"org.bar\", \"org.*\");\n+        checkHashes(\"org.bar\", Set.of(\"org.foo\"));\n@@ -150,2 +151,2 @@\n-        ht.jmodHashModules( \"m3\", \".*\");\n-        ht.checkHashes(\"m3\", \"org.foo\", \"org.bar\", \"m1\");\n+        jmodHashModules( \"m3\", \".*\");\n+        checkHashes(\"m3\", Set.of(\"org.foo\", \"org.bar\", \"m1\"));\n@@ -155,4 +156,1 @@\n-    public static void multiBaseModules() throws IOException {\n-        Path dest = Paths.get(\"test2\");\n-        HashesTest ht = new HashesTest(dest);\n-\n+    public void multiBaseModules() throws IOException {\n@@ -170,3 +168,3 @@\n-        ht.makeModule(\"z1\");\n-        ht.makeModule(\"z2\", \"z1\");\n-        ht.makeModule(\"z3\", \"z1\", \"z2\");\n+        makeModule(\"z1\");\n+        makeModule(\"z2\", \"z1\");\n+        makeModule(\"z3\", \"z1\", \"z2\");\n@@ -174,2 +172,2 @@\n-        ht.makeModule(\"y1\");\n-        ht.makeModule(\"y2\", \"y1\", \"z2\", \"z3\");\n+        makeModule(\"y1\");\n+        makeModule(\"y2\", \"y1\", \"z2\", \"z3\");\n@@ -181,1 +179,1 @@\n-        Stream.concat(ys.stream(), zs.stream()).forEach(ht::makeJmod);\n+        Stream.concat(ys.stream(), zs.stream()).forEach(this::makeJmod);\n@@ -184,1 +182,1 @@\n-        runJmod(List.of(\"hash\", \"--module-path\", ht.lib.toString(),\n+        runJmod(List.of(\"hash\", \"--module-path\", lib.toString(),\n@@ -190,2 +188,2 @@\n-        ht.checkHashes(\"y1\", \"y2\");\n-        ht.checkHashes(\"z1\", \"z2\", \"z3\", \"y2\");\n+        checkHashes(\"y1\", Set.of(\"y2\"));\n+        checkHashes(\"z1\", Set.of(\"z2\", \"z3\", \"y2\"));\n@@ -194,1 +192,1 @@\n-              .forEach(mn -> assertTrue(ht.hashes(mn) == null));\n+              .forEach(mn -> assertNull(hashes(mn)));\n@@ -198,4 +196,1 @@\n-    public static void mixJmodAndJarFile() throws IOException {\n-        Path dest = Paths.get(\"test3\");\n-        HashesTest ht = new HashesTest(dest);\n-\n+    public void mixJmodAndJarFile() throws IOException {\n@@ -213,5 +208,5 @@\n-        ht.makeModule(\"j1\");\n-        ht.makeModule(\"j2\");\n-        ht.makeModule(\"m1\", \"j1\");\n-        ht.makeModule(\"m2\", \"m1\");\n-        ht.makeModule(\"m3\", \"m1\", \"m2\");\n+        makeModule(\"j1\");\n+        makeModule(\"j2\");\n+        makeModule(\"m1\", \"j1\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\", \"m1\", \"m2\");\n@@ -219,1 +214,1 @@\n-        ht.makeModule(\"j3\", \"j2\", \"m2\", \"m3\");\n+        makeModule(\"j3\", \"j2\", \"m2\", \"m3\");\n@@ -225,2 +220,2 @@\n-        jars.forEach(ht::makeJar);\n-        jmods.forEach(ht::makeJmod);\n+        jars.forEach(this::makeJar);\n+        jmods.forEach(this::makeJmod);\n@@ -229,1 +224,1 @@\n-        runJmod(List.of(\"hash\", \"--module-path\", ht.lib.toString(),\n+        runJmod(List.of(\"hash\", \"--module-path\", lib.toString(),\n@@ -235,2 +230,2 @@\n-        ht.checkHashes(\"j2\", \"j3\");\n-        ht.checkHashes(\"j1\", \"m1\", \"m2\", \"m3\", \"j3\");\n+        checkHashes(\"j2\", Set.of(\"j3\"));\n+        checkHashes(\"j1\", Set.of(\"m1\", \"m2\", \"m3\", \"j3\"));\n@@ -239,1 +234,1 @@\n-              .forEach(mn -> assertTrue(ht.hashes(mn) == null));\n+              .forEach(mn -> assertNull(hashes(mn)));\n@@ -242,1 +237,0 @@\n-\n@@ -244,1 +238,1 @@\n-    public static void testImageJmods() throws IOException {\n+    public void testImageJmods() throws IOException {\n@@ -250,5 +244,3 @@\n-        Path dest = Paths.get(\"test5\");\n-        HashesTest ht = new HashesTest(dest);\n-        ht.makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n-        ht.makeModule(\"m2\", \"m1\");\n-        ht.makeModule(\"m3\", \"java.compiler\");\n+        makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\", \"java.compiler\");\n@@ -256,2 +248,2 @@\n-        ht.makeJmod(\"m1\");\n-        ht.makeJmod(\"m2\");\n+        makeJmod(\"m1\");\n+        makeJmod(\"m2\");\n@@ -261,1 +253,1 @@\n-                        mpath.toString() + File.pathSeparator + ht.lib.toString(),\n+                        mpath.toString() + File.pathSeparator + lib.toString(),\n@@ -264,1 +256,1 @@\n-        validateImageJmodsTest(ht, mpath);\n+        validateImageJmodsTest(mpath);\n@@ -268,1 +260,1 @@\n-    public static void testImageJmods1() throws IOException {\n+    public void testImageJmods1() throws IOException {\n@@ -274,5 +266,3 @@\n-        Path dest = Paths.get(\"test6\");\n-        HashesTest ht = new HashesTest(dest);\n-        ht.makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n-        ht.makeModule(\"m2\", \"m1\");\n-        ht.makeModule(\"m3\", \"java.compiler\");\n+        makeModule(\"m1\", \"jdk.compiler\", \"jdk.attach\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\", \"java.compiler\");\n@@ -280,2 +270,2 @@\n-        ht.makeJar(\"m2\");\n-        ht.makeJar(\"m1\",\n+        makeJar(\"m2\");\n+        makeJar(\"m1\",\n@@ -283,1 +273,1 @@\n-                    mpath.toString() + File.pathSeparator + ht.lib.toString(),\n+                    mpath.toString() + File.pathSeparator + lib.toString(),\n@@ -285,1 +275,1 @@\n-        validateImageJmodsTest(ht, mpath);\n+        validateImageJmodsTest(mpath);\n@@ -289,6 +279,5 @@\n-    public static void testReproducibibleHash() throws Exception {\n-        HashesTest ht = new HashesTest(Path.of(\"repro\"));\n-        ht.makeModule(\"m4\");\n-        ht.makeModule(\"m3\", \"m4\");\n-        ht.makeModule(\"m2\");\n-        ht.makeModule(\"m1\", \"m2\", \"m3\");\n+    private void testReproducibibleHash() throws Exception {\n+        makeModule(\"m4\");\n+        makeModule(\"m3\", \"m4\");\n+        makeModule(\"m2\");\n+        makeModule(\"m1\", \"m2\", \"m3\");\n@@ -297,2 +286,2 @@\n-        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(ht::makeJmod);\n-        Map<String, ModuleHashes> hashes1 = ht.runJmodHash();\n+        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(this::makeJmod);\n+        Map<String, ModuleHashes> hashes1 = runJmodHash();\n@@ -304,2 +293,2 @@\n-        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(ht::makeJmod);\n-        Map<String, ModuleHashes> hashes2 = ht.runJmodHash();\n+        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(this::makeJmod);\n+        Map<String, ModuleHashes> hashes2 = runJmodHash();\n@@ -311,1 +300,1 @@\n-    private static void validateImageJmodsTest(HashesTest ht, Path mpath)\n+    private void validateImageJmodsTest(Path mpath)\n@@ -315,2 +304,2 @@\n-        ht.checkHashes(\"m1\", \"m2\");\n-        assertTrue(ht.hashes(\"m2\") == null);\n+        checkHashes(\"m1\", Set.of(\"m2\"));\n+        assertNull(hashes(\"m2\"));\n@@ -320,2 +309,2 @@\n-        assertTrue(ht.hashes(finder,\"jdk.compiler\") == null);\n-        assertTrue(ht.hashes(finder,\"jdk.attach\") == null);\n+        assertNull(hashes(finder, \"jdk.compiler\"));\n+        assertNull(hashes(finder, \"jdk.attach\"));\n@@ -324,1 +313,1 @@\n-    private void checkHashes(String mn, String... hashModules) throws IOException {\n+    private void checkHashes(String mn, Set<String> hashModules) {\n@@ -326,1 +315,1 @@\n-        assertTrue(hashes.names().equals(Set.of(hashModules)));\n+        assertEquals(hashModules, hashes.names());\n@@ -337,2 +326,2 @@\n-            ModuleReader reader = mref.open();\n-            try (InputStream in = reader.open(\"module-info.class\").get()) {\n+            try (ModuleReader reader = mref.open();\n+                 InputStream in = reader.open(\"module-info.class\").get()) {\n@@ -348,2 +337,0 @@\n-            } finally {\n-                reader.close();\n@@ -365,1 +352,1 @@\n-        Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {\n+        Files.walkFileTree(dir, new SimpleFileVisitor<>() {\n","filename":"test\/jdk\/tools\/jmod\/hashes\/HashesTest.java","additions":98,"deletions":111,"binary":false,"changes":209,"status":"modified"}]}