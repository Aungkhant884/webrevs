{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,2 @@\n-    static void init(String connectSpec, boolean openNow, int flags) {\n-        connection = new VMConnection(connectSpec, flags);\n+    static void init(String connectSpec, boolean openNow, int flags, String extraOptions) {\n+        connection = new VMConnection(connectSpec, flags, extraOptions);\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/Env.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1050,2 +1050,2 @@\n-         * arg1       arg2\n-         * ----       ----\n+         *                     arg1       arg2\n+         *                     ----       ----\n@@ -1088,1 +1088,0 @@\n-            connectSpec += \"options=\" + javaArgs + \",\";\n@@ -1092,4 +1091,1 @@\n-            if (! connectSpec.endsWith(\",\")) {\n-                connectSpec += \",\"; \/\/ (Bug ID 4285874)\n-            }\n-            Env.init(connectSpec, launchImmediately, traceFlags);\n+            Env.init(connectSpec, launchImmediately, traceFlags, javaArgs);\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/TTY.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,2 @@\n-    private Map <String, com.sun.jdi.connect.Connector.Argument> parseConnectorArgs(Connector connector, String argString) {\n+    private Map <String, com.sun.jdi.connect.Connector.Argument>\n+            parseConnectorArgs(Connector connector, String argString, String extraOptions) {\n@@ -124,0 +125,5 @@\n+                if (extraOptions != null) {\n+                    sb.append(extraOptions).append(\" \");\n+                    \/\/ set extraOptions to null to avoid appending it again\n+                    extraOptions = null;\n+                }\n@@ -125,0 +131,1 @@\n+                    boolean wasEnclosed = false;\n@@ -126,0 +133,1 @@\n+                        wasEnclosed = true;\n@@ -128,0 +136,3 @@\n+                    if (wasEnclosed && hasWhitespace(s)) {\n+                        s = \"\\\"\" + s + \"\\\"\";\n+                    }\n@@ -153,0 +164,7 @@\n+        if (extraOptions != null) {\n+            \/\/ there was no \"options\" specified in argString\n+            Connector.Argument argument = arguments.get(\"options\");\n+            if (argument != null) {\n+                argument.setValue(extraOptions);\n+            }\n+        }\n@@ -156,0 +174,10 @@\n+    private static boolean hasWhitespace(String string) {\n+        int length = string.length();\n+        for (int i = 0; i < length; i++) {\n+            if (Character.isWhitespace(string.charAt(i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -302,1 +330,1 @@\n-    VMConnection(String connectSpec, int traceFlags) {\n+    VMConnection(String connectSpec, int traceFlags, String extraOptions) {\n@@ -320,1 +348,1 @@\n-        connectorArgs = parseConnectorArgs(connector, argString);\n+        connectorArgs = parseConnectorArgs(connector, argString, extraOptions);\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/VMConnection.java","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"}]}