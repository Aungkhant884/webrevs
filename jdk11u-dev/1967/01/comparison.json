{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,2 +60,2 @@\n-    static void init(String connectSpec, boolean openNow, int flags) {\n-        connection = new VMConnection(connectSpec, flags);\n+    static void init(String connectSpec, boolean openNow, int flags, String extraOptions) {\n+        connection = new VMConnection(connectSpec, flags, extraOptions);\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/Env.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1050,2 +1050,2 @@\n-         * arg1       arg2\n-         * ----       ----\n+         *                     arg1       arg2\n+         *                     ----       ----\n@@ -1088,1 +1088,0 @@\n-            connectSpec += \"options=\" + javaArgs + \",\";\n@@ -1092,4 +1091,1 @@\n-            if (! connectSpec.endsWith(\",\")) {\n-                connectSpec += \",\"; \/\/ (Bug ID 4285874)\n-            }\n-            Env.init(connectSpec, launchImmediately, traceFlags);\n+            Env.init(connectSpec, launchImmediately, traceFlags, javaArgs);\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/TTY.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,2 @@\n-    private Map <String, com.sun.jdi.connect.Connector.Argument> parseConnectorArgs(Connector connector, String argString) {\n+    private Map <String, com.sun.jdi.connect.Connector.Argument>\n+            parseConnectorArgs(Connector connector, String argString, String extraOptions) {\n@@ -124,0 +125,5 @@\n+                if (extraOptions != null) {\n+                    sb.append(extraOptions).append(\" \");\n+                    \/\/ set extraOptions to null to avoid appending it again\n+                    extraOptions = null;\n+                }\n@@ -125,0 +131,1 @@\n+                    boolean wasEnclosed = false;\n@@ -126,0 +133,1 @@\n+                        wasEnclosed = true;\n@@ -128,0 +136,3 @@\n+                    if (wasEnclosed && hasWhitespace(s)) {\n+                        s = \"\\\"\" + s + \"\\\"\";\n+                    }\n@@ -153,0 +164,7 @@\n+        if (extraOptions != null) {\n+            \/\/ there was no \"options\" specified in argString\n+            Connector.Argument argument = arguments.get(\"options\");\n+            if (argument != null) {\n+                argument.setValue(extraOptions);\n+            }\n+        }\n@@ -156,0 +174,10 @@\n+    private static boolean hasWhitespace(String string) {\n+        int length = string.length();\n+        for (int i = 0; i < length; i++) {\n+            if (Character.isWhitespace(string.charAt(i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -302,1 +330,1 @@\n-    VMConnection(String connectSpec, int traceFlags) {\n+    VMConnection(String connectSpec, int traceFlags, String extraOptions) {\n@@ -320,1 +348,1 @@\n-        connectorArgs = parseConnectorArgs(connector, argString);\n+        connectorArgs = parseConnectorArgs(connector, argString, extraOptions);\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/tools\/example\/debug\/tty\/VMConnection.java","additions":32,"deletions":4,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8234808\n+ *\n+ * @library \/test\/lib\n+ * @run main\/othervm JdbOptions\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import lib.jdb.Jdb;\n+import lib.jdb.JdbCommand;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+class JbdOptionsTarg {\n+    static final String OK_MSG = \"JbdOptionsTarg: OK\";\n+\n+    static String argString(String s) {\n+        return \"arg >\" + s + \"<\";\n+    }\n+\n+    static String propString(String name, String value) {\n+        return \"prop[\" + name + \"] = >\" + value + \"<\";\n+    }\n+\n+    public static void main(String[] args) {\n+        System.out.println(OK_MSG);\n+        \/\/ print all args\n+        List<String> vmArgs = ManagementFactory.getRuntimeMXBean().getInputArguments();\n+        for (String s: vmArgs) {\n+            System.out.println(argString(s));\n+        }\n+        \/\/ print requested sys.props\n+        for (String p: args) {\n+            System.out.println(propString(p, System.getProperty(p)));\n+        }\n+    }\n+}\n+\n+public class JdbOptions {\n+    private static final String targ = JbdOptionsTarg.class.getName();\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ the simplest case\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=-client -XX:+PrintVMOptions,main=\" + targ)\n+            .expectedArg(\"-XX:+PrintVMOptions\");\n+\n+        \/\/ pass property through 'options'\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options='-Dboo=foo',main=\" + targ + \" boo\")\n+            .expectedProp(\"boo\", \"foo\");\n+\n+        \/\/ property with spaces\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=\\\"-Dboo=foo 2\\\",main=\" + targ + \" boo\")\n+            .expectedProp(\"boo\", \"foo 2\");\n+\n+        \/\/ property with spaces (with single quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options='-Dboo=foo 2',main=\" + targ + \" boo\")\n+                .expectedProp(\"boo\", \"foo 2\");\n+\n+        \/\/ properties with spaces (with single quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=-Dboo=foo '-Dboo2=foo 2',main=\" + targ + \" boo boo2\")\n+                .expectedProp(\"boo\", \"foo\")\n+                .expectedProp(\"boo2\", \"foo 2\");\n+\n+        \/\/ 'options' contains commas - values are quoted (double quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=\\\"-client\\\" \\\"-XX:+PrintVMOptions\\\"\"\n+                + \" \\\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\\\" \\\"-XX:FlightRecorderOptions=repository=jfrrep\\\"\"\n+                + \",main=\" + targ)\n+            .expectedArg(\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\")\n+            .expectedArg(\"-XX:FlightRecorderOptions=repository=jfrrep\");\n+\n+        \/\/ 'options' contains commas - values are quoted (single quotes)\n+        test(\"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options='-client' '-XX:+PrintVMOptions'\"\n+                        + \" '-XX:StartFlightRecording=dumponexit=true,maxsize=500M' '-XX:FlightRecorderOptions=repository=jfrrep'\"\n+                        + \",main=\" + targ)\n+            .expectedArg(\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\")\n+            .expectedArg(\"-XX:FlightRecorderOptions=repository=jfrrep\");\n+\n+        \/\/ java options are specified in 2 ways, with and without spaces\n+        \/\/ options are quoted by using single and double quotes.\n+        test(\"-Dprop1=val1\",\n+                \"-Dprop2=val 2\",\n+                \"-connect\",\n+                \"com.sun.jdi.CommandLineLaunch:vmexec=java,options=-Dprop3=val3 '-Dprop4=val 4'\"\n+                        + \" \\\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\\\"\"\n+                        + \" '-XX:FlightRecorderOptions=repository=jfrrep'\"\n+                        + \",main=\" + targ + \" prop1 prop2 prop3 prop4\")\n+                .expectedProp(\"prop1\", \"val1\")\n+                .expectedProp(\"prop2\", \"val 2\")\n+                .expectedProp(\"prop3\", \"val3\")\n+                .expectedProp(\"prop4\", \"val 4\")\n+                .expectedArg(\"-XX:StartFlightRecording=dumponexit=true,maxsize=500M\")\n+                .expectedArg(\"-XX:FlightRecorderOptions=repository=jfrrep\");\n+\n+    }\n+\n+    private static class TestResult {\n+        OutputAnalyzer out;\n+        TestResult(OutputAnalyzer output) {\n+            out = output;\n+        }\n+        TestResult expectedArg(String s) {\n+            out.shouldContain(JbdOptionsTarg.argString(s));\n+            return this;\n+        }\n+        TestResult expectedProp(String name, String value) {\n+            out.shouldContain(JbdOptionsTarg.propString(name, value));\n+            return this;\n+        }\n+    }\n+\n+    private static TestResult test(String... args) throws Exception {\n+        System.out.println();\n+        System.out.println(\"...testcase...\");\n+        if (Platform.isWindows()) {\n+            \/\/ on Windows we need to escape quotes\n+            args = Arrays.stream(args)\n+                    .map(s -> s.replace(\"\\\"\", \"\\\\\\\"\"))\n+                    .toArray(String[]::new);\n+        }\n+        try (Jdb jdb = new Jdb(args)) {\n+            jdb.waitForSimplePrompt(1024, true); \/\/ 1024 lines should be enough\n+            jdb.command(JdbCommand.run().allowExit());\n+            OutputAnalyzer out = new OutputAnalyzer(jdb.getJdbOutput());\n+            out.shouldContain(JbdOptionsTarg.OK_MSG);\n+            return new TestResult(out);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jdi\/JdbOptions.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}