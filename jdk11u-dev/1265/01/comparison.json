{"files":[{"patch":"@@ -54,1 +54,0 @@\n-import java.util.HexFormat;\n@@ -153,1 +152,8 @@\n-    record bytes(byte[] bytes) {\n+    private static class Bytes {\n+        private final byte[] bytes;\n+        public Bytes(byte[] bytes) {\n+            this.bytes = bytes;\n+        }\n+        public byte[] getBytes() {\n+            return bytes;\n+        }\n@@ -157,2 +163,5 @@\n-            if (o instanceof bytes other) {\n-                return Arrays.equals(bytes(), other.bytes());\n+            if (o instanceof byte[]) {\n+                return Arrays.equals(bytes, (byte[]) o);\n+            }\n+            if (o instanceof Bytes) {\n+                return Arrays.equals(bytes, ((Bytes) o).getBytes());\n@@ -163,1 +172,1 @@\n-        public int hashCode() { return Arrays.hashCode(bytes()); }\n+        public int hashCode() { return Arrays.hashCode(bytes); }\n@@ -165,3 +174,5 @@\n-            return \"0x\" + HexFormat.of()\n-                    .withUpperCase()\n-                    .formatHex(bytes());\n+            StringBuilder builder = new StringBuilder(\"0x\");\n+            for (byte aByte : bytes) {\n+                builder.append(String.format(\"%X\", aByte).toUpperCase());\n+            }\n+            return builder.toString();\n@@ -171,2 +182,2 @@\n-    static List<bytes> ofBytes(List<byte[]> bytes) {\n-        return bytes.stream().map(bytes::new).toList();\n+    static List<Bytes> ofBytes(List<byte[]> bytes) {\n+        return bytes.stream().map(WebSocketProxyTest.Bytes::new).collect(Collectors.toList());\n@@ -179,1 +190,1 @@\n-        return \"%s and %s %s\".formatted(actual, expected, message);\n+        return String.format(\"%s and %s %s\", actual, expected, message);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WebSocketProxyTest.java","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import java.util.HexFormat;\n@@ -437,1 +436,8 @@\n-    record bytes(byte[] bytes) {\n+    private static class Bytes {\n+        private final byte[] bytes;\n+        public Bytes(byte[] bytes) {\n+            this.bytes = bytes;\n+        }\n+        public byte[] getBytes() {\n+            return bytes;\n+        }\n@@ -441,2 +447,5 @@\n-            if (o instanceof bytes other) {\n-                return Arrays.equals(bytes(), other.bytes());\n+            if (o instanceof byte[]) {\n+                return Arrays.equals(bytes, (byte[]) o);\n+            }\n+            if (o instanceof Bytes) {\n+                return Arrays.equals(bytes, ((Bytes) o).getBytes());\n@@ -447,1 +456,1 @@\n-        public int hashCode() { return Arrays.hashCode(bytes()); }\n+        public int hashCode() { return Arrays.hashCode(bytes); }\n@@ -449,3 +458,5 @@\n-            return \"0x\" + HexFormat.of()\n-                    .withUpperCase()\n-                    .formatHex(bytes());\n+            StringBuilder builder = new StringBuilder(\"0x\");\n+            for (byte aByte : bytes) {\n+                builder.append(String.format(\"%X\", aByte).toUpperCase());\n+            }\n+            return builder.toString();\n@@ -455,2 +466,2 @@\n-    static List<bytes> ofBytes(List<byte[]> bytes) {\n-        return bytes.stream().map(bytes::new).toList();\n+    static List<Bytes> ofBytes(List<byte[]> bytes) {\n+        return bytes.stream().map(WebSocketTest.Bytes::new).collect(Collectors.toList());\n@@ -463,1 +474,1 @@\n-        return \"%s and %s %s\".formatted(actual, expected, message);\n+        return String.format(\"%s and %s %s\", actual, expected, message);\n","filename":"test\/jdk\/java\/net\/httpclient\/websocket\/WebSocketTest.java","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"}]}