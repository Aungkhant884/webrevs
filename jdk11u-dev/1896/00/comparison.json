{"files":[{"patch":"@@ -41,1 +41,1 @@\n-  char buf[MAXPATHLEN+1];\n+  stringStream ss;\n@@ -44,3 +44,1 @@\n-      int buflen;\n-      strncpy(buf, _mount_point, MAXPATHLEN);\n-      buf[MAXPATHLEN-1] = '\\0';\n+      ss.print_raw(_mount_point);\n@@ -48,6 +46,1 @@\n-        buflen = strlen(buf);\n-        if ((buflen + strlen(cgroup_path)) > (MAXPATHLEN-1)) {\n-          return;\n-        }\n-        strncat(buf, cgroup_path, MAXPATHLEN-buflen);\n-        buf[MAXPATHLEN-1] = '\\0';\n+        ss.print_raw(cgroup_path);\n@@ -55,1 +48,1 @@\n-      _path = os::strdup(buf);\n+      _path = os::strdup(ss.base());\n@@ -58,3 +51,2 @@\n-        strncpy(buf, _mount_point, MAXPATHLEN);\n-        buf[MAXPATHLEN-1] = '\\0';\n-        _path = os::strdup(buf);\n+        ss.print_raw(_mount_point);\n+        _path = os::strdup(ss.base());\n@@ -65,10 +57,4 @@\n-            int buflen;\n-            strncpy(buf, _mount_point, MAXPATHLEN);\n-            buf[MAXPATHLEN-1] = '\\0';\n-            buflen = strlen(buf);\n-            if ((buflen + strlen(cgroup_path) - strlen(_root)) > (MAXPATHLEN-1)) {\n-              return;\n-            }\n-            strncat(buf, cgroup_path + strlen(_root), MAXPATHLEN-buflen);\n-            buf[MAXPATHLEN-1] = '\\0';\n-            _path = os::strdup(buf);\n+            ss.print_raw(_mount_point);\n+            const char* cg_path_sub = cgroup_path + strlen(_root);\n+            ss.print_raw(cg_path_sub);\n+            _path = os::strdup(ss.base());\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":10,"deletions":24,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -237,7 +237,4 @@\n-  char buf[MAXPATHLEN+1];\n-  int buflen;\n-  strncpy(buf, mount_path, MAXPATHLEN);\n-  buf[MAXPATHLEN] = '\\0';\n-  buflen = strlen(buf);\n-  if ((buflen + strlen(cgroup_path)) > MAXPATHLEN) {\n-    return NULL;\n+  stringStream ss;\n+  ss.print_raw(mount_path);\n+  if (strcmp(cgroup_path, \"\/\") != 0) {\n+    ss.print_raw(cgroup_path);\n@@ -245,3 +242,1 @@\n-  strncat(buf, cgroup_path, MAXPATHLEN-buflen);\n-  buf[MAXPATHLEN] = '\\0';\n-  return os::strdup(buf);\n+  return os::strdup(ss.base());\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#ifdef LINUX\n+\n+#include \"cgroupV1Subsystem_linux.hpp\"\n+#include \"cgroupV2Subsystem_linux.hpp\"\n+#include \"unittest.hpp\"\n+\n+typedef struct {\n+  const char* mount_path;\n+  const char* root_path;\n+  const char* cgroup_path;\n+  const char* expected_path;\n+} TestCase;\n+\n+TEST(os_linux_cgroup, set_cgroupv1_subsystem_path) {\n+  TestCase host = {\n+    \"\/sys\/fs\/cgroup\/memory\",                                             \/\/ mount_path\n+    \"\/\",                                                                 \/\/ root_path\n+    \"\/user.slice\/user-1000.slice\/user@1000.service\",                     \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/memory\/user.slice\/user-1000.slice\/user@1000.service\" \/\/ expected_path\n+  };\n+  TestCase container_engine = {\n+    \"\/sys\/fs\/cgroup\/mem\",                            \/\/ mount_path\n+    \"\/user.slice\/user-1000.slice\/user@1000.service\", \/\/ root_path\n+    \"\/user.slice\/user-1000.slice\/user@1000.service\", \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/mem\"                             \/\/ expected_path\n+  };\n+  int length = 2;\n+  TestCase* testCases[] = { &host,\n+                            &container_engine };\n+  for (int i = 0; i < length; i++) {\n+    CgroupV1Controller* ctrl = new CgroupV1Controller( (char*)testCases[i]->root_path,\n+                                                       (char*)testCases[i]->mount_path);\n+    ctrl->set_subsystem_path((char*)testCases[i]->cgroup_path);\n+    ASSERT_STREQ(testCases[i]->expected_path, ctrl->subsystem_path());\n+  }\n+}\n+\n+TEST(os_linux_cgroup, set_cgroupv2_subsystem_path) {\n+  TestCase at_mount_root = {\n+    \"\/sys\/fs\/cgroup\",       \/\/ mount_path\n+    NULL,                   \/\/ root_path, ignored\n+    \"\/\",                    \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\"        \/\/ expected_path\n+  };\n+  TestCase sub_path = {\n+    \"\/sys\/fs\/cgroup\",       \/\/ mount_path\n+    NULL,                   \/\/ root_path, ignored\n+    \"\/foobar\",              \/\/ cgroup_path\n+    \"\/sys\/fs\/cgroup\/foobar\" \/\/ expected_path\n+  };\n+  int length = 2;\n+  TestCase* testCases[] = { &at_mount_root,\n+                            &sub_path };\n+  for (int i = 0; i < length; i++) {\n+    CgroupV2Controller* ctrl = new CgroupV2Controller( (char*)testCases[i]->mount_path,\n+                                                       (char*)testCases[i]->cgroup_path);\n+    ASSERT_STREQ(testCases[i]->expected_path, ctrl->subsystem_path());\n+  }\n+}\n+\n+#endif\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_linux_cgroups.cpp","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+import jdk.internal.platform.cgroupv1.CgroupV1SubsystemController;\n+\n+\/*\n+ * @test\n+ * @key cgroups\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.platform.cgroupv1\n+ * @library \/test\/lib\n+ * @run junit\/othervm CgroupV1SubsystemControllerTest\n+ *\/\n+public class CgroupV1SubsystemControllerTest {\n+\n+\n+    \/*\n+     * Common case: Containers\n+     *\/\n+    @Test\n+    public void testCgPathEqualsRoot() {\n+        String root = \"\/machine.slice\/libpod-7145e2e7dbeab5aa96bd79beed79eda286a2d299a0ee386e704cad9f53a70979.scope\";\n+        String mountPoint = \"\/somemount\";\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        ctrl.setPath(\"\/machine.slice\/libpod-7145e2e7dbeab5aa96bd79beed79eda286a2d299a0ee386e704cad9f53a70979.scope\");\n+        assertEquals(mountPoint, ctrl.path());\n+    }\n+\n+    \/*\n+     * Common case: Host\n+     *\/\n+    @Test\n+    public void testCgPathNonEmptyRoot() {\n+        String root = \"\/\";\n+        String mountPoint = \"\/sys\/fs\/cgroup\/memory\";\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        String cgroupPath = \"\/subpath\";\n+        ctrl.setPath(cgroupPath);\n+        String expectedPath = mountPoint + cgroupPath;\n+        assertEquals(expectedPath, ctrl.path());\n+    }\n+\n+    @Test\n+    public void testCgPathSubstring() {\n+        String root = \"\/foo\/bar\/baz\";\n+        String mountPoint = \"\/sys\/fs\/cgroup\/memory\";\n+        CgroupV1SubsystemController ctrl = new CgroupV1SubsystemController(root, mountPoint);\n+        String cgroupPath = \"\/foo\/bar\/baz\/some\";\n+        ctrl.setPath(cgroupPath);\n+        String expectedPath = mountPoint + \"\/some\";\n+        assertEquals(expectedPath, ctrl.path());\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV1SubsystemControllerTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.junit.Test;\n+\n+import jdk.internal.platform.cgroupv2.CgroupV2SubsystemController;\n+\n+\/*\n+ * @test\n+ * @key cgroups\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.platform.cgroupv2\n+ * @library \/test\/lib\n+ * @run junit\/othervm CgroupV2SubsystemControllerTest\n+ *\/\n+public class CgroupV2SubsystemControllerTest {\n+\n+\n+    \/*\n+     * Common case: No nested cgroup path (i.e. at the unified root)\n+     *\/\n+    @Test\n+    public void testCgPathAtRoot() {\n+        String mountPoint = \"\/sys\/fs\/cgroup\";\n+        String cgroupPath = \"\/\";\n+        CgroupV2SubsystemController ctrl = new CgroupV2SubsystemController(mountPoint, cgroupPath);\n+        assertEquals(mountPoint, ctrl.path());\n+    }\n+\n+    \/*\n+     * Cgroup path at a sub-path\n+     *\/\n+    @Test\n+    public void testCgPathNonEmptyRoot() {\n+        String mountPoint = \"\/sys\/fs\/cgroup\";\n+        String cgroupPath = \"\/foobar\";\n+        CgroupV2SubsystemController ctrl = new CgroupV2SubsystemController(mountPoint, cgroupPath);\n+        String expectedPath = mountPoint + cgroupPath;\n+        assertEquals(expectedPath, ctrl.path());\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/cgroup\/CgroupV2SubsystemControllerTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}