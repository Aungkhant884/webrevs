{"files":[{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8232097\n+ * @summary Basic sanity for creation of SCTP channels\n+ * @modules jdk.sctp\n+ * @run main\/othervm SctpSanity 1\n+ * @run main\/othervm SctpSanity 2\n+ * @run main\/othervm SctpSanity 3\n+ *\/\n+\n+import java.io.IOException;\n+import com.sun.nio.sctp.SctpChannel;\n+import com.sun.nio.sctp.SctpMultiChannel;\n+import com.sun.nio.sctp.SctpServerChannel;\n+import static java.lang.System.out;\n+\n+\/**\n+ * Tests creation of SCTP channels. The channels should either be created\n+ * or not. The latter throwing an UnsupportedOperationException. No other\n+ * behavior is acceptable. Minimally, exercises the JDK's native library\n+ * loading on operating systems that provide an implementation, even if\n+ * the system-level support is not configured.\n+ *\/\n+public class SctpSanity {\n+\n+    public static void main(String... args) throws IOException {\n+        switch (Integer.valueOf(args[0])) {\n+            case 1: testSctpChannel();        break;\n+            case 2: testSctpServerChannel();  break;\n+            case 3: testSctpMultiChannel();   break;\n+            default: throw new AssertionError(\"should not reach here\");\n+        }\n+    }\n+\n+    static void testSctpChannel() throws IOException {\n+        try (SctpChannel channel = SctpChannel.open()) {\n+            out.println(\"created SctpChannel:\" + channel);\n+        } catch (UnsupportedOperationException uoe) {\n+            \/\/ ok - the platform does not support SCTP\n+            out.println(\"ok, caught:\" + uoe);\n+        }\n+    }\n+\n+    static void testSctpServerChannel() throws IOException {\n+        try (SctpServerChannel channel = SctpServerChannel.open()) {\n+            out.println(\"created SctpServerChannel:\" + channel);\n+        } catch (UnsupportedOperationException uoe) {\n+            \/\/ ok - the platform does not support SCTP\n+            out.println(\"ok, caught:\" + uoe);\n+        }\n+    }\n+\n+    static void testSctpMultiChannel() throws IOException {\n+        try (SctpMultiChannel channel = SctpMultiChannel.open()) {\n+            out.println(\"created SctpMultiChannel:\" + channel);\n+        } catch (UnsupportedOperationException uoe) {\n+            \/\/ ok - the platform does not support SCTP\n+            out.println(\"ok, caught:\" + uoe);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/net\/SctpSanity.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}