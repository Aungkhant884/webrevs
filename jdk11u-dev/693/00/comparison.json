{"files":[{"patch":"@@ -741,3 +741,12 @@\n-  \/\/ Redefinition locking.  Class can only be redefined by one thread at a time.\n-  bool is_being_redefined() const          { return _is_being_redefined; }\n-  void set_is_being_redefined(bool value)  { _is_being_redefined = value; }\n+  \/\/ The flag is in access_flags so that it can be set and reset using atomic\n+  \/\/ operations, and not be reset by other misc_flag settings.\n+  bool is_being_redefined() const          {\n+    return _access_flags.is_being_redefined();\n+  }\n+  void set_is_being_redefined(bool value)  {\n+    if (value) {\n+      _access_flags.set_is_being_redefined();\n+    } else {\n+      _access_flags.clear_is_being_redefined();\n+    }\n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+  JVM_ACC_IS_BEING_REDEFINED      = 0x00100000,     \/\/ True if the klass is being redefined.\n@@ -158,0 +159,4 @@\n+  bool is_being_redefined() const       { return (_flags & JVM_ACC_IS_BEING_REDEFINED) != 0; }\n+  void set_is_being_redefined()         { atomic_set_bits(JVM_ACC_IS_BEING_REDEFINED); }\n+  void clear_is_being_redefined()       { atomic_clear_bits(JVM_ACC_IS_BEING_REDEFINED); }\n+\n","filename":"src\/hotspot\/share\/utilities\/accessFlags.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}