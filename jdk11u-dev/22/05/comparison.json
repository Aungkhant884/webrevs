{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1044,5 +1044,1 @@\n-  NoSafepointVerifier no_safepoints; \/\/ we mustn't GC until we've installed the\n-                                     \/\/ ClassLoaderData in the graph since the CLD\n-                                     \/\/ contains oops in _handles that must be walked.\n-\n-  ClassLoaderData* cld = new ClassLoaderData(loader, is_anonymous);\n+  ClassLoaderData* cld;\n@@ -1051,6 +1047,4 @@\n-    \/\/ First, Atomically set it\n-    ClassLoaderData* old = java_lang_ClassLoader::cmpxchg_loader_data(cld, loader(), NULL);\n-    if (old != NULL) {\n-      delete cld;\n-      \/\/ Returns the data.\n-      return old;\n+    MutexLocker ml(ClassLoaderDataGraph_lock);\n+    cld = java_lang_ClassLoader::loader_data_raw(loader());\n+    if (cld != NULL) {\n+      return cld;\n@@ -1058,0 +1052,4 @@\n+    cld = new ClassLoaderData(loader, is_anonymous);\n+    java_lang_ClassLoader::set_loader_data(loader(), cld);\n+  } else {\n+    cld = new ClassLoaderData(loader, is_anonymous);\n@@ -1060,0 +1058,4 @@\n+  NoSafepointVerifier no_safepoints; \/\/ we mustn't GC until we've installed the\n+                                     \/\/ ClassLoaderData in the graph since the CLD\n+                                     \/\/ contains oops in _handles that must be walked.\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -4025,1 +4025,1 @@\n-  return HeapAccess<>::load_at(loader, _loader_data_offset);\n+  return HeapAccess<MO_ACQUIRE>::load_at(loader, _loader_data_offset);\n@@ -4028,1 +4028,1 @@\n-ClassLoaderData* java_lang_ClassLoader::cmpxchg_loader_data(ClassLoaderData* new_data, oop loader, ClassLoaderData* expected_data) {\n+ClassLoaderData* java_lang_ClassLoader::loader_data_raw(oop loader) {\n@@ -4030,1 +4030,7 @@\n-  return HeapAccess<>::atomic_cmpxchg_at(new_data, loader, _loader_data_offset, expected_data);\n+  return RawAccess<>::load_at(loader, _loader_data_offset);\n+}\n+\n+void java_lang_ClassLoader::set_loader_data(oop loader, ClassLoaderData* new_data) {\n+  assert(loader != NULL, \"loader must not be NULL\");\n+  assert(oopDesc::is_oop(loader), \"loader must be oop\");\n+  HeapAccess<MO_RELEASE>::store_at(loader, _loader_data_offset, new_data);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1324,1 +1324,2 @@\n-  static ClassLoaderData* cmpxchg_loader_data(ClassLoaderData* new_data, oop loader, ClassLoaderData* expected_data);\n+  static ClassLoaderData* loader_data_raw(oop loader);\n+  static void set_loader_data(oop loader, ClassLoaderData* new_data);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -150,0 +150,1 @@\n+Mutex*   ClassLoaderDataGraph_lock    = NULL;\n@@ -238,0 +239,1 @@\n+  def(ClassLoaderDataGraph_lock    , PaddedMutex  , nonleaf,     true,  Monitor::_safepoint_check_always);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-\n+extern Mutex*   ClassLoaderDataGraph_lock;       \/\/ protects CLDG list, needed for concurrent unloading\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,203 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8251945\n+ * @summary Ensure no race on installing class loader data\n+ *\n+ * @run main\/othervm Test\n+ *\/\n+import jdk.jfr.Event;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.io.OutputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.Executors;\n+\n+public final class Test\n+{\n+    private static final int ITERATIONS = Integer.getInteger(\"iterations\", 10000);\n+    private volatile ClassLoader nextLoader;\n+\n+    public static void main(final String[] args) {\n+        new Test().crash();\n+    }\n+\n+    public void crash() {\n+        final byte[] runnableClass = loadBytecode(\"Test$TestRunnable\");\n+        final byte[] eventClass = loadBytecode(\"Test$TestRunnable$RunnableEvent\");\n+        final int numberOfThreads = Runtime.getRuntime().availableProcessors();\n+        if (numberOfThreads < 1) {\n+            throw new IllegalStateException(\"requies more than one thread\");\n+        }\n+        final ExecutorService threadPool = Executors.newFixedThreadPool(numberOfThreads);\n+        final CyclicBarrier cyclicBarrier = new CyclicBarrier(numberOfThreads, () -> this.nextLoader = new PredefinedClassLoader(runnableClass, eventClass));\n+        for (int i = 0; i < numberOfThreads; ++i) {\n+            threadPool.submit(new LoadingRunnable(cyclicBarrier));\n+        }\n+        threadPool.shutdown();\n+    }\n+\n+    Runnable loadTestRunnable(final ClassLoader classLoader) {\n+        try {\n+            return (Runnable)Class.forName(\"Test$TestRunnable\", true, classLoader).asSubclass(Runnable.class).getConstructor((Class<?>[])new Class[0]).newInstance(new Object[0]);\n+        }\n+        catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(\"could not load runnable\", e);\n+        }\n+    }\n+\n+    private static byte[] loadBytecode(final String className) {\n+        final String resource = toResourceName(className);\n+        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        try {\n+            final InputStream inputStream = Test.class.getClassLoader().getResourceAsStream(resource);\n+            try {\n+                inputStream.transferTo(buffer);\n+                if (inputStream != null) {\n+                    inputStream.close();\n+                }\n+            }\n+            catch (Throwable t) {\n+                if (inputStream != null) {\n+                    try {\n+                        inputStream.close();\n+                    }\n+                    catch (Throwable exception) {\n+                        t.addSuppressed(exception);\n+                    }\n+                }\n+                throw t;\n+            }\n+        }\n+        catch (IOException e) {\n+            throw new UncheckedIOException(className, e);\n+        }\n+        return buffer.toByteArray();\n+    }\n+\n+    private static String toResourceName(final String className) {\n+        return className.replace('.', '\/') + \".class\";\n+    }\n+\n+    final class LoadingRunnable implements Runnable\n+    {\n+        private final CyclicBarrier barrier;\n+\n+        LoadingRunnable(final CyclicBarrier barrier) {\n+            this.barrier = barrier;\n+        }\n+\n+        @Override\n+        public void run() {\n+            int itr = 0;\n+            try {\n+                while (itr++ < ITERATIONS) {\n+                    this.barrier.await();\n+                    final Runnable runnable = Test.this.loadTestRunnable(Test.this.nextLoader);\n+                    runnable.run();\n+                }\n+            }\n+            catch (InterruptedException | BrokenBarrierException ex) {\n+                final Exception e = ex;\n+            }\n+        }\n+    }\n+\n+    static final class PredefinedClassLoader extends ClassLoader\n+    {\n+        private final byte[] runnableClass;\n+        private final byte[] eventClass;\n+\n+        PredefinedClassLoader(final byte[] runnableClass, final byte[] eventClass) {\n+            super(null);\n+            this.runnableClass = runnableClass;\n+            this.eventClass = eventClass;\n+        }\n+\n+        @Override\n+        protected Class<?> loadClass(final String className, final boolean resolve) throws ClassNotFoundException {\n+            final Class<?> loadedClass = this.findLoadedClass(className);\n+            if (loadedClass != null) {\n+                if (resolve) {\n+                    this.resolveClass(loadedClass);\n+                }\n+                return loadedClass;\n+            }\n+            if (className.equals(\"Test$TestRunnable\")) {\n+                return this.loadClassFromByteArray(className, resolve, this.runnableClass);\n+            }\n+            if (className.equals(\"Test$TestRunnable$RunnableEvent\")) {\n+                return this.loadClassFromByteArray(className, resolve, this.eventClass);\n+            }\n+            return super.loadClass(className, resolve);\n+        }\n+\n+        private Class<?> loadClassFromByteArray(final String className, final boolean resolve, final byte[] byteCode) throws ClassNotFoundException {\n+            Class<?> clazz;\n+            try {\n+                synchronized (getClassLoadingLock(className)) {\n+                    clazz = this.defineClass(className, byteCode, 0, byteCode.length);\n+                }\n+            }\n+            catch (LinkageError e) {\n+                clazz = this.findLoadedClass(className);\n+            }\n+            if (resolve) {\n+                this.resolveClass(clazz);\n+            }\n+            return clazz;\n+        }\n+    }\n+\n+    public static final class TestRunnable implements Runnable\n+    {\n+        @Override\n+        public void run() {\n+            final RunnableEvent event = new RunnableEvent();\n+            event.setRunnableClassName(\"TestRunnable\");\n+            event.begin();\n+            event.end();\n+            event.commit();\n+        }\n+\n+        public static class RunnableEvent extends Event\n+        {\n+            private String runnableClassName;\n+\n+            String getRunnableClassName() {\n+                return this.runnableClassName;\n+            }\n+\n+            void setRunnableClassName(final String operationName) {\n+                this.runnableClassName = operationName;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/8251945\/Test.java","additions":203,"deletions":0,"binary":false,"changes":203,"status":"added"}]}