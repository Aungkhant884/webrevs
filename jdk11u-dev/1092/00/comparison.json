{"files":[{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import jdk.test.lib.Asserts;\n+\n+\/**\n+ * @test\n+ * @bug 8141690\n+ * @summary MakeJavaSecurity.java functions\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main MakeJavaSecurityTest\n+ *\/\n+public class MakeJavaSecurityTest {\n+\n+    private static final String TEST_SRC = System.getProperty(\"test.src\", \".\");\n+\n+    public static void main(String[] args) throws Exception {\n+        Path toolPath = getMakeJavaSecPath();\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                toolPath.toString(),\n+                TEST_SRC + \"\/raw_java_security\",\n+                \"outfile\",\n+                \"solaris\",\n+                \"sparc\",\n+                \"somepolicy\",\n+                TEST_SRC + \"\/more_restricted\");\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+\n+        verifyOutputFile();\n+    }\n+\n+    private static Path getMakeJavaSecPath() {\n+        String testRoot = System.getProperty(\"test.root\", \".\");\n+        Path toolPath = Paths.get(testRoot).getParent().getParent();\n+        toolPath = toolPath.resolve(\"make\/jdk\/src\/classes\/build\/tools\" +\n+                \"\/makejavasecurity\/MakeJavaSecurity.java\");\n+\n+        Asserts.assertTrue(Files.exists(toolPath),\n+                           \"Cannot find \" + toolPath + \". Maybe not all code repos are available\");\n+        return toolPath;\n+    }\n+\n+    private static void verifyOutputFile() throws IOException {\n+        Path actualFile = Path.of(\".\/outfile\");\n+        Path expectedFile = Path.of(TEST_SRC + \"\/final_java_security\");\n+\n+        List<String> list1 = Files.readAllLines(actualFile);\n+        List<String> list2 = Files.readAllLines(expectedFile);\n+        list1 = removeEmptyLines(list1);\n+        list2 = removeEmptyLines(list2);\n+\n+        String errorMessage = \"Expected file content: \" + list2 + \"\\n not equal to actual: \" + list1;\n+\n+        Asserts.assertTrue(list1.equals(list2), errorMessage);\n+    }\n+\n+    private static List<String> removeEmptyLines(List<String> list) {\n+        return list.stream()\n+                .filter(item -> !item.isBlank())\n+                .collect(Collectors.toList());\n+    }\n+}\n","filename":"test\/jdk\/jdk\/security\/JavaDotSecurity\/MakeJavaSecurityTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}