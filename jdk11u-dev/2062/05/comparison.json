{"files":[{"patch":"@@ -172,1 +172,1 @@\n-    private static CharPredicate getPosixPredicate(String name) {\n+    private static CharPredicate getPosixPredicate(String name, boolean caseIns) {\n@@ -175,2 +175,6 @@\n-            case \"LOWER\": return LOWERCASE();\n-            case \"UPPER\": return UPPERCASE();\n+            case \"LOWER\": return caseIns\n+                              ? LOWERCASE().union(UPPERCASE(), TITLECASE())\n+                              : LOWERCASE();\n+            case \"UPPER\": return caseIns\n+                              ? UPPERCASE().union(LOWERCASE(), TITLECASE())\n+                              : UPPERCASE();\n@@ -190,1 +194,1 @@\n-    private static CharPredicate getUnicodePredicate(String name) {\n+    private static CharPredicate getUnicodePredicate(String name, boolean caseIns) {\n@@ -199,1 +203,3 @@\n-            case \"LOWERCASE\": return LOWERCASE();\n+            case \"LOWERCASE\": return caseIns\n+                                  ? LOWERCASE().union(UPPERCASE(), TITLECASE())\n+                                  : LOWERCASE();\n@@ -201,1 +207,3 @@\n-            case \"TITLECASE\": return TITLECASE();\n+            case \"TITLECASE\": return caseIns\n+                                  ? TITLECASE().union(LOWERCASE(), UPPERCASE())\n+                                  : TITLECASE();\n@@ -203,1 +211,3 @@\n-            case \"UPPERCASE\": return UPPERCASE();\n+            case \"UPPERCASE\": return caseIns\n+                                  ? UPPERCASE().union(LOWERCASE(), TITLECASE())\n+                                  : UPPERCASE();\n@@ -214,1 +224,1 @@\n-    public static CharPredicate forUnicodeProperty(String propName) {\n+    public static CharPredicate forUnicodeProperty(String propName, boolean caseIns) {\n@@ -216,1 +226,1 @@\n-        CharPredicate p = getUnicodePredicate(propName);\n+        CharPredicate p = getUnicodePredicate(propName, caseIns);\n@@ -219,1 +229,1 @@\n-        return getPosixPredicate(propName);\n+        return getPosixPredicate(propName, caseIns);\n@@ -222,2 +232,2 @@\n-    public static CharPredicate forPOSIXName(String propName) {\n-        return getPosixPredicate(propName.toUpperCase(Locale.ENGLISH));\n+    public static CharPredicate forPOSIXName(String propName, boolean caseIns) {\n+        return getPosixPredicate(propName.toUpperCase(Locale.ENGLISH), caseIns);\n@@ -257,1 +267,1 @@\n-    static CharPredicate forProperty(String name) {\n+    static CharPredicate forProperty(String name, boolean caseIns) {\n@@ -262,3 +272,12 @@\n-            case \"Lu\": return category(1<<Character.UPPERCASE_LETTER);\n-            case \"Ll\": return category(1<<Character.LOWERCASE_LETTER);\n-            case \"Lt\": return category(1<<Character.TITLECASE_LETTER);\n+            case \"Lu\": return category(caseIns ? (1 << Character.LOWERCASE_LETTER) |\n+                                                 (1 << Character.UPPERCASE_LETTER) |\n+                                                 (1 << Character.TITLECASE_LETTER)\n+                                               : (1 << Character.UPPERCASE_LETTER));\n+            case \"Ll\": return category(caseIns ? (1 << Character.LOWERCASE_LETTER) |\n+                                                 (1 << Character.UPPERCASE_LETTER) |\n+                                                 (1 << Character.TITLECASE_LETTER)\n+                                               : (1 << Character.LOWERCASE_LETTER));\n+            case \"Lt\": return category(caseIns ? (1 << Character.LOWERCASE_LETTER) |\n+                                                 (1 << Character.UPPERCASE_LETTER) |\n+                                                 (1 << Character.TITLECASE_LETTER)\n+                                               : (1 << Character.TITLECASE_LETTER));\n@@ -341,1 +360,2 @@\n-            case \"Lower\": return range('a', 'z');     \/\/ Lower-case alphabetic\n+            case \"Lower\": return caseIns ? ctype(ASCII.ALPHA)\n+                                         : range('a', 'z');     \/\/ Lower-case alphabetic\n@@ -345,1 +365,2 @@\n-            case \"Upper\": return range('A', 'Z');     \/\/ Upper-case alphabetic\n+            case \"Upper\": return caseIns ? ctype(ASCII.ALPHA)\n+                                         : range('A', 'Z');     \/\/ Upper-case alphabetic\n@@ -349,18 +370,27 @@\n-            case \"javaLowerCase\": return java.lang.Character::isLowerCase;\n-            case \"javaUpperCase\": return  Character::isUpperCase;\n-            case \"javaAlphabetic\": return java.lang.Character::isAlphabetic;\n-            case \"javaIdeographic\": return java.lang.Character::isIdeographic;\n-            case \"javaTitleCase\": return java.lang.Character::isTitleCase;\n-            case \"javaDigit\": return java.lang.Character::isDigit;\n-            case \"javaDefined\": return java.lang.Character::isDefined;\n-            case \"javaLetter\": return java.lang.Character::isLetter;\n-            case \"javaLetterOrDigit\": return java.lang.Character::isLetterOrDigit;\n-            case \"javaJavaIdentifierStart\": return java.lang.Character::isJavaIdentifierStart;\n-            case \"javaJavaIdentifierPart\": return java.lang.Character::isJavaIdentifierPart;\n-            case \"javaUnicodeIdentifierStart\": return java.lang.Character::isUnicodeIdentifierStart;\n-            case \"javaUnicodeIdentifierPart\": return java.lang.Character::isUnicodeIdentifierPart;\n-            case \"javaIdentifierIgnorable\": return java.lang.Character::isIdentifierIgnorable;\n-            case \"javaSpaceChar\": return java.lang.Character::isSpaceChar;\n-            case \"javaWhitespace\": return java.lang.Character::isWhitespace;\n-            case \"javaISOControl\": return java.lang.Character::isISOControl;\n-            case \"javaMirrored\": return java.lang.Character::isMirrored;\n+            case \"javaLowerCase\": return caseIns ? c -> Character.isLowerCase(c) ||\n+                                                        Character.isUpperCase(c) ||\n+                                                        Character.isTitleCase(c)\n+                                                 : Character::isLowerCase;\n+            case \"javaUpperCase\": return caseIns ? c -> Character.isUpperCase(c) ||\n+                                                        Character.isLowerCase(c) ||\n+                                                        Character.isTitleCase(c)\n+                                                 : Character::isUpperCase;\n+            case \"javaAlphabetic\": return Character::isAlphabetic;\n+            case \"javaIdeographic\": return Character::isIdeographic;\n+            case \"javaTitleCase\": return caseIns ? c -> Character.isTitleCase(c) ||\n+                                                   Character.isLowerCase(c) ||\n+                                                   Character.isUpperCase(c)\n+                                            : Character::isTitleCase;\n+            case \"javaDigit\": return Character::isDigit;\n+            case \"javaDefined\": return Character::isDefined;\n+            case \"javaLetter\": return Character::isLetter;\n+            case \"javaLetterOrDigit\": return Character::isLetterOrDigit;\n+            case \"javaJavaIdentifierStart\": return Character::isJavaIdentifierStart;\n+            case \"javaJavaIdentifierPart\": return Character::isJavaIdentifierPart;\n+            case \"javaUnicodeIdentifierStart\": return Character::isUnicodeIdentifierStart;\n+            case \"javaUnicodeIdentifierPart\": return Character::isUnicodeIdentifierPart;\n+            case \"javaIdentifierIgnorable\": return Character::isIdentifierIgnorable;\n+            case \"javaSpaceChar\": return Character::isSpaceChar;\n+            case \"javaWhitespace\": return Character::isWhitespace;\n+            case \"javaISOControl\": return Character::isISOControl;\n+            case \"javaMirrored\": return Character::isMirrored;\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/CharPredicates.java","additions":66,"deletions":36,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2888,1 +2888,1 @@\n-                    p = CharPredicates.forProperty(value);\n+                    p = CharPredicates.forProperty(value, has(CASE_INSENSITIVE));\n@@ -2904,1 +2904,1 @@\n-                p = CharPredicates.forUnicodeProperty(name);\n+                p = CharPredicates.forUnicodeProperty(name, has(CASE_INSENSITIVE));\n@@ -2906,1 +2906,1 @@\n-                    p = CharPredicates.forProperty(name);\n+                    p = CharPredicates.forProperty(name, has(CASE_INSENSITIVE));\n@@ -2911,1 +2911,1 @@\n-                    p = CharPredicates.forPOSIXName(name);\n+                    p = CharPredicates.forPOSIXName(name, has(CASE_INSENSITIVE));\n@@ -2914,1 +2914,1 @@\n-                    p = CharPredicates.forProperty(name);\n+                    p = CharPredicates.forProperty(name, has(CASE_INSENSITIVE));\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n- * 8194667 8197462 8184692 8247546\n+ * 8194667 8197462 8184692 8247546 8305733\n@@ -173,0 +173,1 @@\n+        caseInsensitivePMatch();\n@@ -4935,0 +4936,59 @@\n+\n+    \/\/ This test is for 8305733\n+    private static void caseInsensitivePMatch() {\n+        for (String input : List.of(\"abcd\", \"AbCd\", \"ABCD\")) {\n+            for (String pattern : List.of(\"abcd\", \"aBcD\", \"[a-d]{4}\",\n+                    \"(?:a|b|c|d){4}\", \"\\\\p{Lower}{4}\", \"\\\\p{Ll}{4}\",\n+                    \"\\\\p{IsLl}{4}\", \"\\\\p{gc=Ll}{4}\",\n+                    \"\\\\p{general_category=Ll}{4}\", \"\\\\p{IsLowercase}{4}\",\n+                    \"\\\\p{javaLowerCase}{4}\", \"\\\\p{Upper}{4}\", \"\\\\p{Lu}{4}\",\n+                    \"\\\\p{IsLu}{4}\", \"\\\\p{gc=Lu}{4}\", \"\\\\p{general_category=Lu}{4}\",\n+                    \"\\\\p{IsUppercase}{4}\", \"\\\\p{javaUpperCase}{4}\",\n+                    \"\\\\p{Lt}{4}\", \"\\\\p{IsLt}{4}\", \"\\\\p{gc=Lt}{4}\",\n+                    \"\\\\p{general_category=Lt}{4}\", \"\\\\p{IsTitlecase}{4}\",\n+                    \"\\\\p{javaTitleCase}{4}\", \"[\\\\p{Lower}]{4}\", \"[\\\\p{Ll}]{4}\",\n+                    \"[\\\\p{IsLl}]{4}\", \"[\\\\p{gc=Ll}]{4}\",\n+                    \"[\\\\p{general_category=Ll}]{4}\", \"[\\\\p{IsLowercase}]{4}\",\n+                    \"[\\\\p{javaLowerCase}]{4}\", \"[\\\\p{Upper}]{4}\", \"[\\\\p{Lu}]{4}\",\n+                    \"[\\\\p{IsLu}]{4}\", \"[\\\\p{gc=Lu}]{4}\",\n+                    \"[\\\\p{general_category=Lu}]{4}\", \"[\\\\p{IsUppercase}]{4}\",\n+                    \"[\\\\p{javaUpperCase}]{4}\", \"[\\\\p{Lt}]{4}\", \"[\\\\p{IsLt}]{4}\",\n+                    \"[\\\\p{gc=Lt}]{4}\", \"[\\\\p{general_category=Lt}]{4}\",\n+                    \"[\\\\p{IsTitlecase}]{4}\", \"[\\\\p{javaTitleCase}]{4}\"))\n+            {\n+                Predicate<String> p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).asPredicate();\n+                if (!p.test(input)) {\n+                    failCount++;\n+                }\n+            }\n+        }\n+\n+        for (String input : List.of(\"\\u01c7\", \"\\u01c8\", \"\\u01c9\")) {\n+            for (String pattern : List.of(\"\\u01c7\", \"\\u01c8\", \"\\u01c9\",\n+                    \"[\\u01c7\\u01c8]\", \"[\\u01c7\\u01c9]\", \"[\\u01c8\\u01c9]\",\n+                    \"[\\u01c7-\\u01c8]\", \"[\\u01c8-\\u01c9]\", \"[\\u01c7-\\u01c9]\",\n+                    \"\\\\p{Lower}\", \"\\\\p{Ll}\", \"\\\\p{IsLl}\", \"\\\\p{gc=Ll}\",\n+                    \"\\\\p{general_category=Ll}\", \"\\\\p{IsLowercase}\",\n+                    \"\\\\p{javaLowerCase}\", \"\\\\p{Upper}\", \"\\\\p{Lu}\",\n+                    \"\\\\p{IsLu}\", \"\\\\p{gc=Lu}\", \"\\\\p{general_category=Lu}\",\n+                    \"\\\\p{IsUppercase}\", \"\\\\p{javaUpperCase}\",\n+                    \"\\\\p{Lt}\", \"\\\\p{IsLt}\", \"\\\\p{gc=Lt}\",\n+                    \"\\\\p{general_category=Lt}\", \"\\\\p{IsTitlecase}\",\n+                    \"\\\\p{javaTitleCase}\", \"[\\\\p{Lower}]\", \"[\\\\p{Ll}]\",\n+                    \"[\\\\p{IsLl}]\", \"[\\\\p{gc=Ll}]\",\n+                    \"[\\\\p{general_category=Ll}]\", \"[\\\\p{IsLowercase}]\",\n+                    \"[\\\\p{javaLowerCase}]\", \"[\\\\p{Upper}]\", \"[\\\\p{Lu}]\",\n+                    \"[\\\\p{IsLu}]\", \"[\\\\p{gc=Lu}]\",\n+                    \"[\\\\p{general_category=Lu}]\", \"[\\\\p{IsUppercase}]\",\n+                    \"[\\\\p{javaUpperCase}]\", \"[\\\\p{Lt}]\", \"[\\\\p{IsLt}]\",\n+                    \"[\\\\p{gc=Lt}]\", \"[\\\\p{general_category=Lt}]\",\n+                    \"[\\\\p{IsTitlecase}]\", \"[\\\\p{javaTitleCase}]\"))\n+            {\n+                Predicate<String> p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | \n+                                                               Pattern.UNICODE_CHARACTER_CLASS).asPredicate();\n+                if (!p.test(input)) {\n+                    failCount++;\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":61,"deletions":1,"binary":false,"changes":62,"status":"modified"}]}