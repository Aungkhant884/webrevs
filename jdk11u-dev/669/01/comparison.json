{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return JNI_FALSE;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return JNI_FALSE;\n-                }\n@@ -58,4 +53,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/BooleanArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -37,1 +38,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -46,4 +49,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -51,4 +50,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -57,4 +52,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return 0;\n-        }\n@@ -62,0 +53,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/ByteArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -58,4 +53,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/CharArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -58,4 +53,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/DoubleArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -58,4 +53,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/FloatArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -58,4 +53,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/IntArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -58,4 +53,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/LongArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return 0;\n-                }\n@@ -58,4 +53,0 @@\n-        if (arr == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/ShortArrayCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-(JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+(JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -47,4 +50,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return JNI_FALSE;\n-                }\n@@ -52,4 +51,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return JNI_FALSE;\n-                }\n@@ -58,4 +53,0 @@\n-        if (str == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return JNI_FALSE;\n-        }\n@@ -63,0 +54,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/StringCriticalLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libBooleanArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libByteArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libCharArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libDoubleArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libFloatArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libIntArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libLongArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libShortArrayCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/libStringCriticalLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+\n@@ -26,0 +27,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +40,3 @@\n-  (JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+  (JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -45,4 +49,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return;\n-                }\n@@ -50,4 +50,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return;\n-                }\n@@ -56,4 +52,0 @@\n-        if (obj == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return;\n-        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/JNIGlobalRefLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-  (JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+  (JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -45,4 +48,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return;\n-                }\n@@ -50,4 +49,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return;\n-                }\n@@ -56,4 +51,0 @@\n-        if (obj == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return;\n-        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/JNILocalRefLocker.cpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-  (JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+  (JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -45,4 +48,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return;\n-                }\n@@ -50,4 +49,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return;\n-                }\n@@ -55,0 +50,1 @@\n+\n@@ -56,4 +52,0 @@\n-        if (obj == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return;\n-        }\n@@ -61,0 +53,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/JNIRefLocker.cpp","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionCheckingJniEnv.hpp\"\n@@ -38,1 +39,3 @@\n-  (JNIEnv *env, jobject o, jlong enterTime, jlong sleepTime) {\n+  (JNIEnv *jni_env, jobject o, jlong enterTime, jlong sleepTime) {\n+        ExceptionCheckingJniEnvPtr env(jni_env);\n+\n@@ -45,4 +48,0 @@\n-                if (klass == NULL) {\n-                        printf(\"Error: GetObjectClass returned NULL\\n\");\n-                        return;\n-                }\n@@ -50,4 +49,0 @@\n-                if (objFieldId == NULL) {\n-                        printf(\"Error: GetFieldID returned NULL\\n\");\n-                        return;\n-                }\n@@ -56,4 +51,0 @@\n-        if (obj == NULL) {\n-                printf(\"Error: GetObjectField returned NULL\\n\");\n-                return;\n-        }\n@@ -61,0 +52,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/JNIWeakGlobalRefLocker.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/libJNIGlobalRefLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/libJNILocalRefLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/libJNIRefLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"ExceptionCheckingJniEnv.cpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jniref\/libJNIWeakGlobalRefLocker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, Google and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdlib.h>\n+\n+#include \"ExceptionCheckingJniEnv.hpp\"\n+\n+namespace {\n+\n+template<class T = void*>\n+class JNIVerifier {\n+ public:\n+  JNIVerifier(ExceptionCheckingJniEnv *env, const char* base_msg)\n+      : _env(env), _base_msg(base_msg), _return_error(NULL) {\n+  }\n+\n+  ~JNIVerifier() {\n+    JNIEnv* jni_env = _env->GetJNIEnv();\n+    if (jni_env->ExceptionCheck()) {\n+      _env->HandleError(_base_msg);\n+      return;\n+    }\n+\n+    if (_return_error != NULL) {\n+      ProcessReturnError();\n+    }\n+  }\n+\n+  void ProcessReturnError() {\n+    int len = snprintf(NULL, 0, \"%s : %s\", _base_msg, _return_error) + 1;\n+\n+    if (len <= 0) {\n+      _env->HandleError(_return_error);\n+      return;\n+    }\n+\n+    char* full_message = (char*) malloc(len);\n+    if (full_message == NULL) {\n+      _env->HandleError(_return_error);\n+      return;\n+    }\n+\n+    snprintf(full_message, len, \"%s : %s\", _base_msg, _return_error);\n+\n+    _env->HandleError(full_message);\n+    free(full_message);\n+  }\n+\n+  T ResultNotNull(T ptr) {\n+    if (ptr == NULL) {\n+      _return_error = \"Return is NULL\";\n+    }\n+    return ptr;\n+  }\n+\n+ private:\n+  ExceptionCheckingJniEnv* _env;\n+  const char* const _base_msg;\n+  const char* _return_error;\n+};\n+\n+}\n+\n+jclass ExceptionCheckingJniEnv::GetObjectClass(jobject obj) {\n+  JNIVerifier<jclass> marker(this, \"GetObjectClass\");\n+  return marker.ResultNotNull(_jni_env->GetObjectClass(obj));\n+}\n+\n+jfieldID ExceptionCheckingJniEnv::GetFieldID(jclass klass, const char *name, const char* type) {\n+  JNIVerifier<jfieldID> marker(this, \"GetFieldID\");\n+  return marker.ResultNotNull(_jni_env->GetFieldID(klass, name, type));\n+}\n+\n+jobject ExceptionCheckingJniEnv::GetObjectField(jobject obj, jfieldID field) {\n+  JNIVerifier<jobject> marker(this, \"GetObjectField\");\n+  return marker.ResultNotNull(_jni_env->GetObjectField(obj, field));\n+}\n+\n+void ExceptionCheckingJniEnv::SetObjectField(jobject obj, jfieldID field, jobject value) {\n+  JNIVerifier<> marker(this, \"SetObjectField\");\n+  _jni_env->SetObjectField(obj, field, value);\n+}\n+\n+jobject ExceptionCheckingJniEnv::NewGlobalRef(jobject obj) {\n+  JNIVerifier<jobject> marker(this, \"NewGlobalRef\");\n+  return marker.ResultNotNull(_jni_env->NewGlobalRef(obj));\n+}\n+\n+void ExceptionCheckingJniEnv::DeleteGlobalRef(jobject obj) {\n+  JNIVerifier<> marker(this, \"DeleteGlobalRef\");\n+  _jni_env->DeleteGlobalRef(obj);\n+}\n+\n+jobject ExceptionCheckingJniEnv::NewLocalRef(jobject obj) {\n+  JNIVerifier<jobject> marker(this, \"NewLocalRef\");\n+  return marker.ResultNotNull(_jni_env->NewLocalRef(obj));\n+}\n+\n+void ExceptionCheckingJniEnv::DeleteLocalRef(jobject obj) {\n+  JNIVerifier<> marker(this, \"DeleteLocalRef\");\n+  _jni_env->DeleteLocalRef(obj);\n+}\n+\n+jweak ExceptionCheckingJniEnv::NewWeakGlobalRef(jobject obj) {\n+  JNIVerifier<jweak> marker(this, \"NewWeakGlobalRef\");\n+  return marker.ResultNotNull(_jni_env->NewWeakGlobalRef(obj));\n+}\n+\n+void ExceptionCheckingJniEnv::DeleteWeakGlobalRef(jweak weak_ref) {\n+  JNIVerifier<> marker(this, \"DeleteWeakGlobalRef\");\n+  _jni_env->DeleteWeakGlobalRef(weak_ref);\n+}\n+\n+jsize ExceptionCheckingJniEnv::GetArrayLength(jarray array) {\n+  JNIVerifier<> marker(this, \"GetArrayLength\");\n+  return _jni_env->GetArrayLength(array);\n+}\n+\n+jsize ExceptionCheckingJniEnv::GetStringLength(jstring str) {\n+  JNIVerifier<> marker(this, \"GetStringLength\");\n+  return _jni_env->GetStringLength(str);\n+}\n+\n+void* ExceptionCheckingJniEnv::GetPrimitiveArrayCritical(jarray array, jboolean* isCopy) {\n+  JNIVerifier<> marker(this, \"GetPrimitiveArrayCritical\");\n+  return marker.ResultNotNull(_jni_env->GetPrimitiveArrayCritical(array, isCopy));\n+}\n+\n+void ExceptionCheckingJniEnv::ReleasePrimitiveArrayCritical(jarray array, void* carray, jint mode) {\n+  JNIVerifier<> marker(this, \"ReleasePrimitiveArrayCritical\");\n+  _jni_env->ReleasePrimitiveArrayCritical(array, carray, mode);\n+}\n+\n+const jchar* ExceptionCheckingJniEnv::GetStringCritical(jstring str, jboolean* isCopy) {\n+  JNIVerifier<const jchar*> marker(this, \"GetPrimitiveArrayCritical\");\n+  return marker.ResultNotNull(_jni_env->GetStringCritical(str, isCopy));\n+}\n+\n+void ExceptionCheckingJniEnv::ReleaseStringCritical(jstring str, const jchar* carray) {\n+  JNIVerifier<> marker(this, \"ReleaseStringCritical\");\n+  _jni_env->ReleaseStringCritical(str, carray);\n+}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jni\/ExceptionCheckingJniEnv.cpp","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, Google and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#ifndef NSK_EXCEPTIONCHECKINGJNIENV_DEFINED\n+#define NSK_EXCEPTIONCHECKINGJNIENV_DEFINED\n+\n+#include <jni.h>\n+\n+\/**\n+ * ExceptionCheckingJniEnv wraps around the JNIEnv data structure and\n+ * methods to enable automatic exception checking. This allows test writers\n+ * and readers to concentrate on what the test is to do and leave the\n+ * error checking and throwing to this data structure and subsystem.\n+ *\n+ * For example:\n+ *\n+ * ... JNIEnv* env ...\n+ *  jclass klass = env->GetObjectClass(o);\n+ *  if (klass == NULL) {\n+ *      printf(\"Error: GetObjectClass returned NULL\\n\");\n+ *      return;\n+ *  }\n+ *  if (env->ExceptionCheck()) {\n+ *    ...\n+ *  }\n+ *\n+ *  Can be simplified to:\n+ * ... ExceptionCheckingJniEnv* env ...\n+ *  jclass klass = env->GetObjectClass(o);\n+ *\n+ *  Where now the JNI Exception checking and the NULL return checking are done\n+ *  internally and will perform whatever action the ErrorHandler requires.\n+ *\n+ *  By default, the error handler describes the exception via the JNI\n+ *  ExceptionDescribe method and calls FatalError.\n+ *\n+ *  Note: at a future date, this will also include the tracing mechanism done in\n+ *  NSK_VERIFY, which will thus embed its logic into the ExceptionCheckingJniEnv\n+ *  and clearing that up for the code readers and writers.\n+ *\/\n+class ExceptionCheckingJniEnv {\n+ public:\n+  \/\/ JNIEnv API redefinitions.\n+  jfieldID GetFieldID(jclass klass, const char *name, const char* type);\n+  jclass GetObjectClass(jobject obj);\n+  jobject GetObjectField(jobject obj, jfieldID field);\n+  void SetObjectField(jobject obj, jfieldID field, jobject value);\n+\n+  jsize GetArrayLength(jarray array);\n+  jsize GetStringLength(jstring str);\n+\n+  void* GetPrimitiveArrayCritical(jarray array, jboolean* isCopy);\n+  void ReleasePrimitiveArrayCritical(jarray array, void* carray, jint mode);\n+  const jchar* GetStringCritical(jstring str, jboolean* isCopy);\n+  void ReleaseStringCritical(jstring str, const jchar* carray);\n+\n+  jobject NewGlobalRef(jobject obj);\n+  void DeleteGlobalRef(jobject obj);\n+  jobject NewLocalRef(jobject ref);\n+  void DeleteLocalRef(jobject ref);\n+  jweak NewWeakGlobalRef(jobject obj);\n+  void DeleteWeakGlobalRef(jweak obj);\n+\n+  \/\/ ExceptionCheckingJniEnv methods.\n+  JNIEnv* GetJNIEnv() {\n+    return _jni_env;\n+  }\n+\n+  void HandleError(const char* msg) {\n+    if (_error_handler) {\n+      _error_handler(_jni_env, msg);\n+    }\n+  }\n+\n+  typedef void (*ErrorHandler)(JNIEnv* env, const char* error_message);\n+\n+  static void FatalError(JNIEnv* env, const char* message) {\n+    if (env->ExceptionCheck()) {\n+      env->ExceptionDescribe();\n+    }\n+    env->FatalError(message);\n+  }\n+\n+  ExceptionCheckingJniEnv(JNIEnv* jni_env, ErrorHandler error_handler) :\n+    _jni_env(jni_env), _error_handler(error_handler) {}\n+\n+ private:\n+  JNIEnv* _jni_env;\n+  ErrorHandler _error_handler;\n+};\n+\n+\/\/ We cannot use unique_ptr due to this being gnu98++, so use this instead:\n+class ExceptionCheckingJniEnvPtr {\n+ private:\n+  ExceptionCheckingJniEnv _env;\n+\n+ public:\n+  ExceptionCheckingJniEnv* operator->() {\n+    return &_env;\n+  }\n+\n+  ExceptionCheckingJniEnvPtr(\n+      JNIEnv* jni_env,\n+      ExceptionCheckingJniEnv::ErrorHandler error_handler = ExceptionCheckingJniEnv::FatalError) :\n+          _env(jni_env, error_handler) {\n+  }\n+};\n+\n+#endif\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jni\/ExceptionCheckingJniEnv.hpp","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}