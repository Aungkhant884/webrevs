{"files":[{"patch":"@@ -1,141 +0,0 @@\n-\/*\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.Frame;\n-import java.awt.Point;\n-import java.awt.Robot;\n-import java.awt.TextArea;\n-import java.awt.event.InputEvent;\n-import java.awt.event.KeyEvent;\n-\n-\/*\n- * @test\n- * @key headful\n- * @bug 8296632\n- * @summary Verify the content changes of a TextArea via TextListener.\n- * @run main TextAreaTextEventTest\n- *\/\n-public class TextAreaTextEventTest {\n-\n-    private static Frame frame;\n-    private volatile static TextArea textArea;\n-    private volatile static boolean textChanged = false;\n-    private volatile static Point textAreaAt;\n-    private volatile static Dimension textAreaSize;\n-    private static Robot robot = null;\n-\n-    public static void main(String[] args) throws Exception {\n-        try {\n-            EventQueue.invokeAndWait(TextAreaTextEventTest::initializeGUI);\n-\n-            robot = new Robot();\n-            robot.setAutoDelay(100);\n-\n-            robot.waitForIdle();\n-            EventQueue.invokeAndWait(() -> {\n-                textAreaAt = textArea.getLocationOnScreen();\n-                textAreaSize = textArea.getSize();\n-            });\n-            robot.mouseMove(textAreaAt.x + textAreaSize.width \/ 2,\n-                textAreaAt.y + textAreaSize.height \/ 2);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            typeKey(KeyEvent.VK_T);\n-\n-            robot.waitForIdle();\n-            if (!textChanged) {\n-                throw new RuntimeException(\n-                    \"FAIL: TextEvent not triggered when key 'T' typed on TextArea\");\n-            }\n-\n-            typeKey(KeyEvent.VK_E);\n-            typeKey(KeyEvent.VK_S);\n-            typeKey(KeyEvent.VK_T);\n-\n-            textChanged = false;\n-            typeKey(KeyEvent.VK_ENTER);\n-\n-            robot.waitForIdle();\n-            if (!textChanged) {\n-                throw new RuntimeException(\n-                    \"FAIL: TextEvent not triggered when Enter pressed on TextArea\");\n-            }\n-\n-            textChanged = false;\n-            robot.mouseMove(textAreaAt.x + 4, textAreaAt.y + 10);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            for (int i = 0; i < textAreaSize.width \/ 2; i++) {\n-                robot.mouseMove(textAreaAt.x + 4 + i, textAreaAt.y + 10);\n-            }\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-            robot.waitForIdle();\n-            if (textChanged) {\n-                throw new RuntimeException(\n-                    \"FAIL: TextEvent triggered when text is selected on TextArea!\");\n-            }\n-\n-            textChanged = false;\n-            typeKey(KeyEvent.VK_F3);\n-\n-            robot.waitForIdle();\n-            if (textChanged) {\n-                throw new RuntimeException(\n-                    \"FAIL: TextEvent triggered when special key F3 is pressed on TextArea!\");\n-            }\n-            System.out.println(\"Test passed!\");\n-        } finally {\n-            EventQueue.invokeAndWait(TextAreaTextEventTest::disposeFrame);\n-        }\n-    }\n-\n-    private static void initializeGUI() {\n-        frame = new Frame(\"Test Frame\");\n-        frame.setLayout(new FlowLayout());\n-        textArea = new TextArea(5, 15);\n-        textArea.addTextListener((event) -> {\n-            System.out.println(\"Got a text event: \" + event);\n-            textChanged = true;\n-        });\n-        frame.add(textArea);\n-        frame.pack();\n-        frame.setLocationRelativeTo(null);\n-        frame.setVisible(true);\n-    }\n-\n-    public static void disposeFrame() {\n-        if (frame != null) {\n-            frame.dispose();\n-        }\n-    }\n-\n-    private static void typeKey(int key) throws Exception {\n-        robot.keyPress(key);\n-        robot.keyRelease(key);\n-    }\n-}\n","filename":"test\/jdk\/java\/awt\/event\/ComponentEvent\/TextAreaTextEventTest.java","additions":0,"deletions":141,"binary":false,"changes":141,"status":"deleted"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8297489 8296632\n+ * @summary Verify the content changes of a TextComponent via TextListener.\n+ * @run main TextComponentTextEventTest\n+ *\/\n+public class TextComponentTextEventTest {\n+\n+    private static Frame frame;\n+    private static Robot robot = null;\n+    private volatile static TextComponent[] components;\n+    private volatile static boolean textChanged = false;\n+    private volatile static Point textCompAt;\n+    private volatile static Dimension textCompSize;\n+\n+    private static void initializeGUI() {\n+        TextField textField = new TextField(20);\n+        textField.addTextListener((event) -> {\n+            textChanged = true;\n+            System.out.println(\"TextField got a text event: \" + event);\n+        });\n+\n+        TextArea textArea = new TextArea(5, 15);\n+        textArea.addTextListener((event) -> {\n+            System.out.println(\"TextArea got a text event: \" + event);\n+            textChanged = true;\n+        });\n+\n+        components = new TextComponent[] { textField, textArea };\n+\n+        frame = new Frame(\"Test Frame\");\n+        frame.setLayout(new FlowLayout());\n+        for (TextComponent textComp : components) {\n+            frame.add(textComp);\n+        }\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(TextComponentTextEventTest::initializeGUI);\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            for (TextComponent textComp : components) {\n+                robot.waitForIdle();\n+                EventQueue.invokeAndWait(() -> {\n+                    textCompAt = textComp.getLocationOnScreen();\n+                    textCompSize = textComp.getSize();\n+                });\n+\n+                robot.mouseMove(textCompAt.x + textCompSize.width \/ 2,\n+                    textCompAt.y + textCompSize.height \/ 2);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                typeKey(KeyEvent.VK_T);\n+\n+                robot.waitForIdle();\n+                if (!textChanged) {\n+                    throw new RuntimeException(\n+                        \"FAIL: TextEvent not triggered when text entered in \" + textComp);\n+                }\n+\n+                typeKey(KeyEvent.VK_E);\n+                typeKey(KeyEvent.VK_S);\n+                typeKey(KeyEvent.VK_T);\n+\n+                textChanged = false;\n+                typeKey(KeyEvent.VK_ENTER);\n+\n+                robot.waitForIdle();\n+                if (textComp instanceof TextField && textChanged) {\n+                    throw new RuntimeException(\n+                        \"FAIL: TextEvent triggered when Enter pressed on \" + textComp);\n+                } else if (textComp instanceof TextArea && !textChanged) {\n+                    throw new RuntimeException(\n+                        \"FAIL: TextEvent not triggered when Enter pressed on \" + textComp);\n+                }\n+\n+                textChanged = false;\n+                robot.mouseMove(textCompAt.x + 4, textCompAt.y + 10);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                for (int i = 0; i < textCompSize.width \/ 2; i++) {\n+                    robot.mouseMove(textCompAt.x + 4 + i, textCompAt.y + 10);\n+                }\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                robot.waitForIdle();\n+                if (textChanged) {\n+                    throw new RuntimeException(\n+                        \"FAIL: TextEvent triggered when selection made in \" + textComp);\n+                }\n+\n+                textChanged = false;\n+                typeKey(KeyEvent.VK_F3);\n+\n+                robot.waitForIdle();\n+                if (textChanged) {\n+                    throw new RuntimeException(\n+                        \"FAIL: TextEvent triggered when F3 pressed on \" + textComp);\n+                }\n+            }\n+            System.out.println(\"Test passed!\");\n+        } finally {\n+            EventQueue.invokeAndWait(TextComponentTextEventTest::disposeFrame);\n+        }\n+    }\n+\n+    public static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+\n+    private static void typeKey(int key) {\n+        robot.keyPress(key);\n+        robot.keyRelease(key);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/ComponentEvent\/TextComponentTextEventTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}