{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,0 +157,4 @@\n+    \/\/ The exception start position.\n+    \/\/ Corresponding to the start_pc in the exception table.\n+    private int exceptionStartPos = Integer.MIN_VALUE;\n+\n@@ -325,1 +329,1 @@\n-        return ((-this.exception_index) - 1) & 0xff ;\n+        return (-this.exception_index) - 1;\n@@ -329,3 +333,3 @@\n-        Assert.check(hasCatchType(),\n-                     \"exception_index does not contain valid catch info\");\n-        return ((-this.exception_index) - 1) >> 8 ;\n+        Assert.check(exceptionStartPos >= 0,\n+                     \"exceptionStartPos does not contain valid start position\");\n+        return this.exceptionStartPos;\n@@ -338,1 +342,3 @@\n-        this.exception_index = -((catchType | startPos << 8) + 1);\n+        Assert.check(startPos >= 0, \"Expected a valid start position\");\n+        this.exception_index = -(catchType + 1);\n+        this.exceptionStartPos = startPos;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotationPosition.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8236490\n+ * @summary If the exception class index in constant pool exceeds 256,\n+ *          the type annotations in conresponding catch expression should be compiled successfully.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T8236490\n+ *\/\n+\n+import toolbox.ToolBox;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.TestRunner;\n+\n+public class T8236490 extends TestRunner {\n+    ToolBox tb;\n+\n+    public T8236490() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new T8236490().runTests();\n+    }\n+\n+    @Test\n+    public void testTypeAnnotationInCatchExpression() throws Exception {\n+        \/\/ Generate a class which contains more than 256 constant pool entries\n+        \/\/ and the exception class index in constant pool exceeds 256.\n+        \/\/ The code is shown as below:\n+        \/\/ import java.lang.annotation.ElementType;\n+        \/\/ import java.lang.annotation.Target;\n+        \/\/ public class Test8236490 {\n+        \/\/     private class Test0 {}\n+        \/\/     ... many classes ...\n+        \/\/     private class Test299 {}\n+        \/\/     @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n+        \/\/     private @interface AnnotationTest {}\n+        \/\/     public void test() {\n+        \/\/         Test0 test0 = new Test0();\n+        \/\/         ... many variables ...\n+        \/\/         Test299 test299 = new Test299();\n+        \/\/         try {\n+        \/\/             System.out.println(\"Hello\");\n+        \/\/         } catch (@AnnotationTest Exception e) {}\n+        \/\/     }\n+        \/\/ }\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(\n+                \"import java.lang.annotation.ElementType;\\n\" +\n+                \"import java.lang.annotation.Target;\\n\" +\n+                \"public class Test8236490 {\");\n+        for (int i = 0; i < 300; i++) {\n+            stringBuilder.append(\"    private class Test\" + i + \" {}\\n\");\n+        }\n+        stringBuilder.append(\n+                \"    @Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\" +\n+                \"    private @interface AnnotationTest {}\" +\n+                \"    public void test() {\");\n+        for (int i = 0; i < 300; i++) {\n+            stringBuilder.append(\"        Test\" + i + \" test\" + i + \" = new Test\" + i + \"();\\n\");\n+        }\n+        stringBuilder.append(\n+                \"        try {\" +\n+                \"            System.out.println(\\\"Hello\\\");\" +\n+                \"        } catch (@AnnotationTest Exception e) {}\" +\n+                \"    }\" +\n+                \"}\");\n+\n+        new JavacTask(tb)\n+                .sources(stringBuilder.toString())\n+                .outdir(\".\")\n+                .run();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/8236490\/T8236490.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}