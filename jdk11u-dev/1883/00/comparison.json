{"files":[{"patch":"@@ -39,9 +39,2 @@\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateExpiredException;\n-import java.security.cert.CertificateNotYetValidException;\n-import java.security.cert.X509Certificate;\n-import java.util.Date;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n+import java.security.cert.*;\n+import java.util.*;\n@@ -250,1 +243,0 @@\n-    \/\/ Exception list to 90 days expiry policy\n@@ -279,1 +271,0 @@\n-        md = MessageDigest.getInstance(\"SHA-256\");\n@@ -281,0 +272,2 @@\n+        \/\/ verify integrity of cacerts\n+        md = MessageDigest.getInstance(\"SHA-256\");\n@@ -285,2 +278,2 @@\n-            System.err.println(\"ERROR: wrong checksum\\n\" + checksum);\n-            System.err.println(\"Expected checksum\\n\" + CHECKSUM);\n+            System.err.println(\"ERROR: wrong checksum\" + checksum);\n+            System.err.println(\"Expected checksum\" + CHECKSUM);\n@@ -299,0 +292,9 @@\n+        System.out.println(\"Trusted CA Certificate count: \" + ks.size());\n+\n+        \/\/ also ensure FINGERPRINT_MAP lists correct count\n+        if (FINGERPRINT_MAP.size() != COUNT) {\n+            atLeastOneFailed = true;\n+            System.err.println(\"ERROR: \" + FINGERPRINT_MAP.size()\n+                    + \" FINGERPRINT_MAP entries, should be \" + COUNT);\n+        }\n+\n@@ -312,1 +314,3 @@\n-            System.out.println(\"\\nVerifying \" + alias);\n+            System.out.println(\"Verifying \" + alias);\n+\n+            \/\/ Is cert trusted?\n@@ -315,2 +319,1 @@\n-                System.err.println(\"ERROR: \" + alias\n-                        + \" is not a trusted cert entry\");\n+                System.err.println(\"ERROR: \" + alias + \" is not a trusted cert entry\");\n@@ -318,0 +321,2 @@\n+\n+            \/\/ Does fingerprint match?\n@@ -323,1 +328,2 @@\n-            \/\/ Make sure cert can be self-verified\n+\n+            \/\/ Can cert be self-verified?\n@@ -328,2 +334,1 @@\n-                System.err.println(\"ERROR: cert cannot be verified:\"\n-                        + e.getMessage());\n+                System.err.println(\"ERROR: cert cannot be verified:\" + e.getMessage());\n@@ -332,1 +337,1 @@\n-            \/\/ Make sure cert is not expired or not yet valid\n+            \/\/ Is cert expired?\n@@ -338,1 +343,1 @@\n-                    System.err.println(\"ERROR: cert is expired\");\n+                    System.err.println(\"ERROR: cert is expired but not in EXPIRY_EXC_ENTRIES\");\n@@ -345,1 +350,1 @@\n-            \/\/ If cert is within 90 days of expiring, mark as failure so\n+            \/\/ If cert is within 90 days of expiring, mark as warning so\n@@ -350,3 +355,2 @@\n-                    atLeastOneFailed = true;\n-                    System.err.println(\"ERROR: cert \\\"\" + alias + \"\\\" expiry \\\"\"\n-                            + notAfter.toString() + \"\\\" will expire within 90 days\");\n+                    System.err.println(\"WARNING: cert \\\"\" + alias + \"\\\" expiry \\\"\"\n+                            + notAfter + \"\\\" will expire within 90 days\");\n@@ -358,1 +362,1 @@\n-            throw new Exception(\"At least one cacert test failed\");\n+            throw new RuntimeException(\"At least one cacert test failed\");\n@@ -363,1 +367,1 @@\n-            throws Exception {\n+            throws CertificateEncodingException {\n@@ -367,1 +371,1 @@\n-            return true;\n+            return false;\n@@ -369,1 +373,0 @@\n-        System.out.println(\"Checking fingerprint of \" + alias);\n","filename":"test\/jdk\/sun\/security\/lib\/cacerts\/VerifyCACerts.java","additions":32,"deletions":29,"binary":false,"changes":61,"status":"modified"}]}