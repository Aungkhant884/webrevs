{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -45,1 +47,3 @@\n-        try (ServerSocket ss = new ServerSocket(0)) {\n+        try (ServerSocket ss = new ServerSocket()) {\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            ss.bind(new InetSocketAddress(loopback, 0));\n@@ -58,0 +62,1 @@\n+        final InetAddress address = ss.getInetAddress();\n@@ -60,1 +65,3 @@\n-            sockets[i] = new Socket(\"localhost\", port);\n+            sockets[i] = address.isAnyLocalAddress()\n+                         ? new Socket(\"localhost\", port)\n+                         : new Socket(address, port);\n","filename":"test\/jdk\/java\/net\/Socket\/Streams.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.net.InetAddress;\n@@ -40,1 +41,2 @@\n-        FtpServer server = new FtpServer(0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        FtpServer server = new FtpServer(loopback, 0);\n@@ -43,1 +45,1 @@\n-        int port = server.getLocalPort();\n+        String authority = server.getAuthority();\n@@ -45,1 +47,1 @@\n-        URL url = new URL(\"ftp:\/\/localhost:\" + port + \"\/filedoesNotExist.txt\");\n+        URL url = new URL(\"ftp:\/\/\" + authority + \"\/filedoesNotExist.txt\");\n","filename":"test\/jdk\/sun\/net\/ftp\/FtpURLConnectionLeak.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -100,3 +101,3 @@\n-            server = new TestHttpServer (new AuthHeaderTest(), 1, 10, 0);\n-            System.out.println (\"Server: listening on port: \" + server.getLocalPort());\n-            client (\"http:\/\/localhost:\"+server.getLocalPort()+\"\/d1\/foo.html\");\n+            server = new TestHttpServer (new AuthHeaderTest(), 1, 10, loopback, 0);\n+            System.out.println (\"Server: listening on port: \" + server.getAuthority());\n+            client (\"http:\/\/\" + server.getAuthority() + \"\/d1\/foo.html\");\n","filename":"test\/jdk\/sun\/net\/www\/AuthHeaderTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,10 @@\n+    \/**\n+     * Creates an instance of an FTP server which will listen for incoming\n+     * connections on the specified port. If the port is set to 0, it will\n+     * automatically select an available ephemeral port.\n+     *\/\n+    public FtpServer(InetAddress addr, int port) throws IOException {\n+        listener = new ServerSocket();\n+        listener.bind(new InetSocketAddress(addr, port));\n+    }\n+\n@@ -103,0 +113,11 @@\n+    public String getAuthority() {\n+        InetAddress address = listener.getInetAddress();\n+        String hostaddr = address.isAnyLocalAddress()\n+            ? \"localhost\" : address.getHostAddress();\n+        if (hostaddr.indexOf(':') > -1) {\n+            hostaddr = \"[\" + hostaddr + \"]\";\n+        }\n+        return hostaddr + \":\" + getLocalPort();\n+    }\n+\n+\n","filename":"test\/jdk\/sun\/net\/www\/ftptest\/FtpServer.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -64,1 +66,7 @@\n-            client(\"http:\/\/localhost:\" + port + \"\/chunked\/\");\n+            String url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(server.getAddress().getAddress())\n+                .port(port)\n+                .path(\"\/chunked\/\")\n+                .build().toString();\n+            client(url);\n@@ -86,1 +94,2 @@\n-        HttpServer httpServer = HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer httpServer = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n","filename":"test\/jdk\/sun\/net\/www\/http\/ChunkedInputStream\/ChunkedEncodingTest.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n","filename":"test\/jdk\/sun\/net\/www\/http\/ChunkedInputStream\/ChunkedEncodingWithProgressMonitorTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -63,1 +65,7 @@\n-            URL url = new URL(\"http:\/\/localhost:\" + address.getPort() + \"\/testAvailable\/\");\n+            URL url = URIBuilder.newBuilder()\n+                      .scheme(\"http\")\n+                      .host(address.getAddress())\n+                      .port(address.getPort())\n+                      .path(\"\/testAvailable\/\")\n+                      .toURLUnchecked();\n+\n@@ -105,1 +113,3 @@\n-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress sockaddr = new InetSocketAddress(loopback, 0);\n+        httpServer = com.sun.net.httpserver.HttpServer.create(sockaddr, 0);\n","filename":"test\/jdk\/sun\/net\/www\/http\/ChunkedInputStream\/TestAvailable.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,2 +86,2 @@\n-    MultiThreadTest(int port, int requests) throws Exception {\n-        uri = \"http:\/\/localhost:\" + port + \"\/foo.html\";\n+    MultiThreadTest(String authority, int requests) throws Exception {\n+        uri = \"http:\/\/\" + authority + \"\/foo.html\";\n@@ -136,1 +136,3 @@\n-        ServerSocket ss = new ServerSocket(0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ServerSocket ss = new ServerSocket();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n@@ -143,1 +145,1 @@\n-                MultiThreadTest t = new MultiThreadTest(ss.getLocalPort(), requests);\n+                MultiThreadTest t = new MultiThreadTest(svr.getAuthority(), requests);\n@@ -212,0 +214,10 @@\n+        public String getAuthority() {\n+            InetAddress address = ss.getInetAddress();\n+            String hostaddr = address.isAnyLocalAddress()\n+                ? \"localhost\" : address.getHostAddress();\n+            if (hostaddr.indexOf(':') > -1) {\n+                hostaddr = \"[\" + hostaddr + \"]\";\n+            }\n+            return hostaddr + \":\" + ss.getLocalPort();\n+        }\n+\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/MultiThreadTest.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.net.InetAddress;\n@@ -57,1 +58,0 @@\n-    static final String LOCALHOST = \"localhost\";\n@@ -122,2 +122,1 @@\n-            String url = String.format(\"http:\/\/%s:%d\/test\/\",\n-                    LOCALHOST, server.getPort());\n+            String url = String.format(\"http:\/\/%s\/test\/\", server.getAuthority());\n@@ -325,0 +324,10 @@\n+        public String getAuthority() {\n+            InetAddress address = server.getAddress().getAddress();\n+            String hostaddr = address.isAnyLocalAddress()\n+                ? \"localhost\" : address.getHostAddress();\n+            if (hostaddr.indexOf(':') > -1) {\n+                hostaddr = \"[\" + hostaddr + \"]\";\n+            }\n+            return hostaddr + \":\" + getPort();\n+        }\n+\n@@ -334,0 +343,1 @@\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n@@ -335,1 +345,1 @@\n-                    new InetSocketAddress(0), 0);\n+                    new InetSocketAddress(loopback, 0), 0);\n@@ -345,1 +355,1 @@\n-            System.out.println(\"HttpServer: started on port \" + getPort());\n+            System.out.println(\"HttpServer: started on port \" + getAuthority());\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpURLConnection\/DigestAuth.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,3 +46,4 @@\n-        HttpServer s = HttpServer.create (new InetSocketAddress(0), 10);\n-        s.createContext (\"\/\", new HttpHandler () {\n-            public void handle (HttpExchange e) {\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer s = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+        s.createContext(\"\/\", new HttpHandler() {\n+            public void handle(HttpExchange e) {\n@@ -53,1 +54,1 @@\n-                    o.write (buf);\n+                    o.write(buf);\n@@ -94,2 +95,2 @@\n-            System.out.println (\"TEST FAILED\");\n-            throw new RuntimeException ();\n+            System.out.println(\"TEST FAILED\");\n+            throw new RuntimeException();\n@@ -97,1 +98,1 @@\n-            System.out.println (\"TEST OK\");\n+            System.out.println(\"TEST OK\");\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/6550798\/test.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -36,1 +37,1 @@\n-\n+import jdk.test.lib.net.URIBuilder;\n@@ -82,1 +83,3 @@\n-        ss = new ServerSocket(0);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ss = new ServerSocket();\n+        ss.bind(new InetSocketAddress(loopback, 0));\n@@ -89,1 +92,5 @@\n-        URL url = new URL(\"http:\/\/localhost:\" + ss.getLocalPort());\n+        URL url = URIBuilder.newBuilder()\n+            .scheme(\"http\")\n+            .host(ss.getInetAddress())\n+            .port(ss.getLocalPort())\n+            .toURL();\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/CloseOptionHeader.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}