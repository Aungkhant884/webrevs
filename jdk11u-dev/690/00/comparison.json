{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -87,5 +88,5 @@\n-    \/\/ Map<Provider,?> of the providers we already have verified\n-    \/\/ value == PROVIDER_VERIFIED is successfully verified\n-    \/\/ value is failure cause Exception in error case\n-    private static final Map<Provider, Object> verificationResults =\n-            new IdentityHashMap<>();\n+    \/\/ Map of the providers we already have verified.\n+    \/\/ If verified ok, value == PROVIDER_VERIFIED, otherwise\n+    \/\/ the cause of verification failure is stored as value.\n+    private static final Map<IdentityWrapper, Object>\n+        verificationResults = new ConcurrentHashMap<>();\n@@ -202,24 +203,31 @@\n-    static synchronized Exception getVerificationResult(Provider p) {\n-        Object o = verificationResults.get(p);\n-        if (o == PROVIDER_VERIFIED) {\n-            return null;\n-        } else if (o != null) {\n-            return (Exception)o;\n-        }\n-        if (verifyingProviders.get(p) != null) {\n-            \/\/ this method is static synchronized, must be recursion\n-            \/\/ return failure now but do not save the result\n-            return new NoSuchProviderException(\"Recursion during verification\");\n-        }\n-        try {\n-            verifyingProviders.put(p, Boolean.FALSE);\n-            URL providerURL = getCodeBase(p.getClass());\n-            verifyProvider(providerURL, p);\n-            \/\/ Verified ok, cache result\n-            verificationResults.put(p, PROVIDER_VERIFIED);\n-            return null;\n-        } catch (Exception e) {\n-            verificationResults.put(p, e);\n-            return e;\n-        } finally {\n-            verifyingProviders.remove(p);\n+    static Exception getVerificationResult(Provider p) {\n+        IdentityWrapper pKey = new IdentityWrapper(p);\n+        Object o = verificationResults.get(pKey);\n+        \/\/ no mapping found\n+        if (o == null) {\n+            synchronized (JceSecurity.class) {\n+                \/\/ check cache again in case the result is now available\n+                o = verificationResults.get(pKey);\n+                if (o == null) {\n+                    if (verifyingProviders.get(p) != null) {\n+                        \/\/ recursion; return failure now\n+                        return new NoSuchProviderException\n+                                (\"Recursion during verification\");\n+                    }\n+                    try {\n+                        verifyingProviders.put(p, Boolean.FALSE);\n+                        URL providerURL = getCodeBase(p.getClass());\n+                        verifyProvider(providerURL, p);\n+                        o = PROVIDER_VERIFIED;\n+                    } catch (Exception e) {\n+                        o = e;\n+                    } finally {\n+                        verifyingProviders.remove(p);\n+                    }\n+                    verificationResults.put(pKey, o);\n+                    if (debug != null) {\n+                        debug.println(\"Provider \" + p.getName() +\n+                                \" verification result: \" + o);\n+                    }\n+                }\n+            }\n@@ -227,0 +235,1 @@\n+        return (o == PROVIDER_VERIFIED? null : (Exception) o);\n@@ -394,0 +403,25 @@\n+\n+    private static final class IdentityWrapper {\n+\n+        final Provider obj;\n+\n+        IdentityWrapper(Provider obj) {\n+            this.obj = obj;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) {\n+                return true;\n+            }\n+            if (!(o instanceof IdentityWrapper)) {\n+                return false;\n+            }\n+            return this.obj == ((IdentityWrapper)o).obj;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return System.identityHashCode(obj);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurity.java.template","additions":64,"deletions":30,"binary":false,"changes":94,"status":"modified"}]}