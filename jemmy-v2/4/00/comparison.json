{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -737,8 +737,16 @@\n-        waitState((comp) -> {\n-            return (boolean) (queueTool.invokeSmoothly(\n-                    new QueueTool.QueueAction<Object>(\"checkComponent\") {\n-                @Override\n-                public final Object launch() throws Exception {\n-                    return state.checkComponent(comp);\n-                }\n-            }));\n+        waitState(new ComponentChooser() {\n+            @Override\n+            public boolean checkComponent(Component comp) {\n+                return (boolean) (queueTool.invokeSmoothly(\n+                        new QueueTool.QueueAction<Object>(\"checkComponent\") {\n+                            @Override\n+                            public final Object launch() throws Exception {\n+                                return state.checkComponent(comp);\n+                            }\n+                        }));\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return state.getDescription();\n+            }\n","filename":"src\/org\/netbeans\/jemmy\/operators\/Operator.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-Jemmy-MinorVersion: 9.0\n+Jemmy-MinorVersion: 10.0\n","filename":"src\/org\/netbeans\/jemmy\/version_info","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.testng.Assert.fail;\n-\n+import static java.util.Arrays.stream;\n@@ -34,2 +33,0 @@\n-import javax.swing.event.InternalFrameEvent;\n-import javax.swing.event.InternalFrameListener;\n@@ -40,0 +37,2 @@\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n@@ -44,0 +43,2 @@\n+import java.beans.PropertyVetoException;\n+\n@@ -48,0 +49,1 @@\n+    private UncloseableInternalFrame internalFrame;\n@@ -58,1 +60,1 @@\n-        JInternalFrame internalFrame = new JInternalFrame(\"JInternalFrameOperatorTest\", true, true, true, true);\n+        internalFrame = new UncloseableInternalFrame(\"JInternalFrameOperatorTest\", true, true, true, true);\n@@ -79,38 +81,0 @@\n-        InternalFrameListener listener = new InternalFrameListener() {\n-\n-            @Override\n-            public void internalFrameOpened(InternalFrameEvent e) {\n-            }\n-\n-            @Override\n-            public void internalFrameIconified(InternalFrameEvent e) {\n-            }\n-\n-            @Override\n-            public void internalFrameDeiconified(InternalFrameEvent e) {\n-            }\n-\n-            @Override\n-            public void internalFrameDeactivated(InternalFrameEvent e) {\n-            }\n-\n-            @Override\n-            public void internalFrameClosing(InternalFrameEvent e) {\n-                try {\n-                    this.wait(80000);\n-                } catch (InterruptedException e1) {\n-                    e1.printStackTrace();\n-                }\n-            }\n-\n-            @Override\n-            public void internalFrameClosed(InternalFrameEvent e) {\n-            }\n-\n-            @Override\n-            public void internalFrameActivated(InternalFrameEvent e) {\n-            }\n-        };\n-\n-        \/\/ Making not to close the fame for 1 minute and expecting TimeoutExpiredException\n-        \/\/ from waitClosed()\n@@ -118,1 +82,3 @@\n-            internalFrameOper.addInternalFrameListener(listener);\n+            \/\/trying to close the uncloseable frame\n+            \/\/expected to fail by timeout, hence decreasing timeout\n+            internalFrameOper.getTimeouts().setTimeout(\"ComponentOperator.WaitStateTimeout\", 5000);\n@@ -120,0 +86,1 @@\n+            \/\/that would mean that the exception is not thrown\n@@ -122,0 +89,6 @@\n+            \/\/make sure the exception is coming from the right place\n+            assertTrue(stream(e.getStackTrace()).anyMatch(ste ->\n+                    ste.getClassName().equals(JInternalFrameOperator.class.getName()) &&\n+                    ste.getMethodName().equals(\"waitClosed\")));\n+            System.out.println(\"This exception has been caught, as expected:\");\n+            e.printStackTrace(System.out);\n@@ -123,1 +96,3 @@\n-            internalFrameOper.removeInternalFrameListener(listener);\n+            \/\/ Really closing the frame this time\n+            internalFrame.done = true;\n+            internalFrameOper.close();\n@@ -125,3 +100,0 @@\n-\n-        \/\/ Really closing the frame\n-        internalFrameOper.close();\n@@ -130,0 +102,12 @@\n+    private static class UncloseableInternalFrame extends JInternalFrame {\n+        private boolean done = false;\n+        public UncloseableInternalFrame(String title, boolean resizable, boolean closable, boolean maximizable, boolean iconifiable) {\n+            super(title, resizable, closable, maximizable, iconifiable);\n+        }\n+\n+        @Override\n+        public void setClosed(boolean b) throws PropertyVetoException {\n+            \/\/unless done with the test, we do not want this frame to close ever\n+            super.setClosed(done && b);\n+        }\n+    }\n","filename":"test\/org\/netbeans\/jemmy\/operators\/JInternalFrameOperatorCloseTest.java","additions":33,"deletions":49,"binary":false,"changes":82,"status":"modified"}]}