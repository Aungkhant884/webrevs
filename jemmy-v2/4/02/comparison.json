{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -737,8 +737,16 @@\n-        waitState((comp) -> {\n-            return (boolean) (queueTool.invokeSmoothly(\n-                    new QueueTool.QueueAction<Object>(\"checkComponent\") {\n-                @Override\n-                public final Object launch() throws Exception {\n-                    return state.checkComponent(comp);\n-                }\n-            }));\n+        waitState(new ComponentChooser() {\n+            @Override\n+            public boolean checkComponent(Component comp) {\n+                return (boolean) (queueTool.invokeSmoothly(\n+                        new QueueTool.QueueAction<Object>(\"checkComponent\") {\n+                            @Override\n+                            public final Object launch() throws Exception {\n+                                return state.checkComponent(comp);\n+                            }\n+                        }));\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return state.getDescription();\n+            }\n","filename":"src\/org\/netbeans\/jemmy\/operators\/Operator.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-Jemmy-MinorVersion: 9.0\n+Jemmy-MinorVersion: 10.0\n","filename":"src\/org\/netbeans\/jemmy\/version_info","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.testng.Assert.fail;\n-\n+import static java.util.Arrays.stream;\n@@ -34,2 +33,0 @@\n-import javax.swing.event.InternalFrameEvent;\n-import javax.swing.event.InternalFrameListener;\n@@ -40,0 +37,7 @@\n+\n+import static org.netbeans.jemmy.drivers.DriverManager.WINDOW_DRIVER_ID;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+import org.netbeans.jemmy.drivers.DriverManager;\n+import org.netbeans.jemmy.drivers.WindowDriver;\n@@ -44,0 +48,2 @@\n+import java.beans.PropertyVetoException;\n+\n@@ -49,0 +55,1 @@\n+    private WindowDriver oldDriver;\n@@ -67,14 +74,3 @@\n-        internalFrameOper = new JInternalFrameOperator(frameOper);\n-        internalFrameOper.setVerification(true);\n-    }\n-\n-    @AfterMethod\n-    protected void tearDown() throws Exception {\n-        frameOper.setVisible(false);\n-        frameOper.dispose();\n-    }\n-\n-    @Test(dataProvider = \"availableLookAndFeels\", dataProviderClass = LookAndFeelProvider.class)\n-    public void testClose(String lookAndFeel) throws Exception {\n-        InternalFrameListener listener = new InternalFrameListener() {\n-\n+        \/\/override windows driver for the operator to not do anything to close\n+        oldDriver = DriverManager.getWindowDriver(JInternalFrameOperator.class);\n+        DriverManager.setDriver(WINDOW_DRIVER_ID, new WindowDriver() {\n@@ -82,1 +78,2 @@\n-            public void internalFrameOpened(InternalFrameEvent e) {\n+            public void activate(ComponentOperator oper) {\n+                oldDriver.activate(oper);\n@@ -86,1 +83,2 @@\n-            public void internalFrameIconified(InternalFrameEvent e) {\n+            public void requestClose(ComponentOperator oper) {\n+                \/\/do nothing here\n@@ -90,1 +88,2 @@\n-            public void internalFrameDeiconified(InternalFrameEvent e) {\n+            public void requestCloseAndThenHide(ComponentOperator oper) {\n+                \/\/do nothing here\n@@ -94,1 +93,2 @@\n-            public void internalFrameDeactivated(InternalFrameEvent e) {\n+            public void close(ComponentOperator oper) {\n+                \/\/do nothing here\n@@ -98,6 +98,2 @@\n-            public void internalFrameClosing(InternalFrameEvent e) {\n-                try {\n-                    this.wait(80000);\n-                } catch (InterruptedException e1) {\n-                    e1.printStackTrace();\n-                }\n+            public void move(ComponentOperator oper, int x, int y) {\n+                oldDriver.move(oper, x, y);\n@@ -107,1 +103,2 @@\n-            public void internalFrameClosed(InternalFrameEvent e) {\n+            public void resize(ComponentOperator oper, int width, int height) {\n+                oldDriver.resize(oper, width, height);\n@@ -109,0 +106,4 @@\n+        }, JInternalFrameOperator.class);\n+        internalFrameOper = new JInternalFrameOperator(frameOper);\n+        internalFrameOper.setVerification(true);\n+    }\n@@ -110,4 +111,6 @@\n-            @Override\n-            public void internalFrameActivated(InternalFrameEvent e) {\n-            }\n-        };\n+    @AfterMethod\n+    protected void tearDown() throws Exception {\n+        frameOper.setVisible(false);\n+        frameOper.dispose();\n+        DriverManager.setDriver(WINDOW_DRIVER_ID, oldDriver, JInternalFrameOperator.class);\n+    }\n@@ -115,2 +118,2 @@\n-        \/\/ Making not to close the fame for 1 minute and expecting TimeoutExpiredException\n-        \/\/ from waitClosed()\n+    @Test(dataProvider = \"availableLookAndFeels\", dataProviderClass = LookAndFeelProvider.class)\n+    public void testClose(String lookAndFeel) throws Exception {\n@@ -118,1 +121,3 @@\n-            internalFrameOper.addInternalFrameListener(listener);\n+            \/\/trying to close the uncloseable frame\n+            \/\/expected to fail by timeout, hence decreasing timeout\n+            internalFrameOper.getTimeouts().setTimeout(\"ComponentOperator.WaitStateTimeout\", 5000);\n@@ -120,0 +125,1 @@\n+            \/\/that would mean that the exception is not thrown\n@@ -122,2 +128,6 @@\n-        } finally {\n-            internalFrameOper.removeInternalFrameListener(listener);\n+            \/\/make sure the exception is coming from the right place\n+            assertTrue(stream(e.getStackTrace()).anyMatch(ste ->\n+                    ste.getClassName().equals(JInternalFrameOperator.class.getName()) &&\n+                    ste.getMethodName().equals(\"waitClosed\")));\n+            System.out.println(\"This exception has been caught, as expected:\");\n+            e.printStackTrace(System.out);\n@@ -125,3 +135,0 @@\n-\n-        \/\/ Really closing the frame\n-        internalFrameOper.close();\n@@ -129,1 +136,0 @@\n-\n","filename":"test\/org\/netbeans\/jemmy\/operators\/JInternalFrameOperatorCloseTest.java","additions":49,"deletions":43,"binary":false,"changes":92,"status":"modified"}]}