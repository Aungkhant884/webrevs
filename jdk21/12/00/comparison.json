{"files":[{"patch":"@@ -341,2 +341,4 @@\n-typedef Content<JfrStringPool, &JfrStringPool::write> StringPool;\n-typedef WriteCheckpointEvent<StringPool> WriteStringPool;\n+typedef Content<JfrStringPool, &JfrStringPool::flush> FlushStringPoolFunctor;\n+typedef Content<JfrStringPool, &JfrStringPool::write> WriteStringPoolFunctor;\n+typedef WriteCheckpointEvent<FlushStringPoolFunctor> FlushStringPool;\n+typedef WriteCheckpointEvent<WriteStringPoolFunctor> WriteStringPool;\n@@ -345,3 +347,3 @@\n-  StringPool sp(string_pool);\n-  WriteStringPool wsp(chunkwriter, sp, TYPE_STRING);\n-  return invoke(wsp);\n+  FlushStringPoolFunctor fspf(string_pool);\n+  FlushStringPool fsp(chunkwriter, fspf, TYPE_STRING);\n+  return invoke(fsp);\n@@ -351,2 +353,2 @@\n-  StringPool sp(string_pool);\n-  WriteStringPool wsp(chunkwriter, sp, TYPE_STRING);\n+  WriteStringPoolFunctor wspf(string_pool);\n+  WriteStringPool wsp(chunkwriter, wspf, TYPE_STRING);\n@@ -464,1 +466,0 @@\n-  _string_pool.clear();\n@@ -478,1 +479,0 @@\n-  _string_pool.clear();\n@@ -486,0 +486,1 @@\n+  _string_pool.clear();\n@@ -570,3 +571,0 @@\n-  if (_string_pool.is_modified()) {\n-    write_stringpool(_string_pool, _chunkwriter);\n-  }\n@@ -590,3 +588,0 @@\n-  if (_string_pool.is_modified()) {\n-    write_stringpool(_string_pool, _chunkwriter);\n-  }\n@@ -606,0 +601,1 @@\n+  write_stringpool(_string_pool, _chunkwriter);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderService.cpp","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -211,0 +211,7 @@\n+template <typename T>\n+class ReinitializationOp {\n+ public:\n+  typedef T Type;\n+  bool process(Type* t);\n+};\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -178,0 +178,9 @@\n+template <typename T>\n+bool ReinitializationOp<T>::process(T* t) {\n+  assert(t != nullptr, \"invariant\");\n+  assert(t->identity() != nullptr, \"invariant\");\n+  t->reinitialize();\n+  t->release();\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.inline.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -80,3 +80,3 @@\n-                                               string_pool_cache_count, \/\/ cache limit\n-                                               string_pool_cache_count, \/\/ cache preallocate count\n-                                               false, \/\/ preallocate_to_free_list (== preallocate directly to live list)\n+                                               0,\n+                                               0, \/\/ cache preallocate count\n+                                               false,\n@@ -84,0 +84,7 @@\n+\n+  \/\/ preallocate buffer count to each of the epoch live lists\n+  for (size_t i = 0; i < string_pool_cache_count * 2; ++i) {\n+    Buffer* const buffer = mspace_allocate(string_pool_buffer_size, _mspace);\n+    _mspace->add_to_live_list(buffer, i % 2 == 0);\n+  }\n+  assert(_mspace->free_list_is_empty(), \"invariant\");\n@@ -98,5 +105,1 @@\n-  if (buffer->transient()) {\n-    buffer->set_retired();\n-  } else {\n-    buffer->release();\n-  }\n+  buffer->release();\n@@ -183,0 +186,1 @@\n+typedef ReinitializationOp<JfrStringPoolBuffer> ReinitializationOperation;\n@@ -185,0 +189,1 @@\n+typedef CompositeOperation<ExclusiveWriteOperation, ReinitializationOperation> WriteReinitializeOperation;\n@@ -192,1 +197,1 @@\n-  ReleaseOperation ro(_mspace, _mspace->live_list());\n+  ReleaseOperation ro(_mspace, _mspace->live_list(true)); \/\/ previous epoch list\n@@ -195,1 +200,13 @@\n-  process_live_list(wro, _mspace);\n+  process_live_list(wro, _mspace, true); \/\/ previous epoch list\n+  return wo.processed();\n+}\n+\n+size_t JfrStringPool::flush() {\n+  Thread* const thread = Thread::current();\n+  WriteOperation wo(_chunkwriter, thread);\n+  ExclusiveWriteOperation ewo(wo);\n+  ReinitializationOperation rio;\n+  WriteReinitializeOperation wro(&ewo, &rio);\n+  assert(_mspace->free_list_is_empty(), \"invariant\");\n+  assert(_mspace->live_list_is_nonempty(), \"invariant\");\n+  process_live_list(wro, _mspace); \/\/ current epoch list\n@@ -203,1 +220,1 @@\n-  ReleaseOperation ro(_mspace, _mspace->live_list());\n+  ReleaseOperation ro(_mspace, _mspace->live_list(true)); \/\/ previous epoch list\n@@ -206,1 +223,1 @@\n-  process_live_list(discard_op, _mspace);\n+  process_live_list(discard_op, _mspace, true); \/\/ previous epoch list\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.cpp","additions":29,"deletions":12,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-typedef JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer> > JfrStringPoolMspace;\n+typedef JfrMemorySpace<JfrStringPool, JfrMspaceRetrieval, JfrLinkedList<JfrStringPoolBuffer>, JfrLinkedList<JfrStringPoolBuffer>, true > JfrStringPoolMspace;\n@@ -48,1 +48,0 @@\n-  size_t write();\n@@ -50,0 +49,3 @@\n+  size_t flush();\n+  size_t write();\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stringpool\/jfrStringPool.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}