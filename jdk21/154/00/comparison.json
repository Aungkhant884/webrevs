{"files":[{"patch":"@@ -393,0 +393,7 @@\n+     * @implSpec The default implementation throws a\n+     * {@code NullPointerException} if {@code locale} is {@code null}\n+     * either during the creation of the {@code MessageFormat} object or later\n+     * when {@code format()} is called by a {@code MessageFormat}\n+     * instance with a null locale and the implementation utilizes a\n+     * locale-dependent subformat.\n+     *\n@@ -397,1 +404,2 @@\n-     *            {@code null}\n+     *            {@code null} or {@code locale} is {@code null} and the\n+     *            implementation uses a locale-dependent subformat.\n@@ -846,1 +854,4 @@\n-     * @throws    NullPointerException if {@code result} is {@code null}\n+     * @throws    NullPointerException if {@code result} is {@code null} or\n+     *            if the {@code MessageFormat} instance that calls this method\n+     *            has locale set to null, and the implementation\n+     *            uses a locale-dependent subformat.\n@@ -892,1 +903,4 @@\n-     * @throws    NullPointerException if {@code result} is {@code null}\n+     * @throws    NullPointerException if {@code result} is {@code null} or\n+     *            if the {@code MessageFormat} instance that calls this method\n+     *            has locale set to null, and the implementation\n+     *            uses a locale-dependent subformat.\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @summary Confirm that a bug in an error message has been fixed.\n- * @bug 6481179\n- *\/\n-\n-import java.text.MessageFormat;\n-import java.text.ParseException;\n-\n-public class Bug6481179 {\n-\n-    public static void main(String[] args) {\n-        boolean err = false;\n-\n-        try {\n-            MessageFormat.format(\"Testdata {1,invalid_format_type}\",\n-                                 new Object[] { \"val0\", \"val1\" });\n-\n-            System.err.println(\"Error: IllegalArgumentException should be thrown.\");\n-            err = true;\n-        }\n-        catch (IllegalArgumentException e) {\n-            String expected = \"unknown format type: invalid_format_type\";\n-            String got = e.getMessage();\n-\n-            if (!expected.equals(got)) {\n-                System.err.println(\"Error: Unexpected error message: \" + got);\n-                err = true;\n-            }\n-        }\n-        catch (Exception e) {\n-            System.err.println(\"Error: Unexpected exception was thrown: \" + e);\n-            err = true;\n-        }\n-\n-        if (err) {\n-            throw new RuntimeException(\"Failed.\");\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/Bug6481179.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Validate some exceptions in MessageFormat\n+ * @bug 6481179 8039165\n+ * @run junit MessageFormatExceptions\n+ *\/\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class MessageFormatExceptions {\n+\n+    \/\/ MessageFormat should throw NPE when constructed with a null pattern\n+    @Test\n+    public void nullPatternTest() {\n+        assertThrows(NullPointerException.class, () -> new MessageFormat(null));\n+        assertThrows(NullPointerException.class, () -> new MessageFormat(null, Locale.US));\n+        assertThrows(NullPointerException.class,\n+                () -> MessageFormat.format(null, new Object[] { \"val0\", \"val1\" }));\n+    }\n+\n+    \/\/ 8039165: When MessageFormat is constructed with a null locale a NPE\n+    \/\/ can potentially be thrown depending on the subformat created. Either\n+    \/\/ during the creation of the object itself, or later when format() is called.\n+    \/\/ The following are some examples.\n+    @Test\n+    public void nullLocaleTest() {\n+        \/\/ Fails when constructor invokes applyPattern()\n+        assertThrows(NullPointerException.class,\n+                () -> new MessageFormat(\"{0, date}\", null));\n+        \/\/ Fail when constructor invokes applyPattern()\n+        assertThrows(NullPointerException.class,\n+                () -> new MessageFormat(\"{0, number}\", null));\n+        \/\/ Fail when object calls format()\n+        assertThrows(NullPointerException.class,\n+                () -> new MessageFormat(\"{0}\", null).format(new Object[]{42}));\n+        \/\/ Fail when object calls format(), but locale is set via .setLocale()\n+        MessageFormat msgFmt = new MessageFormat(\"{0}\");\n+        msgFmt.setLocale(null);\n+        assertThrows(NullPointerException.class, () -> msgFmt.format(new Object[]{42}));\n+        \/\/ Does not always fail if locale is null\n+        assertDoesNotThrow(() ->\n+                new MessageFormat(\"{0}\", null).format(new Object[]{\"hello\"}));\n+\n+    }\n+\n+    \/\/ 6481179: Invalid format type should be provided in error message of IAE\n+    @Test\n+    public void formatMsgTest() {\n+        IllegalArgumentException iae = assertThrows(IllegalArgumentException.class,\n+                () -> MessageFormat.format(\"Testdata {1,invalid_format_type}\", new Object[] { \"val0\", \"val1\" }));\n+        assertEquals(\"unknown format type: invalid_format_type\", iae.getMessage());\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/MessageFormat\/MessageFormatExceptions.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}