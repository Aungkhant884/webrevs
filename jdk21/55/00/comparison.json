{"files":[{"patch":"@@ -628,4 +628,7 @@\n-     * Wait for all threads in this task scope to finish or the task scope to shut down.\n-     * This method waits until all threads started in this task scope finish execution,\n-     * the {@link #shutdown() shutdown} method is invoked to shut down the task scope,\n-     * or the current thread is {@linkplain Thread#interrupt() interrupted}.\n+     * Wait for all subtasks started in this task scope to finish or the task scope to\n+     * shut down.\n+     *\n+     * <p> This method waits for all subtasks by waiting for all threads {@linkplain\n+     * #fork(Callable) started} in this task scope to finish execution. It stops waiting\n+     * when all threads finish, the task scope is {@linkplain #shutdown() shut down}, or\n+     * the current thread is {@linkplain Thread#interrupt() interrupted}.\n@@ -655,5 +658,8 @@\n-     * Wait for all threads in this task scope to finish or the task scope to shut down,\n-     * up to the given deadline. This method waits until all threads started in the task\n-     * scope finish execution, the {@link #shutdown() shutdown} method is invoked to\n-     * shut down the task scope, the current thread is {@linkplain Thread#interrupt()\n-     * interrupted}, or the deadline is reached.\n+     * Wait for all subtasks started in this task scope to finish or the task scope to\n+     * shut down, up to the given deadline.\n+     *\n+     * <p> This method waits for all subtasks by waiting for all threads {@linkplain\n+     * #fork(Callable) started} in this task scope to finish execution. It stops waiting\n+     * when all threads finish, the task scope is {@linkplain #shutdown() shut down}, the\n+     * deadline is reached, or the current thread is {@linkplain Thread#interrupt()\n+     * interrupted}.\n@@ -953,1 +959,1 @@\n-            return Objects.toIdentityString(this ) + stateAsString;\n+            return Objects.toIdentityString(this) + stateAsString;\n@@ -960,1 +966,1 @@\n-     * invokes the {@linkplain #shutdown() shutdown} method to interrupt unfinished threads\n+     * {@linkplain #shutdown() shuts down} the task scope to interrupt unfinished threads\n@@ -968,0 +974,4 @@\n+     * @apiNote This class implements a policy to shut down the task scope when a subtask\n+     * completes successfully. There shouldn't be any need to directly shut down the task\n+     * scope with the {@link #shutdown() shutdown} method.\n+     *\n@@ -1020,2 +1030,0 @@\n-            super.handleComplete(subtask);\n-\n@@ -1041,2 +1049,12 @@\n-         * {@inheritDoc}\n-         * @return this task scope\n+         * Wait for a subtask started in this task scope to complete {@linkplain\n+         * Subtask.State#SUCCESS successfully} or all subtasks to complete.\n+         *\n+         * <p> This method waits for all subtasks by waiting for all threads {@linkplain\n+         * #fork(Callable) started} in this task scope to finish execution. It stops waiting\n+         * when all threads finish, a subtask completes successfully, or the current\n+         * thread is {@linkplain Thread#interrupt() interrupted}. It also stops waiting\n+         * if the {@link #shutdown() shutdown} method is invoked directly to shut down\n+         * this task scope.\n+         *\n+         * <p> This method may only be invoked by the task scope owner.\n+         *\n@@ -1053,2 +1071,13 @@\n-         * {@inheritDoc}\n-         * @return this task scope\n+         * Wait for a subtask started in this task scope to complete {@linkplain\n+         * Subtask.State#SUCCESS successfully} or all subtasks to complete, up to the\n+         * given deadline.\n+         *\n+         * <p> This method waits for all subtasks by waiting for all threads {@linkplain\n+         * #fork(Callable) started} in this task scope to finish execution. It stops waiting\n+         * when all threads finish, a subtask completes successfully, the deadline is\n+         * reached, or the current thread is {@linkplain Thread#interrupt() interrupted}.\n+         * It also stops waiting if the {@link #shutdown() shutdown} method is invoked\n+         * directly to shut down this task scope.\n+         *\n+         * <p> This method may only be invoked by the task scope owner.\n+         *\n@@ -1076,2 +1105,2 @@\n-         * @throws IllegalStateException if the handleComplete method was not invoked with\n-         * a completed subtask, or the task scope owner did not join after forking\n+         * @throws IllegalStateException if no subtasks completed or the task scope owner\n+         * did not join after forking\n@@ -1098,2 +1127,2 @@\n-         * @throws IllegalStateException if the handleComplete method was not invoked with\n-         * a completed subtask, or the task scope owner did not join after forking\n+         * @throws IllegalStateException if no subtasks completed or the task scope owner\n+         * did not join after forking\n@@ -1128,2 +1157,2 @@\n-     * {@linkplain Subtask.State#FAILED fail}. Once captured, it invokes the {@linkplain\n-     * #shutdown() shutdown} method to interrupt unfinished threads and wakeup the task\n+     * {@linkplain Subtask.State#FAILED fail}. Once captured, it {@linkplain #shutdown()\n+     * shuts down} the task scope to interrupt unfinished threads and wakeup the task\n@@ -1137,0 +1166,4 @@\n+     * @apiNote This class implements a policy to shut down the task scope when a subtask\n+     * fails. There shouldn't be any need to directly shut down the task scope with the\n+     * {@link #shutdown() shutdown} method.\n+     *\n@@ -1184,1 +1217,0 @@\n-            super.handleComplete(subtask);\n@@ -1193,2 +1225,11 @@\n-         * {@inheritDoc}\n-         * @return this task scope\n+         * Wait for all subtasks started in this task scope to complete or for a subtask\n+         * to {@linkplain Subtask.State#FAILED fail}.\n+         *\n+         * <p> This method waits for all subtasks by waiting for all threads {@linkplain\n+         * #fork(Callable) started} in this task scope to finish execution. It stops waiting\n+         * when all threads finish, a subtask fails, or the current thread is {@linkplain\n+         * Thread#interrupt() interrupted}. It also stops waiting if the {@link #shutdown()\n+         * shutdown} method is invoked directly to shut down this task scope.\n+         *\n+         * <p> This method may only be invoked by the task scope owner.\n+         *\n@@ -1205,2 +1246,12 @@\n-         * {@inheritDoc}\n-         * @return this task scope\n+         * Wait for all subtasks started in this task scope to complete or for a subtask\n+         * to {@linkplain Subtask.State#FAILED fail}, up to the given deadline.\n+         *\n+         * <p> This method waits for all subtasks by waiting for all threads {@linkplain\n+         * #fork(Callable) started} in this task scope to finish execution. It stops waiting\n+         * when all threads finish, a subtask fails, the deadline is reached, or the current\n+         * thread is {@linkplain Thread#interrupt() interrupted}. It also stops waiting\n+         * if the {@link #shutdown() shutdown} method is invoked directly to shut down\n+         * this task scope.\n+         *\n+         * <p> This method may only be invoked by the task scope owner.\n+         *\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":79,"deletions":28,"binary":false,"changes":107,"status":"modified"}]}