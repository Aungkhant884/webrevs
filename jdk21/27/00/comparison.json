{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,3 @@\n-                             MutableSpace* m, GenerationCounters* gc) :\n-   _object_space(m) {\n-\n+                             MutableSpace* m, GenerationCounters* gc)\n+  : _last_used_in_bytes(0), _object_space(m)\n+{\n@@ -58,2 +58,3 @@\n-                                   PerfData::U_Bytes,\n-                                   _object_space->capacity_in_bytes(), CHECK);\n+                                                 PerfData::U_Bytes,\n+                                                 _object_space->capacity_in_bytes(),\n+                                                 CHECK);\n@@ -63,2 +64,2 @@\n-                                    new MutableSpaceUsedHelper(_object_space),\n-                                    CHECK);\n+                                             new UsedHelper(this),\n+                                             CHECK);\n@@ -76,2 +77,0 @@\n-static volatile size_t last_used_in_bytes = 0;\n-\n@@ -80,1 +79,1 @@\n-  Atomic::store(&last_used_in_bytes, new_used);\n+  Atomic::store(&_last_used_in_bytes, new_used);\n@@ -84,1 +83,1 @@\n-jlong MutableSpaceUsedHelper::take_sample() {\n+jlong SpaceCounters::UsedHelper::take_sample() {\n@@ -91,1 +90,2 @@\n-    Atomic::store(&last_used_in_bytes, _m->used_in_bytes());\n+    size_t new_used = _counters->_object_space->used_in_bytes();\n+    Atomic::store(&_counters->_last_used_in_bytes, new_used);\n@@ -94,1 +94,1 @@\n-  return Atomic::load(&last_used_in_bytes);\n+  return Atomic::load(&_counters->_last_used_in_bytes);\n","filename":"src\/hotspot\/share\/gc\/parallel\/spaceCounters.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+  volatile size_t    _last_used_in_bytes;\n@@ -50,0 +51,2 @@\n+  class UsedHelper;\n+\n@@ -71,3 +74,3 @@\n-class MutableSpaceUsedHelper: public PerfLongSampleHelper {\n-  private:\n-    MutableSpace* _m;\n+class SpaceCounters::UsedHelper: public PerfLongSampleHelper {\n+ private:\n+  SpaceCounters* _counters;\n@@ -75,2 +78,2 @@\n-  public:\n-    MutableSpaceUsedHelper(MutableSpace* m) : _m(m) { }\n+ public:\n+  UsedHelper(SpaceCounters* counters) : _counters(counters) { }\n@@ -78,1 +81,1 @@\n-    jlong take_sample() override;\n+  jlong take_sample() override;\n","filename":"src\/hotspot\/share\/gc\/parallel\/spaceCounters.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,3 @@\n-                               ContiguousSpace* s, GenerationCounters* gc) :\n-   _space(s) {\n-\n+                               ContiguousSpace* s, GenerationCounters* gc)\n+  : _last_used_in_bytes(0), _space(s)\n+{\n@@ -48,2 +48,4 @@\n-    _max_capacity = PerfDataManager::create_variable(SUN_GC, cname, PerfData::U_Bytes,\n-                                     (jlong)max_size, CHECK);\n+    _max_capacity = PerfDataManager::create_variable(SUN_GC, cname,\n+                                                     PerfData::U_Bytes,\n+                                                     (jlong)max_size,\n+                                                     CHECK);\n@@ -54,1 +56,2 @@\n-                                                 _space->capacity(), CHECK);\n+                                                 _space->capacity(),\n+                                                 CHECK);\n@@ -58,2 +61,2 @@\n-                                    new ContiguousSpaceUsedHelper(_space),\n-                                    CHECK);\n+                                             new UsedHelper(this),\n+                                             CHECK);\n@@ -75,2 +78,0 @@\n-static volatile size_t last_used_in_bytes = 0;\n-\n@@ -79,1 +80,1 @@\n-  Atomic::store(&last_used_in_bytes, new_used);\n+  Atomic::store(&_last_used_in_bytes, new_used);\n@@ -88,1 +89,1 @@\n-jlong ContiguousSpaceUsedHelper::take_sample(){\n+jlong CSpaceCounters::UsedHelper::take_sample(){\n@@ -95,1 +96,2 @@\n-    Atomic::store(&last_used_in_bytes, _space->used());\n+    size_t new_used = _counters->_space->used();\n+    Atomic::store(&_counters->_last_used_in_bytes, new_used);\n@@ -98,1 +100,1 @@\n-  return Atomic::load(&last_used_in_bytes);\n+  return Atomic::load(&_counters->_last_used_in_bytes);\n","filename":"src\/hotspot\/share\/gc\/serial\/cSpaceCounters.cpp","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+  volatile size_t    _last_used_in_bytes;\n@@ -50,0 +51,2 @@\n+  class UsedHelper;\n+\n@@ -64,3 +67,3 @@\n-class ContiguousSpaceUsedHelper : public PerfLongSampleHelper {\n-  private:\n-    ContiguousSpace* _space;\n+class CSpaceCounters::UsedHelper : public PerfLongSampleHelper {\n+ private:\n+  CSpaceCounters* _counters;\n@@ -68,2 +71,2 @@\n-  public:\n-    ContiguousSpaceUsedHelper(ContiguousSpace* space) : _space(space) { }\n+ public:\n+  UsedHelper(CSpaceCounters* counters) : _counters(counters) { }\n@@ -71,1 +74,1 @@\n-    jlong take_sample() override;\n+  jlong take_sample() override;\n","filename":"src\/hotspot\/share\/gc\/serial\/cSpaceCounters.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc;\n+\n+\/**\n+ * @test id=Serial\n+ * @requires vm.gc.Serial\n+ * @summary Verify the expected space counters exist.\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.management\/sun.management\n+ * @modules jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -XX:+UseSerialGC -XX:+UsePerfData gc.TestSpaceCounters\n+ *\/\n+\n+\/**\n+ * @test id=Parallel\n+ * @requires vm.gc.Parallel\n+ * @summary Verify the expected space counters exist.\n+ * @modules java.base\/jdk.internal.misc\n+ * @modules java.management\/sun.management\n+ * @modules jdk.internal.jvmstat\/sun.jvmstat.monitor\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -XX:+UseParallelGC -XX:+UsePerfData gc.TestSpaceCounters\n+ *\/\n+\n+import gc.testlibrary.Helpers;\n+import gc.testlibrary.PerfCounter;\n+import gc.testlibrary.PerfCounters;\n+import sun.jvmstat.monitor.MonitorException;\n+\n+public class TestSpaceCounters {\n+    private static final String GENERATION_NAMESPACE = \"sun.gc.generation.\";\n+\n+    \/\/ Each space has these counters.\n+    private static final String[] COUNTER_NAMES = {\n+        \"maxCapacity\", \"capacity\", \"used\", \"initCapacity\" };\n+\n+    private static String counterName(String name, int generation, int space) {\n+        return GENERATION_NAMESPACE + generation + \".space.\" + space + \".\" + name;\n+    }\n+\n+    private static PerfCounter counter(String name, int generation, int space) {\n+        String cname = counterName(name, generation, space);\n+        try {\n+            return PerfCounters.findByName(cname);\n+        } catch (MonitorException e) {\n+            throw new RuntimeException(e.toString());\n+        }\n+    }\n+\n+    private static long value(String name, int generation, int space) {\n+        PerfCounter pc = counter(name, generation, space);\n+        return pc.longValue();\n+    }\n+\n+    private static void checkCounters(int generation, int space) {\n+        for (int i = 0; i < COUNTER_NAMES.length; ++i) {\n+            value(COUNTER_NAMES[i], generation, space);\n+        }\n+    }\n+\n+    private static final int YOUNG_GENERATION = 0;\n+    private static final int OLD_GENERATION = 1;\n+\n+    public static void main(String[] args) {\n+        \/\/ Young Generation has 3 spaces - eden, and two survivor spaces.\n+        checkCounters(YOUNG_GENERATION, 0);\n+        checkCounters(YOUNG_GENERATION, 1);\n+        checkCounters(YOUNG_GENERATION, 2);\n+        \/\/ Old Generation has 1 space.\n+        checkCounters(OLD_GENERATION, 0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/TestSpaceCounters.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}