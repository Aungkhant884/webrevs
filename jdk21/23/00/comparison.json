{"files":[{"patch":"@@ -3504,3 +3504,1 @@\n-            Type type = types.isSubtype(selectorType, syms.objectType)\n-                    ? selectorType : syms.objectType;\n-            return new BindingPattern(type);\n+            return new BindingPattern(selectorType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,0 +82,2 @@\n+        assertEquals(true, testUnnamedPrimitiveAndExhaustiveness(new Prim1(4)));\n+        assertEquals(false, testUnnamedPrimitiveAndExhaustiveness(new Prim2(5)));\n@@ -273,0 +275,23 @@\n+    boolean testUnnamedPrimitiveAndExhaustiveness(RecordWithPrimitive a) {\n+        boolean r1 = switch (a) {\n+            case Prim1(var _) -> true;\n+            case Prim2(_) -> false;\n+        };\n+\n+        boolean r2 = switch (a) {\n+            case Prim1(var _) -> true;\n+            case Prim2(var _) -> false;\n+        };\n+\n+        boolean r3 = switch (a) {\n+            case Prim1(_) -> true;\n+            case Prim2(_) -> false;\n+        };\n+\n+        return r1 && r2 && r3;\n+    }\n+\n+    sealed interface RecordWithPrimitive permits Prim1, Prim2 {};\n+    record Prim1(int n1) implements RecordWithPrimitive {};\n+    record Prim2(int n2) implements RecordWithPrimitive {};\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Unnamed.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}