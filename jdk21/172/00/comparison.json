{"files":[{"patch":"@@ -78,2 +78,1 @@\n-     * Converts a Java string into a UTF-8 encoded, null-terminated C string,\n-     * storing the result into a memory segment.\n+     * {@return a new memory segment with a Java string converted into a UTF-8 encoded, null-terminated C string}\n@@ -91,1 +90,1 @@\n-     * @implSpec the default implementation for this method copies the contents of the provided Java string\n+     * @implSpec The default implementation for this method copies the contents of the provided Java string\n@@ -94,1 +93,0 @@\n-     * @return a new native segment containing the converted C string.\n@@ -102,2 +100,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code byte} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -105,2 +111,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -111,3 +116,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -117,2 +122,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code char} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -120,2 +133,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -126,3 +138,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -132,2 +144,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code short} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -135,2 +155,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -141,3 +160,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -147,2 +166,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code int} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -150,2 +177,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -156,3 +182,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -162,2 +188,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code float} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -165,2 +199,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -171,3 +204,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -177,2 +210,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code long} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -180,2 +221,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -186,3 +226,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -192,2 +232,10 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double value.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     * {@return a new memory segment initialized with the provided {@code double} {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -195,2 +243,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -201,3 +248,3 @@\n-        MemorySegment addr = allocate(layout);\n-        handle.set(addr, value);\n-        return addr;\n+        MemorySegment seg = allocate(layout);\n+        handle.set(seg, value);\n+        return seg;\n@@ -207,1 +254,3 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given address value.\n+     * {@return a new memory segment initialized with the address of the provided {@code value} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     * <p>\n@@ -209,1 +258,9 @@\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout)}.\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  Objects.requireNonNull(value);\n+     *  MemorySegment seg = allocate(Objects.requireNonNull(layout));\n+     *  seg.set(layout, 0, value);\n+     *  return seg;\n+     * }\n+     *\n@@ -211,2 +268,1 @@\n-     * @param value the value to be set on the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param value  the value to be set in the newly allocated memory segment.\n@@ -217,3 +273,3 @@\n-        MemorySegment segment = allocate(layout);\n-        layout.varHandle().set(segment, value);\n-        return segment;\n+        MemorySegment seg = allocate(layout);\n+        layout.varHandle().set(seg, value);\n+        return seg;\n@@ -223,2 +279,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given byte elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code byte} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(elements, 0, seg, elementLayout, 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -226,2 +292,1 @@\n-     * @param elements the byte elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -234,2 +299,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given short elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code short} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(elements, 0, seg, elementLayout, 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -237,2 +312,1 @@\n-     * @param elements the short elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -245,2 +319,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given char elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code char} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(elements, 0, seg, elementLayout, 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -248,2 +332,1 @@\n-     * @param elements the char elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -256,2 +339,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given int elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code int} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(elements, 0, seg, elementLayout, 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -259,2 +352,1 @@\n-     * @param elements the int elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -267,2 +359,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given float elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code float} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(elements, 0, seg, elementLayout, 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -270,2 +372,1 @@\n-     * @param elements the float elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -278,2 +379,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given long elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code long} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(elements, 0, seg, elementLayout, 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -281,2 +392,1 @@\n-     * @param elements the long elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -289,2 +399,12 @@\n-     * Allocates a memory segment with the given layout and initializes it with the given double elements.\n-     * @implSpec the default implementation for this method calls {@code this.allocateArray(layout, array.length)}.\n+     * {@return a new memory segment with a {@linkplain MemorySegment#byteSize() byteSize()} of\n+     * {@code E*layout.byteSize()} initialized with the provided {@code E} {@code double} {@code elements} as\n+     * specified by the provided {@code layout} (i.e. byte ordering, alignment and size)}\n+     *\n+     * @implSpec The default implementation is equivalent to:\n+     * {@snippet lang=java :\n+     *  int size = Objects.requireNonNull(elements).length;\n+     *  MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n+     *  MemorySegment.copy(elements, 0, seg, elementLayout, 0, size);\n+     *  return seg;\n+     * }\n+     *\n@@ -292,2 +412,1 @@\n-     * @param elements the double elements to be copied to the newly allocated memory block.\n-     * @return a segment for the newly allocated memory block.\n+     * @param elements      the short elements to be copied to the newly allocated memory block.\n@@ -302,1 +421,1 @@\n-        MemorySegment addr = allocateArray(Objects.requireNonNull(elementLayout), size);\n+        MemorySegment seg = allocateArray(Objects.requireNonNull(elementLayout), size);\n@@ -305,1 +424,1 @@\n-                    addr, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n+                    seg, elementLayout.withOrder(ByteOrder.nativeOrder()), 0, size);\n@@ -307,1 +426,1 @@\n-        return addr;\n+        return seg;\n@@ -311,2 +430,5 @@\n-     * Allocates a memory segment with the given layout.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     * {@return a new memory segment with the given layout}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(layout.byteSize(), layout.byteAlignment())}.\n+     *\n@@ -314,1 +436,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -322,2 +443,5 @@\n-     * Allocates a memory segment with the given element layout and size.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     * {@return a new memory segment with the given {@code elementLayout} and {@code count}}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(MemoryLayout.sequenceLayout(count, elementLayout))}.\n+     *\n@@ -326,1 +450,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -339,2 +462,5 @@\n-     * Allocates a memory segment with the given size.\n-     * @implSpec the default implementation for this method calls {@code this.allocate(byteSize, 1)}.\n+     * {@return a new memory segment with the given {@code byteSize}}\n+     *\n+     * @implSpec The default implementation for this method calls\n+     * {@code this.allocate(byteSize, 1)}.\n+     *\n@@ -342,1 +468,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -350,1 +475,2 @@\n-     * Allocates a memory segment with the given size and alignment constraint.\n+     * {@return a new memory segment with the given {@code byteSize} and {@code byteAlignment}}\n+     *\n@@ -353,1 +479,0 @@\n-     * @return a segment for the newly allocated memory block.\n@@ -366,0 +491,1 @@\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":228,"deletions":102,"binary":false,"changes":330,"status":"modified"}]}