{"files":[{"patch":"@@ -62,1 +62,1 @@\n- *     Callable<Integer> task1 = ...\n+ *     Callable<Integer> task2 = ...\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -454,1 +454,1 @@\n-     * {@return a stream of the live threads in this flock}\n+     * {@return a stream of the threads in this flock}\n@@ -462,1 +462,1 @@\n-        return threads.stream().filter(Thread::isAlive);\n+        return threads.stream();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/ThreadFlock.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8311867\n+ * @summary Stress test of StructuredTaskScope.shutdown with running and starting threads\n+ * @enablePreview\n+ * @run junit StressShutdown\n+ *\/\n+\n+import java.time.Duration;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.StructuredTaskScope;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StressShutdown {\n+\n+    static final Callable<Void> SLEEP_FOR_A_DAY = () -> {\n+        Thread.sleep(Duration.ofDays(1));\n+        return null;\n+    };\n+\n+    static Stream<Arguments> testCases() {\n+        Stream<ThreadFactory> factories = Stream.of(\n+                Thread.ofPlatform().factory(),\n+                Thread.ofVirtual().factory()\n+        );\n+        \/\/ 0..15 forks before shutdown, 0..15 forks after shutdown\n+        return factories.flatMap(f -> IntStream.range(0, 256)\n+                .mapToObj(x -> Arguments.of(f, x & 0x0F, (x & 0xF0) >> 4)));\n+    }\n+\n+    \/**\n+     * Test StructuredTaskScope.shutdown with running threads and concurrently with\n+     * threads that are starting. The shutdown should interrupt all threads so that\n+     * join wakes up.\n+     *\n+     * @param factory the ThreadFactory to use\n+     * @param beforeShutdown the number of subtasks to fork before shutdown\n+     * @param afterShutdown the number of subtasks to fork after shutdown\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"testCases\")\n+    void testShutdown(ThreadFactory factory, int beforeShutdown, int afterShutdown)\n+        throws InterruptedException\n+    {\n+        try (var scope = new StructuredTaskScope<>(null, factory)) {\n+            \/\/ fork subtasks\n+            for (int i = 0; i < beforeShutdown; i++) {\n+                scope.fork(SLEEP_FOR_A_DAY);\n+            }\n+\n+            \/\/ fork subtask to shutdown\n+            scope.fork(() -> {\n+                scope.shutdown();\n+                return null;\n+            });\n+\n+            \/\/ fork after forking subtask to shutdown\n+            for (int i = 0; i < afterShutdown; i++) {\n+                scope.fork(SLEEP_FOR_A_DAY);\n+            }\n+\n+            scope.join();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/StructuredTaskScope\/StressShutdown.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"}]}