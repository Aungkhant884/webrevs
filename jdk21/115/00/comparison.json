{"files":[{"patch":"@@ -620,2 +620,8 @@\n-     * The implementation in this interface returns an instance of a reverse-ordered\n-     * Deque that delegates its operations to this Deque.\n+     * The implementation in this interface returns a reverse-ordered Deque\n+     * view. The {@code reversed()} method of the view returns a reference\n+     * to this Deque. Other operations on the view are implemented via calls to\n+     * public methods on this Deque. The exact relationship between calls on the\n+     * view and calls on this Deque is unspecified. However, order-sensitive\n+     * operations generally delegate to the appropriate method with the opposite\n+     * orientation. For example, calling {@code getFirst} on the view results in\n+     * a call to {@code getLast} on this Deque.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Deque.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -891,2 +891,8 @@\n-     * The implementation in this interface returns an instance of a reverse-ordered\n-     * List that delegates its operations to this List.\n+     * The implementation in this interface returns a reverse-ordered List\n+     * view. The {@code reversed()} method of the view returns a reference\n+     * to this List. Other operations on the view are implemented via calls to\n+     * public methods on this List. The exact relationship between calls on the\n+     * view and calls on this List is unspecified. However, order-sensitive\n+     * operations generally delegate to the appropriate method with the opposite\n+     * orientation. For example, calling {@code getFirst} on the view results in\n+     * a call to {@code getLast} on this List.\n","filename":"src\/java.base\/share\/classes\/java\/util\/List.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -319,2 +319,8 @@\n-     * The implementation in this interface returns an instance of a reverse-ordered\n-     * SortedMap that delegates its operations to this SortedMap.\n+     * The implementation in this interface returns a reverse-ordered SortedMap\n+     * view. The {@code reversed()} method of the view returns a reference\n+     * to this SortedMap. Other operations on the view are implemented via calls to\n+     * public methods on this SortedMap. The exact relationship between calls on the\n+     * view and calls on this SortedMap is unspecified. However, order-sensitive\n+     * operations generally delegate to the appropriate method with the opposite\n+     * orientation. For example, calling {@code firstEntry} on the view results in\n+     * a call to {@code lastEntry} on this SortedMap.\n","filename":"src\/java.base\/share\/classes\/java\/util\/SortedMap.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -363,2 +363,8 @@\n-     * The implementation in this interface returns an instance of a reverse-ordered\n-     * SortedSet that delegates its operations to this SortedSet.\n+     * The implementation in this interface returns a reverse-ordered SortedSet\n+     * view. The {@code reversed()} method of the view returns a reference\n+     * to this SortedSet. Other operations on the view are implemented via calls to\n+     * public methods on this SortedSet. The exact relationship between calls on the\n+     * view and calls on this SortedSet is unspecified. However, order-sensitive\n+     * operations generally delegate to the appropriate method with the opposite\n+     * orientation. For example, calling {@code getFirst} on the view results in\n+     * a call to {@code getLast} on this SortedSet.\n","filename":"src\/java.base\/share\/classes\/java\/util\/SortedSet.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}