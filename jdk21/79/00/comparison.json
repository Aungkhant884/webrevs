{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import java.time.Instant;\n@@ -29,0 +30,1 @@\n+import jdk.jfr.consumer.RecordedEvent;\n@@ -43,0 +45,1 @@\n+    private static volatile Instant lastTimestamp;\n@@ -63,0 +66,1 @@\n+                storeLastTimestamp(e);\n@@ -67,0 +71,1 @@\n+                storeLastTimestamp(e);\n@@ -71,0 +76,1 @@\n+                storeLastTimestamp(e);\n@@ -75,0 +81,1 @@\n+                storeLastTimestamp(e);\n@@ -79,0 +86,1 @@\n+                storeLastTimestamp(e);\n@@ -90,0 +98,10 @@\n+            \/\/ Wait for Instant.now() to advance 1 s past the last event timestamp.\n+            \/\/ The rationale for this is twofold:\n+            \/\/ - DcmdView starts one second before Instant.now() (to make the command\n+            \/\/   responsive for the user).\n+            \/\/ - Instant.now() and the event timestamp use different time sources\n+            \/\/   and they need to synchronize.\n+            Instant end = lastTimestamp.plusSeconds(1);\n+            while (Instant.now().isBefore(end)) {\n+                Thread.sleep(10);\n+            }\n@@ -104,0 +122,7 @@\n+    private static void storeLastTimestamp(RecordedEvent e) {\n+        Instant time = e.getEndTime();\n+        if (lastTimestamp == null || time.isAfter(lastTimestamp)) {\n+            lastTimestamp = time;\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdView.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}