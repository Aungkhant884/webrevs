{"files":[{"patch":"@@ -43,2 +43,1 @@\n-     * Returns the memory address associated with this addressable.\n-     * @return The memory address associated with this addressable.\n+     * {@return the {@linkplain MemoryAddress memory address} associated with this addressable}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/Addressable.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-     * Returns the return layout associated with this function.\n-     * @return the return layout.\n+     * {@return the return layout (if any) associated with this function descriptor}\n@@ -65,2 +64,1 @@\n-     * Returns the argument layouts associated with this function.\n-     * @return the argument layouts.\n+     * {@return the argument layouts associated with this function descriptor}.\n@@ -169,2 +167,1 @@\n-     * Returns a string representation of this function descriptor.\n-     * @return a string representation of this function descriptor.\n+     * {@return the string representation of this function descriptor}\n@@ -204,2 +201,1 @@\n-     * Returns the hash code value for this function descriptor.\n-     * @return the hash code value for this function descriptor.\n+     * {@return the hash code value for this function descriptor}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/FunctionDescriptor.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -136,3 +136,1 @@\n-     * Is this group layout a <em>struct<\/em>?\n-     *\n-     * @return true, if this group layout is a <em>struct<\/em>.\n+     * {@return {@code true}, if this group layout is a <em>struct<\/em>}\n@@ -145,3 +143,1 @@\n-     * Is this group layout a <em>union<\/em>?\n-     *\n-     * @return true, if this group layout is a <em>union<\/em>.\n+     * {@return {@code true}, if this group layout is a <em>union<\/em>}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/GroupLayout.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,2 +81,1 @@\n-     * Returns the raw long value associated with this memory address.\n-     * @return The raw long value associated with this memory address.\n+     * {@return the raw long value associated with this memory address}\n@@ -144,2 +143,1 @@\n-     * Returns the hash code value for this address.\n-     * @return the hash code value for this address.\n+     * {@return the hash code value for this address}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-     * Returns an {@link Optional} containing the nominal descriptor for this\n+     * {@return an {@link Optional} containing the nominal descriptor for this\n@@ -200,4 +200,1 @@\n-     * if one cannot be constructed.\n-     *\n-     * @return An {@link Optional} containing the resulting nominal descriptor,\n-     * or an empty {@link Optional} if one cannot be constructed.\n+     * if one cannot be constructed}\n@@ -209,1 +206,1 @@\n-     * Does this layout have a specified size? A layout does not have a specified size if it is (or contains) a sequence layout whose\n+     * Returns {@code true} if this layout has a specified size. A layout does not have a specified size if it is (or contains) a sequence layout whose\n@@ -220,3 +217,1 @@\n-     * Computes the layout size, in bits.\n-     *\n-     * @return the layout size, in bits.\n+     * {@return the layout size, in bits}\n@@ -228,3 +223,1 @@\n-     * Computes the layout size, in bytes.\n-     *\n-     * @return the layout size, in bytes.\n+     * {@return the layout size, in bytes}\n@@ -237,3 +230,1 @@\n-     * Return the <em>name<\/em> (if any) associated with this layout.\n-     *\n-     * @return the layout <em>name<\/em> (if any).\n+     * {@return the <em>name<\/em> (if any) associated with this layout}\n@@ -537,2 +528,1 @@\n-     * Is this a {@linkplain #paddingLayout(long) padding layout} ?\n-     * @return true, if this layout is a padding layout.\n+     * {@return true, if this layout is a padding layout}\n@@ -654,3 +644,1 @@\n-     * Returns the hash code value for this layout.\n-     *\n-     * @return the hash code value for this layout.\n+     * {@return the hash code value for this layout}\n@@ -661,3 +649,1 @@\n-     * Returns a string representation of this layout.\n-     *\n-     * @return a string representation of this layout.\n+     * {@return the string representation of this layout}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryLayout.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -253,1 +253,1 @@\n-     * The base memory address associated with this native memory segment.\n+     * {@return the base memory address associated with this native memory segment}\n@@ -257,1 +257,0 @@\n-     * @return The base memory address.\n@@ -302,2 +301,1 @@\n-     * Returns the resource scope associated with this memory segment.\n-     * @return the resource scope associated with this memory segment.\n+     * {@return the resource scope associated with this memory segment}\n@@ -308,2 +306,1 @@\n-     * The size (in bytes) of this memory segment.\n-     * @return The size (in bytes) of this memory segment.\n+     * {@return the size (in bytes) of this memory segment}\n@@ -346,2 +343,1 @@\n-     * Is this segment read-only?\n-     * @return {@code true}, if this segment is read-only.\n+     * {@return {@code true}, if this segment is read-only}\n@@ -361,1 +357,1 @@\n-     * Is this a native segment? Returns true if this segment is a native memory segment,\n+     * Returns {@code true} if this segment is a native segment. A native memory segment is\n@@ -370,1 +366,1 @@\n-     * Is this a mapped segment? Returns true if this segment is a mapped memory segment,\n+     * Returns {@code true} if this segment is a mapped segment. A mapped memory segment is\n@@ -487,1 +483,1 @@\n-     * Tells whether the contents of this mapped segment is resident in physical\n+     * Determines whether the contents of this mapped segment is resident in physical\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -46,2 +46,1 @@\n-     * Returns the name of this symbol.\n-     * @return the name of this symbol.\n+     * {@return the name of this symbol}\n@@ -52,2 +51,1 @@\n-     * Returns the resource scope associated with this symbol.\n-     * @return the resource scope associated with this symbol.\n+     * {@return the resource scope associated with this symbol}\n@@ -58,1 +56,1 @@\n-     * Returns the memory address associated with this symbol.\n+     * {@return the memory address associated with this symbol}\n@@ -61,1 +59,0 @@\n-     * @return The memory address associated with this symbol.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/NativeSymbol.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -150,2 +150,1 @@\n-     * Is this resource scope alive?\n-     * @return true, if this resource scope is alive.\n+     * {@return {@code true}, if this resource scope is alive}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ResourceScope.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,3 +85,1 @@\n-     * Returns the element layout associated with this sequence layout.\n-     *\n-     * @return The element layout associated with this sequence layout.\n+     * {@return the element layout associated with this sequence layout}\n@@ -94,3 +92,1 @@\n-     * Returns the element count of this sequence layout (if any).\n-     *\n-     * @return the element count of this sequence layout (if any).\n+     * {@return the element count of this sequence layout (if any)}\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/SequenceLayout.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -135,2 +135,1 @@\n-     * Returns the resource scope associated with this variable argument list.\n-     * @return the resource scope associated with this variable argument list.\n+     * {@return the resource scope associated with this variable argument list}\n@@ -156,1 +155,1 @@\n-     * Returns the memory address associated with this variable argument list.\n+     * {@return the {@linkplain MemoryAddress memory address} associated with this variable argument list}\n@@ -159,1 +158,0 @@\n-     * @return The memory address associated with this variable argument list.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/VaList.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,3 +44,3 @@\n- * (either signed or unsigned) and <em>floating-point<\/em> types. Each value layout has a size, an alignment, a {@linkplain ByteOrder byte order})\n- * and a <em>carrier<\/em>, that is, the Java type that should be used when {@linkplain MemorySegment#get(OfInt, long) accessing}\n- * a memory region using the value layout.\n+ * (either signed or unsigned) and <em>floating-point<\/em> types. Each value layout has a size, an alignment (in bits),\n+ * a {@linkplain ByteOrder byte order}, and a <em>carrier<\/em>, that is, the Java type that should be used when\n+ * {@linkplain MemorySegment#get(OfInt, long) accessing} a memory region using the value layout.\n@@ -85,3 +85,1 @@\n-     * Returns the value's byte order.\n-     *\n-     * @return the value's  byte order.\n+     * {@return the value's byte order}\n@@ -128,2 +126,1 @@\n-     * Returns the carrier associated with this value layout.\n-     * @return the carrier associated with this value layout.\n+     * {@return the carrier associated with this value layout}\n@@ -516,2 +513,2 @@\n-     * A value layout constant whose size is the same as that of a machine address (e.g. {@code size_t}),\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * A value layout constant whose size is the same as that of a machine address ({@code size_t}),\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -527,1 +524,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -537,1 +534,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -547,1 +544,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -557,1 +554,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -567,1 +564,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -577,1 +574,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -588,1 +585,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n@@ -598,1 +595,1 @@\n-     * bit-alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n+     * bit alignment set to 8, and byte order set to {@link ByteOrder#nativeOrder()}.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/ValueLayout.java","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * The main abstractions introduced to support foreign memory access is {@link jdk.incubator.foreign.MemorySegment}, which\n+ * The main abstraction introduced to support foreign memory access is {@link jdk.incubator.foreign.MemorySegment}, which\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}