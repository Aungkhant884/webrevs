[{"commit":{"message":"8277621: ARM32: multiple fastdebug failures with \"bad AD file\" after JDK-8276162\n\nJDK-8276162 introduced an optimization that creates the following two\nkinds of IR shapes:\n\n1. `CMoveI (Bool (CmpUL ...) ...)`: conditionally moving two ints based\non the comparison result of two unsigned longs.\n\n2. `CMoveP (Bool (CmpUL ...) ...)`: conditionally moving two pointers\nbased on the comparison result of two unsigned longs.\n\nBut the corresponding match rules are missing for arm32. JDK-8277324 and\nJDK-8277753 complemented the missing rules for x86-32. We do the same\nthing to arm32 in this patch.\n\nFor IR shape 1, the missing rules in arm32 are in form of\n\"cmovIL_AA_BB_U\", where AA can be reg\/imm16\/immMov(i.e. three variants\nof moving immediate\/register), and BB can be LTGE\/EQNE\/LEGT(i.e. three\ncondition code registers for unsigned long comparisons).\n\nFor IR shape 2, the missing rules are in form of \"cmovPL_CC_BB_U\", where\nCC can be reg\/imm, and BB has the same meaning with IR shape 1.\n\nMinor updates:\n1. \"cmpOpUL\/comOpUL_commute\" should be used for \"cmovLL_AA_BB_U\" rules.\n2. Rename \"cmovIL_imm_BB\" rules to \"cmovIL_imm16_BB\".\n3. Add \"cmovIL_immMov_BB\" rules.\n4. Style issue: remove the extra space in the predicate statement for\ncmov* rules.\n\nTest:\nWe ran tier 1~3 tests on arm32 platform. With this patch, \"bad AD file\"\nerrors are gone without introducing test regression."},"files":[{"filename":"src\/hotspot\/cpu\/arm\/arm.ad"}],"sha":"601a6f2a273b95187dcd01a1deb0b739bd8987e1"}]