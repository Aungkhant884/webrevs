{"files":[{"patch":"@@ -8388,1 +8388,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8401,1 +8401,1 @@\n-instruct cmovLL_reg_LTGE_U(cmpOpL cmp, flagsRegUL_LTGE xcc, iRegL dst, iRegL src) %{\n+instruct cmovLL_reg_LTGE_U(cmpOpUL cmp, flagsRegUL_LTGE xcc, iRegL dst, iRegL src) %{\n@@ -8403,1 +8403,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8418,1 +8418,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8433,1 +8433,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8446,1 +8446,1 @@\n-instruct cmovLL_reg_LEGT_U(cmpOpL_commute cmp, flagsRegUL_LEGT xcc, iRegL dst, iRegL src) %{\n+instruct cmovLL_reg_LEGT_U(cmpOpUL_commute cmp, flagsRegUL_LEGT xcc, iRegL dst, iRegL src) %{\n@@ -8448,1 +8448,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8463,1 +8463,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8475,1 +8475,1 @@\n-instruct cmovLL_imm_LTGE_U(cmpOpL cmp, flagsRegUL_LTGE xcc, iRegL dst, immL0 src) %{\n+instruct cmovLL_imm_LTGE_U(cmpOpUL cmp, flagsRegUL_LTGE xcc, iRegL dst, immL0 src) %{\n@@ -8477,1 +8477,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8491,1 +8491,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8505,1 +8505,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8519,1 +8519,14 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n+\n+  ins_cost(150);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$Register, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n+instruct cmovIL_reg_LTGE_U(cmpOpUL cmp, flagsRegUL_LTGE xcc, iRegI dst, iRegI src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8532,1 +8545,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8543,0 +8556,13 @@\n+instruct cmovIL_reg_EQNE_U(cmpOpUL cmp, flagsRegUL_EQNE xcc, iRegI dst, iRegI src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n+\n+  ins_cost(150);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+   __ mov($dst$$Register, $src$$Register, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n@@ -8545,1 +8571,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8556,1 +8582,53 @@\n-instruct cmovIL_imm_LTGE(cmpOpL cmp, flagsRegL_LTGE xcc, iRegI dst, immI16 src) %{\n+instruct cmovIL_reg_LEGT_U(cmpOpUL_commute cmp, flagsRegUL_LEGT xcc, iRegI dst, iRegI src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n+\n+  ins_cost(150);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$Register, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n+instruct cmovIL_imm16_LTGE(cmpOpL cmp, flagsRegL_LTGE xcc, iRegI dst, immI16 src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOVW$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ movw($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_imm16_LTGE_U(cmpOpUL cmp, flagsRegUL_LTGE xcc, iRegI dst, immI16 src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOVW$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ movw($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_imm16_EQNE(cmpOpL cmp, flagsRegL_EQNE xcc, iRegI dst, immI16 src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOVW$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ movw($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_imm16_EQNE_U(cmpOpUL cmp, flagsRegUL_EQNE xcc, iRegI dst, immI16 src) %{\n@@ -8558,1 +8636,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8561,0 +8639,1 @@\n+  size(4);\n@@ -8568,1 +8647,1 @@\n-instruct cmovIL_imm_EQNE(cmpOpL cmp, flagsRegL_EQNE xcc, iRegI dst, immI16 src) %{\n+instruct cmovIL_imm16_LEGT(cmpOpL_commute cmp, flagsRegL_LEGT xcc, iRegI dst, immI16 src) %{\n@@ -8570,1 +8649,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8573,0 +8652,1 @@\n+  size(4);\n@@ -8580,1 +8660,1 @@\n-instruct cmovIL_imm_LEGT(cmpOpL_commute cmp, flagsRegL_LEGT xcc, iRegI dst, immI16 src) %{\n+instruct cmovIL_imm16_LEGT_U(cmpOpUL_commute cmp, flagsRegUL_LEGT xcc, iRegI dst, immI16 src) %{\n@@ -8582,1 +8662,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8585,0 +8665,1 @@\n+  size(4);\n@@ -8592,0 +8673,78 @@\n+instruct cmovIL_immMov_LTGE(cmpOpL cmp, flagsRegL_LTGE xcc, iRegI dst, immIMov src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_immMov_LTGE_U(cmpOpUL cmp, flagsRegUL_LTGE xcc, iRegI dst, immIMov src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_immMov_EQNE(cmpOpL cmp, flagsRegL_EQNE xcc, iRegI dst, immIMov src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_immMov_EQNE_U(cmpOpUL cmp, flagsRegUL_EQNE xcc, iRegI dst, immIMov src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_immMov_LEGT(cmpOpL_commute cmp, flagsRegL_LEGT xcc, iRegI dst, immIMov src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovIL_immMov_LEGT_U(cmpOpUL_commute cmp, flagsRegUL_LEGT xcc, iRegI dst, immIMov src) %{\n+  match(Set dst (CMoveI (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n@@ -8594,1 +8753,14 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n+\n+  ins_cost(150);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$Register, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n+instruct cmovPL_reg_LTGE_U(cmpOpUL cmp, flagsRegUL_LTGE xcc, iRegP dst, iRegP src) %{\n+  match(Set dst (CMoveP (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8607,1 +8779,14 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n+\n+  ins_cost(150);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$Register, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n+instruct cmovPL_reg_EQNE_U(cmpOpUL cmp, flagsRegUL_EQNE xcc, iRegP dst, iRegP src) %{\n+  match(Set dst (CMoveP (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8620,1 +8805,14 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n+\n+  ins_cost(150);\n+  size(4);\n+  format %{ \"MOV$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ mov($dst$$Register, $src$$Register, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n+instruct cmovPL_reg_LEGT_U(cmpOpUL_commute cmp, flagsRegUL_LEGT xcc, iRegP dst, iRegP src) %{\n+  match(Set dst (CMoveP (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8633,1 +8831,14 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n+\n+  ins_cost(140);\n+  size(4);\n+  format %{ \"MOVW$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ movw($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovPL_imm_LTGE_U(cmpOpUL cmp, flagsRegUL_LTGE xcc, iRegP dst, immP0 src) %{\n+  match(Set dst (CMoveP (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8636,0 +8847,1 @@\n+  size(4);\n@@ -8645,1 +8857,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8648,0 +8860,14 @@\n+  size(4);\n+  format %{ \"MOVW$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ movw($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovPL_imm_EQNE_U(cmpOpUL cmp, flagsRegUL_EQNE xcc, iRegP dst, immP0 src) %{\n+  match(Set dst (CMoveP (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n+\n+  ins_cost(140);\n+  size(4);\n@@ -8657,1 +8883,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8660,0 +8886,14 @@\n+  size(4);\n+  format %{ \"MOVW$cmp  $dst,$src\" %}\n+  ins_encode %{\n+    __ movw($dst$$Register, $src$$constant, (AsmCondition)($cmp$$cmpcode));\n+  %}\n+  ins_pipe(ialu_imm);\n+%}\n+\n+instruct cmovPL_imm_LEGT_U(cmpOpUL_commute cmp, flagsRegUL_LEGT xcc, iRegP dst, immP0 src) %{\n+  match(Set dst (CMoveP (Binary cmp xcc) (Binary dst src)));\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n+\n+  ins_cost(140);\n+  size(4);\n@@ -8669,1 +8909,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8681,1 +8921,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8693,1 +8933,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n@@ -8705,1 +8945,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::lt || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ge);\n@@ -8718,1 +8958,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::eq || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::ne);\n@@ -8731,1 +8971,1 @@\n-  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt );\n+  predicate(_kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::le || _kids[0]->_kids[0]->_leaf->as_Bool()->_test._test == BoolTest::gt);\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":273,"deletions":33,"binary":false,"changes":306,"status":"modified"}]}