{"files":[{"patch":"@@ -4575,1 +4575,2 @@\n-    __ insertps($dst$$XMMRegister, $val$$XMMRegister, $idx$$constant);\n+    uint x_idx = $idx$$constant & right_n_bits(2);\n+    __ insertps($dst$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4595,1 +4596,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4601,1 +4602,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n@@ -3453,1 +3453,1 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n@@ -3453,1 +3453,1 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n@@ -3453,1 +3453,1 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3449,1 +3449,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n@@ -3453,1 +3453,1 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3454,1 +3454,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n@@ -3458,1 +3458,1 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n@@ -2466,1 +2466,1 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n@@ -2466,1 +2466,1 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n@@ -2466,1 +2466,1 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2462,1 +2462,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n@@ -2466,1 +2466,1 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2467,1 +2467,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n@@ -2471,1 +2471,1 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n@@ -2476,1 +2476,1 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n@@ -2476,1 +2476,1 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n@@ -2476,1 +2476,1 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2472,1 +2472,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n@@ -2476,1 +2476,1 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2477,1 +2477,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n@@ -2481,1 +2481,1 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n@@ -3418,1 +3418,1 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n@@ -3418,1 +3418,1 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n@@ -3418,1 +3418,1 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3414,1 +3414,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n@@ -3418,1 +3418,1 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3419,1 +3419,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n@@ -3423,1 +3423,1 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n@@ -3440,1 +3440,1 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n@@ -3440,1 +3440,1 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n@@ -3440,1 +3440,1 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3436,1 +3436,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n@@ -3440,1 +3440,1 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3441,1 +3441,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n@@ -3445,1 +3445,1 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n@@ -3443,1 +3443,1 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n@@ -3443,1 +3443,1 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n@@ -3443,1 +3443,1 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3439,1 +3439,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n@@ -3443,1 +3443,1 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3444,1 +3444,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n@@ -3448,1 +3448,1 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-                av.withLane(0, ($type$)4).intoArray(r, i);\n+                av.withLane(SPECIES.length()-1, ($type$)4).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-With-Op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-        assertInsertArraysEquals(r, a, ($type$)4, 0);\n+        assertInsertArraysEquals(r, a, ($type$)4, SPECIES.length()-1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-With-Op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}