{"files":[{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3447,1 +3447,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3449,1 +3449,1 @@\n-                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3453,1 +3453,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3452,1 +3452,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3454,1 +3454,1 @@\n-                av.withLane(SPECIES.length()-1, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3458,1 +3458,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2460,1 +2460,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2462,1 +2462,1 @@\n-                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2466,1 +2466,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2465,1 +2465,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2467,1 +2467,1 @@\n-                av.withLane(SPECIES.length()-1, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2471,1 +2471,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2470,1 +2470,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2472,1 +2472,1 @@\n-                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2476,1 +2476,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2475,1 +2475,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2477,1 +2477,1 @@\n-                av.withLane(SPECIES.length()-1, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2481,1 +2481,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3412,1 +3412,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3414,1 +3414,1 @@\n-                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3418,1 +3418,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3417,1 +3417,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3419,1 +3419,1 @@\n-                av.withLane(SPECIES.length()-1, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3423,1 +3423,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3434,1 +3434,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3436,1 +3436,1 @@\n-                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3440,1 +3440,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -191,2 +191,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -194,1 +194,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3439,1 +3439,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3441,1 +3441,1 @@\n-                av.withLane(SPECIES.length()-1, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3445,1 +3445,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3437,1 +3437,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3439,1 +3439,1 @@\n-                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3443,1 +3443,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3442,1 +3442,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3444,1 +3444,1 @@\n-                av.withLane(SPECIES.length()-1, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3448,1 +3448,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -7,1 +7,1 @@\n-                av.withLane(SPECIES.length()-1, ($type$)4).intoArray(r, i);\n+                av.withLane((j++ \\& (SPECIES.length()-1)), ($type$)(65535+i)).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-With-Op.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,4 @@\n-        assertInsertArraysEquals(r, a, ($type$)4, SPECIES.length()-1);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, ($type$)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-With-Op.template","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -260,2 +260,2 @@\n-    static void assertInsertArraysEquals($type$[] r, $type$[] a, $type$ element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals($type$[] r, $type$[] a, $type$ element, int index, int start, int end) {\n+        int i = start;\n@@ -263,1 +263,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}