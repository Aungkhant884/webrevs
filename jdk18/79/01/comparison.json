{"files":[{"patch":"@@ -510,1 +510,0 @@\n-\n@@ -512,2 +511,9 @@\n-                    ? findConstructor(sym, paramTypes)\n-                    : findMethod(sym, memberName, paramTypes);\n+                    ? findConstructor(sym, paramTypes, true)\n+                    : findMethod(sym, memberName, paramTypes, true);\n+\n+            if (msym == null) {\n+                msym = (memberName == sym.name)\n+                        ? findConstructor(sym, paramTypes, false)\n+                        : findMethod(sym, memberName, paramTypes, false);\n+            }\n+\n@@ -611,1 +617,1 @@\n-    MethodSymbol findConstructor(ClassSymbol tsym, List<Type> paramTypes) {\n+    MethodSymbol findConstructor(ClassSymbol tsym, List<Type> paramTypes, boolean strict) {\n@@ -614,1 +620,1 @@\n-                if (hasParameterTypes((MethodSymbol) sym, paramTypes)) {\n+                if (hasParameterTypes((MethodSymbol) sym, paramTypes, strict)) {\n@@ -622,2 +628,2 @@\n-    private MethodSymbol findMethod(ClassSymbol tsym, Name methodName, List<Type> paramTypes) {\n-        return searchMethod(tsym, methodName, paramTypes, new HashSet<>());\n+    private MethodSymbol findMethod(ClassSymbol tsym, Name methodName, List<Type> paramTypes, boolean strict) {\n+        return searchMethod(tsym, methodName, paramTypes, strict, new HashSet<>());\n@@ -627,1 +633,2 @@\n-                                       List<Type> paramTypes, Set<ClassSymbol> searched) {\n+                                       List<Type> paramTypes, boolean strict,\n+                                       Set<ClassSymbol> searched) {\n@@ -665,1 +672,1 @@\n-                    if (hasParameterTypes((MethodSymbol) sym, paramTypes)) {\n+                    if (hasParameterTypes((MethodSymbol) sym, paramTypes, strict)) {\n@@ -678,1 +685,1 @@\n-            MethodSymbol msym = searchMethod((ClassSymbol) superclass.tsym, methodName, paramTypes, searched);\n+            MethodSymbol msym = searchMethod((ClassSymbol) superclass.tsym, methodName, paramTypes, strict, searched);\n@@ -689,1 +696,1 @@\n-            MethodSymbol msym = searchMethod((ClassSymbol) intf.tsym, methodName, paramTypes, searched);\n+            MethodSymbol msym = searchMethod((ClassSymbol) intf.tsym, methodName, paramTypes, strict, searched);\n@@ -698,1 +705,1 @@\n-            MethodSymbol msym = searchMethod(encl, methodName, paramTypes, searched);\n+            MethodSymbol msym = searchMethod(encl, methodName, paramTypes, strict, searched);\n@@ -707,1 +714,1 @@\n-    private boolean hasParameterTypes(MethodSymbol method, List<Type> paramTypes) {\n+    private boolean hasParameterTypes(MethodSymbol method, List<Type> paramTypes, boolean strict) {\n@@ -715,1 +722,1 @@\n-        if (!Type.isErroneous(paramTypes) && types.isSubtypes(paramTypes, methodParamTypes)) {\n+        if (!strict && !Type.isErroneous(paramTypes) && types.isSubtypes(paramTypes, methodParamTypes)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 7021614\n+ * @bug 7021614 8278373\n@@ -42,1 +42,0 @@\n-import com.sun.source.util.DocTreeScanner;\n@@ -48,0 +47,1 @@\n+import java.util.stream.Collectors;\n@@ -54,0 +54,2 @@\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.QualifiedNameable;\n@@ -55,0 +57,2 @@\n+import javax.lang.model.type.DeclaredType;\n+import javax.lang.model.type.TypeMirror;\n@@ -177,2 +181,12 @@\n-            if (!expect.equalsIgnoreCase(found == null ? \"bad\" : found.getKind().name())) {\n-                error(tree, \"Unexpected value found: \" + found +\", expected: \" + expect);\n+            if (expect.startsWith(\"signature:\")) {\n+                expect = expect.substring(\"signature:\".length());\n+\n+                String signature = found.getKind().name() + \":\" + elementSignature(found);\n+\n+                if (!expect.equalsIgnoreCase(signature)) {\n+                    error(tree, \"Unexpected value found: \" + signature +\", expected: \" + expect);\n+                }\n+            } else {\n+                if (!expect.equalsIgnoreCase(found == null ? \"bad\" : found.getKind().name())) {\n+                    error(tree, \"Unexpected value found: \" + found +\", expected: \" + expect);\n+                }\n@@ -186,0 +200,23 @@\n+\n+    String elementSignature(Element el) {\n+        return switch (el.getKind()) {\n+            case METHOD -> elementSignature(el.getEnclosingElement()) + \".\" + el.getSimpleName() + \"(\" + executableParamNames((ExecutableElement) el) + \")\";\n+            case CLASS, INTERFACE -> ((QualifiedNameable) el).getQualifiedName().toString();\n+            default -> throw new AssertionError(\"Unhandled Element kind: \" + el.getKind());\n+        };\n+    }\n+\n+    String executableParamNames(ExecutableElement ee) {\n+        return ee.getParameters()\n+                 .stream()\n+                 .map(p -> type2Name(p.asType()))\n+                 .collect(Collectors.joining(\", \"));\n+    }\n+\n+    String type2Name(TypeMirror type) {\n+        return switch (type.getKind()) {\n+            case DECLARED -> elementSignature(((DeclaredType) type).asElement());\n+            case INT, LONG -> type.toString();\n+            default -> throw new AssertionError(\"Unhandled type kind: \" + type.getKind());\n+        };\n+    }\n@@ -202,0 +239,11 @@\n+ *\n+ * @see #methodSearch(String)   signature:METHOD:ReferenceTestExtras.methodSearch(java.lang.String)\n+ * @see #methodSearch(StringBuilder)   signature:METHOD:ReferenceTestExtras.methodSearch(java.lang.CharSequence)\n+ * @see #methodSearchPrimitive1(int, int)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive1(int, int)\n+ * @see #methodSearchPrimitive1(long, int)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive1(long, int)\n+ * @see #methodSearchPrimitive1(int, long)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive1(int, long)\n+ * @see #methodSearchPrimitive1(long, long)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive1(long, long)\n+ * @see #methodSearchPrimitive2(int, int)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive2(int, int)\n+ * @see #methodSearchPrimitive2(long, int)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive2(long, int)\n+ * @see #methodSearchPrimitive2(int, long)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive2(int, long)\n+ * @see #methodSearchPrimitive2(long, long)   signature:METHOD:ReferenceTestExtras.methodSearchPrimitive2(long, long)\n@@ -217,0 +265,14 @@\n+\n+    void methodSearch(Object o) {}\n+    void methodSearch(String s) {}\n+    void methodSearch(CharSequence cs) {}\n+\n+    void methodSearchPrimitive1(int i, int j) {}\n+    void methodSearchPrimitive1(long i, int j) {}\n+    void methodSearchPrimitive1(int i, long j) {}\n+    void methodSearchPrimitive1(long i, long j) {}\n+\n+    void methodSearchPrimitive2(long i, long j) {}\n+    void methodSearchPrimitive2(int i, long j) {}\n+    void methodSearchPrimitive2(long i, int j) {}\n+    void methodSearchPrimitive2(int i, int j) {}\n","filename":"test\/langtools\/tools\/javac\/doctree\/ReferenceTest.java","additions":66,"deletions":4,"binary":false,"changes":70,"status":"modified"}]}