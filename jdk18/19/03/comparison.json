{"files":[{"patch":"@@ -58,3 +58,0 @@\n-  \/\/ No support for 48 extra htbl entries in aes-gcm intrinsic\n-  static const int htbl_entries = 0;\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3097,2 +3097,1 @@\n-  \/\/ subkeyHtbl_48_entries = c_rarg7 (not used)\n-  \/\/ counter = [sp, #0] pointer to 16 bytes of CTR\n+  \/\/ counter = c_rarg7 - 16 bytes of CTR\n@@ -3124,2 +3123,0 @@\n-    \/\/ Pointer to CTR is passed on the stack before the (fp, lr) pair.\n-    const Address counter_mem(sp, 2 * wordSize);\n@@ -3127,1 +3124,0 @@\n-    __ ldr(counter, counter_mem);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,3 +59,0 @@\n-  \/\/ No support for 48 extra htbl entries in aes-gcm intrinsic\n-  static const int htbl_entries = -1;\n-\n","filename":"src\/hotspot\/cpu\/arm\/matcher_arm.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,3 +60,0 @@\n-  \/\/ No support for 48 extra htbl entries in aes-gcm intrinsic\n-  static const int htbl_entries = -1;\n-\n","filename":"src\/hotspot\/cpu\/ppc\/matcher_ppc.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,3 +60,0 @@\n-  \/\/ No support for 48 extra htbl entries in aes-gcm intrinsic\n-  static const int htbl_entries = -1;\n-\n","filename":"src\/hotspot\/cpu\/s390\/matcher_s390.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -151,2 +151,0 @@\n-  \/\/ Number of htbl entries for aes-gcm intrinsic\n-  static const int htbl_entries = 96;\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4417,1 +4417,0 @@\n-    const Address avx512_subkeyH_mem(rbp, 3 * wordSize);\n@@ -4419,1 +4418,1 @@\n-    const Address counter_mem(rbp, 4 * wordSize);\n+    const Address counter_mem(rbp, 3 * wordSize);\n@@ -4428,1 +4427,0 @@\n-    const Address avx512_subkeyH_mem(rbp, 9 * wordSize);\n@@ -4430,1 +4428,1 @@\n-    const Address counter_mem(rbp, 10 * wordSize);\n+    const Address counter_mem(rbp, 9 * wordSize);\n@@ -4447,1 +4445,0 @@\n-    __ movptr(avx512_subkeyHtbl, avx512_subkeyH_mem);\n@@ -4449,0 +4446,7 @@\n+\/\/ Save rbp and rsp\n+    __ push(rbp);\n+    __ movq(rbp, rsp);\n+\/\/ Align stack\n+    __ andq(rsp, -64);\n+    __ subptr(rsp, 96 * longSize); \/\/ Create space on the stack for htbl entries\n+    __ movptr(avx512_subkeyHtbl, rsp);\n@@ -4452,0 +4456,3 @@\n+    __ movq(rsp, rbp);\n+    __ pop(rbp);\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2491,2 +2491,1 @@\n-                                  Node* parm6, Node* parm7,\n-                                  Node* parm8) {\n+                                  Node* parm6, Node* parm7) {\n@@ -2539,2 +2538,1 @@\n-  if (parm8 != NULL) { call->init_req(TypeFunc::Parms+8, parm8);\n-  \/* close each nested if ===> *\/  } } } } } } } } }\n+  \/* close each nested if ===> *\/  } } } } } } } }\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -805,2 +805,1 @@\n-                          Node* parm6 = NULL, Node* parm7 = NULL,\n-                          Node* parm8 = NULL);\n+                          Node* parm6 = NULL, Node* parm7 = NULL);\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6798,1 +6798,1 @@\n-      return false;\n+    return false;\n@@ -6814,1 +6814,0 @@\n-\n@@ -6820,16 +6819,0 @@\n-  ciKlass* klass = ciTypeArrayKlass::make(T_LONG);\n-  Node* klass_node = makecon(TypeKlassPtr::make(klass));\n-\n-  \/\/ Does this target support this intrinsic?\n-  if (Matcher::htbl_entries == -1) return false;\n-\n-  Node* subkeyHtbl_48_entries_start;\n-  if (Matcher::htbl_entries != 0) {\n-    \/\/ new array to hold 48 computed htbl entries\n-    Node* subkeyHtbl_48_entries = new_array(klass_node, intcon(Matcher::htbl_entries), 0);\n-    if (subkeyHtbl_48_entries == NULL) return false;\n-    subkeyHtbl_48_entries_start = array_element_address(subkeyHtbl_48_entries, intcon(0), T_LONG);\n-  } else {\n-    \/\/ This target doesn't need the extra-large Htbl.\n-    subkeyHtbl_48_entries_start = ConvL2X(intcon(0));\n-  }\n@@ -6841,1 +6824,1 @@\n-                               in_start, len, ct_start, out_start, k_start, state_start, subkeyHtbl_start, subkeyHtbl_48_entries_start, cnt_start);\n+                               in_start, len, ct_start, out_start, k_start, state_start, subkeyHtbl_start, cnt_start);\n@@ -6846,0 +6829,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -961,1 +961,1 @@\n-  int num_args = 9;\n+  int num_args = 8;\n@@ -972,1 +972,0 @@\n-  fields[argp++] = TypePtr::NOTNULL; \/\/ long[] avx512_subkeyHtbl newly created\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-compiler\/codegen\/aes\/TestAESMain.java 8274323 linux-x64,windows-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList-Xcomp.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}