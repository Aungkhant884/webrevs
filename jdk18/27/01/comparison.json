{"files":[{"patch":"@@ -120,0 +120,1 @@\n+    _can_omit_stack_trace = h_m->can_omit_stack_trace();\n@@ -123,0 +124,1 @@\n+    _can_omit_stack_trace = true;\n@@ -179,0 +181,1 @@\n+  _can_omit_stack_trace(true),\n@@ -770,0 +773,14 @@\n+\/\/ ciMethod::can_omit_stack_trace\n+\/\/\n+\/\/ Tries to determine whether a method can omit stack trace in throw in compiled code.\n+bool ciMethod::can_omit_stack_trace() const {\n+  if (!StackTraceInThrowable) {\n+    return true; \/\/ stack trace is switched off.\n+  }\n+  if (!OmitStackTraceInFastThrow) {\n+    return false; \/\/ Have to provide stack trace.\n+  }\n+  return _can_omit_stack_trace;\n+}\n+\n+\/\/ ------------------------------------------------------------------\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+  bool _can_omit_stack_trace;\n@@ -367,0 +368,2 @@\n+  bool can_omit_stack_trace() const;\n+\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -145,0 +145,1 @@\n+  template(sun_invoke_util_ValueConversions,          \"sun\/invoke\/util\/ValueConversions\")         \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -821,0 +821,12 @@\n+\/**\n+ *  Returns false if this is one of specially treated methods for\n+ *  which we have to provide stack trace in throw in compiled code.\n+ *  Returns true otherwise.\n+ *\/\n+bool Method::can_omit_stack_trace() {\n+  if (klass_name() == vmSymbols::sun_invoke_util_ValueConversions()) {\n+    return false; \/\/ All methods in sun.invoke.util.ValueConversions\n+  }\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -603,0 +603,3 @@\n+  \/\/ true if method can omit stack trace in throw in compiled code.\n+  bool can_omit_stack_trace();\n+\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -563,2 +563,1 @@\n-  if (treat_throw_as_hot\n-      && (!StackTraceInThrowable || OmitStackTraceInFastThrow)) {\n+  if (treat_throw_as_hot && method()->can_omit_stack_trace()) {\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277964\n+ * @summary Test IllegalArgumentException be thrown when an argument is invalid\n+ * @run testng\/othervm IllegalArgumentsTest\n+ *\/\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import org.testng.annotations.Test;\n+\n+public class IllegalArgumentsTest {\n+    static class T {\n+        public T(int i) {}\n+\n+        public static void m(int i) {}\n+\n+        public void m1(String s) {}\n+    }\n+\n+    @Test\n+    public void wrongArgumentType() throws ReflectiveOperationException {\n+        for (int i = 0; i < 100_000; ++i) {\n+            try {\n+                Constructor<T> ctor = T.class.getConstructor(int.class);\n+                ctor.newInstance(int.class);    \/\/ wrong argument type\n+                throw new RuntimeException(\"Expected IAE not thrown\");\n+            } catch (IllegalArgumentException e) {}\n+        }\n+\n+        for (int i = 0; i < 100_000; ++i) {\n+            try {\n+                Method method = T.class.getMethod(\"m\", int.class);\n+                method.invoke(null, int.class); \/\/ wrong argument type\n+                throw new RuntimeException(\"Expected IAE not thrown\");\n+            } catch (IllegalArgumentException e) {}\n+        }\n+    }\n+\n+    @Test\n+    public void nullArguments() throws ReflectiveOperationException {\n+        for (int i = 0; i < 100_000; ++i) {\n+            try {\n+                Constructor<T> ctor = T.class.getConstructor(int.class);\n+                ctor.newInstance(new Object[] {null});\n+                throw new RuntimeException(\"Expected IAE not thrown\");\n+            } catch (IllegalArgumentException e) {}\n+        }\n+\n+        for (int i = 0; i < 100_000; ++i) {\n+            try {\n+                Method method = T.class.getMethod(\"m\", int.class);\n+                method.invoke(null, new Object[] {null});\n+                throw new RuntimeException(\"Expected IAE not thrown\");\n+            } catch (IllegalArgumentException e) {}\n+        }\n+    }\n+\n+    @Test\n+    public void illegalArguments() throws ReflectiveOperationException {\n+        for (int i = 0; i < 100_000; ++i) {\n+            try {\n+                Constructor<T> ctor = T.class.getConstructor(int.class);\n+                ctor.newInstance(new Object[] { 10, 20});\n+                throw new RuntimeException(\"Expected IAE not thrown\");\n+            } catch (IllegalArgumentException e) {}\n+        }\n+\n+        for (int i = 0; i < 100_000; ++i) {\n+            try {\n+                Method method = T.class.getMethod(\"m\", int.class);\n+                method.invoke(null, new Object[] { 10, 20});\n+                throw new RuntimeException(\"Expected IAE not thrown\");\n+            } catch (IllegalArgumentException e) {}\n+        }\n+    }\n+\n+    @Test\n+    public void wrongReceiver() throws ReflectiveOperationException {\n+        for (int i = 0; i < 100_000; ++i) {\n+            try {\n+                Method method = T.class.getMethod(\"m1\", String.class);\n+                method.invoke(this, \"bad receiver\");\n+                throw new RuntimeException(\"Expected IAE not thrown\");\n+            } catch (IllegalArgumentException e) {}\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/IllegalArgumentsTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}