{"files":[{"patch":"@@ -419,0 +419,5 @@\n+  \/\/ When inlining a virtual call, the null check at the call and the call itself can throw. These 2 paths have different\n+  \/\/ expression stacks which causes late inlining to break. The MH invoker is not expected to be called from a method wih\n+  \/\/ exception handlers. When there is no exception handler, GraphKit::builtin_throw() pops the stack which solves the issue\n+  \/\/ of late inlining with exceptions.\n+  assert(!jvms->method()->has_exception_handlers(), \"no exception handler expected\");\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -617,0 +617,7 @@\n+      if (!method()->has_exception_handlers()) {\n+        \/\/ We don't need to preserve the stack if there's no handler as the entire frame is going to be popped anyway.\n+        \/\/ This prevents issues with exception handling and late inlining.\n+        set_sp(0);\n+        clean_stack(0);\n+      }\n+\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8275638\n+ * @summary GraphKit::combine_exception_states fails with \"matching stack sizes\" assert\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:CompileCommand=dontinline,TestLateMHInlineExceptions::m\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+AlwaysIncrementalInline TestLateMHInlineExceptions\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacements -XX:+IgnoreUnrecognizedVMOptions -XX:+AlwaysIncrementalInline\n+ *                   TestLateMHInlineExceptions\n+ *\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+\n+public class TestLateMHInlineExceptions {\n+    public static void main(String[] args) throws Throwable {\n+        TestLateMHInlineExceptions test = new TestLateMHInlineExceptions();\n+        for (int i = 0; i < 20_000; i++) {\n+            test1(test);\n+            try {\n+                test1(null);\n+            } catch (NullPointerException npe) {\n+            }\n+            test2(test);\n+            test2(null);\n+            test3(test);\n+            try {\n+                test3(null);\n+            } catch (NullPointerException npe) {\n+            }\n+            test4(test);\n+            test4(null);\n+        }\n+    }\n+\n+    void m() {\n+    }\n+\n+    static final MethodHandle mh;\n+\n+    static {\n+        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+        try {\n+            mh = lookup.findVirtual(TestLateMHInlineExceptions.class, \"m\", MethodType.methodType(void.class));\n+        } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Method handle lookup failed\");\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(\"Method handle lookup failed\");\n+        }\n+    }\n+\n+    private static void test1(TestLateMHInlineExceptions test) throws Throwable {\n+        mh.invokeExact(test);\n+    }\n+\n+    private static void test2(TestLateMHInlineExceptions test) throws Throwable {\n+        try {\n+            mh.invokeExact(test);\n+        } catch (NullPointerException npe) {\n+        }\n+    }\n+\n+    private static void inlined(TestLateMHInlineExceptions test) throws Throwable {\n+        mh.invokeExact(test);\n+    }\n+\n+\n+    private static void test3(TestLateMHInlineExceptions test) throws Throwable {\n+        inlined(test);\n+    }\n+\n+    private static void test4(TestLateMHInlineExceptions test) throws Throwable {\n+        try {\n+            inlined(test);\n+        } catch (NullPointerException npe) {\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/TestLateMHInlineExceptions.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}