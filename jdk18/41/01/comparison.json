{"files":[{"patch":"@@ -10594,1 +10594,1 @@\n-\/\/ ------------------------------ Shift ---------------------------------------\n+\/\/ ------------------------------ ShiftCount ----------------------------------\n@@ -10623,1 +10623,0 @@\n-\n@@ -10633,1 +10632,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10650,1 +10649,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10653,0 +10652,2 @@\n+\/\/ ------------------------------ LogicalShift --------------------------------\n+\n@@ -10667,1 +10668,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10683,1 +10684,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10700,1 +10701,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10716,1 +10717,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10733,1 +10734,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10749,1 +10750,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10766,1 +10767,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10769,1 +10770,1 @@\n-\/\/ ------------------------------ LeftShift -----------------------------------\n+\/\/ ------------------------------ LogicalLeftShift ----------------------------\n@@ -10771,1 +10772,1 @@\n-\/\/ Byte vector left shift\n+\/\/ Byte vector logical left shift\n@@ -10775,2 +10776,2 @@\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n@@ -10785,2 +10786,2 @@\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n@@ -10793,1 +10794,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n@@ -10805,1 +10806,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10809,1 +10810,1 @@\n-  predicate(n->as_Vector()->length() == 16);\n+  predicate(n->as_Vector()->length() == 16 && !n->as_ShiftV()->is_var_shift());\n@@ -10821,1 +10822,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10824,1 +10825,1 @@\n-\/\/ Shorts\/Chars vector logical left\/right shift\n+\/\/ Shorts\/Chars vector logical left shift\n@@ -10828,3 +10829,2 @@\n-  match(Set dst (URShiftVS src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n@@ -10839,3 +10839,2 @@\n-  match(Set dst (URShiftVS src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n@@ -10848,1 +10847,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n@@ -10860,1 +10859,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10864,1 +10863,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n@@ -10876,1 +10875,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10879,1 +10878,1 @@\n-\/\/ Integers vector logical left\/right shift\n+\/\/ Integers vector logical left shift\n@@ -10883,3 +10882,2 @@\n-  match(Set dst (URShiftVI src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n@@ -10894,3 +10892,2 @@\n-  match(Set dst (URShiftVI src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n@@ -10903,1 +10900,3 @@\n-  predicate(n->as_Vector()->length() == 2 && VM_Version::has_simd());\n+  predicate(n->as_Vector()->length() == 2 &&\n+            VM_Version::has_simd() &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -10915,1 +10914,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10919,1 +10918,3 @@\n-  predicate(n->as_Vector()->length() == 4 && VM_Version::has_simd());\n+  predicate(n->as_Vector()->length() == 4 &&\n+            VM_Version::has_simd() &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -10931,1 +10932,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10934,1 +10935,1 @@\n-\/\/ Longs vector logical left\/right shift\n+\/\/ Longs vector logical left shift\n@@ -10938,3 +10939,2 @@\n-  match(Set dst (URShiftVL src shift));\n-  size(4*1);\n-  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n@@ -10947,1 +10947,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -10959,1 +10959,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10968,0 +10968,10 @@\n+\/\/ Right shift with vector shift count on aarch32 SIMD is implemented as left\n+\/\/ shift by negative shift count value.\n+\/\/\n+\/\/ Method is_var_shift() denotes that vector shift count is a variable shift:\n+\/\/ 1) for this case, vector shift count should be negated before conducting\n+\/\/    right shifts. E.g., vsrl4S_reg_var rule.\n+\/\/ 2) for the opposite case, vector shift count is generated via RShiftCntV\n+\/\/    rules and is already negated there. Hence, no negation is needed.\n+\/\/    E.g., vsrl4S_reg rule.\n+\n@@ -10969,0 +10979,60 @@\n+instruct vsrl4S_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVS src shift));\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  expand %{\n+    vsh4S_reg(dst, src, shift);\n+  %}\n+%}\n+\n+instruct vsrl4S_reg_var(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 4 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVS src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.D,$shift.D\\n\\t! neg packed8B\"\n+    \"VSHL.U16 $dst.D,$src.D,$tmp.D\\t! logical right shift packed4S\"\n+  %}\n+  ins_encode %{\n+    bool quad = false;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n+instruct vsrl8S_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVS src shift));\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  expand %{\n+    vsh8S_reg(dst, src, shift);\n+  %}\n+%}\n+\n+instruct vsrl8S_reg_var(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 8 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVS src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\n\\t! neg packed16B\"\n+    \"VSHL.U16 $dst.Q,$src.Q,$tmp.Q\\t! logical right shift packed8S\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n@@ -10970,1 +11040,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n@@ -10980,1 +11050,1 @@\n-             quad);\n+              quad);\n@@ -10982,1 +11052,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -10986,1 +11056,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n@@ -10996,1 +11066,1 @@\n-             quad);\n+              quad);\n@@ -10998,1 +11068,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11002,0 +11072,68 @@\n+instruct vsrl2I_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 &&\n+            VM_Version::has_simd() &&\n+            !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVI src shift));\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  expand %{\n+    vsh2I_reg(dst, src, shift);\n+  %}\n+%}\n+\n+instruct vsrl2I_reg_var(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 2 &&\n+            VM_Version::has_simd() &&\n+            n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVI src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.D,$shift.D\\n\\t! neg packed8B\"\n+    \"VSHL.U32 $dst.D,$src.D,$tmp.D\\t! logical right shift packed2I\"\n+  %}\n+  ins_encode %{\n+    bool quad = false;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n+instruct vsrl4I_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 &&\n+            VM_Version::has_simd() &&\n+            !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVI src shift));\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  expand %{\n+    vsh4I_reg(dst, src, shift);\n+  %}\n+%}\n+\n+instruct vsrl4I_reg_var(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 4 &&\n+            VM_Version::has_simd() &&\n+            n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVI src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\n\\t! neg packed16B\"\n+    \"VSHL.U32 $dst.Q,$src.Q,$tmp.Q\\t! logical right shift packed4I\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n@@ -11003,1 +11141,3 @@\n-  predicate(n->as_Vector()->length() == 2 && VM_Version::has_simd());\n+  predicate(n->as_Vector()->length() == 2 &&\n+            VM_Version::has_simd() &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -11013,1 +11153,1 @@\n-             quad);\n+              quad);\n@@ -11015,1 +11155,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11019,1 +11159,3 @@\n-  predicate(n->as_Vector()->length() == 4 && VM_Version::has_simd());\n+  predicate(n->as_Vector()->length() == 4 &&\n+            VM_Version::has_simd() &&\n+            !n->as_ShiftV()->is_var_shift());\n@@ -11029,1 +11171,1 @@\n-             quad);\n+              quad);\n@@ -11031,1 +11173,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11035,0 +11177,30 @@\n+instruct vsrl2L_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVL src shift));\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  expand %{\n+    vsh2L_reg(dst, src, shift);\n+  %}\n+%}\n+\n+instruct vsrl2L_reg_var(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 2 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVL src shift));\n+  effect(TEMP tmp, DEF dst, USE src, USE shift);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\n\\t! neg packed16B\"\n+    \"VSHL.U64 $dst.Q,$src.Q,$tmp.Q\\t! logical right shift packed2L\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlUI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_64, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n@@ -11036,1 +11208,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -11046,1 +11218,1 @@\n-             quad);\n+              quad);\n@@ -11048,1 +11220,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11053,4 +11225,4 @@\n-\/\/ Bytes vector arithmetic left\/right shift based on sign\n-instruct vsha8B_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  effect(DEF dst, USE src, USE shift);\n+\/\/ Byte vector arithmetic right shift\n+instruct vsra8B_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src shift));\n@@ -11067,1 +11239,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11070,5 +11242,6 @@\n-instruct vsha16B_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+instruct vsra8B_reg_var(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 8 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n@@ -11076,1 +11249,2 @@\n-    \"VSHL.S8 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed16B\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\n\\t! neg packed8B\"\n+    \"VSHL.S8 $dst.D,$src.D,$tmp.D\\t! arithmetic right shift packed8B\"\n@@ -11079,2 +11253,4 @@\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+    bool quad = false;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n@@ -11083,1 +11259,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11086,4 +11262,3 @@\n-\/\/ Shorts vector arithmetic left\/right shift based on sign\n-instruct vsha4S_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  effect(DEF dst, USE src, USE shift);\n+instruct vsra16B_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src shift));\n@@ -11093,1 +11268,1 @@\n-    \"VSHL.S16 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed4S\"\n+    \"VSHL.S8 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed16B\"\n@@ -11096,1 +11271,1 @@\n-    bool quad = false;\n+    bool quad = true;\n@@ -11098,1 +11273,1 @@\n-              MacroAssembler::VELEM_SIZE_16, quad);\n+              MacroAssembler::VELEM_SIZE_8, quad);\n@@ -11100,1 +11275,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11103,5 +11278,6 @@\n-instruct vsha8S_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  effect(DEF dst, USE src, USE shift);\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+instruct vsra16B_reg_var(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 16 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n@@ -11109,1 +11285,2 @@\n-    \"VSHL.S16 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed8S\"\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\n\\t! neg packed16B\"\n+    \"VSHL.S8 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic right shift packed16B\"\n@@ -11113,2 +11290,4 @@\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_16, quad);\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_8, quad);\n@@ -11116,1 +11295,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11119,4 +11298,3 @@\n-\/\/ Integers vector arithmetic left\/right shift based on sign\n-instruct vsha2I_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  effect(DEF dst, USE src, USE shift);\n+instruct vsra8B_immI(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src (RShiftCntV shift)));\n@@ -11126,1 +11304,1 @@\n-    \"VSHL.S32 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed2I\"\n+    \"VSHR.S8 $dst.D,$src.D,$shift\\t! arithmetic right shift packed8B\"\n@@ -11130,2 +11308,2 @@\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_32, quad);\n+    __ vshrSI($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n+              quad);\n@@ -11133,1 +11311,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11136,3 +11314,3 @@\n-instruct vsha4I_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  effect(DEF dst, USE src, USE shift);\n+instruct vsra16B_immI(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 16 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src (RShiftCntV shift)));\n@@ -11142,1 +11320,1 @@\n-    \"VSHL.S32 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed4I\"\n+    \"VSHR.S8 $dst.Q,$src.Q,$shift\\t! arithmetic right shift packed16B\"\n@@ -11146,2 +11324,2 @@\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_32, quad);\n+    __ vshrSI($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n+              quad);\n@@ -11149,1 +11327,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11152,4 +11330,4 @@\n-\/\/ Longs vector arithmetic left\/right shift based on sign\n-instruct vsha2L_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  effect(DEF dst, USE src, USE shift);\n+\/\/ Shorts vector arithmetic right shift\n+instruct vsra4S_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS src shift));\n@@ -11159,1 +11337,1 @@\n-    \"VSHL.S64 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed2L\"\n+    \"VSHL.S16 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed4S\"\n@@ -11162,1 +11340,1 @@\n-    bool quad = true;\n+    bool quad = false;\n@@ -11164,24 +11342,1 @@\n-              MacroAssembler::VELEM_SIZE_64, quad);\n-  %}\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n-%}\n-\n-\/\/ Byte vector arithmetic right shift\n-\n-instruct vsra8B_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVB src shift));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha8B_reg(dst, src, shift);\n-  %}\n-%}\n-\n-instruct vsrl16B_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (RShiftVB src shift));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha16B_reg(dst, src, shift);\n+              MacroAssembler::VELEM_SIZE_16, quad);\n@@ -11189,0 +11344,1 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11191,5 +11347,6 @@\n-instruct vsrl8B_immI(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVB src shift));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+instruct vsra4S_reg_var(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 4 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n@@ -11197,1 +11354,2 @@\n-    \"VSHR.S8 $dst.D,$src.D,$shift\\t! logical right shift packed8B\"\n+    \"VNEG.S8 $tmp.D,$shift.D\\n\\t! neg packed8B\"\n+    \"VSHL.S16 $dst.D,$src.D,$tmp.D\\t! arithmetic right shift packed4S\"\n@@ -11201,2 +11359,4 @@\n-    __ vshrSI($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n-             quad);\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, quad);\n@@ -11204,1 +11364,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11207,3 +11367,3 @@\n-instruct vsrl16B_immI(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (RShiftVB src shift));\n+instruct vsra8S_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS src shift));\n@@ -11213,1 +11373,1 @@\n-    \"VSHR.S8 $dst.Q,$src.Q,$shift\\t! logical right shift packed16B\"\n+    \"VSHL.S16 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed8S\"\n@@ -11217,2 +11377,2 @@\n-    __ vshrSI($dst$$FloatRegister, $src$$FloatRegister, 8, $shift$$constant,\n-             quad);\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, quad);\n@@ -11220,1 +11380,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11223,3 +11383,2 @@\n-\/\/ Shorts vector arithmetic right shift\n-instruct vsra4S_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n+instruct vsra8S_reg_var(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 8 && n->as_ShiftV()->is_var_shift());\n@@ -11227,4 +11386,6 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha4S_reg(dst, src, shift);\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\n\\t! neg packed16B\"\n+    \"VSHL.S16 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic right shift packed8S\"\n@@ -11232,9 +11393,6 @@\n-%}\n-\n-instruct vsra8S_reg(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVS src shift));\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n-  expand %{\n-    vsha8S_reg(dst, src, shift);\n+  ins_encode %{\n+    bool quad = true;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, quad);\n@@ -11242,0 +11400,1 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11245,2 +11404,2 @@\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (RShiftVS src shift));\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS src (RShiftCntV shift)));\n@@ -11250,1 +11409,1 @@\n-    \"VSHR.S16 $dst.D,$src.D,$shift\\t! logical right shift packed4S\"\n+    \"VSHR.S16 $dst.D,$src.D,$shift\\t! arithmetic right shift packed4S\"\n@@ -11255,1 +11414,1 @@\n-             quad);\n+              quad);\n@@ -11257,1 +11416,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11261,2 +11420,2 @@\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVS src shift));\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS src (RShiftCntV shift)));\n@@ -11266,1 +11425,1 @@\n-    \"VSHR.S16 $dst.Q,$src.Q,$shift\\t! logical right shift packed8S\"\n+    \"VSHR.S16 $dst.Q,$src.Q,$shift\\t! arithmetic right shift packed8S\"\n@@ -11271,1 +11430,1 @@\n-             quad);\n+              quad);\n@@ -11273,1 +11432,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11278,1 +11437,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -11282,2 +11441,7 @@\n-  expand %{\n-    vsha2I_reg(dst, src, shift);\n+  format %{\n+    \"VSHL.S32 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed2I\"\n+  %}\n+  ins_encode %{\n+    bool quad = false;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n@@ -11285,0 +11449,21 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n+instruct vsra2I_reg_var(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 2 && n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVI src shift));\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.D,$shift.D\\n\\t! neg packed8B\"\n+    \"VSHL.S32 $dst.D,$src.D,$tmp.D\\t! arithmetic right shift packed2I\"\n+  %}\n+  ins_encode %{\n+    bool quad = false;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11288,1 +11473,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n@@ -11292,2 +11477,7 @@\n-  expand %{\n-    vsha4I_reg(dst, src, shift);\n+  format %{\n+    \"VSHL.S32 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed4I\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n@@ -11295,0 +11485,1 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11297,2 +11488,2 @@\n-instruct vsra2I_immI(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsra4I_reg_var(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 4 && n->as_ShiftV()->is_var_shift());\n@@ -11300,0 +11491,20 @@\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\n\\t! neg packed16B\"\n+    \"VSHL.S32 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic right shift packed4I\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n+instruct vsra2I_immI(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVI src (RShiftCntV shift)));\n@@ -11303,1 +11514,1 @@\n-    \"VSHR.S32 $dst.D,$src.D,$shift\\t! logical right shift packed2I\"\n+    \"VSHR.S32 $dst.D,$src.D,$shift\\t! arithmetic right shift packed2I\"\n@@ -11308,1 +11519,1 @@\n-             quad);\n+              quad);\n@@ -11310,1 +11521,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11314,2 +11525,2 @@\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (RShiftVI src shift));\n+  predicate(n->as_Vector()->length() == 4 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVI src (RShiftCntV shift)));\n@@ -11319,1 +11530,1 @@\n-    \"VSHR.S32 $dst.Q,$src.Q,$shift\\t! logical right shift packed4I\"\n+    \"VSHR.S32 $dst.Q,$src.Q,$shift\\t! arithmetic right shift packed4I\"\n@@ -11324,1 +11535,1 @@\n-             quad);\n+              quad);\n@@ -11326,1 +11537,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11331,1 +11542,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n@@ -11335,2 +11546,7 @@\n-  expand %{\n-    vsha2L_reg(dst, src, shift);\n+  format %{\n+    \"VSHL.S64 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed2L\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_64, quad);\n@@ -11338,0 +11554,1 @@\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11340,2 +11557,2 @@\n-instruct vsra2L_immI(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsra2L_reg_var(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 2 && n->as_ShiftV()->is_var_shift());\n@@ -11343,0 +11560,20 @@\n+  effect(TEMP tmp);\n+  size(4*2);\n+  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  format %{\n+    \"VNEG.S8 $tmp.Q,$shift.Q\\n\\t! neg packed16B\"\n+    \"VSHL.S64 $dst.Q,$src.Q,$tmp.Q\\t! arithmetic right shift packed2L\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vnegI($tmp$$FloatRegister, $shift$$FloatRegister,\n+             MacroAssembler::VELEM_SIZE_8, quad);\n+    __ vshlSI($dst$$FloatRegister, $tmp$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_64, quad);\n+  %}\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+%}\n+\n+instruct vsra2L_immI(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVL src (RShiftCntV shift)));\n@@ -11346,1 +11583,1 @@\n-    \"VSHR.S64 $dst.Q,$src.Q,$shift\\t! logical right shift packed2L\"\n+    \"VSHR.S64 $dst.Q,$src.Q,$shift\\t! arithmetic right shift packed2L\"\n@@ -11351,1 +11588,1 @@\n-             quad);\n+              quad);\n@@ -11353,1 +11590,1 @@\n-  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg); \/\/ FIXME\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":443,"deletions":206,"binary":false,"changes":649,"status":"modified"},{"patch":"@@ -534,1 +534,2 @@\n- bool _is_var_shift;\n+ private:\n+  bool _is_var_shift;\n@@ -542,0 +543,4 @@\n+  virtual uint hash() const { return VectorNode::hash() + _is_var_shift; }\n+  virtual bool cmp(const Node& n) const {\n+    return VectorNode::cmp(n) && _is_var_shift == ((ShiftVNode&)n)._is_var_shift;\n+  }\n@@ -543,1 +548,1 @@\n-  virtual  uint  size_of() const { return sizeof(ShiftVNode); }\n+  virtual uint size_of() const { return sizeof(ShiftVNode); }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}