[{"commit":{"message":"Add \"assert\" for immI cases\n\nDefine helper assert_not_var_shift() and use it for immI cases.\n\nBesides, update the copyright year to 2022."},"files":[{"filename":"src\/hotspot\/cpu\/arm\/arm.ad"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"6b09742ff3211faaec723d9cf561d2556879f3fb"},{"commit":{"message":"Make minimal updates to exisiting rules\n\n1. logical left shift rules\na). add is_var_shift check for vslAA_immI rules.\nb). for vslAA_reg rules, remove the matching for URShiftV cases as we\nhave the separate logical right shift rules now.\n\n2. logical right shift rules\na). add vsrlAA_reg and vsrlAA_reg_var rules.\nb). add is_var_shift check for vsrlAA_immI rules.\n\n3. arithmetic right shift rules\na). add is_var_shift check for vsraAA_reg rules.\nb). add vsraAA_reg_var rules\nc). for vsraAA_immI rules, add is_var_shift check and update the match\nprimitive.\n\nCode style issues(FIXME and the surrounding space in ins_pipe):\n1. for modified rules, keep it as it was\n2. for newly added rules, update the style"},"files":[{"filename":"src\/hotspot\/cpu\/arm\/arm.ad"}],"sha":"566efefe2096237f86d0643e4d288e6aa49d1578"},{"commit":{"message":"Use is_var_shift() to determmine the location of negation use for right shifts\n\nMethod is_var_shift() denotes that vector shift count is a variable\nshift:\n1) for this case, vector shift count should be negated before conducting\n   right shifts. E.g., vsrl4S_reg_var rule.\n2) for the opposite case, vector shift count is generated via RShiftCntV\n   rules and is already negated there. Hence, no negation is needed.\n   E.g., vsrl4S_reg rule.\n\nBesides, it's safe to add \"hash()\" and \"cmp()\" methods for ShiftV node."},"files":[{"filename":"src\/hotspot\/cpu\/arm\/arm.ad"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"}],"sha":"05dfae3ae54118d9a43c230f3f20e915bb51c19c"},{"commit":{"message":"8278267: ARM32: several vector test failures for ASHR\n\nIn ARM32, \"VSHL (register)\" instruction [1] is shared by vector left\nshift and vector right shift, and the condition to distinguish them is\nwhether the shift count value is positve or negative. Hence, negation\noperation is needed before conducting vector right shift.\n\nFor vector right shift, the shift count can be a RShiftCntV or a normal\nvector node. Take test case Byte64VectorTests.java [2][3] as an example.\nNote that RShiftCntV is already negated via rules \"vsrcntD\" and\n\"vsrcntX\" whereas the normal vector node is NOT, since we don't know\nwhether a normal vector node is used as a vector shift count or not.\nThis is the root cause for these vector test failures.\n\nThe fix is simple, moving the negation from \"vsrcntD|X\" to the\ncorresponding vector right shift rules.\n\nAffected rules are vsrlBB_reg and vsraBB_reg. Note that vector shift\nrelated rules are in form of \"vsAABB_CC\", where\n1) AA can be l (left shift), rl (logical right shift) and ra (arithmetic\n  right shift).\n2) BB can be 8B\/16B (byte type), 4S\/8S (short type), 2I\/4I (int type)\n  and 2L (long type).\n3) CC can be reg (register case) and immI (immediate case).\n\nMinor updates:\n1) Merge \"vslcntD\" and \"vsrcntD\" into rule \"vscntD\", as these two rules\nconduct the same duplication operation now.\n2) Update the \"match\" primitive for vsraBB_immI rules.\n3) Style issue: remove the surrounding space for \"ins_pipe\" primitive.\n\nTests:\nWe ran tier 1~3 tests on ARM32 platform. With this patch, previously\nfailed vector test cases can pass now without introducing test\nregression.\n\n[1] https:\/\/developer.arm.com\/documentation\/ddi0406\/c\/Application-Level-Architecture\/Instruction-Details\/Alphabetical-list-of-instructions\/VSHL--register-?lang=en\n[2] https:\/\/github.com\/openjdk\/jdk\/blame\/master\/test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java#L2237\n[3] https:\/\/github.com\/openjdk\/jdk\/blame\/master\/test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java#L2425"},"files":[{"filename":"src\/hotspot\/cpu\/arm\/arm.ad"}],"sha":"3d29fb2ccf303942ecbd104ed8639983cb3d7a60"}]