{"files":[{"patch":"@@ -10623,0 +10623,1 @@\n+\n@@ -10632,1 +10633,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10649,1 +10650,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10668,1 +10669,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10684,1 +10685,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10701,1 +10702,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10717,1 +10718,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10734,1 +10735,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10750,1 +10751,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10767,1 +10768,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10776,2 +10777,2 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  size(4*1);\n+  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n@@ -10786,2 +10787,2 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  size(4*1);\n+  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n@@ -10806,1 +10807,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10822,1 +10823,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10829,2 +10830,2 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  size(4*1);\n+  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n@@ -10839,2 +10840,2 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  size(4*1);\n+  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n@@ -10859,1 +10860,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10875,1 +10876,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10882,2 +10883,2 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  size(4*1);\n+  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n@@ -10892,2 +10893,2 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  size(4*1);\n+  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n@@ -10914,1 +10915,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10932,1 +10933,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10939,2 +10940,2 @@\n-  size(4);\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  size(4*1);\n+  ins_cost(DEFAULT_COST*1); \/\/ FIXME\n@@ -10959,1 +10960,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -10983,1 +10984,1 @@\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  ins_cost(DEFAULT_COST);\n@@ -10994,1 +10995,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11006,1 +11007,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11013,1 +11014,1 @@\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  ins_cost(DEFAULT_COST);\n@@ -11024,1 +11025,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11036,1 +11037,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11050,1 +11051,1 @@\n-              quad);\n+             quad);\n@@ -11052,1 +11053,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11066,1 +11067,1 @@\n-              quad);\n+             quad);\n@@ -11068,1 +11069,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11078,1 +11079,1 @@\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  ins_cost(DEFAULT_COST);\n@@ -11091,1 +11092,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11103,1 +11104,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11112,1 +11113,1 @@\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  ins_cost(DEFAULT_COST);\n@@ -11125,1 +11126,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11137,1 +11138,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11153,1 +11154,1 @@\n-              quad);\n+             quad);\n@@ -11155,1 +11156,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11171,1 +11172,1 @@\n-              quad);\n+             quad);\n@@ -11173,1 +11174,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11181,1 +11182,1 @@\n-  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  ins_cost(DEFAULT_COST);\n@@ -11192,1 +11193,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11204,1 +11205,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11218,1 +11219,1 @@\n-              quad);\n+             quad);\n@@ -11220,1 +11221,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11225,4 +11226,4 @@\n-\/\/ Byte vector arithmetic right shift\n-instruct vsra8B_reg(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n-  match(Set dst (RShiftVB src shift));\n+\/\/ Bytes vector arithmetic left\/right shift based on sign\n+instruct vsha8B_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  effect(DEF dst, USE src, USE shift);\n@@ -11239,1 +11240,111 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+%}\n+\n+instruct vsha16B_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  effect(DEF dst, USE src, USE shift);\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.S8 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed16B\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_8, quad);\n+  %}\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+%}\n+\n+\/\/ Shorts vector arithmetic left\/right shift based on sign\n+instruct vsha4S_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  effect(DEF dst, USE src, USE shift);\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.S16 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed4S\"\n+  %}\n+  ins_encode %{\n+    bool quad = false;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, quad);\n+  %}\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+%}\n+\n+instruct vsha8S_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  effect(DEF dst, USE src, USE shift);\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.S16 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed8S\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_16, quad);\n+  %}\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+%}\n+\n+\/\/ Integers vector arithmetic left\/right shift based on sign\n+instruct vsha2I_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  effect(DEF dst, USE src, USE shift);\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.S32 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed2I\"\n+  %}\n+  ins_encode %{\n+    bool quad = false;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n+  %}\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+%}\n+\n+instruct vsha4I_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  effect(DEF dst, USE src, USE shift);\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.S32 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed4I\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_32, quad);\n+  %}\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+%}\n+\n+\/\/ Longs vector arithmetic left\/right shift based on sign\n+instruct vsha2L_reg(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  effect(DEF dst, USE src, USE shift);\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  format %{\n+    \"VSHL.S64 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed2L\"\n+  %}\n+  ins_encode %{\n+    bool quad = true;\n+    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n+              MacroAssembler::VELEM_SIZE_64, quad);\n+  %}\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n+%}\n+\n+\/\/ Byte vector arithmetic right shift\n+instruct vsra8B_reg(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVB src shift));\n+  size(4);\n+  ins_cost(DEFAULT_COST); \/\/ FIXME\n+  expand %{\n+    vsha8B_reg(dst, src, shift);\n+  %}\n@@ -11247,1 +11358,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11259,1 +11370,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11267,7 +11378,2 @@\n-  format %{\n-    \"VSHL.S8 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed16B\"\n-  %}\n-  ins_encode %{\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_8, quad);\n+  expand %{\n+    vsha16B_reg(dst, src, shift);\n@@ -11275,1 +11381,0 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11283,1 +11388,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11295,1 +11400,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11309,1 +11414,1 @@\n-              quad);\n+             quad);\n@@ -11311,1 +11416,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11325,1 +11430,1 @@\n-              quad);\n+             quad);\n@@ -11327,1 +11432,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11336,7 +11441,2 @@\n-  format %{\n-    \"VSHL.S16 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed4S\"\n-  %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_16, quad);\n+  expand %{\n+    vsha4S_reg(dst, src, shift);\n@@ -11344,1 +11444,0 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11352,1 +11451,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11364,1 +11463,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11372,7 +11471,2 @@\n-  format %{\n-    \"VSHL.S16 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed8S\"\n-  %}\n-  ins_encode %{\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_16, quad);\n+  expand %{\n+    vsha8S_reg(dst, src, shift);\n@@ -11380,1 +11474,0 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11388,1 +11481,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11400,1 +11493,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11414,1 +11507,1 @@\n-              quad);\n+             quad);\n@@ -11416,1 +11509,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11430,1 +11523,1 @@\n-              quad);\n+             quad);\n@@ -11432,1 +11525,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11441,7 +11534,2 @@\n-  format %{\n-    \"VSHL.S32 $dst.D,$src.D,$shift.D\\t! arithmetic right shift packed2I\"\n-  %}\n-  ins_encode %{\n-    bool quad = false;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_32, quad);\n+  expand %{\n+    vsha2I_reg(dst, src, shift);\n@@ -11449,1 +11537,0 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11457,1 +11544,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11469,1 +11556,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11477,7 +11564,2 @@\n-  format %{\n-    \"VSHL.S32 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed4I\"\n-  %}\n-  ins_encode %{\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_32, quad);\n+  expand %{\n+    vsha4I_reg(dst, src, shift);\n@@ -11485,1 +11567,0 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11493,1 +11574,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11505,1 +11586,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11519,1 +11600,1 @@\n-              quad);\n+             quad);\n@@ -11521,1 +11602,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11535,1 +11616,1 @@\n-              quad);\n+             quad);\n@@ -11537,1 +11618,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n@@ -11546,7 +11627,2 @@\n-  format %{\n-    \"VSHL.S64 $dst.Q,$src.Q,$shift.Q\\t! arithmetic right shift packed2L\"\n-  %}\n-  ins_encode %{\n-    bool quad = true;\n-    __ vshlSI($dst$$FloatRegister, $shift$$FloatRegister, $src$$FloatRegister,\n-              MacroAssembler::VELEM_SIZE_64, quad);\n+  expand %{\n+    vsha2L_reg(dst, src, shift);\n@@ -11554,1 +11630,0 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n@@ -11562,1 +11637,1 @@\n-  ins_cost(DEFAULT_COST*2); \/\/ FIXME\n+  ins_cost(DEFAULT_COST*2);\n@@ -11574,1 +11649,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe(ialu_reg_reg);\n@@ -11588,1 +11663,1 @@\n-              quad);\n+             quad);\n@@ -11590,1 +11665,1 @@\n-  ins_pipe(ialu_reg_reg); \/\/ FIXME\n+  ins_pipe( ialu_reg_reg ); \/\/ FIXME\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":211,"deletions":136,"binary":false,"changes":347,"status":"modified"}]}