{"files":[{"patch":"@@ -73,0 +73,2 @@\n+            System.out.println(\"Before setMaxSize(1_000_000)\");\n+            fileCount(dir);\n@@ -74,0 +76,1 @@\n+            System.out.println(\"After setMaxSize(1_000_000)\");\n@@ -75,4 +78,6 @@\n-            if (count > 2) {\n-                \/\/ Two chunks can happen when header of new chunk is written and previous\n-                \/\/ chunk is not finalized.\n-                throw new Exception(\"Expected only one or two chunks with setMaxSize(1_000_000). Found \" + count);\n+            if (count > 3) {\n+                \/\/ Three files can happen when:\n+                \/\/ File 1: Header of new chunk is written to disk\n+                \/\/ File 2: Previous chunk is not yet finalized and added to list of DiskChunks\n+                \/\/ File 3: Previous previous file is in the list of DiskChunks.\n+                throw new Exception(\"Expected at most three chunks with setMaxSize(1_000_000). Found \" + count);\n@@ -97,1 +102,1 @@\n-            System.out.println(p);\n+            System.out.println(p + \" \" + fileSize(p));\n@@ -104,7 +109,1 @@\n-        long p = Files.list(dir).mapToLong(f -> {\n-            try {\n-                return Files.size(f);\n-            } catch (IOException e) {\n-                return 0;\n-            }\n-        }).sum();\n+        long p = Files.list(dir).mapToLong(f -> fileSize(f)).sum();\n@@ -114,0 +113,9 @@\n+\n+    private static long fileSize(Path p) {\n+        try {\n+            return Files.size(p);\n+        } catch (IOException e) {\n+            System.out.println(\"Could not determine file size for \" + p);\n+            return 0;\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/streaming\/TestMaxSize.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"}]}