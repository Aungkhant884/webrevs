[{"commit":{"message":"8279654: jdk\/incubator\/vector\/Vector256ConversionTests.java crashes randomly with SVE\n\nWhile testing some vector api cases on SVE system, we see a random\nfailure:\n\"assert(C->node_arena()->contains(s->_leaf) || !has_new_node\n(s->_leaf)) failed: duplicating node that's already been matched\".\n\nThe root cause is that the if-condition in pd_clone_node()[1] is not\naligned with predicate conditions[2] of match rules in the backend.\nNot all StoreVector (VectorStoreMask src) node patterns can be matched\nand subsumed into one instruction in the backend. For example, there\nis no match rule to combine them when the element basic type is\nT_BYTE, as the cost of VectorStoreMask for byte type is relative\nlow and there is no need to do narrow operations.\n\nHere is the analysis about root cause in detail. When a multi-use\nVectorStoreMask node, whose type is byte, showed as below,\n\n          |\n  VectorStoreMask (T_BYTE)\n      \/         \\\nCall\/Others     StoreVector (T_BYTE)\n\nis identified by pd_clone_node() successfully, it will not be set\nshared in the stage of find_shared() if only the root selector visits\nthe call node earlier than StoreVector node[3]. The preorder walk\nin xform()[4][5] visits the VectorStoreMask node and reduces it by\nReduceInst() starting from the call node first, then visits the\nVectorStoreMask node again starting from the StoreVector node as\nmentioned before. During the second visit, in the stage of\nLabel_Root(), the postorder walk along use-def edges starts from the\nStoreVector node and then visits the VectorStoreMask node. It takes\nthe VectorStoreMask node as an interior of the subtree and generates\nthe corresponding state tree[6]. But in the stage of\nReduceInst_Interior(), there is no internal rule in the backend to\nreduce the VectorStoreMask node as the state tree guides. Thus, the\nreducer has to reduce the VectorStoreMask node independently and visit\nit by ReduceInst()[7]. Therefore, it tries to reduce the VectorStoreMask\nnode twice by ReduceInst(), resulting in the assertion failure. Assuming\nthat there was a match rule to combine these two byte nodes,\nStoreVector (VectorStoreMask src), it could find an internal rule in the\nbackend to help skip the interior VectorStoreMask node, do nothing\nbut recurse[8], and no assertion happens. If we delete the check for\nVectorStoreMask in pd_clone_node(), the VectorStoreMask node is going to\nbe set shared in find_shared() and could be definitely reduced only once\nwith no assertion failure[9][10].\n\nThere are two different methods to fix this issue.\n\nThe first one is setting the condition in pd_clone_node() the same as\nmatching rules, making sure that all instruction sequences declared in\npd_clone_node() can be subsumed by matching rules. However, the\ncondition code has to be revisited when matching rules change in the\nfuture. It's not easy to maintain.\n\nThe other one is that we can remove the if-condition code for\nVectorStoreMask in pd_clone_node(). As a result, when a VectorStoreMask\nnode has multiple use, it can't be matched by any chained rules. But\nafter JDK-8273949, a multi-use VectorStoreMask node only exists for\nsafepoint[11], which is not very common. Furthermore, even if a\nmulti-use VectorStoreMask node occurs, the pattern is identified in the\npd_clone_node() and a match rule is ready to subsume it in the backend,\nthe combination may not happen due to some unexpected matching order\nissue. For example, in this case,\n\n          |\n  VectorStoreMask\n      \/         \\\nStoreVector  Call\/Others\n\nif we visit the StoreVector node first then the call node, the\nVectorStoreMask node is still going to be set shared and the prevention\nfrom pd_clone_node() doesn't work based on the current logic of\nfind_shared()[12]. Once the node is set shared, there is no code path to\nuse internal combination rule to subsume the chained\nStoreVector-VectorStoreMask nodes into one machine instruction.\n\nBased on the above mentioned considerations, to make the code more\nmaintainable, we choose the second one, which decouples pd_clone_node()\nfrom predicate conditions of matching rules in the backend with minimal\nimpact on performance.\n\nI tested the patch using all vector cases under compiler\/vectorization,\ncompiler\/vectorapi and jdk\/incubator\/vector on SVE for multiple times.\nIt passed all these tests.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/cpu\/aarch64\/aarch64.ad#L2738\n[2] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad#L2101\n[3] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L2151\n[4] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L1097\n[5] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L1119\n[6] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L1694\n[7] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L1977\n[8] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L1975\n[9] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L1692\n[10] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L1969\n[11] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/vector.cpp#L262\n[12] https:\/\/github.com\/openjdk\/jdk\/blob\/8d1a1e83f40f7a147e033be6b2221c1bb1abd8ab\/src\/hotspot\/share\/opto\/matcher.cpp#L2125\n\nChange-Id: I0a1baba9c49e11813c65d28882b837f33cf478d9"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"}],"sha":"e6430211e5180b676b935ccd8f537ccd20995c85"}]