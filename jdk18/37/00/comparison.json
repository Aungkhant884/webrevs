{"files":[{"patch":"@@ -53,2 +53,2 @@\n-    static IllegalStateException newIllegalStateExceptionForMisalignedAccess(long address) {\n-        return new IllegalStateException(\"Misaligned access at address: \" + address);\n+    static IllegalArgumentException newIllegalArgumentExceptionForMisalignedAccess(long address) {\n+        return new IllegalArgumentException(\"Misaligned access at address: \" + address);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemoryAccessVarHandleBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-            throw MemoryAccessVarHandleBase.newIllegalStateExceptionForMisalignedAccess(address);\n+            throw MemoryAccessVarHandleBase.newIllegalArgumentExceptionForMisalignedAccess(address);\n@@ -118,0 +118,1 @@\n+        long maxAlignMask = bb.maxAlignMask();\n@@ -120,2 +121,2 @@\n-            if ((base & alignmentMask) != 0) {\n-                throw MemoryAccessVarHandleBase.newIllegalStateExceptionForMisalignedAccess(address);\n+            if (((base | maxAlignMask) & alignmentMask) != 0) {\n+                throw MemoryAccessVarHandleBase.newIllegalArgumentExceptionForMisalignedAccess(address);\n@@ -124,2 +125,2 @@\n-            if ((address & alignmentMask) != 0) {\n-                throw MemoryAccessVarHandleBase.newIllegalStateExceptionForMisalignedAccess(address);\n+            if (((address | maxAlignMask) & alignmentMask) != 0) {\n+                throw MemoryAccessVarHandleBase.newIllegalArgumentExceptionForMisalignedAccess(address);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    public abstract long maxAlignMask();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/foreign\/MemorySegmentProxy.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -177,0 +177,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -195,0 +197,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -213,0 +217,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -231,0 +237,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -249,0 +257,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -267,0 +277,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -285,0 +297,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -303,0 +317,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -321,0 +337,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -339,0 +357,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -357,0 +377,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -375,0 +397,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -393,0 +417,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -411,0 +437,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -429,0 +457,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -447,0 +477,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -465,0 +497,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -483,0 +517,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -501,0 +537,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -519,0 +558,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -537,0 +579,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -555,0 +600,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -573,0 +621,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -591,0 +642,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -609,0 +663,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -627,0 +684,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -645,0 +705,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -663,0 +726,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -681,0 +747,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -699,0 +768,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -717,0 +789,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -735,0 +810,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemoryAddress.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -142,0 +142,50 @@\n+ * <h2 id=\"segment-alignment\">Alignment<\/h2>\n+ *\n+ * When dereferencing a memory segment using a layout, the runtime must check that the segment address being dereferenced\n+ * matches the layout's {@linkplain MemoryLayout#byteAlignment() alignment constraints}. If the segment being\n+ * dereferenced is a native segment, then it has a concrete {@linkplain #address() base address}, which can\n+ * be used to perform the alignment check. The pseudo-function below demonstrates this:\n+ *\n+ * <blockquote><pre>{@code\n+boolean isAligned(MemorySegment segment, long offset, MemoryLayout layout) {\n+   return ((segment.address().toRawLongValue() + offset) % layout.byteAlignment()) == 0\n+}\n+ * }<\/pre><\/blockquote>\n+ *\n+ * If, however, the segment being dereferenced is a heap segment, the above function will not work: a heap\n+ * segment's base address is <em>virtualized<\/em> and, as such, cannot be used to construct an alignment check. Instead,\n+ * heap segments are assumed to produce addresses which are never more aligned than the element size of the Java array from which\n+ * they have originated from, as shown in the following table:\n+ *\n+ * <blockquote><table class=\"plain\">\n+ * <caption style=\"display:none\">Array type of an array backing a segment and its address alignment<\/caption>\n+ * <thead>\n+ * <tr>\n+ *     <th scope=\"col\">Array type<\/th>\n+ *     <th scope=\"col\">Alignment<\/th>\n+ * <\/tr>\n+ * <\/thead>\n+ * <tbody>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code boolean[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 1}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code byte[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 1}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code char[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 2}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code short[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 2}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code int[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 4}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code float[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 4}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code long[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 8}<\/td><\/tr>\n+ * <tr><th scope=\"row\" style=\"font-weight:normal\">{@code double[]}<\/th>\n+ *     <td style=\"text-align:center;\">{@code 8}<\/td><\/tr>\n+ * <\/tbody>\n+ * <\/table><\/blockquote>\n+ *\n+ * Note that the above definition is conservative: it might be possible, for instance, that a heap segment\n+ * constructed from a {@code byte[]} might have a subset of addresses {@code S} which happen to be 8-byte aligned. But determining\n+ * which segment addresses belong to {@code S} requires reasoning about details which are ultimately implementation-dependent.\n+ *\n@@ -229,1 +279,3 @@\n-     * {@code elementLayout} size is greater than zero.\n+     * {@code elementLayout} size is greater than zero, if this segment is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the {@code elementLayout} alignment is greater than its size.\n@@ -243,1 +295,3 @@\n-     * {@code elementLayout} size is greater than zero.\n+     * {@code elementLayout} size is greater than zero, if this segment is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the {@code elementLayout} alignment is greater than its size.\n@@ -985,3 +1039,3 @@\n-     * @throws IllegalArgumentException if the element layouts have different sizes, if the source offset is incompatible\n-     * with the alignment constraints in the source element layout, or if the destination offset is incompatible with the\n-     * alignment constraints in the destination element layout.\n+     * @throws IllegalArgumentException if the element layouts have different sizes, if the source (resp. destination) segment\/offset are\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the source\n+     * (resp. destination) element layout, or if the source (resp. destination) element layout alignment is greater than its size.\n@@ -1006,1 +1060,1 @@\n-            throw new IllegalArgumentException(\"Source and destination layouts must have same sizes\");\n+            throw new IllegalArgumentException(\"Source and destination layouts must have same size\");\n@@ -1008,1 +1062,3 @@\n-        if (srcOffset % srcElementLayout.byteAlignment() != 0) {\n+        Utils.checkElementAlignment(srcElementLayout, \"Source layout alignment greater than its size\");\n+        Utils.checkElementAlignment(dstElementLayout, \"Destination layout alignment greater than its size\");\n+        if (!srcImpl.isAlignedForElement(srcOffset, srcElementLayout)) {\n@@ -1011,2 +1067,2 @@\n-        if (dstOffset % dstElementLayout.byteAlignment() != 0) {\n-            throw new IllegalArgumentException(\"Target segment incompatible with alignment constraints\");\n+        if (!dstImpl.isAlignedForElement(dstOffset, dstElementLayout)) {\n+            throw new IllegalArgumentException(\"Destination segment incompatible with alignment constraints\");\n@@ -1037,0 +1093,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1054,0 +1112,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1072,0 +1132,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1089,0 +1151,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1107,0 +1171,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1124,0 +1190,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1142,0 +1210,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1159,0 +1229,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1177,0 +1249,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1194,0 +1268,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1212,0 +1288,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1229,0 +1307,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1247,0 +1327,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1264,0 +1346,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1282,0 +1366,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1299,0 +1385,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1317,0 +1405,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1334,0 +1424,2 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout.\n@@ -1352,0 +1444,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1357,0 +1452,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1369,0 +1465,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1375,0 +1474,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1387,0 +1487,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1392,0 +1495,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1404,0 +1508,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1410,0 +1517,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1422,0 +1530,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1427,0 +1538,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1439,0 +1551,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1445,0 +1560,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1457,0 +1573,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1462,0 +1581,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1474,0 +1594,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1480,0 +1603,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1492,0 +1616,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1497,0 +1624,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1509,0 +1637,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1515,0 +1646,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1527,0 +1659,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1532,0 +1667,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1544,0 +1680,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1550,0 +1689,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1562,0 +1702,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1567,0 +1710,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1579,0 +1723,3 @@\n+     * @throws IllegalArgumentException if the dereference operation is\n+     * <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the provided layout,\n+     * or if the layout alignment is greater than its size.\n@@ -1585,0 +1732,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -1601,1 +1749,3 @@\n-     * or if the destination array component type does not match the carrier of the source element layout.\n+     * if the destination array component type does not match the carrier of the source element layout, if the source\n+     * segment\/offset are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the source element layout,\n+     * or if the destination element layout alignment is greater than its size.\n@@ -1617,0 +1767,4 @@\n+        Utils.checkElementAlignment(srcLayout, \"Source layout alignment greater than its size\");\n+        if (!srcImpl.isAlignedForElement(srcOffset, srcLayout)) {\n+            throw new IllegalArgumentException(\"Source segment incompatible with alignment constraints\");\n+        }\n@@ -1642,1 +1796,3 @@\n-     * or if the source array component type does not match the carrier of the destination element layout.\n+     * if the source array component type does not match the carrier of the destination element layout, if the destination\n+     * segment\/offset are <a href=\"MemorySegment.html#segment-alignment\">incompatible with the alignment constraints<\/a> in the destination element layout,\n+     * or if the destination element layout alignment is greater than its size.\n@@ -1659,0 +1815,4 @@\n+        Utils.checkElementAlignment(dstLayout, \"Destination layout alignment greater than its size\");\n+        if (!destImpl.isAlignedForElement(dstOffset, dstLayout)) {\n+            throw new IllegalArgumentException(\"Destination segment incompatible with alignment constraints\");\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/MemorySegment.java","additions":171,"deletions":11,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -127,2 +127,6 @@\n-        if (byteSize() % elementLayout.byteSize() != 0) {\n-            throw new IllegalArgumentException(\"Segment size is no a multiple of layout size\");\n+        Utils.checkElementAlignment(elementLayout, \"Element layout alignment greater than its size\");\n+        if (!isAlignedForElement(0, elementLayout)) {\n+            throw new IllegalArgumentException(\"Incompatible alignment constraints\");\n+        }\n+        if (!Utils.isAligned(byteSize(), elementLayout.byteSize())) {\n+            throw new IllegalArgumentException(\"Segment size is not a multiple of layout size\");\n@@ -386,0 +390,5 @@\n+    @ForceInline\n+    public final boolean isAlignedForElement(long offset, MemoryLayout layout) {\n+        return (((unsafeGetOffset() + offset) | maxAlignMask()) & (layout.byteAlignment() - 1)) == 0;\n+    }\n+\n@@ -387,1 +396,1 @@\n-        if (length % elemSize != 0) {\n+        if (!Utils.isAligned(length, elemSize)) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -50,0 +50,5 @@\n+    private static final long MAX_ALIGN_1 = 1;\n+    private static final long MAX_ALIGN_2 = 2;\n+    private static final long MAX_ALIGN_4 = 4;\n+    private static final long MAX_ALIGN_8 = 8;\n+\n@@ -103,0 +108,5 @@\n+\n+        @Override\n+        public long maxAlignMask() {\n+            return MAX_ALIGN_1;\n+        }\n@@ -126,0 +136,5 @@\n+\n+        @Override\n+        public long maxAlignMask() {\n+            return MAX_ALIGN_2;\n+        }\n@@ -149,0 +164,5 @@\n+\n+        @Override\n+        public long maxAlignMask() {\n+            return MAX_ALIGN_2;\n+        }\n@@ -172,0 +192,5 @@\n+\n+        @Override\n+        public long maxAlignMask() {\n+            return MAX_ALIGN_4;\n+        }\n@@ -195,0 +220,5 @@\n+\n+        @Override\n+        public long maxAlignMask() {\n+            return MAX_ALIGN_8;\n+        }\n@@ -218,0 +248,5 @@\n+\n+        @Override\n+        public long maxAlignMask() {\n+            return MAX_ALIGN_4;\n+        }\n@@ -241,0 +276,5 @@\n+\n+        @Override\n+        public long maxAlignMask() {\n+            return MAX_ALIGN_8;\n+        }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-        if (path.offset % alignment != 0) {\n+        if (!Utils.isAligned(path.offset, alignment)) {\n@@ -289,1 +289,1 @@\n-            if (stride % alignment != 0) {\n+            if (!Utils.isAligned(stride, alignment)) {\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -270,0 +270,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -278,0 +279,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -286,0 +288,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -294,0 +297,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -302,0 +306,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -310,0 +315,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -318,0 +324,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -326,0 +333,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -334,0 +342,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -342,0 +351,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -350,0 +360,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -358,0 +369,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -366,0 +378,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n@@ -374,0 +387,1 @@\n+        Utils.checkElementAlignment(layout, \"Layout alignment greater than its size\");\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/MemoryAddressImpl.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -95,0 +95,5 @@\n+    @Override\n+    public long maxAlignMask() {\n+        return 0;\n+    }\n+\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-        if (bits % 8 == 0) {\n+        if (Utils.isAligned(bits, 8)) {\n@@ -176,0 +176,12 @@\n+\n+    @ForceInline\n+    public static boolean isAligned(long offset, long align) {\n+        return (offset & (align - 1)) == 0;\n+    }\n+\n+    @ForceInline\n+    public static void checkElementAlignment(MemoryLayout layout, String msg) {\n+        if (layout.byteAlignment() > layout.byteSize()) {\n+            throw new IllegalArgumentException(msg);\n+        }\n+    }\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -256,0 +256,12 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedSrc() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(new byte[] { 1, 2, 3, 4 }, 0, segment, JAVA_BYTE.withBitAlignment(16), 0, 4);\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedDst() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, JAVA_BYTE.withBitAlignment(16), 0, new byte[] { 1, 2, 3, 4 }, 0, 4);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED TestHeapAlignment\n+ *\/\n+\n+import jdk.incubator.foreign.MemoryAddress;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemorySegment;\n+import jdk.incubator.foreign.ResourceScope;\n+import jdk.incubator.foreign.ValueLayout;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.testng.Assert.fail;\n+\n+public class TestHeapAlignment {\n+\n+    @Test(dataProvider = \"layouts\")\n+    public void testHeapAlignment(MemorySegment segment, int align, Object val, Object arr, ValueLayout layout, Function<Object, MemorySegment> segmentFactory) {\n+        assertAligned(align, layout, () -> layout.varHandle().get(segment));\n+        assertAligned(align, layout, () -> layout.varHandle().set(segment, val));\n+        MemoryLayout seq = MemoryLayout.sequenceLayout(10, layout);\n+        assertAligned(align, layout, () -> seq.varHandle(MemoryLayout.PathElement.sequenceElement()).get(segment, 0L));\n+        assertAligned(align, layout, () -> seq.varHandle(MemoryLayout.PathElement.sequenceElement()).set(segment, 0L, val));\n+        assertAligned(align, layout, () -> segment.spliterator(layout));\n+        if (arr != null) {\n+            assertAligned(align, layout, () -> MemorySegment.copy(arr, 0, segment, layout, 0, 1));\n+            assertAligned(align, layout, () -> MemorySegment.copy(segment, layout, 0, arr, 0, 1));\n+            assertAligned(align, layout, () -> {\n+                MemorySegment other = segmentFactory.apply(arr);\n+                MemorySegment.copy(other, layout, 0, segment, layout, 0, 1);\n+            });\n+            MemorySegment other = segmentFactory.apply(arr);\n+            assertAligned(align, layout, () -> {\n+                MemorySegment.copy(segment, layout, 0, other, layout, 0, 1);\n+            });\n+            assertAligned(align, layout, () -> {\n+                MemorySegment.copy(other, layout, 0, segment, layout, 0, 1);\n+            });\n+        }\n+    }\n+\n+    static void assertAligned(int align, ValueLayout layout, Runnable runnable) {\n+        boolean shouldFail = layout.byteAlignment() > align && align != -1;\n+        try {\n+            runnable.run();\n+            if (shouldFail) {\n+                fail(\"Should not get here!\");\n+            }\n+        } catch (IllegalArgumentException ex) {\n+            if (!shouldFail) {\n+                fail(\"Should not get here!\");\n+            } else if (!ex.getMessage().contains(\"alignment\") && !ex.getMessage().contains(\"Misaligned\")) {\n+                fail(\"Unexpected exception: \" + ex);\n+            }\n+        }\n+    }\n+\n+    static final ValueLayout.OfChar JAVA_CHAR_ALIGNED = ValueLayout.JAVA_CHAR.withBitAlignment(16);\n+    static final ValueLayout.OfShort JAVA_SHORT_ALIGNED = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n+    static final ValueLayout.OfInt JAVA_INT_ALIGNED = ValueLayout.JAVA_INT.withBitAlignment(32);\n+    static final ValueLayout.OfFloat JAVA_FLOAT_ALIGNED = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n+    static final ValueLayout.OfLong JAVA_LONG_ALIGNED = ValueLayout.JAVA_LONG.withBitAlignment(64);\n+    static final ValueLayout.OfDouble JAVA_DOUBLE_ALIGNED = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n+    static final ValueLayout.OfAddress ADDRESS_ALIGNED = ValueLayout.ADDRESS.withBitAlignment(ValueLayout.ADDRESS.bitSize());\n+\n+    enum SegmentAndAlignment {\n+        HEAP_BYTE(MemorySegment.ofArray(new byte[8]), 1),\n+        HEAP_SHORT(MemorySegment.ofArray(new short[4]), 2),\n+        HEAP_CHAR(MemorySegment.ofArray(new char[4]), 2),\n+        HEAP_INT(MemorySegment.ofArray(new int[2]), 4),\n+        HEAP_FLOAT(MemorySegment.ofArray(new float[2]), 4),\n+        HEAP_LONG(MemorySegment.ofArray(new long[1]), 8),\n+        HEAP_DOUBLE(MemorySegment.ofArray(new double[1]), 8),\n+        NATIVE(MemorySegment.allocateNative(8, ResourceScope.newImplicitScope()), -1);\n+\n+        final MemorySegment segment;\n+        final int align;\n+\n+        SegmentAndAlignment(MemorySegment segment, int align) {\n+            this.segment = segment;\n+            this.align = align;\n+        }\n+    }\n+\n+    @DataProvider\n+    public static Object[][] layouts() {\n+        List<Object[]> layouts = new ArrayList<>();\n+        for (SegmentAndAlignment testCase : SegmentAndAlignment.values()) {\n+            layouts.add(new Object[] { testCase.segment, testCase.align, (byte) 42, new byte[]{42}, ValueLayout.JAVA_BYTE, (Function<byte[], MemorySegment>)MemorySegment::ofArray });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, true, null, ValueLayout.JAVA_BOOLEAN, null });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, (char) 42, new char[]{42}, JAVA_CHAR_ALIGNED, (Function<char[], MemorySegment>)MemorySegment::ofArray });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, (short) 42, new short[]{42}, JAVA_SHORT_ALIGNED, (Function<short[], MemorySegment>)MemorySegment::ofArray });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, 42, new int[]{42}, JAVA_INT_ALIGNED, (Function<int[], MemorySegment>)MemorySegment::ofArray });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, 42f, new float[]{42}, JAVA_FLOAT_ALIGNED, (Function<float[], MemorySegment>)MemorySegment::ofArray });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, 42L, new long[]{42}, JAVA_LONG_ALIGNED, (Function<long[], MemorySegment>)MemorySegment::ofArray });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, 42d, new double[]{42}, JAVA_DOUBLE_ALIGNED, (Function<double[], MemorySegment>)MemorySegment::ofArray });\n+            layouts.add(new Object[] { testCase.segment, testCase.align, MemoryAddress.ofLong(42), null, ADDRESS_ALIGNED, null });\n+        }\n+        return layouts.toArray(new Object[0][]);\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestHeapAlignment.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -38,0 +38,1 @@\n+import org.testng.SkipException;\n@@ -43,1 +44,1 @@\n-    static class Accessor<T, X, L> {\n+    static class Accessor<T, X, L extends ValueLayout> {\n@@ -93,1 +94,22 @@\n-        static <L, X> Accessor<MemorySegment, X, L> ofSegment(L layout, X value,\n+        @SuppressWarnings(\"unchecked\")\n+        void testHyperAligned() {\n+            try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                MemorySegment segment = MemorySegment.allocateNative(64, scope);\n+                T t = transform.apply(segment);\n+                L alignedLayout = (L)layout.withBitAlignment(layout.byteSize() * 8 * 2);\n+                try {\n+                    segmentSetter.set(t, alignedLayout, 0, value);\n+                    fail();\n+                } catch (IllegalArgumentException exception) {\n+                    assertTrue(exception.getMessage().contains(\"greater\"));\n+                }\n+                try {\n+                    segmentGetter.get(t, alignedLayout, 0);\n+                    fail();\n+                } catch (IllegalArgumentException exception) {\n+                    assertTrue(exception.getMessage().contains(\"greater\"));\n+                }\n+            }\n+        }\n+\n+        static <L extends ValueLayout, X> Accessor<MemorySegment, X, L> ofSegment(L layout, X value,\n@@ -99,1 +121,1 @@\n-        static <L, X> Accessor<MemoryAddress, X, L> ofAddress(L layout, X value,\n+        static <L extends ValueLayout, X> Accessor<MemoryAddress, X, L> ofAddress(L layout, X value,\n@@ -116,0 +138,18 @@\n+    @Test(dataProvider = \"segmentAccessors\")\n+    public void testSegmentAccessHyper(String testName, Accessor<?, ?, ?> accessor) {\n+        if (testName.contains(\"index\")) {\n+            accessor.testHyperAligned();\n+        } else {\n+            throw new SkipException(\"Skipping\");\n+        }\n+    }\n+\n+    @Test(dataProvider = \"addressAccessors\")\n+    public void testAddressAccessHyper(String testName, Accessor<?, ?, ?> accessor) {\n+        if (testName.contains(\"index\")) {\n+            accessor.testHyperAligned();\n+        } else {\n+            throw new SkipException(\"Skipping\");\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":43,"deletions":3,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        } catch (IllegalStateException ex) {\n+        } catch (IllegalArgumentException ex) {\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import static jdk.incubator.foreign.ValueLayout.JAVA_BYTE;\n@@ -84,2 +85,4 @@\n-    interface Getter<X> {\n-        X get(MemorySegment segment, ValueLayout layout, long index);\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedSrc() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, 0, segment, JAVA_BYTE.withBitAlignment(16), 0, 4);\n@@ -88,2 +91,4 @@\n-    interface Setter<X> {\n-        void set(MemorySegment segment, ValueLayout layout, long index, X val);\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAlignedDst() {\n+        MemorySegment segment = MemorySegment.ofArray(new byte[] {1, 2, 3, 4});\n+        MemorySegment.copy(segment, JAVA_BYTE.withBitAlignment(16), 0, segment, 0, 4);\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -130,0 +130,5 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testHyperAligned() {\n+        MemorySegment.ofArray(new byte[8]).elements(MemoryLayout.sequenceLayout(2, ValueLayout.JAVA_INT.withBitAlignment(64)));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    @Test(expectedExceptions = IllegalStateException.class)\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n","filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.incubator.foreign.ValueLayout;\n@@ -64,0 +65,4 @@\n+\n+    static final ValueLayout.OfInt JAVA_INT_ALIGNED = JAVA_INT.withBitAlignment(32);\n+    static final VarHandle VH_int_aligned = MemoryLayout.sequenceLayout(JAVA_INT_ALIGNED).varHandle(sequenceElement());\n+\n@@ -128,0 +133,9 @@\n+    @Benchmark\n+    public int segment_loop_aligned() {\n+        int sum = 0;\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            sum += (int) VH_int_aligned.get(segment, (long) i);\n+        }\n+        return sum;\n+    }\n+\n@@ -148,0 +162,9 @@\n+    @Benchmark\n+    public int segment_loop_instance_aligned() {\n+        int res = 0;\n+        for (int i = 0; i < ELEM_SIZE; i ++) {\n+            res += segment.get(JAVA_INT_ALIGNED, i * CARRIER_SIZE);\n+        }\n+        return res;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstant.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.incubator.foreign.ValueLayout;\n@@ -69,1 +70,6 @@\n-    MemorySegment segment;\n+\n+    static final ValueLayout.OfInt JAVA_INT_ALIGNED = JAVA_INT.withBitAlignment(32);\n+    static final VarHandle VH_int_aligned = MemoryLayout.sequenceLayout(JAVA_INT_ALIGNED).varHandle(sequenceElement());\n+    static final int UNSAFE_INT_BASE = unsafe.arrayBaseOffset(int[].class);\n+\n+    MemorySegment segment, alignedSegment;\n@@ -71,0 +77,1 @@\n+    int[] alignedBase;\n@@ -98,0 +105,4 @@\n+        alignedBase = new int[ELEM_SIZE];\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            unsafe.putInt(base, UNSAFE_INT_BASE + (i * CARRIER_SIZE) , i);\n+        }\n@@ -99,0 +110,1 @@\n+        alignedSegment = MemorySegment.ofArray(alignedBase);\n@@ -138,0 +150,9 @@\n+    @Benchmark\n+    public int segment_loop_aligned() {\n+        int sum = 0;\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            sum += (int) VH_int_aligned.get(alignedSegment, (long) i);\n+        }\n+        return sum;\n+    }\n+\n@@ -147,0 +168,9 @@\n+    @Benchmark\n+    public int segment_loop_instance_aligned() {\n+        int res = 0;\n+        for (int i = 0; i < ELEM_SIZE; i ++) {\n+            res += alignedSegment.get(JAVA_INT_ALIGNED, i * CARRIER_SIZE);\n+        }\n+        return res;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverNonConstantHeap.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}