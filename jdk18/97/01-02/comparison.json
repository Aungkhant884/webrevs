{"files":[{"patch":"@@ -25,2 +25,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n@@ -29,1 +27,0 @@\n-import jdk.incubator.foreign.ValueLayout;\n@@ -40,1 +37,0 @@\n-import sun.misc.Unsafe;\n@@ -42,1 +38,0 @@\n-import java.lang.invoke.VarHandle;\n@@ -45,0 +40,1 @@\n+import java.nio.IntBuffer;\n@@ -65,0 +61,1 @@\n+    IntBuffer nativeBuffer, heapBuffer;\n@@ -71,1 +68,3 @@\n-        heapSegment = MemorySegment.ofArray(new float[ELEM_SIZE]);\n+        heapSegment = MemorySegment.ofArray(new int[ELEM_SIZE]);\n+        nativeBuffer = ByteBuffer.allocateDirect(ALLOC_SIZE).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\n+        heapBuffer = IntBuffer.wrap(new int[ELEM_SIZE]);\n@@ -80,2 +79,2 @@\n-    public void native_slice_loop() {\n-        new NativeWrapper(nativeSegment).forEach(NativeWrapper.Element::get);\n+    public void native_segment_slice_loop() {\n+        new NativeSegmentWrapper(nativeSegment).forEach(NativeSegmentWrapper.Element::get);\n@@ -85,2 +84,2 @@\n-    public void heap_slice_loop() {\n-        new HeapWrapper(heapSegment).forEach(HeapWrapper.Element::get);\n+    public void native_buffer_slice_loop() {\n+        new NativeBufferWrapper(nativeBuffer).forEach(NativeBufferWrapper.Element::get);\n@@ -89,1 +88,11 @@\n-    class HeapWrapper implements Iterable<HeapWrapper.Element> {\n+    @Benchmark\n+    public void heap_segment_slice_loop() {\n+        new HeapSegmentWrapper(heapSegment).forEach(HeapSegmentWrapper.Element::get);\n+    }\n+\n+    @Benchmark\n+    public void heap_buffer_slice_loop() {\n+        new HeapBufferWrapper(heapBuffer).forEach(HeapBufferWrapper.Element::get);\n+    }\n+\n+    class HeapSegmentWrapper implements Iterable<HeapSegmentWrapper.Element> {\n@@ -92,1 +101,1 @@\n-        public HeapWrapper(MemorySegment segment) {\n+        public HeapSegmentWrapper(MemorySegment segment) {\n@@ -129,1 +138,1 @@\n-    class NativeWrapper implements Iterable<NativeWrapper.Element> {\n+    class NativeSegmentWrapper implements Iterable<NativeSegmentWrapper.Element> {\n@@ -132,1 +141,1 @@\n-        public NativeWrapper(MemorySegment segment) {\n+        public NativeSegmentWrapper(MemorySegment segment) {\n@@ -136,4 +145,0 @@\n-        int get() {\n-            return segment.getAtIndex(JAVA_INT, 0);\n-        }\n-\n@@ -172,0 +177,82 @@\n+\n+    class NativeBufferWrapper implements Iterable<NativeBufferWrapper.Element> {\n+        final IntBuffer buffer;\n+\n+        public NativeBufferWrapper(IntBuffer buffer) {\n+            this.buffer = buffer;\n+        }\n+\n+        @Override\n+        public Iterator<Element> iterator() {\n+            return new Iterator<Element>() {\n+\n+                IntBuffer current = buffer;\n+\n+                @Override\n+                public boolean hasNext() {\n+                    return current.position() < current.limit();\n+                }\n+\n+                @Override\n+                public Element next() {\n+                    Element element = new Element(current);\n+                    int lim = current.limit();\n+                    current = current.slice(1, lim - 1);\n+                    return element;\n+                }\n+            };\n+        }\n+\n+        static class Element {\n+            final IntBuffer buffer;\n+\n+            public Element(IntBuffer segment) {\n+                this.buffer = segment;\n+            }\n+\n+            int get() {\n+                return buffer.get( 0);\n+            }\n+        }\n+    }\n+\n+    class HeapBufferWrapper implements Iterable<HeapBufferWrapper.Element> {\n+        final IntBuffer buffer;\n+\n+        public HeapBufferWrapper(IntBuffer buffer) {\n+            this.buffer = buffer;\n+        }\n+\n+        @Override\n+        public Iterator<Element> iterator() {\n+            return new Iterator<Element>() {\n+\n+                IntBuffer current = buffer;\n+\n+                @Override\n+                public boolean hasNext() {\n+                    return current.position() < current.limit();\n+                }\n+\n+                @Override\n+                public Element next() {\n+                    Element element = new Element(current);\n+                    int lim = current.limit();\n+                    current = current.slice(1, lim - 1);\n+                    return element;\n+                }\n+            };\n+        }\n+\n+        static class Element {\n+            final IntBuffer buffer;\n+\n+            public Element(IntBuffer segment) {\n+                this.buffer = segment;\n+            }\n+\n+            int get() {\n+                return buffer.get( 0);\n+            }\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverSlice.java","additions":105,"deletions":18,"binary":false,"changes":123,"status":"modified"}]}