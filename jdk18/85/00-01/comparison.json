{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import java.io.Writer;\n@@ -41,3 +40,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n@@ -60,21 +56,0 @@\n-        Path base = Paths.get(\".\");\n-        Path src = base.resolve(\"src\");\n-        Path classes = base.resolve(\"classes\");\n-\n-        Files.createDirectories(src);\n-        Files.createDirectories(classes);\n-\n-        Files.newOutputStream(classes.resolve(\"Test$Nested1.class\")).close();\n-        Files.newOutputStream(classes.resolve(\"Test.class\")).close();\n-\n-        Thread.sleep(2000);\n-\n-        Path testSource = src.resolve(\"Test.java\");\n-\n-        try (Writer w = Files.newBufferedWriter(testSource)) {\n-            w.write(\"\"\"\n-                    public class Test {\n-                        public static class Nested {}\n-                    }\n-                    \"\"\");\n-        }\n@@ -89,2 +64,2 @@\n-                                       public class Test {\n-                                           public static class Nested1 {}\n+                                       class Test {\n+                                           public static class Nested {}\n@@ -96,1 +71,1 @@\n-            JavacTask task = (JavacTask) ToolProvider.getSystemJavaCompiler().getTask(null, testFM, noErrors, List.of(\"--class-path\", classes.toString(), \"-sourcepath\", src.toString()), null, List.of(new TestFileObject(\"Input\", \"\")));\n+            JavacTask task = (JavacTask) ToolProvider.getSystemJavaCompiler().getTask(null, testFM, noErrors, null, null, List.of(new TestFileObject(\"Input\", \"\")));\n@@ -114,1 +89,1 @@\n-            super(new URI(\"mem:\/\/\" + className + \".class\"), Kind.SOURCE);\n+            super(new URI(\"mem:\/\/\" + className + \".java\"), Kind.SOURCE);\n@@ -147,1 +122,1 @@\n-            if (location == StandardLocation.CLASS_PATH && packageName.isEmpty()) {\n+            if (packageName.isEmpty()) {\n@@ -149,1 +124,1 @@\n-                if (kinds.contains(Kind.CLASS)) {\n+                if (location == StandardLocation.CLASS_PATH && kinds.contains(Kind.CLASS)) {\n@@ -151,2 +126,1 @@\n-                }\n-                if (kinds.contains(Kind.SOURCE)) {\n+                } else if (location == StandardLocation.SOURCE_PATH && kinds.contains(Kind.SOURCE)) {\n@@ -160,0 +134,7 @@\n+        @Override\n+        public boolean hasLocation(Location location) {\n+            return location == StandardLocation.CLASS_PATH ||\n+                   location == StandardLocation.SOURCE_PATH ||\n+                   super.hasLocation(location);\n+        }\n+\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestListPackageFromAPI.java","additions":15,"deletions":34,"binary":false,"changes":49,"status":"modified"}]}