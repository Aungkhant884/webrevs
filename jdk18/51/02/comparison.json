{"files":[{"patch":"@@ -162,2 +162,1 @@\n-  } else if (Instruction_aarch64::extract(insn, 31, 22) == 0b1011100101 &&\n-             Instruction_aarch64::extract(insn, 4, 0) == 0b11111) {\n+  } else if (NativeInstruction::is_ldrw_to_zr(address(&insn))) {\n@@ -286,3 +285,0 @@\n-  } else if (Instruction_aarch64::extract(insn, 31, 22) == 0b1011100101 &&\n-             Instruction_aarch64::extract(insn, 4, 0) == 0b11111) {\n-    return 0;\n@@ -295,0 +291,7 @@\n+address MacroAssembler::target_addr_for_insn_allow_null_ret(address insn_addr, unsigned insn) {\n+  if (NativeInstruction::is_ldrw_to_zr(address(&insn))) {\n+    return 0;\n+  }\n+  return MacroAssembler::target_addr_for_insn(insn_addr, insn);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -609,0 +609,1 @@\n+  static address target_addr_for_insn_allow_null_ret(address insn_addr, unsigned insn);\n@@ -613,0 +614,4 @@\n+  static address target_addr_for_insn_allow_null_ret(address insn_addr) {\n+    unsigned insn = *(unsigned*)insn_addr;\n+    return target_addr_for_insn_allow_null_ret(insn_addr, insn);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-  address dest = MacroAssembler::target_addr_for_insn(instruction_address());\n+  address dest = MacroAssembler::target_addr_for_insn_allow_null_ret(instruction_address());\n@@ -332,1 +332,1 @@\n-  address dest = MacroAssembler::target_addr_for_insn(instruction_address());\n+  address dest = MacroAssembler::target_addr_for_insn_allow_null_ret(instruction_address());\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}