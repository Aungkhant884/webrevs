{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,2 +163,1 @@\n-  } else if (Instruction_aarch64::extract(insn, 31, 22) == 0b1011100101 &&\n-             Instruction_aarch64::extract(insn, 4, 0) == 0b11111) {\n+  } else if (NativeInstruction::is_ldrw_to_zr(address(&insn))) {\n@@ -287,3 +286,0 @@\n-  } else if (Instruction_aarch64::extract(insn, 31, 22) == 0b1011100101 &&\n-             Instruction_aarch64::extract(insn, 4, 0) == 0b11111) {\n-    return 0;\n@@ -296,0 +292,7 @@\n+address MacroAssembler::target_addr_for_insn_or_null(address insn_addr, unsigned insn) {\n+  if (NativeInstruction::is_ldrw_to_zr(address(&insn))) {\n+    return 0;\n+  }\n+  return MacroAssembler::target_addr_for_insn(insn_addr, insn);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -609,0 +609,1 @@\n+  static address target_addr_for_insn_or_null(address insn_addr, unsigned insn);\n@@ -613,0 +614,4 @@\n+  static address target_addr_for_insn_or_null(address insn_addr) {\n+    unsigned insn = *(unsigned*)insn_addr;\n+    return target_addr_for_insn_or_null(insn_addr, insn);\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -318,1 +318,1 @@\n-  address dest = MacroAssembler::target_addr_for_insn(instruction_address());\n+  address dest = MacroAssembler::target_addr_for_insn_or_null(instruction_address());\n@@ -332,1 +332,1 @@\n-  address dest = MacroAssembler::target_addr_for_insn(instruction_address());\n+  address dest = MacroAssembler::target_addr_for_insn_or_null(instruction_address());\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}