{"files":[{"patch":"@@ -414,1 +414,1 @@\n-\/\/ maskAll\n+\/\/ maskAll (full or partial predicate size)\n@@ -420,1 +420,1 @@\n-  format %{ \"sve_ptrue\/sve_pfalse $dst\\t# mask all (sve) (B\/H\/S)\" %}\n+  format %{ \"sve_ptrue_lanecnt\/sve_pfalse $dst\\t# mask all (sve) (B\/H\/S)\" %}\n@@ -428,1 +428,2 @@\n-      __ sve_ptrue(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt));\n+      __ sve_ptrue_lanecnt(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt),\n+                           Matcher::vector_length(this));\n@@ -438,1 +439,1 @@\n-  ins_cost(2 * SVE_COST);\n+  ins_cost(3 * SVE_COST);\n@@ -440,1 +441,2 @@\n-            \"sve_cmpne $dst, $tmp, 0\\t# mask all (sve) (B\/H\/S)\" %}\n+            \"sve_ptrue_lanecnt $dst\\n\\t\"\n+            \"sve_cmpne $dst, $dst, $tmp, 0\\t# mask all (sve) (B\/H\/S)\" %}\n@@ -444,0 +446,1 @@\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -445,1 +448,7 @@\n-    __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size, ptrue, as_FloatRegister($tmp$$reg), 0);\n+    if (length_in_bytes < MaxVectorSize) {\n+      __ sve_ptrue_lanecnt(as_PRegister($dst$$reg), size, Matcher::vector_length(this));\n+      __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size,\n+                 as_PRegister($dst$$reg), as_FloatRegister($tmp$$reg), 0);\n+    } else {\n+      __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size, ptrue, as_FloatRegister($tmp$$reg), 0);\n+    }\n@@ -454,1 +463,1 @@\n-  format %{ \"sve_ptrue\/sve_pfalse $dst\\t# mask all (sve) (D)\" %}\n+  format %{ \"sve_ptrue_lanecnt\/sve_pfalse $dst\\t# mask all (sve) (D)\" %}\n@@ -462,1 +471,2 @@\n-      __ sve_ptrue(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt));\n+      __ sve_ptrue_lanecnt(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt),\n+                           Matcher::vector_length(this));\n@@ -472,1 +482,1 @@\n-  ins_cost(2 * SVE_COST);\n+  ins_cost(3 * SVE_COST);\n@@ -474,1 +484,2 @@\n-            \"sve_cmpne $dst, $tmp, 0\\t# mask all (sve) (D)\" %}\n+            \"sve_ptrue_lanecnt $dst\\n\\t\"\n+            \"sve_cmpne $dst, $dst, $tmp, 0\\t# mask all (sve) (D)\" %}\n@@ -478,0 +489,1 @@\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -479,1 +491,7 @@\n-    __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size, ptrue, as_FloatRegister($tmp$$reg), 0);\n+    if (length_in_bytes < MaxVectorSize) {\n+      __ sve_ptrue_lanecnt(as_PRegister($dst$$reg), size, Matcher::vector_length(this));\n+      __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size,\n+                 as_PRegister($dst$$reg), as_FloatRegister($tmp$$reg), 0);\n+    } else {\n+      __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size, ptrue, as_FloatRegister($tmp$$reg), 0);\n+    }\n@@ -3087,0 +3105,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3101,0 +3120,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3383,0 +3403,1 @@\n+  effect(TEMP_DEF dst);\n@@ -3397,0 +3418,1 @@\n+  effect(TEMP_DEF dst);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":33,"deletions":11,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-  format %{ \"sve_ptrue\/sve_pfalse $dst\\t# mask all (sve) ($2)\" %}\n+  format %{ \"sve_ptrue_lanecnt\/sve_pfalse $dst\\t# mask all (sve) ($2)\" %}\n@@ -367,1 +367,2 @@\n-      __ sve_ptrue(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt));\n+      __ sve_ptrue_lanecnt(as_PRegister($dst$$reg), __ elemType_to_regVariant(bt),\n+                           Matcher::vector_length(this));\n@@ -380,1 +381,1 @@\n-  ins_cost(2 * SVE_COST);\n+  ins_cost(3 * SVE_COST);\n@@ -382,1 +383,2 @@\n-            \"sve_cmpne $dst, $tmp, 0\\t# mask all (sve) ($2)\" %}\n+            \"sve_ptrue_lanecnt $dst\\n\\t\"\n+            \"sve_cmpne $dst, $dst, $tmp, 0\\t# mask all (sve) ($2)\" %}\n@@ -386,0 +388,1 @@\n+    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -387,1 +390,7 @@\n-    __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size, ptrue, as_FloatRegister($tmp$$reg), 0);\n+    if (length_in_bytes < MaxVectorSize) {\n+      __ sve_ptrue_lanecnt(as_PRegister($dst$$reg), size, Matcher::vector_length(this));\n+      __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size,\n+                 as_PRegister($dst$$reg), as_FloatRegister($tmp$$reg), 0);\n+    } else {\n+      __ sve_cmp(Assembler::NE, as_PRegister($dst$$reg), size, ptrue, as_FloatRegister($tmp$$reg), 0);\n+    }\n@@ -392,1 +401,1 @@\n-\/\/ maskAll\n+\/\/ maskAll (full or partial predicate size)\n@@ -1810,0 +1819,1 @@\n+  effect(TEMP_DEF dst);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1235,0 +1235,36 @@\n+\n+\/\/ Set elements of the dst predicate to true if the element number is\n+\/\/ in the range of [0, lane_cnt), or to false otherwise.\n+void C2_MacroAssembler::sve_ptrue_lanecnt(PRegister dst, SIMD_RegVariant size, int lane_cnt) {\n+  assert(size != Q, \"invalid size\");\n+  switch(lane_cnt) {\n+    case 1: \/* VL1 *\/\n+    case 2: \/* VL2 *\/\n+    case 3: \/* VL3 *\/\n+    case 4: \/* VL4 *\/\n+    case 5: \/* VL5 *\/\n+    case 6: \/* VL6 *\/\n+    case 7: \/* VL7 *\/\n+    case 8: \/* VL8 *\/\n+      sve_ptrue(dst, size, lane_cnt);\n+      break;\n+    case 16:\n+      sve_ptrue(dst, size, \/* VL16 *\/ 0b01001);\n+      break;\n+    case 32:\n+      sve_ptrue(dst, size, \/* VL32 *\/ 0b01010);\n+      break;\n+    case 64:\n+      sve_ptrue(dst, size, \/* VL64 *\/ 0b01011);\n+      break;\n+    case 128:\n+      sve_ptrue(dst, size, \/* VL128 *\/ 0b01100);\n+      break;\n+    case 256:\n+      sve_ptrue(dst, size, \/* VL256 *\/ 0b01101);\n+      break;\n+    default:\n+      assert(false, \"unsupported\");\n+      ShouldNotReachHere();\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -91,0 +91,4 @@\n+  \/\/ Set elements of the dst predicate to true if the element number is\n+  \/\/ in the range of [0, lane_cnt), or to false otherwise.\n+  void sve_ptrue_lanecnt(PRegister dst, SIMD_RegVariant size, int lane_cnt);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1726,0 +1726,4 @@\n+                        [\"ptrue\",   \"__ sve_ptrue(p1, __ B, 0b00001);\",                   \"ptrue\\tp1.b, vl1\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p1, __ B, 0b00101);\",                   \"ptrue\\tp1.b, vl5\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p1, __ B, 0b01001);\",                   \"ptrue\\tp1.b, vl16\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p1, __ B, 0b01101);\",                   \"ptrue\\tp1.b, vl256\"],\n@@ -1727,0 +1731,3 @@\n+                        [\"ptrue\",   \"__ sve_ptrue(p2, __ H, 0b00010);\",                   \"ptrue\\tp2.h, vl2\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p2, __ H, 0b00110);\",                   \"ptrue\\tp2.h, vl6\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p2, __ H, 0b01010);\",                   \"ptrue\\tp2.h, vl32\"],\n@@ -1728,0 +1735,3 @@\n+                        [\"ptrue\",   \"__ sve_ptrue(p3, __ S, 0b00011);\",                   \"ptrue\\tp3.s, vl3\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p3, __ S, 0b00111);\",                   \"ptrue\\tp3.s, vl7\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p3, __ S, 0b01011);\",                   \"ptrue\\tp3.s, vl64\"],\n@@ -1729,0 +1739,3 @@\n+                        [\"ptrue\",   \"__ sve_ptrue(p4, __ D, 0b00100);\",                   \"ptrue\\tp4.d, vl4\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p4, __ D, 0b01000);\",                   \"ptrue\\tp4.d, vl8\"],\n+                        [\"ptrue\",   \"__ sve_ptrue(p4, __ D, 0b01100);\",                   \"ptrue\\tp4.d, vl128\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -867,0 +867,4 @@\n+    __ sve_ptrue(p1, __ B, 0b00001);                   \/\/       ptrue   p1.b, vl1\n+    __ sve_ptrue(p1, __ B, 0b00101);                   \/\/       ptrue   p1.b, vl5\n+    __ sve_ptrue(p1, __ B, 0b01001);                   \/\/       ptrue   p1.b, vl16\n+    __ sve_ptrue(p1, __ B, 0b01101);                   \/\/       ptrue   p1.b, vl256\n@@ -868,0 +872,3 @@\n+    __ sve_ptrue(p2, __ H, 0b00010);                   \/\/       ptrue   p2.h, vl2\n+    __ sve_ptrue(p2, __ H, 0b00110);                   \/\/       ptrue   p2.h, vl6\n+    __ sve_ptrue(p2, __ H, 0b01010);                   \/\/       ptrue   p2.h, vl32\n@@ -869,0 +876,3 @@\n+    __ sve_ptrue(p3, __ S, 0b00011);                   \/\/       ptrue   p3.s, vl3\n+    __ sve_ptrue(p3, __ S, 0b00111);                   \/\/       ptrue   p3.s, vl7\n+    __ sve_ptrue(p3, __ S, 0b01011);                   \/\/       ptrue   p3.s, vl64\n@@ -870,0 +880,3 @@\n+    __ sve_ptrue(p4, __ D, 0b00100);                   \/\/       ptrue   p4.d, vl4\n+    __ sve_ptrue(p4, __ D, 0b01000);                   \/\/       ptrue   p4.d, vl8\n+    __ sve_ptrue(p4, __ D, 0b01100);                   \/\/       ptrue   p4.d, vl128\n@@ -1133,7 +1146,7 @@\n-    0x14000000,     0x17ffffd7,     0x14000398,     0x94000000,\n-    0x97ffffd4,     0x94000395,     0x3400000a,     0x34fffa2a,\n-    0x3400724a,     0x35000008,     0x35fff9c8,     0x350071e8,\n-    0xb400000b,     0xb4fff96b,     0xb400718b,     0xb500001d,\n-    0xb5fff91d,     0xb500713d,     0x10000013,     0x10fff8b3,\n-    0x100070d3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307056,     0x3758000c,     0x375ff7cc,     0x37586fec,\n+    0x14000000,     0x17ffffd7,     0x140003a5,     0x94000000,\n+    0x97ffffd4,     0x940003a2,     0x3400000a,     0x34fffa2a,\n+    0x340073ea,     0x35000008,     0x35fff9c8,     0x35007388,\n+    0xb400000b,     0xb4fff96b,     0xb400732b,     0xb500001d,\n+    0xb5fff91d,     0xb50072dd,     0x10000013,     0x10fff8b3,\n+    0x10007273,     0x90000013,     0x36300016,     0x3637f836,\n+    0x363071f6,     0x3758000c,     0x375ff7cc,     0x3758718c,\n@@ -1144,13 +1157,13 @@\n-    0x54006dc0,     0x54000001,     0x54fff541,     0x54006d61,\n-    0x54000002,     0x54fff4e2,     0x54006d02,     0x54000002,\n-    0x54fff482,     0x54006ca2,     0x54000003,     0x54fff423,\n-    0x54006c43,     0x54000003,     0x54fff3c3,     0x54006be3,\n-    0x54000004,     0x54fff364,     0x54006b84,     0x54000005,\n-    0x54fff305,     0x54006b25,     0x54000006,     0x54fff2a6,\n-    0x54006ac6,     0x54000007,     0x54fff247,     0x54006a67,\n-    0x54000008,     0x54fff1e8,     0x54006a08,     0x54000009,\n-    0x54fff189,     0x540069a9,     0x5400000a,     0x54fff12a,\n-    0x5400694a,     0x5400000b,     0x54fff0cb,     0x540068eb,\n-    0x5400000c,     0x54fff06c,     0x5400688c,     0x5400000d,\n-    0x54fff00d,     0x5400682d,     0x5400000e,     0x54ffefae,\n-    0x540067ce,     0x5400000f,     0x54ffef4f,     0x5400676f,\n+    0x54006f60,     0x54000001,     0x54fff541,     0x54006f01,\n+    0x54000002,     0x54fff4e2,     0x54006ea2,     0x54000002,\n+    0x54fff482,     0x54006e42,     0x54000003,     0x54fff423,\n+    0x54006de3,     0x54000003,     0x54fff3c3,     0x54006d83,\n+    0x54000004,     0x54fff364,     0x54006d24,     0x54000005,\n+    0x54fff305,     0x54006cc5,     0x54000006,     0x54fff2a6,\n+    0x54006c66,     0x54000007,     0x54fff247,     0x54006c07,\n+    0x54000008,     0x54fff1e8,     0x54006ba8,     0x54000009,\n+    0x54fff189,     0x54006b49,     0x5400000a,     0x54fff12a,\n+    0x54006aea,     0x5400000b,     0x54fff0cb,     0x54006a8b,\n+    0x5400000c,     0x54fff06c,     0x54006a2c,     0x5400000d,\n+    0x54fff00d,     0x540069cd,     0x5400000e,     0x54ffefae,\n+    0x5400696e,     0x5400000f,     0x54ffef4f,     0x5400690f,\n@@ -1188,1 +1201,1 @@\n-    0xbd1b1869,     0x580057bb,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x5800595b,     0x1800000b,     0xf8945060,\n@@ -1311,53 +1324,56 @@\n-    0x2558e3e2,     0x2598e3e3,     0x25d8e3e4,     0x2518e407,\n-    0x05214800,     0x05614800,     0x05a14800,     0x05e14800,\n-    0x05214c00,     0x05614c00,     0x05a14c00,     0x05e14c00,\n-    0x05304001,     0x05314001,     0x1e601000,     0x1e603000,\n-    0x1e621000,     0x1e623000,     0x1e641000,     0x1e643000,\n-    0x1e661000,     0x1e663000,     0x1e681000,     0x1e683000,\n-    0x1e6a1000,     0x1e6a3000,     0x1e6c1000,     0x1e6c3000,\n-    0x1e6e1000,     0x1e6e3000,     0x1e701000,     0x1e703000,\n-    0x1e721000,     0x1e723000,     0x1e741000,     0x1e743000,\n-    0x1e761000,     0x1e763000,     0x1e781000,     0x1e783000,\n-    0x1e7a1000,     0x1e7a3000,     0x1e7c1000,     0x1e7c3000,\n-    0x1e7e1000,     0x1e7e3000,     0xf8208193,     0xf83101b6,\n-    0xf83c13fe,     0xf821239a,     0xf824309e,     0xf826535e,\n-    0xf8304109,     0xf82c7280,     0xf8216058,     0xf8a08309,\n-    0xf8ba03d0,     0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,\n-    0xf8aa522f,     0xf8a2418a,     0xf8ac71af,     0xf8a26287,\n-    0xf8fa8090,     0xf8e20184,     0xf8f01215,     0xf8f022ab,\n-    0xf8f7334c,     0xf8f751dc,     0xf8eb4038,     0xf8ec715f,\n-    0xf8f06047,     0xf863826d,     0xf8710070,     0xf86113cb,\n-    0xf86521e8,     0xf87d301e,     0xf8745287,     0xf87742bc,\n-    0xf87b70b9,     0xf8616217,     0xb83f8185,     0xb82901fc,\n-    0xb83d13f6,     0xb83320bf,     0xb82e33f0,     0xb830529b,\n-    0xb830416c,     0xb82973c6,     0xb831639b,     0xb8be8147,\n-    0xb8b4008a,     0xb8b81231,     0xb8b623a3,     0xb8af3276,\n-    0xb8b35056,     0xb8af4186,     0xb8b071ab,     0xb8b763c1,\n-    0xb8f38225,     0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,\n-    0xb8fb3023,     0xb8ff5278,     0xb8f14389,     0xb8fb70ef,\n-    0xb8f563f7,     0xb87983e2,     0xb87b0150,     0xb8771073,\n-    0xb8702320,     0xb87a3057,     0xb870508c,     0xb87c43be,\n-    0xb87070db,     0xb86961fd,     0xce273c87,     0xce080ac9,\n-    0xce7e8e9b,     0xce808b45,     0xce79806e,     0xce758768,\n-    0xcec0835a,     0xce608ad8,     0x2520d264,     0x2521cf80,\n-    0x058074c1,     0x054242c9,     0x05004476,     0x25a0df08,\n-    0x25a1c206,     0x0583288b,     0x05401c3a,     0x05027e8d,\n-    0x2520ce05,     0x25a1cb0a,     0x0580989a,     0x0540e096,\n-    0x0500fb73,     0x2560c2ce,     0x2521d590,     0x05803e97,\n-    0x05400d31,     0x05003ed0,     0x2520c623,     0x25a1cdd1,\n-    0x058052ac,     0x0540ba33,     0x05003ed7,     0x25a0c6cd,\n-    0x2521cf00,     0x0583c5b1,     0x05407336,     0x05001e62,\n-    0x04e400f4,     0x04a80407,     0x65c402d3,     0x65cb0ac9,\n-    0x659007c5,     0x0456ac36,     0x04c01608,     0x049a048f,\n-    0x041087a8,     0x04dab3bc,     0x04590c49,     0x041380fc,\n-    0x0451963a,     0x04d012a8,     0x0497b6a5,     0x049eb3b6,\n-    0x04980093,     0x04080677,     0x040a1a77,     0x04c109c8,\n-    0x049cbeb1,     0x65c0815e,     0x658d812c,     0x65c69098,\n-    0x65c78b66,     0x65c293cd,     0x04ddb7d6,     0x6582ae69,\n-    0x6580bd34,     0x6581ae6d,     0x658daa78,     0x65819211,\n-    0x65a78160,     0x65ef108e,     0x65f52145,     0x65f34123,\n-    0x65b3786a,     0x04555db7,     0x049e6e3a,     0x043d304e,\n-    0x04a73295,     0x047a3022,     0x04f13209,     0x05e26880,\n-    0x05ab6cce,     0x045a33ae,     0x045822c3,     0x04193b63,\n-    0x04c834f3,     0x044a2cb5,     0x65c726b9,     0x65862071,\n-    0x65982cf3,     0x0441322e,\n+    0x2518e021,     0x2518e0a1,     0x2518e121,     0x2518e1a1,\n+    0x2558e3e2,     0x2558e042,     0x2558e0c2,     0x2558e142,\n+    0x2598e3e3,     0x2598e063,     0x2598e0e3,     0x2598e163,\n+    0x25d8e3e4,     0x25d8e084,     0x25d8e104,     0x25d8e184,\n+    0x2518e407,     0x05214800,     0x05614800,     0x05a14800,\n+    0x05e14800,     0x05214c00,     0x05614c00,     0x05a14c00,\n+    0x05e14c00,     0x05304001,     0x05314001,     0x1e601000,\n+    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n+    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n+    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n+    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n+    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n+    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n+    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n+    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8208193,\n+    0xf83101b6,     0xf83c13fe,     0xf821239a,     0xf824309e,\n+    0xf826535e,     0xf8304109,     0xf82c7280,     0xf8216058,\n+    0xf8a08309,     0xf8ba03d0,     0xf8a312ea,     0xf8aa21e4,\n+    0xf8a2310b,     0xf8aa522f,     0xf8a2418a,     0xf8ac71af,\n+    0xf8a26287,     0xf8fa8090,     0xf8e20184,     0xf8f01215,\n+    0xf8f022ab,     0xf8f7334c,     0xf8f751dc,     0xf8eb4038,\n+    0xf8ec715f,     0xf8f06047,     0xf863826d,     0xf8710070,\n+    0xf86113cb,     0xf86521e8,     0xf87d301e,     0xf8745287,\n+    0xf87742bc,     0xf87b70b9,     0xf8616217,     0xb83f8185,\n+    0xb82901fc,     0xb83d13f6,     0xb83320bf,     0xb82e33f0,\n+    0xb830529b,     0xb830416c,     0xb82973c6,     0xb831639b,\n+    0xb8be8147,     0xb8b4008a,     0xb8b81231,     0xb8b623a3,\n+    0xb8af3276,     0xb8b35056,     0xb8af4186,     0xb8b071ab,\n+    0xb8b763c1,     0xb8f38225,     0xb8e202d0,     0xb8ed12aa,\n+    0xb8fd219b,     0xb8fb3023,     0xb8ff5278,     0xb8f14389,\n+    0xb8fb70ef,     0xb8f563f7,     0xb87983e2,     0xb87b0150,\n+    0xb8771073,     0xb8702320,     0xb87a3057,     0xb870508c,\n+    0xb87c43be,     0xb87070db,     0xb86961fd,     0xce273c87,\n+    0xce080ac9,     0xce7e8e9b,     0xce808b45,     0xce79806e,\n+    0xce758768,     0xcec0835a,     0xce608ad8,     0x2520d264,\n+    0x2521cf80,     0x058074c1,     0x054242c9,     0x05004476,\n+    0x25a0df08,     0x25a1c206,     0x0583288b,     0x05401c3a,\n+    0x05027e8d,     0x2520ce05,     0x25a1cb0a,     0x0580989a,\n+    0x0540e096,     0x0500fb73,     0x2560c2ce,     0x2521d590,\n+    0x05803e97,     0x05400d31,     0x05003ed0,     0x2520c623,\n+    0x25a1cdd1,     0x058052ac,     0x0540ba33,     0x05003ed7,\n+    0x25a0c6cd,     0x2521cf00,     0x0583c5b1,     0x05407336,\n+    0x05001e62,     0x04e400f4,     0x04a80407,     0x65c402d3,\n+    0x65cb0ac9,     0x659007c5,     0x0456ac36,     0x04c01608,\n+    0x049a048f,     0x041087a8,     0x04dab3bc,     0x04590c49,\n+    0x041380fc,     0x0451963a,     0x04d012a8,     0x0497b6a5,\n+    0x049eb3b6,     0x04980093,     0x04080677,     0x040a1a77,\n+    0x04c109c8,     0x049cbeb1,     0x65c0815e,     0x658d812c,\n+    0x65c69098,     0x65c78b66,     0x65c293cd,     0x04ddb7d6,\n+    0x6582ae69,     0x6580bd34,     0x6581ae6d,     0x658daa78,\n+    0x65819211,     0x65a78160,     0x65ef108e,     0x65f52145,\n+    0x65f34123,     0x65b3786a,     0x04555db7,     0x049e6e3a,\n+    0x043d304e,     0x04a73295,     0x047a3022,     0x04f13209,\n+    0x05e26880,     0x05ab6cce,     0x045a33ae,     0x045822c3,\n+    0x04193b63,     0x04c834f3,     0x044a2cb5,     0x65c726b9,\n+    0x65862071,     0x65982cf3,     0x0441322e,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":90,"deletions":74,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -5620,0 +5620,7 @@\n+\n+    @Test\n+    static void MaskAllTrueByte128VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5620,0 +5620,7 @@\n+\n+    @Test\n+    static void MaskAllTrueByte256VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5620,0 +5620,7 @@\n+\n+    @Test\n+    static void MaskAllTrueByte512VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5620,0 +5620,7 @@\n+\n+    @Test\n+    static void MaskAllTrueByte64VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5609,0 +5609,7 @@\n+\n+    @Test\n+    static void MaskAllTrueByteMaxVectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4999,0 +4999,7 @@\n+\n+    @Test\n+    static void MaskAllTrueDouble128VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4999,0 +4999,7 @@\n+\n+    @Test\n+    static void MaskAllTrueDouble256VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4999,0 +4999,7 @@\n+\n+    @Test\n+    static void MaskAllTrueDouble512VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4999,0 +4999,7 @@\n+\n+    @Test\n+    static void MaskAllTrueDouble64VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4988,0 +4988,7 @@\n+\n+    @Test\n+    static void MaskAllTrueDoubleMaxVectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4977,0 +4977,7 @@\n+\n+    @Test\n+    static void MaskAllTrueFloat128VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4977,0 +4977,7 @@\n+\n+    @Test\n+    static void MaskAllTrueFloat256VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4977,0 +4977,7 @@\n+\n+    @Test\n+    static void MaskAllTrueFloat512VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4977,0 +4977,7 @@\n+\n+    @Test\n+    static void MaskAllTrueFloat64VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4966,0 +4966,7 @@\n+\n+    @Test\n+    static void MaskAllTrueFloatMaxVectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5574,0 +5574,7 @@\n+\n+    @Test\n+    static void MaskAllTrueInt128VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5574,0 +5574,7 @@\n+\n+    @Test\n+    static void MaskAllTrueInt256VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5574,0 +5574,7 @@\n+\n+    @Test\n+    static void MaskAllTrueInt512VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5574,0 +5574,7 @@\n+\n+    @Test\n+    static void MaskAllTrueInt64VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5563,0 +5563,7 @@\n+\n+    @Test\n+    static void MaskAllTrueIntMaxVectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5458,0 +5458,7 @@\n+\n+    @Test\n+    static void MaskAllTrueLong128VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5458,0 +5458,7 @@\n+\n+    @Test\n+    static void MaskAllTrueLong256VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5458,0 +5458,7 @@\n+\n+    @Test\n+    static void MaskAllTrueLong512VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5458,0 +5458,7 @@\n+\n+    @Test\n+    static void MaskAllTrueLong64VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5447,0 +5447,7 @@\n+\n+    @Test\n+    static void MaskAllTrueLongMaxVectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5599,0 +5599,7 @@\n+\n+    @Test\n+    static void MaskAllTrueShort128VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5599,0 +5599,7 @@\n+\n+    @Test\n+    static void MaskAllTrueShort256VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5599,0 +5599,7 @@\n+\n+    @Test\n+    static void MaskAllTrueShort512VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5599,0 +5599,7 @@\n+\n+    @Test\n+    static void MaskAllTrueShort64VectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5588,0 +5588,7 @@\n+\n+    @Test\n+    static void MaskAllTrueShortMaxVectorTestsSmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -605,0 +605,7 @@\n+\n+    @Test\n+    static void MaskAllTrue$vectorteststype$SmokeTest() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+          Assert.assertEquals(SPECIES.maskAll(true).toLong(), -1L >>> (64 - SPECIES.length()));\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}