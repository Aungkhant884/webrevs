{"files":[{"patch":"@@ -0,0 +1,18 @@\n+\/build\/\n+\/dist\/\n+\/.idea\/\n+nbproject\/private\/\n+\/webrev\n+\/.src-rev\n+\/.jib\/\n+\/.hgtip\n+.DS_Store\n+.metadata\/\n+.recommenders\/\n+test\/nashorn\/script\/external\n+test\/nashorn\/lib\n+NashornProfile.txt\n+**\/JTreport\/**\n+**\/JTwork\/**\n+\/jdk\/make\/closed\/\n+\/jdk\/src\/closed\/\n","filename":".gitignore","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -643,0 +643,1 @@\n+  AC_PATH_PROG(GIT, git)\n","filename":"common\/autoconf\/basics.m4","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -835,0 +835,1 @@\n+GIT\n@@ -3111,1 +3112,1 @@\n-# Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -3875,1 +3876,1 @@\n-DATE_WHEN_GENERATED=1573688723\n+DATE_WHEN_GENERATED=1649266272\n@@ -10452,0 +10453,40 @@\n+  # Extract the first word of \"git\", so it can be a program name with args.\n+set dummy git; ac_word=$2\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n+$as_echo_n \"checking for $ac_word... \" >&6; }\n+if ${ac_cv_path_GIT+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  case $GIT in\n+  [\\\\\/]* | ?:[\\\\\/]*)\n+  ac_cv_path_GIT=\"$GIT\" # Let the user override the test with a path.\n+  ;;\n+  *)\n+  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\n+for as_dir in $PATH\n+do\n+  IFS=$as_save_IFS\n+  test -z \"$as_dir\" && as_dir=.\n+    for ac_exec_ext in '' $ac_executable_extensions; do\n+  if as_fn_executable_p \"$as_dir\/$ac_word$ac_exec_ext\"; then\n+    ac_cv_path_GIT=\"$as_dir\/$ac_word$ac_exec_ext\"\n+    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir\/$ac_word$ac_exec_ext\" >&5\n+    break 2\n+  fi\n+done\n+  done\n+IFS=$as_save_IFS\n+\n+  ;;\n+esac\n+fi\n+GIT=$ac_cv_path_GIT\n+if test -n \"$GIT\"; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $GIT\" >&5\n+$as_echo \"$GIT\" >&6; }\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+fi\n+\n+\n","filename":"common\/autoconf\/generated-configure.sh","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -536,0 +536,1 @@\n+GIT:=@GIT@\n","filename":"common\/autoconf\/spec.gmk.in","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -302,0 +302,1 @@\n+GIT_DIRECTORY=.git\n@@ -305,1 +306,3 @@\n-    $(shell $(CD) $(SRC_ROOT) ; ( $(LS) -d $(HG_SEARCH:%\/REPO=%\/$(HG_DIRECTORY)) ; \\\n+    $(shell $(CD) $(SRC_ROOT) ; ( \\\n+        $(LS) -d $(HG_SEARCH:%\/REPO=%\/$(HG_DIRECTORY)) ; \\\n+        $(LS) -d $(HG_SEARCH:%\/REPO=%\/$(GIT_DIRECTORY)) ; \\\n@@ -318,0 +321,6 @@\n+\t  elif [ -d $${i}\/$(GIT_DIRECTORY) -a \"$(GIT)\" != \"\" ] ; then \\\n+\t    porcelain=\"`$(GIT) -C $${i} status --porcelain`\" ; \\\n+\t    $(PRINTF) \" %s:%s%s\\n\" \\\n+\t        \"$${i}\" \\\n+\t        \"`$(GIT) -C $${i} log -n1 --format=%H | $(CUT) -c1-12`\" \\\n+\t        \"`if test -n \\\"$${porcelain}\\\"; then printf '+'; fi`\" ; \\\n@@ -328,1 +337,5 @@\n-\t$(HG) tip --repository $1 --template '{node|short}\\n' > $1\/$(HGTIP_FILENAME); \\\n+\tif [ -d $1\/$(HG_DIRECTORY) -a \"$(HG_VERSION)\" != \"\" ] ; then \\\n+\t  $(HG) tip --repository $1 --template '{node|short}\\n' > $1\/$(HGTIP_FILENAME); \\\n+\telif [ -d $1\/$(GIT_DIRECTORY) -a \"$(GIT)\" != \"\" ] ; then \\\n+\t  $(GIT) -C $1 log -n1 --format=%H | $(CUT) -c1-12 > $1\/$(HGTIP_FILENAME); \\\n+\tfi ; \\\n","filename":"make\/common\/MakeBase.gmk","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"}]}