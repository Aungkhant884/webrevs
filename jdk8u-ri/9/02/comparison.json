{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,1 @@\n-#  \n+#\n@@ -85,1 +85,0 @@\n-                JVM_Exit;\n@@ -275,1 +274,0 @@\n-\n","filename":"hotspot\/make\/aix\/makefiles\/mapfile-vers-debug","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,1 @@\n-#  \n+#\n@@ -85,1 +85,0 @@\n-                JVM_Exit;\n@@ -268,1 +267,0 @@\n-\n","filename":"hotspot\/make\/aix\/makefiles\/mapfile-vers-product","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2002, 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,0 @@\n-                _JVM_Exit\n@@ -266,1 +265,0 @@\n-\n","filename":"hotspot\/make\/bsd\/makefiles\/mapfile-vers-debug","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2002, 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,0 @@\n-                _JVM_Exit\n@@ -261,1 +260,0 @@\n-\n","filename":"hotspot\/make\/bsd\/makefiles\/mapfile-vers-product","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2002, 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,1 @@\n-#  \n+#\n@@ -85,1 +85,0 @@\n-                JVM_Exit;\n@@ -278,1 +277,0 @@\n-\n","filename":"hotspot\/make\/linux\/makefiles\/mapfile-vers-debug","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2002, 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,1 @@\n-#  \n+#\n@@ -85,1 +85,0 @@\n-                JVM_Exit;\n@@ -273,1 +272,0 @@\n-\n","filename":"hotspot\/make\/linux\/makefiles\/mapfile-vers-product","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2000, 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -22,1 +22,1 @@\n-#  \n+#\n@@ -33,1 +33,1 @@\n-        \n+\n@@ -85,1 +85,0 @@\n-                JVM_Exit;\n","filename":"hotspot\/make\/solaris\/makefiles\/mapfile-vers","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -330,1 +330,0 @@\n-  template(run_finalizers_on_exit_name,               \"runFinalizersOnExit\")                      \\\n","filename":"hotspot\/src\/share\/vm\/classfile\/vmSymbols.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -508,25 +508,0 @@\n-static bool has_run_finalizers_on_exit = false;\n-\n-void Universe::run_finalizers_on_exit() {\n-  if (has_run_finalizers_on_exit) return;\n-  has_run_finalizers_on_exit = true;\n-\n-  \/\/ Called on VM exit. This ought to be run in a separate thread.\n-  if (TraceReferenceGC) tty->print_cr(\"Callback to run finalizers on exit\");\n-  {\n-    PRESERVE_EXCEPTION_MARK;\n-    KlassHandle finalizer_klass(THREAD, SystemDictionary::Finalizer_klass());\n-    JavaValue result(T_VOID);\n-    JavaCalls::call_static(\n-      &result,\n-      finalizer_klass,\n-      vmSymbols::run_finalizers_on_exit_name(),\n-      vmSymbols::void_method_signature(),\n-      THREAD\n-    );\n-    \/\/ Ignore any pending exceptions\n-    CLEAR_PENDING_EXCEPTION;\n-  }\n-}\n-\n-\n","filename":"hotspot\/src\/share\/vm\/memory\/universe.cpp","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -408,3 +408,0 @@\n-  \/\/ Finalizer support.\n-  static void run_finalizers_on_exit();\n-\n","filename":"hotspot\/src\/share\/vm\/memory\/universe.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -430,10 +430,0 @@\n-JVM_ENTRY_NO_ENV(void, JVM_Exit(jint code))\n-  if (vm_created != 0 && (code == 0)) {\n-    \/\/ The VM is about to exit. We call back into Java to check whether finalizers should be run\n-    Universe::run_finalizers_on_exit();\n-  }\n-  before_exit(thread);\n-  vm_exit(code);\n-JVM_END\n-\n-\n","filename":"hotspot\/src\/share\/vm\/prims\/jvm.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,3 +150,0 @@\n-JNIEXPORT void JNICALL\n-JVM_Exit(jint code);\n-\n","filename":"hotspot\/src\/share\/vm\/prims\/jvm.h","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-\/\/ Forced VM exit (i.e, internal error or JVM_Exit)\n+\/\/ Forced VM exit (i.e, internal error or JVM_Halt)\n","filename":"hotspot\/src\/share\/vm\/runtime\/java.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -3919,4 +3919,3 @@\n-    \/\/ and finalizers (if runFinalizersOnExit is set) won't be run.\n-    \/\/ Note that if a shutdown hook was registered or runFinalizersOnExit\n-    \/\/ was called, the Shutdown class would have already been loaded\n-    \/\/ (Runtime.addShutdownHook and runFinalizersOnExit will load it).\n+    \/\/ won't be run. Note that if a shutdown hook was registered,\n+    \/\/ the Shutdown class would have already been loaded\n+    \/\/ (Runtime.addShutdownHook will load it).\n@@ -3946,1 +3945,1 @@\n-\/\/        shutdown hooks, run finalizers if finalization-on-exit\n+\/\/        shutdown hooks\n@@ -3997,9 +3996,2 @@\n-  if (JDK_Version::is_jdk12x_version()) {\n-    \/\/ We are the last thread running, so check if finalizers should be run.\n-    \/\/ For 1.3 or later this is done in thread->invoke_shutdown_hooks()\n-    HandleMark rm(thread);\n-    Universe::run_finalizers_on_exit();\n-  } else {\n-    \/\/ run Java level shutdown hooks\n-    thread->invoke_shutdown_hooks();\n-  }\n+  \/\/ run Java level shutdown hooks\n+  thread->invoke_shutdown_hooks();\n","filename":"hotspot\/src\/share\/vm\/runtime\/thread.cpp","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -142,1 +142,0 @@\n-\t\tJava_java_lang_Shutdown_runAllFinalizers;\n@@ -284,1 +283,1 @@\n-\t\t\n+\n","filename":"jdk\/make\/mapfiles\/libjava\/mapfile-vers","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,13 +70,8 @@\n-     * <p> The virtual machine's shutdown sequence consists of two phases.  In\n-     * the first phase all registered {@link #addShutdownHook shutdown hooks},\n-     * if any, are started in some unspecified order and allowed to run\n-     * concurrently until they finish.  In the second phase all uninvoked\n-     * finalizers are run if {@link #runFinalizersOnExit finalization-on-exit}\n-     * has been enabled.  Once this is done the virtual machine {@link #halt\n-     * halts}.\n-     *\n-     * <p> If this method is invoked after the virtual machine has begun its\n-     * shutdown sequence then if shutdown hooks are being run this method will\n-     * block indefinitely.  If shutdown hooks have already been run and on-exit\n-     * finalization has been enabled then this method halts the virtual machine\n-     * with the given status code if the status is nonzero; otherwise, it\n+     * <p> All registered {@linkplain #addShutdownHook shutdown hooks}, if any,\n+     * are started in some unspecified order and allowed to run concurrently\n+     * until they finish.  Once this is done the virtual machine\n+     * {@linkplain #halt halts}.\n+     *\n+     * <p> If this method is invoked after all shutdown hooks have already\n+     * been run and the status is nonzero then this method halts the\n+     * virtual machine with the given status code. Otherwise, this method\n@@ -85,2 +80,2 @@\n-     * <p> The <tt>{@link System#exit(int) System.exit}<\/tt> method is the\n-     * conventional and convenient means of invoking this method. <p>\n+     * <p> The {@link System#exit(int) System.exit} method is the\n+     * conventional and convenient means of invoking this method.\n@@ -93,2 +88,2 @@\n-     *         If a security manager is present and its <tt>{@link\n-     *         SecurityManager#checkExit checkExit}<\/tt> method does not permit\n+     *         If a security manager is present and its\n+     *         {@link SecurityManager#checkExit checkExit} method does not permit\n@@ -101,1 +96,0 @@\n-     * @see #runFinalizersOnExit\n@@ -121,1 +115,1 @@\n-     *   thread exits or when the <tt>{@link #exit exit}<\/tt> (equivalently,\n+     *   thread exits or when the {@link #exit exit} (equivalently,\n@@ -125,1 +119,1 @@\n-     *   user interrupt, such as typing <tt>^C<\/tt>, or a system-wide event,\n+     *   user interrupt, such as typing {@code ^C}, or a system-wide event,\n@@ -134,5 +128,3 @@\n-     * run all uninvoked finalizers if finalization-on-exit has been enabled.\n-     * Finally, the virtual machine will halt.  Note that daemon threads will\n-     * continue to run during the shutdown sequence, as will non-daemon threads\n-     * if shutdown was initiated by invoking the <tt>{@link #exit exit}<\/tt>\n-     * method.\n+     * halt. Note that daemon threads will continue to run during the shutdown\n+     * sequence, as will non-daemon threads if shutdown was initiated by\n+     * invoking the {@link #exit exit} method.\n@@ -141,1 +133,1 @@\n-     * invoking the <tt>{@link #halt halt}<\/tt> method, which forcibly\n+     * invoking the {@link #halt halt} method, which forcibly\n@@ -147,1 +139,1 @@\n-     * <tt>{@link IllegalStateException}<\/tt> to be thrown.\n+     * {@link IllegalStateException} to be thrown.\n@@ -159,1 +151,1 @@\n-     * program invokes <tt>{@link #exit exit}<\/tt> the expectation is\n+     * program invokes {@link #exit exit} the expectation is\n@@ -168,4 +160,4 @@\n-     * other thread, by invoking the <tt>{@link ThreadGroup#uncaughtException\n-     * uncaughtException}<\/tt> method of the thread's <tt>{@link\n-     * ThreadGroup}<\/tt> object.  The default implementation of this method\n-     * prints the exception's stack trace to <tt>{@link System#err}<\/tt> and\n+     * other thread, by invoking the\n+     * {@link ThreadGroup#uncaughtException uncaughtException} method of the\n+     * thread's {@link ThreadGroup} object. The default implementation of this\n+     * method prints the exception's stack trace to {@link System#err} and\n@@ -178,1 +170,1 @@\n-     * <tt>SIGKILL<\/tt> signal on Unix or the <tt>TerminateProcess<\/tt> call on\n+     * {@code SIGKILL} signal on Unix or the {@code TerminateProcess} call on\n@@ -183,1 +175,1 @@\n-     * will be run. <p>\n+     * will be run.\n@@ -186,1 +178,1 @@\n-     *          An initialized but unstarted <tt>{@link Thread}<\/tt> object\n+     *          An initialized but unstarted {@link Thread} object\n@@ -199,1 +191,1 @@\n-     *          <tt>{@link RuntimePermission}(\"shutdownHooks\")<\/tt>\n+     *          {@link RuntimePermission}{@code (\"shutdownHooks\")}\n@@ -247,5 +239,4 @@\n-     * <tt>{@link #exit exit}<\/tt> method, this method does not cause shutdown\n-     * hooks to be started and does not run uninvoked finalizers if\n-     * finalization-on-exit has been enabled.  If the shutdown sequence has\n-     * already been initiated then this method does not wait for any running\n-     * shutdown hooks or finalizers to finish their work. <p>\n+     * {@link #exit exit} method, this method does not cause shutdown\n+     * hooks to be started.  If the shutdown sequence has already been\n+     * initiated then this method does not wait for any running\n+     * shutdown hooks to finish their work.\n@@ -254,5 +245,5 @@\n-     *         Termination status.  By convention, a nonzero status code\n-     *         indicates abnormal termination.  If the <tt>{@link Runtime#exit\n-     *         exit}<\/tt> (equivalently, <tt>{@link System#exit(int)\n-     *         System.exit}<\/tt>) method has already been invoked then this\n-     *         status code will override the status code passed to that method.\n+     *         Termination status. By convention, a nonzero status code\n+     *         indicates abnormal termination. If the {@link Runtime#exit exit}\n+     *         (equivalently, {@link System#exit(int) System.exit}) method\n+     *         has already been invoked then this status code\n+     *         will override the status code passed to that method.\n@@ -261,3 +252,3 @@\n-     *         If a security manager is present and its <tt>{@link\n-     *         SecurityManager#checkExit checkExit}<\/tt> method does not permit\n-     *         an exit with the specified status\n+     *         If a security manager is present and its\n+     *         {@link SecurityManager#checkExit checkExit} method\n+     *         does not permit an exit with the specified status\n@@ -279,15 +270,1 @@\n-     * Enable or disable finalization on exit; doing so specifies that the\n-     * finalizers of all objects that have finalizers that have not yet been\n-     * automatically invoked are to be run before the Java runtime exits.\n-     * By default, finalization on exit is disabled.\n-     *\n-     * <p>If there is a security manager,\n-     * its <code>checkExit<\/code> method is first called\n-     * with 0 as its argument to ensure the exit is allowed.\n-     * This could result in a SecurityException.\n-     *\n-     * @param value true to enable finalization on exit, false to disable\n-     * @deprecated  This method is inherently unsafe.  It may result in\n-     *      finalizers being called on live objects while other threads are\n-     *      concurrently manipulating those objects, resulting in erratic\n-     *      behavior or deadlock.\n+     * Throws {@code UnsupportedOperationException}.\n@@ -295,3 +272,1 @@\n-     * @throws  SecurityException\n-     *        if a security manager exists and its <code>checkExit<\/code>\n-     *        method doesn't allow the exit.\n+     * @param value ignored\n@@ -299,4 +274,9 @@\n-     * @see     java.lang.Runtime#exit(int)\n-     * @see     java.lang.Runtime#gc()\n-     * @see     java.lang.SecurityManager#checkExit(int)\n-     * @since   JDK1.1\n+     * @deprecated This method was originally designed to enable or disable\n+     * running finalizers on exit. Running finalizers on exit was disabled by default.\n+     * If enabled, then the finalizers of all objects whose finalizers had not\n+     * yet been automatically invoked were to be run before the Java runtime exits.\n+     * That behavior is inherently unsafe. It may result in finalizers being called\n+     * on live objects while other threads are concurrently manipulating those objects,\n+     * resulting in erratic behavior or deadlock.\n+     *\n+     * @since JDK1.1\n@@ -306,9 +286,1 @@\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            try {\n-                security.checkExit(0);\n-            } catch (SecurityException e) {\n-                throw new SecurityException(\"runFinalizersOnExit\");\n-            }\n-        }\n-        Shutdown.setRunFinalizersOnExit(value);\n+        throw new UnsupportedOperationException();\n","filename":"jdk\/src\/share\/classes\/java\/lang\/Runtime.java","additions":53,"deletions":81,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-\n@@ -35,0 +34,4 @@\n+ *\n+ * @see java.io.Console\n+ * @see ApplicationShutdownHooks\n+ * @see java.io.DeleteOnExitHook\n@@ -39,9 +42,0 @@\n-    \/* Shutdown state *\/\n-    private static final int RUNNING = 0;\n-    private static final int HOOKS = 1;\n-    private static final int FINALIZERS = 2;\n-    private static int state = RUNNING;\n-\n-    \/* Should we run all finalizers upon exit? *\/\n-    private static boolean runFinalizersOnExit = false;\n-\n@@ -51,1 +45,2 @@\n-    \/\/ (1) Application hooks\n+    \/\/ (1) ApplicationShutdownHooks that invokes all registered application\n+    \/\/     shutdown hooks and waits until they finish\n@@ -57,1 +52,4 @@\n-    private static int currentRunningHook = 0;\n+    private static int currentRunningHook = -1;\n+\n+    \/\/ track whether we have already (commenced) shutdown\n+    private static boolean isShutdown;\n@@ -66,8 +64,0 @@\n-    \/* Invoked by Runtime.runFinalizersOnExit *\/\n-    static void setRunFinalizersOnExit(boolean run) {\n-        synchronized (lock) {\n-            runFinalizersOnExit = run;\n-        }\n-    }\n-\n-\n@@ -75,2 +65,2 @@\n-     * Add a new shutdown hook.  Checks the shutdown state and the hook itself,\n-     * but does not do any security checks.\n+     * Add a new system shutdown hook.  Checks the shutdown state and\n+     * the hook itself, but does not do any security checks.\n@@ -83,5 +73,5 @@\n-     * @params slot  the slot in the shutdown hook array, whose element\n-     *               will be invoked in order during shutdown\n-     * @params registerShutdownInProgress true to allow the hook\n-     *               to be registered even if the shutdown is in progress.\n-     * @params hook  the hook to be registered\n+     * @param slot  the slot in the shutdown hook array, whose element\n+     *              will be invoked in order during shutdown\n+     * @param registerShutdownInProgress true to allow the hook\n+     *              to be registered even if the shutdown is in progress.\n+     * @param hook  the hook to be registered\n@@ -89,4 +79,4 @@\n-     * @throw IllegalStateException\n-     *        if registerShutdownInProgress is false and shutdown is in progress; or\n-     *        if registerShutdownInProgress is true and the shutdown process\n-     *           already passes the given slot\n+     * @throws IllegalStateException\n+     *         if registerShutdownInProgress is false and shutdown is in progress; or\n+     *         if registerShutdownInProgress is true and the shutdown process\n+     *         already passes the given slot\n@@ -95,0 +85,3 @@\n+        if (slot < 0 || slot >= MAX_SYSTEM_HOOKS) {\n+            throw new IllegalArgumentException(\"Invalid slot: \" + slot);\n+        }\n@@ -100,1 +93,1 @@\n-                if (state > RUNNING)\n+                if (currentRunningHook >= 0)\n@@ -103,1 +96,1 @@\n-                if (state > HOOKS || (state == HOOKS && slot <= currentRunningHook))\n+                if (isShutdown || slot <= currentRunningHook)\n@@ -111,1 +104,8 @@\n-    \/* Run all registered shutdown hooks\n+    \/* Run all system shutdown hooks.\n+     *\n+     * The system shutdown hooks are run in the thread synchronized on\n+     * Shutdown.class.  Other threads calling Runtime::exit, Runtime::halt\n+     * or JNI DestroyJavaVM will block indefinitely.\n+     *\n+     * ApplicationShutdownHooks is registered as one single hook that starts\n+     * all application shutdown hooks and waits until they finish.\n@@ -114,0 +114,7 @@\n+        synchronized (lock) {\n+            \/* Guard against the possibility of a daemon thread invoking exit\n+             * after DestroyJavaVM initiates the shutdown sequence\n+             *\/\n+            if (isShutdown) return;\n+        }\n+\n@@ -124,1 +131,1 @@\n-            } catch(Throwable t) {\n+            } catch (Throwable t) {\n@@ -131,0 +138,7 @@\n+\n+        \/\/ set shutdown state\n+        \/\/ Synchronization is for visibility; only one thread\n+        \/\/ can ever get here.\n+        synchronized(lock) {\n+            isShutdown = true;\n+        }\n@@ -145,32 +159,0 @@\n-    \/* Wormhole for invoking java.lang.ref.Finalizer.runAllFinalizers *\/\n-    private static native void runAllFinalizers();\n-\n-\n-    \/* The actual shutdown sequence is defined here.\n-     *\n-     * If it weren't for runFinalizersOnExit, this would be simple -- we'd just\n-     * run the hooks and then halt.  Instead we need to keep track of whether\n-     * we're running hooks or finalizers.  In the latter case a finalizer could\n-     * invoke exit(1) to cause immediate termination, while in the former case\n-     * any further invocations of exit(n), for any n, simply stall.  Note that\n-     * if on-exit finalizers are enabled they're run iff the shutdown is\n-     * initiated by an exit(0); they're never run on exit(n) for n != 0 or in\n-     * response to SIGINT, SIGTERM, etc.\n-     *\/\n-    private static void sequence() {\n-        synchronized (lock) {\n-            \/* Guard against the possibility of a daemon thread invoking exit\n-             * after DestroyJavaVM initiates the shutdown sequence\n-             *\/\n-            if (state != HOOKS) return;\n-        }\n-        runHooks();\n-        boolean rfoe;\n-        synchronized (lock) {\n-            state = FINALIZERS;\n-            rfoe = runFinalizersOnExit;\n-        }\n-        if (rfoe) runAllFinalizers();\n-    }\n-\n-\n@@ -182,1 +164,0 @@\n-        boolean runMoreFinalizers = false;\n@@ -184,18 +165,3 @@\n-            if (status != 0) runFinalizersOnExit = false;\n-            switch (state) {\n-            case RUNNING:       \/* Initiate shutdown *\/\n-                state = HOOKS;\n-                break;\n-            case HOOKS:         \/* Stall and halt *\/\n-                break;\n-            case FINALIZERS:\n-                if (status != 0) {\n-                    \/* Halt immediately on nonzero status *\/\n-                    halt(status);\n-                } else {\n-                    \/* Compatibility with old behavior:\n-                     * Run more finalizers and then halt\n-                     *\/\n-                    runMoreFinalizers = runFinalizersOnExit;\n-                }\n-                break;\n+            if (status != 0 && isShutdown) {\n+                \/* Halt immediately on nonzero status *\/\n+                halt(status);\n@@ -204,4 +170,0 @@\n-        if (runMoreFinalizers) {\n-            runAllFinalizers();\n-            halt(status);\n-        }\n@@ -212,1 +174,1 @@\n-            sequence();\n+            runHooks();\n@@ -223,10 +185,0 @@\n-        synchronized (lock) {\n-            switch (state) {\n-            case RUNNING:       \/* Initiate shutdown *\/\n-                state = HOOKS;\n-                break;\n-            case HOOKS:         \/* Stall and then return *\/\n-            case FINALIZERS:\n-                break;\n-            }\n-        }\n@@ -234,1 +186,1 @@\n-            sequence();\n+            runHooks();\n","filename":"jdk\/src\/share\/classes\/java\/lang\/Shutdown.java","additions":55,"deletions":103,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -1033,18 +1033,1 @@\n-     * Enable or disable finalization on exit; doing so specifies that the\n-     * finalizers of all objects that have finalizers that have not yet been\n-     * automatically invoked are to be run before the Java runtime exits.\n-     * By default, finalization on exit is disabled.\n-     *\n-     * <p>If there is a security manager,\n-     * its <code>checkExit<\/code> method is first called\n-     * with 0 as its argument to ensure the exit is allowed.\n-     * This could result in a SecurityException.\n-     *\n-     * @deprecated  This method is inherently unsafe.  It may result in\n-     *      finalizers being called on live objects while other threads are\n-     *      concurrently manipulating those objects, resulting in erratic\n-     *      behavior or deadlock.\n-     * @param value indicating enabling or disabling of finalization\n-     * @throws  SecurityException\n-     *        if a security manager exists and its <code>checkExit<\/code>\n-     *        method doesn't allow the exit.\n+     * Throws {@code UnsupportedOperationException}.\n@@ -1052,4 +1035,19 @@\n-     * @see     java.lang.Runtime#exit(int)\n-     * @see     java.lang.Runtime#gc()\n-     * @see     java.lang.SecurityManager#checkExit(int)\n-     * @since   JDK1.1\n+     * <p>The call {@code System.runFinalizersOnExit()} is effectively\n+     * equivalent to the call:\n+     * <blockquote><pre>\n+     * Runtime.runFinalizersOnExit()\n+     * <\/pre><\/blockquote>\n+     *\n+     * @param value ignored\n+     *\n+     * @deprecated This method was originally designed to enable or disable\n+     * running finalizers on exit. Running finalizers on exit was disabled\n+     * by default. If enabled, then the finalizers of all objects whose\n+     * finalizers had not yet been automatically invoked were to be run before\n+     * the Java runtime exits. That behavior is inherently unsafe. It may\n+     * result in finalizers being called on live objects while other threads\n+     * are concurrently manipulating those objects, resulting in erratic\n+     * behavior or deadlock.\n+     *\n+     * @see java.lang.Runtime#runFinalizersOnExit(boolean)\n+     * @since JDK1.1\n","filename":"jdk\/src\/share\/classes\/java\/lang\/System.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,4 +111,1 @@\n-       This method is used by both runFinalization and runFinalizersOnExit.\n-       The former method invokes all pending finalizers, while the latter\n-       invokes all uninvoked finalizers if on-exit finalization has been\n-       enabled.\n+       This method is used by runFinalization.\n@@ -116,2 +113,2 @@\n-       These two methods could have been implemented by offloading their work\n-       to the regular finalizer thread and waiting for that thread to finish.\n+       It could have been implemented by offloading the work to the\n+       regular finalizer thread and waiting for that thread to finish.\n@@ -119,1 +116,1 @@\n-       invokers of these methods from a stalled or deadlocked finalizer thread.\n+       invokers of that method from a stalled or deadlocked finalizer thread.\n@@ -162,24 +159,0 @@\n-    \/* Invoked by java.lang.Shutdown *\/\n-    static void runAllFinalizers() {\n-        if (!VM.isBooted()) {\n-            return;\n-        }\n-\n-        forkSecondaryFinalizer(new Runnable() {\n-            private volatile boolean running;\n-            public void run() {\n-                if (running)\n-                    return;\n-                final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n-                running = true;\n-                for (;;) {\n-                    Finalizer f;\n-                    synchronized (lock) {\n-                        f = unfinalized;\n-                        if (f == null) break;\n-                        unfinalized = f.next;\n-                    }\n-                    f.runFinalizer(jla);\n-                }}});\n-    }\n-\n","filename":"jdk\/src\/share\/classes\/java\/lang\/ref\/Finalizer.java","additions":5,"deletions":32,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,3 +123,0 @@\n-JNIEXPORT void JNICALL\n-JVM_Exit(jint code);\n-\n","filename":"jdk\/src\/share\/javavm\/export\/jvm.h","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,14 +38,0 @@\n-\n-\n-JNIEXPORT void JNICALL\n-Java_java_lang_Shutdown_runAllFinalizers(JNIEnv *env, jclass ignored)\n-{\n-    jclass cl;\n-    jmethodID mid;\n-\n-    if ((cl = (*env)->FindClass(env, \"java\/lang\/ref\/Finalizer\"))\n-        && (mid = (*env)->GetStaticMethodID(env, cl,\n-                                            \"runAllFinalizers\", \"()V\"))) {\n-        (*env)->CallStaticVoidMethod(env, cl, mid);\n-    }\n-}\n","filename":"jdk\/src\/share\/native\/java\/lang\/Shutdown.c","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4119554\n-   @summary runFinalizersOnExit(true) causes JIT to be unloaded and\n-            crashes the VM.  Interim fix for 1.2 beta4 -- don't unload\n-            native libraries loaded by system classes.\n-   @run main\/othervm ExitFinalizersAndJIT\n-*\/\n-\n-public class ExitFinalizersAndJIT {\n-    public static void main(String[] args) throws Exception {\n-        System.runFinalizersOnExit(true);\n-    }\n-}\n","filename":"jdk\/test\/java\/lang\/System\/ExitFinalizersAndJIT.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4116016\n-   @summary Ensure that finalizers are not invoked more than once when on-exit\n-            finalization is enabled and a finalizer invokes System.exit after\n-            System.exit has already been invoked\n-   @build FinExit\n-   @run shell FinExit.sh\n- *\/\n-\n-\n-public class FinExit {\n-\n-    boolean finalized = false;\n-\n-    public void finalize() {\n-        if (finalized) {\n-            System.out.println(\"2\");\n-        } else {\n-            finalized = true;\n-            System.out.println(\"1\");\n-            System.exit(0);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        System.runFinalizersOnExit(true);\n-        Object o = new FinExit();\n-        System.exit(0);\n-    }\n-\n-}\n","filename":"jdk\/test\/java\/lang\/System\/finalization\/FinExit.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -1,36 +0,0 @@\n-#! \/bin\/sh\n-\n-#\n-# Copyright (c) 1998, 2010, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-\n-# We only want the first character, Windows might add CRLF\n-x=`$TESTJAVA\/bin\/java ${TESTVMOPTS} -cp \"$TESTCLASSES\" FinExit | cut -c1`\n-echo $x\n-if [ \"x$x\" != \"x1\" ]; then\n-  echo On-exit finalizer invoked twice\n-  exit 1\n-else\n-  exit 0\n-fi\n","filename":"jdk\/test\/java\/lang\/System\/finalization\/FinExit.sh","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8287132\n+ * @summary Ensure that System.runFinalizersOnExit throws\n+ *          UnsupportedOperationException\n+ *\/\n+public class RunFinalizersOnExit {\n+    public static void main(String[] args) {\n+        try {\n+            System.runFinalizersOnExit(true);\n+            throw new Error(\"UnsupportedOperationException was not thrown\");\n+        }\n+        catch (UnsupportedOperationException expected) {\n+        }\n+\n+        try {\n+            System.runFinalizersOnExit(false);\n+            throw new Error(\"UnsupportedOperationException was not thrown\");\n+        }\n+        catch (UnsupportedOperationException expected) {\n+        }\n+    }\n+}\n","filename":"jdk\/test\/java\/lang\/System\/finalization\/RunFinalizersOnExit.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}