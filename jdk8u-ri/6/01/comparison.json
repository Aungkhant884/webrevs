{"files":[{"patch":"@@ -248,0 +248,16 @@\n+    \/**\n+     * Throws {@link CloneNotSupportedException}. A {@code Reference} cannot be\n+     * meaningfully cloned. Construct a new {@code Reference} instead.\n+     *\n+     * @apiNote This method is defined in Java SE 8 Maintenance Release 4.\n+     *\n+     * @return  never returns normally\n+     * @throws  CloneNotSupportedException always\n+     *\n+     * @since 8\n+     *\/\n+    @Override\n+    protected Object clone() throws CloneNotSupportedException {\n+        throw new CloneNotSupportedException();\n+    }\n+\n","filename":"jdk\/src\/share\/classes\/java\/lang\/ref\/Reference.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8201793\n+ * @summary Test Reference::clone to throw CloneNotSupportedException\n+ *\/\n+\n+import java.lang.ref.*;\n+\n+public class ReferenceClone {\n+    private static final ReferenceQueue<Object> QUEUE = new ReferenceQueue<>();\n+    public static void main(String... args) {\n+        ReferenceClone refClone = new ReferenceClone();\n+        refClone.test();\n+    }\n+\n+    public void test() {\n+        \/\/ test Reference::clone that throws CNSE\n+        Object o = new Object();\n+        assertCloneNotSupported(new SoftRef(o));\n+        assertCloneNotSupported(new WeakRef(o));\n+        assertCloneNotSupported(new PhantomRef(o));\n+\n+        \/\/ Reference subclass may override the clone method\n+        CloneableReference ref = new CloneableReference(o);\n+        try {\n+            ref.clone();\n+        } catch (CloneNotSupportedException e) {}\n+    }\n+\n+    private void assertCloneNotSupported(CloneableRef ref) {\n+        try {\n+            ref.clone();\n+            throw new RuntimeException(\"Reference::clone should throw CloneNotSupportedException\");\n+        } catch (CloneNotSupportedException e) {}\n+    }\n+\n+    \/\/ override clone to be public that throws CNSE\n+    interface CloneableRef extends Cloneable {\n+        public Object clone() throws CloneNotSupportedException;\n+    }\n+\n+    class SoftRef extends SoftReference<Object> implements CloneableRef {\n+        public SoftRef(Object referent) {\n+            super(referent, QUEUE);\n+        }\n+        public Object clone() throws CloneNotSupportedException {\n+            return super.clone();\n+        }\n+    }\n+\n+    class WeakRef extends WeakReference<Object> implements CloneableRef {\n+        public WeakRef(Object referent) {\n+            super(referent, QUEUE);\n+        }\n+        public Object clone() throws CloneNotSupportedException {\n+            return super.clone();\n+        }\n+    }\n+\n+    class PhantomRef extends PhantomReference<Object> implements CloneableRef {\n+        public PhantomRef(Object referent) {\n+            super(referent, QUEUE);\n+        }\n+\n+        public Object clone() throws CloneNotSupportedException {\n+            return super.clone();\n+        }\n+    }\n+\n+    \/\/ override clone to return a new instance\n+    class CloneableReference extends WeakReference<Object> implements Cloneable {\n+        public CloneableReference(Object referent) {\n+            super(referent, QUEUE);\n+        }\n+\n+        public Object clone() throws CloneNotSupportedException {\n+            return new CloneableReference(this.get());\n+        }\n+    }\n+\n+}\n","filename":"jdk\/test\/java\/lang\/ref\/ReferenceClone.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}