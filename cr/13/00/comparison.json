{"files":[{"patch":"@@ -170,1 +170,0 @@\n-<script src=\"webrev.js\" type=\"text\/javascript\"><\/script>\n@@ -196,0 +195,1506 @@\n+<script type=\"text\/javascript\">\n+\"use strict\";\n+\n+let state = {\n+    \"metadata\": null,\n+    \"comparison\": null,\n+    \"commits\": null,\n+    \"head\": {\n+        \"content\": null\n+    },\n+    \"base\": {\n+        \"content\": null\n+    },\n+    \"view\": null,\n+    \"index\": -1,\n+    \"hunk\": 0,\n+    \"intervalId\": -1,\n+    \"hunks\": null,\n+    \"cache\": {\n+        \"cdiffs\": null,\n+        \"udiffs\": null,\n+        \"sdiffs\": null,\n+        \"frames\": null,\n+        \"old\": null,\n+        \"new\": null,\n+        \"patch\": null\n+    }\n+};\n+\n+function render(state) {\n+    log(\"render: view: \" + state.view);\n+    body().innerHTML = \"\";\n+    body().removeEventListener(\"keydown\", framesOnKeyDown);\n+    body().style.margin = 0;\n+    if (state.view !== \"index\") {\n+        if (state.head.content[state.index] === null || state.base.content[state.index] === null) {\n+            const content = fetchFileContent(state);\n+            state.head.content[state.index] = content.head;\n+            state.base.content[state.index] = content.base;\n+        }\n+    }\n+    if (state.view === \"index\") {\n+        renderIndex(state);\n+    } else if (state.view === \"udiff\") {\n+        renderUdiff(state);\n+    } else if (state.view === \"new\") {\n+        renderNew(state);\n+    } else if (state.view === \"old\") {\n+        renderOld(state);\n+    } else if (state.view === \"frames\") {\n+        renderFrames(state);\n+    } else if (state.view === \"cdiff\") {\n+        renderCdiff(state);\n+    } else if (state.view === \"sdiff\") {\n+        renderSdiff(state);\n+    } else if (state.view === \"patch\") {\n+        renderPatch(state);\n+    } else {\n+        log(\"error: unexpected view: \" + state.view);\n+    }\n+}\n+\n+function summarize(files) {\n+    const res = {\n+        \"changes\": 0,\n+        \"additions\": 0,\n+        \"deletions\": 0\n+    }\n+    for (let file of files) {\n+        res.changes += file.changes;\n+        res.additions += file.additions;\n+        res.deletions += file.deletions;\n+    }\n+\n+    return res;\n+}\n+\n+function getCommitsPerFile(commits) {\n+    const res = {};\n+    for (let commit of commits) {\n+        for (let file of commit.files) {\n+            if (!(file.filename in res)) {\n+                res[file.filename] = new Array();\n+            }\n+            console.log(commit.sha);\n+            res[file.filename].unshift(commit);\n+        }\n+    }\n+    return res;\n+}\n+\n+async function renderIndex(state) {\n+    body().style.margin = \"8px\";\n+\n+    const metadata = state.metadata;\n+\n+    const summary = create(\"div\");\n+    summary.className = \"summary\";\n+\n+    const header = create(\"h2\");\n+    header.className = \"summary\";\n+    header.innerHTML = \"Code Review for \" + metadata.base.repo.full_name;\n+\n+    const table = create(\"table\");\n+    table.className = \"summary\";\n+\n+    const generatedOnRow = create(\"tr\");\n+    const generatedOnHeader = create(\"th\");\n+    generatedOnHeader.innerHTML = \"Generated on:\";\n+    const generatedOnData = create(\"td\");\n+    const date = new Date(metadata.created_at);\n+    generatedOnData.append(date.toUTCString());\n+    generatedOnRow.append(generatedOnHeader);\n+    generatedOnRow.append(generatedOnData);\n+\n+    const compareAgainstRepoRow = create(\"tr\");\n+    const compareAgainstRepoHeader = create(\"th\");\n+    compareAgainstRepoHeader.innerHTML = \"Compare against:\";\n+    const compareAgainstRepoLink = create(\"a\");\n+    compareAgainstRepoLink.href = metadata.base.repo.html_url;\n+    compareAgainstRepoLink.innerHTML = metadata.base.repo.html_url;\n+    const compareAgainstRepoData = create(\"td\");\n+    compareAgainstRepoData.append(compareAgainstRepoLink);\n+    compareAgainstRepoRow.append(compareAgainstRepoHeader);\n+    compareAgainstRepoRow.append(compareAgainstRepoData);\n+\n+    const compareAgainstRevRow = create(\"tr\");\n+    const compareAgainstRevHeader = create(\"th\");\n+    compareAgainstRevHeader.innerHTML = \"Compare against version:\";\n+    const compareAgainstRevData = create(\"td\");\n+    const compareAgainstRevLink = create(\"a\");\n+    compareAgainstRevLink.href = metadata.base.repo.html_url + \"\/commit\/\" + metadata.base.sha;\n+    compareAgainstRevLink.innerHTML = metadata.base.sha.substring(0, 8);\n+    compareAgainstRevData.append(compareAgainstRevLink);\n+    compareAgainstRevRow.append(compareAgainstRevHeader);\n+    compareAgainstRevRow.append(compareAgainstRevData);\n+\n+    const summaryOfChangesRow = create(\"tr\");\n+    const summaryOfChangesHeader = create(\"th\");\n+    summaryOfChangesHeader.innerHTML = \"Summary of changes:\";\n+    const summaryOfChangesData = create(\"td\");\n+    const { changes, additions, deletions } = summarize(state.comparison.files);\n+    summaryOfChangesData.innerHTML = changes + \" lines changed; \" + additions + \" ins; \" + deletions + \" del\";\n+    summaryOfChangesRow.append(summaryOfChangesHeader);\n+    summaryOfChangesRow.append(summaryOfChangesData);\n+\n+    const patchOfChangesRow = create(\"tr\");\n+    const patchOfChangesHeader = create(\"th\");\n+    patchOfChangesHeader.innerHTML = \"Diff of changes:\";\n+    const patchOfChangesData = create(\"td\");\n+    const patchOfChangesLink = create(\"a\");\n+    patchOfChangesLink.href = \"https:\/\/github.com\/\" + metadata.base.repo.full_name + \"\/compare\/\" + metadata.base.sha + \"...\" + metadata.head.sha + \".diff\";\n+    patchOfChangesLink.innerHTML = metadata.base.sha.substring(0, 8) + \"...\" + metadata.head.sha.substring(0, 8) + \".diff\";\n+    patchOfChangesData.append(patchOfChangesLink);\n+    patchOfChangesRow.append(patchOfChangesHeader);\n+    patchOfChangesRow.append(patchOfChangesData);\n+\n+    const pullRequestRow = create(\"tr\");\n+    const pullRequestHeader = create(\"th\");\n+    pullRequestHeader.innerHTML = \"Pull request:\";\n+    const pullRequestData = create(\"td\");\n+    const pullRequestLink = create(\"a\");\n+    pullRequestLink.href = \"https:\/\/github.com\/\" + metadata.base.repo.full_name + \"\/pull\/\" + metadata.number;\n+    pullRequestLink.innerHTML = metadata.number;\n+    pullRequestData.append(pullRequestLink);\n+    pullRequestRow.append(pullRequestHeader);\n+    pullRequestRow.append(pullRequestData);\n+\n+    const legendRow = create(\"tr\");\n+    const legendRowHeader = create(\"th\");\n+    legendRowHeader.innerHTML = \"Legend:\";\n+    const legendRowData = create(\"td\");\n+    const modifiedSpan = create(\"span\");\n+    modifiedSpan.className = \"file-modified\";\n+    modifiedSpan.innerHTML = \"Modified file\";\n+    const removedSpan = create(\"span\");\n+    removedSpan.className = \"file-removed\";\n+    removedSpan.innerHTML = \"Deleted file\";\n+    const newSpan = create(\"span\");\n+    newSpan.className = \"file-added\";\n+    newSpan.innerHTML = \"New file\";\n+    legendRowData.append(modifiedSpan);\n+    legendRowData.append(create(\"br\"));\n+    legendRowData.append(removedSpan);\n+    legendRowData.append(create(\"br\"));\n+    legendRowData.append(newSpan);\n+    legendRow.append(legendRowHeader);\n+    legendRow.append(legendRowData);\n+\n+    table.append(generatedOnRow);\n+    table.append(compareAgainstRepoRow);\n+    table.append(compareAgainstRevRow);\n+    table.append(summaryOfChangesRow);\n+    table.append(patchOfChangesRow);\n+    table.append(pullRequestRow);\n+    table.append(legendRow);\n+\n+    summary.append(header);\n+    summary.append(table);\n+\n+    body().append(summary);\n+\n+    const commitsPerFile = getCommitsPerFile(await state.commits);\n+    const files = state.comparison.files;\n+    for (let i = 0; i < files.length; i++) {\n+        const file = files[i];\n+        const filename = file.filename;\n+        const p = create(\"p\");\n+        const code = create(\"code\");\n+        if (file.status === \"modified\" || file.status === \"copied\" || file.status === \"renamed\") {\n+            const cdiff = create(\"a\");\n+            cdiff.href = \"#cdiff-\" + i + \"-\" + filename;\n+            cdiff.innerHTML = \"Cdiffs\";\n+            code.append(cdiff, \" \");\n+\n+            const udiff = create(\"a\");\n+            udiff.href = \"#udiff-\" + i + \"-\" + filename;\n+            udiff.innerHTML = \"Udiffs\";\n+            code.append(udiff, \" \");\n+\n+            const sdiff = create(\"a\");\n+            sdiff.href = \"#sdiff-\" + i + \"-\" + filename;\n+            sdiff.innerHTML = \"Sdiffs\";\n+            code.append(sdiff, \" \");\n+\n+            const frames = create(\"a\");\n+            frames.href = \"#frames-\" + i + \"-\" + filename;\n+            frames.innerHTML = \"Frames\";\n+            code.append(frames, \" \");\n+\n+            const oldFile = create(\"a\");\n+            oldFile.href = \"#old-\" + i + \"-\" + filename;\n+            oldFile.innerHTML = \"Old\";\n+            code.append(oldFile, \" \");\n+\n+            const newFile = create(\"a\");\n+            newFile.href = \"#new-\" + i + \"-\" + filename;\n+            newFile.innerHTML = \"New\";\n+            code.append(newFile, \" \");\n+\n+            const patchFile = create(\"a\");\n+            patchFile.href = \"#patch-\" + i + \"-\" + filename;\n+            patchFile.innerHTML = \"Patch\";\n+            code.append(patchFile, \" \");\n+\n+            const rawFile = create(\"a\");\n+            rawFile.href = \"https:\/\/raw.githubusercontent.com\/\" + metadata.head.repo.full_name + \"\/\" + metadata.head.sha + \"\/\" + file.filename;\n+            rawFile.innerHTML = \"Raw\";\n+            code.append(rawFile, \" \");\n+\n+            p.append(code);\n+\n+            const fileNameSpan = create(\"span\");\n+            fileNameSpan.className = \"file-modified\";\n+            fileNameSpan.innerHTML = file.filename;\n+            p.append(fileNameSpan);\n+\n+            if (file.status === \"copied\" || file.status === \"renamed\") {\n+                const italic = create(\"i\");\n+                italic.innerHTML = \"(was \" + file.previous_filename + \")\";\n+                p.append(italic);\n+            }\n+        } else if (file.status === \"added\") {\n+            code.append(\"------ \");\n+            code.append(\"------ \");\n+            code.append(\"------ \");\n+            code.append(\"------ \");\n+            code.append(\"--- \");\n+\n+            const newFile = create(\"a\");\n+            newFile.href = \"#new-\" + i + \"-\" + filename;\n+            newFile.innerHTML = \"New\";\n+            code.append(newFile, \" \");\n+\n+            const patchFile = create(\"a\");\n+            patchFile.href = \"#patch-\" + i + \"-\" + filename;\n+            patchFile.innerHTML = \"Patch\";\n+            code.append(patchFile, \" \");\n+\n+            const rawFile = create(\"a\");\n+            rawFile.href = \"https:\/\/raw.githubusercontent.com\/\" + metadata.head.repo.full_name + \"\/\" + metadata.head.sha + \"\/\" + file.filename;\n+            rawFile.innerHTML = \"Raw\";\n+            code.append(rawFile, \" \");\n+\n+            p.append(code);\n+\n+            const fileNameSpan = create(\"span\");\n+            fileNameSpan.className = \"file-added\";\n+            fileNameSpan.innerHTML = file.filename;\n+\n+            p.append(fileNameSpan);\n+        } else if (file.status === \"deleted\") {\n+            code.append(\"------ \");\n+            code.append(\"------ \");\n+            code.append(\"------ \");\n+            code.append(\"------ \");\n+\n+            const oldFile = create(\"a\");\n+            oldFile.href = \"#old-\" + i + \"-\" + filename;\n+            oldFile.innerHTML = \"Old\";\n+            code.append(oldFile, \" \");\n+\n+            code.append(\"--- \");\n+\n+            const patchFile = create(\"a\");\n+            patchFile.href = \"#patch-\" + i + \"-\" + filename;\n+            patchFile.innerHTML = \"Patch\";\n+            code.append(patchFile, \" \");\n+\n+            const rawFile = create(\"a\");\n+            rawFile.href = \"https:\/\/raw.githubusercontent.com\/\" + metadata.head.repo.full_name + \"\/\" + metadata.head.sha + \"\/\" + file.filename;\n+            rawFile.innerHTML = \"Raw\";\n+            code.append(rawFile, \" \");\n+\n+            p.append(code);\n+\n+            const fileNameSpan = create(\"span\");\n+            fileNameSpan.className = \"file-removed\";\n+            fileNameSpan.innerHTML = file.filename;\n+\n+            p.append(fileNameSpan);\n+        }\n+\n+        body().append(p);\n+\n+        const blockquote = create(\"blockquote\");\n+        const commitMessages = create(\"pre\");\n+        for (var commit of commitsPerFile[file.filename]) {\n+            const subject = commit.commit.message.split('\\n')[0];\n+            commitMessages.append(commit.sha.substring(0, 8) + \": \" + subject, \"\\n\");\n+        }\n+        const blockquoteSpan = create(\"span\");\n+        blockquoteSpan.className = \"stat\";\n+        blockquoteSpan.innerHTML = file.changes + \" lines changed; \" + file.additions + \" ins; \" + file.deletions + \" del\";\n+        blockquote.append(commitMessages, blockquoteSpan);\n+        body().append(blockquote);\n+    }\n+\n+    const hr = create(\"hr\");\n+    const footer = create(\"p\");\n+    footer.className = \"version\";\n+\n+    const webrevLink = create(\"a\");\n+    webrevLink.href = \"https:\/\/git.openjdk.java.net\/cr\/blob\/master\/webrev.js\";\n+    webrevLink.innerHTML = \"webrev.js\";\n+    footer.append(\"This code review page was prepared using \", webrevLink, \".\");\n+\n+    body().append(hr);\n+    body().append(footer);\n+}\n+\n+function hasOnlyAdditions(hunk, context) {\n+    for (var line of hunk.src.lines) {\n+        if (line.startsWith(\"-\")) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+function hasOnlyDeletions(hunk, context) {\n+    for (var line of hunk.dst.lines) {\n+        if (line.startsWith(\"+\")) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+function createNavigation(view, index) {\n+    const files = state.comparison.files;\n+    const center = create(\"center\");\n+    let prevModified = -1;\n+    let prevFilename = \"\";\n+    for (let i = index - 1; i >= 0; i--) {\n+        const s = files[i].status;\n+        if (s === \"modified\" || s === \"renamed\" || s === \"copied\") {\n+            prevModified = i;\n+            prevFilename = files[i].filename;\n+            break;\n+        }\n+    }\n+    if (prevModified === -1) {\n+        const prev = create(\"span\");\n+        prev.innerHTML = \"&lt; prev\";\n+        center.append(prev);\n+    } else {\n+        const prev = create(\"a\");\n+        prev.innerHTML = \"&lt; prev\";\n+        prev.href = \"#\" + view + \"-\" + prevModified + \"-\" + prevFilename;\n+        center.append(prev);\n+    }\n+\n+    const indexLink = create(\"a\");\n+    indexLink.href = \"#\";\n+    indexLink.innerHTML = \"index\";\n+    indexLink.addEventListener(\"click\", function (e) {\n+        e.preventDefault();\n+        state.view = \"index\";\n+        window.history.pushState({}, null, window.location.search);\n+        render(state);\n+    });\n+    center.append(\" \", indexLink, \" \");\n+\n+    let nextModified = -1;\n+    let nextFilename = \"\";\n+    for (let i = index + 1; i < files.length; i++) {\n+        const s = files[i].status;\n+        if (s === \"modified\" || s === \"copied\" || s === \"renamed\") {\n+            nextModified = i;\n+            nextFilename = files[i].filename;\n+            break;\n+        }\n+    }\n+    if (nextModified === -1) {\n+        const next = create(\"span\");\n+        next.innerHTML = \"next &gt;\";\n+        center.append(next);\n+    } else {\n+        const next = create(\"a\");\n+        next.href = \"#\" + view + \"-\" + nextModified + \"-\" + nextFilename;\n+        next.innerHTML = \"next &gt;\";\n+        center.append(next);\n+    }\n+\n+    return center;\n+}\n+\n+function body() {\n+    return document.getElementsByTagName(\"body\")[0];\n+}\n+\n+function create(name) {\n+    return document.createElement(name);\n+}\n+\n+function log(s) {\n+    console.log(s);\n+}\n+\n+function get(id) {\n+    return document.getElementById(id);\n+}\n+\n+function framesScrollToPrevHunk() {\n+    state.hunk = state.hunk - 1;\n+    if (state.hunk < 0) {\n+        state.hunk = 0;\n+    }\n+    const display = state.hunk === 0 ? \"BOF\" : String(state.hunk);\n+    get(\"display\").value = display;\n+\n+    const lhs = get(\"lhs\");\n+    const lhsHunkSpan = get(\"lhs-hunk-\" + state.hunk);\n+    lhs.scrollTop = lhsHunkSpan.offsetTop - 30;\n+\n+    const rhsHunkSpan = get(\"rhs-hunk-\" + state.hunk);\n+    const rhs = get(\"rhs\");\n+    rhs.scrollTop = rhsHunkSpan.offsetTop - 30;\n+}\n+\n+function framesScrollToNextHunk() {\n+    state.hunk = state.hunk + 1;\n+    const eof = hunks(state).length + 1;\n+    if (state.hunk > eof) {\n+        state.hunk = eof;\n+    }\n+\n+    const display = state.hunk === eof ? \"EOF\" : String(state.hunk);\n+    get(\"display\").value = display;\n+\n+    const lhs = get(\"lhs\");\n+    const lhsHunkSpan = get(\"lhs-hunk-\" + state.hunk);\n+    lhs.scrollTop = lhsHunkSpan.offsetTop - 30;\n+\n+    const rhsHunkSpan = get(\"rhs-hunk-\" + state.hunk);\n+    const rhs = get(\"rhs\");\n+    rhs.scrollTop = rhsHunkSpan.offsetTop - 30;\n+}\n+\n+function framesOnKeyDown(e) {\n+    if (e.key === 'j') {\n+        framesScrollToNextHunk();\n+    } else if (e.key === 'k') {\n+        framesScrollToPrevHunk();\n+    }\n+}\n+\n+function hunks(state) {\n+    const files = state.comparison.files;\n+    if (state.hunks === null) {\n+        state.hunks = new Array(files.length);\n+        state.hunks.fill(null);\n+    }\n+    if (state.hunks[state.index] === null) {\n+        state.hunks[state.index] = removeContext(files[state.index].patch);\n+    }\n+    return state.hunks[state.index];\n+}\n+\n+function filename(state) {\n+    const files = state.comparison.files;\n+    return files[state.index].filename;\n+}\n+\n+async function renderPatch(state) {\n+    body().style.margin = \"8px\";\n+    const index = state.index;\n+\n+    if (state.cache.patch[index] !== null) {\n+        body().append(state.cache.patch[index]);\n+        return;\n+    }\n+\n+    const main = create(\"div\");\n+    let _hunks = null;\n+    let context = 0;\n+    if (state.comparison.files[index].status === \"modified\") {\n+        const baseContent = await state.base.content[index];\n+        const headContent = await state.head.content[index];\n+        context = 3;\n+        _hunks = addContext(hunks(state), context, baseContent, headContent);\n+    } else {\n+        _hunks = hunks(state);\n+    }\n+\n+    const pre = create(\"pre\");\n+    pre.append(\"--- \", \"a\/\", filename(state), \"\\n\");\n+    pre.append(\"+++ \", \"b\/\", filename(state), \"\\n\");\n+    for (let hunk of _hunks) {\n+        pre.append(\"@@ -\", String(hunk.src.start), \",\", String(hunk.src.lines.length),\n+                     \" +\", String(hunk.dst.start), \",\", String(hunk.dst.lines.length), \" @@\\n\");\n+        let srcIndex = 0;\n+        let dstIndex = 0;\n+\n+        \/\/ Context before\n+        while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n+               (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n+            pre.append(hunk.src.lines[srcIndex], \"\\n\");\n+            srcIndex++;\n+            dstIndex++;\n+        }\n+        while (srcIndex < hunk.src.lines.length || dstIndex < hunk.dst.lines.length) {\n+            while (srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\"-\")) {\n+                pre.append(hunk.src.lines[srcIndex], \"\\n\");\n+                srcIndex++;\n+            }\n+            while (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\"+\")) {\n+                pre.append(hunk.dst.lines[dstIndex], \"\\n\");\n+                dstIndex++;\n+            }\n+            while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n+                   (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n+                pre.append(hunk.src.lines[srcIndex], \"\\n\");\n+                srcIndex++;\n+                dstIndex++;\n+            }\n+        }\n+    }\n+    main.append(pre);\n+    state.cache.patch[index] = main;\n+    body().append(main);\n+}\n+\n+async function renderFrames(state) {\n+    \/\/ reset state\n+    state.hunk = 0;\n+    state.intervalId = -1;\n+\n+    const index = state.index;\n+    if (state.cache.frames[index] !== null) {\n+        body().append(state.cache.frames[index]);\n+        return;\n+    }\n+\n+    const oldLines = await state.base.content[state.index];\n+    const newLines = await state.head.content[state.index];\n+    const _hunks = hunks(state);\n+\n+    const container = create(\"div\");\n+    container.className = \"frames-container\";\n+    body().addEventListener(\"keydown\", framesOnKeyDown);\n+\n+    const content = create(\"div\");\n+    content.className = \"frames-content\";\n+\n+    const left = create(\"div\");\n+    left.id = \"lhs\";\n+    left.className = \"frames-pane\";\n+    left.style.borderRight = \"5px ridge buttonface\";\n+    const leftContent = create(\"pre\");\n+\n+    const leftLineNumberColWidth = String(oldLines.length).length;\n+    let leftIndex = 0;\n+    for (let i = 0; i < _hunks.length; i++) {\n+        const hunk = _hunks[i];\n+        const onlyDeletions = hasOnlyDeletions(hunk, 0);\n+        const start = hunk.src.start - 1;\n+        for (let j = leftIndex; j < start; j++, leftIndex++) {\n+            const lineno = String(leftIndex + 1);\n+            const line = oldLines[leftIndex];\n+            const padding = leftLineNumberColWidth - lineno.length;\n+            leftContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n+        }\n+        for (let j = 0; j < hunk.src.lines.length; j++, leftIndex++) {\n+            const lineno = String(leftIndex + 1);\n+            const line = oldLines[leftIndex];\n+            const padding = leftLineNumberColWidth - lineno.length;\n+            const span = create(\"span\");\n+            span.className = onlyDeletions ? \"line-removed\" : \"line-modified\";\n+            if (j == 0) {\n+                span.id = \"lhs-hunk-\" + String(i + 1);\n+            }\n+            span.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n+            leftContent.append(span);\n+        }\n+        const diffInLines = hunk.dst.lines.length - hunk.src.lines.length;\n+        for (let j = 0; j < diffInLines; j++) {\n+            if (hunk.src.lines.length === 0 && j === 0) {\n+                const span = create(\"span\");\n+                if (j == 0) {\n+                    span.id = \"lhs-hunk-\" + String(i + 1);\n+                }\n+                leftContent.append(span);\n+            }\n+            leftContent.append(\"\\n\");\n+        }\n+    }\n+    const lastHunk = _hunks[_hunks.length - 1];\n+    for (let i = lastHunk.src.start + lastHunk.src.lines.length - 1; i < oldLines.length; i++) {\n+        const line = oldLines[i];\n+        const lineno = String(i + 1);\n+        const padding = leftLineNumberColWidth - lineno.length;\n+        leftContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n+    }\n+    const lhsEOF = create(\"span\");\n+    lhsEOF.id = \"lhs-hunk-\" + String(_hunks.length + 1);\n+    const lhsEOFText = create(\"b\");\n+    lhsEOFText.style.fontSize = \"large\";\n+    lhsEOFText.style.color = \"red\";\n+    lhsEOFText.innerHTML = \"--- EOF ---\"\n+    lhsEOF.append(lhsEOFText);\n+    leftContent.append(lhsEOF);\n+    for (let i = 0; i < 80; i++) {\n+        leftContent.append(\"\\n\");\n+    }\n+\n+    const lhsBOF = create(\"span\");\n+    lhsBOF.id = \"lhs-hunk-0\";\n+\n+    left.append(create(\"hr\"), lhsBOF, leftContent);\n+\n+    const right = create(\"div\");\n+    right.id = \"rhs\";\n+    right.className = \"frames-pane\";\n+    right.style.flexGrow = 1;\n+    const rightContent = create(\"pre\");\n+\n+    const rightLineNumberColWidth = String(newLines.length).length;\n+    let rightIndex = 0;\n+    for (let i = 0; i < _hunks.length; i++) {\n+        const hunk = _hunks[i];\n+        const onlyAdditions = hasOnlyAdditions(hunk, 0);\n+        const start = hunk.dst.start - 1;\n+        for (let j = rightIndex; j < start; j++, rightIndex++) {\n+            const lineno = String(rightIndex + 1);\n+            const line = newLines[rightIndex];\n+            const padding = rightLineNumberColWidth - lineno.length;\n+            rightContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n+        }\n+        for (let j = 0; j < hunk.dst.lines.length; j++, rightIndex++) {\n+            const lineno = String(rightIndex + 1);\n+            const line = newLines[rightIndex];\n+            const padding = rightLineNumberColWidth - lineno.length;\n+            const span = create(\"span\");\n+            if (j == 0) {\n+                span.id = \"rhs-hunk-\" + String(i + 1);\n+            }\n+            span.className = onlyAdditions ? \"line-added\" : \"line-modified\";\n+            span.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n+            rightContent.append(span);\n+        }\n+        const diffInLines = hunk.src.lines.length - hunk.dst.lines.length;\n+        for (let j = 0; j < diffInLines; j++) {\n+            if (hunk.dst.lines.length === 0 && j === 0) {\n+                const span = create(\"span\");\n+                if (j == 0) {\n+                    span.id = \"rhs-hunk-\" + String(i + 1);\n+                }\n+                rightContent.append(span);\n+            }\n+            rightContent.append(\"\\n\");\n+        }\n+    }\n+    for (let i = lastHunk.dst.start + lastHunk.dst.lines.length - 1; i < newLines.length; i++) {\n+        const line = newLines[i];\n+        const lineno = String(i + 1);\n+        const padding = rightLineNumberColWidth - lineno.length;\n+        rightContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n+    }\n+    const rhsEOF = create(\"span\");\n+    rhsEOF.id = \"rhs-hunk-\" + String(_hunks.length + 1);\n+    const rhsEOFText = create(\"b\");\n+    rhsEOFText.style.fontSize = \"large\";\n+    rhsEOFText.style.color = \"red\";\n+    rhsEOFText.innerHTML = \"--- EOF ---\"\n+    rhsEOF.append(rhsEOFText);\n+    rightContent.append(rhsEOF);\n+    for (let i = 0; i < 80; i++) {\n+        rightContent.append(\"\\n\");\n+    }\n+    const rhsBOF = create(\"span\");\n+    rhsBOF.id = \"rhs-hunk-0\";\n+    right.append(create(\"hr\"), rhsBOF, rightContent);\n+\n+    const controls = create(\"div\");\n+    controls.className = \"frames-controls\";\n+    const table = create(\"table\");\n+    table.className = \"navigation\";\n+    const row = create(\"tr\");\n+    const c1 = create(\"td\");\n+    c1.valign = \"middle\";\n+    c1.width = \"25%\";\n+    c1.innerHTML = \"Diff navigation:\\nUse 'j' and 'k' for next and previous diffs; or use buttons at right\";\n+\n+    const c2 = create(\"td\");\n+    c2.align = \"center\";\n+    c2.valign = \"top\";\n+    c2.width = \"50%\";\n+    const center = create(\"div\");\n+    const buttons = create(\"table\");\n+    buttons.border = 0;\n+    buttons.align = \"center\";\n+    const buttonsRow1 = create(\"tr\");\n+\n+    const startButton = create(\"td\");\n+    startButton.className = \"button\";\n+    const startButtonLink = create(\"a\");\n+    startButtonLink.title = \"Go to Beginning of File\";\n+    startButtonLink.innerHTML = \"BOF\";\n+    startButtonLink.style.textDecoration = \"none\";\n+    startButtonLink.addEventListener(\"click\", function () {\n+        const lhsBOFSpan = get(\"lhs-hunk-0\");\n+        const lhs = get(\"lhs\");\n+        lhs.scrollTop = lhsBOFSpan.offsetTop;\n+\n+        const rhsBOFSpan = get(\"rhs-hunk-0\");\n+        const rhs = get(\"rhs\");\n+        rhs.scrollTop = rhsBOFSpan.offsetTop;\n+\n+        state.hunk = 0;\n+        get(\"display\").value = \"BOF\";\n+    });\n+    startButton.append(startButtonLink);\n+\n+    const scrollUpButton = create(\"td\");\n+    scrollUpButton.className = \"button\";\n+    const scrollUpLink = create(\"a\");\n+    scrollUpLink.title = \"Scroll up; Press and Hold to accelerate\";\n+    scrollUpLink.href = \"#index\";\n+    scrollUpLink.innerHTML = \"Scroll Up\";\n+    scrollUpLink.style.textDecoration = \"none\";\n+    scrollUpLink.addEventListener(\"mousedown\", function() {\n+        let acceleration = 3.0;\n+        let n = 0;\n+        state.intervalId = window.setInterval(function() {\n+            if ((n % 10) === 0) {\n+                acceleration *= 1.2;\n+            }\n+            get(\"lhs\").scrollTop -= acceleration;\n+            get(\"rhs\").scrollTop -= acceleration;\n+            n++;\n+        }, 10);\n+    });\n+    scrollUpLink.addEventListener(\"mouseup\", function() {\n+        window.clearInterval(state.intervalId);\n+    });\n+    scrollUpLink.addEventListener(\"click\", function(e) {\n+        e.preventDefault();\n+    });\n+    scrollUpButton.append(scrollUpLink);\n+\n+    const prevHunkButton = create(\"td\");\n+    prevHunkButton.className = \"button\";\n+    const prevHunkLink = create(\"a\");\n+    prevHunkLink.title = \"Go to previous Diff\";\n+    prevHunkLink.innerHTML = \"Prev Diff\";\n+    prevHunkLink.style.textDecoration = \"none\";\n+    prevHunkLink.addEventListener(\"click\", framesScrollToPrevHunk);\n+    prevHunkButton.append(prevHunkLink);\n+\n+    buttonsRow1.append(startButton, scrollUpButton, prevHunkButton);\n+\n+    const buttonsRow2 = create(\"tr\");\n+\n+    const endButton = create(\"td\");\n+    endButton.className = \"button\";\n+    const endButtonLink = create(\"a\");\n+    endButtonLink.title = \"Go to End of File\";\n+    endButtonLink.innerHTML = \"EOF\";\n+    endButtonLink.style.textDecoration = \"none\";\n+    endButtonLink.addEventListener(\"click\", function () {\n+        const lhsEOFSpan = get(\"lhs-hunk-\" + String(_hunks.length + 1));\n+        const lhs = get(\"lhs\");\n+        lhs.scrollTop = lhsEOFSpan.offsetTop - 30;\n+\n+        const rhsEOFSpan = get(\"rhs-hunk-\" + String(_hunks.length + 1));\n+        const rhs = get(\"rhs\");\n+        rhs.scrollTop = rhsEOFSpan.offsetTop - 30;\n+\n+        state.hunk = _hunks.length + 1;\n+\n+        get(\"display\").value = \"EOF\";\n+    });\n+    endButton.append(endButtonLink);\n+\n+    const scrollDownButton = create(\"td\");\n+    scrollDownButton.className = \"button\";\n+    const scrollDownLink = create(\"a\");\n+    scrollDownLink.title = \"Scroll down; Press and Hold to accelerate\";\n+    scrollDownLink.innerHTML = \"Scroll Down\";\n+    scrollDownLink.style.textDecoration = \"none\";\n+    scrollDownLink.addEventListener(\"mousedown\", function() {\n+        let acceleration = 3.0;\n+        let n = 0;\n+        state.intervalId = window.setInterval(function() {\n+            if ((n % 10) === 0) {\n+                acceleration *= 1.2;\n+            }\n+            get(\"lhs\").scrollTop += acceleration;\n+            get(\"rhs\").scrollTop += acceleration;\n+            n++;\n+        }, 10);\n+    });\n+    scrollDownLink.addEventListener(\"mouseup\", function() {\n+        window.clearInterval(state.intervalId);\n+    });\n+    scrollDownLink.addEventListener(\"click\", function(e) {\n+        e.preventDefault();\n+    });\n+    scrollDownButton.append(scrollDownLink);\n+\n+    const nextHunkButton = create(\"td\");\n+    nextHunkButton.className = \"button\";\n+    const nextHunkLink = create(\"a\");\n+    nextHunkLink.title = \"Go to next Diff\";\n+    nextHunkLink.innerHTML = \"Next Diff\";\n+    nextHunkLink.style.textDecoration = \"none\";\n+    nextHunkLink.addEventListener(\"click\", framesScrollToNextHunk);\n+    nextHunkButton.append(nextHunkLink);\n+\n+    buttonsRow2.append(endButton, scrollDownButton, nextHunkButton);\n+\n+    buttons.append(buttonsRow1);\n+    buttons.append(buttonsRow2);\n+    center.append(buttons);\n+    c2.append(center);\n+\n+    const c3 = create(\"td\");\n+    c3.width = \"25%\";\n+    c3.valign = \"middle\";\n+    c3.style.paddingLeft = \"185px\";\n+    const form = create(\"form\");\n+    const input = create(\"input\");\n+    input.id = \"display\";\n+    input.value = \"BOF\";\n+    input.size = 8;\n+    input.type = \"text\";\n+    form.append(input);\n+    c3.append(form);\n+\n+    row.append(c1, c2, c3);\n+    table.append(row);\n+    controls.append(table);\n+\n+    const navigation = create(\"div\");\n+    navigation.className = \"frames-navigation\";\n+    navigation.append(createNavigation(\"frames\", index));\n+\n+    content.append(left, right);\n+    container.append(content, controls, navigation);\n+\n+    state.cache.frames[index] = container;\n+    body().append(container);\n+}\n+\n+function addLineNumbers(lines) {\n+    const digits = String(lines.length).length;\n+    const res = new Array(lines.length);\n+    for (let i = 0; i < lines.length; i++) {\n+        const lineno = String(i + 1);\n+        const padding = digits - lineno.length;\n+        res[i] = \" \".repeat(padding) + lineno + \" \" + lines[i];\n+    }\n+    return res;\n+}\n+\n+async function renderNew(state) {\n+    body().style.margin = \"8px\";\n+    const index = state.index;\n+    if (state.cache[\"new\"][index] !== null) {\n+        body().append(state.cache[\"new\"][index]);\n+        return;\n+    }\n+    const lines = await state.head.content[index];\n+    const pre = create(\"pre\");\n+    pre.append(addLineNumbers(lines).join('\\n'));\n+    state.cache[\"new\"][index] = pre;\n+    body().append(pre);\n+}\n+\n+async function renderOld(state) {\n+    body().style.margin = \"8px\";\n+    const index = state.index;\n+    if (state.cache.old[index] !== null) {\n+        body().append(state.cache.old[index]);\n+        return;\n+    }\n+    const lines = await state.base.content[index];\n+    const pre = create(\"pre\");\n+    pre.append(addLineNumbers(lines).join('\\n'));\n+    state.cache.old[index] = pre;\n+    body().append(pre);\n+}\n+\n+function createPrintThisPage() {\n+    const link = create(\"a\");\n+    link.href = \"javascript:print()\";\n+    link.className = \"print\";\n+    link.innerHTML = \"Print this page\";\n+    return link;\n+}\n+\n+async function renderUdiff(state) {\n+    body().style.margin = \"8px\";\n+    const index = state.index;\n+    if (state.cache.udiffs[index] !== null) {\n+        body().append(state.cache.udiffs[index]);\n+        return;\n+    }\n+\n+    const main = create(\"div\");\n+    main.append(createNavigation(\"udiff\", index));\n+    main.append(createFilenameHeader(state));\n+    main.append(createPrintThisPage());\n+    main.append(create(\"hr\"));\n+\n+    const baseContent = await state.base.content[index];\n+    const headContent = await state.head.content[index];\n+    const context = 5;\n+    const hunksWithContext = addContext(hunks(state), context, baseContent, headContent);\n+    const udiff = create(\"pre\");\n+    for (let hunk of hunksWithContext) {\n+        const span = create(\"span\");\n+        const header = \"@@ -\" + hunk.src.start + \",\" + hunk.src.lines.length +\n+                 \" +\" + hunk.dst.start + \",\" + hunk.dst.lines.length +\n+                 \" @@\";\n+        span.append(header, \"\\n\");\n+        span.className = \"line-new-header\";\n+        udiff.append(span);\n+\n+        const onlyDeletions = hasOnlyDeletions(hunk, context);\n+        const onlyAdditions = hasOnlyAdditions(hunk, context);\n+\n+        let srcIndex = 0;\n+        let dstIndex = 0;\n+\n+        \/\/ Context before\n+        while (hunk.src.lines[srcIndex].startsWith(\" \") && hunk.dst.lines[dstIndex].startsWith(\" \")) {\n+            const span = create(\"span\");\n+            span.append(hunk.src.lines[srcIndex], \"\\n\");\n+            udiff.append(span);\n+            srcIndex++;\n+            dstIndex++;\n+        }\n+\n+        while (srcIndex < hunk.src.lines.length && dstIndex < hunk.dst.lines.length) {\n+            while (srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\"-\")) {\n+                const span = create(\"span\");\n+                span.append(hunk.src.lines[srcIndex], \"\\n\");\n+                span.className = onlyDeletions ? \"udiff-line-removed\" : \"udiff-line-modified-removed\";\n+                udiff.append(span);\n+                srcIndex++;\n+            }\n+            while (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\"+\")) {\n+                const span = create(\"span\");\n+                span.append(hunk.dst.lines[dstIndex], \"\\n\");\n+                span.className = onlyAdditions ? \"udiff-line-added\" : \"udiff-line-modified-added\";\n+                udiff.append(span);\n+                dstIndex++;\n+            }\n+            while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n+                   (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n+                const span = create(\"span\");\n+                span.append(hunk.src.lines[srcIndex], \"\\n\");\n+                udiff.append(span);\n+                srcIndex++;\n+                dstIndex++;\n+            }\n+        }\n+    }\n+    main.append(udiff);\n+    main.append(createNavigation(\"udiff\", index));\n+    state.cache.udiffs[index] = main;\n+    body().append(main);\n+}\n+\n+function createFilenameHeader(state) {\n+    const h2 = create(\"h2\");\n+    h2.innerHTML = filename(state);\n+    return h2;\n+}\n+\n+async function renderCdiff(state) {\n+    body().style.margin = \"8px\";\n+    const index = state.index;\n+    if (state.cache.cdiffs[index] !== null) {\n+        body().append(state.cache.cdiffs[index]);\n+        return;\n+    }\n+\n+    const main = create(\"div\");\n+    main.append(createNavigation(\"cdiff\", index));\n+    main.append(createFilenameHeader(state));\n+    main.append(createPrintThisPage());\n+    main.append(create(\"hr\"));\n+\n+    const baseContent = await state.base.content[state.index];\n+    const headContent = await state.head.content[state.index];\n+    const context = 5;\n+    const hunksWithContext = addContext(hunks(state), context, baseContent, headContent);\n+\n+    const cdiff = create(\"pre\");\n+    for (let hunk of hunksWithContext) {\n+        const srcHeaderSpan = create(\"span\");\n+        const srcHeader = \"*** \" + hunk.src.start + \",\" + hunk.src.lines.length + \" ***\";\n+        srcHeaderSpan.append(srcHeader, \"\\n\");\n+        srcHeaderSpan.className = \"line-old-header\";\n+        cdiff.append(srcHeaderSpan);\n+\n+        const onlyDeletions = hasOnlyDeletions(hunk, context);\n+        const onlyAdditions = hasOnlyAdditions(hunk, context);\n+\n+        for (var line of hunk.src.lines) {\n+            const span = create(\"span\");\n+            if (line.startsWith(\"-\")) {\n+                span.className = onlyDeletions ? \"line-removed\" : \"line-modified\";\n+                line = \"!\" + line.substring(1);\n+            }\n+            span.append(line, \"\\n\");\n+            cdiff.append(span);\n+        }\n+\n+        const dstHeaderSpan = create(\"span\");\n+        const dstHeader = \"*** \" + hunk.dst.start + \",\" + hunk.dst.lines.length + \" ***\";\n+        dstHeaderSpan.append(srcHeader, \"\\n\");\n+        dstHeaderSpan.className = \"line-new-header\";\n+        cdiff.append(dstHeaderSpan);\n+\n+        for (var line of hunk.dst.lines) {\n+            const span = create(\"span\");\n+            if (line.startsWith(\"+\")) {\n+                span.className = onlyAdditions ? \"line-added\" : \"line-modified\";\n+                line = \"!\" + line.substring(1);\n+            }\n+            span.append(line, \"\\n\");\n+            cdiff.append(span);\n+        }\n+\n+    }\n+    main.append(cdiff);\n+    main.append(createNavigation(\"cdiff\", index));\n+    state.cache.cdiffs[index] = main;\n+    body().append(main);\n+}\n+\n+async function renderSdiff(state) {\n+    body().style.margin = \"8px\";\n+    const index = state.index;\n+    if (state.cache.sdiffs[index] !== null) {\n+        body().append(state.cache.sdiffs[index]);\n+        return;\n+    }\n+\n+    const main = create(\"div\");\n+    main.append(createNavigation(\"sdiff\", index));\n+    main.append(createFilenameHeader(state));\n+    main.append(createPrintThisPage());\n+\n+    const baseContent = await state.base.content[index];\n+    const headContent = await state.head.content[index];\n+    const context = 20;\n+    const hunksWithContext = addContext(hunks(state), context, baseContent, headContent);\n+\n+    const tbody = create(\"tbody\");\n+    for (let hunk of hunksWithContext) {\n+        const row = create(\"tr\");\n+        row.valign = \"top\";\n+\n+        const lhs = create(\"td\");\n+        lhs.style.verticalAlign = \"top\";\n+        lhs.append(create(\"hr\"));\n+        const lhsContent = create(\"pre\");\n+\n+        const rhs = create(\"td\");\n+        rhs.style.verticalAlign = \"top\";\n+        rhs.append(create(\"hr\"));\n+        const rhsContent = create(\"pre\");\n+\n+        const onlyDeletions = hasOnlyDeletions(hunk, context);\n+        const onlyAdditions = hasOnlyAdditions(hunk, context);\n+        let srcIndex = 0;\n+        let dstIndex = 0;\n+        const maxSrcLinenoWidth = String(hunk.src.start + hunk.src.lines.length).length;\n+        const maxDstLinenoWidth = String(hunk.dst.start + hunk.dst.lines.length).length;\n+\n+        while (hunk.src.lines[srcIndex].startsWith(\" \") && hunk.dst.lines[dstIndex].startsWith(\" \")) {\n+            const line = hunk.src.lines[srcIndex];\n+            const lhsLineno = String(hunk.src.start + srcIndex);\n+            const lhsPadding = maxSrcLinenoWidth - lhsLineno.length;\n+            const rhsLineno = String(hunk.dst.start + dstIndex);\n+            const rhsPadding = maxDstLinenoWidth - rhsLineno.length;\n+            lhsContent.append(\" \".repeat(lhsPadding), lhsLineno, \" \", line.substring(1), \"\\n\");\n+            rhsContent.append(\" \".repeat(rhsPadding), rhsLineno, \" \", line.substring(1), \"\\n\");\n+            srcIndex++;\n+            dstIndex++;\n+        }\n+        while (srcIndex < hunk.src.lines.length && dstIndex < hunk.dst.lines.length) {\n+            let addedSrcLines = 0;\n+            while (srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\"-\")) {\n+                const line = hunk.src.lines[srcIndex];\n+                const span = create(\"span\");\n+                span.className = onlyDeletions ? \"line-removed\" : \"line-modified\";\n+                const lineno = String(hunk.src.start + srcIndex);\n+                const padding = maxSrcLinenoWidth - lineno.length;\n+                span.append(\" \".repeat(padding), lineno, \" \", line.substring(1), \"\\n\");\n+                lhsContent.append(span);\n+                srcIndex++;\n+                addedSrcLines++;\n+            }\n+            let addedDstLines = 0;\n+            while (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\"+\")) {\n+                const line = hunk.dst.lines[dstIndex];\n+                const span = create(\"span\");\n+                span.className = onlyAdditions ? \"line-added\" : \"line-modified\";\n+                const lineno = String(hunk.dst.start + dstIndex);\n+                const padding = maxDstLinenoWidth - lineno.length;\n+                span.append(\" \".repeat(padding), lineno, \" \", line.substring(1), \"\\n\");\n+                rhsContent.append(span);\n+                dstIndex++;\n+                addedDstLines++;\n+            }\n+\n+            for (let j = 0; j < (addedDstLines - addedSrcLines); j++) {\n+                lhsContent.append(\"\\n\");\n+            }\n+            for (let j = 0; j < (addedSrcLines - addedDstLines); j++) {\n+                rhsContent.append(\"\\n\");\n+            }\n+\n+            while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n+                   (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n+                const line = hunk.src.lines[srcIndex];\n+                const span = create(\"span\");\n+                const lhsLineno = String(hunk.src.start + srcIndex);\n+                const lhsPadding = maxSrcLinenoWidth - lhsLineno.length;\n+                const rhsLineno = String(hunk.dst.start + dstIndex);\n+                const rhsPadding = maxDstLinenoWidth - rhsLineno.length;\n+                lhsContent.append(\" \".repeat(lhsPadding), lhsLineno, \" \", line.substring(1), \"\\n\");\n+                rhsContent.append(\" \".repeat(rhsPadding), rhsLineno, \" \", line.substring(1), \"\\n\");\n+                srcIndex++;\n+                dstIndex++;\n+            }\n+        }\n+\n+        lhs.append(lhsContent);\n+        rhs.append(rhsContent);\n+        row.append(lhs, rhs);\n+        tbody.append(row);\n+\n+    }\n+    const sdiff = create(\"table\");\n+    sdiff.append(tbody);\n+    main.append(sdiff);\n+    main.append(createNavigation(\"sdiff\", index));\n+    state.cache.sdiffs[index] = main;\n+    body().append(main);\n+}\n+\n+function parseRange(s) {\n+    const parts = s.split(',');\n+    const start = parts[0].substring(1); \/\/ skip leading '-' or '+'\n+    const n = parts[1];\n+    return {\n+        start: start,\n+        n: n\n+    };\n+}\n+\n+class Hunk {\n+    constructor(srcStart, srcLines, dstStart, dstLines) {\n+        this.source = {\n+            start: srcStart,\n+            lines: srcLines\n+        };\n+        this.destination = {\n+            start: dstStart,\n+            lines: dstLines\n+        };\n+    }\n+\n+    get src() {\n+        return this.source;\n+    }\n+\n+    get dst() {\n+        return this.destination;\n+    }\n+}\n+\n+function addContext(hunks, n, baseContent, headContent) {\n+    const res = new Array();\n+\n+    for (let i = 0; i < hunks.length; i++) {\n+        const hunk = hunks[i];\n+        let srcStart = hunk.src.start - n;\n+        if (srcStart < 1) {\n+            srcStart = 1;\n+        }\n+        const srcLines = new Array();\n+        let dstStart = hunk.dst.start - n;\n+        if (dstStart < 1) {\n+            dstStart = 1;\n+        }\n+        const dstLines = new Array();\n+\n+        const contextEnd = Math.min(n, hunk.src.start - 1);\n+\n+        \/\/ Context before\n+        for (let j = 0; j < contextEnd; j++) {\n+            srcLines.push(\" \" + baseContent[srcStart + j - 1]);\n+            dstLines.push(\" \" + headContent[dstStart + j - 1]);\n+        }\n+\n+        \/\/ Changes\n+        for (let line of hunk.src.lines) {\n+            srcLines.push(line);\n+        }\n+        for (let line of hunk.dst.lines) {\n+            dstLines.push(line);\n+        }\n+\n+        let srcEnd = hunk.src.start + hunk.src.lines.length;\n+        let dstEnd = hunk.dst.start + hunk.dst.lines.length;\n+        for (let j = i + 1; j < hunks.length && ((hunks[j].src.start <= srcEnd + n) || (hunks[j].dst.start <= dstEnd + n)); j++, i++) {\n+            const next = hunks[j];\n+            const numSrcContext = next.src.start - srcEnd;\n+            for (let k = 0; k < numSrcContext; k++) {\n+                srcLines.push(\" \" + baseContent[srcEnd + k - 1]);\n+            }\n+            const numDstContext = next.dst.start - dstEnd;\n+            for (let k = 0; k < numDstContext; k++) {\n+                dstLines.push(\" \" + headContent[dstEnd + k - 1]);\n+            }\n+\n+            for (let line of next.src.lines) {\n+                srcLines.push(line);\n+            }\n+            for (let line of next.dst.lines) {\n+                dstLines.push(line);\n+            }\n+            srcEnd = next.src.start + next.src.lines.length;\n+            dstEnd = next.dst.start + next.dst.lines.length;\n+        }\n+\n+        for (let j = 0; j < n && (srcEnd + j) <= baseContent.length; j++) {\n+            srcLines.push(\" \" + baseContent[srcEnd + j - 1]);\n+            dstLines.push(\" \" + headContent[dstEnd + j - 1]);\n+        }\n+\n+        res.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n+    }\n+\n+    return res;\n+}\n+\n+function removeContext(patch) {\n+    const hunks = new Array();\n+    let srcStart = 0;\n+    let srcLines = new Array();\n+    let dstStart = 0;\n+    let dstLines = new Array();\n+    let isBefore = true;\n+\n+    const lines = patch.split('\\n');\n+    const end = patch.endsWith('\\n') ? lines.length - 1 : lines.length;\n+    for (let i = 0; i < end; i++) {\n+        const line = lines[i];\n+        if (line.startsWith(\"@@\")) {\n+            if (srcLines.length > 0 || dstLines.length > 0) {\n+                hunks.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n+            }\n+\n+            const parts = line.split(' ');\n+            srcStart = Number(parseRange(parts[1]).start);\n+            dstStart = Number(parseRange(parts[2]).start);\n+            srcLines = new Array();\n+            dstLines = new Array();\n+        } else if (line.startsWith(' ') && !isBefore) {\n+            while (i < lines.length && lines[i].startsWith(' ')) {\n+                i++;\n+            }\n+            hunks.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n+            srcStart = srcStart + srcLines.length;\n+            srcLines = new Array();\n+            dstStart = dstStart + dstLines.length;\n+            dstLines = new Array();\n+        } else if (line.startsWith(' ') && isBefore) {\n+            srcStart++;\n+            dstStart++;\n+        } else if (line.startsWith('-')) {\n+            isBefore = false;\n+            srcLines.push(line);\n+\n+        } else if (line.startsWith('+')) {\n+            isBefore = false;\n+            dstLines.push(line);\n+        } else if (line.startsWith(\"\\\\ No newline at end of file\")) {\n+            continue;\n+            } else {\n+            throw \"Unexpected content on line \" + i + \": '\" + line + \"'\";\n+        }\n+    }\n+\n+    \/\/ The last hunk did not have context after\n+    if (srcLines.length > 0 || dstLines.length > 0) {\n+        hunks.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n+    }\n+\n+    return hunks;\n+}\n+\n+function reverse(hunks) {\n+    const reversed = new Array();\n+    for (let hunk of hunks) {\n+        var srcLines = hunk.dst.lines.map(l => '-' + l.substring(1));\n+        var dstLines = hunk.src.lines.map(l => '+' + l.substring(1));\n+        reversed.push(new Hunk(hunk.dst.start, hunk.dst.lines, hunk.src.start, hunk.src.lines));\n+    }\n+    return reversed;\n+}\n+\n+function apply(hunks, lines) {\n+    const newLines = new Array();\n+\n+    let last = 1;\n+    for (let i = 0; i < hunks.length; i++) {\n+        const hunk = hunks[i];\n+        for (let j = last; j < hunk.src.start; j++) {\n+            newLines.push(lines[j - 1]);\n+        }\n+        for (let line of hunk.dst.lines) {\n+            newLines.push(line.substring(1));\n+        }\n+        last = hunk.src.start + hunk.src.lines.length;\n+    }\n+\n+    for (let i = last; i <= lines.length; i++) {\n+        newLines.push(lines[i - 1]);\n+    }\n+\n+    return newLines;\n+}\n+\n+function renderFromFragment(fragment) {\n+    if (fragment === \"\") {\n+        state.view = \"index\";\n+    } else {\n+        const fragmentParts = fragment.split(\"-\");\n+        state.view = fragmentParts[0].substring(1);\n+        state.index = Number(fragmentParts[1]);\n+    }\n+    render(state);\n+}\n+\n+async function fetchMetadata(repo, prId, range) {\n+    const raw = \"https:\/\/raw.githubusercontent.com\/openjdk\/webrevs\";\n+    const ref = \"master\";\n+    return fetch(raw + \"\/\" + ref + \"\/\" + repo + \"\/\" + prId + \"\/\" + range + \"\/metadata.json\")\n+            .then(r => r.json())\n+            .then(o => {\n+                o.number = prId;\n+                return o;\n+            });\n+}\n+\n+async function fetchComparison(repo, prId, range, metadataPromise) {\n+    const raw = \"https:\/\/raw.githubusercontent.com\/openjdk\/webrevs\";\n+    const ref = \"master\";\n+    return fetch(raw + \"\/\" + ref + \"\/\" + repo + \"\/\" + prId + \"\/\" + range + \"\/comparison.json\")\n+            .then(r => r.ok ?\n+                r :\n+                metadataPromise.then(m => fetch(\"https:\/\/api.github.com\/repos\/\" + m.base.repo.full_name + \"\/compare\/\" +\n+                                                m.base.sha + \"...\" + m.head.sha)))\n+\n+            .then(r => r.json());\n+}\n+\n+async function fetchCommits(repo, prId, range) {\n+    \/\/ TODO: implement API fallback\n+    const raw = \"https:\/\/raw.githubusercontent.com\/openjdk\/webrevs\";\n+    const ref = \"master\";\n+    return fetch(raw + \"\/\" + ref + \"\/\" + repo + \"\/\" + prId + \"\/\" + range + \"\/commits.json\").then(r => r.json());\n+}\n+\n+function fetchFileContent(state) {\n+    const reverseHunks = reverse(hunks(state));\n+    const headContent = fetchFileAtHead(state);\n+    const baseContent = headContent.then(lines => apply(reverseHunks, lines));\n+    return {\n+        \"base\": baseContent,\n+        \"head\": headContent\n+    };\n+}\n+\n+function fetchFileAtHead(state) {\n+    const index = state.index;\n+    const file = state.comparison.files[index];\n+    if (file.status === \"deleted\") {\n+        return;\n+    }\n+\n+    const raw_url = \"https:\/\/raw.githubusercontent.com\";\n+    const sha = state.metadata.head.sha;\n+    const full_name = state.metadata.head.repo.full_name;\n+    const url = raw_url + \"\/\" + full_name + \"\/\" + sha + \"\/\" + file.filename;\n+    return fetch(url).then(r => r.text()).then(text => text.split('\\n'));\n+}\n+\n+async function init() {\n+    const params = new URLSearchParams(window.location.search);\n+    const range = params.get(\"range\");\n+    const prId = params.get(\"pr\");\n+    const repo = params.get(\"repo\");\n+\n+    document.title = \"webrev - \" + repo + \"\/\" + prId + \"\/\" + range;\n+\n+    const metadata = fetchMetadata(repo, prId, range);\n+    const comparison = fetchComparison(repo, prId, range, metadata);\n+    const commits = fetchCommits(repo, prId, range);\n+\n+    state.metadata = await metadata;\n+    state.comparison = await comparison;\n+    state.commits = await commits;\n+\n+    const files = state.comparison.files;\n+    const raw_url = \"https:\/\/raw.githubusercontent.com\";\n+\n+    state.head.content = new Array(files.length);\n+    state.head.content.fill(null);\n+    state.base.content = new Array(files.length);\n+    state.base.content.fill(null);\n+\n+    state.cache.cdiffs = new Array(files.length);\n+    state.cache.cdiffs.fill(null);\n+\n+    state.cache.udiffs = new Array(files.length);\n+    state.cache.udiffs.fill(null);\n+\n+    state.cache.sdiffs = new Array(files.length);\n+    state.cache.sdiffs.fill(null);\n+\n+    state.cache.frames = new Array(files.length);\n+    state.cache.frames.fill(null);\n+\n+    state.cache.old = new Array(files.length);\n+    state.cache.old.fill(null);\n+\n+    state.cache[\"new\"] = new Array(files.length);\n+    state.cache[\"new\"].fill(null);\n+\n+    state.cache.patch = new Array(files.length);\n+    state.cache.patch.fill(null);\n+\n+    \/\/ Pre-fetch base and head content for up to 25 files\n+    for (let i = 0; i < Math.min(files.length, 25); i++) {\n+        state.index = i;\n+        const content = fetchFileContent(state);\n+        state.head.content[i] = content.head;\n+        state.base.content[i] = content.base;\n+    }\n+    state.index = -1;\n+}\n+\n+const setup = init();\n+window.onload = async function(e) {\n+    await setup;\n+    log(\"onload: fragment: \" + window.location.hash);\n+    renderFromFragment(window.location.hash);\n+}\n+window.onpopstate = async function (e) {\n+    await setup;\n+    log(\"onpopstate: fragment: \" + window.location.hash);\n+    renderFromFragment(window.location.hash);\n+}\n+<\/script>\n","filename":"index.html","additions":1506,"deletions":1,"binary":false,"changes":1507,"status":"modified"},{"patch":"@@ -1,1527 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\"use strict\";\n-\n-let state = {\n-    \"metadata\": null,\n-    \"comparison\": null,\n-    \"commits\": null,\n-    \"head\": {\n-        \"content\": null\n-    },\n-    \"base\": {\n-        \"content\": null\n-    },\n-    \"view\": null,\n-    \"index\": -1,\n-    \"hunk\": 0,\n-    \"intervalId\": -1,\n-    \"hunks\": null,\n-    \"cache\": {\n-        \"cdiffs\": null,\n-        \"udiffs\": null,\n-        \"sdiffs\": null,\n-        \"frames\": null,\n-        \"old\": null,\n-        \"new\": null,\n-        \"patch\": null\n-    }\n-};\n-\n-function render(state) {\n-    log(\"render: view: \" + state.view);\n-    body().innerHTML = \"\";\n-    body().removeEventListener(\"keydown\", framesOnKeyDown);\n-    body().style.margin = 0;\n-    if (state.view !== \"index\") {\n-        if (state.head.content[state.index] === null || state.base.content[state.index] === null) {\n-            const content = fetchFileContent(state);\n-            state.head.content[state.index] = content.head;\n-            state.base.content[state.index] = content.base;\n-        }\n-    }\n-    if (state.view === \"index\") {\n-        renderIndex(state);\n-    } else if (state.view === \"udiff\") {\n-        renderUdiff(state);\n-    } else if (state.view === \"new\") {\n-        renderNew(state);\n-    } else if (state.view === \"old\") {\n-        renderOld(state);\n-    } else if (state.view === \"frames\") {\n-        renderFrames(state);\n-    } else if (state.view === \"cdiff\") {\n-        renderCdiff(state);\n-    } else if (state.view === \"sdiff\") {\n-        renderSdiff(state);\n-    } else if (state.view === \"patch\") {\n-        renderPatch(state);\n-    } else {\n-        log(\"error: unexpected view: \" + state.view);\n-    }\n-}\n-\n-function summarize(files) {\n-    const res = {\n-        \"changes\": 0,\n-        \"additions\": 0,\n-        \"deletions\": 0\n-    }\n-    for (let file of files) {\n-        res.changes += file.changes;\n-        res.additions += file.additions;\n-        res.deletions += file.deletions;\n-    }\n-\n-    return res;\n-}\n-\n-function getCommitsPerFile(commits) {\n-    const res = {};\n-    for (let commit of commits) {\n-        for (let file of commit.files) {\n-            if (!(file.filename in res)) {\n-                res[file.filename] = new Array();\n-            }\n-            console.log(commit.sha);\n-            res[file.filename].unshift(commit);\n-        }\n-    }\n-    return res;\n-}\n-\n-async function renderIndex(state) {\n-    body().style.margin = \"8px\";\n-\n-    const metadata = state.metadata;\n-\n-    const summary = create(\"div\");\n-    summary.className = \"summary\";\n-\n-    const header = create(\"h2\");\n-    header.className = \"summary\";\n-    header.innerHTML = \"Code Review for \" + metadata.base.repo.full_name;\n-\n-    const table = create(\"table\");\n-    table.className = \"summary\";\n-\n-    const generatedOnRow = create(\"tr\");\n-    const generatedOnHeader = create(\"th\");\n-    generatedOnHeader.innerHTML = \"Generated on:\";\n-    const generatedOnData = create(\"td\");\n-    const date = new Date(metadata.created_at);\n-    generatedOnData.append(date.toUTCString());\n-    generatedOnRow.append(generatedOnHeader);\n-    generatedOnRow.append(generatedOnData);\n-\n-    const compareAgainstRepoRow = create(\"tr\");\n-    const compareAgainstRepoHeader = create(\"th\");\n-    compareAgainstRepoHeader.innerHTML = \"Compare against:\";\n-    const compareAgainstRepoLink = create(\"a\");\n-    compareAgainstRepoLink.href = metadata.base.repo.html_url;\n-    compareAgainstRepoLink.innerHTML = metadata.base.repo.html_url;\n-    const compareAgainstRepoData = create(\"td\");\n-    compareAgainstRepoData.append(compareAgainstRepoLink);\n-    compareAgainstRepoRow.append(compareAgainstRepoHeader);\n-    compareAgainstRepoRow.append(compareAgainstRepoData);\n-\n-    const compareAgainstRevRow = create(\"tr\");\n-    const compareAgainstRevHeader = create(\"th\");\n-    compareAgainstRevHeader.innerHTML = \"Compare against version:\";\n-    const compareAgainstRevData = create(\"td\");\n-    const compareAgainstRevLink = create(\"a\");\n-    compareAgainstRevLink.href = metadata.base.repo.html_url + \"\/commit\/\" + metadata.base.sha;\n-    compareAgainstRevLink.innerHTML = metadata.base.sha.substring(0, 8);\n-    compareAgainstRevData.append(compareAgainstRevLink);\n-    compareAgainstRevRow.append(compareAgainstRevHeader);\n-    compareAgainstRevRow.append(compareAgainstRevData);\n-\n-    const summaryOfChangesRow = create(\"tr\");\n-    const summaryOfChangesHeader = create(\"th\");\n-    summaryOfChangesHeader.innerHTML = \"Summary of changes:\";\n-    const summaryOfChangesData = create(\"td\");\n-    const { changes, additions, deletions } = summarize(state.comparison.files);\n-    summaryOfChangesData.innerHTML = changes + \" lines changed; \" + additions + \" ins; \" + deletions + \" del\";\n-    summaryOfChangesRow.append(summaryOfChangesHeader);\n-    summaryOfChangesRow.append(summaryOfChangesData);\n-\n-    const patchOfChangesRow = create(\"tr\");\n-    const patchOfChangesHeader = create(\"th\");\n-    patchOfChangesHeader.innerHTML = \"Diff of changes:\";\n-    const patchOfChangesData = create(\"td\");\n-    const patchOfChangesLink = create(\"a\");\n-    patchOfChangesLink.href = \"https:\/\/github.com\/\" + metadata.base.repo.full_name + \"\/compare\/\" + metadata.base.sha + \"...\" + metadata.head.sha + \".diff\";\n-    patchOfChangesLink.innerHTML = metadata.base.sha.substring(0, 8) + \"...\" + metadata.head.sha.substring(0, 8) + \".diff\";\n-    patchOfChangesData.append(patchOfChangesLink);\n-    patchOfChangesRow.append(patchOfChangesHeader);\n-    patchOfChangesRow.append(patchOfChangesData);\n-\n-    const pullRequestRow = create(\"tr\");\n-    const pullRequestHeader = create(\"th\");\n-    pullRequestHeader.innerHTML = \"Pull request:\";\n-    const pullRequestData = create(\"td\");\n-    const pullRequestLink = create(\"a\");\n-    pullRequestLink.href = \"https:\/\/github.com\/\" + metadata.base.repo.full_name + \"\/pull\/\" + metadata.number;\n-    pullRequestLink.innerHTML = metadata.number;\n-    pullRequestData.append(pullRequestLink);\n-    pullRequestRow.append(pullRequestHeader);\n-    pullRequestRow.append(pullRequestData);\n-\n-    const legendRow = create(\"tr\");\n-    const legendRowHeader = create(\"th\");\n-    legendRowHeader.innerHTML = \"Legend:\";\n-    const legendRowData = create(\"td\");\n-    const modifiedSpan = create(\"span\");\n-    modifiedSpan.className = \"file-modified\";\n-    modifiedSpan.innerHTML = \"Modified file\";\n-    const removedSpan = create(\"span\");\n-    removedSpan.className = \"file-removed\";\n-    removedSpan.innerHTML = \"Deleted file\";\n-    const newSpan = create(\"span\");\n-    newSpan.className = \"file-added\";\n-    newSpan.innerHTML = \"New file\";\n-    legendRowData.append(modifiedSpan);\n-    legendRowData.append(create(\"br\"));\n-    legendRowData.append(removedSpan);\n-    legendRowData.append(create(\"br\"));\n-    legendRowData.append(newSpan);\n-    legendRow.append(legendRowHeader);\n-    legendRow.append(legendRowData);\n-\n-    table.append(generatedOnRow);\n-    table.append(compareAgainstRepoRow);\n-    table.append(compareAgainstRevRow);\n-    table.append(summaryOfChangesRow);\n-    table.append(patchOfChangesRow);\n-    table.append(pullRequestRow);\n-    table.append(legendRow);\n-\n-    summary.append(header);\n-    summary.append(table);\n-\n-    body().append(summary);\n-\n-    const commitsPerFile = getCommitsPerFile(await state.commits);\n-    const files = state.comparison.files;\n-    for (let i = 0; i < files.length; i++) {\n-        const file = files[i];\n-        const filename = file.filename;\n-        const p = create(\"p\");\n-        const code = create(\"code\");\n-        if (file.status === \"modified\" || file.status === \"copied\" || file.status === \"renamed\") {\n-            const cdiff = create(\"a\");\n-            cdiff.href = \"#cdiff-\" + i + \"-\" + filename;\n-            cdiff.innerHTML = \"Cdiffs\";\n-            code.append(cdiff, \" \");\n-\n-            const udiff = create(\"a\");\n-            udiff.href = \"#udiff-\" + i + \"-\" + filename;\n-            udiff.innerHTML = \"Udiffs\";\n-            code.append(udiff, \" \");\n-\n-            const sdiff = create(\"a\");\n-            sdiff.href = \"#sdiff-\" + i + \"-\" + filename;\n-            sdiff.innerHTML = \"Sdiffs\";\n-            code.append(sdiff, \" \");\n-\n-            const frames = create(\"a\");\n-            frames.href = \"#frames-\" + i + \"-\" + filename;\n-            frames.innerHTML = \"Frames\";\n-            code.append(frames, \" \");\n-\n-            const oldFile = create(\"a\");\n-            oldFile.href = \"#old-\" + i + \"-\" + filename;\n-            oldFile.innerHTML = \"Old\";\n-            code.append(oldFile, \" \");\n-\n-            const newFile = create(\"a\");\n-            newFile.href = \"#new-\" + i + \"-\" + filename;\n-            newFile.innerHTML = \"New\";\n-            code.append(newFile, \" \");\n-\n-            const patchFile = create(\"a\");\n-            patchFile.href = \"#patch-\" + i + \"-\" + filename;\n-            patchFile.innerHTML = \"Patch\";\n-            code.append(patchFile, \" \");\n-\n-            const rawFile = create(\"a\");\n-            rawFile.href = \"https:\/\/raw.githubusercontent.com\/\" + metadata.head.repo.full_name + \"\/\" + metadata.head.sha + \"\/\" + file.filename;\n-            rawFile.innerHTML = \"Raw\";\n-            code.append(rawFile, \" \");\n-\n-            p.append(code);\n-\n-            const fileNameSpan = create(\"span\"); \n-            fileNameSpan.className = \"file-modified\";\n-            fileNameSpan.innerHTML = file.filename;\n-            p.append(fileNameSpan);\n-\n-            if (file.status === \"copied\" || file.status === \"renamed\") {\n-                const italic = create(\"i\");\n-                italic.innerHTML = \"(was \" + file.previous_filename + \")\";\n-                p.append(italic);\n-            }\n-        } else if (file.status === \"added\") {\n-            code.append(\"------ \");\n-            code.append(\"------ \");\n-            code.append(\"------ \");\n-            code.append(\"------ \");\n-            code.append(\"--- \");\n-\n-            const newFile = create(\"a\");\n-            newFile.href = \"#new-\" + i + \"-\" + filename;\n-            newFile.innerHTML = \"New\";\n-            code.append(newFile, \" \");\n-\n-            const patchFile = create(\"a\");\n-            patchFile.href = \"#patch-\" + i + \"-\" + filename;\n-            patchFile.innerHTML = \"Patch\";\n-            code.append(patchFile, \" \");\n-\n-            const rawFile = create(\"a\");\n-            rawFile.href = \"https:\/\/raw.githubusercontent.com\/\" + metadata.head.repo.full_name + \"\/\" + metadata.head.sha + \"\/\" + file.filename;\n-            rawFile.innerHTML = \"Raw\";\n-            code.append(rawFile, \" \");\n-\n-            p.append(code);\n-\n-            const fileNameSpan = create(\"span\"); \n-            fileNameSpan.className = \"file-added\";\n-            fileNameSpan.innerHTML = file.filename;\n-\n-            p.append(fileNameSpan);\n-        } else if (file.status === \"deleted\") {\n-            code.append(\"------ \");\n-            code.append(\"------ \");\n-            code.append(\"------ \");\n-            code.append(\"------ \");\n-\n-            const oldFile = create(\"a\");\n-            oldFile.href = \"#old-\" + i + \"-\" + filename;\n-            oldFile.innerHTML = \"Old\";\n-            code.append(oldFile, \" \");\n-\n-            code.append(\"--- \");\n-\n-            const patchFile = create(\"a\");\n-            patchFile.href = \"#patch-\" + i + \"-\" + filename;\n-            patchFile.innerHTML = \"Patch\";\n-            code.append(patchFile, \" \");\n-\n-            const rawFile = create(\"a\");\n-            rawFile.href = \"https:\/\/raw.githubusercontent.com\/\" + metadata.head.repo.full_name + \"\/\" + metadata.head.sha + \"\/\" + file.filename;\n-            rawFile.innerHTML = \"Raw\";\n-            code.append(rawFile, \" \");\n-\n-            p.append(code);\n-\n-            const fileNameSpan = create(\"span\"); \n-            fileNameSpan.className = \"file-removed\";\n-            fileNameSpan.innerHTML = file.filename;\n-\n-            p.append(fileNameSpan);\n-        }\n-\n-        body().append(p);\n-\n-        const blockquote = create(\"blockquote\");\n-        const commitMessages = create(\"pre\");\n-        for (var commit of commitsPerFile[file.filename]) {\n-            const subject = commit.commit.message.split('\\n')[0];\n-            commitMessages.append(commit.sha.substring(0, 8) + \": \" + subject, \"\\n\");\n-        }\n-        const blockquoteSpan = create(\"span\");\n-        blockquoteSpan.className = \"stat\";\n-        blockquoteSpan.innerHTML = file.changes + \" lines changed; \" + file.additions + \" ins; \" + file.deletions + \" del\";\n-        blockquote.append(commitMessages, blockquoteSpan);\n-        body().append(blockquote);\n-    }\n-\n-    const hr = create(\"hr\");\n-    const footer = create(\"p\");\n-    footer.className = \"version\";\n-\n-    const webrevLink = create(\"a\");\n-    webrevLink.href = \"https:\/\/git.openjdk.java.net\/cr\/blob\/master\/webrev.js\";\n-    webrevLink.innerHTML = \"webrev.js\";\n-    footer.append(\"This code review page was prepared using \", webrevLink, \".\");\n-\n-    body().append(hr);\n-    body().append(footer);\n-}\n-\n-function hasOnlyAdditions(hunk, context) {\n-    for (var line of hunk.src.lines) {\n-        if (line.startsWith(\"-\")) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-function hasOnlyDeletions(hunk, context) {\n-    for (var line of hunk.dst.lines) {\n-        if (line.startsWith(\"+\")) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-function createNavigation(view, index) {\n-    const files = state.comparison.files;\n-    const center = create(\"center\");\n-    let prevModified = -1;\n-    let prevFilename = \"\";\n-    for (let i = index - 1; i >= 0; i--) {\n-        const s = files[i].status;\n-        if (s === \"modified\" || s === \"renamed\" || s === \"copied\") {\n-            prevModified = i;\n-            prevFilename = files[i].filename;\n-            break;\n-        }\n-    }\n-    if (prevModified === -1) {\n-        const prev = create(\"span\");\n-        prev.innerHTML = \"&lt; prev\";\n-        center.append(prev);\n-    } else {\n-        const prev = create(\"a\");\n-        prev.innerHTML = \"&lt; prev\";\n-        prev.href = \"#\" + view + \"-\" + prevModified + \"-\" + prevFilename;\n-        center.append(prev);\n-    }\n-\n-    const indexLink = create(\"a\");\n-    indexLink.href = \"#\";\n-    indexLink.innerHTML = \"index\";\n-    indexLink.addEventListener(\"click\", function (e) {\n-        e.preventDefault();\n-        state.view = \"index\";\n-        window.history.pushState({}, null, window.location.search);\n-        render(state);\n-    });\n-    center.append(\" \", indexLink, \" \");\n-\n-    let nextModified = -1;\n-    let nextFilename = \"\";\n-    for (let i = index + 1; i < files.length; i++) {\n-        const s = files[i].status;\n-        if (s === \"modified\" || s === \"copied\" || s === \"renamed\") {\n-            nextModified = i;\n-            nextFilename = files[i].filename;\n-            break;\n-        }\n-    }\n-    if (nextModified === -1) {\n-        const next = create(\"span\");\n-        next.innerHTML = \"next &gt;\";\n-        center.append(next);\n-    } else {\n-        const next = create(\"a\");\n-        next.href = \"#\" + view + \"-\" + nextModified + \"-\" + nextFilename;\n-        next.innerHTML = \"next &gt;\";\n-        center.append(next);\n-    }\n-\n-    return center;\n-}\n-\n-function body() {\n-    return document.getElementsByTagName(\"body\")[0];\n-}\n-\n-function create(name) {\n-    return document.createElement(name);\n-}\n-\n-function log(s) {\n-    console.log(s);\n-}\n-\n-function get(id) {\n-    return document.getElementById(id);\n-}\n-\n-function framesScrollToPrevHunk() {\n-    state.hunk = state.hunk - 1;\n-    if (state.hunk < 0) {\n-        state.hunk = 0;\n-    }\n-    const display = state.hunk === 0 ? \"BOF\" : String(state.hunk);\n-    get(\"display\").value = display;\n-\n-    const lhs = get(\"lhs\");\n-    const lhsHunkSpan = get(\"lhs-hunk-\" + state.hunk);\n-    lhs.scrollTop = lhsHunkSpan.offsetTop - 30;\n-\n-    const rhsHunkSpan = get(\"rhs-hunk-\" + state.hunk);\n-    const rhs = get(\"rhs\");\n-    rhs.scrollTop = rhsHunkSpan.offsetTop - 30;\n-}\n-\n-function framesScrollToNextHunk() {\n-    state.hunk = state.hunk + 1;\n-    const eof = hunks(state).length + 1;\n-    if (state.hunk > eof) {\n-        state.hunk = eof;\n-    }\n-\n-    const display = state.hunk === eof ? \"EOF\" : String(state.hunk);\n-    get(\"display\").value = display;\n-\n-    const lhs = get(\"lhs\");\n-    const lhsHunkSpan = get(\"lhs-hunk-\" + state.hunk);\n-    lhs.scrollTop = lhsHunkSpan.offsetTop - 30;\n-\n-    const rhsHunkSpan = get(\"rhs-hunk-\" + state.hunk);\n-    const rhs = get(\"rhs\");\n-    rhs.scrollTop = rhsHunkSpan.offsetTop - 30;\n-}\n-\n-function framesOnKeyDown(e) {\n-    if (e.key === 'j') {\n-        framesScrollToNextHunk();\n-    } else if (e.key === 'k') {\n-        framesScrollToPrevHunk();\n-    }\n-}\n-\n-function hunks(state) {\n-    const files = state.comparison.files;\n-    if (state.hunks === null) {\n-        state.hunks = new Array(files.length);\n-        state.hunks.fill(null);\n-    }\n-    if (state.hunks[state.index] === null) {\n-        state.hunks[state.index] = removeContext(files[state.index].patch);\n-    }\n-    return state.hunks[state.index];\n-}\n-\n-function filename(state) {\n-    const files = state.comparison.files;\n-    return files[state.index].filename;\n-}\n-\n-async function renderPatch(state) {\n-    body().style.margin = \"8px\";\n-    const index = state.index;\n-\n-    if (state.cache.patch[index] !== null) {\n-        body().append(state.cache.patch[index]);\n-        return;\n-    }\n-\n-    const main = create(\"div\");\n-    let _hunks = null;\n-    let context = 0;\n-    if (state.comparison.files[index].status === \"modified\") {\n-        const baseContent = await state.base.content[index];\n-        const headContent = await state.head.content[index];\n-        context = 3;\n-        _hunks = addContext(hunks(state), context, baseContent, headContent);\n-    } else {\n-        _hunks = hunks(state);\n-    }\n-\n-    const pre = create(\"pre\");\n-    pre.append(\"--- \", \"a\/\", filename(state), \"\\n\");\n-    pre.append(\"+++ \", \"b\/\", filename(state), \"\\n\");\n-    for (let hunk of _hunks) {\n-        pre.append(\"@@ -\", String(hunk.src.start), \",\", String(hunk.src.lines.length),\n-                     \" +\", String(hunk.dst.start), \",\", String(hunk.dst.lines.length), \" @@\\n\");\n-        let srcIndex = 0;\n-        let dstIndex = 0;\n-\n-        \/\/ Context before\n-        while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n-               (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n-            pre.append(hunk.src.lines[srcIndex], \"\\n\");\n-            srcIndex++;\n-            dstIndex++;\n-        }\n-        while (srcIndex < hunk.src.lines.length || dstIndex < hunk.dst.lines.length) {\n-            while (srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\"-\")) {\n-                pre.append(hunk.src.lines[srcIndex], \"\\n\");\n-                srcIndex++;\n-            }\n-            while (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\"+\")) {\n-                pre.append(hunk.dst.lines[dstIndex], \"\\n\");\n-                dstIndex++;\n-            }\n-            while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n-                   (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n-                pre.append(hunk.src.lines[srcIndex], \"\\n\");\n-                srcIndex++;\n-                dstIndex++;\n-            }\n-        }\n-    }\n-    main.append(pre);\n-    state.cache.patch[index] = main;\n-    body().append(main);\n-}\n-\n-async function renderFrames(state) {\n-    \/\/ reset state\n-    state.hunk = 0;\n-    state.intervalId = -1;\n-\n-    const index = state.index;\n-    if (state.cache.frames[index] !== null) {\n-        body().append(state.cache.frames[index]);\n-        return;\n-    }\n-\n-    const oldLines = await state.base.content[state.index];\n-    const newLines = await state.head.content[state.index];\n-    const _hunks = hunks(state);\n-\n-    const container = create(\"div\");\n-    container.className = \"frames-container\";\n-    body().addEventListener(\"keydown\", framesOnKeyDown);\n-\n-    const content = create(\"div\");\n-    content.className = \"frames-content\";\n-\n-    const left = create(\"div\");\n-    left.id = \"lhs\";\n-    left.className = \"frames-pane\";\n-    left.style.borderRight = \"5px ridge buttonface\";\n-    const leftContent = create(\"pre\");\n-\n-    const leftLineNumberColWidth = String(oldLines.length).length;\n-    let leftIndex = 0;\n-    for (let i = 0; i < _hunks.length; i++) {\n-        const hunk = _hunks[i];\n-        const onlyDeletions = hasOnlyDeletions(hunk, 0);\n-        const start = hunk.src.start - 1;\n-        for (let j = leftIndex; j < start; j++, leftIndex++) {\n-            const lineno = String(leftIndex + 1);\n-            const line = oldLines[leftIndex];\n-            const padding = leftLineNumberColWidth - lineno.length;\n-            leftContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n-        }\n-        for (let j = 0; j < hunk.src.lines.length; j++, leftIndex++) {\n-            const lineno = String(leftIndex + 1);\n-            const line = oldLines[leftIndex];\n-            const padding = leftLineNumberColWidth - lineno.length;\n-            const span = create(\"span\");\n-            span.className = onlyDeletions ? \"line-removed\" : \"line-modified\";\n-            if (j == 0) {\n-                span.id = \"lhs-hunk-\" + String(i + 1);\n-            }\n-            span.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n-            leftContent.append(span);\n-        }\n-        const diffInLines = hunk.dst.lines.length - hunk.src.lines.length;\n-        for (let j = 0; j < diffInLines; j++) {\n-            if (hunk.src.lines.length === 0 && j === 0) {\n-                const span = create(\"span\");\n-                if (j == 0) {\n-                    span.id = \"lhs-hunk-\" + String(i + 1);\n-                }\n-                leftContent.append(span);\n-            }\n-            leftContent.append(\"\\n\");\n-        }\n-    }\n-    const lastHunk = _hunks[_hunks.length - 1];\n-    for (let i = lastHunk.src.start + lastHunk.src.lines.length - 1; i < oldLines.length; i++) {\n-        const line = oldLines[i];\n-        const lineno = String(i + 1);\n-        const padding = leftLineNumberColWidth - lineno.length;\n-        leftContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n-    }\n-    const lhsEOF = create(\"span\");\n-    lhsEOF.id = \"lhs-hunk-\" + String(_hunks.length + 1);\n-    const lhsEOFText = create(\"b\");\n-    lhsEOFText.style.fontSize = \"large\";\n-    lhsEOFText.style.color = \"red\";\n-    lhsEOFText.innerHTML = \"--- EOF ---\"\n-    lhsEOF.append(lhsEOFText);\n-    leftContent.append(lhsEOF);\n-    for (let i = 0; i < 80; i++) {\n-        leftContent.append(\"\\n\");\n-    }\n-\n-    const lhsBOF = create(\"span\");\n-    lhsBOF.id = \"lhs-hunk-0\";\n-\n-    left.append(create(\"hr\"), lhsBOF, leftContent);\n-\n-    const right = create(\"div\");\n-    right.id = \"rhs\";\n-    right.className = \"frames-pane\";\n-    right.style.flexGrow = 1;\n-    const rightContent = create(\"pre\");\n-\n-    const rightLineNumberColWidth = String(newLines.length).length;\n-    let rightIndex = 0;\n-    for (let i = 0; i < _hunks.length; i++) {\n-        const hunk = _hunks[i];\n-        const onlyAdditions = hasOnlyAdditions(hunk, 0);\n-        const start = hunk.dst.start - 1;\n-        for (let j = rightIndex; j < start; j++, rightIndex++) {\n-            const lineno = String(rightIndex + 1);\n-            const line = newLines[rightIndex];\n-            const padding = rightLineNumberColWidth - lineno.length;\n-            rightContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n-        }\n-        for (let j = 0; j < hunk.dst.lines.length; j++, rightIndex++) {\n-            const lineno = String(rightIndex + 1);\n-            const line = newLines[rightIndex];\n-            const padding = rightLineNumberColWidth - lineno.length;\n-            const span = create(\"span\");\n-            if (j == 0) {\n-                span.id = \"rhs-hunk-\" + String(i + 1);\n-            }\n-            span.className = onlyAdditions ? \"line-added\" : \"line-modified\";\n-            span.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n-            rightContent.append(span);\n-        }\n-        const diffInLines = hunk.src.lines.length - hunk.dst.lines.length;\n-        for (let j = 0; j < diffInLines; j++) {\n-            if (hunk.dst.lines.length === 0 && j === 0) {\n-                const span = create(\"span\");\n-                if (j == 0) {\n-                    span.id = \"rhs-hunk-\" + String(i + 1);\n-                }\n-                rightContent.append(span);\n-            }\n-            rightContent.append(\"\\n\");\n-        }\n-    }\n-    for (let i = lastHunk.dst.start + lastHunk.dst.lines.length - 1; i < newLines.length; i++) {\n-        const line = newLines[i];\n-        const lineno = String(i + 1);\n-        const padding = rightLineNumberColWidth - lineno.length;\n-        rightContent.append(\" \".repeat(padding), lineno, \" \", line, \"\\n\");\n-    }\n-    const rhsEOF = create(\"span\");\n-    rhsEOF.id = \"rhs-hunk-\" + String(_hunks.length + 1);\n-    const rhsEOFText = create(\"b\");\n-    rhsEOFText.style.fontSize = \"large\";\n-    rhsEOFText.style.color = \"red\";\n-    rhsEOFText.innerHTML = \"--- EOF ---\"\n-    rhsEOF.append(rhsEOFText);\n-    rightContent.append(rhsEOF);\n-    for (let i = 0; i < 80; i++) {\n-        rightContent.append(\"\\n\");\n-    }\n-    const rhsBOF = create(\"span\");\n-    rhsBOF.id = \"rhs-hunk-0\";\n-    right.append(create(\"hr\"), rhsBOF, rightContent);\n-\n-    const controls = create(\"div\");\n-    controls.className = \"frames-controls\";\n-    const table = create(\"table\");\n-    table.className = \"navigation\";\n-    const row = create(\"tr\");\n-    const c1 = create(\"td\");\n-    c1.valign = \"middle\";\n-    c1.width = \"25%\";\n-    c1.innerHTML = \"Diff navigation:\\nUse 'j' and 'k' for next and previous diffs; or use buttons at right\";\n-\n-    const c2 = create(\"td\");\n-    c2.align = \"center\";\n-    c2.valign = \"top\";\n-    c2.width = \"50%\";\n-    const center = create(\"div\");\n-    const buttons = create(\"table\");\n-    buttons.border = 0;\n-    buttons.align = \"center\";\n-    const buttonsRow1 = create(\"tr\"); \n-\n-    const startButton = create(\"td\");\n-    startButton.className = \"button\";\n-    const startButtonLink = create(\"a\");\n-    startButtonLink.title = \"Go to Beginning of File\";\n-    startButtonLink.innerHTML = \"BOF\";\n-    startButtonLink.style.textDecoration = \"none\";\n-    startButtonLink.addEventListener(\"click\", function () {\n-        const lhsBOFSpan = get(\"lhs-hunk-0\");\n-        const lhs = get(\"lhs\");\n-        lhs.scrollTop = lhsBOFSpan.offsetTop;\n-\n-        const rhsBOFSpan = get(\"rhs-hunk-0\");\n-        const rhs = get(\"rhs\");\n-        rhs.scrollTop = rhsBOFSpan.offsetTop;\n-\n-        state.hunk = 0;\n-        get(\"display\").value = \"BOF\";\n-    });\n-    startButton.append(startButtonLink);\n-\n-    const scrollUpButton = create(\"td\");\n-    scrollUpButton.className = \"button\";\n-    const scrollUpLink = create(\"a\");\n-    scrollUpLink.title = \"Scroll up; Press and Hold to accelerate\";\n-    scrollUpLink.href = \"#index\";\n-    scrollUpLink.innerHTML = \"Scroll Up\";\n-    scrollUpLink.style.textDecoration = \"none\";\n-    scrollUpLink.addEventListener(\"mousedown\", function() {\n-        let acceleration = 3.0;\n-        let n = 0;\n-        state.intervalId = window.setInterval(function() {\n-            if ((n % 10) === 0) {\n-                acceleration *= 1.2;\n-            }\n-            get(\"lhs\").scrollTop -= acceleration;\n-            get(\"rhs\").scrollTop -= acceleration;\n-            n++;\n-        }, 10);\n-    });\n-    scrollUpLink.addEventListener(\"mouseup\", function() {\n-        window.clearInterval(state.intervalId);\n-    });\n-    scrollUpLink.addEventListener(\"click\", function(e) {\n-        e.preventDefault();\n-    });\n-    scrollUpButton.append(scrollUpLink);\n-\n-    const prevHunkButton = create(\"td\");\n-    prevHunkButton.className = \"button\";\n-    const prevHunkLink = create(\"a\");\n-    prevHunkLink.title = \"Go to previous Diff\";\n-    prevHunkLink.innerHTML = \"Prev Diff\";\n-    prevHunkLink.style.textDecoration = \"none\";\n-    prevHunkLink.addEventListener(\"click\", framesScrollToPrevHunk);\n-    prevHunkButton.append(prevHunkLink);\n-\n-    buttonsRow1.append(startButton, scrollUpButton, prevHunkButton);\n-\n-    const buttonsRow2 = create(\"tr\"); \n-\n-    const endButton = create(\"td\");\n-    endButton.className = \"button\";\n-    const endButtonLink = create(\"a\");\n-    endButtonLink.title = \"Go to End of File\";\n-    endButtonLink.innerHTML = \"EOF\";\n-    endButtonLink.style.textDecoration = \"none\";\n-    endButtonLink.addEventListener(\"click\", function () {\n-        const lhsEOFSpan = get(\"lhs-hunk-\" + String(_hunks.length + 1));\n-        const lhs = get(\"lhs\");\n-        lhs.scrollTop = lhsEOFSpan.offsetTop - 30;\n-\n-        const rhsEOFSpan = get(\"rhs-hunk-\" + String(_hunks.length + 1));\n-        const rhs = get(\"rhs\");\n-        rhs.scrollTop = rhsEOFSpan.offsetTop - 30;\n-\n-        state.hunk = _hunks.length + 1;\n-\n-        get(\"display\").value = \"EOF\";\n-    });\n-    endButton.append(endButtonLink);\n-\n-    const scrollDownButton = create(\"td\");\n-    scrollDownButton.className = \"button\";\n-    const scrollDownLink = create(\"a\");\n-    scrollDownLink.title = \"Scroll down; Press and Hold to accelerate\";\n-    scrollDownLink.innerHTML = \"Scroll Down\";\n-    scrollDownLink.style.textDecoration = \"none\";\n-    scrollDownLink.addEventListener(\"mousedown\", function() {\n-        let acceleration = 3.0;\n-        let n = 0;\n-        state.intervalId = window.setInterval(function() {\n-            if ((n % 10) === 0) {\n-                acceleration *= 1.2;\n-            }\n-            get(\"lhs\").scrollTop += acceleration;\n-            get(\"rhs\").scrollTop += acceleration;\n-            n++;\n-        }, 10);\n-    });\n-    scrollDownLink.addEventListener(\"mouseup\", function() {\n-        window.clearInterval(state.intervalId);\n-    });\n-    scrollDownLink.addEventListener(\"click\", function(e) {\n-        e.preventDefault();\n-    });\n-    scrollDownButton.append(scrollDownLink);\n-\n-    const nextHunkButton = create(\"td\");\n-    nextHunkButton.className = \"button\";\n-    const nextHunkLink = create(\"a\");\n-    nextHunkLink.title = \"Go to next Diff\";\n-    nextHunkLink.innerHTML = \"Next Diff\";\n-    nextHunkLink.style.textDecoration = \"none\";\n-    nextHunkLink.addEventListener(\"click\", framesScrollToNextHunk);\n-    nextHunkButton.append(nextHunkLink);\n-\n-    buttonsRow2.append(endButton, scrollDownButton, nextHunkButton);\n-\n-    buttons.append(buttonsRow1);\n-    buttons.append(buttonsRow2);\n-    center.append(buttons);\n-    c2.append(center);\n-\n-    const c3 = create(\"td\");\n-    c3.width = \"25%\";\n-    c3.valign = \"middle\";\n-    c3.style.paddingLeft = \"185px\";\n-    const form = create(\"form\");\n-    const input = create(\"input\");\n-    input.id = \"display\";\n-    input.value = \"BOF\";\n-    input.size = 8;\n-    input.type = \"text\";\n-    form.append(input);\n-    c3.append(form);\n-\n-    row.append(c1, c2, c3);\n-    table.append(row);\n-    controls.append(table);\n-\n-    const navigation = create(\"div\");\n-    navigation.className = \"frames-navigation\";\n-    navigation.append(createNavigation(\"frames\", index));\n-\n-    content.append(left, right);\n-    container.append(content, controls, navigation);\n-\n-    state.cache.frames[index] = container;\n-    body().append(container);\n-}\n-\n-function addLineNumbers(lines) {\n-    const digits = String(lines.length).length;\n-    const res = new Array(lines.length);\n-    for (let i = 0; i < lines.length; i++) {\n-        const lineno = String(i + 1);\n-        const padding = digits - lineno.length;\n-        res[i] = \" \".repeat(padding) + lineno + \" \" + lines[i];\n-    }\n-    return res;\n-}\n-\n-async function renderNew(state) {\n-    body().style.margin = \"8px\";\n-    const index = state.index;\n-    if (state.cache[\"new\"][index] !== null) {\n-        body().append(state.cache[\"new\"][index]);\n-        return;\n-    }\n-    const lines = await state.head.content[index];\n-    const pre = create(\"pre\");\n-    pre.append(addLineNumbers(lines).join('\\n'));\n-    state.cache[\"new\"][index] = pre;\n-    body().append(pre);\n-}\n-\n-async function renderOld(state) {\n-    body().style.margin = \"8px\";\n-    const index = state.index;\n-    if (state.cache.old[index] !== null) {\n-        body().append(state.cache.old[index]);\n-        return;\n-    }\n-    const lines = await state.base.content[index];\n-    const pre = create(\"pre\");\n-    pre.append(addLineNumbers(lines).join('\\n'));\n-    state.cache.old[index] = pre;\n-    body().append(pre);\n-}\n-\n-function createPrintThisPage() {\n-    const link = create(\"a\");\n-    link.href = \"javascript:print()\";\n-    link.className = \"print\";\n-    link.innerHTML = \"Print this page\";\n-    return link;\n-}\n-\n-async function renderUdiff(state) {\n-    body().style.margin = \"8px\";\n-    const index = state.index;\n-    if (state.cache.udiffs[index] !== null) {\n-        body().append(state.cache.udiffs[index]);\n-        return;\n-    }\n-\n-    const main = create(\"div\");\n-    main.append(createNavigation(\"udiff\", index));\n-    main.append(createFilenameHeader(state));\n-    main.append(createPrintThisPage());\n-    main.append(create(\"hr\"));\n-\n-    const baseContent = await state.base.content[index];\n-    const headContent = await state.head.content[index];\n-    const context = 5;\n-    const hunksWithContext = addContext(hunks(state), context, baseContent, headContent);\n-    const udiff = create(\"pre\");\n-    for (let hunk of hunksWithContext) {\n-        const span = create(\"span\");\n-        const header = \"@@ -\" + hunk.src.start + \",\" + hunk.src.lines.length +\n-                 \" +\" + hunk.dst.start + \",\" + hunk.dst.lines.length +\n-                 \" @@\";\n-        span.append(header, \"\\n\");\n-        span.className = \"line-new-header\";\n-        udiff.append(span);\n-\n-        const onlyDeletions = hasOnlyDeletions(hunk, context);\n-        const onlyAdditions = hasOnlyAdditions(hunk, context);\n-\n-        let srcIndex = 0;\n-        let dstIndex = 0;\n-\n-        \/\/ Context before\n-        while (hunk.src.lines[srcIndex].startsWith(\" \") && hunk.dst.lines[dstIndex].startsWith(\" \")) {\n-            const span = create(\"span\");\n-            span.append(hunk.src.lines[srcIndex], \"\\n\");\n-            udiff.append(span);\n-            srcIndex++;\n-            dstIndex++;\n-        }\n-\n-        while (srcIndex < hunk.src.lines.length && dstIndex < hunk.dst.lines.length) {\n-            while (srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\"-\")) {\n-                const span = create(\"span\");\n-                span.append(hunk.src.lines[srcIndex], \"\\n\");\n-                span.className = onlyDeletions ? \"udiff-line-removed\" : \"udiff-line-modified-removed\";\n-                udiff.append(span);\n-                srcIndex++;\n-            }\n-            while (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\"+\")) {\n-                const span = create(\"span\");\n-                span.append(hunk.dst.lines[dstIndex], \"\\n\");\n-                span.className = onlyAdditions ? \"udiff-line-added\" : \"udiff-line-modified-added\";\n-                udiff.append(span);\n-                dstIndex++;\n-            }\n-            while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n-                   (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n-                const span = create(\"span\");\n-                span.append(hunk.src.lines[srcIndex], \"\\n\");\n-                udiff.append(span);\n-                srcIndex++;\n-                dstIndex++;\n-            }\n-        }\n-    }\n-    main.append(udiff);\n-    main.append(createNavigation(\"udiff\", index));\n-    state.cache.udiffs[index] = main;\n-    body().append(main);\n-}\n-\n-function createFilenameHeader(state) {\n-    const h2 = create(\"h2\");\n-    h2.innerHTML = filename(state);\n-    return h2;\n-}\n-\n-async function renderCdiff(state) {\n-    body().style.margin = \"8px\";\n-    const index = state.index;\n-    if (state.cache.cdiffs[index] !== null) {\n-        body().append(state.cache.cdiffs[index]);\n-        return;\n-    }\n-\n-    const main = create(\"div\");\n-    main.append(createNavigation(\"cdiff\", index));\n-    main.append(createFilenameHeader(state));\n-    main.append(createPrintThisPage());\n-    main.append(create(\"hr\"));\n-\n-    const baseContent = await state.base.content[state.index];\n-    const headContent = await state.head.content[state.index];\n-    const context = 5;\n-    const hunksWithContext = addContext(hunks(state), context, baseContent, headContent);\n-\n-    const cdiff = create(\"pre\");\n-    for (let hunk of hunksWithContext) {\n-        const srcHeaderSpan = create(\"span\");\n-        const srcHeader = \"*** \" + hunk.src.start + \",\" + hunk.src.lines.length + \" ***\";\n-        srcHeaderSpan.append(srcHeader, \"\\n\");\n-        srcHeaderSpan.className = \"line-old-header\";\n-        cdiff.append(srcHeaderSpan);\n-\n-        const onlyDeletions = hasOnlyDeletions(hunk, context);\n-        const onlyAdditions = hasOnlyAdditions(hunk, context);\n-\n-        for (var line of hunk.src.lines) {\n-            const span = create(\"span\");\n-            if (line.startsWith(\"-\")) {\n-                span.className = onlyDeletions ? \"line-removed\" : \"line-modified\";\n-                line = \"!\" + line.substring(1);\n-            }\n-            span.append(line, \"\\n\");\n-            cdiff.append(span);\n-        }\n-\n-        const dstHeaderSpan = create(\"span\");\n-        const dstHeader = \"*** \" + hunk.dst.start + \",\" + hunk.dst.lines.length + \" ***\";\n-        dstHeaderSpan.append(srcHeader, \"\\n\");\n-        dstHeaderSpan.className = \"line-new-header\";\n-        cdiff.append(dstHeaderSpan);\n-\n-        for (var line of hunk.dst.lines) {\n-            const span = create(\"span\");\n-            if (line.startsWith(\"+\")) {\n-                span.className = onlyAdditions ? \"line-added\" : \"line-modified\";\n-                line = \"!\" + line.substring(1);\n-            }\n-            span.append(line, \"\\n\");\n-            cdiff.append(span);\n-        }\n-\n-    }\n-    main.append(cdiff);\n-    main.append(createNavigation(\"cdiff\", index));\n-    state.cache.cdiffs[index] = main;\n-    body().append(main);\n-}\n-\n-async function renderSdiff(state) {\n-    body().style.margin = \"8px\";\n-    const index = state.index;\n-    if (state.cache.sdiffs[index] !== null) {\n-        body().append(state.cache.sdiffs[index]);\n-        return;\n-    }\n-\n-    const main = create(\"div\");\n-    main.append(createNavigation(\"sdiff\", index));\n-    main.append(createFilenameHeader(state));\n-    main.append(createPrintThisPage());\n-\n-    const baseContent = await state.base.content[index];\n-    const headContent = await state.head.content[index];\n-    const context = 20;\n-    const hunksWithContext = addContext(hunks(state), context, baseContent, headContent);\n-\n-    const tbody = create(\"tbody\");\n-    for (let hunk of hunksWithContext) {\n-        const row = create(\"tr\");\n-        row.valign = \"top\";\n-\n-        const lhs = create(\"td\");\n-        lhs.style.verticalAlign = \"top\";\n-        lhs.append(create(\"hr\"));\n-        const lhsContent = create(\"pre\");\n-\n-        const rhs = create(\"td\");\n-        rhs.style.verticalAlign = \"top\";\n-        rhs.append(create(\"hr\"));\n-        const rhsContent = create(\"pre\");\n-\n-        const onlyDeletions = hasOnlyDeletions(hunk, context);\n-        const onlyAdditions = hasOnlyAdditions(hunk, context);\n-        let srcIndex = 0;\n-        let dstIndex = 0;\n-        const maxSrcLinenoWidth = String(hunk.src.start + hunk.src.lines.length).length;\n-        const maxDstLinenoWidth = String(hunk.dst.start + hunk.dst.lines.length).length;\n-\n-        while (hunk.src.lines[srcIndex].startsWith(\" \") && hunk.dst.lines[dstIndex].startsWith(\" \")) {\n-            const line = hunk.src.lines[srcIndex];\n-            const lhsLineno = String(hunk.src.start + srcIndex);\n-            const lhsPadding = maxSrcLinenoWidth - lhsLineno.length;\n-            const rhsLineno = String(hunk.dst.start + dstIndex);\n-            const rhsPadding = maxDstLinenoWidth - rhsLineno.length;\n-            lhsContent.append(\" \".repeat(lhsPadding), lhsLineno, \" \", line.substring(1), \"\\n\");\n-            rhsContent.append(\" \".repeat(rhsPadding), rhsLineno, \" \", line.substring(1), \"\\n\");\n-            srcIndex++;\n-            dstIndex++;\n-        }\n-        while (srcIndex < hunk.src.lines.length && dstIndex < hunk.dst.lines.length) {\n-            let addedSrcLines = 0;\n-            while (srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\"-\")) {\n-                const line = hunk.src.lines[srcIndex];\n-                const span = create(\"span\");\n-                span.className = onlyDeletions ? \"line-removed\" : \"line-modified\";\n-                const lineno = String(hunk.src.start + srcIndex);\n-                const padding = maxSrcLinenoWidth - lineno.length;\n-                span.append(\" \".repeat(padding), lineno, \" \", line.substring(1), \"\\n\");\n-                lhsContent.append(span);\n-                srcIndex++;\n-                addedSrcLines++;\n-            }\n-            let addedDstLines = 0;\n-            while (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\"+\")) {\n-                const line = hunk.dst.lines[dstIndex];\n-                const span = create(\"span\");\n-                span.className = onlyAdditions ? \"line-added\" : \"line-modified\";\n-                const lineno = String(hunk.dst.start + dstIndex);\n-                const padding = maxDstLinenoWidth - lineno.length;\n-                span.append(\" \".repeat(padding), lineno, \" \", line.substring(1), \"\\n\");\n-                rhsContent.append(span);\n-                dstIndex++;\n-                addedDstLines++;\n-            }\n-\n-            for (let j = 0; j < (addedDstLines - addedSrcLines); j++) {\n-                lhsContent.append(\"\\n\");\n-            }\n-            for (let j = 0; j < (addedSrcLines - addedDstLines); j++) {\n-                rhsContent.append(\"\\n\");\n-            }\n-\n-            while ((srcIndex < hunk.src.lines.length && hunk.src.lines[srcIndex].startsWith(\" \")) &&\n-                   (dstIndex < hunk.dst.lines.length && hunk.dst.lines[dstIndex].startsWith(\" \"))) {\n-                const line = hunk.src.lines[srcIndex];\n-                const span = create(\"span\");\n-                const lhsLineno = String(hunk.src.start + srcIndex);\n-                const lhsPadding = maxSrcLinenoWidth - lhsLineno.length;\n-                const rhsLineno = String(hunk.dst.start + dstIndex);\n-                const rhsPadding = maxDstLinenoWidth - rhsLineno.length;\n-                lhsContent.append(\" \".repeat(lhsPadding), lhsLineno, \" \", line.substring(1), \"\\n\");\n-                rhsContent.append(\" \".repeat(rhsPadding), rhsLineno, \" \", line.substring(1), \"\\n\");\n-                srcIndex++;\n-                dstIndex++;\n-            }\n-        }\n-\n-        lhs.append(lhsContent);\n-        rhs.append(rhsContent);\n-        row.append(lhs, rhs);\n-        tbody.append(row);\n-\n-    }\n-    const sdiff = create(\"table\");\n-    sdiff.append(tbody);\n-    main.append(sdiff);\n-    main.append(createNavigation(\"sdiff\", index));\n-    state.cache.sdiffs[index] = main;\n-    body().append(main);\n-}\n-\n-function parseRange(s) {\n-    const parts = s.split(',');\n-    const start = parts[0].substring(1); \/\/ skip leading '-' or '+'\n-    const n = parts[1];\n-    return {\n-        start: start,\n-        n: n\n-    };\n-}\n-\n-class Hunk {\n-    constructor(srcStart, srcLines, dstStart, dstLines) {\n-        this.source = {\n-            start: srcStart,\n-            lines: srcLines\n-        };\n-        this.destination = {\n-            start: dstStart,\n-            lines: dstLines\n-        };\n-    }\n-\n-    get src() {\n-        return this.source;\n-    }\n-\n-    get dst() {\n-        return this.destination;\n-    }\n-}\n-\n-function addContext(hunks, n, baseContent, headContent) {\n-    const res = new Array();\n-\n-    for (let i = 0; i < hunks.length; i++) {\n-        const hunk = hunks[i];\n-        let srcStart = hunk.src.start - n;\n-        if (srcStart < 1) {\n-            srcStart = 1;\n-        }\n-        const srcLines = new Array();\n-        let dstStart = hunk.dst.start - n;\n-        if (dstStart < 1) {\n-            dstStart = 1;\n-        }\n-        const dstLines = new Array();\n-\n-        const contextEnd = Math.min(n, hunk.src.start - 1);\n-\n-        \/\/ Context before\n-        for (let j = 0; j < contextEnd; j++) {\n-            srcLines.push(\" \" + baseContent[srcStart + j - 1]);\n-            dstLines.push(\" \" + headContent[dstStart + j - 1]);\n-        }\n-\n-        \/\/ Changes\n-        for (let line of hunk.src.lines) {\n-            srcLines.push(line);\n-        }\n-        for (let line of hunk.dst.lines) {\n-            dstLines.push(line);\n-        }\n-\n-        let srcEnd = hunk.src.start + hunk.src.lines.length;\n-        let dstEnd = hunk.dst.start + hunk.dst.lines.length;\n-        for (let j = i + 1; j < hunks.length && ((hunks[j].src.start <= srcEnd + n) || (hunks[j].dst.start <= dstEnd + n)); j++, i++) {\n-            const next = hunks[j];\n-            const numSrcContext = next.src.start - srcEnd;\n-            for (let k = 0; k < numSrcContext; k++) {\n-                srcLines.push(\" \" + baseContent[srcEnd + k - 1]);\n-            }\n-            const numDstContext = next.dst.start - dstEnd;\n-            for (let k = 0; k < numDstContext; k++) {\n-                dstLines.push(\" \" + headContent[dstEnd + k - 1]);\n-            }\n-\n-            for (let line of next.src.lines) {\n-                srcLines.push(line);\n-            }\n-            for (let line of next.dst.lines) {\n-                dstLines.push(line);\n-            }\n-            srcEnd = next.src.start + next.src.lines.length;\n-            dstEnd = next.dst.start + next.dst.lines.length;\n-        }\n-\n-        for (let j = 0; j < n && (srcEnd + j) <= baseContent.length; j++) {\n-            srcLines.push(\" \" + baseContent[srcEnd + j - 1]);\n-            dstLines.push(\" \" + headContent[dstEnd + j - 1]);\n-        }\n-\n-        res.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n-    }\n-\n-    return res;\n-}\n-\n-function removeContext(patch) {\n-    const hunks = new Array();\n-    let srcStart = 0;\n-    let srcLines = new Array();\n-    let dstStart = 0;\n-    let dstLines = new Array();\n-    let isBefore = true;\n-\n-    const lines = patch.split('\\n');\n-    const end = patch.endsWith('\\n') ? lines.length - 1 : lines.length;\n-    for (let i = 0; i < end; i++) {\n-        const line = lines[i];\n-        if (line.startsWith(\"@@\")) {\n-            if (srcLines.length > 0 || dstLines.length > 0) {\n-                hunks.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n-            }\n-\n-            const parts = line.split(' ');\n-            srcStart = Number(parseRange(parts[1]).start);\n-            dstStart = Number(parseRange(parts[2]).start);\n-            srcLines = new Array();\n-            dstLines = new Array();\n-        } else if (line.startsWith(' ') && !isBefore) {\n-            while (i < lines.length && lines[i].startsWith(' ')) {\n-                i++;\n-            }\n-            hunks.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n-            srcStart = srcStart + srcLines.length;\n-            srcLines = new Array();\n-            dstStart = dstStart + dstLines.length;\n-            dstLines = new Array();\n-        } else if (line.startsWith(' ') && isBefore) {\n-            srcStart++;\n-            dstStart++;\n-        } else if (line.startsWith('-')) {\n-            isBefore = false;\n-            srcLines.push(line);\n-\n-        } else if (line.startsWith('+')) {\n-            isBefore = false;\n-            dstLines.push(line);\n-        } else if (line.startsWith(\"\\\\ No newline at end of file\")) {\n-            continue;\n-            } else {\n-            throw \"Unexpected content on line \" + i + \": '\" + line + \"'\";\n-        }\n-    }\n-\n-    \/\/ The last hunk did not have context after\n-    if (srcLines.length > 0 || dstLines.length > 0) {\n-        hunks.push(new Hunk(srcStart, srcLines, dstStart, dstLines));\n-    }\n-\n-    return hunks;\n-}\n-\n-function reverse(hunks) {\n-    const reversed = new Array();\n-    for (let hunk of hunks) {\n-        var srcLines = hunk.dst.lines.map(l => '-' + l.substring(1));\n-        var dstLines = hunk.src.lines.map(l => '+' + l.substring(1));\n-        reversed.push(new Hunk(hunk.dst.start, hunk.dst.lines, hunk.src.start, hunk.src.lines));\n-    }\n-    return reversed;\n-}\n-\n-function apply(hunks, lines) {\n-    const newLines = new Array();\n-\n-    let last = 1;\n-    for (let i = 0; i < hunks.length; i++) {\n-        const hunk = hunks[i];\n-        for (let j = last; j < hunk.src.start; j++) {\n-            newLines.push(lines[j - 1]);\n-        }\n-        for (let line of hunk.dst.lines) {\n-            newLines.push(line.substring(1));\n-        }\n-        last = hunk.src.start + hunk.src.lines.length;\n-    }\n-\n-    for (let i = last; i <= lines.length; i++) {\n-        newLines.push(lines[i - 1]);\n-    }\n-\n-    return newLines;\n-}\n-\n-function renderFromFragment(fragment) {\n-    if (fragment === \"\") {\n-        state.view = \"index\";\n-    } else {\n-        const fragmentParts = fragment.split(\"-\");\n-        state.view = fragmentParts[0].substring(1);\n-        state.index = Number(fragmentParts[1]);\n-    }\n-    render(state);\n-}\n-\n-async function fetchMetadata(repo, prId, range) {\n-    const raw = \"https:\/\/raw.githubusercontent.com\/openjdk\/webrevs\";\n-    const ref = \"master\";\n-    return fetch(raw + \"\/\" + ref + \"\/\" + repo + \"\/\" + prId + \"\/\" + range + \"\/metadata.json\")\n-            .then(r => r.json())\n-            .then(o => {\n-                o.number = prId;\n-                return o;\n-            });\n-}\n-\n-async function fetchComparison(repo, prId, range, metadataPromise) {\n-    const raw = \"https:\/\/raw.githubusercontent.com\/openjdk\/webrevs\";\n-    const ref = \"master\";\n-    return fetch(raw + \"\/\" + ref + \"\/\" + repo + \"\/\" + prId + \"\/\" + range + \"\/comparison.json\")\n-            .then(r => r.ok ?\n-                r :\n-                metadataPromise.then(m => fetch(\"https:\/\/api.github.com\/repos\/\" + m.base.repo.full_name + \"\/compare\/\" +\n-                                                m.base.sha + \"...\" + m.head.sha)))\n-\n-            .then(r => r.json());\n-}\n-\n-async function fetchCommits(repo, prId, range) {\n-    \/\/ TODO: implement API fallback\n-    const raw = \"https:\/\/raw.githubusercontent.com\/openjdk\/webrevs\";\n-    const ref = \"master\";\n-    return fetch(raw + \"\/\" + ref + \"\/\" + repo + \"\/\" + prId + \"\/\" + range + \"\/commits.json\").then(r => r.json());\n-}\n-\n-function fetchFileContent(state) {\n-    const reverseHunks = reverse(hunks(state));\n-    const headContent = fetchFileAtHead(state);\n-    const baseContent = headContent.then(lines => apply(reverseHunks, lines));\n-    return {\n-        \"base\": baseContent,\n-        \"head\": headContent\n-    };\n-}\n-\n-function fetchFileAtHead(state) {\n-    const index = state.index;\n-    const file = state.comparison.files[index];\n-    if (file.status === \"deleted\") {\n-        return;\n-    }\n-\n-    const raw_url = \"https:\/\/raw.githubusercontent.com\";\n-    const sha = state.metadata.head.sha;\n-    const full_name = state.metadata.head.repo.full_name;\n-    const url = raw_url + \"\/\" + full_name + \"\/\" + sha + \"\/\" + file.filename;\n-    return fetch(url).then(r => r.text()).then(text => text.split('\\n'));\n-}\n-\n-async function init() {\n-    const params = new URLSearchParams(window.location.search);\n-    const range = params.get(\"range\");\n-    const prId = params.get(\"pr\");\n-    const repo = params.get(\"repo\");\n-\n-    document.title = \"webrev - \" + repo + \"\/\" + prId + \"\/\" + range;\n-\n-    const metadata = fetchMetadata(repo, prId, range);\n-    const comparison = fetchComparison(repo, prId, range, metadata);\n-    const commits = fetchCommits(repo, prId, range);\n-\n-    state.metadata = await metadata;\n-    state.comparison = await comparison;\n-    state.commits = await commits;\n-\n-    const files = state.comparison.files;\n-    const raw_url = \"https:\/\/raw.githubusercontent.com\";\n-\n-    state.head.content = new Array(files.length);\n-    state.head.content.fill(null);\n-    state.base.content = new Array(files.length);\n-    state.base.content.fill(null);\n-\n-    state.cache.cdiffs = new Array(files.length);\n-    state.cache.cdiffs.fill(null);\n-\n-    state.cache.udiffs = new Array(files.length);\n-    state.cache.udiffs.fill(null);\n-\n-    state.cache.sdiffs = new Array(files.length);\n-    state.cache.sdiffs.fill(null);\n-\n-    state.cache.frames = new Array(files.length);\n-    state.cache.frames.fill(null);\n-\n-    state.cache.old = new Array(files.length);\n-    state.cache.old.fill(null);\n-\n-    state.cache[\"new\"] = new Array(files.length);\n-    state.cache[\"new\"].fill(null);\n-\n-    state.cache.patch = new Array(files.length);\n-    state.cache.patch.fill(null);\n-\n-    \/\/ Pre-fetch base and head content for up to 25 files\n-    for (let i = 0; i < Math.min(files.length, 25); i++) {\n-        state.index = i;\n-        const content = fetchFileContent(state);\n-        state.head.content[i] = content.head;\n-        state.base.content[i] = content.base;\n-    }\n-    state.index = -1;\n-}\n-\n-const setup = init();\n-window.onload = async function(e) {\n-    await setup;\n-    log(\"onload: fragment: \" + window.location.hash);\n-    renderFromFragment(window.location.hash);\n-}\n-window.onpopstate = async function (e) {\n-    await setup;\n-    log(\"onpopstate: fragment: \" + window.location.hash);\n-    renderFromFragment(window.location.hash);\n-}\n","filename":"webrev.js","additions":0,"deletions":1527,"binary":false,"changes":1527,"status":"deleted"}]}