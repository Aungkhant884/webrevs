{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.jol.util.ClassUtils;\n@@ -33,1 +34,0 @@\n-import java.io.EOFException;\n@@ -36,1 +36,0 @@\n-import java.io.FileNotFoundException;\n@@ -144,1 +143,1 @@\n-                    classNames.put(id, strings.get(nameID));\n+                    classNames.put(id, ClassUtils.binaryToHuman(strings.get(nameID)));\n@@ -239,1 +238,1 @@\n-        read_ID(); \/\/ type class\n+        long klassId = read_ID(); \/\/ array class\n@@ -242,2 +241,5 @@\n-        \/\/ assume Object, we don't care about the exact types here\n-        classCounts.add(new ClassData(\"Object[]\", \"Object\", elements));\n+        String name = classNames.get(klassId);\n+\n+        \/\/ Assume Object as component type, the name of the actual class\n+        \/\/ is what we want for the printouts.\n+        classCounts.add(new ClassData(name, \"Object\", elements));\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/heap\/HeapDumpReader.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -100,0 +100,50 @@\n+\n+    public static String binaryToHuman(String name) {\n+        if (name == null) {\n+            return \"<null>\";\n+        }\n+\n+        int braces = 0;\n+        for (int c = 0; c < name.length(); c++) {\n+            if (name.charAt(c) == '[') {\n+                braces++;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        if (braces > 0) {\n+            name = name.substring(braces);\n+        }\n+\n+        switch (name) {\n+            case \"Z\": name = \"boolean\"; break;\n+            case \"B\": name = \"byte\";    break;\n+            case \"C\": name = \"char\";    break;\n+            case \"S\": name = \"short\";   break;\n+            case \"I\": name = \"int\";     break;\n+            case \"F\": name = \"float\";   break;\n+            case \"J\": name = \"long\";    break;\n+            case \"D\": name = \"double\";  break;\n+            case \"\":  name = \"<error>\"; braces = 0; break;\n+            default: {\n+                if (name.charAt(name.length() - 1) == ';') {\n+                    \/\/ Object arrays, cut out the leading \"L\" and the trailing \";\"\n+                    name = name.substring(1, name.length() - 1);\n+                }\n+                name = name.replace('\/', '.');\n+                break;\n+            }\n+        }\n+\n+        if (braces > 0) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(name);\n+            for (int b = 0; b < braces; b++) {\n+                sb.append(\"[]\");\n+            }\n+            return sb.toString();\n+        } else {\n+            return name;\n+        }\n+    }\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/util\/ClassUtils.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jol.util;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ClassUtilsTest {\n+\n+    @Test\n+    public void testSingle() {\n+        Assert.assertEquals(\"<null>\",        ClassUtils.binaryToHuman(null));\n+\n+        Assert.assertEquals(\"<error>\",       ClassUtils.binaryToHuman(\"\"));\n+        Assert.assertEquals(\"<error>\",       ClassUtils.binaryToHuman(\"[\"));\n+        Assert.assertEquals(\"<error>\",       ClassUtils.binaryToHuman(\"[[\"));\n+        Assert.assertEquals(\"<error>\",       ClassUtils.binaryToHuman(\"[[[\"));\n+\n+        Assert.assertEquals(\"boolean\",       ClassUtils.binaryToHuman(\"Z\"));\n+        Assert.assertEquals(\"boolean[]\",     ClassUtils.binaryToHuman(\"[Z\"));\n+        Assert.assertEquals(\"boolean[][]\",   ClassUtils.binaryToHuman(\"[[Z\"));\n+        Assert.assertEquals(\"boolean[][][]\", ClassUtils.binaryToHuman(\"[[[Z\"));\n+\n+        Assert.assertEquals(\"byte\",          ClassUtils.binaryToHuman(\"B\"));\n+        Assert.assertEquals(\"byte[]\",        ClassUtils.binaryToHuman(\"[B\"));\n+        Assert.assertEquals(\"byte[][]\",      ClassUtils.binaryToHuman(\"[[B\"));\n+        Assert.assertEquals(\"byte[][][]\",    ClassUtils.binaryToHuman(\"[[[B\"));\n+\n+        Assert.assertEquals(\"char\",          ClassUtils.binaryToHuman(\"C\"));\n+        Assert.assertEquals(\"char[]\",        ClassUtils.binaryToHuman(\"[C\"));\n+        Assert.assertEquals(\"char[][]\",      ClassUtils.binaryToHuman(\"[[C\"));\n+        Assert.assertEquals(\"char[][][]\",    ClassUtils.binaryToHuman(\"[[[C\"));\n+\n+        Assert.assertEquals(\"short\",         ClassUtils.binaryToHuman(\"S\"));\n+        Assert.assertEquals(\"short[]\",       ClassUtils.binaryToHuman(\"[S\"));\n+        Assert.assertEquals(\"short[][]\",     ClassUtils.binaryToHuman(\"[[S\"));\n+        Assert.assertEquals(\"short[][][]\",   ClassUtils.binaryToHuman(\"[[[S\"));\n+\n+        Assert.assertEquals(\"int\",           ClassUtils.binaryToHuman(\"I\"));\n+        Assert.assertEquals(\"int[]\",         ClassUtils.binaryToHuman(\"[I\"));\n+        Assert.assertEquals(\"int[][]\",       ClassUtils.binaryToHuman(\"[[I\"));\n+        Assert.assertEquals(\"int[][][]\",     ClassUtils.binaryToHuman(\"[[[I\"));\n+\n+        Assert.assertEquals(\"float\",         ClassUtils.binaryToHuman(\"F\"));\n+        Assert.assertEquals(\"float[]\",       ClassUtils.binaryToHuman(\"[F\"));\n+        Assert.assertEquals(\"float[][]\",     ClassUtils.binaryToHuman(\"[[F\"));\n+        Assert.assertEquals(\"float[][][]\",   ClassUtils.binaryToHuman(\"[[[F\"));\n+\n+        Assert.assertEquals(\"long\",          ClassUtils.binaryToHuman(\"J\"));\n+        Assert.assertEquals(\"long[]\",        ClassUtils.binaryToHuman(\"[J\"));\n+        Assert.assertEquals(\"long[][]\",      ClassUtils.binaryToHuman(\"[[J\"));\n+        Assert.assertEquals(\"long[][][]\",    ClassUtils.binaryToHuman(\"[[[J\"));\n+\n+        Assert.assertEquals(\"double\",        ClassUtils.binaryToHuman(\"D\"));\n+        Assert.assertEquals(\"double[]\",      ClassUtils.binaryToHuman(\"[D\"));\n+        Assert.assertEquals(\"double[][]\",    ClassUtils.binaryToHuman(\"[[D\"));\n+        Assert.assertEquals(\"double[][][]\",  ClassUtils.binaryToHuman(\"[[[D\"));\n+\n+        Assert.assertEquals(\"java.lang.Object\",       ClassUtils.binaryToHuman(\"java\/lang\/Object\"));\n+        Assert.assertEquals(\"java.lang.Object[]\",     ClassUtils.binaryToHuman(\"[Ljava\/lang\/Object;\"));\n+        Assert.assertEquals(\"java.lang.Object[][]\",   ClassUtils.binaryToHuman(\"[[Ljava\/lang\/Object;\"));\n+        Assert.assertEquals(\"java.lang.Object[][][]\", ClassUtils.binaryToHuman(\"[[[Ljava\/lang\/Object;\"));\n+\n+        Assert.assertEquals(\"java.util.HashMap$Entry\",       ClassUtils.binaryToHuman(\"java\/util\/HashMap$Entry\"));\n+        Assert.assertEquals(\"java.util.HashMap$Entry[]\",     ClassUtils.binaryToHuman(\"[Ljava\/util\/HashMap$Entry;\"));\n+        Assert.assertEquals(\"java.util.HashMap$Entry[][]\",   ClassUtils.binaryToHuman(\"[[Ljava\/util\/HashMap$Entry;\"));\n+        Assert.assertEquals(\"java.util.HashMap$Entry[][][]\", ClassUtils.binaryToHuman(\"[[[Ljava\/util\/HashMap$Entry;\"));\n+    }\n+\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/util\/ClassUtilsTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}