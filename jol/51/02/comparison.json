{"files":[{"patch":"@@ -104,1 +104,1 @@\n-            return new ClassData(o, klass.getName(), klass.getComponentType().getName(), arrayLength(o));\n+            return new ClassData(o, ClassUtils.jvmName(klass), ClassUtils.jvmName(klass.getComponentType()), arrayLength(o));\n@@ -107,1 +107,1 @@\n-        ClassData cd = new ClassData(o, klass.getName());\n+        ClassData cd = new ClassData(o, ClassUtils.jvmName(klass));\n@@ -123,1 +123,1 @@\n-            cd.addSuperClass(ClassUtils.getSafeName(klass));\n+            cd.addSuperClass(ClassUtils.humanReadableName(klass));\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassData.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.jol.util.ObjectUtils;\n@@ -30,1 +29,0 @@\n-import org.openjdk.jol.vm.VM;\n@@ -76,1 +74,1 @@\n-                ClassUtils.getSafeName(field.getDeclaringClass()),\n+                ClassUtils.humanReadableName(field.getDeclaringClass()),\n@@ -78,1 +76,1 @@\n-                ClassUtils.getSafeName(field.getType()),\n+                ClassUtils.humanReadableName(field.getType()),\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/FieldData.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jol.util.ClassUtils;\n@@ -85,1 +86,1 @@\n-            sb.append(String.format(\"%s@%xd\", root.getClass().getName(), System.identityHashCode(root)));\n+            sb.append(String.format(\"%s@%xd\", ClassUtils.humanReadableName(root.getClass()), System.identityHashCode(root)));\n@@ -341,1 +342,1 @@\n-            pw.printf(\" %9d %9d %9d   %s%n\", count, size \/ count, size, key.getName());\n+            pw.printf(\" %9d %9d %9d   %s%n\", count, size \/ count, size, ClassUtils.humanReadableName(key));\n@@ -363,1 +364,1 @@\n-            typeLen = Math.max(typeLen, r.klass().getName().length());\n+            typeLen = Math.max(typeLen, ClassUtils.humanReadableName(r.klass()).length());\n@@ -379,1 +380,1 @@\n-            pw.printf(\" %16x %10d %-\" + typeLen + \"s %-30s %s%n\", addr, size, record.klass().getName(), record.path(), ObjectUtils.safeToString(record.obj()));\n+            pw.printf(\" %16x %10d %-\" + typeLen + \"s %-30s %s%n\", addr, size, ClassUtils.humanReadableName(record.klass()), record.path(), ObjectUtils.safeToString(record.obj()));\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/GraphLayout.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -85,1 +85,5 @@\n-    public static String getSafeName(Class klass) {\n+    public static String jvmName(Class<?> klass) {\n+        return klass.getName();\n+    }\n+\n+    public static String humanReadableName(Class<?> klass) {\n@@ -87,3 +91,2 @@\n-        \/\/ getCanonicalName() returns proper string, unless it is hits the bug.\n-        \/\/ If it fails, then we will fall back to getName()\n-        \/\/   https:\/\/bugs.openjdk.java.net\/browse\/JDK-8057919\n+        \/\/ getCanonicalName() returns proper string, unless the class does not have any.\n+        \/\/ If it fails, then we will fall back to getName() and translation to human form.\n@@ -98,1 +101,1 @@\n-        return klass.getName();\n+        return binaryToHuman(klass.getName());\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/util\/ClassUtils.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jol.info;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class ClassLayoutNamesTest {\n+\n+    static class A {\n+        int[] array = new int[10];\n+        B[] bs = new B[10];\n+\n+        class B {\n+\n+        }\n+    }\n+\n+    @Test\n+    public void testPrintA() {\n+        String print = ClassLayout.parseInstance(new A()).toPrintable();\n+        Assert.assertTrue(print, print.contains(\"int[]\"));\n+        Assert.assertTrue(print, print.contains(\".A.B[]\"));\n+        Assert.assertTrue(print, print.contains(\".A.B\"));\n+    }\n+\n+    @Test\n+    public void testPrintB() {\n+        String print = ClassLayout.parseInstance(new A().new B()).toPrintable();\n+        Assert.assertTrue(print, print.contains(\".A\"));\n+    }\n+\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/info\/ClassLayoutNamesTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jol.info;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class GraphLayoutNamesTest {\n+\n+    static class A {\n+        int[] array = new int[10];\n+        B[] bs = new B[10];\n+\n+        class B {\n+\n+        }\n+    }\n+\n+    @Test\n+    public void testPrintable() {\n+        String print = GraphLayout.parseInstance(new A()).toPrintable();\n+        Assert.assertTrue(print, print.contains(\"int[]\"));\n+        Assert.assertTrue(print, print.contains(\".A.B[]\"));\n+    }\n+\n+    @Test\n+    public void testFootprint() {\n+        String print = GraphLayout.parseInstance(new A().new B()).toFootprint();\n+        Assert.assertTrue(print, print.contains(\".A.B[]\"));\n+        Assert.assertTrue(print, print.contains(\".A.B\"));\n+    }\n+\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/info\/GraphLayoutNamesTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}