{"files":[{"patch":"@@ -31,2 +31,0 @@\n-import org.openjdk.jol.info.ClassLayout;\n-import org.openjdk.jol.layouters.CurrentLayouter;\n@@ -35,1 +33,0 @@\n-import org.openjdk.jol.layouters.RawLayouter;\n@@ -39,2 +36,0 @@\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n@@ -46,1 +41,0 @@\n-import static java.lang.System.in;\n@@ -79,1 +73,1 @@\n-        Layouter layouter = new HotSpotLayouter(new CurrentDataModel());\n+        Layouter layouter = new HotSpotLayouter(new ModelVM());\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpStats.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,3 +27,1 @@\n-import org.openjdk.jol.datamodel.X86_32_DataModel;\n-import org.openjdk.jol.datamodel.X86_64_COOPS_DataModel;\n-import org.openjdk.jol.datamodel.X86_64_DataModel;\n+import org.openjdk.jol.datamodel.*;\n@@ -50,7 +48,8 @@\n-    @Override\n-    protected void runWith(Class<?> klass) throws Exception {\n-        out.println(\"***** 32-bit VM: **********************************************************\");\n-        out.println(ClassLayout.parseClass(klass, new HotSpotLayouter(new X86_32_DataModel())).toPrintable());\n-\n-        out.println(\"***** 64-bit VM: **********************************************************\");\n-        out.println(ClassLayout.parseClass(klass, new HotSpotLayouter(new X86_64_DataModel())).toPrintable());\n+    static final DataModel[] DATA_MODELS = new DataModel[]{\n+            new Model32(),\n+            new Model64(),\n+            new Model64_COOPS_CCPTR(),\n+            new Model64_COOPS_CCPTR(16),\n+            new Model64_CCPTR(),\n+            new Model64_CCPTR(16),\n+    };\n@@ -58,5 +57,6 @@\n-        out.println(\"***** 64-bit VM, compressed references enabled: ***************************\");\n-        out.println(ClassLayout.parseClass(klass, new HotSpotLayouter(new X86_64_COOPS_DataModel())).toPrintable());\n-\n-        out.println(\"***** 64-bit VM, compressed references enabled, 16-byte align: ************\");\n-        out.println(ClassLayout.parseClass(klass, new HotSpotLayouter(new X86_64_COOPS_DataModel(16))).toPrintable());\n+    @Override\n+    protected void runWith(Class<?> klass) {\n+        for (DataModel model : DATA_MODELS) {\n+            out.println(\"***** \" + model.toString());\n+            out.println(ClassLayout.parseClass(klass, new HotSpotLayouter(model)).toPrintable());\n+        }\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectEstimates.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,4 +28,1 @@\n-import org.openjdk.jol.datamodel.DataModel;\n-import org.openjdk.jol.datamodel.X86_32_DataModel;\n-import org.openjdk.jol.datamodel.X86_64_COOPS_DataModel;\n-import org.openjdk.jol.datamodel.X86_64_DataModel;\n+import org.openjdk.jol.datamodel.*;\n@@ -65,4 +62,6 @@\n-            new X86_32_DataModel(),\n-            new X86_64_DataModel(),\n-            new X86_64_COOPS_DataModel(),\n-            new X86_64_COOPS_DataModel(16)\n+            new Model32(),\n+            new Model64(),\n+            new Model64_COOPS_CCPTR(),\n+            new Model64_COOPS_CCPTR(16),\n+            new Model64_CCPTR(),\n+            new Model64_CCPTR(16),\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/StringCompress.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jol.datamodel;\n-\n-import org.openjdk.jol.vm.VM;\n-\n-\/**\n- * Current data model as detected by JVM.\n- *\n- * @author Aleksey Shipilev\n- *\/\n-public class CurrentDataModel implements DataModel {\n-    @Override\n-    public int headerSize() {\n-        return VM.current().objectHeaderSize();\n-    }\n-\n-    @Override\n-    public int arrayHeaderSize() {\n-        return VM.current().arrayHeaderSize();\n-    }\n-\n-    @Override\n-    public int sizeOf(String klass) {\n-        return (int) VM.current().sizeOfField(klass);\n-    }\n-\n-    @Override\n-    public int objectAlignment() {\n-        return VM.current().objectAlignment();\n-    }\n-}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/CurrentDataModel.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -35,0 +35,18 @@\n+    \/**\n+     * Return the mark header size.\n+     * @return mark header size in bytes.\n+     *\/\n+    int markHeaderSize();\n+\n+    \/**\n+     * Return the class header size.\n+     * @return class header size in bytes.\n+     *\/\n+    int classHeaderSize();\n+\n+    \/**\n+     * Return the array length header size.\n+     * @return array length header size in bytes.\n+     *\/\n+    int arrayLengthHeaderSize();\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/DataModel.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.datamodel;\n+\n+import java.util.Objects;\n+\n+\/**\n+ * 32 bits model.\n+ *\n+ * @author Aleksey Shipilev\n+ *\/\n+public class Model32 implements DataModel {\n+\n+    private final int align;\n+\n+    public Model32() {\n+        this(8);\n+    }\n+\n+    public Model32(int align) {\n+        this.align = align;\n+    }\n+\n+    @Override\n+    public int markHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int classHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int arrayLengthHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int headerSize() {\n+        return markHeaderSize() + classHeaderSize();\n+    }\n+\n+    @Override\n+    public int arrayHeaderSize() {\n+        return headerSize() + arrayLengthHeaderSize();\n+    }\n+\n+    @Override\n+    public int sizeOf(String klass) {\n+        if (klass.equals(\"byte\"))    return 1;\n+        if (klass.equals(\"boolean\")) return 1;\n+        if (klass.equals(\"short\"))   return 2;\n+        if (klass.equals(\"char\"))    return 2;\n+        if (klass.equals(\"int\"))     return 4;\n+        if (klass.equals(\"float\"))   return 4;\n+        if (klass.equals(\"long\"))    return 8;\n+        if (klass.equals(\"double\"))  return 8;\n+        return 4;\n+    }\n+\n+    @Override\n+    public int objectAlignment() {\n+        return align;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"32-bit model, \" + align + \"-byte aligned\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Model32 model32 = (Model32) o;\n+        return align == model32.align;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(align);\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/Model32.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.datamodel;\n+\n+import java.util.Objects;\n+\n+\/**\n+ * 64 bits model, no compressed references, no compressed class pointers.\n+ *\n+ * @author Aleksey Shipilev\n+ *\/\n+public class Model64 implements DataModel {\n+\n+    private final int align;\n+\n+    public Model64() {\n+        this(8);\n+    }\n+\n+    public Model64(int align) {\n+        this.align = align;\n+    }\n+\n+    @Override\n+    public int markHeaderSize() {\n+        return 8;\n+    }\n+\n+    @Override\n+    public int classHeaderSize() {\n+        return 8;\n+    }\n+\n+    @Override\n+    public int arrayLengthHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int headerSize() {\n+        return markHeaderSize() + classHeaderSize();\n+    }\n+\n+    @Override\n+    public int arrayHeaderSize() {\n+        return headerSize() + arrayLengthHeaderSize();\n+    }\n+\n+    @Override\n+    public int sizeOf(String klass) {\n+        if (klass.equals(\"byte\"))    return 1;\n+        if (klass.equals(\"boolean\")) return 1;\n+        if (klass.equals(\"short\"))   return 2;\n+        if (klass.equals(\"char\"))    return 2;\n+        if (klass.equals(\"int\"))     return 4;\n+        if (klass.equals(\"float\"))   return 4;\n+        if (klass.equals(\"long\"))    return 8;\n+        if (klass.equals(\"double\"))  return 8;\n+        return 8;\n+    }\n+\n+    @Override\n+    public int objectAlignment() {\n+        return align;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"64-bit model, \" + align + \"-byte aligned\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Model64 model64 = (Model64) o;\n+        return align == model64.align;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(align);\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/Model64.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.datamodel;\n+\n+\/**\n+ * 64 bits, no compressed references, but have compressed class pointers.\n+ *\n+ * @author Aleksey Shipilev\n+ *\/\n+public class Model64_CCPTR implements DataModel {\n+\n+    private final int align;\n+\n+    public Model64_CCPTR() {\n+        this(8);\n+    }\n+\n+    public Model64_CCPTR(int align) {\n+        this.align = align;\n+    }\n+\n+    @Override\n+    public int markHeaderSize() {\n+        return 8;\n+    }\n+\n+    @Override\n+    public int classHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int arrayLengthHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int headerSize() {\n+        return markHeaderSize() + classHeaderSize();\n+    }\n+\n+    @Override\n+    public int arrayHeaderSize() {\n+        return headerSize() + arrayLengthHeaderSize();\n+    }\n+\n+    @Override\n+    public int sizeOf(String klass) {\n+        if (klass.equals(\"byte\"))    return 1;\n+        if (klass.equals(\"boolean\")) return 1;\n+        if (klass.equals(\"short\"))   return 2;\n+        if (klass.equals(\"char\"))    return 2;\n+        if (klass.equals(\"int\"))     return 4;\n+        if (klass.equals(\"float\"))   return 4;\n+        if (klass.equals(\"long\"))    return 8;\n+        if (klass.equals(\"double\"))  return 8;\n+        return 8;\n+    }\n+\n+    @Override\n+    public int objectAlignment() {\n+        return align;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"64-bit model, compressed class pointers, \" + align + \"-byte aligned\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Model64_CCPTR that = (Model64_CCPTR) o;\n+        return align == that.align;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return align;\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/Model64_CCPTR.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.datamodel;\n+\n+\/**\n+ * 64 bits, compressed references, compressed class pointers.\n+ *\n+ * @author Aleksey Shipilev\n+ *\/\n+public class Model64_COOPS_CCPTR implements DataModel {\n+\n+    private final int align;\n+\n+    public Model64_COOPS_CCPTR() {\n+        this(8);\n+    }\n+\n+    public Model64_COOPS_CCPTR(int align) {\n+        this.align = align;\n+    }\n+\n+\n+    @Override\n+    public int markHeaderSize() {\n+        return 8;\n+    }\n+\n+    @Override\n+    public int classHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int arrayLengthHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int headerSize() {\n+        return markHeaderSize() + classHeaderSize();\n+    }\n+\n+    @Override\n+    public int arrayHeaderSize() {\n+        return headerSize() + arrayLengthHeaderSize();\n+    }\n+\n+    @Override\n+    public int sizeOf(String klass) {\n+        if (klass.equals(\"byte\"))    return 1;\n+        if (klass.equals(\"boolean\")) return 1;\n+        if (klass.equals(\"short\"))   return 2;\n+        if (klass.equals(\"char\"))    return 2;\n+        if (klass.equals(\"int\"))     return 4;\n+        if (klass.equals(\"float\"))   return 4;\n+        if (klass.equals(\"long\"))    return 8;\n+        if (klass.equals(\"double\"))  return 8;\n+        return 4;\n+    }\n+\n+    @Override\n+    public int objectAlignment() {\n+        return align;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"64-bit model, compressed references, compressed class pointers, \" + align + \"-byte aligned\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Model64_COOPS_CCPTR that = (Model64_COOPS_CCPTR) o;\n+        return align == that.align;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return align;\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/Model64_COOPS_CCPTR.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.datamodel;\n+\n+import org.openjdk.jol.vm.VM;\n+\n+\/**\n+ * Current data model as detected by JVM.\n+ *\n+ * @author Aleksey Shipilev\n+ *\/\n+public class ModelVM implements DataModel {\n+\n+    @Override\n+    public int markHeaderSize() {\n+        return VM.current().addressSize();\n+    }\n+\n+    @Override\n+    public int classHeaderSize() {\n+        return VM.current().classPointerSize();\n+    }\n+\n+    @Override\n+    public int arrayLengthHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int headerSize() {\n+        return markHeaderSize() + classHeaderSize();\n+    }\n+\n+    @Override\n+    public int arrayHeaderSize() {\n+        return headerSize() + arrayLengthHeaderSize();\n+    }\n+\n+    @Override\n+    public int sizeOf(String klass) {\n+        return (int) VM.current().sizeOfField(klass);\n+    }\n+\n+    @Override\n+    public int objectAlignment() {\n+        return VM.current().objectAlignment();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Current VM\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 0;\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/ModelVM.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jol.datamodel;\n-\n-\/**\n- * x86 data model, 32 bits.\n- *\n- * @author Aleksey Shipilev\n- *\/\n-public class X86_32_DataModel implements DataModel {\n-\n-    private final int align;\n-\n-    public X86_32_DataModel() {\n-        this(8);\n-    }\n-\n-    public X86_32_DataModel(int align) {\n-        this.align = align;\n-    }\n-\n-    @Override\n-    public int headerSize() {\n-        \/\/ 4 byte mark + 4 byte class\n-        return 8;\n-    }\n-\n-    @Override\n-    public int arrayHeaderSize() {\n-        return headerSize() + 4;\n-    }\n-\n-    @Override\n-    public int sizeOf(String klass) {\n-        if (klass.equals(\"byte\"))    return 1;\n-        if (klass.equals(\"boolean\")) return 1;\n-        if (klass.equals(\"short\"))   return 2;\n-        if (klass.equals(\"char\"))    return 2;\n-        if (klass.equals(\"int\"))     return 4;\n-        if (klass.equals(\"float\"))   return 4;\n-        if (klass.equals(\"long\"))    return 8;\n-        if (klass.equals(\"double\"))  return 8;\n-        return 4;\n-    }\n-\n-    @Override\n-    public int objectAlignment() {\n-        return align;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"X32 model, \" + align + \"-byte aligned\";\n-    }\n-}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/X86_32_DataModel.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jol.datamodel;\n-\n-\/**\n- * x86 data model, 64 bits, compressed references enabled.\n- *\n- * @author Aleksey Shipilev\n- *\/\n-public class X86_64_COOPS_DataModel implements DataModel {\n-\n-    private final int align;\n-\n-    public X86_64_COOPS_DataModel() {\n-        this(8);\n-    }\n-\n-    public X86_64_COOPS_DataModel(int align) {\n-        this.align = align;\n-    }\n-\n-    @Override\n-    public int headerSize() {\n-        \/\/ 8 byte mark + 4 byte class\n-        return 12;\n-    }\n-\n-    @Override\n-    public int arrayHeaderSize() {\n-        return headerSize() + 4;\n-    }\n-\n-    @Override\n-    public int sizeOf(String klass) {\n-        if (klass.equals(\"byte\"))    return 1;\n-        if (klass.equals(\"boolean\")) return 1;\n-        if (klass.equals(\"short\"))   return 2;\n-        if (klass.equals(\"char\"))    return 2;\n-        if (klass.equals(\"int\"))     return 4;\n-        if (klass.equals(\"float\"))   return 4;\n-        if (klass.equals(\"long\"))    return 8;\n-        if (klass.equals(\"double\"))  return 8;\n-        return 4;\n-    }\n-\n-    @Override\n-    public int objectAlignment() {\n-        return align;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"X64 model (compressed oops), \" + align + \"-byte aligned\";\n-    }\n-\n-}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/X86_64_COOPS_DataModel.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jol.datamodel;\n-\n-\/**\n- * x86 data model, 64 bits.\n- *\n- * @author Aleksey Shipilev\n- *\/\n-public class X86_64_DataModel implements DataModel {\n-\n-    private final int align;\n-\n-    public X86_64_DataModel() {\n-        this(8);\n-    }\n-\n-    public X86_64_DataModel(int align) {\n-        this.align = align;\n-    }\n-\n-    @Override\n-    public int headerSize() {\n-        \/\/ 8 byte mark + 8 byte class\n-        return 16;\n-    }\n-\n-    @Override\n-    public int arrayHeaderSize() {\n-        return headerSize() + 4;\n-    }\n-\n-    @Override\n-    public int sizeOf(String klass) {\n-        if (klass.equals(\"byte\"))    return 1;\n-        if (klass.equals(\"boolean\")) return 1;\n-        if (klass.equals(\"short\"))   return 2;\n-        if (klass.equals(\"char\"))    return 2;\n-        if (klass.equals(\"int\"))     return 4;\n-        if (klass.equals(\"float\"))   return 4;\n-        if (klass.equals(\"long\"))    return 8;\n-        if (klass.equals(\"double\"))  return 8;\n-        return 8;\n-    }\n-\n-    @Override\n-    public int objectAlignment() {\n-        return align;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"X64 model, \" + align + \"-byte aligned\";\n-    }\n-\n-}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/X86_64_DataModel.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.jol.datamodel.DataModel;\n@@ -37,0 +38,1 @@\n+import java.util.Objects;\n@@ -105,1 +107,1 @@\n-    private final int headerSize;\n+    private final DataModel model;\n@@ -111,1 +113,1 @@\n-    private ClassLayout(ClassData classData, SortedSet<FieldLayout> fields, int headerSize, long instanceSize, int lossesInternal, int lossesExternal, int lossesTotal) {\n+    private ClassLayout(ClassData classData, SortedSet<FieldLayout> fields, DataModel model, long instanceSize, int lossesInternal, int lossesExternal, int lossesTotal) {\n@@ -114,1 +116,1 @@\n-        this.headerSize = headerSize;\n+        this.model = model;\n@@ -126,1 +128,1 @@\n-     * @param headerSize   header size\n+     * @param model        data model to use\n@@ -131,1 +133,1 @@\n-    public static ClassLayout create(ClassData classData, SortedSet<FieldLayout> fields, int headerSize, long instanceSize, boolean check) {\n+    public static ClassLayout create(ClassData classData, SortedSet<FieldLayout> fields, DataModel model, long instanceSize, boolean check) {\n@@ -136,1 +138,1 @@\n-        long next = headerSize;\n+        long next = model.headerSize();\n@@ -146,1 +148,1 @@\n-        return new ClassLayout(classData, fields, headerSize, instanceSize, (int) internal, (int) external, (int) total);\n+        return new ClassLayout(classData, fields, model, instanceSize, (int) internal, (int) external, (int) total);\n@@ -189,1 +191,1 @@\n-        return headerSize;\n+        return model.headerSize();\n@@ -292,0 +294,12 @@\n+        String markStr = \"N\/A\";\n+        String classStr = \"N\/A\";\n+        String arrLenStr = \"N\/A\";\n+\n+        int markSize = model.markHeaderSize();\n+        int classSize = model.classHeaderSize();\n+        int arrSize = model.arrayLengthHeaderSize();\n+\n+        int markOffset = 0;\n+        int classOffset = markOffset + markSize;\n+        int arrOffset = classOffset + classSize;\n+\n@@ -294,0 +308,7 @@\n+            if (markSize == 8) {\n+                long mark = vm.getLong(instance, markOffset);\n+                markStr = toHex(mark) + \" \" + parseMarkWord(mark);\n+            } else if (markSize == 4) {\n+                int mark = vm.getInt(instance, markOffset);\n+                markStr = toHex(mark) + \" \" + parseMarkWord(mark);\n+            }\n@@ -295,31 +316,4 @@\n-            if (vm.addressSize() == 4) {\n-                \/\/ 32-bit VM\n-                int mark  = vm.getInt(instance, 0);\n-                pw.printf(format, 0, 4, \"\", MSG_MARK_WORD, toHex(mark) + \" \" + parseMarkWord(mark));\n-                int klass = vm.getInt(instance, 4);\n-                pw.printf(format, 4, 4, \"\", MSG_CLASS_WORD, toHex(klass));\n-                if (classData.isArray()) {\n-                    int len = vm.getInt(instance, 8);\n-                    pw.printf(format, 8, 4, \"\", \"(array length)\", len);\n-                }\n-            } else if (vm.addressSize() == 8) {\n-                \/\/ 64-bit VM\n-                long mark = vm.getLong(instance, 0);\n-                pw.printf(format, 0, 8, \"\", MSG_MARK_WORD, toHex(mark) + \" \" + parseMarkWord(mark));\n-                if (vm.classPointerSize() == 8) {\n-                    long klass = vm.getLong(instance, 8);\n-                    pw.printf(format, 8, 8, \"klass\", MSG_CLASS_WORD, toHex(klass));\n-                } else {\n-                    int klass = vm.getInt(instance, 8);\n-                    pw.printf(format, 8, 4, \"\", MSG_CLASS_WORD, toHex(klass));\n-                }\n-                if (classData.isArray()) {\n-                    int off = 8 + vm.classPointerSize();\n-                    int len = vm.getInt(instance, off);\n-                    pw.printf(format, off, 4, \"\", MSG_ARR_LEN, len);\n-                }\n-            } else {\n-                for (long off = 0; off < headerSize(); off += 4) {\n-                    int word = vm.getInt(instance, off);\n-                    pw.printf(format, off, 4, \"\", MSG_OBJ_HEADER, toHex(word));\n-                }\n+            if (classSize == 8) {\n+                classStr = toHex(vm.getLong(instance, classOffset));\n+            } else if (classSize == 4) {\n+                classStr = toHex(vm.getInt(instance, classOffset));\n@@ -327,2 +321,10 @@\n-        } else {\n-            pw.printf(format, 0, headerSize(), \"\", MSG_OBJ_HEADER, \"N\/A\");\n+\n+            if (classData.isArray()) {\n+                arrLenStr = Integer.toString(vm.getInt(instance, arrOffset));\n+            }\n+        }\n+\n+        pw.printf(format, markOffset, markSize, \"\", MSG_MARK_WORD, markStr);\n+        pw.printf(format, classOffset, classSize, \"\", MSG_CLASS_WORD, classStr);\n+        if (classData.isArray()) {\n+            pw.printf(format, arrOffset, arrSize, \"\", MSG_ARR_LEN, arrLenStr);\n@@ -462,1 +464,0 @@\n-\n@@ -464,5 +465,2 @@\n-\n-        if (headerSize != that.headerSize) return false;\n-        if (size != that.size) return false;\n-        return fields.equals(that.fields);\n-\n+        return fields.equals(that.fields) &&\n+                model.equals(that.model);\n@@ -473,4 +471,1 @@\n-        int result = fields.hashCode();\n-        result = 31 * result + headerSize;\n-        result = 31 * result + (int) (size ^ (size >>> 32));\n-        return result;\n+        return Objects.hash(fields, model);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassLayout.java","additions":46,"deletions":51,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import org.openjdk.jol.datamodel.ModelVM;\n+import org.openjdk.jol.datamodel.DataModel;\n@@ -46,0 +48,2 @@\n+    static final DataModel CURRENT = new ModelVM();\n+\n@@ -59,1 +63,1 @@\n-            return ClassLayout.create(data, result, vm.arrayHeaderSize(), instanceSize, false);\n+            return ClassLayout.create(data, result, CURRENT, instanceSize, false);\n@@ -78,1 +82,1 @@\n-        return ClassLayout.create(data, result, vm.objectHeaderSize(), instanceSize, true);\n+        return ClassLayout.create(data, result, CURRENT, instanceSize, true);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/CurrentLayouter.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            return ClassLayout.create(cd, result, model.arrayHeaderSize(), instanceSize, false);\n+            return ClassLayout.create(cd, result, model, instanceSize, false);\n@@ -352,1 +352,1 @@\n-        return ClassLayout.create(cd, result, model.headerSize(), instanceSize, true);\n+        return ClassLayout.create(cd, result, model, instanceSize, true);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/HotSpotLayouter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            return ClassLayout.create(data, result, model.arrayHeaderSize(), instanceSize, false);\n+            return ClassLayout.create(data, result, model, instanceSize, false);\n@@ -71,1 +71,1 @@\n-            return ClassLayout.create(data, result, model.headerSize(), model.headerSize(), false);\n+            return ClassLayout.create(data, result, model, model.headerSize(), false);\n@@ -74,1 +74,1 @@\n-            return ClassLayout.create(data, result, model.headerSize(), f.offset() + f.size(), false);\n+            return ClassLayout.create(data, result, model, f.offset() + f.size(), false);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/RawLayouter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-import org.openjdk.jol.datamodel.CurrentDataModel;\n+import org.openjdk.jol.datamodel.ModelVM;\n@@ -15,1 +15,1 @@\n-    private static final DataModel[] MODELS = { new CurrentDataModel() };\n+    private static final DataModel[] MODELS = { new ModelVM() };\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/layouters\/HotspotLayouterRealTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-import org.openjdk.jol.datamodel.CurrentDataModel;\n+import org.openjdk.jol.datamodel.ModelVM;\n@@ -17,4 +17,5 @@\n-        new CurrentDataModel(),\n-        new X86_32_DataModel(),\n-        new X86_64_COOPS_DataModel(),\n-        new X86_64_DataModel()\n+            new ModelVM(),\n+            new Model32(),\n+            new Model64(),\n+            new Model64_CCPTR(),\n+            new Model64_COOPS_CCPTR(),\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/layouters\/LayouterInvariantsTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,3 +33,1 @@\n-import org.openjdk.jol.datamodel.X86_32_DataModel;\n-import org.openjdk.jol.datamodel.X86_64_COOPS_DataModel;\n-import org.openjdk.jol.datamodel.X86_64_DataModel;\n+import org.openjdk.jol.datamodel.*;\n@@ -55,2 +53,8 @@\n-    public static void main(String[] args) throws Exception {\n-        Layouter l;\n+    static final DataModel[] MODELS = new DataModel[]{\n+            new Model32(),\n+            new Model64(),\n+            new Model64_COOPS_CCPTR(),\n+            new Model64_COOPS_CCPTR(16),\n+            new Model64_CCPTR(),\n+            new Model64_CCPTR(16),\n+    };\n@@ -58,3 +62,6 @@\n-        l = new CurrentLayouter();\n-        System.out.println(\"***** \" + l);\n-        System.out.println(ClassLayout.parseClass(A.class, l).toPrintable());\n+    public static void main(String[] args) {\n+        {\n+            Layouter l = new CurrentLayouter();\n+            System.out.println(\"***** \" + l);\n+            System.out.println(ClassLayout.parseClass(A.class, l).toPrintable());\n+        }\n@@ -62,11 +69,5 @@\n-        l = new HotSpotLayouter(new X86_32_DataModel());\n-        System.out.println(\"***** \" + l);\n-        System.out.println(ClassLayout.parseClass(A.class, l).toPrintable());\n-\n-        l = new HotSpotLayouter(new X86_64_DataModel());\n-        System.out.println(\"***** \" + l);\n-        System.out.println(ClassLayout.parseClass(A.class, l).toPrintable());\n-\n-        l = new HotSpotLayouter(new X86_64_COOPS_DataModel());\n-        System.out.println(\"***** \" + l);\n-        System.out.println(ClassLayout.parseClass(A.class, l).toPrintable());\n+        for (DataModel model : MODELS) {\n+            Layouter l = new HotSpotLayouter(model);\n+            System.out.println(\"***** \" + l);\n+            System.out.println(ClassLayout.parseClass(A.class, l).toPrintable());\n+        }\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_10_DataModels.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"}]}