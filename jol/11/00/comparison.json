{"files":[{"patch":"@@ -70,13 +70,12 @@\n-    OFFSET  SIZE                       TYPE DESCRIPTION                               VALUE\n-         0     4                            (object header)                           01 00 00 00 (1)\n-         4     4                            (object header)                           00 00 00 00 (0)\n-         8     4                            (object header)                           b8 b2 01 00 (111288)\n-        12     4              java.util.Set AbstractMap.keySet                        null\n-        16     4       java.util.Collection AbstractMap.values                        null\n-        20     4                        int HashMap.size                              0\n-        24     4                        int HashMap.modCount                          0\n-        28     4                        int HashMap.threshold                         0\n-        32     4                      float HashMap.loadFactor                        0.75\n-        36     4   java.util.HashMap.Node[] HashMap.table                             null\n-        40     4              java.util.Set HashMap.entrySet                          null\n-        44     4                            (loss due to the next object alignment)\n+    OFF  SZ                       TYPE DESCRIPTION               VALUE\n+      0   8                            (object header: mark)     0x0000000000000005 (biasable; age: 0)\n+      8   4                            (object header: class)    0x00019828\n+     12   4              java.util.Set AbstractMap.keySet        null\n+     16   4       java.util.Collection AbstractMap.values        null\n+     20   4                        int HashMap.size              0\n+     24   4                        int HashMap.modCount          0\n+     28   4                        int HashMap.threshold         0\n+     32   4                      float HashMap.loadFactor        0.75\n+     36   4   java.util.HashMap.Node[] HashMap.table             null\n+     40   4              java.util.Set HashMap.entrySet          null\n+     44   4                            (object alignment gap)\n","filename":"README.md","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -251,3 +251,0 @@\n-        String MSG_GAP = \"(alignment\/padding gap)\";\n-        String MSG_NEXT_GAP = \"(loss due to the next object alignment)\";\n-\n@@ -260,1 +257,13 @@\n-        int maxDescrLen = Math.max(MSG_GAP.length(), MSG_NEXT_GAP.length());\n+        String MSG_OBJ_HEADER = \"(object header)\";\n+        String MSG_MARK_WORD = \"(object header: mark)\";\n+        String MSG_CLASS_WORD = \"(object header: class)\";\n+        String MSG_ARR_LEN = \"(array length)\";\n+        String MSG_FIELD_GAP = \"(alignment\/padding gap)\";\n+        String MSG_OBJ_GAP = \"(object alignment gap)\";\n+\n+        int maxDescrLen = \"DESCRIPTION\".length();\n+        maxDescrLen = Math.max(maxDescrLen, MSG_OBJ_HEADER.length());\n+        maxDescrLen = Math.max(maxDescrLen, MSG_MARK_WORD.length());\n+        maxDescrLen = Math.max(maxDescrLen, MSG_CLASS_WORD.length());\n+        maxDescrLen = Math.max(maxDescrLen, MSG_FIELD_GAP.length());\n+        maxDescrLen = Math.max(maxDescrLen, MSG_OBJ_GAP.length());\n@@ -266,0 +275,3 @@\n+        String format  = \"%3d %3d %\" + maxTypeLen + \"s %-\" + maxDescrLen + \"s %s%n\";\n+        String formatS = \"%3s %3s %\" + maxTypeLen + \"s %-\" + maxDescrLen + \"s %s%n\";\n+\n@@ -278,1 +290,2 @@\n-        pw.printf(\" %6s %5s %\" + maxTypeLen + \"s %-\" + maxDescrLen + \"s %s%n\", \"OFFSET\", \"SIZE\", \"TYPE\", \"DESCRIPTION\", \"VALUE\");\n+        pw.printf(formatS, \"OFF\", \"SZ\", \"TYPE\", \"DESCRIPTION\", \"VALUE\");\n+\n@@ -282,14 +295,31 @@\n-            for (long off = 0; off < headerSize(); off += 4) {\n-                int word = vm.getInt(instance, off);\n-                pw.printf(\" %6d %5d %\" + maxTypeLen + \"s %-\" + maxDescrLen + \"s %s%n\", off, 4, \"\", \"(object header)\",\n-                                toHex((word >> 0)  & 0xFF) + \" \" +\n-                                toHex((word >> 8)  & 0xFF) + \" \" +\n-                                toHex((word >> 16) & 0xFF) + \" \" +\n-                                toHex((word >> 24) & 0xFF) + \" \" +\n-                                \"(\" +\n-                                toBinary((word >> 0)  & 0xFF) + \" \" +\n-                                toBinary((word >> 8)  & 0xFF) + \" \" +\n-                                toBinary((word >> 16) & 0xFF) + \" \" +\n-                                toBinary((word >> 24) & 0xFF) + \") \" +\n-                                \"(\" + word + \")\"\n-                );\n+            if (vm.addressSize() == 4) {\n+                \/\/ 32-bit VM\n+                int mark  = vm.getInt(instance, 0);\n+                pw.printf(format, 0, 4, \"\", MSG_MARK_WORD, toHex(mark) + \" \" + parseMarkWord(mark));\n+                int klass = vm.getInt(instance, 4);\n+                pw.printf(format, 4, 4, \"\", MSG_CLASS_WORD, toHex(klass));\n+                if (classData.isArray()) {\n+                    int len = vm.getInt(instance, 8);\n+                    pw.printf(format, 8, 4, \"\", \"(array length)\", len);\n+                }\n+            } else if (vm.addressSize() == 8) {\n+                \/\/ 64-bit VM\n+                long mark = vm.getLong(instance, 0);\n+                pw.printf(format, 0, 8, \"\", MSG_MARK_WORD, toHex(mark) + \" \" + parseMarkWord(mark));\n+                if (vm.classPointerSize() == 8) {\n+                    long klass = vm.getLong(instance, 8);\n+                    pw.printf(format, 8, 8, \"klass\", MSG_CLASS_WORD, toHex(klass));\n+                } else {\n+                    int klass = vm.getInt(instance, 8);\n+                    pw.printf(format, 8, 4, \"\", MSG_CLASS_WORD, toHex(klass));\n+                }\n+                if (classData.isArray()) {\n+                    int off = 8 + vm.classPointerSize();\n+                    int len = vm.getInt(instance, off);\n+                    pw.printf(format, off, 4, \"\", MSG_ARR_LEN, len);\n+                }\n+            } else {\n+                for (long off = 0; off < headerSize(); off += 4) {\n+                    int word = vm.getInt(instance, off);\n+                    pw.printf(format, off, 4, \"\", MSG_OBJ_HEADER, toHex(word));\n+                }\n@@ -298,1 +328,1 @@\n-            pw.printf(\" %6d %5d %\" + maxTypeLen + \"s %-\" + maxDescrLen + \"s %s%n\", 0, headerSize(), \"\", \"(object header)\", \"N\/A\");\n+            pw.printf(format, 0, headerSize(), \"\", MSG_OBJ_HEADER, \"N\/A\");\n@@ -305,1 +335,1 @@\n-                pw.printf(\" %6d %5d %\" + maxTypeLen + \"s %-\" + maxDescrLen + \"s%n\", nextFree, (f.offset() - nextFree), \"\", MSG_GAP);\n+                pw.printf(format, nextFree, (f.offset() - nextFree), \"\", MSG_FIELD_GAP, \"\");\n@@ -309,1 +339,1 @@\n-            pw.printf(\" %6d %5d %\" + maxTypeLen + \"s %-\" + maxDescrLen + \"s %s%n\",\n+            pw.printf(format,\n@@ -321,1 +351,0 @@\n-\n@@ -323,1 +352,1 @@\n-            pw.printf(\" %6d %5s %\" + maxTypeLen + \"s %s%n\", nextFree, lossesExternal, \"\", MSG_NEXT_GAP);\n+            pw.printf(format, nextFree, lossesExternal, \"\", MSG_OBJ_GAP, \"\");\n@@ -334,6 +363,8 @@\n-    \/\/ very ineffective, so what?\n-    private static String toBinary(int x) {\n-        String s = Integer.toBinaryString(x);\n-        int deficit = 8 - s.length();\n-        for (int c = 0; c < deficit; c++) {\n-            s = \"0\" + s;\n+    static final String[] ZERO_RUNS;\n+\n+    static {\n+        ZERO_RUNS = new String[16];\n+        String s = \"\";\n+        for (int c = 0; c < ZERO_RUNS.length; c++) {\n+            ZERO_RUNS[c] = s;\n+            s += \"0\";\n@@ -341,1 +372,0 @@\n-        return s;\n@@ -344,1 +374,0 @@\n-    \/\/ very ineffective, so what?\n@@ -347,3 +376,79 @@\n-        int deficit = 2 - s.length();\n-        for (int c = 0; c < deficit; c++) {\n-            s = \"0\" + s;\n+        int deficit = 8 - s.length();\n+        return \"0x\" + ZERO_RUNS[deficit] + s;\n+    }\n+\n+    private static String toHex(long x) {\n+        String s = Long.toHexString(x);\n+        int deficit = 16 - s.length();\n+        return \"0x\" + ZERO_RUNS[deficit] + s;\n+    }\n+\n+    private static String parseMarkWord(int mark) {\n+        \/\/ 32 bits:\n+        \/\/    hash:25 ------------>| age:4    biased_lock:1 lock:2 (normal object)\n+        \/\/    JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)\n+        int bits = mark & 0b11;\n+        switch (bits) {\n+            case 0b11:\n+                return \"(marked: \" + toHex(mark) + \")\";\n+            case 0b00:\n+                return \"(thin lock: \" + toHex(mark) + \")\";\n+            case 0b10:\n+                return \"(fat lock: \" + toHex(mark) + \")\";\n+            case 0b01: \/\/ other\n+                String s = \"; age: \" + ((mark >> 3) & 0xF);\n+                int tribits = mark & 0b111;\n+                switch (tribits) {\n+                    case 0b001:\n+                        int hash = mark >>> 7;\n+                        if (hash != 0) {\n+                            return \"(hash: \" + toHex(hash) + s + \")\";\n+                        } else {\n+                            return \"(non-biasable\" + s + \")\";\n+                        }\n+                    case 0b101:\n+                        int thread = mark >>> 9;\n+                        if (thread == 0) {\n+                            return \"(biasable\" + s + \")\";\n+                        } else {\n+                            return \"(biased: \" + toHex(thread) + \"; epoch: \" + ((mark >> 7) & 0x2) + s + \")\";\n+                        }\n+                }\n+            default:\n+                return \"(parse error)\";\n+        }\n+    }\n+\n+    private static String parseMarkWord(long mark) {\n+        \/\/  64 bits:\n+        \/\/  unused:25 hash:31 -->| unused_gap:1   age:4    biased_lock:1 lock:2 (normal object)\n+        \/\/  JavaThread*:54 epoch:2 unused_gap:1   age:4    biased_lock:1 lock:2 (biased object)\n+        long bits = mark & 0b11;\n+        switch ((int) bits) {\n+            case 0b11:\n+                return \"(marked: \" + toHex(mark) + \")\";\n+            case 0b00:\n+                return \"(thin lock: \" + toHex(mark) + \")\";\n+            case 0b10:\n+                return \"(fat lock: \" + toHex(mark) + \")\";\n+            case 0b01:\n+                String s = \"; age: \" + ((mark >> 3) & 0xF);\n+                int tribits = (int) (mark & 0b111);\n+                switch (tribits) {\n+                    case 0b001:\n+                        int hash = (int)(mark >>> 8);\n+                        if (hash != 0) {\n+                            return \"(hash: \" + toHex(hash) + s + \")\";\n+                        } else {\n+                            return \"(non-biasable\" + s + \")\";\n+                        }\n+                    case 0b101:\n+                        long thread = mark >>> 10;\n+                        if (thread == 0) {\n+                            return \"(biasable\" + s + \")\";\n+                        } else {\n+                            return \"(biased: \" + toHex(thread) + \"; epoch: \" + ((mark >> 8) & 0x2) + s + \")\";\n+                        }\n+                }\n+            default:\n+                return \"(parse error)\";\n@@ -351,1 +456,0 @@\n-        return s;\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassLayout.java","additions":140,"deletions":36,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-    private final int     klassOopSize;\n@@ -89,1 +88,0 @@\n-        klassOopSize = saDetails.getKlassOopSize();\n@@ -95,1 +93,1 @@\n-        compressedKlassOopsEnabled = saDetails.isCompressedKlassOopsEnabled();\n+        compressedKlassOopsEnabled = saDetails.isCompressedKlassPtrsEnabled();\n@@ -116,1 +114,0 @@\n-        klassOopSize = oopSize;\n@@ -124,1 +121,0 @@\n-            compressedKlassOopsEnabled = coops;\n@@ -127,0 +123,6 @@\n+        }\n+\n+        Boolean ccptrs = VMOptions.pollCompressedClassPointers();\n+        if (ccptrs != null) {\n+            compressedKlassOopsEnabled = ccptrs;\n+        } else {\n@@ -256,0 +258,17 @@\n+    @Override\n+    public int addressSize() {\n+        return addressSize;\n+    }\n+\n+    @Override\n+    public int classPointerSize() {\n+        switch (addressSize) {\n+            case 4:\n+                return 4;\n+            case 8:\n+                return compressedKlassOopsEnabled ? 4 : 8;\n+            default:\n+                throw new IllegalStateException(\"Unknown address size:\" + addressSize);\n+        }\n+    }\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/HotspotUnsafe.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -52,0 +52,9 @@\n+    public static Boolean pollCompressedClassPointers() {\n+        try {\n+            return Boolean.valueOf(getString(\"UseCompressedClassPointers\"));\n+        } catch (Exception exp) {\n+            \/\/ TODO: log\n+            return null;\n+        }\n+    }\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/VMOptions.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -97,0 +97,12 @@\n+    \/**\n+     * Returns native address size.\n+     * @return address size in bytes\n+     *\/\n+    int addressSize();\n+\n+    \/**\n+     * Returns class pointer size.\n+     * @return class pointer size, in bytes\n+     *\/\n+    int classPointerSize();\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/VirtualMachine.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-    private final int klassOopSize;\n-    private final boolean compressedKlassOopsEnabled;\n+    private final boolean compressedKlassPtrsEnabled;\n@@ -49,2 +48,2 @@\n-                        boolean compressedOopsEnabled, long narrowOopBase, int narrowOopShift, int klassOopSize,\n-                        boolean compressedKlassOopsEnabled, long narrowKlassBase, int narrowKlassShift) {\n+                        boolean compressedOopsEnabled, long narrowOopBase, int narrowOopShift,\n+                        boolean compressedKlassPtrsEnabled, long narrowKlassBase, int narrowKlassShift) {\n@@ -57,2 +56,1 @@\n-        this.klassOopSize = klassOopSize;\n-        this.compressedKlassOopsEnabled = compressedKlassOopsEnabled;\n+        this.compressedKlassPtrsEnabled = compressedKlassPtrsEnabled;\n@@ -87,6 +85,2 @@\n-    public int getKlassOopSize() {\n-        return klassOopSize;\n-    }\n-\n-    public boolean isCompressedKlassOopsEnabled() {\n-        return compressedKlassOopsEnabled;\n+    public boolean isCompressedKlassPtrsEnabled() {\n+        return compressedKlassPtrsEnabled;\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/sa\/UniverseData.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-            Method getKlassOopSizeMethod = null;\n-            Method isCompressedKlassOopsEnabledMethod = null;\n+            Method isCompressedKlassPtrsEnabledMethod = null;\n@@ -62,2 +61,1 @@\n-                getKlassOopSizeMethod = vmClass.getMethod(\"getKlassPtrSize\");\n-                isCompressedKlassOopsEnabledMethod = vmClass.getMethod(\"isCompressedKlassPointersEnabled\");\n+                isCompressedKlassPtrsEnabledMethod = vmClass.getMethod(\"isCompressedKlassPointersEnabled\");\n@@ -83,4 +81,2 @@\n-            int klassOopSize = getKlassOopSizeMethod != null ?\n-                    (Integer) getKlassOopSizeMethod.invoke(vm) : oopSize;\n-            boolean compressedKlassOopsEnabled = isCompressedKlassOopsEnabledMethod != null ?\n-                    (Boolean) isCompressedKlassOopsEnabledMethod.invoke(vm) : compressedOopsEnabled;\n+            boolean compressedKlassPtrsEnabled = isCompressedKlassPtrsEnabledMethod != null ?\n+                    (Boolean) isCompressedKlassPtrsEnabledMethod.invoke(vm) : compressedOopsEnabled;\n@@ -98,2 +94,1 @@\n-                                                        klassOopSize,\n-                                                        compressedKlassOopsEnabled,\n+                                                        compressedKlassPtrsEnabled,\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/sa\/UniverseTask.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"}]}