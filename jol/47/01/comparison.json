{"files":[{"patch":"@@ -37,2 +37,0 @@\n-import java.util.Collections;\n-import java.util.Comparator;\n@@ -58,0 +56,8 @@\n+    private int getVMVersion() {\n+        try {\n+            return Integer.parseInt(System.getProperty(\"java.specification.version\"));\n+        } catch (Exception e) {\n+            return 8;\n+        }\n+    }\n+\n@@ -70,0 +76,2 @@\n+        out.println();\n+\n@@ -73,1 +81,5 @@\n-        Layouter layouter = new HotSpotLayouter(new ModelVM(), 8);\n+        Layouter layouter = new HotSpotLayouter(new ModelVM(), getVMVersion());\n+        out.println();\n+        out.println(layouter);\n+        out.println();\n+\n@@ -85,0 +97,3 @@\n+        out.println(\"Printing first \" + printFirst + \" object classes by size. Use -DprintFirst=# to override.\");\n+        out.println();\n+\n@@ -94,0 +109,3 @@\n+        if (sorted.size() > printFirst) {\n+            out.printf(\" %10s %10s %10s   %s%n\", \"\", \"\", \"\", \"...\");\n+        }\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpStats.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+    public ModelVM() {\n+        \/\/ Initialize early to capture any errors here.\n+        VM.current();\n+    }\n+\n@@ -73,1 +78,4 @@\n-        return \"Current VM\";\n+        return \"Current VM: \" +\n+                (headerSize() + \"-byte object header, \") +\n+                (sizeOf(\"java.lang.Object\") + \"-byte references, \") +\n+                (objectAlignment() + \"-byte aligned\");\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/ModelVM.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"}]}