{"files":[{"patch":"@@ -312,1 +312,2 @@\n-                markStr = toHex(mark) + \" \" + parseMarkWord(mark);\n+                String decoded = (classSize > 0) ? parseMarkWord(mark) : \"(Lilliput)\";\n+                markStr = toHex(mark) + \" \" + decoded;\n@@ -315,1 +316,2 @@\n-                markStr = toHex(mark) + \" \" + parseMarkWord(mark);\n+                String decoded = (classSize > 0) ? parseMarkWord(mark) : \"(Lilliput)\";\n+                markStr = toHex(mark) + \" \" + decoded;\n@@ -330,1 +332,3 @@\n-        pw.printf(format, classOffset, classSize, \"\", MSG_CLASS_WORD, classStr);\n+        if (classSize > 0) {\n+            pw.printf(format, classOffset, classSize, \"\", MSG_CLASS_WORD, classStr);\n+        }\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassLayout.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,0 +38,4 @@\n+    public static class MyObject0 {\n+\n+    }\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/Experiments.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,0 +82,2 @@\n+    private final boolean lilliputVM;\n+\n@@ -118,0 +120,1 @@\n+        lilliputVM = guessLilliput(objectHeaderSize);\n@@ -170,0 +173,32 @@\n+\n+        lilliputVM = guessLilliput(addressSize);\n+    }\n+\n+    private boolean guessLilliput(int addressSize) {\n+        \/\/ Lilliput encodes classes in mark word, so objects of different types\n+        \/\/ would be different there. Non Lilliput VMs can have different mark words\n+        \/\/ due to different prototype headers, so we try several times, with a little\n+        \/\/ (safepointing) sleep in between.\n+        for (int t = 0; t < 100; t++) {\n+            Object o1 = new Experiments.MyObject0();\n+            Object o2 = new Experiments.MyObject1();\n+            if (addressSize == 4) {\n+                if (getInt(o1, 0) == getInt(o2, 0)) {\n+                    \/\/ Mark words are identical, definitely not Lilliput.\n+                    return false;\n+                }\n+            } else if (addressSize == 8) {\n+                if (getLong(o1, 0) == getLong(o2, 0)) {\n+                    \/\/ Mark words are identical, definitely not Lilliput.\n+                    return false;\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Unknown address size: \" + addressSize);\n+            }\n+            try {\n+                Thread.sleep(1);\n+            } catch (InterruptedException e) {\n+                \/\/ Do nothing.\n+            }\n+        }\n+        return true;\n@@ -249,0 +284,4 @@\n+        if (lilliputVM) {\n+            \/\/ Lilliput does not have a class word.\n+            return 0;\n+        }\n@@ -266,0 +305,4 @@\n+        if (lilliputVM) {\n+            out.println(\"# Lilliput VM detected (experimental).\");\n+        }\n+\n@@ -292,2 +335,15 @@\n-        out.printf(\"# %-19s: %d, %d, %d, %d, %d, %d, %d, %d, %d [bytes]%n\",\n-                \"Field sizes by type\",\n+        out.printf(\"# %-20s %4s, %4s, %4s, %4s, %4s, %4s, %4s, %4s, %4s%n\",\n+                \"\",\n+                \"ref\",\n+                \"bool\",\n+                \"byte\",\n+                \"char\",\n+                \"shrt\",\n+                \"int\",\n+                \"flt\",\n+                \"lng\",\n+                \"dbl\"\n+        );\n+\n+        out.printf(\"# %-20s %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d%n\",\n+                \"Field sizes:\",\n@@ -305,2 +361,2 @@\n-        out.printf(\"# %-19s: %d, %d, %d, %d, %d, %d, %d, %d, %d [bytes]%n\",\n-                \"Array element sizes\",\n+        out.printf(\"# %-20s %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d%n\",\n+                \"Array element sizes:\",\n@@ -318,0 +374,13 @@\n+        out.printf(\"# %-20s %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d, %4d%n\",\n+                \"Array base offsets:\",\n+                U.arrayBaseOffset(Object[].class),\n+                U.arrayBaseOffset(boolean[].class),\n+                U.arrayBaseOffset(byte[].class),\n+                U.arrayBaseOffset(char[].class),\n+                U.arrayBaseOffset(short[].class),\n+                U.arrayBaseOffset(int[].class),\n+                U.arrayBaseOffset(float[].class),\n+                U.arrayBaseOffset(long[].class),\n+                U.arrayBaseOffset(double[].class)\n+        );\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/HotspotUnsafe.java","additions":73,"deletions":4,"binary":false,"changes":77,"status":"modified"}]}