{"files":[{"patch":"@@ -31,1 +31,1 @@\n-package sun.misc;\n+package jdk.internal.vm.annotation;\n","filename":"jol-samples\/src\/main\/java\/jdk\/internal\/vm\/annotation\/Contended.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"jol-samples\/src\/main\/java\/sun\/misc\/Contended.java","status":"copied"},{"patch":"@@ -51,1 +51,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_01_Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_02_Alignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_03_Packing.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_04_Inheritance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle America, Inc.\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- *  * Redistributions of source code must retain the above copyright notice,\n- *    this list of conditions and the following disclaimer.\n- *\n- *  * Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- *  * Neither the name of Oracle nor the names of its contributors may be used\n- *    to endorse or promote products derived from this software without\n- *    specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jol.samples;\n-\n-import org.openjdk.jol.info.ClassLayout;\n-import org.openjdk.jol.vm.VM;\n-\n-import static java.lang.System.out;\n-\n-\/**\n- * @author Aleksey Shipilev\n- *\/\n-public class JOLSample_05_InheritanceBarrier {\n-\n-    \/*\n-     * This example shows the HotSpot field layout quirk.\n-     * (Works best with 64-bit VMs)\n-     *\n-     * Even though we have the alignment gap before A.a field, HotSpot\n-     * does not claim it, because it does not track the gaps in the\n-     * already laid out superclasses. This yields the virtual\n-     * \"inheritance barrier\" between super- and sub-class fields blocks.\n-     *\n-     * See also:\n-     *    https:\/\/bugs.openjdk.java.net\/browse\/JDK-8024913\n-     *\/\n-\n-    public static void main(String[] args) throws Exception {\n-        out.println(VM.current().details());\n-        out.println(ClassLayout.parseClass(C.class).toPrintable());\n-    }\n-\n-    public static class A {\n-        long a;\n-    }\n-\n-    public static class B extends A {\n-        long b;\n-    }\n-\n-    public static class C extends B {\n-        long c;\n-        int d;\n-    }\n-\n-}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_05_InheritanceBarrier.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2014, Oracle America, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ *  * Redistributions of source code must retain the above copyright notice,\n+ *    this list of conditions and the following disclaimer.\n+ *\n+ *  * Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ *  * Neither the name of Oracle nor the names of its contributors may be used\n+ *    to endorse or promote products derived from this software without\n+ *    specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jol.samples;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+import org.openjdk.jol.vm.VM;\n+\n+import static java.lang.System.out;\n+\n+\/**\n+ * @author Aleksey Shipilev\n+ *\/\n+public class JOLSample_05_SuperGaps {\n+\n+    \/*\n+     * This example shows the HotSpot field layout quirk.\n+     * (Works best with 64-bit VMs)\n+     *\n+     * Prior to JDK 15, even though we have the alignment gap before\n+     * A.a field, HotSpot does not claim it, because it does not track\n+     * the gaps in the already laid out superclasses.\n+     *\n+     * In JDK 15 and later, the superclass gaps are no longer present.\n+     *\n+     * See also:\n+     *    https:\/\/bugs.openjdk.java.net\/browse\/JDK-8237767\n+     *\/\n+\n+    public static void main(String[] args) {\n+        out.println(VM.current().details());\n+        out.println(ClassLayout.parseClass(C.class).toPrintable());\n+    }\n+\n+    public static class A {\n+        long a;\n+    }\n+\n+    public static class B extends A {\n+        long b;\n+    }\n+\n+    public static class C extends B {\n+        long c;\n+        int d;\n+    }\n+\n+}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_05_SuperGaps.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle America, Inc.\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- *  * Redistributions of source code must retain the above copyright notice,\n- *    this list of conditions and the following disclaimer.\n- *\n- *  * Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- *  * Neither the name of Oracle nor the names of its contributors may be used\n- *    to endorse or promote products derived from this software without\n- *    specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jol.samples;\n-\n-import org.openjdk.jol.info.ClassLayout;\n-import org.openjdk.jol.vm.VM;\n-\n-import static java.lang.System.out;\n-\n-\/**\n- * @author Aleksey Shipilev\n- *\/\n-public class JOLSample_06_Gaps {\n-\n-    \/*\n-     * This example shows another HotSpot layout quirk.\n-     *\n-     * HotSpot rounds up the instance field block up to reference size.\n-     * That unfortunately yields the artificial gaps at the end of the class.\n-     *\n-     * See also:\n-     *    https:\/\/bugs.openjdk.java.net\/browse\/JDK-8024912\n-     *\/\n-\n-    public static void main(String[] args) throws Exception {\n-        out.println(VM.current().details());\n-        out.println(ClassLayout.parseClass(C.class).toPrintable());\n-    }\n-\n-    public static class A {\n-        boolean a;\n-    }\n-\n-    public static class B extends A {\n-        boolean b;\n-    }\n-\n-    public static class C extends B {\n-        boolean c;\n-    }\n-\n-}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_06_Gaps.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2014, Oracle America, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ *  * Redistributions of source code must retain the above copyright notice,\n+ *    this list of conditions and the following disclaimer.\n+ *\n+ *  * Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ *  * Neither the name of Oracle nor the names of its contributors may be used\n+ *    to endorse or promote products derived from this software without\n+ *    specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jol.samples;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+import org.openjdk.jol.vm.VM;\n+\n+import static java.lang.System.out;\n+\n+\/**\n+ * @author Aleksey Shipilev\n+ *\/\n+public class JOLSample_06_HierarchyGaps {\n+\n+    \/*\n+     * This example shows another HotSpot layout quirk.\n+     *\n+     * Prior to JDK 15, HotSpot rounds up the instance field block\n+     * up to reference size. That unfortunately yields the artificial\n+     * gaps at the end of the class.\n+     *\n+     * In JDK 15 and later, the hierarchy gaps are no longer present.\n+     *\n+     * See also:\n+     *    https:\/\/bugs.openjdk.java.net\/browse\/JDK-8237767\n+     *\/\n+\n+    public static void main(String[] args) {\n+        out.println(VM.current().details());\n+        out.println(ClassLayout.parseClass(C.class).toPrintable());\n+    }\n+\n+    public static class A {\n+        boolean a;\n+    }\n+\n+    public static class B extends A {\n+        boolean b;\n+    }\n+\n+    public static class C extends B {\n+        boolean c;\n+    }\n+\n+}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_06_HierarchyGaps.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -46,4 +46,8 @@\n-     * See the suspicious gap in Throwable class. If you look in the Java\n-     * source, you will see the Throwable.backtrace field, which is not\n-     * listed in the dump. This is because this field handles the VM internal\n-     * info which should not be accessible to users under no conditions.\n+     * In JDK 8 and lower, you would see suspicious gap in Throwable class.\n+     * If you look in the Java source, you will see the Throwable.backtrace\n+     * field, which is not listed in the dump. This is because this field\n+     * handles the VM internal info which should not be accessible to users\n+     * under no conditions.\n+     *\n+     * In JDK 9 and later, the field is visible again and guaranteed to\n+     * contain Java-readable contents.\n@@ -52,1 +56,2 @@\n-     *    http:\/\/bugs.openjdk.java.net\/browse\/JDK-4496456\n+     *    https:\/\/bugs.openjdk.java.net\/browse\/JDK-4496456\n+     *    https:\/\/bugs.openjdk.java.net\/browse\/JDK-8033735\n@@ -55,1 +60,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_07_Exceptions.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -52,2 +52,1 @@\n-     *  http:\/\/hg.openjdk.java.net\/jdk8\/jdk8\/hotspot\/file\/tip\/src\/share\/vm\/classfile\/javaClasses.hpp\n-     *  http:\/\/hg.openjdk.java.net\/jdk8\/jdk8\/hotspot\/file\/tip\/src\/share\/vm\/classfile\/javaClasses.cpp\n+     *  https:\/\/github.com\/openjdk\/jdk\/blob\/fd45694c58452635db572cb55e5a1b2cb7bc34b2\/src\/hotspot\/share\/classfile\/javaClasses.hpp#L219-L226\n@@ -56,1 +55,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_08_Class.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.internal.vm.annotation.Contended;\n@@ -45,1 +46,0 @@\n-     * (This example requires JDK 8 to run, -XX:-RestrictContended should also be used)\n@@ -51,0 +51,4 @@\n+     *\n+     * This example requires at least JDK 8 (for sun.misc.Contended), or JDK 9\n+     * (for jdk.internal.vm.annotation.Contended). Any JDK also requires\n+     * -XX:-RestrictContended to access @Contended from unprivileged code.\n@@ -53,1 +57,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n@@ -59,4 +63,8 @@\n-                             int a;\n-                             int b;\n-        @sun.misc.Contended  int c;\n-                             int d;\n+        int a;\n+        int b;\n+\n+        @sun.misc.Contended\n+        @jdk.internal.vm.annotation.Contended\n+        int c;\n+\n+        int d;\n@@ -67,0 +75,1 @@\n+\n@@ -68,0 +77,1 @@\n+        @Contended(\"first\")\n@@ -69,0 +79,1 @@\n+\n@@ -70,0 +81,1 @@\n+        @Contended(\"first\")\n@@ -71,0 +83,1 @@\n+\n@@ -72,0 +85,1 @@\n+        @Contended(\"last\")\n@@ -73,0 +87,1 @@\n+\n@@ -74,0 +89,1 @@\n+        @Contended(\"last\")\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_09_Contended.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-     *\n@@ -48,3 +47,18 @@\n-     * are simulations. You can see the reference sizes are different,\n-     * depending on VM bitness or mode. The header sizes are also\n-     * a bit different, see subsequent examples to understand why.\n+     * are simulations.\n+     *\n+     * You can see the reference sizes are different, depending on VM model:\n+     *  - with 32-bit model, reference size is 4 bytes\n+     *  - with 64-bit model, reference size is 8 bytes;\n+     *      unless compressed references are enabled\n+     *      (enabled by default when heap size is small)\n+     *\n+     * The mark word sizes depend on JVM bitness:\n+     *  - with 32-bit model, mark word size is 4 bytes\n+     *  - with 64-bit model, mark word size is 8 bytes\n+     *\n+     * The class word sizes depend on JVM model:\n+     *  - with 32-bit model, class word is 4 bytes\n+     *  - with 64-bit model, class word is 8 bytes;\n+     *     unless compressed class pointers are enabled\n+     *     (enabled by default when compressed references are enabled)\n+     *     (since JDK 16, can be enabled even without compressed references)\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_10_DataModels.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -48,3 +48,2 @@\n-     * two syntactically equivalent instances of two distinct classes.\n-     * See the difference in headers, that difference is the reference\n-     * to class.\n+     * two empty instances of two distinct classes. See the difference\n+     * in class word, that difference is the reference to class.\n@@ -53,1 +52,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_11_ClassWord.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2014, Oracle America, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ *  * Redistributions of source code must retain the above copyright notice,\n+ *    this list of conditions and the following disclaimer.\n+ *\n+ *  * Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ *  * Neither the name of Oracle nor the names of its contributors may be used\n+ *    to endorse or promote products derived from this software without\n+ *    specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jol.samples;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+import org.openjdk.jol.vm.VM;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static java.lang.System.out;\n+\n+\/**\n+ * @author Aleksey Shipilev\n+ *\/\n+public class JOLSample_12_BiasedLocking {\n+\n+    \/*\n+     * This is a dive into the mark word.\n+     *\n+     * Among other things, mark words store locking information.\n+     * We can clearly see how the mark word contents change when\n+     * we acquire the lock, and subsequently release it.\n+     *\n+     * In this example, we demonstrate biased locking. Every Java\n+     * object is potentially a target for synchronization. Most of\n+     * the time, the object is ever locked by a single thread. In\n+     * this case, we can \"bias\" the object to that single thread,\n+     * and make the synchronization on it very cheap.\n+     *\n+     * To demonstrate this, we print the object internals before\/during\/after\n+     * lock acquisition. You can notice that mark word changes from\n+     * \"biasable\" to \"biased\". The mark word is left the same after\n+     * unlock: the object is now biased towards the thread.\n+     *\n+     * Prior to JDK 9, biased locking is only enabled after 5 seconds\n+     * after the VM startup. Therefore, the test is best run with\n+     * -XX:BiasedLockingStartupDelay=0 on JDK 8 and lower. After JDK 15,\n+     * biased locking is disabled by default, and this tests needs\n+     * -XX:+UseBiasedLocking.\n+     *\/\n+\n+    public static void main(String[] args) {\n+        out.println(VM.current().details());\n+\n+        final A a = new A();\n+\n+        ClassLayout layout = ClassLayout.parseInstance(a);\n+\n+        out.println(\"**** Fresh object\");\n+        out.println(layout.toPrintable());\n+\n+        synchronized (a) {\n+            out.println(\"**** With the lock\");\n+            out.println(layout.toPrintable());\n+        }\n+\n+        out.println(\"**** After the lock\");\n+        out.println(layout.toPrintable());\n+    }\n+\n+    public static class A {\n+        \/\/ no fields\n+    }\n+\n+}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_12_BiasedLocking.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle America, Inc.\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- *  * Redistributions of source code must retain the above copyright notice,\n- *    this list of conditions and the following disclaimer.\n- *\n- *  * Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- *  * Neither the name of Oracle nor the names of its contributors may be used\n- *    to endorse or promote products derived from this software without\n- *    specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jol.samples;\n-\n-import org.openjdk.jol.info.ClassLayout;\n-import org.openjdk.jol.vm.VM;\n-\n-import static java.lang.System.out;\n-\n-\/**\n- * @author Aleksey Shipilev\n- *\/\n-public class JOLSample_12_ThinLocking {\n-\n-    \/*\n-     * This is another dive into the mark word.\n-     *\n-     * Among other things, mark words store locking information.\n-     * We can clearly see how the mark word contents change when\n-     * we acquire the lock, and release it subsequently.\n-     *\n-     * This one is the example of thin (displaced) lock. The data\n-     * in mark word when lock is acquired is the reference to the\n-     * displaced object header, allocated on stack. Once we leave\n-     * the lock, the displaced header is discarded, and mark word\n-     * is reverted to the default value.\n-     *\/\n-\n-    public static void main(String[] args) throws Exception {\n-        out.println(VM.current().details());\n-\n-        final A a = new A();\n-\n-        ClassLayout layout = ClassLayout.parseInstance(a);\n-\n-        out.println(\"**** Fresh object\");\n-        out.println(layout.toPrintable());\n-\n-        synchronized (a) {\n-            out.println(\"**** With the lock\");\n-            out.println(layout.toPrintable());\n-        }\n-\n-        out.println(\"**** After the lock\");\n-        out.println(layout.toPrintable());\n-    }\n-\n-    public static class A {\n-        \/\/ no fields\n-    }\n-\n-}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_12_ThinLocking.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle America, Inc.\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- *\n- *  * Redistributions of source code must retain the above copyright notice,\n- *    this list of conditions and the following disclaimer.\n- *\n- *  * Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- *  * Neither the name of Oracle nor the names of its contributors may be used\n- *    to endorse or promote products derived from this software without\n- *    specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jol.samples;\n-\n-import org.openjdk.jol.info.ClassLayout;\n-import org.openjdk.jol.vm.VM;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-import static java.lang.System.out;\n-\n-\/**\n- * @author Aleksey Shipilev\n- *\/\n-public class JOLSample_13_BiasedLocking {\n-\n-    \/*\n-     * This is the example of biased locking.\n-     *\n-     * In order to demonstrate this, we first need to sleep for >5 seconds\n-     * to pass the grace period of biased locking. Then, we do the same\n-     * trick as the example before. You may notice that the mark word\n-     * had not changed after the lock was released. That is because\n-     * the mark word now contains the reference to the thread this object\n-     * was biased to.\n-     *\/\n-\n-    public static void main(String[] args) throws Exception {\n-        out.println(VM.current().details());\n-\n-        TimeUnit.SECONDS.sleep(6);\n-\n-        final A a = new A();\n-\n-        ClassLayout layout = ClassLayout.parseInstance(a);\n-\n-        out.println(\"**** Fresh object\");\n-        out.println(layout.toPrintable());\n-\n-        synchronized (a) {\n-            out.println(\"**** With the lock\");\n-            out.println(layout.toPrintable());\n-        }\n-\n-        out.println(\"**** After the lock\");\n-        out.println(layout.toPrintable());\n-    }\n-\n-    public static class A {\n-        \/\/ no fields\n-    }\n-\n-}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_13_BiasedLocking.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2014, Oracle America, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ *  * Redistributions of source code must retain the above copyright notice,\n+ *    this list of conditions and the following disclaimer.\n+ *\n+ *  * Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ *  * Neither the name of Oracle nor the names of its contributors may be used\n+ *    to endorse or promote products derived from this software without\n+ *    specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jol.samples;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+import org.openjdk.jol.vm.VM;\n+\n+import static java.lang.System.out;\n+\n+\/**\n+ * @author Aleksey Shipilev\n+ *\/\n+public class JOLSample_13_ThinLocking {\n+\n+    \/*\n+     * This is another dive into the mark word.\n+     *\n+     * This one is the example of thin (displaced) lock. The data\n+     * in mark word when lock is acquired is the reference to the\n+     * displaced object header, allocated on stack. Once we leave\n+     * the lock, the displaced header is discarded, and mark word\n+     * is reverted to the default value.\n+     *\n+     * This example relies on biased locking not biasing the object\n+     * at the first lock acquisition. Since JDKs up to 8 have biased\n+     * locking startup delay, this example works out of the box there.\n+     * On modern JDKs, starting with 9, this example should be run\n+     * with with -XX:-UseBiasedLocking.\n+     *\/\n+\n+    public static void main(String[] args) {\n+        out.println(VM.current().details());\n+\n+        final A a = new A();\n+\n+        ClassLayout layout = ClassLayout.parseInstance(a);\n+\n+        out.println(\"**** Fresh object\");\n+        out.println(layout.toPrintable());\n+\n+        synchronized (a) {\n+            out.println(\"**** With the lock\");\n+            out.println(layout.toPrintable());\n+        }\n+\n+        out.println(\"**** After the lock\");\n+        out.println(layout.toPrintable());\n+    }\n+\n+    public static class A {\n+        \/\/ no fields\n+    }\n+\n+}\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_13_ThinLocking.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -57,3 +57,6 @@\n-     * there after the lock is released. You can also see the lock is\n-     * \"deflated\" after the GC (the lock cleanup proceeds in safepoints,\n-     * actually).\n+     * there after the lock is released.\n+     *\n+     * You can also see the lock is \"deflated\" after the GC on some JDKs.\n+     * Prior to JDK 15, the lock cleanup proceeds in safepoints, so any\n+     * GC would enter that code. Since JDK 15, monitors are deflated\n+     * asynchronously, once unused monitor population is large enough.\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_14_FatLocking.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_15_IdentityHashCode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_16_AL_LL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,2 +53,6 @@\n-     * The address of the generation is changing, while GC adjusts\n-     * for the allocation rate.\n+     *\n+     * For Parallel-like GCs, while GC adjusts for the allocation rate.\n+     * For G1-like GCs, the allocation address changes by region size,\n+     * as collector switches to another region for allocation.\n+     *\n+     * Run with test with smaller heap (about 1 GB) for best results.\n@@ -57,1 +61,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n@@ -67,1 +71,1 @@\n-            if (distance > 16 * 1024) {\n+            if (distance > 4096) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_17_Allocation.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n@@ -110,1 +110,1 @@\n-            return (id < o.id) ? -1 : ((id == o.id) ? 0 : 1);\n+            return Integer.compare(id, o.id);\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_18_Layouts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+     *\n+     * Run with test with smaller heap (about 1 GB) for best results.\n@@ -60,1 +62,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n@@ -70,1 +72,2 @@\n-        pw.printf(\"Fresh object is at %x%n\", lastAddr);\n+        pw.printf(\"*** Fresh object is at %x%n\", lastAddr);\n+        out.println(layout.toPrintable());\n@@ -88,0 +91,4 @@\n+        long finalAddr = VM.current().addressOf(o);\n+        pw.printf(\"*** Final object is at %x%n\", finalAddr);\n+        out.println(layout.toPrintable());\n+\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_19_Promotion.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+     *\n+     * Run with test with smaller heap (about 1 GB) for best results.\n@@ -81,1 +83,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_20_Roots.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,0 +48,3 @@\n+     * If you run with almost any GC, then you would notice\n+     * that array elements are laid out in-order by index.\n+     *\n@@ -54,0 +57,2 @@\n+     * This test is better run with -XX:ParallelGCThreads=1.\n+     *\n@@ -58,1 +63,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n@@ -65,1 +70,1 @@\n-            arr[i] = new Integer(i);\n+            arr[i] = i + 256; \/\/ boxing outside of Integer cache\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_21_Arrays.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -55,0 +55,3 @@\n+     *\n+     * Run this test with -Xmx1g -XX:+UseParallelGC -XX:ParallelGCThreads=1\n+     * for best results.\n@@ -66,0 +69,1 @@\n+\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_22_Compaction.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,3 @@\n+     *\n+     * Run this test with -Xmx1g -XX:+UseParallelGC -XX:ParallelGCThreads=1\n+     * for best results.\n@@ -61,1 +64,1 @@\n-        for (int c = 0; c < 1000000; c++) {\n+        for (int t = 0; t < 1000000; t++) {\n@@ -78,0 +81,3 @@\n+            for (int t = 0; t < 1000000; t++) {\n+                sink = new Object();\n+            }\n@@ -91,0 +97,3 @@\n+            for (int t = 0; t < 1000000; t++) {\n+                sink = new Object();\n+            }\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_23_Defragmentation.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+     *\n+     * Run this test with -Xmx1g -XX:+UseParallelGC -XX:ParallelGCThreads=1\n+     * for best results.\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_24_Colocation.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_24_Difference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    public static void main(String[] args) throws Exception {\n+    public static void main(String[] args) {\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_25_ArrayAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+     *\n+     * On JDK 15+, this test should enable -XX:+UseBiasedLocking.\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_26_IHC_BL_Conflict.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}