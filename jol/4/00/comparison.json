{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Collection;\n@@ -205,0 +204,9 @@\n+    \/**\n+     * Add the super-class data of the class.\n+     *\n+     * @param superClassData parsed super class\n+     *\/\n+    public void addSuperClassData(ClassData superClassData) {\n+        this.superClass = superClassData;\n+    }\n+\n@@ -220,1 +228,1 @@\n-    public Collection<FieldData> fields() {\n+    public List<FieldData> fields() {\n@@ -233,1 +241,1 @@\n-    public Collection<FieldData> ownFields() {\n+    public List<FieldData> ownFields() {\n@@ -271,1 +279,1 @@\n-    public Collection<FieldData> fieldsFor(String klass) {\n+    public List<FieldData> fieldsFor(String klass) {\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassData.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -107,0 +107,13 @@\n+    private final int lossesInternal;\n+    private final int lossesExternal;\n+    private final int lossesTotal;\n+\n+    private ClassLayout(ClassData classData, SortedSet<FieldLayout> fields, int headerSize, long instanceSize, int lossesInternal, int lossesExternal, int lossesTotal) {\n+        this.classData = classData;\n+        this.fields = fields;\n+        this.headerSize = headerSize;\n+        this.size = instanceSize;\n+        this.lossesInternal = lossesInternal;\n+        this.lossesExternal = lossesExternal;\n+        this.lossesTotal = lossesTotal;\n+    }\n@@ -116,0 +129,1 @@\n+     * @return a new instance of the ClassLayout\n@@ -117,5 +131,1 @@\n-    public ClassLayout(ClassData classData, SortedSet<FieldLayout> fields, int headerSize, long instanceSize, boolean check) {\n-        this.classData = classData;\n-        this.fields = fields;\n-        this.headerSize = headerSize;\n-        this.size = instanceSize;\n+    public static ClassLayout create(ClassData classData, SortedSet<FieldLayout> fields, int headerSize, long instanceSize, boolean check) {\n@@ -123,1 +133,1 @@\n-            checkInvariants();\n+            checkInvariants(fields, instanceSize);\n@@ -125,0 +135,12 @@\n+        \/\/ calculate loses\n+        long next = headerSize;\n+        long internal = 0;\n+        for (FieldLayout fl : fields) {\n+            if (fl.offset() > next) {\n+                internal += fl.offset() - next;\n+            }\n+            next = fl.offset() + fl.size();\n+        }\n+        long external = (instanceSize != next) ? (instanceSize - next) : 0;\n+        long total = internal + external;\n+        return new ClassLayout(classData, fields, headerSize, instanceSize, (int) internal, (int) external, (int) total);\n@@ -127,1 +149,1 @@\n-    private void checkInvariants() {\n+    private static void checkInvariants(SortedSet<FieldLayout> fields, long instanceSize) {\n@@ -133,2 +155,2 @@\n-            if (f.offset() + f.size() > instanceSize()) {\n-                throw new IllegalStateException(\"Field \" + f + \" is overflowing the object of size \" + instanceSize());\n+            if (f.offset() + f.size() > instanceSize) {\n+                throw new IllegalStateException(\"Field \" + f + \" is overflowing the object of size \" + instanceSize);\n@@ -170,0 +192,27 @@\n+    \/**\n+     * Loosed bytes from padding between fields\n+     *\n+     * @return Internally loosed bytes\n+     *\/\n+    public long getLossesInternal() {\n+        return lossesInternal;\n+    }\n+\n+    \/**\n+     * Loosed bytes due to next object alignment\n+     *\n+     * @return Externally loosed bytes\n+     *\/\n+    public long getLossesExternal() {\n+        return lossesExternal;\n+    }\n+\n+    \/**\n+     * Total loosed bytes i.e. lossesInternal + lossesExternal\n+     *\n+     * @return Total loosed bytes\n+     *\/\n+    public long getLossesTotal() {\n+        return lossesTotal;\n+    }\n+\n@@ -254,3 +303,0 @@\n-        long interLoss = 0;\n-        long exterLoss = 0;\n-\n@@ -260,1 +306,0 @@\n-                interLoss += (f.offset() - nextFree);\n@@ -278,2 +323,1 @@\n-            exterLoss = sizeOf - nextFree;\n-            pw.printf(\" %6d %5s %\" + maxTypeLen + \"s %s%n\", nextFree, exterLoss, \"\", MSG_NEXT_GAP);\n+            pw.printf(\" %6d %5s %\" + maxTypeLen + \"s %s%n\", nextFree, lossesExternal, \"\", MSG_NEXT_GAP);\n@@ -283,1 +327,1 @@\n-        pw.printf(\"Space losses: %d bytes internal + %d bytes external = %d bytes total%n\", interLoss, exterLoss, interLoss + exterLoss);\n+        pw.printf(\"Space losses: %d bytes internal + %d bytes external = %d bytes total%n\", lossesInternal, lossesExternal, lossesTotal);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassLayout.java","additions":60,"deletions":16,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -53,0 +53,14 @@\n+    \/**\n+     * Creates the field data.\n+     *\n+     * @param hostKlass class name where the field is declared\n+     * @param fieldName field name\n+     * @param fieldType string representation of field type\n+     * @param isContended true if the field marked with {@code jdk.internal.vm.annotation.Contended} annotation\n+     * @param contendedGroup name of the group specified in the {@code @Contended} annotation\n+     * @return field data\n+     *\/\n+    public static FieldData create(String hostKlass, String fieldName, String fieldType, boolean isContended, String contendedGroup) {\n+        return new FieldData(null, hostKlass, fieldName, fieldType, isContended, contendedGroup);\n+    }\n+\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/FieldData.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-            return new ClassLayout(data, result, vm.arrayHeaderSize(), instanceSize, false);\n+            return ClassLayout.create(data, result, vm.arrayHeaderSize(), instanceSize, false);\n@@ -78,1 +78,1 @@\n-        return new ClassLayout(data, result, vm.objectHeaderSize(), instanceSize, true);\n+        return ClassLayout.create(data, result, vm.objectHeaderSize(), instanceSize, true);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/CurrentLayouter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            return new ClassLayout(cd, result, model.arrayHeaderSize(), instanceSize, false);\n+            return ClassLayout.create(cd, result, model.arrayHeaderSize(), instanceSize, false);\n@@ -352,1 +352,1 @@\n-        return new ClassLayout(cd, result, model.headerSize(), instanceSize, true);\n+        return ClassLayout.create(cd, result, model.headerSize(), instanceSize, true);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/HotSpotLayouter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            return new ClassLayout(data, result, model.arrayHeaderSize(), instanceSize, false);\n+            return ClassLayout.create(data, result, model.arrayHeaderSize(), instanceSize, false);\n@@ -71,1 +71,1 @@\n-            return new ClassLayout(data, result, model.headerSize(), model.headerSize(), false);\n+            return ClassLayout.create(data, result, model.headerSize(), model.headerSize(), false);\n@@ -74,1 +74,1 @@\n-            return new ClassLayout(data, result, model.headerSize(), f.offset() + f.size(), false);\n+            return ClassLayout.create(data, result, model.headerSize(), f.offset() + f.size(), false);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/RawLayouter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+package org.openjdk.jol.info;\n+\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ClassDataTest {\n+\n+  private final ClassData classData = ClassData.parseClass(Class3.class);\n+\n+  static class Class1 {\n+    int c1f1;\n+    int c1f2;\n+    int c1f3;\n+  }\n+\n+  static class Class2 extends Class1 {\n+    int c2f1;\n+    int c2f2;\n+    int c2f3;\n+  }\n+\n+  static class Class3 extends Class2 {\n+    int c3f1;\n+    int c3f2;\n+    int c3f3;\n+    Object c3f4;\n+  }\n+\n+  @Test\n+  public void fields() {\n+    List<FieldData> fields = classData.fields();\n+    assertEquals(10, fields.size());\n+  }\n+\n+  @Test\n+  public void ownFields() {\n+    List<FieldData> ownFields = classData.ownFields();\n+    String klass3 = Class3.class.getCanonicalName();\n+\n+    assertEquals(4, ownFields.size());\n+    assertEquals(\"[c3f1: int, c3f2: int, c3f3: int, c3f4: java.lang.Object]\", ownFields.toString());\n+  }\n+\n+  @Test\n+  public void oopsCount() {\n+    int oopsCount = classData.oopsCount();\n+    assertEquals(1, oopsCount);\n+  }\n+\n+  @Test\n+  public void fieldsFor1() {\n+    String klass = Class1.class.getCanonicalName();\n+    List<FieldData> classFields = classData.fieldsFor(klass);\n+    assertEquals(3, classFields.size());\n+    assertEquals(klass, classFields.get(0).hostClass());\n+    assertEquals(klass, classFields.get(1).hostClass());\n+    assertEquals(klass, classFields.get(2).hostClass());\n+    assertEquals(\"[c1f1: int, c1f2: int, c1f3: int]\", classFields.toString());\n+  }\n+\n+  @Test\n+  public void fieldsFor2() {\n+    String klass = Class2.class.getCanonicalName();\n+    List<FieldData> classFields = classData.fieldsFor(klass);\n+    assertEquals(3, classFields.size());\n+    assertEquals(klass, classFields.get(0).hostClass());\n+    assertEquals(klass, classFields.get(1).hostClass());\n+    assertEquals(klass, classFields.get(2).hostClass());\n+    assertEquals(\"[c2f1: int, c2f2: int, c2f3: int]\", classFields.toString());\n+  }\n+\n+  @Test\n+  public void fieldsFor3() {\n+    String klass = Class3.class.getCanonicalName();\n+    List<FieldData> classFields = classData.fieldsFor(klass);\n+    assertEquals(4, classFields.size());\n+    assertEquals(klass, classFields.get(0).hostClass());\n+    assertEquals(klass, classFields.get(1).hostClass());\n+    assertEquals(klass, classFields.get(2).hostClass());\n+    assertEquals(klass, classFields.get(3).hostClass());\n+    assertEquals(\"[c3f1: int, c3f2: int, c3f3: int, c3f4: java.lang.Object]\", classFields.toString());\n+  }\n+\n+  @Test\n+  public void fieldsForNonExisting() {\n+    List<FieldData> classFields = classData.fieldsFor(\"Non existent class\");\n+    assertTrue(classFields.isEmpty());\n+  }\n+}\n","filename":"jol-core\/src\/test\/java\/org\/openjdk\/jol\/info\/ClassDataTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}