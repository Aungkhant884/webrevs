{"files":[{"patch":"@@ -19,1 +19,1 @@\n-        java: [7, 8, 11, 17, 19-ea]\n+        java: [8, 11, 17, 19-ea]\n","filename":".github\/workflows\/pre-integration.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,7 +122,7 @@\n-        if (type == byte.class    || type == Byte.class)      return Byte.valueOf((byte) 0);\n-        if (type == short.class   || type == Short.class)     return Short.valueOf((short)0);\n-        if (type == char.class    || type == Character.class) return Character.valueOf((char)0);\n-        if (type == int.class     || type == Integer.class)   return Integer.valueOf(0);\n-        if (type == float.class   || type == Float.class)     return Float.valueOf(0f);\n-        if (type == long.class    || type == Long.class)      return Long.valueOf(0);\n-        if (type == double.class  || type == Double.class)    return Double.valueOf(0d);\n+        if (type == byte.class    || type == Byte.class)      return (byte) 0;\n+        if (type == short.class   || type == Short.class)     return (short) 0;\n+        if (type == char.class    || type == Character.class) return (char) 0;\n+        if (type == int.class     || type == Integer.class)   return 0;\n+        if (type == float.class   || type == Float.class)     return 0F;\n+        if (type == long.class    || type == Long.class)      return 0L;\n+        if (type == double.class  || type == Double.class)    return 0D;\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ClasspathedOperation.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -81,6 +81,1 @@\n-        Collections.sort(sorted, new Comparator<String>() {\n-            @Override\n-            public int compare(String o1, String o2) {\n-                return Long.compare(sizes.count(o2), sizes.count(o1));\n-            }\n-        });\n+        sorted.sort((o1, o2) -> Long.compare(sizes.count(o2), sizes.count(o1)));\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpStats.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -67,6 +67,1 @@\n-                cs.submit(new Callable<Multiset<String>>() {\n-                    @Override\n-                    public Multiset<String> call() throws Exception {\n-                        return processJAR(arg);\n-                    }\n-                });\n+                cs.submit(() -> processJAR(arg));\n@@ -75,6 +70,1 @@\n-                cs.submit(new Callable<Multiset<String>>() {\n-                    @Override\n-                    public Multiset<String> call() throws Exception {\n-                        return processHeapDump(arg);\n-                    }\n-                });\n+                cs.submit(() -> processHeapDump(arg));\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectShapes.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Objects;\n@@ -401,1 +402,1 @@\n-        if (arrayComponentKlass != null ? !arrayComponentKlass.equals(classData.arrayComponentKlass) : classData.arrayComponentKlass != null) {\n+        if (!Objects.equals(arrayComponentKlass, classData.arrayComponentKlass)) {\n@@ -404,1 +405,1 @@\n-        if (arrayKlass != null ? !arrayKlass.equals(classData.arrayKlass) : classData.arrayKlass != null) {\n+        if (!Objects.equals(arrayKlass, classData.arrayKlass)) {\n@@ -407,1 +408,1 @@\n-        if (classNames != null ? !classNames.equals(classData.classNames) : classData.classNames != null) {\n+        if (!Objects.equals(classNames, classData.classNames)) {\n@@ -410,1 +411,1 @@\n-        if (fields != null ? !fields.equals(classData.fields) : classData.fields != null) {\n+        if (!Objects.equals(fields, classData.fields)) {\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/ClassData.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-        return Long.valueOf(offset).compareTo(o.offset);\n+        return Long.compare(offset, o.offset);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/FieldLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,6 +204,1 @@\n-            classes = new TreeSet<>(new Comparator<Class<?>>() {\n-                @Override\n-                public int compare(Class<?> o1, Class<?> o2) {\n-                    return o1.getName().compareTo(o2.getName());\n-                }\n-            });\n+            classes = new TreeSet<>(Comparator.comparing(Class::getName));\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/info\/GraphLayout.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                spaceOffset.put(atype, new ArrayDeque<Integer>());\n+                spaceOffset.put(atype, new ArrayDeque<>());\n@@ -212,5 +212,5 @@\n-            int doubleCount = fieldsAllocationCount.get(DOUBLE) - (facContended.containsKey(DOUBLE) ? facContended.get(DOUBLE) : 0);\n-            int wordCount   = fieldsAllocationCount.get(WORD)   - (facContended.containsKey(WORD)   ? facContended.get(WORD)   : 0);\n-            int shortCount  = fieldsAllocationCount.get(SHORT)  - (facContended.containsKey(SHORT)  ? facContended.get(SHORT)  : 0);\n-            int byteCount   = fieldsAllocationCount.get(BYTE)   - (facContended.containsKey(BYTE)   ? facContended.get(BYTE)   : 0);\n-            int oopCount    = fieldsAllocationCount.get(OOP)    - (facContended.containsKey(OOP)    ? facContended.get(OOP)    : 0);\n+            int doubleCount = fieldsAllocationCount.get(DOUBLE) - (facContended.getOrDefault(DOUBLE, 0));\n+            int wordCount   = fieldsAllocationCount.get(WORD)   - (facContended.getOrDefault(WORD, 0));\n+            int shortCount  = fieldsAllocationCount.get(SHORT)  - (facContended.getOrDefault(SHORT, 0));\n+            int byteCount   = fieldsAllocationCount.get(BYTE)   - (facContended.getOrDefault(BYTE, 0));\n+            int oopCount    = fieldsAllocationCount.get(OOP)    - (facContended.getOrDefault(OOP, 0));\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/HotSpotLayouter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -88,7 +88,1 @@\n-    private final ThreadLocal<Object[]> BUFFERS = new ThreadLocal<Object[]>() {\n-        @Override\n-        protected Object[] initialValue() {\n-            return new Object[1];\n-        }\n-    };\n-\n+    private final ThreadLocal<Object[]> BUFFERS = ThreadLocal.withInitial(() -> new Object[1]);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/HotspotUnsafe.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,14 +39,9 @@\n-        return AccessController.doPrivileged(\n-                new PrivilegedAction<Unsafe>() {\n-                    @Override\n-                    public Unsafe run() {\n-                        try {\n-                            Field unsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");\n-                            unsafe.setAccessible(true);\n-                            return (Unsafe) unsafe.get(null);\n-                        } catch (NoSuchFieldException | IllegalAccessException e) {\n-                            throw new IllegalStateException(e);\n-                        }\n-                    }\n-                }\n-        );\n+        return AccessController.doPrivileged((PrivilegedAction<Unsafe>) () -> {\n+            try {\n+                Field unsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+                unsafe.setAccessible(true);\n+                return (Unsafe) unsafe.get(null);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        });\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/VM.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -69,12 +69,9 @@\n-                    .submit(new Callable<Object>() {\n-                                @Override\n-                                public Object call() {\n-                                    try {\n-                                        \/\/ Attach to the caller process as Hotspot agent\n-                                        attachMethod.invoke(agent, (int) request.getProcessId());\n-                                        return ClassUtils.loadClass(VM_CLASSNAME).getMethod(\"getVM\").invoke(null);\n-                                    } catch (Exception t) {\n-                                        throw new RuntimeException(t);\n-                                    }\n-                                }\n-                            }\n+                    .submit(() -> {\n+                        try {\n+                            \/\/ Attach to the caller process as Hotspot agent\n+                            attachMethod.invoke(agent, (int) request.getProcessId());\n+                            return ClassUtils.loadClass(VM_CLASSNAME).getMethod(\"getVM\").invoke(null);\n+                        } catch (Exception t) {\n+                            throw new RuntimeException(t);\n+                        }\n+                    }\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/vm\/sa\/AttachMain.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -75,9 +75,6 @@\n-        Thread t = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                synchronized (a) {\n-                    try {\n-                        TimeUnit.SECONDS.sleep(10);\n-                    } catch (InterruptedException e) {\n-                        return;\n-                    }\n+        Thread t = new Thread(() -> {\n+            synchronized (a) {\n+                try {\n+                    TimeUnit.SECONDS.sleep(10);\n+                } catch (InterruptedException e) {\n+                    \/\/ Do nothing\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_14_FatLocking.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -100,7 +100,4 @@\n-        Runnable task = new Runnable() {\n-            @Override\n-            public void run() {\n-                for (int c = 0; c < count; c++) {\n-                    Object o = new Object();\n-                    chm.put(o, o);\n-                }\n+        Runnable task = () -> {\n+            for (int c = 0; c < count; c++) {\n+                Object o = new Object();\n+                chm.put(o, o);\n","filename":"jol-samples\/src\/main\/java\/org\/openjdk\/jol\/samples\/JOLSample_27_Colocation.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-        <jol.target>1.7<\/jol.target>\n+        <jol.target>1.8<\/jol.target>\n","filename":"pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}