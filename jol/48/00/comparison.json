{"files":[{"patch":"@@ -71,1 +71,1 @@\n-        HeapDumpReader reader = new HeapDumpReader(new File(path), out);\n+        HeapDumpReader reader = new HeapDumpReader(new File(path), out, null);\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpEstimates.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Comparator;\n@@ -71,4 +72,1 @@\n-        out.println(\"Heap Dump: \" + path);\n-\n-        HeapDumpReader reader = new HeapDumpReader(new File(path), out);\n-        Multiset<ClassData> data = reader.parse();\n+        Layouter layouter = new HotSpotLayouter(new ModelVM(), getVMVersion());\n@@ -76,1 +74,2 @@\n-        out.println();\n+        final int printFirst = Integer.getInteger(\"printFirst\", 30);\n+        final String sortBy = System.getProperty(\"sort\", \"sum-size\");\n@@ -81,4 +80,20 @@\n-        Layouter layouter = new HotSpotLayouter(new ModelVM(), getVMVersion());\n-        out.println();\n-        out.println(layouter);\n-        out.println();\n+        Comparator<String> sorter;\n+        switch (sortBy) {\n+            case \"sum-size\":\n+                sorter = (o1, o2) -> Long.compare(sizes.count(o2), sizes.count(o1));\n+                break;\n+            case \"avg-size\":\n+                sorter = (o1, o2) -> Double.compare(1D * sizes.count(o2) \/ counts.count(o2),\n+                                                    1D * sizes.count(o1) \/ counts.count(o1));\n+                break;\n+            case \"instances\":\n+                sorter = (o1, o2) -> Long.compare(counts.count(o2), counts.count(o1));\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Cannot parse: \" + sortBy);\n+        }\n+\n+        out.println(\"Heap Dump: \" + path);\n+\n+        HeapDumpReader reader = new HeapDumpReader(new File(path), out, null);\n+        Multiset<ClassData> data = reader.parse();\n@@ -93,3 +108,1 @@\n-        sorted.sort((o1, o2) -> Long.compare(sizes.count(o2), sizes.count(o1)));\n-\n-        final int printFirst = Integer.getInteger(\"printFirst\", 30);\n+        sorted.sort(sorter);\n@@ -97,1 +110,6 @@\n-        out.println(\"Printing first \" + printFirst + \" object classes by size. Use -DprintFirst=# to override.\");\n+        out.println();\n+        out.println(layouter);\n+        out.println();\n+        out.println(\"Sorting by \" + sortBy + \". Use -Dsort={sum-size,avg-size,instances} to override.\");\n+        out.println();\n+        out.println(\"Printing first \" + printFirst + \" lines. Use -DprintFirst=# to override.\");\n@@ -101,2 +119,4 @@\n-        out.printf(\" %10s %10s %10s   %s%n\", \"COUNT\", \"AVG\", \"SIZE\", \"DESCRIPTION\");\n-        out.println(\"-------------------------------------------------------------------------\");\n+        long printedCnt = 0;\n+        long printedSize = 0;\n+        out.printf(\" %13s %13s %13s   %s%n\", \"INSTANCES\", \"SUM SIZE\", \"AVG SIZE\", \"CLASS\");\n+        out.println(\"------------------------------------------------------------------------------------------------\");\n@@ -107,1 +127,3 @@\n-            out.printf(\" %10d %10d %10d   %s%n\", cnt, size \/ cnt, size, name);\n+            out.printf(\" %13d %13d %13d   %s%n\", cnt, size, size \/ cnt, name);\n+            printedCnt += cnt;\n+            printedSize += size;\n@@ -110,1 +132,1 @@\n-            out.printf(\" %10s %10s %10s   %s%n\", \"\", \"\", \"\", \"...\");\n+            out.printf(\" %13d %13d %13s   %s%n\", counts.size() - printedCnt, sizes.size() - printedSize, \"\", \"(other)\");\n@@ -112,2 +134,2 @@\n-        out.println(\"-------------------------------------------------------------------------\");\n-        out.printf(\" %10d %10s %10d   %s%n\", counts.size(), \"\", sizes.size(), \"(total)\");\n+        out.println(\"------------------------------------------------------------------------------------------------\");\n+        out.printf(\" %13d %13d %13s   %s%n\", counts.size(), sizes.size(), \"\", \"(total)\");\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpStats.java","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-            HeapDumpReader reader = new HeapDumpReader(new File(arg), System.out);\n+            HeapDumpReader reader = new HeapDumpReader(new File(arg), System.out, null);\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectShapes.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-            HeapDumpReader reader = new HeapDumpReader(new File(path), null) {\n+            HeapDumpReader.Visitor visitor = new HeapDumpReader.Visitor() {\n@@ -137,2 +137,2 @@\n-                protected void visitClass(long id, String name, List<Integer> oopIdx, int oopSize) {\n-                    if (name.equals(\"java\/lang\/String\")) {\n+                public void visitClass(long id, String name, List<Integer> oopIdx, int oopSize) {\n+                    if (name.equals(\"java.lang.String\")) {\n@@ -146,1 +146,1 @@\n-                protected void visitInstance(long id, long klassID, byte[] bytes) {\n+                public void visitInstance(long id, long klassID, byte[] bytes) {\n@@ -148,1 +148,1 @@\n-                        throw new IllegalStateException(\"java\/lang\/String was not discovered yet in \" + path);\n+                        throw new IllegalStateException(\"java.lang.String was not discovered yet in \" + path);\n@@ -170,1 +170,1 @@\n-                protected void visitPrimArray(long id, String typeClass, int count, byte[] bytes) {\n+                public void visitPrimArray(long id, String typeClass, int count, byte[] bytes) {\n@@ -178,0 +178,2 @@\n+            HeapDumpReader reader = new HeapDumpReader(new File(path), null, visitor);\n+\n@@ -219,1 +221,1 @@\n-                if (cd.name().equals(\"java\/lang\/String\")) {\n+                if (cd.name().equals(\"java.lang.String\")) {\n@@ -234,1 +236,1 @@\n-                    mcdOop.addField(FieldData.create(\"Object\", \"coder\", \"java\/lang\/Object\"));\n+                    mcdOop.addField(FieldData.create(\"Object\", \"coder\", \"java.lang.Object\"));\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/StringCompress.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+    private static final int GZIP_BUF_SIZE =       512 * 1024;\n+    private static final int READ_BUF_SIZE =  4 * 1024 * 1024;\n+\n@@ -55,0 +58,1 @@\n+    private final Visitor visitor;\n@@ -63,1 +67,1 @@\n-    public HeapDumpReader(File file, PrintStream verboseOut) throws IOException {\n+    public HeapDumpReader(File file, PrintStream verboseOut, Visitor visitor) throws IOException {\n@@ -66,0 +70,1 @@\n+        this.visitor = visitor;\n@@ -67,1 +72,1 @@\n-            this.is = new BufferedInputStream(new GZIPInputStream(new FileInputStream(file)), 16 * 1024 * 1024);\n+            this.is = new BufferedInputStream(new GZIPInputStream(new FileInputStream(file), GZIP_BUF_SIZE), READ_BUF_SIZE);\n@@ -69,1 +74,1 @@\n-            this.is = new BufferedInputStream(new FileInputStream(file), 16 * 1024 * 1024);\n+            this.is = new BufferedInputStream(new FileInputStream(file), READ_BUF_SIZE);\n@@ -112,1 +117,1 @@\n-        final long printEach = 256 * 1024 * 1024;\n+        final long printEach = 256L * 1024 * 1024;\n@@ -164,1 +169,1 @@\n-                    read_null(len);\n+                    skipContents(len);\n@@ -238,3 +243,0 @@\n-        int len = elements * getSize(typeClass);\n-        byte[] bytes = read_contents(len);\n-\n@@ -242,1 +244,0 @@\n-\n@@ -245,1 +246,7 @@\n-        visitPrimArray(id, typeString, elements, bytes);\n+        int len = elements * getSize(typeClass);\n+        if (visitor != null) {\n+            byte[] bytes = readContents(len);\n+            visitor.visitPrimArray(id, typeString, elements, bytes);\n+        } else {\n+            skipContents(len);\n+        }\n@@ -253,1 +260,1 @@\n-        read_null((long) elements * idSize);\n+        skipContents((long) elements * idSize);\n@@ -271,3 +278,6 @@\n-        byte[] bytes = read_contents(instanceBytes);\n-\n-        visitInstance(id, klassID, bytes);\n+        if (visitor != null) {\n+            byte[] bytes = readContents(instanceBytes);\n+            visitor.visitInstance(id, klassID, bytes);\n+        } else {\n+            skipContents(instanceBytes);\n+        }\n@@ -330,1 +340,3 @@\n-        visitClass(klassID, name, oopIdx, idSize);\n+        if (visitor != null) {\n+            visitor.visitClass(klassID, name, oopIdx, idSize);\n+        }\n@@ -430,1 +442,1 @@\n-    byte[] read_null(long len) throws HeapDumpException {\n+    void skipContents(long len) throws HeapDumpException {\n@@ -438,1 +450,0 @@\n-        return new byte[0];\n@@ -441,1 +452,1 @@\n-    byte[] read_contents(long len) throws HeapDumpException {\n+    byte[] readContents(long len) throws HeapDumpException {\n@@ -514,10 +525,4 @@\n-    protected void visitInstance(long id, long klassID, byte[] bytes) {\n-\n-    }\n-\n-    protected void visitClass(long id, String name, List<Integer> oopIdx, int oopSize) {\n-\n-    }\n-\n-    protected void visitPrimArray(long id, String componentType, int count, byte[] bytes) {\n-\n+    public interface Visitor {\n+        void visitInstance(long id, long klassID, byte[] bytes);\n+        void visitClass(long id, String name, List<Integer> oopIdx, int oopSize);\n+        void visitPrimArray(long id, String componentType, int count, byte[] bytes);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/heap\/HeapDumpReader.java","additions":33,"deletions":28,"binary":false,"changes":61,"status":"modified"}]}