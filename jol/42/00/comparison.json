{"files":[{"patch":"@@ -9,0 +9,2 @@\n+  schedule:\n+      - cron: 0 0 * * 0\n@@ -32,0 +34,1 @@\n+        check-latest: true\n","filename":".github\/workflows\/pre-integration.yml","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -9,0 +9,2 @@\n+![Pre-integration testing status](https:\/\/github.com\/openjdk\/jol\/actions\/workflows\/pre-integration.yml\/badge.svg)\n+\n","filename":"README.md","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+        long rawCount = 0;\n@@ -73,0 +74,1 @@\n+                rawCount += data.count(cd);\n@@ -76,3 +78,36 @@\n-        for (DataModel model : EstimatedModels.MODELS_JDK8) {\n-            Layouter l = new HotSpotLayouter(model, 8);\n-            simulateWith(l, data, rawSize);\n+        out.println(\"=== Overall Statistics\");\n+        out.println();\n+        out.printf(\"%10s,     %s%n\", inProperUnits(rawCount), \"Total objects\");\n+        out.printf(\"%10s,     %s%n\", inProperUnits(rawSize), \"Total data size\");\n+        out.printf(\"%10s,     %s%n\", String.format(\"%.2f\", 1F * rawSize \/ rawCount), \"Average data per object\");\n+        out.println();\n+\n+        final String msg_noCoops =          \"64-bit, no comp refs (>32 GB heap, default align)\";\n+        final String msg_noCoops_ccp =      \"64-bit, no comp refs, but comp klasses (>32 GB heap, default align)\";\n+        final String msg_coops =            \"64-bit, comp refs (<32 GB heap, default align)\";\n+        final String msg_coops_align16 =    \"64-bit, comp refs with large align (32..64GB heap, 16-byte align)\";\n+        final String msg_coops_align32 =    \"64-bit, comp refs with large align (64..128GB heap, 32-byte align)\";\n+        final String msg_coops_align64 =    \"64-bit, comp refs with large align (128..256GB heap, 64-byte align)\";\n+        final String msg_coops_align128 =   \"64-bit, comp refs with large align (256..512GB heap, 128-byte align)\";\n+        final String msg_coops_align256 =   \"64-bit, comp refs with large align (512..1024GB heap, 256-byte align)\";\n+\n+        final String desc = \"  'Overhead' comes from additional metadata, representation and alignment losses.\\n\" +\n+                \"  'JVM mode' is relative footprint change compared to the best JVM mode in this JDK.\\n\" +\n+                \"  'Upgrade From' is the relative footprint change against the same mode in other JDKs.\\n\";\n+\n+\n+        out.println(\"=== Stock 32-bit OpenJDK\");\n+        out.println();\n+        out.println(desc);\n+\n+        long jdk8_32 = computeWithLayouter(data, new HotSpotLayouter(new Model32(), 8));;\n+        {\n+            out.printf(\"%10s, %10s,     %s%n\",\n+                    \"Footprint\", \"Overhead\", \"Description\"\n+            );\n+\n+            out.printf(\"%10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_32),\n+                    diff(jdk8_32, rawSize),\n+                    \"32-bit (<4 GB heap)\"\n+            );\n@@ -80,0 +115,32 @@\n+        out.println();\n+\n+        out.println(\"=== Stock 64-bit OpenJDK (JDK < 15)\");\n+        out.println();\n+        out.println(desc);\n+\n+        long jdk8_coops =           computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true), 8));\n+        long jdk8_noCoops =         computeWithLayouter(data, new HotSpotLayouter(new Model64(false, false), 8));\n+        long jdk8_coops_align16 =   computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 16), 8));\n+        long jdk8_coops_align32 =   computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 32), 8));\n+        long jdk8_coops_align64 =   computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 64), 8));\n+        long jdk8_coops_align128 =  computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 128), 8));\n+        long jdk8_coops_align256 =  computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 256), 8));\n+\n+        {\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    \"Footprint\", \"Overhead\", \"JVM Mode\", \"Description\"\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_noCoops),\n+                    diff(jdk8_noCoops, rawSize),\n+                    diff(jdk8_noCoops, jdk8_coops),\n+                    msg_noCoops\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_coops),\n+                    diff(jdk8_coops, rawSize),\n+                    diff(jdk8_coops, jdk8_coops),\n+                    msg_coops\n+            );\n@@ -81,3 +148,34 @@\n-        for (DataModel model : EstimatedModels.MODELS_JDK8) {\n-            Layouter l = new HotSpotLayouter(model, 15);\n-            simulateWith(l, data, rawSize);\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_coops_align16),\n+                    diff(jdk8_coops_align16, rawSize),\n+                    diff(jdk8_coops_align16, jdk8_coops),\n+                    msg_coops_align16\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_coops_align32),\n+                    diff(jdk8_coops_align32, rawSize),\n+                    diff(jdk8_coops_align32, jdk8_coops),\n+                    msg_coops_align32\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_coops_align64),\n+                    diff(jdk8_coops_align64, rawSize),\n+                    diff(jdk8_coops_align64, jdk8_coops),\n+                    msg_coops_align64\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_coops_align128),\n+                    diff(jdk8_coops_align128, rawSize),\n+                    diff(jdk8_coops_align128, jdk8_coops),\n+                    msg_coops_align128\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk8_coops_align256),\n+                    diff(jdk8_coops_align256, rawSize),\n+                    diff(jdk8_coops_align256, jdk8_coops),\n+                    msg_coops_align256\n+            );\n@@ -85,0 +183,1 @@\n+        out.println();\n@@ -86,3 +185,73 @@\n-        for (DataModel model : EstimatedModels.MODELS_JDK15) {\n-            Layouter l = new HotSpotLayouter(model, 15);\n-            simulateWith(l, data, rawSize);\n+        long jdk15_coops =          computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true), 15));\n+        long jdk15_noCoops =        computeWithLayouter(data, new HotSpotLayouter(new Model64(false, true), 15));\n+        long jdk15_coops_align16 =  computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 16), 15));\n+        long jdk15_coops_align32 =  computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 32), 15));\n+        long jdk15_coops_align64 =  computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 64), 15));\n+        long jdk15_coops_align128 = computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 128), 15));\n+        long jdk15_coops_align256 = computeWithLayouter(data, new HotSpotLayouter(new Model64(true, true, 256), 15));\n+\n+        out.println(\"=== Stock 64-bit OpenJDK (JDK >= 15)\");\n+        out.println();\n+        out.println(desc);\n+\n+        {\n+            out.printf(\"%37s %s%n\", \"\", \"Upgrade From:\");\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    \"Footprint\", \"Overhead\", \"JVM Mode\", \"JDK < 15\", \"Description\"\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk15_noCoops),\n+                    diff(jdk15_noCoops, rawSize),\n+                    diff(jdk15_noCoops, jdk15_coops),\n+                    diff(jdk15_noCoops, jdk8_noCoops),\n+                    msg_noCoops_ccp\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk15_coops),\n+                    diff(jdk15_coops, rawSize),\n+                    diff(jdk15_coops, jdk15_coops),\n+                    diff(jdk15_coops, jdk8_coops),\n+                    msg_coops\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk15_coops_align16),\n+                    diff(jdk15_coops_align16, rawSize),\n+                    diff(jdk15_coops_align16, jdk15_coops),\n+                    diff(jdk15_coops_align16, jdk8_coops_align16),\n+                    msg_coops_align16\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk15_coops_align32),\n+                    diff(jdk15_coops_align32, rawSize),\n+                    diff(jdk15_coops_align32, jdk15_coops),\n+                    diff(jdk15_coops_align32, jdk8_coops_align32),\n+                    msg_coops_align32\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk15_coops_align64),\n+                    diff(jdk15_coops_align64, rawSize),\n+                    diff(jdk15_coops_align64, jdk15_coops),\n+                    diff(jdk15_coops_align64, jdk8_coops_align64),\n+                    msg_coops_align64\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk15_coops_align128),\n+                    diff(jdk15_coops_align128, rawSize),\n+                    diff(jdk15_coops_align128, jdk15_coops),\n+                    diff(jdk15_coops_align128, jdk8_coops_align128),\n+                    msg_coops_align128\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdk15_coops_align256),\n+                    diff(jdk15_coops_align256, rawSize),\n+                    diff(jdk15_coops_align256, jdk15_coops),\n+                    diff(jdk15_coops_align256, jdk8_coops_align256),\n+                    msg_coops_align256\n+            );\n@@ -90,0 +259,1 @@\n+        out.println();\n@@ -91,3 +261,170 @@\n-        for (DataModel model : EstimatedModels.MODELS_LILLIPUT) {\n-            Layouter l = new HotSpotLayouter(model, 99);\n-            simulateWith(l, data, rawSize);\n+        out.println(\"=== Experimental 64-bit OpenJDK: Lilliput, 64-bit headers\");\n+        out.println();\n+        out.println(desc);\n+\n+        long jdkLilliput_coops =            computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 8, false), 99));\n+        long jdkLilliput_noCoops =          computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(false, 8, false), 99));\n+        long jdkLilliput_coops_align16 =    computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 16, false), 99));\n+        long jdkLilliput_coops_align32 =    computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 32, false), 99));\n+        long jdkLilliput_coops_align64 =    computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 64, false), 99));\n+        long jdkLilliput_coops_align128 =   computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 128, false), 99));\n+        long jdkLilliput_coops_align256 =   computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 256, false), 99));\n+\n+        {\n+            out.printf(\"%37s %s%n\", \"\", \"Upgrade From:\");\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    \"Footprint\", \"Overhead\", \"JVM Mode\", \"JDK < 15\", \"JDK >= 15\", \"Description\"\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput_noCoops),\n+                    diff(jdkLilliput_noCoops, rawSize),\n+                    diff(jdkLilliput_noCoops, jdkLilliput_coops),\n+                    diff(jdkLilliput_noCoops, jdk8_noCoops),\n+                    diff(jdkLilliput_noCoops, jdk15_noCoops),\n+                    msg_noCoops_ccp\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput_coops),\n+                    diff(jdkLilliput_coops, rawSize),\n+                    diff(jdkLilliput_coops, jdkLilliput_coops),\n+                    diff(jdkLilliput_coops, jdk8_coops),\n+                    diff(jdkLilliput_coops, jdk15_coops),\n+                    msg_coops\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput_coops_align16),\n+                    diff(jdkLilliput_coops_align16, rawSize),\n+                    diff(jdkLilliput_coops_align16, jdkLilliput_coops),\n+                    diff(jdkLilliput_coops_align16, jdk8_coops_align16),\n+                    diff(jdkLilliput_coops_align16, jdk15_coops_align16),\n+                    msg_coops_align16\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput_coops_align32),\n+                    diff(jdkLilliput_coops_align32, rawSize),\n+                    diff(jdkLilliput_coops_align32, jdkLilliput_coops),\n+                    diff(jdkLilliput_coops_align32, jdk8_coops_align32),\n+                    diff(jdkLilliput_coops_align32, jdk15_coops_align32),\n+                    msg_coops_align32\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput_coops_align64),\n+                    diff(jdkLilliput_coops_align64, rawSize),\n+                    diff(jdkLilliput_coops_align64, jdkLilliput_coops),\n+                    diff(jdkLilliput_coops_align64, jdk8_coops_align64),\n+                    diff(jdkLilliput_coops_align64, jdk15_coops_align64),\n+                    msg_coops_align64\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput_coops_align128),\n+                    diff(jdkLilliput_coops_align128, rawSize),\n+                    diff(jdkLilliput_coops_align128, jdkLilliput_coops),\n+                    diff(jdkLilliput_coops_align128, jdk8_coops_align128),\n+                    diff(jdkLilliput_coops_align128, jdk15_coops_align128),\n+                    msg_coops_align128\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput_coops_align256),\n+                    diff(jdkLilliput_coops_align256, rawSize),\n+                    diff(jdkLilliput_coops_align256, jdkLilliput_coops),\n+                    diff(jdkLilliput_coops_align256, jdk8_coops_align256),\n+                    diff(jdkLilliput_coops_align256, jdk15_coops_align256),\n+                    msg_coops_align256\n+            );\n+        }\n+        out.println();\n+\n+        out.println(\"=== Experimental 64-bit OpenJDK: Lilliput, 32-bit headers\");\n+        out.println();\n+        out.println(desc);\n+\n+        long jdkLilliput32_coops =          computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 8, true), 99));\n+        long jdkLilliput32_noCoops =        computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(false, 8, true), 99));\n+        long jdkLilliput32_coops_align16 =  computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 16, true), 99));\n+        long jdkLilliput32_coops_align32 =  computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 32, true), 99));\n+        long jdkLilliput32_coops_align64 =  computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 64, true), 99));\n+        long jdkLilliput32_coops_align128 = computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 128, true), 99));\n+        long jdkLilliput32_coops_align256 = computeWithLayouter(data, new HotSpotLayouter(new Model64_Lilliput(true, 256, true), 99));\n+\n+        {\n+            out.printf(\"%37s %s%n\", \"\", \"Upgrade From:\");\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    \"Footprint\", \"Overhead\", \"JVM Mode\", \"JDK < 15\", \"JDK >= 15\", \"Lill-64\", \"Description\"\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput32_noCoops),\n+                    diff(jdkLilliput32_noCoops, rawSize),\n+                    diff(jdkLilliput32_noCoops, jdkLilliput32_coops),\n+                    diff(jdkLilliput32_noCoops, jdk8_noCoops),\n+                    diff(jdkLilliput32_noCoops, jdk15_noCoops),\n+                    diff(jdkLilliput32_noCoops, jdkLilliput_noCoops),\n+                    msg_noCoops_ccp\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput32_coops),\n+                    diff(jdkLilliput32_coops, rawSize),\n+                    diff(jdkLilliput32_coops, jdkLilliput32_coops),\n+                    diff(jdkLilliput32_coops, jdk8_coops),\n+                    diff(jdkLilliput32_coops, jdk15_coops),\n+                    diff(jdkLilliput32_coops, jdkLilliput_coops),\n+                    msg_coops\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput32_coops_align16),\n+                    diff(jdkLilliput32_coops_align16, rawSize),\n+                    diff(jdkLilliput32_coops_align16, jdkLilliput32_coops),\n+                    diff(jdkLilliput32_coops_align16, jdk8_coops_align16),\n+                    diff(jdkLilliput32_coops_align16, jdk15_coops_align16),\n+                    diff(jdkLilliput32_coops_align16, jdkLilliput_coops_align16),\n+                    msg_coops_align16\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput32_coops_align32),\n+                    diff(jdkLilliput32_coops_align32, rawSize),\n+                    diff(jdkLilliput32_coops_align32, jdkLilliput32_coops),\n+                    diff(jdkLilliput32_coops_align32, jdk8_coops_align32),\n+                    diff(jdkLilliput32_coops_align32, jdk15_coops_align32),\n+                    diff(jdkLilliput32_coops_align32, jdkLilliput_coops_align32),\n+                    msg_coops_align32\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput32_coops_align64),\n+                    diff(jdkLilliput32_coops_align64, rawSize),\n+                    diff(jdkLilliput32_coops_align64, jdkLilliput32_coops),\n+                    diff(jdkLilliput32_coops_align64, jdk8_coops_align64),\n+                    diff(jdkLilliput32_coops_align64, jdk15_coops_align64),\n+                    diff(jdkLilliput32_coops_align64, jdkLilliput_coops_align64),\n+                    msg_coops_align64\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput32_coops_align128),\n+                    diff(jdkLilliput32_coops_align128, rawSize),\n+                    diff(jdkLilliput32_coops_align128, jdkLilliput32_coops),\n+                    diff(jdkLilliput32_coops_align128, jdk8_coops_align128),\n+                    diff(jdkLilliput32_coops_align128, jdk15_coops_align128),\n+                    diff(jdkLilliput32_coops_align128, jdkLilliput_coops_align128),\n+                    msg_coops_align128\n+            );\n+\n+            out.printf(\"%10s, %10s, %10s, %10s, %10s, %10s,     %s%n\",\n+                    inProperUnits(jdkLilliput32_coops_align256),\n+                    diff(jdkLilliput32_coops_align256, rawSize),\n+                    diff(jdkLilliput32_coops_align256, jdkLilliput32_coops),\n+                    diff(jdkLilliput32_coops_align256, jdk8_coops_align256),\n+                    diff(jdkLilliput32_coops_align256, jdk15_coops_align256),\n+                    diff(jdkLilliput32_coops_align256, jdkLilliput_coops_align256),\n+                    msg_coops_align256\n+            );\n@@ -95,0 +432,2 @@\n+        out.println();\n+\n@@ -97,2 +436,1 @@\n-    private void simulateWith(Layouter layouter, Multiset<ClassData> data, long rawSize) {\n-        out.println(\"***** \" + layouter);\n+    private static long computeWithLayouter(Multiset<ClassData> data, Layouter layouter) {\n@@ -103,4 +441,24 @@\n-        out.printf(\"  Total data size:   %d bytes%n\", rawSize);\n-        out.printf(\"  Total object size: %d bytes%n\", size);\n-        out.printf(\"  Object overhead:   %.1f%%%n\", (size - rawSize) * 100.0 \/ size);\n-        out.println();\n+        return size;\n+    }\n+\n+    private String inProperUnits(long bytes) {\n+        final long K = 1000L;\n+        final long M = K * K;\n+        final long G = K * K * K;\n+        if (bytes > 100 * G) {\n+            return (bytes \/ G) + \"G\";\n+        } else if (bytes > 100 * M) {\n+            return (bytes \/ M) + \"M\";\n+        } else if (bytes > 100 * K) {\n+            return (bytes \/ K) + \"K\";\n+        } else {\n+            return bytes + \"\";\n+        }\n+    }\n+\n+    private String diff(long size, long baseline) {\n+        if (size == baseline) {\n+            return \"(same)\";\n+        } else {\n+            return String.format(\"%+.1f%%\", 100F * size \/ baseline - 100F);\n+        }\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpEstimates.java","additions":376,"deletions":18,"binary":false,"changes":394,"status":"modified"}]}