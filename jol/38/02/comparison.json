{"files":[{"patch":"@@ -46,0 +46,1 @@\n+        registerOperation(new HeapDumpEstimates());\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/Main.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.operations;\n+\n+import org.openjdk.jol.datamodel.*;\n+import org.openjdk.jol.layouters.RawLayouter;\n+\n+public class EstimatedModels {\n+\n+    static final DataModel[] MODELS_JDK8 = new DataModel[]{\n+            new Model32(),\n+            new Model64(),\n+            new Model64_COOPS_CCPS(),\n+            new Model64_COOPS_CCPS(16),\n+    };\n+\n+    static final DataModel[] MODELS_JDK15 = new DataModel[]{\n+            new Model64_CCPS(),\n+            new Model64_CCPS(16),\n+    };\n+\n+    static final DataModel[] MODELS_LILLIPUT = new DataModel[]{\n+            new Model64_Lilliput(false, 8, false),\n+            new Model64_Lilliput(true, 8, false),\n+            new Model64_Lilliput(true, 16, false),\n+            new Model64_Lilliput(false, 8, true),\n+            new Model64_Lilliput(true, 8, true),\n+            new Model64_Lilliput(true, 16, true),\n+    };\n+\n+}\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/EstimatedModels.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.operations;\n+\n+import org.openjdk.jol.Operation;\n+import org.openjdk.jol.datamodel.*;\n+import org.openjdk.jol.heap.HeapDumpReader;\n+import org.openjdk.jol.info.ClassData;\n+import org.openjdk.jol.layouters.HotSpotLayouter;\n+import org.openjdk.jol.layouters.Layouter;\n+import org.openjdk.jol.layouters.RawLayouter;\n+import org.openjdk.jol.util.Multiset;\n+\n+import java.io.File;\n+\n+import static java.lang.System.out;\n+\n+\/**\n+ * @author Aleksey Shipilev\n+ *\/\n+public class HeapDumpEstimates implements Operation {\n+\n+    @Override\n+    public String label() {\n+        return \"heapdump-estimates\";\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"Consume the heap dump and simulate the class layout in different VM modes\";\n+    }\n+\n+    public void run(String... args) throws Exception {\n+        if (args.length == 0) {\n+            System.err.println(\"Expected a hprof file name.\");\n+            return;\n+        }\n+        String path = args[0];\n+\n+        out.println(\"Heap Dump: \" + path);\n+        out.println();\n+\n+        HeapDumpReader reader = new HeapDumpReader(new File(path));\n+        Multiset<ClassData> data = reader.parse();\n+\n+        long rawSize = 0;\n+        {\n+            RawLayouter rawLayouter = new RawLayouter(new Model32());\n+            for (ClassData cd : data.keys()) {\n+                rawSize += rawLayouter.layout(cd).instanceSize() * data.count(cd);\n+            }\n+        }\n+\n+        for (DataModel model : EstimatedModels.MODELS_JDK8) {\n+            Layouter l = new HotSpotLayouter(model, 8);\n+            simulateWith(l, data, rawSize);\n+        }\n+\n+        for (DataModel model : EstimatedModels.MODELS_JDK8) {\n+            Layouter l = new HotSpotLayouter(model, 15);\n+            simulateWith(l, data, rawSize);\n+        }\n+\n+        for (DataModel model : EstimatedModels.MODELS_JDK15) {\n+            Layouter l = new HotSpotLayouter(model, 15);\n+            simulateWith(l, data, rawSize);\n+        }\n+\n+        for (DataModel model : EstimatedModels.MODELS_LILLIPUT) {\n+            Layouter l = new HotSpotLayouter(model, 99);\n+            simulateWith(l, data, rawSize);\n+        }\n+    }\n+\n+    private void simulateWith(Layouter layouter, Multiset<ClassData> data, long rawSize) {\n+        out.println(\"***** \" + layouter);\n+        long size = 0L;\n+        for (ClassData cd : data.keys()) {\n+            size += layouter.layout(cd).instanceSize() * data.count(cd);\n+        }\n+        out.printf(\"  Total data size:   %d bytes%n\", rawSize);\n+        out.printf(\"  Total object size: %d bytes%n\", size);\n+        out.printf(\"  Object overhead:   %.1f%%%n\", (size - rawSize) * 100.0 \/ size);\n+        out.println();\n+    }\n+\n+}\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/HeapDumpEstimates.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.jol.layouters.RawLayouter;\n@@ -49,12 +50,0 @@\n-    private static final DataModel[] MODELS_JDK8 = new DataModel[]{\n-            new Model32(),\n-            new Model64(),\n-            new Model64_COOPS_CCPS(),\n-            new Model64_COOPS_CCPS(16),\n-    };\n-\n-    private static final DataModel[] MODELS_JDK15 = new DataModel[]{\n-            new Model64_CCPS(),\n-            new Model64_CCPS(16),\n-    };\n-\n@@ -63,1 +52,1 @@\n-        for (DataModel model : MODELS_JDK8) {\n+        for (DataModel model : EstimatedModels.MODELS_JDK8) {\n@@ -69,1 +58,1 @@\n-        for (DataModel model : MODELS_JDK8) {\n+        for (DataModel model : EstimatedModels.MODELS_JDK8) {\n@@ -75,1 +64,1 @@\n-        for (DataModel model : MODELS_JDK15) {\n+        for (DataModel model : EstimatedModels.MODELS_JDK15) {\n@@ -80,0 +69,6 @@\n+\n+        for (DataModel model : EstimatedModels.MODELS_LILLIPUT) {\n+            Layouter l = new HotSpotLayouter(model, 99);\n+            out.println(\"***** \" + l);\n+            out.println(ClassLayout.parseClass(klass, l).toPrintable());\n+        }\n","filename":"jol-cli\/src\/main\/java\/org\/openjdk\/jol\/operations\/ObjectEstimates.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.jol.datamodel;\n+\n+\/**\n+ * 64 bits, Lilliput (Experimental)\n+ *\n+ * @author Aleksey Shipilev\n+ *\/\n+public class Model64_Lilliput implements DataModel {\n+\n+    private final int align;\n+    private final boolean compRefs;\n+    private final boolean target;\n+\n+    public Model64_Lilliput() {\n+        this(false, 8, false);\n+    }\n+\n+    public Model64_Lilliput(boolean compRefs, int align, boolean target) {\n+        this.compRefs = compRefs;\n+        this.align = align;\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public int markHeaderSize() {\n+        return target ? 1 : 8;\n+    }\n+\n+    @Override\n+    public int classHeaderSize() {\n+        return target ? 3 : 0;\n+    }\n+\n+    @Override\n+    public int arrayLengthHeaderSize() {\n+        return 4;\n+    }\n+\n+    @Override\n+    public int headerSize() {\n+        return markHeaderSize() + classHeaderSize();\n+    }\n+\n+    @Override\n+    public int arrayHeaderSize() {\n+        return headerSize() + arrayLengthHeaderSize();\n+    }\n+\n+    @Override\n+    public int sizeOf(String klass) {\n+        switch (klass) {\n+            case \"byte\":\n+            case \"boolean\":\n+                return 1;\n+            case \"short\":\n+            case \"char\":\n+                return 2;\n+            case \"int\":\n+            case \"float\":\n+                return 4;\n+            case \"long\":\n+            case \"double\":\n+                return 8;\n+            default:\n+                return (compRefs ? 4 : 8);\n+        }\n+    }\n+\n+    @Override\n+    public int objectAlignment() {\n+        return align;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"64-bit model\" +\n+                \", Lilliput (\" + (target ? \"ultimate target\" : \"current experiment\") + \")\" +\n+                (compRefs ? \", compressed references\" : \"\") +\n+                \", \" + align + \"-byte aligned\";\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Model64_Lilliput that = (Model64_Lilliput) o;\n+        return align == that.align;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return align;\n+    }\n+}\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/datamodel\/Model64_Lilliput.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -37,1 +37,1 @@\n- * Layouter which packs all the fields together, regardless of the alignment.\n+ * Layouter which packs all the fields together, regardless of the alignment or headers.\n@@ -55,1 +55,1 @@\n-            int base = model.arrayHeaderSize();\n+            int base = 0;\n@@ -63,1 +63,1 @@\n-        int offset = model.headerSize();\n+        int offset = 0;\n@@ -71,1 +71,1 @@\n-            return ClassLayout.create(data, result, model, model.headerSize(), false);\n+            return ClassLayout.create(data, result, model, 0, false);\n","filename":"jol-core\/src\/main\/java\/org\/openjdk\/jol\/layouters\/RawLayouter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}