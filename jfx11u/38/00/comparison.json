{"files":[{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef GSTREAMER_LITE\n+\n+#include \"gstdirectsoundnotify.h\"\n+\n+void* InitNotificator(GSTDSNotfierCallback pCallback, void *pData) {\n+  GSTDirectSoundNotify *pNotify = new GSTDirectSoundNotify();\n+  if (pNotify != NULL) {\n+    if (pNotify->Init(pCallback, pData)) {\n+      return (void*)pNotify;\n+    } else {\n+      pNotify->Release();\n+    }\n+  }\n+\n+  return NULL;\n+}\n+\n+void ReleaseNotificator(void *pObject) {\n+  GSTDirectSoundNotify *pNotify = (GSTDirectSoundNotify*)pObject;\n+  if (pNotify) {\n+    pNotify->Dispose();\n+    pNotify->Release();\n+  }\n+}\n+\n+bool GSTDirectSoundNotify::Init(GSTDSNotfierCallback pCallback, void *pData) {\n+  m_pCallback = pCallback;\n+  m_pData = pData;\n+\n+  HRESULT hr = CoCreateInstance(__uuidof(MMDeviceEnumerator),\n+                                NULL,\n+                                CLSCTX_INPROC_SERVER,\n+                                IID_PPV_ARGS(&m_pEnumerator));\n+  if (SUCCEEDED(hr)) {\n+    hr = m_pEnumerator->RegisterEndpointNotificationCallback(this);\n+    if (SUCCEEDED(hr)) {\n+      return true;\n+    }\n+  }\n+\n+  return false;\n+}\n+\n+void GSTDirectSoundNotify::Dispose() {\n+  if (m_pEnumerator) {\n+    m_pEnumerator->UnregisterEndpointNotificationCallback(this);\n+    m_pEnumerator->Release();\n+  }\n+}\n+\n+GSTDirectSoundNotify::GSTDirectSoundNotify() {\n+  m_cRef = 1;\n+  m_pEnumerator = NULL;\n+  m_pCallback = NULL;\n+  m_pData = NULL;\n+  m_hrCoInit = CoInitialize(NULL);\n+}\n+\n+GSTDirectSoundNotify::~GSTDirectSoundNotify() {\n+  if (SUCCEEDED(m_hrCoInit)) {\n+    CoUninitialize();\n+  }\n+}\n+\n+HRESULT GSTDirectSoundNotify::OnDefaultDeviceChanged(EDataFlow flow,\n+                                                     ERole role,\n+                                                     LPCWSTR pwstrDefaultDeviceId) {\n+  if (flow == eRender && pwstrDefaultDeviceId != NULL) {\n+    if (m_pCallback && m_pData) {\n+      m_pCallback(m_pData);\n+    }\n+  }\n+\n+  \/\/ return value of this callback is ignored\n+  return S_OK;\n+}\n+\n+\/\/  IUnknown methods\n+HRESULT GSTDirectSoundNotify::QueryInterface(REFIID iid, void** ppUnk) {\n+  if ((iid == __uuidof(IUnknown)) ||\n+      (iid == __uuidof(IMMNotificationClient))) {\n+    *ppUnk = static_cast<IMMNotificationClient*>(this);\n+  } else {\n+    *ppUnk = NULL;\n+    return E_NOINTERFACE;\n+  }\n+\n+  AddRef();\n+\n+ return S_OK;\n+}\n+\n+ULONG GSTDirectSoundNotify::AddRef() {\n+  return InterlockedIncrement(&m_cRef);\n+}\n+\n+ULONG GSTDirectSoundNotify::Release() {\n+  long lRef = InterlockedDecrement(&m_cRef);\n+  if (lRef == 0) {\n+    delete this;\n+  }\n+  return lRef;\n+}\n+\n+#endif \/\/ GSTREAMER_LITE\n\\ No newline at end of file\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gst-plugins-good\/sys\/directsound\/gstdirectsoundnotify.cpp","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef GSTREAMER_LITE\n+\n+#ifndef GSTDIRECTSOUNDNOTIFY_H\n+#define GSTDIRECTSOUNDNOTIFY_H\n+\n+#include <mmdeviceapi.h>\n+\n+typedef void (*GSTDSNotfierCallback)(void*);\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+  void* InitNotificator(GSTDSNotfierCallback pCallback, void *pData);\n+  void ReleaseNotificator(void *pObject);\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#ifdef __cplusplus\n+class GSTDirectSoundNotify : IMMNotificationClient\n+{\n+public:\n+  GSTDirectSoundNotify();\n+  ~GSTDirectSoundNotify();\n+\n+  bool Init(GSTDSNotfierCallback pCallback, void *pData);\n+  void Dispose();\n+\n+  \/\/ IUnknown\n+  IFACEMETHODIMP_(ULONG) AddRef();\n+  IFACEMETHODIMP_(ULONG) Release();\n+\n+private:\n+  \/\/ IMMNotificationClient\n+  IFACEMETHODIMP OnDeviceStateChanged(LPCWSTR pwstrDeviceId, DWORD dwNewState) { return S_OK; }\n+  IFACEMETHODIMP OnDeviceAdded(LPCWSTR pwstrDeviceId) { return S_OK; }\n+  IFACEMETHODIMP OnDeviceRemoved(LPCWSTR pwstrDeviceId) { return S_OK; }\n+  IFACEMETHODIMP OnDefaultDeviceChanged(EDataFlow flow, ERole role, LPCWSTR pwstrDefaultDeviceId);\n+  IFACEMETHODIMP OnPropertyValueChanged(LPCWSTR pwstrDeviceId, const PROPERTYKEY key) { return S_OK; }\n+\n+  long m_cRef;\n+  IMMDeviceEnumerator* m_pEnumerator;\n+  GSTDSNotfierCallback m_pCallback;\n+  void *m_pData;\n+  HRESULT m_hrCoInit;\n+\n+  \/\/ IUnknown\n+  IFACEMETHODIMP QueryInterface(const IID& iid, void** ppUnk);\n+};\n+#endif \/\/ __cplusplus\n+\n+#endif \/\/ GSTDIRECTSOUNDNOTIFY_H\n+#endif \/\/ GSTREAMER_LITE\n\\ No newline at end of file\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gst-plugins-good\/sys\/directsound\/gstdirectsoundnotify.h","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -57,0 +57,3 @@\n+#ifdef GSTREAMER_LITE\n+#include \"gstdirectsoundnotify.h\"\n+#endif \/\/ GSTREAMER_LITE\n@@ -70,0 +73,5 @@\n+#ifdef GSTREAMER_LITE\n+#define DS_RELOAD_TIMEOUT 60000 \/\/ 60 seconds\n+#define DS_RELOAD_INTERVAL 3000 \/\/ 3 seconds\n+#endif \/\/ GSTREAMER_LITE\n+\n@@ -184,0 +192,4 @@\n+#ifdef GSTREAMER_LITE\n+  ReleaseNotificator(dsoundsink->gst_ds_notifier);\n+#endif \/\/ GSTREAMER_LITE\n+\n@@ -266,0 +278,11 @@\n+#ifdef GSTREAMER_LITE\n+static void\n+gst_directsound_device_callback (GstDirectSoundSink * dsoundsink)\n+{\n+  if (dsoundsink->need_reload) {\n+    dsoundsink->reload = TRUE;\n+    dsoundsink->need_reload = TRUE;\n+  }\n+}\n+#endif \/\/ GSTREAMER_LITE\n+\n@@ -283,0 +306,6 @@\n+  memset(&dsoundsink->descSecondary, 0, sizeof(DSBUFFERDESC));\n+  memset(&dsoundsink->wfx, 0, sizeof(WAVEFORMATEX));\n+  dsoundsink->gst_ds_notifier = InitNotificator(&gst_directsound_device_callback,\n+                                                dsoundsink);\n+  dsoundsink->reload = FALSE;\n+  dsoundsink->need_reload = FALSE;\n@@ -665,0 +694,7 @@\n+#ifdef GSTREAMER_LITE\n+  \/\/ Store DSBUFFERDESC and WAVEFORMATEX in case we need to reload DirectSound\n+  memcpy(&dsoundsink->descSecondary, &descSecondary, sizeof(DSBUFFERDESC));\n+  memcpy(&dsoundsink->wfx, &wfx, sizeof(WAVEFORMATEX));\n+  dsoundsink->descSecondary.lpwfxFormat = (WAVEFORMATEX*)&dsoundsink->wfx;\n+#endif \/\/ GSTREAMER_LITE\n+\n@@ -712,0 +748,77 @@\n+#ifdef GSTREAMER_LITE\n+static void\n+gst_directsound_sink_prereload(GstAudioSink* asink)\n+{\n+  GstDirectSoundSink* dsoundsink;\n+  dsoundsink = GST_DIRECTSOUND_SINK(asink);\n+\n+  if (dsoundsink->pDSBSecondary) {\n+    IDirectSoundBuffer_Release(dsoundsink->pDSBSecondary);\n+    dsoundsink->pDSBSecondary = NULL;\n+  }\n+\n+  if (dsoundsink->pDS) {\n+    IDirectSound_Release(dsoundsink->pDS);\n+    dsoundsink->pDS = NULL;\n+  }\n+}\n+\n+static gboolean\n+gst_directsound_sink_reload(GstAudioSink* asink)\n+{\n+  GstDirectSoundSink* dsoundsink;\n+  HRESULT hRes = S_OK;\n+  gint timeout = DS_RELOAD_TIMEOUT;\n+\n+  dsoundsink = GST_DIRECTSOUND_SINK(asink);\n+\n+  \/\/ To avoid memory leaks in case it gets called again\n+  gst_directsound_sink_prereload(asink);\n+\n+  do {\n+    hRes = DirectSoundCreate(NULL, &dsoundsink->pDS, NULL);\n+    if (FAILED(hRes)) {\n+      Sleep(DS_RELOAD_INTERVAL);\n+      timeout -= DS_RELOAD_INTERVAL;\n+    }\n+  } while (FAILED(hRes) && timeout > 0);\n+\n+  if (FAILED(hRes)) {\n+    return FALSE;\n+  }\n+\n+  hRes = IDirectSound_SetCooperativeLevel(dsoundsink->pDS,\n+                                          GetDesktopWindow(), DSSCL_PRIORITY);\n+  if (FAILED(hRes)) {\n+    IDirectSound_Release(dsoundsink->pDS);\n+    dsoundsink->pDS = NULL;\n+    return FALSE;\n+  }\n+\n+  hRes = IDirectSound_CreateSoundBuffer(dsoundsink->pDS, &dsoundsink->descSecondary,\n+                                        &dsoundsink->pDSBSecondary, NULL);\n+  if (FAILED(hRes)) {\n+    IDirectSound_Release(dsoundsink->pDS);\n+    dsoundsink->pDS = NULL;\n+    return FALSE;\n+  }\n+\n+  gst_directsound_sink_set_volume(dsoundsink,\n+                            gst_directsound_sink_get_volume(dsoundsink), FALSE);\n+  gst_directsound_sink_set_mute(dsoundsink, dsoundsink->mute);\n+  gst_directsound_sink_set_pan(dsoundsink);\n+\n+  hRes = IDirectSoundBuffer_Play(dsoundsink->pDSBSecondary, 0, 0,\n+                                 DSBPLAY_LOOPING);\n+  if (FAILED(hRes)) {\n+    IDirectSound_Release(dsoundsink->pDS);\n+    dsoundsink->pDS = NULL;\n+    IDirectSoundBuffer_Release(dsoundsink->pDSBSecondary);\n+    dsoundsink->pDSBSecondary = NULL;\n+    return FALSE;\n+  }\n+\n+  return TRUE;\n+}\n+#endif \/\/ GSTREAMER_LITE\n+\n@@ -729,2 +842,10 @@\n-  if (dsoundsink->pDS == NULL)\n-  {\n+  if (dsoundsink->reload) {\n+    dsoundsink->reload = FALSE;\n+    if (!gst_directsound_sink_reload(asink)) {\n+      GST_ELEMENT_ERROR (dsoundsink, RESOURCE, OPEN_WRITE,\n+                        (\"Failed to load audio render device\"), (NULL));\n+      return -1;\n+    }\n+  }\n+  if (dsoundsink->pDS == NULL) {\n+no_device_write:\n@@ -821,0 +942,10 @@\n+#ifdef GSTREAMER_LITE\n+      if (hRes == DSERR_BUFFERLOST || hRes2 == DSERR_BUFFERLOST) {\n+        \/\/ Audio device gone. Call prereload to free current device and wait for\n+        \/\/ new device on callback.\n+        gst_directsound_sink_prereload(asink);\n+        dsoundsink->need_reload = TRUE;\n+        GST_DSOUND_UNLOCK (dsoundsink);\n+        goto no_device_write;\n+      }\n+#endif \/\/ GSTREAMER_LITE\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gst-plugins-good\/sys\/directsound\/gstdirectsoundsink.c","additions":133,"deletions":2,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -95,0 +95,5 @@\n+  DSBUFFERDESC descSecondary;\n+  WAVEFORMATEX wfx;\n+  void *gst_ds_notifier;\n+  gboolean reload;\n+  gboolean need_reload;\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/gstreamer-lite\/gst-plugins-good\/sys\/directsound\/gstdirectsoundsink.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+CPP_SOURCES = gst-plugins-good\/sys\/directsound\/gstdirectsoundnotify.cpp\n+\n@@ -105,1 +107,1 @@\n-OBJECTS = $(patsubst %.c,$(OBJBASE_DIR)\/%.obj,$(C_SOURCES))\n+OBJECTS = $(patsubst %.cpp,$(OBJBASE_DIR)\/%.obj,$(CPP_SOURCES)) $(patsubst %.c,$(OBJBASE_DIR)\/%.obj,$(C_SOURCES))\n@@ -119,0 +121,3 @@\n+$(OBJBASE_DIR)\/%.obj: $(SRCBASE_DIR)\/%.cpp\n+\t$(CC) $(CFLAGS) -TP -c -Fo$(shell cygpath -ma $@) $<\n+\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/projects\/win\/gstreamer-lite\/Makefile.gstplugins","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}