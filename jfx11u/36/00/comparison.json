{"files":[{"patch":"@@ -37,0 +37,1 @@\n+#if __has_include(<sys\/auxv.h>)\n@@ -38,0 +39,17 @@\n+#else\n+#include <linux\/auxvec.h>\n+\/\/ Provide an implementation for C libraries which do not ship one.\n+static unsigned long getauxval(unsigned long type)\n+{\n+    char** env = environ;\n+    while (*env++) { \/* no-op *\/ }\n+\n+    for (auto* auxv = reinterpret_cast<unsigned long*>(env); *auxv != AT_NULL; auxv += 2) {\n+        if (*auxv == type)\n+            return auxv[1];\n+    }\n+\n+    errno = ENOENT;\n+    return 0;\n+}\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/assembler\/MacroAssemblerARM64.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#include <initializer_list>\n+\n@@ -46,3 +48,4 @@\n-    static constexpr unsigned numGPRs = 16;\n-    static constexpr unsigned numFPRs = 16;\n-\n+#define DUMMY_REGISTER_VALUE(id, name, r, cs) 0,\n+    static constexpr unsigned numGPRs = std::initializer_list<int>({ FOR_EACH_GP_REGISTER(DUMMY_REGISTER_VALUE) }).size();\n+    static constexpr unsigned numFPRs = std::initializer_list<int>({ FOR_EACH_FP_REGISTER(DUMMY_REGISTER_VALUE) }).size();\n+#undef DUMMY_REGISTER_VALUE\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/assembler\/MacroAssemblerARMv7.h","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -243,1 +243,2 @@\n-        if ((newMin >> shiftAmount) != static_cast<T>(m_min))\n+        if (((newMin >> shiftAmount) != static_cast<T>(m_min))\n+            || ((newMax >> shiftAmount) != static_cast<T>(m_max))) {\n@@ -245,1 +246,0 @@\n-        if ((newMax >> shiftAmount) != static_cast<T>(m_max))\n@@ -247,0 +247,1 @@\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3ReduceStrength.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -280,0 +280,11 @@\n+    Vector<Vector<unsigned>> predecessors;\n+    predecessors.resize(graph.size());\n+    for (auto& block : graph) {\n+        if (block.isEntryBlock() || block.isExitBlock())\n+            continue;\n+        for (auto successorIndex : block.successors()) {\n+            if (!predecessors[successorIndex].contains(block.index()))\n+                predecessors[successorIndex].append(block.index());\n+        }\n+    }\n+\n@@ -286,0 +297,7 @@\n+        out.print(\"Predecessors: [\");\n+        for (unsigned predecessor : predecessors[block.index()]) {\n+            if (!graph[predecessor].isEntryBlock())\n+                out.print(\" #\", predecessor);\n+        }\n+        out.print(\" ]\\n\");\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/BytecodeDumper.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -948,1 +948,1 @@\n-void CodeBlock::setNumParameters(int newValue)\n+void CodeBlock::setNumParameters(unsigned newValue)\n@@ -2054,1 +2054,1 @@\n-    for (int i = 0; i < numParameters(); ++i)\n+    for (unsigned i = 0; i < numParameters(); ++i)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/CodeBlock.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,2 +159,2 @@\n-    int numParameters() const { return m_numParameters; }\n-    void setNumParameters(int newValue);\n+    unsigned numParameters() const { return m_numParameters; }\n+    void setNumParameters(unsigned newValue);\n@@ -162,1 +162,1 @@\n-    int numberOfArgumentsToSkip() const { return m_numberOfArgumentsToSkip; }\n+    unsigned numberOfArgumentsToSkip() const { return m_numberOfArgumentsToSkip; }\n@@ -164,1 +164,1 @@\n-    int numCalleeLocals() const { return m_numCalleeLocals; }\n+    unsigned numCalleeLocals() const { return m_numCalleeLocals; }\n@@ -166,2 +166,2 @@\n-    int numVars() const { return m_numVars; }\n-    int numTmps() const { return m_unlinkedCode->hasCheckpoints() * maxNumCheckpointTmps; }\n+    unsigned numVars() const { return m_numVars; }\n+    unsigned numTmps() const { return m_unlinkedCode->hasCheckpoints() * maxNumCheckpointTmps; }\n@@ -169,1 +169,1 @@\n-    int* addressOfNumParameters() { return &m_numParameters; }\n+    unsigned* addressOfNumParameters() { return &m_numParameters; }\n@@ -246,1 +246,1 @@\n-        return reg.offset() >= m_numVars;\n+        return reg.offset() >= static_cast<int>(m_numVars);\n@@ -999,4 +999,4 @@\n-    int m_numCalleeLocals;\n-    int m_numVars;\n-    int m_numParameters;\n-    int m_numberOfArgumentsToSkip { 0 };\n+    unsigned m_numCalleeLocals;\n+    unsigned m_numVars;\n+    unsigned m_numParameters;\n+    unsigned m_numberOfArgumentsToSkip { 0 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/CodeBlock.h","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -182,2 +182,2 @@\n-    int numCalleeLocals() const { return m_numCalleeLocals; }\n-    int numVars() const { return m_numVars; }\n+    unsigned numCalleeLocals() const { return m_numCalleeLocals; }\n+    unsigned numVars() const { return m_numVars; }\n@@ -369,3 +369,3 @@\n-    int m_numVars { 0 };\n-    int m_numCalleeLocals { 0 };\n-    int m_numParameters { 0 };\n+    unsigned m_numVars { 0 };\n+    unsigned m_numCalleeLocals { 0 };\n+    unsigned m_numParameters { 0 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/UnlinkedCodeBlock.h","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -61,2 +61,2 @@\n-    int numCalleeLocals() const { return m_codeBlock->m_numCalleeLocals; }\n-    int numVars() const { return m_codeBlock->m_numVars; }\n+    unsigned numCalleeLocals() const { return m_codeBlock->m_numCalleeLocals; }\n+    unsigned numVars() const { return m_codeBlock->m_numVars; }\n@@ -73,2 +73,2 @@\n-    void setNumCalleeLocals(int numCalleeLocals) { m_codeBlock->m_numCalleeLocals = numCalleeLocals; }\n-    void setNumVars(int numVars) { m_codeBlock->m_numVars = numVars; }\n+    void setNumCalleeLocals(unsigned numCalleeLocals) { m_codeBlock->m_numCalleeLocals = numCalleeLocals; }\n+    void setNumVars(unsigned numVars) { m_codeBlock->m_numVars = numVars; }\n@@ -77,1 +77,1 @@\n-    void setNumParameters(int newValue) { m_codeBlock->setNumParameters(newValue); }\n+    void setNumParameters(unsigned newValue) { m_codeBlock->setNumParameters(newValue); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/UnlinkedCodeBlockGenerator.h","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -286,1 +286,1 @@\n-    RELEASE_ASSERT(static_cast<unsigned>(m_codeBlock->numCalleeLocals()) < static_cast<unsigned>(FirstConstantRegisterIndex));\n+    RELEASE_ASSERT(m_codeBlock->numCalleeLocals() < static_cast<unsigned>(FirstConstantRegisterIndex));\n@@ -4003,1 +4003,1 @@\n-    ASSERT_UNUSED(numVars, m_codeBlock->numVars() == static_cast<int>(numVars + 1)); \/\/ Should have only created one new \"var\" for the function name scope.\n+    ASSERT_UNUSED(numVars, m_codeBlock->numVars() == numVars + 1); \/\/ Should have only created one new \"var\" for the function name scope.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecompiler\/BytecodeGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-    int numCalleeLocals = std::max<int>(m_codeBlock->numCalleeLocals(), m_calleeLocals.size());\n+    size_t numCalleeLocals = std::max<size_t>(m_codeBlock->numCalleeLocals(), m_calleeLocals.size());\n@@ -166,1 +166,2 @@\n-    m_codeBlock->setNumCalleeLocals(numCalleeLocals);\n+    m_codeBlock->setNumCalleeLocals(static_cast<unsigned>(numCalleeLocals));\n+    RELEASE_ASSERT(numCalleeLocals == m_codeBlock->numCalleeLocals());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecompiler\/BytecodeGeneratorBaseInlines.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3472,1 +3472,1 @@\n-            result = generator.emitNode(result.get(), m_right); \/\/ Execute side effects first.\n+            generator.emitNode(result.get(), m_right); \/\/ Execute side effects first.\n@@ -3489,1 +3489,1 @@\n-            result = generator.emitNode(result.get(), m_right);\n+            generator.emitNode(result.get(), m_right);\n@@ -3502,1 +3502,1 @@\n-        result = generator.emitNode(result.get(), m_right);\n+        generator.emitNode(result.get(), m_right);\n@@ -3512,2 +3512,4 @@\n-    RefPtr<RegisterID> result = generator.emitGetFromScope(generator.tempDestination(dst), scope.get(), var, ThrowIfNotFound);\n-    generator.emitTDZCheckIfNecessary(var, result.get(), nullptr);\n+    RefPtr<RegisterID> uncheckedResult = generator.newTemporary();\n+\n+    generator.emitGetFromScope(uncheckedResult.get(), scope.get(), var, ThrowIfNotFound);\n+    generator.emitTDZCheckIfNecessary(var, uncheckedResult.get(), nullptr);\n@@ -3516,1 +3518,1 @@\n-    emitShortCircuitAssignment(generator, result.get(), m_operator, afterAssignment.get());\n+    emitShortCircuitAssignment(generator, uncheckedResult.get(), m_operator, afterAssignment.get());\n@@ -3518,1 +3520,1 @@\n-    generator.emitNode(result.get(), m_right); \/\/ Execute side effects first.\n+    generator.emitNode(uncheckedResult.get(), m_right); \/\/ Execute side effects first.\n@@ -3526,2 +3528,2 @@\n-        result = generator.emitPutToScope(scope.get(), var, result.get(), ThrowIfNotFound, InitializationMode::NotInitialization);\n-        generator.emitProfileType(result.get(), var, divotStart(), divotEnd());\n+        generator.emitPutToScope(scope.get(), var, uncheckedResult.get(), ThrowIfNotFound, InitializationMode::NotInitialization);\n+        generator.emitProfileType(uncheckedResult.get(), var, divotStart(), divotEnd());\n@@ -3531,1 +3533,1 @@\n-    return generator.move(dst, result.get());\n+    return generator.move(generator.finalDestination(dst, uncheckedResult.get()), uncheckedResult.get());\n@@ -3645,1 +3647,1 @@\n-    RefPtr<RegisterID> result;\n+    RefPtr<RegisterID> result = generator.tempDestination(dst);\n@@ -3650,1 +3652,1 @@\n-        result = generator.emitGetById(generator.tempDestination(dst), base.get(), thisValue.get(), m_ident);\n+        generator.emitGetById(result.get(), base.get(), thisValue.get(), m_ident);\n@@ -3652,1 +3654,1 @@\n-        result = generator.emitGetById(generator.tempDestination(dst), base.get(), m_ident);\n+        generator.emitGetById(result.get(), base.get(), m_ident);\n@@ -3657,1 +3659,1 @@\n-    result = generator.emitNode(result.get(), m_right);\n+    generator.emitNode(result.get(), m_right);\n@@ -3660,1 +3662,1 @@\n-        result = generator.emitPutById(base.get(), thisValue.get(), m_ident, result.get());\n+        generator.emitPutById(base.get(), thisValue.get(), m_ident, result.get());\n@@ -3662,1 +3664,1 @@\n-        result = generator.emitPutById(base.get(), m_ident, result.get());\n+        generator.emitPutById(base.get(), m_ident, result.get());\n@@ -3741,1 +3743,1 @@\n-    RefPtr<RegisterID> result;\n+    RefPtr<RegisterID> result = generator.tempDestination(dst);\n@@ -3746,1 +3748,1 @@\n-        result = generator.emitGetByVal(generator.tempDestination(dst), base.get(), thisValue.get(), property.get());\n+        generator.emitGetByVal(result.get(), base.get(), thisValue.get(), property.get());\n@@ -3748,1 +3750,1 @@\n-        result = generator.emitGetByVal(generator.tempDestination(dst), base.get(), property.get());\n+        generator.emitGetByVal(result.get(), base.get(), property.get());\n@@ -3753,1 +3755,1 @@\n-    result = generator.emitNode(result.get(), m_right);\n+    generator.emitNode(result.get(), m_right);\n@@ -3756,1 +3758,1 @@\n-        result = generator.emitPutByVal(base.get(), thisValue.get(), property.get(), result.get());\n+        generator.emitPutByVal(base.get(), thisValue.get(), property.get(), result.get());\n@@ -3758,1 +3760,1 @@\n-        result = generator.emitPutByVal(base.get(), property.get(), result.get());\n+        generator.emitPutByVal(base.get(), property.get(), result.get());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecompiler\/NodesCodegen.cpp","additions":24,"deletions":22,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1500,1 +1500,1 @@\n-            if (argumentCountIncludingThis != static_cast<int>(callFrame->argumentCountIncludingThis))\n+            if (argumentCountIncludingThis != callFrame->argumentCountIncludingThis)\n@@ -1510,1 +1510,1 @@\n-            if (argumentCountIncludingThis > m_codeBlock->numParameters())\n+            if (static_cast<unsigned>(argumentCountIncludingThis) > m_codeBlock->numParameters())\n@@ -1536,2 +1536,2 @@\n-        int argIndex = 0;\n-        for (; argIndex < argumentCountIncludingThis; ++argIndex) {\n+        unsigned argIndex = 0;\n+        for (; argIndex < static_cast<unsigned>(argumentCountIncludingThis); ++argIndex) {\n@@ -1547,1 +1547,1 @@\n-        for (int i = 0; i < stackEntry->m_codeBlock->numVars(); ++i)\n+        for (unsigned i = 0; i < stackEntry->m_codeBlock->numVars(); ++i)\n@@ -1603,1 +1603,1 @@\n-        if (codeBlock->numParameters() > argumentCountIncludingThis) {\n+        if (codeBlock->numParameters() > static_cast<unsigned>(argumentCountIncludingThis)) {\n@@ -5375,1 +5375,1 @@\n-            for (int i = 0; i < m_inlineStackTop->m_codeBlock->numVars(); ++i)\n+            for (unsigned i = 0; i < m_inlineStackTop->m_codeBlock->numVars(); ++i)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGByteCodeParser.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        for (int local = 0; local < baseline->numCalleeLocals(); ++local) {\n+        for (unsigned local = 0; local < baseline->numCalleeLocals(); ++local) {\n@@ -116,1 +116,1 @@\n-        for (int argument = 0; argument < baseline->numParameters(); ++argument) {\n+        for (unsigned argument = 0; argument < baseline->numParameters(); ++argument) {\n@@ -128,1 +128,1 @@\n-        for (int local = 0; local < baseline->numCalleeLocals(); ++local) {\n+        for (unsigned local = 0; local < baseline->numCalleeLocals(); ++local) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGOSREntrypointCreationPhase.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2082,1 +2082,1 @@\n-    for (int i = 0; i < m_jit.codeBlock()->numParameters(); ++i) {\n+    for (unsigned i = 0; i < m_jit.codeBlock()->numParameters(); ++i) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSpeculativeJIT.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-                for (int i = 0; i < codeBlock()->numParameters(); ++i)\n+                for (unsigned i = 0; i < codeBlock()->numParameters(); ++i)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/ftl\/FTLLowerDFGToB3.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,2 +116,1 @@\n-    RELEASE_ASSERT(\n-        static_cast<int>(values.numberOfLocals()) == baseline->numCalleeLocals());\n+    RELEASE_ASSERT(values.numberOfLocals() == baseline->numCalleeLocals());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/ftl\/FTLOSREntry.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    int parameterCountIncludingThis;\n+    unsigned parameterCountIncludingThis;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/interpreter\/CallFrameClosure.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    if (codeBlock && argCountIncludingThis < codeBlock->numParameters())\n+    if (codeBlock && static_cast<unsigned>(argCountIncludingThis) < codeBlock->numParameters())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/interpreter\/ProtoCallFrameInlines.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-            for (int argument = 0; argument < m_codeBlock->numParameters(); ++argument) {\n+            for (unsigned argument = 0; argument < m_codeBlock->numParameters(); ++argument) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/jit\/JIT.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -428,1 +428,1 @@\n-    loadp Callee[cfr], t0\n+    loadp Callee + PayloadOffset[cfr], t0\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LowLevelInterpreter32_64.asm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    if (argumentCountIncludingThis >= codeBlock->numParameters())\n+    if (static_cast<unsigned>(argumentCountIncludingThis) >= codeBlock->numParameters())\n@@ -69,1 +69,1 @@\n-    if (argumentCountIncludingThis >= codeBlock->numParameters())\n+    if (static_cast<unsigned>(argumentCountIncludingThis) >= codeBlock->numParameters())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/CommonSlowPaths.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -470,1 +470,1 @@\n-        RELEASE_ASSERT(it - end < codeBlock->numCalleeLocals() - codeBlock->numVars());\n+        RELEASE_ASSERT(static_cast<unsigned>(it - end) < codeBlock->numCalleeLocals() - codeBlock->numVars());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/tools\/VMInspector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-    int numVars() const { return m_numVars; }\n-    int numCalleeLocals() const { return m_numCalleeLocals; }\n+    unsigned numVars() const { return m_numVars; }\n+    unsigned numCalleeLocals() const { return m_numCalleeLocals; }\n@@ -75,2 +75,2 @@\n-    void setNumVars(int numVars) { m_numVars = numVars; }\n-    void setNumCalleeLocals(int numCalleeLocals) { m_numCalleeLocals = numCalleeLocals; }\n+    void setNumVars(unsigned numVars) { m_numVars = numVars; }\n+    void setNumCalleeLocals(unsigned numCalleeLocals) { m_numCalleeLocals = numCalleeLocals; }\n@@ -129,1 +129,1 @@\n-    int m_numVars { 0 };\n+    unsigned m_numVars { 0 };\n@@ -131,1 +131,1 @@\n-    int m_numCalleeLocals { 0 };\n+    unsigned m_numCalleeLocals { 0 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmFunctionCodeBlock.h","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-        return virtualRegisterForLocal(m_stackSize - 1);\n+        return virtualRegisterForLocal((m_stackSize - 1).unsafeGet());\n@@ -318,1 +318,1 @@\n-        drop = m_stackSize - target.stackSize() - target.branchTargetArity();\n+        drop = (m_stackSize - target.stackSize() - target.branchTargetArity()).unsafeGet();\n@@ -351,1 +351,1 @@\n-        walkExpressionStack(expressionStack, m_stackSize, functor);\n+        walkExpressionStack(expressionStack, m_stackSize.unsafeGet(), functor);\n@@ -376,1 +376,1 @@\n-            ASSERT(expression == slot || expression.isConstant() || expression.isArgument() || expression.toLocal() < m_codeBlock->m_numVars);\n+            ASSERT(expression == slot || expression.isConstant() || expression.isArgument() || static_cast<unsigned>(expression.toLocal()) < m_codeBlock->m_numVars);\n@@ -388,1 +388,1 @@\n-            ASSERT(expression.value() == slot || expression.value().isConstant() || expression.value().isArgument() || expression.value().toLocal() < m_codeBlock->m_numVars);\n+            ASSERT(expression.value() == slot || expression.value().isConstant() || expression.value().isArgument() || static_cast<unsigned>(expression.value().toLocal()) < m_codeBlock->m_numVars);\n@@ -404,1 +404,1 @@\n-            ASSERT(expression.value() == slot || expression.value().isConstant() || expression.value().isArgument() || expression.value().toLocal() < m_codeBlock->m_numVars);\n+            ASSERT(expression.value() == slot || expression.value().isConstant() || expression.value().isArgument() || static_cast<unsigned>(expression.value().toLocal()) < m_codeBlock->m_numVars);\n@@ -435,2 +435,2 @@\n-    unsigned m_stackSize { 0 };\n-    unsigned m_maxStackSize { 0 };\n+    Checked<unsigned> m_stackSize { 0 };\n+    Checked<unsigned> m_maxStackSize { 0 };\n@@ -485,1 +485,3 @@\n-    m_codeBlock->m_numCalleeLocals = WTF::roundUpToMultipleOf(stackAlignmentRegisters(), m_maxStackSize);\n+    size_t numCalleeLocals = WTF::roundUpToMultipleOf(stackAlignmentRegisters(), m_maxStackSize.unsafeGet());\n+    m_codeBlock->m_numCalleeLocals = numCalleeLocals;\n+    RELEASE_ASSERT(numCalleeLocals == m_codeBlock->m_numCalleeLocals);\n@@ -573,1 +575,1 @@\n-    if (m_stackSize % stackAlignmentRegisters())\n+    if (m_stackSize.unsafeGet() % stackAlignmentRegisters())\n@@ -582,1 +584,1 @@\n-    const unsigned stackOffset = m_stackSize;\n+    const unsigned stackOffset = m_stackSize.unsafeGet();\n@@ -871,1 +873,1 @@\n-    block = ControlType::loop(signature, m_stackSize, WTFMove(body), WTFMove(continuation));\n+    block = ControlType::loop(signature, m_stackSize.unsafeGet(), WTFMove(body), WTFMove(continuation));\n@@ -880,1 +882,1 @@\n-    for (int32_t i = gprCount + fprCount + numberOfLLIntCalleeSaveRegisters; i < m_codeBlock->m_numVars; i++)\n+    for (uint32_t i = gprCount + fprCount + numberOfLLIntCalleeSaveRegisters; i < m_codeBlock->m_numVars; i++)\n@@ -899,1 +901,1 @@\n-    return ControlType::topLevel(signature, m_stackSize, newLabel());\n+    return ControlType::topLevel(signature, m_stackSize.unsafeGet(), newLabel());\n@@ -905,1 +907,1 @@\n-    newBlock = ControlType::block(signature, m_stackSize, newLabel());\n+    newBlock = ControlType::block(signature, m_stackSize.unsafeGet(), newLabel());\n@@ -918,1 +920,1 @@\n-    result = ControlType::if_(signature, m_stackSize, WTFMove(alternate), WTFMove(continuation));\n+    result = ControlType::if_(signature, m_stackSize.unsafeGet(), WTFMove(alternate), WTFMove(continuation));\n@@ -936,1 +938,1 @@\n-    data = ControlType::block(data.m_signature, m_stackSize, WTFMove(data.m_continuation));\n+    data = ControlType::block(data.m_signature, m_stackSize.unsafeGet(), WTFMove(data.m_continuation));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmLLIntGenerator.cpp","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+        uintptr_t begin;\n@@ -1018,0 +1019,1 @@\n+        backTrack->begin = input.getPos();\n@@ -1171,1 +1173,13 @@\n-                if (result != JSRegExpNoMatch || backTrack->matchAmount < term.atom.quantityMinCount)\n+                if (backTrack->matchAmount < term.atom.quantityMinCount) {\n+                    while (backTrack->matchAmount) {\n+                        context = backTrack->lastContext;\n+                        resetMatches(term, context);\n+                        popParenthesesDisjunctionContext(backTrack);\n+                        freeParenthesesDisjunctionContext(context);\n+                    }\n+\n+                    input.setPos(backTrack->begin);\n+                    return result;\n+                }\n+\n+                if (result != JSRegExpNoMatch)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/yarr\/YarrInterpreter.cpp","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-#include <ucontext.h>\n+#include <sys\/ucontext.h>\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/PlatformRegisters.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -974,0 +974,1 @@\n+        10080, \/\/ amanda\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/URL.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -149,2 +149,5 @@\n-    auto& jsProcessor = *JSC::jsCast<JSAudioWorkletProcessor*>(object);\n-    jsProcessor.wrapped().setProcessCallback(makeUnique<JSCallbackDataStrong>(&jsProcessor, globalObject));\n+    auto* jsProcessor = JSC::jsDynamicCast<JSAudioWorkletProcessor*>(vm, object);\n+    if (!jsProcessor)\n+        return nullptr;\n+\n+    jsProcessor->wrapped().setProcessCallback(makeUnique<JSCallbackDataStrong>(jsProcessor, globalObject));\n@@ -152,1 +155,1 @@\n-    return &jsProcessor.wrapped();\n+    return &jsProcessor->wrapped();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioWorkletGlobalScope.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1165,0 +1165,3 @@\n+    RefPtr<Element> protector;\n+    if (previousTargetStyleable)\n+        protector = makeRefPtr(previousTargetStyleable->element);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/animation\/KeyframeEffect.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -386,0 +386,1 @@\n+    Ref protectedThis { *this };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Element.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include <wtf\/WeakPtr.h>\n@@ -57,2 +58,2 @@\n-    Vector<T*> m_dispatchSoonList;\n-    Vector<T*> m_dispatchingList;\n+    Vector<WeakPtr<T>> m_dispatchSoonList;\n+    Vector<WeakPtr<T>> m_dispatchingList;\n@@ -69,1 +70,1 @@\n-    m_dispatchSoonList.append(&sender);\n+    m_dispatchSoonList.append(makeWeakPtr(sender));\n@@ -100,1 +101,1 @@\n-    m_dispatchingList.swap(m_dispatchSoonList);\n+    m_dispatchingList = std::exchange(m_dispatchSoonList, { });\n@@ -102,1 +103,1 @@\n-        if (T* sender = event) {\n+        if (auto sender = event.get()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/EventSender.h","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,0 +34,3 @@\n+#include \"Document.h\"\n+#include \"SecurityOrigin.h\"\n+#include \"ThreadableBlobRegistry.h\"\n@@ -36,1 +39,0 @@\n-#include \"SecurityOrigin.h\"\n@@ -55,1 +57,24 @@\n-String BlobURL::getOrigin(const URL& url)\n+static const Document* blobOwner(const SecurityOrigin& blobOrigin)\n+{\n+    if (!isMainThread())\n+        return nullptr;\n+\n+    for (const auto* document : Document::allDocuments()) {\n+        if (&document->securityOrigin() == &blobOrigin)\n+            return document;\n+    }\n+    return nullptr;\n+}\n+\n+URL BlobURL::getOriginURL(const URL& url)\n+{\n+    ASSERT(url.protocolIs(kBlobProtocol));\n+\n+    if (auto blobOrigin = ThreadableBlobRegistry::getCachedOrigin(url)) {\n+        if (auto* document = blobOwner(*blobOrigin))\n+            return document->url();\n+    }\n+    return SecurityOrigin::extractInnerURL(url);\n+}\n+\n+bool BlobURL::isSecureBlobURL(const URL& url)\n@@ -59,3 +84,6 @@\n-    unsigned startIndex = url.pathStart();\n-    unsigned endIndex = url.pathAfterLastSlash();\n-    return url.string().substring(startIndex, endIndex - startIndex - 1);\n+    \/\/ As per https:\/\/github.com\/w3c\/webappsec-mixed-content\/issues\/41, Blob URL is secure if the document that created it is secure.\n+    if (auto origin = ThreadableBlobRegistry::getCachedOrigin(url)) {\n+        if (auto* document = blobOwner(*origin))\n+            return document->isSecureContext();\n+    }\n+    return SecurityOrigin::isSecure(url);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/fileapi\/BlobURL.cpp","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -52,1 +52,3 @@\n-    static String getOrigin(const URL&);\n+\n+    static URL getOriginURL(const URL&);\n+    static bool isSecureBlobURL(const URL&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/fileapi\/BlobURL.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,1 +97,3 @@\n-    return BlobURL::getOrigin(url) == \"null\";\n+    unsigned startIndex = url.pathStart();\n+    unsigned endIndex = url.pathAfterLastSlash();\n+    return url.string().substring(startIndex, endIndex - startIndex - 1) == \"null\";\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/fileapi\/ThreadableBlobRegistry.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2000,0 +2000,9 @@\n+    if (!portAllowed(url)) {\n+        if (actionIfInvalid == Complain) {\n+            if (frame)\n+                FrameLoader::reportBlockedLoadFailed(*frame, url);\n+            ERROR_LOG(LOGIDENTIFIER, url , \" was rejected because the port is not allowed\");\n+        }\n+        return false;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLMediaElement.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2004-2017 Apple Inc. All rights reserved.\n+ * Copyright (C) 2004-2021 Apple Inc. All rights reserved.\n@@ -64,0 +64,1 @@\n+#include \"ScriptDisallowedScope.h\"\n@@ -2441,0 +2442,5 @@\n+    if (!fontProxy()->realized())\n+        return false;\n+\n+    ScriptDisallowedScope::InMainThread scriptDisallowedScope;\n+\n@@ -2444,2 +2450,0 @@\n-    if (!this->fontProxy()->realized())\n-        return false;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/canvas\/CanvasRenderingContext2DBase.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -635,1 +635,1 @@\n-            RELEASE_LOG_IF_ALLOWED(\"willSendRequest: canceling - port not allowed\");\n+            RELEASE_LOG_IF_ALLOWED(\"willSendRequest: canceling - redirecting to a URL with a blocked port\");\n@@ -637,1 +637,1 @@\n-                m_frame->document()->addConsoleMessage(MessageSource::Security, MessageLevel::Error, \"Not allowed to use restricted network port: \" + newRequest.url().string());\n+                FrameLoader::reportBlockedLoadFailed(*m_frame, newRequest.url());\n@@ -698,1 +698,1 @@\n-    auto navigationPolicyCompletionHandler = [this, protectedThis = makeRef(*this), completionHandler = WTFMove(completionHandler)] (ResourceRequest&& request, WeakPtr<FormState>&&, NavigationPolicyDecision navigationPolicyDecision) mutable {\n+    auto navigationPolicyCompletionHandler = [this, protectedThis = makeRef(*this), protectedFrame = makeRef(*m_frame), completionHandler = WTFMove(completionHandler)] (ResourceRequest&& request, WeakPtr<FormState>&&, NavigationPolicyDecision navigationPolicyDecision) mutable {\n@@ -1125,0 +1125,3 @@\n+    if (!frameLoader())\n+        return {};\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/DocumentLoader.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1229,0 +1229,1 @@\n+        FRAMELOADER_RELEASE_LOG_IF_ALLOWED(ResourceLoading, \"loadFrameRequest: canceling - Not allowed to load local resource\");\n@@ -1233,0 +1234,6 @@\n+    if (!portAllowed(url)) {\n+        FRAMELOADER_RELEASE_LOG_IF_ALLOWED(ResourceLoading, \"loadFrameRequest: canceling - port not allowed\");\n+        reportBlockedLoadFailed(m_frame, url);\n+        return;\n+    }\n+\n@@ -1642,0 +1649,7 @@\n+void FrameLoader::reportBlockedLoadFailed(Frame& frame, const URL& url)\n+{\n+    ASSERT(!url.isEmpty());\n+    auto message = makeString(\"Not allowed to use restricted network port \", url.port().value(), \": \", url.stringCenterEllipsizedToLength());\n+    frame.document()->addConsoleMessage(MessageSource::Security, MessageLevel::Error, message);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+    static void reportBlockedLoadFailed(Frame&, const URL&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -555,0 +555,1 @@\n+    errorEventSender().cancelEvent(*this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ImageLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-class ImageLoader : public CachedImageClient {\n+class ImageLoader : public CachedImageClient, public CanMakeWeakPtr<ImageLoader> {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ImageLoader.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,5 @@\n+    if (!portAllowed(url)) {\n+        FrameLoader::reportBlockedLoadFailed(frame, url);\n+        return;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/PingLoader.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+#include \"ThreadableBlobRegistry.h\"\n@@ -113,2 +114,3 @@\n-    URL temporaryBlobURL = BlobURL::createPublicURL(&m_frame.document()->securityOrigin());\n-    blobRegistry().registerBlobURL(temporaryBlobURL, request.url());\n+    auto origin = SecurityOrigin::create(BlobURL::getOriginURL(request.url()));\n+    URL temporaryBlobURL = BlobURL::createPublicURL(origin.ptr());\n+    ThreadableBlobRegistry::registerBlobURL(origin.ptr(), temporaryBlobURL, request.url());\n@@ -119,1 +121,1 @@\n-        blobRegistry().unregisterBlobURL(temporaryBlobURL);\n+        ThreadableBlobRegistry::unregisterBlobURL(temporaryBlobURL);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/PolicyChecker.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -146,0 +146,7 @@\n+    if (!portAllowed(clientRequest.url())) {\n+        RELEASE_LOG_IF_ALLOWED(\"init: Cancelling load to a blocked port.\");\n+        FrameLoader::reportBlockedLoadFailed(*m_frame, clientRequest.url());\n+        releaseResources();\n+        return completionHandler(false);\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ResourceLoader.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -143,0 +143,5 @@\n+        if (!portAllowed(url)) {\n+            FrameLoader::reportBlockedLoadFailed(m_frame, url);\n+            return false;\n+        }\n+\n@@ -266,0 +271,5 @@\n+    if (!portAllowed(url)) {\n+        FrameLoader::reportBlockedLoadFailed(m_frame, url);\n+        return nullptr;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/SubframeLoader.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -283,0 +283,8 @@\n+        if (!portAllowed(newRequest.url())) {\n+            RELEASE_LOG_IF_ALLOWED(\"willSendRequestInternal: resource load (redirect) canceled because it attempted to use a blocked port\");\n+            if (m_frame)\n+                FrameLoader::reportBlockedLoadFailed(*m_frame, newRequest.url());\n+            cancel(frameLoader()->blockedError(newRequest));\n+            return completionHandler(WTFMove(newRequest));\n+        }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/SubresourceLoader.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -900,0 +900,7 @@\n+    if (!portAllowed(url)) {\n+        if (forPreload == ForPreload::No)\n+            FrameLoader::reportBlockedLoadFailed(frame, url);\n+        RELEASE_LOG_IF_ALLOWED_WITH_FRAME(\"CachedResourceLoader::requestResource URL has a blocked port\", frame);\n+        return makeUnexpected(frame.loader().blockedError(request.resourceRequest()));\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/CachedResourceLoader.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2568,2 +2568,2 @@\n-            if (m_lastElementUnderMouse)\n-                m_lastElementUnderMouse->dispatchMouseEvent(platformMouseEvent, eventNames().mouseoutEvent, 0, m_elementUnderMouse.get());\n+            if (auto lastElementUnderMouse = m_lastElementUnderMouse)\n+                lastElementUnderMouse->dispatchMouseEvent(platformMouseEvent, eventNames().mouseoutEvent, 0, m_elementUnderMouse.get());\n@@ -2576,2 +2576,2 @@\n-            if (m_elementUnderMouse)\n-                m_elementUnderMouse->dispatchMouseEvent(platformMouseEvent, eventNames().mouseoverEvent, 0, m_lastElementUnderMouse.get());\n+            if (auto elementUnderMouse = m_elementUnderMouse)\n+                elementUnderMouse->dispatchMouseEvent(platformMouseEvent, eventNames().mouseoverEvent, 0, m_lastElementUnderMouse.get());\n@@ -2665,1 +2665,2 @@\n-    if (m_elementUnderMouse && !m_elementUnderMouse->dispatchMouseEvent(platformMouseEvent, eventType, clickCount))\n+    if (auto elementUnderMouse = m_elementUnderMouse) {\n+        if (!elementUnderMouse->dispatchMouseEvent(platformMouseEvent, eventType, clickCount))\n@@ -2667,0 +2668,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/EventHandler.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -184,1 +184,2 @@\n-    m_element->dispatchMouseEvent(event, eventType, event.clickCount());\n+    Ref protectedElement { *m_element };\n+    protectedElement->dispatchMouseEvent(event, eventType, event.clickCount());\n@@ -188,1 +189,1 @@\n-        m_element->dispatchMouseEvent(event, eventNames().clickEvent, event.clickCount());\n+        protectedElement->dispatchMouseEvent(event, eventNames().clickEvent, event.clickCount());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/PointerLockController.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1187,1 +1187,2 @@\n-                if (!element)\n+                RefPtr protectedElement { element.get() };\n+                if (!protectedElement)\n@@ -1191,1 +1192,1 @@\n-                    element->dispatchMouseEvent(platformEvent, eventType, detail, relatedTarget);\n+                    protectedElement->dispatchMouseEvent(platformEvent, eventType, detail, relatedTarget);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Quirks.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -266,2 +266,2 @@\n-    if (shouldUseInnerURL(url) && LegacySchemeRegistry::shouldTreatURLSchemeAsSecure(extractInnerURL(url).protocol().toStringWithoutCopying()))\n-        return true;\n+    if (shouldUseInnerURL(url))\n+        return LegacySchemeRegistry::shouldTreatURLSchemeAsSecure(extractInnerURL(url).protocol().toStringWithoutCopying()) || BlobURL::isSecureBlobURL(url);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/SecurityOrigin.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"BlobURL.h\"\n@@ -280,1 +281,1 @@\n-bool ContentSecurityPolicy::urlMatchesSelf(const URL& url) const\n+bool ContentSecurityPolicy::urlMatchesSelf(const URL& url, bool forFrameSrc) const\n@@ -282,0 +283,4 @@\n+    \/\/ As per https:\/\/w3c.github.io\/webappsec-csp\/#match-url-to-source-expression, we compare the URL origin with the policy origin.\n+    \/\/ We get origin using https:\/\/url.spec.whatwg.org\/#concept-url-origin which has specific blob URLs treatment as follow.\n+    if (forFrameSrc && url.protocolIsBlob())\n+        return m_selfSource->matches(BlobURL::getOriginURL(url));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/csp\/ContentSecurityPolicy.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-    bool urlMatchesSelf(const URL&) const;\n+    bool urlMatchesSelf(const URL&, bool forFrameSrc) const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/csp\/ContentSecurityPolicy.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,2 @@\n-    if (m_allowSelf && m_policy.urlMatchesSelf(url))\n+    if (m_allowSelf && m_policy.urlMatchesSelf(url, equalIgnoringASCIICase(m_directiveName, ContentSecurityPolicyDirectiveNames::frameSrc)\n+))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/csp\/ContentSecurityPolicySourceList.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,4 @@\n+    \/\/ soundcloud.com serves broken MSE audio fragments with WebKitGTK's standard user agent.\n+    if (baseDomain == \"soundcloud.com\")\n+        return true;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/UserAgentQuirks.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n-    m_kineticAnimation->clearScrollHistory();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/generic\/ScrollAnimatorGeneric.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    m_owner.appendDrawGraphsItemWithCachedFont(font, glyphs, advances, numGlyphs, startPoint, smoothingMode);\n+    m_owner.appendDrawGraphsItemWithCachedFont(font, glyphs, advances, numGlyphs, startPoint, m_smoothingMode);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/displaylists\/DisplayListDrawGlyphsRecorderJava.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -479,0 +479,3 @@\n+    if (m_type == Surfaceless)\n+        return;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/egl\/GLContextEGL.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -266,2 +266,1 @@\n-        clipTransform.translate(options.offset.width() + m_state.boundsOrigin.x(),\n-            options.offset.height() + m_state.boundsOrigin.y());\n+        clipTransform.translate(options.offset.width(), options.offset.height());\n@@ -270,0 +269,1 @@\n+        clipTransform.translate(m_state.boundsOrigin.x(), m_state.boundsOrigin.y());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/texmap\/TextureMapperLayer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,3 +89,2 @@\n-        \/\/ Store m_page in a local variable, clearing m_page, so that SVGImageChromeClient knows we're destructed.\n-        std::unique_ptr<Page> currentPage = WTFMove(m_page);\n-        currentPage->mainFrame().loader().frameDetached(); \/\/ Break both the loader and view references to the frame\n+        \/\/ Clear m_page, so that SVGImageChromeClient knows we're destructed.\n+        m_page = nullptr;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/svg\/graphics\/SVGImage.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -82,1 +82,0 @@\n-WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_ATTACHMENT_ELEMENT PUBLIC ON)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/OptionsJava.cmake","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}