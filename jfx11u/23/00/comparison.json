{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -1086,0 +1086,5 @@\n+\n+            Window window = oldScene.windowProperty().get();\n+            if (window != null) {\n+                window.showingProperty().removeListener(windowShowingChangedListener);\n+            }\n@@ -1089,0 +1094,6 @@\n+\n+            Window window = newScene.windowProperty().get();\n+            if (window != null) {\n+                window.showingProperty().addListener(windowShowingChangedListener);\n+            }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+\n+import junit.framework.Assert;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+import static org.junit.Assert.fail;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+public class InitialNodesMemoryLeakTest {\n+\n+    static CountDownLatch startupLatch;\n+    static WeakReference<Group> groupWRef;\n+    static Stage stage;\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            stage = primaryStage;\n+            Group group = new Group();\n+            groupWRef = new WeakReference<>(group);\n+            Group root = new Group(group);\n+            stage.setScene(new Scene(root));\n+\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                Platform.runLater(() -> {\n+                    root.getChildren().clear();\n+                    startupLatch.countDown();\n+                });\n+            });\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(InitialNodesMemoryLeakTest.TestApp.class, (String[])null)).start();\n+        try {\n+            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n+                fail(\"Timeout waiting for FX runtime to start\");\n+            }\n+        } catch (InterruptedException ex) {\n+            fail(\"Unexpected exception: \" + ex);\n+        }\n+    }\n+\n+    @Test\n+    public void testRootNodeMemoryLeak() throws Exception {\n+        for (int j = 0; j < 10; j++) {\n+            System.gc();\n+            System.runFinalization();\n+\n+            if (groupWRef.get() == null) {\n+                break;\n+            }\n+\n+            Util.sleep(500);\n+        }\n+        Assert.assertNull(\"Couldn't collect Node\", groupWRef.get());\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Platform.runLater(() -> {\n+            stage.hide();\n+            Platform.exit();\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/InitialNodesMemoryLeakTest.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}