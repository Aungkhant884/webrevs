{"files":[{"patch":"@@ -989,0 +989,7 @@\n+    \/**\n+     * Cached snapScale values, used to determine if snapped cached insets values\n+     * should be invalidated because screen scale has changed.\n+     *\/\n+    private double lastUsedSnapScaleY = 0;\n+    private double lastUsedSnapScaleX = 0;\n+\n@@ -991,0 +998,2 @@\n+        lastUsedSnapScaleX = getSnapScaleX();\n+        lastUsedSnapScaleY = getSnapScaleY();\n@@ -992,11 +1001,5 @@\n-        if (_snapToPixel) {\n-            snappedTopInset = Math.ceil(insets.getTop());\n-            snappedRightInset = Math.ceil(insets.getRight());\n-            snappedBottomInset = Math.ceil(insets.getBottom());\n-            snappedLeftInset = Math.ceil(insets.getLeft());\n-        } else {\n-            snappedTopInset = insets.getTop();\n-            snappedRightInset = insets.getRight();\n-            snappedBottomInset = insets.getBottom();\n-            snappedLeftInset = insets.getLeft();\n-        }\n+        final boolean snap = isSnapToPixel();\n+        snappedTopInset = snapSpaceY(insets.getTop(), snap);\n+        snappedRightInset = snapSpaceX(insets.getRight(), snap);\n+        snappedBottomInset = snapSpaceY(insets.getBottom(), snap);\n+        snappedLeftInset = snapSpaceX(insets.getLeft(), snap);\n@@ -1864,0 +1867,5 @@\n+        \/\/ invalidate the cached values for snapped inset dimensions\n+        \/\/ if the screen scale changed since they were last computed.\n+        if (lastUsedSnapScaleY != getSnapScaleY()) {\n+            updateSnappedInsets();\n+        }\n@@ -1875,0 +1883,5 @@\n+        \/\/ invalidate the cached values for snapped inset dimensions\n+        \/\/ if the screen scale changed since they were last computed.\n+        if (lastUsedSnapScaleY != getSnapScaleY()) {\n+            updateSnappedInsets();\n+        }\n@@ -1886,0 +1899,5 @@\n+        \/\/ invalidate the cached values for snapped inset dimensions\n+        \/\/ if the screen scale changed since they were last computed.\n+        if (lastUsedSnapScaleX != getSnapScaleX()) {\n+            updateSnappedInsets();\n+        }\n@@ -1897,0 +1915,5 @@\n+        \/\/ invalidate the cached values for snapped inset dimensions\n+        \/\/ if the screen scale changed since they were last computed.\n+        if (lastUsedSnapScaleX != getSnapScaleX()) {\n+            updateSnappedInsets();\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":34,"deletions":11,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -557,4 +557,0 @@\n-    private static double snapSpace(double value, boolean snapToPixel) {\n-        return snapToPixel ? Math.round(value) : value;\n-    }\n-\n@@ -572,5 +568,4 @@\n-        final boolean snap = isSnapToPixel();\n-        double top = margin != null? snapSpace(margin.getTop(), snap) : 0;\n-        double bottom = margin != null? snapSpace(margin.getBottom(), snap) : 0;\n-        double left = margin != null? snapSpace(margin.getLeft(), snap) : 0;\n-        double right = margin != null? snapSpace(margin.getRight(), snap) : 0;\n+        double top = margin != null? snapSpaceY(margin.getTop()) : 0;\n+        double bottom = margin != null? snapSpaceY(margin.getBottom()) : 0;\n+        double left = margin != null? snapSpaceX(margin.getLeft()) : 0;\n+        double right = margin != null? snapSpaceX(margin.getRight()) : 0;\n@@ -591,5 +586,4 @@\n-        final boolean snap = isSnapToPixel();\n-        double top = margin != null? snapSpace(margin.getTop(), snap) : 0;\n-        double bottom = margin != null? snapSpace(margin.getBottom(), snap) : 0;\n-        double left = margin != null? snapSpace(margin.getLeft(), snap) : 0;\n-        double right = margin != null? snapSpace(margin.getRight(), snap) : 0;\n+        double top = margin != null? snapSpaceY(margin.getTop()) : 0;\n+        double bottom = margin != null? snapSpaceY(margin.getBottom()) : 0;\n+        double left = margin != null? snapSpaceX(margin.getLeft()) : 0;\n+        double right = margin != null? snapSpaceX(margin.getRight()) : 0;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene;\n+\n+import com.sun.javafx.PlatformUtil;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import junit.framework.Assert;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class UIRenderSnapToPixelTest {\n+    private static final double scale = 1.25;\n+    private static CountDownLatch startupLatch;\n+    private static volatile Stage stage;\n+    private static final double epsilon = 0.00001;\n+\n+    @BeforeClass\n+    public static void setupOnce() throws Exception {\n+        System.setProperty(\"glass.win.uiScale\", String.valueOf(scale));\n+        System.setProperty(\"glass.gtk.uiScale\", String.valueOf(scale));\n+        startupLatch = new CountDownLatch(1);\n+        new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();\n+        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Platform.runLater(stage::hide);\n+        Platform.exit();\n+    }\n+\n+    @Test\n+    public void testScrollPaneSnapChildrenToPixels() {\n+        assumeTrue(PlatformUtil.isLinux() || PlatformUtil.isWindows());\n+\n+        Assert.assertEquals(\"Wrong render scale\", scale, stage.getRenderScaleY(), 0.0001);\n+\n+        for (Node node : stage.getScene().getRoot().getChildrenUnmodifiable()) {\n+            if (node instanceof ScrollPane) {\n+                var sp = (ScrollPane) node;\n+                Assert.assertEquals(\"Top inset not snapped to pixel\", 0, ((sp.snappedTopInset() * scale) + epsilon) % 1, 0.0001);\n+                Assert.assertEquals(\"Bottom inset not snapped to pixel\", 0, ((sp.snappedBottomInset() * scale) + epsilon) % 1, 0.0001);\n+                Assert.assertEquals(\"Left inset not snapped to pixel\", 0, ((sp.snappedLeftInset() * scale) + epsilon) % 1, 0.0001);\n+                Assert.assertEquals(\"Right inset not snapped to pixel\", 0, ((sp.snappedRightInset() * scale) + epsilon) % 1, 0.0001);\n+            }\n+        }\n+    }\n+\n+    public static class TestApp extends Application {\n+        private static void run() {\n+            startupLatch.countDown();\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            final Label label = new Label(\"This text may appear blurry at some screen scale without the fix for JDK-8211294\");\n+            final ScrollPane scrollpane = new ScrollPane(label);\n+            scrollpane.setSnapToPixel(true);\n+            final VBox root = new VBox();\n+            root.getChildren().add(new Label(\"This text should be sharp at all screen scale\"));\n+            root.getChildren().add(scrollpane);\n+            final Scene scene = new Scene(root);\n+            primaryStage.setScene(scene);\n+            stage = primaryStage;\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> Platform.runLater(TestApp::run));\n+            stage.show();\n+        }\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderSnapToPixelTest.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}