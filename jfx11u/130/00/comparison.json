{"files":[{"patch":"@@ -1,1 +1,1 @@\n-3.37.2\n+3.39.4\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/ThirdParty\/sqlite\/VERSION.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-** version 3.37.2.  By combining all the individual C code files into this\n+** version 3.39.4.  By combining all the individual C code files into this\n@@ -455,3 +455,3 @@\n-#define SQLITE_VERSION        \"3.37.2\"\n-#define SQLITE_VERSION_NUMBER 3037002\n-#define SQLITE_SOURCE_ID      \"2022-01-06 13:25:41 872ba256cbf61d9290b571c0e6d82a20c224ca3ad82971edc46b29818d5d17a0\"\n+#define SQLITE_VERSION        \"3.39.4\"\n+#define SQLITE_VERSION_NUMBER 3039004\n+#define SQLITE_SOURCE_ID      \"2022-09-29 15:55:41 a29f9949895322123f7c38fbe94c649a9d6e6c9cd0c3b41c96d694552f26b309\"\n@@ -875,1 +875,1 @@\n-#define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8))\n+#define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8)) \/* internal use only *\/\n@@ -4133,1 +4133,1 @@\n-** interfaces are:\n+** interfaces include the following:\n@@ -4140,0 +4140,1 @@\n+** <li> sqlite3_error_offset()\n@@ -4154,0 +4155,7 @@\n+** ^If the most recent error references a specific token in the input\n+** SQL, the sqlite3_error_offset() interface returns the byte offset\n+** of the start of that token.  ^The byte offset returned by\n+** sqlite3_error_offset() assumes that the input SQL is UTF8.\n+** ^If the most recent error does not reference a specific token in the input\n+** SQL, then the sqlite3_error_offset() function returns -1.\n+**\n@@ -4173,0 +4181,1 @@\n+SQLITE_API int sqlite3_error_offset(sqlite3 *db);\n@@ -4584,0 +4593,4 @@\n+**\n+** ^If prepared statement X is an [EXPLAIN] or [EXPLAIN QUERY PLAN]\n+** statement, then sqlite3_stmt_readonly(X) returns the same value as\n+** if the EXPLAIN or EXPLAIN QUERY PLAN prefix were omitted.\n@@ -4652,0 +4665,2 @@\n+** ^The sqlite3_value objects returned by [sqlite3_vtab_rhs_value()]\n+** are protected.\n@@ -5273,0 +5288,4 @@\n+** ^Strings returned by sqlite3_column_text16() always have the endianness\n+** which is native to the platform, regardless of the text encoding set\n+** for the database.\n+**\n@@ -5286,1 +5305,1 @@\n-** The these routines may attempt to convert the datatype of the result.\n+** These routines may attempt to convert the datatype of the result.\n@@ -5311,1 +5330,1 @@\n-** <tr><td>  BLOB    <td>   TEXT    <td> Add a zero terminator if needed\n+** <tr><td>  BLOB    <td>   TEXT    <td> [CAST] to TEXT, ensure zero terminator\n@@ -5883,1 +5902,2 @@\n-** memory allocation fails.\n+** memory allocation fails. ^If V is a [pointer value], then the result\n+** of sqlite3_value_dup(V) is a NULL value.\n@@ -6565,0 +6585,22 @@\n+\/*\n+** CAPI3REF: Return The Schema Name For A Database Connection\n+** METHOD: sqlite3\n+**\n+** ^The sqlite3_db_name(D,N) interface returns a pointer to the schema name\n+** for the N-th database on database connection D, or a NULL pointer of N is\n+** out of range.  An N value of 0 means the main database file.  An N of 1 is\n+** the \"temp\" schema.  Larger values of N correspond to various ATTACH-ed\n+** databases.\n+**\n+** Space to hold the string that is returned by sqlite3_db_name() is managed\n+** by SQLite itself.  The string might be deallocated by any operation that\n+** changes the schema, including [ATTACH] or [DETACH] or calls to\n+** [sqlite3_serialize()] or [sqlite3_deserialize()], even operations that\n+** occur on a different thread.  Applications that need to\n+** remember the string long-term should make their own copy.  Applications that\n+** are accessing the same database connection simultaneously on multiple\n+** threads should mutex-protect calls to this API and should make their own\n+** private copy of the result prior to releasing the mutex.\n+*\/\n+SQLITE_API const char *sqlite3_db_name(sqlite3 *db, int N);\n+\n@@ -7431,1 +7473,1 @@\n-** an operator that is part of a constraint term in the wHERE clause of\n+** an operator that is part of a constraint term in the WHERE clause of\n@@ -7433,16 +7475,48 @@\n-*\/\n-#define SQLITE_INDEX_CONSTRAINT_EQ         2\n-#define SQLITE_INDEX_CONSTRAINT_GT         4\n-#define SQLITE_INDEX_CONSTRAINT_LE         8\n-#define SQLITE_INDEX_CONSTRAINT_LT        16\n-#define SQLITE_INDEX_CONSTRAINT_GE        32\n-#define SQLITE_INDEX_CONSTRAINT_MATCH     64\n-#define SQLITE_INDEX_CONSTRAINT_LIKE      65\n-#define SQLITE_INDEX_CONSTRAINT_GLOB      66\n-#define SQLITE_INDEX_CONSTRAINT_REGEXP    67\n-#define SQLITE_INDEX_CONSTRAINT_NE        68\n-#define SQLITE_INDEX_CONSTRAINT_ISNOT     69\n-#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL 70\n-#define SQLITE_INDEX_CONSTRAINT_ISNULL    71\n-#define SQLITE_INDEX_CONSTRAINT_IS        72\n-#define SQLITE_INDEX_CONSTRAINT_FUNCTION 150\n+**\n+** ^The left-hand operand of the operator is given by the corresponding\n+** aConstraint[].iColumn field.  ^An iColumn of -1 indicates the left-hand\n+** operand is the rowid.\n+** The SQLITE_INDEX_CONSTRAINT_LIMIT and SQLITE_INDEX_CONSTRAINT_OFFSET\n+** operators have no left-hand operand, and so for those operators the\n+** corresponding aConstraint[].iColumn is meaningless and should not be\n+** used.\n+**\n+** All operator values from SQLITE_INDEX_CONSTRAINT_FUNCTION through\n+** value 255 are reserved to represent functions that are overloaded\n+** by the [xFindFunction|xFindFunction method] of the virtual table\n+** implementation.\n+**\n+** The right-hand operands for each constraint might be accessible using\n+** the [sqlite3_vtab_rhs_value()] interface.  Usually the right-hand\n+** operand is only available if it appears as a single constant literal\n+** in the input SQL.  If the right-hand operand is another column or an\n+** expression (even a constant expression) or a parameter, then the\n+** sqlite3_vtab_rhs_value() probably will not be able to extract it.\n+** ^The SQLITE_INDEX_CONSTRAINT_ISNULL and\n+** SQLITE_INDEX_CONSTRAINT_ISNOTNULL operators have no right-hand operand\n+** and hence calls to sqlite3_vtab_rhs_value() for those operators will\n+** always return SQLITE_NOTFOUND.\n+**\n+** The collating sequence to be used for comparison can be found using\n+** the [sqlite3_vtab_collation()] interface.  For most real-world virtual\n+** tables, the collating sequence of constraints does not matter (for example\n+** because the constraints are numeric) and so the sqlite3_vtab_collation()\n+** interface is no commonly needed.\n+*\/\n+#define SQLITE_INDEX_CONSTRAINT_EQ          2\n+#define SQLITE_INDEX_CONSTRAINT_GT          4\n+#define SQLITE_INDEX_CONSTRAINT_LE          8\n+#define SQLITE_INDEX_CONSTRAINT_LT         16\n+#define SQLITE_INDEX_CONSTRAINT_GE         32\n+#define SQLITE_INDEX_CONSTRAINT_MATCH      64\n+#define SQLITE_INDEX_CONSTRAINT_LIKE       65\n+#define SQLITE_INDEX_CONSTRAINT_GLOB       66\n+#define SQLITE_INDEX_CONSTRAINT_REGEXP     67\n+#define SQLITE_INDEX_CONSTRAINT_NE         68\n+#define SQLITE_INDEX_CONSTRAINT_ISNOT      69\n+#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL  70\n+#define SQLITE_INDEX_CONSTRAINT_ISNULL     71\n+#define SQLITE_INDEX_CONSTRAINT_IS         72\n+#define SQLITE_INDEX_CONSTRAINT_LIMIT      73\n+#define SQLITE_INDEX_CONSTRAINT_OFFSET     74\n+#define SQLITE_INDEX_CONSTRAINT_FUNCTION  150\n@@ -7477,1 +7551,1 @@\n-** NULL then no new module is create and any existing modules with the\n+** NULL then no new module is created and any existing modules with the\n@@ -8253,1 +8327,2 @@\n-#define SQLITE_TESTCTRL_LAST                    32  \/* Largest TESTCTRL *\/\n+#define SQLITE_TESTCTRL_LOGEST                  33\n+#define SQLITE_TESTCTRL_LAST                    33  \/* Largest TESTCTRL *\/\n@@ -8776,0 +8851,10 @@\n+** [[SQLITE_STMTSTATUS_FILTER_MISS]]\n+** [[SQLITE_STMTSTATUS_FILTER HIT]]\n+** <dt>SQLITE_STMTSTATUS_FILTER_HIT<br>\n+** SQLITE_STMTSTATUS_FILTER_MISS<\/dt>\n+** <dd>^SQLITE_STMTSTATUS_FILTER_HIT is the number of times that a join\n+** step was bypassed because a Bloom filter returned not-found.  The\n+** corresponding SQLITE_STMTSTATUS_FILTER_MISS value is the number of\n+** times that the Bloom filter returned a find, and thus the join step\n+** had to be processed as normal.\n+**\n@@ -8790,0 +8875,2 @@\n+#define SQLITE_STMTSTATUS_FILTER_MISS       7\n+#define SQLITE_STMTSTATUS_FILTER_HIT        8\n@@ -9758,0 +9845,1 @@\n+** METHOD: sqlite3_index_info\n@@ -9760,1 +9848,13 @@\n-** method of a [virtual table].\n+** method of a [virtual table].  This function returns a pointer to a string\n+** that is the name of the appropriate collation sequence to use for text\n+** comparisons on the constraint identified by its arguments.\n+**\n+** The first argument must be the pointer to the [sqlite3_index_info] object\n+** that is the first parameter to the xBestIndex() method. The second argument\n+** must be an index into the aConstraint[] array belonging to the\n+** sqlite3_index_info structure passed to xBestIndex.\n+**\n+** Important:\n+** The first parameter must be the same pointer that is passed into the\n+** xBestMethod() method.  The first parameter may not be a pointer to a\n+** different [sqlite3_index_info] object, even an exact copy.\n@@ -9762,6 +9862,13 @@\n-** The first argument must be the sqlite3_index_info object that is the\n-** first parameter to the xBestIndex() method. The second argument must be\n-** an index into the aConstraint[] array belonging to the sqlite3_index_info\n-** structure passed to xBestIndex. This function returns a pointer to a buffer\n-** containing the name of the collation sequence for the corresponding\n-** constraint.\n+** The return value is computed as follows:\n+**\n+** <ol>\n+** <li><p> If the constraint comes from a WHERE clause expression that contains\n+**         a [COLLATE operator], then the name of the collation specified by\n+**         that COLLATE operator is returned.\n+** <li><p> If there is no COLLATE operator, but the column that is the subject\n+**         of the constraint specifies an alternative collating sequence via\n+**         a [COLLATE clause] on the column definition within the CREATE TABLE\n+**         statement that was passed into [sqlite3_declare_vtab()], then the\n+**         name of that alternative collating sequence is returned.\n+** <li><p> Otherwise, \"BINARY\" is returned.\n+** <\/ol>\n@@ -9771,0 +9878,237 @@\n+\/*\n+** CAPI3REF: Determine if a virtual table query is DISTINCT\n+** METHOD: sqlite3_index_info\n+**\n+** This API may only be used from within an [xBestIndex|xBestIndex method]\n+** of a [virtual table] implementation. The result of calling this\n+** interface from outside of xBestIndex() is undefined and probably harmful.\n+**\n+** ^The sqlite3_vtab_distinct() interface returns an integer between 0 and\n+** 3.  The integer returned by sqlite3_vtab_distinct()\n+** gives the virtual table additional information about how the query\n+** planner wants the output to be ordered. As long as the virtual table\n+** can meet the ordering requirements of the query planner, it may set\n+** the \"orderByConsumed\" flag.\n+**\n+** <ol><li value=\"0\"><p>\n+** ^If the sqlite3_vtab_distinct() interface returns 0, that means\n+** that the query planner needs the virtual table to return all rows in the\n+** sort order defined by the \"nOrderBy\" and \"aOrderBy\" fields of the\n+** [sqlite3_index_info] object.  This is the default expectation.  If the\n+** virtual table outputs all rows in sorted order, then it is always safe for\n+** the xBestIndex method to set the \"orderByConsumed\" flag, regardless of\n+** the return value from sqlite3_vtab_distinct().\n+** <li value=\"1\"><p>\n+** ^(If the sqlite3_vtab_distinct() interface returns 1, that means\n+** that the query planner does not need the rows to be returned in sorted order\n+** as long as all rows with the same values in all columns identified by the\n+** \"aOrderBy\" field are adjacent.)^  This mode is used when the query planner\n+** is doing a GROUP BY.\n+** <li value=\"2\"><p>\n+** ^(If the sqlite3_vtab_distinct() interface returns 2, that means\n+** that the query planner does not need the rows returned in any particular\n+** order, as long as rows with the same values in all \"aOrderBy\" columns\n+** are adjacent.)^  ^(Furthermore, only a single row for each particular\n+** combination of values in the columns identified by the \"aOrderBy\" field\n+** needs to be returned.)^  ^It is always ok for two or more rows with the same\n+** values in all \"aOrderBy\" columns to be returned, as long as all such rows\n+** are adjacent.  ^The virtual table may, if it chooses, omit extra rows\n+** that have the same value for all columns identified by \"aOrderBy\".\n+** ^However omitting the extra rows is optional.\n+** This mode is used for a DISTINCT query.\n+** <li value=\"3\"><p>\n+** ^(If the sqlite3_vtab_distinct() interface returns 3, that means\n+** that the query planner needs only distinct rows but it does need the\n+** rows to be sorted.)^ ^The virtual table implementation is free to omit\n+** rows that are identical in all aOrderBy columns, if it wants to, but\n+** it is not required to omit any rows.  This mode is used for queries\n+** that have both DISTINCT and ORDER BY clauses.\n+** <\/ol>\n+**\n+** ^For the purposes of comparing virtual table output values to see if the\n+** values are same value for sorting purposes, two NULL values are considered\n+** to be the same.  In other words, the comparison operator is \"IS\"\n+** (or \"IS NOT DISTINCT FROM\") and not \"==\".\n+**\n+** If a virtual table implementation is unable to meet the requirements\n+** specified above, then it must not set the \"orderByConsumed\" flag in the\n+** [sqlite3_index_info] object or an incorrect answer may result.\n+**\n+** ^A virtual table implementation is always free to return rows in any order\n+** it wants, as long as the \"orderByConsumed\" flag is not set.  ^When the\n+** the \"orderByConsumed\" flag is unset, the query planner will add extra\n+** [bytecode] to ensure that the final results returned by the SQL query are\n+** ordered correctly.  The use of the \"orderByConsumed\" flag and the\n+** sqlite3_vtab_distinct() interface is merely an optimization.  ^Careful\n+** use of the sqlite3_vtab_distinct() interface and the \"orderByConsumed\"\n+** flag might help queries against a virtual table to run faster.  Being\n+** overly aggressive and setting the \"orderByConsumed\" flag when it is not\n+** valid to do so, on the other hand, might cause SQLite to return incorrect\n+** results.\n+*\/\n+SQLITE_API int sqlite3_vtab_distinct(sqlite3_index_info*);\n+\n+\/*\n+** CAPI3REF: Identify and handle IN constraints in xBestIndex\n+**\n+** This interface may only be used from within an\n+** [xBestIndex|xBestIndex() method] of a [virtual table] implementation.\n+** The result of invoking this interface from any other context is\n+** undefined and probably harmful.\n+**\n+** ^(A constraint on a virtual table of the form\n+** \"[IN operator|column IN (...)]\" is\n+** communicated to the xBestIndex method as a\n+** [SQLITE_INDEX_CONSTRAINT_EQ] constraint.)^  If xBestIndex wants to use\n+** this constraint, it must set the corresponding\n+** aConstraintUsage[].argvIndex to a postive integer.  ^(Then, under\n+** the usual mode of handling IN operators, SQLite generates [bytecode]\n+** that invokes the [xFilter|xFilter() method] once for each value\n+** on the right-hand side of the IN operator.)^  Thus the virtual table\n+** only sees a single value from the right-hand side of the IN operator\n+** at a time.\n+**\n+** In some cases, however, it would be advantageous for the virtual\n+** table to see all values on the right-hand of the IN operator all at\n+** once.  The sqlite3_vtab_in() interfaces facilitates this in two ways:\n+**\n+** <ol>\n+** <li><p>\n+**   ^A call to sqlite3_vtab_in(P,N,-1) will return true (non-zero)\n+**   if and only if the [sqlite3_index_info|P->aConstraint][N] constraint\n+**   is an [IN operator] that can be processed all at once.  ^In other words,\n+**   sqlite3_vtab_in() with -1 in the third argument is a mechanism\n+**   by which the virtual table can ask SQLite if all-at-once processing\n+**   of the IN operator is even possible.\n+**\n+** <li><p>\n+**   ^A call to sqlite3_vtab_in(P,N,F) with F==1 or F==0 indicates\n+**   to SQLite that the virtual table does or does not want to process\n+**   the IN operator all-at-once, respectively.  ^Thus when the third\n+**   parameter (F) is non-negative, this interface is the mechanism by\n+**   which the virtual table tells SQLite how it wants to process the\n+**   IN operator.\n+** <\/ol>\n+**\n+** ^The sqlite3_vtab_in(P,N,F) interface can be invoked multiple times\n+** within the same xBestIndex method call.  ^For any given P,N pair,\n+** the return value from sqlite3_vtab_in(P,N,F) will always be the same\n+** within the same xBestIndex call.  ^If the interface returns true\n+** (non-zero), that means that the constraint is an IN operator\n+** that can be processed all-at-once.  ^If the constraint is not an IN\n+** operator or cannot be processed all-at-once, then the interface returns\n+** false.\n+**\n+** ^(All-at-once processing of the IN operator is selected if both of the\n+** following conditions are met:\n+**\n+** <ol>\n+** <li><p> The P->aConstraintUsage[N].argvIndex value is set to a positive\n+** integer.  This is how the virtual table tells SQLite that it wants to\n+** use the N-th constraint.\n+**\n+** <li><p> The last call to sqlite3_vtab_in(P,N,F) for which F was\n+** non-negative had F>=1.\n+** <\/ol>)^\n+**\n+** ^If either or both of the conditions above are false, then SQLite uses\n+** the traditional one-at-a-time processing strategy for the IN constraint.\n+** ^If both conditions are true, then the argvIndex-th parameter to the\n+** xFilter method will be an [sqlite3_value] that appears to be NULL,\n+** but which can be passed to [sqlite3_vtab_in_first()] and\n+** [sqlite3_vtab_in_next()] to find all values on the right-hand side\n+** of the IN constraint.\n+*\/\n+SQLITE_API int sqlite3_vtab_in(sqlite3_index_info*, int iCons, int bHandle);\n+\n+\/*\n+** CAPI3REF: Find all elements on the right-hand side of an IN constraint.\n+**\n+** These interfaces are only useful from within the\n+** [xFilter|xFilter() method] of a [virtual table] implementation.\n+** The result of invoking these interfaces from any other context\n+** is undefined and probably harmful.\n+**\n+** The X parameter in a call to sqlite3_vtab_in_first(X,P) or\n+** sqlite3_vtab_in_next(X,P) must be one of the parameters to the\n+** xFilter method which invokes these routines, and specifically\n+** a parameter that was previously selected for all-at-once IN constraint\n+** processing use the [sqlite3_vtab_in()] interface in the\n+** [xBestIndex|xBestIndex method].  ^(If the X parameter is not\n+** an xFilter argument that was selected for all-at-once IN constraint\n+** processing, then these routines return [SQLITE_MISUSE])^ or perhaps\n+** exhibit some other undefined or harmful behavior.\n+**\n+** ^(Use these routines to access all values on the right-hand side\n+** of the IN constraint using code like the following:\n+**\n+** <blockquote><pre>\n+** &nbsp;  for(rc=sqlite3_vtab_in_first(pList, &pVal);\n+** &nbsp;      rc==SQLITE_OK && pVal\n+** &nbsp;      rc=sqlite3_vtab_in_next(pList, &pVal)\n+** &nbsp;  ){\n+** &nbsp;    \/\/ do something with pVal\n+** &nbsp;  }\n+** &nbsp;  if( rc!=SQLITE_OK ){\n+** &nbsp;    \/\/ an error has occurred\n+** &nbsp;  }\n+** <\/pre><\/blockquote>)^\n+**\n+** ^On success, the sqlite3_vtab_in_first(X,P) and sqlite3_vtab_in_next(X,P)\n+** routines return SQLITE_OK and set *P to point to the first or next value\n+** on the RHS of the IN constraint.  ^If there are no more values on the\n+** right hand side of the IN constraint, then *P is set to NULL and these\n+** routines return [SQLITE_DONE].  ^The return value might be\n+** some other value, such as SQLITE_NOMEM, in the event of a malfunction.\n+**\n+** The *ppOut values returned by these routines are only valid until the\n+** next call to either of these routines or until the end of the xFilter\n+** method from which these routines were called.  If the virtual table\n+** implementation needs to retain the *ppOut values for longer, it must make\n+** copies.  The *ppOut values are [protected sqlite3_value|protected].\n+*\/\n+SQLITE_API int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut);\n+SQLITE_API int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut);\n+\n+\/*\n+** CAPI3REF: Constraint values in xBestIndex()\n+** METHOD: sqlite3_index_info\n+**\n+** This API may only be used from within the [xBestIndex|xBestIndex method]\n+** of a [virtual table] implementation. The result of calling this interface\n+** from outside of an xBestIndex method are undefined and probably harmful.\n+**\n+** ^When the sqlite3_vtab_rhs_value(P,J,V) interface is invoked from within\n+** the [xBestIndex] method of a [virtual table] implementation, with P being\n+** a copy of the [sqlite3_index_info] object pointer passed into xBestIndex and\n+** J being a 0-based index into P->aConstraint[], then this routine\n+** attempts to set *V to the value of the right-hand operand of\n+** that constraint if the right-hand operand is known.  ^If the\n+** right-hand operand is not known, then *V is set to a NULL pointer.\n+** ^The sqlite3_vtab_rhs_value(P,J,V) interface returns SQLITE_OK if\n+** and only if *V is set to a value.  ^The sqlite3_vtab_rhs_value(P,J,V)\n+** inteface returns SQLITE_NOTFOUND if the right-hand side of the J-th\n+** constraint is not available.  ^The sqlite3_vtab_rhs_value() interface\n+** can return an result code other than SQLITE_OK or SQLITE_NOTFOUND if\n+** something goes wrong.\n+**\n+** The sqlite3_vtab_rhs_value() interface is usually only successful if\n+** the right-hand operand of a constraint is a literal value in the original\n+** SQL statement.  If the right-hand operand is an expression or a reference\n+** to some other column or a [host parameter], then sqlite3_vtab_rhs_value()\n+** will probably return [SQLITE_NOTFOUND].\n+**\n+** ^(Some constraints, such as [SQLITE_INDEX_CONSTRAINT_ISNULL] and\n+** [SQLITE_INDEX_CONSTRAINT_ISNOTNULL], have no right-hand operand.  For such\n+** constraints, sqlite3_vtab_rhs_value() always returns SQLITE_NOTFOUND.)^\n+**\n+** ^The [sqlite3_value] object returned in *V is a protected sqlite3_value\n+** and remains valid for the duration of the xBestIndex method call.\n+** ^When xBestIndex returns, the sqlite3_value object returned by\n+** sqlite3_vtab_rhs_value() is automatically deallocated.\n+**\n+** The \"_rhs_\" in the name of this routine is an abbreviation for\n+** \"Right-Hand Side\".\n+*\/\n+SQLITE_API int sqlite3_vtab_rhs_value(sqlite3_index_info*, int, sqlite3_value **ppVal);\n+\n@@ -12803,0 +13147,5 @@\n+\/*\n+** Reuse the STATIC_LRU for mutex access to sqlite3_temp_directory.\n+*\/\n+#define SQLITE_MUTEX_STATIC_TEMPDIR SQLITE_MUTEX_STATIC_VFS1\n+\n@@ -13624,72 +13973,73 @@\n-#define TK_COLLATE                        112\n-#define TK_BITNOT                         113\n-#define TK_ON                             114\n-#define TK_INDEXED                        115\n-#define TK_STRING                         116\n-#define TK_JOIN_KW                        117\n-#define TK_CONSTRAINT                     118\n-#define TK_DEFAULT                        119\n-#define TK_NULL                           120\n-#define TK_PRIMARY                        121\n-#define TK_UNIQUE                         122\n-#define TK_CHECK                          123\n-#define TK_REFERENCES                     124\n-#define TK_AUTOINCR                       125\n-#define TK_INSERT                         126\n-#define TK_DELETE                         127\n-#define TK_UPDATE                         128\n-#define TK_SET                            129\n-#define TK_DEFERRABLE                     130\n-#define TK_FOREIGN                        131\n-#define TK_DROP                           132\n-#define TK_UNION                          133\n-#define TK_ALL                            134\n-#define TK_EXCEPT                         135\n-#define TK_INTERSECT                      136\n-#define TK_SELECT                         137\n-#define TK_VALUES                         138\n-#define TK_DISTINCT                       139\n-#define TK_DOT                            140\n-#define TK_FROM                           141\n-#define TK_JOIN                           142\n-#define TK_USING                          143\n-#define TK_ORDER                          144\n-#define TK_GROUP                          145\n-#define TK_HAVING                         146\n-#define TK_LIMIT                          147\n-#define TK_WHERE                          148\n-#define TK_RETURNING                      149\n-#define TK_INTO                           150\n-#define TK_NOTHING                        151\n-#define TK_FLOAT                          152\n-#define TK_BLOB                           153\n-#define TK_INTEGER                        154\n-#define TK_VARIABLE                       155\n-#define TK_CASE                           156\n-#define TK_WHEN                           157\n-#define TK_THEN                           158\n-#define TK_ELSE                           159\n-#define TK_INDEX                          160\n-#define TK_ALTER                          161\n-#define TK_ADD                            162\n-#define TK_WINDOW                         163\n-#define TK_OVER                           164\n-#define TK_FILTER                         165\n-#define TK_COLUMN                         166\n-#define TK_AGG_FUNCTION                   167\n-#define TK_AGG_COLUMN                     168\n-#define TK_TRUEFALSE                      169\n-#define TK_ISNOT                          170\n-#define TK_FUNCTION                       171\n-#define TK_UMINUS                         172\n-#define TK_UPLUS                          173\n-#define TK_TRUTH                          174\n-#define TK_REGISTER                       175\n-#define TK_VECTOR                         176\n-#define TK_SELECT_COLUMN                  177\n-#define TK_IF_NULL_ROW                    178\n-#define TK_ASTERISK                       179\n-#define TK_SPAN                           180\n-#define TK_ERROR                          181\n-#define TK_SPACE                          182\n-#define TK_ILLEGAL                        183\n+#define TK_PTR                            112\n+#define TK_COLLATE                        113\n+#define TK_BITNOT                         114\n+#define TK_ON                             115\n+#define TK_INDEXED                        116\n+#define TK_STRING                         117\n+#define TK_JOIN_KW                        118\n+#define TK_CONSTRAINT                     119\n+#define TK_DEFAULT                        120\n+#define TK_NULL                           121\n+#define TK_PRIMARY                        122\n+#define TK_UNIQUE                         123\n+#define TK_CHECK                          124\n+#define TK_REFERENCES                     125\n+#define TK_AUTOINCR                       126\n+#define TK_INSERT                         127\n+#define TK_DELETE                         128\n+#define TK_UPDATE                         129\n+#define TK_SET                            130\n+#define TK_DEFERRABLE                     131\n+#define TK_FOREIGN                        132\n+#define TK_DROP                           133\n+#define TK_UNION                          134\n+#define TK_ALL                            135\n+#define TK_EXCEPT                         136\n+#define TK_INTERSECT                      137\n+#define TK_SELECT                         138\n+#define TK_VALUES                         139\n+#define TK_DISTINCT                       140\n+#define TK_DOT                            141\n+#define TK_FROM                           142\n+#define TK_JOIN                           143\n+#define TK_USING                          144\n+#define TK_ORDER                          145\n+#define TK_GROUP                          146\n+#define TK_HAVING                         147\n+#define TK_LIMIT                          148\n+#define TK_WHERE                          149\n+#define TK_RETURNING                      150\n+#define TK_INTO                           151\n+#define TK_NOTHING                        152\n+#define TK_FLOAT                          153\n+#define TK_BLOB                           154\n+#define TK_INTEGER                        155\n+#define TK_VARIABLE                       156\n+#define TK_CASE                           157\n+#define TK_WHEN                           158\n+#define TK_THEN                           159\n+#define TK_ELSE                           160\n+#define TK_INDEX                          161\n+#define TK_ALTER                          162\n+#define TK_ADD                            163\n+#define TK_WINDOW                         164\n+#define TK_OVER                           165\n+#define TK_FILTER                         166\n+#define TK_COLUMN                         167\n+#define TK_AGG_FUNCTION                   168\n+#define TK_AGG_COLUMN                     169\n+#define TK_TRUEFALSE                      170\n+#define TK_ISNOT                          171\n+#define TK_FUNCTION                       172\n+#define TK_UMINUS                         173\n+#define TK_UPLUS                          174\n+#define TK_TRUTH                          175\n+#define TK_REGISTER                       176\n+#define TK_VECTOR                         177\n+#define TK_SELECT_COLUMN                  178\n+#define TK_IF_NULL_ROW                    179\n+#define TK_ASTERISK                       180\n+#define TK_SPAN                           181\n+#define TK_ERROR                          182\n+#define TK_SPACE                          183\n+#define TK_ILLEGAL                        184\n@@ -14045,0 +14395,6 @@\n+**\n+** ROUND8() always does the rounding, for any argument.\n+**\n+** ROUND8P() assumes that the argument is already an integer number of\n+** pointers in size, and so it is a no-op on systems where the pointer\n+** size is 8.\n@@ -14047,0 +14403,5 @@\n+#if SQLITE_PTRSIZE==8\n+# define ROUND8P(x)   (x)\n+#else\n+# define ROUND8P(x)   (((x)+7)&~7)\n+#endif\n@@ -14109,2 +14470,2 @@\n-** SELECTTRACE_ENABLED will be either 1 or 0 depending on whether or not\n-** the Select query generator tracing logic is turned on.\n+** TREETRACE_ENABLED will be either 1 or 0 depending on whether or not\n+** the Abstract Syntax Tree tracing logic is turned on.\n@@ -14113,1 +14474,1 @@\n-SQLITE_PRIVATE u32 sqlite3SelectTrace;\n+SQLITE_PRIVATE u32 sqlite3TreeTrace;\n@@ -14116,2 +14477,3 @@\n-    && (defined(SQLITE_TEST) || defined(SQLITE_ENABLE_SELECTTRACE))\n-# define SELECTTRACE_ENABLED 1\n+    && (defined(SQLITE_TEST) || defined(SQLITE_ENABLE_SELECTTRACE) \\\n+                             || defined(SQLITE_ENABLE_TREETRACE))\n+# define TREETRACE_ENABLED 1\n@@ -14119,1 +14481,1 @@\n-  if(sqlite3SelectTrace&(K))   \\\n+  if(sqlite3TreeTrace&(K))   \\\n@@ -14124,1 +14486,1 @@\n-# define SELECTTRACE_ENABLED 0\n+# define TREETRACE_ENABLED 0\n@@ -14209,1 +14571,1 @@\n-#define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3OomFault)\n+#define SQLITE_DYNAMIC   ((sqlite3_destructor_type)sqlite3OomClear)\n@@ -14285,0 +14647,1 @@\n+typedef struct OnOrUsing OnOrUsing;\n@@ -14337,4 +14700,5 @@\n-#define MASKBIT(n)   (((Bitmask)1)<<(n))\n-#define MASKBIT64(n) (((u64)1)<<(n))\n-#define MASKBIT32(n) (((unsigned int)1)<<(n))\n-#define ALLBITS      ((Bitmask)-1)\n+#define MASKBIT(n)    (((Bitmask)1)<<(n))\n+#define MASKBIT64(n)  (((u64)1)<<(n))\n+#define MASKBIT32(n)  (((unsigned int)1)<<(n))\n+#define SMASKBIT32(n) ((n)<=31?((unsigned int)1)<<(n):0)\n+#define ALLBITS       ((Bitmask)-1)\n@@ -14402,1 +14766,1 @@\n-** Page number PAGER_MJ_PGNO is never used in an SQLite database (it is\n+** Page number PAGER_SJ_PGNO is never used in an SQLite database (it is\n@@ -14409,1 +14773,2 @@\n-#define PAGER_MJ_PGNO(x) ((Pgno)((PENDING_BYTE\/((x)->pageSize))+1))\n+#define PAGER_SJ_PGNO_COMPUTED(x) ((Pgno)((PENDING_BYTE\/((x)->pageSize))+1))\n+#define PAGER_SJ_PGNO(x)          ((x)->lckPgno)\n@@ -15086,1 +15451,0 @@\n-    int (*xAdvance)(BtCursor *, int);\n@@ -15137,2 +15501,1 @@\n-#define P4_ADVANCE    (-5)  \/* P4 is a pointer to BtreeNext() or BtreePrev() *\/\n-#define P4_TABLE      (-6)  \/* P4 is a pointer to a Table structure *\/\n+#define P4_TABLE      (-5)  \/* P4 is a pointer to a Table structure *\/\n@@ -15140,12 +15503,11 @@\n-#define P4_FREE_IF_LE (-7)\n-#define P4_DYNAMIC    (-7)  \/* Pointer to memory from sqliteMalloc() *\/\n-#define P4_FUNCDEF    (-8)  \/* P4 is a pointer to a FuncDef structure *\/\n-#define P4_KEYINFO    (-9)  \/* P4 is a pointer to a KeyInfo structure *\/\n-#define P4_EXPR       (-10) \/* P4 is a pointer to an Expr tree *\/\n-#define P4_MEM        (-11) \/* P4 is a pointer to a Mem*    structure *\/\n-#define P4_VTAB       (-12) \/* P4 is a pointer to an sqlite3_vtab structure *\/\n-#define P4_REAL       (-13) \/* P4 is a 64-bit floating point value *\/\n-#define P4_INT64      (-14) \/* P4 is a 64-bit signed integer *\/\n-#define P4_INTARRAY   (-15) \/* P4 is a vector of 32-bit integers *\/\n-#define P4_FUNCCTX    (-16) \/* P4 is a pointer to an sqlite3_context object *\/\n-#define P4_DYNBLOB    (-17) \/* Pointer to memory from sqliteMalloc() *\/\n+#define P4_FREE_IF_LE (-6)\n+#define P4_DYNAMIC    (-6)  \/* Pointer to memory from sqliteMalloc() *\/\n+#define P4_FUNCDEF    (-7)  \/* P4 is a pointer to a FuncDef structure *\/\n+#define P4_KEYINFO    (-8)  \/* P4 is a pointer to a KeyInfo structure *\/\n+#define P4_EXPR       (-9) \/* P4 is a pointer to an Expr tree *\/\n+#define P4_MEM        (-10) \/* P4 is a pointer to a Mem*    structure *\/\n+#define P4_VTAB       (-11) \/* P4 is a pointer to an sqlite3_vtab structure *\/\n+#define P4_REAL       (-12) \/* P4 is a 64-bit floating point value *\/\n+#define P4_INT64      (-13) \/* P4 is a 64-bit signed integer *\/\n+#define P4_INTARRAY   (-14) \/* P4 is a vector of 32-bit integers *\/\n+#define P4_FUNCCTX    (-15) \/* P4 is a pointer to an sqlite3_context object *\/\n@@ -15196,16 +15558,16 @@\n-#define OP_SorterNext      3 \/* jump                                       *\/\n-#define OP_Prev            4 \/* jump                                       *\/\n-#define OP_Next            5 \/* jump                                       *\/\n-#define OP_Checkpoint      6\n-#define OP_JournalMode     7\n-#define OP_Vacuum          8\n-#define OP_VFilter         9 \/* jump, synopsis: iplan=r[P3] zplan='P4'     *\/\n-#define OP_VUpdate        10 \/* synopsis: data=r[P3@P2]                    *\/\n-#define OP_Goto           11 \/* jump                                       *\/\n-#define OP_Gosub          12 \/* jump                                       *\/\n-#define OP_InitCoroutine  13 \/* jump                                       *\/\n-#define OP_Yield          14 \/* jump                                       *\/\n-#define OP_MustBeInt      15 \/* jump                                       *\/\n-#define OP_Jump           16 \/* jump                                       *\/\n-#define OP_Once           17 \/* jump                                       *\/\n-#define OP_If             18 \/* jump                                       *\/\n+#define OP_Checkpoint      3\n+#define OP_JournalMode     4\n+#define OP_Vacuum          5\n+#define OP_VFilter         6 \/* jump, synopsis: iplan=r[P3] zplan='P4'     *\/\n+#define OP_VUpdate         7 \/* synopsis: data=r[P3@P2]                    *\/\n+#define OP_Goto            8 \/* jump                                       *\/\n+#define OP_Gosub           9 \/* jump                                       *\/\n+#define OP_InitCoroutine  10 \/* jump                                       *\/\n+#define OP_Yield          11 \/* jump                                       *\/\n+#define OP_MustBeInt      12 \/* jump                                       *\/\n+#define OP_Jump           13 \/* jump                                       *\/\n+#define OP_Once           14 \/* jump                                       *\/\n+#define OP_If             15 \/* jump                                       *\/\n+#define OP_IfNot          16 \/* jump                                       *\/\n+#define OP_IsNullOrType   17 \/* jump, synopsis: if typeof(r[P1]) IN (P3,5) goto P2 *\/\n+#define OP_IfNullRow      18 \/* jump, synopsis: if P1.nullRow then r[P3]=NULL, goto P2 *\/\n@@ -15213,19 +15575,19 @@\n-#define OP_IfNot          20 \/* jump                                       *\/\n-#define OP_IsNullOrType   21 \/* jump, synopsis: if typeof(r[P1]) IN (P3,5) goto P2 *\/\n-#define OP_IfNullRow      22 \/* jump, synopsis: if P1.nullRow then r[P3]=NULL, goto P2 *\/\n-#define OP_SeekLT         23 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_SeekLE         24 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_SeekGE         25 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_SeekGT         26 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_IfNotOpen      27 \/* jump, synopsis: if( !csr[P1] ) goto P2     *\/\n-#define OP_IfNoHope       28 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_NoConflict     29 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_NotFound       30 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_Found          31 \/* jump, synopsis: key=r[P3@P4]               *\/\n-#define OP_SeekRowid      32 \/* jump, synopsis: intkey=r[P3]               *\/\n-#define OP_NotExists      33 \/* jump, synopsis: intkey=r[P3]               *\/\n-#define OP_Last           34 \/* jump                                       *\/\n-#define OP_IfSmaller      35 \/* jump                                       *\/\n-#define OP_SorterSort     36 \/* jump                                       *\/\n-#define OP_Sort           37 \/* jump                                       *\/\n-#define OP_Rewind         38 \/* jump                                       *\/\n+#define OP_SeekLT         20 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_SeekLE         21 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_SeekGE         22 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_SeekGT         23 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_IfNotOpen      24 \/* jump, synopsis: if( !csr[P1] ) goto P2     *\/\n+#define OP_IfNoHope       25 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_NoConflict     26 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_NotFound       27 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_Found          28 \/* jump, synopsis: key=r[P3@P4]               *\/\n+#define OP_SeekRowid      29 \/* jump, synopsis: intkey=r[P3]               *\/\n+#define OP_NotExists      30 \/* jump, synopsis: intkey=r[P3]               *\/\n+#define OP_Last           31 \/* jump                                       *\/\n+#define OP_IfSmaller      32 \/* jump                                       *\/\n+#define OP_SorterSort     33 \/* jump                                       *\/\n+#define OP_Sort           34 \/* jump                                       *\/\n+#define OP_Rewind         35 \/* jump                                       *\/\n+#define OP_SorterNext     36 \/* jump                                       *\/\n+#define OP_Prev           37 \/* jump                                       *\/\n+#define OP_Next           38 \/* jump                                       *\/\n@@ -15256,39 +15618,39 @@\n-#define OP_Init           63 \/* jump, synopsis: Start at P2                *\/\n-#define OP_PureFunc       64 \/* synopsis: r[P3]=func(r[P2@NP])             *\/\n-#define OP_Function       65 \/* synopsis: r[P3]=func(r[P2@NP])             *\/\n-#define OP_Return         66\n-#define OP_EndCoroutine   67\n-#define OP_HaltIfNull     68 \/* synopsis: if r[P3]=null halt               *\/\n-#define OP_Halt           69\n-#define OP_Integer        70 \/* synopsis: r[P2]=P1                         *\/\n-#define OP_Int64          71 \/* synopsis: r[P2]=P4                         *\/\n-#define OP_String         72 \/* synopsis: r[P2]='P4' (len=P1)              *\/\n-#define OP_Null           73 \/* synopsis: r[P2..P3]=NULL                   *\/\n-#define OP_SoftNull       74 \/* synopsis: r[P1]=NULL                       *\/\n-#define OP_Blob           75 \/* synopsis: r[P2]=P4 (len=P1)                *\/\n-#define OP_Variable       76 \/* synopsis: r[P2]=parameter(P1,P4)           *\/\n-#define OP_Move           77 \/* synopsis: r[P2@P3]=r[P1@P3]                *\/\n-#define OP_Copy           78 \/* synopsis: r[P2@P3+1]=r[P1@P3+1]            *\/\n-#define OP_SCopy          79 \/* synopsis: r[P2]=r[P1]                      *\/\n-#define OP_IntCopy        80 \/* synopsis: r[P2]=r[P1]                      *\/\n-#define OP_ChngCntRow     81 \/* synopsis: output=r[P1]                     *\/\n-#define OP_ResultRow      82 \/* synopsis: output=r[P1@P2]                  *\/\n-#define OP_CollSeq        83\n-#define OP_AddImm         84 \/* synopsis: r[P1]=r[P1]+P2                   *\/\n-#define OP_RealAffinity   85\n-#define OP_Cast           86 \/* synopsis: affinity(r[P1])                  *\/\n-#define OP_Permutation    87\n-#define OP_Compare        88 \/* synopsis: r[P1@P3] <-> r[P2@P3]            *\/\n-#define OP_IsTrue         89 \/* synopsis: r[P2] = coalesce(r[P1]==TRUE,P3) ^ P4 *\/\n-#define OP_ZeroOrNull     90 \/* synopsis: r[P2] = 0 OR NULL                *\/\n-#define OP_Offset         91 \/* synopsis: r[P3] = sqlite_offset(P1)        *\/\n-#define OP_Column         92 \/* synopsis: r[P3]=PX                         *\/\n-#define OP_TypeCheck      93 \/* synopsis: typecheck(r[P1@P2])              *\/\n-#define OP_Affinity       94 \/* synopsis: affinity(r[P1@P2])               *\/\n-#define OP_MakeRecord     95 \/* synopsis: r[P3]=mkrec(r[P1@P2])            *\/\n-#define OP_Count          96 \/* synopsis: r[P2]=count()                    *\/\n-#define OP_ReadCookie     97\n-#define OP_SetCookie      98\n-#define OP_ReopenIdx      99 \/* synopsis: root=P2 iDb=P3                   *\/\n-#define OP_OpenRead      100 \/* synopsis: root=P2 iDb=P3                   *\/\n-#define OP_OpenWrite     101 \/* synopsis: root=P2 iDb=P3                   *\/\n+#define OP_Filter         63 \/* jump, synopsis: if key(P3@P4) not in filter(P1) goto P2 *\/\n+#define OP_Init           64 \/* jump, synopsis: Start at P2                *\/\n+#define OP_PureFunc       65 \/* synopsis: r[P3]=func(r[P2@NP])             *\/\n+#define OP_Function       66 \/* synopsis: r[P3]=func(r[P2@NP])             *\/\n+#define OP_Return         67\n+#define OP_EndCoroutine   68\n+#define OP_HaltIfNull     69 \/* synopsis: if r[P3]=null halt               *\/\n+#define OP_Halt           70\n+#define OP_Integer        71 \/* synopsis: r[P2]=P1                         *\/\n+#define OP_Int64          72 \/* synopsis: r[P2]=P4                         *\/\n+#define OP_String         73 \/* synopsis: r[P2]='P4' (len=P1)              *\/\n+#define OP_BeginSubrtn    74 \/* synopsis: r[P2]=NULL                       *\/\n+#define OP_Null           75 \/* synopsis: r[P2..P3]=NULL                   *\/\n+#define OP_SoftNull       76 \/* synopsis: r[P1]=NULL                       *\/\n+#define OP_Blob           77 \/* synopsis: r[P2]=P4 (len=P1)                *\/\n+#define OP_Variable       78 \/* synopsis: r[P2]=parameter(P1,P4)           *\/\n+#define OP_Move           79 \/* synopsis: r[P2@P3]=r[P1@P3]                *\/\n+#define OP_Copy           80 \/* synopsis: r[P2@P3+1]=r[P1@P3+1]            *\/\n+#define OP_SCopy          81 \/* synopsis: r[P2]=r[P1]                      *\/\n+#define OP_IntCopy        82 \/* synopsis: r[P2]=r[P1]                      *\/\n+#define OP_FkCheck        83\n+#define OP_ResultRow      84 \/* synopsis: output=r[P1@P2]                  *\/\n+#define OP_CollSeq        85\n+#define OP_AddImm         86 \/* synopsis: r[P1]=r[P1]+P2                   *\/\n+#define OP_RealAffinity   87\n+#define OP_Cast           88 \/* synopsis: affinity(r[P1])                  *\/\n+#define OP_Permutation    89\n+#define OP_Compare        90 \/* synopsis: r[P1@P3] <-> r[P2@P3]            *\/\n+#define OP_IsTrue         91 \/* synopsis: r[P2] = coalesce(r[P1]==TRUE,P3) ^ P4 *\/\n+#define OP_ZeroOrNull     92 \/* synopsis: r[P2] = 0 OR NULL                *\/\n+#define OP_Offset         93 \/* synopsis: r[P3] = sqlite_offset(P1)        *\/\n+#define OP_Column         94 \/* synopsis: r[P3]=PX cursor P1 column P2     *\/\n+#define OP_TypeCheck      95 \/* synopsis: typecheck(r[P1@P2])              *\/\n+#define OP_Affinity       96 \/* synopsis: affinity(r[P1@P2])               *\/\n+#define OP_MakeRecord     97 \/* synopsis: r[P3]=mkrec(r[P1@P2])            *\/\n+#define OP_Count          98 \/* synopsis: r[P2]=count()                    *\/\n+#define OP_ReadCookie     99\n+#define OP_SetCookie     100\n+#define OP_ReopenIdx     101 \/* synopsis: root=P2 iDb=P3                   *\/\n@@ -15305,70 +15667,75 @@\n-#define OP_OpenDup       112\n-#define OP_BitNot        113 \/* same as TK_BITNOT, synopsis: r[P2]= ~r[P1] *\/\n-#define OP_OpenAutoindex 114 \/* synopsis: nColumn=P2                       *\/\n-#define OP_OpenEphemeral 115 \/* synopsis: nColumn=P2                       *\/\n-#define OP_String8       116 \/* same as TK_STRING, synopsis: r[P2]='P4'    *\/\n-#define OP_SorterOpen    117\n-#define OP_SequenceTest  118 \/* synopsis: if( cursor[P1].ctr++ ) pc = P2   *\/\n-#define OP_OpenPseudo    119 \/* synopsis: P3 columns in r[P2]              *\/\n-#define OP_Close         120\n-#define OP_ColumnsUsed   121\n-#define OP_SeekScan      122 \/* synopsis: Scan-ahead up to P1 rows         *\/\n-#define OP_SeekHit       123 \/* synopsis: set P2<=seekHit<=P3              *\/\n-#define OP_Sequence      124 \/* synopsis: r[P2]=cursor[P1].ctr++           *\/\n-#define OP_NewRowid      125 \/* synopsis: r[P2]=rowid                      *\/\n-#define OP_Insert        126 \/* synopsis: intkey=r[P3] data=r[P2]          *\/\n-#define OP_RowCell       127\n-#define OP_Delete        128\n-#define OP_ResetCount    129\n-#define OP_SorterCompare 130 \/* synopsis: if key(P1)!=trim(r[P3],P4) goto P2 *\/\n-#define OP_SorterData    131 \/* synopsis: r[P2]=data                       *\/\n-#define OP_RowData       132 \/* synopsis: r[P2]=data                       *\/\n-#define OP_Rowid         133 \/* synopsis: r[P2]=rowid                      *\/\n-#define OP_NullRow       134\n-#define OP_SeekEnd       135\n-#define OP_IdxInsert     136 \/* synopsis: key=r[P2]                        *\/\n-#define OP_SorterInsert  137 \/* synopsis: key=r[P2]                        *\/\n-#define OP_IdxDelete     138 \/* synopsis: key=r[P2@P3]                     *\/\n-#define OP_DeferredSeek  139 \/* synopsis: Move P3 to P1.rowid if needed    *\/\n-#define OP_IdxRowid      140 \/* synopsis: r[P2]=rowid                      *\/\n-#define OP_FinishSeek    141\n-#define OP_Destroy       142\n-#define OP_Clear         143\n-#define OP_ResetSorter   144\n-#define OP_CreateBtree   145 \/* synopsis: r[P2]=root iDb=P1 flags=P3       *\/\n-#define OP_SqlExec       146\n-#define OP_ParseSchema   147\n-#define OP_LoadAnalysis  148\n-#define OP_DropTable     149\n-#define OP_DropIndex     150\n-#define OP_DropTrigger   151\n-#define OP_Real          152 \/* same as TK_FLOAT, synopsis: r[P2]=P4       *\/\n-#define OP_IntegrityCk   153\n-#define OP_RowSetAdd     154 \/* synopsis: rowset(P1)=r[P2]                 *\/\n-#define OP_Param         155\n-#define OP_FkCounter     156 \/* synopsis: fkctr[P1]+=P2                    *\/\n-#define OP_MemMax        157 \/* synopsis: r[P1]=max(r[P1],r[P2])           *\/\n-#define OP_OffsetLimit   158 \/* synopsis: if r[P1]>0 then r[P2]=r[P1]+max(0,r[P3]) else r[P2]=(-1) *\/\n-#define OP_AggInverse    159 \/* synopsis: accum=r[P3] inverse(r[P2@P5])    *\/\n-#define OP_AggStep       160 \/* synopsis: accum=r[P3] step(r[P2@P5])       *\/\n-#define OP_AggStep1      161 \/* synopsis: accum=r[P3] step(r[P2@P5])       *\/\n-#define OP_AggValue      162 \/* synopsis: r[P3]=value N=P2                 *\/\n-#define OP_AggFinal      163 \/* synopsis: accum=r[P1] N=P2                 *\/\n-#define OP_Expire        164\n-#define OP_CursorLock    165\n-#define OP_CursorUnlock  166\n-#define OP_TableLock     167 \/* synopsis: iDb=P1 root=P2 write=P3          *\/\n-#define OP_VBegin        168\n-#define OP_VCreate       169\n-#define OP_VDestroy      170\n-#define OP_VOpen         171\n-#define OP_VColumn       172 \/* synopsis: r[P3]=vcolumn(P2)                *\/\n-#define OP_VRename       173\n-#define OP_Pagecount     174\n-#define OP_MaxPgcnt      175\n-#define OP_Trace         176\n-#define OP_CursorHint    177\n-#define OP_ReleaseReg    178 \/* synopsis: release r[P1@P2] mask P3         *\/\n-#define OP_Noop          179\n-#define OP_Explain       180\n-#define OP_Abortable     181\n+#define OP_OpenRead      112 \/* synopsis: root=P2 iDb=P3                   *\/\n+#define OP_OpenWrite     113 \/* synopsis: root=P2 iDb=P3                   *\/\n+#define OP_BitNot        114 \/* same as TK_BITNOT, synopsis: r[P2]= ~r[P1] *\/\n+#define OP_OpenDup       115\n+#define OP_OpenAutoindex 116 \/* synopsis: nColumn=P2                       *\/\n+#define OP_String8       117 \/* same as TK_STRING, synopsis: r[P2]='P4'    *\/\n+#define OP_OpenEphemeral 118 \/* synopsis: nColumn=P2                       *\/\n+#define OP_SorterOpen    119\n+#define OP_SequenceTest  120 \/* synopsis: if( cursor[P1].ctr++ ) pc = P2   *\/\n+#define OP_OpenPseudo    121 \/* synopsis: P3 columns in r[P2]              *\/\n+#define OP_Close         122\n+#define OP_ColumnsUsed   123\n+#define OP_SeekScan      124 \/* synopsis: Scan-ahead up to P1 rows         *\/\n+#define OP_SeekHit       125 \/* synopsis: set P2<=seekHit<=P3              *\/\n+#define OP_Sequence      126 \/* synopsis: r[P2]=cursor[P1].ctr++           *\/\n+#define OP_NewRowid      127 \/* synopsis: r[P2]=rowid                      *\/\n+#define OP_Insert        128 \/* synopsis: intkey=r[P3] data=r[P2]          *\/\n+#define OP_RowCell       129\n+#define OP_Delete        130\n+#define OP_ResetCount    131\n+#define OP_SorterCompare 132 \/* synopsis: if key(P1)!=trim(r[P3],P4) goto P2 *\/\n+#define OP_SorterData    133 \/* synopsis: r[P2]=data                       *\/\n+#define OP_RowData       134 \/* synopsis: r[P2]=data                       *\/\n+#define OP_Rowid         135 \/* synopsis: r[P2]=PX rowid of P1             *\/\n+#define OP_NullRow       136\n+#define OP_SeekEnd       137\n+#define OP_IdxInsert     138 \/* synopsis: key=r[P2]                        *\/\n+#define OP_SorterInsert  139 \/* synopsis: key=r[P2]                        *\/\n+#define OP_IdxDelete     140 \/* synopsis: key=r[P2@P3]                     *\/\n+#define OP_DeferredSeek  141 \/* synopsis: Move P3 to P1.rowid if needed    *\/\n+#define OP_IdxRowid      142 \/* synopsis: r[P2]=rowid                      *\/\n+#define OP_FinishSeek    143\n+#define OP_Destroy       144\n+#define OP_Clear         145\n+#define OP_ResetSorter   146\n+#define OP_CreateBtree   147 \/* synopsis: r[P2]=root iDb=P1 flags=P3       *\/\n+#define OP_SqlExec       148\n+#define OP_ParseSchema   149\n+#define OP_LoadAnalysis  150\n+#define OP_DropTable     151\n+#define OP_DropIndex     152\n+#define OP_Real          153 \/* same as TK_FLOAT, synopsis: r[P2]=P4       *\/\n+#define OP_DropTrigger   154\n+#define OP_IntegrityCk   155\n+#define OP_RowSetAdd     156 \/* synopsis: rowset(P1)=r[P2]                 *\/\n+#define OP_Param         157\n+#define OP_FkCounter     158 \/* synopsis: fkctr[P1]+=P2                    *\/\n+#define OP_MemMax        159 \/* synopsis: r[P1]=max(r[P1],r[P2])           *\/\n+#define OP_OffsetLimit   160 \/* synopsis: if r[P1]>0 then r[P2]=r[P1]+max(0,r[P3]) else r[P2]=(-1) *\/\n+#define OP_AggInverse    161 \/* synopsis: accum=r[P3] inverse(r[P2@P5])    *\/\n+#define OP_AggStep       162 \/* synopsis: accum=r[P3] step(r[P2@P5])       *\/\n+#define OP_AggStep1      163 \/* synopsis: accum=r[P3] step(r[P2@P5])       *\/\n+#define OP_AggValue      164 \/* synopsis: r[P3]=value N=P2                 *\/\n+#define OP_AggFinal      165 \/* synopsis: accum=r[P1] N=P2                 *\/\n+#define OP_Expire        166\n+#define OP_CursorLock    167\n+#define OP_CursorUnlock  168\n+#define OP_TableLock     169 \/* synopsis: iDb=P1 root=P2 write=P3          *\/\n+#define OP_VBegin        170\n+#define OP_VCreate       171\n+#define OP_VDestroy      172\n+#define OP_VOpen         173\n+#define OP_VInitIn       174 \/* synopsis: r[P2]=ValueList(P1,P3)           *\/\n+#define OP_VColumn       175 \/* synopsis: r[P3]=vcolumn(P2)                *\/\n+#define OP_VRename       176\n+#define OP_Pagecount     177\n+#define OP_MaxPgcnt      178\n+#define OP_ClrSubtype    179 \/* synopsis: r[P1].subtype = 0                *\/\n+#define OP_FilterAdd     180 \/* synopsis: filter(P1) += key(P3@P4)         *\/\n+#define OP_Trace         181\n+#define OP_CursorHint    182\n+#define OP_ReleaseReg    183 \/* synopsis: release r[P1@P2] mask P3         *\/\n+#define OP_Noop          184\n+#define OP_Explain       185\n+#define OP_Abortable     186\n@@ -15387,5 +15754,5 @@\n-\/*   0 *\/ 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x10,\\\n-\/*   8 *\/ 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03,\\\n-\/*  16 *\/ 0x01, 0x01, 0x03, 0x12, 0x03, 0x03, 0x01, 0x09,\\\n-\/*  24 *\/ 0x09, 0x09, 0x09, 0x01, 0x09, 0x09, 0x09, 0x09,\\\n-\/*  32 *\/ 0x09, 0x09, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\\\n+\/*   0 *\/ 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00,\\\n+\/*   8 *\/ 0x01, 0x01, 0x01, 0x03, 0x03, 0x01, 0x01, 0x03,\\\n+\/*  16 *\/ 0x03, 0x03, 0x01, 0x12, 0x09, 0x09, 0x09, 0x09,\\\n+\/*  24 *\/ 0x01, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x01,\\\n+\/*  32 *\/ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\\\n@@ -15395,5 +15762,5 @@\n-\/*  64 *\/ 0x00, 0x00, 0x02, 0x02, 0x08, 0x00, 0x10, 0x10,\\\n-\/*  72 *\/ 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10,\\\n-\/*  80 *\/ 0x10, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00,\\\n-\/*  88 *\/ 0x00, 0x12, 0x1e, 0x20, 0x00, 0x00, 0x00, 0x00,\\\n-\/*  96 *\/ 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x26, 0x26,\\\n+\/*  64 *\/ 0x01, 0x00, 0x00, 0x02, 0x02, 0x08, 0x00, 0x10,\\\n+\/*  72 *\/ 0x10, 0x10, 0x00, 0x10, 0x00, 0x10, 0x10, 0x00,\\\n+\/*  80 *\/ 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x02, 0x02,\\\n+\/*  88 *\/ 0x02, 0x00, 0x00, 0x12, 0x1e, 0x20, 0x00, 0x00,\\\n+\/*  96 *\/ 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x26, 0x26,\\\n@@ -15401,9 +15768,10 @@\n-\/* 112 *\/ 0x00, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,\\\n-\/* 120 *\/ 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00,\\\n-\/* 128 *\/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,\\\n-\/* 136 *\/ 0x04, 0x04, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,\\\n-\/* 144 *\/ 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\\\n-\/* 152 *\/ 0x10, 0x00, 0x06, 0x10, 0x00, 0x04, 0x1a, 0x00,\\\n-\/* 160 *\/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\\\n-\/* 168 *\/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10,\\\n-\/* 176 *\/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,}\n+\/* 112 *\/ 0x00, 0x00, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00,\\\n+\/* 120 *\/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10,\\\n+\/* 128 *\/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,\\\n+\/* 136 *\/ 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x10, 0x00,\\\n+\/* 144 *\/ 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,\\\n+\/* 152 *\/ 0x00, 0x10, 0x00, 0x00, 0x06, 0x10, 0x00, 0x04,\\\n+\/* 160 *\/ 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\\\n+\/* 168 *\/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,\\\n+\/* 176 *\/ 0x00, 0x10, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00,\\\n+\/* 184 *\/ 0x00, 0x00, 0x00,}\n@@ -15417,1 +15785,1 @@\n-#define SQLITE_MX_JUMP_OPCODE  63  \/* Maximum JUMP opcode *\/\n+#define SQLITE_MX_JUMP_OPCODE  64  \/* Maximum JUMP opcode *\/\n@@ -15455,0 +15823,1 @@\n+SQLITE_PRIVATE   void sqlite3VdbeNoJumpsOutsideSubrtn(Vdbe*,int,int,int);\n@@ -15457,0 +15826,1 @@\n+# define sqlite3VdbeNoJumpsOutsideSubrtn(A,B,C,D)\n@@ -15501,1 +15871,0 @@\n-SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3*,Vdbe*);\n@@ -15950,0 +16319,7 @@\n+\/* Maximum number of symlinks that will be resolved while trying to\n+** expand a filename in xFullPathname() in the VFS.\n+*\/\n+#ifndef SQLITE_MAX_SYMLINK\n+# define SQLITE_MAX_SYMLINK 200\n+#endif\n+\n@@ -16478,0 +16854,1 @@\n+  int errByteOffset;            \/* Byte offset of error in SQL statement *\/\n@@ -16712,0 +17089,6 @@\n+#define SQLITE_BloomFilter    0x00080000 \/* Use a Bloom filter on searches *\/\n+#define SQLITE_BloomPulldown  0x00100000 \/* Run Bloom filters early *\/\n+#define SQLITE_BalancedMerge  0x00200000 \/* Balance multi-way merges *\/\n+#define SQLITE_ReleaseReg     0x00400000 \/* Use OP_ReleaseReg for testing *\/\n+#define SQLITE_FlttnUnionAll  0x00800000 \/* Disable the UNION ALL flattener *\/\n+   \/* TH3 expects this value  ^^^^^^^^^^ See flatten04.test *\/\n@@ -16814,1 +17197,1 @@\n-#define SQLITE_FUNC_OFFSET   0x8000 \/* Built-in sqlite_offset() function *\/\n+\/*                           0x8000 -- available for reuse *\/\n@@ -16831,0 +17214,1 @@\n+#define INLINEFUNC_sqlite_offset        6\n@@ -16885,1 +17269,1 @@\n-**   WFUNCTION(zName, nArg, iArg, xStep, xFinal, xValue, xInverse)\n+**   WAGGREGATE(zName, nArg, iArg, xStep, xFinal, xValue, xInverse)\n@@ -16912,0 +17296,4 @@\n+#define JFUNCTION(zName, nArg, iArg, xFunc) \\\n+  {nArg, SQLITE_FUNC_BUILTIN|SQLITE_DETERMINISTIC|SQLITE_INNOCUOUS|\\\n+   SQLITE_FUNC_CONSTANT|SQLITE_UTF8, \\\n+   SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }\n@@ -17053,0 +17441,1 @@\n+#define COLFLAG_NOEXPAND  0x0400   \/* Omit this column when expanding \"*\" *\/\n@@ -17459,0 +17848,5 @@\n+  union {\n+    char *z;            \/* Cache of aMem[0].z for vdbeRecordCompareString() *\/\n+    i64 i;              \/* Cache of aMem[0].u.i for vdbeRecordCompareInt() *\/\n+  } u;\n+  int n;              \/* Cache of aMem[0].n used by vdbeRecordCompareString() *\/\n@@ -17766,1 +18160,4 @@\n-  int iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/\n+  union {\n+    int iJoin;             \/* If EP_OuterON or EP_InnerON, the right table *\/\n+    int iOfst;             \/* else: start of token from start of statement *\/\n+  } w;\n@@ -17785,4 +18182,4 @@\n-#define EP_FromJoin   0x000001 \/* Originates in ON\/USING clause of outer join *\/\n-#define EP_Distinct   0x000002 \/* Aggregate function with DISTINCT keyword *\/\n-#define EP_HasFunc    0x000004 \/* Contains one or more functions of any kind *\/\n-#define EP_FixedCol   0x000008 \/* TK_Column with a known fixed value *\/\n+#define EP_OuterON    0x000001 \/* Originates in ON\/USING clause of outer join *\/\n+#define EP_InnerON    0x000002 \/* Originates in ON\/USING of an inner join *\/\n+#define EP_Distinct   0x000004 \/* Aggregate function with DISTINCT keyword *\/\n+#define EP_HasFunc    0x000008 \/* Contains one or more functions of any kind *\/\n@@ -17790,10 +18187,10 @@\n-#define EP_VarSelect  0x000020 \/* pSelect is correlated, not constant *\/\n-#define EP_DblQuoted  0x000040 \/* token.z was originally in \"...\" *\/\n-#define EP_InfixFunc  0x000080 \/* True for an infix function: LIKE, GLOB, etc *\/\n-#define EP_Collate    0x000100 \/* Tree contains a TK_COLLATE operator *\/\n-#define EP_Commuted   0x000200 \/* Comparison operator has been commuted *\/\n-#define EP_IntValue   0x000400 \/* Integer value contained in u.iValue *\/\n-#define EP_xIsSelect  0x000800 \/* x.pSelect is valid (otherwise x.pList is) *\/\n-#define EP_Skip       0x001000 \/* Operator does not contribute to affinity *\/\n-#define EP_Reduced    0x002000 \/* Expr struct EXPR_REDUCEDSIZE bytes only *\/\n-#define EP_TokenOnly  0x004000 \/* Expr struct EXPR_TOKENONLYSIZE bytes only *\/\n+#define EP_FixedCol   0x000020 \/* TK_Column with a known fixed value *\/\n+#define EP_VarSelect  0x000040 \/* pSelect is correlated, not constant *\/\n+#define EP_DblQuoted  0x000080 \/* token.z was originally in \"...\" *\/\n+#define EP_InfixFunc  0x000100 \/* True for an infix function: LIKE, GLOB, etc *\/\n+#define EP_Collate    0x000200 \/* Tree contains a TK_COLLATE operator *\/\n+#define EP_Commuted   0x000400 \/* Comparison operator has been commuted *\/\n+#define EP_IntValue   0x000800 \/* Integer value contained in u.iValue *\/\n+#define EP_xIsSelect  0x001000 \/* x.pSelect is valid (otherwise x.pList is) *\/\n+#define EP_Skip       0x002000 \/* Operator does not contribute to affinity *\/\n+#define EP_Reduced    0x004000 \/* Expr struct EXPR_REDUCEDSIZE bytes only *\/\n@@ -17801,7 +18198,7 @@\n-#define EP_MemToken   0x010000 \/* Need to sqlite3DbFree() Expr.zToken *\/\n-#define EP_IfNullRow  0x020000 \/* The TK_IF_NULL_ROW opcode *\/\n-#define EP_Unlikely   0x040000 \/* unlikely() or likelihood() function *\/\n-#define EP_ConstFunc  0x080000 \/* A SQLITE_FUNC_CONSTANT or _SLOCHNG function *\/\n-#define EP_CanBeNull  0x100000 \/* Can be null despite NOT NULL constraint *\/\n-#define EP_Subquery   0x200000 \/* Tree contains a TK_SELECT operator *\/\n-                 \/*   0x400000 \/\/ Available *\/\n+#define EP_TokenOnly  0x010000 \/* Expr struct EXPR_TOKENONLYSIZE bytes only *\/\n+#define EP_MemToken   0x020000 \/* Need to sqlite3DbFree() Expr.zToken *\/\n+#define EP_IfNullRow  0x040000 \/* The TK_IF_NULL_ROW opcode *\/\n+#define EP_Unlikely   0x080000 \/* unlikely() or likelihood() function *\/\n+#define EP_ConstFunc  0x100000 \/* A SQLITE_FUNC_CONSTANT or _SLOCHNG function *\/\n+#define EP_CanBeNull  0x200000 \/* Can be null despite NOT NULL constraint *\/\n+#define EP_Subquery   0x400000 \/* Tree contains a TK_SELECT operator *\/\n@@ -17830,2 +18227,2 @@\n-#define ExprAlwaysTrue(E)   (((E)->flags&(EP_FromJoin|EP_IsTrue))==EP_IsTrue)\n-#define ExprAlwaysFalse(E)  (((E)->flags&(EP_FromJoin|EP_IsFalse))==EP_IsFalse)\n+#define ExprAlwaysTrue(E)   (((E)->flags&(EP_OuterON|EP_IsTrue))==EP_IsTrue)\n+#define ExprAlwaysFalse(E)  (((E)->flags&(EP_OuterON|EP_IsFalse))==EP_IsFalse)\n@@ -17918,6 +18315,12 @@\n-    u8 sortFlags;           \/* Mask of KEYINFO_ORDER_* flags *\/\n-    unsigned eEName :2;     \/* Meaning of zEName *\/\n-    unsigned done :1;       \/* A flag to indicate when processing is finished *\/\n-    unsigned reusable :1;   \/* Constant expression is reusable *\/\n-    unsigned bSorterRef :1; \/* Defer evaluation until after sorting *\/\n-    unsigned bNulls: 1;     \/* True if explicit \"NULLS FIRST\/LAST\" *\/\n+    struct {\n+      u8 sortFlags;           \/* Mask of KEYINFO_ORDER_* flags *\/\n+      unsigned eEName :2;     \/* Meaning of zEName *\/\n+      unsigned done :1;       \/* Indicates when processing is finished *\/\n+      unsigned reusable :1;   \/* Constant expression is reusable *\/\n+      unsigned bSorterRef :1; \/* Defer evaluation until after sorting *\/\n+      unsigned bNulls :1;     \/* True if explicit \"NULLS FIRST\/LAST\" *\/\n+      unsigned bUsed :1;      \/* This column used in a SF_NestedFrom subquery *\/\n+      unsigned bUsingTerm:1;  \/* Term from the USING clause of a NestedFrom *\/\n+      unsigned bNoExpand: 1;  \/* Term is an auxiliary in NestedFrom and should\n+                              ** not be expanded by \"*\" in parent queries *\/\n+    } fg;\n@@ -17958,0 +18361,2 @@\n+  int nId;         \/* Number of identifiers on the list *\/\n+  u8 eU4;          \/* Which element of a.u4 is valid *\/\n@@ -17960,3 +18365,5 @@\n-    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/\n-  } *a;\n-  int nId;         \/* Number of identifiers on the list *\/\n+    union {\n+      int idx;          \/* Index in some Table.aCol[] of a column named zName *\/\n+      Expr *pExpr;      \/* Expr to implement a USING variable -- NOT USED *\/\n+    } u4;\n+  } a[1];\n@@ -17965,0 +18372,8 @@\n+\/*\n+** Allowed values for IdList.eType, which determines which value of the a.u4\n+** is valid.\n+*\/\n+#define EU4_NONE   0   \/* Does not use IdList.a.u4 *\/\n+#define EU4_IDX    1   \/* Uses IdList.a.u4.idx *\/\n+#define EU4_EXPR   2   \/* Uses IdList.a.u4.pExpr -- NOT CURRENTLY USED *\/\n+\n@@ -17992,0 +18407,1 @@\n+    unsigned isMaterialized:1; \/* This is a materialized view *\/\n@@ -17997,0 +18413,4 @@\n+    unsigned isUsing :1;       \/* u3.pUsing is valid *\/\n+    unsigned isOn :1;          \/* u3.pOn was once valid and non-NULL *\/\n+    unsigned isSynthUsing :1;  \/* u3.pUsing is synthensized from NATURAL *\/\n+    unsigned isNestedFrom :1;  \/* pSelect is a SF_NestedFrom subquery *\/\n@@ -17999,2 +18419,4 @@\n-  Expr *pOn;        \/* The ON clause of a join *\/\n-  IdList *pUsing;   \/* The USING clause of a join *\/\n+  union {\n+    Expr *pOn;        \/* fg.isUsing==0 =>  The ON clause of a join *\/\n+    IdList *pUsing;   \/* fg.isUsing==1 =>  The USING clause of a join *\/\n+  } u3;\n@@ -18012,0 +18434,9 @@\n+\/*\n+** The OnOrUsing object represents either an ON clause or a USING clause.\n+** It can never be both at the same time, but it can be neither.\n+*\/\n+struct OnOrUsing {\n+  Expr *pOn;         \/* The ON clause of a join *\/\n+  IdList *pUsing;    \/* The USING clause of a join *\/\n+};\n+\n@@ -18040,8 +18471,9 @@\n-#define JT_INNER     0x0001    \/* Any kind of inner or cross join *\/\n-#define JT_CROSS     0x0002    \/* Explicit use of the CROSS keyword *\/\n-#define JT_NATURAL   0x0004    \/* True for a \"natural\" join *\/\n-#define JT_LEFT      0x0008    \/* Left outer join *\/\n-#define JT_RIGHT     0x0010    \/* Right outer join *\/\n-#define JT_OUTER     0x0020    \/* The \"OUTER\" keyword is present *\/\n-#define JT_ERROR     0x0040    \/* unknown or unsupported join type *\/\n-\n+#define JT_INNER     0x01    \/* Any kind of inner or cross join *\/\n+#define JT_CROSS     0x02    \/* Explicit use of the CROSS keyword *\/\n+#define JT_NATURAL   0x04    \/* True for a \"natural\" join *\/\n+#define JT_LEFT      0x08    \/* Left outer join *\/\n+#define JT_RIGHT     0x10    \/* Right outer join *\/\n+#define JT_OUTER     0x20    \/* The \"OUTER\" keyword is present *\/\n+#define JT_LTORJ     0x40    \/* One of the LEFT operands of a RIGHT JOIN\n+                             ** Mnemonic: Left Table Of Right Join *\/\n+#define JT_ERROR     0x80    \/* unknown or unsupported join type *\/\n@@ -18070,1 +18502,1 @@\n-                        \/*     0x1000    not currently used *\/\n+#define WHERE_RIGHT_JOIN       0x1000 \/* Processing a RIGHT JOIN *\/\n@@ -18266,0 +18698,3 @@\n+\/* True if S exists and has SF_NestedFrom *\/\n+#define IsNestedFrom(S) ((S)!=0 && ((S)->selFlags&SF_NestedFrom)!=0)\n+\n@@ -18477,0 +18912,1 @@\n+  u8 withinRJSubrtn;   \/* Nesting level for RIGHT JOIN body subroutines *\/\n@@ -18528,0 +18964,1 @@\n+  Parse *pOuterParse;     \/* Outer Parse object when nested *\/\n@@ -18578,1 +19015,2 @@\n-#define PARSE_HDR_SZ offsetof(Parse,aTempReg) \/* Recursive part w\/o aColCache*\/\n+#define PARSE_HDR(X)  (((char*)(X))+offsetof(Parse,zErrMsg))\n+#define PARSE_HDR_SZ (offsetof(Parse,aTempReg)-offsetof(Parse,zErrMsg)) \/* Recursive part w\/o aColCache*\/\n@@ -18647,14 +19085,14 @@\n- * Each trigger present in the database schema is stored as an instance of\n- * struct Trigger.\n- *\n- * Pointers to instances of struct Trigger are stored in two ways.\n- * 1. In the \"trigHash\" hash table (part of the sqlite3* that represents the\n- *    database). This allows Trigger structures to be retrieved by name.\n- * 2. All triggers associated with a single table form a linked list, using the\n- *    pNext member of struct Trigger. A pointer to the first element of the\n- *    linked list is stored as the \"pTrigger\" member of the associated\n- *    struct Table.\n- *\n- * The \"step_list\" member points to the first element of a linked list\n- * containing the SQL statements specified as the trigger program.\n- *\/\n+** Each trigger present in the database schema is stored as an instance of\n+** struct Trigger.\n+**\n+** Pointers to instances of struct Trigger are stored in two ways.\n+** 1. In the \"trigHash\" hash table (part of the sqlite3* that represents the\n+**    database). This allows Trigger structures to be retrieved by name.\n+** 2. All triggers associated with a single table form a linked list, using the\n+**    pNext member of struct Trigger. A pointer to the first element of the\n+**    linked list is stored as the \"pTrigger\" member of the associated\n+**    struct Table.\n+**\n+** The \"step_list\" member points to the first element of a linked list\n+** containing the SQL statements specified as the trigger program.\n+*\/\n@@ -18687,37 +19125,42 @@\n- * An instance of struct TriggerStep is used to store a single SQL statement\n- * that is a part of a trigger-program.\n- *\n- * Instances of struct TriggerStep are stored in a singly linked list (linked\n- * using the \"pNext\" member) referenced by the \"step_list\" member of the\n- * associated struct Trigger instance. The first element of the linked list is\n- * the first step of the trigger-program.\n- *\n- * The \"op\" member indicates whether this is a \"DELETE\", \"INSERT\", \"UPDATE\" or\n- * \"SELECT\" statement. The meanings of the other members is determined by the\n- * value of \"op\" as follows:\n- *\n- * (op == TK_INSERT)\n- * orconf    -> stores the ON CONFLICT algorithm\n- * pSelect   -> If this is an INSERT INTO ... SELECT ... statement, then\n- *              this stores a pointer to the SELECT statement. Otherwise NULL.\n- * zTarget   -> Dequoted name of the table to insert into.\n- * pExprList -> If this is an INSERT INTO ... VALUES ... statement, then\n- *              this stores values to be inserted. Otherwise NULL.\n- * pIdList   -> If this is an INSERT INTO ... (<column-names>) VALUES ...\n- *              statement, then this stores the column-names to be\n- *              inserted into.\n- *\n- * (op == TK_DELETE)\n- * zTarget   -> Dequoted name of the table to delete from.\n- * pWhere    -> The WHERE clause of the DELETE statement if one is specified.\n- *              Otherwise NULL.\n- *\n- * (op == TK_UPDATE)\n- * zTarget   -> Dequoted name of the table to update.\n- * pWhere    -> The WHERE clause of the UPDATE statement if one is specified.\n- *              Otherwise NULL.\n- * pExprList -> A list of the columns to update and the expressions to update\n- *              them to. See sqlite3Update() documentation of \"pChanges\"\n- *              argument.\n- *\n- *\/\n+** An instance of struct TriggerStep is used to store a single SQL statement\n+** that is a part of a trigger-program.\n+**\n+** Instances of struct TriggerStep are stored in a singly linked list (linked\n+** using the \"pNext\" member) referenced by the \"step_list\" member of the\n+** associated struct Trigger instance. The first element of the linked list is\n+** the first step of the trigger-program.\n+**\n+** The \"op\" member indicates whether this is a \"DELETE\", \"INSERT\", \"UPDATE\" or\n+** \"SELECT\" statement. The meanings of the other members is determined by the\n+** value of \"op\" as follows:\n+**\n+** (op == TK_INSERT)\n+** orconf    -> stores the ON CONFLICT algorithm\n+** pSelect   -> The content to be inserted - either a SELECT statement or\n+**              a VALUES clause.\n+** zTarget   -> Dequoted name of the table to insert into.\n+** pIdList   -> If this is an INSERT INTO ... (<column-names>) VALUES ...\n+**              statement, then this stores the column-names to be\n+**              inserted into.\n+** pUpsert   -> The ON CONFLICT clauses for an Upsert\n+**\n+** (op == TK_DELETE)\n+** zTarget   -> Dequoted name of the table to delete from.\n+** pWhere    -> The WHERE clause of the DELETE statement if one is specified.\n+**              Otherwise NULL.\n+**\n+** (op == TK_UPDATE)\n+** zTarget   -> Dequoted name of the table to update.\n+** pWhere    -> The WHERE clause of the UPDATE statement if one is specified.\n+**              Otherwise NULL.\n+** pExprList -> A list of the columns to update and the expressions to update\n+**              them to. See sqlite3Update() documentation of \"pChanges\"\n+**              argument.\n+**\n+** (op == TK_SELECT)\n+** pSelect   -> The SELECT statement\n+**\n+** (op == TK_RETURNING)\n+** pExprList -> The list of expressions that follow the RETURNING keyword.\n+**\n+*\/\n@@ -18873,0 +19316,1 @@\n+  int (*xAltLocaltime)(const void*,void*); \/* Alternative localtime() routine *\/\n@@ -19077,1 +19521,1 @@\n-  FuncDef *pFunc;         \/* The function *\/\n+  FuncDef *pWFunc;        \/* The function *\/\n@@ -19332,0 +19776,1 @@\n+SQLITE_PRIVATE   void sqlite3TreeViewLine(TreeView*, const char *zFormat, ...);\n@@ -19335,0 +19780,3 @@\n+SQLITE_PRIVATE   void sqlite3TreeViewBareIdList(TreeView*, const IdList*, const char*);\n+SQLITE_PRIVATE   void sqlite3TreeViewIdList(TreeView*, const IdList*, u8, const char*);\n+SQLITE_PRIVATE   void sqlite3TreeViewColumnList(TreeView*, const Column*, int, u8);\n@@ -19338,0 +19786,15 @@\n+SQLITE_PRIVATE   void sqlite3TreeViewUpsert(TreeView*, const Upsert*, u8);\n+#if TREETRACE_ENABLED\n+SQLITE_PRIVATE   void sqlite3TreeViewDelete(const With*, const SrcList*, const Expr*,\n+                             const ExprList*,const Expr*, const Trigger*);\n+SQLITE_PRIVATE   void sqlite3TreeViewInsert(const With*, const SrcList*,\n+                             const IdList*, const Select*, const ExprList*,\n+                             int, const Upsert*, const Trigger*);\n+SQLITE_PRIVATE   void sqlite3TreeViewUpdate(const With*, const SrcList*, const ExprList*,\n+                             const Expr*, int, const ExprList*, const Expr*,\n+                             const Upsert*, const Trigger*);\n+#endif\n+#ifndef SQLITE_OMIT_TRIGGER\n+SQLITE_PRIVATE   void sqlite3TreeViewTriggerStep(TreeView*, const TriggerStep*, u8, u8);\n+SQLITE_PRIVATE   void sqlite3TreeViewTrigger(TreeView*, const Trigger*, u8, u8);\n+#endif\n@@ -19342,0 +19805,17 @@\n+SQLITE_PRIVATE   void sqlite3ShowExpr(const Expr*);\n+SQLITE_PRIVATE   void sqlite3ShowExprList(const ExprList*);\n+SQLITE_PRIVATE   void sqlite3ShowIdList(const IdList*);\n+SQLITE_PRIVATE   void sqlite3ShowSrcList(const SrcList*);\n+SQLITE_PRIVATE   void sqlite3ShowSelect(const Select*);\n+SQLITE_PRIVATE   void sqlite3ShowWith(const With*);\n+SQLITE_PRIVATE   void sqlite3ShowUpsert(const Upsert*);\n+#ifndef SQLITE_OMIT_TRIGGER\n+SQLITE_PRIVATE   void sqlite3ShowTriggerStep(const TriggerStep*);\n+SQLITE_PRIVATE   void sqlite3ShowTriggerStepList(const TriggerStep*);\n+SQLITE_PRIVATE   void sqlite3ShowTrigger(const Trigger*);\n+SQLITE_PRIVATE   void sqlite3ShowTriggerList(const Trigger*);\n+#endif\n+#ifndef SQLITE_OMIT_WINDOWFUNC\n+SQLITE_PRIVATE   void sqlite3ShowWindow(const Window*);\n+SQLITE_PRIVATE   void sqlite3ShowWinFunc(const Window*);\n+#endif\n@@ -19343,1 +19823,0 @@\n-\n@@ -19353,1 +19832,1 @@\n-SQLITE_PRIVATE int sqlite3RunParser(Parse*, const char*, char **);\n+SQLITE_PRIVATE int sqlite3RunParser(Parse*, const char*);\n@@ -19492,1 +19971,1 @@\n-                                      Token*, Select*, Expr*, IdList*);\n+                                      Token*, Select*, OnOrUsing*);\n@@ -19496,1 +19975,1 @@\n-SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList*);\n+SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(Parse*,SrcList*);\n@@ -19499,0 +19978,1 @@\n+SQLITE_PRIVATE void sqlite3ClearOnOrUsing(sqlite3*, OnOrUsing*);\n@@ -19514,0 +19994,1 @@\n+SQLITE_PRIVATE void sqlite3CodeChangeCount(Vdbe*,int,const char*);\n@@ -19517,1 +19998,2 @@\n-SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(Parse*,SrcList*,Expr*,ExprList*,ExprList*,u16,int);\n+SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(Parse*,SrcList*,Expr*,ExprList*,\n+                             ExprList*,Select*,u16,int);\n@@ -19596,0 +20078,1 @@\n+SQLITE_PRIVATE int sqlite3ExprIsTableConstraint(Expr*,const SrcItem*);\n@@ -19632,0 +20115,1 @@\n+SQLITE_PRIVATE void sqlite3QuoteValue(StrAccum*,sqlite3_value*);\n@@ -19634,0 +20118,1 @@\n+SQLITE_PRIVATE void sqlite3RegisterJsonFunctions(void);\n@@ -19635,0 +20120,3 @@\n+#if !defined(SQLITE_OMIT_VIRTUALTABLE) && !defined(SQLITE_OMIT_JSON)\n+SQLITE_PRIVATE   int sqlite3JsonTableFunctions(sqlite3*);\n+#endif\n@@ -19688,1 +20176,2 @@\n-SQLITE_PRIVATE void sqlite3SetJoinExpr(Expr*,int);\n+SQLITE_PRIVATE void sqlite3SrcItemColumnUsed(SrcItem*,int);\n+SQLITE_PRIVATE void sqlite3SetJoinExpr(Expr*,int,u32);\n@@ -19724,1 +20213,0 @@\n-#ifndef SQLITE_OMIT_VIRTUALTABLE\n@@ -19726,4 +20214,0 @@\n-#endif\n-#if defined(SQLITE_ENABLE_STMT_SCANSTATUS) || \\\n-    defined(SQLITE_ENABLE_STAT4) || \\\n-    defined(SQLITE_EXPLAIN_ESTIMATED_ROWS)\n@@ -19731,1 +20215,0 @@\n-#endif\n@@ -19918,1 +20401,1 @@\n-SQLITE_PRIVATE void sqlite3OomFault(sqlite3*);\n+SQLITE_PRIVATE void *sqlite3OomFault(sqlite3*);\n@@ -19924,0 +20407,1 @@\n+SQLITE_PRIVATE int sqlite3StrAccumEnlarge(StrAccum*, int);\n@@ -19929,0 +20413,2 @@\n+SQLITE_PRIVATE void sqlite3RecordErrorByteOffset(sqlite3*,const char*);\n+SQLITE_PRIVATE void sqlite3RecordErrorOffsetOfExpr(sqlite3*,const Expr*);\n@@ -20033,0 +20519,1 @@\n+\n@@ -20034,0 +20521,4 @@\n+#if (defined(SQLITE_ENABLE_DBPAGE_VTAB) || defined(SQLITE_TEST)) \\\n+    && !defined(SQLITE_OMIT_VIRTUALTABLE)\n+SQLITE_PRIVATE   void sqlite3VtabUsesAllSchemas(sqlite3_index_info*);\n+#endif\n@@ -20037,1 +20528,2 @@\n-SQLITE_PRIVATE void sqlite3ParserReset(Parse*);\n+SQLITE_PRIVATE void sqlite3ParseObjectInit(Parse*,sqlite3*);\n+SQLITE_PRIVATE void sqlite3ParseObjectReset(Parse*);\n@@ -20470,0 +20962,8 @@\n+\/* DO NOT EDIT!\n+** This file is automatically generated by the script in the canonical\n+** SQLite source tree at tool\/mkctimec.tcl.\n+**\n+** To modify this header, edit any of the various lists in that script\n+** which specify categories of generated conditionals in this file.\n+*\/\n+\n@@ -20518,3 +21018,0 @@\n-\/*\n-** BEGIN CODE GENERATED BY tool\/mkctime.tcl\n-*\/\n@@ -20729,3 +21226,0 @@\n-#ifdef SQLITE_ENABLE_JSON1\n-  \"ENABLE_JSON1\",\n-#endif\n@@ -20777,3 +21271,0 @@\n-#ifdef SQLITE_ENABLE_SELECTTRACE\n-  \"ENABLE_SELECTTRACE\",\n-#endif\n@@ -20801,0 +21292,3 @@\n+#ifdef SQLITE_ENABLE_TREETRACE\n+  \"ENABLE_TREETRACE\",\n+#endif\n@@ -21055,0 +21549,3 @@\n+#ifdef SQLITE_OMIT_JSON\n+  \"OMIT_JSON\",\n+#endif\n@@ -21243,4 +21740,2 @@\n-\/*\n-** END CODE GENERATED BY tool\/mkctime.tcl\n-*\/\n-};\n+\n+} ;\n@@ -21545,0 +22040,1 @@\n+   0,                         \/* xAltLocaltime *\/\n@@ -21548,0 +22044,3 @@\n+#ifdef SQLITE_DEBUG\n+   {0,0,0,0,0,0}              \/* aTune *\/\n+#endif\n@@ -21602,1 +22101,1 @@\n-SQLITE_PRIVATE u32 sqlite3SelectTrace = 0;\n+SQLITE_PRIVATE u32 sqlite3TreeTrace = 0;\n@@ -21758,1 +22257,1 @@\n-  i8 iDb;                 \/* Index of cursor database in db->aDb[] (or -1) *\/\n+  i8 iDb;                 \/* Index of cursor database in db->aDb[] *\/\n@@ -21769,1 +22268,1 @@\n-  Bool hasBeenDuped:1;    \/* This cursor was source or target of OP_OpenDup *\/\n+  Bool noReuse:1;         \/* OpenEphemeral may not reuse this cursor *\/\n@@ -21771,1 +22270,4 @@\n-  Btree *pBtx;            \/* Separate file holding temporary table *\/\n+  union {                 \/* pBtx for isEphermeral.  pAltMap otherwise *\/\n+    Btree *pBtx;            \/* Separate file holding temporary table *\/\n+    u32 *aAltMap;           \/* Mapping from table to index column numbers *\/\n+  } ub;\n@@ -21773,1 +22275,0 @@\n-  u32 *aAltMap;           \/* Mapping from table to index column numbers *\/\n@@ -21815,0 +22316,5 @@\n+\/* Return true if P is a null-only cursor\n+*\/\n+#define IsNullCursor(P) \\\n+  ((P)->eCurType==CURTYPE_PSEUDO && (P)->nullRow && (P)->seekResult==0)\n+\n@@ -21889,0 +22395,2 @@\n+  char *z;            \/* String or BLOB value *\/\n+  int n;              \/* Number of characters in string value, excluding '\\0' *\/\n@@ -21892,2 +22400,0 @@\n-  int n;              \/* Number of characters in string value, excluding '\\0' *\/\n-  char *z;            \/* String or BLOB value *\/\n@@ -21895,1 +22401,1 @@\n-  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/\n+  sqlite3 *db;        \/* The associated database connection *\/\n@@ -21898,1 +22404,1 @@\n-  sqlite3 *db;        \/* The associated database connection *\/\n+  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/\n@@ -21910,1 +22416,1 @@\n-#define MEMCELLSIZE offsetof(Mem,zMalloc)\n+#define MEMCELLSIZE offsetof(Mem,db)\n@@ -21912,1 +22418,1 @@\n-\/* One or more of the following flags are set to indicate the validOK\n+\/* One or more of the following flags are set to indicate the\n@@ -21915,0 +22421,32 @@\n+**  *  MEM_Null                An SQL NULL value\n+**\n+**  *  MEM_Null|MEM_Zero       An SQL NULL with the virtual table\n+**                             UPDATE no-change flag set\n+**\n+**  *  MEM_Null|MEM_Term|      An SQL NULL, but also contains a\n+**        MEM_Subtype          pointer accessible using\n+**                             sqlite3_value_pointer().\n+**\n+**  *  MEM_Null|MEM_Cleared    Special SQL NULL that compares non-equal\n+**                             to other NULLs even using the IS operator.\n+**\n+**  *  MEM_Str                 A string, stored in Mem.z with\n+**                             length Mem.n.  Zero-terminated if\n+**                             MEM_Term is set.  This flag is\n+**                             incompatible with MEM_Blob and\n+**                             MEM_Null, but can appear with MEM_Int,\n+**                             MEM_Real, and MEM_IntReal.\n+**\n+**  *  MEM_Blob                A blob, stored in Mem.z length Mem.n.\n+**                             Incompatible with MEM_Str, MEM_Null,\n+**                             MEM_Int, MEM_Real, and MEM_IntReal.\n+**\n+**  *  MEM_Blob|MEM_Zero       A blob in Mem.z of length Mem.n plus\n+**                             MEM.u.i extra 0x00 bytes at the end.\n+**\n+**  *  MEM_Int                 Integer stored in Mem.u.i.\n+**\n+**  *  MEM_Real                Real stored in Mem.u.r.\n+**\n+**  *  MEM_IntReal             Real stored as an integer in Mem.u.i.\n+**\n@@ -21925,0 +22463,1 @@\n+#define MEM_Undefined 0x0000   \/* Value is undefined *\/\n@@ -21932,0 +22471,3 @@\n+\n+\/* Extra bits that modify the meanings of the core datatypes above\n+*\/\n@@ -21933,1 +22475,1 @@\n-#define MEM_Undefined 0x0080   \/* Value is undefined *\/\n+ \/*                   0x0080   \/\/ Available *\/\n@@ -21935,2 +22477,4 @@\n-#define MEM_TypeMask  0xc1bf   \/* Mask of type bits *\/\n-\n+#define MEM_Term      0x0200   \/* String in Mem.z is zero terminated *\/\n+#define MEM_Zero      0x0400   \/* Mem.i contains count of 0s appended to blob *\/\n+#define MEM_Subtype   0x0800   \/* Mem.eSubtype is valid *\/\n+#define MEM_TypeMask  0x0dbf   \/* Mask of type bits *\/\n@@ -21938,4 +22482,2 @@\n-\/* Whenever Mem contains a valid string or blob representation, one of\n-** the following flags must be set to determine the memory management\n-** policy for Mem.z.  The MEM_Term flag tells us whether or not the\n-** string is \\000 or \\u0000 terminated\n+\/* Bits that determine the storage for Mem.z for a string or blob or\n+** aggregate accumulator.\n@@ -21943,11 +22485,4 @@\n-#define MEM_Term      0x0200   \/* String in Mem.z is zero terminated *\/\n-#define MEM_Dyn       0x0400   \/* Need to call Mem.xDel() on Mem.z *\/\n-#define MEM_Static    0x0800   \/* Mem.z points to a static string *\/\n-#define MEM_Ephem     0x1000   \/* Mem.z points to an ephemeral string *\/\n-#define MEM_Agg       0x2000   \/* Mem.z points to an agg function context *\/\n-#define MEM_Zero      0x4000   \/* Mem.i contains count of 0s appended to blob *\/\n-#define MEM_Subtype   0x8000   \/* Mem.eSubtype is valid *\/\n-#ifdef SQLITE_OMIT_INCRBLOB\n-  #undef MEM_Zero\n-  #define MEM_Zero 0x0000\n-#endif\n+#define MEM_Dyn       0x1000   \/* Need to call Mem.xDel() on Mem.z *\/\n+#define MEM_Static    0x2000   \/* Mem.z points to a static string *\/\n+#define MEM_Ephem     0x4000   \/* Mem.z points to an ephemeral string *\/\n+#define MEM_Agg       0x8000   \/* Mem.z points to an agg function context *\/\n@@ -21975,1 +22510,1 @@\n-** Return true if a memory cell is not marked as invalid.  This macro\n+** Return true if a memory cell has been initialized and is valid.\n@@ -21977,0 +22512,4 @@\n+**\n+** A Memory cell is initialized if at least one of the\n+** MEM_Null, MEM_Str, MEM_Int, MEM_Real, MEM_Blob, or MEM_IntReal bits\n+** is set.  It is \"undefined\" if all those bits are zero.\n@@ -21979,1 +22518,1 @@\n-#define memIsValid(M)  ((M)->flags & MEM_Undefined)==0\n+#define memIsValid(M)  ((M)->flags & MEM_AffMask)!=0\n@@ -22017,0 +22556,1 @@\n+  u8 enc;                 \/* Encoding to use for results *\/\n@@ -22065,1 +22605,0 @@\n-  u32 iVdbeMagic;         \/* Magic number defining state of the SQL statement *\/\n@@ -22103,1 +22642,1 @@\n-  u8 doingRerun;          \/* True if rerunning after an auto-reprepare *\/\n+  u8 eVdbeState;          \/* On of the VDBE_*_STATE values *\/\n@@ -22107,1 +22646,0 @@\n-  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/\n@@ -22113,1 +22651,1 @@\n-  u32 aCounter[7];        \/* Counters used by sqlite3_stmt_status() *\/\n+  u32 aCounter[9];        \/* Counters used by sqlite3_stmt_status() *\/\n@@ -22134,1 +22672,1 @@\n-** The following are allowed values for Vdbe.magic\n+** The following are allowed values for Vdbe.eVdbeState\n@@ -22136,5 +22674,4 @@\n-#define VDBE_MAGIC_INIT     0x16bceaa5    \/* Building a VDBE program *\/\n-#define VDBE_MAGIC_RUN      0x2df20da3    \/* VDBE is ready to execute *\/\n-#define VDBE_MAGIC_HALT     0x319c2973    \/* VDBE has completed execution *\/\n-#define VDBE_MAGIC_RESET    0x48fa9f76    \/* Reset and ready to run again *\/\n-#define VDBE_MAGIC_DEAD     0x5606c3c8    \/* The VDBE has been deallocated *\/\n+#define VDBE_INIT_STATE     0   \/* Prepared statement under construction *\/\n+#define VDBE_READY_STATE    1   \/* Ready to run but not yet started *\/\n+#define VDBE_RUN_STATE      2   \/* Run in progress *\/\n+#define VDBE_HALT_STATE     3   \/* Finished.  Need reset() or finalize() *\/\n@@ -22163,0 +22700,25 @@\n+\/*\n+** An instance of this object is used to pass an vector of values into\n+** OP_VFilter, the xFilter method of a virtual table.  The vector is the\n+** set of values on the right-hand side of an IN constraint.\n+**\n+** The value as passed into xFilter is an sqlite3_value with a \"pointer\"\n+** type, such as is generated by sqlite3_result_pointer() and read by\n+** sqlite3_value_pointer.  Such values have MEM_Term|MEM_Subtype|MEM_Null\n+** and a subtype of 'p'.  The sqlite3_vtab_in_first() and _next() interfaces\n+** know how to use this object to step through all the values in the\n+** right operand of the IN constraint.\n+*\/\n+typedef struct ValueList ValueList;\n+struct ValueList {\n+  BtCursor *pCsr;          \/* An ephemeral table holding all values *\/\n+  sqlite3_value *pOut;     \/* Register to hold each decoded output value *\/\n+};\n+\n+\/* Size of content associated with serial types that fit into a\n+** single-byte varint.\n+*\/\n+#ifndef SQLITE_AMALGAMATION\n+SQLITE_PRIVATE const u8 sqlite3SmallTypeSizes[];\n+#endif\n+\n@@ -22168,0 +22730,1 @@\n+SQLITE_PRIVATE void sqlite3VdbeFreeCursorNN(Vdbe*,VdbeCursor*);\n@@ -22169,0 +22732,1 @@\n+SQLITE_PRIVATE int SQLITE_NOINLINE sqlite3VdbeHandleMovedCursor(VdbeCursor *p);\n@@ -22170,1 +22734,0 @@\n-SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor**, u32*);\n@@ -22174,2 +22737,7 @@\n-SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(unsigned char*, Mem*, u32);\n-SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);\n+#ifdef SQLITE_MIXED_ENDIAN_64BIT_FLOAT\n+SQLITE_PRIVATE   u64 sqlite3FloatSwap(u64 in);\n+# define swapMixedEndianFloat(X)  X = sqlite3FloatSwap(X)\n+#else\n+# define swapMixedEndianFloat(X)\n+#endif\n+SQLITE_PRIVATE void sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);\n@@ -22221,1 +22789,1 @@\n-SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem*);\n+SQLITE_PRIVATE i64 sqlite3VdbeIntValue(const Mem*);\n@@ -22232,0 +22800,1 @@\n+SQLITE_PRIVATE void sqlite3VdbeMemReleaseMalloc(Mem*p);\n@@ -22634,2 +23203,1 @@\n-        sqlite3VdbeClearObject(db, pVdbe);\n-        sqlite3DbFree(db, pVdbe);\n+        sqlite3VdbeDelete(pVdbe);\n@@ -23199,2 +23767,4 @@\n-** If the sqlite3GlobalConfig.bLocaltimeFault variable is true then this\n-** routine will always fail.\n+** If the sqlite3GlobalConfig.bLocaltimeFault variable is non-zero then this\n+** routine will always fail.  If bLocaltimeFault is nonzero and\n+** sqlite3GlobalConfig.xAltLocaltime is not NULL, then xAltLocaltime() is\n+** invoked in place of the OS-defined localtime() function.\n@@ -23216,1 +23786,9 @@\n-  if( sqlite3GlobalConfig.bLocaltimeFault ) pX = 0;\n+  if( sqlite3GlobalConfig.bLocaltimeFault ){\n+    if( sqlite3GlobalConfig.xAltLocaltime!=0\n+     && 0==sqlite3GlobalConfig.xAltLocaltime((const void*)t,(void*)pTm)\n+    ){\n+      pX = pTm;\n+    }else{\n+      pX = 0;\n+    }\n+  }\n@@ -23219,0 +23797,1 @@\n+#if SQLITE_THREADSAFE>0\n@@ -23220,0 +23799,1 @@\n+#endif\n@@ -23223,1 +23803,7 @@\n-  if( sqlite3GlobalConfig.bLocaltimeFault ) return 1;\n+  if( sqlite3GlobalConfig.bLocaltimeFault ){\n+    if( sqlite3GlobalConfig.xAltLocaltime!=0 ){\n+      return sqlite3GlobalConfig.xAltLocaltime((const void*)t,(void*)pTm);\n+    }else{\n+      return 1;\n+    }\n+  }\n@@ -23238,6 +23824,1 @@\n-** Compute the difference (in milliseconds) between localtime and UTC\n-** (a.k.a. GMT) for the time value p where p is in UTC. If no error occurs,\n-** return this value and set *pRc to SQLITE_OK.\n-**\n-** Or, if an error does occur, set *pRc to SQLITE_ERROR. The returned value\n-** is undefined in this case.\n+** Assuming the input DateTime is UTC, move it to its localtime equivalent.\n@@ -23245,4 +23826,3 @@\n-static sqlite3_int64 localtimeOffset(\n-  DateTime *p,                    \/* Date at which to calculate offset *\/\n-  sqlite3_context *pCtx,          \/* Write error here if one occurs *\/\n-  int *pRc                        \/* OUT: Error code. SQLITE_OK or ERROR *\/\n+static int toLocaltime(\n+  DateTime *p,                   \/* Date at which to calculate offset *\/\n+  sqlite3_context *pCtx          \/* Write error here if one occurs *\/\n@@ -23250,1 +23830,0 @@\n-  DateTime x, y;\n@@ -23253,0 +23832,1 @@\n+  int iYearDiff;\n@@ -23257,3 +23837,4 @@\n-  x = *p;\n-  computeYMD_HMS(&x);\n-  if( x.Y<1971 || x.Y>=2038 ){\n+  computeJD(p);\n+  if( p->iJD<2108667600*(i64)100000 \/* 1970-01-01 *\/\n+   || p->iJD>2130141456*(i64)100000 \/* 2038-01-18 *\/\n+  ){\n@@ -23265,9 +23846,10 @@\n-    x.Y = 2000;\n-    x.M = 1;\n-    x.D = 1;\n-    x.h = 0;\n-    x.m = 0;\n-    x.s = 0.0;\n-  } else {\n-    int s = (int)(x.s + 0.5);\n-    x.s = s;\n+    DateTime x = *p;\n+    computeYMD_HMS(&x);\n+    iYearDiff = (2000 + x.Y%4) - x.Y;\n+    x.Y += iYearDiff;\n+    x.validJD = 0;\n+    computeJD(&x);\n+    t = (time_t)(x.iJD\/1000 -  21086676*(i64)10000);\n+  }else{\n+    iYearDiff = 0;\n+    t = (time_t)(p->iJD\/1000 -  21086676*(i64)10000);\n@@ -23275,4 +23857,0 @@\n-  x.tz = 0;\n-  x.validJD = 0;\n-  computeJD(&x);\n-  t = (time_t)(x.iJD\/1000 - 21086676*(i64)10000);\n@@ -23281,2 +23859,1 @@\n-    *pRc = SQLITE_ERROR;\n-    return 0;\n+    return SQLITE_ERROR;\n@@ -23284,15 +23861,13 @@\n-  y.Y = sLocal.tm_year + 1900;\n-  y.M = sLocal.tm_mon + 1;\n-  y.D = sLocal.tm_mday;\n-  y.h = sLocal.tm_hour;\n-  y.m = sLocal.tm_min;\n-  y.s = sLocal.tm_sec;\n-  y.validYMD = 1;\n-  y.validHMS = 1;\n-  y.validJD = 0;\n-  y.rawS = 0;\n-  y.validTZ = 0;\n-  y.isError = 0;\n-  computeJD(&y);\n-  *pRc = SQLITE_OK;\n-  return y.iJD - x.iJD;\n+  p->Y = sLocal.tm_year + 1900 - iYearDiff;\n+  p->M = sLocal.tm_mon + 1;\n+  p->D = sLocal.tm_mday;\n+  p->h = sLocal.tm_hour;\n+  p->m = sLocal.tm_min;\n+  p->s = sLocal.tm_sec + (p->iJD%1000)*0.001;\n+  p->validYMD = 1;\n+  p->validHMS = 1;\n+  p->validJD = 0;\n+  p->rawS = 0;\n+  p->validTZ = 0;\n+  p->isError = 0;\n+  return SQLITE_OK;\n@@ -23311,5 +23886,4 @@\n-  u8 eType;           \/* Transformation type code *\/\n-  u8 nName;           \/* Length of th name *\/\n-  char *zName;        \/* Name of the transformation *\/\n-  double rLimit;      \/* Maximum NNN value for this transform *\/\n-  double rXform;      \/* Constant used for this transform *\/\n+  u8 nName;           \/* Length of the name *\/\n+  char zName[7];      \/* Name of the transformation *\/\n+  float rLimit;       \/* Maximum NNN value for this transform *\/\n+  float rXform;       \/* Constant used for this transform *\/\n@@ -23317,6 +23891,6 @@\n-  { 0, 6, \"second\", 464269060800.0, 1000.0         },\n-  { 0, 6, \"minute\", 7737817680.0,   60000.0        },\n-  { 0, 4, \"hour\",   128963628.0,    3600000.0      },\n-  { 0, 3, \"day\",    5373485.0,      86400000.0     },\n-  { 1, 5, \"month\",  176546.0,       2592000000.0   },\n-  { 2, 4, \"year\",   14713.0,        31536000000.0  },\n+  { 6, \"second\", 4.6427e+14,       1.0  },\n+  { 6, \"minute\", 7.7379e+12,      60.0  },\n+  { 4, \"hour\",   1.2897e+11,    3600.0  },\n+  { 3, \"day\",    5373485.0,    86400.0  },\n+  { 5, \"month\",  176546.0,   2592000.0  },\n+  { 4, \"year\",   14713.0,   31536000.0  },\n@@ -23353,1 +23927,2 @@\n-  DateTime *p                 \/* The date\/time value to be modified *\/\n+  DateTime *p,                \/* The date\/time value to be modified *\/\n+  int idx                     \/* Parameter index of the modifier *\/\n@@ -23358,0 +23933,43 @@\n+    case 'a': {\n+      \/*\n+      **    auto\n+      **\n+      ** If rawS is available, then interpret as a julian day number, or\n+      ** a unix timestamp, depending on its magnitude.\n+      *\/\n+      if( sqlite3_stricmp(z, \"auto\")==0 ){\n+        if( idx>1 ) return 1; \/* IMP: R-33611-57934 *\/\n+        if( !p->rawS || p->validJD ){\n+          rc = 0;\n+          p->rawS = 0;\n+        }else if( p->s>=-21086676*(i64)10000        \/* -4713-11-24 12:00:00 *\/\n+               && p->s<=(25340230*(i64)10000)+799   \/*  9999-12-31 23:59:59 *\/\n+        ){\n+          r = p->s*1000.0 + 210866760000000.0;\n+          clearYMD_HMS_TZ(p);\n+          p->iJD = (sqlite3_int64)(r + 0.5);\n+          p->validJD = 1;\n+          p->rawS = 0;\n+          rc = 0;\n+        }\n+      }\n+      break;\n+    }\n+    case 'j': {\n+      \/*\n+      **    julianday\n+      **\n+      ** Always interpret the prior number as a julian-day value.  If this\n+      ** is not the first modifier, or if the prior argument is not a numeric\n+      ** value in the allowed range of julian day numbers understood by\n+      ** SQLite (0..5373484.5) then the result will be NULL.\n+      *\/\n+      if( sqlite3_stricmp(z, \"julianday\")==0 ){\n+        if( idx>1 ) return 1;  \/* IMP: R-31176-64601 *\/\n+        if( p->validJD && p->rawS ){\n+          rc = 0;\n+          p->rawS = 0;\n+        }\n+      }\n+      break;\n+    }\n@@ -23366,3 +23984,1 @@\n-        computeJD(p);\n-        p->iJD += localtimeOffset(p, pCtx, &rc);\n-        clearYMD_HMS_TZ(p);\n+        rc = toLocaltime(p, pCtx);\n@@ -23381,0 +23997,1 @@\n+        if( idx>1 ) return 1;  \/* IMP: R-49255-55373 *\/\n@@ -23393,1 +24010,5 @@\n-          sqlite3_int64 c1;\n+          i64 iOrigJD;              \/* Original localtime *\/\n+          i64 iGuess;               \/* Guess at the corresponding utc time *\/\n+          int cnt = 0;              \/* Safety to prevent infinite loop *\/\n+          int iErr;                 \/* Guess is off by this much *\/\n+\n@@ -23395,6 +24016,16 @@\n-          c1 = localtimeOffset(p, pCtx, &rc);\n-          if( rc==SQLITE_OK ){\n-            p->iJD -= c1;\n-            clearYMD_HMS_TZ(p);\n-            p->iJD += c1 - localtimeOffset(p, pCtx, &rc);\n-          }\n+          iGuess = iOrigJD = p->iJD;\n+          iErr = 0;\n+          do{\n+            DateTime new;\n+            memset(&new, 0, sizeof(new));\n+            iGuess -= iErr;\n+            new.iJD = iGuess;\n+            new.validJD = 1;\n+            rc = toLocaltime(&new, pCtx);\n+            if( rc ) return rc;\n+            computeJD(&new);\n+            iErr = new.iJD - iOrigJD;\n+          }while( iErr && cnt++<3 );\n+          memset(p, 0, sizeof(*p));\n+          p->iJD = iGuess;\n+          p->validJD = 1;\n@@ -23402,2 +24033,0 @@\n-        }else{\n-          rc = SQLITE_OK;\n@@ -23405,0 +24034,1 @@\n+        rc = SQLITE_OK;\n@@ -23520,2 +24150,2 @@\n-          switch( aXformType[i].eType ){\n-            case 1: { \/* Special processing to add months *\/\n+          switch( i ){\n+            case 4: { \/* Special processing to add months *\/\n@@ -23523,0 +24153,1 @@\n+              assert( strcmp(aXformType[i].zName,\"month\")==0 );\n@@ -23532,1 +24163,1 @@\n-            case 2: { \/* Special processing to add years *\/\n+            case 5: { \/* Special processing to add years *\/\n@@ -23534,0 +24165,1 @@\n+              assert( strcmp(aXformType[i].zName,\"year\")==0 );\n@@ -23542,1 +24174,1 @@\n-          p->iJD += (sqlite3_int64)(r*aXformType[i].rXform + rRounder);\n+          p->iJD += (sqlite3_int64)(r*1000.0*aXformType[i].rXform + rRounder);\n@@ -23592,1 +24224,1 @@\n-    if( z==0 || parseModifier(context, (char*)z, n, p) ) return 1;\n+    if( z==0 || parseModifier(context, (char*)z, n, p, i) ) return 1;\n@@ -23622,0 +24254,18 @@\n+\/*\n+**    unixepoch( TIMESTRING, MOD, MOD, ...)\n+**\n+** Return the number of seconds (including fractional seconds) since\n+** the unix epoch of 1970-01-01 00:00:00 GMT.\n+*\/\n+static void unixepochFunc(\n+  sqlite3_context *context,\n+  int argc,\n+  sqlite3_value **argv\n+){\n+  DateTime x;\n+  if( isDate(context, argc, argv, &x)==0 ){\n+    computeJD(&x);\n+    sqlite3_result_int64(context, x.iJD\/1000 - 21086676*(i64)10000);\n+  }\n+}\n+\n@@ -23634,1 +24284,2 @@\n-    char zBuf[100];\n+    int Y, s;\n+    char zBuf[24];\n@@ -23636,3 +24287,29 @@\n-    sqlite3_snprintf(sizeof(zBuf), zBuf, \"%04d-%02d-%02d %02d:%02d:%02d\",\n-                     x.Y, x.M, x.D, x.h, x.m, (int)(x.s));\n-    sqlite3_result_text(context, zBuf, -1, SQLITE_TRANSIENT);\n+    Y = x.Y;\n+    if( Y<0 ) Y = -Y;\n+    zBuf[1] = '0' + (Y\/1000)%10;\n+    zBuf[2] = '0' + (Y\/100)%10;\n+    zBuf[3] = '0' + (Y\/10)%10;\n+    zBuf[4] = '0' + (Y)%10;\n+    zBuf[5] = '-';\n+    zBuf[6] = '0' + (x.M\/10)%10;\n+    zBuf[7] = '0' + (x.M)%10;\n+    zBuf[8] = '-';\n+    zBuf[9] = '0' + (x.D\/10)%10;\n+    zBuf[10] = '0' + (x.D)%10;\n+    zBuf[11] = ' ';\n+    zBuf[12] = '0' + (x.h\/10)%10;\n+    zBuf[13] = '0' + (x.h)%10;\n+    zBuf[14] = ':';\n+    zBuf[15] = '0' + (x.m\/10)%10;\n+    zBuf[16] = '0' + (x.m)%10;\n+    zBuf[17] = ':';\n+    s = (int)x.s;\n+    zBuf[18] = '0' + (s\/10)%10;\n+    zBuf[19] = '0' + (s)%10;\n+    zBuf[20] = 0;\n+    if( x.Y<0 ){\n+      zBuf[0] = '-';\n+      sqlite3_result_text(context, zBuf, 20, SQLITE_TRANSIENT);\n+    }else{\n+      sqlite3_result_text(context, &zBuf[1], 19, SQLITE_TRANSIENT);\n+    }\n@@ -23654,1 +24331,2 @@\n-    char zBuf[100];\n+    int s;\n+    char zBuf[16];\n@@ -23656,2 +24334,11 @@\n-    sqlite3_snprintf(sizeof(zBuf), zBuf, \"%02d:%02d:%02d\", x.h, x.m, (int)x.s);\n-    sqlite3_result_text(context, zBuf, -1, SQLITE_TRANSIENT);\n+    zBuf[0] = '0' + (x.h\/10)%10;\n+    zBuf[1] = '0' + (x.h)%10;\n+    zBuf[2] = ':';\n+    zBuf[3] = '0' + (x.m\/10)%10;\n+    zBuf[4] = '0' + (x.m)%10;\n+    zBuf[5] = ':';\n+    s = (int)x.s;\n+    zBuf[6] = '0' + (s\/10)%10;\n+    zBuf[7] = '0' + (s)%10;\n+    zBuf[8] = 0;\n+    sqlite3_result_text(context, zBuf, 8, SQLITE_TRANSIENT);\n@@ -23673,1 +24360,2 @@\n-    char zBuf[100];\n+    int Y;\n+    char zBuf[16];\n@@ -23675,2 +24363,19 @@\n-    sqlite3_snprintf(sizeof(zBuf), zBuf, \"%04d-%02d-%02d\", x.Y, x.M, x.D);\n-    sqlite3_result_text(context, zBuf, -1, SQLITE_TRANSIENT);\n+    Y = x.Y;\n+    if( Y<0 ) Y = -Y;\n+    zBuf[1] = '0' + (Y\/1000)%10;\n+    zBuf[2] = '0' + (Y\/100)%10;\n+    zBuf[3] = '0' + (Y\/10)%10;\n+    zBuf[4] = '0' + (Y)%10;\n+    zBuf[5] = '-';\n+    zBuf[6] = '0' + (x.M\/10)%10;\n+    zBuf[7] = '0' + (x.M)%10;\n+    zBuf[8] = '-';\n+    zBuf[9] = '0' + (x.D\/10)%10;\n+    zBuf[10] = '0' + (x.D)%10;\n+    zBuf[11] = 0;\n+    if( x.Y<0 ){\n+      zBuf[0] = '-';\n+      sqlite3_result_text(context, zBuf, 11, SQLITE_TRANSIENT);\n+    }else{\n+      sqlite3_result_text(context, &zBuf[1], 10, SQLITE_TRANSIENT);\n+    }\n@@ -23898,0 +24603,1 @@\n+    PURE_DATE(unixepoch,        -1, 0, 0, unixepochFunc ),\n@@ -26452,2 +27158,7 @@\n-  if( n > 0x40000000 ) return 0;\n-  for(iFullSz=mem5.szAtom; iFullSz<n; iFullSz *= 2);\n+  if( n<=mem5.szAtom*2 ){\n+    if( n<=mem5.szAtom ) return mem5.szAtom;\n+    return mem5.szAtom*2;\n+  }\n+  if( n>0x40000000 ) return 0;\n+  for(iFullSz=mem5.szAtom*8; iFullSz<n; iFullSz *= 4);\n+  if( (iFullSz\/2)>=n ) return iFullSz\/2;\n@@ -28834,0 +29545,1 @@\n+  char *z = sqlite3DbStrDup(db, zNew);\n@@ -28835,1 +29547,1 @@\n-  *pz = sqlite3DbStrDup(db, zNew);\n+  *pz = z;\n@@ -28843,0 +29555,7 @@\n+**\n+** Always return a NULL pointer so that this routine can be invoked using\n+**\n+**      return sqlite3OomFault(db);\n+**\n+** and thereby avoid unnecessary stack frame allocations for the overwhelmingly\n+** common case where no OOM occurs.\n@@ -28844,1 +29563,1 @@\n-SQLITE_PRIVATE void sqlite3OomFault(sqlite3 *db){\n+SQLITE_PRIVATE void *sqlite3OomFault(sqlite3 *db){\n@@ -28852,0 +29571,2 @@\n+      Parse *pParse;\n+      sqlite3ErrorMsg(db->pParse, \"out of memory\");\n@@ -28853,0 +29574,4 @@\n+      for(pParse=db->pParse->pOuterParse; pParse; pParse = pParse->pOuterParse){\n+        pParse->nErr++;\n+        pParse->rc = SQLITE_NOMEM;\n+      }\n@@ -28855,0 +29580,1 @@\n+  return 0;\n@@ -29717,2 +30443,2 @@\n-        int i, j, k, n, isnull;\n-        int needQuote;\n+        i64 i, j, k, n;\n+        int needQuote, isnull;\n@@ -29763,1 +30489,0 @@\n-        Token *pToken;\n@@ -29765,4 +30490,15 @@\n-        pToken = va_arg(ap, Token*);\n-        assert( bArgList==0 );\n-        if( pToken && pToken->n ){\n-          sqlite3_str_append(pAccum, (const char*)pToken->z, pToken->n);\n+        if( flag_alternateform ){\n+          \/* %#T means an Expr pointer that uses Expr.u.zToken *\/\n+          Expr *pExpr = va_arg(ap,Expr*);\n+          if( ALWAYS(pExpr) && ALWAYS(!ExprHasProperty(pExpr,EP_IntValue)) ){\n+            sqlite3_str_appendall(pAccum, (const char*)pExpr->u.zToken);\n+            sqlite3RecordErrorOffsetOfExpr(pAccum->db, pExpr);\n+          }\n+        }else{\n+          \/* %T means a Token pointer *\/\n+          Token *pToken = va_arg(ap, Token*);\n+          assert( bArgList==0 );\n+          if( pToken && pToken->n ){\n+            sqlite3_str_append(pAccum, (const char*)pToken->z, pToken->n);\n+            sqlite3RecordErrorByteOffset(pAccum->db, pToken->z);\n+          }\n@@ -29788,2 +30524,8 @@\n-        }else if( ALWAYS(pItem->pSelect) ){\n-          sqlite3_str_appendf(pAccum, \"SUBQUERY %u\", pItem->pSelect->selId);\n+        }else{\n+          Select *pSel = pItem->pSelect;\n+          assert( pSel!=0 );\n+          if( pSel->selFlags & SF_NestedFrom ){\n+            sqlite3_str_appendf(pAccum, \"(join-%u)\", pSel->selId);\n+          }else{\n+            sqlite3_str_appendf(pAccum, \"(subquery-%u)\", pSel->selId);\n+          }\n@@ -29823,0 +30565,38 @@\n+\n+\/*\n+** The z string points to the first character of a token that is\n+** associated with an error.  If db does not already have an error\n+** byte offset recorded, try to compute the error byte offset for\n+** z and set the error byte offset in db.\n+*\/\n+SQLITE_PRIVATE void sqlite3RecordErrorByteOffset(sqlite3 *db, const char *z){\n+  const Parse *pParse;\n+  const char *zText;\n+  const char *zEnd;\n+  assert( z!=0 );\n+  if( NEVER(db==0) ) return;\n+  if( db->errByteOffset!=(-2) ) return;\n+  pParse = db->pParse;\n+  if( NEVER(pParse==0) ) return;\n+  zText =pParse->zTail;\n+  if( NEVER(zText==0) ) return;\n+  zEnd = &zText[strlen(zText)];\n+  if( SQLITE_WITHIN(z,zText,zEnd) ){\n+    db->errByteOffset = (int)(z-zText);\n+  }\n+}\n+\n+\/*\n+** If pExpr has a byte offset for the start of a token, record that as\n+** as the error offset.\n+*\/\n+SQLITE_PRIVATE void sqlite3RecordErrorOffsetOfExpr(sqlite3 *db, const Expr *pExpr){\n+  while( pExpr\n+     && (ExprHasProperty(pExpr,EP_OuterON|EP_InnerON) || pExpr->w.iOfst<=0)\n+  ){\n+    pExpr = pExpr->pLeft;\n+  }\n+  if( pExpr==0 ) return;\n+  db->errByteOffset = pExpr->w.iOfst;\n+}\n+\n@@ -29830,1 +30610,1 @@\n-static int sqlite3StrAccumEnlarge(StrAccum *p, int N){\n+SQLITE_PRIVATE int sqlite3StrAccumEnlarge(StrAccum *p, int N){\n@@ -30276,1 +31056,2 @@\n-static TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){\n+static void sqlite3TreeViewPush(TreeView **pp, u8 moreToFollow){\n+  TreeView *p = *pp;\n@@ -30278,2 +31059,2 @@\n-    p = sqlite3_malloc64( sizeof(*p) );\n-    if( p==0 ) return 0;\n+    *pp = p = sqlite3_malloc64( sizeof(*p) );\n+    if( p==0 ) return;\n@@ -30285,2 +31066,1 @@\n-  if( p->iLevel<sizeof(p->bLine) ) p->bLine[p->iLevel] = moreToFollow;\n-  return p;\n+  if( p->iLevel<(int)sizeof(p->bLine) ) p->bLine[p->iLevel] = moreToFollow;\n@@ -30292,1 +31072,2 @@\n-static void sqlite3TreeViewPop(TreeView *p){\n+static void sqlite3TreeViewPop(TreeView **pp){\n+  TreeView *p = *pp;\n@@ -30295,1 +31076,4 @@\n-  if( p->iLevel<0 ) sqlite3_free(p);\n+  if( p->iLevel<0 ){\n+    sqlite3_free(p);\n+    *pp = 0;\n+  }\n@@ -30302,1 +31086,1 @@\n-static void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){\n+SQLITE_PRIVATE void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){\n@@ -30306,1 +31090,1 @@\n-  char zBuf[500];\n+  char zBuf[1000];\n@@ -30309,1 +31093,1 @@\n-    for(i=0; i<p->iLevel && i<sizeof(p->bLine)-1; i++){\n+    for(i=0; i<p->iLevel && i<(int)sizeof(p->bLine)-1; i++){\n@@ -30330,1 +31114,1 @@\n-  p = sqlite3TreeViewPush(p, moreFollows);\n+  sqlite3TreeViewPush(&p, moreFollows);\n@@ -30334,0 +31118,47 @@\n+\/*\n+** Show a list of Column objects in tree format.\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewColumnList(\n+  TreeView *pView,\n+  const Column *aCol,\n+  int nCol,\n+  u8 moreToFollow\n+){\n+  int i;\n+  sqlite3TreeViewPush(&pView, moreToFollow);\n+  sqlite3TreeViewLine(pView, \"COLUMNS\");\n+  for(i=0; i<nCol; i++){\n+    u16 flg = aCol[i].colFlags;\n+    int colMoreToFollow = i<(nCol - 1);\n+    sqlite3TreeViewPush(&pView, colMoreToFollow);\n+    sqlite3TreeViewLine(pView, 0);\n+    printf(\" %s\", aCol[i].zCnName);\n+    switch( aCol[i].eCType ){\n+      case COLTYPE_ANY:      printf(\" ANY\");        break;\n+      case COLTYPE_BLOB:     printf(\" BLOB\");       break;\n+      case COLTYPE_INT:      printf(\" INT\");        break;\n+      case COLTYPE_INTEGER:  printf(\" INTEGER\");    break;\n+      case COLTYPE_REAL:     printf(\" REAL\");       break;\n+      case COLTYPE_TEXT:     printf(\" TEXT\");       break;\n+      case COLTYPE_CUSTOM: {\n+        if( flg & COLFLAG_HASTYPE ){\n+          const char *z = aCol[i].zCnName;\n+          z += strlen(z)+1;\n+          printf(\" X-%s\", z);\n+          break;\n+        }\n+      }\n+    }\n+    if( flg & COLFLAG_PRIMKEY ) printf(\" PRIMARY KEY\");\n+    if( flg & COLFLAG_HIDDEN ) printf(\" HIDDEN\");\n+#ifdef COLFLAG_NOEXPAND\n+    if( flg & COLFLAG_NOEXPAND ) printf(\" NO-EXPAND\");\n+#endif\n+    if( flg ) printf(\" flags=%04x\", flg);\n+    printf(\"\\n\");\n+    fflush(stdout);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  sqlite3TreeViewPop(&pView);\n+}\n+\n@@ -30347,1 +31178,1 @@\n-    pView = sqlite3TreeViewPush(pView, 1);\n+    sqlite3TreeViewPush(&pView, moreToFollow);\n@@ -30363,0 +31194,4 @@\n+      if( pCte->eM10d!=M10d_Any ){\n+        sqlite3_str_appendf(&x, \" %sMATERIALIZED\",\n+           pCte->eM10d==M10d_No ? \"NOT \" : \"\");\n+      }\n@@ -30370,1 +31205,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30372,1 +31207,1 @@\n-    sqlite3TreeViewPop(pView);\n+    sqlite3TreeViewPop(&pView);\n@@ -30381,0 +31216,1 @@\n+  if( pSrc==0 ) return;\n@@ -30384,1 +31220,2 @@\n-    char zLine[100];\n+    int n = 0;\n+    char zLine[1000];\n@@ -30392,1 +31229,3 @@\n-    if( pItem->fg.jointype & JT_LEFT ){\n+    if( (pItem->fg.jointype & (JT_LEFT|JT_RIGHT))==(JT_LEFT|JT_RIGHT) ){\n+      sqlite3_str_appendf(&x, \" FULL-OUTER-JOIN\");\n+    }else if( pItem->fg.jointype & JT_LEFT ){\n@@ -30394,0 +31233,2 @@\n+    }else if( pItem->fg.jointype & JT_RIGHT ){\n+      sqlite3_str_appendf(&x, \" RIGHT-JOIN\");\n@@ -30397,0 +31238,3 @@\n+    if( pItem->fg.jointype & JT_LTORJ ){\n+      sqlite3_str_appendf(&x, \" LTORJ\");\n+    }\n@@ -30403,0 +31247,3 @@\n+    if( pItem->fg.isOn || (pItem->fg.isUsing==0 && pItem->u3.pOn!=0) ){\n+      sqlite3_str_appendf(&x, \" ON\");\n+    }\n@@ -30405,0 +31252,7 @@\n+    n = 0;\n+    if( pItem->pSelect ) n++;\n+    if( pItem->fg.isTabFunc ) n++;\n+    if( pItem->fg.isUsing ) n++;\n+    if( pItem->fg.isUsing ){\n+      sqlite3TreeViewIdList(pView, pItem->u3.pUsing, (--n)>0, \"USING\");\n+    }\n@@ -30406,1 +31260,6 @@\n-      sqlite3TreeViewSelect(pView, pItem->pSelect, 0);\n+      if( pItem->pTab ){\n+        Table *pTab = pItem->pTab;\n+        sqlite3TreeViewColumnList(pView, pTab->aCol, pTab->nCol, 1);\n+      }\n+      assert( (int)pItem->fg.isNestedFrom == IsNestedFrom(pItem->pSelect) );\n+      sqlite3TreeViewSelect(pView, pItem->pSelect, (--n)>0);\n@@ -30411,1 +31270,1 @@\n-    sqlite3TreeViewPop(pView);\n+    sqlite3TreeViewPop(&pView);\n@@ -30425,1 +31284,1 @@\n-  pView = sqlite3TreeViewPush(pView, moreToFollow);\n+  sqlite3TreeViewPush(&pView, moreToFollow);\n@@ -30429,1 +31288,1 @@\n-    sqlite3TreeViewPush(pView, 1);\n+    sqlite3TreeViewPush(&pView, 1);\n@@ -30443,1 +31302,1 @@\n-    if( cnt++ ) sqlite3TreeViewPop(pView);\n+    if( cnt++ ) sqlite3TreeViewPop(&pView);\n@@ -30466,1 +31325,1 @@\n-      pView = sqlite3TreeViewPush(pView, (n--)>0);\n+      sqlite3TreeViewPush(&pView, (n--)>0);\n@@ -30471,1 +31330,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30475,1 +31334,1 @@\n-      pView = sqlite3TreeViewPush(pView, (n--)>0);\n+      sqlite3TreeViewPush(&pView, (n--)>0);\n@@ -30478,1 +31337,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30483,1 +31342,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30491,1 +31350,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30500,1 +31359,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30512,1 +31371,1 @@\n-        sqlite3TreeViewPop(pView);\n+        sqlite3TreeViewPop(&pView);\n@@ -30514,1 +31373,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30527,1 +31386,1 @@\n-  sqlite3TreeViewPop(pView);\n+  sqlite3TreeViewPop(&pView);\n@@ -30543,1 +31402,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30548,1 +31407,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30554,1 +31413,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30560,1 +31419,1 @@\n-      sqlite3TreeViewPop(pView);\n+      sqlite3TreeViewPop(&pView);\n@@ -30573,0 +31432,1 @@\n+  if( pWin==0 ) return;\n@@ -30576,1 +31436,1 @@\n-    sqlite3TreeViewPop(pView);\n+    sqlite3TreeViewPop(&pView);\n@@ -30578,1 +31438,1 @@\n-  pView = sqlite3TreeViewPush(pView, more);\n+  sqlite3TreeViewPush(&pView, more);\n@@ -30589,1 +31449,1 @@\n-    sqlite3TreeViewPush(pView, (--nElement)>0);\n+    sqlite3TreeViewPush(&pView, (--nElement)>0);\n@@ -30591,1 +31451,1 @@\n-    sqlite3TreeViewPop(pView);\n+    sqlite3TreeViewPop(&pView);\n@@ -30609,1 +31469,1 @@\n-    sqlite3TreeViewPop(pView);\n+    sqlite3TreeViewPop(&pView);\n@@ -30624,1 +31484,1 @@\n-    sqlite3TreeViewPush(pView, 0);\n+    sqlite3TreeViewPush(&pView, 0);\n@@ -30626,1 +31486,1 @@\n-    sqlite3TreeViewPop(pView);\n+    sqlite3TreeViewPop(&pView);\n@@ -30628,1 +31488,1 @@\n-  sqlite3TreeViewPop(pView);\n+  sqlite3TreeViewPop(&pView);\n@@ -30637,1 +31497,2 @@\n-  pView = sqlite3TreeViewPush(pView, more);\n+  if( pWin==0 ) return;\n+  sqlite3TreeViewPush(&pView, more);\n@@ -30639,1 +31500,1 @@\n-                       pWin->pFunc->zName, pWin->pFunc->nArg);\n+                       pWin->pWFunc->zName, pWin->pWFunc->nArg);\n@@ -30641,1 +31502,1 @@\n-  sqlite3TreeViewPop(pView);\n+  sqlite3TreeViewPop(&pView);\n@@ -30652,1 +31513,1 @@\n-  pView = sqlite3TreeViewPush(pView, moreToFollow);\n+  sqlite3TreeViewPush(&pView, moreToFollow);\n@@ -30655,1 +31516,1 @@\n-    sqlite3TreeViewPop(pView);\n+    sqlite3TreeViewPop(&pView);\n@@ -30663,2 +31524,5 @@\n-    if( ExprHasProperty(pExpr, EP_FromJoin) ){\n-      sqlite3_str_appendf(&x, \" iRJT=%d\", pExpr->iRightJoinTable);\n+    if( ExprHasProperty(pExpr, EP_OuterON) ){\n+      sqlite3_str_appendf(&x, \" outer.iJoin=%d\", pExpr->w.iJoin);\n+    }\n+    if( ExprHasProperty(pExpr, EP_InnerON) ){\n+      sqlite3_str_appendf(&x, \" inner.iJoin=%d\", pExpr->w.iJoin);\n@@ -30888,1 +31752,11 @@\n-      sqlite3TreeViewLine(pView, \"IN flags=0x%x\", pExpr->flags);\n+      sqlite3_str *pStr = sqlite3_str_new(0);\n+      char *z;\n+      sqlite3_str_appendf(pStr, \"IN flags=0x%x\", pExpr->flags);\n+      if( pExpr->iTable ) sqlite3_str_appendf(pStr, \" iTable=%d\",pExpr->iTable);\n+      if( ExprHasProperty(pExpr, EP_Subrtn) ){\n+        sqlite3_str_appendf(pStr, \" subrtn(%d,%d)\",\n+            pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);\n+      }\n+      z = sqlite3_str_finish(pStr);\n+      sqlite3TreeViewLine(pView, z);\n+      sqlite3_free(z);\n@@ -31012,1 +31886,1 @@\n-  sqlite3TreeViewPop(pView);\n+  sqlite3TreeViewPop(&pView);\n@@ -31034,1 +31908,0 @@\n-      if( pList->a[i].eEName!=ENAME_NAME ) zName = 0;\n@@ -31036,1 +31909,1 @@\n-        sqlite3TreeViewPush(pView, moreToFollow);\n+        sqlite3TreeViewPush(&pView, moreToFollow);\n@@ -31040,1 +31913,14 @@\n-          fprintf(stdout, \"AS %s \", zName);\n+          switch( pList->a[i].fg.eEName ){\n+            default:\n+              fprintf(stdout, \"AS %s \", zName);\n+              break;\n+            case ENAME_TAB:\n+              fprintf(stdout, \"TABLE-ALIAS-NAME(\\\"%s\\\") \", zName);\n+              if( pList->a[i].fg.bUsed ) fprintf(stdout, \"(used) \");\n+              if( pList->a[i].fg.bUsingTerm ) fprintf(stdout, \"(USING-term) \");\n+              if( pList->a[i].fg.bNoExpand ) fprintf(stdout, \"(NoExpand) \");\n+              break;\n+            case ENAME_SPAN:\n+              fprintf(stdout, \"SPAN(\\\"%s\\\") \", zName);\n+              break;\n+          }\n@@ -31050,1 +31936,1 @@\n-        sqlite3TreeViewPop(pView);\n+        sqlite3TreeViewPop(&pView);\n@@ -31061,1 +31947,1 @@\n-  pView = sqlite3TreeViewPush(pView, moreToFollow);\n+  sqlite3TreeViewPush(&pView, moreToFollow);\n@@ -31063,1 +31949,1 @@\n-  sqlite3TreeViewPop(pView);\n+  sqlite3TreeViewPop(&pView);\n@@ -31066,0 +31952,367 @@\n+\/*\n+** Generate a human-readable explanation of an id-list.\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewBareIdList(\n+  TreeView *pView,\n+  const IdList *pList,\n+  const char *zLabel\n+){\n+  if( zLabel==0 || zLabel[0]==0 ) zLabel = \"LIST\";\n+  if( pList==0 ){\n+    sqlite3TreeViewLine(pView, \"%s (empty)\", zLabel);\n+  }else{\n+    int i;\n+    sqlite3TreeViewLine(pView, \"%s\", zLabel);\n+    for(i=0; i<pList->nId; i++){\n+      char *zName = pList->a[i].zName;\n+      int moreToFollow = i<pList->nId - 1;\n+      if( zName==0 ) zName = \"(null)\";\n+      sqlite3TreeViewPush(&pView, moreToFollow);\n+      sqlite3TreeViewLine(pView, 0);\n+      if( pList->eU4==EU4_NONE ){\n+        fprintf(stdout, \"%s\\n\", zName);\n+      }else if( pList->eU4==EU4_IDX ){\n+        fprintf(stdout, \"%s (%d)\\n\", zName, pList->a[i].u4.idx);\n+      }else{\n+        assert( pList->eU4==EU4_EXPR );\n+        if( pList->a[i].u4.pExpr==0 ){\n+          fprintf(stdout, \"%s (pExpr=NULL)\\n\", zName);\n+        }else{\n+          fprintf(stdout, \"%s\\n\", zName);\n+          sqlite3TreeViewPush(&pView, i<pList->nId-1);\n+          sqlite3TreeViewExpr(pView, pList->a[i].u4.pExpr, 0);\n+          sqlite3TreeViewPop(&pView);\n+        }\n+      }\n+      sqlite3TreeViewPop(&pView);\n+    }\n+  }\n+}\n+SQLITE_PRIVATE void sqlite3TreeViewIdList(\n+  TreeView *pView,\n+  const IdList *pList,\n+  u8 moreToFollow,\n+  const char *zLabel\n+){\n+  sqlite3TreeViewPush(&pView, moreToFollow);\n+  sqlite3TreeViewBareIdList(pView, pList, zLabel);\n+  sqlite3TreeViewPop(&pView);\n+}\n+\n+\/*\n+** Generate a human-readable explanation of a list of Upsert objects\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewUpsert(\n+  TreeView *pView,\n+  const Upsert *pUpsert,\n+  u8 moreToFollow\n+){\n+  if( pUpsert==0 ) return;\n+  sqlite3TreeViewPush(&pView, moreToFollow);\n+  while( pUpsert ){\n+    int n;\n+    sqlite3TreeViewPush(&pView, pUpsert->pNextUpsert!=0 || moreToFollow);\n+    sqlite3TreeViewLine(pView, \"ON CONFLICT DO %s\",\n+         pUpsert->isDoUpdate ? \"UPDATE\" : \"NOTHING\");\n+    n = (pUpsert->pUpsertSet!=0) + (pUpsert->pUpsertWhere!=0);\n+    sqlite3TreeViewExprList(pView, pUpsert->pUpsertTarget, (n--)>0, \"TARGET\");\n+    sqlite3TreeViewExprList(pView, pUpsert->pUpsertSet, (n--)>0, \"SET\");\n+    if( pUpsert->pUpsertWhere ){\n+      sqlite3TreeViewItem(pView, \"WHERE\", (n--)>0);\n+      sqlite3TreeViewExpr(pView, pUpsert->pUpsertWhere, 0);\n+      sqlite3TreeViewPop(&pView);\n+    }\n+    sqlite3TreeViewPop(&pView);\n+    pUpsert = pUpsert->pNextUpsert;\n+  }\n+  sqlite3TreeViewPop(&pView);\n+}\n+\n+#if TREETRACE_ENABLED\n+\/*\n+** Generate a human-readable diagram of the data structure that go\n+** into generating an DELETE statement.\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewDelete(\n+  const With *pWith,\n+  const SrcList *pTabList,\n+  const Expr *pWhere,\n+  const ExprList *pOrderBy,\n+  const Expr *pLimit,\n+  const Trigger *pTrigger\n+){\n+  int n = 0;\n+  TreeView *pView = 0;\n+  sqlite3TreeViewPush(&pView, 0);\n+  sqlite3TreeViewLine(pView, \"DELETE\");\n+  if( pWith ) n++;\n+  if( pTabList ) n++;\n+  if( pWhere ) n++;\n+  if( pOrderBy ) n++;\n+  if( pLimit ) n++;\n+  if( pTrigger ) n++;\n+  if( pWith ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewWith(pView, pWith, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pTabList ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"FROM\");\n+    sqlite3TreeViewSrcList(pView, pTabList);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pWhere ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"WHERE\");\n+    sqlite3TreeViewExpr(pView, pWhere, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pOrderBy ){\n+    sqlite3TreeViewExprList(pView, pOrderBy, (--n)>0, \"ORDER-BY\");\n+  }\n+  if( pLimit ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"LIMIT\");\n+    sqlite3TreeViewExpr(pView, pLimit, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pTrigger ){\n+    sqlite3TreeViewTrigger(pView, pTrigger, (--n)>0, 1);\n+  }\n+  sqlite3TreeViewPop(&pView);\n+}\n+#endif \/* TREETRACE_ENABLED *\/\n+\n+#if TREETRACE_ENABLED\n+\/*\n+** Generate a human-readable diagram of the data structure that go\n+** into generating an INSERT statement.\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewInsert(\n+  const With *pWith,\n+  const SrcList *pTabList,\n+  const IdList *pColumnList,\n+  const Select *pSelect,\n+  const ExprList *pExprList,\n+  int onError,\n+  const Upsert *pUpsert,\n+  const Trigger *pTrigger\n+){\n+  TreeView *pView = 0;\n+  int n = 0;\n+  const char *zLabel = \"INSERT\";\n+  switch( onError ){\n+    case OE_Replace:  zLabel = \"REPLACE\";             break;\n+    case OE_Ignore:   zLabel = \"INSERT OR IGNORE\";    break;\n+    case OE_Rollback: zLabel = \"INSERT OR ROLLBACK\";  break;\n+    case OE_Abort:    zLabel = \"INSERT OR ABORT\";     break;\n+    case OE_Fail:     zLabel = \"INSERT OR FAIL\";      break;\n+  }\n+  sqlite3TreeViewPush(&pView, 0);\n+  sqlite3TreeViewLine(pView, zLabel);\n+  if( pWith ) n++;\n+  if( pTabList ) n++;\n+  if( pColumnList ) n++;\n+  if( pSelect ) n++;\n+  if( pExprList ) n++;\n+  if( pUpsert ) n++;\n+  if( pTrigger ) n++;\n+  if( pWith ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewWith(pView, pWith, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pTabList ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"INTO\");\n+    sqlite3TreeViewSrcList(pView, pTabList);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pColumnList ){\n+    sqlite3TreeViewIdList(pView, pColumnList, (--n)>0, \"COLUMNS\");\n+  }\n+  if( pSelect ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"DATA-SOURCE\");\n+    sqlite3TreeViewSelect(pView, pSelect, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pExprList ){\n+    sqlite3TreeViewExprList(pView, pExprList, (--n)>0, \"VALUES\");\n+  }\n+  if( pUpsert ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"UPSERT\");\n+    sqlite3TreeViewUpsert(pView, pUpsert, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pTrigger ){\n+    sqlite3TreeViewTrigger(pView, pTrigger, (--n)>0, 1);\n+  }\n+  sqlite3TreeViewPop(&pView);\n+}\n+#endif \/* TREETRACE_ENABLED *\/\n+\n+#if TREETRACE_ENABLED\n+\/*\n+** Generate a human-readable diagram of the data structure that go\n+** into generating an UPDATE statement.\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewUpdate(\n+  const With *pWith,\n+  const SrcList *pTabList,\n+  const ExprList *pChanges,\n+  const Expr *pWhere,\n+  int onError,\n+  const ExprList *pOrderBy,\n+  const Expr *pLimit,\n+  const Upsert *pUpsert,\n+  const Trigger *pTrigger\n+){\n+  int n = 0;\n+  TreeView *pView = 0;\n+  const char *zLabel = \"UPDATE\";\n+  switch( onError ){\n+    case OE_Replace:  zLabel = \"UPDATE OR REPLACE\";   break;\n+    case OE_Ignore:   zLabel = \"UPDATE OR IGNORE\";    break;\n+    case OE_Rollback: zLabel = \"UPDATE OR ROLLBACK\";  break;\n+    case OE_Abort:    zLabel = \"UPDATE OR ABORT\";     break;\n+    case OE_Fail:     zLabel = \"UPDATE OR FAIL\";      break;\n+  }\n+  sqlite3TreeViewPush(&pView, 0);\n+  sqlite3TreeViewLine(pView, zLabel);\n+  if( pWith ) n++;\n+  if( pTabList ) n++;\n+  if( pChanges ) n++;\n+  if( pWhere ) n++;\n+  if( pOrderBy ) n++;\n+  if( pLimit ) n++;\n+  if( pUpsert ) n++;\n+  if( pTrigger ) n++;\n+  if( pWith ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewWith(pView, pWith, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pTabList ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"FROM\");\n+    sqlite3TreeViewSrcList(pView, pTabList);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pChanges ){\n+    sqlite3TreeViewExprList(pView, pChanges, (--n)>0, \"SET\");\n+  }\n+  if( pWhere ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"WHERE\");\n+    sqlite3TreeViewExpr(pView, pWhere, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pOrderBy ){\n+    sqlite3TreeViewExprList(pView, pOrderBy, (--n)>0, \"ORDER-BY\");\n+  }\n+  if( pLimit ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"LIMIT\");\n+    sqlite3TreeViewExpr(pView, pLimit, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pUpsert ){\n+    sqlite3TreeViewPush(&pView, (--n)>0);\n+    sqlite3TreeViewLine(pView, \"UPSERT\");\n+    sqlite3TreeViewUpsert(pView, pUpsert, 0);\n+    sqlite3TreeViewPop(&pView);\n+  }\n+  if( pTrigger ){\n+    sqlite3TreeViewTrigger(pView, pTrigger, (--n)>0, 1);\n+  }\n+  sqlite3TreeViewPop(&pView);\n+}\n+#endif \/* TREETRACE_ENABLED *\/\n+\n+#ifndef SQLITE_OMIT_TRIGGER\n+\/*\n+** Show a human-readable graph of a TriggerStep\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewTriggerStep(\n+  TreeView *pView,\n+  const TriggerStep *pStep,\n+  u8 moreToFollow,\n+  u8 showFullList\n+){\n+  int cnt = 0;\n+  if( pStep==0 ) return;\n+  sqlite3TreeViewPush(&pView,\n+      moreToFollow || (showFullList && pStep->pNext!=0));\n+  do{\n+    if( cnt++ && pStep->pNext==0 ){\n+      sqlite3TreeViewPop(&pView);\n+      sqlite3TreeViewPush(&pView, 0);\n+    }\n+    sqlite3TreeViewLine(pView, \"%s\", pStep->zSpan ? pStep->zSpan : \"RETURNING\");\n+  }while( showFullList && (pStep = pStep->pNext)!=0 );\n+  sqlite3TreeViewPop(&pView);\n+}\n+\n+\/*\n+** Show a human-readable graph of a Trigger\n+*\/\n+SQLITE_PRIVATE void sqlite3TreeViewTrigger(\n+  TreeView *pView,\n+  const Trigger *pTrigger,\n+  u8 moreToFollow,\n+  u8 showFullList\n+){\n+  int cnt = 0;\n+  if( pTrigger==0 ) return;\n+  sqlite3TreeViewPush(&pView,\n+     moreToFollow || (showFullList && pTrigger->pNext!=0));\n+  do{\n+    if( cnt++ && pTrigger->pNext==0 ){\n+      sqlite3TreeViewPop(&pView);\n+      sqlite3TreeViewPush(&pView, 0);\n+    }\n+    sqlite3TreeViewLine(pView, \"TRIGGER %s\", pTrigger->zName);\n+    sqlite3TreeViewPush(&pView, 0);\n+    sqlite3TreeViewTriggerStep(pView, pTrigger->step_list, 0, 1);\n+    sqlite3TreeViewPop(&pView);\n+  }while( showFullList && (pTrigger = pTrigger->pNext)!=0 );\n+  sqlite3TreeViewPop(&pView);\n+}\n+#endif \/* SQLITE_OMIT_TRIGGER *\/\n+\n+\n+\/*\n+** These simplified versions of the tree-view routines omit unnecessary\n+** parameters.  These variants are intended to be used from a symbolic\n+** debugger, such as \"gdb\", during interactive debugging sessions.\n+**\n+** This routines are given external linkage so that they will always be\n+** accessible to the debugging, and to avoid warnings about unused\n+** functions.  But these routines only exist in debugging builds, so they\n+** do not contaminate the interface.\n+*\/\n+SQLITE_PRIVATE void sqlite3ShowExpr(const Expr *p){ sqlite3TreeViewExpr(0,p,0); }\n+SQLITE_PRIVATE void sqlite3ShowExprList(const ExprList *p){ sqlite3TreeViewExprList(0,p,0,0);}\n+SQLITE_PRIVATE void sqlite3ShowIdList(const IdList *p){ sqlite3TreeViewIdList(0,p,0,0); }\n+SQLITE_PRIVATE void sqlite3ShowSrcList(const SrcList *p){ sqlite3TreeViewSrcList(0,p); }\n+SQLITE_PRIVATE void sqlite3ShowSelect(const Select *p){ sqlite3TreeViewSelect(0,p,0); }\n+SQLITE_PRIVATE void sqlite3ShowWith(const With *p){ sqlite3TreeViewWith(0,p,0); }\n+SQLITE_PRIVATE void sqlite3ShowUpsert(const Upsert *p){ sqlite3TreeViewUpsert(0,p,0); }\n+#ifndef SQLITE_OMIT_TRIGGER\n+SQLITE_PRIVATE void sqlite3ShowTriggerStep(const TriggerStep *p){\n+  sqlite3TreeViewTriggerStep(0,p,0,0);\n+}\n+SQLITE_PRIVATE void sqlite3ShowTriggerStepList(const TriggerStep *p){\n+  sqlite3TreeViewTriggerStep(0,p,0,1);\n+}\n+SQLITE_PRIVATE void sqlite3ShowTrigger(const Trigger *p){ sqlite3TreeViewTrigger(0,p,0,0); }\n+SQLITE_PRIVATE void sqlite3ShowTriggerList(const Trigger *p){ sqlite3TreeViewTrigger(0,p,0,1);}\n+#endif\n+#ifndef SQLITE_OMIT_WINDOWFUNC\n+SQLITE_PRIVATE void sqlite3ShowWindow(const Window *p){ sqlite3TreeViewWindow(0,p,0); }\n+SQLITE_PRIVATE void sqlite3ShowWinFunc(const Window *p){ sqlite3TreeViewWinFunc(0,p,0); }\n+#endif\n+\n@@ -32146,1 +33399,5 @@\n-  if( err_code || db->pErr ) sqlite3ErrorFinish(db, err_code);\n+  if( err_code || db->pErr ){\n+    sqlite3ErrorFinish(db, err_code);\n+  }else{\n+    db->errByteOffset = -1;\n+  }\n@@ -32156,0 +33413,1 @@\n+  db->errByteOffset = -1;\n@@ -32176,11 +33434,2 @@\n-** error string in the style of the printf functions: The following\n-** format characters are allowed:\n-**\n-**      %s      Insert a string\n-**      %z      A string that should be freed after use\n-**      %d      Insert an integer\n-**      %T      Insert a token\n-**      %S      Insert the first element of a SrcList\n-**\n-** zFormat and any string tokens that follow it are assumed to be\n-** encoded in UTF-8.\n+** error string.  zFormat and any string tokens that follow it are\n+** assumed to be encoded in UTF-8.\n@@ -32210,7 +33459,0 @@\n-** The following formatting characters are allowed:\n-**\n-**      %s      Insert a string\n-**      %z      A string that should be freed after use\n-**      %d      Insert an integer\n-**      %T      Insert a token\n-**      %S      Insert the first element of a SrcList\n@@ -32229,0 +33471,3 @@\n+  assert( db!=0 );\n+  assert( db->pParse==pParse || db->pParse->pToplevel==pParse );\n+  db->errByteOffset = -2;\n@@ -32232,0 +33477,1 @@\n+  if( db->errByteOffset<-1 ) db->errByteOffset = -1;\n@@ -32234,0 +33480,4 @@\n+    if( db->mallocFailed ){\n+      pParse->nErr++;\n+      pParse->rc = SQLITE_NOMEM;\n+    }\n@@ -33615,1 +34865,0 @@\n-#ifndef SQLITE_OMIT_VIRTUALTABLE\n@@ -33630,1 +34879,0 @@\n-#endif \/* SQLITE_OMIT_VIRTUALTABLE *\/\n@@ -33632,3 +34880,0 @@\n-#if defined(SQLITE_ENABLE_STMT_SCANSTATUS) || \\\n-    defined(SQLITE_ENABLE_STAT4) || \\\n-    defined(SQLITE_EXPLAIN_ESTIMATED_ROWS)\n@@ -33637,3 +34882,0 @@\n-**\n-** Note that this routine is only used when one or more of various\n-** non-standard compile-time options is enabled.\n@@ -33647,2 +34889,0 @@\n-#if defined(SQLITE_ENABLE_STMT_SCANSTATUS) || \\\n-    defined(SQLITE_EXPLAIN_ESTIMATED_ROWS)\n@@ -33650,5 +34890,0 @@\n-#else\n-  \/* If only SQLITE_ENABLE_STAT4 is on, then the largest input\n-  ** possible to this routine is 310, resulting in a maximum x of 31 *\/\n-  assert( x<=60 );\n-#endif\n@@ -33657,1 +34892,0 @@\n-#endif \/* defined SCANSTAT or STAT4 or ESTIMATED_ROWS *\/\n@@ -34051,16 +35285,16 @@\n-    \/*   3 *\/ \"SorterNext\"       OpHelp(\"\"),\n-    \/*   4 *\/ \"Prev\"             OpHelp(\"\"),\n-    \/*   5 *\/ \"Next\"             OpHelp(\"\"),\n-    \/*   6 *\/ \"Checkpoint\"       OpHelp(\"\"),\n-    \/*   7 *\/ \"JournalMode\"      OpHelp(\"\"),\n-    \/*   8 *\/ \"Vacuum\"           OpHelp(\"\"),\n-    \/*   9 *\/ \"VFilter\"          OpHelp(\"iplan=r[P3] zplan='P4'\"),\n-    \/*  10 *\/ \"VUpdate\"          OpHelp(\"data=r[P3@P2]\"),\n-    \/*  11 *\/ \"Goto\"             OpHelp(\"\"),\n-    \/*  12 *\/ \"Gosub\"            OpHelp(\"\"),\n-    \/*  13 *\/ \"InitCoroutine\"    OpHelp(\"\"),\n-    \/*  14 *\/ \"Yield\"            OpHelp(\"\"),\n-    \/*  15 *\/ \"MustBeInt\"        OpHelp(\"\"),\n-    \/*  16 *\/ \"Jump\"             OpHelp(\"\"),\n-    \/*  17 *\/ \"Once\"             OpHelp(\"\"),\n-    \/*  18 *\/ \"If\"               OpHelp(\"\"),\n+    \/*   3 *\/ \"Checkpoint\"       OpHelp(\"\"),\n+    \/*   4 *\/ \"JournalMode\"      OpHelp(\"\"),\n+    \/*   5 *\/ \"Vacuum\"           OpHelp(\"\"),\n+    \/*   6 *\/ \"VFilter\"          OpHelp(\"iplan=r[P3] zplan='P4'\"),\n+    \/*   7 *\/ \"VUpdate\"          OpHelp(\"data=r[P3@P2]\"),\n+    \/*   8 *\/ \"Goto\"             OpHelp(\"\"),\n+    \/*   9 *\/ \"Gosub\"            OpHelp(\"\"),\n+    \/*  10 *\/ \"InitCoroutine\"    OpHelp(\"\"),\n+    \/*  11 *\/ \"Yield\"            OpHelp(\"\"),\n+    \/*  12 *\/ \"MustBeInt\"        OpHelp(\"\"),\n+    \/*  13 *\/ \"Jump\"             OpHelp(\"\"),\n+    \/*  14 *\/ \"Once\"             OpHelp(\"\"),\n+    \/*  15 *\/ \"If\"               OpHelp(\"\"),\n+    \/*  16 *\/ \"IfNot\"            OpHelp(\"\"),\n+    \/*  17 *\/ \"IsNullOrType\"     OpHelp(\"if typeof(r[P1]) IN (P3,5) goto P2\"),\n+    \/*  18 *\/ \"IfNullRow\"        OpHelp(\"if P1.nullRow then r[P3]=NULL, goto P2\"),\n@@ -34068,19 +35302,19 @@\n-    \/*  20 *\/ \"IfNot\"            OpHelp(\"\"),\n-    \/*  21 *\/ \"IsNullOrType\"     OpHelp(\"if typeof(r[P1]) IN (P3,5) goto P2\"),\n-    \/*  22 *\/ \"IfNullRow\"        OpHelp(\"if P1.nullRow then r[P3]=NULL, goto P2\"),\n-    \/*  23 *\/ \"SeekLT\"           OpHelp(\"key=r[P3@P4]\"),\n-    \/*  24 *\/ \"SeekLE\"           OpHelp(\"key=r[P3@P4]\"),\n-    \/*  25 *\/ \"SeekGE\"           OpHelp(\"key=r[P3@P4]\"),\n-    \/*  26 *\/ \"SeekGT\"           OpHelp(\"key=r[P3@P4]\"),\n-    \/*  27 *\/ \"IfNotOpen\"        OpHelp(\"if( !csr[P1] ) goto P2\"),\n-    \/*  28 *\/ \"IfNoHope\"         OpHelp(\"key=r[P3@P4]\"),\n-    \/*  29 *\/ \"NoConflict\"       OpHelp(\"key=r[P3@P4]\"),\n-    \/*  30 *\/ \"NotFound\"         OpHelp(\"key=r[P3@P4]\"),\n-    \/*  31 *\/ \"Found\"            OpHelp(\"key=r[P3@P4]\"),\n-    \/*  32 *\/ \"SeekRowid\"        OpHelp(\"intkey=r[P3]\"),\n-    \/*  33 *\/ \"NotExists\"        OpHelp(\"intkey=r[P3]\"),\n-    \/*  34 *\/ \"Last\"             OpHelp(\"\"),\n-    \/*  35 *\/ \"IfSmaller\"        OpHelp(\"\"),\n-    \/*  36 *\/ \"SorterSort\"       OpHelp(\"\"),\n-    \/*  37 *\/ \"Sort\"             OpHelp(\"\"),\n-    \/*  38 *\/ \"Rewind\"           OpHelp(\"\"),\n+    \/*  20 *\/ \"SeekLT\"           OpHelp(\"key=r[P3@P4]\"),\n+    \/*  21 *\/ \"SeekLE\"           OpHelp(\"key=r[P3@P4]\"),\n+    \/*  22 *\/ \"SeekGE\"           OpHelp(\"key=r[P3@P4]\"),\n+    \/*  23 *\/ \"SeekGT\"           OpHelp(\"key=r[P3@P4]\"),\n+    \/*  24 *\/ \"IfNotOpen\"        OpHelp(\"if( !csr[P1] ) goto P2\"),\n+    \/*  25 *\/ \"IfNoHope\"         OpHelp(\"key=r[P3@P4]\"),\n+    \/*  26 *\/ \"NoConflict\"       OpHelp(\"key=r[P3@P4]\"),\n+    \/*  27 *\/ \"NotFound\"         OpHelp(\"key=r[P3@P4]\"),\n+    \/*  28 *\/ \"Found\"            OpHelp(\"key=r[P3@P4]\"),\n+    \/*  29 *\/ \"SeekRowid\"        OpHelp(\"intkey=r[P3]\"),\n+    \/*  30 *\/ \"NotExists\"        OpHelp(\"intkey=r[P3]\"),\n+    \/*  31 *\/ \"Last\"             OpHelp(\"\"),\n+    \/*  32 *\/ \"IfSmaller\"        OpHelp(\"\"),\n+    \/*  33 *\/ \"SorterSort\"       OpHelp(\"\"),\n+    \/*  34 *\/ \"Sort\"             OpHelp(\"\"),\n+    \/*  35 *\/ \"Rewind\"           OpHelp(\"\"),\n+    \/*  36 *\/ \"SorterNext\"       OpHelp(\"\"),\n+    \/*  37 *\/ \"Prev\"             OpHelp(\"\"),\n+    \/*  38 *\/ \"Next\"             OpHelp(\"\"),\n@@ -34111,39 +35345,39 @@\n-    \/*  63 *\/ \"Init\"             OpHelp(\"Start at P2\"),\n-    \/*  64 *\/ \"PureFunc\"         OpHelp(\"r[P3]=func(r[P2@NP])\"),\n-    \/*  65 *\/ \"Function\"         OpHelp(\"r[P3]=func(r[P2@NP])\"),\n-    \/*  66 *\/ \"Return\"           OpHelp(\"\"),\n-    \/*  67 *\/ \"EndCoroutine\"     OpHelp(\"\"),\n-    \/*  68 *\/ \"HaltIfNull\"       OpHelp(\"if r[P3]=null halt\"),\n-    \/*  69 *\/ \"Halt\"             OpHelp(\"\"),\n-    \/*  70 *\/ \"Integer\"          OpHelp(\"r[P2]=P1\"),\n-    \/*  71 *\/ \"Int64\"            OpHelp(\"r[P2]=P4\"),\n-    \/*  72 *\/ \"String\"           OpHelp(\"r[P2]='P4' (len=P1)\"),\n-    \/*  73 *\/ \"Null\"             OpHelp(\"r[P2..P3]=NULL\"),\n-    \/*  74 *\/ \"SoftNull\"         OpHelp(\"r[P1]=NULL\"),\n-    \/*  75 *\/ \"Blob\"             OpHelp(\"r[P2]=P4 (len=P1)\"),\n-    \/*  76 *\/ \"Variable\"         OpHelp(\"r[P2]=parameter(P1,P4)\"),\n-    \/*  77 *\/ \"Move\"             OpHelp(\"r[P2@P3]=r[P1@P3]\"),\n-    \/*  78 *\/ \"Copy\"             OpHelp(\"r[P2@P3+1]=r[P1@P3+1]\"),\n-    \/*  79 *\/ \"SCopy\"            OpHelp(\"r[P2]=r[P1]\"),\n-    \/*  80 *\/ \"IntCopy\"          OpHelp(\"r[P2]=r[P1]\"),\n-    \/*  81 *\/ \"ChngCntRow\"       OpHelp(\"output=r[P1]\"),\n-    \/*  82 *\/ \"ResultRow\"        OpHelp(\"output=r[P1@P2]\"),\n-    \/*  83 *\/ \"CollSeq\"          OpHelp(\"\"),\n-    \/*  84 *\/ \"AddImm\"           OpHelp(\"r[P1]=r[P1]+P2\"),\n-    \/*  85 *\/ \"RealAffinity\"     OpHelp(\"\"),\n-    \/*  86 *\/ \"Cast\"             OpHelp(\"affinity(r[P1])\"),\n-    \/*  87 *\/ \"Permutation\"      OpHelp(\"\"),\n-    \/*  88 *\/ \"Compare\"          OpHelp(\"r[P1@P3] <-> r[P2@P3]\"),\n-    \/*  89 *\/ \"IsTrue\"           OpHelp(\"r[P2] = coalesce(r[P1]==TRUE,P3) ^ P4\"),\n-    \/*  90 *\/ \"ZeroOrNull\"       OpHelp(\"r[P2] = 0 OR NULL\"),\n-    \/*  91 *\/ \"Offset\"           OpHelp(\"r[P3] = sqlite_offset(P1)\"),\n-    \/*  92 *\/ \"Column\"           OpHelp(\"r[P3]=PX\"),\n-    \/*  93 *\/ \"TypeCheck\"        OpHelp(\"typecheck(r[P1@P2])\"),\n-    \/*  94 *\/ \"Affinity\"         OpHelp(\"affinity(r[P1@P2])\"),\n-    \/*  95 *\/ \"MakeRecord\"       OpHelp(\"r[P3]=mkrec(r[P1@P2])\"),\n-    \/*  96 *\/ \"Count\"            OpHelp(\"r[P2]=count()\"),\n-    \/*  97 *\/ \"ReadCookie\"       OpHelp(\"\"),\n-    \/*  98 *\/ \"SetCookie\"        OpHelp(\"\"),\n-    \/*  99 *\/ \"ReopenIdx\"        OpHelp(\"root=P2 iDb=P3\"),\n-    \/* 100 *\/ \"OpenRead\"         OpHelp(\"root=P2 iDb=P3\"),\n-    \/* 101 *\/ \"OpenWrite\"        OpHelp(\"root=P2 iDb=P3\"),\n+    \/*  63 *\/ \"Filter\"           OpHelp(\"if key(P3@P4) not in filter(P1) goto P2\"),\n+    \/*  64 *\/ \"Init\"             OpHelp(\"Start at P2\"),\n+    \/*  65 *\/ \"PureFunc\"         OpHelp(\"r[P3]=func(r[P2@NP])\"),\n+    \/*  66 *\/ \"Function\"         OpHelp(\"r[P3]=func(r[P2@NP])\"),\n+    \/*  67 *\/ \"Return\"           OpHelp(\"\"),\n+    \/*  68 *\/ \"EndCoroutine\"     OpHelp(\"\"),\n+    \/*  69 *\/ \"HaltIfNull\"       OpHelp(\"if r[P3]=null halt\"),\n+    \/*  70 *\/ \"Halt\"             OpHelp(\"\"),\n+    \/*  71 *\/ \"Integer\"          OpHelp(\"r[P2]=P1\"),\n+    \/*  72 *\/ \"Int64\"            OpHelp(\"r[P2]=P4\"),\n+    \/*  73 *\/ \"String\"           OpHelp(\"r[P2]='P4' (len=P1)\"),\n+    \/*  74 *\/ \"BeginSubrtn\"      OpHelp(\"r[P2]=NULL\"),\n+    \/*  75 *\/ \"Null\"             OpHelp(\"r[P2..P3]=NULL\"),\n+    \/*  76 *\/ \"SoftNull\"         OpHelp(\"r[P1]=NULL\"),\n+    \/*  77 *\/ \"Blob\"             OpHelp(\"r[P2]=P4 (len=P1)\"),\n+    \/*  78 *\/ \"Variable\"         OpHelp(\"r[P2]=parameter(P1,P4)\"),\n+    \/*  79 *\/ \"Move\"             OpHelp(\"r[P2@P3]=r[P1@P3]\"),\n+    \/*  80 *\/ \"Copy\"             OpHelp(\"r[P2@P3+1]=r[P1@P3+1]\"),\n+    \/*  81 *\/ \"SCopy\"            OpHelp(\"r[P2]=r[P1]\"),\n+    \/*  82 *\/ \"IntCopy\"          OpHelp(\"r[P2]=r[P1]\"),\n+    \/*  83 *\/ \"FkCheck\"          OpHelp(\"\"),\n+    \/*  84 *\/ \"ResultRow\"        OpHelp(\"output=r[P1@P2]\"),\n+    \/*  85 *\/ \"CollSeq\"          OpHelp(\"\"),\n+    \/*  86 *\/ \"AddImm\"           OpHelp(\"r[P1]=r[P1]+P2\"),\n+    \/*  87 *\/ \"RealAffinity\"     OpHelp(\"\"),\n+    \/*  88 *\/ \"Cast\"             OpHelp(\"affinity(r[P1])\"),\n+    \/*  89 *\/ \"Permutation\"      OpHelp(\"\"),\n+    \/*  90 *\/ \"Compare\"          OpHelp(\"r[P1@P3] <-> r[P2@P3]\"),\n+    \/*  91 *\/ \"IsTrue\"           OpHelp(\"r[P2] = coalesce(r[P1]==TRUE,P3) ^ P4\"),\n+    \/*  92 *\/ \"ZeroOrNull\"       OpHelp(\"r[P2] = 0 OR NULL\"),\n+    \/*  93 *\/ \"Offset\"           OpHelp(\"r[P3] = sqlite_offset(P1)\"),\n+    \/*  94 *\/ \"Column\"           OpHelp(\"r[P3]=PX cursor P1 column P2\"),\n+    \/*  95 *\/ \"TypeCheck\"        OpHelp(\"typecheck(r[P1@P2])\"),\n+    \/*  96 *\/ \"Affinity\"         OpHelp(\"affinity(r[P1@P2])\"),\n+    \/*  97 *\/ \"MakeRecord\"       OpHelp(\"r[P3]=mkrec(r[P1@P2])\"),\n+    \/*  98 *\/ \"Count\"            OpHelp(\"r[P2]=count()\"),\n+    \/*  99 *\/ \"ReadCookie\"       OpHelp(\"\"),\n+    \/* 100 *\/ \"SetCookie\"        OpHelp(\"\"),\n+    \/* 101 *\/ \"ReopenIdx\"        OpHelp(\"root=P2 iDb=P3\"),\n@@ -34160,70 +35394,75 @@\n-    \/* 112 *\/ \"OpenDup\"          OpHelp(\"\"),\n-    \/* 113 *\/ \"BitNot\"           OpHelp(\"r[P2]= ~r[P1]\"),\n-    \/* 114 *\/ \"OpenAutoindex\"    OpHelp(\"nColumn=P2\"),\n-    \/* 115 *\/ \"OpenEphemeral\"    OpHelp(\"nColumn=P2\"),\n-    \/* 116 *\/ \"String8\"          OpHelp(\"r[P2]='P4'\"),\n-    \/* 117 *\/ \"SorterOpen\"       OpHelp(\"\"),\n-    \/* 118 *\/ \"SequenceTest\"     OpHelp(\"if( cursor[P1].ctr++ ) pc = P2\"),\n-    \/* 119 *\/ \"OpenPseudo\"       OpHelp(\"P3 columns in r[P2]\"),\n-    \/* 120 *\/ \"Close\"            OpHelp(\"\"),\n-    \/* 121 *\/ \"ColumnsUsed\"      OpHelp(\"\"),\n-    \/* 122 *\/ \"SeekScan\"         OpHelp(\"Scan-ahead up to P1 rows\"),\n-    \/* 123 *\/ \"SeekHit\"          OpHelp(\"set P2<=seekHit<=P3\"),\n-    \/* 124 *\/ \"Sequence\"         OpHelp(\"r[P2]=cursor[P1].ctr++\"),\n-    \/* 125 *\/ \"NewRowid\"         OpHelp(\"r[P2]=rowid\"),\n-    \/* 126 *\/ \"Insert\"           OpHelp(\"intkey=r[P3] data=r[P2]\"),\n-    \/* 127 *\/ \"RowCell\"          OpHelp(\"\"),\n-    \/* 128 *\/ \"Delete\"           OpHelp(\"\"),\n-    \/* 129 *\/ \"ResetCount\"       OpHelp(\"\"),\n-    \/* 130 *\/ \"SorterCompare\"    OpHelp(\"if key(P1)!=trim(r[P3],P4) goto P2\"),\n-    \/* 131 *\/ \"SorterData\"       OpHelp(\"r[P2]=data\"),\n-    \/* 132 *\/ \"RowData\"          OpHelp(\"r[P2]=data\"),\n-    \/* 133 *\/ \"Rowid\"            OpHelp(\"r[P2]=rowid\"),\n-    \/* 134 *\/ \"NullRow\"          OpHelp(\"\"),\n-    \/* 135 *\/ \"SeekEnd\"          OpHelp(\"\"),\n-    \/* 136 *\/ \"IdxInsert\"        OpHelp(\"key=r[P2]\"),\n-    \/* 137 *\/ \"SorterInsert\"     OpHelp(\"key=r[P2]\"),\n-    \/* 138 *\/ \"IdxDelete\"        OpHelp(\"key=r[P2@P3]\"),\n-    \/* 139 *\/ \"DeferredSeek\"     OpHelp(\"Move P3 to P1.rowid if needed\"),\n-    \/* 140 *\/ \"IdxRowid\"         OpHelp(\"r[P2]=rowid\"),\n-    \/* 141 *\/ \"FinishSeek\"       OpHelp(\"\"),\n-    \/* 142 *\/ \"Destroy\"          OpHelp(\"\"),\n-    \/* 143 *\/ \"Clear\"            OpHelp(\"\"),\n-    \/* 144 *\/ \"ResetSorter\"      OpHelp(\"\"),\n-    \/* 145 *\/ \"CreateBtree\"      OpHelp(\"r[P2]=root iDb=P1 flags=P3\"),\n-    \/* 146 *\/ \"SqlExec\"          OpHelp(\"\"),\n-    \/* 147 *\/ \"ParseSchema\"      OpHelp(\"\"),\n-    \/* 148 *\/ \"LoadAnalysis\"     OpHelp(\"\"),\n-    \/* 149 *\/ \"DropTable\"        OpHelp(\"\"),\n-    \/* 150 *\/ \"DropIndex\"        OpHelp(\"\"),\n-    \/* 151 *\/ \"DropTrigger\"      OpHelp(\"\"),\n-    \/* 152 *\/ \"Real\"             OpHelp(\"r[P2]=P4\"),\n-    \/* 153 *\/ \"IntegrityCk\"      OpHelp(\"\"),\n-    \/* 154 *\/ \"RowSetAdd\"        OpHelp(\"rowset(P1)=r[P2]\"),\n-    \/* 155 *\/ \"Param\"            OpHelp(\"\"),\n-    \/* 156 *\/ \"FkCounter\"        OpHelp(\"fkctr[P1]+=P2\"),\n-    \/* 157 *\/ \"MemMax\"           OpHelp(\"r[P1]=max(r[P1],r[P2])\"),\n-    \/* 158 *\/ \"OffsetLimit\"      OpHelp(\"if r[P1]>0 then r[P2]=r[P1]+max(0,r[P3]) else r[P2]=(-1)\"),\n-    \/* 159 *\/ \"AggInverse\"       OpHelp(\"accum=r[P3] inverse(r[P2@P5])\"),\n-    \/* 160 *\/ \"AggStep\"          OpHelp(\"accum=r[P3] step(r[P2@P5])\"),\n-    \/* 161 *\/ \"AggStep1\"         OpHelp(\"accum=r[P3] step(r[P2@P5])\"),\n-    \/* 162 *\/ \"AggValue\"         OpHelp(\"r[P3]=value N=P2\"),\n-    \/* 163 *\/ \"AggFinal\"         OpHelp(\"accum=r[P1] N=P2\"),\n-    \/* 164 *\/ \"Expire\"           OpHelp(\"\"),\n-    \/* 165 *\/ \"CursorLock\"       OpHelp(\"\"),\n-    \/* 166 *\/ \"CursorUnlock\"     OpHelp(\"\"),\n-    \/* 167 *\/ \"TableLock\"        OpHelp(\"iDb=P1 root=P2 write=P3\"),\n-    \/* 168 *\/ \"VBegin\"           OpHelp(\"\"),\n-    \/* 169 *\/ \"VCreate\"          OpHelp(\"\"),\n-    \/* 170 *\/ \"VDestroy\"         OpHelp(\"\"),\n-    \/* 171 *\/ \"VOpen\"            OpHelp(\"\"),\n-    \/* 172 *\/ \"VColumn\"          OpHelp(\"r[P3]=vcolumn(P2)\"),\n-    \/* 173 *\/ \"VRename\"          OpHelp(\"\"),\n-    \/* 174 *\/ \"Pagecount\"        OpHelp(\"\"),\n-    \/* 175 *\/ \"MaxPgcnt\"         OpHelp(\"\"),\n-    \/* 176 *\/ \"Trace\"            OpHelp(\"\"),\n-    \/* 177 *\/ \"CursorHint\"       OpHelp(\"\"),\n-    \/* 178 *\/ \"ReleaseReg\"       OpHelp(\"release r[P1@P2] mask P3\"),\n-    \/* 179 *\/ \"Noop\"             OpHelp(\"\"),\n-    \/* 180 *\/ \"Explain\"          OpHelp(\"\"),\n-    \/* 181 *\/ \"Abortable\"        OpHelp(\"\"),\n+    \/* 112 *\/ \"OpenRead\"         OpHelp(\"root=P2 iDb=P3\"),\n+    \/* 113 *\/ \"OpenWrite\"        OpHelp(\"root=P2 iDb=P3\"),\n+    \/* 114 *\/ \"BitNot\"           OpHelp(\"r[P2]= ~r[P1]\"),\n+    \/* 115 *\/ \"OpenDup\"          OpHelp(\"\"),\n+    \/* 116 *\/ \"OpenAutoindex\"    OpHelp(\"nColumn=P2\"),\n+    \/* 117 *\/ \"String8\"          OpHelp(\"r[P2]='P4'\"),\n+    \/* 118 *\/ \"OpenEphemeral\"    OpHelp(\"nColumn=P2\"),\n+    \/* 119 *\/ \"SorterOpen\"       OpHelp(\"\"),\n+    \/* 120 *\/ \"SequenceTest\"     OpHelp(\"if( cursor[P1].ctr++ ) pc = P2\"),\n+    \/* 121 *\/ \"OpenPseudo\"       OpHelp(\"P3 columns in r[P2]\"),\n+    \/* 122 *\/ \"Close\"            OpHelp(\"\"),\n+    \/* 123 *\/ \"ColumnsUsed\"      OpHelp(\"\"),\n+    \/* 124 *\/ \"SeekScan\"         OpHelp(\"Scan-ahead up to P1 rows\"),\n+    \/* 125 *\/ \"SeekHit\"          OpHelp(\"set P2<=seekHit<=P3\"),\n+    \/* 126 *\/ \"Sequence\"         OpHelp(\"r[P2]=cursor[P1].ctr++\"),\n+    \/* 127 *\/ \"NewRowid\"         OpHelp(\"r[P2]=rowid\"),\n+    \/* 128 *\/ \"Insert\"           OpHelp(\"intkey=r[P3] data=r[P2]\"),\n+    \/* 129 *\/ \"RowCell\"          OpHelp(\"\"),\n+    \/* 130 *\/ \"Delete\"           OpHelp(\"\"),\n+    \/* 131 *\/ \"ResetCount\"       OpHelp(\"\"),\n+    \/* 132 *\/ \"SorterCompare\"    OpHelp(\"if key(P1)!=trim(r[P3],P4) goto P2\"),\n+    \/* 133 *\/ \"SorterData\"       OpHelp(\"r[P2]=data\"),\n+    \/* 134 *\/ \"RowData\"          OpHelp(\"r[P2]=data\"),\n+    \/* 135 *\/ \"Rowid\"            OpHelp(\"r[P2]=PX rowid of P1\"),\n+    \/* 136 *\/ \"NullRow\"          OpHelp(\"\"),\n+    \/* 137 *\/ \"SeekEnd\"          OpHelp(\"\"),\n+    \/* 138 *\/ \"IdxInsert\"        OpHelp(\"key=r[P2]\"),\n+    \/* 139 *\/ \"SorterInsert\"     OpHelp(\"key=r[P2]\"),\n+    \/* 140 *\/ \"IdxDelete\"        OpHelp(\"key=r[P2@P3]\"),\n+    \/* 141 *\/ \"DeferredSeek\"     OpHelp(\"Move P3 to P1.rowid if needed\"),\n+    \/* 142 *\/ \"IdxRowid\"         OpHelp(\"r[P2]=rowid\"),\n+    \/* 143 *\/ \"FinishSeek\"       OpHelp(\"\"),\n+    \/* 144 *\/ \"Destroy\"          OpHelp(\"\"),\n+    \/* 145 *\/ \"Clear\"            OpHelp(\"\"),\n+    \/* 146 *\/ \"ResetSorter\"      OpHelp(\"\"),\n+    \/* 147 *\/ \"CreateBtree\"      OpHelp(\"r[P2]=root iDb=P1 flags=P3\"),\n+    \/* 148 *\/ \"SqlExec\"          OpHelp(\"\"),\n+    \/* 149 *\/ \"ParseSchema\"      OpHelp(\"\"),\n+    \/* 150 *\/ \"LoadAnalysis\"     OpHelp(\"\"),\n+    \/* 151 *\/ \"DropTable\"        OpHelp(\"\"),\n+    \/* 152 *\/ \"DropIndex\"        OpHelp(\"\"),\n+    \/* 153 *\/ \"Real\"             OpHelp(\"r[P2]=P4\"),\n+    \/* 154 *\/ \"DropTrigger\"      OpHelp(\"\"),\n+    \/* 155 *\/ \"IntegrityCk\"      OpHelp(\"\"),\n+    \/* 156 *\/ \"RowSetAdd\"        OpHelp(\"rowset(P1)=r[P2]\"),\n+    \/* 157 *\/ \"Param\"            OpHelp(\"\"),\n+    \/* 158 *\/ \"FkCounter\"        OpHelp(\"fkctr[P1]+=P2\"),\n+    \/* 159 *\/ \"MemMax\"           OpHelp(\"r[P1]=max(r[P1],r[P2])\"),\n+    \/* 160 *\/ \"OffsetLimit\"      OpHelp(\"if r[P1]>0 then r[P2]=r[P1]+max(0,r[P3]) else r[P2]=(-1)\"),\n+    \/* 161 *\/ \"AggInverse\"       OpHelp(\"accum=r[P3] inverse(r[P2@P5])\"),\n+    \/* 162 *\/ \"AggStep\"          OpHelp(\"accum=r[P3] step(r[P2@P5])\"),\n+    \/* 163 *\/ \"AggStep1\"         OpHelp(\"accum=r[P3] step(r[P2@P5])\"),\n+    \/* 164 *\/ \"AggValue\"         OpHelp(\"r[P3]=value N=P2\"),\n+    \/* 165 *\/ \"AggFinal\"         OpHelp(\"accum=r[P1] N=P2\"),\n+    \/* 166 *\/ \"Expire\"           OpHelp(\"\"),\n+    \/* 167 *\/ \"CursorLock\"       OpHelp(\"\"),\n+    \/* 168 *\/ \"CursorUnlock\"     OpHelp(\"\"),\n+    \/* 169 *\/ \"TableLock\"        OpHelp(\"iDb=P1 root=P2 write=P3\"),\n+    \/* 170 *\/ \"VBegin\"           OpHelp(\"\"),\n+    \/* 171 *\/ \"VCreate\"          OpHelp(\"\"),\n+    \/* 172 *\/ \"VDestroy\"         OpHelp(\"\"),\n+    \/* 173 *\/ \"VOpen\"            OpHelp(\"\"),\n+    \/* 174 *\/ \"VInitIn\"          OpHelp(\"r[P2]=ValueList(P1,P3)\"),\n+    \/* 175 *\/ \"VColumn\"          OpHelp(\"r[P3]=vcolumn(P2)\"),\n+    \/* 176 *\/ \"VRename\"          OpHelp(\"\"),\n+    \/* 177 *\/ \"Pagecount\"        OpHelp(\"\"),\n+    \/* 178 *\/ \"MaxPgcnt\"         OpHelp(\"\"),\n+    \/* 179 *\/ \"ClrSubtype\"       OpHelp(\"r[P1].subtype = 0\"),\n+    \/* 180 *\/ \"FilterAdd\"        OpHelp(\"filter(P1) += key(P3@P4)\"),\n+    \/* 181 *\/ \"Trace\"            OpHelp(\"\"),\n+    \/* 182 *\/ \"CursorHint\"       OpHelp(\"\"),\n+    \/* 183 *\/ \"ReleaseReg\"       OpHelp(\"release r[P1@P2] mask P3\"),\n+    \/* 184 *\/ \"Noop\"             OpHelp(\"\"),\n+    \/* 185 *\/ \"Explain\"          OpHelp(\"\"),\n+    \/* 186 *\/ \"Abortable\"        OpHelp(\"\"),\n@@ -39149,2 +40388,2 @@\n-  unixShm *p = pDbFd->pShm;             \/* The shared memory being locked *\/\n-  unixShmNode *pShmNode = p->pShmNode;  \/* The underlying file iNode *\/\n+  unixShm *p;                           \/* The shared memory being locked *\/\n+  unixShmNode *pShmNode;                \/* The underlying file iNode *\/\n@@ -39153,1 +40392,7 @@\n-  int *aLock = pShmNode->aLock;\n+  int *aLock;\n+\n+  p = pDbFd->pShm;\n+  if( p==0 ) return SQLITE_IOERR_SHMLOCK;\n+  pShmNode = p->pShmNode;\n+  if( NEVER(pShmNode==0) ) return SQLITE_IOERR_SHMLOCK;\n+  aLock = pShmNode->aLock;\n@@ -40088,0 +41333,1 @@\n+  int rc = SQLITE_OK;\n@@ -40096,0 +41342,1 @@\n+  sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -40097,11 +41344,18 @@\n-  if( zDir==0 ) return SQLITE_IOERR_GETTEMPPATH;\n-  do{\n-    u64 r;\n-    sqlite3_randomness(sizeof(r), &r);\n-    assert( nBuf>2 );\n-    zBuf[nBuf-2] = 0;\n-    sqlite3_snprintf(nBuf, zBuf, \"%s\/\"SQLITE_TEMP_FILE_PREFIX\"%llx%c\",\n-                     zDir, r, 0);\n-    if( zBuf[nBuf-2]!=0 || (iLimit++)>10 ) return SQLITE_ERROR;\n-  }while( osAccess(zBuf,0)==0 );\n-  return SQLITE_OK;\n+  if( zDir==0 ){\n+    rc = SQLITE_IOERR_GETTEMPPATH;\n+  }else{\n+    do{\n+      u64 r;\n+      sqlite3_randomness(sizeof(r), &r);\n+      assert( nBuf>2 );\n+      zBuf[nBuf-2] = 0;\n+      sqlite3_snprintf(nBuf, zBuf, \"%s\/\"SQLITE_TEMP_FILE_PREFIX\"%llx%c\",\n+                       zDir, r, 0);\n+      if( zBuf[nBuf-2]!=0 || (iLimit++)>10 ){\n+        rc = SQLITE_ERROR;\n+        break;\n+      }\n+    }while( osAccess(zBuf,0)==0 );\n+  }\n+  sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n+  return rc;\n@@ -40250,0 +41504,6 @@\n+    **\n+    ** In normal operation, the journal file name will always contain\n+    ** a '-' character.  However in 8+3 filename mode, or if a corrupt\n+    ** rollback journal specifies a super-journal with a goofy name, then\n+    ** the '-' might be missing or the '-' might be the first character in\n+    ** the filename.  In that case, just return SQLITE_OK with *pMode==0.\n@@ -40252,6 +41512,7 @@\n-    while( zPath[nDb]!='-' ){\n-      \/* In normal operation, the journal file name will always contain\n-      ** a '-' character.  However in 8+3 filename mode, or if a corrupt\n-      ** rollback journal specifies a super-journal with a goofy name, then\n-      ** the '-' might be missing. *\/\n-      if( nDb==0 || zPath[nDb]=='.' ) return SQLITE_OK;\n+    while( nDb>0 && zPath[nDb]!='.' ){\n+      if( zPath[nDb]=='-' ){\n+        memcpy(zDb, zPath, nDb);\n+        zDb[nDb] = '\\0';\n+        rc = getFileMode(zDb, pMode, pUid, pGid);\n+        break;\n+      }\n@@ -40260,4 +41521,0 @@\n-    memcpy(zDb, zPath, nDb);\n-    zDb[nDb] = '\\0';\n-\n-    rc = getFileMode(zDb, pMode, pUid, pGid);\n@@ -40653,3 +41910,1 @@\n-** If the last component of the pathname in z[0]..z[j-1] is something\n-** other than \"..\" then back it out and return true.  If the last\n-** component is empty or if it is \"..\" then return false.\n+** A pathname under construction\n@@ -40657,10 +41912,11 @@\n-static int unixBackupDir(const char *z, int *pJ){\n-  int j = *pJ;\n-  int i;\n-  if( j<=0 ) return 0;\n-  for(i=j-1; i>0 && z[i-1]!='\/'; i--){}\n-  if( i==0 ) return 0;\n-  if( z[i]=='.' && i==j-2 && z[i+1]=='.' ) return 0;\n-  *pJ = i-1;\n-  return 1;\n-}\n+typedef struct DbPath DbPath;\n+struct DbPath {\n+  int rc;           \/* Non-zero following any error *\/\n+  int nSymlink;     \/* Number of symlinks resolved *\/\n+  char *zOut;       \/* Write the pathname here *\/\n+  int nOut;         \/* Bytes of space available to zOut[] *\/\n+  int nUsed;        \/* Bytes of zOut[] currently being used *\/\n+};\n+\n+\/* Forward reference *\/\n+static void appendAllPathElements(DbPath*,const char*);\n@@ -40669,5 +41925,1 @@\n-** Convert a relative pathname into a full pathname.  Also\n-** simplify the pathname as follows:\n-**\n-**    Remove all instances of \/.\/\n-**    Remove all isntances of \/X\/..\/ for any X\n+** Append a single path element to the DbPath under construction\n@@ -40675,4 +41927,4 @@\n-static int mkFullPathname(\n-  const char *zPath,              \/* Input path *\/\n-  char *zOut,                     \/* Output buffer *\/\n-  int nOut                        \/* Allocated size of buffer zOut *\/\n+static void appendOnePathElement(\n+  DbPath *pPath,       \/* Path under construction, to which to append zName *\/\n+  const char *zName,   \/* Name to append to pPath.  Not zero-terminated *\/\n+  int nName            \/* Number of significant bytes in zName *\/\n@@ -40680,6 +41932,12 @@\n-  int nPath = sqlite3Strlen30(zPath);\n-  int iOff = 0;\n-  int i, j;\n-  if( zPath[0]!='\/' ){\n-    if( osGetcwd(zOut, nOut-2)==0 ){\n-      return unixLogError(SQLITE_CANTOPEN_BKPT, \"getcwd\", zPath);\n+  assert( nName>0 );\n+  assert( zName!=0 );\n+  if( zName[0]=='.' ){\n+    if( nName==1 ) return;\n+    if( zName[1]=='.' && nName==2 ){\n+      if( pPath->nUsed<=1 ){\n+        pPath->rc = SQLITE_ERROR;\n+        return;\n+      }\n+      assert( pPath->zOut[0]=='\/' );\n+      while( pPath->zOut[--pPath->nUsed]!='\/' ){}\n+      return;\n@@ -40687,8 +41945,0 @@\n-    iOff = sqlite3Strlen30(zOut);\n-    zOut[iOff++] = '\/';\n-  }\n-  if( (iOff+nPath+1)>nOut ){\n-    \/* SQLite assumes that xFullPathname() nul-terminates the output buffer\n-    ** even if it returns an error.  *\/\n-    zOut[iOff] = '\\0';\n-    return SQLITE_CANTOPEN_BKPT;\n@@ -40696,7 +41946,3 @@\n-  sqlite3_snprintf(nOut-iOff, &zOut[iOff], \"%s\", zPath);\n-\n-  \/* Remove duplicate '\/' characters.  Except, two \/\/ at the beginning\n-  ** of a pathname is allowed since this is important on windows. *\/\n-  for(i=j=1; zOut[i]; i++){\n-    zOut[j++] = zOut[i];\n-    while( zOut[i]=='\/' && zOut[i+1]=='\/' ) i++;\n+  if( pPath->nUsed + nName + 2 >= pPath->nOut ){\n+    pPath->rc = SQLITE_ERROR;\n+    return;\n@@ -40704,9 +41950,12 @@\n-  zOut[j] = 0;\n-\n-  assert( zOut[0]=='\/' );\n-  for(i=j=0; zOut[i]; i++){\n-    if( zOut[i]=='\/' ){\n-      \/* Skip over internal \"\/.\" directory components *\/\n-      if( zOut[i+1]=='.' && zOut[i+2]=='\/' ){\n-        i += 1;\n-        continue;\n+  pPath->zOut[pPath->nUsed++] = '\/';\n+  memcpy(&pPath->zOut[pPath->nUsed], zName, nName);\n+  pPath->nUsed += nName;\n+#if defined(HAVE_READLINK) && defined(HAVE_LSTAT)\n+  if( pPath->rc==SQLITE_OK ){\n+    const char *zIn;\n+    struct stat buf;\n+    pPath->zOut[pPath->nUsed] = 0;\n+    zIn = pPath->zOut;\n+    if( osLstat(zIn, &buf)!=0 ){\n+      if( errno!=ENOENT ){\n+        pPath->rc = unixLogError(SQLITE_CANTOPEN_BKPT, \"lstat\", zIn);\n@@ -40714,11 +41963,6 @@\n-\n-      \/* If this is a \"\/..\" directory component then back out the\n-      ** previous term of the directory if it is something other than \"..\".\n-      *\/\n-      if( zOut[i+1]=='.'\n-       && zOut[i+2]=='.'\n-       && zOut[i+3]=='\/'\n-       && unixBackupDir(zOut, &j)\n-      ){\n-        i += 2;\n-        continue;\n+    }else if( S_ISLNK(buf.st_mode) ){\n+      ssize_t got;\n+      char zLnk[SQLITE_MAX_PATHLEN+2];\n+      if( pPath->nSymlink++ > SQLITE_MAX_SYMLINK ){\n+        pPath->rc = SQLITE_CANTOPEN_BKPT;\n+        return;\n@@ -40726,0 +41970,12 @@\n+      got = osReadlink(zIn, zLnk, sizeof(zLnk)-2);\n+      if( got<=0 || got>=(ssize_t)sizeof(zLnk)-2 ){\n+        pPath->rc = unixLogError(SQLITE_CANTOPEN_BKPT, \"readlink\", zIn);\n+        return;\n+      }\n+      zLnk[got] = 0;\n+      if( zLnk[0]=='\/' ){\n+        pPath->nUsed = 0;\n+      }else{\n+        pPath->nUsed -= nName + 1;\n+      }\n+      appendAllPathElements(pPath, zLnk);\n@@ -40727,2 +41983,0 @@\n-    if( ALWAYS(j>=0) ) zOut[j] = zOut[i];\n-    j++;\n@@ -40730,3 +41984,19 @@\n-  if( NEVER(j==0) ) zOut[j++] = '\/';\n-  zOut[j] = 0;\n-  return SQLITE_OK;\n+#endif\n+}\n+\n+\/*\n+** Append all path elements in zPath to the DbPath under construction.\n+*\/\n+static void appendAllPathElements(\n+  DbPath *pPath,       \/* Path under construction, to which to append zName *\/\n+  const char *zPath    \/* Path to append to pPath.  Is zero-terminated *\/\n+){\n+  int i = 0;\n+  int j = 0;\n+  do{\n+    while( zPath[i] && zPath[i]!='\/' ){ i++; }\n+    if( i>j ){\n+      appendOnePathElement(pPath, &zPath[j], i-j);\n+    }\n+    j = i+1;\n+  }while( zPath[i++] );\n@@ -40750,10 +42020,1 @@\n-#if !defined(HAVE_READLINK) || !defined(HAVE_LSTAT)\n-  return mkFullPathname(zPath, zOut, nOut);\n-#else\n-  int rc = SQLITE_OK;\n-  int nByte;\n-  int nLink = 0;                \/* Number of symbolic links followed so far *\/\n-  const char *zIn = zPath;      \/* Input path for each iteration of loop *\/\n-  char *zDel = 0;\n-\n-  assert( pVfs->mxPathname==MAX_PATHNAME );\n+  DbPath path;\n@@ -40761,57 +42022,9 @@\n-\n-  \/* It's odd to simulate an io-error here, but really this is just\n-  ** using the io-error infrastructure to test that SQLite handles this\n-  ** function failing. This function could fail if, for example, the\n-  ** current working directory has been unlinked.\n-  *\/\n-  SimulateIOError( return SQLITE_ERROR );\n-\n-  do {\n-\n-    \/* Call stat() on path zIn. Set bLink to true if the path is a symbolic\n-    ** link, or false otherwise.  *\/\n-    int bLink = 0;\n-    struct stat buf;\n-    if( osLstat(zIn, &buf)!=0 ){\n-      if( errno!=ENOENT ){\n-        rc = unixLogError(SQLITE_CANTOPEN_BKPT, \"lstat\", zIn);\n-      }\n-    }else{\n-      bLink = S_ISLNK(buf.st_mode);\n-    }\n-\n-    if( bLink ){\n-      nLink++;\n-      if( zDel==0 ){\n-        zDel = sqlite3_malloc(nOut);\n-        if( zDel==0 ) rc = SQLITE_NOMEM_BKPT;\n-      }else if( nLink>=SQLITE_MAX_SYMLINKS ){\n-        rc = SQLITE_CANTOPEN_BKPT;\n-      }\n-\n-      if( rc==SQLITE_OK ){\n-        nByte = osReadlink(zIn, zDel, nOut-1);\n-        if( nByte<0 ){\n-          rc = unixLogError(SQLITE_CANTOPEN_BKPT, \"readlink\", zIn);\n-        }else{\n-          if( zDel[0]!='\/' ){\n-            int n;\n-            for(n = sqlite3Strlen30(zIn); n>0 && zIn[n-1]!='\/'; n--);\n-            if( nByte+n+1>nOut ){\n-              rc = SQLITE_CANTOPEN_BKPT;\n-            }else{\n-              memmove(&zDel[n], zDel, nByte+1);\n-              memcpy(zDel, zIn, n);\n-              nByte += n;\n-            }\n-          }\n-          zDel[nByte] = '\\0';\n-        }\n-      }\n-\n-      zIn = zDel;\n-    }\n-\n-    assert( rc!=SQLITE_OK || zIn!=zOut || zIn[0]=='\/' );\n-    if( rc==SQLITE_OK && zIn!=zOut ){\n-      rc = mkFullPathname(zIn, zOut, nOut);\n+  path.rc = 0;\n+  path.nUsed = 0;\n+  path.nSymlink = 0;\n+  path.nOut = nOut;\n+  path.zOut = zOut;\n+  if( zPath[0]!='\/' ){\n+    char zPwd[SQLITE_MAX_PATHLEN+2];\n+    if( osGetcwd(zPwd, sizeof(zPwd)-2)==0 ){\n+      return unixLogError(SQLITE_CANTOPEN_BKPT, \"getcwd\", zPath);\n@@ -40819,8 +42032,7 @@\n-    if( bLink==0 ) break;\n-    zIn = zOut;\n-  }while( rc==SQLITE_OK );\n-\n-  sqlite3_free(zDel);\n-  if( rc==SQLITE_OK && nLink ) rc = SQLITE_OK_SYMLINK;\n-  return rc;\n-#endif   \/* HAVE_READLINK && HAVE_LSTAT *\/\n+    appendAllPathElements(&path, zPwd);\n+  }\n+  appendAllPathElements(&path, zPath);\n+  zOut[path.nUsed] = 0;\n+  if( path.rc || path.nUsed<2 ) return SQLITE_CANTOPEN_BKPT;\n+  if( path.nSymlink ) return SQLITE_OK_SYMLINK;\n+  return SQLITE_OK;\n@@ -40829,1 +42041,0 @@\n-\n@@ -44289,0 +45500,1 @@\n+  int rc;\n@@ -44290,1 +45502,1 @@\n-  int rc = sqlite3_initialize();\n+  rc = sqlite3_initialize();\n@@ -44293,0 +45505,1 @@\n+  sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -44307,1 +45520,2 @@\n-        return SQLITE_NOMEM_BKPT;\n+        rc = SQLITE_NOMEM_BKPT;\n+        goto set_directory8_done;\n@@ -44312,1 +45526,3 @@\n-    return SQLITE_OK;\n+    rc = SQLITE_OK;\n+  }else{\n+    rc = SQLITE_ERROR;\n@@ -44314,1 +45530,3 @@\n-  return SQLITE_ERROR;\n+set_directory8_done:\n+  sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n+  return rc;\n@@ -46441,1 +47659,1 @@\n-  winShmNode *pShmNode = p->pShmNode;\n+  winShmNode *pShmNode;\n@@ -46445,0 +47663,4 @@\n+  if( p==0 ) return SQLITE_IOERR_SHMLOCK;\n+  pShmNode = p->pShmNode;\n+  if( NEVER(pShmNode==0) ) return SQLITE_IOERR_SHMLOCK;\n+\n@@ -47084,0 +48306,12 @@\n+\/*\n+** If sqlite3_temp_directory is not, take the mutex and return true.\n+**\n+** If sqlite3_temp_directory is NULL, omit the mutex and return false.\n+*\/\n+static int winTempDirDefined(void){\n+  sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n+  if( sqlite3_temp_directory!=0 ) return 1;\n+  sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n+  return 0;\n+}\n+\n@@ -47120,1 +48354,1 @@\n-  if( sqlite3_temp_directory ){\n+  if( winTempDirDefined() ){\n@@ -47127,0 +48361,1 @@\n+        sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -47133,0 +48368,1 @@\n+    sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -47134,0 +48370,1 @@\n+\n@@ -47922,1 +49159,1 @@\n-static int winFullPathname(\n+static int winFullPathnameNoMutex(\n@@ -48101,0 +49338,13 @@\n+static int winFullPathname(\n+  sqlite3_vfs *pVfs,            \/* Pointer to vfs object *\/\n+  const char *zRelative,        \/* Possibly relative input path *\/\n+  int nFull,                    \/* Size of output buffer in bytes *\/\n+  char *zFull                   \/* Output buffer *\/\n+){\n+  int rc;\n+  sqlite3_mutex *pMutex = sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR);\n+  sqlite3_mutex_enter(pMutex);\n+  rc = winFullPathnameNoMutex(pVfs, zRelative, nFull, zFull);\n+  sqlite3_mutex_leave(pMutex);\n+  return rc;\n+}\n@@ -50445,0 +51695,1 @@\n+  sqlite3_pcache_page *pOther;\n@@ -50449,0 +51700,8 @@\n+  pOther = sqlite3GlobalConfig.pcache2.xFetch(pCache->pCache, newPgno, 0);\n+  if( pOther ){\n+    PgHdr *pXPage = (PgHdr*)pOther->pExtra;\n+    assert( pXPage->nRef==0 );\n+    pXPage->nRef++;\n+    pCache->nRefSum++;\n+    sqlite3PcacheDrop(pXPage);\n+  }\n@@ -50453,0 +51712,1 @@\n+    assert( sqlite3PcachePageSanity(p) );\n@@ -51834,1 +53094,1 @@\n-  unsigned int h;\n+  unsigned int hOld, hNew;\n@@ -51837,0 +53097,1 @@\n+  assert( iOld!=iNew );               \/* The page number really is changing *\/\n@@ -51840,2 +53101,3 @@\n-  h = iOld%pCache->nHash;\n-  pp = &pCache->apHash[h];\n+  assert( pcache1FetchNoMutex(p, iOld, 0)==pPage ); \/* pPg really is iOld *\/\n+  hOld = iOld%pCache->nHash;\n+  pp = &pCache->apHash[hOld];\n@@ -51847,1 +53109,2 @@\n-  h = iNew%pCache->nHash;\n+  assert( pcache1FetchNoMutex(p, iNew, 0)==0 ); \/* iNew not in cache *\/\n+  hNew = iNew%pCache->nHash;\n@@ -51849,2 +53112,2 @@\n-  pPage->pNext = pCache->apHash[h];\n-  pCache->apHash[h] = pPage;\n+  pPage->pNext = pCache->apHash[hNew];\n+  pCache->apHash[hNew] = pPage;\n@@ -53343,0 +54606,1 @@\n+  Pgno lckPgno;               \/* Page number for the locking page *\/\n@@ -54329,1 +55593,1 @@\n-**   + 4 bytes: PAGER_MJ_PGNO.\n+**   + 4 bytes: PAGER_SJ_PGNO.\n@@ -54377,1 +55641,1 @@\n-  if( (0 != (rc = write32bits(pPager->jfd, iHdrOff, PAGER_MJ_PGNO(pPager))))\n+  if( (0 != (rc = write32bits(pPager->jfd, iHdrOff, PAGER_SJ_PGNO(pPager))))\n@@ -54887,1 +56151,1 @@\n-**   * If the record page-number is illegal (0 or PAGER_MJ_PGNO), or\n+**   * If the record page-number is illegal (0 or PAGER_SJ_PGNO), or\n@@ -54947,1 +56211,1 @@\n-  if( pgno==0 || pgno==PAGER_MJ_PGNO(pPager) ){\n+  if( pgno==0 || pgno==PAGER_SJ_PGNO(pPager) ){\n@@ -55284,0 +56548,1 @@\n+        sqlite3OsFileControlHint(pPager->fd, SQLITE_FCNTL_SIZE_HINT, &newSize);\n@@ -55506,0 +56771,3 @@\n+      if( pPager->mxPgno<mxPg ){\n+        pPager->mxPgno = mxPg;\n+      }\n@@ -56402,0 +57670,1 @@\n+      pPager->lckPgno = (Pgno)(PENDING_BYTE\/pageSize) + 1;\n@@ -56562,2 +57831,1 @@\n-**      be necessary to write the current content out to the sub-journal\n-**      (as determined by function subjRequiresPage()).\n+**      be necessary to write the current content out to the sub-journal.\n@@ -56578,0 +57846,1 @@\n+  Pager *pPager = pPg->pPager;\n@@ -56579,1 +57848,8 @@\n-  assert( pPg->pgno<=pPg->pPager->dbSize || !subjRequiresPage(pPg) );\n+  if( pPg->pgno>pPager->dbSize ){      \/* if (a) is false *\/\n+    Pgno pgno = pPg->pgno;\n+    int i;\n+    for(i=0; i<pPg->pPager->nSavepoint; i++){\n+      PagerSavepoint *p = &pPager->aSavepoint[i];\n+      assert( p->nOrig<pgno || sqlite3BitvecTestNotNull(p->pInSavepoint,pgno) );\n+    }\n+  }\n@@ -56601,1 +57877,0 @@\n-  testcase( pPager->dbSize<nPage );\n@@ -58165,1 +59440,1 @@\n-    assert( pgno!=PAGER_MJ_PGNO(pPager) );\n+    assert( pgno!=PAGER_SJ_PGNO(pPager) );\n@@ -58176,1 +59451,1 @@\n-    if( pgno==PAGER_MJ_PGNO(pPager) ){\n+    if( pgno==PAGER_SJ_PGNO(pPager) ){\n@@ -58322,0 +59597,1 @@\n+  \/* printf(\"PAGE %u\\n\", pgno); fflush(stdout); *\/\n@@ -58470,0 +59746,1 @@\n+    pPager->journalOff = 0;\n@@ -58574,1 +59851,1 @@\n-  assert( pPg->pgno!=PAGER_MJ_PGNO(pPager) );\n+  assert( pPg->pgno!=PAGER_SJ_PGNO(pPager) );\n@@ -58753,1 +60030,1 @@\n-      if( pg!=PAGER_MJ_PGNO(pPager) ){\n+      if( pg!=PAGER_SJ_PGNO(pPager) ){\n@@ -59231,1 +60508,1 @@\n-        Pgno nNew = pPager->dbSize - (pPager->dbSize==PAGER_MJ_PGNO(pPager));\n+        Pgno nNew = pPager->dbSize - (pPager->dbSize==PAGER_SJ_PGNO(pPager));\n@@ -59927,6 +61204,6 @@\n-  assert(      eMode==PAGER_JOURNALMODE_DELETE\n-            || eMode==PAGER_JOURNALMODE_TRUNCATE\n-            || eMode==PAGER_JOURNALMODE_PERSIST\n-            || eMode==PAGER_JOURNALMODE_OFF\n-            || eMode==PAGER_JOURNALMODE_WAL\n-            || eMode==PAGER_JOURNALMODE_MEMORY );\n+  assert(      eMode==PAGER_JOURNALMODE_DELETE    \/* 0 *\/\n+            || eMode==PAGER_JOURNALMODE_PERSIST   \/* 1 *\/\n+            || eMode==PAGER_JOURNALMODE_OFF       \/* 2 *\/\n+            || eMode==PAGER_JOURNALMODE_TRUNCATE  \/* 3 *\/\n+            || eMode==PAGER_JOURNALMODE_MEMORY    \/* 4 *\/\n+            || eMode==PAGER_JOURNALMODE_WAL       \/* 5 *\/ );\n@@ -59969,1 +61246,0 @@\n-\n@@ -60026,1 +61302,1 @@\n-  if( NEVER(isOpen(pPager->jfd) && pPager->journalOff>0) ) return 0;\n+  if( isOpen(pPager->jfd) && pPager->journalOff>0 ) return 0;\n@@ -60081,0 +61357,12 @@\n+  if( pPager->pWal==0 && pPager->journalMode==PAGER_JOURNALMODE_WAL ){\n+    \/* This only happens when a database file is zero bytes in size opened and\n+    ** then \"PRAGMA journal_mode=WAL\" is run and then sqlite3_wal_checkpoint()\n+    ** is invoked without any intervening transactions.  We need to start\n+    ** a transaction to initialize pWal.  The PRAGMA table_list statement is\n+    ** used for this since it starts transactions on every database file,\n+    ** including all ATTACHed databases.  This seems expensive for a single\n+    ** sqlite3_wal_checkpoint() call, but it happens very rarely.\n+    ** https:\/\/sqlite.org\/forum\/forumpost\/fd0f19d229156939\n+    *\/\n+    sqlite3_exec(db, \"PRAGMA table_list\",0,0,0);\n+  }\n@@ -62980,1 +64268,3 @@\n-  szFrame = pWal->hdr.szPage + WAL_FRAME_HDRSIZE;\n+  assert( (pWal->szPage & (pWal->szPage-1))==0 );\n+  assert( pWal->szPage>=512 && pWal->szPage<=65536 );\n+  szFrame = pWal->szPage + WAL_FRAME_HDRSIZE;\n@@ -62994,1 +64284,1 @@\n-  for(iOffset=walFrameOffset(pWal->hdr.mxFrame+1, pWal->hdr.szPage);\n+  for(iOffset=walFrameOffset(pWal->hdr.mxFrame+1, pWal->szPage);\n@@ -64845,1 +66135,3 @@\n-  u8 *aDataEnd;        \/* One byte past the end of usable data *\/\n+  u8 *aDataEnd;        \/* One byte past the end of the entire page - not just\n+                       ** the usable space, the entire page.  Used to prevent\n+                       ** corruption-induced buffer overflow. *\/\n@@ -65150,1 +66442,1 @@\n-# define PENDING_BYTE_PAGE(pBt) PAGER_MJ_PGNO(pBt)\n+#define PENDING_BYTE_PAGE(pBt)  ((Pgno)((PENDING_BYTE\/((pBt)->pageSize))+1))\n@@ -65791,1 +67083,1 @@\n-      if( pIdx->tnum==(int)iRoot ){\n+      if( pIdx->tnum==iRoot ){\n@@ -66384,1 +67676,1 @@\n-** record and then call BtreeMovetoUnpacked() to do the work.\n+** record and then call sqlite3BtreeIndexMoveto() to do the work.\n@@ -66802,1 +68094,2 @@\n-  ** The code is inlined to avoid a function call.\n+  ** The code is inlined and the loop is unrolled for performance.\n+  ** This routine is a high-runner.\n@@ -66806,8 +68099,21 @@\n-    u8 *pEnd = &pIter[7];\n-    iKey &= 0x7f;\n-    while(1){\n-      iKey = (iKey<<7) | (*++pIter & 0x7f);\n-      if( (*pIter)<0x80 ) break;\n-      if( pIter>=pEnd ){\n-        iKey = (iKey<<8) | *++pIter;\n-        break;\n+    u8 x;\n+    iKey = ((iKey&0x7f)<<7) | ((x = *++pIter) & 0x7f);\n+    if( x>=0x80 ){\n+      iKey = (iKey<<7) | ((x =*++pIter) & 0x7f);\n+      if( x>=0x80 ){\n+        iKey = (iKey<<7) | ((x = *++pIter) & 0x7f);\n+        if( x>=0x80 ){\n+          iKey = (iKey<<7) | ((x = *++pIter) & 0x7f);\n+          if( x>=0x80 ){\n+            iKey = (iKey<<7) | ((x = *++pIter) & 0x7f);\n+            if( x>=0x80 ){\n+              iKey = (iKey<<7) | ((x = *++pIter) & 0x7f);\n+              if( x>=0x80 ){\n+                iKey = (iKey<<7) | ((x = *++pIter) & 0x7f);\n+                if( x>=0x80 ){\n+                  iKey = (iKey<<8) | (*++pIter);\n+                }\n+              }\n+            }\n+          }\n+        }\n@@ -66890,0 +68196,1 @@\n+** cellSizePtrTableLeaf()    =>   table leaf nodes\n@@ -66915,7 +68222,0 @@\n-  if( pPage->intKey ){\n-    \/* pIter now points at the 64-bit integer key value, a variable length\n-    ** integer. The following block moves pIter to point at the first byte\n-    ** past the end of the key value. *\/\n-    pEnd = &pIter[9];\n-    while( (*pIter++)&0x80 && pIter<pEnd );\n-  }\n@@ -66961,0 +68261,52 @@\n+static u16 cellSizePtrTableLeaf(MemPage *pPage, u8 *pCell){\n+  u8 *pIter = pCell;   \/* For looping over bytes of pCell *\/\n+  u8 *pEnd;            \/* End mark for a varint *\/\n+  u32 nSize;           \/* Size value to return *\/\n+\n+#ifdef SQLITE_DEBUG\n+  \/* The value returned by this function should always be the same as\n+  ** the (CellInfo.nSize) value found by doing a full parse of the\n+  ** cell. If SQLITE_DEBUG is defined, an assert() at the bottom of\n+  ** this function verifies that this invariant is not violated. *\/\n+  CellInfo debuginfo;\n+  pPage->xParseCell(pPage, pCell, &debuginfo);\n+#endif\n+\n+  nSize = *pIter;\n+  if( nSize>=0x80 ){\n+    pEnd = &pIter[8];\n+    nSize &= 0x7f;\n+    do{\n+      nSize = (nSize<<7) | (*++pIter & 0x7f);\n+    }while( *(pIter)>=0x80 && pIter<pEnd );\n+  }\n+  pIter++;\n+  \/* pIter now points at the 64-bit integer key value, a variable length\n+  ** integer. The following block moves pIter to point at the first byte\n+  ** past the end of the key value. *\/\n+  if( (*pIter++)&0x80\n+   && (*pIter++)&0x80\n+   && (*pIter++)&0x80\n+   && (*pIter++)&0x80\n+   && (*pIter++)&0x80\n+   && (*pIter++)&0x80\n+   && (*pIter++)&0x80\n+   && (*pIter++)&0x80 ){ pIter++; }\n+  testcase( nSize==pPage->maxLocal );\n+  testcase( nSize==(u32)pPage->maxLocal+1 );\n+  if( nSize<=pPage->maxLocal ){\n+    nSize += (u32)(pIter - pCell);\n+    if( nSize<4 ) nSize = 4;\n+  }else{\n+    int minLocal = pPage->minLocal;\n+    nSize = minLocal + (nSize - minLocal) % (pPage->pBt->usableSize - 4);\n+    testcase( nSize==pPage->maxLocal );\n+    testcase( nSize==(u32)pPage->maxLocal+1 );\n+    if( nSize>pPage->maxLocal ){\n+      nSize = minLocal;\n+    }\n+    nSize += 4 + (u16)(pIter - pCell);\n+  }\n+  assert( nSize==debuginfo.nSize || CORRUPT_DB );\n+  return (u16)nSize;\n+}\n@@ -66974,1 +68326,1 @@\n-** of pPage.  (pSrc and pPager are often the same.)  If pCell contains a\n+** of pPage.  (pSrc and pPage are often the same.)  If pCell contains a\n@@ -67065,1 +68417,1 @@\n-        }else if( NEVER(iFree+sz>usableSize) ){\n+        }else if( iFree+sz>usableSize ){\n@@ -67149,1 +68501,2 @@\n-  int pc = get2byte(&aData[iAddr]);          \/* Address of a free slot *\/\n+  u8 *pTmp = &aData[iAddr];                  \/* Temporary ptr into aData[] *\/\n+  int pc = get2byte(pTmp);                   \/* Address of a free slot *\/\n@@ -67159,1 +68512,2 @@\n-    size = get2byte(&aData[pc+2]);\n+    pTmp = &aData[pc+2];\n+    size = get2byte(pTmp);\n@@ -67172,0 +68526,2 @@\n+        testcase( pc+x>maxPC );\n+        return &aData[pc];\n@@ -67184,1 +68540,2 @@\n-    pc = get2byte(&aData[pc]);\n+    pTmp = &aData[pc];\n+    pc = get2byte(pTmp);\n@@ -67218,0 +68575,1 @@\n+  u8 *pTmp;                            \/* Temp ptr into data[] *\/\n@@ -67236,1 +68594,2 @@\n-  top = get2byte(&data[hdr+5]);\n+  pTmp = &data[hdr+5];\n+  top = get2byte(pTmp);\n@@ -67318,0 +68677,1 @@\n+  u8 *pTmp;                             \/* Temporary ptr into data[] *\/\n@@ -67345,1 +68705,1 @@\n-    assert( iFreeBlk>iPtr || iFreeBlk==0 );\n+    assert( iFreeBlk>iPtr || iFreeBlk==0 || CORRUPT_DB );\n@@ -67380,1 +68740,2 @@\n-  x = get2byte(&data[hdr+5]);\n+  pTmp = &data[hdr+5];\n+  x = get2byte(pTmp);\n@@ -67424,1 +68785,0 @@\n-  pPage->xCellSize = cellSizePtr;\n@@ -67436,0 +68796,1 @@\n+      pPage->xCellSize = cellSizePtrTableLeaf;\n@@ -67453,0 +68814,1 @@\n+    pPage->xCellSize = cellSizePtr;\n@@ -67459,0 +68821,4 @@\n+    pPage->intKey = 0;\n+    pPage->intKeyLeaf = 0;\n+    pPage->xCellSize = cellSizePtr;\n+    pPage->xParseCell = btreeParseCellPtrIndex;\n@@ -67616,1 +68982,1 @@\n-  pPage->aDataEnd = pPage->aData + pBt->usableSize;\n+  pPage->aDataEnd = pPage->aData + pBt->pageSize;\n@@ -67651,1 +69017,1 @@\n-  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno );\n+  assert( sqlite3PagerPagenumber(pPage->pDbPage)==pPage->pgno || CORRUPT_DB );\n@@ -67667,1 +69033,1 @@\n-  pPage->aDataEnd = &data[pBt->usableSize];\n+  pPage->aDataEnd = &data[pBt->pageSize];\n@@ -67793,1 +69159,1 @@\n-  assert( (*ppPage)->pgno==pgno );\n+  assert( (*ppPage)->pgno==pgno || CORRUPT_DB );\n@@ -67812,1 +69178,3 @@\n-  assert( pgno!=0 || rc==SQLITE_CORRUPT );\n+  assert( pgno!=0 || rc==SQLITE_CORRUPT\n+                  || rc==SQLITE_IOERR_NOMEM\n+                  || rc==SQLITE_NOMEM );\n@@ -68270,23 +69638,12 @@\n-static void allocateTempSpace(BtShared *pBt){\n-  if( !pBt->pTmpSpace ){\n-    pBt->pTmpSpace = sqlite3PageMalloc( pBt->pageSize );\n-\n-    \/* One of the uses of pBt->pTmpSpace is to format cells before\n-    ** inserting them into a leaf page (function fillInCell()). If\n-    ** a cell is less than 4 bytes in size, it is rounded up to 4 bytes\n-    ** by the various routines that manipulate binary cells. Which\n-    ** can mean that fillInCell() only initializes the first 2 or 3\n-    ** bytes of pTmpSpace, but that the first 4 bytes are copied from\n-    ** it into a database page. This is not actually a problem, but it\n-    ** does cause a valgrind error when the 1 or 2 bytes of unitialized\n-    ** data is passed to system call write(). So to avoid this error,\n-    ** zero the first 4 bytes of temp space here.\n-    **\n-    ** Also:  Provide four bytes of initialized space before the\n-    ** beginning of pTmpSpace as an area available to prepend the\n-    ** left-child pointer to the beginning of a cell.\n-    *\/\n-    if( pBt->pTmpSpace ){\n-      memset(pBt->pTmpSpace, 0, 8);\n-      pBt->pTmpSpace += 4;\n-    }\n+static SQLITE_NOINLINE int allocateTempSpace(BtShared *pBt){\n+  assert( pBt!=0 );\n+  assert( pBt->pTmpSpace==0 );\n+  \/* This routine is called only by btreeCursor() when allocating the\n+  ** first write cursor for the BtShared object *\/\n+  assert( pBt->pCursor!=0 && (pBt->pCursor->curFlags & BTCF_WriteFlag)!=0 );\n+  pBt->pTmpSpace = sqlite3PageMalloc( pBt->pageSize );\n+  if( pBt->pTmpSpace==0 ){\n+    BtCursor *pCur = pBt->pCursor;\n+    pBt->pCursor = pCur->pNext;  \/* Unlink the cursor *\/\n+    memset(pCur, 0, sizeof(*pCur));\n+    return SQLITE_NOMEM_BKPT;\n@@ -68294,0 +69651,19 @@\n+\n+  \/* One of the uses of pBt->pTmpSpace is to format cells before\n+  ** inserting them into a leaf page (function fillInCell()). If\n+  ** a cell is less than 4 bytes in size, it is rounded up to 4 bytes\n+  ** by the various routines that manipulate binary cells. Which\n+  ** can mean that fillInCell() only initializes the first 2 or 3\n+  ** bytes of pTmpSpace, but that the first 4 bytes are copied from\n+  ** it into a database page. This is not actually a problem, but it\n+  ** does cause a valgrind error when the 1 or 2 bytes of unitialized\n+  ** data is passed to system call write(). So to avoid this error,\n+  ** zero the first 4 bytes of temp space here.\n+  **\n+  ** Also:  Provide four bytes of initialized space before the\n+  ** beginning of pTmpSpace as an area available to prepend the\n+  ** left-child pointer to the beginning of a cell.\n+  *\/\n+  memset(pBt->pTmpSpace, 0, 8);\n+  pBt->pTmpSpace += 4;\n+  return SQLITE_OK;\n@@ -68790,3 +70166,7 @@\n-    if( sqlite3WritableSchema(pBt->db)==0 && nPage>nPageFile ){\n-      rc = SQLITE_CORRUPT_BKPT;\n-      goto page1_init_failed;\n+    if( nPage>nPageFile ){\n+      if( sqlite3WritableSchema(pBt->db)==0 ){\n+        rc = SQLITE_CORRUPT_BKPT;\n+        goto page1_init_failed;\n+      }else{\n+        nPage = nPageFile;\n+      }\n@@ -69422,0 +70802,1 @@\n+        Pgno dbSize = btreePagecount(pBt);\n@@ -69428,0 +70809,4 @@\n+        if( iFreePg>dbSize ){\n+          releasePage(pLastPg);\n+          return SQLITE_CORRUPT_BKPT;\n+        }\n@@ -70034,4 +71419,0 @@\n-  if( wrFlag ){\n-    allocateTempSpace(pBt);\n-    if( pBt->pTmpSpace==0 ) return SQLITE_NOMEM_BKPT;\n-  }\n@@ -70054,2 +71435,1 @@\n-  pCur->curFlags = wrFlag ? BTCF_WriteFlag : 0;\n-  pCur->curPagerFlags = wrFlag ? 0 : PAGER_GET_READONLY;\n+  pCur->curFlags = 0;\n@@ -70061,1 +71441,1 @@\n-      pCur->curFlags |= BTCF_Multiple;\n+      pCur->curFlags = BTCF_Multiple;\n@@ -70064,0 +71444,1 @@\n+  pCur->eState = CURSOR_INVALID;\n@@ -70066,1 +71447,7 @@\n-  pCur->eState = CURSOR_INVALID;\n+  if( wrFlag ){\n+    pCur->curFlags |= BTCF_WriteFlag;\n+    pCur->curPagerFlags = 0;\n+    if( pBt->pTmpSpace==0 ) return allocateTempSpace(pBt);\n+  }else{\n+    pCur->curPagerFlags = PAGER_GET_READONLY;\n+  }\n@@ -70841,1 +72228,1 @@\n-      pCur->pPage = pCur->apPage[0];\n+      pRoot = pCur->pPage = pCur->apPage[0];\n@@ -70866,1 +72253,1 @@\n-  assert( pRoot->pgno==pCur->pgnoRoot );\n+  assert( pRoot->pgno==pCur->pgnoRoot || CORRUPT_DB );\n@@ -70888,1 +72275,0 @@\n-  pRoot = pCur->pPage;\n@@ -71129,1 +72515,0 @@\n-    pCur->ix = (u16)idx;\n@@ -71189,0 +72574,63 @@\n+\/*\n+** Compare the \"idx\"-th cell on the page the cursor pCur is currently\n+** pointing to to pIdxKey using xRecordCompare.  Return negative or\n+** zero if the cell is less than or equal pIdxKey.  Return positive\n+** if unknown.\n+**\n+**    Return value negative:     Cell at pCur[idx] less than pIdxKey\n+**\n+**    Return value is zero:      Cell at pCur[idx] equals pIdxKey\n+**\n+**    Return value positive:     Nothing is known about the relationship\n+**                               of the cell at pCur[idx] and pIdxKey.\n+**\n+** This routine is part of an optimization.  It is always safe to return\n+** a positive value as that will cause the optimization to be skipped.\n+*\/\n+static int indexCellCompare(\n+  BtCursor *pCur,\n+  int idx,\n+  UnpackedRecord *pIdxKey,\n+  RecordCompare xRecordCompare\n+){\n+  MemPage *pPage = pCur->pPage;\n+  int c;\n+  int nCell;  \/* Size of the pCell cell in bytes *\/\n+  u8 *pCell = findCellPastPtr(pPage, idx);\n+\n+  nCell = pCell[0];\n+  if( nCell<=pPage->max1bytePayload ){\n+    \/* This branch runs if the record-size field of the cell is a\n+    ** single byte varint and the record fits entirely on the main\n+    ** b-tree page.  *\/\n+    testcase( pCell+nCell+1==pPage->aDataEnd );\n+    c = xRecordCompare(nCell, (void*)&pCell[1], pIdxKey);\n+  }else if( !(pCell[1] & 0x80)\n+    && (nCell = ((nCell&0x7f)<<7) + pCell[1])<=pPage->maxLocal\n+  ){\n+    \/* The record-size field is a 2 byte varint and the record\n+    ** fits entirely on the main b-tree page.  *\/\n+    testcase( pCell+nCell+2==pPage->aDataEnd );\n+    c = xRecordCompare(nCell, (void*)&pCell[2], pIdxKey);\n+  }else{\n+    \/* If the record extends into overflow pages, do not attempt\n+    ** the optimization. *\/\n+    c = 99;\n+  }\n+  return c;\n+}\n+\n+\/*\n+** Return true (non-zero) if pCur is current pointing to the last\n+** page of a table.\n+*\/\n+static int cursorOnLastPage(BtCursor *pCur){\n+  int i;\n+  assert( pCur->eState==CURSOR_VALID );\n+  for(i=0; i<pCur->iPage; i++){\n+    MemPage *pPage = pCur->apPage[i];\n+    if( pCur->aiIdx[i]<pPage->nCell ) return 0;\n+  }\n+  return 1;\n+}\n+\n@@ -71239,0 +72687,37 @@\n+\n+  \/* Check to see if we can skip a lot of work.  Two cases:\n+  **\n+  **    (1) If the cursor is already pointing to the very last cell\n+  **        in the table and the pIdxKey search key is greater than or\n+  **        equal to that last cell, then no movement is required.\n+  **\n+  **    (2) If the cursor is on the last page of the table and the first\n+  **        cell on that last page is less than or equal to the pIdxKey\n+  **        search key, then we can start the search on the current page\n+  **        without needing to go back to root.\n+  *\/\n+  if( pCur->eState==CURSOR_VALID\n+   && pCur->pPage->leaf\n+   && cursorOnLastPage(pCur)\n+  ){\n+    int c;\n+    if( pCur->ix==pCur->pPage->nCell-1\n+     && (c = indexCellCompare(pCur, pCur->ix, pIdxKey, xRecordCompare))<=0\n+     && pIdxKey->errCode==SQLITE_OK\n+    ){\n+      *pRes = c;\n+      return SQLITE_OK;  \/* Cursor already pointing at the correct spot *\/\n+    }\n+    if( pCur->iPage>0\n+     && indexCellCompare(pCur, 0, pIdxKey, xRecordCompare)<=0\n+     && pIdxKey->errCode==SQLITE_OK\n+    ){\n+      pCur->curFlags &= ~BTCF_ValidOvfl;\n+      if( !pCur->pPage->isInit ){\n+        return SQLITE_CORRUPT_BKPT;\n+      }\n+      goto bypass_moveto_root;  \/* Start search on the current page *\/\n+    }\n+    pIdxKey->errCode = SQLITE_OK;\n+  }\n+\n@@ -71248,0 +72733,2 @@\n+\n+bypass_moveto_root:\n@@ -71252,2 +72739,2 @@\n-  assert( pCur->iPage==0 || pCur->apPage[0]->intKey==pCur->curIntKey );\n-  assert( pCur->curIntKey || pIdxKey );\n+  assert( pCur->curIntKey==0 );\n+  assert( pIdxKey!=0 );\n@@ -71267,1 +72754,1 @@\n-    assert( pPage->intKey==(pIdxKey==0) );\n+    assert( pPage->intKey==0 );\n@@ -71271,1 +72758,0 @@\n-    pCur->ix = (u16)idx;\n@@ -71360,1 +72846,1 @@\n-      assert( pCur->ix<pCur->pPage->nCell );\n+      assert( pCur->ix<pCur->pPage->nCell || CORRUPT_DB );\n@@ -71963,1 +73449,1 @@\n-  if( NEVER(iPage<2) || iPage>pBt->nPage ){\n+  if( iPage<2 || iPage>pBt->nPage ){\n@@ -72395,1 +73881,1 @@\n-  assert( pPage->pBt->usableSize > (int)(ptr-data) );\n+  assert( pPage->pBt->usableSize > (u32)(ptr-data) );\n@@ -72398,0 +73884,6 @@\n+#if 0  \/* Not required.  Omit for efficiency *\/\n+  if( pc<hdr+pPage->nCell*2 ){\n+    *pRC = SQLITE_CORRUPT_BKPT;\n+    return;\n+  }\n+#endif\n@@ -73281,2 +74773,0 @@\n-  Pgno aPgOrder[NB+2];         \/* Copy of aPgno[] used for sorting pages *\/\n-  u16 aPgFlags[NB+2];          \/* flags field of new pages before shuffling *\/\n@@ -73706,2 +75196,2 @@\n-  ** An O(n^2) insertion sort algorithm is used, but since n is never more\n-  ** than (NB+2) (a small constant), that should not be a problem.\n+  ** An O(N*N) sort algorithm is used, but since N is never more than NB+2\n+  ** (5), that is not a performance concern.\n@@ -73713,15 +75203,3 @@\n-    aPgOrder[i] = aPgno[i] = apNew[i]->pgno;\n-    aPgFlags[i] = apNew[i]->pDbPage->flags;\n-    for(j=0; j<i; j++){\n-      if( NEVER(aPgno[j]==aPgno[i]) ){\n-        \/* This branch is taken if the set of sibling pages somehow contains\n-        ** duplicate entries. This can happen if the database is corrupt.\n-        ** It would be simpler to detect this as part of the loop below, but\n-        ** we do the detection here in order to avoid populating the pager\n-        ** cache with two separate objects associated with the same\n-        ** page number.  *\/\n-        assert( CORRUPT_DB );\n-        rc = SQLITE_CORRUPT_BKPT;\n-        goto balance_cleanup;\n-      }\n-    }\n+    aPgno[i] = apNew[i]->pgno;\n+    assert( apNew[i]->pDbPage->flags & PGHDR_WRITEABLE );\n+    assert( apNew[i]->pDbPage->flags & PGHDR_DIRTY );\n@@ -73729,4 +75207,4 @@\n-  for(i=0; i<nNew; i++){\n-    int iBest = 0;                \/* aPgno[] index of page number to use *\/\n-    for(j=1; j<nNew; j++){\n-      if( aPgOrder[j]<aPgOrder[iBest] ) iBest = j;\n+  for(i=0; i<nNew-1; i++){\n+    int iB = i;\n+    for(j=i+1; j<nNew; j++){\n+      if( apNew[j]->pgno < apNew[iB]->pgno ) iB = j;\n@@ -73734,8 +75212,17 @@\n-    pgno = aPgOrder[iBest];\n-    aPgOrder[iBest] = 0xffffffff;\n-    if( iBest!=i ){\n-      if( iBest>i ){\n-        sqlite3PagerRekey(apNew[iBest]->pDbPage, pBt->nPage+iBest+1, 0);\n-      }\n-      sqlite3PagerRekey(apNew[i]->pDbPage, pgno, aPgFlags[iBest]);\n-      apNew[i]->pgno = pgno;\n+\n+    \/* If apNew[i] has a page number that is bigger than any of the\n+    ** subsequence apNew[i] entries, then swap apNew[i] with the subsequent\n+    ** entry that has the smallest page number (which we know to be\n+    ** entry apNew[iB]).\n+    *\/\n+    if( iB!=i ){\n+      Pgno pgnoA = apNew[i]->pgno;\n+      Pgno pgnoB = apNew[iB]->pgno;\n+      Pgno pgnoTemp = (PENDING_BYTE\/pBt->pageSize)+1;\n+      u16 fgA = apNew[i]->pDbPage->flags;\n+      u16 fgB = apNew[iB]->pDbPage->flags;\n+      sqlite3PagerRekey(apNew[i]->pDbPage, pgnoTemp, fgB);\n+      sqlite3PagerRekey(apNew[iB]->pDbPage, pgnoA, fgA);\n+      sqlite3PagerRekey(apNew[i]->pDbPage, pgnoB, fgB);\n+      apNew[i]->pgno = pgnoB;\n+      apNew[iB]->pgno = pgnoA;\n@@ -73878,1 +75365,1 @@\n-    for(k=0; b.ixNx[k]<=i && ALWAYS(k<NB*2); k++){}\n+    for(k=0; b.ixNx[k]<=j && ALWAYS(k<NB*2); k++){}\n@@ -74129,1 +75616,0 @@\n-  const int nMin = pCur->pBt->usableSize * 2 \/ 3;\n@@ -74141,1 +75627,5 @@\n-    if( pPage->nOverflow==0 && pPage->nFree<=nMin ){\n+    if( pPage->nOverflow==0 && pPage->nFree*3<=(int)pCur->pBt->usableSize*2 ){\n+      \/* No rebalance required as long as:\n+      **   (1) There are no overflow cells\n+      **   (2) The amount of free space on the page is less than 2\/3rds of\n+      **       the total usable space on the page. *\/\n@@ -74361,1 +75851,1 @@\n-** MovetoUnpacked() to seek cursor pCur to (pKey,nKey) has already\n+** sqlite3BtreeIndexMoveto() to seek cursor pCur to (pKey,nKey) has already\n@@ -74379,1 +75869,1 @@\n-  int seekResult                 \/* Result of prior MovetoUnpacked() call *\/\n+  int seekResult                 \/* Result of prior IndexMoveto() call *\/\n@@ -74394,18 +75884,0 @@\n-  if( pCur->eState==CURSOR_FAULT ){\n-    assert( pCur->skipNext!=SQLITE_OK );\n-    return pCur->skipNext;\n-  }\n-\n-  assert( cursorOwnsBtShared(pCur) );\n-  assert( (pCur->curFlags & BTCF_WriteFlag)!=0\n-              && pBt->inTransaction==TRANS_WRITE\n-              && (pBt->btsFlags & BTS_READ_ONLY)==0 );\n-  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );\n-\n-  \/* Assert that the caller has been consistent. If this cursor was opened\n-  ** expecting an index b-tree, then the caller should be inserting blob\n-  ** keys with no associated data. If the cursor was opened expecting an\n-  ** intkey table, the caller should be inserting integer keys with a\n-  ** blob of associated data.  *\/\n-  assert( (flags & BTREE_PREFORMAT) || (pX->pKey==0)==(pCur->pKeyInfo==0) );\n-\n@@ -74436,0 +75908,23 @@\n+  \/* Ensure that the cursor is not in the CURSOR_FAULT state and that it\n+  ** points to a valid cell.\n+  *\/\n+  if( pCur->eState>=CURSOR_REQUIRESEEK ){\n+    testcase( pCur->eState==CURSOR_REQUIRESEEK );\n+    testcase( pCur->eState==CURSOR_FAULT );\n+    rc = moveToRoot(pCur);\n+    if( rc && rc!=SQLITE_EMPTY ) return rc;\n+  }\n+\n+  assert( cursorOwnsBtShared(pCur) );\n+  assert( (pCur->curFlags & BTCF_WriteFlag)!=0\n+              && pBt->inTransaction==TRANS_WRITE\n+              && (pBt->btsFlags & BTS_READ_ONLY)==0 );\n+  assert( hasSharedCacheTableLock(p, pCur->pgnoRoot, pCur->pKeyInfo!=0, 2) );\n+\n+  \/* Assert that the caller has been consistent. If this cursor was opened\n+  ** expecting an index b-tree, then the caller should be inserting blob\n+  ** keys with no associated data. If the cursor was opened expecting an\n+  ** intkey table, the caller should be inserting integer keys with a\n+  ** blob of associated data.  *\/\n+  assert( (flags & BTREE_PREFORMAT) || (pX->pKey==0)==(pCur->pKeyInfo==0) );\n+\n@@ -74524,2 +76019,1 @@\n-       || (pCur->eState==CURSOR_INVALID && loc)\n-       || CORRUPT_DB );\n+       || (pCur->eState==CURSOR_INVALID && loc) );\n@@ -74532,0 +76026,1 @@\n+     \/* ^^^^^--- due to the moveToRoot() call above *\/\n@@ -74542,1 +76037,1 @@\n-  assert( pPage->isInit );\n+  assert( pPage->isInit || CORRUPT_DB );\n@@ -74693,1 +76188,5 @@\n-  aOut += putVarint32(aOut, pSrc->info.nPayload);\n+  if( pSrc->info.nPayload<0x80 ){\n+    *(aOut++) = pSrc->info.nPayload;\n+  }else{\n+    aOut += sqlite3PutVarint(aOut, pSrc->info.nPayload);\n+  }\n@@ -74797,8 +76296,7 @@\n-  int rc;                              \/* Return code *\/\n-  MemPage *pPage;                      \/* Page to delete cell from *\/\n-  unsigned char *pCell;                \/* Pointer to cell to delete *\/\n-  int iCellIdx;                        \/* Index of cell to delete *\/\n-  int iCellDepth;                      \/* Depth of node containing pCell *\/\n-  CellInfo info;                       \/* Size of the cell being deleted *\/\n-  int bSkipnext = 0;                   \/* Leaf cursor in SKIPNEXT state *\/\n-  u8 bPreserve = flags & BTREE_SAVEPOSITION;  \/* Keep cursor valid *\/\n+  int rc;                    \/* Return code *\/\n+  MemPage *pPage;            \/* Page to delete cell from *\/\n+  unsigned char *pCell;      \/* Pointer to cell to delete *\/\n+  int iCellIdx;              \/* Index of cell to delete *\/\n+  int iCellDepth;            \/* Depth of node containing pCell *\/\n+  CellInfo info;             \/* Size of the cell being deleted *\/\n+  u8 bPreserve;              \/* Keep cursor valid.  2 for CURSOR_SKIPNEXT *\/\n@@ -74813,4 +76311,8 @@\n-  if( pCur->eState==CURSOR_REQUIRESEEK ){\n-    rc = btreeRestoreCursorPosition(pCur);\n-    assert( rc!=SQLITE_OK || CORRUPT_DB || pCur->eState==CURSOR_VALID );\n-    if( rc || pCur->eState!=CURSOR_VALID ) return rc;\n+  if( pCur->eState!=CURSOR_VALID ){\n+    if( pCur->eState>=CURSOR_REQUIRESEEK ){\n+      rc = btreeRestoreCursorPosition(pCur);\n+      assert( rc!=SQLITE_OK || CORRUPT_DB || pCur->eState==CURSOR_VALID );\n+      if( rc || pCur->eState!=CURSOR_VALID ) return rc;\n+    }else{\n+      return SQLITE_CORRUPT_BKPT;\n+    }\n@@ -74818,1 +76320,1 @@\n-  assert( CORRUPT_DB || pCur->eState==CURSOR_VALID );\n+  assert( pCur->eState==CURSOR_VALID );\n@@ -74823,2 +76325,1 @@\n-  pCell = findCell(pPage, iCellIdx);\n-  if( pPage->nFree<0 && btreeComputeFreeSpace(pPage) ){\n+  if( pPage->nCell<=iCellIdx ){\n@@ -74827,1 +76328,2 @@\n-  if( pPage->nCell<=iCellIdx ){\n+  pCell = findCell(pPage, iCellIdx);\n+  if( pPage->nFree<0 && btreeComputeFreeSpace(pPage) ){\n@@ -74831,1 +76333,1 @@\n-  \/* If the bPreserve flag is set to true, then the cursor position must\n+  \/* If the BTREE_SAVEPOSITION bit is on, then the cursor position must\n@@ -74837,1 +76339,1 @@\n-  ** Or, if the current delete will not cause a rebalance, then the cursor\n+  ** If the current delete will not cause a rebalance, then the cursor\n@@ -74839,1 +76341,9 @@\n-  ** before or after the deleted entry. In this case set bSkipnext to true.  *\/\n+  ** before or after the deleted entry.\n+  **\n+  ** The bPreserve value records which path is required:\n+  **\n+  **    bPreserve==0         Not necessary to save the cursor position\n+  **    bPreserve==1         Use CURSOR_REQUIRESEEK to save the cursor position\n+  **    bPreserve==2         Cursor won't move.  Set CURSOR_SKIPNEXT.\n+  *\/\n+  bPreserve = (flags & BTREE_SAVEPOSITION)!=0;\n@@ -74842,1 +76352,2 @@\n-     || (pPage->nFree+cellSizePtr(pPage,pCell)+2)>(int)(pBt->usableSize*2\/3)\n+     || (pPage->nFree+pPage->xCellSize(pPage,pCell)+2) >\n+                                                   (int)(pBt->usableSize*2\/3)\n@@ -74850,1 +76361,1 @@\n-      bSkipnext = 1;\n+      bPreserve = 2;\n@@ -74938,1 +76449,9 @@\n-  rc = balance(pCur);\n+  assert( pCur->pPage->nOverflow==0 );\n+  assert( pCur->pPage->nFree>=0 );\n+  if( pCur->pPage->nFree*3<=(int)pCur->pBt->usableSize*2 ){\n+    \/* Optimization: If the free space is less than 2\/3rds of the page,\n+    ** then balance() will always be a no-op.  No need to invoke it. *\/\n+    rc = SQLITE_OK;\n+  }else{\n+    rc = balance(pCur);\n+  }\n@@ -74950,2 +76469,2 @@\n-    if( bSkipnext ){\n-      assert( bPreserve && (pCur->iPage==iCellDepth || CORRUPT_DB) );\n+    if( bPreserve>1 ){\n+      assert( (pCur->iPage==iCellDepth || CORRUPT_DB) );\n@@ -75161,1 +76680,1 @@\n-   && sqlite3PagerPageRefcount(pPage->pDbPage)!=1\n+   && sqlite3PagerPageRefcount(pPage->pDbPage) != (1 + (pgno==1))\n@@ -76541,2 +78060,1 @@\n-    memset(&sParse, 0, sizeof(sParse));\n-    sParse.db = pDb;\n+    sqlite3ParseObjectInit(&sParse,pDb);\n@@ -76548,1 +78066,1 @@\n-    sqlite3ParserReset(&sParse);\n+    sqlite3ParseObjectReset(&sParse);\n@@ -77434,1 +78952,5 @@\n-  if( !(pMem->flags&MEM_Str) || pMem->enc==desiredEnc ){\n+  if( !(pMem->flags&MEM_Str) ){\n+    pMem->enc = desiredEnc;\n+    return SQLITE_OK;\n+  }\n+  if( pMem->enc==desiredEnc ){\n@@ -77683,0 +79205,1 @@\n+  assert( pMem->db!=0 );\n@@ -77685,1 +79208,1 @@\n-  assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );\n+  assert( sqlite3_mutex_held(pMem->db->mutex) );\n@@ -77693,0 +79216,1 @@\n+  ctx.enc = ENC(t.db);\n@@ -77714,1 +79238,2 @@\n-  assert( pAccum->db==0 || sqlite3_mutex_held(pAccum->db->mutex) );\n+  assert( pAccum->db!=0 );\n+  assert( sqlite3_mutex_held(pAccum->db->mutex) );\n@@ -77720,0 +79245,1 @@\n+  ctx.enc = ENC(pAccum->db);\n@@ -77785,0 +79311,8 @@\n+\/* Like sqlite3VdbeMemRelease() but faster for cases where we\n+** know in advance that the Mem is not MEM_Dyn or MEM_Agg.\n+*\/\n+SQLITE_PRIVATE void sqlite3VdbeMemReleaseMalloc(Mem *p){\n+  assert( !VdbeMemDynamic(p) );\n+  if( p->szMalloc ) vdbeMemClear(p);\n+}\n+\n@@ -77826,1 +79360,1 @@\n-static SQLITE_NOINLINE i64 memIntValue(Mem *pMem){\n+static SQLITE_NOINLINE i64 memIntValue(const Mem *pMem){\n@@ -77831,1 +79365,1 @@\n-SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){\n+SQLITE_PRIVATE i64 sqlite3VdbeIntValue(const Mem *pMem){\n@@ -78146,0 +79680,1 @@\n+  vdbeMemClear(pMem);\n@@ -78328,0 +79863,7 @@\n+**\n+** The \"enc\" parameter is the text encoding for the string, or zero\n+** to store a blob.\n+**\n+** If n is negative, then the string consists of all bytes up to but\n+** excluding the first zero character.  The n parameter must be\n+** non-negative for blobs.\n@@ -78338,1 +79880,1 @@\n-  u16 flags = 0;      \/* New value for pMem->flags *\/\n+  u16 flags;          \/* New value for pMem->flags *\/\n@@ -78343,0 +79885,1 @@\n+  assert( enc!=0 || n>=0 );\n@@ -78355,1 +79898,0 @@\n-  flags = (enc==0?MEM_Blob:MEM_Str);\n@@ -78363,1 +79905,17 @@\n-    flags |= MEM_Term;\n+    flags= MEM_Str|MEM_Term;\n+  }else if( enc==0 ){\n+    flags = MEM_Blob;\n+    enc = SQLITE_UTF8;\n+  }else{\n+    flags = MEM_Str;\n+  }\n+  if( nByte>iLimit ){\n+    if( xDel && xDel!=SQLITE_TRANSIENT ){\n+      if( xDel==SQLITE_DYNAMIC ){\n+        sqlite3DbFree(pMem->db, (void*)z);\n+      }else{\n+        xDel((void*)z);\n+      }\n+    }\n+    sqlite3VdbeMemSetNull(pMem);\n+    return sqlite3ErrorToParser(pMem->db, SQLITE_TOOBIG);\n@@ -78375,3 +79933,0 @@\n-    if( nByte>iLimit ){\n-      return sqlite3ErrorToParser(pMem->db, SQLITE_TOOBIG);\n-    }\n@@ -78399,10 +79954,1 @@\n-  if( enc ){\n-    pMem->enc = enc;\n-#ifdef SQLITE_ENABLE_SESSION\n-  }else if( pMem->db==0 ){\n-    pMem->enc = SQLITE_UTF8;\n-#endif\n-  }else{\n-    assert( pMem->db!=0 );\n-    pMem->enc = ENC(pMem->db);\n-  }\n+  pMem->enc = enc;\n@@ -78416,3 +79962,0 @@\n-  if( nByte>iLimit ){\n-    return sqlite3ErrorToParser(pMem->db, SQLITE_TOOBIG);\n-  }\n@@ -78696,1 +80239,2 @@\n-  assert( pCtx->pParse->rc==SQLITE_OK );\n+  testcase( pCtx->pParse->rc==SQLITE_ERROR );\n+  testcase( pCtx->pParse->rc==SQLITE_OK );\n@@ -78700,0 +80244,1 @@\n+  ctx.enc = ENC(db);\n@@ -78760,1 +80305,0 @@\n-#if defined(SQLITE_ENABLE_STAT4)\n@@ -78762,3 +80306,0 @@\n-#else\n-  if( NEVER(op==TK_REGISTER) ) op = pExpr->op2;\n-#endif\n@@ -78779,2 +80320,2 @@\n-      sqlite3VdbeMemCast(*ppVal, aff, SQLITE_UTF8);\n-      sqlite3ValueApplyAffinity(*ppVal, affinity, SQLITE_UTF8);\n+      sqlite3VdbeMemCast(*ppVal, aff, enc);\n+      sqlite3ValueApplyAffinity(*ppVal, affinity, enc);\n@@ -78879,1 +80420,1 @@\n-  if( pCtx==0 || pCtx->pParse->nErr==0 )\n+  if( pCtx==0 || NEVER(pCtx->pParse->nErr==0) )\n@@ -79214,1 +80755,1 @@\n-  p->iVdbeMagic = VDBE_MAGIC_INIT;\n+  assert( p->eVdbeState==VDBE_INIT_STATE );\n@@ -79359,1 +80900,1 @@\n-  assert( nOp<=(1024\/sizeof(Op)) );\n+  assert( nOp<=(int)(1024\/sizeof(Op)) );\n@@ -79415,1 +80956,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_INIT );\n+  assert( p->eVdbeState==VDBE_INIT_STATE );\n@@ -79560,0 +81101,1 @@\n+  sqlite3MayAbort(pParse);\n@@ -79747,1 +81289,1 @@\n-  assert( v->iVdbeMagic==VDBE_MAGIC_INIT );\n+  assert( v->eVdbeState==VDBE_INIT_STATE );\n@@ -79767,1 +81309,1 @@\n-  p->runOnlyOnce = 1;\n+  sqlite3VdbeAddOp2(p, OP_Expire, 1, 1);\n@@ -79771,1 +81313,1 @@\n-** Mark the VDBE as one that can only be run multiple times.\n+** Mark the VDBE as one that can be run multiple times.\n@@ -79774,1 +81316,7 @@\n-  p->runOnlyOnce = 0;\n+  int i;\n+  for(i=1; ALWAYS(i<p->nOp); i++){\n+    if( ALWAYS(p->aOp[i].opcode==OP_Expire) ){\n+      p->aOp[1].opcode = OP_Noop;\n+      break;\n+    }\n+  }\n@@ -79878,0 +81426,2 @@\n+\n+  if( v==0 ) return 0;\n@@ -79887,0 +81437,1 @@\n+     || opcode==OP_Function || opcode==OP_PureFunc\n@@ -79961,1 +81512,1 @@\n-** (4) Initialize the p4.xAdvance pointer on opcodes that use it.\n+** (4) (discontinued)\n@@ -80007,19 +81558,0 @@\n-        case OP_Next:\n-        case OP_SorterNext: {\n-          pOp->p4.xAdvance = sqlite3BtreeNext;\n-          pOp->p4type = P4_ADVANCE;\n-          \/* The code generator never codes any of these opcodes as a jump\n-          ** to a label.  They are always coded as a jump backwards to a\n-          ** known address *\/\n-          assert( pOp->p2>=0 );\n-          break;\n-        }\n-        case OP_Prev: {\n-          pOp->p4.xAdvance = sqlite3BtreePrevious;\n-          pOp->p4type = P4_ADVANCE;\n-          \/* The code generator never codes any of these opcodes as a jump\n-          ** to a label.  They are always coded as a jump backwards to a\n-          ** known address *\/\n-          assert( pOp->p2>=0 );\n-          break;\n-        }\n@@ -80061,2 +81593,4 @@\n-  sqlite3DbFree(p->db, pParse->aLabel);\n-  pParse->aLabel = 0;\n+  if( aLabel ){\n+    sqlite3DbFreeNN(p->db, pParse->aLabel);\n+    pParse->aLabel = 0;\n+  }\n@@ -80068,0 +81602,84 @@\n+#ifdef SQLITE_DEBUG\n+\/*\n+** Check to see if a subroutine contains a jump to a location outside of\n+** the subroutine.  If a jump outside the subroutine is detected, add code\n+** that will cause the program to halt with an error message.\n+**\n+** The subroutine consists of opcodes between iFirst and iLast.  Jumps to\n+** locations within the subroutine are acceptable.  iRetReg is a register\n+** that contains the return address.  Jumps to outside the range of iFirst\n+** through iLast are also acceptable as long as the jump destination is\n+** an OP_Return to iReturnAddr.\n+**\n+** A jump to an unresolved label means that the jump destination will be\n+** beyond the current address.  That is normally a jump to an early\n+** termination and is consider acceptable.\n+**\n+** This routine only runs during debug builds.  The purpose is (of course)\n+** to detect invalid escapes out of a subroutine.  The OP_Halt opcode\n+** is generated rather than an assert() or other error, so that \".eqp full\"\n+** will still work to show the original bytecode, to aid in debugging.\n+*\/\n+SQLITE_PRIVATE void sqlite3VdbeNoJumpsOutsideSubrtn(\n+  Vdbe *v,          \/* The byte-code program under construction *\/\n+  int iFirst,       \/* First opcode of the subroutine *\/\n+  int iLast,        \/* Last opcode of the subroutine *\/\n+  int iRetReg       \/* Subroutine return address register *\/\n+){\n+  VdbeOp *pOp;\n+  Parse *pParse;\n+  int i;\n+  sqlite3_str *pErr = 0;\n+  assert( v!=0 );\n+  pParse = v->pParse;\n+  assert( pParse!=0 );\n+  if( pParse->nErr ) return;\n+  assert( iLast>=iFirst );\n+  assert( iLast<v->nOp );\n+  pOp = &v->aOp[iFirst];\n+  for(i=iFirst; i<=iLast; i++, pOp++){\n+    if( (sqlite3OpcodeProperty[pOp->opcode] & OPFLG_JUMP)!=0 ){\n+      int iDest = pOp->p2;   \/* Jump destination *\/\n+      if( iDest==0 ) continue;\n+      if( pOp->opcode==OP_Gosub ) continue;\n+      if( iDest<0 ){\n+        int j = ADDR(iDest);\n+        assert( j>=0 );\n+        if( j>=-pParse->nLabel || pParse->aLabel[j]<0 ){\n+          continue;\n+        }\n+        iDest = pParse->aLabel[j];\n+      }\n+      if( iDest<iFirst || iDest>iLast ){\n+        int j = iDest;\n+        for(; j<v->nOp; j++){\n+          VdbeOp *pX = &v->aOp[j];\n+          if( pX->opcode==OP_Return ){\n+            if( pX->p1==iRetReg ) break;\n+            continue;\n+          }\n+          if( pX->opcode==OP_Noop ) continue;\n+          if( pX->opcode==OP_Explain ) continue;\n+          if( pErr==0 ){\n+            pErr = sqlite3_str_new(0);\n+          }else{\n+            sqlite3_str_appendchar(pErr, 1, '\\n');\n+          }\n+          sqlite3_str_appendf(pErr,\n+              \"Opcode at %d jumps to %d which is outside the \"\n+              \"subroutine at %d..%d\",\n+              i, iDest, iFirst, iLast);\n+          break;\n+        }\n+      }\n+    }\n+  }\n+  if( pErr ){\n+    char *zErr = sqlite3_str_finish(pErr);\n+    sqlite3VdbeAddOp4(v, OP_Halt, SQLITE_INTERNAL, OE_Abort, 0, zErr, 0);\n+    sqlite3_free(zErr);\n+    sqlite3MayAbort(pParse);\n+  }\n+}\n+#endif \/* SQLITE_DEBUG *\/\n+\n@@ -80072,1 +81690,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_INIT );\n+  assert( p->eVdbeState==VDBE_INIT_STATE );\n@@ -80157,1 +81775,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_INIT );\n+  assert( p->eVdbeState==VDBE_INIT_STATE );\n@@ -80309,1 +81927,0 @@\n-    case P4_DYNBLOB:\n@@ -80349,0 +81966,1 @@\n+  assert( nOp>=0 );\n@@ -80350,2 +81968,2 @@\n-    Op *pOp;\n-    for(pOp=&aOp[nOp-1]; pOp>=aOp; pOp--){\n+    Op *pOp = &aOp[nOp-1];\n+    while(1){  \/* Exit via break *\/\n@@ -80356,0 +81974,2 @@\n+      if( pOp==aOp ) break;\n+      pOp--;\n@@ -80417,1 +82037,1 @@\n-  if( N==0 ) return;\n+  if( N==0 || OptimizationDisabled(pParse->db, SQLITE_ReleaseReg) ) return;\n@@ -80481,1 +82101,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_INIT );\n+  assert( p->eVdbeState==VDBE_INIT_STATE );\n@@ -80557,2 +82177,1 @@\n-  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed\n-          || p->pParse->nErr>0 );\n+  assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->pParse->nErr>0 );\n@@ -80610,1 +82229,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_INIT );\n+  assert( p->eVdbeState==VDBE_INIT_STATE );\n@@ -80677,2 +82296,5 @@\n-          sqlite3_str_appendall(&x, pOp->zComment);\n-          seenCom = 1;\n+          if( pOp->zComment && pOp->zComment[0] ){\n+            sqlite3_str_appendall(&x, pOp->zComment);\n+            seenCom = 1;\n+            break;\n+          }\n@@ -80907,4 +82529,0 @@\n-    case P4_DYNBLOB:\n-    case P4_ADVANCE: {\n-      break;\n-    }\n@@ -81042,0 +82660,12 @@\n+**\n+** This is a high-runner, so only those fields that really do need to\n+** be initialized are set.  The Mem structure is organized so that\n+** the fields that get initialized are nearby and hopefully on the same\n+** cache line.\n+**\n+**    Mem.flags = flags\n+**    Mem.db = db\n+**    Mem.szMalloc = 0\n+**\n+** All other fields of Mem can safely remain uninitialized for now.  They\n+** will be initialized before use.\n@@ -81044,4 +82674,5 @@\n-  while( (N--)>0 ){\n-    p->db = db;\n-    p->flags = flags;\n-    p->szMalloc = 0;\n+  if( N>0 ){\n+    do{\n+      p->flags = flags;\n+      p->db = db;\n+      p->szMalloc = 0;\n@@ -81049,1 +82680,1 @@\n-    p->pScopyFrom = 0;\n+      p->pScopyFrom = 0;\n@@ -81051,1 +82682,2 @@\n-    p++;\n+      p++;\n+    }while( (--N)>0 );\n@@ -81056,1 +82688,6 @@\n-** Release an array of N Mem elements\n+** Release auxiliary memory held in an array of N Mem elements.\n+**\n+** After this routine returns, all Mem elements in the array will still\n+** be valid.  Those Mem elements that were not holding auxiliary resources\n+** will be unchanged.  Mem elements which had something freed will be\n+** set to MEM_Undefined.\n@@ -81089,0 +82726,1 @@\n+        p->flags = MEM_Undefined;\n@@ -81092,0 +82730,1 @@\n+        p->flags = MEM_Undefined;\n@@ -81093,2 +82732,5 @@\n-\n-      p->flags = MEM_Undefined;\n+#ifdef SQLITE_DEBUG\n+      else{\n+        p->flags = MEM_Undefined;\n+      }\n+#endif\n@@ -81253,1 +82895,1 @@\n-    sqlite3VdbeFreeCursor(p->v, apCsr[i]);\n+    if( apCsr[i] ) sqlite3VdbeFreeCursorNN(p->v, apCsr[i]);\n@@ -81292,1 +82934,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_RUN );\n+  assert( p->eVdbeState==VDBE_RUN_STATE );\n@@ -81447,1 +83089,1 @@\n-  sqlite3_int64 nByte       \/* Bytes of memory needed *\/\n+  sqlite3_int64 nByte       \/* Bytes of memory needed. *\/\n@@ -81451,1 +83093,1 @@\n-    nByte = ROUND8(nByte);\n+    nByte = ROUND8P(nByte);\n@@ -81472,1 +83114,3 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_INIT || p->iVdbeMagic==VDBE_MAGIC_RESET );\n+  assert( p->eVdbeState==VDBE_INIT_STATE\n+       || p->eVdbeState==VDBE_READY_STATE\n+       || p->eVdbeState==VDBE_HALT_STATE );\n@@ -81478,2 +83122,1 @@\n-  \/* Set the magic to VDBE_MAGIC_RUN sooner rather than later. *\/\n-  p->iVdbeMagic = VDBE_MAGIC_RUN;\n+  p->eVdbeState = VDBE_READY_STATE;\n@@ -81535,1 +83178,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_INIT );\n+  assert( p->eVdbeState==VDBE_INIT_STATE );\n@@ -81558,1 +83201,1 @@\n-  n = ROUND8(sizeof(Op)*p->nOp);              \/* Bytes of opcode memory used *\/\n+  n = ROUND8P(sizeof(Op)*p->nOp);             \/* Bytes of opcode memory used *\/\n@@ -81646,5 +83289,3 @@\n-  if( pCx==0 ){\n-    return;\n-  }\n-  assert( pCx->pBtx==0 || pCx->eCurType==CURTYPE_BTREE );\n-  assert( pCx->pBtx==0 || pCx->isEphemeral );\n+  if( pCx ) sqlite3VdbeFreeCursorNN(p,pCx);\n+}\n+SQLITE_PRIVATE void sqlite3VdbeFreeCursorNN(Vdbe *p, VdbeCursor *pCx){\n@@ -81678,8 +83319,6 @@\n-  if( p->apCsr ){\n-    int i;\n-    for(i=0; i<p->nCursor; i++){\n-      VdbeCursor *pC = p->apCsr[i];\n-      if( pC ){\n-        sqlite3VdbeFreeCursor(p, pC);\n-        p->apCsr[i] = 0;\n-      }\n+  int i;\n+  for(i=0; i<p->nCursor; i++){\n+    VdbeCursor *pC = p->apCsr[i];\n+    if( pC ){\n+      sqlite3VdbeFreeCursorNN(p, pC);\n+      p->apCsr[i] = 0;\n@@ -81734,3 +83373,1 @@\n-  if( p->aMem ){\n-    releaseMemArray(p->aMem, p->nMem);\n-  }\n+  releaseMemArray(p->aMem, p->nMem);\n@@ -82176,1 +83813,2 @@\n-    return SQLITE_ERROR;\n+    if( (p->prepFlags & SQLITE_PREPARE_SAVESQL)==0 ) return SQLITE_ERROR;\n+    return SQLITE_CONSTRAINT_FOREIGNKEY;\n@@ -82215,3 +83853,1 @@\n-  if( p->iVdbeMagic!=VDBE_MAGIC_RUN ){\n-    return SQLITE_OK;\n-  }\n+  assert( p->eVdbeState==VDBE_RUN_STATE );\n@@ -82226,1 +83862,1 @@\n-  if( p->pc>=0 && p->bIsReader ){\n+  if( p->bIsReader ){\n@@ -82374,9 +84010,7 @@\n-  if( p->pc>=0 ){\n-    db->nVdbeActive--;\n-    if( !p->readOnly ) db->nVdbeWrite--;\n-    if( p->bIsReader ) db->nVdbeRead--;\n-    assert( db->nVdbeActive>=db->nVdbeRead );\n-    assert( db->nVdbeRead>=db->nVdbeWrite );\n-    assert( db->nVdbeWrite>=0 );\n-  }\n-  p->iVdbeMagic = VDBE_MAGIC_HALT;\n+  db->nVdbeActive--;\n+  if( !p->readOnly ) db->nVdbeWrite--;\n+  if( p->bIsReader ) db->nVdbeRead--;\n+  assert( db->nVdbeActive>=db->nVdbeRead );\n+  assert( db->nVdbeRead>=db->nVdbeWrite );\n+  assert( db->nVdbeWrite>=0 );\n+  p->eVdbeState = VDBE_HALT_STATE;\n@@ -82431,0 +84065,1 @@\n+  db->errByteOffset = -1;\n@@ -82463,2 +84098,2 @@\n-** virtual machine from VDBE_MAGIC_RUN or VDBE_MAGIC_HALT back to\n-** VDBE_MAGIC_INIT.\n+** virtual machine from VDBE_RUN_STATE or VDBE_HALT_STATE back to\n+** VDBE_READY_STATE.\n@@ -82478,1 +84113,1 @@\n-  sqlite3VdbeHalt(p);\n+  if( p->eVdbeState==VDBE_RUN_STATE ) sqlite3VdbeHalt(p);\n@@ -82492,7 +84127,0 @@\n-    if( p->runOnlyOnce ) p->expired = 1;\n-  }else if( p->rc && p->expired ){\n-    \/* The expired flag was set on the VDBE before the first call\n-    ** to sqlite3_step(). For consistency (since sqlite3_step() was\n-    ** called), set the database error in this case as well.\n-    *\/\n-    sqlite3ErrorWithMsg(db, p->rc, p->zErrMsg ? \"%s\" : 0, p->zErrMsg);\n@@ -82555,1 +84183,0 @@\n-  p->iVdbeMagic = VDBE_MAGIC_RESET;\n@@ -82565,1 +84192,4 @@\n-  if( p->iVdbeMagic==VDBE_MAGIC_RUN || p->iVdbeMagic==VDBE_MAGIC_HALT ){\n+  assert( VDBE_RUN_STATE>VDBE_READY_STATE );\n+  assert( VDBE_HALT_STATE>VDBE_READY_STATE );\n+  assert( VDBE_INIT_STATE<VDBE_READY_STATE );\n+  if( p->eVdbeState>=VDBE_READY_STATE ){\n@@ -82617,1 +84247,1 @@\n-SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){\n+static void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){\n@@ -82620,1 +84250,4 @@\n-  releaseMemArray(p->aColName, p->nResColumn*COLNAME_N);\n+  if( p->aColName ){\n+    releaseMemArray(p->aColName, p->nResColumn*COLNAME_N);\n+    sqlite3DbFreeNN(db, p->aColName);\n+  }\n@@ -82626,1 +84259,1 @@\n-  if( p->iVdbeMagic!=VDBE_MAGIC_INIT ){\n+  if( p->eVdbeState!=VDBE_INIT_STATE ){\n@@ -82628,2 +84261,2 @@\n-    sqlite3DbFree(db, p->pVList);\n-    sqlite3DbFree(db, p->pFree);\n+    if( p->pVList ) sqlite3DbFreeNN(db, p->pVList);\n+    if( p->pFree ) sqlite3DbFreeNN(db, p->pFree);\n@@ -82632,1 +84265,0 @@\n-  sqlite3DbFree(db, p->aColName);\n@@ -82665,8 +84297,10 @@\n-  if( p->pPrev ){\n-    p->pPrev->pNext = p->pNext;\n-  }else{\n-    assert( db->pVdbe==p );\n-    db->pVdbe = p->pNext;\n-  }\n-  if( p->pNext ){\n-    p->pNext->pPrev = p->pPrev;\n+  if( db->pnBytesFreed==0 ){\n+    if( p->pPrev ){\n+      p->pPrev->pNext = p->pNext;\n+    }else{\n+      assert( db->pVdbe==p );\n+      db->pVdbe = p->pNext;\n+    }\n+    if( p->pNext ){\n+      p->pNext->pPrev = p->pPrev;\n+    }\n@@ -82674,2 +84308,0 @@\n-  p->iVdbeMagic = VDBE_MAGIC_DEAD;\n-  p->db = 0;\n@@ -82710,1 +84342,1 @@\n-static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){\n+SQLITE_PRIVATE int SQLITE_NOINLINE sqlite3VdbeHandleMovedCursor(VdbeCursor *p){\n@@ -82726,1 +84358,1 @@\n-  assert( p->eCurType==CURTYPE_BTREE );\n+  assert( p->eCurType==CURTYPE_BTREE || IsNullCursor(p) );\n@@ -82728,33 +84360,1 @@\n-    return handleMovedCursor(p);\n-  }\n-  return SQLITE_OK;\n-}\n-\n-\/*\n-** Make sure the cursor p is ready to read or write the row to which it\n-** was last positioned.  Return an error code if an OOM fault or I\/O error\n-** prevents us from positioning the cursor to its correct position.\n-**\n-** If a MoveTo operation is pending on the given cursor, then do that\n-** MoveTo now.  If no move is pending, check to see if the row has been\n-** deleted out from under the cursor and if it has, mark the row as\n-** a NULL row.\n-**\n-** If the cursor is already pointing to the correct row and that row has\n-** not been deleted out from under the cursor, then this routine is a no-op.\n-*\/\n-SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor **pp, u32 *piCol){\n-  VdbeCursor *p = *pp;\n-  assert( p->eCurType==CURTYPE_BTREE || p->eCurType==CURTYPE_PSEUDO );\n-  if( p->deferredMoveto ){\n-    u32 iMap;\n-    assert( !p->isEphemeral );\n-    if( p->aAltMap && (iMap = p->aAltMap[1+*piCol])>0 && !p->nullRow ){\n-      *pp = p->pAltCursor;\n-      *piCol = iMap - 1;\n-      return SQLITE_OK;\n-    }\n-    return sqlite3VdbeFinishMoveto(p);\n-  }\n-  if( sqlite3BtreeCursorHasMoved(p->uc.pCursor) ){\n-    return handleMovedCursor(p);\n+    return sqlite3VdbeHandleMovedCursor(p);\n@@ -82771,1 +84371,1 @@\n-** sqlite3VdbeSerialPut()\n+** sqlite3VdbeSerialPut()  <--- in-lined into OP_MakeRecord as of 2022-04-02\n@@ -82883,1 +84483,1 @@\n-static const u8 sqlite3SmallTypeSizes[] = {\n+SQLITE_PRIVATE const u8 sqlite3SmallTypeSizes[128] = {\n@@ -82952,1 +84552,1 @@\n-static u64 floatSwap(u64 in){\n+SQLITE_PRIVATE u64 sqlite3FloatSwap(u64 in){\n@@ -82965,4 +84565,1 @@\n-# define swapMixedEndianFloat(X)  X = floatSwap(X)\n-#else\n-# define swapMixedEndianFloat(X)\n-#endif\n+#endif \/* SQLITE_MIXED_ENDIAN_64BIT_FLOAT *\/\n@@ -82970,48 +84567,0 @@\n-\/*\n-** Write the serialized data blob for the value stored in pMem into\n-** buf. It is assumed that the caller has allocated sufficient space.\n-** Return the number of bytes written.\n-**\n-** nBuf is the amount of space left in buf[].  The caller is responsible\n-** for allocating enough space to buf[] to hold the entire field, exclusive\n-** of the pMem->u.nZero bytes for a MEM_Zero value.\n-**\n-** Return the number of bytes actually written into buf[].  The number\n-** of bytes in the zero-filled tail is included in the return value only\n-** if those bytes were zeroed in buf[].\n-*\/\n-SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){\n-  u32 len;\n-\n-  \/* Integer and Real *\/\n-  if( serial_type<=7 && serial_type>0 ){\n-    u64 v;\n-    u32 i;\n-    if( serial_type==7 ){\n-      assert( sizeof(v)==sizeof(pMem->u.r) );\n-      memcpy(&v, &pMem->u.r, sizeof(v));\n-      swapMixedEndianFloat(v);\n-    }else{\n-      v = pMem->u.i;\n-    }\n-    len = i = sqlite3SmallTypeSizes[serial_type];\n-    assert( i>0 );\n-    do{\n-      buf[--i] = (u8)(v&0xFF);\n-      v >>= 8;\n-    }while( i );\n-    return len;\n-  }\n-\n-  \/* String or blob *\/\n-  if( serial_type>=12 ){\n-    assert( pMem->n + ((pMem->flags & MEM_Zero)?pMem->u.nZero:0)\n-             == (int)sqlite3VdbeSerialTypeLen(serial_type) );\n-    len = pMem->n;\n-    if( len>0 ) memcpy(buf, pMem->z, len);\n-    return len;\n-  }\n-\n-  \/* NULL or constants 0 or 1 *\/\n-  return 0;\n-}\n@@ -83030,1 +84579,1 @@\n-** and store the result in pMem.  Return the number of bytes read.\n+** and store the result in pMem.\n@@ -83037,1 +84586,1 @@\n-static u32 serialGet(\n+static void serialGet(\n@@ -83071,1 +84620,0 @@\n-  return 8;\n@@ -83073,1 +84621,1 @@\n-SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(\n+SQLITE_PRIVATE void sqlite3VdbeSerialGet(\n@@ -83084,1 +84632,1 @@\n-      break;\n+      return;\n@@ -83090,1 +84638,1 @@\n-      break;\n+      return;\n@@ -83098,1 +84646,1 @@\n-      return 1;\n+      return;\n@@ -83106,1 +84654,1 @@\n-      return 2;\n+      return;\n@@ -83114,1 +84662,1 @@\n-      return 3;\n+      return;\n@@ -83126,1 +84674,1 @@\n-      return 4;\n+      return;\n@@ -83134,1 +84682,1 @@\n-      return 6;\n+      return;\n@@ -83140,1 +84688,2 @@\n-      return serialGet(buf,serial_type,pMem);\n+      serialGet(buf,serial_type,pMem);\n+      return;\n@@ -83148,1 +84697,1 @@\n-      return 0;\n+      return;\n@@ -83159,1 +84708,1 @@\n-      return pMem->n;\n+      return;\n@@ -83162,1 +84711,1 @@\n-  return 0;\n+  return;\n@@ -83183,1 +84732,1 @@\n-  nByte = ROUND8(sizeof(UnpackedRecord)) + sizeof(Mem)*(pKeyInfo->nKeyField+1);\n+  nByte = ROUND8P(sizeof(UnpackedRecord)) + sizeof(Mem)*(pKeyInfo->nKeyField+1);\n@@ -83186,1 +84735,1 @@\n-  p->aMem = (Mem*)&((char*)p)[ROUND8(sizeof(UnpackedRecord))];\n+  p->aMem = (Mem*)&((char*)p)[ROUND8P(sizeof(UnpackedRecord))];\n@@ -83225,1 +84774,2 @@\n-    d += sqlite3VdbeSerialGet(&aKey[d], serial_type, pMem);\n+    sqlite3VdbeSerialGet(&aKey[d], serial_type, pMem);\n+    d += sqlite3VdbeSerialTypeLen(serial_type);\n@@ -83309,1 +84859,2 @@\n-    d1 += sqlite3VdbeSerialGet(&aKey1[d1], serial_type1, &mem1);\n+    sqlite3VdbeSerialGet(&aKey1[d1], serial_type1, &mem1);\n+    d1 += sqlite3VdbeSerialTypeLen(serial_type1);\n@@ -83420,2 +84971,2 @@\n-    sqlite3VdbeMemRelease(&c1);\n-    sqlite3VdbeMemRelease(&c2);\n+    sqlite3VdbeMemReleaseMalloc(&c1);\n+    sqlite3VdbeMemReleaseMalloc(&c2);\n@@ -83682,2 +85233,6 @@\n-    u32 s1;\n-    idx1 = 1 + getVarint32(&aKey1[1], s1);\n+    u32 s1 = aKey1[1];\n+    if( s1<0x80 ){\n+      idx1 = 2;\n+    }else{\n+      idx1 = 1 + sqlite3GetVarint32(&aKey1[1], &s1);\n+    }\n@@ -83689,1 +85244,5 @@\n-    idx1 = getVarint32(aKey1, szHdr1);\n+    if( (szHdr1 = aKey1[0])<0x80 ){\n+      idx1 = 1;\n+    }else{\n+      idx1 = sqlite3GetVarint32(aKey1, &szHdr1);\n+    }\n@@ -83945,1 +85504,2 @@\n-  v = pPKey2->aMem[0].u.i;\n+  assert( pPKey2->u.i == pPKey2->aMem[0].u.i );\n+  v = pPKey2->u.i;\n@@ -83980,0 +85540,2 @@\n+  assert( pPKey2->aMem[0].n == pPKey2->n );\n+  assert( pPKey2->aMem[0].z == pPKey2->u.z );\n@@ -83981,4 +85543,3 @@\n-  serial_type = (u8)(aKey1[1]);\n-  if( serial_type >= 0x80 ){\n-    sqlite3GetVarint32(&aKey1[1], (u32*)&serial_type);\n-  }\n+  serial_type = (signed char)(aKey1[1]);\n+\n+vrcs_restart:\n@@ -83986,0 +85547,5 @@\n+    if( serial_type<0 ){\n+      sqlite3GetVarint32(&aKey1[1], (u32*)&serial_type);\n+      if( serial_type>=12 ) goto vrcs_restart;\n+      assert( CORRUPT_DB );\n+    }\n@@ -83999,2 +85565,2 @@\n-    nCmp = MIN( pPKey2->aMem[0].n, nStr );\n-    res = memcmp(&aKey1[szHdr], pPKey2->aMem[0].z, nCmp);\n+    nCmp = MIN( pPKey2->n, nStr );\n+    res = memcmp(&aKey1[szHdr], pPKey2->u.z, nCmp);\n@@ -84007,1 +85573,1 @@\n-      res = nStr - pPKey2->aMem[0].n;\n+      res = nStr - pPKey2->n;\n@@ -84062,0 +85628,1 @@\n+      p->u.i = p->aMem[0].u.i;\n@@ -84071,0 +85638,2 @@\n+      p->u.z = p->aMem[0].z;\n+      p->n = p->aMem[0].n;\n@@ -84143,1 +85712,1 @@\n-  sqlite3VdbeMemRelease(&m);\n+  sqlite3VdbeMemReleaseMalloc(&m);\n@@ -84150,1 +85719,1 @@\n-  sqlite3VdbeMemRelease(&m);\n+  sqlite3VdbeMemReleaseMalloc(&m);\n@@ -84192,1 +85761,1 @@\n-  sqlite3VdbeMemRelease(&m);\n+  sqlite3VdbeMemReleaseMalloc(&m);\n@@ -84359,1 +85928,1 @@\n-      if( pMem->zMalloc ) sqlite3VdbeMemRelease(pMem);\n+      if( pMem->zMalloc ) sqlite3VdbeMemReleaseMalloc(pMem);\n@@ -84786,0 +86355,3 @@\n+  }else if( pNew->flags & MEM_Null ){\n+    \/* Do not duplicate pointer values *\/\n+    pNew->flags &= ~(MEM_Term|MEM_Subtype);\n@@ -84816,1 +86388,2 @@\n-  int rc = sqlite3VdbeMemSetStr(pCtx->pOut, z, n, enc, xDel);\n+  Mem *pOut = pCtx->pOut;\n+  int rc = sqlite3VdbeMemSetStr(pOut, z, n, enc, xDel);\n@@ -84826,0 +86399,5 @@\n+    return;\n+  }\n+  sqlite3VdbeChangeEncoding(pOut, pCtx->enc);\n+  if( sqlite3VdbeMemTooBig(pOut) ){\n+    sqlite3_result_error_toobig(pCtx);\n@@ -84969,0 +86547,1 @@\n+  Mem *pOut = pCtx->pOut;\n@@ -84970,1 +86549,5 @@\n-  sqlite3VdbeMemCopy(pCtx->pOut, pValue);\n+  sqlite3VdbeMemCopy(pOut, pValue);\n+  sqlite3VdbeChangeEncoding(pOut, pCtx->enc);\n+  if( sqlite3VdbeMemTooBig(pOut) ){\n+    sqlite3_result_error_toobig(pCtx);\n+  }\n@@ -84973,2 +86556,1 @@\n-  assert( sqlite3_mutex_held(pCtx->pOut->db->mutex) );\n-  sqlite3VdbeMemSetZeroBlob(pCtx->pOut, n);\n+  sqlite3_result_zeroblob64(pCtx, n>0 ? n : 0);\n@@ -84980,0 +86562,1 @@\n+    sqlite3_result_error_toobig(pCtx);\n@@ -84995,2 +86578,2 @@\n-    sqlite3VdbeMemSetStr(pCtx->pOut, sqlite3ErrStr(errCode), -1,\n-                         SQLITE_UTF8, SQLITE_STATIC);\n+    setResultStrOrError(pCtx, sqlite3ErrStr(errCode), -1, SQLITE_UTF8,\n+                        SQLITE_STATIC);\n@@ -85070,29 +86653,0 @@\n-  if( p->iVdbeMagic!=VDBE_MAGIC_RUN ){\n-    \/* We used to require that sqlite3_reset() be called before retrying\n-    ** sqlite3_step() after any error or after SQLITE_DONE.  But beginning\n-    ** with version 3.7.0, we changed this so that sqlite3_reset() would\n-    ** be called automatically instead of throwing the SQLITE_MISUSE error.\n-    ** This \"automatic-reset\" change is not technically an incompatibility,\n-    ** since any application that receives an SQLITE_MISUSE is broken by\n-    ** definition.\n-    **\n-    ** Nevertheless, some published applications that were originally written\n-    ** for version 3.6.23 or earlier do in fact depend on SQLITE_MISUSE\n-    ** returns, and those were broken by the automatic-reset change.  As a\n-    ** a work-around, the SQLITE_OMIT_AUTORESET compile-time restores the\n-    ** legacy behavior of returning SQLITE_MISUSE for cases where the\n-    ** previous sqlite3_step() returned something other than a SQLITE_LOCKED\n-    ** or SQLITE_BUSY error.\n-    *\/\n-#ifdef SQLITE_OMIT_AUTORESET\n-    if( (rc = p->rc&0xff)==SQLITE_BUSY || rc==SQLITE_LOCKED ){\n-      sqlite3_reset((sqlite3_stmt*)p);\n-    }else{\n-      return SQLITE_MISUSE_BKPT;\n-    }\n-#else\n-    sqlite3_reset((sqlite3_stmt*)p);\n-#endif\n-  }\n-\n-  \/* Check that malloc() has not failed. If it has, return early. *\/\n@@ -85100,4 +86654,16 @@\n-  if( db->mallocFailed ){\n-    p->rc = SQLITE_NOMEM;\n-    return SQLITE_NOMEM_BKPT;\n-  }\n+  if( p->eVdbeState!=VDBE_RUN_STATE ){\n+    restart_step:\n+    if( p->eVdbeState==VDBE_READY_STATE ){\n+      if( p->expired ){\n+        p->rc = SQLITE_SCHEMA;\n+        rc = SQLITE_ERROR;\n+        if( (p->prepFlags & SQLITE_PREPARE_SAVESQL)!=0 ){\n+          \/* If this statement was prepared using saved SQL and an\n+          ** error has occurred, then return the error code in p->rc to the\n+          ** caller. Set the error code in the database handle to the same\n+          ** value.\n+          *\/\n+          rc = sqlite3VdbeTransferError(p);\n+        }\n+        goto end_of_step;\n+      }\n@@ -85105,7 +86671,3 @@\n-  if( p->pc<0 && p->expired ){\n-    p->rc = SQLITE_SCHEMA;\n-    rc = SQLITE_ERROR;\n-    if( (p->prepFlags & SQLITE_PREPARE_SAVESQL)!=0 ){\n-      \/* If this statement was prepared using saved SQL and an\n-      ** error has occurred, then return the error code in p->rc to the\n-      ** caller. Set the error code in the database handle to the same value.\n+      \/* If there are no other statements currently running, then\n+      ** reset the interrupt flag.  This prevents a call to sqlite3_interrupt\n+      ** from interrupting a statement that has not yet started.\n@@ -85113,12 +86675,3 @@\n-      rc = sqlite3VdbeTransferError(p);\n-    }\n-    goto end_of_step;\n-  }\n-  if( p->pc<0 ){\n-    \/* If there are no other statements currently running, then\n-    ** reset the interrupt flag.  This prevents a call to sqlite3_interrupt\n-    ** from interrupting a statement that has not yet started.\n-    *\/\n-    if( db->nVdbeActive==0 ){\n-      AtomicStore(&db->u1.isInterrupted, 0);\n-    }\n+      if( db->nVdbeActive==0 ){\n+        AtomicStore(&db->u1.isInterrupted, 0);\n+      }\n@@ -85126,3 +86679,3 @@\n-    assert( db->nVdbeWrite>0 || db->autoCommit==0\n-        || (db->nDeferredCons==0 && db->nDeferredImmCons==0)\n-    );\n+      assert( db->nVdbeWrite>0 || db->autoCommit==0\n+          || (db->nDeferredCons==0 && db->nDeferredImmCons==0)\n+      );\n@@ -85131,6 +86684,6 @@\n-    if( (db->mTrace & (SQLITE_TRACE_PROFILE|SQLITE_TRACE_XPROFILE))!=0\n-        && !db->init.busy && p->zSql ){\n-      sqlite3OsCurrentTimeInt64(db->pVfs, &p->startTime);\n-    }else{\n-      assert( p->startTime==0 );\n-    }\n+      if( (db->mTrace & (SQLITE_TRACE_PROFILE|SQLITE_TRACE_XPROFILE))!=0\n+          && !db->init.busy && p->zSql ){\n+        sqlite3OsCurrentTimeInt64(db->pVfs, &p->startTime);\n+      }else{\n+        assert( p->startTime==0 );\n+      }\n@@ -85139,4 +86692,36 @@\n-    db->nVdbeActive++;\n-    if( p->readOnly==0 ) db->nVdbeWrite++;\n-    if( p->bIsReader ) db->nVdbeRead++;\n-    p->pc = 0;\n+      db->nVdbeActive++;\n+      if( p->readOnly==0 ) db->nVdbeWrite++;\n+      if( p->bIsReader ) db->nVdbeRead++;\n+      p->pc = 0;\n+      p->eVdbeState = VDBE_RUN_STATE;\n+    }else\n+\n+    if( ALWAYS(p->eVdbeState==VDBE_HALT_STATE) ){\n+      \/* We used to require that sqlite3_reset() be called before retrying\n+      ** sqlite3_step() after any error or after SQLITE_DONE.  But beginning\n+      ** with version 3.7.0, we changed this so that sqlite3_reset() would\n+      ** be called automatically instead of throwing the SQLITE_MISUSE error.\n+      ** This \"automatic-reset\" change is not technically an incompatibility,\n+      ** since any application that receives an SQLITE_MISUSE is broken by\n+      ** definition.\n+      **\n+      ** Nevertheless, some published applications that were originally written\n+      ** for version 3.6.23 or earlier do in fact depend on SQLITE_MISUSE\n+      ** returns, and those were broken by the automatic-reset change.  As a\n+      ** a work-around, the SQLITE_OMIT_AUTORESET compile-time restores the\n+      ** legacy behavior of returning SQLITE_MISUSE for cases where the\n+      ** previous sqlite3_step() returned something other than a SQLITE_LOCKED\n+      ** or SQLITE_BUSY error.\n+      *\/\n+#ifdef SQLITE_OMIT_AUTORESET\n+      if( (rc = p->rc&0xff)==SQLITE_BUSY || rc==SQLITE_LOCKED ){\n+        sqlite3_reset((sqlite3_stmt*)p);\n+      }else{\n+        return SQLITE_MISUSE_BKPT;\n+      }\n+#else\n+      sqlite3_reset((sqlite3_stmt*)p);\n+#endif\n+      assert( p->eVdbeState==VDBE_READY_STATE );\n+      goto restart_step;\n+    }\n@@ -85144,0 +86729,1 @@\n+\n@@ -85158,1 +86744,6 @@\n-  if( rc!=SQLITE_ROW ){\n+  if( rc==SQLITE_ROW ){\n+    assert( p->rc==SQLITE_OK );\n+    assert( db->mallocFailed==0 );\n+    db->errCode = SQLITE_ROW;\n+    return SQLITE_ROW;\n+  }else{\n@@ -85210,1 +86801,0 @@\n-  v->doingRerun = 0;\n@@ -85236,1 +86826,7 @@\n-    if( savedPc>=0 ) v->doingRerun = 1;\n+    if( savedPc>=0 ){\n+      \/* Setting minWriteFileFormat to 254 is a signal to the OP_Init and\n+      ** OP_Trace opcodes to *not* perform SQLITE_TRACE_STMT because it has\n+      ** already been done once on a prior invocation that failed due to\n+      ** SQLITE_SCHEMA.   tag-20220401a  *\/\n+      v->minWriteFileFormat = 254;\n+    }\n@@ -85287,0 +86883,64 @@\n+\/*\n+** Implementation of sqlite3_vtab_in_first() (if bNext==0) and\n+** sqlite3_vtab_in_next() (if bNext!=0).\n+*\/\n+static int valueFromValueList(\n+  sqlite3_value *pVal,        \/* Pointer to the ValueList object *\/\n+  sqlite3_value **ppOut,      \/* Store the next value from the list here *\/\n+  int bNext                   \/* 1 for _next(). 0 for _first() *\/\n+){\n+  int rc;\n+  ValueList *pRhs;\n+\n+  *ppOut = 0;\n+  if( pVal==0 ) return SQLITE_MISUSE;\n+  pRhs = (ValueList*)sqlite3_value_pointer(pVal, \"ValueList\");\n+  if( pRhs==0 ) return SQLITE_MISUSE;\n+  if( bNext ){\n+    rc = sqlite3BtreeNext(pRhs->pCsr, 0);\n+  }else{\n+    int dummy = 0;\n+    rc = sqlite3BtreeFirst(pRhs->pCsr, &dummy);\n+    assert( rc==SQLITE_OK || sqlite3BtreeEof(pRhs->pCsr) );\n+    if( sqlite3BtreeEof(pRhs->pCsr) ) rc = SQLITE_DONE;\n+  }\n+  if( rc==SQLITE_OK ){\n+    u32 sz;       \/* Size of current row in bytes *\/\n+    Mem sMem;     \/* Raw content of current row *\/\n+    memset(&sMem, 0, sizeof(sMem));\n+    sz = sqlite3BtreePayloadSize(pRhs->pCsr);\n+    rc = sqlite3VdbeMemFromBtreeZeroOffset(pRhs->pCsr,(int)sz,&sMem);\n+    if( rc==SQLITE_OK ){\n+      u8 *zBuf = (u8*)sMem.z;\n+      u32 iSerial;\n+      sqlite3_value *pOut = pRhs->pOut;\n+      int iOff = 1 + getVarint32(&zBuf[1], iSerial);\n+      sqlite3VdbeSerialGet(&zBuf[iOff], iSerial, pOut);\n+      pOut->enc = ENC(pOut->db);\n+      if( (pOut->flags & MEM_Ephem)!=0 && sqlite3VdbeMemMakeWriteable(pOut) ){\n+        rc = SQLITE_NOMEM;\n+      }else{\n+        *ppOut = pOut;\n+      }\n+    }\n+    sqlite3VdbeMemRelease(&sMem);\n+  }\n+  return rc;\n+}\n+\n+\/*\n+** Set the iterator value pVal to point to the first value in the set.\n+** Set (*ppOut) to point to this value before returning.\n+*\/\n+SQLITE_API int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut){\n+  return valueFromValueList(pVal, ppOut, 0);\n+}\n+\n+\/*\n+** Set the iterator value pVal to point to the next value in the set.\n+** Set (*ppOut) to point to this value before returning.\n+*\/\n+SQLITE_API int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut){\n+  return valueFromValueList(pVal, ppOut, 1);\n+}\n+\n@@ -85481,0 +87141,2 @@\n+        \/* .z          = *\/ (char*)0,\n+        \/* .n          = *\/ (int)0,\n@@ -85484,3 +87146,1 @@\n-        \/* .n          = *\/ (int)0,\n-        \/* .z          = *\/ (char*)0,\n-        \/* .zMalloc    = *\/ (char*)0,\n+        \/* .db         = *\/ (sqlite3*)0,\n@@ -85489,1 +87149,1 @@\n-        \/* .db         = *\/ (sqlite3*)0,\n+        \/* .zMalloc    = *\/ (char*)0,\n@@ -85786,1 +87446,1 @@\n-  if( p->iVdbeMagic!=VDBE_MAGIC_RUN || p->pc>=0 ){\n+  if( p->eVdbeState!=VDBE_READY_STATE ){\n@@ -85971,1 +87631,4 @@\n-      rc = sqlite3_bind_double(pStmt, i, pValue->u.r);\n+      assert( pValue->flags & (MEM_Real|MEM_IntReal) );\n+      rc = sqlite3_bind_double(pStmt, i,\n+          (pValue->flags & MEM_Real) ? pValue->u.r : (double)pValue->u.i\n+      );\n@@ -86136,1 +87799,1 @@\n-  return v!=0 && v->iVdbeMagic==VDBE_MAGIC_RUN && v->pc>=0;\n+  return v!=0 && v->eVdbeState==VDBE_RUN_STATE;\n@@ -86182,2 +87845,1 @@\n-    sqlite3VdbeClearObject(db, pVdbe);\n-    sqlite3DbFree(db, pVdbe);\n+    sqlite3VdbeDelete(pVdbe);\n@@ -86951,1 +88613,0 @@\n-  int iDb,              \/* Database the cursor belongs to, or -1 *\/\n@@ -86977,1 +88638,1 @@\n-      ROUND8(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField +\n+      ROUND8P(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField +\n@@ -86982,1 +88643,1 @@\n-    sqlite3VdbeFreeCursor(p, p->apCsr[iCur]);\n+    sqlite3VdbeFreeCursorNN(p, p->apCsr[iCur]);\n@@ -87008,1 +88669,0 @@\n-  pCx->iDb = iDb;\n@@ -87013,1 +88673,1 @@\n-        &pMem->z[ROUND8(sizeof(VdbeCursor))+2*sizeof(u32)*nField];\n+        &pMem->z[ROUND8P(sizeof(VdbeCursor))+2*sizeof(u32)*nField];\n@@ -87381,0 +89041,23 @@\n+\/*\n+** Compute a bloom filter hash using pOp->p4.i registers from aMem[] beginning\n+** with pOp->p3.  Return the hash.\n+*\/\n+static u64 filterHash(const Mem *aMem, const Op *pOp){\n+  int i, mx;\n+  u64 h = 0;\n+\n+  assert( pOp->p4type==P4_INT32 );\n+  for(i=pOp->p3, mx=i+pOp->p4.i; i<mx; i++){\n+    const Mem *p = &aMem[i];\n+    if( p->flags & (MEM_Int|MEM_IntReal) ){\n+      h += p->u.i;\n+    }else if( p->flags & MEM_Real ){\n+      h += sqlite3VdbeIntValue(p);\n+    }else if( p->flags & (MEM_Str|MEM_Blob) ){\n+      h += p->n;\n+      if( p->flags & MEM_Zero ) h += p->u.nZero;\n+    }\n+  }\n+  return h;\n+}\n+\n@@ -87429,1 +89112,1 @@\n-  assert( p->iVdbeMagic==VDBE_MAGIC_RUN );  \/* sqlite3_step() verifies this *\/\n+  assert( p->eVdbeState==VDBE_RUN_STATE );  \/* sqlite3_step() verifies this *\/\n@@ -87672,6 +89355,1 @@\n-\n-  \/* Most jump operations do a goto to this spot in order to update\n-  ** the pOp pointer. *\/\n-jump_to_p2:\n-  pOp = &aOp[pOp->p2 - 1];\n-  break;\n+  goto jump_to_p2_and_check_for_interrupt;\n@@ -87680,1 +89358,1 @@\n-\/* Opcode:  Return P1 * * * *\n+\/* Opcode:  Return P1 P2 P3 * *\n@@ -87682,2 +89360,19 @@\n-** Jump to the next instruction after the address in register P1.  After\n-** the jump, register P1 becomes undefined.\n+** Jump to the address stored in register P1.  If P1 is a return address\n+** register, then this accomplishes a return from a subroutine.\n+**\n+** If P3 is 1, then the jump is only taken if register P1 holds an integer\n+** values, otherwise execution falls through to the next opcode, and the\n+** OP_Return becomes a no-op. If P3 is 0, then register P1 must hold an\n+** integer or else an assert() is raised.  P3 should be set to 1 when\n+** this opcode is used in combination with OP_BeginSubrtn, and set to 0\n+** otherwise.\n+**\n+** The value in register P1 is unchanged by this opcode.\n+**\n+** P2 is not used by the byte-code engine.  However, if P2 is positive\n+** and also less than the current address, then the \"EXPLAIN\" output\n+** formatter in the CLI will indent all opcodes from the P2 opcode up\n+** to be not including the current Return.   P2 should be the first opcode\n+** in the subroutine from which this opcode is returning.  Thus the P2\n+** value is a byte-code indentation hint.  See tag-20220407a in\n+** wherecode.c and shell.c.\n@@ -87687,3 +89382,6 @@\n-  assert( pIn1->flags==MEM_Int );\n-  pOp = &aOp[pIn1->u.i];\n-  pIn1->flags = MEM_Undefined;\n+  if( pIn1->flags & MEM_Int ){\n+    if( pOp->p3 ){ VdbeBranchTaken(1, 2); }\n+    pOp = &aOp[pIn1->u.i];\n+  }else if( ALWAYS(pOp->p3) ){\n+    VdbeBranchTaken(0, 2);\n+  }\n@@ -87712,1 +89410,8 @@\n-  if( pOp->p2 ) goto jump_to_p2;\n+  if( pOp->p2==0 ) break;\n+\n+  \/* Most jump operations do a goto to this spot in order to update\n+  ** the pOp pointer. *\/\n+jump_to_p2:\n+  assert( pOp->p2>0 );       \/* There are never any jumps to instruction 0 *\/\n+  assert( pOp->p2<p->nOp );  \/* Jumps must be in range *\/\n+  pOp = &aOp[pOp->p2 - 1];\n@@ -87814,1 +89519,0 @@\n-  pcx = (int)(pOp - aOp);\n@@ -87818,1 +89522,1 @@\n-  if( pOp->p1==SQLITE_OK && p->pFrame ){\n+  if( p->pFrame && pOp->p1==SQLITE_OK ){\n@@ -87840,1 +89544,0 @@\n-  p->pc = pcx;\n@@ -87857,0 +89560,1 @@\n+    pcx = (int)(pOp - aOp);\n@@ -87982,0 +89686,22 @@\n+\/* Opcode: BeginSubrtn * P2 * * *\n+** Synopsis: r[P2]=NULL\n+**\n+** Mark the beginning of a subroutine that can be entered in-line\n+** or that can be called using OP_Gosub.  The subroutine should\n+** be terminated by an OP_Return instruction that has a P1 operand that\n+** is the same as the P2 operand to this opcode and that has P3 set to 1.\n+** If the subroutine is entered in-line, then the OP_Return will simply\n+** fall through.  But if the subroutine is entered using OP_Gosub, then\n+** the OP_Return will jump back to the first instruction after the OP_Gosub.\n+**\n+** This routine works by loading a NULL into the P2 register.  When the\n+** return address register contains a NULL, the OP_Return instruction is\n+** a no-op that simply falls through to the next instruction (assuming that\n+** the OP_Return opcode has a P3 value of 1).  Thus if the subroutine is\n+** entered in-line, then the OP_Return will cause in-line execution to\n+** continue.  But if the subroutine is entered via OP_Gosub, then the\n+** OP_Return will cause a return to the address following the OP_Gosub.\n+**\n+** This opcode is identical to OP_Null.  It has a different name\n+** only to make the byte code easier to read and verify.\n+*\/\n@@ -87994,0 +89720,1 @@\n+case OP_BeginSubrtn:\n@@ -88035,1 +89762,2 @@\n-** blob in register P2.\n+** blob in register P2.  If P4 is a NULL pointer, then construct\n+** a zero-filled blob that is P1 bytes long in P2.\n@@ -88040,1 +89768,6 @@\n-  sqlite3VdbeMemSetStr(pOut, pOp->p4.z, pOp->p1, 0, 0);\n+  if( pOp->p4.z==0 ){\n+    sqlite3VdbeMemSetZeroBlob(pOut, pOp->p1);\n+    if( sqlite3VdbeMemExpandBlob(pOut) ) goto no_mem;\n+  }else{\n+    sqlite3VdbeMemSetStr(pOut, pOp->p4.z, pOp->p1, 0, 0);\n+  }\n@@ -88118,1 +89851,1 @@\n-\/* Opcode: Copy P1 P2 P3 * *\n+\/* Opcode: Copy P1 P2 P3 * P5\n@@ -88123,0 +89856,5 @@\n+** If the 0x0002 bit of P5 is set then also clear the MEM_Subtype flag in the\n+** destination.  The 0x0001 bit of P5 indicates that this Copy opcode cannot\n+** be merged.  The 0x0001 bit is used by the query planner and does not\n+** come into play during query execution.\n+**\n@@ -88137,0 +89875,3 @@\n+    if( (pOut->flags & MEM_Subtype)!=0 &&  (pOp->p5 & 0x0002)!=0 ){\n+      pOut->flags &= ~MEM_Subtype;\n+    }\n@@ -88189,2 +89930,1 @@\n-\/* Opcode: ChngCntRow P1 P2 * * *\n-** Synopsis: output=r[P1]\n+\/* Opcode: FkCheck * * * * *\n@@ -88192,3 +89932,3 @@\n-** Output value in register P1 as the chance count for a DML statement,\n-** due to the \"PRAGMA count_changes=ON\" setting.  Or, if there was a\n-** foreign key error in the statement, trigger the error now.\n+** Halt with an SQLITE_CONSTRAINT error if there are any unresolved\n+** foreign key constraint violations.  If there are no foreign key\n+** constraint violations, this is a no-op.\n@@ -88196,3 +89936,4 @@\n-** This opcode is a variant of OP_ResultRow that checks the foreign key\n-** immediate constraint count and throws an error if the count is\n-** non-zero.  The P2 opcode must be 1.\n+** FK constraint violations are also checked when the prepared statement\n+** exits.  This opcode is used to raise foreign key constraint errors prior\n+** to returning results such as a row change count or the result of a\n+** RETURNING clause.\n@@ -88200,2 +89941,1 @@\n-case OP_ChngCntRow: {\n-  assert( pOp->p2==1 );\n+case OP_FkCheck: {\n@@ -88205,2 +89945,1 @@\n-  \/* Fall through to the next case, OP_ResultRow *\/\n-  \/* no break *\/ deliberate_fall_through\n+  break;\n@@ -88219,2 +89958,0 @@\n-  Mem *pMem;\n-  int i;\n@@ -88225,1 +89962,0 @@\n-  \/* Invalidate all ephemeral cursor row caches *\/\n@@ -88227,13 +89963,1 @@\n-\n-  \/* Make sure the results of the current row are \\000 terminated\n-  ** and have an assigned type.  The results are de-ephemeralized as\n-  ** a side effect.\n-  *\/\n-  pMem = p->pResultSet = &aMem[pOp->p1];\n-  for(i=0; i<pOp->p2; i++){\n-    assert( memIsValid(&pMem[i]) );\n-    Deephemeralize(&pMem[i]);\n-    assert( (pMem[i].flags & MEM_Ephem)==0\n-            || (pMem[i].flags & (MEM_Str|MEM_Blob))==0 );\n-    sqlite3VdbeMemNulTerminate(&pMem[i]);\n-    REGISTER_TRACE(pOp->p1+i, &pMem[i]);\n+  p->pResultSet = &aMem[pOp->p1];\n@@ -88241,7 +89965,13 @@\n-    \/* The registers in the result will not be used again when the\n-    ** prepared statement restarts.  This is because sqlite3_column()\n-    ** APIs might have caused type conversions of made other changes to\n-    ** the register values.  Therefore, we can go ahead and break any\n-    ** OP_SCopy dependencies. *\/\n-    pMem[i].pScopyFrom = 0;\n-#endif\n+  {\n+    Mem *pMem = p->pResultSet;\n+    int i;\n+    for(i=0; i<pOp->p2; i++){\n+      assert( memIsValid(&pMem[i]) );\n+      REGISTER_TRACE(pOp->p1+i, &pMem[i]);\n+      \/* The registers in the result will not be used again when the\n+      ** prepared statement restarts.  This is because sqlite3_column()\n+      ** APIs might have caused type conversions of made other changes to\n+      ** the register values.  Therefore, we can go ahead and break any\n+      ** OP_SCopy dependencies. *\/\n+      pMem[i].pScopyFrom = 0;\n+    }\n@@ -88249,0 +89979,1 @@\n+#endif\n@@ -88250,1 +89981,0 @@\n-\n@@ -88254,4 +89984,0 @@\n-\n-\n-  \/* Return SQLITE_ROW\n-  *\/\n@@ -88312,1 +90038,1 @@\n-  if( sqlite3VdbeMemGrow(pOut, (int)nByte+3, pOut==pIn2) ){\n+  if( sqlite3VdbeMemGrow(pOut, (int)nByte+2, pOut==pIn2) ){\n@@ -88324,0 +90050,1 @@\n+  if( encoding>SQLITE_UTF8 ) nByte &= ~1;\n@@ -88326,1 +90053,0 @@\n-  pOut->z[nByte+2] = 0;\n@@ -88771,1 +90497,0 @@\n-      iCompare = +1;\n@@ -88776,0 +90501,1 @@\n+      iCompare = +1;\n@@ -88777,1 +90503,0 @@\n-      iCompare = -1;\n@@ -88782,0 +90507,1 @@\n+      iCompare = -1;\n@@ -88783,1 +90509,0 @@\n-      iCompare = 0;\n@@ -88788,0 +90513,1 @@\n+      iCompare = 0;\n@@ -88814,1 +90540,0 @@\n-      iCompare = 1;    \/* Operands are not equal *\/\n@@ -88819,0 +90544,1 @@\n+      iCompare = 1;    \/* Operands are not equal *\/\n@@ -88844,1 +90570,1 @@\n-        if( NEVER(pIn1==pIn3) ) flags3 = flags1 | MEM_Str;\n+        if( pIn1==pIn3 ) flags3 = flags1 | MEM_Str;\n@@ -88924,3 +90650,2 @@\n-** The permutation is only valid until the next OP_Compare that has\n-** the OPFLAG_PERMUTE bit set in P5. Typically the OP_Permutation should\n-** occur immediately prior to the OP_Compare.\n+** The permutation is only valid for the next opcode which must be\n+** an OP_Compare that has the OPFLAG_PERMUTE bit set in P5.\n@@ -88958,0 +90683,2 @@\n+**\n+** This opcode must be immediately followed by an OP_Jump opcode.\n@@ -89016,0 +90743,1 @@\n+  assert( pOp[1].opcode==OP_Jump );\n@@ -89024,0 +90752,2 @@\n+**\n+** This opcode must immediately follow an OP_Compare opcode.\n@@ -89026,0 +90756,1 @@\n+  assert( pOp>aOp && pOp[-1].opcode==OP_Compare );\n@@ -89312,1 +91043,1 @@\n-  if( NEVER(pC==0) || pC->eCurType!=CURTYPE_BTREE ){\n+  if( pC==0 || pC->eCurType!=CURTYPE_BTREE ){\n@@ -89315,1 +91046,9 @@\n-    sqlite3VdbeMemSetInt64(pOut, sqlite3BtreeOffset(pC->uc.pCursor));\n+    if( pC->deferredMoveto ){\n+      rc = sqlite3VdbeFinishMoveto(pC);\n+      if( rc ) goto abort_due_to_error;\n+    }\n+    if( sqlite3BtreeEof(pC->uc.pCursor) ){\n+      sqlite3VdbeMemSetNull(pOut);\n+    }else{\n+      sqlite3VdbeMemSetInt64(pOut, sqlite3BtreeOffset(pC->uc.pCursor));\n+    }\n@@ -89322,1 +91061,1 @@\n-** Synopsis: r[P3]=PX\n+** Synopsis: r[P3]=PX cursor P1 column P2\n@@ -89344,1 +91083,1 @@\n-  BtCursor *pCrsr;   \/* The BTree cursor *\/\n+  BtCursor *pCrsr;   \/* The B-Tree cursor corresponding to pC *\/\n@@ -89358,0 +91097,1 @@\n+  assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );\n@@ -89359,1 +91099,0 @@\n-  assert( pC!=0 );\n@@ -89362,9 +91101,1 @@\n-  \/* If the cursor cache is stale (meaning it is not currently point at\n-  ** the correct row) then bring it up-to-date by doing the necessary\n-  ** B-Tree seek. *\/\n-  rc = sqlite3VdbeCursorMoveto(&pC, &p2);\n-  if( rc ) goto abort_due_to_error;\n-\n-  assert( pOp->p3>0 && pOp->p3<=(p->nMem+1 - p->nCursor) );\n-  pDest = &aMem[pOp->p3];\n-  memAboutToChange(p, pDest);\n+op_column_restart:\n@@ -89372,1 +91103,2 @@\n-  assert( p2<(u32)pC->nField );\n+  assert( p2<(u32)pC->nField\n+       || (pC->eCurType==CURTYPE_PSEUDO && pC->seekResult==0) );\n@@ -89374,0 +91106,1 @@\n+  assert( aOffset==pC->aType+pC->nField );\n@@ -89380,1 +91113,1 @@\n-      if( pC->eCurType==CURTYPE_PSEUDO ){\n+      if( pC->eCurType==CURTYPE_PSEUDO && pC->seekResult>0 ){\n@@ -89383,1 +91116,0 @@\n-        assert( pC->seekResult>0 );\n@@ -89390,0 +91122,2 @@\n+        pDest = &aMem[pOp->p3];\n+        memAboutToChange(p, pDest);\n@@ -89395,0 +91129,15 @@\n+      if( pC->deferredMoveto ){\n+        u32 iMap;\n+        assert( !pC->isEphemeral );\n+        if( pC->ub.aAltMap && (iMap = pC->ub.aAltMap[1+p2])>0  ){\n+          pC = pC->pAltCursor;\n+          p2 = iMap - 1;\n+          goto op_column_restart;\n+        }\n+        rc = sqlite3VdbeFinishMoveto(pC);\n+        if( rc ) goto abort_due_to_error;\n+      }else if( sqlite3BtreeCursorHasMoved(pCrsr) ){\n+        rc = sqlite3VdbeHandleMovedCursor(pC);\n+        if( rc ) goto abort_due_to_error;\n+        goto op_column_restart;\n+      }\n@@ -89402,3 +91151,0 @@\n-      if( pC->payloadSize > (u32)db->aLimit[SQLITE_LIMIT_LENGTH] ){\n-        goto too_big;\n-      }\n@@ -89407,1 +91153,5 @@\n-    pC->iHdrOffset = getVarint32(pC->aRow, aOffset[0]);\n+    if( (aOffset[0] = pC->aRow[0])<0x80 ){\n+      pC->iHdrOffset = 1;\n+    }else{\n+      pC->iHdrOffset = sqlite3GetVarint32(pC->aRow, aOffset);\n+    }\n@@ -89410,1 +91160,0 @@\n-\n@@ -89450,0 +91199,4 @@\n+  }else if( sqlite3BtreeCursorHasMoved(pC->uc.pCursor) ){\n+    rc = sqlite3VdbeHandleMovedCursor(pC);\n+    if( rc ) goto abort_due_to_error;\n+    goto op_column_restart;\n@@ -89518,0 +91271,2 @@\n+      pDest = &aMem[pOp->p3];\n+      memAboutToChange(p, pDest);\n@@ -89535,0 +91290,2 @@\n+  pDest = &aMem[pOp->p3];\n+  memAboutToChange(p, pDest);\n@@ -89555,0 +91312,1 @@\n+        if( len>db->aLimit[SQLITE_LIMIT_LENGTH] ) goto too_big;\n@@ -89587,0 +91345,1 @@\n+      if( len>db->aLimit[SQLITE_LIMIT_LENGTH] ) goto too_big;\n@@ -89669,0 +91428,2 @@\n+          testcase( (pIn1->flags & (MEM_Real|MEM_IntReal))==MEM_Real );\n+          testcase( (pIn1->flags & (MEM_Real|MEM_IntReal))==MEM_IntReal );\n@@ -89686,1 +91447,1 @@\n-          }else if( (pIn1->flags & MEM_Real)==0 ){\n+          }else if( (pIn1->flags & (MEM_Real|MEM_IntReal))==0 ){\n@@ -89797,1 +91558,0 @@\n-  int file_format;       \/* File format to use for encoding *\/\n@@ -89826,1 +91586,0 @@\n-  file_format = p->minWriteFileFormat;\n@@ -89925,1 +91684,1 @@\n-      testcase( uu==2147483647 );        testcase( uu==2147483648 );\n+      testcase( uu==2147483647 );        testcase( uu==2147483648LL );\n@@ -89928,1 +91687,1 @@\n-        if( (i&1)==i && file_format>=4 ){\n+        if( (i&1)==i && p->minWriteFileFormat>=4 ){\n@@ -90033,1 +91792,5 @@\n-  zHdr += putVarint32(zHdr, nHdr);\n+  if( nHdr<0x80 ){\n+    *(zHdr++) = nHdr;\n+  }else{\n+    zHdr += sqlite3PutVarint(zHdr,nHdr);\n+  }\n@@ -90036,1 +91799,1 @@\n-  do{\n+  while( 1 \/*exit-by-break*\/ ){\n@@ -90039,3 +91802,2 @@\n-    ** additional varints, one per column. *\/\n-    zHdr += putVarint32(zHdr, serial_type);            \/* serial type *\/\n-    \/* EVIDENCE-OF: R-64536-51728 The values for each column in the record\n+    ** additional varints, one per column.\n+    ** EVIDENCE-OF: R-64536-51728 The values for each column in the record\n@@ -90043,2 +91805,41 @@\n-    zPayload += sqlite3VdbeSerialPut(zPayload, pRec, serial_type); \/* content *\/\n-  }while( (++pRec)<=pLast );\n+    if( serial_type<=7 ){\n+      *(zHdr++) = serial_type;\n+      if( serial_type==0 ){\n+        \/* NULL value.  No change in zPayload *\/\n+      }else{\n+        u64 v;\n+        u32 i;\n+        if( serial_type==7 ){\n+          assert( sizeof(v)==sizeof(pRec->u.r) );\n+          memcpy(&v, &pRec->u.r, sizeof(v));\n+          swapMixedEndianFloat(v);\n+        }else{\n+          v = pRec->u.i;\n+        }\n+        len = i = sqlite3SmallTypeSizes[serial_type];\n+        assert( i>0 );\n+        while( 1 \/*exit-by-break*\/ ){\n+          zPayload[--i] = (u8)(v&0xFF);\n+          if( i==0 ) break;\n+          v >>= 8;\n+        }\n+        zPayload += len;\n+      }\n+    }else if( serial_type<0x80 ){\n+      *(zHdr++) = serial_type;\n+      if( serial_type>=14 && pRec->n>0 ){\n+        assert( pRec->z!=0 );\n+        memcpy(zPayload, pRec->z, pRec->n);\n+        zPayload += pRec->n;\n+      }\n+    }else{\n+      zHdr += sqlite3PutVarint(zHdr, serial_type);\n+      if( pRec->n ){\n+        assert( pRec->z!=0 );\n+        memcpy(zPayload, pRec->z, pRec->n);\n+        zPayload += pRec->n;\n+      }\n+    }\n+    if( pRec==pLast ) break;\n+    pRec++;\n+  }\n@@ -90053,1 +91854,1 @@\n-\/* Opcode: Count P1 P2 p3 * *\n+\/* Opcode: Count P1 P2 P3 * *\n@@ -90263,1 +92064,4 @@\n-\n+  if( p->eVdbeState==VDBE_HALT_STATE ){\n+    rc = SQLITE_DONE;\n+    goto vdbe_return;\n+  }\n@@ -90367,0 +92171,1 @@\n+  Db *pDb;\n@@ -90386,1 +92191,2 @@\n-  pBt = db->aDb[pOp->p1].pBt;\n+  pDb = &db->aDb[pOp->p1];\n+  pBt = pDb->pBt;\n@@ -90427,2 +92233,1 @@\n-   && (iMeta!=pOp->p3\n-      || db->aDb[pOp->p1].pSchema->iGeneration!=pOp->p4.i)\n+   && (iMeta!=pOp->p3 || pDb->pSchema->iGeneration!=pOp->p4.i)\n@@ -90455,0 +92260,5 @@\n+\n+    \/* Set changeCntOn to 0 to prevent the value returned by sqlite3_changes()\n+    ** from being modified in sqlite3VdbeHalt(). If this statement is\n+    ** reprepared, changeCntOn will be set again. *\/\n+    p->changeCntOn = 0;\n@@ -90521,1 +92331,1 @@\n-    pDb->pSchema->schema_cookie = pOp->p3 - pOp->p5;\n+    *(u32*)&pDb->pSchema->schema_cookie = *(u32*)&pOp->p3 - pOp->p5;\n@@ -90701,1 +92511,1 @@\n-  pCur = allocateCursor(p, pOp->p1, nField, iDb, CURTYPE_BTREE);\n+  pCur = allocateCursor(p, pOp->p1, nField, CURTYPE_BTREE);\n@@ -90703,0 +92513,1 @@\n+  pCur->iDb = iDb;\n@@ -90744,1 +92555,1 @@\n-  pCx = allocateCursor(p, pOp->p1, pOrig->nField, -1, CURTYPE_BTREE);\n+  pCx = allocateCursor(p, pOp->p1, pOrig->nField, CURTYPE_BTREE);\n@@ -90752,4 +92563,4 @@\n-  pCx->pBtx = pOrig->pBtx;\n-  pCx->hasBeenDuped = 1;\n-  pOrig->hasBeenDuped = 1;\n-  rc = sqlite3BtreeCursor(pCx->pBtx, pCx->pgnoRoot, BTREE_WRCSR,\n+  pCx->ub.pBtx = pOrig->ub.pBtx;\n+  pCx->noReuse = 1;\n+  pOrig->noReuse = 1;\n+  rc = sqlite3BtreeCursor(pCx->ub.pBtx, pCx->pgnoRoot, BTREE_WRCSR,\n@@ -90821,1 +92632,1 @@\n-  if( pCx && !pCx->hasBeenDuped &&  ALWAYS(pOp->p2<=pCx->nField) ){\n+  if( pCx && !pCx->noReuse &&  ALWAYS(pOp->p2<=pCx->nField) ){\n@@ -90828,1 +92639,1 @@\n-    rc = sqlite3BtreeClearTable(pCx->pBtx, pCx->pgnoRoot, 0);\n+    rc = sqlite3BtreeClearTable(pCx->ub.pBtx, pCx->pgnoRoot, 0);\n@@ -90830,1 +92641,1 @@\n-    pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_BTREE);\n+    pCx = allocateCursor(p, pOp->p1, pOp->p2, CURTYPE_BTREE);\n@@ -90833,1 +92644,1 @@\n-    rc = sqlite3BtreeOpen(db->pVfs, 0, db, &pCx->pBtx,\n+    rc = sqlite3BtreeOpen(db->pVfs, 0, db, &pCx->ub.pBtx,\n@@ -90837,1 +92648,1 @@\n-      rc = sqlite3BtreeBeginTrans(pCx->pBtx, 1, 0);\n+      rc = sqlite3BtreeBeginTrans(pCx->ub.pBtx, 1, 0);\n@@ -90846,1 +92657,1 @@\n-          rc = sqlite3BtreeCreateTable(pCx->pBtx, &pCx->pgnoRoot,\n+          rc = sqlite3BtreeCreateTable(pCx->ub.pBtx, &pCx->pgnoRoot,\n@@ -90852,1 +92663,1 @@\n-            rc = sqlite3BtreeCursor(pCx->pBtx, pCx->pgnoRoot, BTREE_WRCSR,\n+            rc = sqlite3BtreeCursor(pCx->ub.pBtx, pCx->pgnoRoot, BTREE_WRCSR,\n@@ -90858,1 +92669,1 @@\n-          rc = sqlite3BtreeCursor(pCx->pBtx, SCHEMA_ROOT, BTREE_WRCSR,\n+          rc = sqlite3BtreeCursor(pCx->ub.pBtx, SCHEMA_ROOT, BTREE_WRCSR,\n@@ -90865,1 +92676,1 @@\n-        sqlite3BtreeClose(pCx->pBtx);\n+        sqlite3BtreeClose(pCx->ub.pBtx);\n@@ -90889,1 +92700,1 @@\n-  pCx = allocateCursor(p, pOp->p1, pOp->p2, -1, CURTYPE_SORTER);\n+  pCx = allocateCursor(p, pOp->p1, pOp->p2, CURTYPE_SORTER);\n@@ -90938,1 +92749,1 @@\n-  pCx = allocateCursor(p, pOp->p1, pOp->p3, -1, CURTYPE_PSEUDO);\n+  pCx = allocateCursor(p, pOp->p1, pOp->p3, CURTYPE_PSEUDO);\n@@ -91570,1 +93381,0 @@\n-  int takeJump;\n@@ -91573,2 +93383,0 @@\n-  int res;\n-  UnpackedRecord *pFree;\n@@ -91589,1 +93397,1 @@\n-  pIn3 = &aMem[pOp->p3];\n+  r.aMem = &aMem[pOp->p3];\n@@ -91593,1 +93401,3 @@\n-  if( pOp->p4.i>0 ){\n+  r.nField = (u16)pOp->p4.i;\n+  if( r.nField>0 ){\n+    \/* Key values in an array of registers *\/\n@@ -91595,2 +93405,1 @@\n-    r.nField = (u16)pOp->p4.i;\n-    r.aMem = pIn3;\n+    r.default_rc = 0;\n@@ -91604,2 +93413,1 @@\n-    pIdxKey = &r;\n-    pFree = 0;\n+    rc = sqlite3BtreeIndexMoveto(pC->uc.pCursor, &r, &pC->seekResult);\n@@ -91607,2 +93415,4 @@\n-    assert( pIn3->flags & MEM_Blob );\n-    rc = ExpandBlob(pIn3);\n+    \/* Composite key generated by OP_MakeRecord *\/\n+    assert( r.aMem->flags & MEM_Blob );\n+    assert( pOp->opcode!=OP_NoConflict );\n+    rc = ExpandBlob(r.aMem);\n@@ -91611,1 +93421,1 @@\n-    pFree = pIdxKey = sqlite3VdbeAllocUnpackedRecord(pC->pKeyInfo);\n+    pIdxKey = sqlite3VdbeAllocUnpackedRecord(pC->pKeyInfo);\n@@ -91613,14 +93423,4 @@\n-    sqlite3VdbeRecordUnpack(pC->pKeyInfo, pIn3->n, pIn3->z, pIdxKey);\n-  }\n-  pIdxKey->default_rc = 0;\n-  takeJump = 0;\n-  if( pOp->opcode==OP_NoConflict ){\n-    \/* For the OP_NoConflict opcode, take the jump if any of the\n-    ** input fields are NULL, since any key with a NULL will not\n-    ** conflict *\/\n-    for(ii=0; ii<pIdxKey->nField; ii++){\n-      if( pIdxKey->aMem[ii].flags & MEM_Null ){\n-        takeJump = 1;\n-        break;\n-      }\n-    }\n+    sqlite3VdbeRecordUnpack(pC->pKeyInfo, r.aMem->n, r.aMem->z, pIdxKey);\n+    pIdxKey->default_rc = 0;\n+    rc = sqlite3BtreeIndexMoveto(pC->uc.pCursor, pIdxKey, &pC->seekResult);\n+    sqlite3DbFreeNN(db, pIdxKey);\n@@ -91628,2 +93428,0 @@\n-  rc = sqlite3BtreeIndexMoveto(pC->uc.pCursor, pIdxKey, &res);\n-  if( pFree ) sqlite3DbFreeNN(db, pFree);\n@@ -91633,2 +93431,1 @@\n-  pC->seekResult = res;\n-  alreadyExists = (res==0);\n+  alreadyExists = (pC->seekResult==0);\n@@ -91642,3 +93439,19 @@\n-    VdbeBranchTaken(takeJump||alreadyExists==0,2);\n-    if( takeJump || !alreadyExists ) goto jump_to_p2;\n-    if( pOp->opcode==OP_IfNoHope ) pC->seekHit = pOp->p4.i;\n+    if( !alreadyExists ){\n+      VdbeBranchTaken(1,2);\n+      goto jump_to_p2;\n+    }\n+    if( pOp->opcode==OP_NoConflict ){\n+      \/* For the OP_NoConflict opcode, take the jump if any of the\n+      ** input fields are NULL, since any key with a NULL will not\n+      ** conflict *\/\n+      for(ii=0; ii<r.nField; ii++){\n+        if( r.aMem[ii].flags & MEM_Null ){\n+          VdbeBranchTaken(1,2);\n+          goto jump_to_p2;\n+        }\n+      }\n+    }\n+    VdbeBranchTaken(0,2);\n+    if( pOp->opcode==OP_IfNoHope ){\n+      pC->seekHit = pOp->p4.i;\n+    }\n@@ -92335,1 +94148,1 @@\n-** Synopsis: r[P2]=rowid\n+** Synopsis: r[P2]=PX rowid of P1\n@@ -92390,0 +94203,3 @@\n+**\n+** If cursor P1 is not previously opened, open it now to a special\n+** pseudo-cursor that always returns NULL for every column.\n@@ -92396,1 +94212,10 @@\n-  assert( pC!=0 );\n+  if( pC==0 ){\n+    \/* If the cursor is not already open, create a special kind of\n+    ** pseudo-cursor that always gives null rows. *\/\n+    pC = allocateCursor(p, pOp->p1, 1, CURTYPE_PSEUDO);\n+    if( pC==0 ) goto no_mem;\n+    pC->seekResult = 0;\n+    pC->isTable = 1;\n+    pC->noReuse = 1;\n+    pC->uc.pCursor = sqlite3BtreeFakeValidCursor();\n+  }\n@@ -92569,1 +94394,1 @@\n-\/* Opcode: Next P1 P2 P3 P4 P5\n+\/* Opcode: Next P1 P2 P3 * P5\n@@ -92588,3 +94413,0 @@\n-** P4 is always of type P4_ADVANCE. The function pointer points to\n-** sqlite3BtreeNext().\n-**\n@@ -92596,1 +94418,1 @@\n-\/* Opcode: Prev P1 P2 P3 P4 P5\n+\/* Opcode: Prev P1 P2 P3 * P5\n@@ -92616,3 +94438,0 @@\n-** P4 is always of type P4_ADVANCE. The function pointer points to\n-** sqlite3BtreePrevious().\n-**\n@@ -92636,0 +94455,1 @@\n+\n@@ -92637,1 +94457,0 @@\n-case OP_Next:          \/* jump *\/\n@@ -92644,2 +94463,5 @@\n-  assert( pOp->opcode!=OP_Next || pOp->p4.xAdvance==sqlite3BtreeNext );\n-  assert( pOp->opcode!=OP_Prev || pOp->p4.xAdvance==sqlite3BtreePrevious );\n+  assert( pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE\n+       || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope\n+       || pC->seekOp==OP_NullRow);\n+  rc = sqlite3BtreePrevious(pC->uc.pCursor, pOp->p3);\n+  goto next_tail;\n@@ -92647,4 +94469,8 @@\n-  \/* The Next opcode is only used after SeekGT, SeekGE, Rewind, and Found.\n-  ** The Prev opcode is only used after SeekLT, SeekLE, and Last. *\/\n-  assert( pOp->opcode!=OP_Next\n-       || pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE\n+case OP_Next:          \/* jump *\/\n+  assert( pOp->p1>=0 && pOp->p1<p->nCursor );\n+  assert( pOp->p5<ArraySize(p->aCounter) );\n+  pC = p->apCsr[pOp->p1];\n+  assert( pC!=0 );\n+  assert( pC->deferredMoveto==0 );\n+  assert( pC->eCurType==CURTYPE_BTREE );\n+  assert( pC->seekOp==OP_SeekGT || pC->seekOp==OP_SeekGE\n@@ -92654,4 +94480,1 @@\n-  assert( pOp->opcode!=OP_Prev\n-       || pC->seekOp==OP_SeekLT || pC->seekOp==OP_SeekLE\n-       || pC->seekOp==OP_Last   || pC->seekOp==OP_IfNoHope\n-       || pC->seekOp==OP_NullRow);\n+  rc = sqlite3BtreeNext(pC->uc.pCursor, pOp->p3);\n@@ -92659,1 +94482,0 @@\n-  rc = pOp->p4.xAdvance(pC->uc.pCursor, pOp->p3);\n@@ -92846,1 +94668,1 @@\n-  assert( pC->eCurType==CURTYPE_BTREE );\n+  assert( pC->eCurType==CURTYPE_BTREE || IsNullCursor(pC) );\n@@ -92848,1 +94670,1 @@\n-  assert( pC->isTable==0 );\n+  assert( pC->isTable==0 || IsNullCursor(pC) );\n@@ -92877,0 +94699,1 @@\n+      pTabCur->cacheStatus = CACHE_STALE;\n@@ -92878,2 +94701,0 @@\n-      pTabCur->aAltMap = pOp->p4.ai;\n-      assert( !pC->isEphemeral );\n@@ -92881,0 +94702,2 @@\n+      pTabCur->ub.aAltMap = pOp->p4.ai;\n+      assert( !pC->isEphemeral );\n@@ -93011,1 +94834,1 @@\n-    sqlite3VdbeMemRelease(&m);\n+    sqlite3VdbeMemReleaseMalloc(&m);\n@@ -93892,0 +95715,1 @@\n+  pCtx->enc = encoding;\n@@ -94021,3 +95845,0 @@\n-  if( sqlite3VdbeMemTooBig(pMem) ){\n-    goto too_big;\n-  }\n@@ -94402,1 +96223,1 @@\n-  pCur = allocateCursor(p, pOp->p1, 0, -1, CURTYPE_VTAB);\n+  pCur = allocateCursor(p, pOp->p1, 0, CURTYPE_VTAB);\n@@ -94415,0 +96236,28 @@\n+#ifndef SQLITE_OMIT_VIRTUALTABLE\n+\/* Opcode: VInitIn P1 P2 P3 * *\n+** Synopsis: r[P2]=ValueList(P1,P3)\n+**\n+** Set register P2 to be a pointer to a ValueList object for cursor P1\n+** with cache register P3 and output register P3+1.  This ValueList object\n+** can be used as the first argument to sqlite3_vtab_in_first() and\n+** sqlite3_vtab_in_next() to extract all of the values stored in the P1\n+** cursor.  Register P3 is used to hold the values returned by\n+** sqlite3_vtab_in_first() and sqlite3_vtab_in_next().\n+*\/\n+case OP_VInitIn: {        \/* out2 *\/\n+  VdbeCursor *pC;         \/* The cursor containing the RHS values *\/\n+  ValueList *pRhs;        \/* New ValueList object to put in reg[P2] *\/\n+\n+  pC = p->apCsr[pOp->p1];\n+  pRhs = sqlite3_malloc64( sizeof(*pRhs) );\n+  if( pRhs==0 ) goto no_mem;\n+  pRhs->pCsr = pC->uc.pCursor;\n+  pRhs->pOut = &aMem[pOp->p3];\n+  pOut = out2Prerelease(p, pOp);\n+  pOut->flags = MEM_Null;\n+  sqlite3VdbeMemSetPointer(pOut, pRhs, \"ValueList\", sqlite3_free);\n+  break;\n+}\n+#endif \/* SQLITE_OMIT_VIRTUALTABLE *\/\n+\n+\n@@ -94503,1 +96352,0 @@\n-  assert( pCur->eCurType==CURTYPE_VTAB );\n@@ -94511,0 +96359,1 @@\n+  assert( pCur->eCurType==CURTYPE_VTAB );\n@@ -94516,0 +96365,1 @@\n+  sContext.enc = encoding;\n@@ -94534,3 +96384,0 @@\n-  if( sqlite3VdbeMemTooBig(pDest) ){\n-    goto too_big;\n-  }\n@@ -94803,0 +96650,1 @@\n+    pCtx->enc = encoding;\n@@ -94829,5 +96677,4 @@\n-  \/* Copy the result of the function into register P3 *\/\n-  if( pOut->flags & (MEM_Str|MEM_Blob) ){\n-    sqlite3VdbeChangeEncoding(pOut, encoding);\n-    if( sqlite3VdbeMemTooBig(pOut) ) goto too_big;\n-  }\n+  assert( (pOut->flags&MEM_Str)==0\n+       || pOut->enc==encoding\n+       || db->mallocFailed );\n+  assert( !sqlite3VdbeMemTooBig(pOut) );\n@@ -94840,0 +96687,82 @@\n+\/* Opcode: ClrSubtype P1 * * * *\n+** Synopsis:  r[P1].subtype = 0\n+**\n+** Clear the subtype from register P1.\n+*\/\n+case OP_ClrSubtype: {   \/* in1 *\/\n+  pIn1 = &aMem[pOp->p1];\n+  pIn1->flags &= ~MEM_Subtype;\n+  break;\n+}\n+\n+\/* Opcode: FilterAdd P1 * P3 P4 *\n+** Synopsis: filter(P1) += key(P3@P4)\n+**\n+** Compute a hash on the P4 registers starting with r[P3] and\n+** add that hash to the bloom filter contained in r[P1].\n+*\/\n+case OP_FilterAdd: {\n+  u64 h;\n+\n+  assert( pOp->p1>0 && pOp->p1<=(p->nMem+1 - p->nCursor) );\n+  pIn1 = &aMem[pOp->p1];\n+  assert( pIn1->flags & MEM_Blob );\n+  assert( pIn1->n>0 );\n+  h = filterHash(aMem, pOp);\n+#ifdef SQLITE_DEBUG\n+  if( db->flags&SQLITE_VdbeTrace ){\n+    int ii;\n+    for(ii=pOp->p3; ii<pOp->p3+pOp->p4.i; ii++){\n+      registerTrace(ii, &aMem[ii]);\n+    }\n+    printf(\"hash: %llu modulo %d -> %u\\n\", h, pIn1->n, (int)(h%pIn1->n));\n+  }\n+#endif\n+  h %= pIn1->n;\n+  pIn1->z[h\/8] |= 1<<(h&7);\n+  break;\n+}\n+\n+\/* Opcode: Filter P1 P2 P3 P4 *\n+** Synopsis: if key(P3@P4) not in filter(P1) goto P2\n+**\n+** Compute a hash on the key contained in the P4 registers starting\n+** with r[P3].  Check to see if that hash is found in the\n+** bloom filter hosted by register P1.  If it is not present then\n+** maybe jump to P2.  Otherwise fall through.\n+**\n+** False negatives are harmless.  It is always safe to fall through,\n+** even if the value is in the bloom filter.  A false negative causes\n+** more CPU cycles to be used, but it should still yield the correct\n+** answer.  However, an incorrect answer may well arise from a\n+** false positive - if the jump is taken when it should fall through.\n+*\/\n+case OP_Filter: {          \/* jump *\/\n+  u64 h;\n+\n+  assert( pOp->p1>0 && pOp->p1<=(p->nMem+1 - p->nCursor) );\n+  pIn1 = &aMem[pOp->p1];\n+  assert( (pIn1->flags & MEM_Blob)!=0 );\n+  assert( pIn1->n >= 1 );\n+  h = filterHash(aMem, pOp);\n+#ifdef SQLITE_DEBUG\n+  if( db->flags&SQLITE_VdbeTrace ){\n+    int ii;\n+    for(ii=pOp->p3; ii<pOp->p3+pOp->p4.i; ii++){\n+      registerTrace(ii, &aMem[ii]);\n+    }\n+    printf(\"hash: %llu modulo %d -> %u\\n\", h, pIn1->n, (int)(h%pIn1->n));\n+  }\n+#endif\n+  h %= pIn1->n;\n+  if( (pIn1->z[h\/8] & (1<<(h&7)))==0 ){\n+    VdbeBranchTaken(1, 2);\n+    p->aCounter[SQLITE_STMTSTATUS_FILTER_HIT]++;\n+    goto jump_to_p2;\n+  }else{\n+    p->aCounter[SQLITE_STMTSTATUS_FILTER_MISS]++;\n+    VdbeBranchTaken(0, 2);\n+  }\n+  break;\n+}\n+\n@@ -94888,1 +96817,1 @@\n-   && !p->doingRerun\n+   && p->minWriteFileFormat!=254  \/* tag-20220401a *\/\n@@ -95117,1 +97046,1 @@\n-  sqlite3VdbeHalt(p);\n+  if( p->eVdbeState==VDBE_RUN_STATE ) sqlite3VdbeHalt(p);\n@@ -95330,2 +97259,2 @@\n-  do {\n-    memset(&sParse, 0, sizeof(Parse));\n+  while(1){\n+    sqlite3ParseObjectInit(&sParse,db);\n@@ -95333,1 +97262,0 @@\n-    sParse.db = db;\n@@ -95510,1 +97438,3 @@\n-  } while( (++nAttempt)<SQLITE_MAX_SCHEMA_RETRY && rc==SQLITE_SCHEMA );\n+    if( (++nAttempt)>=SQLITE_MAX_SCHEMA_RETRY || rc!=SQLITE_SCHEMA ) break;\n+    sqlite3ParseObjectReset(&sParse);\n+  }\n@@ -95521,1 +97451,1 @@\n-  sqlite3ParserReset(&sParse);\n+  sqlite3ParseObjectReset(&sParse);\n@@ -96656,1 +98586,2 @@\n-  assert( pCsr->pKeyInfo && pCsr->pBtx==0 );\n+  assert( pCsr->pKeyInfo );\n+  assert( !pCsr->isEphemeral );\n@@ -99069,0 +101000,3 @@\n+\/* Forward reference *\/\n+static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size);\n+\n@@ -99099,3 +101033,4 @@\n-    assert( iOfst==p->endpoint.iOffset || iOfst==0 );\n-#if defined(SQLITE_ENABLE_ATOMIC_WRITE) \\\n- || defined(SQLITE_ENABLE_BATCH_ATOMIC_WRITE)\n+    assert( iOfst<=p->endpoint.iOffset );\n+    if( iOfst>0 && iOfst!=p->endpoint.iOffset ){\n+      memjrnlTruncate(pJfd, iOfst);\n+    }\n@@ -99105,5 +101040,1 @@\n-    }else\n-#else\n-    assert( iOfst>0 || p->pFirst==0 );\n-#endif\n-    {\n+    }else{\n@@ -99115,0 +101046,1 @@\n+        assert( pChunk!=0 || iChunkOffset==0 );\n@@ -99129,1 +101061,1 @@\n-          p->endpoint.pChunk = pNew;\n+          pChunk = p->endpoint.pChunk = pNew;\n@@ -99132,1 +101064,2 @@\n-        memcpy((u8*)p->endpoint.pChunk->zChunk + iChunkOffset, zWrite, iSpace);\n+        assert( pChunk!=0 );\n+        memcpy((u8*)pChunk->zChunk + iChunkOffset, zWrite, iSpace);\n@@ -99675,0 +101608,1 @@\n+    Expr temp;\n@@ -99680,16 +101614,3 @@\n-\n-    \/* Before calling sqlite3ExprDelete(), set the EP_Static flag. This\n-    ** prevents ExprDelete() from deleting the Expr structure itself,\n-    ** allowing it to be repopulated by the memcpy() on the following line.\n-    ** The pExpr->u.zToken might point into memory that will be freed by the\n-    ** sqlite3DbFree(db, pDup) on the last line of this block, so be sure to\n-    ** make a copy of the token before doing the sqlite3DbFree().\n-    *\/\n-    ExprSetProperty(pExpr, EP_Static);\n-    sqlite3ExprDelete(db, pExpr);\n-    memcpy(pExpr, pDup, sizeof(*pExpr));\n-    if( !ExprHasProperty(pExpr, EP_IntValue) && pExpr->u.zToken!=0 ){\n-      assert( (pExpr->flags & (EP_Reduced|EP_TokenOnly))==0 );\n-      pExpr->u.zToken = sqlite3DbStrDup(db, pExpr->u.zToken);\n-      pExpr->flags |= EP_MemToken;\n-    }\n+    memcpy(&temp, pDup, sizeof(Expr));\n+    memcpy(pDup, pExpr, sizeof(Expr));\n+    memcpy(pExpr, &temp, sizeof(Expr));\n@@ -99701,17 +101622,3 @@\n-    sqlite3DbFree(db, pDup);\n-  }\n-}\n-\n-\n-\/*\n-** Return TRUE if the name zCol occurs anywhere in the USING clause.\n-**\n-** Return FALSE if the USING clause is NULL or if it does not contain\n-** zCol.\n-*\/\n-static int nameInUsingClause(IdList *pUsing, const char *zCol){\n-  if( pUsing ){\n-    int k;\n-    for(k=0; k<pUsing->nId; k++){\n-      if( sqlite3StrICmp(pUsing->a[k].zName, zCol)==0 ) return 1;\n-    }\n+    sqlite3ParserAddCleanup(pParse,\n+      (void(*)(sqlite3*,void*))sqlite3ExprDelete,\n+      pDup);\n@@ -99719,1 +101626,0 @@\n-  return 0;\n@@ -99737,1 +101643,1 @@\n-  if( pItem->eEName!=ENAME_TAB ) return 0;\n+  if( pItem->fg.eEName!=ENAME_TAB ) return 0;\n@@ -99798,0 +101704,23 @@\n+\/*\n+** Create a new expression term for the column specified by pMatch and\n+** iColumn.  Append this new expression term to the FULL JOIN Match set\n+** in *ppList.  Create a new *ppList if this is the first term in the\n+** set.\n+*\/\n+static void extendFJMatch(\n+  Parse *pParse,          \/* Parsing context *\/\n+  ExprList **ppList,      \/* ExprList to extend *\/\n+  SrcItem *pMatch,        \/* Source table containing the column *\/\n+  i16 iColumn             \/* The column number *\/\n+){\n+  Expr *pNew = sqlite3ExprAlloc(pParse->db, TK_COLUMN, 0, 0);\n+  if( pNew ){\n+    pNew->iTable = pMatch->iCursor;\n+    pNew->iColumn = iColumn;\n+    pNew->y.pTab = pMatch->pTab;\n+    assert( (pMatch->fg.jointype & (JT_LEFT|JT_LTORJ))!=0 );\n+    ExprSetProperty(pNew, EP_CanBeNull);\n+    *ppList = sqlite3ExprListAppend(pParse, *ppList, pNew);\n+  }\n+}\n+\n@@ -99843,1 +101772,1 @@\n-  Table *pTab = 0;                  \/* Table hold the row *\/\n+  Table *pTab = 0;                  \/* Table holding the row *\/\n@@ -99845,0 +101774,1 @@\n+  ExprList *pFJMatch = 0;           \/* Matches for FULL JOIN .. USING *\/\n@@ -99848,0 +101778,1 @@\n+  assert( zDb==0 || zTab!=0 );\n@@ -99896,1 +101827,8 @@\n-        if( pItem->pSelect && (pItem->pSelect->selFlags & SF_NestedFrom)!=0 ){\n+        assert( (int)pItem->fg.isNestedFrom == IsNestedFrom(pItem->pSelect) );\n+        if( pItem->fg.isNestedFrom ){\n+          \/* In this case, pItem is a subquery that has been formed from a\n+          ** parenthesized subset of the FROM clause terms.  Example:\n+          **   .... FROM t1 LEFT JOIN (t2 RIGHT JOIN t3 USING(x)) USING(y) ...\n+          **                          \\_________________________\/\n+          **             This pItem -------------^\n+          *\/\n@@ -99898,0 +101836,1 @@\n+          assert( pItem->pSelect!=0 );\n@@ -99899,0 +101838,2 @@\n+          assert( pEList!=0 );\n+          assert( pEList->nExpr==pTab->nCol );\n@@ -99900,6 +101841,26 @@\n-            if( sqlite3MatchEName(&pEList->a[j], zCol, zTab, zDb) ){\n-              cnt++;\n-              cntTab = 2;\n-              pMatch = pItem;\n-              pExpr->iColumn = j;\n-              hit = 1;\n+            if( !sqlite3MatchEName(&pEList->a[j], zCol, zTab, zDb) ){\n+              continue;\n+            }\n+            if( cnt>0 ){\n+              if( pItem->fg.isUsing==0\n+               || sqlite3IdListIndex(pItem->u3.pUsing, zCol)<0\n+              ){\n+                \/* Two or more tables have the same column name which is\n+                ** not joined by USING.  This is an error.  Signal as much\n+                ** by clearing pFJMatch and letting cnt go above 1. *\/\n+                sqlite3ExprListDelete(db, pFJMatch);\n+                pFJMatch = 0;\n+              }else\n+              if( (pItem->fg.jointype & JT_RIGHT)==0 ){\n+                \/* An INNER or LEFT JOIN.  Use the left-most table *\/\n+                continue;\n+              }else\n+              if( (pItem->fg.jointype & JT_LEFT)==0 ){\n+                \/* A RIGHT JOIN.  Use the right-most table *\/\n+                cnt = 0;\n+                sqlite3ExprListDelete(db, pFJMatch);\n+                pFJMatch = 0;\n+              }else{\n+                \/* For a FULL JOIN, we must construct a coalesce() func *\/\n+                extendFJMatch(pParse, &pFJMatch, pMatch, pExpr->iColumn);\n+              }\n@@ -99907,0 +101868,7 @@\n+            cnt++;\n+            cntTab = 2;\n+            pMatch = pItem;\n+            pExpr->iColumn = j;\n+            pEList->a[j].fg.bUsed = 1;\n+            hit = 1;\n+            if( pEList->a[j].fg.bUsingTerm ) break;\n@@ -99910,3 +101878,1 @@\n-        if( zDb && pTab->pSchema!=pSchema ){\n-          continue;\n-        }\n+        assert( zDb==0 || zTab!=0 );\n@@ -99914,1 +101880,6 @@\n-          const char *zTabName = pItem->zAlias ? pItem->zAlias : pTab->zName;\n+          const char *zTabName;\n+          if( zDb ){\n+            if( pTab->pSchema!=pSchema ) continue;\n+            if( pSchema==0 && strcmp(zDb,\"*\")!=0 ) continue;\n+          }\n+          zTabName = pItem->zAlias ? pItem->zAlias : pTab->zName;\n@@ -99929,7 +101900,23 @@\n-            \/* If there has been exactly one prior match and this match\n-            ** is for the right-hand table of a NATURAL JOIN or is in a\n-            ** USING clause, then skip this match.\n-            *\/\n-            if( cnt==1 ){\n-              if( pItem->fg.jointype & JT_NATURAL ) continue;\n-              if( nameInUsingClause(pItem->pUsing, zCol) ) continue;\n+            if( cnt>0 ){\n+              if( pItem->fg.isUsing==0\n+               || sqlite3IdListIndex(pItem->u3.pUsing, zCol)<0\n+              ){\n+                \/* Two or more tables have the same column name which is\n+                ** not joined by USING.  This is an error.  Signal as much\n+                ** by clearing pFJMatch and letting cnt go above 1. *\/\n+                sqlite3ExprListDelete(db, pFJMatch);\n+                pFJMatch = 0;\n+              }else\n+              if( (pItem->fg.jointype & JT_RIGHT)==0 ){\n+                \/* An INNER or LEFT JOIN.  Use the left-most table *\/\n+                continue;\n+              }else\n+              if( (pItem->fg.jointype & JT_LEFT)==0 ){\n+                \/* A RIGHT JOIN.  Use the right-most table *\/\n+                cnt = 0;\n+                sqlite3ExprListDelete(db, pFJMatch);\n+                pFJMatch = 0;\n+              }else{\n+                \/* For a FULL JOIN, we must construct a coalesce() func *\/\n+                extendFJMatch(pParse, &pFJMatch, pMatch, pExpr->iColumn);\n+              }\n@@ -99941,0 +101928,3 @@\n+            if( pItem->fg.isNestedFrom ){\n+              sqlite3SrcItemColumnUsed(pItem, j);\n+            }\n@@ -99953,3 +101943,1 @@\n-        \/* RIGHT JOIN not (yet) supported *\/\n-        assert( (pMatch->fg.jointype & JT_RIGHT)==0 );\n-        if( (pMatch->fg.jointype & JT_LEFT)!=0 ){\n+        if( (pMatch->fg.jointype & (JT_LEFT|JT_LTORJ))!=0 ){\n@@ -100042,0 +102030,1 @@\n+              pExpr->op2 = TK_COLUMN;\n@@ -100108,1 +102097,1 @@\n-        if( pEList->a[j].eEName==ENAME_NAME\n+        if( pEList->a[j].fg.eEName==ENAME_NAME\n@@ -100195,2 +102184,5 @@\n-  ** cnt==0 means there was not match.  cnt>1 means there were two or\n-  ** more matches.  Either way, we have an error.\n+  ** cnt==0 means there was not match.\n+  ** cnt>1 means there were two or more matches.\n+  **\n+  ** cnt==0 is always an error.  cnt>1 is often an error, but might\n+  ** be multiple matches for a NATURAL LEFT JOIN or a LEFT JOIN USING.\n@@ -100198,0 +102190,2 @@\n+  assert( pFJMatch==0 || cnt>0 );\n+  assert( !ExprHasProperty(pExpr, EP_xIsSelect|EP_IntValue) );\n@@ -100200,0 +102194,21 @@\n+    if( pFJMatch ){\n+      if( pFJMatch->nExpr==cnt-1 ){\n+        if( ExprHasProperty(pExpr,EP_Leaf) ){\n+          ExprClearProperty(pExpr,EP_Leaf);\n+        }else{\n+          sqlite3ExprDelete(db, pExpr->pLeft);\n+          pExpr->pLeft = 0;\n+          sqlite3ExprDelete(db, pExpr->pRight);\n+          pExpr->pRight = 0;\n+        }\n+        extendFJMatch(pParse, &pFJMatch, pMatch, pExpr->iColumn);\n+        pExpr->op = TK_FUNCTION;\n+        pExpr->u.zToken = \"coalesce\";\n+        pExpr->x.pList = pFJMatch;\n+        cnt = 1;\n+        goto lookupname_end;\n+      }else{\n+        sqlite3ExprListDelete(db, pFJMatch);\n+        pFJMatch = 0;\n+      }\n+    }\n@@ -100208,0 +102223,1 @@\n+    sqlite3RecordErrorOffsetOfExpr(pParse->db, pExpr);\n@@ -100211,0 +102227,10 @@\n+  assert( pFJMatch==0 );\n+\n+  \/* Remove all substructure from pExpr *\/\n+  if( !ExprHasProperty(pExpr,(EP_TokenOnly|EP_Leaf)) ){\n+    sqlite3ExprDelete(db, pExpr->pLeft);\n+    pExpr->pLeft = 0;\n+    sqlite3ExprDelete(db, pExpr->pRight);\n+    pExpr->pRight = 0;\n+    ExprSetProperty(pExpr, EP_Leaf);\n+  }\n@@ -100230,8 +102256,0 @@\n-  \/* Clean up and return\n-  *\/\n-  if( !ExprHasProperty(pExpr,(EP_TokenOnly|EP_Leaf)) ){\n-    sqlite3ExprDelete(db, pExpr->pLeft);\n-    pExpr->pLeft = 0;\n-    sqlite3ExprDelete(db, pExpr->pRight);\n-    pExpr->pRight = 0;\n-  }\n@@ -100239,1 +102257,0 @@\n-  ExprSetProperty(pExpr, EP_Leaf);\n@@ -100316,1 +102333,2 @@\n-   Expr *pExpr          \/* Invalidate this expression on error *\/\n+   Expr *pExpr,         \/* Invalidate this expression on error *\/\n+   Expr *pError         \/* Associate error with this expression *\/\n@@ -100328,0 +102346,1 @@\n+  sqlite3RecordErrorOffsetOfExpr(pParse->db, pError);\n@@ -100329,1 +102348,1 @@\n-#define sqlite3ResolveNotValid(P,N,M,X,E) \\\n+#define sqlite3ResolveNotValid(P,N,M,X,E,R) \\\n@@ -100331,1 +102350,1 @@\n-  if( ((N)->ncFlags & (X))!=0 ) notValidImpl(P,N,M,E);\n+  if( ((N)->ncFlags & (X))!=0 ) notValidImpl(P,N,M,E,R);\n@@ -100422,1 +102441,1 @@\n-        testcase( ExprHasProperty(pExpr, EP_FromJoin) );\n+        testcase( ExprHasProperty(pExpr, EP_OuterON) );\n@@ -100466,1 +102485,1 @@\n-                               NC_IdxExpr|NC_GenCol, 0);\n+                               NC_IdxExpr|NC_GenCol, 0, pExpr);\n@@ -100497,1 +102516,0 @@\n-      int nId;                    \/* Number of characters in function name *\/\n@@ -100507,1 +102525,0 @@\n-      nId = sqlite3Strlen30(zId);\n@@ -100524,2 +102541,2 @@\n-                \"second argument to likelihood() must be a \"\n-                \"constant between 0.0 and 1.0\");\n+                \"second argument to %#T() must be a \"\n+                \"constant between 0.0 and 1.0\", pExpr);\n@@ -100546,2 +102563,2 @@\n-              sqlite3ErrorMsg(pParse, \"not authorized to use function: %s\",\n-                                      pDef->zName);\n+              sqlite3ErrorMsg(pParse, \"not authorized to use function: %#T\",\n+                                      pExpr);\n@@ -100570,1 +102587,1 @@\n-                                 NC_IdxExpr|NC_PartIdx|NC_GenCol, 0);\n+                                 NC_IdxExpr|NC_PartIdx|NC_GenCol, 0, pExpr);\n@@ -100583,1 +102600,1 @@\n-          ** used to activate internal functionsn for testing purposes *\/\n+          ** used to activate internal functions for testing purposes *\/\n@@ -100602,1 +102619,1 @@\n-              \"%.*s() may not be used as a window function\", nId, zId\n+              \"%#T() may not be used as a window function\", pExpr\n@@ -100616,1 +102633,1 @@\n-          sqlite3ErrorMsg(pParse, \"misuse of %s function %.*s()\",zType,nId,zId);\n+          sqlite3ErrorMsg(pParse, \"misuse of %s function %#T()\",zType,pExpr);\n@@ -100622,1 +102639,1 @@\n-          sqlite3ErrorMsg(pParse,\"misuse of aggregate function %.*s()\",nId,zId);\n+          sqlite3ErrorMsg(pParse,\"misuse of aggregate function %#T()\",pExpr);\n@@ -100632,1 +102649,1 @@\n-          sqlite3ErrorMsg(pParse, \"no such function: %.*s\", nId, zId);\n+          sqlite3ErrorMsg(pParse, \"no such function: %#T\", pExpr);\n@@ -100635,2 +102652,2 @@\n-          sqlite3ErrorMsg(pParse,\"wrong number of arguments to function %.*s()\",\n-               nId, zId);\n+          sqlite3ErrorMsg(pParse,\"wrong number of arguments to function %#T()\",\n+               pExpr);\n@@ -100642,2 +102659,2 @@\n-              \"FILTER may not be used with non-aggregate %.*s()\",\n-              nId, zId\n+              \"FILTER may not be used with non-aggregate %#T()\",\n+              pExpr\n@@ -100728,1 +102745,1 @@\n-          notValidImpl(pParse, pNC, \"subqueries\", pExpr);\n+          notValidImpl(pParse, pNC, \"subqueries\", pExpr, pExpr);\n@@ -100746,1 +102763,1 @@\n-               NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr);\n+               NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol, pExpr, pExpr);\n@@ -100798,0 +102815,1 @@\n+        sqlite3RecordErrorOffsetOfExpr(pParse->db, pExpr);\n@@ -100802,1 +102820,2 @@\n-  return (pParse->nErr || pParse->db->mallocFailed) ? WRC_Abort : WRC_Continue;\n+  assert( pParse->db->mallocFailed==0 || pParse->nErr!=0 );\n+  return pParse->nErr ? WRC_Abort : WRC_Continue;\n@@ -100831,1 +102850,1 @@\n-      if( pEList->a[i].eEName==ENAME_NAME\n+      if( pEList->a[i].fg.eEName==ENAME_NAME\n@@ -100910,1 +102929,2 @@\n-  int mx                 \/* Largest permissible value of i *\/\n+  int mx,                \/* Largest permissible value of i *\/\n+  Expr *pError           \/* Associate the error with the expression *\/\n@@ -100915,0 +102935,1 @@\n+  sqlite3RecordErrorOffsetOfExpr(pParse->db, pError);\n@@ -100950,1 +102971,1 @@\n-    pOrderBy->a[i].done = 0;\n+    pOrderBy->a[i].fg.done = 0;\n@@ -100965,1 +102986,1 @@\n-      if( pItem->done ) continue;\n+      if( pItem->fg.done ) continue;\n@@ -100970,1 +102991,1 @@\n-          resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr);\n+          resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr, pE);\n@@ -101018,1 +103039,1 @@\n-        pItem->done = 1;\n+        pItem->fg.done = 1;\n@@ -101026,1 +103047,1 @@\n-    if( pOrderBy->a[i].done==0 ){\n+    if( pOrderBy->a[i].fg.done==0 ){\n@@ -101066,1 +103087,1 @@\n-        resolveOutOfRangeError(pParse, zType, i+1, pEList->nExpr);\n+        resolveOutOfRangeError(pParse, zType, i+1, pEList->nExpr, 0);\n@@ -101158,1 +103179,1 @@\n-        resolveOutOfRangeError(pParse, zType, i+1, nResult);\n+        resolveOutOfRangeError(pParse, zType, i+1, nResult, pE2);\n@@ -101216,1 +103237,1 @@\n-    return (pParse->nErr || db->mallocFailed) ? WRC_Abort : WRC_Prune;\n+    return pParse->nErr ? WRC_Abort : WRC_Prune;\n@@ -101264,1 +103285,2 @@\n-        if( pParse->nErr || db->mallocFailed ) return WRC_Abort;\n+        if( pParse->nErr ) return WRC_Abort;\n+        assert( db->mallocFailed==0 );\n@@ -101315,2 +103337,2 @@\n-      if( !pGroupBy ){\n-        sqlite3ErrorMsg(pParse, \"a GROUP BY clause is required before HAVING\");\n+      if( (p->selFlags & SF_Aggregate)==0 ){\n+        sqlite3ErrorMsg(pParse, \"HAVING clause on a non-aggregate query\");\n@@ -102410,3 +104432,2 @@\n-  int nHeight = 0;\n-  heightOfExpr(p->pLeft, &nHeight);\n-  heightOfExpr(p->pRight, &nHeight);\n+  int nHeight = p->pLeft ? p->pLeft->nHeight : 0;\n+  if( p->pRight && p->pRight->nHeight>nHeight ) nHeight = p->pRight->nHeight;\n@@ -102711,0 +104732,2 @@\n+  assert( !ExprHasProperty(pNew, EP_InnerON|EP_OuterON) );\n+  pNew->w.iOfst = (int)(pToken->z - pParse->zTail);\n@@ -102754,1 +104777,1 @@\n-      sqlite3ErrorMsg(pParse, \"unsafe use of %s()\", pDef->zName);\n+      sqlite3ErrorMsg(pParse, \"unsafe use of %#T()\", pExpr);\n@@ -102810,0 +104833,1 @@\n+        sqlite3RecordErrorOffsetOfExpr(pParse->db, pExpr);\n@@ -102837,0 +104861,1 @@\n+    sqlite3RecordErrorOffsetOfExpr(pParse->db, pExpr);\n@@ -102888,0 +104913,12 @@\n+\/*\n+** Clear both elements of an OnOrUsing object\n+*\/\n+SQLITE_PRIVATE void sqlite3ClearOnOrUsing(sqlite3 *db, OnOrUsing *p){\n+  if( p==0 ){\n+    \/* Nothing to clear *\/\n+  }else if( p->pOn ){\n+    sqlite3ExprDeleteNN(db, p->pOn);\n+  }else if( p->pUsing ){\n+    sqlite3IdListDelete(db, p->pUsing);\n+  }\n+}\n@@ -102974,1 +105011,1 @@\n-    assert( !ExprHasProperty(p, EP_FromJoin) );\n+    assert( !ExprHasProperty(p, EP_OuterON) );\n@@ -103154,0 +105191,1 @@\n+        pRet->a[i].eM10d = p->a[i].eM10d;\n@@ -103254,5 +105292,2 @@\n-    pItem->sortFlags = pOldItem->sortFlags;\n-    pItem->eEName = pOldItem->eEName;\n-    pItem->done = 0;\n-    pItem->bNulls = pOldItem->bNulls;\n-    pItem->bSorterRef = pOldItem->bSorterRef;\n+    pItem->fg = pOldItem->fg;\n+    pItem->fg.done = 0;\n@@ -103310,2 +105345,6 @@\n-    pNewItem->pOn = sqlite3ExprDup(db, pOldItem->pOn, flags);\n-    pNewItem->pUsing = sqlite3IdListDup(db, pOldItem->pUsing);\n+    if( pOldItem->fg.isUsing ){\n+      assert( pNewItem->fg.isUsing );\n+      pNewItem->u3.pUsing = sqlite3IdListDup(db, pOldItem->u3.pUsing);\n+    }else{\n+      pNewItem->u3.pOn = sqlite3ExprDup(db, pOldItem->u3.pOn, flags);\n+    }\n@@ -103321,1 +105360,2 @@\n-  pNew = sqlite3DbMallocRawNN(db, sizeof(*pNew) );\n+  assert( p->eU4!=EU4_EXPR );\n+  pNew = sqlite3DbMallocRawNN(db, sizeof(*pNew)+(p->nId-1)*sizeof(p->a[0]) );\n@@ -103324,8 +105364,1 @@\n-  pNew->a = sqlite3DbMallocRawNN(db, p->nId*sizeof(p->a[0]) );\n-  if( pNew->a==0 ){\n-    sqlite3DbFreeNN(db, pNew);\n-    return 0;\n-  }\n-  \/* Note that because the size of the allocation for p->a[] is not\n-  ** necessarily a power of two, sqlite3IdListAppend() may not be called\n-  ** on the duplicate created by this function. *\/\n+  pNew->eU4 = p->eU4;\n@@ -103334,1 +105367,1 @@\n-    struct IdList_item *pOldItem = &p->a[i];\n+    const struct IdList_item *pOldItem = &p->a[i];\n@@ -103336,1 +105369,1 @@\n-    pNewItem->idx = pOldItem->idx;\n+    pNewItem->u4 = pOldItem->u4;\n@@ -103560,1 +105593,1 @@\n-  assert( pItem->bNulls==0 );\n+  assert( pItem->fg.bNulls==0 );\n@@ -103564,1 +105597,1 @@\n-  pItem->sortFlags = (u8)iSortOrder;\n+  pItem->fg.sortFlags = (u8)iSortOrder;\n@@ -103567,1 +105600,1 @@\n-    pItem->bNulls = 1;\n+    pItem->fg.bNulls = 1;\n@@ -103569,1 +105602,1 @@\n-      pItem->sortFlags |= KEYINFO_ORDER_BIGNULL;\n+      pItem->fg.sortFlags |= KEYINFO_ORDER_BIGNULL;\n@@ -103595,1 +105628,1 @@\n-    assert( pItem->eEName==ENAME_NAME );\n+    assert( pItem->fg.eEName==ENAME_NAME );\n@@ -103630,1 +105663,1 @@\n-      pItem->eEName = ENAME_SPAN;\n+      pItem->fg.eEName = ENAME_SPAN;\n@@ -103802,1 +105835,1 @@\n-  ** the ON or USING clauses of a left join disqualifies the expression\n+  ** the ON or USING clauses of an outer join disqualifies the expression\n@@ -103804,1 +105837,1 @@\n-  if( pWalker->eCode==2 && ExprHasProperty(pExpr, EP_FromJoin) ){\n+  if( pWalker->eCode==2 && ExprHasProperty(pExpr, EP_OuterON) ){\n@@ -103923,0 +105956,36 @@\n+\/*\n+** Check pExpr to see if it is an invariant constraint on data source pSrc.\n+** This is an optimization.  False negatives will perhaps cause slower\n+** queries, but false positives will yield incorrect answers.  So when in\n+** doubt, return 0.\n+**\n+** To be an invariant constraint, the following must be true:\n+**\n+**   (1)  pExpr cannot refer to any table other than pSrc->iCursor.\n+**\n+**   (2)  pExpr cannot use subqueries or non-deterministic functions.\n+**\n+**   (3)  pSrc cannot be part of the left operand for a RIGHT JOIN.\n+**        (Is there some way to relax this constraint?)\n+**\n+**   (4)  If pSrc is the right operand of a LEFT JOIN, then...\n+**         (4a)  pExpr must come from an ON clause..\n+           (4b)  and specifically the ON clause associated with the LEFT JOIN.\n+**\n+**   (5)  If pSrc is not the right operand of a LEFT JOIN or the left\n+**        operand of a RIGHT JOIN, then pExpr must be from the WHERE\n+**        clause, not an ON clause.\n+*\/\n+SQLITE_PRIVATE int sqlite3ExprIsTableConstraint(Expr *pExpr, const SrcItem *pSrc){\n+  if( pSrc->fg.jointype & JT_LTORJ ){\n+    return 0;  \/* rule (3) *\/\n+  }\n+  if( pSrc->fg.jointype & JT_LEFT ){\n+    if( !ExprHasProperty(pExpr, EP_OuterON) ) return 0;   \/* rule (4a) *\/\n+    if( pExpr->w.iJoin!=pSrc->iCursor ) return 0;         \/* rule (4b) *\/\n+  }else{\n+    if( ExprHasProperty(pExpr, EP_OuterON) ) return 0;    \/* rule (5) *\/\n+  }\n+  return sqlite3ExprIsTableConstant(pExpr, pSrc->iCursor); \/* rules (1), (2) *\/\n+}\n+\n@@ -104250,1 +106319,1 @@\n-** and pX->iTable is set to the index of that cursor.\n+** and the *piTab parameter is set to the index of that cursor.\n@@ -104270,1 +106339,4 @@\n-** existing table.\n+** existing table.  In this case, the creation and initialization of the\n+** ephmeral table might be put inside of a subroutine, the EP_Subrtn flag\n+** will be set on pX and the pX->y.sub fields will be set to show where\n+** the subroutine is coded.\n@@ -104331,1 +106403,1 @@\n-  int iTab = pParse->nTab++;            \/* Cursor of the RHS table *\/\n+  int iTab;                             \/* Cursor of the RHS table *\/\n@@ -104337,0 +106409,1 @@\n+  iTab = pParse->nTab++;\n@@ -104444,2 +106517,1 @@\n-            assert( pReq!=0 || pRhs->iColumn==XN_ROWID\n-                   || pParse->nErr || db->mallocFailed );\n+            assert( pReq!=0 || pRhs->iColumn==XN_ROWID || pParse->nErr );\n@@ -104503,0 +106575,2 @@\n+    pParse->nTab--;  \/* Back out the allocation of the unused cursor *\/\n+    iTab = -1;       \/* Cursor is not allocated *\/\n@@ -104669,0 +106743,1 @@\n+      assert( iTab!=pExpr->iTable );\n@@ -104680,2 +106755,1 @@\n-      sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;\n-    VdbeComment((v, \"return address\"));\n+      sqlite3VdbeAddOp2(v, OP_BeginSubrtn, 0, pExpr->y.sub.regReturn) + 1;\n@@ -104783,0 +106857,1 @@\n+        sqlite3VdbeChangeToNoop(v, addrOnce-1);\n@@ -104803,2 +106878,5 @@\n-    sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);\n-    sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);\n+    assert( sqlite3VdbeGetOp(v,pExpr->y.sub.iAddr-1)->opcode==OP_BeginSubrtn\n+            || pParse->nErr );\n+    sqlite3VdbeAddOp3(v, OP_Return, pExpr->y.sub.regReturn,\n+                      pExpr->y.sub.iAddr, 1);\n+    VdbeCoverage(v);\n@@ -104858,3 +106936,1 @@\n-    sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;\n-  VdbeComment((v, \"return address\"));\n-\n+    sqlite3VdbeAddOp2(v, OP_BeginSubrtn, 0, pExpr->y.sub.regReturn) + 1;\n@@ -104921,4 +106997,2 @@\n-    if( pParse->nErr ){\n-      pExpr->op2 = pExpr->op;\n-      pExpr->op = TK_ERROR;\n-    }\n+    pExpr->op2 = pExpr->op;\n+    pExpr->op = TK_ERROR;\n@@ -104935,2 +107009,5 @@\n-  sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);\n-  sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);\n+  assert( sqlite3VdbeGetOp(v,pExpr->y.sub.iAddr-1)->opcode==OP_BeginSubrtn\n+          || pParse->nErr );\n+  sqlite3VdbeAddOp3(v, OP_Return, pExpr->y.sub.regReturn,\n+                    pExpr->y.sub.iAddr, 1);\n+  VdbeCoverage(v);\n@@ -105141,1 +107218,0 @@\n-  if( pParse->nErr ) goto sqlite3ExprCodeIN_finished;\n@@ -105144,1 +107220,1 @@\n-    if( pParse->db->mallocFailed ) goto sqlite3ExprCodeIN_oom_error;\n+    if( pParse->nErr ) goto sqlite3ExprCodeIN_oom_error;\n@@ -105282,1 +107358,1 @@\n-      sqlite3ErrorMsg(pParse, \"oversized integer: %s%s\", negFlag ? \"-\" : \"\", z);\n+      sqlite3ErrorMsg(pParse, \"oversized integer: %s%#T\", negFlag?\"-\":\"\",pExpr);\n@@ -105286,1 +107362,2 @@\n-        sqlite3ErrorMsg(pParse, \"hex literal too big: %s%s\", negFlag?\"-\":\"\",z);\n+        sqlite3ErrorMsg(pParse, \"hex literal too big: %s%#T\",\n+                        negFlag?\"-\":\"\",pExpr);\n@@ -105370,0 +107447,1 @@\n+    VdbeComment((v, \"%s.rowid\", pTab->zName));\n@@ -105540,1 +107618,11 @@\n-\n+#ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC\n+    case INLINEFUNC_sqlite_offset: {\n+      Expr *pArg = pFarg->a[0].pExpr;\n+      if( pArg->op==TK_COLUMN && pArg->iTable>=0 ){\n+        sqlite3VdbeAddOp3(v, OP_Offset, pArg->iTable, pArg->iColumn, target);\n+      }else{\n+        sqlite3VdbeAddOp2(v, OP_Null, 0, target);\n+      }\n+      break;\n+    }\n+#endif\n@@ -105962,1 +108050,1 @@\n-        sqlite3ErrorMsg(pParse, \"misuse of aggregate: %s()\", pExpr->u.zToken);\n+        sqlite3ErrorMsg(pParse, \"misuse of aggregate: %#T()\", pExpr);\n@@ -106003,1 +108091,1 @@\n-        sqlite3ErrorMsg(pParse, \"unknown function: %s()\", zId);\n+        sqlite3ErrorMsg(pParse, \"unknown function: %#T()\", pExpr);\n@@ -106079,14 +108167,2 @@\n-#ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC\n-      if( (pDef->funcFlags & SQLITE_FUNC_OFFSET)!=0 && ALWAYS(pFarg!=0) ){\n-        Expr *pArg = pFarg->a[0].pExpr;\n-        if( pArg->op==TK_COLUMN ){\n-          sqlite3VdbeAddOp3(v, OP_Offset, pArg->iTable, pArg->iColumn, target);\n-        }else{\n-          sqlite3VdbeAddOp2(v, OP_Null, 0, target);\n-        }\n-      }else\n-#endif\n-      {\n-        sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,\n-                                   pDef, pExpr->op2);\n-      }\n+      sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,\n+                                 pDef, pExpr->op2);\n@@ -106122,2 +108198,4 @@\n-      if( pExpr->pLeft->iTable==0 ){\n-        pExpr->pLeft->iTable = sqlite3CodeSubselect(pParse, pExpr->pLeft);\n+      Expr *pLeft = pExpr->pLeft;\n+      if( pLeft->iTable==0 || pParse->withinRJSubrtn > pLeft->op2 ){\n+        pLeft->iTable = sqlite3CodeSubselect(pParse, pLeft);\n+        pLeft->op2 = pParse->withinRJSubrtn;\n@@ -106125,2 +108203,2 @@\n-      assert( pExpr->pLeft->op==TK_SELECT || pExpr->pLeft->op==TK_ERROR );\n-      n = sqlite3ExprVectorSize(pExpr->pLeft);\n+      assert( pLeft->op==TK_SELECT || pLeft->op==TK_ERROR );\n+      n = sqlite3ExprVectorSize(pLeft);\n@@ -106131,1 +108209,1 @@\n-      return pExpr->pLeft->iTable + pExpr->iColumn;\n+      return pLeft->iTable + pExpr->iColumn;\n@@ -106162,0 +108240,17 @@\n+    case TK_COLLATE: {\n+      if( !ExprHasProperty(pExpr, EP_Collate)\n+       && ALWAYS(pExpr->pLeft)\n+       && pExpr->pLeft->op==TK_FUNCTION\n+      ){\n+        inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);\n+        if( inReg!=target ){\n+          sqlite3VdbeAddOp2(v, OP_SCopy, inReg, target);\n+          inReg = target;\n+        }\n+        sqlite3VdbeAddOp1(v, OP_ClrSubtype, inReg);\n+        return inReg;\n+      }else{\n+        pExpr = pExpr->pLeft;\n+        goto expr_code_doover; \/* 2018-04-28: Prevent deep recursion. *\/\n+      }\n+    }\n@@ -106163,1 +108258,0 @@\n-    case TK_COLLATE:\n@@ -106404,1 +108498,3 @@\n-      if( pItem->reusable && sqlite3ExprCompare(0,pItem->pExpr,pExpr,-1)==0 ){\n+      if( pItem->fg.reusable\n+       && sqlite3ExprCompare(0,pItem->pExpr,pExpr,-1)==0\n+      ){\n@@ -106427,1 +108523,1 @@\n-       pItem->reusable = regDest<0;\n+       pItem->fg.reusable = regDest<0;\n@@ -106561,1 +108657,1 @@\n-    if( pItem->bSorterRef ){\n+    if( pItem->fg.bSorterRef ){\n@@ -106655,2 +108751,2 @@\n-      ** have to reuse the EP_FromJoin bit.  Bummer. *\/\n-      pDel->flags |= EP_FromJoin;\n+      ** have to reuse the EP_OuterON bit.  Bummer. *\/\n+      pDel->flags |= EP_OuterON;\n@@ -107186,1 +109282,1 @@\n-    if( pA->a[i].sortFlags!=pB->a[i].sortFlags ) return 1;\n+    if( pA->a[i].fg.sortFlags!=pB->a[i].fg.sortFlags ) return 1;\n@@ -107341,1 +109437,1 @@\n-  if( ExprHasProperty(pExpr, EP_FromJoin) ) return WRC_Prune;\n+  if( ExprHasProperty(pExpr, EP_OuterON) ) return WRC_Prune;\n@@ -107438,2 +109534,2 @@\n-** Terms of p that are marked with EP_FromJoin (and hence that come from\n-** the ON or USING clauses of LEFT JOINS) are excluded from the analysis.\n+** Terms of p that are marked with EP_OuterON (and hence that come from\n+** the ON or USING clauses of OUTER JOINS) are excluded from the analysis.\n@@ -108319,1 +110415,3 @@\n-  if( pParse->nErr || db->mallocFailed ) return;\n+  assert( db->pParse==pParse );\n+  if( pParse->nErr ) return;\n+  assert( db->mallocFailed==0 );\n@@ -108445,1 +110543,1 @@\n-        \"  FROM pragma_quick_check(\\\"%w\\\",\\\"%w\\\")\"\n+        \"  FROM pragma_quick_check(%Q,%Q)\"\n@@ -108624,1 +110722,1 @@\n-    sqlite3ErrorMsg(pParse, \"no such column: \\\"%s\\\"\", zOld);\n+    sqlite3ErrorMsg(pParse, \"no such column: \\\"%T\\\"\", pOld);\n@@ -108730,1 +110828,3 @@\n-  if( pParse->nErr==0 && pParse->db->mallocFailed==0 ){\n+  assert( pParse==pParse->db->pParse );\n+  assert( pParse->db->mallocFailed==0 || pParse->nErr!=0 );\n+  if( pParse->nErr==0 ){\n@@ -108849,5 +110949,4 @@\n-  if( pIdList ){\n-    int ii;\n-    for(ii=0; ii<pIdList->nId; ii++){\n-      sqlite3RenameTokenRemap(pParse, 0, (const void*)pIdList->a[ii].zName);\n-    }\n+  int ii;\n+  assert( pIdList!=0 );\n+  for(ii=0; ii<pIdList->nId; ii++){\n+    sqlite3RenameTokenRemap(pParse, 0, (const void*)pIdList->a[ii].zName);\n@@ -108872,1 +110971,1 @@\n-      if( pList->a[i].zEName && pList->a[i].eEName==ENAME_NAME ){\n+      if( pList->a[i].zEName && pList->a[i].fg.eEName==ENAME_NAME ){\n@@ -108881,2 +110980,5 @@\n-      sqlite3WalkExpr(pWalker, pSrc->a[i].pOn);\n-      unmapColumnIdlistNames(pParse, pSrc->a[i].pUsing);\n+      if( pSrc->a[i].fg.isUsing==0 ){\n+        sqlite3WalkExpr(pWalker, pSrc->a[i].u3.pOn);\n+      }else{\n+        unmapColumnIdlistNames(pParse, pSrc->a[i].u3.pUsing);\n+      }\n@@ -108918,1 +111020,1 @@\n-      if( ALWAYS(pEList->a[i].eEName==ENAME_NAME) ){\n+      if( ALWAYS(pEList->a[i].fg.eEName==ENAME_NAME) ){\n@@ -109052,1 +111154,1 @@\n-  zErr = sqlite3_mprintf(\"error in %s %s%s%s: %s\",\n+  zErr = sqlite3MPrintf(pParse->db, \"error in %s %s%s%s: %s\",\n@@ -109057,1 +111159,1 @@\n-  sqlite3_free(zErr);\n+  sqlite3DbFree(pParse->db, zErr);\n@@ -109076,1 +111178,1 @@\n-      if( ALWAYS(pEList->a[i].eEName==ENAME_NAME)\n+      if( ALWAYS(pEList->a[i].fg.eEName==ENAME_NAME)\n@@ -109121,1 +111223,0 @@\n-  char *zErr = 0;\n@@ -109123,0 +111224,7 @@\n+  sqlite3ParseObjectInit(p, db);\n+  if( zSql==0 ){\n+    return SQLITE_NOMEM;\n+  }\n+  if( sqlite3StrNICmp(zSql,\"CREATE \",7)!=0 ){\n+    return SQLITE_CORRUPT_BKPT;\n+  }\n@@ -109124,5 +111232,0 @@\n-\n-  \/* Parse the SQL statement passed as the first argument. If no error\n-  ** occurs and the parse does not result in a new table, index or\n-  ** trigger object, the database must be corrupt. *\/\n-  memset(p, 0, sizeof(Parse));\n@@ -109132,4 +111235,1 @@\n-  rc = zSql ? sqlite3RunParser(p, zSql, &zErr) : SQLITE_NOMEM;\n-  assert( p->zErrMsg==0 );\n-  assert( rc!=SQLITE_OK || zErr==0 );\n-  p->zErrMsg = zErr;\n+  rc = sqlite3RunParser(p, zSql);\n@@ -109138,1 +111238,1 @@\n-   && p->pNewTable==0 && p->pNewIndex==0 && p->pNewTrigger==0\n+   && NEVER(p->pNewTable==0 && p->pNewIndex==0 && p->pNewTrigger==0)\n@@ -109308,17 +111408,22 @@\n-        int i;\n-        for(i=0; i<pSrc->nSrc && rc==SQLITE_OK; i++){\n-          SrcItem *p = &pSrc->a[i];\n-          p->iCursor = pParse->nTab++;\n-          if( p->pSelect ){\n-            sqlite3SelectPrep(pParse, p->pSelect, 0);\n-            sqlite3ExpandSubquery(pParse, p);\n-            assert( i>0 );\n-            assert( pStep->pFrom->a[i-1].pSelect );\n-            sqlite3SelectPrep(pParse, pStep->pFrom->a[i-1].pSelect, 0);\n-          }else{\n-            p->pTab = sqlite3LocateTableItem(pParse, 0, p);\n-            if( p->pTab==0 ){\n-              rc = SQLITE_ERROR;\n-            }else{\n-              p->pTab->nTabRef++;\n-              rc = sqlite3ViewGetColumnNames(pParse, p->pTab);\n+        Select *pSel = sqlite3SelectNew(\n+            pParse, pStep->pExprList, pSrc, 0, 0, 0, 0, 0, 0\n+        );\n+        if( pSel==0 ){\n+          pStep->pExprList = 0;\n+          pSrc = 0;\n+          rc = SQLITE_NOMEM;\n+        }else{\n+          sqlite3SelectPrep(pParse, pSel, 0);\n+          rc = pParse->nErr ? SQLITE_ERROR : SQLITE_OK;\n+          assert( pStep->pExprList==0 || pStep->pExprList==pSel->pEList );\n+          assert( pSrc==pSel->pSrc );\n+          if( pStep->pExprList ) pSel->pEList = 0;\n+          pSel->pSrc = 0;\n+          sqlite3SelectDelete(db, pSel);\n+        }\n+        if( pStep->pFrom ){\n+          int i;\n+          for(i=0; i<pStep->pFrom->nSrc && rc==SQLITE_OK; i++){\n+            SrcItem *p = &pStep->pFrom->a[i];\n+            if( p->pSelect ){\n+              sqlite3SelectPrep(pParse, p->pSelect, 0);\n@@ -109328,1 +111433,2 @@\n-        if( rc==SQLITE_OK && db->mallocFailed ){\n+\n+        if(  db->mallocFailed ){\n@@ -109416,1 +111522,1 @@\n-  sqlite3ParserReset(pParse);\n+  sqlite3ParseObjectReset(pParse);\n@@ -109422,1 +111528,1 @@\n-**     sqlite_rename_column(zSql, iCol, bQuote, zNew, zTable, zOld)\n+**     sqlite_rename_column(SQL,TYPE,OBJ,DB,TABLE,COL,NEWNAME,QUOTE,TEMP)\n@@ -109440,1 +111546,2 @@\n-** not reachable from ordinary SQL passed into sqlite3_prepare().\n+** not reachable from ordinary SQL passed into sqlite3_prepare() unless the\n+** SQLITE_TESTCTRL_INTERNAL_FUNCTIONS test setting is enabled.\n@@ -109589,1 +111696,3 @@\n-    if( sParse.zErrMsg ){\n+    if( rc==SQLITE_ERROR && sqlite3WritableSchema(db) ){\n+      sqlite3_result_value(context, argv[0]);\n+    }else if( sParse.zErrMsg ){\n@@ -109777,0 +111886,9 @@\n+              if( pStep->pFrom ){\n+                int i;\n+                for(i=0; i<pStep->pFrom->nSrc; i++){\n+                  SrcItem *pItem = &pStep->pFrom->a[i];\n+                  if( 0==sqlite3_stricmp(pItem->zName, zOld) ){\n+                    renameTokenFind(&sParse, &sCtx, pItem->zName);\n+                  }\n+                }\n+              }\n@@ -109788,1 +111906,3 @@\n-      if( sParse.zErrMsg ){\n+      if( rc==SQLITE_ERROR && sqlite3WritableSchema(db) ){\n+        sqlite3_result_value(context, argv[3]);\n+      }else if( sParse.zErrMsg ){\n@@ -109813,4 +111933,4 @@\n-\/*\n-** The implementation of an SQL scalar function that rewrites DDL statements\n-** so that any string literals that use double-quotes are modified so that\n-** they use single quotes.\n+\/* SQL function: sqlite_rename_quotefix(DB,SQL)\n+**\n+** Rewrite the DDL statement \"SQL\" so that any string literals that use\n+** double-quotes use single quotes instead.\n@@ -109835,0 +111955,4 @@\n+**\n+** If there is a error in the input SQL, then raise an error, except\n+** if PRAGMA writable_schema=ON, then just return the input string\n+** unmodified following an error.\n@@ -109909,1 +112033,5 @@\n-      sqlite3_result_error_code(context, rc);\n+      if( sqlite3WritableSchema(db) && rc==SQLITE_ERROR ){\n+        sqlite3_result_value(context, argv[1]);\n+      }else{\n+        sqlite3_result_error_code(context, rc);\n+      }\n@@ -109921,1 +112049,2 @@\n-\/*\n+\/* Function:  sqlite_rename_test(DB,SQL,TYPE,NAME,ISTEMP,WHEN,DQS)\n+**\n@@ -109936,2 +112065,1 @@\n-** Unless it finds an error, this function normally returns NULL. However, it\n-** returns integer value 1 if:\n+** The return value is computed as follows:\n@@ -109939,2 +112067,5 @@\n-**   * the SQL argument creates a trigger, and\n-**   * the table that the trigger is attached to is in database zDb.\n+**   A. If an error is seen and not in PRAGMA writable_schema=ON mode,\n+**      then raise the error.\n+**   B. Else if a trigger is created and the the table that the trigger is\n+**      attached to is in database zDb, then return 1.\n+**   C. Otherwise return NULL.\n@@ -109985,1 +112116,4 @@\n-          if( i1==i2 ) sqlite3_result_int(context, 1);\n+          if( i1==i2 ){\n+            \/* Handle output case B *\/\n+            sqlite3_result_int(context, 1);\n+          }\n@@ -109990,1 +112124,2 @@\n-    if( rc!=SQLITE_OK && zWhen ){\n+    if( rc!=SQLITE_OK && zWhen && !sqlite3WritableSchema(db) ){\n+      \/* Output case A *\/\n@@ -110106,1 +112241,1 @@\n-    sqlite3ErrorMsg(pParse, \"no such column: \\\"%s\\\"\", zCol);\n+    sqlite3ErrorMsg(pParse, \"no such column: \\\"%T\\\"\", pName);\n@@ -110130,0 +112265,6 @@\n+#ifndef SQLITE_OMIT_AUTHORIZATION\n+  \/* Invoke the authorization callback. *\/\n+  if( sqlite3AuthCheck(pParse, SQLITE_ALTER_TABLE, zDb, pTab->zName, zCol) ){\n+    goto exit_drop_column;\n+  }\n+#endif\n@@ -111077,1 +113218,1 @@\n-    ** rows, then each estimate is computed as:\n+    ** rows, then each estimate is usually computed as:\n@@ -111080,0 +113221,5 @@\n+    **\n+    ** In other words, I is K\/D rounded up to the next whole integer.\n+    ** However, if I is between 1.0 and 1.1 (in other words if I is\n+    ** close to 1.0 but just a little larger) then do not round up but\n+    ** instead keep the I value at 1.0.\n@@ -111090,0 +113236,1 @@\n+      if( iVal==2 && p->nRow*10 <= nDistinct*11 ) iVal = 1;\n@@ -111253,1 +113400,1 @@\n-    sqlite3VdbeAddOp4(pParse->pVdbe, OP_Noop, 0, 0, 0,(char*)pStat1,P4_DYNBLOB);\n+    sqlite3VdbeAddOp4(pParse->pVdbe, OP_Noop, 0, 0, 0,(char*)pStat1,P4_DYNAMIC);\n@@ -112517,1 +114664,1 @@\n-  if( pAuthArg ){\n+  if( ALWAYS(pAuthArg) ){\n@@ -112643,1 +114790,5 @@\n-    if( sqlite3WalkExpr(&pFix->w, pList->a[i].pOn) ) return WRC_Abort;\n+    if( pList->a[i].fg.isUsing==0\n+     && sqlite3WalkExpr(&pFix->w, pList->a[i].u3.pOn)\n+    ){\n+      return WRC_Abort;\n+    }\n@@ -113178,0 +115329,1 @@\n+  assert( db->pParse==pParse );\n@@ -113179,2 +115331,2 @@\n-  if( db->mallocFailed || pParse->nErr ){\n-    if( pParse->rc==SQLITE_OK ) pParse->rc = SQLITE_ERROR;\n+  if( pParse->nErr ){\n+    if( db->mallocFailed ) pParse->rc = SQLITE_NOMEM;\n@@ -113183,0 +115335,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -113205,3 +115358,2 @@\n-      if( pReturning->nRetCol==0 ){\n-        assert( CORRUPT_DB );\n-      }else{\n+      if( pReturning->nRetCol ){\n+        sqlite3VdbeAddOp0(v, OP_FkCheck);\n@@ -113246,1 +115398,3 @@\n-      for(iDb=0; iDb<db->nDb; iDb++){\n+      assert( db->nDb>0 );\n+      iDb = 0;\n+      do{\n@@ -113261,1 +115415,1 @@\n-      }\n+      }while( ++iDb<db->nDb );\n@@ -113300,3 +115454,1 @@\n-        if( pRet->nRetCol==0 ){\n-          assert( CORRUPT_DB );\n-        }else{\n+        if( pRet->nRetCol ){\n@@ -113314,1 +115466,3 @@\n-  if( v && pParse->nErr==0 && !db->mallocFailed ){\n+  assert( v!=0 || pParse->nErr );\n+  assert( db->mallocFailed==0 || pParse->nErr );\n+  if( pParse->nErr==0 ){\n@@ -113341,1 +115495,0 @@\n-  char *zErrMsg = 0;\n@@ -113363,1 +115516,1 @@\n-  sqlite3RunParser(pParse, zSql, &zErrMsg);\n+  sqlite3RunParser(pParse, zSql);\n@@ -113365,1 +115518,0 @@\n-  sqlite3DbFree(db, zErrMsg);\n@@ -114325,1 +116477,2 @@\n-        sqlite3ErrorMsg(pParse, \"table %T already exists\", pName);\n+        sqlite3ErrorMsg(pParse, \"%s %T already exists\",\n+                        (IsView(pTable)? \"view\" : \"table\"), pName);\n@@ -114921,1 +117074,1 @@\n-    if( pList ) pParse->iPkSortOrder = pList->a[0].sortFlags;\n+    if( pList ) pParse->iPkSortOrder = pList->a[0].fg.sortFlags;\n@@ -115415,1 +117568,1 @@\n-    pList->a[0].sortFlags = pParse->iPkSortOrder;\n+    pList->a[0].fg.sortFlags = pParse->iPkSortOrder;\n@@ -115420,1 +117573,1 @@\n-    if( db->mallocFailed || pParse->nErr ){\n+    if( pParse->nErr ){\n@@ -115424,0 +117577,1 @@\n+    assert( db->mallocFailed==0 );\n@@ -115854,0 +118008,5 @@\n+      if( IN_SPECIAL_PARSE ){\n+        pParse->rc = SQLITE_ERROR;\n+        pParse->nErr++;\n+        return;\n+      }\n@@ -116080,1 +118239,0 @@\n-  int n;            \/* Temporarily holds the number of cursors assigned *\/\n@@ -116138,0 +118296,2 @@\n+    int nTab = pParse->nTab;\n+    int nSelect = pParse->nSelect;\n@@ -116139,1 +118299,0 @@\n-    n = pParse->nTab;\n@@ -116151,1 +118310,2 @@\n-    pParse->nTab = n;\n+    pParse->nTab = nTab;\n+    pParse->nSelect = nSelect;\n@@ -116164,2 +118324,1 @@\n-      if( db->mallocFailed==0\n-       && pParse->nErr==0\n+      if( pParse->nErr==0\n@@ -116168,0 +118327,1 @@\n+        assert( db->mallocFailed==0 );\n@@ -116786,1 +118946,1 @@\n-  assert( pKey!=0 || db->mallocFailed || pParse->nErr );\n+  assert( pKey!=0 || pParse->nErr );\n@@ -116896,2 +119056,2 @@\n-      if( pList->a[i].bNulls ){\n-        u8 sf = pList->a[i].sortFlags;\n+      if( pList->a[i].fg.bNulls ){\n+        u8 sf = pList->a[i].fg.sortFlags;\n@@ -116950,1 +119110,2 @@\n-  if( db->mallocFailed || pParse->nErr>0 ){\n+  assert( db->pParse==pParse );\n+  if( pParse->nErr ){\n@@ -116953,0 +119114,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -117016,1 +119178,0 @@\n-  assert( pParse->nErr==0 );\n@@ -117249,1 +119410,1 @@\n-    requestedSortOrder = pListItem->sortFlags & sortOrderMask;\n+    requestedSortOrder = pListItem->fg.sortFlags & sortOrderMask;\n@@ -117440,7 +119601,7 @@\n-          \"INSERT INTO %Q.\" LEGACY_SCHEMA_TABLE \" VALUES('index',%Q,%Q,#%d,%Q);\",\n-          db->aDb[iDb].zDbSName,\n-          pIndex->zName,\n-          pTab->zName,\n-          iMem,\n-          zStmt\n-          );\n+         \"INSERT INTO %Q.\" LEGACY_SCHEMA_TABLE \" VALUES('index',%Q,%Q,#%d,%Q);\",\n+         db->aDb[iDb].zDbSName,\n+         pIndex->zName,\n+         pTab->zName,\n+         iMem,\n+         zStmt\n+      );\n@@ -117580,1 +119741,0 @@\n-  assert( pParse->nErr==0 );   \/* Never called with prior errors *\/\n@@ -117584,0 +119744,1 @@\n+  assert( pParse->nErr==0 );   \/* Never called with prior non-OOM errors *\/\n@@ -117692,0 +119853,9 @@\n+  }else{\n+    IdList *pNew;\n+    pNew = sqlite3DbRealloc(db, pList,\n+                 sizeof(IdList) + pList->nId*sizeof(pList->a));\n+    if( pNew==0 ){\n+      sqlite3IdListDelete(db, pList);\n+      return 0;\n+    }\n+    pList = pNew;\n@@ -117693,11 +119863,1 @@\n-  pList->a = sqlite3ArrayAllocate(\n-      db,\n-      pList->a,\n-      sizeof(pList->a[0]),\n-      &pList->nId,\n-      &i\n-  );\n-  if( i<0 ){\n-    sqlite3IdListDelete(db, pList);\n-    return 0;\n-  }\n+  i = pList->nId++;\n@@ -117717,0 +119877,1 @@\n+  assert( pList->eU4!=EU4_EXPR ); \/* EU4_EXPR mode is not currently used *\/\n@@ -117720,1 +119881,0 @@\n-  sqlite3DbFree(db, pList->a);\n@@ -117730,1 +119890,1 @@\n-  if( pList==0 ) return -1;\n+  assert( pList!=0 );\n@@ -117933,2 +120093,5 @@\n-    if( pItem->pOn ) sqlite3ExprDelete(db, pItem->pOn);\n-    if( pItem->pUsing ) sqlite3IdListDelete(db, pItem->pUsing);\n+    if( pItem->fg.isUsing ){\n+      sqlite3IdListDelete(db, pItem->u3.pUsing);\n+    }else if( pItem->u3.pOn ){\n+      sqlite3ExprDelete(db, pItem->u3.pOn);\n+    }\n@@ -117962,2 +120125,1 @@\n-  Expr *pOn,              \/* The ON clause of a join *\/\n-  IdList *pUsing          \/* The USING clause of a join *\/\n+  OnOrUsing *pOnUsing     \/* Either the ON clause or the USING clause *\/\n@@ -117967,1 +120129,1 @@\n-  if( !p && (pOn || pUsing) ){\n+  if( !p && pOnUsing!=0 && (pOnUsing->pOn || pOnUsing->pUsing) ){\n@@ -117969,1 +120131,1 @@\n-      (pOn ? \"ON\" : \"USING\")\n+      (pOnUsing->pOn ? \"ON\" : \"USING\")\n@@ -117989,3 +120151,16 @@\n-  pItem->pSelect = pSubquery;\n-  pItem->pOn = pOn;\n-  pItem->pUsing = pUsing;\n+  if( pSubquery ){\n+    pItem->pSelect = pSubquery;\n+    if( pSubquery->selFlags & SF_NestedFrom ){\n+      pItem->fg.isNestedFrom = 1;\n+    }\n+  }\n+  assert( pOnUsing==0 || pOnUsing->pOn==0 || pOnUsing->pUsing==0 );\n+  assert( pItem->fg.isUsing==0 );\n+  if( pOnUsing==0 ){\n+    pItem->u3.pOn = 0;\n+  }else if( pOnUsing->pUsing ){\n+    pItem->fg.isUsing = 1;\n+    pItem->u3.pUsing = pOnUsing->pUsing;\n+  }else{\n+    pItem->u3.pOn = pOnUsing->pOn;\n+  }\n@@ -117994,1 +120169,1 @@\n- append_from_error:\n+append_from_error:\n@@ -117996,2 +120171,1 @@\n-  sqlite3ExprDelete(db, pOn);\n-  sqlite3IdListDelete(db, pUsing);\n+  sqlite3ClearOnOrUsing(db, pOnUsing);\n@@ -118042,0 +120216,1 @@\n+      p1->a[0].fg.jointype |= (JT_LTORJ & p1->a[1].fg.jointype);\n@@ -118078,0 +120253,7 @@\n+**\n+** Additional changes:\n+**\n+**   *   All tables to the left of the right-most RIGHT JOIN are tagged with\n+**       JT_LTORJ (mnemonic: Left Table Of Right Join) so that the\n+**       code generator can easily tell that the table is part of\n+**       the left operand of at least one RIGHT JOIN.\n@@ -118079,6 +120261,8 @@\n-SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){\n-  if( p ){\n-    int i;\n-    for(i=p->nSrc-1; i>0; i--){\n-      p->a[i].fg.jointype = p->a[i-1].fg.jointype;\n-    }\n+SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(Parse *pParse, SrcList *p){\n+  (void)pParse;\n+  if( p && p->nSrc>1 ){\n+    int i = p->nSrc-1;\n+    u8 allFlags = 0;\n+    do{\n+      allFlags |= p->a[i].fg.jointype = p->a[i-1].fg.jointype;\n+    }while( (--i)>0 );\n@@ -118086,0 +120270,11 @@\n+\n+    \/* All terms to the left of a RIGHT JOIN should be tagged with the\n+    ** JT_LTORJ flags *\/\n+    if( allFlags & JT_RIGHT ){\n+      for(i=p->nSrc-1; ALWAYS(i>0) && (p->a[i].fg.jointype&JT_RIGHT)==0; i--){}\n+      i--;\n+      assert( i>=0 );\n+      do{\n+        p->a[i].fg.jointype |= JT_LTORJ;\n+      }while( (--i)>=0 );\n+    }\n@@ -119024,1 +121219,0 @@\n-    assert( zName[0]>='a' && zName[0]<='z' );\n@@ -119251,0 +121445,10 @@\n+\/* Generate byte-code that will report the number of rows modified\n+** by a DELETE, INSERT, or UPDATE statement.\n+*\/\n+SQLITE_PRIVATE void sqlite3CodeChangeCount(Vdbe *v, int regCounter, const char *zColName){\n+  sqlite3VdbeAddOp0(v, OP_FkCheck);\n+  sqlite3VdbeAddOp2(v, OP_ResultRow, regCounter, 1);\n+  sqlite3VdbeSetNumCols(v, 1);\n+  sqlite3VdbeSetColName(v, 0, COLNAME_NAME, zColName, SQLITE_STATIC);\n+}\n+\n@@ -119325,2 +121529,2 @@\n-    assert( pFrom->a[0].pOn==0 );\n-    assert( pFrom->a[0].pUsing==0 );\n+    assert( pFrom->a[0].fg.isUsing==0 );\n+    assert( pFrom->a[0].u3.pOn==0 );\n@@ -119490,1 +121694,2 @@\n-  if( pParse->nErr || db->mallocFailed ){\n+  assert( db->pParse==pParse );\n+  if( pParse->nErr ){\n@@ -119493,0 +121698,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -119495,1 +121701,0 @@\n-\n@@ -119520,0 +121725,8 @@\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x10000 ){\n+    sqlite3TreeViewLine(0, \"In sqlite3Delete() at %s:%d\", __FILE__, __LINE__);\n+    sqlite3TreeViewDelete(pParse->pWith, pTabList, pWhere,\n+                          pOrderBy, pLimit, pTrigger);\n+  }\n+#endif\n+\n@@ -119673,1 +121886,1 @@\n-    pWInfo = sqlite3WhereBegin(pParse, pTabList, pWhere, 0, 0, wcf, iTabCur+1);\n+    pWInfo = sqlite3WhereBegin(pParse, pTabList, pWhere, 0, 0,0,wcf,iTabCur+1);\n@@ -119826,3 +122039,1 @@\n-    sqlite3VdbeAddOp2(v, OP_ChngCntRow, memCnt, 1);\n-    sqlite3VdbeSetNumCols(v, 1);\n-    sqlite3VdbeSetColName(v, 0, COLNAME_NAME, \"rows deleted\", SQLITE_STATIC);\n+    sqlite3CodeChangeCount(v, memCnt, \"rows deleted\");\n@@ -120279,0 +122490,12 @@\n+\/* subtype(X)\n+**\n+** Return the subtype of X\n+*\/\n+static void subtypeFunc(\n+  sqlite3_context *context,\n+  int argc,\n+  sqlite3_value **argv\n+){\n+  UNUSED_PARAMETER(argc);\n+  sqlite3_result_int(context, sqlite3_value_subtype(argv[0]));\n+}\n@@ -120440,1 +122663,1 @@\n-** Implementation of the printf() function.\n+** Implementation of the printf() (a.k.a. format()) SQL function.\n@@ -121209,5 +123432,2 @@\n-** Implementation of the QUOTE() function.  This function takes a single\n-** argument.  If the argument is numeric, the return value is the same as\n-** the argument.  If the argument is NULL, the return value is the string\n-** \"NULL\".  Otherwise, the argument is enclosed in single quotes with\n-** single-quote escapes.\n+** Append to pStr text that is the SQL literal representation of the\n+** value contained in pValue.\n@@ -121215,4 +123435,7 @@\n-static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){\n-  assert( argc==1 );\n-  UNUSED_PARAMETER(argc);\n-  switch( sqlite3_value_type(argv[0]) ){\n+SQLITE_PRIVATE void sqlite3QuoteValue(StrAccum *pStr, sqlite3_value *pValue){\n+  \/* As currently implemented, the string must be initially empty.\n+  ** we might relax this requirement in the future, but that will\n+  ** require enhancements to the implementation. *\/\n+  assert( pStr!=0 && pStr->nChar==0 );\n+\n+  switch( sqlite3_value_type(pValue) ){\n@@ -121221,6 +123444,10 @@\n-      char zBuf[50];\n-      r1 = sqlite3_value_double(argv[0]);\n-      sqlite3_snprintf(sizeof(zBuf), zBuf, \"%!.15g\", r1);\n-      sqlite3AtoF(zBuf, &r2, 20, SQLITE_UTF8);\n-      if( r1!=r2 ){\n-        sqlite3_snprintf(sizeof(zBuf), zBuf, \"%!.20e\", r1);\n+      const char *zVal;\n+      r1 = sqlite3_value_double(pValue);\n+      sqlite3_str_appendf(pStr, \"%!.15g\", r1);\n+      zVal = sqlite3_str_value(pStr);\n+      if( zVal ){\n+        sqlite3AtoF(zVal, &r2, pStr->nChar, SQLITE_UTF8);\n+        if( r1!=r2 ){\n+          sqlite3_str_reset(pStr);\n+          sqlite3_str_appendf(pStr, \"%!.20e\", r1);\n+        }\n@@ -121228,1 +123455,0 @@\n-      sqlite3_result_text(context, zBuf, -1, SQLITE_TRANSIENT);\n@@ -121232,1 +123458,1 @@\n-      sqlite3_result_value(context, argv[0]);\n+      sqlite3_str_appendf(pStr, \"%lld\", sqlite3_value_int64(pValue));\n@@ -121236,6 +123462,6 @@\n-      char *zText = 0;\n-      char const *zBlob = sqlite3_value_blob(argv[0]);\n-      int nBlob = sqlite3_value_bytes(argv[0]);\n-      assert( zBlob==sqlite3_value_blob(argv[0]) ); \/* No encoding change *\/\n-      zText = (char *)contextMalloc(context, (2*(i64)nBlob)+4);\n-      if( zText ){\n+      char const *zBlob = sqlite3_value_blob(pValue);\n+      int nBlob = sqlite3_value_bytes(pValue);\n+      assert( zBlob==sqlite3_value_blob(pValue) ); \/* No encoding change *\/\n+      sqlite3StrAccumEnlarge(pStr, nBlob*2 + 4);\n+      if( pStr->accError==0 ){\n+        char *zText = pStr->zText;\n@@ -121251,2 +123477,1 @@\n-        sqlite3_result_text(context, zText, -1, SQLITE_TRANSIENT);\n-        sqlite3_free(zText);\n+        pStr->nChar = nBlob*2 + 3;\n@@ -121257,20 +123482,2 @@\n-      int i,j;\n-      u64 n;\n-      const unsigned char *zArg = sqlite3_value_text(argv[0]);\n-      char *z;\n-\n-      if( zArg==0 ) return;\n-      for(i=0, n=0; zArg[i]; i++){ if( zArg[i]=='\\'' ) n++; }\n-      z = contextMalloc(context, ((i64)i)+((i64)n)+3);\n-      if( z ){\n-        z[0] = '\\'';\n-        for(i=0, j=1; zArg[i]; i++){\n-          z[j++] = zArg[i];\n-          if( zArg[i]=='\\'' ){\n-            z[j++] = '\\'';\n-          }\n-        }\n-        z[j++] = '\\'';\n-        z[j] = 0;\n-        sqlite3_result_text(context, z, j, sqlite3_free);\n-      }\n+      const unsigned char *zArg = sqlite3_value_text(pValue);\n+      sqlite3_str_appendf(pStr, \"%Q\", zArg);\n@@ -121280,2 +123487,2 @@\n-      assert( sqlite3_value_type(argv[0])==SQLITE_NULL );\n-      sqlite3_result_text(context, \"NULL\", 4, SQLITE_STATIC);\n+      assert( sqlite3_value_type(pValue)==SQLITE_NULL );\n+      sqlite3_str_append(pStr, \"NULL\", 4);\n@@ -121287,0 +123494,25 @@\n+\/*\n+** Implementation of the QUOTE() function.\n+**\n+** The quote(X) function returns the text of an SQL literal which is the\n+** value of its argument suitable for inclusion into an SQL statement.\n+** Strings are surrounded by single-quotes with escapes on interior quotes\n+** as needed. BLOBs are encoded as hexadecimal literals. Strings with\n+** embedded NUL characters cannot be represented as string literals in SQL\n+** and hence the returned string literal is truncated prior to the first NUL.\n+*\/\n+static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){\n+  sqlite3_str str;\n+  sqlite3 *db = sqlite3_context_db_handle(context);\n+  assert( argc==1 );\n+  UNUSED_PARAMETER(argc);\n+  sqlite3StrAccumInit(&str, db, 0, 0, db->aLimit[SQLITE_LIMIT_LENGTH]);\n+  sqlite3QuoteValue(&str,argv[0]);\n+  sqlite3_result_text(context, sqlite3StrAccumFinish(&str), str.nChar,\n+                      SQLITE_DYNAMIC);\n+  if( str.accError!=SQLITE_OK ){\n+    sqlite3_result_null(context);\n+    sqlite3_result_error_code(context, str.accError);\n+  }\n+}\n+\n@@ -122259,1 +124491,1 @@\n-        ans *= 1.0\/M_LN10;\n+        ans \/= M_LN10;\n@@ -122263,1 +124495,1 @@\n-        ans *= 1.0\/M_LN2;\n+        ans \/= M_LN2;\n@@ -122402,2 +124634,1 @@\n-    FUNCTION2(sqlite_offset,     1, 0, 0, noopFunc,  SQLITE_FUNC_OFFSET|\n-                                                     SQLITE_FUNC_TYPEOF),\n+    INLINE_FUNC(sqlite_offset,   1, INLINEFUNC_sqlite_offset, 0 ),\n@@ -122420,0 +124651,1 @@\n+    FUNCTION2(subtype,           1, 0, 0, subtypeFunc, SQLITE_FUNC_TYPEOF),\n@@ -122423,0 +124655,1 @@\n+    FUNCTION(format,            -1, 0, 0, printfFunc       ),\n@@ -122521,0 +124754,1 @@\n+  sqlite3RegisterJsonFunctions();\n@@ -122935,1 +125169,0 @@\n-      int regRec = sqlite3GetTempReg(pParse);\n@@ -122975,1 +125208,1 @@\n-      sqlite3VdbeAddOp4(v, OP_MakeRecord, regTemp, nCol, regRec,\n+      sqlite3VdbeAddOp4(v, OP_Affinity, regTemp, nCol, 0,\n@@ -122977,3 +125210,2 @@\n-      sqlite3VdbeAddOp4Int(v, OP_Found, iCur, iOk, regRec, 0); VdbeCoverage(v);\n-\n-      sqlite3ReleaseTempReg(pParse, regRec);\n+      sqlite3VdbeAddOp4Int(v, OP_Found, iCur, iOk, regTemp, nCol);\n+      VdbeCoverage(v);\n@@ -123081,2 +125313,0 @@\n-**                           Or, if the ON (UPDATE|DELETE) action is RESTRICT,\n-**                           throw a \"FOREIGN KEY constraint failed\" exception.\n@@ -123087,2 +125317,0 @@\n-**                           Or, if the ON (UPDATE|DELETE) action is RESTRICT,\n-**                           throw a \"FOREIGN KEY constraint failed\" exception.\n@@ -123196,1 +125424,1 @@\n-    pWInfo = sqlite3WhereBegin(pParse, pSrc, pWhere, 0, 0, 0, 0);\n+    pWInfo = sqlite3WhereBegin(pParse, pSrc, pWhere, 0, 0, 0, 0, 0);\n@@ -123736,3 +125964,3 @@\n-** If the action is \"NO ACTION\" or \"RESTRICT\", then a NULL pointer is\n-** returned (these actions require no special handling by the triggers\n-** sub-system, code for them is created by fkScanChildren()).\n+** If the action is \"NO ACTION\" then a NULL pointer is returned (these actions\n+** require no special handling by the triggers sub-system, code for them is\n+** created by fkScanChildren()).\n@@ -123867,0 +126095,1 @@\n+      int iDb = sqlite3SchemaToIndex(db, pTab->pSchema);\n@@ -123868,0 +126097,1 @@\n+      Token tDb;\n@@ -123872,0 +126102,3 @@\n+      tDb.z = db->aDb[iDb].zDbSName;\n+      tDb.n = sqlite3Strlen30(tDb.z);\n+\n@@ -123878,1 +126111,1 @@\n-          sqlite3SrcListAppend(pParse, 0, &tFrom, 0),\n+          sqlite3SrcListAppend(pParse, 0, &tDb, &tFrom),\n@@ -124204,1 +126437,1 @@\n-      assert( pTab->aCol[i].affinity!=0 );\n+      assert( pTab->aCol[i].affinity!=0 || sqlite3VdbeParser(v)->nErr>0 );\n@@ -124738,1 +126971,2 @@\n-  if( pParse->nErr || db->mallocFailed ){\n+  assert( db->pParse==pParse );\n+  if( pParse->nErr ){\n@@ -124741,0 +126975,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -124786,0 +127021,8 @@\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x10000 ){\n+    sqlite3TreeViewLine(0, \"In sqlite3Insert() at %s:%d\", __FILE__, __LINE__);\n+    sqlite3TreeViewInsert(pParse->pWith, pTabList, pColumn, pSelect, pList,\n+                          onError, pUpsert, pTrigger);\n+  }\n+#endif\n+\n@@ -124816,1 +127059,5 @@\n-  if( pColumn==0 && xferOptimization(pParse, pTab, pSelect, onError, iDb) ){\n+  if( pColumn==0\n+   && pSelect!=0\n+   && pTrigger==0\n+   && xferOptimization(pParse, pTab, pSelect, onError, iDb)\n+  ){\n@@ -124860,0 +127107,2 @@\n+    assert( pColumn->eU4!=EU4_EXPR );\n+    pColumn->eU4 = EU4_IDX;\n@@ -124861,1 +127110,1 @@\n-      pColumn->a[i].idx = -1;\n+      pColumn->a[i].u4.idx = -1;\n@@ -124866,1 +127115,1 @@\n-          pColumn->a[i].idx = j;\n+          pColumn->a[i].u4.idx = j;\n@@ -124916,1 +127165,3 @@\n-    if( rc || db->mallocFailed || pParse->nErr ) goto insert_cleanup;\n+    assert( db->pParse==pParse );\n+    if( rc || pParse->nErr ) goto insert_cleanup;\n+    assert( db->mallocFailed==0 );\n@@ -125166,1 +127417,2 @@\n-      for(j=0; j<pColumn->nId && pColumn->a[j].idx!=i; j++){}\n+      assert( pColumn->eU4==EU4_IDX );\n+      for(j=0; j<pColumn->nId && pColumn->a[j].u4.idx!=i; j++){}\n@@ -125405,3 +127657,1 @@\n-    sqlite3VdbeAddOp2(v, OP_ChngCntRow, regRowCount, 1);\n-    sqlite3VdbeSetNumCols(v, 1);\n-    sqlite3VdbeSetColName(v, 0, COLNAME_NAME, \"rows inserted\", SQLITE_STATIC);\n+    sqlite3CodeChangeCount(v, regRowCount, \"rows inserted\");\n@@ -126299,1 +128549,1 @@\n-          ** different from the old.\n+          ** different from the old.  See TH3 withoutrowid04.test.\n@@ -126787,3 +129037,1 @@\n-  if( pSelect==0 ){\n-    return 0;   \/* Must be of the form  INSERT INTO ... SELECT ... *\/\n-  }\n+  assert( pSelect!=0 );\n@@ -126796,3 +129044,0 @@\n-  if( sqlite3TriggerList(pParse, pDest) ){\n-    return 0;   \/* tab1 must not have triggers *\/\n-  }\n@@ -127661,0 +129906,13 @@\n+  \/* Version 3.38.0 and later *\/\n+  int (*error_offset)(sqlite3*);\n+  int (*vtab_rhs_value)(sqlite3_index_info*,int,sqlite3_value**);\n+  int (*vtab_distinct)(sqlite3_index_info*);\n+  int (*vtab_in)(sqlite3_index_info*,int,int);\n+  int (*vtab_in_first)(sqlite3_value*,sqlite3_value**);\n+  int (*vtab_in_next)(sqlite3_value*,sqlite3_value**);\n+  \/* Version 3.39.0 and later *\/\n+  int (*deserialize)(sqlite3*,const char*,unsigned char*,\n+                     sqlite3_int64,sqlite3_int64,unsigned);\n+  unsigned char *(*serialize)(sqlite3*,const char *,sqlite3_int64*,\n+                              unsigned int);\n+  const char *(*db_name)(sqlite3*,int);\n@@ -127972,0 +130230,13 @@\n+\/* Version 3.38.0 and later *\/\n+#define sqlite3_error_offset           sqlite3_api->error_offset\n+#define sqlite3_vtab_rhs_value         sqlite3_api->vtab_rhs_value\n+#define sqlite3_vtab_distinct          sqlite3_api->vtab_distinct\n+#define sqlite3_vtab_in                sqlite3_api->vtab_in\n+#define sqlite3_vtab_in_first          sqlite3_api->vtab_in_first\n+#define sqlite3_vtab_in_next           sqlite3_api->vtab_in_next\n+\/* Version 3.39.0 and later *\/\n+#ifndef SQLITE_OMIT_DESERIALIZE\n+#define sqlite3_deserialize            sqlite3_api->deserialize\n+#define sqlite3_serialize              sqlite3_api->serialize\n+#endif\n+#define sqlite3_db_name                sqlite3_api->db_name\n@@ -128461,0 +130732,24 @@\n+  \/* Version 3.38.0 and later *\/\n+  sqlite3_error_offset,\n+#ifndef SQLITE_OMIT_VIRTUALTABLE\n+  sqlite3_vtab_rhs_value,\n+  sqlite3_vtab_distinct,\n+  sqlite3_vtab_in,\n+  sqlite3_vtab_in_first,\n+  sqlite3_vtab_in_next,\n+#else\n+  0,\n+  0,\n+  0,\n+  0,\n+  0,\n+#endif\n+  \/* Version 3.39.0 and later *\/\n+#ifndef SQLITE_OMIT_DESERIALIZE\n+  sqlite3_deserialize,\n+  sqlite3_serialize,\n+#else\n+  0,\n+  0,\n+#endif\n+  sqlite3_db_name\n@@ -129131,1 +131426,1 @@\n-  \/* ePragFlg:  *\/ PragFlg_NeedSchema|PragFlg_Result0,\n+  \/* ePragFlg:  *\/ PragFlg_Result0,\n@@ -129819,0 +132114,8 @@\n+  u32 mask =\n+      SQLITE_DETERMINISTIC |\n+      SQLITE_DIRECTONLY |\n+      SQLITE_SUBTYPE |\n+      SQLITE_INNOCUOUS |\n+      SQLITE_FUNC_INTERNAL\n+  ;\n+  if( showInternFuncs ) mask = 0xffffffff;\n@@ -129821,7 +132124,0 @@\n-    static const u32 mask =\n-        SQLITE_DETERMINISTIC |\n-        SQLITE_DIRECTONLY |\n-        SQLITE_SUBTYPE |\n-        SQLITE_INNOCUOUS |\n-        SQLITE_FUNC_INTERNAL\n-    ;\n@@ -130319,1 +132615,1 @@\n-    int iLimit, addr;\n+    int iLimit = 0, addr;\n@@ -130476,0 +132772,1 @@\n+    sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -130485,0 +132782,1 @@\n+          sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -130502,0 +132800,1 @@\n+    sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -130520,0 +132819,1 @@\n+    sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -130529,0 +132829,1 @@\n+          sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -130540,0 +132841,1 @@\n+    sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_TEMPDIR));\n@@ -130762,0 +133064,4 @@\n+            if( db->mallocFailed ){\n+              sqlite3ErrorMsg(db->pParse, \"out of memory\");\n+              db->pParse->rc = SQLITE_NOMEM_BKPT;\n+            }\n@@ -131003,1 +133309,0 @@\n-    int regKey;            \/* Register to hold key for checking the FK *\/\n@@ -131011,1 +133316,0 @@\n-    regKey = ++pParse->nMem;\n@@ -131078,1 +133382,1 @@\n-          sqlite3VdbeAddOp4(v, OP_MakeRecord, regRow, pFK->nCol, regKey,\n+          sqlite3VdbeAddOp4(v, OP_Affinity, regRow, pFK->nCol, 0,\n@@ -131080,1 +133384,1 @@\n-          sqlite3VdbeAddOp4Int(v, OP_Found, i, addrOk, regKey, 0);\n+          sqlite3VdbeAddOp4Int(v, OP_Found, i, addrOk, regRow, pFK->nCol);\n@@ -132619,1 +134923,1 @@\n-  if( rc==SQLITE_OK || (db->flags&SQLITE_NoSchemaError)){\n+  if( rc==SQLITE_OK || ((db->flags&SQLITE_NoSchemaError) && rc!=SQLITE_NOMEM)){\n@@ -132798,1 +135102,1 @@\n-SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){\n+SQLITE_PRIVATE void sqlite3ParseObjectReset(Parse *pParse){\n@@ -132800,0 +135104,6 @@\n+  assert( db!=0 );\n+  assert( db->pParse==pParse );\n+  assert( pParse->nested==0 );\n+#ifndef SQLITE_OMIT_SHARED_CACHE\n+  sqlite3DbFree(db, pParse->aTableLock);\n+#endif\n@@ -132810,5 +135120,6 @@\n-  if( db ){\n-    assert( db->lookaside.bDisable >= pParse->disableLookaside );\n-    db->lookaside.bDisable -= pParse->disableLookaside;\n-    db->lookaside.sz = db->lookaside.bDisable ? 0 : db->lookaside.szTrue;\n-  }\n+  assert( db->lookaside.bDisable >= pParse->disableLookaside );\n+  db->lookaside.bDisable -= pParse->disableLookaside;\n+  db->lookaside.sz = db->lookaside.bDisable ? 0 : db->lookaside.szTrue;\n+  assert( pParse->db->pParse==pParse );\n+  db->pParse = pParse->pOuterParse;\n+  pParse->db = 0;\n@@ -132827,1 +135138,1 @@\n-** sqlite3ParserReset(), which reduces the total CPU cycle count.\n+** sqlite3ParseObjectReset(), which reduces the total CPU cycle count.\n@@ -132867,0 +135178,27 @@\n+\/*\n+** Turn bulk memory into a valid Parse object and link that Parse object\n+** into database connection db.\n+**\n+** Call sqlite3ParseObjectReset() to undo this operation.\n+**\n+** Caution:  Do not confuse this routine with sqlite3ParseObjectInit() which\n+** is generated by Lemon.\n+*\/\n+SQLITE_PRIVATE void sqlite3ParseObjectInit(Parse *pParse, sqlite3 *db){\n+  memset(PARSE_HDR(pParse), 0, PARSE_HDR_SZ);\n+  memset(PARSE_TAIL(pParse), 0, PARSE_TAIL_SZ);\n+  assert( db->pParse!=pParse );\n+  pParse->pOuterParse = db->pParse;\n+  db->pParse = pParse;\n+  pParse->db = db;\n+  if( db->mallocFailed ) sqlite3ErrorMsg(pParse, \"out of memory\");\n+}\n+\n+\/*\n+** Maximum number of times that we will try again to prepare a statement\n+** that returns SQLITE_ERROR_RETRY.\n+*\/\n+#ifndef SQLITE_MAX_PREPARE_RETRY\n+# define SQLITE_MAX_PREPARE_RETRY 25\n+#endif\n+\n@@ -132879,1 +135217,0 @@\n-  char *zErrMsg = 0;        \/* Error message *\/\n@@ -132884,1 +135221,2 @@\n-  memset(&sParse, 0, PARSE_HDR_SZ);\n+  \/* sqlite3ParseObjectInit(&sParse, db); \/\/ inlined for performance *\/\n+  memset(PARSE_HDR(&sParse), 0, PARSE_HDR_SZ);\n@@ -132886,0 +135224,3 @@\n+  sParse.pOuterParse = db->pParse;\n+  db->pParse = &sParse;\n+  sParse.db = db;\n@@ -132888,1 +135229,1 @@\n-  \/* assert( !db->mallocFailed ); \/\/ not true with SQLITE_USE_ALLOCA *\/\n+  if( db->mallocFailed ) sqlite3ErrorMsg(&sParse, \"out of memory\");\n@@ -132941,1 +135282,0 @@\n-  sParse.db = db;\n@@ -132954,1 +135294,1 @@\n-      sqlite3RunParser(&sParse, zSqlCopy, &zErrMsg);\n+      sqlite3RunParser(&sParse, zSqlCopy);\n@@ -132961,1 +135301,1 @@\n-    sqlite3RunParser(&sParse, zSql, &zErrMsg);\n+    sqlite3RunParser(&sParse, zSql);\n@@ -132985,3 +135325,3 @@\n-    if( zErrMsg ){\n-      sqlite3ErrorWithMsg(db, rc, \"%s\", zErrMsg);\n-      sqlite3DbFree(db, zErrMsg);\n+    if( sParse.zErrMsg ){\n+      sqlite3ErrorWithMsg(db, rc, \"%s\", sParse.zErrMsg);\n+      sqlite3DbFree(db, sParse.zErrMsg);\n@@ -132992,1 +135332,1 @@\n-    assert( zErrMsg==0 );\n+    assert( sParse.zErrMsg==0 );\n@@ -133008,1 +135348,1 @@\n-  sqlite3ParserReset(&sParse);\n+  sqlite3ParseObjectReset(&sParse);\n@@ -133039,1 +135379,1 @@\n-  }while( rc==SQLITE_ERROR_RETRY\n+  }while( (rc==SQLITE_ERROR_RETRY && (cnt++)<SQLITE_MAX_PREPARE_RETRY)\n@@ -133280,1 +135620,1 @@\n-  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/\n+  u8 isTnct;      \/* 0: Not distinct. 1: DISTICT  2: DISTINCT and ORDER BY *\/\n@@ -133463,0 +135803,46 @@\n+**\n+** These are the valid join types:\n+**\n+**\n+**      pA       pB       pC               Return Value\n+**     -------  -----    -----             ------------\n+**     CROSS      -        -                 JT_CROSS\n+**     INNER      -        -                 JT_INNER\n+**     LEFT       -        -                 JT_LEFT|JT_OUTER\n+**     LEFT     OUTER      -                 JT_LEFT|JT_OUTER\n+**     RIGHT      -        -                 JT_RIGHT|JT_OUTER\n+**     RIGHT    OUTER      -                 JT_RIGHT|JT_OUTER\n+**     FULL       -        -                 JT_LEFT|JT_RIGHT|JT_OUTER\n+**     FULL     OUTER      -                 JT_LEFT|JT_RIGHT|JT_OUTER\n+**     NATURAL  INNER      -                 JT_NATURAL|JT_INNER\n+**     NATURAL  LEFT       -                 JT_NATURAL|JT_LEFT|JT_OUTER\n+**     NATURAL  LEFT     OUTER               JT_NATURAL|JT_LEFT|JT_OUTER\n+**     NATURAL  RIGHT      -                 JT_NATURAL|JT_RIGHT|JT_OUTER\n+**     NATURAL  RIGHT    OUTER               JT_NATURAL|JT_RIGHT|JT_OUTER\n+**     NATURAL  FULL       -                 JT_NATURAL|JT_LEFT|JT_RIGHT\n+**     NATURAL  FULL     OUTER               JT_NATRUAL|JT_LEFT|JT_RIGHT\n+**\n+** To preserve historical compatibly, SQLite also accepts a variety\n+** of other non-standard and in many cases non-sensical join types.\n+** This routine makes as much sense at it can from the nonsense join\n+** type and returns a result.  Examples of accepted nonsense join types\n+** include but are not limited to:\n+**\n+**          INNER CROSS JOIN        ->   same as JOIN\n+**          NATURAL CROSS JOIN      ->   same as NATURAL JOIN\n+**          OUTER LEFT JOIN         ->   same as LEFT JOIN\n+**          LEFT NATURAL JOIN       ->   same as NATURAL LEFT JOIN\n+**          LEFT RIGHT JOIN         ->   same as FULL JOIN\n+**          RIGHT OUTER FULL JOIN   ->   same as FULL JOIN\n+**          CROSS CROSS CROSS JOIN  ->   same as JOIN\n+**\n+** The only restrictions on the join type name are:\n+**\n+**    *   \"INNER\" cannot appear together with \"OUTER\", \"LEFT\", \"RIGHT\",\n+**        or \"FULL\".\n+**\n+**    *   \"CROSS\" cannot appear together with \"OUTER\", \"LEFT\", \"RIGHT,\n+**        or \"FULL\".\n+**\n+**    *   If \"OUTER\" is present then there must also be one of\n+**        \"LEFT\", \"RIGHT\", or \"FULL\"\n@@ -133475,7 +135861,7 @@\n-    \/* natural *\/ { 0,  7, JT_NATURAL                },\n-    \/* left    *\/ { 6,  4, JT_LEFT|JT_OUTER          },\n-    \/* outer   *\/ { 10, 5, JT_OUTER                  },\n-    \/* right   *\/ { 14, 5, JT_RIGHT|JT_OUTER         },\n-    \/* full    *\/ { 19, 4, JT_LEFT|JT_RIGHT|JT_OUTER },\n-    \/* inner   *\/ { 23, 5, JT_INNER                  },\n-    \/* cross   *\/ { 28, 5, JT_INNER|JT_CROSS         },\n+    \/* (0) natural *\/ { 0,  7, JT_NATURAL                },\n+    \/* (1) left    *\/ { 6,  4, JT_LEFT|JT_OUTER          },\n+    \/* (2) outer   *\/ { 10, 5, JT_OUTER                  },\n+    \/* (3) right   *\/ { 14, 5, JT_RIGHT|JT_OUTER         },\n+    \/* (4) full    *\/ { 19, 4, JT_LEFT|JT_RIGHT|JT_OUTER },\n+    \/* (5) inner   *\/ { 23, 5, JT_INNER                  },\n+    \/* (6) cross   *\/ { 28, 5, JT_INNER|JT_CROSS         },\n@@ -133504,1 +135890,2 @@\n-     (jointype & JT_ERROR)!=0\n+     (jointype & JT_ERROR)!=0 ||\n+     (jointype & (JT_OUTER|JT_LEFT|JT_RIGHT))==JT_OUTER\n@@ -133506,10 +135893,6 @@\n-    const char *zSp = \" \";\n-    assert( pB!=0 );\n-    if( pC==0 ){ zSp++; }\n-    sqlite3ErrorMsg(pParse, \"unknown or unsupported join type: \"\n-       \"%T %T%s%T\", pA, pB, zSp, pC);\n-    jointype = JT_INNER;\n-  }else if( (jointype & JT_OUTER)!=0\n-         && (jointype & (JT_LEFT|JT_RIGHT))!=JT_LEFT ){\n-    sqlite3ErrorMsg(pParse,\n-      \"RIGHT and FULL OUTER JOINs are not currently supported\");\n+    const char *zSp1 = \" \";\n+    const char *zSp2 = \" \";\n+    if( pB==0 ){ zSp1++; }\n+    if( pC==0 ){ zSp2++; }\n+    sqlite3ErrorMsg(pParse, \"unknown join type: \"\n+       \"%T%s%T%s%T\", pA, zSp1, pB, zSp2, pC);\n@@ -133536,2 +135919,19 @@\n-** Search the first N tables in pSrc, from left to right, looking for a\n-** table that has a column named zCol.\n+** Mark a subquery result column as having been used.\n+*\/\n+SQLITE_PRIVATE void sqlite3SrcItemColumnUsed(SrcItem *pItem, int iCol){\n+  assert( pItem!=0 );\n+  assert( (int)pItem->fg.isNestedFrom == IsNestedFrom(pItem->pSelect) );\n+  if( pItem->fg.isNestedFrom ){\n+    ExprList *pResults;\n+    assert( pItem->pSelect!=0 );\n+    pResults = pItem->pSelect->pEList;\n+    assert( pResults!=0 );\n+    assert( iCol>=0 && iCol<pResults->nExpr );\n+    pResults->a[iCol].fg.bUsed = 1;\n+  }\n+}\n+\n+\/*\n+** Search the tables iStart..iEnd (inclusive) in pSrc, looking for a\n+** table that has a column named zCol.  The search is left-to-right.\n+** The first match found is returned.\n@@ -133546,1 +135946,2 @@\n-  int N,               \/* Number of tables in pSrc->a[] to search *\/\n+  int iStart,          \/* First member of pSrc->a[] to check *\/\n+  int iEnd,            \/* Last member of pSrc->a[] to check *\/\n@@ -133550,1 +135951,1 @@\n-  int bIgnoreHidden    \/* True to ignore hidden columns *\/\n+  int bIgnoreHidden    \/* Ignore hidden columns *\/\n@@ -133555,0 +135956,2 @@\n+  assert( iEnd<pSrc->nSrc );\n+  assert( iStart>=0 );\n@@ -133556,1 +135959,2 @@\n-  for(i=0; i<N; i++){\n+\n+  for(i=iStart; i<=iEnd; i++){\n@@ -133562,0 +135966,1 @@\n+        sqlite3SrcItemColumnUsed(&pSrc->a[i], iCol);\n@@ -133572,49 +135977,2 @@\n-** This function is used to add terms implied by JOIN syntax to the\n-** WHERE clause expression of a SELECT statement. The new term, which\n-** is ANDed with the existing WHERE clause, is of the form:\n-**\n-**    (tab1.col1 = tab2.col2)\n-**\n-** where tab1 is the iSrc'th table in SrcList pSrc and tab2 is the\n-** (iSrc+1)'th. Column col1 is column iColLeft of tab1, and col2 is\n-** column iColRight of tab2.\n-*\/\n-static void addWhereTerm(\n-  Parse *pParse,                  \/* Parsing context *\/\n-  SrcList *pSrc,                  \/* List of tables in FROM clause *\/\n-  int iLeft,                      \/* Index of first table to join in pSrc *\/\n-  int iColLeft,                   \/* Index of column in first table *\/\n-  int iRight,                     \/* Index of second table in pSrc *\/\n-  int iColRight,                  \/* Index of column in second table *\/\n-  int isOuterJoin,                \/* True if this is an OUTER join *\/\n-  Expr **ppWhere                  \/* IN\/OUT: The WHERE clause to add to *\/\n-){\n-  sqlite3 *db = pParse->db;\n-  Expr *pE1;\n-  Expr *pE2;\n-  Expr *pEq;\n-\n-  assert( iLeft<iRight );\n-  assert( pSrc->nSrc>iRight );\n-  assert( pSrc->a[iLeft].pTab );\n-  assert( pSrc->a[iRight].pTab );\n-\n-  pE1 = sqlite3CreateColumnExpr(db, pSrc, iLeft, iColLeft);\n-  pE2 = sqlite3CreateColumnExpr(db, pSrc, iRight, iColRight);\n-\n-  pEq = sqlite3PExpr(pParse, TK_EQ, pE1, pE2);\n-  assert( pE2!=0 || pEq==0 );  \/* Due to db->mallocFailed test\n-                               ** in sqlite3DbMallocRawNN() called from\n-                               ** sqlite3PExpr(). *\/\n-  if( pEq && isOuterJoin ){\n-    ExprSetProperty(pEq, EP_FromJoin);\n-    assert( !ExprHasProperty(pEq, EP_TokenOnly|EP_Reduced) );\n-    ExprSetVVAProperty(pEq, EP_NoReduce);\n-    pEq->iRightJoinTable = pE2->iTable;\n-  }\n-  *ppWhere = sqlite3ExprAnd(pParse, *ppWhere, pEq);\n-}\n-\n-\/*\n-** Set the EP_FromJoin property on all terms of the given expression.\n-** And set the Expr.iRightJoinTable to iTable for every term in the\n+** Set the EP_OuterON property on all terms of the given expression.\n+** And set the Expr.w.iJoin to iTable for every term in the\n@@ -133623,2 +135981,2 @@\n-** The EP_FromJoin property is used on terms of an expression to tell\n-** the LEFT OUTER JOIN processing logic that this term is part of the\n+** The EP_OuterON property is used on terms of an expression to tell\n+** the OUTER JOIN processing logic that this term is part of the\n@@ -133630,2 +135988,2 @@\n-** The Expr.iRightJoinTable tells the WHERE clause processing that the\n-** expression depends on table iRightJoinTable even if that table is not\n+** The Expr.w.iJoin tells the WHERE clause processing that the\n+** expression depends on table w.iJoin even if that table is not\n@@ -133644,1 +136002,2 @@\n-SQLITE_PRIVATE void sqlite3SetJoinExpr(Expr *p, int iTable){\n+SQLITE_PRIVATE void sqlite3SetJoinExpr(Expr *p, int iTable, u32 joinFlag){\n+  assert( joinFlag==EP_OuterON || joinFlag==EP_InnerON );\n@@ -133646,1 +136005,1 @@\n-    ExprSetProperty(p, EP_FromJoin);\n+    ExprSetProperty(p, joinFlag);\n@@ -133649,1 +136008,1 @@\n-    p->iRightJoinTable = iTable;\n+    p->w.iJoin = iTable;\n@@ -133655,1 +136014,1 @@\n-          sqlite3SetJoinExpr(p->x.pList->a[i].pExpr, iTable);\n+          sqlite3SetJoinExpr(p->x.pList->a[i].pExpr, iTable, joinFlag);\n@@ -133659,1 +136018,1 @@\n-    sqlite3SetJoinExpr(p->pLeft, iTable);\n+    sqlite3SetJoinExpr(p->pLeft, iTable, joinFlag);\n@@ -133664,3 +136023,7 @@\n-\/* Undo the work of sqlite3SetJoinExpr(). In the expression p, convert every\n-** term that is marked with EP_FromJoin and iRightJoinTable==iTable into\n-** an ordinary term that omits the EP_FromJoin mark.\n+\/* Undo the work of sqlite3SetJoinExpr().  This is used when a LEFT JOIN\n+** is simplified into an ordinary JOIN, and when an ON expression is\n+** \"pushed down\" into the WHERE clause of a subquery.\n+**\n+** Convert every term that is marked with EP_OuterON and w.iJoin==iTable into\n+** an ordinary term that omits the EP_OuterON mark.  Or if iTable<0, then\n+** just clear every EP_OuterON and EP_InnerON mark from the expression tree.\n@@ -133668,1 +136031,5 @@\n-** This happens when a LEFT JOIN is simplified into an ordinary JOIN.\n+** If nullable is true, that means that Expr p might evaluate to NULL even\n+** if it is a reference to a NOT NULL column.  This can happen, for example,\n+** if the table that p references is on the left side of a RIGHT JOIN.\n+** If nullable is true, then take care to not remove the EP_CanBeNull bit.\n+** See forum thread https:\/\/sqlite.org\/forum\/forumpost\/b40696f50145d21c\n@@ -133670,1 +136037,1 @@\n-static void unsetJoinExpr(Expr *p, int iTable){\n+static void unsetJoinExpr(Expr *p, int iTable, int nullable){\n@@ -133672,3 +136039,3 @@\n-    if( ExprHasProperty(p, EP_FromJoin)\n-     && (iTable<0 || p->iRightJoinTable==iTable) ){\n-      ExprClearProperty(p, EP_FromJoin);\n+    if( iTable<0 || (ExprHasProperty(p, EP_OuterON) && p->w.iJoin==iTable) ){\n+      ExprClearProperty(p, EP_OuterON|EP_InnerON);\n+      if( iTable>=0 ) ExprSetProperty(p, EP_InnerON);\n@@ -133676,1 +136043,1 @@\n-    if( p->op==TK_COLUMN && p->iTable==iTable ){\n+    if( p->op==TK_COLUMN && p->iTable==iTable && !nullable ){\n@@ -133684,1 +136051,1 @@\n-          unsetJoinExpr(p->x.pList->a[i].pExpr, iTable);\n+          unsetJoinExpr(p->x.pList->a[i].pExpr, iTable, nullable);\n@@ -133688,1 +136055,1 @@\n-    unsetJoinExpr(p->pLeft, iTable);\n+    unsetJoinExpr(p->pLeft, iTable, nullable);\n@@ -133695,2 +136062,9 @@\n-** ON and USING clauses are converted into extra terms of the WHERE clause.\n-** NATURAL joins also create extra WHERE clause terms.\n+**\n+**   *  A NATURAL join is converted into a USING join.  After that, we\n+**      do not need to be concerned with NATURAL joins and we only have\n+**      think about USING joins.\n+**\n+**   *  ON and USING clauses result in extra terms being added to the\n+**      WHERE clause to enforce the specified constraints.  The extra\n+**      WHERE clause terms will be tagged with EP_OuterON or\n+**      EP_InnerON so that we know that they originated in ON\/USING.\n@@ -133701,1 +136075,1 @@\n-** the left.  Thus entry 0 contains the join operator for the join between\n+** the right.  Thus entry 1 contains the join operator for the join between\n@@ -133703,1 +136077,1 @@\n-** also attached to the left entry.\n+** also attached to the right entry.\n@@ -133707,1 +136081,1 @@\n-static int sqliteProcessJoin(Parse *pParse, Select *p){\n+static int sqlite3ProcessJoin(Parse *pParse, Select *p){\n@@ -133718,1 +136092,1 @@\n-    int isOuter;\n+    u32 joinType;\n@@ -133721,1 +136095,1 @@\n-    isOuter = (pRight->fg.jointype & JT_OUTER)!=0;\n+    joinType = (pRight->fg.jointype & JT_OUTER)!=0 ? EP_OuterON : EP_InnerON;\n@@ -133723,2 +136097,2 @@\n-    \/* When the NATURAL keyword is present, add WHERE clause terms for\n-    ** every column that the two tables have in common.\n+    \/* If this is a NATURAL join, synthesize an approprate USING clause\n+    ** to specify which columns should be joined.\n@@ -133727,1 +136101,2 @@\n-      if( pRight->pOn || pRight->pUsing ){\n+      IdList *pUsing = 0;\n+      if( pRight->fg.isUsing || pRight->u3.pOn ){\n@@ -133734,2 +136109,0 @@\n-        int iLeft;     \/* Matching left table *\/\n-        int iLeftCol;  \/* Matching column in the left table *\/\n@@ -133739,3 +136112,7 @@\n-        if( tableAndColumnIndex(pSrc, i+1, zName, &iLeft, &iLeftCol, 1) ){\n-          addWhereTerm(pParse, pSrc, iLeft, iLeftCol, i+1, j,\n-                isOuter, &p->pWhere);\n+        if( tableAndColumnIndex(pSrc, 0, i, zName, 0, 0, 1) ){\n+          pUsing = sqlite3IdListAppend(pParse, pUsing, 0);\n+          if( pUsing ){\n+            assert( pUsing->nId>0 );\n+            assert( pUsing->a[pUsing->nId-1].zName==0 );\n+            pUsing->a[pUsing->nId-1].zName = sqlite3DbStrDup(pParse->db, zName);\n+          }\n@@ -133744,17 +136121,6 @@\n-    }\n-\n-    \/* Disallow both ON and USING clauses in the same join\n-    *\/\n-    if( pRight->pOn && pRight->pUsing ){\n-      sqlite3ErrorMsg(pParse, \"cannot have both ON and USING \"\n-        \"clauses in the same join\");\n-      return 1;\n-    }\n-\n-    \/* Add the ON clause to the end of the WHERE clause, connected by\n-    ** an AND operator.\n-    *\/\n-    if( pRight->pOn ){\n-      if( isOuter ) sqlite3SetJoinExpr(pRight->pOn, pRight->iCursor);\n-      p->pWhere = sqlite3ExprAnd(pParse, p->pWhere, pRight->pOn);\n-      pRight->pOn = 0;\n+      if( pUsing ){\n+        pRight->fg.isUsing = 1;\n+        pRight->fg.isSynthUsing = 1;\n+        pRight->u3.pUsing = pUsing;\n+      }\n+      if( pParse->nErr ) return 1;\n@@ -133770,2 +136136,4 @@\n-    if( pRight->pUsing ){\n-      IdList *pList = pRight->pUsing;\n+    if( pRight->fg.isUsing ){\n+      IdList *pList = pRight->u3.pUsing;\n+      sqlite3 *db = pParse->db;\n+      assert( pList!=0 );\n@@ -133777,0 +136145,3 @@\n+        Expr *pE1;       \/* Reference to the column on the LEFT of the join *\/\n+        Expr *pE2;       \/* Reference to the column on the RIGHT of the join *\/\n+        Expr *pEq;       \/* Equality constraint.  pE1 == pE2 *\/\n@@ -133781,1 +136152,2 @@\n-         || !tableAndColumnIndex(pSrc, i+1, zName, &iLeft, &iLeftCol, 0)\n+         || tableAndColumnIndex(pSrc, 0, i, zName, &iLeft, &iLeftCol,\n+                                pRight->fg.isSynthUsing)==0\n@@ -133787,2 +136159,47 @@\n-        addWhereTerm(pParse, pSrc, iLeft, iLeftCol, i+1, iRightCol,\n-                     isOuter, &p->pWhere);\n+        pE1 = sqlite3CreateColumnExpr(db, pSrc, iLeft, iLeftCol);\n+        sqlite3SrcItemColumnUsed(&pSrc->a[iLeft], iLeftCol);\n+        if( (pSrc->a[0].fg.jointype & JT_LTORJ)!=0 ){\n+          \/* This branch runs if the query contains one or more RIGHT or FULL\n+          ** JOINs.  If only a single table on the left side of this join\n+          ** contains the zName column, then this branch is a no-op.\n+          ** But if there are two or more tables on the left side\n+          ** of the join, construct a coalesce() function that gathers all\n+          ** such tables.  Raise an error if more than one of those references\n+          ** to zName is not also within a prior USING clause.\n+          **\n+          ** We really ought to raise an error if there are two or more\n+          ** non-USING references to zName on the left of an INNER or LEFT\n+          ** JOIN.  But older versions of SQLite do not do that, so we avoid\n+          ** adding a new error so as to not break legacy applications.\n+          *\/\n+          ExprList *pFuncArgs = 0;   \/* Arguments to the coalesce() *\/\n+          static const Token tkCoalesce = { \"coalesce\", 8 };\n+          while( tableAndColumnIndex(pSrc, iLeft+1, i, zName, &iLeft, &iLeftCol,\n+                                     pRight->fg.isSynthUsing)!=0 ){\n+            if( pSrc->a[iLeft].fg.isUsing==0\n+             || sqlite3IdListIndex(pSrc->a[iLeft].u3.pUsing, zName)<0\n+            ){\n+              sqlite3ErrorMsg(pParse, \"ambiguous reference to %s in USING()\",\n+                              zName);\n+              break;\n+            }\n+            pFuncArgs = sqlite3ExprListAppend(pParse, pFuncArgs, pE1);\n+            pE1 = sqlite3CreateColumnExpr(db, pSrc, iLeft, iLeftCol);\n+            sqlite3SrcItemColumnUsed(&pSrc->a[iLeft], iLeftCol);\n+          }\n+          if( pFuncArgs ){\n+            pFuncArgs = sqlite3ExprListAppend(pParse, pFuncArgs, pE1);\n+            pE1 = sqlite3ExprFunction(pParse, pFuncArgs, &tkCoalesce, 0);\n+          }\n+        }\n+        pE2 = sqlite3CreateColumnExpr(db, pSrc, i+1, iRightCol);\n+        sqlite3SrcItemColumnUsed(pRight, iRightCol);\n+        pEq = sqlite3PExpr(pParse, TK_EQ, pE1, pE2);\n+        assert( pE2!=0 || pEq==0 );\n+        if( pEq ){\n+          ExprSetProperty(pEq, joinType);\n+          assert( !ExprHasProperty(pEq, EP_TokenOnly|EP_Reduced) );\n+          ExprSetVVAProperty(pEq, EP_NoReduce);\n+          pEq->w.iJoin = pE2->iTable;\n+        }\n+        p->pWhere = sqlite3ExprAnd(pParse, p->pWhere, pEq);\n@@ -133791,0 +136208,10 @@\n+\n+    \/* Add the ON clause to the end of the WHERE clause, connected by\n+    ** an AND operator.\n+    *\/\n+    else if( pRight->u3.pOn ){\n+      sqlite3SetJoinExpr(pRight->u3.pOn, pRight->iCursor, joinType);\n+      p->pWhere = sqlite3ExprAnd(pParse, p->pWhere, pRight->u3.pOn);\n+      pRight->u3.pOn = 0;\n+      pRight->fg.isOn = 1;\n+    }\n@@ -134179,1 +136606,1 @@\n-** The ExprList_item.bSorterRef flag is set for each expression in pEList\n+** The ExprList_item.fg.bSorterRef flag is set for each expression in pEList\n@@ -134239,1 +136666,1 @@\n-        pItem->bSorterRef = 1;\n+        pItem->fg.bSorterRef = 1;\n@@ -134370,1 +136797,1 @@\n-         || pEList->a[i].bSorterRef\n+         || pEList->a[i].fg.bSorterRef\n@@ -134663,1 +137090,1 @@\n-    sqlite3OomFault(db);\n+    return (KeyInfo*)sqlite3OomFault(db);\n@@ -134732,1 +137159,1 @@\n-      pInfo->aSortFlags[i-iStart] = pItem->sortFlags;\n+      pInfo->aSortFlags[i-iStart] = pItem->fg.sortFlags;\n@@ -134834,0 +137261,3 @@\n+    if( eDest==SRT_Mem && p->iOffset ){\n+      sqlite3VdbeAddOp2(v, OP_Null, 0, pDest->iSdst);\n+    }\n@@ -134857,1 +137287,1 @@\n-    codeOffset(v, p->iOffset, addrContinue);\n+    assert( p->iLimit==0 && p->iOffset==0 );\n@@ -134865,0 +137295,3 @@\n+    if( p->iOffset>0 ){\n+      sqlite3VdbeAddOp2(v, OP_AddImm, p->iLimit, -1);\n+    }\n@@ -134868,1 +137301,1 @@\n-    if( aOutEx[i].bSorterRef ) continue;\n+    if( aOutEx[i].fg.bSorterRef ) continue;\n@@ -134905,1 +137338,1 @@\n-    if( aOutEx[i].bSorterRef ){\n+    if( aOutEx[i].fg.bSorterRef ){\n@@ -135271,1 +137704,1 @@\n-    if( pEList->a[i].zEName && pEList->a[i].eEName==ENAME_NAME ){\n+    if( pEList->a[i].zEName && pEList->a[i].fg.eEName==ENAME_NAME ){\n@@ -135356,0 +137789,2 @@\n+    struct ExprList_item *pX = &pEList->a[i];\n+    struct ExprList_item *pCollide;\n@@ -135358,1 +137793,1 @@\n-    if( (zName = pEList->a[i].zEName)!=0 && pEList->a[i].eEName==ENAME_NAME ){\n+    if( (zName = pX->zEName)!=0 && pX->fg.eEName==ENAME_NAME ){\n@@ -135361,1 +137796,1 @@\n-      Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);\n+      Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pX->pExpr);\n@@ -135368,1 +137803,1 @@\n-       && (pTab = pColExpr->y.pTab)!=0\n+       && ALWAYS( pColExpr->y.pTab!=0 )\n@@ -135372,0 +137807,1 @@\n+        pTab = pColExpr->y.pTab;\n@@ -135379,1 +137815,1 @@\n-        zName = pEList->a[i].zEName;\n+        assert( zName==pX->zEName );  \/* pointer comparison intended *\/\n@@ -135392,1 +137828,4 @@\n-    while( zName && sqlite3HashFind(&ht, zName)!=0 ){\n+    while( zName && (pCollide = sqlite3HashFind(&ht, zName))!=0 ){\n+      if( pCollide->fg.bUsingTerm ){\n+        pCol->colFlags |= COLFLAG_NOEXPAND;\n+      }\n@@ -135403,0 +137842,3 @@\n+    if( pX->fg.bNoExpand ){\n+      pCol->colFlags |= COLFLAG_NOEXPAND;\n+    }\n@@ -135404,1 +137846,1 @@\n-    if( zName && sqlite3HashInsert(&ht, zName, pCol)==pCol ){\n+    if( zName && sqlite3HashInsert(&ht, zName, pX)==pX ){\n@@ -135661,1 +138103,1 @@\n-      pRet->aSortFlags[i] = pOrderBy->a[i].sortFlags;\n+      pRet->aSortFlags[i] = pOrderBy->a[i].fg.sortFlags;\n@@ -135879,1 +138321,1 @@\n-** Since the limit is exactly 1, we only need to evalutes the left-most VALUES.\n+** Since the limit is exactly 1, we only need to evaluate the left-most VALUES.\n@@ -136555,0 +138997,2 @@\n+  Select *pSplit;       \/* Left-most SELECT in the right-hand group *\/\n+  int nSelect;          \/* Number of SELECT statements in the compound *\/\n@@ -136600,2 +139044,1 @@\n-  pPrior = p->pPrior;\n-  assert( pPrior->pOrderBy==0 );\n+  assert( p->pPrior->pOrderBy==0 );\n@@ -136651,5 +139094,0 @@\n-  \/* Reattach the ORDER BY clause to the query.\n-  *\/\n-  p->pOrderBy = pOrderBy;\n-  pPrior->pOrderBy = sqlite3ExprListDup(pParse->db, pOrderBy, 0);\n-\n@@ -136680,1 +139118,18 @@\n-  p->pPrior = 0;\n+  nSelect = 1;\n+  if( (op==TK_ALL || op==TK_UNION)\n+   && OptimizationEnabled(db, SQLITE_BalancedMerge)\n+  ){\n+    for(pSplit=p; pSplit->pPrior!=0 && pSplit->op==op; pSplit=pSplit->pPrior){\n+      nSelect++;\n+      assert( pSplit->pPrior->pNext==pSplit );\n+    }\n+  }\n+  if( nSelect<=3 ){\n+    pSplit = p;\n+  }else{\n+    pSplit = p;\n+    for(i=2; i<nSelect; i+=2){ pSplit = pSplit->pPrior; }\n+  }\n+  pPrior = pSplit->pPrior;\n+  assert( pPrior!=0 );\n+  pSplit->pPrior = 0;\n@@ -136682,0 +139137,3 @@\n+  assert( p->pOrderBy == pOrderBy );\n+  assert( pOrderBy!=0 || db->mallocFailed );\n+  pPrior->pOrderBy = sqlite3ExprListDup(pParse->db, pOrderBy, 0);\n@@ -136683,3 +139141,1 @@\n-  if( pPrior->pPrior==0 ){\n-    sqlite3ResolveOrderGroupBy(pParse, pPrior, pPrior->pOrderBy, \"ORDER\");\n-  }\n+  sqlite3ResolveOrderGroupBy(pParse, pPrior, pPrior->pOrderBy, \"ORDER\");\n@@ -136834,1 +139290,1 @@\n-  \/* Reassembly the compound query so that it will be freed correctly\n+  \/* Reassemble the compound query so that it will be freed correctly\n@@ -136836,2 +139292,3 @@\n-  if( p->pPrior ){\n-    sqlite3SelectDelete(db, p->pPrior);\n+  if( pSplit->pPrior ){\n+    sqlite3ParserAddCleanup(pParse,\n+       (void(*)(sqlite3*,void*))sqlite3SelectDelete, pSplit->pPrior);\n@@ -136839,3 +139296,2 @@\n-  p->pPrior = pPrior;\n-  pPrior->pNext = p;\n-\n+  pSplit->pPrior = pPrior;\n+  pPrior->pNext = pSplit;\n@@ -136859,0 +139315,28 @@\n+**\n+** ## About \"isOuterJoin\":\n+**\n+** The isOuterJoin column indicates that the replacement will occur into a\n+** position in the parent that NULL-able due to an OUTER JOIN.  Either the\n+** target slot in the parent is the right operand of a LEFT JOIN, or one of\n+** the left operands of a RIGHT JOIN.  In either case, we need to potentially\n+** bypass the substituted expression with OP_IfNullRow.\n+**\n+** Suppose the original expression integer constant.  Even though the table\n+** has the nullRow flag set, because the expression is an integer constant,\n+** it will not be NULLed out.  So instead, we insert an OP_IfNullRow opcode\n+** that checks to see if the nullRow flag is set on the table.  If the nullRow\n+** flag is set, then the value in the register is set to NULL and the original\n+** expression is bypassed.  If the nullRow flag is not set, then the original\n+** expression runs to populate the register.\n+**\n+** Example where this is needed:\n+**\n+**      CREATE TABLE t1(a INTEGER PRIMARY KEY, b INT);\n+**      CREATE TABLE t2(x INT UNIQUE);\n+**\n+**      SELECT a,b,m,x FROM t1 LEFT JOIN (SELECT 59 AS m,x FROM t2) ON b=x;\n+**\n+** When the subquery on the right side of the LEFT JOIN is flattened, we\n+** have to add OP_IfNullRow in front of the OP_Integer that implements the\n+** \"m\" value of the subquery so that a NULL will be loaded instead of 59\n+** when processing a non-matched row of the left.\n@@ -136864,1 +139348,1 @@\n-  int isLeftJoin;           \/* Add TK_IF_NULL_ROW opcodes on each replacement *\/\n+  int isOuterJoin;          \/* Add TK_IF_NULL_ROW opcodes on each replacement *\/\n@@ -136890,2 +139374,2 @@\n-  if( ExprHasProperty(pExpr, EP_FromJoin)\n-   && pExpr->iRightJoinTable==pSubst->iTable\n+  if( ExprHasProperty(pExpr, EP_OuterON|EP_InnerON)\n+   && pExpr->w.iJoin==pSubst->iTable\n@@ -136893,1 +139377,2 @@\n-    pExpr->iRightJoinTable = pSubst->iNewTable;\n+    testcase( ExprHasProperty(pExpr, EP_InnerON) );\n+    pExpr->w.iJoin = pSubst->iNewTable;\n@@ -136914,1 +139399,1 @@\n-        if( pSubst->isLeftJoin && pCopy->op!=TK_COLUMN ){\n+        if( pSubst->isOuterJoin && pCopy->op!=TK_COLUMN ){\n@@ -136928,1 +139413,1 @@\n-        if( pSubst->isLeftJoin ){\n+        if( pSubst->isOuterJoin ){\n@@ -136931,2 +139416,3 @@\n-        if( ExprHasProperty(pExpr,EP_FromJoin) ){\n-          sqlite3SetJoinExpr(pNew, pExpr->iRightJoinTable);\n+        if( ExprHasProperty(pExpr,EP_OuterON|EP_InnerON) ){\n+          sqlite3SetJoinExpr(pNew, pExpr->w.iJoin,\n+                             pExpr->flags & (EP_OuterON|EP_InnerON));\n@@ -136936,0 +139422,5 @@\n+        if( pExpr->op==TK_TRUEFALSE ){\n+          pExpr->u.iValue = sqlite3ExprTruthValue(pExpr);\n+          pExpr->op = TK_INTEGER;\n+          ExprSetProperty(pExpr, EP_IntValue);\n+        }\n@@ -137096,2 +139587,2 @@\n-  if( ExprHasProperty(pExpr, EP_FromJoin) ){\n-    renumberCursorDoMapping(pWalker, &pExpr->iRightJoinTable);\n+  if( ExprHasProperty(pExpr, EP_OuterON) ){\n+    renumberCursorDoMapping(pWalker, &pExpr->w.iJoin);\n@@ -137182,0 +139673,1 @@\n+**        See also (26) for restrictions on RIGHT JOIN.\n@@ -137233,0 +139725,3 @@\n+**        (17g) either the subquery is the first element of the outer\n+**              query or there are no RIGHT or FULL JOINs in any arm\n+**              of the subquery.  (This is a duplicate of condition (27b).)\n@@ -137280,0 +139775,17 @@\n+**  (26)  The subquery may not be the right operand of a RIGHT JOIN.\n+**        See also (3) for restrictions on LEFT JOIN.\n+**\n+**  (27)  The subquery may not contain a FULL or RIGHT JOIN unless it\n+**        is the first element of the parent query.  This must be the\n+**        the case if:\n+**        (27a) the subquery is not compound query, and\n+**        (27b) the subquery is a compound query and the RIGHT JOIN occurs\n+**              in any arm of the compound query.  (See also (17g).)\n+**\n+**  (28)  The subquery is not a MATERIALIZED CTE.\n+**\n+**  (29)  Either the subquery is not the right-hand operand of a join with an\n+**        ON or USING clause nor the right-hand operand of a NATURAL JOIN, or\n+**        the right-most table within the FROM clause of the subquery\n+**        is not part of an outer join.\n+**\n@@ -137305,1 +139817,1 @@\n-  int isLeftJoin = 0; \/* True if pSub is the right side of a LEFT JOIN *\/\n+  int isOuterJoin = 0; \/* True if pSub is the right side of a LEFT JOIN *\/\n@@ -137378,6 +139890,6 @@\n-  if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){\n-    isLeftJoin = 1;\n-    if( pSubSrc->nSrc>1                   \/* (3a) *\/\n-     || isAgg                             \/* (3b) *\/\n-     || IsVirtual(pSubSrc->a[0].pTab)     \/* (3c) *\/\n-     || (p->selFlags & SF_Distinct)!=0    \/* (3d) *\/\n+  if( (pSubitem->fg.jointype & (JT_OUTER|JT_LTORJ))!=0 ){\n+    if( pSubSrc->nSrc>1                        \/* (3a) *\/\n+     || isAgg                                  \/* (3c) *\/\n+     || IsVirtual(pSubSrc->a[0].pTab)          \/* (3b) *\/\n+     || (p->selFlags & SF_Distinct)!=0         \/* (3d) *\/\n+     || (pSubitem->fg.jointype & JT_RIGHT)!=0  \/* (26) *\/\n@@ -137387,0 +139899,1 @@\n+    isOuterJoin = 1;\n@@ -137390,1 +139903,1 @@\n-    \/* Setting isLeftJoin to -1 causes OP_IfNullRow opcodes to be generated for\n+    \/* Setting isOuterJoin to -1 causes OP_IfNullRow opcodes to be generated for\n@@ -137394,1 +139907,1 @@\n-    isLeftJoin = -1;\n+    isOuterJoin = -1;\n@@ -137398,0 +139911,37 @@\n+  assert( pSubSrc->nSrc>0 );  \/* True by restriction (7) *\/\n+  if( iFrom>0 && (pSubSrc->a[0].fg.jointype & JT_LTORJ)!=0 ){\n+    return 0;   \/* Restriction (27a) *\/\n+  }\n+  if( pSubitem->fg.isCte && pSubitem->u2.pCteUse->eM10d==M10d_Yes ){\n+    return 0;       \/* (28) *\/\n+  }\n+\n+  \/* Restriction (29):\n+  **\n+  ** We do not want two constraints on the same term of the flattened\n+  ** query where one constraint has EP_InnerON and the other is EP_OuterON.\n+  ** To prevent this, one or the other of the following conditions must be\n+  ** false:\n+  **\n+  **   (29a)  The right-most entry in the FROM clause of the subquery\n+  **          must not be part of an outer join.\n+  **\n+  **   (29b)  The subquery itself must not be the right operand of a\n+  **          NATURAL join or a join that as an ON or USING clause.\n+  **\n+  ** These conditions are sufficient to keep an EP_OuterON from being\n+  ** flattened into an EP_InnerON.  Restrictions (3a) and (27a) prevent\n+  ** an EP_InnerON from being flattened into an EP_OuterON.\n+  *\/\n+  if( pSubSrc->nSrc>=2\n+   && (pSubSrc->a[pSubSrc->nSrc-1].fg.jointype & JT_OUTER)!=0\n+  ){\n+    if( (pSubitem->fg.jointype & JT_NATURAL)!=0\n+     || pSubitem->fg.isUsing\n+     || NEVER(pSubitem->u3.pOn!=0) \/* ON clause already shifted into WHERE *\/\n+     || pSubitem->fg.isOn\n+    ){\n+      return 0;\n+    }\n+  }\n+\n@@ -137407,1 +139957,1 @@\n-    if( isAgg || (p->selFlags & SF_Distinct)!=0 || isLeftJoin>0 ){\n+    if( isAgg || (p->selFlags & SF_Distinct)!=0 || isOuterJoin>0 ){\n@@ -137425,0 +139975,6 @@\n+      if( iFrom>0 && (pSub1->pSrc->a[0].fg.jointype & JT_LTORJ)!=0 ){\n+        \/* Without this restriction, the JT_LTORJ flag would end up being\n+        ** omitted on left-hand tables of the right join that is being\n+        ** flattened. *\/\n+        return 0;   \/* Restrictions (17g), (27b) *\/\n+      }\n@@ -137441,0 +139997,1 @@\n+      if( OptimizationDisabled(db, SQLITE_FlttnUnionAll) ) return 0;\n@@ -137465,1 +140022,1 @@\n-  assert( pSubitem->pOn==0 );\n+  assert( pSubitem->fg.isUsing!=0 || pSubitem->u3.pOn==0 );\n@@ -137575,0 +140132,1 @@\n+    u8 ltorj = pSrc->a[iFrom].fg.jointype & JT_LTORJ;\n@@ -137609,3 +140167,5 @@\n-      sqlite3IdListDelete(db, pSrc->a[i+iFrom].pUsing);\n-      assert( pSrc->a[i+iFrom].fg.isTabFunc==0 );\n-      pSrc->a[i+iFrom] = pSubSrc->a[i];\n+      SrcItem *pItem = &pSrc->a[i+iFrom];\n+      if( pItem->fg.isUsing ) sqlite3IdListDelete(db, pItem->u3.pUsing);\n+      assert( pItem->fg.isTabFunc==0 );\n+      *pItem = pSubSrc->a[i];\n+      pItem->fg.jointype |= ltorj;\n@@ -137615,1 +140175,2 @@\n-    pSrc->a[iFrom].fg.jointype = jointype;\n+    pSrc->a[iFrom].fg.jointype &= JT_LTORJ;\n+    pSrc->a[iFrom].fg.jointype |= jointype | ltorj;\n@@ -137650,2 +140211,2 @@\n-    if( isLeftJoin>0 ){\n-      sqlite3SetJoinExpr(pWhere, iNewParent);\n+    if( isOuterJoin>0 ){\n+      sqlite3SetJoinExpr(pWhere, iNewParent, EP_OuterON);\n@@ -137665,1 +140226,1 @@\n-      x.isLeftJoin = isLeftJoin;\n+      x.isOuterJoin = isOuterJoin;\n@@ -137700,2 +140261,2 @@\n-#if SELECTTRACE_ENABLED\n-  if( sqlite3SelectTrace & 0x100 ){\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x100 ){\n@@ -137722,0 +140283,2 @@\n+  u32 mExcludeOn;  \/* Which ON expressions to exclude from considertion.\n+                   ** Either EP_OuterON or EP_InnerON|EP_OuterON *\/\n@@ -137784,1 +140347,5 @@\n-  if( ExprHasProperty(pExpr, EP_FromJoin) ) return;\n+  if( ExprHasProperty(pExpr, pConst->mExcludeOn) ){\n+    testcase( ExprHasProperty(pExpr, EP_OuterON) );\n+    testcase( ExprHasProperty(pExpr, EP_InnerON) );\n+    return;\n+  }\n@@ -137820,1 +140387,1 @@\n-  if( ExprHasProperty(pExpr, EP_FixedCol|EP_FromJoin) ){\n+  if( ExprHasProperty(pExpr, EP_FixedCol|pConst->mExcludeOn) ){\n@@ -137822,1 +140389,2 @@\n-    testcase( ExprHasProperty(pExpr, EP_FromJoin) );\n+    testcase( ExprHasProperty(pExpr, EP_OuterON) );\n+    testcase( ExprHasProperty(pExpr, EP_InnerON) );\n@@ -137946,0 +140514,11 @@\n+    if( ALWAYS(p->pSrc!=0)\n+     && p->pSrc->nSrc>0\n+     && (p->pSrc->a[0].fg.jointype & JT_LTORJ)!=0\n+    ){\n+      \/* Do not propagate constants on any ON clause if there is a\n+      ** RIGHT JOIN anywhere in the query *\/\n+      x.mExcludeOn = EP_InnerON | EP_OuterON;\n+    }else{\n+      \/* Do not propagate constants through the ON clause of a LEFT JOIN *\/\n+      x.mExcludeOn = EP_OuterON;\n+    }\n@@ -138065,2 +140644,1 @@\n-  int iCursor,          \/* Cursor number of the subquery *\/\n-  int isLeftJoin        \/* True if pSubq is the right term of a LEFT JOIN *\/\n+  SrcItem *pSrc         \/* The subquery term of the outer FROM clause *\/\n@@ -138072,0 +140650,1 @@\n+  if( pSrc->fg.jointype & (JT_LTORJ|JT_RIGHT) ) return 0;\n@@ -138101,2 +140680,1 @@\n-    nChng += pushDownWhereTerms(pParse, pSubq, pWhere->pRight,\n-                                iCursor, isLeftJoin);\n+    nChng += pushDownWhereTerms(pParse, pSubq, pWhere->pRight, pSrc);\n@@ -138105,0 +140683,2 @@\n+\n+#if 0  \/* Legacy code. Checks now done by sqlite3ExprIsTableConstraint() *\/\n@@ -138106,2 +140686,2 @@\n-   && (ExprHasProperty(pWhere,EP_FromJoin)==0\n-         || pWhere->iRightJoinTable!=iCursor)\n+   && (ExprHasProperty(pWhere,EP_OuterON)==0\n+         || pWhere->w.iJoin!=iCursor)\n@@ -138111,1 +140691,3 @@\n-  if( ExprHasProperty(pWhere,EP_FromJoin) && pWhere->iRightJoinTable!=iCursor ){\n+  if( ExprHasProperty(pWhere,EP_OuterON)\n+   && pWhere->w.iJoin!=iCursor\n+  ){\n@@ -138114,1 +140696,3 @@\n-  if( sqlite3ExprIsTableConstant(pWhere, iCursor) ){\n+#endif\n+\n+  if( sqlite3ExprIsTableConstraint(pWhere, pSrc) ){\n@@ -138120,1 +140704,1 @@\n-      unsetJoinExpr(pNew, -1);\n+      unsetJoinExpr(pNew, -1, 1);\n@@ -138122,3 +140706,3 @@\n-      x.iTable = iCursor;\n-      x.iNewTable = iCursor;\n-      x.isLeftJoin = 0;\n+      x.iTable = pSrc->iCursor;\n+      x.iNewTable = pSrc->iCursor;\n+      x.isOuterJoin = 0;\n@@ -138197,1 +140781,1 @@\n-  if( pOrderBy ) pOrderBy->a[0].sortFlags = sortFlags;\n+  if( pOrderBy ) pOrderBy->a[0].fg.sortFlags = sortFlags;\n@@ -138229,0 +140813,1 @@\n+   || p->pHaving\n@@ -138333,1 +140918,1 @@\n-  pNewSrc = sqlite3SrcListAppendFromTerm(pParse,0,0,0,&dummy,pNew,0,0);\n+  pNewSrc = sqlite3SrcListAppendFromTerm(pParse,0,0,0,&dummy,pNew,0);\n@@ -138666,1 +141251,1 @@\n-    pTab->zName = sqlite3MPrintf(pParse->db, \"subquery_%u\", pSel->selId);\n+    pTab->zName = sqlite3MPrintf(pParse->db, \"%!S\", pFrom);\n@@ -138678,0 +141263,2 @@\n+  return pParse->nErr ? SQLITE_ERROR : SQLITE_OK;\n+}\n@@ -138680,1 +141267,22 @@\n-  return pParse->nErr ? SQLITE_ERROR : SQLITE_OK;\n+\/*\n+** Check the N SrcItem objects to the right of pBase.  (N might be zero!)\n+** If any of those SrcItem objects have a USING clause containing zName\n+** then return true.\n+**\n+** If N is zero, or none of the N SrcItem objects to the right of pBase\n+** contains a USING clause, or if none of the USING clauses contain zName,\n+** then return false.\n+*\/\n+static int inAnyUsingClause(\n+  const char *zName, \/* Name we are looking for *\/\n+  SrcItem *pBase,    \/* The base SrcItem.  Looking at pBase[1] and following *\/\n+  int N              \/* How many SrcItems to check *\/\n+){\n+  while( N>0 ){\n+    N--;\n+    pBase++;\n+    if( pBase->fg.isUsing==0 ) continue;\n+    if( NEVER(pBase->u3.pUsing==0) ) continue;\n+    if( sqlite3IdListIndex(pBase->u3.pUsing, zName)>=0 ) return 1;\n+  }\n+  return 0;\n@@ -138683,0 +141291,1 @@\n+\n@@ -138831,1 +141440,2 @@\n-  if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){\n+  assert( db->mallocFailed==0 || pParse->nErr!=0 );\n+  if( pParse->nErr || sqlite3ProcessJoin(pParse, p) ){\n@@ -138879,1 +141489,1 @@\n-          pNew->a[pNew->nExpr-1].eEName = a[k].eEName;\n+          pNew->a[pNew->nExpr-1].fg.eEName = a[k].fg.eEName;\n@@ -138894,6 +141504,8 @@\n-          Table *pTab = pFrom->pTab;\n-          Select *pSub = pFrom->pSelect;\n-          char *zTabName = pFrom->zAlias;\n-          const char *zSchemaName = 0;\n-          int iDb;\n-          if( zTabName==0 ){\n+          Table *pTab = pFrom->pTab;   \/* Table for this data source *\/\n+          ExprList *pNestedFrom;       \/* Result-set of a nested FROM clause *\/\n+          char *zTabName;              \/* AS name for this data source *\/\n+          const char *zSchemaName = 0; \/* Schema name for this data source *\/\n+          int iDb;                     \/* Schema index for this data src *\/\n+          IdList *pUsing;              \/* USING clause for pFrom[1] *\/\n+\n+          if( (zTabName = pFrom->zAlias)==0 ){\n@@ -138903,2 +141515,7 @@\n-          if( pSub==0 || (pSub->selFlags & SF_NestedFrom)==0 ){\n-            pSub = 0;\n+          assert( (int)pFrom->fg.isNestedFrom == IsNestedFrom(pFrom->pSelect) );\n+          if( pFrom->fg.isNestedFrom ){\n+            assert( pFrom->pSelect!=0 );\n+            pNestedFrom = pFrom->pSelect->pEList;\n+            assert( pNestedFrom!=0 );\n+            assert( pNestedFrom->nExpr==pTab->nCol );\n+          }else{\n@@ -138908,0 +141525,1 @@\n+            pNestedFrom = 0;\n@@ -138911,0 +141529,21 @@\n+          if( i+1<pTabList->nSrc\n+           && pFrom[1].fg.isUsing\n+           && (selFlags & SF_NestedFrom)!=0\n+          ){\n+            int ii;\n+            pUsing = pFrom[1].u3.pUsing;\n+            for(ii=0; ii<pUsing->nId; ii++){\n+              const char *zUName = pUsing->a[ii].zName;\n+              pRight = sqlite3Expr(db, TK_ID, zUName);\n+              pNew = sqlite3ExprListAppend(pParse, pNew, pRight);\n+              if( pNew ){\n+                struct ExprList_item *pX = &pNew->a[pNew->nExpr-1];\n+                assert( pX->zEName==0 );\n+                pX->zEName = sqlite3MPrintf(db,\"..%s\", zUName);\n+                pX->fg.eEName = ENAME_TAB;\n+                pX->fg.bUsingTerm = 1;\n+              }\n+            }\n+          }else{\n+            pUsing = 0;\n+          }\n@@ -138913,3 +141552,1 @@\n-            char *zColname;  \/* The computed column name *\/\n-            char *zToFree;   \/* Malloced string that needs to be freed *\/\n-            Token sColname;  \/* Computed column name as a token *\/\n+            struct ExprList_item *pX; \/* Newly added ExprList term *\/\n@@ -138918,2 +141555,3 @@\n-            if( zTName && pSub\n-             && sqlite3MatchEName(&pSub->pEList->a[j], 0, zTName, 0)==0\n+            if( zTName\n+             && pNestedFrom\n+             && sqlite3MatchEName(&pNestedFrom->a[j], 0, zTName, 0)==0\n@@ -138933,0 +141571,6 @@\n+            if( (pTab->aCol[j].colFlags & COLFLAG_NOEXPAND)!=0\n+             && zTName==0\n+             && (selFlags & (SF_NestedFrom))==0\n+            ){\n+              continue;\n+            }\n@@ -138935,3 +141579,3 @@\n-            if( i>0 && zTName==0 ){\n-              if( (pFrom->fg.jointype & JT_NATURAL)!=0\n-                && tableAndColumnIndex(pTabList, i, zName, 0, 0, 1)\n+            if( i>0 && zTName==0 && (selFlags & SF_NestedFrom)==0 ){\n+              if( pFrom->fg.isUsing\n+               && sqlite3IdListIndex(pFrom->u3.pUsing, zName)>=0\n@@ -138939,5 +141583,0 @@\n-                \/* In a NATURAL join, omit the join columns from the\n-                ** table to the right of the join *\/\n-                continue;\n-              }\n-              if( sqlite3IdListIndex(pFrom->pUsing, zName)>=0 ){\n@@ -138950,3 +141589,8 @@\n-            zColname = zName;\n-            zToFree = 0;\n-            if( longNames || pTabList->nSrc>1 ){\n+            if( (pTabList->nSrc>1\n+                 && (  (pFrom->fg.jointype & JT_LTORJ)==0\n+                     || (selFlags & SF_NestedFrom)!=0\n+                     || !inAnyUsingClause(zName,pFrom,pTabList->nSrc-i-1)\n+                    )\n+                )\n+             || IN_RENAME_OBJECT\n+            ){\n@@ -138956,0 +141600,3 @@\n+              if( IN_RENAME_OBJECT && pE->pLeft ){\n+                sqlite3RenameTokenRemap(pParse, pLeft, pE->pLeft);\n+              }\n@@ -138960,4 +141607,0 @@\n-              if( longNames ){\n-                zColname = sqlite3MPrintf(db, \"%s.%s\", zTabName, zName);\n-                zToFree = zColname;\n-              }\n@@ -138968,7 +141611,8 @@\n-            sqlite3TokenInit(&sColname, zColname);\n-            sqlite3ExprListSetName(pParse, pNew, &sColname, 0);\n-            if( pNew && (p->selFlags & SF_NestedFrom)!=0 && !IN_RENAME_OBJECT ){\n-              struct ExprList_item *pX = &pNew->a[pNew->nExpr-1];\n-              sqlite3DbFree(db, pX->zEName);\n-              if( pSub ){\n-                pX->zEName = sqlite3DbStrDup(db, pSub->pEList->a[j].zEName);\n+            if( pNew==0 ){\n+              break;  \/* OOM *\/\n+            }\n+            pX = &pNew->a[pNew->nExpr-1];\n+            assert( pX->zEName==0 );\n+            if( (selFlags & SF_NestedFrom)!=0 && !IN_RENAME_OBJECT ){\n+              if( pNestedFrom ){\n+                pX->zEName = sqlite3DbStrDup(db, pNestedFrom->a[j].zEName);\n@@ -138978,1 +141622,1 @@\n-                                           zSchemaName, zTabName, zColname);\n+                                           zSchemaName, zTabName, zName);\n@@ -138981,1 +141625,14 @@\n-              pX->eEName = ENAME_TAB;\n+              pX->fg.eEName = ENAME_TAB;\n+              if( (pFrom->fg.isUsing\n+                   && sqlite3IdListIndex(pFrom->u3.pUsing, zName)>=0)\n+               || (pUsing && sqlite3IdListIndex(pUsing, zName)>=0)\n+               || (pTab->aCol[j].colFlags & COLFLAG_NOEXPAND)!=0\n+              ){\n+                pX->fg.bNoExpand = 1;\n+              }\n+            }else if( longNames ){\n+              pX->zEName = sqlite3MPrintf(db, \"%s.%s\", zTabName, zName);\n+              pX->fg.eEName = ENAME_NAME;\n+            }else{\n+              pX->zEName = sqlite3DbStrDup(db, zName);\n+              pX->fg.eEName = ENAME_NAME;\n@@ -138983,1 +141640,0 @@\n-            sqlite3DbFree(db, zToFree);\n@@ -139007,0 +141663,6 @@\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x100 ){\n+    SELECTTRACE(0x100,pParse,p,(\"After result-set wildcard expansion:\\n\"));\n+    sqlite3TreeViewSelect(0, p, 0);\n+  }\n+#endif\n@@ -139128,0 +141790,1 @@\n+  assert( pParse->db->pParse==pParse );\n@@ -139131,1 +141794,1 @@\n-  if( pParse->nErr || pParse->db->mallocFailed ) return;\n+  if( pParse->nErr ) return;\n@@ -139133,1 +141796,1 @@\n-  if( pParse->nErr || pParse->db->mallocFailed ) return;\n+  if( pParse->nErr ) return;\n@@ -139150,0 +141813,2 @@\n+  assert( pParse->db->pParse==pParse );\n+  assert( pParse->db->mallocFailed==0 || pParse->nErr!=0 );\n@@ -139151,1 +141816,1 @@\n-  if( pParse->nErr || pParse->db->mallocFailed ) return;\n+  if( pParse->nErr ) return;\n@@ -139394,2 +142059,2 @@\n-#if SELECTTRACE_ENABLED\n-  if( sWalker.eCode && (sqlite3SelectTrace & 0x100)!=0 ){\n+#if TREETRACE_ENABLED\n+  if( sWalker.eCode && (sqlite3TreeTrace & 0x100)!=0 ){\n@@ -139527,2 +142192,2 @@\n-#if SELECTTRACE_ENABLED\n-  if( sqlite3SelectTrace & 0x400 ){\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x400 ){\n@@ -139537,0 +142202,23 @@\n+\/*\n+** If any term of pSrc, or any SF_NestedFrom sub-query, is not the same\n+** as pSrcItem but has the same alias as p0, then return true.\n+** Otherwise return false.\n+*\/\n+static int sameSrcAlias(SrcItem *p0, SrcList *pSrc){\n+  int i;\n+  for(i=0; i<pSrc->nSrc; i++){\n+    SrcItem *p1 = &pSrc->a[i];\n+    if( p1==p0 ) continue;\n+    if( p0->pTab==p1->pTab && 0==sqlite3_stricmp(p0->zAlias, p1->zAlias) ){\n+      return 1;\n+    }\n+    if( p1->pSelect\n+     && (p1->pSelect->selFlags & SF_NestedFrom)!=0\n+     && sameSrcAlias(p0, p1->pSelect->pSrc)\n+    ){\n+      return 1;\n+    }\n+  }\n+  return 0;\n+}\n+\n@@ -139574,0 +142262,1 @@\n+  assert( pParse==db->pParse );\n@@ -139575,1 +142264,1 @@\n-  if( p==0 || db->mallocFailed || pParse->nErr ){\n+  if( p==0 || pParse->nErr ){\n@@ -139578,0 +142267,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -139579,1 +142269,1 @@\n-#if SELECTTRACE_ENABLED\n+#if TREETRACE_ENABLED\n@@ -139581,2 +142271,6 @@\n-  if( sqlite3SelectTrace & 0x100 ){\n-    sqlite3TreeViewSelect(0, p, 0);\n+  if( sqlite3TreeTrace & 0x10100 ){\n+    if( (sqlite3TreeTrace & 0x10001)==0x10000 ){\n+      sqlite3TreeViewLine(0, \"In sqlite3Select() at %s:%d\",\n+                           __FILE__, __LINE__);\n+    }\n+    sqlite3ShowSelect(p);\n@@ -139596,1 +142290,1 @@\n-#if SELECTTRACE_ENABLED\n+#if TREETRACE_ENABLED\n@@ -139598,1 +142292,1 @@\n-      if( sqlite3SelectTrace & 0x100 ){\n+      if( sqlite3TreeTrace & 0x100 ){\n@@ -139612,1 +142306,1 @@\n-  if( pParse->nErr || db->mallocFailed ){\n+  if( pParse->nErr ){\n@@ -139615,0 +142309,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -139616,2 +142311,2 @@\n-#if SELECTTRACE_ENABLED\n-  if( sqlite3SelectTrace & 0x104 ){\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x104 ){\n@@ -139634,9 +142329,6 @@\n-    for(i=1; i<p->pSrc->nSrc; i++){\n-      SrcItem *p1 = &p->pSrc->a[i];\n-      if( p0->pTab==p1->pTab && 0==sqlite3_stricmp(p0->zAlias, p1->zAlias) ){\n-        sqlite3ErrorMsg(pParse,\n-            \"target object\/alias may not appear in FROM clause: %s\",\n-            p0->zAlias ? p0->zAlias : p0->pTab->zName\n-        );\n-        goto select_end;\n-      }\n+    if( sameSrcAlias(p0, p->pSrc) ){\n+      sqlite3ErrorMsg(pParse,\n+          \"target object\/alias may not appear in FROM clause: %s\",\n+          p0->zAlias ? p0->zAlias : p0->pTab->zName\n+      );\n+      goto select_end;\n@@ -139658,1 +142350,1 @@\n-    assert( db->mallocFailed || pParse->nErr>0 );\n+    assert( pParse->nErr );\n@@ -139661,2 +142353,2 @@\n-#if SELECTTRACE_ENABLED\n-  if( p->pWin && (sqlite3SelectTrace & 0x108)!=0 ){\n+#if TREETRACE_ENABLED\n+  if( p->pWin && (sqlite3TreeTrace & 0x108)!=0 ){\n@@ -139690,1 +142382,1 @@\n-    if( (pItem->fg.jointype & JT_LEFT)!=0\n+    if( (pItem->fg.jointype & (JT_LEFT|JT_RIGHT))==JT_LEFT\n@@ -139697,1 +142389,3 @@\n-      unsetJoinExpr(p->pWhere, pItem->iCursor);\n+      assert( pItem->iCursor>=0 );\n+      unsetJoinExpr(p->pWhere, pItem->iCursor,\n+                    pTabList->a[0].fg.jointype & JT_LTORJ);\n@@ -139750,1 +142444,3 @@\n-      sqlite3ExprListDelete(db, pSub->pOrderBy);\n+      sqlite3ParserAddCleanup(pParse,\n+         (void(*)(sqlite3*,void*))sqlite3ExprListDelete,\n+         pSub->pOrderBy);\n@@ -139776,1 +142472,1 @@\n-         || (pTabList->a[1].fg.jointype&(JT_LEFT|JT_CROSS))!=0)\n+         || (pTabList->a[1].fg.jointype&(JT_OUTER|JT_CROSS))!=0)\n@@ -139800,1 +142496,1 @@\n-#if SELECTTRACE_ENABLED\n+#if TREETRACE_ENABLED\n@@ -139802,1 +142498,1 @@\n-    if( (sqlite3SelectTrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){\n+    if( (sqlite3TreeTrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){\n@@ -139821,2 +142517,2 @@\n-#if SELECTTRACE_ENABLED\n-    if( sqlite3SelectTrace & 0x100 ){\n+#if TREETRACE_ENABLED\n+    if( sqlite3TreeTrace & 0x100 ){\n@@ -139898,2 +142594,1 @@\n-     && pushDownWhereTerms(pParse, pSub, p->pWhere, pItem->iCursor,\n-                           (pItem->fg.jointype & JT_OUTER)!=0)\n+     && pushDownWhereTerms(pParse, pSub, p->pWhere, pItem)\n@@ -139901,2 +142596,2 @@\n-#if SELECTTRACE_ENABLED\n-      if( sqlite3SelectTrace & 0x100 ){\n+#if TREETRACE_ENABLED\n+      if( sqlite3TreeTrace & 0x100 ){\n@@ -139918,1 +142613,3 @@\n-    ** The subquery is implemented as a co-routine if:\n+    ** The subquery is implemented as a co-routine if all of the following are\n+    ** true:\n+    **\n@@ -139922,3 +142619,1 @@\n-    **\n-    ** TODO: Are there other reasons beside (1) and (2) to use a co-routine\n-    ** implementation?\n+    **    (3)  the subquery is not part of a left operand for a RIGHT JOIN\n@@ -139928,2 +142623,3 @@\n-            || (pTabList->a[1].fg.jointype&(JT_LEFT|JT_CROSS))!=0)  \/* (1) *\/\n-     && (pItem->fg.isCte==0 || pItem->u2.pCteUse->eM10d!=M10d_Yes)  \/* (2) *\/\n+            || (pTabList->a[1].fg.jointype&(JT_OUTER|JT_CROSS))!=0)  \/* (1) *\/\n+     && (pItem->fg.isCte==0 || pItem->u2.pCteUse->eM10d!=M10d_Yes)   \/* (2) *\/\n+     && (pTabList->a[0].fg.jointype & JT_LTORJ)==0                   \/* (3) *\/\n@@ -139975,1 +142671,0 @@\n-      int retAddr;\n@@ -139978,1 +142673,1 @@\n-      topAddr = sqlite3VdbeAddOp2(v, OP_Integer, 0, pItem->regReturn);\n+      topAddr = sqlite3VdbeAddOp0(v, OP_Goto);\n@@ -139980,0 +142675,1 @@\n+      pItem->fg.isMaterialized = 1;\n@@ -139994,1 +142690,1 @@\n-      retAddr = sqlite3VdbeAddOp1(v, OP_Return, pItem->regReturn);\n+      sqlite3VdbeAddOp2(v, OP_Return, pItem->regReturn, topAddr+1);\n@@ -139996,1 +142692,1 @@\n-      sqlite3VdbeChangeP1(v, topAddr, retAddr);\n+      sqlite3VdbeJumpHere(v, topAddr);\n@@ -140020,2 +142716,2 @@\n-#if SELECTTRACE_ENABLED\n-  if( sqlite3SelectTrace & 0x400 ){\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x400 ){\n@@ -140055,0 +142751,1 @@\n+    sDistinct.isTnct = 2;\n@@ -140056,2 +142753,2 @@\n-#if SELECTTRACE_ENABLED\n-    if( sqlite3SelectTrace & 0x400 ){\n+#if TREETRACE_ENABLED\n+    if( sqlite3TreeTrace & 0x400 ){\n@@ -140090,0 +142787,12 @@\n+    if( p->selFlags & SF_NestedFrom ){\n+      \/* Delete or NULL-out result columns that will never be used *\/\n+      int ii;\n+      for(ii=pEList->nExpr-1; ii>0 && pEList->a[ii].fg.bUsed==0; ii--){\n+        sqlite3ExprDelete(db, pEList->a[ii].pExpr);\n+        sqlite3DbFree(db, pEList->a[ii].zEName);\n+        pEList->nExpr--;\n+      }\n+      for(ii=0; ii<pEList->nExpr; ii++){\n+        if( pEList->a[ii].fg.bUsed==0 ) pEList->a[ii].pExpr->op = TK_NULL;\n+      }\n+    }\n@@ -140134,1 +142843,1 @@\n-                               p->pEList, wctrlFlags, p->nSelectRow);\n+                               p->pEList, p, wctrlFlags, p->nSelectRow);\n@@ -140239,2 +142948,3 @@\n-          u8 sortFlags = sSort.pOrderBy->a[ii].sortFlags & KEYINFO_ORDER_DESC;\n-          pGroupBy->a[ii].sortFlags = sortFlags;\n+          u8 sortFlags;\n+          sortFlags = sSort.pOrderBy->a[ii].fg.sortFlags & KEYINFO_ORDER_DESC;\n+          pGroupBy->a[ii].fg.sortFlags = sortFlags;\n@@ -140309,2 +143019,2 @@\n-#if SELECTTRACE_ENABLED\n-    if( sqlite3SelectTrace & 0x400 ){\n+#if TREETRACE_ENABLED\n+    if( sqlite3TreeTrace & 0x400 ){\n@@ -140398,1 +143108,2 @@\n-          WHERE_GROUPBY | (orderByGrp ? WHERE_SORTBYGROUP : 0) | distFlag, 0\n+          0, (sDistinct.isTnct==2 ? WHERE_DISTINCTBY : WHERE_GROUPBY)\n+          |  (orderByGrp ? WHERE_SORTBYGROUP : 0) | distFlag, 0\n@@ -140580,1 +143291,1 @@\n-      if( eDist!=WHERE_DISTINCT_NOOP ){\n+      if( distFlag!=0 && eDist!=WHERE_DISTINCT_NOOP ){\n@@ -140696,1 +143407,1 @@\n-                                   pDistinct, minMaxFlag|distFlag, 0);\n+                                   pDistinct, 0, minMaxFlag|distFlag, 0);\n@@ -140704,2 +143415,4 @@\n-          struct AggInfo_func *pF = &pAggInfo->aFunc[0];\n-          fixDistinctOpenEph(pParse, eDist, pF->iDistinct, pF->iDistAddr);\n+          struct AggInfo_func *pF = pAggInfo->aFunc;\n+          if( pF ){\n+            fixDistinctOpenEph(pParse, eDist, pF->iDistinct, pF->iDistAddr);\n+          }\n@@ -140753,1 +143466,1 @@\n-  pParse->nErr += db->mallocFailed;\n+  assert( db->mallocFailed==0 || pParse->nErr!=0 );\n@@ -140772,1 +143485,1 @@\n-#if SELECTTRACE_ENABLED\n+#if TREETRACE_ENABLED\n@@ -140774,1 +143487,1 @@\n-  if( (sqlite3SelectTrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){\n+  if( (sqlite3TreeTrace & 0x2000)!=0 && ExplainQueryPlanParent(pParse)==0 ){\n@@ -141039,3 +143752,1 @@\n-  if( pParse->disableTriggers ){\n-    return 0;\n-  }\n+  assert( pParse->disableTriggers==0 );\n@@ -141054,1 +143765,1 @@\n-    }else if( pTrig->op==TK_RETURNING\n+    }else if( pTrig->op==TK_RETURNING ){\n@@ -141056,1 +143767,1 @@\n-              && pParse->db->pVtabCtx==0\n+      assert( pParse->db->pVtabCtx==0 );\n@@ -141058,1 +143769,0 @@\n-    ){\n@@ -141341,0 +144051,17 @@\n+    \/* If this is a new CREATE TABLE statement, and if shadow tables\n+    ** are read-only, and the trigger makes a change to a shadow table,\n+    ** then raise an error - do not allow the trigger to be created. *\/\n+    if( sqlite3ReadOnlyShadowTables(db) ){\n+      TriggerStep *pStep;\n+      for(pStep=pTrig->step_list; pStep; pStep=pStep->pNext){\n+        if( pStep->zTarget!=0\n+         && sqlite3ShadowTableName(db, pStep->zTarget)\n+        ){\n+          sqlite3ErrorMsg(pParse,\n+            \"trigger \\\"%s\\\" may not write to shadow table \\\"%s\\\"\",\n+            pTrig->zName, pStep->zTarget);\n+          goto triggerfinish_cleanup;\n+        }\n+      }\n+    }\n+\n@@ -141433,0 +144160,1 @@\n+  if( pParse->nErr ) return 0;\n@@ -141503,1 +144231,1 @@\n-  SrcList *pFrom,\n+  SrcList *pFrom,      \/* FROM clause for an UPDATE-FROM, or NULL *\/\n@@ -141716,0 +144444,9 @@\n+\/*\n+** Return true if any TEMP triggers exist\n+*\/\n+static int tempTriggersExist(sqlite3 *db){\n+  if( NEVER(db->aDb[1].pSchema==0) ) return 0;\n+  if( sqliteHashFirst(&db->aDb[1].pSchema->trigHash)==0 ) return 0;\n+  return 1;\n+}\n+\n@@ -141722,1 +144459,1 @@\n-SQLITE_PRIVATE Trigger *sqlite3TriggersExist(\n+static SQLITE_NOINLINE Trigger *triggersReallyExist(\n@@ -141785,0 +144522,16 @@\n+SQLITE_PRIVATE Trigger *sqlite3TriggersExist(\n+  Parse *pParse,          \/* Parse context *\/\n+  Table *pTab,            \/* The table the contains the triggers *\/\n+  int op,                 \/* one of TK_DELETE, TK_INSERT, TK_UPDATE *\/\n+  ExprList *pChanges,     \/* Columns that change in an UPDATE statement *\/\n+  int *pMask              \/* OUT: Mask of TRIGGER_BEFORE|TRIGGER_AFTER *\/\n+){\n+  assert( pTab!=0 );\n+  if( (pTab->pTrigger==0 && !tempTriggersExist(pParse->db))\n+   || pParse->disableTriggers\n+  ){\n+    if( pMask ) *pMask = 0;\n+    return 0;\n+  }\n+  return triggersReallyExist(pParse,pTab,op,pChanges,pMask);\n+}\n@@ -141814,0 +144567,8 @@\n+      if( pDup && pDup->nSrc>1 && !IN_RENAME_OBJECT ){\n+        Select *pSubquery;\n+        Token as;\n+        pSubquery = sqlite3SelectNew(pParse,0,pDup,0,0,0,0,SF_NestedFrom,0);\n+        as.n = 0;\n+        as.z = 0;\n+        pDup = sqlite3SrcListAppendFromTerm(pParse,0,0,0,&as,pSubquery,0);\n+      }\n@@ -141869,1 +144630,1 @@\n-          pItem->eEName = ENAME_NAME;\n+          pItem->fg.eEName = ENAME_NAME;\n@@ -141878,1 +144639,1 @@\n-        pItem->eEName = pList->a[i].eEName;\n+        pItem->fg.eEName = pList->a[i].fg.eEName;\n@@ -141905,0 +144666,1 @@\n+  assert( db->pParse==pParse );\n@@ -141915,1 +144677,2 @@\n-  if( db->mallocFailed==0 && pParse->nErr==0 ){\n+  if( pParse->nErr==0 ){\n+    assert( db->mallocFailed==0 );\n@@ -141933,1 +144696,1 @@\n-     && !db->mallocFailed\n+     && ALWAYS(!db->mallocFailed)\n@@ -141944,0 +144707,3 @@\n+        if( sqlite3ExprAffinity(pCol)==SQLITE_AFF_REAL ){\n+          sqlite3VdbeAddOp1(v, OP_RealAffinity, reg+i);\n+        }\n@@ -142094,1 +144860,0 @@\n-  Parse *pSubParse;           \/* Parse context for sub-vdbe *\/\n@@ -142096,0 +144861,1 @@\n+  Parse sSubParse;            \/* Parse context for sub-vdbe *\/\n@@ -142117,2 +144883,1 @@\n-  pSubParse = sqlite3StackAllocZero(db, sizeof(Parse));\n-  if( !pSubParse ) return 0;\n+  sqlite3ParseObjectInit(&sSubParse, db);\n@@ -142120,10 +144885,9 @@\n-  sNC.pParse = pSubParse;\n-  pSubParse->db = db;\n-  pSubParse->pTriggerTab = pTab;\n-  pSubParse->pToplevel = pTop;\n-  pSubParse->zAuthContext = pTrigger->zName;\n-  pSubParse->eTriggerOp = pTrigger->op;\n-  pSubParse->nQueryLoop = pParse->nQueryLoop;\n-  pSubParse->disableVtab = pParse->disableVtab;\n-\n-  v = sqlite3GetVdbe(pSubParse);\n+  sNC.pParse = &sSubParse;\n+  sSubParse.pTriggerTab = pTab;\n+  sSubParse.pToplevel = pTop;\n+  sSubParse.zAuthContext = pTrigger->zName;\n+  sSubParse.eTriggerOp = pTrigger->op;\n+  sSubParse.nQueryLoop = pParse->nQueryLoop;\n+  sSubParse.disableVtab = pParse->disableVtab;\n+\n+  v = sqlite3GetVdbe(&sSubParse);\n@@ -142155,2 +144919,2 @@\n-        iEndTrigger = sqlite3VdbeMakeLabel(pSubParse);\n-        sqlite3ExprIfFalse(pSubParse, pWhen, iEndTrigger, SQLITE_JUMPIFNULL);\n+        iEndTrigger = sqlite3VdbeMakeLabel(&sSubParse);\n+        sqlite3ExprIfFalse(&sSubParse, pWhen, iEndTrigger, SQLITE_JUMPIFNULL);\n@@ -142162,1 +144926,1 @@\n-    codeTriggerProgram(pSubParse, pTrigger->step_list, orconf);\n+    codeTriggerProgram(&sSubParse, pTrigger->step_list, orconf);\n@@ -142170,0 +144934,1 @@\n+    transferParseError(pParse, &sSubParse);\n@@ -142171,2 +144936,2 @@\n-    transferParseError(pParse, pSubParse);\n-    if( db->mallocFailed==0 && pParse->nErr==0 ){\n+    if( pParse->nErr==0 ){\n+      assert( db->mallocFailed==0 );\n@@ -142175,2 +144940,2 @@\n-    pProgram->nMem = pSubParse->nMem;\n-    pProgram->nCsr = pSubParse->nTab;\n+    pProgram->nMem = sSubParse.nMem;\n+    pProgram->nCsr = sSubParse.nTab;\n@@ -142178,2 +144943,2 @@\n-    pPrg->aColmask[0] = pSubParse->oldmask;\n-    pPrg->aColmask[1] = pSubParse->newmask;\n+    pPrg->aColmask[0] = sSubParse.oldmask;\n+    pPrg->aColmask[1] = sSubParse.newmask;\n@@ -142181,0 +144946,2 @@\n+  }else{\n+    transferParseError(pParse, &sSubParse);\n@@ -142183,4 +144950,2 @@\n-  assert( !pSubParse->pTriggerPrg && !pSubParse->nMaxArg );\n-  sqlite3ParserReset(pSubParse);\n-  sqlite3StackFree(db, pSubParse);\n-\n+  assert( !sSubParse.pTriggerPrg && !sSubParse.nMaxArg );\n+  sqlite3ParseObjectReset(&sSubParse);\n@@ -142219,0 +144984,1 @@\n+    pParse->db->errByteOffset = -1;\n@@ -142241,1 +145007,1 @@\n-  assert( pPrg || pParse->nErr || pParse->db->mallocFailed );\n+  assert( pPrg || pParse->nErr );\n@@ -142759,1 +145525,2 @@\n-  if( pParse->nErr || db->mallocFailed ){\n+  assert( db->pParse==pParse );\n+  if( pParse->nErr ){\n@@ -142762,0 +145529,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -142786,0 +145554,8 @@\n+#if TREETRACE_ENABLED\n+  if( sqlite3TreeTrace & 0x10000 ){\n+    sqlite3TreeViewLine(0, \"In sqlite3Update() at %s:%d\", __FILE__, __LINE__);\n+    sqlite3TreeViewUpdate(pParse->pWith, pTabList, pChanges, pWhere,\n+                          onError, pOrderBy, pLimit, pUpsert, pTrigger);\n+  }\n+#endif\n+\n@@ -143133,1 +145909,1 @@\n-      pWInfo = sqlite3WhereBegin(pParse, pTabList, pWhere, 0, 0, flags,iIdxCur);\n+      pWInfo = sqlite3WhereBegin(pParse, pTabList, pWhere,0,0,0,flags,iIdxCur);\n@@ -143430,1 +146206,1 @@\n-      VdbeCoverageNeverTaken(v);\n+      VdbeCoverage(v);\n@@ -143533,3 +146309,1 @@\n-    sqlite3VdbeAddOp2(v, OP_ChngCntRow, regRowCount, 1);\n-    sqlite3VdbeSetNumCols(v, 1);\n-    sqlite3VdbeSetColName(v, 0, COLNAME_NAME, \"rows updated\", SQLITE_STATIC);\n+    sqlite3CodeChangeCount(v, regRowCount, \"rows updated\");\n@@ -143657,1 +146431,3 @@\n-    pWInfo = sqlite3WhereBegin(pParse, pSrc,pWhere,0,0,WHERE_ONEPASS_DESIRED,0);\n+    pWInfo = sqlite3WhereBegin(\n+        pParse, pSrc, pWhere, 0, 0, 0, WHERE_ONEPASS_DESIRED, 0\n+    );\n@@ -144436,0 +147212,1 @@\n+    nRes = sqlite3BtreeGetRequestedReserve(pTemp);\n@@ -145284,1 +148061,0 @@\n-  char *zErr = 0;\n@@ -145303,1 +148079,1 @@\n-  memset(&sParse, 0, sizeof(sParse));\n+  sqlite3ParseObjectInit(&sParse, db);\n@@ -145305,1 +148081,1 @@\n-  sParse.db = db;\n+  sParse.disableTriggers = 1;\n@@ -145313,3 +148089,3 @@\n-  if( SQLITE_OK==sqlite3RunParser(&sParse, zCreateTable, &zErr)\n-   && sParse.pNewTable\n-   && !db->mallocFailed\n+  if( SQLITE_OK==sqlite3RunParser(&sParse, zCreateTable)\n+   && ALWAYS(sParse.pNewTable!=0)\n+   && ALWAYS(!db->mallocFailed)\n@@ -145318,0 +148094,1 @@\n+    assert( sParse.zErrMsg==0 );\n@@ -145347,2 +148124,3 @@\n-    sqlite3ErrorWithMsg(db, SQLITE_ERROR, (zErr ? \"%s\" : 0), zErr);\n-    sqlite3DbFree(db, zErr);\n+    sqlite3ErrorWithMsg(db, SQLITE_ERROR,\n+          (sParse.zErrMsg ? \"%s\" : 0), sParse.zErrMsg);\n+    sqlite3DbFree(db, sParse.zErrMsg);\n@@ -145357,1 +148135,1 @@\n-  sqlite3ParserReset(&sParse);\n+  sqlite3ParseObjectReset(&sParse);\n@@ -145877,0 +148655,22 @@\n+typedef struct WhereMemBlock WhereMemBlock;\n+typedef struct WhereRightJoin WhereRightJoin;\n+\n+\/*\n+** This object is a header on a block of allocated memory that will be\n+** automatically freed when its WInfo oject is destructed.\n+*\/\n+struct WhereMemBlock {\n+  WhereMemBlock *pNext;      \/* Next block in the chain *\/\n+  u64 sz;                    \/* Bytes of space *\/\n+};\n+\n+\/*\n+** Extra information attached to a WhereLevel that is a RIGHT JOIN.\n+*\/\n+struct WhereRightJoin {\n+  int iMatch;          \/* Cursor used to determine prior matched rows *\/\n+  int regBloom;        \/* Bloom filter for iRJMatch *\/\n+  int regReturn;       \/* Return register for the interior subroutine *\/\n+  int addrSubrtn;      \/* Starting address for the interior subroutine *\/\n+  int endSubrtn;       \/* The last opcode in the interior subroutine *\/\n+};\n@@ -145909,0 +148709,2 @@\n+  int regFilter;        \/* Bloom filter *\/\n+  WhereRightJoin *pRJ;  \/* Extra information for RIGHT JOIN *\/\n@@ -145967,1 +148769,2 @@\n-      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/\n+      u32 needFree : 1;      \/* True if sqlite3_free(idxStr) is needed *\/\n+      u32 bOmitOffset : 1;   \/* True to let virtual table handle offset *\/\n@@ -145971,0 +148774,1 @@\n+      u32 mHandleIn;         \/* Terms to handle as IN(...) instead of == *\/\n@@ -146114,1 +148918,1 @@\n-#define TERM_OR_OK      0x0040 \/* Used during OR-clause processing *\/\n+#define TERM_OK         0x0040 \/* Used during OR-clause processing *\/\n@@ -146127,0 +148931,1 @@\n+#define TERM_SLICE      0x8000 \/* One slice of a row-value\/vector comparison *\/\n@@ -146137,0 +148942,2 @@\n+  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/\n+  u32 opMask;                \/* Acceptable operators *\/\n@@ -146138,0 +148945,1 @@\n+  unsigned char iEquiv;      \/* Current slot in aiCur[] and aiColumn[] *\/\n@@ -146139,3 +148947,0 @@\n-  unsigned char iEquiv;      \/* Next unused slot in aiCur[] and aiColumn[] *\/\n-  u32 opMask;                \/* Acceptable operators *\/\n-  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/\n@@ -146165,0 +148970,1 @@\n+  int nBase;               \/* Number of terms through the last non-Virtual *\/\n@@ -146222,5 +149028,0 @@\n-\/*\n-** Initialize a WhereMaskSet object\n-*\/\n-#define initMaskSet(P)  (P)->n=0\n-\n@@ -146234,1 +149035,0 @@\n-  ExprList *pOrderBy;       \/* ORDER BY clause *\/\n@@ -146302,0 +149102,3 @@\n+#ifndef SQLITE_OMIT_VIRTUALTABLE\n+  Select *pLimit;           \/* Used to access LIMIT expr\/registers for vtabs *\/\n+#endif\n@@ -146321,0 +149124,1 @@\n+  WhereMemBlock *pMemToFree;\/* Memory to free when this object destroyed *\/\n@@ -146346,0 +149150,2 @@\n+SQLITE_PRIVATE void *sqlite3WhereMalloc(WhereInfo *pWInfo, u64 nByte);\n+SQLITE_PRIVATE void *sqlite3WhereRealloc(WhereInfo *pWInfo, void *pOld, u64 nByte);\n@@ -146355,0 +149161,5 @@\n+SQLITE_PRIVATE int sqlite3WhereExplainBloomFilter(\n+  const Parse *pParse,            \/* Parse context *\/\n+  const WhereInfo *pWInfo,        \/* WHERE clause *\/\n+  const WhereLevel *pLevel        \/* Bloom filter on this level *\/\n+);\n@@ -146357,0 +149168,1 @@\n+# define sqlite3WhereExplainBloomFilter(u,v,w) 0\n@@ -146376,0 +149188,5 @@\n+SQLITE_PRIVATE SQLITE_NOINLINE void sqlite3WhereRightJoinLoop(\n+  WhereInfo *pWInfo,\n+  int iLevel,\n+  WhereLevel *pLevel\n+);\n@@ -146381,0 +149198,1 @@\n+SQLITE_PRIVATE void sqlite3WhereAddLimit(WhereClause*, Select*);\n@@ -146417,0 +149235,1 @@\n+#define WO_ROWVAL 0x2000       \/* A row-value term *\/\n@@ -146418,1 +149237,1 @@\n-#define WO_ALL    0x1fff       \/* Mask of all possible WO_* values *\/\n+#define WO_ALL    0x3fff       \/* Mask of all possible WO_* values *\/\n@@ -146449,0 +149268,3 @@\n+#define WHERE_BLOOMFILTER  0x00400000  \/* Consider using a Bloom-filter *\/\n+#define WHERE_SELFCULL     0x00800000  \/* nOut reduced by extra WHERE terms *\/\n+#define WHERE_OMIT_OFFSET  0x01000000  \/* Set offset counter to zero *\/\n@@ -146611,1 +149433,9 @@\n-      const char *zRangeOp;\n+      char cRangeOp;\n+#if 0  \/* Better output, but breaks many tests *\/\n+      const Table *pTab = pItem->pTab;\n+      const char *zRowid = pTab->iPKey>=0 ? pTab->aCol[pTab->iPKey].zCnName:\n+                              \"rowid\";\n+#else\n+      const char *zRowid = \"rowid\";\n+#endif\n+      sqlite3_str_appendf(&str, \" USING INTEGER PRIMARY KEY (%s\", zRowid);\n@@ -146613,1 +149443,1 @@\n-        zRangeOp = \"=\";\n+        cRangeOp = '=';\n@@ -146615,1 +149445,2 @@\n-        zRangeOp = \">? AND rowid<\";\n+        sqlite3_str_appendf(&str, \">? AND %s\", zRowid);\n+        cRangeOp = '<';\n@@ -146617,1 +149448,1 @@\n-        zRangeOp = \">\";\n+        cRangeOp = '>';\n@@ -146620,1 +149451,1 @@\n-        zRangeOp = \"<\";\n+        cRangeOp = '<';\n@@ -146622,2 +149453,1 @@\n-      sqlite3_str_appendf(&str,\n-          \" USING INTEGER PRIMARY KEY (rowid%s?)\",zRangeOp);\n+      sqlite3_str_appendf(&str, \"%c?)\", cRangeOp);\n@@ -146631,0 +149461,3 @@\n+    if( pItem->fg.jointype & JT_LEFT ){\n+      sqlite3_str_appendf(&str, \" LEFT-JOIN\");\n+    }\n@@ -146646,0 +149479,50 @@\n+\n+\/*\n+** Add a single OP_Explain opcode that describes a Bloom filter.\n+**\n+** Or if not processing EXPLAIN QUERY PLAN and not in a SQLITE_DEBUG and\/or\n+** SQLITE_ENABLE_STMT_SCANSTATUS build, then OP_Explain opcodes are not\n+** required and this routine is a no-op.\n+**\n+** If an OP_Explain opcode is added to the VM, its address is returned.\n+** Otherwise, if no OP_Explain is coded, zero is returned.\n+*\/\n+SQLITE_PRIVATE int sqlite3WhereExplainBloomFilter(\n+  const Parse *pParse,               \/* Parse context *\/\n+  const WhereInfo *pWInfo,           \/* WHERE clause *\/\n+  const WhereLevel *pLevel           \/* Bloom filter on this level *\/\n+){\n+  int ret = 0;\n+  SrcItem *pItem = &pWInfo->pTabList->a[pLevel->iFrom];\n+  Vdbe *v = pParse->pVdbe;      \/* VM being constructed *\/\n+  sqlite3 *db = pParse->db;     \/* Database handle *\/\n+  char *zMsg;                   \/* Text to add to EQP output *\/\n+  int i;                        \/* Loop counter *\/\n+  WhereLoop *pLoop;             \/* The where loop *\/\n+  StrAccum str;                 \/* EQP output string *\/\n+  char zBuf[100];               \/* Initial space for EQP output string *\/\n+\n+  sqlite3StrAccumInit(&str, db, zBuf, sizeof(zBuf), SQLITE_MAX_LENGTH);\n+  str.printfFlags = SQLITE_PRINTF_INTERNAL;\n+  sqlite3_str_appendf(&str, \"BLOOM FILTER ON %S (\", pItem);\n+  pLoop = pLevel->pWLoop;\n+  if( pLoop->wsFlags & WHERE_IPK ){\n+    const Table *pTab = pItem->pTab;\n+    if( pTab->iPKey>=0 ){\n+      sqlite3_str_appendf(&str, \"%s=?\", pTab->aCol[pTab->iPKey].zCnName);\n+    }else{\n+      sqlite3_str_appendf(&str, \"rowid=?\");\n+    }\n+  }else{\n+    for(i=pLoop->nSkip; i<pLoop->u.btree.nEq; i++){\n+      const char *z = explainIndexColumnName(pLoop->u.btree.pIndex, i);\n+      if( i>pLoop->nSkip ) sqlite3_str_append(&str, \" AND \", 5);\n+      sqlite3_str_appendf(&str, \"%s=?\", z);\n+    }\n+  }\n+  sqlite3_str_append(&str, \")\", 1);\n+  zMsg = sqlite3StrAccumFinish(&str);\n+  ret = sqlite3VdbeAddOp4(v, OP_Explain, sqlite3VdbeCurrentAddr(v),\n+                          pParse->addrExplain, 0, zMsg,P4_DYNAMIC);\n+  return ret;\n+}\n@@ -146724,1 +149607,1 @@\n-      && (pLevel->iLeftJoin==0 || ExprHasProperty(pTerm->pExpr, EP_FromJoin))\n+      && (pLevel->iLeftJoin==0 || ExprHasProperty(pTerm->pExpr, EP_OuterON))\n@@ -146985,5 +149868,13 @@\n-      sqlite3 *db = pParse->db;\n-      pX = removeUnindexableInClauseTerms(pParse, iEq, pLoop, pX);\n-\n-      if( !db->mallocFailed ){\n-        aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);\n+      Expr *pExpr = pTerm->pExpr;\n+      if( pExpr->iTable==0 || !ExprHasProperty(pExpr, EP_Subrtn) ){\n+        sqlite3 *db = pParse->db;\n+        pX = removeUnindexableInClauseTerms(pParse, iEq, pLoop, pX);\n+        if( !db->mallocFailed ){\n+          aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);\n+          eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap,&iTab);\n+          pExpr->iTable = iTab;\n+        }\n+        sqlite3ExprDelete(db, pX);\n+      }else{\n+        int n = sqlite3ExprVectorSize(pX->pLeft);\n+        aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*MAX(nEq,n));\n@@ -146991,1 +149882,0 @@\n-        pTerm->pExpr->iTable = iTab;\n@@ -146993,2 +149883,1 @@\n-      sqlite3ExprDelete(db, pX);\n-      pX = pTerm->pExpr;\n+      pX = pExpr;\n@@ -147017,2 +149906,3 @@\n-       sqlite3DbReallocOrFree(pParse->db, pLevel->u.in.aInLoop,\n-                              sizeof(pLevel->u.in.aInLoop[0])*pLevel->u.in.nIn);\n+       sqlite3WhereRealloc(pTerm->pWC->pWInfo,\n+                           pLevel->u.in.aInLoop,\n+                           sizeof(pLevel->u.in.aInLoop[0])*pLevel->u.in.nIn);\n@@ -147169,0 +150059,1 @@\n+    assert( pLevel->addrSkip==0 );\n@@ -147201,0 +150092,3 @@\n+  }\n+  for(j=nSkip; j<nEq; j++){\n+    pTerm = pLoop->aLTerm[j];\n@@ -147215,1 +150109,2 @@\n-      if( pParse->db->mallocFailed==0 && pParse->nErr==0 ){\n+      if( pParse->nErr==0 ){\n+        assert( pParse->db->mallocFailed==0 );\n@@ -147405,1 +150300,1 @@\n-  for(i=0; i<pWC->nTerm; i++){\n+  for(i=0; i<pWC->nBase; i++){\n@@ -147434,2 +150329,2 @@\n-      if( !ExprHasProperty(pExpr, EP_FromJoin)\n-       || pExpr->iRightJoinTable!=pTabItem->iCursor\n+      if( !ExprHasProperty(pExpr, EP_OuterON)\n+       || pExpr->w.iJoin!=pTabItem->iCursor\n@@ -147443,1 +150338,1 @@\n-      if( ExprHasProperty(pTerm->pExpr, EP_FromJoin) ) continue;\n+      if( ExprHasProperty(pTerm->pExpr, EP_OuterON) ) continue;\n@@ -147491,0 +150386,2 @@\n+** Which causes a seek on $iCur to the row with rowid $iRowid.\n+**\n@@ -147492,6 +150389,12 @@\n-** the statement currently being coded is a SELECT, then P3 of OP_DeferredSeek\n-** is set to iIdxCur and P4 is set to point to an array of integers\n-** containing one entry for each column of the table cursor iCur is open\n-** on. For each table column, if the column is the i'th column of the\n-** index, then the corresponding array entry is set to (i+1). If the column\n-** does not appear in the index at all, the array entry is set to 0.\n+** the statement currently being coded is a SELECT, then additional information\n+** is added that might allow OP_Column to omit the seek and instead do its\n+** lookup on the index, thus avoiding an expensive seek operation.  To\n+** enable this optimization, the P3 of OP_DeferredSeek is set to iIdxCur\n+** and P4 is set to an array of integers containing one entry for each column\n+** in the table.  For each table column, if the column is the i'th\n+** column of the index, then the corresponding array entry is set to (i+1).\n+** If the column does not appear in the index at all, the array entry is set\n+** to 0.  The OP_Column opcode can check this array to see if the column it\n+** wants is in the index and if it is, it will substitute the index cursor\n+** and column number and continue with those new values, rather than seeking\n+** the table cursor.\n@@ -147513,1 +150416,1 @@\n-  if( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)\n+  if( (pWInfo->wctrlFlags & (WHERE_OR_SUBCLAUSE|WHERE_RIGHT_JOIN))\n@@ -147607,0 +150510,1 @@\n+    pExpr = sqlite3ExprSkipCollate(pExpr);\n@@ -147612,1 +150516,0 @@\n-    testcase( ExprHasProperty(pExpr, EP_Skip) );\n@@ -147736,0 +150639,62 @@\n+\/*\n+** This routine is called right after An OP_Filter has been generated and\n+** before the corresponding index search has been performed.  This routine\n+** checks to see if there are additional Bloom filters in inner loops that\n+** can be checked prior to doing the index lookup.  If there are available\n+** inner-loop Bloom filters, then evaluate those filters now, before the\n+** index lookup.  The idea is that a Bloom filter check is way faster than\n+** an index lookup, and the Bloom filter might return false, meaning that\n+** the index lookup can be skipped.\n+**\n+** We know that an inner loop uses a Bloom filter because it has the\n+** WhereLevel.regFilter set.  If an inner-loop Bloom filter is checked,\n+** then clear the WhereLevel.regFilter value to prevent the Bloom filter\n+** from being checked a second time when the inner loop is evaluated.\n+*\/\n+static SQLITE_NOINLINE void filterPullDown(\n+  Parse *pParse,       \/* Parsing context *\/\n+  WhereInfo *pWInfo,   \/* Complete information about the WHERE clause *\/\n+  int iLevel,          \/* Which level of pWInfo->a[] should be coded *\/\n+  int addrNxt,         \/* Jump here to bypass inner loops *\/\n+  Bitmask notReady     \/* Loops that are not ready *\/\n+){\n+  while( ++iLevel < pWInfo->nLevel ){\n+    WhereLevel *pLevel = &pWInfo->a[iLevel];\n+    WhereLoop *pLoop = pLevel->pWLoop;\n+    if( pLevel->regFilter==0 ) continue;\n+    if( pLevel->pWLoop->nSkip ) continue;\n+    \/*         ,--- Because sqlite3ConstructBloomFilter() has will not have set\n+    **  vvvvv--'    pLevel->regFilter if this were true. *\/\n+    if( NEVER(pLoop->prereq & notReady) ) continue;\n+    assert( pLevel->addrBrk==0 );\n+    pLevel->addrBrk = addrNxt;\n+    if( pLoop->wsFlags & WHERE_IPK ){\n+      WhereTerm *pTerm = pLoop->aLTerm[0];\n+      int regRowid;\n+      assert( pTerm!=0 );\n+      assert( pTerm->pExpr!=0 );\n+      testcase( pTerm->wtFlags & TERM_VIRTUAL );\n+      regRowid = sqlite3GetTempReg(pParse);\n+      regRowid = codeEqualityTerm(pParse, pTerm, pLevel, 0, 0, regRowid);\n+      sqlite3VdbeAddOp4Int(pParse->pVdbe, OP_Filter, pLevel->regFilter,\n+                           addrNxt, regRowid, 1);\n+      VdbeCoverage(pParse->pVdbe);\n+    }else{\n+      u16 nEq = pLoop->u.btree.nEq;\n+      int r1;\n+      char *zStartAff;\n+\n+      assert( pLoop->wsFlags & WHERE_INDEXED );\n+      assert( (pLoop->wsFlags & WHERE_COLUMN_IN)==0 );\n+      r1 = codeAllEqualityTerms(pParse,pLevel,0,0,&zStartAff);\n+      codeApplyAffinity(pParse, r1, nEq, zStartAff);\n+      sqlite3DbFree(pParse->db, zStartAff);\n+      sqlite3VdbeAddOp4Int(pParse->pVdbe, OP_Filter, pLevel->regFilter,\n+                           addrNxt, r1, nEq);\n+      VdbeCoverage(pParse->pVdbe);\n+    }\n+    pLevel->regFilter = 0;\n+    pLevel->addrBrk = 0;\n+  }\n+}\n+\n@@ -147806,1 +150771,1 @@\n-  assert( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)\n+  assert( (pWInfo->wctrlFlags & (WHERE_OR_SUBCLAUSE|WHERE_RIGHT_JOIN))\n@@ -147817,1 +150782,4 @@\n-  for(j=iLevel; j>0 && pWInfo->a[j].iLeftJoin==0; j--){}\n+  for(j=iLevel; j>0; j--){\n+    if( pWInfo->a[j].iLeftJoin ) break;\n+    if( pWInfo->a[j].pRJ ) break;\n+  }\n@@ -147838,1 +150806,0 @@\n-    int iIn;    \/* Counter for IN constraints *\/\n@@ -147847,2 +150814,9 @@\n-        codeEqualityTerm(pParse, pTerm, pLevel, j, bRev, iTarget);\n-        addrNotFound = pLevel->addrNxt;\n+        if( SMASKBIT32(j) & pLoop->u.vtab.mHandleIn ){\n+          int iTab = pParse->nTab++;\n+          int iCache = ++pParse->nMem;\n+          sqlite3CodeRhsOfIN(pParse, pTerm->pExpr, iTab);\n+          sqlite3VdbeAddOp3(v, OP_VInitIn, iTab, iTarget, iCache);\n+        }else{\n+          codeEqualityTerm(pParse, pTerm, pLevel, j, bRev, iTarget);\n+          addrNotFound = pLevel->addrNxt;\n+        }\n@@ -147852,0 +150826,9 @@\n+        if( pTerm->eMatchOp==SQLITE_INDEX_CONSTRAINT_OFFSET\n+         && pLoop->u.vtab.bOmitOffset\n+        ){\n+          assert( pTerm->eOperator==WO_AUX );\n+          assert( pWInfo->pLimit!=0 );\n+          assert( pWInfo->pLimit->iOffset>0 );\n+          sqlite3VdbeAddOp2(v, OP_Integer, 0, pWInfo->pLimit->iOffset);\n+          VdbeComment((v,\"Zero OFFSET counter\"));\n+        }\n@@ -147868,6 +150851,2 @@\n-    if( pLoop->wsFlags & WHERE_IN_ABLE ){\n-      iIn = pLevel->u.in.nIn;\n-    }else{\n-      iIn = 0;\n-    }\n-    for(j=nConstraint-1; j>=0; j--){\n+\n+    for(j=0; j<nConstraint; j++){\n@@ -147875,1 +150854,0 @@\n-      if( (pTerm->eOperator & WO_IN)!=0 ) iIn--;\n@@ -147878,2 +150856,5 @@\n-      }else if( (pTerm->eOperator & WO_IN)!=0\n-        && sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1\n+        continue;\n+      }\n+      if( (pTerm->eOperator & WO_IN)!=0\n+       && (SMASKBIT32(j) & pLoop->u.vtab.mHandleIn)==0\n+       && !db->mallocFailed\n@@ -147884,0 +150865,1 @@\n+        int iIn;         \/* IN loop corresponding to the j-th constraint *\/\n@@ -147888,4 +150870,3 @@\n-        ** encoding of the value in the register, so it *must* be reloaded. *\/\n-        assert( pLevel->u.in.aInLoop!=0 || db->mallocFailed );\n-        if( !db->mallocFailed ){\n-          assert( iIn>=0 && iIn<pLevel->u.in.nIn );\n+        ** encoding of the value in the register, so it *must* be reloaded.\n+        *\/\n+        for(iIn=0; ALWAYS(iIn<pLevel->u.in.nIn); iIn++){\n@@ -147893,5 +150874,7 @@\n-          assert( pOp->opcode==OP_Column || pOp->opcode==OP_Rowid );\n-          assert( pOp->opcode!=OP_Column || pOp->p3==iReg+j+2 );\n-          assert( pOp->opcode!=OP_Rowid || pOp->p2==iReg+j+2 );\n-          testcase( pOp->opcode==OP_Rowid );\n-          sqlite3VdbeAddOp3(v, pOp->opcode, pOp->p1, pOp->p2, pOp->p3);\n+          if( (pOp->opcode==OP_Column && pOp->p3==iReg+j+2)\n+           || (pOp->opcode==OP_Rowid && pOp->p2==iReg+j+2)\n+          ){\n+            testcase( pOp->opcode==OP_Rowid );\n+            sqlite3VdbeAddOp3(v, pOp->opcode, pOp->p1, pOp->p2, pOp->p3);\n+            break;\n+          }\n@@ -147901,1 +150884,2 @@\n-        ** the IN constraint is not satisfied *\/\n+        ** the IN constraint is not satisfied\n+        *\/\n@@ -147903,3 +150887,12 @@\n-        assert( pCompare!=0 || db->mallocFailed );\n-        if( pCompare ){\n-          pCompare->pLeft = pTerm->pExpr->pLeft;\n+        if( !db->mallocFailed ){\n+          int iFld = pTerm->u.x.iField;\n+          Expr *pLeft = pTerm->pExpr->pLeft;\n+          assert( pLeft!=0 );\n+          if( iFld>0 ){\n+            assert( pLeft->op==TK_VECTOR );\n+            assert( ExprUseXList(pLeft) );\n+            assert( iFld<=pLeft->x.pList->nExpr );\n+            pCompare->pLeft = pLeft->x.pList->a[iFld-1].pExpr;\n+          }else{\n+            pCompare->pLeft = pLeft;\n+          }\n@@ -147914,1 +150907,0 @@\n-          sqlite3ExprDelete(db, pCompare);\n@@ -147916,0 +150908,1 @@\n+        sqlite3ExprDelete(db, pCompare);\n@@ -147918,1 +150911,1 @@\n-    assert( iIn==0 || db->mallocFailed );\n+\n@@ -147946,0 +150939,6 @@\n+    if( pLevel->regFilter ){\n+      sqlite3VdbeAddOp4Int(v, OP_Filter, pLevel->regFilter, addrNxt,\n+                           iRowidReg, 1);\n+      VdbeCoverage(v);\n+      filterPullDown(pParse, pWInfo, iLevel, addrNxt, notReady);\n+    }\n@@ -148271,0 +151270,6 @@\n+      if( pLevel->regFilter ){\n+        sqlite3VdbeAddOp4Int(v, OP_Filter, pLevel->regFilter, addrNxt,\n+                             regBase, nEq);\n+        VdbeCoverage(v);\n+        filterPullDown(pParse, pWInfo, iLevel, addrNxt, notReady);\n+      }\n@@ -148407,1 +151412,1 @@\n-           && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0;\n+           && (pWInfo->wctrlFlags & (WHERE_OR_SUBCLAUSE|WHERE_RIGHT_JOIN))==0;\n@@ -148441,1 +151446,1 @@\n-      if( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 ){\n+      if( (pWInfo->wctrlFlags & (WHERE_OR_SUBCLAUSE|WHERE_RIGHT_JOIN))==0 ){\n@@ -148460,1 +151465,1 @@\n-      assert( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0 );\n+      assert( (pWInfo->wctrlFlags & (WHERE_OR_SUBCLAUSE|WHERE_RIGHT_JOIN))==0 );\n@@ -148598,1 +151603,1 @@\n-    ** Then for every term xN, evaluate as the subexpression: xN AND z\n+    ** Then for every term xN, evaluate as the subexpression: xN AND y\n@@ -148610,0 +151615,14 @@\n+    **\n+    ** 2022-02-04:  Do not push down slices of a row-value comparison.\n+    ** In other words, \"w\" or \"y\" may not be a slice of a vector.  Otherwise,\n+    ** the initialization of the right-hand operand of the vector comparison\n+    ** might not occur, or might occur only in an OR branch that is not\n+    ** taken.  dbsqlfuzz 80a9fade844b4fb43564efc972bcb2c68270f5d1.\n+    **\n+    ** 2022-03-03:  Do not push down expressions that involve subqueries.\n+    ** The subquery might get coded as a subroutine.  Any table-references\n+    ** in the subquery might be resolved to index-references for the index on\n+    ** the OR branch in which the subroutine is coded.  But if the subroutine\n+    ** is invoked from a different OR branch that uses a different index, such\n+    ** index-references will not work.  tag-20220303a\n+    ** https:\/\/sqlite.org\/forum\/forumpost\/36937b197273d403\n@@ -148618,1 +151637,4 @@\n-        if( (pWC->a[iTerm].wtFlags & (TERM_VIRTUAL|TERM_CODED))!=0 ) continue;\n+        testcase( pWC->a[iTerm].wtFlags & TERM_SLICE );\n+        if( (pWC->a[iTerm].wtFlags & (TERM_VIRTUAL|TERM_CODED|TERM_SLICE))!=0 ){\n+          continue;\n+        }\n@@ -148620,1 +151642,1 @@\n-        testcase( pWC->a[iTerm].wtFlags & TERM_ORINFO );\n+        if( ExprHasProperty(pExpr, EP_Subquery) ) continue;  \/* tag-20220303a *\/\n@@ -148647,1 +151669,1 @@\n-               && !ExprHasProperty(pOrExpr, EP_FromJoin)\n+               && !ExprHasProperty(pOrExpr, EP_OuterON)\n@@ -148661,1 +151683,1 @@\n-        pSubWInfo = sqlite3WhereBegin(pParse, pOrTab, pOrExpr, 0, 0,\n+        pSubWInfo = sqlite3WhereBegin(pParse, pOrTab, pOrExpr, 0, 0, 0,\n@@ -148663,1 +151685,1 @@\n-        assert( pSubWInfo || pParse->nErr || db->mallocFailed );\n+        assert( pSubWInfo || pParse->nErr );\n@@ -148785,0 +151807,8 @@\n+    \/* Set the P2 operand of the OP_Return opcode that will end the current\n+    ** loop to point to this spot, which is the top of the next containing\n+    ** loop.  The byte-code formatter will use that P2 value as a hint to\n+    ** indent everything in between the this point and the final OP_Return.\n+    ** See tag-20220407a in vdbe.c and shell.c *\/\n+    assert( pLevel->op==OP_Return );\n+    pLevel->p2 = sqlite3VdbeCurrentAddr(v);\n+\n@@ -148847,2 +151877,15 @@\n-      if( (pTabItem->fg.jointype&JT_LEFT) && !ExprHasProperty(pE,EP_FromJoin) ){\n-        continue;\n+      if( pTabItem->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT) ){\n+        if( !ExprHasProperty(pE,EP_OuterON|EP_InnerON) ){\n+          \/* Defer processing WHERE clause constraints until after outer\n+          ** join processing.  tag-20220513a *\/\n+          continue;\n+        }else if( (pTabItem->fg.jointype & JT_LEFT)==JT_LEFT\n+               && !ExprHasProperty(pE,EP_OuterON) ){\n+          continue;\n+        }else{\n+          Bitmask m = sqlite3WhereGetMask(&pWInfo->sMaskSet, pE->w.iJoin);\n+          if( m & pLevel->notReady ){\n+            \/* An ON clause that is not ripe *\/\n+            continue;\n+          }\n+        }\n@@ -148850,1 +151893,0 @@\n-\n@@ -148902,1 +151944,1 @@\n-  for(pTerm=pWC->a, j=pWC->nTerm; j>0; j--, pTerm++){\n+  for(pTerm=pWC->a, j=pWC->nBase; j>0; j--, pTerm++){\n@@ -148909,1 +151951,1 @@\n-    if( pTabItem->fg.jointype & JT_LEFT ) continue;\n+    if( pTabItem->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT) ) continue;\n@@ -148917,1 +151959,1 @@\n-    assert( !ExprHasProperty(pE, EP_FromJoin) );\n+    assert( !ExprHasProperty(pE, EP_OuterON) );\n@@ -148940,0 +151982,41 @@\n+  \/* For a RIGHT OUTER JOIN, record the fact that the current row has\n+  ** been matched at least once.\n+  *\/\n+  if( pLevel->pRJ ){\n+    Table *pTab;\n+    int nPk;\n+    int r;\n+    int jmp1 = 0;\n+    WhereRightJoin *pRJ = pLevel->pRJ;\n+\n+    \/* pTab is the right-hand table of the RIGHT JOIN.  Generate code that\n+    ** will record that the current row of that table has been matched at\n+    ** least once.  This is accomplished by storing the PK for the row in\n+    ** both the iMatch index and the regBloom Bloom filter.\n+    *\/\n+    pTab = pWInfo->pTabList->a[pLevel->iFrom].pTab;\n+    if( HasRowid(pTab) ){\n+      r = sqlite3GetTempRange(pParse, 2);\n+      sqlite3ExprCodeGetColumnOfTable(v, pTab, pLevel->iTabCur, -1, r+1);\n+      nPk = 1;\n+    }else{\n+      int iPk;\n+      Index *pPk = sqlite3PrimaryKeyIndex(pTab);\n+      nPk = pPk->nKeyCol;\n+      r = sqlite3GetTempRange(pParse, nPk+1);\n+      for(iPk=0; iPk<nPk; iPk++){\n+        int iCol = pPk->aiColumn[iPk];\n+        sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, iCol,r+1+iPk);\n+      }\n+    }\n+    jmp1 = sqlite3VdbeAddOp4Int(v, OP_Found, pRJ->iMatch, 0, r+1, nPk);\n+    VdbeCoverage(v);\n+    VdbeComment((v, \"match against %s\", pTab->zName));\n+    sqlite3VdbeAddOp3(v, OP_MakeRecord, r+1, nPk, r);\n+    sqlite3VdbeAddOp4Int(v, OP_IdxInsert, pRJ->iMatch, r, r+1, nPk);\n+    sqlite3VdbeAddOp4Int(v, OP_FilterAdd, pRJ->regBloom, 0, r+1, nPk);\n+    sqlite3VdbeChangeP5(v, OPFLAG_USESEEKRESULT);\n+    sqlite3VdbeJumpHere(v, jmp1);\n+    sqlite3ReleaseTempRange(pParse, r, nPk+1);\n+  }\n+\n@@ -148947,1 +152030,25 @@\n-    for(pTerm=pWC->a, j=0; j<pWC->nTerm; j++, pTerm++){\n+    if( pLevel->pRJ==0 ){\n+      goto code_outer_join_constraints; \/* WHERE clause constraints *\/\n+    }\n+  }\n+\n+  if( pLevel->pRJ ){\n+    \/* Create a subroutine used to process all interior loops and code\n+    ** of the RIGHT JOIN.  During normal operation, the subroutine will\n+    ** be in-line with the rest of the code.  But at the end, a separate\n+    ** loop will run that invokes this subroutine for unmatched rows\n+    ** of pTab, with all tables to left begin set to NULL.\n+    *\/\n+    WhereRightJoin *pRJ = pLevel->pRJ;\n+    sqlite3VdbeAddOp2(v, OP_BeginSubrtn, 0, pRJ->regReturn);\n+    pRJ->addrSubrtn = sqlite3VdbeCurrentAddr(v);\n+    assert( pParse->withinRJSubrtn < 255 );\n+    pParse->withinRJSubrtn++;\n+\n+    \/* WHERE clause constraints must be deferred until after outer join\n+    ** row elimination has completed, since WHERE clause constraints apply\n+    ** to the results of the OUTER JOIN.  The following loop generates the\n+    ** appropriate WHERE clause constraint checks.  tag-20220513a.\n+    *\/\n+  code_outer_join_constraints:\n+    for(pTerm=pWC->a, j=0; j<pWC->nBase; j++, pTerm++){\n@@ -148955,0 +152062,1 @@\n+      if( pTabItem->fg.jointype & JT_LTORJ ) continue;\n@@ -148975,0 +152083,90 @@\n+\/*\n+** Generate the code for the loop that finds all non-matched terms\n+** for a RIGHT JOIN.\n+*\/\n+SQLITE_PRIVATE SQLITE_NOINLINE void sqlite3WhereRightJoinLoop(\n+  WhereInfo *pWInfo,\n+  int iLevel,\n+  WhereLevel *pLevel\n+){\n+  Parse *pParse = pWInfo->pParse;\n+  Vdbe *v = pParse->pVdbe;\n+  WhereRightJoin *pRJ = pLevel->pRJ;\n+  Expr *pSubWhere = 0;\n+  WhereClause *pWC = &pWInfo->sWC;\n+  WhereInfo *pSubWInfo;\n+  WhereLoop *pLoop = pLevel->pWLoop;\n+  SrcItem *pTabItem = &pWInfo->pTabList->a[pLevel->iFrom];\n+  SrcList sFrom;\n+  Bitmask mAll = 0;\n+  int k;\n+\n+  ExplainQueryPlan((pParse, 1, \"RIGHT-JOIN %s\", pTabItem->pTab->zName));\n+  sqlite3VdbeNoJumpsOutsideSubrtn(v, pRJ->addrSubrtn, pRJ->endSubrtn,\n+                                  pRJ->regReturn);\n+  for(k=0; k<iLevel; k++){\n+    int iIdxCur;\n+    mAll |= pWInfo->a[k].pWLoop->maskSelf;\n+    sqlite3VdbeAddOp1(v, OP_NullRow, pWInfo->a[k].iTabCur);\n+    iIdxCur = pWInfo->a[k].iIdxCur;\n+    if( iIdxCur ){\n+      sqlite3VdbeAddOp1(v, OP_NullRow, iIdxCur);\n+    }\n+  }\n+  if( (pTabItem->fg.jointype & JT_LTORJ)==0 ){\n+    mAll |= pLoop->maskSelf;\n+    for(k=0; k<pWC->nTerm; k++){\n+      WhereTerm *pTerm = &pWC->a[k];\n+      if( (pTerm->wtFlags & (TERM_VIRTUAL|TERM_SLICE))!=0\n+       && pTerm->eOperator!=WO_ROWVAL\n+      ){\n+        break;\n+      }\n+      if( pTerm->prereqAll & ~mAll ) continue;\n+      if( ExprHasProperty(pTerm->pExpr, EP_OuterON|EP_InnerON) ) continue;\n+      pSubWhere = sqlite3ExprAnd(pParse, pSubWhere,\n+                                 sqlite3ExprDup(pParse->db, pTerm->pExpr, 0));\n+    }\n+  }\n+  sFrom.nSrc = 1;\n+  sFrom.nAlloc = 1;\n+  memcpy(&sFrom.a[0], pTabItem, sizeof(SrcItem));\n+  sFrom.a[0].fg.jointype = 0;\n+  assert( pParse->withinRJSubrtn < 100 );\n+  pParse->withinRJSubrtn++;\n+  pSubWInfo = sqlite3WhereBegin(pParse, &sFrom, pSubWhere, 0, 0, 0,\n+                                WHERE_RIGHT_JOIN, 0);\n+  if( pSubWInfo ){\n+    int iCur = pLevel->iTabCur;\n+    int r = ++pParse->nMem;\n+    int nPk;\n+    int jmp;\n+    int addrCont = sqlite3WhereContinueLabel(pSubWInfo);\n+    Table *pTab = pTabItem->pTab;\n+    if( HasRowid(pTab) ){\n+      sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, -1, r);\n+      nPk = 1;\n+    }else{\n+      int iPk;\n+      Index *pPk = sqlite3PrimaryKeyIndex(pTab);\n+      nPk = pPk->nKeyCol;\n+      pParse->nMem += nPk - 1;\n+      for(iPk=0; iPk<nPk; iPk++){\n+        int iCol = pPk->aiColumn[iPk];\n+        sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, iCol,r+iPk);\n+      }\n+    }\n+    jmp = sqlite3VdbeAddOp4Int(v, OP_Filter, pRJ->regBloom, 0, r, nPk);\n+    VdbeCoverage(v);\n+    sqlite3VdbeAddOp4Int(v, OP_Found, pRJ->iMatch, addrCont, r, nPk);\n+    VdbeCoverage(v);\n+    sqlite3VdbeJumpHere(v, jmp);\n+    sqlite3VdbeAddOp2(v, OP_Gosub, pRJ->regReturn, pRJ->addrSubrtn);\n+    sqlite3WhereEnd(pSubWInfo);\n+  }\n+  sqlite3ExprDelete(pParse->db, pSubWhere);\n+  ExplainQueryPlanPop(pParse);\n+  assert( pParse->withinRJSubrtn>0 );\n+  pParse->withinRJSubrtn--;\n+}\n+\n@@ -149043,1 +152241,1 @@\n-    pWC->a = sqlite3DbMallocRawNN(db, sizeof(pWC->a[0])*pWC->nSlot*2 );\n+    pWC->a = sqlite3WhereMalloc(pWC->pWInfo, sizeof(pWC->a[0])*pWC->nSlot*2 );\n@@ -149052,4 +152250,1 @@\n-    if( pOld!=pWC->aStatic ){\n-      sqlite3DbFree(db, pOld);\n-    }\n-    pWC->nSlot = sqlite3DbMallocSize(db, pWC->a)\/sizeof(pWC->a[0]);\n+    pWC->nSlot = pWC->nSlot*2;\n@@ -149058,0 +152253,1 @@\n+  if( (wtFlags & TERM_VIRTUAL)==0 ) pWC->nBase = pWC->nTerm;\n@@ -149400,1 +152596,1 @@\n-       pMod = (sqlite3_module *)pVtab->pModule;\n+      pMod = (sqlite3_module *)pVtab->pModule;\n@@ -149442,3 +152638,3 @@\n-  if( pDerived ){\n-    pDerived->flags |= pBase->flags & EP_FromJoin;\n-    pDerived->iRightJoinTable = pBase->iRightJoinTable;\n+  if( pDerived && ExprHasProperty(pBase, EP_OuterON|EP_InnerON) ){\n+    pDerived->flags |= pBase->flags & (EP_OuterON|EP_InnerON);\n+    pDerived->w.iJoin = pBase->w.iJoin;\n@@ -149774,1 +152970,1 @@\n-        pOrTerm->wtFlags &= ~TERM_OR_OK;\n+        pOrTerm->wtFlags &= ~TERM_OK;\n@@ -149815,1 +153011,1 @@\n-          pOrTerm->wtFlags &= ~TERM_OR_OK;\n+          pOrTerm->wtFlags &= ~TERM_OK;\n@@ -149831,1 +153027,1 @@\n-            pOrTerm->wtFlags |= TERM_OR_OK;\n+            pOrTerm->wtFlags |= TERM_OK;\n@@ -149848,1 +153044,1 @@\n-        if( (pOrTerm->wtFlags & TERM_OR_OK)==0 ) continue;\n+        if( (pOrTerm->wtFlags & TERM_OK)==0 ) continue;\n@@ -149898,1 +153094,1 @@\n-  if( ExprHasProperty(pExpr, EP_FromJoin) ) return 0;\n+  if( ExprHasProperty(pExpr, EP_OuterON) ) return 0;\n@@ -149929,1 +153125,3 @@\n-        mask |= sqlite3WhereExprUsage(pMaskSet, pSrc->a[i].pOn);\n+        if( pSrc->a[i].fg.isUsing==0 ){\n+          mask |= sqlite3WhereExprUsage(pMaskSet, pSrc->a[i].u3.pOn);\n+        }\n@@ -150049,0 +153247,1 @@\n+  assert( pWC->nTerm > idxTerm );\n@@ -150052,0 +153251,1 @@\n+  assert( pExpr!=0 ); \/* Because malloc() has not failed *\/\n@@ -150053,0 +153253,1 @@\n+  pMaskSet->bVarSelect = 0;\n@@ -150063,2 +153264,1 @@\n-  }else if( op==TK_ISNULL ){\n-    pTerm->prereqRight = 0;\n+    prereqAll = prereqLeft | pTerm->prereqRight;\n@@ -150067,0 +153267,8 @@\n+    if( pExpr->pLeft==0\n+     || ExprHasProperty(pExpr, EP_xIsSelect|EP_IfNullRow)\n+     || pExpr->x.pList!=0\n+    ){\n+      prereqAll = sqlite3WhereExprUsageNN(pMaskSet, pExpr);\n+    }else{\n+      prereqAll = prereqLeft | pTerm->prereqRight;\n+    }\n@@ -150068,2 +153276,0 @@\n-  pMaskSet->bVarSelect = 0;\n-  prereqAll = sqlite3WhereExprUsageNN(pMaskSet, pExpr);\n@@ -150071,8 +153277,31 @@\n-  if( ExprHasProperty(pExpr, EP_FromJoin) ){\n-    Bitmask x = sqlite3WhereGetMask(pMaskSet, pExpr->iRightJoinTable);\n-    prereqAll |= x;\n-    extraRight = x-1;  \/* ON clause terms may not be used with an index\n-                       ** on left table of a LEFT JOIN.  Ticket #3015 *\/\n-    if( (prereqAll>>1)>=x ){\n-      sqlite3ErrorMsg(pParse, \"ON clause references tables to its right\");\n-      return;\n+\n+#ifdef SQLITE_DEBUG\n+  if( prereqAll!=sqlite3WhereExprUsageNN(pMaskSet, pExpr) ){\n+    printf(\"\\n*** Incorrect prereqAll computed for:\\n\");\n+    sqlite3TreeViewExpr(0,pExpr,0);\n+    assert( 0 );\n+  }\n+#endif\n+\n+  if( ExprHasProperty(pExpr, EP_OuterON|EP_InnerON) ){\n+    Bitmask x = sqlite3WhereGetMask(pMaskSet, pExpr->w.iJoin);\n+    if( ExprHasProperty(pExpr, EP_OuterON) ){\n+      prereqAll |= x;\n+      extraRight = x-1;  \/* ON clause terms may not be used with an index\n+                         ** on left table of a LEFT JOIN.  Ticket #3015 *\/\n+      if( (prereqAll>>1)>=x ){\n+        sqlite3ErrorMsg(pParse, \"ON clause references tables to its right\");\n+        return;\n+      }\n+    }else if( (prereqAll>>1)>=x ){\n+      \/* The ON clause of an INNER JOIN references a table to its right.\n+      ** Most other SQL database engines raise an error.  But SQLite versions\n+      ** 3.0 through 3.38 just put the ON clause constraint into the WHERE\n+      ** clause and carried on.   Beginning with 3.39, raise an error only\n+      ** if there is a RIGHT or FULL JOIN in the query.  This makes SQLite\n+      ** more like other systems, and also preserves legacy. *\/\n+      if( ALWAYS(pSrc->nSrc>0) && (pSrc->a[0].fg.jointype & JT_LTORJ)!=0 ){\n+        sqlite3ErrorMsg(pParse, \"ON clause references tables to its right\");\n+        return;\n+      }\n+      ExprClearProperty(pExpr, EP_InnerON);\n@@ -150146,1 +153375,1 @@\n-     && !ExprHasProperty(pExpr,EP_FromJoin)\n+     && !ExprHasProperty(pExpr,EP_OuterON)\n@@ -150217,1 +153446,1 @@\n-     && !ExprHasProperty(pExpr, EP_FromJoin)\n+     && !ExprHasProperty(pExpr, EP_OuterON)\n@@ -150340,1 +153569,4 @@\n-  ** is not a sub-select.  *\/\n+  ** is not a sub-select.\n+  **\n+  ** tag-20220128a\n+  *\/\n@@ -150357,1 +153589,1 @@\n-      idxNew = whereClauseInsert(pWC, pNew, TERM_DYNAMIC);\n+      idxNew = whereClauseInsert(pWC, pNew, TERM_DYNAMIC|TERM_SLICE);\n@@ -150362,1 +153594,1 @@\n-    pTerm->eOperator = 0;\n+    pTerm->eOperator = WO_ROWVAL;\n@@ -150387,1 +153619,1 @@\n-      idxNew = whereClauseInsert(pWC, pExpr, TERM_VIRTUAL);\n+      idxNew = whereClauseInsert(pWC, pExpr, TERM_VIRTUAL|TERM_SLICE);\n@@ -150418,3 +153650,3 @@\n-        if( ExprHasProperty(pExpr, EP_FromJoin) && pNewExpr ){\n-          ExprSetProperty(pNewExpr, EP_FromJoin);\n-          pNewExpr->iRightJoinTable = pExpr->iRightJoinTable;\n+        if( ExprHasProperty(pExpr, EP_OuterON) && pNewExpr ){\n+          ExprSetProperty(pNewExpr, EP_OuterON);\n+          pNewExpr->w.iJoin = pExpr->w.iJoin;\n@@ -150483,0 +153715,107 @@\n+\/*\n+** Add either a LIMIT (if eMatchOp==SQLITE_INDEX_CONSTRAINT_LIMIT) or\n+** OFFSET (if eMatchOp==SQLITE_INDEX_CONSTRAINT_OFFSET) term to the\n+** where-clause passed as the first argument. The value for the term\n+** is found in register iReg.\n+**\n+** In the common case where the value is a simple integer\n+** (example: \"LIMIT 5 OFFSET 10\") then the expression codes as a\n+** TK_INTEGER so that it will be available to sqlite3_vtab_rhs_value().\n+** If not, then it codes as a TK_REGISTER expression.\n+*\/\n+static void whereAddLimitExpr(\n+  WhereClause *pWC,   \/* Add the constraint to this WHERE clause *\/\n+  int iReg,           \/* Register that will hold value of the limit\/offset *\/\n+  Expr *pExpr,        \/* Expression that defines the limit\/offset *\/\n+  int iCsr,           \/* Cursor to which the constraint applies *\/\n+  int eMatchOp        \/* SQLITE_INDEX_CONSTRAINT_LIMIT or _OFFSET *\/\n+){\n+  Parse *pParse = pWC->pWInfo->pParse;\n+  sqlite3 *db = pParse->db;\n+  Expr *pNew;\n+  int iVal = 0;\n+\n+  if( sqlite3ExprIsInteger(pExpr, &iVal) && iVal>=0 ){\n+    Expr *pVal = sqlite3Expr(db, TK_INTEGER, 0);\n+    if( pVal==0 ) return;\n+    ExprSetProperty(pVal, EP_IntValue);\n+    pVal->u.iValue = iVal;\n+    pNew = sqlite3PExpr(pParse, TK_MATCH, 0, pVal);\n+  }else{\n+    Expr *pVal = sqlite3Expr(db, TK_REGISTER, 0);\n+    if( pVal==0 ) return;\n+    pVal->iTable = iReg;\n+    pNew = sqlite3PExpr(pParse, TK_MATCH, 0, pVal);\n+  }\n+  if( pNew ){\n+    WhereTerm *pTerm;\n+    int idx;\n+    idx = whereClauseInsert(pWC, pNew, TERM_DYNAMIC|TERM_VIRTUAL);\n+    pTerm = &pWC->a[idx];\n+    pTerm->leftCursor = iCsr;\n+    pTerm->eOperator = WO_AUX;\n+    pTerm->eMatchOp = eMatchOp;\n+  }\n+}\n+\n+\/*\n+** Possibly add terms corresponding to the LIMIT and OFFSET clauses of the\n+** SELECT statement passed as the second argument. These terms are only\n+** added if:\n+**\n+**   1. The SELECT statement has a LIMIT clause, and\n+**   2. The SELECT statement is not an aggregate or DISTINCT query, and\n+**   3. The SELECT statement has exactly one object in its from clause, and\n+**      that object is a virtual table, and\n+**   4. There are no terms in the WHERE clause that will not be passed\n+**      to the virtual table xBestIndex method.\n+**   5. The ORDER BY clause, if any, will be made available to the xBestIndex\n+**      method.\n+**\n+** LIMIT and OFFSET terms are ignored by most of the planner code. They\n+** exist only so that they may be passed to the xBestIndex method of the\n+** single virtual table in the FROM clause of the SELECT.\n+*\/\n+SQLITE_PRIVATE void sqlite3WhereAddLimit(WhereClause *pWC, Select *p){\n+  assert( p==0 || (p->pGroupBy==0 && (p->selFlags & SF_Aggregate)==0) );\n+  if( (p && p->pLimit)                                          \/* 1 *\/\n+   && (p->selFlags & (SF_Distinct|SF_Aggregate))==0             \/* 2 *\/\n+   && (p->pSrc->nSrc==1 && IsVirtual(p->pSrc->a[0].pTab))       \/* 3 *\/\n+  ){\n+    ExprList *pOrderBy = p->pOrderBy;\n+    int iCsr = p->pSrc->a[0].iCursor;\n+    int ii;\n+\n+    \/* Check condition (4). Return early if it is not met. *\/\n+    for(ii=0; ii<pWC->nTerm; ii++){\n+      if( pWC->a[ii].wtFlags & TERM_CODED ){\n+        \/* This term is a vector operation that has been decomposed into\n+        ** other, subsequent terms.  It can be ignored. See tag-20220128a *\/\n+        assert( pWC->a[ii].wtFlags & TERM_VIRTUAL );\n+        assert( pWC->a[ii].eOperator==WO_ROWVAL );\n+        continue;\n+      }\n+      if( pWC->a[ii].leftCursor!=iCsr ) return;\n+    }\n+\n+    \/* Check condition (5). Return early if it is not met. *\/\n+    if( pOrderBy ){\n+      for(ii=0; ii<pOrderBy->nExpr; ii++){\n+        Expr *pExpr = pOrderBy->a[ii].pExpr;\n+        if( pExpr->op!=TK_COLUMN ) return;\n+        if( pExpr->iTable!=iCsr ) return;\n+        if( pOrderBy->a[ii].fg.sortFlags & KEYINFO_ORDER_BIGNULL ) return;\n+      }\n+    }\n+\n+    \/* All conditions are met. Add the terms to the where-clause object. *\/\n+    assert( p->pLimit->op==TK_LIMIT );\n+    whereAddLimitExpr(pWC, p->iLimit, p->pLimit->pLeft,\n+                      iCsr, SQLITE_INDEX_CONSTRAINT_LIMIT);\n+    if( p->iOffset>0 ){\n+      whereAddLimitExpr(pWC, p->iOffset, p->pLimit->pRight,\n+                        iCsr, SQLITE_INDEX_CONSTRAINT_OFFSET);\n+    }\n+  }\n+}\n+\n@@ -150494,0 +153833,1 @@\n+  pWC->nBase = 0;\n@@ -150504,2 +153844,0 @@\n-  int i;\n-  WhereTerm *a;\n@@ -150507,3 +153845,9 @@\n-  for(i=pWC->nTerm-1, a=pWC->a; i>=0; i--, a++){\n-    if( a->wtFlags & TERM_DYNAMIC ){\n-      sqlite3ExprDelete(db, a->pExpr);\n+  assert( pWC->nTerm>=pWC->nBase );\n+  if( pWC->nTerm>0 ){\n+    WhereTerm *a = pWC->a;\n+    WhereTerm *aLast = &pWC->a[pWC->nTerm-1];\n+#ifdef SQLITE_DEBUG\n+    int i;\n+    \/* Verify that every term past pWC->nBase is virtual *\/\n+    for(i=pWC->nBase; i<pWC->nTerm; i++){\n+      assert( (pWC->a[i].wtFlags & TERM_VIRTUAL)!=0 );\n@@ -150511,4 +153855,17 @@\n-    if( a->wtFlags & TERM_ORINFO ){\n-      whereOrInfoDelete(db, a->u.pOrInfo);\n-    }else if( a->wtFlags & TERM_ANDINFO ){\n-      whereAndInfoDelete(db, a->u.pAndInfo);\n+#endif\n+    while(1){\n+      assert( a->eMatchOp==0 || a->eOperator==WO_AUX );\n+      if( a->wtFlags & TERM_DYNAMIC ){\n+        sqlite3ExprDelete(db, a->pExpr);\n+      }\n+      if( a->wtFlags & (TERM_ORINFO|TERM_ANDINFO) ){\n+        if( a->wtFlags & TERM_ORINFO ){\n+          assert( (a->wtFlags & TERM_ANDINFO)==0 );\n+          whereOrInfoDelete(db, a->u.pOrInfo);\n+        }else{\n+          assert( (a->wtFlags & TERM_ANDINFO)!=0 );\n+          whereAndInfoDelete(db, a->u.pAndInfo);\n+        }\n+      }\n+      if( a==aLast ) break;\n+      a++;\n@@ -150517,3 +153874,0 @@\n-  if( pWC->a!=pWC->aStatic ){\n-    sqlite3DbFree(db, pWC->a);\n-  }\n@@ -150527,0 +153881,26 @@\n+**\n+** sqlite3WhereExprUsage(MaskSet, Expr) ->\n+**\n+**       Return a Bitmask of all tables referenced by Expr.  Expr can be\n+**       be NULL, in which case 0 is returned.\n+**\n+** sqlite3WhereExprUsageNN(MaskSet, Expr) ->\n+**\n+**       Same as sqlite3WhereExprUsage() except that Expr must not be\n+**       NULL.  The \"NN\" suffix on the name stands for \"Not Null\".\n+**\n+** sqlite3WhereExprListUsage(MaskSet, ExprList) ->\n+**\n+**       Return a Bitmask of all tables referenced by every expression\n+**       in the expression list ExprList.  ExprList can be NULL, in which\n+**       case 0 is returned.\n+**\n+** sqlite3WhereExprUsageFull(MaskSet, ExprList) ->\n+**\n+**       Internal use only.  Called only by sqlite3WhereExprUsageNN() for\n+**       complex expressions that require pushing register values onto\n+**       the stack.  Many calls to sqlite3WhereExprUsageNN() do not need\n+**       the more complex analysis done by this routine.  Hence, the\n+**       computations done by this routine are broken out into a separate\n+**       \"no-inline\" function to avoid the stack push overhead in the\n+**       common case where it is not needed.\n@@ -150528,1 +153908,4 @@\n-SQLITE_PRIVATE Bitmask sqlite3WhereExprUsageNN(WhereMaskSet *pMaskSet, Expr *p){\n+static SQLITE_NOINLINE Bitmask sqlite3WhereExprUsageFull(\n+  WhereMaskSet *pMaskSet,\n+  Expr *p\n+){\n@@ -150530,6 +153913,0 @@\n-  if( p->op==TK_COLUMN && !ExprHasProperty(p, EP_FixedCol) ){\n-    return sqlite3WhereGetMask(pMaskSet, p->iTable);\n-  }else if( ExprHasProperty(p, EP_TokenOnly|EP_Leaf) ){\n-    assert( p->op!=TK_IF_NULL_ROW );\n-    return 0;\n-  }\n@@ -150557,0 +153934,9 @@\n+SQLITE_PRIVATE Bitmask sqlite3WhereExprUsageNN(WhereMaskSet *pMaskSet, Expr *p){\n+  if( p->op==TK_COLUMN && !ExprHasProperty(p, EP_FixedCol) ){\n+    return sqlite3WhereGetMask(pMaskSet, p->iTable);\n+  }else if( ExprHasProperty(p, EP_TokenOnly|EP_Leaf) ){\n+    assert( p->op!=TK_IF_NULL_ROW );\n+    return 0;\n+  }\n+  return sqlite3WhereExprUsageFull(pMaskSet, p);\n+}\n@@ -150614,0 +154000,1 @@\n+    u32 joinType;\n@@ -150626,0 +154013,1 @@\n+    pItem->colUsed |= sqlite3ExprColUsed(pColRef);\n@@ -150629,2 +154017,4 @@\n-    if( pItem->fg.jointype & JT_LEFT ){\n-      sqlite3SetJoinExpr(pTerm, pItem->iCursor);\n+    if( pItem->fg.jointype & (JT_LEFT|JT_LTORJ) ){\n+      joinType = EP_OuterON;\n+    }else{\n+      joinType = EP_InnerON;\n@@ -150632,0 +154022,1 @@\n+    sqlite3SetJoinExpr(pTerm, pItem->iCursor, joinType);\n@@ -150670,2 +154061,8 @@\n-  WhereClause *pWC;   \/* The Where clause being analyzed *\/\n-  Parse *pParse;      \/* The parsing context *\/\n+  WhereClause *pWC;        \/* The Where clause being analyzed *\/\n+  Parse *pParse;           \/* The parsing context *\/\n+  int eDistinct;           \/* Value to return from sqlite3_vtab_distinct() *\/\n+  u32 mIn;                 \/* Mask of terms that are <col> IN (...) *\/\n+  u32 mHandleIn;           \/* Terms that vtab will handle as <col> IN (...) *\/\n+  sqlite3_value *aRhs[1];  \/* RHS values for constraints. MUST BE LAST\n+                           ** because extra space is allocated to hold up\n+                           ** to nTerm such values *\/\n@@ -150736,1 +154133,1 @@\n-  return pInner->addrNxt;\n+  return pInner->pRJ ? pWInfo->iContinue : pInner->addrNxt;\n@@ -150874,1 +154271,6 @@\n-  for(i=0; i<pMaskSet->n; i++){\n+  assert( pMaskSet->n>0 || pMaskSet->ix[0]<0 );\n+  assert( iCursor>=-1 );\n+  if( pMaskSet->ix[0]==iCursor ){\n+    return 1;\n+  }\n+  for(i=1; i<pMaskSet->n; i++){\n@@ -150882,0 +154284,24 @@\n+\/* Allocate memory that is automatically freed when pWInfo is freed.\n+*\/\n+SQLITE_PRIVATE void *sqlite3WhereMalloc(WhereInfo *pWInfo, u64 nByte){\n+  WhereMemBlock *pBlock;\n+  pBlock = sqlite3DbMallocRawNN(pWInfo->pParse->db, nByte+sizeof(*pBlock));\n+  if( pBlock ){\n+    pBlock->pNext = pWInfo->pMemToFree;\n+    pBlock->sz = nByte;\n+    pWInfo->pMemToFree = pBlock;\n+    pBlock++;\n+  }\n+  return (void*)pBlock;\n+}\n+SQLITE_PRIVATE void *sqlite3WhereRealloc(WhereInfo *pWInfo, void *pOld, u64 nByte){\n+  void *pNew = sqlite3WhereMalloc(pWInfo, nByte);\n+  if( pNew && pOld ){\n+    WhereMemBlock *pOldBlk = (WhereMemBlock*)pOld;\n+    pOldBlk--;\n+    assert( pOldBlk->sz<nByte );\n+    memcpy(pNew, pOld, pOldBlk->sz);\n+  }\n+  return pNew;\n+}\n+\n@@ -150935,1 +154361,1 @@\n-         && (pScan->iEquiv<=1 || !ExprHasProperty(pTerm->pExpr, EP_FromJoin))\n+         && (pScan->iEquiv<=1 || !ExprHasProperty(pTerm->pExpr, EP_OuterON))\n@@ -151059,6 +154485,1 @@\n-    if( iColumn==XN_EXPR ){\n-      pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;\n-      pScan->zCollName = pIdx->azColl[j];\n-      pScan->aiColumn[0] = XN_EXPR;\n-      return whereScanInitIndexExpr(pScan);\n-    }else if( iColumn==pIdx->pTable->iPKey ){\n+    if( iColumn==pIdx->pTable->iPKey ){\n@@ -151069,0 +154490,5 @@\n+    }else if( iColumn==XN_EXPR ){\n+      pScan->pIdxExpr = pIdx->aColExpr->a[j].pExpr;\n+      pScan->zCollName = pIdx->azColl[j];\n+      pScan->aiColumn[0] = XN_EXPR;\n+      return whereScanInitIndexExpr(pScan);\n@@ -151287,0 +154713,1 @@\n+      pOp->p5 = 2;  \/* Cause the MEM_Subtype flag to be cleared *\/\n@@ -151311,1 +154738,2 @@\n-    sqlite3DebugPrintf(\"  constraint[%d]: col=%d termid=%d op=%d usabled=%d\\n\",\n+    sqlite3DebugPrintf(\n+       \"  constraint[%d]: col=%d termid=%d op=%d usabled=%d collseq=%s\\n\",\n@@ -151316,1 +154744,2 @@\n-       p->aConstraint[i].usable);\n+       p->aConstraint[i].usable,\n+       sqlite3_vtab_collation(p,i));\n@@ -151352,3 +154781,3 @@\n-  WhereTerm *pTerm,              \/* WHERE clause term to check *\/\n-  SrcItem *pSrc,                 \/* Table we are trying to access *\/\n-  Bitmask notReady               \/* Tables in outer loops of the join *\/\n+  const WhereTerm *pTerm,        \/* WHERE clause term to check *\/\n+  const SrcItem *pSrc,           \/* Table we are trying to access *\/\n+  const Bitmask notReady         \/* Tables in outer loops of the join *\/\n@@ -151359,8 +154788,11 @@\n-  if( (pSrc->fg.jointype & JT_LEFT)\n-   && !ExprHasProperty(pTerm->pExpr, EP_FromJoin)\n-   && (pTerm->eOperator & WO_IS)\n-  ){\n-    \/* Cannot use an IS term from the WHERE clause as an index driver for\n-    ** the RHS of a LEFT JOIN. Such a term can only be used if it is from\n-    ** the ON clause.  *\/\n-    return 0;\n+  assert( (pSrc->fg.jointype & JT_RIGHT)==0 );\n+  if( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))!=0 ){\n+    testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_LEFT );\n+    testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_LTORJ );\n+    testcase( ExprHasProperty(pTerm->pExpr, EP_OuterON) )\n+    testcase( ExprHasProperty(pTerm->pExpr, EP_InnerON) );\n+    if( !ExprHasProperty(pTerm->pExpr, EP_OuterON|EP_InnerON)\n+     || pTerm->pExpr->w.iJoin != pSrc->iCursor\n+    ){\n+      return 0;  \/* See tag-20191211-001 *\/\n+    }\n@@ -151385,1 +154817,1 @@\n-static void constructAutomaticIndex(\n+static SQLITE_NOINLINE void constructAutomaticIndex(\n@@ -151387,3 +154819,3 @@\n-  WhereClause *pWC,           \/* The WHERE clause *\/\n-  SrcItem *pSrc,              \/* The FROM clause term to get the next index *\/\n-  Bitmask notReady,           \/* Mask of cursors that are not available *\/\n+  const WhereClause *pWC,     \/* The WHERE clause *\/\n+  const SrcItem *pSrc,        \/* The FROM clause term to get the next index *\/\n+  const Bitmask notReady,     \/* Mask of cursors that are not available *\/\n@@ -151431,7 +154863,6 @@\n-    assert( !ExprHasProperty(pExpr, EP_FromJoin)    \/* prereq always non-zero *\/\n-         || pExpr->iRightJoinTable!=pSrc->iCursor   \/*   for the right-hand   *\/\n-         || pLoop->prereq!=0 );                     \/*   table of a LEFT JOIN *\/\n-    if( pLoop->prereq==0\n-     && (pTerm->wtFlags & TERM_VIRTUAL)==0\n-     && !ExprHasProperty(pExpr, EP_FromJoin)\n-     && sqlite3ExprIsTableConstant(pExpr, pSrc->iCursor) ){\n+    \/* Make the automatic index a partial index if there are terms in the\n+    ** WHERE clause (or the ON clause of a LEFT join) that constrain which\n+    ** rows of the target table (pSrc) that can be used. *\/\n+    if( (pTerm->wtFlags & TERM_VIRTUAL)==0\n+     && sqlite3ExprIsTableConstraint(pExpr, pSrc)\n+    ){\n@@ -151544,0 +154975,4 @@\n+  if( OptimizationEnabled(pParse->db, SQLITE_BloomFilter) ){\n+    pLevel->regFilter = ++pParse->nMem;\n+    sqlite3VdbeAddOp2(v, OP_Blob, 10000, pLevel->regFilter);\n+  }\n@@ -151566,0 +155001,4 @@\n+  if( pLevel->regFilter ){\n+    sqlite3VdbeAddOp4Int(v, OP_FilterAdd, pLevel->regFilter, 0,\n+                         regBase, pLoop->u.btree.nEq);\n+  }\n@@ -151592,0 +155031,127 @@\n+\/*\n+** Generate bytecode that will initialize a Bloom filter that is appropriate\n+** for pLevel.\n+**\n+** If there are inner loops within pLevel that have the WHERE_BLOOMFILTER\n+** flag set, initialize a Bloomfilter for them as well.  Except don't do\n+** this recursive initialization if the SQLITE_BloomPulldown optimization has\n+** been turned off.\n+**\n+** When the Bloom filter is initialized, the WHERE_BLOOMFILTER flag is cleared\n+** from the loop, but the regFilter value is set to a register that implements\n+** the Bloom filter.  When regFilter is positive, the\n+** sqlite3WhereCodeOneLoopStart() will generate code to test the Bloom filter\n+** and skip the subsequence B-Tree seek if the Bloom filter indicates that\n+** no matching rows exist.\n+**\n+** This routine may only be called if it has previously been determined that\n+** the loop would benefit from a Bloom filter, and the WHERE_BLOOMFILTER bit\n+** is set.\n+*\/\n+static SQLITE_NOINLINE void sqlite3ConstructBloomFilter(\n+  WhereInfo *pWInfo,    \/* The WHERE clause *\/\n+  int iLevel,           \/* Index in pWInfo->a[] that is pLevel *\/\n+  WhereLevel *pLevel,   \/* Make a Bloom filter for this FROM term *\/\n+  Bitmask notReady      \/* Loops that are not ready *\/\n+){\n+  int addrOnce;                        \/* Address of opening OP_Once *\/\n+  int addrTop;                         \/* Address of OP_Rewind *\/\n+  int addrCont;                        \/* Jump here to skip a row *\/\n+  const WhereTerm *pTerm;              \/* For looping over WHERE clause terms *\/\n+  const WhereTerm *pWCEnd;             \/* Last WHERE clause term *\/\n+  Parse *pParse = pWInfo->pParse;      \/* Parsing context *\/\n+  Vdbe *v = pParse->pVdbe;             \/* VDBE under construction *\/\n+  WhereLoop *pLoop = pLevel->pWLoop;   \/* The loop being coded *\/\n+  int iCur;                            \/* Cursor for table getting the filter *\/\n+\n+  assert( pLoop!=0 );\n+  assert( v!=0 );\n+  assert( pLoop->wsFlags & WHERE_BLOOMFILTER );\n+\n+  addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);\n+  do{\n+    const SrcItem *pItem;\n+    const Table *pTab;\n+    u64 sz;\n+    sqlite3WhereExplainBloomFilter(pParse, pWInfo, pLevel);\n+    addrCont = sqlite3VdbeMakeLabel(pParse);\n+    iCur = pLevel->iTabCur;\n+    pLevel->regFilter = ++pParse->nMem;\n+\n+    \/* The Bloom filter is a Blob held in a register.  Initialize it\n+    ** to zero-filled blob of at least 80K bits, but maybe more if the\n+    ** estimated size of the table is larger.  We could actually\n+    ** measure the size of the table at run-time using OP_Count with\n+    ** P3==1 and use that value to initialize the blob.  But that makes\n+    ** testing complicated.  By basing the blob size on the value in the\n+    ** sqlite_stat1 table, testing is much easier.\n+    *\/\n+    pItem = &pWInfo->pTabList->a[pLevel->iFrom];\n+    assert( pItem!=0 );\n+    pTab = pItem->pTab;\n+    assert( pTab!=0 );\n+    sz = sqlite3LogEstToInt(pTab->nRowLogEst);\n+    if( sz<10000 ){\n+      sz = 10000;\n+    }else if( sz>10000000 ){\n+      sz = 10000000;\n+    }\n+    sqlite3VdbeAddOp2(v, OP_Blob, (int)sz, pLevel->regFilter);\n+\n+    addrTop = sqlite3VdbeAddOp1(v, OP_Rewind, iCur); VdbeCoverage(v);\n+    pWCEnd = &pWInfo->sWC.a[pWInfo->sWC.nTerm];\n+    for(pTerm=pWInfo->sWC.a; pTerm<pWCEnd; pTerm++){\n+      Expr *pExpr = pTerm->pExpr;\n+      if( (pTerm->wtFlags & TERM_VIRTUAL)==0\n+       && sqlite3ExprIsTableConstraint(pExpr, pItem)\n+      ){\n+        sqlite3ExprIfFalse(pParse, pTerm->pExpr, addrCont, SQLITE_JUMPIFNULL);\n+      }\n+    }\n+    if( pLoop->wsFlags & WHERE_IPK ){\n+      int r1 = sqlite3GetTempReg(pParse);\n+      sqlite3VdbeAddOp2(v, OP_Rowid, iCur, r1);\n+      sqlite3VdbeAddOp4Int(v, OP_FilterAdd, pLevel->regFilter, 0, r1, 1);\n+      sqlite3ReleaseTempReg(pParse, r1);\n+    }else{\n+      Index *pIdx = pLoop->u.btree.pIndex;\n+      int n = pLoop->u.btree.nEq;\n+      int r1 = sqlite3GetTempRange(pParse, n);\n+      int jj;\n+      for(jj=0; jj<n; jj++){\n+        int iCol = pIdx->aiColumn[jj];\n+        assert( pIdx->pTable==pItem->pTab );\n+        sqlite3ExprCodeGetColumnOfTable(v, pIdx->pTable, iCur, iCol,r1+jj);\n+      }\n+      sqlite3VdbeAddOp4Int(v, OP_FilterAdd, pLevel->regFilter, 0, r1, n);\n+      sqlite3ReleaseTempRange(pParse, r1, n);\n+    }\n+    sqlite3VdbeResolveLabel(v, addrCont);\n+    sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1);\n+    VdbeCoverage(v);\n+    sqlite3VdbeJumpHere(v, addrTop);\n+    pLoop->wsFlags &= ~WHERE_BLOOMFILTER;\n+    if( OptimizationDisabled(pParse->db, SQLITE_BloomPulldown) ) break;\n+    while( ++iLevel < pWInfo->nLevel ){\n+      const SrcItem *pTabItem;\n+      pLevel = &pWInfo->a[iLevel];\n+      pTabItem = &pWInfo->pTabList->a[pLevel->iFrom];\n+      if( pTabItem->fg.jointype & (JT_LEFT|JT_LTORJ) ) continue;\n+      pLoop = pLevel->pWLoop;\n+      if( NEVER(pLoop==0) ) continue;\n+      if( pLoop->prereq & notReady ) continue;\n+      if( (pLoop->wsFlags & (WHERE_BLOOMFILTER|WHERE_COLUMN_IN))\n+                 ==WHERE_BLOOMFILTER\n+      ){\n+        \/* This is a candidate for bloom-filter pull-down (early evaluation).\n+        ** The test that WHERE_COLUMN_IN is omitted is important, as we are\n+        ** not able to do early evaluation of bloom filters that make use of\n+        ** the IN operator *\/\n+        break;\n+      }\n+    }\n+  }while( iLevel < pWInfo->nLevel );\n+  sqlite3VdbeJumpHere(v, addrOnce);\n+}\n+\n+\n@@ -151596,1 +155162,1 @@\n-** by passing the pointer returned by this function to sqlite3_free().\n+** by passing the pointer returned by this function to freeIndexInfo().\n@@ -151599,1 +155165,1 @@\n-  Parse *pParse,                  \/* The parsing context *\/\n+  WhereInfo *pWInfo,              \/* The WHERE clause *\/\n@@ -151603,1 +155169,0 @@\n-  ExprList *pOrderBy,             \/* The ORDER BY clause *\/\n@@ -151608,0 +155173,1 @@\n+  Parse *pParse = pWInfo->pParse;\n@@ -151616,0 +155182,8 @@\n+  const Table *pTab;\n+  int eDistinct = 0;\n+  ExprList *pOrderBy = pWInfo->pOrderBy;\n+\n+  assert( pSrc!=0 );\n+  pTab = pSrc->pTab;\n+  assert( pTab!=0 );\n+  assert( IsVirtual(pTab) );\n@@ -151617,2 +155191,4 @@\n-  \/* Count the number of possible WHERE clause constraints referring\n-  ** to this virtual table *\/\n+  \/* Find all WHERE clause constraints referring to this virtual table.\n+  ** Mark each term with the TERM_OK flag.  Set nTerm to the number of\n+  ** terms found.\n+  *\/\n@@ -151620,0 +155196,1 @@\n+    pTerm->wtFlags &= ~TERM_OK;\n@@ -151629,0 +155206,1 @@\n+\n@@ -151630,1 +155208,19 @@\n-    assert( pTerm->u.x.leftColumn>=(-1) );\n+    assert( pTerm->u.x.leftColumn>=XN_ROWID );\n+    assert( pTerm->u.x.leftColumn<pTab->nCol );\n+\n+    \/* tag-20191211-002: WHERE-clause constraints are not useful to the\n+    ** right-hand table of a LEFT JOIN nor to the either table of a\n+    ** RIGHT JOIN.  See tag-20191211-001 for the\n+    ** equivalent restriction for ordinary tables. *\/\n+    if( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))!=0 ){\n+      testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_LEFT );\n+      testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_RIGHT );\n+      testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_LTORJ );\n+      testcase( ExprHasProperty(pTerm->pExpr, EP_OuterON) );\n+      testcase( ExprHasProperty(pTerm->pExpr, EP_InnerON) );\n+      if( !ExprHasProperty(pTerm->pExpr, EP_OuterON|EP_InnerON)\n+       || pTerm->pExpr->w.iJoin != pSrc->iCursor\n+      ){\n+        continue;\n+      }\n+    }\n@@ -151632,0 +155228,1 @@\n+    pTerm->wtFlags |= TERM_OK;\n@@ -151643,2 +155240,35 @@\n-      if( pExpr->op!=TK_COLUMN || pExpr->iTable!=pSrc->iCursor ) break;\n-      if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) break;\n+      Expr *pE2;\n+\n+      \/* Skip over constant terms in the ORDER BY clause *\/\n+      if( sqlite3ExprIsConstant(pExpr) ){\n+        continue;\n+      }\n+\n+      \/* Virtual tables are unable to deal with NULLS FIRST *\/\n+      if( pOrderBy->a[i].fg.sortFlags & KEYINFO_ORDER_BIGNULL ) break;\n+\n+      \/* First case - a direct column references without a COLLATE operator *\/\n+      if( pExpr->op==TK_COLUMN && pExpr->iTable==pSrc->iCursor ){\n+        assert( pExpr->iColumn>=XN_ROWID && pExpr->iColumn<pTab->nCol );\n+        continue;\n+      }\n+\n+      \/* 2nd case - a column reference with a COLLATE operator.  Only match\n+      ** of the COLLATE operator matches the collation of the column. *\/\n+      if( pExpr->op==TK_COLLATE\n+       && (pE2 = pExpr->pLeft)->op==TK_COLUMN\n+       && pE2->iTable==pSrc->iCursor\n+      ){\n+        const char *zColl;  \/* The collating sequence name *\/\n+        assert( !ExprHasProperty(pExpr, EP_IntValue) );\n+        assert( pExpr->u.zToken!=0 );\n+        assert( pE2->iColumn>=XN_ROWID && pE2->iColumn<pTab->nCol );\n+        pExpr->iColumn = pE2->iColumn;\n+        if( pE2->iColumn<0 ) continue;  \/* Collseq does not matter for rowid *\/\n+        zColl = sqlite3ColumnColl(&pTab->aCol[pE2->iColumn]);\n+        if( zColl==0 ) zColl = sqlite3StrBINARY;\n+        if( sqlite3_stricmp(pExpr->u.zToken, zColl)==0 ) continue;\n+      }\n+\n+      \/* No matches cause a break out of the loop *\/\n+      break;\n@@ -151646,1 +155276,1 @@\n-    if( i==n){\n+    if( i==n ){\n@@ -151648,0 +155278,5 @@\n+      if( (pWInfo->wctrlFlags & WHERE_DISTINCTBY) ){\n+        eDistinct = 2 + ((pWInfo->wctrlFlags & WHERE_SORTBYGROUP)!=0);\n+      }else if( pWInfo->wctrlFlags & WHERE_GROUPBY ){\n+        eDistinct = 1;\n+      }\n@@ -151655,1 +155290,2 @@\n-                           + sizeof(*pIdxOrderBy)*nOrderBy + sizeof(*pHidden) );\n+                           + sizeof(*pIdxOrderBy)*nOrderBy + sizeof(*pHidden)\n+                           + sizeof(sqlite3_value*)*nTerm );\n@@ -151661,1 +155297,1 @@\n-  pIdxCons = (struct sqlite3_index_constraint*)&pHidden[1];\n+  pIdxCons = (struct sqlite3_index_constraint*)&pHidden->aRhs[nTerm];\n@@ -151664,1 +155300,0 @@\n-  pIdxInfo->nOrderBy = nOrderBy;\n@@ -151670,0 +155305,2 @@\n+  pHidden->eDistinct = eDistinct;\n+  pHidden->mIn = 0;\n@@ -151672,20 +155309,1 @@\n-    if( pTerm->leftCursor != pSrc->iCursor ) continue;\n-    if( pTerm->prereqRight & mUnusable ) continue;\n-    assert( IsPowerOfTwo(pTerm->eOperator & ~WO_EQUIV) );\n-    testcase( pTerm->eOperator & WO_IN );\n-    testcase( pTerm->eOperator & WO_IS );\n-    testcase( pTerm->eOperator & WO_ISNULL );\n-    testcase( pTerm->eOperator & WO_ALL );\n-    if( (pTerm->eOperator & ~(WO_EQUIV))==0 ) continue;\n-    if( pTerm->wtFlags & TERM_VNULL ) continue;\n-\n-    \/* tag-20191211-002: WHERE-clause constraints are not useful to the\n-    ** right-hand table of a LEFT JOIN.  See tag-20191211-001 for the\n-    ** equivalent restriction for ordinary tables. *\/\n-    if( (pSrc->fg.jointype & JT_LEFT)!=0\n-     && !ExprHasProperty(pTerm->pExpr, EP_FromJoin)\n-    ){\n-      continue;\n-    }\n-    assert( (pTerm->eOperator & (WO_OR|WO_AND))==0 );\n-    assert( pTerm->u.x.leftColumn>=(-1) );\n+    if( (pTerm->wtFlags & TERM_OK)==0 ) continue;\n@@ -151695,1 +155313,6 @@\n-    if( op==WO_IN ) op = WO_EQ;\n+    if( op==WO_IN ){\n+      if( (pTerm->wtFlags & TERM_SLICE)==0 ){\n+        pHidden->mIn |= SMASKBIT32(j);\n+      }\n+      op = WO_EQ;\n+    }\n@@ -151728,0 +155351,1 @@\n+  assert( j==nTerm );\n@@ -151729,1 +155353,1 @@\n-  for(i=0; i<nOrderBy; i++){\n+  for(i=j=0; i<nOrderBy; i++){\n@@ -151731,2 +155355,7 @@\n-    pIdxOrderBy[i].iColumn = pExpr->iColumn;\n-    pIdxOrderBy[i].desc = pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;\n+    if( sqlite3ExprIsConstant(pExpr) ) continue;\n+    assert( pExpr->op==TK_COLUMN\n+         || (pExpr->op==TK_COLLATE && pExpr->pLeft->op==TK_COLUMN\n+              && pExpr->iColumn==pExpr->pLeft->iColumn) );\n+    pIdxOrderBy[j].iColumn = pExpr->iColumn;\n+    pIdxOrderBy[j].desc = pOrderBy->a[i].fg.sortFlags & KEYINFO_ORDER_DESC;\n+    j++;\n@@ -151734,0 +155363,1 @@\n+  pIdxInfo->nOrderBy = j;\n@@ -151739,0 +155369,18 @@\n+\/*\n+** Free an sqlite3_index_info structure allocated by allocateIndexInfo()\n+** and possibly modified by xBestIndex methods.\n+*\/\n+static void freeIndexInfo(sqlite3 *db, sqlite3_index_info *pIdxInfo){\n+  HiddenIndexInfo *pHidden;\n+  int i;\n+  assert( pIdxInfo!=0 );\n+  pHidden = (HiddenIndexInfo*)&pIdxInfo[1];\n+  assert( pHidden->pParse!=0 );\n+  assert( pHidden->pParse->db==db );\n+  for(i=0; i<pIdxInfo->nConstraint; i++){\n+    sqlite3ValueFree(pHidden->aRhs[i]); \/* IMP: R-14553-25174 *\/\n+    pHidden->aRhs[i] = 0;\n+  }\n+  sqlite3DbFree(db, pIdxInfo);\n+}\n+\n@@ -151760,0 +155408,1 @@\n+  pParse->db->nSchemaLock++;\n@@ -151761,0 +155410,1 @@\n+  pParse->db->nSchemaLock--;\n@@ -151814,1 +155464,1 @@\n-  assert( pRec->nField>0 && pRec->nField<=pIdx->nSampleCol );\n+  assert( pRec->nField>0 );\n@@ -151860,1 +155510,1 @@\n-  nField = pRec->nField;\n+  nField = MIN(pRec->nField, pIdx->nSample);\n@@ -152451,1 +156101,1 @@\n-    if( ExprHasProperty(pTerm->pExpr, EP_FromJoin) ) zType[2] = 'L';\n+    if( ExprHasProperty(pTerm->pExpr, EP_OuterON) ) zType[2] = 'L';\n@@ -152534,1 +156184,1 @@\n-    sqlite3DebugPrintf(\" f %05x %d-%d\", p->wsFlags, p->nLTerm,p->nSkip);\n+    sqlite3DebugPrintf(\" f %06x %d-%d\", p->wsFlags, p->nLTerm,p->nSkip);\n@@ -152536,1 +156186,1 @@\n-    sqlite3DebugPrintf(\" f %05x N %d\", p->wsFlags, p->nLTerm);\n+    sqlite3DebugPrintf(\" f %06x N %d\", p->wsFlags, p->nLTerm);\n@@ -152632,1 +156282,0 @@\n-  int i;\n@@ -152634,7 +156283,0 @@\n-  for(i=0; i<pWInfo->nLevel; i++){\n-    WhereLevel *pLevel = &pWInfo->a[i];\n-    if( pLevel->pWLoop && (pLevel->pWLoop->wsFlags & WHERE_IN_ABLE)!=0 ){\n-      assert( (pLevel->pWLoop->wsFlags & WHERE_MULTI_OR)==0 );\n-      sqlite3DbFree(db, pLevel->u.in.aInLoop);\n-    }\n-  }\n@@ -152648,0 +156290,5 @@\n+  while( pWInfo->pMemToFree ){\n+    WhereMemBlock *pNext = pWInfo->pMemToFree->pNext;\n+    sqlite3DbFreeNN(db, pWInfo->pMemToFree);\n+    pWInfo->pMemToFree = pNext;\n+  }\n@@ -152996,1 +156643,1 @@\n-  for(i=pWC->nTerm, pTerm=pWC->a; i>0; i--, pTerm++){\n+  for(i=pWC->nBase, pTerm=pWC->a; i>0; i--, pTerm++){\n@@ -152998,2 +156645,0 @@\n-    if( (pTerm->wtFlags & TERM_VIRTUAL)!=0 ) break;\n-    if( (pTerm->prereqAll & pLoop->maskSelf)==0 ) continue;\n@@ -153001,0 +156646,2 @@\n+    if( (pTerm->prereqAll & pLoop->maskSelf)==0 ) continue;\n+    if( (pTerm->wtFlags & TERM_VIRTUAL)!=0 ) continue;\n@@ -153008,0 +156655,17 @@\n+      if( pLoop->maskSelf==pTerm->prereqAll ){\n+        \/* If there are extra terms in the WHERE clause not used by an index\n+        ** that depend only on the table being scanned, and that will tend to\n+        ** cause many rows to be omitted, then mark that table as\n+        ** \"self-culling\".\n+        **\n+        ** 2022-03-24:  Self-culling only applies if either the extra terms\n+        ** are straight comparison operators that are non-true with NULL\n+        ** operand, or if the loop is not an OUTER JOIN.\n+        *\/\n+        if( (pTerm->eOperator & 0x3f)!=0\n+         || (pWC->pWInfo->pTabList->a[pLoop->iTab].fg.jointype\n+                  & (JT_LEFT|JT_LTORJ))==0\n+        ){\n+          pLoop->wsFlags |= WHERE_SELFCULL;\n+        }\n+      }\n@@ -153035,1 +156699,3 @@\n-  if( pLoop->nOut > nRow-iReduce )  pLoop->nOut = nRow - iReduce;\n+  if( pLoop->nOut > nRow-iReduce ){\n+    pLoop->nOut = nRow - iReduce;\n+  }\n@@ -153208,6 +156874,23 @@\n-    ** be used by the right table of a LEFT JOIN.  Only constraints in the\n-    ** ON clause are allowed.  See tag-20191211-002 for the vtab equivalent. *\/\n-    if( (pSrc->fg.jointype & JT_LEFT)!=0\n-     && !ExprHasProperty(pTerm->pExpr, EP_FromJoin)\n-    ){\n-      continue;\n+    ** be used by the right table of a LEFT JOIN nor by the left table of a\n+    ** RIGHT JOIN.  Only constraints in the ON clause are allowed.\n+    ** See tag-20191211-002 for the vtab equivalent.\n+    **\n+    ** 2022-06-06: See https:\/\/sqlite.org\/forum\/forumpost\/206d99a16dd9212f\n+    ** for an example of a WHERE clause constraints that may not be used on\n+    ** the right table of a RIGHT JOIN because the constraint implies a\n+    ** not-NULL condition on the left table of the RIGHT JOIN.\n+    **\n+    ** 2022-06-10: The same condition applies to termCanDriveIndex() above.\n+    ** https:\/\/sqlite.org\/forum\/forumpost\/51e6959f61\n+    *\/\n+    if( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))!=0 ){\n+      testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_LEFT );\n+      testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_RIGHT );\n+      testcase( (pSrc->fg.jointype & (JT_LEFT|JT_LTORJ|JT_RIGHT))==JT_LTORJ );\n+      testcase( ExprHasProperty(pTerm->pExpr, EP_OuterON) )\n+      testcase( ExprHasProperty(pTerm->pExpr, EP_InnerON) );\n+      if( !ExprHasProperty(pTerm->pExpr, EP_OuterON|EP_InnerON)\n+       || pTerm->pExpr->w.iJoin != pSrc->iCursor\n+      ){\n+        continue;\n+      }\n@@ -153565,1 +157248,1 @@\n-  int isLeft,           \/* True if iTab is the right table of a LEFT JOIN *\/\n+  u8 jointype,          \/* The JT_* flags on the join *\/\n@@ -153571,1 +157254,4 @@\n-  Parse *pParse = pWC->pWInfo->pParse;\n+  Parse *pParse;\n+\n+  if( jointype & JT_LTORJ ) return 0;\n+  pParse = pWC->pWInfo->pParse;\n@@ -153573,1 +157259,1 @@\n-    if( !whereUsablePartialIndex(iTab,isLeft,pWC,pWhere->pLeft) ) return 0;\n+    if( !whereUsablePartialIndex(iTab,jointype,pWC,pWhere->pLeft) ) return 0;\n@@ -153580,2 +157266,2 @@\n-    if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)\n-     && (isLeft==0 || ExprHasProperty(pExpr, EP_FromJoin))\n+    if( (!ExprHasProperty(pExpr, EP_OuterON) || pExpr->w.iJoin==iTab)\n+     && ((jointype & JT_OUTER)==0 || ExprHasProperty(pExpr, EP_OuterON))\n@@ -153690,1 +157376,1 @@\n-   && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0\n+   && (pWInfo->wctrlFlags & (WHERE_RIGHT_JOIN|WHERE_OR_SUBCLAUSE))==0\n@@ -153697,0 +157383,1 @@\n+   && (pSrc->fg.jointype & JT_RIGHT)==0 \/* Not the right tab of a RIGHT JOIN *\/\n@@ -153746,1 +157433,0 @@\n-    int isLeft = (pSrc->fg.jointype & JT_OUTER)!=0;\n@@ -153748,1 +157434,1 @@\n-     && !whereUsablePartialIndex(pSrc->iCursor, isLeft, pWC,\n+     && !whereUsablePartialIndex(pSrc->iCursor, pSrc->fg.jointype, pWC,\n@@ -153856,1 +157542,8 @@\n-        rc = whereLoopInsert(pBuilder, pNew);\n+        if( (pSrc->fg.jointype & JT_RIGHT)!=0 && pProbe->aColExpr ){\n+          \/* Do not do an SCAN of a index-on-expression in a RIGHT JOIN\n+          ** because the cursor used to access the index might not be\n+          ** positioned to the correct row during the right-join no-match\n+          ** loop. *\/\n+        }else{\n+          rc = whereLoopInsert(pBuilder, pNew);\n+        }\n@@ -153882,0 +157575,9 @@\n+\/*\n+** Return true if pTerm is a virtual table LIMIT or OFFSET term.\n+*\/\n+static int isLimitTerm(WhereTerm *pTerm){\n+  assert( pTerm->eOperator==WO_AUX || pTerm->eMatchOp==0 );\n+  return pTerm->eMatchOp>=SQLITE_INDEX_CONSTRAINT_LIMIT\n+      && pTerm->eMatchOp<=SQLITE_INDEX_CONSTRAINT_OFFSET;\n+}\n+\n@@ -153909,1 +157611,2 @@\n-  int *pbIn                       \/* OUT: True if plan uses an IN(...) op *\/\n+  int *pbIn,                      \/* OUT: True if plan uses an IN(...) op *\/\n+  int *pbRetryLimit               \/* OUT: Retry without LIMIT\/OFFSET *\/\n@@ -153912,0 +157615,1 @@\n+  HiddenIndexInfo *pHidden = (HiddenIndexInfo*)&pIdxInfo[1];\n@@ -153934,0 +157638,1 @@\n+     && (pbRetryLimit || !isLimitTerm(pTerm))\n@@ -153949,0 +157654,1 @@\n+  pHidden->mHandleIn = 0;\n@@ -153966,2 +157672,2 @@\n-  for(i=0; i<nConstraint; i++) pNew->aLTerm[i] = 0;\n-  pNew->u.vtab.omitMask = 0;\n+  memset(pNew->aLTerm, 0, sizeof(pNew->aLTerm[0])*nConstraint );\n+  memset(&pNew->u.vtab, 0, sizeof(pNew->u.vtab));\n@@ -154001,0 +157707,3 @@\n+        if( pTerm->eMatchOp==SQLITE_INDEX_CONSTRAINT_OFFSET ){\n+          pNew->u.vtab.bOmitOffset = 1;\n+        }\n@@ -154002,1 +157711,3 @@\n-      if( (pTerm->eOperator & WO_IN)!=0 ){\n+      if( SMASKBIT32(i) & pHidden->mHandleIn ){\n+        pNew->u.vtab.mHandleIn |= MASKBIT32(iTerm);\n+      }else if( (pTerm->eOperator & WO_IN)!=0 ){\n@@ -154012,0 +157723,16 @@\n+\n+      assert( pbRetryLimit || !isLimitTerm(pTerm) );\n+      if( isLimitTerm(pTerm) && *pbIn ){\n+        \/* If there is an IN(...) term handled as an == (separate call to\n+        ** xFilter for each value on the RHS of the IN) and a LIMIT or\n+        ** OFFSET term handled as well, the plan is unusable. Set output\n+        ** variable *pbRetryLimit to true to tell the caller to retry with\n+        ** LIMIT and OFFSET disabled. *\/\n+        if( pIdxInfo->needToFreeIdxStr ){\n+          sqlite3_free(pIdxInfo->idxStr);\n+          pIdxInfo->idxStr = 0;\n+          pIdxInfo->needToFreeIdxStr = 0;\n+        }\n+        *pbRetryLimit = 1;\n+        return SQLITE_OK;\n+      }\n@@ -154056,5 +157783,13 @@\n-** If this function is invoked from within an xBestIndex() callback, it\n-** returns a pointer to a buffer containing the name of the collation\n-** sequence associated with element iCons of the sqlite3_index_info.aConstraint\n-** array. Or, if iCons is out of range or there is no active xBestIndex\n-** call, return NULL.\n+** Return the collating sequence for a constraint passed into xBestIndex.\n+**\n+** pIdxInfo must be an sqlite3_index_info structure passed into xBestIndex.\n+** This routine depends on there being a HiddenIndexInfo structure immediately\n+** following the sqlite3_index_info structure.\n+**\n+** Return a pointer to the collation name:\n+**\n+**    1. If there is an explicit COLLATE operator on the constaint, return it.\n+**\n+**    2. Else, if the column has an alternative collation, return that.\n+**\n+**    3. Otherwise, return \"BINARY\".\n@@ -154077,0 +157812,91 @@\n+\/*\n+** Return true if constraint iCons is really an IN(...) constraint, or\n+** false otherwise. If iCons is an IN(...) constraint, set (if bHandle!=0)\n+** or clear (if bHandle==0) the flag to handle it using an iterator.\n+*\/\n+SQLITE_API int sqlite3_vtab_in(sqlite3_index_info *pIdxInfo, int iCons, int bHandle){\n+  HiddenIndexInfo *pHidden = (HiddenIndexInfo*)&pIdxInfo[1];\n+  u32 m = SMASKBIT32(iCons);\n+  if( m & pHidden->mIn ){\n+    if( bHandle==0 ){\n+      pHidden->mHandleIn &= ~m;\n+    }else if( bHandle>0 ){\n+      pHidden->mHandleIn |= m;\n+    }\n+    return 1;\n+  }\n+  return 0;\n+}\n+\n+\/*\n+** This interface is callable from within the xBestIndex callback only.\n+**\n+** If possible, set (*ppVal) to point to an object containing the value\n+** on the right-hand-side of constraint iCons.\n+*\/\n+SQLITE_API int sqlite3_vtab_rhs_value(\n+  sqlite3_index_info *pIdxInfo,   \/* Copy of first argument to xBestIndex *\/\n+  int iCons,                      \/* Constraint for which RHS is wanted *\/\n+  sqlite3_value **ppVal           \/* Write value extracted here *\/\n+){\n+  HiddenIndexInfo *pH = (HiddenIndexInfo*)&pIdxInfo[1];\n+  sqlite3_value *pVal = 0;\n+  int rc = SQLITE_OK;\n+  if( iCons<0 || iCons>=pIdxInfo->nConstraint ){\n+    rc = SQLITE_MISUSE; \/* EV: R-30545-25046 *\/\n+  }else{\n+    if( pH->aRhs[iCons]==0 ){\n+      WhereTerm *pTerm = &pH->pWC->a[pIdxInfo->aConstraint[iCons].iTermOffset];\n+      rc = sqlite3ValueFromExpr(\n+          pH->pParse->db, pTerm->pExpr->pRight, ENC(pH->pParse->db),\n+          SQLITE_AFF_BLOB, &pH->aRhs[iCons]\n+      );\n+      testcase( rc!=SQLITE_OK );\n+    }\n+    pVal = pH->aRhs[iCons];\n+  }\n+  *ppVal = pVal;\n+\n+  if( rc==SQLITE_OK && pVal==0 ){  \/* IMP: R-19933-32160 *\/\n+    rc = SQLITE_NOTFOUND;          \/* IMP: R-36424-56542 *\/\n+  }\n+\n+  return rc;\n+}\n+\n+\/*\n+** Return true if ORDER BY clause may be handled as DISTINCT.\n+*\/\n+SQLITE_API int sqlite3_vtab_distinct(sqlite3_index_info *pIdxInfo){\n+  HiddenIndexInfo *pHidden = (HiddenIndexInfo*)&pIdxInfo[1];\n+  assert( pHidden->eDistinct>=0 && pHidden->eDistinct<=3 );\n+  return pHidden->eDistinct;\n+}\n+\n+#if (defined(SQLITE_ENABLE_DBPAGE_VTAB) || defined(SQLITE_TEST)) \\\n+    && !defined(SQLITE_OMIT_VIRTUALTABLE)\n+\/*\n+** Cause the prepared statement that is associated with a call to\n+** xBestIndex to potentiall use all schemas.  If the statement being\n+** prepared is read-only, then just start read transactions on all\n+** schemas.  But if this is a write operation, start writes on all\n+** schemas.\n+**\n+** This is used by the (built-in) sqlite_dbpage virtual table.\n+*\/\n+SQLITE_PRIVATE void sqlite3VtabUsesAllSchemas(sqlite3_index_info *pIdxInfo){\n+  HiddenIndexInfo *pHidden = (HiddenIndexInfo*)&pIdxInfo[1];\n+  Parse *pParse = pHidden->pParse;\n+  int nDb = pParse->db->nDb;\n+  int i;\n+  for(i=0; i<nDb; i++){\n+    sqlite3CodeVerifySchema(pParse, i);\n+  }\n+  if( pParse->writeMask ){\n+    for(i=0; i<nDb; i++){\n+      sqlite3BeginWriteOperation(pParse, 0, i);\n+    }\n+  }\n+}\n+#endif\n+\n@@ -154118,0 +157944,1 @@\n+  int bRetry = 0;              \/* True to retry with LIMIT\/OFFSET disabled *\/\n@@ -154126,2 +157953,1 @@\n-  p = allocateIndexInfo(pParse, pWC, mUnusable, pSrc, pBuilder->pOrderBy,\n-      &mNoOmit);\n+  p = allocateIndexInfo(pWInfo, pWC, mUnusable, pSrc, &mNoOmit);\n@@ -154135,1 +157961,1 @@\n-    sqlite3DbFree(pParse->db, p);\n+    freeIndexInfo(pParse->db, p);\n@@ -154142,1 +157968,9 @@\n-  rc = whereLoopAddVirtualOne(pBuilder, mPrereq, ALLBITS, 0, p, mNoOmit, &bIn);\n+  rc = whereLoopAddVirtualOne(\n+      pBuilder, mPrereq, ALLBITS, 0, p, mNoOmit, &bIn, &bRetry\n+  );\n+  if( bRetry ){\n+    assert( rc==SQLITE_OK );\n+    rc = whereLoopAddVirtualOne(\n+        pBuilder, mPrereq, ALLBITS, 0, p, mNoOmit, &bIn, 0\n+    );\n+  }\n@@ -154160,1 +157994,1 @@\n-          pBuilder, mPrereq, ALLBITS, WO_IN, p, mNoOmit, &bIn);\n+          pBuilder, mPrereq, ALLBITS, WO_IN, p, mNoOmit, &bIn, 0);\n@@ -154187,1 +158021,1 @@\n-          pBuilder, mPrereq, mNext|mPrereq, 0, p, mNoOmit, &bIn);\n+          pBuilder, mPrereq, mNext|mPrereq, 0, p, mNoOmit, &bIn, 0);\n@@ -154200,1 +158034,1 @@\n-          pBuilder, mPrereq, mPrereq, 0, p, mNoOmit, &bIn);\n+          pBuilder, mPrereq, mPrereq, 0, p, mNoOmit, &bIn, 0);\n@@ -154210,1 +158044,1 @@\n-          pBuilder, mPrereq, mPrereq, WO_IN, p, mNoOmit, &bIn);\n+          pBuilder, mPrereq, mPrereq, WO_IN, p, mNoOmit, &bIn, 0);\n@@ -154215,1 +158049,1 @@\n-  sqlite3DbFreeNN(pParse->db, p);\n+  freeIndexInfo(pParse->db, p);\n@@ -154248,0 +158082,3 @@\n+  \/* The multi-index OR optimization does not work for RIGHT and FULL JOIN *\/\n+  if( pItem->fg.jointype & JT_RIGHT ) return SQLITE_OK;\n+\n@@ -154259,1 +158096,0 @@\n-      sSubBuild.pOrderBy = 0;\n@@ -154271,0 +158107,1 @@\n+          tempWC.nBase = 1;\n@@ -154361,0 +158198,2 @@\n+  int bFirstPastRJ = 0;\n+  int hasRightJoin = 0;\n@@ -154363,0 +158202,1 @@\n+\n@@ -154372,5 +158212,17 @@\n-    if( (pItem->fg.jointype & (JT_LEFT|JT_CROSS))!=0 ){\n-      \/* This condition is true when pItem is the FROM clause term on the\n-      ** right-hand-side of a LEFT or CROSS JOIN.  *\/\n-      mPrereq = mPrior;\n-    }else{\n+    if( bFirstPastRJ\n+     || (pItem->fg.jointype & (JT_OUTER|JT_CROSS|JT_LTORJ))!=0\n+    ){\n+      \/* Add prerequisites to prevent reordering of FROM clause terms\n+      ** across CROSS joins and outer joins.  The bFirstPastRJ boolean\n+      ** prevents the right operand of a RIGHT JOIN from being swapped with\n+      ** other elements even further to the right.\n+      **\n+      ** The JT_LTORJ case and the hasRightJoin flag work together to\n+      ** prevent FROM-clause terms from moving from the right side of\n+      ** a LEFT JOIN over to the left side of that join if the LEFT JOIN\n+      ** is itself on the left side of a RIGHT JOIN.\n+      *\/\n+      if( pItem->fg.jointype & JT_LTORJ ) hasRightJoin = 1;\n+      mPrereq |= mPrior;\n+      bFirstPastRJ = (pItem->fg.jointype & JT_RIGHT)!=0;\n+    }else if( !hasRightJoin ){\n@@ -154383,1 +158235,1 @@\n-        if( mUnusable || (p->fg.jointype & (JT_LEFT|JT_CROSS)) ){\n+        if( mUnusable || (p->fg.jointype & (JT_OUTER|JT_CROSS)) ){\n@@ -154508,1 +158360,3 @@\n-      if( pLoop->u.vtab.isOrdered && (wctrlFlags & WHERE_DISTINCTBY)==0 ){\n+      if( pLoop->u.vtab.isOrdered\n+       && ((wctrlFlags&(WHERE_DISTINCTBY|WHERE_SORTBYGROUP))!=WHERE_DISTINCTBY)\n+      ){\n@@ -154686,1 +158540,3 @@\n-            if( (rev ^ revIdx)!=(pOrderBy->a[i].sortFlags&KEYINFO_ORDER_DESC) ){\n+            if( (rev ^ revIdx)\n+                           != (pOrderBy->a[i].fg.sortFlags&KEYINFO_ORDER_DESC)\n+            ){\n@@ -154690,1 +158546,1 @@\n-            rev = revIdx ^ (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC);\n+            rev = revIdx ^ (pOrderBy->a[i].fg.sortFlags & KEYINFO_ORDER_DESC);\n@@ -154695,1 +158551,1 @@\n-        if( isMatch && (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL) ){\n+        if( isMatch && (pOrderBy->a[i].fg.sortFlags & KEYINFO_ORDER_BIGNULL) ){\n@@ -154775,1 +158631,1 @@\n-  assert( pWInfo->wctrlFlags & WHERE_GROUPBY );\n+  assert( pWInfo->wctrlFlags & (WHERE_GROUPBY|WHERE_DISTINCTBY) );\n@@ -155176,0 +159032,1 @@\n+    pWInfo->nOBSat = pFrom->isOrdered;\n@@ -155181,1 +159038,0 @@\n-      pWInfo->nOBSat = pFrom->isOrdered;\n@@ -155260,1 +159116,5 @@\n-  if( pItem->fg.isIndexedBy ) return 0;\n+  if( pItem->fg.isIndexedBy || pItem->fg.notIndexed ){\n+    testcase( pItem->fg.isIndexedBy );\n+    testcase( pItem->fg.notIndexed );\n+    return 0;\n+  }\n@@ -155378,0 +159238,144 @@\n+\/* Attempt to omit tables from a join that do not affect the result.\n+** For a table to not affect the result, the following must be true:\n+**\n+**   1) The query must not be an aggregate.\n+**   2) The table must be the RHS of a LEFT JOIN.\n+**   3) Either the query must be DISTINCT, or else the ON or USING clause\n+**      must contain a constraint that limits the scan of the table to\n+**      at most a single row.\n+**   4) The table must not be referenced by any part of the query apart\n+**      from its own USING or ON clause.\n+**\n+** For example, given:\n+**\n+**     CREATE TABLE t1(ipk INTEGER PRIMARY KEY, v1);\n+**     CREATE TABLE t2(ipk INTEGER PRIMARY KEY, v2);\n+**     CREATE TABLE t3(ipk INTEGER PRIMARY KEY, v3);\n+**\n+** then table t2 can be omitted from the following:\n+**\n+**     SELECT v1, v3 FROM t1\n+**       LEFT JOIN t2 ON (t1.ipk=t2.ipk)\n+**       LEFT JOIN t3 ON (t1.ipk=t3.ipk)\n+**\n+** or from:\n+**\n+**     SELECT DISTINCT v1, v3 FROM t1\n+**       LEFT JOIN t2\n+**       LEFT JOIN t3 ON (t1.ipk=t3.ipk)\n+*\/\n+static SQLITE_NOINLINE Bitmask whereOmitNoopJoin(\n+  WhereInfo *pWInfo,\n+  Bitmask notReady\n+){\n+  int i;\n+  Bitmask tabUsed;\n+\n+  \/* Preconditions checked by the caller *\/\n+  assert( pWInfo->nLevel>=2 );\n+  assert( OptimizationEnabled(pWInfo->pParse->db, SQLITE_OmitNoopJoin) );\n+\n+  \/* These two preconditions checked by the caller combine to guarantee\n+  ** condition (1) of the header comment *\/\n+  assert( pWInfo->pResultSet!=0 );\n+  assert( 0==(pWInfo->wctrlFlags & WHERE_AGG_DISTINCT) );\n+\n+  tabUsed = sqlite3WhereExprListUsage(&pWInfo->sMaskSet, pWInfo->pResultSet);\n+  if( pWInfo->pOrderBy ){\n+    tabUsed |= sqlite3WhereExprListUsage(&pWInfo->sMaskSet, pWInfo->pOrderBy);\n+  }\n+  for(i=pWInfo->nLevel-1; i>=1; i--){\n+    WhereTerm *pTerm, *pEnd;\n+    SrcItem *pItem;\n+    WhereLoop *pLoop;\n+    pLoop = pWInfo->a[i].pWLoop;\n+    pItem = &pWInfo->pTabList->a[pLoop->iTab];\n+    if( (pItem->fg.jointype & (JT_LEFT|JT_RIGHT))!=JT_LEFT ) continue;\n+    if( (pWInfo->wctrlFlags & WHERE_WANT_DISTINCT)==0\n+     && (pLoop->wsFlags & WHERE_ONEROW)==0\n+    ){\n+      continue;\n+    }\n+    if( (tabUsed & pLoop->maskSelf)!=0 ) continue;\n+    pEnd = pWInfo->sWC.a + pWInfo->sWC.nTerm;\n+    for(pTerm=pWInfo->sWC.a; pTerm<pEnd; pTerm++){\n+      if( (pTerm->prereqAll & pLoop->maskSelf)!=0 ){\n+        if( !ExprHasProperty(pTerm->pExpr, EP_OuterON)\n+         || pTerm->pExpr->w.iJoin!=pItem->iCursor\n+        ){\n+          break;\n+        }\n+      }\n+    }\n+    if( pTerm<pEnd ) continue;\n+    WHERETRACE(0xffff, (\"-> drop loop %c not used\\n\", pLoop->cId));\n+    notReady &= ~pLoop->maskSelf;\n+    for(pTerm=pWInfo->sWC.a; pTerm<pEnd; pTerm++){\n+      if( (pTerm->prereqAll & pLoop->maskSelf)!=0 ){\n+        pTerm->wtFlags |= TERM_CODED;\n+      }\n+    }\n+    if( i!=pWInfo->nLevel-1 ){\n+      int nByte = (pWInfo->nLevel-1-i) * sizeof(WhereLevel);\n+      memmove(&pWInfo->a[i], &pWInfo->a[i+1], nByte);\n+    }\n+    pWInfo->nLevel--;\n+    assert( pWInfo->nLevel>0 );\n+  }\n+  return notReady;\n+}\n+\n+\/*\n+** Check to see if there are any SEARCH loops that might benefit from\n+** using a Bloom filter.  Consider a Bloom filter if:\n+**\n+**   (1)  The SEARCH happens more than N times where N is the number\n+**        of rows in the table that is being considered for the Bloom\n+**        filter.\n+**   (2)  Some searches are expected to find zero rows.  (This is determined\n+**        by the WHERE_SELFCULL flag on the term.)\n+**   (3)  Bloom-filter processing is not disabled.  (Checked by the\n+**        caller.)\n+**   (4)  The size of the table being searched is known by ANALYZE.\n+**\n+** This block of code merely checks to see if a Bloom filter would be\n+** appropriate, and if so sets the WHERE_BLOOMFILTER flag on the\n+** WhereLoop.  The implementation of the Bloom filter comes further\n+** down where the code for each WhereLoop is generated.\n+*\/\n+static SQLITE_NOINLINE void whereCheckIfBloomFilterIsUseful(\n+  const WhereInfo *pWInfo\n+){\n+  int i;\n+  LogEst nSearch;\n+\n+  assert( pWInfo->nLevel>=2 );\n+  assert( OptimizationEnabled(pWInfo->pParse->db, SQLITE_BloomFilter) );\n+  nSearch = pWInfo->a[0].pWLoop->nOut;\n+  for(i=1; i<pWInfo->nLevel; i++){\n+    WhereLoop *pLoop = pWInfo->a[i].pWLoop;\n+    const unsigned int reqFlags = (WHERE_SELFCULL|WHERE_COLUMN_EQ);\n+    if( (pLoop->wsFlags & reqFlags)==reqFlags\n+     \/* vvvvvv--- Always the case if WHERE_COLUMN_EQ is defined *\/\n+     && ALWAYS((pLoop->wsFlags & (WHERE_IPK|WHERE_INDEXED))!=0)\n+    ){\n+      SrcItem *pItem = &pWInfo->pTabList->a[pLoop->iTab];\n+      Table *pTab = pItem->pTab;\n+      pTab->tabFlags |= TF_StatsUsed;\n+      if( nSearch > pTab->nRowLogEst\n+       && (pTab->tabFlags & TF_HasStat1)!=0\n+      ){\n+        testcase( pItem->fg.jointype & JT_LEFT );\n+        pLoop->wsFlags |= WHERE_BLOOMFILTER;\n+        pLoop->wsFlags &= ~WHERE_IDX_ONLY;\n+        WHERETRACE(0xffff, (\n+           \"-> use Bloom-filter on loop %c because there are ~%.1e \"\n+           \"lookups into %s which has only ~%.1e rows\\n\",\n+           pLoop->cId, (double)sqlite3LogEstToInt(nSearch), pTab->zName,\n+           (double)sqlite3LogEstToInt(pTab->nRowLogEst)));\n+      }\n+    }\n+    nSearch += pLoop->nOut;\n+  }\n+}\n+\n@@ -155472,0 +159476,1 @@\n+  Select *pLimit,         \/* Use this LIMIT\/OFFSET clause, if any *\/\n@@ -155506,7 +159511,0 @@\n-  sWLB.pOrderBy = pOrderBy;\n-\n-  \/* Disable the DISTINCT optimization if SQLITE_DistinctOpt is set via\n-  ** sqlite3_test_ctrl(SQLITE_TESTCTRL_OPTIMIZATIONS,...) *\/\n-  if( OptimizationDisabled(db, SQLITE_DistinctOpt) ){\n-    wctrlFlags &= ~WHERE_WANT_DISTINCT;\n-  }\n@@ -155537,1 +159535,1 @@\n-  nByteWInfo = ROUND8(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));\n+  nByteWInfo = ROUND8P(sizeof(WhereInfo)+(nTabList-1)*sizeof(WhereLevel));\n@@ -155555,0 +159553,3 @@\n+#ifndef SQLITE_OMIT_VIRTUALTABLE\n+  pWInfo->pLimit = pLimit;\n+#endif\n@@ -155560,0 +159561,4 @@\n+  pMaskSet->n = 0;\n+  pMaskSet->ix[0] = -99; \/* Initialize ix[0] to a value that can never be\n+                         ** a valid cursor number, to avoid an initial\n+                         ** test for pMaskSet->n==0 in sqlite3WhereGetMask() *\/\n@@ -155572,1 +159577,0 @@\n-  initMaskSet(pMaskSet);\n@@ -155580,1 +159584,3 @@\n-    if( wctrlFlags & WHERE_WANT_DISTINCT ){\n+    if( (wctrlFlags & WHERE_WANT_DISTINCT)!=0\n+     && OptimizationEnabled(db, SQLITE_DistinctOpt)\n+    ){\n@@ -155618,1 +159624,2 @@\n-  if( db->mallocFailed ) goto whereBeginError;\n+  sqlite3WhereAddLimit(&pWInfo->sWC, pLimit);\n+  if( pParse->nErr ) goto whereBeginError;\n@@ -155631,1 +159638,1 @@\n-  for(ii=0; ii<sWLB.pWC->nTerm; ii++){\n+  for(ii=0; ii<sWLB.pWC->nBase; ii++){\n@@ -155641,1 +159648,6 @@\n-    if( isDistinctRedundant(pParse, pTabList, &pWInfo->sWC, pResultSet) ){\n+    if( OptimizationDisabled(db, SQLITE_DistinctOpt) ){\n+      \/* Disable the DISTINCT optimization if SQLITE_DistinctOpt is set via\n+      ** sqlite3_test_ctrl(SQLITE_TESTCTRL_OPTIMIZATIONS,...) *\/\n+      wctrlFlags &= ~WHERE_WANT_DISTINCT;\n+      pWInfo->wctrlFlags &= ~WHERE_WANT_DISTINCT;\n+    }else if( isDistinctRedundant(pParse, pTabList, &pWInfo->sWC, pResultSet) ){\n@@ -155712,1 +159724,1 @@\n-  if( pParse->nErr || db->mallocFailed ){\n+  if( pParse->nErr ){\n@@ -155715,0 +159727,1 @@\n+  assert( db->mallocFailed==0 );\n@@ -155742,18 +159755,2 @@\n-  \/* Attempt to omit tables from the join that do not affect the result.\n-  ** For a table to not affect the result, the following must be true:\n-  **\n-  **   1) The query must not be an aggregate.\n-  **   2) The table must be the RHS of a LEFT JOIN.\n-  **   3) Either the query must be DISTINCT, or else the ON or USING clause\n-  **      must contain a constraint that limits the scan of the table to\n-  **      at most a single row.\n-  **   4) The table must not be referenced by any part of the query apart\n-  **      from its own USING or ON clause.\n-  **\n-  ** For example, given:\n-  **\n-  **     CREATE TABLE t1(ipk INTEGER PRIMARY KEY, v1);\n-  **     CREATE TABLE t2(ipk INTEGER PRIMARY KEY, v2);\n-  **     CREATE TABLE t3(ipk INTEGER PRIMARY KEY, v3);\n-  **\n-  ** then table t2 can be omitted from the following:\n+  \/* Attempt to omit tables from a join that do not affect the result.\n+  ** See the comment on whereOmitNoopJoin() for further information.\n@@ -155761,9 +159758,6 @@\n-  **     SELECT v1, v3 FROM t1\n-  **       LEFT JOIN t2 ON (t1.ipk=t2.ipk)\n-  **       LEFT JOIN t3 ON (t1.ipk=t3.ipk)\n-  **\n-  ** or from:\n-  **\n-  **     SELECT DISTINCT v1, v3 FROM t1\n-  **       LEFT JOIN t2\n-  **       LEFT JOIN t3 ON (t1.ipk=t3.ipk)\n+  ** This query optimization is factored out into a separate \"no-inline\"\n+  ** procedure to keep the sqlite3WhereBegin() procedure from becoming\n+  ** too large.  If sqlite3WhereBegin() becomes too large, that prevents\n+  ** some C-compiler optimizers from in-lining the\n+  ** sqlite3WhereCodeOneLoopStart() procedure, and it is important to\n+  ** in-line sqlite3WhereCodeOneLoopStart() for performance reasons.\n@@ -155777,42 +159771,12 @@\n-    int i;\n-    Bitmask tabUsed = sqlite3WhereExprListUsage(pMaskSet, pResultSet);\n-    if( sWLB.pOrderBy ){\n-      tabUsed |= sqlite3WhereExprListUsage(pMaskSet, sWLB.pOrderBy);\n-    }\n-    for(i=pWInfo->nLevel-1; i>=1; i--){\n-      WhereTerm *pTerm, *pEnd;\n-      SrcItem *pItem;\n-      pLoop = pWInfo->a[i].pWLoop;\n-      pItem = &pWInfo->pTabList->a[pLoop->iTab];\n-      if( (pItem->fg.jointype & JT_LEFT)==0 ) continue;\n-      if( (wctrlFlags & WHERE_WANT_DISTINCT)==0\n-       && (pLoop->wsFlags & WHERE_ONEROW)==0\n-      ){\n-        continue;\n-      }\n-      if( (tabUsed & pLoop->maskSelf)!=0 ) continue;\n-      pEnd = sWLB.pWC->a + sWLB.pWC->nTerm;\n-      for(pTerm=sWLB.pWC->a; pTerm<pEnd; pTerm++){\n-        if( (pTerm->prereqAll & pLoop->maskSelf)!=0 ){\n-          if( !ExprHasProperty(pTerm->pExpr, EP_FromJoin)\n-           || pTerm->pExpr->iRightJoinTable!=pItem->iCursor\n-          ){\n-            break;\n-          }\n-        }\n-      }\n-      if( pTerm<pEnd ) continue;\n-      WHERETRACE(0xffff, (\"-> drop loop %c not used\\n\", pLoop->cId));\n-      notReady &= ~pLoop->maskSelf;\n-      for(pTerm=sWLB.pWC->a; pTerm<pEnd; pTerm++){\n-        if( (pTerm->prereqAll & pLoop->maskSelf)!=0 ){\n-          pTerm->wtFlags |= TERM_CODED;\n-        }\n-      }\n-      if( i!=pWInfo->nLevel-1 ){\n-        int nByte = (pWInfo->nLevel-1-i) * sizeof(WhereLevel);\n-        memmove(&pWInfo->a[i], &pWInfo->a[i+1], nByte);\n-      }\n-      pWInfo->nLevel--;\n-      nTabList--;\n-    }\n+    notReady = whereOmitNoopJoin(pWInfo, notReady);\n+    nTabList = pWInfo->nLevel;\n+    assert( nTabList>0 );\n+  }\n+\n+  \/* Check to see if there are any SEARCH loops that might benefit from\n+  ** using a Bloom filter.\n+  *\/\n+  if( pWInfo->nLevel>=2\n+   && OptimizationEnabled(db, SQLITE_BloomFilter)\n+  ){\n+    whereCheckIfBloomFilterIsUseful(pWInfo);\n@@ -155820,0 +159784,1 @@\n+\n@@ -155892,2 +159857,4 @@\n-    if( (pLoop->wsFlags & WHERE_IDX_ONLY)==0\n-         && (wctrlFlags & WHERE_OR_SUBCLAUSE)==0 ){\n+    if( ((pLoop->wsFlags & WHERE_IDX_ONLY)==0\n+         && (wctrlFlags & WHERE_OR_SUBCLAUSE)==0)\n+     || (pTabItem->fg.jointype & (JT_LTORJ|JT_RIGHT))!=0\n+    ){\n@@ -155906,0 +159873,1 @@\n+       && (pLoop->wsFlags & (WHERE_AUTO_INDEX|WHERE_BLOOMFILTER))==0\n@@ -155961,0 +159929,1 @@\n+      assert( pIx!=0 );\n@@ -155994,0 +159963,31 @@\n+    if( (pTabItem->fg.jointype & JT_RIGHT)!=0\n+     && (pLevel->pRJ = sqlite3WhereMalloc(pWInfo, sizeof(WhereRightJoin)))!=0\n+    ){\n+      WhereRightJoin *pRJ = pLevel->pRJ;\n+      pRJ->iMatch = pParse->nTab++;\n+      pRJ->regBloom = ++pParse->nMem;\n+      sqlite3VdbeAddOp2(v, OP_Blob, 65536, pRJ->regBloom);\n+      pRJ->regReturn = ++pParse->nMem;\n+      sqlite3VdbeAddOp2(v, OP_Null, 0, pRJ->regReturn);\n+      assert( pTab==pTabItem->pTab );\n+      if( HasRowid(pTab) ){\n+        KeyInfo *pInfo;\n+        sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pRJ->iMatch, 1);\n+        pInfo = sqlite3KeyInfoAlloc(pParse->db, 1, 0);\n+        if( pInfo ){\n+          pInfo->aColl[0] = 0;\n+          pInfo->aSortFlags[0] = 0;\n+          sqlite3VdbeAppendP4(v, pInfo, P4_KEYINFO);\n+        }\n+      }else{\n+        Index *pPk = sqlite3PrimaryKeyIndex(pTab);\n+        sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pRJ->iMatch, pPk->nKeyCol);\n+        sqlite3VdbeSetP4KeyInfo(pParse, pPk);\n+      }\n+      pLoop->wsFlags &= ~WHERE_IDX_ONLY;\n+      \/* The nature of RIGHT JOIN processing is such that it messes up\n+      ** the output order.  So omit any ORDER BY\/GROUP BY elimination\n+      ** optimizations.  We need to do an actual sort for RIGHT JOIN. *\/\n+      pWInfo->nOBSat = 0;\n+      pWInfo->eDistinct = WHERE_DISTINCT_UNORDERED;\n+    }\n@@ -156005,0 +160005,1 @@\n+    SrcItem *pSrc;\n@@ -156008,0 +160009,12 @@\n+    pSrc = &pTabList->a[pLevel->iFrom];\n+    if( pSrc->fg.isMaterialized ){\n+      if( pSrc->fg.isCorrelated ){\n+        sqlite3VdbeAddOp2(v, OP_Gosub, pSrc->regReturn, pSrc->addrFillSub);\n+      }else{\n+        int iOnce = sqlite3VdbeAddOp0(v, OP_Once);  VdbeCoverage(v);\n+        sqlite3VdbeAddOp2(v, OP_Gosub, pSrc->regReturn, pSrc->addrFillSub);\n+        sqlite3VdbeJumpHere(v, iOnce);\n+      }\n+    }\n+    if( (wsFlags & (WHERE_AUTO_INDEX|WHERE_BLOOMFILTER))!=0 ){\n+      if( (wsFlags & WHERE_AUTO_INDEX)!=0 ){\n@@ -156009,3 +160022,6 @@\n-    if( (pLevel->pWLoop->wsFlags & WHERE_AUTO_INDEX)!=0 ){\n-      constructAutomaticIndex(pParse, &pWInfo->sWC,\n-                &pTabList->a[pLevel->iFrom], notReady, pLevel);\n+        constructAutomaticIndex(pParse, &pWInfo->sWC,\n+                  &pTabList->a[pLevel->iFrom], notReady, pLevel);\n+#endif\n+      }else{\n+        sqlite3ConstructBloomFilter(pWInfo, ii, pLevel, notReady);\n+      }\n@@ -156014,1 +160030,0 @@\n-#endif\n@@ -156062,0 +160077,20 @@\n+#ifdef SQLITE_DEBUG\n+\/*\n+** Return true if cursor iCur is opened by instruction k of the\n+** bytecode.  Used inside of assert() only.\n+*\/\n+static int cursorIsOpen(Vdbe *v, int iCur, int k){\n+  while( k>=0 ){\n+    VdbeOp *pOp = sqlite3VdbeGetOp(v,k--);\n+    if( pOp->p1!=iCur ) continue;\n+    if( pOp->opcode==OP_Close ) return 0;\n+    if( pOp->opcode==OP_OpenRead ) return 1;\n+    if( pOp->opcode==OP_OpenWrite ) return 1;\n+    if( pOp->opcode==OP_OpenDup ) return 1;\n+    if( pOp->opcode==OP_OpenAutoindex ) return 1;\n+    if( pOp->opcode==OP_OpenEphemeral ) return 1;\n+  }\n+  return 0;\n+}\n+#endif \/* SQLITE_DEBUG *\/\n+\n@@ -156075,0 +160110,1 @@\n+  int nRJ = 0;\n@@ -156082,0 +160118,11 @@\n+    if( pLevel->pRJ ){\n+      \/* Terminate the subroutine that forms the interior of the loop of\n+      ** the RIGHT JOIN table *\/\n+      WhereRightJoin *pRJ = pLevel->pRJ;\n+      sqlite3VdbeResolveLabel(v, pLevel->addrCont);\n+      pLevel->addrCont = 0;\n+      pRJ->endSubrtn = sqlite3VdbeCurrentAddr(v);\n+      sqlite3VdbeAddOp3(v, OP_Return, pRJ->regReturn, pRJ->addrSubrtn, 1);\n+      VdbeCoverage(v);\n+      nRJ++;\n+    }\n@@ -156109,1 +160156,1 @@\n-      sqlite3VdbeResolveLabel(v, pLevel->addrCont);\n+      if( pLevel->addrCont ) sqlite3VdbeResolveLabel(v, pLevel->addrCont);\n@@ -156124,1 +160171,1 @@\n-    }else{\n+    }else if( pLevel->addrCont ){\n@@ -156174,0 +160221,4 @@\n+    if( pLevel->pRJ ){\n+      sqlite3VdbeAddOp3(v, OP_Return, pLevel->pRJ->regReturn, 0, 1);\n+      VdbeCoverage(v);\n+    }\n@@ -156217,5 +160268,0 @@\n-  \/* The \"break\" point is here, just past the end of the outer loop.\n-  ** Set it.\n-  *\/\n-  sqlite3VdbeResolveLabel(v, pWInfo->iBreak);\n-\n@@ -156223,0 +160269,1 @@\n+  if( pWInfo->pExprMods ) whereUndoExprMods(pWInfo);\n@@ -156232,0 +160279,9 @@\n+    \/* Do RIGHT JOIN processing.  Generate code that will output the\n+    ** unmatched rows of the right operand of the RIGHT JOIN with\n+    ** all of the columns of the left operand set to NULL.\n+    *\/\n+    if( pLevel->pRJ ){\n+      sqlite3WhereRightJoinLoop(pWInfo, i, pLevel);\n+      continue;\n+    }\n+\n@@ -156243,23 +160299,0 @@\n-#ifdef SQLITE_ENABLE_EARLY_CURSOR_CLOSE\n-    \/* Close all of the cursors that were opened by sqlite3WhereBegin.\n-    ** Except, do not close cursors that will be reused by the OR optimization\n-    ** (WHERE_OR_SUBCLAUSE).  And do not close the OP_OpenWrite cursors\n-    ** created for the ONEPASS optimization.\n-    *\/\n-    if( (pTab->tabFlags & TF_Ephemeral)==0\n-     && !IsView(pTab)\n-     && (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)==0\n-    ){\n-      int ws = pLoop->wsFlags;\n-      if( pWInfo->eOnePass==ONEPASS_OFF && (ws & WHERE_IDX_ONLY)==0 ){\n-        sqlite3VdbeAddOp1(v, OP_Close, pTabItem->iCursor);\n-      }\n-      if( (ws & WHERE_INDEXED)!=0\n-       && (ws & (WHERE_IPK|WHERE_AUTO_INDEX))==0\n-       && pLevel->iIdxCur!=pWInfo->aiCurOnePass[1]\n-      ){\n-        sqlite3VdbeAddOp1(v, OP_Close, pLevel->iIdxCur);\n-      }\n-    }\n-#endif\n-\n@@ -156314,0 +160347,5 @@\n+#ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC\n+          if( pOp->opcode==OP_Offset ){\n+            \/* Do not need to translate the column number *\/\n+          }else\n+#endif\n@@ -156327,0 +160365,15 @@\n+          }else{\n+            \/* Unable to translate the table reference into an index\n+            ** reference.  Verify that this is harmless - that the\n+            ** table being referenced really is open.\n+            *\/\n+#ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC\n+            assert( (pLoop->wsFlags & WHERE_IDX_ONLY)==0\n+                 || cursorIsOpen(v,pOp->p1,k)\n+                 || pOp->opcode==OP_Offset\n+            );\n+#else\n+            assert( (pLoop->wsFlags & WHERE_IDX_ONLY)==0\n+                 || cursorIsOpen(v,pOp->p1,k)\n+            );\n+#endif\n@@ -156328,2 +160381,0 @@\n-          assert( (pLoop->wsFlags & WHERE_IDX_ONLY)==0 || x>=0\n-              || pWInfo->eOnePass );\n@@ -156348,0 +160399,5 @@\n+  \/* The \"break\" point is here, just past the end of the outer loop.\n+  ** Set it.\n+  *\/\n+  sqlite3VdbeResolveLabel(v, pWInfo->iBreak);\n+\n@@ -156350,1 +160406,0 @@\n-  if( pWInfo->pExprMods ) whereUndoExprMods(pWInfo);\n@@ -156353,0 +160408,1 @@\n+  pParse->withinRJSubrtn -= nRJ;\n@@ -157084,1 +161140,1 @@\n-  pWin->pFunc = pFunc;\n+  pWin->pWFunc = pFunc;\n@@ -157276,1 +161332,1 @@\n-      if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;\n+      if( pList ) pList->a[nInit+i].fg.sortFlags = pAppend->a[i].fg.sortFlags;\n@@ -157317,1 +161373,5 @@\n-  if( p->pWin && p->pPrior==0 && ALWAYS((p->selFlags & SF_WinRewrite)==0) ){\n+  if( p->pWin\n+   && p->pPrior==0\n+   && ALWAYS((p->selFlags & SF_WinRewrite)==0)\n+   && ALWAYS(!IN_RENAME_OBJECT)\n+  ){\n@@ -157392,0 +161452,1 @@\n+      assert( pWin->pWFunc!=0 );\n@@ -157393,1 +161454,1 @@\n-      if( pWin->pFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){\n+      if( pWin->pWFunc->funcFlags & SQLITE_FUNC_SUBTYPE ){\n@@ -157466,6 +161527,1 @@\n-  if( rc ){\n-    if( pParse->nErr==0 ){\n-      assert( pParse->db->mallocFailed );\n-      sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);\n-    }\n-  }\n+  assert( rc==SQLITE_OK || pParse->nErr!=0 );\n@@ -157780,1 +161836,1 @@\n-    FuncDef *p = pWin->pFunc;\n+    FuncDef *p = pWin->pWFunc;\n@@ -157797,1 +161853,1 @@\n-      if( pKeyInfo && pWin->pFunc->zName[1]=='i' ){\n+      if( pKeyInfo && pWin->pWFunc->zName[1]=='i' ){\n@@ -158020,1 +162076,1 @@\n-    FuncDef *pFunc = pWin->pFunc;\n+    FuncDef *pFunc = pWin->pWFunc;\n@@ -158089,1 +162145,1 @@\n-          if( pOp->opcode==OP_Column && pOp->p1==pWin->iEphCsr ){\n+          if( pOp->opcode==OP_Column && pOp->p1==pMWin->iEphCsr ){\n@@ -158134,1 +162190,1 @@\n-     && (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)\n+     && (pWin->pWFunc->funcFlags & SQLITE_FUNC_MINMAX)\n@@ -158148,1 +162204,1 @@\n-        sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);\n+        sqlite3VdbeAppendP4(v, pWin->pWFunc, P4_FUNCDEF);\n@@ -158153,1 +162209,1 @@\n-        sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);\n+        sqlite3VdbeAppendP4(v, pWin->pWFunc, P4_FUNCDEF);\n@@ -158282,1 +162338,1 @@\n-      FuncDef *pFunc = pWin->pFunc;\n+      FuncDef *pFunc = pWin->pWFunc;\n@@ -158354,1 +162410,1 @@\n-    FuncDef *pFunc = pWin->pFunc;\n+    FuncDef *pFunc = pWin->pWFunc;\n@@ -158384,1 +162440,1 @@\n-    FuncDef *pFunc = pWin->pFunc;\n+    FuncDef *pFunc = pWin->pWFunc;\n@@ -158477,1 +162533,1 @@\n-  if( pOrderBy->a[0].sortFlags & KEYINFO_ORDER_DESC ){\n+  if( pOrderBy->a[0].fg.sortFlags & KEYINFO_ORDER_DESC ){\n@@ -158510,1 +162566,1 @@\n-  if( pOrderBy->a[0].sortFlags & KEYINFO_ORDER_BIGNULL ){\n+  if( pOrderBy->a[0].fg.sortFlags & KEYINFO_ORDER_BIGNULL ){\n@@ -158742,1 +162798,1 @@\n-      pNew->pFunc = p->pFunc;\n+      pNew->pWFunc = p->pWFunc;\n@@ -159619,4 +163675,1 @@\n-  \/* Construct a new Expr object from a single identifier.  Use the\n-  ** new Expr to populate pOut.  Set the span of pOut to be the identifier\n-  ** that created the expression.\n-  *\/\n+  \/* Construct a new Expr object from a single token *\/\n@@ -159631,1 +163684,1 @@\n-      p->iAgg = -1;\n+      \/* p->iAgg = -1; \/\/ Not required *\/\n@@ -159642,0 +163695,1 @@\n+      p->w.iOfst = (int)(t.z - pParse->zTail);\n@@ -159808,72 +163862,73 @@\n-#define TK_COLLATE                        112\n-#define TK_BITNOT                         113\n-#define TK_ON                             114\n-#define TK_INDEXED                        115\n-#define TK_STRING                         116\n-#define TK_JOIN_KW                        117\n-#define TK_CONSTRAINT                     118\n-#define TK_DEFAULT                        119\n-#define TK_NULL                           120\n-#define TK_PRIMARY                        121\n-#define TK_UNIQUE                         122\n-#define TK_CHECK                          123\n-#define TK_REFERENCES                     124\n-#define TK_AUTOINCR                       125\n-#define TK_INSERT                         126\n-#define TK_DELETE                         127\n-#define TK_UPDATE                         128\n-#define TK_SET                            129\n-#define TK_DEFERRABLE                     130\n-#define TK_FOREIGN                        131\n-#define TK_DROP                           132\n-#define TK_UNION                          133\n-#define TK_ALL                            134\n-#define TK_EXCEPT                         135\n-#define TK_INTERSECT                      136\n-#define TK_SELECT                         137\n-#define TK_VALUES                         138\n-#define TK_DISTINCT                       139\n-#define TK_DOT                            140\n-#define TK_FROM                           141\n-#define TK_JOIN                           142\n-#define TK_USING                          143\n-#define TK_ORDER                          144\n-#define TK_GROUP                          145\n-#define TK_HAVING                         146\n-#define TK_LIMIT                          147\n-#define TK_WHERE                          148\n-#define TK_RETURNING                      149\n-#define TK_INTO                           150\n-#define TK_NOTHING                        151\n-#define TK_FLOAT                          152\n-#define TK_BLOB                           153\n-#define TK_INTEGER                        154\n-#define TK_VARIABLE                       155\n-#define TK_CASE                           156\n-#define TK_WHEN                           157\n-#define TK_THEN                           158\n-#define TK_ELSE                           159\n-#define TK_INDEX                          160\n-#define TK_ALTER                          161\n-#define TK_ADD                            162\n-#define TK_WINDOW                         163\n-#define TK_OVER                           164\n-#define TK_FILTER                         165\n-#define TK_COLUMN                         166\n-#define TK_AGG_FUNCTION                   167\n-#define TK_AGG_COLUMN                     168\n-#define TK_TRUEFALSE                      169\n-#define TK_ISNOT                          170\n-#define TK_FUNCTION                       171\n-#define TK_UMINUS                         172\n-#define TK_UPLUS                          173\n-#define TK_TRUTH                          174\n-#define TK_REGISTER                       175\n-#define TK_VECTOR                         176\n-#define TK_SELECT_COLUMN                  177\n-#define TK_IF_NULL_ROW                    178\n-#define TK_ASTERISK                       179\n-#define TK_SPAN                           180\n-#define TK_ERROR                          181\n-#define TK_SPACE                          182\n-#define TK_ILLEGAL                        183\n+#define TK_PTR                            112\n+#define TK_COLLATE                        113\n+#define TK_BITNOT                         114\n+#define TK_ON                             115\n+#define TK_INDEXED                        116\n+#define TK_STRING                         117\n+#define TK_JOIN_KW                        118\n+#define TK_CONSTRAINT                     119\n+#define TK_DEFAULT                        120\n+#define TK_NULL                           121\n+#define TK_PRIMARY                        122\n+#define TK_UNIQUE                         123\n+#define TK_CHECK                          124\n+#define TK_REFERENCES                     125\n+#define TK_AUTOINCR                       126\n+#define TK_INSERT                         127\n+#define TK_DELETE                         128\n+#define TK_UPDATE                         129\n+#define TK_SET                            130\n+#define TK_DEFERRABLE                     131\n+#define TK_FOREIGN                        132\n+#define TK_DROP                           133\n+#define TK_UNION                          134\n+#define TK_ALL                            135\n+#define TK_EXCEPT                         136\n+#define TK_INTERSECT                      137\n+#define TK_SELECT                         138\n+#define TK_VALUES                         139\n+#define TK_DISTINCT                       140\n+#define TK_DOT                            141\n+#define TK_FROM                           142\n+#define TK_JOIN                           143\n+#define TK_USING                          144\n+#define TK_ORDER                          145\n+#define TK_GROUP                          146\n+#define TK_HAVING                         147\n+#define TK_LIMIT                          148\n+#define TK_WHERE                          149\n+#define TK_RETURNING                      150\n+#define TK_INTO                           151\n+#define TK_NOTHING                        152\n+#define TK_FLOAT                          153\n+#define TK_BLOB                           154\n+#define TK_INTEGER                        155\n+#define TK_VARIABLE                       156\n+#define TK_CASE                           157\n+#define TK_WHEN                           158\n+#define TK_THEN                           159\n+#define TK_ELSE                           160\n+#define TK_INDEX                          161\n+#define TK_ALTER                          162\n+#define TK_ADD                            163\n+#define TK_WINDOW                         164\n+#define TK_OVER                           165\n+#define TK_FILTER                         166\n+#define TK_COLUMN                         167\n+#define TK_AGG_FUNCTION                   168\n+#define TK_AGG_COLUMN                     169\n+#define TK_TRUEFALSE                      170\n+#define TK_ISNOT                          171\n+#define TK_FUNCTION                       172\n+#define TK_UMINUS                         173\n+#define TK_UPLUS                          174\n+#define TK_TRUTH                          175\n+#define TK_REGISTER                       176\n+#define TK_VECTOR                         177\n+#define TK_SELECT_COLUMN                  178\n+#define TK_IF_NULL_ROW                    179\n+#define TK_ASTERISK                       180\n+#define TK_SPAN                           181\n+#define TK_ERROR                          182\n+#define TK_SPACE                          183\n+#define TK_ILLEGAL                        184\n@@ -159939,1 +163994,1 @@\n-#define YYNOCODE 318\n+#define YYNOCODE 319\n@@ -159946,17 +164001,18 @@\n-  With* yy43;\n-  u32 yy51;\n-  int yy64;\n-  struct FrameBound yy81;\n-  struct {int value; int mask;} yy83;\n-  TriggerStep* yy95;\n-  Upsert* yy138;\n-  IdList* yy240;\n-  Cte* yy255;\n-  Select* yy303;\n-  Window* yy375;\n-  u8 yy534;\n-  ExprList* yy562;\n-  struct TrigEvent yy570;\n-  const char* yy600;\n-  SrcList* yy607;\n-  Expr* yy626;\n+  TriggerStep* yy33;\n+  Window* yy41;\n+  Select* yy47;\n+  SrcList* yy131;\n+  struct TrigEvent yy180;\n+  struct {int value; int mask;} yy231;\n+  IdList* yy254;\n+  u32 yy285;\n+  ExprList* yy322;\n+  Cte* yy385;\n+  int yy394;\n+  Upsert* yy444;\n+  u8 yy516;\n+  With* yy521;\n+  const char* yy522;\n+  Expr* yy528;\n+  OnOrUsing yy561;\n+  struct FrameBound yy595;\n@@ -159978,12 +164034,12 @@\n-#define YYNSTATE             572\n-#define YYNRULE              401\n-#define YYNRULE_WITH_ACTION  339\n-#define YYNTOKEN             184\n-#define YY_MAX_SHIFT         571\n-#define YY_MIN_SHIFTREDUCE   829\n-#define YY_MAX_SHIFTREDUCE   1229\n-#define YY_ERROR_ACTION      1230\n-#define YY_ACCEPT_ACTION     1231\n-#define YY_NO_ACTION         1232\n-#define YY_MIN_REDUCE        1233\n-#define YY_MAX_REDUCE        1633\n+#define YYNSTATE             576\n+#define YYNRULE              405\n+#define YYNRULE_WITH_ACTION  342\n+#define YYNTOKEN             185\n+#define YY_MAX_SHIFT         575\n+#define YY_MIN_SHIFTREDUCE   835\n+#define YY_MAX_SHIFTREDUCE   1239\n+#define YY_ERROR_ACTION      1240\n+#define YY_ACCEPT_ACTION     1241\n+#define YY_NO_ACTION         1242\n+#define YY_MIN_REDUCE        1243\n+#define YY_MAX_REDUCE        1647\n@@ -160056,1 +164112,1 @@\n-#define YY_ACTTAB_COUNT (2037)\n+#define YY_ACTTAB_COUNT (2098)\n@@ -160058,204 +164114,210 @@\n- \/*     0 *\/   564,  115,  112,  220,  169,  199,  115,  112,  220,  564,\n- \/*    10 *\/   375, 1266,  564,  376,  564,  270, 1309, 1309,  406,  407,\n- \/*    20 *\/  1084,  199, 1513,   41,   41,  515,  489,  521,  558,  558,\n- \/*    30 *\/   558,  965,   41,   41,  395,   41,   41,   51,   51,  966,\n- \/*    40 *\/   296, 1269,  296,  122,  123,  113, 1207, 1207, 1041, 1044,\n- \/*    50 *\/  1034, 1034,  120,  120,  121,  121,  121,  121,  564,  407,\n- \/*    60 *\/   275,  275,  275,  275, 1268,  115,  112,  220,  115,  112,\n- \/*    70 *\/   220, 1512,  846,  561,  516,  561,  115,  112,  220,  250,\n- \/*    80 *\/   217,   71,   71,  122,  123,  113, 1207, 1207, 1041, 1044,\n- \/*    90 *\/  1034, 1034,  120,  120,  121,  121,  121,  121,  440,  440,\n- \/*   100 *\/   440, 1149,  119,  119,  119,  119,  118,  118,  117,  117,\n- \/*   110 *\/   117,  116,  442, 1183, 1149,  116,  442, 1149,  546,  513,\n- \/*   120 *\/  1548, 1554,  374,  442,    6, 1183, 1154,  522, 1154,  407,\n- \/*   130 *\/  1556,  461,  373, 1554,  535,   99,  463,  332,  121,  121,\n- \/*   140 *\/   121,  121,  119,  119,  119,  119,  118,  118,  117,  117,\n- \/*   150 *\/   117,  116,  442,  122,  123,  113, 1207, 1207, 1041, 1044,\n- \/*   160 *\/  1034, 1034,  120,  120,  121,  121,  121,  121, 1257, 1183,\n- \/*   170 *\/  1184, 1185,  243, 1064,  564,  502,  499,  498,  567,  124,\n- \/*   180 *\/   567, 1183, 1184, 1185,  474,  497,  119,  119,  119,  119,\n- \/*   190 *\/   118,  118,  117,  117,  117,  116,  442,   70,   70,  407,\n- \/*   200 *\/   121,  121,  121,  121,  114,  117,  117,  117,  116,  442,\n- \/*   210 *\/  1409, 1469,  119,  119,  119,  119,  118,  118,  117,  117,\n- \/*   220 *\/   117,  116,  442,  122,  123,  113, 1207, 1207, 1041, 1044,\n- \/*   230 *\/  1034, 1034,  120,  120,  121,  121,  121,  121,  407, 1031,\n- \/*   240 *\/  1031, 1042, 1045,   81,  382,  541,  378,   80,  119,  119,\n- \/*   250 *\/   119,  119,  118,  118,  117,  117,  117,  116,  442,  381,\n- \/*   260 *\/   463,  332,  122,  123,  113, 1207, 1207, 1041, 1044, 1034,\n- \/*   270 *\/  1034,  120,  120,  121,  121,  121,  121,  262,  215,  512,\n- \/*   280 *\/  1424,  422,  119,  119,  119,  119,  118,  118,  117,  117,\n- \/*   290 *\/   117,  116,  442, 1231,    1,    1,  571,    2, 1235, 1573,\n- \/*   300 *\/   571,    2, 1235,  307, 1149,  141, 1600,  307,  407,  141,\n- \/*   310 *\/  1183,  361, 1317, 1035,  866,  531, 1317, 1149,  359, 1567,\n- \/*   320 *\/  1149,  119,  119,  119,  119,  118,  118,  117,  117,  117,\n- \/*   330 *\/   116,  442,  122,  123,  113, 1207, 1207, 1041, 1044, 1034,\n- \/*   340 *\/  1034,  120,  120,  121,  121,  121,  121,  275,  275, 1001,\n- \/*   350 *\/   426,  275,  275, 1128, 1627, 1021, 1627,  137,  542, 1541,\n- \/*   360 *\/   561,  272,  950,  950,  561, 1423, 1183, 1184, 1185, 1594,\n- \/*   370 *\/   866, 1012,  530,  315,  231, 1011,  468, 1276,  231,  119,\n- \/*   380 *\/   119,  119,  119,  118,  118,  117,  117,  117,  116,  442,\n- \/*   390 *\/  1570,  119,  119,  119,  119,  118,  118,  117,  117,  117,\n- \/*   400 *\/   116,  442,  330,  359, 1567,  564,  446, 1011, 1011, 1013,\n- \/*   410 *\/   446,  207,  564,  306,  555,  407,  363, 1021,  363,  346,\n- \/*   420 *\/   184,  118,  118,  117,  117,  117,  116,  442,   71,   71,\n- \/*   430 *\/   439,  438, 1126, 1012,  472,   71,   71, 1011,  205,  122,\n- \/*   440 *\/   123,  113, 1207, 1207, 1041, 1044, 1034, 1034,  120,  120,\n- \/*   450 *\/   121,  121,  121,  121,  219,  219,  472, 1183,  407,  570,\n- \/*   460 *\/  1183, 1235,  503, 1477,  149,  546,  307,  489,  141, 1011,\n- \/*   470 *\/  1011, 1013,  546,  140,  545, 1317, 1214,  191, 1214,  950,\n- \/*   480 *\/   950,  514,  122,  123,  113, 1207, 1207, 1041, 1044, 1034,\n- \/*   490 *\/  1034,  120,  120,  121,  121,  121,  121,  563,  119,  119,\n- \/*   500 *\/   119,  119,  118,  118,  117,  117,  117,  116,  442,  283,\n- \/*   510 *\/   275,  275,  415, 1183, 1184, 1185, 1183, 1184, 1185,  372,\n- \/*   520 *\/  1183,  243,  344,  561,  502,  499,  498, 1539,  407, 1540,\n- \/*   530 *\/  1183,  288,  870,  143,  497, 1549,  185,  231,    9,    6,\n- \/*   540 *\/   253,  119,  119,  119,  119,  118,  118,  117,  117,  117,\n- \/*   550 *\/   116,  442,  122,  123,  113, 1207, 1207, 1041, 1044, 1034,\n- \/*   560 *\/  1034,  120,  120,  121,  121,  121,  121,  407,  137,  446,\n- \/*   570 *\/   447,  863,  169, 1183,  397, 1204, 1183, 1184, 1185,  931,\n- \/*   580 *\/   526, 1001,   98,  339,  564,  342, 1183, 1184, 1185,  306,\n- \/*   590 *\/   555,  122,  123,  113, 1207, 1207, 1041, 1044, 1034, 1034,\n- \/*   600 *\/   120,  120,  121,  121,  121,  121,  452,   71,   71,  275,\n- \/*   610 *\/   275,  119,  119,  119,  119,  118,  118,  117,  117,  117,\n- \/*   620 *\/   116,  442,  561,  417,  306,  555, 1183, 1307, 1307, 1183,\n- \/*   630 *\/  1184, 1185, 1204, 1149,  330,  458,  318,  407,  363,  470,\n- \/*   640 *\/   431, 1167,   32,  541,  527,  350, 1149, 1629,  393, 1149,\n- \/*   650 *\/   119,  119,  119,  119,  118,  118,  117,  117,  117,  116,\n- \/*   660 *\/   442,  122,  123,  113, 1207, 1207, 1041, 1044, 1034, 1034,\n- \/*   670 *\/   120,  120,  121,  121,  121,  121,  407,  199,  472, 1183,\n- \/*   680 *\/  1022,  472, 1183, 1184, 1185,  386,  151,  539, 1548,  277,\n- \/*   690 *\/   400,  137,    6,  317,    5,  564,  562,    3,  920,  920,\n- \/*   700 *\/   122,  123,  113, 1207, 1207, 1041, 1044, 1034, 1034,  120,\n- \/*   710 *\/   120,  121,  121,  121,  121,  411,  505,   83,   71,   71,\n- \/*   720 *\/   119,  119,  119,  119,  118,  118,  117,  117,  117,  116,\n- \/*   730 *\/   442, 1183,  218,  428, 1183, 1183, 1184, 1185,  363,  261,\n- \/*   740 *\/   278,  358,  508,  353,  507,  248,  407,  306,  555, 1539,\n- \/*   750 *\/  1006,  349,  363,  291,  489,  302,  293, 1542,  281,  119,\n- \/*   760 *\/   119,  119,  119,  118,  118,  117,  117,  117,  116,  442,\n- \/*   770 *\/   122,  123,  113, 1207, 1207, 1041, 1044, 1034, 1034,  120,\n- \/*   780 *\/   120,  121,  121,  121,  121,  407,  148, 1183, 1184, 1185,\n- \/*   790 *\/  1183, 1184, 1185,  275,  275, 1304, 1257, 1283,  483, 1476,\n- \/*   800 *\/   150,  489,  480,  564, 1187, 1304,  561, 1587, 1255,  122,\n- \/*   810 *\/   123,  113, 1207, 1207, 1041, 1044, 1034, 1034,  120,  120,\n- \/*   820 *\/   121,  121,  121,  121,  564,  886,   13,   13,  520,  119,\n- \/*   830 *\/   119,  119,  119,  118,  118,  117,  117,  117,  116,  442,\n- \/*   840 *\/  1183,  420,  417,  564,  269,  269, 1316,   13,   13, 1539,\n- \/*   850 *\/  1546,   16,   16,  322,    6,  407,  506,  561, 1089, 1089,\n- \/*   860 *\/   486, 1187,  425, 1539,  887,  292,   71,   71,  119,  119,\n- \/*   870 *\/   119,  119,  118,  118,  117,  117,  117,  116,  442,  122,\n- \/*   880 *\/   123,  113, 1207, 1207, 1041, 1044, 1034, 1034,  120,  120,\n- \/*   890 *\/   121,  121,  121,  121,  564,   12, 1183, 1184, 1185,  407,\n- \/*   900 *\/   275,  275,  451,  303,  834,  835,  836,  417,  489,  276,\n- \/*   910 *\/   276, 1547,  284,  561,  319,    6,  321,   71,   71,  429,\n- \/*   920 *\/   451,  450,  561,  952,  101,  113, 1207, 1207, 1041, 1044,\n- \/*   930 *\/  1034, 1034,  120,  120,  121,  121,  121,  121,  119,  119,\n- \/*   940 *\/   119,  119,  118,  118,  117,  117,  117,  116,  442, 1105,\n- \/*   950 *\/  1183,  489,  564, 1312,  437,  455,  478,  564,  246,  245,\n- \/*   960 *\/   244, 1409, 1545,  547, 1106,  405,    6, 1544,  196, 1258,\n- \/*   970 *\/   413,    6,  105,  462,  103,   71,   71,  286,  564, 1107,\n- \/*   980 *\/    13,   13,  119,  119,  119,  119,  118,  118,  117,  117,\n- \/*   990 *\/   117,  116,  442,  451,  104,  427,  337,  320,  275,  275,\n- \/*  1000 *\/   906,   13,   13,  564, 1482, 1105, 1183, 1184, 1185,  126,\n- \/*  1010 *\/   907,  561,  546,  564,  407,  478,  295, 1321,  253,  200,\n- \/*  1020 *\/  1106,  548, 1482, 1484,  280, 1409,   55,   55, 1287,  561,\n- \/*  1030 *\/   478,  380,  423,  951,  407, 1107,   71,   71,  122,  123,\n- \/*  1040 *\/   113, 1207, 1207, 1041, 1044, 1034, 1034,  120,  120,  121,\n- \/*  1050 *\/   121,  121,  121, 1204,  407,  287,  552,  309,  122,  123,\n- \/*  1060 *\/   113, 1207, 1207, 1041, 1044, 1034, 1034,  120,  120,  121,\n- \/*  1070 *\/   121,  121,  121,  441, 1128, 1628,  146, 1628,  122,  111,\n- \/*  1080 *\/   113, 1207, 1207, 1041, 1044, 1034, 1034,  120,  120,  121,\n- \/*  1090 *\/   121,  121,  121,  404,  403, 1482,  424,  119,  119,  119,\n- \/*  1100 *\/   119,  118,  118,  117,  117,  117,  116,  442, 1183,  564,\n- \/*  1110 *\/  1204,  544, 1086,  858,  329,  361, 1086,  119,  119,  119,\n- \/*  1120 *\/   119,  118,  118,  117,  117,  117,  116,  442,  564,  294,\n- \/*  1130 *\/   144,  523,   56,   56,  224,  564,  510,  119,  119,  119,\n- \/*  1140 *\/   119,  118,  118,  117,  117,  117,  116,  442,  484, 1409,\n- \/*  1150 *\/   537,   15,   15, 1126,  434,  439,  438,  407,   13,   13,\n- \/*  1160 *\/  1523,   12,  926, 1211, 1183, 1184, 1185,  925, 1213,  536,\n- \/*  1170 *\/   858,  557,  413,  193, 1525,  494, 1212,  448, 1160, 1222,\n- \/*  1180 *\/  1183,  564,  123,  113, 1207, 1207, 1041, 1044, 1034, 1034,\n- \/*  1190 *\/   120,  120,  121,  121,  121,  121, 1521, 1149,  564,  965,\n- \/*  1200 *\/   564, 1214,  247, 1214,   13,   13, 1409,  966,  538,  564,\n- \/*  1210 *\/  1149,  108,  556, 1149,    4,  310,  392, 1227,   17,  194,\n- \/*  1220 *\/   485,   43,   43,   57,   57,  306,  555,  524,  559, 1160,\n- \/*  1230 *\/   464,  564,   44,   44,  392, 1127, 1183, 1184, 1185,  479,\n- \/*  1240 *\/   119,  119,  119,  119,  118,  118,  117,  117,  117,  116,\n- \/*  1250 *\/   442,  443,  564,  327,   13,   13,  564,  418, 1315,  414,\n- \/*  1260 *\/   171,  564,  311,  553,  213,  529, 1253,  564,  517,  543,\n- \/*  1270 *\/   412,  108,  556,  137,    4,   58,   58,  435,  314,   59,\n- \/*  1280 *\/    59,  274,  217,  549,   60,   60,  349,  476,  559, 1353,\n- \/*  1290 *\/    61,   61, 1021,  275,  275, 1228,  213,  564,  106,  106,\n- \/*  1300 *\/     8,  275,  275,  275,  275,  107,  561,  443,  566,  565,\n- \/*  1310 *\/   564,  443, 1011, 1228,  561,  564,  561,  564,  275,  275,\n- \/*  1320 *\/    62,   62, 1352,  553,  247,  456,  564,   98,  110,  306,\n- \/*  1330 *\/   555,  561,  564,   45,   45,  405, 1203,  533,   46,   46,\n- \/*  1340 *\/    47,   47,  532,  465, 1011, 1011, 1013, 1014,   27,   49,\n- \/*  1350 *\/    49,  564, 1021,  405,  469,   50,   50,  564,  106,  106,\n- \/*  1360 *\/   305,  564,   84,  204,  405,  107,  564,  443,  566,  565,\n- \/*  1370 *\/   405,  564, 1011,  564,   63,   63,  564, 1599,  564,  895,\n- \/*  1380 *\/    64,   64,  457,  477,   65,   65,  147,   96,   38,   14,\n- \/*  1390 *\/    14, 1528,  412,  564,   66,   66,  128,  128,  926,   67,\n- \/*  1400 *\/    67,   52,   52,  925, 1011, 1011, 1013, 1014,   27, 1572,\n- \/*  1410 *\/  1171,  445,  208, 1123,  279,  394,   68,   68,  228,  390,\n- \/*  1420 *\/   390,  389,  264,  387, 1171,  445,  843,  877,  279,  108,\n- \/*  1430 *\/   556,  453,    4,  390,  390,  389,  264,  387,  564,  225,\n- \/*  1440 *\/   843,  313,  328, 1003,   98,  252,  559,  544,  471,  312,\n- \/*  1450 *\/   252,  564,  208,  225,  564,  313,  473,   30,  252,  279,\n- \/*  1460 *\/   466,   69,   69,  312,  390,  390,  389,  264,  387,  443,\n- \/*  1470 *\/   333,  843,   98,  564,   53,   53,  323,  157,  157,  227,\n- \/*  1480 *\/   495,  553,  249,  289,  225,  564,  313,  162,   31, 1501,\n- \/*  1490 *\/   135,  564, 1500,  227,  312,  533,  158,  158,  885,  884,\n- \/*  1500 *\/   534,  162,  873,  301,  135,  564,  481,  226,   76,   76,\n- \/*  1510 *\/  1021,  347, 1071,   98,   54,   54,  106,  106, 1067,  564,\n- \/*  1520 *\/   249,  226,  519,  107,  227,  443,  566,  565,   72,   72,\n- \/*  1530 *\/  1011,  334,  162,  564,  230,  135,  108,  556,  959,    4,\n- \/*  1540 *\/   252,  408,  129,  129,  564, 1349,  306,  555,  564,  923,\n- \/*  1550 *\/   564,  110,  226,  559,  564,  408,   73,   73,  564,  873,\n- \/*  1560 *\/   306,  555, 1011, 1011, 1013, 1014,   27,  130,  130, 1071,\n- \/*  1570 *\/   449,  131,  131,  127,  127,  357,  443,  156,  156,  892,\n- \/*  1580 *\/   893,  155,  155,  338,  449,  356,  408,  564,  553,  968,\n- \/*  1590 *\/   969,  306,  555, 1015,  341,  564,  108,  556,  564,    4,\n- \/*  1600 *\/  1132, 1286,  533,  564,  856,  343,  145,  532,  345, 1300,\n- \/*  1610 *\/   136,  136, 1083,  559, 1083,  449,  564, 1021,  134,  134,\n- \/*  1620 *\/  1284,  132,  132,  106,  106, 1285,  133,  133,  564,  352,\n- \/*  1630 *\/   107,  564,  443,  566,  565, 1340,  443, 1011,  362,   75,\n- \/*  1640 *\/    75, 1082,  564, 1082,  564,  924, 1561,  110,  553,  551,\n- \/*  1650 *\/  1015,   77,   77, 1361,   74,   74, 1408, 1336, 1347,  550,\n- \/*  1660 *\/  1414, 1265, 1256, 1244, 1243,   42,   42,   48,   48, 1011,\n- \/*  1670 *\/  1011, 1013, 1014,   27, 1245, 1580,  490, 1021,  267,  202,\n- \/*  1680 *\/  1333,  365,   11,  106,  106,  930,  367,  210,  369,  391,\n- \/*  1690 *\/   107, 1395,  443,  566,  565,  223, 1390, 1011,  500,  454,\n- \/*  1700 *\/   282, 1400,  285,  108,  556,  214,    4,  325, 1383, 1283,\n- \/*  1710 *\/   475,  355, 1473, 1583, 1472, 1399,  371, 1222,  326,  398,\n- \/*  1720 *\/   559,  290,  331,  197,  100,  556,  209,    4,  198, 1011,\n- \/*  1730 *\/  1011, 1013, 1014,   27,  385,  256, 1520, 1518,  554, 1219,\n- \/*  1740 *\/   416,  559,   83,  443,  173,  206,  182,  221,  459,  167,\n- \/*  1750 *\/   177,  460,  175,  493,  233,  553,   79,  178, 1396,  179,\n- \/*  1760 *\/    35,  180,   96, 1402,  443,  396,   36,  467, 1478, 1401,\n- \/*  1770 *\/   482,  237, 1404,  399,   82,  186,  553, 1467,   89,  488,\n- \/*  1780 *\/   190,  268,  239,  491, 1021,  340,  240,  401, 1246, 1489,\n- \/*  1790 *\/   106,  106,  336,  509, 1294,  241, 1303,  107,  430,  443,\n- \/*  1800 *\/   566,  565, 1302,   91, 1011, 1021, 1598, 1301, 1273,  215,\n- \/*  1810 *\/  1597,  106,  106,  402,  877,  432,  354, 1272,  107, 1271,\n- \/*  1820 *\/   443,  566,  565, 1596, 1566, 1011, 1293,  433,  518,  299,\n- \/*  1830 *\/   300,  360,   95,  525, 1344,  364, 1011, 1011, 1013, 1014,\n- \/*  1840 *\/    27,  254,  255, 1552,  436, 1551,  125,  544,   10,  379,\n- \/*  1850 *\/  1326, 1453,  102,   97, 1345,  528,  304, 1011, 1011, 1013,\n- \/*  1860 *\/  1014,   27,  366,  377, 1343, 1342,  368,  370, 1325,  384,\n- \/*  1870 *\/   201,  383,   34, 1368, 1367,  568, 1177,  266,  263,  265,\n- \/*  1880 *\/  1505,  159,  569, 1241, 1236, 1506,  160,  142, 1504, 1503,\n- \/*  1890 *\/   297,  211,  830,  161,  212,   78,  444,  203,  308,  222,\n- \/*  1900 *\/  1081,  139, 1079,  316,  174,  163, 1203,  229,  176,  909,\n- \/*  1910 *\/   324,  232, 1095,  181,  409,  410,  172,  164,  165,  419,\n- \/*  1920 *\/   183,   85,   86,  421,  166,   87,   88, 1098, 1094,  234,\n- \/*  1930 *\/   235,  152,   18,  236,  335, 1087, 1216,  252,  187,  487,\n- \/*  1940 *\/   238,  188,   37,  845,  492,  356,  242,  496,  351,  501,\n- \/*  1950 *\/   189,   90,   19,  504,  348,   20,  875,   92,  298,  168,\n- \/*  1960 *\/   888,  153,   93,  511,   94, 1165,  154, 1047, 1134,   39,\n- \/*  1970 *\/   216, 1133,  271,  273,  958,  192,  953,  110, 1151, 1155,\n- \/*  1980 *\/   251,    7,   21, 1159, 1139,   22, 1153,   33,   23,   24,\n- \/*  1990 *\/    25,  540, 1158,  195,   98, 1062,   26, 1048, 1046, 1050,\n- \/*  2000 *\/  1104, 1051, 1103,  257,  258,   28,   40, 1173, 1016,  857,\n- \/*  2010 *\/   109,   29,  560,  388,  138, 1172,  259,  170,  260, 1232,\n- \/*  2020 *\/  1232,  919, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,\n- \/*  2030 *\/  1232, 1232, 1589, 1232, 1232, 1232, 1588,\n+ \/*     0 *\/   568,  208,  568,  118,  115,  229,  568,  118,  115,  229,\n+ \/*    10 *\/   568, 1314,  377, 1293,  408,  562,  562,  562,  568,  409,\n+ \/*    20 *\/   378, 1314, 1276,   41,   41,   41,   41,  208, 1526,   71,\n+ \/*    30 *\/    71,  971,  419,   41,   41,  491,  303,  279,  303,  972,\n+ \/*    40 *\/   397,   71,   71,  125,  126,   80, 1217, 1217, 1050, 1053,\n+ \/*    50 *\/  1040, 1040,  123,  123,  124,  124,  124,  124,  476,  409,\n+ \/*    60 *\/  1241,    1,    1,  575,    2, 1245,  550,  118,  115,  229,\n+ \/*    70 *\/   317,  480,  146,  480,  524,  118,  115,  229,  529, 1327,\n+ \/*    80 *\/   417,  523,  142,  125,  126,   80, 1217, 1217, 1050, 1053,\n+ \/*    90 *\/  1040, 1040,  123,  123,  124,  124,  124,  124,  118,  115,\n+ \/*   100 *\/   229,  327,  122,  122,  122,  122,  121,  121,  120,  120,\n+ \/*   110 *\/   120,  119,  116,  444,  284,  284,  284,  284,  442,  442,\n+ \/*   120 *\/   442, 1567,  376, 1569, 1192,  375, 1163,  565, 1163,  565,\n+ \/*   130 *\/   409, 1567,  537,  259,  226,  444,  101,  145,  449,  316,\n+ \/*   140 *\/   559,  240,  122,  122,  122,  122,  121,  121,  120,  120,\n+ \/*   150 *\/   120,  119,  116,  444,  125,  126,   80, 1217, 1217, 1050,\n+ \/*   160 *\/  1053, 1040, 1040,  123,  123,  124,  124,  124,  124,  142,\n+ \/*   170 *\/   294, 1192,  339,  448,  120,  120,  120,  119,  116,  444,\n+ \/*   180 *\/   127, 1192, 1193, 1194,  148,  441,  440,  568,  119,  116,\n+ \/*   190 *\/   444,  124,  124,  124,  124,  117,  122,  122,  122,  122,\n+ \/*   200 *\/   121,  121,  120,  120,  120,  119,  116,  444,  454,  113,\n+ \/*   210 *\/    13,   13,  546,  122,  122,  122,  122,  121,  121,  120,\n+ \/*   220 *\/   120,  120,  119,  116,  444,  422,  316,  559, 1192, 1193,\n+ \/*   230 *\/  1194,  149, 1224,  409, 1224,  124,  124,  124,  124,  122,\n+ \/*   240 *\/   122,  122,  122,  121,  121,  120,  120,  120,  119,  116,\n+ \/*   250 *\/   444,  465,  342, 1037, 1037, 1051, 1054,  125,  126,   80,\n+ \/*   260 *\/  1217, 1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,\n+ \/*   270 *\/   124,  124, 1279,  522,  222, 1192,  568,  409,  224,  514,\n+ \/*   280 *\/   175,   82,   83,  122,  122,  122,  122,  121,  121,  120,\n+ \/*   290 *\/   120,  120,  119,  116,  444, 1007,   16,   16, 1192,  133,\n+ \/*   300 *\/   133,  125,  126,   80, 1217, 1217, 1050, 1053, 1040, 1040,\n+ \/*   310 *\/   123,  123,  124,  124,  124,  124,  122,  122,  122,  122,\n+ \/*   320 *\/   121,  121,  120,  120,  120,  119,  116,  444, 1041,  546,\n+ \/*   330 *\/  1192,  373, 1192, 1193, 1194,  252, 1434,  399,  504,  501,\n+ \/*   340 *\/   500,  111,  560,  566,    4,  926,  926,  433,  499,  340,\n+ \/*   350 *\/   460,  328,  360,  394, 1237, 1192, 1193, 1194,  563,  568,\n+ \/*   360 *\/   122,  122,  122,  122,  121,  121,  120,  120,  120,  119,\n+ \/*   370 *\/   116,  444,  284,  284,  369, 1580, 1607,  441,  440,  154,\n+ \/*   380 *\/   409,  445,   71,   71, 1286,  565, 1221, 1192, 1193, 1194,\n+ \/*   390 *\/    85, 1223,  271,  557,  543,  515, 1561,  568,   98, 1222,\n+ \/*   400 *\/     6, 1278,  472,  142,  125,  126,   80, 1217, 1217, 1050,\n+ \/*   410 *\/  1053, 1040, 1040,  123,  123,  124,  124,  124,  124,  550,\n+ \/*   420 *\/    13,   13, 1027,  507, 1224, 1192, 1224,  549,  109,  109,\n+ \/*   430 *\/   222,  568, 1238,  175,  568,  427,  110,  197,  445,  570,\n+ \/*   440 *\/   569,  430, 1552, 1017,  325,  551, 1192,  270,  287,  368,\n+ \/*   450 *\/   510,  363,  509,  257,   71,   71,  543,   71,   71,  359,\n+ \/*   460 *\/   316,  559, 1613,  122,  122,  122,  122,  121,  121,  120,\n+ \/*   470 *\/   120,  120,  119,  116,  444, 1017, 1017, 1019, 1020,   27,\n+ \/*   480 *\/   284,  284, 1192, 1193, 1194, 1158,  568, 1612,  409,  901,\n+ \/*   490 *\/   190,  550,  356,  565,  550,  937,  533,  517, 1158,  516,\n+ \/*   500 *\/   413, 1158,  552, 1192, 1193, 1194,  568,  544, 1554,   51,\n+ \/*   510 *\/    51,  214,  125,  126,   80, 1217, 1217, 1050, 1053, 1040,\n+ \/*   520 *\/  1040,  123,  123,  124,  124,  124,  124, 1192,  474,  135,\n+ \/*   530 *\/   135,  409,  284,  284, 1490,  505,  121,  121,  120,  120,\n+ \/*   540 *\/   120,  119,  116,  444, 1007,  565,  518,  217,  541, 1561,\n+ \/*   550 *\/   316,  559,  142,    6,  532,  125,  126,   80, 1217, 1217,\n+ \/*   560 *\/  1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,  124,\n+ \/*   570 *\/  1555,  122,  122,  122,  122,  121,  121,  120,  120,  120,\n+ \/*   580 *\/   119,  116,  444,  485, 1192, 1193, 1194,  482,  281, 1267,\n+ \/*   590 *\/   957,  252, 1192,  373,  504,  501,  500, 1192,  340,  571,\n+ \/*   600 *\/  1192,  571,  409,  292,  499,  957,  876,  191,  480,  316,\n+ \/*   610 *\/   559,  384,  290,  380,  122,  122,  122,  122,  121,  121,\n+ \/*   620 *\/   120,  120,  120,  119,  116,  444,  125,  126,   80, 1217,\n+ \/*   630 *\/  1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,\n+ \/*   640 *\/   124,  409,  394, 1136, 1192,  869,  100,  284,  284, 1192,\n+ \/*   650 *\/  1193, 1194,  373, 1093, 1192, 1193, 1194, 1192, 1193, 1194,\n+ \/*   660 *\/   565,  455,   32,  373,  233,  125,  126,   80, 1217, 1217,\n+ \/*   670 *\/  1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,  124,\n+ \/*   680 *\/  1433,  959,  568,  228,  958,  122,  122,  122,  122,  121,\n+ \/*   690 *\/   121,  120,  120,  120,  119,  116,  444, 1158,  228, 1192,\n+ \/*   700 *\/   157, 1192, 1193, 1194, 1553,   13,   13,  301,  957, 1232,\n+ \/*   710 *\/  1158,  153,  409, 1158,  373, 1583, 1176,    5,  369, 1580,\n+ \/*   720 *\/   429, 1238,    3,  957,  122,  122,  122,  122,  121,  121,\n+ \/*   730 *\/   120,  120,  120,  119,  116,  444,  125,  126,   80, 1217,\n+ \/*   740 *\/  1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,\n+ \/*   750 *\/   124,  409,  208,  567, 1192, 1028, 1192, 1193, 1194, 1192,\n+ \/*   760 *\/   388,  852,  155, 1552,  286,  402, 1098, 1098,  488,  568,\n+ \/*   770 *\/   465,  342, 1319, 1319, 1552,  125,  126,   80, 1217, 1217,\n+ \/*   780 *\/  1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,  124,\n+ \/*   790 *\/   129,  568,   13,   13,  374,  122,  122,  122,  122,  121,\n+ \/*   800 *\/   121,  120,  120,  120,  119,  116,  444,  302,  568,  453,\n+ \/*   810 *\/   528, 1192, 1193, 1194,   13,   13, 1192, 1193, 1194, 1297,\n+ \/*   820 *\/   463, 1267,  409, 1317, 1317, 1552, 1012,  453,  452,  200,\n+ \/*   830 *\/   299,   71,   71, 1265,  122,  122,  122,  122,  121,  121,\n+ \/*   840 *\/   120,  120,  120,  119,  116,  444,  125,  126,   80, 1217,\n+ \/*   850 *\/  1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,\n+ \/*   860 *\/   124,  409,  227, 1073, 1158,  284,  284,  419,  312,  278,\n+ \/*   870 *\/   278,  285,  285, 1419,  406,  405,  382, 1158,  565,  568,\n+ \/*   880 *\/  1158, 1196,  565, 1600,  565,  125,  126,   80, 1217, 1217,\n+ \/*   890 *\/  1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,  124,\n+ \/*   900 *\/   453, 1482,   13,   13, 1536,  122,  122,  122,  122,  121,\n+ \/*   910 *\/   121,  120,  120,  120,  119,  116,  444,  201,  568,  354,\n+ \/*   920 *\/  1586,  575,    2, 1245,  840,  841,  842, 1562,  317, 1212,\n+ \/*   930 *\/   146,    6,  409,  255,  254,  253,  206, 1327,    9, 1196,\n+ \/*   940 *\/   262,   71,   71,  424,  122,  122,  122,  122,  121,  121,\n+ \/*   950 *\/   120,  120,  120,  119,  116,  444,  125,  126,   80, 1217,\n+ \/*   960 *\/  1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,\n+ \/*   970 *\/   124,  568,  284,  284,  568, 1213,  409,  574,  313, 1245,\n+ \/*   980 *\/   349, 1296,  352,  419,  317,  565,  146,  491,  525, 1643,\n+ \/*   990 *\/   395,  371,  491, 1327,   70,   70, 1295,   71,   71,  240,\n+ \/*  1000 *\/  1325,  104,   80, 1217, 1217, 1050, 1053, 1040, 1040,  123,\n+ \/*  1010 *\/   123,  124,  124,  124,  124,  122,  122,  122,  122,  121,\n+ \/*  1020 *\/   121,  120,  120,  120,  119,  116,  444, 1114,  284,  284,\n+ \/*  1030 *\/   428,  448, 1525, 1213,  439,  284,  284, 1489, 1352,  311,\n+ \/*  1040 *\/   474,  565, 1115,  971,  491,  491,  217, 1263,  565, 1538,\n+ \/*  1050 *\/   568,  972,  207,  568, 1027,  240,  383, 1116,  519,  122,\n+ \/*  1060 *\/   122,  122,  122,  121,  121,  120,  120,  120,  119,  116,\n+ \/*  1070 *\/   444, 1018,  107,   71,   71, 1017,   13,   13,  912,  568,\n+ \/*  1080 *\/  1495,  568,  284,  284,   97,  526,  491,  448,  913, 1326,\n+ \/*  1090 *\/  1322,  545,  409,  284,  284,  565,  151,  209, 1495, 1497,\n+ \/*  1100 *\/   262,  450,   55,   55,   56,   56,  565, 1017, 1017, 1019,\n+ \/*  1110 *\/   443,  332,  409,  527,   12,  295,  125,  126,   80, 1217,\n+ \/*  1120 *\/  1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,\n+ \/*  1130 *\/   124,  347,  409,  864, 1534, 1213,  125,  126,   80, 1217,\n+ \/*  1140 *\/  1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,\n+ \/*  1150 *\/   124, 1137, 1641,  474, 1641,  371,  125,  114,   80, 1217,\n+ \/*  1160 *\/  1217, 1050, 1053, 1040, 1040,  123,  123,  124,  124,  124,\n+ \/*  1170 *\/   124, 1495,  329,  474,  331,  122,  122,  122,  122,  121,\n+ \/*  1180 *\/   121,  120,  120,  120,  119,  116,  444,  203, 1419,  568,\n+ \/*  1190 *\/  1294,  864,  464, 1213,  436,  122,  122,  122,  122,  121,\n+ \/*  1200 *\/   121,  120,  120,  120,  119,  116,  444,  553, 1137, 1642,\n+ \/*  1210 *\/   539, 1642,   15,   15,  892,  122,  122,  122,  122,  121,\n+ \/*  1220 *\/   121,  120,  120,  120,  119,  116,  444,  568,  298,  538,\n+ \/*  1230 *\/  1135, 1419, 1559, 1560, 1331,  409,    6,    6, 1169, 1268,\n+ \/*  1240 *\/   415,  320,  284,  284, 1419,  508,  565,  525,  300,  457,\n+ \/*  1250 *\/    43,   43,  568,  893,   12,  565,  330,  478,  425,  407,\n+ \/*  1260 *\/   126,   80, 1217, 1217, 1050, 1053, 1040, 1040,  123,  123,\n+ \/*  1270 *\/   124,  124,  124,  124,  568,   57,   57,  288, 1192, 1419,\n+ \/*  1280 *\/   496,  458,  392,  392,  391,  273,  389, 1135, 1558,  849,\n+ \/*  1290 *\/  1169,  407,    6,  568,  321, 1158,  470,   44,   44, 1557,\n+ \/*  1300 *\/  1114,  426,  234,    6,  323,  256,  540,  256, 1158,  431,\n+ \/*  1310 *\/   568, 1158,  322,   17,  487, 1115,   58,   58,  122,  122,\n+ \/*  1320 *\/   122,  122,  121,  121,  120,  120,  120,  119,  116,  444,\n+ \/*  1330 *\/  1116,  216,  481,   59,   59, 1192, 1193, 1194,  111,  560,\n+ \/*  1340 *\/   324,    4,  236,  456,  526,  568,  237,  456,  568,  437,\n+ \/*  1350 *\/   168,  556,  420,  141,  479,  563,  568,  293,  568, 1095,\n+ \/*  1360 *\/   568,  293,  568, 1095,  531,  568,  872,    8,   60,   60,\n+ \/*  1370 *\/   235,   61,   61,  568,  414,  568,  414,  568,  445,   62,\n+ \/*  1380 *\/    62,   45,   45,   46,   46,   47,   47,  199,   49,   49,\n+ \/*  1390 *\/   557,  568,  359,  568,  100,  486,   50,   50,   63,   63,\n+ \/*  1400 *\/    64,   64,  561,  415,  535,  410,  568, 1027,  568,  534,\n+ \/*  1410 *\/   316,  559,  316,  559,   65,   65,   14,   14,  568, 1027,\n+ \/*  1420 *\/   568,  512,  932,  872, 1018,  109,  109,  931, 1017,   66,\n+ \/*  1430 *\/    66,  131,  131,  110,  451,  445,  570,  569,  416,  177,\n+ \/*  1440 *\/  1017,  132,  132,   67,   67,  568,  467,  568,  932,  471,\n+ \/*  1450 *\/  1364,  283,  226,  931,  315, 1363,  407,  568,  459,  407,\n+ \/*  1460 *\/  1017, 1017, 1019,  239,  407,   86,  213, 1350,   52,   52,\n+ \/*  1470 *\/    68,   68, 1017, 1017, 1019, 1020,   27, 1585, 1180,  447,\n+ \/*  1480 *\/    69,   69,  288,   97,  108, 1541,  106,  392,  392,  391,\n+ \/*  1490 *\/   273,  389,  568,  879,  849,  883,  568,  111,  560,  466,\n+ \/*  1500 *\/     4,  568,  152,   30,   38,  568, 1132,  234,  396,  323,\n+ \/*  1510 *\/   111,  560,  527,    4,  563,   53,   53,  322,  568,  163,\n+ \/*  1520 *\/   163,  568,  337,  468,  164,  164,  333,  563,   76,   76,\n+ \/*  1530 *\/   568,  289, 1514,  568,   31, 1513,  568,  445,  338,  483,\n+ \/*  1540 *\/   100,   54,   54,  344,   72,   72,  296,  236, 1080,  557,\n+ \/*  1550 *\/   445,  879, 1360,  134,  134,  168,   73,   73,  141,  161,\n+ \/*  1560 *\/   161, 1574,  557,  535,  568,  319,  568,  348,  536, 1009,\n+ \/*  1570 *\/   473,  261,  261,  891,  890,  235,  535,  568, 1027,  568,\n+ \/*  1580 *\/   475,  534,  261,  367,  109,  109,  521,  136,  136,  130,\n+ \/*  1590 *\/   130, 1027,  110,  366,  445,  570,  569,  109,  109, 1017,\n+ \/*  1600 *\/   162,  162,  156,  156,  568,  110, 1080,  445,  570,  569,\n+ \/*  1610 *\/   410,  351, 1017,  568,  353,  316,  559,  568,  343,  568,\n+ \/*  1620 *\/   100,  497,  357,  258,  100,  898,  899,  140,  140,  355,\n+ \/*  1630 *\/  1310, 1017, 1017, 1019, 1020,   27,  139,  139,  362,  451,\n+ \/*  1640 *\/   137,  137,  138,  138, 1017, 1017, 1019, 1020,   27, 1180,\n+ \/*  1650 *\/   447,  568,  372,  288,  111,  560, 1021,    4,  392,  392,\n+ \/*  1660 *\/   391,  273,  389,  568, 1141,  849,  568, 1076,  568,  258,\n+ \/*  1670 *\/   492,  563,  568,  211,   75,   75,  555,  962,  234,  261,\n+ \/*  1680 *\/   323,  111,  560,  929,    4,  113,   77,   77,  322,   74,\n+ \/*  1690 *\/    74,   42,   42, 1373,  445,   48,   48, 1418,  563,  974,\n+ \/*  1700 *\/   975, 1092, 1091, 1092, 1091,  862,  557,  150,  930, 1346,\n+ \/*  1710 *\/   113, 1358,  554, 1424, 1021, 1275, 1266, 1254,  236, 1253,\n+ \/*  1720 *\/  1255,  445, 1593, 1343,  308,  276,  168,  309,   11,  141,\n+ \/*  1730 *\/   393,  310,  232,  557, 1405, 1027,  335,  291, 1400,  219,\n+ \/*  1740 *\/   336,  109,  109,  936,  297, 1410,  235,  341,  477,  110,\n+ \/*  1750 *\/   502,  445,  570,  569, 1393, 1409, 1017,  400, 1293,  365,\n+ \/*  1760 *\/   223, 1486, 1027, 1485, 1355, 1356, 1354, 1353,  109,  109,\n+ \/*  1770 *\/   204, 1596, 1232,  558,  265,  218,  110,  205,  445,  570,\n+ \/*  1780 *\/   569,  410,  387, 1017, 1533,  179,  316,  559, 1017, 1017,\n+ \/*  1790 *\/  1019, 1020,   27,  230, 1531, 1229,   79,  560,   85,    4,\n+ \/*  1800 *\/   418,  215,  548,   81,   84,  188, 1406,  173,  181,  461,\n+ \/*  1810 *\/   451,   35,  462,  563,  183, 1017, 1017, 1019, 1020,   27,\n+ \/*  1820 *\/   184, 1491,  185,  186,  495,  242,   98,  398, 1412,   36,\n+ \/*  1830 *\/  1411,  484,   91,  469,  401, 1414,  445,  192, 1480,  246,\n+ \/*  1840 *\/  1502,  490,  346,  277,  248,  196,  493,  511,  557,  350,\n+ \/*  1850 *\/  1256,  249,  250,  403, 1313, 1312,  111,  560,  432,    4,\n+ \/*  1860 *\/  1311, 1304,   93, 1611,  883, 1610,  224,  404,  434,  520,\n+ \/*  1870 *\/   263,  435, 1579,  563, 1283, 1282,  364, 1027,  306, 1281,\n+ \/*  1880 *\/   264, 1609, 1565,  109,  109,  370, 1303,  307, 1564,  438,\n+ \/*  1890 *\/   128,  110, 1378,  445,  570,  569,  445,  546, 1017,   10,\n+ \/*  1900 *\/  1466,  105,  381, 1377,   34,  572,   99, 1336,  557,  314,\n+ \/*  1910 *\/  1186,  530,  272,  274,  379,  210, 1335,  547,  385,  386,\n+ \/*  1920 *\/   275,  573, 1251, 1246,  411,  412, 1518,  165,  178, 1519,\n+ \/*  1930 *\/  1017, 1017, 1019, 1020,   27, 1517, 1516, 1027,   78,  147,\n+ \/*  1940 *\/   166,  220,  221,  109,  109,  836,  304,  167,  446,  212,\n+ \/*  1950 *\/   318,  110,  231,  445,  570,  569,  144, 1090, 1017, 1088,\n+ \/*  1960 *\/   326,  180,  169, 1212,  182,  334,  238,  915,  241, 1104,\n+ \/*  1970 *\/   187,  170,  171,  421,   87,   88,  423,  189,   89,   90,\n+ \/*  1980 *\/   172, 1107,  243, 1103,  244,  158,   18,  245,  345,  247,\n+ \/*  1990 *\/  1017, 1017, 1019, 1020,   27,  261, 1096,  193, 1226,  489,\n+ \/*  2000 *\/   194,   37,  366,  851,  494,  251,  195,  506,   92,   19,\n+ \/*  2010 *\/   498,  358,   20,  503,  881,  361,   94,  894,  305,  159,\n+ \/*  2020 *\/   513,   39,   95, 1174,  160, 1056,  966, 1143,   96,  174,\n+ \/*  2030 *\/  1142,  225,  280,  282,  198,  960,  113, 1164, 1160,  260,\n+ \/*  2040 *\/    21,   22,   23, 1162, 1168, 1167, 1148,   24,   33,   25,\n+ \/*  2050 *\/   202,  542,   26,  100, 1071,  102, 1057,  103,    7, 1055,\n+ \/*  2060 *\/  1059, 1113, 1060, 1112,  266,  267,   28,   40,  390, 1022,\n+ \/*  2070 *\/   863,  112,   29,  564, 1182, 1181,  268,  176,  143,  925,\n+ \/*  2080 *\/  1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,\n+ \/*  2090 *\/  1242, 1242, 1242, 1242,  269, 1602, 1242, 1601,\n@@ -160264,223 +164326,229 @@\n- \/*     0 *\/   192,  273,  274,  275,  192,  192,  273,  274,  275,  192,\n- \/*    10 *\/   218,  215,  192,  218,  192,  212,  234,  235,  205,   19,\n- \/*    20 *\/    11,  192,  294,  215,  216,  203,  192,  203,  209,  210,\n- \/*    30 *\/   211,   31,  215,  216,  205,  215,  216,  215,  216,   39,\n- \/*    40 *\/   227,  215,  229,   43,   44,   45,   46,   47,   48,   49,\n- \/*    50 *\/    50,   51,   52,   53,   54,   55,   56,   57,  192,   19,\n- \/*    60 *\/   238,  239,  238,  239,  215,  273,  274,  275,  273,  274,\n- \/*    70 *\/   275,  237,   21,  251,  252,  251,  273,  274,  275,  255,\n- \/*    80 *\/   256,  215,  216,   43,   44,   45,   46,   47,   48,   49,\n- \/*    90 *\/    50,   51,   52,   53,   54,   55,   56,   57,  209,  210,\n- \/*   100 *\/   211,   76,  102,  103,  104,  105,  106,  107,  108,  109,\n- \/*   110 *\/   110,  111,  112,   59,   89,  111,  112,   92,  252,  307,\n- \/*   120 *\/   308,  313,  314,  112,  312,   59,   86,  261,   88,   19,\n- \/*   130 *\/   313,   80,  315,  313,  314,   25,  127,  128,   54,   55,\n- \/*   140 *\/    56,   57,  102,  103,  104,  105,  106,  107,  108,  109,\n- \/*   150 *\/   110,  111,  112,   43,   44,   45,   46,   47,   48,   49,\n- \/*   160 *\/    50,   51,   52,   53,   54,   55,   56,   57,  192,  115,\n- \/*   170 *\/   116,  117,  118,  122,  192,  121,  122,  123,  202,   69,\n- \/*   180 *\/   204,  115,  116,  117,  192,  131,  102,  103,  104,  105,\n- \/*   190 *\/   106,  107,  108,  109,  110,  111,  112,  215,  216,   19,\n- \/*   200 *\/    54,   55,   56,   57,   58,  108,  109,  110,  111,  112,\n- \/*   210 *\/   192,  160,  102,  103,  104,  105,  106,  107,  108,  109,\n- \/*   220 *\/   110,  111,  112,   43,   44,   45,   46,   47,   48,   49,\n- \/*   230 *\/    50,   51,   52,   53,   54,   55,   56,   57,   19,   46,\n- \/*   240 *\/    47,   48,   49,   24,  248,  192,  250,   67,  102,  103,\n- \/*   250 *\/   104,  105,  106,  107,  108,  109,  110,  111,  112,  277,\n- \/*   260 *\/   127,  128,   43,   44,   45,   46,   47,   48,   49,   50,\n- \/*   270 *\/    51,   52,   53,   54,   55,   56,   57,   26,  164,  165,\n- \/*   280 *\/   272,  263,  102,  103,  104,  105,  106,  107,  108,  109,\n- \/*   290 *\/   110,  111,  112,  184,  185,  186,  187,  188,  189,  186,\n- \/*   300 *\/   187,  188,  189,  194,   76,  196,  229,  194,   19,  196,\n- \/*   310 *\/    59,  192,  203,  120,   59,   87,  203,   89,  310,  311,\n- \/*   320 *\/    92,  102,  103,  104,  105,  106,  107,  108,  109,  110,\n- \/*   330 *\/   111,  112,   43,   44,   45,   46,   47,   48,   49,   50,\n- \/*   340 *\/    51,   52,   53,   54,   55,   56,   57,  238,  239,   73,\n- \/*   350 *\/   231,  238,  239,   22,   23,  100,   25,   81,  305,  306,\n- \/*   360 *\/   251,   23,   25,   25,  251,  272,  115,  116,  117,  214,\n- \/*   370 *\/   115,  116,  144,  192,  265,  120,  114,  222,  265,  102,\n- \/*   380 *\/   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,\n- \/*   390 *\/   192,  102,  103,  104,  105,  106,  107,  108,  109,  110,\n- \/*   400 *\/   111,  112,  126,  310,  311,  192,  297,  152,  153,  154,\n- \/*   410 *\/   297,  149,  192,  137,  138,   19,  192,  100,  192,   23,\n- \/*   420 *\/    22,  106,  107,  108,  109,  110,  111,  112,  215,  216,\n- \/*   430 *\/   106,  107,  101,  116,  192,  215,  216,  120,  149,   43,\n- \/*   440 *\/    44,   45,   46,   47,   48,   49,   50,   51,   52,   53,\n- \/*   450 *\/    54,   55,   56,   57,  117,  117,  192,   59,   19,  187,\n- \/*   460 *\/    59,  189,   23,  282,  240,  252,  194,  192,  196,  152,\n- \/*   470 *\/   153,  154,  252,   72,  261,  203,  152,   25,  154,  142,\n- \/*   480 *\/   142,  261,   43,   44,   45,   46,   47,   48,   49,   50,\n- \/*   490 *\/    51,   52,   53,   54,   55,   56,   57,  192,  102,  103,\n- \/*   500 *\/   104,  105,  106,  107,  108,  109,  110,  111,  112,  267,\n- \/*   510 *\/   238,  239,  237,  115,  116,  117,  115,  116,  117,  192,\n- \/*   520 *\/    59,  118,   16,  251,  121,  122,  123,  303,   19,  303,\n- \/*   530 *\/    59,  267,   23,   72,  131,  308,   22,  265,   22,  312,\n- \/*   540 *\/    24,  102,  103,  104,  105,  106,  107,  108,  109,  110,\n- \/*   550 *\/   111,  112,   43,   44,   45,   46,   47,   48,   49,   50,\n- \/*   560 *\/    51,   52,   53,   54,   55,   56,   57,   19,   81,  297,\n- \/*   570 *\/   295,   23,  192,   59,  203,   59,  115,  116,  117,  108,\n- \/*   580 *\/   192,   73,   25,   77,  192,   79,  115,  116,  117,  137,\n- \/*   590 *\/   138,   43,   44,   45,   46,   47,   48,   49,   50,   51,\n- \/*   600 *\/    52,   53,   54,   55,   56,   57,  119,  215,  216,  238,\n- \/*   610 *\/   239,  102,  103,  104,  105,  106,  107,  108,  109,  110,\n- \/*   620 *\/   111,  112,  251,  192,  137,  138,   59,  234,  235,  115,\n- \/*   630 *\/   116,  117,  116,   76,  126,  127,  128,   19,  192,  268,\n- \/*   640 *\/    19,   23,   22,  192,  252,   24,   89,  300,  301,   92,\n- \/*   650 *\/   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,\n- \/*   660 *\/   112,   43,   44,   45,   46,   47,   48,   49,   50,   51,\n- \/*   670 *\/    52,   53,   54,   55,   56,   57,   19,  192,  192,   59,\n- \/*   680 *\/    23,  192,  115,  116,  117,  200,  240,  307,  308,   22,\n- \/*   690 *\/   205,   81,  312,  262,   22,  192,  133,   22,  135,  136,\n- \/*   700 *\/    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,\n- \/*   710 *\/    53,   54,   55,   56,   57,  197,   95,  150,  215,  216,\n- \/*   720 *\/   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,\n- \/*   730 *\/   112,   59,  192,  112,   59,  115,  116,  117,  192,  118,\n- \/*   740 *\/   119,  120,  121,  122,  123,  124,   19,  137,  138,  303,\n- \/*   750 *\/    23,  130,  192,  267,  192,  252,  267,  306,  203,  102,\n- \/*   760 *\/   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,\n- \/*   770 *\/    43,   44,   45,   46,   47,   48,   49,   50,   51,   52,\n- \/*   780 *\/    53,   54,   55,   56,   57,   19,  240,  115,  116,  117,\n- \/*   790 *\/   115,  116,  117,  238,  239,  222,  192,  224,  280,  237,\n- \/*   800 *\/   240,  192,  284,  192,   59,  232,  251,  140,  204,   43,\n- \/*   810 *\/    44,   45,   46,   47,   48,   49,   50,   51,   52,   53,\n- \/*   820 *\/    54,   55,   56,   57,  192,   35,  215,  216,  192,  102,\n- \/*   830 *\/   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,\n- \/*   840 *\/    59,  230,  192,  192,  238,  239,  237,  215,  216,  303,\n- \/*   850 *\/   308,  215,  216,   16,  312,   19,   66,  251,  126,  127,\n- \/*   860 *\/   128,  116,  230,  303,   74,  203,  215,  216,  102,  103,\n- \/*   870 *\/   104,  105,  106,  107,  108,  109,  110,  111,  112,   43,\n- \/*   880 *\/    44,   45,   46,   47,   48,   49,   50,   51,   52,   53,\n- \/*   890 *\/    54,   55,   56,   57,  192,  212,  115,  116,  117,   19,\n- \/*   900 *\/   238,  239,  192,  252,    7,    8,    9,  192,  192,  238,\n- \/*   910 *\/   239,  308,  262,  251,   77,  312,   79,  215,  216,  129,\n- \/*   920 *\/   210,  211,  251,  142,  158,   45,   46,   47,   48,   49,\n- \/*   930 *\/    50,   51,   52,   53,   54,   55,   56,   57,  102,  103,\n- \/*   940 *\/   104,  105,  106,  107,  108,  109,  110,  111,  112,   12,\n- \/*   950 *\/    59,  192,  192,  237,  252,  243,  192,  192,  126,  127,\n- \/*   960 *\/   128,  192,  308,  203,   27,  253,  312,  308,  285,  207,\n- \/*   970 *\/   208,  312,  157,  290,  159,  215,  216,  262,  192,   42,\n- \/*   980 *\/   215,  216,  102,  103,  104,  105,  106,  107,  108,  109,\n- \/*   990 *\/   110,  111,  112,  283,  158,  230,  237,  160,  238,  239,\n- \/*  1000 *\/    63,  215,  216,  192,  192,   12,  115,  116,  117,   22,\n- \/*  1010 *\/    73,  251,  252,  192,   19,  192,  230,  239,   24,   24,\n- \/*  1020 *\/    27,  261,  210,  211,   99,  192,  215,  216,  225,  251,\n- \/*  1030 *\/   192,  192,  263,  142,   19,   42,  215,  216,   43,   44,\n- \/*  1040 *\/    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,\n- \/*  1050 *\/    55,   56,   57,   59,   19,  291,   63,  132,   43,   44,\n- \/*  1060 *\/    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,\n- \/*  1070 *\/    55,   56,   57,  252,   22,   23,   22,   25,   43,   44,\n- \/*  1080 *\/    45,   46,   47,   48,   49,   50,   51,   52,   53,   54,\n- \/*  1090 *\/    55,   56,   57,  106,  107,  283,  263,  102,  103,  104,\n- \/*  1100 *\/   105,  106,  107,  108,  109,  110,  111,  112,   59,  192,\n- \/*  1110 *\/   116,  144,   29,   59,  291,  192,   33,  102,  103,  104,\n- \/*  1120 *\/   105,  106,  107,  108,  109,  110,  111,  112,  192,  291,\n- \/*  1130 *\/   163,   19,  215,  216,   15,  192,  108,  102,  103,  104,\n- \/*  1140 *\/   105,  106,  107,  108,  109,  110,  111,  112,   65,  192,\n- \/*  1150 *\/    66,  215,  216,  101,  231,  106,  107,   19,  215,  216,\n- \/*  1160 *\/   192,  212,  134,  114,  115,  116,  117,  139,  119,   85,\n- \/*  1170 *\/   116,  207,  208,  230,  192,   19,  127,  192,   94,   60,\n- \/*  1180 *\/    59,  192,   44,   45,   46,   47,   48,   49,   50,   51,\n- \/*  1190 *\/    52,   53,   54,   55,   56,   57,  192,   76,  192,   31,\n- \/*  1200 *\/   192,  152,   46,  154,  215,  216,  192,   39,   87,  192,\n- \/*  1210 *\/    89,   19,   20,   92,   22,  192,   22,   23,   22,  230,\n- \/*  1220 *\/   263,  215,  216,  215,  216,  137,  138,  115,   36,  145,\n- \/*  1230 *\/   128,  192,  215,  216,   22,   23,  115,  116,  117,  290,\n- \/*  1240 *\/   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,\n- \/*  1250 *\/   112,   59,  192,  151,  215,  216,  192,   61,  203,  298,\n- \/*  1260 *\/   299,  192,  192,   71,   25,  144,  203,  192,  203,  230,\n- \/*  1270 *\/   114,   19,   20,   81,   22,  215,  216,  263,  192,  215,\n- \/*  1280 *\/   216,  255,  256,  203,  215,  216,  130,   19,   36,  192,\n- \/*  1290 *\/   215,  216,  100,  238,  239,  101,   25,  192,  106,  107,\n- \/*  1300 *\/    48,  238,  239,  238,  239,  113,  251,  115,  116,  117,\n- \/*  1310 *\/   192,   59,  120,  101,  251,  192,  251,  192,  238,  239,\n- \/*  1320 *\/   215,  216,  192,   71,   46,  243,  192,   25,   25,  137,\n- \/*  1330 *\/   138,  251,  192,  215,  216,  253,   25,   85,  215,  216,\n- \/*  1340 *\/   215,  216,   90,  243,  152,  153,  154,  155,  156,  215,\n- \/*  1350 *\/   216,  192,  100,  253,  243,  215,  216,  192,  106,  107,\n- \/*  1360 *\/   243,  192,  148,  149,  253,  113,  192,  115,  116,  117,\n- \/*  1370 *\/   253,  192,  120,  192,  215,  216,  192,   23,  192,   25,\n- \/*  1380 *\/   215,  216,  192,  115,  215,  216,   22,  148,   24,  215,\n- \/*  1390 *\/   216,  192,  114,  192,  215,  216,  215,  216,  134,  215,\n- \/*  1400 *\/   216,  215,  216,  139,  152,  153,  154,  155,  156,    0,\n- \/*  1410 *\/     1,    2,  141,   23,    5,   25,  215,  216,   24,   10,\n- \/*  1420 *\/    11,   12,   13,   14,    1,    2,   17,  125,    5,   19,\n- \/*  1430 *\/    20,  268,   22,   10,   11,   12,   13,   14,  192,   30,\n- \/*  1440 *\/    17,   32,   23,   23,   25,   25,   36,  144,   23,   40,\n- \/*  1450 *\/    25,  192,  141,   30,  192,   32,   23,   22,   25,    5,\n- \/*  1460 *\/   128,  215,  216,   40,   10,   11,   12,   13,   14,   59,\n- \/*  1470 *\/    23,   17,   25,  192,  215,  216,  192,  215,  216,   70,\n- \/*  1480 *\/    23,   71,   25,  151,   30,  192,   32,   78,   53,  192,\n- \/*  1490 *\/    81,  192,  192,   70,   40,   85,  215,  216,  119,  120,\n- \/*  1500 *\/    90,   78,   59,  254,   81,  192,  192,   98,  215,  216,\n- \/*  1510 *\/   100,   23,   59,   25,  215,  216,  106,  107,   23,  192,\n- \/*  1520 *\/    25,   98,   19,  113,   70,  115,  116,  117,  215,  216,\n- \/*  1530 *\/   120,  192,   78,  192,  140,   81,   19,   20,   23,   22,\n- \/*  1540 *\/    25,  132,  215,  216,  192,  192,  137,  138,  192,   23,\n- \/*  1550 *\/   192,   25,   98,   36,  192,  132,  215,  216,  192,  116,\n- \/*  1560 *\/   137,  138,  152,  153,  154,  155,  156,  215,  216,  116,\n- \/*  1570 *\/   161,  215,  216,  215,  216,  120,   59,  215,  216,    7,\n- \/*  1580 *\/     8,  215,  216,  192,  161,  130,  132,  192,   71,   83,\n- \/*  1590 *\/    84,  137,  138,   59,  192,  192,   19,   20,  192,   22,\n- \/*  1600 *\/    97,  225,   85,  192,   23,  192,   25,   90,  192,  192,\n- \/*  1610 *\/   215,  216,  152,   36,  154,  161,  192,  100,  215,  216,\n- \/*  1620 *\/   192,  215,  216,  106,  107,  225,  215,  216,  192,  192,\n- \/*  1630 *\/   113,  192,  115,  116,  117,  257,   59,  120,  192,  215,\n- \/*  1640 *\/   216,  152,  192,  154,  192,   23,  317,   25,   71,  235,\n- \/*  1650 *\/   116,  215,  216,  192,  215,  216,  192,  192,  192,  192,\n- \/*  1660 *\/   192,  192,  192,  192,  192,  215,  216,  215,  216,  152,\n- \/*  1670 *\/   153,  154,  155,  156,  192,  192,  287,  100,  286,  241,\n- \/*  1680 *\/   254,  254,  242,  106,  107,  108,  254,  213,  254,  190,\n- \/*  1690 *\/   113,  270,  115,  116,  117,  296,  266,  120,  219,  258,\n- \/*  1700 *\/   244,  270,  258,   19,   20,  228,   22,  292,  266,  224,\n- \/*  1710 *\/   292,  218,  218,  195,  218,  270,  258,   60,  245,  270,\n- \/*  1720 *\/    36,  245,  244,  248,   19,   20,  242,   22,  248,  152,\n- \/*  1730 *\/   153,  154,  155,  156,  244,  140,  199,  199,  279,   38,\n- \/*  1740 *\/   199,   36,  150,   59,  296,  149,   22,  296,   18,   43,\n- \/*  1750 *\/   236,  199,  233,   18,  198,   71,  293,  236,  271,  236,\n- \/*  1760 *\/   269,  236,  148,  271,   59,  245,  269,  245,  282,  271,\n- \/*  1770 *\/   199,  198,  233,  245,  293,  233,   71,  245,  157,   62,\n- \/*  1780 *\/    22,  199,  198,  220,  100,  199,  198,  220,  199,  289,\n- \/*  1790 *\/   106,  107,  288,  114,  226,  198,  217,  113,   64,  115,\n- \/*  1800 *\/   116,  117,  217,   22,  120,  100,  223,  217,  217,  164,\n- \/*  1810 *\/   223,  106,  107,  220,  125,   24,  217,  219,  113,  217,\n- \/*  1820 *\/   115,  116,  117,  217,  311,  120,  226,  112,  304,  281,\n- \/*  1830 *\/   281,  220,  114,  143,  260,  259,  152,  153,  154,  155,\n- \/*  1840 *\/   156,  199,   91,  316,   82,  316,  147,  144,   22,  199,\n- \/*  1850 *\/   249,  276,  157,  146,  260,  145,  278,  152,  153,  154,\n- \/*  1860 *\/   155,  156,  259,  248,  260,  260,  259,  259,  249,  245,\n- \/*  1870 *\/   247,  246,   25,  264,  264,  201,   13,    6,  193,  193,\n- \/*  1880 *\/   212,  206,  191,  191,  191,  212,  206,  221,  212,  212,\n- \/*  1890 *\/   221,  213,    4,  206,  213,  212,    3,   22,  162,   15,\n- \/*  1900 *\/    23,   16,   23,  138,  150,  129,   25,   24,  141,   20,\n- \/*  1910 *\/    16,  143,    1,  141,  302,  302,  299,  129,  129,   61,\n- \/*  1920 *\/   150,   53,   53,   37,  129,   53,   53,  115,    1,   34,\n- \/*  1930 *\/   140,    5,   22,  114,  160,   68,   75,   25,   68,   41,\n- \/*  1940 *\/   140,  114,   24,   20,   19,  130,  124,   67,   24,   67,\n- \/*  1950 *\/    22,   22,   22,   96,   23,   22,   59,   22,   67,   37,\n- \/*  1960 *\/    28,   23,  148,   22,   25,   23,   23,   23,   23,   22,\n- \/*  1970 *\/   140,   97,   23,   23,  115,   22,  142,   25,   88,   75,\n- \/*  1980 *\/    34,   44,   34,   75,   23,   34,   86,   22,   34,   34,\n- \/*  1990 *\/    34,   24,   93,   25,   25,   23,   34,   23,   23,   23,\n- \/*  2000 *\/    23,   11,   23,   25,   22,   22,   22,    1,   23,   23,\n- \/*  2010 *\/    22,   22,   25,   15,   23,    1,  140,   25,  140,  318,\n- \/*  2020 *\/   318,  134,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2030 *\/   318,  318,  140,  318,  318,  318,  140,  318,  318,  318,\n- \/*  2040 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2050 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2060 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2070 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2080 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2090 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2100 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2110 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2120 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2130 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2140 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2150 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2160 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2170 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2180 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2190 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2200 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2210 *\/   318,  318,  318,  318,  318,  318,  318,  318,  318,  318,\n- \/*  2220 *\/   318,\n+ \/*     0 *\/   193,  193,  193,  274,  275,  276,  193,  274,  275,  276,\n+ \/*    10 *\/   193,  223,  219,  225,  206,  210,  211,  212,  193,   19,\n+ \/*    20 *\/   219,  233,  216,  216,  217,  216,  217,  193,  295,  216,\n+ \/*    30 *\/   217,   31,  193,  216,  217,  193,  228,  213,  230,   39,\n+ \/*    40 *\/   206,  216,  217,   43,   44,   45,   46,   47,   48,   49,\n+ \/*    50 *\/    50,   51,   52,   53,   54,   55,   56,   57,  193,   19,\n+ \/*    60 *\/   185,  186,  187,  188,  189,  190,  253,  274,  275,  276,\n+ \/*    70 *\/   195,  193,  197,  193,  261,  274,  275,  276,  253,  204,\n+ \/*    80 *\/   238,  204,   81,   43,   44,   45,   46,   47,   48,   49,\n+ \/*    90 *\/    50,   51,   52,   53,   54,   55,   56,   57,  274,  275,\n+ \/*   100 *\/   276,  262,  102,  103,  104,  105,  106,  107,  108,  109,\n+ \/*   110 *\/   110,  111,  112,  113,  239,  240,  239,  240,  210,  211,\n+ \/*   120 *\/   212,  314,  315,  314,   59,  316,   86,  252,   88,  252,\n+ \/*   130 *\/    19,  314,  315,  256,  257,  113,   25,   72,  296,  138,\n+ \/*   140 *\/   139,  266,  102,  103,  104,  105,  106,  107,  108,  109,\n+ \/*   150 *\/   110,  111,  112,  113,   43,   44,   45,   46,   47,   48,\n+ \/*   160 *\/    49,   50,   51,   52,   53,   54,   55,   56,   57,   81,\n+ \/*   170 *\/   292,   59,  292,  298,  108,  109,  110,  111,  112,  113,\n+ \/*   180 *\/    69,  116,  117,  118,   72,  106,  107,  193,  111,  112,\n+ \/*   190 *\/   113,   54,   55,   56,   57,   58,  102,  103,  104,  105,\n+ \/*   200 *\/   106,  107,  108,  109,  110,  111,  112,  113,  120,   25,\n+ \/*   210 *\/   216,  217,  145,  102,  103,  104,  105,  106,  107,  108,\n+ \/*   220 *\/   109,  110,  111,  112,  113,  231,  138,  139,  116,  117,\n+ \/*   230 *\/   118,  164,  153,   19,  155,   54,   55,   56,   57,  102,\n+ \/*   240 *\/   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,\n+ \/*   250 *\/   113,  128,  129,   46,   47,   48,   49,   43,   44,   45,\n+ \/*   260 *\/    46,   47,   48,   49,   50,   51,   52,   53,   54,   55,\n+ \/*   270 *\/    56,   57,  216,  193,   25,   59,  193,   19,  165,  166,\n+ \/*   280 *\/   193,   67,   24,  102,  103,  104,  105,  106,  107,  108,\n+ \/*   290 *\/   109,  110,  111,  112,  113,   73,  216,  217,   59,  216,\n+ \/*   300 *\/   217,   43,   44,   45,   46,   47,   48,   49,   50,   51,\n+ \/*   310 *\/    52,   53,   54,   55,   56,   57,  102,  103,  104,  105,\n+ \/*   320 *\/   106,  107,  108,  109,  110,  111,  112,  113,  121,  145,\n+ \/*   330 *\/    59,  193,  116,  117,  118,  119,  273,  204,  122,  123,\n+ \/*   340 *\/   124,   19,   20,  134,   22,  136,  137,   19,  132,  127,\n+ \/*   350 *\/   128,  129,   24,   22,   23,  116,  117,  118,   36,  193,\n+ \/*   360 *\/   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,\n+ \/*   370 *\/   112,  113,  239,  240,  311,  312,  215,  106,  107,  241,\n+ \/*   380 *\/    19,   59,  216,  217,  223,  252,  115,  116,  117,  118,\n+ \/*   390 *\/   151,  120,   26,   71,  193,  308,  309,  193,  149,  128,\n+ \/*   400 *\/   313,  216,  269,   81,   43,   44,   45,   46,   47,   48,\n+ \/*   410 *\/    49,   50,   51,   52,   53,   54,   55,   56,   57,  253,\n+ \/*   420 *\/   216,  217,  100,   95,  153,   59,  155,  261,  106,  107,\n+ \/*   430 *\/    25,  193,  101,  193,  193,  231,  114,   25,  116,  117,\n+ \/*   440 *\/   118,  113,  304,  121,  193,  204,   59,  119,  120,  121,\n+ \/*   450 *\/   122,  123,  124,  125,  216,  217,  193,  216,  217,  131,\n+ \/*   460 *\/   138,  139,  230,  102,  103,  104,  105,  106,  107,  108,\n+ \/*   470 *\/   109,  110,  111,  112,  113,  153,  154,  155,  156,  157,\n+ \/*   480 *\/   239,  240,  116,  117,  118,   76,  193,   23,   19,   25,\n+ \/*   490 *\/    22,  253,   23,  252,  253,  108,   87,  204,   89,  261,\n+ \/*   500 *\/   198,   92,  261,  116,  117,  118,  193,  306,  307,  216,\n+ \/*   510 *\/   217,  150,   43,   44,   45,   46,   47,   48,   49,   50,\n+ \/*   520 *\/    51,   52,   53,   54,   55,   56,   57,   59,  193,  216,\n+ \/*   530 *\/   217,   19,  239,  240,  283,   23,  106,  107,  108,  109,\n+ \/*   540 *\/   110,  111,  112,  113,   73,  252,  253,  142,  308,  309,\n+ \/*   550 *\/   138,  139,   81,  313,  145,   43,   44,   45,   46,   47,\n+ \/*   560 *\/    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,\n+ \/*   570 *\/   307,  102,  103,  104,  105,  106,  107,  108,  109,  110,\n+ \/*   580 *\/   111,  112,  113,  281,  116,  117,  118,  285,   23,  193,\n+ \/*   590 *\/    25,  119,   59,  193,  122,  123,  124,   59,  127,  203,\n+ \/*   600 *\/    59,  205,   19,  268,  132,   25,   23,   22,  193,  138,\n+ \/*   610 *\/   139,  249,  204,  251,  102,  103,  104,  105,  106,  107,\n+ \/*   620 *\/   108,  109,  110,  111,  112,  113,   43,   44,   45,   46,\n+ \/*   630 *\/    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,\n+ \/*   640 *\/    57,   19,   22,   23,   59,   23,   25,  239,  240,  116,\n+ \/*   650 *\/   117,  118,  193,   11,  116,  117,  118,  116,  117,  118,\n+ \/*   660 *\/   252,  269,   22,  193,   15,   43,   44,   45,   46,   47,\n+ \/*   670 *\/    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,\n+ \/*   680 *\/   273,  143,  193,  118,  143,  102,  103,  104,  105,  106,\n+ \/*   690 *\/   107,  108,  109,  110,  111,  112,  113,   76,  118,   59,\n+ \/*   700 *\/   241,  116,  117,  118,  304,  216,  217,  292,  143,   60,\n+ \/*   710 *\/    89,  241,   19,   92,  193,  193,   23,   22,  311,  312,\n+ \/*   720 *\/   231,  101,   22,  143,  102,  103,  104,  105,  106,  107,\n+ \/*   730 *\/   108,  109,  110,  111,  112,  113,   43,   44,   45,   46,\n+ \/*   740 *\/    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,\n+ \/*   750 *\/    57,   19,  193,  193,   59,   23,  116,  117,  118,   59,\n+ \/*   760 *\/   201,   21,  241,  304,   22,  206,  127,  128,  129,  193,\n+ \/*   770 *\/   128,  129,  235,  236,  304,   43,   44,   45,   46,   47,\n+ \/*   780 *\/    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,\n+ \/*   790 *\/    22,  193,  216,  217,  193,  102,  103,  104,  105,  106,\n+ \/*   800 *\/   107,  108,  109,  110,  111,  112,  113,  231,  193,  193,\n+ \/*   810 *\/   193,  116,  117,  118,  216,  217,  116,  117,  118,  226,\n+ \/*   820 *\/    80,  193,   19,  235,  236,  304,   23,  211,  212,  231,\n+ \/*   830 *\/   204,  216,  217,  205,  102,  103,  104,  105,  106,  107,\n+ \/*   840 *\/   108,  109,  110,  111,  112,  113,   43,   44,   45,   46,\n+ \/*   850 *\/    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,\n+ \/*   860 *\/    57,   19,  193,  123,   76,  239,  240,  193,  253,  239,\n+ \/*   870 *\/   240,  239,  240,  193,  106,  107,  193,   89,  252,  193,\n+ \/*   880 *\/    92,   59,  252,  141,  252,   43,   44,   45,   46,   47,\n+ \/*   890 *\/    48,   49,   50,   51,   52,   53,   54,   55,   56,   57,\n+ \/*   900 *\/   284,  161,  216,  217,  193,  102,  103,  104,  105,  106,\n+ \/*   910 *\/   107,  108,  109,  110,  111,  112,  113,  231,  193,   16,\n+ \/*   920 *\/   187,  188,  189,  190,    7,    8,    9,  309,  195,   25,\n+ \/*   930 *\/   197,  313,   19,  127,  128,  129,  262,  204,   22,  117,\n+ \/*   940 *\/    24,  216,  217,  263,  102,  103,  104,  105,  106,  107,\n+ \/*   950 *\/   108,  109,  110,  111,  112,  113,   43,   44,   45,   46,\n+ \/*   960 *\/    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,\n+ \/*   970 *\/    57,  193,  239,  240,  193,   59,   19,  188,  253,  190,\n+ \/*   980 *\/    77,  226,   79,  193,  195,  252,  197,  193,   19,  301,\n+ \/*   990 *\/   302,  193,  193,  204,  216,  217,  226,  216,  217,  266,\n+ \/*  1000 *\/   204,  159,   45,   46,   47,   48,   49,   50,   51,   52,\n+ \/*  1010 *\/    53,   54,   55,   56,   57,  102,  103,  104,  105,  106,\n+ \/*  1020 *\/   107,  108,  109,  110,  111,  112,  113,   12,  239,  240,\n+ \/*  1030 *\/   232,  298,  238,  117,  253,  239,  240,  238,  259,  260,\n+ \/*  1040 *\/   193,  252,   27,   31,  193,  193,  142,  204,  252,  193,\n+ \/*  1050 *\/   193,   39,  262,  193,  100,  266,  278,   42,  204,  102,\n+ \/*  1060 *\/   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,\n+ \/*  1070 *\/   113,  117,  159,  216,  217,  121,  216,  217,   63,  193,\n+ \/*  1080 *\/   193,  193,  239,  240,  115,  116,  193,  298,   73,  238,\n+ \/*  1090 *\/   238,  231,   19,  239,  240,  252,   22,   24,  211,  212,\n+ \/*  1100 *\/    24,  193,  216,  217,  216,  217,  252,  153,  154,  155,\n+ \/*  1110 *\/   253,   16,   19,  144,  213,  268,   43,   44,   45,   46,\n+ \/*  1120 *\/    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,\n+ \/*  1130 *\/    57,  238,   19,   59,  193,   59,   43,   44,   45,   46,\n+ \/*  1140 *\/    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,\n+ \/*  1150 *\/    57,   22,   23,  193,   25,  193,   43,   44,   45,   46,\n+ \/*  1160 *\/    47,   48,   49,   50,   51,   52,   53,   54,   55,   56,\n+ \/*  1170 *\/    57,  284,   77,  193,   79,  102,  103,  104,  105,  106,\n+ \/*  1180 *\/   107,  108,  109,  110,  111,  112,  113,  286,  193,  193,\n+ \/*  1190 *\/   193,  117,  291,  117,  232,  102,  103,  104,  105,  106,\n+ \/*  1200 *\/   107,  108,  109,  110,  111,  112,  113,  204,   22,   23,\n+ \/*  1210 *\/    66,   25,  216,  217,   35,  102,  103,  104,  105,  106,\n+ \/*  1220 *\/   107,  108,  109,  110,  111,  112,  113,  193,  268,   85,\n+ \/*  1230 *\/   101,  193,  309,  309,  240,   19,  313,  313,   94,  208,\n+ \/*  1240 *\/   209,  193,  239,  240,  193,   66,  252,   19,  268,  244,\n+ \/*  1250 *\/   216,  217,  193,   74,  213,  252,  161,   19,  263,  254,\n+ \/*  1260 *\/    44,   45,   46,   47,   48,   49,   50,   51,   52,   53,\n+ \/*  1270 *\/    54,   55,   56,   57,  193,  216,  217,    5,   59,  193,\n+ \/*  1280 *\/    19,  244,   10,   11,   12,   13,   14,  101,  309,   17,\n+ \/*  1290 *\/   146,  254,  313,  193,  193,   76,  115,  216,  217,  309,\n+ \/*  1300 *\/    12,  263,   30,  313,   32,   46,   87,   46,   89,  130,\n+ \/*  1310 *\/   193,   92,   40,   22,  263,   27,  216,  217,  102,  103,\n+ \/*  1320 *\/   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,\n+ \/*  1330 *\/    42,  150,  291,  216,  217,  116,  117,  118,   19,   20,\n+ \/*  1340 *\/   193,   22,   70,  260,  116,  193,   24,  264,  193,  263,\n+ \/*  1350 *\/    78,   63,   61,   81,  116,   36,  193,  260,  193,   29,\n+ \/*  1360 *\/   193,  264,  193,   33,  145,  193,   59,   48,  216,  217,\n+ \/*  1370 *\/    98,  216,  217,  193,  115,  193,  115,  193,   59,  216,\n+ \/*  1380 *\/   217,  216,  217,  216,  217,  216,  217,  255,  216,  217,\n+ \/*  1390 *\/    71,  193,  131,  193,   25,   65,  216,  217,  216,  217,\n+ \/*  1400 *\/   216,  217,  208,  209,   85,  133,  193,  100,  193,   90,\n+ \/*  1410 *\/   138,  139,  138,  139,  216,  217,  216,  217,  193,  100,\n+ \/*  1420 *\/   193,  108,  135,  116,  117,  106,  107,  140,  121,  216,\n+ \/*  1430 *\/   217,  216,  217,  114,  162,  116,  117,  118,  299,  300,\n+ \/*  1440 *\/   121,  216,  217,  216,  217,  193,  244,  193,  135,  244,\n+ \/*  1450 *\/   193,  256,  257,  140,  244,  193,  254,  193,  193,  254,\n+ \/*  1460 *\/   153,  154,  155,  141,  254,  149,  150,  258,  216,  217,\n+ \/*  1470 *\/   216,  217,  153,  154,  155,  156,  157,    0,    1,    2,\n+ \/*  1480 *\/   216,  217,    5,  115,  158,  193,  160,   10,   11,   12,\n+ \/*  1490 *\/    13,   14,  193,   59,   17,  126,  193,   19,   20,  129,\n+ \/*  1500 *\/    22,  193,   22,   22,   24,  193,   23,   30,   25,   32,\n+ \/*  1510 *\/    19,   20,  144,   22,   36,  216,  217,   40,  193,  216,\n+ \/*  1520 *\/   217,  193,  152,  129,  216,  217,  193,   36,  216,  217,\n+ \/*  1530 *\/   193,   99,  193,  193,   53,  193,  193,   59,   23,  193,\n+ \/*  1540 *\/    25,  216,  217,  193,  216,  217,  152,   70,   59,   71,\n+ \/*  1550 *\/    59,  117,  193,  216,  217,   78,  216,  217,   81,  216,\n+ \/*  1560 *\/   217,  318,   71,   85,  193,  133,  193,  193,   90,   23,\n+ \/*  1570 *\/    23,   25,   25,  120,  121,   98,   85,  193,  100,  193,\n+ \/*  1580 *\/    23,   90,   25,  121,  106,  107,   19,  216,  217,  216,\n+ \/*  1590 *\/   217,  100,  114,  131,  116,  117,  118,  106,  107,  121,\n+ \/*  1600 *\/   216,  217,  216,  217,  193,  114,  117,  116,  117,  118,\n+ \/*  1610 *\/   133,  193,  121,  193,  193,  138,  139,  193,   23,  193,\n+ \/*  1620 *\/    25,   23,   23,   25,   25,    7,    8,  216,  217,  193,\n+ \/*  1630 *\/   193,  153,  154,  155,  156,  157,  216,  217,  193,  162,\n+ \/*  1640 *\/   216,  217,  216,  217,  153,  154,  155,  156,  157,    1,\n+ \/*  1650 *\/     2,  193,  193,    5,   19,   20,   59,   22,   10,   11,\n+ \/*  1660 *\/    12,   13,   14,  193,   97,   17,  193,   23,  193,   25,\n+ \/*  1670 *\/   288,   36,  193,  242,  216,  217,  236,   23,   30,   25,\n+ \/*  1680 *\/    32,   19,   20,   23,   22,   25,  216,  217,   40,  216,\n+ \/*  1690 *\/   217,  216,  217,  193,   59,  216,  217,  193,   36,   83,\n+ \/*  1700 *\/    84,  153,  153,  155,  155,   23,   71,   25,   23,  193,\n+ \/*  1710 *\/    25,  193,  193,  193,  117,  193,  193,  193,   70,  193,\n+ \/*  1720 *\/   193,   59,  193,  255,  255,  287,   78,  255,  243,   81,\n+ \/*  1730 *\/   191,  255,  297,   71,  271,  100,  293,  245,  267,  214,\n+ \/*  1740 *\/   246,  106,  107,  108,  246,  271,   98,  245,  293,  114,\n+ \/*  1750 *\/   220,  116,  117,  118,  267,  271,  121,  271,  225,  219,\n+ \/*  1760 *\/   229,  219,  100,  219,  259,  259,  259,  259,  106,  107,\n+ \/*  1770 *\/   249,  196,   60,  280,  141,  243,  114,  249,  116,  117,\n+ \/*  1780 *\/   118,  133,  245,  121,  200,  297,  138,  139,  153,  154,\n+ \/*  1790 *\/   155,  156,  157,  297,  200,   38,   19,   20,  151,   22,\n+ \/*  1800 *\/   200,  150,  140,  294,  294,   22,  272,   43,  234,   18,\n+ \/*  1810 *\/   162,  270,  200,   36,  237,  153,  154,  155,  156,  157,\n+ \/*  1820 *\/   237,  283,  237,  237,   18,  199,  149,  246,  272,  270,\n+ \/*  1830 *\/   272,  200,  158,  246,  246,  234,   59,  234,  246,  199,\n+ \/*  1840 *\/   290,   62,  289,  200,  199,   22,  221,  115,   71,  200,\n+ \/*  1850 *\/   200,  199,  199,  221,  218,  218,   19,   20,   64,   22,\n+ \/*  1860 *\/   218,  227,   22,  224,  126,  224,  165,  221,   24,  305,\n+ \/*  1870 *\/   200,  113,  312,   36,  218,  220,  218,  100,  282,  218,\n+ \/*  1880 *\/    91,  218,  317,  106,  107,  221,  227,  282,  317,   82,\n+ \/*  1890 *\/   148,  114,  265,  116,  117,  118,   59,  145,  121,   22,\n+ \/*  1900 *\/   277,  158,  200,  265,   25,  202,  147,  250,   71,  279,\n+ \/*  1910 *\/    13,  146,  194,  194,  249,  248,  250,  140,  247,  246,\n+ \/*  1920 *\/     6,  192,  192,  192,  303,  303,  213,  207,  300,  213,\n+ \/*  1930 *\/   153,  154,  155,  156,  157,  213,  213,  100,  213,  222,\n+ \/*  1940 *\/   207,  214,  214,  106,  107,    4,  222,  207,    3,   22,\n+ \/*  1950 *\/   163,  114,   15,  116,  117,  118,   16,   23,  121,   23,\n+ \/*  1960 *\/   139,  151,  130,   25,  142,   16,   24,   20,  144,    1,\n+ \/*  1970 *\/   142,  130,  130,   61,   53,   53,   37,  151,   53,   53,\n+ \/*  1980 *\/   130,  116,   34,    1,  141,    5,   22,  115,  161,  141,\n+ \/*  1990 *\/   153,  154,  155,  156,  157,   25,   68,   68,   75,   41,\n+ \/*  2000 *\/   115,   24,  131,   20,   19,  125,   22,   96,   22,   22,\n+ \/*  2010 *\/    67,   23,   22,   67,   59,   24,   22,   28,   67,   23,\n+ \/*  2020 *\/    22,   22,  149,   23,   23,   23,  116,   23,   25,   37,\n+ \/*  2030 *\/    97,  141,   23,   23,   22,  143,   25,   75,   88,   34,\n+ \/*  2040 *\/    34,   34,   34,   86,   75,   93,   23,   34,   22,   34,\n+ \/*  2050 *\/    25,   24,   34,   25,   23,  142,   23,  142,   44,   23,\n+ \/*  2060 *\/    23,   23,   11,   23,   25,   22,   22,   22,   15,   23,\n+ \/*  2070 *\/    23,   22,   22,   25,    1,    1,  141,   25,   23,  135,\n+ \/*  2080 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2090 *\/   319,  319,  319,  319,  141,  141,  319,  141,  319,  319,\n+ \/*  2100 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2110 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2120 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2130 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2140 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2150 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2160 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2170 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2180 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2190 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2200 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2210 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2220 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2230 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2240 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2250 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2260 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2270 *\/   319,  319,  319,  319,  319,  319,  319,  319,  319,  319,\n+ \/*  2280 *\/   319,  319,  319,\n@@ -160488,1 +164556,1 @@\n-#define YY_SHIFT_COUNT    (571)\n+#define YY_SHIFT_COUNT    (575)\n@@ -160490,1 +164558,1 @@\n-#define YY_SHIFT_MAX      (2014)\n+#define YY_SHIFT_MAX      (2074)\n@@ -160492,58 +164560,58 @@\n- \/*     0 *\/  1423, 1409, 1454, 1192, 1192,  610, 1252, 1410, 1517, 1684,\n- \/*    10 *\/  1684, 1684,  276,    0,    0,  180, 1015, 1684, 1684, 1684,\n- \/*    20 *\/  1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,\n- \/*    30 *\/  1049, 1049, 1121, 1121,   54,  487,  610,  610,  610,  610,\n- \/*    40 *\/   610,   40,  110,  219,  289,  396,  439,  509,  548,  618,\n- \/*    50 *\/   657,  727,  766,  836,  995, 1015, 1015, 1015, 1015, 1015,\n- \/*    60 *\/  1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,\n- \/*    70 *\/  1015, 1015, 1015, 1035, 1015, 1138,  880,  880, 1577, 1684,\n- \/*    80 *\/  1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,\n- \/*    90 *\/  1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,\n- \/*   100 *\/  1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684,\n- \/*   110 *\/  1684, 1684, 1684, 1705, 1684, 1684, 1684, 1684, 1684, 1684,\n- \/*   120 *\/  1684, 1684, 1684, 1684, 1684, 1684, 1684,  146,   84,   84,\n- \/*   130 *\/    84,   84,   84,  277,  315,  401,   97,  461,  251,   66,\n- \/*   140 *\/    66,   51, 1156,   66,   66,  324,  324,   66,  452,  452,\n- \/*   150 *\/   452,  452,  133,  114,  114,    4,   11, 2037, 2037,  621,\n- \/*   160 *\/   621,  621,  567,  398,  398,  398,  398,  937,  937,  228,\n- \/*   170 *\/   251,  331, 1052,   66,   66,   66,   66,   66,   66,   66,\n- \/*   180 *\/    66,   66,   66,   66,   66,   66,   66,   66,   66,   66,\n- \/*   190 *\/    66,   66,   66,  557,  557,   66,    9,   25,   25,  745,\n- \/*   200 *\/   745,  967, 1088, 2037, 2037, 2037, 2037, 2037, 2037, 2037,\n- \/*   210 *\/   255,  317,  317,  514,  403,  620,  471,  672,  781,  891,\n- \/*   220 *\/   675,   66,   66,   66,   66,   66,   66,   66,   66,   66,\n- \/*   230 *\/    66,  508,   66,   66,   66,   66,   66,   66,   66,   66,\n- \/*   240 *\/    66,   66,   66,   66,  790,  790,  790,   66,   66,   66,\n- \/*   250 *\/   338,   66,   66,   66,  516, 1084,   66,   66,  993,   66,\n- \/*   260 *\/    66,   66,   66,   66,   66,   66,   66,  732, 1083,  563,\n- \/*   270 *\/   994,  994,  994,  994,  337,  563,  563, 1028,  987,  897,\n- \/*   280 *\/  1119,  262, 1214, 1271, 1112, 1214, 1112, 1268, 1239,  262,\n- \/*   290 *\/   262, 1239,  262, 1271, 1268, 1302, 1354, 1278, 1168, 1168,\n- \/*   300 *\/  1168, 1112, 1303, 1303,  815, 1311, 1264, 1364, 1657, 1657,\n- \/*   310 *\/  1595, 1595, 1701, 1701, 1595, 1592, 1596, 1724, 1706, 1730,\n- \/*   320 *\/  1730, 1730, 1730, 1595, 1735, 1614, 1596, 1596, 1614, 1724,\n- \/*   330 *\/  1706, 1614, 1706, 1614, 1595, 1735, 1621, 1717, 1595, 1735,\n- \/*   340 *\/  1758, 1595, 1735, 1595, 1735, 1758, 1679, 1679, 1679, 1734,\n- \/*   350 *\/  1781, 1781, 1758, 1679, 1689, 1679, 1734, 1679, 1679, 1645,\n- \/*   360 *\/  1791, 1715, 1715, 1758, 1690, 1718, 1690, 1718, 1690, 1718,\n- \/*   370 *\/  1690, 1718, 1595, 1751, 1751, 1762, 1762, 1699, 1703, 1826,\n- \/*   380 *\/  1595, 1695, 1699, 1707, 1710, 1614, 1847, 1863, 1863, 1871,\n- \/*   390 *\/  1871, 1871, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,\n- \/*   400 *\/  2037, 2037, 2037, 2037, 2037, 2037, 2037,  193,  837, 1194,\n- \/*   410 *\/  1212,  506,  832, 1054, 1390,  925, 1435, 1394, 1102, 1332,\n- \/*   420 *\/  1419, 1196, 1420, 1425, 1433, 1447, 1457, 1488, 1443, 1379,\n- \/*   430 *\/  1572, 1455, 1503, 1453, 1495, 1515, 1506, 1526, 1460, 1489,\n- \/*   440 *\/  1581, 1622, 1534,  667, 1888, 1893, 1875, 1736, 1884, 1885,\n- \/*   450 *\/  1877, 1879, 1765, 1754, 1776, 1881, 1881, 1883, 1767, 1889,\n- \/*   460 *\/  1768, 1894, 1911, 1772, 1788, 1881, 1789, 1858, 1886, 1881,\n- \/*   470 *\/  1770, 1868, 1869, 1872, 1873, 1795, 1812, 1895, 1790, 1927,\n- \/*   480 *\/  1926, 1910, 1819, 1774, 1867, 1912, 1870, 1861, 1898, 1800,\n- \/*   490 *\/  1827, 1918, 1923, 1925, 1815, 1822, 1928, 1880, 1929, 1930,\n- \/*   500 *\/  1931, 1933, 1882, 1897, 1924, 1857, 1932, 1935, 1891, 1922,\n- \/*   510 *\/  1938, 1814, 1941, 1942, 1943, 1944, 1939, 1945, 1947, 1874,\n- \/*   520 *\/  1830, 1949, 1950, 1859, 1946, 1953, 1834, 1952, 1948, 1951,\n- \/*   530 *\/  1954, 1955, 1890, 1904, 1900, 1937, 1908, 1899, 1956, 1961,\n- \/*   540 *\/  1965, 1967, 1968, 1969, 1962, 1972, 1952, 1974, 1975, 1976,\n- \/*   550 *\/  1977, 1978, 1979, 1982, 1990, 1983, 1984, 1985, 1986, 1988,\n- \/*   560 *\/  1989, 1987, 1887, 1876, 1878, 1892, 1896, 1992, 1991, 1998,\n- \/*   570 *\/  2006, 2014,\n+ \/*     0 *\/  1648, 1477, 1272,  322,  322,    1, 1319, 1478, 1491, 1837,\n+ \/*    10 *\/  1837, 1837,  471,    0,    0,  214, 1093, 1837, 1837, 1837,\n+ \/*    20 *\/  1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,\n+ \/*    30 *\/   271,  271, 1219, 1219,  216,   88,    1,    1,    1,    1,\n+ \/*    40 *\/     1,   40,  111,  258,  361,  469,  512,  583,  622,  693,\n+ \/*    50 *\/   732,  803,  842,  913, 1073, 1093, 1093, 1093, 1093, 1093,\n+ \/*    60 *\/  1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093,\n+ \/*    70 *\/  1093, 1093, 1093, 1113, 1093, 1216,  957,  957, 1635, 1662,\n+ \/*    80 *\/  1777, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,\n+ \/*    90 *\/  1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,\n+ \/*   100 *\/  1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,\n+ \/*   110 *\/  1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,\n+ \/*   120 *\/  1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837,\n+ \/*   130 *\/   137,  181,  181,  181,  181,  181,  181,  181,   94,  430,\n+ \/*   140 *\/    66,   65,  112,  366,  533,  533,  740, 1261,  533,  533,\n+ \/*   150 *\/    79,   79,  533,  412,  412,  412,   77,  412,  123,  113,\n+ \/*   160 *\/   113,   22,   22, 2098, 2098,  328,  328,  328,  239,  468,\n+ \/*   170 *\/   468,  468,  468, 1015, 1015,  409,  366, 1129, 1186,  533,\n+ \/*   180 *\/   533,  533,  533,  533,  533,  533,  533,  533,  533,  533,\n+ \/*   190 *\/   533,  533,  533,  533,  533,  533,  533,  533,  533,  969,\n+ \/*   200 *\/   621,  621,  533,  642,  788,  788, 1228, 1228,  822,  822,\n+ \/*   210 *\/    67, 1274, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 1307,\n+ \/*   220 *\/   954,  954,  585,  472,  640,  387,  695,  538,  541,  700,\n+ \/*   230 *\/   533,  533,  533,  533,  533,  533,  533,  533,  533,  533,\n+ \/*   240 *\/   222,  533,  533,  533,  533,  533,  533,  533,  533,  533,\n+ \/*   250 *\/   533,  533,  533, 1179, 1179, 1179,  533,  533,  533,  565,\n+ \/*   260 *\/   533,  533,  533,  916, 1144,  533,  533, 1288,  533,  533,\n+ \/*   270 *\/   533,  533,  533,  533,  533,  533,  639, 1330,  209, 1076,\n+ \/*   280 *\/  1076, 1076, 1076,  580,  209,  209, 1313,  768,  917,  649,\n+ \/*   290 *\/  1181, 1316,  405, 1316, 1238,  249, 1181, 1181,  249, 1181,\n+ \/*   300 *\/   405, 1238, 1369,  464, 1259, 1012, 1012, 1012, 1368, 1368,\n+ \/*   310 *\/  1368, 1368,  184,  184, 1326,  904, 1287, 1480, 1712, 1712,\n+ \/*   320 *\/  1633, 1633, 1757, 1757, 1633, 1647, 1651, 1783, 1764, 1791,\n+ \/*   330 *\/  1791, 1791, 1791, 1633, 1806, 1677, 1651, 1651, 1677, 1783,\n+ \/*   340 *\/  1764, 1677, 1764, 1677, 1633, 1806, 1674, 1779, 1633, 1806,\n+ \/*   350 *\/  1823, 1633, 1806, 1633, 1806, 1823, 1732, 1732, 1732, 1794,\n+ \/*   360 *\/  1840, 1840, 1823, 1732, 1738, 1732, 1794, 1732, 1732, 1701,\n+ \/*   370 *\/  1844, 1758, 1758, 1823, 1633, 1789, 1789, 1807, 1807, 1742,\n+ \/*   380 *\/  1752, 1877, 1633, 1743, 1742, 1759, 1765, 1677, 1879, 1897,\n+ \/*   390 *\/  1897, 1914, 1914, 1914, 2098, 2098, 2098, 2098, 2098, 2098,\n+ \/*   400 *\/  2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098, 2098,  207,\n+ \/*   410 *\/  1095,  331,  620,  903,  806, 1074, 1483, 1432, 1481, 1322,\n+ \/*   420 *\/  1370, 1394, 1515, 1291, 1546, 1547, 1557, 1595, 1598, 1599,\n+ \/*   430 *\/  1434, 1453, 1618, 1462, 1567, 1489, 1644, 1654, 1616, 1660,\n+ \/*   440 *\/  1548, 1549, 1682, 1685, 1597,  742, 1941, 1945, 1927, 1787,\n+ \/*   450 *\/  1937, 1940, 1934, 1936, 1821, 1810, 1832, 1938, 1938, 1942,\n+ \/*   460 *\/  1822, 1947, 1824, 1949, 1968, 1828, 1841, 1938, 1842, 1912,\n+ \/*   470 *\/  1939, 1938, 1826, 1921, 1922, 1925, 1926, 1850, 1865, 1948,\n+ \/*   480 *\/  1843, 1982, 1980, 1964, 1872, 1827, 1928, 1970, 1929, 1923,\n+ \/*   490 *\/  1958, 1848, 1885, 1977, 1983, 1985, 1871, 1880, 1984, 1943,\n+ \/*   500 *\/  1986, 1987, 1988, 1990, 1946, 1955, 1991, 1911, 1989, 1994,\n+ \/*   510 *\/  1951, 1992, 1996, 1873, 1998, 2000, 2001, 2002, 2003, 2004,\n+ \/*   520 *\/  1999, 1933, 1890, 2009, 2010, 1910, 2005, 2012, 1892, 2011,\n+ \/*   530 *\/  2006, 2007, 2008, 2013, 1950, 1962, 1957, 2014, 1969, 1952,\n+ \/*   540 *\/  2015, 2023, 2026, 2027, 2025, 2028, 2018, 1913, 1915, 2031,\n+ \/*   550 *\/  2011, 2033, 2036, 2037, 2038, 2039, 2040, 2043, 2051, 2044,\n+ \/*   560 *\/  2045, 2046, 2047, 2049, 2050, 2048, 1944, 1935, 1953, 1954,\n+ \/*   570 *\/  1956, 2052, 2055, 2053, 2073, 2074,\n@@ -160551,3 +164619,3 @@\n-#define YY_REDUCE_COUNT (406)\n-#define YY_REDUCE_MIN   (-272)\n-#define YY_REDUCE_MAX   (1693)\n+#define YY_REDUCE_COUNT (408)\n+#define YY_REDUCE_MIN   (-271)\n+#define YY_REDUCE_MAX   (1740)\n@@ -160555,41 +164623,41 @@\n- \/*     0 *\/   109,  113,  272,  760, -178, -176, -192, -183, -180, -134,\n- \/*    10 *\/   213,  220,  371, -208, -205, -272, -197,  611,  632,  765,\n- \/*    20 *\/   786,  392,  943,  989,  503,  651, 1039,  -18,  702,  821,\n- \/*    30 *\/   710,  812, -188,  380, -187,  555,  662, 1055, 1063, 1065,\n- \/*    40 *\/  1080, -267, -267, -267, -267, -267, -267, -267, -267, -267,\n- \/*    50 *\/  -267, -267, -267, -267, -267, -267, -267, -267, -267, -267,\n- \/*    60 *\/  -267, -267, -267, -267, -267, -267, -267, -267, -267, -267,\n- \/*    70 *\/  -267, -267, -267, -267, -267, -267, -267, -267,  636,  811,\n- \/*    80 *\/   917,  936, 1006, 1008, 1017, 1060, 1064, 1069, 1075, 1105,\n- \/*    90 *\/  1118, 1123, 1125, 1134, 1140, 1159, 1165, 1169, 1174, 1179,\n- \/*   100 *\/  1181, 1184, 1186, 1201, 1246, 1259, 1262, 1281, 1293, 1299,\n- \/*   110 *\/  1313, 1327, 1341, 1352, 1356, 1358, 1362, 1366, 1395, 1403,\n- \/*   120 *\/  1406, 1411, 1424, 1436, 1439, 1450, 1452, -267, -267, -267,\n- \/*   130 *\/  -267, -267, -267, -267, -267,  224, -267,  446,  -24,  275,\n- \/*   140 *\/   546,  518,  573,  560,   53, -181, -111,  485,  606,  671,\n- \/*   150 *\/   606,  671,  683,    8,   93, -267, -267, -267, -267,  155,\n- \/*   160 *\/   155,  155,  181,  242,  264,  486,  489, -218,  393,  227,\n- \/*   170 *\/   604,  347,  347, -171,  431,  650,  715, -166,  562,  609,\n- \/*   180 *\/   716,  764,   18,  823,  769,  833,  838,  957,  759,  119,\n- \/*   190 *\/   923,  226, 1014,  542,  603,  451,  949,  654,  659,  762,\n- \/*   200 *\/   964,   -4,  778,  961,  712, 1082, 1100, 1111, 1026, 1117,\n- \/*   210 *\/  -204, -174, -151,   -8,   77,  198,  305,  327,  388,  540,\n- \/*   220 *\/   839,  968,  982,  985, 1004, 1023, 1070, 1086, 1097, 1130,\n- \/*   230 *\/  1190, 1163, 1199, 1284, 1297, 1300, 1314, 1339, 1353, 1391,\n- \/*   240 *\/  1402, 1413, 1416, 1417,  803, 1376, 1400, 1428, 1437, 1446,\n- \/*   250 *\/  1378, 1461, 1464, 1465, 1249, 1329, 1466, 1467, 1414, 1468,\n- \/*   260 *\/   305, 1469, 1470, 1471, 1472, 1482, 1483, 1389, 1392, 1438,\n- \/*   270 *\/  1426, 1427, 1432, 1434, 1378, 1438, 1438, 1440, 1474, 1499,\n- \/*   280 *\/  1399, 1421, 1430, 1456, 1441, 1442, 1444, 1415, 1473, 1431,\n- \/*   290 *\/  1445, 1476, 1449, 1478, 1418, 1479, 1477, 1485, 1493, 1494,\n- \/*   300 *\/  1496, 1458, 1475, 1480, 1459, 1490, 1484, 1518, 1448, 1451,\n- \/*   310 *\/  1537, 1538, 1463, 1481, 1541, 1486, 1487, 1491, 1519, 1514,\n- \/*   320 *\/  1521, 1523, 1525, 1552, 1556, 1520, 1492, 1498, 1522, 1497,\n- \/*   330 *\/  1539, 1528, 1542, 1532, 1571, 1573, 1500, 1504, 1582, 1584,\n- \/*   340 *\/  1563, 1586, 1588, 1589, 1597, 1567, 1579, 1585, 1590, 1568,\n- \/*   350 *\/  1583, 1587, 1593, 1591, 1598, 1599, 1600, 1602, 1606, 1513,\n- \/*   360 *\/  1524, 1548, 1549, 1611, 1574, 1576, 1594, 1603, 1604, 1607,\n- \/*   370 *\/  1605, 1608, 1642, 1527, 1529, 1609, 1610, 1601, 1615, 1575,\n- \/*   380 *\/  1650, 1578, 1619, 1623, 1625, 1624, 1674, 1685, 1686, 1691,\n- \/*   390 *\/  1692, 1693, 1612, 1613, 1617, 1675, 1668, 1673, 1676, 1677,\n- \/*   400 *\/  1680, 1666, 1669, 1678, 1681, 1683, 1687,\n+ \/*     0 *\/  -125,  733,  789,  241,  293, -123, -193, -191, -183, -187,\n+ \/*    10 *\/   166,  238,  133, -207, -199, -267, -176,   -6,  204,  489,\n+ \/*    20 *\/   576, -175,  598,  686,  615,  725,  860,  778,  781,  857,\n+ \/*    30 *\/   616,  887,   87,  240, -192,  408,  626,  796,  843,  854,\n+ \/*    40 *\/  1003, -271, -271, -271, -271, -271, -271, -271, -271, -271,\n+ \/*    50 *\/  -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,\n+ \/*    60 *\/  -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,\n+ \/*    70 *\/  -271, -271, -271, -271, -271, -271, -271, -271,   80,   83,\n+ \/*    80 *\/   313,  886,  888,  996, 1034, 1059, 1081, 1100, 1117, 1152,\n+ \/*    90 *\/  1155, 1163, 1165, 1167, 1169, 1172, 1180, 1182, 1184, 1198,\n+ \/*   100 *\/  1200, 1213, 1215, 1225, 1227, 1252, 1254, 1264, 1299, 1303,\n+ \/*   110 *\/  1308, 1312, 1325, 1328, 1337, 1340, 1343, 1371, 1373, 1384,\n+ \/*   120 *\/  1386, 1411, 1420, 1424, 1426, 1458, 1470, 1473, 1475, 1479,\n+ \/*   130 *\/  -271, -271, -271, -271, -271, -271, -271, -271, -271, -271,\n+ \/*   140 *\/  -271,  138,  459,  396, -158,  470,  302, -212,  521,  201,\n+ \/*   150 *\/  -195,  -92,  559,  630,  632,  630, -271,  632,  901,   63,\n+ \/*   160 *\/   407, -271, -271, -271, -271,  161,  161,  161,  251,  335,\n+ \/*   170 *\/   847,  960,  980,  537,  588,  618,  628,  688,  688, -166,\n+ \/*   180 *\/  -161,  674,  790,  794,  799,  851,  852, -122,  680, -120,\n+ \/*   190 *\/   995, 1038,  415, 1051,  893,  798,  962,  400, 1086,  779,\n+ \/*   200 *\/   923,  924,  263, 1041,  979,  990, 1083, 1097, 1031, 1194,\n+ \/*   210 *\/   362,  994, 1139, 1005, 1037, 1202, 1205, 1195, 1210, -194,\n+ \/*   220 *\/    56,  185, -135,  232,  522,  560,  601,  617,  669,  683,\n+ \/*   230 *\/   711,  856,  908,  941, 1048, 1101, 1147, 1257, 1262, 1265,\n+ \/*   240 *\/   392, 1292, 1333, 1339, 1342, 1346, 1350, 1359, 1374, 1418,\n+ \/*   250 *\/  1421, 1436, 1437,  593,  755,  770,  997, 1445, 1459, 1209,\n+ \/*   260 *\/  1500, 1504, 1516, 1132, 1243, 1518, 1519, 1440, 1520,  560,\n+ \/*   270 *\/  1522, 1523, 1524, 1526, 1527, 1529, 1382, 1438, 1431, 1468,\n+ \/*   280 *\/  1469, 1472, 1476, 1209, 1431, 1431, 1485, 1525, 1539, 1435,\n+ \/*   290 *\/  1463, 1471, 1492, 1487, 1443, 1494, 1474, 1484, 1498, 1486,\n+ \/*   300 *\/  1502, 1455, 1530, 1531, 1533, 1540, 1542, 1544, 1505, 1506,\n+ \/*   310 *\/  1507, 1508, 1521, 1528, 1493, 1537, 1532, 1575, 1488, 1496,\n+ \/*   320 *\/  1584, 1594, 1509, 1510, 1600, 1538, 1534, 1541, 1574, 1577,\n+ \/*   330 *\/  1583, 1585, 1586, 1612, 1626, 1581, 1556, 1558, 1587, 1559,\n+ \/*   340 *\/  1601, 1588, 1603, 1592, 1631, 1640, 1550, 1553, 1643, 1645,\n+ \/*   350 *\/  1625, 1649, 1652, 1650, 1653, 1632, 1636, 1637, 1642, 1634,\n+ \/*   360 *\/  1639, 1641, 1646, 1656, 1655, 1658, 1659, 1661, 1663, 1560,\n+ \/*   370 *\/  1564, 1596, 1605, 1664, 1670, 1565, 1571, 1627, 1638, 1657,\n+ \/*   380 *\/  1665, 1623, 1702, 1630, 1666, 1667, 1671, 1673, 1703, 1718,\n+ \/*   390 *\/  1719, 1729, 1730, 1731, 1621, 1622, 1628, 1720, 1713, 1716,\n+ \/*   400 *\/  1722, 1723, 1733, 1717, 1724, 1727, 1728, 1725, 1740,\n@@ -160598,58 +164666,58 @@\n- \/*     0 *\/  1633, 1633, 1633, 1462, 1230, 1341, 1230, 1230, 1230, 1462,\n- \/*    10 *\/  1462, 1462, 1230, 1371, 1371, 1515, 1263, 1230, 1230, 1230,\n- \/*    20 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1461, 1230, 1230,\n- \/*    30 *\/  1230, 1230, 1550, 1550, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*    40 *\/  1230, 1230, 1380, 1230, 1387, 1230, 1230, 1230, 1230, 1230,\n- \/*    50 *\/  1463, 1464, 1230, 1230, 1230, 1514, 1516, 1479, 1394, 1393,\n- \/*    60 *\/  1392, 1391, 1497, 1358, 1385, 1378, 1382, 1457, 1458, 1456,\n- \/*    70 *\/  1460, 1464, 1463, 1230, 1381, 1428, 1442, 1427, 1230, 1230,\n- \/*    80 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*    90 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   100 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   110 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   120 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1436, 1441, 1447,\n- \/*   130 *\/  1440, 1437, 1430, 1429, 1431, 1230, 1432, 1230, 1254, 1230,\n- \/*   140 *\/  1230, 1251, 1305, 1230, 1230, 1230, 1230, 1230, 1534, 1533,\n- \/*   150 *\/  1230, 1230, 1263, 1422, 1421, 1433, 1434, 1444, 1443, 1522,\n- \/*   160 *\/  1586, 1585, 1480, 1230, 1230, 1230, 1230, 1230, 1230, 1550,\n- \/*   170 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   180 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   190 *\/  1230, 1230, 1230, 1550, 1550, 1230, 1263, 1550, 1550, 1259,\n- \/*   200 *\/  1259, 1365, 1230, 1529, 1332, 1332, 1332, 1332, 1341, 1332,\n- \/*   210 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   220 *\/  1230, 1230, 1230, 1230, 1230, 1519, 1517, 1230, 1230, 1230,\n- \/*   230 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   240 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   250 *\/  1230, 1230, 1230, 1230, 1337, 1230, 1230, 1230, 1230, 1230,\n- \/*   260 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1579, 1230, 1492, 1319,\n- \/*   270 *\/  1337, 1337, 1337, 1337, 1339, 1320, 1318, 1331, 1264, 1237,\n- \/*   280 *\/  1625, 1397, 1386, 1338, 1360, 1386, 1360, 1622, 1384, 1397,\n- \/*   290 *\/  1397, 1384, 1397, 1338, 1622, 1280, 1602, 1275, 1371, 1371,\n- \/*   300 *\/  1371, 1360, 1365, 1365, 1459, 1338, 1331, 1230, 1625, 1625,\n- \/*   310 *\/  1346, 1346, 1624, 1624, 1346, 1480, 1609, 1406, 1308, 1314,\n- \/*   320 *\/  1314, 1314, 1314, 1346, 1248, 1384, 1609, 1609, 1384, 1406,\n- \/*   330 *\/  1308, 1384, 1308, 1384, 1346, 1248, 1496, 1619, 1346, 1248,\n- \/*   340 *\/  1470, 1346, 1248, 1346, 1248, 1470, 1306, 1306, 1306, 1295,\n- \/*   350 *\/  1230, 1230, 1470, 1306, 1280, 1306, 1295, 1306, 1306, 1568,\n- \/*   360 *\/  1230, 1474, 1474, 1470, 1364, 1359, 1364, 1359, 1364, 1359,\n- \/*   370 *\/  1364, 1359, 1346, 1560, 1560, 1374, 1374, 1379, 1365, 1465,\n- \/*   380 *\/  1346, 1230, 1379, 1377, 1375, 1384, 1298, 1582, 1582, 1578,\n- \/*   390 *\/  1578, 1578, 1630, 1630, 1529, 1595, 1263, 1263, 1263, 1263,\n- \/*   400 *\/  1595, 1282, 1282, 1264, 1264, 1263, 1595, 1230, 1230, 1230,\n- \/*   410 *\/  1230, 1230, 1230, 1590, 1230, 1524, 1481, 1350, 1230, 1230,\n- \/*   420 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   430 *\/  1230, 1230, 1535, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   440 *\/  1230, 1230, 1230, 1411, 1230, 1233, 1526, 1230, 1230, 1230,\n- \/*   450 *\/  1230, 1230, 1230, 1230, 1230, 1388, 1389, 1351, 1230, 1230,\n- \/*   460 *\/  1230, 1230, 1230, 1230, 1230, 1403, 1230, 1230, 1230, 1398,\n- \/*   470 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1621, 1230,\n- \/*   480 *\/  1230, 1230, 1230, 1230, 1230, 1495, 1494, 1230, 1230, 1348,\n- \/*   490 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   500 *\/  1230, 1230, 1230, 1278, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   510 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   520 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1376, 1230, 1230,\n- \/*   530 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   540 *\/  1230, 1230, 1565, 1366, 1230, 1230, 1612, 1230, 1230, 1230,\n- \/*   550 *\/  1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,\n- \/*   560 *\/  1230, 1606, 1322, 1413, 1230, 1412, 1416, 1252, 1230, 1242,\n- \/*   570 *\/  1230, 1230,\n+ \/*     0 *\/  1647, 1647, 1647, 1475, 1240, 1351, 1240, 1240, 1240, 1475,\n+ \/*    10 *\/  1475, 1475, 1240, 1381, 1381, 1528, 1273, 1240, 1240, 1240,\n+ \/*    20 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1474, 1240, 1240,\n+ \/*    30 *\/  1240, 1240, 1563, 1563, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*    40 *\/  1240, 1240, 1390, 1240, 1397, 1240, 1240, 1240, 1240, 1240,\n+ \/*    50 *\/  1476, 1477, 1240, 1240, 1240, 1527, 1529, 1492, 1404, 1403,\n+ \/*    60 *\/  1402, 1401, 1510, 1369, 1395, 1388, 1392, 1470, 1471, 1469,\n+ \/*    70 *\/  1473, 1477, 1476, 1240, 1391, 1438, 1454, 1437, 1240, 1240,\n+ \/*    80 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*    90 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   100 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   110 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   120 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   130 *\/  1446, 1453, 1452, 1451, 1460, 1450, 1447, 1440, 1439, 1441,\n+ \/*   140 *\/  1442, 1240, 1240, 1264, 1240, 1240, 1261, 1315, 1240, 1240,\n+ \/*   150 *\/  1240, 1240, 1240, 1547, 1546, 1240, 1443, 1240, 1273, 1432,\n+ \/*   160 *\/  1431, 1457, 1444, 1456, 1455, 1535, 1599, 1598, 1493, 1240,\n+ \/*   170 *\/  1240, 1240, 1240, 1240, 1240, 1563, 1240, 1240, 1240, 1240,\n+ \/*   180 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   190 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1371,\n+ \/*   200 *\/  1563, 1563, 1240, 1273, 1563, 1563, 1372, 1372, 1269, 1269,\n+ \/*   210 *\/  1375, 1240, 1542, 1342, 1342, 1342, 1342, 1351, 1342, 1240,\n+ \/*   220 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   230 *\/  1240, 1240, 1240, 1240, 1532, 1530, 1240, 1240, 1240, 1240,\n+ \/*   240 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   250 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   260 *\/  1240, 1240, 1240, 1347, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   270 *\/  1240, 1240, 1240, 1240, 1240, 1592, 1240, 1505, 1329, 1347,\n+ \/*   280 *\/  1347, 1347, 1347, 1349, 1330, 1328, 1341, 1274, 1247, 1639,\n+ \/*   290 *\/  1407, 1396, 1348, 1396, 1636, 1394, 1407, 1407, 1394, 1407,\n+ \/*   300 *\/  1348, 1636, 1290, 1615, 1285, 1381, 1381, 1381, 1371, 1371,\n+ \/*   310 *\/  1371, 1371, 1375, 1375, 1472, 1348, 1341, 1240, 1639, 1639,\n+ \/*   320 *\/  1357, 1357, 1638, 1638, 1357, 1493, 1623, 1416, 1318, 1324,\n+ \/*   330 *\/  1324, 1324, 1324, 1357, 1258, 1394, 1623, 1623, 1394, 1416,\n+ \/*   340 *\/  1318, 1394, 1318, 1394, 1357, 1258, 1509, 1633, 1357, 1258,\n+ \/*   350 *\/  1483, 1357, 1258, 1357, 1258, 1483, 1316, 1316, 1316, 1305,\n+ \/*   360 *\/  1240, 1240, 1483, 1316, 1290, 1316, 1305, 1316, 1316, 1581,\n+ \/*   370 *\/  1240, 1487, 1487, 1483, 1357, 1573, 1573, 1384, 1384, 1389,\n+ \/*   380 *\/  1375, 1478, 1357, 1240, 1389, 1387, 1385, 1394, 1308, 1595,\n+ \/*   390 *\/  1595, 1591, 1591, 1591, 1644, 1644, 1542, 1608, 1273, 1273,\n+ \/*   400 *\/  1273, 1273, 1608, 1292, 1292, 1274, 1274, 1273, 1608, 1240,\n+ \/*   410 *\/  1240, 1240, 1240, 1240, 1240, 1603, 1240, 1537, 1494, 1361,\n+ \/*   420 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   430 *\/  1240, 1240, 1240, 1240, 1548, 1240, 1240, 1240, 1240, 1240,\n+ \/*   440 *\/  1240, 1240, 1240, 1240, 1240, 1421, 1240, 1243, 1539, 1240,\n+ \/*   450 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1398, 1399, 1362,\n+ \/*   460 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1413, 1240, 1240,\n+ \/*   470 *\/  1240, 1408, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   480 *\/  1635, 1240, 1240, 1240, 1240, 1240, 1240, 1508, 1507, 1240,\n+ \/*   490 *\/  1240, 1359, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   500 *\/  1240, 1240, 1240, 1240, 1240, 1288, 1240, 1240, 1240, 1240,\n+ \/*   510 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   520 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1386,\n+ \/*   530 *\/  1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   540 *\/  1240, 1240, 1240, 1240, 1578, 1376, 1240, 1240, 1240, 1240,\n+ \/*   550 *\/  1626, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,\n+ \/*   560 *\/  1240, 1240, 1240, 1240, 1240, 1619, 1332, 1423, 1240, 1422,\n+ \/*   570 *\/  1426, 1262, 1240, 1252, 1240, 1240,\n@@ -160787,0 +164855,1 @@\n+    0,  \/*        PTR => nothing *\/\n@@ -161059,149 +165128,149 @@\n-  \/*  112 *\/ \"COLLATE\",\n-  \/*  113 *\/ \"BITNOT\",\n-  \/*  114 *\/ \"ON\",\n-  \/*  115 *\/ \"INDEXED\",\n-  \/*  116 *\/ \"STRING\",\n-  \/*  117 *\/ \"JOIN_KW\",\n-  \/*  118 *\/ \"CONSTRAINT\",\n-  \/*  119 *\/ \"DEFAULT\",\n-  \/*  120 *\/ \"NULL\",\n-  \/*  121 *\/ \"PRIMARY\",\n-  \/*  122 *\/ \"UNIQUE\",\n-  \/*  123 *\/ \"CHECK\",\n-  \/*  124 *\/ \"REFERENCES\",\n-  \/*  125 *\/ \"AUTOINCR\",\n-  \/*  126 *\/ \"INSERT\",\n-  \/*  127 *\/ \"DELETE\",\n-  \/*  128 *\/ \"UPDATE\",\n-  \/*  129 *\/ \"SET\",\n-  \/*  130 *\/ \"DEFERRABLE\",\n-  \/*  131 *\/ \"FOREIGN\",\n-  \/*  132 *\/ \"DROP\",\n-  \/*  133 *\/ \"UNION\",\n-  \/*  134 *\/ \"ALL\",\n-  \/*  135 *\/ \"EXCEPT\",\n-  \/*  136 *\/ \"INTERSECT\",\n-  \/*  137 *\/ \"SELECT\",\n-  \/*  138 *\/ \"VALUES\",\n-  \/*  139 *\/ \"DISTINCT\",\n-  \/*  140 *\/ \"DOT\",\n-  \/*  141 *\/ \"FROM\",\n-  \/*  142 *\/ \"JOIN\",\n-  \/*  143 *\/ \"USING\",\n-  \/*  144 *\/ \"ORDER\",\n-  \/*  145 *\/ \"GROUP\",\n-  \/*  146 *\/ \"HAVING\",\n-  \/*  147 *\/ \"LIMIT\",\n-  \/*  148 *\/ \"WHERE\",\n-  \/*  149 *\/ \"RETURNING\",\n-  \/*  150 *\/ \"INTO\",\n-  \/*  151 *\/ \"NOTHING\",\n-  \/*  152 *\/ \"FLOAT\",\n-  \/*  153 *\/ \"BLOB\",\n-  \/*  154 *\/ \"INTEGER\",\n-  \/*  155 *\/ \"VARIABLE\",\n-  \/*  156 *\/ \"CASE\",\n-  \/*  157 *\/ \"WHEN\",\n-  \/*  158 *\/ \"THEN\",\n-  \/*  159 *\/ \"ELSE\",\n-  \/*  160 *\/ \"INDEX\",\n-  \/*  161 *\/ \"ALTER\",\n-  \/*  162 *\/ \"ADD\",\n-  \/*  163 *\/ \"WINDOW\",\n-  \/*  164 *\/ \"OVER\",\n-  \/*  165 *\/ \"FILTER\",\n-  \/*  166 *\/ \"COLUMN\",\n-  \/*  167 *\/ \"AGG_FUNCTION\",\n-  \/*  168 *\/ \"AGG_COLUMN\",\n-  \/*  169 *\/ \"TRUEFALSE\",\n-  \/*  170 *\/ \"ISNOT\",\n-  \/*  171 *\/ \"FUNCTION\",\n-  \/*  172 *\/ \"UMINUS\",\n-  \/*  173 *\/ \"UPLUS\",\n-  \/*  174 *\/ \"TRUTH\",\n-  \/*  175 *\/ \"REGISTER\",\n-  \/*  176 *\/ \"VECTOR\",\n-  \/*  177 *\/ \"SELECT_COLUMN\",\n-  \/*  178 *\/ \"IF_NULL_ROW\",\n-  \/*  179 *\/ \"ASTERISK\",\n-  \/*  180 *\/ \"SPAN\",\n-  \/*  181 *\/ \"ERROR\",\n-  \/*  182 *\/ \"SPACE\",\n-  \/*  183 *\/ \"ILLEGAL\",\n-  \/*  184 *\/ \"input\",\n-  \/*  185 *\/ \"cmdlist\",\n-  \/*  186 *\/ \"ecmd\",\n-  \/*  187 *\/ \"cmdx\",\n-  \/*  188 *\/ \"explain\",\n-  \/*  189 *\/ \"cmd\",\n-  \/*  190 *\/ \"transtype\",\n-  \/*  191 *\/ \"trans_opt\",\n-  \/*  192 *\/ \"nm\",\n-  \/*  193 *\/ \"savepoint_opt\",\n-  \/*  194 *\/ \"create_table\",\n-  \/*  195 *\/ \"create_table_args\",\n-  \/*  196 *\/ \"createkw\",\n-  \/*  197 *\/ \"temp\",\n-  \/*  198 *\/ \"ifnotexists\",\n-  \/*  199 *\/ \"dbnm\",\n-  \/*  200 *\/ \"columnlist\",\n-  \/*  201 *\/ \"conslist_opt\",\n-  \/*  202 *\/ \"table_option_set\",\n-  \/*  203 *\/ \"select\",\n-  \/*  204 *\/ \"table_option\",\n-  \/*  205 *\/ \"columnname\",\n-  \/*  206 *\/ \"carglist\",\n-  \/*  207 *\/ \"typetoken\",\n-  \/*  208 *\/ \"typename\",\n-  \/*  209 *\/ \"signed\",\n-  \/*  210 *\/ \"plus_num\",\n-  \/*  211 *\/ \"minus_num\",\n-  \/*  212 *\/ \"scanpt\",\n-  \/*  213 *\/ \"scantok\",\n-  \/*  214 *\/ \"ccons\",\n-  \/*  215 *\/ \"term\",\n-  \/*  216 *\/ \"expr\",\n-  \/*  217 *\/ \"onconf\",\n-  \/*  218 *\/ \"sortorder\",\n-  \/*  219 *\/ \"autoinc\",\n-  \/*  220 *\/ \"eidlist_opt\",\n-  \/*  221 *\/ \"refargs\",\n-  \/*  222 *\/ \"defer_subclause\",\n-  \/*  223 *\/ \"generated\",\n-  \/*  224 *\/ \"refarg\",\n-  \/*  225 *\/ \"refact\",\n-  \/*  226 *\/ \"init_deferred_pred_opt\",\n-  \/*  227 *\/ \"conslist\",\n-  \/*  228 *\/ \"tconscomma\",\n-  \/*  229 *\/ \"tcons\",\n-  \/*  230 *\/ \"sortlist\",\n-  \/*  231 *\/ \"eidlist\",\n-  \/*  232 *\/ \"defer_subclause_opt\",\n-  \/*  233 *\/ \"orconf\",\n-  \/*  234 *\/ \"resolvetype\",\n-  \/*  235 *\/ \"raisetype\",\n-  \/*  236 *\/ \"ifexists\",\n-  \/*  237 *\/ \"fullname\",\n-  \/*  238 *\/ \"selectnowith\",\n-  \/*  239 *\/ \"oneselect\",\n-  \/*  240 *\/ \"wqlist\",\n-  \/*  241 *\/ \"multiselect_op\",\n-  \/*  242 *\/ \"distinct\",\n-  \/*  243 *\/ \"selcollist\",\n-  \/*  244 *\/ \"from\",\n-  \/*  245 *\/ \"where_opt\",\n-  \/*  246 *\/ \"groupby_opt\",\n-  \/*  247 *\/ \"having_opt\",\n-  \/*  248 *\/ \"orderby_opt\",\n-  \/*  249 *\/ \"limit_opt\",\n-  \/*  250 *\/ \"window_clause\",\n-  \/*  251 *\/ \"values\",\n-  \/*  252 *\/ \"nexprlist\",\n-  \/*  253 *\/ \"sclp\",\n-  \/*  254 *\/ \"as\",\n-  \/*  255 *\/ \"seltablist\",\n-  \/*  256 *\/ \"stl_prefix\",\n-  \/*  257 *\/ \"joinop\",\n-  \/*  258 *\/ \"indexed_opt\",\n-  \/*  259 *\/ \"on_opt\",\n-  \/*  260 *\/ \"using_opt\",\n+  \/*  112 *\/ \"PTR\",\n+  \/*  113 *\/ \"COLLATE\",\n+  \/*  114 *\/ \"BITNOT\",\n+  \/*  115 *\/ \"ON\",\n+  \/*  116 *\/ \"INDEXED\",\n+  \/*  117 *\/ \"STRING\",\n+  \/*  118 *\/ \"JOIN_KW\",\n+  \/*  119 *\/ \"CONSTRAINT\",\n+  \/*  120 *\/ \"DEFAULT\",\n+  \/*  121 *\/ \"NULL\",\n+  \/*  122 *\/ \"PRIMARY\",\n+  \/*  123 *\/ \"UNIQUE\",\n+  \/*  124 *\/ \"CHECK\",\n+  \/*  125 *\/ \"REFERENCES\",\n+  \/*  126 *\/ \"AUTOINCR\",\n+  \/*  127 *\/ \"INSERT\",\n+  \/*  128 *\/ \"DELETE\",\n+  \/*  129 *\/ \"UPDATE\",\n+  \/*  130 *\/ \"SET\",\n+  \/*  131 *\/ \"DEFERRABLE\",\n+  \/*  132 *\/ \"FOREIGN\",\n+  \/*  133 *\/ \"DROP\",\n+  \/*  134 *\/ \"UNION\",\n+  \/*  135 *\/ \"ALL\",\n+  \/*  136 *\/ \"EXCEPT\",\n+  \/*  137 *\/ \"INTERSECT\",\n+  \/*  138 *\/ \"SELECT\",\n+  \/*  139 *\/ \"VALUES\",\n+  \/*  140 *\/ \"DISTINCT\",\n+  \/*  141 *\/ \"DOT\",\n+  \/*  142 *\/ \"FROM\",\n+  \/*  143 *\/ \"JOIN\",\n+  \/*  144 *\/ \"USING\",\n+  \/*  145 *\/ \"ORDER\",\n+  \/*  146 *\/ \"GROUP\",\n+  \/*  147 *\/ \"HAVING\",\n+  \/*  148 *\/ \"LIMIT\",\n+  \/*  149 *\/ \"WHERE\",\n+  \/*  150 *\/ \"RETURNING\",\n+  \/*  151 *\/ \"INTO\",\n+  \/*  152 *\/ \"NOTHING\",\n+  \/*  153 *\/ \"FLOAT\",\n+  \/*  154 *\/ \"BLOB\",\n+  \/*  155 *\/ \"INTEGER\",\n+  \/*  156 *\/ \"VARIABLE\",\n+  \/*  157 *\/ \"CASE\",\n+  \/*  158 *\/ \"WHEN\",\n+  \/*  159 *\/ \"THEN\",\n+  \/*  160 *\/ \"ELSE\",\n+  \/*  161 *\/ \"INDEX\",\n+  \/*  162 *\/ \"ALTER\",\n+  \/*  163 *\/ \"ADD\",\n+  \/*  164 *\/ \"WINDOW\",\n+  \/*  165 *\/ \"OVER\",\n+  \/*  166 *\/ \"FILTER\",\n+  \/*  167 *\/ \"COLUMN\",\n+  \/*  168 *\/ \"AGG_FUNCTION\",\n+  \/*  169 *\/ \"AGG_COLUMN\",\n+  \/*  170 *\/ \"TRUEFALSE\",\n+  \/*  171 *\/ \"ISNOT\",\n+  \/*  172 *\/ \"FUNCTION\",\n+  \/*  173 *\/ \"UMINUS\",\n+  \/*  174 *\/ \"UPLUS\",\n+  \/*  175 *\/ \"TRUTH\",\n+  \/*  176 *\/ \"REGISTER\",\n+  \/*  177 *\/ \"VECTOR\",\n+  \/*  178 *\/ \"SELECT_COLUMN\",\n+  \/*  179 *\/ \"IF_NULL_ROW\",\n+  \/*  180 *\/ \"ASTERISK\",\n+  \/*  181 *\/ \"SPAN\",\n+  \/*  182 *\/ \"ERROR\",\n+  \/*  183 *\/ \"SPACE\",\n+  \/*  184 *\/ \"ILLEGAL\",\n+  \/*  185 *\/ \"input\",\n+  \/*  186 *\/ \"cmdlist\",\n+  \/*  187 *\/ \"ecmd\",\n+  \/*  188 *\/ \"cmdx\",\n+  \/*  189 *\/ \"explain\",\n+  \/*  190 *\/ \"cmd\",\n+  \/*  191 *\/ \"transtype\",\n+  \/*  192 *\/ \"trans_opt\",\n+  \/*  193 *\/ \"nm\",\n+  \/*  194 *\/ \"savepoint_opt\",\n+  \/*  195 *\/ \"create_table\",\n+  \/*  196 *\/ \"create_table_args\",\n+  \/*  197 *\/ \"createkw\",\n+  \/*  198 *\/ \"temp\",\n+  \/*  199 *\/ \"ifnotexists\",\n+  \/*  200 *\/ \"dbnm\",\n+  \/*  201 *\/ \"columnlist\",\n+  \/*  202 *\/ \"conslist_opt\",\n+  \/*  203 *\/ \"table_option_set\",\n+  \/*  204 *\/ \"select\",\n+  \/*  205 *\/ \"table_option\",\n+  \/*  206 *\/ \"columnname\",\n+  \/*  207 *\/ \"carglist\",\n+  \/*  208 *\/ \"typetoken\",\n+  \/*  209 *\/ \"typename\",\n+  \/*  210 *\/ \"signed\",\n+  \/*  211 *\/ \"plus_num\",\n+  \/*  212 *\/ \"minus_num\",\n+  \/*  213 *\/ \"scanpt\",\n+  \/*  214 *\/ \"scantok\",\n+  \/*  215 *\/ \"ccons\",\n+  \/*  216 *\/ \"term\",\n+  \/*  217 *\/ \"expr\",\n+  \/*  218 *\/ \"onconf\",\n+  \/*  219 *\/ \"sortorder\",\n+  \/*  220 *\/ \"autoinc\",\n+  \/*  221 *\/ \"eidlist_opt\",\n+  \/*  222 *\/ \"refargs\",\n+  \/*  223 *\/ \"defer_subclause\",\n+  \/*  224 *\/ \"generated\",\n+  \/*  225 *\/ \"refarg\",\n+  \/*  226 *\/ \"refact\",\n+  \/*  227 *\/ \"init_deferred_pred_opt\",\n+  \/*  228 *\/ \"conslist\",\n+  \/*  229 *\/ \"tconscomma\",\n+  \/*  230 *\/ \"tcons\",\n+  \/*  231 *\/ \"sortlist\",\n+  \/*  232 *\/ \"eidlist\",\n+  \/*  233 *\/ \"defer_subclause_opt\",\n+  \/*  234 *\/ \"orconf\",\n+  \/*  235 *\/ \"resolvetype\",\n+  \/*  236 *\/ \"raisetype\",\n+  \/*  237 *\/ \"ifexists\",\n+  \/*  238 *\/ \"fullname\",\n+  \/*  239 *\/ \"selectnowith\",\n+  \/*  240 *\/ \"oneselect\",\n+  \/*  241 *\/ \"wqlist\",\n+  \/*  242 *\/ \"multiselect_op\",\n+  \/*  243 *\/ \"distinct\",\n+  \/*  244 *\/ \"selcollist\",\n+  \/*  245 *\/ \"from\",\n+  \/*  246 *\/ \"where_opt\",\n+  \/*  247 *\/ \"groupby_opt\",\n+  \/*  248 *\/ \"having_opt\",\n+  \/*  249 *\/ \"orderby_opt\",\n+  \/*  250 *\/ \"limit_opt\",\n+  \/*  251 *\/ \"window_clause\",\n+  \/*  252 *\/ \"values\",\n+  \/*  253 *\/ \"nexprlist\",\n+  \/*  254 *\/ \"sclp\",\n+  \/*  255 *\/ \"as\",\n+  \/*  256 *\/ \"seltablist\",\n+  \/*  257 *\/ \"stl_prefix\",\n+  \/*  258 *\/ \"joinop\",\n+  \/*  259 *\/ \"on_using\",\n+  \/*  260 *\/ \"indexed_by\",\n@@ -161211,54 +165280,55 @@\n-  \/*  264 *\/ \"nulls\",\n-  \/*  265 *\/ \"with\",\n-  \/*  266 *\/ \"where_opt_ret\",\n-  \/*  267 *\/ \"setlist\",\n-  \/*  268 *\/ \"insert_cmd\",\n-  \/*  269 *\/ \"idlist_opt\",\n-  \/*  270 *\/ \"upsert\",\n-  \/*  271 *\/ \"returning\",\n-  \/*  272 *\/ \"filter_over\",\n-  \/*  273 *\/ \"likeop\",\n-  \/*  274 *\/ \"between_op\",\n-  \/*  275 *\/ \"in_op\",\n-  \/*  276 *\/ \"paren_exprlist\",\n-  \/*  277 *\/ \"case_operand\",\n-  \/*  278 *\/ \"case_exprlist\",\n-  \/*  279 *\/ \"case_else\",\n-  \/*  280 *\/ \"uniqueflag\",\n-  \/*  281 *\/ \"collate\",\n-  \/*  282 *\/ \"vinto\",\n-  \/*  283 *\/ \"nmnum\",\n-  \/*  284 *\/ \"trigger_decl\",\n-  \/*  285 *\/ \"trigger_cmd_list\",\n-  \/*  286 *\/ \"trigger_time\",\n-  \/*  287 *\/ \"trigger_event\",\n-  \/*  288 *\/ \"foreach_clause\",\n-  \/*  289 *\/ \"when_clause\",\n-  \/*  290 *\/ \"trigger_cmd\",\n-  \/*  291 *\/ \"trnm\",\n-  \/*  292 *\/ \"tridxby\",\n-  \/*  293 *\/ \"database_kw_opt\",\n-  \/*  294 *\/ \"key_opt\",\n-  \/*  295 *\/ \"add_column_fullname\",\n-  \/*  296 *\/ \"kwcolumn_opt\",\n-  \/*  297 *\/ \"create_vtab\",\n-  \/*  298 *\/ \"vtabarglist\",\n-  \/*  299 *\/ \"vtabarg\",\n-  \/*  300 *\/ \"vtabargtoken\",\n-  \/*  301 *\/ \"lp\",\n-  \/*  302 *\/ \"anylist\",\n-  \/*  303 *\/ \"wqitem\",\n-  \/*  304 *\/ \"wqas\",\n-  \/*  305 *\/ \"windowdefn_list\",\n-  \/*  306 *\/ \"windowdefn\",\n-  \/*  307 *\/ \"window\",\n-  \/*  308 *\/ \"frame_opt\",\n-  \/*  309 *\/ \"part_opt\",\n-  \/*  310 *\/ \"filter_clause\",\n-  \/*  311 *\/ \"over_clause\",\n-  \/*  312 *\/ \"range_or_rows\",\n-  \/*  313 *\/ \"frame_bound\",\n-  \/*  314 *\/ \"frame_bound_s\",\n-  \/*  315 *\/ \"frame_bound_e\",\n-  \/*  316 *\/ \"frame_exclude_opt\",\n-  \/*  317 *\/ \"frame_exclude\",\n+  \/*  264 *\/ \"indexed_opt\",\n+  \/*  265 *\/ \"nulls\",\n+  \/*  266 *\/ \"with\",\n+  \/*  267 *\/ \"where_opt_ret\",\n+  \/*  268 *\/ \"setlist\",\n+  \/*  269 *\/ \"insert_cmd\",\n+  \/*  270 *\/ \"idlist_opt\",\n+  \/*  271 *\/ \"upsert\",\n+  \/*  272 *\/ \"returning\",\n+  \/*  273 *\/ \"filter_over\",\n+  \/*  274 *\/ \"likeop\",\n+  \/*  275 *\/ \"between_op\",\n+  \/*  276 *\/ \"in_op\",\n+  \/*  277 *\/ \"paren_exprlist\",\n+  \/*  278 *\/ \"case_operand\",\n+  \/*  279 *\/ \"case_exprlist\",\n+  \/*  280 *\/ \"case_else\",\n+  \/*  281 *\/ \"uniqueflag\",\n+  \/*  282 *\/ \"collate\",\n+  \/*  283 *\/ \"vinto\",\n+  \/*  284 *\/ \"nmnum\",\n+  \/*  285 *\/ \"trigger_decl\",\n+  \/*  286 *\/ \"trigger_cmd_list\",\n+  \/*  287 *\/ \"trigger_time\",\n+  \/*  288 *\/ \"trigger_event\",\n+  \/*  289 *\/ \"foreach_clause\",\n+  \/*  290 *\/ \"when_clause\",\n+  \/*  291 *\/ \"trigger_cmd\",\n+  \/*  292 *\/ \"trnm\",\n+  \/*  293 *\/ \"tridxby\",\n+  \/*  294 *\/ \"database_kw_opt\",\n+  \/*  295 *\/ \"key_opt\",\n+  \/*  296 *\/ \"add_column_fullname\",\n+  \/*  297 *\/ \"kwcolumn_opt\",\n+  \/*  298 *\/ \"create_vtab\",\n+  \/*  299 *\/ \"vtabarglist\",\n+  \/*  300 *\/ \"vtabarg\",\n+  \/*  301 *\/ \"vtabargtoken\",\n+  \/*  302 *\/ \"lp\",\n+  \/*  303 *\/ \"anylist\",\n+  \/*  304 *\/ \"wqitem\",\n+  \/*  305 *\/ \"wqas\",\n+  \/*  306 *\/ \"windowdefn_list\",\n+  \/*  307 *\/ \"windowdefn\",\n+  \/*  308 *\/ \"window\",\n+  \/*  309 *\/ \"frame_opt\",\n+  \/*  310 *\/ \"part_opt\",\n+  \/*  311 *\/ \"filter_clause\",\n+  \/*  312 *\/ \"over_clause\",\n+  \/*  313 *\/ \"range_or_rows\",\n+  \/*  314 *\/ \"frame_bound\",\n+  \/*  315 *\/ \"frame_bound_s\",\n+  \/*  316 *\/ \"frame_bound_e\",\n+  \/*  317 *\/ \"frame_exclude_opt\",\n+  \/*  318 *\/ \"frame_exclude\",\n@@ -161381,23 +165451,23 @@\n- \/* 109 *\/ \"seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt\",\n- \/* 110 *\/ \"seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_opt using_opt\",\n- \/* 111 *\/ \"seltablist ::= stl_prefix LP select RP as on_opt using_opt\",\n- \/* 112 *\/ \"seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt\",\n- \/* 113 *\/ \"dbnm ::=\",\n- \/* 114 *\/ \"dbnm ::= DOT nm\",\n- \/* 115 *\/ \"fullname ::= nm\",\n- \/* 116 *\/ \"fullname ::= nm DOT nm\",\n- \/* 117 *\/ \"xfullname ::= nm\",\n- \/* 118 *\/ \"xfullname ::= nm DOT nm\",\n- \/* 119 *\/ \"xfullname ::= nm DOT nm AS nm\",\n- \/* 120 *\/ \"xfullname ::= nm AS nm\",\n- \/* 121 *\/ \"joinop ::= COMMA|JOIN\",\n- \/* 122 *\/ \"joinop ::= JOIN_KW JOIN\",\n- \/* 123 *\/ \"joinop ::= JOIN_KW nm JOIN\",\n- \/* 124 *\/ \"joinop ::= JOIN_KW nm nm JOIN\",\n- \/* 125 *\/ \"on_opt ::= ON expr\",\n- \/* 126 *\/ \"on_opt ::=\",\n- \/* 127 *\/ \"indexed_opt ::=\",\n- \/* 128 *\/ \"indexed_opt ::= INDEXED BY nm\",\n- \/* 129 *\/ \"indexed_opt ::= NOT INDEXED\",\n- \/* 130 *\/ \"using_opt ::= USING LP idlist RP\",\n- \/* 131 *\/ \"using_opt ::=\",\n+ \/* 109 *\/ \"seltablist ::= stl_prefix nm dbnm as on_using\",\n+ \/* 110 *\/ \"seltablist ::= stl_prefix nm dbnm as indexed_by on_using\",\n+ \/* 111 *\/ \"seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using\",\n+ \/* 112 *\/ \"seltablist ::= stl_prefix LP select RP as on_using\",\n+ \/* 113 *\/ \"seltablist ::= stl_prefix LP seltablist RP as on_using\",\n+ \/* 114 *\/ \"dbnm ::=\",\n+ \/* 115 *\/ \"dbnm ::= DOT nm\",\n+ \/* 116 *\/ \"fullname ::= nm\",\n+ \/* 117 *\/ \"fullname ::= nm DOT nm\",\n+ \/* 118 *\/ \"xfullname ::= nm\",\n+ \/* 119 *\/ \"xfullname ::= nm DOT nm\",\n+ \/* 120 *\/ \"xfullname ::= nm DOT nm AS nm\",\n+ \/* 121 *\/ \"xfullname ::= nm AS nm\",\n+ \/* 122 *\/ \"joinop ::= COMMA|JOIN\",\n+ \/* 123 *\/ \"joinop ::= JOIN_KW JOIN\",\n+ \/* 124 *\/ \"joinop ::= JOIN_KW nm JOIN\",\n+ \/* 125 *\/ \"joinop ::= JOIN_KW nm nm JOIN\",\n+ \/* 126 *\/ \"on_using ::= ON expr\",\n+ \/* 127 *\/ \"on_using ::= USING LP idlist RP\",\n+ \/* 128 *\/ \"on_using ::=\",\n+ \/* 129 *\/ \"indexed_opt ::=\",\n+ \/* 130 *\/ \"indexed_by ::= INDEXED BY nm\",\n+ \/* 131 *\/ \"indexed_by ::= NOT INDEXED\",\n@@ -161481,192 +165551,196 @@\n- \/* 209 *\/ \"expr ::= NOT expr\",\n- \/* 210 *\/ \"expr ::= BITNOT expr\",\n- \/* 211 *\/ \"expr ::= PLUS|MINUS expr\",\n- \/* 212 *\/ \"between_op ::= BETWEEN\",\n- \/* 213 *\/ \"between_op ::= NOT BETWEEN\",\n- \/* 214 *\/ \"expr ::= expr between_op expr AND expr\",\n- \/* 215 *\/ \"in_op ::= IN\",\n- \/* 216 *\/ \"in_op ::= NOT IN\",\n- \/* 217 *\/ \"expr ::= expr in_op LP exprlist RP\",\n- \/* 218 *\/ \"expr ::= LP select RP\",\n- \/* 219 *\/ \"expr ::= expr in_op LP select RP\",\n- \/* 220 *\/ \"expr ::= expr in_op nm dbnm paren_exprlist\",\n- \/* 221 *\/ \"expr ::= EXISTS LP select RP\",\n- \/* 222 *\/ \"expr ::= CASE case_operand case_exprlist case_else END\",\n- \/* 223 *\/ \"case_exprlist ::= case_exprlist WHEN expr THEN expr\",\n- \/* 224 *\/ \"case_exprlist ::= WHEN expr THEN expr\",\n- \/* 225 *\/ \"case_else ::= ELSE expr\",\n- \/* 226 *\/ \"case_else ::=\",\n- \/* 227 *\/ \"case_operand ::= expr\",\n- \/* 228 *\/ \"case_operand ::=\",\n- \/* 229 *\/ \"exprlist ::=\",\n- \/* 230 *\/ \"nexprlist ::= nexprlist COMMA expr\",\n- \/* 231 *\/ \"nexprlist ::= expr\",\n- \/* 232 *\/ \"paren_exprlist ::=\",\n- \/* 233 *\/ \"paren_exprlist ::= LP exprlist RP\",\n- \/* 234 *\/ \"cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt\",\n- \/* 235 *\/ \"uniqueflag ::= UNIQUE\",\n- \/* 236 *\/ \"uniqueflag ::=\",\n- \/* 237 *\/ \"eidlist_opt ::=\",\n- \/* 238 *\/ \"eidlist_opt ::= LP eidlist RP\",\n- \/* 239 *\/ \"eidlist ::= eidlist COMMA nm collate sortorder\",\n- \/* 240 *\/ \"eidlist ::= nm collate sortorder\",\n- \/* 241 *\/ \"collate ::=\",\n- \/* 242 *\/ \"collate ::= COLLATE ID|STRING\",\n- \/* 243 *\/ \"cmd ::= DROP INDEX ifexists fullname\",\n- \/* 244 *\/ \"cmd ::= VACUUM vinto\",\n- \/* 245 *\/ \"cmd ::= VACUUM nm vinto\",\n- \/* 246 *\/ \"vinto ::= INTO expr\",\n- \/* 247 *\/ \"vinto ::=\",\n- \/* 248 *\/ \"cmd ::= PRAGMA nm dbnm\",\n- \/* 249 *\/ \"cmd ::= PRAGMA nm dbnm EQ nmnum\",\n- \/* 250 *\/ \"cmd ::= PRAGMA nm dbnm LP nmnum RP\",\n- \/* 251 *\/ \"cmd ::= PRAGMA nm dbnm EQ minus_num\",\n- \/* 252 *\/ \"cmd ::= PRAGMA nm dbnm LP minus_num RP\",\n- \/* 253 *\/ \"plus_num ::= PLUS INTEGER|FLOAT\",\n- \/* 254 *\/ \"minus_num ::= MINUS INTEGER|FLOAT\",\n- \/* 255 *\/ \"cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END\",\n- \/* 256 *\/ \"trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause\",\n- \/* 257 *\/ \"trigger_time ::= BEFORE|AFTER\",\n- \/* 258 *\/ \"trigger_time ::= INSTEAD OF\",\n- \/* 259 *\/ \"trigger_time ::=\",\n- \/* 260 *\/ \"trigger_event ::= DELETE|INSERT\",\n- \/* 261 *\/ \"trigger_event ::= UPDATE\",\n- \/* 262 *\/ \"trigger_event ::= UPDATE OF idlist\",\n- \/* 263 *\/ \"when_clause ::=\",\n- \/* 264 *\/ \"when_clause ::= WHEN expr\",\n- \/* 265 *\/ \"trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI\",\n- \/* 266 *\/ \"trigger_cmd_list ::= trigger_cmd SEMI\",\n- \/* 267 *\/ \"trnm ::= nm DOT nm\",\n- \/* 268 *\/ \"tridxby ::= INDEXED BY nm\",\n- \/* 269 *\/ \"tridxby ::= NOT INDEXED\",\n- \/* 270 *\/ \"trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt\",\n- \/* 271 *\/ \"trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt\",\n- \/* 272 *\/ \"trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt\",\n- \/* 273 *\/ \"trigger_cmd ::= scanpt select scanpt\",\n- \/* 274 *\/ \"expr ::= RAISE LP IGNORE RP\",\n- \/* 275 *\/ \"expr ::= RAISE LP raisetype COMMA nm RP\",\n- \/* 276 *\/ \"raisetype ::= ROLLBACK\",\n- \/* 277 *\/ \"raisetype ::= ABORT\",\n- \/* 278 *\/ \"raisetype ::= FAIL\",\n- \/* 279 *\/ \"cmd ::= DROP TRIGGER ifexists fullname\",\n- \/* 280 *\/ \"cmd ::= ATTACH database_kw_opt expr AS expr key_opt\",\n- \/* 281 *\/ \"cmd ::= DETACH database_kw_opt expr\",\n- \/* 282 *\/ \"key_opt ::=\",\n- \/* 283 *\/ \"key_opt ::= KEY expr\",\n- \/* 284 *\/ \"cmd ::= REINDEX\",\n- \/* 285 *\/ \"cmd ::= REINDEX nm dbnm\",\n- \/* 286 *\/ \"cmd ::= ANALYZE\",\n- \/* 287 *\/ \"cmd ::= ANALYZE nm dbnm\",\n- \/* 288 *\/ \"cmd ::= ALTER TABLE fullname RENAME TO nm\",\n- \/* 289 *\/ \"cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist\",\n- \/* 290 *\/ \"cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm\",\n- \/* 291 *\/ \"add_column_fullname ::= fullname\",\n- \/* 292 *\/ \"cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm\",\n- \/* 293 *\/ \"cmd ::= create_vtab\",\n- \/* 294 *\/ \"cmd ::= create_vtab LP vtabarglist RP\",\n- \/* 295 *\/ \"create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm\",\n- \/* 296 *\/ \"vtabarg ::=\",\n- \/* 297 *\/ \"vtabargtoken ::= ANY\",\n- \/* 298 *\/ \"vtabargtoken ::= lp anylist RP\",\n- \/* 299 *\/ \"lp ::= LP\",\n- \/* 300 *\/ \"with ::= WITH wqlist\",\n- \/* 301 *\/ \"with ::= WITH RECURSIVE wqlist\",\n- \/* 302 *\/ \"wqas ::= AS\",\n- \/* 303 *\/ \"wqas ::= AS MATERIALIZED\",\n- \/* 304 *\/ \"wqas ::= AS NOT MATERIALIZED\",\n- \/* 305 *\/ \"wqitem ::= nm eidlist_opt wqas LP select RP\",\n- \/* 306 *\/ \"wqlist ::= wqitem\",\n- \/* 307 *\/ \"wqlist ::= wqlist COMMA wqitem\",\n- \/* 308 *\/ \"windowdefn_list ::= windowdefn\",\n- \/* 309 *\/ \"windowdefn_list ::= windowdefn_list COMMA windowdefn\",\n- \/* 310 *\/ \"windowdefn ::= nm AS LP window RP\",\n- \/* 311 *\/ \"window ::= PARTITION BY nexprlist orderby_opt frame_opt\",\n- \/* 312 *\/ \"window ::= nm PARTITION BY nexprlist orderby_opt frame_opt\",\n- \/* 313 *\/ \"window ::= ORDER BY sortlist frame_opt\",\n- \/* 314 *\/ \"window ::= nm ORDER BY sortlist frame_opt\",\n- \/* 315 *\/ \"window ::= frame_opt\",\n- \/* 316 *\/ \"window ::= nm frame_opt\",\n- \/* 317 *\/ \"frame_opt ::=\",\n- \/* 318 *\/ \"frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt\",\n- \/* 319 *\/ \"frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt\",\n- \/* 320 *\/ \"range_or_rows ::= RANGE|ROWS|GROUPS\",\n- \/* 321 *\/ \"frame_bound_s ::= frame_bound\",\n- \/* 322 *\/ \"frame_bound_s ::= UNBOUNDED PRECEDING\",\n- \/* 323 *\/ \"frame_bound_e ::= frame_bound\",\n- \/* 324 *\/ \"frame_bound_e ::= UNBOUNDED FOLLOWING\",\n- \/* 325 *\/ \"frame_bound ::= expr PRECEDING|FOLLOWING\",\n- \/* 326 *\/ \"frame_bound ::= CURRENT ROW\",\n- \/* 327 *\/ \"frame_exclude_opt ::=\",\n- \/* 328 *\/ \"frame_exclude_opt ::= EXCLUDE frame_exclude\",\n- \/* 329 *\/ \"frame_exclude ::= NO OTHERS\",\n- \/* 330 *\/ \"frame_exclude ::= CURRENT ROW\",\n- \/* 331 *\/ \"frame_exclude ::= GROUP|TIES\",\n- \/* 332 *\/ \"window_clause ::= WINDOW windowdefn_list\",\n- \/* 333 *\/ \"filter_over ::= filter_clause over_clause\",\n- \/* 334 *\/ \"filter_over ::= over_clause\",\n- \/* 335 *\/ \"filter_over ::= filter_clause\",\n- \/* 336 *\/ \"over_clause ::= OVER LP window RP\",\n- \/* 337 *\/ \"over_clause ::= OVER nm\",\n- \/* 338 *\/ \"filter_clause ::= FILTER LP WHERE expr RP\",\n- \/* 339 *\/ \"input ::= cmdlist\",\n- \/* 340 *\/ \"cmdlist ::= cmdlist ecmd\",\n- \/* 341 *\/ \"cmdlist ::= ecmd\",\n- \/* 342 *\/ \"ecmd ::= SEMI\",\n- \/* 343 *\/ \"ecmd ::= cmdx SEMI\",\n- \/* 344 *\/ \"ecmd ::= explain cmdx SEMI\",\n- \/* 345 *\/ \"trans_opt ::=\",\n- \/* 346 *\/ \"trans_opt ::= TRANSACTION\",\n- \/* 347 *\/ \"trans_opt ::= TRANSACTION nm\",\n- \/* 348 *\/ \"savepoint_opt ::= SAVEPOINT\",\n- \/* 349 *\/ \"savepoint_opt ::=\",\n- \/* 350 *\/ \"cmd ::= create_table create_table_args\",\n- \/* 351 *\/ \"table_option_set ::= table_option\",\n- \/* 352 *\/ \"columnlist ::= columnlist COMMA columnname carglist\",\n- \/* 353 *\/ \"columnlist ::= columnname carglist\",\n- \/* 354 *\/ \"nm ::= ID|INDEXED\",\n- \/* 355 *\/ \"nm ::= STRING\",\n- \/* 356 *\/ \"nm ::= JOIN_KW\",\n- \/* 357 *\/ \"typetoken ::= typename\",\n- \/* 358 *\/ \"typename ::= ID|STRING\",\n- \/* 359 *\/ \"signed ::= plus_num\",\n- \/* 360 *\/ \"signed ::= minus_num\",\n- \/* 361 *\/ \"carglist ::= carglist ccons\",\n- \/* 362 *\/ \"carglist ::=\",\n- \/* 363 *\/ \"ccons ::= NULL onconf\",\n- \/* 364 *\/ \"ccons ::= GENERATED ALWAYS AS generated\",\n- \/* 365 *\/ \"ccons ::= AS generated\",\n- \/* 366 *\/ \"conslist_opt ::= COMMA conslist\",\n- \/* 367 *\/ \"conslist ::= conslist tconscomma tcons\",\n- \/* 368 *\/ \"conslist ::= tcons\",\n- \/* 369 *\/ \"tconscomma ::=\",\n- \/* 370 *\/ \"defer_subclause_opt ::= defer_subclause\",\n- \/* 371 *\/ \"resolvetype ::= raisetype\",\n- \/* 372 *\/ \"selectnowith ::= oneselect\",\n- \/* 373 *\/ \"oneselect ::= values\",\n- \/* 374 *\/ \"sclp ::= selcollist COMMA\",\n- \/* 375 *\/ \"as ::= ID|STRING\",\n- \/* 376 *\/ \"returning ::=\",\n- \/* 377 *\/ \"expr ::= term\",\n- \/* 378 *\/ \"likeop ::= LIKE_KW|MATCH\",\n- \/* 379 *\/ \"exprlist ::= nexprlist\",\n- \/* 380 *\/ \"nmnum ::= plus_num\",\n- \/* 381 *\/ \"nmnum ::= nm\",\n- \/* 382 *\/ \"nmnum ::= ON\",\n- \/* 383 *\/ \"nmnum ::= DELETE\",\n- \/* 384 *\/ \"nmnum ::= DEFAULT\",\n- \/* 385 *\/ \"plus_num ::= INTEGER|FLOAT\",\n- \/* 386 *\/ \"foreach_clause ::=\",\n- \/* 387 *\/ \"foreach_clause ::= FOR EACH ROW\",\n- \/* 388 *\/ \"trnm ::= nm\",\n- \/* 389 *\/ \"tridxby ::=\",\n- \/* 390 *\/ \"database_kw_opt ::= DATABASE\",\n- \/* 391 *\/ \"database_kw_opt ::=\",\n- \/* 392 *\/ \"kwcolumn_opt ::=\",\n- \/* 393 *\/ \"kwcolumn_opt ::= COLUMNKW\",\n- \/* 394 *\/ \"vtabarglist ::= vtabarg\",\n- \/* 395 *\/ \"vtabarglist ::= vtabarglist COMMA vtabarg\",\n- \/* 396 *\/ \"vtabarg ::= vtabarg vtabargtoken\",\n- \/* 397 *\/ \"anylist ::=\",\n- \/* 398 *\/ \"anylist ::= anylist LP anylist RP\",\n- \/* 399 *\/ \"anylist ::= anylist ANY\",\n- \/* 400 *\/ \"with ::=\",\n+ \/* 209 *\/ \"expr ::= expr IS NOT DISTINCT FROM expr\",\n+ \/* 210 *\/ \"expr ::= expr IS DISTINCT FROM expr\",\n+ \/* 211 *\/ \"expr ::= NOT expr\",\n+ \/* 212 *\/ \"expr ::= BITNOT expr\",\n+ \/* 213 *\/ \"expr ::= PLUS|MINUS expr\",\n+ \/* 214 *\/ \"expr ::= expr PTR expr\",\n+ \/* 215 *\/ \"between_op ::= BETWEEN\",\n+ \/* 216 *\/ \"between_op ::= NOT BETWEEN\",\n+ \/* 217 *\/ \"expr ::= expr between_op expr AND expr\",\n+ \/* 218 *\/ \"in_op ::= IN\",\n+ \/* 219 *\/ \"in_op ::= NOT IN\",\n+ \/* 220 *\/ \"expr ::= expr in_op LP exprlist RP\",\n+ \/* 221 *\/ \"expr ::= LP select RP\",\n+ \/* 222 *\/ \"expr ::= expr in_op LP select RP\",\n+ \/* 223 *\/ \"expr ::= expr in_op nm dbnm paren_exprlist\",\n+ \/* 224 *\/ \"expr ::= EXISTS LP select RP\",\n+ \/* 225 *\/ \"expr ::= CASE case_operand case_exprlist case_else END\",\n+ \/* 226 *\/ \"case_exprlist ::= case_exprlist WHEN expr THEN expr\",\n+ \/* 227 *\/ \"case_exprlist ::= WHEN expr THEN expr\",\n+ \/* 228 *\/ \"case_else ::= ELSE expr\",\n+ \/* 229 *\/ \"case_else ::=\",\n+ \/* 230 *\/ \"case_operand ::= expr\",\n+ \/* 231 *\/ \"case_operand ::=\",\n+ \/* 232 *\/ \"exprlist ::=\",\n+ \/* 233 *\/ \"nexprlist ::= nexprlist COMMA expr\",\n+ \/* 234 *\/ \"nexprlist ::= expr\",\n+ \/* 235 *\/ \"paren_exprlist ::=\",\n+ \/* 236 *\/ \"paren_exprlist ::= LP exprlist RP\",\n+ \/* 237 *\/ \"cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt\",\n+ \/* 238 *\/ \"uniqueflag ::= UNIQUE\",\n+ \/* 239 *\/ \"uniqueflag ::=\",\n+ \/* 240 *\/ \"eidlist_opt ::=\",\n+ \/* 241 *\/ \"eidlist_opt ::= LP eidlist RP\",\n+ \/* 242 *\/ \"eidlist ::= eidlist COMMA nm collate sortorder\",\n+ \/* 243 *\/ \"eidlist ::= nm collate sortorder\",\n+ \/* 244 *\/ \"collate ::=\",\n+ \/* 245 *\/ \"collate ::= COLLATE ID|STRING\",\n+ \/* 246 *\/ \"cmd ::= DROP INDEX ifexists fullname\",\n+ \/* 247 *\/ \"cmd ::= VACUUM vinto\",\n+ \/* 248 *\/ \"cmd ::= VACUUM nm vinto\",\n+ \/* 249 *\/ \"vinto ::= INTO expr\",\n+ \/* 250 *\/ \"vinto ::=\",\n+ \/* 251 *\/ \"cmd ::= PRAGMA nm dbnm\",\n+ \/* 252 *\/ \"cmd ::= PRAGMA nm dbnm EQ nmnum\",\n+ \/* 253 *\/ \"cmd ::= PRAGMA nm dbnm LP nmnum RP\",\n+ \/* 254 *\/ \"cmd ::= PRAGMA nm dbnm EQ minus_num\",\n+ \/* 255 *\/ \"cmd ::= PRAGMA nm dbnm LP minus_num RP\",\n+ \/* 256 *\/ \"plus_num ::= PLUS INTEGER|FLOAT\",\n+ \/* 257 *\/ \"minus_num ::= MINUS INTEGER|FLOAT\",\n+ \/* 258 *\/ \"cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END\",\n+ \/* 259 *\/ \"trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause\",\n+ \/* 260 *\/ \"trigger_time ::= BEFORE|AFTER\",\n+ \/* 261 *\/ \"trigger_time ::= INSTEAD OF\",\n+ \/* 262 *\/ \"trigger_time ::=\",\n+ \/* 263 *\/ \"trigger_event ::= DELETE|INSERT\",\n+ \/* 264 *\/ \"trigger_event ::= UPDATE\",\n+ \/* 265 *\/ \"trigger_event ::= UPDATE OF idlist\",\n+ \/* 266 *\/ \"when_clause ::=\",\n+ \/* 267 *\/ \"when_clause ::= WHEN expr\",\n+ \/* 268 *\/ \"trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI\",\n+ \/* 269 *\/ \"trigger_cmd_list ::= trigger_cmd SEMI\",\n+ \/* 270 *\/ \"trnm ::= nm DOT nm\",\n+ \/* 271 *\/ \"tridxby ::= INDEXED BY nm\",\n+ \/* 272 *\/ \"tridxby ::= NOT INDEXED\",\n+ \/* 273 *\/ \"trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt\",\n+ \/* 274 *\/ \"trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt\",\n+ \/* 275 *\/ \"trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt\",\n+ \/* 276 *\/ \"trigger_cmd ::= scanpt select scanpt\",\n+ \/* 277 *\/ \"expr ::= RAISE LP IGNORE RP\",\n+ \/* 278 *\/ \"expr ::= RAISE LP raisetype COMMA nm RP\",\n+ \/* 279 *\/ \"raisetype ::= ROLLBACK\",\n+ \/* 280 *\/ \"raisetype ::= ABORT\",\n+ \/* 281 *\/ \"raisetype ::= FAIL\",\n+ \/* 282 *\/ \"cmd ::= DROP TRIGGER ifexists fullname\",\n+ \/* 283 *\/ \"cmd ::= ATTACH database_kw_opt expr AS expr key_opt\",\n+ \/* 284 *\/ \"cmd ::= DETACH database_kw_opt expr\",\n+ \/* 285 *\/ \"key_opt ::=\",\n+ \/* 286 *\/ \"key_opt ::= KEY expr\",\n+ \/* 287 *\/ \"cmd ::= REINDEX\",\n+ \/* 288 *\/ \"cmd ::= REINDEX nm dbnm\",\n+ \/* 289 *\/ \"cmd ::= ANALYZE\",\n+ \/* 290 *\/ \"cmd ::= ANALYZE nm dbnm\",\n+ \/* 291 *\/ \"cmd ::= ALTER TABLE fullname RENAME TO nm\",\n+ \/* 292 *\/ \"cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist\",\n+ \/* 293 *\/ \"cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm\",\n+ \/* 294 *\/ \"add_column_fullname ::= fullname\",\n+ \/* 295 *\/ \"cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm\",\n+ \/* 296 *\/ \"cmd ::= create_vtab\",\n+ \/* 297 *\/ \"cmd ::= create_vtab LP vtabarglist RP\",\n+ \/* 298 *\/ \"create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm\",\n+ \/* 299 *\/ \"vtabarg ::=\",\n+ \/* 300 *\/ \"vtabargtoken ::= ANY\",\n+ \/* 301 *\/ \"vtabargtoken ::= lp anylist RP\",\n+ \/* 302 *\/ \"lp ::= LP\",\n+ \/* 303 *\/ \"with ::= WITH wqlist\",\n+ \/* 304 *\/ \"with ::= WITH RECURSIVE wqlist\",\n+ \/* 305 *\/ \"wqas ::= AS\",\n+ \/* 306 *\/ \"wqas ::= AS MATERIALIZED\",\n+ \/* 307 *\/ \"wqas ::= AS NOT MATERIALIZED\",\n+ \/* 308 *\/ \"wqitem ::= nm eidlist_opt wqas LP select RP\",\n+ \/* 309 *\/ \"wqlist ::= wqitem\",\n+ \/* 310 *\/ \"wqlist ::= wqlist COMMA wqitem\",\n+ \/* 311 *\/ \"windowdefn_list ::= windowdefn\",\n+ \/* 312 *\/ \"windowdefn_list ::= windowdefn_list COMMA windowdefn\",\n+ \/* 313 *\/ \"windowdefn ::= nm AS LP window RP\",\n+ \/* 314 *\/ \"window ::= PARTITION BY nexprlist orderby_opt frame_opt\",\n+ \/* 315 *\/ \"window ::= nm PARTITION BY nexprlist orderby_opt frame_opt\",\n+ \/* 316 *\/ \"window ::= ORDER BY sortlist frame_opt\",\n+ \/* 317 *\/ \"window ::= nm ORDER BY sortlist frame_opt\",\n+ \/* 318 *\/ \"window ::= frame_opt\",\n+ \/* 319 *\/ \"window ::= nm frame_opt\",\n+ \/* 320 *\/ \"frame_opt ::=\",\n+ \/* 321 *\/ \"frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt\",\n+ \/* 322 *\/ \"frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt\",\n+ \/* 323 *\/ \"range_or_rows ::= RANGE|ROWS|GROUPS\",\n+ \/* 324 *\/ \"frame_bound_s ::= frame_bound\",\n+ \/* 325 *\/ \"frame_bound_s ::= UNBOUNDED PRECEDING\",\n+ \/* 326 *\/ \"frame_bound_e ::= frame_bound\",\n+ \/* 327 *\/ \"frame_bound_e ::= UNBOUNDED FOLLOWING\",\n+ \/* 328 *\/ \"frame_bound ::= expr PRECEDING|FOLLOWING\",\n+ \/* 329 *\/ \"frame_bound ::= CURRENT ROW\",\n+ \/* 330 *\/ \"frame_exclude_opt ::=\",\n+ \/* 331 *\/ \"frame_exclude_opt ::= EXCLUDE frame_exclude\",\n+ \/* 332 *\/ \"frame_exclude ::= NO OTHERS\",\n+ \/* 333 *\/ \"frame_exclude ::= CURRENT ROW\",\n+ \/* 334 *\/ \"frame_exclude ::= GROUP|TIES\",\n+ \/* 335 *\/ \"window_clause ::= WINDOW windowdefn_list\",\n+ \/* 336 *\/ \"filter_over ::= filter_clause over_clause\",\n+ \/* 337 *\/ \"filter_over ::= over_clause\",\n+ \/* 338 *\/ \"filter_over ::= filter_clause\",\n+ \/* 339 *\/ \"over_clause ::= OVER LP window RP\",\n+ \/* 340 *\/ \"over_clause ::= OVER nm\",\n+ \/* 341 *\/ \"filter_clause ::= FILTER LP WHERE expr RP\",\n+ \/* 342 *\/ \"input ::= cmdlist\",\n+ \/* 343 *\/ \"cmdlist ::= cmdlist ecmd\",\n+ \/* 344 *\/ \"cmdlist ::= ecmd\",\n+ \/* 345 *\/ \"ecmd ::= SEMI\",\n+ \/* 346 *\/ \"ecmd ::= cmdx SEMI\",\n+ \/* 347 *\/ \"ecmd ::= explain cmdx SEMI\",\n+ \/* 348 *\/ \"trans_opt ::=\",\n+ \/* 349 *\/ \"trans_opt ::= TRANSACTION\",\n+ \/* 350 *\/ \"trans_opt ::= TRANSACTION nm\",\n+ \/* 351 *\/ \"savepoint_opt ::= SAVEPOINT\",\n+ \/* 352 *\/ \"savepoint_opt ::=\",\n+ \/* 353 *\/ \"cmd ::= create_table create_table_args\",\n+ \/* 354 *\/ \"table_option_set ::= table_option\",\n+ \/* 355 *\/ \"columnlist ::= columnlist COMMA columnname carglist\",\n+ \/* 356 *\/ \"columnlist ::= columnname carglist\",\n+ \/* 357 *\/ \"nm ::= ID|INDEXED\",\n+ \/* 358 *\/ \"nm ::= STRING\",\n+ \/* 359 *\/ \"nm ::= JOIN_KW\",\n+ \/* 360 *\/ \"typetoken ::= typename\",\n+ \/* 361 *\/ \"typename ::= ID|STRING\",\n+ \/* 362 *\/ \"signed ::= plus_num\",\n+ \/* 363 *\/ \"signed ::= minus_num\",\n+ \/* 364 *\/ \"carglist ::= carglist ccons\",\n+ \/* 365 *\/ \"carglist ::=\",\n+ \/* 366 *\/ \"ccons ::= NULL onconf\",\n+ \/* 367 *\/ \"ccons ::= GENERATED ALWAYS AS generated\",\n+ \/* 368 *\/ \"ccons ::= AS generated\",\n+ \/* 369 *\/ \"conslist_opt ::= COMMA conslist\",\n+ \/* 370 *\/ \"conslist ::= conslist tconscomma tcons\",\n+ \/* 371 *\/ \"conslist ::= tcons\",\n+ \/* 372 *\/ \"tconscomma ::=\",\n+ \/* 373 *\/ \"defer_subclause_opt ::= defer_subclause\",\n+ \/* 374 *\/ \"resolvetype ::= raisetype\",\n+ \/* 375 *\/ \"selectnowith ::= oneselect\",\n+ \/* 376 *\/ \"oneselect ::= values\",\n+ \/* 377 *\/ \"sclp ::= selcollist COMMA\",\n+ \/* 378 *\/ \"as ::= ID|STRING\",\n+ \/* 379 *\/ \"indexed_opt ::= indexed_by\",\n+ \/* 380 *\/ \"returning ::=\",\n+ \/* 381 *\/ \"expr ::= term\",\n+ \/* 382 *\/ \"likeop ::= LIKE_KW|MATCH\",\n+ \/* 383 *\/ \"exprlist ::= nexprlist\",\n+ \/* 384 *\/ \"nmnum ::= plus_num\",\n+ \/* 385 *\/ \"nmnum ::= nm\",\n+ \/* 386 *\/ \"nmnum ::= ON\",\n+ \/* 387 *\/ \"nmnum ::= DELETE\",\n+ \/* 388 *\/ \"nmnum ::= DEFAULT\",\n+ \/* 389 *\/ \"plus_num ::= INTEGER|FLOAT\",\n+ \/* 390 *\/ \"foreach_clause ::=\",\n+ \/* 391 *\/ \"foreach_clause ::= FOR EACH ROW\",\n+ \/* 392 *\/ \"trnm ::= nm\",\n+ \/* 393 *\/ \"tridxby ::=\",\n+ \/* 394 *\/ \"database_kw_opt ::= DATABASE\",\n+ \/* 395 *\/ \"database_kw_opt ::=\",\n+ \/* 396 *\/ \"kwcolumn_opt ::=\",\n+ \/* 397 *\/ \"kwcolumn_opt ::= COLUMNKW\",\n+ \/* 398 *\/ \"vtabarglist ::= vtabarg\",\n+ \/* 399 *\/ \"vtabarglist ::= vtabarglist COMMA vtabarg\",\n+ \/* 400 *\/ \"vtabarg ::= vtabarg vtabargtoken\",\n+ \/* 401 *\/ \"anylist ::=\",\n+ \/* 402 *\/ \"anylist ::= anylist LP anylist RP\",\n+ \/* 403 *\/ \"anylist ::= anylist ANY\",\n+ \/* 404 *\/ \"with ::=\",\n@@ -161798,4 +165872,4 @@\n-    case 203: \/* select *\/\n-    case 238: \/* selectnowith *\/\n-    case 239: \/* oneselect *\/\n-    case 251: \/* values *\/\n+    case 204: \/* select *\/\n+    case 239: \/* selectnowith *\/\n+    case 240: \/* oneselect *\/\n+    case 252: \/* values *\/\n@@ -161803,15 +165877,14 @@\n-sqlite3SelectDelete(pParse->db, (yypminor->yy303));\n-}\n-      break;\n-    case 215: \/* term *\/\n-    case 216: \/* expr *\/\n-    case 245: \/* where_opt *\/\n-    case 247: \/* having_opt *\/\n-    case 259: \/* on_opt *\/\n-    case 266: \/* where_opt_ret *\/\n-    case 277: \/* case_operand *\/\n-    case 279: \/* case_else *\/\n-    case 282: \/* vinto *\/\n-    case 289: \/* when_clause *\/\n-    case 294: \/* key_opt *\/\n-    case 310: \/* filter_clause *\/\n+sqlite3SelectDelete(pParse->db, (yypminor->yy47));\n+}\n+      break;\n+    case 216: \/* term *\/\n+    case 217: \/* expr *\/\n+    case 246: \/* where_opt *\/\n+    case 248: \/* having_opt *\/\n+    case 267: \/* where_opt_ret *\/\n+    case 278: \/* case_operand *\/\n+    case 280: \/* case_else *\/\n+    case 283: \/* vinto *\/\n+    case 290: \/* when_clause *\/\n+    case 295: \/* key_opt *\/\n+    case 311: \/* filter_clause *\/\n@@ -161819,1 +165892,1 @@\n-sqlite3ExprDelete(pParse->db, (yypminor->yy626));\n+sqlite3ExprDelete(pParse->db, (yypminor->yy528));\n@@ -161822,8 +165895,8 @@\n-    case 220: \/* eidlist_opt *\/\n-    case 230: \/* sortlist *\/\n-    case 231: \/* eidlist *\/\n-    case 243: \/* selcollist *\/\n-    case 246: \/* groupby_opt *\/\n-    case 248: \/* orderby_opt *\/\n-    case 252: \/* nexprlist *\/\n-    case 253: \/* sclp *\/\n+    case 221: \/* eidlist_opt *\/\n+    case 231: \/* sortlist *\/\n+    case 232: \/* eidlist *\/\n+    case 244: \/* selcollist *\/\n+    case 247: \/* groupby_opt *\/\n+    case 249: \/* orderby_opt *\/\n+    case 253: \/* nexprlist *\/\n+    case 254: \/* sclp *\/\n@@ -161831,4 +165904,4 @@\n-    case 267: \/* setlist *\/\n-    case 276: \/* paren_exprlist *\/\n-    case 278: \/* case_exprlist *\/\n-    case 309: \/* part_opt *\/\n+    case 268: \/* setlist *\/\n+    case 277: \/* paren_exprlist *\/\n+    case 279: \/* case_exprlist *\/\n+    case 310: \/* part_opt *\/\n@@ -161836,1 +165909,1 @@\n-sqlite3ExprListDelete(pParse->db, (yypminor->yy562));\n+sqlite3ExprListDelete(pParse->db, (yypminor->yy322));\n@@ -161839,4 +165912,4 @@\n-    case 237: \/* fullname *\/\n-    case 244: \/* from *\/\n-    case 255: \/* seltablist *\/\n-    case 256: \/* stl_prefix *\/\n+    case 238: \/* fullname *\/\n+    case 245: \/* from *\/\n+    case 256: \/* seltablist *\/\n+    case 257: \/* stl_prefix *\/\n@@ -161845,1 +165918,1 @@\n-sqlite3SrcListDelete(pParse->db, (yypminor->yy607));\n+sqlite3SrcListDelete(pParse->db, (yypminor->yy131));\n@@ -161848,1 +165921,1 @@\n-    case 240: \/* wqlist *\/\n+    case 241: \/* wqlist *\/\n@@ -161850,1 +165923,1 @@\n-sqlite3WithDelete(pParse->db, (yypminor->yy43));\n+sqlite3WithDelete(pParse->db, (yypminor->yy521));\n@@ -161853,2 +165926,2 @@\n-    case 250: \/* window_clause *\/\n-    case 305: \/* windowdefn_list *\/\n+    case 251: \/* window_clause *\/\n+    case 306: \/* windowdefn_list *\/\n@@ -161856,1 +165929,1 @@\n-sqlite3WindowListDelete(pParse->db, (yypminor->yy375));\n+sqlite3WindowListDelete(pParse->db, (yypminor->yy41));\n@@ -161859,1 +165932,0 @@\n-    case 260: \/* using_opt *\/\n@@ -161861,1 +165933,1 @@\n-    case 269: \/* idlist_opt *\/\n+    case 270: \/* idlist_opt *\/\n@@ -161863,1 +165935,1 @@\n-sqlite3IdListDelete(pParse->db, (yypminor->yy240));\n+sqlite3IdListDelete(pParse->db, (yypminor->yy254));\n@@ -161866,5 +165938,5 @@\n-    case 272: \/* filter_over *\/\n-    case 306: \/* windowdefn *\/\n-    case 307: \/* window *\/\n-    case 308: \/* frame_opt *\/\n-    case 311: \/* over_clause *\/\n+    case 273: \/* filter_over *\/\n+    case 307: \/* windowdefn *\/\n+    case 308: \/* window *\/\n+    case 309: \/* frame_opt *\/\n+    case 312: \/* over_clause *\/\n@@ -161872,1 +165944,1 @@\n-sqlite3WindowDelete(pParse->db, (yypminor->yy375));\n+sqlite3WindowDelete(pParse->db, (yypminor->yy41));\n@@ -161875,2 +165947,2 @@\n-    case 285: \/* trigger_cmd_list *\/\n-    case 290: \/* trigger_cmd *\/\n+    case 286: \/* trigger_cmd_list *\/\n+    case 291: \/* trigger_cmd *\/\n@@ -161878,1 +165950,1 @@\n-sqlite3DeleteTriggerStep(pParse->db, (yypminor->yy95));\n+sqlite3DeleteTriggerStep(pParse->db, (yypminor->yy33));\n@@ -161881,1 +165953,1 @@\n-    case 287: \/* trigger_event *\/\n+    case 288: \/* trigger_event *\/\n@@ -161883,1 +165955,1 @@\n-sqlite3IdListDelete(pParse->db, (yypminor->yy570).b);\n+sqlite3IdListDelete(pParse->db, (yypminor->yy180).b);\n@@ -161886,3 +165958,3 @@\n-    case 313: \/* frame_bound *\/\n-    case 314: \/* frame_bound_s *\/\n-    case 315: \/* frame_bound_e *\/\n+    case 314: \/* frame_bound *\/\n+    case 315: \/* frame_bound_s *\/\n+    case 316: \/* frame_bound_e *\/\n@@ -161890,1 +165962,1 @@\n-sqlite3ExprDelete(pParse->db, (yypminor->yy81).pExpr);\n+sqlite3ExprDelete(pParse->db, (yypminor->yy595).pExpr);\n@@ -162181,175 +166253,175 @@\n-   188,  \/* (0) explain ::= EXPLAIN *\/\n-   188,  \/* (1) explain ::= EXPLAIN QUERY PLAN *\/\n-   187,  \/* (2) cmdx ::= cmd *\/\n-   189,  \/* (3) cmd ::= BEGIN transtype trans_opt *\/\n-   190,  \/* (4) transtype ::= *\/\n-   190,  \/* (5) transtype ::= DEFERRED *\/\n-   190,  \/* (6) transtype ::= IMMEDIATE *\/\n-   190,  \/* (7) transtype ::= EXCLUSIVE *\/\n-   189,  \/* (8) cmd ::= COMMIT|END trans_opt *\/\n-   189,  \/* (9) cmd ::= ROLLBACK trans_opt *\/\n-   189,  \/* (10) cmd ::= SAVEPOINT nm *\/\n-   189,  \/* (11) cmd ::= RELEASE savepoint_opt nm *\/\n-   189,  \/* (12) cmd ::= ROLLBACK trans_opt TO savepoint_opt nm *\/\n-   194,  \/* (13) create_table ::= createkw temp TABLE ifnotexists nm dbnm *\/\n-   196,  \/* (14) createkw ::= CREATE *\/\n-   198,  \/* (15) ifnotexists ::= *\/\n-   198,  \/* (16) ifnotexists ::= IF NOT EXISTS *\/\n-   197,  \/* (17) temp ::= TEMP *\/\n-   197,  \/* (18) temp ::= *\/\n-   195,  \/* (19) create_table_args ::= LP columnlist conslist_opt RP table_option_set *\/\n-   195,  \/* (20) create_table_args ::= AS select *\/\n-   202,  \/* (21) table_option_set ::= *\/\n-   202,  \/* (22) table_option_set ::= table_option_set COMMA table_option *\/\n-   204,  \/* (23) table_option ::= WITHOUT nm *\/\n-   204,  \/* (24) table_option ::= nm *\/\n-   205,  \/* (25) columnname ::= nm typetoken *\/\n-   207,  \/* (26) typetoken ::= *\/\n-   207,  \/* (27) typetoken ::= typename LP signed RP *\/\n-   207,  \/* (28) typetoken ::= typename LP signed COMMA signed RP *\/\n-   208,  \/* (29) typename ::= typename ID|STRING *\/\n-   212,  \/* (30) scanpt ::= *\/\n-   213,  \/* (31) scantok ::= *\/\n-   214,  \/* (32) ccons ::= CONSTRAINT nm *\/\n-   214,  \/* (33) ccons ::= DEFAULT scantok term *\/\n-   214,  \/* (34) ccons ::= DEFAULT LP expr RP *\/\n-   214,  \/* (35) ccons ::= DEFAULT PLUS scantok term *\/\n-   214,  \/* (36) ccons ::= DEFAULT MINUS scantok term *\/\n-   214,  \/* (37) ccons ::= DEFAULT scantok ID|INDEXED *\/\n-   214,  \/* (38) ccons ::= NOT NULL onconf *\/\n-   214,  \/* (39) ccons ::= PRIMARY KEY sortorder onconf autoinc *\/\n-   214,  \/* (40) ccons ::= UNIQUE onconf *\/\n-   214,  \/* (41) ccons ::= CHECK LP expr RP *\/\n-   214,  \/* (42) ccons ::= REFERENCES nm eidlist_opt refargs *\/\n-   214,  \/* (43) ccons ::= defer_subclause *\/\n-   214,  \/* (44) ccons ::= COLLATE ID|STRING *\/\n-   223,  \/* (45) generated ::= LP expr RP *\/\n-   223,  \/* (46) generated ::= LP expr RP ID *\/\n-   219,  \/* (47) autoinc ::= *\/\n-   219,  \/* (48) autoinc ::= AUTOINCR *\/\n-   221,  \/* (49) refargs ::= *\/\n-   221,  \/* (50) refargs ::= refargs refarg *\/\n-   224,  \/* (51) refarg ::= MATCH nm *\/\n-   224,  \/* (52) refarg ::= ON INSERT refact *\/\n-   224,  \/* (53) refarg ::= ON DELETE refact *\/\n-   224,  \/* (54) refarg ::= ON UPDATE refact *\/\n-   225,  \/* (55) refact ::= SET NULL *\/\n-   225,  \/* (56) refact ::= SET DEFAULT *\/\n-   225,  \/* (57) refact ::= CASCADE *\/\n-   225,  \/* (58) refact ::= RESTRICT *\/\n-   225,  \/* (59) refact ::= NO ACTION *\/\n-   222,  \/* (60) defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt *\/\n-   222,  \/* (61) defer_subclause ::= DEFERRABLE init_deferred_pred_opt *\/\n-   226,  \/* (62) init_deferred_pred_opt ::= *\/\n-   226,  \/* (63) init_deferred_pred_opt ::= INITIALLY DEFERRED *\/\n-   226,  \/* (64) init_deferred_pred_opt ::= INITIALLY IMMEDIATE *\/\n-   201,  \/* (65) conslist_opt ::= *\/\n-   228,  \/* (66) tconscomma ::= COMMA *\/\n-   229,  \/* (67) tcons ::= CONSTRAINT nm *\/\n-   229,  \/* (68) tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf *\/\n-   229,  \/* (69) tcons ::= UNIQUE LP sortlist RP onconf *\/\n-   229,  \/* (70) tcons ::= CHECK LP expr RP onconf *\/\n-   229,  \/* (71) tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt *\/\n-   232,  \/* (72) defer_subclause_opt ::= *\/\n-   217,  \/* (73) onconf ::= *\/\n-   217,  \/* (74) onconf ::= ON CONFLICT resolvetype *\/\n-   233,  \/* (75) orconf ::= *\/\n-   233,  \/* (76) orconf ::= OR resolvetype *\/\n-   234,  \/* (77) resolvetype ::= IGNORE *\/\n-   234,  \/* (78) resolvetype ::= REPLACE *\/\n-   189,  \/* (79) cmd ::= DROP TABLE ifexists fullname *\/\n-   236,  \/* (80) ifexists ::= IF EXISTS *\/\n-   236,  \/* (81) ifexists ::= *\/\n-   189,  \/* (82) cmd ::= createkw temp VIEW ifnotexists nm dbnm eidlist_opt AS select *\/\n-   189,  \/* (83) cmd ::= DROP VIEW ifexists fullname *\/\n-   189,  \/* (84) cmd ::= select *\/\n-   203,  \/* (85) select ::= WITH wqlist selectnowith *\/\n-   203,  \/* (86) select ::= WITH RECURSIVE wqlist selectnowith *\/\n-   203,  \/* (87) select ::= selectnowith *\/\n-   238,  \/* (88) selectnowith ::= selectnowith multiselect_op oneselect *\/\n-   241,  \/* (89) multiselect_op ::= UNION *\/\n-   241,  \/* (90) multiselect_op ::= UNION ALL *\/\n-   241,  \/* (91) multiselect_op ::= EXCEPT|INTERSECT *\/\n-   239,  \/* (92) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt *\/\n-   239,  \/* (93) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt *\/\n-   251,  \/* (94) values ::= VALUES LP nexprlist RP *\/\n-   251,  \/* (95) values ::= values COMMA LP nexprlist RP *\/\n-   242,  \/* (96) distinct ::= DISTINCT *\/\n-   242,  \/* (97) distinct ::= ALL *\/\n-   242,  \/* (98) distinct ::= *\/\n-   253,  \/* (99) sclp ::= *\/\n-   243,  \/* (100) selcollist ::= sclp scanpt expr scanpt as *\/\n-   243,  \/* (101) selcollist ::= sclp scanpt STAR *\/\n-   243,  \/* (102) selcollist ::= sclp scanpt nm DOT STAR *\/\n-   254,  \/* (103) as ::= AS nm *\/\n-   254,  \/* (104) as ::= *\/\n-   244,  \/* (105) from ::= *\/\n-   244,  \/* (106) from ::= FROM seltablist *\/\n-   256,  \/* (107) stl_prefix ::= seltablist joinop *\/\n-   256,  \/* (108) stl_prefix ::= *\/\n-   255,  \/* (109) seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt *\/\n-   255,  \/* (110) seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_opt using_opt *\/\n-   255,  \/* (111) seltablist ::= stl_prefix LP select RP as on_opt using_opt *\/\n-   255,  \/* (112) seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt *\/\n-   199,  \/* (113) dbnm ::= *\/\n-   199,  \/* (114) dbnm ::= DOT nm *\/\n-   237,  \/* (115) fullname ::= nm *\/\n-   237,  \/* (116) fullname ::= nm DOT nm *\/\n-   262,  \/* (117) xfullname ::= nm *\/\n-   262,  \/* (118) xfullname ::= nm DOT nm *\/\n-   262,  \/* (119) xfullname ::= nm DOT nm AS nm *\/\n-   262,  \/* (120) xfullname ::= nm AS nm *\/\n-   257,  \/* (121) joinop ::= COMMA|JOIN *\/\n-   257,  \/* (122) joinop ::= JOIN_KW JOIN *\/\n-   257,  \/* (123) joinop ::= JOIN_KW nm JOIN *\/\n-   257,  \/* (124) joinop ::= JOIN_KW nm nm JOIN *\/\n-   259,  \/* (125) on_opt ::= ON expr *\/\n-   259,  \/* (126) on_opt ::= *\/\n-   258,  \/* (127) indexed_opt ::= *\/\n-   258,  \/* (128) indexed_opt ::= INDEXED BY nm *\/\n-   258,  \/* (129) indexed_opt ::= NOT INDEXED *\/\n-   260,  \/* (130) using_opt ::= USING LP idlist RP *\/\n-   260,  \/* (131) using_opt ::= *\/\n-   248,  \/* (132) orderby_opt ::= *\/\n-   248,  \/* (133) orderby_opt ::= ORDER BY sortlist *\/\n-   230,  \/* (134) sortlist ::= sortlist COMMA expr sortorder nulls *\/\n-   230,  \/* (135) sortlist ::= expr sortorder nulls *\/\n-   218,  \/* (136) sortorder ::= ASC *\/\n-   218,  \/* (137) sortorder ::= DESC *\/\n-   218,  \/* (138) sortorder ::= *\/\n-   264,  \/* (139) nulls ::= NULLS FIRST *\/\n-   264,  \/* (140) nulls ::= NULLS LAST *\/\n-   264,  \/* (141) nulls ::= *\/\n-   246,  \/* (142) groupby_opt ::= *\/\n-   246,  \/* (143) groupby_opt ::= GROUP BY nexprlist *\/\n-   247,  \/* (144) having_opt ::= *\/\n-   247,  \/* (145) having_opt ::= HAVING expr *\/\n-   249,  \/* (146) limit_opt ::= *\/\n-   249,  \/* (147) limit_opt ::= LIMIT expr *\/\n-   249,  \/* (148) limit_opt ::= LIMIT expr OFFSET expr *\/\n-   249,  \/* (149) limit_opt ::= LIMIT expr COMMA expr *\/\n-   189,  \/* (150) cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret *\/\n-   245,  \/* (151) where_opt ::= *\/\n-   245,  \/* (152) where_opt ::= WHERE expr *\/\n-   266,  \/* (153) where_opt_ret ::= *\/\n-   266,  \/* (154) where_opt_ret ::= WHERE expr *\/\n-   266,  \/* (155) where_opt_ret ::= RETURNING selcollist *\/\n-   266,  \/* (156) where_opt_ret ::= WHERE expr RETURNING selcollist *\/\n-   189,  \/* (157) cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret *\/\n-   267,  \/* (158) setlist ::= setlist COMMA nm EQ expr *\/\n-   267,  \/* (159) setlist ::= setlist COMMA LP idlist RP EQ expr *\/\n-   267,  \/* (160) setlist ::= nm EQ expr *\/\n-   267,  \/* (161) setlist ::= LP idlist RP EQ expr *\/\n-   189,  \/* (162) cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert *\/\n-   189,  \/* (163) cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning *\/\n-   270,  \/* (164) upsert ::= *\/\n-   270,  \/* (165) upsert ::= RETURNING selcollist *\/\n-   270,  \/* (166) upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert *\/\n-   270,  \/* (167) upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert *\/\n-   270,  \/* (168) upsert ::= ON CONFLICT DO NOTHING returning *\/\n-   270,  \/* (169) upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning *\/\n-   271,  \/* (170) returning ::= RETURNING selcollist *\/\n-   268,  \/* (171) insert_cmd ::= INSERT orconf *\/\n-   268,  \/* (172) insert_cmd ::= REPLACE *\/\n-   269,  \/* (173) idlist_opt ::= *\/\n-   269,  \/* (174) idlist_opt ::= LP idlist RP *\/\n+   189,  \/* (0) explain ::= EXPLAIN *\/\n+   189,  \/* (1) explain ::= EXPLAIN QUERY PLAN *\/\n+   188,  \/* (2) cmdx ::= cmd *\/\n+   190,  \/* (3) cmd ::= BEGIN transtype trans_opt *\/\n+   191,  \/* (4) transtype ::= *\/\n+   191,  \/* (5) transtype ::= DEFERRED *\/\n+   191,  \/* (6) transtype ::= IMMEDIATE *\/\n+   191,  \/* (7) transtype ::= EXCLUSIVE *\/\n+   190,  \/* (8) cmd ::= COMMIT|END trans_opt *\/\n+   190,  \/* (9) cmd ::= ROLLBACK trans_opt *\/\n+   190,  \/* (10) cmd ::= SAVEPOINT nm *\/\n+   190,  \/* (11) cmd ::= RELEASE savepoint_opt nm *\/\n+   190,  \/* (12) cmd ::= ROLLBACK trans_opt TO savepoint_opt nm *\/\n+   195,  \/* (13) create_table ::= createkw temp TABLE ifnotexists nm dbnm *\/\n+   197,  \/* (14) createkw ::= CREATE *\/\n+   199,  \/* (15) ifnotexists ::= *\/\n+   199,  \/* (16) ifnotexists ::= IF NOT EXISTS *\/\n+   198,  \/* (17) temp ::= TEMP *\/\n+   198,  \/* (18) temp ::= *\/\n+   196,  \/* (19) create_table_args ::= LP columnlist conslist_opt RP table_option_set *\/\n+   196,  \/* (20) create_table_args ::= AS select *\/\n+   203,  \/* (21) table_option_set ::= *\/\n+   203,  \/* (22) table_option_set ::= table_option_set COMMA table_option *\/\n+   205,  \/* (23) table_option ::= WITHOUT nm *\/\n+   205,  \/* (24) table_option ::= nm *\/\n+   206,  \/* (25) columnname ::= nm typetoken *\/\n+   208,  \/* (26) typetoken ::= *\/\n+   208,  \/* (27) typetoken ::= typename LP signed RP *\/\n+   208,  \/* (28) typetoken ::= typename LP signed COMMA signed RP *\/\n+   209,  \/* (29) typename ::= typename ID|STRING *\/\n+   213,  \/* (30) scanpt ::= *\/\n+   214,  \/* (31) scantok ::= *\/\n+   215,  \/* (32) ccons ::= CONSTRAINT nm *\/\n+   215,  \/* (33) ccons ::= DEFAULT scantok term *\/\n+   215,  \/* (34) ccons ::= DEFAULT LP expr RP *\/\n+   215,  \/* (35) ccons ::= DEFAULT PLUS scantok term *\/\n+   215,  \/* (36) ccons ::= DEFAULT MINUS scantok term *\/\n+   215,  \/* (37) ccons ::= DEFAULT scantok ID|INDEXED *\/\n+   215,  \/* (38) ccons ::= NOT NULL onconf *\/\n+   215,  \/* (39) ccons ::= PRIMARY KEY sortorder onconf autoinc *\/\n+   215,  \/* (40) ccons ::= UNIQUE onconf *\/\n+   215,  \/* (41) ccons ::= CHECK LP expr RP *\/\n+   215,  \/* (42) ccons ::= REFERENCES nm eidlist_opt refargs *\/\n+   215,  \/* (43) ccons ::= defer_subclause *\/\n+   215,  \/* (44) ccons ::= COLLATE ID|STRING *\/\n+   224,  \/* (45) generated ::= LP expr RP *\/\n+   224,  \/* (46) generated ::= LP expr RP ID *\/\n+   220,  \/* (47) autoinc ::= *\/\n+   220,  \/* (48) autoinc ::= AUTOINCR *\/\n+   222,  \/* (49) refargs ::= *\/\n+   222,  \/* (50) refargs ::= refargs refarg *\/\n+   225,  \/* (51) refarg ::= MATCH nm *\/\n+   225,  \/* (52) refarg ::= ON INSERT refact *\/\n+   225,  \/* (53) refarg ::= ON DELETE refact *\/\n+   225,  \/* (54) refarg ::= ON UPDATE refact *\/\n+   226,  \/* (55) refact ::= SET NULL *\/\n+   226,  \/* (56) refact ::= SET DEFAULT *\/\n+   226,  \/* (57) refact ::= CASCADE *\/\n+   226,  \/* (58) refact ::= RESTRICT *\/\n+   226,  \/* (59) refact ::= NO ACTION *\/\n+   223,  \/* (60) defer_subclause ::= NOT DEFERRABLE init_deferred_pred_opt *\/\n+   223,  \/* (61) defer_subclause ::= DEFERRABLE init_deferred_pred_opt *\/\n+   227,  \/* (62) init_deferred_pred_opt ::= *\/\n+   227,  \/* (63) init_deferred_pred_opt ::= INITIALLY DEFERRED *\/\n+   227,  \/* (64) init_deferred_pred_opt ::= INITIALLY IMMEDIATE *\/\n+   202,  \/* (65) conslist_opt ::= *\/\n+   229,  \/* (66) tconscomma ::= COMMA *\/\n+   230,  \/* (67) tcons ::= CONSTRAINT nm *\/\n+   230,  \/* (68) tcons ::= PRIMARY KEY LP sortlist autoinc RP onconf *\/\n+   230,  \/* (69) tcons ::= UNIQUE LP sortlist RP onconf *\/\n+   230,  \/* (70) tcons ::= CHECK LP expr RP onconf *\/\n+   230,  \/* (71) tcons ::= FOREIGN KEY LP eidlist RP REFERENCES nm eidlist_opt refargs defer_subclause_opt *\/\n+   233,  \/* (72) defer_subclause_opt ::= *\/\n+   218,  \/* (73) onconf ::= *\/\n+   218,  \/* (74) onconf ::= ON CONFLICT resolvetype *\/\n+   234,  \/* (75) orconf ::= *\/\n+   234,  \/* (76) orconf ::= OR resolvetype *\/\n+   235,  \/* (77) resolvetype ::= IGNORE *\/\n+   235,  \/* (78) resolvetype ::= REPLACE *\/\n+   190,  \/* (79) cmd ::= DROP TABLE ifexists fullname *\/\n+   237,  \/* (80) ifexists ::= IF EXISTS *\/\n+   237,  \/* (81) ifexists ::= *\/\n+   190,  \/* (82) cmd ::= createkw temp VIEW ifnotexists nm dbnm eidlist_opt AS select *\/\n+   190,  \/* (83) cmd ::= DROP VIEW ifexists fullname *\/\n+   190,  \/* (84) cmd ::= select *\/\n+   204,  \/* (85) select ::= WITH wqlist selectnowith *\/\n+   204,  \/* (86) select ::= WITH RECURSIVE wqlist selectnowith *\/\n+   204,  \/* (87) select ::= selectnowith *\/\n+   239,  \/* (88) selectnowith ::= selectnowith multiselect_op oneselect *\/\n+   242,  \/* (89) multiselect_op ::= UNION *\/\n+   242,  \/* (90) multiselect_op ::= UNION ALL *\/\n+   242,  \/* (91) multiselect_op ::= EXCEPT|INTERSECT *\/\n+   240,  \/* (92) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt *\/\n+   240,  \/* (93) oneselect ::= SELECT distinct selcollist from where_opt groupby_opt having_opt window_clause orderby_opt limit_opt *\/\n+   252,  \/* (94) values ::= VALUES LP nexprlist RP *\/\n+   252,  \/* (95) values ::= values COMMA LP nexprlist RP *\/\n+   243,  \/* (96) distinct ::= DISTINCT *\/\n+   243,  \/* (97) distinct ::= ALL *\/\n+   243,  \/* (98) distinct ::= *\/\n+   254,  \/* (99) sclp ::= *\/\n+   244,  \/* (100) selcollist ::= sclp scanpt expr scanpt as *\/\n+   244,  \/* (101) selcollist ::= sclp scanpt STAR *\/\n+   244,  \/* (102) selcollist ::= sclp scanpt nm DOT STAR *\/\n+   255,  \/* (103) as ::= AS nm *\/\n+   255,  \/* (104) as ::= *\/\n+   245,  \/* (105) from ::= *\/\n+   245,  \/* (106) from ::= FROM seltablist *\/\n+   257,  \/* (107) stl_prefix ::= seltablist joinop *\/\n+   257,  \/* (108) stl_prefix ::= *\/\n+   256,  \/* (109) seltablist ::= stl_prefix nm dbnm as on_using *\/\n+   256,  \/* (110) seltablist ::= stl_prefix nm dbnm as indexed_by on_using *\/\n+   256,  \/* (111) seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using *\/\n+   256,  \/* (112) seltablist ::= stl_prefix LP select RP as on_using *\/\n+   256,  \/* (113) seltablist ::= stl_prefix LP seltablist RP as on_using *\/\n+   200,  \/* (114) dbnm ::= *\/\n+   200,  \/* (115) dbnm ::= DOT nm *\/\n+   238,  \/* (116) fullname ::= nm *\/\n+   238,  \/* (117) fullname ::= nm DOT nm *\/\n+   262,  \/* (118) xfullname ::= nm *\/\n+   262,  \/* (119) xfullname ::= nm DOT nm *\/\n+   262,  \/* (120) xfullname ::= nm DOT nm AS nm *\/\n+   262,  \/* (121) xfullname ::= nm AS nm *\/\n+   258,  \/* (122) joinop ::= COMMA|JOIN *\/\n+   258,  \/* (123) joinop ::= JOIN_KW JOIN *\/\n+   258,  \/* (124) joinop ::= JOIN_KW nm JOIN *\/\n+   258,  \/* (125) joinop ::= JOIN_KW nm nm JOIN *\/\n+   259,  \/* (126) on_using ::= ON expr *\/\n+   259,  \/* (127) on_using ::= USING LP idlist RP *\/\n+   259,  \/* (128) on_using ::= *\/\n+   264,  \/* (129) indexed_opt ::= *\/\n+   260,  \/* (130) indexed_by ::= INDEXED BY nm *\/\n+   260,  \/* (131) indexed_by ::= NOT INDEXED *\/\n+   249,  \/* (132) orderby_opt ::= *\/\n+   249,  \/* (133) orderby_opt ::= ORDER BY sortlist *\/\n+   231,  \/* (134) sortlist ::= sortlist COMMA expr sortorder nulls *\/\n+   231,  \/* (135) sortlist ::= expr sortorder nulls *\/\n+   219,  \/* (136) sortorder ::= ASC *\/\n+   219,  \/* (137) sortorder ::= DESC *\/\n+   219,  \/* (138) sortorder ::= *\/\n+   265,  \/* (139) nulls ::= NULLS FIRST *\/\n+   265,  \/* (140) nulls ::= NULLS LAST *\/\n+   265,  \/* (141) nulls ::= *\/\n+   247,  \/* (142) groupby_opt ::= *\/\n+   247,  \/* (143) groupby_opt ::= GROUP BY nexprlist *\/\n+   248,  \/* (144) having_opt ::= *\/\n+   248,  \/* (145) having_opt ::= HAVING expr *\/\n+   250,  \/* (146) limit_opt ::= *\/\n+   250,  \/* (147) limit_opt ::= LIMIT expr *\/\n+   250,  \/* (148) limit_opt ::= LIMIT expr OFFSET expr *\/\n+   250,  \/* (149) limit_opt ::= LIMIT expr COMMA expr *\/\n+   190,  \/* (150) cmd ::= with DELETE FROM xfullname indexed_opt where_opt_ret *\/\n+   246,  \/* (151) where_opt ::= *\/\n+   246,  \/* (152) where_opt ::= WHERE expr *\/\n+   267,  \/* (153) where_opt_ret ::= *\/\n+   267,  \/* (154) where_opt_ret ::= WHERE expr *\/\n+   267,  \/* (155) where_opt_ret ::= RETURNING selcollist *\/\n+   267,  \/* (156) where_opt_ret ::= WHERE expr RETURNING selcollist *\/\n+   190,  \/* (157) cmd ::= with UPDATE orconf xfullname indexed_opt SET setlist from where_opt_ret *\/\n+   268,  \/* (158) setlist ::= setlist COMMA nm EQ expr *\/\n+   268,  \/* (159) setlist ::= setlist COMMA LP idlist RP EQ expr *\/\n+   268,  \/* (160) setlist ::= nm EQ expr *\/\n+   268,  \/* (161) setlist ::= LP idlist RP EQ expr *\/\n+   190,  \/* (162) cmd ::= with insert_cmd INTO xfullname idlist_opt select upsert *\/\n+   190,  \/* (163) cmd ::= with insert_cmd INTO xfullname idlist_opt DEFAULT VALUES returning *\/\n+   271,  \/* (164) upsert ::= *\/\n+   271,  \/* (165) upsert ::= RETURNING selcollist *\/\n+   271,  \/* (166) upsert ::= ON CONFLICT LP sortlist RP where_opt DO UPDATE SET setlist where_opt upsert *\/\n+   271,  \/* (167) upsert ::= ON CONFLICT LP sortlist RP where_opt DO NOTHING upsert *\/\n+   271,  \/* (168) upsert ::= ON CONFLICT DO NOTHING returning *\/\n+   271,  \/* (169) upsert ::= ON CONFLICT DO UPDATE SET setlist where_opt returning *\/\n+   272,  \/* (170) returning ::= RETURNING selcollist *\/\n+   269,  \/* (171) insert_cmd ::= INSERT orconf *\/\n+   269,  \/* (172) insert_cmd ::= REPLACE *\/\n+   270,  \/* (173) idlist_opt ::= *\/\n+   270,  \/* (174) idlist_opt ::= LP idlist RP *\/\n@@ -162358,224 +166430,228 @@\n-   216,  \/* (177) expr ::= LP expr RP *\/\n-   216,  \/* (178) expr ::= ID|INDEXED *\/\n-   216,  \/* (179) expr ::= JOIN_KW *\/\n-   216,  \/* (180) expr ::= nm DOT nm *\/\n-   216,  \/* (181) expr ::= nm DOT nm DOT nm *\/\n-   215,  \/* (182) term ::= NULL|FLOAT|BLOB *\/\n-   215,  \/* (183) term ::= STRING *\/\n-   215,  \/* (184) term ::= INTEGER *\/\n-   216,  \/* (185) expr ::= VARIABLE *\/\n-   216,  \/* (186) expr ::= expr COLLATE ID|STRING *\/\n-   216,  \/* (187) expr ::= CAST LP expr AS typetoken RP *\/\n-   216,  \/* (188) expr ::= ID|INDEXED LP distinct exprlist RP *\/\n-   216,  \/* (189) expr ::= ID|INDEXED LP STAR RP *\/\n-   216,  \/* (190) expr ::= ID|INDEXED LP distinct exprlist RP filter_over *\/\n-   216,  \/* (191) expr ::= ID|INDEXED LP STAR RP filter_over *\/\n-   215,  \/* (192) term ::= CTIME_KW *\/\n-   216,  \/* (193) expr ::= LP nexprlist COMMA expr RP *\/\n-   216,  \/* (194) expr ::= expr AND expr *\/\n-   216,  \/* (195) expr ::= expr OR expr *\/\n-   216,  \/* (196) expr ::= expr LT|GT|GE|LE expr *\/\n-   216,  \/* (197) expr ::= expr EQ|NE expr *\/\n-   216,  \/* (198) expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr *\/\n-   216,  \/* (199) expr ::= expr PLUS|MINUS expr *\/\n-   216,  \/* (200) expr ::= expr STAR|SLASH|REM expr *\/\n-   216,  \/* (201) expr ::= expr CONCAT expr *\/\n-   273,  \/* (202) likeop ::= NOT LIKE_KW|MATCH *\/\n-   216,  \/* (203) expr ::= expr likeop expr *\/\n-   216,  \/* (204) expr ::= expr likeop expr ESCAPE expr *\/\n-   216,  \/* (205) expr ::= expr ISNULL|NOTNULL *\/\n-   216,  \/* (206) expr ::= expr NOT NULL *\/\n-   216,  \/* (207) expr ::= expr IS expr *\/\n-   216,  \/* (208) expr ::= expr IS NOT expr *\/\n-   216,  \/* (209) expr ::= NOT expr *\/\n-   216,  \/* (210) expr ::= BITNOT expr *\/\n-   216,  \/* (211) expr ::= PLUS|MINUS expr *\/\n-   274,  \/* (212) between_op ::= BETWEEN *\/\n-   274,  \/* (213) between_op ::= NOT BETWEEN *\/\n-   216,  \/* (214) expr ::= expr between_op expr AND expr *\/\n-   275,  \/* (215) in_op ::= IN *\/\n-   275,  \/* (216) in_op ::= NOT IN *\/\n-   216,  \/* (217) expr ::= expr in_op LP exprlist RP *\/\n-   216,  \/* (218) expr ::= LP select RP *\/\n-   216,  \/* (219) expr ::= expr in_op LP select RP *\/\n-   216,  \/* (220) expr ::= expr in_op nm dbnm paren_exprlist *\/\n-   216,  \/* (221) expr ::= EXISTS LP select RP *\/\n-   216,  \/* (222) expr ::= CASE case_operand case_exprlist case_else END *\/\n-   278,  \/* (223) case_exprlist ::= case_exprlist WHEN expr THEN expr *\/\n-   278,  \/* (224) case_exprlist ::= WHEN expr THEN expr *\/\n-   279,  \/* (225) case_else ::= ELSE expr *\/\n-   279,  \/* (226) case_else ::= *\/\n-   277,  \/* (227) case_operand ::= expr *\/\n-   277,  \/* (228) case_operand ::= *\/\n-   261,  \/* (229) exprlist ::= *\/\n-   252,  \/* (230) nexprlist ::= nexprlist COMMA expr *\/\n-   252,  \/* (231) nexprlist ::= expr *\/\n-   276,  \/* (232) paren_exprlist ::= *\/\n-   276,  \/* (233) paren_exprlist ::= LP exprlist RP *\/\n-   189,  \/* (234) cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt *\/\n-   280,  \/* (235) uniqueflag ::= UNIQUE *\/\n-   280,  \/* (236) uniqueflag ::= *\/\n-   220,  \/* (237) eidlist_opt ::= *\/\n-   220,  \/* (238) eidlist_opt ::= LP eidlist RP *\/\n-   231,  \/* (239) eidlist ::= eidlist COMMA nm collate sortorder *\/\n-   231,  \/* (240) eidlist ::= nm collate sortorder *\/\n-   281,  \/* (241) collate ::= *\/\n-   281,  \/* (242) collate ::= COLLATE ID|STRING *\/\n-   189,  \/* (243) cmd ::= DROP INDEX ifexists fullname *\/\n-   189,  \/* (244) cmd ::= VACUUM vinto *\/\n-   189,  \/* (245) cmd ::= VACUUM nm vinto *\/\n-   282,  \/* (246) vinto ::= INTO expr *\/\n-   282,  \/* (247) vinto ::= *\/\n-   189,  \/* (248) cmd ::= PRAGMA nm dbnm *\/\n-   189,  \/* (249) cmd ::= PRAGMA nm dbnm EQ nmnum *\/\n-   189,  \/* (250) cmd ::= PRAGMA nm dbnm LP nmnum RP *\/\n-   189,  \/* (251) cmd ::= PRAGMA nm dbnm EQ minus_num *\/\n-   189,  \/* (252) cmd ::= PRAGMA nm dbnm LP minus_num RP *\/\n-   210,  \/* (253) plus_num ::= PLUS INTEGER|FLOAT *\/\n-   211,  \/* (254) minus_num ::= MINUS INTEGER|FLOAT *\/\n-   189,  \/* (255) cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END *\/\n-   284,  \/* (256) trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause *\/\n-   286,  \/* (257) trigger_time ::= BEFORE|AFTER *\/\n-   286,  \/* (258) trigger_time ::= INSTEAD OF *\/\n-   286,  \/* (259) trigger_time ::= *\/\n-   287,  \/* (260) trigger_event ::= DELETE|INSERT *\/\n-   287,  \/* (261) trigger_event ::= UPDATE *\/\n-   287,  \/* (262) trigger_event ::= UPDATE OF idlist *\/\n-   289,  \/* (263) when_clause ::= *\/\n-   289,  \/* (264) when_clause ::= WHEN expr *\/\n-   285,  \/* (265) trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI *\/\n-   285,  \/* (266) trigger_cmd_list ::= trigger_cmd SEMI *\/\n-   291,  \/* (267) trnm ::= nm DOT nm *\/\n-   292,  \/* (268) tridxby ::= INDEXED BY nm *\/\n-   292,  \/* (269) tridxby ::= NOT INDEXED *\/\n-   290,  \/* (270) trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt *\/\n-   290,  \/* (271) trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt *\/\n-   290,  \/* (272) trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt *\/\n-   290,  \/* (273) trigger_cmd ::= scanpt select scanpt *\/\n-   216,  \/* (274) expr ::= RAISE LP IGNORE RP *\/\n-   216,  \/* (275) expr ::= RAISE LP raisetype COMMA nm RP *\/\n-   235,  \/* (276) raisetype ::= ROLLBACK *\/\n-   235,  \/* (277) raisetype ::= ABORT *\/\n-   235,  \/* (278) raisetype ::= FAIL *\/\n-   189,  \/* (279) cmd ::= DROP TRIGGER ifexists fullname *\/\n-   189,  \/* (280) cmd ::= ATTACH database_kw_opt expr AS expr key_opt *\/\n-   189,  \/* (281) cmd ::= DETACH database_kw_opt expr *\/\n-   294,  \/* (282) key_opt ::= *\/\n-   294,  \/* (283) key_opt ::= KEY expr *\/\n-   189,  \/* (284) cmd ::= REINDEX *\/\n-   189,  \/* (285) cmd ::= REINDEX nm dbnm *\/\n-   189,  \/* (286) cmd ::= ANALYZE *\/\n-   189,  \/* (287) cmd ::= ANALYZE nm dbnm *\/\n-   189,  \/* (288) cmd ::= ALTER TABLE fullname RENAME TO nm *\/\n-   189,  \/* (289) cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist *\/\n-   189,  \/* (290) cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm *\/\n-   295,  \/* (291) add_column_fullname ::= fullname *\/\n-   189,  \/* (292) cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm *\/\n-   189,  \/* (293) cmd ::= create_vtab *\/\n-   189,  \/* (294) cmd ::= create_vtab LP vtabarglist RP *\/\n-   297,  \/* (295) create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm *\/\n-   299,  \/* (296) vtabarg ::= *\/\n-   300,  \/* (297) vtabargtoken ::= ANY *\/\n-   300,  \/* (298) vtabargtoken ::= lp anylist RP *\/\n-   301,  \/* (299) lp ::= LP *\/\n-   265,  \/* (300) with ::= WITH wqlist *\/\n-   265,  \/* (301) with ::= WITH RECURSIVE wqlist *\/\n-   304,  \/* (302) wqas ::= AS *\/\n-   304,  \/* (303) wqas ::= AS MATERIALIZED *\/\n-   304,  \/* (304) wqas ::= AS NOT MATERIALIZED *\/\n-   303,  \/* (305) wqitem ::= nm eidlist_opt wqas LP select RP *\/\n-   240,  \/* (306) wqlist ::= wqitem *\/\n-   240,  \/* (307) wqlist ::= wqlist COMMA wqitem *\/\n-   305,  \/* (308) windowdefn_list ::= windowdefn *\/\n-   305,  \/* (309) windowdefn_list ::= windowdefn_list COMMA windowdefn *\/\n-   306,  \/* (310) windowdefn ::= nm AS LP window RP *\/\n-   307,  \/* (311) window ::= PARTITION BY nexprlist orderby_opt frame_opt *\/\n-   307,  \/* (312) window ::= nm PARTITION BY nexprlist orderby_opt frame_opt *\/\n-   307,  \/* (313) window ::= ORDER BY sortlist frame_opt *\/\n-   307,  \/* (314) window ::= nm ORDER BY sortlist frame_opt *\/\n-   307,  \/* (315) window ::= frame_opt *\/\n-   307,  \/* (316) window ::= nm frame_opt *\/\n-   308,  \/* (317) frame_opt ::= *\/\n-   308,  \/* (318) frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt *\/\n-   308,  \/* (319) frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt *\/\n-   312,  \/* (320) range_or_rows ::= RANGE|ROWS|GROUPS *\/\n-   314,  \/* (321) frame_bound_s ::= frame_bound *\/\n-   314,  \/* (322) frame_bound_s ::= UNBOUNDED PRECEDING *\/\n-   315,  \/* (323) frame_bound_e ::= frame_bound *\/\n-   315,  \/* (324) frame_bound_e ::= UNBOUNDED FOLLOWING *\/\n-   313,  \/* (325) frame_bound ::= expr PRECEDING|FOLLOWING *\/\n-   313,  \/* (326) frame_bound ::= CURRENT ROW *\/\n-   316,  \/* (327) frame_exclude_opt ::= *\/\n-   316,  \/* (328) frame_exclude_opt ::= EXCLUDE frame_exclude *\/\n-   317,  \/* (329) frame_exclude ::= NO OTHERS *\/\n-   317,  \/* (330) frame_exclude ::= CURRENT ROW *\/\n-   317,  \/* (331) frame_exclude ::= GROUP|TIES *\/\n-   250,  \/* (332) window_clause ::= WINDOW windowdefn_list *\/\n-   272,  \/* (333) filter_over ::= filter_clause over_clause *\/\n-   272,  \/* (334) filter_over ::= over_clause *\/\n-   272,  \/* (335) filter_over ::= filter_clause *\/\n-   311,  \/* (336) over_clause ::= OVER LP window RP *\/\n-   311,  \/* (337) over_clause ::= OVER nm *\/\n-   310,  \/* (338) filter_clause ::= FILTER LP WHERE expr RP *\/\n-   184,  \/* (339) input ::= cmdlist *\/\n-   185,  \/* (340) cmdlist ::= cmdlist ecmd *\/\n-   185,  \/* (341) cmdlist ::= ecmd *\/\n-   186,  \/* (342) ecmd ::= SEMI *\/\n-   186,  \/* (343) ecmd ::= cmdx SEMI *\/\n-   186,  \/* (344) ecmd ::= explain cmdx SEMI *\/\n-   191,  \/* (345) trans_opt ::= *\/\n-   191,  \/* (346) trans_opt ::= TRANSACTION *\/\n-   191,  \/* (347) trans_opt ::= TRANSACTION nm *\/\n-   193,  \/* (348) savepoint_opt ::= SAVEPOINT *\/\n-   193,  \/* (349) savepoint_opt ::= *\/\n-   189,  \/* (350) cmd ::= create_table create_table_args *\/\n-   202,  \/* (351) table_option_set ::= table_option *\/\n-   200,  \/* (352) columnlist ::= columnlist COMMA columnname carglist *\/\n-   200,  \/* (353) columnlist ::= columnname carglist *\/\n-   192,  \/* (354) nm ::= ID|INDEXED *\/\n-   192,  \/* (355) nm ::= STRING *\/\n-   192,  \/* (356) nm ::= JOIN_KW *\/\n-   207,  \/* (357) typetoken ::= typename *\/\n-   208,  \/* (358) typename ::= ID|STRING *\/\n-   209,  \/* (359) signed ::= plus_num *\/\n-   209,  \/* (360) signed ::= minus_num *\/\n-   206,  \/* (361) carglist ::= carglist ccons *\/\n-   206,  \/* (362) carglist ::= *\/\n-   214,  \/* (363) ccons ::= NULL onconf *\/\n-   214,  \/* (364) ccons ::= GENERATED ALWAYS AS generated *\/\n-   214,  \/* (365) ccons ::= AS generated *\/\n-   201,  \/* (366) conslist_opt ::= COMMA conslist *\/\n-   227,  \/* (367) conslist ::= conslist tconscomma tcons *\/\n-   227,  \/* (368) conslist ::= tcons *\/\n-   228,  \/* (369) tconscomma ::= *\/\n-   232,  \/* (370) defer_subclause_opt ::= defer_subclause *\/\n-   234,  \/* (371) resolvetype ::= raisetype *\/\n-   238,  \/* (372) selectnowith ::= oneselect *\/\n-   239,  \/* (373) oneselect ::= values *\/\n-   253,  \/* (374) sclp ::= selcollist COMMA *\/\n-   254,  \/* (375) as ::= ID|STRING *\/\n-   271,  \/* (376) returning ::= *\/\n-   216,  \/* (377) expr ::= term *\/\n-   273,  \/* (378) likeop ::= LIKE_KW|MATCH *\/\n-   261,  \/* (379) exprlist ::= nexprlist *\/\n-   283,  \/* (380) nmnum ::= plus_num *\/\n-   283,  \/* (381) nmnum ::= nm *\/\n-   283,  \/* (382) nmnum ::= ON *\/\n-   283,  \/* (383) nmnum ::= DELETE *\/\n-   283,  \/* (384) nmnum ::= DEFAULT *\/\n-   210,  \/* (385) plus_num ::= INTEGER|FLOAT *\/\n-   288,  \/* (386) foreach_clause ::= *\/\n-   288,  \/* (387) foreach_clause ::= FOR EACH ROW *\/\n-   291,  \/* (388) trnm ::= nm *\/\n-   292,  \/* (389) tridxby ::= *\/\n-   293,  \/* (390) database_kw_opt ::= DATABASE *\/\n-   293,  \/* (391) database_kw_opt ::= *\/\n-   296,  \/* (392) kwcolumn_opt ::= *\/\n-   296,  \/* (393) kwcolumn_opt ::= COLUMNKW *\/\n-   298,  \/* (394) vtabarglist ::= vtabarg *\/\n-   298,  \/* (395) vtabarglist ::= vtabarglist COMMA vtabarg *\/\n-   299,  \/* (396) vtabarg ::= vtabarg vtabargtoken *\/\n-   302,  \/* (397) anylist ::= *\/\n-   302,  \/* (398) anylist ::= anylist LP anylist RP *\/\n-   302,  \/* (399) anylist ::= anylist ANY *\/\n-   265,  \/* (400) with ::= *\/\n+   217,  \/* (177) expr ::= LP expr RP *\/\n+   217,  \/* (178) expr ::= ID|INDEXED *\/\n+   217,  \/* (179) expr ::= JOIN_KW *\/\n+   217,  \/* (180) expr ::= nm DOT nm *\/\n+   217,  \/* (181) expr ::= nm DOT nm DOT nm *\/\n+   216,  \/* (182) term ::= NULL|FLOAT|BLOB *\/\n+   216,  \/* (183) term ::= STRING *\/\n+   216,  \/* (184) term ::= INTEGER *\/\n+   217,  \/* (185) expr ::= VARIABLE *\/\n+   217,  \/* (186) expr ::= expr COLLATE ID|STRING *\/\n+   217,  \/* (187) expr ::= CAST LP expr AS typetoken RP *\/\n+   217,  \/* (188) expr ::= ID|INDEXED LP distinct exprlist RP *\/\n+   217,  \/* (189) expr ::= ID|INDEXED LP STAR RP *\/\n+   217,  \/* (190) expr ::= ID|INDEXED LP distinct exprlist RP filter_over *\/\n+   217,  \/* (191) expr ::= ID|INDEXED LP STAR RP filter_over *\/\n+   216,  \/* (192) term ::= CTIME_KW *\/\n+   217,  \/* (193) expr ::= LP nexprlist COMMA expr RP *\/\n+   217,  \/* (194) expr ::= expr AND expr *\/\n+   217,  \/* (195) expr ::= expr OR expr *\/\n+   217,  \/* (196) expr ::= expr LT|GT|GE|LE expr *\/\n+   217,  \/* (197) expr ::= expr EQ|NE expr *\/\n+   217,  \/* (198) expr ::= expr BITAND|BITOR|LSHIFT|RSHIFT expr *\/\n+   217,  \/* (199) expr ::= expr PLUS|MINUS expr *\/\n+   217,  \/* (200) expr ::= expr STAR|SLASH|REM expr *\/\n+   217,  \/* (201) expr ::= expr CONCAT expr *\/\n+   274,  \/* (202) likeop ::= NOT LIKE_KW|MATCH *\/\n+   217,  \/* (203) expr ::= expr likeop expr *\/\n+   217,  \/* (204) expr ::= expr likeop expr ESCAPE expr *\/\n+   217,  \/* (205) expr ::= expr ISNULL|NOTNULL *\/\n+   217,  \/* (206) expr ::= expr NOT NULL *\/\n+   217,  \/* (207) expr ::= expr IS expr *\/\n+   217,  \/* (208) expr ::= expr IS NOT expr *\/\n+   217,  \/* (209) expr ::= expr IS NOT DISTINCT FROM expr *\/\n+   217,  \/* (210) expr ::= expr IS DISTINCT FROM expr *\/\n+   217,  \/* (211) expr ::= NOT expr *\/\n+   217,  \/* (212) expr ::= BITNOT expr *\/\n+   217,  \/* (213) expr ::= PLUS|MINUS expr *\/\n+   217,  \/* (214) expr ::= expr PTR expr *\/\n+   275,  \/* (215) between_op ::= BETWEEN *\/\n+   275,  \/* (216) between_op ::= NOT BETWEEN *\/\n+   217,  \/* (217) expr ::= expr between_op expr AND expr *\/\n+   276,  \/* (218) in_op ::= IN *\/\n+   276,  \/* (219) in_op ::= NOT IN *\/\n+   217,  \/* (220) expr ::= expr in_op LP exprlist RP *\/\n+   217,  \/* (221) expr ::= LP select RP *\/\n+   217,  \/* (222) expr ::= expr in_op LP select RP *\/\n+   217,  \/* (223) expr ::= expr in_op nm dbnm paren_exprlist *\/\n+   217,  \/* (224) expr ::= EXISTS LP select RP *\/\n+   217,  \/* (225) expr ::= CASE case_operand case_exprlist case_else END *\/\n+   279,  \/* (226) case_exprlist ::= case_exprlist WHEN expr THEN expr *\/\n+   279,  \/* (227) case_exprlist ::= WHEN expr THEN expr *\/\n+   280,  \/* (228) case_else ::= ELSE expr *\/\n+   280,  \/* (229) case_else ::= *\/\n+   278,  \/* (230) case_operand ::= expr *\/\n+   278,  \/* (231) case_operand ::= *\/\n+   261,  \/* (232) exprlist ::= *\/\n+   253,  \/* (233) nexprlist ::= nexprlist COMMA expr *\/\n+   253,  \/* (234) nexprlist ::= expr *\/\n+   277,  \/* (235) paren_exprlist ::= *\/\n+   277,  \/* (236) paren_exprlist ::= LP exprlist RP *\/\n+   190,  \/* (237) cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt *\/\n+   281,  \/* (238) uniqueflag ::= UNIQUE *\/\n+   281,  \/* (239) uniqueflag ::= *\/\n+   221,  \/* (240) eidlist_opt ::= *\/\n+   221,  \/* (241) eidlist_opt ::= LP eidlist RP *\/\n+   232,  \/* (242) eidlist ::= eidlist COMMA nm collate sortorder *\/\n+   232,  \/* (243) eidlist ::= nm collate sortorder *\/\n+   282,  \/* (244) collate ::= *\/\n+   282,  \/* (245) collate ::= COLLATE ID|STRING *\/\n+   190,  \/* (246) cmd ::= DROP INDEX ifexists fullname *\/\n+   190,  \/* (247) cmd ::= VACUUM vinto *\/\n+   190,  \/* (248) cmd ::= VACUUM nm vinto *\/\n+   283,  \/* (249) vinto ::= INTO expr *\/\n+   283,  \/* (250) vinto ::= *\/\n+   190,  \/* (251) cmd ::= PRAGMA nm dbnm *\/\n+   190,  \/* (252) cmd ::= PRAGMA nm dbnm EQ nmnum *\/\n+   190,  \/* (253) cmd ::= PRAGMA nm dbnm LP nmnum RP *\/\n+   190,  \/* (254) cmd ::= PRAGMA nm dbnm EQ minus_num *\/\n+   190,  \/* (255) cmd ::= PRAGMA nm dbnm LP minus_num RP *\/\n+   211,  \/* (256) plus_num ::= PLUS INTEGER|FLOAT *\/\n+   212,  \/* (257) minus_num ::= MINUS INTEGER|FLOAT *\/\n+   190,  \/* (258) cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END *\/\n+   285,  \/* (259) trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause *\/\n+   287,  \/* (260) trigger_time ::= BEFORE|AFTER *\/\n+   287,  \/* (261) trigger_time ::= INSTEAD OF *\/\n+   287,  \/* (262) trigger_time ::= *\/\n+   288,  \/* (263) trigger_event ::= DELETE|INSERT *\/\n+   288,  \/* (264) trigger_event ::= UPDATE *\/\n+   288,  \/* (265) trigger_event ::= UPDATE OF idlist *\/\n+   290,  \/* (266) when_clause ::= *\/\n+   290,  \/* (267) when_clause ::= WHEN expr *\/\n+   286,  \/* (268) trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI *\/\n+   286,  \/* (269) trigger_cmd_list ::= trigger_cmd SEMI *\/\n+   292,  \/* (270) trnm ::= nm DOT nm *\/\n+   293,  \/* (271) tridxby ::= INDEXED BY nm *\/\n+   293,  \/* (272) tridxby ::= NOT INDEXED *\/\n+   291,  \/* (273) trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt *\/\n+   291,  \/* (274) trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt *\/\n+   291,  \/* (275) trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt *\/\n+   291,  \/* (276) trigger_cmd ::= scanpt select scanpt *\/\n+   217,  \/* (277) expr ::= RAISE LP IGNORE RP *\/\n+   217,  \/* (278) expr ::= RAISE LP raisetype COMMA nm RP *\/\n+   236,  \/* (279) raisetype ::= ROLLBACK *\/\n+   236,  \/* (280) raisetype ::= ABORT *\/\n+   236,  \/* (281) raisetype ::= FAIL *\/\n+   190,  \/* (282) cmd ::= DROP TRIGGER ifexists fullname *\/\n+   190,  \/* (283) cmd ::= ATTACH database_kw_opt expr AS expr key_opt *\/\n+   190,  \/* (284) cmd ::= DETACH database_kw_opt expr *\/\n+   295,  \/* (285) key_opt ::= *\/\n+   295,  \/* (286) key_opt ::= KEY expr *\/\n+   190,  \/* (287) cmd ::= REINDEX *\/\n+   190,  \/* (288) cmd ::= REINDEX nm dbnm *\/\n+   190,  \/* (289) cmd ::= ANALYZE *\/\n+   190,  \/* (290) cmd ::= ANALYZE nm dbnm *\/\n+   190,  \/* (291) cmd ::= ALTER TABLE fullname RENAME TO nm *\/\n+   190,  \/* (292) cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist *\/\n+   190,  \/* (293) cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm *\/\n+   296,  \/* (294) add_column_fullname ::= fullname *\/\n+   190,  \/* (295) cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm *\/\n+   190,  \/* (296) cmd ::= create_vtab *\/\n+   190,  \/* (297) cmd ::= create_vtab LP vtabarglist RP *\/\n+   298,  \/* (298) create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm *\/\n+   300,  \/* (299) vtabarg ::= *\/\n+   301,  \/* (300) vtabargtoken ::= ANY *\/\n+   301,  \/* (301) vtabargtoken ::= lp anylist RP *\/\n+   302,  \/* (302) lp ::= LP *\/\n+   266,  \/* (303) with ::= WITH wqlist *\/\n+   266,  \/* (304) with ::= WITH RECURSIVE wqlist *\/\n+   305,  \/* (305) wqas ::= AS *\/\n+   305,  \/* (306) wqas ::= AS MATERIALIZED *\/\n+   305,  \/* (307) wqas ::= AS NOT MATERIALIZED *\/\n+   304,  \/* (308) wqitem ::= nm eidlist_opt wqas LP select RP *\/\n+   241,  \/* (309) wqlist ::= wqitem *\/\n+   241,  \/* (310) wqlist ::= wqlist COMMA wqitem *\/\n+   306,  \/* (311) windowdefn_list ::= windowdefn *\/\n+   306,  \/* (312) windowdefn_list ::= windowdefn_list COMMA windowdefn *\/\n+   307,  \/* (313) windowdefn ::= nm AS LP window RP *\/\n+   308,  \/* (314) window ::= PARTITION BY nexprlist orderby_opt frame_opt *\/\n+   308,  \/* (315) window ::= nm PARTITION BY nexprlist orderby_opt frame_opt *\/\n+   308,  \/* (316) window ::= ORDER BY sortlist frame_opt *\/\n+   308,  \/* (317) window ::= nm ORDER BY sortlist frame_opt *\/\n+   308,  \/* (318) window ::= frame_opt *\/\n+   308,  \/* (319) window ::= nm frame_opt *\/\n+   309,  \/* (320) frame_opt ::= *\/\n+   309,  \/* (321) frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt *\/\n+   309,  \/* (322) frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt *\/\n+   313,  \/* (323) range_or_rows ::= RANGE|ROWS|GROUPS *\/\n+   315,  \/* (324) frame_bound_s ::= frame_bound *\/\n+   315,  \/* (325) frame_bound_s ::= UNBOUNDED PRECEDING *\/\n+   316,  \/* (326) frame_bound_e ::= frame_bound *\/\n+   316,  \/* (327) frame_bound_e ::= UNBOUNDED FOLLOWING *\/\n+   314,  \/* (328) frame_bound ::= expr PRECEDING|FOLLOWING *\/\n+   314,  \/* (329) frame_bound ::= CURRENT ROW *\/\n+   317,  \/* (330) frame_exclude_opt ::= *\/\n+   317,  \/* (331) frame_exclude_opt ::= EXCLUDE frame_exclude *\/\n+   318,  \/* (332) frame_exclude ::= NO OTHERS *\/\n+   318,  \/* (333) frame_exclude ::= CURRENT ROW *\/\n+   318,  \/* (334) frame_exclude ::= GROUP|TIES *\/\n+   251,  \/* (335) window_clause ::= WINDOW windowdefn_list *\/\n+   273,  \/* (336) filter_over ::= filter_clause over_clause *\/\n+   273,  \/* (337) filter_over ::= over_clause *\/\n+   273,  \/* (338) filter_over ::= filter_clause *\/\n+   312,  \/* (339) over_clause ::= OVER LP window RP *\/\n+   312,  \/* (340) over_clause ::= OVER nm *\/\n+   311,  \/* (341) filter_clause ::= FILTER LP WHERE expr RP *\/\n+   185,  \/* (342) input ::= cmdlist *\/\n+   186,  \/* (343) cmdlist ::= cmdlist ecmd *\/\n+   186,  \/* (344) cmdlist ::= ecmd *\/\n+   187,  \/* (345) ecmd ::= SEMI *\/\n+   187,  \/* (346) ecmd ::= cmdx SEMI *\/\n+   187,  \/* (347) ecmd ::= explain cmdx SEMI *\/\n+   192,  \/* (348) trans_opt ::= *\/\n+   192,  \/* (349) trans_opt ::= TRANSACTION *\/\n+   192,  \/* (350) trans_opt ::= TRANSACTION nm *\/\n+   194,  \/* (351) savepoint_opt ::= SAVEPOINT *\/\n+   194,  \/* (352) savepoint_opt ::= *\/\n+   190,  \/* (353) cmd ::= create_table create_table_args *\/\n+   203,  \/* (354) table_option_set ::= table_option *\/\n+   201,  \/* (355) columnlist ::= columnlist COMMA columnname carglist *\/\n+   201,  \/* (356) columnlist ::= columnname carglist *\/\n+   193,  \/* (357) nm ::= ID|INDEXED *\/\n+   193,  \/* (358) nm ::= STRING *\/\n+   193,  \/* (359) nm ::= JOIN_KW *\/\n+   208,  \/* (360) typetoken ::= typename *\/\n+   209,  \/* (361) typename ::= ID|STRING *\/\n+   210,  \/* (362) signed ::= plus_num *\/\n+   210,  \/* (363) signed ::= minus_num *\/\n+   207,  \/* (364) carglist ::= carglist ccons *\/\n+   207,  \/* (365) carglist ::= *\/\n+   215,  \/* (366) ccons ::= NULL onconf *\/\n+   215,  \/* (367) ccons ::= GENERATED ALWAYS AS generated *\/\n+   215,  \/* (368) ccons ::= AS generated *\/\n+   202,  \/* (369) conslist_opt ::= COMMA conslist *\/\n+   228,  \/* (370) conslist ::= conslist tconscomma tcons *\/\n+   228,  \/* (371) conslist ::= tcons *\/\n+   229,  \/* (372) tconscomma ::= *\/\n+   233,  \/* (373) defer_subclause_opt ::= defer_subclause *\/\n+   235,  \/* (374) resolvetype ::= raisetype *\/\n+   239,  \/* (375) selectnowith ::= oneselect *\/\n+   240,  \/* (376) oneselect ::= values *\/\n+   254,  \/* (377) sclp ::= selcollist COMMA *\/\n+   255,  \/* (378) as ::= ID|STRING *\/\n+   264,  \/* (379) indexed_opt ::= indexed_by *\/\n+   272,  \/* (380) returning ::= *\/\n+   217,  \/* (381) expr ::= term *\/\n+   274,  \/* (382) likeop ::= LIKE_KW|MATCH *\/\n+   261,  \/* (383) exprlist ::= nexprlist *\/\n+   284,  \/* (384) nmnum ::= plus_num *\/\n+   284,  \/* (385) nmnum ::= nm *\/\n+   284,  \/* (386) nmnum ::= ON *\/\n+   284,  \/* (387) nmnum ::= DELETE *\/\n+   284,  \/* (388) nmnum ::= DEFAULT *\/\n+   211,  \/* (389) plus_num ::= INTEGER|FLOAT *\/\n+   289,  \/* (390) foreach_clause ::= *\/\n+   289,  \/* (391) foreach_clause ::= FOR EACH ROW *\/\n+   292,  \/* (392) trnm ::= nm *\/\n+   293,  \/* (393) tridxby ::= *\/\n+   294,  \/* (394) database_kw_opt ::= DATABASE *\/\n+   294,  \/* (395) database_kw_opt ::= *\/\n+   297,  \/* (396) kwcolumn_opt ::= *\/\n+   297,  \/* (397) kwcolumn_opt ::= COLUMNKW *\/\n+   299,  \/* (398) vtabarglist ::= vtabarg *\/\n+   299,  \/* (399) vtabarglist ::= vtabarglist COMMA vtabarg *\/\n+   300,  \/* (400) vtabarg ::= vtabarg vtabargtoken *\/\n+   303,  \/* (401) anylist ::= *\/\n+   303,  \/* (402) anylist ::= anylist LP anylist RP *\/\n+   303,  \/* (403) anylist ::= anylist ANY *\/\n+   266,  \/* (404) with ::= *\/\n@@ -162696,23 +166772,23 @@\n-   -7,  \/* (109) seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt *\/\n-   -9,  \/* (110) seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_opt using_opt *\/\n-   -7,  \/* (111) seltablist ::= stl_prefix LP select RP as on_opt using_opt *\/\n-   -7,  \/* (112) seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt *\/\n-    0,  \/* (113) dbnm ::= *\/\n-   -2,  \/* (114) dbnm ::= DOT nm *\/\n-   -1,  \/* (115) fullname ::= nm *\/\n-   -3,  \/* (116) fullname ::= nm DOT nm *\/\n-   -1,  \/* (117) xfullname ::= nm *\/\n-   -3,  \/* (118) xfullname ::= nm DOT nm *\/\n-   -5,  \/* (119) xfullname ::= nm DOT nm AS nm *\/\n-   -3,  \/* (120) xfullname ::= nm AS nm *\/\n-   -1,  \/* (121) joinop ::= COMMA|JOIN *\/\n-   -2,  \/* (122) joinop ::= JOIN_KW JOIN *\/\n-   -3,  \/* (123) joinop ::= JOIN_KW nm JOIN *\/\n-   -4,  \/* (124) joinop ::= JOIN_KW nm nm JOIN *\/\n-   -2,  \/* (125) on_opt ::= ON expr *\/\n-    0,  \/* (126) on_opt ::= *\/\n-    0,  \/* (127) indexed_opt ::= *\/\n-   -3,  \/* (128) indexed_opt ::= INDEXED BY nm *\/\n-   -2,  \/* (129) indexed_opt ::= NOT INDEXED *\/\n-   -4,  \/* (130) using_opt ::= USING LP idlist RP *\/\n-    0,  \/* (131) using_opt ::= *\/\n+   -5,  \/* (109) seltablist ::= stl_prefix nm dbnm as on_using *\/\n+   -6,  \/* (110) seltablist ::= stl_prefix nm dbnm as indexed_by on_using *\/\n+   -8,  \/* (111) seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using *\/\n+   -6,  \/* (112) seltablist ::= stl_prefix LP select RP as on_using *\/\n+   -6,  \/* (113) seltablist ::= stl_prefix LP seltablist RP as on_using *\/\n+    0,  \/* (114) dbnm ::= *\/\n+   -2,  \/* (115) dbnm ::= DOT nm *\/\n+   -1,  \/* (116) fullname ::= nm *\/\n+   -3,  \/* (117) fullname ::= nm DOT nm *\/\n+   -1,  \/* (118) xfullname ::= nm *\/\n+   -3,  \/* (119) xfullname ::= nm DOT nm *\/\n+   -5,  \/* (120) xfullname ::= nm DOT nm AS nm *\/\n+   -3,  \/* (121) xfullname ::= nm AS nm *\/\n+   -1,  \/* (122) joinop ::= COMMA|JOIN *\/\n+   -2,  \/* (123) joinop ::= JOIN_KW JOIN *\/\n+   -3,  \/* (124) joinop ::= JOIN_KW nm JOIN *\/\n+   -4,  \/* (125) joinop ::= JOIN_KW nm nm JOIN *\/\n+   -2,  \/* (126) on_using ::= ON expr *\/\n+   -4,  \/* (127) on_using ::= USING LP idlist RP *\/\n+    0,  \/* (128) on_using ::= *\/\n+    0,  \/* (129) indexed_opt ::= *\/\n+   -3,  \/* (130) indexed_by ::= INDEXED BY nm *\/\n+   -2,  \/* (131) indexed_by ::= NOT INDEXED *\/\n@@ -162796,192 +166872,196 @@\n-   -2,  \/* (209) expr ::= NOT expr *\/\n-   -2,  \/* (210) expr ::= BITNOT expr *\/\n-   -2,  \/* (211) expr ::= PLUS|MINUS expr *\/\n-   -1,  \/* (212) between_op ::= BETWEEN *\/\n-   -2,  \/* (213) between_op ::= NOT BETWEEN *\/\n-   -5,  \/* (214) expr ::= expr between_op expr AND expr *\/\n-   -1,  \/* (215) in_op ::= IN *\/\n-   -2,  \/* (216) in_op ::= NOT IN *\/\n-   -5,  \/* (217) expr ::= expr in_op LP exprlist RP *\/\n-   -3,  \/* (218) expr ::= LP select RP *\/\n-   -5,  \/* (219) expr ::= expr in_op LP select RP *\/\n-   -5,  \/* (220) expr ::= expr in_op nm dbnm paren_exprlist *\/\n-   -4,  \/* (221) expr ::= EXISTS LP select RP *\/\n-   -5,  \/* (222) expr ::= CASE case_operand case_exprlist case_else END *\/\n-   -5,  \/* (223) case_exprlist ::= case_exprlist WHEN expr THEN expr *\/\n-   -4,  \/* (224) case_exprlist ::= WHEN expr THEN expr *\/\n-   -2,  \/* (225) case_else ::= ELSE expr *\/\n-    0,  \/* (226) case_else ::= *\/\n-   -1,  \/* (227) case_operand ::= expr *\/\n-    0,  \/* (228) case_operand ::= *\/\n-    0,  \/* (229) exprlist ::= *\/\n-   -3,  \/* (230) nexprlist ::= nexprlist COMMA expr *\/\n-   -1,  \/* (231) nexprlist ::= expr *\/\n-    0,  \/* (232) paren_exprlist ::= *\/\n-   -3,  \/* (233) paren_exprlist ::= LP exprlist RP *\/\n-  -12,  \/* (234) cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt *\/\n-   -1,  \/* (235) uniqueflag ::= UNIQUE *\/\n-    0,  \/* (236) uniqueflag ::= *\/\n-    0,  \/* (237) eidlist_opt ::= *\/\n-   -3,  \/* (238) eidlist_opt ::= LP eidlist RP *\/\n-   -5,  \/* (239) eidlist ::= eidlist COMMA nm collate sortorder *\/\n-   -3,  \/* (240) eidlist ::= nm collate sortorder *\/\n-    0,  \/* (241) collate ::= *\/\n-   -2,  \/* (242) collate ::= COLLATE ID|STRING *\/\n-   -4,  \/* (243) cmd ::= DROP INDEX ifexists fullname *\/\n-   -2,  \/* (244) cmd ::= VACUUM vinto *\/\n-   -3,  \/* (245) cmd ::= VACUUM nm vinto *\/\n-   -2,  \/* (246) vinto ::= INTO expr *\/\n-    0,  \/* (247) vinto ::= *\/\n-   -3,  \/* (248) cmd ::= PRAGMA nm dbnm *\/\n-   -5,  \/* (249) cmd ::= PRAGMA nm dbnm EQ nmnum *\/\n-   -6,  \/* (250) cmd ::= PRAGMA nm dbnm LP nmnum RP *\/\n-   -5,  \/* (251) cmd ::= PRAGMA nm dbnm EQ minus_num *\/\n-   -6,  \/* (252) cmd ::= PRAGMA nm dbnm LP minus_num RP *\/\n-   -2,  \/* (253) plus_num ::= PLUS INTEGER|FLOAT *\/\n-   -2,  \/* (254) minus_num ::= MINUS INTEGER|FLOAT *\/\n-   -5,  \/* (255) cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END *\/\n-  -11,  \/* (256) trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause *\/\n-   -1,  \/* (257) trigger_time ::= BEFORE|AFTER *\/\n-   -2,  \/* (258) trigger_time ::= INSTEAD OF *\/\n-    0,  \/* (259) trigger_time ::= *\/\n-   -1,  \/* (260) trigger_event ::= DELETE|INSERT *\/\n-   -1,  \/* (261) trigger_event ::= UPDATE *\/\n-   -3,  \/* (262) trigger_event ::= UPDATE OF idlist *\/\n-    0,  \/* (263) when_clause ::= *\/\n-   -2,  \/* (264) when_clause ::= WHEN expr *\/\n-   -3,  \/* (265) trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI *\/\n-   -2,  \/* (266) trigger_cmd_list ::= trigger_cmd SEMI *\/\n-   -3,  \/* (267) trnm ::= nm DOT nm *\/\n-   -3,  \/* (268) tridxby ::= INDEXED BY nm *\/\n-   -2,  \/* (269) tridxby ::= NOT INDEXED *\/\n-   -9,  \/* (270) trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt *\/\n-   -8,  \/* (271) trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt *\/\n-   -6,  \/* (272) trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt *\/\n-   -3,  \/* (273) trigger_cmd ::= scanpt select scanpt *\/\n-   -4,  \/* (274) expr ::= RAISE LP IGNORE RP *\/\n-   -6,  \/* (275) expr ::= RAISE LP raisetype COMMA nm RP *\/\n-   -1,  \/* (276) raisetype ::= ROLLBACK *\/\n-   -1,  \/* (277) raisetype ::= ABORT *\/\n-   -1,  \/* (278) raisetype ::= FAIL *\/\n-   -4,  \/* (279) cmd ::= DROP TRIGGER ifexists fullname *\/\n-   -6,  \/* (280) cmd ::= ATTACH database_kw_opt expr AS expr key_opt *\/\n-   -3,  \/* (281) cmd ::= DETACH database_kw_opt expr *\/\n-    0,  \/* (282) key_opt ::= *\/\n-   -2,  \/* (283) key_opt ::= KEY expr *\/\n-   -1,  \/* (284) cmd ::= REINDEX *\/\n-   -3,  \/* (285) cmd ::= REINDEX nm dbnm *\/\n-   -1,  \/* (286) cmd ::= ANALYZE *\/\n-   -3,  \/* (287) cmd ::= ANALYZE nm dbnm *\/\n-   -6,  \/* (288) cmd ::= ALTER TABLE fullname RENAME TO nm *\/\n-   -7,  \/* (289) cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist *\/\n-   -6,  \/* (290) cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm *\/\n-   -1,  \/* (291) add_column_fullname ::= fullname *\/\n-   -8,  \/* (292) cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm *\/\n-   -1,  \/* (293) cmd ::= create_vtab *\/\n-   -4,  \/* (294) cmd ::= create_vtab LP vtabarglist RP *\/\n-   -8,  \/* (295) create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm *\/\n-    0,  \/* (296) vtabarg ::= *\/\n-   -1,  \/* (297) vtabargtoken ::= ANY *\/\n-   -3,  \/* (298) vtabargtoken ::= lp anylist RP *\/\n-   -1,  \/* (299) lp ::= LP *\/\n-   -2,  \/* (300) with ::= WITH wqlist *\/\n-   -3,  \/* (301) with ::= WITH RECURSIVE wqlist *\/\n-   -1,  \/* (302) wqas ::= AS *\/\n-   -2,  \/* (303) wqas ::= AS MATERIALIZED *\/\n-   -3,  \/* (304) wqas ::= AS NOT MATERIALIZED *\/\n-   -6,  \/* (305) wqitem ::= nm eidlist_opt wqas LP select RP *\/\n-   -1,  \/* (306) wqlist ::= wqitem *\/\n-   -3,  \/* (307) wqlist ::= wqlist COMMA wqitem *\/\n-   -1,  \/* (308) windowdefn_list ::= windowdefn *\/\n-   -3,  \/* (309) windowdefn_list ::= windowdefn_list COMMA windowdefn *\/\n-   -5,  \/* (310) windowdefn ::= nm AS LP window RP *\/\n-   -5,  \/* (311) window ::= PARTITION BY nexprlist orderby_opt frame_opt *\/\n-   -6,  \/* (312) window ::= nm PARTITION BY nexprlist orderby_opt frame_opt *\/\n-   -4,  \/* (313) window ::= ORDER BY sortlist frame_opt *\/\n-   -5,  \/* (314) window ::= nm ORDER BY sortlist frame_opt *\/\n-   -1,  \/* (315) window ::= frame_opt *\/\n-   -2,  \/* (316) window ::= nm frame_opt *\/\n-    0,  \/* (317) frame_opt ::= *\/\n-   -3,  \/* (318) frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt *\/\n-   -6,  \/* (319) frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt *\/\n-   -1,  \/* (320) range_or_rows ::= RANGE|ROWS|GROUPS *\/\n-   -1,  \/* (321) frame_bound_s ::= frame_bound *\/\n-   -2,  \/* (322) frame_bound_s ::= UNBOUNDED PRECEDING *\/\n-   -1,  \/* (323) frame_bound_e ::= frame_bound *\/\n-   -2,  \/* (324) frame_bound_e ::= UNBOUNDED FOLLOWING *\/\n-   -2,  \/* (325) frame_bound ::= expr PRECEDING|FOLLOWING *\/\n-   -2,  \/* (326) frame_bound ::= CURRENT ROW *\/\n-    0,  \/* (327) frame_exclude_opt ::= *\/\n-   -2,  \/* (328) frame_exclude_opt ::= EXCLUDE frame_exclude *\/\n-   -2,  \/* (329) frame_exclude ::= NO OTHERS *\/\n-   -2,  \/* (330) frame_exclude ::= CURRENT ROW *\/\n-   -1,  \/* (331) frame_exclude ::= GROUP|TIES *\/\n-   -2,  \/* (332) window_clause ::= WINDOW windowdefn_list *\/\n-   -2,  \/* (333) filter_over ::= filter_clause over_clause *\/\n-   -1,  \/* (334) filter_over ::= over_clause *\/\n-   -1,  \/* (335) filter_over ::= filter_clause *\/\n-   -4,  \/* (336) over_clause ::= OVER LP window RP *\/\n-   -2,  \/* (337) over_clause ::= OVER nm *\/\n-   -5,  \/* (338) filter_clause ::= FILTER LP WHERE expr RP *\/\n-   -1,  \/* (339) input ::= cmdlist *\/\n-   -2,  \/* (340) cmdlist ::= cmdlist ecmd *\/\n-   -1,  \/* (341) cmdlist ::= ecmd *\/\n-   -1,  \/* (342) ecmd ::= SEMI *\/\n-   -2,  \/* (343) ecmd ::= cmdx SEMI *\/\n-   -3,  \/* (344) ecmd ::= explain cmdx SEMI *\/\n-    0,  \/* (345) trans_opt ::= *\/\n-   -1,  \/* (346) trans_opt ::= TRANSACTION *\/\n-   -2,  \/* (347) trans_opt ::= TRANSACTION nm *\/\n-   -1,  \/* (348) savepoint_opt ::= SAVEPOINT *\/\n-    0,  \/* (349) savepoint_opt ::= *\/\n-   -2,  \/* (350) cmd ::= create_table create_table_args *\/\n-   -1,  \/* (351) table_option_set ::= table_option *\/\n-   -4,  \/* (352) columnlist ::= columnlist COMMA columnname carglist *\/\n-   -2,  \/* (353) columnlist ::= columnname carglist *\/\n-   -1,  \/* (354) nm ::= ID|INDEXED *\/\n-   -1,  \/* (355) nm ::= STRING *\/\n-   -1,  \/* (356) nm ::= JOIN_KW *\/\n-   -1,  \/* (357) typetoken ::= typename *\/\n-   -1,  \/* (358) typename ::= ID|STRING *\/\n-   -1,  \/* (359) signed ::= plus_num *\/\n-   -1,  \/* (360) signed ::= minus_num *\/\n-   -2,  \/* (361) carglist ::= carglist ccons *\/\n-    0,  \/* (362) carglist ::= *\/\n-   -2,  \/* (363) ccons ::= NULL onconf *\/\n-   -4,  \/* (364) ccons ::= GENERATED ALWAYS AS generated *\/\n-   -2,  \/* (365) ccons ::= AS generated *\/\n-   -2,  \/* (366) conslist_opt ::= COMMA conslist *\/\n-   -3,  \/* (367) conslist ::= conslist tconscomma tcons *\/\n-   -1,  \/* (368) conslist ::= tcons *\/\n-    0,  \/* (369) tconscomma ::= *\/\n-   -1,  \/* (370) defer_subclause_opt ::= defer_subclause *\/\n-   -1,  \/* (371) resolvetype ::= raisetype *\/\n-   -1,  \/* (372) selectnowith ::= oneselect *\/\n-   -1,  \/* (373) oneselect ::= values *\/\n-   -2,  \/* (374) sclp ::= selcollist COMMA *\/\n-   -1,  \/* (375) as ::= ID|STRING *\/\n-    0,  \/* (376) returning ::= *\/\n-   -1,  \/* (377) expr ::= term *\/\n-   -1,  \/* (378) likeop ::= LIKE_KW|MATCH *\/\n-   -1,  \/* (379) exprlist ::= nexprlist *\/\n-   -1,  \/* (380) nmnum ::= plus_num *\/\n-   -1,  \/* (381) nmnum ::= nm *\/\n-   -1,  \/* (382) nmnum ::= ON *\/\n-   -1,  \/* (383) nmnum ::= DELETE *\/\n-   -1,  \/* (384) nmnum ::= DEFAULT *\/\n-   -1,  \/* (385) plus_num ::= INTEGER|FLOAT *\/\n-    0,  \/* (386) foreach_clause ::= *\/\n-   -3,  \/* (387) foreach_clause ::= FOR EACH ROW *\/\n-   -1,  \/* (388) trnm ::= nm *\/\n-    0,  \/* (389) tridxby ::= *\/\n-   -1,  \/* (390) database_kw_opt ::= DATABASE *\/\n-    0,  \/* (391) database_kw_opt ::= *\/\n-    0,  \/* (392) kwcolumn_opt ::= *\/\n-   -1,  \/* (393) kwcolumn_opt ::= COLUMNKW *\/\n-   -1,  \/* (394) vtabarglist ::= vtabarg *\/\n-   -3,  \/* (395) vtabarglist ::= vtabarglist COMMA vtabarg *\/\n-   -2,  \/* (396) vtabarg ::= vtabarg vtabargtoken *\/\n-    0,  \/* (397) anylist ::= *\/\n-   -4,  \/* (398) anylist ::= anylist LP anylist RP *\/\n-   -2,  \/* (399) anylist ::= anylist ANY *\/\n-    0,  \/* (400) with ::= *\/\n+   -6,  \/* (209) expr ::= expr IS NOT DISTINCT FROM expr *\/\n+   -5,  \/* (210) expr ::= expr IS DISTINCT FROM expr *\/\n+   -2,  \/* (211) expr ::= NOT expr *\/\n+   -2,  \/* (212) expr ::= BITNOT expr *\/\n+   -2,  \/* (213) expr ::= PLUS|MINUS expr *\/\n+   -3,  \/* (214) expr ::= expr PTR expr *\/\n+   -1,  \/* (215) between_op ::= BETWEEN *\/\n+   -2,  \/* (216) between_op ::= NOT BETWEEN *\/\n+   -5,  \/* (217) expr ::= expr between_op expr AND expr *\/\n+   -1,  \/* (218) in_op ::= IN *\/\n+   -2,  \/* (219) in_op ::= NOT IN *\/\n+   -5,  \/* (220) expr ::= expr in_op LP exprlist RP *\/\n+   -3,  \/* (221) expr ::= LP select RP *\/\n+   -5,  \/* (222) expr ::= expr in_op LP select RP *\/\n+   -5,  \/* (223) expr ::= expr in_op nm dbnm paren_exprlist *\/\n+   -4,  \/* (224) expr ::= EXISTS LP select RP *\/\n+   -5,  \/* (225) expr ::= CASE case_operand case_exprlist case_else END *\/\n+   -5,  \/* (226) case_exprlist ::= case_exprlist WHEN expr THEN expr *\/\n+   -4,  \/* (227) case_exprlist ::= WHEN expr THEN expr *\/\n+   -2,  \/* (228) case_else ::= ELSE expr *\/\n+    0,  \/* (229) case_else ::= *\/\n+   -1,  \/* (230) case_operand ::= expr *\/\n+    0,  \/* (231) case_operand ::= *\/\n+    0,  \/* (232) exprlist ::= *\/\n+   -3,  \/* (233) nexprlist ::= nexprlist COMMA expr *\/\n+   -1,  \/* (234) nexprlist ::= expr *\/\n+    0,  \/* (235) paren_exprlist ::= *\/\n+   -3,  \/* (236) paren_exprlist ::= LP exprlist RP *\/\n+  -12,  \/* (237) cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt *\/\n+   -1,  \/* (238) uniqueflag ::= UNIQUE *\/\n+    0,  \/* (239) uniqueflag ::= *\/\n+    0,  \/* (240) eidlist_opt ::= *\/\n+   -3,  \/* (241) eidlist_opt ::= LP eidlist RP *\/\n+   -5,  \/* (242) eidlist ::= eidlist COMMA nm collate sortorder *\/\n+   -3,  \/* (243) eidlist ::= nm collate sortorder *\/\n+    0,  \/* (244) collate ::= *\/\n+   -2,  \/* (245) collate ::= COLLATE ID|STRING *\/\n+   -4,  \/* (246) cmd ::= DROP INDEX ifexists fullname *\/\n+   -2,  \/* (247) cmd ::= VACUUM vinto *\/\n+   -3,  \/* (248) cmd ::= VACUUM nm vinto *\/\n+   -2,  \/* (249) vinto ::= INTO expr *\/\n+    0,  \/* (250) vinto ::= *\/\n+   -3,  \/* (251) cmd ::= PRAGMA nm dbnm *\/\n+   -5,  \/* (252) cmd ::= PRAGMA nm dbnm EQ nmnum *\/\n+   -6,  \/* (253) cmd ::= PRAGMA nm dbnm LP nmnum RP *\/\n+   -5,  \/* (254) cmd ::= PRAGMA nm dbnm EQ minus_num *\/\n+   -6,  \/* (255) cmd ::= PRAGMA nm dbnm LP minus_num RP *\/\n+   -2,  \/* (256) plus_num ::= PLUS INTEGER|FLOAT *\/\n+   -2,  \/* (257) minus_num ::= MINUS INTEGER|FLOAT *\/\n+   -5,  \/* (258) cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END *\/\n+  -11,  \/* (259) trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause *\/\n+   -1,  \/* (260) trigger_time ::= BEFORE|AFTER *\/\n+   -2,  \/* (261) trigger_time ::= INSTEAD OF *\/\n+    0,  \/* (262) trigger_time ::= *\/\n+   -1,  \/* (263) trigger_event ::= DELETE|INSERT *\/\n+   -1,  \/* (264) trigger_event ::= UPDATE *\/\n+   -3,  \/* (265) trigger_event ::= UPDATE OF idlist *\/\n+    0,  \/* (266) when_clause ::= *\/\n+   -2,  \/* (267) when_clause ::= WHEN expr *\/\n+   -3,  \/* (268) trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI *\/\n+   -2,  \/* (269) trigger_cmd_list ::= trigger_cmd SEMI *\/\n+   -3,  \/* (270) trnm ::= nm DOT nm *\/\n+   -3,  \/* (271) tridxby ::= INDEXED BY nm *\/\n+   -2,  \/* (272) tridxby ::= NOT INDEXED *\/\n+   -9,  \/* (273) trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt *\/\n+   -8,  \/* (274) trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt *\/\n+   -6,  \/* (275) trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt *\/\n+   -3,  \/* (276) trigger_cmd ::= scanpt select scanpt *\/\n+   -4,  \/* (277) expr ::= RAISE LP IGNORE RP *\/\n+   -6,  \/* (278) expr ::= RAISE LP raisetype COMMA nm RP *\/\n+   -1,  \/* (279) raisetype ::= ROLLBACK *\/\n+   -1,  \/* (280) raisetype ::= ABORT *\/\n+   -1,  \/* (281) raisetype ::= FAIL *\/\n+   -4,  \/* (282) cmd ::= DROP TRIGGER ifexists fullname *\/\n+   -6,  \/* (283) cmd ::= ATTACH database_kw_opt expr AS expr key_opt *\/\n+   -3,  \/* (284) cmd ::= DETACH database_kw_opt expr *\/\n+    0,  \/* (285) key_opt ::= *\/\n+   -2,  \/* (286) key_opt ::= KEY expr *\/\n+   -1,  \/* (287) cmd ::= REINDEX *\/\n+   -3,  \/* (288) cmd ::= REINDEX nm dbnm *\/\n+   -1,  \/* (289) cmd ::= ANALYZE *\/\n+   -3,  \/* (290) cmd ::= ANALYZE nm dbnm *\/\n+   -6,  \/* (291) cmd ::= ALTER TABLE fullname RENAME TO nm *\/\n+   -7,  \/* (292) cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist *\/\n+   -6,  \/* (293) cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm *\/\n+   -1,  \/* (294) add_column_fullname ::= fullname *\/\n+   -8,  \/* (295) cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm *\/\n+   -1,  \/* (296) cmd ::= create_vtab *\/\n+   -4,  \/* (297) cmd ::= create_vtab LP vtabarglist RP *\/\n+   -8,  \/* (298) create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm *\/\n+    0,  \/* (299) vtabarg ::= *\/\n+   -1,  \/* (300) vtabargtoken ::= ANY *\/\n+   -3,  \/* (301) vtabargtoken ::= lp anylist RP *\/\n+   -1,  \/* (302) lp ::= LP *\/\n+   -2,  \/* (303) with ::= WITH wqlist *\/\n+   -3,  \/* (304) with ::= WITH RECURSIVE wqlist *\/\n+   -1,  \/* (305) wqas ::= AS *\/\n+   -2,  \/* (306) wqas ::= AS MATERIALIZED *\/\n+   -3,  \/* (307) wqas ::= AS NOT MATERIALIZED *\/\n+   -6,  \/* (308) wqitem ::= nm eidlist_opt wqas LP select RP *\/\n+   -1,  \/* (309) wqlist ::= wqitem *\/\n+   -3,  \/* (310) wqlist ::= wqlist COMMA wqitem *\/\n+   -1,  \/* (311) windowdefn_list ::= windowdefn *\/\n+   -3,  \/* (312) windowdefn_list ::= windowdefn_list COMMA windowdefn *\/\n+   -5,  \/* (313) windowdefn ::= nm AS LP window RP *\/\n+   -5,  \/* (314) window ::= PARTITION BY nexprlist orderby_opt frame_opt *\/\n+   -6,  \/* (315) window ::= nm PARTITION BY nexprlist orderby_opt frame_opt *\/\n+   -4,  \/* (316) window ::= ORDER BY sortlist frame_opt *\/\n+   -5,  \/* (317) window ::= nm ORDER BY sortlist frame_opt *\/\n+   -1,  \/* (318) window ::= frame_opt *\/\n+   -2,  \/* (319) window ::= nm frame_opt *\/\n+    0,  \/* (320) frame_opt ::= *\/\n+   -3,  \/* (321) frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt *\/\n+   -6,  \/* (322) frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt *\/\n+   -1,  \/* (323) range_or_rows ::= RANGE|ROWS|GROUPS *\/\n+   -1,  \/* (324) frame_bound_s ::= frame_bound *\/\n+   -2,  \/* (325) frame_bound_s ::= UNBOUNDED PRECEDING *\/\n+   -1,  \/* (326) frame_bound_e ::= frame_bound *\/\n+   -2,  \/* (327) frame_bound_e ::= UNBOUNDED FOLLOWING *\/\n+   -2,  \/* (328) frame_bound ::= expr PRECEDING|FOLLOWING *\/\n+   -2,  \/* (329) frame_bound ::= CURRENT ROW *\/\n+    0,  \/* (330) frame_exclude_opt ::= *\/\n+   -2,  \/* (331) frame_exclude_opt ::= EXCLUDE frame_exclude *\/\n+   -2,  \/* (332) frame_exclude ::= NO OTHERS *\/\n+   -2,  \/* (333) frame_exclude ::= CURRENT ROW *\/\n+   -1,  \/* (334) frame_exclude ::= GROUP|TIES *\/\n+   -2,  \/* (335) window_clause ::= WINDOW windowdefn_list *\/\n+   -2,  \/* (336) filter_over ::= filter_clause over_clause *\/\n+   -1,  \/* (337) filter_over ::= over_clause *\/\n+   -1,  \/* (338) filter_over ::= filter_clause *\/\n+   -4,  \/* (339) over_clause ::= OVER LP window RP *\/\n+   -2,  \/* (340) over_clause ::= OVER nm *\/\n+   -5,  \/* (341) filter_clause ::= FILTER LP WHERE expr RP *\/\n+   -1,  \/* (342) input ::= cmdlist *\/\n+   -2,  \/* (343) cmdlist ::= cmdlist ecmd *\/\n+   -1,  \/* (344) cmdlist ::= ecmd *\/\n+   -1,  \/* (345) ecmd ::= SEMI *\/\n+   -2,  \/* (346) ecmd ::= cmdx SEMI *\/\n+   -3,  \/* (347) ecmd ::= explain cmdx SEMI *\/\n+    0,  \/* (348) trans_opt ::= *\/\n+   -1,  \/* (349) trans_opt ::= TRANSACTION *\/\n+   -2,  \/* (350) trans_opt ::= TRANSACTION nm *\/\n+   -1,  \/* (351) savepoint_opt ::= SAVEPOINT *\/\n+    0,  \/* (352) savepoint_opt ::= *\/\n+   -2,  \/* (353) cmd ::= create_table create_table_args *\/\n+   -1,  \/* (354) table_option_set ::= table_option *\/\n+   -4,  \/* (355) columnlist ::= columnlist COMMA columnname carglist *\/\n+   -2,  \/* (356) columnlist ::= columnname carglist *\/\n+   -1,  \/* (357) nm ::= ID|INDEXED *\/\n+   -1,  \/* (358) nm ::= STRING *\/\n+   -1,  \/* (359) nm ::= JOIN_KW *\/\n+   -1,  \/* (360) typetoken ::= typename *\/\n+   -1,  \/* (361) typename ::= ID|STRING *\/\n+   -1,  \/* (362) signed ::= plus_num *\/\n+   -1,  \/* (363) signed ::= minus_num *\/\n+   -2,  \/* (364) carglist ::= carglist ccons *\/\n+    0,  \/* (365) carglist ::= *\/\n+   -2,  \/* (366) ccons ::= NULL onconf *\/\n+   -4,  \/* (367) ccons ::= GENERATED ALWAYS AS generated *\/\n+   -2,  \/* (368) ccons ::= AS generated *\/\n+   -2,  \/* (369) conslist_opt ::= COMMA conslist *\/\n+   -3,  \/* (370) conslist ::= conslist tconscomma tcons *\/\n+   -1,  \/* (371) conslist ::= tcons *\/\n+    0,  \/* (372) tconscomma ::= *\/\n+   -1,  \/* (373) defer_subclause_opt ::= defer_subclause *\/\n+   -1,  \/* (374) resolvetype ::= raisetype *\/\n+   -1,  \/* (375) selectnowith ::= oneselect *\/\n+   -1,  \/* (376) oneselect ::= values *\/\n+   -2,  \/* (377) sclp ::= selcollist COMMA *\/\n+   -1,  \/* (378) as ::= ID|STRING *\/\n+   -1,  \/* (379) indexed_opt ::= indexed_by *\/\n+    0,  \/* (380) returning ::= *\/\n+   -1,  \/* (381) expr ::= term *\/\n+   -1,  \/* (382) likeop ::= LIKE_KW|MATCH *\/\n+   -1,  \/* (383) exprlist ::= nexprlist *\/\n+   -1,  \/* (384) nmnum ::= plus_num *\/\n+   -1,  \/* (385) nmnum ::= nm *\/\n+   -1,  \/* (386) nmnum ::= ON *\/\n+   -1,  \/* (387) nmnum ::= DELETE *\/\n+   -1,  \/* (388) nmnum ::= DEFAULT *\/\n+   -1,  \/* (389) plus_num ::= INTEGER|FLOAT *\/\n+    0,  \/* (390) foreach_clause ::= *\/\n+   -3,  \/* (391) foreach_clause ::= FOR EACH ROW *\/\n+   -1,  \/* (392) trnm ::= nm *\/\n+    0,  \/* (393) tridxby ::= *\/\n+   -1,  \/* (394) database_kw_opt ::= DATABASE *\/\n+    0,  \/* (395) database_kw_opt ::= *\/\n+    0,  \/* (396) kwcolumn_opt ::= *\/\n+   -1,  \/* (397) kwcolumn_opt ::= COLUMNKW *\/\n+   -1,  \/* (398) vtabarglist ::= vtabarg *\/\n+   -3,  \/* (399) vtabarglist ::= vtabarglist COMMA vtabarg *\/\n+   -2,  \/* (400) vtabarg ::= vtabarg vtabargtoken *\/\n+    0,  \/* (401) anylist ::= *\/\n+   -4,  \/* (402) anylist ::= anylist LP anylist RP *\/\n+   -2,  \/* (403) anylist ::= anylist ANY *\/\n+    0,  \/* (404) with ::= *\/\n@@ -163039,1 +167119,1 @@\n-{sqlite3BeginTransaction(pParse, yymsp[-1].minor.yy64);}\n+{sqlite3BeginTransaction(pParse, yymsp[-1].minor.yy394);}\n@@ -163042,1 +167122,1 @@\n-{yymsp[1].minor.yy64 = TK_DEFERRED;}\n+{yymsp[1].minor.yy394 = TK_DEFERRED;}\n@@ -163047,2 +167127,2 @@\n-      case 320: \/* range_or_rows ::= RANGE|ROWS|GROUPS *\/ yytestcase(yyruleno==320);\n-{yymsp[0].minor.yy64 = yymsp[0].major; \/*A-overwrites-X*\/}\n+      case 323: \/* range_or_rows ::= RANGE|ROWS|GROUPS *\/ yytestcase(yyruleno==323);\n+{yymsp[0].minor.yy394 = yymsp[0].major; \/*A-overwrites-X*\/}\n@@ -163071,1 +167151,1 @@\n-   sqlite3StartTable(pParse,&yymsp[-1].minor.yy0,&yymsp[0].minor.yy0,yymsp[-4].minor.yy64,0,0,yymsp[-2].minor.yy64);\n+   sqlite3StartTable(pParse,&yymsp[-1].minor.yy0,&yymsp[0].minor.yy0,yymsp[-4].minor.yy394,0,0,yymsp[-2].minor.yy394);\n@@ -163084,2 +167164,2 @@\n-      case 241: \/* collate ::= *\/ yytestcase(yyruleno==241);\n-{yymsp[1].minor.yy64 = 0;}\n+      case 244: \/* collate ::= *\/ yytestcase(yyruleno==244);\n+{yymsp[1].minor.yy394 = 0;}\n@@ -163088,1 +167168,1 @@\n-{yymsp[-2].minor.yy64 = 1;}\n+{yymsp[-2].minor.yy394 = 1;}\n@@ -163091,1 +167171,1 @@\n-{yymsp[0].minor.yy64 = pParse->db->init.busy==0;}\n+{yymsp[0].minor.yy394 = pParse->db->init.busy==0;}\n@@ -163095,1 +167175,1 @@\n-  sqlite3EndTable(pParse,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0,yymsp[0].minor.yy51,0);\n+  sqlite3EndTable(pParse,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0,yymsp[0].minor.yy285,0);\n@@ -163100,2 +167180,2 @@\n-  sqlite3EndTable(pParse,0,0,0,yymsp[0].minor.yy303);\n-  sqlite3SelectDelete(pParse->db, yymsp[0].minor.yy303);\n+  sqlite3EndTable(pParse,0,0,0,yymsp[0].minor.yy47);\n+  sqlite3SelectDelete(pParse->db, yymsp[0].minor.yy47);\n@@ -163105,1 +167185,1 @@\n-{yymsp[1].minor.yy51 = 0;}\n+{yymsp[1].minor.yy285 = 0;}\n@@ -163108,2 +167188,2 @@\n-{yylhsminor.yy51 = yymsp[-2].minor.yy51|yymsp[0].minor.yy51;}\n-  yymsp[-2].minor.yy51 = yylhsminor.yy51;\n+{yylhsminor.yy285 = yymsp[-2].minor.yy285|yymsp[0].minor.yy285;}\n+  yymsp[-2].minor.yy285 = yylhsminor.yy285;\n@@ -163114,1 +167194,1 @@\n-    yymsp[-1].minor.yy51 = TF_WithoutRowid | TF_NoVisibleRowid;\n+    yymsp[-1].minor.yy285 = TF_WithoutRowid | TF_NoVisibleRowid;\n@@ -163116,1 +167196,1 @@\n-    yymsp[-1].minor.yy51 = 0;\n+    yymsp[-1].minor.yy285 = 0;\n@@ -163124,1 +167204,1 @@\n-    yylhsminor.yy51 = TF_Strict;\n+    yylhsminor.yy285 = TF_Strict;\n@@ -163126,1 +167206,1 @@\n-    yylhsminor.yy51 = 0;\n+    yylhsminor.yy285 = 0;\n@@ -163130,1 +167210,1 @@\n-  yymsp[0].minor.yy51 = yylhsminor.yy51;\n+  yymsp[0].minor.yy285 = yylhsminor.yy285;\n@@ -163156,1 +167236,1 @@\n-  yymsp[1].minor.yy600 = yyLookaheadToken.z;\n+  yymsp[1].minor.yy522 = yyLookaheadToken.z;\n@@ -163170,1 +167250,1 @@\n-{sqlite3AddDefaultValue(pParse,yymsp[0].minor.yy626,yymsp[-1].minor.yy0.z,&yymsp[-1].minor.yy0.z[yymsp[-1].minor.yy0.n]);}\n+{sqlite3AddDefaultValue(pParse,yymsp[0].minor.yy528,yymsp[-1].minor.yy0.z,&yymsp[-1].minor.yy0.z[yymsp[-1].minor.yy0.n]);}\n@@ -163173,1 +167253,1 @@\n-{sqlite3AddDefaultValue(pParse,yymsp[-1].minor.yy626,yymsp[-2].minor.yy0.z+1,yymsp[0].minor.yy0.z);}\n+{sqlite3AddDefaultValue(pParse,yymsp[-1].minor.yy528,yymsp[-2].minor.yy0.z+1,yymsp[0].minor.yy0.z);}\n@@ -163176,1 +167256,1 @@\n-{sqlite3AddDefaultValue(pParse,yymsp[0].minor.yy626,yymsp[-2].minor.yy0.z,&yymsp[-1].minor.yy0.z[yymsp[-1].minor.yy0.n]);}\n+{sqlite3AddDefaultValue(pParse,yymsp[0].minor.yy528,yymsp[-2].minor.yy0.z,&yymsp[-1].minor.yy0.z[yymsp[-1].minor.yy0.n]);}\n@@ -163180,1 +167260,1 @@\n-  Expr *p = sqlite3PExpr(pParse, TK_UMINUS, yymsp[0].minor.yy626, 0);\n+  Expr *p = sqlite3PExpr(pParse, TK_UMINUS, yymsp[0].minor.yy528, 0);\n@@ -163195,1 +167275,1 @@\n-{sqlite3AddNotNull(pParse, yymsp[0].minor.yy64);}\n+{sqlite3AddNotNull(pParse, yymsp[0].minor.yy394);}\n@@ -163198,1 +167278,1 @@\n-{sqlite3AddPrimaryKey(pParse,0,yymsp[-1].minor.yy64,yymsp[0].minor.yy64,yymsp[-2].minor.yy64);}\n+{sqlite3AddPrimaryKey(pParse,0,yymsp[-1].minor.yy394,yymsp[0].minor.yy394,yymsp[-2].minor.yy394);}\n@@ -163201,1 +167281,1 @@\n-{sqlite3CreateIndex(pParse,0,0,0,0,yymsp[0].minor.yy64,0,0,0,0,\n+{sqlite3CreateIndex(pParse,0,0,0,0,yymsp[0].minor.yy394,0,0,0,0,\n@@ -163205,1 +167285,1 @@\n-{sqlite3AddCheckConstraint(pParse,yymsp[-1].minor.yy626,yymsp[-2].minor.yy0.z,yymsp[0].minor.yy0.z);}\n+{sqlite3AddCheckConstraint(pParse,yymsp[-1].minor.yy528,yymsp[-2].minor.yy0.z,yymsp[0].minor.yy0.z);}\n@@ -163208,1 +167288,1 @@\n-{sqlite3CreateForeignKey(pParse,0,&yymsp[-2].minor.yy0,yymsp[-1].minor.yy562,yymsp[0].minor.yy64);}\n+{sqlite3CreateForeignKey(pParse,0,&yymsp[-2].minor.yy0,yymsp[-1].minor.yy322,yymsp[0].minor.yy394);}\n@@ -163211,1 +167291,1 @@\n-{sqlite3DeferForeignKey(pParse,yymsp[0].minor.yy64);}\n+{sqlite3DeferForeignKey(pParse,yymsp[0].minor.yy394);}\n@@ -163217,1 +167297,1 @@\n-{sqlite3AddGenerated(pParse,yymsp[-1].minor.yy626,0);}\n+{sqlite3AddGenerated(pParse,yymsp[-1].minor.yy528,0);}\n@@ -163220,1 +167300,1 @@\n-{sqlite3AddGenerated(pParse,yymsp[-2].minor.yy626,&yymsp[0].minor.yy0);}\n+{sqlite3AddGenerated(pParse,yymsp[-2].minor.yy528,&yymsp[0].minor.yy0);}\n@@ -163223,1 +167303,1 @@\n-{yymsp[0].minor.yy64 = 1;}\n+{yymsp[0].minor.yy394 = 1;}\n@@ -163226,1 +167306,1 @@\n-{ yymsp[1].minor.yy64 = OE_None*0x0101; \/* EV: R-19803-45884 *\/}\n+{ yymsp[1].minor.yy394 = OE_None*0x0101; \/* EV: R-19803-45884 *\/}\n@@ -163229,1 +167309,1 @@\n-{ yymsp[-1].minor.yy64 = (yymsp[-1].minor.yy64 & ~yymsp[0].minor.yy83.mask) | yymsp[0].minor.yy83.value; }\n+{ yymsp[-1].minor.yy394 = (yymsp[-1].minor.yy394 & ~yymsp[0].minor.yy231.mask) | yymsp[0].minor.yy231.value; }\n@@ -163232,1 +167312,1 @@\n-{ yymsp[-1].minor.yy83.value = 0;     yymsp[-1].minor.yy83.mask = 0x000000; }\n+{ yymsp[-1].minor.yy231.value = 0;     yymsp[-1].minor.yy231.mask = 0x000000; }\n@@ -163235,1 +167315,1 @@\n-{ yymsp[-2].minor.yy83.value = 0;     yymsp[-2].minor.yy83.mask = 0x000000; }\n+{ yymsp[-2].minor.yy231.value = 0;     yymsp[-2].minor.yy231.mask = 0x000000; }\n@@ -163238,1 +167318,1 @@\n-{ yymsp[-2].minor.yy83.value = yymsp[0].minor.yy64;     yymsp[-2].minor.yy83.mask = 0x0000ff; }\n+{ yymsp[-2].minor.yy231.value = yymsp[0].minor.yy394;     yymsp[-2].minor.yy231.mask = 0x0000ff; }\n@@ -163241,1 +167321,1 @@\n-{ yymsp[-2].minor.yy83.value = yymsp[0].minor.yy64<<8;  yymsp[-2].minor.yy83.mask = 0x00ff00; }\n+{ yymsp[-2].minor.yy231.value = yymsp[0].minor.yy394<<8;  yymsp[-2].minor.yy231.mask = 0x00ff00; }\n@@ -163244,1 +167324,1 @@\n-{ yymsp[-1].minor.yy64 = OE_SetNull;  \/* EV: R-33326-45252 *\/}\n+{ yymsp[-1].minor.yy394 = OE_SetNull;  \/* EV: R-33326-45252 *\/}\n@@ -163247,1 +167327,1 @@\n-{ yymsp[-1].minor.yy64 = OE_SetDflt;  \/* EV: R-33326-45252 *\/}\n+{ yymsp[-1].minor.yy394 = OE_SetDflt;  \/* EV: R-33326-45252 *\/}\n@@ -163250,1 +167330,1 @@\n-{ yymsp[0].minor.yy64 = OE_Cascade;  \/* EV: R-33326-45252 *\/}\n+{ yymsp[0].minor.yy394 = OE_Cascade;  \/* EV: R-33326-45252 *\/}\n@@ -163253,1 +167333,1 @@\n-{ yymsp[0].minor.yy64 = OE_Restrict; \/* EV: R-33326-45252 *\/}\n+{ yymsp[0].minor.yy394 = OE_Restrict; \/* EV: R-33326-45252 *\/}\n@@ -163256,1 +167336,1 @@\n-{ yymsp[-1].minor.yy64 = OE_None;     \/* EV: R-33326-45252 *\/}\n+{ yymsp[-1].minor.yy394 = OE_None;     \/* EV: R-33326-45252 *\/}\n@@ -163259,1 +167339,1 @@\n-{yymsp[-2].minor.yy64 = 0;}\n+{yymsp[-2].minor.yy394 = 0;}\n@@ -163264,1 +167344,1 @@\n-{yymsp[-1].minor.yy64 = yymsp[0].minor.yy64;}\n+{yymsp[-1].minor.yy394 = yymsp[0].minor.yy394;}\n@@ -163268,4 +167348,4 @@\n-      case 213: \/* between_op ::= NOT BETWEEN *\/ yytestcase(yyruleno==213);\n-      case 216: \/* in_op ::= NOT IN *\/ yytestcase(yyruleno==216);\n-      case 242: \/* collate ::= COLLATE ID|STRING *\/ yytestcase(yyruleno==242);\n-{yymsp[-1].minor.yy64 = 1;}\n+      case 216: \/* between_op ::= NOT BETWEEN *\/ yytestcase(yyruleno==216);\n+      case 219: \/* in_op ::= NOT IN *\/ yytestcase(yyruleno==219);\n+      case 245: \/* collate ::= COLLATE ID|STRING *\/ yytestcase(yyruleno==245);\n+{yymsp[-1].minor.yy394 = 1;}\n@@ -163274,1 +167354,1 @@\n-{yymsp[-1].minor.yy64 = 0;}\n+{yymsp[-1].minor.yy394 = 0;}\n@@ -163280,1 +167360,1 @@\n-{sqlite3AddPrimaryKey(pParse,yymsp[-3].minor.yy562,yymsp[0].minor.yy64,yymsp[-2].minor.yy64,0);}\n+{sqlite3AddPrimaryKey(pParse,yymsp[-3].minor.yy322,yymsp[0].minor.yy394,yymsp[-2].minor.yy394,0);}\n@@ -163283,1 +167363,1 @@\n-{sqlite3CreateIndex(pParse,0,0,0,yymsp[-2].minor.yy562,yymsp[0].minor.yy64,0,0,0,0,\n+{sqlite3CreateIndex(pParse,0,0,0,yymsp[-2].minor.yy322,yymsp[0].minor.yy394,0,0,0,0,\n@@ -163287,1 +167367,1 @@\n-{sqlite3AddCheckConstraint(pParse,yymsp[-2].minor.yy626,yymsp[-3].minor.yy0.z,yymsp[-1].minor.yy0.z);}\n+{sqlite3AddCheckConstraint(pParse,yymsp[-2].minor.yy528,yymsp[-3].minor.yy0.z,yymsp[-1].minor.yy0.z);}\n@@ -163291,2 +167371,2 @@\n-    sqlite3CreateForeignKey(pParse, yymsp[-6].minor.yy562, &yymsp[-3].minor.yy0, yymsp[-2].minor.yy562, yymsp[-1].minor.yy64);\n-    sqlite3DeferForeignKey(pParse, yymsp[0].minor.yy64);\n+    sqlite3CreateForeignKey(pParse, yymsp[-6].minor.yy322, &yymsp[-3].minor.yy0, yymsp[-2].minor.yy322, yymsp[-1].minor.yy394);\n+    sqlite3DeferForeignKey(pParse, yymsp[0].minor.yy394);\n@@ -163297,1 +167377,1 @@\n-{yymsp[1].minor.yy64 = OE_Default;}\n+{yymsp[1].minor.yy394 = OE_Default;}\n@@ -163300,1 +167380,1 @@\n-{yymsp[-2].minor.yy64 = yymsp[0].minor.yy64;}\n+{yymsp[-2].minor.yy394 = yymsp[0].minor.yy394;}\n@@ -163303,1 +167383,1 @@\n-{yymsp[0].minor.yy64 = OE_Ignore;}\n+{yymsp[0].minor.yy394 = OE_Ignore;}\n@@ -163307,1 +167387,1 @@\n-{yymsp[0].minor.yy64 = OE_Replace;}\n+{yymsp[0].minor.yy394 = OE_Replace;}\n@@ -163311,1 +167391,1 @@\n-  sqlite3DropTable(pParse, yymsp[0].minor.yy607, 0, yymsp[-1].minor.yy64);\n+  sqlite3DropTable(pParse, yymsp[0].minor.yy131, 0, yymsp[-1].minor.yy394);\n@@ -163316,1 +167396,1 @@\n-  sqlite3CreateView(pParse, &yymsp[-8].minor.yy0, &yymsp[-4].minor.yy0, &yymsp[-3].minor.yy0, yymsp[-2].minor.yy562, yymsp[0].minor.yy303, yymsp[-7].minor.yy64, yymsp[-5].minor.yy64);\n+  sqlite3CreateView(pParse, &yymsp[-8].minor.yy0, &yymsp[-4].minor.yy0, &yymsp[-3].minor.yy0, yymsp[-2].minor.yy322, yymsp[0].minor.yy47, yymsp[-7].minor.yy394, yymsp[-5].minor.yy394);\n@@ -163321,1 +167401,1 @@\n-  sqlite3DropTable(pParse, yymsp[0].minor.yy607, 1, yymsp[-1].minor.yy64);\n+  sqlite3DropTable(pParse, yymsp[0].minor.yy131, 1, yymsp[-1].minor.yy394);\n@@ -163327,2 +167407,2 @@\n-  sqlite3Select(pParse, yymsp[0].minor.yy303, &dest);\n-  sqlite3SelectDelete(pParse->db, yymsp[0].minor.yy303);\n+  sqlite3Select(pParse, yymsp[0].minor.yy47, &dest);\n+  sqlite3SelectDelete(pParse->db, yymsp[0].minor.yy47);\n@@ -163332,1 +167412,1 @@\n-{yymsp[-2].minor.yy303 = attachWithToSelect(pParse,yymsp[0].minor.yy303,yymsp[-1].minor.yy43);}\n+{yymsp[-2].minor.yy47 = attachWithToSelect(pParse,yymsp[0].minor.yy47,yymsp[-1].minor.yy521);}\n@@ -163335,1 +167415,1 @@\n-{yymsp[-3].minor.yy303 = attachWithToSelect(pParse,yymsp[0].minor.yy303,yymsp[-1].minor.yy43);}\n+{yymsp[-3].minor.yy47 = attachWithToSelect(pParse,yymsp[0].minor.yy47,yymsp[-1].minor.yy521);}\n@@ -163339,1 +167419,1 @@\n-  Select *p = yymsp[0].minor.yy303;\n+  Select *p = yymsp[0].minor.yy47;\n@@ -163343,1 +167423,1 @@\n-  yymsp[0].minor.yy303 = p; \/*A-overwrites-X*\/\n+  yymsp[0].minor.yy47 = p; \/*A-overwrites-X*\/\n@@ -163348,2 +167428,2 @@\n-  Select *pRhs = yymsp[0].minor.yy303;\n-  Select *pLhs = yymsp[-2].minor.yy303;\n+  Select *pRhs = yymsp[0].minor.yy47;\n+  Select *pLhs = yymsp[-2].minor.yy47;\n@@ -163355,1 +167435,1 @@\n-    pFrom = sqlite3SrcListAppendFromTerm(pParse,0,0,0,&x,pRhs,0,0);\n+    pFrom = sqlite3SrcListAppendFromTerm(pParse,0,0,0,&x,pRhs,0);\n@@ -163359,1 +167439,1 @@\n-    pRhs->op = (u8)yymsp[-1].minor.yy64;\n+    pRhs->op = (u8)yymsp[-1].minor.yy394;\n@@ -163363,1 +167443,1 @@\n-    if( yymsp[-1].minor.yy64!=TK_ALL ) pParse->hasCompound = 1;\n+    if( yymsp[-1].minor.yy394!=TK_ALL ) pParse->hasCompound = 1;\n@@ -163367,1 +167447,1 @@\n-  yymsp[-2].minor.yy303 = pRhs;\n+  yymsp[-2].minor.yy47 = pRhs;\n@@ -163372,1 +167452,1 @@\n-{yymsp[0].minor.yy64 = yymsp[0].major; \/*A-overwrites-OP*\/}\n+{yymsp[0].minor.yy394 = yymsp[0].major; \/*A-overwrites-OP*\/}\n@@ -163375,1 +167455,1 @@\n-{yymsp[-1].minor.yy64 = TK_ALL;}\n+{yymsp[-1].minor.yy394 = TK_ALL;}\n@@ -163379,1 +167459,1 @@\n-  yymsp[-8].minor.yy303 = sqlite3SelectNew(pParse,yymsp[-6].minor.yy562,yymsp[-5].minor.yy607,yymsp[-4].minor.yy626,yymsp[-3].minor.yy562,yymsp[-2].minor.yy626,yymsp[-1].minor.yy562,yymsp[-7].minor.yy64,yymsp[0].minor.yy626);\n+  yymsp[-8].minor.yy47 = sqlite3SelectNew(pParse,yymsp[-6].minor.yy322,yymsp[-5].minor.yy131,yymsp[-4].minor.yy528,yymsp[-3].minor.yy322,yymsp[-2].minor.yy528,yymsp[-1].minor.yy322,yymsp[-7].minor.yy394,yymsp[0].minor.yy528);\n@@ -163384,3 +167464,3 @@\n-  yymsp[-9].minor.yy303 = sqlite3SelectNew(pParse,yymsp[-7].minor.yy562,yymsp[-6].minor.yy607,yymsp[-5].minor.yy626,yymsp[-4].minor.yy562,yymsp[-3].minor.yy626,yymsp[-1].minor.yy562,yymsp[-8].minor.yy64,yymsp[0].minor.yy626);\n-  if( yymsp[-9].minor.yy303 ){\n-    yymsp[-9].minor.yy303->pWinDefn = yymsp[-2].minor.yy375;\n+  yymsp[-9].minor.yy47 = sqlite3SelectNew(pParse,yymsp[-7].minor.yy322,yymsp[-6].minor.yy131,yymsp[-5].minor.yy528,yymsp[-4].minor.yy322,yymsp[-3].minor.yy528,yymsp[-1].minor.yy322,yymsp[-8].minor.yy394,yymsp[0].minor.yy528);\n+  if( yymsp[-9].minor.yy47 ){\n+    yymsp[-9].minor.yy47->pWinDefn = yymsp[-2].minor.yy41;\n@@ -163388,1 +167468,1 @@\n-    sqlite3WindowListDelete(pParse->db, yymsp[-2].minor.yy375);\n+    sqlite3WindowListDelete(pParse->db, yymsp[-2].minor.yy41);\n@@ -163394,1 +167474,1 @@\n-  yymsp[-3].minor.yy303 = sqlite3SelectNew(pParse,yymsp[-1].minor.yy562,0,0,0,0,0,SF_Values,0);\n+  yymsp[-3].minor.yy47 = sqlite3SelectNew(pParse,yymsp[-1].minor.yy322,0,0,0,0,0,SF_Values,0);\n@@ -163399,2 +167479,2 @@\n-  Select *pRight, *pLeft = yymsp[-4].minor.yy303;\n-  pRight = sqlite3SelectNew(pParse,yymsp[-1].minor.yy562,0,0,0,0,0,SF_Values|SF_MultiValue,0);\n+  Select *pRight, *pLeft = yymsp[-4].minor.yy47;\n+  pRight = sqlite3SelectNew(pParse,yymsp[-1].minor.yy322,0,0,0,0,0,SF_Values|SF_MultiValue,0);\n@@ -163405,1 +167485,1 @@\n-    yymsp[-4].minor.yy303 = pRight;\n+    yymsp[-4].minor.yy47 = pRight;\n@@ -163407,1 +167487,1 @@\n-    yymsp[-4].minor.yy303 = pLeft;\n+    yymsp[-4].minor.yy47 = pLeft;\n@@ -163412,1 +167492,1 @@\n-{yymsp[0].minor.yy64 = SF_Distinct;}\n+{yymsp[0].minor.yy394 = SF_Distinct;}\n@@ -163415,1 +167495,1 @@\n-{yymsp[0].minor.yy64 = SF_All;}\n+{yymsp[0].minor.yy394 = SF_All;}\n@@ -163420,4 +167500,4 @@\n-      case 229: \/* exprlist ::= *\/ yytestcase(yyruleno==229);\n-      case 232: \/* paren_exprlist ::= *\/ yytestcase(yyruleno==232);\n-      case 237: \/* eidlist_opt ::= *\/ yytestcase(yyruleno==237);\n-{yymsp[1].minor.yy562 = 0;}\n+      case 232: \/* exprlist ::= *\/ yytestcase(yyruleno==232);\n+      case 235: \/* paren_exprlist ::= *\/ yytestcase(yyruleno==235);\n+      case 240: \/* eidlist_opt ::= *\/ yytestcase(yyruleno==240);\n+{yymsp[1].minor.yy322 = 0;}\n@@ -163427,3 +167507,3 @@\n-   yymsp[-4].minor.yy562 = sqlite3ExprListAppend(pParse, yymsp[-4].minor.yy562, yymsp[-2].minor.yy626);\n-   if( yymsp[0].minor.yy0.n>0 ) sqlite3ExprListSetName(pParse, yymsp[-4].minor.yy562, &yymsp[0].minor.yy0, 1);\n-   sqlite3ExprListSetSpan(pParse,yymsp[-4].minor.yy562,yymsp[-3].minor.yy600,yymsp[-1].minor.yy600);\n+   yymsp[-4].minor.yy322 = sqlite3ExprListAppend(pParse, yymsp[-4].minor.yy322, yymsp[-2].minor.yy528);\n+   if( yymsp[0].minor.yy0.n>0 ) sqlite3ExprListSetName(pParse, yymsp[-4].minor.yy322, &yymsp[0].minor.yy0, 1);\n+   sqlite3ExprListSetSpan(pParse,yymsp[-4].minor.yy322,yymsp[-3].minor.yy522,yymsp[-1].minor.yy522);\n@@ -163435,1 +167515,1 @@\n-  yymsp[-2].minor.yy562 = sqlite3ExprListAppend(pParse, yymsp[-2].minor.yy562, p);\n+  yymsp[-2].minor.yy322 = sqlite3ExprListAppend(pParse, yymsp[-2].minor.yy322, p);\n@@ -163441,1 +167521,1 @@\n-  Expr *pLeft = sqlite3ExprAlloc(pParse->db, TK_ID, &yymsp[-2].minor.yy0, 1);\n+  Expr *pLeft = tokenExpr(pParse, TK_ID, yymsp[-2].minor.yy0);\n@@ -163443,1 +167523,1 @@\n-  yymsp[-4].minor.yy562 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy562, pDot);\n+  yymsp[-4].minor.yy322 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy322, pDot);\n@@ -163447,3 +167527,3 @@\n-      case 114: \/* dbnm ::= DOT nm *\/ yytestcase(yyruleno==114);\n-      case 253: \/* plus_num ::= PLUS INTEGER|FLOAT *\/ yytestcase(yyruleno==253);\n-      case 254: \/* minus_num ::= MINUS INTEGER|FLOAT *\/ yytestcase(yyruleno==254);\n+      case 115: \/* dbnm ::= DOT nm *\/ yytestcase(yyruleno==115);\n+      case 256: \/* plus_num ::= PLUS INTEGER|FLOAT *\/ yytestcase(yyruleno==256);\n+      case 257: \/* minus_num ::= MINUS INTEGER|FLOAT *\/ yytestcase(yyruleno==257);\n@@ -163454,1 +167534,1 @@\n-{yymsp[1].minor.yy607 = 0;}\n+{yymsp[1].minor.yy131 = 0;}\n@@ -163458,2 +167538,2 @@\n-  yymsp[-1].minor.yy607 = yymsp[0].minor.yy607;\n-  sqlite3SrcListShiftJoinType(yymsp[-1].minor.yy607);\n+  yymsp[-1].minor.yy131 = yymsp[0].minor.yy131;\n+  sqlite3SrcListShiftJoinType(pParse,yymsp[-1].minor.yy131);\n@@ -163464,1 +167544,6 @@\n-   if( ALWAYS(yymsp[-1].minor.yy607 && yymsp[-1].minor.yy607->nSrc>0) ) yymsp[-1].minor.yy607->a[yymsp[-1].minor.yy607->nSrc-1].fg.jointype = (u8)yymsp[0].minor.yy64;\n+   if( ALWAYS(yymsp[-1].minor.yy131 && yymsp[-1].minor.yy131->nSrc>0) ) yymsp[-1].minor.yy131->a[yymsp[-1].minor.yy131->nSrc-1].fg.jointype = (u8)yymsp[0].minor.yy394;\n+}\n+        break;\n+      case 109: \/* seltablist ::= stl_prefix nm dbnm as on_using *\/\n+{\n+  yymsp[-4].minor.yy131 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-4].minor.yy131,&yymsp[-3].minor.yy0,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0,0,&yymsp[0].minor.yy561);\n@@ -163467,1 +167552,1 @@\n-      case 109: \/* seltablist ::= stl_prefix nm dbnm as indexed_opt on_opt using_opt *\/\n+      case 110: \/* seltablist ::= stl_prefix nm dbnm as indexed_by on_using *\/\n@@ -163469,2 +167554,2 @@\n-  yymsp[-6].minor.yy607 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-6].minor.yy607,&yymsp[-5].minor.yy0,&yymsp[-4].minor.yy0,&yymsp[-3].minor.yy0,0,yymsp[-1].minor.yy626,yymsp[0].minor.yy240);\n-  sqlite3SrcListIndexedBy(pParse, yymsp[-6].minor.yy607, &yymsp[-2].minor.yy0);\n+  yymsp[-5].minor.yy131 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-5].minor.yy131,&yymsp[-4].minor.yy0,&yymsp[-3].minor.yy0,&yymsp[-2].minor.yy0,0,&yymsp[0].minor.yy561);\n+  sqlite3SrcListIndexedBy(pParse, yymsp[-5].minor.yy131, &yymsp[-1].minor.yy0);\n@@ -163473,1 +167558,1 @@\n-      case 110: \/* seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_opt using_opt *\/\n+      case 111: \/* seltablist ::= stl_prefix nm dbnm LP exprlist RP as on_using *\/\n@@ -163475,2 +167560,2 @@\n-  yymsp[-8].minor.yy607 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-8].minor.yy607,&yymsp[-7].minor.yy0,&yymsp[-6].minor.yy0,&yymsp[-2].minor.yy0,0,yymsp[-1].minor.yy626,yymsp[0].minor.yy240);\n-  sqlite3SrcListFuncArgs(pParse, yymsp[-8].minor.yy607, yymsp[-4].minor.yy562);\n+  yymsp[-7].minor.yy131 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-7].minor.yy131,&yymsp[-6].minor.yy0,&yymsp[-5].minor.yy0,&yymsp[-1].minor.yy0,0,&yymsp[0].minor.yy561);\n+  sqlite3SrcListFuncArgs(pParse, yymsp[-7].minor.yy131, yymsp[-3].minor.yy322);\n@@ -163479,1 +167564,1 @@\n-      case 111: \/* seltablist ::= stl_prefix LP select RP as on_opt using_opt *\/\n+      case 112: \/* seltablist ::= stl_prefix LP select RP as on_using *\/\n@@ -163481,1 +167566,1 @@\n-    yymsp[-6].minor.yy607 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-6].minor.yy607,0,0,&yymsp[-2].minor.yy0,yymsp[-4].minor.yy303,yymsp[-1].minor.yy626,yymsp[0].minor.yy240);\n+    yymsp[-5].minor.yy131 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-5].minor.yy131,0,0,&yymsp[-1].minor.yy0,yymsp[-3].minor.yy47,&yymsp[0].minor.yy561);\n@@ -163484,1 +167569,1 @@\n-      case 112: \/* seltablist ::= stl_prefix LP seltablist RP as on_opt using_opt *\/\n+      case 113: \/* seltablist ::= stl_prefix LP seltablist RP as on_using *\/\n@@ -163486,7 +167571,7 @@\n-    if( yymsp[-6].minor.yy607==0 && yymsp[-2].minor.yy0.n==0 && yymsp[-1].minor.yy626==0 && yymsp[0].minor.yy240==0 ){\n-      yymsp[-6].minor.yy607 = yymsp[-4].minor.yy607;\n-    }else if( yymsp[-4].minor.yy607->nSrc==1 ){\n-      yymsp[-6].minor.yy607 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-6].minor.yy607,0,0,&yymsp[-2].minor.yy0,0,yymsp[-1].minor.yy626,yymsp[0].minor.yy240);\n-      if( yymsp[-6].minor.yy607 ){\n-        SrcItem *pNew = &yymsp[-6].minor.yy607->a[yymsp[-6].minor.yy607->nSrc-1];\n-        SrcItem *pOld = yymsp[-4].minor.yy607->a;\n+    if( yymsp[-5].minor.yy131==0 && yymsp[-1].minor.yy0.n==0 && yymsp[0].minor.yy561.pOn==0 && yymsp[0].minor.yy561.pUsing==0 ){\n+      yymsp[-5].minor.yy131 = yymsp[-3].minor.yy131;\n+    }else if( yymsp[-3].minor.yy131->nSrc==1 ){\n+      yymsp[-5].minor.yy131 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-5].minor.yy131,0,0,&yymsp[-1].minor.yy0,0,&yymsp[0].minor.yy561);\n+      if( yymsp[-5].minor.yy131 ){\n+        SrcItem *pNew = &yymsp[-5].minor.yy131->a[yymsp[-5].minor.yy131->nSrc-1];\n+        SrcItem *pOld = yymsp[-3].minor.yy131->a;\n@@ -163496,0 +167581,3 @@\n+        if( pNew->pSelect && (pNew->pSelect->selFlags & SF_NestedFrom)!=0 ){\n+          pNew->fg.isNestedFrom = 1;\n+        }\n@@ -163505,1 +167593,1 @@\n-      sqlite3SrcListDelete(pParse->db, yymsp[-4].minor.yy607);\n+      sqlite3SrcListDelete(pParse->db, yymsp[-3].minor.yy131);\n@@ -163508,3 +167596,3 @@\n-      sqlite3SrcListShiftJoinType(yymsp[-4].minor.yy607);\n-      pSubquery = sqlite3SelectNew(pParse,0,yymsp[-4].minor.yy607,0,0,0,0,SF_NestedFrom,0);\n-      yymsp[-6].minor.yy607 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-6].minor.yy607,0,0,&yymsp[-2].minor.yy0,pSubquery,yymsp[-1].minor.yy626,yymsp[0].minor.yy240);\n+      sqlite3SrcListShiftJoinType(pParse,yymsp[-3].minor.yy131);\n+      pSubquery = sqlite3SelectNew(pParse,0,yymsp[-3].minor.yy131,0,0,0,0,SF_NestedFrom,0);\n+      yymsp[-5].minor.yy131 = sqlite3SrcListAppendFromTerm(pParse,yymsp[-5].minor.yy131,0,0,&yymsp[-1].minor.yy0,pSubquery,&yymsp[0].minor.yy561);\n@@ -163514,2 +167602,2 @@\n-      case 113: \/* dbnm ::= *\/\n-      case 127: \/* indexed_opt ::= *\/ yytestcase(yyruleno==127);\n+      case 114: \/* dbnm ::= *\/\n+      case 129: \/* indexed_opt ::= *\/ yytestcase(yyruleno==129);\n@@ -163518,1 +167606,1 @@\n-      case 115: \/* fullname ::= nm *\/\n+      case 116: \/* fullname ::= nm *\/\n@@ -163520,2 +167608,2 @@\n-  yylhsminor.yy607 = sqlite3SrcListAppend(pParse,0,&yymsp[0].minor.yy0,0);\n-  if( IN_RENAME_OBJECT && yylhsminor.yy607 ) sqlite3RenameTokenMap(pParse, yylhsminor.yy607->a[0].zName, &yymsp[0].minor.yy0);\n+  yylhsminor.yy131 = sqlite3SrcListAppend(pParse,0,&yymsp[0].minor.yy0,0);\n+  if( IN_RENAME_OBJECT && yylhsminor.yy131 ) sqlite3RenameTokenMap(pParse, yylhsminor.yy131->a[0].zName, &yymsp[0].minor.yy0);\n@@ -163523,1 +167611,1 @@\n-  yymsp[0].minor.yy607 = yylhsminor.yy607;\n+  yymsp[0].minor.yy131 = yylhsminor.yy131;\n@@ -163525,1 +167613,1 @@\n-      case 116: \/* fullname ::= nm DOT nm *\/\n+      case 117: \/* fullname ::= nm DOT nm *\/\n@@ -163527,2 +167615,2 @@\n-  yylhsminor.yy607 = sqlite3SrcListAppend(pParse,0,&yymsp[-2].minor.yy0,&yymsp[0].minor.yy0);\n-  if( IN_RENAME_OBJECT && yylhsminor.yy607 ) sqlite3RenameTokenMap(pParse, yylhsminor.yy607->a[0].zName, &yymsp[0].minor.yy0);\n+  yylhsminor.yy131 = sqlite3SrcListAppend(pParse,0,&yymsp[-2].minor.yy0,&yymsp[0].minor.yy0);\n+  if( IN_RENAME_OBJECT && yylhsminor.yy131 ) sqlite3RenameTokenMap(pParse, yylhsminor.yy131->a[0].zName, &yymsp[0].minor.yy0);\n@@ -163530,1 +167618,1 @@\n-  yymsp[-2].minor.yy607 = yylhsminor.yy607;\n+  yymsp[-2].minor.yy131 = yylhsminor.yy131;\n@@ -163532,2 +167620,2 @@\n-      case 117: \/* xfullname ::= nm *\/\n-{yymsp[0].minor.yy607 = sqlite3SrcListAppend(pParse,0,&yymsp[0].minor.yy0,0); \/*A-overwrites-X*\/}\n+      case 118: \/* xfullname ::= nm *\/\n+{yymsp[0].minor.yy131 = sqlite3SrcListAppend(pParse,0,&yymsp[0].minor.yy0,0); \/*A-overwrites-X*\/}\n@@ -163535,2 +167623,2 @@\n-      case 118: \/* xfullname ::= nm DOT nm *\/\n-{yymsp[-2].minor.yy607 = sqlite3SrcListAppend(pParse,0,&yymsp[-2].minor.yy0,&yymsp[0].minor.yy0); \/*A-overwrites-X*\/}\n+      case 119: \/* xfullname ::= nm DOT nm *\/\n+{yymsp[-2].minor.yy131 = sqlite3SrcListAppend(pParse,0,&yymsp[-2].minor.yy0,&yymsp[0].minor.yy0); \/*A-overwrites-X*\/}\n@@ -163538,1 +167626,1 @@\n-      case 119: \/* xfullname ::= nm DOT nm AS nm *\/\n+      case 120: \/* xfullname ::= nm DOT nm AS nm *\/\n@@ -163540,2 +167628,2 @@\n-   yymsp[-4].minor.yy607 = sqlite3SrcListAppend(pParse,0,&yymsp[-4].minor.yy0,&yymsp[-2].minor.yy0); \/*A-overwrites-X*\/\n-   if( yymsp[-4].minor.yy607 ) yymsp[-4].minor.yy607->a[0].zAlias = sqlite3NameFromToken(pParse->db, &yymsp[0].minor.yy0);\n+   yymsp[-4].minor.yy131 = sqlite3SrcListAppend(pParse,0,&yymsp[-4].minor.yy0,&yymsp[-2].minor.yy0); \/*A-overwrites-X*\/\n+   if( yymsp[-4].minor.yy131 ) yymsp[-4].minor.yy131->a[0].zAlias = sqlite3NameFromToken(pParse->db, &yymsp[0].minor.yy0);\n@@ -163544,1 +167632,1 @@\n-      case 120: \/* xfullname ::= nm AS nm *\/\n+      case 121: \/* xfullname ::= nm AS nm *\/\n@@ -163546,2 +167634,2 @@\n-   yymsp[-2].minor.yy607 = sqlite3SrcListAppend(pParse,0,&yymsp[-2].minor.yy0,0); \/*A-overwrites-X*\/\n-   if( yymsp[-2].minor.yy607 ) yymsp[-2].minor.yy607->a[0].zAlias = sqlite3NameFromToken(pParse->db, &yymsp[0].minor.yy0);\n+   yymsp[-2].minor.yy131 = sqlite3SrcListAppend(pParse,0,&yymsp[-2].minor.yy0,0); \/*A-overwrites-X*\/\n+   if( yymsp[-2].minor.yy131 ) yymsp[-2].minor.yy131->a[0].zAlias = sqlite3NameFromToken(pParse->db, &yymsp[0].minor.yy0);\n@@ -163550,2 +167638,2 @@\n-      case 121: \/* joinop ::= COMMA|JOIN *\/\n-{ yymsp[0].minor.yy64 = JT_INNER; }\n+      case 122: \/* joinop ::= COMMA|JOIN *\/\n+{ yymsp[0].minor.yy394 = JT_INNER; }\n@@ -163553,2 +167641,2 @@\n-      case 122: \/* joinop ::= JOIN_KW JOIN *\/\n-{yymsp[-1].minor.yy64 = sqlite3JoinType(pParse,&yymsp[-1].minor.yy0,0,0);  \/*X-overwrites-A*\/}\n+      case 123: \/* joinop ::= JOIN_KW JOIN *\/\n+{yymsp[-1].minor.yy394 = sqlite3JoinType(pParse,&yymsp[-1].minor.yy0,0,0);  \/*X-overwrites-A*\/}\n@@ -163556,2 +167644,2 @@\n-      case 123: \/* joinop ::= JOIN_KW nm JOIN *\/\n-{yymsp[-2].minor.yy64 = sqlite3JoinType(pParse,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0,0); \/*X-overwrites-A*\/}\n+      case 124: \/* joinop ::= JOIN_KW nm JOIN *\/\n+{yymsp[-2].minor.yy394 = sqlite3JoinType(pParse,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0,0); \/*X-overwrites-A*\/}\n@@ -163559,2 +167647,2 @@\n-      case 124: \/* joinop ::= JOIN_KW nm nm JOIN *\/\n-{yymsp[-3].minor.yy64 = sqlite3JoinType(pParse,&yymsp[-3].minor.yy0,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0);\/*X-overwrites-A*\/}\n+      case 125: \/* joinop ::= JOIN_KW nm nm JOIN *\/\n+{yymsp[-3].minor.yy394 = sqlite3JoinType(pParse,&yymsp[-3].minor.yy0,&yymsp[-2].minor.yy0,&yymsp[-1].minor.yy0);\/*X-overwrites-A*\/}\n@@ -163562,7 +167650,2 @@\n-      case 125: \/* on_opt ::= ON expr *\/\n-      case 145: \/* having_opt ::= HAVING expr *\/ yytestcase(yyruleno==145);\n-      case 152: \/* where_opt ::= WHERE expr *\/ yytestcase(yyruleno==152);\n-      case 154: \/* where_opt_ret ::= WHERE expr *\/ yytestcase(yyruleno==154);\n-      case 225: \/* case_else ::= ELSE expr *\/ yytestcase(yyruleno==225);\n-      case 246: \/* vinto ::= INTO expr *\/ yytestcase(yyruleno==246);\n-{yymsp[-1].minor.yy626 = yymsp[0].minor.yy626;}\n+      case 126: \/* on_using ::= ON expr *\/\n+{yymsp[-1].minor.yy561.pOn = yymsp[0].minor.yy528; yymsp[-1].minor.yy561.pUsing = 0;}\n@@ -163570,9 +167653,2 @@\n-      case 126: \/* on_opt ::= *\/\n-      case 144: \/* having_opt ::= *\/ yytestcase(yyruleno==144);\n-      case 146: \/* limit_opt ::= *\/ yytestcase(yyruleno==146);\n-      case 151: \/* where_opt ::= *\/ yytestcase(yyruleno==151);\n-      case 153: \/* where_opt_ret ::= *\/ yytestcase(yyruleno==153);\n-      case 226: \/* case_else ::= *\/ yytestcase(yyruleno==226);\n-      case 228: \/* case_operand ::= *\/ yytestcase(yyruleno==228);\n-      case 247: \/* vinto ::= *\/ yytestcase(yyruleno==247);\n-{yymsp[1].minor.yy626 = 0;}\n+      case 127: \/* on_using ::= USING LP idlist RP *\/\n+{yymsp[-3].minor.yy561.pOn = 0; yymsp[-3].minor.yy561.pUsing = yymsp[-1].minor.yy254;}\n@@ -163580,1 +167656,4 @@\n-      case 128: \/* indexed_opt ::= INDEXED BY nm *\/\n+      case 128: \/* on_using ::= *\/\n+{yymsp[1].minor.yy561.pOn = 0; yymsp[1].minor.yy561.pUsing = 0;}\n+        break;\n+      case 130: \/* indexed_by ::= INDEXED BY nm *\/\n@@ -163583,1 +167662,1 @@\n-      case 129: \/* indexed_opt ::= NOT INDEXED *\/\n+      case 131: \/* indexed_by ::= NOT INDEXED *\/\n@@ -163586,7 +167665,0 @@\n-      case 130: \/* using_opt ::= USING LP idlist RP *\/\n-{yymsp[-3].minor.yy240 = yymsp[-1].minor.yy240;}\n-        break;\n-      case 131: \/* using_opt ::= *\/\n-      case 173: \/* idlist_opt ::= *\/ yytestcase(yyruleno==173);\n-{yymsp[1].minor.yy240 = 0;}\n-        break;\n@@ -163595,1 +167667,1 @@\n-{yymsp[-2].minor.yy562 = yymsp[0].minor.yy562;}\n+{yymsp[-2].minor.yy322 = yymsp[0].minor.yy322;}\n@@ -163599,2 +167671,2 @@\n-  yymsp[-4].minor.yy562 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy562,yymsp[-2].minor.yy626);\n-  sqlite3ExprListSetSortOrder(yymsp[-4].minor.yy562,yymsp[-1].minor.yy64,yymsp[0].minor.yy64);\n+  yymsp[-4].minor.yy322 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy322,yymsp[-2].minor.yy528);\n+  sqlite3ExprListSetSortOrder(yymsp[-4].minor.yy322,yymsp[-1].minor.yy394,yymsp[0].minor.yy394);\n@@ -163605,2 +167677,2 @@\n-  yymsp[-2].minor.yy562 = sqlite3ExprListAppend(pParse,0,yymsp[-2].minor.yy626); \/*A-overwrites-Y*\/\n-  sqlite3ExprListSetSortOrder(yymsp[-2].minor.yy562,yymsp[-1].minor.yy64,yymsp[0].minor.yy64);\n+  yymsp[-2].minor.yy322 = sqlite3ExprListAppend(pParse,0,yymsp[-2].minor.yy528); \/*A-overwrites-Y*\/\n+  sqlite3ExprListSetSortOrder(yymsp[-2].minor.yy322,yymsp[-1].minor.yy394,yymsp[0].minor.yy394);\n@@ -163610,1 +167682,1 @@\n-{yymsp[0].minor.yy64 = SQLITE_SO_ASC;}\n+{yymsp[0].minor.yy394 = SQLITE_SO_ASC;}\n@@ -163613,1 +167685,1 @@\n-{yymsp[0].minor.yy64 = SQLITE_SO_DESC;}\n+{yymsp[0].minor.yy394 = SQLITE_SO_DESC;}\n@@ -163617,1 +167689,1 @@\n-{yymsp[1].minor.yy64 = SQLITE_SO_UNDEFINED;}\n+{yymsp[1].minor.yy394 = SQLITE_SO_UNDEFINED;}\n@@ -163620,1 +167692,1 @@\n-{yymsp[-1].minor.yy64 = SQLITE_SO_ASC;}\n+{yymsp[-1].minor.yy394 = SQLITE_SO_ASC;}\n@@ -163623,1 +167695,17 @@\n-{yymsp[-1].minor.yy64 = SQLITE_SO_DESC;}\n+{yymsp[-1].minor.yy394 = SQLITE_SO_DESC;}\n+        break;\n+      case 144: \/* having_opt ::= *\/\n+      case 146: \/* limit_opt ::= *\/ yytestcase(yyruleno==146);\n+      case 151: \/* where_opt ::= *\/ yytestcase(yyruleno==151);\n+      case 153: \/* where_opt_ret ::= *\/ yytestcase(yyruleno==153);\n+      case 229: \/* case_else ::= *\/ yytestcase(yyruleno==229);\n+      case 231: \/* case_operand ::= *\/ yytestcase(yyruleno==231);\n+      case 250: \/* vinto ::= *\/ yytestcase(yyruleno==250);\n+{yymsp[1].minor.yy528 = 0;}\n+        break;\n+      case 145: \/* having_opt ::= HAVING expr *\/\n+      case 152: \/* where_opt ::= WHERE expr *\/ yytestcase(yyruleno==152);\n+      case 154: \/* where_opt_ret ::= WHERE expr *\/ yytestcase(yyruleno==154);\n+      case 228: \/* case_else ::= ELSE expr *\/ yytestcase(yyruleno==228);\n+      case 249: \/* vinto ::= INTO expr *\/ yytestcase(yyruleno==249);\n+{yymsp[-1].minor.yy528 = yymsp[0].minor.yy528;}\n@@ -163626,1 +167714,1 @@\n-{yymsp[-1].minor.yy626 = sqlite3PExpr(pParse,TK_LIMIT,yymsp[0].minor.yy626,0);}\n+{yymsp[-1].minor.yy528 = sqlite3PExpr(pParse,TK_LIMIT,yymsp[0].minor.yy528,0);}\n@@ -163629,1 +167717,1 @@\n-{yymsp[-3].minor.yy626 = sqlite3PExpr(pParse,TK_LIMIT,yymsp[-2].minor.yy626,yymsp[0].minor.yy626);}\n+{yymsp[-3].minor.yy528 = sqlite3PExpr(pParse,TK_LIMIT,yymsp[-2].minor.yy528,yymsp[0].minor.yy528);}\n@@ -163632,1 +167720,1 @@\n-{yymsp[-3].minor.yy626 = sqlite3PExpr(pParse,TK_LIMIT,yymsp[0].minor.yy626,yymsp[-2].minor.yy626);}\n+{yymsp[-3].minor.yy528 = sqlite3PExpr(pParse,TK_LIMIT,yymsp[0].minor.yy528,yymsp[-2].minor.yy528);}\n@@ -163636,2 +167724,2 @@\n-  sqlite3SrcListIndexedBy(pParse, yymsp[-2].minor.yy607, &yymsp[-1].minor.yy0);\n-  sqlite3DeleteFrom(pParse,yymsp[-2].minor.yy607,yymsp[0].minor.yy626,0,0);\n+  sqlite3SrcListIndexedBy(pParse, yymsp[-2].minor.yy131, &yymsp[-1].minor.yy0);\n+  sqlite3DeleteFrom(pParse,yymsp[-2].minor.yy131,yymsp[0].minor.yy528,0,0);\n@@ -163641,1 +167729,1 @@\n-{sqlite3AddReturning(pParse,yymsp[0].minor.yy562); yymsp[-1].minor.yy626 = 0;}\n+{sqlite3AddReturning(pParse,yymsp[0].minor.yy322); yymsp[-1].minor.yy528 = 0;}\n@@ -163644,1 +167732,1 @@\n-{sqlite3AddReturning(pParse,yymsp[0].minor.yy562); yymsp[-3].minor.yy626 = yymsp[-2].minor.yy626;}\n+{sqlite3AddReturning(pParse,yymsp[0].minor.yy322); yymsp[-3].minor.yy528 = yymsp[-2].minor.yy528;}\n@@ -163648,4 +167736,15 @@\n-  sqlite3SrcListIndexedBy(pParse, yymsp[-5].minor.yy607, &yymsp[-4].minor.yy0);\n-  sqlite3ExprListCheckLength(pParse,yymsp[-2].minor.yy562,\"set list\");\n-  yymsp[-5].minor.yy607 = sqlite3SrcListAppendList(pParse, yymsp[-5].minor.yy607, yymsp[-1].minor.yy607);\n-  sqlite3Update(pParse,yymsp[-5].minor.yy607,yymsp[-2].minor.yy562,yymsp[0].minor.yy626,yymsp[-6].minor.yy64,0,0,0);\n+  sqlite3SrcListIndexedBy(pParse, yymsp[-5].minor.yy131, &yymsp[-4].minor.yy0);\n+  sqlite3ExprListCheckLength(pParse,yymsp[-2].minor.yy322,\"set list\");\n+  if( yymsp[-1].minor.yy131 ){\n+    SrcList *pFromClause = yymsp[-1].minor.yy131;\n+    if( pFromClause->nSrc>1 ){\n+      Select *pSubquery;\n+      Token as;\n+      pSubquery = sqlite3SelectNew(pParse,0,pFromClause,0,0,0,0,SF_NestedFrom,0);\n+      as.n = 0;\n+      as.z = 0;\n+      pFromClause = sqlite3SrcListAppendFromTerm(pParse,0,0,0,&as,pSubquery,0);\n+    }\n+    yymsp[-5].minor.yy131 = sqlite3SrcListAppendList(pParse, yymsp[-5].minor.yy131, pFromClause);\n+  }\n+  sqlite3Update(pParse,yymsp[-5].minor.yy131,yymsp[-2].minor.yy322,yymsp[0].minor.yy528,yymsp[-6].minor.yy394,0,0,0);\n@@ -163656,2 +167755,2 @@\n-  yymsp[-4].minor.yy562 = sqlite3ExprListAppend(pParse, yymsp[-4].minor.yy562, yymsp[0].minor.yy626);\n-  sqlite3ExprListSetName(pParse, yymsp[-4].minor.yy562, &yymsp[-2].minor.yy0, 1);\n+  yymsp[-4].minor.yy322 = sqlite3ExprListAppend(pParse, yymsp[-4].minor.yy322, yymsp[0].minor.yy528);\n+  sqlite3ExprListSetName(pParse, yymsp[-4].minor.yy322, &yymsp[-2].minor.yy0, 1);\n@@ -163662,1 +167761,1 @@\n-  yymsp[-6].minor.yy562 = sqlite3ExprListAppendVector(pParse, yymsp[-6].minor.yy562, yymsp[-3].minor.yy240, yymsp[0].minor.yy626);\n+  yymsp[-6].minor.yy322 = sqlite3ExprListAppendVector(pParse, yymsp[-6].minor.yy322, yymsp[-3].minor.yy254, yymsp[0].minor.yy528);\n@@ -163667,2 +167766,2 @@\n-  yylhsminor.yy562 = sqlite3ExprListAppend(pParse, 0, yymsp[0].minor.yy626);\n-  sqlite3ExprListSetName(pParse, yylhsminor.yy562, &yymsp[-2].minor.yy0, 1);\n+  yylhsminor.yy322 = sqlite3ExprListAppend(pParse, 0, yymsp[0].minor.yy528);\n+  sqlite3ExprListSetName(pParse, yylhsminor.yy322, &yymsp[-2].minor.yy0, 1);\n@@ -163670,1 +167769,1 @@\n-  yymsp[-2].minor.yy562 = yylhsminor.yy562;\n+  yymsp[-2].minor.yy322 = yylhsminor.yy322;\n@@ -163674,1 +167773,1 @@\n-  yymsp[-4].minor.yy562 = sqlite3ExprListAppendVector(pParse, 0, yymsp[-3].minor.yy240, yymsp[0].minor.yy626);\n+  yymsp[-4].minor.yy322 = sqlite3ExprListAppendVector(pParse, 0, yymsp[-3].minor.yy254, yymsp[0].minor.yy528);\n@@ -163679,1 +167778,1 @@\n-  sqlite3Insert(pParse, yymsp[-3].minor.yy607, yymsp[-1].minor.yy303, yymsp[-2].minor.yy240, yymsp[-5].minor.yy64, yymsp[0].minor.yy138);\n+  sqlite3Insert(pParse, yymsp[-3].minor.yy131, yymsp[-1].minor.yy47, yymsp[-2].minor.yy254, yymsp[-5].minor.yy394, yymsp[0].minor.yy444);\n@@ -163684,1 +167783,1 @@\n-  sqlite3Insert(pParse, yymsp[-4].minor.yy607, 0, yymsp[-3].minor.yy240, yymsp[-6].minor.yy64, 0);\n+  sqlite3Insert(pParse, yymsp[-4].minor.yy131, 0, yymsp[-3].minor.yy254, yymsp[-6].minor.yy394, 0);\n@@ -163688,1 +167787,1 @@\n-{ yymsp[1].minor.yy138 = 0; }\n+{ yymsp[1].minor.yy444 = 0; }\n@@ -163691,1 +167790,1 @@\n-{ yymsp[-1].minor.yy138 = 0; sqlite3AddReturning(pParse,yymsp[0].minor.yy562); }\n+{ yymsp[-1].minor.yy444 = 0; sqlite3AddReturning(pParse,yymsp[0].minor.yy322); }\n@@ -163694,1 +167793,1 @@\n-{ yymsp[-11].minor.yy138 = sqlite3UpsertNew(pParse->db,yymsp[-8].minor.yy562,yymsp[-6].minor.yy626,yymsp[-2].minor.yy562,yymsp[-1].minor.yy626,yymsp[0].minor.yy138);}\n+{ yymsp[-11].minor.yy444 = sqlite3UpsertNew(pParse->db,yymsp[-8].minor.yy322,yymsp[-6].minor.yy528,yymsp[-2].minor.yy322,yymsp[-1].minor.yy528,yymsp[0].minor.yy444);}\n@@ -163697,1 +167796,1 @@\n-{ yymsp[-8].minor.yy138 = sqlite3UpsertNew(pParse->db,yymsp[-5].minor.yy562,yymsp[-3].minor.yy626,0,0,yymsp[0].minor.yy138); }\n+{ yymsp[-8].minor.yy444 = sqlite3UpsertNew(pParse->db,yymsp[-5].minor.yy322,yymsp[-3].minor.yy528,0,0,yymsp[0].minor.yy444); }\n@@ -163700,1 +167799,1 @@\n-{ yymsp[-4].minor.yy138 = sqlite3UpsertNew(pParse->db,0,0,0,0,0); }\n+{ yymsp[-4].minor.yy444 = sqlite3UpsertNew(pParse->db,0,0,0,0,0); }\n@@ -163703,1 +167802,1 @@\n-{ yymsp[-7].minor.yy138 = sqlite3UpsertNew(pParse->db,0,0,yymsp[-2].minor.yy562,yymsp[-1].minor.yy626,0);}\n+{ yymsp[-7].minor.yy444 = sqlite3UpsertNew(pParse->db,0,0,yymsp[-2].minor.yy322,yymsp[-1].minor.yy528,0);}\n@@ -163706,1 +167805,4 @@\n-{sqlite3AddReturning(pParse,yymsp[0].minor.yy562);}\n+{sqlite3AddReturning(pParse,yymsp[0].minor.yy322);}\n+        break;\n+      case 173: \/* idlist_opt ::= *\/\n+{yymsp[1].minor.yy254 = 0;}\n@@ -163709,1 +167811,1 @@\n-{yymsp[-2].minor.yy240 = yymsp[-1].minor.yy240;}\n+{yymsp[-2].minor.yy254 = yymsp[-1].minor.yy254;}\n@@ -163712,1 +167814,1 @@\n-{yymsp[-2].minor.yy240 = sqlite3IdListAppend(pParse,yymsp[-2].minor.yy240,&yymsp[0].minor.yy0);}\n+{yymsp[-2].minor.yy254 = sqlite3IdListAppend(pParse,yymsp[-2].minor.yy254,&yymsp[0].minor.yy0);}\n@@ -163715,1 +167817,1 @@\n-{yymsp[0].minor.yy240 = sqlite3IdListAppend(pParse,0,&yymsp[0].minor.yy0); \/*A-overwrites-Y*\/}\n+{yymsp[0].minor.yy254 = sqlite3IdListAppend(pParse,0,&yymsp[0].minor.yy0); \/*A-overwrites-Y*\/}\n@@ -163718,1 +167820,1 @@\n-{yymsp[-2].minor.yy626 = yymsp[-1].minor.yy626;}\n+{yymsp[-2].minor.yy528 = yymsp[-1].minor.yy528;}\n@@ -163722,1 +167824,1 @@\n-{yymsp[0].minor.yy626=tokenExpr(pParse,TK_ID,yymsp[0].minor.yy0); \/*A-overwrites-X*\/}\n+{yymsp[0].minor.yy528=tokenExpr(pParse,TK_ID,yymsp[0].minor.yy0); \/*A-overwrites-X*\/}\n@@ -163726,7 +167828,3 @@\n-  Expr *temp1 = sqlite3ExprAlloc(pParse->db, TK_ID, &yymsp[-2].minor.yy0, 1);\n-  Expr *temp2 = sqlite3ExprAlloc(pParse->db, TK_ID, &yymsp[0].minor.yy0, 1);\n-  if( IN_RENAME_OBJECT ){\n-    sqlite3RenameTokenMap(pParse, (void*)temp2, &yymsp[0].minor.yy0);\n-    sqlite3RenameTokenMap(pParse, (void*)temp1, &yymsp[-2].minor.yy0);\n-  }\n-  yylhsminor.yy626 = sqlite3PExpr(pParse, TK_DOT, temp1, temp2);\n+  Expr *temp1 = tokenExpr(pParse,TK_ID,yymsp[-2].minor.yy0);\n+  Expr *temp2 = tokenExpr(pParse,TK_ID,yymsp[0].minor.yy0);\n+  yylhsminor.yy528 = sqlite3PExpr(pParse, TK_DOT, temp1, temp2);\n@@ -163734,1 +167832,1 @@\n-  yymsp[-2].minor.yy626 = yylhsminor.yy626;\n+  yymsp[-2].minor.yy528 = yylhsminor.yy528;\n@@ -163738,3 +167836,3 @@\n-  Expr *temp1 = sqlite3ExprAlloc(pParse->db, TK_ID, &yymsp[-4].minor.yy0, 1);\n-  Expr *temp2 = sqlite3ExprAlloc(pParse->db, TK_ID, &yymsp[-2].minor.yy0, 1);\n-  Expr *temp3 = sqlite3ExprAlloc(pParse->db, TK_ID, &yymsp[0].minor.yy0, 1);\n+  Expr *temp1 = tokenExpr(pParse,TK_ID,yymsp[-4].minor.yy0);\n+  Expr *temp2 = tokenExpr(pParse,TK_ID,yymsp[-2].minor.yy0);\n+  Expr *temp3 = tokenExpr(pParse,TK_ID,yymsp[0].minor.yy0);\n@@ -163743,2 +167841,1 @@\n-    sqlite3RenameTokenMap(pParse, (void*)temp3, &yymsp[0].minor.yy0);\n-    sqlite3RenameTokenMap(pParse, (void*)temp2, &yymsp[-2].minor.yy0);\n+    sqlite3RenameTokenRemap(pParse, 0, temp1);\n@@ -163746,1 +167843,1 @@\n-  yylhsminor.yy626 = sqlite3PExpr(pParse, TK_DOT, temp1, temp4);\n+  yylhsminor.yy528 = sqlite3PExpr(pParse, TK_DOT, temp1, temp4);\n@@ -163748,1 +167845,1 @@\n-  yymsp[-4].minor.yy626 = yylhsminor.yy626;\n+  yymsp[-4].minor.yy528 = yylhsminor.yy528;\n@@ -163752,1 +167849,1 @@\n-{yymsp[0].minor.yy626=tokenExpr(pParse,yymsp[0].major,yymsp[0].minor.yy0); \/*A-overwrites-X*\/}\n+{yymsp[0].minor.yy528=tokenExpr(pParse,yymsp[0].major,yymsp[0].minor.yy0); \/*A-overwrites-X*\/}\n@@ -163756,1 +167853,2 @@\n-  yylhsminor.yy626 = sqlite3ExprAlloc(pParse->db, TK_INTEGER, &yymsp[0].minor.yy0, 1);\n+  yylhsminor.yy528 = sqlite3ExprAlloc(pParse->db, TK_INTEGER, &yymsp[0].minor.yy0, 1);\n+  if( yylhsminor.yy528 ) yylhsminor.yy528->w.iOfst = (int)(yymsp[0].minor.yy0.z - pParse->zTail);\n@@ -163758,1 +167856,1 @@\n-  yymsp[0].minor.yy626 = yylhsminor.yy626;\n+  yymsp[0].minor.yy528 = yylhsminor.yy528;\n@@ -163764,2 +167862,2 @@\n-    yymsp[0].minor.yy626 = tokenExpr(pParse, TK_VARIABLE, yymsp[0].minor.yy0);\n-    sqlite3ExprAssignVarNumber(pParse, yymsp[0].minor.yy626, n);\n+    yymsp[0].minor.yy528 = tokenExpr(pParse, TK_VARIABLE, yymsp[0].minor.yy0);\n+    sqlite3ExprAssignVarNumber(pParse, yymsp[0].minor.yy528, n);\n@@ -163774,1 +167872,1 @@\n-      yymsp[0].minor.yy626 = 0;\n+      yymsp[0].minor.yy528 = 0;\n@@ -163776,2 +167874,2 @@\n-      yymsp[0].minor.yy626 = sqlite3PExpr(pParse, TK_REGISTER, 0, 0);\n-      if( yymsp[0].minor.yy626 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy626->iTable);\n+      yymsp[0].minor.yy528 = sqlite3PExpr(pParse, TK_REGISTER, 0, 0);\n+      if( yymsp[0].minor.yy528 ) sqlite3GetInt32(&t.z[1], &yymsp[0].minor.yy528->iTable);\n@@ -163784,1 +167882,1 @@\n-  yymsp[-2].minor.yy626 = sqlite3ExprAddCollateToken(pParse, yymsp[-2].minor.yy626, &yymsp[0].minor.yy0, 1);\n+  yymsp[-2].minor.yy528 = sqlite3ExprAddCollateToken(pParse, yymsp[-2].minor.yy528, &yymsp[0].minor.yy0, 1);\n@@ -163789,2 +167887,2 @@\n-  yymsp[-5].minor.yy626 = sqlite3ExprAlloc(pParse->db, TK_CAST, &yymsp[-1].minor.yy0, 1);\n-  sqlite3ExprAttachSubtrees(pParse->db, yymsp[-5].minor.yy626, yymsp[-3].minor.yy626, 0);\n+  yymsp[-5].minor.yy528 = sqlite3ExprAlloc(pParse->db, TK_CAST, &yymsp[-1].minor.yy0, 1);\n+  sqlite3ExprAttachSubtrees(pParse->db, yymsp[-5].minor.yy528, yymsp[-3].minor.yy528, 0);\n@@ -163795,1 +167893,1 @@\n-  yylhsminor.yy626 = sqlite3ExprFunction(pParse, yymsp[-1].minor.yy562, &yymsp[-4].minor.yy0, yymsp[-2].minor.yy64);\n+  yylhsminor.yy528 = sqlite3ExprFunction(pParse, yymsp[-1].minor.yy322, &yymsp[-4].minor.yy0, yymsp[-2].minor.yy394);\n@@ -163797,1 +167895,1 @@\n-  yymsp[-4].minor.yy626 = yylhsminor.yy626;\n+  yymsp[-4].minor.yy528 = yylhsminor.yy528;\n@@ -163801,1 +167899,1 @@\n-  yylhsminor.yy626 = sqlite3ExprFunction(pParse, 0, &yymsp[-3].minor.yy0, 0);\n+  yylhsminor.yy528 = sqlite3ExprFunction(pParse, 0, &yymsp[-3].minor.yy0, 0);\n@@ -163803,1 +167901,1 @@\n-  yymsp[-3].minor.yy626 = yylhsminor.yy626;\n+  yymsp[-3].minor.yy528 = yylhsminor.yy528;\n@@ -163807,2 +167905,2 @@\n-  yylhsminor.yy626 = sqlite3ExprFunction(pParse, yymsp[-2].minor.yy562, &yymsp[-5].minor.yy0, yymsp[-3].minor.yy64);\n-  sqlite3WindowAttach(pParse, yylhsminor.yy626, yymsp[0].minor.yy375);\n+  yylhsminor.yy528 = sqlite3ExprFunction(pParse, yymsp[-2].minor.yy322, &yymsp[-5].minor.yy0, yymsp[-3].minor.yy394);\n+  sqlite3WindowAttach(pParse, yylhsminor.yy528, yymsp[0].minor.yy41);\n@@ -163810,1 +167908,1 @@\n-  yymsp[-5].minor.yy626 = yylhsminor.yy626;\n+  yymsp[-5].minor.yy528 = yylhsminor.yy528;\n@@ -163814,2 +167912,2 @@\n-  yylhsminor.yy626 = sqlite3ExprFunction(pParse, 0, &yymsp[-4].minor.yy0, 0);\n-  sqlite3WindowAttach(pParse, yylhsminor.yy626, yymsp[0].minor.yy375);\n+  yylhsminor.yy528 = sqlite3ExprFunction(pParse, 0, &yymsp[-4].minor.yy0, 0);\n+  sqlite3WindowAttach(pParse, yylhsminor.yy528, yymsp[0].minor.yy41);\n@@ -163817,1 +167915,1 @@\n-  yymsp[-4].minor.yy626 = yylhsminor.yy626;\n+  yymsp[-4].minor.yy528 = yylhsminor.yy528;\n@@ -163821,1 +167919,1 @@\n-  yylhsminor.yy626 = sqlite3ExprFunction(pParse, 0, &yymsp[0].minor.yy0, 0);\n+  yylhsminor.yy528 = sqlite3ExprFunction(pParse, 0, &yymsp[0].minor.yy0, 0);\n@@ -163823,1 +167921,1 @@\n-  yymsp[0].minor.yy626 = yylhsminor.yy626;\n+  yymsp[0].minor.yy528 = yylhsminor.yy528;\n@@ -163827,4 +167925,4 @@\n-  ExprList *pList = sqlite3ExprListAppend(pParse, yymsp[-3].minor.yy562, yymsp[-1].minor.yy626);\n-  yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);\n-  if( yymsp[-4].minor.yy626 ){\n-    yymsp[-4].minor.yy626->x.pList = pList;\n+  ExprList *pList = sqlite3ExprListAppend(pParse, yymsp[-3].minor.yy322, yymsp[-1].minor.yy528);\n+  yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);\n+  if( yymsp[-4].minor.yy528 ){\n+    yymsp[-4].minor.yy528->x.pList = pList;\n@@ -163832,1 +167930,1 @@\n-      yymsp[-4].minor.yy626->flags |= pList->a[0].pExpr->flags & EP_Propagate;\n+      yymsp[-4].minor.yy528->flags |= pList->a[0].pExpr->flags & EP_Propagate;\n@@ -163840,1 +167938,1 @@\n-{yymsp[-2].minor.yy626=sqlite3ExprAnd(pParse,yymsp[-2].minor.yy626,yymsp[0].minor.yy626);}\n+{yymsp[-2].minor.yy528=sqlite3ExprAnd(pParse,yymsp[-2].minor.yy528,yymsp[0].minor.yy528);}\n@@ -163849,1 +167947,1 @@\n-{yymsp[-2].minor.yy626=sqlite3PExpr(pParse,yymsp[-1].major,yymsp[-2].minor.yy626,yymsp[0].minor.yy626);}\n+{yymsp[-2].minor.yy528=sqlite3PExpr(pParse,yymsp[-1].major,yymsp[-2].minor.yy528,yymsp[0].minor.yy528);}\n@@ -163859,5 +167957,5 @@\n-  pList = sqlite3ExprListAppend(pParse,0, yymsp[0].minor.yy626);\n-  pList = sqlite3ExprListAppend(pParse,pList, yymsp[-2].minor.yy626);\n-  yymsp[-2].minor.yy626 = sqlite3ExprFunction(pParse, pList, &yymsp[-1].minor.yy0, 0);\n-  if( bNot ) yymsp[-2].minor.yy626 = sqlite3PExpr(pParse, TK_NOT, yymsp[-2].minor.yy626, 0);\n-  if( yymsp[-2].minor.yy626 ) yymsp[-2].minor.yy626->flags |= EP_InfixFunc;\n+  pList = sqlite3ExprListAppend(pParse,0, yymsp[0].minor.yy528);\n+  pList = sqlite3ExprListAppend(pParse,pList, yymsp[-2].minor.yy528);\n+  yymsp[-2].minor.yy528 = sqlite3ExprFunction(pParse, pList, &yymsp[-1].minor.yy0, 0);\n+  if( bNot ) yymsp[-2].minor.yy528 = sqlite3PExpr(pParse, TK_NOT, yymsp[-2].minor.yy528, 0);\n+  if( yymsp[-2].minor.yy528 ) yymsp[-2].minor.yy528->flags |= EP_InfixFunc;\n@@ -163871,6 +167969,6 @@\n-  pList = sqlite3ExprListAppend(pParse,0, yymsp[-2].minor.yy626);\n-  pList = sqlite3ExprListAppend(pParse,pList, yymsp[-4].minor.yy626);\n-  pList = sqlite3ExprListAppend(pParse,pList, yymsp[0].minor.yy626);\n-  yymsp[-4].minor.yy626 = sqlite3ExprFunction(pParse, pList, &yymsp[-3].minor.yy0, 0);\n-  if( bNot ) yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy626, 0);\n-  if( yymsp[-4].minor.yy626 ) yymsp[-4].minor.yy626->flags |= EP_InfixFunc;\n+  pList = sqlite3ExprListAppend(pParse,0, yymsp[-2].minor.yy528);\n+  pList = sqlite3ExprListAppend(pParse,pList, yymsp[-4].minor.yy528);\n+  pList = sqlite3ExprListAppend(pParse,pList, yymsp[0].minor.yy528);\n+  yymsp[-4].minor.yy528 = sqlite3ExprFunction(pParse, pList, &yymsp[-3].minor.yy0, 0);\n+  if( bNot ) yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy528, 0);\n+  if( yymsp[-4].minor.yy528 ) yymsp[-4].minor.yy528->flags |= EP_InfixFunc;\n@@ -163880,1 +167978,1 @@\n-{yymsp[-1].minor.yy626 = sqlite3PExpr(pParse,yymsp[0].major,yymsp[-1].minor.yy626,0);}\n+{yymsp[-1].minor.yy528 = sqlite3PExpr(pParse,yymsp[0].major,yymsp[-1].minor.yy528,0);}\n@@ -163883,1 +167981,1 @@\n-{yymsp[-2].minor.yy626 = sqlite3PExpr(pParse,TK_NOTNULL,yymsp[-2].minor.yy626,0);}\n+{yymsp[-2].minor.yy528 = sqlite3PExpr(pParse,TK_NOTNULL,yymsp[-2].minor.yy528,0);}\n@@ -163887,2 +167985,2 @@\n-  yymsp[-2].minor.yy626 = sqlite3PExpr(pParse,TK_IS,yymsp[-2].minor.yy626,yymsp[0].minor.yy626);\n-  binaryToUnaryIfNull(pParse, yymsp[0].minor.yy626, yymsp[-2].minor.yy626, TK_ISNULL);\n+  yymsp[-2].minor.yy528 = sqlite3PExpr(pParse,TK_IS,yymsp[-2].minor.yy528,yymsp[0].minor.yy528);\n+  binaryToUnaryIfNull(pParse, yymsp[0].minor.yy528, yymsp[-2].minor.yy528, TK_ISNULL);\n@@ -163893,2 +167991,2 @@\n-  yymsp[-3].minor.yy626 = sqlite3PExpr(pParse,TK_ISNOT,yymsp[-3].minor.yy626,yymsp[0].minor.yy626);\n-  binaryToUnaryIfNull(pParse, yymsp[0].minor.yy626, yymsp[-3].minor.yy626, TK_NOTNULL);\n+  yymsp[-3].minor.yy528 = sqlite3PExpr(pParse,TK_ISNOT,yymsp[-3].minor.yy528,yymsp[0].minor.yy528);\n+  binaryToUnaryIfNull(pParse, yymsp[0].minor.yy528, yymsp[-3].minor.yy528, TK_NOTNULL);\n@@ -163897,3 +167995,5 @@\n-      case 209: \/* expr ::= NOT expr *\/\n-      case 210: \/* expr ::= BITNOT expr *\/ yytestcase(yyruleno==210);\n-{yymsp[-1].minor.yy626 = sqlite3PExpr(pParse, yymsp[-1].major, yymsp[0].minor.yy626, 0);\/*A-overwrites-B*\/}\n+      case 209: \/* expr ::= expr IS NOT DISTINCT FROM expr *\/\n+{\n+  yymsp[-5].minor.yy528 = sqlite3PExpr(pParse,TK_IS,yymsp[-5].minor.yy528,yymsp[0].minor.yy528);\n+  binaryToUnaryIfNull(pParse, yymsp[0].minor.yy528, yymsp[-5].minor.yy528, TK_ISNULL);\n+}\n@@ -163901,1 +168001,1 @@\n-      case 211: \/* expr ::= PLUS|MINUS expr *\/\n+      case 210: \/* expr ::= expr IS DISTINCT FROM expr *\/\n@@ -163903,1 +168003,11 @@\n-  yymsp[-1].minor.yy626 = sqlite3PExpr(pParse, yymsp[-1].major==TK_PLUS ? TK_UPLUS : TK_UMINUS, yymsp[0].minor.yy626, 0);\n+  yymsp[-4].minor.yy528 = sqlite3PExpr(pParse,TK_ISNOT,yymsp[-4].minor.yy528,yymsp[0].minor.yy528);\n+  binaryToUnaryIfNull(pParse, yymsp[0].minor.yy528, yymsp[-4].minor.yy528, TK_NOTNULL);\n+}\n+        break;\n+      case 211: \/* expr ::= NOT expr *\/\n+      case 212: \/* expr ::= BITNOT expr *\/ yytestcase(yyruleno==212);\n+{yymsp[-1].minor.yy528 = sqlite3PExpr(pParse, yymsp[-1].major, yymsp[0].minor.yy528, 0);\/*A-overwrites-B*\/}\n+        break;\n+      case 213: \/* expr ::= PLUS|MINUS expr *\/\n+{\n+  yymsp[-1].minor.yy528 = sqlite3PExpr(pParse, yymsp[-1].major==TK_PLUS ? TK_UPLUS : TK_UMINUS, yymsp[0].minor.yy528, 0);\n@@ -163907,3 +168017,11 @@\n-      case 212: \/* between_op ::= BETWEEN *\/\n-      case 215: \/* in_op ::= IN *\/ yytestcase(yyruleno==215);\n-{yymsp[0].minor.yy64 = 0;}\n+      case 214: \/* expr ::= expr PTR expr *\/\n+{\n+  ExprList *pList = sqlite3ExprListAppend(pParse, 0, yymsp[-2].minor.yy528);\n+  pList = sqlite3ExprListAppend(pParse, pList, yymsp[0].minor.yy528);\n+  yylhsminor.yy528 = sqlite3ExprFunction(pParse, pList, &yymsp[-1].minor.yy0, 0);\n+}\n+  yymsp[-2].minor.yy528 = yylhsminor.yy528;\n+        break;\n+      case 215: \/* between_op ::= BETWEEN *\/\n+      case 218: \/* in_op ::= IN *\/ yytestcase(yyruleno==218);\n+{yymsp[0].minor.yy394 = 0;}\n@@ -163911,1 +168029,1 @@\n-      case 214: \/* expr ::= expr between_op expr AND expr *\/\n+      case 217: \/* expr ::= expr between_op expr AND expr *\/\n@@ -163913,5 +168031,5 @@\n-  ExprList *pList = sqlite3ExprListAppend(pParse,0, yymsp[-2].minor.yy626);\n-  pList = sqlite3ExprListAppend(pParse,pList, yymsp[0].minor.yy626);\n-  yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_BETWEEN, yymsp[-4].minor.yy626, 0);\n-  if( yymsp[-4].minor.yy626 ){\n-    yymsp[-4].minor.yy626->x.pList = pList;\n+  ExprList *pList = sqlite3ExprListAppend(pParse,0, yymsp[-2].minor.yy528);\n+  pList = sqlite3ExprListAppend(pParse,pList, yymsp[0].minor.yy528);\n+  yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_BETWEEN, yymsp[-4].minor.yy528, 0);\n+  if( yymsp[-4].minor.yy528 ){\n+    yymsp[-4].minor.yy528->x.pList = pList;\n@@ -163921,1 +168039,1 @@\n-  if( yymsp[-3].minor.yy64 ) yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy626, 0);\n+  if( yymsp[-3].minor.yy394 ) yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy528, 0);\n@@ -163924,1 +168042,1 @@\n-      case 217: \/* expr ::= expr in_op LP exprlist RP *\/\n+      case 220: \/* expr ::= expr in_op LP exprlist RP *\/\n@@ -163926,1 +168044,1 @@\n-    if( yymsp[-1].minor.yy562==0 ){\n+    if( yymsp[-1].minor.yy322==0 ){\n@@ -163935,7 +168053,8 @@\n-      sqlite3ExprUnmapAndDelete(pParse, yymsp[-4].minor.yy626);\n-      yymsp[-4].minor.yy626 = sqlite3Expr(pParse->db, TK_INTEGER, yymsp[-3].minor.yy64 ? \"1\" : \"0\");\n-    }else{\n-      Expr *pRHS = yymsp[-1].minor.yy562->a[0].pExpr;\n-      if( yymsp[-1].minor.yy562->nExpr==1 && sqlite3ExprIsConstant(pRHS) && yymsp[-4].minor.yy626->op!=TK_VECTOR ){\n-        yymsp[-1].minor.yy562->a[0].pExpr = 0;\n-        sqlite3ExprListDelete(pParse->db, yymsp[-1].minor.yy562);\n+      sqlite3ExprUnmapAndDelete(pParse, yymsp[-4].minor.yy528);\n+      yymsp[-4].minor.yy528 = sqlite3Expr(pParse->db, TK_STRING, yymsp[-3].minor.yy394 ? \"true\" : \"false\");\n+      if( yymsp[-4].minor.yy528 ) sqlite3ExprIdToTrueFalse(yymsp[-4].minor.yy528);\n+    }else{\n+      Expr *pRHS = yymsp[-1].minor.yy322->a[0].pExpr;\n+      if( yymsp[-1].minor.yy322->nExpr==1 && sqlite3ExprIsConstant(pRHS) && yymsp[-4].minor.yy528->op!=TK_VECTOR ){\n+        yymsp[-1].minor.yy322->a[0].pExpr = 0;\n+        sqlite3ExprListDelete(pParse->db, yymsp[-1].minor.yy322);\n@@ -163943,1 +168062,1 @@\n-        yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_EQ, yymsp[-4].minor.yy626, pRHS);\n+        yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_EQ, yymsp[-4].minor.yy528, pRHS);\n@@ -163945,6 +168064,6 @@\n-        yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy626, 0);\n-        if( yymsp[-4].minor.yy626==0 ){\n-          sqlite3ExprListDelete(pParse->db, yymsp[-1].minor.yy562);\n-        }else if( yymsp[-4].minor.yy626->pLeft->op==TK_VECTOR ){\n-          int nExpr = yymsp[-4].minor.yy626->pLeft->x.pList->nExpr;\n-          Select *pSelectRHS = sqlite3ExprListToValues(pParse, nExpr, yymsp[-1].minor.yy562);\n+        yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy528, 0);\n+        if( yymsp[-4].minor.yy528==0 ){\n+          sqlite3ExprListDelete(pParse->db, yymsp[-1].minor.yy322);\n+        }else if( yymsp[-4].minor.yy528->pLeft->op==TK_VECTOR ){\n+          int nExpr = yymsp[-4].minor.yy528->pLeft->x.pList->nExpr;\n+          Select *pSelectRHS = sqlite3ExprListToValues(pParse, nExpr, yymsp[-1].minor.yy322);\n@@ -163953,1 +168072,1 @@\n-            sqlite3PExprAddSelect(pParse, yymsp[-4].minor.yy626, pSelectRHS);\n+            sqlite3PExprAddSelect(pParse, yymsp[-4].minor.yy528, pSelectRHS);\n@@ -163956,2 +168075,2 @@\n-          yymsp[-4].minor.yy626->x.pList = yymsp[-1].minor.yy562;\n-          sqlite3ExprSetHeightAndFlags(pParse, yymsp[-4].minor.yy626);\n+          yymsp[-4].minor.yy528->x.pList = yymsp[-1].minor.yy322;\n+          sqlite3ExprSetHeightAndFlags(pParse, yymsp[-4].minor.yy528);\n@@ -163960,1 +168079,1 @@\n-      if( yymsp[-3].minor.yy64 ) yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy626, 0);\n+      if( yymsp[-3].minor.yy394 ) yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy528, 0);\n@@ -163964,1 +168083,1 @@\n-      case 218: \/* expr ::= LP select RP *\/\n+      case 221: \/* expr ::= LP select RP *\/\n@@ -163966,2 +168085,2 @@\n-    yymsp[-2].minor.yy626 = sqlite3PExpr(pParse, TK_SELECT, 0, 0);\n-    sqlite3PExprAddSelect(pParse, yymsp[-2].minor.yy626, yymsp[-1].minor.yy303);\n+    yymsp[-2].minor.yy528 = sqlite3PExpr(pParse, TK_SELECT, 0, 0);\n+    sqlite3PExprAddSelect(pParse, yymsp[-2].minor.yy528, yymsp[-1].minor.yy47);\n@@ -163970,1 +168089,1 @@\n-      case 219: \/* expr ::= expr in_op LP select RP *\/\n+      case 222: \/* expr ::= expr in_op LP select RP *\/\n@@ -163972,3 +168091,3 @@\n-    yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy626, 0);\n-    sqlite3PExprAddSelect(pParse, yymsp[-4].minor.yy626, yymsp[-1].minor.yy303);\n-    if( yymsp[-3].minor.yy64 ) yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy626, 0);\n+    yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy528, 0);\n+    sqlite3PExprAddSelect(pParse, yymsp[-4].minor.yy528, yymsp[-1].minor.yy47);\n+    if( yymsp[-3].minor.yy394 ) yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy528, 0);\n@@ -163977,1 +168096,1 @@\n-      case 220: \/* expr ::= expr in_op nm dbnm paren_exprlist *\/\n+      case 223: \/* expr ::= expr in_op nm dbnm paren_exprlist *\/\n@@ -163981,4 +168100,4 @@\n-    if( yymsp[0].minor.yy562 )  sqlite3SrcListFuncArgs(pParse, pSelect ? pSrc : 0, yymsp[0].minor.yy562);\n-    yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy626, 0);\n-    sqlite3PExprAddSelect(pParse, yymsp[-4].minor.yy626, pSelect);\n-    if( yymsp[-3].minor.yy64 ) yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy626, 0);\n+    if( yymsp[0].minor.yy322 )  sqlite3SrcListFuncArgs(pParse, pSelect ? pSrc : 0, yymsp[0].minor.yy322);\n+    yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_IN, yymsp[-4].minor.yy528, 0);\n+    sqlite3PExprAddSelect(pParse, yymsp[-4].minor.yy528, pSelect);\n+    if( yymsp[-3].minor.yy394 ) yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_NOT, yymsp[-4].minor.yy528, 0);\n@@ -163987,1 +168106,1 @@\n-      case 221: \/* expr ::= EXISTS LP select RP *\/\n+      case 224: \/* expr ::= EXISTS LP select RP *\/\n@@ -163990,2 +168109,2 @@\n-    p = yymsp[-3].minor.yy626 = sqlite3PExpr(pParse, TK_EXISTS, 0, 0);\n-    sqlite3PExprAddSelect(pParse, p, yymsp[-1].minor.yy303);\n+    p = yymsp[-3].minor.yy528 = sqlite3PExpr(pParse, TK_EXISTS, 0, 0);\n+    sqlite3PExprAddSelect(pParse, p, yymsp[-1].minor.yy47);\n@@ -163994,1 +168113,1 @@\n-      case 222: \/* expr ::= CASE case_operand case_exprlist case_else END *\/\n+      case 225: \/* expr ::= CASE case_operand case_exprlist case_else END *\/\n@@ -163996,4 +168115,4 @@\n-  yymsp[-4].minor.yy626 = sqlite3PExpr(pParse, TK_CASE, yymsp[-3].minor.yy626, 0);\n-  if( yymsp[-4].minor.yy626 ){\n-    yymsp[-4].minor.yy626->x.pList = yymsp[-1].minor.yy626 ? sqlite3ExprListAppend(pParse,yymsp[-2].minor.yy562,yymsp[-1].minor.yy626) : yymsp[-2].minor.yy562;\n-    sqlite3ExprSetHeightAndFlags(pParse, yymsp[-4].minor.yy626);\n+  yymsp[-4].minor.yy528 = sqlite3PExpr(pParse, TK_CASE, yymsp[-3].minor.yy528, 0);\n+  if( yymsp[-4].minor.yy528 ){\n+    yymsp[-4].minor.yy528->x.pList = yymsp[-1].minor.yy528 ? sqlite3ExprListAppend(pParse,yymsp[-2].minor.yy322,yymsp[-1].minor.yy528) : yymsp[-2].minor.yy322;\n+    sqlite3ExprSetHeightAndFlags(pParse, yymsp[-4].minor.yy528);\n@@ -164001,2 +168120,2 @@\n-    sqlite3ExprListDelete(pParse->db, yymsp[-2].minor.yy562);\n-    sqlite3ExprDelete(pParse->db, yymsp[-1].minor.yy626);\n+    sqlite3ExprListDelete(pParse->db, yymsp[-2].minor.yy322);\n+    sqlite3ExprDelete(pParse->db, yymsp[-1].minor.yy528);\n@@ -164006,1 +168125,1 @@\n-      case 223: \/* case_exprlist ::= case_exprlist WHEN expr THEN expr *\/\n+      case 226: \/* case_exprlist ::= case_exprlist WHEN expr THEN expr *\/\n@@ -164008,2 +168127,2 @@\n-  yymsp[-4].minor.yy562 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy562, yymsp[-2].minor.yy626);\n-  yymsp[-4].minor.yy562 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy562, yymsp[0].minor.yy626);\n+  yymsp[-4].minor.yy322 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy322, yymsp[-2].minor.yy528);\n+  yymsp[-4].minor.yy322 = sqlite3ExprListAppend(pParse,yymsp[-4].minor.yy322, yymsp[0].minor.yy528);\n@@ -164012,1 +168131,1 @@\n-      case 224: \/* case_exprlist ::= WHEN expr THEN expr *\/\n+      case 227: \/* case_exprlist ::= WHEN expr THEN expr *\/\n@@ -164014,2 +168133,2 @@\n-  yymsp[-3].minor.yy562 = sqlite3ExprListAppend(pParse,0, yymsp[-2].minor.yy626);\n-  yymsp[-3].minor.yy562 = sqlite3ExprListAppend(pParse,yymsp[-3].minor.yy562, yymsp[0].minor.yy626);\n+  yymsp[-3].minor.yy322 = sqlite3ExprListAppend(pParse,0, yymsp[-2].minor.yy528);\n+  yymsp[-3].minor.yy322 = sqlite3ExprListAppend(pParse,yymsp[-3].minor.yy322, yymsp[0].minor.yy528);\n@@ -164018,2 +168137,2 @@\n-      case 227: \/* case_operand ::= expr *\/\n-{yymsp[0].minor.yy626 = yymsp[0].minor.yy626; \/*A-overwrites-X*\/}\n+      case 230: \/* case_operand ::= expr *\/\n+{yymsp[0].minor.yy528 = yymsp[0].minor.yy528; \/*A-overwrites-X*\/}\n@@ -164021,2 +168140,2 @@\n-      case 230: \/* nexprlist ::= nexprlist COMMA expr *\/\n-{yymsp[-2].minor.yy562 = sqlite3ExprListAppend(pParse,yymsp[-2].minor.yy562,yymsp[0].minor.yy626);}\n+      case 233: \/* nexprlist ::= nexprlist COMMA expr *\/\n+{yymsp[-2].minor.yy322 = sqlite3ExprListAppend(pParse,yymsp[-2].minor.yy322,yymsp[0].minor.yy528);}\n@@ -164024,2 +168143,2 @@\n-      case 231: \/* nexprlist ::= expr *\/\n-{yymsp[0].minor.yy562 = sqlite3ExprListAppend(pParse,0,yymsp[0].minor.yy626); \/*A-overwrites-Y*\/}\n+      case 234: \/* nexprlist ::= expr *\/\n+{yymsp[0].minor.yy322 = sqlite3ExprListAppend(pParse,0,yymsp[0].minor.yy528); \/*A-overwrites-Y*\/}\n@@ -164027,3 +168146,3 @@\n-      case 233: \/* paren_exprlist ::= LP exprlist RP *\/\n-      case 238: \/* eidlist_opt ::= LP eidlist RP *\/ yytestcase(yyruleno==238);\n-{yymsp[-2].minor.yy562 = yymsp[-1].minor.yy562;}\n+      case 236: \/* paren_exprlist ::= LP exprlist RP *\/\n+      case 241: \/* eidlist_opt ::= LP eidlist RP *\/ yytestcase(yyruleno==241);\n+{yymsp[-2].minor.yy322 = yymsp[-1].minor.yy322;}\n@@ -164031,1 +168150,1 @@\n-      case 234: \/* cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt *\/\n+      case 237: \/* cmd ::= createkw uniqueflag INDEX ifnotexists nm dbnm ON nm LP sortlist RP where_opt *\/\n@@ -164034,2 +168153,2 @@\n-                     sqlite3SrcListAppend(pParse,0,&yymsp[-4].minor.yy0,0), yymsp[-2].minor.yy562, yymsp[-10].minor.yy64,\n-                      &yymsp[-11].minor.yy0, yymsp[0].minor.yy626, SQLITE_SO_ASC, yymsp[-8].minor.yy64, SQLITE_IDXTYPE_APPDEF);\n+                     sqlite3SrcListAppend(pParse,0,&yymsp[-4].minor.yy0,0), yymsp[-2].minor.yy322, yymsp[-10].minor.yy394,\n+                      &yymsp[-11].minor.yy0, yymsp[0].minor.yy528, SQLITE_SO_ASC, yymsp[-8].minor.yy394, SQLITE_IDXTYPE_APPDEF);\n@@ -164041,3 +168160,3 @@\n-      case 235: \/* uniqueflag ::= UNIQUE *\/\n-      case 277: \/* raisetype ::= ABORT *\/ yytestcase(yyruleno==277);\n-{yymsp[0].minor.yy64 = OE_Abort;}\n+      case 238: \/* uniqueflag ::= UNIQUE *\/\n+      case 280: \/* raisetype ::= ABORT *\/ yytestcase(yyruleno==280);\n+{yymsp[0].minor.yy394 = OE_Abort;}\n@@ -164045,2 +168164,2 @@\n-      case 236: \/* uniqueflag ::= *\/\n-{yymsp[1].minor.yy64 = OE_None;}\n+      case 239: \/* uniqueflag ::= *\/\n+{yymsp[1].minor.yy394 = OE_None;}\n@@ -164048,1 +168167,1 @@\n-      case 239: \/* eidlist ::= eidlist COMMA nm collate sortorder *\/\n+      case 242: \/* eidlist ::= eidlist COMMA nm collate sortorder *\/\n@@ -164050,1 +168169,1 @@\n-  yymsp[-4].minor.yy562 = parserAddExprIdListTerm(pParse, yymsp[-4].minor.yy562, &yymsp[-2].minor.yy0, yymsp[-1].minor.yy64, yymsp[0].minor.yy64);\n+  yymsp[-4].minor.yy322 = parserAddExprIdListTerm(pParse, yymsp[-4].minor.yy322, &yymsp[-2].minor.yy0, yymsp[-1].minor.yy394, yymsp[0].minor.yy394);\n@@ -164053,1 +168172,1 @@\n-      case 240: \/* eidlist ::= nm collate sortorder *\/\n+      case 243: \/* eidlist ::= nm collate sortorder *\/\n@@ -164055,1 +168174,1 @@\n-  yymsp[-2].minor.yy562 = parserAddExprIdListTerm(pParse, 0, &yymsp[-2].minor.yy0, yymsp[-1].minor.yy64, yymsp[0].minor.yy64); \/*A-overwrites-Y*\/\n+  yymsp[-2].minor.yy322 = parserAddExprIdListTerm(pParse, 0, &yymsp[-2].minor.yy0, yymsp[-1].minor.yy394, yymsp[0].minor.yy394); \/*A-overwrites-Y*\/\n@@ -164058,2 +168177,2 @@\n-      case 243: \/* cmd ::= DROP INDEX ifexists fullname *\/\n-{sqlite3DropIndex(pParse, yymsp[0].minor.yy607, yymsp[-1].minor.yy64);}\n+      case 246: \/* cmd ::= DROP INDEX ifexists fullname *\/\n+{sqlite3DropIndex(pParse, yymsp[0].minor.yy131, yymsp[-1].minor.yy394);}\n@@ -164061,2 +168180,2 @@\n-      case 244: \/* cmd ::= VACUUM vinto *\/\n-{sqlite3Vacuum(pParse,0,yymsp[0].minor.yy626);}\n+      case 247: \/* cmd ::= VACUUM vinto *\/\n+{sqlite3Vacuum(pParse,0,yymsp[0].minor.yy528);}\n@@ -164064,2 +168183,2 @@\n-      case 245: \/* cmd ::= VACUUM nm vinto *\/\n-{sqlite3Vacuum(pParse,&yymsp[-1].minor.yy0,yymsp[0].minor.yy626);}\n+      case 248: \/* cmd ::= VACUUM nm vinto *\/\n+{sqlite3Vacuum(pParse,&yymsp[-1].minor.yy0,yymsp[0].minor.yy528);}\n@@ -164067,1 +168186,1 @@\n-      case 248: \/* cmd ::= PRAGMA nm dbnm *\/\n+      case 251: \/* cmd ::= PRAGMA nm dbnm *\/\n@@ -164070,1 +168189,1 @@\n-      case 249: \/* cmd ::= PRAGMA nm dbnm EQ nmnum *\/\n+      case 252: \/* cmd ::= PRAGMA nm dbnm EQ nmnum *\/\n@@ -164073,1 +168192,1 @@\n-      case 250: \/* cmd ::= PRAGMA nm dbnm LP nmnum RP *\/\n+      case 253: \/* cmd ::= PRAGMA nm dbnm LP nmnum RP *\/\n@@ -164076,1 +168195,1 @@\n-      case 251: \/* cmd ::= PRAGMA nm dbnm EQ minus_num *\/\n+      case 254: \/* cmd ::= PRAGMA nm dbnm EQ minus_num *\/\n@@ -164079,1 +168198,1 @@\n-      case 252: \/* cmd ::= PRAGMA nm dbnm LP minus_num RP *\/\n+      case 255: \/* cmd ::= PRAGMA nm dbnm LP minus_num RP *\/\n@@ -164082,1 +168201,1 @@\n-      case 255: \/* cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END *\/\n+      case 258: \/* cmd ::= createkw trigger_decl BEGIN trigger_cmd_list END *\/\n@@ -164087,1 +168206,1 @@\n-  sqlite3FinishTrigger(pParse, yymsp[-1].minor.yy95, &all);\n+  sqlite3FinishTrigger(pParse, yymsp[-1].minor.yy33, &all);\n@@ -164090,1 +168209,1 @@\n-      case 256: \/* trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause *\/\n+      case 259: \/* trigger_decl ::= temp TRIGGER ifnotexists nm dbnm trigger_time trigger_event ON fullname foreach_clause when_clause *\/\n@@ -164092,1 +168211,1 @@\n-  sqlite3BeginTrigger(pParse, &yymsp[-7].minor.yy0, &yymsp[-6].minor.yy0, yymsp[-5].minor.yy64, yymsp[-4].minor.yy570.a, yymsp[-4].minor.yy570.b, yymsp[-2].minor.yy607, yymsp[0].minor.yy626, yymsp[-10].minor.yy64, yymsp[-8].minor.yy64);\n+  sqlite3BeginTrigger(pParse, &yymsp[-7].minor.yy0, &yymsp[-6].minor.yy0, yymsp[-5].minor.yy394, yymsp[-4].minor.yy180.a, yymsp[-4].minor.yy180.b, yymsp[-2].minor.yy131, yymsp[0].minor.yy528, yymsp[-10].minor.yy394, yymsp[-8].minor.yy394);\n@@ -164096,2 +168215,2 @@\n-      case 257: \/* trigger_time ::= BEFORE|AFTER *\/\n-{ yymsp[0].minor.yy64 = yymsp[0].major; \/*A-overwrites-X*\/ }\n+      case 260: \/* trigger_time ::= BEFORE|AFTER *\/\n+{ yymsp[0].minor.yy394 = yymsp[0].major; \/*A-overwrites-X*\/ }\n@@ -164099,2 +168218,2 @@\n-      case 258: \/* trigger_time ::= INSTEAD OF *\/\n-{ yymsp[-1].minor.yy64 = TK_INSTEAD;}\n+      case 261: \/* trigger_time ::= INSTEAD OF *\/\n+{ yymsp[-1].minor.yy394 = TK_INSTEAD;}\n@@ -164102,2 +168221,2 @@\n-      case 259: \/* trigger_time ::= *\/\n-{ yymsp[1].minor.yy64 = TK_BEFORE; }\n+      case 262: \/* trigger_time ::= *\/\n+{ yymsp[1].minor.yy394 = TK_BEFORE; }\n@@ -164105,3 +168224,3 @@\n-      case 260: \/* trigger_event ::= DELETE|INSERT *\/\n-      case 261: \/* trigger_event ::= UPDATE *\/ yytestcase(yyruleno==261);\n-{yymsp[0].minor.yy570.a = yymsp[0].major; \/*A-overwrites-X*\/ yymsp[0].minor.yy570.b = 0;}\n+      case 263: \/* trigger_event ::= DELETE|INSERT *\/\n+      case 264: \/* trigger_event ::= UPDATE *\/ yytestcase(yyruleno==264);\n+{yymsp[0].minor.yy180.a = yymsp[0].major; \/*A-overwrites-X*\/ yymsp[0].minor.yy180.b = 0;}\n@@ -164109,2 +168228,2 @@\n-      case 262: \/* trigger_event ::= UPDATE OF idlist *\/\n-{yymsp[-2].minor.yy570.a = TK_UPDATE; yymsp[-2].minor.yy570.b = yymsp[0].minor.yy240;}\n+      case 265: \/* trigger_event ::= UPDATE OF idlist *\/\n+{yymsp[-2].minor.yy180.a = TK_UPDATE; yymsp[-2].minor.yy180.b = yymsp[0].minor.yy254;}\n@@ -164112,3 +168231,3 @@\n-      case 263: \/* when_clause ::= *\/\n-      case 282: \/* key_opt ::= *\/ yytestcase(yyruleno==282);\n-{ yymsp[1].minor.yy626 = 0; }\n+      case 266: \/* when_clause ::= *\/\n+      case 285: \/* key_opt ::= *\/ yytestcase(yyruleno==285);\n+{ yymsp[1].minor.yy528 = 0; }\n@@ -164116,3 +168235,3 @@\n-      case 264: \/* when_clause ::= WHEN expr *\/\n-      case 283: \/* key_opt ::= KEY expr *\/ yytestcase(yyruleno==283);\n-{ yymsp[-1].minor.yy626 = yymsp[0].minor.yy626; }\n+      case 267: \/* when_clause ::= WHEN expr *\/\n+      case 286: \/* key_opt ::= KEY expr *\/ yytestcase(yyruleno==286);\n+{ yymsp[-1].minor.yy528 = yymsp[0].minor.yy528; }\n@@ -164120,1 +168239,1 @@\n-      case 265: \/* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI *\/\n+      case 268: \/* trigger_cmd_list ::= trigger_cmd_list trigger_cmd SEMI *\/\n@@ -164122,3 +168241,3 @@\n-  assert( yymsp[-2].minor.yy95!=0 );\n-  yymsp[-2].minor.yy95->pLast->pNext = yymsp[-1].minor.yy95;\n-  yymsp[-2].minor.yy95->pLast = yymsp[-1].minor.yy95;\n+  assert( yymsp[-2].minor.yy33!=0 );\n+  yymsp[-2].minor.yy33->pLast->pNext = yymsp[-1].minor.yy33;\n+  yymsp[-2].minor.yy33->pLast = yymsp[-1].minor.yy33;\n@@ -164127,1 +168246,1 @@\n-      case 266: \/* trigger_cmd_list ::= trigger_cmd SEMI *\/\n+      case 269: \/* trigger_cmd_list ::= trigger_cmd SEMI *\/\n@@ -164129,2 +168248,2 @@\n-  assert( yymsp[-1].minor.yy95!=0 );\n-  yymsp[-1].minor.yy95->pLast = yymsp[-1].minor.yy95;\n+  assert( yymsp[-1].minor.yy33!=0 );\n+  yymsp[-1].minor.yy33->pLast = yymsp[-1].minor.yy33;\n@@ -164133,1 +168252,1 @@\n-      case 267: \/* trnm ::= nm DOT nm *\/\n+      case 270: \/* trnm ::= nm DOT nm *\/\n@@ -164141,1 +168260,1 @@\n-      case 268: \/* tridxby ::= INDEXED BY nm *\/\n+      case 271: \/* tridxby ::= INDEXED BY nm *\/\n@@ -164148,1 +168267,1 @@\n-      case 269: \/* tridxby ::= NOT INDEXED *\/\n+      case 272: \/* tridxby ::= NOT INDEXED *\/\n@@ -164155,3 +168274,3 @@\n-      case 270: \/* trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt *\/\n-{yylhsminor.yy95 = sqlite3TriggerUpdateStep(pParse, &yymsp[-6].minor.yy0, yymsp[-2].minor.yy607, yymsp[-3].minor.yy562, yymsp[-1].minor.yy626, yymsp[-7].minor.yy64, yymsp[-8].minor.yy0.z, yymsp[0].minor.yy600);}\n-  yymsp[-8].minor.yy95 = yylhsminor.yy95;\n+      case 273: \/* trigger_cmd ::= UPDATE orconf trnm tridxby SET setlist from where_opt scanpt *\/\n+{yylhsminor.yy33 = sqlite3TriggerUpdateStep(pParse, &yymsp[-6].minor.yy0, yymsp[-2].minor.yy131, yymsp[-3].minor.yy322, yymsp[-1].minor.yy528, yymsp[-7].minor.yy394, yymsp[-8].minor.yy0.z, yymsp[0].minor.yy522);}\n+  yymsp[-8].minor.yy33 = yylhsminor.yy33;\n@@ -164159,1 +168278,1 @@\n-      case 271: \/* trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt *\/\n+      case 274: \/* trigger_cmd ::= scanpt insert_cmd INTO trnm idlist_opt select upsert scanpt *\/\n@@ -164161,1 +168280,1 @@\n-   yylhsminor.yy95 = sqlite3TriggerInsertStep(pParse,&yymsp[-4].minor.yy0,yymsp[-3].minor.yy240,yymsp[-2].minor.yy303,yymsp[-6].minor.yy64,yymsp[-1].minor.yy138,yymsp[-7].minor.yy600,yymsp[0].minor.yy600);\/*yylhsminor.yy95-overwrites-yymsp[-6].minor.yy64*\/\n+   yylhsminor.yy33 = sqlite3TriggerInsertStep(pParse,&yymsp[-4].minor.yy0,yymsp[-3].minor.yy254,yymsp[-2].minor.yy47,yymsp[-6].minor.yy394,yymsp[-1].minor.yy444,yymsp[-7].minor.yy522,yymsp[0].minor.yy522);\/*yylhsminor.yy33-overwrites-yymsp[-6].minor.yy394*\/\n@@ -164163,1 +168282,1 @@\n-  yymsp[-7].minor.yy95 = yylhsminor.yy95;\n+  yymsp[-7].minor.yy33 = yylhsminor.yy33;\n@@ -164165,3 +168284,3 @@\n-      case 272: \/* trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt *\/\n-{yylhsminor.yy95 = sqlite3TriggerDeleteStep(pParse, &yymsp[-3].minor.yy0, yymsp[-1].minor.yy626, yymsp[-5].minor.yy0.z, yymsp[0].minor.yy600);}\n-  yymsp[-5].minor.yy95 = yylhsminor.yy95;\n+      case 275: \/* trigger_cmd ::= DELETE FROM trnm tridxby where_opt scanpt *\/\n+{yylhsminor.yy33 = sqlite3TriggerDeleteStep(pParse, &yymsp[-3].minor.yy0, yymsp[-1].minor.yy528, yymsp[-5].minor.yy0.z, yymsp[0].minor.yy522);}\n+  yymsp[-5].minor.yy33 = yylhsminor.yy33;\n@@ -164169,3 +168288,3 @@\n-      case 273: \/* trigger_cmd ::= scanpt select scanpt *\/\n-{yylhsminor.yy95 = sqlite3TriggerSelectStep(pParse->db, yymsp[-1].minor.yy303, yymsp[-2].minor.yy600, yymsp[0].minor.yy600); \/*yylhsminor.yy95-overwrites-yymsp[-1].minor.yy303*\/}\n-  yymsp[-2].minor.yy95 = yylhsminor.yy95;\n+      case 276: \/* trigger_cmd ::= scanpt select scanpt *\/\n+{yylhsminor.yy33 = sqlite3TriggerSelectStep(pParse->db, yymsp[-1].minor.yy47, yymsp[-2].minor.yy522, yymsp[0].minor.yy522); \/*yylhsminor.yy33-overwrites-yymsp[-1].minor.yy47*\/}\n+  yymsp[-2].minor.yy33 = yylhsminor.yy33;\n@@ -164173,1 +168292,1 @@\n-      case 274: \/* expr ::= RAISE LP IGNORE RP *\/\n+      case 277: \/* expr ::= RAISE LP IGNORE RP *\/\n@@ -164175,3 +168294,3 @@\n-  yymsp[-3].minor.yy626 = sqlite3PExpr(pParse, TK_RAISE, 0, 0);\n-  if( yymsp[-3].minor.yy626 ){\n-    yymsp[-3].minor.yy626->affExpr = OE_Ignore;\n+  yymsp[-3].minor.yy528 = sqlite3PExpr(pParse, TK_RAISE, 0, 0);\n+  if( yymsp[-3].minor.yy528 ){\n+    yymsp[-3].minor.yy528->affExpr = OE_Ignore;\n@@ -164181,1 +168300,1 @@\n-      case 275: \/* expr ::= RAISE LP raisetype COMMA nm RP *\/\n+      case 278: \/* expr ::= RAISE LP raisetype COMMA nm RP *\/\n@@ -164183,3 +168302,3 @@\n-  yymsp[-5].minor.yy626 = sqlite3ExprAlloc(pParse->db, TK_RAISE, &yymsp[-1].minor.yy0, 1);\n-  if( yymsp[-5].minor.yy626 ) {\n-    yymsp[-5].minor.yy626->affExpr = (char)yymsp[-3].minor.yy64;\n+  yymsp[-5].minor.yy528 = sqlite3ExprAlloc(pParse->db, TK_RAISE, &yymsp[-1].minor.yy0, 1);\n+  if( yymsp[-5].minor.yy528 ) {\n+    yymsp[-5].minor.yy528->affExpr = (char)yymsp[-3].minor.yy394;\n@@ -164189,2 +168308,2 @@\n-      case 276: \/* raisetype ::= ROLLBACK *\/\n-{yymsp[0].minor.yy64 = OE_Rollback;}\n+      case 279: \/* raisetype ::= ROLLBACK *\/\n+{yymsp[0].minor.yy394 = OE_Rollback;}\n@@ -164192,2 +168311,2 @@\n-      case 278: \/* raisetype ::= FAIL *\/\n-{yymsp[0].minor.yy64 = OE_Fail;}\n+      case 281: \/* raisetype ::= FAIL *\/\n+{yymsp[0].minor.yy394 = OE_Fail;}\n@@ -164195,1 +168314,1 @@\n-      case 279: \/* cmd ::= DROP TRIGGER ifexists fullname *\/\n+      case 282: \/* cmd ::= DROP TRIGGER ifexists fullname *\/\n@@ -164197,1 +168316,1 @@\n-  sqlite3DropTrigger(pParse,yymsp[0].minor.yy607,yymsp[-1].minor.yy64);\n+  sqlite3DropTrigger(pParse,yymsp[0].minor.yy131,yymsp[-1].minor.yy394);\n@@ -164200,1 +168319,1 @@\n-      case 280: \/* cmd ::= ATTACH database_kw_opt expr AS expr key_opt *\/\n+      case 283: \/* cmd ::= ATTACH database_kw_opt expr AS expr key_opt *\/\n@@ -164202,1 +168321,1 @@\n-  sqlite3Attach(pParse, yymsp[-3].minor.yy626, yymsp[-1].minor.yy626, yymsp[0].minor.yy626);\n+  sqlite3Attach(pParse, yymsp[-3].minor.yy528, yymsp[-1].minor.yy528, yymsp[0].minor.yy528);\n@@ -164205,1 +168324,1 @@\n-      case 281: \/* cmd ::= DETACH database_kw_opt expr *\/\n+      case 284: \/* cmd ::= DETACH database_kw_opt expr *\/\n@@ -164207,1 +168326,1 @@\n-  sqlite3Detach(pParse, yymsp[0].minor.yy626);\n+  sqlite3Detach(pParse, yymsp[0].minor.yy528);\n@@ -164210,1 +168329,1 @@\n-      case 284: \/* cmd ::= REINDEX *\/\n+      case 287: \/* cmd ::= REINDEX *\/\n@@ -164213,1 +168332,1 @@\n-      case 285: \/* cmd ::= REINDEX nm dbnm *\/\n+      case 288: \/* cmd ::= REINDEX nm dbnm *\/\n@@ -164216,1 +168335,1 @@\n-      case 286: \/* cmd ::= ANALYZE *\/\n+      case 289: \/* cmd ::= ANALYZE *\/\n@@ -164219,1 +168338,1 @@\n-      case 287: \/* cmd ::= ANALYZE nm dbnm *\/\n+      case 290: \/* cmd ::= ANALYZE nm dbnm *\/\n@@ -164222,1 +168341,1 @@\n-      case 288: \/* cmd ::= ALTER TABLE fullname RENAME TO nm *\/\n+      case 291: \/* cmd ::= ALTER TABLE fullname RENAME TO nm *\/\n@@ -164224,1 +168343,1 @@\n-  sqlite3AlterRenameTable(pParse,yymsp[-3].minor.yy607,&yymsp[0].minor.yy0);\n+  sqlite3AlterRenameTable(pParse,yymsp[-3].minor.yy131,&yymsp[0].minor.yy0);\n@@ -164227,1 +168346,1 @@\n-      case 289: \/* cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist *\/\n+      case 292: \/* cmd ::= ALTER TABLE add_column_fullname ADD kwcolumn_opt columnname carglist *\/\n@@ -164233,1 +168352,1 @@\n-      case 290: \/* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm *\/\n+      case 293: \/* cmd ::= ALTER TABLE fullname DROP kwcolumn_opt nm *\/\n@@ -164235,1 +168354,1 @@\n-  sqlite3AlterDropColumn(pParse, yymsp[-3].minor.yy607, &yymsp[0].minor.yy0);\n+  sqlite3AlterDropColumn(pParse, yymsp[-3].minor.yy131, &yymsp[0].minor.yy0);\n@@ -164238,1 +168357,1 @@\n-      case 291: \/* add_column_fullname ::= fullname *\/\n+      case 294: \/* add_column_fullname ::= fullname *\/\n@@ -164241,1 +168360,1 @@\n-  sqlite3AlterBeginAddColumn(pParse, yymsp[0].minor.yy607);\n+  sqlite3AlterBeginAddColumn(pParse, yymsp[0].minor.yy131);\n@@ -164244,1 +168363,1 @@\n-      case 292: \/* cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm *\/\n+      case 295: \/* cmd ::= ALTER TABLE fullname RENAME kwcolumn_opt nm TO nm *\/\n@@ -164246,1 +168365,1 @@\n-  sqlite3AlterRenameColumn(pParse, yymsp[-5].minor.yy607, &yymsp[-2].minor.yy0, &yymsp[0].minor.yy0);\n+  sqlite3AlterRenameColumn(pParse, yymsp[-5].minor.yy131, &yymsp[-2].minor.yy0, &yymsp[0].minor.yy0);\n@@ -164249,1 +168368,1 @@\n-      case 293: \/* cmd ::= create_vtab *\/\n+      case 296: \/* cmd ::= create_vtab *\/\n@@ -164252,1 +168371,1 @@\n-      case 294: \/* cmd ::= create_vtab LP vtabarglist RP *\/\n+      case 297: \/* cmd ::= create_vtab LP vtabarglist RP *\/\n@@ -164255,1 +168374,1 @@\n-      case 295: \/* create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm *\/\n+      case 298: \/* create_vtab ::= createkw VIRTUAL TABLE ifnotexists nm dbnm USING nm *\/\n@@ -164257,1 +168376,1 @@\n-    sqlite3VtabBeginParse(pParse, &yymsp[-3].minor.yy0, &yymsp[-2].minor.yy0, &yymsp[0].minor.yy0, yymsp[-4].minor.yy64);\n+    sqlite3VtabBeginParse(pParse, &yymsp[-3].minor.yy0, &yymsp[-2].minor.yy0, &yymsp[0].minor.yy0, yymsp[-4].minor.yy394);\n@@ -164260,1 +168379,1 @@\n-      case 296: \/* vtabarg ::= *\/\n+      case 299: \/* vtabarg ::= *\/\n@@ -164263,3 +168382,3 @@\n-      case 297: \/* vtabargtoken ::= ANY *\/\n-      case 298: \/* vtabargtoken ::= lp anylist RP *\/ yytestcase(yyruleno==298);\n-      case 299: \/* lp ::= LP *\/ yytestcase(yyruleno==299);\n+      case 300: \/* vtabargtoken ::= ANY *\/\n+      case 301: \/* vtabargtoken ::= lp anylist RP *\/ yytestcase(yyruleno==301);\n+      case 302: \/* lp ::= LP *\/ yytestcase(yyruleno==302);\n@@ -164268,3 +168387,3 @@\n-      case 300: \/* with ::= WITH wqlist *\/\n-      case 301: \/* with ::= WITH RECURSIVE wqlist *\/ yytestcase(yyruleno==301);\n-{ sqlite3WithPush(pParse, yymsp[0].minor.yy43, 1); }\n+      case 303: \/* with ::= WITH wqlist *\/\n+      case 304: \/* with ::= WITH RECURSIVE wqlist *\/ yytestcase(yyruleno==304);\n+{ sqlite3WithPush(pParse, yymsp[0].minor.yy521, 1); }\n@@ -164272,2 +168391,2 @@\n-      case 302: \/* wqas ::= AS *\/\n-{yymsp[0].minor.yy534 = M10d_Any;}\n+      case 305: \/* wqas ::= AS *\/\n+{yymsp[0].minor.yy516 = M10d_Any;}\n@@ -164275,2 +168394,2 @@\n-      case 303: \/* wqas ::= AS MATERIALIZED *\/\n-{yymsp[-1].minor.yy534 = M10d_Yes;}\n+      case 306: \/* wqas ::= AS MATERIALIZED *\/\n+{yymsp[-1].minor.yy516 = M10d_Yes;}\n@@ -164278,2 +168397,2 @@\n-      case 304: \/* wqas ::= AS NOT MATERIALIZED *\/\n-{yymsp[-2].minor.yy534 = M10d_No;}\n+      case 307: \/* wqas ::= AS NOT MATERIALIZED *\/\n+{yymsp[-2].minor.yy516 = M10d_No;}\n@@ -164281,1 +168400,1 @@\n-      case 305: \/* wqitem ::= nm eidlist_opt wqas LP select RP *\/\n+      case 308: \/* wqitem ::= nm eidlist_opt wqas LP select RP *\/\n@@ -164283,1 +168402,1 @@\n-  yymsp[-5].minor.yy255 = sqlite3CteNew(pParse, &yymsp[-5].minor.yy0, yymsp[-4].minor.yy562, yymsp[-1].minor.yy303, yymsp[-3].minor.yy534); \/*A-overwrites-X*\/\n+  yymsp[-5].minor.yy385 = sqlite3CteNew(pParse, &yymsp[-5].minor.yy0, yymsp[-4].minor.yy322, yymsp[-1].minor.yy47, yymsp[-3].minor.yy516); \/*A-overwrites-X*\/\n@@ -164286,1 +168405,1 @@\n-      case 306: \/* wqlist ::= wqitem *\/\n+      case 309: \/* wqlist ::= wqitem *\/\n@@ -164288,1 +168407,1 @@\n-  yymsp[0].minor.yy43 = sqlite3WithAdd(pParse, 0, yymsp[0].minor.yy255); \/*A-overwrites-X*\/\n+  yymsp[0].minor.yy521 = sqlite3WithAdd(pParse, 0, yymsp[0].minor.yy385); \/*A-overwrites-X*\/\n@@ -164291,1 +168410,1 @@\n-      case 307: \/* wqlist ::= wqlist COMMA wqitem *\/\n+      case 310: \/* wqlist ::= wqlist COMMA wqitem *\/\n@@ -164293,1 +168412,1 @@\n-  yymsp[-2].minor.yy43 = sqlite3WithAdd(pParse, yymsp[-2].minor.yy43, yymsp[0].minor.yy255);\n+  yymsp[-2].minor.yy521 = sqlite3WithAdd(pParse, yymsp[-2].minor.yy521, yymsp[0].minor.yy385);\n@@ -164296,3 +168415,3 @@\n-      case 308: \/* windowdefn_list ::= windowdefn *\/\n-{ yylhsminor.yy375 = yymsp[0].minor.yy375; }\n-  yymsp[0].minor.yy375 = yylhsminor.yy375;\n+      case 311: \/* windowdefn_list ::= windowdefn *\/\n+{ yylhsminor.yy41 = yymsp[0].minor.yy41; }\n+  yymsp[0].minor.yy41 = yylhsminor.yy41;\n@@ -164300,1 +168419,1 @@\n-      case 309: \/* windowdefn_list ::= windowdefn_list COMMA windowdefn *\/\n+      case 312: \/* windowdefn_list ::= windowdefn_list COMMA windowdefn *\/\n@@ -164302,4 +168421,4 @@\n-  assert( yymsp[0].minor.yy375!=0 );\n-  sqlite3WindowChain(pParse, yymsp[0].minor.yy375, yymsp[-2].minor.yy375);\n-  yymsp[0].minor.yy375->pNextWin = yymsp[-2].minor.yy375;\n-  yylhsminor.yy375 = yymsp[0].minor.yy375;\n+  assert( yymsp[0].minor.yy41!=0 );\n+  sqlite3WindowChain(pParse, yymsp[0].minor.yy41, yymsp[-2].minor.yy41);\n+  yymsp[0].minor.yy41->pNextWin = yymsp[-2].minor.yy41;\n+  yylhsminor.yy41 = yymsp[0].minor.yy41;\n@@ -164307,1 +168426,1 @@\n-  yymsp[-2].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-2].minor.yy41 = yylhsminor.yy41;\n@@ -164309,1 +168428,1 @@\n-      case 310: \/* windowdefn ::= nm AS LP window RP *\/\n+      case 313: \/* windowdefn ::= nm AS LP window RP *\/\n@@ -164311,2 +168430,2 @@\n-  if( ALWAYS(yymsp[-1].minor.yy375) ){\n-    yymsp[-1].minor.yy375->zName = sqlite3DbStrNDup(pParse->db, yymsp[-4].minor.yy0.z, yymsp[-4].minor.yy0.n);\n+  if( ALWAYS(yymsp[-1].minor.yy41) ){\n+    yymsp[-1].minor.yy41->zName = sqlite3DbStrNDup(pParse->db, yymsp[-4].minor.yy0.z, yymsp[-4].minor.yy0.n);\n@@ -164314,1 +168433,1 @@\n-  yylhsminor.yy375 = yymsp[-1].minor.yy375;\n+  yylhsminor.yy41 = yymsp[-1].minor.yy41;\n@@ -164316,1 +168435,1 @@\n-  yymsp[-4].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-4].minor.yy41 = yylhsminor.yy41;\n@@ -164318,1 +168437,1 @@\n-      case 311: \/* window ::= PARTITION BY nexprlist orderby_opt frame_opt *\/\n+      case 314: \/* window ::= PARTITION BY nexprlist orderby_opt frame_opt *\/\n@@ -164320,1 +168439,1 @@\n-  yymsp[-4].minor.yy375 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy375, yymsp[-2].minor.yy562, yymsp[-1].minor.yy562, 0);\n+  yymsp[-4].minor.yy41 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy41, yymsp[-2].minor.yy322, yymsp[-1].minor.yy322, 0);\n@@ -164323,1 +168442,1 @@\n-      case 312: \/* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt *\/\n+      case 315: \/* window ::= nm PARTITION BY nexprlist orderby_opt frame_opt *\/\n@@ -164325,1 +168444,1 @@\n-  yylhsminor.yy375 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy375, yymsp[-2].minor.yy562, yymsp[-1].minor.yy562, &yymsp[-5].minor.yy0);\n+  yylhsminor.yy41 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy41, yymsp[-2].minor.yy322, yymsp[-1].minor.yy322, &yymsp[-5].minor.yy0);\n@@ -164327,1 +168446,1 @@\n-  yymsp[-5].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-5].minor.yy41 = yylhsminor.yy41;\n@@ -164329,1 +168448,1 @@\n-      case 313: \/* window ::= ORDER BY sortlist frame_opt *\/\n+      case 316: \/* window ::= ORDER BY sortlist frame_opt *\/\n@@ -164331,1 +168450,1 @@\n-  yymsp[-3].minor.yy375 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy375, 0, yymsp[-1].minor.yy562, 0);\n+  yymsp[-3].minor.yy41 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy41, 0, yymsp[-1].minor.yy322, 0);\n@@ -164334,1 +168453,1 @@\n-      case 314: \/* window ::= nm ORDER BY sortlist frame_opt *\/\n+      case 317: \/* window ::= nm ORDER BY sortlist frame_opt *\/\n@@ -164336,1 +168455,1 @@\n-  yylhsminor.yy375 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy375, 0, yymsp[-1].minor.yy562, &yymsp[-4].minor.yy0);\n+  yylhsminor.yy41 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy41, 0, yymsp[-1].minor.yy322, &yymsp[-4].minor.yy0);\n@@ -164338,1 +168457,1 @@\n-  yymsp[-4].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-4].minor.yy41 = yylhsminor.yy41;\n@@ -164340,2 +168459,2 @@\n-      case 315: \/* window ::= frame_opt *\/\n-      case 334: \/* filter_over ::= over_clause *\/ yytestcase(yyruleno==334);\n+      case 318: \/* window ::= frame_opt *\/\n+      case 337: \/* filter_over ::= over_clause *\/ yytestcase(yyruleno==337);\n@@ -164343,1 +168462,1 @@\n-  yylhsminor.yy375 = yymsp[0].minor.yy375;\n+  yylhsminor.yy41 = yymsp[0].minor.yy41;\n@@ -164345,1 +168464,1 @@\n-  yymsp[0].minor.yy375 = yylhsminor.yy375;\n+  yymsp[0].minor.yy41 = yylhsminor.yy41;\n@@ -164347,1 +168466,1 @@\n-      case 316: \/* window ::= nm frame_opt *\/\n+      case 319: \/* window ::= nm frame_opt *\/\n@@ -164349,1 +168468,1 @@\n-  yylhsminor.yy375 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy375, 0, 0, &yymsp[-1].minor.yy0);\n+  yylhsminor.yy41 = sqlite3WindowAssemble(pParse, yymsp[0].minor.yy41, 0, 0, &yymsp[-1].minor.yy0);\n@@ -164351,1 +168470,1 @@\n-  yymsp[-1].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-1].minor.yy41 = yylhsminor.yy41;\n@@ -164353,1 +168472,1 @@\n-      case 317: \/* frame_opt ::= *\/\n+      case 320: \/* frame_opt ::= *\/\n@@ -164355,1 +168474,1 @@\n-  yymsp[1].minor.yy375 = sqlite3WindowAlloc(pParse, 0, TK_UNBOUNDED, 0, TK_CURRENT, 0, 0);\n+  yymsp[1].minor.yy41 = sqlite3WindowAlloc(pParse, 0, TK_UNBOUNDED, 0, TK_CURRENT, 0, 0);\n@@ -164358,1 +168477,1 @@\n-      case 318: \/* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt *\/\n+      case 321: \/* frame_opt ::= range_or_rows frame_bound_s frame_exclude_opt *\/\n@@ -164360,1 +168479,1 @@\n-  yylhsminor.yy375 = sqlite3WindowAlloc(pParse, yymsp[-2].minor.yy64, yymsp[-1].minor.yy81.eType, yymsp[-1].minor.yy81.pExpr, TK_CURRENT, 0, yymsp[0].minor.yy534);\n+  yylhsminor.yy41 = sqlite3WindowAlloc(pParse, yymsp[-2].minor.yy394, yymsp[-1].minor.yy595.eType, yymsp[-1].minor.yy595.pExpr, TK_CURRENT, 0, yymsp[0].minor.yy516);\n@@ -164362,1 +168481,1 @@\n-  yymsp[-2].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-2].minor.yy41 = yylhsminor.yy41;\n@@ -164364,1 +168483,1 @@\n-      case 319: \/* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt *\/\n+      case 322: \/* frame_opt ::= range_or_rows BETWEEN frame_bound_s AND frame_bound_e frame_exclude_opt *\/\n@@ -164366,1 +168485,1 @@\n-  yylhsminor.yy375 = sqlite3WindowAlloc(pParse, yymsp[-5].minor.yy64, yymsp[-3].minor.yy81.eType, yymsp[-3].minor.yy81.pExpr, yymsp[-1].minor.yy81.eType, yymsp[-1].minor.yy81.pExpr, yymsp[0].minor.yy534);\n+  yylhsminor.yy41 = sqlite3WindowAlloc(pParse, yymsp[-5].minor.yy394, yymsp[-3].minor.yy595.eType, yymsp[-3].minor.yy595.pExpr, yymsp[-1].minor.yy595.eType, yymsp[-1].minor.yy595.pExpr, yymsp[0].minor.yy516);\n@@ -164368,1 +168487,1 @@\n-  yymsp[-5].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-5].minor.yy41 = yylhsminor.yy41;\n@@ -164370,4 +168489,4 @@\n-      case 321: \/* frame_bound_s ::= frame_bound *\/\n-      case 323: \/* frame_bound_e ::= frame_bound *\/ yytestcase(yyruleno==323);\n-{yylhsminor.yy81 = yymsp[0].minor.yy81;}\n-  yymsp[0].minor.yy81 = yylhsminor.yy81;\n+      case 324: \/* frame_bound_s ::= frame_bound *\/\n+      case 326: \/* frame_bound_e ::= frame_bound *\/ yytestcase(yyruleno==326);\n+{yylhsminor.yy595 = yymsp[0].minor.yy595;}\n+  yymsp[0].minor.yy595 = yylhsminor.yy595;\n@@ -164375,5 +168494,5 @@\n-      case 322: \/* frame_bound_s ::= UNBOUNDED PRECEDING *\/\n-      case 324: \/* frame_bound_e ::= UNBOUNDED FOLLOWING *\/ yytestcase(yyruleno==324);\n-      case 326: \/* frame_bound ::= CURRENT ROW *\/ yytestcase(yyruleno==326);\n-{yylhsminor.yy81.eType = yymsp[-1].major; yylhsminor.yy81.pExpr = 0;}\n-  yymsp[-1].minor.yy81 = yylhsminor.yy81;\n+      case 325: \/* frame_bound_s ::= UNBOUNDED PRECEDING *\/\n+      case 327: \/* frame_bound_e ::= UNBOUNDED FOLLOWING *\/ yytestcase(yyruleno==327);\n+      case 329: \/* frame_bound ::= CURRENT ROW *\/ yytestcase(yyruleno==329);\n+{yylhsminor.yy595.eType = yymsp[-1].major; yylhsminor.yy595.pExpr = 0;}\n+  yymsp[-1].minor.yy595 = yylhsminor.yy595;\n@@ -164381,3 +168500,3 @@\n-      case 325: \/* frame_bound ::= expr PRECEDING|FOLLOWING *\/\n-{yylhsminor.yy81.eType = yymsp[0].major; yylhsminor.yy81.pExpr = yymsp[-1].minor.yy626;}\n-  yymsp[-1].minor.yy81 = yylhsminor.yy81;\n+      case 328: \/* frame_bound ::= expr PRECEDING|FOLLOWING *\/\n+{yylhsminor.yy595.eType = yymsp[0].major; yylhsminor.yy595.pExpr = yymsp[-1].minor.yy528;}\n+  yymsp[-1].minor.yy595 = yylhsminor.yy595;\n@@ -164385,2 +168504,2 @@\n-      case 327: \/* frame_exclude_opt ::= *\/\n-{yymsp[1].minor.yy534 = 0;}\n+      case 330: \/* frame_exclude_opt ::= *\/\n+{yymsp[1].minor.yy516 = 0;}\n@@ -164388,2 +168507,2 @@\n-      case 328: \/* frame_exclude_opt ::= EXCLUDE frame_exclude *\/\n-{yymsp[-1].minor.yy534 = yymsp[0].minor.yy534;}\n+      case 331: \/* frame_exclude_opt ::= EXCLUDE frame_exclude *\/\n+{yymsp[-1].minor.yy516 = yymsp[0].minor.yy516;}\n@@ -164391,3 +168510,3 @@\n-      case 329: \/* frame_exclude ::= NO OTHERS *\/\n-      case 330: \/* frame_exclude ::= CURRENT ROW *\/ yytestcase(yyruleno==330);\n-{yymsp[-1].minor.yy534 = yymsp[-1].major; \/*A-overwrites-X*\/}\n+      case 332: \/* frame_exclude ::= NO OTHERS *\/\n+      case 333: \/* frame_exclude ::= CURRENT ROW *\/ yytestcase(yyruleno==333);\n+{yymsp[-1].minor.yy516 = yymsp[-1].major; \/*A-overwrites-X*\/}\n@@ -164395,2 +168514,2 @@\n-      case 331: \/* frame_exclude ::= GROUP|TIES *\/\n-{yymsp[0].minor.yy534 = yymsp[0].major; \/*A-overwrites-X*\/}\n+      case 334: \/* frame_exclude ::= GROUP|TIES *\/\n+{yymsp[0].minor.yy516 = yymsp[0].major; \/*A-overwrites-X*\/}\n@@ -164398,2 +168517,2 @@\n-      case 332: \/* window_clause ::= WINDOW windowdefn_list *\/\n-{ yymsp[-1].minor.yy375 = yymsp[0].minor.yy375; }\n+      case 335: \/* window_clause ::= WINDOW windowdefn_list *\/\n+{ yymsp[-1].minor.yy41 = yymsp[0].minor.yy41; }\n@@ -164401,1 +168520,1 @@\n-      case 333: \/* filter_over ::= filter_clause over_clause *\/\n+      case 336: \/* filter_over ::= filter_clause over_clause *\/\n@@ -164403,2 +168522,2 @@\n-  if( yymsp[0].minor.yy375 ){\n-    yymsp[0].minor.yy375->pFilter = yymsp[-1].minor.yy626;\n+  if( yymsp[0].minor.yy41 ){\n+    yymsp[0].minor.yy41->pFilter = yymsp[-1].minor.yy528;\n@@ -164406,1 +168525,1 @@\n-    sqlite3ExprDelete(pParse->db, yymsp[-1].minor.yy626);\n+    sqlite3ExprDelete(pParse->db, yymsp[-1].minor.yy528);\n@@ -164408,1 +168527,1 @@\n-  yylhsminor.yy375 = yymsp[0].minor.yy375;\n+  yylhsminor.yy41 = yymsp[0].minor.yy41;\n@@ -164410,1 +168529,1 @@\n-  yymsp[-1].minor.yy375 = yylhsminor.yy375;\n+  yymsp[-1].minor.yy41 = yylhsminor.yy41;\n@@ -164412,1 +168531,1 @@\n-      case 335: \/* filter_over ::= filter_clause *\/\n+      case 338: \/* filter_over ::= filter_clause *\/\n@@ -164414,4 +168533,4 @@\n-  yylhsminor.yy375 = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));\n-  if( yylhsminor.yy375 ){\n-    yylhsminor.yy375->eFrmType = TK_FILTER;\n-    yylhsminor.yy375->pFilter = yymsp[0].minor.yy626;\n+  yylhsminor.yy41 = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));\n+  if( yylhsminor.yy41 ){\n+    yylhsminor.yy41->eFrmType = TK_FILTER;\n+    yylhsminor.yy41->pFilter = yymsp[0].minor.yy528;\n@@ -164419,1 +168538,1 @@\n-    sqlite3ExprDelete(pParse->db, yymsp[0].minor.yy626);\n+    sqlite3ExprDelete(pParse->db, yymsp[0].minor.yy528);\n@@ -164422,1 +168541,1 @@\n-  yymsp[0].minor.yy375 = yylhsminor.yy375;\n+  yymsp[0].minor.yy41 = yylhsminor.yy41;\n@@ -164424,1 +168543,1 @@\n-      case 336: \/* over_clause ::= OVER LP window RP *\/\n+      case 339: \/* over_clause ::= OVER LP window RP *\/\n@@ -164426,2 +168545,2 @@\n-  yymsp[-3].minor.yy375 = yymsp[-1].minor.yy375;\n-  assert( yymsp[-3].minor.yy375!=0 );\n+  yymsp[-3].minor.yy41 = yymsp[-1].minor.yy41;\n+  assert( yymsp[-3].minor.yy41!=0 );\n@@ -164430,1 +168549,1 @@\n-      case 337: \/* over_clause ::= OVER nm *\/\n+      case 340: \/* over_clause ::= OVER nm *\/\n@@ -164432,3 +168551,3 @@\n-  yymsp[-1].minor.yy375 = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));\n-  if( yymsp[-1].minor.yy375 ){\n-    yymsp[-1].minor.yy375->zName = sqlite3DbStrNDup(pParse->db, yymsp[0].minor.yy0.z, yymsp[0].minor.yy0.n);\n+  yymsp[-1].minor.yy41 = (Window*)sqlite3DbMallocZero(pParse->db, sizeof(Window));\n+  if( yymsp[-1].minor.yy41 ){\n+    yymsp[-1].minor.yy41->zName = sqlite3DbStrNDup(pParse->db, yymsp[0].minor.yy0.z, yymsp[0].minor.yy0.n);\n@@ -164438,2 +168557,2 @@\n-      case 338: \/* filter_clause ::= FILTER LP WHERE expr RP *\/\n-{ yymsp[-4].minor.yy626 = yymsp[-1].minor.yy626; }\n+      case 341: \/* filter_clause ::= FILTER LP WHERE expr RP *\/\n+{ yymsp[-4].minor.yy528 = yymsp[-1].minor.yy528; }\n@@ -164442,62 +168561,63 @@\n-      \/* (339) input ::= cmdlist *\/ yytestcase(yyruleno==339);\n-      \/* (340) cmdlist ::= cmdlist ecmd *\/ yytestcase(yyruleno==340);\n-      \/* (341) cmdlist ::= ecmd (OPTIMIZED OUT) *\/ assert(yyruleno!=341);\n-      \/* (342) ecmd ::= SEMI *\/ yytestcase(yyruleno==342);\n-      \/* (343) ecmd ::= cmdx SEMI *\/ yytestcase(yyruleno==343);\n-      \/* (344) ecmd ::= explain cmdx SEMI (NEVER REDUCES) *\/ assert(yyruleno!=344);\n-      \/* (345) trans_opt ::= *\/ yytestcase(yyruleno==345);\n-      \/* (346) trans_opt ::= TRANSACTION *\/ yytestcase(yyruleno==346);\n-      \/* (347) trans_opt ::= TRANSACTION nm *\/ yytestcase(yyruleno==347);\n-      \/* (348) savepoint_opt ::= SAVEPOINT *\/ yytestcase(yyruleno==348);\n-      \/* (349) savepoint_opt ::= *\/ yytestcase(yyruleno==349);\n-      \/* (350) cmd ::= create_table create_table_args *\/ yytestcase(yyruleno==350);\n-      \/* (351) table_option_set ::= table_option (OPTIMIZED OUT) *\/ assert(yyruleno!=351);\n-      \/* (352) columnlist ::= columnlist COMMA columnname carglist *\/ yytestcase(yyruleno==352);\n-      \/* (353) columnlist ::= columnname carglist *\/ yytestcase(yyruleno==353);\n-      \/* (354) nm ::= ID|INDEXED *\/ yytestcase(yyruleno==354);\n-      \/* (355) nm ::= STRING *\/ yytestcase(yyruleno==355);\n-      \/* (356) nm ::= JOIN_KW *\/ yytestcase(yyruleno==356);\n-      \/* (357) typetoken ::= typename *\/ yytestcase(yyruleno==357);\n-      \/* (358) typename ::= ID|STRING *\/ yytestcase(yyruleno==358);\n-      \/* (359) signed ::= plus_num (OPTIMIZED OUT) *\/ assert(yyruleno!=359);\n-      \/* (360) signed ::= minus_num (OPTIMIZED OUT) *\/ assert(yyruleno!=360);\n-      \/* (361) carglist ::= carglist ccons *\/ yytestcase(yyruleno==361);\n-      \/* (362) carglist ::= *\/ yytestcase(yyruleno==362);\n-      \/* (363) ccons ::= NULL onconf *\/ yytestcase(yyruleno==363);\n-      \/* (364) ccons ::= GENERATED ALWAYS AS generated *\/ yytestcase(yyruleno==364);\n-      \/* (365) ccons ::= AS generated *\/ yytestcase(yyruleno==365);\n-      \/* (366) conslist_opt ::= COMMA conslist *\/ yytestcase(yyruleno==366);\n-      \/* (367) conslist ::= conslist tconscomma tcons *\/ yytestcase(yyruleno==367);\n-      \/* (368) conslist ::= tcons (OPTIMIZED OUT) *\/ assert(yyruleno!=368);\n-      \/* (369) tconscomma ::= *\/ yytestcase(yyruleno==369);\n-      \/* (370) defer_subclause_opt ::= defer_subclause (OPTIMIZED OUT) *\/ assert(yyruleno!=370);\n-      \/* (371) resolvetype ::= raisetype (OPTIMIZED OUT) *\/ assert(yyruleno!=371);\n-      \/* (372) selectnowith ::= oneselect (OPTIMIZED OUT) *\/ assert(yyruleno!=372);\n-      \/* (373) oneselect ::= values *\/ yytestcase(yyruleno==373);\n-      \/* (374) sclp ::= selcollist COMMA *\/ yytestcase(yyruleno==374);\n-      \/* (375) as ::= ID|STRING *\/ yytestcase(yyruleno==375);\n-      \/* (376) returning ::= *\/ yytestcase(yyruleno==376);\n-      \/* (377) expr ::= term (OPTIMIZED OUT) *\/ assert(yyruleno!=377);\n-      \/* (378) likeop ::= LIKE_KW|MATCH *\/ yytestcase(yyruleno==378);\n-      \/* (379) exprlist ::= nexprlist *\/ yytestcase(yyruleno==379);\n-      \/* (380) nmnum ::= plus_num (OPTIMIZED OUT) *\/ assert(yyruleno!=380);\n-      \/* (381) nmnum ::= nm (OPTIMIZED OUT) *\/ assert(yyruleno!=381);\n-      \/* (382) nmnum ::= ON *\/ yytestcase(yyruleno==382);\n-      \/* (383) nmnum ::= DELETE *\/ yytestcase(yyruleno==383);\n-      \/* (384) nmnum ::= DEFAULT *\/ yytestcase(yyruleno==384);\n-      \/* (385) plus_num ::= INTEGER|FLOAT *\/ yytestcase(yyruleno==385);\n-      \/* (386) foreach_clause ::= *\/ yytestcase(yyruleno==386);\n-      \/* (387) foreach_clause ::= FOR EACH ROW *\/ yytestcase(yyruleno==387);\n-      \/* (388) trnm ::= nm *\/ yytestcase(yyruleno==388);\n-      \/* (389) tridxby ::= *\/ yytestcase(yyruleno==389);\n-      \/* (390) database_kw_opt ::= DATABASE *\/ yytestcase(yyruleno==390);\n-      \/* (391) database_kw_opt ::= *\/ yytestcase(yyruleno==391);\n-      \/* (392) kwcolumn_opt ::= *\/ yytestcase(yyruleno==392);\n-      \/* (393) kwcolumn_opt ::= COLUMNKW *\/ yytestcase(yyruleno==393);\n-      \/* (394) vtabarglist ::= vtabarg *\/ yytestcase(yyruleno==394);\n-      \/* (395) vtabarglist ::= vtabarglist COMMA vtabarg *\/ yytestcase(yyruleno==395);\n-      \/* (396) vtabarg ::= vtabarg vtabargtoken *\/ yytestcase(yyruleno==396);\n-      \/* (397) anylist ::= *\/ yytestcase(yyruleno==397);\n-      \/* (398) anylist ::= anylist LP anylist RP *\/ yytestcase(yyruleno==398);\n-      \/* (399) anylist ::= anylist ANY *\/ yytestcase(yyruleno==399);\n-      \/* (400) with ::= *\/ yytestcase(yyruleno==400);\n+      \/* (342) input ::= cmdlist *\/ yytestcase(yyruleno==342);\n+      \/* (343) cmdlist ::= cmdlist ecmd *\/ yytestcase(yyruleno==343);\n+      \/* (344) cmdlist ::= ecmd (OPTIMIZED OUT) *\/ assert(yyruleno!=344);\n+      \/* (345) ecmd ::= SEMI *\/ yytestcase(yyruleno==345);\n+      \/* (346) ecmd ::= cmdx SEMI *\/ yytestcase(yyruleno==346);\n+      \/* (347) ecmd ::= explain cmdx SEMI (NEVER REDUCES) *\/ assert(yyruleno!=347);\n+      \/* (348) trans_opt ::= *\/ yytestcase(yyruleno==348);\n+      \/* (349) trans_opt ::= TRANSACTION *\/ yytestcase(yyruleno==349);\n+      \/* (350) trans_opt ::= TRANSACTION nm *\/ yytestcase(yyruleno==350);\n+      \/* (351) savepoint_opt ::= SAVEPOINT *\/ yytestcase(yyruleno==351);\n+      \/* (352) savepoint_opt ::= *\/ yytestcase(yyruleno==352);\n+      \/* (353) cmd ::= create_table create_table_args *\/ yytestcase(yyruleno==353);\n+      \/* (354) table_option_set ::= table_option (OPTIMIZED OUT) *\/ assert(yyruleno!=354);\n+      \/* (355) columnlist ::= columnlist COMMA columnname carglist *\/ yytestcase(yyruleno==355);\n+      \/* (356) columnlist ::= columnname carglist *\/ yytestcase(yyruleno==356);\n+      \/* (357) nm ::= ID|INDEXED *\/ yytestcase(yyruleno==357);\n+      \/* (358) nm ::= STRING *\/ yytestcase(yyruleno==358);\n+      \/* (359) nm ::= JOIN_KW *\/ yytestcase(yyruleno==359);\n+      \/* (360) typetoken ::= typename *\/ yytestcase(yyruleno==360);\n+      \/* (361) typename ::= ID|STRING *\/ yytestcase(yyruleno==361);\n+      \/* (362) signed ::= plus_num (OPTIMIZED OUT) *\/ assert(yyruleno!=362);\n+      \/* (363) signed ::= minus_num (OPTIMIZED OUT) *\/ assert(yyruleno!=363);\n+      \/* (364) carglist ::= carglist ccons *\/ yytestcase(yyruleno==364);\n+      \/* (365) carglist ::= *\/ yytestcase(yyruleno==365);\n+      \/* (366) ccons ::= NULL onconf *\/ yytestcase(yyruleno==366);\n+      \/* (367) ccons ::= GENERATED ALWAYS AS generated *\/ yytestcase(yyruleno==367);\n+      \/* (368) ccons ::= AS generated *\/ yytestcase(yyruleno==368);\n+      \/* (369) conslist_opt ::= COMMA conslist *\/ yytestcase(yyruleno==369);\n+      \/* (370) conslist ::= conslist tconscomma tcons *\/ yytestcase(yyruleno==370);\n+      \/* (371) conslist ::= tcons (OPTIMIZED OUT) *\/ assert(yyruleno!=371);\n+      \/* (372) tconscomma ::= *\/ yytestcase(yyruleno==372);\n+      \/* (373) defer_subclause_opt ::= defer_subclause (OPTIMIZED OUT) *\/ assert(yyruleno!=373);\n+      \/* (374) resolvetype ::= raisetype (OPTIMIZED OUT) *\/ assert(yyruleno!=374);\n+      \/* (375) selectnowith ::= oneselect (OPTIMIZED OUT) *\/ assert(yyruleno!=375);\n+      \/* (376) oneselect ::= values *\/ yytestcase(yyruleno==376);\n+      \/* (377) sclp ::= selcollist COMMA *\/ yytestcase(yyruleno==377);\n+      \/* (378) as ::= ID|STRING *\/ yytestcase(yyruleno==378);\n+      \/* (379) indexed_opt ::= indexed_by (OPTIMIZED OUT) *\/ assert(yyruleno!=379);\n+      \/* (380) returning ::= *\/ yytestcase(yyruleno==380);\n+      \/* (381) expr ::= term (OPTIMIZED OUT) *\/ assert(yyruleno!=381);\n+      \/* (382) likeop ::= LIKE_KW|MATCH *\/ yytestcase(yyruleno==382);\n+      \/* (383) exprlist ::= nexprlist *\/ yytestcase(yyruleno==383);\n+      \/* (384) nmnum ::= plus_num (OPTIMIZED OUT) *\/ assert(yyruleno!=384);\n+      \/* (385) nmnum ::= nm (OPTIMIZED OUT) *\/ assert(yyruleno!=385);\n+      \/* (386) nmnum ::= ON *\/ yytestcase(yyruleno==386);\n+      \/* (387) nmnum ::= DELETE *\/ yytestcase(yyruleno==387);\n+      \/* (388) nmnum ::= DEFAULT *\/ yytestcase(yyruleno==388);\n+      \/* (389) plus_num ::= INTEGER|FLOAT *\/ yytestcase(yyruleno==389);\n+      \/* (390) foreach_clause ::= *\/ yytestcase(yyruleno==390);\n+      \/* (391) foreach_clause ::= FOR EACH ROW *\/ yytestcase(yyruleno==391);\n+      \/* (392) trnm ::= nm *\/ yytestcase(yyruleno==392);\n+      \/* (393) tridxby ::= *\/ yytestcase(yyruleno==393);\n+      \/* (394) database_kw_opt ::= DATABASE *\/ yytestcase(yyruleno==394);\n+      \/* (395) database_kw_opt ::= *\/ yytestcase(yyruleno==395);\n+      \/* (396) kwcolumn_opt ::= *\/ yytestcase(yyruleno==396);\n+      \/* (397) kwcolumn_opt ::= COLUMNKW *\/ yytestcase(yyruleno==397);\n+      \/* (398) vtabarglist ::= vtabarg *\/ yytestcase(yyruleno==398);\n+      \/* (399) vtabarglist ::= vtabarglist COMMA vtabarg *\/ yytestcase(yyruleno==399);\n+      \/* (400) vtabarg ::= vtabarg vtabargtoken *\/ yytestcase(yyruleno==400);\n+      \/* (401) anylist ::= *\/ yytestcase(yyruleno==401);\n+      \/* (402) anylist ::= anylist LP anylist RP *\/ yytestcase(yyruleno==402);\n+      \/* (403) anylist ::= anylist ANY *\/ yytestcase(yyruleno==403);\n+      \/* (404) with ::= *\/ yytestcase(yyruleno==404);\n@@ -165626,0 +169746,3 @@\n+      }else if( z[1]=='>' ){\n+        *tokenType = TK_PTR;\n+        return 2 + (z[2]=='>');\n@@ -165895,5 +170018,1 @@\n-** Run the parser on the given SQL string.  The parser structure is\n-** passed in.  An SQLITE_ status code is returned.  If an error occurs\n-** then an and attempt is made to write an error message into\n-** memory obtained from sqlite3_malloc() and to make *pzErrMsg point to that\n-** error message.\n+** Run the parser on the given SQL string.\n@@ -165901,1 +170020,1 @@\n-SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){\n+SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql){\n@@ -165922,1 +170041,0 @@\n-  assert( pzErrMsg!=0 );\n@@ -165952,0 +170070,1 @@\n+      pParse->nErr++;\n@@ -165965,0 +170084,1 @@\n+        pParse->nErr++;\n@@ -165994,1 +170114,4 @@\n-        sqlite3ErrorMsg(pParse, \"unrecognized token: \\\"%.*s\\\"\", n, zSql);\n+        Token x;\n+        x.z = zSql;\n+        x.n = n;\n+        sqlite3ErrorMsg(pParse, \"unrecognized token: \\\"%T\\\"\", &x);\n@@ -166022,9 +170145,5 @@\n-  if( pParse->rc!=SQLITE_OK && pParse->rc!=SQLITE_DONE && pParse->zErrMsg==0 ){\n-    pParse->zErrMsg = sqlite3MPrintf(db, \"%s\", sqlite3ErrStr(pParse->rc));\n-  }\n-  assert( pzErrMsg!=0 );\n-  if( pParse->zErrMsg ){\n-    *pzErrMsg = pParse->zErrMsg;\n-    sqlite3_log(pParse->rc, \"%s in \\\"%s\\\"\",\n-                *pzErrMsg, pParse->zTail);\n-    pParse->zErrMsg = 0;\n+  if( pParse->zErrMsg || (pParse->rc!=SQLITE_OK && pParse->rc!=SQLITE_DONE) ){\n+    if( pParse->zErrMsg==0 ){\n+      pParse->zErrMsg = sqlite3MPrintf(db, \"%s\", sqlite3ErrStr(pParse->rc));\n+    }\n+    sqlite3_log(pParse->rc, \"%s in \\\"%s\\\"\", pParse->zErrMsg, pParse->zTail);\n@@ -166034,11 +170153,0 @@\n-  if( pParse->pVdbe && pParse->nErr>0 && pParse->nested==0 ){\n-    sqlite3VdbeDelete(pParse->pVdbe);\n-    pParse->pVdbe = 0;\n-  }\n-#ifndef SQLITE_OMIT_SHARED_CACHE\n-  if( pParse->nested==0 ){\n-    sqlite3DbFree(db, pParse->aTableLock);\n-    pParse->aTableLock = 0;\n-    pParse->nTableLock = 0;\n-  }\n-#endif\n@@ -166049,1 +170157,1 @@\n-  if( !IN_SPECIAL_PARSE ){\n+  if( pParse->pNewTable && !IN_SPECIAL_PARSE ){\n@@ -166056,1 +170164,1 @@\n-  if( !IN_RENAME_OBJECT ){\n+  if( pParse->pNewTrigger && !IN_RENAME_OBJECT ){\n@@ -166059,1 +170167,1 @@\n-  sqlite3DbFree(db, pParse->pVList);\n+  if( pParse->pVList ) sqlite3DbFreeNN(db, pParse->pVList);\n@@ -166641,3 +170749,0 @@\n-#ifdef SQLITE_ENABLE_JSON1\n-SQLITE_PRIVATE int sqlite3Json1Init(sqlite3*);\n-#endif\n@@ -166678,2 +170783,2 @@\n-#ifdef SQLITE_ENABLE_JSON1\n-  sqlite3Json1Init,\n+#if !defined(SQLITE_OMIT_VIRTUALTABLE) && !defined(SQLITE_OMIT_JSON)\n+  sqlite3JsonTableFunctions,\n@@ -169188,0 +173293,13 @@\n+\/*\n+** Return the byte offset of the most recent error\n+*\/\n+SQLITE_API int sqlite3_error_offset(sqlite3 *db){\n+  int iOffset = -1;\n+  if( db && sqlite3SafetyCheckSickOrOk(db) && db->errCode ){\n+    sqlite3_mutex_enter(db->mutex);\n+    iOffset = db->errByteOffset;\n+    sqlite3_mutex_leave(db->mutex);\n+  }\n+  return iOffset;\n+}\n+\n@@ -170610,2 +174728,6 @@\n-      \/* MSVC is picky about pulling func ptrs from va lists.\n-      ** http:\/\/support.microsoft.com\/kb\/47961\n+      \/* A bug in MSVC prevents it from understanding pointers to functions\n+      ** types in the second argument to va_arg().  Work around the problem\n+      ** using a typedef.\n+      ** http:\/\/support.microsoft.com\/kb\/47961  <-- dead hyperlink\n+      ** Search at http:\/\/web.archive.org\/ to find the 2015-03-16 archive\n+      ** of the link above to see the original text.\n@@ -170614,2 +174736,2 @@\n-      typedef int(*TESTCALLBACKFUNC_t)(int);\n-      sqlite3GlobalConfig.xTestCallback = va_arg(ap, TESTCALLBACKFUNC_t);\n+      typedef int(*sqlite3FaultFuncType)(int);\n+      sqlite3GlobalConfig.xTestCallback = va_arg(ap, sqlite3FaultFuncType);\n@@ -170674,0 +174796,22 @@\n+#if defined(SQLITE_DEBUG)\n+      \/* Invoke these debugging routines so that the compiler does not\n+      ** issue \"defined but not used\" warnings. *\/\n+      if( x==9999 ){\n+        sqlite3ShowExpr(0);\n+        sqlite3ShowExpr(0);\n+        sqlite3ShowExprList(0);\n+        sqlite3ShowIdList(0);\n+        sqlite3ShowSrcList(0);\n+        sqlite3ShowWith(0);\n+        sqlite3ShowUpsert(0);\n+        sqlite3ShowTriggerStep(0);\n+        sqlite3ShowTriggerStepList(0);\n+        sqlite3ShowTrigger(0);\n+        sqlite3ShowTriggerList(0);\n+#ifndef SQLITE_OMIT_WINDOWFUNC\n+        sqlite3ShowWindow(0);\n+        sqlite3ShowWinFunc(0);\n+#endif\n+        sqlite3ShowSelect(0);\n+      }\n+#endif\n@@ -170742,1 +174886,9 @@\n-    \/*   sqlite3_test_control(SQLITE_TESTCTRL_LOCALTIME_FAULT, int onoff);\n+    \/*   sqlite3_test_control(SQLITE_TESTCTRL_LOCALTIME_FAULT, onoff, xAlt);\n+    **\n+    ** If parameter onoff is 1, subsequent calls to localtime() fail.\n+    ** If 2, then invoke xAlt() instead of localtime().  If 0, normal\n+    ** processing.\n+    **\n+    ** xAlt arguments are void pointers, but they really want to be:\n+    **\n+    **    int xAlt(const time_t*, struct tm*);\n@@ -170744,2 +174896,2 @@\n-    ** If parameter onoff is non-zero, subsequent calls to localtime()\n-    ** and its variants fail. If onoff is zero, undo this setting.\n+    ** xAlt should write results in to struct tm object of its 2nd argument\n+    ** and return zero on success, or return non-zero on failure.\n@@ -170749,0 +174901,6 @@\n+      if( sqlite3GlobalConfig.bLocaltimeFault==2 ){\n+        typedef int(*sqlite3LocaltimeType)(const void*,void*);\n+        sqlite3GlobalConfig.xAltLocaltime = va_arg(ap, sqlite3LocaltimeType);\n+      }else{\n+        sqlite3GlobalConfig.xAltLocaltime = 0;\n+      }\n@@ -170921,2 +175079,2 @@\n-    **   op==0       Store the current sqlite3SelectTrace in *ptr\n-    **   op==1       Set sqlite3SelectTrace to the value *ptr\n+    **   op==0       Store the current sqlite3TreeTrace in *ptr\n+    **   op==1       Set sqlite3TreeTrace to the value *ptr\n@@ -170930,4 +175088,4 @@\n-         case 0:   *ptr = sqlite3SelectTrace;      break;\n-         case 1:   sqlite3SelectTrace = *ptr;      break;\n-         case 2:   *ptr = sqlite3WhereTrace;       break;\n-         case 3:   sqlite3WhereTrace = *ptr;       break;\n+         case 0:   *ptr = sqlite3TreeTrace;      break;\n+         case 1:   sqlite3TreeTrace = *ptr;      break;\n+         case 2:   *ptr = sqlite3WhereTrace;     break;\n+         case 3:   sqlite3WhereTrace = *ptr;     break;\n@@ -170938,0 +175096,22 @@\n+    \/* sqlite3_test_control(SQLITE_TESTCTRL_LOGEST,\n+    **      double fIn,     \/\/ Input value\n+    **      int *pLogEst,   \/\/ sqlite3LogEstFromDouble(fIn)\n+    **      u64 *pInt,      \/\/ sqlite3LogEstToInt(*pLogEst)\n+    **      int *pLogEst2   \/\/ sqlite3LogEst(*pInt)\n+    ** );\n+    **\n+    ** Test access for the LogEst conversion routines.\n+    *\/\n+    case SQLITE_TESTCTRL_LOGEST: {\n+      double rIn = va_arg(ap, double);\n+      LogEst rLogEst = sqlite3LogEstFromDouble(rIn);\n+      int *pI1 = va_arg(ap,int*);\n+      u64 *pU64 = va_arg(ap,u64*);\n+      int *pI2 = va_arg(ap,int*);\n+      *pI1 = rLogEst;\n+      *pU64 = sqlite3LogEstToInt(rLogEst);\n+      *pI2 = sqlite3LogEst(*pU64);\n+      break;\n+    }\n+\n+\n@@ -171148,0 +175328,18 @@\n+\/*\n+** Return the name of the N-th database schema.  Return NULL if N is out\n+** of range.\n+*\/\n+SQLITE_API const char *sqlite3_db_name(sqlite3 *db, int N){\n+#ifdef SQLITE_ENABLE_API_ARMOR\n+  if( !sqlite3SafetyCheckOk(db) ){\n+    (void)SQLITE_MISUSE_BKPT;\n+    return 0;\n+  }\n+#endif\n+  if( N<0 || N>=db->nDb ){\n+    return 0;\n+  }else{\n+    return db->aDb[N].zDbSName;\n+  }\n+}\n+\n@@ -172835,1 +177033,1 @@\n-  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/\n+  i64 nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/\n@@ -172918,1 +177116,1 @@\n-SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3*, Fts3Hash *);\n+SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3*, Fts3Hash *, void(*xDestroy)(void*));\n@@ -172951,0 +177149,6 @@\n+typedef struct Fts3HashWrapper Fts3HashWrapper;\n+struct Fts3HashWrapper {\n+  Fts3Hash hash;                  \/* Hash table *\/\n+  int nRef;                       \/* Number of pointers to this object *\/\n+};\n+\n@@ -173815,1 +178019,1 @@\n-  Fts3Hash *pHash = (Fts3Hash *)pAux;\n+  Fts3Hash *pHash = &((Fts3HashWrapper*)pAux)->hash;\n@@ -175525,1 +179729,1 @@\n-    pTS->aaOutput[0] = sqlite3_malloc(nDoclist + FTS3_VARINT_MAX + 1);\n+    pTS->aaOutput[0] = sqlite3_malloc64((i64)nDoclist + FTS3_VARINT_MAX + 1);\n@@ -176650,3 +180854,6 @@\n-  Fts3Hash *pHash = (Fts3Hash *)p;\n-  sqlite3Fts3HashClear(pHash);\n-  sqlite3_free(pHash);\n+  Fts3HashWrapper *pHash = (Fts3HashWrapper *)p;\n+  pHash->nRef--;\n+  if( pHash->nRef<=0 ){\n+    sqlite3Fts3HashClear(&pHash->hash);\n+    sqlite3_free(pHash);\n+  }\n@@ -176682,1 +180889,1 @@\n-  Fts3Hash *pHash = 0;\n+  Fts3HashWrapper *pHash = 0;\n@@ -176710,1 +180917,1 @@\n-  pHash = sqlite3_malloc(sizeof(Fts3Hash));\n+  pHash = sqlite3_malloc(sizeof(Fts3HashWrapper));\n@@ -176714,1 +180921,2 @@\n-    sqlite3Fts3HashInit(pHash, FTS3_HASH_STRING, 1);\n+    sqlite3Fts3HashInit(&pHash->hash, FTS3_HASH_STRING, 1);\n+    pHash->nRef = 0;\n@@ -176719,2 +180927,2 @@\n-    if( sqlite3Fts3HashInsert(pHash, \"simple\", 7, (void *)pSimple)\n-     || sqlite3Fts3HashInsert(pHash, \"porter\", 7, (void *)pPorter)\n+    if( sqlite3Fts3HashInsert(&pHash->hash, \"simple\", 7, (void *)pSimple)\n+     || sqlite3Fts3HashInsert(&pHash->hash, \"porter\", 7, (void *)pPorter)\n@@ -176723,1 +180931,1 @@\n-     || sqlite3Fts3HashInsert(pHash, \"unicode61\", 10, (void *)pUnicode)\n+     || sqlite3Fts3HashInsert(&pHash->hash, \"unicode61\", 10, (void *)pUnicode)\n@@ -176726,1 +180934,1 @@\n-     || (pIcu && sqlite3Fts3HashInsert(pHash, \"icu\", 4, (void *)pIcu))\n+     || (pIcu && sqlite3Fts3HashInsert(&pHash->hash, \"icu\", 4, (void *)pIcu))\n@@ -176735,1 +180943,1 @@\n-    rc = sqlite3Fts3ExprInitTestInterface(db, pHash);\n+    rc = sqlite3Fts3ExprInitTestInterface(db, &pHash->hash);\n@@ -176744,1 +180952,1 @@\n-   && SQLITE_OK==(rc = sqlite3Fts3InitHashTable(db, pHash, \"fts3_tokenizer\"))\n+   && SQLITE_OK==(rc=sqlite3Fts3InitHashTable(db,&pHash->hash,\"fts3_tokenizer\"))\n@@ -176751,0 +180959,1 @@\n+    pHash->nRef++;\n@@ -176755,0 +180964,1 @@\n+      pHash->nRef++;\n@@ -176756,1 +180966,1 @@\n-          db, \"fts4\", &fts3Module, (void *)pHash, 0\n+          db, \"fts4\", &fts3Module, (void *)pHash, hashDestroy\n@@ -176760,1 +180970,2 @@\n-      rc = sqlite3Fts3InitTok(db, (void *)pHash);\n+      pHash->nRef++;\n+      rc = sqlite3Fts3InitTok(db, (void *)pHash, hashDestroy);\n@@ -176769,1 +180980,1 @@\n-    sqlite3Fts3HashClear(pHash);\n+    sqlite3Fts3HashClear(&pHash->hash);\n@@ -176938,2 +181149,1 @@\n-\n-  assert( pPhrase->doclist.bFreeList==0 );\n+  char *aFree = (pPhrase->doclist.bFreeList ? pPhrase->doclist.pList : 0);\n@@ -176953,0 +181163,1 @@\n+        sqlite3_free(aFree);\n@@ -176973,0 +181184,1 @@\n+          sqlite3_free(aFree);\n@@ -177005,1 +181217,1 @@\n-      aOut = (char *)sqlite3_malloc(nPoslist+8);\n+      aOut = (char *)sqlite3Fts3MallocZero(nPoslist+FTS3_BUFFER_PADDING);\n@@ -177012,0 +181224,1 @@\n+      assert( p1 && p2 );\n@@ -177024,0 +181237,1 @@\n+  if( pPhrase->doclist.pList!=aFree ) sqlite3_free(aFree);\n@@ -177372,1 +181586,1 @@\n-        char *aDoclist = sqlite3_malloc(nByte+FTS3_BUFFER_PADDING);\n+        char *aDoclist = sqlite3_malloc64((i64)nByte+FTS3_BUFFER_PADDING);\n@@ -178198,3 +182412,3 @@\n-        if( pCsr->pDeferred\n-         && (pExpr->iDocid==pCsr->iPrevId || pExpr->bDeferred)\n-        ){\n+        if( pCsr->pDeferred && (pExpr->bDeferred || (\n+            pExpr->iDocid==pCsr->iPrevId && pExpr->pPhrase->doclist.pList\n+        ))){\n@@ -178202,1 +182416,0 @@\n-          assert( pExpr->bDeferred || pPhrase->doclist.bFreeList==0 );\n@@ -181609,1 +185822,1 @@\n-        pNew = sqlite3_realloc(c->zToken, c->nAllocated);\n+        pNew = sqlite3_realloc64(c->zToken, c->nAllocated);\n@@ -182361,1 +186574,1 @@\n-        pNew = sqlite3_realloc(c->pToken, c->nTokenAllocated);\n+        pNew = sqlite3_realloc64(c->pToken, c->nTokenAllocated);\n@@ -182833,1 +187046,1 @@\n-SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){\n+SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash, void(*xDestroy)(void*)){\n@@ -182862,1 +187075,3 @@\n-  rc = sqlite3_create_module(db, \"fts3tokenize\", &fts3tok_module, (void*)pHash);\n+  rc = sqlite3_create_module_v2(\n+      db, \"fts3tokenize\", &fts3tok_module, (void*)pHash, xDestroy\n+  );\n@@ -183521,1 +187736,1 @@\n-    p = sqlite3_malloc(sizeof(*p) + 100);\n+    p = sqlite3_malloc64(sizeof(*p) + 100);\n@@ -183530,2 +187745,2 @@\n-    int nNew = p->nSpace * 2;\n-    p = sqlite3_realloc(p, sizeof(*p) + nNew);\n+    i64 nNew = p->nSpace * 2;\n+    p = sqlite3_realloc64(p, sizeof(*p) + nNew);\n@@ -183537,1 +187752,1 @@\n-    p->nSpace = nNew;\n+    p->nSpace = (int)nNew;\n@@ -184094,1 +188309,1 @@\n-      char *aByte = sqlite3_malloc(nByte + FTS3_NODE_PADDING);\n+      char *aByte = sqlite3_malloc64((i64)nByte + FTS3_NODE_PADDING);\n@@ -184211,1 +188426,1 @@\n-          pReader->zTerm = (char*)sqlite3_malloc((nTerm+1)*2);\n+          pReader->zTerm = (char*)sqlite3_malloc64(((i64)nTerm+1)*2);\n@@ -184219,1 +188434,1 @@\n-        aCopy = (char*)sqlite3_malloc(nCopy);\n+        aCopy = (char*)sqlite3_malloc64(nCopy);\n@@ -184506,1 +188721,1 @@\n-  pReader = (Fts3SegReader *)sqlite3_malloc(sizeof(Fts3SegReader) + nExtra);\n+  pReader = (Fts3SegReader *)sqlite3_malloc64(sizeof(Fts3SegReader) + nExtra);\n@@ -184598,1 +188813,1 @@\n-          aElem2 = (Fts3HashElem **)sqlite3_realloc(\n+          aElem2 = (Fts3HashElem **)sqlite3_realloc64(\n@@ -184932,1 +189147,1 @@\n-        pTree->aData = (char *)sqlite3_malloc(nReq);\n+        pTree->aData = (char *)sqlite3_malloc64(nReq);\n@@ -184950,1 +189165,1 @@\n-          char *zNew = sqlite3_realloc(pTree->zMalloc, nTerm*2);\n+          char *zNew = sqlite3_realloc64(pTree->zMalloc, (i64)nTerm*2);\n@@ -184976,1 +189191,1 @@\n-  pNew = (SegmentNode *)sqlite3_malloc(sizeof(SegmentNode) + p->nNodeSize);\n+  pNew = (SegmentNode *)sqlite3_malloc64(sizeof(SegmentNode) + p->nNodeSize);\n@@ -185114,1 +189329,1 @@\n-  int nReq;                       \/* Number of bytes required on leaf page *\/\n+  i64 nReq;                       \/* Number of bytes required on leaf page *\/\n@@ -185123,1 +189338,1 @@\n-    pWriter = (SegmentWriter *)sqlite3_malloc(sizeof(SegmentWriter));\n+    pWriter = (SegmentWriter *)sqlite3_malloc64(sizeof(SegmentWriter));\n@@ -185129,1 +189344,1 @@\n-    pWriter->aData = (char *)sqlite3_malloc(p->nNodeSize);\n+    pWriter->aData = (char *)sqlite3_malloc64(p->nNodeSize);\n@@ -185204,1 +189419,1 @@\n-    char *aNew = sqlite3_realloc(pWriter->aData, nReq);\n+    char *aNew = sqlite3_realloc64(pWriter->aData, nReq);\n@@ -185229,1 +189444,1 @@\n-      char *zNew = sqlite3_realloc(pWriter->zMalloc, nTerm*2);\n+      char *zNew = sqlite3_realloc64(pWriter->zMalloc, (i64)nTerm*2);\n@@ -185537,1 +189752,1 @@\n-  int nList\n+  i64 nList\n@@ -185542,1 +189757,1 @@\n-    pNew = (char *)sqlite3_realloc(pMsr->aBuffer, pMsr->nBuffer);\n+    pNew = (char *)sqlite3_realloc64(pMsr->aBuffer, pMsr->nBuffer);\n@@ -185598,1 +189813,1 @@\n-        rc = fts3MsrBufferData(pMsr, pList, nList+1);\n+        rc = fts3MsrBufferData(pMsr, pList, (i64)nList+1);\n@@ -185735,1 +189950,1 @@\n-static int fts3GrowSegReaderBuffer(Fts3MultiSegReader *pCsr, int nReq){\n+static int fts3GrowSegReaderBuffer(Fts3MultiSegReader *pCsr, i64 nReq){\n@@ -185739,1 +189954,1 @@\n-    aNew = sqlite3_realloc(pCsr->aBuffer, pCsr->nBuffer);\n+    aNew = sqlite3_realloc64(pCsr->aBuffer, pCsr->nBuffer);\n@@ -185830,1 +190045,2 @@\n-        rc = fts3MsrBufferData(pCsr, apSegment[0]->aDoclist, pCsr->nDoclist);\n+        rc = fts3MsrBufferData(pCsr, apSegment[0]->aDoclist,\n+                               (i64)pCsr->nDoclist);\n@@ -185883,1 +190099,2 @@\n-          rc = fts3GrowSegReaderBuffer(pCsr, nByte+nDoclist+FTS3_NODE_PADDING);\n+          rc = fts3GrowSegReaderBuffer(pCsr,\n+                                   (i64)nByte+nDoclist+FTS3_NODE_PADDING);\n@@ -185909,1 +190126,1 @@\n-        rc = fts3GrowSegReaderBuffer(pCsr, nDoclist+FTS3_NODE_PADDING);\n+        rc = fts3GrowSegReaderBuffer(pCsr, (i64)nDoclist+FTS3_NODE_PADDING);\n@@ -186622,1 +190839,1 @@\n-    char *a = (char *)sqlite3_realloc(pBlob->a, nAlloc);\n+    char *a = (char *)sqlite3_realloc64(pBlob->a, nAlloc);\n@@ -186771,0 +190988,2 @@\n+        assert( nPrefix+nSuffix<=nTerm );\n+        assert( nPrefix>=0 );\n@@ -186893,0 +191112,1 @@\n+  if(nSuffix<=0 ) return FTS_CORRUPT_VTAB;\n@@ -187416,1 +191636,1 @@\n-        aNew = sqlite3_realloc(aIdx, nAlloc*sizeof(int));\n+        aNew = sqlite3_realloc64(aIdx, nAlloc*sizeof(int));\n@@ -187790,1 +192010,1 @@\n-  pWriter = (IncrmergeWriter *)sqlite3_malloc(nAlloc);\n+  pWriter = (IncrmergeWriter *)sqlite3_malloc64(nAlloc);\n@@ -188426,1 +192646,1 @@\n-  pRet = (char *)sqlite3_malloc(p->pList->nData);\n+  pRet = (char *)sqlite3_malloc64(p->pList->nData);\n@@ -188446,1 +192666,1 @@\n-  pDeferred = sqlite3_malloc(sizeof(*pDeferred));\n+  pDeferred = sqlite3_malloc64(sizeof(*pDeferred));\n@@ -191221,1 +195441,1 @@\n-\/************** Begin file json1.c *******************************************\/\n+\/************** Begin file json.c ********************************************\/\n@@ -191234,2 +195454,1 @@\n-** This SQLite extension implements JSON functions.  The interface is\n-** modeled after MySQL JSON functions:\n+** This SQLite JSON functions.\n@@ -191237,1 +195456,2 @@\n-**     https:\/\/dev.mysql.com\/doc\/refman\/5.7\/en\/json.html\n+** This file began as an extension in ext\/misc\/json1.c in 2015.  That\n+** extension proved so useful that it has now been moved into the core.\n@@ -191245,42 +195465,2 @@\n-#if !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_JSON1)\n-#if !defined(SQLITEINT_H)\n-\/* #include \"sqlite3ext.h\" *\/\n-#endif\n-SQLITE_EXTENSION_INIT1\n-\/* #include <assert.h> *\/\n-\/* #include <string.h> *\/\n-\/* #include <stdlib.h> *\/\n-\/* #include <stdarg.h> *\/\n-\n-\/* Mark a function parameter as unused, to suppress nuisance compiler\n-** warnings. *\/\n-#ifndef UNUSED_PARAM\n-# define UNUSED_PARAM(X)  (void)(X)\n-#endif\n-\n-#ifndef LARGEST_INT64\n-# define LARGEST_INT64  (0xffffffff|(((sqlite3_int64)0x7fffffff)<<32))\n-# define SMALLEST_INT64 (((sqlite3_int64)-1) - LARGEST_INT64)\n-#endif\n-\n-#ifndef deliberate_fall_through\n-# define deliberate_fall_through\n-#endif\n-\n-\/*\n-** Versions of isspace(), isalnum() and isdigit() to which it is safe\n-** to pass signed char values.\n-*\/\n-#ifdef sqlite3Isdigit\n-   \/* Use the SQLite core versions if this routine is part of the\n-   ** SQLite amalgamation *\/\n-#  define safe_isdigit(x)  sqlite3Isdigit(x)\n-#  define safe_isalnum(x)  sqlite3Isalnum(x)\n-#  define safe_isxdigit(x) sqlite3Isxdigit(x)\n-#else\n-   \/* Use the standard library for separate compilation *\/\n-#include <ctype.h>  \/* amalgamator: keep *\/\n-#  define safe_isdigit(x)  isdigit((unsigned char)(x))\n-#  define safe_isalnum(x)  isalnum((unsigned char)(x))\n-#  define safe_isxdigit(x) isxdigit((unsigned char)(x))\n-#endif\n+#ifndef SQLITE_OMIT_JSON\n+\/* #include \"sqliteInt.h\" *\/\n@@ -191311,1 +195491,1 @@\n-#define safe_isspace(x) (jsonIsSpace[(unsigned char)x])\n+#define fast_isspace(x) (jsonIsSpace[(unsigned char)x])\n@@ -191313,22 +195493,0 @@\n-#ifndef SQLITE_AMALGAMATION\n-  \/* Unsigned integer types.  These are already defined in the sqliteInt.h,\n-  ** but the definitions need to be repeated for separate compilation. *\/\n-  typedef sqlite3_uint64 u64;\n-  typedef unsigned int u32;\n-  typedef unsigned short int u16;\n-  typedef unsigned char u8;\n-# if defined(SQLITE_COVERAGE_TEST) || defined(SQLITE_MUTATION_TEST)\n-#   define SQLITE_OMIT_AUXILIARY_SAFETY_CHECKS 1\n-# endif\n-# if defined(SQLITE_OMIT_AUXILIARY_SAFETY_CHECKS)\n-#   define ALWAYS(X)      (1)\n-#   define NEVER(X)       (0)\n-# elif !defined(NDEBUG)\n-#   define ALWAYS(X)      ((X)?1:(assert(0),0))\n-#   define NEVER(X)       ((X)?(assert(0),1):0)\n-# else\n-#   define ALWAYS(X)      (X)\n-#   define NEVER(X)       (X)\n-# endif\n-# define testcase(X)\n-#endif\n@@ -191341,8 +195499,0 @@\n-\/*\n-** Some of the testcase() macros in this file are problematic for gcov\n-** in that they generate false-miss errors randomly.  This is a gcov problem,\n-** not a problem in this case.  But to work around it, we disable the\n-** problematic test cases for production builds.\n-*\/\n-#define json_testcase(X)\n-\n@@ -191806,4 +195956,4 @@\n-  assert( safe_isxdigit(z[0]) );\n-  assert( safe_isxdigit(z[1]) );\n-  assert( safe_isxdigit(z[2]) );\n-  assert( safe_isxdigit(z[3]) );\n+  assert( sqlite3Isxdigit(z[0]) );\n+  assert( sqlite3Isxdigit(z[1]) );\n+  assert( sqlite3Isxdigit(z[2]) );\n+  assert( sqlite3Isxdigit(z[3]) );\n@@ -192044,1 +196194,1 @@\n-  for(i=0; i<4; i++) if( !safe_isxdigit(z[i]) ) return 0;\n+  for(i=0; i<4; i++) if( !sqlite3Isxdigit(z[i]) ) return 0;\n@@ -192063,1 +196213,1 @@\n-  while( safe_isspace(z[i]) ){ i++; }\n+  while( fast_isspace(z[i]) ){ i++; }\n@@ -192069,1 +196219,1 @@\n-      while( safe_isspace(z[j]) ){ j++; }\n+      while( fast_isspace(z[j]) ){ j++; }\n@@ -192082,1 +196232,1 @@\n-      while( safe_isspace(z[j]) ){ j++; }\n+      while( fast_isspace(z[j]) ){ j++; }\n@@ -192089,1 +196239,1 @@\n-      while( safe_isspace(z[j]) ){ j++; }\n+      while( fast_isspace(z[j]) ){ j++; }\n@@ -192103,1 +196253,1 @@\n-      while( safe_isspace(z[j]) ){ j++; }\n+      while( fast_isspace(z[j]) ){ j++; }\n@@ -192112,1 +196262,1 @@\n-      while( safe_isspace(z[j]) ){ j++; }\n+      while( fast_isspace(z[j]) ){ j++; }\n@@ -192149,1 +196299,1 @@\n-         && !safe_isalnum(z[i+4]) ){\n+         && !sqlite3Isalnum(z[i+4]) ){\n@@ -192154,1 +196304,1 @@\n-         && !safe_isalnum(z[i+4]) ){\n+         && !sqlite3Isalnum(z[i+4]) ){\n@@ -192159,1 +196309,1 @@\n-         && !safe_isalnum(z[i+5]) ){\n+         && !sqlite3Isalnum(z[i+5]) ){\n@@ -192230,1 +196380,1 @@\n-    while( safe_isspace(zJson[i]) ) i++;\n+    while( fast_isspace(zJson[i]) ) i++;\n@@ -192413,0 +196563,1 @@\n+      testcase( nKey==0 );\n@@ -192417,4 +196568,4 @@\n-    }\n-    if( nKey==0 ){\n-      *pzErr = zPath;\n-      return 0;\n+      if( nKey==0 ){\n+        *pzErr = zPath;\n+        return 0;\n+      }\n@@ -192458,1 +196609,1 @@\n-    while( safe_isdigit(zPath[j]) ){\n+    while( sqlite3Isdigit(zPath[j]) ){\n@@ -192479,1 +196630,1 @@\n-        if( zPath[2]=='-' && safe_isdigit(zPath[3]) ){\n+        if( zPath[2]=='-' && sqlite3Isdigit(zPath[3]) ){\n@@ -192485,1 +196636,1 @@\n-          }while( safe_isdigit(zPath[j]) );\n+          }while( sqlite3Isdigit(zPath[j]) );\n@@ -192704,1 +196855,1 @@\n-  UNUSED_PARAM(argc);\n+  UNUSED_PARAMETER(argc);\n@@ -192725,1 +196876,1 @@\n-  UNUSED_PARAM(argc);\n+  UNUSED_PARAMETER(argc);\n@@ -192796,0 +196947,9 @@\n+\/*\n+** Bit values for the flags passed into jsonExtractFunc() or\n+** jsonSetFunc() via the user-data value.\n+*\/\n+#define JSON_JSON      0x01        \/* Result is always JSON *\/\n+#define JSON_SQL       0x02        \/* Result is always SQL *\/\n+#define JSON_ABPATH    0x03        \/* Allow abbreviated JSON path specs *\/\n+#define JSON_ISSET     0x04        \/* json_set(), not json_insert() *\/\n+\n@@ -192798,0 +196958,14 @@\n+** \"->\"(JSON,PATH)\n+** \"->>\"(JSON,PATH)\n+**\n+** Return the element described by PATH.  Return NULL if that PATH element\n+** is not found.\n+**\n+** If JSON_JSON is set or if more that one PATH argument is supplied then\n+** always return a JSON representation of the result.  If JSON_SQL is set,\n+** then always return an SQL representation of the result.  If neither flag\n+** is present and argc==2, then return JSON for objects and arrays and SQL\n+** for all other values.\n+**\n+** When multiple PATH arguments are supplied, the result is a JSON array\n+** containing the result of each PATH.\n@@ -192799,4 +196973,2 @@\n-** Return the element described by PATH.  Return NULL if there is no\n-** PATH element.  If there are multiple PATHs, then return a JSON array\n-** with the result from each path.  Throw an error if the JSON or any PATH\n-** is malformed.\n+** Abbreviated JSON path expressions are allows if JSON_ABPATH, for\n+** compatibility with PG.\n@@ -192812,0 +196984,1 @@\n+  int flags = SQLITE_PTR_TO_INT(sqlite3_user_data(ctx));\n@@ -192813,1 +196986,0 @@\n-  int i;\n@@ -192818,7 +196990,51 @@\n-  jsonInit(&jx, ctx);\n-  jsonAppendChar(&jx, '[');\n-  for(i=1; i<argc; i++){\n-    zPath = (const char*)sqlite3_value_text(argv[i]);\n-    pNode = jsonLookup(p, zPath, 0, ctx);\n-    if( p->nErr ) break;\n-    if( argc>2 ){\n+  if( argc==2 ){\n+    \/* With a single PATH argument *\/\n+    zPath = (const char*)sqlite3_value_text(argv[1]);\n+    if( zPath==0 ) return;\n+    if( flags & JSON_ABPATH ){\n+      if( zPath[0]!='$' ){\n+        \/* The -> and ->> operators accept abbreviated PATH arguments.  This\n+        ** is mostly for compatibility with PostgreSQL, but also for\n+        ** convenience.\n+        **\n+        **     NUMBER   ==>  $[NUMBER]     \/\/ PG compatible\n+        **     LABEL    ==>  $.LABEL       \/\/ PG compatible\n+        **     [NUMBER] ==>  $[NUMBER]     \/\/ Not PG.  Purely for convenience\n+        *\/\n+        jsonInit(&jx, ctx);\n+        if( sqlite3Isdigit(zPath[0]) ){\n+          jsonAppendRaw(&jx, \"$[\", 2);\n+          jsonAppendRaw(&jx, zPath, (int)strlen(zPath));\n+          jsonAppendRaw(&jx, \"]\", 2);\n+        }else{\n+          jsonAppendRaw(&jx, \"$.\", 1 + (zPath[0]!='['));\n+          jsonAppendRaw(&jx, zPath, (int)strlen(zPath));\n+          jsonAppendChar(&jx, 0);\n+        }\n+        pNode = jx.bErr ? 0 : jsonLookup(p, jx.zBuf, 0, ctx);\n+        jsonReset(&jx);\n+      }else{\n+        pNode = jsonLookup(p, zPath, 0, ctx);\n+      }\n+      if( pNode ){\n+        if( flags & JSON_JSON ){\n+          jsonReturnJson(pNode, ctx, 0);\n+        }else{\n+          jsonReturn(pNode, ctx, 0);\n+          sqlite3_result_subtype(ctx, 0);\n+        }\n+      }\n+    }else{\n+      pNode = jsonLookup(p, zPath, 0, ctx);\n+      if( p->nErr==0 && pNode ) jsonReturn(pNode, ctx, 0);\n+    }\n+  }else{\n+    \/* Two or more PATH arguments results in a JSON array with each\n+    ** element of the array being the value selected by one of the PATHs *\/\n+    int i;\n+    jsonInit(&jx, ctx);\n+    jsonAppendChar(&jx, '[');\n+    for(i=1; i<argc; i++){\n+      zPath = (const char*)sqlite3_value_text(argv[i]);\n+      pNode = jsonLookup(p, zPath, 0, ctx);\n+      if( p->nErr ) break;\n@@ -192831,2 +197047,0 @@\n-    }else if( pNode ){\n-      jsonReturn(pNode, ctx, 0);\n@@ -192834,0 +197048,6 @@\n+    if( i==argc ){\n+      jsonAppendChar(&jx, ']');\n+      jsonResult(&jx);\n+      sqlite3_result_subtype(ctx, JSON_SUBTYPE);\n+    }\n+    jsonReset(&jx);\n@@ -192835,6 +197055,0 @@\n-  if( argc>2 && i==argc ){\n-    jsonAppendChar(&jx, ']');\n-    jsonResult(&jx);\n-    sqlite3_result_subtype(ctx, JSON_SUBTYPE);\n-  }\n-  jsonReset(&jx);\n@@ -192856,1 +197070,1 @@\n-  assert( iTarget>=0 && iTarget<pParse->nNode );\n+  assert( iTarget<pParse->nNode );\n@@ -192936,1 +197150,1 @@\n-  UNUSED_PARAM(argc);\n+  UNUSED_PARAMETER(argc);\n@@ -193057,1 +197271,1 @@\n-      json_testcase( pNode->eU!=0 && pNode->eU!=1 );\n+      testcase( pNode->eU!=0 && pNode->eU!=1 );\n@@ -193073,0 +197287,1 @@\n+\n@@ -193095,1 +197310,1 @@\n-  int bIsSet = *(int*)sqlite3_user_data(ctx);\n+  int bIsSet = sqlite3_user_data(ctx)!=0;\n@@ -193114,2 +197329,2 @@\n-      json_testcase( pNode->eU!=0 && pNode->eU!=1 && pNode->eU!=4 );\n-      assert( pNode->eU!=3 || pNode->eU!=5 );\n+      testcase( pNode->eU!=0 && pNode->eU!=1 );\n+      assert( pNode->eU!=3 && pNode->eU!=5 );\n@@ -193135,2 +197350,2 @@\n-** Return the top-level \"type\" of a JSON string.  Throw an error if\n-** either the JSON or PATH inputs are not well-formed.\n+** Return the top-level \"type\" of a JSON string.  json_type() raises an\n+** error if either the JSON or PATH inputs are not well-formed.\n@@ -193172,1 +197387,1 @@\n-  UNUSED_PARAM(argc);\n+  UNUSED_PARAMETER(argc);\n@@ -193192,1 +197407,1 @@\n-  UNUSED_PARAM(argc);\n+  UNUSED_PARAMETER(argc);\n@@ -193252,2 +197467,2 @@\n-  UNUSED_PARAM(argc);\n-  UNUSED_PARAM(argv);\n+  UNUSED_PARAMETER(argc);\n+  UNUSED_PARAMETER(argv);\n@@ -193297,1 +197512,1 @@\n-  UNUSED_PARAM(argc);\n+  UNUSED_PARAMETER(argc);\n@@ -193388,4 +197603,4 @@\n-  UNUSED_PARAM(pzErr);\n-  UNUSED_PARAM(argv);\n-  UNUSED_PARAM(argc);\n-  UNUSED_PARAM(pAux);\n+  UNUSED_PARAMETER(pzErr);\n+  UNUSED_PARAMETER(argv);\n+  UNUSED_PARAMETER(argc);\n+  UNUSED_PARAMETER(pAux);\n@@ -193414,1 +197629,1 @@\n-  UNUSED_PARAM(p);\n+  UNUSED_PARAMETER(p);\n@@ -193474,1 +197689,1 @@\n-        json_testcase( pUp->eU==3 );\n+        testcase( pUp->eU==3 );\n@@ -193504,0 +197719,27 @@\n+\/* Append an object label to the JSON Path being constructed\n+** in pStr.\n+*\/\n+static void jsonAppendObjectPathElement(\n+  JsonString *pStr,\n+  JsonNode *pNode\n+){\n+  int jj, nn;\n+  const char *z;\n+  assert( pNode->eType==JSON_STRING );\n+  assert( pNode->jnFlags & JNODE_LABEL );\n+  assert( pNode->eU==1 );\n+  z = pNode->u.zJContent;\n+  nn = pNode->n;\n+  assert( nn>=2 );\n+  assert( z[0]=='\"' );\n+  assert( z[nn-1]=='\"' );\n+  if( nn>2 && sqlite3Isalpha(z[1]) ){\n+    for(jj=2; jj<nn-1 && sqlite3Isalnum(z[jj]); jj++){}\n+    if( jj==nn-1 ){\n+      z++;\n+      nn -= 2;\n+    }\n+  }\n+  jsonPrintf(nn+2, pStr, \".%.*s\", nn, z);\n+}\n+\n@@ -193528,4 +197770,1 @@\n-    assert( pNode->eType==JSON_STRING );\n-    assert( pNode->jnFlags & JNODE_LABEL );\n-    assert( pNode->eU==1 );\n-    jsonPrintf(pNode->n+1, pStr, \".%.*s\", pNode->n-2, pNode->u.zJContent+1);\n+    jsonAppendObjectPathElement(pStr, pNode);\n@@ -193602,2 +197841,1 @@\n-          assert( pThis->eU==1 );\n-          jsonPrintf(pThis->n, &x, \".%.*s\", pThis->n-2, pThis->u.zJContent+1);\n+          jsonAppendObjectPathElement(&x, pThis);\n@@ -193661,1 +197899,1 @@\n-  UNUSED_PARAM(tab);\n+  UNUSED_PARAMETER(tab);\n@@ -193717,2 +197955,2 @@\n-  UNUSED_PARAM(idxStr);\n-  UNUSED_PARAM(argc);\n+  UNUSED_PARAMETER(idxStr);\n+  UNUSED_PARAMETER(argc);\n@@ -193843,32 +198081,25 @@\n-\n-\/****************************************************************************\n-** The following routines are the only publically visible identifiers in this\n-** file.  Call the following routines in order to register the various SQL\n-** functions and the virtual table implemented by this file.\n-****************************************************************************\/\n-\n-SQLITE_PRIVATE int sqlite3Json1Init(sqlite3 *db){\n-  int rc = SQLITE_OK;\n-  unsigned int i;\n-  static const struct {\n-     const char *zName;\n-     int nArg;\n-     int flag;\n-     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);\n-  } aFunc[] = {\n-    { \"json\",                 1, 0,   jsonRemoveFunc        },\n-    { \"json_array\",          -1, 0,   jsonArrayFunc         },\n-    { \"json_array_length\",    1, 0,   jsonArrayLengthFunc   },\n-    { \"json_array_length\",    2, 0,   jsonArrayLengthFunc   },\n-    { \"json_extract\",        -1, 0,   jsonExtractFunc       },\n-    { \"json_insert\",         -1, 0,   jsonSetFunc           },\n-    { \"json_object\",         -1, 0,   jsonObjectFunc        },\n-    { \"json_patch\",           2, 0,   jsonPatchFunc         },\n-    { \"json_quote\",           1, 0,   jsonQuoteFunc         },\n-    { \"json_remove\",         -1, 0,   jsonRemoveFunc        },\n-    { \"json_replace\",        -1, 0,   jsonReplaceFunc       },\n-    { \"json_set\",            -1, 1,   jsonSetFunc           },\n-    { \"json_type\",            1, 0,   jsonTypeFunc          },\n-    { \"json_type\",            2, 0,   jsonTypeFunc          },\n-    { \"json_valid\",           1, 0,   jsonValidFunc         },\n-\n+#endif \/* !defined(SQLITE_OMIT_JSON) *\/\n+\n+\/*\n+** Register JSON functions.\n+*\/\n+SQLITE_PRIVATE void sqlite3RegisterJsonFunctions(void){\n+#ifndef SQLITE_OMIT_JSON\n+  static FuncDef aJsonFunc[] = {\n+    JFUNCTION(json,               1, 0,  jsonRemoveFunc),\n+    JFUNCTION(json_array,        -1, 0,  jsonArrayFunc),\n+    JFUNCTION(json_array_length,  1, 0,  jsonArrayLengthFunc),\n+    JFUNCTION(json_array_length,  2, 0,  jsonArrayLengthFunc),\n+    JFUNCTION(json_extract,      -1, 0,  jsonExtractFunc),\n+    JFUNCTION(->,                 2, JSON_JSON, jsonExtractFunc),\n+    JFUNCTION(->>,                2, JSON_SQL, jsonExtractFunc),\n+    JFUNCTION(json_insert,       -1, 0,  jsonSetFunc),\n+    JFUNCTION(json_object,       -1, 0,  jsonObjectFunc),\n+    JFUNCTION(json_patch,         2, 0,  jsonPatchFunc),\n+    JFUNCTION(json_quote,         1, 0,  jsonQuoteFunc),\n+    JFUNCTION(json_remove,       -1, 0,  jsonRemoveFunc),\n+    JFUNCTION(json_replace,      -1, 0,  jsonReplaceFunc),\n+    JFUNCTION(json_set,          -1, JSON_ISSET,  jsonSetFunc),\n+    JFUNCTION(json_type,          1, 0,  jsonTypeFunc),\n+    JFUNCTION(json_type,          2, 0,  jsonTypeFunc),\n+    JFUNCTION(json_valid,         1, 0,  jsonValidFunc),\n@@ -193876,4 +198107,9 @@\n-    \/* DEBUG and TESTING functions *\/\n-    { \"json_parse\",           1, 0,   jsonParseFunc         },\n-    { \"json_test1\",           1, 0,   jsonTest1Func         },\n-#endif\n+    JFUNCTION(json_parse,         1, 0,  jsonParseFunc),\n+    JFUNCTION(json_test1,         1, 0,  jsonTest1Func),\n+#endif\n+    WAGGREGATE(json_group_array,  1, 0, 0,\n+       jsonArrayStep, jsonArrayFinal, jsonArrayValue, jsonGroupInverse,\n+       SQLITE_SUBTYPE|SQLITE_UTF8|SQLITE_DETERMINISTIC|SQLITE_INNOCUOUS),\n+    WAGGREGATE(json_group_object, 2, 0, 0,\n+       jsonObjectStep, jsonObjectFinal, jsonObjectValue, jsonGroupInverse,\n+       SQLITE_SUBTYPE|SQLITE_UTF8|SQLITE_DETERMINISTIC|SQLITE_INNOCUOUS)\n@@ -193881,0 +198117,10 @@\n+  sqlite3InsertBuiltinFuncs(aJsonFunc, ArraySize(aJsonFunc));\n+#endif\n+}\n+\n+#if  !defined(SQLITE_OMIT_VIRTUALTABLE) && !defined(SQLITE_OMIT_JSON)\n+\/*\n+** Register the JSON table-valued functions\n+*\/\n+SQLITE_PRIVATE int sqlite3JsonTableFunctions(sqlite3 *db){\n+  int rc = SQLITE_OK;\n@@ -193882,15 +198128,2 @@\n-     const char *zName;\n-     int nArg;\n-     void (*xStep)(sqlite3_context*,int,sqlite3_value**);\n-     void (*xFinal)(sqlite3_context*);\n-     void (*xValue)(sqlite3_context*);\n-  } aAgg[] = {\n-    { \"json_group_array\",     1,\n-      jsonArrayStep,   jsonArrayFinal,  jsonArrayValue  },\n-    { \"json_group_object\",    2,\n-      jsonObjectStep,  jsonObjectFinal, jsonObjectValue },\n-  };\n-#ifndef SQLITE_OMIT_VIRTUALTABLE\n-  static const struct {\n-     const char *zName;\n-     sqlite3_module *pModule;\n+    const char *zName;\n+    sqlite3_module *pModule;\n@@ -193901,19 +198134,1 @@\n-#endif\n-  static const int enc =\n-       SQLITE_UTF8 |\n-       SQLITE_DETERMINISTIC |\n-       SQLITE_INNOCUOUS;\n-  for(i=0; i<sizeof(aFunc)\/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){\n-    rc = sqlite3_create_function(db, aFunc[i].zName, aFunc[i].nArg, enc,\n-                                 (void*)&aFunc[i].flag,\n-                                 aFunc[i].xFunc, 0, 0);\n-  }\n-#ifndef SQLITE_OMIT_WINDOWFUNC\n-  for(i=0; i<sizeof(aAgg)\/sizeof(aAgg[0]) && rc==SQLITE_OK; i++){\n-    rc = sqlite3_create_window_function(db, aAgg[i].zName, aAgg[i].nArg,\n-                                 SQLITE_SUBTYPE | enc, 0,\n-                                 aAgg[i].xStep, aAgg[i].xFinal,\n-                                 aAgg[i].xValue, jsonGroupInverse, 0);\n-  }\n-#endif\n-#ifndef SQLITE_OMIT_VIRTUALTABLE\n+  unsigned int i;\n@@ -193923,1 +198138,0 @@\n-#endif\n@@ -193926,0 +198140,1 @@\n+#endif \/* !defined(SQLITE_OMIT_VIRTUALTABLE) && !defined(SQLITE_OMIT_JSON) *\/\n@@ -193927,18 +198142,1 @@\n-\n-#ifndef SQLITE_CORE\n-#ifdef _WIN32\n-__declspec(dllexport)\n-#endif\n-SQLITE_API int sqlite3_json_init(\n-  sqlite3 *db,\n-  char **pzErrMsg,\n-  const sqlite3_api_routines *pApi\n-){\n-  SQLITE_EXTENSION_INIT2(pApi);\n-  (void)pzErrMsg;  \/* Unused parameter *\/\n-  return sqlite3Json1Init(db);\n-}\n-#endif\n-#endif \/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_JSON1) *\/\n-\n-\/************** End of json1.c ***********************************************\/\n+\/************** End of json.c ************************************************\/\n@@ -198378,5 +202576,1 @@\n-#ifndef JSON_NULL   \/* The following stuff repeats things found in json1 *\/\n-\/*\n-** Versions of isspace(), isalnum() and isdigit() to which it is safe\n-** to pass signed char values.\n-*\/\n+\/* Character class routines *\/\n@@ -198397,0 +202591,1 @@\n+#ifndef JSON_NULL   \/* The following stuff repeats things found in json1 *\/\n@@ -198419,1 +202614,1 @@\n-#define safe_isspace(x) (geopolyIsSpace[(unsigned char)x])\n+#define fast_isspace(x) (geopolyIsSpace[(unsigned char)x])\n@@ -198508,1 +202703,1 @@\n-  while( safe_isspace(p->z[0]) ) p->z++;\n+  while( fast_isspace(p->z[0]) ) p->z++;\n@@ -200050,1 +204245,1 @@\n-    for(jj=1; jj<pRtree->nAux; jj++){\n+    for(jj=1; jj<nData-2; jj++){\n@@ -200653,2 +204848,3 @@\n-    }else{\n-      assert(!pExpr);\n+      pExpr = sqlite3_get_auxdata(p, 0);\n+    }\n+    if( !pExpr ){\n@@ -203348,1 +207544,1 @@\n-char *rbuVacuumIndexStart(\n+static char *rbuVacuumIndexStart(\n@@ -208193,0 +212389,1 @@\n+  sqlite3VtabUsesAllSchemas(pIdxInfo);\n@@ -208370,1 +212567,1 @@\n-  if( pgno<1 || pBt==0 || pgno>(int)sqlite3BtreeLastPage(pBt) ){\n+  if( pgno<1 || pBt==0 || pgno>sqlite3BtreeLastPage(pBt) ){\n@@ -220920,0 +225117,3 @@\n+      assert( pParse!=0 );\n+      assert( pParse->apPhrase!=0 );\n+      assert( pParse->nPhrase>=2 );\n@@ -223219,1 +227419,1 @@\n-  sqlite3_stmt *pIdxDeleter;      \/* \"DELETE FROM %_idx WHERE segid=? *\/\n+  sqlite3_stmt *pIdxDeleter;      \/* \"DELETE FROM %_idx WHERE segid=?\" *\/\n@@ -228488,1 +232688,1 @@\n-    if( nToken ) memcpy(&buf.p[1], pToken, nToken);\n+    if( nToken>0 ) memcpy(&buf.p[1], pToken, nToken);\n@@ -230547,1 +234747,1 @@\n-    CsrFlagSet(pCsr, FTS5CSR_EOF);\n+    CsrFlagSet(pCsr, FTS5CSR_EOF|FTS5CSR_REQUIRE_CONTENT);\n@@ -232536,1 +236736,1 @@\n-  sqlite3_result_text(pCtx, \"fts5: 2022-01-06 13:25:41 872ba256cbf61d9290b571c0e6d82a20c224ca3ad82971edc46b29818d5d17a0\", -1, SQLITE_TRANSIENT);\n+  sqlite3_result_text(pCtx, \"fts5: 2022-09-29 15:55:41 a29f9949895322123f7c38fbe94c649a9d6e6c9cd0c3b41c96d694552f26b309\", -1, SQLITE_TRANSIENT);\n@@ -237207,0 +241407,10 @@\n+\n+#define STMT_NUM_INTEGER_COLUMN 10\n+typedef struct StmtRow StmtRow;\n+struct StmtRow {\n+  sqlite3_int64 iRowid;                \/* Rowid value *\/\n+  char *zSql;                          \/* column \"sql\" *\/\n+  int aCol[STMT_NUM_INTEGER_COLUMN+1]; \/* all other column values *\/\n+  StmtRow *pNext;                      \/* Next row to return *\/\n+};\n+\n@@ -237224,2 +241434,1 @@\n-  sqlite3_stmt *pStmt;       \/* Statement cursor is currently pointing at *\/\n-  sqlite3_int64 iRowid;      \/* The rowid *\/\n+  StmtRow *pRow;             \/* Current row *\/\n@@ -237269,1 +241478,1 @@\n-    pNew = sqlite3_malloc( sizeof(*pNew) );\n+    pNew = sqlite3_malloc64( sizeof(*pNew) );\n@@ -237291,1 +241500,1 @@\n-  pCur = sqlite3_malloc( sizeof(*pCur) );\n+  pCur = sqlite3_malloc64( sizeof(*pCur) );\n@@ -237299,0 +241508,10 @@\n+static void stmtCsrReset(stmt_cursor *pCur){\n+  StmtRow *pRow = 0;\n+  StmtRow *pNext = 0;\n+  for(pRow=pCur->pRow; pRow; pRow=pNext){\n+    pNext = pRow->pNext;\n+    sqlite3_free(pRow);\n+  }\n+  pCur->pRow = 0;\n+}\n+\n@@ -237303,0 +241522,1 @@\n+  stmtCsrReset((stmt_cursor*)cur);\n@@ -237313,2 +241533,3 @@\n-  pCur->iRowid++;\n-  pCur->pStmt = sqlite3_next_stmt(pCur->db, pCur->pStmt);\n+  StmtRow *pNext = pCur->pRow->pNext;\n+  sqlite3_free(pCur->pRow);\n+  pCur->pRow = pNext;\n@@ -237328,33 +241549,5 @@\n-  switch( i ){\n-    case STMT_COLUMN_SQL: {\n-      sqlite3_result_text(ctx, sqlite3_sql(pCur->pStmt), -1, SQLITE_TRANSIENT);\n-      break;\n-    }\n-    case STMT_COLUMN_NCOL: {\n-      sqlite3_result_int(ctx, sqlite3_column_count(pCur->pStmt));\n-      break;\n-    }\n-    case STMT_COLUMN_RO: {\n-      sqlite3_result_int(ctx, sqlite3_stmt_readonly(pCur->pStmt));\n-      break;\n-    }\n-    case STMT_COLUMN_BUSY: {\n-      sqlite3_result_int(ctx, sqlite3_stmt_busy(pCur->pStmt));\n-      break;\n-    }\n-    default: {\n-      assert( i==STMT_COLUMN_MEM );\n-      i = SQLITE_STMTSTATUS_MEMUSED +\n-            STMT_COLUMN_NSCAN - SQLITE_STMTSTATUS_FULLSCAN_STEP;\n-      \/* Fall thru *\/\n-    }\n-    case STMT_COLUMN_NSCAN:\n-    case STMT_COLUMN_NSORT:\n-    case STMT_COLUMN_NAIDX:\n-    case STMT_COLUMN_NSTEP:\n-    case STMT_COLUMN_REPREP:\n-    case STMT_COLUMN_RUN: {\n-      sqlite3_result_int(ctx, sqlite3_stmt_status(pCur->pStmt,\n-                      i-STMT_COLUMN_NSCAN+SQLITE_STMTSTATUS_FULLSCAN_STEP, 0));\n-      break;\n-    }\n+  StmtRow *pRow = pCur->pRow;\n+  if( i==STMT_COLUMN_SQL ){\n+    sqlite3_result_text(ctx, pRow->zSql, -1, SQLITE_TRANSIENT);\n+  }else{\n+    sqlite3_result_int(ctx, pRow->aCol[i]);\n@@ -237371,1 +241564,1 @@\n-  *pRowid = pCur->iRowid;\n+  *pRowid = pCur->pRow->iRowid;\n@@ -237381,1 +241574,1 @@\n-  return pCur->pStmt==0;\n+  return pCur->pRow==0;\n@@ -237396,3 +241589,47 @@\n-  pCur->pStmt = 0;\n-  pCur->iRowid = 0;\n-  return stmtNext(pVtabCursor);\n+  sqlite3_stmt *p = 0;\n+  sqlite3_int64 iRowid = 1;\n+  StmtRow **ppRow = 0;\n+\n+  stmtCsrReset(pCur);\n+  ppRow = &pCur->pRow;\n+  for(p=sqlite3_next_stmt(pCur->db, 0); p; p=sqlite3_next_stmt(pCur->db, p)){\n+    const char *zSql = sqlite3_sql(p);\n+    sqlite3_int64 nSql = zSql ? strlen(zSql)+1 : 0;\n+    StmtRow *pNew = (StmtRow*)sqlite3_malloc64(sizeof(StmtRow) + nSql);\n+\n+    if( pNew==0 ) return SQLITE_NOMEM;\n+    memset(pNew, 0, sizeof(StmtRow));\n+    if( zSql ){\n+      pNew->zSql = (char*)&pNew[1];\n+      memcpy(pNew->zSql, zSql, nSql);\n+    }\n+    pNew->aCol[STMT_COLUMN_NCOL] = sqlite3_column_count(p);\n+    pNew->aCol[STMT_COLUMN_RO] = sqlite3_stmt_readonly(p);\n+    pNew->aCol[STMT_COLUMN_BUSY] = sqlite3_stmt_busy(p);\n+    pNew->aCol[STMT_COLUMN_NSCAN] = sqlite3_stmt_status(\n+        p, SQLITE_STMTSTATUS_FULLSCAN_STEP, 0\n+    );\n+    pNew->aCol[STMT_COLUMN_NSORT] = sqlite3_stmt_status(\n+        p, SQLITE_STMTSTATUS_SORT, 0\n+    );\n+    pNew->aCol[STMT_COLUMN_NAIDX] = sqlite3_stmt_status(\n+        p, SQLITE_STMTSTATUS_AUTOINDEX, 0\n+    );\n+    pNew->aCol[STMT_COLUMN_NSTEP] = sqlite3_stmt_status(\n+        p, SQLITE_STMTSTATUS_VM_STEP, 0\n+    );\n+    pNew->aCol[STMT_COLUMN_REPREP] = sqlite3_stmt_status(\n+        p, SQLITE_STMTSTATUS_REPREPARE, 0\n+    );\n+    pNew->aCol[STMT_COLUMN_RUN] = sqlite3_stmt_status(\n+        p, SQLITE_STMTSTATUS_RUN, 0\n+    );\n+    pNew->aCol[STMT_COLUMN_MEM] = sqlite3_stmt_status(\n+        p, SQLITE_STMTSTATUS_MEMUSED, 0\n+    );\n+    pNew->iRowid = iRowid++;\n+    *ppRow = pNew;\n+    ppRow = &pNew->pNext;\n+  }\n+\n+  return SQLITE_OK;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/ThirdParty\/sqlite\/sqlite3.c","additions":10074,"deletions":5837,"binary":false,"changes":15911,"status":"modified"},{"patch":"@@ -149,3 +149,3 @@\n-#define SQLITE_VERSION        \"3.37.2\"\n-#define SQLITE_VERSION_NUMBER 3037002\n-#define SQLITE_SOURCE_ID      \"2022-01-06 13:25:41 872ba256cbf61d9290b571c0e6d82a20c224ca3ad82971edc46b29818d5d17a0\"\n+#define SQLITE_VERSION        \"3.39.4\"\n+#define SQLITE_VERSION_NUMBER 3039004\n+#define SQLITE_SOURCE_ID      \"2022-09-29 15:55:41 a29f9949895322123f7c38fbe94c649a9d6e6c9cd0c3b41c96d694552f26b309\"\n@@ -569,1 +569,1 @@\n-#define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8))\n+#define SQLITE_OK_SYMLINK              (SQLITE_OK | (2<<8)) \/* internal use only *\/\n@@ -3827,1 +3827,1 @@\n-** interfaces are:\n+** interfaces include the following:\n@@ -3834,0 +3834,1 @@\n+** <li> sqlite3_error_offset()\n@@ -3848,0 +3849,7 @@\n+** ^If the most recent error references a specific token in the input\n+** SQL, the sqlite3_error_offset() interface returns the byte offset\n+** of the start of that token.  ^The byte offset returned by\n+** sqlite3_error_offset() assumes that the input SQL is UTF8.\n+** ^If the most recent error does not reference a specific token in the input\n+** SQL, then the sqlite3_error_offset() function returns -1.\n+**\n@@ -3867,0 +3875,1 @@\n+SQLITE_API int sqlite3_error_offset(sqlite3 *db);\n@@ -4278,0 +4287,4 @@\n+**\n+** ^If prepared statement X is an [EXPLAIN] or [EXPLAIN QUERY PLAN]\n+** statement, then sqlite3_stmt_readonly(X) returns the same value as\n+** if the EXPLAIN or EXPLAIN QUERY PLAN prefix were omitted.\n@@ -4346,0 +4359,2 @@\n+** ^The sqlite3_value objects returned by [sqlite3_vtab_rhs_value()]\n+** are protected.\n@@ -4967,0 +4982,4 @@\n+** ^Strings returned by sqlite3_column_text16() always have the endianness\n+** which is native to the platform, regardless of the text encoding set\n+** for the database.\n+**\n@@ -4980,1 +4999,1 @@\n-** The these routines may attempt to convert the datatype of the result.\n+** These routines may attempt to convert the datatype of the result.\n@@ -5005,1 +5024,1 @@\n-** <tr><td>  BLOB    <td>   TEXT    <td> Add a zero terminator if needed\n+** <tr><td>  BLOB    <td>   TEXT    <td> [CAST] to TEXT, ensure zero terminator\n@@ -5577,1 +5596,2 @@\n-** memory allocation fails.\n+** memory allocation fails. ^If V is a [pointer value], then the result\n+** of sqlite3_value_dup(V) is a NULL value.\n@@ -6259,0 +6279,22 @@\n+\/*\n+** CAPI3REF: Return The Schema Name For A Database Connection\n+** METHOD: sqlite3\n+**\n+** ^The sqlite3_db_name(D,N) interface returns a pointer to the schema name\n+** for the N-th database on database connection D, or a NULL pointer of N is\n+** out of range.  An N value of 0 means the main database file.  An N of 1 is\n+** the \"temp\" schema.  Larger values of N correspond to various ATTACH-ed\n+** databases.\n+**\n+** Space to hold the string that is returned by sqlite3_db_name() is managed\n+** by SQLite itself.  The string might be deallocated by any operation that\n+** changes the schema, including [ATTACH] or [DETACH] or calls to\n+** [sqlite3_serialize()] or [sqlite3_deserialize()], even operations that\n+** occur on a different thread.  Applications that need to\n+** remember the string long-term should make their own copy.  Applications that\n+** are accessing the same database connection simultaneously on multiple\n+** threads should mutex-protect calls to this API and should make their own\n+** private copy of the result prior to releasing the mutex.\n+*\/\n+SQLITE_API const char *sqlite3_db_name(sqlite3 *db, int N);\n+\n@@ -7125,1 +7167,1 @@\n-** an operator that is part of a constraint term in the wHERE clause of\n+** an operator that is part of a constraint term in the WHERE clause of\n@@ -7127,16 +7169,48 @@\n-*\/\n-#define SQLITE_INDEX_CONSTRAINT_EQ         2\n-#define SQLITE_INDEX_CONSTRAINT_GT         4\n-#define SQLITE_INDEX_CONSTRAINT_LE         8\n-#define SQLITE_INDEX_CONSTRAINT_LT        16\n-#define SQLITE_INDEX_CONSTRAINT_GE        32\n-#define SQLITE_INDEX_CONSTRAINT_MATCH     64\n-#define SQLITE_INDEX_CONSTRAINT_LIKE      65\n-#define SQLITE_INDEX_CONSTRAINT_GLOB      66\n-#define SQLITE_INDEX_CONSTRAINT_REGEXP    67\n-#define SQLITE_INDEX_CONSTRAINT_NE        68\n-#define SQLITE_INDEX_CONSTRAINT_ISNOT     69\n-#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL 70\n-#define SQLITE_INDEX_CONSTRAINT_ISNULL    71\n-#define SQLITE_INDEX_CONSTRAINT_IS        72\n-#define SQLITE_INDEX_CONSTRAINT_FUNCTION 150\n+**\n+** ^The left-hand operand of the operator is given by the corresponding\n+** aConstraint[].iColumn field.  ^An iColumn of -1 indicates the left-hand\n+** operand is the rowid.\n+** The SQLITE_INDEX_CONSTRAINT_LIMIT and SQLITE_INDEX_CONSTRAINT_OFFSET\n+** operators have no left-hand operand, and so for those operators the\n+** corresponding aConstraint[].iColumn is meaningless and should not be\n+** used.\n+**\n+** All operator values from SQLITE_INDEX_CONSTRAINT_FUNCTION through\n+** value 255 are reserved to represent functions that are overloaded\n+** by the [xFindFunction|xFindFunction method] of the virtual table\n+** implementation.\n+**\n+** The right-hand operands for each constraint might be accessible using\n+** the [sqlite3_vtab_rhs_value()] interface.  Usually the right-hand\n+** operand is only available if it appears as a single constant literal\n+** in the input SQL.  If the right-hand operand is another column or an\n+** expression (even a constant expression) or a parameter, then the\n+** sqlite3_vtab_rhs_value() probably will not be able to extract it.\n+** ^The SQLITE_INDEX_CONSTRAINT_ISNULL and\n+** SQLITE_INDEX_CONSTRAINT_ISNOTNULL operators have no right-hand operand\n+** and hence calls to sqlite3_vtab_rhs_value() for those operators will\n+** always return SQLITE_NOTFOUND.\n+**\n+** The collating sequence to be used for comparison can be found using\n+** the [sqlite3_vtab_collation()] interface.  For most real-world virtual\n+** tables, the collating sequence of constraints does not matter (for example\n+** because the constraints are numeric) and so the sqlite3_vtab_collation()\n+** interface is no commonly needed.\n+*\/\n+#define SQLITE_INDEX_CONSTRAINT_EQ          2\n+#define SQLITE_INDEX_CONSTRAINT_GT          4\n+#define SQLITE_INDEX_CONSTRAINT_LE          8\n+#define SQLITE_INDEX_CONSTRAINT_LT         16\n+#define SQLITE_INDEX_CONSTRAINT_GE         32\n+#define SQLITE_INDEX_CONSTRAINT_MATCH      64\n+#define SQLITE_INDEX_CONSTRAINT_LIKE       65\n+#define SQLITE_INDEX_CONSTRAINT_GLOB       66\n+#define SQLITE_INDEX_CONSTRAINT_REGEXP     67\n+#define SQLITE_INDEX_CONSTRAINT_NE         68\n+#define SQLITE_INDEX_CONSTRAINT_ISNOT      69\n+#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL  70\n+#define SQLITE_INDEX_CONSTRAINT_ISNULL     71\n+#define SQLITE_INDEX_CONSTRAINT_IS         72\n+#define SQLITE_INDEX_CONSTRAINT_LIMIT      73\n+#define SQLITE_INDEX_CONSTRAINT_OFFSET     74\n+#define SQLITE_INDEX_CONSTRAINT_FUNCTION  150\n@@ -7171,1 +7245,1 @@\n-** NULL then no new module is create and any existing modules with the\n+** NULL then no new module is created and any existing modules with the\n@@ -7947,1 +8021,2 @@\n-#define SQLITE_TESTCTRL_LAST                    32  \/* Largest TESTCTRL *\/\n+#define SQLITE_TESTCTRL_LOGEST                  33\n+#define SQLITE_TESTCTRL_LAST                    33  \/* Largest TESTCTRL *\/\n@@ -8470,0 +8545,10 @@\n+** [[SQLITE_STMTSTATUS_FILTER_MISS]]\n+** [[SQLITE_STMTSTATUS_FILTER HIT]]\n+** <dt>SQLITE_STMTSTATUS_FILTER_HIT<br>\n+** SQLITE_STMTSTATUS_FILTER_MISS<\/dt>\n+** <dd>^SQLITE_STMTSTATUS_FILTER_HIT is the number of times that a join\n+** step was bypassed because a Bloom filter returned not-found.  The\n+** corresponding SQLITE_STMTSTATUS_FILTER_MISS value is the number of\n+** times that the Bloom filter returned a find, and thus the join step\n+** had to be processed as normal.\n+**\n@@ -8484,0 +8569,2 @@\n+#define SQLITE_STMTSTATUS_FILTER_MISS       7\n+#define SQLITE_STMTSTATUS_FILTER_HIT        8\n@@ -9452,0 +9539,1 @@\n+** METHOD: sqlite3_index_info\n@@ -9454,1 +9542,13 @@\n-** method of a [virtual table].\n+** method of a [virtual table].  This function returns a pointer to a string\n+** that is the name of the appropriate collation sequence to use for text\n+** comparisons on the constraint identified by its arguments.\n+**\n+** The first argument must be the pointer to the [sqlite3_index_info] object\n+** that is the first parameter to the xBestIndex() method. The second argument\n+** must be an index into the aConstraint[] array belonging to the\n+** sqlite3_index_info structure passed to xBestIndex.\n+**\n+** Important:\n+** The first parameter must be the same pointer that is passed into the\n+** xBestMethod() method.  The first parameter may not be a pointer to a\n+** different [sqlite3_index_info] object, even an exact copy.\n@@ -9456,6 +9556,13 @@\n-** The first argument must be the sqlite3_index_info object that is the\n-** first parameter to the xBestIndex() method. The second argument must be\n-** an index into the aConstraint[] array belonging to the sqlite3_index_info\n-** structure passed to xBestIndex. This function returns a pointer to a buffer\n-** containing the name of the collation sequence for the corresponding\n-** constraint.\n+** The return value is computed as follows:\n+**\n+** <ol>\n+** <li><p> If the constraint comes from a WHERE clause expression that contains\n+**         a [COLLATE operator], then the name of the collation specified by\n+**         that COLLATE operator is returned.\n+** <li><p> If there is no COLLATE operator, but the column that is the subject\n+**         of the constraint specifies an alternative collating sequence via\n+**         a [COLLATE clause] on the column definition within the CREATE TABLE\n+**         statement that was passed into [sqlite3_declare_vtab()], then the\n+**         name of that alternative collating sequence is returned.\n+** <li><p> Otherwise, \"BINARY\" is returned.\n+** <\/ol>\n@@ -9465,0 +9572,237 @@\n+\/*\n+** CAPI3REF: Determine if a virtual table query is DISTINCT\n+** METHOD: sqlite3_index_info\n+**\n+** This API may only be used from within an [xBestIndex|xBestIndex method]\n+** of a [virtual table] implementation. The result of calling this\n+** interface from outside of xBestIndex() is undefined and probably harmful.\n+**\n+** ^The sqlite3_vtab_distinct() interface returns an integer between 0 and\n+** 3.  The integer returned by sqlite3_vtab_distinct()\n+** gives the virtual table additional information about how the query\n+** planner wants the output to be ordered. As long as the virtual table\n+** can meet the ordering requirements of the query planner, it may set\n+** the \"orderByConsumed\" flag.\n+**\n+** <ol><li value=\"0\"><p>\n+** ^If the sqlite3_vtab_distinct() interface returns 0, that means\n+** that the query planner needs the virtual table to return all rows in the\n+** sort order defined by the \"nOrderBy\" and \"aOrderBy\" fields of the\n+** [sqlite3_index_info] object.  This is the default expectation.  If the\n+** virtual table outputs all rows in sorted order, then it is always safe for\n+** the xBestIndex method to set the \"orderByConsumed\" flag, regardless of\n+** the return value from sqlite3_vtab_distinct().\n+** <li value=\"1\"><p>\n+** ^(If the sqlite3_vtab_distinct() interface returns 1, that means\n+** that the query planner does not need the rows to be returned in sorted order\n+** as long as all rows with the same values in all columns identified by the\n+** \"aOrderBy\" field are adjacent.)^  This mode is used when the query planner\n+** is doing a GROUP BY.\n+** <li value=\"2\"><p>\n+** ^(If the sqlite3_vtab_distinct() interface returns 2, that means\n+** that the query planner does not need the rows returned in any particular\n+** order, as long as rows with the same values in all \"aOrderBy\" columns\n+** are adjacent.)^  ^(Furthermore, only a single row for each particular\n+** combination of values in the columns identified by the \"aOrderBy\" field\n+** needs to be returned.)^  ^It is always ok for two or more rows with the same\n+** values in all \"aOrderBy\" columns to be returned, as long as all such rows\n+** are adjacent.  ^The virtual table may, if it chooses, omit extra rows\n+** that have the same value for all columns identified by \"aOrderBy\".\n+** ^However omitting the extra rows is optional.\n+** This mode is used for a DISTINCT query.\n+** <li value=\"3\"><p>\n+** ^(If the sqlite3_vtab_distinct() interface returns 3, that means\n+** that the query planner needs only distinct rows but it does need the\n+** rows to be sorted.)^ ^The virtual table implementation is free to omit\n+** rows that are identical in all aOrderBy columns, if it wants to, but\n+** it is not required to omit any rows.  This mode is used for queries\n+** that have both DISTINCT and ORDER BY clauses.\n+** <\/ol>\n+**\n+** ^For the purposes of comparing virtual table output values to see if the\n+** values are same value for sorting purposes, two NULL values are considered\n+** to be the same.  In other words, the comparison operator is \"IS\"\n+** (or \"IS NOT DISTINCT FROM\") and not \"==\".\n+**\n+** If a virtual table implementation is unable to meet the requirements\n+** specified above, then it must not set the \"orderByConsumed\" flag in the\n+** [sqlite3_index_info] object or an incorrect answer may result.\n+**\n+** ^A virtual table implementation is always free to return rows in any order\n+** it wants, as long as the \"orderByConsumed\" flag is not set.  ^When the\n+** the \"orderByConsumed\" flag is unset, the query planner will add extra\n+** [bytecode] to ensure that the final results returned by the SQL query are\n+** ordered correctly.  The use of the \"orderByConsumed\" flag and the\n+** sqlite3_vtab_distinct() interface is merely an optimization.  ^Careful\n+** use of the sqlite3_vtab_distinct() interface and the \"orderByConsumed\"\n+** flag might help queries against a virtual table to run faster.  Being\n+** overly aggressive and setting the \"orderByConsumed\" flag when it is not\n+** valid to do so, on the other hand, might cause SQLite to return incorrect\n+** results.\n+*\/\n+SQLITE_API int sqlite3_vtab_distinct(sqlite3_index_info*);\n+\n+\/*\n+** CAPI3REF: Identify and handle IN constraints in xBestIndex\n+**\n+** This interface may only be used from within an\n+** [xBestIndex|xBestIndex() method] of a [virtual table] implementation.\n+** The result of invoking this interface from any other context is\n+** undefined and probably harmful.\n+**\n+** ^(A constraint on a virtual table of the form\n+** \"[IN operator|column IN (...)]\" is\n+** communicated to the xBestIndex method as a\n+** [SQLITE_INDEX_CONSTRAINT_EQ] constraint.)^  If xBestIndex wants to use\n+** this constraint, it must set the corresponding\n+** aConstraintUsage[].argvIndex to a postive integer.  ^(Then, under\n+** the usual mode of handling IN operators, SQLite generates [bytecode]\n+** that invokes the [xFilter|xFilter() method] once for each value\n+** on the right-hand side of the IN operator.)^  Thus the virtual table\n+** only sees a single value from the right-hand side of the IN operator\n+** at a time.\n+**\n+** In some cases, however, it would be advantageous for the virtual\n+** table to see all values on the right-hand of the IN operator all at\n+** once.  The sqlite3_vtab_in() interfaces facilitates this in two ways:\n+**\n+** <ol>\n+** <li><p>\n+**   ^A call to sqlite3_vtab_in(P,N,-1) will return true (non-zero)\n+**   if and only if the [sqlite3_index_info|P->aConstraint][N] constraint\n+**   is an [IN operator] that can be processed all at once.  ^In other words,\n+**   sqlite3_vtab_in() with -1 in the third argument is a mechanism\n+**   by which the virtual table can ask SQLite if all-at-once processing\n+**   of the IN operator is even possible.\n+**\n+** <li><p>\n+**   ^A call to sqlite3_vtab_in(P,N,F) with F==1 or F==0 indicates\n+**   to SQLite that the virtual table does or does not want to process\n+**   the IN operator all-at-once, respectively.  ^Thus when the third\n+**   parameter (F) is non-negative, this interface is the mechanism by\n+**   which the virtual table tells SQLite how it wants to process the\n+**   IN operator.\n+** <\/ol>\n+**\n+** ^The sqlite3_vtab_in(P,N,F) interface can be invoked multiple times\n+** within the same xBestIndex method call.  ^For any given P,N pair,\n+** the return value from sqlite3_vtab_in(P,N,F) will always be the same\n+** within the same xBestIndex call.  ^If the interface returns true\n+** (non-zero), that means that the constraint is an IN operator\n+** that can be processed all-at-once.  ^If the constraint is not an IN\n+** operator or cannot be processed all-at-once, then the interface returns\n+** false.\n+**\n+** ^(All-at-once processing of the IN operator is selected if both of the\n+** following conditions are met:\n+**\n+** <ol>\n+** <li><p> The P->aConstraintUsage[N].argvIndex value is set to a positive\n+** integer.  This is how the virtual table tells SQLite that it wants to\n+** use the N-th constraint.\n+**\n+** <li><p> The last call to sqlite3_vtab_in(P,N,F) for which F was\n+** non-negative had F>=1.\n+** <\/ol>)^\n+**\n+** ^If either or both of the conditions above are false, then SQLite uses\n+** the traditional one-at-a-time processing strategy for the IN constraint.\n+** ^If both conditions are true, then the argvIndex-th parameter to the\n+** xFilter method will be an [sqlite3_value] that appears to be NULL,\n+** but which can be passed to [sqlite3_vtab_in_first()] and\n+** [sqlite3_vtab_in_next()] to find all values on the right-hand side\n+** of the IN constraint.\n+*\/\n+SQLITE_API int sqlite3_vtab_in(sqlite3_index_info*, int iCons, int bHandle);\n+\n+\/*\n+** CAPI3REF: Find all elements on the right-hand side of an IN constraint.\n+**\n+** These interfaces are only useful from within the\n+** [xFilter|xFilter() method] of a [virtual table] implementation.\n+** The result of invoking these interfaces from any other context\n+** is undefined and probably harmful.\n+**\n+** The X parameter in a call to sqlite3_vtab_in_first(X,P) or\n+** sqlite3_vtab_in_next(X,P) must be one of the parameters to the\n+** xFilter method which invokes these routines, and specifically\n+** a parameter that was previously selected for all-at-once IN constraint\n+** processing use the [sqlite3_vtab_in()] interface in the\n+** [xBestIndex|xBestIndex method].  ^(If the X parameter is not\n+** an xFilter argument that was selected for all-at-once IN constraint\n+** processing, then these routines return [SQLITE_MISUSE])^ or perhaps\n+** exhibit some other undefined or harmful behavior.\n+**\n+** ^(Use these routines to access all values on the right-hand side\n+** of the IN constraint using code like the following:\n+**\n+** <blockquote><pre>\n+** &nbsp;  for(rc=sqlite3_vtab_in_first(pList, &pVal);\n+** &nbsp;      rc==SQLITE_OK && pVal\n+** &nbsp;      rc=sqlite3_vtab_in_next(pList, &pVal)\n+** &nbsp;  ){\n+** &nbsp;    \/\/ do something with pVal\n+** &nbsp;  }\n+** &nbsp;  if( rc!=SQLITE_OK ){\n+** &nbsp;    \/\/ an error has occurred\n+** &nbsp;  }\n+** <\/pre><\/blockquote>)^\n+**\n+** ^On success, the sqlite3_vtab_in_first(X,P) and sqlite3_vtab_in_next(X,P)\n+** routines return SQLITE_OK and set *P to point to the first or next value\n+** on the RHS of the IN constraint.  ^If there are no more values on the\n+** right hand side of the IN constraint, then *P is set to NULL and these\n+** routines return [SQLITE_DONE].  ^The return value might be\n+** some other value, such as SQLITE_NOMEM, in the event of a malfunction.\n+**\n+** The *ppOut values returned by these routines are only valid until the\n+** next call to either of these routines or until the end of the xFilter\n+** method from which these routines were called.  If the virtual table\n+** implementation needs to retain the *ppOut values for longer, it must make\n+** copies.  The *ppOut values are [protected sqlite3_value|protected].\n+*\/\n+SQLITE_API int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut);\n+SQLITE_API int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut);\n+\n+\/*\n+** CAPI3REF: Constraint values in xBestIndex()\n+** METHOD: sqlite3_index_info\n+**\n+** This API may only be used from within the [xBestIndex|xBestIndex method]\n+** of a [virtual table] implementation. The result of calling this interface\n+** from outside of an xBestIndex method are undefined and probably harmful.\n+**\n+** ^When the sqlite3_vtab_rhs_value(P,J,V) interface is invoked from within\n+** the [xBestIndex] method of a [virtual table] implementation, with P being\n+** a copy of the [sqlite3_index_info] object pointer passed into xBestIndex and\n+** J being a 0-based index into P->aConstraint[], then this routine\n+** attempts to set *V to the value of the right-hand operand of\n+** that constraint if the right-hand operand is known.  ^If the\n+** right-hand operand is not known, then *V is set to a NULL pointer.\n+** ^The sqlite3_vtab_rhs_value(P,J,V) interface returns SQLITE_OK if\n+** and only if *V is set to a value.  ^The sqlite3_vtab_rhs_value(P,J,V)\n+** inteface returns SQLITE_NOTFOUND if the right-hand side of the J-th\n+** constraint is not available.  ^The sqlite3_vtab_rhs_value() interface\n+** can return an result code other than SQLITE_OK or SQLITE_NOTFOUND if\n+** something goes wrong.\n+**\n+** The sqlite3_vtab_rhs_value() interface is usually only successful if\n+** the right-hand operand of a constraint is a literal value in the original\n+** SQL statement.  If the right-hand operand is an expression or a reference\n+** to some other column or a [host parameter], then sqlite3_vtab_rhs_value()\n+** will probably return [SQLITE_NOTFOUND].\n+**\n+** ^(Some constraints, such as [SQLITE_INDEX_CONSTRAINT_ISNULL] and\n+** [SQLITE_INDEX_CONSTRAINT_ISNOTNULL], have no right-hand operand.  For such\n+** constraints, sqlite3_vtab_rhs_value() always returns SQLITE_NOTFOUND.)^\n+**\n+** ^The [sqlite3_value] object returned in *V is a protected sqlite3_value\n+** and remains valid for the duration of the xBestIndex method call.\n+** ^When xBestIndex returns, the sqlite3_value object returned by\n+** sqlite3_vtab_rhs_value() is automatically deallocated.\n+**\n+** The \"_rhs_\" in the name of this routine is an abbreviation for\n+** \"Right-Hand Side\".\n+*\/\n+SQLITE_API int sqlite3_vtab_rhs_value(sqlite3_index_info*, int, sqlite3_value **ppVal);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/ThirdParty\/sqlite\/sqlite3.h","additions":378,"deletions":34,"binary":false,"changes":412,"status":"modified"},{"patch":"@@ -347,0 +347,13 @@\n+  \/* Version 3.38.0 and later *\/\n+  int (*error_offset)(sqlite3*);\n+  int (*vtab_rhs_value)(sqlite3_index_info*,int,sqlite3_value**);\n+  int (*vtab_distinct)(sqlite3_index_info*);\n+  int (*vtab_in)(sqlite3_index_info*,int,int);\n+  int (*vtab_in_first)(sqlite3_value*,sqlite3_value**);\n+  int (*vtab_in_next)(sqlite3_value*,sqlite3_value**);\n+  \/* Version 3.39.0 and later *\/\n+  int (*deserialize)(sqlite3*,const char*,unsigned char*,\n+                     sqlite3_int64,sqlite3_int64,unsigned);\n+  unsigned char *(*serialize)(sqlite3*,const char *,sqlite3_int64*,\n+                              unsigned int);\n+  const char *(*db_name)(sqlite3*,int);\n@@ -658,0 +671,13 @@\n+\/* Version 3.38.0 and later *\/\n+#define sqlite3_error_offset           sqlite3_api->error_offset\n+#define sqlite3_vtab_rhs_value         sqlite3_api->vtab_rhs_value\n+#define sqlite3_vtab_distinct          sqlite3_api->vtab_distinct\n+#define sqlite3_vtab_in                sqlite3_api->vtab_in\n+#define sqlite3_vtab_in_first          sqlite3_api->vtab_in_first\n+#define sqlite3_vtab_in_next           sqlite3_api->vtab_in_next\n+\/* Version 3.39.0 and later *\/\n+#ifndef SQLITE_OMIT_DESERIALIZE\n+#define sqlite3_deserialize            sqlite3_api->deserialize\n+#define sqlite3_serialize              sqlite3_api->serialize\n+#endif\n+#define sqlite3_db_name                sqlite3_api->db_name\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/ThirdParty\/sqlite\/sqlite3ext.h","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}