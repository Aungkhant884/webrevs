{"files":[{"patch":"@@ -70,0 +70,7 @@\n+     * Key lock state\n+     *\/\n+    @Native public static final int KEY_LOCK_OFF = 0;\n+    @Native public static final int KEY_LOCK_ON = 1;\n+    @Native public static final int KEY_LOCK_UNKNOWN = -1;\n+\n+    \/*\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/events\/KeyEvent.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Optional;\n@@ -747,0 +748,18 @@\n+\n+    protected int _isKeyLocked(int keyCode) {\n+        \/\/ Overridden in subclasses\n+        return KeyEvent.KEY_LOCK_UNKNOWN;\n+    }\n+\n+    public final Optional<Boolean> isKeyLocked(int keyCode) {\n+        checkEventThread();\n+        int lockState = _isKeyLocked(keyCode);\n+        switch (lockState) {\n+            case KeyEvent.KEY_LOCK_OFF:\n+                return Optional.of(false);\n+            case KeyEvent.KEY_LOCK_ON:\n+                return Optional.of(true);\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -481,0 +481,3 @@\n+    @Override\n+    protected native int _isKeyLocked(int keyCode);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -394,0 +394,3 @@\n+\n+    @Override\n+    protected native int _isKeyLocked(int keyCode);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -361,0 +361,3 @@\n+\n+    @Override\n+    protected native int _isKeyLocked(int keyCode);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+import java.util.Optional;\n@@ -374,0 +375,5 @@\n+    @Override\n+    public Optional<Boolean> isKeyLocked(KeyCode keyCode) {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/DummyToolkit.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+import java.util.Optional;\n@@ -876,0 +877,7 @@\n+    \/**\n+     * Returns the lock state for the given keyCode.\n+     * @param keyCode the keyCode to check\n+     * @return the lock state for the given keyCode.\n+     *\/\n+    public abstract Optional<Boolean> isKeyLocked(KeyCode keyCode);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+import java.util.Optional;\n@@ -1195,0 +1196,18 @@\n+    \/\/ Returns the glass keycode for the given JavaFX KeyCode.\n+    \/\/ This method only converts lock state KeyCode values\n+    private int toGlassKeyCode(KeyCode keyCode) {\n+        switch (keyCode) {\n+            case CAPS:\n+                return com.sun.glass.events.KeyEvent.VK_CAPS_LOCK;\n+            case NUM_LOCK:\n+                return com.sun.glass.events.KeyEvent.VK_NUM_LOCK;\n+            default:\n+                return com.sun.glass.events.KeyEvent.VK_UNDEFINED;\n+        }\n+    }\n+\n+    @Override\n+    public Optional<Boolean> isKeyLocked(KeyCode keyCode) {\n+        return Application.GetApplication().isKeyLocked(toGlassKeyCode(keyCode));\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.application.PlatformImpl;\n@@ -29,0 +30,1 @@\n+import java.util.Optional;\n@@ -31,1 +33,1 @@\n-import com.sun.javafx.application.PlatformImpl;\n+import javafx.scene.input.KeyCode;\n@@ -322,0 +324,37 @@\n+    \/**\n+     * Returns a flag indicating whether the key corresponding to {@code keyCode}\n+     * is in the locked (or \"on\") state.\n+     * {@code keyCode} must be one of: {@link KeyCode#CAPS} or\n+     * {@link KeyCode#NUM_LOCK}.\n+     * If the underlying system is not able to determine the state of the\n+     * specified {@code keyCode}, an empty {@code Optional} is returned.\n+     * If the keyboard attached to the system doesn't have the specified key,\n+     * an {@code Optional} containing {@code false} is returned.\n+     * This method must be called on the JavaFX Application thread.\n+     *\n+     * @param keyCode the {@code KeyCode} of the lock state to query\n+     *\n+     * @return the lock state of the key corresponding to {@code keyCode},\n+     * or an empty {@code Optional} if the system cannot determine its state\n+     *\n+     * @throws IllegalArgumentException if {@code keyCode} is not one of the\n+     * valid {@code KeyCode} values\n+     *\n+     * @throws IllegalStateException if this method is called on a thread\n+     * other than the JavaFX Application Thread\n+     *\n+     * @since 11.0.12\n+     *\/\n+    public static Optional<Boolean> isKeyLocked(KeyCode keyCode) {\n+        Toolkit.getToolkit().checkFxUserThread();\n+\n+        switch (keyCode) {\n+            case CAPS:\n+            case NUM_LOCK:\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid KeyCode\");\n+        }\n+        return Toolkit.getToolkit().isKeyLocked(keyCode);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <X11\/XKBlib.h>\n@@ -346,0 +347,59 @@\n+\/*\n+ * Function to determine whether the Xkb extention is available. This is a\n+ * precaution against X protocol errors, although it should be available on all\n+ * Linux systems.\n+ *\/\n+\n+static Bool xkbInitialized = False;\n+static Bool xkbAvailable = False;\n+\n+static Bool isXkbAvailable(Display *display) {\n+    if (!xkbInitialized) {\n+        int xkbMajor = XkbMajorVersion;\n+        int xkbMinor = XkbMinorVersion;\n+        xkbAvailable = XkbQueryExtension(display, NULL, NULL, NULL, &xkbMajor, &xkbMinor);\n+        xkbInitialized = True;\n+    }\n+    return xkbAvailable;\n+}\n+\n+\/*\n+ * Class:     com_sun_glass_ui_gtk_GtkApplication\n+ * Method:    _isKeyLocked\n+ * Signature: (I)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_gtk_GtkApplication__1isKeyLocked\n+  (JNIEnv * env, jobject obj, jint keyCode)\n+{\n+    Display* display = gdk_x11_display_get_xdisplay(gdk_display_get_default());\n+    if (!isXkbAvailable(display)) {\n+        return com_sun_glass_events_KeyEvent_KEY_LOCK_UNKNOWN;\n+    }\n+\n+    Atom keyCodeAtom = None;\n+    switch (keyCode) {\n+        case com_sun_glass_events_KeyEvent_VK_CAPS_LOCK:\n+            keyCodeAtom = XInternAtom(display, \"Caps Lock\", True);\n+            break;\n+\n+        case com_sun_glass_events_KeyEvent_VK_NUM_LOCK:\n+            keyCodeAtom = XInternAtom(display, \"Num Lock\", True);\n+            break;\n+    }\n+\n+    if (keyCodeAtom == None) {\n+        return com_sun_glass_events_KeyEvent_KEY_LOCK_UNKNOWN;\n+    }\n+\n+    Bool isLocked = False;\n+    if (XkbGetNamedIndicator(display, keyCodeAtom, NULL, &isLocked, NULL, NULL)) {\n+        if (isLocked) {\n+            return com_sun_glass_events_KeyEvent_KEY_LOCK_ON;\n+        } else {\n+            return com_sun_glass_events_KeyEvent_KEY_LOCK_OFF;\n+        }\n+    }\n+\n+    return com_sun_glass_events_KeyEvent_KEY_LOCK_UNKNOWN;\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_key.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -393,0 +393,22 @@\n+\/*\n+ * Class:     com_sun_glass_ui_mac_MacApplication\n+ * Method:    _isKeyLocked\n+ * Signature: (I)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_mac_MacApplication__1isKeyLocked\n+  (JNIEnv * env, jobject obj, jint keyCode)\n+{\n+    NSUInteger mask = 0;\n+    switch (keyCode) {\n+        case com_sun_glass_events_KeyEvent_VK_CAPS_LOCK:\n+            mask = NSEventModifierFlagCapsLock;\n+            break;\n+\n+        \/\/ Caps lock is the only locking key supported on macOS\n+        default:\n+            return com_sun_glass_events_KeyEvent_KEY_LOCK_UNKNOWN;\n+    }\n+    NSUInteger modifierFlags = [NSEvent modifierFlags];\n+    return (modifierFlags & mask) ? com_sun_glass_events_KeyEvent_KEY_LOCK_ON\n+                                  : com_sun_glass_events_KeyEvent_KEY_LOCK_OFF;\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassKey.m","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -250,0 +250,13 @@\n+\/*\n+ * Class:     com_sun_glass_ui_win_WinApplication\n+ * Method:    _isKeyLocked\n+ * Signature: (I)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_com_sun_glass_ui_win_WinApplication__1isKeyLocked\n+  (JNIEnv * env, jobject obj, jint keyCode)\n+{\n+    SHORT keyState = 0;\n+    switch (keyCode) {\n+        case com_sun_glass_events_KeyEvent_VK_CAPS_LOCK:\n+            keyState = ::GetKeyState(VK_CAPITAL);\n+            break;\n@@ -251,0 +264,3 @@\n+        case com_sun_glass_events_KeyEvent_VK_NUM_LOCK:\n+            keyState = ::GetKeyState(VK_NUMLOCK);\n+            break;\n@@ -252,0 +268,6 @@\n+        default:\n+            return com_sun_glass_events_KeyEvent_KEY_LOCK_UNKNOWN;\n+    }\n+    return (keyState & 0x1) ? com_sun_glass_events_KeyEvent_KEY_LOCK_ON\n+                            : com_sun_glass_events_KeyEvent_KEY_LOCK_OFF;\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/KeyTable.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -753,0 +753,5 @@\n+    @Override\n+    public Optional<Boolean> isKeyLocked(KeyCode keyCode) {\n+        return Optional.empty();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.util.Optional;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.input.KeyCode;\n+import javafx.stage.Stage;\n+\n+public class CapsLockTest {\n+\n+    private static BufferedReader reader;\n+\n+    public static class App extends Application {\n+        private void checkCapsLock(boolean expected) throws Exception {\n+            Optional<Boolean> capsLock = Platform.isKeyLocked(KeyCode.CAPS);\n+            if (capsLock.isPresent()) {\n+                System.out.println(\"isKeyLocked(CAPS) is \" + capsLock.get());\n+                if (capsLock.get() != expected) {\n+                    System.out.println(\"TEST FAILED\");\n+                    System.exit(1);\n+                }\n+            } else {\n+                System.out.println(\"ERROR: isKeyLocked(CAPS) is empty\");\n+                System.out.println(\"TEST FAILED\");\n+                System.exit(1);\n+            }\n+        }\n+\n+        @Override\n+        public void start(Stage stage) throws Exception {\n+            checkCapsLock(true);\n+            System.out.println(\"Disable Caps Lock on your system then press ENTER\");\n+            reader.readLine();\n+            checkCapsLock(false);\n+            Platform.exit();\n+        }\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        System.out.println(\"Enable Caps Lock on your system then press ENTER\");\n+        try {\n+            reader = new BufferedReader(new InputStreamReader(System.in));\n+            reader.readLine();\n+            Application.launch(App.class, args);\n+        } catch (Exception ex) {\n+            ex.printStackTrace(System.out);\n+            System.out.println(\"TEST FAILED\");\n+            System.exit(1);\n+        }\n+        System.out.println();\n+        System.out.println(\"TEST PASSED\");\n+    }\n+}\n","filename":"tests\/manual\/events\/CapsLockTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.application;\n+\n+import com.sun.javafx.PlatformUtil;\n+import java.util.Optional;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javafx.application.Platform;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.robot.Robot;\n+import test.util.Util;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+import static org.junit.Assume.assumeTrue;\n+\n+\/**\n+ * Test program for Platform::isKeyLocked.\n+ *\/\n+public class KeyLockedTest {\n+\n+    \/\/ Used to start the toolkit before running any test\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Robot robot;\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        Platform.setImplicitExit(false);\n+        Platform.startup(startupLatch::countDown);\n+        assertTrue(\"Timeout waiting for FX runtime to start\",\n+                startupLatch.await(15, TimeUnit.SECONDS));\n+\n+        if (PlatformUtil.isWindows()) {\n+            Util.runAndWait(() -> robot = new Robot());\n+        }\n+    }\n+\n+    @AfterClass\n+    public static void cleanupFX() {\n+        if (robot != null) {\n+            \/\/ Disable caps lock if it is set\n+            Platform.runLater(() -> {\n+                Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.CAPS);\n+                capsLockState.ifPresent(state -> {\n+                    if (state) {\n+                        robot.keyPress(KeyCode.CAPS);\n+                        robot.keyRelease(KeyCode.CAPS);\n+                    }\n+                });\n+            });\n+        }\n+        Platform.exit();\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testCallOnTestThread() {\n+        \/\/ This should throw an exception\n+        Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.CAPS);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testIllegalKeyCode() {\n+        Util.runAndWait(() -> {\n+            \/\/ This should throw an exception\n+            Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.A);\n+        });\n+    }\n+\n+    @Test\n+    public void testCanReadCapsLockState() {\n+        Util.runAndWait(() -> {\n+            \/\/ Check that we don't get an exception or a null optional.\n+            Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.CAPS);\n+            assertNotNull(capsLockState);\n+            \/\/ A result should always be present\n+            assertTrue(capsLockState.isPresent());\n+        });\n+    }\n+\n+    @Test\n+    public void testCanReadNumLockState() {\n+        Util.runAndWait(() -> {\n+            \/\/ Check that we don't get an exception or a null optional.\n+            Optional<Boolean> numLockState = Platform.isKeyLocked(KeyCode.NUM_LOCK);\n+            assertNotNull(numLockState);\n+            \/\/ A result should always be present on Windows and Linux\n+            if (PlatformUtil.isWindows() || PlatformUtil.isLinux()) {\n+                assertTrue(numLockState.isPresent());\n+            }\n+            \/\/ A result should never be present on Mac\n+            if (PlatformUtil.isMac()) {\n+                assertFalse(numLockState.isPresent());\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void testCapsLockState() {\n+        \/\/ We can set caps lock via robot only on Windows\n+        assumeTrue(PlatformUtil.isWindows());\n+\n+        final AtomicBoolean initialCapsLock = new AtomicBoolean(false);\n+        Util.runAndWait(() -> {\n+            Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.CAPS);\n+            assertNotNull(capsLockState);\n+            assertTrue(capsLockState.isPresent());\n+\n+            \/\/ Read the initial state of the caps lock key and then toggle it\n+            initialCapsLock.set(capsLockState.get());\n+            robot.keyPress(KeyCode.CAPS);\n+            robot.keyRelease(KeyCode.CAPS);\n+        });\n+        \/\/ Wait for 1\/2 second to make sure the state has toggled\n+        Util.sleep(500);\n+        Util.runAndWait(() -> {\n+            Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.CAPS);\n+            assertNotNull(capsLockState);\n+            assertTrue(capsLockState.isPresent());\n+            assertTrue(initialCapsLock.get() != capsLockState.get());\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/application\/KeyLockedTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}