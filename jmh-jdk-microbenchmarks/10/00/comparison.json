{"files":[{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.crypto.full;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.*;\n+import java.security.*;\n+import java.security.spec.*;\n+\n+\n+public abstract class CipherBench extends CryptoBase {\n+\n+    @Param({})\n+    private String permutation;\n+\n+    @Param({})\n+    private String mode;\n+\n+    @Param({})\n+    private String padding;\n+\n+    @Param({})\n+    private int keyLength;\n+\n+    @Param({})\n+    private int dataSize;\n+\n+    private int decryptCount = 0;\n+    private byte[] data;\n+    private byte[][] encryptedData = new byte[2][];\n+    private byte[] outBuffer;\n+    private Cipher[] encryptCipher = new Cipher[2];\n+    private Cipher decryptCipher;\n+    protected SecretKeySpec ks;\n+    protected byte[] iv;\n+\n+    protected abstract int ivLength();\n+    protected abstract AlgorithmParameterSpec makeParameterSpec();\n+\n+    protected void init(Cipher c, int mode, SecretKeySpec ks)\n+        throws GeneralSecurityException {\n+\n+        if (iv == null) {\n+            iv = fillSecureRandom(new byte[ivLength()]);\n+        }\n+\n+        \/\/ toggle some bits in the IV to get around IV reuse defenses\n+        iv[0] ^= 0xFF;\n+        AlgorithmParameterSpec paramSpec = makeParameterSpec();\n+\n+        c.init(mode, ks, paramSpec);\n+    }\n+\n+    protected void init(Cipher c, int mode, SecretKeySpec ks, Cipher fromCipher)\n+        throws GeneralSecurityException {\n+\n+        AlgorithmParameters params = fromCipher.getParameters();\n+        c.init(mode, ks, fromCipher.getParameters());\n+    }\n+\n+    @Setup\n+    public void setup() throws GeneralSecurityException {\n+        setupProvider();\n+\n+        String transform = permutation + \"\/\" + mode + \"\/\" + padding;\n+        byte[] keystring = fillSecureRandom(new byte[keyLength \/ 8]);\n+        ks = new SecretKeySpec(keystring, permutation);\n+        data = fillRandom(new byte[dataSize]);\n+        for (int i = 0; i < 2; i++) {\n+            encryptCipher[i] = makeCipher(prov, transform);\n+            init(encryptCipher[i], Cipher.ENCRYPT_MODE, ks);\n+            encryptedData[i] = encryptCipher[i].doFinal(data);\n+        }\n+        outBuffer = new byte[dataSize + 128]; \/\/ extra space for tag, etc\n+        decryptCipher = makeCipher(prov, transform);\n+    }\n+\n+    @Benchmark\n+    public void encrypt() throws GeneralSecurityException {\n+        init(encryptCipher[1], Cipher.ENCRYPT_MODE, ks);\n+        encryptCipher[1].doFinal(data, 0, data.length, outBuffer);\n+    }\n+\n+    @Benchmark\n+    public void decrypt() throws GeneralSecurityException {\n+        init(decryptCipher, Cipher.DECRYPT_MODE, ks,\n+            encryptCipher[decryptCount]);\n+        decryptCipher.doFinal(encryptedData[decryptCount], 0,\n+            encryptedData[decryptCount].length, outBuffer);\n+        decryptCount = (decryptCount + 1) % 2;\n+    }\n+\n+    public static class GCM extends CipherBench {\n+\n+        @Param({\"AES\"})\n+        private String permutation;\n+\n+        @Param({\"GCM\"})\n+        private String mode;\n+\n+        @Param({\"NoPadding\"})\n+        private String padding;\n+\n+        @Param({\"128\", \"256\"})\n+        private int keyLength;\n+\n+        @Param({\"1024\", \"\" + 16 * 1024})\n+        private int dataSize;\n+\n+        protected int ivLength() {\n+            return 32;\n+        }\n+        protected AlgorithmParameterSpec makeParameterSpec() {\n+            return new GCMParameterSpec(96, iv, 0, 16);\n+        }\n+\n+        private byte[] aad;\n+\n+        protected void init(Cipher c, int mode, SecretKeySpec ks)\n+            throws GeneralSecurityException {\n+\n+            if (aad == null) {\n+                aad = fillSecureRandom(new byte[5]);\n+            }\n+\n+            super.init(c, mode, ks);\n+            c.updateAAD(aad);\n+        }\n+\n+        protected void init(Cipher c, int mode, SecretKeySpec ks,\n+            Cipher fromCipher) throws GeneralSecurityException {\n+\n+            super.init(c, mode, ks, fromCipher);\n+            c.updateAAD(aad);\n+        }\n+    }\n+\n+    public static class CTR extends CipherBench {\n+\n+        @Param({\"AES\"})\n+        private String permutation;\n+\n+        @Param({\"CTR\"})\n+        private String mode;\n+\n+        @Param({\"NoPadding\"})\n+        private String padding;\n+\n+        @Param({\"128\", \"256\"})\n+        private int keyLength;\n+\n+        @Param({\"1024\", \"\" + 16 * 1024})\n+        private int dataSize;\n+\n+        protected int ivLength() {\n+            return 16;\n+        }\n+        protected AlgorithmParameterSpec makeParameterSpec() {\n+            return new IvParameterSpec(iv);\n+        }\n+    }\n+\n+}\n","filename":"micros-jdk8\/src\/main\/java\/org\/openjdk\/bench\/javax\/crypto\/full\/CipherBench.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.javax.crypto.small;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.*;\n+import java.security.*;\n+import java.security.spec.*;\n+\n+\n+public abstract class CipherBench extends\n+    org.openjdk.bench.javax.crypto.full.CipherBench {\n+\n+    public static class GCM extends\n+        org.openjdk.bench.javax.crypto.full.CipherBench.GCM {\n+\n+        @Param({\"AES\"})\n+        private String permutation;\n+\n+        @Param({\"GCM\"})\n+        private String mode;\n+\n+        @Param({\"NoPadding\"})\n+        private String padding;\n+\n+        @Param({\"128\"})\n+        private int keyLength;\n+\n+        @Param({\"\" + 16 * 1024})\n+        private int dataSize;\n+    }\n+\n+}\n","filename":"micros-jdk8\/src\/main\/java\/org\/openjdk\/bench\/javax\/crypto\/small\/CipherBench.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}