{"files":[{"patch":"@@ -0,0 +1,418 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Thread)\n+public class MathBench {\n+    public int int1 = 1, int2 = 2, int42 = 42, int5 = 5;\n+    public long long1 = 1L, long2 = 2L, long747 = 747L, long13 = 13L;\n+    public float float1 = 1.0f, float2 = 2.0f, floatNegative99 = -99.0f, float7 = 7.0f, eFloat = 2.718f;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+\n+    @Benchmark\n+    public double  absDouble() {\n+        return  Math.abs(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  absFloat() {\n+        return  Math.abs(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public int  absInt() {\n+        return  Math.abs(int42);\n+    }\n+\n+    @Benchmark\n+    public long  absLong() {\n+        return  Math.abs(long13);\n+    }\n+\n+    @Benchmark\n+    public double  acosDouble() {\n+        return  Math.acos(double1);\n+    }\n+\n+    @Benchmark\n+    public int  addExactInt() {\n+        return  Math.addExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  addExactLong() {\n+        return  Math.addExact(long2, long13);\n+    }\n+\n+    @Benchmark\n+    public double  asinDouble() {\n+        return  Math.asin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atanDouble() {\n+        return  Math.atan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atan2Double() {\n+        return  Math.atan2(double1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  cbrt() {\n+        return  Math.cbrt(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ceilDouble() {\n+        return  Math.ceil(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  copySignDouble() {\n+        return  Math.copySign(double81, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  copySignFloat() {\n+        return  Math.copySign(floatNegative99, float1);\n+    }\n+\n+    @Benchmark\n+    public double  cosDouble() {\n+        return  Math.cos(double1);\n+    }\n+\n+    @Benchmark\n+    public double  coshDouble() {\n+        return  Math.cosh(double2);\n+    }\n+\n+    @Benchmark\n+    public double  expDouble() {\n+        return  Math.exp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  expm1() {\n+        return  Math.expm1(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  floorDouble() {\n+        return  Math.floor(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  floorDivIntInt() {\n+        return  Math.floorDiv(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongInt() {\n+        return  Math.floorDiv(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongLong() {\n+        return  Math.floorDiv(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public int  floorModIntInt() {\n+        return  Math.floorMod(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public int  floorModLongInt() {\n+        return  Math.floorMod(long747, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorModLongLong() {\n+        return  Math.floorMod(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public double  fmaDouble() {\n+        return  Math.fma(double2, double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  fmaFloat() {\n+        return  Math.fma(float2, floatNegative99, float7);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentDouble() {\n+        return  Math.getExponent(double81);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentFloat() {\n+        return  Math.getExponent(float7);\n+    }\n+\n+    @Benchmark\n+    public double  hypotDouble() {\n+        return  Math.hypot(double2, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  IEEERemainderDouble() {\n+        return  Math.IEEEremainder(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  logDouble() {\n+        return  Math.log(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log10Double() {\n+        return  Math.log10(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log1pDouble() {\n+        return  Math.log1p(double81);\n+    }\n+\n+    @Benchmark\n+    public int  maxInt() {\n+        return  Math.max(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  maxLong() {\n+        return  Math.max(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  maxFloat() {\n+        return  Math.max(float1, float2);\n+    }\n+\n+    @Benchmark\n+    public double  maxDouble() {\n+        return  Math.max(double1, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  minInt() {\n+        return  Math.min(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  minLong() {\n+        return  Math.min(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  minFloat() {\n+        return  Math.min(float1, floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  minDouble() {\n+        return  Math.min(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public int  multiplyExactInt() {\n+        return  Math.multiplyExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongInt() {\n+        return  Math.multiplyExact(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongLong() {\n+        return  Math.multiplyExact(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyFullIntInt() {\n+        return  Math.multiplyFull(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyHighLongLog() {\n+        return  Math.multiplyHigh(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public double  nextAfterDoubleDouble() {\n+        return  Math.nextAfter(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  nextAfterFloatDouble() {\n+        return  Math.nextAfter(float7, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  nextDownDouble() {\n+        return  Math.nextDown(float7);\n+    }\n+\n+    @Benchmark\n+    public float  nextDownFloat() {\n+        return  Math.nextDown(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  nextUpDouble() {\n+        return  Math.nextUp(double81);\n+    }\n+\n+    @Benchmark\n+    public float  nextUpFloat() {\n+        return  Math.nextUp(float7);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble() {\n+        return  Math.pow(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  random() {\n+        return  Math.random();\n+    }\n+\n+    @Benchmark\n+    public double  rintDouble() {\n+        return  Math.rint(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public long  roundDouble() {\n+        return  Math.round( Math.PI);\n+    }\n+\n+    @Benchmark\n+    public int  roundFloat() {\n+        return  Math.round(eFloat);\n+    }\n+\n+    @Benchmark\n+    public double  scalbDoubleInt() {\n+        return  Math.scalb(double81, int2);\n+    }\n+\n+    @Benchmark\n+    public float  scalbFloatInt() {\n+        return  Math.scalb(float7, int2);\n+    }\n+\n+    @Benchmark\n+    public double  sigNumDouble() {\n+        return  Math.signum(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  signumFloat() {\n+        return  Math.signum(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  sinDouble() {\n+        return  Math.sin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  sinhDouble() {\n+        return  Math.sinh(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  sqrtDouble() {\n+        return  Math.sqrt(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactIntInt() {\n+        return  Math.subtractExact(int42,int5);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactLongLong() {\n+        return  Math.subtractExact(long747,long13);\n+    }\n+\n+    @Benchmark\n+    public double  tanDouble() {\n+        return  Math.tan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  tanhDouble() {\n+        return  Math.tanh(double1);\n+    }\n+\n+    @Benchmark\n+    public double  toDegreesDouble() {\n+        return  Math.toDegrees(double81);\n+    }\n+\n+    @Benchmark\n+    public double  toIntExactLong() {\n+        return  Math.toIntExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  toRadiansDouble() {\n+        return  Math.toRadians(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ulpDouble() {\n+        return  Math.ulp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  ulpFloat() {\n+        return  Math.ulp(float7);\n+    }\n+\n+}\n","filename":"micros-jdk11\/src\/main\/java\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":418,"deletions":0,"binary":false,"changes":418,"status":"added"},{"patch":"@@ -0,0 +1,418 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Thread)\n+public class StrictMathBench {\n+\n+    public int int1 = 1, int2 = 2, int42 = 42, int5 = 5;\n+    public long long1 = 1L, long2 = 2L, long747 = 747L, long13 = 13L;\n+    public float float1 = 1.0f, float2 = 2.0f, floatNegative99 = -99.0f, float7 = 7.0f, eFloat = 2.718f;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+\n+    @Benchmark\n+    public double  absDouble() {\n+        return  StrictMath.abs(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  absFloat() {\n+        return  StrictMath.abs(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public int  absInt() {\n+        return  StrictMath.abs(int42);\n+    }\n+\n+    @Benchmark\n+    public long  absLong() {\n+        return  StrictMath.abs(long13);\n+    }\n+\n+    @Benchmark\n+    public double  acosDouble() {\n+        return  StrictMath.acos(double1);\n+    }\n+\n+    @Benchmark\n+    public int  addExactInt() {\n+        return  StrictMath.addExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  addExactLong() {\n+        return  StrictMath.addExact(long2, long13);\n+    }\n+\n+    @Benchmark\n+    public double  asinDouble() {\n+        return  StrictMath.asin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atanDouble() {\n+        return  StrictMath.atan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atan2Double() {\n+        return  StrictMath.atan2(double1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  cbrt() {\n+        return  StrictMath.cbrt(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ceilDouble() {\n+        return  StrictMath.ceil(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  copySignDouble() {\n+        return  StrictMath.copySign(double81, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  copySignFloat() {\n+        return  StrictMath.copySign(floatNegative99, float1);\n+    }\n+\n+    @Benchmark\n+    public double  cosDouble() {\n+        return  StrictMath.cos(double1);\n+    }\n+\n+    @Benchmark\n+    public double  coshDouble() {\n+        return  StrictMath.cosh(double2);\n+    }\n+\n+    @Benchmark\n+    public double  expDouble() {\n+        return  StrictMath.exp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  expm1() {\n+        return  StrictMath.expm1(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  floorDouble() {\n+        return  StrictMath.floor(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  floorDivIntInt() {\n+        return  StrictMath.floorDiv(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongInt() {\n+        return  StrictMath.floorDiv(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongLong() {\n+        return  StrictMath.floorDiv(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public int  floorModIntInt() {\n+        return  StrictMath.floorMod(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public int  floorModLongInt() {\n+        return  StrictMath.floorMod(long747, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorModLongLong() {\n+        return  StrictMath.floorMod(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public double  fmaDouble() {\n+        return  StrictMath.fma(double2, double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  fmaFloat() {\n+        return  StrictMath.fma(float2, floatNegative99, float7);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentDouble() {\n+        return  StrictMath.getExponent(double81);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentFloat() {\n+        return  StrictMath.getExponent(float7);\n+    }\n+\n+    @Benchmark\n+    public double  hypotDouble() {\n+        return  StrictMath.hypot(double2, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  IEEERemainderDouble() {\n+        return  StrictMath.IEEEremainder(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  logDouble() {\n+        return  StrictMath.log(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log10Double() {\n+        return  StrictMath.log10(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log1pDouble() {\n+        return  StrictMath.log1p(double81);\n+    }\n+\n+    @Benchmark\n+    public int  maxInt() {\n+        return  StrictMath.max(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  maxLong() {\n+        return  StrictMath.max(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  maxFloat() {\n+        return  StrictMath.max(float1, float2);\n+    }\n+\n+    @Benchmark\n+    public double  maxDouble() {\n+        return  StrictMath.max(double1, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  minInt() {\n+        return  StrictMath.min(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  minLong() {\n+        return  StrictMath.min(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  minFloat() {\n+        return  StrictMath.min(float1, floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  minDouble() {\n+        return  StrictMath.min(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public int  multiplyExactInt() {\n+        return  StrictMath.multiplyExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongInt() {\n+        return  StrictMath.multiplyExact(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongLong() {\n+        return  StrictMath.multiplyExact(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyFullIntInt() {\n+        return  StrictMath.multiplyFull(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyHighLongLog() {\n+        return  StrictMath.multiplyHigh(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public double  nextAfterDoubleDouble() {\n+        return  StrictMath.nextAfter(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  nextAfterFloatDouble() {\n+        return  StrictMath.nextAfter(float7, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  nextDownDouble() {\n+        return  StrictMath.nextDown(float7);\n+    }\n+\n+    @Benchmark\n+    public float  nextDownFloat() {\n+        return  StrictMath.nextDown(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  nextUpDouble() {\n+        return  StrictMath.nextUp(double81);\n+    }\n+\n+    @Benchmark\n+    public float  nextUpFloat() {\n+        return  StrictMath.nextUp(float7);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble() {\n+        return  StrictMath.pow(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  random() {\n+        return  StrictMath.random();\n+    }\n+\n+    @Benchmark\n+    public double  rintDouble() {\n+        return  StrictMath.rint(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public long  roundDouble() {\n+        return  StrictMath.round( StrictMath.PI);\n+    }\n+\n+    @Benchmark\n+    public int  roundFloat() {\n+        return  StrictMath.round(eFloat);\n+    }\n+\n+    @Benchmark\n+    public double  scalbDoubleInt() {\n+        return  StrictMath.scalb(double81, int2);\n+    }\n+\n+    @Benchmark\n+    public float  scalbFloatInt() {\n+        return  StrictMath.scalb(float7, int2);\n+    }\n+\n+    @Benchmark\n+    public double  sigNumDouble() {\n+        return  StrictMath.signum(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  signumFloat() {\n+        return  StrictMath.signum(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  sinDouble() {\n+        return  StrictMath.sin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  sinhDouble() {\n+        return  StrictMath.sinh(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  sqrtDouble() {\n+        return  StrictMath.sqrt(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactIntInt() {\n+        return  StrictMath.subtractExact(int42,int5);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactLongLong() {\n+        return  StrictMath.subtractExact(long747,long13);\n+    }\n+\n+    @Benchmark\n+    public double  tanDouble() {\n+        return  StrictMath.tan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  tanhDouble() {\n+        return  StrictMath.tanh(double1);\n+    }\n+\n+    @Benchmark\n+    public double  toDegreesDouble() {\n+        return  StrictMath.toDegrees(double81);\n+    }\n+\n+    @Benchmark\n+    public double  toIntExactLong() {\n+        return  StrictMath.toIntExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  toRadiansDouble() {\n+        return  StrictMath.toRadians(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ulpDouble() {\n+        return  StrictMath.ulp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  ulpFloat() {\n+        return  StrictMath.ulp(float7);\n+    }\n+}\n","filename":"micros-jdk11\/src\/main\/java\/org\/openjdk\/bench\/java\/lang\/StrictMathBench.java","additions":418,"deletions":0,"binary":false,"changes":418,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/maven-v4_0_0.xsd\">\r\n+  <parent>\r\n+    <artifactId>jmh-jdk-microbenchmarks<\/artifactId>\r\n+    <groupId>org.openjdk<\/groupId>\r\n+    <version>1.0-SNAPSHOT<\/version>\r\n+  <\/parent>\r\n+  <modelVersion>4.0.0<\/modelVersion>\r\n+  <artifactId>micros-jdk15<\/artifactId>\r\n+  <name>OpenJDK Microbenchmark Corpus (JDK 15)<\/name>\r\n+  <build>\r\n+    <plugins>\r\n+      <plugin>\r\n+        <artifactId>maven-compiler-plugin<\/artifactId>\r\n+        <version>3.1<\/version>\r\n+        <configuration>\r\n+          <source>9<\/source>\r\n+          <target>9<\/target>\r\n+          <compilerArgs>\r\n+            <arg>--add-modules=java.base,java.compiler,java.instrument,jdk.jartool,jdk.attach<\/arg>\r\n+            <arg>--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED<\/arg>\r\n+            <arg>--add-exports=jdk.jartool\/sun.tools.jar=ALL-UNNAMED<\/arg>\r\n+          <\/compilerArgs>\r\n+        <\/configuration>\r\n+      <\/plugin>\r\n+      <plugin>\r\n+        <groupId>com.mycila.maven-license-plugin<\/groupId>\r\n+        <artifactId>maven-license-plugin<\/artifactId>\r\n+        <version>1.10.b1<\/version>\r\n+        <executions>\r\n+          <execution>\r\n+            <phase>process-sources<\/phase>\r\n+            <goals>\r\n+              <goal>format<\/goal>\r\n+            <\/goals>\r\n+            <configuration>\r\n+              <header>${project.basedir}\/src\/license\/gpl_cpe\/header.txt<\/header>\r\n+              <skipExistingHeaders>true<\/skipExistingHeaders>\r\n+              <strictCheck>true<\/strictCheck>\r\n+              <includes>\r\n+                <include>src\/main\/java<\/include>\r\n+              <\/includes>\r\n+              <mapping>\r\n+                <java>PHP<\/java>\r\n+              <\/mapping>\r\n+            <\/configuration>\r\n+          <\/execution>\r\n+        <\/executions>\r\n+      <\/plugin>\r\n+      <plugin>\r\n+        <artifactId>maven-shade-plugin<\/artifactId>\r\n+        <version>2.3<\/version>\r\n+        <executions>\r\n+          <execution>\r\n+            <phase>package<\/phase>\r\n+            <goals>\r\n+              <goal>shade<\/goal>\r\n+            <\/goals>\r\n+            <configuration>\r\n+              <transformers>\r\n+                <transformer>\r\n+                  <mainClass>org.openjdk.jmh.Main<\/mainClass>\r\n+                <\/transformer>\r\n+                <transformer>\r\n+                  <resource>redefineagent-${project.version}.zip<\/resource>\r\n+                  <file>..\/redefineagent\/target\/redefineagent-${project.version}.zip<\/file>\r\n+                <\/transformer>\r\n+              <\/transformers>\r\n+              <createDependencyReducedPom>true<\/createDependencyReducedPom>\r\n+            <\/configuration>\r\n+          <\/execution>\r\n+        <\/executions>\r\n+      <\/plugin>\r\n+    <\/plugins>\r\n+  <\/build>\r\n+  <dependencies>\r\n+    <dependency>\r\n+      <groupId>org.openjdk<\/groupId>\r\n+      <artifactId>redefineagent<\/artifactId>\r\n+      <version>1.0-SNAPSHOT<\/version>\r\n+      <scope>provided<\/scope>\r\n+      <exclusions>\r\n+        <exclusion>\r\n+          <artifactId>micros-util<\/artifactId>\r\n+          <groupId>org.openjdk<\/groupId>\r\n+        <\/exclusion>\r\n+      <\/exclusions>\r\n+    <\/dependency>\r\n+    <dependency>\r\n+      <groupId>org.openjdk.jmh<\/groupId>\r\n+      <artifactId>jmh-generator-annprocess<\/artifactId>\r\n+      <version>1.21<\/version>\r\n+      <scope>provided<\/scope>\r\n+    <\/dependency>\r\n+  <\/dependencies>\r\n+<\/project>\r\n+\r\n","filename":"micros-jdk15\/dependency-reduced-pom.xml","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project-shared-configuration>\n+    <!--\n+This file contains additional configuration written by modules in the NetBeans IDE.\n+The configuration is intended to be shared among all the users of project and\n+therefore it is assumed to be part of version control checkout.\n+Without this configuration present, some functionality in the IDE may be limited or fail altogether.\n+-->\n+    <properties xmlns=\"http:\/\/www.netbeans.org\/ns\/maven-properties-data\/1\">\n+        <!--\n+Properties that influence various parts of the IDE, especially code formatting and the like. \n+You can copy and paste the single properties, into the pom.xml file and the IDE will pick them up.\n+That way multiple projects can share the same settings (useful for formatting rules for example).\n+Any value defined here will override the pom.xml file value but is only applicable to the current project.\n+-->\n+        <netbeans.hint.jdkPlatform>JDK_16<\/netbeans.hint.jdkPlatform>\n+    <\/properties>\n+<\/project-shared-configuration>\n","filename":"micros-jdk15\/nb-configuration.xml","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n- Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    <artifactId>micros-jdk11<\/artifactId>\n+    <artifactId>micros-jdk15<\/artifactId>\n@@ -35,1 +35,1 @@\n-    <name>OpenJDK Microbenchmark Corpus (JDK 11)<\/name>\n+    <name>OpenJDK Microbenchmark Corpus (JDK 15)<\/name>\n@@ -106,4 +106,0 @@\n-    <properties>\n-        <jmh.version>1.21<\/jmh.version>\n-    <\/properties>\n-\n@@ -117,5 +113,0 @@\n-        <dependency>\n-            <groupId>org.openjdk<\/groupId>\n-            <artifactId>micros-util<\/artifactId>\n-            <version>${project.version}<\/version>\n-        <\/dependency>\n","filename":"micros-jdk15\/pom.xml","additions":3,"deletions":12,"binary":false,"changes":15,"previous_filename":"micros-jdk11\/pom.xml","status":"copied"},{"patch":"","filename":"micros-jdk15\/src\/license\/gpl_cpe\/header.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"micros-jdk11\/src\/license\/gpl_cpe\/header.txt","status":"copied"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Thread)\n+public class MathBench15 {\n+    public int int1 = 1, int2 = 2, int42 = 42, int5 = 5;\n+    public long long1 = 1L, long2 = 2L, long747 = 747L, long13 = 13L;\n+    public float float1 = 1.0f, float2 = 2.0f, floatNegative99 = -99.0f, float7 = 7.0f, eFloat = 2.718f;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+\n+    @Benchmark\n+    public int  absExactInt() {\n+        return  Math.absExact(int2);\n+    }\n+\n+    @Benchmark\n+    public long  absExactLong() {\n+        return  Math.absExact(long2);\n+    }\n+\n+    @Benchmark\n+    public int  DecrementExactInt() {\n+        return  Math.decrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  DecrementExactLong() {\n+        return  Math.decrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public int  IncrementExactInt() {\n+        return  Math.incrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  IncrementExactLong() {\n+        return  Math.incrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public int  negateExactInt() {\n+        return  Math.negateExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  negateExactLong() {\n+        return  Math.negateExact(long747);\n+    }\n+\n+}\n","filename":"micros-jdk15\/src\/main\/java\/org\/openjdk\/bench\/java\/lang\/MathBench15.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Thread)\n+public class StrictMathBench15 {\n+\n+    public int int1 = 1, int2 = 2, int42 = 42, int5 = 5;\n+    public long long1 = 1L, long2 = 2L, long747 = 747L, long13 = 13L;\n+    public float float1 = 1.0f, float2 = 2.0f, floatNegative99 = -99.0f, float7 = 7.0f, eFloat = 2.718f;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+\n+    @Benchmark\n+    public int  absExactInt() {\n+        return  StrictMath.absExact(int2);\n+    }\n+\n+    @Benchmark\n+    public long  absExactLong() {\n+        return  StrictMath.absExact(long2);\n+    }\n+\n+    @Benchmark\n+    public int  DecrementExactInt() {\n+        return  StrictMath.decrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  DecrementExactLong() {\n+        return  StrictMath.decrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public int  IncrementExactInt() {\n+        return  StrictMath.incrementExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  IncrementExactLong() {\n+        return  StrictMath.incrementExact(long747);\n+    }\n+\n+    @Benchmark\n+    public int  negateExactInt() {\n+        return  StrictMath.negateExact(int42);\n+    }\n+\n+    @Benchmark\n+    public long  negateExactLong() {\n+        return  StrictMath.negateExact(long747);\n+    }\n+\n+}\n","filename":"micros-jdk15\/src\/main\/java\/org\/openjdk\/bench\/java\/lang\/StrictMathBench15.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,464 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * A micro-benchmark for every StrictMath API.\n+ *\n+ * @author Charlie Hunt\n+ *\/\n+\n+@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+@Fork(2)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Thread)\n+public class StrictMathBench {\n+\n+    public int int1 = 1, int2 = 2, int42 = 42, int5 = 5;\n+    public long long1 = 1L, long2 = 2L, long747 = 747L, long13 = 13L;\n+    public float float1 = 1.0f, float2 = 2.0f, floatNegative99 = -99.0f, float7 = 7.0f, eFloat = 2.718f;\n+    public double double1 = 1.0d, double2 = 2.0d, double81 = 81.0d, doubleNegative12 = -12.0d, double4Dot1 = 4.1d;\n+\n+    @Benchmark\n+    public double  absDouble() {\n+        return  StrictMath.abs(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  absFloat() {\n+        return  StrictMath.abs(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public int  absInt() {\n+        return  StrictMath.abs(int42);\n+    }\n+\n+    @Benchmark\n+    public long  absLong() {\n+        return  StrictMath.abs(long13);\n+    }\n+\n+\/\/    @Benchmark\n+\/\/    public int  absExactInt() {\n+\/\/        return  StrictMath.absExact(int2);\n+\/\/    }\n+\n+\/\/    @Benchmark\n+\/\/    public long  absExactLong() {\n+\/\/        return  StrictMath.absExact(long2);\n+\/\/    }\n+\n+    @Benchmark\n+    public double  acosDouble() {\n+        return  StrictMath.acos(double1);\n+    }\n+\n+    @Benchmark\n+    public int  addExactInt() {\n+        return  StrictMath.addExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  addExactLong() {\n+        return  StrictMath.addExact(long2, long13);\n+    }\n+\n+    @Benchmark\n+    public double  asinDouble() {\n+        return  StrictMath.asin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atanDouble() {\n+        return  StrictMath.atan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  atan2Double() {\n+        return  StrictMath.atan2(double1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  cbrt() {\n+        return  StrictMath.cbrt(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ceilDouble() {\n+        return  StrictMath.ceil(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  copySignDouble() {\n+        return  StrictMath.copySign(double81, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public float  copySignFloat() {\n+        return  StrictMath.copySign(floatNegative99, float1);\n+    }\n+\n+    @Benchmark\n+    public double  cosDouble() {\n+        return  StrictMath.cos(double1);\n+    }\n+\n+    @Benchmark\n+    public double  coshDouble() {\n+        return  StrictMath.cosh(double2);\n+    }\n+\n+\/\/    @Benchmark\n+\/\/    public int  DecrementExactInt() {\n+\/\/        return  StrictMath.decrementExact(int42);\n+\/\/    }\n+\/\/\n+\/\/    @Benchmark\n+\/\/    public long  DecrementExactLong() {\n+\/\/        return  StrictMath.decrementExact(long747);\n+\/\/    }\n+\n+    @Benchmark\n+    public double  expDouble() {\n+        return  StrictMath.exp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  expm1() {\n+        return  StrictMath.expm1(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  floorDouble() {\n+        return  StrictMath.floor(doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  floorDivIntInt() {\n+        return  StrictMath.floorDiv(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongInt() {\n+        return  StrictMath.floorDiv(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  floorDivLongLong() {\n+        return  StrictMath.floorDiv(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public int  floorModIntInt() {\n+        return  StrictMath.floorMod(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public int  floorModLongInt() {\n+        return  StrictMath.floorMod(long747, int5);\n+    }\n+\n+    @Benchmark\n+    public long  floorModLongLong() {\n+        return  StrictMath.floorMod(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public double  fmaDouble() {\n+        return  StrictMath.fma(double2, double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  fmaFloat() {\n+        return  StrictMath.fma(float2, floatNegative99, float7);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentDouble() {\n+        return  StrictMath.getExponent(double81);\n+    }\n+\n+    @Benchmark\n+    public int  getExponentFloat() {\n+        return  StrictMath.getExponent(float7);\n+    }\n+\n+    @Benchmark\n+    public double  hypotDouble() {\n+        return  StrictMath.hypot(double2, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  IEEERemainderDouble() {\n+        return  StrictMath.IEEEremainder(double81, double4Dot1);\n+    }\n+\n+\/\/    @Benchmark\n+\/\/    public int  IncrementExactInt() {\n+\/\/        return  StrictMath.incrementExact(int42);\n+\/\/    }\n+\/\/\n+\/\/    @Benchmark\n+\/\/    public long  IncrementExactLong() {\n+\/\/        return  StrictMath.incrementExact(long747);\n+\/\/    }\n+\n+    @Benchmark\n+    public double  logDouble() {\n+        return  StrictMath.log(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log10Double() {\n+        return  StrictMath.log10(double81);\n+    }\n+\n+    @Benchmark\n+    public double  log1pDouble() {\n+        return  StrictMath.log1p(double81);\n+    }\n+\n+    @Benchmark\n+    public int  maxInt() {\n+        return  StrictMath.max(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  maxLong() {\n+        return  StrictMath.max(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  maxFloat() {\n+        return  StrictMath.max(float1, float2);\n+    }\n+\n+    @Benchmark\n+    public double  maxDouble() {\n+        return  StrictMath.max(double1, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public int  minInt() {\n+        return  StrictMath.min(int1, int2);\n+    }\n+\n+    @Benchmark\n+    public long  minLong() {\n+        return  StrictMath.min(long1, long2);\n+    }\n+\n+    @Benchmark\n+    public float  minFloat() {\n+        return  StrictMath.min(float1, floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  minDouble() {\n+        return  StrictMath.min(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public int  multiplyExactInt() {\n+        return  StrictMath.multiplyExact(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongInt() {\n+        return  StrictMath.multiplyExact(long747, int42);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyExactLongLong() {\n+        return  StrictMath.multiplyExact(long747, long13);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyFullIntInt() {\n+        return  StrictMath.multiplyFull(int42, int5);\n+    }\n+\n+    @Benchmark\n+    public long  multiplyHighLongLog() {\n+        return  StrictMath.multiplyHigh(long747, long13);\n+    }\n+\n+\/\/    @Benchmark\n+\/\/    public int  negateExactInt() {\n+\/\/        return  StrictMath.negateExact(int42);\n+\/\/    }\n+\/\/\n+\/\/    @Benchmark\n+\/\/    public long  negateExactLong() {\n+\/\/        return  StrictMath.negateExact(long747);\n+\/\/    }\n+\n+    @Benchmark\n+    public double  nextAfterDoubleDouble() {\n+        return  StrictMath.nextAfter(double81, double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public float  nextAfterFloatDouble() {\n+        return  StrictMath.nextAfter(float7, doubleNegative12);\n+    }\n+\n+    @Benchmark\n+    public double  nextDownDouble() {\n+        return  StrictMath.nextDown(float7);\n+    }\n+\n+    @Benchmark\n+    public float  nextDownFloat() {\n+        return  StrictMath.nextDown(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  nextUpDouble() {\n+        return  StrictMath.nextUp(double81);\n+    }\n+\n+    @Benchmark\n+    public float  nextUpFloat() {\n+        return  StrictMath.nextUp(float7);\n+    }\n+\n+    @Benchmark\n+    public double  powDouble() {\n+        return  StrictMath.pow(double4Dot1, double2);\n+    }\n+\n+    @Benchmark\n+    public double  random() {\n+        return  StrictMath.random();\n+    }\n+\n+    @Benchmark\n+    public double  rintDouble() {\n+        return  StrictMath.rint(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public long  roundDouble() {\n+        return  StrictMath.round( StrictMath.PI);\n+    }\n+\n+    @Benchmark\n+    public int  roundFloat() {\n+        return  StrictMath.round(eFloat);\n+    }\n+\n+    @Benchmark\n+    public double  scalbDoubleInt() {\n+        return  StrictMath.scalb(double81, int2);\n+    }\n+\n+    @Benchmark\n+    public float  scalbFloatInt() {\n+        return  StrictMath.scalb(float7, int2);\n+    }\n+\n+    @Benchmark\n+    public double  sigNumDouble() {\n+        return  StrictMath.signum(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  signumFloat() {\n+        return  StrictMath.signum(floatNegative99);\n+    }\n+\n+    @Benchmark\n+    public double  sinDouble() {\n+        return  StrictMath.sin(double1);\n+    }\n+\n+    @Benchmark\n+    public double  sinhDouble() {\n+        return  StrictMath.sinh(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  sqrtDouble() {\n+        return  StrictMath.sqrt(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactIntInt() {\n+        return  StrictMath.subtractExact(int42,int5);\n+    }\n+\n+    @Benchmark\n+    public double  subtractExactLongLong() {\n+        return  StrictMath.subtractExact(long747,long13);\n+    }\n+\n+    @Benchmark\n+    public double  tanDouble() {\n+        return  StrictMath.tan(double1);\n+    }\n+\n+    @Benchmark\n+    public double  tanhDouble() {\n+        return  StrictMath.tanh(double1);\n+    }\n+\n+    @Benchmark\n+    public double  toDegreesDouble() {\n+        return  StrictMath.toDegrees(double81);\n+    }\n+\n+    @Benchmark\n+    public double  toIntExactLong() {\n+        return  StrictMath.toIntExact(long747);\n+    }\n+\n+    @Benchmark\n+    public double  toRadiansDouble() {\n+        return  StrictMath.toRadians(double81);\n+    }\n+\n+    @Benchmark\n+    public double  ulpDouble() {\n+        return  StrictMath.ulp(double4Dot1);\n+    }\n+\n+    @Benchmark\n+    public double  ulpFloat() {\n+        return  StrictMath.ulp(float7);\n+    }\n+}\n","filename":"micros-jdk8\/src\/main\/java\/org\/openjdk\/bench\/java\/lang\/StrictMathBench.java","additions":464,"deletions":0,"binary":false,"changes":464,"status":"added"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,38 @@\n+        <profile>\n+            <id>jdk15<\/id>\n+            <activation>\n+                <jdk>[15,)<\/jdk>\n+            <\/activation>\n+            <dependencies>\n+                <dependency>\n+                    <groupId>org.openjdk<\/groupId>\n+                    <artifactId>micros-jdk8<\/artifactId>\n+                    <version>${project.version}<\/version>\n+                <\/dependency>\n+                <dependency>\n+                    <groupId>org.openjdk<\/groupId>\n+                    <artifactId>micros-jdk9<\/artifactId>\n+                    <version>${project.version}<\/version>\n+                <\/dependency>\n+                <dependency>\n+                    <groupId>org.openjdk<\/groupId>\n+                    <artifactId>micros-jdk11<\/artifactId>\n+                    <version>${project.version}<\/version>\n+                <\/dependency>\n+                <dependency>\n+                    <groupId>org.openjdk<\/groupId>\n+                    <artifactId>micros-jdk15<\/artifactId>\n+                    <version>${project.version}<\/version>\n+                <\/dependency>\n+                <dependency>\n+                    <groupId>org.openjdk<\/groupId>\n+                    <artifactId>redefineagent<\/artifactId>\n+                    <version>${project.version}<\/version>\n+                <\/dependency>\n+                <dependency>\n+                    <groupId>org.openjdk<\/groupId>\n+                    <artifactId>micros-javac<\/artifactId>\n+                    <version>${project.version}<\/version>\n+                <\/dependency>\n+            <\/dependencies>\n+        <\/profile>\n","filename":"micros-uber\/pom.xml","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -75,0 +75,16 @@\n+            <\/modules>\n+        <\/profile>\n+        <profile>\n+            <id>jdk15<\/id>\n+            <activation>\n+                <jdk>[15,)<\/jdk>\n+            <\/activation>\n+            <modules>\n+                <module>micros-uber<\/module>\n+                <module>micros-jdk8<\/module>\n+                <module>micros-jdk9<\/module>\n+                <module>micros-jdk11<\/module>\n+                <module>micros-jdk15<\/module>\n+                <module>micros-util<\/module>\n+                <module>redefineagent<\/module>\n+                <module>micros-javac<\/module>\n","filename":"pom.xml","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}