{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n- * <p> A tool to statically instrument classfiles to collect coverage. <\/p> <p>\n+ * <p> A tool to statically instrument class files to collect coverage. <\/p> <p>\n@@ -102,1 +102,1 @@\n-     * instrumented data will owerwrite source binaries\n+     * instrumented data will overwrite source binaries\n@@ -332,0 +332,1 @@\n+\n@@ -333,1 +334,10 @@\n-        return \"java com.sun.tdk.jcov.Instr [-option value] target\";\n+        return \"java com.sun.tdk.jcov.Instr [-option value] source1 sourceN\";\n+    }\n+\n+    \/**\n+     * @return Command note\n+     * @see com.sun.tdk.jcov.tools.JCovTool#noteString()\n+     *\/\n+    @Override\n+    protected String noteString() {\n+        return \"  Note: Starting from JDK 9, the sources: source1,sourceN should be added to the class path of the command line.\";\n@@ -336,0 +346,1 @@\n+\n@@ -337,1 +348,2 @@\n-        return \"java -cp jcov.jar com.sun.tdk.jcov.Instr -include java.lang.* -type block -output classes_instrumented classes\";\n+        return \"java -cp jcov.jar:source1:source2 com.sun.tdk.jcov.Instr -include java.lang.* \" +\n+                \"-type block -output instrumented_classes source1 source2\";\n@@ -341,1 +353,1 @@\n-        return \"instruments classfiles and creates template.xml\";\n+        return \"instruments class files and creates template.xml\";\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-    public final static String sccsVersion = \"1.6 01\/17\/03\";\n@@ -76,3 +75,1 @@\n-     * Properties read from CLI (\n-     *\n-     * @ support)\n+     * Properties read from CLI (@ support)\n@@ -137,1 +134,1 @@\n-     * @return\n+     * @return SPI descriptor\n@@ -185,7 +182,0 @@\n-     *\n-     * @param spiClass\n-     * @param className\n-     * @return\n-     * @throws InstantiationException\n-     * @throws IllegalAccessException\n-     * @throws ClassNotFoundException\n@@ -193,1 +183,1 @@\n-    private ServiceProvider instantiateServiceProvider(SPIDescr spi, String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException, Exception {\n+    private ServiceProvider instantiateServiceProvider(SPIDescr spi, String className) throws Exception {\n@@ -200,2 +190,1 @@\n-        \/\/Class<? extends ServiceProvider> customProviderClass = (Class<? extends ServiceProvider>) classLoader.loadClass(className);\n-        ServiceProvider customProviderInstance = (ServiceProvider) classLoader.loadClass(className).newInstance();\n+        ServiceProvider customProviderInstance = (ServiceProvider) classLoader.loadClass(className).getDeclaredConstructor().newInstance();\n@@ -677,0 +666,3 @@\n+        if( tool.noteString() != null ) {\n+            out.println(tool.noteString());\n+        }\n@@ -678,1 +670,1 @@\n-            out.println(\"    options:\");\n+            out.println(\"    Options:\");\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/tools\/EnvHandler.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,0 @@\n-\/\/    public static OptionDescr[] VALID_OPTIONS;\n@@ -77,0 +76,9 @@\n+    \/**\n+     * Placeholder for command notes if needed\n+     *\n+     * @return Command note\n+     *\/\n+    protected String noteString() {\n+        return null;\n+    }\n+\n@@ -132,1 +140,1 @@\n-                o = c.newInstance();\n+                o = c.getDeclaredConstructor().newInstance();\n@@ -160,1 +168,1 @@\n-     * @param toolClass tool to load\n+     * @param toolClassObject tool to load\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/tools\/JCovTool.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,12 +29,3 @@\n-import java.io.BufferedInputStream;\n-import java.io.BufferedOutputStream;\n-import java.io.BufferedReader;\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.OutputStreamWriter;\n+import org.objectweb.asm.Opcodes;\n+\n+import java.io.*;\n@@ -50,1 +41,0 @@\n-import java.util.logging.ConsoleHandler;\n@@ -52,5 +42,1 @@\n-import java.util.logging.Handler;\n-import java.util.logging.Level;\n-import java.util.logging.LogManager;\n-import java.util.logging.LogRecord;\n-import java.util.logging.Logger;\n+import java.util.logging.*;\n@@ -59,0 +45,2 @@\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n@@ -63,2 +51,0 @@\n-import org.objectweb.asm.Opcodes;\n-\n@@ -529,1 +515,1 @@\n-    public static void addToClasspath(String[] path) {\n+    public static void addToClasspath(String[] paths) {\n@@ -531,3 +517,2 @@\n-            URLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n-            Class sysclass = URLClassLoader.class;\n-\n+            URLClassLoader systemClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n+            Class sClass = URLClassLoader.class;\n@@ -535,1 +520,1 @@\n-                Method method = sysclass.getDeclaredMethod(\"addURL\", new Class[]{URL.class});\n+                Method method = sClass.getDeclaredMethod(\"addURL\", new Class[]{URL.class});\n@@ -538,4 +523,4 @@\n-                URL[] urls = new URL[path.length];\n-                for (int i = 0; i < path.length; i++) {\n-                    urls[i] = new File(path[i]).toURI().toURL();\n-                    method.invoke(sysloader, new Object[]{urls[i]});\n+                URL[] urls = new URL[paths.length];\n+                for (int i = 0; i < paths.length; i++) {\n+                    urls[i] = new File(paths[i]).toURI().toURL();\n+                    method.invoke(systemClassLoader, new Object[]{urls[i]});\n@@ -546,0 +531,14 @@\n+        } else {\n+            \/\/ Java 9+\n+            Stream<String> classpath = Arrays.stream(System.getProperty(\"java.class.path\").split(File.pathSeparator));\n+            for (int i = 0; i < paths.length; i++) {\n+                String path = paths[i];\n+                if (!classpath.filter(cp -> cp.equals(path)).findFirst().isPresent()) {\n+                    String cps = Arrays.stream(paths).collect(Collectors.joining(\"#\"));\n+                    String s1 = cps.replaceAll(\"#\", \":\");\n+                    String s2 = cps.replaceAll(\"#\", \" \");\n+                    System.err.format(\"Warning: Add input source(s) to the classpath: -cp %s%n\" +\n+                                    \"Example: java -cp jcov.jar:%s com.sun.tdk.jcov.Instr -t <template> -i <pattern> -o <output> %s%n\",\n+                            s1, s1, s2);\n+                }\n+            }\n@@ -556,1 +555,1 @@\n-            ArrayList<String> classes = new ArrayList<String>();\n+            ArrayList<String> classes = new ArrayList<>();\n@@ -558,1 +557,1 @@\n-            Utils.addToClasspath((String[]) classes.toArray(new String[0]));\n+            Utils.addToClasspath(classes.toArray(new String[0]));\n@@ -635,3 +634,1 @@\n-            InputStream in = null;\n-            try {\n-                in = Utils.class.getResourceAsStream(\"\/com\/sun\/tdk\/jcov\/logging.properties\");\n+            try (InputStream in = Utils.class.getResourceAsStream(\"\/com\/sun\/tdk\/jcov\/logging.properties\")) {\n@@ -643,9 +640,1 @@\n-            } catch (Exception ex) {\n-            } finally {\n-                try {\n-                    if (in != null) {\n-                        in.close();\n-                    }\n-                } catch (IOException ex1) {\n-                }\n-            }\n+            } catch (Exception ignore) {}\n@@ -657,4 +646,3 @@\n-            InputStream in = null;\n-            try {\n-                System.setProperty(\"java.util.logging.config.file\", propfile);\n-                in = Utils.class.getResourceAsStream(propfile);\n+            System.setProperty(\"java.util.logging.config.file\", propfile);\n+\n+            try (InputStream in = Utils.class.getResourceAsStream(propfile)) {\n@@ -662,6 +650,1 @@\n-            } catch (Exception ex) {\n-                try {\n-                    in.close();\n-                } catch (IOException ex1) {\n-                }\n-            }\n+            } catch (Exception ignore) {}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/util\/Utils.java","additions":37,"deletions":54,"binary":false,"changes":91,"status":"modified"}]}