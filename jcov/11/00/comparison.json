{"files":[{"patch":"@@ -26,1 +26,1 @@\n-build.number = 7\n+build.number = 8\n","filename":"build\/release.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,1 +86,1 @@\n-     * Constructs a new {@link MethodAdapter} object.\n+     * Constructs a new {@link ForkingMethodAdapter} object.\n@@ -88,1 +88,2 @@\n-     * @param mv the code visitor to which this adapter must delegate calls.\n+     * @param mv1 the first code visitor to which this adapter must delegate calls.\n+     * @param mv2 the second code visitor to which this adapter must delegate calls.\n@@ -168,7 +169,4 @@\n-    public void visitMethodInsn(\n-            final int opcode,\n-            final String owner,\n-            final String name,\n-            final String desc) {\n-        mv1.visitMethodInsn(opcode, owner, name, desc);\n-        mv2.visitMethodInsn(opcode, owner, name, desc);\n+    public void visitMethodInsn(final int opcode, final String owner, final String name, final String desc,\n+                                final boolean isInterface) {\n+        mv1.visitMethodInsn(opcode, owner, name, desc, isInterface);\n+        mv2.visitMethodInsn(opcode, owner, name, desc, isInterface);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ForkingMethodAdapter.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-            mv.visitMethodInsn(INVOKESTATIC, \"com\/sun\/tdk\/jcov\/runtime\/Collect\", \"saveResults\", \"()V\");\n+            mv.visitMethodInsn(INVOKESTATIC, \"com\/sun\/tdk\/jcov\/runtime\/Collect\", \"saveResults\", \"()V\", false);\n@@ -68,1 +68,1 @@\n-                    mv.visitMethodInsn(INVOKESTATIC, \"com\/sun\/tdk\/jcov\/runtime\/Collect\", \"saveResults\", \"()V\");\n+                    mv.visitMethodInsn(INVOKESTATIC, \"com\/sun\/tdk\/jcov\/runtime\/Collect\", \"saveResults\", \"()V\", false);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/SavePointsMethodAdapter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-    static int invokeCount = 0;\n@@ -53,0 +52,1 @@\n+    \/\/ method attributes\n@@ -54,0 +54,1 @@\n+    private int methAccess;\n@@ -69,1 +70,1 @@\n-    public static final Map<String, Integer> map = new HashMap<String, Integer>();\n+    public static final Map<String, Integer> map = new HashMap<>();\n@@ -71,1 +72,3 @@\n-    public StaticInvokeMethodAdapter(MethodVisitor mv, String className, String methName, int access, final InstrumentationParams params) {\n+    public StaticInvokeMethodAdapter(MethodVisitor mv, String className,\n+                                     String methName, int methAccess,\n+                                     final InstrumentationParams params) {\n@@ -74,1 +77,0 @@\n-        this.params = params;\n@@ -76,0 +78,2 @@\n+        this.methAccess = methAccess;\n+        this.params = params;\n@@ -111,0 +115,1 @@\n+\n@@ -120,2 +125,2 @@\n-            if (!owner.equals(\"java\/lang\/Object\")) {\n-                int id = params.isInnerInstrumentationIncludes(className) ? 0 : -1;\n+            if (!owner.equals(\"java\/lang\/Object\") && params.isInnerInstrumentationIncludes(className)) {\n+              int id =  ( (this.methAccess & ACC_BRIDGE) == 0x0) ? -1 : 0;\n@@ -131,1 +136,0 @@\n-\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/StaticInvokeMethodAdapter.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014,2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-    private ArrayList<JavapLine> lines = new ArrayList<JavapLine>();\n+    private final ArrayList<JavapLine> lines = new ArrayList<>();\n@@ -52,1 +52,1 @@\n-    private HashMap<String, ArrayList<Integer>> methods = new HashMap<String, ArrayList<Integer>>();\n+    private final HashMap<String, ArrayList<Integer>> methods = new HashMap<>();\n@@ -70,1 +70,0 @@\n-\n@@ -96,1 +95,1 @@\n-            BufferedReader inStream = null;\n+            BufferedReader inStream;\n@@ -118,2 +117,1 @@\n-                    parseClassName(textLine);\n-                    parsePackageName(textLine);\n+                    parsePackageAndClassNames(textLine);\n@@ -129,1 +127,1 @@\n-                    methods.put(lastMethodString, new ArrayList<Integer>());\n+                    methods.put(lastMethodString, new ArrayList<>());\n@@ -133,1 +131,1 @@\n-                        methods.put(lastMethodString, new ArrayList<Integer>());\n+                        methods.put(lastMethodString, new ArrayList<>());\n@@ -157,1 +155,1 @@\n-    private void parseClassName(String textLine) {\n+    final private static String[] JavaClassTokens = new String[] {\"implements\", \"extends\", \"{\"};\n@@ -159,3 +157,1 @@\n-        if (textLine.contains(\"implements\")) {\n-            textLine = textLine.substring(0, textLine.indexOf(\"implements\"));\n-        }\n+    private void parsePackageAndClassNames(String textLine) {\n@@ -163,2 +159,4 @@\n-        if (textLine.contains(\"extends\")) {\n-            textLine = textLine.substring(0, textLine.indexOf(\"extends\"));\n+         for( String s :  JavaClassTokens) {\n+             if (textLine.contains(s)) {\n+                 textLine = textLine.substring(0, textLine.indexOf(s));\n+            }\n@@ -166,1 +164,0 @@\n-        textLine = textLine + \"{\";\n@@ -168,4 +165,1 @@\n-        className = substringBetween(textLine, \"\\\\.\", \"\\\\ \", false);\n-        if(className != null && className.contains(\"<\") && className.contains(\">\")){\n-            className = className.substring(0, className.indexOf('<'));\n-        }\n+         textLine = textLine.substring(textLine.indexOf(\"class\")+5).trim();\n@@ -173,3 +167,3 @@\n-        if (className.startsWith(\"class\")){\n-            className = className.substring(6, className.length());\n-        }\n+         int ind = textLine.indexOf('<');\n+         if(ind != -1){\n+             textLine = textLine.substring(0, ind);\n@@ -178,8 +172,7 @@\n-    private void parsePackageName(String textLine) {\n-\n-        if (textLine.contains(\"implements\")) {\n-            textLine = textLine.substring(0, textLine.indexOf(\"implements\"));\n-        }\n-\n-        if (textLine.contains(\"extends\")) {\n-            textLine = textLine.substring(0, textLine.indexOf(\"extends\"));\n+         ind = textLine.lastIndexOf('.');\n+         if( ind > 0 ) {\n+             packageName = textLine.substring(0,ind);\n+             className = textLine.substring(ind+1);\n+         } else {\n+             className = textLine;\n+             packageName = \"\";\n@@ -187,3 +180,0 @@\n-        textLine = textLine + \"{\";\n-\n-        packageName = substringBetween(textLine, \"\\\\ \", \"\\\\.\", false);\n@@ -193,2 +183,1 @@\n-        String nameAndVMSig = \"<clinit>()V\";\n-        return nameAndVMSig;\n+        return \"<clinit>()V\";\n@@ -200,2 +189,1 @@\n-        String nameAndVMSig = \"<init>\" + vmSig;\n-        return nameAndVMSig;\n+        return \"<init>\" + vmSig;\n@@ -218,1 +206,1 @@\n-            s = className.substring(className.lastIndexOf(\".\"), className.length());\n+            s = className.substring(className.lastIndexOf(\".\"));\n@@ -221,21 +209,41 @@\n-        String newType = \"\";\n-        if (\"boolean\".equals(s) || \"Boolean\".equals(s)) {\n-            newType = \"Z\";\n-        } else if (\"void\".equals(s) || \"Void\".equals(s)) {\n-            newType = \"V\";\n-        } else if (\"int\".equals(s) || \"Integer\".equals(s)) {\n-            newType = \"I\";\n-        } else if (\"long\".equals(s) || \"Long\".equals(s)) {\n-            newType = \"J\";\n-        } else if (\"char\".equals(s) || \"Character\".equals(s)) {\n-            newType = \"C\";\n-        } else if (\"byte\".equals(s) || \"Byte\".equals(s)) {\n-            newType = \"B\";\n-        } else if (\"double\".equals(s) || \"Double\".equals(s)) {\n-            newType = \"D\";\n-        } else if (\"short\".equals(s) || \"Short\".equals(s)) {\n-            newType = \"S\";\n-        } else if (\"float\".equals(s) || \"Number\".equals(s)) {\n-            newType = \"F\";\n-        } else {\n-            newType = \"L\";\n+        String newType;\n+        switch (s) {\n+            case \"boolean\":\n+            case \"Boolean\":\n+                newType = \"Z\";\n+                break;\n+            case \"void\":\n+            case \"Void\":\n+                newType = \"V\";\n+                break;\n+            case \"int\":\n+            case \"Integer\":\n+                newType = \"I\";\n+                break;\n+            case \"long\":\n+            case \"Long\":\n+                newType = \"J\";\n+                break;\n+            case \"char\":\n+            case \"Character\":\n+                newType = \"C\";\n+                break;\n+            case \"byte\":\n+            case \"Byte\":\n+                newType = \"B\";\n+                break;\n+            case \"double\":\n+            case \"Double\":\n+                newType = \"D\";\n+                break;\n+            case \"short\":\n+            case \"Short\":\n+                newType = \"S\";\n+                break;\n+            case \"float\":\n+            case \"Number\":\n+                newType = \"F\";\n+                break;\n+            default:\n+                newType = \"L\";\n+                break;\n@@ -243,1 +251,1 @@\n-        String prefix = \"\";\n+        StringBuilder prefix = new StringBuilder();\n@@ -245,1 +253,1 @@\n-            prefix += \"[\";\n+            prefix.append(\"[\");\n@@ -269,1 +277,1 @@\n-        String vmSig = \"\";\n+        StringBuilder vmSig = new StringBuilder();\n@@ -274,1 +282,1 @@\n-                    vmSig += encodeVmType(p);\n+                    vmSig.append(encodeVmType(p));\n@@ -277,1 +285,1 @@\n-                vmSig += encodeVmType(params);\n+                vmSig.append(encodeVmType(params));\n@@ -320,2 +328,1 @@\n-        String regexStringFirst = \"([^\" + open + \"]+)(?=\" + close + \")\";\n-        String regexString = regexStringFirst;\n+        String regexString = \"([^\" + open + \"]+)(?=\" + close + \")\";\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/javap\/JavapClass.java","additions":74,"deletions":67,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+\n@@ -47,0 +48,2 @@\n+import static java.lang.String.format;\n+\n@@ -54,1 +57,3 @@\n-    private RepGen repGen;\n+    private final RepGen repGen;\n+\n+    private static String strMsg = \"\";\n@@ -84,2 +89,1 @@\n-     * @param templatePath - path to the result.xml (xml file for creating\n-     * report)\n+     * @param templatePath - path to the result.xml (xml file for creating report)\n@@ -91,1 +95,1 @@\n-        DataRoot file_image = null;\n+        DataRoot file_image;\n@@ -97,0 +101,1 @@\n+            return;\n@@ -100,1 +105,1 @@\n-            System.out.println(\"no input classes specified\");\n+            JavapRepGen.printErrorMsg(\"no input classes specified\");\n@@ -104,2 +109,2 @@\n-        ArrayList<File> classFiles = new ArrayList<File>();\n-        ArrayList<String> classFilesInJar = new ArrayList<String>();\n+        ArrayList<File> classFiles = new ArrayList<>();\n+        ArrayList<String> classFilesInJar = new ArrayList<>();\n@@ -107,1 +112,1 @@\n-        HashMap<String, JavapClass> classes = new HashMap<String, JavapClass>();\n+        HashMap<String, JavapClass> classes = new HashMap<>();\n@@ -122,1 +127,1 @@\n-                    Enumeration entries = jarFile.entries();\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n@@ -125,1 +130,1 @@\n-                        JarEntry entry = (JarEntry) entries.nextElement();\n+                        JarEntry entry = entries.nextElement();\n@@ -138,1 +143,1 @@\n-            System.out.println(\"no .class files found at the specified path: \" + classesPath);\n+            JavapRepGen.printErrorMsg(\"no .class files found at the specified path: \" + classesPath);\n@@ -161,1 +166,1 @@\n-                ArrayList<Integer> visitedBlocksNumbers = new ArrayList<Integer>();\n+                ArrayList<Integer> visitedBlocksNumbers = new ArrayList<>();\n@@ -179,1 +184,1 @@\n-                List<JavapLine> methodLines = null;\n+                List<JavapLine> methodLines;\n@@ -181,1 +186,0 @@\n-\n@@ -184,2 +188,0 @@\n-                }\n-\n@@ -187,1 +189,0 @@\n-\n@@ -189,1 +190,0 @@\n-\n@@ -195,1 +195,6 @@\n-\n+                } else {\n+                    JavapRepGen.printErrorMsg(format(\"Can't get javap output for %s.class (%s) at the specified path: %s\",\n+                            dataClass.getName(),\n+                            templatePath,\n+                            classesPath));\n+                }\n@@ -203,1 +208,1 @@\n-            System.err.println(\"error in report generation: \" + e);\n+            JavapRepGen.printErrorMsg(\"error in report generation: \" + e);\n@@ -208,0 +213,7 @@\n+    private static void printErrorMsg(String msg) {\n+        if ( strMsg.hashCode() != msg.hashCode() ) {\n+            strMsg = msg;\n+            System.err.println(msg);\n+        }\n+    }\n+\n@@ -210,1 +222,1 @@\n-        ArrayList<File> newFiles = new ArrayList<File>();\n+        ArrayList<File> newFiles = new ArrayList<>();\n@@ -238,1 +250,1 @@\n-        ArrayList<String> newFilesInJar = new ArrayList<String>();\n+        ArrayList<String> newFilesInJar = new ArrayList<>();\n@@ -241,1 +253,0 @@\n-\n@@ -245,1 +256,0 @@\n-\n@@ -247,1 +257,0 @@\n-\n@@ -250,1 +259,0 @@\n-\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/javap\/JavapRepGen.java","additions":35,"deletions":27,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    private static boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n+    \/\/ private final static boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n@@ -141,1 +141,0 @@\n-\n@@ -146,1 +145,0 @@\n-                PrintStream ps = System.out;\n@@ -148,1 +146,1 @@\n-                    Merger.innerMain(new String[]{\"-output\", dest, \"-scale\", \"-compress\", tmpFileName, src}, ps);\n+                    Merger.main(new String[]{\"-output\", dest, \"-scale\", \"-compress\", tmpFileName, src});\n@@ -150,1 +148,1 @@\n-                    Merger.innerMain(new String[]{\"-output\", dest, tmpFileName, src}, ps);\n+                    Merger.main(new String[]{\"-output\", dest, tmpFileName, src});\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/runtime\/JCovXMLFileSaver.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}