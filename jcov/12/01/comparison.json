{"files":[{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,3 +25,3 @@\n-asm.checksum = 3f5199523fb95304b44563f5d56d9f5a07270669\n-asm.tree.checksum = dfcad5abbcff36f8bdad5647fe6f4972e958ad59\n-asm.util.checksum = a8f978fbad00c565210bebedb28e5d6f73327134\n+asm.checksum = 11ae50d25b0fec4cff74a2c6b217280d9c727b52\n+asm.tree.checksum = b7eceb80554b955d73cea443f143d945f87755a5\n+asm.util.checksum = 9a3fb3a5cd6364dc5ca86d832093d7bcaa4ac927\n@@ -30,3 +30,3 @@\n-asm.jar = asm-8.0.1.jar\n-asm.tree.jar = asm-tree-8.0.1.jar\n-asm.util.jar = asm-util-8.0.1.jar\n+asm.jar = asm-9.1.jar\n+asm.tree.jar = asm-tree-9.1.jar\n+asm.util.jar = asm-util-9.1.jar\n","filename":"build\/build.properties","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-build.number = 8\n+build.number = 9\n\\ No newline at end of file\n","filename":"build\/release.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationOptions;\n-import com.sun.tdk.jcov.instrument.InstrumentationOptions.InstrumentationMode;\n-import com.sun.tdk.jcov.instrument.InstrumentationOptions.MERGE;\n@@ -36,1 +33,0 @@\n-import com.sun.tdk.jcov.tools.LoggingFormatter;\n@@ -39,0 +35,1 @@\n+\n@@ -46,0 +43,3 @@\n+import static com.sun.tdk.jcov.instrument.InstrumentationOptions.*;\n+import static com.sun.tdk.jcov.util.Utils.CheckOptions.*;\n+\n@@ -69,1 +69,1 @@\n-    private boolean genabstract = false;\n+    private boolean genAbstract = false;\n@@ -216,1 +216,1 @@\n-        if (gennative || genabstract) {\n+        if (gennative || genAbstract) {\n@@ -241,1 +241,16 @@\n-            InstrumentationParams params = new InstrumentationParams(innerinvocations, false, false, gennative, genfield, false, genabstract ? InstrumentationOptions.ABSTRACTMODE.DIRECT : InstrumentationOptions.ABSTRACTMODE.NONE, include, exclude, callerInclude, callerExclude, m_include, m_exclude, mode, save_beg, save_end)\n+            InstrumentationParams params = new InstrumentationParams(innerinvocations,\n+                    false,\n+                    false,\n+                    gennative,\n+                    genfield,\n+                    false,\n+                    genAbstract ? ABSTRACTMODE.DIRECT : ABSTRACTMODE.NONE,\n+                    include,\n+                    exclude,\n+                    callerInclude,\n+                    callerExclude,\n+                    m_include,\n+                    m_exclude,\n+                    mode,\n+                    save_beg,\n+                    save_end)\n@@ -273,1 +288,1 @@\n-                            if (mpath.indexOf(\"\/\") != -1){\n+                            if (mpath.contains(\"\/\")){\n@@ -340,1 +355,1 @@\n-        return \"java com.sun.tdk.jcov.Instr [-option value] source1 sourceN\";\n+        return \"java -cp jcov.jar:source1:sourceN com.sun.tdk.jcov.Instr [-option value] source1 sourceN\";\n@@ -352,1 +367,0 @@\n-\n@@ -354,2 +368,2 @@\n-        return \"java -cp jcov.jar:source1:source2 com.sun.tdk.jcov.Instr -include java.lang.* \" +\n-                \"-type block -output instrumented_classes source1 source2\";\n+        return \"java -cp jcov.jar:source1:sourceN com.sun.tdk.jcov.Instr -include java.lang.* \" +\n+                \"-type block -output instrumented_classes source1 sourceN\";\n@@ -384,1 +398,1 @@\n-        return genabstract;\n+        return genAbstract;\n@@ -387,2 +401,2 @@\n-    public void setGenAbstract(boolean abstact) {\n-        this.genabstract = abstact;\n+    public void setGenAbstract(boolean genAbstract) {\n+        this.genAbstract = genAbstract;\n@@ -531,2 +545,1 @@\n-            LoggingFormatter.printStackTrace = true;\n-            throw new Exception(\"Critical exception: \", ex);\n+            throw new EnvHandlingException(\"Critical exception: \" + ex);\n@@ -542,12 +555,12 @@\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_TYPE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_INCLUDE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_INCLUDE_LIST,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_EXCLUDE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_CALLER_INCLUDE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_CALLER_EXCLUDE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_EXCLUDE_LIST,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_MINCLUDE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_MEXCLUDE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_SAVE_BEGIN,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_SAVE_AT_END,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_TEMPLATE,\n+                DSC_TYPE,\n+                DSC_INCLUDE,\n+                DSC_INCLUDE_LIST,\n+                DSC_EXCLUDE,\n+                DSC_CALLER_INCLUDE,\n+                DSC_CALLER_EXCLUDE,\n+                DSC_EXCLUDE_LIST,\n+                DSC_MINCLUDE,\n+                DSC_MEXCLUDE,\n+                DSC_SAVE_BEGIN,\n+                DSC_SAVE_AT_END,\n+                DSC_TEMPLATE,\n@@ -555,7 +568,7 @@\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_ABSTRACT,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_NATIVE,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_FIELD,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_SYNTHETIC,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_ANONYM,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_INNERINVOCATION,\n-                com.sun.tdk.jcov.instrument.InstrumentationOptions.DSC_INSTR_PLUGIN,\n+                DSC_ABSTRACT,\n+                DSC_NATIVE,\n+                DSC_FIELD,\n+                DSC_SYNTHETIC,\n+                DSC_ANONYM,\n+                DSC_INNERINVOCATION,\n+                DSC_INSTR_PLUGIN,\n@@ -575,1 +588,1 @@\n-            Utils.checkFile(outDir, \"output directory\", Utils.CheckOptions.FILE_NOTISFILE);\n+            Utils.checkFile(outDir, \"output directory\", FILE_NOTISFILE);\n@@ -582,2 +595,2 @@\n-        save_beg = opts.getValues(InstrumentationOptions.DSC_SAVE_BEGIN);\n-        save_end = opts.getValues(InstrumentationOptions.DSC_SAVE_AT_END);\n+        save_beg = opts.getValues(DSC_SAVE_BEGIN);\n+        save_end = opts.getValues(DSC_SAVE_AT_END);\n@@ -585,1 +598,1 @@\n-        String abstractValue = opts.getValue(InstrumentationOptions.DSC_ABSTRACT);\n+        String abstractValue = opts.getValue(DSC_ABSTRACT);\n@@ -587,1 +600,1 @@\n-            genabstract = false;\n+            genAbstract = false;\n@@ -589,1 +602,1 @@\n-            genabstract = true;\n+            genAbstract = true;\n@@ -591,1 +604,2 @@\n-            throw new EnvHandlingException(\"'\" + InstrumentationOptions.DSC_ABSTRACT.name + \"' parameter value error: expected 'on' or 'off'; found: '\" + abstractValue + \"'\");\n+            throw new EnvHandlingException(\"'\" + DSC_ABSTRACT.name +\n+                    \"' parameter value error: expected 'on' or 'off'; found: '\" + abstractValue + \"'\");\n@@ -594,1 +608,1 @@\n-        String nativeValue = opts.getValue(InstrumentationOptions.DSC_NATIVE);\n+        String nativeValue = opts.getValue(DSC_NATIVE);\n@@ -600,1 +614,2 @@\n-            throw new EnvHandlingException(\"'\" + InstrumentationOptions.DSC_NATIVE.name + \"' parameter value error: expected 'on' or 'off'; found: '\" + nativeValue + \"'\");\n+            throw new EnvHandlingException(\"'\" + DSC_NATIVE.name +\n+                    \"' parameter value error: expected 'on' or 'off'; found: '\" + nativeValue + \"'\");\n@@ -603,1 +618,1 @@\n-        String fieldValue = opts.getValue(InstrumentationOptions.DSC_FIELD);\n+        String fieldValue = opts.getValue(DSC_FIELD);\n@@ -610,1 +625,2 @@\n-            throw new EnvHandlingException(\"'\" + InstrumentationOptions.DSC_FIELD.name + \"' parameter value error: expected 'on' or 'off'; found: '\" + fieldValue + \"'\");\n+            throw new EnvHandlingException(\"'\" + DSC_FIELD.name +\n+                    \"' parameter value error: expected 'on' or 'off'; found: '\" + fieldValue + \"'\");\n@@ -613,6 +629,2 @@\n-        String anonym = opts.getValue(InstrumentationOptions.DSC_ANONYM);\n-        if (anonym.equals(\"on\")) {\n-            genanonymous = true;\n-        } else { \/\/ off\n-            genanonymous = false;\n-        }\n+        String anonym = opts.getValue(DSC_ANONYM);\n+        genanonymous = anonym.equals(\"on\");\n@@ -620,6 +632,2 @@\n-        String synthetic = opts.getValue(InstrumentationOptions.DSC_SYNTHETIC);\n-        if (synthetic.equals(\"on\")) {\n-            gensynthetic = true;\n-        } else { \/\/ if (fieldValue.equals(\"off\"))\n-            gensynthetic = false;\n-        }\n+        String synthetic = opts.getValue(DSC_SYNTHETIC);\n+        gensynthetic = synthetic.equals(\"on\");\n@@ -627,6 +635,2 @@\n-        String innerInvocation = opts.getValue(InstrumentationOptions.DSC_INNERINVOCATION);\n-        if (\"off\".equals(innerInvocation)) {\n-            innerinvocations = false;\n-        } else {\n-            innerinvocations = true;\n-        }\n+        String innerInvocation = opts.getValue(DSC_INNERINVOCATION);\n+        innerinvocations = ! \"off\".equals(innerInvocation);\n@@ -634,2 +638,2 @@\n-        callerInclude = opts.getValues(InstrumentationOptions.DSC_CALLER_INCLUDE);\n-        callerExclude = opts.getValues(InstrumentationOptions.DSC_CALLER_EXCLUDE);\n+        callerInclude = opts.getValues(DSC_CALLER_INCLUDE);\n+        callerExclude = opts.getValues(DSC_CALLER_EXCLUDE);\n@@ -639,3 +643,3 @@\n-        mode = InstrumentationOptions.InstrumentationMode.fromString(opts.getValue(InstrumentationOptions.DSC_TYPE));\n-        template = opts.getValue(InstrumentationOptions.DSC_TEMPLATE);\n-        Utils.checkFileNotNull(template, \"template filename\", Utils.CheckOptions.FILE_NOTISDIR, Utils.CheckOptions.FILE_PARENTEXISTS);\n+        mode = InstrumentationMode.fromString(opts.getValue(DSC_TYPE));\n+        template = opts.getValue(DSC_TEMPLATE);\n+        Utils.checkFileNotNull(template, \"template filename\", FILE_NOTISDIR, FILE_PARENTEXISTS);\n@@ -645,2 +649,2 @@\n-        include = InstrumentationOptions.handleInclude(opts);\n-        exclude = InstrumentationOptions.handleExclude(opts);\n+        include = handleInclude(opts);\n+        exclude = handleExclude(opts);\n@@ -648,2 +652,2 @@\n-        m_include = InstrumentationOptions.handleMInclude(opts);\n-        m_exclude = InstrumentationOptions.handleMExclude(opts);\n+        m_include = handleMInclude(opts);\n+        m_exclude = handleMExclude(opts);\n@@ -656,1 +660,11 @@\n-        Utils.checkFileCanBeNull(include_rt, \"JCovRT library jarfile\", Utils.CheckOptions.FILE_EXISTS, Utils.CheckOptions.FILE_ISFILE, Utils.CheckOptions.FILE_CANREAD);\n+        Utils.checkFileCanBeNull(include_rt, \"JCovRT library jarfile\", FILE_EXISTS, FILE_ISFILE, FILE_CANREAD);\n+\n+        try {\n+            String pluginClass = opts.getValue(DSC_INSTR_PLUGIN);\n+            if(pluginClass != null && !pluginClass.isEmpty())\n+                plugin = (InstrumentationPlugin) Class.forName(opts.getValue(DSC_INSTR_PLUGIN))\n+                        .getDeclaredConstructor().newInstance();\n+        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException |\n+                NoSuchMethodException | InvocationTargetException e) {\n+            throw new EnvHandlingException(\"'\" + DSC_INSTR_PLUGIN.name + \"' parameter error: '\" + e + \"'\");\n+        }\n@@ -677,1 +691,0 @@\n-\n@@ -680,0 +693,1 @@\n+\n@@ -683,2 +697,3 @@\n-                    \"Specifies output directory, default directory is current. Instr command could process different dirs and different jars: \\n \"\n-                            + \"all classes from input dirs and all jars will be placed in output directory.\");\n+                    \"Specifies output directory, default directory is current. \" +\n+                            \"Instr command could process different dirs and different jars: \\n \" +\n+                            \"all classes from input dirs and all jars will be placed in output directory.\");\n@@ -688,1 +703,2 @@\n-            new OptionDescr(\"implantrt\", new String[]{\"rt\"}, \"Runtime management\", OptionDescr.VAL_SINGLE, \"Allows to implant needed for runtime files into instrumented data: -includert jcov_rt.jar\");\n+            new OptionDescr(\"implantrt\", new String[]{\"rt\"}, \"Runtime management\", OptionDescr.VAL_SINGLE,\n+                    \"Allows to implant needed for runtime files into instrumented data: -includert jcov_rt.jar\");\n@@ -690,1 +706,3 @@\n-            new OptionDescr(\"subsequent\", \"\", OptionDescr.VAL_NONE, \"Template would be used to decide what should not be instrumented - all existing in template would be treated as already instrumented\");\n+            new OptionDescr(\"subsequent\", \"\", OptionDescr.VAL_NONE,\n+                    \"Template would be used to decide what should not be instrumented - \" +\n+                            \"all existing in template would be treated as already instrumented\");\n@@ -692,1 +710,3 @@\n-            new OptionDescr(\"recursive\", \"\", OptionDescr.VAL_NONE, \"Recurse through specified directories instrumenting everything inside. With -flush option it will be able to instrument duplicate classes. \");\n+            new OptionDescr(\"recursive\", \"\", OptionDescr.VAL_NONE,\n+                    \"Recurse through specified directories instrumenting everything inside. \" +\n+                            \"With -flush option it will be able to instrument duplicate classes\");\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":101,"deletions":81,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.tdk.jcov.runtime.PropertyFinder;\n@@ -51,0 +50,4 @@\n+import static com.sun.tdk.jcov.util.Utils.FILE_TYPE;\n+import static com.sun.tdk.jcov.util.Utils.FILE_TYPE.*;\n+import static com.sun.tdk.jcov.util.Utils.isClassFile;\n+\n@@ -57,14 +60,0 @@\n-    private static final String ZIP_EXT = \".zip\";\n-    private static final String JAR_EXT = \".jar\";\n-    private static final String WAR_EXT = \".war\";\n-    private static final String CLASS_EXT = \".class\";\n-    private static final String CUST_CLASS_EXTS[];\n-\n-    static {\n-        String t = PropertyFinder.findValue(\"clext\", null);\n-        if (t == null) {\n-            CUST_CLASS_EXTS = new String[]{};\n-        } else {\n-            CUST_CLASS_EXTS = t.split(\":\");\n-        }\n-    }\n@@ -75,2 +64,1 @@\n-\/\/    protected Log log; \/\/ where to print messages to\n-\/\/\n+\n@@ -185,1 +173,2 @@\n-                    logger.log(Level.SEVERE, \"  Error reading data from ''{0}'': File is empty\\n - skipped\", fname);\n+                    logger.log(Level.SEVERE, \"  Error reading data from ''{0}'': File is empty\\n - skipped\",\n+                            fname);\n@@ -188,1 +177,2 @@\n-                    logger.log(Level.SEVERE, \"  Error reading data from ''{0}'': File is too small ({1}) - skipped\", new Object[]{fname, f.length()});\n+                    logger.log(Level.SEVERE, \"  Error reading data from ''{0}'': File is too small ({1}) - skipped\",\n+                            new Object[]{fname, f.length()});\n@@ -206,1 +196,1 @@\n-            \/\/ class is not instrumentable or is already instrumented\n+            \/\/ class can't be\/is already instrumented\n@@ -220,1 +210,0 @@\n-\n@@ -247,1 +236,0 @@\n-\/\/            this.root = dir;\n@@ -253,1 +241,1 @@\n-                if (f.getPath().endsWith(CLASS_EXT)) {\n+                if (FILE_TYPE.hasExtension(f.getPath(), CLASS)) {\n@@ -271,1 +259,2 @@\n-        String outFilename = outArc == null ? makeInstrumentedFileName(arc.getPath()) : outArc.getPath() + File.separator + arc.getName();\n+        String outFilename = outArc == null ? makeInstrumentedFileName(arc.getPath()) :\n+                outArc.getPath() + File.separator + arc.getName();\n@@ -277,1 +266,1 @@\n-        ZipInputStream in = null;\n+        ZipInputStream in;\n@@ -339,3 +328,2 @@\n-\n-            byte[] res = null;\n-            boolean isClass = ename.endsWith(CLASS_EXT) && !isDir;\n+            byte[] res;\n+            boolean isClass = ename.endsWith(CLASS.getExtension()) && !isDir;\n@@ -421,1 +409,1 @@\n-                logger.log(Level.INFO, \"  Adding saver libray...\");\n+                logger.log(Level.INFO, \"  Adding saver library...\");\n@@ -426,1 +414,1 @@\n-                if (!rt.isFile() || (!rt.getName().endsWith(JAR_EXT) && !rt.getName().endsWith(ZIP_EXT))) {\n+                if (!rt.isFile() || !FILE_TYPE.hasExtension(rt.getName(), JAR, ZIP)) {\n@@ -483,1 +471,2 @@\n-                                    \/\/ logger.log(Level.WARNING, \"Output jar contains file {0} that was found in runtime jar but files sizes differ, skipping\", checking.getName());\n+                                    \/\/ logger.log(Level.WARNING, \"Output jar contains file {0} that was found in runtime jar but files sizes differ, skipping\",\n+                                    \/\/ checking.getName());\n@@ -485,1 +474,2 @@\n-                                    \/\/ logger.log(Level.INFO, \"Output jar contains file {0} that was found in runtime jar, skipping\", checking.getName());\n+                                    \/\/ logger.log(Level.INFO, \"Output jar contains file {0} that was found in runtime jar, skipping\",\n+                                    \/\/ checking.getName());\n@@ -523,1 +513,2 @@\n-                logger.log(Level.WARNING, \" Can''t remove initial JAR file ''{0}''\", arc.getAbsolutePath());\n+                logger.log(Level.WARNING, \" Can''t remove initial JAR file ''{0}''\",\n+                        arc.getAbsolutePath());\n@@ -526,1 +517,2 @@\n-                logger.log(Level.WARNING, \" Can''t rename result JAR file ''{0}' to ''{1}''. Please move manually\", new Object[]{outFile.getAbsolutePath(), arc.getAbsolutePath()});\n+                logger.log(Level.WARNING, \" Can''t rename result JAR file ''{0}' to ''{1}''. Please move manually\",\n+                        new Object[]{outFile.getAbsolutePath(), arc.getAbsolutePath()});\n@@ -565,1 +557,3 @@\n-    public void instrument(File instrumentingPath, File destinationPath, String rtPath, ArrayList<String> rtClassDirTargets, boolean recursive) throws IOException {\n+    public void instrument(File instrumentingPath, File destinationPath,\n+                           String rtPath, ArrayList<String> rtClassDirTargets,\n+                           boolean recursive) throws IOException {\n@@ -591,1 +585,0 @@\n-\/\/                this.root = instrumentingPath;\n@@ -602,1 +595,1 @@\n-        } else if (instrumentingPath.getName().endsWith(JAR_EXT) || instrumentingPath.getName().endsWith(ZIP_EXT) || instrumentingPath.getName().endsWith(WAR_EXT)) {\n+        } else if ( FILE_TYPE.hasExtension(instrumentingPath.getName(), JAR, ZIP, WAR) ) {\n@@ -633,1 +626,2 @@\n-            logger.log(Level.INFO, \"Summary for ''{0}'': files total={1}, classes total={2}, instrumented classes total={3}\", new Object[]{instrumentingPath, fileCount, classCount, iClassCount});\n+            logger.log(Level.INFO, \"Summary for ''{0}'': files total={1}, classes total={2}, instrumented classes total={3}\",\n+                    new Object[]{instrumentingPath, fileCount, classCount, iClassCount});\n@@ -729,7 +723,0 @@\n-\/\/    \/**\n-\/\/     * sets the log where all messages will be printed to\n-\/\/     *\/\n-\/\/    public void setLog(Log log) {\n-\/\/        this.log = log;\n-\/\/    }\n-\/\/\n@@ -752,1 +739,1 @@\n-        if (!rt.isFile() || (!rt.getName().endsWith(JAR_EXT) && !rt.getName().endsWith(ZIP_EXT))) {\n+        if (!rt.isFile() || !FILE_TYPE.hasExtension(rt.getName(), JAR, ZIP)) {\n@@ -792,1 +779,2 @@\n-                    \/\/ logger.log(Level.WARNING, \"Output classfile directory contains file {0} that was found in runtime jar, skipping without contains checking\", e0.getName());\n+                    \/\/ logger.log(Level.WARNING, \"Output classfile directory contains file {0} that was found in runtime jar,\n+                    \/\/ skipping without contains checking\", e0.getName());\n@@ -795,1 +783,2 @@\n-                    \/\/ logger.log(Level.INFO, \"Adding runtime file {0} to output directory {1}\", new Object[]{e1.getName, outDir.getName()})\n+                    \/\/ logger.log(Level.INFO, \"Adding runtime file {0} to output directory {1}\",\n+                    \/\/ new Object[]{e1.getName, outDir.getName()})\n@@ -810,5 +799,0 @@\n-    }\n-\n-    private boolean isClassFile(String fileName) {\n-        if (fileName.endsWith(CLASS_EXT)) {\n-            return true;\n@@ -816,7 +800,0 @@\n-        for (String s : CUST_CLASS_EXTS) {\n-            if (fileName.endsWith(s)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/insert\/AbstractUniversalInstrumenter.java","additions":37,"deletions":60,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-            \"Specify included classes by regular expression for adding inner invocations instrumentaion\\n\" +\n+            \"Specify included classes by regular expression for adding inner invocations instrumentation\\n\" +\n@@ -157,1 +157,1 @@\n-            \"Specify excluded classes by regular expression, no inner invocations instrumentaion will be\\n\" +\n+            \"Specify excluded classes by regular expression, no inner invocations instrumentation will be\\n\" +\n@@ -163,0 +163,4 @@\n+    public final static OptionDescr DSC_INSTR_PLUGIN =\n+            new OptionDescr(\"instr_plugin\", new String[0], \"Instrumentation plugin\", OptionDescr.VAL_SINGLE,\n+                    \"Defines instrumentation to be performed additionaly to already performed by JCov\");\n+\n@@ -346,1 +350,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationOptions.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+\n@@ -71,1 +72,1 @@\n-    private boolean innerInvocations = true;\n+    private boolean innerInvocations;\n@@ -428,1 +429,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationParams.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,2 @@\n+        \/\/ Note: if the RepGen is being started by JDK 9 and above then\n+        \/\/ the option \"--add-exports jdk.jdeps\/com.sun.tools.javap=ALL-UNNAMED\" should be added to the JVM command-line.\n@@ -70,1 +72,1 @@\n-                            instance = classToLoad.newInstance();\n+                            instance = classToLoad.getDeclaredConstructor().newInstance();\n@@ -72,1 +74,1 @@\n-                            String[] params = null;\n+                            String[] params;\n@@ -101,1 +103,1 @@\n-                String[] params = null;\n+                String[] params;\n@@ -109,1 +111,1 @@\n-                    Object result = method.invoke(instance, params, pw);\n+                    method.invoke(instance, params, pw);\n@@ -115,1 +117,0 @@\n-\n@@ -119,1 +120,1 @@\n-        System.err.println(\"cannot execute javap, perhaps jdk7+\/lib\/tools.jar is missing from the classpath and from java.home\");\n+        System.err.println(\"cannot execute javap, perhaps jdk8\/lib\/tools.jar is missing from the classpath and from java.home\");\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/javap\/JavapClassReader.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -137,2 +137,4 @@\n-                } else if (ch == 'F') { \/\/ field\n-                    String className = patt.substring(2, patt.lastIndexOf('.'));\n+                } else if (ch == 'F') { \/\/ static field\n+                    int ind = patt.lastIndexOf('.');\n+                    String className = patt.substring(2, ind );\n+\n@@ -141,1 +143,1 @@\n-                        Field f = c.getDeclaredField(patt.substring(patt.lastIndexOf('.') + 1, patt.length()));\n+                        Field f = c.getDeclaredField(patt.substring(ind + 1));\n@@ -163,2 +165,3 @@\n-                } else if (ch == 'M') { \/\/ method\n-                    String className = patt.substring(2, patt.lastIndexOf('.'));\n+                } else if (ch == 'M') { \/\/ static method\n+                    int ind = patt.lastIndexOf('.');\n+                    String className = patt.substring(2, ind);\n@@ -167,1 +170,1 @@\n-                        Method m = c.getDeclaredMethod(patt.substring(patt.lastIndexOf('.') + 1, patt.length()), (Class[]) null);\n+                        Method m = c.getDeclaredMethod(patt.substring(ind + 1), (Class[]) null);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/runtime\/PropertyFinder.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Arrays;\n@@ -105,1 +106,3 @@\n-            handler.getOut().println(\"Use \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) + \" -h\\\" for command-line help or \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) + \" -hv\\\" for wider description\");\n+            handler.getOut().println(\"Use \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) +\n+                    \" -h\\\" for command-line help or \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) +\n+                    \" -hv\\\" for wider description\");\n@@ -142,1 +145,3 @@\n-            handler.getOut().println(\"Use \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) + \" -h\\\" for command-line help or \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) + \" -hv\\\" for wider description\");\n+            handler.getOut().println(\"Use \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) +\n+                    \" -h\\\" for command-line help or \\\"java -jar jcov.jar \" + name.substring(name.lastIndexOf(\".\") + 1) +\n+                    \" -hv\\\" for wider description\");\n@@ -161,3 +166,6 @@\n-            System.out.println(\"Execution error: \" + e.getMessage());\n-            if (PropertyFinder.findValue(\"stacktrace\", \"false\").equals(\"true\")) {\n-                e.printStackTrace(System.out);\n+            if( ! e.getMessage().isEmpty()  ) {\n+                System.err.println(e.getMessage());\n+            }\n+            if ( e.getMessage().isEmpty() ||\n+                    PropertyFinder.findValue(\"stacktrace\", \"\").equals(\"true\")) {\n+                e.printStackTrace(System.err);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/tools\/JCovCMDTool.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.runtime.PropertyFinder;\n@@ -40,0 +41,1 @@\n+import java.nio.file.Paths;\n@@ -46,1 +48,0 @@\n-import java.util.stream.Stream;\n@@ -90,0 +91,29 @@\n+    public enum FILE_TYPE {\n+        ZIP, JAR, WAR, CLASS;\n+        public String getExtension() {\n+            return \".\" + this.name().toLowerCase();\n+        }\n+\n+        public static boolean hasExtension(String fileName, FILE_TYPE... fTypes) {\n+           for(FILE_TYPE ftype : fTypes) {\n+               if( fileName.endsWith(ftype.getExtension()) ) {\n+                   return true;\n+               }\n+           }\n+           return false;\n+        }\n+    }\n+\n+    \/**\n+     * It's possible to set custom classfile extension by \"clext\" property (through jcov.clext system property, JCOV_CLEXT\n+     * environment variable and so on) - for example \"clazz:.klass\".\n+     *\/\n+    public static final List<String>  CUSTOM_CLASS_FILE_EXTENSIONS =\n+            Arrays.asList(PropertyFinder.findValue(\"clext\", \"\").split(\":\").clone());\n+\n+    public static boolean isClassFile(String fileName) {\n+        if(FILE_TYPE.hasExtension(fileName, FILE_TYPE.CLASS)) {\n+            return true;\n+        }\n+        return CUSTOM_CLASS_FILE_EXTENSIONS.stream().anyMatch(ext->fileName.endsWith(ext));\n+    }\n@@ -104,1 +134,1 @@\n-            for(int i=1; i<=15; i++) {\n+            for(int i=1; i<=20; i++) {\n@@ -515,1 +545,1 @@\n-    public static void addToClasspath(String[] paths) {\n+    public static void addToClasspath(String[] sourcePaths) {\n@@ -523,3 +553,3 @@\n-                URL[] urls = new URL[paths.length];\n-                for (int i = 0; i < paths.length; i++) {\n-                    urls[i] = new File(paths[i]).toURI().toURL();\n+                URL[] urls = new URL[sourcePaths.length];\n+                for (int i = 0; i < sourcePaths.length; i++) {\n+                    urls[i] = new File(sourcePaths[i]).toURI().toURL();\n@@ -534,2 +564,21 @@\n-            for (int i = 0; i < paths.length; i++) {\n-                String path = paths[i];\n+            \/\/ eliminate paths that could be missed in classpath\n+            \/\/1. For class files in a(n) (un)named package, the class path ends\n+            \/\/   with the directory that contains the class files. (should be in classpath)\n+            \/\/2. jar,zip,war should be a part of classpath (should be in classpath)\n+            List<String> paths = new ArrayList<>();\n+            Arrays.stream(sourcePaths).\n+                    forEach(\n+                            path -> {\n+                                File file = Paths.get(path).toFile();\n+                                if (file.isDirectory()) {\n+                                    if(!file.getName().equalsIgnoreCase(\"jmods\")) {\n+                                        paths.add(path);\n+                                    }\n+                                } else if (file.isFile()) {\n+                                    if( FILE_TYPE.hasExtension(path, FILE_TYPE.ZIP, FILE_TYPE.JAR, FILE_TYPE.WAR) ) {\n+                                        paths.add(path);\n+                                    }\n+                                }\n+                            }\n+                    );\n+            for (String path : paths) {\n@@ -537,1 +586,1 @@\n-                    String cps = Arrays.stream(paths).collect(Collectors.joining(\"#\"));\n+                    String cps = paths.stream().collect(Collectors.joining(\"#\"));\n@@ -541,1 +590,1 @@\n-                                    \"Example: java -cp jcov.jar:%s com.sun.tdk.jcov.Instr -t <template> -o <output> %s%n\",\n+                                    \"Example: java -cp jcov.jar:%s ToolName -t <template> -o <output> %s%n\",\n@@ -558,1 +607,1 @@\n-            Utils.addToClasspath(classes.toArray(new String[0]));\n+            Utils.addToClasspath(classes.toArray(new String[]{}));\n@@ -567,1 +616,1 @@\n-                if (f.getAbsolutePath().endsWith(\".jar\") || f.getAbsolutePath().endsWith(\".class\")) {\n+                if (FILE_TYPE.hasExtension(f.getAbsolutePath(), FILE_TYPE.JAR, FILE_TYPE.CLASS) ) {\n@@ -1047,5 +1096,13 @@\n-    public static enum CheckOptions {\n-\n-        FILE_EXISTS, FILE_NOTEXISTS, FILE_ISFILE, FILE_ISDIR, FILE_NOTISDIR,\n-        FILE_PARENTEXISTS, FILE_CANREAD, FILE_CANWRITE, INT_NONNEGATIVE,\n-        INT_POSITIVE, INT_NOT_NULL, FILE_NOTISFILE\n+    public enum CheckOptions {\n+        FILE_EXISTS,\n+        FILE_NOTEXISTS,\n+        FILE_ISFILE,\n+        FILE_ISDIR,\n+        FILE_NOTISDIR,\n+        FILE_PARENTEXISTS,\n+        FILE_CANREAD,\n+        FILE_CANWRITE,\n+        INT_NONNEGATIVE,\n+        INT_POSITIVE,\n+        INT_NOT_NULL,\n+        FILE_NOTISFILE\n@@ -1108,1 +1165,1 @@\n-     * <p> Checks a file for some criterias <\/p>\n+     * <p> Checks a file for some criteria <\/p>\n@@ -1112,1 +1169,1 @@\n-     * @param opts criterias to check\n+     * @param opts criteria to check\n@@ -1133,5 +1190,5 @@\n-\/\/                case FILE_CANWRITE:\n-\/\/                    if (!file.canWrite()) {\n-\/\/                        throw new EnvHandlingException(\"Incorrect \" + message + \" (\" + file.getPath() + \") - can't write\");\n-\/\/                    }\n-\/\/                    break;\n+                case FILE_CANWRITE:\n+                    if (!file.canWrite()) {\n+                        throw new EnvHandlingException(\"Incorrect \" + description + \" (\" + file.getPath() + \") - can't write\");\n+                    }\n+                    break;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/util\/Utils.java","additions":81,"deletions":24,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import org.testng.annotations.BeforeClass;\n@@ -39,0 +38,1 @@\n+import java.util.HashSet;\n@@ -41,1 +41,0 @@\n-import java.util.function.Supplier;\n@@ -86,2 +85,4 @@\n-        testFieldValuesSameVM(\"field1\", Set.of(1, 2));\n-        testFieldValuesSameVM(\"field2\", Set.of(\"\", \"two\", \"one\"));\n+        Set<Object> set = new HashSet<Object>(){{ add(1); add(2);  }};\n+        testFieldValuesSameVM(\"field1\", set);\n+        set = new HashSet<Object>(){{ add(\"\"); add(\"two\"); add(\"one\");  }};\n+        testFieldValuesSameVM(\"field2\", set);\n@@ -112,2 +113,4 @@\n-            testFieldValuesOtherVM(\"field1\", Set.of(1, 2), lines);\n-            testFieldValuesOtherVM(\"field2\", Set.of(\"\", \"two\", \"one\"), lines);\n+            Set<Object> set = new HashSet<Object>(){{ add(1); add(2);  }};\n+            testFieldValuesOtherVM(\"field1\", set, lines);\n+            set = new HashSet<Object>(){{ add(\"\"); add(\"two\"); add(\"one\");  }};\n+            testFieldValuesOtherVM(\"field2\", set, lines);\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/FieldsTest.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+        command.add(\"-Djcov.stacktrace=true\");\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/lib\/InstrProxy.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}