{"files":[{"patch":"@@ -344,2 +344,3 @@\n-        <copy file=\"${test.src.dir}\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/syntheticity\/synthetic_template.xml\"\n-\t\ttodir=\"${result.dir}\/test\/classes\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/syntheticity\"\/>\n+        <copy todir=\"${result.dir}\/test\/classes\">\n+            <fileset dir=\"${test.src.dir}\" includes=\"**\/*.xml\"\/>\n+        <\/copy>\n","filename":"build\/build.xml","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.Comparator;\n@@ -39,2 +38,0 @@\n-import java.util.TreeSet;\n-import org.objectweb.asm.Opcodes;\n@@ -99,1 +96,0 @@\n-                    boolean isPublic = isPublic(c, toMerge);\n@@ -107,3 +103,1 @@\n-                        int newAccess = isPublic ? m.getAccess() : makePrivate(m.getAccess());\n-\n-                        DataMethod nm = m.clone(newClass, newAccess, prefix + m.getName());\n+                        DataMethod nm = m.clone(newClass, m.getAccess(), prefix + m.getName());\n@@ -118,3 +112,1 @@\n-                        int newAccess = isPublic ? f.getAccess() : makePrivate(f.getAccess());\n-                        f.clone(newClass, newAccess, prefix + f.getName());\n-                        \/\/ new created field will be added to the newClass\n+                        f.clone(newClass, f.getAccess(), prefix + f.getName());\n@@ -168,111 +160,0 @@\n-    \/**\n-     * Returns true if the given class is public (contains \"public\" modifier)\n-     * and all its outers are public as well.\n-     *\n-     * @param cls - class to analyze\n-     * @param peers classes the could be potentionaly outer of the cls\n-     * @return true or false\n-     *\/\n-    private boolean isPublic(DataClass cls, ArrayList<DataClass> peers) {\n-        ArrayList<DataClass> outers = findOuters(cls, peers);\n-        DataClass outClass = outers.get(outers.size() - 1);\n-        for (DataClass c : outers) {\n-            if (!isPublic(c, outClass)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    \/**\n-     * Scans given modifiers in attempt to find \"public\".\n-     *\n-     * @return true if given array is not null and contains \"public\"\n-     *\/\n-    private boolean isPublic(DataClass c, DataClass outClass) {\n-        if (isAnonymous(c.getName())) {\n-            return isPublicAnonymous(c, outClass);\n-        }\n-\n-        return c.getModifiers().isPublic();\n-    }\n-\n-    private boolean isPublicAnonymous(DataClass c, DataClass outClass) {\n-\n-        TreeSet<DataMethod> sortedMethods = new TreeSet<DataMethod>(new Comparator<DataMethod>() {\n-            @Override\n-            public int compare(DataMethod dm1, DataMethod dm2) {\n-                return dm1.getLineTable().get(dm1.getLineTable().size() - 1).line - dm2.getLineTable().get(dm2.getLineTable().size() - 1).line;\n-            }\n-        });\n-\n-        for (DataMethod dm : outClass.getMethods()) {\n-            if (dm.getLineTable() != null) {\n-                sortedMethods.add(dm);\n-            }\n-        }\n-\n-        DataMethod initMethod = c.findMethod(\"<init>\");\n-\n-        if (sortedMethods != null && initMethod != null) {\n-            for (DataMethod dataMethod : sortedMethods) {\n-\n-                if (initMethod.getLineTable().get(0).line <= dataMethod.getLineTable().get(dataMethod.getLineTable().size() - 1).line) {\n-\n-                    \/\/Anonymous classes in init and clinit is not public\n-                    if (dataMethod.getName().equals(\"<init>\") || dataMethod.getName().equals(\"<clinit>\")) {\n-                        return false;\n-                    }\n-\n-                    return dataMethod.isPublicAPI();\n-                }\n-\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    \/**\n-     * Finds outer classes among classes obtained from the same source.\n-     *\n-     * @param cls - class to find outers\n-     * @param peers - class obtained from the same source\n-     * @return list of outers including cls itself.\n-     *\/\n-    private ArrayList<DataClass> findOuters(DataClass cls, ArrayList<DataClass> peers) {\n-        ArrayList<DataClass> result = new ArrayList<DataClass>();\n-        result.add(cls);\n-        String name = cls.getName();\n-        for (DataClass c : peers) {\n-            if (name.startsWith(c.getName() + \"$\")) {\n-                result.add(c);\n-            }\n-        }\n-        return result;\n-    }\n-\n-    \/**\n-     * Removes \"public\" and \"protected\" modifiers from the given list\n-     *\n-     * @param modifiers array of modifiers\n-     * @return modified array\n-     *\/\n-    private int makePrivate(int modifiers) {\n-        return modifiers & ~Opcodes.ACC_PUBLIC & ~Opcodes.ACC_PROTECTED;\n-    }\n-\n-    \/**\n-     * @param name - name of a class\n-     * @return true, if the given class name is anonyomous\n-     *\/\n-    private boolean isAnonymous(String name) {\n-        if (name == null) {\n-            return false;\n-        }\n-        int index = name.lastIndexOf(\"$\");\n-        if (index < 0) {\n-            return false;\n-        }\n-        return Character.isDigit(name.charAt(index + 1));\n-    }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/processing\/CombinerDataProcessor.java","additions":3,"deletions":122,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report.dataprocessor.privacy;\n+\n+import com.sun.tdk.jcov.data.FileFormatException;\n+import com.sun.tdk.jcov.instrument.DataClass;\n+import com.sun.tdk.jcov.instrument.DataMethod;\n+import com.sun.tdk.jcov.instrument.DataPackage;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.io.Reader;\n+import com.sun.tdk.jcov.processing.DefaultDataProcessorSPI;\n+import com.sun.tdk.jcov.processing.ProcessingException;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class PrivacyTest {\n+\n+    static DataRoot data;\n+    static String template;\n+\n+    @BeforeClass\n+    public static void setup() {\n+        template = PrivacyTest.class.getPackageName()\n+                .replace(\".\", \"\/\") + \"\/privacy_template.xml\";\n+    }\n+    @Test\n+    public void load() throws FileFormatException {\n+        data = Reader.readXML(ClassLoader.getSystemResourceAsStream(template));\n+        DataPackage p = data.findPackage(\"pkg\");\n+        DataClass tc1 = p.findClass(\"TestCode$1\");\n+        assertTrue(tc1.findMethod(\"publicMethod\").getModifiers().isPublic());\n+        DataClass tc2 = p.findClass(\"TestCode$1\");\n+        assertTrue(tc2.findMethod(\"publicMethod\").getModifiers().isPublic());\n+        DataClass tcInner = p.findClass(\"TestCode$Inner\");\n+        assertTrue(tcInner.findMethod(\"publicMethod\").getModifiers().isPublic());\n+    }\n+    @Test(dependsOnMethods = \"load\")\n+   public void transform() throws ProcessingException {\n+        data = new DefaultDataProcessorSPI().getDataProcessor().process(data);\n+        DataPackage p = data.findPackage(\"pkg\");\n+        DataClass tc = p.findClass(\"TestCode\");\n+        assertTrue(tc.findMethod(\"$1.publicMethod\").getModifiers().isPublic());\n+        assertTrue(tc.findMethod(\"$2.publicMethod\").getModifiers().isPublic());\n+        assertTrue(tc.findMethod(\"$Inner.publicMethod\").getModifiers().isPublic());\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/privacy\/PrivacyTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!--\n+Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+This code is free software; you can redistribute it and\/or modify it\n+under the terms of the GNU General Public License version 2 only, as\n+published by the Free Software Foundation.  Oracle designates this\n+particular file as subject to the \"Classpath\" exception as provided\n+by Oracle in the LICENSE file that accompanied this code.\n+\n+This code is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+version 2 for more details (a copy is included in the LICENSE file that\n+accompanied this code).\n+\n+You should have received a copy of the GNU General Public License version\n+2 along with this work; if not, write to the Free Software Foundation,\n+Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+or visit www.oracle.com if you need additional information or have any\n+questions.\n+-->\n+\n+<coverage\n+        xmlns='http:\/\/java.sun.com\/jcov\/namespace'\n+        xmlns:xsi='http:\/\/www.w3.org\/2001\/XMLSchema-instance'\n+        xsi:schemaLocation='http:\/\/java.sun.com\/jcov\/namespace coverage.xsd'>\n+\n+\t<head>\n+\t\t<property name='coverage.generator.args' val=''\/>\n+\t\t<property name='coverage.generator.mode' val='BRANCH'\/>\n+\t\t<property name='coverage.generator.internal' val='include'\/>\n+\t\t<property name='coverage.generator.include' val=''\/>\n+\t\t<property name='coverage.generator.exclude' val=''\/>\n+\t\t<property name='coverage.generator.caller_include' val='.*'\/>\n+\t\t<property name='coverage.generator.caller_exclude' val=''\/>\n+\t\t<property name='coverage.created.date' val='2022-10-04'\/>\n+\t\t<property name='coverage.created.time' val='19:13:10'\/>\n+\t\t<property name='coverage.generator.fullversion' val=' 3.0_13 (os.ea) September 30, 2022'\/>\n+\t\t<property name='coverage.generator.name' val='jcov'\/>\n+\t\t<property name='coverage.generator.version' val='3.0'\/>\n+\t\t<property name='coverage.spec.version' val='1.3'\/>\n+\t\t<property name='java.runtime.version' val='11.0.12+8-LTS-237'\/>\n+\t\t<property name='java.version' val='11.0.12'\/>\n+\t\t<property name='os.arch' val='x86_64'\/>\n+\t\t<property name='os.name' val='Mac OS X'\/>\n+\t\t<property name='os.version' val='11.5'\/>\n+\t\t<property name='user.name' val='shura'\/>\n+\t\t<property name='dynamic.collected' val='false'\/>\n+\t\t<property name='id.count' val='9'\/>\n+\t<\/head>\n+\t<package name=\"pkg\" moduleName=\"no_module\">\n+\t\t<class name=\"TestCode\" supername=\"java\/lang\/Object\" checksum=\"4029051559\" interface=\"true\" source=\"TestCode.java\" flags=' public'>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags=' public' access=\"1\" cons=\"true\" length=\"14\">\n+\t\t\t\t<bl s=\"0\" e=\"13\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"13\" id=\"6\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"13\" e=\"13\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4;4=5;13=8;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"method\" vmsig=\"()V\" flags='' access=\"0\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"7\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=10;9=13;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"TestCode$1\" supername=\"java\/lang\/Object\" checksum=\"641620908\" interface=\"true\" source=\"TestCode.java\" inner=\"anon\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Lpkg\/TestCode;)V\" flags='' access=\"0\" cons=\"true\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"0\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=5;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"publicMethod\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"1\">\n+\t\t\t\t<bl s=\"0\" e=\"0\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"0\" id=\"1\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"0\" e=\"0\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=6;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"TestCode$2\" supername=\"java\/lang\/Object\" checksum=\"3175112320\" interface=\"true\" source=\"TestCode.java\" inner=\"anon\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Lpkg\/TestCode;)V\" flags='' access=\"0\" cons=\"true\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"2\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=10;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"publicMethod\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"1\">\n+\t\t\t\t<bl s=\"0\" e=\"0\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"0\" id=\"3\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"0\" e=\"0\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=11;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"TestCode$Inner\" supername=\"java\/lang\/Object\" checksum=\"706304885\" interface=\"true\" source=\"TestCode.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Lpkg\/TestCode;)V\" flags='' access=\"0\" cons=\"true\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"4\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=14;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"publicMethod\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"1\">\n+\t\t\t\t<bl s=\"0\" e=\"0\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"0\" id=\"5\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"0\" e=\"0\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=15;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t<\/package>\n+<\/coverage>\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/privacy\/privacy_template.xml","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}