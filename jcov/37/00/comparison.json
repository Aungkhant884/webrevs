{"files":[{"patch":"@@ -38,0 +38,1 @@\n+    <property name=\"modules.dir\" location=\"${result.dir}\/modules\"\/>\n@@ -204,1 +205,1 @@\n-        <jmod classpath=\"${jcov.classes}\" destfile=\"${build.dir}\/jcov.jmod\"\/>\n+        <jar basedir=\"${jcov.classes}\" destfile=\"${modules.dir}\/jcov.jar\"\/>\n@@ -219,1 +220,1 @@\n-        <jmod classpath=\"${jcov.asm.classes}\" destfile=\"${build.dir}\/jcov.asm.jmod\"\/>\n+        <jar basedir=\"${jcov.asm.classes}\" destfile=\"${modules.dir}\/jcov-asm.jar\"\/>\n@@ -377,0 +378,15 @@\n+        <!--module tests-->\n+        <java jar=\"${jtreg.home}\/lib\/jtreg.jar\" fork=\"true\">\n+            <arg value=\"-javacoption:--add-exports\"\/>\n+            <arg value=\"-javacoption:java.compiler\/javax.tools=ALL-UNNAMED\"\/>\n+            <arg value=\"-javaoption:-p\"\/>\n+            <arg value=\"-javaoption:\/Users\/shura\/JDK\/git\/jcov-mine\/JCOV_build\/modules\/jcov.jar:${javatestjar}:${ant.home}\/lib\/ant.jar\"\/>\n+            <arg value=\"-javaoption:--add-exports\"\/>\n+            <arg value=\"-javaoption:java.compiler\/javax.tools=ALL-UNNAMED\"\/>\n+            <arg value=\"-workDir:${result.dir}\/test\/workdir_mp\"\/>\n+            <arg value=\"-reportDir:${result.dir}\/test\/report_mp\"\/>\n+            <arg value=\"-jdk:${java.home}\"\/>\n+            <arg value=\"-v1\"\/>\n+            <arg value=\"..\/test\/module\"\/>\n+        <\/java>\n+        <!--classpath based tests-->\n@@ -379,2 +395,2 @@\n-            <arg value=\"-workDir:${result.dir}\/test\/workdir\"\/>\n-            <arg value=\"-reportDir:${result.dir}\/test\/report\"\/>\n+            <arg value=\"-workDir:${result.dir}\/test\/workdir_cp\"\/>\n+            <arg value=\"-reportDir:${result.dir}\/test\/report_cp\"\/>\n@@ -382,0 +398,1 @@\n+            <arg value=\"-jdk:${java.home}\"\/>\n","filename":"build\/build.xml","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Optional;\n@@ -30,0 +31,2 @@\n+import com.sun.tdk.jcov.instrument.Modifiers.ModifiersFactory;\n+\n@@ -33,1 +36,1 @@\n-    private static volatile Modifiers.ModifiersFactory MODIFIERS_FACTORY;\n+    private static volatile ModifiersFactory MODIFIERS_FACTORY;\n@@ -38,2 +41,4 @@\n-                PLUGIN = ServiceLoader.load(InstrumentationPlugin.class).findFirst()\n-                        .orElse((InstrumentationPlugin)\n+                Optional<InstrumentationPlugin> service = ServiceLoader.load(InstrumentationPlugin.class).findFirst();\n+                PLUGIN = service.isPresent() ? service.get() :\n+                        \/\/for backward compatibility for a non-modular jar\n+                        (InstrumentationPlugin)\n@@ -41,1 +46,1 @@\n-                                        .getConstructor().newInstance());\n+                                        .getConstructor().newInstance();\n@@ -49,1 +54,1 @@\n-    static synchronized Modifiers.ModifiersFactory getFactory() {\n+    static synchronized ModifiersFactory getFactory() {\n@@ -52,5 +57,6 @@\n-                MODIFIERS_FACTORY =\n-                        ServiceLoader.load(Modifiers.ModifiersFactory.class).findFirst()\n-                                .orElse((Modifiers.ModifiersFactory)\n-                                        Class.forName(\"com.sun.tdk.jcov.instrument.asm.ASMModifiers$ASMModfiersFactory\")\n-                                                .getConstructor().newInstance());\n+                Optional<ModifiersFactory> service = ServiceLoader.load(ModifiersFactory.class).findFirst();\n+                MODIFIERS_FACTORY = service.isPresent() ? service.get() :\n+                        \/\/for backward compatibility for a non-modular jar\n+                        (ModifiersFactory)\n+                                Class.forName(\"com.sun.tdk.jcov.instrument.asm.ASMModifiers$ASMModfiersFactory\")\n+                                        .getConstructor().newInstance();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Services.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package instrumentation;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+import java.io.OutputStream;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+public class Plugin implements InstrumentationPlugin {\n+    @Override\n+    public void instrument(Collection<String> resources, ClassLoader loader, BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n+\n+    }\n+\n+    @Override\n+    public Map<String, Consumer<OutputStream>> complete() throws Exception {\n+        return null;\n+    }\n+}\n","filename":"test\/module\/module\/instrumentation\/Plugin.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package main;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+public class Main {\n+    public static void main(String[] args) {\n+        System.out.println(InstrumentationPlugin.getPlugin().getClass().getName());\n+    }\n+}\n","filename":"test\/module\/module\/main\/Main.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+module jcov.plugin.test {\n+    requires jcov;\n+    exports main;\n+    provides com.sun.tdk.jcov.instrument.InstrumentationPlugin with instrumentation.Plugin;\n+}\n\\ No newline at end of file\n","filename":"test\/module\/module\/module-info.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/* @test\n+ * @run main PluginTest\n+ *\/\n+import javax.tools.JavaCompiler;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+import static java.io.File.pathSeparator;\n+import static java.io.File.separator;\n+import static java.lang.System.getProperty;\n+import static java.util.stream.Collectors.toList;\n+\n+public class PluginTest {\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+        Path moduleSource = Path.of(getProperty(\"test.src\")).getParent().resolve(\"module\");\n+        List<File> files = Files.find(moduleSource, Integer.MAX_VALUE,\n+                        (a, b) -> !Files.isDirectory(a) && a.toString().endsWith(\".java\"))\n+                .map(Path::toFile).collect(toList());\n+        Path out = Path.of(getProperty(\"test.classes\")).resolve(\"module\"); Files.createDirectories(out);\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        try (StandardJavaFileManager fileManager =\n+                     compiler.getStandardFileManager(null, null, null)) {\n+            JavaCompiler.CompilationTask task = compiler.getTask(null, fileManager,\n+                    diagnostic -> {\n+                        System.out.println(diagnostic.getSource() + \":\");\n+                        System.out.println(diagnostic.getMessage(Locale.getDefault()));\n+                    }, List.of(\n+                            \"-d\", out.toString(),\n+                            \"-p\", getProperty(\"jdk.module.path\"),\n+                            \"--add-modules\", \"jcov\"\n+                    ), null,\n+                    fileManager.getJavaFileObjectsFromFiles(files));\n+            if (!task.call()) {\n+                throw new RuntimeException(\"Compilation failed\");\n+            }\n+        }\n+        List<String> command = List.of(\n+                getProperty(\"java.home\") + separator + \"bin\" + separator + \"java\",\n+                \"-p\", getProperty(\"jdk.module.path\") + pathSeparator + out,\n+                \"--add-modules\", \"jcov,jcov.plugin.test\",\n+                \"-m\", \"jcov.plugin.test\/main.Main\"\n+        );\n+        Process p = new ProcessBuilder().command(command).redirectError(ProcessBuilder.Redirect.INHERIT).start();\n+        if (p.waitFor() != 0) throw new RuntimeException(\"Failed\");\n+        String output = new String(p.getInputStream().readAllBytes());\n+        if(!output.startsWith(\"instrumentation.Plugin\")) {\n+            System.err.println(\"Wrong plugin type:\");\n+            System.err.println(output);\n+            throw new RuntimeException(\"Wrong plugin type\");\n+        }\n+    }\n+}\n","filename":"test\/module\/test\/PluginTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}