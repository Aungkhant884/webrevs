{"files":[{"patch":"@@ -35,1 +35,5 @@\n-public abstract class Env<T> {\n+\/**\n+ * Much of the functionality in this plugin is controlled through system properties. This class defines some shortcuts\n+ * which makes it a bit easier.\n+ *\/ \n+public class Env{\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/Env.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,0 +39,6 @@\n+\/**\n+ * Some API which makes it easier to run JCov instrumentation while setting specific options to use an instrumentation\n+ * plugin. Could be used in tests or other java code.<br\/>\n+ * Also provides a main method so it is easier to run the instrumentation from the command line.<br\/>\n+ * Current implementaion runs JCov code in the same VM.\n+ *\/\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/Instrument.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/analysis\/Reader.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * This package will contain API useful for loading, parsing and analizing data coverage data.\n+ *\/\n+package openjdk.jcov.data.arguments.analysis;\n\\ No newline at end of file\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/analysis\/package-info.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -27,0 +27,3 @@\n+\/**\n+ * When used defines which methods to instrument for argument collection.\n+ *\/\n@@ -28,1 +31,1 @@\n-    boolean accept(int access, String owner, String method);\n+    boolean accept(int access, String owner, String name, String desc) throws Exception;\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/instrument\/MethodFilter.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+\/**\n+ * An instrumention plugin responsible for adding necessary bytecode instructions to collect and pass argument values to\n+ * a specified collector.\n+ *\/\n@@ -47,0 +51,3 @@\n+    \/**\n+     * Classname of a collector class which will be called from every instrumented method.\n+     *\/\n@@ -49,0 +56,3 @@\n+    \/**\n+     * Name of the methods which will be called from every instrumented method.\n+     *\/\n@@ -50,0 +60,3 @@\n+    \/**\n+     * Signature of the method which will be called from every instrumented method.\n+     *\/\n@@ -52,0 +65,4 @@\n+    \/**\n+     * Property name prefix for all properties used by this plugin. The property names are started with\n+     * <code>Instrument.JCOV_DATA_ENV_PREFIX + ARGUMENTS_PREFIX<\/code>\n+     *\/\n@@ -53,0 +70,4 @@\n+    \/**\n+     * Name of a property which specifies classname for a class which will be used to \"serialize\" the collected\n+     * values.\n+     *\/\n@@ -55,0 +76,3 @@\n+    \/**\n+     * Name of a property which contains path of the template file.\n+     *\/\n@@ -57,0 +81,3 @@\n+    \/**\n+     * Name of a property which contains class name for the method filter.\n+     *\/\n@@ -60,1 +87,4 @@\n-    private static class TypeDescriptor extends openjdk.jcov.data.instrument.TypeDescriptor {\n+    \/**\n+     * Aux class responsible for code generation for different types.\n+     *\/\n+    public static class TypeDescriptor extends openjdk.jcov.data.instrument.TypeDescriptor {\n@@ -76,2 +106,2 @@\n-                visitor.visitMethodInsn(INVOKESTATIC, cls(), \"valueOf\",\n-                        \"(\" + id() + \")L\" + cls() + \";\", false);\n+                visitor.visitMethodInsn(INVOKESTATIC, clsName(), \"valueOf\",\n+                        \"(\" + id() + \")L\" + clsName() + \";\", false);\n@@ -106,1 +136,1 @@\n-        methodFilter = (a, o, m) -> true;\n+        methodFilter = Env.getSPIEnv(METHOD_FILTER, (a, o, m, d) -> true);\n@@ -111,0 +141,4 @@\n+    \/**\n+     * Injects necessary instructions to place all the arguments into an array which is then passed tp the collector's\n+     * method.\n+     *\/\n@@ -114,16 +148,20 @@\n-        if(methodFilter.accept(access, owner, method)) {\n-            template.get(owner, method);\n-            return new MethodVisitor(ASM6, visitor) {\n-                @Override\n-                public void visitCode() {\n-                    try {\n-                        List<TypeDescriptor> params = parseDesc(desc);\n-                        if (params.size() > 0) {\n-                            super.visitLdcInsn(owner);\n-                            super.visitLdcInsn(name);\n-                            super.visitLdcInsn(desc);\n-                            super.visitIntInsn(BIPUSH, params.size());\n-                            super.visitTypeInsn(ANEWARRAY, \"java\/lang\/Object\");\n-                            int stackIndex = ((access & ACC_STATIC) > 0) ? 0 : 1;\n-                            for (int i = 0; i < params.size(); i++) {\n-                                stackIndex = params.get(i).visit(i, stackIndex, this);\n+        try {\n+            if(methodFilter.accept(access, owner, name, desc)) {\n+                template.get(owner, method);\n+                return new MethodVisitor(ASM6, visitor) {\n+                    @Override\n+                    public void visitCode() {\n+                        try {\n+                            List<TypeDescriptor> params = parseDesc(desc);\n+                            if (params.size() > 0) {\n+                                super.visitLdcInsn(owner);\n+                                super.visitLdcInsn(name);\n+                                super.visitLdcInsn(desc);\n+                                super.visitIntInsn(BIPUSH, params.size());\n+                                super.visitTypeInsn(ANEWARRAY, \"java\/lang\/Object\");\n+                                int stackIndex = ((access & ACC_STATIC) > 0) ? 0 : 1;\n+                                for (int i = 0; i < params.size(); i++) {\n+                                    stackIndex = params.get(i).visit(i, stackIndex, this);\n+                                }\n+                                visitor.visitMethodInsn(INVOKESTATIC, COLLECTOR_CLASS, COLLECTOR_METHOD,\n+                                        COLLECTOR_DESC, false);\n@@ -131,2 +169,2 @@\n-                            visitor.visitMethodInsn(INVOKESTATIC, COLLECTOR_CLASS, COLLECTOR_METHOD,\n-                                    COLLECTOR_DESC, false);\n+                        } catch (Exception e) {\n+                            e.printStackTrace();\n@@ -134,2 +172,1 @@\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n+                        super.visitCode();\n@@ -137,4 +174,5 @@\n-                    super.visitCode();\n-                }\n-            };\n-        } else return visitor;\n+                };\n+            } else return visitor;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n@@ -143,1 +181,1 @@\n-    private static List<TypeDescriptor> parseDesc(String desc) {\n+    public static List<TypeDescriptor> parseDesc(String desc) throws ClassNotFoundException {\n@@ -149,2 +187,10 @@\n-            if(next.equals(\"L\") || next.equals(\"[\")) {\n-                res.add(objectType);\n+            if(next.equals(\"L\")) {\n+                int l = pos;\n+                pos = desc.indexOf(\";\", pos) + 1;\n+                res.add(new TypeDescriptor(\"L\", Class.forName(desc.substring(l + 1, pos - 1)\n+                        .replace('\/', '.')),\n+                        ALOAD, false, false));\n+            } else if(next.equals(\"[\")) {\n+                \/\/TODO can we do better?\n+                res.add(new TypeDescriptor(\"L\", new Object[0].getClass(),\n+                        ALOAD, false, false));\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/instrument\/Plugin.java","additions":77,"deletions":31,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * API package for classes used during the instrumentation time.\n+ *\/\n+package openjdk.jcov.data.arguments.instrument;\n\\ No newline at end of file\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/instrument\/package-info.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -36,0 +36,3 @@\n+\/**\n+ * Calls to this class' collect(...) methods are injected in the beginning of every instrumented method.\n+ *\/\n@@ -48,0 +51,1 @@\n+\/\/        keep these lines, it is useful for debugging in hard cases\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/runtime\/Collect.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,4 @@\n+\/**\n+ * Data container for the values collected in runtime. Same class is used to store template as a file with no\n+ * values and just method descriptions.\n+ *\/\n@@ -61,0 +65,4 @@\n+\n+    \/**\n+     * Loads the data from a file in a custom plain text format.\n+     *\/\n@@ -80,0 +88,4 @@\n+\n+    \/**\n+     * Saves the data into a file in a custom plain text format.\n+     *\/\n@@ -113,0 +125,3 @@\n+    \/**\n+     * Obtains a structure for the data, adding an empty one, if necessary.\n+     *\/\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/runtime\/Coverage.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -41,0 +41,3 @@\n+    \/**\n+     * Name of a property defining where to save the results.\n+     *\/\n@@ -42,0 +45,4 @@\n+    \/**\n+     * Name of a property containing a class name of a class of type <code>Function<Object, String><\/code> which will\n+     * be used during the serialization. <code>Object::toString<\/code> is used by default.\n+     *\/\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/runtime\/Saver.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * This package contains core classes which are needed at runtime.\n+ *\/\n+package openjdk.jcov.data.arguments.runtime;\n\\ No newline at end of file\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/runtime\/package-info.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -27,0 +27,4 @@\n+\/**\n+ * Contains necessary type information for code generation, etc. Should be extended as needed with the actual code\n+ * generation logic.\n+ *\/\n@@ -29,1 +33,1 @@\n-    private final String cls;\n+    private final Class cls;\n@@ -39,1 +43,1 @@\n-        this.cls = cls.getName().replace('.','\/');\n+        this.cls = cls;\n@@ -49,3 +53,3 @@\n-    public String cls() {\n-        return cls;\n-    }\n+    public String clsName() { return cls.getName().replace('.','\/'); }\n+\n+    public Class cls() { return cls; }\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/instrument\/TypeDescriptor.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+\/**\n+ * Restores enum object from its name.\n+ *\/\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/serialization\/EnumDeserializer.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+\/**\n+ * Serializes an enum into its name.\n+ *\/\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/serialization\/EnumSerializer.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.jcov.data.arguments.enums;\n+\n+import openjdk.jcov.data.arguments.instrument.MethodFilter;\n+import openjdk.jcov.data.arguments.instrument.Plugin;\n+\n+public class EnumMethodsFilter implements MethodFilter {\n+    @Override\n+    public boolean accept(int access, String owner, String method, String desc) throws ClassNotFoundException {\n+        return Plugin.parseDesc(desc).stream().anyMatch(td -> {\n+            try {\n+                return Enum.class.isAssignableFrom(Class.forName(td.clsName().replace('\/', '.')));\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+}\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/enums\/EnumMethodsFilter.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -57,1 +57,0 @@\n-    private EnumSerializer serializer = new EnumSerializer();\n@@ -78,1 +77,2 @@\n-                JCOV_TEMPLATE, test_dir.resolve(\"template.xml\").toString()));\n+                JCOV_TEMPLATE, test_dir.resolve(\"template.xml\").toString(),\n+                METHOD_FILTER, EnumMethodsFilter.class.getName()));\n@@ -83,1 +83,1 @@\n-        assertEquals(tmplt.coverage().get(UserCode.class.getName().replace('.', '\/')).size(), 4);\n+        assertEquals(tmplt.coverage().get(UserCode.class.getName().replace('.', '\/')).size(), 2);\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/enums\/EnumTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.jcov.data.arguments.main;\n+\n+import openjdk.jcov.data.arguments.instrument.MethodFilter;\n+import openjdk.jcov.data.arguments.instrument.Plugin;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.List;\n+\n+public class MainFilter implements MethodFilter {\n+    @Override\n+    public boolean accept(int access, String owner, String method, String desc) throws ClassNotFoundException {\n+        List<Plugin.TypeDescriptor> params = Plugin.parseDesc(desc);\n+        return method.equals(\"main\") &&\n+                params.size() == 1 &&\n+                (access & Modifier.STATIC) > 0 &&\n+                (access & Modifier.PUBLIC) > 0 &&\n+                desc.endsWith(\")V\") &&\n+                params.stream().anyMatch(td -> td.cls().isArray());\n+    }\n+}\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/main\/MainFilter.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.jcov.data.arguments.main;\n+\n+import openjdk.jcov.data.Env;\n+import openjdk.jcov.data.Instrument;\n+import openjdk.jcov.data.arguments.instrument.MethodFilter;\n+import openjdk.jcov.data.arguments.instrument.Plugin;\n+import openjdk.jcov.data.arguments.runtime.Coverage;\n+import openjdk.jcov.data.arguments.runtime.Saver;\n+import openjdk.jcov.data.lib.Util;\n+import openjdk.jcov.data.serialization.EnumDeserializer;\n+import openjdk.jcov.data.serialization.EnumSerializer;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import static openjdk.jcov.data.Instrument.JCOV_TEMPLATE;\n+import static openjdk.jcov.data.arguments.analysis.Reader.DESERIALIZER;\n+import static openjdk.jcov.data.arguments.instrument.Plugin.*;\n+import static openjdk.jcov.data.arguments.runtime.Saver.RESULT_FILE;\n+import static org.testng.Assert.assertEquals;\n+\n+public class MainTest {\n+    private Path test_dir;\n+    private Path template;\n+    private Path coverage;\n+    private MethodFilter mainFilter;\n+\n+    @BeforeClass\n+    public void clean() throws IOException {\n+        Path data_dir = Paths.get(System.getProperty(\"user.dir\"));\n+        test_dir = data_dir.resolve(\"parameter_test\");\n+        template = test_dir.resolve(\"template.lst\");\n+        coverage = test_dir.resolve(\"coverage.lst\");\n+        Files.deleteIfExists(template);\n+        mainFilter = new MainFilter();\n+        Env.properties(Map.of(\n+                TEMPLATE_FILE, template.toString(),\n+                JCOV_TEMPLATE, test_dir.resolve(\"template.xml\").toString(),\n+                METHOD_FILTER, MainFilter.class.getName()));\n+    }\n+    private Coverage instrument(Class cls) throws IOException, InterruptedException {\n+        new Instrument().pluginClass(Plugin.class.getName())\n+                .instrument(new Util(test_dir).\n+                        copyBytecode(cls.getName()));\n+        return Coverage.readTemplate(template);\n+    }\n+    @Test\n+    public void instrumentStatic() throws IOException, InterruptedException {\n+        Coverage tmplt = instrument(UserCodeStatic.class);\n+        Map<String, List<List<?>>> userCode =  tmplt.coverage().get(UserCodeStatic.class.getName().replace('.', '\/'));\n+        assertEquals(userCode.size(), 1);\n+        assertEquals(userCode.keySet().iterator().next(), \"main([Ljava\/lang\/String;)V\");\n+    }\n+    @Test\n+    public void instrument() throws IOException, InterruptedException {\n+        Coverage tmplt = instrument(UserCode.class);\n+        assertEquals(tmplt.coverage().size(), 0);\n+    }\n+    @Test(dependsOnMethods = \"instrument\")\n+    public void run() throws\n+            ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException,\n+            IOException, InstantiationException {\n+        Env.properties(Map.of(\n+                TEMPLATE_FILE, template.toString(),\n+                RESULT_FILE, coverage.toString(),\n+                SERIALIZER, StringArraySerializer.class.getName(),\n+                DESERIALIZER, StringArrayDeserializer.class.getName()));\n+        new Util(test_dir).runClass(UserCodeStatic.class, new String[] {\"one\", \"two\"}, new Saver());\n+        Coverage res = Coverage.read(coverage, Objects::toString);\n+        List<List<?>> method =\n+                res.get(UserCodeStatic.class.getName().replace('.', '\/'),\n+                        \"main([Ljava\/lang\/String;)V\");\n+        assertEquals(method.size(), 1);\n+        assertEquals(method.get(0).size(), 2);\n+        assertEquals(method.get(0).get(0), \"one\");\n+        assertEquals(method.get(0).get(1), \"two\");\n+    }\n+}\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/main\/MainTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.jcov.data.arguments.main;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+\/\/TODO move this to the source after figuring out TypeDescriptor for arrays\n+public class StringArrayDeserializer implements Function<String, List<String>> {\n+    @Override\n+    public List<String> apply(String s) {\n+        return Arrays.stream(s.split(\",\")).collect(toList());\n+    }\n+}\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/main\/StringArrayDeserializer.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.jcov.data.arguments.main;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import static java.util.stream.Collectors.joining;\n+\n+\/\/TODO move this to the source after figuring out TypeDescriptor for arrays\n+public class StringArraySerializer implements Function<Object, String> {\n+    @Override\n+    public String apply(Object o) {\n+        if(o.getClass().isArray() && o.getClass().getComponentType().equals(String.class)) {\n+            return Arrays.stream((String[])o).collect(joining(\",\"));\n+        } else return null;\n+    }\n+}\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/main\/StringArraySerializer.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.jcov.data.arguments.main;\n+\n+public class UserCode {\n+    public void main(String[] args) {}\n+    public void main(String arg) {}\n+    public void main() {}\n+}\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/main\/UserCode.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.jcov.data.arguments.main;\n+\n+public class UserCodeStatic {\n+    public static void main(String[] args) {}\n+    public static void main(String arg) {}\n+    public static void main() {}\n+}\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/main\/UserCodeStatic.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"}]}