{"files":[{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument;\n+\n+import com.sun.tdk.jcov.data.FileFormatException;\n+import com.sun.tdk.jcov.instrument.reader.Reader;\n+import com.sun.tdk.jcov.instrument.reader.ReaderFactory;\n+\n+\/**\n+ * CharacterRangeTableAttribute\n+ *\n+ *\n+ *\n+ * @author Robert Field\n+ *\/\n+public class CharacterRangeTable {\n+\n+    public static class CRTEntry extends LocationConcrete {\n+\n+        public final int char_start;\n+        public final int char_end;\n+        public final int flags;\n+        public static final int CRT_STATEMENT = 0x0001;\n+        public static final int CRT_BLOCK = 0x0002;\n+        public static final int CRT_ASSIGNMENT = 0x0004;\n+        public static final int CRT_FLOW_CONTROLLER = 0x0008;\n+        public static final int CRT_FLOW_TARGET = 0x0010;\n+        public static final int CRT_INVOKE = 0x0020;\n+        public static final int CRT_CREATE = 0x0040;\n+        public static final int CRT_BRANCH_TRUE = 0x0080;\n+        public static final int CRT_BRANCH_FALSE = 0x0100;\n+\n+        public CRTEntry(final int rootId,\n+                final int start_pc,\n+                final int end_pc,\n+                final int char_start,\n+                final int char_end,\n+                final int flags) {\n+            super(rootId, start_pc, end_pc);\n+            this.char_start = char_start;\n+            this.char_end = char_end;\n+            this.flags = flags;\n+        }\n+\n+        \/**\n+         * XML Generation\n+         *\/\n+        public String kind() {\n+            return XmlNames.RANGE;\n+        }\n+\n+        public void xmlAttrs(XmlContext ctx) {\n+            super.xmlAttrs(ctx);\n+            if ((flags & CRT_STATEMENT) != 0) {\n+                ctx.attr(XmlNames.A_STATEMENT, true);\n+            }\n+            if ((flags & CRT_BLOCK) != 0) {\n+                ctx.attr(XmlNames.A_BLOCK, true);\n+            }\n+            if ((flags & CRT_ASSIGNMENT) != 0) {\n+                ctx.attr(XmlNames.A_ASSIGNMENT, true);\n+            }\n+            if ((flags & CRT_FLOW_CONTROLLER) != 0) {\n+                ctx.attr(XmlNames.A_CONTROLLER, true);\n+            }\n+            if ((flags & CRT_FLOW_TARGET) != 0) {\n+                ctx.attr(XmlNames.A_TARGET, true);\n+            }\n+            if ((flags & CRT_INVOKE) != 0) {\n+                ctx.attr(XmlNames.A_INVOKE, true);\n+            }\n+            if ((flags & CRT_CREATE) != 0) {\n+                ctx.attr(XmlNames.A_CREATE, true);\n+            }\n+            if ((flags & CRT_BRANCH_TRUE) != 0) {\n+                ctx.attr(XmlNames.A_BRANCHTRUE, true);\n+            }\n+            if ((flags & CRT_BRANCH_FALSE) != 0) {\n+                ctx.attr(XmlNames.A_BRANCHFALSE, true);\n+            }\n+        }\n+\n+        private void xmlPos(XmlContext ctx, int char_pos) {\n+            ctx.indent();\n+            ctx.format(\"<\" + XmlNames.CRT_POS + \" \" + XmlNames.CRT_LINE + \"='%d' \"\n+                    + XmlNames.CRT_COL + \"='%d'\/>\", char_pos >> 10, char_pos & 0x3FF);\n+            ctx.println();\n+        }\n+\n+        void xmlBody(XmlContext ctx) {\n+            xmlPos(ctx, char_start);\n+            xmlPos(ctx, char_end);\n+        }\n+    }\n+    public int length;\n+    public CRTEntry[] entries;\n+    private int rootId;\n+\n+    public int getRootId() {\n+        return rootId;\n+    }\n+\n+    public void setRootId(int rootId) {\n+        this.rootId = rootId;\n+    }\n+\n+    \/**\n+     * Creates a new instance of CharacterRangeTableAttribute\n+     *\/\n+    public CharacterRangeTable(int rootId) {\n+        this(rootId, 0, new CRTEntry[0]);\n+    }\n+\n+    public CharacterRangeTable(int rootId, int length, CRTEntry[] entries) {\n+        this.length = length;\n+        this.entries = entries;\n+        this.rootId = rootId;\n+    }\n+\n+    public CRTEntry[] getEntries() {\n+        return entries;\n+    }\n+\n+    public void setEntries(CRTEntry[] entries) {\n+        this.entries = entries;\n+    }\n+\n+    \/*\n+     * return entry with given pc and flag set,\n+     * if there are more then one found , return first in source code\n+     *\/\n+    CRTEntry getEntry(int pc, int flag) {\n+        CRTEntry result = null;\n+        for (CRTEntry entry : getEntries()) {\n+            if (entry.startBCI() == pc\n+                    && (entry.flags & flag) != 0) {\n+                result = (result == null) ? entry\n+                        : entry.char_start < result.char_start ? entry : result;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    \/**\n+     * XML Generation\n+     *\n+     * Since there is no multiple inheritance, we aren't a DataAbstract, but\n+     * we'll fake it\n+     *\/\n+    public void xmlGen(XmlContext ctx) {\n+        ctx.indent();\n+        ctx.println(\"<\" + XmlNames.CRT + \">\");\n+        ctx.incIndent();\n+        for (CRTEntry entry : entries) {\n+            entry.xmlGen(ctx);\n+        }\n+        ctx.decIndent();\n+        ctx.indent();\n+        ctx.println(\"<\/\" + XmlNames.CRT + \">\");\n+    }\n+\n+    public void readDataFrom() throws FileFormatException {\n+        ReaderFactory rf = DataRoot.getInstance(rootId).getReaderFactory();\n+        Reader r = rf.getReaderFor(this);\n+        r.readData(this);\n+    }\n+\n+\n+    public int getPos(int line, int col) {\n+        return line << 10 | col;\n+    }\n+}\n\\ No newline at end of file\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/CharacterRangeTable.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute;\n@@ -52,1 +51,1 @@\n-    private CharacterRangeTableAttribute characterRangeTable = null;\n+    private CharacterRangeTable characterRangeTable = null;\n@@ -124,1 +123,1 @@\n-    public void setCharacterRangeTable(CharacterRangeTableAttribute crt) {\n+    public void setCharacterRangeTable(CharacterRangeTable crt) {\n@@ -133,1 +132,1 @@\n-    public CharacterRangeTableAttribute getCharacterRangeTable() {\n+    public CharacterRangeTable getCharacterRangeTable() {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethodWithBlocks.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable;\n@@ -328,1 +329,1 @@\n-                for (CharacterRangeTableAttribute.CRTEntry entry : method().getCharacterRangeTable().getEntries()) {\n+                for (CharacterRangeTable.CRTEntry entry : method().getCharacterRangeTable().getEntries()) {\n@@ -331,1 +332,1 @@\n-                        if ((entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n+                        if ((entry.flags & CharacterRangeTable.CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n@@ -341,1 +342,1 @@\n-                        if (entry.endBCI() == index && (entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_FLOW_TARGET) != 0) {\n+                        if (entry.endBCI() == index && (entry.flags & CharacterRangeTable.CRTEntry.CRT_FLOW_TARGET) != 0) {\n@@ -439,1 +440,1 @@\n-            method().setCharacterRangeTable((CharacterRangeTableAttribute) attr);\n+            method().setCharacterRangeTable(((CharacterRangeTableAttribute) attr).getCrt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BlockCodeMethodAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable;\n@@ -358,1 +359,1 @@\n-                for (CharacterRangeTableAttribute.CRTEntry entry : method().getCharacterRangeTable().getEntries()) {\n+                for (CharacterRangeTable.CRTEntry entry : method().getCharacterRangeTable().getEntries()) {\n@@ -361,1 +362,1 @@\n-                        if ((entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n+                        if ((entry.flags & CharacterRangeTable.CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n@@ -371,1 +372,1 @@\n-                        if (entry.endBCI() == index && (entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_FLOW_TARGET) != 0) {\n+                        if (entry.endBCI() == index && (entry.flags & CharacterRangeTable.CRTEntry.CRT_FLOW_TARGET) != 0) {\n@@ -513,1 +514,1 @@\n-            method().setCharacterRangeTable((CharacterRangeTableAttribute) attr);\n+            method().setCharacterRangeTable(((CharacterRangeTableAttribute) attr).getCrt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BranchCodeMethodAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,7 +27,2 @@\n-import com.sun.tdk.jcov.data.FileFormatException;\n-import com.sun.tdk.jcov.instrument.DataRoot;\n-import com.sun.tdk.jcov.instrument.LocationConcrete;\n-import com.sun.tdk.jcov.instrument.XmlContext;\n-import com.sun.tdk.jcov.instrument.XmlNames;\n-import com.sun.tdk.jcov.instrument.reader.Reader;\n-import com.sun.tdk.jcov.instrument.reader.ReaderFactory;\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable;\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable.CRTEntry;\n@@ -35,0 +30,1 @@\n+import org.objectweb.asm.ByteVector;\n@@ -37,1 +33,0 @@\n-import org.objectweb.asm.ByteVector;\n@@ -49,103 +44,1 @@\n-    public static class CRTEntry extends LocationConcrete {\n-\n-        public final int char_start;\n-        public final int char_end;\n-        public final int flags;\n-        public static final int CRT_STATEMENT = 0x0001;\n-        public static final int CRT_BLOCK = 0x0002;\n-        public static final int CRT_ASSIGNMENT = 0x0004;\n-        public static final int CRT_FLOW_CONTROLLER = 0x0008;\n-        public static final int CRT_FLOW_TARGET = 0x0010;\n-        public static final int CRT_INVOKE = 0x0020;\n-        public static final int CRT_CREATE = 0x0040;\n-        public static final int CRT_BRANCH_TRUE = 0x0080;\n-        public static final int CRT_BRANCH_FALSE = 0x0100;\n-\n-        public CRTEntry(final int rootId,\n-                final int start_pc,\n-                final int end_pc,\n-                final int char_start,\n-                final int char_end,\n-                final int flags) {\n-            super(rootId, start_pc, end_pc);\n-            this.char_start = char_start;\n-            this.char_end = char_end;\n-            this.flags = flags;\n-        }\n-\n-        void put(ByteVector bv) {\n-            bv.putShort(startBCI());\n-            bv.putShort(endBCI());\n-            bv.putInt(char_start);\n-            bv.putInt(char_end);\n-            bv.putShort(flags);\n-        }\n-\n-        \/**\n-         * XML Generation\n-         *\/\n-        public String kind() {\n-            return XmlNames.RANGE;\n-        }\n-\n-        public void xmlAttrs(XmlContext ctx) {\n-            super.xmlAttrs(ctx);\n-            if ((flags & CRT_STATEMENT) != 0) {\n-                ctx.attr(XmlNames.A_STATEMENT, true);\n-            }\n-            if ((flags & CRT_BLOCK) != 0) {\n-                ctx.attr(XmlNames.A_BLOCK, true);\n-            }\n-            if ((flags & CRT_ASSIGNMENT) != 0) {\n-                ctx.attr(XmlNames.A_ASSIGNMENT, true);\n-            }\n-            if ((flags & CRT_FLOW_CONTROLLER) != 0) {\n-                ctx.attr(XmlNames.A_CONTROLLER, true);\n-            }\n-            if ((flags & CRT_FLOW_TARGET) != 0) {\n-                ctx.attr(XmlNames.A_TARGET, true);\n-            }\n-            if ((flags & CRT_INVOKE) != 0) {\n-                ctx.attr(XmlNames.A_INVOKE, true);\n-            }\n-            if ((flags & CRT_CREATE) != 0) {\n-                ctx.attr(XmlNames.A_CREATE, true);\n-            }\n-            if ((flags & CRT_BRANCH_TRUE) != 0) {\n-                ctx.attr(XmlNames.A_BRANCHTRUE, true);\n-            }\n-            if ((flags & CRT_BRANCH_FALSE) != 0) {\n-                ctx.attr(XmlNames.A_BRANCHFALSE, true);\n-            }\n-        }\n-\n-        private void xmlPos(XmlContext ctx, int char_pos) {\n-            ctx.indent();\n-            ctx.format(\"<\" + XmlNames.CRT_POS + \" \" + XmlNames.CRT_LINE + \"='%d' \"\n-                    + XmlNames.CRT_COL + \"='%d'\/>\", char_pos >> 10, char_pos & 0x3FF);\n-            ctx.println();\n-        }\n-\n-        void xmlBody(XmlContext ctx) {\n-            xmlPos(ctx, char_start);\n-            xmlPos(ctx, char_end);\n-        }\n-    }\n-    public int length;\n-    public CRTEntry[] entries;\n-    private int rootId;\n-\n-    public int getRootId() {\n-        return rootId;\n-    }\n-\n-    public void setRootId(int rootId) {\n-        this.rootId = rootId;\n-    }\n-\n-    \/**\n-     * Creates a new instance of CharacterRangeTableAttribute\n-     *\/\n-    public CharacterRangeTableAttribute(int rootId) {\n-        this(rootId, 0, new CRTEntry[0]);\n-    }\n+    private CharacterRangeTable crt;\n@@ -153,1 +46,1 @@\n-    CharacterRangeTableAttribute(int rootId, int length, CRTEntry[] entries) {\n+    CharacterRangeTableAttribute(CharacterRangeTable crt) {\n@@ -155,7 +48,1 @@\n-        this.length = length;\n-        this.entries = entries;\n-        this.rootId = rootId;\n-    }\n-\n-    CRTEntry[] getEntries() {\n-        return entries;\n+        this.crt = crt;\n@@ -164,2 +51,2 @@\n-    public void setEntries(CRTEntry[] entries) {\n-        this.entries = entries;\n+    public CharacterRangeTable getCrt() {\n+        return crt;\n@@ -173,14 +60,6 @@\n-    \/*\n-     * return entry with given pc and flag set,\n-     * if there are more then one found , return first in source code\n-     *\/\n-    CRTEntry getEntry(int pc, int flag) {\n-        CRTEntry result = null;\n-        for (CRTEntry entry : getEntries()) {\n-            if (entry.startBCI() == pc\n-                    && (entry.flags & flag) != 0) {\n-                result = (result == null) ? entry\n-                        : entry.char_start < result.char_start ? entry : result;\n-            }\n-        }\n-        return result;\n+    void put(CRTEntry entry, ByteVector bv) {\n+        bv.putShort(entry.startBCI());\n+        bv.putShort(entry.endBCI());\n+        bv.putInt(entry.char_start);\n+        bv.putInt(entry.char_end);\n+        bv.putShort(entry.flags);\n@@ -201,1 +80,1 @@\n-            entries[i] = new CRTEntry(rootId, start_pc, end_pc, char_start, char_end, flags);\n+            entries[i] = new CRTEntry(crt.getRootId(), start_pc, end_pc, char_start, char_end, flags);\n@@ -203,1 +82,1 @@\n-        return new CharacterRangeTableAttribute(rootId, length, entries);\n+        return new CharacterRangeTableAttribute(new CharacterRangeTable(crt.getRootId(), length, entries));\n@@ -210,3 +89,3 @@\n-        bv.putShort(length);\n-        for (CRTEntry entry : entries) {\n-            entry.put(bv);\n+        bv.putShort(crt.length);\n+        for (CRTEntry entry : crt.entries) {\n+            put(entry, bv);\n@@ -217,29 +96,1 @@\n-    \/**\n-     * XML Generation\n-     *\n-     * Since there is no multiple inheritance, we aren't a DataAbstract, but\n-     * we'll fake it\n-     *\/\n-    public void xmlGen(XmlContext ctx) {\n-        ctx.indent();\n-        ctx.println(\"<\" + XmlNames.CRT + \">\");\n-        ctx.incIndent();\n-        for (CRTEntry entry : entries) {\n-            entry.xmlGen(ctx);\n-        }\n-        ctx.decIndent();\n-        ctx.indent();\n-        ctx.println(\"<\/\" + XmlNames.CRT + \">\");\n-    }\n-\n-    public void readDataFrom() throws FileFormatException {\n-        ReaderFactory rf = DataRoot.getInstance(rootId).getReaderFactory();\n-        Reader r = rf.getReaderFor(this);\n-        r.readData(this);\n-    }\n-\n-\n-    public int getPos(int line, int col) {\n-        return line << 10 | col;\n-    }\n-}\n\\ No newline at end of file\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/CharacterRangeTableAttribute.java","additions":20,"deletions":169,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable;\n@@ -274,1 +275,2 @@\n-        cr.accept(cv, new Attribute[]{new CharacterRangeTableAttribute(root.rootId())}, 0);\n+        cr.accept(cv,\n+                new Attribute[]{new CharacterRangeTableAttribute(new CharacterRangeTable(root.rootId()))}, 0);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute;\n-import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute.CRTEntry;\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable;\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable.CRTEntry;\n@@ -43,1 +43,1 @@\n-    CharacterRangeTableAttribute crt;\n+    CharacterRangeTable crt;\n@@ -47,1 +47,1 @@\n-        crt = (CharacterRangeTableAttribute) dest;\n+        crt = (CharacterRangeTable) dest;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/reader\/CharacterRangeTableAttributeStAX.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute;\n+import com.sun.tdk.jcov.instrument.CharacterRangeTable;\n@@ -98,1 +98,1 @@\n-                meth.setCharacterRangeTable(new CharacterRangeTableAttribute(meth.rootId()));\n+                meth.setCharacterRangeTable(new CharacterRangeTable(meth.rootId()));\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/reader\/DataMethodWithBlocksStAX.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}