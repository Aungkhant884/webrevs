{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.lang.instrument.Instrumentation;\n@@ -636,1 +637,1 @@\n-                    ClassMorph.DSC_FLUSH_CLASSES,\n+                    InstrumentationOptions.DSC_FLUSH_CLASSES,\n@@ -745,1 +746,1 @@\n-        flushPath = opts.getValue(ClassMorph.DSC_FLUSH_CLASSES);\n+        flushPath = opts.getValue(InstrumentationOptions.DSC_FLUSH_CLASSES);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Agent.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.tdk.jcov.insert.AbstractUniversalInstrumenter;\n@@ -30,1 +29,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n@@ -32,1 +30,0 @@\n-import com.sun.tdk.jcov.runtime.FileSaver;\n@@ -39,2 +36,0 @@\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n@@ -44,0 +39,2 @@\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n@@ -46,2 +43,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -51,0 +46,1 @@\n+import java.util.stream.Stream;\n@@ -53,0 +49,1 @@\n+import static com.sun.tdk.jcov.instrument.InstrumentationPlugin.TEMPLATE_ARTIFACT;\n@@ -92,3 +89,3 @@\n-    private AbstractUniversalInstrumenter instrumenter;\n-    private ClassMorph morph;\n-    private ClassLoader cl = null;\n+\/\/    private AbstractUniversalInstrumenter instrumenter;\n+\/\/    private ClassMorph morph;\n+    private ClassLoader cl = ClassLoader.getSystemClassLoader();\n@@ -96,0 +93,1 @@\n+    \/\/TODO do need both?\n@@ -104,6 +102,0 @@\n-    private boolean needToFixJavaBase = false;\n-\n-    public void fixJavaBase() {\n-        needToFixJavaBase = true;\n-    }\n-\n@@ -129,1 +121,1 @@\n-    public void instrumentAll(File[] files, File outDir, String includeRTJar) throws IOException {\n+    public void instrumentAll(File[] files, File outDir, String includeRTJar) throws Exception {\n@@ -131,1 +123,1 @@\n-        instrumenter.finishWork();\n+\/\/        instrumenter.finishWork();\n@@ -142,3 +134,1 @@\n-     * @see\n-     * #setInstrumenter(com.sun.tdk.jcov.insert.AbstractUniversalInstrumenter)\n-     * @see #setDefaultInstrumenter()\n+     * @see #setup()\n@@ -146,1 +136,1 @@\n-    public void instrumentAll(File[] files, File outDir) throws IOException {\n+    public void instrumentAll(File[] files, File outDir) throws Exception {\n@@ -160,3 +150,1 @@\n-     * @see\n-     * #setInstrumenter(com.sun.tdk.jcov.insert.AbstractUniversalInstrumenter)\n-     * @see #setDefaultInstrumenter()\n+     * @see #setup()\n@@ -165,3 +153,3 @@\n-    public void instrumentFile(File file, File outDir, String includeRTJar) throws IOException {\n-        setDefaultInstrumenter();\n-        instrumenter.instrument(file, outDir, includeRTJar, recurse);\n+    public void instrumentFile(File file, File outDir, String includeRTJar) throws Exception {\n+        instrumentFiles(new String[] {file.getAbsolutePath()}, outDir, includeRTJar);\n+        \/\/instrumenter.instrument(file, outDir, includeRTJar, recurse);\n@@ -180,3 +168,1 @@\n-     * @see\n-     * #setInstrumenter(com.sun.tdk.jcov.insert.AbstractUniversalInstrumenter)\n-     * @see #setDefaultInstrumenter()\n+     * @see #setup()\n@@ -185,1 +171,1 @@\n-    public void instrumentFile(String file, File outDir, String includeRTJar) throws IOException {\n+    public void instrumentFile(String file, File outDir, String includeRTJar) throws Exception {\n@@ -189,26 +175,3 @@\n-    public void instrumentFile(String file, File outDir, String includeRTJar, String moduleName) throws IOException {\n-        if (morph != null){\n-            morph.setCurrentModuleName(moduleName);\n-            if(needToFixJavaBase && \"java.base\".equals(moduleName)) {\n-                File moduleInfo = new File(file + File.separator +  \"module-info.class\");\n-                if(!moduleInfo.exists()) throw new IllegalStateException(moduleInfo + \" does not exist!\");\n-                try(FileInputStream fi = new FileInputStream(moduleInfo)) {\n-                    byte[] noHashes = morph.clearHashes(fi.readAllBytes(), cl);\n-                    List<String> packages = new ArrayList<>();\n-                    packages.add(\"com\/sun\/tdk\/jcov\/runtime\");\n-\/\/                    if(plugin != null) {\n-\/\/                        String pluginRuntimePackage = plugin.collectorPackage();\n-\/\/                        if (pluginRuntimePackage != null) {\n-\/\/                            pluginRuntimePackage = pluginRuntimePackage.replace('.', '\/');\n-\/\/                            packages.add(pluginRuntimePackage);\n-\/\/                        }\n-\/\/                    }\n-                    byte[] withExports = morph.addExports(noHashes, packages, cl);\n-                    try (FileOutputStream fo = new FileOutputStream(((outDir == null) ? file : outDir) +\n-                            File.separator +  \"module-info.class\")) {\n-                        fo.write(withExports);\n-                    }\n-                }\n-            }\n-            instrumentFile(new File(file), outDir, includeRTJar);\n-        }\n+    @Deprecated\n+    public void instrumentFile(String file, File outDir, String includeRTJar, String moduleName) throws Exception {\n+        instrumentFiles(new String[] {file}, outDir, includeRTJar);\n@@ -227,5 +190,3 @@\n-    public void instrumentFiles(File[] files, File outDir, String implantRT) throws IOException {\n-        setDefaultInstrumenter();\n-        for (File file : files) {\n-            instrumenter.instrument(file, outDir, implantRT, recurse);\n-        }\n+    public void instrumentFiles(File[] files, File outDir, String implantRT) throws Exception {\n+        instrumentFiles(Stream.of(files).map(File::toString).collect(Collectors.toList()).toArray(new String[0]),\n+                outDir, implantRT);\n@@ -245,2 +206,10 @@\n-        \/\/TODO rename\n-        setDefaultInstrumenter();\n+        setup();\n+        InstrumentationPlugin aPLugin = plugin;\n+        InstrumentationPlugin.Source source;\n+        if (implantRT != null) {\n+            source = new InstrumentationPlugin.PathSource(ClassLoader.getSystemClassLoader(), Path.of(implantRT));\n+            aPLugin = new InstrumentationPlugin.ImplantingPlugin(plugin, source);\n+        }\n+\n+        InstrumentationPlugin.Instrumentation fi =\n+                new InstrumentationPlugin.Instrumentation(aPLugin);\n@@ -248,23 +217,27 @@\n-            Path in = Path.of(file);\n-            Path out = (outDir != null) ? outDir.toPath() : in;\n-            List<String> classes = Files.find(in, Integer.MAX_VALUE,\n-                            (f, a) -> f.getFileName().toString().endsWith(\".class\"))\n-                    .map(f -> in.relativize(f))\n-                    .map(Path::toString)\n-                    .map(s -> s.substring(0, s.length() - \".class\".length()))\n-                    .collect(Collectors.toList());\n-            params.isIncluded(\"UserCode\");\n-            plugin.instrument(classes, f -> {\n-\/\/            params.filter(plugin).instrument(classes, f -> {\n-                try {\n-                    return Files.readAllBytes(in.resolve(f + \".class\"));\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            }, (c, d) -> {\n-                try {\n-                    Files.write(out.resolve(c + \".class\"), d);\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            }, params);\n+            InstrumentationPlugin.PathSource in;\n+\/\/            FileSystem outFS = null;\n+            Path inPath = Path.of(file);\n+            if (Files.isDirectory(inPath) || file.endsWith(\".jar\") || file.endsWith(\".jmod\")) {\n+                in = new InstrumentationPlugin.PathSource(cl, inPath);\n+            } else if (Files.isRegularFile(inPath) && file.endsWith(\".class\")) {\n+                \/\/TODO implement by directly calling the plugin\n+                \/\/TODO deprecate in documentation: instead of providing specific files, ask the user to provide\n+                \/\/a class hierarchy root and filters\n+                throw new RuntimeException();\n+            } else throw new IllegalStateException(\"Unknown input kind: \" + file);\n+            InstrumentationPlugin.Destination out;\n+            Path outPath = (outDir != null) ? outDir.toPath().resolve(inPath.getFileName()) : inPath;\n+            if (Files.isDirectory(outPath) ||\n+                    outPath.toString().endsWith(\".jar\") ||\n+                    outPath.toString().endsWith(\".jmod\")) {\n+                out = new InstrumentationPlugin.PathDestination(outPath);\n+            } else if (Files.isRegularFile(outPath) && outPath.toString().endsWith(\".class\")) {\n+                \/\/TODO as above\n+                throw new RuntimeException();\n+            } else throw new IllegalStateException(\"Unknown output kind: \" + file);\n+            try (in) {\n+                fi.instrument(in, out, params);\n+            } finally {\n+                in.close();\n+                out.close();\n+            }\n@@ -277,1 +250,2 @@\n-            morph.fillIntrMethodsIDs(morph.getRoot());\n+            \/\/TODO\n+            \/\/morph.fillIntrMethodsIDs(morph.getRoot());\n@@ -280,1 +254,1 @@\n-        setDefaultInstrumenter();\n+        setup();\n@@ -282,1 +256,2 @@\n-            instrumenter.instrument(new File(file), outDir, implantRT, recurse);\n+            \/\/TODO\n+            \/\/instrumenter.instrument(new File(file), outDir, implantRT, recurse);\n@@ -292,1 +267,1 @@\n-        setDefaultInstrumenter();\n+        setup();\n@@ -298,1 +273,1 @@\n-    private void setDefaultInstrumenter() {\n+    private void setup() {\n@@ -323,37 +298,0 @@\n-        if (morph == null) {\n-            if (subsequentInstr) {\n-                morph = new ClassMorph(params, template);\n-            } else {\n-                morph = new ClassMorph(params, null);\n-            }\n-        }\n-        if (instrumenter == null) {\n-            instrumenter = new AbstractUniversalInstrumenter(true) {\n-                protected byte[] instrument(byte[] classData, int classLen) throws IOException {\n-                    return morph.morph(classData, cl, flushPath);\n-                }\n-\n-                public void finishWork() {\n-                    if (subsequentInstr) {\n-                        morph.saveData(MERGE.MERGE); \/\/ template should be initialized\n-                    } else {\n-                        morph.saveData(template, null, MERGE.OVERWRITE); \/\/ template should be initialized\n-                    }\n-                }\n-\n-                 public void processClassFileInModules(Path filePath, File outDir){\n-                    if (morph != null){\n-                        if (filePath != null){\n-                            String mpath = filePath.toAbsolutePath().toString();\n-                            mpath = mpath.substring(\"\/modules\/\".length());\n-                            if (mpath.contains(\"\/\")){\n-                                String module_name = mpath.substring(0, mpath.indexOf(\"\/\"));\n-                                morph.setCurrentModuleName(module_name);\n-                            }\n-                        }\n-                        super.processClassFileInModules(filePath, outDir);\n-                    }\n-                }\n-            };\n-            instrumenter.setParams(params);\n-        }\n@@ -362,9 +300,0 @@\n-    \/**\n-     * Set instrumenter\n-     *\n-     * @param instrumenter instrumenter used to instrument data\n-     *\/\n-\/\/    public void setInstrumenter(AbstractUniversalInstrumenter instrumenter) {\n-\/\/        this.instrumenter = instrumenter;\n-\/\/    }\n-\n@@ -377,5 +306,1 @@\n-\/\/        if (instrumenter != null) {\n-\/\/            instrumenter.finishWork();\n-            \/\/ destroy instrumenter & morph?\n-\/\/        }\n-\/\/        if(plugin != null) plugin.instrumentationComplete();\n+        plugin.complete().get(TEMPLATE_ARTIFACT).accept(Files.newOutputStream(Path.of(template)));\n@@ -391,15 +316,2 @@\n-\/\/        if (instrumenter != null) {\n-\/\/            if (subsequentInstr) {\n-\/\/                morph.saveData(outTemplate, MERGE.MERGE); \/\/ template should be initialized\n-\/\/            } else {\n-\/\/                morph.saveData(outTemplate, null, MERGE.OVERWRITE); \/\/ template should be initialized\n-\/\/            }\n-\/\/        }\n-\/\/        if(plugin != null) plugin.instrumentationComplete();\n-        plugin.complete(() -> {\n-            try {\n-                return Files.newOutputStream(Path.of(template));\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n-        });\n+        \/\/TODO what's with two finishWork methods????\n+        plugin.complete().get(TEMPLATE_ARTIFACT).accept(Files.newOutputStream(Path.of(outTemplate)));\n@@ -473,3 +385,3 @@\n-    public String[] getExclude() {\n-        return exclude;\n-    }\n+    public InstrumentationParams getParams() { return params; }\n+\n+    public String[] getExclude() { return exclude; }\n@@ -513,3 +425,1 @@\n-    public String[] getMInclude() {\n-        return m_include;\n-    }\n+    public String[] getMInclude() {return m_include;}\n@@ -517,3 +427,1 @@\n-    public void setMInclude(String[] m_include) {\n-        this.m_include = m_include;\n-    }\n+    public void setMInclude(String[] m_include) {this.m_include = m_include;}\n@@ -647,1 +555,1 @@\n-                ClassMorph.DSC_FLUSH_CLASSES,\n+                DSC_FLUSH_CLASSES,\n@@ -727,1 +635,1 @@\n-        flushPath = opts.getValue(ClassMorph.DSC_FLUSH_CLASSES);\n+        flushPath = opts.getValue(DSC_FLUSH_CLASSES);\n@@ -736,1 +644,1 @@\n-            if(pluginClass != null && !pluginClass.isEmpty())\n+            if(pluginClass != null && !pluginClass.isEmpty()) {\n@@ -739,0 +647,1 @@\n+            }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":80,"deletions":171,"binary":false,"changes":251,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n@@ -150,1 +149,1 @@\n-                    ClassMorph.DSC_FLUSH_CLASSES\n+                    InstrumentationOptions.DSC_FLUSH_CLASSES\n@@ -220,1 +219,1 @@\n-        flushPath = envHandler.getValue(ClassMorph.DSC_FLUSH_CLASSES);\n+        flushPath = envHandler.getValue(InstrumentationOptions.DSC_FLUSH_CLASSES);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr2.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n@@ -34,1 +35,7 @@\n-import java.io.*;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n@@ -39,0 +46,2 @@\n+import java.util.Arrays;\n+import java.util.List;\n@@ -41,0 +50,1 @@\n+import java.util.function.BiConsumer;\n@@ -44,0 +54,1 @@\n+import static com.sun.tdk.jcov.instrument.InstrumentationPlugin.MODULE_INFO_CLASS;\n@@ -75,24 +86,0 @@\n-    \/**\n-     * tries to find class in the specified jars\n-     *\/\n-    public static class StaticJREInstrClassLoader extends URLClassLoader {\n-\n-        StaticJREInstrClassLoader(URL[] urls) {\n-            super(urls);\n-        }\n-\n-        @Override\n-        public InputStream getResourceAsStream(String s) {\n-            InputStream in = null;\n-            try {\n-                in = findResource(s).openStream();\n-            } catch (IOException ignore) {\n-                \/\/nothing to do\n-            }\n-            if (in != null) {\n-                return in;\n-            }\n-            return super.getResourceAsStream(s);\n-        }\n-    }\n-\n@@ -105,5 +92,0 @@\n-        StaticJREInstrClassLoader cl = new StaticJREInstrClassLoader(new URL[]{toInstrument.toURI().toURL()});\n-        instr.setClassLoader(cl);\n-\n-        instr.fixJavaBase();\n-\n@@ -125,1 +107,2 @@\n-            cl = new StaticJREInstrClassLoader(urls.toArray(new URL[0]));\n+            ClassLoader cl = new InstrumentationPlugin.OverridingClassLoader(urls.toArray(new URL[0]),\n+                    ClassLoader.getSystemClassLoader());\n@@ -128,0 +111,19 @@\n+            \/\/TODO filtering\n+            InstrumentationPlugin.ModuleInstrumentation mi = new InstrumentationPlugin.ModuleInstrumentation(\n+                    instr.getPlugin(), (InstrumentationPlugin.ModuleInstrumentationPlugin) instr.getPlugin()) {\n+                public void proccessModule(byte[] moduleInfo, ClassLoader loader,\n+                                           BiConsumer<String, byte[]> destination) throws Exception {\n+                    InstrumentationPlugin.ModuleInstrumentationPlugin mip = getModulePluign();\n+                    if(mip.getModuleName(moduleInfo).equals(\"java.base\")) {\n+                        moduleInfo = mip.addExports(List.of(\"com\/sun\/tdk\/jcov\/runtime\"), moduleInfo, loader);\n+                        moduleInfo = mip.clearHashes(moduleInfo, loader);\n+                        InstrumentationPlugin.PathSource implantSource =\n+                                new InstrumentationPlugin.PathSource(cl, implant.toPath());\n+                        for (String resource : implantSource.resources()) {\n+                            destination.accept(resource, implantSource.loader().getResourceAsStream(resource).readAllBytes());\n+                        }\n+                    }\n+                    destination.accept(MODULE_INFO_CLASS, moduleInfo);\n+                }\n+            };\n+\n@@ -131,2 +133,7 @@\n-                        File modClasses = new File(mod, \"classes\");\n-                        instr.instrumentFile(modClasses.getAbsolutePath(), null, null, mod.getName());\n+                        String moduleName = mod.getName();\n+                        if (isModuleIncluded(moduleName)) {\n+                            logger.log(Level.INFO, \"Instrumenting \" + moduleName);\n+                            File modClasses = new File(mod, \"classes\");\n+                            mi.instrument(new InstrumentationPlugin.PathSource(cl, modClasses.toPath()),\n+                                    new InstrumentationPlugin.PathDestination(modClasses.toPath()), instr.getParams());\n+                        }\n@@ -166,0 +173,1 @@\n+                e.printStackTrace();\n@@ -170,60 +178,0 @@\n-\/\/            ArrayList<File> jdkImages = new ArrayList<>();\n-\/\/            jdkImages.add(toInstrument);\n-\/\/            if (addJimages != null) {\n-\/\/                Collections.addAll(jdkImages, addJimages);\n-\/\/            }\n-\/\/\n-\/\/            for (File jimageInstr : jdkImages) {\n-\/\/                String tempDirName = jimageInstr.getName().substring(0, jimageInstr.getName().indexOf(\".jimage\"));\n-\/\/\n-\/\/                expandJimage(jimageInstr, tempDirName);\n-\/\/\n-\/\/                File dirtoInstrument = new File(jimageInstr.getParent(), tempDirName);\n-\/\/\/\/                still need it\n-\/\/                Utils.addToClasspath(new String[]{dirtoInstrument.getAbsolutePath()});\n-\/\/                for (File file : getListFiles(dirtoInstrument)) {\n-\/\/                    if (file.isDirectory()) {\n-\/\/                        Utils.addToClasspath(new String[]{file.getAbsolutePath()});\n-\/\/                    }\n-\/\/                }\n-\/\/\n-\/\/                if (jimageInstr.equals(toInstrument)) {\n-\/\/                    for (File mod : getListFiles(dirtoInstrument)) {\n-\/\/                        if (mod != null && mod.isDirectory()) {\n-\/\/\n-\/\/                            if (\"java.base\".equals(mod.getName())) {\n-\/\/                                instr.instrumentFile(mod.getAbsolutePath(), null, implant.getAbsolutePath(), mod.getName());\n-\/\/                            } else {\n-\/\/                                instr.instrumentFile(mod.getAbsolutePath(), null, null, mod.getName());\n-\/\/                            }\n-\/\/                        }\n-\/\/                    }\n-\/\/                } else {\n-\/\/                    for (File mod : getListFiles(dirtoInstrument)) {\n-\/\/                        if (mod != null && mod.isDirectory()) {\n-\/\/                            instr.instrumentFile(mod.getAbsolutePath(), null, null, mod.getName());\n-\/\/                        }\n-\/\/                    }\n-\/\/                }\n-\/\/                createJimage(dirtoInstrument, jimageInstr.getAbsolutePath() + \"i\");\n-\n-\/\/            }\n-\/\/            for (File jimageInstr : jdkImages) {\n-\/\/\n-\/\/                String tempDirName = jimageInstr.getName().substring(0, jimageInstr.getName().indexOf(\".jimage\"));\n-\/\/                File dirtoInstrument = new File(jimageInstr.getParent(), tempDirName);\n-\/\/                if (!Utils.deleteDirectory(dirtoInstrument)) {\n-\/\/                    logger.log(Level.SEVERE, \"please, delete \" + tempDirName + \" jimage dir manually\");\n-\/\/                }\n-\/\/\n-\/\/                Utils.copyFile(jimageInstr, new File(jimageInstr.getParent(), jimageInstr.getName() + \".bak\"));\n-\/\/\n-\/\/                if (!jimageInstr.delete()) {\n-\/\/                    logger.log(Level.SEVERE, \"please, delete original jimage manually: \" + jimageInstr);\n-\/\/                } else {\n-\/\/                    Utils.copyFile(new File(jimageInstr.getAbsolutePath() + \"i\"), jimageInstr);\n-\/\/                    new File(jimageInstr.getAbsolutePath() + \"i\").delete();\n-\/\/                }\n-\/\/\n-\/\/            }\n-\n@@ -232,1 +180,0 @@\n-\/\/            instr.instrumentFile(toInstrument.getAbsolutePath(), null, implant.getAbsolutePath());\n@@ -264,1 +211,1 @@\n-        boolean success;\n+        boolean success = false;\n@@ -280,0 +227,2 @@\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n@@ -333,0 +282,4 @@\n+    private boolean isModuleIncluded(String moduleName) {\n+        return Arrays.stream(instr.getMInclude()).anyMatch(i -> moduleName.matches(i)) &&\n+               Arrays.stream(instr.getMExclude()).noneMatch(i -> moduleName.matches(i));\n+    }\n@@ -375,0 +328,1 @@\n+            e.printStackTrace();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/JREInstr.java","additions":49,"deletions":95,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n@@ -31,1 +30,0 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationParams;\n@@ -251,1 +249,1 @@\n-                    ClassMorph.DSC_FLUSH_CLASSES,}, this);\n+                    InstrumentationOptions.DSC_FLUSH_CLASSES,}, this);\n@@ -267,1 +265,1 @@\n-        flushPath = opts.getValue(ClassMorph.DSC_FLUSH_CLASSES);\n+        flushPath = opts.getValue(InstrumentationOptions.DSC_FLUSH_CLASSES);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/TmplGen.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -597,17 +597,17 @@\n-            try {\n-                plugin.instrument(classes, f -> {\n-                    try {\n-                        return Files.readAllBytes(in.resolve(f));\n-                    } catch (IOException e) {\n-                        throw new UncheckedIOException(e);\n-                    }\n-                }, (c, d) -> {\n-                    try {\n-                        Files.write(out.resolve(c), d);\n-                    } catch (IOException e) {\n-                        throw new UncheckedIOException(e);\n-                    }\n-                }, params);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n+\/\/            try {\n+\/\/                plugin.instrument(classes, f -> {\n+\/\/                    try {\n+\/\/                        return Files.readAllBytes(in.resolve(f));\n+\/\/                    } catch (IOException e) {\n+\/\/                        throw new UncheckedIOException(e);\n+\/\/                    }\n+\/\/                }, (c, d) -> {\n+\/\/                    try {\n+\/\/                        Files.write(out.resolve(c), d);\n+\/\/                    } catch (IOException e) {\n+\/\/                        throw new UncheckedIOException(e);\n+\/\/                    }\n+\/\/                }, params);\n+\/\/            } catch (Exception e) {\n+\/\/                throw new RuntimeException(e);\n+\/\/            }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/insert\/AbstractUniversalInstrumenter.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -162,0 +162,5 @@\n+    public final static OptionDescr DSC_FLUSH_CLASSES =\n+            new OptionDescr(\"flush\", null, \"flush instrumented classes\",\n+                    OptionDescr.VAL_SINGLE, null, \"Specify path to directory, where to store instrumented classes.\\n\"\n+                    + \"Directory should exist. Classes will be saved in respect to their package hierarchy.\\n\"\n+                    + \"Default value is \\\"none\\\". Pushing it means you don't want to flush classes.\", \"none\");\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationOptions.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n@@ -39,1 +38,0 @@\n-import java.util.Collection;\n@@ -79,0 +77,7 @@\n+\n+\n+    public InstrumentationParams() {\n+        this(false, false, false, false, ABSTRACTMODE.NONE,\n+                new String[0], new String[0], new String[0], new String[0], InstrumentationMode.BLOCK);\n+    }\n+\n@@ -208,6 +213,1 @@\n-        return new InstrumentationPlugin.FilteringPlugin(plugin) {\n-            @Override\n-            protected boolean filter(String cls) {\n-                return isIncluded(cls);\n-            }\n-        };\n+        return new InstrumentationPlugin.FilteringPlugin(plugin, this::isIncluded);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationParams.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.io.Closeable;\n+import java.io.IOException;\n@@ -28,0 +30,8 @@\n+import java.io.UncheckedIOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -30,0 +40,1 @@\n+import java.util.Map;\n@@ -31,2 +42,3 @@\n-import java.util.function.Function;\n-import java.util.function.Supplier;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.jar.JarFile;\n@@ -34,0 +46,1 @@\n+import java.util.zip.ZipEntry;\n@@ -40,1 +53,18 @@\n-    void instrument(Collection<String> classes, Function<String, byte[]> loader, BiConsumer<String, byte[]> saver,\n+    \/**\n+     * An identifier for template artifact.\n+     *\/\n+    String TEMPLATE_ARTIFACT = \"template.xml\";\n+    String CLASS_EXTENTION = \".class\";\n+    String MODULE_INFO_CLASS = \"module-info.class\";\n+\n+    \/**\n+     *\n+     * @param resources A collection of resource paths relative to root of the class hierarchy. '\/' is supposed to be\n+     *                  used as a file separator.\n+     * @param loader\n+     * @param saver\n+     * @param parameters\n+     * @throws Exception\n+     *\/\n+    void instrument(Collection<String> resources, ClassLoader loader,\n+                    BiConsumer<String, byte[]> saver,\n@@ -43,1 +73,13 @@\n-    void complete(Supplier<OutputStream> templateStreamSupplier) throws Exception;\n+    \/**\n+     * Completes the instrumentation proccess and returns a map of instrumentation artifacts.\n+     * @see #TEMPLATE_ARTIFACT\n+     *\n+     * @return the artifact map. The artifacts are identifiable by a string. The artifacts are consumers of\n+     * OutputStream's.\n+     * @throws Exception\n+     *\/\n+    Map<String, Consumer<OutputStream>> complete() throws Exception;\n+\n+    default boolean isClass(String resource) {\n+        return resource.endsWith(CLASS_EXTENTION) && !resource.endsWith(MODULE_INFO_CLASS);\n+    }\n@@ -47,1 +89,7 @@\n-    abstract class FilteringPlugin implements InstrumentationPlugin {\n+    interface ModuleInstrumentationPlugin {\n+        String getModuleName(byte[] moduleInfo);\n+        byte[] addExports(List<String> exports, byte[] moduleInfo, ClassLoader loader);\n+        byte[] clearHashes(byte[] moduleInfo, ClassLoader loader);\n+    }\n+\n+    abstract class ProxyInstrumentationPlugin implements InstrumentationPlugin {\n@@ -50,1 +98,1 @@\n-        public FilteringPlugin(InstrumentationPlugin inner) {\n+        protected ProxyInstrumentationPlugin(InstrumentationPlugin inner) {\n@@ -54,6 +102,2 @@\n-        protected abstract boolean filter(String cls);\n-        @Override\n-        public void instrument(Collection<String> classes, Function<String, byte[]> loader,\n-                               BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n-            inner.instrument(classes.stream().filter(this::filter).collect(Collectors.toList()),\n-                    loader, saver, parameters);\n+        public InstrumentationPlugin getInner() {\n+            return inner;\n@@ -63,2 +107,2 @@\n-        public void complete(Supplier<OutputStream> templateStreamSupplier) throws Exception {\n-            inner.complete(templateStreamSupplier);\n+        public final Map<String, Consumer<OutputStream>> complete() throws Exception {\n+            return inner.complete();\n@@ -68,8 +112,2 @@\n-    interface ModuleImplant {\n-        \/\/TODO qualified exports?\n-        List<String> exports();\n-        Collection<String> classes();\n-        Function<String, byte[]> loader();\n-    }\n-\n-    abstract class ModuleImplantingPlugin implements InstrumentationPlugin {\n+    class FilteringPlugin extends ProxyInstrumentationPlugin {\n+        private final Predicate<String> filter;\n@@ -77,1 +115,4 @@\n-        public static final String MODULE_INFO_CLASS = \"module-info.class\";\n+        public FilteringPlugin(InstrumentationPlugin inner, Predicate<String> filter) {\n+            super(inner);\n+            this.filter = filter;\n+        }\n@@ -79,3 +120,13 @@\n-        public interface ModuleInstrumentationPlugin extends InstrumentationPlugin {\n-            String getModuleName(byte[] moduleInfo);\n-            byte[] addExports(List<String> exports, byte[] moduleInfo);\n+        @Override\n+        public void instrument(Collection<String> resources, ClassLoader loader,\n+                               BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n+            getInner().instrument(resources.stream().filter(filter).collect(Collectors.toList()),\n+                    loader, saver, parameters);\n+            resources.stream().filter(filter.negate()).forEach(c -> {\n+                try {\n+                    saver.accept(c,\n+                            loader.getResourceAsStream(c).readAllBytes());\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            });\n@@ -83,0 +134,7 @@\n+    }\n+\n+    interface Source extends Closeable {\n+        \/\/paths relative to the result root\n+        Collection<String> resources() throws Exception;\n+        ClassLoader loader();\n+    }\n@@ -84,2 +142,2 @@\n-        private final ModuleInstrumentationPlugin inner;\n-        private final Function<String, ModuleImplant> implants;\n+    class ImplantingPlugin extends ProxyInstrumentationPlugin {\n+        private final Source source;\n@@ -87,3 +145,4 @@\n-        public ModuleImplantingPlugin(ModuleInstrumentationPlugin inner, Function<String, ModuleImplant> implants) {\n-            this.inner = inner;\n-            this.implants = implants;\n+        \/\/TODO similar to ModuleImplantingPlugin have different implants for different locations somehow?\n+        public ImplantingPlugin(InstrumentationPlugin inner, Source source) {\n+            super(inner);\n+            this.source = source;\n@@ -93,1 +152,1 @@\n-        public void instrument(Collection<String> classes, Function<String, byte[]> loader,\n+        public void instrument(Collection<String> classes, ClassLoader loader,\n@@ -95,8 +154,14 @@\n-            inner.instrument(classes, loader, saver, parameters);\n-            String moduleName = inner.getModuleName(loader.apply(MODULE_INFO_CLASS));\n-            if(moduleName != null) {\n-                ModuleImplant implant = implants.apply(moduleName);\n-                if(implant != null) {\n-                    saver.accept(MODULE_INFO_CLASS, loader.apply(MODULE_INFO_CLASS));\n-                    for(String c : implant.classes()) saver.accept(c, implant.loader().apply(c));\n-                }\n+            getInner().instrument(classes, loader, saver, parameters);\n+            for(String r : source.resources()) saver.accept(r, source.loader().getResourceAsStream(r).readAllBytes());\n+        }\n+    }\n+\n+    \/\/TODO better be private\n+    class OverridingClassLoader extends URLClassLoader {\n+\n+        private static URL[] toURL(Path root) {\n+            try {\n+                return new URL[] {root.toUri().toURL()};\n+            } catch (MalformedURLException e) {\n+                \/\/should not happen since getting teh URL legally\n+                throw new RuntimeException(e);\n@@ -106,0 +171,11 @@\n+        private final ClassLoader backup;\n+\n+        public OverridingClassLoader(Path root, ClassLoader backup) {\n+            this(toURL(root), backup);\n+        }\n+\n+        public OverridingClassLoader(URL[] urls, ClassLoader backup) {\n+            super(urls);\n+            this.backup = backup;\n+        }\n+\n@@ -107,2 +183,11 @@\n-        public void complete(Supplier<OutputStream> template) throws Exception {\n-            inner.complete(template);\n+        public URL getResource(String name) {\n+            \/\/first try to find local resource, from teh current module\n+            URL resource = findResource(name);\n+            \/\/for module-info it does not make sense to look in other classloaders\n+            if(name.equals(MODULE_INFO_CLASS)) return resource;\n+            \/\/if none, try other modules\n+            if (resource == null) resource = backup.getResource(name);\n+            \/\/that should not happen during normal use\n+            \/\/if happens, refer to super, nothing else we can do\n+            if (resource == null) resource = super.getResource(name);\n+            return resource;\n@@ -112,3 +197,8 @@\n-    class ImplantingPlugin implements InstrumentationPlugin {\n-        private final Collection<String> implant;\n-        private final Function<String, byte[]> implantLoader;\n+    interface Destination extends Closeable {\n+        BiConsumer<String, byte[]> saver();\n+    }\n+\n+    \/**\n+     * A utility class which works with a given plugin in turms of file hierarchies.\n+     *\/\n+    class Instrumentation {\n@@ -117,5 +207,1 @@\n-        \/\/TODO similar to ModuleImplantingPlugin have different implants for different locations somehow?\n-        public ImplantingPlugin(InstrumentationPlugin inner,\n-                                Collection<String> implant, Function<String, byte[]> loader) {\n-            this.implant = implant;\n-            this.implantLoader = loader;\n+        public Instrumentation(InstrumentationPlugin inner) {\n@@ -125,0 +211,35 @@\n+        public void instrument(Source source, Destination destination,\n+                                     InstrumentationParams parameters) throws Exception {\n+            inner.instrument(source.resources(), source.loader(),\n+                    destination.saver(), parameters);\n+        }\n+    }\n+\n+    \/**\n+     * Helps to instrument modules.\n+     * @see #Instrumentation\n+     *\/\n+    class ModuleInstrumentation extends Instrumentation {\n+        private final ModuleInstrumentationPlugin modulePlugin;\n+\n+        public ModuleInstrumentation(InstrumentationPlugin inner, ModuleInstrumentationPlugin modulePlugin) {\n+            super(inner);\n+            this.modulePlugin = modulePlugin;\n+        }\n+\n+        public ModuleInstrumentationPlugin getModulePluign() {\n+            return modulePlugin;\n+        }\n+\n+        \/**\n+         * Take any required action needed to instrument a module. This implementation does not do anything.\n+         * @param moduleInfo\n+         * @param loader\n+         * @param destination\n+         * @throws Exception\n+         * @see ModuleInstrumentationPlugin\n+         *\/\n+        protected void proccessModule(byte[] moduleInfo, ClassLoader loader, BiConsumer<String, byte[]> destination)\n+                throws Exception {\n+        }\n+\n@@ -126,4 +247,16 @@\n-        public void instrument(Collection<String> classes, Function<String, byte[]> loader,\n-                               BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n-            inner.instrument(classes, loader, saver, parameters);\n-            implant.forEach(c -> saver.accept(c, implantLoader.apply(c)));\n+        public void instrument(Source source, Destination destination,\n+                               InstrumentationParams parameters) throws Exception {\n+            super.instrument(source, destination, parameters);\n+            byte[] moduleInfo = source.loader().getResourceAsStream(MODULE_INFO_CLASS).readAllBytes();\n+            proccessModule(moduleInfo, source.loader(), destination.saver());\n+        }\n+    }\n+\n+    class PathSource implements Source, Closeable {\n+\n+        private final ClassLoader loader;\n+        private final Path root;\n+\n+        public PathSource(ClassLoader backup, Path root) {\n+            this.loader = new OverridingClassLoader(root, backup);\n+            this.root = root;\n@@ -133,2 +266,10 @@\n-        public void complete(Supplier<OutputStream> templateStreamSupplier) throws Exception {\n-            inner.complete(templateStreamSupplier);\n+        public Collection<String> resources() throws Exception {\n+            if(Files.isDirectory(root))\n+                return Files.find(root, Integer.MAX_VALUE, (f, a) -> Files.isRegularFile(f))\n+                        .map(r -> root.relativize(r).toString())\n+                        .collect(Collectors.toList());\n+            else\n+                try (JarFile jar = new JarFile(root.toFile())) {\n+                    return jar.stream().filter(f -> !f.isDirectory())\n+                            .map(ZipEntry::getName).collect(Collectors.toList());\n+                }\n@@ -137,2 +278,48 @@\n-        protected InstrumentationPlugin inner() {\n-            return inner;\n+        @Override\n+        public ClassLoader loader() {\n+            return loader;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            if (loader instanceof Closeable) ((Closeable) loader).close();\n+        }\n+\n+        public boolean isModule() throws IOException {\n+            if (Files.isDirectory(root)) {\n+                return Files.exists(root.resolve(MODULE_INFO_CLASS));\n+            } else {\n+                try (JarFile jar = new JarFile(root.toFile())) {\n+                    return jar.stream().map(ZipEntry::getName).anyMatch(MODULE_INFO_CLASS::equals);\n+                }\n+            }\n+        }\n+    }\n+\n+    class PathDestination implements Destination, Closeable {\n+        private final Path root;\n+        private final FileSystem fs;\n+        private final BiConsumer<String, byte[]> saver;\n+\n+        public PathDestination(Path root) throws IOException {\n+            fs = Files.isDirectory(root) ? null : FileSystems.newFileSystem(root, null);\n+            this.root = Files.isDirectory(root) ? root : fs.getPath(\"\/\");\n+            saver = (s, bytes) -> {\n+                try {\n+                    Path f = PathDestination.this.root.resolve(s);\n+                    Files.createDirectories(f.getParent());\n+                    Files.write(f, bytes);\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            if (fs != null) fs.close();\n+        }\n+\n+        @Override\n+        public BiConsumer<String, byte[]> saver() {\n+            return saver;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationPlugin.java","additions":245,"deletions":58,"binary":false,"changes":303,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationOptions;\n@@ -32,1 +31,4 @@\n-import com.sun.tdk.jcov.runtime.FileSaver;\n+import org.objectweb.asm.ClassReader;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.ModuleVisitor;\n@@ -34,0 +36,1 @@\n+import java.io.FileNotFoundException;\n@@ -37,1 +40,1 @@\n-import java.util.ArrayList;\n+import java.net.URL;\n@@ -40,0 +43,2 @@\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -41,2 +46,1 @@\n-import java.util.function.Function;\n-import java.util.function.Supplier;\n+import java.util.function.Consumer;\n@@ -48,1 +52,2 @@\n-public class ASMInstrumentationPlugin implements InstrumentationPlugin {\n+public class ASMInstrumentationPlugin implements InstrumentationPlugin,\n+        InstrumentationPlugin.ModuleInstrumentationPlugin {\n@@ -51,2 +56,1 @@\n-    \/\/TODO prehaps support qualified exports\n-    private List<String> exports = new ArrayList<>();\n+\/\/    private String moduleName;\n@@ -55,2 +59,2 @@\n-    public void instrument(Collection<String> classes, Function<String, byte[]> loader,\n-                           BiConsumer<String, byte[]> saver, InstrumentationParams parameters) {\n+    public void instrument(Collection<String> resources, ClassLoader loader,\n+                           BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws IOException {\n@@ -60,0 +64,2 @@\n+        URL miURL = loader.getResource(MODULE_INFO_CLASS);\n+        String moduleName = (miURL == null) ? null : getModuleName(miURL.openStream().readAllBytes());\n@@ -61,8 +67,20 @@\n-        classes.forEach(cls -> {\n-            try {\n-                \/\/TODO nulls\n-                byte[] instrumented = morph.morph(loader.apply(cls), null, null);\n-                \/\/TODO shoul never be null\n-                if(instrumented != null) saver.accept(cls, instrumented);\n-            } catch (IOException e) {\n-                \/\/todo should this even be thrown?\n+        morph.setCurrentModuleName(moduleName);\n+        for(String r : resources) {\n+            byte[] content = loader.getResourceAsStream(r).readAllBytes();\n+            if(isClass(r)) {\n+                byte[] instrumented = morph.morph(content, loader, null);\n+                \/\/TODO should never be null\n+                if(instrumented != null) saver.accept(r, instrumented);\n+            } else saver.accept(r, content);\n+        }\n+\/\/        moduleName = null;\n+    }\n+\n+    @Override\n+    public Map<String, Consumer<OutputStream>> complete() {\n+        return Map.of(TEMPLATE_ARTIFACT, out -> {\n+            try (XmlContext ctx = new XmlContext(out, data.getParams())) {\n+                \/\/TODO\n+                \/\/ctx.setSkipNotCoveredClasses(agentdata);\n+                data.xmlGen(ctx);\n+            } catch (FileNotFoundException e) {\n@@ -75,6 +93,12 @@\n-    public void complete(Supplier<OutputStream> templateStreamSupplier) throws IOException {\n-        try (XmlContext ctx = new XmlContext(templateStreamSupplier.get(), data.getParams())) {\n-            \/\/TODO\n-            \/\/ctx.setSkipNotCoveredClasses(agentdata);\n-            data.xmlGen(ctx);\n-        }\n+    public String getModuleName(byte[] moduleInfo) {\n+        AtomicReference<String> moduleName = new AtomicReference<>(null);\n+        ClassReader cr = new ClassReader(moduleInfo);\n+        ClassWriter cw = new OverriddenClassWriter(cr, ClassWriter.COMPUTE_FRAMES, getClass().getClassLoader());\n+        cr.accept( new ClassVisitor(ASMUtils.ASM_API_VERSION, cw) {\n+            @Override\n+            public ModuleVisitor visitModule(String name, int access, String version) {\n+                moduleName.set(name);\n+                return null;\n+            }\n+        }, 0);\n+        return moduleName.get();\n@@ -82,0 +106,20 @@\n+\n+    @Override\n+    public byte[] addExports(List<String> exports, byte[] moduleInfo, ClassLoader loader) {\n+        return ClassMorph.addExports(moduleInfo, exports, loader);\n+    }\n+\n+    @Override\n+    public byte[] clearHashes(byte[] moduleInfo, ClassLoader loader) {\n+        return ClassMorph.clearHashes(moduleInfo, loader);\n+    }\n+\n+\/\/    @Override\n+\/\/    public void instrumentModuleInfo(ClassLoader loader, BiConsumer<String, byte[]> saver, List<String> expports,\n+\/\/                                     boolean clearHashes, InstrumentationParams parameters) throws IOException {\n+\/\/        byte[] mi = loader.getResourceAsStream(MODULE_INFO_CLASS).readAllBytes();\n+\/\/        moduleName = getModuleName(mi);\n+\/\/        if(expports != null && !expports.isEmpty()) mi = addExports(expports, mi, loader);\n+\/\/        if(clearHashes) mi = clearHashes(mi, loader);\n+\/\/        saver.accept(MODULE_INFO_CLASS, mi);\n+\/\/    }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMInstrumentationPlugin.java","additions":68,"deletions":24,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -300,1 +301,1 @@\n-    public byte[] clearHashes(byte[] moduleInfo, ClassLoader loader) {\n+    public static byte[] clearHashes(byte[] moduleInfo, ClassLoader loader) {\n@@ -314,1 +315,15 @@\n-    public byte[] addExports(byte[] moduleInfo, List<String> exports, ClassLoader loader) {\n+    public static String getModuleName(byte[] moduleInfo) {\n+        AtomicReference<String> moduleName = new AtomicReference<>(null);\n+        ClassReader cr = new ClassReader(moduleInfo);\n+        ClassWriter cw = new OverriddenClassWriter(cr, ClassWriter.COMPUTE_FRAMES, ClassMorph.class.getClassLoader());\n+        cr.accept( new ClassVisitor(ASMUtils.ASM_API_VERSION, cw) {\n+            @Override\n+            public ModuleVisitor visitModule(String name, int access, String version) {\n+                moduleName.set(name);\n+                return null;\n+            }\n+        }, 0);\n+        return moduleName.get();\n+    }\n+\n+    public static byte[] addExports(byte[] moduleInfo, List<String> exports, ClassLoader loader) {\n@@ -711,5 +726,0 @@\n-    public final static OptionDescr DSC_FLUSH_CLASSES =\n-            new OptionDescr(\"flush\", null, \"flush instrumented classes\",\n-                    OptionDescr.VAL_SINGLE, null, \"Specify path to directory, where to store instrumented classes.\\n\"\n-                    + \"Directory should exist. Classes will be saved in respect to their package hierarchy.\\n\"\n-                    + \"Default value is \\\"none\\\". Pushing it means you don't want to flush classes.\", \"none\");\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -230,28 +230,0 @@\n-        if (loader instanceof JREInstr.StaticJREInstrClassLoader) {\n-            InputStream in = getInputStreamForName(clName, loader, false, \".class\");\n-\n-            if (in == null) {\n-                in = getInputStreamForName(clName, ClassLoader.getSystemClassLoader(), false, \".class\");\n-\n-                if (in == null) {\n-                    throw new IOException(\"Can't read class \" + clName + \" from classloader \" + loader);\n-                }\n-\n-                ClassReader cr = new OffsetLabelingClassReader(in);\n-                classInfo = new ClassInfo(cr.getSuperName(), cr.getInterfaces());\n-                try{\n-                    in.close();\n-                }\n-                catch (Throwable ignore){}\n-                return classInfo;\n-            }\n-\n-            ClassReader cr = new OffsetLabelingClassReader(in);\n-            classInfo = new ClassInfo(cr.getSuperName(), cr.getInterfaces());\n-            try{\n-                in.close();\n-            }\n-            catch (Throwable ignore){}\n-            return classInfo;\n-        }\n-\n@@ -333,0 +305,1 @@\n+            ignore.printStackTrace();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OverriddenClassWriter.java","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -27,0 +27,5 @@\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+import java.io.BufferedWriter;\n@@ -42,0 +47,1 @@\n+import java.util.Arrays;\n@@ -43,0 +49,1 @@\n+import java.util.function.Predicate;\n@@ -45,0 +52,4 @@\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n@@ -169,0 +180,57 @@\n+    public static void jar(Path dir, Path dest, Predicate<Path> filter) throws IOException {\n+        try(ZipOutputStream out = new ZipOutputStream(Files.newOutputStream(dest))) {\n+            Files.find(dir, Integer.MAX_VALUE, (p, a) -> true).forEach(p -> {\n+                try {\n+                    if(Files.isRegularFile(p) && filter.test(p)) {\n+                        out.putNextEntry(new ZipEntry(dir.relativize(p).toString()));\n+                        out.write(Files.readAllBytes(p));\n+                        out.closeEntry();\n+                    }\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            });\n+\/\/            out.putNextEntry(new ZipEntry(\"META-INF\/MANIFEST.MF\"));\n+            out.closeEntry();\n+        }\n+    }\n+    public static void unjar(Path src, Path dest) throws IOException {\n+        ZipFile zip = new ZipFile(src.toFile());\n+        zip.stream().forEach(e -> {\n+            try {\n+                Path p = dest.resolve(e.getName());\n+                Files.createDirectories(p.getParent());\n+                try(OutputStream out = Files.newOutputStream(p)) {\n+                    out.write(zip.getInputStream(e).readAllBytes());\n+                }\n+            } catch (IOException exception) {\n+                throw new UncheckedIOException(exception);\n+            }\n+        });\n+    }\n+    public static void javac(List<Path> classes) {\n+        JavaCompiler jc = ToolProvider.getSystemJavaCompiler();\n+        StandardJavaFileManager fm = jc.getStandardFileManager(null, null, null);\n+        Iterable<? extends JavaFileObject> cu =\n+                fm.getJavaFileObjectsFromFiles(classes.stream().map(Path::toFile).collect(Collectors.toList()));\n+        jc.getTask(null, fm, null, null, null, cu).call();\n+\/\/        List<String> command = new ArrayList<>();\n+\/\/        command.add(System.getProperty(\"java.home\") + File.separator + \"bin\" + File.separator + )\n+    }\n+    public static void genModuleInfo(Path toDir, String name,\n+                                  List<String> requires,\n+                                  List<String> exports) throws IOException {\n+        Path mi = toDir.resolve(\"module-info.java\");\n+        try(BufferedWriter out = Files.newBufferedWriter(mi)) {\n+            out.write(\"module \" + name + \" {\");out.newLine();\n+            for(String r : requires) {\n+                out.write(\"requires \" + r + \";\"); out.newLine();\n+            }\n+            for(String e: exports) {\n+                out.write(\"exports \" + e + \";\"); out.newLine();\n+            }\n+            out.write(\"}\"); out.newLine();\n+        }\n+        javac(List.of(mi));\n+        Files.delete(mi);\n+    }\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/Util.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import org.testng.annotations.BeforeMethod;\n@@ -38,0 +39,1 @@\n+import java.io.File;\n@@ -40,0 +42,1 @@\n+import java.nio.file.Files;\n@@ -41,1 +44,0 @@\n-import java.nio.file.Paths;\n@@ -45,0 +47,1 @@\n+import static org.testng.Assert.assertFalse;\n@@ -48,0 +51,2 @@\n+    Path implant_dir;\n+    Path implant_jar;\n@@ -49,0 +54,1 @@\n+    Path test_zip;\n@@ -54,1 +60,3 @@\n-        Path data_dir = Paths.get(System.getProperty(\"user.dir\"));\n+        Path data_dir = Files.createTempDirectory(\"instr_test\");\n+        implant_dir = data_dir.resolve(\"instr_implant\");\n+        implant_jar = data_dir.resolve(\"instr_implant.jar\");\n@@ -56,0 +64,1 @@\n+        test_zip = data_dir.resolve(\"instr_test.jar\");\n@@ -57,0 +66,4 @@\n+        template = test_dir.resolve(\"template.xml\");\n+    }\n+    @BeforeMethod\n+    public void rm() throws IOException {\n@@ -58,1 +71,0 @@\n-        template = test_dir.resolve(\"template.lst\");\n@@ -60,1 +72,1 @@\n-    \/\/@Test\n+\/\/    @Test\n@@ -70,1 +82,1 @@\n-        run();\n+        run(test_dir);\n@@ -85,1 +97,63 @@\n-        run();\n+        run(test_dir);\n+    }\n+    @Test\n+    public void instrumentJar() throws IOException, InterruptedException, FileFormatException,\n+            ClassNotFoundException, InvocationTargetException, NoSuchMethodException,\n+            IllegalAccessException, InstantiationException {\n+        Path classes = test_dir.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        new Util(classes).copyBytecode(UserCode.class.getName(), InstrTest.class.getName());\n+        Util.jar(classes, test_zip, p -> true);\n+        Util.rmRF(classes);\n+        List<String> params = new ArrayList<>();\n+        params.add(\"-t\");\n+        params.add(template.toString());\n+        params.add(\"-i\");\n+        params.add(\"UserCode\");\n+        params.add(test_zip.toString());\n+        new Instr().run(params.toArray(new String[0]));\n+        Util.unjar(test_zip, classes);\n+        testInstrumentation();\n+        run(classes);\n+    }\n+    @Test\n+    public void implantTest() throws IOException, FileFormatException, ClassNotFoundException,\n+            InvocationTargetException, NoSuchMethodException, IllegalAccessException, InstantiationException {\n+        new Util(test_dir).copyBytecode(UserCode.class.getName());\n+        new Util(implant_dir).copyBytecode(InstrTest.class.getName());\n+        Files.write(implant_dir.resolve(\"some.properties\"), \"some.property=value\\n\".getBytes());\n+        Util.jar(implant_dir, implant_jar, p -> true);\n+        List<String> params = new ArrayList<>();\n+        params.add(\"-t\");\n+        params.add(template.toString());\n+        params.add(\"-implantrt\");\n+        params.add(implant_jar.toString());\n+        params.add(\"-i\");\n+        params.add(\"UserCode\");\n+        params.add(test_dir.toString());\n+        new Instr().run(params.toArray(new String[0]));\n+        testInstrumentation();\n+        assertTrue(Files.exists(test_dir.\n+                resolve(InstrTest.class.getName().replace('.', File.separatorChar) + \".class\")));\n+        assertTrue(Files.exists(test_dir.resolve(\"some.properties\")));\n+        assertFalse(Files.exists(test_dir.resolve(\"META-INF\").resolve(\"MANIFEST.MF\")));\n+        run(test_dir);\n+    }\n+    @Test\n+    public void moduleTest() throws Exception {\n+        new Util(test_dir).copyBytecode(UserCode.class.getName());\n+        Util.genModuleInfo(test_dir, \"test\", List.of(), List.of());\n+        new Util(implant_dir).copyBytecode(InstrTest.class.getName());\n+        Files.write(implant_dir.resolve(\"some.properties\"), \"some.property=value\\n\".getBytes());\n+        Util.jar(implant_dir, implant_jar, p -> true);\n+        Instr instr = new Instr();\n+        instr.instrumentFiles(new String[] {test_dir.toString()}, null, implant_jar.toString());\n+        instr.setTemplate(template.toString());\n+        instr.finishWork(template.toString());\n+        testInstrumentation();\n+        assertTrue(Files.exists(test_dir.\n+                resolve(InstrTest.class.getName().replace('.', File.separatorChar) + \".class\")));\n+        assertTrue(Files.exists(test_dir.resolve(\"some.properties\")));\n+        assertTrue(Files.exists(test_dir.resolve(\"module-info.class\")));\n+        assertFalse(Files.exists(test_dir.resolve(\"META-INF\").resolve(\"MANIFEST.MF\")));\n+        run(test_dir);\n@@ -97,2 +171,1 @@\n-\/\/    @Test(dependsOnMethods = \"instrumentDir\")\n-    public void run() throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException,\n+    public void run(Path test_dir) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException,\n@@ -107,0 +180,3 @@\n+        Util.rmRF(test_zip);\n+        Util.rmRF(implant_dir);\n+        Util.rmRF(implant_jar);\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/instr\/InstrTest.java","additions":84,"deletions":8,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+    Path template;\n+    Path result;\n@@ -81,0 +83,6 @@\n+        System.out.println(\"JRE: \" + testJRE);\n+        template = Path.of(System.getProperty(\"user.dir\")).resolve(\"template.xml\");\n+        result = Path.of(System.getProperty(\"user.dir\")).resolve(\"result.xml\");\n+        Files.deleteIfExists(template);\n+        Files.deleteIfExists(result);\n+        System.out.println(\"Template: \" + template);\n@@ -91,0 +99,1 @@\n+                \"-im\", \"java.desktop\",\n@@ -95,0 +104,6 @@\n+        assertEquals(Files.readAllLines(template)\n+                .stream()\n+                .filter(s -> s.trim().startsWith(\"<package\"))\n+                .filter(s -> !s.contains(\"moduleName=\\\"java.base\\\"\"))\n+                .filter(s -> !s.contains(\"moduleName=\\\"java.desktop\\\"\"))\n+                .count(), 0);\n@@ -127,1 +142,2 @@\n-        Files.deleteIfExists(Paths.get(\"result.xml\"));\n+        Files.deleteIfExists(template);\n+        Files.deleteIfExists(result);\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/jreinstr\/JREInstrTest.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}