{"files":[{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Instrumentation.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,33 +0,0 @@\n-package com.sun.tdk.jcov;\n-\n-import java.io.IOException;\n-import java.net.URI;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Map;\n-import java.util.jar.JarFile;\n-import java.util.jar.JarOutputStream;\n-\n-public class ZipTest {\n-    public static void main(String[] args) throws IOException {\n-        Path zip = Paths.get(\"\/tmp\/aaa.jar\");\n-        if(Files.exists(zip)) Files.delete(zip);\n-        try(var out = new JarOutputStream(Files.newOutputStream(zip))) {}\n-        var fs = FileSystems.newFileSystem(zip, null);\n-        var root = fs.getRootDirectories().iterator().next();\n-        Path text_file = root.resolve(\"text.txt\");\n-        try(var out = Files.newBufferedWriter(text_file)) {\n-            out.write(\"test\\n\");\n-        }\n-        fs.close();\n-\n-        var fsin = FileSystems.newFileSystem(zip, null);\n-        var fsout = FileSystems.newFileSystem(zip, null);\n-        System.out.write(Files.readAllBytes(fsin.getPath(\"text.txt\")));\n-        Files.write(fsout.getPath(\"text.txt\"), \"new test\".getBytes());\n-        fsout.close();\n-        fsin.close();\n-    }\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/ZipTest.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"}]}