{"files":[{"patch":"@@ -89,2 +89,0 @@\n-\/\/    private AbstractUniversalInstrumenter instrumenter;\n-\/\/    private ClassMorph morph;\n@@ -207,1 +205,1 @@\n-        InstrumentationPlugin aPLugin = plugin;\n+        InstrumentationPlugin aPlugin = plugin;\n@@ -211,1 +209,1 @@\n-            aPLugin = new InstrumentationPlugin.ImplantingPlugin(plugin, source);\n+            aPlugin = new InstrumentationPlugin.ImplantingPlugin(plugin, source);\n@@ -213,0 +211,1 @@\n+        aPlugin = new InstrumentationPlugin.FilteringPlugin(aPlugin, InstrumentationPlugin.classNameFilter(params));\n@@ -215,1 +214,1 @@\n-                new InstrumentationPlugin.Instrumentation(aPLugin);\n+                new InstrumentationPlugin.Instrumentation(aPlugin);\n@@ -247,13 +246,12 @@\n-    public void instrumentTests(String[] files, File outDir, String implantRT) throws IOException {\n-\n-        if (gennative || genAbstract) {\n-            \/\/TODO\n-            \/\/morph.fillIntrMethodsIDs(morph.getRoot());\n-        }\n-\n-        setup();\n-        for (String file : files) {\n-            \/\/TODO\n-            \/\/instrumenter.instrument(new File(file), outDir, implantRT, recurse);\n-        }\n-    }\n+\/\/    See comments in JREInstr.handleEnv(EventHandler)\n+\/\/    public void instrumentTests(String[] files, File outDir, String implantRT) throws IOException {\n+\/\/\n+\/\/        if (gennative || genAbstract) {\n+\/\/            morph.fillIntrMethodsIDs(morph.getRoot());\n+\/\/        }\n+\/\/\n+\/\/        setup();\n+\/\/        for (String file : files) {\n+\/\/            instrumenter.instrument(new File(file), outDir, implantRT, recurse);\n+\/\/        }\n+\/\/    }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n@@ -29,0 +30,1 @@\n+import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n@@ -43,1 +45,0 @@\n-import java.net.URLClassLoader;\n@@ -45,0 +46,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -54,0 +57,3 @@\n+import static com.sun.tdk.jcov.Instr.DSC_INCLUDE_RT;\n+import static com.sun.tdk.jcov.Instr.DSC_VERBOSE;\n+import static com.sun.tdk.jcov.instrument.InstrumentationOptions.*;\n@@ -55,0 +61,1 @@\n+import static com.sun.tdk.jcov.instrument.InstrumentationPlugin.TEMPLATE_ARTIFACT;\n@@ -71,1 +78,1 @@\n-    private Instr instr;\n+\/\/    private Instr instr;\n@@ -80,0 +87,6 @@\n+    private InstrumentationPlugin plugin = new ASMInstrumentationPlugin();\n+    private InstrumentationParams params;\n+    private String template = \"template.xml\";\n+    private String[] m_excludes;\n+    private String[] m_includes;\n+    private String include_rt;\n@@ -86,0 +99,2 @@\n+\n+\n@@ -90,1 +105,0 @@\n-        instr.startWorking();\n@@ -109,1 +123,0 @@\n-            instr.setClassLoader(cl);\n@@ -111,1 +124,0 @@\n-            \/\/TODO filtering\n@@ -113,1 +125,2 @@\n-                    instr.getPlugin(), (InstrumentationPlugin.ModuleInstrumentationPlugin) instr.getPlugin()) {\n+                    new InstrumentationPlugin.FilteringPlugin(plugin, InstrumentationPlugin.classNameFilter(params)),\n+                    (InstrumentationPlugin.ModuleInstrumentationPlugin) plugin) {\n@@ -138,1 +151,1 @@\n-                                    new InstrumentationPlugin.PathDestination(modClasses.toPath()), instr.getParams());\n+                                    new InstrumentationPlugin.PathDestination(modClasses.toPath()), params);\n@@ -182,22 +195,22 @@\n-        ArrayList<String> srcs = null;\n-        if (addJars != null) {\n-            srcs = new ArrayList<>();\n-            for (File addJar : addJars) {\n-                srcs.add(addJar.getAbsolutePath());\n-            }\n-        }\n-\n-        if (srcs != null) {\n-            Utils.addToClasspath(srcs.toArray(new String[0]));\n-            instr.instrumentFiles(srcs.toArray(new String[0]), null, null);\n-        }\n-\n-        if (addTests != null) {\n-            ArrayList<String> tests = new ArrayList<>();\n-            for (File addTest : addTests) {\n-                tests.add(addTest.getAbsolutePath());\n-            }\n-            instr.instrumentTests(tests.toArray(new String[0]), null, null);\n-        }\n-\n-        instr.finishWork();\n+        \/\/see a comment in handleEnv(EnvHandler)\n+\/\/        ArrayList<String> srcs = null;\n+\/\/        if (addJars != null) {\n+\/\/            srcs = new ArrayList<>();\n+\/\/            for (File addJar : addJars) {\n+\/\/                srcs.add(addJar.getAbsolutePath());\n+\/\/            }\n+\/\/        }\n+\/\/\n+\/\/        if (srcs != null) {\n+\/\/            Utils.addToClasspath(srcs.toArray(new String[0]));\n+\/\/            instr.instrumentFiles(srcs.toArray(new String[0]), null, null);\n+\/\/        }\n+\/\/        if (addTests != null) {\n+\/\/            ArrayList<String> tests = new ArrayList<>();\n+\/\/            for (File addTest : addTests) {\n+\/\/                tests.add(addTest.getAbsolutePath());\n+\/\/            }\n+\/\/            instr.instrumentTests(tests.toArray(new String[0]), null, null);\n+\/\/        }\n+\n+        plugin.complete().get(TEMPLATE_ARTIFACT).accept(Files.newOutputStream(Path.of(template)));\n@@ -283,2 +296,2 @@\n-        return Arrays.stream(instr.getMInclude()).anyMatch(i -> moduleName.matches(i)) &&\n-               Arrays.stream(instr.getMExclude()).noneMatch(i -> moduleName.matches(i));\n+        return (m_includes.length == 0 || Arrays.stream(m_includes).anyMatch(i -> moduleName.matches(i))) &&\n+               Arrays.stream(m_excludes).noneMatch(i -> moduleName.matches(i));\n@@ -357,1 +370,1 @@\n-        Instr.DSC_INCLUDE_RT.usage = \"To run instrumented JRE you should implant JCov runtime library both into rt.jar \" +\n+        DSC_INCLUDE_RT.usage = \"To run instrumented JRE you should implant JCov runtime library both into rt.jar \" +\n@@ -362,2 +375,2 @@\n-                Instr.DSC_INCLUDE_RT,\n-                Instr.DSC_VERBOSE,\n+                DSC_INCLUDE_RT,\n+                DSC_VERBOSE,\n@@ -387,3 +400,4 @@\n-                DCS_ADD_JAR,\n-                DCS_ADD_JIMAGE,\n-                DCS_ADD_TESTS,\n+                \/\/See comment in handleEnv(EnvHandler)\n+\/\/                DCS_ADD_JAR,\n+\/\/                DCS_ADD_JIMAGE,\n+\/\/                DCS_ADD_TESTS,\n@@ -397,1 +411,2 @@\n-        instr = new Instr();\n+\n+        params = new InstrumentationParams();\n@@ -407,1 +422,1 @@\n-        if (!envHandler.isSet(Instr.DSC_INCLUDE_RT)) {\n+        if (!envHandler.isSet(DSC_INCLUDE_RT)) {\n@@ -411,1 +426,1 @@\n-        implant = new File(envHandler.getValue(Instr.DSC_INCLUDE_RT));\n+        implant = new File(envHandler.getValue(DSC_INCLUDE_RT));\n@@ -414,0 +429,3 @@\n+        \/\/It is currently unclear if there are solid usecases for instrumenting any additional bytecode together\n+        \/\/with the JDK. That applies to additional jars, sources and also test. If anything else need to be\n+        \/\/instrumented, a separate instrumentation call could be used.\n@@ -415,11 +433,12 @@\n-            String[] jars = envHandler.getValues(DCS_ADD_JAR);\n-            addJars = new File[jars.length];\n-            for (int i = 0; i < addJars.length; ++i) {\n-                addJars[i] = new File(jars[i]);\n-                if (!addJars[i].exists()) {\n-                    throw new EnvHandlingException(\"Additional jar \" + jars[i] + \" doesn't exist\");\n-                }\n-                if (!addJars[i].canRead()) {\n-                    throw new EnvHandlingException(\"Can't read additional jar \" + jars[i]);\n-                }\n-            }\n+            throw new UnsupportedOperationException(\"Instrumenting additional code together with JDK is not supported.\");\n+\/\/            String[] jars = envHandler.getValues(DCS_ADD_JAR);\n+\/\/            addJars = new File[jars.length];\n+\/\/            for (int i = 0; i < addJars.length; ++i) {\n+\/\/                addJars[i] = new File(jars[i]);\n+\/\/                if (!addJars[i].exists()) {\n+\/\/                    throw new EnvHandlingException(\"Additional jar \" + jars[i] + \" doesn't exist\");\n+\/\/                }\n+\/\/                if (!addJars[i].canRead()) {\n+\/\/                    throw new EnvHandlingException(\"Can't read additional jar \" + jars[i]);\n+\/\/                }\n+\/\/            }\n@@ -428,11 +447,12 @@\n-            String[] images = envHandler.getValues(DCS_ADD_JIMAGE);\n-            addJimages = new File[images.length];\n-            for (int i = 0; i < addJimages.length; ++i) {\n-                addJimages[i] = new File(images[i]);\n-                if (!addJimages[i].exists()) {\n-                    throw new EnvHandlingException(\"Additional jimage \" + images[i] + \" doesn't exist\");\n-                }\n-                if (!addJimages[i].canRead()) {\n-                    throw new EnvHandlingException(\"Can't read additional jimage \" + images[i]);\n-                }\n-            }\n+            throw new UnsupportedOperationException(\"Instrumenting additional code together with JDK is not supported.\");\n+\/\/            String[] images = envHandler.getValues(DCS_ADD_JIMAGE);\n+\/\/            addJimages = new File[images.length];\n+\/\/            for (int i = 0; i < addJimages.length; ++i) {\n+\/\/                addJimages[i] = new File(images[i]);\n+\/\/                if (!addJimages[i].exists()) {\n+\/\/                    throw new EnvHandlingException(\"Additional jimage \" + images[i] + \" doesn't exist\");\n+\/\/                }\n+\/\/                if (!addJimages[i].canRead()) {\n+\/\/                    throw new EnvHandlingException(\"Can't read additional jimage \" + images[i]);\n+\/\/                }\n+\/\/            }\n@@ -442,11 +462,12 @@\n-            String[] files = envHandler.getValues(DCS_ADD_TESTS);\n-            addTests = new File[files.length];\n-            for (int i = 0; i < addTests.length; ++i) {\n-                addTests[i] = new File(files[i]);\n-                if (!addTests[i].exists()) {\n-                    throw new EnvHandlingException(\"Test file \" + files[i] + \" doesn't exist\");\n-                }\n-                if (!addTests[i].canRead()) {\n-                    throw new EnvHandlingException(\"Can't read test file \" + files[i]);\n-                }\n-            }\n+            throw new UnsupportedOperationException(\"Instrumenting additional code together with JDK is not supported.\");\n+\/\/            String[] files = envHandler.getValues(DCS_ADD_TESTS);\n+\/\/            addTests = new File[files.length];\n+\/\/            for (int i = 0; i < addTests.length; ++i) {\n+\/\/                addTests[i] = new File(files[i]);\n+\/\/                if (!addTests[i].exists()) {\n+\/\/                    throw new EnvHandlingException(\"Test file \" + files[i] + \" doesn't exist\");\n+\/\/                }\n+\/\/                if (!addTests[i].canRead()) {\n+\/\/                    throw new EnvHandlingException(\"Can't read test file \" + files[i]);\n+\/\/                }\n+\/\/            }\n@@ -565,1 +586,1 @@\n-                instr.setTemplate(template);\n+                setTemplate(template);\n@@ -657,2 +678,2 @@\n-        String[] m_excludes = com.sun.tdk.jcov.instrument.InstrumentationOptions.handleMExclude(envHandler);\n-        String[] m_includes = com.sun.tdk.jcov.instrument.InstrumentationOptions.handleMInclude(envHandler);\n+        m_excludes = com.sun.tdk.jcov.instrument.InstrumentationOptions.handleMExclude(envHandler);\n+        m_includes = com.sun.tdk.jcov.instrument.InstrumentationOptions.handleMInclude(envHandler);\n@@ -686,4 +707,3 @@\n-        int ret = instr.handleEnv(envHandler);\n-        instr.setSave_end(new String[]{\"java\/lang\/Shutdown.runHooks\"});\n-        instr.setInclude(includes);\n-        instr.setExclude(excludes);\n+        if (envHandler.isSet(DSC_VERBOSE)) {\n+            logger.setLevel(Level.INFO);\n+        }\n@@ -691,2 +711,2 @@\n-        instr.setMInclude(m_includes);\n-        instr.setMExclude(m_excludes);\n+        params.setSavesBegin(envHandler.getValues(DSC_SAVE_BEGIN));\n+        params.setSavesEnd(envHandler.getValues(DSC_SAVE_AT_END));\n@@ -694,2 +714,34 @@\n-        instr.setCallerInclude(callerInclude);\n-        instr.setCallerExclude(callerExclude);\n+        String abstractValue = envHandler.getValue(DSC_ABSTRACT);\n+        if (abstractValue.equals(\"off\")) {\n+            params.setInstrumentAbstract(ABSTRACTMODE.NONE);\n+        } else if (abstractValue.equals(\"on\")) {\n+            params.setInstrumentAbstract(ABSTRACTMODE.DIRECT);\n+        } else {\n+            throw new EnvHandlingException(\"'\" + DSC_ABSTRACT.name +\n+                    \"' parameter value error: expected 'on' or 'off'; found: '\" + abstractValue + \"'\");\n+        }\n+\n+        String nativeValue = envHandler.getValue(DSC_NATIVE);\n+        if (nativeValue.equals(\"on\")) {\n+            params.setInstrumentNative(true);\n+        } else if (nativeValue.equals(\"off\")) {\n+            params.setInstrumentNative(false);\n+        } else {\n+            throw new EnvHandlingException(\"'\" + DSC_NATIVE.name +\n+                    \"' parameter value error: expected 'on' or 'off'; found: '\" + nativeValue + \"'\");\n+        }\n+\n+        String fieldValue = envHandler.getValue(DSC_FIELD);\n+        if (fieldValue.equals(\"on\")) {\n+            params.setInstrumentFields(true);\n+        } else if (fieldValue.equals(\"off\")) {\n+            params.setInstrumentFields(false);\n+        } else {\n+            \/\/ can't happen - check is in EnvHandler\n+            throw new EnvHandlingException(\"'\" + DSC_FIELD.name +\n+                    \"' parameter value error: expected 'on' or 'off'; found: '\" + fieldValue + \"'\");\n+        }\n+\n+        params.setInstrumentAnonymous(envHandler.getValue(DSC_ANONYM).equals(\"on\"));\n+\n+        params.setInstrumentSynthetic(envHandler.getValue(DSC_SYNTHETIC).equals(\"on\"));\n@@ -697,2 +749,23 @@\n-        instr.setInnerInclude(innerInclude);\n-        instr.setInnerExclude(innerExclude);\n+        params.setInnerInvocations(envHandler.getValue(DSC_INNERINVOCATION).equals(\"off\"));\n+\n+        params.setCallerIncludes(callerInclude);\n+        params.setCallerExcludes(callerExclude);\n+\n+        params.setMode(InstrumentationMode.fromString(envHandler.getValue(DSC_TYPE)));\n+\n+        template = envHandler.getValue(DSC_TEMPLATE);\n+        Utils.checkFileNotNull(template, \"template filename\", FILE_NOTISDIR, FILE_PARENTEXISTS);\n+\n+        include_rt = envHandler.getValue(DSC_INCLUDE_RT);\n+        Utils.checkFileCanBeNull(include_rt, \"JCovRT library jarfile\", FILE_EXISTS, FILE_ISFILE, FILE_CANREAD);\n+\n+        params.setSavesEnd(new String[]{\"java\/lang\/Shutdown.runHooks\"});\n+\n+        params.setIncludes(includes);\n+        params.setExcludes(excludes);\n+\n+        params.setInnerIncludes(innerInclude);\n+        params.setInnerExcludes(innerExclude);\n+\n+        return SUCCESS_EXIT_CODE;\n+    }\n@@ -700,1 +773,2 @@\n-        return ret;\n+    private void setTemplate(String template) {\n+        this.template = template;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/JREInstr.java","additions":161,"deletions":87,"binary":false,"changes":248,"status":"modified"},{"patch":"@@ -361,0 +361,62 @@\n+    public ABSTRACTMODE getInstrumentAbstract() {\n+        return instrumentAbstract;\n+    }\n+\n+    public String[] getSavesBegin() {\n+        return savesBegin;\n+    }\n+\n+    public String[] getSavesEnd() {\n+        return savesEnd;\n+    }\n+\n+    public InstrumentationParams setSavesBegin(String[] savesBegin) {\n+        this.savesBegin = savesBegin;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setSavesEnd(String[] savesEnd) {\n+        this.savesEnd = savesEnd;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setMode(InstrumentationMode mode) {\n+        this.mode = mode;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setCallerInclude(String callerInclude) {\n+        this.callerInclude = callerInclude;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setCallerExclude(String callerExclude) {\n+        this.callerExclude = callerExclude;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setCallerIncludes(String[] callerIncludes) {\n+        this.callerIncludes = callerIncludes;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setCallerExcludes(String[] callerExcludes) {\n+        this.callerExcludes = callerExcludes;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setInstrumentFields(boolean instrumentFields) {\n+        this.instrumentFields = instrumentFields;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setInstrumentNative(boolean instrumentNative) {\n+        this.instrumentNative = instrumentNative;\n+        return this;\n+    }\n+\n+    public InstrumentationParams setInstrumentAbstract(ABSTRACTMODE instrumentAbstract) {\n+        this.instrumentAbstract = instrumentAbstract;\n+        return this;\n+    }\n+\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationParams.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import com.sun.tdk.jcov.util.Utils;\n+\n@@ -38,0 +40,1 @@\n+import java.util.ArrayList;\n@@ -48,0 +51,2 @@\n+import static com.sun.tdk.jcov.util.Utils.isClassFile;\n+\n@@ -123,3 +128,8 @@\n-            getInner().instrument(resources.stream().filter(filter).collect(Collectors.toList()),\n-                    loader, saver, parameters);\n-            resources.stream().filter(filter.negate()).forEach(c -> {\n+            List<String> accepted = new ArrayList<>();\n+            List<String> rejected = new ArrayList<>();\n+            resources.forEach(r -> {\n+                if (filter.test(r)) accepted.add(r);\n+                else rejected.add(r);\n+            });\n+            getInner().instrument(accepted, loader, saver, parameters);\n+            rejected.forEach(c -> {\n@@ -136,0 +146,9 @@\n+    static Predicate<String> classNameFilter(InstrumentationParams params) {\n+        return r -> {\n+            if (isClassFile(r))\n+                return params.isIncluded(r.substring(0,\n+                        r.length() - Utils.FILE_TYPE.CLASS.name().length() - 1));\n+            else return true;\n+        };\n+    }\n+\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationPlugin.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-                \/\/&& params.isIncluded(className);\n+\/\/                && params.isIncluded(className);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.tdk.jcov.instrument.DataClass;\n@@ -30,0 +31,1 @@\n+import com.sun.tdk.jcov.instrument.DataPackage;\n@@ -92,1 +94,1 @@\n-        params.add(\"UserCode\");\n+        params.add(UserCode.class.getName());\n@@ -112,1 +114,1 @@\n-        params.add(\"UserCode\");\n+        params.add(UserCode.class.getName());\n@@ -131,2 +133,0 @@\n-        params.add(\"-i\");\n-        params.add(\"UserCode\");\n@@ -163,2 +163,4 @@\n-        DataMethod dm =\n-                data.getPackages().stream().filter(p -> p.getName().equals(\"com\/sun\/tdk\/jcov\/instrument\/instr\")).findAny().get()\n+        DataPackage dp =\n+                data.getPackages().stream()\n+                        .filter(p -> p.getName().equals(\"com\/sun\/tdk\/jcov\/instrument\/instr\")).findAny().get();\n+        DataMethod dm = dp\n@@ -169,0 +171,2 @@\n+        assertFalse(dp\n+                .getClasses().stream().filter(c -> c.getName().equals(\"InstrTest\")).findAny().isPresent());\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/instr\/InstrTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.time.LocalDateTime;\n@@ -100,0 +101,1 @@\n+                \"-exclude\", LocalDateTime.class.getName(),\n@@ -104,0 +106,1 @@\n+        \/\/no other modules but java.base and java.desktopm\n@@ -110,0 +113,5 @@\n+        \/\/no java.time.LocalDateTime\n+        assertEquals(Files.readAllLines(template)\n+                .stream()\n+                .filter(s -> s.trim().startsWith(\"<class name=\\\"LocalDateTime\\\"\"))\n+                .count(), 0);\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/jreinstr\/JREInstrTest.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}