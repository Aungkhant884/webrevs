{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -359,1 +358,1 @@\n-     * @param saveAtReceive true = save data when it's coming from Client\n+     * @param saveAtRecieve true = save data when it's coming from Client\n@@ -699,1 +698,1 @@\n-     * @param data received clients data to handle\n+     * @param root received clients data to handle\n@@ -833,1 +832,1 @@\n-                                    if ((dm.isAbstract() || (dm.getAccess() & Opcodes.ACC_NATIVE) != 0)\n+                                    if ((dm.getModifiers().isAbstract() || dm.getModifiers().isNative())\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Grabber.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.ASMUtils;\n@@ -277,1 +278,1 @@\n-                    new ClassVisitor(Utils.ASM_API_VERSION, classWriter) {\n+                    new ClassVisitor(ASMUtils.ASM_API_VERSION, classWriter) {\n@@ -308,1 +309,1 @@\n-                    new ClassVisitor(Utils.ASM_API_VERSION, classWriter) {\n+                    new ClassVisitor(ASMUtils.ASM_API_VERSION, classWriter) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/JREInstr.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -822,1 +821,1 @@\n-            ancMethod = ((m.getAccess() & Opcodes.ACC_SYNTHETIC) != 0);\n+            ancMethod = m.getModifiers().isSynthetic();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/RepGen.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+public class ASMUtils {\n+    \/**\n+     * The ASM API version that should be used by jcov.\n+     *\/\n+    public static final int ASM_API_VERSION = Opcodes.ASM9;\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ASMUtils.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-     * Access code of this class\n+     * Container for access code of this class\n@@ -87,1 +87,1 @@\n-    private int access;\n+    private DataModifiers access;\n@@ -182,1 +182,1 @@\n-        this.access = access;\n+        this.access = new DataModifiers(access);\n@@ -275,1 +275,1 @@\n-        this.access = access;\n+        this.access = new DataModifiers(access);\n@@ -285,1 +285,1 @@\n-        return access;\n+        return access.access();\n@@ -288,0 +288,1 @@\n+    public Modifiers getModifiers() { return access; }\n@@ -365,1 +366,1 @@\n-        return accessFlags(access);\n+        return accessFlags(access.access());\n@@ -376,3 +377,1 @@\n-    public boolean isPublic() {\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n-    }\n+    public boolean isPublic() { return isPublicAPI(); }\n@@ -388,1 +387,1 @@\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n+        return access.isPublic() || access.isProtected();\n@@ -396,0 +395,1 @@\n+    @Deprecated\n@@ -397,1 +397,1 @@\n-        return (access & Opcodes.ACC_PRIVATE) != 0;\n+        return access.isPrivate();\n@@ -405,0 +405,1 @@\n+    @Deprecated\n@@ -406,1 +407,1 @@\n-        return (access & Opcodes.ACC_PUBLIC) != 0;\n+        return access.isPublic();\n@@ -414,0 +415,1 @@\n+    @Deprecated\n@@ -415,1 +417,1 @@\n-        return (access & Opcodes.ACC_PROTECTED) != 0;\n+        return access.isProtected();\n@@ -423,0 +425,1 @@\n+    @Deprecated\n@@ -424,1 +427,1 @@\n-        return (access & Opcodes.ACC_ABSTRACT) != 0;\n+        return access.isAbstract();\n@@ -432,0 +435,1 @@\n+    @Deprecated\n@@ -433,1 +437,1 @@\n-        return (access & Opcodes.ACC_STATIC) != 0;\n+        return access.isStatic();\n@@ -443,3 +447,2 @@\n-    public boolean hasModifier(int modifierCode) {\n-        return (access & modifierCode) != 0;\n-    }\n+    @Deprecated\n+    public boolean hasModifier(int modifierCode) { return access.is(modifierCode); }\n@@ -591,1 +594,1 @@\n-            return (access & Opcodes.ACC_INTERFACE) == 0 ? XmlNames.CLASS : XmlNames.INTERFACE;\n+            return access.isInterface() ? XmlNames.INTERFACE : XmlNames.CLASS;\n@@ -608,1 +611,1 @@\n-            } else if ((access & Opcodes.ACC_INTERFACE) == 0) {\n+            } else if (!access.isInterface()) {\n@@ -639,1 +642,1 @@\n-        if (!differentiateClass && (access & Opcodes.ACC_INTERFACE) != 0) {\n+        if (!differentiateClass && !access.isInterface()) {\n@@ -655,1 +658,1 @@\n-        xmlAccessFlags(ctx, access);\n+        xmlAccessFlags(ctx, access.access());\n@@ -987,1 +990,1 @@\n-        if ((access | Opcodes.ACC_SUPER) != (other.access | Opcodes.ACC_SUPER)) {\n+        if (access.isSuper() != other.access.isSuper()) {\n@@ -989,1 +992,1 @@\n-                    \"Access mismatch: expected '\" + access + \"'; found '\" + other.access + \"'\",\n+                    \"Access mismatch: expected '\" + access.access() + \"'; found '\" + other.access.access() + \"'\",\n@@ -1078,1 +1081,1 @@\n-        out.writeInt(access & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n+        out.writeInt(access.access() & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n@@ -1089,1 +1092,1 @@\n-                if ((m.access & (Opcodes.ACC_NATIVE | Opcodes.ACC_ABSTRACT)) != 0) {\n+                if (m.access.isNative() || m.access.isAbstract()) {\n@@ -1095,1 +1098,1 @@\n-                if ((m.access & (Opcodes.ACC_NATIVE | Opcodes.ACC_ABSTRACT)) != 0) {\n+                if (m.access.isNative() || m.access.isAbstract()) {\n@@ -1122,1 +1125,1 @@\n-        access = in.readInt();\n+        access = new DataModifiers(in.readInt());\n@@ -1169,0 +1172,1 @@\n+\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataClass.java","additions":33,"deletions":29,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,1 @@\n-     * Field access code\n+     * Container for field access code\n@@ -60,1 +60,1 @@\n-    private final int access;\n+    private final DataModifiers access;\n@@ -122,1 +122,1 @@\n-        this.access = access;\n+        this.access = new DataModifiers(access);\n@@ -228,1 +228,1 @@\n-        return access;\n+        return access.access();\n@@ -231,0 +231,2 @@\n+    public Modifiers getModifiers() { return access; }\n+\n@@ -268,1 +270,1 @@\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n+        return isPublicAPI();\n@@ -279,1 +281,1 @@\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n+        return access.isPublic() || access.isProtected();\n@@ -287,0 +289,1 @@\n+    @Deprecated\n@@ -288,1 +291,1 @@\n-        return (access & Opcodes.ACC_PRIVATE) != 0;\n+        return access.isPrivate();\n@@ -296,0 +299,1 @@\n+    @Deprecated\n@@ -297,1 +301,1 @@\n-        return (access & Opcodes.ACC_PUBLIC) != 0;\n+        return access.isPublic();\n@@ -305,0 +309,1 @@\n+    @Deprecated\n@@ -306,1 +311,1 @@\n-        return (access & Opcodes.ACC_PROTECTED) != 0;\n+        return access.isProtected();\n@@ -314,0 +319,1 @@\n+    @Deprecated\n@@ -315,1 +321,1 @@\n-        return (access & Opcodes.ACC_STATIC) != 0;\n+        return access.isStatic();\n@@ -325,0 +331,1 @@\n+    @Deprecated\n@@ -326,1 +333,1 @@\n-        return (access & modifierCode) != 0;\n+        return access.is(modifierCode);\n@@ -335,1 +342,1 @@\n-        return accessFlags(access);\n+        return accessFlags(access.access());\n@@ -381,1 +388,1 @@\n-        xmlAccessFlags(ctx, access);\n+        xmlAccessFlags(ctx, access.access());\n@@ -494,1 +501,1 @@\n-        out.writeInt(access & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n+        out.writeInt(access.access() & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n@@ -511,1 +518,1 @@\n-        access = in.readInt();\n+        access = new DataModifiers(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataField.java","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-     * Method access code\n+     * Container for method access code\n@@ -56,1 +56,1 @@\n-    protected final int access;\n+    protected final DataModifiers access;\n@@ -106,1 +106,1 @@\n-        this.access = access;\n+        this.access = new DataModifiers(access);\n@@ -198,1 +198,1 @@\n-        return access;\n+        return access.access();\n@@ -201,0 +201,2 @@\n+    public Modifiers getModifiers() { return access; }\n+\n@@ -207,1 +209,1 @@\n-        return accessFlags(access);\n+        return accessFlags(access.access());\n@@ -219,1 +221,1 @@\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n+        return isPublicAPI();\n@@ -230,1 +232,1 @@\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n+        return access.isPublic() || access.isProtected();\n@@ -240,0 +242,1 @@\n+    @Deprecated\n@@ -241,1 +244,1 @@\n-        return (access & Opcodes.ACC_ABSTRACT) != 0;\n+        return access.isAbstract();\n@@ -249,0 +252,1 @@\n+    @Deprecated\n@@ -250,1 +254,1 @@\n-        return (access & Opcodes.ACC_PRIVATE) != 0;\n+        return access.isPrivate();\n@@ -258,0 +262,1 @@\n+    @Deprecated\n@@ -259,1 +264,1 @@\n-        return (access & Opcodes.ACC_PUBLIC) != 0;\n+        return access.isPublic();\n@@ -267,0 +272,1 @@\n+    @Deprecated\n@@ -268,1 +274,1 @@\n-        return (access & Opcodes.ACC_PROTECTED) != 0;\n+        return access.isProtected();\n@@ -276,0 +282,1 @@\n+    @Deprecated\n@@ -277,1 +284,1 @@\n-        return (access & Opcodes.ACC_ABSTRACT) != 0;\n+        return access.isAbstract();\n@@ -285,0 +292,1 @@\n+    @Deprecated\n@@ -286,1 +294,1 @@\n-        return (access & Opcodes.ACC_STATIC) != 0;\n+        return access.isStatic();\n@@ -294,0 +302,1 @@\n+    @Deprecated\n@@ -295,1 +304,1 @@\n-        return (access & Opcodes.ACC_NATIVE) != 0;\n+        return access.isNative();\n@@ -305,0 +314,1 @@\n+    @Deprecated\n@@ -306,1 +316,1 @@\n-        return (access & modifierCode) != 0;\n+        return access.is(modifierCode);\n@@ -413,1 +423,1 @@\n-        if (ctx.showAbstract || (access & Opcodes.ACC_ABSTRACT) == 0) {\n+        if (ctx.showAbstract || !access.isAbstract()) {\n@@ -426,1 +436,1 @@\n-        xmlAccessFlags(ctx, access);\n+        xmlAccessFlags(ctx, access.access());\n@@ -586,1 +596,1 @@\n-        out.writeInt(access & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n+        out.writeInt(access.access() & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n@@ -606,1 +616,1 @@\n-        access = in.readInt();\n+        access = new DataModifiers(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethod.java","additions":30,"deletions":20,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument;\n+\n+import org.objectweb.asm.Opcodes;\n+\n+public class DataModifiers implements Modifiers {\n+    private final int access;\n+\n+    public DataModifiers(int access) {\n+        this.access = access;\n+    }\n+\n+    public int access() {\n+        return access;\n+    }\n+\n+    public boolean is(int flag) {\n+        return (access & flag) != 0;\n+    }\n+\n+    @Override\n+    public boolean isPublic() {\n+        return is(Opcodes.ACC_PUBLIC);\n+    }\n+\n+    @Override\n+    public boolean isPrivate() {\n+        return is(Opcodes.ACC_PRIVATE);\n+    }\n+\n+    @Override\n+    public boolean isProtected() { return is(Opcodes.ACC_PROTECTED); }\n+\n+    @Override\n+    public boolean isAbstract() {\n+        return is(Opcodes.ACC_ABSTRACT);\n+    }\n+\n+    @Override\n+    public boolean isFinal() {\n+        return is(Opcodes.ACC_FINAL);\n+    }\n+\n+    @Override\n+    public boolean isSynthetic() {\n+        return is(Opcodes.ACC_SYNTHETIC);\n+    }\n+\n+    @Override\n+    public boolean isStatic() {\n+        return is(Opcodes.ACC_STATIC);\n+    }\n+\n+    @Override\n+    public boolean isInterface() {\n+        return is(Opcodes.ACC_INTERFACE);\n+    }\n+\n+    @Override\n+    public boolean isSuper() {\n+        return is(Opcodes.ACC_SUPER);\n+    }\n+\n+    @Override\n+    public boolean isNative() {\n+        return is(Opcodes.ACC_NATIVE);\n+    }\n+\n+    @Override\n+    public boolean isDeprecated() { return is(Opcodes.ACC_DEPRECATED); }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataModifiers.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -54,1 +54,1 @@\n-        super(Utils.ASM_API_VERSION, cv);\n+        super(ASMUtils.ASM_API_VERSION, cv);\n@@ -191,1 +191,1 @@\n-            mv = new MethodVisitor(Utils.ASM_API_VERSION, mv) {\n+            mv = new MethodVisitor(ASMUtils.ASM_API_VERSION, mv) {\n@@ -233,1 +233,1 @@\n-        mv = new MethodVisitor(Utils.ASM_API_VERSION, mv) {\n+        mv = new MethodVisitor(ASMUtils.ASM_API_VERSION, mv) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DeferringMethodClassAdapter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-        super(Utils.ASM_API_VERSION, mv);\n+        super(ASMUtils.ASM_API_VERSION, mv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/EntryCodeMethodAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-        super(Utils.ASM_API_VERSION, fv);\n+        super(ASMUtils.ASM_API_VERSION, fv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/FieldAnnotationVisitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-            super(Utils.ASM_API_VERSION);\n+            super(ASMUtils.ASM_API_VERSION);\n@@ -92,1 +92,1 @@\n-        super(Utils.ASM_API_VERSION);\n+        super(ASMUtils.ASM_API_VERSION);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ForkingMethodAdapter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        super(Utils.ASM_API_VERSION, cv);\n+        super(ASMUtils.ASM_API_VERSION, cv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentedAttributeClassAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-        super(Utils.ASM_API_VERSION, cv);\n+        super(ASMUtils.ASM_API_VERSION, cv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InvokeClassAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        super(Utils.ASM_API_VERSION, mv);\n+        super(ASMUtils.ASM_API_VERSION, mv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InvokeMethodAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        super(Utils.ASM_API_VERSION, mv);\n+        super(ASMUtils.ASM_API_VERSION, mv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/MethodAnnotationAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument;\n+\n+public interface Modifiers {\n+    boolean isPublic();\n+\n+    boolean isPrivate();\n+\n+    boolean isProtected();\n+\n+    boolean isAbstract();\n+\n+    boolean isFinal();\n+\n+    boolean isSynthetic();\n+\n+    boolean isStatic();\n+\n+    boolean isInterface();\n+\n+    boolean isSuper();\n+\n+    boolean isNative();\n+\n+    boolean isDeprecated();\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Modifiers.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-        super(Utils.ASM_API_VERSION, mv);\n+        super(ASMUtils.ASM_API_VERSION, mv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/OffsetRecordingMethodAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        super(Utils.ASM_API_VERSION, mv);\n+        super(ASMUtils.ASM_API_VERSION, mv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/SavePointsMethodAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        super(Utils.ASM_API_VERSION, mv);\n+        super(ASMUtils.ASM_API_VERSION, mv);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/StaticInvokeMethodAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import com.sun.tdk.jcov.instrument.Modifiers;\n@@ -38,1 +39,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -66,5 +66,6 @@\n-    private int access;\n-    private String fullname;\n-    private String name;\n-    private String packagename;\n-    private String modulename;\n+    private final int access;\n+    private final String fullname;\n+    private final String name;\n+    private final String packagename;\n+    private final String modulename;\n+    private final Modifiers modifiers;\n@@ -95,0 +96,1 @@\n+        modifiers = clz.getModifiers();\n@@ -128,1 +130,1 @@\n-            if ((method.getAccess() & Opcodes.ACC_SYNTHETIC) != 0 && method.getName().startsWith(\"lambda$\")){\n+            if (method.getModifiers().isSynthetic() && method.getName().startsWith(\"lambda$\")){\n@@ -180,3 +182,1 @@\n-    public boolean isPublicAPI() {\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n-    }\n+    public boolean isPublicAPI() { return modifiers.isPublic() || modifiers.isProtected(); }\n@@ -193,1 +193,1 @@\n-        return (access & Opcodes.ACC_PUBLIC) != 0;\n+        return modifiers.isPublic();\n@@ -205,1 +205,1 @@\n-        return (access & Opcodes.ACC_PRIVATE) != 0;\n+        return modifiers.isPrivate();\n@@ -217,1 +217,1 @@\n-        return (access & Opcodes.ACC_PROTECTED) != 0;\n+        return modifiers.isProtected();\n@@ -229,1 +229,1 @@\n-        return (access & Opcodes.ACC_ABSTRACT) != 0;\n+        return modifiers.isAbstract();\n@@ -241,1 +241,1 @@\n-        return (access & Opcodes.ACC_FINAL) != 0;\n+        return modifiers.isFinal();\n@@ -248,1 +248,0 @@\n-     * @see Opcodes\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/ClassCoverage.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -50,4 +50,3 @@\n-        count = fld.getCount();\n-        startLine = 0;\n-        modifiers = Arrays.deepToString(fld.getAccessFlags());\n-        name = fld.getName();\n+        access = fld.getAccess();\n+        modifiersString =  Arrays.deepToString(fld.getAccessFlags());\n+        name =  fld.getName();\n@@ -55,0 +54,2 @@\n+        startLine = 0;\n+        count = fld.getCount();\n@@ -56,1 +57,1 @@\n-        access = fld.getAccess();\n+        modifiers = fld.getModifiers();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/FieldCoverage.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.sun.tdk.jcov.instrument.Modifiers;\n@@ -32,1 +33,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -45,1 +45,1 @@\n-    protected String modifiers;\n+    protected String modifiersString;\n@@ -48,0 +48,1 @@\n+    protected Modifiers modifiers;\n@@ -89,2 +90,2 @@\n-    public String getModifiers() {\n-        return modifiers;\n+    public String getModifiersString() {\n+        return modifiersString;\n@@ -159,1 +160,1 @@\n-        return (access & (Opcodes.ACC_PUBLIC | Opcodes.ACC_PROTECTED)) != 0;\n+        return modifiers.isPublic() || modifiers.isProtected();\n@@ -171,1 +172,1 @@\n-        return (access & Opcodes.ACC_PUBLIC) != 0;\n+        return modifiers.isPublic();\n@@ -183,1 +184,1 @@\n-        return (access & Opcodes.ACC_PRIVATE) != 0;\n+        return modifiers.isPrivate();\n@@ -195,1 +196,1 @@\n-        return (access & Opcodes.ACC_PROTECTED) != 0;\n+        return modifiers.isProtected();\n@@ -207,1 +208,1 @@\n-        return (access & Opcodes.ACC_ABSTRACT) != 0;\n+        return modifiers.isAbstract();\n@@ -219,1 +220,1 @@\n-        return (access & Opcodes.ACC_FINAL) != 0;\n+        return modifiers.isFinal();\n@@ -226,1 +227,0 @@\n-     * @see Opcodes\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/MemberCoverage.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -86,1 +85,2 @@\n-        modifiers = Arrays.deepToString(method.getAccessFlags());\n+        access = method.getAccess();\n+        modifiersString = Arrays.deepToString(method.getAccessFlags());\n@@ -88,0 +88,4 @@\n+        signature = (method.getVmSignature() != null) ? method.getVmSignature() : \"\";\n+        startLine = (method.getLineTable() != null && method.getLineTable().size() > 0) ?\n+                        method.getLineTable().get(0).line : 0;\n+        count = method.getCount();\n@@ -89,2 +93,1 @@\n-        signature = method.getVmSignature();\n-        access = method.getAccess();\n+        modifiers = method.getModifiers();\n@@ -94,5 +97,0 @@\n-        if (signature == null) {\n-            signature = \"\";\n-        }\n-        count = method.getCount();\n-\n@@ -103,3 +101,0 @@\n-            if (lineTable.size() > 0) {\n-                super.startLine = lineTable.get(0).line;\n-            }\n@@ -419,1 +414,1 @@\n-                if (inAnonymClass && !anonymon && (access & Opcodes.ACC_SYNTHETIC) != 0) {\n+                if (inAnonymClass && !anonymon && modifiers.isSynthetic()) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/MethodCoverage.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -46,1 +45,1 @@\n-        if ((m.getAccess() & Opcodes.ACC_DEPRECATED) != 0){\n+        if (m.getModifiers().isDeprecated()){\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/ancfilters\/DeprecatedANCFilter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -46,1 +45,1 @@\n-        if ((m.getAccess() & Opcodes.ACC_SYNTHETIC) != 0){\n+        if (m.getModifiers().isSynthetic()){\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/ancfilters\/SyntheticANCFilter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -1585,1 +1585,1 @@\n-            String mmodifiers = mcov.getModifiers();\n+            String mmodifiers = mcov.getModifiersString();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/html\/CoverageReport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -60,5 +59,0 @@\n-    \/**\n-     * The ASM API version that should be used by jcov.\n-     *\/\n-    public static final int ASM_API_VERSION = Opcodes.ASM9;\n-\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/util\/Utils.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}