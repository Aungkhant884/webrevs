{"files":[{"patch":"@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n@@ -60,1 +60,1 @@\n-public class Plugin implements InstrumentationPlugin {\n+public class Plugin implements ASMInstrumentationPlugin {\n","filename":"plugins\/data_coverage\/src\/openjdk\/jcov\/data\/arguments\/instrument\/Plugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n@@ -8,1 +8,1 @@\n-public class VoidPlugin implements InstrumentationPlugin {\n+public class VoidPlugin implements ASMInstrumentationPlugin {\n","filename":"plugins\/data_coverage\/test\/openjdk\/jcov\/data\/arguments\/jreinstr\/filepermission\/VoidPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -39,2 +40,0 @@\n-import static org.objectweb.asm.Opcodes.*;\n-\n@@ -138,1 +137,1 @@\n-    void xmlAccessFlags(XmlContext ctx, int access) {\n+    void xmlAccessFlags(XmlContext ctx, Modifiers access) {\n@@ -156,1 +155,1 @@\n-    String[] accessFlags(int access) {\n+    String[] accessFlags(Modifiers access) {\n@@ -158,1 +157,1 @@\n-        if ((access & ACC_PUBLIC) != 0) {\n+        if (access.isPublic()) {\n@@ -161,1 +160,1 @@\n-        if ((access & ACC_PRIVATE) != 0) {\n+        if (access.isPrivate()) {\n@@ -164,1 +163,1 @@\n-        if ((access & ACC_PROTECTED) != 0) {\n+        if (access.isProtected()) {\n@@ -167,1 +166,1 @@\n-        if ((access & ACC_STATIC) != 0) {\n+        if (access.isStatic()) {\n@@ -170,1 +169,1 @@\n-        if ((access & ACC_FINAL) != 0) {\n+        if (access.isFinal()) {\n@@ -173,1 +172,1 @@\n-        if ((access & ACC_SYNCHRONIZED) != 0) {\n+        if (access.isSynchronized()) {\n@@ -176,1 +175,1 @@\n-        if ((access & ACC_VOLATILE) != 0) {\n+        if (access.isVolatile()) {\n@@ -179,1 +178,1 @@\n-        if ((access & ACC_BRIDGE) != 0) {\n+        if (access.isBridge()) {\n@@ -182,1 +181,1 @@\n-        if ((access & ACC_VARARGS) != 0) {\n+        if (access.isVarargs()) {\n@@ -185,1 +184,1 @@\n-        if ((access & ACC_TRANSIENT) != 0) {\n+        if (access.isTransient()) {\n@@ -188,1 +187,1 @@\n-        if ((access & ACC_NATIVE) != 0) {\n+        if (access.isNative()) {\n@@ -191,1 +190,1 @@\n-        if ((access & ACC_INTERFACE) != 0) {\n+        if (access.isInterface()) {\n@@ -194,1 +193,1 @@\n-        if ((access & ACC_ABSTRACT) != 0) {\n+        if (access.isAbstract()) {\n@@ -197,1 +196,1 @@\n-        if ((access & ACC_STRICT) != 0) {\n+        if (access.isStrict()) {\n@@ -200,1 +199,1 @@\n-        if ((access & ACC_ANNOTATION) != 0) {\n+        if (access.isAnnotation()) {\n@@ -203,1 +202,1 @@\n-        if ((access & ACC_ENUM) != 0) {\n+        if (access.isEnum()) {\n@@ -206,1 +205,1 @@\n-        if ((access & ACC_SYNTHETIC) != 0) {\n+        if (access.isSynthetic()) {\n@@ -212,57 +211,2 @@\n-    public int access(String[] accessFlags) {\n-        int access = 0;\n-        for (String flag : accessFlags) {\n-            if (flag.contains(XmlNames.A_PUBLIC)) {\n-                access |= ACC_PUBLIC;\n-            }\n-            if (flag.contains(XmlNames.A_PRIVATE)) {\n-                access |= ACC_PRIVATE;\n-            }\n-            if (flag.contains(XmlNames.A_PROTECTED)) {\n-                access |= ACC_PROTECTED;\n-            }\n-            if (flag.contains(XmlNames.A_STATIC)) {\n-                access |= ACC_STATIC;\n-            }\n-            if (flag.contains(XmlNames.A_FINAL)) {\n-                access |= ACC_FINAL;\n-            }\n-            if (flag.contains(XmlNames.A_VOLATILE)) {\n-                access |= ACC_VOLATILE;\n-            }\n-            if (flag.contains(XmlNames.A_BRIDGE)) {\n-                access |= ACC_BRIDGE;\n-            }\n-            if (flag.contains(XmlNames.A_VARARGS)) {\n-                access |= ACC_VARARGS;\n-            }\n-            if (flag.contains(XmlNames.A_TRANSIENT)) {\n-                access |= ACC_TRANSIENT;\n-            }\n-            if (flag.contains(XmlNames.A_NATIVE)) {\n-                access |= ACC_NATIVE;\n-            }\n-            if (flag.contains(XmlNames.A_INTERFACE) || flag.contains(XmlNames.A_DEFENDER_METH)) {\n-                access |= ACC_INTERFACE;\n-            }\n-            if (flag.contains(XmlNames.A_ABSTRACT)) {\n-                access |= ACC_ABSTRACT;\n-            }\n-            if (flag.contains(XmlNames.A_STRICT)) {\n-                access |= ACC_STRICT;\n-            }\n-            if (flag.contains(XmlNames.A_ANNOTATION)) {\n-                access |= ACC_ANNOTATION;\n-            }\n-            if (flag.contains(XmlNames.A_ENUM)) {\n-                access |= ACC_ENUM;\n-            }\n-            if (flag.contains(XmlNames.A_SYNTHETIC)) {\n-                access |= ACC_SYNTHETIC;\n-            }\n-            if (flag.contains(XmlNames.A_SYNCHRONIZED)) {\n-                access |= ACC_SYNCHRONIZED;\n-            }\n-\n-        }\n-        return access;\n+    public Modifiers access(String[] accessFlags) {\n+        return ASMModifiers.parse(accessFlags);\n@@ -271,1 +215,1 @@\n-    public String access(int access) {\n+    public String access(Modifiers access) {\n@@ -325,3 +269,0 @@\n-    public static final int ACCESS_MASK = ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_FINAL | ACC_STATIC | ACC_SYNCHRONIZED\n-            | ACC_VOLATILE | ACC_BRIDGE | ACC_VARARGS | ACC_TRANSIENT | ACC_NATIVE | ACC_ABSTRACT | ACC_INTERFACE\n-            | ACC_STRICT | ACC_ANNOTATION | ACC_ENUM | ACC_SYNTHETIC;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataAbstract.java","additions":23,"deletions":82,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -34,1 +35,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -84,2 +84,0 @@\n-     *\n-     * @see org.objectweb.asm.Opcodes\n@@ -87,1 +85,1 @@\n-    private DataModifiers access;\n+    private Modifiers access;\n@@ -163,1 +161,0 @@\n-        int acc = access(accessFlags);\n@@ -169,1 +166,1 @@\n-        setInfo(acc, signature, superName, sInterfaces);\n+        setInfo(access(accessFlags), signature, superName, sInterfaces);\n@@ -181,2 +178,2 @@\n-    public void setInfo(int access, String signature, String superName, String[] interfaces) {\n-        this.access = new DataModifiers(access);\n+    public void setInfo(Modifiers access, String signature, String superName, String[] interfaces) {\n+        this.access = access;\n@@ -271,1 +268,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -275,1 +271,1 @@\n-        this.access = new DataModifiers(access);\n+        this.access = new ASMModifiers(access);\n@@ -281,1 +277,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -366,1 +361,1 @@\n-        return accessFlags(access.access());\n+        return accessFlags(access);\n@@ -373,1 +368,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -383,1 +377,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -441,1 +434,1 @@\n-     * Checks whether this class has specified modifier (by Opcodes)\n+     * Checks whether this class has specified modifier\n@@ -444,1 +437,0 @@\n-     * @see Opcodes\n@@ -618,1 +610,1 @@\n-                    if ((method.getAccess() & Opcodes.ACC_ABSTRACT) == 0) {\n+                    if (!method.getModifiers().isAbstract()) {\n@@ -658,1 +650,1 @@\n-        xmlAccessFlags(ctx, access.access());\n+        xmlAccessFlags(ctx, access);\n@@ -685,1 +677,1 @@\n-    String[] accessFlags(int access) {\n+    String[] accessFlags(Modifiers access) {\n@@ -935,1 +927,0 @@\n-     * @param errorSeverity - error severity\n@@ -1081,1 +1072,1 @@\n-        out.writeInt(access.access() & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n+        out.writeInt(access.access());\n@@ -1125,1 +1116,1 @@\n-        access = new DataModifiers(in.readInt());\n+        access = new ASMModifiers(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataClass.java","additions":13,"deletions":22,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -40,1 +41,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -57,2 +57,0 @@\n-     *\n-     * @see org.objectweb.asm.Opcodes\n@@ -60,1 +58,1 @@\n-    private final DataModifiers access;\n+    private final Modifiers access;\n@@ -122,1 +120,1 @@\n-        this.access = new DataModifiers(access);\n+        this.access = new ASMModifiers(access);\n@@ -265,1 +263,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -277,1 +274,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -325,1 +321,1 @@\n-     * Checks whether this field has specified modifier (by Opcodes)\n+     * Checks whether this field has specified modifier\n@@ -328,1 +324,0 @@\n-     * @see Opcodes\n@@ -342,1 +337,1 @@\n-        return accessFlags(access.access());\n+        return accessFlags(access);\n@@ -388,1 +383,1 @@\n-        xmlAccessFlags(ctx, access.access());\n+        xmlAccessFlags(ctx, access);\n@@ -484,1 +479,1 @@\n-    String[] accessFlags(int access) {\n+    String[] accessFlags(Modifiers access) {\n@@ -501,1 +496,1 @@\n-        out.writeInt(access.access() & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n+        out.writeInt(access.access());\n@@ -518,1 +513,1 @@\n-        access = new DataModifiers(in.readInt());\n+        access = new ASMModifiers(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataField.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -35,1 +36,0 @@\n-import org.objectweb.asm.Opcodes;\n@@ -53,2 +53,0 @@\n-     *\n-     * @see org.objectweb.asm.Opcodes\n@@ -56,1 +54,1 @@\n-    protected final DataModifiers access;\n+    protected final Modifiers access;\n@@ -106,1 +104,1 @@\n-        this.access = new DataModifiers(access);\n+        this.access = new ASMModifiers(access);\n@@ -120,7 +118,0 @@\n-     * @param k\n-     * @param access\n-     * @param name\n-     * @param desc\n-     * @param signature\n-     * @param exceptions\n-     * @param differentiateMethods\n@@ -193,2 +184,0 @@\n-     *\n-     * @see org.objectweb.asm.Opcodes\n@@ -209,1 +198,1 @@\n-        return accessFlags(access.access());\n+        return accessFlags(access);\n@@ -216,1 +205,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -228,1 +216,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -239,1 +226,0 @@\n-     * @see org.objectweb.asm.Opcodes\n@@ -308,1 +294,1 @@\n-     * Checks whether this method has specified modifier (by Opcodes)\n+     * Checks whether this method has specified modifier\n@@ -311,1 +297,0 @@\n-     * @see Opcodes\n@@ -436,1 +421,1 @@\n-        xmlAccessFlags(ctx, access.access());\n+        xmlAccessFlags(ctx, access);\n@@ -548,1 +533,1 @@\n-    String[] accessFlags(int access) {\n+    String[] accessFlags(Modifiers access) {\n@@ -596,1 +581,1 @@\n-        out.writeInt(access.access() & ACCESS_MASK); \/\/ we don't save ALL the codes in XML, we shouldn't save all codes in net\n+        out.writeInt(access.access());\n@@ -616,1 +601,1 @@\n-        access = new DataModifiers(in.readInt());\n+        access = new ASMModifiers(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethod.java","additions":9,"deletions":24,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument;\n-\n-import org.objectweb.asm.Opcodes;\n-\n-public class DataModifiers implements Modifiers {\n-    private final int access;\n-\n-    public DataModifiers(int access) {\n-        this.access = access;\n-    }\n-\n-    public int access() {\n-        return access;\n-    }\n-\n-    public boolean is(int flag) {\n-        return (access & flag) != 0;\n-    }\n-\n-    @Override\n-    public boolean isPublic() {\n-        return is(Opcodes.ACC_PUBLIC);\n-    }\n-\n-    @Override\n-    public boolean isPrivate() {\n-        return is(Opcodes.ACC_PRIVATE);\n-    }\n-\n-    @Override\n-    public boolean isProtected() { return is(Opcodes.ACC_PROTECTED); }\n-\n-    @Override\n-    public boolean isAbstract() {\n-        return is(Opcodes.ACC_ABSTRACT);\n-    }\n-\n-    @Override\n-    public boolean isFinal() {\n-        return is(Opcodes.ACC_FINAL);\n-    }\n-\n-    @Override\n-    public boolean isSynthetic() {\n-        return is(Opcodes.ACC_SYNTHETIC);\n-    }\n-\n-    @Override\n-    public boolean isStatic() {\n-        return is(Opcodes.ACC_STATIC);\n-    }\n-\n-    @Override\n-    public boolean isInterface() {\n-        return is(Opcodes.ACC_INTERFACE);\n-    }\n-\n-    @Override\n-    public boolean isSuper() {\n-        return is(Opcodes.ACC_SUPER);\n-    }\n-\n-    @Override\n-    public boolean isNative() {\n-        return is(Opcodes.ACC_NATIVE);\n-    }\n-\n-    @Override\n-    public boolean isDeprecated() { return is(Opcodes.ACC_DEPRECATED); }\n-}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataModifiers.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n@@ -231,3 +231,1 @@\n-    public InstrumentationPlugin getInstrumentationPlugin() {\n-        return plugin;\n-    }\n+    public InstrumentationPlugin getInstrumentationPlugin() { return plugin; }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationParams.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+package com.sun.tdk.jcov.instrument;\n+\n+import java.nio.file.Path;\n+\n+public interface InstrumentationPlugin {\n+    \/**\n+     * Called after all instrumentation is complete.\n+     *\n+     * @throws Exception should some\n+     *\/\n+    void instrumentationComplete() throws Exception;\n+\n+    \/**\n+     * For the instrumented code to work independently (i.e. without adding additional classes  to the classpath), some\n+     * classes can be \"implanted\" into the instrumented code.\n+     *\n+     * @return Path containing the classes to be implanted. Must be in a form which can be added to Java classpath.\n+     *\/\n+    \/\/TODO perhaps this can return a list of classes to be implanted\n+    Path runtime() throws Exception;\n+\n+    \/**\n+     * Name of a package which contains code, that will be called from the instrumented\n+     * code. Such package may need to be exported from a module.\n+     *\n+     * @return package name\n+     *\/\n+    String collectorPackage();\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationPlugin.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -49,0 +49,30 @@\n+\n+    boolean isSynchronized();\n+\n+    boolean isVolatile();\n+\n+    boolean isBridge();\n+\n+    boolean isVarargs();\n+\n+    boolean isTransient();\n+\n+    boolean isStrict();\n+\n+    boolean isAnnotation();\n+\n+    boolean isEnum();\n+\n+    int access();\n+\n+    \/**\n+     * This method is only a part of the contract to support deprecated methods.\n+     * @param code\n+     * @return\n+     * @see DataClass#hasModifier(int)\n+     * @see DataField#hasModifier(int)\n+     * @see DataMethod#hasModifier(int)\n+     *\/\n+    @Deprecated\n+    boolean is(int code);\n+\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Modifiers.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.asm;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import org.objectweb.asm.MethodVisitor;\n+\n+\/**\n+ * SPI class which allows to do additional instrumentation, in addition to instrumentation performed by JCov by default.\n+ * @author Alexander (Shura) Ilin.\n+ *\/\n+public interface ASMInstrumentationPlugin extends InstrumentationPlugin {\n+    \/**\n+     * Supplies a MethodVisitor to perform additional instrumentation.\n+     * @return A valid method visitor. If no instrumentation needed, must return <code>visitor<\/code> argument.\n+     *\/\n+    MethodVisitor methodVisitor(int access, String owner, String name, String desc, MethodVisitor visitor);\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMInstrumentationPlugin.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.asm;\n+\n+import com.sun.tdk.jcov.instrument.Modifiers;\n+import com.sun.tdk.jcov.instrument.XmlNames;\n+\n+import static org.objectweb.asm.Opcodes.*;\n+\n+public class ASMModifiers implements Modifiers {\n+    private final int access;\n+\n+    public ASMModifiers(int access) {\n+        this.access = access;\n+    }\n+\n+    @Override\n+    public int access() {\n+        return access & ACCESS_MASK;\n+    }\n+\n+    @Override\n+    public boolean is(int flag) {\n+        return (access & flag) != 0;\n+    }\n+\n+    @Override\n+    public boolean isPublic() {\n+        return is(ACC_PUBLIC);\n+    }\n+\n+    @Override\n+    public boolean isPrivate() {\n+        return is(ACC_PRIVATE);\n+    }\n+\n+    @Override\n+    public boolean isProtected() { return is(ACC_PROTECTED); }\n+\n+    @Override\n+    public boolean isAbstract() {\n+        return is(ACC_ABSTRACT);\n+    }\n+\n+    @Override\n+    public boolean isFinal() {\n+        return is(ACC_FINAL);\n+    }\n+\n+    @Override\n+    public boolean isSynthetic() {\n+        return is(ACC_SYNTHETIC);\n+    }\n+\n+    @Override\n+    public boolean isStatic() {\n+        return is(ACC_STATIC);\n+    }\n+\n+    @Override\n+    public boolean isInterface() {\n+        return is(ACC_INTERFACE);\n+    }\n+\n+    @Override\n+    public boolean isSuper() {\n+        return is(ACC_SUPER);\n+    }\n+\n+    @Override\n+    public boolean isNative() {\n+        return is(ACC_NATIVE);\n+    }\n+\n+    @Override\n+    public boolean isDeprecated() { return is(ACC_DEPRECATED); }\n+\n+    @Override\n+    public boolean isSynchronized() {\n+        return is(ACC_SYNCHRONIZED);\n+    }\n+\n+    @Override\n+    public boolean isVolatile() {\n+        return is(ACC_VOLATILE);\n+    }\n+\n+    @Override\n+    public boolean isBridge() {\n+        return is(ACC_BRIDGE);\n+    }\n+\n+    @Override\n+    public boolean isVarargs() {\n+        return is(ACC_VARARGS);\n+    }\n+\n+    @Override\n+    public boolean isTransient() {\n+        return is(ACC_TRANSIENT);\n+    }\n+\n+    @Override\n+    public boolean isStrict() {\n+        return is(ACC_STRICT);\n+    }\n+\n+    @Override\n+    public boolean isAnnotation() {\n+        return is(ACC_ANNOTATION);\n+    }\n+\n+    @Override\n+    public boolean isEnum() {\n+        return is(ACC_ENUM);\n+    }\n+\n+    public static final int ACCESS_MASK = ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED | ACC_FINAL | ACC_STATIC | ACC_SYNCHRONIZED\n+            | ACC_VOLATILE | ACC_BRIDGE | ACC_VARARGS | ACC_TRANSIENT | ACC_NATIVE | ACC_ABSTRACT | ACC_INTERFACE\n+            | ACC_STRICT | ACC_ANNOTATION | ACC_ENUM | ACC_SYNTHETIC | ACC_SUPER | ACC_DEPRECATED;\n+\n+    public static ASMModifiers parse(String[] modifiers) {\n+        int access = 0;\n+        for (String flag : modifiers) {\n+            if (flag.contains(XmlNames.A_PUBLIC)) access |= ACC_PUBLIC;\n+            if (flag.contains(XmlNames.A_PRIVATE)) access |= ACC_PRIVATE;\n+            if (flag.contains(XmlNames.A_PROTECTED)) access |= ACC_PROTECTED;\n+            if (flag.contains(XmlNames.A_STATIC)) access |= ACC_STATIC;\n+            if (flag.contains(XmlNames.A_FINAL)) access |= ACC_FINAL;\n+            if (flag.contains(XmlNames.A_VOLATILE)) access |= ACC_VOLATILE;\n+            if (flag.contains(XmlNames.A_BRIDGE)) access |= ACC_BRIDGE;\n+            if (flag.contains(XmlNames.A_VARARGS)) access |= ACC_VARARGS;\n+            if (flag.contains(XmlNames.A_TRANSIENT)) access |= ACC_TRANSIENT;\n+            if (flag.contains(XmlNames.A_NATIVE)) access |= ACC_NATIVE;\n+            if (flag.contains(XmlNames.A_INTERFACE) || flag.contains(XmlNames.A_DEFENDER_METH)) access |= ACC_INTERFACE;\n+            if (flag.contains(XmlNames.A_ABSTRACT)) access |= ACC_ABSTRACT;\n+            if (flag.contains(XmlNames.A_STRICT)) access |= ACC_STRICT;\n+            if (flag.contains(XmlNames.A_ANNOTATION)) access |= ACC_ANNOTATION;\n+            if (flag.contains(XmlNames.A_ENUM)) access |= ACC_ENUM;\n+            if (flag.contains(XmlNames.A_SYNTHETIC)) access |= ACC_SYNTHETIC;\n+            if (flag.contains(XmlNames.A_SYNCHRONIZED))  access |= ACC_SYNCHRONIZED;\n+        }\n+        return new ASMModifiers(access);\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMModifiers.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -639,2 +639,2 @@\n-                        if (meth.access(meth.getAccess()).matches(\".*abstract.*\")\n-                                || meth.access(meth.getAccess()).matches(\".*native.*\")) {\n+                        if (meth.access(meth.getModifiers()).matches(\".*abstract.*\")\n+                                || meth.access(meth.getModifiers()).matches(\".*native.*\")) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import static java.lang.String.format;\n@@ -47,1 +46,0 @@\n-import java.util.logging.Level;\n@@ -75,1 +73,1 @@\n-        dataClass.setInfo(access, signature, superName, interfaces);\n+        dataClass.setInfo(new ASMModifiers(access), signature, superName, interfaces);\n@@ -253,1 +251,1 @@\n-        InstrumentationPlugin plugin = params.getInstrumentationPlugin();\n+        ASMInstrumentationPlugin plugin = (ASMInstrumentationPlugin) params.getInstrumentationPlugin();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/DeferringMethodClassAdapter.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument.asm;\n-\n-import org.objectweb.asm.MethodVisitor;\n-\n-import java.nio.file.Path;\n-\n-\/**\n- * SPI class which allows to do additional instrumentation, in addition to instrumentation performed by JCov by default.\n- * @author Alexander (Shura) Ilin.\n- *\/\n-public interface InstrumentationPlugin {\n-    \/**\n-     * Supplies a MethodVisitor to perform additional instrumentation.\n-     * @return A valid method visitor. If no instrumentation needed, must return <code>visitor<\/code> argument.\n-     *\/\n-    MethodVisitor methodVisitor(int access, String owner, String name, String desc, MethodVisitor visitor);\n-\n-    \/**\n-     * Called after all instrumentation is complete.\n-     * @throws Exception should some\n-     *\/\n-    void instrumentationComplete() throws Exception;\n-\n-    \/**\n-     * For the instrumented code to work independently (i.e. without adding additional classes  to the classpath), some\n-     * classes can be \"implanted\" into the instrumented code.\n-     * @return Path containing the classes to be implanted. Must be in a form which can be added to Java classpath.\n-     *\/\n-    \/\/TODO perhaps this can return a list of classes to be implanted\n-    Path runtime() throws Exception;\n-\n-    \/**\n-     * Name of a package which contains code, that will be called from the instrumented\n-     * code. Such package may need to be exported from a module.\n-     * @return package name\n-     *\/\n-    String collectorPackage();\n-}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InstrumentationPlugin.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -175,1 +175,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -186,1 +186,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -198,1 +198,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -210,1 +210,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -222,1 +222,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -234,1 +234,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -247,1 +247,1 @@\n-     * @return Access bit-mask of org.objectweb.asm.Opcodes constants.\n+     * @return Access bit-mask.\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/ClassCoverage.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -165,1 +165,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -177,1 +177,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -189,1 +189,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -201,1 +201,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -213,1 +213,1 @@\n-     * getAccess() method returns a bit-mask of org.objectweb.asm.Opcodes\n+     * getAccess() method returns a bit-mask\n@@ -226,1 +226,1 @@\n-     * @return Access bit-mask of org.objectweb.asm.Opcodes constants.\n+     * @return Access bit-mask.\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/MemberCoverage.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n@@ -49,1 +49,1 @@\n-public class FieldsPlugin implements InstrumentationPlugin, JCovSaver {\n+public class FieldsPlugin implements ASMInstrumentationPlugin, JCovSaver {\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/FieldsPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n@@ -35,1 +35,1 @@\n-public class TestPlugin implements InstrumentationPlugin {\n+public class TestPlugin implements ASMInstrumentationPlugin {\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/jreinstr\/TestPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}