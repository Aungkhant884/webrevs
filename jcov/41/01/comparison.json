{"files":[{"patch":"@@ -0,0 +1,1 @@\n+build\n","filename":"plugins\/coverage_reports\/.gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+# Additional JCov reports\n+\n+This module contains source code implementing varions code coverage reporting\n+aproaches.\n+\n+Currently implemented report formats:\n+1. Single-file html.\n+2. Text.\n+\n+Currently implemented reports:\n+1. Diff coverage report. See JDKReport for an example of usage. Next input needs to be provided: \n+   1. Coverage data in form of JCov file\n+   2. Diff file (only output of git diff has been tested so far)\n+   3. Source code\n+   \n","filename":"plugins\/coverage_reports\/README.md","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n-<project name=\"SimpleMethodsANCFilter\" default=\"jar\" basedir=\".\">\n+<project name=\"CoverageReports\" default=\"jar\" basedir=\".\">\n@@ -35,1 +35,1 @@\n-  <property name=\"jar\" location=\"${build}\/SimpleMethods.jar\"\/>\n+  <property name=\"jar\" location=\"${build}\/CoverageReports.jar\"\/>\n@@ -57,0 +57,3 @@\n+    <copy todir=\"${test.classes}\">\n+      <fileset dir=\"${test}\"\/>\n+    <\/copy>\n","filename":"plugins\/coverage_reports\/build.xml","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"plugins\/simple_methods_anc\/build.xml","status":"copied"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+\/**\n+ * There is a fixed number of items of some sort. Some of those items can be covered.\n+ * @see CoveredLineRange\n+ *\/\n+public class Coverage {\n+    public static final Coverage COVERED = new Coverage(1,1);\n+    public static final Coverage UNCOVERED = new Coverage(0, 1);\n+    private final int covered;\n+    private final int total;\n+\n+    public Coverage(int covered, int total) {\n+        this.covered = covered;\n+        this.total = total;\n+    }\n+\n+    public int covered() {\n+        return covered;\n+    }\n+\n+    public int total() {\n+        return total;\n+    }\n+\n+    public static Coverage sum(Collection<Coverage> coverages) {\n+        int covered = 0, total = 0;\n+        for (Coverage one : coverages) {\n+            covered += one.covered();\n+            total += one.total();\n+        }\n+        return new Coverage(covered, total);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        Coverage coverage = (Coverage) o;\n+        return covered == coverage.covered && total == coverage.total;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(covered, total);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return covered + \"\/\" + total;\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/Coverage.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report;\n+\n+\/**\n+ * The assumption is that some coverage information can be linked to a portion of source code.\n+ * @see Coverage\n+ * @see FileCoverage\n+ *\/\n+public class CoveredLineRange extends LineRange {\n+    private final Coverage coverage;\n+    public CoveredLineRange(int first, int last, Coverage coverage) {\n+        super(first, last);\n+        this.coverage = coverage;\n+    }\n+\n+    public Coverage coverage() {\n+        return coverage;\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/CoveredLineRange.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report;\n+\n+import java.util.List;\n+\n+\/**\n+ * Presents a coverage of a file in terms of line ranges.\n+ * @see LineRange\n+ * @see CoveredLineRange\n+ * @see Coverage\n+ *\/\n+public interface FileCoverage {\n+    List<CoveredLineRange> ranges(String file);\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/FileCoverage.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+\/**\n+ * Used to define for which files, within a hierarchy, to generate report for.\n+ *\/\n+public class FileSet {\n+    private final Set<String> files;\n+    private final Set<String> folders;\n+    public FileSet(Set<String> files) {\n+        this.files = files;\n+        folders = new HashSet<>();\n+        folders.add(\"\");\n+        files.forEach(f -> {\n+            var parts = f.split(\"\/\");\n+            var path = \"\";\n+            for (int i = 0; i < parts.length - 1; i++) {\n+                path += (path.isEmpty() ? \"\" : \"\/\") + parts[i];\n+                folders.add(path);\n+            }\n+        });\n+    }\n+\n+    public Set<String> files() {\n+        return files;\n+    }\n+\n+    public Set<String> files(String parent) {\n+        return files.stream().filter(f ->\n+                parent.isEmpty() && f.indexOf('\/') < 0 ||\n+                f.startsWith(parent + \"\/\") &&\n+                f.substring(parent.length() + 1).indexOf('\/') < 0).collect(toSet());\n+    }\n+\n+    public Set<String> folders(String parent) {\n+        if (parent.isEmpty()) return folders.stream().filter(f -> !f.isEmpty() && f.indexOf('\/') < 0).collect(toSet());\n+        else return folders.stream().filter(f -> f.startsWith(parent + \"\/\") &&\n+                f.substring(parent.length() + 1).indexOf('\/') < 0).collect(toSet());\n+    }\n+\n+    public boolean isFile(String file) {return files.contains(file);}\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/FileSet.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report;\n+\n+import java.util.Objects;\n+\n+\/**\n+ * Range of a file lines. Used in filters and in coverage.\n+ *\/\n+public class LineRange implements Comparable<LineRange> {\n+    private final int first;\n+    private final int last;\n+\n+    public LineRange(int first, int last) {\n+        this.first = first;\n+        this.last = last;\n+    }\n+\n+    public int first() {\n+        return first;\n+    }\n+\n+    public int last() {\n+        return last;\n+    }\n+\n+    public int compare(int line) {\n+        if (line < first) return -1;\n+        else if (line > last) return 1;\n+        return 0;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        LineRange range = (LineRange) o;\n+        return first == range.first && last == range.last;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(first, last);\n+    }\n+\n+    @Override\n+    public int compareTo(LineRange o) {\n+        return Integer.compare(first, o.first);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"[\" + first + \",\" + last + \"]\";\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/LineRange.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.filter;\n+\n+import openjdk.codetools.jcov.report.LineRange;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+\/**\n+ * An implementation of the source filter which is coming from parsing git diff.\n+ * @see #parseDiff(Path)\n+ *\/\n+public class GitDiffFilter implements SourceFileFilter {\n+    private final Map<String, List<LineRange>> lines;\n+\n+    private GitDiffFilter(Map<String, List<LineRange>> lines) {\n+        this.lines = lines;\n+    }\n+\n+    \/**\n+     * Parses git diff into a source filter. The diff is supposed to be produced with <code>-U0<\/code> option.\n+     * @param diffFile the File to parse\n+     * @return\n+     * @throws IOException\n+     *\/\n+    public static SourceFileFilter parseDiff(Path diffFile) throws IOException {\n+        Map<String, List<LineRange>> lines = new HashMap<>();\n+        try(BufferedReader in = Files.newBufferedReader(diffFile)) {\n+            String line = null;\n+            while(true) {\n+                if (line == null)\n+                    while ((line = in.readLine()) != null && !line.startsWith(\"+++ b\/\")) {}\n+                if (line == null) break;;\n+                String fileName = line.substring(\"+++ b\/\".length());\n+                if (fileName.endsWith(\".java\")) {\n+                    List<LineRange> fragments = new ArrayList<>();\n+                    String lineNumbers = in.readLine();\n+                    while (lineNumbers != null && !lineNumbers.startsWith(\"+++ b\/\")) {\n+                        lineNumbers = lineNumbers.substring(\"@@ \".length());\n+                        lineNumbers = lineNumbers.substring(lineNumbers.indexOf(\" +\") + 2, lineNumbers.indexOf(\" @@\"));\n+                        int commaIndex = lineNumbers.indexOf(',');\n+                        int firstLine, lastLine;\n+                        if (commaIndex > -1) {\n+                            firstLine = Integer.parseInt(lineNumbers.substring(0, commaIndex));\n+                            lastLine = firstLine + Integer.parseInt(lineNumbers.substring(commaIndex + 1)) - 1;\n+                        } else {\n+                            lastLine = firstLine = Integer.parseInt(lineNumbers);\n+                        }\n+                        fragments.add(new LineRange(firstLine, lastLine));\n+                        while ((lineNumbers = in.readLine()) != null && !lineNumbers.startsWith(\"@@ \")\n+                                && !lineNumbers.startsWith(\"+++ b\/\")) {\n+                        }\n+                        if (lineNumbers == null) break;\n+                        if (lineNumbers.startsWith(\"+++ b\/\")) {\n+                            line = lineNumbers;\n+                            continue;\n+                        }\n+                    }\n+                    lines.put(fileName, fragments);\n+                    if (lineNumbers == null) break;\n+                } else line = null;\n+            }\n+        }\n+        return new GitDiffFilter(lines);\n+    }\n+\n+    @Override\n+    public Set<String> files() {\n+        return lines.keySet();\n+    }\n+\n+    @Override\n+    public List<LineRange> ranges(String file) {\n+        return lines.get(file);\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/filter\/GitDiffFilter.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+package openjdk.codetools.jcov.report.filter;\n+\n+import java.util.Set;\n+\n+\/**\n+ * A source filter which is also aware of what files need to be included.\n+ *\/\n+public interface SourceFileFilter extends SourceFilter {\n+    Set<String> files();\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/filter\/SourceFileFilter.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.filter;\n+\n+import openjdk.codetools.jcov.report.LineRange;\n+\n+import java.util.List;\n+\n+\/**\n+ * Filters a source file by providing a list of line ranges which needs not be included.\n+ * @see LineRange\n+ *\/\n+public interface SourceFilter {\n+\n+    \/**\n+     * Line ranges to be included. Any implementaiton is assumed to return a list of line that is ordered\n+     * by beginning line.\n+     * @param file\n+     * @return\n+     *\/\n+    List<LineRange> ranges(String file);\n+\n+    default boolean includes(String file, int line) {\n+        return ranges(file).stream().anyMatch(r -> r.compare(line) == 0);\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/filter\/SourceFilter.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.jcov;\n+\n+import com.sun.tdk.jcov.instrument.DataClass;\n+import com.sun.tdk.jcov.instrument.DataMethod;\n+import com.sun.tdk.jcov.instrument.DataMethodWithBlocks;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.instrument.LocationRef;\n+import com.sun.tdk.jcov.report.MethodCoverage;\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.FileCoverage;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.Math.max;\n+\n+\/**\n+ * This uses JCov output to determine line coverage of classes\n+ *\/\n+public class JCovLineCoverage implements FileCoverage {\n+    private final DataRoot root;\n+    private final Map<String, List<CoveredLineRange>> cache = new HashMap<>();\n+\n+    public JCovLineCoverage(DataRoot root) {\n+        this.root = root;\n+    }\n+\n+    @Override\n+    public List<CoveredLineRange> ranges(String file) {\n+        var result = new ArrayList<CoveredLineRange>();\n+        String className = file.substring(0, file.length() - \".java\".length());\n+        root.getClasses().stream()\n+                .filter(dc -> dc.getFullname().equals(className) || dc.getFullname().startsWith(className + \"$\"))\n+                .forEach(dc -> result.addAll(ranges(dc)));\n+        Collections.sort(result);\n+        return result;\n+    }\n+    private List<CoveredLineRange> ranges(DataClass cls) {\n+        var result = new HashMap<Integer, Boolean>();\n+        for (DataMethod m : cls.getMethods()) if (m instanceof DataMethodWithBlocks) {\n+            var lc = new MethodCoverage(m, true).getLineCoverage();\n+\/\/            boolean methodCovered = false;\n+            for (int i = (int)lc.firstLine(); i <= lc.lastLine(); i++) {\n+                if (lc.isCode(i)) {\n+                    if (result.get(i) == null || !result.get(i).booleanValue())\n+                        result.put(i, lc.isLineCovered(i));\n+\/\/                    methodCovered |= lc.isLineCovered(i);\n+                }\n+            }\n+            \/\/mmm but also the method declaration\n+            \/\/this is unreliable\n+            \/\/var lineTable = m.getLineTable().stream().sorted(Comparator.comparingInt(l -> l.bci))\n+            \/\/        .collect(toList());\n+            \/\/int methodLine = getLine(lineTable, 0) - 1; \/\/can not do better without code parsing\n+            \/\/if (methodLine >= 0) result.put(methodLine, methodCovered);\n+        }\n+        \/\/below is an unsuccessful attempt to replicate the content of getLineCovreage\n+        \/\/keep it around, return to it later and figure out what is wrong\n+        \/\/currently the whole code marked as covered because of fallthough in clinit which\n+        \/\/starts in the beginning and ends in the end of the file\n+\/\/        for (DataMethod m : cls.getMethods()) if (m instanceof DataMethodWithBlocks) {\n+\/\/            var added = new HashMap<DataBlock, Item>();\n+\/\/            var items = new ArrayList<Item>();\n+\/\/            for (DataBlock db : m.getBlocks()) {\n+\/\/                if (db instanceof DataBlockTarget) {\n+\/\/                    continue;\n+\/\/                }\n+\/\/                Item item = new Item(db, db.getCount() > 0);\n+\/\/\n+\/\/                boolean isNew = true;\n+\/\/                for (DataBlock d : added.keySet()) {\n+\/\/                    if (d.startBCI() == db.startBCI()) {\n+\/\/                        if (db.getCount() > 0) added.get(d).cover();\n+\/\/                        isNew = false;\n+\/\/                        break;\n+\/\/                    }\n+\/\/                }\n+\/\/                if (isNew) {\n+\/\/                    added.put(db, item);\n+\/\/                    items.add(item);\n+\/\/                }\n+\/\/            }\n+\/\/            for (DataBlock db : m.getBranchTargets()) {\n+\/\/                Item item = new Item(db, db.getCount() > 0);\n+\/\/\n+\/\/                boolean isNew = true;\n+\/\/                for (DataBlock d : added.keySet()) {\n+\/\/                    if (d.startBCI() == db.startBCI()) {\n+\/\/                        if (db.getCount() > 0) added.get(d).cover();\n+\/\/                        isNew = false;\n+\/\/                        break;\n+\/\/                    }\n+\/\/                }\n+\/\/                if (isNew) {\n+\/\/                    added.put(db, item);\n+\/\/                    items.add(item);\n+\/\/                }\n+\/\/            }\n+\/\/            var lineTable = m.getLineTable().stream().sorted(Comparator.comparingInt(l -> l.bci))\n+\/\/                    .collect(Collectors.toList());\n+\/\/            for (var item : items) {\n+\/\/                int startLine = getLine(lineTable, item.startBCI());\n+\/\/                int endLine = getLine(lineTable, min(item.endBCI(), ((DataMethodWithBlocks) m).getBytecodeLength()));\n+\/\/                    for (int l = startLine; l <= endLine; l++) {\n+\/\/                        var lineCovered = result.containsKey(l) && result.get(l);\n+\/\/                        if (!lineCovered) result.put(l, item.covered);\n+\/\/                    }\n+\/\/            }\n+\/\/        }\n+        return result.entrySet().stream()\n+                .sorted(Comparator.comparingInt(Map.Entry::getKey))\n+                .map(le -> new CoveredLineRange(le.getKey(), le.getKey(), le.getValue() ? Coverage.COVERED : Coverage.UNCOVERED))\n+                .collect(Collectors.toList());\n+    }\n+\/\/    private static int getLine(List<DataMethod.LineEntry> lineTable, int bci) {\n+\/\/        int maxLine = 0;\n+\/\/        for (var le : lineTable) {\n+\/\/            if (le.bci > bci) return maxLine;\n+\/\/            else maxLine = max(maxLine, le.line);\n+\/\/        }\n+\/\/        return maxLine;\n+\/\/    }\n+\/\/    private static class Item {\n+\/\/        private final LocationRef loc;\n+\/\/        private volatile boolean covered;\n+\/\/\n+\/\/        private Item(LocationRef loc, boolean covered) {\n+\/\/            this.loc = loc;\n+\/\/            this.covered = covered;\n+\/\/        }\n+\/\/        public void cover() {this.covered = true;}\n+\/\/\n+\/\/        public int startBCI() {return loc.startBCI();}\n+\/\/        public int endBCI() {return loc.endBCI();}\n+\/\/    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/jcov\/JCovLineCoverage.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.source;\n+\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.lang.Math.max;\n+\n+\/**\n+ * Adds \"context lines\" to a filter. See <code>man diff<\/code>\n+ *\/\n+public class ContextFilter implements SourceFilter {\n+    private final SourceFilter filter;\n+    private final int contextLines;\n+\n+    public ContextFilter(SourceFilter filter, int context) {\n+        this.filter = filter;\n+        contextLines = context;\n+    }\n+\n+    @Override\n+    public List<LineRange> ranges(String file) {\n+        var ranges = new ArrayList<LineRange>();\n+        var origRanges = filter.ranges(file);\n+        LineRange last = null;\n+        int lastEnded = -1;\n+        for (int i = 0; i < origRanges.size(); i++) {\n+            if (last == null)\n+                last = expandRange(origRanges, i);\n+            else {\n+                if (last.last() < origRanges.get(i).first() - contextLines) {\n+                    ranges.add(last);\n+                    last = expandRange(origRanges, i);\n+                } else\n+                    last = new LineRange(last.first(),\n+                            origRanges.get(i).last() + contextLines);\n+            }\n+        }\n+        ranges.add(last);\n+        return ranges;\n+    }\n+\n+    private LineRange expandRange(List<LineRange> origRanges, int i) {\n+        return new LineRange(\n+                max(origRanges.get(i).first() - contextLines, 1),\n+                origRanges.get(i).last() + contextLines);\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/source\/ContextFilter.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+package openjdk.codetools.jcov.report.source;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+\/**\n+ * An abstraction for source hierarchy.\n+ *\/\n+public interface SourceHierarchy {\n+    \/**\n+     * Delivers the file source code.\n+     * @param file - file name within the source hierarchy.\n+     *\/\n+    List<String> readFile(String file) throws IOException;\n+\n+    \/**\n+     * Maps a file name (as present in source) to a class file name.\n+     * Example: <code>src\/main\/java\/my\/company\/product\/Main.hava<\/code> to <code>my\/company\/product\/Main.hava<\/code>.\n+     * @param file - file name within the source hierarchy.\n+     *\/\n+    String toClass(String file);\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/source\/SourceHierarchy.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.source;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+\n+\/**\n+ * When the source code is available locally.\n+ *\/\n+public class SourcePath implements SourceHierarchy {\n+    private final Map<Path, List<Path>> roots;\n+\n+    \/**\n+     * Single source repository, Single class hierarchy.\n+     *\/\n+    public SourcePath(Path srcRoot, Path classRoot) {\n+        this(srcRoot, List.of(classRoot));\n+    }\n+\n+    \/**\n+     * Single source repository, multiple class hierarchies.\n+     *\/\n+    public SourcePath(Path srcRoot, List<Path> classRoots) {\n+        this(Map.of(srcRoot, classRoots));\n+    }\n+\n+    \/**\n+     * There could be multiple repositories which multiple class hierarchies within each.\n+     *\/\n+    public SourcePath(Map<Path, List<Path>> roots) {\n+        this.roots = roots;\n+    }\n+\n+    protected Path resolveFile(Path root, String file) {\n+        return root.resolve(file);\n+    }\n+\n+    @Override\n+    public List<String> readFile(String file) throws IOException {\n+        Path res;\n+        for (var root : roots.keySet()) {\n+            res = resolveFile(root, file);\n+            if (Files.exists(res)) return Files.readAllLines(res);\n+        }\n+        return null;\n+    }\n+\n+    public Path resolveClass(String file) {\n+        Path res;\n+        for (var sourceRoot : roots.keySet()) {\n+            for (var classRoot : roots.get(sourceRoot)) {\n+                res = resolveFile(classRoot, file);\n+                if (Files.exists(res)) return res;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public String toClass(String file) {\n+        for (var sourceRoot : roots.keySet()) {\n+            var path = sourceRoot.resolve(file);\n+            if (Files.exists(path))  {\n+                for (var classRoot : roots.get(sourceRoot))\n+                    if (path.startsWith(classRoot))\n+                        return classRoot.relativize(path).toString();\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/source\/SourcePath.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.FileCoverage;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import openjdk.codetools.jcov.report.source.SourceHierarchy;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+\n+public class CoverageHierarchy {\n+    private final Map<String, Coverage> data;\n+    private final Map<String, Map<Integer, CoveredLineRange>> lineCoverage;\n+    private final FileCoverage coverage;\n+    private final SourceFilter filter;\n+    private final SourceHierarchy source;\n+\n+    public CoverageHierarchy(Collection<String> files, SourceHierarchy source, FileCoverage coverage, SourceFilter filter) {\n+        data = new HashMap<>();\n+        lineCoverage = new HashMap<>();\n+        this.source = source;\n+        data.put(\"\", null);\n+        for (String file : files) {\n+            lineCoverage.put(file, null);\n+            var components = file.split(\"\/\");\n+            String path = \"\";\n+            for (var component : file.split(\"\/\")) {\n+                data.put(path += (path.isEmpty() ? \"\" : \"\/\") + component, null);\n+            }\n+        }\n+        this.coverage = coverage;\n+        this.filter = filter;\n+    }\n+\n+    public Map<Integer, CoveredLineRange> getLineRanges(String file) {\n+        if (lineCoverage.containsKey(file) && lineCoverage.get(file) != null)\n+            return lineCoverage.get(file);\n+        String className = source.toClass(file);\n+        if (className == null) return null;\n+        var coverage = this.coverage.ranges(className);\n+        var coverageIt = coverage.iterator();\n+        CoveredLineRange lastCoverageRange = null;\n+        var fileCoverage = new HashMap<Integer, CoveredLineRange>();\n+        var used = new HashSet<CoveredLineRange>();\n+        for (var range : filter.ranges(file)) {\n+            for (int line = range.first(); line <= range.last() ; line++) {\n+                if (lastCoverageRange == null || lastCoverageRange.last() < line) {\n+                    while (coverageIt.hasNext() && (lastCoverageRange == null || lastCoverageRange.last() < line))\n+                        lastCoverageRange = coverageIt.next();\n+                }\n+                if (lastCoverageRange != null && lastCoverageRange.last() >= line && lastCoverageRange.first() <= line) {\n+                    fileCoverage.put(line, lastCoverageRange);\n+                    used.add(lastCoverageRange);\n+                }\n+            }\n+        }\n+        data.put(file, Coverage.sum(used.stream().map(CoveredLineRange::coverage).collect(Collectors.toList())));\n+        lineCoverage.put(file, fileCoverage);\n+        return fileCoverage;\n+    }\n+\n+    public Coverage get(String fileOrDir) {\n+        var res = data.get(fileOrDir);\n+        if (res != null) return res;\n+        if (lineCoverage.containsKey(fileOrDir)) {\n+            return getLineRanges(fileOrDir) == null ? null : data.get(fileOrDir);\n+        }\n+        int[] coverage = {0, 0};\n+        boolean[] someCoverageFound = {false};\n+        data.entrySet().stream()\n+                .filter(e -> e.getKey().startsWith(fileOrDir + \"\/\") && e.getKey().substring(fileOrDir.length() + 1).indexOf('\/') < 0 ||\n+                        fileOrDir.isEmpty() && !e.getKey().isEmpty() && e.getKey().indexOf('\/') < 0)\n+                .forEach(e -> {\n+                    var c = (e.getValue() == null) ? get(e.getKey()) : e.getValue();\n+                    if (c != null) {\n+                        someCoverageFound[0] = true;\n+                        coverage[0] += c.covered();\n+                        coverage[1] += c.total();\n+                    }\n+                });\n+        if (someCoverageFound[0]) {\n+            res = new Coverage(coverage[0], coverage[1]);\n+            data.put(fileOrDir, res);\n+            return res;\n+        } else return null;\n+    }\n+\n+\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/view\/CoverageHierarchy.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import openjdk.codetools.jcov.report.source.SourceHierarchy;\n+\n+import java.util.stream.Collectors;\n+\n+abstract class HightlightFilteredReport {\n+    private final FileSet files;\n+    private final CoverageHierarchy coverage;\n+    private final SourceHierarchy source;\n+    private final SourceFilter highlight;\n+    private final SourceFilter include;\n+\n+    protected HightlightFilteredReport(SourceHierarchy source, FileSet files, CoverageHierarchy coverage,\n+                                       SourceFilter highlight, SourceFilter include) {\n+        this.files = files;\n+        this.coverage = coverage;\n+        this.source = source;\n+        this.highlight = highlight;\n+        this.include = include;\n+    }\n+\n+    protected void toc(TOCOut out, String s) throws Exception {\n+        Coverage cov = coverage.get(s);\n+        if (cov != null) {\n+            out.printFolderLine(s.isEmpty() ? \"\" : s, cov);\n+            for (var f : files.folders(s).stream().sorted().collect(Collectors.toList())) {\n+                toc(out, f);\n+            }\n+            for (var f : files.files(s).stream().sorted().collect(Collectors.toList())) {\n+                out.printFileLine(f);\n+            }\n+        }\n+    }\n+\n+    protected void code(FileOut out, String s) throws Exception {\n+        Coverage cov = coverage.get(s);\n+        if (cov != null) {\n+            out.startDir(s, cov);\n+            for (var f : files.folders(s).stream().sorted().collect(Collectors.toList())) {\n+                code(out, f);\n+            }\n+            for (var file : files.files(s).stream().sorted().collect(Collectors.toList())) {\n+                var fileCov = coverage.getLineRanges(file);\n+                if (fileCov != null) {\n+                    out.startFile(file);\n+                    var source = this.source.readFile(file);\n+                    var highlightRanges = highlight.ranges(file).iterator();\n+                    var highlightRange = highlightRanges.next();\n+                    for (var range : include.ranges(file)) {\n+                        out.startLineRange(range);\n+                        for (int line = range.first() - 1; line < range.last() && line < source.size(); line++) {\n+                            while (highlightRange != null && highlightRange.compare(line) > 0)\n+                                highlightRange = highlightRanges.hasNext() ? highlightRanges.next() : null;\n+                            boolean highlight = highlightRange != null && highlightRange.compare(line + 1) == 0;\n+                            out.printSourceLine(line, source.get(line), highlight,\n+                                    fileCov.containsKey(line + 1) ? fileCov.get(line + 1).coverage() : null);\n+                        }\n+                        out.endLineRange(range);\n+                    }\n+                    out.endFile(s);\n+                }\n+            }\n+        }\n+    }\n+\n+    protected CoverageHierarchy coverage() {\n+        return coverage;\n+    }\n+\n+    protected interface TOCOut {\n+        void printFileLine(String f) throws Exception;\n+        void printFolderLine(String s, Coverage cov) throws Exception;\n+    }\n+    protected interface FileOut {\n+        void startFile(String s) throws Exception;\n+        void startLineRange(LineRange range) throws Exception;\n+        void printSourceLine(int line, String s, boolean highlight, Coverage coverage) throws Exception;\n+        void endLineRange(LineRange range) throws Exception;\n+        void endFile(String s) throws Exception;\n+        void startDir(String s, Coverage cov) throws Exception;\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/view\/HightlightFilteredReport.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.filter.GitDiffFilter;\n+import openjdk.codetools.jcov.report.jcov.JCovLineCoverage;\n+import openjdk.codetools.jcov.report.source.ContextFilter;\n+import openjdk.codetools.jcov.report.source.SourcePath;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+\/**\n+ * This is a utility class to generate report for openjdk.\n+ *\/\n+public class JDKReport {\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            var coverage = new JCovLineCoverage(DataRoot.read(args[0]));\n+            var source = jdkSource(List.of(Path.of(args[1])));\n+            var diff = GitDiffFilter.parseDiff(Path.of(args[2])\/*, source.roots(List.of(Path.of(args[1])))*\/);\n+            String reportFile = args[3];\n+            boolean isHTML = reportFile.endsWith(\"html\");\n+            String title = args.length >= 5 ? args[4] : \"\";\n+            String header = args.length >= 6 ? args[5] : \"\";\n+            if (isHTML)\n+                new SingleHTMLReport(source, new FileSet(diff.files()), coverage,\n+                        title, header,\n+                        diff, new ContextFilter(diff, 10))\n+                        .report(Path.of(reportFile));\n+            else\n+                new TextReport(source, new FileSet(diff.files()), coverage, header, diff)\n+                        .report(Path.of(reportFile));\n+        } catch (Throwable e) {\n+            System.out.println(\"Usage: java ... openjdk.codetools.jcov.report.view.JDKReport \\\\\");\n+            System.out.println(\"    <JCov coderage file produced for the tip of the repository> \\\\\");\n+            System.out.println(\"    <JDK source hierarchy> \\\\\");\n+            System.out.println(\"    <git diff file from the tip to a revision in the past produced with -U0 option> \\\\\");\n+            System.out.println(\"    <output file> \\\\\");\n+            System.out.println(\"    <report title> <report header>\");\n+            throw e;\n+        }\n+    }\n+\n+    private static SourcePath jdkSource(List<Path> repos) {\n+        \/\/TODO add platform specific - one platform or many?\n+        \/\/TODO - what about closed?\n+        return new SourcePath(repos.stream().collect(Collectors.toMap(\n+                repo -> repo,\n+                repo -> {\n+                    try {\n+                        return Files.list(repo.resolve(\"src\")).map(module -> module.resolve(\"share\/classes\")).\n+                                filter(Files::exists).collect(Collectors.toList());\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                })));\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/view\/JDKReport.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.FileCoverage;\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import openjdk.codetools.jcov.report.source.SourceHierarchy;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/**\n+ * Implements a hierarchical report in a single html file.\n+ *\/\n+public class SingleHTMLReport extends HightlightFilteredReport {\n+\n+    private String title;\n+    private String header;\n+\n+    public SingleHTMLReport(SourceHierarchy source, FileSet files, FileCoverage coverage,\n+                            String title, String header,\n+                            SourceFilter highlight, SourceFilter include) {\n+        \/\/TODO a builder\n+        super(source, files, new CoverageHierarchy(files.files(), source, coverage, highlight),\n+                highlight, include);\n+        this.title = title;\n+        this.header = header;\n+    }\n+\n+    public void report(Path dest) throws Exception {\n+        try (BufferedWriter out = Files.newBufferedWriter(dest)) {\n+            var rout = new HtmlOut(out);\n+            out.write(\"<html><head>\"); out.newLine();\n+            out.write(\"<title>\" + title + \"<\/title>\"); out.newLine();\n+            out.write(\"<style>\\n\" +\n+                    \".context {\\n\" +\n+                    \"  font-weight: lighter;\\n\" +\n+                    \"}\\n\" +\n+                    \".highlight {\\n\" +\n+                    \"  font-weight: bold;\\n\" +\n+                    \"}\\n\" +\n+                    \".covered {\\n\" +\n+                    \"  font-weight: bold;\\n\" +\n+                    \"  background-color: palegreen;\\n\" +\n+                    \"}\\n\" +\n+                    \".uncovered {\\n\" +\n+                    \"  font-weight: bold;\\n\" +\n+                    \"  background-color: salmon;\\n\" +\n+                    \"}\\n\" +\n+                    \".filename {\\n\" +\n+                    \"  font-weight: bold;\\n\" +\n+                    \"  font-size: larger;\\n\" +\n+                    \"}\\n\" +\n+                    \"<\/style>\"); out.newLine();\n+            out.write(\"<\/head><body>\\n\"); out.newLine();\n+            out.write(header + \"\\n\"); out.newLine();\n+            out.write(\"<table><tbody>\"); out.newLine();\n+            toc(rout, \"\");\n+            out.write(\"<\/tbody><\/table>\"); out.newLine();\n+            out.write(\"<hr>\"); out.newLine();\n+            code(rout, \"\");\n+            out.write(\"<body><\/html>\");out.newLine();\n+        }\n+    }\n+\n+    private class HtmlOut implements TOCOut, FileOut {\n+        private final BufferedWriter out;\n+\n+        private HtmlOut(BufferedWriter out) {\n+            this.out = out;\n+        }\n+\n+        @Override\n+        public void printFileLine(String s) throws IOException {\n+            var cov = coverage().get(s);\n+            out.write(\"<tr><td><a href=\\\"#\" + s.replace('\/', '_') + \"\\\">\" + s + \"<\/a><\/td><td>\" +\n+                    cov + \"<\/td><\/tr>\");\n+            out.newLine();\n+        }\n+\n+        @Override\n+        public void printFolderLine(String s, Coverage cov) throws IOException {\n+            if (s.isEmpty()) s = \"total\";\n+            out.write(\"<tr><td><a href=\\\"#\" + s.replace('\/', '_') + \"\\\">\" + s + \"<\/a><\/td><td>\" +\n+                    cov + \"<\/td><\/tr>\");\n+            out.newLine();\n+        }\n+\n+        @Override\n+        public void startFile(String file) throws IOException {\n+            out.write(\"<hr\/>\"); out.newLine();\n+            out.write(\"<a class=\\\"filename\\\" id=\\\"\" +\n+                    file.replace('\/', '_') + \"\\\">\" + file + \":\" +\n+                    coverage().get(file) + \"<\/a><\/br>\"); out.newLine();\n+        }\n+\n+        @Override\n+        public void startLineRange(LineRange range) throws IOException {\n+            out.write(\"<pre>\"); out.newLine();\n+        }\n+\n+        @Override\n+        public void printSourceLine(int lineNo, String line, boolean highlight, Coverage coverage) throws IOException {\n+            out.write(\"<a\");\n+            if (coverage != null) {\n+                if (coverage.covered() > 0)\n+                    out.write(\" class=\\\"covered\\\"\");\n+                else\n+                    out.write(\" class=\\\"uncovered\\\"\");\n+            } else if (highlight) {\n+                out.write(\" class=\\\"highlight\\\"\");\n+            } else\n+                out.write(\" class=\\\"context\\\"\");\n+            out.write(\">\");\n+            out.write((lineNo + 1) + \": \");\n+            out.write(line.replaceAll(\"<\/?\\\\s*pre\\\\s*>\", \"\"));\n+            out.write(\"<\/a>\");\n+            out.newLine();\n+        }\n+\n+        @Override\n+        public void endLineRange(LineRange range) throws IOException {\n+            out.write(\"<\/pre>\"); out.newLine();\n+            out.write(\"<hr\/>\"); out.newLine();\n+        }\n+\n+        @Override\n+        public void endFile(String s) throws IOException {\n+        }\n+\n+        @Override\n+        public void startDir(String s, Coverage cov) throws IOException {\n+            if (s.isEmpty()) s = \"total\";\n+            out.write(\"<a id=\\\"\" + s.replace('\/', '_') + \"\\\"\/>\");\n+        }\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/view\/SingleHTMLReport.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.FileCoverage;\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import openjdk.codetools.jcov.report.source.SourceHierarchy;\n+\n+import java.io.BufferedWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/**\n+ * Implements a hierarchical report in a single text file.\n+ *\/\n+public class TextReport extends HightlightFilteredReport {\n+    private static final String SEPARATOR_LINE = \"-\".repeat(80);\n+    private String header;\n+\n+    public TextReport(SourceHierarchy source, FileSet files, FileCoverage coverage, String header, SourceFilter filter) {\n+        super(source, files, new CoverageHierarchy(files.files(), source, coverage, filter), filter, filter);\n+        this.header = header;\n+    }\n+\n+    public void report(Path dest) throws Exception {\n+        try (BufferedWriter out = Files.newBufferedWriter(dest)) {\n+            out.write(header); out.newLine(); out.newLine();\n+            super.toc(new TOCOut() {\n+                @Override\n+                public void printFileLine(String file) throws Exception {\n+                    out.write(file + \" \" + coverage().get(file));\n+                    out.newLine();\n+                }\n+\n+                @Override\n+                public void printFolderLine(String folder, Coverage cov) throws Exception {\n+                    out.write((folder.isEmpty() ? \"total\" : folder) + \" \" + cov);\n+                    out.newLine();\n+                }\n+            }, \"\");\n+            code(new FileOut() {\n+                @Override\n+                public void startFile(String file) throws Exception {\n+                    out.write(\"file:\" + file + \" \" + coverage().get(file));\n+                    out.newLine();\n+                    out.write(SEPARATOR_LINE);\n+                    out.newLine();\n+                }\n+\n+                @Override\n+                public void startLineRange(LineRange range) throws Exception {\n+                }\n+\n+                @Override\n+                public void printSourceLine(int line, String s, boolean highlight, Coverage coverage) throws Exception {\n+                    out.write((line + 1) + \":\" + (coverage == null ? \" \" : coverage.covered() > 0 ? \"+\" : \"-\") + s);\n+                    out.newLine();\n+                }\n+\n+                @Override\n+                public void endLineRange(LineRange range) throws Exception {\n+                    out.write(SEPARATOR_LINE);\n+                    out.newLine();\n+                }\n+\n+                @Override\n+                public void endFile(String s) throws Exception {\n+\n+                }\n+\n+                @Override\n+                public void startDir(String s, Coverage cov) throws Exception {\n+\n+                }\n+            }, \"\");\n+        }\n+    }\n+}\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/view\/TextReport.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.filter;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.jcov.JCovLoadTest;\n+import openjdk.codetools.jcov.report.source.SourcePath;\n+import openjdk.codetools.jcov.report.view.TextReport;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class GitDifFilterTest {\n+    public static Path cp(String resource) throws IOException {\n+        Path res = Files.createTempFile(resource.substring(resource.lastIndexOf('\/') + 1),\n+                resource.substring(resource.lastIndexOf('.') + 1));\n+        Files.createDirectories(res.getParent());\n+        try (var in = new BufferedReader(new InputStreamReader(JCovLoadTest.class.getResourceAsStream(resource)));\n+             var out = Files.newBufferedWriter(res)) {\n+            String line;\n+            while ((line = in.readLine()) != null) {\n+                out.write(line); out.newLine(); out.flush();\n+            }\n+        }\n+        return res;\n+    }\n+    public static Path cp(String dir, Map<String, String> resources) throws IOException {\n+        var res = Files.createTempDirectory(\"\");\n+        var root = res.resolve(dir);\n+        Files.createDirectories(root);\n+        for (var r : resources.keySet()) {\n+            Path file = root.resolve(resources.get(r));\n+            Files.createDirectories(file.getParent());\n+            try (var in = new BufferedReader(new InputStreamReader(JCovLoadTest.class.getResourceAsStream(r)));\n+                 var out = Files.newBufferedWriter(file)) {\n+                String line;\n+                while ((line = in.readLine()) != null) {\n+                    out.write(line); out.newLine(); out.flush();\n+                }\n+            }\n+        }\n+        return res;\n+    }\n+    static SourceFilter filter;\n+    @BeforeClass\n+    static void init() throws IOException {\n+        String pkg = \"\/\" + GitDifFilterTest.class.getPackageName().replace('.', '\/') + \"\/\";\n+        filter = GitDiffFilter.parseDiff(cp(pkg + \"negative_array_size.diff\")\/*, Set.of(\"src\")*\/);\n+    }\n+    @Test\n+    void basic() {\n+        assertTrue(filter.includes(\"src\/JavaObjectInputStreamAccess.java\", 37));\n+        var oisRanges = filter.ranges(\"src\/ObjectInputStream.java\");\n+        assertEquals(oisRanges.get(oisRanges.size() - 1).first(), 2141);\n+        assertEquals(oisRanges.get(oisRanges.size() - 1).last(), 2143);\n+    }\n+    @Test\n+    void report() throws Exception {\n+        String pkg = \"\/\" + GitDifFilterTest.class.getPackageName().replace('.', '\/') + \"\/\";\n+        Path src = cp(\"src\", Map.of(\n+                pkg + \"JavaObjectInputStreamAccess.java.txt\", \"JavaObjectInputStreamAccess.java\",\n+                pkg + \"ObjectInputStream.java.txt\", \"ObjectInputStream.java\"));\n+        var files = new FileSet(Set.of(\"src\/JavaObjectInputStreamAccess.java\", \"src\/ObjectInputStream.java\"));\n+        Path report = Files.createTempFile(\"report\", \".txt\");\n+        new TextReport(new SourcePath(src, src.resolve(\"src\")),\n+                files,\n+                file -> {\n+                    var res = new ArrayList<CoveredLineRange>();\n+                    var line = 0;\n+                    var chunkSize = 1;\n+                    while (line < 10000) {\n+                        res.add(new CoveredLineRange(line, line + chunkSize - 1, Coverage.UNCOVERED));\n+                        line += chunkSize;\n+                        res.add(new CoveredLineRange(line, line + chunkSize - 1, Coverage.COVERED));\n+                        line += chunkSize;\n+                        line += chunkSize;\n+                    }\n+                    return res;\n+                },\n+                \"ObjectInputStream coverage\",\n+                filter).report(report);\n+        List<String> reportLines = Files.readAllLines(report);\n+        assertTrue(reportLines.contains(\"src\/ObjectInputStream.java 1\/2\"));\n+        assertTrue(reportLines.contains(\"2142:-            throw new StreamCorruptedException(\\\"Array length is negative\\\");\"));\n+    }\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/filter\/GitDifFilterTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.access;\n+\n+import java.io.ObjectStreamException;\n+import java.io.ObjectInputStream;\n+\n+\/**\n+ * Interface to specify methods for accessing {@code ObjectInputStream}.\n+ *\/\n+@FunctionalInterface\n+public interface JavaObjectInputStreamAccess {\n+    void checkArray(ObjectInputStream ois, Class<?> arrayType, int arrayLength)\n+        throws ObjectStreamException;\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/filter\/JavaObjectInputStreamAccess.java.txt","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,4174 @@\n+\/*\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+import java.io.ObjectInputFilter.Config;\n+import java.io.ObjectStreamClass.RecordSupport;\n+import java.lang.System.Logger;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.Proxy;\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import jdk.internal.access.SharedSecrets;\n+import jdk.internal.event.DeserializationEvent;\n+import jdk.internal.misc.Unsafe;\n+import jdk.internal.util.ByteArray;\n+import sun.reflect.misc.ReflectUtil;\n+import sun.security.action.GetBooleanAction;\n+import sun.security.action.GetIntegerAction;\n+\n+\/**\n+ * An ObjectInputStream deserializes primitive data and objects previously\n+ * written using an ObjectOutputStream.\n+ *\n+ * <p><strong>Warning: Deserialization of untrusted data is inherently dangerous\n+ * and should be avoided. Untrusted data should be carefully validated according to the\n+ * \"Serialization and Deserialization\" section of the\n+ * {@extLink secure_coding_guidelines_javase Secure Coding Guidelines for Java SE}.\n+ * {@extLink serialization_filter_guide Serialization Filtering} describes best\n+ * practices for defensive use of serial filters.\n+ * <\/strong><\/p>\n+ *\n+ * <p>The key to disabling deserialization attacks is to prevent instances of\n+ * arbitrary classes from being deserialized, thereby preventing the direct or\n+ * indirect execution of their methods.\n+ * {@link ObjectInputFilter} describes how to use filters and\n+ * {@link ObjectInputFilter.Config} describes how to configure the filter and filter factory.\n+ * Each stream has an optional deserialization filter\n+ * to check the classes and resource limits during deserialization.\n+ * The JVM-wide filter factory ensures that a filter can be set on every {@link ObjectInputStream}\n+ * and every object read from the stream can be checked.\n+ * The {@linkplain #ObjectInputStream() ObjectInputStream constructors} invoke the filter factory\n+ * to select the initial filter which may be updated or replaced by {@link #setObjectInputFilter}.\n+ * <p>\n+ * If an ObjectInputStream has a filter, the {@link ObjectInputFilter} can check that\n+ * the classes, array lengths, number of references in the stream, depth, and\n+ * number of bytes consumed from the input stream are allowed and\n+ * if not, can terminate deserialization.\n+ *\n+ * <p>ObjectOutputStream and ObjectInputStream can provide an application with\n+ * persistent storage for graphs of objects when used with a FileOutputStream\n+ * and FileInputStream respectively.  ObjectInputStream is used to recover\n+ * those objects previously serialized. Other uses include passing objects\n+ * between hosts using a socket stream or for marshaling and unmarshaling\n+ * arguments and parameters in a remote communication system.\n+ *\n+ * <p>ObjectInputStream ensures that the types of all objects in the graph\n+ * created from the stream match the classes present in the Java Virtual\n+ * Machine.  Classes are loaded as required using the standard mechanisms.\n+ *\n+ * <p>Only objects that support the java.io.Serializable or\n+ * java.io.Externalizable interface can be read from streams.\n+ *\n+ * <p>The method {@code readObject} is used to read an object from the\n+ * stream.  Java's safe casting should be used to get the desired type.  In\n+ * Java, strings and arrays are objects and are treated as objects during\n+ * serialization. When read they need to be cast to the expected type.\n+ *\n+ * <p>Primitive data types can be read from the stream using the appropriate\n+ * method on DataInput.\n+ *\n+ * <p>The default deserialization mechanism for objects restores the contents\n+ * of each field to the value and type it had when it was written.  Fields\n+ * declared as transient or static are ignored by the deserialization process.\n+ * References to other objects cause those objects to be read from the stream\n+ * as necessary.  Graphs of objects are restored correctly using a reference\n+ * sharing mechanism.  New objects are always allocated when deserializing,\n+ * which prevents existing objects from being overwritten.\n+ *\n+ * <p>Reading an object is analogous to running the constructors of a new\n+ * object.  Memory is allocated for the object and initialized to zero (NULL).\n+ * No-arg constructors are invoked for the non-serializable classes and then\n+ * the fields of the serializable classes are restored from the stream starting\n+ * with the serializable class closest to java.lang.object and finishing with\n+ * the object's most specific class.\n+ *\n+ * <p>For example to read from a stream as written by the example in\n+ * {@link ObjectOutputStream}:\n+ * <br>\n+ * {@snippet lang=\"java\" :\n+ *     try (FileInputStream fis = new FileInputStream(\"t.tmp\");\n+ *          ObjectInputStream ois = new ObjectInputStream(fis)) {\n+ *         String label = (String) ois.readObject();\n+ *         LocalDateTime dateTime = (LocalDateTime) ois.readObject();\n+ *         \/\/ Use label and dateTime\n+ *     } catch (Exception ex) {\n+ *         \/\/ handle exception\n+ *     }\n+ * }\n+ *\n+ * <p>Classes control how they are serialized by implementing either the\n+ * java.io.Serializable or java.io.Externalizable interfaces.\n+ *\n+ * <p>Implementing the Serializable interface allows object serialization to\n+ * save and restore the entire state of the object and it allows classes to\n+ * evolve between the time the stream is written and the time it is read.  It\n+ * automatically traverses references between objects, saving and restoring\n+ * entire graphs.\n+ *\n+ * <p>Serializable classes that require special handling during the\n+ * serialization and deserialization process should implement methods\n+ * with the following signatures:\n+ *\n+ * {@snippet lang=\"java\":\n+ *     private void writeObject(java.io.ObjectOutputStream stream)\n+ *         throws IOException;\n+ *     private void readObject(java.io.ObjectInputStream stream)\n+ *         throws IOException, ClassNotFoundException;\n+ *     private void readObjectNoData()\n+ *         throws ObjectStreamException;\n+ * }\n+ *\n+ * <p>The method name, modifiers, return type, and number and type of\n+ * parameters must match exactly for the method to be used by\n+ * serialization or deserialization. The methods should only be\n+ * declared to throw checked exceptions consistent with these\n+ * signatures.\n+ *\n+ * <p>The readObject method is responsible for reading and restoring the state\n+ * of the object for its particular class using data written to the stream by\n+ * the corresponding writeObject method.  The method does not need to concern\n+ * itself with the state belonging to its superclasses or subclasses.  State is\n+ * restored by reading data from the ObjectInputStream for the individual\n+ * fields and making assignments to the appropriate fields of the object.\n+ * Reading primitive data types is supported by DataInput.\n+ *\n+ * <p>Any attempt to read object data which exceeds the boundaries of the\n+ * custom data written by the corresponding writeObject method will cause an\n+ * OptionalDataException to be thrown with an eof field value of true.\n+ * Non-object reads which exceed the end of the allotted data will reflect the\n+ * end of data in the same way that they would indicate the end of the stream:\n+ * bytewise reads will return -1 as the byte read or number of bytes read, and\n+ * primitive reads will throw EOFExceptions.  If there is no corresponding\n+ * writeObject method, then the end of default serialized data marks the end of\n+ * the allotted data.\n+ *\n+ * <p>Primitive and object read calls issued from within a readExternal method\n+ * behave in the same manner--if the stream is already positioned at the end of\n+ * data written by the corresponding writeExternal method, object reads will\n+ * throw OptionalDataExceptions with eof set to true, bytewise reads will\n+ * return -1, and primitive reads will throw EOFExceptions.  Note that this\n+ * behavior does not hold for streams written with the old\n+ * {@code ObjectStreamConstants.PROTOCOL_VERSION_1} protocol, in which the\n+ * end of data written by writeExternal methods is not demarcated, and hence\n+ * cannot be detected.\n+ *\n+ * <p>The readObjectNoData method is responsible for initializing the state of\n+ * the object for its particular class in the event that the serialization\n+ * stream does not list the given class as a superclass of the object being\n+ * deserialized.  This may occur in cases where the receiving party uses a\n+ * different version of the deserialized instance's class than the sending\n+ * party, and the receiver's version extends classes that are not extended by\n+ * the sender's version.  This may also occur if the serialization stream has\n+ * been tampered; hence, readObjectNoData is useful for initializing\n+ * deserialized objects properly despite a \"hostile\" or incomplete source\n+ * stream.\n+ *\n+ * <p>Serialization does not read or assign values to the fields of any object\n+ * that does not implement the java.io.Serializable interface.  Subclasses of\n+ * Objects that are not serializable can be serializable. In this case the\n+ * non-serializable class must have a no-arg constructor to allow its fields to\n+ * be initialized.  In this case it is the responsibility of the subclass to\n+ * save and restore the state of the non-serializable class. It is frequently\n+ * the case that the fields of that class are accessible (public, package, or\n+ * protected) or that there are get and set methods that can be used to restore\n+ * the state.\n+ *\n+ * <p>Any exception that occurs while deserializing an object will be caught by\n+ * the ObjectInputStream and abort the reading process.\n+ *\n+ * <p>Implementing the Externalizable interface allows the object to assume\n+ * complete control over the contents and format of the object's serialized\n+ * form.  The methods of the Externalizable interface, writeExternal and\n+ * readExternal, are called to save and restore the objects state.  When\n+ * implemented by a class they can write and read their own state using all of\n+ * the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n+ * the objects to handle any versioning that occurs.\n+ *\n+ * <p>Enum constants are deserialized differently than ordinary serializable or\n+ * externalizable objects.  The serialized form of an enum constant consists\n+ * solely of its name; field values of the constant are not transmitted.  To\n+ * deserialize an enum constant, ObjectInputStream reads the constant name from\n+ * the stream; the deserialized constant is then obtained by calling the static\n+ * method {@code Enum.valueOf(Class, String)} with the enum constant's\n+ * base type and the received constant name as arguments.  Like other\n+ * serializable or externalizable objects, enum constants can function as the\n+ * targets of back references appearing subsequently in the serialization\n+ * stream.  The process by which enum constants are deserialized cannot be\n+ * customized: any class-specific readObject, readObjectNoData, and readResolve\n+ * methods defined by enum types are ignored during deserialization.\n+ * Similarly, any serialPersistentFields or serialVersionUID field declarations\n+ * are also ignored--all enum types have a fixed serialVersionUID of 0L.\n+ *\n+ * <a id=\"record-serialization\"><\/a>\n+ * <p>Records are serialized differently than ordinary serializable or externalizable\n+ * objects. During deserialization the record's canonical constructor is invoked\n+ * to construct the record object. Certain serialization-related methods, such\n+ * as readObject and writeObject, are ignored for serializable records. See\n+ * <a href=\"{@docRoot}\/..\/specs\/serialization\/serial-arch.html#serialization-of-records\">\n+ * <cite>Java Object Serialization Specification,<\/cite> Section 1.13,\n+ * \"Serialization of Records\"<\/a> for additional information.\n+ *\n+ * @spec serialization\/index.html Java Object Serialization Specification\n+ * @author      Mike Warres\n+ * @author      Roger Riggs\n+ * @see java.io.DataInput\n+ * @see java.io.ObjectOutputStream\n+ * @see java.io.Serializable\n+ * @see <a href=\"{@docRoot}\/..\/specs\/serialization\/input.html\">\n+ *      <cite>Java Object Serialization Specification,<\/cite> Section 3, \"Object Input Classes\"<\/a>\n+ * @since   1.1\n+ *\/\n+public class ObjectInputStream\n+    extends InputStream implements ObjectInput, ObjectStreamConstants\n+{\n+    \/** handle value representing null *\/\n+    private static final int NULL_HANDLE = -1;\n+\n+    \/** marker for unshared objects in internal handle table *\/\n+    private static final Object unsharedMarker = new Object();\n+\n+    \/**\n+     * immutable table mapping primitive type names to corresponding\n+     * class objects\n+     *\/\n+    private static final Map<String, Class<?>> primClasses =\n+        Map.of(\"boolean\", boolean.class,\n+               \"byte\", byte.class,\n+               \"char\", char.class,\n+               \"short\", short.class,\n+               \"int\", int.class,\n+               \"long\", long.class,\n+               \"float\", float.class,\n+               \"double\", double.class,\n+               \"void\", void.class);\n+\n+    private static class Caches {\n+        \/** cache of subclass security audit results *\/\n+        static final ClassValue<Boolean> subclassAudits =\n+            new ClassValue<>() {\n+                @Override\n+                protected Boolean computeValue(Class<?> type) {\n+                    return auditSubclass(type);\n+                }\n+            };\n+\n+        \/**\n+         * Property to permit setting a filter after objects\n+         * have been read.\n+         * See {@link #setObjectInputFilter(ObjectInputFilter)}\n+         *\/\n+        static final boolean SET_FILTER_AFTER_READ = GetBooleanAction\n+                .privilegedGetProperty(\"jdk.serialSetFilterAfterRead\");\n+\n+        \/**\n+         * Property to control {@link GetField#get(String, Object)} conversion of\n+         * {@link ClassNotFoundException} to {@code null}. If set to {@code true}\n+         * {@link GetField#get(String, Object)} returns null otherwise\n+         * throwing {@link ClassNotFoundException}.\n+         *\/\n+        private static final boolean GETFIELD_CNFE_RETURNS_NULL = GetBooleanAction\n+                .privilegedGetProperty(\"jdk.serialGetFieldCnfeReturnsNull\");\n+\n+        \/**\n+         * Property to override the implementation limit on the number\n+         * of interfaces allowed for Proxies. The property value is clamped to 0..65535.\n+         * The maximum number of interfaces allowed for a proxy is limited to 65535 by\n+         * {@link java.lang.reflect.Proxy#newProxyInstance(ClassLoader, Class[], InvocationHandler)}.\n+         *\/\n+        static final int PROXY_INTERFACE_LIMIT = Math.clamp(GetIntegerAction\n+                .privilegedGetProperty(\"jdk.serialProxyInterfaceLimit\", 65535), 0, 65535);\n+    }\n+\n+    \/*\n+     * Separate class to defer initialization of logging until needed.\n+     *\/\n+    private static class Logging {\n+        \/*\n+         * Logger for ObjectInputFilter results.\n+         * Setup the filter logger if it is set to DEBUG or TRACE.\n+         * (Assuming it will not change).\n+         *\/\n+        static final System.Logger filterLogger;\n+\n+        static {\n+            Logger filterLog = System.getLogger(\"java.io.serialization\");\n+            filterLogger = (filterLog.isLoggable(Logger.Level.DEBUG)\n+                    || filterLog.isLoggable(Logger.Level.TRACE)) ? filterLog : null;\n+        }\n+    }\n+\n+    \/** filter stream for handling block data conversion *\/\n+    private final BlockDataInputStream bin;\n+    \/** validation callback list *\/\n+    private final ValidationList vlist;\n+    \/** recursion depth *\/\n+    private long depth;\n+    \/** Total number of references to any type of object, class, enum, proxy, etc. *\/\n+    private long totalObjectRefs;\n+    \/** whether stream is closed *\/\n+    private boolean closed;\n+\n+    \/** wire handle -> obj\/exception map *\/\n+    private final HandleTable handles;\n+    \/** scratch field for passing handle values up\/down call stack *\/\n+    private int passHandle = NULL_HANDLE;\n+    \/** flag set when at end of field value block with no TC_ENDBLOCKDATA *\/\n+    private boolean defaultDataEnd = false;\n+\n+    \/** if true, invoke readObjectOverride() instead of readObject() *\/\n+    private final boolean enableOverride;\n+    \/** if true, invoke resolveObject() *\/\n+    private boolean enableResolve;\n+\n+    \/**\n+     * Context during upcalls to class-defined readObject methods; holds\n+     * object currently being deserialized and descriptor for current class.\n+     * Null when not during readObject upcall.\n+     *\/\n+    private SerialCallbackContext curContext;\n+\n+    \/**\n+     * Filter of class descriptors and classes read from the stream;\n+     * may be null.\n+     *\/\n+    private ObjectInputFilter serialFilter;\n+\n+    \/**\n+     * True if the stream-specific filter has been set; initially false.\n+     *\/\n+    private boolean streamFilterSet;\n+\n+    \/**\n+     * Creates an ObjectInputStream that reads from the specified InputStream.\n+     * A serialization stream header is read from the stream and verified.\n+     * This constructor will block until the corresponding ObjectOutputStream\n+     * has written and flushed the header.\n+     *\n+     * <p>The constructor initializes the deserialization filter to the filter returned\n+     * by invoking the serial filter factory returned from {@link Config#getSerialFilterFactory()}\n+     * with {@code null} for the current filter\n+     * and the {@linkplain Config#getSerialFilter() static JVM-wide filter} for the requested filter.\n+     * If the serial filter or serial filter factory properties are invalid\n+     * an {@link IllegalStateException} is thrown.\n+     * When the filter factory {@code apply} method is invoked it may throw a runtime exception\n+     * preventing the {@code ObjectInputStream} from being constructed.\n+     *\n+     * <p>If a security manager is installed, this constructor will check for\n+     * the \"enableSubclassImplementation\" SerializablePermission when invoked\n+     * directly or indirectly by the constructor of a subclass which overrides\n+     * the ObjectInputStream.readFields or ObjectInputStream.readUnshared\n+     * methods.\n+     *\n+     * @param   in input stream to read from\n+     * @throws  StreamCorruptedException if the stream header is incorrect\n+     * @throws  IOException if an I\/O error occurs while reading stream header\n+     * @throws  SecurityException if untrusted subclass illegally overrides\n+     *          security-sensitive methods\n+     * @throws  IllegalStateException if the initialization of {@link ObjectInputFilter.Config}\n+     *          fails due to invalid serial filter or serial filter factory properties.\n+     * @throws  NullPointerException if {@code in} is {@code null}\n+     * @see     ObjectInputStream#ObjectInputStream()\n+     * @see     ObjectInputStream#readFields()\n+     * @see     ObjectOutputStream#ObjectOutputStream(OutputStream)\n+     *\/\n+    public ObjectInputStream(InputStream in) throws IOException {\n+        verifySubclass();\n+        bin = new BlockDataInputStream(in);\n+        handles = new HandleTable(10);\n+        vlist = new ValidationList();\n+        streamFilterSet = false;\n+        serialFilter = Config.getSerialFilterFactorySingleton().apply(null, Config.getSerialFilter());\n+        enableOverride = false;\n+        readStreamHeader();\n+        bin.setBlockDataMode(true);\n+    }\n+\n+    \/**\n+     * Provide a way for subclasses that are completely reimplementing\n+     * ObjectInputStream to not have to allocate private data just used by this\n+     * implementation of ObjectInputStream.\n+     *\n+     * <p>The constructor initializes the deserialization filter to the filter returned\n+     * by invoking the serial filter factory returned from {@link Config#getSerialFilterFactory()}\n+     * with {@code null} for the current filter\n+     * and the {@linkplain Config#getSerialFilter() static JVM-wide filter} for the requested filter.\n+     * If the serial filter or serial filter factory properties are invalid\n+     * an {@link IllegalStateException} is thrown.\n+     * When the filter factory {@code apply} method is invoked it may throw a runtime exception\n+     * preventing the {@code ObjectInputStream} from being constructed.\n+     *\n+     * <p>If there is a security manager installed, this method first calls the\n+     * security manager's {@code checkPermission} method with the\n+     * {@code SerializablePermission(\"enableSubclassImplementation\")}\n+     * permission to ensure it's ok to enable subclassing.\n+     *\n+     * @throws  SecurityException if a security manager exists and its\n+     *          {@code checkPermission} method denies enabling\n+     *          subclassing.\n+     * @throws  IOException if an I\/O error occurs while creating this stream\n+     * @throws  IllegalStateException if the initialization of {@link ObjectInputFilter.Config}\n+     *      fails due to invalid serial filter or serial filter factory properties.\n+     * @see SecurityManager#checkPermission\n+     * @see java.io.SerializablePermission\n+     *\/\n+    protected ObjectInputStream() throws IOException, SecurityException {\n+        @SuppressWarnings(\"removal\")\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n+        }\n+        bin = null;\n+        handles = null;\n+        vlist = null;\n+        streamFilterSet = false;\n+        serialFilter = Config.getSerialFilterFactorySingleton().apply(null, Config.getSerialFilter());\n+        enableOverride = true;\n+    }\n+\n+    \/**\n+     * Read an object from the ObjectInputStream.  The class of the object, the\n+     * signature of the class, and the values of the non-transient and\n+     * non-static fields of the class and all of its supertypes are read.\n+     * Default deserializing for a class can be overridden using the writeObject\n+     * and readObject methods.  Objects referenced by this object are read\n+     * transitively so that a complete equivalent graph of objects is\n+     * reconstructed by readObject.\n+     *\n+     * <p>The root object is completely restored when all of its fields and the\n+     * objects it references are completely restored.  At this point the object\n+     * validation callbacks are executed in order based on their registered\n+     * priorities. The callbacks are registered by objects (in the readObject\n+     * special methods) as they are individually restored.\n+     *\n+     * <p>The deserialization filter, when not {@code null}, is invoked for\n+     * each object (regular or class) read to reconstruct the root object.\n+     * See {@link #setObjectInputFilter(ObjectInputFilter) setObjectInputFilter} for details.\n+     *\n+     * <p>Exceptions are thrown for problems with the InputStream and for\n+     * classes that should not be deserialized.  All exceptions are fatal to\n+     * the InputStream and leave it in an indeterminate state; it is up to the\n+     * caller to ignore or recover the stream state.\n+     *\n+     * @throws  ClassNotFoundException Class of a serialized object cannot be\n+     *          found.\n+     * @throws  InvalidClassException Something is wrong with a class used by\n+     *          deserialization.\n+     * @throws  StreamCorruptedException Control information in the\n+     *          stream is inconsistent.\n+     * @throws  OptionalDataException Primitive data was found in the\n+     *          stream instead of objects.\n+     * @throws  IOException Any of the usual Input\/Output related exceptions.\n+     *\/\n+    public final Object readObject()\n+        throws IOException, ClassNotFoundException {\n+        return readObject(Object.class);\n+    }\n+\n+    \/**\n+     * Reads a String and only a string.\n+     *\n+     * @return  the String read\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    private String readString() throws IOException {\n+        try {\n+            return (String) readObject(String.class);\n+        } catch (ClassNotFoundException cnf) {\n+            throw new IllegalStateException(cnf);\n+        }\n+    }\n+\n+    \/**\n+     * Internal method to read an object from the ObjectInputStream of the expected type.\n+     * Called only from {@code readObject()} and {@code readString()}.\n+     * Only {@code Object.class} and {@code String.class} are supported.\n+     *\n+     * @param type the type expected; either Object.class or String.class\n+     * @return an object of the type\n+     * @throws  IOException Any of the usual Input\/Output related exceptions.\n+     * @throws  ClassNotFoundException Class of a serialized object cannot be\n+     *          found.\n+     *\/\n+    private final Object readObject(Class<?> type)\n+        throws IOException, ClassNotFoundException\n+    {\n+        if (enableOverride) {\n+            return readObjectOverride();\n+        }\n+\n+        if (! (type == Object.class || type == String.class))\n+            throw new AssertionError(\"internal error\");\n+\n+        \/\/ if nested read, passHandle contains handle of enclosing object\n+        int outerHandle = passHandle;\n+        try {\n+            Object obj = readObject0(type, false);\n+            handles.markDependency(outerHandle, passHandle);\n+            ClassNotFoundException ex = handles.lookupException(passHandle);\n+            if (ex != null) {\n+                throw ex;\n+            }\n+            if (depth == 0) {\n+                vlist.doCallbacks();\n+                freeze();\n+            }\n+            return obj;\n+        } finally {\n+            passHandle = outerHandle;\n+            if (closed && depth == 0) {\n+                clear();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * This method is called by trusted subclasses of ObjectInputStream that\n+     * constructed ObjectInputStream using the protected no-arg constructor.\n+     * The subclass is expected to provide an override method with the modifier\n+     * \"final\".\n+     *\n+     * @return  the Object read from the stream.\n+     * @throws  ClassNotFoundException Class definition of a serialized object\n+     *          cannot be found.\n+     * @throws  OptionalDataException Primitive data was found in the stream\n+     *          instead of objects.\n+     * @throws  IOException if I\/O errors occurred while reading from the\n+     *          underlying stream\n+     * @see #ObjectInputStream()\n+     * @see #readObject()\n+     * @since 1.2\n+     *\/\n+    protected Object readObjectOverride()\n+        throws IOException, ClassNotFoundException\n+    {\n+        return null;\n+    }\n+\n+    \/**\n+     * Reads an \"unshared\" object from the ObjectInputStream.  This method is\n+     * identical to readObject, except that it prevents subsequent calls to\n+     * readObject and readUnshared from returning additional references to the\n+     * deserialized instance obtained via this call.  Specifically:\n+     * <ul>\n+     *   <li>If readUnshared is called to deserialize a back-reference (the\n+     *       stream representation of an object which has been written\n+     *       previously to the stream), an ObjectStreamException will be\n+     *       thrown.\n+     *\n+     *   <li>If readUnshared returns successfully, then any subsequent attempts\n+     *       to deserialize back-references to the stream handle deserialized\n+     *       by readUnshared will cause an ObjectStreamException to be thrown.\n+     * <\/ul>\n+     * Deserializing an object via readUnshared invalidates the stream handle\n+     * associated with the returned object.  Note that this in itself does not\n+     * always guarantee that the reference returned by readUnshared is unique;\n+     * the deserialized object may define a readResolve method which returns an\n+     * object visible to other parties, or readUnshared may return a Class\n+     * object or enum constant obtainable elsewhere in the stream or through\n+     * external means. If the deserialized object defines a readResolve method\n+     * and the invocation of that method returns an array, then readUnshared\n+     * returns a shallow clone of that array; this guarantees that the returned\n+     * array object is unique and cannot be obtained a second time from an\n+     * invocation of readObject or readUnshared on the ObjectInputStream,\n+     * even if the underlying data stream has been manipulated.\n+     *\n+     * <p>The deserialization filter, when not {@code null}, is invoked for\n+     * each object (regular or class) read to reconstruct the root object.\n+     * See {@link #setObjectInputFilter(ObjectInputFilter) setObjectInputFilter} for details.\n+     *\n+     * <p>ObjectInputStream subclasses which override this method can only be\n+     * constructed in security contexts possessing the\n+     * \"enableSubclassImplementation\" SerializablePermission; any attempt to\n+     * instantiate such a subclass without this permission will cause a\n+     * SecurityException to be thrown.\n+     *\n+     * @return  reference to deserialized object\n+     * @throws  ClassNotFoundException if class of an object to deserialize\n+     *          cannot be found\n+     * @throws  StreamCorruptedException if control information in the stream\n+     *          is inconsistent\n+     * @throws  ObjectStreamException if object to deserialize has already\n+     *          appeared in stream\n+     * @throws  OptionalDataException if primitive data is next in stream\n+     * @throws  IOException if an I\/O error occurs during deserialization\n+     * @since   1.4\n+     *\/\n+    public Object readUnshared() throws IOException, ClassNotFoundException {\n+        \/\/ if nested read, passHandle contains handle of enclosing object\n+        int outerHandle = passHandle;\n+        try {\n+            Object obj = readObject0(Object.class, true);\n+            handles.markDependency(outerHandle, passHandle);\n+            ClassNotFoundException ex = handles.lookupException(passHandle);\n+            if (ex != null) {\n+                throw ex;\n+            }\n+            if (depth == 0) {\n+                vlist.doCallbacks();\n+                freeze();\n+            }\n+            return obj;\n+        } finally {\n+            passHandle = outerHandle;\n+            if (closed && depth == 0) {\n+                clear();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Read the non-static and non-transient fields of the current class from\n+     * this stream.  This may only be called from the readObject method of the\n+     * class being deserialized. It will throw the NotActiveException if it is\n+     * called otherwise.\n+     *\n+     * @throws  ClassNotFoundException if the class of a serialized object\n+     *          could not be found.\n+     * @throws  IOException if an I\/O error occurs.\n+     * @throws  NotActiveException if the stream is not currently reading\n+     *          objects.\n+     *\/\n+    public void defaultReadObject()\n+        throws IOException, ClassNotFoundException\n+    {\n+        SerialCallbackContext ctx = curContext;\n+        if (ctx == null) {\n+            throw new NotActiveException(\"not in call to readObject\");\n+        }\n+        Object curObj = ctx.getObj();\n+        ObjectStreamClass curDesc = ctx.getDesc();\n+        bin.setBlockDataMode(false);\n+\n+        \/\/ Read fields of the current descriptor into a new FieldValues\n+        FieldValues values = new FieldValues(curDesc, true);\n+        if (curObj != null) {\n+            values.defaultCheckFieldValues(curObj);\n+            values.defaultSetFieldValues(curObj);\n+        }\n+        bin.setBlockDataMode(true);\n+        if (!curDesc.hasWriteObjectData()) {\n+            \/*\n+             * Fix for 4360508: since stream does not contain terminating\n+             * TC_ENDBLOCKDATA tag, set flag so that reading code elsewhere\n+             * knows to simulate end-of-custom-data behavior.\n+             *\/\n+            defaultDataEnd = true;\n+        }\n+        ClassNotFoundException ex = handles.lookupException(passHandle);\n+        if (ex != null) {\n+            throw ex;\n+        }\n+    }\n+\n+    \/**\n+     * Reads the persistent fields from the stream and makes them available by\n+     * name.\n+     *\n+     * @return  the {@code GetField} object representing the persistent\n+     *          fields of the object being deserialized\n+     * @throws  ClassNotFoundException if the class of a serialized object\n+     *          could not be found.\n+     * @throws  IOException if an I\/O error occurs.\n+     * @throws  NotActiveException if the stream is not currently reading\n+     *          objects.\n+     * @since 1.2\n+     *\/\n+    public ObjectInputStream.GetField readFields()\n+        throws IOException, ClassNotFoundException\n+    {\n+        SerialCallbackContext ctx = curContext;\n+        if (ctx == null) {\n+            throw new NotActiveException(\"not in call to readObject\");\n+        }\n+        ctx.checkAndSetUsed();\n+        ObjectStreamClass curDesc = ctx.getDesc();\n+        bin.setBlockDataMode(false);\n+        \/\/ Read fields of the current descriptor into a new FieldValues\n+        FieldValues values = new FieldValues(curDesc, false);\n+        bin.setBlockDataMode(true);\n+        if (!curDesc.hasWriteObjectData()) {\n+            \/*\n+             * Fix for 4360508: since stream does not contain terminating\n+             * TC_ENDBLOCKDATA tag, set flag so that reading code elsewhere\n+             * knows to simulate end-of-custom-data behavior.\n+             *\/\n+            defaultDataEnd = true;\n+        }\n+        return values;\n+    }\n+\n+    \/**\n+     * Register an object to be validated before the graph is returned.  While\n+     * similar to resolveObject these validations are called after the entire\n+     * graph has been reconstituted.  Typically, a readObject method will\n+     * register the object with the stream so that when all of the objects are\n+     * restored a final set of validations can be performed.\n+     *\n+     * @param   obj the object to receive the validation callback.\n+     * @param   prio controls the order of callbacks; zero is a good default.\n+     *          Use higher numbers to be called back earlier, lower numbers for\n+     *          later callbacks. Within a priority, callbacks are processed in\n+     *          no particular order.\n+     * @throws  NotActiveException The stream is not currently reading objects\n+     *          so it is invalid to register a callback.\n+     * @throws  InvalidObjectException The validation object is null.\n+     *\/\n+    public void registerValidation(ObjectInputValidation obj, int prio)\n+        throws NotActiveException, InvalidObjectException\n+    {\n+        if (depth == 0) {\n+            throw new NotActiveException(\"stream inactive\");\n+        }\n+        vlist.register(obj, prio);\n+    }\n+\n+    \/**\n+     * Load the local class equivalent of the specified stream class\n+     * description.  Subclasses may implement this method to allow classes to\n+     * be fetched from an alternate source.\n+     *\n+     * <p>The corresponding method in {@code ObjectOutputStream} is\n+     * {@code annotateClass}.  This method will be invoked only once for\n+     * each unique class in the stream.  This method can be implemented by\n+     * subclasses to use an alternate loading mechanism but must return a\n+     * {@code Class} object. Once returned, if the class is not an array\n+     * class, its serialVersionUID is compared to the serialVersionUID of the\n+     * serialized class, and if there is a mismatch, the deserialization fails\n+     * and an {@link InvalidClassException} is thrown.\n+     *\n+     * <p>The default implementation of this method in\n+     * {@code ObjectInputStream} returns the result of calling\n+     * {@snippet lang=\"java\":\n+     *     Class.forName(desc.getName(), false, loader)\n+     * }\n+     * where {@code loader} is the first class loader on the current\n+     * thread's stack (starting from the currently executing method) that is\n+     * neither the {@linkplain ClassLoader#getPlatformClassLoader() platform\n+     * class loader} nor its ancestor; otherwise, {@code loader} is the\n+     * <em>platform class loader<\/em>. If this call results in a\n+     * {@code ClassNotFoundException} and the name of the passed\n+     * {@code ObjectStreamClass} instance is the Java language keyword\n+     * for a primitive type or void, then the {@code Class} object\n+     * representing that primitive type or void will be returned\n+     * (e.g., an {@code ObjectStreamClass} with the name\n+     * {@code \"int\"} will be resolved to {@code Integer.TYPE}).\n+     * Otherwise, the {@code ClassNotFoundException} will be thrown to\n+     * the caller of this method.\n+     *\n+     * @param   desc an instance of class {@code ObjectStreamClass}\n+     * @return  a {@code Class} object corresponding to {@code desc}\n+     * @throws  IOException any of the usual Input\/Output exceptions.\n+     * @throws  ClassNotFoundException if class of a serialized object cannot\n+     *          be found.\n+     *\/\n+    protected Class<?> resolveClass(ObjectStreamClass desc)\n+        throws IOException, ClassNotFoundException\n+    {\n+        String name = desc.getName();\n+        try {\n+            return Class.forName(name, false, latestUserDefinedLoader());\n+        } catch (ClassNotFoundException ex) {\n+            Class<?> cl = primClasses.get(name);\n+            if (cl != null) {\n+                return cl;\n+            } else {\n+                throw ex;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Returns a proxy class that implements the interfaces named in a proxy\n+     * class descriptor; subclasses may implement this method to read custom\n+     * data from the stream along with the descriptors for dynamic proxy\n+     * classes, allowing them to use an alternate loading mechanism for the\n+     * interfaces and the proxy class.\n+     *\n+     * <p>This method is called exactly once for each unique proxy class\n+     * descriptor in the stream.\n+     *\n+     * <p>The corresponding method in {@code ObjectOutputStream} is\n+     * {@code annotateProxyClass}.  For a given subclass of\n+     * {@code ObjectInputStream} that overrides this method, the\n+     * {@code annotateProxyClass} method in the corresponding subclass of\n+     * {@code ObjectOutputStream} must write any data or objects read by\n+     * this method.\n+     *\n+     * <p>The default implementation of this method in\n+     * {@code ObjectInputStream} returns the result of calling\n+     * {@code Proxy.getProxyClass} with the list of {@code Class}\n+     * objects for the interfaces that are named in the {@code interfaces}\n+     * parameter.  The {@code Class} object for each interface name\n+     * {@code i} is the value returned by calling\n+     * {@snippet lang=\"java\":\n+     *     Class.forName(i, false, loader)\n+     * }\n+     * where {@code loader} is the first class loader on the current\n+     * thread's stack (starting from the currently executing method) that is\n+     * neither the {@linkplain ClassLoader#getPlatformClassLoader() platform\n+     * class loader} nor its ancestor; otherwise, {@code loader} is the\n+     * <em>platform class loader<\/em>.\n+     * Unless any of the resolved interfaces are non-public, this same value\n+     * of {@code loader} is also the class loader passed to\n+     * {@code Proxy.getProxyClass}; if non-public interfaces are present,\n+     * their class loader is passed instead (if more than one non-public\n+     * interface class loader is encountered, an\n+     * {@code IllegalAccessError} is thrown).\n+     * If {@code Proxy.getProxyClass} throws an\n+     * {@code IllegalArgumentException}, {@code resolveProxyClass}\n+     * will throw a {@code ClassNotFoundException} containing the\n+     * {@code IllegalArgumentException}.\n+     *\n+     * @param interfaces the list of interface names that were\n+     *                deserialized in the proxy class descriptor\n+     * @return  a proxy class for the specified interfaces\n+     * @throws        IOException any exception thrown by the underlying\n+     *                {@code InputStream}\n+     * @throws        ClassNotFoundException if the proxy class or any of the\n+     *                named interfaces could not be found\n+     * @see ObjectOutputStream#annotateProxyClass(Class)\n+     * @since 1.3\n+     *\/\n+    protected Class<?> resolveProxyClass(String[] interfaces)\n+        throws IOException, ClassNotFoundException\n+    {\n+        ClassLoader latestLoader = latestUserDefinedLoader();\n+        ClassLoader nonPublicLoader = null;\n+        boolean hasNonPublicInterface = false;\n+\n+        \/\/ define proxy in class loader of non-public interface(s), if any\n+        Class<?>[] classObjs = new Class<?>[interfaces.length];\n+        for (int i = 0; i < interfaces.length; i++) {\n+            Class<?> cl = Class.forName(interfaces[i], false, latestLoader);\n+            if ((cl.getModifiers() & Modifier.PUBLIC) == 0) {\n+                if (hasNonPublicInterface) {\n+                    if (nonPublicLoader != cl.getClassLoader()) {\n+                        throw new IllegalAccessError(\n+                            \"conflicting non-public interface class loaders\");\n+                    }\n+                } else {\n+                    nonPublicLoader = cl.getClassLoader();\n+                    hasNonPublicInterface = true;\n+                }\n+            }\n+            classObjs[i] = cl;\n+        }\n+        try {\n+            @SuppressWarnings(\"deprecation\")\n+            Class<?> proxyClass = Proxy.getProxyClass(\n+                hasNonPublicInterface ? nonPublicLoader : latestLoader,\n+                classObjs);\n+            return proxyClass;\n+        } catch (IllegalArgumentException e) {\n+            throw new ClassNotFoundException(null, e);\n+        }\n+    }\n+\n+    \/**\n+     * This method will allow trusted subclasses of ObjectInputStream to\n+     * substitute one object for another during deserialization. Replacing\n+     * objects is disabled until enableResolveObject is called. The\n+     * enableResolveObject method checks that the stream requesting to resolve\n+     * object can be trusted. Every reference to serializable objects is passed\n+     * to resolveObject.  To ensure that the private state of objects is not\n+     * unintentionally exposed only trusted streams may use resolveObject.\n+     *\n+     * <p>This method is called after an object has been read but before it is\n+     * returned from readObject.  The default resolveObject method just returns\n+     * the same object.\n+     *\n+     * <p>When a subclass is replacing objects it must ensure that the\n+     * substituted object is compatible with every field where the reference\n+     * will be stored.  Objects whose type is not a subclass of the type of the\n+     * field or array element abort the deserialization by raising an exception\n+     * and the object is not be stored.\n+     *\n+     * <p>This method is called only once when each object is first\n+     * encountered.  All subsequent references to the object will be redirected\n+     * to the new object.\n+     *\n+     * @param   obj object to be substituted\n+     * @return  the substituted object\n+     * @throws  IOException Any of the usual Input\/Output exceptions.\n+     *\/\n+    protected Object resolveObject(Object obj) throws IOException {\n+        return obj;\n+    }\n+\n+    \/**\n+     * Enables the stream to do replacement of objects read from the stream. When\n+     * enabled, the {@link #resolveObject} method is called for every object being\n+     * deserialized.\n+     *\n+     * <p>If object replacement is currently not enabled, and\n+     * {@code enable} is true, and there is a security manager installed,\n+     * this method first calls the security manager's\n+     * {@code checkPermission} method with the\n+     * {@code SerializablePermission(\"enableSubstitution\")} permission to\n+     * ensure that the caller is permitted to enable the stream to do replacement\n+     * of objects read from the stream.\n+     *\n+     * @param   enable true for enabling use of {@code resolveObject} for\n+     *          every object being deserialized\n+     * @return  the previous setting before this method was invoked\n+     * @throws  SecurityException if a security manager exists and its\n+     *          {@code checkPermission} method denies enabling the stream\n+     *          to do replacement of objects read from the stream.\n+     * @see SecurityManager#checkPermission\n+     * @see java.io.SerializablePermission\n+     *\/\n+    protected boolean enableResolveObject(boolean enable)\n+        throws SecurityException\n+    {\n+        if (enable == enableResolve) {\n+            return enable;\n+        }\n+        if (enable) {\n+            @SuppressWarnings(\"removal\")\n+            SecurityManager sm = System.getSecurityManager();\n+            if (sm != null) {\n+                sm.checkPermission(SUBSTITUTION_PERMISSION);\n+            }\n+        }\n+        enableResolve = enable;\n+        return !enableResolve;\n+    }\n+\n+    \/**\n+     * The readStreamHeader method is provided to allow subclasses to read and\n+     * verify their own stream headers. It reads and verifies the magic number\n+     * and version number.\n+     *\n+     * @throws  IOException if there are I\/O errors while reading from the\n+     *          underlying {@code InputStream}\n+     * @throws  StreamCorruptedException if control information in the stream\n+     *          is inconsistent\n+     *\/\n+    protected void readStreamHeader()\n+        throws IOException, StreamCorruptedException\n+    {\n+        short s0 = bin.readShort();\n+        short s1 = bin.readShort();\n+        if (s0 != STREAM_MAGIC || s1 != STREAM_VERSION) {\n+            throw new StreamCorruptedException(\n+                String.format(\"invalid stream header: %04X%04X\", s0, s1));\n+        }\n+    }\n+\n+    \/**\n+     * Read a class descriptor from the serialization stream.  This method is\n+     * called when the ObjectInputStream expects a class descriptor as the next\n+     * item in the serialization stream.  Subclasses of ObjectInputStream may\n+     * override this method to read in class descriptors that have been written\n+     * in non-standard formats (by subclasses of ObjectOutputStream which have\n+     * overridden the {@code writeClassDescriptor} method).  By default,\n+     * this method reads class descriptors according to the format defined in\n+     * the Object Serialization specification.\n+     *\n+     * @return  the class descriptor read\n+     * @throws  IOException If an I\/O error has occurred.\n+     * @throws  ClassNotFoundException If the Class of a serialized object used\n+     *          in the class descriptor representation cannot be found\n+     * @see java.io.ObjectOutputStream#writeClassDescriptor(java.io.ObjectStreamClass)\n+     * @since 1.3\n+     *\/\n+    protected ObjectStreamClass readClassDescriptor()\n+        throws IOException, ClassNotFoundException\n+    {\n+        ObjectStreamClass desc = new ObjectStreamClass();\n+        desc.readNonProxy(this);\n+        return desc;\n+    }\n+\n+    \/**\n+     * Reads a byte of data. This method will block if no input is available.\n+     *\n+     * @return  the byte read, or -1 if the end of the stream is reached.\n+     * @throws  IOException {@inheritDoc}\n+     *\/\n+    @Override\n+    public int read() throws IOException {\n+        return bin.read();\n+    }\n+\n+    \/**\n+     * Reads into an array of bytes.  This method will block until some input\n+     * is available. Consider using java.io.DataInputStream.readFully to read\n+     * exactly 'length' bytes.\n+     *\n+     * @param   buf the buffer into which the data is read\n+     * @param   off the start offset in the destination array {@code buf}\n+     * @param   len the maximum number of bytes read\n+     * @return  the total number of bytes read into the buffer, or\n+     *          {@code -1} if there is no more data because the end of\n+     *          the stream has been reached.\n+     * @throws  NullPointerException if {@code buf} is {@code null}.\n+     * @throws  IndexOutOfBoundsException if {@code off} is negative,\n+     *          {@code len} is negative, or {@code len} is greater than\n+     *          {@code buf.length - off}.\n+     * @throws  IOException If an I\/O error has occurred.\n+     * @see java.io.DataInputStream#readFully(byte[],int,int)\n+     *\/\n+    @Override\n+    public int read(byte[] buf, int off, int len) throws IOException {\n+        if (buf == null) {\n+            throw new NullPointerException();\n+        }\n+        Objects.checkFromIndexSize(off, len, buf.length);\n+        return bin.read(buf, off, len, false);\n+    }\n+\n+    \/**\n+     * Returns the number of bytes that can be read without blocking.\n+     *\n+     * @return  the number of available bytes.\n+     * @throws  IOException if there are I\/O errors while reading from the\n+     *          underlying {@code InputStream}\n+     *\/\n+    @Override\n+    public int available() throws IOException {\n+        return bin.available();\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @throws  IOException {@inheritDoc}\n+     *\/\n+    @Override\n+    public void close() throws IOException {\n+        \/*\n+         * Even if stream already closed, propagate redundant close to\n+         * underlying stream to stay consistent with previous implementations.\n+         *\/\n+        closed = true;\n+        if (depth == 0) {\n+            clear();\n+        }\n+        bin.close();\n+    }\n+\n+    \/**\n+     * Reads in a boolean.\n+     *\n+     * @return  the boolean read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public boolean readBoolean() throws IOException {\n+        return bin.readBoolean();\n+    }\n+\n+    \/**\n+     * Reads an 8-bit byte.\n+     *\n+     * @return  the 8-bit byte read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public byte readByte() throws IOException  {\n+        return bin.readByte();\n+    }\n+\n+    \/**\n+     * Reads an unsigned 8-bit byte.\n+     *\n+     * @return  the 8-bit byte read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public int readUnsignedByte()  throws IOException {\n+        return bin.readUnsignedByte();\n+    }\n+\n+    \/**\n+     * Reads a 16-bit char.\n+     *\n+     * @return  the 16-bit char read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public char readChar()  throws IOException {\n+        return bin.readChar();\n+    }\n+\n+    \/**\n+     * Reads a 16-bit short.\n+     *\n+     * @return  the 16-bit short read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public short readShort()  throws IOException {\n+        return bin.readShort();\n+    }\n+\n+    \/**\n+     * Reads an unsigned 16-bit short.\n+     *\n+     * @return  the 16-bit short read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public int readUnsignedShort() throws IOException {\n+        return bin.readUnsignedShort();\n+    }\n+\n+    \/**\n+     * Reads a 32-bit int.\n+     *\n+     * @return  the 32-bit integer read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public int readInt()  throws IOException {\n+        return bin.readInt();\n+    }\n+\n+    \/**\n+     * Reads a 64-bit long.\n+     *\n+     * @return  the read 64-bit long.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public long readLong()  throws IOException {\n+        return bin.readLong();\n+    }\n+\n+    \/**\n+     * Reads a 32-bit float.\n+     *\n+     * @return  the 32-bit float read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public float readFloat() throws IOException {\n+        return bin.readFloat();\n+    }\n+\n+    \/**\n+     * Reads a 64-bit double.\n+     *\n+     * @return  the 64-bit double read.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public double readDouble() throws IOException {\n+        return bin.readDouble();\n+    }\n+\n+    \/**\n+     * Reads bytes, blocking until all bytes are read.\n+     *\n+     * @param   buf the buffer into which the data is read\n+     * @throws  NullPointerException If {@code buf} is {@code null}.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public void readFully(byte[] buf) throws IOException {\n+        bin.readFully(buf, 0, buf.length, false);\n+    }\n+\n+    \/**\n+     * Reads bytes, blocking until all bytes are read.\n+     *\n+     * @param   buf the buffer into which the data is read\n+     * @param   off the start offset into the data array {@code buf}\n+     * @param   len the maximum number of bytes to read\n+     * @throws  NullPointerException If {@code buf} is {@code null}.\n+     * @throws  IndexOutOfBoundsException If {@code off} is negative,\n+     *          {@code len} is negative, or {@code len} is greater than\n+     *          {@code buf.length - off}.\n+     * @throws  EOFException If end of file is reached.\n+     * @throws  IOException If other I\/O error has occurred.\n+     *\/\n+    public void readFully(byte[] buf, int off, int len) throws IOException {\n+        Objects.checkFromIndexSize(off, len, buf.length);\n+        bin.readFully(buf, off, len, false);\n+    }\n+\n+    \/**\n+     * Skips bytes.\n+     *\n+     * @param   len the number of bytes to be skipped\n+     * @return  the actual number of bytes skipped.\n+     * @throws  IOException If an I\/O error has occurred.\n+     *\/\n+    @Override\n+    public int skipBytes(int len) throws IOException {\n+        return bin.skipBytes(len);\n+    }\n+\n+    \/**\n+     * Reads in a line that has been terminated by a \\n, \\r, \\r\\n or EOF.\n+     *\n+     * @return  a String copy of the line.\n+     * @throws  IOException if there are I\/O errors while reading from the\n+     *          underlying {@code InputStream}\n+     * @deprecated This method does not properly convert bytes to characters.\n+     *          see DataInputStream for the details and alternatives.\n+     *\/\n+    @Deprecated\n+    public String readLine() throws IOException {\n+        return bin.readLine();\n+    }\n+\n+    \/**\n+     * Reads a String in\n+     * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8<\/a>\n+     * format.\n+     *\n+     * @return  the String.\n+     * @throws  IOException if there are I\/O errors while reading from the\n+     *          underlying {@code InputStream}\n+     * @throws  UTFDataFormatException if read bytes do not represent a valid\n+     *          modified UTF-8 encoding of a string\n+     *\/\n+    public String readUTF() throws IOException {\n+        return bin.readUTF();\n+    }\n+\n+    \/**\n+     * Returns the deserialization filter for this stream.\n+     * The filter is the result of invoking the\n+     * {@link Config#getSerialFilterFactory() JVM-wide filter factory}\n+     * either by the {@linkplain #ObjectInputStream() constructor} or the most recent invocation of\n+     * {@link #setObjectInputFilter setObjectInputFilter}.\n+     *\n+     * @return the deserialization filter for the stream; may be null\n+     * @since 9\n+     *\/\n+    public final ObjectInputFilter getObjectInputFilter() {\n+        return serialFilter;\n+    }\n+\n+    \/**\n+     * Set the deserialization filter for the stream.\n+     *\n+     * The deserialization filter is set to the filter returned by invoking the\n+     * {@linkplain Config#getSerialFilterFactory() JVM-wide filter factory}\n+     * with the {@linkplain #getObjectInputFilter() current filter} and the {@code filter} parameter.\n+     * The current filter was set in the\n+     * {@linkplain #ObjectInputStream() ObjectInputStream constructors} by invoking the\n+     * {@linkplain Config#getSerialFilterFactory() JVM-wide filter factory} and may be {@code null}.\n+     * {@linkplain #setObjectInputFilter(ObjectInputFilter)} This method} can be called\n+     * once and only once before reading any objects from the stream;\n+     * for example, by calling {@link #readObject} or {@link #readUnshared}.\n+     *\n+     * <p>It is not permitted to replace a {@code non-null} filter with a {@code null} filter.\n+     * If the {@linkplain #getObjectInputFilter() current filter} is {@code non-null},\n+     * the value returned from the filter factory must be {@code non-null}.\n+     *\n+     * <p>The filter's {@link ObjectInputFilter#checkInput checkInput} method is called\n+     * for each class and reference in the stream.\n+     * The filter can check any or all of the class, the array length, the number\n+     * of references, the depth of the graph, and the size of the input stream.\n+     * The depth is the number of nested {@linkplain #readObject readObject}\n+     * calls starting with the reading of the root of the graph being deserialized\n+     * and the current object being deserialized.\n+     * The number of references is the cumulative number of objects and references\n+     * to objects already read from the stream including the current object being read.\n+     * The filter is invoked only when reading objects from the stream and not for\n+     * primitives.\n+     * <p>\n+     * If the filter returns {@link ObjectInputFilter.Status#REJECTED Status.REJECTED},\n+     * {@code null} or throws a {@link RuntimeException},\n+     * the active {@code readObject} or {@code readUnshared}\n+     * throws {@link InvalidClassException}, otherwise deserialization\n+     * continues uninterrupted.\n+     *\n+     * @implSpec\n+     * The filter, when not {@code null}, is invoked during {@link #readObject readObject}\n+     * and {@link #readUnshared readUnshared} for each object (regular or class) in the stream.\n+     * Strings are treated as primitives and do not invoke the filter.\n+     * The filter is called for:\n+     * <ul>\n+     *     <li>each object reference previously deserialized from the stream\n+     *     (class is {@code null}, arrayLength is -1),\n+     *     <li>each regular class (class is not {@code null}, arrayLength is -1),\n+     *     <li>each interface class explicitly referenced in the stream\n+     *         (it is not called for interfaces implemented by classes in the stream),\n+     *     <li>each interface of a dynamic proxy and the dynamic proxy class itself\n+     *     (class is not {@code null}, arrayLength is -1),\n+     *     <li>each array is filtered using the array type and length of the array\n+     *     (class is the array type, arrayLength is the requested length),\n+     *     <li>each object replaced by its class' {@code readResolve} method\n+     *         is filtered using the replacement object's class, if not {@code null},\n+     *         and if it is an array, the arrayLength, otherwise -1,\n+     *     <li>and each object replaced by {@link #resolveObject resolveObject}\n+     *         is filtered using the replacement object's class, if not {@code null},\n+     *         and if it is an array, the arrayLength, otherwise -1.\n+     * <\/ul>\n+     *\n+     * When the {@link ObjectInputFilter#checkInput checkInput} method is invoked\n+     * it is given access to the current class, the array length,\n+     * the current number of references already read from the stream,\n+     * the depth of nested calls to {@link #readObject readObject} or\n+     * {@link #readUnshared readUnshared},\n+     * and the implementation dependent number of bytes consumed from the input stream.\n+     * <p>\n+     * Each call to {@link #readObject readObject} or\n+     * {@link #readUnshared readUnshared} increases the depth by 1\n+     * before reading an object and decreases by 1 before returning\n+     * normally or exceptionally.\n+     * The depth starts at {@code 1} and increases for each nested object and\n+     * decrements when each nested call returns.\n+     * The count of references in the stream starts at {@code 1} and\n+     * is increased before reading an object.\n+     *\n+     * @param filter the filter, may be null\n+     * @throws SecurityException if there is security manager and the\n+     *       {@code SerializablePermission(\"serialFilter\")} is not granted\n+     * @throws IllegalStateException if an object has been read,\n+     *       if the filter factory returns {@code null} when the\n+     *       {@linkplain #getObjectInputFilter() current filter} is non-null, or\n+     *       if the filter has already been set.\n+     * @since 9\n+     *\/\n+    public final void setObjectInputFilter(ObjectInputFilter filter) {\n+        @SuppressWarnings(\"removal\")\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(ObjectStreamConstants.SERIAL_FILTER_PERMISSION);\n+        }\n+        if (totalObjectRefs > 0 && !Caches.SET_FILTER_AFTER_READ) {\n+            throw new IllegalStateException(\n+                    \"filter can not be set after an object has been read\");\n+        }\n+        if (streamFilterSet) {\n+            throw new IllegalStateException(\"filter can not be set more than once\");\n+        }\n+        streamFilterSet = true;\n+        \/\/ Delegate to serialFilterFactory to compute stream filter\n+        ObjectInputFilter next = Config.getSerialFilterFactory()\n+                .apply(serialFilter, filter);\n+        if (serialFilter != null && next == null) {\n+            throw new IllegalStateException(\"filter can not be replaced with null filter\");\n+        }\n+        serialFilter = next;\n+    }\n+\n+    \/**\n+     * Invokes the deserialization filter if non-null.\n+     *\n+     * If the filter rejects or an exception is thrown, throws InvalidClassException.\n+     *\n+     * Logs and\/or commits a {@code DeserializationEvent}, if configured.\n+     *\n+     * @param clazz the class; may be null\n+     * @param arrayLength the array length requested; use {@code -1} if not creating an array\n+     * @throws InvalidClassException if it rejected by the filter or\n+     *        a {@link RuntimeException} is thrown\n+     *\/\n+    private void filterCheck(Class<?> clazz, int arrayLength)\n+            throws InvalidClassException {\n+        \/\/ Info about the stream is not available if overridden by subclass, return 0\n+        long bytesRead = (bin == null) ? 0 : bin.getBytesRead();\n+        RuntimeException ex = null;\n+        ObjectInputFilter.Status status = null;\n+\n+        if (serialFilter != null) {\n+            try {\n+                status = serialFilter.checkInput(new FilterValues(clazz, arrayLength,\n+                        totalObjectRefs, depth, bytesRead));\n+            } catch (RuntimeException e) {\n+                \/\/ Preventive interception of an exception to log\n+                status = ObjectInputFilter.Status.REJECTED;\n+                ex = e;\n+            }\n+            if (Logging.filterLogger != null) {\n+                \/\/ Debug logging of filter checks that fail; Tracing for those that succeed\n+                Logging.filterLogger.log(status == null || status == ObjectInputFilter.Status.REJECTED\n+                                ? Logger.Level.DEBUG\n+                                : Logger.Level.TRACE,\n+                        \"ObjectInputFilter {0}: {1}, array length: {2}, nRefs: {3}, depth: {4}, bytes: {5}, ex: {6}\",\n+                        status, clazz, arrayLength, totalObjectRefs, depth, bytesRead,\n+                        Objects.toString(ex, \"n\/a\"));\n+            }\n+        }\n+        DeserializationEvent event = new DeserializationEvent();\n+        if (event.shouldCommit()) {\n+            event.filterConfigured = serialFilter != null;\n+            event.filterStatus = status != null ? status.name() : null;\n+            event.type = clazz;\n+            event.arrayLength = arrayLength;\n+            event.objectReferences = totalObjectRefs;\n+            event.depth = depth;\n+            event.bytesRead = bytesRead;\n+            event.exceptionType = ex != null ? ex.getClass() : null;\n+            event.exceptionMessage = ex != null ? ex.getMessage() : null;\n+            event.commit();\n+        }\n+        if (serialFilter != null && (status == null || status == ObjectInputFilter.Status.REJECTED)) {\n+            throw new InvalidClassException(\"filter status: \" + status, ex);\n+        }\n+    }\n+\n+    \/**\n+     * Checks the given array type and length to ensure that creation of such\n+     * an array is permitted by this ObjectInputStream. The arrayType argument\n+     * must represent an actual array type.\n+     *\n+     * This private method is called via SharedSecrets.\n+     *\n+     * @param arrayType the array type\n+     * @param arrayLength the array length\n+     * @throws NullPointerException if arrayType is null\n+     * @throws IllegalArgumentException if arrayType isn't actually an array type\n+     * @throws StreamCorruptedException if arrayLength is negative\n+     * @throws InvalidClassException if the filter rejects creation\n+     *\/\n+    private void checkArray(Class<?> arrayType, int arrayLength) throws ObjectStreamException {\n+        if (! arrayType.isArray()) {\n+            throw new IllegalArgumentException(\"not an array type\");\n+        }\n+\n+        if (arrayLength < 0) {\n+            throw new StreamCorruptedException(\"Array length is negative\");\n+        }\n+\n+        filterCheck(arrayType, arrayLength);\n+    }\n+\n+    \/**\n+     * Provide access to the persistent fields read from the input stream.\n+     *\/\n+    public abstract static class GetField {\n+        \/**\n+         * Constructor for subclasses to call.\n+         *\/\n+        public GetField() {}\n+\n+        \/**\n+         * Get the ObjectStreamClass that describes the fields in the stream.\n+         *\n+         * @return  the descriptor class that describes the serializable fields\n+         *\/\n+        public abstract ObjectStreamClass getObjectStreamClass();\n+\n+        \/**\n+         * Return true if the named field is defaulted and has no value in this\n+         * stream.\n+         *\n+         * @param  name the name of the field\n+         * @return true, if and only if the named field is defaulted\n+         * @throws IOException if there are I\/O errors while reading from\n+         *         the underlying {@code InputStream}\n+         * @throws IllegalArgumentException if {@code name} does not\n+         *         correspond to a serializable field\n+         *\/\n+        public abstract boolean defaulted(String name) throws IOException;\n+\n+        \/**\n+         * Get the value of the named boolean field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code boolean} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract boolean get(String name, boolean val)\n+            throws IOException;\n+\n+        \/**\n+         * Get the value of the named byte field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code byte} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract byte get(String name, byte val) throws IOException;\n+\n+        \/**\n+         * Get the value of the named char field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code char} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract char get(String name, char val) throws IOException;\n+\n+        \/**\n+         * Get the value of the named short field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code short} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract short get(String name, short val) throws IOException;\n+\n+        \/**\n+         * Get the value of the named int field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code int} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract int get(String name, int val) throws IOException;\n+\n+        \/**\n+         * Get the value of the named long field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code long} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract long get(String name, long val) throws IOException;\n+\n+        \/**\n+         * Get the value of the named float field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code float} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract float get(String name, float val) throws IOException;\n+\n+        \/**\n+         * Get the value of the named double field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code double} field\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract double get(String name, double val) throws IOException;\n+\n+        \/**\n+         * Get the value of the named Object field from the persistent field.\n+         *\n+         * @param  name the name of the field\n+         * @param  val the default value to use if {@code name} does not\n+         *         have a value\n+         * @return the value of the named {@code Object} field\n+         * @throws ClassNotFoundException Class of a serialized object cannot be found.\n+         * @throws IOException if there are I\/O errors while reading from the\n+         *         underlying {@code InputStream}\n+         * @throws IllegalArgumentException if type of {@code name} is\n+         *         not serializable or if the field type is incorrect\n+         *\/\n+        public abstract Object get(String name, Object val) throws IOException, ClassNotFoundException;\n+    }\n+\n+    \/**\n+     * Verifies that this (possibly subclass) instance can be constructed\n+     * without violating security constraints: the subclass must not override\n+     * security-sensitive non-final methods, or else the\n+     * \"enableSubclassImplementation\" SerializablePermission is checked.\n+     *\/\n+    private void verifySubclass() {\n+        Class<?> cl = getClass();\n+        if (cl == ObjectInputStream.class) {\n+            return;\n+        }\n+        @SuppressWarnings(\"removal\")\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm == null) {\n+            return;\n+        }\n+        boolean result = Caches.subclassAudits.get(cl);\n+        if (!result) {\n+            sm.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n+        }\n+    }\n+\n+    \/**\n+     * Performs reflective checks on given subclass to verify that it doesn't\n+     * override security-sensitive non-final methods.  Returns TRUE if subclass\n+     * is \"safe\", FALSE otherwise.\n+     *\/\n+    @SuppressWarnings(\"removal\")\n+    private static Boolean auditSubclass(Class<?> subcl) {\n+        return AccessController.doPrivileged(\n+            new PrivilegedAction<Boolean>() {\n+                public Boolean run() {\n+                    for (Class<?> cl = subcl;\n+                         cl != ObjectInputStream.class;\n+                         cl = cl.getSuperclass())\n+                    {\n+                        try {\n+                            cl.getDeclaredMethod(\n+                                \"readUnshared\", (Class[]) null);\n+                            return Boolean.FALSE;\n+                        } catch (NoSuchMethodException ex) {\n+                        }\n+                        try {\n+                            cl.getDeclaredMethod(\"readFields\", (Class[]) null);\n+                            return Boolean.FALSE;\n+                        } catch (NoSuchMethodException ex) {\n+                        }\n+                    }\n+                    return Boolean.TRUE;\n+                }\n+            }\n+        );\n+    }\n+\n+    \/**\n+     * Clears internal data structures.\n+     *\/\n+    private void clear() {\n+        handles.clear();\n+        vlist.clear();\n+    }\n+\n+    \/**\n+     * Underlying readObject implementation.\n+     * @param type a type expected to be deserialized; non-null\n+     * @param unshared true if the object can not be a reference to a shared object, otherwise false\n+     *\/\n+    private Object readObject0(Class<?> type, boolean unshared) throws IOException {\n+        boolean oldMode = bin.getBlockDataMode();\n+        if (oldMode) {\n+            int remain = bin.currentBlockRemaining();\n+            if (remain > 0) {\n+                throw new OptionalDataException(remain);\n+            } else if (defaultDataEnd) {\n+                \/*\n+                 * Fix for 4360508: stream is currently at the end of a field\n+                 * value block written via default serialization; since there\n+                 * is no terminating TC_ENDBLOCKDATA tag, simulate\n+                 * end-of-custom-data behavior explicitly.\n+                 *\/\n+                throw new OptionalDataException(true);\n+            }\n+            bin.setBlockDataMode(false);\n+        }\n+\n+        byte tc;\n+        while ((tc = bin.peekByte()) == TC_RESET) {\n+            bin.readByte();\n+            handleReset();\n+        }\n+\n+        depth++;\n+        totalObjectRefs++;\n+        try {\n+            switch (tc) {\n+                case TC_NULL:\n+                    return readNull();\n+\n+                case TC_REFERENCE:\n+                    \/\/ check the type of the existing object\n+                    return type.cast(readHandle(unshared));\n+\n+                case TC_CLASS:\n+                    if (type == String.class) {\n+                        throw new ClassCastException(\"Cannot cast a class to java.lang.String\");\n+                    }\n+                    return readClass(unshared);\n+\n+                case TC_CLASSDESC:\n+                case TC_PROXYCLASSDESC:\n+                    if (type == String.class) {\n+                        throw new ClassCastException(\"Cannot cast a class to java.lang.String\");\n+                    }\n+                    return readClassDesc(unshared);\n+\n+                case TC_STRING:\n+                case TC_LONGSTRING:\n+                    return checkResolve(readString(unshared));\n+\n+                case TC_ARRAY:\n+                    if (type == String.class) {\n+                        throw new ClassCastException(\"Cannot cast an array to java.lang.String\");\n+                    }\n+                    return checkResolve(readArray(unshared));\n+\n+                case TC_ENUM:\n+                    if (type == String.class) {\n+                        throw new ClassCastException(\"Cannot cast an enum to java.lang.String\");\n+                    }\n+                    return checkResolve(readEnum(unshared));\n+\n+                case TC_OBJECT:\n+                    if (type == String.class) {\n+                        throw new ClassCastException(\"Cannot cast an object to java.lang.String\");\n+                    }\n+                    return checkResolve(readOrdinaryObject(unshared));\n+\n+                case TC_EXCEPTION:\n+                    if (type == String.class) {\n+                        throw new ClassCastException(\"Cannot cast an exception to java.lang.String\");\n+                    }\n+                    IOException ex = readFatalException();\n+                    throw new WriteAbortedException(\"writing aborted\", ex);\n+\n+                case TC_BLOCKDATA:\n+                case TC_BLOCKDATALONG:\n+                    if (oldMode) {\n+                        bin.setBlockDataMode(true);\n+                        bin.peek();             \/\/ force header read\n+                        throw new OptionalDataException(\n+                            bin.currentBlockRemaining());\n+                    } else {\n+                        throw new StreamCorruptedException(\n+                            \"unexpected block data\");\n+                    }\n+\n+                case TC_ENDBLOCKDATA:\n+                    if (oldMode) {\n+                        throw new OptionalDataException(true);\n+                    } else {\n+                        throw new StreamCorruptedException(\n+                            \"unexpected end of block data\");\n+                    }\n+\n+                default:\n+                    throw new StreamCorruptedException(\n+                        String.format(\"invalid type code: %02X\", tc));\n+            }\n+        } finally {\n+            depth--;\n+            bin.setBlockDataMode(oldMode);\n+        }\n+    }\n+\n+    \/**\n+     * If resolveObject has been enabled and given object does not have an\n+     * exception associated with it, calls resolveObject to determine\n+     * replacement for object, and updates handle table accordingly.  Returns\n+     * replacement object, or echoes provided object if no replacement\n+     * occurred.  Expects that passHandle is set to given object's handle prior\n+     * to calling this method.\n+     *\/\n+    private Object checkResolve(Object obj) throws IOException {\n+        if (!enableResolve || handles.lookupException(passHandle) != null) {\n+            return obj;\n+        }\n+        Object rep = resolveObject(obj);\n+        if (rep != obj) {\n+            \/\/ The type of the original object has been filtered but resolveObject\n+            \/\/ may have replaced it;  filter the replacement's type\n+            if (rep != null) {\n+                if (rep.getClass().isArray()) {\n+                    filterCheck(rep.getClass(), Array.getLength(rep));\n+                } else {\n+                    filterCheck(rep.getClass(), -1);\n+                }\n+            }\n+            handles.setObject(passHandle, rep);\n+        }\n+        return rep;\n+    }\n+\n+    \/**\n+     * Reads string without allowing it to be replaced in stream.  Called from\n+     * within ObjectStreamClass.read().\n+     *\/\n+    String readTypeString() throws IOException {\n+        int oldHandle = passHandle;\n+        try {\n+            byte tc = bin.peekByte();\n+            return switch (tc) {\n+                case TC_NULL                  -> (String) readNull();\n+                case TC_REFERENCE             -> (String) readHandle(false);\n+                case TC_STRING, TC_LONGSTRING -> readString(false);\n+                default                       -> throw new StreamCorruptedException(\n+                        String.format(\"invalid type code: %02X\", tc));\n+            };\n+        } finally {\n+            passHandle = oldHandle;\n+        }\n+    }\n+\n+    \/**\n+     * Reads in null code, sets passHandle to NULL_HANDLE and returns null.\n+     *\/\n+    private Object readNull() throws IOException {\n+        if (bin.readByte() != TC_NULL) {\n+            throw new InternalError();\n+        }\n+        passHandle = NULL_HANDLE;\n+        return null;\n+    }\n+\n+    \/**\n+     * Reads in object handle, sets passHandle to the read handle, and returns\n+     * object associated with the handle.\n+     *\/\n+    private Object readHandle(boolean unshared) throws IOException {\n+        if (bin.readByte() != TC_REFERENCE) {\n+            throw new InternalError();\n+        }\n+        passHandle = bin.readInt() - baseWireHandle;\n+        if (passHandle < 0 || passHandle >= handles.size()) {\n+            throw new StreamCorruptedException(\n+                String.format(\"invalid handle value: %08X\", passHandle +\n+                baseWireHandle));\n+        }\n+        if (unshared) {\n+            \/\/ REMIND: what type of exception to throw here?\n+            throw new InvalidObjectException(\n+                \"cannot read back reference as unshared\");\n+        }\n+\n+        Object obj = handles.lookupObject(passHandle);\n+        if (obj == unsharedMarker) {\n+            \/\/ REMIND: what type of exception to throw here?\n+            throw new InvalidObjectException(\n+                \"cannot read back reference to unshared object\");\n+        }\n+        filterCheck(null, -1);       \/\/ just a check for number of references, depth, no class\n+        return obj;\n+    }\n+\n+    \/**\n+     * Reads in and returns class object.  Sets passHandle to class object's\n+     * assigned handle.  Returns null if class is unresolvable (in which case a\n+     * ClassNotFoundException will be associated with the class' handle in the\n+     * handle table).\n+     *\/\n+    private Class<?> readClass(boolean unshared) throws IOException {\n+        if (bin.readByte() != TC_CLASS) {\n+            throw new InternalError();\n+        }\n+        ObjectStreamClass desc = readClassDesc(false);\n+        Class<?> cl = desc.forClass();\n+        passHandle = handles.assign(unshared ? unsharedMarker : cl);\n+\n+        ClassNotFoundException resolveEx = desc.getResolveException();\n+        if (resolveEx != null) {\n+            handles.markException(passHandle, resolveEx);\n+        }\n+\n+        handles.finish(passHandle);\n+        return cl;\n+    }\n+\n+    \/**\n+     * Reads in and returns (possibly null) class descriptor.  Sets passHandle\n+     * to class descriptor's assigned handle.  If class descriptor cannot be\n+     * resolved to a class in the local VM, a ClassNotFoundException is\n+     * associated with the class descriptor's handle.\n+     *\/\n+    private ObjectStreamClass readClassDesc(boolean unshared)\n+        throws IOException\n+    {\n+        byte tc = bin.peekByte();\n+\n+        return switch (tc) {\n+            case TC_NULL            -> (ObjectStreamClass) readNull();\n+            case TC_PROXYCLASSDESC  -> readProxyDesc(unshared);\n+            case TC_CLASSDESC       -> readNonProxyDesc(unshared);\n+            case TC_REFERENCE       -> {\n+                var d = (ObjectStreamClass) readHandle(unshared);\n+                \/\/ Should only reference initialized class descriptors\n+                d.checkInitialized();\n+                yield d;\n+            }\n+            default                 -> throw new StreamCorruptedException(\n+                    String.format(\"invalid type code: %02X\", tc));\n+        };\n+    }\n+\n+    private boolean isCustomSubclass() {\n+        \/\/ Return true if this class is a custom subclass of ObjectInputStream\n+        return getClass().getClassLoader()\n+                    != ObjectInputStream.class.getClassLoader();\n+    }\n+\n+    \/**\n+     * Reads in and returns class descriptor for a dynamic proxy class.  Sets\n+     * passHandle to proxy class descriptor's assigned handle.  If proxy class\n+     * descriptor cannot be resolved to a class in the local VM, a\n+     * ClassNotFoundException is associated with the descriptor's handle.\n+     *\/\n+    private ObjectStreamClass readProxyDesc(boolean unshared)\n+        throws IOException\n+    {\n+        if (bin.readByte() != TC_PROXYCLASSDESC) {\n+            throw new InternalError();\n+        }\n+\n+        ObjectStreamClass desc = new ObjectStreamClass();\n+        int descHandle = handles.assign(unshared ? unsharedMarker : desc);\n+        passHandle = NULL_HANDLE;\n+\n+        int numIfaces = bin.readInt();\n+        if (numIfaces > 65535) {\n+            \/\/ Report specification limit exceeded\n+            throw new InvalidObjectException(\"interface limit exceeded: \" +\n+                    numIfaces +\n+                    \", limit: \" + Caches.PROXY_INTERFACE_LIMIT);\n+        }\n+        String[] ifaces = new String[numIfaces];\n+        for (int i = 0; i < numIfaces; i++) {\n+            ifaces[i] = bin.readUTF();\n+        }\n+\n+        \/\/ Recheck against implementation limit and throw with interface names\n+        if (numIfaces > Caches.PROXY_INTERFACE_LIMIT) {\n+            throw new InvalidObjectException(\"interface limit exceeded: \" +\n+                    numIfaces +\n+                    \", limit: \" + Caches.PROXY_INTERFACE_LIMIT +\n+                    \"; \" + Arrays.toString(ifaces));\n+        }\n+        Class<?> cl = null;\n+        ClassNotFoundException resolveEx = null;\n+        bin.setBlockDataMode(true);\n+        try {\n+            if ((cl = resolveProxyClass(ifaces)) == null) {\n+                resolveEx = new ClassNotFoundException(\"null class\");\n+            } else if (!Proxy.isProxyClass(cl)) {\n+                throw new InvalidClassException(\"Not a proxy\");\n+            } else {\n+                \/\/ ReflectUtil.checkProxyPackageAccess makes a test\n+                \/\/ equivalent to isCustomSubclass so there's no need\n+                \/\/ to condition this call to isCustomSubclass == true here.\n+                ReflectUtil.checkProxyPackageAccess(\n+                        getClass().getClassLoader(),\n+                        cl.getInterfaces());\n+                \/\/ Filter the interfaces\n+                for (Class<?> clazz : cl.getInterfaces()) {\n+                    filterCheck(clazz, -1);\n+                }\n+            }\n+        } catch (ClassNotFoundException ex) {\n+            resolveEx = ex;\n+        } catch (IllegalAccessError aie) {\n+            throw new InvalidClassException(aie.getMessage(), aie);\n+        } catch (OutOfMemoryError memerr) {\n+            throw new InvalidObjectException(\"Proxy interface limit exceeded: \" +\n+                                             Arrays.toString(ifaces), memerr);\n+        }\n+\n+        \/\/ Call filterCheck on the class before reading anything else\n+        filterCheck(cl, -1);\n+\n+        skipCustomData();\n+\n+        try {\n+            totalObjectRefs++;\n+            depth++;\n+            desc.initProxy(cl, resolveEx, readClassDesc(false));\n+        } catch (OutOfMemoryError memerr) {\n+            throw new InvalidObjectException(\"Proxy interface limit exceeded: \" +\n+                                             Arrays.toString(ifaces), memerr);\n+        } finally {\n+            depth--;\n+        }\n+\n+        handles.finish(descHandle);\n+        passHandle = descHandle;\n+        return desc;\n+    }\n+\n+    \/**\n+     * Reads in and returns class descriptor for a class that is not a dynamic\n+     * proxy class.  Sets passHandle to class descriptor's assigned handle.  If\n+     * class descriptor cannot be resolved to a class in the local VM, a\n+     * ClassNotFoundException is associated with the descriptor's handle.\n+     *\/\n+    private ObjectStreamClass readNonProxyDesc(boolean unshared)\n+        throws IOException\n+    {\n+        if (bin.readByte() != TC_CLASSDESC) {\n+            throw new InternalError();\n+        }\n+\n+        ObjectStreamClass desc = new ObjectStreamClass();\n+        int descHandle = handles.assign(unshared ? unsharedMarker : desc);\n+        passHandle = NULL_HANDLE;\n+\n+        ObjectStreamClass readDesc;\n+        try {\n+            readDesc = readClassDescriptor();\n+        } catch (ClassNotFoundException ex) {\n+            throw new InvalidClassException(\"failed to read class descriptor\",\n+                                            ex);\n+        }\n+\n+        Class<?> cl = null;\n+        ClassNotFoundException resolveEx = null;\n+        bin.setBlockDataMode(true);\n+        final boolean checksRequired = isCustomSubclass();\n+        try {\n+            if ((cl = resolveClass(readDesc)) == null) {\n+                resolveEx = new ClassNotFoundException(\"null class\");\n+            } else if (checksRequired) {\n+                ReflectUtil.checkPackageAccess(cl);\n+            }\n+        } catch (ClassNotFoundException ex) {\n+            resolveEx = ex;\n+        }\n+\n+        \/\/ Call filterCheck on the class before reading anything else\n+        filterCheck(cl, -1);\n+\n+        skipCustomData();\n+\n+        try {\n+            totalObjectRefs++;\n+            depth++;\n+            desc.initNonProxy(readDesc, cl, resolveEx, readClassDesc(false));\n+\n+            if (cl != null) {\n+                \/\/ Check that serial filtering has been done on the local class descriptor's superclass,\n+                \/\/ in case it does not appear in the stream.\n+\n+                \/\/ Find the next super descriptor that has a local class descriptor.\n+                \/\/ Descriptors for which there is no local class are ignored.\n+                ObjectStreamClass superLocal = null;\n+                for (ObjectStreamClass sDesc = desc.getSuperDesc(); sDesc != null; sDesc = sDesc.getSuperDesc()) {\n+                    if ((superLocal = sDesc.getLocalDesc()) != null) {\n+                        break;\n+                    }\n+                }\n+\n+                \/\/ Scan local descriptor superclasses for a match with the local descriptor of the super found above.\n+                \/\/ For each super descriptor before the match, invoke the serial filter on the class.\n+                \/\/ The filter is invoked for each class that has not already been filtered\n+                \/\/ but would be filtered if the instance had been serialized by this Java runtime.\n+                for (ObjectStreamClass lDesc = desc.getLocalDesc().getSuperDesc();\n+                     lDesc != null && lDesc != superLocal;\n+                     lDesc = lDesc.getSuperDesc()) {\n+                    filterCheck(lDesc.forClass(), -1);\n+                }\n+            }\n+        } finally {\n+            depth--;\n+        }\n+\n+        handles.finish(descHandle);\n+        passHandle = descHandle;\n+\n+        return desc;\n+    }\n+\n+    \/**\n+     * Reads in and returns new string.  Sets passHandle to new string's\n+     * assigned handle.\n+     *\/\n+    private String readString(boolean unshared) throws IOException {\n+        byte tc = bin.readByte();\n+        String str = switch (tc) {\n+            case TC_STRING      -> bin.readUTF();\n+            case TC_LONGSTRING  -> bin.readLongUTF();\n+            default             -> throw new StreamCorruptedException(\n+                    String.format(\"invalid type code: %02X\", tc));\n+        };\n+        passHandle = handles.assign(unshared ? unsharedMarker : str);\n+        handles.finish(passHandle);\n+        return str;\n+    }\n+\n+    \/**\n+     * Reads in and returns array object, or null if array class is\n+     * unresolvable.  Sets passHandle to array's assigned handle.\n+     *\/\n+    private Object readArray(boolean unshared) throws IOException {\n+        if (bin.readByte() != TC_ARRAY) {\n+            throw new InternalError();\n+        }\n+\n+        ObjectStreamClass desc = readClassDesc(false);\n+        int len = bin.readInt();\n+        if (len < 0) {\n+            throw new StreamCorruptedException(\"Array length is negative\");\n+        }\n+        filterCheck(desc.forClass(), len);\n+\n+        Object array = null;\n+        Class<?> cl, ccl = null;\n+        if ((cl = desc.forClass()) != null) {\n+            ccl = cl.getComponentType();\n+            array = Array.newInstance(ccl, len);\n+        }\n+\n+        int arrayHandle = handles.assign(unshared ? unsharedMarker : array);\n+        ClassNotFoundException resolveEx = desc.getResolveException();\n+        if (resolveEx != null) {\n+            handles.markException(arrayHandle, resolveEx);\n+        }\n+\n+        if (ccl == null) {\n+            for (int i = 0; i < len; i++) {\n+                readObject0(Object.class, false);\n+            }\n+        } else if (ccl.isPrimitive()) {\n+            if (ccl == Integer.TYPE) {\n+                bin.readInts((int[]) array, 0, len);\n+            } else if (ccl == Byte.TYPE) {\n+                bin.readFully((byte[]) array, 0, len, true);\n+            } else if (ccl == Long.TYPE) {\n+                bin.readLongs((long[]) array, 0, len);\n+            } else if (ccl == Float.TYPE) {\n+                bin.readFloats((float[]) array, 0, len);\n+            } else if (ccl == Double.TYPE) {\n+                bin.readDoubles((double[]) array, 0, len);\n+            } else if (ccl == Short.TYPE) {\n+                bin.readShorts((short[]) array, 0, len);\n+            } else if (ccl == Character.TYPE) {\n+                bin.readChars((char[]) array, 0, len);\n+            } else if (ccl == Boolean.TYPE) {\n+                bin.readBooleans((boolean[]) array, 0, len);\n+            } else {\n+                throw new InternalError();\n+            }\n+        } else {\n+            Object[] oa = (Object[]) array;\n+            for (int i = 0; i < len; i++) {\n+                oa[i] = readObject0(Object.class, false);\n+                handles.markDependency(arrayHandle, passHandle);\n+            }\n+        }\n+\n+        handles.finish(arrayHandle);\n+        passHandle = arrayHandle;\n+        return array;\n+    }\n+\n+    \/**\n+     * Reads in and returns enum constant, or null if enum type is\n+     * unresolvable.  Sets passHandle to enum constant's assigned handle.\n+     *\/\n+    private Enum<?> readEnum(boolean unshared) throws IOException {\n+        if (bin.readByte() != TC_ENUM) {\n+            throw new InternalError();\n+        }\n+\n+        ObjectStreamClass desc = readClassDesc(false);\n+        if (!desc.isEnum()) {\n+            throw new InvalidClassException(\"non-enum class: \" + desc);\n+        }\n+\n+        int enumHandle = handles.assign(unshared ? unsharedMarker : null);\n+        ClassNotFoundException resolveEx = desc.getResolveException();\n+        if (resolveEx != null) {\n+            handles.markException(enumHandle, resolveEx);\n+        }\n+\n+        String name = readString(false);\n+        Enum<?> result = null;\n+        Class<?> cl = desc.forClass();\n+        if (cl != null) {\n+            try {\n+                @SuppressWarnings(\"unchecked\")\n+                Enum<?> en = Enum.valueOf((Class)cl, name);\n+                result = en;\n+            } catch (IllegalArgumentException ex) {\n+                throw new InvalidObjectException(\"enum constant \" +\n+                                                 name + \" does not exist in \" + cl, ex);\n+            }\n+            if (!unshared) {\n+                handles.setObject(enumHandle, result);\n+            }\n+        }\n+\n+        handles.finish(enumHandle);\n+        passHandle = enumHandle;\n+        return result;\n+    }\n+\n+    \/**\n+     * Reads and returns \"ordinary\" (i.e., not a String, Class,\n+     * ObjectStreamClass, array, or enum constant) object, or null if object's\n+     * class is unresolvable (in which case a ClassNotFoundException will be\n+     * associated with object's handle).  Sets passHandle to object's assigned\n+     * handle.\n+     *\/\n+    private Object readOrdinaryObject(boolean unshared)\n+        throws IOException\n+    {\n+        if (bin.readByte() != TC_OBJECT) {\n+            throw new InternalError();\n+        }\n+\n+        ObjectStreamClass desc = readClassDesc(false);\n+        desc.checkDeserialize();\n+\n+        Class<?> cl = desc.forClass();\n+        if (cl == String.class || cl == Class.class\n+                || cl == ObjectStreamClass.class) {\n+            throw new InvalidClassException(\"invalid class descriptor\");\n+        }\n+\n+        Object obj;\n+        try {\n+            obj = desc.isInstantiable() ? desc.newInstance() : null;\n+        } catch (Exception ex) {\n+            throw new InvalidClassException(desc.forClass().getName(),\n+                                            \"unable to create instance\", ex);\n+        }\n+\n+        passHandle = handles.assign(unshared ? unsharedMarker : obj);\n+        ClassNotFoundException resolveEx = desc.getResolveException();\n+        if (resolveEx != null) {\n+            handles.markException(passHandle, resolveEx);\n+        }\n+\n+        final boolean isRecord = desc.isRecord();\n+        if (isRecord) {\n+            assert obj == null;\n+            obj = readRecord(desc);\n+            if (!unshared)\n+                handles.setObject(passHandle, obj);\n+        } else if (desc.isExternalizable()) {\n+            readExternalData((Externalizable) obj, desc);\n+        } else {\n+            readSerialData(obj, desc);\n+        }\n+\n+        handles.finish(passHandle);\n+\n+        if (obj != null &&\n+            handles.lookupException(passHandle) == null &&\n+            desc.hasReadResolveMethod())\n+        {\n+            Object rep = desc.invokeReadResolve(obj);\n+            if (unshared && rep.getClass().isArray()) {\n+                rep = cloneArray(rep);\n+            }\n+            if (rep != obj) {\n+                \/\/ Filter the replacement object\n+                if (rep != null) {\n+                    if (rep.getClass().isArray()) {\n+                        filterCheck(rep.getClass(), Array.getLength(rep));\n+                    } else {\n+                        filterCheck(rep.getClass(), -1);\n+                    }\n+                }\n+                handles.setObject(passHandle, obj = rep);\n+            }\n+        }\n+\n+        return obj;\n+    }\n+\n+    \/**\n+     * If obj is non-null, reads externalizable data by invoking readExternal()\n+     * method of obj; otherwise, attempts to skip over externalizable data.\n+     * Expects that passHandle is set to obj's handle before this method is\n+     * called.\n+     *\/\n+    private void readExternalData(Externalizable obj, ObjectStreamClass desc)\n+        throws IOException\n+    {\n+        SerialCallbackContext oldContext = curContext;\n+        if (oldContext != null)\n+            oldContext.check();\n+        curContext = null;\n+        try {\n+            boolean blocked = desc.hasBlockExternalData();\n+            if (blocked) {\n+                bin.setBlockDataMode(true);\n+            }\n+            if (obj != null) {\n+                try {\n+                    obj.readExternal(this);\n+                } catch (ClassNotFoundException ex) {\n+                    \/*\n+                     * In most cases, the handle table has already propagated\n+                     * a CNFException to passHandle at this point; this mark\n+                     * call is included to address cases where the readExternal\n+                     * method has cons'ed and thrown a new CNFException of its\n+                     * own.\n+                     *\/\n+                     handles.markException(passHandle, ex);\n+                }\n+            }\n+            if (blocked) {\n+                skipCustomData();\n+            }\n+        } finally {\n+            if (oldContext != null)\n+                oldContext.check();\n+            curContext = oldContext;\n+        }\n+        \/*\n+         * At this point, if the externalizable data was not written in\n+         * block-data form and either the externalizable class doesn't exist\n+         * locally (i.e., obj == null) or readExternal() just threw a\n+         * CNFException, then the stream is probably in an inconsistent state,\n+         * since some (or all) of the externalizable data may not have been\n+         * consumed.  Since there's no \"correct\" action to take in this case,\n+         * we mimic the behavior of past serialization implementations and\n+         * blindly hope that the stream is in sync; if it isn't and additional\n+         * externalizable data remains in the stream, a subsequent read will\n+         * most likely throw a StreamCorruptedException.\n+         *\/\n+    }\n+\n+    \/** Reads a record. *\/\n+    private Object readRecord(ObjectStreamClass desc) throws IOException {\n+        ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();\n+        if (slots.length != 1) {\n+            \/\/ skip any superclass stream field values\n+            for (int i = 0; i < slots.length-1; i++) {\n+                if (slots[i].hasData) {\n+                    new FieldValues(slots[i].desc, true);\n+                }\n+            }\n+        }\n+\n+        FieldValues fieldValues = new FieldValues(desc, true);\n+\n+        \/\/ get canonical record constructor adapted to take two arguments:\n+        \/\/ - byte[] primValues\n+        \/\/ - Object[] objValues\n+        \/\/ and return Object\n+        MethodHandle ctrMH = RecordSupport.deserializationCtr(desc);\n+\n+        try {\n+            return (Object) ctrMH.invokeExact(fieldValues.primValues, fieldValues.objValues);\n+        } catch (Exception e) {\n+            throw new InvalidObjectException(e.getMessage(), e);\n+        } catch (Error e) {\n+            throw e;\n+        } catch (Throwable t) {\n+            throw new InvalidObjectException(\"ReflectiveOperationException \" +\n+                                             \"during deserialization\", t);\n+        }\n+    }\n+\n+    \/**\n+     * Reads (or attempts to skip, if obj is null or is tagged with a\n+     * ClassNotFoundException) instance data for each serializable class of\n+     * object in stream, from superclass to subclass.  Expects that passHandle\n+     * is set to obj's handle before this method is called.\n+     *\/\n+    private void readSerialData(Object obj, ObjectStreamClass desc)\n+        throws IOException\n+    {\n+        ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();\n+        \/\/ Best effort Failure Atomicity; slotValues will be non-null if field\n+        \/\/ values can be set after reading all field data in the hierarchy.\n+        \/\/ Field values can only be set after reading all data if there are no\n+        \/\/ user observable methods in the hierarchy, readObject(NoData). The\n+        \/\/ top most Serializable class in the hierarchy can be skipped.\n+        FieldValues[] slotValues = null;\n+\n+        boolean hasSpecialReadMethod = false;\n+        for (int i = 1; i < slots.length; i++) {\n+            ObjectStreamClass slotDesc = slots[i].desc;\n+            if (slotDesc.hasReadObjectMethod()\n+                  || slotDesc.hasReadObjectNoDataMethod()) {\n+                hasSpecialReadMethod = true;\n+                break;\n+            }\n+        }\n+        \/\/ No special read methods, can store values and defer setting.\n+        if (!hasSpecialReadMethod)\n+            slotValues = new FieldValues[slots.length];\n+\n+        for (int i = 0; i < slots.length; i++) {\n+            ObjectStreamClass slotDesc = slots[i].desc;\n+\n+            if (slots[i].hasData) {\n+                if (obj == null || handles.lookupException(passHandle) != null) {\n+                    \/\/ Read fields of the current descriptor into a new FieldValues and discard\n+                    new FieldValues(slotDesc, true);\n+                } else if (slotDesc.hasReadObjectMethod()) {\n+                    SerialCallbackContext oldContext = curContext;\n+                    if (oldContext != null)\n+                        oldContext.check();\n+                    try {\n+                        curContext = new SerialCallbackContext(obj, slotDesc);\n+\n+                        bin.setBlockDataMode(true);\n+                        slotDesc.invokeReadObject(obj, this);\n+                    } catch (ClassNotFoundException ex) {\n+                        \/*\n+                         * In most cases, the handle table has already\n+                         * propagated a CNFException to passHandle at this\n+                         * point; this mark call is included to address cases\n+                         * where the custom readObject method has cons'ed and\n+                         * thrown a new CNFException of its own.\n+                         *\/\n+                        handles.markException(passHandle, ex);\n+                    } finally {\n+                        curContext.setUsed();\n+                        if (oldContext!= null)\n+                            oldContext.check();\n+                        curContext = oldContext;\n+                    }\n+\n+                    \/*\n+                     * defaultDataEnd may have been set indirectly by custom\n+                     * readObject() method when calling defaultReadObject() or\n+                     * readFields(); clear it to restore normal read behavior.\n+                     *\/\n+                    defaultDataEnd = false;\n+                } else {\n+                    \/\/ Read fields of the current descriptor into a new FieldValues\n+                    FieldValues values = new FieldValues(slotDesc, true);\n+                    if (slotValues != null) {\n+                        slotValues[i] = values;\n+                    } else if (obj != null) {\n+                        values.defaultCheckFieldValues(obj);\n+                        values.defaultSetFieldValues(obj);\n+                    }\n+                }\n+\n+                if (slotDesc.hasWriteObjectData()) {\n+                    skipCustomData();\n+                } else {\n+                    bin.setBlockDataMode(false);\n+                }\n+            } else {\n+                if (obj != null &&\n+                    slotDesc.hasReadObjectNoDataMethod() &&\n+                    handles.lookupException(passHandle) == null)\n+                {\n+                    slotDesc.invokeReadObjectNoData(obj);\n+                }\n+            }\n+        }\n+\n+        if (obj != null && slotValues != null) {\n+            \/\/ Check that the non-primitive types are assignable for all slots\n+            \/\/ before assigning.\n+            for (int i = 0; i < slots.length; i++) {\n+                if (slotValues[i] != null)\n+                    slotValues[i].defaultCheckFieldValues(obj);\n+            }\n+            for (int i = 0; i < slots.length; i++) {\n+                if (slotValues[i] != null)\n+                    slotValues[i].defaultSetFieldValues(obj);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Skips over all block data and objects until TC_ENDBLOCKDATA is\n+     * encountered.\n+     *\/\n+    private void skipCustomData() throws IOException {\n+        int oldHandle = passHandle;\n+        for (;;) {\n+            if (bin.getBlockDataMode()) {\n+                bin.skipBlockData();\n+                bin.setBlockDataMode(false);\n+            }\n+            switch (bin.peekByte()) {\n+                case TC_BLOCKDATA:\n+                case TC_BLOCKDATALONG:\n+                    bin.setBlockDataMode(true);\n+                    break;\n+\n+                case TC_ENDBLOCKDATA:\n+                    bin.readByte();\n+                    passHandle = oldHandle;\n+                    return;\n+\n+                default:\n+                    readObject0(Object.class, false);\n+                    break;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Reads in and returns IOException that caused serialization to abort.\n+     * All stream state is discarded prior to reading in fatal exception.  Sets\n+     * passHandle to fatal exception's handle.\n+     *\/\n+    private IOException readFatalException() throws IOException {\n+        if (bin.readByte() != TC_EXCEPTION) {\n+            throw new InternalError();\n+        }\n+        clear();\n+        \/\/ Check that an object follows the TC_EXCEPTION typecode\n+        byte tc = bin.peekByte();\n+        if (tc != TC_OBJECT &&\n+            tc != TC_REFERENCE) {\n+            throw new StreamCorruptedException(\n+                    String.format(\"invalid type code: %02X\", tc));\n+        }\n+        return (IOException) readObject0(Object.class, false);\n+    }\n+\n+    \/**\n+     * If recursion depth is 0, clears internal data structures; otherwise,\n+     * throws a StreamCorruptedException.  This method is called when a\n+     * TC_RESET typecode is encountered.\n+     *\/\n+    private void handleReset() throws StreamCorruptedException {\n+        if (depth > 0) {\n+            throw new StreamCorruptedException(\n+                \"unexpected reset; recursion depth: \" + depth);\n+        }\n+        clear();\n+    }\n+\n+    \/**\n+     * Returns the first non-null and non-platform class loader (not counting\n+     * class loaders of generated reflection implementation classes) up the\n+     * execution stack, or the platform class loader if only code from the\n+     * bootstrap and platform class loader is on the stack.\n+     *\/\n+    private static ClassLoader latestUserDefinedLoader() {\n+        return jdk.internal.misc.VM.latestUserDefinedLoader();\n+    }\n+\n+    \/**\n+     * Default GetField implementation.\n+     *\/\n+    private final class FieldValues extends GetField {\n+\n+        \/** class descriptor describing serializable fields *\/\n+        private final ObjectStreamClass desc;\n+        \/** primitive field values *\/\n+        final byte[] primValues;\n+        \/** object field values *\/\n+        final Object[] objValues;\n+        \/** object field value handles *\/\n+        private final int[] objHandles;\n+\n+        \/**\n+         * Creates FieldValues object for reading fields defined in given\n+         * class descriptor.\n+         * @param desc the ObjectStreamClass to read\n+         * @param recordDependencies if true, record the dependencies\n+         *                           from current PassHandle and the object's read.\n+         *\/\n+        FieldValues(ObjectStreamClass desc, boolean recordDependencies) throws IOException {\n+            this.desc = desc;\n+\n+            int primDataSize = desc.getPrimDataSize();\n+            primValues = (primDataSize > 0) ? new byte[primDataSize] : null;\n+            if (primDataSize > 0) {\n+                bin.readFully(primValues, 0, primDataSize, false);\n+            }\n+\n+            int numObjFields = desc.getNumObjFields();\n+            objValues = (numObjFields > 0) ? new Object[numObjFields] : null;\n+            objHandles = (numObjFields > 0) ? new int[numObjFields] : null;\n+            if (numObjFields > 0) {\n+                int objHandle = passHandle;\n+                ObjectStreamField[] fields = desc.getFields(false);\n+                int numPrimFields = fields.length - objValues.length;\n+                for (int i = 0; i < objValues.length; i++) {\n+                    ObjectStreamField f = fields[numPrimFields + i];\n+                    objValues[i] = readObject0(Object.class, f.isUnshared());\n+                    objHandles[i] = passHandle;\n+                    if (recordDependencies && f.getField() != null) {\n+                        handles.markDependency(objHandle, passHandle);\n+                    }\n+                }\n+                passHandle = objHandle;\n+            }\n+        }\n+\n+        public ObjectStreamClass getObjectStreamClass() {\n+            return desc;\n+        }\n+\n+        public boolean defaulted(String name) {\n+            return (getFieldOffset(name, null) < 0);\n+        }\n+\n+        public boolean get(String name, boolean val) {\n+            int off = getFieldOffset(name, Boolean.TYPE);\n+            return (off >= 0) ? ByteArray.getBoolean(primValues, off) : val;\n+        }\n+\n+        public byte get(String name, byte val) {\n+            int off = getFieldOffset(name, Byte.TYPE);\n+            return (off >= 0) ? primValues[off] : val;\n+        }\n+\n+        public char get(String name, char val) {\n+            int off = getFieldOffset(name, Character.TYPE);\n+            return (off >= 0) ? ByteArray.getChar(primValues, off) : val;\n+        }\n+\n+        public short get(String name, short val) {\n+            int off = getFieldOffset(name, Short.TYPE);\n+            return (off >= 0) ? ByteArray.getShort(primValues, off) : val;\n+        }\n+\n+        public int get(String name, int val) {\n+            int off = getFieldOffset(name, Integer.TYPE);\n+            return (off >= 0) ? ByteArray.getInt(primValues, off) : val;\n+        }\n+\n+        public float get(String name, float val) {\n+            int off = getFieldOffset(name, Float.TYPE);\n+            return (off >= 0) ? ByteArray.getFloat(primValues, off) : val;\n+        }\n+\n+        public long get(String name, long val) {\n+            int off = getFieldOffset(name, Long.TYPE);\n+            return (off >= 0) ? ByteArray.getLong(primValues, off) : val;\n+        }\n+\n+        public double get(String name, double val) {\n+            int off = getFieldOffset(name, Double.TYPE);\n+            return (off >= 0) ? ByteArray.getDouble(primValues, off) : val;\n+        }\n+\n+        public Object get(String name, Object val) throws ClassNotFoundException {\n+            int off = getFieldOffset(name, Object.class);\n+            if (off >= 0) {\n+                int objHandle = objHandles[off];\n+                handles.markDependency(passHandle, objHandle);\n+                ClassNotFoundException ex = handles.lookupException(objHandle);\n+                if (ex == null)\n+                    return objValues[off];\n+                if (Caches.GETFIELD_CNFE_RETURNS_NULL) {\n+                    \/\/ Revert to the prior behavior; return null instead of CNFE\n+                    return null;\n+                }\n+                throw ex;\n+            } else {\n+                return val;\n+            }\n+        }\n+\n+        \/** Throws ClassCastException if any value is not assignable. *\/\n+        void defaultCheckFieldValues(Object obj) {\n+            if (objValues != null)\n+                desc.checkObjFieldValueTypes(obj, objValues);\n+        }\n+\n+        private void defaultSetFieldValues(Object obj) {\n+            if (primValues != null)\n+                desc.setPrimFieldValues(obj, primValues);\n+            if (objValues != null)\n+                desc.setObjFieldValues(obj, objValues);\n+        }\n+\n+        \/**\n+         * Returns offset of field with given name and type.  A specified type\n+         * of null matches all types, Object.class matches all non-primitive\n+         * types, and any other non-null type matches assignable types only.\n+         * If no matching field is found in the (incoming) class\n+         * descriptor but a matching field is present in the associated local\n+         * class descriptor, returns -1.  Throws IllegalArgumentException if\n+         * neither incoming nor local class descriptor contains a match.\n+         *\/\n+        private int getFieldOffset(String name, Class<?> type) {\n+            ObjectStreamField field = desc.getField(name, type);\n+            if (field != null) {\n+                return field.getOffset();\n+            } else if (desc.getLocalDesc().getField(name, type) != null) {\n+                return -1;\n+            } else {\n+                throw new IllegalArgumentException(\"no such field \" + name +\n+                                                   \" with type \" + type);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Prioritized list of callbacks to be performed once object graph has been\n+     * completely deserialized.\n+     *\/\n+    private static class ValidationList {\n+\n+        private static class Callback {\n+            final ObjectInputValidation obj;\n+            final int priority;\n+            Callback next;\n+            @SuppressWarnings(\"removal\")\n+            final AccessControlContext acc;\n+\n+            Callback(ObjectInputValidation obj, int priority, Callback next,\n+                @SuppressWarnings(\"removal\") AccessControlContext acc)\n+            {\n+                this.obj = obj;\n+                this.priority = priority;\n+                this.next = next;\n+                this.acc = acc;\n+            }\n+        }\n+\n+        \/** linked list of callbacks *\/\n+        private Callback list;\n+\n+        \/**\n+         * Creates new (empty) ValidationList.\n+         *\/\n+        ValidationList() {\n+        }\n+\n+        \/**\n+         * Registers callback.  Throws InvalidObjectException if callback\n+         * object is null.\n+         *\/\n+        void register(ObjectInputValidation obj, int priority)\n+            throws InvalidObjectException\n+        {\n+            if (obj == null) {\n+                throw new InvalidObjectException(\"null callback\");\n+            }\n+\n+            Callback prev = null, cur = list;\n+            while (cur != null && priority < cur.priority) {\n+                prev = cur;\n+                cur = cur.next;\n+            }\n+            @SuppressWarnings(\"removal\")\n+            AccessControlContext acc = AccessController.getContext();\n+            if (prev != null) {\n+                prev.next = new Callback(obj, priority, cur, acc);\n+            } else {\n+                list = new Callback(obj, priority, list, acc);\n+            }\n+        }\n+\n+        \/**\n+         * Invokes all registered callbacks and clears the callback list.\n+         * Callbacks with higher priorities are called first; those with equal\n+         * priorities may be called in any order.  If any of the callbacks\n+         * throws an InvalidObjectException, the callback process is terminated\n+         * and the exception propagated upwards.\n+         *\/\n+        @SuppressWarnings(\"removal\")\n+        void doCallbacks() throws InvalidObjectException {\n+            try {\n+                while (list != null) {\n+                    AccessController.doPrivileged(\n+                        new PrivilegedExceptionAction<Void>()\n+                    {\n+                        public Void run() throws InvalidObjectException {\n+                            list.obj.validateObject();\n+                            return null;\n+                        }\n+                    }, list.acc);\n+                    list = list.next;\n+                }\n+            } catch (PrivilegedActionException ex) {\n+                list = null;\n+                throw (InvalidObjectException) ex.getException();\n+            }\n+        }\n+\n+        \/**\n+         * Resets the callback list to its initial (empty) state.\n+         *\/\n+        public void clear() {\n+            list = null;\n+        }\n+    }\n+\n+    \/**\n+     * Hold a snapshot of values to be passed to an ObjectInputFilter.\n+     *\/\n+    static class FilterValues implements ObjectInputFilter.FilterInfo {\n+        final Class<?> clazz;\n+        final long arrayLength;\n+        final long totalObjectRefs;\n+        final long depth;\n+        final long streamBytes;\n+\n+        public FilterValues(Class<?> clazz, long arrayLength, long totalObjectRefs,\n+                            long depth, long streamBytes) {\n+            this.clazz = clazz;\n+            this.arrayLength = arrayLength;\n+            this.totalObjectRefs = totalObjectRefs;\n+            this.depth = depth;\n+            this.streamBytes = streamBytes;\n+        }\n+\n+        @Override\n+        public Class<?> serialClass() {\n+            return clazz;\n+        }\n+\n+        @Override\n+        public long arrayLength() {\n+            return arrayLength;\n+        }\n+\n+        @Override\n+        public long references() {\n+            return totalObjectRefs;\n+        }\n+\n+        @Override\n+        public long depth() {\n+            return depth;\n+        }\n+\n+        @Override\n+        public long streamBytes() {\n+            return streamBytes;\n+        }\n+    }\n+\n+    \/**\n+     * Input stream supporting single-byte peek operations.\n+     *\/\n+    private static class PeekInputStream extends InputStream {\n+\n+        \/** underlying stream *\/\n+        private final InputStream in;\n+        \/** peeked byte *\/\n+        private int peekb = -1;\n+        \/** total bytes read from the stream *\/\n+        private long totalBytesRead = 0;\n+\n+        \/**\n+         * Creates new PeekInputStream on top of given underlying stream.\n+         *\/\n+        PeekInputStream(InputStream in) {\n+            this.in = in;\n+        }\n+\n+        \/**\n+         * Peeks at next byte value in stream.  Similar to read(), except\n+         * that it does not consume the read value.\n+         *\/\n+        int peek() throws IOException {\n+            if (peekb >= 0) {\n+                return peekb;\n+            }\n+            peekb = in.read();\n+            totalBytesRead += peekb >= 0 ? 1 : 0;\n+            return peekb;\n+        }\n+\n+        public int read() throws IOException {\n+            if (peekb >= 0) {\n+                int v = peekb;\n+                peekb = -1;\n+                return v;\n+            } else {\n+                int nbytes = in.read();\n+                totalBytesRead += nbytes >= 0 ? 1 : 0;\n+                return nbytes;\n+            }\n+        }\n+\n+        public int read(byte[] b, int off, int len) throws IOException {\n+            int nbytes;\n+            if (len == 0) {\n+                return 0;\n+            } else if (peekb < 0) {\n+                nbytes = in.read(b, off, len);\n+                totalBytesRead += nbytes >= 0 ? nbytes : 0;\n+                return nbytes;\n+            } else {\n+                b[off++] = (byte) peekb;\n+                len--;\n+                peekb = -1;\n+                nbytes = in.read(b, off, len);\n+                totalBytesRead += nbytes >= 0 ? nbytes : 0;\n+                return (nbytes >= 0) ? (nbytes + 1) : 1;\n+            }\n+        }\n+\n+        void readFully(byte[] b, int off, int len) throws IOException {\n+            int n = 0;\n+            while (n < len) {\n+                int count = read(b, off + n, len - n);\n+                if (count < 0) {\n+                    throw new EOFException();\n+                }\n+                n += count;\n+            }\n+        }\n+\n+        public long skip(long n) throws IOException {\n+            if (n <= 0) {\n+                return 0;\n+            }\n+            int skipped = 0;\n+            if (peekb >= 0) {\n+                peekb = -1;\n+                skipped++;\n+                n--;\n+            }\n+            n = skipped + in.skip(n);\n+            totalBytesRead += n;\n+            return n;\n+        }\n+\n+        public int available() throws IOException {\n+            return in.available() + ((peekb >= 0) ? 1 : 0);\n+        }\n+\n+        public void close() throws IOException {\n+            in.close();\n+        }\n+\n+        public long getBytesRead() {\n+            return totalBytesRead;\n+        }\n+    }\n+\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    \/**\n+     * Performs a \"freeze\" action, required to adhere to final field semantics.\n+     *\n+     * <p> This method can be called unconditionally before returning the graph,\n+     * from the topmost readObject call, since it is expected that the\n+     * additional cost of the freeze action is negligible compared to\n+     * reconstituting even the most simple graph.\n+     *\n+     * <p> Nested calls to readObject do not issue freeze actions because the\n+     * sub-graph returned from a nested call is not guaranteed to be fully\n+     * initialized yet (possible cycles).\n+     *\/\n+    private void freeze() {\n+        \/\/ Issue a StoreStore|StoreLoad fence, which is at least sufficient\n+        \/\/ to provide final-freeze semantics.\n+        UNSAFE.storeFence();\n+    }\n+\n+    \/**\n+     * Input stream with two modes: in default mode, inputs data written in the\n+     * same format as DataOutputStream; in \"block data\" mode, inputs data\n+     * bracketed by block data markers (see object serialization specification\n+     * for details).  Buffering depends on block data mode: when in default\n+     * mode, no data is buffered in advance; when in block data mode, all data\n+     * for the current data block is read in at once (and buffered).\n+     *\/\n+    private class BlockDataInputStream\n+        extends InputStream implements DataInput\n+    {\n+        \/** maximum data block length *\/\n+        private static final int MAX_BLOCK_SIZE = 1024;\n+        \/** maximum data block header length *\/\n+        private static final int MAX_HEADER_SIZE = 5;\n+        \/** (tunable) length of char buffer (for reading strings) *\/\n+        private static final int CHAR_BUF_SIZE = 256;\n+        \/** readBlockHeader() return value indicating header read may block *\/\n+        private static final int HEADER_BLOCKED = -2;\n+\n+        \/** buffer for reading general\/block data *\/\n+        private final byte[] buf = new byte[MAX_BLOCK_SIZE];\n+        \/** buffer for reading block data headers *\/\n+        private final byte[] hbuf = new byte[MAX_HEADER_SIZE];\n+        \/** char buffer for fast string reads *\/\n+        private final char[] cbuf = new char[CHAR_BUF_SIZE];\n+\n+        \/** block data mode *\/\n+        private boolean blkmode = false;\n+\n+        \/\/ block data state fields; values meaningful only when blkmode true\n+        \/** current offset into buf *\/\n+        private int pos = 0;\n+        \/** end offset of valid data in buf, or -1 if no more block data *\/\n+        private int end = -1;\n+        \/** number of bytes in current block yet to be read from stream *\/\n+        private int unread = 0;\n+\n+        \/** underlying stream (wrapped in peekable filter stream) *\/\n+        private final PeekInputStream in;\n+        \/** loopback stream (for data reads that span data blocks) *\/\n+        private final DataInputStream din;\n+\n+        \/**\n+         * Creates new BlockDataInputStream on top of given underlying stream.\n+         * Block data mode is turned off by default.\n+         *\/\n+        BlockDataInputStream(InputStream in) {\n+            this.in = new PeekInputStream(in);\n+            din = new DataInputStream(this);\n+        }\n+\n+        \/**\n+         * Sets block data mode to the given mode (true == on, false == off)\n+         * and returns the previous mode value.  If the new mode is the same as\n+         * the old mode, no action is taken.  Throws IllegalStateException if\n+         * block data mode is being switched from on to off while unconsumed\n+         * block data is still present in the stream.\n+         *\/\n+        boolean setBlockDataMode(boolean newmode) throws IOException {\n+            if (blkmode == newmode) {\n+                return blkmode;\n+            }\n+            if (newmode) {\n+                pos = 0;\n+                end = 0;\n+                unread = 0;\n+            } else if (pos < end) {\n+                throw new IllegalStateException(\"unread block data\");\n+            }\n+            blkmode = newmode;\n+            return !blkmode;\n+        }\n+\n+        \/**\n+         * Returns true if the stream is currently in block data mode, false\n+         * otherwise.\n+         *\/\n+        boolean getBlockDataMode() {\n+            return blkmode;\n+        }\n+\n+        \/**\n+         * If in block data mode, skips to the end of the current group of data\n+         * blocks (but does not unset block data mode).  If not in block data\n+         * mode, throws an IllegalStateException.\n+         *\/\n+        void skipBlockData() throws IOException {\n+            if (!blkmode) {\n+                throw new IllegalStateException(\"not in block data mode\");\n+            }\n+            while (end >= 0) {\n+                refill();\n+            }\n+        }\n+\n+        \/**\n+         * Attempts to read in the next block data header (if any).  If\n+         * canBlock is false and a full header cannot be read without possibly\n+         * blocking, returns HEADER_BLOCKED, else if the next element in the\n+         * stream is a block data header, returns the block data length\n+         * specified by the header, else returns -1.\n+         *\/\n+        private int readBlockHeader(boolean canBlock) throws IOException {\n+            if (defaultDataEnd) {\n+                \/*\n+                 * Fix for 4360508: stream is currently at the end of a field\n+                 * value block written via default serialization; since there\n+                 * is no terminating TC_ENDBLOCKDATA tag, simulate\n+                 * end-of-custom-data behavior explicitly.\n+                 *\/\n+                return -1;\n+            }\n+            try {\n+                for (;;) {\n+                    int avail = canBlock ? Integer.MAX_VALUE : in.available();\n+                    if (avail == 0) {\n+                        return HEADER_BLOCKED;\n+                    }\n+\n+                    int tc = in.peek();\n+                    switch (tc) {\n+                        case TC_BLOCKDATA:\n+                            if (avail < 2) {\n+                                return HEADER_BLOCKED;\n+                            }\n+                            in.readFully(hbuf, 0, 2);\n+                            return hbuf[1] & 0xFF;\n+\n+                        case TC_BLOCKDATALONG:\n+                            if (avail < 5) {\n+                                return HEADER_BLOCKED;\n+                            }\n+                            in.readFully(hbuf, 0, 5);\n+                            int len = ByteArray.getInt(hbuf, 1);\n+                            if (len < 0) {\n+                                throw new StreamCorruptedException(\n+                                    \"illegal block data header length: \" +\n+                                    len);\n+                            }\n+                            return len;\n+\n+                        \/*\n+                         * TC_RESETs may occur in between data blocks.\n+                         * Unfortunately, this case must be parsed at a lower\n+                         * level than other typecodes, since primitive data\n+                         * reads may span data blocks separated by a TC_RESET.\n+                         *\/\n+                        case TC_RESET:\n+                            in.read();\n+                            handleReset();\n+                            break;\n+\n+                        default:\n+                            if (tc >= 0 && (tc < TC_BASE || tc > TC_MAX)) {\n+                                throw new StreamCorruptedException(\n+                                    String.format(\"invalid type code: %02X\",\n+                                    tc));\n+                            }\n+                            return -1;\n+                    }\n+                }\n+            } catch (EOFException ex) {\n+                throw new StreamCorruptedException(\n+                    \"unexpected EOF while reading block data header\");\n+            }\n+        }\n+\n+        \/**\n+         * Refills internal buffer buf with block data.  Any data in buf at the\n+         * time of the call is considered consumed.  Sets the pos, end, and\n+         * unread fields to reflect the new amount of available block data; if\n+         * the next element in the stream is not a data block, sets pos and\n+         * unread to 0 and end to -1.\n+         *\/\n+        private void refill() throws IOException {\n+            try {\n+                do {\n+                    pos = 0;\n+                    if (unread > 0) {\n+                        int n =\n+                            in.read(buf, 0, Math.min(unread, MAX_BLOCK_SIZE));\n+                        if (n >= 0) {\n+                            end = n;\n+                            unread -= n;\n+                        } else {\n+                            throw new StreamCorruptedException(\n+                                \"unexpected EOF in middle of data block\");\n+                        }\n+                    } else {\n+                        int n = readBlockHeader(true);\n+                        if (n >= 0) {\n+                            end = 0;\n+                            unread = n;\n+                        } else {\n+                            end = -1;\n+                            unread = 0;\n+                        }\n+                    }\n+                } while (pos == end);\n+            } catch (IOException ex) {\n+                pos = 0;\n+                end = -1;\n+                unread = 0;\n+                throw ex;\n+            }\n+        }\n+\n+        \/**\n+         * If in block data mode, returns the number of unconsumed bytes\n+         * remaining in the current data block.  If not in block data mode,\n+         * throws an IllegalStateException.\n+         *\/\n+        int currentBlockRemaining() {\n+            if (blkmode) {\n+                return (end >= 0) ? (end - pos) + unread : 0;\n+            } else {\n+                throw new IllegalStateException();\n+            }\n+        }\n+\n+        \/**\n+         * Peeks at (but does not consume) and returns the next byte value in\n+         * the stream, or -1 if the end of the stream\/block data (if in block\n+         * data mode) has been reached.\n+         *\/\n+        int peek() throws IOException {\n+            if (blkmode) {\n+                if (pos == end) {\n+                    refill();\n+                }\n+                return (end >= 0) ? (buf[pos] & 0xFF) : -1;\n+            } else {\n+                return in.peek();\n+            }\n+        }\n+\n+        \/**\n+         * Peeks at (but does not consume) and returns the next byte value in\n+         * the stream, or throws EOFException if end of stream\/block data has\n+         * been reached.\n+         *\/\n+        byte peekByte() throws IOException {\n+            int val = peek();\n+            if (val < 0) {\n+                throw new EOFException();\n+            }\n+            return (byte) val;\n+        }\n+\n+\n+        \/* ----------------- generic input stream methods ------------------ *\/\n+        \/*\n+         * The following methods are equivalent to their counterparts in\n+         * InputStream, except that they interpret data block boundaries and\n+         * read the requested data from within data blocks when in block data\n+         * mode.\n+         *\/\n+\n+        public int read() throws IOException {\n+            if (blkmode) {\n+                if (pos == end) {\n+                    refill();\n+                }\n+                return (end >= 0) ? (buf[pos++] & 0xFF) : -1;\n+            } else {\n+                return in.read();\n+            }\n+        }\n+\n+        public int read(byte[] b, int off, int len) throws IOException {\n+            return read(b, off, len, false);\n+        }\n+\n+        public long skip(long len) throws IOException {\n+            long remain = len;\n+            while (remain > 0) {\n+                if (blkmode) {\n+                    if (pos == end) {\n+                        refill();\n+                    }\n+                    if (end < 0) {\n+                        break;\n+                    }\n+                    int nread = (int) Math.min(remain, end - pos);\n+                    remain -= nread;\n+                    pos += nread;\n+                } else {\n+                    int nread = (int) Math.min(remain, MAX_BLOCK_SIZE);\n+                    if ((nread = in.read(buf, 0, nread)) < 0) {\n+                        break;\n+                    }\n+                    remain -= nread;\n+                }\n+            }\n+            return len - remain;\n+        }\n+\n+        public int available() throws IOException {\n+            if (blkmode) {\n+                if ((pos == end) && (unread == 0)) {\n+                    int n;\n+                    while ((n = readBlockHeader(false)) == 0) ;\n+                    switch (n) {\n+                        case HEADER_BLOCKED:\n+                            break;\n+\n+                        case -1:\n+                            pos = 0;\n+                            end = -1;\n+                            break;\n+\n+                        default:\n+                            pos = 0;\n+                            end = 0;\n+                            unread = n;\n+                            break;\n+                    }\n+                }\n+                \/\/ avoid unnecessary call to in.available() if possible\n+                int unreadAvail = (unread > 0) ?\n+                    Math.min(in.available(), unread) : 0;\n+                return (end >= 0) ? (end - pos) + unreadAvail : 0;\n+            } else {\n+                return in.available();\n+            }\n+        }\n+\n+        public void close() throws IOException {\n+            if (blkmode) {\n+                pos = 0;\n+                end = -1;\n+                unread = 0;\n+            }\n+            in.close();\n+        }\n+\n+        \/**\n+         * Attempts to read len bytes into byte array b at offset off.  Returns\n+         * the number of bytes read, or -1 if the end of stream\/block data has\n+         * been reached.  If copy is true, reads values into an intermediate\n+         * buffer before copying them to b (to avoid exposing a reference to\n+         * b).\n+         *\/\n+        int read(byte[] b, int off, int len, boolean copy) throws IOException {\n+            if (len == 0) {\n+                return 0;\n+            } else if (blkmode) {\n+                if (pos == end) {\n+                    refill();\n+                }\n+                if (end < 0) {\n+                    return -1;\n+                }\n+                int nread = Math.min(len, end - pos);\n+                System.arraycopy(buf, pos, b, off, nread);\n+                pos += nread;\n+                return nread;\n+            } else if (copy) {\n+                int nread = in.read(buf, 0, Math.min(len, MAX_BLOCK_SIZE));\n+                if (nread > 0) {\n+                    System.arraycopy(buf, 0, b, off, nread);\n+                }\n+                return nread;\n+            } else {\n+                return in.read(b, off, len);\n+            }\n+        }\n+\n+        \/* ----------------- primitive data input methods ------------------ *\/\n+        \/*\n+         * The following methods are equivalent to their counterparts in\n+         * DataInputStream, except that they interpret data block boundaries\n+         * and read the requested data from within data blocks when in block\n+         * data mode.\n+         *\/\n+\n+        public void readFully(byte[] b) throws IOException {\n+            readFully(b, 0, b.length, false);\n+        }\n+\n+        public void readFully(byte[] b, int off, int len) throws IOException {\n+            readFully(b, off, len, false);\n+        }\n+\n+        public void readFully(byte[] b, int off, int len, boolean copy)\n+            throws IOException\n+        {\n+            while (len > 0) {\n+                int n = read(b, off, len, copy);\n+                if (n < 0) {\n+                    throw new EOFException();\n+                }\n+                off += n;\n+                len -= n;\n+            }\n+        }\n+\n+        public int skipBytes(int n) throws IOException {\n+            return din.skipBytes(n);\n+        }\n+\n+        public boolean readBoolean() throws IOException {\n+            int v = read();\n+            if (v < 0) {\n+                throw new EOFException();\n+            }\n+            return (v != 0);\n+        }\n+\n+        public byte readByte() throws IOException {\n+            int v = read();\n+            if (v < 0) {\n+                throw new EOFException();\n+            }\n+            return (byte) v;\n+        }\n+\n+        public int readUnsignedByte() throws IOException {\n+            int v = read();\n+            if (v < 0) {\n+                throw new EOFException();\n+            }\n+            return v;\n+        }\n+\n+        public char readChar() throws IOException {\n+            if (!blkmode) {\n+                pos = 0;\n+                in.readFully(buf, 0, 2);\n+            } else if (end - pos < 2) {\n+                return din.readChar();\n+            }\n+            char v = ByteArray.getChar(buf, pos);\n+            pos += 2;\n+            return v;\n+        }\n+\n+        public short readShort() throws IOException {\n+            if (!blkmode) {\n+                pos = 0;\n+                in.readFully(buf, 0, 2);\n+            } else if (end - pos < 2) {\n+                return din.readShort();\n+            }\n+            short v = ByteArray.getShort(buf, pos);\n+            pos += 2;\n+            return v;\n+        }\n+\n+        public int readUnsignedShort() throws IOException {\n+            if (!blkmode) {\n+                pos = 0;\n+                in.readFully(buf, 0, 2);\n+            } else if (end - pos < 2) {\n+                return din.readUnsignedShort();\n+            }\n+            int v = ByteArray.getShort(buf, pos) & 0xFFFF;\n+            pos += 2;\n+            return v;\n+        }\n+\n+        public int readInt() throws IOException {\n+            if (!blkmode) {\n+                pos = 0;\n+                in.readFully(buf, 0, 4);\n+            } else if (end - pos < 4) {\n+                return din.readInt();\n+            }\n+            int v = ByteArray.getInt(buf, pos);\n+            pos += 4;\n+            return v;\n+        }\n+\n+        public float readFloat() throws IOException {\n+            if (!blkmode) {\n+                pos = 0;\n+                in.readFully(buf, 0, 4);\n+            } else if (end - pos < 4) {\n+                return din.readFloat();\n+            }\n+            float v = ByteArray.getFloat(buf, pos);\n+            pos += 4;\n+            return v;\n+        }\n+\n+        public long readLong() throws IOException {\n+            if (!blkmode) {\n+                pos = 0;\n+                in.readFully(buf, 0, 8);\n+            } else if (end - pos < 8) {\n+                return din.readLong();\n+            }\n+            long v = ByteArray.getLong(buf, pos);\n+            pos += 8;\n+            return v;\n+        }\n+\n+        public double readDouble() throws IOException {\n+            if (!blkmode) {\n+                pos = 0;\n+                in.readFully(buf, 0, 8);\n+            } else if (end - pos < 8) {\n+                return din.readDouble();\n+            }\n+            double v = ByteArray.getDouble(buf, pos);\n+            pos += 8;\n+            return v;\n+        }\n+\n+        public String readUTF() throws IOException {\n+            return readUTFBody(readUnsignedShort());\n+        }\n+\n+        @SuppressWarnings(\"deprecation\")\n+        public String readLine() throws IOException {\n+            return din.readLine();      \/\/ deprecated, not worth optimizing\n+        }\n+\n+        \/* -------------- primitive data array input methods --------------- *\/\n+        \/*\n+         * The following methods read in spans of primitive data values.\n+         * Though equivalent to calling the corresponding primitive read\n+         * methods repeatedly, these methods are optimized for reading groups\n+         * of primitive data values more efficiently.\n+         *\/\n+\n+        void readBooleans(boolean[] v, int off, int len) throws IOException {\n+            int stop, endoff = off + len;\n+            while (off < endoff) {\n+                if (!blkmode) {\n+                    int span = Math.min(endoff - off, MAX_BLOCK_SIZE);\n+                    in.readFully(buf, 0, span);\n+                    stop = off + span;\n+                    pos = 0;\n+                } else if (end - pos < 1) {\n+                    v[off++] = din.readBoolean();\n+                    continue;\n+                } else {\n+                    stop = Math.min(endoff, off + end - pos);\n+                }\n+\n+                while (off < stop) {\n+                    v[off++] = ByteArray.getBoolean(buf, pos++);\n+                }\n+            }\n+        }\n+\n+        void readChars(char[] v, int off, int len) throws IOException {\n+            int stop, endoff = off + len;\n+            while (off < endoff) {\n+                if (!blkmode) {\n+                    int span = Math.min(endoff - off, MAX_BLOCK_SIZE >> 1);\n+                    in.readFully(buf, 0, span << 1);\n+                    stop = off + span;\n+                    pos = 0;\n+                } else if (end - pos < 2) {\n+                    v[off++] = din.readChar();\n+                    continue;\n+                } else {\n+                    stop = Math.min(endoff, off + ((end - pos) >> 1));\n+                }\n+\n+                while (off < stop) {\n+                    v[off++] = ByteArray.getChar(buf, pos);\n+                    pos += 2;\n+                }\n+            }\n+        }\n+\n+        void readShorts(short[] v, int off, int len) throws IOException {\n+            int stop, endoff = off + len;\n+            while (off < endoff) {\n+                if (!blkmode) {\n+                    int span = Math.min(endoff - off, MAX_BLOCK_SIZE >> 1);\n+                    in.readFully(buf, 0, span << 1);\n+                    stop = off + span;\n+                    pos = 0;\n+                } else if (end - pos < 2) {\n+                    v[off++] = din.readShort();\n+                    continue;\n+                } else {\n+                    stop = Math.min(endoff, off + ((end - pos) >> 1));\n+                }\n+\n+                while (off < stop) {\n+                    v[off++] = ByteArray.getShort(buf, pos);\n+                    pos += 2;\n+                }\n+            }\n+        }\n+\n+        void readInts(int[] v, int off, int len) throws IOException {\n+            int stop, endoff = off + len;\n+            while (off < endoff) {\n+                if (!blkmode) {\n+                    int span = Math.min(endoff - off, MAX_BLOCK_SIZE >> 2);\n+                    in.readFully(buf, 0, span << 2);\n+                    stop = off + span;\n+                    pos = 0;\n+                } else if (end - pos < 4) {\n+                    v[off++] = din.readInt();\n+                    continue;\n+                } else {\n+                    stop = Math.min(endoff, off + ((end - pos) >> 2));\n+                }\n+\n+                while (off < stop) {\n+                    v[off++] = ByteArray.getInt(buf, pos);\n+                    pos += 4;\n+                }\n+            }\n+        }\n+\n+        void readFloats(float[] v, int off, int len) throws IOException {\n+            int stop, endoff = off + len;\n+            while (off < endoff) {\n+                if (!blkmode) {\n+                    int span = Math.min(endoff - off, MAX_BLOCK_SIZE >> 2);\n+                    in.readFully(buf, 0, span << 2);\n+                    stop = off + span;\n+                    pos = 0;\n+                } else if (end - pos < 4) {\n+                    v[off++] = din.readFloat();\n+                    continue;\n+                } else {\n+                    stop = Math.min(endoff, ((end - pos) >> 2));\n+                }\n+\n+                while (off < stop) {\n+                    v[off++] = ByteArray.getFloat(buf, pos);\n+                    pos += 4;\n+                }\n+            }\n+        }\n+\n+        void readLongs(long[] v, int off, int len) throws IOException {\n+            int stop, endoff = off + len;\n+            while (off < endoff) {\n+                if (!blkmode) {\n+                    int span = Math.min(endoff - off, MAX_BLOCK_SIZE >> 3);\n+                    in.readFully(buf, 0, span << 3);\n+                    stop = off + span;\n+                    pos = 0;\n+                } else if (end - pos < 8) {\n+                    v[off++] = din.readLong();\n+                    continue;\n+                } else {\n+                    stop = Math.min(endoff, off + ((end - pos) >> 3));\n+                }\n+\n+                while (off < stop) {\n+                    v[off++] = ByteArray.getLong(buf, pos);\n+                    pos += 8;\n+                }\n+            }\n+        }\n+\n+        void readDoubles(double[] v, int off, int len) throws IOException {\n+            int stop, endoff = off + len;\n+            while (off < endoff) {\n+                if (!blkmode) {\n+                    int span = Math.min(endoff - off, MAX_BLOCK_SIZE >> 3);\n+                    in.readFully(buf, 0, span << 3);\n+                    stop = off + span;\n+                    pos = 0;\n+                } else if (end - pos < 8) {\n+                    v[off++] = din.readDouble();\n+                    continue;\n+                } else {\n+                    stop = Math.min(endoff - off, ((end - pos) >> 3));\n+                }\n+\n+                while (off < stop) {\n+                    v[off++] = ByteArray.getDouble(buf, pos);\n+                    pos += 8;\n+                }\n+            }\n+        }\n+\n+        \/**\n+         * Reads in string written in \"long\" UTF format.  \"Long\" UTF format is\n+         * identical to standard UTF, except that it uses an 8 byte header\n+         * (instead of the standard 2 bytes) to convey the UTF encoding length.\n+         *\/\n+        String readLongUTF() throws IOException {\n+            return readUTFBody(readLong());\n+        }\n+\n+        \/**\n+         * Reads in the \"body\" (i.e., the UTF representation minus the 2-byte\n+         * or 8-byte length header) of a UTF encoding, which occupies the next\n+         * utflen bytes.\n+         *\/\n+        private String readUTFBody(long utflen) throws IOException {\n+            StringBuilder sbuf;\n+            if (utflen > 0 && utflen < Integer.MAX_VALUE) {\n+                \/\/ a reasonable initial capacity based on the UTF length\n+                int initialCapacity = Math.min((int)utflen, 0xFFFF);\n+                sbuf = new StringBuilder(initialCapacity);\n+            } else {\n+                sbuf = new StringBuilder();\n+            }\n+\n+            if (!blkmode) {\n+                end = pos = 0;\n+            }\n+\n+            while (utflen > 0) {\n+                int avail = end - pos;\n+                if (avail >= 3 || (long) avail == utflen) {\n+                    utflen -= readUTFSpan(sbuf, utflen);\n+                } else {\n+                    if (blkmode) {\n+                        \/\/ near block boundary, read one byte at a time\n+                        utflen -= readUTFChar(sbuf, utflen);\n+                    } else {\n+                        \/\/ shift and refill buffer manually\n+                        if (avail > 0) {\n+                            System.arraycopy(buf, pos, buf, 0, avail);\n+                        }\n+                        pos = 0;\n+                        end = (int) Math.min(MAX_BLOCK_SIZE, utflen);\n+                        in.readFully(buf, avail, end - avail);\n+                    }\n+                }\n+            }\n+\n+            return sbuf.toString();\n+        }\n+\n+        \/**\n+         * Reads span of UTF-encoded characters out of internal buffer\n+         * (starting at offset pos and ending at or before offset end),\n+         * consuming no more than utflen bytes.  Appends read characters to\n+         * sbuf.  Returns the number of bytes consumed.\n+         *\/\n+        private long readUTFSpan(StringBuilder sbuf, long utflen)\n+            throws IOException\n+        {\n+            int cpos = 0;\n+            int start = pos;\n+            int avail = Math.min(end - pos, CHAR_BUF_SIZE);\n+            \/\/ stop short of last char unless all of utf bytes in buffer\n+            int stop = pos + ((utflen > avail) ? avail - 2 : (int) utflen);\n+            boolean outOfBounds = false;\n+\n+            try {\n+                while (pos < stop) {\n+                    int b1, b2, b3;\n+                    b1 = buf[pos++] & 0xFF;\n+                    switch (b1 >> 4) {\n+                        case 0, 1, 2, 3, 4, 5, 6, 7 -> \/\/ 1 byte format: 0xxxxxxx\n+                            cbuf[cpos++] = (char) b1;\n+                        case 12, 13 -> {  \/\/ 2 byte format: 110xxxxx 10xxxxxx\n+                            b2 = buf[pos++];\n+                            if ((b2 & 0xC0) != 0x80) {\n+                                throw new UTFDataFormatException();\n+                            }\n+                            cbuf[cpos++] = (char) (((b1 & 0x1F) << 6) |\n+                                                   ((b2 & 0x3F) << 0));\n+                        }\n+                        case 14 -> {  \/\/ 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx\n+                            b3 = buf[pos + 1];\n+                            b2 = buf[pos + 0];\n+                            pos += 2;\n+                            if ((b2 & 0xC0) != 0x80 || (b3 & 0xC0) != 0x80) {\n+                                throw new UTFDataFormatException();\n+                            }\n+                            cbuf[cpos++] = (char) (((b1 & 0x0F) << 12) |\n+                                                   ((b2 & 0x3F) << 6) |\n+                                                   ((b3 & 0x3F) << 0));\n+                        }\n+                        default ->  throw new UTFDataFormatException(); \/\/ 10xx xxxx, 1111 xxxx\n+                    }\n+                }\n+            } catch (ArrayIndexOutOfBoundsException ex) {\n+                outOfBounds = true;\n+            } finally {\n+                if (outOfBounds || (pos - start) > utflen) {\n+                    \/*\n+                     * Fix for 4450867: if a malformed utf char causes the\n+                     * conversion loop to scan past the expected end of the utf\n+                     * string, only consume the expected number of utf bytes.\n+                     *\/\n+                    pos = start + (int) utflen;\n+                    throw new UTFDataFormatException();\n+                }\n+            }\n+\n+            sbuf.append(cbuf, 0, cpos);\n+            return pos - start;\n+        }\n+\n+        \/**\n+         * Reads in single UTF-encoded character one byte at a time, appends\n+         * the character to sbuf, and returns the number of bytes consumed.\n+         * This method is used when reading in UTF strings written in block\n+         * data mode to handle UTF-encoded characters which (potentially)\n+         * straddle block-data boundaries.\n+         *\/\n+        private int readUTFChar(StringBuilder sbuf, long utflen)\n+            throws IOException\n+        {\n+            int b1, b2, b3;\n+            b1 = readByte() & 0xFF;\n+            switch (b1 >> 4) {\n+                case 0, 1, 2, 3, 4, 5, 6, 7 -> {     \/\/ 1 byte format: 0xxxxxxx\n+                    sbuf.append((char) b1);\n+                    return 1;\n+                }\n+                case 12, 13 -> {    \/\/ 2 byte format: 110xxxxx 10xxxxxx\n+                    if (utflen < 2) {\n+                        throw new UTFDataFormatException();\n+                    }\n+                    b2 = readByte();\n+                    if ((b2 & 0xC0) != 0x80) {\n+                        throw new UTFDataFormatException();\n+                    }\n+                    sbuf.append((char) (((b1 & 0x1F) << 6) |\n+                                        ((b2 & 0x3F) << 0)));\n+                    return 2;\n+                }\n+                case 14 -> {    \/\/ 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx\n+                    if (utflen < 3) {\n+                        if (utflen == 2) {\n+                            readByte();         \/\/ consume remaining byte\n+                        }\n+                        throw new UTFDataFormatException();\n+                    }\n+                    b2 = readByte();\n+                    b3 = readByte();\n+                    if ((b2 & 0xC0) != 0x80 || (b3 & 0xC0) != 0x80) {\n+                        throw new UTFDataFormatException();\n+                    }\n+                    sbuf.append((char) (((b1 & 0x0F) << 12) |\n+                                        ((b2 & 0x3F) << 6)  |\n+                                        ((b3 & 0x3F) << 0)));\n+                    return 3;\n+                }\n+                default -> throw new UTFDataFormatException(); \/\/ 10xx xxxx, 1111 xxxx\n+            }\n+        }\n+\n+        \/**\n+         * Returns the number of bytes read from the input stream.\n+         * @return the number of bytes read from the input stream\n+         *\/\n+        long getBytesRead() {\n+            return in.getBytesRead();\n+        }\n+    }\n+\n+    \/**\n+     * Unsynchronized table which tracks wire handle to object mappings, as\n+     * well as ClassNotFoundExceptions associated with deserialized objects.\n+     * This class implements an exception-propagation algorithm for\n+     * determining which objects should have ClassNotFoundExceptions associated\n+     * with them, taking into account cycles and discontinuities (e.g., skipped\n+     * fields) in the object graph.\n+     *\n+     * <p>General use of the table is as follows: during deserialization, a\n+     * given object is first assigned a handle by calling the assign method.\n+     * This method leaves the assigned handle in an \"open\" state, wherein\n+     * dependencies on the exception status of other handles can be registered\n+     * by calling the markDependency method, or an exception can be directly\n+     * associated with the handle by calling markException.  When a handle is\n+     * tagged with an exception, the HandleTable assumes responsibility for\n+     * propagating the exception to any other objects which depend\n+     * (transitively) on the exception-tagged object.\n+     *\n+     * <p>Once all exception information\/dependencies for the handle have been\n+     * registered, the handle should be \"closed\" by calling the finish method\n+     * on it.  The act of finishing a handle allows the exception propagation\n+     * algorithm to aggressively prune dependency links, lessening the\n+     * performance\/memory impact of exception tracking.\n+     *\n+     * <p>Note that the exception propagation algorithm used depends on handles\n+     * being assigned\/finished in LIFO order; however, for simplicity as well\n+     * as memory conservation, it does not enforce this constraint.\n+     *\/\n+    \/\/ REMIND: add full description of exception propagation algorithm?\n+    private static final class HandleTable {\n+\n+        \/* status codes indicating whether object has associated exception *\/\n+        private static final byte STATUS_OK = 1;\n+        private static final byte STATUS_UNKNOWN = 2;\n+        private static final byte STATUS_EXCEPTION = 3;\n+\n+        \/** array mapping handle -> object status *\/\n+        byte[] status;\n+        \/** array mapping handle -> object\/exception (depending on status) *\/\n+        Object[] entries;\n+        \/** array mapping handle -> list of dependent handles (if any) *\/\n+        HandleList[] deps;\n+        \/** lowest unresolved dependency *\/\n+        int lowDep = -1;\n+        \/** number of handles in table *\/\n+        int size = 0;\n+\n+        \/**\n+         * Creates handle table with the given initial capacity.\n+         *\/\n+        HandleTable(int initialCapacity) {\n+            status = new byte[initialCapacity];\n+            entries = new Object[initialCapacity];\n+            deps = new HandleList[initialCapacity];\n+        }\n+\n+        \/**\n+         * Assigns next available handle to given object, and returns assigned\n+         * handle.  Once object has been completely deserialized (and all\n+         * dependencies on other objects identified), the handle should be\n+         * \"closed\" by passing it to finish().\n+         *\/\n+        int assign(Object obj) {\n+            if (size >= entries.length) {\n+                grow();\n+            }\n+            status[size] = STATUS_UNKNOWN;\n+            entries[size] = obj;\n+            return size++;\n+        }\n+\n+        \/**\n+         * Registers a dependency (in exception status) of one handle on\n+         * another.  The dependent handle must be \"open\" (i.e., assigned, but\n+         * not finished yet).  No action is taken if either dependent or target\n+         * handle is NULL_HANDLE. Additionally, no action is taken if the\n+         * dependent and target are the same.\n+         *\/\n+        void markDependency(int dependent, int target) {\n+            if (dependent == target || dependent == NULL_HANDLE || target == NULL_HANDLE) {\n+                return;\n+            }\n+            switch (status[dependent]) {\n+\n+                case STATUS_UNKNOWN:\n+                    switch (status[target]) {\n+                        case STATUS_OK:\n+                            \/\/ ignore dependencies on objs with no exception\n+                            break;\n+\n+                        case STATUS_EXCEPTION:\n+                            \/\/ eagerly propagate exception\n+                            markException(dependent,\n+                                (ClassNotFoundException) entries[target]);\n+                            break;\n+\n+                        case STATUS_UNKNOWN:\n+                            \/\/ add to dependency list of target\n+                            if (deps[target] == null) {\n+                                deps[target] = new HandleList();\n+                            }\n+                            deps[target].add(dependent);\n+\n+                            \/\/ remember lowest unresolved target seen\n+                            if (lowDep < 0 || lowDep > target) {\n+                                lowDep = target;\n+                            }\n+                            break;\n+\n+                        default:\n+                            throw new InternalError();\n+                    }\n+                    break;\n+\n+                case STATUS_EXCEPTION:\n+                    break;\n+\n+                default:\n+                    throw new InternalError();\n+            }\n+        }\n+\n+        \/**\n+         * Associates a ClassNotFoundException (if one not already associated)\n+         * with the currently active handle and propagates it to other\n+         * referencing objects as appropriate.  The specified handle must be\n+         * \"open\" (i.e., assigned, but not finished yet).\n+         *\/\n+        void markException(int handle, ClassNotFoundException ex) {\n+            switch (status[handle]) {\n+                case STATUS_UNKNOWN:\n+                    status[handle] = STATUS_EXCEPTION;\n+                    entries[handle] = ex;\n+\n+                    \/\/ propagate exception to dependents\n+                    HandleList dlist = deps[handle];\n+                    if (dlist != null) {\n+                        int ndeps = dlist.size();\n+                        for (int i = 0; i < ndeps; i++) {\n+                            markException(dlist.get(i), ex);\n+                        }\n+                        deps[handle] = null;\n+                    }\n+                    break;\n+\n+                case STATUS_EXCEPTION:\n+                    break;\n+\n+                default:\n+                    throw new InternalError();\n+            }\n+        }\n+\n+        \/**\n+         * Marks given handle as finished, meaning that no new dependencies\n+         * will be marked for handle.  Calls to the assign and finish methods\n+         * must occur in LIFO order.\n+         *\/\n+        void finish(int handle) {\n+            int end;\n+            if (lowDep < 0) {\n+                \/\/ no pending unknowns, only resolve current handle\n+                end = handle + 1;\n+            } else if (lowDep >= handle) {\n+                \/\/ pending unknowns now clearable, resolve all upward handles\n+                end = size;\n+                lowDep = -1;\n+            } else {\n+                \/\/ unresolved backrefs present, can't resolve anything yet\n+                return;\n+            }\n+\n+            \/\/ change STATUS_UNKNOWN -> STATUS_OK in selected span of handles\n+            for (int i = handle; i < end; i++) {\n+                switch (status[i]) {\n+                    case STATUS_UNKNOWN:\n+                        status[i] = STATUS_OK;\n+                        deps[i] = null;\n+                        break;\n+\n+                    case STATUS_OK:\n+                    case STATUS_EXCEPTION:\n+                        break;\n+\n+                    default:\n+                        throw new InternalError();\n+                }\n+            }\n+        }\n+\n+        \/**\n+         * Assigns a new object to the given handle.  The object previously\n+         * associated with the handle is forgotten.  This method has no effect\n+         * if the given handle already has an exception associated with it.\n+         * This method may be called at any time after the handle is assigned.\n+         *\/\n+        void setObject(int handle, Object obj) {\n+            switch (status[handle]) {\n+                case STATUS_UNKNOWN:\n+                case STATUS_OK:\n+                    entries[handle] = obj;\n+                    break;\n+\n+                case STATUS_EXCEPTION:\n+                    break;\n+\n+                default:\n+                    throw new InternalError();\n+            }\n+        }\n+\n+        \/**\n+         * Looks up and returns object associated with the given handle.\n+         * Returns null if the given handle is NULL_HANDLE, or if it has an\n+         * associated ClassNotFoundException.\n+         *\/\n+        Object lookupObject(int handle) {\n+            return (handle != NULL_HANDLE &&\n+                    status[handle] != STATUS_EXCEPTION) ?\n+                entries[handle] : null;\n+        }\n+\n+        \/**\n+         * Looks up and returns ClassNotFoundException associated with the\n+         * given handle.  Returns null if the given handle is NULL_HANDLE, or\n+         * if there is no ClassNotFoundException associated with the handle.\n+         *\/\n+        ClassNotFoundException lookupException(int handle) {\n+            return (handle != NULL_HANDLE &&\n+                    status[handle] == STATUS_EXCEPTION) ?\n+                (ClassNotFoundException) entries[handle] : null;\n+        }\n+\n+        \/**\n+         * Resets table to its initial state.\n+         *\/\n+        void clear() {\n+            Arrays.fill(status, 0, size, (byte) 0);\n+            Arrays.fill(entries, 0, size, null);\n+            Arrays.fill(deps, 0, size, null);\n+            lowDep = -1;\n+            size = 0;\n+        }\n+\n+        \/**\n+         * Returns number of handles registered in table.\n+         *\/\n+        int size() {\n+            return size;\n+        }\n+\n+        \/**\n+         * Expands capacity of internal arrays.\n+         *\/\n+        private void grow() {\n+            int newCapacity = (entries.length << 1) + 1;\n+\n+            byte[] newStatus = new byte[newCapacity];\n+            Object[] newEntries = new Object[newCapacity];\n+            HandleList[] newDeps = new HandleList[newCapacity];\n+\n+            System.arraycopy(status, 0, newStatus, 0, size);\n+            System.arraycopy(entries, 0, newEntries, 0, size);\n+            System.arraycopy(deps, 0, newDeps, 0, size);\n+\n+            status = newStatus;\n+            entries = newEntries;\n+            deps = newDeps;\n+        }\n+\n+        \/**\n+         * Simple growable list of (integer) handles.\n+         *\/\n+        private static class HandleList {\n+            private int[] list = new int[4];\n+            private int size = 0;\n+\n+            public HandleList() {\n+            }\n+\n+            public void add(int handle) {\n+                if (size >= list.length) {\n+                    int[] newList = new int[list.length << 1];\n+                    System.arraycopy(list, 0, newList, 0, list.length);\n+                    list = newList;\n+                }\n+                list[size++] = handle;\n+            }\n+\n+            public int get(int index) {\n+                if (index >= size) {\n+                    throw new ArrayIndexOutOfBoundsException();\n+                }\n+                return list[index];\n+            }\n+\n+            public int size() {\n+                return size;\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Method for cloning arrays in case of using unsharing reading\n+     *\/\n+    private static Object cloneArray(Object array) {\n+        if (array instanceof Object[]) {\n+            return ((Object[]) array).clone();\n+        } else if (array instanceof boolean[]) {\n+            return ((boolean[]) array).clone();\n+        } else if (array instanceof byte[]) {\n+            return ((byte[]) array).clone();\n+        } else if (array instanceof char[]) {\n+            return ((char[]) array).clone();\n+        } else if (array instanceof double[]) {\n+            return ((double[]) array).clone();\n+        } else if (array instanceof float[]) {\n+            return ((float[]) array).clone();\n+        } else if (array instanceof int[]) {\n+            return ((int[]) array).clone();\n+        } else if (array instanceof long[]) {\n+            return ((long[]) array).clone();\n+        } else if (array instanceof short[]) {\n+            return ((short[]) array).clone();\n+        } else {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    static {\n+        SharedSecrets.setJavaObjectInputStreamAccess(ObjectInputStream::checkArray);\n+        SharedSecrets.setJavaObjectInputStreamReadString(ObjectInputStream::readString);\n+    }\n+\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/filter\/ObjectInputStream.java.txt","additions":4174,"deletions":0,"binary":false,"changes":4174,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+diff --git a\/src\/ObjectInputStream.java b\/src\/ObjectInputStream.java\n+index 2e0d6384f81..10b7f7715fa 100644\n+--- a\/src\/ObjectInputStream.java\n++++ b\/src\/ObjectInputStream.java\n+@@ -1454 +1454 @@ public class ObjectInputStream\n+-     * @throws NegativeArraySizeException if arrayLength is negative\n++     * @throws StreamCorruptedException if arrayLength is negative\n+@@ -1457 +1457 @@ public class ObjectInputStream\n+-    private void checkArray(Class<?> arrayType, int arrayLength) throws InvalidClassException {\n++    private void checkArray(Class<?> arrayType, int arrayLength) throws ObjectStreamException {\n+@@ -1463 +1463 @@ public class ObjectInputStream\n+-            throw new NegativeArraySizeException();\n++            throw new StreamCorruptedException(\"Array length is negative\");\n+@@ -2141 +2141,3 @@ public class ObjectInputStream\n+-\n++        if (len < 0) {\n++            throw new StreamCorruptedException(\"Array length is negative\");\n++        }\n+diff --git a\/src\/JavaObjectInputStreamAccess.java b\/src\/JavaObjectInputStreamAccess.java\n+index 2633ac0edca..a47add473c6 100644\n+--- a\/src\/JavaObjectInputStreamAccess.java\n++++ b\/src\/JavaObjectInputStreamAccess.java\n+@@ -28 +28 @@ package jdk.internal.access;\n+-import java.io.InvalidClassException;\n++import java.io.ObjectStreamException;\n+@@ -37 +37 @@ public interface JavaObjectInputStreamAccess {\n+-        throws InvalidClassException;\n++        throws ObjectStreamException;\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/filter\/negative_array_size.diff","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+\n+<coverage\n+        xmlns='http:\/\/java.sun.com\/jcov\/namespace'\n+        xmlns:xsi='http:\/\/www.w3.org\/2001\/XMLSchema-instance'\n+        xsi:schemaLocation='http:\/\/java.sun.com\/jcov\/namespace coverage.xsd'>\n+\n+\t<head>\n+\t\t<property name='coverage.generator.args' val=''\/>\n+\t\t<property name='coverage.generator.mode' val='BRANCH'\/>\n+\t\t<property name='coverage.generator.internal' val='include'\/>\n+\t\t<property name='coverage.generator.include' val=''\/>\n+\t\t<property name='coverage.generator.exclude' val='**\\roxy*|java.lang.Object|jdk.internal.org.objectweb.**|jdk.test.Main'\/>\n+\t\t<property name='coverage.generator.caller_include' val='.*'\/>\n+\t\t<property name='coverage.generator.caller_exclude' val=''\/>\n+\t\t<property name='coverage.created.date' val='2023-06-12'\/>\n+\t\t<property name='coverage.created.time' val='22:07:57'\/>\n+\t\t<property name='coverage.generator.fullversion' val=' 3.0_14 (os.ea) January 05, 2023'\/>\n+\t\t<property name='coverage.generator.name' val='jcov'\/>\n+\t\t<property name='coverage.generator.version' val='3.0'\/>\n+\t\t<property name='coverage.spec.version' val='1.3'\/>\n+\t\t<property name='java.runtime.version' val='20+36-2344'\/>\n+\t\t<property name='java.version' val='20'\/>\n+\t\t<property name='os.arch' val='amd64'\/>\n+\t\t<property name='os.name' val='Linux'\/>\n+\t\t<property name='os.version' val='5.15.0-1030-oracle'\/>\n+\t\t<property name='user.name' val='ubuntu'\/>\n+\t\t<property name='dynamic.collected' val='false'\/>\n+\t\t<property name='id.count' val='1034203'\/>\n+\t<\/head>\n+\t<package name=\"my.package\" moduleName=\"my.module\">\n+\t\t<class name=\"AB\" checksum=\"1\" source=\"AB.java\" flags=''>\n+\t\t\t<meth name=\"a\" vmsig=\"()V\" flags='' access=\"2\" signature=\"()V\" length=\"2\">\n+\t\t\t\t<bl s=\"0\" e=\"1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"1\" id=\"1\" count=\"1\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1;1=1;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"b\" vmsig=\"()V\" flags='' access=\"2\" signature=\"()V\" length=\"2\">\n+\t\t\t\t<bl s=\"2\" e=\"3\">\n+\t\t\t\t\t<methenter s=\"2\" e=\"3\" id=\"2\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>2=1;3=1;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t<\/package>\n+<\/coverage>\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/Fake.xml","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.jcov;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.GitDifFilterTest;\n+import com.sun.tdk.jcov.data.FileFormatException;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.testng.Assert.*;\n+\n+public class JCovLoadTest {\n+    static JCovLineCoverage coverage;\n+\n+    @BeforeClass\n+    static void init() throws FileFormatException, IOException {\n+        var xmlName = JCovLoadTest.class.getName().replace('.', '\/');\n+        xmlName = \"\/\" + xmlName.substring(0, xmlName.lastIndexOf('\/')) + \"\/ObjectInputStream.xml\";\n+        coverage = new JCovLineCoverage(DataRoot.read(GitDifFilterTest.cp(xmlName).toString()));\n+    }\n+\n+    private static Boolean covered(List<CoveredLineRange> ranges, int line) {\n+        var range = ranges.stream()\n+                .filter(e -> e.compare(line) == 0).findAny();\n+        if (range.isEmpty()) {\n+            System.out.println(\"Nothing for line \" + line);\n+            return null;\n+        }\n+        var e = range.get();\n+        System.out.printf(\"For line %d found (%d,%d) -> %s\\n\", line, e.first(), e.last(), e.coverage());\n+        return e.coverage().covered() > 0;\n+    }\n+    \/*\n+1454:      * @throws StreamCorruptedException if arrayLength is negative\n+...\n+1458:         if (! arrayType.isArray()) {\n+1459:             throw new IllegalArgumentException(\"not an array type\");\n+1460:         }\n+...\n+1462:         if (arrayLength < 0) {\n+1463:             throw new StreamCorruptedException(\"Array length is negative\");\n+1464:         }\n+...\n+2141:         if (len < 0) {\n+2142:             throw new StreamCorruptedException(\"Array length is negative\");\n+2143:         }\n+     *\/\n+    @Test\n+    void basic() {\n+        var ranges = coverage.ranges(\"java\/io\/ObjectInputStream.java\");\n+        assertNull(covered(ranges, 1454));\n+        assertTrue(covered(ranges, 1458));\n+        assertFalse(covered(ranges, 1459));\n+        assertNull(covered(ranges, 1460));\n+        assertTrue(covered(ranges, 2141));\n+        assertTrue(covered(ranges, 2142));\n+        assertNull(covered(ranges, 2143));\n+    }\n+\n+    @Test\n+    void innerClass() {\n+        var ranges = coverage.ranges(\"java\/io\/ObjectInputStream.java\");\n+        assertTrue(covered(ranges, 3035));\n+        assertTrue(covered(ranges, 3036));\n+        assertNull(covered(ranges, 3038));\n+    }\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/JCovLoadTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.jcov;\n+\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.GitDifFilterTest;\n+import openjdk.codetools.jcov.report.filter.GitDiffFilter;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import openjdk.codetools.jcov.report.source.ContextFilter;\n+import openjdk.codetools.jcov.report.source.SourcePath;\n+import openjdk.codetools.jcov.report.view.SingleHTMLReport;\n+import openjdk.codetools.jcov.report.view.TextReport;\n+import com.sun.tdk.jcov.data.FileFormatException;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.testng.Assert.assertTrue;\n+\n+public class JCovReportTest {\n+\n+    private FileSet files;\n+    private JCovLineCoverage rawCoverage;\n+    private Path src;\n+\n+    @BeforeClass\n+    void init() throws IOException, FileFormatException {\n+        String pkg = \"\/\" + GitDifFilterTest.class.getPackageName().replace('.', '\/') + \"\/\";\n+        src = GitDifFilterTest.cp(\"src\", Map.of(\n+                pkg + \"JavaObjectInputStreamAccess.java.txt\", \"java\/io\/JavaObjectInputStreamAccess.java\",\n+                pkg + \"ObjectInputStream.java.txt\", \"java\/io\/ObjectInputStream.java\"));\n+        files = new FileSet(Set.of(\"src\/java\/io\/JavaObjectInputStreamAccess.java\", \"src\/java\/io\/ObjectInputStream.java\"));\n+        var xmlName = JCovLoadTest.class.getName().replace('.', '\/');\n+        xmlName = \"\/\" + xmlName.substring(0, xmlName.lastIndexOf('\/')) + \"\/ObjectInputStream.xml\";\n+        rawCoverage = new JCovLineCoverage(DataRoot.read(GitDifFilterTest.cp(xmlName).toString()));\n+    }\n+    @Test\n+    void report() throws Exception {\n+        String diffPkg = \"\/\" + JCovReportTest.class.getPackageName().replace('.', '\/') + \"\/\";\n+        var filter = GitDiffFilter.parseDiff(GitDifFilterTest.cp(diffPkg + \"negative_array_size.diff\")\/*, Set.of(\"src\")*\/);\n+        Path textReport = Files.createTempFile(\"report\", \".txt\");\n+        new TextReport(new SourcePath(src, src.resolve(\"src\")),\n+                files,\n+                rawCoverage,\n+                \"negative array size fix\",\n+                new ContextFilter(filter, 10)).report(textReport);\n+        List<String> reportLines = Files.readAllLines(textReport);\n+        assertTrue(reportLines.contains(\"1454:      * @throws StreamCorruptedException if arrayLength is negative\"));\n+        assertTrue(reportLines.contains(\"1457:     private void checkArray(Class<?> arrayType, int arrayLength) throws ObjectStreamException {\"));\n+        assertTrue(reportLines.contains(\"1463:+            throw new StreamCorruptedException(\\\"Array length is negative\\\");\"));\n+        assertTrue(reportLines.contains(\"2141:+        if (len < 0) {\"));\n+        assertTrue(reportLines.contains(\"2142:+            throw new StreamCorruptedException(\\\"Array length is negative\\\");\"));\n+        assertTrue(reportLines.contains(\"2143:         }\"));\n+        assertTrue(reportLines.contains(\"2142:+            throw new StreamCorruptedException(\\\"Array length is negative\\\");\"));\n+        Path htmlReport = Files.createTempFile(\"report\", \".html\");\n+        new SingleHTMLReport(new SourcePath(src, src.resolve(\"src\")),\n+                files,\n+                rawCoverage,\n+                \"negative array size fix\",\n+                \"negative array size fix\",\n+                filter,\n+                new ContextFilter(filter, 10)).report(htmlReport);\n+        System.out.println(\"Report: \" + htmlReport);\n+        reportLines = Files.readAllLines(htmlReport);\n+        assertTrue(reportLines.contains(\"<a class=\\\"highlight\\\">1454:      * @throws StreamCorruptedException if arrayLength is negative<\/a>\"));\n+        assertTrue(reportLines.contains(\"<a class=\\\"highlight\\\">1457:     private void checkArray(Class<?> arrayType, int arrayLength) throws ObjectStreamException {<\/a>\"));\n+        assertTrue(reportLines.contains(\"<a class=\\\"covered\\\">1463:             throw new StreamCorruptedException(\\\"Array length is negative\\\");<\/a>\"));\n+        assertTrue(reportLines.contains(\"<a class=\\\"covered\\\">2141:         if (len < 0) {<\/a>\"));\n+        assertTrue(reportLines.contains(\"<a class=\\\"covered\\\">2142:             throw new StreamCorruptedException(\\\"Array length is negative\\\");<\/a>\"));\n+        assertTrue(reportLines.contains(\"<a class=\\\"highlight\\\">2143:         }<\/a>\"));\n+        assertTrue(reportLines.contains(\"<a class=\\\"covered\\\">2142:             throw new StreamCorruptedException(\\\"Array length is negative\\\");<\/a>\"));\n+\n+    }\n+    @Test\n+    void innerClass() throws Exception {\n+        var filter = new SourceFilter() {\n+            @Override\n+            public List<LineRange> ranges(String file) {\n+                return List.of(new LineRange(2987,3838));\n+            }\n+        };\n+        Path textReport = Files.createTempFile(\"report\", \".txt\");\n+        new TextReport(new SourcePath(src, src.resolve(\"src\")),\n+                files,\n+                rawCoverage,\n+                \"negative array size fix\",\n+                filter).report(textReport);\n+        List<String> reportLines = Files.readAllLines(textReport);\n+        assertTrue(reportLines.contains(\"3035:+            this.in = new PeekInputStream(in);\"));\n+    }\n+    \/\/2987,3838\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/JCovReportTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,5621 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+\n+<coverage\n+        xmlns='http:\/\/java.sun.com\/jcov\/namespace'\n+        xmlns:xsi='http:\/\/www.w3.org\/2001\/XMLSchema-instance'\n+        xsi:schemaLocation='http:\/\/java.sun.com\/jcov\/namespace coverage.xsd'>\n+\n+\t<head>\n+\t\t<property name='coverage.generator.args' val=''\/>\n+\t\t<property name='coverage.generator.mode' val='BRANCH'\/>\n+\t\t<property name='coverage.generator.internal' val='include'\/>\n+\t\t<property name='coverage.generator.include' val=''\/>\n+\t\t<property name='coverage.generator.exclude' val='**\\roxy*|java.lang.Object|jdk.internal.org.objectweb.**|jdk.test.Main'\/>\n+\t\t<property name='coverage.generator.caller_include' val='.*'\/>\n+\t\t<property name='coverage.generator.caller_exclude' val=''\/>\n+\t\t<property name='coverage.created.date' val='2023-06-12'\/>\n+\t\t<property name='coverage.created.time' val='22:07:57'\/>\n+\t\t<property name='coverage.generator.fullversion' val=' 3.0_14 (os.ea) January 05, 2023'\/>\n+\t\t<property name='coverage.generator.name' val='jcov'\/>\n+\t\t<property name='coverage.generator.version' val='3.0'\/>\n+\t\t<property name='coverage.spec.version' val='1.3'\/>\n+\t\t<property name='java.runtime.version' val='20+36-2344'\/>\n+\t\t<property name='java.version' val='20'\/>\n+\t\t<property name='os.arch' val='amd64'\/>\n+\t\t<property name='os.name' val='Linux'\/>\n+\t\t<property name='os.version' val='5.15.0-1030-oracle'\/>\n+\t\t<property name='user.name' val='ubuntu'\/>\n+\t\t<property name='dynamic.collected' val='false'\/>\n+\t\t<property name='id.count' val='1034203'\/>\n+\t<\/head>\n+\t<package name=\"java.io\" moduleName=\"java.base\">\n+\t\t<class name=\"ObjectInputStream\" supername=\"java\/io\/InputStream\" checksum=\"384835699\" source=\"ObjectInputStream.java\" flags=' public'>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/io\/InputStream;)V\" flags=' public' access=\"1\" cons=\"true\" length=\"98\">\n+\t\t\t\t<bl s=\"0\" e=\"97\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"97\" id=\"26978\" count=\"1214340\"\/>\n+\t\t\t\t\t<exit s=\"97\" e=\"97\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=408;4=348;9=350;14=409;18=410;31=411;44=412;55=413;60=414;79=415;84=416;88=417;97=418;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags=' protected' access=\"4\" cons=\"true\" length=\"74\">\n+\t\t\t\t<bl s=\"0\" e=\"21\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"21\" id=\"26979\" count=\"14\"\/>\n+\t\t\t\t\t<br s=\"19\" e=\"21\">\n+\t\t\t\t\t\t<cond s=\"29\" e=\"73\" id=\"26980\" count=\"14\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"22\" e=\"28\" id=\"26981\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"28\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"73\">\n+\t\t\t\t\t<fall s=\"29\" e=\"73\" id=\"26982\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"73\" e=\"73\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=448;4=348;9=350;14=450;18=451;22=452;29=454;34=455;39=456;44=457;49=458;68=459;73=460;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readObject\" vmsig=\"()Ljava\/lang\/Object;\" flags=' public final' access=\"17\" length=\"7\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26983\" count=\"9105914\"\/>\n+\t\t\t\t\t<exit s=\"6\" e=\"6\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=498;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readString\" vmsig=\"()Ljava\/lang\/String;\" flags=' private' access=\"2\" length=\"20\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"26984\" count=\"1323\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"10\" e=\"19\">\n+\t\t\t\t\t<catch s=\"10\" e=\"19\" id=\"26985\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=510;10=511;11=512;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readObject\" vmsig=\"(Ljava\/lang\/Class;)Ljava\/lang\/Object;\" flags=' private final' access=\"18\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;)Ljava\/lang\/Object;\" length=\"160\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26986\" count=\"9107266\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"12\" e=\"17\" id=\"26987\" count=\"9107262\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"11\" id=\"26988\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"11\">\n+\t\t\t\t\t<exit s=\"11\" e=\"11\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"34\" e=\"75\" id=\"26989\" count=\"9105934\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"23\" id=\"26990\" count=\"1323\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"23\">\n+\t\t\t\t\t<br s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<cond s=\"34\" e=\"75\" id=\"26991\" count=\"1323\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"24\" e=\"33\" id=\"26992\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"33\">\n+\t\t\t\t\t<exit s=\"33\" e=\"33\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"34\" e=\"75\">\n+\t\t\t\t\t<br s=\"73\" e=\"75\">\n+\t\t\t\t\t\t<cond s=\"79\" e=\"87\" id=\"26993\" count=\"9106471\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"76\" e=\"78\" id=\"26994\" count=\"25\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"78\">\n+\t\t\t\t\t<exit s=\"78\" e=\"78\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"79\" e=\"87\">\n+\t\t\t\t\t<br s=\"85\" e=\"87\">\n+\t\t\t\t\t\t<cond s=\"99\" e=\"113\" id=\"26995\" count=\"4003063\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"88\" e=\"98\" id=\"26996\" count=\"5103378\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"88\" e=\"98\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"99\" e=\"113\">\n+\t\t\t\t\t<fall s=\"99\" e=\"113\" id=\"27006\" count=\"5103377\"\/>\n+\t\t\t\t\t<br s=\"111\" e=\"113\">\n+\t\t\t\t\t\t<cond s=\"127\" e=\"129\" id=\"26997\" count=\"9106432\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"114\" e=\"122\" id=\"26998\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"114\" e=\"122\">\n+\t\t\t\t\t<br s=\"120\" e=\"122\">\n+\t\t\t\t\t\t<cond s=\"127\" e=\"129\" id=\"26999\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"123\" e=\"126\" id=\"27000\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"123\" e=\"126\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"127\" e=\"129\">\n+\t\t\t\t\t<fall s=\"127\" e=\"129\" id=\"27007\" count=\"2\"\/>\n+\t\t\t\t\t<exit s=\"129\" e=\"129\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"130\" e=\"143\">\n+\t\t\t\t\t<catch s=\"130\" e=\"143\" id=\"27005\" count=\"772\"\/>\n+\t\t\t\t\t<br s=\"141\" e=\"143\">\n+\t\t\t\t\t\t<cond s=\"157\" e=\"159\" id=\"27001\" count=\"772\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"144\" e=\"152\" id=\"27002\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"144\" e=\"152\">\n+\t\t\t\t\t<br s=\"150\" e=\"152\">\n+\t\t\t\t\t\t<cond s=\"157\" e=\"159\" id=\"27003\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"153\" e=\"156\" id=\"27004\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"153\" e=\"156\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"157\" e=\"159\">\n+\t\t\t\t\t<fall s=\"157\" e=\"159\" id=\"27008\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"159\" e=\"159\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=530;7=531;12=534;24=535;34=538;39=540;46=541;58=542;71=543;76=544;79=546;88=547;95=548;99=550;102=552;107=553;123=554;127=550;130=552;137=553;153=554;157=556;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readObjectOverride\" vmsig=\"()Ljava\/lang\/Object;\" flags=' protected' access=\"4\" length=\"2\">\n+\t\t\t\t<bl s=\"0\" e=\"1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"1\" id=\"27009\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"1\" e=\"1\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=579;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUnshared\" vmsig=\"()Ljava\/lang\/Object;\" flags=' public' access=\"1\" length=\"124\">\n+\t\t\t\t<bl s=\"0\" e=\"40\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"40\" id=\"27010\" count=\"40\"\/>\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"43\" e=\"51\" id=\"27011\" count=\"33\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"42\" id=\"27012\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"42\">\n+\t\t\t\t\t<exit s=\"42\" e=\"42\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"51\">\n+\t\t\t\t\t<br s=\"49\" e=\"51\">\n+\t\t\t\t\t\t<cond s=\"63\" e=\"77\" id=\"27013\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"52\" e=\"62\" id=\"27014\" count=\"30\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"62\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"63\" e=\"77\">\n+\t\t\t\t\t<fall s=\"63\" e=\"77\" id=\"27024\" count=\"30\"\/>\n+\t\t\t\t\t<br s=\"75\" e=\"77\">\n+\t\t\t\t\t\t<cond s=\"91\" e=\"93\" id=\"27015\" count=\"33\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"78\" e=\"86\" id=\"27016\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"78\" e=\"86\">\n+\t\t\t\t\t<br s=\"84\" e=\"86\">\n+\t\t\t\t\t\t<cond s=\"91\" e=\"93\" id=\"27017\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"87\" e=\"90\" id=\"27018\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"87\" e=\"90\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"91\" e=\"93\">\n+\t\t\t\t\t<fall s=\"91\" e=\"93\" id=\"27025\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"93\" e=\"93\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"94\" e=\"107\">\n+\t\t\t\t\t<catch s=\"94\" e=\"107\" id=\"27023\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"105\" e=\"107\">\n+\t\t\t\t\t\t<cond s=\"121\" e=\"123\" id=\"27019\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"108\" e=\"116\" id=\"27020\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"108\" e=\"116\">\n+\t\t\t\t\t<br s=\"114\" e=\"116\">\n+\t\t\t\t\t\t<cond s=\"121\" e=\"123\" id=\"27021\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"117\" e=\"120\" id=\"27022\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"117\" e=\"120\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"121\" e=\"123\">\n+\t\t\t\t\t<fall s=\"121\" e=\"123\" id=\"27026\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"123\" e=\"123\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=633;5=635;13=636;25=637;37=638;41=639;43=641;52=642;59=643;63=645;66=647;71=648;87=649;91=645;94=647;101=648;117=649;121=651;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"defaultReadObject\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"109\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"27027\" count=\"400788\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"53\" id=\"27028\" count=\"400787\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"18\" id=\"27029\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"18\">\n+\t\t\t\t\t<exit s=\"18\" e=\"18\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"53\">\n+\t\t\t\t\t<br s=\"51\" e=\"53\">\n+\t\t\t\t\t\t<cond s=\"66\" e=\"81\" id=\"27030\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"54\" e=\"65\" id=\"27031\" count=\"400787\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"54\" e=\"65\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"66\" e=\"81\">\n+\t\t\t\t\t<fall s=\"66\" e=\"81\" id=\"27036\" count=\"400782\"\/>\n+\t\t\t\t\t<br s=\"79\" e=\"81\">\n+\t\t\t\t\t\t<cond s=\"87\" e=\"104\" id=\"27032\" count=\"398168\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"82\" e=\"86\" id=\"27033\" count=\"2614\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"82\" e=\"86\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"87\" e=\"104\">\n+\t\t\t\t\t<fall s=\"87\" e=\"104\" id=\"27037\" count=\"2615\"\/>\n+\t\t\t\t\t<br s=\"102\" e=\"104\">\n+\t\t\t\t\t\t<cond s=\"108\" e=\"108\" id=\"27034\" count=\"400781\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"105\" e=\"107\" id=\"27035\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"105\" e=\"107\">\n+\t\t\t\t\t<exit s=\"107\" e=\"107\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"108\" e=\"108\">\n+\t\t\t\t\t<exit s=\"108\" e=\"108\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=669;5=670;9=671;19=673;24=674;29=675;38=678;50=679;54=680;60=681;66=683;75=684;82=690;87=692;100=693;105=694;108=696;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFields\" vmsig=\"()Ljava\/io\/ObjectInputStream$GetField;\" flags=' public' access=\"1\" length=\"71\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"27038\" count=\"926896\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"63\" id=\"27039\" count=\"926896\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"18\" id=\"27040\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"18\">\n+\t\t\t\t\t<exit s=\"18\" e=\"18\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"63\">\n+\t\t\t\t\t<br s=\"61\" e=\"63\">\n+\t\t\t\t\t\t<cond s=\"69\" e=\"70\" id=\"27041\" count=\"926641\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"64\" e=\"68\" id=\"27042\" count=\"253\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"64\" e=\"68\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"69\" e=\"70\">\n+\t\t\t\t\t<fall s=\"69\" e=\"70\" id=\"27043\" count=\"253\"\/>\n+\t\t\t\t\t<exit s=\"70\" e=\"70\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=714;5=715;9=716;19=718;23=719;28=720;37=722;48=723;57=724;64=730;69=732;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"registerValidation\" vmsig=\"(Ljava\/io\/ObjectInputValidation;I)V\" flags=' public' access=\"1\" length=\"29\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"27044\" count=\"11\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"28\" id=\"27045\" count=\"10\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"18\" id=\"27046\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"18\">\n+\t\t\t\t\t<exit s=\"18\" e=\"18\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"28\">\n+\t\t\t\t\t<exit s=\"28\" e=\"28\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=754;9=755;19=757;28=758;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"resolveClass\" vmsig=\"(Ljava\/io\/ObjectStreamClass;)Ljava\/lang\/Class;\" flags=' protected' access=\"4\" signature=\"(Ljava\/io\/ObjectStreamClass;)Ljava\/lang\/Class&lt;*&gt;;\" length=\"39\">\n+\t\t\t\t<bl s=\"0\" e=\"13\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"13\" id=\"27047\" count=\"1258830\"\/>\n+\t\t\t\t\t<exit s=\"13\" e=\"13\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"33\">\n+\t\t\t\t\t<catch s=\"14\" e=\"33\" id=\"27050\" count=\"89\"\/>\n+\t\t\t\t\t<br s=\"31\" e=\"33\">\n+\t\t\t\t\t\t<cond s=\"37\" e=\"38\" id=\"27048\" count=\"46\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"34\" e=\"36\" id=\"27049\" count=\"43\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"34\" e=\"36\">\n+\t\t\t\t\t<exit s=\"36\" e=\"36\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"37\" e=\"38\">\n+\t\t\t\t\t<exit s=\"38\" e=\"38\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=802;5=804;14=805;15=806;29=807;34=808;37=810;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"resolveProxyClass\" vmsig=\"([Ljava\/lang\/String;)Ljava\/lang\/Class;\" flags=' protected' access=\"4\" signature=\"([Ljava\/lang\/String;)Ljava\/lang\/Class&lt;*&gt;;\" length=\"126\">\n+\t\t\t\t<bl s=\"0\" e=\"18\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"18\" id=\"27051\" count=\"1250288\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"25\">\n+\t\t\t\t\t<fall s=\"19\" e=\"25\" id=\"27065\" count=\"1250288\"\/>\n+\t\t\t\t\t<br s=\"23\" e=\"25\">\n+\t\t\t\t\t\t<cond s=\"93\" e=\"97\" id=\"27052\" count=\"1250286\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"26\" e=\"46\" id=\"27053\" count=\"3750539\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"26\" e=\"46\">\n+\t\t\t\t\t<br s=\"44\" e=\"46\">\n+\t\t\t\t\t\t<cond s=\"80\" e=\"92\" id=\"27054\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"47\" e=\"51\" id=\"27055\" count=\"3750533\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"47\" e=\"51\">\n+\t\t\t\t\t<br s=\"49\" e=\"51\">\n+\t\t\t\t\t\t<cond s=\"71\" e=\"79\" id=\"27056\" count=\"1250282\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"52\" e=\"60\" id=\"27057\" count=\"2500251\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"60\">\n+\t\t\t\t\t<br s=\"58\" e=\"60\">\n+\t\t\t\t\t\t<cond s=\"80\" e=\"92\" id=\"27058\" count=\"2500251\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"61\" e=\"70\" id=\"27059\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"61\" e=\"70\">\n+\t\t\t\t\t<exit s=\"70\" e=\"70\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"71\" e=\"79\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"80\" e=\"92\">\n+\t\t\t\t\t<fall s=\"80\" e=\"92\" id=\"27066\" count=\"1250282\"\/>\n+\t\t\t\t\t<goto s=\"90\" e=\"92\">\n+\t\t\t\t\t\t<tg s=\"19\" e=\"25\" id=\"27060\" count=\"3750537\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"93\" e=\"97\">\n+\t\t\t\t\t<br s=\"95\" e=\"97\">\n+\t\t\t\t\t\t<cond s=\"102\" e=\"102\" id=\"27061\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"98\" e=\"101\" id=\"27062\" count=\"1250282\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"98\" e=\"101\">\n+\t\t\t\t\t<goto s=\"99\" e=\"101\">\n+\t\t\t\t\t\t<tg s=\"103\" e=\"112\" id=\"27063\" count=\"1250282\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"102\" e=\"102\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"112\">\n+\t\t\t\t\t<fall s=\"103\" e=\"112\" id=\"27067\" count=\"4\"\/>\n+\t\t\t\t\t<exit s=\"112\" e=\"112\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"113\" e=\"125\">\n+\t\t\t\t\t<catch s=\"113\" e=\"125\" id=\"27064\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"125\" e=\"125\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=870;4=871;6=872;9=875;16=876;26=877;37=878;47=879;52=880;61=881;71=885;77=886;80=889;87=876;93=894;105=893;110=896;113=897;115=898;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"resolveObject\" vmsig=\"(Ljava\/lang\/Object;)Ljava\/lang\/Object;\" flags=' protected' access=\"4\" length=\"2\">\n+\t\t\t\t<bl s=\"0\" e=\"1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"1\" id=\"27068\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"1\" e=\"1\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=930;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"enableResolveObject\" vmsig=\"(Z)Z\" flags=' protected' access=\"4\" length=\"47\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27069\" count=\"2\"\/>\n+\t\t\t\t\t<br s=\"5\" e=\"7\">\n+\t\t\t\t\t\t<cond s=\"10\" e=\"13\" id=\"27070\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"8\" e=\"9\" id=\"27071\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"8\" e=\"9\">\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"10\" e=\"13\">\n+\t\t\t\t\t<br s=\"11\" e=\"13\">\n+\t\t\t\t\t\t<cond s=\"29\" e=\"40\" id=\"27072\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"14\" e=\"21\" id=\"27073\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"21\">\n+\t\t\t\t\t<br s=\"19\" e=\"21\">\n+\t\t\t\t\t\t<cond s=\"29\" e=\"40\" id=\"27074\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"22\" e=\"28\" id=\"27075\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"28\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"40\">\n+\t\t\t\t\t<fall s=\"29\" e=\"40\" id=\"27079\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"45\" e=\"45\" id=\"27076\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"44\" id=\"27077\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"44\">\n+\t\t\t\t\t<goto s=\"42\" e=\"44\">\n+\t\t\t\t\t\t<tg s=\"46\" e=\"46\" id=\"27078\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"45\" e=\"45\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"46\">\n+\t\t\t\t\t<fall s=\"46\" e=\"46\" id=\"27080\" count=\"2\"\/>\n+\t\t\t\t\t<exit s=\"46\" e=\"46\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=958;8=959;10=961;14=963;18=964;22=965;29=968;34=969;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readStreamHeader\" vmsig=\"()V\" flags=' protected' access=\"4\" length=\"61\">\n+\t\t\t\t<bl s=\"0\" e=\"22\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"22\" id=\"27081\" count=\"1214330\"\/>\n+\t\t\t\t\t<br s=\"20\" e=\"22\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"59\" id=\"27082\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"23\" e=\"27\" id=\"27083\" count=\"1214331\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"23\" e=\"27\">\n+\t\t\t\t\t<br s=\"25\" e=\"27\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"60\" id=\"27084\" count=\"1214331\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"28\" e=\"59\" id=\"27085\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"59\">\n+\t\t\t\t\t<exit s=\"59\" e=\"59\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"60\">\n+\t\t\t\t\t<exit s=\"60\" e=\"60\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=985;8=986;16=987;28=988;42=989;60=991;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readClassDescriptor\" vmsig=\"()Ljava\/io\/ObjectStreamClass;\" flags=' protected' access=\"4\" length=\"15\">\n+\t\t\t\t<bl s=\"0\" e=\"14\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"14\" id=\"27086\" count=\"1650902\"\/>\n+\t\t\t\t\t<exit s=\"14\" e=\"14\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1013;8=1014;13=1015;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"read\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27087\" count=\"39\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1026;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"read\" vmsig=\"([BII)I\" flags=' public' access=\"1\" length=\"32\">\n+\t\t\t\t<bl s=\"0\" e=\"3\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"3\" id=\"27088\" count=\"1081\"\/>\n+\t\t\t\t\t<br s=\"1\" e=\"3\">\n+\t\t\t\t\t\t<cond s=\"12\" e=\"31\" id=\"27089\" count=\"1075\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"4\" e=\"11\" id=\"27090\" count=\"6\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"4\" e=\"11\">\n+\t\t\t\t\t<exit s=\"11\" e=\"11\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"31\">\n+\t\t\t\t\t<exit s=\"31\" e=\"31\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1049;4=1050;12=1052;20=1053;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"available\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27091\" count=\"607\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1065;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"close\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"13\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"13\" id=\"27092\" count=\"5004\"\/>\n+\t\t\t\t\t<br s=\"11\" e=\"13\">\n+\t\t\t\t\t\t<cond s=\"18\" e=\"25\" id=\"27093\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"14\" e=\"17\" id=\"27094\" count=\"5002\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"17\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"25\">\n+\t\t\t\t\t<fall s=\"18\" e=\"25\" id=\"27095\" count=\"5002\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1079;5=1080;14=1081;18=1083;25=1084;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readBoolean\" vmsig=\"()Z\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27096\" count=\"4041349\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1094;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readByte\" vmsig=\"()B\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27097\" count=\"8564790\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1105;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUnsignedByte\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27098\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1116;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readChar\" vmsig=\"()C\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27099\" count=\"2040199\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1127;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readShort\" vmsig=\"()S\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27100\" count=\"6239480\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1138;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUnsignedShort\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27101\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1149;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readInt\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27102\" count=\"6871105\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1160;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readLong\" vmsig=\"()J\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27103\" count=\"8788737\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1171;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFloat\" vmsig=\"()F\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27104\" count=\"2040798\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"freturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1182;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readDouble\" vmsig=\"()D\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27105\" count=\"2040001\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"dreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1193;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFully\" vmsig=\"([B)V\" flags=' public' access=\"1\" length=\"13\">\n+\t\t\t\t<bl s=\"0\" e=\"12\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"12\" id=\"27106\" count=\"46\"\/>\n+\t\t\t\t\t<exit s=\"12\" e=\"12\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1205;12=1206;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFully\" vmsig=\"([BII)V\" flags=' public' access=\"1\" length=\"20\">\n+\t\t\t\t<bl s=\"0\" e=\"19\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"19\" id=\"27107\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1222;8=1223;19=1224;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"skipBytes\" vmsig=\"(I)I\" flags=' public' access=\"1\" length=\"9\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"27108\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"8\" e=\"8\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1235;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readLine\" vmsig=\"()Ljava\/lang\/String;\" flags=' public' access=\"131073\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27109\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1249;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUTF\" vmsig=\"()Ljava\/lang\/String;\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27110\" count=\"10249294\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1264;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"getObjectInputFilter\" vmsig=\"()Ljava\/io\/ObjectInputFilter;\" flags=' public final' access=\"17\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"27111\" count=\"51\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1278;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"setObjectInputFilter\" vmsig=\"(Ljava\/io\/ObjectInputFilter;)V\" flags=' public final' access=\"17\" length=\"109\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27112\" count=\"1450\"\/>\n+\t\t\t\t\t<br s=\"5\" e=\"7\">\n+\t\t\t\t\t\t<cond s=\"15\" e=\"23\" id=\"27113\" count=\"806\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"8\" e=\"14\" id=\"27114\" count=\"643\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"8\" e=\"14\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"23\">\n+\t\t\t\t\t<fall s=\"15\" e=\"23\" id=\"27125\" count=\"642\"\/>\n+\t\t\t\t\t<br s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<cond s=\"41\" e=\"47\" id=\"27115\" count=\"1438\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"24\" e=\"29\" id=\"27116\" count=\"8\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"29\">\n+\t\t\t\t\t<br s=\"27\" e=\"29\">\n+\t\t\t\t\t\t<cond s=\"41\" e=\"47\" id=\"27117\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"30\" e=\"40\" id=\"27118\" count=\"4\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"30\" e=\"40\">\n+\t\t\t\t\t<exit s=\"40\" e=\"40\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"47\">\n+\t\t\t\t\t<br s=\"45\" e=\"47\">\n+\t\t\t\t\t\t<cond s=\"59\" e=\"87\" id=\"27119\" count=\"1439\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"48\" e=\"58\" id=\"27120\" count=\"6\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"48\" e=\"58\">\n+\t\t\t\t\t<exit s=\"58\" e=\"58\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"59\" e=\"87\">\n+\t\t\t\t\t<br s=\"85\" e=\"87\">\n+\t\t\t\t\t\t<cond s=\"103\" e=\"108\" id=\"27121\" count=\"1415\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"88\" e=\"91\" id=\"27122\" count=\"24\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"88\" e=\"91\">\n+\t\t\t\t\t<br s=\"89\" e=\"91\">\n+\t\t\t\t\t\t<cond s=\"103\" e=\"108\" id=\"27123\" count=\"20\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"92\" e=\"102\" id=\"27124\" count=\"4\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"92\" e=\"102\">\n+\t\t\t\t\t<exit s=\"102\" e=\"102\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"108\">\n+\t\t\t\t\t<exit s=\"108\" e=\"108\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1366;4=1367;8=1368;15=1370;30=1371;41=1374;48=1375;59=1377;64=1379;72=1380;81=1381;92=1382;103=1384;108=1385;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"filterCheck\" vmsig=\"(Ljava\/lang\/Class;I)V\" flags=' private' access=\"2\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;I)V\" length=\"359\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"27126\" count=\"36332203\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"27127\" count=\"36332219\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"10\" id=\"27128\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"10\">\n+\t\t\t\t\t<goto s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<tg s=\"18\" e=\"31\" id=\"27129\" count=\"2\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"31\">\n+\t\t\t\t\t<fall s=\"18\" e=\"31\" id=\"27161\" count=\"36332228\"\/>\n+\t\t\t\t\t<br s=\"29\" e=\"31\">\n+\t\t\t\t\t\t<cond s=\"175\" e=\"191\" id=\"27130\" count=\"36322499\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"32\" e=\"64\" id=\"27131\" count=\"9686\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"32\" e=\"64\">\n+\t\t\t\t\t<goto s=\"62\" e=\"64\">\n+\t\t\t\t\t\t<tg s=\"76\" e=\"81\" id=\"27132\" count=\"9694\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"65\" e=\"75\">\n+\t\t\t\t\t<catch s=\"65\" e=\"75\" id=\"27160\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"81\">\n+\t\t\t\t\t<fall s=\"76\" e=\"81\" id=\"27162\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"79\" e=\"81\">\n+\t\t\t\t\t\t<cond s=\"175\" e=\"191\" id=\"27133\" count=\"9464\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"82\" e=\"89\" id=\"27134\" count=\"231\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"82\" e=\"89\">\n+\t\t\t\t\t<br s=\"87\" e=\"89\">\n+\t\t\t\t\t\t<cond s=\"98\" e=\"103\" id=\"27135\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"90\" e=\"97\" id=\"27136\" count=\"230\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"90\" e=\"97\">\n+\t\t\t\t\t<br s=\"95\" e=\"97\">\n+\t\t\t\t\t\t<cond s=\"104\" e=\"106\" id=\"27137\" count=\"218\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"98\" e=\"103\" id=\"27138\" count=\"12\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"98\" e=\"103\">\n+\t\t\t\t\t<goto s=\"101\" e=\"103\">\n+\t\t\t\t\t\t<tg s=\"107\" e=\"174\" id=\"27139\" count=\"13\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"104\" e=\"106\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"107\" e=\"174\">\n+\t\t\t\t\t<fall s=\"107\" e=\"174\" id=\"27163\" count=\"218\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"175\" e=\"191\">\n+\t\t\t\t\t<fall s=\"175\" e=\"191\" id=\"27164\" count=\"231\"\/>\n+\t\t\t\t\t<br s=\"189\" e=\"191\">\n+\t\t\t\t\t\t<cond s=\"307\" e=\"313\" id=\"27140\" count=\"36332216\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"192\" e=\"200\" id=\"27141\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"192\" e=\"200\">\n+\t\t\t\t\t<br s=\"198\" e=\"200\">\n+\t\t\t\t\t\t<cond s=\"205\" e=\"205\" id=\"27142\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"201\" e=\"204\" id=\"27143\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"201\" e=\"204\">\n+\t\t\t\t\t<goto s=\"202\" e=\"204\">\n+\t\t\t\t\t\t<tg s=\"206\" e=\"215\" id=\"27144\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"205\" e=\"205\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"206\" e=\"215\">\n+\t\t\t\t\t<fall s=\"206\" e=\"215\" id=\"27165\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"213\" e=\"215\">\n+\t\t\t\t\t\t<cond s=\"224\" e=\"224\" id=\"27145\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"216\" e=\"223\" id=\"27146\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"216\" e=\"223\">\n+\t\t\t\t\t<goto s=\"221\" e=\"223\">\n+\t\t\t\t\t\t<tg s=\"225\" e=\"270\" id=\"27147\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"224\" e=\"224\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"225\" e=\"270\">\n+\t\t\t\t\t<fall s=\"225\" e=\"270\" id=\"27166\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"268\" e=\"270\">\n+\t\t\t\t\t\t<cond s=\"279\" e=\"279\" id=\"27148\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"271\" e=\"278\" id=\"27149\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"271\" e=\"278\">\n+\t\t\t\t\t<goto s=\"276\" e=\"278\">\n+\t\t\t\t\t\t<tg s=\"280\" e=\"289\" id=\"27150\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"279\" e=\"279\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"280\" e=\"289\">\n+\t\t\t\t\t<fall s=\"280\" e=\"289\" id=\"27167\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"287\" e=\"289\">\n+\t\t\t\t\t\t<cond s=\"298\" e=\"298\" id=\"27151\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"290\" e=\"297\" id=\"27152\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"290\" e=\"297\">\n+\t\t\t\t\t<goto s=\"295\" e=\"297\">\n+\t\t\t\t\t\t<tg s=\"299\" e=\"306\" id=\"27153\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"298\" e=\"298\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"299\" e=\"306\">\n+\t\t\t\t\t<fall s=\"299\" e=\"306\" id=\"27168\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"307\" e=\"313\">\n+\t\t\t\t\t<fall s=\"307\" e=\"313\" id=\"27169\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"311\" e=\"313\">\n+\t\t\t\t\t\t<cond s=\"358\" e=\"358\" id=\"27154\" count=\"36322542\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"314\" e=\"318\" id=\"27155\" count=\"9689\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"314\" e=\"318\">\n+\t\t\t\t\t<br s=\"316\" e=\"318\">\n+\t\t\t\t\t\t<cond s=\"327\" e=\"357\" id=\"27156\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"319\" e=\"326\" id=\"27157\" count=\"9689\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"319\" e=\"326\">\n+\t\t\t\t\t<br s=\"324\" e=\"326\">\n+\t\t\t\t\t\t<cond s=\"358\" e=\"358\" id=\"27158\" count=\"9612\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"327\" e=\"357\" id=\"27159\" count=\"80\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"327\" e=\"357\">\n+\t\t\t\t\t<exit s=\"357\" e=\"357\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"358\" e=\"358\">\n+\t\t\t\t\t<exit s=\"358\" e=\"358\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1402;19=1403;22=1404;25=1406;32=1408;62=1414;65=1410;67=1412;72=1413;76=1415;82=1417;98=1418;104=1419;127=1421;166=1422;170=1417;175=1425;184=1426;192=1427;209=1428;228=1429;234=1430;240=1431;249=1432;258=1433;264=1434;283=1435;302=1436;307=1438;327=1439;358=1441;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"checkArray\" vmsig=\"(Ljava\/lang\/Class;I)V\" flags=' private' access=\"2\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;I)V\" length=\"40\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"27170\" count=\"1410\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"18\" e=\"21\" id=\"27171\" count=\"1410\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"17\" id=\"27172\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"17\">\n+\t\t\t\t\t<exit s=\"17\" e=\"17\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"21\">\n+\t\t\t\t\t<br s=\"19\" e=\"21\">\n+\t\t\t\t\t\t<cond s=\"33\" e=\"39\" id=\"27173\" count=\"1409\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"22\" e=\"32\" id=\"27174\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"32\">\n+\t\t\t\t\t<exit s=\"32\" e=\"32\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"33\" e=\"39\">\n+\t\t\t\t\t<exit s=\"39\" e=\"39\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1458;7=1459;18=1462;22=1463;33=1466;39=1467;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"verifySubclass\" vmsig=\"()V\" flags=' private' access=\"2\" length=\"47\">\n+\t\t\t\t<bl s=\"0\" e=\"10\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"10\" id=\"27175\" count=\"1214341\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27176\" count=\"547637\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"11\" id=\"27177\" count=\"666704\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"11\">\n+\t\t\t\t\t<exit s=\"11\" e=\"11\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<br s=\"17\" e=\"19\">\n+\t\t\t\t\t\t<cond s=\"21\" e=\"38\" id=\"27178\" count=\"543346\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"20\" e=\"20\" id=\"27179\" count=\"4289\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"20\">\n+\t\t\t\t\t<exit s=\"20\" e=\"20\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"21\" e=\"38\">\n+\t\t\t\t\t<br s=\"36\" e=\"38\">\n+\t\t\t\t\t\t<cond s=\"46\" e=\"46\" id=\"27180\" count=\"543342\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"39\" e=\"45\" id=\"27181\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"39\" e=\"45\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"46\">\n+\t\t\t\t\t<fall s=\"46\" e=\"46\" id=\"27182\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"46\" e=\"46\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1634;5=1635;11=1636;12=1639;16=1640;20=1641;21=1643;35=1644;39=1645;46=1647;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"auditSubclass\" vmsig=\"(Ljava\/lang\/Class;)Ljava\/lang\/Boolean;\" flags=' private static' access=\"10\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;)Ljava\/lang\/Boolean;\" length=\"15\">\n+\t\t\t\t<bl s=\"0\" e=\"14\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"14\" id=\"27183\" count=\"26\"\/>\n+\t\t\t\t\t<exit s=\"14\" e=\"14\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1656;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"clear\" vmsig=\"()V\" flags=' private' access=\"2\" length=\"15\">\n+\t\t\t\t<bl s=\"0\" e=\"14\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"14\" id=\"27184\" count=\"31478\"\/>\n+\t\t\t\t\t<exit s=\"14\" e=\"14\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1685;7=1686;14=1687;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readObject0\" vmsig=\"(Ljava\/lang\/Class;Z)Ljava\/lang\/Object;\" flags=' private' access=\"2\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;Z)Ljava\/lang\/Object;\" length=\"681\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27185\" count=\"44691561\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"61\" e=\"75\" id=\"27186\" count=\"35584268\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"25\" id=\"27187\" count=\"9107283\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"25\">\n+\t\t\t\t\t<br s=\"23\" e=\"25\">\n+\t\t\t\t\t\t<cond s=\"36\" e=\"42\" id=\"27188\" count=\"9107259\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"26\" e=\"35\" id=\"27189\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"26\" e=\"35\">\n+\t\t\t\t\t<exit s=\"35\" e=\"35\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"42\">\n+\t\t\t\t\t<br s=\"40\" e=\"42\">\n+\t\t\t\t\t\t<cond s=\"52\" e=\"60\" id=\"27190\" count=\"9107270\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"43\" e=\"51\" id=\"27191\" count=\"6\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"51\">\n+\t\t\t\t\t<exit s=\"51\" e=\"51\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"60\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"61\" e=\"75\">\n+\t\t\t\t\t<fall s=\"61\" e=\"75\" id=\"27228\" count=\"9107281\"\/>\n+\t\t\t\t\t<br s=\"73\" e=\"75\">\n+\t\t\t\t\t\t<cond s=\"91\" e=\"187\" id=\"27192\" count=\"44691529\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"76\" e=\"90\" id=\"27193\" count=\"26473\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"90\">\n+\t\t\t\t\t<goto s=\"88\" e=\"90\">\n+\t\t\t\t\t\t<tg s=\"61\" e=\"75\" id=\"27194\" count=\"26473\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"91\" e=\"187\">\n+\t\t\t\t\t<switch s=\"113\" e=\"187\">\n+\t\t\t\t\t\t<default s=\"631\" e=\"656\" id=\"27195\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"188\" e=\"215\" id=\"27196\" count=\"14924622\" val=\"112\"\/>\n+\t\t\t\t\t\t<case s=\"216\" e=\"248\" id=\"27197\" count=\"13270089\" val=\"113\"\/>\n+\t\t\t\t\t\t<case s=\"295\" e=\"300\" id=\"27198\" count=\"10003\" val=\"114\"\/>\n+\t\t\t\t\t\t<case s=\"474\" e=\"479\" id=\"27199\" count=\"12192932\" val=\"115\"\/>\n+\t\t\t\t\t\t<case s=\"341\" e=\"373\" id=\"27200\" count=\"2355705\" val=\"116\"\/>\n+\t\t\t\t\t\t<case s=\"374\" e=\"379\" id=\"27201\" count=\"283539\" val=\"117\"\/>\n+\t\t\t\t\t\t<case s=\"249\" e=\"254\" id=\"27202\" count=\"11515\" val=\"118\"\/>\n+\t\t\t\t\t\t<case s=\"560\" e=\"563\" id=\"27203\" count=\"0\" val=\"119\"\/>\n+\t\t\t\t\t\t<case s=\"607\" e=\"610\" id=\"27204\" count=\"3\" val=\"120\"\/>\n+\t\t\t\t\t\t<case s=\"631\" e=\"656\" id=\"27205\" count=\"0\" val=\"121\"\/>\n+\t\t\t\t\t\t<case s=\"560\" e=\"563\" id=\"27206\" count=\"0\" val=\"122\"\/>\n+\t\t\t\t\t\t<case s=\"524\" e=\"529\" id=\"27207\" count=\"1\" val=\"123\"\/>\n+\t\t\t\t\t\t<case s=\"341\" e=\"373\" id=\"27208\" count=\"1\" val=\"124\"\/>\n+\t\t\t\t\t\t<case s=\"295\" e=\"300\" id=\"27209\" count=\"1250125\" val=\"125\"\/>\n+\t\t\t\t\t\t<case s=\"424\" e=\"429\" id=\"27210\" count=\"393008\" val=\"126\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"188\" e=\"215\">\n+\t\t\t\t\t<exit s=\"215\" e=\"215\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"216\" e=\"248\">\n+\t\t\t\t\t<exit s=\"248\" e=\"248\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"249\" e=\"254\">\n+\t\t\t\t\t<br s=\"252\" e=\"254\">\n+\t\t\t\t\t\t<cond s=\"266\" e=\"294\" id=\"27211\" count=\"11515\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"255\" e=\"265\" id=\"27212\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"255\" e=\"265\">\n+\t\t\t\t\t<exit s=\"265\" e=\"265\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"266\" e=\"294\">\n+\t\t\t\t\t<exit s=\"294\" e=\"294\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"295\" e=\"300\">\n+\t\t\t\t\t<br s=\"298\" e=\"300\">\n+\t\t\t\t\t\t<cond s=\"312\" e=\"340\" id=\"27213\" count=\"1260128\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"301\" e=\"311\" id=\"27214\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"301\" e=\"311\">\n+\t\t\t\t\t<exit s=\"311\" e=\"311\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"312\" e=\"340\">\n+\t\t\t\t\t<exit s=\"340\" e=\"340\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"341\" e=\"373\">\n+\t\t\t\t\t<exit s=\"373\" e=\"373\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"374\" e=\"379\">\n+\t\t\t\t\t<br s=\"377\" e=\"379\">\n+\t\t\t\t\t\t<cond s=\"391\" e=\"423\" id=\"27215\" count=\"283539\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"380\" e=\"390\" id=\"27216\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"380\" e=\"390\">\n+\t\t\t\t\t<exit s=\"390\" e=\"390\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"391\" e=\"423\">\n+\t\t\t\t\t<exit s=\"423\" e=\"423\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"424\" e=\"429\">\n+\t\t\t\t\t<br s=\"427\" e=\"429\">\n+\t\t\t\t\t\t<cond s=\"441\" e=\"473\" id=\"27217\" count=\"393012\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"430\" e=\"440\" id=\"27218\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"430\" e=\"440\">\n+\t\t\t\t\t<exit s=\"440\" e=\"440\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"441\" e=\"473\">\n+\t\t\t\t\t<exit s=\"473\" e=\"473\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"474\" e=\"479\">\n+\t\t\t\t\t<br s=\"477\" e=\"479\">\n+\t\t\t\t\t\t<cond s=\"491\" e=\"523\" id=\"27219\" count=\"12192929\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"480\" e=\"490\" id=\"27220\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"480\" e=\"490\">\n+\t\t\t\t\t<exit s=\"490\" e=\"490\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"491\" e=\"523\">\n+\t\t\t\t\t<exit s=\"523\" e=\"523\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"524\" e=\"529\">\n+\t\t\t\t\t<br s=\"527\" e=\"529\">\n+\t\t\t\t\t\t<cond s=\"541\" e=\"559\" id=\"27221\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"530\" e=\"540\" id=\"27222\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"530\" e=\"540\">\n+\t\t\t\t\t<exit s=\"540\" e=\"540\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"541\" e=\"559\">\n+\t\t\t\t\t<exit s=\"559\" e=\"559\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"560\" e=\"563\">\n+\t\t\t\t\t<br s=\"561\" e=\"563\">\n+\t\t\t\t\t\t<cond s=\"596\" e=\"606\" id=\"27223\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"564\" e=\"595\" id=\"27224\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"564\" e=\"595\">\n+\t\t\t\t\t<exit s=\"595\" e=\"595\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"596\" e=\"606\">\n+\t\t\t\t\t<exit s=\"606\" e=\"606\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"607\" e=\"610\">\n+\t\t\t\t\t<br s=\"608\" e=\"610\">\n+\t\t\t\t\t\t<cond s=\"620\" e=\"630\" id=\"27225\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"611\" e=\"619\" id=\"27226\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"611\" e=\"619\">\n+\t\t\t\t\t<exit s=\"619\" e=\"619\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"620\" e=\"630\">\n+\t\t\t\t\t<exit s=\"630\" e=\"630\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"631\" e=\"656\">\n+\t\t\t\t\t<exit s=\"656\" e=\"656\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"657\" e=\"680\">\n+\t\t\t\t\t<catch s=\"657\" e=\"680\" id=\"27227\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"680\" e=\"680\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1695;8=1696;12=1697;21=1698;26=1699;36=1700;43=1707;52=1709;61=1713;76=1714;84=1715;91=1718;101=1719;111=1721;188=1723;194=1796;204=1797;213=1723;216=1727;227=1796;237=1797;246=1727;249=1730;255=1731;266=1733;273=1796;283=1797;292=1733;295=1737;301=1738;312=1740;319=1796;329=1797;338=1740;341=1744;352=1796;362=1797;371=1744;374=1747;380=1748;391=1750;402=1796;412=1797;421=1750;424=1753;430=1754;441=1756;452=1796;462=1797;471=1756;474=1759;480=1760;491=1762;502=1796;512=1797;521=1762;524=1765;530=1766;541=1768;547=1769;560=1773;564=1774;573=1775;581=1776;589=1777;596=1779;607=1784;611=1785;620=1787;631=1792;646=1793;657=1796;669=1797;678=1798;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"checkResolve\" vmsig=\"(Ljava\/lang\/Object;)Ljava\/lang\/Object;\" flags=' private' access=\"2\" length=\"86\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"27229\" count=\"15224348\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"21\" e=\"22\" id=\"27230\" count=\"15224345\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"20\" id=\"27231\" count=\"9\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"20\">\n+\t\t\t\t\t<br s=\"18\" e=\"20\">\n+\t\t\t\t\t\t<cond s=\"23\" e=\"33\" id=\"27232\" count=\"9\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"21\" e=\"22\" id=\"27233\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"21\" e=\"22\">\n+\t\t\t\t\t<exit s=\"22\" e=\"22\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"23\" e=\"33\">\n+\t\t\t\t\t<br s=\"31\" e=\"33\">\n+\t\t\t\t\t\t<cond s=\"84\" e=\"85\" id=\"27234\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"34\" e=\"37\" id=\"27235\" count=\"8\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"34\" e=\"37\">\n+\t\t\t\t\t<br s=\"35\" e=\"37\">\n+\t\t\t\t\t\t<cond s=\"72\" e=\"83\" id=\"27236\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"38\" e=\"47\" id=\"27237\" count=\"7\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"47\">\n+\t\t\t\t\t<br s=\"45\" e=\"47\">\n+\t\t\t\t\t\t<cond s=\"63\" e=\"71\" id=\"27238\" count=\"6\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"48\" e=\"62\" id=\"27239\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"48\" e=\"62\">\n+\t\t\t\t\t<goto s=\"60\" e=\"62\">\n+\t\t\t\t\t\t<tg s=\"72\" e=\"83\" id=\"27240\" count=\"1\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"63\" e=\"71\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"72\" e=\"83\">\n+\t\t\t\t\t<fall s=\"72\" e=\"83\" id=\"27241\" count=\"6\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"84\" e=\"85\">\n+\t\t\t\t\t<fall s=\"84\" e=\"85\" id=\"27242\" count=\"8\"\/>\n+\t\t\t\t\t<exit s=\"85\" e=\"85\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1810;21=1811;23=1813;29=1814;34=1817;38=1818;48=1819;63=1821;72=1824;84=1826;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readTypeString\" vmsig=\"()Ljava\/lang\/String;\" flags='' access=\"0\" length=\"128\">\n+\t\t\t\t<bl s=\"0\" e=\"55\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"55\" id=\"27243\" count=\"3661980\"\/>\n+\t\t\t\t\t<switch s=\"14\" e=\"55\">\n+\t\t\t\t\t\t<default s=\"85\" e=\"109\" id=\"27244\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"56\" e=\"65\" id=\"27245\" count=\"0\" val=\"112\"\/>\n+\t\t\t\t\t\t<case s=\"66\" e=\"76\" id=\"27246\" count=\"2380677\" val=\"113\"\/>\n+\t\t\t\t\t\t<case s=\"77\" e=\"84\" id=\"27247\" count=\"1281298\" val=\"116\"\/>\n+\t\t\t\t\t\t<case s=\"77\" e=\"84\" id=\"27248\" count=\"0\" val=\"124\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"56\" e=\"65\">\n+\t\t\t\t\t<goto s=\"63\" e=\"65\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"117\" id=\"27249\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"66\" e=\"76\">\n+\t\t\t\t\t<goto s=\"74\" e=\"76\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"117\" id=\"27250\" count=\"2380678\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"77\" e=\"84\">\n+\t\t\t\t\t<goto s=\"82\" e=\"84\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"117\" id=\"27251\" count=\"1281302\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"85\" e=\"109\">\n+\t\t\t\t\t<exit s=\"109\" e=\"109\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"110\" e=\"117\">\n+\t\t\t\t\t<exit s=\"117\" e=\"117\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"118\" e=\"127\">\n+\t\t\t\t\t<catch s=\"118\" e=\"127\" id=\"27252\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"127\" e=\"127\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1834;5=1836;13=1837;56=1838;66=1839;77=1840;85=1841;99=1842;111=1845;116=1837;118=1845;125=1846;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readNull\" vmsig=\"()Ljava\/lang\/Object;\" flags=' private' access=\"2\" length=\"27\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27253\" count=\"16007351\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"26\" id=\"27254\" count=\"16007352\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27255\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"26\">\n+\t\t\t\t\t<exit s=\"26\" e=\"26\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1853;12=1854;20=1856;25=1857;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readHandle\" vmsig=\"(Z)Ljava\/lang\/Object;\" flags=' private' access=\"2\" length=\"141\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27256\" count=\"28709072\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"41\" id=\"27257\" count=\"28709091\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27258\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"41\">\n+\t\t\t\t\t<br s=\"39\" e=\"41\">\n+\t\t\t\t\t\t<cond s=\"56\" e=\"87\" id=\"27259\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"42\" e=\"55\" id=\"27260\" count=\"28709066\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"55\">\n+\t\t\t\t\t<br s=\"53\" e=\"55\">\n+\t\t\t\t\t\t<cond s=\"88\" e=\"91\" id=\"27261\" count=\"28709085\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"56\" e=\"87\" id=\"27262\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"56\" e=\"87\">\n+\t\t\t\t\t<exit s=\"87\" e=\"87\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"88\" e=\"91\">\n+\t\t\t\t\t<br s=\"89\" e=\"91\">\n+\t\t\t\t\t\t<cond s=\"103\" e=\"121\" id=\"27263\" count=\"28709092\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"92\" e=\"102\" id=\"27264\" count=\"4\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"92\" e=\"102\">\n+\t\t\t\t\t<exit s=\"102\" e=\"102\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"121\">\n+\t\t\t\t\t<br s=\"119\" e=\"121\">\n+\t\t\t\t\t\t<cond s=\"133\" e=\"140\" id=\"27265\" count=\"28709059\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"122\" e=\"132\" id=\"27266\" count=\"4\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"122\" e=\"132\">\n+\t\t\t\t\t<exit s=\"132\" e=\"132\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"133\" e=\"140\">\n+\t\t\t\t\t<exit s=\"140\" e=\"140\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1865;12=1866;20=1868;35=1869;56=1870;77=1871;88=1874;92=1876;103=1880;115=1881;122=1883;133=1886;139=1887;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readClass\" vmsig=\"(Z)Ljava\/lang\/Class;\" flags=' private' access=\"2\" signature=\"(Z)Ljava\/lang\/Class&lt;*&gt;;\" length=\"90\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27267\" count=\"11515\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"39\" id=\"27268\" count=\"11515\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27269\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"39\">\n+\t\t\t\t\t<br s=\"37\" e=\"39\">\n+\t\t\t\t\t\t<cond s=\"46\" e=\"46\" id=\"27270\" count=\"11511\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"40\" e=\"45\" id=\"27271\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"40\" e=\"45\">\n+\t\t\t\t\t<goto s=\"43\" e=\"45\">\n+\t\t\t\t\t\t<tg s=\"47\" e=\"63\" id=\"27272\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"46\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"47\" e=\"63\">\n+\t\t\t\t\t<fall s=\"47\" e=\"63\" id=\"27275\" count=\"11511\"\/>\n+\t\t\t\t\t<br s=\"61\" e=\"63\">\n+\t\t\t\t\t\t<cond s=\"77\" e=\"89\" id=\"27273\" count=\"11511\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"64\" e=\"76\" id=\"27274\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"64\" e=\"76\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"77\" e=\"89\">\n+\t\t\t\t\t<fall s=\"77\" e=\"89\" id=\"27276\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"89\" e=\"89\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1897;12=1898;20=1900;26=1901;31=1902;53=1904;59=1905;64=1906;77=1909;88=1910;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readClassDesc\" vmsig=\"(Z)Ljava\/io\/ObjectStreamClass;\" flags=' private' access=\"2\" length=\"121\">\n+\t\t\t\t<bl s=\"0\" e=\"51\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"51\" id=\"27277\" count=\"17063298\"\/>\n+\t\t\t\t\t<switch s=\"9\" e=\"51\">\n+\t\t\t\t\t\t<default s=\"95\" e=\"119\" id=\"27278\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"52\" e=\"61\" id=\"27279\" count=\"1082735\" val=\"112\"\/>\n+\t\t\t\t\t\t<case s=\"78\" e=\"94\" id=\"27280\" count=\"13058329\" val=\"113\"\/>\n+\t\t\t\t\t\t<case s=\"70\" e=\"77\" id=\"27281\" count=\"1650910\" val=\"114\"\/>\n+\t\t\t\t\t\t<case s=\"62\" e=\"69\" id=\"27282\" count=\"1271343\" val=\"125\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"61\">\n+\t\t\t\t\t<goto s=\"59\" e=\"61\">\n+\t\t\t\t\t\t<tg s=\"120\" e=\"120\" id=\"27283\" count=\"1082732\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"62\" e=\"69\">\n+\t\t\t\t\t<goto s=\"67\" e=\"69\">\n+\t\t\t\t\t\t<tg s=\"120\" e=\"120\" id=\"27284\" count=\"1271342\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"70\" e=\"77\">\n+\t\t\t\t\t<goto s=\"75\" e=\"77\">\n+\t\t\t\t\t\t<tg s=\"120\" e=\"120\" id=\"27285\" count=\"1650810\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"78\" e=\"94\">\n+\t\t\t\t\t<goto s=\"92\" e=\"94\">\n+\t\t\t\t\t\t<tg s=\"120\" e=\"120\" id=\"27286\" count=\"13058315\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"95\" e=\"119\">\n+\t\t\t\t\t<exit s=\"119\" e=\"119\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"120\" e=\"120\">\n+\t\t\t\t\t<exit s=\"120\" e=\"120\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1922;8=1924;52=1925;62=1926;70=1927;78=1929;87=1931;91=1932;95=1934;109=1935;120=1924;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"isCustomSubclass\" vmsig=\"()Z\" flags=' private' access=\"2\" length=\"21\">\n+\t\t\t\t<bl s=\"0\" e=\"14\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"14\" id=\"27287\" count=\"1650902\"\/>\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"19\" id=\"27288\" count=\"1650739\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"18\" id=\"27289\" count=\"167\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"18\">\n+\t\t\t\t\t<goto s=\"16\" e=\"18\">\n+\t\t\t\t\t\t<tg s=\"20\" e=\"20\" id=\"27290\" count=\"167\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"19\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"20\">\n+\t\t\t\t\t<fall s=\"20\" e=\"20\" id=\"27291\" count=\"1650738\"\/>\n+\t\t\t\t\t<exit s=\"20\" e=\"20\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1941;9=1942;20=1941;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readProxyDesc\" vmsig=\"(Z)Ljava\/io\/ObjectStreamClass;\" flags=' private' access=\"2\" length=\"514\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27292\" count=\"1271342\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"35\" id=\"27293\" count=\"1271342\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27294\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"35\">\n+\t\t\t\t\t<br s=\"33\" e=\"35\">\n+\t\t\t\t\t\t<cond s=\"42\" e=\"42\" id=\"27295\" count=\"1271343\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"36\" e=\"41\" id=\"27296\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"41\">\n+\t\t\t\t\t<goto s=\"39\" e=\"41\">\n+\t\t\t\t\t\t<tg s=\"43\" e=\"68\" id=\"27297\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"42\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"68\">\n+\t\t\t\t\t<fall s=\"43\" e=\"68\" id=\"27321\" count=\"1271343\"\/>\n+\t\t\t\t\t<br s=\"66\" e=\"68\">\n+\t\t\t\t\t\t<cond s=\"110\" e=\"119\" id=\"27298\" count=\"1271343\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"69\" e=\"109\" id=\"27299\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"69\" e=\"109\">\n+\t\t\t\t\t<exit s=\"109\" e=\"109\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"110\" e=\"119\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"120\" e=\"126\">\n+\t\t\t\t\t<fall s=\"120\" e=\"126\" id=\"27322\" count=\"1271343\"\/>\n+\t\t\t\t\t<br s=\"124\" e=\"126\">\n+\t\t\t\t\t\t<cond s=\"145\" e=\"152\" id=\"27300\" count=\"1271343\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"127\" e=\"144\" id=\"27301\" count=\"3772581\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"127\" e=\"144\">\n+\t\t\t\t\t<goto s=\"142\" e=\"144\">\n+\t\t\t\t\t\t<tg s=\"120\" e=\"126\" id=\"27302\" count=\"3772581\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"145\" e=\"152\">\n+\t\t\t\t\t<br s=\"150\" e=\"152\">\n+\t\t\t\t\t\t<cond s=\"208\" e=\"234\" id=\"27303\" count=\"1271343\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"153\" e=\"207\" id=\"27304\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"153\" e=\"207\">\n+\t\t\t\t\t<exit s=\"207\" e=\"207\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"208\" e=\"234\">\n+\t\t\t\t\t<br s=\"232\" e=\"234\">\n+\t\t\t\t\t\t<cond s=\"250\" e=\"257\" id=\"27305\" count=\"1271338\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"235\" e=\"249\" id=\"27306\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"235\" e=\"249\">\n+\t\t\t\t\t<goto s=\"247\" e=\"249\">\n+\t\t\t\t\t\t<tg s=\"326\" e=\"328\" id=\"27307\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"250\" e=\"257\">\n+\t\t\t\t\t<br s=\"255\" e=\"257\">\n+\t\t\t\t\t\t<cond s=\"269\" e=\"298\" id=\"27308\" count=\"1271337\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"258\" e=\"268\" id=\"27309\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"258\" e=\"268\">\n+\t\t\t\t\t<exit s=\"268\" e=\"268\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"269\" e=\"298\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"299\" e=\"305\">\n+\t\t\t\t\t<fall s=\"299\" e=\"305\" id=\"27323\" count=\"1271338\"\/>\n+\t\t\t\t\t<br s=\"303\" e=\"305\">\n+\t\t\t\t\t\t<cond s=\"326\" e=\"328\" id=\"27310\" count=\"1271338\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"306\" e=\"325\" id=\"27311\" count=\"3772573\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"306\" e=\"325\">\n+\t\t\t\t\t<goto s=\"323\" e=\"325\">\n+\t\t\t\t\t\t<tg s=\"299\" e=\"305\" id=\"27312\" count=\"3772573\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"326\" e=\"328\">\n+\t\t\t\t\t<goto s=\"326\" e=\"328\">\n+\t\t\t\t\t\t<tg s=\"391\" e=\"447\" id=\"27313\" count=\"1271338\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"329\" e=\"337\">\n+\t\t\t\t\t<catch s=\"329\" e=\"337\" id=\"27316\" count=\"4\"\/>\n+\t\t\t\t\t<goto s=\"335\" e=\"337\">\n+\t\t\t\t\t\t<tg s=\"391\" e=\"447\" id=\"27314\" count=\"4\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"338\" e=\"354\">\n+\t\t\t\t\t<catch s=\"338\" e=\"354\" id=\"27317\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"354\" e=\"354\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"355\" e=\"390\">\n+\t\t\t\t\t<catch s=\"355\" e=\"390\" id=\"27318\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"390\" e=\"390\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"391\" e=\"447\">\n+\t\t\t\t\t<goto s=\"445\" e=\"447\">\n+\t\t\t\t\t\t<tg s=\"499\" e=\"513\" id=\"27315\" count=\"1271341\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"448\" e=\"483\">\n+\t\t\t\t\t<catch s=\"448\" e=\"483\" id=\"27319\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"483\" e=\"483\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"484\" e=\"498\">\n+\t\t\t\t\t<catch s=\"484\" e=\"498\" id=\"27320\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"498\" e=\"498\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"499\" e=\"513\">\n+\t\t\t\t\t<exit s=\"513\" e=\"513\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1954;12=1955;20=1958;28=1959;47=1960;52=1962;61=1963;69=1965;110=1969;117=1970;127=1971;139=1970;145=1975;153=1976;195=1979;208=1981;211=1982;214=1983;223=1985;235=1986;250=1987;258=1988;269=1993;270=1994;278=1995;281=1993;284=1997;313=1998;320=1997;326=2008;329=2001;331=2002;335=2008;338=2003;340=2004;355=2005;357=2006;376=2007;391=2011;398=2013;402=2016;412=2017;422=2018;435=2023;445=2024;448=2019;450=2020;469=2021;484=2023;496=2024;499=2026;507=2027;512=2028;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readNonProxyDesc\" vmsig=\"(Z)Ljava\/io\/ObjectStreamClass;\" flags=' private' access=\"2\" length=\"316\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27324\" count=\"1650911\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"35\" id=\"27325\" count=\"1650910\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27326\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"35\">\n+\t\t\t\t\t<br s=\"33\" e=\"35\">\n+\t\t\t\t\t\t<cond s=\"42\" e=\"42\" id=\"27327\" count=\"1650902\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"36\" e=\"41\" id=\"27328\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"41\">\n+\t\t\t\t\t<goto s=\"39\" e=\"41\">\n+\t\t\t\t\t\t<tg s=\"43\" e=\"60\" id=\"27329\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"42\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"60\">\n+\t\t\t\t\t<fall s=\"43\" e=\"60\" id=\"27354\" count=\"1650909\"\/>\n+\t\t\t\t\t<goto s=\"58\" e=\"60\">\n+\t\t\t\t\t\t<tg s=\"76\" e=\"108\" id=\"27330\" count=\"1650904\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"61\" e=\"75\">\n+\t\t\t\t\t<catch s=\"61\" e=\"75\" id=\"27351\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"75\" e=\"75\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"108\">\n+\t\t\t\t\t<br s=\"106\" e=\"108\">\n+\t\t\t\t\t\t<cond s=\"124\" e=\"128\" id=\"27331\" count=\"1650876\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"109\" e=\"123\" id=\"27332\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"109\" e=\"123\">\n+\t\t\t\t\t<goto s=\"121\" e=\"123\">\n+\t\t\t\t\t\t<tg s=\"134\" e=\"136\" id=\"27333\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"124\" e=\"128\">\n+\t\t\t\t\t<br s=\"126\" e=\"128\">\n+\t\t\t\t\t\t<cond s=\"134\" e=\"136\" id=\"27334\" count=\"1650721\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"129\" e=\"133\" id=\"27335\" count=\"157\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"129\" e=\"133\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"134\" e=\"136\">\n+\t\t\t\t\t<fall s=\"134\" e=\"136\" id=\"27355\" count=\"157\"\/>\n+\t\t\t\t\t<goto s=\"134\" e=\"136\">\n+\t\t\t\t\t\t<tg s=\"143\" e=\"193\" id=\"27336\" count=\"1650876\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"137\" e=\"142\">\n+\t\t\t\t\t<catch s=\"137\" e=\"142\" id=\"27352\" count=\"28\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"143\" e=\"193\">\n+\t\t\t\t\t<fall s=\"143\" e=\"193\" id=\"27356\" count=\"28\"\/>\n+\t\t\t\t\t<br s=\"191\" e=\"193\">\n+\t\t\t\t\t\t<cond s=\"273\" e=\"285\" id=\"27337\" count=\"28\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"194\" e=\"202\" id=\"27338\" count=\"1650792\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"194\" e=\"202\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"203\" e=\"207\">\n+\t\t\t\t\t<fall s=\"203\" e=\"207\" id=\"27357\" count=\"1650792\"\/>\n+\t\t\t\t\t<br s=\"205\" e=\"207\">\n+\t\t\t\t\t\t<cond s=\"232\" e=\"240\" id=\"27339\" count=\"1082674\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"208\" e=\"218\" id=\"27340\" count=\"568113\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"208\" e=\"218\">\n+\t\t\t\t\t<br s=\"216\" e=\"218\">\n+\t\t\t\t\t\t<cond s=\"222\" e=\"231\" id=\"27341\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"219\" e=\"221\" id=\"27342\" count=\"568110\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"219\" e=\"221\">\n+\t\t\t\t\t<goto s=\"219\" e=\"221\">\n+\t\t\t\t\t\t<tg s=\"232\" e=\"240\" id=\"27343\" count=\"568109\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"222\" e=\"231\">\n+\t\t\t\t\t<goto s=\"229\" e=\"231\">\n+\t\t\t\t\t\t<tg s=\"203\" e=\"207\" id=\"27344\" count=\"4\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"232\" e=\"240\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"241\" e=\"245\">\n+\t\t\t\t\t<fall s=\"241\" e=\"245\" id=\"27358\" count=\"1650788\"\/>\n+\t\t\t\t\t<br s=\"243\" e=\"245\">\n+\t\t\t\t\t\t<cond s=\"273\" e=\"285\" id=\"27345\" count=\"1082685\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"246\" e=\"252\" id=\"27346\" count=\"568119\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"246\" e=\"252\">\n+\t\t\t\t\t<br s=\"250\" e=\"252\">\n+\t\t\t\t\t\t<cond s=\"273\" e=\"285\" id=\"27347\" count=\"568105\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"253\" e=\"272\" id=\"27348\" count=\"15\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"253\" e=\"272\">\n+\t\t\t\t\t<goto s=\"270\" e=\"272\">\n+\t\t\t\t\t\t<tg s=\"241\" e=\"245\" id=\"27349\" count=\"15\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"273\" e=\"285\">\n+\t\t\t\t\t<goto s=\"283\" e=\"285\">\n+\t\t\t\t\t\t<tg s=\"301\" e=\"315\" id=\"27350\" count=\"1650810\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"286\" e=\"300\">\n+\t\t\t\t\t<catch s=\"286\" e=\"300\" id=\"27353\" count=\"36\"\/>\n+\t\t\t\t\t<exit s=\"300\" e=\"300\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"301\" e=\"315\">\n+\t\t\t\t\t<exit s=\"315\" e=\"315\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2040;12=2041;20=2044;28=2045;47=2046;52=2050;58=2054;61=2051;63=2052;76=2056;79=2057;82=2058;91=2059;97=2061;109=2062;124=2063;129=2064;134=2068;137=2066;139=2067;143=2071;150=2073;154=2076;164=2077;174=2078;189=2080;194=2086;197=2087;208=2088;219=2089;222=2087;232=2097;241=2098;253=2100;263=2099;273=2104;283=2105;286=2104;298=2105;301=2107;309=2108;314=2110;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readString\" vmsig=\"(Z)Ljava\/lang\/String;\" flags=' private' access=\"2\" length=\"117\">\n+\t\t\t\t<bl s=\"0\" e=\"35\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"35\" id=\"27359\" count=\"4029988\"\/>\n+\t\t\t\t\t<switch s=\"9\" e=\"35\">\n+\t\t\t\t\t\t<default s=\"56\" e=\"80\" id=\"27360\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"36\" e=\"45\" id=\"27361\" count=\"4030001\" val=\"116\"\/>\n+\t\t\t\t\t\t<case s=\"46\" e=\"55\" id=\"27362\" count=\"1\" val=\"124\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"45\">\n+\t\t\t\t\t<goto s=\"43\" e=\"45\">\n+\t\t\t\t\t\t<tg s=\"81\" e=\"90\" id=\"27363\" count=\"4030007\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"55\">\n+\t\t\t\t\t<goto s=\"53\" e=\"55\">\n+\t\t\t\t\t\t<tg s=\"81\" e=\"90\" id=\"27364\" count=\"1\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"56\" e=\"80\">\n+\t\t\t\t\t<exit s=\"80\" e=\"80\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"81\" e=\"90\">\n+\t\t\t\t\t<br s=\"88\" e=\"90\">\n+\t\t\t\t\t\t<cond s=\"97\" e=\"97\" id=\"27365\" count=\"4029980\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"91\" e=\"96\" id=\"27366\" count=\"8\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"91\" e=\"96\">\n+\t\t\t\t\t<goto s=\"94\" e=\"96\">\n+\t\t\t\t\t\t<tg s=\"98\" e=\"116\" id=\"27367\" count=\"8\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"97\" e=\"97\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"98\" e=\"116\">\n+\t\t\t\t\t<fall s=\"98\" e=\"116\" id=\"27368\" count=\"4029995\"\/>\n+\t\t\t\t\t<exit s=\"116\" e=\"116\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2118;8=2119;36=2120;46=2121;56=2122;70=2123;82=2125;104=2126;115=2127;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readArray\" vmsig=\"(Z)Ljava\/lang\/Object;\" flags=' private' access=\"2\" length=\"445\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27369\" count=\"283538\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"37\" id=\"27370\" count=\"283540\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27371\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"37\">\n+\t\t\t\t\t<br s=\"35\" e=\"37\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"73\" id=\"27372\" count=\"283530\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"38\" e=\"48\" id=\"27373\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"48\">\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"73\">\n+\t\t\t\t\t<br s=\"71\" e=\"73\">\n+\t\t\t\t\t\t<cond s=\"89\" e=\"96\" id=\"27374\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"74\" e=\"88\" id=\"27375\" count=\"283508\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"74\" e=\"88\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"89\" e=\"96\">\n+\t\t\t\t\t<fall s=\"89\" e=\"96\" id=\"27416\" count=\"283509\"\/>\n+\t\t\t\t\t<br s=\"94\" e=\"96\">\n+\t\t\t\t\t\t<cond s=\"103\" e=\"104\" id=\"27376\" count=\"283514\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"97\" e=\"102\" id=\"27377\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"97\" e=\"102\">\n+\t\t\t\t\t<goto s=\"100\" e=\"102\">\n+\t\t\t\t\t\t<tg s=\"105\" e=\"120\" id=\"27378\" count=\"3\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"104\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"105\" e=\"120\">\n+\t\t\t\t\t<fall s=\"105\" e=\"120\" id=\"27417\" count=\"283510\"\/>\n+\t\t\t\t\t<br s=\"118\" e=\"120\">\n+\t\t\t\t\t\t<cond s=\"132\" e=\"136\" id=\"27379\" count=\"283509\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"121\" e=\"131\" id=\"27380\" count=\"7\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"121\" e=\"131\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"132\" e=\"136\">\n+\t\t\t\t\t<fall s=\"132\" e=\"136\" id=\"27418\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"134\" e=\"136\">\n+\t\t\t\t\t\t<cond s=\"163\" e=\"170\" id=\"27381\" count=\"283511\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"137\" e=\"139\" id=\"27382\" count=\"7\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"137\" e=\"139\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"140\" e=\"145\">\n+\t\t\t\t\t<fall s=\"140\" e=\"145\" id=\"27419\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"143\" e=\"145\">\n+\t\t\t\t\t\t<cond s=\"160\" e=\"162\" id=\"27383\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"146\" e=\"159\" id=\"27384\" count=\"97\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"146\" e=\"159\">\n+\t\t\t\t\t<goto s=\"157\" e=\"159\">\n+\t\t\t\t\t\t<tg s=\"140\" e=\"145\" id=\"27385\" count=\"97\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"160\" e=\"162\">\n+\t\t\t\t\t<goto s=\"160\" e=\"162\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27386\" count=\"7\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"163\" e=\"170\">\n+\t\t\t\t\t<br s=\"168\" e=\"170\">\n+\t\t\t\t\t\t<cond s=\"380\" e=\"389\" id=\"27387\" count=\"86331\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"171\" e=\"178\" id=\"27388\" count=\"197179\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"171\" e=\"178\">\n+\t\t\t\t\t<br s=\"176\" e=\"178\">\n+\t\t\t\t\t\t<cond s=\"196\" e=\"203\" id=\"27389\" count=\"171673\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"179\" e=\"195\" id=\"27390\" count=\"25506\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"179\" e=\"195\">\n+\t\t\t\t\t<goto s=\"193\" e=\"195\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27391\" count=\"25506\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"196\" e=\"203\">\n+\t\t\t\t\t<br s=\"201\" e=\"203\">\n+\t\t\t\t\t\t<cond s=\"222\" e=\"229\" id=\"27392\" count=\"143047\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"204\" e=\"221\" id=\"27393\" count=\"28626\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"204\" e=\"221\">\n+\t\t\t\t\t<goto s=\"219\" e=\"221\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27394\" count=\"28627\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"222\" e=\"229\">\n+\t\t\t\t\t<br s=\"227\" e=\"229\">\n+\t\t\t\t\t\t<cond s=\"247\" e=\"254\" id=\"27395\" count=\"117641\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"230\" e=\"246\" id=\"27396\" count=\"25406\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"230\" e=\"246\">\n+\t\t\t\t\t<goto s=\"244\" e=\"246\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27397\" count=\"25406\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"247\" e=\"254\">\n+\t\t\t\t\t<br s=\"252\" e=\"254\">\n+\t\t\t\t\t\t<cond s=\"272\" e=\"279\" id=\"27398\" count=\"93909\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"255\" e=\"271\" id=\"27399\" count=\"23732\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"255\" e=\"271\">\n+\t\t\t\t\t<goto s=\"269\" e=\"271\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27400\" count=\"23732\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"272\" e=\"279\">\n+\t\t\t\t\t<br s=\"277\" e=\"279\">\n+\t\t\t\t\t\t<cond s=\"297\" e=\"304\" id=\"27401\" count=\"70192\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"280\" e=\"296\" id=\"27402\" count=\"23717\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"280\" e=\"296\">\n+\t\t\t\t\t<goto s=\"294\" e=\"296\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27403\" count=\"23717\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"297\" e=\"304\">\n+\t\t\t\t\t<br s=\"302\" e=\"304\">\n+\t\t\t\t\t\t<cond s=\"322\" e=\"329\" id=\"27404\" count=\"46421\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"305\" e=\"321\" id=\"27405\" count=\"23771\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"305\" e=\"321\">\n+\t\t\t\t\t<goto s=\"319\" e=\"321\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27406\" count=\"23771\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"322\" e=\"329\">\n+\t\t\t\t\t<br s=\"327\" e=\"329\">\n+\t\t\t\t\t\t<cond s=\"347\" e=\"354\" id=\"27407\" count=\"22636\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"330\" e=\"346\" id=\"27408\" count=\"23785\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"330\" e=\"346\">\n+\t\t\t\t\t<goto s=\"344\" e=\"346\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27409\" count=\"23785\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"347\" e=\"354\">\n+\t\t\t\t\t<br s=\"352\" e=\"354\">\n+\t\t\t\t\t\t<cond s=\"372\" e=\"379\" id=\"27410\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"355\" e=\"371\" id=\"27411\" count=\"22636\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"355\" e=\"371\">\n+\t\t\t\t\t<goto s=\"369\" e=\"371\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27412\" count=\"22636\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"372\" e=\"379\">\n+\t\t\t\t\t<exit s=\"379\" e=\"379\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"380\" e=\"389\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"390\" e=\"395\">\n+\t\t\t\t\t<fall s=\"390\" e=\"395\" id=\"27420\" count=\"86330\"\/>\n+\t\t\t\t\t<br s=\"393\" e=\"395\">\n+\t\t\t\t\t\t<cond s=\"427\" e=\"444\" id=\"27413\" count=\"86299\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"396\" e=\"426\" id=\"27414\" count=\"7997230\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"396\" e=\"426\">\n+\t\t\t\t\t<goto s=\"424\" e=\"426\">\n+\t\t\t\t\t\t<tg s=\"390\" e=\"395\" id=\"27415\" count=\"7997198\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"427\" e=\"444\">\n+\t\t\t\t\t<exit s=\"444\" e=\"444\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2135;12=2136;20=2139;26=2140;34=2141;38=2142;49=2144;58=2146;61=2147;64=2148;74=2149;81=2150;89=2153;110=2154;116=2155;121=2156;132=2159;137=2160;146=2161;154=2160;163=2163;171=2164;179=2165;196=2166;204=2167;222=2168;230=2169;247=2170;255=2171;272=2172;280=2173;297=2174;305=2175;322=2176;330=2177;347=2178;355=2179;372=2181;380=2184;387=2185;396=2186;408=2187;421=2185;427=2191;436=2192;442=2193;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readEnum\" vmsig=\"(Z)Ljava\/lang\/Enum;\" flags=' private' access=\"2\" signature=\"(Z)Ljava\/lang\/Enum&lt;*&gt;;\" length=\"212\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27421\" count=\"393012\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"32\" id=\"27422\" count=\"393012\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27423\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"32\">\n+\t\t\t\t\t<br s=\"30\" e=\"32\">\n+\t\t\t\t\t\t<cond s=\"61\" e=\"68\" id=\"27424\" count=\"392998\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"33\" e=\"60\" id=\"27425\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"33\" e=\"60\">\n+\t\t\t\t\t<exit s=\"60\" e=\"60\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"61\" e=\"68\">\n+\t\t\t\t\t<br s=\"66\" e=\"68\">\n+\t\t\t\t\t\t<cond s=\"75\" e=\"75\" id=\"27426\" count=\"392979\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"69\" e=\"74\" id=\"27427\" count=\"5\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"69\" e=\"74\">\n+\t\t\t\t\t<goto s=\"72\" e=\"74\">\n+\t\t\t\t\t\t<tg s=\"76\" e=\"90\" id=\"27428\" count=\"5\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"75\" e=\"75\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"90\">\n+\t\t\t\t\t<fall s=\"76\" e=\"90\" id=\"27437\" count=\"392997\"\/>\n+\t\t\t\t\t<br s=\"88\" e=\"90\">\n+\t\t\t\t\t\t<cond s=\"101\" e=\"121\" id=\"27429\" count=\"392994\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"91\" e=\"100\" id=\"27430\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"91\" e=\"100\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"101\" e=\"121\">\n+\t\t\t\t\t<fall s=\"101\" e=\"121\" id=\"27438\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"119\" e=\"121\">\n+\t\t\t\t\t\t<cond s=\"196\" e=\"211\" id=\"27431\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"122\" e=\"137\" id=\"27432\" count=\"393004\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"122\" e=\"137\">\n+\t\t\t\t\t<goto s=\"135\" e=\"137\">\n+\t\t\t\t\t\t<tg s=\"182\" e=\"185\" id=\"27433\" count=\"392988\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"138\" e=\"181\">\n+\t\t\t\t\t<catch s=\"138\" e=\"181\" id=\"27436\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"181\" e=\"181\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"182\" e=\"185\">\n+\t\t\t\t\t<br s=\"183\" e=\"185\">\n+\t\t\t\t\t\t<cond s=\"196\" e=\"211\" id=\"27434\" count=\"5\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"186\" e=\"195\" id=\"27435\" count=\"392978\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"186\" e=\"195\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"196\" e=\"211\">\n+\t\t\t\t\t<fall s=\"196\" e=\"211\" id=\"27439\" count=\"392992\"\/>\n+\t\t\t\t\t<exit s=\"211\" e=\"211\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2201;12=2202;20=2205;26=2206;33=2207;61=2210;80=2211;86=2212;91=2213;101=2216;108=2217;111=2218;117=2219;122=2222;131=2223;135=2227;138=2224;140=2225;182=2228;186=2229;196=2233;204=2234;209=2235;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readOrdinaryObject\" vmsig=\"(Z)Ljava\/lang\/Object;\" flags=' private' access=\"2\" length=\"373\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27440\" count=\"12192927\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"40\" id=\"27441\" count=\"12192928\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27442\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"40\">\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"53\" e=\"63\" id=\"27443\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"46\" id=\"27444\" count=\"12192827\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"46\">\n+\t\t\t\t\t<br s=\"44\" e=\"46\">\n+\t\t\t\t\t\t<cond s=\"53\" e=\"63\" id=\"27445\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"47\" e=\"52\" id=\"27446\" count=\"12192827\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"47\" e=\"52\">\n+\t\t\t\t\t<br s=\"50\" e=\"52\">\n+\t\t\t\t\t\t<cond s=\"64\" e=\"70\" id=\"27447\" count=\"12192824\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"53\" e=\"63\" id=\"27448\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"53\" e=\"63\">\n+\t\t\t\t\t<exit s=\"63\" e=\"63\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"64\" e=\"70\">\n+\t\t\t\t\t<br s=\"68\" e=\"70\">\n+\t\t\t\t\t\t<cond s=\"78\" e=\"78\" id=\"27449\" count=\"485\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"71\" e=\"77\" id=\"27450\" count=\"12192337\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"71\" e=\"77\">\n+\t\t\t\t\t<goto s=\"75\" e=\"77\">\n+\t\t\t\t\t\t<tg s=\"79\" e=\"83\" id=\"27451\" count=\"12192342\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"78\" e=\"78\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"79\" e=\"83\">\n+\t\t\t\t\t<fall s=\"79\" e=\"83\" id=\"27488\" count=\"485\"\/>\n+\t\t\t\t\t<goto s=\"81\" e=\"83\">\n+\t\t\t\t\t\t<tg s=\"106\" e=\"114\" id=\"27452\" count=\"12192822\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"84\" e=\"105\">\n+\t\t\t\t\t<catch s=\"84\" e=\"105\" id=\"27487\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"105\" e=\"105\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"106\" e=\"114\">\n+\t\t\t\t\t<br s=\"112\" e=\"114\">\n+\t\t\t\t\t\t<cond s=\"121\" e=\"122\" id=\"27453\" count=\"12192800\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"115\" e=\"120\" id=\"27454\" count=\"21\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"115\" e=\"120\">\n+\t\t\t\t\t<goto s=\"118\" e=\"120\">\n+\t\t\t\t\t\t<tg s=\"123\" e=\"139\" id=\"27455\" count=\"21\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"121\" e=\"122\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"123\" e=\"139\">\n+\t\t\t\t\t<fall s=\"123\" e=\"139\" id=\"27489\" count=\"12192805\"\/>\n+\t\t\t\t\t<br s=\"137\" e=\"139\">\n+\t\t\t\t\t\t<cond s=\"153\" e=\"163\" id=\"27456\" count=\"12192698\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"140\" e=\"152\" id=\"27457\" count=\"127\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"140\" e=\"152\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"153\" e=\"163\">\n+\t\t\t\t\t<fall s=\"153\" e=\"163\" id=\"27490\" count=\"127\"\/>\n+\t\t\t\t\t<br s=\"161\" e=\"163\">\n+\t\t\t\t\t\t<cond s=\"210\" e=\"216\" id=\"27458\" count=\"12192466\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"164\" e=\"169\" id=\"27459\" count=\"358\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"164\" e=\"169\">\n+\t\t\t\t\t<br s=\"167\" e=\"169\">\n+\t\t\t\t\t\t<cond s=\"183\" e=\"193\" id=\"27460\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"170\" e=\"174\" id=\"27461\" count=\"358\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"170\" e=\"174\">\n+\t\t\t\t\t<br s=\"172\" e=\"174\">\n+\t\t\t\t\t\t<cond s=\"183\" e=\"193\" id=\"27462\" count=\"358\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"175\" e=\"182\" id=\"27463\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"175\" e=\"182\">\n+\t\t\t\t\t<exit s=\"182\" e=\"182\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"183\" e=\"193\">\n+\t\t\t\t\t<br s=\"191\" e=\"193\">\n+\t\t\t\t\t\t<cond s=\"237\" e=\"252\" id=\"27464\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"194\" e=\"209\" id=\"27465\" count=\"324\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"194\" e=\"209\">\n+\t\t\t\t\t<goto s=\"207\" e=\"209\">\n+\t\t\t\t\t\t<tg s=\"237\" e=\"252\" id=\"27466\" count=\"324\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"210\" e=\"216\">\n+\t\t\t\t\t<br s=\"214\" e=\"216\">\n+\t\t\t\t\t\t<cond s=\"230\" e=\"236\" id=\"27467\" count=\"11809700\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"217\" e=\"229\" id=\"27468\" count=\"382763\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"217\" e=\"229\">\n+\t\t\t\t\t<goto s=\"227\" e=\"229\">\n+\t\t\t\t\t\t<tg s=\"237\" e=\"252\" id=\"27469\" count=\"382761\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"230\" e=\"236\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"237\" e=\"252\">\n+\t\t\t\t\t<fall s=\"237\" e=\"252\" id=\"27491\" count=\"11809075\"\/>\n+\t\t\t\t\t<br s=\"250\" e=\"252\">\n+\t\t\t\t\t\t<cond s=\"370\" e=\"372\" id=\"27470\" count=\"127\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"253\" e=\"266\" id=\"27471\" count=\"12192034\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"253\" e=\"266\">\n+\t\t\t\t\t<br s=\"264\" e=\"266\">\n+\t\t\t\t\t\t<cond s=\"370\" e=\"372\" id=\"27472\" count=\"13\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"267\" e=\"273\" id=\"27473\" count=\"12192021\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"267\" e=\"273\">\n+\t\t\t\t\t<br s=\"271\" e=\"273\">\n+\t\t\t\t\t\t<cond s=\"370\" e=\"372\" id=\"27474\" count=\"11548642\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"274\" e=\"285\" id=\"27475\" count=\"643376\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"274\" e=\"285\">\n+\t\t\t\t\t<br s=\"283\" e=\"285\">\n+\t\t\t\t\t\t<cond s=\"304\" e=\"310\" id=\"27476\" count=\"643356\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"286\" e=\"296\" id=\"27477\" count=\"18\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"286\" e=\"296\">\n+\t\t\t\t\t<br s=\"294\" e=\"296\">\n+\t\t\t\t\t\t<cond s=\"304\" e=\"310\" id=\"27478\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"297\" e=\"303\" id=\"27479\" count=\"18\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"297\" e=\"303\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"304\" e=\"310\">\n+\t\t\t\t\t<fall s=\"304\" e=\"310\" id=\"27492\" count=\"18\"\/>\n+\t\t\t\t\t<br s=\"308\" e=\"310\">\n+\t\t\t\t\t\t<cond s=\"370\" e=\"372\" id=\"27480\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"311\" e=\"315\" id=\"27481\" count=\"643373\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"311\" e=\"315\">\n+\t\t\t\t\t<br s=\"313\" e=\"315\">\n+\t\t\t\t\t\t<cond s=\"354\" e=\"369\" id=\"27482\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"316\" e=\"326\" id=\"27483\" count=\"643371\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"316\" e=\"326\">\n+\t\t\t\t\t<br s=\"324\" e=\"326\">\n+\t\t\t\t\t\t<cond s=\"344\" e=\"353\" id=\"27484\" count=\"643335\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"327\" e=\"343\" id=\"27485\" count=\"36\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"327\" e=\"343\">\n+\t\t\t\t\t<goto s=\"341\" e=\"343\">\n+\t\t\t\t\t\t<tg s=\"354\" e=\"369\" id=\"27486\" count=\"36\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"344\" e=\"353\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"354\" e=\"369\">\n+\t\t\t\t\t<fall s=\"354\" e=\"369\" id=\"27493\" count=\"643335\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"370\" e=\"372\">\n+\t\t\t\t\t<fall s=\"370\" e=\"372\" id=\"27494\" count=\"643373\"\/>\n+\t\t\t\t\t<exit s=\"372\" e=\"372\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2248;12=2249;20=2252;26=2253;30=2255;35=2256;53=2258;64=2263;81=2267;84=2264;86=2265;106=2269;129=2270;135=2271;140=2272;153=2275;159=2276;164=2277;183=2278;190=2279;194=2280;210=2281;217=2282;230=2284;237=2287;248=2289;261=2290;268=2291;274=2293;282=2294;297=2295;304=2297;311=2299;316=2300;327=2301;344=2303;354=2306;370=2310;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readExternalData\" vmsig=\"(Ljava\/io\/Externalizable;Ljava\/io\/ObjectStreamClass;)V\" flags=' private' access=\"2\" length=\"111\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"27495\" count=\"382763\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"13\" e=\"28\" id=\"27496\" count=\"382756\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"12\" id=\"27497\" count=\"7\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"12\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"28\">\n+\t\t\t\t\t<fall s=\"13\" e=\"28\" id=\"27512\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"26\" e=\"28\">\n+\t\t\t\t\t\t<cond s=\"38\" e=\"41\" id=\"27498\" count=\"9\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"29\" e=\"37\" id=\"27499\" count=\"382754\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"37\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"41\">\n+\t\t\t\t\t<fall s=\"38\" e=\"41\" id=\"27513\" count=\"382754\"\/>\n+\t\t\t\t\t<br s=\"39\" e=\"41\">\n+\t\t\t\t\t\t<cond s=\"67\" e=\"71\" id=\"27500\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"42\" e=\"51\" id=\"27501\" count=\"382760\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"51\">\n+\t\t\t\t\t<goto s=\"49\" e=\"51\">\n+\t\t\t\t\t\t<tg s=\"67\" e=\"71\" id=\"27502\" count=\"382756\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"66\">\n+\t\t\t\t\t<catch s=\"52\" e=\"66\" id=\"27510\" count=\"2\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"67\" e=\"71\">\n+\t\t\t\t\t<fall s=\"67\" e=\"71\" id=\"27514\" count=\"2\"\/>\n+\t\t\t\t\t<br s=\"69\" e=\"71\">\n+\t\t\t\t\t\t<cond s=\"76\" e=\"79\" id=\"27503\" count=\"9\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"72\" e=\"75\" id=\"27504\" count=\"382752\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"72\" e=\"75\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"79\">\n+\t\t\t\t\t<fall s=\"76\" e=\"79\" id=\"27515\" count=\"382752\"\/>\n+\t\t\t\t\t<br s=\"77\" e=\"79\">\n+\t\t\t\t\t\t<cond s=\"84\" e=\"91\" id=\"27505\" count=\"382755\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"80\" e=\"83\" id=\"27506\" count=\"6\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"80\" e=\"83\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"84\" e=\"91\">\n+\t\t\t\t\t<fall s=\"84\" e=\"91\" id=\"27516\" count=\"6\"\/>\n+\t\t\t\t\t<goto s=\"89\" e=\"91\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"110\" id=\"27507\" count=\"382761\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"92\" e=\"97\">\n+\t\t\t\t\t<catch s=\"92\" e=\"97\" id=\"27511\" count=\"2\"\/>\n+\t\t\t\t\t<br s=\"95\" e=\"97\">\n+\t\t\t\t\t\t<cond s=\"102\" e=\"109\" id=\"27508\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"98\" e=\"101\" id=\"27509\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"98\" e=\"101\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"102\" e=\"109\">\n+\t\t\t\t\t<fall s=\"102\" e=\"109\" id=\"27517\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"109\" e=\"109\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"110\" e=\"110\">\n+\t\t\t\t\t<exit s=\"110\" e=\"110\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2322;5=2323;9=2324;13=2325;18=2327;24=2328;29=2329;38=2331;42=2333;49=2343;52=2334;54=2342;67=2345;72=2346;76=2349;80=2350;84=2351;89=2352;92=2349;98=2350;102=2351;107=2352;110=2365;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readRecord\" vmsig=\"(Ljava\/io\/ObjectStreamClass;)Ljava\/lang\/Object;\" flags=' private' access=\"2\" length=\"120\">\n+\t\t\t\t<bl s=\"0\" e=\"10\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"10\" id=\"27518\" count=\"358\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"52\" e=\"82\" id=\"27519\" count=\"355\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"12\" id=\"27520\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"12\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"20\">\n+\t\t\t\t\t<fall s=\"13\" e=\"20\" id=\"27529\" count=\"3\"\/>\n+\t\t\t\t\t<br s=\"18\" e=\"20\">\n+\t\t\t\t\t\t<cond s=\"52\" e=\"82\" id=\"27521\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"21\" e=\"29\" id=\"27522\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"21\" e=\"29\">\n+\t\t\t\t\t<br s=\"27\" e=\"29\">\n+\t\t\t\t\t\t<cond s=\"46\" e=\"51\" id=\"27523\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"30\" e=\"45\" id=\"27524\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"30\" e=\"45\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"51\">\n+\t\t\t\t\t<fall s=\"46\" e=\"51\" id=\"27530\" count=\"3\"\/>\n+\t\t\t\t\t<goto s=\"49\" e=\"51\">\n+\t\t\t\t\t\t<tg s=\"13\" e=\"20\" id=\"27525\" count=\"3\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"82\">\n+\t\t\t\t\t<exit s=\"82\" e=\"82\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"83\" e=\"99\">\n+\t\t\t\t\t<catch s=\"83\" e=\"99\" id=\"27526\" count=\"19\"\/>\n+\t\t\t\t\t<exit s=\"99\" e=\"99\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"100\" e=\"104\">\n+\t\t\t\t\t<catch s=\"100\" e=\"104\" id=\"27527\" count=\"12\"\/>\n+\t\t\t\t\t<exit s=\"104\" e=\"104\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"105\" e=\"119\">\n+\t\t\t\t\t<catch s=\"105\" e=\"119\" id=\"27528\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"119\" e=\"119\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2369;5=2370;11=2372;21=2373;30=2374;46=2372;52=2379;63=2385;69=2388;83=2389;85=2390;100=2391;102=2392;105=2393;107=2394;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readSerialData\" vmsig=\"(Ljava\/lang\/Object;Ljava\/io\/ObjectStreamClass;)V\" flags=' private' access=\"2\" length=\"474\">\n+\t\t\t\t<bl s=\"0\" e=\"13\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"13\" id=\"27531\" count=\"11809706\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"20\">\n+\t\t\t\t\t<fall s=\"14\" e=\"20\" id=\"27596\" count=\"11809708\"\/>\n+\t\t\t\t\t<br s=\"18\" e=\"20\">\n+\t\t\t\t\t\t<cond s=\"58\" e=\"62\" id=\"27532\" count=\"9806675\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"21\" e=\"37\" id=\"27533\" count=\"4677338\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"21\" e=\"37\">\n+\t\t\t\t\t<br s=\"35\" e=\"37\">\n+\t\t\t\t\t\t<cond s=\"46\" e=\"51\" id=\"27534\" count=\"1975\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"38\" e=\"45\" id=\"27535\" count=\"4675364\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"45\">\n+\t\t\t\t\t<br s=\"43\" e=\"45\">\n+\t\t\t\t\t\t<cond s=\"52\" e=\"57\" id=\"27536\" count=\"2674313\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"46\" e=\"51\" id=\"27537\" count=\"2001050\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"51\">\n+\t\t\t\t\t<goto s=\"49\" e=\"51\">\n+\t\t\t\t\t\t<tg s=\"58\" e=\"62\" id=\"27538\" count=\"2003026\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"57\">\n+\t\t\t\t\t<goto s=\"55\" e=\"57\">\n+\t\t\t\t\t\t<tg s=\"14\" e=\"20\" id=\"27539\" count=\"2674312\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"58\" e=\"62\">\n+\t\t\t\t\t<br s=\"60\" e=\"62\">\n+\t\t\t\t\t\t<cond s=\"70\" e=\"72\" id=\"27540\" count=\"2003025\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"63\" e=\"69\" id=\"27541\" count=\"9806679\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"63\" e=\"69\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"70\" e=\"72\">\n+\t\t\t\t\t<fall s=\"70\" e=\"72\" id=\"27597\" count=\"9806683\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"79\">\n+\t\t\t\t\t<fall s=\"73\" e=\"79\" id=\"27598\" count=\"11809705\"\/>\n+\t\t\t\t\t<br s=\"77\" e=\"79\">\n+\t\t\t\t\t\t<cond s=\"398\" e=\"401\" id=\"27542\" count=\"11809083\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"80\" e=\"98\" id=\"27543\" count=\"16488353\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"80\" e=\"98\">\n+\t\t\t\t\t<br s=\"96\" e=\"98\">\n+\t\t\t\t\t\t<cond s=\"360\" e=\"363\" id=\"27544\" count=\"11\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"99\" e=\"102\" id=\"27545\" count=\"16488342\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"99\" e=\"102\">\n+\t\t\t\t\t<br s=\"100\" e=\"102\">\n+\t\t\t\t\t\t<cond s=\"117\" e=\"131\" id=\"27546\" count=\"130\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"103\" e=\"116\" id=\"27547\" count=\"16488209\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"116\">\n+\t\t\t\t\t<br s=\"114\" e=\"116\">\n+\t\t\t\t\t\t<cond s=\"132\" e=\"139\" id=\"27548\" count=\"16488203\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"117\" e=\"131\" id=\"27549\" count=\"4\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"117\" e=\"131\">\n+\t\t\t\t\t<goto s=\"129\" e=\"131\">\n+\t\t\t\t\t\t<tg s=\"333\" e=\"340\" id=\"27550\" count=\"134\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"132\" e=\"139\">\n+\t\t\t\t\t<br s=\"137\" e=\"139\">\n+\t\t\t\t\t\t<cond s=\"289\" e=\"306\" id=\"27551\" count=\"12776283\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"140\" e=\"150\" id=\"27552\" count=\"3711924\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"140\" e=\"150\">\n+\t\t\t\t\t<br s=\"148\" e=\"150\">\n+\t\t\t\t\t\t<cond s=\"156\" e=\"197\" id=\"27553\" count=\"2637631\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"151\" e=\"155\" id=\"27554\" count=\"1074292\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"151\" e=\"155\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"156\" e=\"197\">\n+\t\t\t\t\t<fall s=\"156\" e=\"197\" id=\"27599\" count=\"1074291\"\/>\n+\t\t\t\t\t<br s=\"195\" e=\"197\">\n+\t\t\t\t\t\t<cond s=\"203\" e=\"211\" id=\"27555\" count=\"2637093\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"198\" e=\"202\" id=\"27556\" count=\"1074288\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"198\" e=\"202\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"203\" e=\"211\">\n+\t\t\t\t\t<fall s=\"203\" e=\"211\" id=\"27600\" count=\"1074288\"\/>\n+\t\t\t\t\t<goto s=\"209\" e=\"211\">\n+\t\t\t\t\t\t<tg s=\"281\" e=\"288\" id=\"27557\" count=\"3711379\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"212\" e=\"238\">\n+\t\t\t\t\t<catch s=\"212\" e=\"238\" id=\"27594\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"236\" e=\"238\">\n+\t\t\t\t\t\t<cond s=\"244\" e=\"252\" id=\"27558\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"239\" e=\"243\" id=\"27559\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"239\" e=\"243\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"244\" e=\"252\">\n+\t\t\t\t\t<fall s=\"244\" e=\"252\" id=\"27601\" count=\"0\"\/>\n+\t\t\t\t\t<goto s=\"250\" e=\"252\">\n+\t\t\t\t\t\t<tg s=\"281\" e=\"288\" id=\"27560\" count=\"7\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"253\" e=\"266\">\n+\t\t\t\t\t<catch s=\"253\" e=\"266\" id=\"27595\" count=\"535\"\/>\n+\t\t\t\t\t<br s=\"264\" e=\"266\">\n+\t\t\t\t\t\t<cond s=\"272\" e=\"280\" id=\"27561\" count=\"531\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"267\" e=\"271\" id=\"27562\" count=\"4\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"267\" e=\"271\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"272\" e=\"280\">\n+\t\t\t\t\t<fall s=\"272\" e=\"280\" id=\"27602\" count=\"4\"\/>\n+\t\t\t\t\t<exit s=\"280\" e=\"280\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"281\" e=\"288\">\n+\t\t\t\t\t<goto s=\"286\" e=\"288\">\n+\t\t\t\t\t\t<tg s=\"333\" e=\"340\" id=\"27563\" count=\"3711389\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"289\" e=\"306\">\n+\t\t\t\t\t<br s=\"304\" e=\"306\">\n+\t\t\t\t\t\t<cond s=\"317\" e=\"320\" id=\"27564\" count=\"2004395\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"307\" e=\"316\" id=\"27565\" count=\"10771800\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"307\" e=\"316\">\n+\t\t\t\t\t<goto s=\"314\" e=\"316\">\n+\t\t\t\t\t\t<tg s=\"333\" e=\"340\" id=\"27566\" count=\"10771798\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"317\" e=\"320\">\n+\t\t\t\t\t<br s=\"318\" e=\"320\">\n+\t\t\t\t\t\t<cond s=\"333\" e=\"340\" id=\"27567\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"321\" e=\"332\" id=\"27568\" count=\"2004397\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"321\" e=\"332\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"333\" e=\"340\">\n+\t\t\t\t\t<fall s=\"333\" e=\"340\" id=\"27603\" count=\"2004395\"\/>\n+\t\t\t\t\t<br s=\"338\" e=\"340\">\n+\t\t\t\t\t\t<cond s=\"348\" e=\"359\" id=\"27569\" count=\"12778213\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"341\" e=\"347\" id=\"27570\" count=\"3709504\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"341\" e=\"347\">\n+\t\t\t\t\t<goto s=\"345\" e=\"347\">\n+\t\t\t\t\t\t<tg s=\"392\" e=\"397\" id=\"27571\" count=\"3709503\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"348\" e=\"359\">\n+\t\t\t\t\t<goto s=\"357\" e=\"359\">\n+\t\t\t\t\t\t<tg s=\"392\" e=\"397\" id=\"27572\" count=\"12778209\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"360\" e=\"363\">\n+\t\t\t\t\t<br s=\"361\" e=\"363\">\n+\t\t\t\t\t\t<cond s=\"392\" e=\"397\" id=\"27573\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"364\" e=\"371\" id=\"27574\" count=\"11\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"364\" e=\"371\">\n+\t\t\t\t\t<br s=\"369\" e=\"371\">\n+\t\t\t\t\t\t<cond s=\"392\" e=\"397\" id=\"27575\" count=\"9\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"372\" e=\"385\" id=\"27576\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"372\" e=\"385\">\n+\t\t\t\t\t<br s=\"383\" e=\"385\">\n+\t\t\t\t\t\t<cond s=\"392\" e=\"397\" id=\"27577\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"386\" e=\"391\" id=\"27578\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"386\" e=\"391\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"392\" e=\"397\">\n+\t\t\t\t\t<fall s=\"392\" e=\"397\" id=\"27604\" count=\"1\"\/>\n+\t\t\t\t\t<goto s=\"395\" e=\"397\">\n+\t\t\t\t\t\t<tg s=\"73\" e=\"79\" id=\"27579\" count=\"16487725\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"398\" e=\"401\">\n+\t\t\t\t\t<br s=\"399\" e=\"401\">\n+\t\t\t\t\t\t<cond s=\"473\" e=\"473\" id=\"27580\" count=\"124\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"402\" e=\"406\" id=\"27581\" count=\"11808957\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"402\" e=\"406\">\n+\t\t\t\t\t<br s=\"404\" e=\"406\">\n+\t\t\t\t\t\t<cond s=\"473\" e=\"473\" id=\"27582\" count=\"2003008\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"407\" e=\"409\" id=\"27583\" count=\"9805952\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"407\" e=\"409\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"410\" e=\"416\">\n+\t\t\t\t\t<fall s=\"410\" e=\"416\" id=\"27605\" count=\"9805953\"\/>\n+\t\t\t\t\t<br s=\"414\" e=\"416\">\n+\t\t\t\t\t\t<cond s=\"440\" e=\"442\" id=\"27584\" count=\"9805942\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"417\" e=\"424\" id=\"27585\" count=\"12479453\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"417\" e=\"424\">\n+\t\t\t\t\t<br s=\"422\" e=\"424\">\n+\t\t\t\t\t\t<cond s=\"434\" e=\"439\" id=\"27586\" count=\"1707654\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"425\" e=\"433\" id=\"27587\" count=\"10771800\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"425\" e=\"433\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"434\" e=\"439\">\n+\t\t\t\t\t<fall s=\"434\" e=\"439\" id=\"27606\" count=\"10771787\"\/>\n+\t\t\t\t\t<goto s=\"437\" e=\"439\">\n+\t\t\t\t\t\t<tg s=\"410\" e=\"416\" id=\"27588\" count=\"12479443\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"440\" e=\"442\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"443\" e=\"449\">\n+\t\t\t\t\t<fall s=\"443\" e=\"449\" id=\"27607\" count=\"9805942\"\/>\n+\t\t\t\t\t<br s=\"447\" e=\"449\">\n+\t\t\t\t\t\t<cond s=\"473\" e=\"473\" id=\"27589\" count=\"9805945\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"450\" e=\"457\" id=\"27590\" count=\"12479441\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"450\" e=\"457\">\n+\t\t\t\t\t<br s=\"455\" e=\"457\">\n+\t\t\t\t\t\t<cond s=\"467\" e=\"472\" id=\"27591\" count=\"1707653\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"458\" e=\"466\" id=\"27592\" count=\"10771790\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"458\" e=\"466\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"467\" e=\"472\">\n+\t\t\t\t\t<fall s=\"467\" e=\"472\" id=\"27608\" count=\"10771789\"\/>\n+\t\t\t\t\t<goto s=\"470\" e=\"472\">\n+\t\t\t\t\t\t<tg s=\"443\" e=\"449\" id=\"27593\" count=\"12479445\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"473\" e=\"473\">\n+\t\t\t\t\t<exit s=\"473\" e=\"473\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2408;5=2414;8=2416;11=2417;21=2418;30=2419;40=2420;46=2421;49=2422;52=2417;58=2426;63=2427;70=2429;80=2430;89=2432;99=2433;117=2435;132=2436;140=2437;146=2438;151=2439;156=2441;170=2443;179=2444;186=2455;193=2456;198=2457;203=2458;209=2459;212=2445;214=2453;227=2455;234=2456;239=2457;244=2458;250=2459;253=2455;262=2456;267=2457;272=2458;278=2459;281=2466;286=2467;289=2469;302=2470;307=2471;317=2472;321=2473;327=2474;333=2478;341=2479;348=2481;360=2484;366=2485;380=2486;386=2488;392=2429;398=2493;407=2496;417=2497;425=2498;434=2496;440=2500;450=2501;458=2502;467=2500;473=2505;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"skipCustomData\" vmsig=\"()V\" flags=' private' access=\"2\" length=\"105\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"27609\" count=\"7014451\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"14\">\n+\t\t\t\t\t<fall s=\"5\" e=\"14\" id=\"27619\" count=\"7014452\"\/>\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"31\" e=\"67\" id=\"27610\" count=\"979\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"30\" id=\"27611\" count=\"7013470\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"30\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"31\" e=\"67\">\n+\t\t\t\t\t<fall s=\"31\" e=\"67\" id=\"27620\" count=\"7013477\"\/>\n+\t\t\t\t\t<switch s=\"38\" e=\"67\">\n+\t\t\t\t\t\t<default s=\"94\" e=\"104\" id=\"27612\" count=\"5\"\/>\n+\t\t\t\t\t\t<case s=\"68\" e=\"79\" id=\"27613\" count=\"2\" val=\"119\"\/>\n+\t\t\t\t\t\t<case s=\"80\" e=\"93\" id=\"27614\" count=\"7014447\" val=\"120\"\/>\n+\t\t\t\t\t\t<case s=\"94\" e=\"104\" id=\"27615\" count=\"0\" val=\"121\"\/>\n+\t\t\t\t\t\t<case s=\"68\" e=\"79\" id=\"27616\" count=\"0\" val=\"122\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"68\" e=\"79\">\n+\t\t\t\t\t<goto s=\"77\" e=\"79\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"14\" id=\"27617\" count=\"2\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"80\" e=\"93\">\n+\t\t\t\t\t<exit s=\"93\" e=\"93\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"94\" e=\"104\">\n+\t\t\t\t\t<goto s=\"102\" e=\"104\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"14\" id=\"27618\" count=\"5\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2512;5=2514;15=2515;22=2516;31=2518;68=2521;77=2522;80=2525;88=2526;93=2527;94=2530;102=2531;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFatalException\" vmsig=\"()Ljava\/io\/IOException;\" flags=' private' access=\"2\" length=\"80\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27621\" count=\"1\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"37\" id=\"27622\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27623\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"37\">\n+\t\t\t\t\t<br s=\"35\" e=\"37\">\n+\t\t\t\t\t\t<cond s=\"69\" e=\"79\" id=\"27624\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"38\" e=\"43\" id=\"27625\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"43\">\n+\t\t\t\t\t<br s=\"41\" e=\"43\">\n+\t\t\t\t\t\t<cond s=\"69\" e=\"79\" id=\"27626\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"44\" e=\"68\" id=\"27627\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"44\" e=\"68\">\n+\t\t\t\t\t<exit s=\"68\" e=\"68\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"69\" e=\"79\">\n+\t\t\t\t\t<exit s=\"79\" e=\"79\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2542;12=2543;20=2545;24=2547;32=2548;44=2550;58=2551;69=2553;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"handleReset\" vmsig=\"()V\" flags=' private' access=\"2\" length=\"45\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"27628\" count=\"26473\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"40\" e=\"44\" id=\"27629\" count=\"26473\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"39\" id=\"27630\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"39\">\n+\t\t\t\t\t<exit s=\"39\" e=\"39\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"40\" e=\"44\">\n+\t\t\t\t\t<exit s=\"44\" e=\"44\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2562;9=2563;40=2566;44=2567;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"latestUserDefinedLoader\" vmsig=\"()Ljava\/lang\/ClassLoader;\" flags=' private static' access=\"10\" length=\"4\">\n+\t\t\t\t<bl s=\"0\" e=\"3\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"3\" id=\"27631\" count=\"2509117\"\/>\n+\t\t\t\t\t<exit s=\"3\" e=\"3\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2576;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"freeze\" vmsig=\"()V\" flags=' private' access=\"2\" length=\"7\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"27632\" count=\"5103408\"\/>\n+\t\t\t\t\t<exit s=\"6\" e=\"6\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2984;6=2985;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"cloneArray\" vmsig=\"(Ljava\/lang\/Object;)Ljava\/lang\/Object;\" flags=' private static' access=\"10\" length=\"143\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"27633\" count=\"18\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"15\" e=\"21\" id=\"27634\" count=\"16\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"14\" id=\"27635\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"14\">\n+\t\t\t\t\t<exit s=\"14\" e=\"14\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"21\">\n+\t\t\t\t\t<br s=\"19\" e=\"21\">\n+\t\t\t\t\t\t<cond s=\"30\" e=\"36\" id=\"27636\" count=\"14\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"22\" e=\"29\" id=\"27637\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"29\">\n+\t\t\t\t\t<exit s=\"29\" e=\"29\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"30\" e=\"36\">\n+\t\t\t\t\t<br s=\"34\" e=\"36\">\n+\t\t\t\t\t\t<cond s=\"45\" e=\"51\" id=\"27638\" count=\"12\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"37\" e=\"44\" id=\"27639\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"37\" e=\"44\">\n+\t\t\t\t\t<exit s=\"44\" e=\"44\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"45\" e=\"51\">\n+\t\t\t\t\t<br s=\"49\" e=\"51\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"66\" id=\"27640\" count=\"10\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"52\" e=\"59\" id=\"27641\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"59\">\n+\t\t\t\t\t<exit s=\"59\" e=\"59\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"66\">\n+\t\t\t\t\t<br s=\"64\" e=\"66\">\n+\t\t\t\t\t\t<cond s=\"75\" e=\"81\" id=\"27642\" count=\"8\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"67\" e=\"74\" id=\"27643\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"67\" e=\"74\">\n+\t\t\t\t\t<exit s=\"74\" e=\"74\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"75\" e=\"81\">\n+\t\t\t\t\t<br s=\"79\" e=\"81\">\n+\t\t\t\t\t\t<cond s=\"90\" e=\"96\" id=\"27644\" count=\"6\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"82\" e=\"89\" id=\"27645\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"82\" e=\"89\">\n+\t\t\t\t\t<exit s=\"89\" e=\"89\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"90\" e=\"96\">\n+\t\t\t\t\t<br s=\"94\" e=\"96\">\n+\t\t\t\t\t\t<cond s=\"105\" e=\"111\" id=\"27646\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"97\" e=\"104\" id=\"27647\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"97\" e=\"104\">\n+\t\t\t\t\t<exit s=\"104\" e=\"104\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"105\" e=\"111\">\n+\t\t\t\t\t<br s=\"109\" e=\"111\">\n+\t\t\t\t\t\t<cond s=\"120\" e=\"126\" id=\"27648\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"112\" e=\"119\" id=\"27649\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"112\" e=\"119\">\n+\t\t\t\t\t<exit s=\"119\" e=\"119\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"120\" e=\"126\">\n+\t\t\t\t\t<br s=\"124\" e=\"126\">\n+\t\t\t\t\t\t<cond s=\"135\" e=\"142\" id=\"27650\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"127\" e=\"134\" id=\"27651\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"127\" e=\"134\">\n+\t\t\t\t\t<exit s=\"134\" e=\"134\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"135\" e=\"142\">\n+\t\t\t\t\t<exit s=\"142\" e=\"142\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4146;7=4147;15=4148;22=4149;30=4150;37=4151;45=4152;52=4153;60=4154;67=4155;75=4156;82=4157;90=4158;97=4159;105=4160;112=4161;120=4162;127=4163;135=4165;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"&lt;clinit&gt;\" vmsig=\"()V\" flags=' static' access=\"8\" clinit=\"true\" length=\"109\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"27652\" count=\"256\"\/>\n+\t\t\t\t\t<br s=\"5\" e=\"7\">\n+\t\t\t\t\t\t<cond s=\"12\" e=\"12\" id=\"27653\" count=\"245\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"8\" e=\"11\" id=\"27654\" count=\"11\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"8\" e=\"11\">\n+\t\t\t\t\t<goto s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<tg s=\"13\" e=\"108\" id=\"27655\" count=\"11\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"12\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"108\">\n+\t\t\t\t\t<fall s=\"13\" e=\"108\" id=\"27656\" count=\"245\"\/>\n+\t\t\t\t\t<exit s=\"108\" e=\"108\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=255;16=262;26=268;80=269;86=2967;92=4170;100=4171;108=4172;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$1\" supername=\"java\/lang\/Object\" checksum=\"4068889448\" signature=\"Ljava\/lang\/Object;Ljava\/security\/PrivilegedAction&lt;Ljava\/lang\/Boolean;&gt;;\" source=\"ObjectInputStream.java\" inner=\"anon\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/lang\/Class;)V\" flags='' access=\"0\" cons=\"true\" signature=\"()V\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"26259\" count=\"26\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1657;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"run\" vmsig=\"()Ljava\/lang\/Boolean;\" flags=' public' access=\"1\" length=\"55\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26260\" count=\"26\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26266\" count=\"26\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"51\" e=\"54\" id=\"26261\" count=\"23\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"25\" id=\"26262\" count=\"48\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"25\">\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"26\" e=\"41\">\n+\t\t\t\t\t<catch s=\"26\" e=\"41\" id=\"26264\" count=\"46\"\/>\n+\t\t\t\t\t<exit s=\"41\" e=\"41\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"50\">\n+\t\t\t\t\t<catch s=\"42\" e=\"50\" id=\"26265\" count=\"45\"\/>\n+\t\t\t\t\t<goto s=\"48\" e=\"50\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26263\" count=\"45\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"51\" e=\"54\">\n+\t\t\t\t\t<exit s=\"54\" e=\"54\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1659;5=1660;11=1664;22=1666;26=1667;27=1670;38=1671;42=1672;43=1661;51=1675;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"run\" vmsig=\"()Ljava\/lang\/Object;\" flags=' public bridge synthetic' access=\"4161\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26267\" count=\"26\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1657;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$BlockDataInputStream\" supername=\"java\/io\/InputStream\" checksum=\"967975844\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/io\/ObjectInputStream;Ljava\/io\/InputStream;)V\" flags='' access=\"0\" cons=\"true\" length=\"79\">\n+\t\t\t\t<bl s=\"0\" e=\"78\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"78\" id=\"26268\" count=\"1214338\"\/>\n+\t\t\t\t\t<exit s=\"78\" e=\"78\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3034;9=3008;18=3010;25=3012;34=3015;39=3019;44=3021;49=3023;54=3035;66=3036;78=3037;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"setBlockDataMode\" vmsig=\"(Z)Z\" flags='' access=\"0\" length=\"74\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"26269\" count=\"84477145\"\/>\n+\t\t\t\t\t<br s=\"5\" e=\"7\">\n+\t\t\t\t\t\t<cond s=\"13\" e=\"16\" id=\"26270\" count=\"36116897\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"8\" e=\"12\" id=\"26271\" count=\"48360187\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"8\" e=\"12\">\n+\t\t\t\t\t<exit s=\"12\" e=\"12\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"16\">\n+\t\t\t\t\t<br s=\"14\" e=\"16\">\n+\t\t\t\t\t\t<cond s=\"35\" e=\"45\" id=\"26272\" count=\"17451284\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"17\" e=\"34\" id=\"26273\" count=\"18665598\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"17\" e=\"34\">\n+\t\t\t\t\t<goto s=\"32\" e=\"34\">\n+\t\t\t\t\t\t<tg s=\"56\" e=\"67\" id=\"26274\" count=\"18665572\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"35\" e=\"45\">\n+\t\t\t\t\t<br s=\"43\" e=\"45\">\n+\t\t\t\t\t\t<cond s=\"56\" e=\"67\" id=\"26275\" count=\"17451271\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"46\" e=\"55\" id=\"26276\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"55\">\n+\t\t\t\t\t<exit s=\"55\" e=\"55\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"56\" e=\"67\">\n+\t\t\t\t\t<br s=\"65\" e=\"67\">\n+\t\t\t\t\t\t<cond s=\"72\" e=\"72\" id=\"26277\" count=\"18665564\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"68\" e=\"71\" id=\"26278\" count=\"17451274\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"68\" e=\"71\">\n+\t\t\t\t\t<goto s=\"69\" e=\"71\">\n+\t\t\t\t\t\t<tg s=\"73\" e=\"73\" id=\"26279\" count=\"17451272\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"72\" e=\"72\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"73\">\n+\t\t\t\t\t<fall s=\"73\" e=\"73\" id=\"26280\" count=\"18665573\"\/>\n+\t\t\t\t\t<exit s=\"73\" e=\"73\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3047;8=3048;13=3050;17=3051;22=3052;27=3053;35=3054;46=3055;56=3057;61=3058;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"getBlockDataMode\" vmsig=\"()Z\" flags='' access=\"0\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26281\" count=\"51706024\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3066;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"skipBlockData\" vmsig=\"()V\" flags='' access=\"0\" length=\"32\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26282\" count=\"7013472\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"17\" e=\"23\" id=\"26283\" count=\"7013472\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"16\" id=\"26284\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"16\">\n+\t\t\t\t\t<exit s=\"16\" e=\"16\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"17\" e=\"23\">\n+\t\t\t\t\t<br s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<cond s=\"31\" e=\"31\" id=\"26285\" count=\"7013472\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"24\" e=\"30\" id=\"26286\" count=\"7013474\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"30\">\n+\t\t\t\t\t<goto s=\"28\" e=\"30\">\n+\t\t\t\t\t\t<tg s=\"17\" e=\"23\" id=\"26287\" count=\"7013476\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"31\" e=\"31\">\n+\t\t\t\t\t<exit s=\"31\" e=\"31\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3075;7=3076;17=3078;24=3079;31=3081;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readBlockHeader\" vmsig=\"(Z)I\" flags=' private' access=\"2\" length=\"249\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"26288\" count=\"10378227\"\/>\n+\t\t\t\t\t<br s=\"7\" e=\"9\">\n+\t\t\t\t\t\t<cond s=\"12\" e=\"15\" id=\"26289\" count=\"10378221\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"10\" e=\"11\" id=\"26290\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"10\" e=\"11\">\n+\t\t\t\t\t<exit s=\"11\" e=\"11\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"15\">\n+\t\t\t\t\t<br s=\"13\" e=\"15\">\n+\t\t\t\t\t\t<cond s=\"21\" e=\"27\" id=\"26291\" count=\"607\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"16\" e=\"20\" id=\"26292\" count=\"10377614\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"16\" e=\"20\">\n+\t\t\t\t\t<goto s=\"18\" e=\"20\">\n+\t\t\t\t\t\t<tg s=\"28\" e=\"32\" id=\"26293\" count=\"10377614\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"21\" e=\"27\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"32\">\n+\t\t\t\t\t<fall s=\"28\" e=\"32\" id=\"26316\" count=\"607\"\/>\n+\t\t\t\t\t<br s=\"30\" e=\"32\">\n+\t\t\t\t\t\t<cond s=\"36\" e=\"75\" id=\"26294\" count=\"10378216\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"33\" e=\"35\" id=\"26295\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"33\" e=\"35\">\n+\t\t\t\t\t<exit s=\"35\" e=\"35\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"75\">\n+\t\t\t\t\t<switch s=\"45\" e=\"75\">\n+\t\t\t\t\t\t<default s=\"193\" e=\"196\" id=\"26296\" count=\"10\"\/>\n+\t\t\t\t\t\t<case s=\"76\" e=\"80\" id=\"26297\" count=\"3324233\" val=\"119\"\/>\n+\t\t\t\t\t\t<case s=\"193\" e=\"196\" id=\"26298\" count=\"7013474\" val=\"120\"\/>\n+\t\t\t\t\t\t<case s=\"175\" e=\"192\" id=\"26299\" count=\"0\" val=\"121\"\/>\n+\t\t\t\t\t\t<case s=\"108\" e=\"112\" id=\"26300\" count=\"40506\" val=\"122\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"80\">\n+\t\t\t\t\t<br s=\"78\" e=\"80\">\n+\t\t\t\t\t\t<cond s=\"84\" e=\"107\" id=\"26301\" count=\"3324229\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"81\" e=\"83\" id=\"26302\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"81\" e=\"83\">\n+\t\t\t\t\t<exit s=\"83\" e=\"83\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"84\" e=\"107\">\n+\t\t\t\t\t<exit s=\"107\" e=\"107\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"108\" e=\"112\">\n+\t\t\t\t\t<br s=\"110\" e=\"112\">\n+\t\t\t\t\t\t<cond s=\"116\" e=\"143\" id=\"26303\" count=\"40502\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"113\" e=\"115\" id=\"26304\" count=\"4\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"113\" e=\"115\">\n+\t\t\t\t\t<exit s=\"115\" e=\"115\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"116\" e=\"143\">\n+\t\t\t\t\t<br s=\"141\" e=\"143\">\n+\t\t\t\t\t\t<cond s=\"172\" e=\"174\" id=\"26305\" count=\"40502\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"144\" e=\"171\" id=\"26306\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"144\" e=\"171\">\n+\t\t\t\t\t<exit s=\"171\" e=\"171\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"172\" e=\"174\">\n+\t\t\t\t\t<exit s=\"174\" e=\"174\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"175\" e=\"192\">\n+\t\t\t\t\t<goto s=\"190\" e=\"192\">\n+\t\t\t\t\t\t<tg s=\"235\" e=\"237\" id=\"26307\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"193\" e=\"196\">\n+\t\t\t\t\t<br s=\"194\" e=\"196\">\n+\t\t\t\t\t\t<cond s=\"233\" e=\"234\" id=\"26308\" count=\"6\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"197\" e=\"202\" id=\"26309\" count=\"7013480\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"197\" e=\"202\">\n+\t\t\t\t\t<br s=\"200\" e=\"202\">\n+\t\t\t\t\t\t<cond s=\"209\" e=\"232\" id=\"26310\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"203\" e=\"208\" id=\"26311\" count=\"7013473\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"203\" e=\"208\">\n+\t\t\t\t\t<br s=\"206\" e=\"208\">\n+\t\t\t\t\t\t<cond s=\"233\" e=\"234\" id=\"26312\" count=\"7013473\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"209\" e=\"232\" id=\"26313\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"209\" e=\"232\">\n+\t\t\t\t\t<exit s=\"232\" e=\"232\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"233\" e=\"234\">\n+\t\t\t\t\t<exit s=\"234\" e=\"234\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"235\" e=\"237\">\n+\t\t\t\t\t<goto s=\"235\" e=\"237\">\n+\t\t\t\t\t\t<tg s=\"12\" e=\"15\" id=\"26314\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"238\" e=\"248\">\n+\t\t\t\t\t<catch s=\"238\" e=\"248\" id=\"26315\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"248\" e=\"248\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3091;10=3098;12=3102;29=3103;33=3104;36=3107;44=3108;76=3110;81=3111;84=3113;97=3114;108=3117;113=3118;116=3120;129=3121;139=3122;144=3123;172=3127;175=3136;183=3137;190=3138;193=3141;209=3142;222=3144;226=3143;233=3146;235=3148;238=3149;239=3150;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"refill\" vmsig=\"()V\" flags=' private' access=\"2\" length=\"136\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"26317\" count=\"10377608\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"70\" e=\"79\" id=\"26318\" count=\"10377605\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"38\" id=\"26319\" count=\"3364126\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"38\">\n+\t\t\t\t\t<br s=\"36\" e=\"38\">\n+\t\t\t\t\t\t<cond s=\"57\" e=\"66\" id=\"26320\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"39\" e=\"56\" id=\"26321\" count=\"3364134\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"39\" e=\"56\">\n+\t\t\t\t\t<goto s=\"54\" e=\"56\">\n+\t\t\t\t\t\t<tg s=\"67\" e=\"69\" id=\"26322\" count=\"3364134\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"57\" e=\"66\">\n+\t\t\t\t\t<exit s=\"66\" e=\"66\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"67\" e=\"69\">\n+\t\t\t\t\t<goto s=\"67\" e=\"69\">\n+\t\t\t\t\t\t<tg s=\"103\" e=\"113\" id=\"26323\" count=\"3364133\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"70\" e=\"79\">\n+\t\t\t\t\t<br s=\"77\" e=\"79\">\n+\t\t\t\t\t\t<cond s=\"93\" e=\"102\" id=\"26324\" count=\"7013485\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"80\" e=\"92\" id=\"26325\" count=\"3364134\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"80\" e=\"92\">\n+\t\t\t\t\t<goto s=\"90\" e=\"92\">\n+\t\t\t\t\t\t<tg s=\"103\" e=\"113\" id=\"26326\" count=\"3364131\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"93\" e=\"102\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"113\">\n+\t\t\t\t\t<fall s=\"103\" e=\"113\" id=\"26331\" count=\"7013482\"\/>\n+\t\t\t\t\t<br s=\"111\" e=\"113\">\n+\t\t\t\t\t\t<cond s=\"0\" e=\"11\" id=\"26327\" count=\"3364125\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"114\" e=\"116\" id=\"26328\" count=\"10377606\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"114\" e=\"116\">\n+\t\t\t\t\t<goto s=\"114\" e=\"116\">\n+\t\t\t\t\t\t<tg s=\"135\" e=\"135\" id=\"26329\" count=\"10377610\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"117\" e=\"134\">\n+\t\t\t\t\t<catch s=\"117\" e=\"134\" id=\"26330\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"134\" e=\"134\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"135\" e=\"135\">\n+\t\t\t\t\t<exit s=\"135\" e=\"135\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3165;5=3166;12=3167;28=3168;35=3169;39=3170;44=3171;57=3173;67=3176;70=3177;76=3178;80=3179;85=3180;93=3182;98=3183;103=3186;114=3192;117=3187;118=3188;123=3189;128=3190;133=3191;135=3193;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"currentBlockRemaining\" vmsig=\"()I\" flags='' access=\"0\" length=\"41\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26332\" count=\"9107290\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"33\" e=\"40\" id=\"26333\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"13\" id=\"26334\" count=\"9107294\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"13\">\n+\t\t\t\t\t<br s=\"11\" e=\"13\">\n+\t\t\t\t\t\t<cond s=\"31\" e=\"31\" id=\"26335\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"14\" e=\"30\" id=\"26336\" count=\"9107277\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"30\">\n+\t\t\t\t\t<goto s=\"28\" e=\"30\">\n+\t\t\t\t\t\t<tg s=\"32\" e=\"32\" id=\"26337\" count=\"9107268\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"31\" e=\"31\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"32\" e=\"32\">\n+\t\t\t\t\t<fall s=\"32\" e=\"32\" id=\"26338\" count=\"2\"\/>\n+\t\t\t\t\t<exit s=\"32\" e=\"32\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"33\" e=\"40\">\n+\t\t\t\t\t<exit s=\"40\" e=\"40\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3201;7=3202;33=3204;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"peek\" vmsig=\"()I\" flags='' access=\"0\" length=\"55\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26339\" count=\"72457740\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"47\" e=\"54\" id=\"26340\" count=\"72457767\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"17\" id=\"26341\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"22\" e=\"28\" id=\"26342\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"21\" id=\"26343\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"21\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"28\">\n+\t\t\t\t\t<fall s=\"22\" e=\"28\" id=\"26347\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"26\" e=\"28\">\n+\t\t\t\t\t\t<cond s=\"45\" e=\"45\" id=\"26344\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"29\" e=\"44\" id=\"26345\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"44\">\n+\t\t\t\t\t<goto s=\"42\" e=\"44\">\n+\t\t\t\t\t\t<tg s=\"46\" e=\"46\" id=\"26346\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"45\" e=\"45\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"46\" e=\"46\">\n+\t\t\t\t\t<fall s=\"46\" e=\"46\" id=\"26348\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"46\" e=\"46\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"47\" e=\"54\">\n+\t\t\t\t\t<exit s=\"54\" e=\"54\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3214;7=3215;18=3216;22=3218;47=3220;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"peekByte\" vmsig=\"()B\" flags='' access=\"0\" length=\"20\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26349\" count=\"72457750\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"17\" e=\"19\" id=\"26350\" count=\"72457763\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"16\" id=\"26351\" count=\"11\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"16\">\n+\t\t\t\t\t<exit s=\"16\" e=\"16\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"17\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3230;5=3231;9=3232;17=3234;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"read\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"62\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26352\" count=\"84198393\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"54\" e=\"61\" id=\"26353\" count=\"77833778\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"17\" id=\"26354\" count=\"6364582\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"22\" e=\"28\" id=\"26355\" count=\"5321409\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"21\" id=\"26356\" count=\"1043174\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"21\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"28\">\n+\t\t\t\t\t<fall s=\"22\" e=\"28\" id=\"26360\" count=\"1043176\"\/>\n+\t\t\t\t\t<br s=\"26\" e=\"28\">\n+\t\t\t\t\t\t<cond s=\"52\" e=\"52\" id=\"26357\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"29\" e=\"51\" id=\"26358\" count=\"6364582\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"51\">\n+\t\t\t\t\t<goto s=\"49\" e=\"51\">\n+\t\t\t\t\t\t<tg s=\"53\" e=\"53\" id=\"26359\" count=\"6364582\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"52\" e=\"52\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"53\" e=\"53\">\n+\t\t\t\t\t<fall s=\"53\" e=\"53\" id=\"26361\" count=\"3\"\/>\n+\t\t\t\t\t<exit s=\"53\" e=\"53\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"54\" e=\"61\">\n+\t\t\t\t\t<exit s=\"61\" e=\"61\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3247;7=3248;18=3249;22=3251;54=3253;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"read\" vmsig=\"([BII)I\" flags=' public' access=\"1\" length=\"9\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26362\" count=\"2319936\"\/>\n+\t\t\t\t\t<exit s=\"8\" e=\"8\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3258;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"skip\" vmsig=\"(J)J\" flags=' public' access=\"1\" length=\"123\">\n+\t\t\t\t<bl s=\"0\" e=\"1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"1\" id=\"26363\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"2\" e=\"7\">\n+\t\t\t\t\t<fall s=\"2\" e=\"7\" id=\"26378\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"5\" e=\"7\">\n+\t\t\t\t\t\t<cond s=\"119\" e=\"122\" id=\"26364\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"8\" e=\"14\" id=\"26365\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"8\" e=\"14\">\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"77\" e=\"106\" id=\"26366\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"25\" id=\"26367\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"25\">\n+\t\t\t\t\t<br s=\"23\" e=\"25\">\n+\t\t\t\t\t\t<cond s=\"30\" e=\"36\" id=\"26368\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"26\" e=\"29\" id=\"26369\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"26\" e=\"29\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"30\" e=\"36\">\n+\t\t\t\t\t<fall s=\"30\" e=\"36\" id=\"26379\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"34\" e=\"36\">\n+\t\t\t\t\t\t<cond s=\"40\" e=\"76\" id=\"26370\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"37\" e=\"39\" id=\"26371\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"37\" e=\"39\">\n+\t\t\t\t\t<goto s=\"37\" e=\"39\">\n+\t\t\t\t\t\t<tg s=\"119\" e=\"122\" id=\"26372\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"40\" e=\"76\">\n+\t\t\t\t\t<goto s=\"74\" e=\"76\">\n+\t\t\t\t\t\t<tg s=\"2\" e=\"7\" id=\"26373\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"77\" e=\"106\">\n+\t\t\t\t\t<br s=\"104\" e=\"106\">\n+\t\t\t\t\t\t<cond s=\"110\" e=\"118\" id=\"26374\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"107\" e=\"109\" id=\"26375\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"107\" e=\"109\">\n+\t\t\t\t\t<goto s=\"107\" e=\"109\">\n+\t\t\t\t\t\t<tg s=\"119\" e=\"122\" id=\"26376\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"110\" e=\"118\">\n+\t\t\t\t\t<goto s=\"116\" e=\"118\">\n+\t\t\t\t\t\t<tg s=\"2\" e=\"7\" id=\"26377\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"119\" e=\"122\">\n+\t\t\t\t\t<exit s=\"122\" e=\"122\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3262;2=3263;8=3264;15=3265;26=3266;30=3268;37=3269;40=3271;57=3272;63=3273;74=3274;77=3275;87=3276;107=3277;110=3279;116=3280;119=3282;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"available\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"152\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26380\" count=\"607\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"144\" e=\"151\" id=\"26381\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"17\" id=\"26382\" count=\"607\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"95\" e=\"101\" id=\"26383\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"24\" id=\"26384\" count=\"607\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"24\">\n+\t\t\t\t\t<br s=\"22\" e=\"24\">\n+\t\t\t\t\t\t<cond s=\"95\" e=\"101\" id=\"26385\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"25\" e=\"34\" id=\"26386\" count=\"607\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"34\">\n+\t\t\t\t\t<br s=\"32\" e=\"34\">\n+\t\t\t\t\t\t<cond s=\"38\" e=\"63\" id=\"26387\" count=\"607\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"35\" e=\"37\" id=\"26388\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"35\" e=\"37\">\n+\t\t\t\t\t<goto s=\"35\" e=\"37\">\n+\t\t\t\t\t\t<tg s=\"25\" e=\"34\" id=\"26389\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"63\">\n+\t\t\t\t\t<switch s=\"39\" e=\"63\">\n+\t\t\t\t\t\t<default s=\"80\" e=\"94\" id=\"26390\" count=\"600\"\/>\n+\t\t\t\t\t\t<case s=\"64\" e=\"66\" id=\"26391\" count=\"7\" val=\"-2\"\/>\n+\t\t\t\t\t\t<case s=\"67\" e=\"79\" id=\"26392\" count=\"0\" val=\"-1\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"64\" e=\"66\">\n+\t\t\t\t\t<goto s=\"64\" e=\"66\">\n+\t\t\t\t\t\t<tg s=\"95\" e=\"101\" id=\"26393\" count=\"7\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"67\" e=\"79\">\n+\t\t\t\t\t<goto s=\"77\" e=\"79\">\n+\t\t\t\t\t\t<tg s=\"95\" e=\"101\" id=\"26394\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"80\" e=\"94\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"95\" e=\"101\">\n+\t\t\t\t\t<fall s=\"95\" e=\"101\" id=\"26401\" count=\"600\"\/>\n+\t\t\t\t\t<br s=\"99\" e=\"101\">\n+\t\t\t\t\t\t<cond s=\"119\" e=\"119\" id=\"26395\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"102\" e=\"118\" id=\"26396\" count=\"600\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"102\" e=\"118\">\n+\t\t\t\t\t<goto s=\"116\" e=\"118\">\n+\t\t\t\t\t\t<tg s=\"120\" e=\"127\" id=\"26397\" count=\"600\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"119\" e=\"119\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"120\" e=\"127\">\n+\t\t\t\t\t<fall s=\"120\" e=\"127\" id=\"26402\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"125\" e=\"127\">\n+\t\t\t\t\t\t<cond s=\"142\" e=\"142\" id=\"26398\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"128\" e=\"141\" id=\"26399\" count=\"607\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"128\" e=\"141\">\n+\t\t\t\t\t<goto s=\"139\" e=\"141\">\n+\t\t\t\t\t\t<tg s=\"143\" e=\"143\" id=\"26400\" count=\"607\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"142\" e=\"142\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"143\" e=\"143\">\n+\t\t\t\t\t<fall s=\"143\" e=\"143\" id=\"26403\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"143\" e=\"143\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"144\" e=\"151\">\n+\t\t\t\t\t<exit s=\"151\" e=\"151\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3286;7=3287;25=3289;38=3290;64=3292;67=3295;72=3296;77=3297;80=3300;85=3301;90=3302;95=3307;102=3308;121=3309;144=3311;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"close\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"30\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26404\" count=\"5004\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"22\" e=\"29\" id=\"26405\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"21\" id=\"26406\" count=\"5000\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"21\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"29\">\n+\t\t\t\t\t<fall s=\"22\" e=\"29\" id=\"26407\" count=\"5001\"\/>\n+\t\t\t\t\t<exit s=\"29\" e=\"29\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3316;7=3317;12=3318;17=3319;22=3321;29=3322;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"read\" vmsig=\"([BIIZ)I\" flags='' access=\"0\" length=\"138\">\n+\t\t\t\t<bl s=\"0\" e=\"3\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"3\" id=\"26408\" count=\"7487443\"\/>\n+\t\t\t\t\t<br s=\"1\" e=\"3\">\n+\t\t\t\t\t\t<cond s=\"6\" e=\"12\" id=\"26409\" count=\"7487439\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"4\" e=\"5\" id=\"26410\" count=\"7\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"4\" e=\"5\">\n+\t\t\t\t\t<exit s=\"5\" e=\"5\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"6\" e=\"12\">\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"81\" e=\"85\" id=\"26411\" count=\"5166409\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"23\" id=\"26412\" count=\"2321032\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"23\">\n+\t\t\t\t\t<br s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"34\" id=\"26413\" count=\"70\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"24\" e=\"27\" id=\"26414\" count=\"2320962\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"27\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"34\">\n+\t\t\t\t\t<fall s=\"28\" e=\"34\" id=\"26421\" count=\"2320963\"\/>\n+\t\t\t\t\t<br s=\"32\" e=\"34\">\n+\t\t\t\t\t\t<cond s=\"37\" e=\"80\" id=\"26415\" count=\"2321019\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"35\" e=\"36\" id=\"26416\" count=\"11\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"35\" e=\"36\">\n+\t\t\t\t\t<exit s=\"36\" e=\"36\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"37\" e=\"80\">\n+\t\t\t\t\t<exit s=\"80\" e=\"80\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"81\" e=\"85\">\n+\t\t\t\t\t<br s=\"83\" e=\"85\">\n+\t\t\t\t\t\t<cond s=\"127\" e=\"137\" id=\"26417\" count=\"5134380\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"86\" e=\"111\" id=\"26418\" count=\"32030\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"86\" e=\"111\">\n+\t\t\t\t\t<br s=\"109\" e=\"111\">\n+\t\t\t\t\t\t<cond s=\"124\" e=\"126\" id=\"26419\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"112\" e=\"123\" id=\"26420\" count=\"32030\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"112\" e=\"123\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"124\" e=\"126\">\n+\t\t\t\t\t<fall s=\"124\" e=\"126\" id=\"26422\" count=\"32030\"\/>\n+\t\t\t\t\t<exit s=\"126\" e=\"126\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"127\" e=\"137\">\n+\t\t\t\t\t<exit s=\"137\" e=\"137\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3332;4=3333;6=3334;13=3335;24=3336;28=3338;35=3339;37=3341;52=3342;67=3343;78=3344;81=3345;86=3346;107=3347;112=3348;124=3350;127=3352;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFully\" vmsig=\"([B)V\" flags=' public' access=\"1\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"26423\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3365;9=3366;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFully\" vmsig=\"([BII)V\" flags=' public' access=\"1\" length=\"9\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26424\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"8\" e=\"8\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3369;8=3370;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFully\" vmsig=\"([BIIZ)V\" flags=' public' access=\"1\" length=\"42\">\n+\t\t\t\t<bl s=\"0\" e=\"3\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"3\" id=\"26425\" count=\"5163051\"\/>\n+\t\t\t\t\t<br s=\"1\" e=\"3\">\n+\t\t\t\t\t\t<cond s=\"41\" e=\"41\" id=\"26426\" count=\"5163050\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"4\" e=\"19\" id=\"26427\" count=\"5166456\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"4\" e=\"19\">\n+\t\t\t\t\t<br s=\"17\" e=\"19\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"40\" id=\"26428\" count=\"5166458\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"20\" e=\"27\" id=\"26429\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"27\">\n+\t\t\t\t\t<exit s=\"27\" e=\"27\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"40\">\n+\t\t\t\t\t<goto s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<tg s=\"0\" e=\"3\" id=\"26430\" count=\"5166456\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"41\">\n+\t\t\t\t\t<exit s=\"41\" e=\"41\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3375;4=3376;15=3377;20=3378;28=3380;33=3381;38=3382;41=3383;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"skipBytes\" vmsig=\"(I)I\" flags=' public' access=\"1\" length=\"9\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26431\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"8\" e=\"8\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3386;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readBoolean\" vmsig=\"()Z\" flags=' public' access=\"1\" length=\"27\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26432\" count=\"4041349\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"17\" e=\"20\" id=\"26433\" count=\"4041348\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"16\" id=\"26434\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"16\">\n+\t\t\t\t\t<exit s=\"16\" e=\"16\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"17\" e=\"20\">\n+\t\t\t\t\t<br s=\"18\" e=\"20\">\n+\t\t\t\t\t\t<cond s=\"25\" e=\"25\" id=\"26435\" count=\"3021071\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"21\" e=\"24\" id=\"26436\" count=\"1020277\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"21\" e=\"24\">\n+\t\t\t\t\t<goto s=\"22\" e=\"24\">\n+\t\t\t\t\t\t<tg s=\"26\" e=\"26\" id=\"26437\" count=\"1020277\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"25\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"26\" e=\"26\">\n+\t\t\t\t\t<fall s=\"26\" e=\"26\" id=\"26438\" count=\"3021073\"\/>\n+\t\t\t\t\t<exit s=\"26\" e=\"26\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3390;5=3391;9=3392;17=3394;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readByte\" vmsig=\"()B\" flags=' public' access=\"1\" length=\"20\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26439\" count=\"80157033\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"17\" e=\"19\" id=\"26440\" count=\"80156952\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"16\" id=\"26441\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"16\">\n+\t\t\t\t\t<exit s=\"16\" e=\"16\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"17\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3398;5=3399;9=3400;17=3402;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUnsignedByte\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"19\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26442\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"17\" e=\"18\" id=\"26443\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"16\" id=\"26444\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"16\">\n+\t\t\t\t\t<exit s=\"16\" e=\"16\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"17\" e=\"18\">\n+\t\t\t\t\t<exit s=\"18\" e=\"18\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3406;5=3407;9=3408;17=3410;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readChar\" vmsig=\"()C\" flags=' public' access=\"1\" length=\"73\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26445\" count=\"2040199\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"40\" id=\"26446\" count=\"2040199\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"27\" id=\"26447\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"27\">\n+\t\t\t\t\t<goto s=\"25\" e=\"27\">\n+\t\t\t\t\t\t<tg s=\"49\" e=\"72\" id=\"26448\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"40\">\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"72\" id=\"26449\" count=\"2037491\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"48\" id=\"26450\" count=\"2708\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"48\">\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"72\">\n+\t\t\t\t\t<exit s=\"72\" e=\"72\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3414;7=3415;12=3416;28=3417;41=3418;49=3420;61=3421;71=3422;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readShort\" vmsig=\"()S\" flags=' public' access=\"1\" length=\"73\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26451\" count=\"8668130\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"40\" id=\"26452\" count=\"4588576\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"27\" id=\"26453\" count=\"4079556\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"27\">\n+\t\t\t\t\t<goto s=\"25\" e=\"27\">\n+\t\t\t\t\t\t<tg s=\"49\" e=\"72\" id=\"26454\" count=\"4079567\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"40\">\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"72\" id=\"26455\" count=\"4586067\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"48\" id=\"26456\" count=\"2510\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"48\">\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"72\">\n+\t\t\t\t\t<exit s=\"72\" e=\"72\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3426;7=3427;12=3428;28=3429;41=3430;49=3432;61=3433;71=3434;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUnsignedShort\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"76\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26457\" count=\"18051885\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"40\" id=\"26458\" count=\"4006088\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"27\" id=\"26459\" count=\"14045797\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"27\">\n+\t\t\t\t\t<goto s=\"25\" e=\"27\">\n+\t\t\t\t\t\t<tg s=\"49\" e=\"75\" id=\"26460\" count=\"14045802\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"40\">\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"75\" id=\"26461\" count=\"2001313\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"48\" id=\"26462\" count=\"2004776\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"48\">\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"75\">\n+\t\t\t\t\t<exit s=\"75\" e=\"75\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3438;7=3439;12=3440;28=3441;41=3442;49=3444;64=3445;74=3446;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readInt\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"73\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26463\" count=\"37135065\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"40\" id=\"26464\" count=\"6871090\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"27\" id=\"26465\" count=\"30263967\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"27\">\n+\t\t\t\t\t<goto s=\"25\" e=\"27\">\n+\t\t\t\t\t\t<tg s=\"49\" e=\"72\" id=\"26466\" count=\"30263972\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"40\">\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"72\" id=\"26467\" count=\"6860675\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"48\" id=\"26468\" count=\"10417\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"48\">\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"72\">\n+\t\t\t\t\t<exit s=\"72\" e=\"72\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3450;7=3451;12=3452;28=3453;41=3454;49=3456;61=3457;71=3458;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFloat\" vmsig=\"()F\" flags=' public' access=\"1\" length=\"73\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26469\" count=\"2040798\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"28\" e=\"40\" id=\"26470\" count=\"2040798\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"27\" id=\"26471\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"27\">\n+\t\t\t\t\t<goto s=\"25\" e=\"27\">\n+\t\t\t\t\t\t<tg s=\"49\" e=\"72\" id=\"26472\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"40\">\n+\t\t\t\t\t<br s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"72\" id=\"26473\" count=\"2035778\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"41\" e=\"48\" id=\"26474\" count=\"5020\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"48\">\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"freturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"72\">\n+\t\t\t\t\t<exit s=\"72\" e=\"72\" opcode=\"freturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3462;7=3463;12=3464;28=3465;41=3466;49=3468;61=3469;71=3470;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readLong\" vmsig=\"()J\" flags=' public' access=\"1\" length=\"76\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26475\" count=\"8788733\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"29\" e=\"42\" id=\"26476\" count=\"7137825\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"28\" id=\"26477\" count=\"1650905\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"28\">\n+\t\t\t\t\t<goto s=\"26\" e=\"28\">\n+\t\t\t\t\t\t<tg s=\"51\" e=\"75\" id=\"26478\" count=\"1650914\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"42\">\n+\t\t\t\t\t<br s=\"40\" e=\"42\">\n+\t\t\t\t\t\t<cond s=\"51\" e=\"75\" id=\"26479\" count=\"6853360\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"43\" e=\"50\" id=\"26480\" count=\"284463\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"50\">\n+\t\t\t\t\t<exit s=\"50\" e=\"50\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"51\" e=\"75\">\n+\t\t\t\t\t<exit s=\"75\" e=\"75\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3474;7=3475;12=3476;29=3477;43=3478;51=3480;63=3481;74=3482;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readDouble\" vmsig=\"()D\" flags=' public' access=\"1\" length=\"76\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26481\" count=\"2040001\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"29\" e=\"42\" id=\"26482\" count=\"2040001\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"28\" id=\"26483\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"28\">\n+\t\t\t\t\t<goto s=\"26\" e=\"28\">\n+\t\t\t\t\t\t<tg s=\"51\" e=\"75\" id=\"26484\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"42\">\n+\t\t\t\t\t<br s=\"40\" e=\"42\">\n+\t\t\t\t\t\t<cond s=\"51\" e=\"75\" id=\"26485\" count=\"2029961\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"43\" e=\"50\" id=\"26486\" count=\"10040\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"50\">\n+\t\t\t\t\t<exit s=\"50\" e=\"50\" opcode=\"dreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"51\" e=\"75\">\n+\t\t\t\t\t<exit s=\"75\" e=\"75\" opcode=\"dreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3486;7=3487;12=3488;29=3489;43=3490;51=3492;63=3493;74=3494;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUTF\" vmsig=\"()Ljava\/lang\/String;\" flags=' public' access=\"1\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"26487\" count=\"18051888\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3498;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readLine\" vmsig=\"()Ljava\/lang\/String;\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"26488\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3503;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readBooleans\" vmsig=\"([ZII)V\" flags='' access=\"0\" length=\"139\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26489\" count=\"22636\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26501\" count=\"22636\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"138\" e=\"138\" id=\"26490\" count=\"22636\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"26491\" count=\"22634\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"58\" e=\"70\" id=\"26492\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"57\" id=\"26493\" count=\"22634\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"57\">\n+\t\t\t\t\t<goto s=\"55\" e=\"57\">\n+\t\t\t\t\t\t<tg s=\"105\" e=\"110\" id=\"26494\" count=\"22634\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"58\" e=\"70\">\n+\t\t\t\t\t<br s=\"68\" e=\"70\">\n+\t\t\t\t\t\t<cond s=\"87\" e=\"104\" id=\"26495\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"71\" e=\"86\" id=\"26496\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"71\" e=\"86\">\n+\t\t\t\t\t<goto s=\"84\" e=\"86\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26497\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"87\" e=\"104\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"105\" e=\"110\">\n+\t\t\t\t\t<fall s=\"105\" e=\"110\" id=\"26502\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"108\" e=\"110\">\n+\t\t\t\t\t\t<cond s=\"5\" e=\"10\" id=\"26498\" count=\"22634\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"111\" e=\"137\" id=\"26499\" count=\"2658413\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"111\" e=\"137\">\n+\t\t\t\t\t<goto s=\"135\" e=\"137\">\n+\t\t\t\t\t\t<tg s=\"105\" e=\"110\" id=\"26500\" count=\"2658413\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"138\" e=\"138\">\n+\t\t\t\t\t<exit s=\"138\" e=\"138\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3515;5=3516;11=3517;18=3518;30=3519;44=3520;50=3521;55=3522;71=3523;84=3524;87=3526;105=3529;111=3530;138=3533;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readChars\" vmsig=\"([CII)V\" flags='' access=\"0\" length=\"146\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26503\" count=\"23785\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26515\" count=\"23785\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"145\" e=\"145\" id=\"26504\" count=\"23785\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"26505\" count=\"23803\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"72\" id=\"26506\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"59\" id=\"26507\" count=\"23803\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"59\">\n+\t\t\t\t\t<goto s=\"57\" e=\"59\">\n+\t\t\t\t\t\t<tg s=\"109\" e=\"114\" id=\"26508\" count=\"23803\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"72\">\n+\t\t\t\t\t<br s=\"70\" e=\"72\">\n+\t\t\t\t\t\t<cond s=\"89\" e=\"108\" id=\"26509\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"73\" e=\"88\" id=\"26510\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"88\">\n+\t\t\t\t\t<goto s=\"86\" e=\"88\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26511\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"89\" e=\"108\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"109\" e=\"114\">\n+\t\t\t\t\t<fall s=\"109\" e=\"114\" id=\"26516\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"112\" e=\"114\">\n+\t\t\t\t\t\t<cond s=\"5\" e=\"10\" id=\"26512\" count=\"23803\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"115\" e=\"144\" id=\"26513\" count=\"2676994\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"115\" e=\"144\">\n+\t\t\t\t\t<goto s=\"142\" e=\"144\">\n+\t\t\t\t\t\t<tg s=\"109\" e=\"114\" id=\"26514\" count=\"2676994\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"145\" e=\"145\">\n+\t\t\t\t\t<exit s=\"145\" e=\"145\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3536;5=3537;11=3538;18=3539;30=3540;46=3541;52=3542;57=3543;73=3544;86=3545;89=3547;109=3550;115=3551;132=3552;145=3555;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readShorts\" vmsig=\"([SII)V\" flags='' access=\"0\" length=\"146\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26517\" count=\"23771\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26529\" count=\"23771\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"145\" e=\"145\" id=\"26518\" count=\"23771\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"26519\" count=\"23787\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"72\" id=\"26520\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"59\" id=\"26521\" count=\"23787\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"59\">\n+\t\t\t\t\t<goto s=\"57\" e=\"59\">\n+\t\t\t\t\t\t<tg s=\"109\" e=\"114\" id=\"26522\" count=\"23787\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"72\">\n+\t\t\t\t\t<br s=\"70\" e=\"72\">\n+\t\t\t\t\t\t<cond s=\"89\" e=\"108\" id=\"26523\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"73\" e=\"88\" id=\"26524\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"88\">\n+\t\t\t\t\t<goto s=\"86\" e=\"88\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26525\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"89\" e=\"108\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"109\" e=\"114\">\n+\t\t\t\t\t<fall s=\"109\" e=\"114\" id=\"26530\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"112\" e=\"114\">\n+\t\t\t\t\t\t<cond s=\"5\" e=\"10\" id=\"26526\" count=\"23787\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"115\" e=\"144\" id=\"26527\" count=\"2676061\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"115\" e=\"144\">\n+\t\t\t\t\t<goto s=\"142\" e=\"144\">\n+\t\t\t\t\t\t<tg s=\"109\" e=\"114\" id=\"26528\" count=\"2676061\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"145\" e=\"145\">\n+\t\t\t\t\t<exit s=\"145\" e=\"145\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3558;5=3559;11=3560;18=3561;30=3562;46=3563;52=3564;57=3565;73=3566;86=3567;89=3569;109=3572;115=3573;132=3574;145=3577;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readInts\" vmsig=\"([III)V\" flags='' access=\"0\" length=\"146\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26531\" count=\"25503\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26543\" count=\"25503\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"145\" e=\"145\" id=\"26532\" count=\"25506\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"26533\" count=\"43790\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"72\" id=\"26534\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"59\" id=\"26535\" count=\"43790\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"59\">\n+\t\t\t\t\t<goto s=\"57\" e=\"59\">\n+\t\t\t\t\t\t<tg s=\"109\" e=\"114\" id=\"26536\" count=\"43791\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"72\">\n+\t\t\t\t\t<br s=\"70\" e=\"72\">\n+\t\t\t\t\t\t<cond s=\"89\" e=\"108\" id=\"26537\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"73\" e=\"88\" id=\"26538\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"88\">\n+\t\t\t\t\t<goto s=\"86\" e=\"88\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26539\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"89\" e=\"108\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"109\" e=\"114\">\n+\t\t\t\t\t<fall s=\"109\" e=\"114\" id=\"26544\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"112\" e=\"114\">\n+\t\t\t\t\t\t<cond s=\"5\" e=\"10\" id=\"26540\" count=\"43792\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"115\" e=\"144\" id=\"26541\" count=\"7553871\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"115\" e=\"144\">\n+\t\t\t\t\t<goto s=\"142\" e=\"144\">\n+\t\t\t\t\t\t<tg s=\"109\" e=\"114\" id=\"26542\" count=\"7553985\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"145\" e=\"145\">\n+\t\t\t\t\t<exit s=\"145\" e=\"145\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3580;5=3581;11=3582;18=3583;30=3584;46=3585;52=3586;57=3587;73=3588;86=3589;89=3591;109=3594;115=3595;132=3596;145=3599;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFloats\" vmsig=\"([FII)V\" flags='' access=\"0\" length=\"144\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26545\" count=\"23732\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26557\" count=\"23732\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"143\" e=\"143\" id=\"26546\" count=\"23732\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"26547\" count=\"23789\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"72\" id=\"26548\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"59\" id=\"26549\" count=\"23789\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"59\">\n+\t\t\t\t\t<goto s=\"57\" e=\"59\">\n+\t\t\t\t\t\t<tg s=\"107\" e=\"112\" id=\"26550\" count=\"23789\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"72\">\n+\t\t\t\t\t<br s=\"70\" e=\"72\">\n+\t\t\t\t\t\t<cond s=\"89\" e=\"106\" id=\"26551\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"73\" e=\"88\" id=\"26552\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"88\">\n+\t\t\t\t\t<goto s=\"86\" e=\"88\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26553\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"89\" e=\"106\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"107\" e=\"112\">\n+\t\t\t\t\t<fall s=\"107\" e=\"112\" id=\"26558\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"110\" e=\"112\">\n+\t\t\t\t\t\t<cond s=\"5\" e=\"10\" id=\"26554\" count=\"23789\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"113\" e=\"142\" id=\"26555\" count=\"2675624\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"113\" e=\"142\">\n+\t\t\t\t\t<goto s=\"140\" e=\"142\">\n+\t\t\t\t\t\t<tg s=\"107\" e=\"112\" id=\"26556\" count=\"2675624\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"143\" e=\"143\">\n+\t\t\t\t\t<exit s=\"143\" e=\"143\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3602;5=3603;11=3604;18=3605;30=3606;46=3607;52=3608;57=3609;73=3610;86=3611;89=3613;107=3616;113=3617;130=3618;143=3621;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readLongs\" vmsig=\"([JII)V\" flags='' access=\"0\" length=\"148\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26559\" count=\"25406\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26571\" count=\"25406\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"147\" e=\"147\" id=\"26560\" count=\"25406\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"26561\" count=\"28098\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"73\" id=\"26562\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"59\" id=\"26563\" count=\"28098\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"59\">\n+\t\t\t\t\t<goto s=\"57\" e=\"59\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"115\" id=\"26564\" count=\"28098\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"73\">\n+\t\t\t\t\t<br s=\"71\" e=\"73\">\n+\t\t\t\t\t\t<cond s=\"90\" e=\"109\" id=\"26565\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"74\" e=\"89\" id=\"26566\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"74\" e=\"89\">\n+\t\t\t\t\t<goto s=\"87\" e=\"89\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26567\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"90\" e=\"109\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"110\" e=\"115\">\n+\t\t\t\t\t<fall s=\"110\" e=\"115\" id=\"26572\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"113\" e=\"115\">\n+\t\t\t\t\t\t<cond s=\"5\" e=\"10\" id=\"26568\" count=\"28098\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"116\" e=\"146\" id=\"26569\" count=\"2696737\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"116\" e=\"146\">\n+\t\t\t\t\t<goto s=\"144\" e=\"146\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"115\" id=\"26570\" count=\"2696737\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"147\" e=\"147\">\n+\t\t\t\t\t<exit s=\"147\" e=\"147\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3624;5=3625;11=3626;18=3627;30=3628;46=3629;52=3630;57=3631;74=3632;87=3633;90=3635;110=3638;116=3639;133=3640;147=3643;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readDoubles\" vmsig=\"([DII)V\" flags='' access=\"0\" length=\"148\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26573\" count=\"23717\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"10\">\n+\t\t\t\t\t<fall s=\"5\" e=\"10\" id=\"26585\" count=\"23717\"\/>\n+\t\t\t\t\t<br s=\"8\" e=\"10\">\n+\t\t\t\t\t\t<cond s=\"147\" e=\"147\" id=\"26574\" count=\"23717\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"11\" e=\"17\" id=\"26575\" count=\"26404\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"11\" e=\"17\">\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"60\" e=\"73\" id=\"26576\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"59\" id=\"26577\" count=\"26404\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"59\">\n+\t\t\t\t\t<goto s=\"57\" e=\"59\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"115\" id=\"26578\" count=\"26404\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"60\" e=\"73\">\n+\t\t\t\t\t<br s=\"71\" e=\"73\">\n+\t\t\t\t\t\t<cond s=\"90\" e=\"109\" id=\"26579\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"74\" e=\"89\" id=\"26580\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"74\" e=\"89\">\n+\t\t\t\t\t<goto s=\"87\" e=\"89\">\n+\t\t\t\t\t\t<tg s=\"5\" e=\"10\" id=\"26581\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"90\" e=\"109\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"110\" e=\"115\">\n+\t\t\t\t\t<fall s=\"110\" e=\"115\" id=\"26586\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"113\" e=\"115\">\n+\t\t\t\t\t\t<cond s=\"5\" e=\"10\" id=\"26582\" count=\"26404\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"116\" e=\"146\" id=\"26583\" count=\"2676286\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"116\" e=\"146\">\n+\t\t\t\t\t<goto s=\"144\" e=\"146\">\n+\t\t\t\t\t\t<tg s=\"110\" e=\"115\" id=\"26584\" count=\"2676286\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"147\" e=\"147\">\n+\t\t\t\t\t<exit s=\"147\" e=\"147\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3646;5=3647;11=3648;18=3649;30=3650;46=3651;52=3652;57=3653;74=3654;87=3655;90=3657;110=3660;116=3661;133=3662;147=3665;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readLongUTF\" vmsig=\"()Ljava\/lang\/String;\" flags='' access=\"0\" length=\"9\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26587\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"8\" e=\"8\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3673;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUTFBody\" vmsig=\"(J)Ljava\/lang\/String;\" flags=' private' access=\"2\" length=\"192\">\n+\t\t\t\t<bl s=\"0\" e=\"5\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"5\" id=\"26588\" count=\"18051877\"\/>\n+\t\t\t\t\t<br s=\"3\" e=\"5\">\n+\t\t\t\t\t\t<cond s=\"36\" e=\"43\" id=\"26589\" count=\"542703\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"6\" e=\"13\" id=\"26590\" count=\"17509178\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"6\" e=\"13\">\n+\t\t\t\t\t<br s=\"11\" e=\"13\">\n+\t\t\t\t\t\t<cond s=\"36\" e=\"43\" id=\"26591\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"14\" e=\"35\" id=\"26592\" count=\"17509172\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"35\">\n+\t\t\t\t\t<goto s=\"33\" e=\"35\">\n+\t\t\t\t\t\t<tg s=\"44\" e=\"50\" id=\"26593\" count=\"17509174\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"43\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"44\" e=\"50\">\n+\t\t\t\t\t<fall s=\"44\" e=\"50\" id=\"26609\" count=\"542703\"\/>\n+\t\t\t\t\t<br s=\"48\" e=\"50\">\n+\t\t\t\t\t\t<cond s=\"61\" e=\"66\" id=\"26594\" count=\"4006088\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"51\" e=\"60\" id=\"26595\" count=\"14045787\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"51\" e=\"60\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"61\" e=\"66\">\n+\t\t\t\t\t<fall s=\"61\" e=\"66\" id=\"26610\" count=\"14045793\"\/>\n+\t\t\t\t\t<br s=\"64\" e=\"66\">\n+\t\t\t\t\t\t<cond s=\"187\" e=\"191\" id=\"26596\" count=\"18048288\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"67\" e=\"83\" id=\"26597\" count=\"31025687\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"67\" e=\"83\">\n+\t\t\t\t\t<br s=\"81\" e=\"83\">\n+\t\t\t\t\t\t<cond s=\"92\" e=\"103\" id=\"26598\" count=\"15768428\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"84\" e=\"91\" id=\"26599\" count=\"15257249\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"84\" e=\"91\">\n+\t\t\t\t\t<br s=\"89\" e=\"91\">\n+\t\t\t\t\t\t<cond s=\"104\" e=\"110\" id=\"26600\" count=\"13505016\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"92\" e=\"103\" id=\"26601\" count=\"1752226\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"92\" e=\"103\">\n+\t\t\t\t\t<goto s=\"101\" e=\"103\">\n+\t\t\t\t\t\t<tg s=\"184\" e=\"186\" id=\"26602\" count=\"17517080\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"104\" e=\"110\">\n+\t\t\t\t\t<br s=\"108\" e=\"110\">\n+\t\t\t\t\t\t<cond s=\"124\" e=\"128\" id=\"26603\" count=\"13503419\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"111\" e=\"123\" id=\"26604\" count=\"1605\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"111\" e=\"123\">\n+\t\t\t\t\t<goto s=\"121\" e=\"123\">\n+\t\t\t\t\t\t<tg s=\"184\" e=\"186\" id=\"26605\" count=\"1597\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"124\" e=\"128\">\n+\t\t\t\t\t<br s=\"126\" e=\"128\">\n+\t\t\t\t\t\t<cond s=\"147\" e=\"183\" id=\"26606\" count=\"13503212\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"129\" e=\"146\" id=\"26607\" count=\"210\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"129\" e=\"146\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"147\" e=\"183\">\n+\t\t\t\t\t<fall s=\"147\" e=\"183\" id=\"26611\" count=\"210\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"184\" e=\"186\">\n+\t\t\t\t\t<fall s=\"184\" e=\"186\" id=\"26612\" count=\"13503442\"\/>\n+\t\t\t\t\t<goto s=\"184\" e=\"186\">\n+\t\t\t\t\t\t<tg s=\"61\" e=\"66\" id=\"26608\" count=\"31022104\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"187\" e=\"191\">\n+\t\t\t\t\t<exit s=\"191\" e=\"191\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3683;14=3685;23=3686;33=3687;36=3688;44=3691;51=3692;61=3695;67=3696;78=3697;92=3698;104=3700;111=3702;124=3705;129=3706;147=3708;152=3709;164=3710;184=3713;187=3715;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUTFSpan\" vmsig=\"(Ljava\/lang\/StringBuilder;J)J\" flags=' private' access=\"2\" length=\"502\">\n+\t\t\t\t<bl s=\"0\" e=\"37\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"37\" id=\"26613\" count=\"17520668\"\/>\n+\t\t\t\t\t<br s=\"35\" e=\"37\">\n+\t\t\t\t\t\t<cond s=\"45\" e=\"46\" id=\"26614\" count=\"17509173\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"38\" e=\"44\" id=\"26615\" count=\"11496\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"44\">\n+\t\t\t\t\t<goto s=\"42\" e=\"44\">\n+\t\t\t\t\t\t<tg s=\"47\" e=\"52\" id=\"26616\" count=\"11496\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"45\" e=\"46\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"47\" e=\"52\">\n+\t\t\t\t\t<fall s=\"47\" e=\"52\" id=\"26659\" count=\"17509183\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"53\" e=\"61\">\n+\t\t\t\t\t<fall s=\"53\" e=\"61\" id=\"26660\" count=\"17520655\"\/>\n+\t\t\t\t\t<br s=\"59\" e=\"61\">\n+\t\t\t\t\t\t<cond s=\"366\" e=\"370\" id=\"26617\" count=\"17517090\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"62\" e=\"163\" id=\"26618\" count=\"263727358\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"62\" e=\"163\">\n+\t\t\t\t\t<switch s=\"88\" e=\"163\">\n+\t\t\t\t\t\t<default s=\"355\" e=\"362\" id=\"26619\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26620\" count=\"81\" val=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26621\" count=\"185\" val=\"1\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26622\" count=\"24871909\" val=\"2\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26623\" count=\"23097690\" val=\"3\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26624\" count=\"17958938\" val=\"4\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26625\" count=\"10596102\" val=\"5\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26626\" count=\"124850584\" val=\"6\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"179\" id=\"26627\" count=\"60567380\" val=\"7\"\/>\n+\t\t\t\t\t\t<case s=\"355\" e=\"362\" id=\"26628\" count=\"0\" val=\"8\"\/>\n+\t\t\t\t\t\t<case s=\"355\" e=\"362\" id=\"26629\" count=\"0\" val=\"9\"\/>\n+\t\t\t\t\t\t<case s=\"355\" e=\"362\" id=\"26630\" count=\"0\" val=\"10\"\/>\n+\t\t\t\t\t\t<case s=\"355\" e=\"362\" id=\"26631\" count=\"0\" val=\"11\"\/>\n+\t\t\t\t\t\t<case s=\"180\" e=\"209\" id=\"26632\" count=\"24933\" val=\"12\"\/>\n+\t\t\t\t\t\t<case s=\"180\" e=\"209\" id=\"26633\" count=\"25819\" val=\"13\"\/>\n+\t\t\t\t\t\t<case s=\"248\" e=\"295\" id=\"26634\" count=\"1733902\" val=\"14\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"164\" e=\"179\">\n+\t\t\t\t\t<goto s=\"177\" e=\"179\">\n+\t\t\t\t\t\t<tg s=\"363\" e=\"365\" id=\"26635\" count=\"261942723\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"180\" e=\"209\">\n+\t\t\t\t\t<br s=\"207\" e=\"209\">\n+\t\t\t\t\t\t<cond s=\"218\" e=\"247\" id=\"26636\" count=\"49555\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"210\" e=\"217\" id=\"26637\" count=\"1196\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"210\" e=\"217\">\n+\t\t\t\t\t<exit s=\"217\" e=\"217\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"218\" e=\"247\">\n+\t\t\t\t\t<goto s=\"245\" e=\"247\">\n+\t\t\t\t\t\t<tg s=\"363\" e=\"365\" id=\"26638\" count=\"49555\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"248\" e=\"295\">\n+\t\t\t\t\t<br s=\"293\" e=\"295\">\n+\t\t\t\t\t\t<cond s=\"308\" e=\"315\" id=\"26639\" count=\"1195\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"296\" e=\"307\" id=\"26640\" count=\"1732704\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"296\" e=\"307\">\n+\t\t\t\t\t<br s=\"305\" e=\"307\">\n+\t\t\t\t\t\t<cond s=\"316\" e=\"354\" id=\"26641\" count=\"1731508\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"308\" e=\"315\" id=\"26642\" count=\"1196\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"308\" e=\"315\">\n+\t\t\t\t\t<exit s=\"315\" e=\"315\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"316\" e=\"354\">\n+\t\t\t\t\t<goto s=\"352\" e=\"354\">\n+\t\t\t\t\t\t<tg s=\"363\" e=\"365\" id=\"26643\" count=\"1731508\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"355\" e=\"362\">\n+\t\t\t\t\t<exit s=\"362\" e=\"362\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"363\" e=\"365\">\n+\t\t\t\t\t<goto s=\"363\" e=\"365\">\n+\t\t\t\t\t\t<tg s=\"53\" e=\"61\" id=\"26644\" count=\"263723794\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"366\" e=\"370\">\n+\t\t\t\t\t<br s=\"368\" e=\"370\">\n+\t\t\t\t\t\t<cond s=\"384\" e=\"400\" id=\"26645\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"371\" e=\"383\" id=\"26646\" count=\"17517082\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"371\" e=\"383\">\n+\t\t\t\t\t<br s=\"381\" e=\"383\">\n+\t\t\t\t\t\t<cond s=\"481\" e=\"501\" id=\"26647\" count=\"17517078\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"384\" e=\"400\" id=\"26648\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"384\" e=\"400\">\n+\t\t\t\t\t<exit s=\"400\" e=\"400\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"401\" e=\"410\">\n+\t\t\t\t\t<catch s=\"401\" e=\"410\" id=\"26657\" count=\"4\"\/>\n+\t\t\t\t\t<br s=\"408\" e=\"410\">\n+\t\t\t\t\t\t<cond s=\"424\" e=\"440\" id=\"26649\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"411\" e=\"423\" id=\"26650\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"411\" e=\"423\">\n+\t\t\t\t\t<br s=\"421\" e=\"423\">\n+\t\t\t\t\t\t<cond s=\"481\" e=\"501\" id=\"26651\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"424\" e=\"440\" id=\"26652\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"424\" e=\"440\">\n+\t\t\t\t\t<exit s=\"440\" e=\"440\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"441\" e=\"447\">\n+\t\t\t\t\t<catch s=\"441\" e=\"447\" id=\"26658\" count=\"3587\"\/>\n+\t\t\t\t\t<br s=\"445\" e=\"447\">\n+\t\t\t\t\t\t<cond s=\"461\" e=\"477\" id=\"26653\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"448\" e=\"460\" id=\"26654\" count=\"3587\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"448\" e=\"460\">\n+\t\t\t\t\t<br s=\"458\" e=\"460\">\n+\t\t\t\t\t\t<cond s=\"478\" e=\"480\" id=\"26655\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"461\" e=\"477\" id=\"26656\" count=\"3587\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"461\" e=\"477\">\n+\t\t\t\t\t<exit s=\"477\" e=\"477\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"478\" e=\"480\">\n+\t\t\t\t\t<exit s=\"480\" e=\"480\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"481\" e=\"501\">\n+\t\t\t\t\t<exit s=\"501\" e=\"501\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3727;3=3728;9=3729;26=3731;50=3732;53=3735;62=3737;84=3738;164=3740;180=3742;198=3743;210=3744;218=3746;245=3748;248=3750;261=3751;274=3752;284=3753;308=3754;316=3756;352=3759;355=3760;363=3762;366=3766;384=3772;393=3773;401=3763;403=3764;406=3766;424=3772;433=3773;441=3766;461=3772;470=3773;478=3775;481=3777;493=3778;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readUTFChar\" vmsig=\"(Ljava\/lang\/StringBuilder;J)I\" flags=' private' access=\"2\" length=\"278\">\n+\t\t\t\t<bl s=\"0\" e=\"87\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"87\" id=\"26661\" count=\"1605\"\/>\n+\t\t\t\t\t<switch s=\"14\" e=\"87\">\n+\t\t\t\t\t\t<default s=\"270\" e=\"277\" id=\"26662\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26663\" count=\"0\" val=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26664\" count=\"0\" val=\"1\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26665\" count=\"0\" val=\"2\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26666\" count=\"1597\" val=\"3\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26667\" count=\"0\" val=\"4\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26668\" count=\"0\" val=\"5\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26669\" count=\"0\" val=\"6\"\/>\n+\t\t\t\t\t\t<case s=\"88\" e=\"97\" id=\"26670\" count=\"0\" val=\"7\"\/>\n+\t\t\t\t\t\t<case s=\"270\" e=\"277\" id=\"26671\" count=\"0\" val=\"8\"\/>\n+\t\t\t\t\t\t<case s=\"270\" e=\"277\" id=\"26672\" count=\"0\" val=\"9\"\/>\n+\t\t\t\t\t\t<case s=\"270\" e=\"277\" id=\"26673\" count=\"0\" val=\"10\"\/>\n+\t\t\t\t\t\t<case s=\"270\" e=\"277\" id=\"26674\" count=\"0\" val=\"11\"\/>\n+\t\t\t\t\t\t<case s=\"98\" e=\"105\" id=\"26675\" count=\"2\" val=\"12\"\/>\n+\t\t\t\t\t\t<case s=\"98\" e=\"105\" id=\"26676\" count=\"1\" val=\"13\"\/>\n+\t\t\t\t\t\t<case s=\"164\" e=\"171\" id=\"26677\" count=\"5\" val=\"14\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"88\" e=\"97\">\n+\t\t\t\t\t<exit s=\"97\" e=\"97\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"98\" e=\"105\">\n+\t\t\t\t\t<br s=\"103\" e=\"105\">\n+\t\t\t\t\t\t<cond s=\"114\" e=\"131\" id=\"26678\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"106\" e=\"113\" id=\"26679\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"106\" e=\"113\">\n+\t\t\t\t\t<exit s=\"113\" e=\"113\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"114\" e=\"131\">\n+\t\t\t\t\t<br s=\"129\" e=\"131\">\n+\t\t\t\t\t\t<cond s=\"140\" e=\"163\" id=\"26680\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"132\" e=\"139\" id=\"26681\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"132\" e=\"139\">\n+\t\t\t\t\t<exit s=\"139\" e=\"139\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"140\" e=\"163\">\n+\t\t\t\t\t<exit s=\"163\" e=\"163\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"164\" e=\"171\">\n+\t\t\t\t\t<br s=\"169\" e=\"171\">\n+\t\t\t\t\t\t<cond s=\"193\" e=\"216\" id=\"26682\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"172\" e=\"179\" id=\"26683\" count=\"5\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"172\" e=\"179\">\n+\t\t\t\t\t<br s=\"177\" e=\"179\">\n+\t\t\t\t\t\t<cond s=\"185\" e=\"192\" id=\"26684\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"180\" e=\"184\" id=\"26685\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"180\" e=\"184\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"185\" e=\"192\">\n+\t\t\t\t\t<fall s=\"185\" e=\"192\" id=\"26690\" count=\"2\"\/>\n+\t\t\t\t\t<exit s=\"192\" e=\"192\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"193\" e=\"216\">\n+\t\t\t\t\t<br s=\"214\" e=\"216\">\n+\t\t\t\t\t\t<cond s=\"229\" e=\"236\" id=\"26686\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"217\" e=\"228\" id=\"26687\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"217\" e=\"228\">\n+\t\t\t\t\t<br s=\"226\" e=\"228\">\n+\t\t\t\t\t\t<cond s=\"237\" e=\"269\" id=\"26688\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"229\" e=\"236\" id=\"26689\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"229\" e=\"236\">\n+\t\t\t\t\t<exit s=\"236\" e=\"236\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"237\" e=\"269\">\n+\t\t\t\t\t<exit s=\"269\" e=\"269\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"270\" e=\"277\">\n+\t\t\t\t\t<exit s=\"277\" e=\"277\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3792;10=3793;88=3795;96=3796;98=3799;106=3800;114=3802;120=3803;132=3804;140=3806;162=3808;164=3811;172=3812;180=3813;185=3815;193=3817;199=3818;205=3819;229=3820;237=3822;268=3825;270=3827;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"getBytesRead\" vmsig=\"()J\" flags='' access=\"0\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"26691\" count=\"36332229\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3836;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$Caches\" supername=\"java\/lang\/Object\" checksum=\"3284545123\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags=' private' access=\"2\" cons=\"true\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26695\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=279;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"&lt;clinit&gt;\" vmsig=\"()V\" flags=' static' access=\"8\" clinit=\"true\" length=\"47\">\n+\t\t\t\t<bl s=\"0\" e=\"46\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"46\" id=\"26696\" count=\"42\"\/>\n+\t\t\t\t\t<exit s=\"46\" e=\"46\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=281;10=294;12=295;18=303;20=304;26=312;30=313;33=312;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$Caches$1\" supername=\"java\/lang\/ClassValue\" checksum=\"1927994289\" signature=\"Ljava\/lang\/ClassValue&lt;Ljava\/lang\/Boolean;&gt;;\" source=\"ObjectInputStream.java\" inner=\"anon\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags='' access=\"0\" cons=\"true\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26692\" count=\"42\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=282;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"computeValue\" vmsig=\"(Ljava\/lang\/Class;)Ljava\/lang\/Boolean;\" flags=' protected' access=\"4\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;)Ljava\/lang\/Boolean;\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26693\" count=\"26\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=285;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"computeValue\" vmsig=\"(Ljava\/lang\/Class;)Ljava\/lang\/Object;\" flags=' protected bridge synthetic' access=\"4164\" length=\"6\">\n+\t\t\t\t<bl s=\"0\" e=\"5\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"5\" id=\"26694\" count=\"26\"\/>\n+\t\t\t\t\t<exit s=\"5\" e=\"5\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=282;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$FieldValues\" supername=\"java\/io\/ObjectInputStream$GetField\" checksum=\"2350241021\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=' final'>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/io\/ObjectInputStream;Ljava\/io\/ObjectStreamClass;Z)V\" flags='' access=\"0\" cons=\"true\" length=\"217\">\n+\t\t\t\t<bl s=\"0\" e=\"25\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"25\" id=\"26697\" count=\"14104458\"\/>\n+\t\t\t\t\t<br s=\"23\" e=\"25\">\n+\t\t\t\t\t\t<cond s=\"33\" e=\"33\" id=\"26698\" count=\"8970080\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"26\" e=\"32\" id=\"26699\" count=\"5134379\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"26\" e=\"32\">\n+\t\t\t\t\t<goto s=\"30\" e=\"32\">\n+\t\t\t\t\t\t<tg s=\"34\" e=\"41\" id=\"26700\" count=\"5134380\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"33\" e=\"33\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"34\" e=\"41\">\n+\t\t\t\t\t<fall s=\"34\" e=\"41\" id=\"26718\" count=\"8970080\"\/>\n+\t\t\t\t\t<br s=\"39\" e=\"41\">\n+\t\t\t\t\t\t<cond s=\"57\" e=\"68\" id=\"26701\" count=\"8970081\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"42\" e=\"56\" id=\"26702\" count=\"5134380\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"56\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"57\" e=\"68\">\n+\t\t\t\t\t<fall s=\"57\" e=\"68\" id=\"26719\" count=\"5134379\"\/>\n+\t\t\t\t\t<br s=\"66\" e=\"68\">\n+\t\t\t\t\t\t<cond s=\"77\" e=\"77\" id=\"26703\" count=\"5312778\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"69\" e=\"76\" id=\"26704\" count=\"8791682\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"69\" e=\"76\">\n+\t\t\t\t\t<goto s=\"74\" e=\"76\">\n+\t\t\t\t\t\t<tg s=\"78\" e=\"86\" id=\"26705\" count=\"8791682\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"77\" e=\"77\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"78\" e=\"86\">\n+\t\t\t\t\t<fall s=\"78\" e=\"86\" id=\"26720\" count=\"5312779\"\/>\n+\t\t\t\t\t<br s=\"84\" e=\"86\">\n+\t\t\t\t\t\t<cond s=\"94\" e=\"94\" id=\"26706\" count=\"5312776\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"87\" e=\"93\" id=\"26707\" count=\"8791681\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"87\" e=\"93\">\n+\t\t\t\t\t<goto s=\"91\" e=\"93\">\n+\t\t\t\t\t\t<tg s=\"95\" e=\"102\" id=\"26708\" count=\"8791683\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"94\" e=\"94\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"95\" e=\"102\">\n+\t\t\t\t\t<fall s=\"95\" e=\"102\" id=\"26721\" count=\"5312777\"\/>\n+\t\t\t\t\t<br s=\"100\" e=\"102\">\n+\t\t\t\t\t\t<cond s=\"216\" e=\"216\" id=\"26709\" count=\"5312778\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"103\" e=\"129\" id=\"26710\" count=\"8791682\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"129\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"130\" e=\"139\">\n+\t\t\t\t\t<fall s=\"130\" e=\"139\" id=\"26722\" count=\"8791682\"\/>\n+\t\t\t\t\t<br s=\"137\" e=\"139\">\n+\t\t\t\t\t\t<cond s=\"210\" e=\"215\" id=\"26711\" count=\"8791592\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"140\" e=\"182\" id=\"26712\" count=\"27586934\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"140\" e=\"182\">\n+\t\t\t\t\t<br s=\"180\" e=\"182\">\n+\t\t\t\t\t\t<cond s=\"204\" e=\"209\" id=\"26713\" count=\"4242399\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"183\" e=\"190\" id=\"26714\" count=\"23344442\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"183\" e=\"190\">\n+\t\t\t\t\t<br s=\"188\" e=\"190\">\n+\t\t\t\t\t\t<cond s=\"204\" e=\"209\" id=\"26715\" count=\"70\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"191\" e=\"203\" id=\"26716\" count=\"23344373\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"191\" e=\"203\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"204\" e=\"209\">\n+\t\t\t\t\t<fall s=\"204\" e=\"209\" id=\"26723\" count=\"23344376\"\/>\n+\t\t\t\t\t<goto s=\"207\" e=\"209\">\n+\t\t\t\t\t\t<tg s=\"130\" e=\"139\" id=\"26717\" count=\"27586841\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"210\" e=\"215\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"216\" e=\"216\">\n+\t\t\t\t\t<fall s=\"216\" e=\"216\" id=\"26724\" count=\"8791592\"\/>\n+\t\t\t\t\t<exit s=\"216\" e=\"216\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2600;9=2601;14=2603;20=2604;37=2605;42=2606;57=2609;63=2610;81=2611;98=2612;103=2613;109=2614;116=2615;127=2616;140=2617;150=2618;168=2619;179=2620;191=2621;204=2616;210=2624;216=2626;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"getObjectStreamClass\" vmsig=\"()Ljava\/io\/ObjectStreamClass;\" flags=' public' access=\"1\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26725\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2629;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"defaulted\" vmsig=\"(Ljava\/lang\/String;)Z\" flags=' public' access=\"1\" length=\"15\">\n+\t\t\t\t<bl s=\"0\" e=\"8\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"8\" id=\"26726\" count=\"5\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"13\" e=\"13\" id=\"26727\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"12\" id=\"26728\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"12\">\n+\t\t\t\t\t<goto s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<tg s=\"14\" e=\"14\" id=\"26729\" count=\"3\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"13\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"14\">\n+\t\t\t\t\t<fall s=\"14\" e=\"14\" id=\"26730\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"14\" e=\"14\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2633;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;Z)Z\" flags=' public' access=\"1\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"12\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"12\" id=\"26731\" count=\"382640\"\/>\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"24\" e=\"24\" id=\"26732\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"23\" id=\"26733\" count=\"382636\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"23\">\n+\t\t\t\t\t<goto s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<tg s=\"25\" e=\"25\" id=\"26734\" count=\"382636\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"24\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"25\">\n+\t\t\t\t\t<fall s=\"25\" e=\"25\" id=\"26735\" count=\"4\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2637;9=2638;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;B)B\" flags=' public' access=\"1\" length=\"24\">\n+\t\t\t\t<bl s=\"0\" e=\"12\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"12\" id=\"26736\" count=\"382502\"\/>\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"22\" e=\"22\" id=\"26737\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"21\" id=\"26738\" count=\"382502\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"21\">\n+\t\t\t\t\t<goto s=\"19\" e=\"21\">\n+\t\t\t\t\t\t<tg s=\"23\" e=\"23\" id=\"26739\" count=\"382502\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"22\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"23\" e=\"23\">\n+\t\t\t\t\t<fall s=\"23\" e=\"23\" id=\"26740\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"23\" e=\"23\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2642;9=2643;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;C)C\" flags=' public' access=\"1\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"12\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"12\" id=\"26741\" count=\"382502\"\/>\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"24\" e=\"24\" id=\"26742\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"23\" id=\"26743\" count=\"382502\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"23\">\n+\t\t\t\t\t<goto s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<tg s=\"25\" e=\"25\" id=\"26744\" count=\"382502\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"24\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"25\">\n+\t\t\t\t\t<fall s=\"25\" e=\"25\" id=\"26745\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2647;9=2648;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;S)S\" flags=' public' access=\"1\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"12\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"12\" id=\"26746\" count=\"382502\"\/>\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"24\" e=\"24\" id=\"26747\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"23\" id=\"26748\" count=\"382502\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"23\">\n+\t\t\t\t\t<goto s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<tg s=\"25\" e=\"25\" id=\"26749\" count=\"382502\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"24\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"25\">\n+\t\t\t\t\t<fall s=\"25\" e=\"25\" id=\"26750\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2652;9=2653;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;I)I\" flags=' public' access=\"1\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"12\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"12\" id=\"26751\" count=\"385285\"\/>\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"24\" e=\"24\" id=\"26752\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"23\" id=\"26753\" count=\"385279\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"23\">\n+\t\t\t\t\t<goto s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<tg s=\"25\" e=\"25\" id=\"26754\" count=\"385279\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"24\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"25\">\n+\t\t\t\t\t<fall s=\"25\" e=\"25\" id=\"26755\" count=\"4\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2657;9=2658;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;F)F\" flags=' public' access=\"1\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"12\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"12\" id=\"26756\" count=\"382717\"\/>\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"24\" e=\"24\" id=\"26757\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"23\" id=\"26758\" count=\"382717\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"23\">\n+\t\t\t\t\t<goto s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<tg s=\"25\" e=\"25\" id=\"26759\" count=\"382717\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"24\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"25\">\n+\t\t\t\t\t<fall s=\"25\" e=\"25\" id=\"26760\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"freturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2662;9=2663;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;J)J\" flags=' public' access=\"1\" length=\"29\">\n+\t\t\t\t<bl s=\"0\" e=\"14\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"14\" id=\"26761\" count=\"385647\"\/>\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"27\" e=\"27\" id=\"26762\" count=\"3\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"26\" id=\"26763\" count=\"385644\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"26\">\n+\t\t\t\t\t<goto s=\"24\" e=\"26\">\n+\t\t\t\t\t\t<tg s=\"28\" e=\"28\" id=\"26764\" count=\"385644\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"27\" e=\"27\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"28\">\n+\t\t\t\t\t<fall s=\"28\" e=\"28\" id=\"26765\" count=\"3\"\/>\n+\t\t\t\t\t<exit s=\"28\" e=\"28\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2667;10=2668;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;D)D\" flags=' public' access=\"1\" length=\"29\">\n+\t\t\t\t<bl s=\"0\" e=\"14\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"14\" id=\"26766\" count=\"382587\"\/>\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"27\" e=\"27\" id=\"26767\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"26\" id=\"26768\" count=\"382587\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"26\">\n+\t\t\t\t\t<goto s=\"24\" e=\"26\">\n+\t\t\t\t\t\t<tg s=\"28\" e=\"28\" id=\"26769\" count=\"382587\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"27\" e=\"27\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"28\">\n+\t\t\t\t\t<fall s=\"28\" e=\"28\" id=\"26770\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"28\" e=\"28\" opcode=\"dreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2672;10=2673;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(Ljava\/lang\/String;Ljava\/lang\/Object;)Ljava\/lang\/Object;\" flags=' public' access=\"1\" length=\"78\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"26771\" count=\"4242437\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"76\" e=\"77\" id=\"26772\" count=\"40\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"57\" id=\"26773\" count=\"4242396\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"57\">\n+\t\t\t\t\t<br s=\"55\" e=\"57\">\n+\t\t\t\t\t\t<cond s=\"65\" e=\"70\" id=\"26774\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"58\" e=\"64\" id=\"26775\" count=\"4242392\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"58\" e=\"64\">\n+\t\t\t\t\t<exit s=\"64\" e=\"64\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"65\" e=\"70\">\n+\t\t\t\t\t<br s=\"68\" e=\"70\">\n+\t\t\t\t\t\t<cond s=\"73\" e=\"75\" id=\"26776\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"71\" e=\"72\" id=\"26777\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"71\" e=\"72\">\n+\t\t\t\t\t<exit s=\"72\" e=\"72\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"75\">\n+\t\t\t\t\t<exit s=\"75\" e=\"75\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"77\">\n+\t\t\t\t\t<exit s=\"77\" e=\"77\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2677;8=2678;12=2679;20=2680;39=2681;53=2682;58=2683;65=2684;71=2686;73=2688;76=2690;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"defaultCheckFieldValues\" vmsig=\"(Ljava\/lang\/Object;)V\" flags='' access=\"0\" length=\"20\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26778\" count=\"13176981\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"19\" id=\"26779\" count=\"5311267\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"18\" id=\"26780\" count=\"7865714\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"18\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"19\">\n+\t\t\t\t\t<fall s=\"19\" e=\"19\" id=\"26781\" count=\"7865699\"\/>\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2696;7=2697;19=2698;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"defaultSetFieldValues\" vmsig=\"(Ljava\/lang\/Object;)V\" flags=' private' access=\"2\" length=\"39\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26782\" count=\"13176962\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"25\" id=\"26783\" count=\"8968082\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"18\" id=\"26784\" count=\"4208885\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"18\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"25\">\n+\t\t\t\t\t<fall s=\"19\" e=\"25\" id=\"26787\" count=\"4208886\"\/>\n+\t\t\t\t\t<br s=\"23\" e=\"25\">\n+\t\t\t\t\t\t<cond s=\"38\" e=\"38\" id=\"26785\" count=\"5311270\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"26\" e=\"37\" id=\"26786\" count=\"7865696\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"26\" e=\"37\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"38\">\n+\t\t\t\t\t<fall s=\"38\" e=\"38\" id=\"26788\" count=\"7865698\"\/>\n+\t\t\t\t\t<exit s=\"38\" e=\"38\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2701;7=2702;19=2703;26=2704;38=2705;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"getFieldOffset\" vmsig=\"(Ljava\/lang\/String;Ljava\/lang\/Class;)I\" flags=' private' access=\"2\" signature=\"(Ljava\/lang\/String;Ljava\/lang\/Class&lt;*&gt;;)I\" length=\"72\">\n+\t\t\t\t<bl s=\"0\" e=\"13\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"13\" id=\"26789\" count=\"7308824\"\/>\n+\t\t\t\t\t<br s=\"11\" e=\"13\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"33\" id=\"26790\" count=\"58\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"14\" e=\"18\" id=\"26791\" count=\"7308766\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"18\">\n+\t\t\t\t\t<exit s=\"18\" e=\"18\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"33\">\n+\t\t\t\t\t<br s=\"31\" e=\"33\">\n+\t\t\t\t\t\t<cond s=\"36\" e=\"71\" id=\"26792\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"34\" e=\"35\" id=\"26793\" count=\"54\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"34\" e=\"35\">\n+\t\t\t\t\t<exit s=\"35\" e=\"35\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"71\">\n+\t\t\t\t\t<exit s=\"71\" e=\"71\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2717;10=2718;14=2719;19=2720;34=2721;36=2723;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$FilterValues\" supername=\"java\/lang\/Object\" checksum=\"912978111\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/lang\/Class;JJJJ)V\" flags=' public' access=\"1\" cons=\"true\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;JJJJ)V\" length=\"33\">\n+\t\t\t\t<bl s=\"0\" e=\"32\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"32\" id=\"26794\" count=\"9688\"\/>\n+\t\t\t\t\t<exit s=\"32\" e=\"32\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2832;4=2833;9=2834;14=2835;20=2836;26=2837;32=2838;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"serialClass\" vmsig=\"()Ljava\/lang\/Class;\" flags=' public' access=\"1\" signature=\"()Ljava\/lang\/Class&lt;*&gt;;\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26795\" count=\"9977\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2842;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"arrayLength\" vmsig=\"()J\" flags=' public' access=\"1\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26796\" count=\"5535\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2847;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"references\" vmsig=\"()J\" flags=' public' access=\"1\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26797\" count=\"1600\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2852;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"depth\" vmsig=\"()J\" flags=' public' access=\"1\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26798\" count=\"10483\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2857;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"streamBytes\" vmsig=\"()J\" flags=' public' access=\"1\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26799\" count=\"1590\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2862;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$GetField\" supername=\"java\/lang\/Object\" checksum=\"4204849584\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=' public abstract'>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags=' public' access=\"1\" cons=\"true\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26800\" count=\"14104455\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1476;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$HandleTable\" supername=\"java\/lang\/Object\" checksum=\"1217974723\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=' final'>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(I)V\" flags='' access=\"0\" cons=\"true\" length=\"38\">\n+\t\t\t\t<bl s=\"0\" e=\"37\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"37\" id=\"26810\" count=\"1214334\"\/>\n+\t\t\t\t\t<exit s=\"37\" e=\"37\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3890;4=3883;9=3885;14=3891;21=3892;29=3893;37=3894;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"assign\" vmsig=\"(Ljava\/lang\/Object;)I\" flags='' access=\"0\" length=\"48\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"26811\" count=\"19833107\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"16\" e=\"47\" id=\"26812\" count=\"19504392\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"15\" id=\"26813\" count=\"328693\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"15\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"16\" e=\"47\">\n+\t\t\t\t\t<fall s=\"16\" e=\"47\" id=\"26814\" count=\"328694\"\/>\n+\t\t\t\t\t<exit s=\"47\" e=\"47\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3903;12=3904;16=3906;26=3907;36=3908;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"markDependency\" vmsig=\"(II)V\" flags='' access=\"0\" length=\"175\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26815\" count=\"44690474\"\/>\n+\t\t\t\t\t<br s=\"2\" e=\"4\">\n+\t\t\t\t\t\t<cond s=\"15\" e=\"15\" id=\"26816\" count=\"423537\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"5\" e=\"9\" id=\"26817\" count=\"44266938\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"9\">\n+\t\t\t\t\t<br s=\"7\" e=\"9\">\n+\t\t\t\t\t\t<cond s=\"15\" e=\"15\" id=\"26818\" count=\"5103473\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"10\" e=\"14\" id=\"26819\" count=\"39163471\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"10\" e=\"14\">\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"16\" e=\"47\" id=\"26820\" count=\"24651751\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"15\" id=\"26821\" count=\"14511716\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"15\">\n+\t\t\t\t\t<exit s=\"15\" e=\"15\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"16\" e=\"47\">\n+\t\t\t\t\t<switch s=\"22\" e=\"47\">\n+\t\t\t\t\t\t<default s=\"166\" e=\"173\" id=\"26822\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"48\" e=\"79\" id=\"26823\" count=\"24651763\" val=\"2\"\/>\n+\t\t\t\t\t\t<case s=\"163\" e=\"165\" id=\"26824\" count=\"0\" val=\"3\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"48\" e=\"79\">\n+\t\t\t\t\t<switch s=\"54\" e=\"79\">\n+\t\t\t\t\t\t<default s=\"155\" e=\"162\" id=\"26825\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"80\" e=\"82\" id=\"26826\" count=\"15302596\" val=\"1\"\/>\n+\t\t\t\t\t\t<case s=\"100\" e=\"108\" id=\"26827\" count=\"9349127\" val=\"2\"\/>\n+\t\t\t\t\t\t<case s=\"83\" e=\"99\" id=\"26828\" count=\"13\" val=\"3\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"80\" e=\"82\">\n+\t\t\t\t\t<goto s=\"80\" e=\"82\">\n+\t\t\t\t\t\t<tg s=\"174\" e=\"174\" id=\"26829\" count=\"15302603\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"83\" e=\"99\">\n+\t\t\t\t\t<goto s=\"97\" e=\"99\">\n+\t\t\t\t\t\t<tg s=\"174\" e=\"174\" id=\"26830\" count=\"13\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"100\" e=\"108\">\n+\t\t\t\t\t<br s=\"106\" e=\"108\">\n+\t\t\t\t\t\t<cond s=\"122\" e=\"138\" id=\"26831\" count=\"4779965\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"109\" e=\"121\" id=\"26832\" count=\"4569162\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"109\" e=\"121\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"122\" e=\"138\">\n+\t\t\t\t\t<fall s=\"122\" e=\"138\" id=\"26839\" count=\"4569162\"\/>\n+\t\t\t\t\t<br s=\"136\" e=\"138\">\n+\t\t\t\t\t\t<cond s=\"147\" e=\"154\" id=\"26833\" count=\"185218\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"139\" e=\"146\" id=\"26834\" count=\"9163909\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"139\" e=\"146\">\n+\t\t\t\t\t<br s=\"144\" e=\"146\">\n+\t\t\t\t\t\t<cond s=\"174\" e=\"174\" id=\"26835\" count=\"8825307\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"147\" e=\"154\" id=\"26836\" count=\"338602\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"147\" e=\"154\">\n+\t\t\t\t\t<goto s=\"152\" e=\"154\">\n+\t\t\t\t\t\t<tg s=\"174\" e=\"174\" id=\"26837\" count=\"523820\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"155\" e=\"162\">\n+\t\t\t\t\t<exit s=\"162\" e=\"162\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"163\" e=\"165\">\n+\t\t\t\t\t<goto s=\"163\" e=\"165\">\n+\t\t\t\t\t\t<tg s=\"174\" e=\"174\" id=\"26838\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"166\" e=\"173\">\n+\t\t\t\t\t<exit s=\"173\" e=\"173\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"174\" e=\"174\">\n+\t\t\t\t\t<exit s=\"174\" e=\"174\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3919;15=3920;16=3922;48=3925;80=3928;83=3932;97=3934;100=3938;109=3939;122=3941;132=3944;147=3945;155=3950;163=3955;166=3958;174=3960;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"markException\" vmsig=\"(ILjava\/lang\/ClassNotFoundException;)V\" flags='' access=\"0\" length=\"112\">\n+\t\t\t\t<bl s=\"0\" e=\"31\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"31\" id=\"26840\" count=\"156\"\/>\n+\t\t\t\t\t<switch s=\"6\" e=\"31\">\n+\t\t\t\t\t\t<default s=\"103\" e=\"110\" id=\"26841\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"32\" e=\"56\" id=\"26842\" count=\"154\" val=\"2\"\/>\n+\t\t\t\t\t\t<case s=\"100\" e=\"102\" id=\"26843\" count=\"2\" val=\"3\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"32\" e=\"56\">\n+\t\t\t\t\t<br s=\"54\" e=\"56\">\n+\t\t\t\t\t\t<cond s=\"111\" e=\"111\" id=\"26844\" count=\"154\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"57\" e=\"65\" id=\"26845\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"57\" e=\"65\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"66\" e=\"72\">\n+\t\t\t\t\t<fall s=\"66\" e=\"72\" id=\"26851\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"70\" e=\"72\">\n+\t\t\t\t\t\t<cond s=\"90\" e=\"99\" id=\"26846\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"73\" e=\"89\" id=\"26847\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"73\" e=\"89\">\n+\t\t\t\t\t<goto s=\"87\" e=\"89\">\n+\t\t\t\t\t\t<tg s=\"66\" e=\"72\" id=\"26848\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"90\" e=\"99\">\n+\t\t\t\t\t<goto s=\"97\" e=\"99\">\n+\t\t\t\t\t\t<tg s=\"111\" e=\"111\" id=\"26849\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"100\" e=\"102\">\n+\t\t\t\t\t<goto s=\"100\" e=\"102\">\n+\t\t\t\t\t\t<tg s=\"111\" e=\"111\" id=\"26850\" count=\"2\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"110\">\n+\t\t\t\t\t<exit s=\"110\" e=\"110\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"111\" e=\"111\">\n+\t\t\t\t\t<exit s=\"111\" e=\"111\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=3969;32=3971;39=3972;46=3975;53=3976;57=3977;63=3978;73=3979;84=3978;90=3981;97=3982;100=3986;103=3989;111=3991;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"finish\" vmsig=\"(I)V\" flags='' access=\"0\" length=\"111\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26852\" count=\"19832304\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"14\" e=\"21\" id=\"26853\" count=\"4569149\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"13\" id=\"26854\" count=\"15263154\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"13\">\n+\t\t\t\t\t<goto s=\"11\" e=\"13\">\n+\t\t\t\t\t\t<tg s=\"36\" e=\"37\" id=\"26855\" count=\"15263117\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"21\">\n+\t\t\t\t\t<br s=\"19\" e=\"21\">\n+\t\t\t\t\t\t<cond s=\"35\" e=\"35\" id=\"26856\" count=\"4383945\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"22\" e=\"34\" id=\"26857\" count=\"185204\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"34\">\n+\t\t\t\t\t<goto s=\"32\" e=\"34\">\n+\t\t\t\t\t\t<tg s=\"36\" e=\"37\" id=\"26858\" count=\"185204\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"35\" e=\"35\">\n+\t\t\t\t\t<exit s=\"35\" e=\"35\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"37\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"42\">\n+\t\t\t\t\t<fall s=\"38\" e=\"42\" id=\"26868\" count=\"15448336\"\/>\n+\t\t\t\t\t<br s=\"40\" e=\"42\">\n+\t\t\t\t\t\t<cond s=\"110\" e=\"110\" id=\"26859\" count=\"15448343\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"43\" e=\"75\" id=\"26860\" count=\"19832625\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"75\">\n+\t\t\t\t\t<switch s=\"49\" e=\"75\">\n+\t\t\t\t\t\t<default s=\"96\" e=\"103\" id=\"26861\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"93\" e=\"95\" id=\"26862\" count=\"388\" val=\"1\"\/>\n+\t\t\t\t\t\t<case s=\"76\" e=\"92\" id=\"26863\" count=\"19832095\" val=\"2\"\/>\n+\t\t\t\t\t\t<case s=\"93\" e=\"95\" id=\"26864\" count=\"153\" val=\"3\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"76\" e=\"92\">\n+\t\t\t\t\t<goto s=\"90\" e=\"92\">\n+\t\t\t\t\t\t<tg s=\"104\" e=\"109\" id=\"26865\" count=\"19832104\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"93\" e=\"95\">\n+\t\t\t\t\t<goto s=\"93\" e=\"95\">\n+\t\t\t\t\t\t<tg s=\"104\" e=\"109\" id=\"26866\" count=\"541\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"96\" e=\"103\">\n+\t\t\t\t\t<exit s=\"103\" e=\"103\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"104\" e=\"109\">\n+\t\t\t\t\t<goto s=\"107\" e=\"109\">\n+\t\t\t\t\t\t<tg s=\"38\" e=\"42\" id=\"26867\" count=\"19832630\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"110\" e=\"110\">\n+\t\t\t\t\t<exit s=\"110\" e=\"110\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4000;7=4002;14=4003;22=4005;27=4006;35=4009;36=4013;43=4014;76=4016;83=4017;90=4018;93=4022;96=4025;104=4013;110=4028;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"setObject\" vmsig=\"(ILjava\/lang\/Object;)V\" flags='' access=\"0\" length=\"54\">\n+\t\t\t\t<bl s=\"0\" e=\"31\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"31\" id=\"26869\" count=\"1036690\"\/>\n+\t\t\t\t\t<switch s=\"6\" e=\"31\">\n+\t\t\t\t\t\t<default s=\"45\" e=\"52\" id=\"26870\" count=\"0\"\/>\n+\t\t\t\t\t\t<case s=\"32\" e=\"41\" id=\"26871\" count=\"573367\" val=\"1\"\/>\n+\t\t\t\t\t\t<case s=\"32\" e=\"41\" id=\"26872\" count=\"463331\" val=\"2\"\/>\n+\t\t\t\t\t\t<case s=\"42\" e=\"44\" id=\"26873\" count=\"0\" val=\"3\"\/>\n+\t\t\t\t\t<\/switch>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"32\" e=\"41\">\n+\t\t\t\t\t<goto s=\"39\" e=\"41\">\n+\t\t\t\t\t\t<tg s=\"53\" e=\"53\" id=\"26874\" count=\"1036686\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"44\">\n+\t\t\t\t\t<goto s=\"42\" e=\"44\">\n+\t\t\t\t\t\t<tg s=\"53\" e=\"53\" id=\"26875\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"45\" e=\"52\">\n+\t\t\t\t\t<exit s=\"52\" e=\"52\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"53\" e=\"53\">\n+\t\t\t\t\t<exit s=\"53\" e=\"53\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4037;32=4040;39=4041;42=4044;45=4047;53=4049;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"lookupObject\" vmsig=\"(I)Ljava\/lang\/Object;\" flags='' access=\"0\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26876\" count=\"28709071\"\/>\n+\t\t\t\t\t<br s=\"2\" e=\"4\">\n+\t\t\t\t\t\t<cond s=\"24\" e=\"24\" id=\"26877\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"5\" e=\"14\" id=\"26878\" count=\"28709080\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"14\">\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"24\" e=\"24\" id=\"26879\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"23\" id=\"26880\" count=\"28709074\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"23\">\n+\t\t\t\t\t<goto s=\"21\" e=\"23\">\n+\t\t\t\t\t\t<tg s=\"25\" e=\"25\" id=\"26881\" count=\"28709045\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"24\" e=\"24\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"25\" e=\"25\">\n+\t\t\t\t\t<fall s=\"25\" e=\"25\" id=\"26882\" count=\"7\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4057;15=4059;25=4057;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"lookupException\" vmsig=\"(I)Ljava\/lang\/ClassNotFoundException;\" flags='' access=\"0\" length=\"29\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26883\" count=\"42429953\"\/>\n+\t\t\t\t\t<br s=\"2\" e=\"4\">\n+\t\t\t\t\t\t<cond s=\"27\" e=\"27\" id=\"26884\" count=\"1719717\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"5\" e=\"14\" id=\"26885\" count=\"40710202\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"5\" e=\"14\">\n+\t\t\t\t\t<br s=\"12\" e=\"14\">\n+\t\t\t\t\t\t<cond s=\"27\" e=\"27\" id=\"26886\" count=\"40710152\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"15\" e=\"26\" id=\"26887\" count=\"48\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"15\" e=\"26\">\n+\t\t\t\t\t<goto s=\"24\" e=\"26\">\n+\t\t\t\t\t\t<tg s=\"28\" e=\"28\" id=\"26888\" count=\"48\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"27\" e=\"27\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"28\" e=\"28\">\n+\t\t\t\t\t<fall s=\"28\" e=\"28\" id=\"26889\" count=\"42429857\"\/>\n+\t\t\t\t\t<exit s=\"28\" e=\"28\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4068;15=4070;28=4068;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"clear\" vmsig=\"()V\" flags='' access=\"0\" length=\"50\">\n+\t\t\t\t<bl s=\"0\" e=\"49\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"49\" id=\"26890\" count=\"31478\"\/>\n+\t\t\t\t\t<exit s=\"49\" e=\"49\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4077;13=4078;26=4079;39=4080;44=4081;49=4082;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"size\" vmsig=\"()I\" flags='' access=\"0\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26891\" count=\"28709100\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4088;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"grow\" vmsig=\"()V\" flags=' private' access=\"2\" length=\"85\">\n+\t\t\t\t<bl s=\"0\" e=\"84\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"84\" id=\"26892\" count=\"328695\"\/>\n+\t\t\t\t\t<exit s=\"84\" e=\"84\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4095;10=4097;14=4098;19=4099;25=4101;39=4102;53=4103;68=4105;73=4106;78=4107;84=4108;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$HandleTable$HandleList\" supername=\"java\/lang\/Object\" checksum=\"3921338486\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags=' public' access=\"1\" cons=\"true\" length=\"17\">\n+\t\t\t\t<bl s=\"0\" e=\"16\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"16\" id=\"26801\" count=\"4569162\"\/>\n+\t\t\t\t\t<exit s=\"16\" e=\"16\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4117;4=4114;11=4115;16=4118;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"add\" vmsig=\"(I)V\" flags=' public' access=\"1\" length=\"60\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"26802\" count=\"9349127\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"42\" e=\"59\" id=\"26803\" count=\"9288875\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"41\" id=\"26804\" count=\"60252\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"41\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"59\">\n+\t\t\t\t\t<fall s=\"42\" e=\"59\" id=\"26805\" count=\"60252\"\/>\n+\t\t\t\t\t<exit s=\"59\" e=\"59\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4121;12=4122;22=4123;37=4124;42=4126;59=4127;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"get\" vmsig=\"(I)I\" flags=' public' access=\"1\" length=\"23\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"26806\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"5\" e=\"7\">\n+\t\t\t\t\t\t<cond s=\"16\" e=\"22\" id=\"26807\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"8\" e=\"15\" id=\"26808\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"8\" e=\"15\">\n+\t\t\t\t\t<exit s=\"15\" e=\"15\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"16\" e=\"22\">\n+\t\t\t\t\t<exit s=\"22\" e=\"22\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4130;8=4131;16=4133;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"size\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26809\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=4137;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$Logging\" supername=\"java\/lang\/Object\" checksum=\"577626612\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags=' private' access=\"2\" cons=\"true\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26893\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=319;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"&lt;clinit&gt;\" vmsig=\"()V\" flags=' static' access=\"8\" clinit=\"true\" length=\"39\">\n+\t\t\t\t<bl s=\"0\" e=\"17\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"17\" id=\"26894\" count=\"98\"\/>\n+\t\t\t\t\t<br s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<cond s=\"30\" e=\"33\" id=\"26895\" count=\"2\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"18\" e=\"29\" id=\"26896\" count=\"96\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"29\">\n+\t\t\t\t\t<br s=\"27\" e=\"29\">\n+\t\t\t\t\t\t<cond s=\"34\" e=\"34\" id=\"26897\" count=\"96\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"30\" e=\"33\" id=\"26898\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"30\" e=\"33\">\n+\t\t\t\t\t<goto s=\"31\" e=\"33\">\n+\t\t\t\t\t\t<tg s=\"35\" e=\"38\" id=\"26899\" count=\"2\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"34\" e=\"34\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"35\" e=\"38\">\n+\t\t\t\t\t<fall s=\"35\" e=\"38\" id=\"26900\" count=\"96\"\/>\n+\t\t\t\t\t<exit s=\"38\" e=\"38\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=328;6=329;22=330;38=331;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$PeekInputStream\" supername=\"java\/io\/InputStream\" checksum=\"1192846800\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/io\/InputStream;)V\" flags='' access=\"0\" cons=\"true\" length=\"20\">\n+\t\t\t\t<bl s=\"0\" e=\"19\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"19\" id=\"26901\" count=\"1214344\"\/>\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2881;4=2874;9=2876;14=2882;19=2883;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"peek\" vmsig=\"()I\" flags='' access=\"0\" length=\"49\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26902\" count=\"82835982\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"12\" e=\"34\" id=\"26903\" count=\"74562360\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"11\" id=\"26904\" count=\"8273610\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"11\">\n+\t\t\t\t\t<exit s=\"11\" e=\"11\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"34\">\n+\t\t\t\t\t<br s=\"32\" e=\"34\">\n+\t\t\t\t\t\t<cond s=\"39\" e=\"39\" id=\"26905\" count=\"17\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"35\" e=\"38\" id=\"26906\" count=\"74562360\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"35\" e=\"38\">\n+\t\t\t\t\t<goto s=\"36\" e=\"38\">\n+\t\t\t\t\t\t<tg s=\"40\" e=\"48\" id=\"26907\" count=\"74562342\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"39\" e=\"39\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"40\" e=\"48\">\n+\t\t\t\t\t<fall s=\"40\" e=\"48\" id=\"26908\" count=\"17\"\/>\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2890;7=2891;12=2893;23=2894;44=2895;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"read\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"47\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26909\" count=\"77833829\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"19\" e=\"35\" id=\"26910\" count=\"6636214\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"18\" id=\"26911\" count=\"71197615\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"18\">\n+\t\t\t\t\t<exit s=\"18\" e=\"18\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"35\">\n+\t\t\t\t\t<br s=\"33\" e=\"35\">\n+\t\t\t\t\t\t<cond s=\"40\" e=\"40\" id=\"26912\" count=\"1\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"36\" e=\"39\" id=\"26913\" count=\"6636215\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"39\">\n+\t\t\t\t\t<goto s=\"37\" e=\"39\">\n+\t\t\t\t\t\t<tg s=\"41\" e=\"46\" id=\"26914\" count=\"6636215\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"40\" e=\"40\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"46\">\n+\t\t\t\t\t<fall s=\"41\" e=\"46\" id=\"26915\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"46\" e=\"46\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2899;7=2900;12=2901;17=2902;19=2904;27=2905;45=2906;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"read\" vmsig=\"([BII)I\" flags=' public' access=\"1\" length=\"115\">\n+\t\t\t\t<bl s=\"0\" e=\"3\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"3\" id=\"26916\" count=\"75631263\"\/>\n+\t\t\t\t\t<br s=\"1\" e=\"3\">\n+\t\t\t\t\t\t<cond s=\"6\" e=\"12\" id=\"26917\" count=\"75631254\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"4\" e=\"5\" id=\"26918\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"4\" e=\"5\">\n+\t\t\t\t\t<exit s=\"5\" e=\"5\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"6\" e=\"12\">\n+\t\t\t\t\t<br s=\"10\" e=\"12\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"89\" id=\"26919\" count=\"3364729\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"13\" e=\"34\" id=\"26920\" count=\"72266524\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"13\" e=\"34\">\n+\t\t\t\t\t<br s=\"32\" e=\"34\">\n+\t\t\t\t\t\t<cond s=\"41\" e=\"41\" id=\"26921\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"35\" e=\"40\" id=\"26922\" count=\"72266632\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"35\" e=\"40\">\n+\t\t\t\t\t<goto s=\"38\" e=\"40\">\n+\t\t\t\t\t\t<tg s=\"42\" e=\"48\" id=\"26923\" count=\"72266615\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"41\" e=\"41\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"42\" e=\"48\">\n+\t\t\t\t\t<fall s=\"42\" e=\"48\" id=\"26930\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"89\">\n+\t\t\t\t\t<br s=\"87\" e=\"89\">\n+\t\t\t\t\t\t<cond s=\"96\" e=\"96\" id=\"26924\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"90\" e=\"95\" id=\"26925\" count=\"3364733\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"90\" e=\"95\">\n+\t\t\t\t\t<goto s=\"93\" e=\"95\">\n+\t\t\t\t\t\t<tg s=\"97\" e=\"105\" id=\"26926\" count=\"3364733\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"96\" e=\"96\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"97\" e=\"105\">\n+\t\t\t\t\t<fall s=\"97\" e=\"105\" id=\"26931\" count=\"0\"\/>\n+\t\t\t\t\t<br s=\"103\" e=\"105\">\n+\t\t\t\t\t\t<cond s=\"113\" e=\"113\" id=\"26927\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"106\" e=\"112\" id=\"26928\" count=\"3364733\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"106\" e=\"112\">\n+\t\t\t\t\t<goto s=\"110\" e=\"112\">\n+\t\t\t\t\t\t<tg s=\"114\" e=\"114\" id=\"26929\" count=\"3364733\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"113\" e=\"113\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"114\" e=\"114\">\n+\t\t\t\t\t<fall s=\"114\" e=\"114\" id=\"26932\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"114\" e=\"114\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2912;4=2913;6=2914;13=2915;25=2916;46=2917;49=2919;60=2920;63=2921;68=2922;80=2923;101=2924;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readFully\" vmsig=\"([BII)V\" flags='' access=\"0\" length=\"48\">\n+\t\t\t\t<bl s=\"0\" e=\"2\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"2\" id=\"26933\" count=\"67100638\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"3\" e=\"8\">\n+\t\t\t\t\t<fall s=\"3\" e=\"8\" id=\"26939\" count=\"67100664\"\/>\n+\t\t\t\t\t<br s=\"6\" e=\"8\">\n+\t\t\t\t\t\t<cond s=\"47\" e=\"47\" id=\"26934\" count=\"67100701\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"9\" e=\"28\" id=\"26935\" count=\"67100705\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"9\" e=\"28\">\n+\t\t\t\t\t<br s=\"26\" e=\"28\">\n+\t\t\t\t\t\t<cond s=\"37\" e=\"46\" id=\"26936\" count=\"67100783\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"29\" e=\"36\" id=\"26937\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"36\">\n+\t\t\t\t\t<exit s=\"36\" e=\"36\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"37\" e=\"46\">\n+\t\t\t\t\t<goto s=\"44\" e=\"46\">\n+\t\t\t\t\t\t<tg s=\"3\" e=\"8\" id=\"26938\" count=\"67100748\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"47\" e=\"47\">\n+\t\t\t\t\t<exit s=\"47\" e=\"47\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2929;3=2930;9=2931;24=2932;29=2933;37=2935;44=2936;47=2937;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"skip\" vmsig=\"(J)J\" flags=' public' access=\"1\" length=\"53\">\n+\t\t\t\t<bl s=\"0\" e=\"5\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"5\" id=\"26940\" count=\"6\"\/>\n+\t\t\t\t\t<br s=\"3\" e=\"5\">\n+\t\t\t\t\t\t<cond s=\"8\" e=\"16\" id=\"26941\" count=\"5\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"6\" e=\"7\" id=\"26942\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"6\" e=\"7\">\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"8\" e=\"16\">\n+\t\t\t\t\t<br s=\"14\" e=\"16\">\n+\t\t\t\t\t\t<cond s=\"29\" e=\"52\" id=\"26943\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"17\" e=\"28\" id=\"26944\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"17\" e=\"28\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"29\" e=\"52\">\n+\t\t\t\t\t<fall s=\"29\" e=\"52\" id=\"26945\" count=\"1\"\/>\n+\t\t\t\t\t<exit s=\"52\" e=\"52\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2940;6=2941;8=2943;10=2944;17=2945;22=2946;25=2947;29=2949;41=2950;51=2951;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"available\" vmsig=\"()I\" flags=' public' access=\"1\" length=\"21\">\n+\t\t\t\t<bl s=\"0\" e=\"13\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"13\" id=\"26946\" count=\"1207\"\/>\n+\t\t\t\t\t<br s=\"11\" e=\"13\">\n+\t\t\t\t\t\t<cond s=\"18\" e=\"18\" id=\"26947\" count=\"1207\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"14\" e=\"17\" id=\"26948\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"17\">\n+\t\t\t\t\t<goto s=\"15\" e=\"17\">\n+\t\t\t\t\t\t<tg s=\"19\" e=\"20\" id=\"26949\" count=\"0\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"18\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"19\" e=\"20\">\n+\t\t\t\t\t<fall s=\"19\" e=\"20\" id=\"26950\" count=\"1207\"\/>\n+\t\t\t\t\t<exit s=\"20\" e=\"20\" opcode=\"ireturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2955;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"close\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"8\">\n+\t\t\t\t<bl s=\"0\" e=\"7\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"7\" id=\"26951\" count=\"5004\"\/>\n+\t\t\t\t\t<exit s=\"7\" e=\"7\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2959;7=2960;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"getBytesRead\" vmsig=\"()J\" flags=' public' access=\"1\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26952\" count=\"36332221\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"lreturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2963;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$ValidationList\" supername=\"java\/lang\/Object\" checksum=\"1930632655\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"()V\" flags='' access=\"0\" cons=\"true\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26957\" count=\"1214337\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2758;4=2759;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"register\" vmsig=\"(Ljava\/io\/ObjectInputValidation;I)V\" flags='' access=\"0\" length=\"98\">\n+\t\t\t\t<bl s=\"0\" e=\"3\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"3\" id=\"26958\" count=\"10\"\/>\n+\t\t\t\t\t<br s=\"1\" e=\"3\">\n+\t\t\t\t\t\t<cond s=\"14\" e=\"21\" id=\"26959\" count=\"10\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"4\" e=\"13\" id=\"26960\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"4\" e=\"13\">\n+\t\t\t\t\t<exit s=\"13\" e=\"13\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"14\" e=\"21\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"26\">\n+\t\t\t\t\t<fall s=\"22\" e=\"26\" id=\"26969\" count=\"10\"\/>\n+\t\t\t\t\t<br s=\"24\" e=\"26\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"57\" id=\"26961\" count=\"4\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"27\" e=\"35\" id=\"26962\" count=\"19\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"27\" e=\"35\">\n+\t\t\t\t\t<br s=\"33\" e=\"35\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"57\" id=\"26963\" count=\"6\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"36\" e=\"48\" id=\"26964\" count=\"13\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"36\" e=\"48\">\n+\t\t\t\t\t<goto s=\"46\" e=\"48\">\n+\t\t\t\t\t\t<tg s=\"22\" e=\"26\" id=\"26965\" count=\"13\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"57\">\n+\t\t\t\t\t<br s=\"55\" e=\"57\">\n+\t\t\t\t\t\t<cond s=\"78\" e=\"96\" id=\"26966\" count=\"5\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"58\" e=\"77\" id=\"26967\" count=\"5\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"58\" e=\"77\">\n+\t\t\t\t\t<goto s=\"75\" e=\"77\">\n+\t\t\t\t\t\t<tg s=\"97\" e=\"97\" id=\"26968\" count=\"5\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"78\" e=\"96\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"97\" e=\"97\">\n+\t\t\t\t\t<fall s=\"97\" e=\"97\" id=\"26970\" count=\"5\"\/>\n+\t\t\t\t\t<exit s=\"97\" e=\"97\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2768;4=2769;14=2772;22=2773;36=2774;39=2775;49=2778;54=2779;58=2780;78=2782;97=2784;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"doCallbacks\" vmsig=\"()V\" flags='' access=\"0\" length=\"58\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"26971\" count=\"5103406\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"40\" e=\"42\" id=\"26972\" count=\"5103405\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"39\" id=\"26973\" count=\"10\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"39\">\n+\t\t\t\t\t<goto s=\"37\" e=\"39\">\n+\t\t\t\t\t\t<tg s=\"0\" e=\"6\" id=\"26974\" count=\"10\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"40\" e=\"42\">\n+\t\t\t\t\t<goto s=\"40\" e=\"42\">\n+\t\t\t\t\t\t<tg s=\"57\" e=\"57\" id=\"26975\" count=\"5103410\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"43\" e=\"56\">\n+\t\t\t\t\t<catch s=\"43\" e=\"56\" id=\"26976\" count=\"0\"\/>\n+\t\t\t\t\t<exit s=\"56\" e=\"56\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"57\" e=\"57\">\n+\t\t\t\t\t<exit s=\"57\" e=\"57\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2796;7=2797;26=2805;40=2810;43=2807;44=2808;49=2809;57=2811;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"clear\" vmsig=\"()V\" flags=' public' access=\"1\" length=\"6\">\n+\t\t\t\t<bl s=\"0\" e=\"5\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"5\" id=\"26977\" count=\"31478\"\/>\n+\t\t\t\t\t<exit s=\"5\" e=\"5\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2817;5=2818;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$ValidationList$1\" supername=\"java\/lang\/Object\" checksum=\"3045088783\" signature=\"Ljava\/lang\/Object;Ljava\/security\/PrivilegedExceptionAction&lt;Ljava\/lang\/Void;&gt;;\" source=\"ObjectInputStream.java\" inner=\"anon\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/io\/ObjectInputStream$ValidationList;)V\" flags='' access=\"0\" cons=\"true\" length=\"10\">\n+\t\t\t\t<bl s=\"0\" e=\"9\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"9\" id=\"26953\" count=\"10\"\/>\n+\t\t\t\t\t<exit s=\"9\" e=\"9\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2799;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"run\" vmsig=\"()Ljava\/lang\/Void;\" flags=' public' access=\"1\" length=\"17\">\n+\t\t\t\t<bl s=\"0\" e=\"16\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"16\" id=\"26954\" count=\"10\"\/>\n+\t\t\t\t\t<exit s=\"16\" e=\"16\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2801;15=2802;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"run\" vmsig=\"()Ljava\/lang\/Object;\" flags=' public bridge synthetic' access=\"4161\" length=\"5\">\n+\t\t\t\t<bl s=\"0\" e=\"4\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"4\" id=\"26955\" count=\"10\"\/>\n+\t\t\t\t\t<exit s=\"4\" e=\"4\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2799;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"ObjectInputStream$ValidationList$Callback\" supername=\"java\/lang\/Object\" checksum=\"1787550833\" source=\"ObjectInputStream.java\" inner=\"inner\" flags=''>\n+\t\t\t<meth name=\"&lt;init&gt;\" vmsig=\"(Ljava\/io\/ObjectInputValidation;ILjava\/io\/ObjectInputStream$ValidationList$Callback;Ljava\/security\/AccessControlContext;)V\" flags='' access=\"0\" cons=\"true\" length=\"26\">\n+\t\t\t\t<bl s=\"0\" e=\"25\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"25\" id=\"26956\" count=\"10\"\/>\n+\t\t\t\t\t<exit s=\"25\" e=\"25\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2744;4=2745;9=2746;14=2747;19=2748;25=2749;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t<\/package>\n+<\/coverage>\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/ObjectInputStream.xml","additions":5621,"deletions":0,"binary":false,"changes":5621,"status":"added"},{"patch":"@@ -0,0 +1,253 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+\n+<coverage\n+        xmlns='http:\/\/java.sun.com\/jcov\/namespace'\n+        xmlns:xsi='http:\/\/www.w3.org\/2001\/XMLSchema-instance'\n+        xsi:schemaLocation='http:\/\/java.sun.com\/jcov\/namespace coverage.xsd'>\n+\n+\t<head>\n+\t\t<property name='coverage.generator.args' val=''\/>\n+\t\t<property name='coverage.generator.mode' val='BRANCH'\/>\n+\t\t<property name='coverage.generator.internal' val='include'\/>\n+\t\t<property name='coverage.generator.include' val=''\/>\n+\t\t<property name='coverage.generator.exclude' val='**\\roxy*|java.lang.Object|jdk.internal.org.objectweb.**|jdk.test.Main'\/>\n+\t\t<property name='coverage.generator.caller_include' val='.*'\/>\n+\t\t<property name='coverage.generator.caller_exclude' val=''\/>\n+\t\t<property name='coverage.created.date' val='2023-06-12'\/>\n+\t\t<property name='coverage.created.time' val='22:07:57'\/>\n+\t\t<property name='coverage.generator.fullversion' val=' 3.0_14 (os.ea) January 05, 2023'\/>\n+\t\t<property name='coverage.generator.name' val='jcov'\/>\n+\t\t<property name='coverage.generator.version' val='3.0'\/>\n+\t\t<property name='coverage.spec.version' val='1.3'\/>\n+\t\t<property name='java.runtime.version' val='20+36-2344'\/>\n+\t\t<property name='java.version' val='20'\/>\n+\t\t<property name='os.arch' val='amd64'\/>\n+\t\t<property name='os.name' val='Linux'\/>\n+\t\t<property name='os.version' val='5.15.0-1030-oracle'\/>\n+\t\t<property name='user.name' val='ubuntu'\/>\n+\t\t<property name='dynamic.collected' val='false'\/>\n+\t\t<property name='id.count' val='1034203'\/>\n+\t<\/head>\n+\t<package name=\"java.io\" moduleName=\"java.base\">\n+\t\t<class name=\"ObjectInputStream\" supername=\"java\/io\/InputStream\" checksum=\"384835699\" source=\"ObjectInputStream.java\" flags=' public'>\n+\t\t\t<meth name=\"checkArray\" vmsig=\"(Ljava\/lang\/Class;I)V\" flags=' private' access=\"2\" signature=\"(Ljava\/lang\/Class&lt;*&gt;;I)V\" length=\"40\">\n+\t\t\t\t<bl s=\"0\" e=\"6\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"6\" id=\"27170\" count=\"1410\"\/>\n+\t\t\t\t\t<br s=\"4\" e=\"6\">\n+\t\t\t\t\t\t<cond s=\"18\" e=\"21\" id=\"27171\" count=\"1410\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"7\" e=\"17\" id=\"27172\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"7\" e=\"17\">\n+\t\t\t\t\t<exit s=\"17\" e=\"17\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"18\" e=\"21\">\n+\t\t\t\t\t<br s=\"19\" e=\"21\">\n+\t\t\t\t\t\t<cond s=\"33\" e=\"39\" id=\"27173\" count=\"1409\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"22\" e=\"32\" id=\"27174\" count=\"1\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"22\" e=\"32\">\n+\t\t\t\t\t<exit s=\"32\" e=\"32\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"33\" e=\"39\">\n+\t\t\t\t\t<exit s=\"39\" e=\"39\" opcode=\"return\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=1458;7=1459;18=1462;22=1463;33=1466;39=1467;<\/lt>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"readArray\" vmsig=\"(Z)Ljava\/lang\/Object;\" flags=' private' access=\"2\" length=\"445\">\n+\t\t\t\t<bl s=\"0\" e=\"11\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"11\" id=\"27369\" count=\"283538\"\/>\n+\t\t\t\t\t<br s=\"9\" e=\"11\">\n+\t\t\t\t\t\t<cond s=\"20\" e=\"37\" id=\"27370\" count=\"283540\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"12\" e=\"19\" id=\"27371\" count=\"0\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"12\" e=\"19\">\n+\t\t\t\t\t<exit s=\"19\" e=\"19\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"20\" e=\"37\">\n+\t\t\t\t\t<br s=\"35\" e=\"37\">\n+\t\t\t\t\t\t<cond s=\"49\" e=\"73\" id=\"27372\" count=\"283530\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"38\" e=\"48\" id=\"27373\" count=\"2\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"38\" e=\"48\">\n+\t\t\t\t\t<exit s=\"48\" e=\"48\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"49\" e=\"73\">\n+\t\t\t\t\t<br s=\"71\" e=\"73\">\n+\t\t\t\t\t\t<cond s=\"89\" e=\"96\" id=\"27374\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"74\" e=\"88\" id=\"27375\" count=\"283508\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"74\" e=\"88\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"89\" e=\"96\">\n+\t\t\t\t\t<fall s=\"89\" e=\"96\" id=\"27416\" count=\"283509\"\/>\n+\t\t\t\t\t<br s=\"94\" e=\"96\">\n+\t\t\t\t\t\t<cond s=\"103\" e=\"104\" id=\"27376\" count=\"283514\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"97\" e=\"102\" id=\"27377\" count=\"3\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"97\" e=\"102\">\n+\t\t\t\t\t<goto s=\"100\" e=\"102\">\n+\t\t\t\t\t\t<tg s=\"105\" e=\"120\" id=\"27378\" count=\"3\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"103\" e=\"104\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"105\" e=\"120\">\n+\t\t\t\t\t<fall s=\"105\" e=\"120\" id=\"27417\" count=\"283510\"\/>\n+\t\t\t\t\t<br s=\"118\" e=\"120\">\n+\t\t\t\t\t\t<cond s=\"132\" e=\"136\" id=\"27379\" count=\"283509\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"121\" e=\"131\" id=\"27380\" count=\"7\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"121\" e=\"131\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"132\" e=\"136\">\n+\t\t\t\t\t<fall s=\"132\" e=\"136\" id=\"27418\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"134\" e=\"136\">\n+\t\t\t\t\t\t<cond s=\"163\" e=\"170\" id=\"27381\" count=\"283511\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"137\" e=\"139\" id=\"27382\" count=\"7\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"137\" e=\"139\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"140\" e=\"145\">\n+\t\t\t\t\t<fall s=\"140\" e=\"145\" id=\"27419\" count=\"7\"\/>\n+\t\t\t\t\t<br s=\"143\" e=\"145\">\n+\t\t\t\t\t\t<cond s=\"160\" e=\"162\" id=\"27383\" count=\"7\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"146\" e=\"159\" id=\"27384\" count=\"97\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"146\" e=\"159\">\n+\t\t\t\t\t<goto s=\"157\" e=\"159\">\n+\t\t\t\t\t\t<tg s=\"140\" e=\"145\" id=\"27385\" count=\"97\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"160\" e=\"162\">\n+\t\t\t\t\t<goto s=\"160\" e=\"162\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27386\" count=\"7\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"163\" e=\"170\">\n+\t\t\t\t\t<br s=\"168\" e=\"170\">\n+\t\t\t\t\t\t<cond s=\"380\" e=\"389\" id=\"27387\" count=\"86331\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"171\" e=\"178\" id=\"27388\" count=\"197179\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"171\" e=\"178\">\n+\t\t\t\t\t<br s=\"176\" e=\"178\">\n+\t\t\t\t\t\t<cond s=\"196\" e=\"203\" id=\"27389\" count=\"171673\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"179\" e=\"195\" id=\"27390\" count=\"25506\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"179\" e=\"195\">\n+\t\t\t\t\t<goto s=\"193\" e=\"195\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27391\" count=\"25506\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"196\" e=\"203\">\n+\t\t\t\t\t<br s=\"201\" e=\"203\">\n+\t\t\t\t\t\t<cond s=\"222\" e=\"229\" id=\"27392\" count=\"143047\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"204\" e=\"221\" id=\"27393\" count=\"28626\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"204\" e=\"221\">\n+\t\t\t\t\t<goto s=\"219\" e=\"221\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27394\" count=\"28627\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"222\" e=\"229\">\n+\t\t\t\t\t<br s=\"227\" e=\"229\">\n+\t\t\t\t\t\t<cond s=\"247\" e=\"254\" id=\"27395\" count=\"117641\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"230\" e=\"246\" id=\"27396\" count=\"25406\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"230\" e=\"246\">\n+\t\t\t\t\t<goto s=\"244\" e=\"246\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27397\" count=\"25406\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"247\" e=\"254\">\n+\t\t\t\t\t<br s=\"252\" e=\"254\">\n+\t\t\t\t\t\t<cond s=\"272\" e=\"279\" id=\"27398\" count=\"93909\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"255\" e=\"271\" id=\"27399\" count=\"23732\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"255\" e=\"271\">\n+\t\t\t\t\t<goto s=\"269\" e=\"271\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27400\" count=\"23732\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"272\" e=\"279\">\n+\t\t\t\t\t<br s=\"277\" e=\"279\">\n+\t\t\t\t\t\t<cond s=\"297\" e=\"304\" id=\"27401\" count=\"70192\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"280\" e=\"296\" id=\"27402\" count=\"23717\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"280\" e=\"296\">\n+\t\t\t\t\t<goto s=\"294\" e=\"296\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27403\" count=\"23717\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"297\" e=\"304\">\n+\t\t\t\t\t<br s=\"302\" e=\"304\">\n+\t\t\t\t\t\t<cond s=\"322\" e=\"329\" id=\"27404\" count=\"46421\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"305\" e=\"321\" id=\"27405\" count=\"23771\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"305\" e=\"321\">\n+\t\t\t\t\t<goto s=\"319\" e=\"321\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27406\" count=\"23771\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"322\" e=\"329\">\n+\t\t\t\t\t<br s=\"327\" e=\"329\">\n+\t\t\t\t\t\t<cond s=\"347\" e=\"354\" id=\"27407\" count=\"22636\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"330\" e=\"346\" id=\"27408\" count=\"23785\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"330\" e=\"346\">\n+\t\t\t\t\t<goto s=\"344\" e=\"346\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27409\" count=\"23785\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"347\" e=\"354\">\n+\t\t\t\t\t<br s=\"352\" e=\"354\">\n+\t\t\t\t\t\t<cond s=\"372\" e=\"379\" id=\"27410\" count=\"0\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"355\" e=\"371\" id=\"27411\" count=\"22636\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"355\" e=\"371\">\n+\t\t\t\t\t<goto s=\"369\" e=\"371\">\n+\t\t\t\t\t\t<tg s=\"427\" e=\"444\" id=\"27412\" count=\"22636\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"372\" e=\"379\">\n+\t\t\t\t\t<exit s=\"379\" e=\"379\" opcode=\"athrow\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"380\" e=\"389\">\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"390\" e=\"395\">\n+\t\t\t\t\t<fall s=\"390\" e=\"395\" id=\"27420\" count=\"86330\"\/>\n+\t\t\t\t\t<br s=\"393\" e=\"395\">\n+\t\t\t\t\t\t<cond s=\"427\" e=\"444\" id=\"27413\" count=\"86299\" val=\"true\"\/>\n+\t\t\t\t\t\t<cond s=\"396\" e=\"426\" id=\"27414\" count=\"7997230\" val=\"false\"\/>\n+\t\t\t\t\t<\/br>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"396\" e=\"426\">\n+\t\t\t\t\t<goto s=\"424\" e=\"426\">\n+\t\t\t\t\t\t<tg s=\"390\" e=\"395\" id=\"27415\" count=\"7997198\"\/>\n+\t\t\t\t\t<\/goto>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<bl s=\"427\" e=\"444\">\n+\t\t\t\t\t<exit s=\"444\" e=\"444\" opcode=\"areturn\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t\t<lt>0=2135;12=2136;20=2139;26=2140;34=2141;38=2142;49=2144;58=2146;61=2147;64=2148;74=2149;81=2150;89=2153;110=2154;116=2155;121=2156;132=2159;137=2160;146=2161;154=2160;163=2163;171=2164;179=2165;196=2166;204=2167;222=2168;230=2169;247=2170;255=2171;272=2172;280=2173;297=2174;305=2175;322=2176;330=2177;347=2178;355=2179;372=2181;380=2184;387=2185;396=2186;408=2187;421=2185;427=2191;436=2192;442=2193;<\/lt>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t<\/package>\n+<\/coverage>\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/ObjectInputStreamTwoMethods.xml","additions":253,"deletions":0,"binary":false,"changes":253,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.jcov;\n+\n+import com.sun.tdk.jcov.data.FileFormatException;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.filter.GitDifFilterTest;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.testng.Assert.*;\n+\n+public class SameLineMethods {\n+    static JCovLineCoverage coverage;\n+\n+    @BeforeClass\n+    static void init() throws FileFormatException, IOException {\n+        var xmlName = SameLineMethods.class.getName().replace('.', '\/');\n+        xmlName = \"\/\" + xmlName.substring(0, xmlName.lastIndexOf('\/')) + \"\/Fake.xml\";\n+        coverage = new JCovLineCoverage(DataRoot.read(GitDifFilterTest.cp(xmlName).toString()));\n+    }\n+\n+    @Test\n+    void basic() {\n+        var ranges = coverage.ranges(\"my\/package\/AB.java\");\n+        assertTrue(ranges.stream().filter(clr -> clr.first() == 1).findAny().get().coverage().covered() > 0);\n+    }\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/SameLineMethods.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+diff --git a\/src\/java\/io\/ObjectInputStream.java b\/src\/java\/io\/ObjectInputStream.java\n+index 2e0d6384f81..10b7f7715fa 100644\n+--- a\/src\/java\/io\/ObjectInputStream.java\n++++ b\/src\/java\/io\/ObjectInputStream.java\n+@@ -1454 +1454 @@ public class ObjectInputStream\n+-     * @throws NegativeArraySizeException if arrayLength is negative\n++     * @throws StreamCorruptedException if arrayLength is negative\n+@@ -1457 +1457 @@ public class ObjectInputStream\n+-    private void checkArray(Class<?> arrayType, int arrayLength) throws InvalidClassException {\n++    private void checkArray(Class<?> arrayType, int arrayLength) throws ObjectStreamException {\n+@@ -1463 +1463 @@ public class ObjectInputStream\n+-            throw new NegativeArraySizeException();\n++            throw new StreamCorruptedException(\"Array length is negative\");\n+@@ -2141 +2141,3 @@ public class ObjectInputStream\n+-\n++        if (len < 0) {\n++            throw new StreamCorruptedException(\"Array length is negative\");\n++        }\n+diff --git a\/src\/java\/io\/JavaObjectInputStreamAccess.java b\/src\/java\/io\/JavaObjectInputStreamAccess.java\n+index 2633ac0edca..a47add473c6 100644\n+--- a\/src\/java\/io\/JavaObjectInputStreamAccess.java\n++++ b\/src\/java\/io\/JavaObjectInputStreamAccess.java\n+@@ -28 +28 @@ package jdk.internal.access;\n+-import java.io.InvalidClassException;\n++import java.io.ObjectStreamException;\n+@@ -37 +37 @@ public interface JavaObjectInputStreamAccess {\n+-        throws InvalidClassException;\n++        throws ObjectStreamException;\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/negative_array_size.diff","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.source;\n+\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class ContextFilterTest {\n+    @Test\n+    public void sparse() {\n+        var filter = new ContextFilter(new SourceFilter() {\n+            @Override\n+            public List<LineRange> ranges(String file) {\n+                return List.of(\n+                        new LineRange(1, 3),\n+                        new LineRange(7, 10),\n+                        new LineRange(50, 50),\n+                        new LineRange(98, 99)\n+                );\n+            }\n+        }, 2);\n+        var ranges = filter.ranges(\"\");\n+        assertEquals(ranges.size(), 3);\n+        Assert.assertEquals(ranges.get(0).first(), 1);\n+        Assert.assertEquals(ranges.get(0).last(), 12);\n+    }\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/source\/ContextFilterTest.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.FileCoverage;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.source.SourceHierarchy;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class CoverageCacheTest {\n+    static final Set<String> files = Set.of(\"dir1\/file1\", \"dir1\/file2\", \"dir2\/file1\", \"dir2\/file2\");\n+    static FileCoverage coverage;\n+    static Path reportFile;\n+    @BeforeClass\n+    static void init() throws IOException {\n+        coverage = file -> List.of(\n+                new CoveredLineRange(1, 1, Coverage.COVERED),\n+                new CoveredLineRange(3, 4, Coverage.COVERED),\n+                new CoveredLineRange(6, 8, Coverage.COVERED)\n+        );\n+        reportFile = Files.createTempFile(\"report\", \"txt\");\n+    }\n+    @Test\n+    void everyEven() throws IOException {\n+        var cache = new CoverageHierarchy(files,\n+                new SourceHierarchy() {\n+                    @Override\n+                    public List<String> readFile(String file) throws IOException {\n+                        return Files.readAllLines(Path.of(file));\n+                    }\n+\n+                    @Override\n+                    public String toClass(String file) {\n+                        return file;\n+                    }\n+                },\n+                coverage,\n+                file -> file.endsWith(\"file1\") ?\n+                        List.of(\n+                                new LineRange(0, 0),\n+                                new LineRange(2, 2),\n+                                new LineRange(4, 4),\n+                                new LineRange(6, 6),\n+                                new LineRange(8, 8)\n+                        ) :\n+                        List.of());\n+        assertTrue(cache.get(\"\").equals(new Coverage(4, 4)));\n+        assertTrue(cache.get(\"dir1\").equals(new Coverage(2, 2)));\n+        assertTrue(cache.get(\"dir1\/file1\").equals(new Coverage(2, 2)));\n+    }\n+    @Test\n+    void getLineCoverage() throws IOException {\n+        var cache = new CoverageHierarchy(files,\n+                new SourceHierarchy() {\n+                    @Override\n+                    public List<String> readFile(String file) throws IOException {\n+                        return Files.readAllLines(Path.of(file));\n+                    }\n+\n+                    @Override\n+                    public String toClass(String file) {\n+                        return file;\n+                    }\n+                },\n+                coverage,\n+                file -> file.endsWith(\"file1\") ?\n+                List.of(\n+                        new LineRange(0, 0),\n+                        new LineRange(2, 2),\n+                        new LineRange(4, 4),\n+                        new LineRange(6, 6),\n+                        new LineRange(8, 8)\n+                ) :\n+                List.of());\n+\n+        var lc = cache.getLineRanges(\"dir1\/file1\");\n+        assertEquals(lc.size(), 3);\n+        assertEquals(lc.get(4).coverage(), Coverage.COVERED);\n+        assertEquals(lc.get(6).coverage(), Coverage.COVERED);\n+        assertEquals(lc.get(8).coverage(), Coverage.COVERED);\n+    }\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/view\/CoverageCacheTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.FileCoverage;\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import openjdk.codetools.jcov.report.source.SourceHierarchy;\n+import openjdk.codetools.jcov.report.source.SourcePath;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class SingleFiletReportTest {\n+    public static final String FILE_11 = \"dir1\/file1.java\";\n+    public static final String FILE_12 = \"dir1\/file2.java\";\n+    public static final String FILE_21 = \"dir2\/file1.java\";\n+    public static final String FILE_22 = \"dir2\/file2.java\";\n+    static SourceHierarchy source;\n+    static FileCoverage coverage;\n+    static Path reportFile;\n+    public static Path createFiles() throws IOException {\n+        Path root = Files.createTempDirectory(\"source\");\n+        Files.createDirectories(root);\n+        for (var dir : List.of(\"dir1\", \"dir2\")) Files.createDirectories(root.resolve(dir));\n+        for (var file : List.of(FILE_11, FILE_12, FILE_21, FILE_22))\n+            Files.write(root.resolve(file), List.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"));\n+        return root;\n+    }\n+    @BeforeClass\n+    static void init() throws IOException {\n+        Path root = createFiles();\n+        source = new SourcePath(root, root);\n+        coverage = new FileCoverage() {\n+            @Override\n+            public List<CoveredLineRange> ranges(String file) {\n+                return file.equals(FILE_11) ? List.of(\n+                        new CoveredLineRange(1, 1, Coverage.COVERED),\n+                        new CoveredLineRange(3, 4, Coverage.UNCOVERED),\n+                        new CoveredLineRange(6, 8, Coverage.COVERED)\n+                ) : List.of();\n+            }\n+        };\n+        reportFile = Files.createTempFile(\"report\", \".html\");\n+    }\n+    @Test\n+    void everyOdd() throws Exception {\n+        var fileSet = new FileSet(Set.of(FILE_11, FILE_12, FILE_21, FILE_22));\n+        SourceFilter filter = file -> List.of(\n+\/\/                new LineRange(0, 0),\n+                new LineRange(2, 2),\n+                new LineRange(4, 4),\n+                new LineRange(6, 6),\n+                new LineRange(8, 8)\n+        );\n+        var report = new SingleHTMLReport(source, fileSet,\n+                coverage, \"TITLE\", \"<h1>HEADER<\/h1>\", filter, filter);\n+        report.report(reportFile);\n+        System.out.println(\"Report: \" + reportFile.toString());\n+        List<String> content = Files.readAllLines(reportFile);\n+        assertTrue(content.contains(\"<title>TITLE<\/title>\"));\n+        assertTrue(content.contains(\"<h1>HEADER<\/h1>\"));\n+        assertTrue(content.stream().anyMatch(\"<tr><td><a href=\\\"#total\\\">total<\/a><\/td><td>1\/2<\/td><\/tr>\"::equals));\n+        assertTrue(content.stream().anyMatch(\"<a class=\\\"uncovered\\\">4: 4<\/a>\"::equals));\n+        assertTrue(content.stream().anyMatch(\"<a class=\\\"covered\\\">6: 6<\/a>\"::equals));\n+    }\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/view\/SingleFiletReportTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package openjdk.codetools.jcov.report.view;\n+\n+import openjdk.codetools.jcov.report.Coverage;\n+import openjdk.codetools.jcov.report.CoveredLineRange;\n+import openjdk.codetools.jcov.report.FileCoverage;\n+import openjdk.codetools.jcov.report.FileSet;\n+import openjdk.codetools.jcov.report.LineRange;\n+import openjdk.codetools.jcov.report.filter.SourceFilter;\n+import openjdk.codetools.jcov.report.source.SourceHierarchy;\n+import openjdk.codetools.jcov.report.source.SourcePath;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.testng.Assert.assertTrue;\n+\n+public class TextReportTest {\n+    static SourceHierarchy source;\n+    static FileCoverage coverage;\n+    static Path reportFile;\n+    @BeforeClass\n+    static void init() throws IOException {\n+        Path root = SingleFiletReportTest.createFiles();\n+        source = new SourcePath(root, root);\n+        coverage = new FileCoverage() {\n+            @Override\n+            public List<CoveredLineRange> ranges(String file) {\n+                return file.equals(SingleFiletReportTest.FILE_11) ? List.of(\n+                        new CoveredLineRange(1, 1, Coverage.COVERED),\n+                        new CoveredLineRange(3, 4, Coverage.UNCOVERED),\n+                        new CoveredLineRange(6, 8, Coverage.COVERED)\n+                ) : List.of();\n+            }\n+        };\n+        reportFile = Files.createTempFile(\"report\", \"txt\");\n+    }\n+    @Test\n+    void everyOdd() throws Exception {\n+        SourceFilter filter = file -> List.of(\n+                new LineRange(2, 2),\n+                new LineRange(4, 4),\n+                new LineRange(6, 6),\n+                new LineRange(8, 8)\n+        );\n+        var files = new FileSet(Set.of(SingleFiletReportTest.FILE_11, SingleFiletReportTest.FILE_12,\n+                SingleFiletReportTest.FILE_21, SingleFiletReportTest.FILE_22));\n+        var report = new TextReport(source, files, coverage, \"HEADER\", filter);\n+        report.report(reportFile);\n+        var content = Files.readAllLines(reportFile);\n+        assertTrue(content.contains(\"HEADER\"));\n+        assertTrue(content.stream().anyMatch(\"total 1\/2\"::equals));\n+        assertTrue(content.stream().anyMatch(\"4:-4\"::equals));\n+        assertTrue(content.stream().anyMatch(\"6:+6\"::equals));\n+    }\n+}\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/view\/TextReportTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}