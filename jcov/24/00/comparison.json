{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Agent.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.sun.tdk.jcov.instrument.ClassMorph;\n@@ -30,1 +29,2 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n+import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import com.sun.tdk.jcov.instrument.ClassMorph;\n-import com.sun.tdk.jcov.instrument.ClassMorph2;\n+import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n+import com.sun.tdk.jcov.instrument.asm.ClassMorph2;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import com.sun.tdk.jcov.instrument.ClassMorph;\n+import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/ProductInstr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import com.sun.tdk.jcov.instrument.ClassMorph;\n+import com.sun.tdk.jcov.instrument.asm.ClassMorph;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/TmplGen.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.OverriddenClassWriter;\n+import com.sun.tdk.jcov.instrument.asm.OverriddenClassWriter;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/insert\/AbstractUniversalInstrumenter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-    BasicBlock(int rootId, int startBCI) {\n+    public BasicBlock(int rootId, int startBCI) {\n@@ -79,1 +79,1 @@\n-    void add(DataBlock blk, LabelNode label) {\n+    public void add(DataBlock blk, LabelNode label) {\n@@ -91,1 +91,1 @@\n-    LabelNode getLabel(DataBlock blk) {\n+    public LabelNode getLabel(DataBlock blk) {\n@@ -99,1 +99,1 @@\n-    DataBlock fallenInto() {\n+    public DataBlock fallenInto() {\n@@ -107,1 +107,1 @@\n-    Collection<DataBlock> blocks() {\n+    public Collection<DataBlock> blocks() {\n@@ -111,1 +111,1 @@\n-    Set<Map.Entry<DataBlock, LabelNode>> blockLabelSet() {\n+    public Set<Map.Entry<DataBlock, LabelNode>> blockLabelSet() {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/BasicBlock.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-    static final String opcNames[] = {\n+    public static final String[] opcNames = {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Constants.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataAbstract.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    void addAnnotation(String anno) {\n+    public void addAnnotation(String anno) {\n@@ -60,1 +60,1 @@\n-    protected List<String> getAnnotations() {\n+    public List<String> getAnnotations() {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataAnnotated.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -165,1 +165,1 @@\n-    boolean isFallenInto() {\n+    public boolean isFallenInto() {\n@@ -173,1 +173,1 @@\n-    void xmlAttrs(XmlContext ctx) {\n+    protected void xmlAttrs(XmlContext ctx) {\n@@ -201,1 +201,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlock.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-    DataBlockCatch(int rootId) {\n+    public DataBlockCatch(int rootId) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockCatch.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    DataBlockFallThrough(int rootId) {\n+    public DataBlockFallThrough(int rootId) {\n@@ -49,1 +49,1 @@\n-    boolean isFallenInto() {\n+    public boolean isFallenInto() {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockFallThrough.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-    DataBlockMethEnter(int rootId) {\n+    public DataBlockMethEnter(int rootId) {\n@@ -50,1 +50,1 @@\n-    boolean isFallenInto() {\n+    public boolean isFallenInto() {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockMethEnter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-    void xmlAttrs(XmlContext ctx) {\n+    protected void xmlAttrs(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockTarget.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-    DataBlockTargetCase(int rootId, int value) {\n+    public DataBlockTargetCase(int rootId, int value) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockTargetCase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-    DataBlockTargetCond(int rootId, boolean side) {\n+    public DataBlockTargetCond(int rootId, boolean side) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockTargetCond.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    DataBlockTargetDefault(int rootId) {\n+    public DataBlockTargetDefault(int rootId) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockTargetDefault.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    DataBlockTargetGoto(int rootId) {\n+    public DataBlockTargetGoto(int rootId) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBlockTargetGoto.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    DataBranchSwitch(int rootId, int bciStart, int bciEnd, DataBlockTargetDefault blockDefault) {\n+    public DataBranchSwitch(int rootId, int bciStart, int bciEnd, DataBlockTargetDefault blockDefault) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataBranchSwitch.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -604,1 +604,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-    void xmlGen(XmlContext cxt) {\n+    public void xmlGen(XmlContext cxt) {\n@@ -67,1 +67,1 @@\n-    void xmlAttrs(XmlContext ctx) {\n+    protected void xmlAttrs(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataExitSimple.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.asm.InvokeMethodAdapter;\n@@ -373,1 +374,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataField.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethod.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-            void xmlAttrs(XmlContext ctx) {\n+            protected void xmlAttrs(XmlContext ctx) {\n@@ -139,1 +139,1 @@\n-            void xmlAttrs(XmlContext ctx) {\n+            protected void xmlAttrs(XmlContext ctx) {\n@@ -174,1 +174,1 @@\n-            void xmlAttrs(XmlContext ctx) {\n+            protected void xmlAttrs(XmlContext ctx) {\n@@ -252,1 +252,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n@@ -320,1 +320,1 @@\n-            void xmlAttrs(XmlContext ctx) {\n+            protected void xmlAttrs(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethodEntryOnly.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.sun.tdk.jcov.instrument.asm.InvokeMethodAdapter;\n@@ -127,1 +128,1 @@\n-            void xmlAttrs(XmlContext ctx) {\n+            protected void xmlAttrs(XmlContext ctx) {\n@@ -191,1 +192,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n@@ -278,1 +279,1 @@\n-            void xmlAttrs(XmlContext ctx) {\n+            protected void xmlAttrs(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethodInvoked.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethodWithBlocks.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationParams.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument;\n-\n-import org.objectweb.asm.tree.*;\n-\n-import org.objectweb.asm.MethodVisitor;\n-import static org.objectweb.asm.Opcodes.*;\n-\n-\/**\n- * @author Dmitry Fazunenko\n- * @author Alexey Fedorchenko\n- *\/\n-class Instrumenter {\n-\n-    private static InsnList instrumentation(int id, boolean detectInternal) {\n-        return instrumentation(id, 0, 0, detectInternal);\n-    }\n-\n-    private static InsnList instrumentation(int id, int hash, int fullHash, boolean detectInternal) {\n-        InsnList il = new InsnList();\n-        if (hash != 0 || fullHash != 0) { \/\/ caller filter ON (hash & fullHash == 0 otherwise)\n-            il.add(new LdcInsnNode(id));\n-            il.add(new LdcInsnNode(hash));\n-            il.add(new LdcInsnNode(fullHash));\n-            il.add(new MethodInsnNode(INVOKESTATIC,\n-                    \"com\/sun\/tdk\/jcov\/runtime\/CollectDetect\", \"hit\", \"(III)V\", false));\n-        } else if (detectInternal) { \/\/ agent (hardcoded by default) or loaded, false otherwise\n-            il.add(new LdcInsnNode(id));\n-            il.add(new MethodInsnNode(INVOKESTATIC,\n-                    \"com\/sun\/tdk\/jcov\/runtime\/CollectDetect\", \"hit\", \"(I)V\", false));\n-        } else { \/\/ static\n-            il.add(new LdcInsnNode(id));\n-            il.add(new MethodInsnNode(INVOKESTATIC,\n-                    \"com\/sun\/tdk\/jcov\/runtime\/Collect\", \"hit\", \"(I)V\", false));\n-        }\n-        return il;\n-    }\n-\n-    static InsnList instrumentation(DataBlock block, boolean detectInternal) {\n-        return instrumentation(block.getId(), detectInternal);\n-    }\n-\n-    static InsnList instrumentation(SimpleBasicBlock block, boolean detectInternal) {\n-        return instrumentation(block.getId(), detectInternal);\n-    }\n-\n-    static void visitInstrumentation(final MethodVisitor mv, int id, int hash, int fullHash, boolean detectInternal) {\n-        instrumentation(id, hash, fullHash, detectInternal).accept(mv);\n-    }\n-    \/*\n-     static InsnList insertSavePoint() {\n-     InsnList il = new InsnList();\n-     il.add(new MethodInsnNode(INVOKESTATIC, \"com\/sun\/tdk\/jcov\/runtime\/Collect\",\"saveResults\", \"(V)V\"));\n-     return il;\n-     }\n-     *\/\n-}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Instrumenter.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-    void xmlAttrs(XmlContext ctx) {\n+    protected void xmlAttrs(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/LocationAbstract.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    LocationConcrete(int rootId, int startBCI, int endBCI) {\n+    protected LocationConcrete(int rootId, int startBCI, int endBCI) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/LocationConcrete.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/SimpleBasicBlock.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ASMUtils.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,1 +27,0 @@\n-import com.sun.tdk.jcov.instrument.CharacterRangeTableAttribute.CRTEntry;\n@@ -32,0 +31,11 @@\n+import com.sun.tdk.jcov.instrument.DataBlock;\n+import com.sun.tdk.jcov.instrument.DataBlockFallThrough;\n+import com.sun.tdk.jcov.instrument.DataBlockTargetDefault;\n+import com.sun.tdk.jcov.instrument.DataBranchCond;\n+import com.sun.tdk.jcov.instrument.DataBranchGoto;\n+import com.sun.tdk.jcov.instrument.DataBranchSwitch;\n+import com.sun.tdk.jcov.instrument.DataExit;\n+import com.sun.tdk.jcov.instrument.DataExitSimple;\n+import com.sun.tdk.jcov.instrument.DataMethodWithBlocks;\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.SimpleBasicBlock;\n@@ -62,1 +72,1 @@\n-            bb = new SimpleBasicBlock(method.rootId, startBCI);\n+            bb = new SimpleBasicBlock(method.rootId(), startBCI);\n@@ -140,1 +150,1 @@\n-                        DataBranchCond branch = new DataBranchCond(method.rootId, bci, bciFalse - 1);\n+                        DataBranchCond branch = new DataBranchCond(method.rootId(), bci, bciFalse - 1);\n@@ -177,1 +187,1 @@\n-                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId, bci, bciEnd, blockDefault);\n+                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId(), bci, bciEnd, blockDefault);\n@@ -214,1 +224,1 @@\n-                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId, bci, bciEnd, blockDefault);\n+                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId(), bci, bciEnd, blockDefault);\n@@ -242,1 +252,1 @@\n-                        DataBranchGoto branch = new DataBranchGoto(method.rootId, bci, bciEnd);\n+                        DataBranchGoto branch = new DataBranchGoto(method.rootId(), bci, bciEnd);\n@@ -266,1 +276,1 @@\n-                        DataExit exit = new DataExitSimple(method.rootId, bci, bciNext - 1, insn.getOpcode());\n+                        DataExit exit = new DataExitSimple(method.rootId(), bci, bciNext - 1, insn.getOpcode());\n@@ -321,1 +331,1 @@\n-                        if ((entry.flags & CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n+                        if ((entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n@@ -331,1 +341,1 @@\n-                        if (entry.endBCI() == index && (entry.flags & CRTEntry.CRT_FLOW_TARGET) != 0) {\n+                        if (entry.endBCI() == index && (entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_FLOW_TARGET) != 0) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BlockCodeMethodAdapter.java","additions":21,"deletions":11,"binary":false,"changes":32,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/BlockCodeMethodAdapter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.CharacterRangeTableAttribute.CRTEntry;\n+import com.sun.tdk.jcov.instrument.BasicBlock;\n@@ -32,0 +32,17 @@\n+import com.sun.tdk.jcov.instrument.Constants;\n+import com.sun.tdk.jcov.instrument.DataBlock;\n+import com.sun.tdk.jcov.instrument.DataBlockCatch;\n+import com.sun.tdk.jcov.instrument.DataBlockFallThrough;\n+import com.sun.tdk.jcov.instrument.DataBlockMethEnter;\n+import com.sun.tdk.jcov.instrument.DataBlockTarget;\n+import com.sun.tdk.jcov.instrument.DataBlockTargetCase;\n+import com.sun.tdk.jcov.instrument.DataBlockTargetCond;\n+import com.sun.tdk.jcov.instrument.DataBlockTargetDefault;\n+import com.sun.tdk.jcov.instrument.DataBlockTargetGoto;\n+import com.sun.tdk.jcov.instrument.DataBranchCond;\n+import com.sun.tdk.jcov.instrument.DataBranchGoto;\n+import com.sun.tdk.jcov.instrument.DataBranchSwitch;\n+import com.sun.tdk.jcov.instrument.DataExit;\n+import com.sun.tdk.jcov.instrument.DataExitSimple;\n+import com.sun.tdk.jcov.instrument.DataMethodWithBlocks;\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n@@ -52,1 +69,1 @@\n-            final DataMethodWithBlocks method, InstrumentationParams params) {\n+                                   final DataMethodWithBlocks method, InstrumentationParams params) {\n@@ -65,1 +82,1 @@\n-            bb = new BasicBlock(method.rootId, startBCI);\n+            bb = new BasicBlock(method.rootId(), startBCI);\n@@ -150,1 +167,1 @@\n-                        DataBranchCond branch = new DataBranchCond(method.rootId, bci, bciFalse - 1);\n+                        DataBranchCond branch = new DataBranchCond(method.rootId(), bci, bciFalse - 1);\n@@ -187,1 +204,1 @@\n-                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId, bci, bciEnd, blockDefault);\n+                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId(), bci, bciEnd, blockDefault);\n@@ -224,1 +241,1 @@\n-                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId, bci, bciEnd, blockDefault);\n+                        DataBranchSwitch branch = new DataBranchSwitch(method.rootId(), bci, bciEnd, blockDefault);\n@@ -252,1 +269,1 @@\n-                        DataBranchGoto branch = new DataBranchGoto(method.rootId, bci, bciEnd);\n+                        DataBranchGoto branch = new DataBranchGoto(method.rootId(), bci, bciEnd);\n@@ -276,1 +293,1 @@\n-                        DataExit exit = new DataExitSimple(method.rootId, bci, bciNext - 1, insn.getOpcode());\n+                        DataExit exit = new DataExitSimple(method.rootId(), bci, bciNext - 1, insn.getOpcode());\n@@ -335,1 +352,1 @@\n-                        if ((entry.flags & CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n+                        if ((entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_STATEMENT) != 0 \/*& newBlock*\/) {\n@@ -345,1 +362,1 @@\n-                        if (entry.endBCI() == index && (entry.flags & CRTEntry.CRT_FLOW_TARGET) != 0) {\n+                        if (entry.endBCI() == index && (entry.flags & CharacterRangeTableAttribute.CRTEntry.CRT_FLOW_TARGET) != 0) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BranchCodeMethodAdapter.java","additions":29,"deletions":12,"binary":false,"changes":41,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/BranchCodeMethodAdapter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -28,0 +28,4 @@\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.instrument.LocationConcrete;\n+import com.sun.tdk.jcov.instrument.XmlContext;\n+import com.sun.tdk.jcov.instrument.XmlNames;\n@@ -87,1 +91,1 @@\n-        void xmlAttrs(XmlContext ctx) {\n+        public void xmlAttrs(XmlContext ctx) {\n@@ -219,1 +223,1 @@\n-    void xmlGen(XmlContext ctx) {\n+    public void xmlGen(XmlContext ctx) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/CharacterRangeTableAttribute.java","additions":8,"deletions":4,"binary":false,"changes":12,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/CharacterRangeTableAttribute.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -28,0 +28,13 @@\n+import com.sun.tdk.jcov.instrument.BasicBlock;\n+import com.sun.tdk.jcov.instrument.DataBlock;\n+import com.sun.tdk.jcov.instrument.DataClass;\n+import com.sun.tdk.jcov.instrument.DataField;\n+import com.sun.tdk.jcov.instrument.DataMethod;\n+import com.sun.tdk.jcov.instrument.DataMethodEntryOnly;\n+import com.sun.tdk.jcov.instrument.DataMethodInvoked;\n+import com.sun.tdk.jcov.instrument.DataMethodWithBlocks;\n+import com.sun.tdk.jcov.instrument.DataPackage;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.instrument.InstrumentationOptions;\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.XmlNames;\n@@ -227,1 +240,1 @@\n-            moduleName = \"module \"+XmlNames.NO_MODULE;\n+            moduleName = \"module \"+ XmlNames.NO_MODULE;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph.java","additions":15,"deletions":2,"binary":false,"changes":17,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ClassMorph.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,2 @@\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph2.java","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ClassMorph2.java","status":"renamed"},{"patch":"@@ -25,2 +25,10 @@\n-package com.sun.tdk.jcov.instrument;\n-\n+package com.sun.tdk.jcov.instrument.asm;\n+\n+import com.sun.tdk.jcov.instrument.DataClass;\n+import com.sun.tdk.jcov.instrument.DataField;\n+import com.sun.tdk.jcov.instrument.DataMethod;\n+import com.sun.tdk.jcov.instrument.DataMethodEntryOnly;\n+import com.sun.tdk.jcov.instrument.DataMethodInvoked;\n+import com.sun.tdk.jcov.instrument.DataMethodWithBlocks;\n+import com.sun.tdk.jcov.instrument.InstrumentationOptions;\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/DeferringMethodClassAdapter.java","additions":10,"deletions":2,"binary":false,"changes":12,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DeferringMethodClassAdapter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,2 @@\n+import com.sun.tdk.jcov.instrument.DataMethodEntryOnly;\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/EntryCodeMethodAdapter.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/EntryCodeMethodAdapter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.DataField;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/FieldAnnotationVisitor.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/FieldAnnotationVisitor.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ForkingMethodAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ForkingMethodAdapter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InstrumentationPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationPlugin.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InstrumentedAttributeClassAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentedAttributeClassAdapter.java","status":"renamed"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.asm;\n+\n+import com.sun.tdk.jcov.instrument.DataBlock;\n+import com.sun.tdk.jcov.instrument.SimpleBasicBlock;\n+import org.objectweb.asm.tree.*;\n+\n+import org.objectweb.asm.MethodVisitor;\n+import static org.objectweb.asm.Opcodes.*;\n+\n+\/**\n+ * @author Dmitry Fazunenko\n+ * @author Alexey Fedorchenko\n+ *\/\n+class Instrumenter {\n+\n+    private static InsnList instrumentation(int id, boolean detectInternal) {\n+        return instrumentation(id, 0, 0, detectInternal);\n+    }\n+\n+    private static InsnList instrumentation(int id, int hash, int fullHash, boolean detectInternal) {\n+        InsnList il = new InsnList();\n+        if (hash != 0 || fullHash != 0) { \/\/ caller filter ON (hash & fullHash == 0 otherwise)\n+            il.add(new LdcInsnNode(id));\n+            il.add(new LdcInsnNode(hash));\n+            il.add(new LdcInsnNode(fullHash));\n+            il.add(new MethodInsnNode(INVOKESTATIC,\n+                    \"com\/sun\/tdk\/jcov\/runtime\/CollectDetect\", \"hit\", \"(III)V\", false));\n+        } else if (detectInternal) { \/\/ agent (hardcoded by default) or loaded, false otherwise\n+            il.add(new LdcInsnNode(id));\n+            il.add(new MethodInsnNode(INVOKESTATIC,\n+                    \"com\/sun\/tdk\/jcov\/runtime\/CollectDetect\", \"hit\", \"(I)V\", false));\n+        } else { \/\/ static\n+            il.add(new LdcInsnNode(id));\n+            il.add(new MethodInsnNode(INVOKESTATIC,\n+                    \"com\/sun\/tdk\/jcov\/runtime\/Collect\", \"hit\", \"(I)V\", false));\n+        }\n+        return il;\n+    }\n+\n+    public static InsnList instrumentation(DataBlock block, boolean detectInternal) {\n+        return instrumentation(block.getId(), detectInternal);\n+    }\n+\n+    public static InsnList instrumentation(SimpleBasicBlock block, boolean detectInternal) {\n+        return instrumentation(block.getId(), detectInternal);\n+    }\n+\n+    static void visitInstrumentation(final MethodVisitor mv, int id, int hash, int fullHash, boolean detectInternal) {\n+        instrumentation(id, hash, fullHash, detectInternal).accept(mv);\n+    }\n+    \/*\n+     static InsnList insertSavePoint() {\n+     InsnList il = new InsnList();\n+     il.add(new MethodInsnNode(INVOKESTATIC, \"com\/sun\/tdk\/jcov\/runtime\/Collect\",\"saveResults\", \"(V)V\"));\n+     return il;\n+     }\n+     *\/\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/Instrumenter.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InvokeClassAdapter.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InvokeClassAdapter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -32,0 +32,2 @@\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InvokeMethodAdapter.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InvokeMethodAdapter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.DataMethod;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/MethodAnnotationAdapter.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/MethodAnnotationAdapter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,3 @@\n+import com.sun.tdk.jcov.instrument.DataMethodEntryOnly;\n+import com.sun.tdk.jcov.instrument.InstrumentationOptions;\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n@@ -182,1 +185,2 @@\n-        instructions.add(new MethodInsnNode(invokeOp, dataMethod.getParent().getFullname(), InstrumentationOptions.nativePrefix + dataMethod.getName(), dataMethod.getVmSignature()));\n+        instructions.add(new MethodInsnNode(invokeOp, dataMethod.getParent().getFullname(),\n+                InstrumentationOptions.nativePrefix + dataMethod.getName(), dataMethod.getVmSignature()));\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/NativeWrappingMethodAdapter.java","additions":7,"deletions":3,"binary":false,"changes":10,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/NativeWrappingMethodAdapter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetLabel.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/OffsetLabel.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetLabelingClassReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/OffsetLabelingClassReader.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.DataMethodWithBlocks;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetRecordingMethodAdapter.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/OffsetRecordingMethodAdapter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021,  Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022  Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OverriddenClassWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/OverriddenClassWriter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/SavePointsMethodAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/SavePointsMethodAdapter.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.asm;\n@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/StaticInvokeMethodAdapter.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/StaticInvokeMethodAdapter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import com.sun.tdk.jcov.instrument.CharacterRangeTableAttribute;\n-import com.sun.tdk.jcov.instrument.CharacterRangeTableAttribute.CRTEntry;\n+import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute;\n+import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute.CRTEntry;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/reader\/CharacterRangeTableAttributeStAX.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import com.sun.tdk.jcov.instrument.CharacterRangeTableAttribute;\n+import com.sun.tdk.jcov.instrument.asm.CharacterRangeTableAttribute;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/reader\/DataMethodWithBlocksStAX.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/FieldsPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.InstrumentationPlugin;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/jreinstr\/TestPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}