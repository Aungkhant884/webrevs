{"files":[{"patch":"@@ -1,207 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tdk.jcov.instrument;\n-\n-import java.io.OutputStream;\n-import java.lang.reflect.Method;\n-import java.math.BigDecimal;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-\n-import com.sun.tdk.jcov.Instr;\n-import com.sun.tdk.jcov.io.Reader;\n-import com.sun.tdk.jcov.runtime.Collect;\n-import org.testng.Assert;\n-import org.testng.annotations.Test;\n-\n-public class IntrumentNestHostTest {\n-    @Test\n-    public void testNestHostMembers() throws Exception {\n-        Path temp = Files.createTempDirectory(\"jcov\");\n-        Path template = temp.resolve(\"template.xml\");\n-        Path classes = temp.resolve(\"classes\");\n-        Files.createDirectories(classes);\n-        try (OutputStream out = Files.newOutputStream(classes.resolve(\"Simple.class\"))) {\n-            out.write(SIMPLE_CLASS);\n-        }\n-        try (OutputStream out = Files.newOutputStream(classes.resolve(\"Simple$I.class\"))) {\n-            out.write(SIMPLE$I_CLASS);\n-        }\n-        Path outDir = temp.resolve(\"out\");\n-        Files.createDirectories(outDir);\n-        Instr instr = new Instr();\n-        instr.setTemplate(template.toFile().getAbsolutePath());\n-        instr.instrumentFile(classes.toFile(), outDir.toFile(), null);\n-        instr.finishWork();\n-        Assert.assertNotEquals(Files.size(outDir.resolve(\"Simple.class\")),\n-                               Files.size(classes.resolve(\"Simple.class\")),\n-                               \"File size should differ.\");\n-        Assert.assertNotEquals(Files.size(outDir.resolve(\"Simple$I.class\")),\n-                               Files.size(classes.resolve(\"Simple$I.class\")),\n-                               \"File size should differ.\");\n-        Collect.enableCounts(); \/\/reset\n-        if (new BigDecimal(System.getProperty(\"java.class.version\")).compareTo(new BigDecimal(\"55.0\")) >= 0) {\n-            \/\/run the code, and check coverage outcome:\n-            ClassLoader cl = new URLClassLoader(new URL[] {outDir.toUri().toURL()});\n-            Class<?> simple = Class.forName(\"Simple\", false, cl);\n-            Method run = simple.getMethod(\"run\");\n-            run.invoke(null);\n-            DataRoot root = Reader.readXML(template.toFile().getAbsolutePath(), true, null);\n-            int blocks = 0;\n-            for (DataClass dc : root.getClasses()) {\n-                for (DataMethod dm : dc.getMethods()) {\n-                    if (\"<init>\".equals(dm.name))\n-                        continue;\n-                    for (DataBlock db : dm.getBlocks()) {\n-                        Assert.assertEquals(Collect.countFor(db.slot), 1);\n-                        blocks++;\n-                    }\n-                }\n-            }\n-            Assert.assertEquals(blocks, 3);\n-        } else {\n-            System.err.println(\"Warning: skipping run of the test sample, as the runtime JDK cannot handle classfiles version 55.\");\n-        }\n-    }\n-\n-    \/\/classfiles based on:\n-    \/\/public class Simple {\n-    \/\/    public static void run() {\n-    \/\/        I.run();\n-    \/\/    }\n-    \/\/    private static class I {\n-    \/\/        public static void run() {\n-    \/\/            d();\n-    \/\/        }\n-    \/\/        private static void d() {}\n-    \/\/    }\n-    \/\/}\n-    private static final byte[] SIMPLE_CLASS = new byte[] {\n-        (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x37, (byte) 0x00, (byte) 0x15, (byte) 0x0A, (byte) 0x00, (byte) 0x04, (byte) 0x00,\n-        (byte) 0x10, (byte) 0x0A, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x11, (byte) 0x07,\n-        (byte) 0x00, (byte) 0x12, (byte) 0x07, (byte) 0x00, (byte) 0x13, (byte) 0x07, (byte) 0x00,\n-        (byte) 0x14, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x49, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x0C, (byte) 0x49, (byte) 0x6E, (byte) 0x6E, (byte) 0x65, (byte) 0x72, (byte) 0x43,\n-        (byte) 0x6C, (byte) 0x61, (byte) 0x73, (byte) 0x73, (byte) 0x65, (byte) 0x73, (byte) 0x01,\n-        (byte) 0x00, (byte) 0x06, (byte) 0x3C, (byte) 0x69, (byte) 0x6E, (byte) 0x69, (byte) 0x74,\n-        (byte) 0x3E, (byte) 0x01, (byte) 0x00, (byte) 0x03, (byte) 0x28, (byte) 0x29, (byte) 0x56,\n-        (byte) 0x01, (byte) 0x00, (byte) 0x04, (byte) 0x43, (byte) 0x6F, (byte) 0x64, (byte) 0x65,\n-        (byte) 0x01, (byte) 0x00, (byte) 0x0F, (byte) 0x4C, (byte) 0x69, (byte) 0x6E, (byte) 0x65,\n-        (byte) 0x4E, (byte) 0x75, (byte) 0x6D, (byte) 0x62, (byte) 0x65, (byte) 0x72, (byte) 0x54,\n-        (byte) 0x61, (byte) 0x62, (byte) 0x6C, (byte) 0x65, (byte) 0x01, (byte) 0x00, (byte) 0x03,\n-        (byte) 0x72, (byte) 0x75, (byte) 0x6E, (byte) 0x01, (byte) 0x00, (byte) 0x0A, (byte) 0x53,\n-        (byte) 0x6F, (byte) 0x75, (byte) 0x72, (byte) 0x63, (byte) 0x65, (byte) 0x46, (byte) 0x69,\n-        (byte) 0x6C, (byte) 0x65, (byte) 0x01, (byte) 0x00, (byte) 0x0B, (byte) 0x53, (byte) 0x69,\n-        (byte) 0x6D, (byte) 0x70, (byte) 0x6C, (byte) 0x65, (byte) 0x2E, (byte) 0x6A, (byte) 0x61,\n-        (byte) 0x76, (byte) 0x61, (byte) 0x01, (byte) 0x00, (byte) 0x0B, (byte) 0x4E, (byte) 0x65,\n-        (byte) 0x73, (byte) 0x74, (byte) 0x4D, (byte) 0x65, (byte) 0x6D, (byte) 0x62, (byte) 0x65,\n-        (byte) 0x72, (byte) 0x73, (byte) 0x0C, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x09,\n-        (byte) 0x0C, (byte) 0x00, (byte) 0x0C, (byte) 0x00, (byte) 0x09, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x06, (byte) 0x53, (byte) 0x69, (byte) 0x6D, (byte) 0x70, (byte) 0x6C, (byte) 0x65,\n-        (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x6A, (byte) 0x61, (byte) 0x76, (byte) 0x61,\n-        (byte) 0x2F, (byte) 0x6C, (byte) 0x61, (byte) 0x6E, (byte) 0x67, (byte) 0x2F, (byte) 0x4F,\n-        (byte) 0x62, (byte) 0x6A, (byte) 0x65, (byte) 0x63, (byte) 0x74, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x08, (byte) 0x53, (byte) 0x69, (byte) 0x6D, (byte) 0x70, (byte) 0x6C, (byte) 0x65,\n-        (byte) 0x24, (byte) 0x49, (byte) 0x00, (byte) 0x21, (byte) 0x00, (byte) 0x03, (byte) 0x00,\n-        (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02,\n-        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x09, (byte) 0x00,\n-        (byte) 0x01, (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x1D,\n-        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x05, (byte) 0x2A, (byte) 0xB7, (byte) 0x00, (byte) 0x01, (byte) 0xB1, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x0B, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x01, (byte) 0x00, (byte) 0x09, (byte) 0x00, (byte) 0x0C, (byte) 0x00, (byte) 0x09,\n-        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x04, (byte) 0xB8, (byte) 0x00, (byte) 0x02, (byte) 0xB1, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x0B, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x03, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x03,\n-        (byte) 0x00, (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00,\n-        (byte) 0x0E, (byte) 0x00, (byte) 0x0F, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x04,\n-        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x07, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x05,\n-        (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x0A\n-    };\n-\n-    private static final byte[] SIMPLE$I_CLASS = new byte[] {\n-        (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x37, (byte) 0x00, (byte) 0x16, (byte) 0x0A, (byte) 0x00, (byte) 0x04, (byte) 0x00,\n-        (byte) 0x0F, (byte) 0x0A, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x10, (byte) 0x07,\n-        (byte) 0x00, (byte) 0x11, (byte) 0x07, (byte) 0x00, (byte) 0x14, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x06, (byte) 0x3C, (byte) 0x69, (byte) 0x6E, (byte) 0x69, (byte) 0x74, (byte) 0x3E,\n-        (byte) 0x01, (byte) 0x00, (byte) 0x03, (byte) 0x28, (byte) 0x29, (byte) 0x56, (byte) 0x01,\n-        (byte) 0x00, (byte) 0x04, (byte) 0x43, (byte) 0x6F, (byte) 0x64, (byte) 0x65, (byte) 0x01,\n-        (byte) 0x00, (byte) 0x0F, (byte) 0x4C, (byte) 0x69, (byte) 0x6E, (byte) 0x65, (byte) 0x4E,\n-        (byte) 0x75, (byte) 0x6D, (byte) 0x62, (byte) 0x65, (byte) 0x72, (byte) 0x54, (byte) 0x61,\n-        (byte) 0x62, (byte) 0x6C, (byte) 0x65, (byte) 0x01, (byte) 0x00, (byte) 0x03, (byte) 0x72,\n-        (byte) 0x75, (byte) 0x6E, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x64, (byte) 0x01,\n-        (byte) 0x00, (byte) 0x0A, (byte) 0x53, (byte) 0x6F, (byte) 0x75, (byte) 0x72, (byte) 0x63,\n-        (byte) 0x65, (byte) 0x46, (byte) 0x69, (byte) 0x6C, (byte) 0x65, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x0B, (byte) 0x53, (byte) 0x69, (byte) 0x6D, (byte) 0x70, (byte) 0x6C, (byte) 0x65,\n-        (byte) 0x2E, (byte) 0x6A, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x08, (byte) 0x4E, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x48, (byte) 0x6F,\n-        (byte) 0x73, (byte) 0x74, (byte) 0x07, (byte) 0x00, (byte) 0x15, (byte) 0x0C, (byte) 0x00,\n-        (byte) 0x05, (byte) 0x00, (byte) 0x06, (byte) 0x0C, (byte) 0x00, (byte) 0x0A, (byte) 0x00,\n-        (byte) 0x06, (byte) 0x01, (byte) 0x00, (byte) 0x08, (byte) 0x53, (byte) 0x69, (byte) 0x6D,\n-        (byte) 0x70, (byte) 0x6C, (byte) 0x65, (byte) 0x24, (byte) 0x49, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x01, (byte) 0x49, (byte) 0x01, (byte) 0x00, (byte) 0x0C, (byte) 0x49, (byte) 0x6E,\n-        (byte) 0x6E, (byte) 0x65, (byte) 0x72, (byte) 0x43, (byte) 0x6C, (byte) 0x61, (byte) 0x73,\n-        (byte) 0x73, (byte) 0x65, (byte) 0x73, (byte) 0x01, (byte) 0x00, (byte) 0x10, (byte) 0x6A,\n-        (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2F, (byte) 0x6C, (byte) 0x61, (byte) 0x6E,\n-        (byte) 0x67, (byte) 0x2F, (byte) 0x4F, (byte) 0x62, (byte) 0x6A, (byte) 0x65, (byte) 0x63,\n-        (byte) 0x74, (byte) 0x01, (byte) 0x00, (byte) 0x06, (byte) 0x53, (byte) 0x69, (byte) 0x6D,\n-        (byte) 0x70, (byte) 0x6C, (byte) 0x65, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x03,\n-        (byte) 0x00, (byte) 0x04, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x03, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x06,\n-        (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x1D, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x05, (byte) 0x2A, (byte) 0xB7, (byte) 0x00, (byte) 0x01, (byte) 0xB1,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x08, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x05, (byte) 0x00, (byte) 0x09, (byte) 0x00, (byte) 0x09, (byte) 0x00,\n-        (byte) 0x06, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x04, (byte) 0xB8, (byte) 0x00, (byte) 0x02, (byte) 0xB1,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x08, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x08, (byte) 0x00,\n-        (byte) 0x0A, (byte) 0x00, (byte) 0x0A, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x01,\n-        (byte) 0x00, (byte) 0x07, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x19, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,\n-        (byte) 0xB1, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x08,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x06, (byte) 0x00, (byte) 0x01, (byte) 0x00,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x09, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x0B,\n-        (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x0C, (byte) 0x00,\n-        (byte) 0x0D, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x0E,\n-        (byte) 0x00, (byte) 0x13, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x0A, (byte) 0x00,\n-        (byte) 0x01, (byte) 0x00, (byte) 0x03, (byte) 0x00, (byte) 0x0E, (byte) 0x00, (byte) 0x12,\n-        (byte) 0x00, (byte) 0x0A\n-    };\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/IntrumentNestHostTest.java","additions":0,"deletions":207,"binary":false,"changes":207,"status":"deleted"}]}