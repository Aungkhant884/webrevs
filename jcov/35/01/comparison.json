{"files":[{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMInstrumentationPlugin.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMInstrumentationPlugin.java","status":"renamed"},{"patch":"@@ -129,0 +129,13 @@\n+\n+    public static class ASMModfiersFactory implements ModifiersFactory {\n+\n+        @Override\n+        public Modifiers parse(String[] flags) {\n+            return ASMModifiers.parse(flags);\n+        }\n+\n+        @Override\n+        public Modifiers parse(int flags) {\n+            return new ASMModifiers(flags);\n+        }\n+    }\n","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMModifiers.java","additions":13,"deletions":0,"binary":false,"changes":13,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMModifiers.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMUtils.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMUtils.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BlockCodeMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BlockCodeMethodAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BranchCodeMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/BranchCodeMethodAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/CharacterRangeTableAttribute.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/CharacterRangeTableAttribute.java","status":"renamed"},{"patch":"@@ -45,1 +45,0 @@\n-import com.sun.tdk.jcov.tools.OptionDescr;\n","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph.java","additions":0,"deletions":1,"binary":false,"changes":1,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph2.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ClassMorph2.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/DeferringMethodClassAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/DeferringMethodClassAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/EntryCodeMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/EntryCodeMethodAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/FieldAnnotationVisitor.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/FieldAnnotationVisitor.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ForkingMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ForkingMethodAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InstrumentedAttributeClassAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InstrumentedAttributeClassAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/Instrumenter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/Instrumenter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InvokeClassAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InvokeClassAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InvokeMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/InvokeMethodAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/MethodAnnotationAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/MethodAnnotationAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/NativeWrappingMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/NativeWrappingMethodAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetLabel.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetLabel.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetLabelingClassReader.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetLabelingClassReader.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetRecordingMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OffsetRecordingMethodAdapter.java","status":"renamed"},{"patch":"@@ -27,2 +27,0 @@\n-import com.sun.tdk.jcov.JREInstr;\n-import com.sun.tdk.jcov.runtime.PropertyFinder;\n","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OverriddenClassWriter.java","additions":0,"deletions":2,"binary":false,"changes":2,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/OverriddenClassWriter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/SavePointsMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/SavePointsMethodAdapter.java","status":"renamed"},{"patch":"","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/StaticInvokeMethodAdapter.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/StaticInvokeMethodAdapter.java","status":"renamed"},{"patch":"@@ -0,0 +1,15 @@\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.Modifiers;\n+import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n+\n+module jcov.asm {\n+    exports com.sun.tdk.jcov.instrument.asm;\n+    requires jcov;\n+    requires org.objectweb.asm;\n+    requires org.objectweb.asm.util;\n+    requires org.objectweb.asm.tree;\n+    requires java.logging;\n+    provides InstrumentationPlugin with ASMInstrumentationPlugin;\n+    provides Modifiers.ModifiersFactory with ASMModifiers.ASMModfiersFactory;\n+}\n\\ No newline at end of file\n","filename":"asm\/classes\/module-info.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -47,1 +47,1 @@\n-# path to jcov test sources\n+asm.src.dir = ..\/asm\/classes\n","filename":"build\/build.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+    <property name=\"asm.libs\" location=\"${asm.jar}\/..\"\/>\n+    <property name=\"jcov.modulepath\" value=\"${asm.libs}\"\/>\n@@ -43,0 +45,1 @@\n+    <property name=\"all.classes\" location=\"${tmp.dir}\/all_classes\"\/>\n@@ -44,0 +47,1 @@\n+    <property name=\"jcov.asm.classes\" location=\"${tmp.dir}\/jcov_asm_classes\"\/>\n@@ -57,0 +61,6 @@\n+        <include name=\"module-info.*\"\/>\n+    <\/patternset>\n+\n+    <patternset id=\"jcov.asm.files\">\n+        <include name=\"com\/sun\/tdk\/jcov\/instrument\/asm\/**\"\/>\n+        <include name=\"module-info.*\"\/>\n@@ -114,0 +124,1 @@\n+        <mkdir dir=\"${all.classes}\"\/>\n@@ -115,0 +126,1 @@\n+        <mkdir dir=\"${jcov.asm.classes}\"\/>\n@@ -164,1 +176,1 @@\n-    <target name=\"compile\"  depends=\"prepare, build-date\"\n+    <target name=\"compile-jcov\"  depends=\"prepare, build-date\"\n@@ -167,1 +179,1 @@\n-        <javac includeantruntime=\"false\" encoding=\"iso-8859-1\" debug=\"true\" target=\"8\" source=\"8\"\n+        <javac includeantruntime=\"false\" encoding=\"iso-8859-1\" debug=\"true\"\n@@ -173,1 +185,1 @@\n-        <javac includeantruntime=\"true\" encoding=\"iso-8859-1\" debug=\"true\" target=\"8\" source=\"8\"\n+        <javac includeantruntime=\"true\" encoding=\"iso-8859-1\" debug=\"true\"\n@@ -176,1 +188,5 @@\n-               classpath=\"${jcov.classpath}\">\n+               modulepath=\"${javatestjar}:${ant.home}\/lib\/ant.jar\">\n+            <compilerarg value=\"--add-modules\"\/>\n+            <compilerarg value=\"jdk.jdeps\"\/>\n+            <compilerarg value=\"--add-exports\"\/>\n+            <compilerarg value=\"jdk.jdeps\/com.sun.tools.javap=jcov\"\/>\n@@ -183,0 +199,21 @@\n+        <copy todir=\"${all.classes}\">\n+            <fileset dir=\"${jcov.classes}\">\n+                <exclude name=\"module-info.class\"\/>\n+            <\/fileset>\n+        <\/copy>\n+        <jmod classpath=\"${jcov.classes}\" destfile=\"${build.dir}\/jcov.jmod\"\/>\n+    <\/target>\n+\n+    <target name=\"compile-asm\"  depends=\"compile-jcov\" if=\"with.asm\">\n+        <javac encoding=\"iso-8859-1\" debug=\"true\"\n+               srcdir=\"${asm.src.dir}\"\n+               destdir=\"${jcov.asm.classes}\"\n+               modulepath=\"${jcov.classes}:${jcov.modulepath}:${javatestjar}:${ant.home}\/lib\/ant.jar\">\n+            <patternset refid=\"jcov.asm.files\"\/>\n+        <\/javac>\n+        <copy todir=\"${all.classes}\">\n+            <fileset dir=\"${jcov.asm.classes}\">\n+                <exclude name=\"module-info.class\"\/>\n+            <\/fileset>\n+        <\/copy>\n+        <jmod classpath=\"${jcov.asm.classes}\" destfile=\"${build.dir}\/jcov.asm.jmod\"\/>\n@@ -185,0 +222,2 @@\n+    <target name=\"compile\"  depends=\"compile-jcov, compile-asm\"\/>\n+<!-- TODO\n@@ -188,0 +227,7 @@\n+-->\n+    <target name=\"add-asm\" if=\"with.asm\">\n+        <unjar src=\"${asm.jar}\" dest=\"${all.classes}\"\/>\n+        <unjar src=\"${asm.tree.jar}\" dest=\"${all.classes}\"\/>\n+        <unjar src=\"${asm.util.jar}\" dest=\"${all.classes}\"\/>\n+        <delete file=\"${all.classes}\/module-info.class\"\/>\n+    <\/target>\n@@ -189,8 +235,5 @@\n-    <target name=\"build-jcov\" depends=\"compile\" description=\"build jcov jar\">\n-        <unjar src=\"${asm.jar}\" dest=\"${jcov.classes}\"\/>\n-        <unjar src=\"${asm.tree.jar}\" dest=\"${jcov.classes}\"\/>\n-        <unjar src=\"${asm.util.jar}\" dest=\"${jcov.classes}\"\/>\n-\n-        <mkdir dir=\"${jcov.classes}\/META-INF\"\/>\n-        <mkdir dir=\"${jcov.classes}\/META-INF\/services\"\/>\n-        <echo file=\"${jcov.classes}\/META-INF\/services\/com.sun.tdk.jcov.report.AncFilterFactory\"\n+    <target name=\"build-jcov\" depends=\"compile, add-asm\" description=\"build jcov jar\">\n+<!--\n+        <mkdir dir=\"${all.classes}\/META-INF\"\/>\n+        <mkdir dir=\"${all.classes}\/META-INF\/services\"\/>\n+        <echo file=\"${all.classes}\/META-INF\/services\/com.sun.tdk.jcov.report.AncFilterFactory\"\n@@ -200,2 +243,2 @@\n-\n-        <jar destfile=\"${build.dir}\/jcov.jar\" basedir=\"${jcov.classes}\" index=\"false\">\n+-->\n+        <jar destfile=\"${build.dir}\/jcov.jar\" basedir=\"${all.classes}\" index=\"false\">\n@@ -211,1 +254,0 @@\n-            <patternset refid=\"jcov.files\"\/>\n@@ -213,1 +255,3 @@\n-            <patternset refid=\"jcov.services\"\/>\n+            <!--patternset refid=\"jcov.services\"\/-->\n+            <patternset refid=\"jcov.files\"\/>\n+            <patternset refid=\"jcov.asm.files\"\/>\n@@ -239,1 +283,1 @@\n-        <javac includeantruntime=\"true\" encoding=\"iso-8859-1\" debug=\"true\" target=\"8\" source=\"8\"\n+        <javac includeantruntime=\"true\" encoding=\"iso-8859-1\" debug=\"true\"\n@@ -273,1 +317,1 @@\n-        <javac includeantruntime=\"true\" encoding=\"iso-8859-1\" debug=\"true\" target=\"8\" source=\"8\"\n+        <javac includeantruntime=\"true\" encoding=\"iso-8859-1\" debug=\"true\"\n@@ -292,2 +336,0 @@\n-               target=\"8\"\n-               source=\"8\"\n@@ -337,2 +379,0 @@\n-               target=\"8\"\n-               source=\"8\"\n","filename":"build\/build.xml","additions":62,"deletions":22,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.beans.EventHandler;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Exec.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n@@ -37,0 +36,1 @@\n+import java.io.OutputStream;\n@@ -40,0 +40,1 @@\n+import java.util.function.Consumer;\n@@ -89,1 +90,1 @@\n-    private InstrumentationPlugin plugin = new ASMInstrumentationPlugin();\n+    private InstrumentationPlugin plugin;\n@@ -202,0 +203,1 @@\n+        if (plugin == null) plugin = InstrumentationPlugin.getPlugin();\n@@ -317,2 +319,2 @@\n-        \/\/TODO what's with two finishWork methods????\n-        plugin.complete().get(TEMPLATE_ARTIFACT).accept(Files.newOutputStream(Path.of(outTemplate)));\n+        Consumer<OutputStream> tmplGen = plugin.complete().get(TEMPLATE_ARTIFACT);\n+        if (tmplGen != null) tmplGen.accept(Files.newOutputStream(Path.of(outTemplate)));\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n@@ -43,0 +42,1 @@\n+import java.io.OutputStream;\n@@ -44,0 +44,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -54,0 +55,1 @@\n+import java.util.function.Consumer;\n@@ -78,1 +80,0 @@\n-\/\/    private Instr instr;\n@@ -80,3 +81,3 @@\n-    private File[] addJars;\n-    private File[] addJimages;\n-    private File[] addTests;\n+\/\/    private File[] addJars;\n+\/\/    private File[] addJimages;\n+\/\/    private File[] addTests;\n@@ -87,1 +88,1 @@\n-    private InstrumentationPlugin plugin = new ASMInstrumentationPlugin();\n+    private InstrumentationPlugin plugin;\n@@ -124,0 +125,1 @@\n+            if(plugin == null) plugin = InstrumentationPlugin.getPlugin();\n@@ -216,1 +218,2 @@\n-        plugin.complete().get(TEMPLATE_ARTIFACT).accept(Files.newOutputStream(Path.of(template)));\n+        Consumer<OutputStream> tmplGen = plugin.complete().get(TEMPLATE_ARTIFACT);\n+        if (tmplGen != null) tmplGen.accept(Files.newOutputStream(Path.of(template)));\n@@ -770,0 +773,11 @@\n+        try {\n+            String pluginClass = envHandler.getValue(DSC_INSTR_PLUGIN);\n+            if(pluginClass != null && !pluginClass.isEmpty()) {\n+                plugin = (InstrumentationPlugin) Class.forName(pluginClass)\n+                        .getDeclaredConstructor().newInstance();\n+            }\n+        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException |\n+                NoSuchMethodException | InvocationTargetException e) {\n+            throw new EnvHandlingException(\"'\" + DSC_INSTR_PLUGIN.name + \"' parameter error: '\" + e + \"'\");\n+        }\n+\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/JREInstr.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -212,1 +211,1 @@\n-        return ASMModifiers.parse(accessFlags);\n+        return Modifiers.parse(accessFlags);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataAbstract.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -271,1 +270,1 @@\n-        this.access = new ASMModifiers(access);\n+        this.access = Modifiers.parse(access);\n@@ -1116,1 +1115,1 @@\n-        access = new ASMModifiers(in.readInt());\n+        access = Modifiers.parse(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataClass.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -120,1 +119,1 @@\n-        this.access = new ASMModifiers(access);\n+        this.access = Modifiers.parse(access);\n@@ -513,1 +512,1 @@\n-        access = new ASMModifiers(in.readInt());\n+        access = Modifiers.parse(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataField.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.tdk.jcov.instrument.asm.ASMModifiers;\n@@ -104,1 +103,1 @@\n-        this.access = new ASMModifiers(access);\n+        this.access = Modifiers.parse(access);\n@@ -601,1 +600,1 @@\n-        access = new ASMModifiers(in.readInt());\n+        access = Modifiers.parse(in.readInt());\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/DataMethod.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.ServiceLoader;\n@@ -65,0 +66,4 @@\n+    static InstrumentationPlugin getPlugin() {\n+        return Services.getPlugin();\n+    }\n+\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationPlugin.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.ServiceLoader;\n+\n@@ -28,0 +30,9 @@\n+\n+    static Modifiers parse(String[] flags) {\n+        return Services.getFactory().parse(flags);\n+    }\n+\n+    static Modifiers parse(int flags) {\n+        return Services.getFactory().parse(flags);\n+    }\n+\n@@ -79,0 +90,4 @@\n+    interface ModifiersFactory {\n+        Modifiers parse(String[] flags);\n+        Modifiers parse(int flags);\n+    }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Modifiers.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ServiceLoader;\n+\n+class Services {\n+    private static volatile InstrumentationPlugin PLUGIN;\n+\n+    private static volatile Modifiers.ModifiersFactory MODIFIERS_FACTORY;\n+\n+    static synchronized InstrumentationPlugin getPlugin() {\n+        if (Services.PLUGIN == null) {\n+            try {\n+                PLUGIN = ServiceLoader.load(InstrumentationPlugin.class).findFirst()\n+                        .orElse((InstrumentationPlugin)\n+                                Class.forName(\"com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin\")\n+                                        .getConstructor().newInstance());\n+            } catch (InstantiationException|IllegalAccessException|InvocationTargetException|NoSuchMethodException|ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return Services.PLUGIN;\n+    }\n+\n+    static synchronized Modifiers.ModifiersFactory getFactory() {\n+        if (MODIFIERS_FACTORY == null) {\n+            try {\n+                MODIFIERS_FACTORY =\n+                        ServiceLoader.load(Modifiers.ModifiersFactory.class).findFirst()\n+                                .orElse((Modifiers.ModifiersFactory)\n+                                        Class.forName(\"com.sun.tdk.jcov.instrument.asm.ASMModifiers$ASMModfiersFactory\")\n+                                                .getConstructor().newInstance());\n+            } catch (InstantiationException|IllegalAccessException|InvocationTargetException|NoSuchMethodException|ClassNotFoundException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return MODIFIERS_FACTORY;\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/Services.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Arrays;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/tools\/JCovCMDTool.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.Modifiers;\n+\n+module jcov {\n+    exports com.sun.tdk.jcov.instrument;\n+    exports com.sun.tdk.jcov.io;\n+    exports com.sun.tdk.jcov.util;\n+    exports com.sun.tdk.jcov.data;\n+    exports com.sun.tdk.jcov.runtime;\n+    exports com.sun.tdk.jcov;\n+    exports com.sun.tdk.jcov.report;\n+    exports com.sun.tdk.jcov.report.ancfilters;\n+    exports com.sun.tdk.jcov.processing;\n+    requires java.logging;\n+    requires ant;\n+    requires java.xml;\n+    requires jdk.compiler;\n+    requires javatest;\n+    requires jdk.jdeps;\n+    uses InstrumentationPlugin;\n+    uses Modifiers.ModifiersFactory;\n+}\n\\ No newline at end of file\n","filename":"src\/classes\/module-info.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -8,1 +8,1 @@\n-import com.sun.tdk.jcov.instrument.Util;\n+import com.sun.tdk.jcov.instrument.util.Util;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/exec\/ExecTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.tdk.jcov.instrument.DataClass;\n@@ -33,1 +32,1 @@\n-import com.sun.tdk.jcov.instrument.Util;\n+import com.sun.tdk.jcov.instrument.util.Util;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/instr\/InstrTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import com.sun.tdk.jcov.instrument.Util;\n+import com.sun.tdk.jcov.instrument.util.Util;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/jreinstr\/JREInstrTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.nestHost;\n@@ -37,0 +37,4 @@\n+import com.sun.tdk.jcov.instrument.DataBlock;\n+import com.sun.tdk.jcov.instrument.DataClass;\n+import com.sun.tdk.jcov.instrument.DataMethod;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n@@ -78,1 +82,1 @@\n-                    if (\"<init>\".equals(dm.name))\n+                    if (\"<init>\".equals(dm.getName()))\n@@ -81,1 +85,1 @@\n-                        Assert.assertEquals(Collect.countFor(db.slot), 1);\n+                        Assert.assertEquals(Collect.countFor(db.getId()), 1);\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/nestHost\/IntrumentNestHostTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"previous_filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/IntrumentNestHostTest.java","status":"renamed"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument.plugin;\n-\n-import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n-import com.sun.tdk.jcov.runtime.JCovSaver;\n-import org.objectweb.asm.MethodVisitor;\n-\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import static java.lang.String.format;\n-import static org.objectweb.asm.Opcodes.*;\n-\n-\/**\n- * An instrumentation plugin which saves some information about fields and methods used during execution.\n- * This plugin inserts calls to specific mathod after every PUTFIELD bytecode instruction.\n- * This plugin only supports Object and int data types.\n- * This class also defines the logic to be used at runtime to save the collected data by printing it into the output.\n- *\/\n-\/\/TODO\n-public class FieldsPlugin implements \/*ASMInstrumentationPlugin, *\/JCovSaver {\n-\n-    public static final Map<String, Set<Object>> values = new HashMap<>();\n-    public static final String INSTRUMENTATION_COMPLETE = \"Instrumentation complete: \";\n-\n-    public static void recordFieldValue(Object value, String field) {\n-        Set<Object> fieldValues = values.getOrDefault(field, new HashSet<>());\n-        if(values.containsKey(field)) {\n-            fieldValues = values.get(field);\n-        } else {\n-            fieldValues = new HashSet<>();\n-            values.put(field, fieldValues);\n-        }\n-        fieldValues.add(value);\n-    }\n-\n-\/\/    @Override\n-    public MethodVisitor methodVisitor(int access, String owner, String name, String desc, MethodVisitor visitor) {\n-        return new MethodVisitor(ASM6, visitor) {\n-            @Override\n-            public void visitFieldInsn(int opcode, String owner, String name, String descriptor) {\n-                if(opcode == PUTFIELD) {\n-                    super.visitInsn(DUP);\n-                    if(!descriptor.startsWith(\"L\")) {\n-                        switch (descriptor) {\n-                            case \"I\":\n-                                super.visitMethodInsn(INVOKESTATIC, Integer.class.getName().replace(\".\", \"\/\"),\n-                                        \"valueOf\", \"(I)Ljava\/lang\/Integer;\", false);\n-                                break;\n-                        }\n-                    }\n-                    super.visitLdcInsn(format(\"%s.%s\", owner, name));\n-                    super.visitMethodInsn(INVOKESTATIC, FieldsPlugin.class.getName().replace('.', '\/'),\n-                            \"recordFieldValue\", \"(Ljava\/lang\/Object;Ljava\/lang\/String;)V\", false);\n-                }\n-                super.visitFieldInsn(opcode, owner, name, descriptor);\n-            }\n-        };\n-    }\n-\n-    final static AtomicInteger completeCount = new AtomicInteger(0);\n-\n-\/\/    @Override\n-    public void instrumentationComplete() throws Exception {\n-        completeCount.incrementAndGet();\n-        System.out.println(INSTRUMENTATION_COMPLETE + completeCount);\n-    }\n-\n-\/\/    @Override\n-    public Path runtime() {\n-        return null;\n-    }\n-\n-\/\/    @Override\n-    public String collectorPackage() {\n-        return null;\n-    }\n-\n-    @Override\n-    public void saveResults() {\n-        values.entrySet().forEach(e ->\n-                e.getValue().forEach(v -> System.out.println(e.getKey() + \"=\" + v)));\n-    }\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/FieldsPlugin.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -1,140 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument.plugin;\n-\n-import com.sun.tdk.jcov.lib.InstrProxy;\n-import org.testng.annotations.Test;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.lang.reflect.InvocationTargetException;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import static com.sun.tdk.jcov.instrument.plugin.FieldsPlugin.INSTRUMENTATION_COMPLETE;\n-import static java.lang.Integer.parseInt;\n-import static java.util.stream.Collectors.joining;\n-import static org.testng.Assert.*;\n-\n-\/**\n- * Tests that it is possible to use instrumentation plugin and a corresponding data saver.\n- *\/\n-public class FieldsTest {\n-    Path test_dir;\n-    InstrProxy instr;\n-\n-    \/**\n-     * Perform the instrumentation.\n-     *\/\n-    @Test\n-    public void instrument() throws IOException, InterruptedException {\n-        test_dir = Paths.get(System.getProperty(\"user.dir\")).resolve(\"plugin_test\");\n-        instr = new InstrProxy(test_dir);\n-        instr.copyBytecode(FieldsClass.class.getName());\n-        System.getProperties().setProperty(\"jcov.selftest\", \"true\");\n-        int[] instrumentationCompleteTimes = new int[1];\n-        instr.instr(new String[]{\"-instr_plugin\", FieldsPlugin.class.getName()},\n-                line -> {\n-                    if(line.startsWith(INSTRUMENTATION_COMPLETE))\n-                        instrumentationCompleteTimes[0] =\n-                                parseInt(line.substring(INSTRUMENTATION_COMPLETE.length()));\n-                }, null,\n-                FieldsClass.class.getName());\n-        assertEquals(instrumentationCompleteTimes[0], 1);\n-        \/\/this does not work because\n-        \/\/Warning: Add input source(s) to the classpath: -cp jcov.jar:...\n-        \/\/see InstrProxy class for more info\n-        \/\/assertEquals(FieldsPlugin.completeCount.intValue(), 1);\n-    }\n-\n-    \/**\n-     * Check collected field values at runtime in the same VM.\n-     *\/\n-    @Test(dependsOnMethods = \"instrument\")\n-    public void fields() throws IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n-        instr.runClass(FieldsClass.class.getName(), new String[0]);\n-        Set<Object> set = new HashSet<Object>(){{ add(1); add(2);  }};\n-        testFieldValuesSameVM(\"field1\", set);\n-        set = new HashSet<Object>(){{ add(\"\"); add(\"two\"); add(\"one\");  }};\n-        testFieldValuesSameVM(\"field2\", set);\n-    }\n-    private void testFieldValuesSameVM(String field, Set<Object> values) {\n-        String fullName = FieldsClass.class.getName().replace('.','\/') + \".\" + field;\n-        testFieldValues(fullName, field, values, FieldsPlugin.values.get(fullName));\n-    }\n-\n-    \/**\n-     * Test that data saver is called.\n-     *\/\n-    @Test(dependsOnMethods = \"instrument\")\n-    public void testSaver() throws IOException, InterruptedException {\n-        List<String> command = new ArrayList<>();\n-        command.add(System.getProperty(\"java.home\") + \"\/bin\/java\");\n-        command.add(\"-Djcov.data-saver=\"+FieldsPlugin.class.getName());\n-        command.add(\"-cp\");\n-        command.add(test_dir\n-                + File.pathSeparator + System.getProperty(\"java.class.path\"));\n-        command.add(FieldsClass.class.getName());\n-        System.out.println(command.stream().collect(joining(\" \")));\n-        Process p = new ProcessBuilder().command(command.toArray(new String[0]))\n-                .redirectError(ProcessBuilder.Redirect.INHERIT)\n-                .start();\n-        try (BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()))) {\n-            List<String> lines = in.lines().collect(Collectors.toList());\n-            Set<Object> set = new HashSet<Object>(){{ add(1); add(2);  }};\n-            testFieldValuesOtherVM(\"field1\", set, lines);\n-            set = new HashSet<Object>(){{ add(\"\"); add(\"two\"); add(\"one\");  }};\n-            testFieldValuesOtherVM(\"field2\", set, lines);\n-        }\n-        assertEquals(p.waitFor(), 0);\n-    }\n-    private void testFieldValuesOtherVM(String field, Set<Object> values, List<String> lines) {\n-        String fullName = FieldsClass.class.getName().replace('.','\/') + \".\" + field;\n-        testFieldValues(fullName, field,\n-                values.stream().map(Object::toString).collect(Collectors.toSet()),\n-                lines.stream().filter(l -> l.startsWith(fullName + \"=\"))\n-                        .map(l -> l.substring(fullName.length() + 1))\n-                        .collect(Collectors.toSet()));\n-    }\n-    private void testFieldValues(String fullName, String field, Set<Object> values, Set<Object> actual) {\n-        if(values.size() == 0) {\n-            assertFalse(FieldsPlugin.values.containsKey(fullName), \"No values for field \" + fullName);\n-        } else {\n-            assertNotNull(actual);\n-            System.out.printf(\"Comparing [%s] with [%s]\\n\",\n-                    values.stream().map(Object::toString).collect(joining(\",\")),\n-                    actual.stream().map(Object::toString).collect(joining(\",\")));\n-            assertEquals(values.size(), actual.size(), \"size\");\n-            assertTrue(values.stream().allMatch(actual::contains), \"content is the same\");\n-        }\n-    }\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/FieldsTest.java","additions":0,"deletions":140,"binary":false,"changes":140,"status":"deleted"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n+\n+import java.util.List;\n+\n+public class JRETestPlugin extends TestPlugin implements InstrumentationPlugin.ModuleInstrumentationPlugin {\n+\n+    private final ModuleInstrumentationPlugin actual = new ASMInstrumentationPlugin();\n+\n+    @Override\n+    public String getModuleName(byte[] moduleInfo) {\n+        return actual.getModuleName(moduleInfo);\n+    }\n+\n+    @Override\n+    public byte[] addExports(List<String> exports, byte[] moduleInfo, ClassLoader loader) {\n+        return moduleInfo;\n+    }\n+\n+    @Override\n+    public byte[] clearHashes(byte[] moduleInfo, ClassLoader loader) {\n+        return actual.clearHashes(moduleInfo, loader);\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/JRETestPlugin.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.Instr;\n+import com.sun.tdk.jcov.instrument.util.Util;\n+import com.sun.tdk.jcov.instrument.instr.UserCode;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.*;\n+\n+public class PluginInstrTest {\n+    Path data_dir;\n+    Path test_dir;\n+    int method_slot = -1;\n+    @BeforeClass\n+    public void clean() throws IOException {\n+        System.setProperty(\"jcov.selftest\", \"true\");\n+        data_dir = Files.createTempDirectory(\"instr_test\");\n+        test_dir = data_dir.resolve(\"instr_test\");\n+    }\n+    @BeforeMethod\n+    public void rm() throws IOException {\n+        Util.rmRF(data_dir);\n+    }\n+    @Test\n+    public void instrumentDir() throws IOException {\n+        List<String> params = new ArrayList<>();\n+        new Util(test_dir).copyBytecode(UserCode.class.getName(), PluginInstrTest.class.getName());\n+        params.add(\"-instr_plugin\");\n+        params.add(TestPlugin.class.getName());\n+        params.add(test_dir.toString());\n+        TestPlugin.clear();\n+        new Instr().run(params.toArray(new String[0]));\n+        String resource = UserCode.class.getName().replace('.', '\/') + \".class\";\n+        assertTrue(TestPlugin.getProcessed().contains(resource));\n+        assertTrue(TestPlugin.isCompleted());\n+        byte[] orig = UserCode.class.getClassLoader().getResourceAsStream(resource).readAllBytes();\n+        byte[] newr = Files.newInputStream(test_dir.resolve(resource)).readAllBytes();\n+        assertEquals(orig.length, newr.length);\n+    }\n+    @AfterClass\n+    public void tearDown() throws IOException {\n+        Util.rmRF(data_dir);\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/PluginInstrTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.JREInstr;\n+import com.sun.tdk.jcov.instrument.util.Util;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.awt.Component;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.ServiceLoader;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+public class PluginJREInstrTest {\n+\n+    Path jre;\n+\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        String testJRE = System.getProperty(\"test.jre\");\n+        if(testJRE == null) {\n+            testJRE = System.getProperty(\"java.home\");\n+        }\n+        jre = Util.copyJRE(Paths.get(testJRE));\n+        System.out.println(\"JRE: \" + testJRE);\n+    }\n+\n+    @Test\n+    public void testJREInstr() {\n+        String runtime = Arrays.stream(System.getProperty(\"java.class.path\").split(File.pathSeparator))\n+                .peek(System.out::println)\n+                .filter(s -> s.endsWith(\"jcov_file_saver.jar\")).findAny().get();\n+        String[] params = new String[] {\n+                \"-implantrt\", runtime,\n+                \"-im\", \"java.base\",\n+                \"-im\", \"java.desktop\",\n+                \"-instr_plugin\", JRETestPlugin.class.getName(),\n+                jre.toString()};\n+        System.out.println(\"Running JREInstr with \" + Arrays.stream(params).collect(Collectors.joining(\" \")));\n+        TestPlugin.clear();\n+        assertEquals(new JREInstr().run(params), 0);\n+        Stream.of(ServiceLoader.class, Component.class).forEach(cls -> {\n+            String r = cls.getName().replace('.', '\/') + \".class\";\n+            assertTrue(TestPlugin.getProcessed().contains(r));\n+        });\n+        assertTrue(TestPlugin.isCompleted());\n+    }\n+\n+    @AfterClass\n+    public void tearDown() throws IOException {\n+        if(jre != null && Files.exists(jre)) Util.rmRF(jre);\n+    }\n+\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/PluginJREInstrTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+public class TestPlugin implements InstrumentationPlugin {\n+    private final static List<String> processed = new ArrayList<>();\n+    private final static AtomicBoolean completed = new AtomicBoolean(false);\n+\n+    @Override\n+    public void instrument(Collection<String> resources, ClassLoader loader, BiConsumer<String, byte[]> saver,\n+                           InstrumentationParams parameters) throws IOException {\n+        for(String r : resources) {\n+            processed.add(r);\n+            saver.accept(r, loader.getResourceAsStream(r).readAllBytes());\n+        };\n+    }\n+\n+    @Override\n+    public Map<String, Consumer<OutputStream>> complete() throws Exception {\n+        completed.set(true);\n+        return Map.of();\n+    }\n+\n+    public static void install(InstrumentationPlugin plugin) {\n+\/\/        InstrumentationPlugin.setPlugin(plugin);\n+        clear();\n+    }\n+\n+    public static List<String> getProcessed() {\n+        return processed;\n+    }\n+\n+    public static boolean isCompleted() {\n+        return completed.get();\n+    }\n+\n+    public static void clear() {\n+        processed.clear();\n+        completed.set(false);\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/TestPlugin.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument.plugin.jreinstr;\n-\n-import java.lang.module.ModuleDescriptor;\n-\n-public class Collect {\n-    \/\/this is called from the test to test that the necessary changes has been done by the instarumentation\n-    public static void main(String[] args) {\n-        Object.class.getModule().getDescriptor().exports().stream().filter(e -> !e.isQualified())\n-                .map(ModuleDescriptor.Exports::source)\n-                .forEach(System.out::println);\n-    }\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/jreinstr\/Collect.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,194 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument.plugin.jreinstr;\n-\n-import com.sun.tdk.jcov.JREInstr;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.UncheckedIOException;\n-import java.nio.file.FileVisitResult;\n-import java.nio.file.FileVisitor;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarOutputStream;\n-import java.util.stream.Collectors;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-\n-public class JREInstrTest {\n-\n-    public static final String TIMES_SAVED = \"TIMES SAVED \";\n-    public static final String TIMES_CALLED = \"TIMES CALLED \";\n-\n-    Path rtJar;\n-    Path jre;\n-\n-    private Path copyJRE(Path src) throws IOException, InterruptedException {\n-        Path dest = Files.createTempDirectory(\"JDK\");\n-        System.out.println(\"Copying \" + src + \" to \" + dest);\n-        Files.walk(src).forEach(s -> {\n-            try {\n-                Files.copy(s, dest.resolve(src.relativize(s)), StandardCopyOption.REPLACE_EXISTING);\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n-        });\n-        return dest;\n-        \/\/TODO make this to work, as it would be a whole lot faster\n-        \/\/a JDK created by jimage can not be used, it fails with\n-        \/\/Command line error: bootmodules.jimage was not found in modules directory\n-        \/\/see CODETOOLS-7903016\n-\/\/        Path dest = Files.createTempDirectory(\"test_data\");\n-\/\/        Path res = dest.resolve(\"jdk\");\n-\/\/        List<String> command = List.of(\n-\/\/                src.toString() + File.separator + \"bin\" + File.separator + \"jlink\",\n-\/\/                \"--add-modules\", \"java.base,java.compiler\",\n-\/\/                \"--output\", res.toString()\n-\/\/        );\n-\/\/        System.out.println(command.stream().collect(Collectors.joining(\" \")));\n-\/\/        assertEquals(new ProcessBuilder(command)\n-\/\/                .redirectError(ProcessBuilder.Redirect.INHERIT)\n-\/\/                .redirectInput(ProcessBuilder.Redirect.INHERIT)\n-\/\/                .start().waitFor(), 0);\n-\/\/        return res;\n-    }\n-\n-    private void removeJRE(Path jre) throws IOException {\n-        System.out.println(\"Removing \" + jre);\n-        Files.walkFileTree(jre, new FileVisitor<Path>() {\n-            @Override\n-            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                return FileVisitResult.CONTINUE;\n-            }\n-            @Override\n-            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n-                Files.delete(file);\n-                return FileVisitResult.CONTINUE;\n-            }\n-            @Override\n-            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n-                return FileVisitResult.CONTINUE;\n-            }\n-            @Override\n-            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n-                Files.delete(dir);\n-                return FileVisitResult.CONTINUE;\n-            }\n-        });\n-    }\n-\n-    static Path createRtJar(String prefix, Class collect) throws IOException {\n-        Path dest = Files.createTempFile(prefix, \".jar\");\n-        System.out.println(prefix + \" jar: \" + dest);\n-        try(JarOutputStream jar = new JarOutputStream(Files.newOutputStream(dest))) {\n-            jar.putNextEntry(new JarEntry(collect.getName().replace(\".\", File.separator) + \".class\"));\n-            try (InputStream ci = collect.getClassLoader()\n-                    .getResourceAsStream(collect.getName().replace('.', '\/') + \".class\")) {\n-                byte[] buffer = new byte[1024];\n-                int read;\n-                while((read = ci.read(buffer)) > 0) {\n-                    jar.write(buffer, 0, read);\n-                }\n-            }\n-        }\n-        return dest;\n-    }\n-\n-    @BeforeClass\n-    public void setup() throws IOException, InterruptedException {\n-        String testJRE = System.getProperty(\"test.jre\");\n-        if(testJRE == null) {\n-            testJRE = System.getProperty(\"java.home\");\n-        }\n-        rtJar = createRtJar(\"jcov-rt-\", Collect.class);\n-        jre = copyJRE(Paths.get(testJRE));\n-    }\n-\n-    @Test\n-    public void testJREInstr() throws IOException, InterruptedException {\n-        TestPlugin.reset();\n-        String runtime = Arrays.stream(System.getProperty(\"java.class.path\").split(File.pathSeparator))\n-                .peek(System.out::println)\n-                .filter(s -> s.endsWith(\"jcov_network_saver.jar\")).findAny().get();\n-        String[] params = new String[] {\n-                \"-implantrt\", runtime,\n-                \"-instr_plugin\", TestPlugin.class.getName(),\n-                \"-im\", \"java.base\",\n-                jre.toString()};\n-        System.out.println(\"Running JREInstr with \" + Arrays.stream(params).collect(Collectors.joining(\" \")));\n-        long start = System.currentTimeMillis();\n-        assertEquals(new JREInstr().run(params), 0);\n-        \/\/track instrumentation time for the TODO in copyJRE\n-        System.out.println(\"Took \" + (System.currentTimeMillis() - start) + \" to instrument.\");\n-        assertEquals(TestPlugin.savedTimes.intValue(), 1);\n-        assertTrue(TestPlugin.calledTimes.get() > 0);\n-    }\n-\n-    @Test(dependsOnMethods = \"testJREInstr\")\n-    public void testInstrumentation() throws IOException, InterruptedException {\n-        \/\/no classpath necessary for the next call because the class is implanted\n-        List<String> command = List.of(\n-                jre.toString() + File.separator + \"bin\" + File.separator + \"java\",\n-                Collect.class.getName());\n-        System.out.println(command.stream().collect(Collectors.joining(\" \")));\n-        Process p = new ProcessBuilder()\n-                .command(command)\n-                .redirectError(ProcessBuilder.Redirect.INHERIT)\n-                .start();\n-        boolean jcovExported = false;\n-        boolean pluginExported = false;\n-        try(BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()))) {\n-            String line;\n-            while((line = in.readLine()) != null && !(jcovExported && pluginExported)) {\n-                System.out.println(line);\n-                if(line.equals(Collect.class.getPackage().getName())) pluginExported = true;\n-                if(line.equals(com.sun.tdk.jcov.runtime.Collect.class.getPackage().getName())) jcovExported = true;\n-            }\n-        }\n-        p.waitFor();\n-        assertTrue(pluginExported && jcovExported);\n-    }\n-\n-    @AfterClass\n-    public void tearDown() throws IOException {\n-        if(jre != null && Files.exists(jre)) removeJRE(jre);\n-        if(rtJar != null && Files.exists(rtJar)) Files.delete(rtJar);\n-    }\n-\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/jreinstr\/JREInstrTest.java","additions":0,"deletions":194,"binary":false,"changes":194,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument.plugin.jreinstr;\n-\n-import com.sun.tdk.jcov.instrument.asm.ASMInstrumentationPlugin;\n-import org.objectweb.asm.MethodVisitor;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.Path;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\/\/TODO\n-public class TestPlugin \/*implements ASMInstrumentationPlugin*\/ {\n-\n-    public static AtomicInteger calledTimes = new AtomicInteger(0);\n-    public static AtomicInteger savedTimes = new AtomicInteger(0);\n-    public static Path rt;\n-\n-    static {\n-        try {\n-            rt = JREInstrTest.createRtJar(\"plugin-rt-\", Collect.class);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n-    public static void reset() {\n-        calledTimes.set(0);\n-        savedTimes.set(0);\n-    }\n-\n-\/\/    @Override\n-    public MethodVisitor methodVisitor(int access, String owner, String name, String desc, MethodVisitor visitor) {\n-        calledTimes.incrementAndGet();\n-        return visitor;\n-    }\n-\n-\/\/    @Override\n-    public void instrumentationComplete() throws Exception {\n-        savedTimes.incrementAndGet();\n-    }\n-\n-\/\/    @Override\n-    public Path runtime() {\n-        return rt;\n-    }\n-\n-\/\/    @Override\n-    public String collectorPackage() {\n-        return Collect.class.getPackage().getName();\n-    }\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/jreinstr\/TestPlugin.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -33,1 +33,1 @@\n-import com.sun.tdk.jcov.instrument.Util;\n+import com.sun.tdk.jcov.instrument.util.Util;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/tmplgen\/TmplGenTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package com.sun.tdk.jcov.instrument;\n+package com.sun.tdk.jcov.instrument.util;\n@@ -47,1 +47,0 @@\n-import java.util.Arrays;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/util\/Util.java","additions":1,"deletions":2,"binary":false,"changes":3,"previous_filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/Util.java","status":"copied"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report.ancfilters.test;\n+\n+import com.sun.tdk.jcov.report.AncFilter;\n+import com.sun.tdk.jcov.report.AncFilterFactory;\n+import com.sun.tdk.jcov.report.ancfilters.BuiltInAncFilters;\n+import com.sun.tdk.jcov.report.ancfilters.CatchANCFilter;\n+import com.sun.tdk.jcov.report.ancfilters.DeprecatedANCFilter;\n+import com.sun.tdk.jcov.report.ancfilters.GetterANCFilter;\n+import com.sun.tdk.jcov.report.ancfilters.ListANCFilter;\n+import com.sun.tdk.jcov.report.ancfilters.SetterANCFilter;\n+import org.testng.annotations.Test;\n+\n+import java.util.Collection;\n+\n+import static org.testng.Assert.assertTrue;\n+\n+public class BuiltInAncFiltersTest {\n+    static final AncFilterFactory factory = new BuiltInAncFilters();\n+    @Test\n+    public void testInstantiate() {\n+        assertTrue(factory.instantiate(\"setter\") instanceof SetterANCFilter);\n+        assertTrue(factory.instantiate(\"getter\") instanceof GetterANCFilter);\n+    }\n+    @Test\n+    public void testInstantiateAll() {\n+        Collection<AncFilter> filters = factory.instantiateAll();\n+        assertTrue(filters.stream().anyMatch(f -> f instanceof CatchANCFilter));\n+        assertTrue(filters.stream().anyMatch(f -> f instanceof DeprecatedANCFilter));\n+        assertTrue(filters.stream().noneMatch(f -> f instanceof ListANCFilter));\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/ancfilters\/test\/BuiltInAncFiltersTest.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n-package com.sun.tdk.jcov.report.ancfilters;\n+package com.sun.tdk.jcov.report.ancfilters.test;\n@@ -30,0 +30,1 @@\n+import com.sun.tdk.jcov.report.ancfilters.ListANCFilter;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/ancfilters\/test\/ListANCFilterTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/ancfilters\/ListANCFilterTest.java","status":"copied"},{"patch":"@@ -29,1 +29,0 @@\n-import com.sun.tdk.jcov.instrument.DataMethod;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/privacy\/PrivacyTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}