{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.io.InputStream;\n@@ -68,7 +69,9 @@\n-        for(String r : resources) {\n-            byte[] content = loader.getResourceAsStream(r).readAllBytes();\n-            if(isClass(r)) {\n-                byte[] instrumented = morph.morph(content, loader, null);\n-                \/\/TODO should never be null\n-                if(instrumented != null) saver.accept(r, instrumented);\n-            } else saver.accept(r, content);\n+        for (String r : resources) {\n+            try (InputStream in = loader.getResourceAsStream(r)) {\n+                byte[] content = in.readAllBytes();\n+                if (isClass(r)) {\n+                    byte[] instrumented = morph.morph(content, loader, null);\n+                    \/\/TODO should never be null\n+                    if (instrumented != null) saver.accept(r, instrumented);\n+                } else saver.accept(r, content);\n+            }\n","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMInstrumentationPlugin.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -375,19 +375,10 @@\n-    <target name=\"test\" depends=\"build-jcov,build-network.saver\">\n-        <mkdir dir=\"${result.dir}\/test\/classes\" \/>\n-        <javac includeantruntime=\"false\" encoding=\"iso-8859-1\"\n-               debug=\"no\"\n-               srcdir=\"${test.src.dir}\"\n-               sourcepath=\"${test.src.dir}\"\n-               classpath=\"${testngjar}:${build.dir}\/jcov.jar\"\n-               destdir=\"${result.dir}\/test\/classes\">\n-        <\/javac>\n-        <copy todir=\"${result.dir}\/test\/classes\">\n-            <fileset dir=\"${test.src.dir}\" includes=\"**\/*.xml\"\/>\n-        <\/copy>\n-        <taskdef classname=\"org.testng.TestNGAntTask\" classpath=\"${testngjar}\" name=\"testng\"\/>\n-        <testng failureProperty=\"tests.failed\" listeners=\"org.testng.reporters.VerboseReporter\" outputdir=\"${result.dir}\/test\/result\" suitename=\"jcov\" testname=\"TestNG tests\" workingDir=\"${result.dir}\/test\/work\" verbose=\"2\">\n-                <classfileset dir=\"${result.dir}\/test\/classes\" includes=\"**\/*Test.class\" \/>\n-            <classpath>\n-                <path path=\"${testngjar}:${build.dir}\/jcov.jar:${build.dir}\/jcov_network_saver.jar:${result.dir}\/test\/classes:${jcommanderjar}\"\/>\n-            <\/classpath>\n-        <\/testng>\n+    <target name=\"test\" depends=\"build-jcov,build-network.saver,build-file.saver\">\n+        <mkdir dir=\"${result.dir}\/test\" \/>\n+        <java jar=\"${jtreg.home}\/lib\/jtreg.jar\" fork=\"true\">\n+            <arg value=\"-cpa:${build.dir}\/jcov.jar:${build.dir}\/jcov_file_saver.jar\"\/>\n+            <arg value=\"-workDir:${result.dir}\/test\/workdir\"\/>\n+            <arg value=\"-reportDir:${result.dir}\/test\/report\"\/>\n+            <arg value=\"-timeoutFactor:10\"\/>\n+            <arg value=\"-v1\"\/>\n+            <arg value=\"..\/test\/unit\"\/>\n+        <\/java>\n","filename":"build\/build.xml","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -216,1 +216,0 @@\n-\/\/            FileSystem outFS = null;\n@@ -226,2 +225,29 @@\n-            InstrumentationPlugin.Destination out;\n-            out = getDestination(outDir, inPath);\n+            Path outPath;\n+            if (outDir == null) {\n+                \/\/no matter how many input files\/dirs, the instrumentation need to be done in place for every file\/dir\n+                outPath = inPath;\n+            } else {\n+                outPath = outDir.toPath();\n+                boolean isJar = outPath.toString().endsWith(\".jar\") || outPath.toString().endsWith(\".jmod\");\n+                if (isJar) {\n+                    \/\/trying to put content of all class hierarchies (could be more then one) into one jar\n+                    \/\/fine, we can do that\n+                } else {\n+                    \/\/if it is not a jar, then it is a directory, nothing else is supported\n+                    if (files.length > 1) {\n+                        \/\/if multiple inputs, put every output separately inside the out dir\n+                        outPath = outPath.resolve(inPath.getFileName());\n+                    } else {\n+                        boolean isInputJar = inPath.toString().endsWith(\".jar\") || inPath.toString().endsWith(\".jmod\");\n+                        if (isInputJar) {\n+                            \/\/input is a jar, output is a dir\n+                            \/\/place the jar inside the target dir\n+                            outPath = outPath.resolve(inPath.getFileName());\n+                        } else {\n+                            \/\/input is a dir, output is a dir\n+                            \/\/place content of the dir into the target dir\n+                        }\n+                    }\n+                }\n+            }\n+            InstrumentationPlugin.Destination  out = getDestination(outPath);\n@@ -237,12 +263,2 @@\n-    protected InstrumentationPlugin.Destination getDestination(File outDir, Path inPath) throws IOException {\n-        InstrumentationPlugin.Destination out;\n-        Path outPath = (outDir != null) ? outDir.toPath().resolve(inPath.getFileName()) : inPath;\n-        if (Files.isDirectory(outPath) ||\n-                outPath.toString().endsWith(\".jar\") ||\n-                outPath.toString().endsWith(\".jmod\")) {\n-            out = new InstrumentationPlugin.PathDestination(outPath);\n-        } else if (Files.isRegularFile(outPath) && outPath.toString().endsWith(\".class\")) {\n-            \/\/TODO as above\n-            throw new RuntimeException();\n-        } else throw new IllegalStateException(\"Unknown output kind: \" + inPath);\n-        return out;\n+    protected InstrumentationPlugin.Destination getDestination(Path path) throws IOException {\n+        return new InstrumentationPlugin.PathDestination(path);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":31,"deletions":15,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.io.InputStream;\n@@ -138,1 +139,3 @@\n-                            destination.accept(resource, implantSource.loader().getResourceAsStream(resource).readAllBytes());\n+                            try(InputStream in = implantSource.loader().getResourceAsStream(resource)) {\n+                                destination.accept(resource, in.readAllBytes());\n+                            }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/JREInstr.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,6 +64,0 @@\n-    @Override\n-    protected InstrumentationPlugin.Destination getDestination(File outDir, Path inPath) throws IOException {\n-        if (getOutDir() == null) return new InstrumentationPlugin.PathDestination(inPath);\n-        else return new InstrumentationPlugin.PathDestination(Path.of(outDir.getAbsolutePath()));\n-    }\n-\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/ProductInstr.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    protected InstrumentationPlugin.Destination getDestination(File outDir, Path inPath) {\n+    protected InstrumentationPlugin.Destination getDestination(Path path) {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/TmplGen.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.InputStream;\n@@ -141,3 +142,2 @@\n-                try {\n-                    saver.accept(c,\n-                            loader.getResourceAsStream(c).readAllBytes());\n+                try (InputStream in = loader.getResourceAsStream(c)) {\n+                    saver.accept(c, in.readAllBytes());\n@@ -179,1 +179,4 @@\n-            for(String r : source.resources()) saver.accept(r, source.loader().getResourceAsStream(r).readAllBytes());\n+            for(String r : source.resources())\n+                try (InputStream in = source.loader().getResourceAsStream(r)) {\n+                    saver.accept(r, in.readAllBytes());\n+                }\n@@ -274,2 +277,4 @@\n-            byte[] moduleInfo = source.loader().getResourceAsStream(MODULE_INFO_CLASS).readAllBytes();\n-            proccessModule(moduleInfo, source.loader(), destination.saver());\n+            try (InputStream in = source.loader().getResourceAsStream(MODULE_INFO_CLASS)) {\n+                byte[] moduleInfo = in.readAllBytes();\n+                proccessModule(moduleInfo, source.loader(), destination.saver());\n+            }\n@@ -329,1 +334,1 @@\n-            fs = Files.isDirectory(root) ? null : FileSystems.newFileSystem(root, null);\n+            fs = Files.isDirectory(root) ? null : FileSystems.newFileSystem(root, (ClassLoader) null);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationPlugin.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"","filename":"test\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+TestNG.dirs = .\n+lib.dirs = \/unit\/com\/sun\/tdk\/jcov\/instrument\/util\n","filename":"test\/unit\/TEST.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -47,0 +47,1 @@\n+import java.util.stream.Collectors;\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/instr\/InstrTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.InputStream;\n@@ -49,1 +50,3 @@\n-            saver.accept(r, loader.getResourceAsStream(r).readAllBytes());\n+            try (InputStream in = loader.getResourceAsStream(r)) {\n+                saver.accept(r, in.readAllBytes());\n+            }\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/TestPlugin.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}