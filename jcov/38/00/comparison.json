{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.tdk.jcov.instrument.ModuleInstrumentationPlugin;\n@@ -54,1 +55,1 @@\n-        InstrumentationPlugin.ModuleInstrumentationPlugin {\n+        ModuleInstrumentationPlugin {\n","filename":"asm\/classes\/com\/sun\/tdk\/jcov\/instrument\/asm\/ASMInstrumentationPlugin.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,7 @@\n+import com.sun.tdk.jcov.instrument.plugin.Destination;\n+import com.sun.tdk.jcov.instrument.plugin.FilteringPlugin;\n+import com.sun.tdk.jcov.instrument.plugin.ImplantingPlugin;\n+import com.sun.tdk.jcov.instrument.plugin.Instrumentation;\n+import com.sun.tdk.jcov.instrument.plugin.PathDestination;\n+import com.sun.tdk.jcov.instrument.plugin.PathSource;\n+import com.sun.tdk.jcov.instrument.plugin.Source;\n@@ -36,0 +43,1 @@\n+import java.io.InputStream;\n@@ -38,0 +46,2 @@\n+import java.net.MalformedURLException;\n+import java.net.URL;\n@@ -40,0 +50,2 @@\n+import java.util.Collection;\n+import java.util.List;\n@@ -89,1 +101,0 @@\n-    \/\/TODO do need both?\n@@ -205,1 +216,1 @@\n-        InstrumentationPlugin.Source source;\n+        Source source;\n@@ -207,2 +218,2 @@\n-            source = new InstrumentationPlugin.PathSource(ClassLoader.getSystemClassLoader(), Path.of(implantRT));\n-            aPlugin = new InstrumentationPlugin.ImplantingPlugin(plugin, source);\n+            source = new PathSource(ClassLoader.getSystemClassLoader(), Path.of(implantRT));\n+            aPlugin = new ImplantingPlugin(plugin, source);\n@@ -210,1 +221,1 @@\n-        aPlugin = new InstrumentationPlugin.FilteringPlugin(aPlugin, InstrumentationPlugin.classNameFilter(params));\n+        aPlugin = new FilteringPlugin(aPlugin, Utils.classNameFilter(params));\n@@ -212,2 +223,2 @@\n-        InstrumentationPlugin.Instrumentation fi =\n-                new InstrumentationPlugin.Instrumentation(aPlugin);\n+        Instrumentation fi =\n+                new Instrumentation(aPlugin);\n@@ -215,1 +226,1 @@\n-            InstrumentationPlugin.PathSource in;\n+            PathSource in;\n@@ -218,1 +229,1 @@\n-                in = new InstrumentationPlugin.PathSource(cl, inPath);\n+                in = new PathSource(cl, inPath);\n@@ -220,4 +231,19 @@\n-                \/\/TODO implement by directly calling the plugin\n-                \/\/TODO deprecate in documentation: instead of providing specific files, ask the user to provide\n-                \/\/a class hierarchy root and filters\n-                throw new RuntimeException();\n+                in = new PathSource(new ClassLoader() {\n+                    @Override\n+                    public URL getResource(String name) {\n+                        if(name.equals(inPath.getFileName().toString())) {\n+                            try {\n+                                return inPath.toUri().toURL();\n+                            } catch (MalformedURLException e) {\n+                                throw new IllegalArgumentException(e);\n+                            }\n+                        } else return cl.getResource(name);\n+                    }\n+                }, inPath) {\n+                    @Override\n+                    public Collection<String> resources() throws Exception {\n+                        return List.of(inPath.getFileName().toString());\n+                    }\n+                };\n+\/\/                throw new RuntimeException(\"Instrumenting separate classes is not implemented. \" +\n+\/\/                        \"Instrument class hierarchies with appropriate filters.\");\n@@ -227,2 +253,5 @@\n-                \/\/no matter how many input files\/dirs, the instrumentation need to be done in place for every file\/dir\n-                outPath = inPath;\n+                if(Files.isRegularFile(inPath) && file.endsWith(\".class\"))\n+                    outPath = inPath.getParent();\n+                else\n+                    \/\/no matter how many input files\/dirs, the instrumentation need to be done in place for every file\/dir\n+                    outPath = inPath;\n@@ -253,2 +282,1 @@\n-            InstrumentationPlugin.Destination  out = getDestination(outPath);\n-            try (in) {\n+            try (Destination out = getDestination(outPath); in) {\n@@ -256,3 +284,0 @@\n-            } finally {\n-                in.close();\n-                out.close();\n@@ -263,2 +288,2 @@\n-    protected InstrumentationPlugin.Destination getDestination(Path path) throws IOException {\n-        return new InstrumentationPlugin.PathDestination(path);\n+    protected Destination getDestination(Path path) throws IOException {\n+        return new PathDestination(path);\n@@ -354,1 +379,1 @@\n-        return \"java -cp jcov.jar:source1:sourceN com.sun.tdk.jcov.Instr [-option value] source1 sourceN\";\n+        return \"java -cp jcov.jar:source1:sourceN com.sun.tdk.jcov.Instr [-option value] <jar or jmod or directory>...\";\n@@ -697,1 +722,2 @@\n-            new OptionDescr(\"instr.output\", new String[]{\"output\", \"o\"}, \"Output directory for instrumented classes\",\n+            new OptionDescr(\"instr.output\", new String[]{\"output\", \"o\"},\n+                    \"Output directory or jar or jmod for instrumented classes\",\n@@ -699,3 +725,4 @@\n-                    \"Specifies output directory, default directory is current. \" +\n-                            \"Instr command could process different dirs and different jars: \\n \" +\n-                            \"all classes from input dirs and all jars will be placed in output directory.\");\n+                    \"If jar or jmod, all instrumented code is placed into the jar, according to class hierarchy. \\n\" +\n+                    \"If a dir and a single input provided, all instrumented code stored in the dirr, according to class hierarchy.\\n\" +\n+                    \"If a dir and multiple inputs, multiple dirs\/jars\/jmods are created within the output dir, one for eah input.\\n\" +\n+                    \"If no option provided, all code is instrumented in place.\");\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/Instr.java","additions":54,"deletions":27,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -30,0 +30,6 @@\n+import com.sun.tdk.jcov.instrument.plugin.FilteringPlugin;\n+import com.sun.tdk.jcov.instrument.plugin.ModuleInstrumentation;\n+import com.sun.tdk.jcov.instrument.ModuleInstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.plugin.OverridingClassLoader;\n+import com.sun.tdk.jcov.instrument.plugin.PathDestination;\n+import com.sun.tdk.jcov.instrument.plugin.PathSource;\n@@ -123,1 +129,1 @@\n-            ClassLoader cl = new InstrumentationPlugin.OverridingClassLoader(urls.toArray(new URL[0]),\n+            ClassLoader cl = new OverridingClassLoader(urls.toArray(new URL[0]),\n@@ -127,3 +133,3 @@\n-            InstrumentationPlugin.ModuleInstrumentation mi = new InstrumentationPlugin.ModuleInstrumentation(\n-                    new InstrumentationPlugin.FilteringPlugin(plugin, InstrumentationPlugin.classNameFilter(params)),\n-                    (InstrumentationPlugin.ModuleInstrumentationPlugin) plugin) {\n+            ModuleInstrumentation mi = new ModuleInstrumentation(\n+                    new FilteringPlugin(plugin, Utils.classNameFilter(params)),\n+                    (ModuleInstrumentationPlugin) plugin) {\n@@ -132,1 +138,1 @@\n-                    InstrumentationPlugin.ModuleInstrumentationPlugin mip = getModulePluign();\n+                    ModuleInstrumentationPlugin mip = getModulePluign();\n@@ -136,2 +142,2 @@\n-                        InstrumentationPlugin.PathSource implantSource =\n-                                new InstrumentationPlugin.PathSource(cl, implant.toPath());\n+                        PathSource implantSource =\n+                                new PathSource(cl, implant.toPath());\n@@ -155,2 +161,2 @@\n-                            mi.instrument(new InstrumentationPlugin.PathSource(cl, modClasses.toPath()),\n-                                    new InstrumentationPlugin.PathDestination(modClasses.toPath()), params);\n+                            mi.instrument(new PathSource(cl, modClasses.toPath()),\n+                                    new PathDestination(modClasses.toPath()), params);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/JREInstr.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.plugin.Destination;\n@@ -31,1 +31,0 @@\n-import java.io.File;\n@@ -65,2 +64,2 @@\n-    protected InstrumentationPlugin.Destination getDestination(Path path) {\n-        return new InstrumentationPlugin.Destination() {\n+    protected Destination getDestination(Path path) {\n+        return new Destination() {\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/TmplGen.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.tdk.jcov.instrument.plugin.FilteringPlugin;\n@@ -211,3 +212,1 @@\n-        \/\/TODO is it possible to optimize to return the original plugin\n-        \/\/in case for filtering options are provided?\n-        return new InstrumentationPlugin.FilteringPlugin(plugin, this::isIncluded);\n+        return new FilteringPlugin(plugin, this::isIncluded);\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationParams.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,5 +27,0 @@\n-import com.sun.tdk.jcov.util.Utils;\n-\n-import java.io.Closeable;\n-import java.io.IOException;\n-import java.io.InputStream;\n@@ -33,9 +28,0 @@\n-import java.io.UncheckedIOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n@@ -43,1 +29,0 @@\n-import java.util.List;\n@@ -45,1 +30,0 @@\n-import java.util.ServiceLoader;\n@@ -48,6 +32,0 @@\n-import java.util.function.Predicate;\n-import java.util.jar.JarFile;\n-import java.util.stream.Collectors;\n-import java.util.zip.ZipEntry;\n-\n-import static com.sun.tdk.jcov.util.Utils.isClassFile;\n@@ -56,1 +34,3 @@\n- * TODO describe the lifecycle\n+ * A plugin's {@link #instrument(Collection, ClassLoader, BiConsumer, InstrumentationParams)} could be used\n+ * multiple times to instrument additional bytecode. A plugin is supposed to accumulate the the, which later\n+ * is supposed to be used through {@link #complete()} method.\n@@ -97,260 +77,0 @@\n-\n-    \/\/TODO properly relocate the inner classes\n-\n-    interface ModuleInstrumentationPlugin {\n-        String getModuleName(byte[] moduleInfo);\n-        byte[] addExports(List<String> exports, byte[] moduleInfo, ClassLoader loader);\n-        byte[] clearHashes(byte[] moduleInfo, ClassLoader loader);\n-    }\n-\n-    abstract class ProxyInstrumentationPlugin implements InstrumentationPlugin {\n-        private final InstrumentationPlugin inner;\n-\n-        protected ProxyInstrumentationPlugin(InstrumentationPlugin inner) {\n-            this.inner = inner;\n-        }\n-\n-        public InstrumentationPlugin getInner() {\n-            return inner;\n-        }\n-\n-        @Override\n-        public final Map<String, Consumer<OutputStream>> complete() throws Exception {\n-            return inner.complete();\n-        }\n-    }\n-\n-    class FilteringPlugin extends ProxyInstrumentationPlugin {\n-        private final Predicate<String> filter;\n-\n-        public FilteringPlugin(InstrumentationPlugin inner, Predicate<String> filter) {\n-            super(inner);\n-            this.filter = filter;\n-        }\n-\n-        @Override\n-        public void instrument(Collection<String> resources, ClassLoader loader,\n-                               BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n-            List<String> accepted = new ArrayList<>();\n-            List<String> rejected = new ArrayList<>();\n-            resources.forEach(r -> {\n-                if (filter.test(r)) accepted.add(r);\n-                else rejected.add(r);\n-            });\n-            getInner().instrument(accepted, loader, saver, parameters);\n-            rejected.forEach(c -> {\n-                try (InputStream in = loader.getResourceAsStream(c)) {\n-                    saver.accept(c, in.readAllBytes());\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            });\n-        }\n-    }\n-\n-    static Predicate<String> classNameFilter(InstrumentationParams params) {\n-        return r -> {\n-            if (isClassFile(r))\n-                return params.isIncluded(r.substring(0,\n-                        r.length() - Utils.FILE_TYPE.CLASS.name().length() - 1));\n-            else return true;\n-        };\n-    }\n-\n-    interface Source extends Closeable {\n-        \/\/paths relative to the result root\n-        Collection<String> resources() throws Exception;\n-        ClassLoader loader();\n-    }\n-\n-    class ImplantingPlugin extends ProxyInstrumentationPlugin {\n-        private final Source source;\n-\n-        \/\/TODO similar to ModuleImplantingPlugin have different implants for different locations somehow?\n-        public ImplantingPlugin(InstrumentationPlugin inner, Source source) {\n-            super(inner);\n-            this.source = source;\n-        }\n-\n-        @Override\n-        public void instrument(Collection<String> classes, ClassLoader loader,\n-                               BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n-            getInner().instrument(classes, loader, saver, parameters);\n-            for(String r : source.resources())\n-                try (InputStream in = source.loader().getResourceAsStream(r)) {\n-                    saver.accept(r, in.readAllBytes());\n-                }\n-        }\n-    }\n-\n-    \/\/TODO better be private\n-    class OverridingClassLoader extends URLClassLoader {\n-\n-        private static URL[] toURL(Path root) {\n-            try {\n-                return new URL[] {root.toUri().toURL()};\n-            } catch (MalformedURLException e) {\n-                \/\/should not happen since getting teh URL legally\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        private final ClassLoader backup;\n-\n-        public OverridingClassLoader(Path root, ClassLoader backup) {\n-            this(toURL(root), backup);\n-        }\n-\n-        public OverridingClassLoader(URL[] urls, ClassLoader backup) {\n-            super(urls);\n-            this.backup = backup;\n-        }\n-\n-        @Override\n-        public URL getResource(String name) {\n-            \/\/first try to find local resource, from teh current module\n-            URL resource = findResource(name);\n-            \/\/for module-info it does not make sense to look in other classloaders\n-            if(name.equals(MODULE_INFO_CLASS)) return resource;\n-            \/\/if none, try other modules\n-            if (resource == null) resource = backup.getResource(name);\n-            \/\/that should not happen during normal use\n-            \/\/if happens, refer to super, nothing else we can do\n-            if (resource == null) resource = super.getResource(name);\n-            return resource;\n-        }\n-    }\n-\n-    interface Destination extends Closeable {\n-        BiConsumer<String, byte[]> saver();\n-    }\n-\n-    \/**\n-     * A utility class which works with a given plugin in turms of file hierarchies.\n-     *\/\n-    class Instrumentation {\n-        private final InstrumentationPlugin inner;\n-\n-        public Instrumentation(InstrumentationPlugin inner) {\n-            this.inner = inner;\n-        }\n-\n-        public void instrument(Source source, Destination destination,\n-                                     InstrumentationParams parameters) throws Exception {\n-            inner.instrument(source.resources(), source.loader(),\n-                    destination.saver(), parameters);\n-        }\n-    }\n-\n-    \/**\n-     * Helps to instrument modules.\n-     * @see #Instrumentation\n-     *\/\n-    class ModuleInstrumentation extends Instrumentation {\n-        private final ModuleInstrumentationPlugin modulePlugin;\n-\n-        public ModuleInstrumentation(InstrumentationPlugin inner, ModuleInstrumentationPlugin modulePlugin) {\n-            super(inner);\n-            this.modulePlugin = modulePlugin;\n-        }\n-\n-        public ModuleInstrumentationPlugin getModulePluign() {\n-            return modulePlugin;\n-        }\n-\n-        \/**\n-         * Take any required action needed to instrument a module. This implementation does not do anything.\n-         * @param moduleInfo\n-         * @param loader\n-         * @param destination\n-         * @throws Exception\n-         * @see ModuleInstrumentationPlugin\n-         *\/\n-        protected void proccessModule(byte[] moduleInfo, ClassLoader loader, BiConsumer<String, byte[]> destination)\n-                throws Exception {\n-        }\n-\n-        @Override\n-        public void instrument(Source source, Destination destination,\n-                               InstrumentationParams parameters) throws Exception {\n-            super.instrument(source, destination, parameters);\n-            try (InputStream in = source.loader().getResourceAsStream(MODULE_INFO_CLASS)) {\n-                byte[] moduleInfo = in.readAllBytes();\n-                proccessModule(moduleInfo, source.loader(), destination.saver());\n-            }\n-        }\n-    }\n-\n-    class PathSource implements Source, Closeable {\n-\n-        private final ClassLoader loader;\n-        private final Path root;\n-\n-        public PathSource(ClassLoader backup, Path root) {\n-            this.loader = new OverridingClassLoader(root, backup);\n-            this.root = root;\n-        }\n-\n-        @Override\n-        public Collection<String> resources() throws Exception {\n-            if(Files.isDirectory(root))\n-                return Files.find(root, Integer.MAX_VALUE, (f, a) -> Files.isRegularFile(f))\n-                        .map(r -> root.relativize(r).toString())\n-                        .collect(Collectors.toList());\n-            else\n-                try (JarFile jar = new JarFile(root.toFile())) {\n-                    return jar.stream().filter(f -> !f.isDirectory())\n-                            .map(ZipEntry::getName).collect(Collectors.toList());\n-                }\n-        }\n-\n-        @Override\n-        public ClassLoader loader() {\n-            return loader;\n-        }\n-\n-        @Override\n-        public void close() throws IOException {\n-            if (loader instanceof Closeable) ((Closeable) loader).close();\n-        }\n-\n-        public boolean isModule() throws IOException {\n-            if (Files.isDirectory(root)) {\n-                return Files.exists(root.resolve(MODULE_INFO_CLASS));\n-            } else {\n-                try (JarFile jar = new JarFile(root.toFile())) {\n-                    return jar.stream().map(ZipEntry::getName).anyMatch(MODULE_INFO_CLASS::equals);\n-                }\n-            }\n-        }\n-    }\n-\n-    class PathDestination implements Destination, Closeable {\n-        private final Path root;\n-        private final FileSystem fs;\n-        private final BiConsumer<String, byte[]> saver;\n-\n-        public PathDestination(Path root) throws IOException {\n-            fs = Files.isDirectory(root) ? null : FileSystems.newFileSystem(root, (ClassLoader) null);\n-            this.root = Files.isDirectory(root) ? root : fs.getPath(\"\/\");\n-            saver = (s, bytes) -> {\n-                try {\n-                    Path f = PathDestination.this.root.resolve(s);\n-                    Files.createDirectories(f.getParent());\n-                    Files.write(f, bytes);\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-            };\n-        }\n-\n-        @Override\n-        public void close() throws IOException {\n-            if (fs != null) fs.close();\n-        }\n-\n-        @Override\n-        public BiConsumer<String, byte[]> saver() {\n-            return saver;\n-        }\n-    }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/InstrumentationPlugin.java","additions":3,"deletions":283,"binary":false,"changes":286,"status":"modified"},{"patch":"@@ -0,0 +1,11 @@\n+package com.sun.tdk.jcov.instrument;\n+\n+import java.util.List;\n+\n+public interface ModuleInstrumentationPlugin {\n+    String getModuleName(byte[] moduleInfo);\n+\n+    byte[] addExports(List<String> exports, byte[] moduleInfo, ClassLoader loader);\n+\n+    byte[] clearHashes(byte[] moduleInfo, ClassLoader loader);\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/ModuleInstrumentationPlugin.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import java.io.Closeable;\n+import java.util.function.BiConsumer;\n+\n+public interface Destination extends Closeable {\n+    BiConsumer<String, byte[]> saver();\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/Destination.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+import java.util.function.Predicate;\n+\n+public class FilteringPlugin extends ProxyInstrumentationPlugin {\n+    private final Predicate<String> filter;\n+\n+    public FilteringPlugin(InstrumentationPlugin inner, Predicate<String> filter) {\n+        super(inner);\n+        this.filter = filter;\n+    }\n+\n+    @Override\n+    public void instrument(Collection<String> resources, ClassLoader loader,\n+                           BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n+        List<String> accepted = new ArrayList<>();\n+        List<String> rejected = new ArrayList<>();\n+        resources.forEach(r -> {\n+            if (filter.test(r)) accepted.add(r);\n+            else rejected.add(r);\n+        });\n+        getInner().instrument(accepted, loader, saver, parameters);\n+        rejected.forEach(c -> {\n+            try (InputStream in = loader.getResourceAsStream(c)) {\n+                saver.accept(c, in.readAllBytes());\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        });\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/FilteringPlugin.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.function.BiConsumer;\n+\n+public class ImplantingPlugin extends ProxyInstrumentationPlugin {\n+    private final Source source;\n+\n+    public ImplantingPlugin(InstrumentationPlugin inner, Source source) {\n+        super(inner);\n+        this.source = source;\n+    }\n+\n+    @Override\n+    public void instrument(Collection<String> classes, ClassLoader loader,\n+                           BiConsumer<String, byte[]> saver, InstrumentationParams parameters) throws Exception {\n+        getInner().instrument(classes, loader, saver, parameters);\n+        for (String r : source.resources())\n+            try (InputStream in = source.loader().getResourceAsStream(r)) {\n+                saver.accept(r, in.readAllBytes());\n+            }\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/ImplantingPlugin.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+\/**\n+ * A utility class which works with a given plugin in terms of file hierarchies.\n+ *\/\n+public class Instrumentation {\n+    private final InstrumentationPlugin inner;\n+\n+    public Instrumentation(InstrumentationPlugin inner) {\n+        this.inner = inner;\n+    }\n+\n+    public void instrument(Source source, Destination destination,\n+                           InstrumentationParams parameters) throws Exception {\n+        inner.instrument(source.resources(), source.loader(),\n+                destination.saver(), parameters);\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/Instrumentation.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.ModuleInstrumentationPlugin;\n+\n+import java.io.InputStream;\n+import java.util.function.BiConsumer;\n+\n+\/**\n+ * Helps to instrument modules.\n+ *\n+ * @see #Instrumentation\n+ *\/\n+public class ModuleInstrumentation extends Instrumentation {\n+    private final ModuleInstrumentationPlugin modulePlugin;\n+\n+    public ModuleInstrumentation(InstrumentationPlugin inner, ModuleInstrumentationPlugin modulePlugin) {\n+        super(inner);\n+        this.modulePlugin = modulePlugin;\n+    }\n+\n+    public ModuleInstrumentationPlugin getModulePluign() {\n+        return modulePlugin;\n+    }\n+\n+    \/**\n+     * Take any required action needed to instrument a module. This implementation does not do anything.\n+     *\n+     * @param moduleInfo\n+     * @param loader\n+     * @param destination\n+     * @throws Exception\n+     * @see ModuleInstrumentationPlugin\n+     *\/\n+    protected void proccessModule(byte[] moduleInfo, ClassLoader loader, BiConsumer<String, byte[]> destination)\n+            throws Exception {\n+    }\n+\n+    @Override\n+    public void instrument(Source source, Destination destination,\n+                           InstrumentationParams parameters) throws Exception {\n+        super.instrument(source, destination, parameters);\n+        try (InputStream in = source.loader().getResourceAsStream(InstrumentationPlugin.MODULE_INFO_CLASS)) {\n+            byte[] moduleInfo = in.readAllBytes();\n+            proccessModule(moduleInfo, source.loader(), destination.saver());\n+        }\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/ModuleInstrumentation.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+\n+\/**\n+ * A classloader to first load classes prom the provided location.\n+ *\/\n+public class OverridingClassLoader extends URLClassLoader {\n+\n+    private static URL[] toURL(Path root) {\n+        try {\n+            return new URL[]{root.toUri().toURL()};\n+        } catch (MalformedURLException e) {\n+            \/\/should not happen since getting teh URL legally\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private final ClassLoader backup;\n+\n+    public OverridingClassLoader(Path root, ClassLoader backup) {\n+        this(toURL(root), backup);\n+    }\n+\n+    public OverridingClassLoader(URL[] urls, ClassLoader backup) {\n+        super(urls);\n+        this.backup = backup;\n+    }\n+\n+    @Override\n+    public URL getResource(String name) {\n+        \/\/first try to find local resource, from the current module\n+        URL resource = findResource(name);\n+        \/\/for module-info it does not make sense to look in other classloaders\n+        if (name.equals(InstrumentationPlugin.MODULE_INFO_CLASS)) return resource;\n+        \/\/if none, try other modules\n+        if (resource == null) resource = backup.getResource(name);\n+        \/\/that should not happen during normal use\n+        \/\/if happens, refer to super, nothing else we can do\n+        if (resource == null) resource = super.getResource(name);\n+        return resource;\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/OverridingClassLoader.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.BiConsumer;\n+\n+public class PathDestination implements Destination, Closeable {\n+    private final Path root;\n+    private final FileSystem fs;\n+    private final BiConsumer<String, byte[]> saver;\n+\n+    public PathDestination(Path root) throws IOException {\n+        fs = Files.isDirectory(root) ? null : FileSystems.newFileSystem(root, (ClassLoader) null);\n+        this.root = Files.isDirectory(root) ? root : fs.getPath(\"\/\");\n+        saver = (s, bytes) -> {\n+            try {\n+                Path f = PathDestination.this.root.resolve(s);\n+                Files.createDirectories(f.getParent());\n+                Files.write(f, bytes);\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (fs != null) fs.close();\n+    }\n+\n+    @Override\n+    public BiConsumer<String, byte[]> saver() {\n+        return saver;\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/PathDestination.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.jar.JarFile;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+\n+public class PathSource implements Source, Closeable {\n+\n+    private final ClassLoader loader;\n+    private final Path root;\n+\n+    public PathSource(ClassLoader backup, Path root) {\n+        this.loader = new OverridingClassLoader(root, backup);\n+        this.root = root;\n+    }\n+\n+    @Override\n+    public Collection<String> resources() throws Exception {\n+        if (Files.isDirectory(root))\n+            return Files.find(root, Integer.MAX_VALUE, (f, a) -> Files.isRegularFile(f))\n+                    .map(r -> root.relativize(r).toString())\n+                    .collect(Collectors.toList());\n+        else\n+            try (JarFile jar = new JarFile(root.toFile())) {\n+                return jar.stream().filter(f -> !f.isDirectory())\n+                        .map(ZipEntry::getName).collect(Collectors.toList());\n+            }\n+    }\n+\n+    @Override\n+    public ClassLoader loader() {\n+        return loader;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (loader instanceof Closeable) ((Closeable) loader).close();\n+    }\n+\n+    public boolean isModule() throws IOException {\n+        if (Files.isDirectory(root)) {\n+            return Files.exists(root.resolve(InstrumentationPlugin.MODULE_INFO_CLASS));\n+        } else {\n+            try (JarFile jar = new JarFile(root.toFile())) {\n+                return jar.stream().map(ZipEntry::getName).anyMatch(InstrumentationPlugin.MODULE_INFO_CLASS::equals);\n+            }\n+        }\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/PathSource.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+\n+import java.io.OutputStream;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+public abstract class ProxyInstrumentationPlugin implements InstrumentationPlugin {\n+    private final InstrumentationPlugin inner;\n+\n+    protected ProxyInstrumentationPlugin(InstrumentationPlugin inner) {\n+        this.inner = inner;\n+    }\n+\n+    public InstrumentationPlugin getInner() {\n+        return inner;\n+    }\n+\n+    @Override\n+    public final Map<String, Consumer<OutputStream>> complete() throws Exception {\n+        return inner.complete();\n+    }\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/ProxyInstrumentationPlugin.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument.plugin;\n+\n+import java.io.Closeable;\n+import java.util.Collection;\n+\n+public interface Source extends Closeable {\n+    \/\/paths relative to the result root\n+    Collection<String> resources() throws Exception;\n+\n+    ClassLoader loader();\n+}\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/instrument\/plugin\/Source.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.tdk.jcov.instrument.InstrumentationParams;\n@@ -43,0 +44,1 @@\n+import java.util.function.Predicate;\n@@ -117,0 +119,8 @@\n+    public static Predicate<String> classNameFilter(InstrumentationParams params) {\n+        return r -> {\n+            if (isClassFile(r))\n+                return params.isIncluded(r.substring(0,\n+                        r.length() - FILE_TYPE.CLASS.name().length() - 1));\n+            else return true;\n+        };\n+    }\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/util\/Utils.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.*;\n@@ -74,1 +73,1 @@\n-\/\/    @Test\n+    @Test\n@@ -79,2 +78,1 @@\n-        params.add(\"-t\");\n-        params.add(template.toString());\n+        params.add(\"-t\"); params.add(template.toString());\n@@ -82,1 +80,1 @@\n-        new Instr().run(params.toArray(new String[0]));\n+        assertEquals(new Instr().run(params.toArray(new String[0])), 0);\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/instr\/InstrTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import com.sun.tdk.jcov.instrument.InstrumentationPlugin;\n+import com.sun.tdk.jcov.instrument.ModuleInstrumentationPlugin;\n@@ -32,1 +32,1 @@\n-public class JRETestPlugin extends TestPlugin implements InstrumentationPlugin.ModuleInstrumentationPlugin {\n+public class JRETestPlugin extends TestPlugin implements ModuleInstrumentationPlugin {\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/plugin\/JRETestPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}