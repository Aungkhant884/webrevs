{"files":[{"patch":"@@ -344,0 +344,2 @@\n+        <copy file=\"${test.src.dir}\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/syntheticity\/synthetic_template.xml\"\n+\t\ttodir=\"${result.dir}\/test\/classes\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/syntheticity\"\/>\n","filename":"build\/build.xml","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+\n@@ -107,3 +108,0 @@\n-                        if ((c.getAccess() & Opcodes.ACC_SYNTHETIC) != 0 && (m.getAccess() & Opcodes.ACC_SYNTHETIC) == 0){\n-                            newAccess = m.getAccess() | Opcodes.ACC_SYNTHETIC;\n-                        }\n@@ -192,1 +190,0 @@\n-     * @param modifiers - array to scan\n@@ -200,1 +197,1 @@\n-        return (c.getAccess() & Opcodes.ACC_PUBLIC) != 0;\n+        return c.getModifiers().isPublic();\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/processing\/CombinerDataProcessor.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report.dataprocessor.syntheticity;\n+\n+import com.sun.tdk.jcov.data.FileFormatException;\n+import com.sun.tdk.jcov.instrument.DataClass;\n+import com.sun.tdk.jcov.instrument.DataPackage;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.io.Reader;\n+import com.sun.tdk.jcov.processing.DefaultDataProcessorSPI;\n+import com.sun.tdk.jcov.processing.ProcessingException;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class SyntheticityTest {\n+\n+    static DataRoot data;\n+    static String template;\n+\n+    @BeforeClass\n+    public static void setup() {\n+        template = SyntheticityTest.class.getPackageName()\n+                .replace(\".\", \"\/\") + \"\/synthetic_template.xml\";\n+    }\n+    @Test\n+    public void load() throws FileFormatException {\n+        data = Reader.readXML(ClassLoader.getSystemResourceAsStream(template));\n+        DataPackage p = data.findPackage(\"package\");\n+        DataClass sc1 = p.findClass(\"SyntheticityClass$SyntheticClass\");\n+        assertTrue(sc1.findMethod(\"syntheticMethod\").getModifiers().isSynthetic());\n+        assertFalse(sc1.findMethod(\"nonSyntheticMethod\").getModifiers().isSynthetic());\n+        DataClass sc2 = p.findClass(\"SyntheticityClass$NonSyntheticClass\");\n+        assertTrue(sc2.findMethod(\"syntheticMethod\").getModifiers().isSynthetic());\n+        assertFalse(sc2.findMethod(\"nonSyntheticMethod\").getModifiers().isSynthetic());\n+    }\n+    @Test(dependsOnMethods = \"load\")\n+   public void transform() throws ProcessingException {\n+        data = new DefaultDataProcessorSPI().getDataProcessor().process(data);\n+        DataPackage p = data.findPackage(\"package\");\n+        DataClass sc = p.findClass(\"SyntheticityClass\");\n+        assertTrue(sc.findMethod(\"$SyntheticClass.syntheticMethod\").getModifiers().isSynthetic());\n+        assertFalse(sc.findMethod(\"$SyntheticClass.nonSyntheticMethod\").getModifiers().isSynthetic());\n+        assertTrue(sc.findMethod(\"$NonSyntheticClass.syntheticMethod\").getModifiers().isSynthetic());\n+        assertFalse(sc.findMethod(\"$NonSyntheticClass.nonSyntheticMethod\").getModifiers().isSynthetic());\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/syntheticity\/SyntheticityTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+<?xml version='1.0' encoding='UTF-8'?>\n+<!--\n+Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+This code is free software; you can redistribute it and\/or modify it\n+under the terms of the GNU General Public License version 2 only, as\n+published by the Free Software Foundation.  Oracle designates this\n+particular file as subject to the \"Classpath\" exception as provided\n+by Oracle in the LICENSE file that accompanied this code.\n+\n+This code is distributed in the hope that it will be useful, but WITHOUT\n+ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+version 2 for more details (a copy is included in the LICENSE file that\n+accompanied this code).\n+\n+You should have received a copy of the GNU General Public License version\n+2 along with this work; if not, write to the Free Software Foundation,\n+Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\n+Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+or visit www.oracle.com if you need additional information or have any\n+questions.\n+-->\n+<coverage\n+        xmlns='http:\/\/java.sun.com\/jcov\/namespace'\n+        xmlns:xsi='http:\/\/www.w3.org\/2001\/XMLSchema-instance'\n+        xsi:schemaLocation='http:\/\/java.sun.com\/jcov\/namespace coverage.xsd'>\n+\n+\t<head>\n+\t\t<property name='coverage.generator.args' val=''\/>\n+\t\t<property name='coverage.generator.mode' val='BRANCH'\/>\n+\t\t<property name='coverage.generator.internal' val='include'\/>\n+\t\t<property name='coverage.generator.include' val=''\/>\n+\t\t<property name='coverage.generator.exclude' val=''\/>\n+\t\t<property name='coverage.generator.caller_include' val='.*'\/>\n+\t\t<property name='coverage.generator.caller_exclude' val=''\/>\n+\t\t<property name='coverage.created.date' val='2022-09-27'\/>\n+\t\t<property name='coverage.created.time' val='03:25:24'\/>\n+\t\t<property name='coverage.generator.fullversion' val=' 3.0_13 (os.ea) September 26, 2022'\/>\n+\t\t<property name='coverage.generator.name' val='jcov'\/>\n+\t\t<property name='coverage.generator.version' val='3.0'\/>\n+\t\t<property name='coverage.spec.version' val='1.3'\/>\n+\t\t<property name='java.runtime.version' val='11.0.12+8-LTS-237'\/>\n+\t\t<property name='java.version' val='11.0.12'\/>\n+\t\t<property name='os.arch' val='x86_64'\/>\n+\t\t<property name='os.name' val='Mac OS X'\/>\n+\t\t<property name='os.version' val='11.5'\/>\n+\t\t<property name='user.name' val='shura'\/>\n+\t\t<property name='dynamic.collected' val='false'\/>\n+\t\t<property name='id.count' val='4'\/>\n+\t<\/head>\n+\t<package name=\"package\" moduleName=\"no_module\">\n+\t\t<class name=\"SyntheticityClass\" supername=\"java\/lang\/Object\" flags=' synthetic' source=\"SyntheticityClass.java\">\n+\n+\t\t<\/class>\n+\t\t<class name=\"SyntheticityClass$SyntheticClass\" supername=\"java\/lang\/Object\" flags=' synthetic' source=\"SyntheticityClass.java\">\n+\t\t\t<meth name=\"syntheticMethod\" vmsig=\"()V\" flags=' ' access=\"4097\" length=\"0\">\n+\t\t\t\t<bl s=\"0\" e=\"-1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"-1\" id=\"1\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"nonSyntheticMethod\" vmsig=\"()V\" flags=' ' access=\"1\" length=\"0\">\n+\t\t\t\t<bl s=\"0\" e=\"-1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"-1\" id=\"1\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t\t<class name=\"SyntheticityClass$NonSyntheticClass\" supername=\"java\/lang\/Object\" flags=' ' source=\"SyntheticityClass.java\">\n+\t\t\t<meth name=\"syntheticMethod\" vmsig=\"()V\" flags=' ' access=\"4097\" length=\"0\">\n+\t\t\t\t<bl s=\"0\" e=\"-1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"-1\" id=\"1\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t<\/meth>\n+\t\t\t<meth name=\"nonSyntheticMethod\" vmsig=\"()V\" flags=' ' access=\"1\" length=\"0\">\n+\t\t\t\t<bl s=\"0\" e=\"-1\">\n+\t\t\t\t\t<methenter s=\"0\" e=\"-1\" id=\"1\" count=\"0\"\/>\n+\t\t\t\t<\/bl>\n+\t\t\t<\/meth>\n+\t\t<\/class>\n+\t<\/package>\n+<\/coverage>\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/dataprocessor\/syntheticity\/synthetic_template.xml","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"}]}