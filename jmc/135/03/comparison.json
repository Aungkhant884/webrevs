{"files":[{"patch":"@@ -58,0 +58,1 @@\n+import java.util.ArrayList;\n@@ -59,1 +60,1 @@\n-import java.util.concurrent.Callable;\n+import java.util.List;\n@@ -65,1 +66,0 @@\n-import java.util.concurrent.Future;\n@@ -158,1 +158,2 @@\n-\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);\n+\tprivate static final int MODEL_EXECUTOR_THREADS_NUMBER = 3;\n+\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(MODEL_EXECUTOR_THREADS_NUMBER);\n@@ -170,2 +171,3 @@\n-\tprivate ModelRebuildCallable modelRebuildCallable;\n-\tprivate Future<Void> modelCalculationFuture;\n+\tprivate int activeModelRebuildThread;\n+\tprivate List<ModelRebuildRunable> modelRebuildRunnableList = new ArrayList<ModelRebuildRunable>(\n+\t\t\tMODEL_EXECUTOR_THREADS_NUMBER);\n@@ -190,1 +192,0 @@\n-\n@@ -194,1 +195,1 @@\n-\t\tINIT, CALCULATION, READY, ABORTED, NONE;\n+\t\tNOT_STARTED, STARTED, FINISHED, NONE;\n@@ -256,1 +257,0 @@\n-\n@@ -283,1 +283,1 @@\n-\tprivate static class ModelRebuildCallable implements Callable<Void> {\n+\tprivate static class ModelRebuildRunable implements Runnable {\n@@ -285,1 +285,0 @@\n-\t\tprivate volatile boolean isInvalid;\n@@ -288,0 +287,1 @@\n+\t\tprivate volatile boolean isInvalid;\n@@ -289,1 +289,1 @@\n-\t\tprivate ModelRebuildCallable(FlameGraphView view, IItemCollection items) {\n+\t\tprivate ModelRebuildRunable(FlameGraphView view, IItemCollection items) {\n@@ -299,2 +299,2 @@\n-\t\tpublic Void call() throws Exception {\n-\t\t\tview.modelState = ModelState.CALCULATION;\n+\t\tpublic void run() {\n+\t\t\tview.modelState = ModelState.STARTED;\n@@ -303,0 +303,3 @@\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t}\n@@ -304,1 +307,0 @@\n-\t\t\tString jsonModel = view.toJSonModel(traceNode).toString();\n@@ -306,2 +308,8 @@\n-\t\t\t\tview.modelState = ModelState.ABORTED;\n-\t\t\t\treturn null;\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString jsonModel = view.toJSonModel(traceNode, this).toString();\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t} else {\n+\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, jsonModel));\n@@ -309,3 +317,0 @@\n-\t\t\tview.modelState = ModelState.READY;\n-\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, jsonModel));\n-\t\t\treturn null;\n@@ -385,3 +390,3 @@\n-\t\tif (modelCalculationFuture != null) {\n-\t\t\tmodelRebuildCallable.setInvalid();\n-\t\t\tmodelCalculationFuture.cancel(true);\n+\t\tif (!modelRebuildRunnableList.isEmpty()) {\n+\t\t\tmodelRebuildRunnableList.get(activeModelRebuildThread).setInvalid();\n+\t\t\tactiveModelRebuildThread = ++activeModelRebuildThread % MODEL_EXECUTOR_THREADS_NUMBER;\n@@ -390,1 +395,0 @@\n-\t\tmodelState = ModelState.INIT;\n@@ -392,2 +396,5 @@\n-\t\tmodelRebuildCallable = new ModelRebuildCallable(this, items);\n-\t\tmodelCalculationFuture = MODEL_EXECUTOR.submit(modelRebuildCallable);\n+\t\tmodelState = ModelState.NOT_STARTED;\n+\t\tmodelRebuildRunnableList.add(activeModelRebuildThread, new ModelRebuildRunable(this, items));\n+\t\tif (!modelRebuildRunnableList.get(activeModelRebuildThread).isInvalid) {\n+\t\t\tMODEL_EXECUTOR.execute(modelRebuildRunnableList.get(activeModelRebuildThread));\n+\t\t}\n@@ -397,1 +404,1 @@\n-\t\tif (ModelState.READY.equals(modelState) && items.equals(currentItems) && !browser.isDisposed()) {\n+\t\tif (ModelState.FINISHED.equals(modelState) && items.equals(currentItems) && !browser.isDisposed()) {\n@@ -492,1 +499,1 @@\n-\tprivate StringBuilder toJSonModel(TraceNode root) {\n+\tprivate StringBuilder toJSonModel(TraceNode root, ModelRebuildRunable rebuildCallable) {\n@@ -496,1 +503,1 @@\n-\t\trenderChildren(builder, root);\n+\t\trenderChildren(builder, root, rebuildCallable);\n@@ -501,1 +508,1 @@\n-\tprivate static void render(StringBuilder builder, TraceNode node) {\n+\tprivate static void render(StringBuilder builder, TraceNode node, ModelRebuildRunable rebuildCallable) {\n@@ -505,1 +512,1 @@\n-\t\trenderChildren(builder, node);\n+\t\trenderChildren(builder, node, rebuildCallable);\n@@ -509,3 +516,4 @@\n-\tprivate static void renderChildren(StringBuilder builder, TraceNode node) {\n-\t\tfor (int i = 0; i < node.getChildren().size(); i++) {\n-\t\t\trender(builder, node.getChildren().get(i));\n+\tprivate static void renderChildren(StringBuilder builder, TraceNode node, ModelRebuildRunable rebuildCallable) {\n+\t\tint i = 0;\n+\t\twhile (i < node.getChildren().size() && !rebuildCallable.isInvalid) {\n+\t\t\trender(builder, node.getChildren().get(i), rebuildCallable);\n@@ -515,0 +523,1 @@\n+\t\t\ti++;\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":42,"deletions":33,"binary":false,"changes":75,"status":"modified"}]}