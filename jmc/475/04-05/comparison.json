{"files":[{"patch":"@@ -108,0 +108,1 @@\n+import org.openjdk.jmc.common.unit.QuantityConversionException;\n@@ -983,1 +984,5 @@\n-\t\t\treturn formatDuration(duration.longValue(), duration.getUnit().getIdentifier());\n+\t\t\ttry {\n+\t\t\t\treturn formatDuration(duration.longValueIn(UnitLookup.NANOSECOND));\n+\t\t\t} catch (QuantityConversionException e) {\n+\t\t\t\treturn Messages.N_A;\n+\t\t\t}\n@@ -987,1 +992,1 @@\n-\tprivate String formatDuration(long duration, String unit) {\n+\tprivate String formatDuration(long duration) {\n@@ -989,11 +994,2 @@\n-\t\tString formattedTime = \"NA\";\n-\t\tif (unit.equalsIgnoreCase(\"ns\")) {\n-\t\t\trawDuration = Duration.ofNanos(duration);\n-\t\t} else if (unit.equalsIgnoreCase(\"ms\")) {\n-\t\t\trawDuration = Duration.ofMillis(duration);\n-\t\t} else if (unit.equalsIgnoreCase(\"s\")) {\n-\t\t\trawDuration = Duration.ofSeconds(duration);\n-\t\t} else if (unit.equalsIgnoreCase(\"ticks\")) {\n-\t\t\trawDuration = Duration.ofNanos(duration * 100);\n-\t\t}\n-\n+\t\tString formattedTime = Messages.N_A;\n+\t\trawDuration = Duration.ofNanos(duration);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"}]}