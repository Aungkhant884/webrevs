{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -518,0 +518,1 @@\n+\tpublic static String STACKTRACE_VIEW_DURATION_COLUMN_NAME;\n@@ -531,1 +532,1 @@\n-\tpublic static String STACKTRACE_VIEW_PERCENTAGE_BY_DURATION;\n+\tpublic static String STACKTRACE_VIEW_DURATION;\n@@ -651,1 +652,2 @@\n-\tpublic static String stackTraceMessage(double duration, double totalDuration, String frameFraction) {\n+\tpublic static String stackTraceMessage(\n+\t\tdouble duration, String durationUnit, double totalDuration, String totalDurationUnit, String frameFraction) {\n@@ -658,1 +660,2 @@\n-\t\treturn NLS.bind(message, new Object[] {duration, frameFraction, totalDuration});\n+\t\treturn NLS.bind(message,\n+\t\t\t\tnew Object[] {duration, durationUnit, frameFraction, totalDuration, totalDurationUnit});\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.time.Duration;\n@@ -107,0 +108,1 @@\n+import org.openjdk.jmc.common.unit.QuantityConversionException;\n@@ -428,2 +430,2 @@\n-\t\tIAction perByDurationAction = ActionToolkit.checkAction(this::setPerDuration,\n-\t\t\t\tMessages.STACKTRACE_VIEW_PERCENTAGE_BY_DURATION, CoreImages.TIMESPAN);\n+\t\tIAction perByDurationAction = ActionToolkit.checkAction(this::setPerDuration, Messages.STACKTRACE_VIEW_DURATION,\n+\t\t\t\tCoreImages.TIMESPAN);\n@@ -574,1 +576,1 @@\n-\t\t\t\t\tMessages.STACKTRACE_VIEW_PERCENTAGE_COLUMN_NAME,\n+\t\t\t\t\tMessages.STACKTRACE_VIEW_PERCENTAGE_COLUMN_NAME, Messages.STACKTRACE_VIEW_DURATION_COLUMN_NAME,\n@@ -578,1 +580,1 @@\n-\t\t\t\t\t\t\tpercentageLabelProvider, percentageByDurationLabelProvider));\n+\t\t\t\t\t\t\tpercentageLabelProvider, durationLabelProvider, percentageByDurationLabelProvider));\n@@ -612,1 +614,4 @@\n-\t\tif (perDuration)\n+\n+\t\tif (perDuration) {\n+\t\t\tbuildColumn(viewer, Messages.STACKTRACE_VIEW_DURATION_COLUMN_NAME, SWT.RIGHT, 300)\n+\t\t\t\t\t.setLabelProvider(durationLabelProvider);\n@@ -615,0 +620,1 @@\n+\t\t}\n@@ -853,1 +859,1 @@\n-\t\t\tif (event.index == 3 && (total = rootFork.getAggregateItemsInFork()) > 0) { \/\/ index == 3 => percentage (by duration) column\n+\t\t\tif (event.index == 4 && (total = rootFork.getAggregateItemsInFork()) > 0) { \/\/ index == 4 => percentage (by duration) column\n@@ -911,2 +917,6 @@\n-\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(duration.doubleValue() \/ (double) totalDuration.doubleValue())\n-\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tif (duration.doubleValue() > 0) {\n+\t\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(duration.doubleValue() \/ (double) totalDuration.doubleValue())\n+\t\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\t} else {\n+\t\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(0).displayUsing(IDisplayable.AUTO);\n+\t\t\t}\n@@ -923,3 +933,8 @@\n-\t\t\tString frameFraction = UnitLookup.PERCENT_UNITY\n-\t\t\t\t\t.quantity(duration.doubleValue() \/ (double) totalDuration.doubleValue())\n-\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tString frameFraction = \"\";\n+\t\t\tif (duration.doubleValue() > 0) {\n+\t\t\t\tframeFraction = UnitLookup.PERCENT_UNITY\n+\t\t\t\t\t\t.quantity(duration.doubleValue() \/ (double) totalDuration.doubleValue())\n+\t\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\t} else {\n+\t\t\t\tframeFraction = UnitLookup.PERCENT_UNITY.quantity(0).displayUsing(IDisplayable.AUTO);\n+\t\t\t}\n@@ -928,1 +943,2 @@\n-\t\t\tsb.append(Messages.stackTraceMessage(duration.doubleValue(), totalDuration.doubleValue(), frameFraction));\n+\t\t\tsb.append(Messages.stackTraceMessage(duration.doubleValue(), duration.getUnit().getIdentifier(),\n+\t\t\t\t\ttotalDuration.doubleValue(), totalDuration.getUnit().getIdentifier(), frameFraction));\n@@ -963,0 +979,25 @@\n+\tprivate final ColumnLabelProvider durationLabelProvider = new ColumnLabelProvider() {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\tIQuantity duration = getDurationCount(frame.getItems());\n+\t\t\ttry {\n+\t\t\t\treturn formatDuration(duration.longValueIn(UnitLookup.NANOSECOND));\n+\t\t\t} catch (QuantityConversionException e) {\n+\t\t\t\treturn Messages.N_A;\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tprivate String formatDuration(long duration) {\n+\t\tDuration rawDuration = null;\n+\t\tString formattedTime = Messages.N_A;\n+\t\trawDuration = Duration.ofNanos(duration);\n+\t\tif (rawDuration != null) {\n+\t\t\tformattedTime = String.format(\"%d h %d m %d s %d ms %d ns\", rawDuration.toHoursPart(),\n+\t\t\t\t\trawDuration.toMinutesPart(), rawDuration.toSecondsPart(), rawDuration.toMillisPart(),\n+\t\t\t\t\trawDuration.toNanosPart() % 1000000L);\n+\t\t}\n+\t\treturn formattedTime;\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":54,"deletions":13,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -501,0 +501,1 @@\n+STACKTRACE_VIEW_DURATION_COLUMN_NAME=Duration\n@@ -512,1 +513,1 @@\n-STACKTRACE_VIEW_PERCENTAGE_BY_DURATION=Show Percentage By Duration\n+STACKTRACE_VIEW_DURATION=Show Duration\n@@ -523,2 +524,2 @@\n-STACKTRACE_VIEW_TRACE_OF_TOTAL={0} stack trace ({1} of total {2})\n-STACKTRACE_VIEW_TRACES_OF_TOTAL={0} stack traces ({1} of total {2})\n+STACKTRACE_VIEW_TRACE_OF_TOTAL={0} {1} stack trace ({2} of total {3} {4})\n+STACKTRACE_VIEW_TRACES_OF_TOTAL={0} {1} stack traces ({2} of total {3} {4})\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}