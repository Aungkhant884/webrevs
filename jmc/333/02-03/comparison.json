{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Map;\n@@ -58,0 +59,1 @@\n+import org.openjdk.jmc.flightrecorder.parser.IConstantPoolExtension;\n@@ -275,0 +277,5 @@\n+\n+\t@Override\n+\tpublic Map<String, IConstantPoolExtension> getConstantPoolExtensions() {\n+\t\treturn parserStats.getConstantPoolExtensions();\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/EventCollection.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import java.util.Collections;\n+import java.util.Map;\n@@ -39,0 +41,1 @@\n+import org.openjdk.jmc.flightrecorder.parser.IConstantPoolExtension;\n@@ -67,0 +70,4 @@\n+\n+\tdefault Map<String, IConstantPoolExtension> getConstantPoolExtensions() {\n+\t\treturn Collections.emptyMap();\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/IParserStats.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Map;\n@@ -41,0 +42,1 @@\n+import org.openjdk.jmc.flightrecorder.parser.IConstantPoolExtension;\n@@ -73,0 +75,4 @@\n+\n+\tpublic Map<String, IConstantPoolExtension> getConstantPoolExtensions() {\n+\t\treturn parserStats.getConstantPoolExtensions();\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/EventArrays.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -210,0 +210,7 @@\n+\n+\tpublic void addConstantPoolExtensions() {\n+\t\tfor (IConstantPoolExtension ext : constPoolExtensions) {\n+\t\t\text.eventsLoaded();\n+\t\t\tparserStats.addConstantPoolExtension(ext);\n+\t\t}\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/LoaderContext.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.Set;\n@@ -65,0 +66,1 @@\n+import org.openjdk.jmc.flightrecorder.parser.IConstantPoolExtension;\n@@ -75,1 +77,1 @@\n-\tprivate final ConcurrentLinkedDeque<ConstantPoolInfo> constantPoolInfoList = new ConcurrentLinkedDeque<ConstantPoolInfo>();\n+\tprivate final ConcurrentLinkedDeque<ConstantPoolInfo> constantPoolInfoList = new ConcurrentLinkedDeque<>();\n@@ -79,0 +81,1 @@\n+\tprivate Map<String, IConstantPoolExtension> constantPoolExtensions = new ConcurrentHashMap<>();\n@@ -116,0 +119,4 @@\n+\tpublic void addConstantPoolExtension(IConstantPoolExtension extension) {\n+\t\tconstantPoolExtensions.put(extension.getId(), extension);\n+\t}\n+\n@@ -179,0 +186,4 @@\n+\tpublic Map<String, IConstantPoolExtension> getConstantPoolExtensions() {\n+\t\treturn constantPoolExtensions;\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/ParserStats.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+\t\tcontext.addConstantPoolExtensions();\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/ChunkLoaderV1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.flightrecorder.IParserStats;\n@@ -43,1 +45,2 @@\n- * parsed Provides callbacks for constant pools reads, referencing, resolution and full resolution\n+ * parsed Provides callbacks for constant pools reads, referencing, simple resolution, full resolution\n+ * and parsing is finished\n@@ -47,0 +50,8 @@\n+\t\/**\n+\t * @return id of the extension, by default the simple class name.\n+\t * \t\t\tThis id will be exposed in the Map returned by {@link IParserStats#getConstantPoolExtensions()}\n+\t *\/\n+\tdefault String getId() {\n+\t\treturn getClass().getSimpleName();\n+\t}\n+\n@@ -103,0 +114,14 @@\n+\n+\t\/**\n+\t * Called when all events are loaded (end of parsing)\n+\t *\/\n+\tdefault void eventsLoaded() {\n+\n+\t}\n+\n+\t\/**\n+\t * @return collection of items built by the extension\n+\t *\/\n+\tdefault IItemCollection getItemCollection() {\n+\t\treturn null;\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/parser\/IConstantPoolExtension.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import org.openjdk.jmc.flightrecorder.IParserStats;\n@@ -117,2 +118,1 @@\n-\t\tMyParserExtension extension = new MyParserExtension();\n-\t\textensions.add(extension);\n+\t\textensions.add(new MyParserExtension());\n@@ -123,0 +123,4 @@\n+\t\tIConstantPoolExtension ext = ((IParserStats) items).getConstantPoolExtensions()\n+\t\t\t\t.get(MyConstantPoolExtension.class.getSimpleName());\n+\t\tAssert.assertNotNull(ext);\n+\t\tMyConstantPoolExtension extension = (MyConstantPoolExtension) ext;\n@@ -124,1 +128,1 @@\n-\t\t\tAssert.assertTrue(extension.currentConstantPoolExt.readEventTypes.contains(eventType));\n+\t\t\tAssert.assertTrue(extension.readEventTypes.contains(eventType));\n@@ -127,1 +131,1 @@\n-\t\t\tAssert.assertTrue(extension.currentConstantPoolExt.referencedEventTypes.contains(eventType));\n+\t\t\tAssert.assertTrue(extension.referencedEventTypes.contains(eventType));\n@@ -130,1 +134,1 @@\n-\t\t\tAssert.assertTrue(extension.currentConstantPoolExt.resolvedEventTypes.contains(eventType));\n+\t\t\tAssert.assertTrue(extension.resolvedEventTypes.contains(eventType));\n@@ -136,12 +140,0 @@\n-\t\tMyConstantPoolExtension currentConstantPoolExt;\n-\n-\t\t@Override\n-\t\tpublic String getValueInterpretation(String eventTypeId, String fieldId) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic IEventSinkFactory getEventSinkFactory(IEventSinkFactory subFactory) {\n-\t\t\treturn subFactory;\n-\t\t}\n-\n@@ -150,2 +142,1 @@\n-\t\t\tcurrentConstantPoolExt = new MyConstantPoolExtension();\n-\t\t\treturn currentConstantPoolExt;\n+\t\t\treturn new MyConstantPoolExtension();\n@@ -153,1 +144,0 @@\n-\n@@ -195,0 +185,1 @@\n+\t\t\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/ConstantPoolExtensionTest.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"}]}