{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import java.util.concurrent.CopyOnWriteArrayList;\n@@ -56,0 +57,1 @@\n+import org.openjdk.jmc.flightrecorder.parser.IConstantPoolExtension;\n@@ -69,0 +71,1 @@\n+\tprivate final List<IConstantPoolExtension> constPoolExtensions = new CopyOnWriteArrayList<>();\n@@ -80,0 +83,6 @@\n+\t\tfor (IParserExtension extension : extensions) {\n+\t\t\tIConstantPoolExtension constantPoolExtension = extension.createConstantPoolExtension();\n+\t\t\tif (constantPoolExtension != null) {\n+\t\t\t\tconstPoolExtensions.add(constantPoolExtension);\n+\t\t\t}\n+\t\t}\n@@ -106,1 +115,1 @@\n-\t\tfor (IParserExtension m : extensions) {\n+\t\tfor (IConstantPoolExtension m : constPoolExtensions) {\n@@ -114,1 +123,1 @@\n-\t\tfor (IParserExtension m : extensions) {\n+\t\tfor (IConstantPoolExtension m : constPoolExtensions) {\n@@ -122,1 +131,1 @@\n-\t\tfor (IParserExtension m : extensions) {\n+\t\tfor (IConstantPoolExtension m : constPoolExtensions) {\n@@ -129,1 +138,1 @@\n-\t\tfor (IParserExtension m : extensions) {\n+\t\tfor (IConstantPoolExtension m : constPoolExtensions) {\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/LoaderContext.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.parser;\n+\n+import java.util.Map;\n+\n+import org.openjdk.jmc.common.collection.FastAccessNumberMap;\n+\n+\/**\n+ * Interface for Flight Recorder constant pool extensions. Implementation are created by\n+ * {@link IParserExtension#createConstantPoolExtension()} each time a recording is starting to be\n+ * parsed Provides callbacks for constant pools reads, referencing, resolution and full resolution\n+ *\/\n+public interface IConstantPoolExtension {\n+\n+\t\/**\n+\t * Called when a constant is read from the Metadata to put into the constant pool.\n+\t * \n+\t * @param constantIndex\n+\t *            index inside the metadata that is used to reference from other places inside the\n+\t *            recording.\n+\t * @param constant\n+\t *            actual value of the constant.\n+\t * @param eventTypeId\n+\t *            type id of the constant pool.\n+\t * @return actual value of the constant. Could be a new value to be replaced by.\n+\t *\/\n+\tdefault Object constantRead(long constantIndex, Object constant, String eventTypeId) {\n+\t\treturn constant;\n+\t}\n+\n+\t\/**\n+\t * Called when a referenced constant is read from another constant pool or actual recording\n+\t * events.\n+\t * \n+\t * @param constant\n+\t *            actual constant value.\n+\t * @param poolName\n+\t *            name of the constant pool.\n+\t * @param eventTypeId\n+\t *            type id if the event referencing the constant.\n+\t * @return actual value of the constant. Could be a new value to be replaced by.\n+\t *\/\n+\tdefault Object constantReferenced(Object constant, String poolName, String eventTypeId) {\n+\t\treturn constant;\n+\t}\n+\n+\t\/**\n+\t * Called when a referenced constant is resolved from another pool or actual recording events.\n+\t * \n+\t * @param constant\n+\t *            actual constant value.\n+\t * @param poolName\n+\t *            name of the constant pool.\n+\t * @param eventTypeId\n+\t *            type id if the event referencing the constant.\n+\t * @return actual value of the constant. Could be a new value to be replaced by.\n+\t *\/\n+\tdefault Object constantResolved(Object constant, String poolName, String eventTypeId) {\n+\t\treturn constant;\n+\t}\n+\n+\t\/**\n+\t * Called when all constant pools are resolved.\n+\t * \n+\t * @param constantPools\n+\t *            map of all constant pools by name.\n+\t *\/\n+\tdefault void allConstantPoolsResolved(Map<String, FastAccessNumberMap<Object>> constantPools) {\n+\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/parser\/IConstantPoolExtension.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -35,4 +35,0 @@\n-import java.util.Map;\n-\n-import org.openjdk.jmc.common.collection.FastAccessNumberMap;\n-\n@@ -41,2 +37,1 @@\n- * prime responsibility is to create and link {@link IEventSinkFactory} instances. Parser extensions\n- * provide also callbacks for constant pools reads, referencing, resolution and full resolution\n+ * prime responsibility is to create and link {@link IEventSinkFactory} instances.\n@@ -79,1 +74,1 @@\n-\t * Called when a constant is read from the Metadata to put into the constant pool.\n+\t * creates an instance of IConstantPoolExtension at the beginning of the load of a recording\n@@ -81,8 +76,1 @@\n-\t * @param constantIndex\n-\t *            index inside the metadata that is used to reference from other places inside the\n-\t *            recording.\n-\t * @param constant\n-\t *            actual value of the constant.\n-\t * @param eventTypeId\n-\t *            type id of the constant pool.\n-\t * @return actual value of the constant. Could be a new value to be replaced by.\n+\t * @return an instance implementing IConstantPoolExtension\n@@ -90,43 +78,2 @@\n-\tdefault Object constantRead(long constantIndex, Object constant, String eventTypeId) {\n-\t\treturn constant;\n-\t}\n-\n-\t\/**\n-\t * Called when a referenced constant is read from another constant pool or actual recording\n-\t * events.\n-\t * \n-\t * @param constant\n-\t *            actual constant value.\n-\t * @param poolName\n-\t *            name of the constant pool.\n-\t * @param eventTypeId\n-\t *            type id if the event referencing the constant.\n-\t * @return actual value of the constant. Could be a new value to be replaced by.\n-\t *\/\n-\tdefault Object constantReferenced(Object constant, String poolName, String eventTypeId) {\n-\t\treturn constant;\n-\t}\n-\n-\t\/**\n-\t * Called when a referenced constant is resolved from another pool or actual recording events.\n-\t * \n-\t * @param constant\n-\t *            actual constant value.\n-\t * @param poolName\n-\t *            name of the constant pool.\n-\t * @param eventTypeId\n-\t *            type id if the event referencing the constant.\n-\t * @return actual value of the constant. Could be a new value to be replaced by.\n-\t *\/\n-\tdefault Object constantResolved(Object constant, String poolName, String eventTypeId) {\n-\t\treturn constant;\n-\t}\n-\n-\t\/**\n-\t * Called when all constant pools are resolved.\n-\t * \n-\t * @param constantPools\n-\t *            map of all constant pools by name.\n-\t *\/\n-\tdefault void allConstantPoolsResolved(Map<String, FastAccessNumberMap<Object>> constantPools) {\n-\n+\tdefault IConstantPoolExtension createConstantPoolExtension() {\n+\t\treturn null;\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/parser\/IParserExtension.java","additions":5,"deletions":58,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import org.openjdk.jmc.flightrecorder.parser.IConstantPoolExtension;\n@@ -56,1 +57,1 @@\n-public class ParserExtensionTest {\n+public class ConstantPoolExtensionTest {\n@@ -119,1 +120,1 @@\n-\t\t\t\tParserExtensionTest.class.getClassLoader().getResource(\"recordings\/metadata_new.jfr\").getFile());\n+\t\t\t\tConstantPoolExtensionTest.class.getClassLoader().getResource(\"recordings\/metadata_new.jfr\").getFile());\n@@ -123,1 +124,1 @@\n-\t\t\tAssert.assertTrue(extension.readEventTypes.contains(eventType));\n+\t\t\tAssert.assertTrue(extension.currentConstantPoolExt.readEventTypes.contains(eventType));\n@@ -126,1 +127,1 @@\n-\t\t\tAssert.assertTrue(extension.referencedEventTypes.contains(eventType));\n+\t\t\tAssert.assertTrue(extension.currentConstantPoolExt.referencedEventTypes.contains(eventType));\n@@ -129,1 +130,1 @@\n-\t\t\tAssert.assertTrue(extension.resolvedEventTypes.contains(eventType));\n+\t\t\tAssert.assertTrue(extension.currentConstantPoolExt.resolvedEventTypes.contains(eventType));\n@@ -135,2 +136,1 @@\n-\t\tSet<String> readEventTypes = new HashSet<>();\n-\t\tSet<String> referencedEventTypes = new HashSet<>();\n+\t\tMyConstantPoolExtension currentConstantPoolExt;\n@@ -148,0 +148,12 @@\n+\t\t@Override\n+\t\tpublic IConstantPoolExtension createConstantPoolExtension() {\n+\t\t\tcurrentConstantPoolExt = new MyConstantPoolExtension();\n+\t\t\treturn currentConstantPoolExt;\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class MyConstantPoolExtension implements IConstantPoolExtension {\n+\t\tSet<String> readEventTypes = new HashSet<>();\n+\t\tSet<String> referencedEventTypes = new HashSet<>();\n+\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/ConstantPoolExtensionTest.java","additions":19,"deletions":7,"binary":false,"changes":26,"previous_filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/ParserExtensionTest.java","status":"renamed"}]}