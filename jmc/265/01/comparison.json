{"files":[{"patch":"@@ -54,0 +54,1 @@\n+\tprivate Button lessThenOracleJDK11Checkbox;\n@@ -65,1 +66,1 @@\n-\t\tint cols = 2;\n+\t\tint cols = 3;\n@@ -73,0 +74,1 @@\n+\t\tcreateLessThenOracleJdk11(comp, cols);\n@@ -122,0 +124,16 @@\n+\tprivate void createLessThenOracleJdk11(Composite parent, int cols) {\n+\t\tlessThenOracleJDK11Checkbox = new Button(parent, SWT.CHECK);\n+\t\tlessThenOracleJDK11Checkbox.setText(\"Oracle JDK < 11\");\n+\t\tlessThenOracleJDK11Checkbox\n+\t\t\t\t.setToolTipText(\"Only check this if it really is an Oracle JDK. For OpenJDK, leave this unchecked.\");\n+\t\tlessThenOracleJDK11Checkbox.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tmodel.setOracleJdkLessThan11(lessThenOracleJDK11Checkbox.getSelection());\n+\t\t\t}\n+\t\t});\n+\t\tGridData gd = new GridData(SWT.FILL, SWT.FILL, false, false);\n+\t\tgd.horizontalSpan = cols - 1;\n+\t\tlessThenOracleJDK11Checkbox.setLayoutData(gd);\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.ide.launch\/src\/main\/java\/org\/openjdk\/jmc\/ide\/launch\/JfrLaunchPage.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+\tprivate final boolean lessThenOracleJdk11;\n@@ -104,1 +105,2 @@\n-\t\t\tIQuantity delay, String settings, String jfrFilename, String name, boolean continuous) {\n+\t\t\tIQuantity delay, String settings, String jfrFilename, String name, boolean continuous,\n+\t\t\tboolean lessThenOracleJdk11) {\n@@ -113,0 +115,1 @@\n+\t\tthis.lessThenOracleJdk11 = lessThenOracleJdk11;\n@@ -120,1 +123,3 @@\n-\t\t\tjfrArgs.add(UNLOCKCOMMERCIAL_ARGUMENT);\n+\t\t\tif (lessThenOracleJdk11) {\n+\t\t\t\tjfrArgs.add(UNLOCKCOMMERCIAL_ARGUMENT);\n+\t\t\t}\n","filename":"application\/org.openjdk.jmc.ide.launch\/src\/main\/java\/org\/openjdk\/jmc\/ide\/launch\/model\/JfrArgsBuilder.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+\tprivate static final boolean DEFAULT_ORACLE_JDK_LESS_THAN_11 = false;\n@@ -97,0 +98,1 @@\n+\tprivate static final String ORACLE_JDK_LESS_THAN_11 = \"jmc.jfr.launching.JFR.ORACLE_JDK_LESS_THAN_11\"; \/\/$NON-NLS-1$\n@@ -110,0 +112,1 @@\n+\tprivate boolean m_oracleJdkLessThan11;\n@@ -123,0 +126,1 @@\n+\t\t\/\/TODO: find how to get proper variables dynamically\n@@ -300,0 +304,1 @@\n+\t\tsetOracleJdkLessThan11(configuration.getAttribute(ORACLE_JDK_LESS_THAN_11, DEFAULT_ORACLE_JDK_LESS_THAN_11));\n@@ -354,0 +359,1 @@\n+\t\tconfiguration.setAttribute(ORACLE_JDK_LESS_THAN_11, getOracleJdkLessThan11());\n@@ -380,0 +386,9 @@\n+\tpublic void setOracleJdkLessThan11(boolean oracleJdkLessThan11) {\n+\t\tm_oracleJdkLessThan11 = oracleJdkLessThan11;\n+\t\tonChange();\n+\t}\n+\n+\tpublic boolean getOracleJdkLessThan11() {\n+\t\treturn m_oracleJdkLessThan11;\n+\t}\n+\n@@ -382,1 +397,2 @@\n-\t\t\t\tgetDelay(), getTemplatePath(), getRecordingFile().getAbsolutePath(), getName(), isContinuous());\n+\t\t\t\tgetDelay(), getTemplatePath(), getRecordingFile().getAbsolutePath(), getName(), isContinuous(),\n+\t\t\t\tgetOracleJdkLessThan11());\n","filename":"application\/org.openjdk.jmc.ide.launch\/src\/main\/java\/org\/openjdk\/jmc\/ide\/launch\/model\/JfrLaunchModel.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-\t\t\t\tfalse);\n+\t\t\t\tfalse, false);\n@@ -67,1 +67,1 @@\n-\t\t\t\tfalse);\n+\t\t\t\tfalse, true);\n@@ -77,1 +77,1 @@\n-\t\t\t\ttrue);\n+\t\t\t\ttrue, true);\n@@ -87,1 +87,1 @@\n-\t\t\t\ttrue);\n+\t\t\t\ttrue, true);\n@@ -97,1 +97,1 @@\n-\t\t\t\ttrue);\n+\t\t\t\ttrue, true);\n@@ -107,1 +107,1 @@\n-\t\t\t\ttrue);\n+\t\t\t\ttrue, true);\n@@ -117,1 +117,1 @@\n-\t\t\t\tokName, true);\n+\t\t\t\tokName, true, true);\n@@ -124,0 +124,10 @@\n+\t@Test\n+\tpublic void testJfrArgsIfQuotedSpacePathsDefaultSettingsJdkHigherThen11() throws Exception {\n+\t\tJfrArgsBuilder options = new JfrArgsBuilder(true, true, okDuration, okDelay, spaceProfile, spaceFilename,\n+\t\t\t\tokName, true, false);\n+\t\tString jfrArgs = JfrArgsBuilder.joinToCommandline(options.getJfrArgs(true));\n+\t\tAssert.assertEquals(\n+\t\t\t\t\"-XX:+FlightRecorder -XX:StartFlightRecording=settings=\\\"default foobar\\\",dumponexit=true,name=kossa,filename=\\\"Kossa Apa\/apa.jfr\\\"\",\n+\t\t\t\tjfrArgs);\n+\t}\n+\n","filename":"application\/tests\/org.openjdk.jmc.ide.launch.test\/src\/test\/java\/org\/openjdk\/jmc\/ide\/launch\/model\/JfrArgsBuilderJfrArgsTest.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"}]}