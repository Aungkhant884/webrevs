{"files":[{"patch":"@@ -51,0 +51,1 @@\n+application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/jslibs\/\n","filename":".gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -202,0 +202,6 @@\n+   <plugin\n+         id=\"org.openjdk.jmc.flightrecorder.hierarchical-edge\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n","filename":"application\/org.openjdk.jmc.feature.flightrecorder\/feature.xml","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\/main\/java\"\/>\n+\t<classpathentry kind=\"src\" path=\"src\/main\/resources\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"output\" path=\"target\/classes\"\/>\n+<\/classpath>\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/.classpath","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n-\t<name>org.openjdk.jmc.browser.attach.ja<\/name>\n+\t<name>org.openjdk.jmc.flightrecorder.hierarchical-edge<\/name>\n@@ -31,1 +31,0 @@\n-\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n@@ -33,0 +32,1 @@\n+\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/.project","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/l10n\/org.openjdk.jmc.browser.attach.ja\/.project","status":"copied"},{"patch":"@@ -0,0 +1,12 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: Heatmap\n+Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.hierarchical-edge;singleton:=true\n+Bundle-Version: 8.3.0.qualifier\n+Require-Bundle: org.openjdk.jmc.flightrecorder,\n+ org.openjdk.jmc.flightrecorder.ui,\n+ org.openjdk.jmc.flightrecorder.serializers,\n+ org.apiguardian\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Automatic-Module-Name: org.openjdk.jmc.flightrecorder.hierarchical-edge\n+Bundle-Vendor: Oracle Corporation\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/META-INF\/MANIFEST.MF","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+source.. = src\/main\/java\/,\\\n+           src\/main\/resources\/,\\\n+           src\/test\/java\/\n+output.. = target\/classes\/\n+bin.includes = META-INF\/,\\\n+               .,\\\n+               plugin.xml,\\\n+               plugin.properties,\\\n+               icons\/\n+pde.match.rule.bundle=compatible\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/build.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/icons\/flameflip.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flameflip.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/icons\/flameflip@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flameflip@2x.png","status":"copied"},{"filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/icons\/hierarchical.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/icons\/hierarchical@2x.png","binary":true,"status":"added"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/icons\/icicleflip.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/icicleflip.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/icons\/icicleflip@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/icicleflip@2x.png","status":"copied"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2019, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -34,1 +34,1 @@\n-FLAME_VIEW_NAME=Flame View\n+HIERARCHICAL_EDGE=Hierarchical Edge\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/plugin.properties","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/plugin.properties","status":"copied"},{"patch":"@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<?eclipse version=\"3.2\"?>\n+<plugin>\n+\t<extension point=\"org.eclipse.ui.views\">\n+\t\t<view\n+          allowMultiple=\"false\"\n+          category=\"org.openjdk.jmc.ui.main\"\n+          class=\"org.openjdk.jmc.flightrecorder.hierarchical.views.HierarchicalEdgeView\"\n+          icon=\"icons\/hierarchical.png\"\n+          id=\"org.openjdk.jmc.flightrecorder.hierarchical-edge\"\n+          name=\"Hierarchical Edge View\"\n+          restorable=\"true\">\n+\t\t<\/view>\n+\t<\/extension>\n+<\/plugin>\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/plugin.xml","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -3,3 +3,2 @@\n-   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-   Copyright (c) 2021, Datadog, Inc. All rights reserved.\n-\n+   Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -7,1 +6,0 @@\n-\n@@ -10,1 +8,0 @@\n-\n@@ -12,1 +9,0 @@\n-\n@@ -15,1 +11,0 @@\n-\n@@ -18,1 +13,0 @@\n-\n@@ -22,1 +16,0 @@\n-\n@@ -25,1 +18,0 @@\n-\n@@ -43,1 +35,1 @@\n-\t<artifactId>org.openjdk.jmc.flightrecorder.heatmap<\/artifactId>\n+\t<artifactId>org.openjdk.jmc.flightrecorder.hierarchical-edge<\/artifactId>\n@@ -79,1 +71,1 @@\n-<\/project>\n+<\/project>\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/pom.xml","additions":4,"deletions":12,"binary":false,"changes":16,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/pom.xml","status":"copied"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.hierarchical;\n+\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public class Messages {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.flightrecorder.hierarchical.messages\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n+\n+\tpublic static final String HIERARCHICAL_PACKAGE_LEVEL_DEPTH = \"HIERARCHICAL_PACKAGE_LEVEL_DEPTH\"; \/\/$NON-NLS-1$\n+\tpublic static final String HIERARCHICAL_EDGE_BUNDLING_DIAGRAM = \"HIERARCHICAL_EDGE_BUNDLING_DIAGRAM\"; \/\/$NON-NLS-1$\n+\tpublic static final String HIERARCHICAL_CHORD_DIAGRAM = \"HIERARCHICAL_CHORD_DIAGRAM\"; \/\/$NON-NLS-1$\n+\n+\tprivate Messages() {\n+\t}\n+\n+\tpublic static String getString(String key) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn '!' + key + '!';\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/hierarchical\/Messages.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,391 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.hierarchical.views;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.text.MessageFormat;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jface.action.Action;\n+import org.eclipse.jface.action.ActionContributionItem;\n+import org.eclipse.jface.action.IAction;\n+import org.eclipse.jface.action.IMenuCreator;\n+import org.eclipse.jface.action.IToolBarManager;\n+import org.eclipse.jface.action.Separator;\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.jface.resource.ResourceLocator;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.browser.Browser;\n+import org.eclipse.swt.browser.ProgressAdapter;\n+import org.eclipse.swt.browser.ProgressEvent;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.events.MenuDetectEvent;\n+import org.eclipse.swt.events.MenuDetectListener;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Menu;\n+import org.eclipse.ui.IMemento;\n+import org.eclipse.ui.ISelectionListener;\n+import org.eclipse.ui.IViewSite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.part.ViewPart;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.util.Pair;\n+import org.openjdk.jmc.common.util.StringToolkit;\n+import org.openjdk.jmc.flightrecorder.hierarchical.Messages;\n+import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.ui.common.util.AdapterUtil;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+\n+public class HierarchicalEdgeView extends ViewPart implements ISelectionListener {\n+\tprivate static final String DIR_ICONS = \"icons\/\"; \/\/$NON-NLS-1$\n+\tprivate static final String PLUGIN_ID = \"org.openjdk.jmc.flightrecorder.hierarchical-edge\"; \/\/$NON-NLS-1$\n+\tprivate static final String HTML_PAGE;\n+\tstatic {\n+\t\tString jsD3V6 = \"jslibs\/d3.v6.min.js\";\n+\t\tHTML_PAGE = String.format(\n+\t\t\t\tloadStringFromFile(\"page.template\"),\n+\t\t\t\tloadLibraries(jsD3V6),\n+\t\t\t\tloadStringFromFile(\"main.js\"),\n+\t\t\t\tloadStringFromFile(\"utils.js\"),\n+\t\t\t\tloadStringFromFile(\"hierarchical-edge.js\"),\n+\t\t\t\tloadStringFromFile(\"chord.js\"));\n+\t}\n+\n+\tprivate enum ModelState {\n+\t\tNOT_STARTED, STARTED, FINISHED, NONE;\n+\t}\n+\n+\tprivate static class ModelRebuildRunnable implements Runnable {\n+\t\tprivate final HierarchicalEdgeView view;\n+\t\tprivate final IItemCollection items;\n+\t\tprivate volatile boolean isInvalid;\n+\t\tprivate final int packageDepth;\n+\n+\t\tprivate ModelRebuildRunnable(HierarchicalEdgeView view, IItemCollection items, int packageDepth) {\n+\t\t\tthis.view = view;\n+\t\t\tthis.items = items;\n+\t\t\tthis.packageDepth = packageDepth;\n+\t\t}\n+\n+\t\tprivate void setInvalid() {\n+\t\t\tthis.isInvalid = true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tview.modelState = ModelState.STARTED;\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items);\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t} else {\n+\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson, packageDepth));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate enum DependencyChartType {\n+\t\tEDGE_BUNDLING(Messages.getString(Messages.HIERARCHICAL_EDGE_BUNDLING_DIAGRAM), IAction.AS_RADIO_BUTTON, hierarchicalEdgeImageDescriptor(\"flameflip.png\")),\n+\t\tCHORD(Messages.getString(Messages.HIERARCHICAL_CHORD_DIAGRAM), IAction.AS_RADIO_BUTTON, hierarchicalEdgeImageDescriptor(\"icicleflip.png\"));\n+\n+\t\tprivate final String message;\n+\t\tprivate final int action;\n+\t\tprivate final ImageDescriptor imageDescriptor;\n+\n+\t\tprivate DependencyChartType(String message, int action, ImageDescriptor imageDescriptor) {\n+\t\t\tthis.message = message;\n+\t\t\tthis.action = action;\n+\t\t\tthis.imageDescriptor = imageDescriptor;\n+\t\t}\n+\t}\n+\n+\tprivate class ChangeChartTypeAction extends Action {\n+\t\tprivate final DependencyChartType type;\n+\n+\t\tChangeChartTypeAction(DependencyChartType type) {\n+\t\t\tsuper(type.message, type.action);\n+\t\t\tthis.type = type;\n+\t\t\tsetToolTipText(type.message);\n+\t\t\tsetImageDescriptor(type.imageDescriptor);\n+\t\t\tsetChecked(DependencyChartType.EDGE_BUNDLING.equals(type));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tif (this.isChecked()) {\n+\t\t\t\tchartType = type;\n+\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(currentItems);\n+\t\t\t\tbrowser.execute(String.format(\"updateGraph(`%s`, %d, `%s`);\", eventsJson, packageDepth, chartType.name()));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static ImageDescriptor hierarchicalEdgeImageDescriptor(String iconName) {\n+\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n+\t}\n+\n+\tprivate static final int MODEL_EXECUTOR_THREADS_NUMBER = 3;\n+\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(MODEL_EXECUTOR_THREADS_NUMBER,\n+\t\t\tnew ThreadFactory() {\n+\t\t\t\tprivate ThreadGroup group = new ThreadGroup(\"HierarchicalEdgeCalculationGroup\");\n+\t\t\t\tprivate AtomicInteger counter = new AtomicInteger();\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Thread newThread(Runnable r) {\n+\t\t\t\t\tThread t = new Thread(group, r, \"HierarchicalEdgeCalculation-\" + counter.getAndIncrement());\n+\t\t\t\t\tt.setDaemon(true);\n+\t\t\t\t\treturn t;\n+\t\t\t\t}\n+\t\t\t});\n+\tprivate Browser browser;\n+\tprivate SashForm container;\n+\tprivate IItemCollection currentItems;\n+\tprivate volatile ModelState modelState = ModelState.NONE;\n+\tprivate ModelRebuildRunnable modelRebuildRunnable;\n+\tprivate int packageDepth = 3;\n+\tprivate DependencyChartType chartType = DependencyChartType.EDGE_BUNDLING;\n+\n+\t@Override\n+\tpublic void init(IViewSite site, IMemento memento) throws PartInitException {\n+\t\tsuper.init(site, memento);\n+\t\tIToolBarManager toolBar = site.getActionBars().getToolBarManager();\n+\t\tChangeChartTypeAction[] chartTypeActions = new ChangeChartTypeAction[] {\n+\t\t\t\tnew ChangeChartTypeAction(DependencyChartType.EDGE_BUNDLING),\n+\t\t\t\tnew ChangeChartTypeAction(DependencyChartType.CHORD)\n+\t\t};\n+\t\tStream.of(chartTypeActions).forEach(toolBar::add);\n+\t\ttoolBar.add(new Separator());\n+\t\ttoolBar.add(new PackageDepthSelection());\n+\t\tgetSite().getPage().addSelectionListener(this);\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\tgetSite().getPage().removeSelectionListener(this);\n+\t\tsuper.dispose();\n+\t}\n+\n+\tprivate class PackageDepthSelection extends Action implements IMenuCreator {\n+\t\tprivate Menu menu;\n+\t\tprivate final List<Pair<String, Integer>> depths = IntStream.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n+\t\t\t\t.mapToObj(i -> new Pair<>(Integer.toString(i), i)).collect(Collectors.toUnmodifiableList());\n+\n+\t\tPackageDepthSelection() {\n+\t\t\tsuper(Messages.getString(Messages.HIERARCHICAL_PACKAGE_LEVEL_DEPTH), IAction.AS_DROP_DOWN_MENU);\n+\t\t\tsetMenuCreator(this);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void dispose() {\n+\t\t\t\/\/ do nothing\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Menu getMenu(Control parent) {\n+\t\t\tif (menu == null) {\n+\t\t\t\tmenu = new Menu(parent);\n+\t\t\t\tpopulate(menu);\n+\t\t\t}\n+\t\t\treturn menu;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Menu getMenu(Menu parent) {\n+\t\t\tif (menu == null) {\n+\t\t\t\tmenu = new Menu(parent);\n+\t\t\t\tpopulate(menu);\n+\t\t\t}\n+\t\t\treturn menu;\n+\t\t}\n+\n+\t\tprivate void populate(Menu menu) {\n+\t\t\tfor (Pair<String, Integer> item : depths) {\n+\t\t\t\tvar actionItem = new ActionContributionItem(new SetPackageDepth(item, item.right == packageDepth));\n+\t\t\t\tactionItem.fill(menu, -1);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate class SetPackageDepth extends Action {\n+\t\t\tprivate int value;\n+\n+\t\t\tSetPackageDepth(Pair<String, Integer> item, boolean isSelected) {\n+\t\t\t\tsuper(item.left, IAction.AS_RADIO_BUTTON);\n+\t\t\t\tthis.value = item.right;\n+\t\t\t\tsetChecked(isSelected);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tif (packageDepth != value) {\n+\t\t\t\t\tpackageDepth = value;\n+\t\t\t\t\ttriggerRebuildTask(currentItems);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void createPartControl(Composite parent) {\n+\t\tcontainer = new SashForm(parent, SWT.HORIZONTAL);\n+\t\tbrowser = new Browser(container, SWT.NONE);\n+\t\tcontainer.setMaximizedControl(browser);\n+\t\tbrowser.addMenuDetectListener(new MenuDetectListener() {\n+\t\t\t@Override\n+\t\t\tpublic void menuDetected(MenuDetectEvent e) {\n+\t\t\t\te.doit = false;\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void setFocus() {\n+\t\tbrowser.setFocus();\n+\t}\n+\n+\t@Override\n+\tpublic void saveState(IMemento memento) {\n+\t}\n+\n+\t@Override\n+\tpublic void selectionChanged(IWorkbenchPart part, ISelection selection) {\n+\t\tif (selection instanceof IStructuredSelection) {\n+\t\t\tObject first = ((IStructuredSelection) selection).getFirstElement();\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\ttriggerRebuildTask(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\ttriggerRebuildTask(items);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void triggerRebuildTask(IItemCollection items) {\n+\t\t\/\/ Release old model calculation before building a new\n+\t\tif (modelRebuildRunnable != null) {\n+\t\t\tmodelRebuildRunnable.setInvalid();\n+\t\t}\n+\n+\t\tcurrentItems = items;\n+\t\tmodelState = ModelState.NOT_STARTED;\n+\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, items, packageDepth);\n+\t\tif (!modelRebuildRunnable.isInvalid) {\n+\t\t\tMODEL_EXECUTOR.execute(modelRebuildRunnable);\n+\t\t}\n+\t}\n+\n+\tprivate void setModel(final IItemCollection items, final String eventsJson, int packageDepth) {\n+\t\tif (ModelState.FINISHED.equals(modelState) && items.equals(currentItems) && !browser.isDisposed()) {\n+\t\t\tsetViewerInput(eventsJson, packageDepth);\n+\t\t}\n+\t}\n+\n+\tprivate void setViewerInput(String eventsJson, int packageDepth) {\n+\t\tbrowser.setText(HTML_PAGE);\n+\t\tbrowser.addListener(SWT.Resize, event -> {\n+\t\t\tbrowser.execute(String.format(\"updateGraph(`%s`, %d, `%s`);\", eventsJson, packageDepth, chartType.name()));\n+\t\t});\n+\n+\t\tbrowser.addProgressListener(new ProgressAdapter() {\n+\t\t\tprivate boolean loaded = false;\n+\n+\t\t\t@Override\n+\t\t\tpublic void changed(ProgressEvent event) {\n+\t\t\t\tif (loaded) {\n+\t\t\t\t\tbrowser.removeProgressListener(this);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void completed(ProgressEvent event) {\n+\t\t\t\tbrowser.removeProgressListener(this);\n+\t\t\t\tbrowser.execute(String.format(\"updateGraph(`%s`, %d, `%s`);\", eventsJson, packageDepth, chartType.name()));\n+\t\t\t\tloaded = true;\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprivate static String loadLibraries(String... libs) {\n+\t\tif (libs == null || libs.length == 0) {\n+\t\t\treturn \"\";\n+\t\t} else {\n+\t\t\tStringBuilder builder = new StringBuilder(2048);\n+\t\t\tfor (String lib : libs) {\n+\t\t\t\tbuilder.append(loadStringFromFile(lib));\n+\t\t\t\tbuilder.append(\"\\n\");\n+\t\t\t}\n+\t\t\treturn builder.toString();\n+\t\t}\n+\t}\n+\n+\tprivate static String loadStringFromFile(String fileName) {\n+\t\ttry {\n+\t\t\treturn StringToolkit.readString(HierarchicalEdgeView.class.getClassLoader().getResourceAsStream(fileName));\n+\t\t} catch (IOException e) {\n+\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\tMessageFormat.format(\"Could not load script \\\"{0}\\\",\\\"{1}\\\"\", fileName, e.getMessage())); \/\/$NON-NLS-1$\n+\t\t\treturn \"\";\n+\t\t}\n+\t}\n+\n+\tpublic static byte[] readBytes(InputStream in) throws IOException {\n+\t\tBufferedInputStream bis = new BufferedInputStream(in);\n+\t\tByteArrayOutputStream buf = new ByteArrayOutputStream();\n+\t\tint result = bis.read();\n+\t\twhile (result != -1) {\n+\t\t\tbuf.write((byte) result);\n+\t\t\tresult = bis.read();\n+\t\t}\n+\t\treturn buf.toByteArray();\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/hierarchical\/views\/HierarchicalEdgeView.java","additions":391,"deletions":0,"binary":false,"changes":391,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+function renderChordDiagram(data) {\n+  const svg = d3\n+    .select(\"#hierarchical\")\n+    .append(\"svg\")\n+    .attr(\"viewBox\", [-width \/ 2, -height \/ 2, width, height]);\n+\n+  const innerRadius = Math.max(Math.min(width, height) * 0.5 - 90, 100);\n+  const outerRadius = innerRadius + 10;\n+\n+  const names = Array.from(\n+    new Set(data.flatMap((d) => [d.source, d.target]))\n+  ).sort(d3.ascending);\n+  const color = d3.scaleOrdinal(\n+    names,\n+    d3.quantize(d3.interpolateRainbow, names.length)\n+  );\n+\n+  const chord = d3\n+    .chordDirected()\n+    .padAngle(10 \/ innerRadius)\n+    .sortSubgroups(d3.descending)\n+    .sortChords(d3.descending);\n+\n+  const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n+\n+  const ribbon = d3\n+    .ribbonArrow()\n+    .radius(innerRadius - 1)\n+    .padAngle(1 \/ innerRadius);\n+\n+  const matrix = buildMatrix(data, names);\n+  const chords = chord(matrix);\n+\n+  const group = svg\n+    .append(\"g\")\n+    .attr(\"font-size\", 10)\n+    .attr(\"font-family\", \"sans-serif\")\n+    .selectAll(\"g\")\n+    .data(chords.groups)\n+    .join(\"g\");\n+\n+  group\n+    .append(\"path\")\n+    .attr(\"fill\", (d) => color(names[d.index]))\n+    .attr(\"d\", arc);\n+\n+  group\n+    .append(\"text\")\n+    .each((d) => (d.angle = (d.startAngle + d.endAngle) \/ 2))\n+    .attr(\"dy\", \"0.35em\")\n+    .attr(\n+      \"transform\",\n+      (d) => `\n+        rotate(${(d.angle * 180) \/ Math.PI - 90})\n+        translate(${outerRadius + 5})\n+        ${d.angle > Math.PI ? \"rotate(180)\" : \"\"}\n+      `\n+    )\n+    .attr(\"text-anchor\", (d) => (d.angle > Math.PI ? \"end\" : null))\n+    .text((d) => names[d.index]);\n+\n+  group.append(\"title\").text(\n+    (d) => `${names[d.index]}\n+${d3.sum(\n+  chords,\n+  (c) => (c.source.index === d.index) * c.source.value\n+)} outgoing →\n+${d3.sum(\n+  chords,\n+  (c) => (c.target.index === d.index) * c.source.value\n+)} incoming ←`\n+  );\n+\n+  svg\n+    .append(\"g\")\n+    .attr(\"fill-opacity\", 0.75)\n+    .selectAll(\"path\")\n+    .data(chords)\n+    .join(\"path\")\n+    .style(\"mix-blend-mode\", \"multiply\")\n+    .attr(\"fill\", (d) => color(names[d.target.index]))\n+    .attr(\"d\", ribbon)\n+    .append(\"title\")\n+    .text(\n+      (d) =>\n+        `${names[d.source.index]} → ${names[d.target.index]} ${d.source.value}`\n+    );\n+\n+  return svg.node();\n+}\n+\n+function buildMatrix(data, names) {\n+  const index = new Map(names.map((name, i) => [name, i]));\n+  const matrix = Array.from(index, () => new Array(names.length).fill(0));\n+  for (const { source, target, value } of data)\n+    matrix[index.get(source)][index.get(target)] += value;\n+  return matrix;\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/chord.js","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+function renderHierarchicalEdgeBundling(graph) {\n+  \/\/ compute package hierarchy\n+  const svg = d3\n+    .select(\"#hierarchical\")\n+    .append(\"svg\")\n+    .attr(\"viewBox\", [-width \/ 2, -height \/ 2, width, height]);\n+  const d3Hierarchy = d3\n+    .hierarchy(graph.root)\n+    .sort(\n+      (a, b) =>\n+        d3.ascending(a.height, b.height) ||\n+        d3.ascending(a.data.name, b.data.name)\n+    );\n+  \/\/ we use the same formula as for the outerRadius in the chord diagram\n+  const radius = Math.max(Math.min(width, height) * 0.5 - 90, 100) + 10;\n+  const treeClustering = d3.cluster().size([2 * Math.PI, radius]);\n+  const root = treeClustering(bilink(d3Hierarchy));\n+  const colors = getColors();\n+  const node = svg\n+    .append(\"g\")\n+    .attr(\"font-family\", \"sans-serif\")\n+    .attr(\"font-size\", 10)\n+    .selectAll(\"g\")\n+    .data(root.leaves())\n+    .join(\"g\")\n+    .attr(\n+      \"transform\",\n+      (d) => `rotate(${(d.x * 180) \/ Math.PI - 90}) translate(${d.y},0)`\n+    )\n+    .append(\"text\")\n+    .attr(\"dy\", \"0.31em\")\n+    .attr(\"x\", (d) => (d.x < Math.PI ? 6 : -6))\n+    .attr(\"text-anchor\", (d) => (d.x < Math.PI ? \"start\" : \"end\"))\n+    .attr(\"transform\", (d) => (d.x >= Math.PI ? \"rotate(180)\" : null))\n+    .text((d) => d.data.name)\n+    .each(function (d) {\n+      d.text = this;\n+    })\n+    .on(\"mouseover\", overed)\n+    .on(\"mouseout\", outed)\n+    .call((text) =>\n+      text.attr(\"fill\", colors.default).append(\"title\").text(formatTooltip)\n+    );\n+  const line = d3\n+    .lineRadial()\n+    .curve(d3.curveBundle.beta(0.85))\n+    .radius((d) => d.y)\n+    .angle((d) => d.x);\n+  const link = svg\n+    .append(\"g\")\n+    .attr(\"stroke\", colors.link)\n+    .attr(\"fill\", \"none\")\n+    .selectAll(\"path\")\n+    .data(root.leaves().flatMap((leaf) => leaf.outgoing))\n+    .join(\"path\")\n+    .style(\"mix-blend-mode\", \"multiply\")\n+    .attr(\"d\", ([i, o]) => line(i.path(o)))\n+    .each(function (d) {\n+      d.path = this;\n+    });\n+\n+  function overed(event, d) {\n+    link.style(\"mix-blend-mode\", null);\n+    d3.select(this)\n+      .attr(\"font-weight\", \"bold\")\n+      .attr(\"fill\", colors.hover)\n+      .style(\"cursor\", \"default\");\n+    d3.selectAll(d.incoming.map((d) => d.path))\n+      .attr(\"stroke\", colors.incoming)\n+      .raise();\n+    d3.selectAll(d.incoming.map(([d]) => d.text))\n+      .attr(\"fill\", colors.incoming)\n+      .attr(\"font-weight\", \"bold\");\n+    d3.selectAll(d.outgoing.map((d) => d.path))\n+      .attr(\"stroke\", colors.outgoing)\n+      .raise();\n+    d3.selectAll(d.outgoing.map(([, d]) => d.text))\n+      .attr(\"fill\", colors.outgoing)\n+      .attr(\"font-weight\", \"bold\");\n+\n+    const both = intersection(d.incoming, d.outgoing);\n+    d3.selectAll(both.map((d) => d.path))\n+      .attr(\"stroke\", colors.both)\n+      .raise();\n+    d3.selectAll(both.map(([d]) => d.text))\n+      .attr(\"fill\", colors.both)\n+      .attr(\"font-weight\", \"bold\");\n+  }\n+\n+  function outed(event, d) {\n+    link.style(\"mix-blend-mode\", \"multiply\");\n+    d3.select(this).attr(\"font-weight\", null).attr(\"fill\", colors.default);\n+    d3.selectAll(d.incoming.map((d) => d.path)).attr(\"stroke\", null);\n+    d3.selectAll(d.incoming.map(([d]) => d.text))\n+      .attr(\"fill\", colors.default)\n+      .attr(\"font-weight\", null);\n+    d3.selectAll(d.outgoing.map((d) => d.path)).attr(\"stroke\", null);\n+    d3.selectAll(d.outgoing.map(([, d]) => d.text))\n+      .attr(\"fill\", colors.default)\n+      .attr(\"font-weight\", null);\n+  }\n+\n+  return svg.node();\n+}\n+\n+function bilink(root) {\n+  const leaves = root.leaves();\n+  const map = new Map(leaves.map((d) => [d.data.name, d]));\n+  for (const d of leaves) {\n+    d.incoming = [];\n+    d.outgoing = [...d.data.outgoing]\n+      .map((i) => {\n+        return [d, map.get(i.name)];\n+      })\n+      .filter((o) => o[1]);\n+  }\n+\n+  for (const d of leaves) {\n+    for (const o of d.outgoing) {\n+      o[1].incoming.push(o);\n+    }\n+  }\n+\n+  return root;\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/hierarchical-edge.js","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+let width = window.innerWidth;\n+let height = window.innerHeight;\n+\n+let levels = 2;\n+\n+function updateGraph(eventsJson, packageLevels, chartType) {\n+  const data = JSON.parse(eventsJson);\n+  debug(`${chartType} displaying ${data.events.length} events`);\n+  try {\n+    levels = packageLevels;\n+    width = window.innerWidth;\n+    height = window.innerHeight;\n+    d3.select(\"#hierarchical\").selectAll(\"*\").remove();\n+    if (chartType === \"EDGE_BUNDLING\") {\n+      const edgeBundlingData = transformEdgeBundlingData(data);\n+      renderHierarchicalEdgeBundling(edgeBundlingData);\n+    } else if (chartType === \"CHORD\") {\n+      const chordData = transformChordData(data);\n+      renderChordDiagram(chordData);\n+    }\n+  } catch (e) {\n+    debug(e.message);\n+    debug(`<pre>${e.stack}<\/pre>`);\n+  }\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/main.js","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+#\n+HIERARCHICAL_PACKAGE_LEVEL_DEPTH=Package depth\n+HIERARCHICAL_EDGE_BUNDLING_DIAGRAM=Edge bundling diagram\n+HIERARCHICAL_CHORD_DIAGRAM=Chord diagram\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/hierarchical\/messages.properties","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+#\n+HIERARCHICAL_PACKAGE_LEVEL_DEPTH=Package level depth\n+HIERARCHICAL_EDGE_BUNDLING_DIAGRAM=Edge bundling diagram\n+HIERARCHICAL_CHORD_DIAGRAM=Chord diagram\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/hierarchical\/messages_ja.properties","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+#\n+HIERARCHICAL_PACKAGE_LEVEL_DEPTH=Package level depth\n+HIERARCHICAL_EDGE_BUNDLING_DIAGRAM=Edge bundling diagram\n+HIERARCHICAL_CHORD_DIAGRAM=Chord diagram\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/hierarchical\/messages_zh_CN.properties","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,25 @@\n+<!DOCTYPE html \"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\" \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-strict.dtd\">\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n+  <head>\n+    <meta http-equiv=\"content-type\" content=\"text\/html; charset=utf-8\" \/>\n+    <script>\n+      %1$s\n+    <\/script>\n+  <\/head>\n+  <body>\n+    <div id=\"debug\" width=\"100%%\" style=\"text-align: left; display:none;\"><\/div>\n+    <div id=\"hierarchical\" width=\"100%%\" style=\"text-align: center\"><\/div>\n+    <script type=\"text\/javascript\">\n+      %2$s\n+    <\/script>\n+    <script type=\"text\/javascript\">\n+      %3$s\n+    <\/script>\n+    <script type=\"text\/javascript\">\n+      %4$s\n+    <\/script>\n+    <script type=\"text\/javascript\">\n+      %5$s\n+    <\/script>\n+  <\/body>\n+<\/html>\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/page.template","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"@@ -0,0 +1,207 @@\n+class StackTrace {\n+  constructor(stackTraceData) {\n+    const frames = (stackTraceData && stackTraceData.frames) || [];\n+    this.frames = frames.map((frame) => new StackFrame(frame));\n+  }\n+}\n+\n+class StackFrame {\n+  constructor({ name }) {\n+    this.id = name;\n+    const [fqcn, method] = name.split(\"#\");\n+    const lastDelimiterIdx = fqcn.lastIndexOf(\".\");\n+    this.package = new Package(fqcn.slice(0, lastDelimiterIdx));\n+    this.clazz = fqcn.slice(lastDelimiterIdx + 1);\n+    this.method = method.split(\"(\")[0];\n+  }\n+}\n+\n+class Package {\n+  constructor(name) {\n+    this.name = name;\n+  }\n+\n+  subpackages(maxDepth) {\n+    const parts = this.name.split(\".\");\n+    const subpackages = parts.reduce((acc, current, idx) => {\n+      if (maxDepth - 1 >= 0 && maxDepth - 1 < idx) {\n+        return acc;\n+      }\n+      const parent = acc[acc.length - 1];\n+      acc.push(parent ? `${parent}.${current}` : current);\n+      return acc;\n+    }, []);\n+    \/\/ subpackages.push(\"\/\" + parts.join(\".\"));\n+    return subpackages;\n+  }\n+}\n+\n+class Event {\n+  constructor({ type, attributes }) {\n+    this.type = type;\n+    if (!attributes) {\n+      return;\n+    }\n+    \/\/ TODO: support more time attributes\n+    this.time = attributes[\"(endTime)\"];\n+    this.eventThread = attributes.eventThread;\n+    this.stackTrace = new StackTrace(attributes.stackTrace);\n+    this.state = attributes.state;\n+  }\n+}\n+\n+function debug(msg) {\n+  const displayEl = document.getElementById(\"debug\");\n+  displayEl.innerHTML += \"<br \/>\" + msg;\n+}\n+\n+function clear() {\n+  document.getElementById(\"debug\").innerHTML = \"\";\n+}\n+\n+\/\/ data manipulation for chord diagram\n+const maxPackages = 500;\n+\n+function truncatePackage(name, level) {\n+  return name.split(\".\").slice(0, level).join(\".\");\n+}\n+\n+function transformChordData(json) {\n+  const events = json.events.map((e) => new Event(e));\n+  let calls = {};\n+  events.forEach((e) => {\n+    const frames = e.stackTrace.frames;\n+    const len = frames.length;\n+    for (let i = len - 1; i > 0; i--) {\n+      const source = truncatePackage(frames[i].package.name, levels);\n+      const target = truncatePackage(frames[i - 1].package.name, levels);\n+      const id = `${source} ${target}`;\n+      calls[id] = (calls[id] || 0) + 1;\n+    }\n+  });\n+  calls = Object.entries(calls)\n+    .sort(([, a], [, b]) => b - a)\n+    .slice(0, maxPackages)\n+    .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});\n+  return Object.keys(calls).map((id) => {\n+    const [source, target] = id.split(\" \");\n+    return { source, target, value: calls[id] };\n+  });\n+}\n+\n+\/\/ data manipulation for hierarchical edge bundling diagram\n+function transformEdgeBundlingData(data) {\n+  const graph = new Graph();\n+  data.events\n+    .map((d) => new Event(d))\n+    .forEach((event) => {\n+      const stackTrace = event.stackTrace;\n+      if (stackTrace) {\n+        const frames = stackTrace.frames.reverse();\n+        for (let idx = 0; idx < frames.length; idx++) {\n+          const currentFrame = frames[idx];\n+          const parentFrame = frames[idx - 1];\n+          const current = graph.createAllNodes(currentFrame);\n+          if (parentFrame) {\n+            const parent = graph.createAllNodes(parentFrame);\n+            if (parent != current) {\n+              parent.addIncoming(current);\n+              current.addOutgoing(parent);\n+            }\n+          }\n+          if (idx === frames.length - 1) {\n+            current.leaf = true;\n+          }\n+        }\n+      }\n+    });\n+  return graph;\n+}\n+\n+function getColors() {\n+  const scheme = d3.schemeCategory10;\n+  return {\n+    outgoing: scheme[2],\n+    incoming: scheme[1],\n+    hover: scheme[0],\n+    both: scheme[3],\n+    default: \"#eee\",\n+    link: \"#ccc\",\n+  };\n+}\n+\n+class Graph {\n+  constructor() {\n+    this.root = new Node(\"root\");\n+    this.nodesByName = { root: this.root };\n+  }\n+\n+  createAllNodes(frame) {\n+    const nodeNames = frame.package.subpackages(levels);\n+    let node = this.root;\n+    for (let nodeName of nodeNames) {\n+      const child = this.ensureNode(nodeName);\n+      const exists = node.children.find((c) => c.name === child.name);\n+      if (!exists) {\n+        node.children.push(child);\n+      }\n+      node = child;\n+    }\n+    return node;\n+  }\n+\n+  ensureNode(name) {\n+    let node = this.nodesByName[name];\n+    if (!node) {\n+      node = new Node(name);\n+      this.nodesByName[name] = node;\n+    }\n+    return node;\n+  }\n+}\n+\n+class Node {\n+  constructor(name, fullName) {\n+    this.name = name;\n+    this.fullName = fullName;\n+    this.children = [];\n+    this.outgoing = new Set();\n+    this.incoming = new Set();\n+  }\n+\n+  addChild(node) {\n+    this.children.push(node);\n+    return this;\n+  }\n+\n+  addOutgoing(node) {\n+    this.outgoing.add(node);\n+  }\n+\n+  addIncoming(node) {\n+    this.incoming.add(node);\n+  }\n+}\n+\n+function intersection(incoming, outgoing) {\n+  return incoming.filter((i) => outgoing.find((o) => o[1] == i[0]));\n+}\n+\n+function subtract(first, second, itemFn) {\n+  return first.filter((pair) => !second.find((i) => i[0] === itemFn(pair)));\n+}\n+\n+function formatTooltip(d) {\n+  let tooltip = d.data.name;\n+  const both = intersection(d.incoming, d.outgoing);\n+  const incoming = subtract(d.incoming, both, (p) => p[0]);\n+  const outgoing = subtract(d.outgoing, both, (p) => p[1]);\n+  const getName = (d) => d.data.name;\n+  const displayLink = (prefix, d) => `${prefix} ${getName(d)}`;\n+  const displayLinks = (prefix, ds, getItem) =>\n+    ds.map((d) => displayLink(prefix, getItem(d))).join(\"\\n\");\n+  tooltip += \"\\n\" + displayLinks(\"←\", incoming, (p) => p[0]);\n+  tooltip += \"\\n\" + displayLinks(\"↔\", both, (p) => p[0]);\n+  tooltip += \"\\n\" + displayLinks(\"→\", outgoing, (p) => p[1]);\n+  return tooltip;\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.hierarchical-edge\/src\/main\/resources\/utils.js","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"},{"patch":"@@ -92,0 +92,1 @@\n+\t\t<module>org.openjdk.jmc.flightrecorder.hierarchical-edge<\/module>\n","filename":"application\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}