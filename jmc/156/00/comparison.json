{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import static org.openjdk.jmc.common.unit.UnitLookup.PLAIN_TEXT;\n+\n@@ -36,0 +38,1 @@\n+import java.util.Arrays;\n@@ -37,1 +40,1 @@\n-import java.util.Collections;\n+import java.util.List;\n@@ -45,0 +48,2 @@\n+import org.openjdk.jmc.common.item.IItemFilter;\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -63,0 +68,9 @@\n+\tpublic static final TypedPreference<String> EXCLUDED_STRINGS_REGEXP = new TypedPreference<>(\n+\t\t\t\"passwordsinargs.string.exclude.regexp\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS),\n+\t\t\tMessages.getString(Messages.PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS_LONG), PLAIN_TEXT.getPersister(),\n+\t\t\t\".*(passworld|passwise).*\"); \/\/$NON-NLS-1$\n+\n+\tprivate static final List<TypedPreference<?>> CONFIG_ATTRIBUTES = Arrays\n+\t\t\t.<TypedPreference<?>> asList(EXCLUDED_STRINGS_REGEXP);\n+\n@@ -69,0 +83,7 @@\n+\t\tString stringExcludeRegexp = valueProvider.getPreferenceValue(EXCLUDED_STRINGS_REGEXP).trim();\n+\t\tif (!stringExcludeRegexp.isEmpty()) {\n+\t\t\tIItemFilter matchesExclude = ItemFilters.matches(JdkAttributes.JAVA_ARGUMENTS, stringExcludeRegexp);\n+\t\t\tIItemFilter stringsExcludingExclude = ItemFilters.and(ItemFilters.type(JdkTypeIDs.VM_INFO),\n+\t\t\t\t\tItemFilters.not(matchesExclude));\n+\t\t\titems = items.apply(stringsExcludingExclude);\n+\t\t}\n@@ -90,0 +111,4 @@\n+\t\t\tif (!stringExcludeRegexp.isEmpty()) {\n+\t\t\t\tmessage = message + \" \" + MessageFormat.format(\n+\t\t\t\t\t\tMessages.getString(Messages.PasswordsInArgsRule_TEXT_INFO_EXCLUDED_INFO), stringExcludeRegexp);\n+\t\t\t}\n@@ -108,1 +133,1 @@\n-\t\treturn Collections.emptyList();\n+\t\treturn CONFIG_ATTRIBUTES;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/PasswordsInArgumentsRule.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import static org.openjdk.jmc.common.unit.UnitLookup.PLAIN_TEXT;\n+\n@@ -36,0 +38,1 @@\n+import java.util.Arrays;\n@@ -37,1 +40,1 @@\n-import java.util.Collections;\n+import java.util.List;\n@@ -43,0 +46,2 @@\n+import org.openjdk.jmc.common.item.IItemFilter;\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -58,0 +63,9 @@\n+\tpublic static final TypedPreference<String> EXCLUDED_STRINGS_REGEXP = new TypedPreference<>(\n+\t\t\t\"passwordsinenvironment.string.exclude.regexp\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS),\n+\t\t\tMessages.getString(Messages.PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS_LONG),\n+\t\t\tPLAIN_TEXT.getPersister(), \"(passworld|passwise)\"); \/\/$NON-NLS-1$\n+\n+\tprivate static final List<TypedPreference<?>> CONFIG_ATTRIBUTES = Arrays\n+\t\t\t.<TypedPreference<?>> asList(EXCLUDED_STRINGS_REGEXP);\n+\n@@ -65,0 +79,7 @@\n+\t\tString stringExcludeRegexp = valueProvider.getPreferenceValue(EXCLUDED_STRINGS_REGEXP).trim();\n+\t\tif (!stringExcludeRegexp.isEmpty()) {\n+\t\t\tIItemFilter matchesExclude = ItemFilters.matches(JdkAttributes.ENVIRONMENT_KEY, stringExcludeRegexp);\n+\t\t\tIItemFilter stringsExcludingExclude = ItemFilters.and(ItemFilters.type(JdkTypeIDs.ENVIRONMENT_VARIABLE),\n+\t\t\t\t\tItemFilters.not(matchesExclude));\n+\t\t\titems = items.apply(stringsExcludingExclude);\n+\t\t}\n@@ -80,0 +101,6 @@\n+\t\t\tif (!stringExcludeRegexp.isEmpty()) {\n+\t\t\t\tmessage = message + \" \"\n+\t\t\t\t\t\t+ MessageFormat.format(\n+\t\t\t\t\t\t\t\tMessages.getString(Messages.PasswordsInEnvironmentRuleFactory_TEXT_INFO_EXCLUDED_INFO),\n+\t\t\t\t\t\t\t\tstringExcludeRegexp);\n+\t\t\t}\n@@ -99,1 +126,1 @@\n-\t\treturn Collections.emptyList();\n+\t\treturn CONFIG_ATTRIBUTES;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/PasswordsInEnvironmentRule.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import static org.openjdk.jmc.common.unit.UnitLookup.PLAIN_TEXT;\n+\n@@ -36,0 +38,1 @@\n+import java.util.Arrays;\n@@ -37,1 +40,1 @@\n-import java.util.Collections;\n+import java.util.List;\n@@ -43,0 +46,2 @@\n+import org.openjdk.jmc.common.item.IItemFilter;\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -56,1 +61,0 @@\n-\n@@ -59,0 +63,9 @@\n+\tpublic static final TypedPreference<String> EXCLUDED_STRINGS_REGEXP = new TypedPreference<>(\n+\t\t\t\"passwordsinsystemproperties.string.exclude.regexp\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS),\n+\t\t\tMessages.getString(Messages.PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS_LONG),\n+\t\t\tPLAIN_TEXT.getPersister(), \"(passworld|passwise)\"); \/\/$NON-NLS-1$\n+\n+\tprivate static final List<TypedPreference<?>> CONFIG_ATTRIBUTES = Arrays\n+\t\t\t.<TypedPreference<?>> asList(EXCLUDED_STRINGS_REGEXP);\n+\n@@ -66,0 +79,7 @@\n+\t\tString stringExcludeRegexp = valueProvider.getPreferenceValue(EXCLUDED_STRINGS_REGEXP).trim();\n+\t\tif (!stringExcludeRegexp.isEmpty()) {\n+\t\t\tIItemFilter matchesExclude = ItemFilters.matches(JdkAttributes.ENVIRONMENT_KEY, stringExcludeRegexp);\n+\t\t\tIItemFilter stringsExcludingExclude = ItemFilters.and(ItemFilters.type(JdkTypeIDs.SYSTEM_PROPERTIES),\n+\t\t\t\t\tItemFilters.not(matchesExclude));\n+\t\t\titems = items.apply(stringsExcludingExclude);\n+\t\t}\n@@ -81,0 +101,6 @@\n+\t\t\tif (!stringExcludeRegexp.isEmpty()) {\n+\t\t\t\tmessage = message + \" \"\n+\t\t\t\t\t\t+ MessageFormat.format(\n+\t\t\t\t\t\t\t\tMessages.getString(Messages.PasswordsInSystemPropertiesRule_TEXT_INFO_EXCLUDED_INFO),\n+\t\t\t\t\t\t\t\tstringExcludeRegexp);\n+\t\t\t}\n@@ -100,1 +126,1 @@\n-\t\treturn Collections.emptyList();\n+\t\treturn CONFIG_ATTRIBUTES;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/PasswordsInSystemPropertiesRule.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -463,0 +463,2 @@\n+\tpublic static final String PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS = \"PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS\"; \/\/$NON-NLS-1$\n+\tpublic static final String PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS_LONG = \"PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS_LONG\"; \/\/$NON-NLS-1$\n@@ -466,0 +468,1 @@\n+\tpublic static final String PasswordsInArgsRule_TEXT_INFO_EXCLUDED_INFO = \"PasswordsInArgsRule_TEXT_INFO_EXCLUDED_INFO\"; \/\/$NON-NLS-1$\t\n@@ -467,0 +470,2 @@\n+\tpublic static final String PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS = \"PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS\"; \/\/$NON-NLS-1$\n+\tpublic static final String PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS_LONG = \"PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS_LONG\"; \/\/$NON-NLS-1$\n@@ -469,0 +474,1 @@\n+\tpublic static final String PasswordsInEnvironmentRuleFactory_TEXT_INFO_EXCLUDED_INFO = \"PasswordsInEnvironmentRuleFactory_TEXT_INFO_EXCLUDED_INFO\"; \/\/$NON-NLS-1$\t\n@@ -471,0 +477,2 @@\n+\tpublic static final String PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS = \"PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS\"; \/\/$NON-NLS-1$\n+\tpublic static final String PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS_LONG = \"PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS_LONG\"; \/\/$NON-NLS-1$\n@@ -473,0 +481,1 @@\n+\tpublic static final String PasswordsInSystemPropertiesRule_TEXT_INFO_EXCLUDED_INFO = \"PasswordsInSystemPropertiesRule_TEXT_INFO_EXCLUDED_INFO\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -532,0 +532,2 @@\n+PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS=Excluded strings\n+PasswordsInArgsRule_CONFIG_EXCLUDED_STRINGS_LONG=Regular expression describing which strings to exclude, for example (passworld|passwise)\n@@ -533,1 +535,0 @@\n-# {0} is a list of argument strings\n@@ -535,0 +536,3 @@\n+# {0} is a regular expression exclude strings\n+PasswordsInArgsRule_TEXT_INFO_EXCLUDED_INFO=The following regular expression was used to exclude strings from this rule: ''{0}''.\n+# {0} is a list of argument strings\n@@ -537,0 +541,2 @@\n+PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS=Excluded strings\n+PasswordsInEnvironmentRuleFactory_CONFIG_EXCLUDED_STRINGS_LONG=Regular expression describing which strings to exclude, for example (passworld|passwise)\n@@ -539,0 +545,2 @@\n+# {0} is a regular expression exclude strings\n+PasswordsInEnvironmentRuleFactory_TEXT_INFO_EXCLUDED_INFO=The following regular expression was used to exclude strings from this rule: ''{0}''.\n@@ -542,0 +550,2 @@\n+PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS=Excluded strings\n+PasswordsInSystemPropertiesRule_CONFIG_EXCLUDED_STRINGS_LONG=Regular expression describing which strings to exclude, for example (passworld|passwise)\n@@ -544,0 +554,2 @@\n+# {0} is a regular expression exclude strings\n+PasswordsInSystemPropertiesRule_TEXT_INFO_EXCLUDED_INFO=The following regular expression was used to exclude strings from this rule: ''{0}''.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk.general;\n+\n+import org.openjdk.jmc.common.item.IAccessorKey;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.util.MemberAccessorToolkit;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.TestEvent;\n+\n+public class EnvironmentVariableTestEvent extends TestEvent {\n+\tprivate final String key;\n+\n+\tpublic EnvironmentVariableTestEvent(String key) {\n+\t\tsuper(JdkTypeIDs.ENVIRONMENT_VARIABLE);\n+\t\tthis.key = key;\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\tif (\"key\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, String, String> constant(key);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/EnvironmentVariableTestEvent.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk.general;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.general.PasswordsInArgumentsRule;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.MockEventCollection;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.TestEvent;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.VMInfoTestEvent;\n+\n+@SuppressWarnings(\"restriction\")\n+public class PasswordsInArgumentsRuleTest {\n+\n+\t@Test\n+\tpublic void containsPassword() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new VMInfoTestEvent(\"\", \"-Dpassword=foo\")};\n+\t\ttestPasswordsInArgsRule(testEvents,\n+\t\t\t\t\"The following suspicious application arguments were found in this recording: <ul><li>-Dpassword=[...]<\/li><\/ul><p>They may contain passwords. If you do not want to have your passwords directly as arguments to the Java process, there are usually other means to provide them to your software. If you wish to keep using passwords as arguments, but want to be able to share recordings without also sharing the passwords, please disable the 'JVM Information' event. Note that disabling the 'JVM Information' event can limit functionality in the Flight Recorder automated analysis. The following regular expression was used to exclude strings from this rule: '.*(passworld|passwise).*'.\");\n+\t}\n+\n+\t@Test\n+\tpublic void NotContainPassword() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new VMInfoTestEvent(\"\", \"-Dpaswrd=foo\")};\n+\t\ttestPasswordsInArgsRule(testEvents,\n+\t\t\t\t\"The recording does not seem to contain passwords in the application arguments.\");\n+\t}\n+\n+\t@Test\n+\tpublic void containsExcludedStrings() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new VMInfoTestEvent(\"\", \"-Dpassworld=foo\")};\n+\t\ttestPasswordsInArgsRule(testEvents,\n+\t\t\t\t\"The recording does not seem to contain passwords in the application arguments.\");\n+\t}\n+\n+\tprivate void testPasswordsInArgsRule(TestEvent[] testEvents, String descriptionExpected) {\n+\t\tIItemCollection events = new MockEventCollection(testEvents);\n+\t\tPasswordsInArgumentsRule passwordsInArgsRule = new PasswordsInArgumentsRule();\n+\t\tRunnableFuture<Result> future = passwordsInArgsRule.evaluate(events, IPreferenceValueProvider.DEFAULT_VALUES);\n+\t\ttry {\n+\t\t\tfuture.run();\n+\t\t\tResult res = future.get();\n+\t\t\tString longDesc = res.getLongDescription();\n+\t\t\tAssert.assertEquals(descriptionExpected, longDesc);\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/PasswordsInArgumentsRuleTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk.general;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.general.PasswordsInEnvironmentRule;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.MockEventCollection;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.TestEvent;\n+\n+@SuppressWarnings(\"restriction\")\n+public class PasswordsInEnvironmentRuleTest {\n+\n+\t@Test\n+\tpublic void containsPassword() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new EnvironmentVariableTestEvent(\"password\")};\n+\t\ttestPasswordsInEnvRule(testEvents,\n+\t\t\t\t\"The following suspicious environment variables were found in this recording: <ul><li>password<\/li><\/ul><p>They may contain passwords. If you wish to keep having passwords in your environment variables, but want to be able to share recordings without also sharing the passwords, please disable the 'Initial Environment Variable' event. The following regular expression was used to exclude strings from this rule: '(passworld|passwise)'.\");\n+\t}\n+\n+\t@Test\n+\tpublic void notContainPassword() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new EnvironmentVariableTestEvent(\"paswrd\")};\n+\t\ttestPasswordsInEnvRule(testEvents,\n+\t\t\t\t\"The recording does not seem to contain passwords in the environment variables.\");\n+\t}\n+\n+\t@Test\n+\tpublic void containsExcludedStrings() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new EnvironmentVariableTestEvent(\"passworld\")};\n+\t\ttestPasswordsInEnvRule(testEvents,\n+\t\t\t\t\"The recording does not seem to contain passwords in the environment variables.\");\n+\t}\n+\n+\tprivate void testPasswordsInEnvRule(TestEvent[] testEvents, String descriptionExpected) {\n+\t\tIItemCollection events = new MockEventCollection(testEvents);\n+\t\tPasswordsInEnvironmentRule passwordsInEnvRule = new PasswordsInEnvironmentRule();\n+\t\tRunnableFuture<Result> future = passwordsInEnvRule.evaluate(events, IPreferenceValueProvider.DEFAULT_VALUES);\n+\t\ttry {\n+\t\t\tfuture.run();\n+\t\t\tResult res = future.get();\n+\t\t\tString longDesc = res.getLongDescription();\n+\t\t\tAssert.assertEquals(descriptionExpected, longDesc);\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/PasswordsInEnvironmentRuleTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk.general;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.general.PasswordsInSystemPropertiesRule;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.MockEventCollection;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.TestEvent;\n+\n+@SuppressWarnings(\"restriction\")\n+public class PasswordsInSystemPropertiesRuleTest {\n+\n+\t@Test\n+\tpublic void containsPassword() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new SystemPropertiesTestEvent(\"password\")};\n+\t\ttestPasswordsInSystemPropertiesRule(testEvents,\n+\t\t\t\t\"The following suspicious system properties were found in this recording: <ul><li>password<\/li><\/ul><p>They may contain passwords. If you wish to keep having passwords in your system properties, but want to be able to share recordings without also sharing the passwords, please disable the 'Initial System Property' event. The following regular expression was used to exclude strings from this rule: '(passworld|passwise)'.\");\n+\t}\n+\n+\t@Test\n+\tpublic void notContainPassword() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new SystemPropertiesTestEvent(\"paswrd\")};\n+\t\ttestPasswordsInSystemPropertiesRule(testEvents,\n+\t\t\t\t\"The recording does not seem to contain passwords in the system properties.\");\n+\t}\n+\n+\t@Test\n+\tpublic void containsExcludedStrings() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new SystemPropertiesTestEvent(\"passworld\")};\n+\t\ttestPasswordsInSystemPropertiesRule(testEvents,\n+\t\t\t\t\"The recording does not seem to contain passwords in the system properties.\");\n+\t}\n+\n+\tprivate void testPasswordsInSystemPropertiesRule(TestEvent[] testEvents, String descriptionExpected) {\n+\t\tIItemCollection events = new MockEventCollection(testEvents);\n+\t\tPasswordsInSystemPropertiesRule passwordsInSystemPropertiesRule = new PasswordsInSystemPropertiesRule();\n+\t\tRunnableFuture<Result> future = passwordsInSystemPropertiesRule.evaluate(events,\n+\t\t\t\tIPreferenceValueProvider.DEFAULT_VALUES);\n+\t\ttry {\n+\t\t\tfuture.run();\n+\t\t\tResult res = future.get();\n+\t\t\tString longDesc = res.getLongDescription();\n+\t\t\tAssert.assertEquals(descriptionExpected, longDesc);\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/PasswordsInSystemPropertiesRuleTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk.general;\n+\n+import org.openjdk.jmc.common.item.IAccessorKey;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.util.MemberAccessorToolkit;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.test.rules.jdk.TestEvent;\n+\n+public class SystemPropertiesTestEvent extends TestEvent {\n+\tprivate final String key;\n+\n+\tpublic SystemPropertiesTestEvent(String key) {\n+\t\tsuper(JdkTypeIDs.SYSTEM_PROPERTIES);\n+\t\tthis.key = key;\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\tif (\"key\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, String, String> constant(key);\n+\t\t}\n+\t\treturn null;\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/SystemPropertiesTestEvent.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -1580,1 +1580,1 @@\n-<longDescription>The following suspicious environment variables were found in this recording: &lt;ul&gt;&lt;li&gt;P4PASSWD&lt;\/li&gt;&lt;\/ul&gt;&lt;p&gt;They may contain passwords. If you wish to keep having passwords in your environment variables, but want to be able to share recordings without also sharing the passwords, please disable the 'Initial Environment Variable' event.<\/longDescription>\n+<longDescription>The following suspicious environment variables were found in this recording: &lt;ul&gt;&lt;li&gt;P4PASSWD&lt;\/li&gt;&lt;\/ul&gt;&lt;p&gt;They may contain passwords. If you wish to keep having passwords in your environment variables, but want to be able to share recordings without also sharing the passwords, please disable the 'Initial Environment Variable' event. The following regular expression was used to exclude strings from this rule: '(passworld|passwise)'.<\/longDescription>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/resources\/baseline\/JfrRuleBaseline.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}