{"files":[{"patch":"@@ -9,1 +9,1 @@\n-**You will need an Eclipse 2020-03 or later!**\n+**You will need an Eclipse 2021-06 or later!**\n@@ -20,1 +20,1 @@\n-Next set up your JDKs in your Eclipse. Download and install a JDK 8 and JDK 11 (or the very latest update of the latest JDK), then open Window | Preferences and then select Java \/ Installed JREs. Add your favourite JKD 8 and JDK 11 JDKs (Add…) and then use Java \/ Installed JREs \/ Execution Environments to set them as defaults for the JDK 8 and JDK 11 execution environments.\n+Next set up your JDKs in your Eclipse. Download and install a JDK 8 and JDK 11 (or the very latest update of the latest JDK), then open _Window | Preferences_ and then select _Java \/ Installed JREs_. Add your favourite JKD 8 and JDK 11 JDKs (_Add…_) and then use _Java \/ Installed JREs \/ Execution Environments_ to set them as defaults for the JDK 8 and JDK 11 execution environments.\n@@ -30,1 +30,6 @@\n-Okay, we now have our JDKs set up. If you want to import not only the JMC core project, you will next need to set up a user library for things that JMC will need from the JDK. Go to Preferences | Java\/Build Path\/User Libraries and create a new library named JMC_JDK. Add (Add External JARs…) the following JARs from a JDK 8 (u40 or above) to the User Library: tools.jar (\/lib\/tools.jar) and finally jconsole.jar (\/lib\/jconsole.jar).\n+Ensure Eclipse compiler is set to Java 11, go to _Preferences | Java \/ Compiler_ then for\n+_Compiler compliance level_ choose `11`.\n+\n+![Se compiler comliance level](images\/setcompilercompliancelevel.png)\n+\n+Okay, we now have our JDKs set up. If you want to import not only the JMC core project, you will next need to set up a user library for things that JMC will need from the JDK. Go to _Preferences | Java \/ Build Path \/ User Libraries_ and create a new library named `JMC_JDK`. Add (_Add External JARs…_) the following JARs from a JDK 8 (u40 or above) to the User Library: `tools.jar` (`\/lib\/tools.jar`) and finally `jconsole.jar` (`\/lib\/jconsole.jar`).\n@@ -43,1 +48,2 @@\n-* Is the Jetty server from the build instructions still up and running? ![](images\/p2site.png)\n+* Is the Jetty server from the build instructions still up and running? (`cd releng\/third-party; mvn p2:site && mvn jetty:run`)\n+   ![](images\/p2site.png)\n@@ -46,1 +52,1 @@\n-If yes, go ahead and open up the most recent target file you can find, available under releng\/platform-definitions\/platform-definition-&lt;year&gt;-&lt;month&gt; (File | Open File). You should see something like this:\n+If yes, go ahead and open up the most recent target file you can find, available under `releng\/platform-definitions\/platform-definition-{year}-{month}` (__File | Open File__). You should see something like this:\n@@ -50,1 +56,1 @@\n-Wait for all the dependencies to be properly loaded (check the progress in the lower right corner), then click the Set as Active Target Platform link in the upper right corner.\n+**Wait for all the dependencies to be properly loaded** (check the progress in the lower right corner), then click the _Set as Active Target Platform_ link in the upper right corner.\n@@ -52,1 +58,1 @@\n-Now there is one final preparation for the import – we need to turn off certain Maven settings. Go to the preferences, and select Maven \/ Errors\/Warnings. Set Plugin execution not covered by lifecycle configuration to Ignore, and also Out-of-date project configuration to Ignore\n+Now there is one final preparation for the import – we need to turn off certain Maven settings. Go to the preferences, and select _Maven \/ Errors\/Warnings_. Set _Plugin execution not covered by lifecycle configuration_ to _Ignore_, and also _Out-of-date project configuration_ to _Ignore_.\n@@ -59,1 +65,1 @@\n-First we will have to import the core projects, since they are built separately from the rest. Select File | Import… and select Maven \/ Existing Maven Project.\n+First we will have to import the `core\/` projects, since they are built separately from the rest. Select _File | Import…_ and select _Maven \/ Existing Maven Project_.\n@@ -63,1 +69,1 @@\n-Click next, and browse into the jmc\/core folder. Select all the core projects and import them.\n+Click next, and browse into the `jmc\/core` folder. Select all the core projects and import them.\n@@ -65,1 +71,1 @@\n-Next select File | Import… and select Maven \/ Existing Maven Project again, but this time from the root.\n+Next select _File | Import…_ and select _Maven \/ Existing Maven Project_ again, but this time from the root.\n@@ -67,1 +73,1 @@\n-Next we will import the project which contains the launchers. Select File | Import… and then select Existing Projects into Workspace. Find the configuration\/ide\/eclipse folder and click Ok.\n+Next we will import the project which contains the launchers. Select _File | Import…_ and then select _Existing Projects into Workspace_. Find the `configuration\/ide\/eclipse` folder and click Ok.\n@@ -76,1 +82,1 @@\n-If you don’t plan on submitting any changes, then this step is optional. The team use shared settings for formatter and macros. Go to the preferences and then to Java \/ Code Style \/ Formatter. Then click Import… and select the configuration\/ide\/eclipse\/formatting\/formatting.xml. You should now have the Mission Control formatting settings active:\n+If you don’t plan on submitting any changes, then this step is optional. The team use shared settings for formatter and macros. Go to the preferences and then to _Java \/ Code Style \/ Formatter_. Then click _Import…_ and select the `configuration\/ide\/eclipse\/formatting\/formatting.xml`. You should now have the _Mission Control_ formatting settings active:\n@@ -82,1 +88,1 @@\n-If you have the spotbugs plug-in installed, you should also import the spotbugs excludes (configuration\/spotbugs\/spotbugs-exclude.xml). There is also a common dictionary (configuration\/ide\/eclipse\/dictionary\/dictionary.txt) and templates (configuration\/ide\/eclipse\/templates\/JMC templates.xml) which you may find useful.\n+If you have the spotbugs plug-in installed, you should also import the spotbugs excludes (`configuration\/spotbugs\/spotbugs-exclude.xml`). There is also a common dictionary (`configuration\/ide\/eclipse\/dictionary\/dictionary.txt`) and templates (`configuration\/ide\/eclipse\/templates\/JMC templates.xml`) which you may find useful.\n","filename":"docs\/devguide\/README.md","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"filename":"docs\/devguide\/images\/setcompilercompliancelevel.png","binary":true,"status":"added"}]}