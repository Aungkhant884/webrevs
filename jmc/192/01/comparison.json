{"files":[{"patch":"@@ -54,2 +54,1 @@\n- * Small ASM based byte code instrumentation agent for declaratively adding logging and JFR events.\n- * Note: This agent is currently work in progress, and it is not supported for production use yet.\n+ * Small ASM based byte code instrumentation agent for declaratively adding JFR events.\n@@ -61,1 +60,1 @@\n-\tpublic static final String VERSION = \"0.9.0\"; \/\/$NON-NLS-1$\n+\tpublic static final String VERSION = \"1.0.0\"; \/\/$NON-NLS-1$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Agent.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-\t\treturn type.getSort() != Type.OBJECT && type.getSort() != Type.ARRAY;\n+\t\treturn TypeUtils.isSupportedType(type);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/JFRTransformDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import org.openjdk.jmc.agent.ReturnValue;\n@@ -85,1 +84,1 @@\n-\t\t\tcreateField(cw, td, Type.getReturnType(td.getMethod().getSignature()));\n+\t\t\tcreateField(cw, td, td.getReturnValue(), Type.getReturnType(td.getMethod().getSignature()));\n@@ -107,1 +106,1 @@\n-\t\t\t\tfieldType = getFieldType(Type.getType(resolved.getConverterMethod().getReturnType()));\n+\t\t\t\tfieldType = getFieldTypeDescriptor(Type.getType(resolved.getConverterMethod().getReturnType()));\n@@ -117,1 +116,1 @@\n-\t\t\tfieldType = getFieldType(type);\n+\t\t\tfieldType = getFieldTypeDescriptor(type);\n@@ -149,40 +148,0 @@\n-\tprivate static void createField(ClassWriter cw, JFRTransformDescriptor td, Type type) {\n-\t\tReturnValue returnValue = td.getReturnValue();\n-\t\tif (!td.isAllowedEventFieldType(returnValue, type)) {\n-\t\t\tLogger.getLogger(JFREventClassGenerator.class.getName())\n-\t\t\t\t\t.warning(\"Skipped generating field in event class for return value \" + returnValue + \" and type \" \/\/$NON-NLS-1$\/\/$NON-NLS-2$\n-\t\t\t\t\t\t\t+ type + \" because of configuration settings!\"); \/\/$NON-NLS-1$\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tString fieldType = getFieldType(type);\n-\n-\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_PROTECTED, returnValue.getFieldName(), fieldType, null, null);\n-\n-\t\t\/\/ Name\n-\t\tAnnotationVisitor av = fv.visitAnnotation(\"Ljdk\/jfr\/Label;\", true);\n-\t\tav.visit(\"value\", returnValue.getName());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ Description\n-\t\tav = fv.visitAnnotation(\"Ljdk\/jfr\/Description;\", true);\n-\t\tav.visit(\"value\", returnValue.getDescription());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ \"ContentType\"\n-\t\t\/\/ We support the old JDK 7 style content types transparently.\n-\t\t\/\/ We also support user defined content types and a single string value annotation parameter to the annotation.\n-\t\tString contentTypeAnnotation = getContentTypeAnnotation(returnValue.getContentType());\n-\t\tif (contentTypeAnnotation != null) {\n-\t\t\tString[] contentTypeAnnotationInfo = contentTypeAnnotation.split(\";\");\n-\t\t\tav = fv.visitAnnotation(contentTypeAnnotationInfo[0] + \";\", true);\n-\t\t\tif (contentTypeAnnotationInfo.length > 1) {\n-\t\t\t\tav.visit(\"value\", contentTypeAnnotationInfo[1]);\n-\t\t\t}\n-\t\t\tav.visitEnd();\n-\t\t}\n-\n-\t\t\/\/ FIXME: RelKey\n-\t\tfv.visitEnd();\n-\t}\n-\n@@ -223,2 +182,2 @@\n-\tprivate static String getFieldType(Type type) {\n-\t\tif (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {\n+\tprivate static String getFieldTypeDescriptor(Type type) {\n+\t\tif (!TypeUtils.isSupportedType(type)) {\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFREventClassGenerator.java","additions":5,"deletions":46,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-\t\t\t\t\tif (TypeUtils.shouldStringify(param, argumentType)) {\n+\t\t\t\t\tif (!TypeUtils.isSupportedType(argumentType) && transformDescriptor.isAllowToString()) {\n@@ -155,1 +155,1 @@\n-\t\t\t\t\t\targumentType = TypeUtils.STRING_TYPE;\n+\t\t\t\t\t\targumentType = TypeUtils.TYPE_STRING;\n@@ -179,1 +179,1 @@\n-\t\t\t\t\tif (TypeUtils.shouldStringify(field, fieldType)) {\n+\t\t\t\t\tif (!TypeUtils.isSupportedType(fieldType) && transformDescriptor.isAllowToString()) {\n@@ -181,1 +181,1 @@\n-\t\t\t\t\t\tfieldType = TypeUtils.STRING_TYPE;\n+\t\t\t\t\t\tfieldType = TypeUtils.TYPE_STRING;\n@@ -270,0 +270,5 @@\n+\t\treturn convertify(mv, resolvedConvertable, type);\n+\t}\n+\n+\tprivate Type convertify(MethodVisitor mv, ResolvedConvertable resolvedConvertable, Type type)\n+\t\t\tthrows MalformedConverterException {\n@@ -313,1 +318,1 @@\n-\t\t\tif (TypeUtils.shouldStringify(returnValue, returnType)) {\n+\t\t\tif (!TypeUtils.isSupportedType(returnType)) {\n@@ -315,1 +320,1 @@\n-\t\t\t\treturnType = TypeUtils.STRING_TYPE;\n+\t\t\t\treturnType = TypeUtils.TYPE_STRING;\n@@ -319,1 +324,1 @@\n-\t\twriteAttribute(returnValue, returnTypeRef);\n+\t\twriteAttribute(returnValue, returnType);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFRMethodAdvisor.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-\t\t\t\twriteAttribute(param, argumentType);\n+\t\t\t\twriteAttribute(param, argumentType, transformDescriptor.isAllowToString());\n@@ -144,1 +144,1 @@\n-\t\t\t\twriteAttribute(field, refChain.getType());\n+\t\t\t\twriteAttribute(field, refChain.getType(), transformDescriptor.isAllowToString());\n@@ -223,2 +223,2 @@\n-\tprivate void writeAttribute(Attribute param, Type type) {\n-\t\tif (TypeUtils.shouldStringify(param, type)) {\n+\tprivate void writeAttribute(Attribute param, Type type, boolean allowToString) {\n+\t\tif (!TypeUtils.isSupportedType(type) && allowToString) {\n@@ -226,1 +226,1 @@\n-\t\t\ttype = TypeUtils.STRING_TYPE;\n+\t\t\ttype = TypeUtils.TYPE_STRING;\n@@ -257,1 +257,1 @@\n-\t\twriteAttribute(returnValue, returnTypeRef);\n+\t\twriteAttribute(returnValue, returnTypeRef, transformDescriptor.isAllowToString());\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrlegacy\/impl\/JFRLegacyMethodAdvisor.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import org.openjdk.jmc.agent.Convertable;\n@@ -59,3 +58,0 @@\n-\tpublic static final Type OBJECT_TYPE = Type.getObjectType(\"java\/lang\/Object\"); \/\/$NON-NLS-1$\n-\tpublic static final Type OBJECT_ARRAY_TYPE = Type.getObjectType(\"[Ljava\/lang\/Object;\"); \/\/$NON-NLS-1$\n-\tpublic static final Type STRING_TYPE = Type.getType(\"Ljava\/lang\/String;\"); \/\/$NON-NLS-1$\n@@ -63,1 +59,7 @@\n-\tpublic static final Object STRING_INTERNAL_NAME = \"java\/lang\/String\"; \/\/$NON-NLS-1$\n+\tpublic static final Type TYPE_OBJECT = Type.getObjectType(\"java\/lang\/Object\"); \/\/$NON-NLS-1$\n+\tpublic static final Type TYPE_OBJECT_ARRAY = Type.getObjectType(\"[Ljava\/lang\/Object;\"); \/\/$NON-NLS-1$\n+\tpublic static final Type TYPE_STRING = Type.getType(\"Ljava\/lang\/String;\"); \/\/$NON-NLS-1$\n+\n+\tpublic static final String INTERNAL_NAME_STRING = \"java\/lang\/String\"; \/\/$NON-NLS-1$\n+\tpublic static final String INTERNAL_NAME_THREAD = Type.getInternalName(Thread.class);\n+\tpublic static final String INTERNAL_NAME_CLASS = Type.getInternalName(Class.class);\n@@ -221,7 +223,0 @@\n-\tpublic static boolean shouldStringify(Convertable convertable, Type argumentType) {\n-\t\tif (argumentType.getSort() == Type.ARRAY || argumentType.getSort() == Type.OBJECT) {\n-\t\t\treturn !argumentType.getInternalName().equals(STRING_INTERNAL_NAME);\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n@@ -301,2 +296,2 @@\n-\t *            the type of the element on the operand stack or in the local variable table\n-\t * @return a array element for <code>MethodVisitor.visitFrame()<\/code>'s parameter\n+\t *            the type of the element on the operand stack or in the local variable table.\n+\t * @return a array element for <code>MethodVisitor.visitFrame()<\/code>'s parameter.\n@@ -329,0 +324,15 @@\n+\t\/**\n+\t * Returns true if the type provided is supported for a JFR event field.\n+\t * \n+\t * @param type\n+\t *            the type to check.\n+\t * @return true if the type provided is supported for a JFR event field.\n+\t *\/\n+\tpublic static boolean isSupportedType(Type type) {\n+\t\tif (INTERNAL_NAME_THREAD.equals(type.getInternalName()) || INTERNAL_NAME_CLASS.equals(type.getInternalName())\n+\t\t\t\t|| INTERNAL_NAME_STRING.equals(type.getInternalName())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn type.getSort() != Type.OBJECT && type.getSort() != Type.ARRAY;\n+\t}\n+\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/TypeUtils.java","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.converters.test;\n+\n+import org.openjdk.jmc.agent.test.DoLittleContainer;\n+\n+\/**\n+ * Converts a {@link DoLittleContainer} to {@link Thread}.\n+ *\/\n+public class DoLittleContainerThreadConverter {\n+\tpublic static Thread convert(DoLittleContainer container) {\n+\t\treturn container.getThread();\n+\t}\n+}\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/DoLittleContainerThreadConverter.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -41,0 +41,1 @@\n+import org.openjdk.jmc.agent.test.DoLittleContainer;\n@@ -45,0 +46,1 @@\n+\tprivate static final int SLEEP_TIME = 500;\n@@ -56,0 +58,2 @@\n+\t\tInnerClass innerClass = new InnerClass();\n+\n@@ -71,0 +75,5 @@\n+\t\t\t\t\tprintReturnGurka();\n+\t\t\t\t\tprintThread(DoLittleContainer.createAndStart());\n+\t\t\t\t\tprintClassGurka(Gurka.createGurka());\n+\t\t\t\t\tinnerClass.switchGurka();\n+\t\t\t\t\tinnerClass.instrumentationPoint();\n@@ -78,0 +87,12 @@\n+\tpublic static class InnerClass {\n+\t\tprivate volatile Gurka currentGurka = Gurka.createGurka();\n+\n+\t\tpublic void instrumentationPoint() {\n+\t\t\tSystem.out.println(\"InnerClass: currentGurka field is \" + currentGurka);\n+\t\t}\n+\n+\t\tpublic void switchGurka() {\n+\t\t\tcurrentGurka = Gurka.createGurka();\n+\t\t}\n+\t}\n+\n@@ -80,1 +101,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -85,1 +106,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -90,1 +111,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -95,1 +116,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -100,1 +121,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -105,1 +126,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -110,1 +131,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -115,1 +136,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -120,1 +141,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -125,1 +146,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -130,1 +151,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -135,1 +156,19 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n+\t}\n+\n+\tpublic static Gurka printReturnGurka() throws InterruptedException {\n+\t\tGurka gurka = Gurka.createGurka();\n+\t\tSystem.out.println(\"C Gurka returned: \" + gurka.toString());\n+\t\treturn gurka;\n+\t}\n+\n+\tpublic static void printThread(DoLittleContainer doLittleContainer) throws InterruptedException {\n+\t\tSystem.out.println(\"C Thread ID: \" + doLittleContainer.getThread().getId() + \" Name: \"\n+\t\t\t\t+ doLittleContainer.getThread().getName());\n+\t\tThread.sleep(SLEEP_TIME);\n+\t\tdoLittleContainer.shutdown();\n+\t}\n+\n+\tpublic static void printClassGurka(Gurka createGurka) throws InterruptedException {\n+\t\tSystem.out.println(\"C The class of Gurka is: \" + createGurka.getClass().getName());\n+\t\tThread.sleep(SLEEP_TIME);\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/InstrumentMeConverter.java","additions":51,"deletions":12,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * Converts a {@link Number} to long.\n+ * Converts an {@link Object} to {@link Class}.\n@@ -39,3 +39,3 @@\n-public class ConverterNumber {\n-\tpublic static long convert(Number number) {\n-\t\treturn number.longValue();\n+public class ObjectConverterClass {\n+\tpublic static Class<?> convert(Object object) {\n+\t\treturn object.getClass();\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/ObjectConverterClass.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/ConverterNumber.java","status":"copied"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.test;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public final class DoLittleContainer {\n+\tprivate static ThreadGroup GROUP_DOLITTLES = new ThreadGroup(\"DoLittles\");\n+\tprivate static AtomicInteger THREAD_COUNTER = new AtomicInteger();\n+\tprivate final DoLittle doLittle;\n+\tprivate final Thread thread;\n+\n+\tstatic final class DoLittle implements Runnable {\n+\t\tprivate volatile boolean keepRunning = true;\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\twhile (keepRunning) {\n+\t\t\t\ttry {\n+\t\t\t\t\tThread.sleep(200);\n+\t\t\t\t} catch (InterruptedException e) {\n+\t\t\t\t\t\/\/ Do nothing...\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic void shutdown() {\n+\t\t\tkeepRunning = false;\n+\t\t}\n+\t}\n+\n+\tpublic DoLittleContainer() {\n+\t\tthis.doLittle = new DoLittle();\n+\t\tthis.thread = new Thread(GROUP_DOLITTLES, doLittle, \"DoLittle-\" + THREAD_COUNTER.getAndIncrement());\n+\t\tthis.getThread().setDaemon(true);\n+\t}\n+\n+\tpublic void shutdown() {\n+\t\tdoLittle.shutdown();\n+\t\tgetThread().interrupt();\n+\t}\n+\n+\tpublic static DoLittleContainer createAndStart() {\n+\t\tDoLittleContainer threadContainer = new DoLittleContainer();\n+\t\tthreadContainer.getThread().start();\n+\t\treturn threadContainer;\n+\t}\n+\n+\tpublic Thread getThread() {\n+\t\treturn thread;\n+\t}\n+}\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/DoLittleContainer.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,2 @@\n+\tprivate static final int SLEEP_TIME = 500;\n+\n@@ -151,0 +153,4 @@\n+\t\tDoLittleContainer container = DoLittleContainer.createAndStart();\n+\t\tprintHelloWorldJFR14(container.getThread());\n+\t\tcontainer.shutdown();\n+\t\tprintHelloWorldJFR15(InstrumentMe.class);\n@@ -163,1 +169,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -169,1 +175,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -175,1 +181,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -180,1 +186,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -185,1 +191,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -190,1 +196,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -196,1 +202,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -202,1 +208,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -207,1 +213,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -212,1 +218,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -218,1 +224,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -225,1 +231,1 @@\n-\t\t\tThread.sleep(1000);\n+\t\t\tThread.sleep(SLEEP_TIME);\n@@ -233,1 +239,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -239,1 +245,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -245,1 +251,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -257,1 +263,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -263,1 +269,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -269,1 +275,11 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n+\t}\n+\n+\tpublic static void printHelloWorldJFR14(Thread thread) throws InterruptedException {\n+\t\tSystem.out.println(\"#SJFR14. Capturing thread parameter \" + thread.getId() + \":\" + thread.getName()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tThread.sleep(SLEEP_TIME);\n+\t}\n+\n+\tpublic static void printHelloWorldJFR15(Class<?> clazz) throws InterruptedException {\n+\t\tSystem.out.println(\"#SJFR15. Capturing class parameter \" + clazz.getName()); \/\/$NON-NLS-1$\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -274,1 +290,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -280,1 +296,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -286,1 +302,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -291,1 +307,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -296,1 +312,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -301,1 +317,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -307,1 +323,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -313,1 +329,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -318,1 +334,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -323,1 +339,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -329,1 +345,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -336,1 +352,1 @@\n-\t\t\tThread.sleep(1000);\n+\t\t\tThread.sleep(SLEEP_TIME);\n@@ -344,1 +360,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -350,1 +366,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -356,1 +372,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n@@ -368,1 +384,1 @@\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(SLEEP_TIME);\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/InstrumentMe.java","additions":51,"deletions":35,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -347,0 +347,91 @@\n+\t\t<event id=\"demo.jfr.convertertest.printThread\">\n+\t\t\t<label>ConverterEventThread<\/label>\n+\t\t\t<description>Testing converting to thread.\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/converterevents<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>printThread<\/name>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/DoLittleContainer;)V<\/descriptor>\n+\t\t\t\t<parameters>\n+\t\t\t\t\t<parameter index=\"0\">\n+\t\t\t\t\t\t<name>DoLittleThread<\/name>\n+\t\t\t\t\t\t<description>The converted DoLittleContainer<\/description>\n+\t\t\t\t\t\t<contenttype>None<\/contenttype>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.DoLittleContainerThreadConverter\n+\t\t\t\t\t\t<\/converter>\n+\t\t\t\t\t<\/parameter>\n+\t\t\t\t<\/parameters>\n+\t\t\t<\/method>\n+\t\t\t<location>WRAP<\/location>\n+\t\t<\/event>\t\n+\t\t<event id=\"demo.jfr.convertertest.printClass\">\n+\t\t\t<label>ConverterEventClass<\/label>\n+\t\t\t<description>Testing converting to class.\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/converterevents<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>printClassGurka<\/name>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<parameters>\n+\t\t\t\t\t<parameter index=\"0\">\n+\t\t\t\t\t\t<name>Gurk Class<\/name>\n+\t\t\t\t\t\t<description>The converted Gurka<\/description>\n+\t\t\t\t\t\t<contenttype>None<\/contenttype>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.ObjectConverterClass\n+\t\t\t\t\t\t<\/converter>\n+\t\t\t\t\t<\/parameter>\n+\t\t\t\t<\/parameters>\n+\t\t\t<\/method>\n+\t\t\t<location>WRAP<\/location>\n+\t\t<\/event>\t\n+\n+\t\t<!-- Converters for return values and fields -->\n+\t\t<event id=\"demo.jfr.convertertest.printReturnGurka\">\n+\t\t\t<label>ConverterEventReturnGurka<\/label>\n+\t\t\t<description>Testing converting to class.\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/converterevents<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>printReturnGurka<\/name>\n+\t\t\t\t<descriptor>()Lorg\/openjdk\/jmc\/agent\/test\/Gurka;<\/descriptor>\n+\t\t\t\t<returnvalue>\n+\t\t\t\t\t<description>The ID of the Gurka returned (double)<\/description>\n+\t\t\t\t\t<contenttype>None<\/contenttype>\n+\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterDouble\n+\t\t\t\t\t<\/converter>\n+\t\t\t\t<\/returnvalue>\n+\t\t\t<\/method>\n+\t\t\t<location>WRAP<\/location>\n+\t\t<\/event>\n+\t\t<event id=\"demo.jfr.convertertest.printInnerClassField\">\n+\t\t\t<label>ConverterEventInnerClassField<\/label>\n+\t\t\t<description>Testing converting a field in a class.\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/converterevents<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter$InnerClass\n+\t\t\t<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>instrumentationPoint<\/name>\n+\t\t\t\t<descriptor>()V<\/descriptor>\n+\t\t\t<\/method>\n+\t\t\t<fields>\n+\t\t\t\t<field>\n+\t\t\t\t\t<name>CurrentGurka<\/name>\n+\t\t\t\t\t<description>Capturing inner class field with complex type, transformed by converter to int\n+\t\t\t\t\t<\/description>\n+\t\t\t\t\t<expression>currentGurka<\/expression>\n+\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterDouble\n+\t\t\t\t\t<\/converter>\n+\t\t\t\t<\/field>\n+\t\t\t<\/fields>\n+\t\t<\/event>\n","filename":"agent\/src\/test\/resources\/org\/openjdk\/jmc\/agent\/converters\/test\/jfrprobes_template.xml","additions":91,"deletions":0,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,1 +174,1 @@\n-\t\t\t\t<name>printHelloWorldJFR11<\/name>\n+\t\t\t\t<name>printHelloWorldJFR13<\/name>\n@@ -192,0 +192,39 @@\n+\t\t<event id=\"demo.jfr.test14\">\n+\t\t\t<label>JFR Hello World Event 14 %TEST_NAME%<\/label>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\trecord the value of the thread argument\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/jfrhelloworldevent14<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.test.InstrumentMe<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>printHelloWorldJFR14<\/name>\n+\t\t\t\t<descriptor>(Ljava\/lang\/Thread;)V<\/descriptor>\n+\t\t\t\t<parameters>\n+\t\t\t\t\t<parameter index=\"0\">\n+\t\t\t\t\t\t<name>DoLittleThread<\/name>\n+\t\t\t\t\t\t<description>The Thread from the DoLittleContainer<\/description>\n+\t\t\t\t\t<\/parameter>\n+\t\t\t\t<\/parameters>\n+\t\t\t<\/method>\n+\t\t<\/event>\n+\t\t<event id=\"demo.jfr.test15\">\n+\t\t\t<label>JFR Hello World Event 15 %TEST_NAME%<\/label>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\trecord the value of the class argument\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/jfrhelloworldevent15<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.test.InstrumentMe<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>printHelloWorldJFR15<\/name>\n+\t\t\t\t<descriptor>(Ljava\/lang\/Class;)V<\/descriptor>\n+\t\t\t\t<parameters>\n+\t\t\t\t\t<parameter index=\"0\">\n+\t\t\t\t\t\t<name>Instrumented Class<\/name>\n+\t\t\t\t\t\t<description>Simply the instrumented class, over and over again\n+\t\t\t\t\t\t<\/description>\n+\t\t\t\t\t<\/parameter>\n+\t\t\t\t<\/parameters>\n+\t\t\t<\/method>\n+\t\t<\/event>\n@@ -244,2 +283,2 @@\n-\t\t\t\t<name>printInstanceHelloWorldJFR3<\/name>\n-\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/bciagent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<name>printHelloWorldJFR3<\/name>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n@@ -265,2 +304,2 @@\n-\t\t\t\t<name>printInstanceHelloWorldJFR4<\/name>\n-\t\t\t\t<descriptor>([Lorg\/openjdk\/jmc\/bciagent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<name>printHelloWorldJFR4<\/name>\n+\t\t\t\t<descriptor>([Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n","filename":"agent\/src\/test\/resources\/org\/openjdk\/jmc\/agent\/test\/jfrprobes_template.xml","additions":45,"deletions":6,"binary":false,"changes":51,"status":"modified"}]}