{"files":[{"patch":"@@ -264,1 +264,2 @@\n-\tpublic static String toDot(StacktraceGraphModel model, Map<ConfigurationKey, String> configuration) {\n+\tpublic static String toDot(\n+\t\tStacktraceGraphModel model, int maxNodesRendered, Map<ConfigurationKey, String> configuration) {\n@@ -268,1 +269,12 @@\n-\n+\t\tint nodeCount = model.getNodes().size();\n+\t\tif (nodeCount > maxNodesRendered) {\n+\t\t\tString message = String.format(\"Too many nodes in current selection%n(max: %d, actual: %d)\",\n+\t\t\t\t\tmaxNodesRendered, nodeCount);\n+\t\t\temitMessage(builder, message, configuration);\n+\t\t\tbuilder.append(\"}\");\n+\t\t\treturn builder.toString();\n+\t\t} else if (nodeCount == 0) {\n+\t\t\temitEmptyMessage(builder, \"No graph data in current selection\", configuration);\n+\t\t\tbuilder.append(\"}\");\n+\t\t\treturn builder.toString();\n+\t\t}\n@@ -356,0 +368,25 @@\n+\tprivate static void emitMessage(\n+\t\tStringBuilder builder, String message, Map<ConfigurationKey, String> configuration) {\n+\t\tString shape = getConf(configuration, ConfigurationKey.NodeShape, DEFAULT_SHAPE);\n+\t\tString color = getConf(configuration, ConfigurationKey.NodeColor, \"#b22b00\");\n+\t\tString fillColor = getConf(configuration, ConfigurationKey.NodeFillColor, \"#eddbd5\");\n+\t\tbuilder.append(\"message [label=\\\"\");\n+\t\tbuilder.append(message);\n+\t\tbuilder.append(\"\\\" id=\\\"message\\\"\");\n+\t\tbuilder.append(\" shape=\");\n+\t\tbuilder.append(shape);\n+\t\tbuilder.append(\" fontsize=5\");\n+\t\tbuilder.append(\" color=\\\"\");\n+\t\tbuilder.append(color);\n+\t\tbuilder.append(\"\\\" fillcolor=\\\"\");\n+\t\tbuilder.append(fillColor);\n+\t\tbuilder.append(\"\\\"]\\n\");\n+\t}\n+\n+\tprivate static void emitEmptyMessage(\n+\t\tStringBuilder builder, String message, Map<ConfigurationKey, String> configuration) {\n+\t\tbuilder.append(\"label= <<font color='gray' point-size='1'>\");\n+\t\tbuilder.append(message);\n+\t\tbuilder.append(\"<\/font>>\");\n+\t}\n+\n@@ -422,1 +459,1 @@\n-\t\tSystem.out.println(toDot(model, configuration));\n+\t\tSystem.out.println(toDot(model, 1000, configuration));\n","filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ext\/graphview\/graph\/DotGenerator.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.List;\n@@ -49,0 +50,5 @@\n+import org.eclipse.jface.action.Action;\n+import org.eclipse.jface.action.ActionContributionItem;\n+import org.eclipse.jface.action.IAction;\n+import org.eclipse.jface.action.IMenuCreator;\n+import org.eclipse.jface.action.IToolBarManager;\n@@ -59,0 +65,2 @@\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Menu;\n@@ -66,0 +74,1 @@\n+import org.openjdk.jmc.common.util.Pair;\n@@ -102,0 +111,1 @@\n+\t\tprivate final int maxNodesRendered;\n@@ -103,1 +113,2 @@\n-\t\tprivate ModelRebuildRunnable(GraphView view, FrameSeparator separator, IItemCollection items) {\n+\t\tprivate ModelRebuildRunnable(GraphView view, FrameSeparator separator, IItemCollection items,\n+\t\t\t\tint maxNodesRendered) {\n@@ -107,0 +118,1 @@\n+\t\t\tthis.maxNodesRendered = maxNodesRendered;\n@@ -124,1 +136,1 @@\n-\t\t\tString json = GraphView.toDot(model);\n+\t\t\tString dotString = GraphView.toDot(model, maxNodesRendered);\n@@ -129,1 +141,1 @@\n-\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, json));\n+\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, dotString));\n@@ -153,0 +165,1 @@\n+\tprivate int maxNodesRendered = 100;\n@@ -158,0 +171,4 @@\n+\n+\t\tIToolBarManager toolBar = site.getActionBars().getToolBarManager();\n+\t\ttoolBar.add(new NodeThresholdSelection());\n+\n@@ -167,0 +184,60 @@\n+\tprivate class NodeThresholdSelection extends Action implements IMenuCreator {\n+\t\tprivate Menu menu;\n+\t\tprivate final List<Pair<String, Integer>> items = List.of(new Pair<>(\"100\", 100), new Pair<>(\"500\", 500),\n+\t\t\t\tnew Pair<>(\"1000\", 1000));\n+\n+\t\tNodeThresholdSelection() {\n+\t\t\tsuper(\"Max Nodes\", IAction.AS_DROP_DOWN_MENU);\n+\t\t\tsetMenuCreator(this);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void dispose() {\n+\t\t\t\/\/ do nothing\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Menu getMenu(Control parent) {\n+\t\t\tif (menu == null) {\n+\t\t\t\tmenu = new Menu(parent);\n+\t\t\t\tpopulate(menu);\n+\t\t\t}\n+\t\t\treturn menu;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Menu getMenu(Menu parent) {\n+\t\t\tif (menu == null) {\n+\t\t\t\tmenu = new Menu(parent);\n+\t\t\t\tpopulate(menu);\n+\t\t\t}\n+\t\t\treturn menu;\n+\t\t}\n+\n+\t\tprivate void populate(Menu menu) {\n+\t\t\tfor (Pair<String, Integer> item : items) {\n+\t\t\t\tActionContributionItem actionItem = new ActionContributionItem(\n+\t\t\t\t\t\tnew SetNodeThreshold(item, item.right == maxNodesRendered));\n+\t\t\t\tactionItem.fill(menu, -1);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class SetNodeThreshold extends Action {\n+\t\tprivate int value;\n+\n+\t\tSetNodeThreshold(Pair<String, Integer> item, boolean isSelected) {\n+\t\t\tsuper(item.left, IAction.AS_RADIO_BUTTON);\n+\t\t\tthis.value = item.right;\n+\t\t\tsetChecked(isSelected);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tif (maxNodesRendered != value) {\n+\t\t\t\tmaxNodesRendered = value;\n+\t\t\t\ttriggerRebuildTask(currentItems);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n@@ -210,1 +287,1 @@\n-\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, frameSeparator, items);\n+\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, frameSeparator, items, maxNodesRendered);\n@@ -244,1 +321,1 @@\n-\tprivate static String toDot(StacktraceGraphModel model) {\n+\tprivate static String toDot(StacktraceGraphModel model, int maxNodesRendered) {\n@@ -248,1 +325,1 @@\n-\t\treturn render(model);\n+\t\treturn render(model, maxNodesRendered);\n@@ -251,2 +328,2 @@\n-\tprivate static String render(StacktraceGraphModel model) {\n-\t\treturn DotGenerator.toDot(model, DotGenerator.getDefaultConfiguration());\n+\tprivate static String render(StacktraceGraphModel model, int maxNodesRendered) {\n+\t\treturn DotGenerator.toDot(model, maxNodesRendered, DotGenerator.getDefaultConfiguration());\n","filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/graphview\/views\/GraphView.java","additions":85,"deletions":8,"binary":false,"changes":93,"status":"modified"}]}