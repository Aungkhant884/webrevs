{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,0 +107,4 @@\n+\t\tif (ConnectionToolkit.isSubstrateVM(handle)) {\n+\t\t\t\/\/ JFR may not have been built into the native image. Check that FlightRecorderMXBean is accessible from the MBean server.\n+\t\t\treturn isAvailable(handle);\n+\t\t}\n@@ -114,1 +118,4 @@\n-\t\tif (cfs != null && cfs.hasCommercialFeatures()) {\n+\t\tif (ConnectionToolkit.isSubstrateVM(handle)) {\n+\t\t\t\/\/ For native image, commercial features may be available but disabled while JFR is still enabled\n+\t\t\treturn !isAvailable(handle);\n+\t\t} else if (cfs != null && cfs.hasCommercialFeatures()) {\n@@ -131,1 +138,1 @@\n-\t\tif (JVMSupportToolkit.isFlightRecorderDisabled(handle, true)) {\n+\t\tif (!ConnectionToolkit.isSubstrateVM(handle) && JVMSupportToolkit.isFlightRecorderDisabled(handle, true)) {\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/FlightRecorderServiceV2.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -368,0 +368,14 @@\n+\t\/**\n+\t * Returns {@code true} if the connection handle is connected to a Substrate VM, {@code false}\n+\t * otherwise. This method requires the connection handle to be connected.\n+\t *\n+\t * @param connectionHandle\n+\t *            the connection handle to check.\n+\t * @return {@code true} if the connection handle is connected to a Substrate VM, {@code false}\n+\t *         otherwise.\n+\t *\/\n+\tpublic static boolean isSubstrateVM(IConnectionHandle connectionHandle) {\n+\t\tString vmName = getVMName(connectionHandle);\n+\t\treturn vmName != null && JavaVMVersionToolkit.isSubstrateVMName(vmName);\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ConnectionToolkit.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javax.management.ObjectName;\n@@ -50,0 +51,2 @@\n+\tprivate final static String JFR_MBEAN_OBJECT_NAME = \"jdk.management.jfr:type=FlightRecorder\"; \/\/$NON-NLS-1$\n+\n@@ -69,1 +72,1 @@\n-\t\t} else if (!ConnectionToolkit.isHotSpot(connection)) {\n+\t\t} else if (!ConnectionToolkit.isHotSpot(connection) && !ConnectionToolkit.isSubstrateVM(connection)) {\n@@ -101,2 +104,6 @@\n-\t\t\tHotspotManagementToolkit.getVMOption(server, \"FlightRecorder\");\n-\t\t\treturn true;\n+\t\t\tif (ConnectionToolkit.isSubstrateVM(connection)) {\n+\t\t\t\treturn server.isRegistered(new ObjectName(JFR_MBEAN_OBJECT_NAME));\n+\t\t\t} else {\n+\t\t\t\tHotspotManagementToolkit.getVMOption(server, \"FlightRecorder\");\n+\t\t\t\treturn true;\n+\t\t\t}\n@@ -182,0 +189,3 @@\n+\t\t\tif (jvmInfo.getJvmType() == JVMType.SUBSTRATE) {\n+\t\t\t\treturn null;\n+\t\t\t}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/JVMSupportToolkit.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+\tprivate static final String NAME_SUBSTRATE = \"Substrate VM\";\n@@ -54,0 +55,1 @@\n+\tprivate static final String VENDOR_GRAAL = \"GraalVM Community\";\n@@ -164,0 +166,11 @@\n+\n+\t@Test\n+\tpublic void testSubstrateVMSupported() {\n+\t\tServerHandle server = new ServerHandle(\n+\t\t\t\tnew ServerDescriptor(null, null,\n+\t\t\t\t\t\tnew JVMDescriptor(\"20\", JVMType.SUBSTRATE, JVMArch.UNKNOWN, null, null, NAME_SUBSTRATE,\n+\t\t\t\t\t\t\t\tVENDOR_GRAAL, null, false, null)),\n+\t\t\t\tnew ConnectionDescriptorBuilder().hostName(\"localhost\").port(0).build(), null);\n+\t\tString errorMessage = JVMSupportToolkit.checkFlightRecorderSupport(server, false);\n+\t\tassertEquals(SUPPORTED_MESSAGE, errorMessage);\n+\t}\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/JVMSupportToolkitTest.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -49,0 +49,4 @@\n+\t\/**\n+\t * The JVM is Substrate VM.\n+\t *\/\n+\tSUBSTRATE,\n@@ -70,0 +74,2 @@\n+\t\t} else if (JavaVMVersionToolkit.isSubstrateVMName(jvmName)) {\n+\t\t\treturn JVMType.SUBSTRATE;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/jvm\/JVMType.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,0 +119,15 @@\n+\t\/**\n+\t * Returns whether this is a Substrate VM or not.\n+\t *\n+\t * @param vmName\n+\t *            the VM name to check.\n+\t * @return {@code true} if it is a Substrate VM, {@code false} if it isn't or if was not\n+\t *         possible to tell.\n+\t *\/\n+\tpublic static boolean isSubstrateVMName(String vmName) {\n+\t\tif (vmName == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn vmName.startsWith(\"Substrate VM\"); \/\/$NON-NLS-1$\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/version\/JavaVMVersionToolkit.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}