{"files":[{"patch":"@@ -53,0 +53,1 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.RecordingSettings;\n@@ -55,0 +56,1 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.Types;\n@@ -98,1 +100,1 @@\n-\tprivate final TypesImpl types = new TypesImpl(metadata);\n+\tprivate final TypesImpl types;\n@@ -100,3 +102,3 @@\n-\tpublic RecordingImpl(OutputStream output) {\n-\t\tthis.startTicks = System.nanoTime();\n-\t\tthis.startNanos = System.currentTimeMillis() * 1_000_000L;\n+\tpublic RecordingImpl(OutputStream output, RecordingSettings settings) {\n+\t\tthis.startTicks = settings.getStartTimestamp();\n+\t\tthis.startNanos = settings.getStartTimestamp();\n@@ -104,0 +106,1 @@\n+\t\tthis.types = new TypesImpl(metadata, settings.shouldInitializeJDKTypes());\n@@ -134,1 +137,0 @@\n-\t\tSystem.err.println(\"=== rotate chunk\");\n@@ -214,1 +216,1 @@\n-\t\t\t\t\t\t\tfield -> field.addAnnotation(TypesImpl.JDK.ANNOTATION_TIMESTAMP, \"TICKS\"));\n+\t\t\t\t\t\t\tfield -> field.addAnnotation(Types.JDK.ANNOTATION_TIMESTAMP, \"TICKS\"));\n@@ -272,1 +274,1 @@\n-\t\t\t\t.writeLongRaw(startNanos) \/\/ start timestamp\n+\t\t\t\t.writeLongRaw(startNanos) \/\/ start time in nanoseconds\n@@ -274,1 +276,2 @@\n-\t\t\t\t.writeLongRaw(startTicks).writeLongRaw(1_000_000_000L) \/\/ 1 tick = 1 ns\n+\t\t\t\t.writeLongRaw(startTicks) \/\/ start time in ticks\n+\t\t\t\t.writeLongRaw(1_000_000_000L) \/\/ 1 tick = 1 ns\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/RecordingImpl.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+package org.openjdk.jmc.flightrecorder.writer;\n+\n+import org.openjdk.jmc.flightrecorder.writer.api.RecordingSettings;\n+import org.openjdk.jmc.flightrecorder.writer.api.RecordingSettingsBuilder;\n+\n+public final class RecordingSettingsBuilderImpl implements RecordingSettingsBuilder {\n+\tprivate long timestamp = -1;\n+\tprivate boolean initializeJdkTypes = false;\n+\n+\t@Override\n+\tpublic RecordingSettingsBuilder withTimestamp(long timestamp) {\n+\t\tthis.timestamp = timestamp;\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic RecordingSettingsBuilder withJdkTypeInitialization() {\n+\t\tinitializeJdkTypes = true;\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic RecordingSettings build() {\n+\t\treturn new RecordingSettings(timestamp > 0 ? timestamp : System.currentTimeMillis() * 1_000_000L,\n+\t\t\t\tinitializeJdkTypes);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/RecordingSettingsBuilderImpl.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -52,0 +52,4 @@\n+\t\tthis(metadata, true);\n+\t}\n+\n+\tTypesImpl(MetadataImpl metadata, boolean initialize) {\n@@ -56,2 +60,4 @@\n-\t\tregisterJdkTypes();\n-\t\tthis.metadata.resolveTypes(); \/\/ resolve all back-referenced types\n+\t\tif (initialize) {\n+\t\t\tregisterJdkTypes();\n+\t\t\tthis.metadata.resolveTypes(); \/\/ resolve all back-referenced types\n+\t\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/TypesImpl.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+package org.openjdk.jmc.flightrecorder.writer.api;\n+\n+\/**\n+ * A settings data-class for a {@linkplain Recording} instance\n+ *\/\n+public final class RecordingSettings {\n+\tprivate final long startTimestamp;\n+\tprivate final boolean initializeJDKTypes;\n+\n+\t\/**\n+\t * @param startTimestamp\n+\t *            the recording start timestamp in epoch nanoseconds (nanoseconds since 1970-01-01)\n+\t * @param initializeJDKTypes\n+\t *            should the {@linkplain org.openjdk.jmc.flightrecorder.writer.api.Types.JDK} types\n+\t *            be initialized\n+\t *\/\n+\tpublic RecordingSettings(long startTimestamp, boolean initializeJDKTypes) {\n+\t\tthis.startTimestamp = startTimestamp;\n+\t\tthis.initializeJDKTypes = initializeJDKTypes;\n+\t}\n+\n+\t\/**\n+\t * Recording will use current time as its start timestamp\n+\t * \n+\t * @param initializeJDKTypes\n+\t *            should the {@linkplain org.openjdk.jmc.flightrecorder.writer.api.Types.JDK} types\n+\t *            be initialized\n+\t *\/\n+\tpublic RecordingSettings(boolean initializeJDKTypes) {\n+\t\tthis(-1, initializeJDKTypes);\n+\t}\n+\n+\t\/**\n+\t * Recording will initialize {@linkplain org.openjdk.jmc.flightrecorder.writer.api.Types.JDK}\n+\t * types.\n+\t * \n+\t * @param startTimestamp\n+\t *            the recording start timestamp in epoch nanoseconds (nanoseconds since 1970-01-01)\n+\t *\/\n+\tpublic RecordingSettings(long startTimestamp) {\n+\t\tthis(startTimestamp, true);\n+\t}\n+\n+\t\/**\n+\t * Recording will use current time as its start timestamp and will initialize\n+\t * {@linkplain org.openjdk.jmc.flightrecorder.writer.api.Types.JDK} types.\n+\t *\/\n+\tpublic RecordingSettings() {\n+\t\tthis(-1, true);\n+\t}\n+\n+\t\/**\n+\t * @return recording timestamp in epoch nanoseconds (nanoseconds since 1970-01-01)\n+\t *\/\n+\tpublic long getStartTimestamp() {\n+\t\treturn startTimestamp;\n+\t}\n+\n+\t\/**\n+\t * @return {@literal true} if {@linkplain org.openjdk.jmc.flightrecorder.writer.api.Types.JDK}\n+\t *         types are to be initialized\n+\t *\/\n+\tpublic boolean shouldInitializeJDKTypes() {\n+\t\treturn initializeJDKTypes;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/api\/RecordingSettings.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+package org.openjdk.jmc.flightrecorder.writer.api;\n+\n+\/**\n+ * A builder type for {@linkplain RecordingSettings}\n+ *\/\n+public interface RecordingSettingsBuilder {\n+\t\/**\n+\t * Set the recording timestamp in epoch nanoseconds (nanoseconds since 1970-01-01).\n+\t * \n+\t * @param timestamp\n+\t *            the timestamp in epoch nanoseconds (nanoseconds since 1970-01-01)\n+\t * @return this instance for chaining\n+\t *\/\n+\tRecordingSettingsBuilder withTimestamp(long timestamp);\n+\n+\t\/**\n+\t * The recording will automatically initialize\n+\t * {@linkplain org.openjdk.jmc.flightrecorder.writer.api.Types.JDK} types.\n+\t * \n+\t * @return this instance for chaining\n+\t *\/\n+\tRecordingSettingsBuilder withJdkTypeInitialization();\n+\n+\t\/**\n+\t * Build the settings instance.\n+\t * \n+\t * @return the settings instance\n+\t *\/\n+\tRecordingSettings build();\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/api\/RecordingSettingsBuilder.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.flightrecorder.writer.RecordingSettingsBuilderImpl;\n@@ -45,0 +46,1 @@\n+import java.util.function.Consumer;\n@@ -50,0 +52,10 @@\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given file. The recording\n+\t * start timestamp is set to the current time and the recording will automatically initialize\n+\t * JDK types.\n+\t * \n+\t * @param path\n+\t *            the path to the recording file\n+\t * @return a new {@linkplain Recording} instance\n+\t * @throws IOException\n+\t *\/\n@@ -54,0 +66,25 @@\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given file.\n+\t * \n+\t * @param path\n+\t *            the path to the recording file\n+\t * @param settingsCallback\n+\t *            settings callback\n+\t * @return a new {@linkplain Recording} instance\n+\t * @throws IOException\n+\t *\/\n+\tpublic static Recording newRecording(String path, Consumer<RecordingSettingsBuilder> settingsCallback)\n+\t\t\tthrows IOException {\n+\t\treturn newRecording(Paths.get(path), settingsCallback);\n+\t}\n+\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given path. The recording\n+\t * start timestamp is set to the current time and the recording will automatically initialize\n+\t * JDK types.\n+\t * \n+\t * @param path\n+\t *            the path to the recording file\n+\t * @return a new {@linkplain Recording} instance\n+\t * @throws IOException\n+\t *\/\n@@ -58,0 +95,25 @@\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given path.\n+\t * \n+\t * @param path\n+\t *            the path to the recording file\n+\t * @param settingsCallback\n+\t *            settings callback\n+\t * @return a new {@linkplain Recording} instance\n+\t * @throws IOException\n+\t *\/\n+\tpublic static Recording newRecording(Path path, Consumer<RecordingSettingsBuilder> settingsCallback)\n+\t\t\tthrows IOException {\n+\t\treturn newRecording(path.toFile(), settingsCallback);\n+\t}\n+\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given file. The recording\n+\t * start timestamp is set to the current time and the recording will automatically initialize\n+\t * JDK types.\n+\t * \n+\t * @param path\n+\t *            the path to the recording file\n+\t * @return a new {@linkplain Recording} instance\n+\t * @throws IOException\n+\t *\/\n@@ -59,1 +121,1 @@\n-\t\treturn new RecordingImpl(new FileOutputStream(path));\n+\t\treturn newRecording(new FileOutputStream(path));\n@@ -62,0 +124,24 @@\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given file.\n+\t * \n+\t * @param path\n+\t *            the path to the recording file\n+\t * @param settingsCallback\n+\t *            settings callback\n+\t * @return a new {@linkplain Recording} instance\n+\t * @throws IOException\n+\t *\/\n+\tpublic static Recording newRecording(File path, Consumer<RecordingSettingsBuilder> settingsCallback)\n+\t\t\tthrows IOException {\n+\t\treturn newRecording(new FileOutputStream(path), settingsCallback);\n+\t}\n+\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given stream. The recording\n+\t * start timestamp is set to the current time and the recording will automatically initialize\n+\t * JDK types.\n+\t * \n+\t * @param recordingStream\n+\t *            recording output stream\n+\t * @return a new {@linkplain Recording} instance\n+\t *\/\n@@ -63,1 +149,19 @@\n-\t\treturn new RecordingImpl(new BufferedOutputStream(recordingStream));\n+\t\treturn newRecording(recordingStream, RecordingSettingsBuilder::withJdkTypeInitialization);\n+\t}\n+\n+\t\/**\n+\t * Create a new recording that will be automatically stored in the given stream.\n+\t * \n+\t * @param recordingStream\n+\t *            recording output stream\n+\t * @param settingsCallback\n+\t *            settings callback\n+\t * @return a new {@linkplain Recording} instance\n+\t *\/\n+\tpublic static Recording newRecording(\n+\t\tOutputStream recordingStream, Consumer<RecordingSettingsBuilder> settingsCallback) {\n+\t\tRecordingSettingsBuilderImpl builder = new RecordingSettingsBuilderImpl();\n+\t\tif (settingsCallback != null) {\n+\t\t\tsettingsCallback.accept(builder);\n+\t\t}\n+\t\treturn new RecordingImpl(new BufferedOutputStream(recordingStream), builder.build());\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/api\/Recordings.java","additions":106,"deletions":2,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.RecordingSettings;\n@@ -59,1 +60,1 @@\n-\t\trecording = new RecordingImpl(bos);\n+\t\trecording = new RecordingImpl(bos, new RecordingSettings());\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/RecordingImplTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}