{"files":[{"patch":"@@ -2,1 +2,1 @@\n-<!--\n+<!--   \n@@ -4,1 +4,1 @@\n-\n+   \n@@ -6,2 +6,2 @@\n-\n-   The contents of this file are subject to the terms of either the Universal Permissive License\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n@@ -9,1 +9,1 @@\n-\n+   \n@@ -11,1 +11,1 @@\n-\n+   \n@@ -14,1 +14,1 @@\n-\n+   \n@@ -17,1 +17,1 @@\n-\n+   \n@@ -21,1 +21,1 @@\n-\n+   \n@@ -24,1 +24,1 @@\n-\n+   \n","filename":"application\/org.openjdk.jmc.feature.core\/feature.xml","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -11,0 +11,1 @@\n+ org.openjdk.jmc.common,\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/META-INF\/MANIFEST.MF","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+import java.util.HashMap;\n@@ -10,0 +11,1 @@\n+import java.util.function.Function;\n@@ -21,0 +23,2 @@\n+import org.openjdk.jmc.flightrecorder.serializers.dot.DotSerializer;\n+import org.openjdk.jmc.flightrecorder.serializers.json.FlameGraphJsonSerializer;\n@@ -22,0 +26,4 @@\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;\n+import org.openjdk.jmc.flightrecorder.stacktrace.graph.StacktraceGraphModel;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n@@ -31,1 +39,3 @@\n-\tprivate List<WebSocketConnectionHandler> handlers = new ArrayList<>();\n+\tprivate List<WebsocketConnectionHandler> handlers = new ArrayList<>();\n+\tprivate List<WebsocketConnectionHandler> treeHandlers = new ArrayList<>();\n+\tprivate List<WebsocketConnectionHandler> graphHandlers = new ArrayList<>();\n@@ -61,3 +71,2 @@\n-\t\t\t\tString eventsJson = currentSelection != null\n-\t\t\t\t\t\t? IItemCollectionJsonSerializer.toJsonString(currentSelection) : null;\n-\t\t\t\tWebSocketConnectionHandler handler = new WebSocketConnectionHandler(eventsJson);\n+\t\t\t\tString eventsJson = WebsocketServer.toEventsJsonString(currentSelection);\n+\t\t\t\tWebsocketConnectionHandler handler = new WebsocketConnectionHandler(eventsJson);\n@@ -67,0 +76,12 @@\n+\t\t\tcontainer.addMapping(\"\/tree\/*\", (req, resp) -> {\n+\t\t\t\tString treeJson = WebsocketServer.toTreeModelJsonString(currentSelection);\n+\t\t\t\tWebsocketConnectionHandler handler = new WebsocketConnectionHandler(treeJson);\n+\t\t\t\ttreeHandlers.add(handler);\n+\t\t\t\treturn handler;\n+\t\t\t});\n+\t\t\tcontainer.addMapping(\"\/graph\/*\", (req, resp) -> {\n+\t\t\t\tString dot = WebsocketServer.toGraphModelDotString(currentSelection);\n+\t\t\t\tWebsocketConnectionHandler handler = new WebsocketConnectionHandler(dot);\n+\t\t\t\tgraphHandlers.add(handler);\n+\t\t\t\treturn handler;\n+\t\t\t});\n@@ -82,0 +103,44 @@\n+\t\tnotifyAllEventHandlers(events);\n+\t\tnotifyAllGraphHandlers(events);\n+\t\tnotifyAllTreeHandlers(events);\n+\t}\n+\n+\tprivate void notifyAllEventHandlers(IItemCollection events) {\n+\t\thandlers = notifyAllHandlers(events, handlers, WebsocketServer::toEventsJsonString);\n+\t}\n+\n+\tprivate void notifyAllGraphHandlers(IItemCollection events) {\n+\t\tgraphHandlers = notifyAllHandlers(events, graphHandlers, WebsocketServer::toGraphModelDotString);\n+\t}\n+\n+\tprivate void notifyAllTreeHandlers(IItemCollection events) {\n+\t\ttreeHandlers = notifyAllHandlers(events, treeHandlers, WebsocketServer::toTreeModelJsonString);\n+\t}\n+\n+\tprivate static String toEventsJsonString(IItemCollection items) {\n+\t\tif (items == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn IItemCollectionJsonSerializer.toJsonString(items);\n+\t}\n+\n+\tprivate static String toGraphModelDotString(IItemCollection items) {\n+\t\tif (items == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tFrameSeparator frameSeparator = new FrameSeparator(FrameCategorization.METHOD, false);\n+\t\tStacktraceGraphModel model = new StacktraceGraphModel(frameSeparator, items, null);\n+\t\treturn DotSerializer.toDot(model, 10_000, new HashMap<>());\n+\t}\n+\n+\tprivate static String toTreeModelJsonString(IItemCollection items) {\n+\t\tif (items == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(items);\n+\t\treturn FlameGraphJsonSerializer.toJson(model);\n+\t}\n+\n+\tprivate List<WebsocketConnectionHandler> notifyAllHandlers(\n+\t\tIItemCollection events, List<WebsocketConnectionHandler> handlers,\n+\t\tFunction<IItemCollection, String> jsonSerializer) {\n@@ -83,1 +148,1 @@\n-\t\tif (handlers.size() == 0) {\n+\t\tif (handlers.size() == 0 || events == null) {\n@@ -85,1 +150,1 @@\n-\t\t\treturn;\n+\t\t\treturn handlers;\n@@ -87,3 +152,3 @@\n-\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(events);\n-\n-\t\thandlers.forEach(handler -> handler.sendMessage(eventsJson));\n+\t\tString json = jsonSerializer.apply(events);\n+\t\thandlers.forEach(handler -> handler.sendMessage(json));\n+\t\treturn handlers;\n@@ -97,0 +162,1 @@\n+\t\t\t\/\/ TODO: see if we need to cleanup executor service and thread\n@@ -102,1 +168,1 @@\n-\tprivate static class WebSocketConnectionHandler extends WebSocketAdapter {\n+\tprivate static class WebsocketConnectionHandler extends WebSocketAdapter {\n@@ -105,1 +171,1 @@\n-\t\tWebSocketConnectionHandler(String firstMessage) {\n+\t\tWebsocketConnectionHandler(String firstMessage) {\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/websocket\/WebsocketServer.java","additions":77,"deletions":11,"binary":false,"changes":88,"status":"modified"}]}