{"files":[{"patch":"@@ -528,0 +528,1 @@\n+\tpublic static String ThreadsPage_SCROLLED_COMPOSITE_NAME;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+\tprivate static final String SCROLLED_COMPOSITE_NAME = Messages.ThreadsPage_SCROLLED_COMPOSITE_NAME; \/\/$NON-NLS-1$\n@@ -205,0 +206,1 @@\n+\t\tscChartContainer.setData(\"name\", SCROLLED_COMPOSITE_NAME); \/\/$NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ThreadsPageLayoutUI.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -508,0 +508,1 @@\n+ThreadsPage_SCROLLED_COMPOSITE_NAME=threadspagelayoutui.scrolledcomposite.name\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import org.junit.Assume;\n@@ -58,0 +59,1 @@\n+import org.openjdk.jmc.test.jemmy.misc.wrappers.MCScrolledComposite;\n@@ -76,0 +78,1 @@\n+\tprivate static final String SCROLLED_COMPOSITE_NAME = org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages.ThreadsPage_SCROLLED_COMPOSITE_NAME;\n@@ -82,0 +85,1 @@\n+\tprivate static MCScrolledComposite scrolledComposite;\n@@ -87,0 +91,1 @@\n+\tprivate boolean scHorizontalBarVisible;\n@@ -88,0 +93,2 @@\n+\tprivate final int numLanesSelection = 5;\n+\tprivate final int minLaneHeight = 25;\n@@ -96,0 +103,2 @@\n+\t\t\tscrolledComposite = MCScrolledComposite.getByName(SCROLLED_COMPOSITE_NAME);\n+\t\t\tscHorizontalBarVisible = scrolledComposite.isHorizontalBarVisible();\n@@ -110,0 +119,1 @@\n+\t\t\tscHorizontalBarVisible = false;\n@@ -115,0 +125,12 @@\n+\t\/**\n+\t * Some tests require interaction with the chart canvas, and may not work if widgets are\n+\t * obstructed. If the scrolled composite has a horizontal scrollbar, some widgets may not be\n+\t * visible. If the chart canvas is too short, then the tests might not be able to interact with\n+\t * the required lanes.\n+\t *\n+\t * @return true if all the controls required are visible\n+\t *\/\n+\tprivate boolean isControlsVisible() {\n+\t\treturn !scHorizontalBarVisible && (chartCanvas.getHeight() >= numLanesSelection * minLaneHeight);\n+\t}\n+\n@@ -117,0 +139,2 @@\n+\t\tAssume.assumeTrue(isControlsVisible());\n+\n@@ -140,0 +164,2 @@\n+\t\tAssume.assumeTrue(isControlsVisible());\n+\n@@ -164,0 +190,2 @@\n+\t\tAssume.assumeTrue(isControlsVisible());\n+\n@@ -187,0 +215,2 @@\n+\t\tAssume.assumeTrue(isControlsVisible());\n+\n@@ -216,0 +246,2 @@\n+\t\tAssume.assumeTrue(isControlsVisible());\n+\n@@ -237,1 +269,1 @@\n-\t\tfinal int numSelection = 7;\n+\t\tAssume.assumeTrue(isControlsVisible());\n@@ -241,1 +273,1 @@\n-\t\tAssert.assertTrue(numThreads > 0 && numThreads >= numSelection);\n+\t\tAssert.assertTrue(numThreads > 0 && numThreads >= numLanesSelection);\n@@ -246,1 +278,1 @@\n-\t\tthreadsTable.selectItems(0, numSelection - 1);\n+\t\tthreadsTable.selectItems(0, numLanesSelection - 1);\n@@ -249,1 +281,1 @@\n-\t\tfor (int i = 0; i < numSelection; i++) {\n+\t\tfor (int i = 0; i < numLanesSelection; i++) {\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/uitest\/JfrThreadsPageTest.java","additions":36,"deletions":4,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -150,0 +150,16 @@\n+\t\/**\n+\t * Fetches the height of the Chart Canvas\n+\t *\n+\t * @return the height of the Chart Canvas\n+\t *\/\n+\tpublic int getHeight() {\n+\t\tFetcher<Integer> fetcher = new Fetcher<Integer>() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tsetOutput(control.getControl().getParent().getSize().y);\n+\t\t\t}\n+\t\t};\n+\t\tDisplay.getDefault().syncExec(fetcher);\n+\t\treturn fetcher.getOutput();\n+\t}\n+\n","filename":"application\/uitests\/org.openjdk.jmc.test.jemmy\/src\/test\/java\/org\/openjdk\/jmc\/test\/jemmy\/misc\/wrappers\/MCChartCanvas.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.test.jemmy.misc.wrappers;\n+\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.swt.widgets.Shell;\n+import org.jemmy.control.Wrap;\n+import org.jemmy.interfaces.Parent;\n+import org.jemmy.resources.StringComparePolicy;\n+import org.jemmy.swt.lookup.ByName;\n+import org.openjdk.jmc.test.jemmy.misc.base.wrappers.MCJemmyBase;\n+import org.openjdk.jmc.test.jemmy.misc.fetchers.Fetcher;\n+\n+public class MCScrolledComposite extends MCJemmyBase {\n+\tprivate static final StringComparePolicy EXACT_POLICY = StringComparePolicy.EXACT;\n+\n+\tprivate MCScrolledComposite(Wrap<? extends ScrolledComposite> sc) {\n+\t\tthis.control = sc;\n+\t}\n+\n+\t\/**\n+\t * Finds and returns a {@link MCScrolledComposite}\n+\t * \n+\t * @param shell\n+\t *            the shell from where to start searching for this widget\n+\t * @param name\n+\t *            the name of the widget (matched by using the default matching policy,\n+\t *            {@link StringComparePolicy.EXACT})\n+\t * @return a {@link MCScrolledComposite} that matches the name\n+\t *\/\n+\tpublic static MCScrolledComposite getByName(String name) {\n+\t\treturn getByName(getShell(), name, EXACT_POLICY);\n+\n+\t}\n+\n+\t\/**\n+\t * Finds and returns a {@link MCScrolledComposite}\n+\t * \n+\t * @param shell\n+\t *            the shell from where to start searching for this widget\n+\t * @param name\n+\t *            the name of the widget\n+\t * @param policy\n+\t *            A {@link StringComparePolicy} for matching the name\n+\t * @return a {@link MCScrolledComposite} that matches the name\n+\t *\/\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static MCScrolledComposite getByName(Wrap<? extends Shell> shell, String name, StringComparePolicy policy) {\n+\t\treturn new MCScrolledComposite(shell.as(Parent.class, ScrolledComposite.class)\n+\t\t\t\t.lookup(ScrolledComposite.class, new ByName<>(name, policy)).wrap());\n+\t}\n+\n+\t\/**\n+\t * Returns the visibility of the horizontal scrollbar\n+\t * \n+\t * @return true if the horizontal scrollbar is visible\n+\t *\/\n+\tpublic boolean isHorizontalBarVisible() {\n+\t\tfinal ScrolledComposite sc = (ScrolledComposite) control.getControl();\n+\t\tFetcher<Boolean> fetcher = new Fetcher<Boolean>() {\n+\t\t\t@Override\n+\t\t\tpublic void run() {\n+\t\t\t\tsetOutput(sc.getHorizontalBar().isVisible());\n+\t\t\t}\n+\t\t};\n+\t\tDisplay.getDefault().syncExec(fetcher);\n+\t\treturn fetcher.getOutput();\n+\t}\n+}\n","filename":"application\/uitests\/org.openjdk.jmc.test.jemmy\/src\/test\/java\/org\/openjdk\/jmc\/test\/jemmy\/misc\/wrappers\/MCScrolledComposite.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}