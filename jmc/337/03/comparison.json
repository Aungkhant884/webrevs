{"files":[{"patch":"@@ -47,0 +47,1 @@\n+application\/org.openjdk.jmc.flightrecorder.heatmap\/src\/main\/resources\/jslibs\/\n","filename":".gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -201,0 +201,7 @@\n+\n+   <plugin\n+         id=\"org.openjdk.jmc.flightrecorder.heatmap\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n","filename":"application\/org.openjdk.jmc.feature.flightrecorder\/feature.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/.classpath","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/.classpath","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/.gitignore","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/.gitignore","status":"copied"},{"patch":"@@ -0,0 +1,25 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: Heatmap\n+Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.heatmap;singleton:=true\n+Bundle-Version: 8.2.0.qualifier\n+Require-Bundle: org.openjdk.jmc.flightrecorder,\n+ org.openjdk.jmc.flightrecorder.ui,\n+ org.openjdk.jmc.flightrecorder.serializers,\n+ org.junit,\n+ org.junit.jupiter.api,\n+ org.junit.jupiter.engine,\n+ org.junit.jupiter.migrationsupport,\n+ org.junit.jupiter.params,\n+ org.junit.platform.commons,\n+ org.junit.platform.engine,\n+ org.junit.platform.launcher,\n+ org.junit.platform.runner,\n+ org.junit.platform.suite.api,\n+ org.junit.vintage.engine,\n+ org.hamcrest.core,\n+ org.opentest4j,\n+ org.apiguardian\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Automatic-Module-Name: org.openjdk.jmc.flightrecorder.heatmap\n+Bundle-Vendor: Oracle Corporation\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/META-INF\/MANIFEST.MF","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/build.properties","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/build.properties","status":"copied"},{"filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/icons\/heatmap.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/icons\/heatmap@2x.png","binary":true,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2019, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2021, Datadog, Inc. All rights reserved.\n@@ -34,1 +34,1 @@\n-FLAME_VIEW_NAME=Flame View\n+HEATMAP_VIEW=Heatmap View\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/plugin.properties","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/plugin.properties","status":"copied"},{"patch":"@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<?eclipse version=\"3.2\"?>\n+<plugin>\n+\t<extension point=\"org.eclipse.ui.views\">\n+\t\t<view\n+          allowMultiple=\"false\"\n+          category=\"org.openjdk.jmc.ui.main\"\n+          class=\"org.openjdk.jmc.flightrecorder.heatmap.views.HeatmapView\"\n+          icon=\"icons\/heatmap.png\"\n+          id=\"org.openjdk.jmc.flightrecorder.heatmap\"\n+          name=\"Heatmap View\"\n+          restorable=\"true\">\n+\t\t<\/view>\n+\t<\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/plugin.xml","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.flightrecorder.heatmap<\/artifactId>\n+\t<packaging>eclipse-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<download.maven.plugin.version>1.4.2<\/download.maven.plugin.version>\n+\t\t<download-maven-plugin.phase>process-resources<\/download-maven-plugin.phase>\n+\t\t<download-maven-plugin.output>${project.basedir}\/src\/main\/resources\/jslibs<\/download-maven-plugin.output>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<spotless.config.path.js>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formattingjs.xml<\/spotless.config.path.js>\n+\t<\/properties>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>com.googlecode.maven-download-plugin<\/groupId>\n+\t\t\t\t<artifactId>download-maven-plugin<\/artifactId>\n+\t\t\t\t<version>${download.maven.plugin.version}<\/version>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>d3-v6-js<\/id>\n+\t\t\t\t\t\t<phase>${download-maven-plugin.phase}<\/phase>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>wget<\/goal>\n+\t\t\t\t\t\t<\/goals>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<url>https:\/\/d3js.org\/d3.v6.min.js<\/url>\n+\t\t\t\t\t\t\t<unpack>false<\/unpack>\n+\t\t\t\t\t\t\t<outputDirectory>${download-maven-plugin.output}<\/outputDirectory>\n+\t\t\t\t\t\t\t<skipCache>true<\/skipCache>\n+\t\t\t\t\t\t\t<overwrite>true<\/overwrite>\n+\t\t\t\t\t\t<\/configuration>\n+\t\t\t\t\t<\/execution>\n+\t\t\t\t<\/executions>\n+\t\t\t<\/plugin>\n+\t\t<\/plugins>\n+\t<\/build>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/pom.xml","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,255 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.heatmap.views;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.text.MessageFormat;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.browser.Browser;\n+import org.eclipse.swt.browser.ProgressAdapter;\n+import org.eclipse.swt.browser.ProgressEvent;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.events.MenuDetectEvent;\n+import org.eclipse.swt.events.MenuDetectListener;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.ui.IMemento;\n+import org.eclipse.ui.ISelectionListener;\n+import org.eclipse.ui.IViewSite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.part.ViewPart;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.util.StringToolkit;\n+import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.ui.common.util.AdapterUtil;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+\n+public class HeatmapView extends ViewPart implements ISelectionListener {\n+\tprivate static final String HTML_PAGE;\n+\tstatic {\n+\t\tString jsD3V6 = \"jslibs\/d3.v6.min.js\";\n+\t\tHTML_PAGE = String.format(loadStringFromFile(\"page.template\"), loadLibraries(jsD3V6),\n+\t\t\t\tloadStringFromFile(\"heatmap.js\"));\n+\t}\n+\n+\tprivate enum ModelState {\n+\t\tNOT_STARTED, STARTED, FINISHED, NONE;\n+\t}\n+\n+\tprivate static class ModelRebuildRunnable implements Runnable {\n+\t\tprivate final HeatmapView view;\n+\t\tprivate IItemCollection items;\n+\t\tprivate volatile boolean isInvalid;\n+\n+\t\tprivate ModelRebuildRunnable(HeatmapView view, IItemCollection items) {\n+\t\t\tthis.view = view;\n+\t\t\tthis.items = items;\n+\t\t}\n+\n+\t\tprivate void setInvalid() {\n+\t\t\tthis.isInvalid = true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tview.modelState = ModelState.STARTED;\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items);\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t} else {\n+\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static final int MODEL_EXECUTOR_THREADS_NUMBER = 3;\n+\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(MODEL_EXECUTOR_THREADS_NUMBER,\n+\t\t\tnew ThreadFactory() {\n+\t\t\t\tprivate ThreadGroup group = new ThreadGroup(\"HeatmapCalculationGroup\");\n+\t\t\t\tprivate AtomicInteger counter = new AtomicInteger();\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Thread newThread(Runnable r) {\n+\t\t\t\t\tThread t = new Thread(group, r, \"HeatmapCalculation-\" + counter.getAndIncrement());\n+\t\t\t\t\tt.setDaemon(true);\n+\t\t\t\t\treturn t;\n+\t\t\t\t}\n+\t\t\t});\n+\tprivate Browser browser;\n+\tprivate SashForm container;\n+\tprivate IItemCollection currentItems;\n+\tprivate volatile ModelState modelState = ModelState.NONE;\n+\tprivate ModelRebuildRunnable modelRebuildRunnable;\n+\n+\t@Override\n+\tpublic void init(IViewSite site, IMemento memento) throws PartInitException {\n+\t\tsuper.init(site, memento);\n+\t\tgetSite().getPage().addSelectionListener(this);\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\tgetSite().getPage().removeSelectionListener(this);\n+\t\tsuper.dispose();\n+\t}\n+\n+\t@Override\n+\tpublic void createPartControl(Composite parent) {\n+\t\tcontainer = new SashForm(parent, SWT.HORIZONTAL);\n+\t\tbrowser = new Browser(container, SWT.NONE);\n+\t\tcontainer.setMaximizedControl(browser);\n+\t\tbrowser.addMenuDetectListener(new MenuDetectListener() {\n+\t\t\t@Override\n+\t\t\tpublic void menuDetected(MenuDetectEvent e) {\n+\t\t\t\te.doit = false;\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void setFocus() {\n+\t\tbrowser.setFocus();\n+\t}\n+\n+\t@Override\n+\tpublic void saveState(IMemento memento) {\n+\t}\n+\n+\t@Override\n+\tpublic void selectionChanged(IWorkbenchPart part, ISelection selection) {\n+\t\tif (selection instanceof IStructuredSelection) {\n+\t\t\tObject first = ((IStructuredSelection) selection).getFirstElement();\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\ttriggerRebuildTask(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\ttriggerRebuildTask(items);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void triggerRebuildTask(IItemCollection items) {\n+\t\t\/\/ Release old model calculation before building a new\n+\t\tif (modelRebuildRunnable != null) {\n+\t\t\tmodelRebuildRunnable.setInvalid();\n+\t\t}\n+\n+\t\tcurrentItems = items;\n+\t\tmodelState = ModelState.NOT_STARTED;\n+\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, items);\n+\t\tif (!modelRebuildRunnable.isInvalid) {\n+\t\t\tMODEL_EXECUTOR.execute(modelRebuildRunnable);\n+\t\t}\n+\t}\n+\n+\tprivate void setModel(final IItemCollection items, final String eventsJson) {\n+\t\tif (ModelState.FINISHED.equals(modelState) && items.equals(currentItems) && !browser.isDisposed()) {\n+\t\t\tsetViewerInput(eventsJson);\n+\t\t}\n+\t}\n+\n+\tprivate void setViewerInput(String eventsJson) {\n+\t\tbrowser.setText(HTML_PAGE);\n+\n+\t\tbrowser.addProgressListener(new ProgressAdapter() {\n+\t\t\tprivate boolean loaded = false;\n+\n+\t\t\t@Override\n+\t\t\tpublic void changed(ProgressEvent event) {\n+\t\t\t\tif (loaded) {\n+\t\t\t\t\tbrowser.removeProgressListener(this);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void completed(ProgressEvent event) {\n+\t\t\t\tbrowser.removeProgressListener(this);\n+\t\t\t\tbrowser.execute(String.format(\"updateHeatmap(`%s`);\", eventsJson));\n+\t\t\t\tloaded = true;\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprivate static String loadLibraries(String ... libs) {\n+\t\tif (libs == null || libs.length == 0) {\n+\t\t\treturn \"\";\n+\t\t} else {\n+\t\t\tStringBuilder builder = new StringBuilder(2048);\n+\t\t\tfor (String lib : libs) {\n+\t\t\t\tbuilder.append(loadStringFromFile(lib));\n+\t\t\t\tbuilder.append(\"\\n\");\n+\t\t\t}\n+\t\t\treturn builder.toString();\n+\t\t}\n+\t}\n+\n+\tprivate static String loadStringFromFile(String fileName) {\n+\t\ttry {\n+\t\t\treturn StringToolkit.readString(HeatmapView.class.getClassLoader().getResourceAsStream(fileName));\n+\t\t} catch (IOException e) {\n+\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\tMessageFormat.format(\"Could not load script \\\"{0}\\\",\\\"{1}\\\"\", fileName, e.getMessage())); \/\/$NON-NLS-1$\n+\t\t\treturn \"\";\n+\t\t}\n+\t}\n+\n+\tpublic static byte[] readBytes(InputStream in) throws IOException {\n+\t\tBufferedInputStream bis = new BufferedInputStream(in);\n+\t\tByteArrayOutputStream buf = new ByteArrayOutputStream();\n+\t\tint result = bis.read();\n+\t\twhile (result != -1) {\n+\t\t\tbuf.write((byte) result);\n+\t\t\tresult = bis.read();\n+\t\t}\n+\t\treturn buf.toByteArray();\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/heatmap\/views\/HeatmapView.java","additions":255,"deletions":0,"binary":false,"changes":255,"status":"added"},{"patch":"@@ -0,0 +1,272 @@\n+\/*\n+ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+\n+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+ The contents of this file are subject to the terms of either the Universal Permissive License\n+ v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+ or the following license:\n+\n+ Redistribution and use in source and binary forms, with or without modification, are permitted\n+ provided that the following conditions are met:\n+\n+ 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ and the following disclaimer.\n+\n+ 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ the distribution.\n+\n+ 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ endorse or promote products derived from this software without specific prior written permission.\n+\n+ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+class Logger {\n+\tconstructor() {\n+\t\tthis.domElement = document.createElement(\"pre\");\n+\t\twindow.document.body.appendChild(this.domElement);\n+\t}\n+\n+\tlog(msg) {\n+\t\tthis.domElement.innerHTML += msg + \"\\n\";\n+\t}\n+\n+\tclear() {\n+\t\tthis.domElement.innerHTML = \"\";\n+\t}\n+}\n+const chart = {\n+\tdata: [],\n+};\n+\n+window.logger = new Logger();\n+\n+try {\n+\tfunction updateHeatmap(jsonStr) {\n+\t\tconst rawData = JSON.parse(jsonStr);\n+\t\tconst eventTimes = getEventTimes(rawData);\n+\t\tconst binnedData = getBinnedData(eventTimes);\n+\t\tchart.data = binnedData;\n+\t\trenderHeatmap(chart.data);\n+\t}\n+\n+\tfunction resizeSVG() {\n+\t\trenderHeatmap(chart.data);\n+\t}\n+\td3.select(window).on(\"resize\", resizeSVG);\n+\n+\tfunction range(from, to) {\n+\t\tconst result = [];\n+\t\tfor (let i = from; i < to; i++) {\n+\t\t\tresult.push(i);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tfunction getEventTimes(rawData) {\n+\t\treturn rawData.events\n+\t\t\t.filter((event) => event.attributes)\n+\t\t\t.map(\n+\t\t\t\t(event) =>\n+\t\t\t\t\tevent.attributes.startTime ||\n+\t\t\t\t\tevent.attributes.endTime ||\n+\t\t\t\t\tevent.attributes[\"(endTime)\"]\n+\t\t\t)\n+\t\t\t.map((time) => new Date(time \/ 10e5));\n+\t}\n+\n+\tfunction getBinnedData(eventTimes) {\n+\t\tconst scale = d3.scaleTime().domain(d3.extent(eventTimes)).nice(); \/\/ ♥️♥️♥️\n+\t\tconst timeRangeMs = scale.domain()[1] - scale.domain()[0];\n+\t\tconst binFn = d3\n+\t\t\t.bin()\n+\t\t\t.domain(scale.domain())\n+\t\t\t.thresholds(timeRangeMs \/ 100);\n+\t\treturn binFn(eventTimes);\n+\t}\n+\n+\tfunction getChartConfig(binnedData) {\n+\t\t\/\/ numCells and maxEvents depend on the data\n+\t\tconst numCells = binnedData.length;\n+\n+\t\t\/\/ margins are fixed\n+\t\tconst marginLeft = 50;\n+\t\tconst marginRight = 20;\n+\t\tconst marginTop = 20;\n+\t\tconst marginBottom = 100;\n+\n+\t\t\/\/ width and height are fixed from the window\n+\t\tconst width = window.innerWidth - (marginLeft + marginRight);\n+\t\tconst height = window.innerHeight - (marginTop + marginBottom);\n+\n+\t\t\/\/ cellSize is derived from width, height and numCells\n+\t\t\/\/ anything below 4px is invisible\n+\t\tconst cellSize = Math.max(\n+\t\t\t4,\n+\t\t\tMath.floor(Math.sqrt((width * height) \/ numCells))\n+\t\t);\n+\t\tconst numCols = Math.floor(width \/ cellSize);\n+\t\tconst numRows = Math.ceil(numCells \/ numCols);\n+\n+\t\treturn {\n+\t\t\tnumCols,\n+\t\t\tnumRows,\n+\t\t\tcellSize,\n+\t\t\tmarginLeft,\n+\t\t\tmarginTop,\n+\t\t\twidth,\n+\t\t\theight,\n+\t\t};\n+\t}\n+\n+\tfunction getColorScale(binnedData) {\n+\t\tconst maxEvents = d3.max(binnedData, (d) => d.length);\n+\t\treturn d3.scaleSequentialSqrt(d3.interpolateOrRd).domain([0, maxEvents]);\n+\t}\n+\n+\tfunction renderHeatmap(binnedData) {\n+\t\tif (!binnedData || binnedData.length < 2) {\n+\t\t\td3.select(\"#heatmap\").append(\"p\").text(\"No data in current selection.\");\n+\t\t\treturn;\n+\t\t}\n+\t\tconst chartConfig = getChartConfig(binnedData);\n+\t\tconst {\n+\t\t\tnumCols,\n+\t\t\tnumRows,\n+\t\t\tcellSize,\n+\t\t\tmarginLeft,\n+\t\t\tmarginTop,\n+\t\t\twidth,\n+\t\t\theight,\n+\t\t} = chartConfig;\n+\t\tconst colorScale = getColorScale(binnedData);\n+\t\tconst xDomain = range(0, numCols).map((val) => (val * 100) \/ 1000);\n+\t\tconst yDomain = [\n+\t\t\td3.min(binnedData, (d) => d.x0),\n+\t\t\td3.max(binnedData, (d) => d.x1),\n+\t\t].map((val) => new Date(val));\n+\n+\t\tconst xScale = d3\n+\t\t\t.scaleBand()\n+\t\t\t.domain(xDomain)\n+\t\t\t.range([marginLeft, numCols * cellSize + marginLeft]);\n+\t\tconst yScale = d3\n+\t\t\t.scaleLinear()\n+\t\t\t.domain(yDomain)\n+\t\t\t.range([marginTop, marginTop + numRows * cellSize]);\n+\n+\t\tconst xTickFilter = (x, idx) => {\n+\t\t\tif (cellSize > 15) {\n+\t\t\t\treturn true;\n+\t\t\t} else if (cellSize > 5) {\n+\t\t\t\treturn idx % 5 === 0;\n+\t\t\t} else {\n+\t\t\t\treturn idx % 10 === 0;\n+\t\t\t}\n+\t\t};\n+\t\tconst xAxis = (g) =>\n+\t\t\tg\n+\t\t\t\t.call(\n+\t\t\t\t\td3\n+\t\t\t\t\t\t.axisBottom(xScale)\n+\t\t\t\t\t\t.tickValues(xDomain.filter(xTickFilter))\n+\t\t\t\t\t\t.tickFormat((d) => `${d3.format(\".1f\")(d)} s`)\n+\t\t\t\t)\n+\t\t\t\t.selectAll(\"text\")\n+\t\t\t\t.attr(\"y\", 0)\n+\t\t\t\t.attr(\"x\", -9)\n+\t\t\t\t.attr(\"dy\", \".35em\")\n+\t\t\t\t.attr(\"transform\", \"rotate(270)\")\n+\t\t\t\t.style(\"text-anchor\", \"end\")\n+\t\t\t\t.style(\"fill\", \"#777\");\n+\n+\t\tconst yAxis = (g) =>\n+\t\t\tg\n+\t\t\t\t.call(\n+\t\t\t\t\td3\n+\t\t\t\t\t\t.axisLeft(yScale)\n+\t\t\t\t\t\t.tickSize(3)\n+\t\t\t\t\t\t.tickPadding(4)\n+\t\t\t\t\t\t.tickFormat(d3.timeFormat(\"%H:%M:%S\"))\n+\t\t\t\t)\n+\t\t\t\t.selectAll(\"text\")\n+\t\t\t\t.style(\"fill\", \"#777\");\n+\n+\t\tconst makeCells = (g) =>\n+\t\t\tg\n+\t\t\t\t.selectAll(\"rect\")\n+\t\t\t\t.data(binnedData)\n+\t\t\t\t.enter()\n+\t\t\t\t.append(\"rect\")\n+\t\t\t\t\/\/ we could potentially emphasize 0 by setting the cell color to white:\n+\t\t\t\t\/\/ .attr(\"fill\", (d) => d.length ? colorScale(d.length) : \"white\")\n+\t\t\t\t.attr(\"fill\", (d) => colorScale(d.length))\n+\t\t\t\t.attr(\"stroke\", \"white\")\n+\t\t\t\t.attr(\"x\", (d, i) => {\n+\t\t\t\t\treturn (i % numCols) * cellSize;\n+\t\t\t\t})\n+\t\t\t\t.attr(\"y\", (d, i) => {\n+\t\t\t\t\treturn Math.floor(i \/ numCols) * cellSize;\n+\t\t\t\t})\n+\t\t\t\t.attr(\"height\", cellSize)\n+\t\t\t\t.attr(\"width\", cellSize)\n+\t\t\t\t.style(\"cursor\", \"pointer\")\n+\t\t\t\t.on(\"mouseover\", function () {\n+\t\t\t\t\tconst target = d3.select(this);\n+\t\t\t\t\ttarget.attr(\"fill\", \"gold\");\n+\t\t\t\t})\n+\t\t\t\t.on(\"mouseout\", function () {\n+\t\t\t\t\tconst target = d3.select(this);\n+\t\t\t\t\ttarget.attr(\"fill\", (d) => colorScale(d.length));\n+\t\t\t\t})\n+\t\t\t\t.append(\"title\")\n+\t\t\t\t.text(\n+\t\t\t\t\t(d) => `${d3.timeFormat(\"%H:%M:%S.%L\")(d.x0)} ${d.length} events`\n+\t\t\t\t);\n+\n+\t\td3.select(\"#heatmap\").selectAll(\"*\").remove();\n+\n+\t\tconst svg = d3\n+\t\t\t.select(\"#heatmap\")\n+\t\t\t.append(\"svg\")\n+\t\t\t.style(\"width\", window.innerWidth + \"px\")\n+\t\t\t.style(\"height\", window.innerHeight + \"px\");\n+\t\tsvg\n+\t\t\t.append(\"g\")\n+\t\t\t.call(makeCells)\n+\t\t\t.attr(\"transform\", (d) => `translate(${marginLeft},${marginTop})`);\n+\n+\t\tsvg\n+\t\t\t.append(\"g\")\n+\t\t\t.call(xAxis)\n+\t\t\t.attr(\"transform\", `translate(0, ${numRows * cellSize + marginTop})`);\n+\n+\t\tconst eventCount = d3.sum(binnedData, (d) => d.length);\n+\t\tconst formatDate = (d) => d.toLocaleString(\"en-GB\", { timeZone: \"UTC\" });\n+\t\tsvg\n+\t\t\t.append(\"g\")\n+\t\t\t.append(\"text\")\n+\t\t\t.text(\n+\t\t\t\t`This is a heatmap of ${eventCount} events recorded\n+\t\t\t\tbetween ${formatDate(yDomain[0])} and ${formatDate(yDomain[1])}.`\n+\t\t\t)\n+\t\t\t.attr(\"transform\", `translate(${width \/ 2},${height + 75})`)\n+\t\t\t.attr(\"fill\", \"#777\")\n+\t\t\t.attr(\"text-anchor\", \"middle\");\n+\n+\t\tsvg.append(\"g\").call(yAxis).attr(\"transform\", `translate(${marginLeft},0)`);\n+\t}\n+} catch (e) {\n+\tlogger.log(e.name + \":\" + e.message);\n+\tlogger.log(e.stack);\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/src\/main\/resources\/heatmap.js","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"},{"patch":"@@ -0,0 +1,16 @@\n+<!DOCTYPE html \"-\/\/W3C\/\/DTD XHTML 1.0 Strict\/\/EN\" \"http:\/\/www.w3.org\/TR\/xhtml1\/DTD\/xhtml1-strict.dtd\">\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">\n+  <head>\n+    <meta http-equiv=\"content-type\" content=\"text\/html; charset=utf-8\" \/>\n+    <script>\n+      %1$s\n+    <\/script>\n+  <\/head>\n+\n+  <body>\n+    <div id=\"heatmap\" width=\"100%%\" style=\"text-align: center\"><\/div>\n+    <script type=\"text\/javascript\">\n+      %2$s\n+    <\/script>\n+  <\/body>\n+<\/html>\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/src\/main\/resources\/page.template","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-<!--   \n+<!--\n@@ -4,1 +4,1 @@\n-   \n+\n@@ -6,2 +6,2 @@\n-   \n-   The contents of this file are subject to the terms of either the Universal Permissive License \n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n@@ -9,1 +9,1 @@\n-   \n+\n@@ -11,1 +11,1 @@\n-   \n+\n@@ -14,1 +14,1 @@\n-   \n+\n@@ -17,1 +17,1 @@\n-   \n+\n@@ -21,1 +21,1 @@\n-   \n+\n@@ -24,1 +24,1 @@\n-   \n+\n@@ -91,0 +91,1 @@\n+\t\t<module>org.openjdk.jmc.flightrecorder.heatmap<\/module>\n","filename":"application\/pom.xml","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"}]}