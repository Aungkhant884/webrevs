{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,2 +94,2 @@\n-\t * @return <tt>true<\/tt> of it is a JRockit, <tt>false<\/tt> if it isn't or if was not possible\n-\t *         to tell.\n+\t * @return <code>true<\/code> of it is a JRockit, <code>false<\/code> if it isn't or if was not\n+\t *         possible to tell.\n@@ -109,2 +109,2 @@\n-\t * @return <tt>true<\/tt> if it is a HotSpot, <tt>false<\/tt> if it isn't or if was not possible\n-\t *         to tell.\n+\t * @return <code>true<\/code> if it is a HotSpot, <code>false<\/code> if it isn't or if was not\n+\t *         possible to tell.\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/version\/JavaVMVersionToolkit.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n@@ -401,1 +403,5 @@\n-\t\t\tthrow new InvalidJfrFileException(\"Event type with id \" + typeId + \" was not declared\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t\/\/ We don't need to do anything here, as the chunk loader will skip to the next event for us.\n+\t\t\tLogger.getLogger(getClass().getName()).log(Level.WARNING,\n+\t\t\t\t\t\"Event type with id \" + typeId + \" was not declared\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t} else {\n+\t\t\tentry.readEvent(input);\n@@ -403,1 +409,0 @@\n-\t\tentry.readEvent(input);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/TypeManager.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test;\n+\n+import java.io.IOException;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.test.util.RecordingToolkit;\n+\n+public class MissingMetadataTest {\n+\n+\t@Test\n+\tpublic void testSkipEventWithMissingMetadata() throws IOException, CouldNotLoadRecordingException {\n+\t\tIItemCollection noEvents = RecordingToolkit.getNamedRecording(\"hs_err_jdk-16.jfr\");\n+\t\tIQuantity expected = noEvents.getAggregate(Aggregators.count());\n+\t\tAssert.assertEquals(\"Recording should not contain any events\", expected.longValue(), 0L);\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/MissingMetadataTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/resources\/recordings\/hs_err_jdk-16.jfr","binary":true,"status":"added"}]}