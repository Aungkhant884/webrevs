{"files":[{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -779,0 +779,9 @@\n+\t\t\t<state>\n+\t\t\t\t<jvmFlags sortColumn=\"name:text\">\n+\t\t\t\t\t<column id=\"name:text\" width=\"200\" \/>\n+\t\t\t\t\t<column id=\"value\" width=\"110\" \/>\n+\t\t\t\t\t<column id=\"origin:text\" width=\"110\" \/>\n+\t\t\t\t<\/jvmFlags>\n+\t\t\t\t<jvmFlagsFilter showFilter=\"false\" showSearch=\"true\" \/>\n+\t\t\t<\/state>\n+\t\t\t\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/defaultPages.xml","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -187,0 +187,2 @@\n+\tpublic static String GCConfigurationPage_SECTION_JVM_GC_FLAGS;\n+\tpublic static String GCConfigurationPage_COLUMN_VALUE;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,4 @@\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n@@ -36,0 +40,1 @@\n+import org.eclipse.jface.viewers.ColumnViewer;\n@@ -42,1 +47,0 @@\n-\n@@ -44,0 +48,3 @@\n+import org.openjdk.jmc.common.IWritableState;\n+import org.openjdk.jmc.common.item.IAccessorFactory;\n+import org.openjdk.jmc.common.item.IItemCollection;\n@@ -45,0 +52,3 @@\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.item.IType;\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -46,0 +56,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n@@ -47,0 +58,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n@@ -57,0 +69,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.FilterComponent;\n@@ -59,0 +72,2 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram;\n+import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram.CompositeKeyHistogramBuilder;\n@@ -61,0 +76,4 @@\n+import org.openjdk.jmc.ui.column.ColumnManager.SelectionState;\n+import org.openjdk.jmc.ui.column.ColumnMenusFactory;\n+import org.openjdk.jmc.ui.column.TableSettings;\n+import org.openjdk.jmc.ui.handlers.MCContextMenuManager;\n@@ -62,0 +81,1 @@\n+import org.openjdk.jmc.ui.misc.PersistableSashForm;\n@@ -88,0 +108,154 @@\n+\tprivate static final String GC_FLAG_SASH = \"gcFlagSash\"; \/\/$NON-NLS-1$\n+\tprivate static final String JVM_GC_FLAGS = \"jvmFlags\"; \/\/$NON-NLS-1$\n+\tprivate static final String JVM_FLAGS_FILTER = \"jvmFlagsFilter\"; \/\/$NON-NLS-1$s\n+\tprivate static final Set<String> FLAGS;\n+\n+\tstatic {\n+\t\tSet<String> types = new HashSet<>();\n+\t\ttypes.add(JdkTypeIDs.LONG_FLAG);\n+\t\ttypes.add(JdkTypeIDs.ULONG_FLAG);\n+\t\ttypes.add(JdkTypeIDs.DOUBLE_FLAG);\n+\t\ttypes.add(JdkTypeIDs.BOOLEAN_FLAG);\n+\t\ttypes.add(JdkTypeIDs.STRING_FLAG);\n+\t\ttypes.add(JdkTypeIDs.INT_FLAG);\n+\t\ttypes.add(JdkTypeIDs.UINT_FLAG);\n+\t\tFLAGS = Collections.unmodifiableSet(types);\n+\t}\n+\n+\tprivate static final IItemFilter FLAGS_FILTER = ItemFilters.type(FLAGS);\n+\n+\tprivate static final IAccessorFactory<?> FLAG_VALUE_FIELD = new IAccessorFactory<Object>() {\n+\n+\t\t@Override\n+\t\tpublic <T> IMemberAccessor<?, T> getAccessor(IType<T> type) {\n+\t\t\tswitch (type.getIdentifier()) {\n+\t\t\tcase JdkTypeIDs.LONG_FLAG:\n+\t\t\tcase JdkTypeIDs.ULONG_FLAG:\n+\t\t\tcase JdkTypeIDs.DOUBLE_FLAG:\n+\t\t\tcase JdkTypeIDs.INT_FLAG:\n+\t\t\tcase JdkTypeIDs.UINT_FLAG:\n+\t\t\t\treturn JdkAttributes.FLAG_VALUE_NUMBER.getAccessor(type);\n+\t\t\tcase JdkTypeIDs.BOOLEAN_FLAG:\n+\t\t\t\treturn JdkAttributes.FLAG_VALUE_BOOLEAN.getAccessor(type);\n+\t\t\tcase JdkTypeIDs.STRING_FLAG:\n+\t\t\t\treturn JdkAttributes.FLAG_VALUE_TEXT.getAccessor(type);\n+\t\t\tdefault:\n+\t\t\t\t\/\/ FIXME: Return fallback function instead?\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\n+\t};\n+\tprivate static final String FLAG_VALUE_COL_ID = \"value\"; \/\/$NON-NLS-1$\n+\tprivate static final CompositeKeyHistogramBuilder FLAG_HISTOGRAM = new CompositeKeyHistogramBuilder();\n+\tstatic {\n+\t\tFLAG_HISTOGRAM.addKeyColumn(JdkAttributes.FLAG_NAME);\n+\t\tFLAG_HISTOGRAM.addKeyColumn(JdkAttributes.FLAG_ORIGIN);\n+\t\tFLAG_HISTOGRAM.addKeyColumn(FLAG_VALUE_COL_ID, Messages.GCConfigurationPage_COLUMN_VALUE, FLAG_VALUE_FIELD);\n+\t}\n+\tprivate IItemFilter perGCFagsFilter;\n+\tprivate IItemFilter userInputFlagsFilter;\n+\tprivate SelectionState flagsSelection;\n+\n+\tprivate class GCInformationUi implements IPageUI {\n+\t\tprivate final SashForm flagSash;\n+\t\tprivate final ItemHistogram allFlagsTable;\n+\t\tprivate final FilterComponent allFlagsFilter;\n+\n+\t\tpublic GCInformationUi(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {\n+\t\t\tForm form = DataPageToolkit.createForm(parent, toolkit, getName(), getIcon());\n+\t\t\tSashForm container = new SashForm(form.getBody(), SWT.VERTICAL);\n+\n+\t\t\tSashForm gcConfigSash = new SashForm(container, SWT.HORIZONTAL);\n+\t\t\tgcConfigSash.setSashWidth(5);\n+\t\t\tgcConfigSash.addTraverseListener(new SimpleTraverseListener());\n+\n+\t\t\tSection gcConfigSection = CompositeToolkit.createSection(gcConfigSash, toolkit,\n+\t\t\t\t\tMessages.GCConfigurationPage_SECTION_GC_CONFIG);\n+\t\t\tItemAggregateViewer gcConfig = new ItemAggregateViewer(gcConfigSection, toolkit);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.YOUNG_COLLECTOR);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.OLD_COLLECTOR);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.CONCURRENT_GC_THREAD_COUNT_MIN);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.PARALLEL_GC_THREAD_COUNT_MIN);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.EXPLICIT_GC_CONCURRENT);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.EXPLICIT_GC_DISABLED);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.USE_DYNAMIC_GC_THREADS);\n+\t\t\tgcConfig.addAggregate(JdkAggregators.GC_TIME_RATIO_MIN);\n+\t\t\tgcConfigSection.setClient(gcConfig.getControl());\n+\n+\t\t\tSection heapConfigSection = CompositeToolkit.createSection(gcConfigSash, toolkit,\n+\t\t\t\t\tMessages.GCConfigurationPage_SECTION_HEAP_CONFIG);\n+\t\t\tItemAggregateViewer heapConfig = new ItemAggregateViewer(heapConfigSection, toolkit);\n+\t\t\theapConfig.addAggregate(JdkAggregators.HEAP_CONF_INITIAL_SIZE_MIN);\n+\t\t\theapConfig.addAggregate(JdkAggregators.HEAP_CONF_MIN_SIZE);\n+\t\t\theapConfig.addAggregate(JdkAggregators.HEAP_CONF_MAX_SIZE);\n+\t\t\theapConfig.addAggregate(JdkAggregators.USE_COMPRESSED_OOPS);\n+\t\t\theapConfig.addAggregate(JdkAggregators.COMPRESSED_OOPS_MODE);\n+\t\t\theapConfig.addAggregate(JdkAggregators.HEAP_ADDRESS_SIZE_MIN);\n+\t\t\theapConfig.addAggregate(JdkAggregators.HEAP_OBJECT_ALIGNMENT_MIN);\n+\t\t\theapConfigSection.setClient(heapConfig.getControl());\n+\n+\t\t\tSection ycConfigSection = CompositeToolkit.createSection(gcConfigSash, toolkit,\n+\t\t\t\t\tMessages.GCConfigurationPage_SECTION_YOUNG_CONFIG);\n+\t\t\tItemAggregateViewer ycConfig = new ItemAggregateViewer(ycConfigSection, toolkit);\n+\t\t\tycConfig.addAggregate(JdkAggregators.YOUNG_GENERATION_MIN_SIZE);\n+\t\t\tycConfig.addAggregate(JdkAggregators.YOUNG_GENERATION_MAX_SIZE);\n+\t\t\tycConfig.addAggregate(JdkAggregators.NEW_RATIO_MIN);\n+\t\t\tycConfig.addAggregate(JdkAggregators.TENURING_THRESHOLD_INITIAL_MIN);\n+\t\t\tycConfig.addAggregate(JdkAggregators.TENURING_THRESHOLD_MAX);\n+\t\t\tycConfig.addAggregate(JdkAggregators.USES_TLABS);\n+\t\t\tycConfig.addAggregate(JdkAggregators.TLAB_MIN_SIZE);\n+\t\t\tycConfig.addAggregate(JdkAggregators.TLAB_REFILL_WASTE_LIMIT_MIN);\n+\t\t\tycConfigSection.setClient(ycConfig.getControl());\n+\n+\t\t\tgcConfig.setValues(getDataSource().getItems());\n+\t\t\theapConfig.setValues(getDataSource().getItems());\n+\t\t\tycConfig.setValues(getDataSource().getItems());\n+\n+\t\t\tflagSash = new SashForm(container, SWT.VERTICAL);\n+\t\t\ttoolkit.adapt(flagSash);\n+\n+\t\t\tperGCFagsFilter = ItemFilters.and(FLAGS_FILTER, GCFlagFilters.collectorFlags(getDataSource().getItems()));\n+\n+\t\t\tSection gcFlagsSection = CompositeToolkit.createSection(flagSash, toolkit,\n+\t\t\t\t\tMessages.GCConfigurationPage_SECTION_JVM_GC_FLAGS);\n+\t\t\tallFlagsTable = FLAG_HISTOGRAM.buildWithoutBorder(gcFlagsSection,\n+\t\t\t\t\tnew TableSettings(state.getChild(JVM_GC_FLAGS)));\n+\t\t\tallFlagsFilter = FilterComponent.createFilterComponent(allFlagsTable, userInputFlagsFilter,\n+\t\t\t\t\tgetDataSource().getItems().apply(perGCFagsFilter), pageContainer.getSelectionStore()::getSelections,\n+\t\t\t\t\tthis::onFlagsFilterChange);\n+\t\t\tMCContextMenuManager flagsMm = MCContextMenuManager\n+\t\t\t\t\t.create(allFlagsTable.getManager().getViewer().getControl());\n+\t\t\tColumnMenusFactory.addDefaultMenus(allFlagsTable.getManager(), flagsMm);\n+\t\t\tflagsMm.add(allFlagsFilter.getShowFilterAction());\n+\t\t\tflagsMm.add(allFlagsFilter.getShowSearchAction());\n+\t\t\tgcFlagsSection.setClient(allFlagsFilter.getComponent());\n+\n+\t\t\tColumnViewer flagViewer = allFlagsTable.getManager().getViewer();\n+\t\t\tflagViewer.addSelectionChangedListener(\n+\t\t\t\t\te -> pageContainer.showSelection(allFlagsTable.getSelection().getItems()));\n+\n+\t\t\tPersistableSashForm.loadState(flagSash, state.getChild(GC_FLAG_SASH));\n+\t\t\tallFlagsFilter.loadState(getState().getChild(JVM_FLAGS_FILTER));\n+\n+\t\t\tallFlagsTable.show(getDataSource().getItems().apply(perGCFagsFilter));\n+\t\t\tonFlagsFilterChange(userInputFlagsFilter);\n+\t\t\taddResultActions(form);\n+\t\t\tallFlagsTable.getManager().setSelectionState(flagsSelection);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void saveTo(IWritableState memento) {\n+\t\t\tallFlagsTable.getManager().getSettings().saveState(memento.createChild(JVM_GC_FLAGS));\n+\t\t\tallFlagsFilter.saveState(memento.createChild(JVM_FLAGS_FILTER));\n+\t\t\tPersistableSashForm.saveState(flagSash, memento.createChild(GC_FLAG_SASH));\n+\n+\t\t\tflagsSelection = allFlagsTable.getManager().getSelectionState();\n+\t\t}\n+\n+\t\tprivate void onFlagsFilterChange(IItemFilter filter) {\n+\t\t\tallFlagsFilter.filterChangeHelper(filter, allFlagsTable, getDataSource().getItems().apply(perGCFagsFilter));\n+\t\t\tuserInputFlagsFilter = filter;\n+\t\t}\n+\t}\n+\n@@ -90,50 +264,118 @@\n-\t\tForm form = DataPageToolkit.createForm(parent, toolkit, getName(), getIcon());\n-\t\tSashForm container = new SashForm(form.getBody(), SWT.HORIZONTAL);\n-\t\tcontainer.setSashWidth(5);\n-\t\tcontainer.addTraverseListener(new SimpleTraverseListener());\n-\n-\t\tSection gcConfigSection = CompositeToolkit.createSection(container, toolkit,\n-\t\t\t\tMessages.GCConfigurationPage_SECTION_GC_CONFIG);\n-\t\tItemAggregateViewer gcConfig = new ItemAggregateViewer(gcConfigSection, toolkit);\n-\t\tgcConfig.addAggregate(JdkAggregators.YOUNG_COLLECTOR);\n-\t\tgcConfig.addAggregate(JdkAggregators.OLD_COLLECTOR);\n-\t\tgcConfig.addAggregate(JdkAggregators.CONCURRENT_GC_THREAD_COUNT_MIN);\n-\t\tgcConfig.addAggregate(JdkAggregators.PARALLEL_GC_THREAD_COUNT_MIN);\n-\t\tgcConfig.addAggregate(JdkAggregators.EXPLICIT_GC_CONCURRENT);\n-\t\tgcConfig.addAggregate(JdkAggregators.EXPLICIT_GC_DISABLED);\n-\t\tgcConfig.addAggregate(JdkAggregators.USE_DYNAMIC_GC_THREADS);\n-\t\tgcConfig.addAggregate(JdkAggregators.GC_TIME_RATIO_MIN);\n-\t\tgcConfigSection.setClient(gcConfig.getControl());\n-\n-\t\tSection heapConfigSection = CompositeToolkit.createSection(container, toolkit,\n-\t\t\t\tMessages.GCConfigurationPage_SECTION_HEAP_CONFIG);\n-\t\tItemAggregateViewer heapConfig = new ItemAggregateViewer(heapConfigSection, toolkit);\n-\t\theapConfig.addAggregate(JdkAggregators.HEAP_CONF_INITIAL_SIZE_MIN);\n-\t\theapConfig.addAggregate(JdkAggregators.HEAP_CONF_MIN_SIZE);\n-\t\theapConfig.addAggregate(JdkAggregators.HEAP_CONF_MAX_SIZE);\n-\t\theapConfig.addAggregate(JdkAggregators.USE_COMPRESSED_OOPS);\n-\t\theapConfig.addAggregate(JdkAggregators.COMPRESSED_OOPS_MODE);\n-\t\theapConfig.addAggregate(JdkAggregators.HEAP_ADDRESS_SIZE_MIN);\n-\t\theapConfig.addAggregate(JdkAggregators.HEAP_OBJECT_ALIGNMENT_MIN);\n-\t\theapConfigSection.setClient(heapConfig.getControl());\n-\n-\t\tSection ycConfigSection = CompositeToolkit.createSection(container, toolkit,\n-\t\t\t\tMessages.GCConfigurationPage_SECTION_YOUNG_CONFIG);\n-\t\tItemAggregateViewer ycConfig = new ItemAggregateViewer(ycConfigSection, toolkit);\n-\t\tycConfig.addAggregate(JdkAggregators.YOUNG_GENERATION_MIN_SIZE);\n-\t\tycConfig.addAggregate(JdkAggregators.YOUNG_GENERATION_MAX_SIZE);\n-\t\tycConfig.addAggregate(JdkAggregators.NEW_RATIO_MIN);\n-\t\tycConfig.addAggregate(JdkAggregators.TENURING_THRESHOLD_INITIAL_MIN);\n-\t\tycConfig.addAggregate(JdkAggregators.TENURING_THRESHOLD_MAX);\n-\t\tycConfig.addAggregate(JdkAggregators.USES_TLABS);\n-\t\tycConfig.addAggregate(JdkAggregators.TLAB_MIN_SIZE);\n-\t\tycConfig.addAggregate(JdkAggregators.TLAB_REFILL_WASTE_LIMIT_MIN);\n-\t\tycConfigSection.setClient(ycConfig.getControl());\n-\n-\t\tgcConfig.setValues(getDataSource().getItems());\n-\t\theapConfig.setValues(getDataSource().getItems());\n-\t\tycConfig.setValues(getDataSource().getItems());\n-\n-\t\taddResultActions(form);\n-\n-\t\treturn null;\n+\t\treturn new GCInformationUi(parent, toolkit, pageContainer, state);\n+\t}\n+\n+\tstatic class GCFlagFilters {\n+\n+\t\tprivate static IItemFilter useGCFlag() {\n+\t\t\treturn ItemFilters.and(ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseEpsilonGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseG1GC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseZGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseShenandoahGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseConcMarkSweepGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseSerialGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseParallelGC\") \/\/$NON-NLS-1$\n+\t\t\t), ItemFilters.equals(JdkAttributes.FLAG_VALUE_BOOLEAN, true));\n+\n+\t\t}\n+\n+\t\tprivate static IItemFilter collectorFlags(String usedGCFlag) {\n+\t\t\t\/\/ This may happen for JFR files without GC configuration events, like those of async-profiler\n+\t\t\tif (usedGCFlag == null) {\n+\t\t\t\treturn ItemFilters.all();\n+\t\t\t}\n+\n+\t\t\t\/\/ Flags like ParallelGCThreads, ConcGCThreads, Xmx, NewRatio are left as this information is contained in the gc configuration event\n+\t\t\t\/\/ Most flags from https:\/\/github.com\/openjdk\/jdk11u\/blob\/master\/src\/hotspot\/share\/gc\/shared\/gc_globals.hpp\n+\t\t\t\/\/ are not added at this time.\n+\t\t\tswitch (usedGCFlag) {\n+\t\t\tcase \"UseEpsilonGC\":\n+\t\t\t\t\/\/ https:\/\/github.com\/openjdk\/jdk11u\/blob\/6c31ac2acdc2b2efa63fe92de8368ab964d847e9\/src\/hotspot\/share\/gc\/epsilon\/epsilon_globals.hpp\n+\t\t\t\treturn ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseEpsilonGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.matches(JdkAttributes.FLAG_NAME, \"^Epsilon.+\")); \/\/$NON-NLS-1$\n+\n+\t\t\tcase \"UseG1GC\":\n+\t\t\t\t\/\/ https:\/\/github.com\/openjdk\/jdk11u\/blob\/6c31ac2acdc2b2efa63fe92de8368ab964d847e9\/src\/hotspot\/share\/gc\/g1\/g1_globals.hpp\n+\t\t\t\treturn ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseG1GC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"InitiatingHeapOccupancyPercent\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ClassUnloading\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ClassUnloadingWithConcurrentMark\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseStringDeduplication\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ParallelRefProcEnabled\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"MaxGCPauseMillis\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"GCPauseIntervalMillis\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseLargePages\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseTransparentHugePages\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseNUMA\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"AlwaysPreTouch\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.matches(JdkAttributes.FLAG_NAME, \"^G1.+\")); \/\/$NON-NLS-1$\n+\n+\t\t\tcase \"UseZGC\":\n+\t\t\t\t\/\/  https:\/\/github.com\/openjdk\/jdk11u\/blob\/6c31ac2acdc2b2efa63fe92de8368ab964d847e9\/src\/hotspot\/share\/gc\/z\/z_globals.hpp\n+\t\t\t\treturn ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseZGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ClassUnloading\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ClassUnloadingWithConcurrentMark\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"SoftMaxHeapSize\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseLargePages\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseTransparentHugePages\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseNUMA\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseStringDeduplication\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"SoftRefLRUPolicyMSPerMB\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"AlwaysPreTouch\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.matches(JdkAttributes.FLAG_NAME, \"^Z[A-Z].+\")); \/\/$NON-NLS-1$\n+\n+\t\t\tcase \"UseShenandoahGC\":\n+\t\t\t\t\/\/ from https:\/\/github.com\/openjdk\/jdk11u\/blob\/6c31ac2acdc2b2efa63fe92de8368ab964d847e9\/src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp\n+\t\t\t\treturn ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseShenandoahGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ClassUnloading\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ClassUnloadingWithConcurrentMark\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"SoftMaxHeapSize\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseStringDeduplication\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseLargePages\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseTransparentHugePages\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseNUMA\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"SoftRefLRUPolicyMSPerMB\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"AlwaysPreTouch\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.matches(JdkAttributes.FLAG_NAME, \"^Shenandoah[A-Z].+\")); \/\/$NON-NLS-1$\n+\n+\t\t\tcase \"UseSerialGC\":\n+\t\t\t\t\/\/ from https:\/\/github.com\/openjdk\/jdk11u\/blob\/6c31ac2acdc2b2efa63fe92de8368ab964d847e9\/src\/hotspot\/share\/gc\/serial\/serial_globals.hpp\n+\t\t\t\treturn ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseSerialGC\")); \/\/$NON-NLS-1$\n+\n+\t\t\tcase \"UseParallelGC\":\n+\t\t\t\t\/\/ from https:\/\/github.com\/openjdk\/jdk11u\/blob\/6c31ac2acdc2b2efa63fe92de8368ab964d847e9\/src\/hotspot\/share\/gc\/parallel\/parallel_globals.hpp\n+\t\t\t\treturn ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseParallelGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"HeapMaximumCompactionInterval\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"HeapFirstMaximumCompactionCount\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseMaximumCompactionOnSystemGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ParallelOldDeadWoodLimiterMean\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ParallelOldDeadWoodLimiterStdDev\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"GCWorkerDelayMillis\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"PSChunkLargeArrays\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"HeapMaximumCompactionInterval\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseNUMA\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"AlwaysPreTouch\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.matches(JdkAttributes.FLAG_NAME, \"^CMS[A-Z].+\")); \/\/$NON-NLS-1$\n+\n+\t\t\tcase \"UseConcMarkSweepGC\":\n+\t\t\t\t\/\/ from https:\/\/github.com\/openjdk\/jdk11u\/blob\/6c31ac2acdc2b2efa63fe92de8368ab964d847e9\/src\/hotspot\/share\/gc\/cms\/cms_globals.hpp\n+\t\t\t\treturn ItemFilters.or(ItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseConcMarkSweepGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"UseCMSInitiatingOccupancyOnly\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"BindCMSThreadToCPU\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"CPUForCMSThread\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ParallelRefProcEnabled\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"ScavengeBeforeFullGC\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.equals(JdkAttributes.FLAG_NAME, \"AlwaysPreTouch\"), \/\/$NON-NLS-1$\n+\t\t\t\t\t\tItemFilters.matches(JdkAttributes.FLAG_NAME, \"^(CMS|FLS|ParGC)[A-Z_].+\")); \/\/$NON-NLS-1$\n+\n+\t\t\tdefault:\n+\t\t\t\treturn ItemFilters.all();\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static IItemFilter collectorFlags(IItemCollection items) {\n+\t\t\tString usedGC = items.apply(useGCFlag()).values(JdkAttributes.FLAG_NAME).get().distinct().findFirst()\n+\t\t\t\t\t.orElse(\"\");\n+\n+\t\t\treturn collectorFlags(usedGC);\n+\t\t}\n+\n@@ -148,1 +390,1 @@\n-\t\treturn JdkFilters.GC_CONFIG;\n+\t\treturn ItemFilters.or(FLAGS_FILTER, JdkFilters.GC_CONFIG);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/GCConfigurationPage.java","additions":295,"deletions":53,"binary":false,"changes":348,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -310,0 +310,2 @@\n+GCConfigurationPage_SECTION_JVM_GC_FLAGS=JVM GC Related Flags\n+GCConfigurationPage_COLUMN_VALUE=Value\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}