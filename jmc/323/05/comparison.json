{"files":[{"patch":"@@ -11,1 +11,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Bundle-RequiredExecutionEnvironment: JavaSE-11\n@@ -13,4 +13,1 @@\n-Import-Package: twitter4j,\n- twitter4j.auth,\n- twitter4j.conf,\n- twitter4j.api\n+Import-Package: org.owasp.encoder\n","filename":"application\/org.openjdk.jmc.console.twitter\/META-INF\/MANIFEST.MF","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.twitter;\n+\n+class AccessToken {\n+\tprivate String accessToken;\n+\tprivate String accessTokenSecret;\n+\tprivate String accessUserName;\n+\n+\tpublic AccessToken(String accessToken, String accessTokenSecret, String accessUserName) {\n+\t\tthis.accessToken = accessToken;\n+\t\tthis.accessTokenSecret = accessTokenSecret;\n+\t\tthis.accessUserName = accessUserName;\n+\t}\n+\n+\tpublic AccessToken(String accessToken, String accessTokenSecret) {\n+\t\tthis.accessToken = accessToken;\n+\t\tthis.accessTokenSecret = accessTokenSecret;\n+\t}\n+\n+\tpublic String getAccessToken() {\n+\t\treturn accessToken;\n+\t}\n+\n+\tpublic void setAccessToken(String accessToken) {\n+\t\tthis.accessToken = accessToken;\n+\t}\n+\n+\tpublic String getAccessTokenSecret() {\n+\t\treturn accessTokenSecret;\n+\t}\n+\n+\tpublic void setAccessTokenSecret(String accessTokenSecret) {\n+\t\tthis.accessTokenSecret = accessTokenSecret;\n+\t}\n+\n+\tpublic String getAccessUserName() {\n+\t\treturn accessUserName;\n+\t}\n+\n+\tpublic void setAccessUserName(String accessUserName) {\n+\t\tthis.accessUserName = accessUserName;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.twitter\/src\/main\/java\/org\/openjdk\/jmc\/console\/twitter\/AccessToken.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.twitter;\n+\n+class RequestToken {\n+\tprivate String token;\n+\tprivate String tokenSecret;\n+\n+\tpublic RequestToken(String token, String tokenSecret) {\n+\t\tthis.token = token;\n+\t\tthis.tokenSecret = tokenSecret;\n+\t}\n+\n+\tpublic String getToken() {\n+\t\treturn token;\n+\t}\n+\n+\tpublic String getTokenSecret() {\n+\t\treturn tokenSecret;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.twitter\/src\/main\/java\/org\/openjdk\/jmc\/console\/twitter\/RequestToken.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,244 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.twitter;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+import java.util.Base64;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+import org.openjdk.jmc.rjmx.triggers.actions.internal.Messages;\n+\n+class TwitterOAuthAunthenticator {\n+\n+\tprivate static final String OAUTH_REQUEST_TOKEN_URL = \"https:\/\/api.twitter.com\/oauth\/request_token\";\n+\tprivate static final String OAUTH_AUTHORIZE_URL = \"https:\/\/api.twitter.com\/oauth\/authorize\";\n+\tprivate static final String OAUTH_ACCESS_TOKEN_URL = \"https:\/\/api.twitter.com\/oauth\/access_token\";\n+\tprivate static final String REQUEST_METHOD_POST = \"POST\";\n+\tprivate static final String OAUTH_SIGNATURE_METHOD = \"HMAC-SHA1\";\n+\tprivate static final String SIGNATURE_ALGORITHM = \"HmacSHA1\";\n+\tprivate static String proxyHost;\n+\tprivate static int proxyPort;\n+\tfinal static Logger LOGGER = Logger.getLogger(\"TwitterOAuthAunthenticator\");\n+\n+\tTwitterOAuthAunthenticator() {\n+\n+\t}\n+\n+\tprivate String encode(String httpMethod, String url) {\n+\t\tString encodedUrl = \"\";\n+\t\ttry {\n+\t\t\tencodedUrl = URLEncoder.encode(url, \"UTF-8\");\n+\t\t} catch (UnsupportedEncodingException e) {\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterEncoding_Exception, e);\n+\t\t}\n+\n+\t\treturn httpMethod.toUpperCase() + \"&\" + encodedUrl + \"&\";\n+\t}\n+\n+\tpublic String getRequestToken(String consumerKey, String consumerKeySecret) {\n+\t\ttry {\n+\t\t\tString uuid_string = UUID.randomUUID().toString();\n+\t\t\tuuid_string = uuid_string.replaceAll(\"-\", \"\");\n+\t\t\tString oauth_nonce = uuid_string; \/\/ any relatively random alphanumeric string will work here. I used UUID minus \"-\" signs\n+\t\t\tString oauth_timestamp = Math.round((new Date()).getTime() \/ 1000.0) + \"\"; \/\/ get current time in milliseconds, then divide by 1000 to get seconds\n+\t\t\tString parameter_string = \"oauth_consumer_key=\" + consumerKey + \"&oauth_nonce=\" + oauth_nonce\n+\t\t\t\t\t+ \"&oauth_signature_method=\" + OAUTH_SIGNATURE_METHOD + \"&oauth_timestamp=\" + oauth_timestamp\n+\t\t\t\t\t+ \"&oauth_version=1.0\";\n+\t\t\tString signature_base_string = encode(REQUEST_METHOD_POST, OAUTH_REQUEST_TOKEN_URL)\n+\t\t\t\t\t+ URLEncoder.encode(parameter_string, \"UTF-8\");\n+\t\t\tString oauth_signature = \"\";\n+\n+\t\t\toauth_signature = computeSignature(signature_base_string, consumerKeySecret + \"&\"); \/\/ note the & at the end. Normally the user access_token would go here, but we don't know it yet for request_token\n+\n+\t\t\tString authorization_header_string = \"OAuth oauth_consumer_key=\\\"\" + consumerKey\n+\t\t\t\t\t+ \"\\\",oauth_signature_method=\\\"\" + OAUTH_SIGNATURE_METHOD + \"\\\",oauth_timestamp=\\\"\"\n+\t\t\t\t\t+ oauth_timestamp + \"\\\",oauth_nonce=\\\"\" + oauth_nonce\n+\t\t\t\t\t+ \"\\\",oauth_version=\\\"1.0\\\",oauth_signature=\\\"\" + URLEncoder.encode(oauth_signature, \"UTF-8\")\n+\t\t\t\t\t+ \"\\\"\";\n+\n+\t\t\tString oauth_token = \"\";\n+\n+\t\t\tHttpRequest request = HttpRequest.newBuilder().POST(ofFormData(new HashMap<String, String>()))\n+\t\t\t\t\t.uri(URI.create(OAUTH_REQUEST_TOKEN_URL)).setHeader(\"Authorization\", authorization_header_string)\n+\t\t\t\t\t.header(\"Content-Type\", \"application\/x-www-form-urlencoded\").build();\n+\n+\t\t\tHttpResponse<String> response = getHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\n+\t\t\tString responseBody = response.body();\n+\n+\t\t\tif (response.statusCode() == 200) {\n+\t\t\t\toauth_token = responseBody.substring(responseBody.indexOf(\"oauth_token=\") + 12,\n+\t\t\t\t\t\tresponseBody.indexOf(\"&oauth_token_secret=\"));\n+\t\t\t}\n+\n+\t\t\treturn oauth_token;\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterRequestToken_Exception, e);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic void authorization(String oauth_token) {\n+\n+\t\tString url_open = OAUTH_AUTHORIZE_URL + \"?oauth_token=\" + oauth_token;\n+\t\ttry {\n+\t\t\tjava.awt.Desktop.getDesktop().browse(java.net.URI.create(url_open));\n+\t\t} catch (IOException e) {\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterAuthorization_Exception, e);\n+\t\t}\n+\t}\n+\n+\tpublic AccessToken authentication(\n+\t\tString consumerKey, String consumerSecret, String oauth_token, String oauth_verifier) {\n+\t\ttry {\n+\t\t\tString uuid_string = UUID.randomUUID().toString();\n+\t\t\tuuid_string = uuid_string.replaceAll(\"-\", \"\");\n+\t\t\tString oauth_nonce = uuid_string; \/\/ any relatively random alphanumeric string will work here. I used UUID minus \"-\" signs\n+\t\t\tString oauth_timestamp = Math.round((new Date()).getTime() \/ 1000.0) + \"\"; \/\/ get current time in milliseconds, then divide by 1000 to get seconds\n+\t\t\tString parameter_string = \"oauth_consumer_key=\" + consumerKey + \"&oauth_nonce=\" + oauth_nonce\n+\t\t\t\t\t+ \"&oauth_signature_method=\" + OAUTH_SIGNATURE_METHOD + \"&oauth_timestamp=\" + oauth_timestamp\n+\t\t\t\t\t+ \"&oauth_token=\" + oauth_token + \"&oauth_verifier=\" + oauth_verifier + \"&oauth_version=1.0\";\n+\t\t\tString signature_base_string = encode(REQUEST_METHOD_POST, OAUTH_ACCESS_TOKEN_URL)\n+\t\t\t\t\t+ URLEncoder.encode(parameter_string, \"UTF-8\");\n+\t\t\tString oauth_signature = \"\";\n+\n+\t\t\toauth_signature = computeSignature(signature_base_string, consumerSecret); \/\/ note the & at the end. Normally the user access_token would go here, but we don't know it yet for request_token\n+\n+\t\t\tString authorization_header_string = \"OAuth oauth_consumer_key=\\\"\" + consumerKey\n+\t\t\t\t\t+ \"\\\",oauth_signature_method=\\\"\" + OAUTH_SIGNATURE_METHOD + \"\\\",oauth_timestamp=\\\"\"\n+\t\t\t\t\t+ oauth_timestamp + \"\\\",oauth_token=\\\"\" + oauth_token + \"\\\",oauth_verifier=\\\"\" + oauth_verifier\n+\t\t\t\t\t+ \"\\\",oauth_nonce=\\\"\" + oauth_nonce + \"\\\",oauth_version=\\\"1.0\\\",oauth_signature=\\\"\"\n+\t\t\t\t\t+ URLEncoder.encode(oauth_signature, \"UTF-8\") + \"\\\"\";\n+\n+\t\t\tHttpRequest request = HttpRequest.newBuilder().POST(ofFormData(new HashMap<String, String>()))\n+\t\t\t\t\t.uri(URI.create(OAUTH_ACCESS_TOKEN_URL)).setHeader(\"Authorization\", authorization_header_string)\n+\t\t\t\t\t.header(\"Content-Type\", \"application\/x-www-form-urlencoded\").build();\n+\n+\t\t\tHttpResponse<String> response = getHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\n+\t\t\tString responseBody = response.body();\n+\t\t\tAccessToken accessToken = null;\n+\t\t\tif (response.statusCode() == 200) {\n+\t\t\t\tString final_oauth_token = responseBody.substring(responseBody.indexOf(\"oauth_token=\") + 12,\n+\t\t\t\t\t\tresponseBody.indexOf(\"&oauth_token_secret=\"));\n+\t\t\t\tString final_oauth_token_secret = responseBody\n+\t\t\t\t\t\t.substring(responseBody.indexOf(\"oauth_token_secret=\") + 19, responseBody.indexOf(\"&user_id=\"));\n+\t\t\t\tString userName = responseBody.substring(responseBody.indexOf(\"screen_name=\") + 12,\n+\t\t\t\t\t\tresponseBody.length());\n+\t\t\t\taccessToken = new AccessToken(final_oauth_token, final_oauth_token_secret, userName);\n+\t\t\t}\n+\n+\t\t\treturn accessToken;\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterAuthentication_Exception, e);\n+\t\t}\n+\t\treturn null;\n+\n+\t}\n+\n+\tprivate static void configureProxySettings() {\n+\t\tSystem.setProperty(\"java.net.useSystemProxies\", \"true\");\n+\t\tProxy proxy;\n+\t\ttry {\n+\t\t\tproxy = (Proxy) ProxySelector.getDefault().select(new URI(\"http:\/\/api.twitter.com\")).iterator().next();\n+\n+\t\t\tInetSocketAddress addr = (InetSocketAddress) proxy.address();\n+\t\t\tif (addr != null) {\n+\t\t\t\tif (addr.getHostName() != null) {\n+\t\t\t\t\tproxyHost = addr.getHostName();\n+\t\t\t\t}\n+\t\t\t\tif (addr.getPort() != -1) {\n+\t\t\t\t\tproxyPort = addr.getPort();\n+\t\t\t\t} else {\n+\t\t\t\t\tproxyPort = 80;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (URISyntaxException e) {\n+\t\t\t\/\/ Should never happen...\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterURIParsing_Exception, e);\n+\t\t}\n+\t}\n+\n+\tprivate static HttpClient getHttpClient() {\n+\t\tconfigureProxySettings();\n+\t\tInetSocketAddress addr;\n+\t\tif (proxyHost != null) {\n+\t\t\taddr = new InetSocketAddress(proxyHost, proxyPort);\n+\t\t} else {\n+\t\t\taddr = null;\n+\t\t}\n+\t\tHttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_2)\n+\t\t\t\t.connectTimeout(Duration.ofSeconds(100)).proxy(ProxySelector.of(addr)).build();\n+\n+\t\treturn httpClient;\n+\t}\n+\n+\tprivate static String computeSignature(String baseString, String keyString) throws Exception {\n+\n+\t\tSecretKey secretKey = null;\n+\n+\t\tbyte[] keyBytes = keyString.getBytes();\n+\t\tsecretKey = new SecretKeySpec(keyBytes, SIGNATURE_ALGORITHM);\n+\n+\t\tMac mac = Mac.getInstance(SIGNATURE_ALGORITHM);\n+\n+\t\tmac.init(secretKey);\n+\n+\t\tbyte[] text = baseString.getBytes();\n+\n+\t\tbyte[] signatureBytes = mac.doFinal(text);\n+\t\treturn new String(Base64.getEncoder().encode(signatureBytes));\n+\t}\n+\n+\tpublic static HttpRequest.BodyPublisher ofFormData(Map<String, String> data) {\n+\t\tStringBuilder builder = new StringBuilder();\n+\t\treturn HttpRequest.BodyPublishers.ofString(builder.toString());\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.twitter\/src\/main\/java\/org\/openjdk\/jmc\/console\/twitter\/TwitterOAuthAunthenticator.java","additions":244,"deletions":0,"binary":false,"changes":244,"status":"added"},{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.twitter;\n+\n+import org.owasp.encoder.Encode;\n+import java.nio.charset.StandardCharsets;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Base64;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import org.openjdk.jmc.rjmx.triggers.actions.internal.Messages;\n+\n+import javax.crypto.Mac;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+\n+class TwitterOAuthHeaderGenerator {\n+\n+\tprivate String consumerKey;\n+\tprivate String consumerSecret;\n+\tprivate String signatureMethod;\n+\tprivate String token;\n+\tprivate String tokenSecret;\n+\tprivate String version;\n+\n+\tfinal static Logger LOGGER = Logger.getLogger(\"TwitterOAuthHeaderGenerator\");\n+\n+\tpublic TwitterOAuthHeaderGenerator(String consumerKey, String consumerSecret, String token, String tokenSecret) {\n+\t\tthis.consumerKey = consumerKey;\n+\t\tthis.consumerSecret = consumerSecret;\n+\t\tthis.token = token;\n+\t\tthis.tokenSecret = tokenSecret;\n+\t\tthis.signatureMethod = \"HMAC-SHA1\";\n+\t\tthis.version = \"1.0\";\n+\t}\n+\n+\tprivate static final String oauth_consumer_key = \"oauth_consumer_key\";\n+\tprivate static final String oauth_token = \"oauth_token\";\n+\tprivate static final String oauth_signature_method = \"oauth_signature_method\";\n+\tprivate static final String oauth_timestamp = \"oauth_timestamp\";\n+\tprivate static final String oauth_nonce = \"oauth_nonce\";\n+\tprivate static final String oauth_version = \"oauth_version\";\n+\tprivate static final String oauth_signature = \"oauth_signature\";\n+\tprivate static final String HMAC_SHA1 = \"HmacSHA1\";\n+\n+\t\/**\n+\t * Generates oAuth 1.0a header which can be passed as Authorization header\n+\t * \n+\t * @param httpMethod\n+\t * @param url\n+\t * @param requestParams\n+\t * @return\n+\t *\/\n+\tpublic String generateHeader(String httpMethod, String url, Map<String, String> requestParams) {\n+\t\tStringBuilder base = new StringBuilder();\n+\t\tString nonce = getNonce();\n+\t\tString timestamp = getTimestamp();\n+\t\tString baseSignatureString = generateSignatureBaseString(httpMethod, url, requestParams, nonce, timestamp);\n+\t\tString signature = encryptUsingHmacSHA1(baseSignatureString);\n+\t\tbase.append(\"OAuth \");\n+\t\tappend(base, oauth_consumer_key, consumerKey);\n+\t\tappend(base, oauth_token, token);\n+\t\tappend(base, oauth_signature_method, signatureMethod);\n+\t\tappend(base, oauth_timestamp, timestamp);\n+\t\tappend(base, oauth_nonce, nonce);\n+\t\tappend(base, oauth_version, version);\n+\t\tappend(base, oauth_signature, signature);\n+\t\tbase.deleteCharAt(base.length() - 1);\n+\t\treturn base.toString();\n+\t}\n+\n+\t\/**\n+\t * Generate base string to generate the oauth_signature\n+\t * \n+\t * @param httpMethod\n+\t * @param url\n+\t * @param requestParams\n+\t * @return\n+\t *\/\n+\tprivate String generateSignatureBaseString(\n+\t\tString httpMethod, String url, Map<String, String> requestParams, String nonce, String timestamp) {\n+\t\tMap<String, String> params = new HashMap<>();\n+\t\trequestParams.entrySet().forEach(entry -> {\n+\t\t\tput(params, entry.getKey(), entry.getValue());\n+\t\t});\n+\t\tput(params, oauth_consumer_key, consumerKey);\n+\t\tput(params, oauth_nonce, nonce);\n+\t\tput(params, oauth_signature_method, signatureMethod);\n+\t\tput(params, oauth_timestamp, timestamp);\n+\t\tput(params, oauth_token, token);\n+\t\tput(params, oauth_version, version);\n+\t\tMap<String, String> sortedParams = params.entrySet().stream().sorted(Map.Entry.comparingByKey())\n+\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldValue, newValue) -> oldValue,\n+\t\t\t\t\t\tLinkedHashMap::new));\n+\t\tStringBuilder base = new StringBuilder();\n+\t\tsortedParams.entrySet().forEach(entry -> {\n+\t\t\tbase.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\"&\");\n+\t\t});\n+\t\tbase.deleteCharAt(base.length() - 1);\n+\t\tString baseString = httpMethod.toUpperCase() + \"&\" + encode(url) + \"&\" + encode(base.toString());\n+\t\treturn baseString;\n+\t}\n+\n+\tprivate String encryptUsingHmacSHA1(String input) {\n+\t\tString secret = new StringBuilder().append(encode(consumerSecret)).append(\"&\").append(encode(tokenSecret))\n+\t\t\t\t.toString();\n+\t\tbyte[] keyBytes = secret.getBytes(StandardCharsets.UTF_8);\n+\t\tSecretKey key = new SecretKeySpec(keyBytes, HMAC_SHA1);\n+\t\tMac mac;\n+\t\ttry {\n+\t\t\tmac = Mac.getInstance(HMAC_SHA1);\n+\t\t\tmac.init(key);\n+\t\t} catch (NoSuchAlgorithmException | InvalidKeyException e) {\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterEncryption_Exception, e);\n+\t\t\treturn null;\n+\t\t}\n+\t\tbyte[] signatureBytes = mac.doFinal(input.getBytes(StandardCharsets.UTF_8));\n+\t\treturn new String(Base64.getEncoder().encode(signatureBytes));\n+\t}\n+\n+\t\/**\n+\t * Percentage encode String as per RFC 3986, Section 2.1\n+\t * \n+\t * @param value\n+\t * @return\n+\t *\/\n+\tpublic String encode(String value) {\n+\t\tString encoded = \"\";\n+\t\ttry {\n+\t\t\tencoded = Encode.forUriComponent(value);\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterEncoding_Exception, e);\n+\t\t}\n+\t\treturn encoded;\n+\t}\n+\n+\tprivate void put(Map<String, String> map, String key, String value) {\n+\t\tmap.put(encode(key), encode(value));\n+\t}\n+\n+\tprivate void append(StringBuilder builder, String key, String value) {\n+\t\tbuilder.append(encode(key)).append(\"=\\\"\").append(encode(value)).append(\"\\\",\");\n+\t}\n+\n+\tprivate String getNonce() {\n+\t\tint leftLimit = 48; \/\/ numeral '0'\n+\t\tint rightLimit = 122; \/\/ letter 'z'\n+\t\tint targetStringLength = 10;\n+\t\tRandom random = new Random();\n+\n+\t\tString generatedString = random.ints(leftLimit, rightLimit + 1)\n+\t\t\t\t.filter(i -> (i <= 57 || i >= 65) && (i <= 90 || i >= 97)).limit(targetStringLength)\n+\t\t\t\t.collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();\n+\t\treturn generatedString;\n+\n+\t}\n+\n+\tprivate String getTimestamp() {\n+\t\treturn Math.round((new Date()).getTime() \/ 1000.0) + \"\";\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.console.twitter\/src\/main\/java\/org\/openjdk\/jmc\/console\/twitter\/TwitterOAuthHeaderGenerator.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"},{"patch":"@@ -48,0 +48,1 @@\n+import org.eclipse.osgi.util.NLS;\n@@ -56,0 +57,1 @@\n+import org.openjdk.jmc.rjmx.triggers.actions.internal.Messages;\n@@ -59,6 +61,10 @@\n-import twitter4j.Twitter;\n-import twitter4j.TwitterException;\n-import twitter4j.TwitterFactory;\n-import twitter4j.auth.AccessToken;\n-import twitter4j.auth.RequestToken;\n-import twitter4j.conf.ConfigurationBuilder;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ProxySelector;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.swing.JOptionPane;\n@@ -79,0 +85,7 @@\n+\tprivate static final String UPDATE_STATUS_URL = \"https:\/\/api.twitter.com\/1.1\/statuses\/update.json\";\n+\tprivate static final String SEND_DIRECT_MESSAGE_URL = \"https:\/\/api.twitter.com\/1.1\/direct_messages\/events\/new.json\";\n+\tprivate static final String GET_USER_ID = \"https:\/\/api.twitter.com\/1.1\/users\/lookup.json\";\n+\n+\tprivate static TwitterOAuthHeaderGenerator oAuthHeaderGenerator;\n+\tprivate static TwitterOAuthAunthenticator oauthAuthenticator = new TwitterOAuthAunthenticator();\n+\n@@ -89,2 +102,1 @@\n-\tprivate List<Tweeter> tweeters = new ArrayList<>();\n-\tprivate TwitterFactory twitterFactory;\n+\tprivate static List<Tweeter> tweeters = new ArrayList<>();\n@@ -94,0 +106,2 @@\n+\tprivate static String proxyHost;\n+\tprivate static int proxyPort;\n@@ -122,1 +136,2 @@\n-\t\ttwitterFactory = createTwitterFactory();\n+\n+\t\tconfigureProxySettings();\n@@ -131,29 +146,0 @@\n-\tprivate TwitterFactory createTwitterFactory() {\n-\t\tConfigurationBuilder cb = new ConfigurationBuilder();\n-\t\ttry {\n-\t\t\tIProxyData[] data = proxyService.select(new URI(\"http:\/\/api.twitter.com\")); \/\/$NON-NLS-1$\n-\t\t\tString host = null;\n-\t\t\tint port = -1;\n-\t\t\tfor (IProxyData proxyData : data) {\n-\t\t\t\tif (proxyData.getHost() != null) {\n-\t\t\t\t\thost = proxyData.getHost();\n-\t\t\t\t\tport = proxyData.getPort();\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (host != null) {\n-\t\t\t\tcb.setHttpProxyHost(host);\n-\t\t\t}\n-\t\t\tif (port != -1) {\n-\n-\t\t\t\tcb.setHttpProxyPort(port);\n-\t\t\t} else {\n-\t\t\t\tcb.setHttpProxyPort(80);\n-\t\t\t}\n-\t\t} catch (URISyntaxException e) {\n-\t\t\t\/\/ Should never happen...\n-\t\t\tLOGGER.log(Level.SEVERE, \"Failed to parse URI\", e);\n-\t\t}\n-\t\treturn new TwitterFactory(cb.build());\n-\t}\n-\n@@ -173,0 +159,23 @@\n+\tprivate void configureProxySettings() {\n+\t\tSystem.setProperty(\"java.net.useSystemProxies\", \"true\");\n+\t\tProxy proxy;\n+\t\ttry {\n+\t\t\tproxy = (Proxy) ProxySelector.getDefault().select(new URI(\"http:\/\/api.twitter.com\")).iterator().next();\n+\n+\t\t\tInetSocketAddress addr = (InetSocketAddress) proxy.address();\n+\t\t\tif (addr != null) {\n+\t\t\t\tif (addr.getHostName() != null) {\n+\t\t\t\t\tproxyHost = addr.getHostName();\n+\t\t\t\t}\n+\t\t\t\tif (addr.getPort() != -1) {\n+\t\t\t\t\tproxyPort = addr.getPort();\n+\t\t\t\t} else {\n+\t\t\t\t\tproxyPort = 80;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (URISyntaxException e) {\n+\t\t\t\/\/ Should never happen...\n+\t\t\tLOGGER.log(Level.SEVERE, Messages.TriggerActionTwitterURIParsing_Exception, e);\n+\t\t}\n+\t}\n+\n@@ -196,21 +205,7 @@\n-\tpublic RequestToken authorize(Twitter twitter) {\n-\t\ttry {\n-\t\t\ttwitter.setOAuthConsumer(consumerKey, consumerSecret);\n-\t\t} catch (IllegalStateException e) {\n-\t\t\t\/\/ Using log level info, since it's probably only since this was done before.\n-\t\t\tTwitterPlugin.LOGGER.log(Level.INFO,\n-\t\t\t\t\t\"Could not set OAuth Consumer. Most likely this has already been done before.\", e);\n-\t\t}\n-\t\tRequestToken requestToken;\n-\t\ttry {\n-\t\t\trequestToken = twitter.getOAuthRequestToken();\n-\t\t\tProgram.launch(requestToken.getAuthorizationURL());\n-\t\t\treturn requestToken;\n-\t\t} catch (TwitterException e) {\n-\t\t\tTwitterPlugin.LOGGER.log(Level.SEVERE, \"Could not request token!\", e);\n-\t\t\tDialogToolkit.showException(null, \"Problem when Authorizing\",\n-\t\t\t\t\t\"Problem when trying to connect to Twitter for authorization. Check your network and proxy settings. If you make any changes, a restart may be required. \\n\\nException message: \"\n-\t\t\t\t\t\t\t+ e.getMessage(),\n-\t\t\t\t\te);\n-\t\t}\n-\t\treturn null;\n+\t\/\/ This method will authorize the twitter user from preference page.\n+\tpublic RequestToken authorize() {\n+\t\tString oauth_token = \"\";\n+\t\toauth_token = oauthAuthenticator.getRequestToken(consumerKey, consumerSecret); \/\/ Step 1 of 3-legged OAuth Authentication flow\n+\t\toauthAuthenticator.authorization(oauth_token); \/\/ Step 2 of 3-legged OAuth Authentication flow\n+\t\treturn new RequestToken(oauth_token, \"\");\n+\n@@ -219,1 +214,1 @@\n-\tpublic Tweeter getAuthorizedTweeter(String username) {\n+\tpublic static Tweeter getAuthorizedTweeter(String username) {\n@@ -228,9 +223,4 @@\n-\tpublic void updateStatus(String username, String message) throws TwitterException {\n-\t\tTweeter tweeter = getAuthorizedTweeter(username);\n-\t\tif (tweeter != null) {\n-\t\t\tAccessToken at = createAccessToken(tweeter);\n-\t\t\tTwitter twitter = twitterFactory.getInstance();\n-\t\t\ttwitter.setOAuthConsumer(consumerKey, consumerSecret);\n-\t\t\ttwitter.setOAuthAccessToken(at);\n-\t\t\ttwitter.updateStatus(message);\n-\t\t\treturn;\n+\tprivate static HttpClient getHttpClient() {\n+\t\tInetSocketAddress addr;\n+\t\tif (proxyHost != null) {\n+\t\t\taddr = new InetSocketAddress(proxyHost, proxyPort);\n@@ -238,3 +228,22 @@\n-\t\t\tthrow new TwitterException(String.format(\n-\t\t\t\t\t\"Attempted to update status for an account not defined in the preferences. Please set up the account (%s) in preferences first.\",\n-\t\t\t\t\tusername));\n+\t\t\taddr = null;\n+\t\t}\n+\t\tHttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_2)\n+\t\t\t\t.connectTimeout(Duration.ofSeconds(100)).proxy(ProxySelector.of(addr)).build();\n+\n+\t\treturn httpClient;\n+\t}\n+\n+\tpublic void updateStatus(String username, String message) throws Exception {\n+\t\tverifyTweeter(username);\n+\t\t\/\/ form parameters\n+\t\tMap<String, String> data = new HashMap<String, String>();\n+\t\tdata.put(\"status\", message);\n+\n+\t\tHttpRequest request = HttpRequest.newBuilder().POST(ofFormData(data)).uri(URI.create(UPDATE_STATUS_URL))\n+\t\t\t\t.setHeader(\"Authorization\", getHeader(\"POST\", UPDATE_STATUS_URL, data))\n+\t\t\t\t.header(\"Content-Type\", \"application\/x-www-form-urlencoded\").build();\n+\n+\t\tHttpResponse<String> response = getHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\n+\t\tif (response.statusCode() != 200) {\n+\t\t\tJOptionPane.showMessageDialog(null,\n+\t\t\t\t\tNLS.bind(Messages.TriggerActionTwitterSendUpdateStatus_ErrorMessage, response.statusCode()));\n@@ -244,2 +253,18 @@\n-\tprivate AccessToken createAccessToken(Tweeter tweeter) {\n-\t\treturn new AccessToken(tweeter.getToken(), tweeter.getTokenSecret());\n+\t\/\/ This method will be used to fetch the userid of the direct message recipient.\n+\t\/\/ On JMC UI, user will enter the username but direct message API is expecting corresponding userid.\n+\tpublic static Long getUserId(String username) throws Exception {\n+\t\tMap<String, String> data = new HashMap<String, String>();\n+\t\tdata.put(\"screen_name\", username);\n+\n+\t\tHttpRequest request = HttpRequest.newBuilder().GET().uri(URI.create(GET_USER_ID + \"?screen_name=\" + username))\n+\t\t\t\t.setHeader(\"Authorization\", getHeader(\"GET\", GET_USER_ID, data))\n+\t\t\t\t.header(\"Content-Type\", \"application\/x-www-form-urlencoded\").build();\n+\n+\t\tHttpResponse<String> response = getHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\n+\t\tif (response.statusCode() == 200) {\n+\t\t\tString responseBody = response.body();\n+\t\t\tString userId = responseBody.substring(responseBody.indexOf(\"id\") + 4, responseBody.indexOf(\"id_str\") - 2); \/\/ FIXME: We can use some JSON third party library in future.\n+\t\t\treturn Long.valueOf(userId);\n+\t\t}\n+\t\treturn Long.valueOf(0);\n+\n@@ -248,7 +273,5 @@\n-\tpublic void addTweeter(Twitter twitter, RequestToken rt, String pin) {\n-\t\ttry {\n-\t\t\tAccessToken accessToken;\n-\t\t\tif (pin.length() > 0) {\n-\t\t\t\taccessToken = twitter.getOAuthAccessToken(rt, pin);\n-\t\t\t} else {\n-\t\t\t\taccessToken = twitter.getOAuthAccessToken();\n+\tpublic static HttpRequest.BodyPublisher ofFormData(Map<String, String> data) {\n+\t\tStringBuilder builder = new StringBuilder();\n+\t\tfor (Map.Entry<String, String> entry : data.entrySet()) {\n+\t\t\tif (builder.length() > 0) {\n+\t\t\t\tbuilder.append(\"&\");\n@@ -256,0 +279,6 @@\n+\t\t\tbuilder.append(entry.getKey());\n+\t\t\tbuilder.append(\"=\");\n+\t\t\tbuilder.append(oAuthHeaderGenerator.encode(entry.getValue()));\n+\t\t}\n+\t\treturn HttpRequest.BodyPublishers.ofString(builder.toString());\n+\t}\n@@ -257,6 +286,21 @@\n-\t\t\tString screenName = accessToken.getScreenName();\n-\t\t\tif (screenName != null && screenName.length() > 0) {\n-\t\t\t\tTweeter tweeter = new Tweeter(accessToken.getScreenName(), accessToken.getToken(),\n-\t\t\t\t\t\taccessToken.getTokenSecret());\n-\t\t\t\tif (!tweeters.contains(tweeter)) {\n-\t\t\t\t\ttweeters.add(tweeter);\n+\tprivate static AccessToken createAccessToken(Tweeter tweeter) {\n+\t\treturn new AccessToken(tweeter.getToken(), tweeter.getTokenSecret(), tweeter.getUsername());\n+\t}\n+\n+\t\/\/ Once the authorization is successful, we will add that tweeter in JMC preference.\n+\tpublic void addTweeter(RequestToken rt, String pin) {\n+\t\tAccessToken accessToken;\n+\t\tif (pin.length() > 0) {\n+\t\t\taccessToken = oauthAuthenticator.authentication(consumerKey, consumerSecret, rt.getToken(), pin); \/\/ Step 3 of 3-legged OAuth Authentication flow\n+\t\t\tif (accessToken != null) {\n+\t\t\t\tString screenName = accessToken.getAccessUserName();\n+\t\t\t\tif (screenName != null && screenName.length() > 0) {\n+\t\t\t\t\tTweeter tweeter = new Tweeter(accessToken.getAccessUserName(), accessToken.getAccessToken(),\n+\t\t\t\t\t\t\taccessToken.getAccessTokenSecret());\n+\t\t\t\t\tif (!tweeters.contains(tweeter)) {\n+\t\t\t\t\t\ttweeters.add(tweeter);\n+\t\t\t\t\t}\n+\t\t\t\t\tstoreAndSavePrefs();\n+\t\t\t\t} else {\n+\t\t\t\t\tDialogToolkit.showError(null, Messages.TriggerActionTwitterInvalidUser_Title,\n+\t\t\t\t\t\t\tMessages.TriggerActionTwitterInvalidUser_ErrorMessage);\n@@ -264,3 +308,0 @@\n-\t\t\t\tstoreAndSavePrefs();\n-\t\t\t} else {\n-\t\t\t\tDialogToolkit.showError(null, \"Invalid User\", \"The authorized user is invalid.\");\n@@ -268,4 +309,0 @@\n-\t\t\tMessageDialog.openInformation(null, \"Twitter Authorization\",\n-\t\t\t\t\t\"Access credentials created successfully for user \" + screenName + \".\");\n-\t\t} catch (TwitterException ex) {\n-\t\t\tDialogToolkit.showException(null, \"Error storing access token\", ex);\n@@ -280,1 +317,1 @@\n-\t\t\tgetLogger().log(Level.WARNING, \"Failed to store to preferences!\", e);\n+\t\t\tgetLogger().log(Level.WARNING, Messages.TriggerActionTwitterPreferenceStorage_Exception, e);\n@@ -298,4 +335,0 @@\n-\tpublic Twitter getTwitter() {\n-\t\treturn twitterFactory.getInstance();\n-\t}\n-\n@@ -306,13 +339,6 @@\n-\tpublic void sendDirectMessage(String from, String to, String message) throws Exception {\n-\t\tTweeter tweeter = getAuthorizedTweeter(from);\n-\t\tif (tweeter != null) {\n-\t\t\tAccessToken at = createAccessToken(tweeter);\n-\t\t\tTwitter twitter = twitterFactory.getInstance();\n-\t\t\ttwitter.setOAuthConsumer(consumerKey, consumerSecret);\n-\t\t\ttwitter.setOAuthAccessToken(at);\n-\t\t\ttwitter.sendDirectMessage(to, message);\n-\t\t} else {\n-\t\t\tthrow new Exception(String.format(\n-\t\t\t\t\t\"Attempted to send direct message from account not defined in the preferences. Please set up the account (%s) in preferences first.\",\n-\t\t\t\t\tfrom));\n-\t\t}\n+\tpublic String getProxyHost() {\n+\t\treturn proxyHost;\n+\t}\n+\n+\tpublic int getProxyPort() {\n+\t\treturn proxyPort;\n@@ -322,1 +348,1 @@\n-\t\ttwitterFactory = createTwitterFactory();\n+\t\tconfigureProxySettings();\n@@ -342,2 +368,2 @@\n-\t\t\tDialogToolkit.showError(null, \"Unauthorized Twitter User\",\n-\t\t\t\t\t\"User \" + username + \" has not been authorized in Preferences\");\n+\t\t\tDialogToolkit.showError(null, Messages.TriggerActionTwitterUnauthorizedUser_Title,\n+\t\t\t\t\tNLS.bind(Messages.TriggerActionTwitterUnauthorizedUser_ErrorMessage, username));\n@@ -347,0 +373,38 @@\n+\n+\tprivate void verifyTweeter(String fromUser) throws Exception {\n+\t\tTweeter tweeter = getAuthorizedTweeter(fromUser);\n+\t\tif (tweeter != null) {\n+\t\t\tAccessToken at = createAccessToken(tweeter);\n+\t\t\toAuthHeaderGenerator = new TwitterOAuthHeaderGenerator(consumerKey, consumerSecret, at.getAccessToken(),\n+\t\t\t\t\tat.getAccessTokenSecret());\n+\t\t} else {\n+\t\t\tthrow new Exception(NLS.bind(Messages.TriggerActionTwitterVerifyTweeter_ErrorMessage, fromUser));\n+\t\t}\n+\t}\n+\n+\tpublic void sendDirectMessage(String from, String to, String message) throws Exception {\n+\t\tverifyTweeter(from);\n+\t\tMap<String, String> requestParams = new HashMap<String, String>();\n+\t\tString json = createJSONObject(getUserId(to), message);\n+\t\tHttpRequest request = HttpRequest.newBuilder().POST(HttpRequest.BodyPublishers.ofString(json))\n+\t\t\t\t.uri(URI.create(SEND_DIRECT_MESSAGE_URL))\n+\t\t\t\t.setHeader(\"Authorization\", getHeader(\"POST\", SEND_DIRECT_MESSAGE_URL, requestParams))\n+\t\t\t\t.header(\"Content-Type\", \"application\/json\").build();\n+\n+\t\tHttpResponse<String> response = getHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\n+\t\tif (response.statusCode() != 200) {\n+\t\t\tJOptionPane.showMessageDialog(null,\n+\t\t\t\t\tNLS.bind(Messages.TriggerActionTwitterSendDirectMessage_ErrorMessage, response.statusCode()));\n+\t\t}\n+\t}\n+\n+\tpublic static String createJSONObject(long recipientId, String text) throws Exception {\n+\t\tString json = \"{\\\"event\\\":{\\\"message_create\\\":{\\\"message_data\\\":{\\\"text\\\":\\\"\" + text\n+\t\t\t\t+ \"\\\"},\\\"target\\\":{\\\"recipient_id\\\":\\\"\" + Long.valueOf(recipientId).toString()\n+\t\t\t\t+ \"\\\"}},\\\"type\\\":\\\"message_create\\\"}}\";\n+\t\treturn json;\n+\t}\n+\n+\tprivate static String getHeader(String callMethod, String url, Map<String, String> requestParams) {\n+\t\treturn oAuthHeaderGenerator.generateHeader(callMethod, url, requestParams);\n+\t}\n","filename":"application\/org.openjdk.jmc.console.twitter\/src\/main\/java\/org\/openjdk\/jmc\/console\/twitter\/TwitterPlugin.java","additions":179,"deletions":115,"binary":false,"changes":294,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,3 +61,0 @@\n-import twitter4j.Twitter;\n-import twitter4j.auth.RequestToken;\n-\n@@ -74,1 +71,0 @@\n-\tprivate Twitter m_twitter;\n@@ -155,1 +151,0 @@\n-\t\tm_twitter = TwitterPlugin.getDefault().getTwitter();\n@@ -234,1 +229,1 @@\n-\t\t\t\tTwitterPlugin.getDefault().addTweeter(m_twitter, m_requestToken, m_pin.getText().trim());\n+\t\t\t\tTwitterPlugin.getDefault().addTweeter(m_requestToken, m_pin.getText().trim());\n@@ -251,1 +246,1 @@\n-\t\t\t\tm_requestToken = TwitterPlugin.getDefault().authorize(m_twitter);\n+\t\t\t\tm_requestToken = TwitterPlugin.getDefault().authorize();\n","filename":"application\/org.openjdk.jmc.console.twitter\/src\/main\/java\/org\/openjdk\/jmc\/console\/twitter\/TwitterPreferencePage.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,0 @@\n-import twitter4j.TwitterException;\n-\n@@ -54,1 +52,1 @@\n-\tpublic void handleNotificationEvent(TriggerEvent event) throws TwitterException {\n+\tpublic void handleNotificationEvent(TriggerEvent event) throws Exception {\n@@ -62,1 +60,1 @@\n-\tprivate void updateStatus(String username, String message) throws TwitterException {\n+\tprivate void updateStatus(String username, String message) throws Exception {\n","filename":"application\/org.openjdk.jmc.console.twitter\/src\/main\/java\/org\/openjdk\/jmc\/console\/twitter\/UpdateStatus.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,6 +66,0 @@\n-   <plugin\n-         id=\"org.twitter4j.core\"\n-         download-size=\"0\"\n-         install-size=\"0\"\n-         version=\"0.0.0\"\n-         unpack=\"false\"\/>\n","filename":"application\/org.openjdk.jmc.feature.twitter\/feature.xml","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,14 @@\n+\tpublic static String TriggerActionTwitterSendUpdateStatus_ErrorMessage;\n+\tpublic static String TriggerActionTwitterSendDirectMessage_ErrorMessage;\n+\tpublic static String TriggerActionTwitterVerifyTweeter_ErrorMessage;\n+\tpublic static String TriggerActionTwitterUnauthorizedUser_Title;\n+\tpublic static String TriggerActionTwitterUnauthorizedUser_ErrorMessage;\n+\tpublic static String TriggerActionTwitterInvalidUser_Title;\n+\tpublic static String TriggerActionTwitterInvalidUser_ErrorMessage;\n+\tpublic static String TriggerActionTwitterAuthorization_Exception;\n+\tpublic static String TriggerActionTwitterAuthentication_Exception;\n+\tpublic static String TriggerActionTwitterRequestToken_Exception;\n+\tpublic static String TriggerActionTwitterURIParsing_Exception;\n+\tpublic static String TriggerActionTwitterEncryption_Exception;\n+\tpublic static String TriggerActionTwitterEncoding_Exception;\n+\tpublic static String TriggerActionTwitterPreferenceStorage_Exception;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/Messages.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,14 @@\n+TriggerActionTwitterSendUpdateStatus_ErrorMessage=An error occurred while updating Twitter status. Please verify your Twitter app settings. (HTTP Error code: {0})\n+TriggerActionTwitterSendDirectMessage_ErrorMessage=An error occurred while sending direct message. Please verify your Twitter app settings. (HTTP Error code: {0})\n+TriggerActionTwitterVerifyTweeter_ErrorMessage=Attempted to send direct message from account not defined in the preferences. Please set up the account {0} in preferences first.\n+TriggerActionTwitterUnauthorizedUser_Title=Unauthorized Twitter User\n+TriggerActionTwitterUnauthorizedUser_ErrorMessage=User {0} has not been authorized in Preferences\n+TriggerActionTwitterInvalidUser_Title=Invalid User\n+TriggerActionTwitterInvalidUser_ErrorMessage=The authorized user is invalid.\n+TriggerActionTwitterAuthorization_Exception=Unable to authorize.\n+TriggerActionTwitterAuthentication_Exception=Unable to authenticate.\n+TriggerActionTwitterRequestToken_Exception=Unable to get request token.\n+TriggerActionTwitterURIParsing_Exception=Failed to parse URI.\n+TriggerActionTwitterEncryption_Exception=Failed to encrypt.\n+TriggerActionTwitterEncoding_Exception=Failed to encode the URL.\n+TriggerActionTwitterPreferenceStorage_Exception=Failed to store to preferences!\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/messages.properties","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -265,181 +265,0 @@\n-%% The following notice is provided with respect to Twitter4J v4.0.7,\n-which may be included with this product.\n-\n-                        Copyright 2007 Yusuke Yamamoto\n- \n-                                 Apache License\n-                           Version 2.0, January 2004\n-                        http:\/\/www.apache.org\/licenses\/\n-\n-   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n-\n-   1. Definitions.\n-\n-      \"License\" shall mean the terms and conditions for use, reproduction,\n-      and distribution as defined by Sections 1 through 9 of this document.\n-\n-      \"Licensor\" shall mean the copyright owner or entity authorized by\n-      the copyright owner that is granting the License.\n-\n-      \"Legal Entity\" shall mean the union of the acting entity and all\n-      other entities that control, are controlled by, or are under common\n-      control with that entity. For the purposes of this definition,\n-      \"control\" means (i) the power, direct or indirect, to cause the\n-      direction or management of such entity, whether by contract or\n-      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n-      outstanding shares, or (iii) beneficial ownership of such entity.\n-\n-      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n-      exercising permissions granted by this License.\n-\n-      \"Source\" form shall mean the preferred form for making modifications,\n-      including but not limited to software source code, documentation\n-      source, and configuration files.\n-\n-      \"Object\" form shall mean any form resulting from mechanical\n-      transformation or translation of a Source form, including but\n-      not limited to compiled object code, generated documentation,\n-      and conversions to other media types.\n-\n-      \"Work\" shall mean the work of authorship, whether in Source or\n-      Object form, made available under the License, as indicated by a\n-      copyright notice that is included in or attached to the work\n-      (an example is provided in the Appendix below).\n-\n-      \"Derivative Works\" shall mean any work, whether in Source or Object\n-      form, that is based on (or derived from) the Work and for which the\n-      editorial revisions, annotations, elaborations, or other modifications\n-      represent, as a whole, an original work of authorship. For the purposes\n-      of this License, Derivative Works shall not include works that remain\n-      separable from, or merely link (or bind by name) to the interfaces of,\n-      the Work and Derivative Works thereof.\n-\n-      \"Contribution\" shall mean any work of authorship, including\n-      the original version of the Work and any modifications or additions\n-      to that Work or Derivative Works thereof, that is intentionally\n-      submitted to Licensor for inclusion in the Work by the copyright owner\n-      or by an individual or Legal Entity authorized to submit on behalf of\n-      the copyright owner. For the purposes of this definition, \"submitted\"\n-      means any form of electronic, verbal, or written communication sent\n-      to the Licensor or its representatives, including but not limited to\n-      communication on electronic mailing lists, source code control systems,\n-      and issue tracking systems that are managed by, or on behalf of, the\n-      Licensor for the purpose of discussing and improving the Work, but\n-      excluding communication that is conspicuously marked or otherwise\n-      designated in writing by the copyright owner as \"Not a Contribution.\"\n-\n-      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n-      on behalf of whom a Contribution has been received by Licensor and\n-      subsequently incorporated within the Work.\n-\n-   2. Grant of Copyright License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      copyright license to reproduce, prepare Derivative Works of,\n-      publicly display, publicly perform, sublicense, and distribute the\n-      Work and such Derivative Works in Source or Object form.\n-\n-   3. Grant of Patent License. Subject to the terms and conditions of\n-      this License, each Contributor hereby grants to You a perpetual,\n-      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n-      (except as stated in this section) patent license to make, have made,\n-      use, offer to sell, sell, import, and otherwise transfer the Work,\n-      where such license applies only to those patent claims licensable\n-      by such Contributor that are necessarily infringed by their\n-      Contribution(s) alone or by combination of their Contribution(s)\n-      with the Work to which such Contribution(s) was submitted. If You\n-      institute patent litigation against any entity (including a\n-      cross-claim or counterclaim in a lawsuit) alleging that the Work\n-      or a Contribution incorporated within the Work constitutes direct\n-      or contributory patent infringement, then any patent licenses\n-      granted to You under this License for that Work shall terminate\n-      as of the date such litigation is filed.\n-\n-   4. Redistribution. You may reproduce and distribute copies of the\n-      Work or Derivative Works thereof in any medium, with or without\n-      modifications, and in Source or Object form, provided that You\n-      meet the following conditions:\n-\n-      (a) You must give any other recipients of the Work or\n-          Derivative Works a copy of this License; and\n-\n-      (b) You must cause any modified files to carry prominent notices\n-          stating that You changed the files; and\n-\n-      (c) You must retain, in the Source form of any Derivative Works\n-          that You distribute, all copyright, patent, trademark, and\n-          attribution notices from the Source form of the Work,\n-          excluding those notices that do not pertain to any part of\n-          the Derivative Works; and\n-\n-      (d) If the Work includes a \"NOTICE\" text file as part of its\n-          distribution, then any Derivative Works that You distribute must\n-          include a readable copy of the attribution notices contained\n-          within such NOTICE file, excluding those notices that do not\n-          pertain to any part of the Derivative Works, in at least one\n-          of the following places: within a NOTICE text file distributed\n-          as part of the Derivative Works; within the Source form or\n-          documentation, if provided along with the Derivative Works; or,\n-          within a display generated by the Derivative Works, if and\n-          wherever such third-party notices normally appear. The contents\n-          of the NOTICE file are for informational purposes only and\n-          do not modify the License. You may add Your own attribution\n-          notices within Derivative Works that You distribute, alongside\n-          or as an addendum to the NOTICE text from the Work, provided\n-          that such additional attribution notices cannot be construed\n-          as modifying the License.\n-\n-      You may add Your own copyright statement to Your modifications and\n-      may provide additional or different license terms and conditions\n-      for use, reproduction, or distribution of Your modifications, or\n-      for any such Derivative Works as a whole, provided Your use,\n-      reproduction, and distribution of the Work otherwise complies with\n-      the conditions stated in this License.\n-\n-   5. Submission of Contributions. Unless You explicitly state otherwise,\n-      any Contribution intentionally submitted for inclusion in the Work\n-      by You to the Licensor shall be under the terms and conditions of\n-      this License, without any additional terms or conditions.\n-      Notwithstanding the above, nothing herein shall supersede or modify\n-      the terms of any separate license agreement you may have executed\n-      with Licensor regarding such Contributions.\n-\n-   6. Trademarks. This License does not grant permission to use the trade\n-      names, trademarks, service marks, or product names of the Licensor,\n-      except as required for reasonable and customary use in describing the\n-      origin of the Work and reproducing the content of the NOTICE file.\n-\n-   7. Disclaimer of Warranty. Unless required by applicable law or\n-      agreed to in writing, Licensor provides the Work (and each\n-      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n-      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-      implied, including, without limitation, any warranties or conditions\n-      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n-      PARTICULAR PURPOSE. You are solely responsible for determining the\n-      appropriateness of using or redistributing the Work and assume any\n-      risks associated with Your exercise of permissions under this License.\n-\n-   8. Limitation of Liability. In no event and under no legal theory,\n-      whether in tort (including negligence), contract, or otherwise,\n-      unless required by applicable law (such as deliberate and grossly\n-      negligent acts) or agreed to in writing, shall any Contributor be\n-      liable to You for damages, including any direct, indirect, special,\n-      incidental, or consequential damages of any character arising as a\n-      result of this License or out of the use or inability to use the\n-      Work (including but not limited to damages for loss of goodwill,\n-      work stoppage, computer failure or malfunction, or any and all\n-      other commercial damages or losses), even if such Contributor\n-      has been advised of the possibility of such damages.\n-\n-   9. Accepting Warranty or Additional Liability. While redistributing\n-      the Work or Derivative Works thereof, You may choose to offer,\n-      and charge a fee for, acceptance of support, warranty, indemnity,\n-      or other liability obligations and\/or rights consistent with this\n-      License. However, in accepting such obligations, You may act only\n-      on Your own behalf and on Your sole responsibility, not on behalf\n-      of any other Contributor, and only if You agree to indemnify,\n-      defend, and hold each Contributor harmless for any liability\n-      incurred by, or claims asserted against, such Contributor by reason\n-      of your accepting any such warranty or additional liability.\n-\n-\n","filename":"license\/THIRDPARTYREADME.txt","additions":0,"deletions":181,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-            <unit id=\"org.twitter4j.core\" version=\"4.0.7\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2020-06\/platform-definition-2020-06.target","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-            <unit id=\"org.twitter4j.core\" version=\"4.0.7\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2020-09\/platform-definition-2020-09.target","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-            <unit id=\"org.twitter4j.core\" version=\"4.0.7\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2020-12\/platform-definition-2020-12.target","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-            <unit id=\"org.twitter4j.core\" version=\"4.0.7\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-03\/platform-definition-2021-03.target","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-            <unit id=\"org.twitter4j.core\" version=\"4.0.7\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-06\/platform-definition-2021-06.target","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-\t\t<twitter4j.core.version>4.0.7<\/twitter4j.core.version>\n@@ -72,3 +71,0 @@\n-\t\t\t\t\t\t\t\t<artifact>\n-\t\t\t\t\t\t\t\t\t<id>org.twitter4j:twitter4j-core:${twitter4j.core.version}<\/id>\n-\t\t\t\t\t\t\t\t<\/artifact>\n","filename":"releng\/third-party\/pom.xml","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}