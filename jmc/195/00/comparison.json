{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n@@ -65,2 +65,4 @@\n-\tprivate static final String dateFormat = \"yyyy-MM-dd \";\n-\tprivate static final String timeFormat = \"HH:mm:ss:SSS\";\n+\tpublic static final String START_TIME_NAME = \"timefilter.startTime.text.name\"; \/\/$NON-NLS-1$\n+\tpublic static final String END_TIME_NAME = \"timefilter.endTime.text.name\"; \/\/$NON-NLS-1$\n+\tpublic static final String dateFormat = \"yyyy-MM-dd \";\n+\tpublic static final String timeFormat = \"HH:mm:ss:SSS\";\n@@ -159,0 +161,2 @@\n+\t\t\ttimeText.setData(\"name\", type == FilterType.START ? START_TIME_NAME : END_TIME_NAME); \/\/$NON-NLS-1$\n+\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/TimeFilter.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat Inc. All rights reserved.\n@@ -36,0 +36,2 @@\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n@@ -37,0 +39,2 @@\n+import java.util.Calendar;\n+import java.util.Date;\n@@ -59,0 +63,1 @@\n+import org.openjdk.jmc.ui.misc.TimeFilter;\n@@ -62,0 +67,1 @@\n+\tprivate static final int TIME_OFFSET = Calendar.SECOND * 7;\n@@ -66,4 +72,0 @@\n-\tprivate static final String START_TIME = \"08:06:19:489\";\n-\tprivate static final String NEW_START_TIME = \"08:06:19:500\";\n-\tprivate static final String INVALID_START_TIME = \"08:06:19:480\";\n-\tprivate static final String INVALID_END_TIME = \"08:07:19:733\";\n@@ -82,0 +84,2 @@\n+\tprivate static MCText startTimeText;\n+\tprivate static MCText endTimeText;\n@@ -84,0 +88,1 @@\n+\tprivate SimpleDateFormat sdf = new SimpleDateFormat(TimeFilter.timeFormat);\n@@ -98,0 +103,2 @@\n+\t\t\tstartTimeText = MCText.getByName(TimeFilter.START_TIME_NAME);\n+\t\t\tendTimeText = MCText.getByName(TimeFilter.END_TIME_NAME);\n@@ -133,1 +140,1 @@\n-\t\tMCText startTimeField = MCText.getByText(START_TIME);\n+\t\tfinal String startTime = startTimeText.getText();\n@@ -138,1 +145,0 @@\n-\t\tAssert.assertEquals(START_TIME, startTimeField.getText());\n@@ -141,1 +147,1 @@\n-\t\tAssert.assertNotEquals(START_TIME, startTimeField.getText());\n+\t\tAssert.assertNotEquals(startTime, startTimeText.getText());\n@@ -145,1 +151,1 @@\n-\t\tAssert.assertEquals(START_TIME, startTimeField.getText());\n+\t\tAssert.assertEquals(startTime, startTimeText.getText());\n@@ -150,1 +156,1 @@\n-\t\tAssert.assertNotEquals(START_TIME, startTimeField.getText());\n+\t\tAssert.assertNotEquals(startTime, startTimeText.getText());\n@@ -153,1 +159,1 @@\n-\t\tAssert.assertEquals(START_TIME, startTimeField.getText());\n+\t\tAssert.assertEquals(startTime, startTimeText.getText());\n@@ -157,2 +163,6 @@\n-\tpublic void testResetButtons() {\n-\t\tMCText StartTimeField = MCText.getByText(START_TIME);\n+\tpublic void testResetButtons() throws ParseException {\n+\t\tfinal String startTime = startTimeText.getText();\n+\t\tDate startDate = sdf.parse(startTime);\n+\t\tstartDate.setTime(startDate.getTime() + TIME_OFFSET);\n+\t\tfinal String newStartTime = sdf.format(new Date(startDate.getTime()));\n+\n@@ -162,2 +172,2 @@\n-\t\tStartTimeField.setText(NEW_START_TIME);\n-\t\tAssert.assertNotEquals(START_TIME, StartTimeField.getText());\n+\t\tstartTimeText.setText(newStartTime);\n+\t\tAssert.assertNotEquals(startTime, startTimeText.getText());\n@@ -166,1 +176,1 @@\n-\t\tAssert.assertEquals(START_TIME, StartTimeField.getText());\n+\t\tAssert.assertEquals(startTime, startTimeText.getText());\n@@ -168,2 +178,2 @@\n-\t\tStartTimeField.setText(NEW_START_TIME);\n-\t\tAssert.assertNotEquals(START_TIME, StartTimeField.getText());\n+\t\tstartTimeText.setText(newStartTime);\n+\t\tAssert.assertNotEquals(startTime, startTimeText.getText());\n@@ -172,1 +182,1 @@\n-\t\tAssert.assertEquals(START_TIME, StartTimeField.getText());\n+\t\tAssert.assertEquals(startTime, startTimeText.getText());\n@@ -176,3 +186,11 @@\n-\tpublic void testTimeFilterInvalid() {\n-\t\tMCText startTimeField = MCText.getByText(START_TIME);\n-\t\tMCText endTimeField = MCText.getByText(START_TIME);\n+\tpublic void testTimeFilterInvalid() throws ParseException {\n+\t\tfinal String startTime = startTimeText.getText();\n+\t\tDate startDate = sdf.parse(startTime);\n+\t\tstartDate.setTime(startDate.getTime() - TIME_OFFSET);\n+\t\tfinal String invalidStartTime = sdf.format(new Date(startDate.getTime()));\n+\n+\t\tfinal String endTime = endTimeText.getText();\n+\t\tDate endDate = sdf.parse(endTime);\n+\t\tendDate.setTime(endDate.getTime() + TIME_OFFSET);\n+\t\tfinal String invalidEndTime = sdf.format(new Date(endDate.getTime()));\n+\n@@ -181,1 +199,1 @@\n-\t\tstartTimeField.setText(INVALID_START_TIME);\n+\t\tstartTimeText.setText(invalidStartTime);\n@@ -188,1 +206,1 @@\n-\t\tAssert.assertEquals(START_TIME, startTimeField.getText());\n+\t\tAssert.assertEquals(startTime, startTimeText.getText());\n@@ -190,1 +208,1 @@\n-\t\tendTimeField.setText(INVALID_END_TIME);\n+\t\tendTimeText.setText(invalidEndTime);\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/uitest\/JfrThreadsPageTest.java","additions":44,"deletions":26,"binary":false,"changes":70,"status":"modified"}]}