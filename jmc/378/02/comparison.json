{"files":[{"patch":"@@ -412,1 +412,0 @@\n-\t\t\tcase CHAR:\n@@ -527,1 +526,1 @@\n-\t\t\t\tObject thread = klass.newInstance();\n+\t\t\t\tObject instance = klass.newInstance();\n@@ -532,1 +531,1 @@\n-\t\t\t\t\t\tf.set(thread, val);\n+\t\t\t\t\t\tf.set(instance, val);\n@@ -535,1 +534,1 @@\n-\t\t\t\treturn thread;\n+\t\t\t\treturn instance;\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/ValueReaders.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;\n+import org.openjdk.jmc.flightrecorder.test.util.PrintoutsToolkit;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Name;\n+import jdk.jfr.Recording;\n+\n+\/**\n+ * Test for making sure events with {@code char} attributes can be parsed.\n+ *\/\n+public class CharAttributeTest {\n+\n+\t@Test\n+\tpublic void shouldParseEventWithCharAttribute() throws IOException, CouldNotLoadRecordingException {\n+\t\tFile recordingFile = new File(\n+\t\t\t\tCharAttributeTest.class.getClassLoader().getResource(\"recordings\/char_attribute.jfr\").getFile());\n+\t\tIItemCollection items = JfrLoaderToolkit.loadEvents(Arrays.asList(recordingFile))\n+\t\t\t\t.apply(ItemFilters.type(\"jmc.CharTestEvent\"));\n+\n+\t\tList<String> eventsAsStrings = PrintoutsToolkit.getEventsAsStrings(items);\n+\t\tAssert.assertEquals(1, eventsAsStrings.size());\n+\t\tAssert.assertTrue(\"Actual events: \" + eventsAsStrings,\n+\t\t\t\teventsAsStrings.get(0).contains(\"<someChar name=\\\"someChar\\\">X<\/someChar>\"));\n+\t}\n+\n+\t\/**\n+\t * Run to create\/updated the test recording, if needed.\n+\t *\/\n+\tpublic static void main(String[] args) throws Exception {\n+\t\ttry (Recording recording = new Recording()) {\n+\n+\t\t\trecording.enable(\"jmc.CharTestEvent\");\n+\t\t\tPath destination = Paths\n+\t\t\t\t\t.get(CharAttributeTest.class.getProtectionDomain().getCodeSource().getLocation().toURI())\n+\t\t\t\t\t.getParent().getParent().resolve(\"src\").resolve(\"test\").resolve(\"resources\").resolve(\"recordings\")\n+\t\t\t\t\t.resolve(\"char_attribute.jfr\");\n+\t\t\trecording.setDestination(destination);\n+\n+\t\t\trecording.start();\n+\n+\t\t\tCharTestEvent event = new CharTestEvent();\n+\t\t\tevent.someChar = 'X';\n+\t\t\tevent.commit();\n+\n+\t\t\trecording.stop();\n+\t\t}\n+\t}\n+\n+\t@Name(\"jmc.CharTestEvent\")\n+\t@Category(\"Testing\")\n+\tpublic static class CharTestEvent extends Event {\n+\n+\t\tpublic char someChar;\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/CharAttributeTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/resources\/recordings\/char_attribute.jfr","binary":true,"status":"added"}]}