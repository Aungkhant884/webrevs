{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ClassLeakingRule.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.concurrent.ConcurrentLinkedQueue;\n@@ -42,0 +43,1 @@\n+import java.util.concurrent.Future;\n@@ -64,0 +66,1 @@\n+\tprivate final ConcurrentLinkedQueue<Object[]> processingQueue = new ConcurrentLinkedQueue<Object[]>();\n@@ -83,0 +86,1 @@\n+\t\tList<Future> futures = new ArrayList<>();\n@@ -101,1 +105,1 @@\n-\t\t\t\t\tdata.add(row);\n+\t\t\t\t\tprocessingQueue.add(row);\n@@ -106,0 +110,1 @@\n+\t\t\tFuture future = null;\n@@ -111,1 +116,1 @@\n-\t\t\t\t\t\texec.submit(new Runnable() {\n+\t\t\t\t\t\tfuture = exec.submit(new Runnable() {\n@@ -126,3 +131,1 @@\n-\t\t\t\t\t\t\t\tsynchronized (data) {\n-\t\t\t\t\t\t\t\t\tdata.add(row);\n-\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tprocessingQueue.add(row);\n@@ -130,0 +133,1 @@\n+\n@@ -131,0 +135,1 @@\n+\t\t\t\t\t\tfutures.add(future);\n@@ -135,1 +140,3 @@\n-\t\t\t\t\t\tif (!exec.awaitTermination(60, TimeUnit.SECONDS)) {\n+\t\t\t\t\t\tif (!exec.awaitTermination(configuredTimeout, TimeUnit.MINUTES)) {\n+\t\t\t\t\t\t\tcheckStatusOfAllTasks(futures);\n+\n@@ -137,1 +144,1 @@\n-\t\t\t\t\t\t\texec.awaitTermination(configuredTimeout, TimeUnit.MINUTES);\n+\t\t\t\t\t\t\t\/\/ Await time for termination is not required as we have already given enough time before force shutdown. \n@@ -146,0 +153,15 @@\n+\t\tdata.addAll(processingQueue);\n+\t}\n+\n+\tprivate void checkStatusOfAllTasks(List<Future> totalAssignedTasks) {\n+\t\tint completedTask = 0;\n+\t\tfor (Future future : totalAssignedTasks) {\n+\t\t\tif (future.isDone())\n+\t\t\t\tcompletedTask++;\n+\t\t}\n+\n+\t\tif (completedTask < totalAssignedTasks.size()) {\n+\t\t\tSystem.out.println(\n+\t\t\t\t\t\"The results may be inaccurate as JMC is unable to process all the class entries to determine \"\n+\t\t\t\t\t\t\t+ \"the class leak results. Please increase the configured timeout in preferences to see the accurate results.  \");\n+\t\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/DefaultIItemResultSet.java","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/ItemResultSetFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}