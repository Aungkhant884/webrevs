{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,0 +104,5 @@\n+\tpublic static final TypedPreference<IQuantity> MAX_TIMEOUT = new TypedPreference<>(\n+\t\t\t\"classLeaking.calculation.timeout\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT),\n+\t\t\tMessages.getString(Messages.ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG), NUMBER,\n+\t\t\tNUMBER_UNITY.quantity(5));\n@@ -105,1 +110,1 @@\n-\t\t\tMAX_NUMBER_OF_CLASSES_TO_REPORT);\n+\t\t\tMAX_NUMBER_OF_CLASSES_TO_REPORT, MAX_TIMEOUT);\n@@ -126,0 +131,1 @@\n+\tpublic static int CONFIGURED_TIMEOUT = 0;\n@@ -150,1 +156,1 @@\n-\n+\t\tCONFIGURED_TIMEOUT = (int) valueProvider.getPreferenceValue(MAX_TIMEOUT).longValue();\n@@ -173,2 +179,4 @@\n-\t\t\tfor (int i = 0; i < classLimit; i++) {\n-\t\t\t\tClassEntry entry = entries.get(i);\n+\n+\t\t\tint totalEntries = entries.size() - 1;\n+\t\t\tfor (int i = 0, j = totalEntries; i < classLimit; i++, j--) {\n+\t\t\t\tClassEntry entry = entries.get(j);\n@@ -179,1 +187,1 @@\n-\t\t\tClassEntry worst = entries.get(0);\n+\t\t\tClassEntry worst = entries.get(totalEntries);\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ClassLeakingRule.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,2 @@\n+\tpublic static final String ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT = \"ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT\"; \/\/$NON-NLS-1$\n+\tpublic static final String ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG = \"ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,3 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n@@ -51,0 +54,1 @@\n+import org.openjdk.jmc.flightrecorder.rules.jdk.general.ClassLeakingRule;\n@@ -69,1 +73,5 @@\n-\t\tcalculateData(items);\n+\t\ttry {\n+\t\t\tcalculateData(items);\n+\t\t} catch (InterruptedException e) {\n+\t\t\tThread.currentThread().interrupt();\n+\t\t}\n@@ -73,1 +81,1 @@\n-\tprivate void calculateData(IItemCollection input) {\n+\tprivate void calculateData(IItemCollection input) throws InterruptedException {\n@@ -75,0 +83,1 @@\n+\t\tfinal IItemCollection newInput = input;\n@@ -99,8 +108,23 @@\n-\t\t\t\tfor (Object o : aggregate) {\n-\t\t\t\t\tIItemCollection rowCollection = input.apply(ItemFilters.equals((IAttribute) query.getGroupBy(), o));\n-\t\t\t\t\tObject[] row = newRow();\n-\t\t\t\t\tint column = 0;\n-\t\t\t\t\tfor (; column < attributes.size(); column++) {\n-\t\t\t\t\t\t\/\/ Optimization - it is too expensive to do aggregation for these. You simply\n-\t\t\t\t\t\t\/\/ get first non-null matching attribute - we're only using this for the group by today.\n-\t\t\t\t\t\trow[column] = getFirstNonNull(rowCollection, attributes.get(column));\n+\t\t\t\tExecutorService exec = Executors.newWorkStealingPool();\n+\t\t\t\ttry {\n+\t\t\t\t\tfor (final Object o : aggregate) {\n+\t\t\t\t\t\texec.submit(new Runnable() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\tIItemCollection rowCollection = newInput\n+\t\t\t\t\t\t\t\t\t\t.apply(ItemFilters.equals((IAttribute) query.getGroupBy(), o));\n+\t\t\t\t\t\t\t\tObject[] row = newRow();\n+\t\t\t\t\t\t\t\tint column = 0;\n+\t\t\t\t\t\t\t\tfor (; column < attributes.size(); column++) {\n+\t\t\t\t\t\t\t\t\t\/\/ Optimization - it is too expensive to do aggregation for these. You simply\n+\t\t\t\t\t\t\t\t\t\/\/ get first non-null matching attribute - we're only using this for the group by today.\n+\t\t\t\t\t\t\t\t\trow[column] = getFirstNonNull(rowCollection, attributes.get(column));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tfor (int j = 0; j < aggregators.size(); j++) {\n+\t\t\t\t\t\t\t\t\trow[column + j] = rowCollection.getAggregate(aggregators.get(j));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tsynchronized (data) {\n+\t\t\t\t\t\t\t\t\tdata.add(row);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n@@ -108,4 +132,3 @@\n-\t\t\t\t\tfor (int j = 0; j < aggregators.size(); j++) {\n-\t\t\t\t\t\trow[column + j] = rowCollection.getAggregate(aggregators.get(j));\n-\t\t\t\t\t}\n-\t\t\t\t\tdata.add(row);\n+\t\t\t\t} finally {\n+\t\t\t\t\texec.shutdown();\n+\t\t\t\t\texec.awaitTermination(ClassLeakingRule.CONFIGURED_TIMEOUT, TimeUnit.MINUTES);\n@@ -113,0 +136,2 @@\n+\t\t\t\tif (Thread.currentThread().isInterrupted())\n+\t\t\t\t\treturn;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/DefaultIItemResultSet.java","additions":40,"deletions":15,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -107,0 +107,2 @@\n+ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT=Calculation Timeout (in minutes)\n+ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG=Maximum amount of time to calculate class leak rule (in minutes).\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2776,3 +2776,3 @@\n-            <severity>OK<\/severity>\n-            <summary>com.oracle.medrec.model.User was loaded -1 time(s) without being unloaded<\/summary>\n-            <explanation>Some classes have been loaded multiple times, and the difference between the number of times a class have been loaded and the number of times it has been unloaded has exceeded the user specified limit. This in itself need not be a problem, but check to see if you expect these classes to be loaded multiple times to make sure that you do not have a class loader leak. The following classes were detected as potential problems: &lt;ul&gt;&lt;li&gt;com.oracle.medrec.model.User (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.service.PatientService (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.service.PhysicianService (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.facade.PatientFacade (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.common.messaging.MessageClient (-1)&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n+            <severity>Information<\/severity>\n+            <summary>java.lang.Object was loaded 258 time(s) without being unloaded<\/summary>\n+            <explanation>Some classes have been loaded multiple times, and the difference between the number of times a class have been loaded and the number of times it has been unloaded has exceeded the user specified limit. This in itself need not be a problem, but check to see if you expect these classes to be loaded multiple times to make sure that you do not have a class loader leak. The following classes were detected as potential problems: &lt;ul&gt;&lt;li&gt;java.lang.Object (258)&lt;\/li&gt;&lt;li&gt;java.lang.String (95)&lt;\/li&gt;&lt;li&gt;java.lang.Class (81)&lt;\/li&gt;&lt;li&gt;java.lang.Integer (52)&lt;\/li&gt;&lt;li&gt;oracle.jrockit.jfr.VMJFR (46)&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}