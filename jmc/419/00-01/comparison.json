{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import static org.openjdk.jmc.common.unit.UnitLookup.MINUTE;\n@@ -104,1 +105,1 @@\n-\tpublic static final TypedPreference<IQuantity> MAX_TIMEOUT = new TypedPreference<>(\n+\tpublic static final TypedPreference<IQuantity> ClassLeakingRule_MAX_TIMEOUT = new TypedPreference<>(\n@@ -107,2 +108,1 @@\n-\t\t\tMessages.getString(Messages.ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG), NUMBER,\n-\t\t\tNUMBER_UNITY.quantity(5));\n+\t\t\tMessages.getString(Messages.ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG), NUMBER, MINUTE.quantity(5));\n@@ -110,1 +110,1 @@\n-\t\t\tMAX_NUMBER_OF_CLASSES_TO_REPORT, MAX_TIMEOUT);\n+\t\t\tMAX_NUMBER_OF_CLASSES_TO_REPORT, ClassLeakingRule_MAX_TIMEOUT);\n@@ -131,1 +131,0 @@\n-\tpublic static int CONFIGURED_TIMEOUT = 0;\n@@ -154,1 +153,2 @@\n-\t\tIItemCollection items, IPreferenceValueProvider valueProvider, IResultValueProvider dependencyResults) {\n+\t\tIItemCollection items, IPreferenceValueProvider valueProvider, IResultValueProvider dependencyResults,\n+\t\tint timeout) {\n@@ -156,1 +156,3 @@\n-\t\tCONFIGURED_TIMEOUT = (int) valueProvider.getPreferenceValue(MAX_TIMEOUT).longValue();\n+\t\tint configuredTimeout = (int) valueProvider.getPreferenceValue(ClassLeakingRule_MAX_TIMEOUT)\n+\t\t\t\t.clampedLongValueIn(UnitLookup.MINUTE);\n+\n@@ -161,1 +163,1 @@\n-\t\tMap<String, ClassEntry> entriesLoad = extractClassEntriesFromQuery(items, queryLoad.build());\n+\t\tMap<String, ClassEntry> entriesLoad = extractClassEntriesFromQuery(items, queryLoad.build(), configuredTimeout);\n@@ -168,1 +170,2 @@\n-\t\tMap<String, ClassEntry> entriesUnload = extractClassEntriesFromQuery(items, queryUnload.build());\n+\t\tMap<String, ClassEntry> entriesUnload = extractClassEntriesFromQuery(items, queryUnload.build(),\n+\t\t\t\tconfiguredTimeout);\n@@ -226,1 +229,2 @@\n-\tprivate Map<String, ClassEntry> extractClassEntriesFromQuery(IItemCollection items, IItemQuery query) {\n+\tprivate Map<String, ClassEntry> extractClassEntriesFromQuery(\n+\t\tIItemCollection items, IItemQuery query, int configuredTimeout) {\n@@ -228,1 +232,1 @@\n-\t\tIItemResultSet resultSet = new ItemResultSetFactory().createResultSet(items, query);\n+\t\tIItemResultSet resultSet = new ItemResultSetFactory().createResultSet(items, query, configuredTimeout);\n@@ -258,1 +262,3 @@\n-\t\t\t\treturn getResult(items, preferenceValueProvider, dependencyResults);\n+\t\t\t\tint timeout = (int) preferenceValueProvider.getPreferenceValue(ClassLeakingRule_MAX_TIMEOUT)\n+\t\t\t\t\t\t.longValue();\n+\t\t\t\treturn getResult(items, preferenceValueProvider, dependencyResults, timeout);\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ClassLeakingRule.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.jdk.general.ClassLeakingRule;\n@@ -66,0 +65,1 @@\n+\tprivate ExecutorService exec;\n@@ -67,1 +67,1 @@\n-\tDefaultIItemResultSet(IItemCollection items, IItemQuery query) {\n+\tDefaultIItemResultSet(IItemCollection items, IItemQuery query, int configuredTimeout) {\n@@ -72,0 +72,1 @@\n+\t\texec = Executors.newWorkStealingPool();\n@@ -74,1 +75,1 @@\n-\t\t\tcalculateData(items);\n+\t\t\tcalculateData(items, configuredTimeout);\n@@ -81,1 +82,1 @@\n-\tprivate void calculateData(IItemCollection input) throws InterruptedException {\n+\tprivate void calculateData(IItemCollection input, int configuredTimeout) throws InterruptedException {\n@@ -108,1 +109,0 @@\n-\t\t\t\tExecutorService exec = Executors.newWorkStealingPool();\n@@ -134,1 +134,9 @@\n-\t\t\t\t\texec.awaitTermination(ClassLeakingRule.CONFIGURED_TIMEOUT, TimeUnit.MINUTES);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tif (!exec.awaitTermination(60, TimeUnit.SECONDS)) {\n+\t\t\t\t\t\t\texec.shutdownNow();\n+\t\t\t\t\t\t\texec.awaitTermination(configuredTimeout, TimeUnit.MINUTES);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} catch (InterruptedException ie) {\n+\t\t\t\t\t\texec.shutdownNow();\n+\t\t\t\t\t\tThread.currentThread().interrupt();\n+\t\t\t\t\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/DefaultIItemResultSet.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,5 @@\n-\t\treturn new DefaultIItemResultSet(items, query);\n+\t\treturn new DefaultIItemResultSet(items, query, 0);\n+\t}\n+\n+\tpublic IItemResultSet createResultSet(IItemCollection items, IItemQuery query, int configuredTimeout) {\n+\t\treturn new DefaultIItemResultSet(items, query, configuredTimeout);\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/ItemResultSetFactory.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG=Maximum amount of time to calculate class leak rule (in minutes).\n+ClassLeakingRule_CONFIG_CALCULATION_TIMEOUT_LONG=Maximum amount of time to calculate Class Leak Rule (in minutes).\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}