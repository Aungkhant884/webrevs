{"files":[{"patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<!-- Convenience: Regarding access rules. It appears that these packages are exported from jolokia standalone. Wondering whether eclipse caps at 36 access rules or something. Setting access rules on that specific plugin dependency does not seem to be persisted to the .classpath file, hence setting access policy globally for all plugin dependencies-->\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\">\n+\t\t<accessrules>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/jolokia\/**\"\/>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/json\/simple\/*\"\/>\n+\t\t<\/accessrules>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"src\" path=\"src\/main\/java\"\/>\n+\t<classpathentry kind=\"output\" path=\"target\/classes\"\/>\n+<\/classpath>\n","filename":"application\/org.openjdk.jmc.jolokia\/.classpath","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -7,3 +7,2 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n-Require-Bundle: org.openjdk.jmc.rjmx;bundle-version=\"9.0.0\",\n- org.eclipse.core.runtime,\n+Bundle-RequiredExecutionEnvironment: JavaSE-17\n+Require-Bundle: org.eclipse.core.runtime,\n@@ -11,1 +10,0 @@\n- org.openjdk.jmc.ui;bundle-version=\"9.0.0\",\n@@ -13,15 +11,5 @@\n- org.jolokia.jvm;bundle-version=\"1.7.2\"\n-Export-Package: org.apache.commons.codec.binary,\n- org.apache.http,\n- org.apache.http.client,\n- org.apache.http.client.methods,\n- org.apache.http.entity,\n- org.apache.http.message,\n- org.jolokia.client,\n- org.jolokia.client.exception,\n- org.jolokia.client.jmxadapter,\n- org.jolokia.client.request,\n- org.jolokia.converter,\n- org.jolokia.util,\n- org.json.simple,\n- org.openjdk.jmc.jolokia,\n+ org.jolokia.jvm;bundle-version=\"1.7.2\",\n+ org.openjdk.jmc.common,\n+ org.openjdk.jmc.rjmx,\n+ org.openjdk.jmc.ui\n+Export-Package:  org.openjdk.jmc.jolokia,\n@@ -29,1 +17,2 @@\n-Import-Package: org.openjdk.jmc.rjmx.descriptorprovider\n+Import-Package: org.jolokia.converter,\n+ org.json.simple\n","filename":"application\/org.openjdk.jmc.jolokia\/META-INF\/MANIFEST.MF","additions":9,"deletions":20,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -46,48 +46,0 @@\n-\t<build>\n-\n-\t\t<plugins>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n-\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n-\t\t\t\t<version>${tycho.version}<\/version>\n-\t\t\t\t<configuration>\n-\t\t\t\t\t<extraClasspathElements>\n-\t\t\t\t\t\t<dependency>\n-\t\t\t\t\t\t\t<groupId>org.jolokia<\/groupId>\n-\t\t\t\t\t\t\t<artifactId>jolokia-jmx-adapter<\/artifactId>\n-\t\t\t\t\t\t\t<version>${jolokia.version}<\/version>\n-\t\t\t\t\t\t<\/dependency>\n-\t\t\t\t\t<\/extraClasspathElements>\n-\t\t\t\t<\/configuration>\n-\t\t\t<\/plugin>\n-\t\t<\/plugins>\n-\t<\/build>\n-\t<dependencies>\n-\t\t<dependency>\n-\t\t\t<groupId>org.jolokia<\/groupId>\n-\t\t\t<artifactId>jolokia-jmx-adapter<\/artifactId>\n-\t\t\t<version>${jolokia.version}<\/version>\n-\t\t<\/dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n-\t\t\t<artifactId>org.openjdk.jmc.rjmx<\/artifactId>\n-\t\t\t<version>8.3.0-SNAPSHOT<\/version>\n-\t\t<\/dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>junit<\/groupId>\n-\t\t\t<artifactId>junit<\/artifactId>\n-\t\t\t<version>4.13.1<\/version>\n-\t\t\t<scope>test<\/scope>\n-\t\t<\/dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.jolokia<\/groupId>\n-\t\t\t<artifactId>jolokia-jvm<\/artifactId>\n-\t\t\t<version>${jolokia.version}<\/version>\n-\t\t\t<exclusions>\n-\t\t\t\t<exclusion>\n-\t\t\t\t\t<groupId>com.sun<\/groupId>\n-\t\t\t\t\t<artifactId>tools<\/artifactId>\n-\t\t\t\t<\/exclusion>\n-\t\t\t<\/exclusions>\n-\t\t<\/dependency>\n-\t<\/dependencies>\n","filename":"application\/org.openjdk.jmc.jolokia\/pom.xml","additions":0,"deletions":48,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -55,4 +55,4 @@\n-import org.openjdk.jmc.ui.common.jvm.Connectable;\n-import org.openjdk.jmc.ui.common.jvm.JVMArch;\n-import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.ui.common.jvm.JVMType;\n+import org.openjdk.jmc.common.jvm.Connectable;\n+import org.openjdk.jmc.common.jvm.JVMArch;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.jvm.JVMType;\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaAgentDescriptor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaDiscoveryListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<!-- Convenience: Regarding access rules. It appears that these packages are exported from jolokia standalone. Wondering whether eclipse caps at 36 access rules or something. Setting access rules on that specific plugin dependency does not seem to be persisted to the .classpath file, hence setting access policy globally for all plugin dependencies-->\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\">\n+\t\t<accessrules>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/jolokia\/**\"\/>\n+\t\t<\/accessrules>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"src\" path=\"src\/main\/java\"\/>\n+\t<classpathentry kind=\"output\" path=\"target\/classes\"\/>\n+<\/classpath>\n","filename":"application\/org.openjdk.jmc.kubernetes\/.classpath","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -8,1 +8,1 @@\n-Require-Bundle: org.openjdk.jmc.jolokia;bundle-version=\"9.0.0\",\n+Require-Bundle: org.openjdk.jmc.jolokia,\n@@ -14,1 +14,1 @@\n- org.openjdk.jmc.rjmx;bundle-version=\"9.0.0\"\n+ org.openjdk.jmc.rjmx\n@@ -17,3 +17,1 @@\n-Import-Package: org.apache.commons.logging;version=\"1.2.0\",\n- org.openjdk.jmc.rjmx,\n- org.openjdk.jmc.rjmx.descriptorprovider\n+Import-Package: org.apache.commons.logging;version=\"1.2.0\"\n","filename":"application\/org.openjdk.jmc.kubernetes\/META-INF\/MANIFEST.MF","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,22 +46,0 @@\n-\t<build>\n-\t\t<plugins>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n-\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n-\t\t\t\t<version>${tycho.version}<\/version>\n-\t\t\t<\/plugin>\n-\t\t<\/plugins>\n-\t<\/build>\n-\t<dependencies>\n-\t\t<dependency>\n-\t\t\t<groupId>org.jolokia<\/groupId>\n-\t\t\t<artifactId>jolokia-kubernetes<\/artifactId>\n-\t\t\t<version>${jolokia.version}<\/version>\n-\t\t<\/dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>junit<\/groupId>\n-\t\t\t<artifactId>junit<\/artifactId>\n-\t\t\t<version>4.13.1<\/version>\n-\t\t\t<scope>test<\/scope>\n-\t\t<\/dependency>\n-\t<\/dependencies>\n","filename":"application\/org.openjdk.jmc.kubernetes\/pom.xml","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -40,4 +40,4 @@\n-import org.openjdk.jmc.ui.common.security.ICredentials;\n-import org.openjdk.jmc.ui.common.security.PersistentCredentials;\n-import org.openjdk.jmc.ui.common.security.SecurityException;\n-import org.openjdk.jmc.ui.common.security.SecurityManagerFactory;\n+import org.openjdk.jmc.common.security.ICredentials;\n+import org.openjdk.jmc.common.security.PersistentCredentials;\n+import org.openjdk.jmc.common.security.SecurityException;\n+import org.openjdk.jmc.common.security.SecurityManagerFactory;\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesPlugin.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.ui.common.security.SecurityException;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.security.SecurityException;\n@@ -98,1 +98,2 @@\n-\tKubernetesDiscoveryListener(KubernetesScanningParameters parameters) {\n+\t\/\/Public constructor in order for test plugin to be able to rig tests in an easier manner\n+\tpublic KubernetesDiscoveryListener(KubernetesScanningParameters parameters) {\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesDiscoveryListener.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesJvmDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+import org.openjdk.jmc.common.security.CredentialsNotAvailableException;\n+import org.openjdk.jmc.common.security.SecurityException;\n@@ -53,2 +55,0 @@\n-import org.openjdk.jmc.ui.common.security.CredentialsNotAvailableException;\n-import org.openjdk.jmc.ui.common.security.SecurityException;\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.openjdk.jmc.ui.common.security.ICredentials;\n-import org.openjdk.jmc.ui.common.security.SecurityException;\n+import org.openjdk.jmc.common.security.ICredentials;\n+import org.openjdk.jmc.common.security.SecurityException;\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/KubernetesScanningParameters.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,323 +0,0 @@\n-package org.openjdk.jmc.kubernetes;\n-\/* Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-* Copyright (c) 2021, Kantega AS. All rights reserved. \n-* \n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* The contents of this file are subject to the terms of either the Universal Permissive License\n-* v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-*\n-* or the following license:\n-*\n-* Redistribution and use in source and binary forms, with or without modification, are permitted\n-* provided that the following conditions are met:\n-* \n-* 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-* and the following disclaimer.\n-* \n-* 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-* conditions and the following disclaimer in the documentation and\/or other materials provided with\n-* the distribution.\n-* \n-* 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-* endorse or promote products derived from this software without specific prior written permission.\n-* \n-* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-*\/\n-\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.time.Duration;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.management.AttributeNotFoundException;\n-import javax.management.InstanceNotFoundException;\n-import javax.management.InvalidAttributeValueException;\n-import javax.management.MBeanException;\n-import javax.management.MBeanServerConnection;\n-import javax.management.MalformedObjectNameException;\n-import javax.management.ObjectName;\n-import javax.management.ReflectionException;\n-import javax.management.remote.JMXConnector;\n-import javax.management.remote.JMXServiceURL;\n-\n-import org.apache.http.client.methods.CloseableHttpResponse;\n-import org.apache.http.client.methods.HttpGet;\n-import org.apache.http.impl.client.HttpClients;\n-import org.awaitility.Awaitility;\n-import org.jolokia.util.Base64Util;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n-import org.openjdk.jmc.common.IDescribable;\n-import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n-import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n-import org.openjdk.jmc.ui.common.jvm.JVMType;\n-import org.openjdk.jmc.ui.common.security.ICredentials;\n-import org.openjdk.jmc.ui.common.security.InMemoryCredentials;\n-import org.openjdk.jmc.ui.common.security.SecurityException;\n-\n-import com.github.tomakehurst.wiremock.client.WireMock;\n-import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n-import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n-import com.github.tomakehurst.wiremock.junit.WireMockRule;\n-\n-import io.fabric8.kubernetes.client.Config;\n-import snippet.INCLUDING;\n-import snippet.OR;\n-\n-\/**\n- * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are functional. In order\n- * to be able to test this in a contained environment, the kubernetes API is mocked with wiremock.\n- *\/\n-@SuppressWarnings(\"restriction\")\n-public class JmcKubernetesTest {\n-\n-\tstatic class TestParameters implements KubernetesScanningParameters {\n-\t\tpublic boolean scanForInstances, scanAllContexts;\n-\t\tpublic String jolokiaPort, jolokiaPath = \"\/jolokia\/\", jolokiaProtocol, requireLabel;\n-\t\tpublic InMemoryCredentials credentials;\n-\n-\t\t@Override\n-\t\tpublic boolean scanForInstances() {\n-\t\t\treturn this.scanForInstances;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean scanAllContexts() {\n-\t\t\treturn this.scanAllContexts;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String jolokiaPort() {\n-\t\t\treturn this.jolokiaPort;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String username() throws SecurityException {\n-\t\t\treturn this.credentials == null ? null : this.credentials.getUsername();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String password() throws SecurityException {\n-\t\t\treturn this.credentials == null ? null : this.credentials.getPassword();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String jolokiaPath() {\n-\t\t\treturn this.jolokiaPath;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String jolokiaProtocol() {\n-\t\t\treturn this.jolokiaProtocol;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String requireLabel() {\n-\t\t\treturn this.requireLabel;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic ICredentials storeCredentials(String username, String password) throws SecurityException {\n-\t\t\treturn this.credentials = new InMemoryCredentials(username, password);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void logError(String message, Throwable error) {\n-\t\t\tSystem.out.println(message);\n-\t\t\terror.printStackTrace(System.out);\n-\t\t}\n-\t}\n-\n-\t@ClassRule\n-\tpublic static WireMockRule wiremock = new WireMockRule(\n-\t\t\tWireMockConfiguration.options().extensions(new ResponseTemplateTransformer(false)).port(0));\n-\n-\tstatic final String jolokiaUrl = \"service:jmx:kubernetes:\/\/\/ns1\/pod-abcdef\/jolokia\";\n-\tstatic final KubernetesScanningParameters disableScanning = new TestParameters();\n-\n-\tprivate static MBeanServerConnection jolokiaConnection;\n-\n-\t@BeforeClass\n-\tpublic static void connect() throws Exception {\n-\t\tCloseableHttpResponse configResponse = HttpClients.createDefault()\n-\t\t\t\t.execute(new HttpGet(wiremock.baseUrl() + \"\/mock-kube-config.yml\"));\n-\t\tAssert.assertEquals(configResponse.getStatusLine().getStatusCode(), 200);\n-\t\tFile configFile = File.createTempFile(\"mock-kube-config\", \".yml\");\n-\t\tconfigResponse.getEntity().writeTo(new FileOutputStream(configFile));\n-\t\t\/\/ we set this so the KubernetesDiscoveryListener will work\n-\t\tSystem.setProperty(Config.KUBERNETES_KUBECONFIG_FILE, configFile.getAbsolutePath());\n-\t\tjolokiaConnection = getKubernetesMBeanConnector();\n-\t}\n-\n-\t@Test\n-\tpublic void testExecuteOperation() throws InstanceNotFoundException, MalformedObjectNameException, MBeanException,\n-\t\t\tReflectionException, MalformedURLException, IOException {\n-\t\tjolokiaConnection.invoke(new ObjectName(\"java.lang:type=Memory\"), \"gc\", new Object[0], new String[0]);\n-\t}\n-\n-\t@Test\n-\tpublic void testReadAttribute()\n-\t\t\tthrows InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException,\n-\t\t\tMalformedObjectNameException, MBeanException, ReflectionException, MalformedURLException, IOException {\n-\t\tMBeanServerConnection jmxConnection = jolokiaConnection;\n-\t\tassertOneSingleAttribute(jmxConnection);\n-\n-\t}\n-\n-\tprivate void assertOneSingleAttribute(MBeanServerConnection jmxConnection) throws MalformedObjectNameException,\n-\t\t\tMBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException, IOException {\n-\t\tObjectName objectName = new ObjectName(\"java.lang:type=Memory\");\n-\t\tString attribute = \"Verbose\";\n-\t\tAssert.assertEquals(false, jmxConnection.getAttribute(objectName, attribute));\n-\t}\n-\n-\t@Before\n-\tpublic void reset() {\n-\t\twiremock.resetAll();\n-\t\twiremock.resetRequests();\n-\t}\n-\n-\tprivate static MBeanServerConnection getKubernetesMBeanConnector() throws IOException, MalformedURLException {\n-\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider().newJMXConnector(new JMXServiceURL(jolokiaUrl),\n-\t\t\t\tCollections.emptyMap());\n-\t\tconnector.connect();\n-\t\tMBeanServerConnection connection = connector.getMBeanServerConnection();\n-\t\treturn connection;\n-\t}\n-\n-\t@Test\n-\tpublic void testDiscoverWithMostlyDefaultSettings() throws Exception {\n-\n-\t\tTestParameters parameters = new TestParameters();\n-\t\t\/\/ Set config so that scanning takes place\n-\t\tparameters.scanForInstances = true;\n-\t\ttestThatJvmIsFound(parameters);\n-\t}\n-\n-\t@Test\n-\tpublic void testDiscoverWithPathFromAnnotation() throws Exception {\n-\t\tTestParameters parameters = new TestParameters();\n-\t\tparameters.scanForInstances = true;\n-\t\tparameters.jolokiaPath = \"${kubernetes\/annotation\/jolokiaPath}\";\n-\t\ttestThatJvmIsFound(parameters);\n-\t}\n-\n-\t@Test\n-\tpublic void testDiscoverWithPortFromAnnotation() throws Exception {\n-\t\tTestParameters parameters = new TestParameters();\n-\t\tparameters.scanForInstances = true;\n-\t\tparameters.jolokiaPort = \"${kubernetes\/annotation\/jolokiaPort}\";\n-\n-\t\ttestThatJvmIsFound(parameters);\n-\t}\n-\n-\t@Test\n-\tpublic void testDiscoverWithBasicAuthFromSecret() throws Exception {\n-\t\tTestParameters parameters = new TestParameters();\n-\t\tparameters.scanForInstances = true;\n-\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-auth\/username}\",\n-\t\t\t\t\"${kubernetes\/secret\/jolokia-auth\/password}\");\n-\n-\t\ttestThatJvmIsFound(parameters);\n-\t\t\/\/ Verify that the expected authorization was picked up\n-\t\tWireMock.verify(WireMock\n-\t\t\t\t.postRequestedFor(\n-\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n-\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n-\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"admin:admin\".getBytes()))));\n-\t}\n-\n-\t@Test\n-\tpublic void testDiscoverWithAuthFromProperties() throws Exception {\n-\n-\t\tTestParameters parameters = new TestParameters();\n-\t\tparameters.scanForInstances = true;\n-\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-properties\/user}\",\n-\t\t\t\t\"${kubernetes\/secret\/jolokia-properties\/password}\");\n-\n-\t\ttestThatJvmIsFound(parameters);\n-\t\t\/\/ Verify that the expected authorization was picked up\n-\t\tWireMock.verify(WireMock\n-\t\t\t\t.postRequestedFor(\n-\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n-\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n-\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"admin:secret\".getBytes()))));\n-\t}\n-\n-\t@Test\n-\tpublic void testDiscoverWithAuthDirectlyFromSettings() throws Exception {\n-\n-\t\tTestParameters parameters = new TestParameters();\n-\t\tparameters.scanForInstances = true;\n-\t\tparameters.credentials = new InMemoryCredentials(\"user\", \"***\");\n-\t\ttestThatJvmIsFound(parameters);\n-\t\t\/\/ Verify that the expected authorization was picked up\n-\t\tWireMock.verify(WireMock\n-\t\t\t\t.postRequestedFor(\n-\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n-\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n-\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"user:***\".getBytes()))));\n-\t}\n-\n-\tprivate ICredentials storeCredentials(String user, String password) throws SecurityException {\n-\t\treturn JmcKubernetesPlugin.getDefault().storeCredentials(user, password);\n-\t}\n-\n-\tprivate void testThatJvmIsFound(TestParameters parameters) throws Exception {\n-\n-\t\tfinal KubernetesDiscoveryListener scanner = new KubernetesDiscoveryListener(parameters);\n-\t\tfinal Map<String, IServerDescriptor> foundVms = new HashMap<>();\n-\t\tIDescriptorListener descriptorListener = new IDescriptorListener() {\n-\t\t\tpublic void onDescriptorDetected(\n-\t\t\t\tIServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n-\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n-\t\t\t\tfoundVms.put(serverDescriptor.getGUID(), serverDescriptor);\n-\t\t\t}\n-\n-\t\t\tpublic void onDescriptorRemoved(String descriptorId) {\n-\t\t\t\tfoundVms.remove(descriptorId);\n-\t\t\t}\n-\t\t};\n-\t\tscanner.addDescriptorListener(descriptorListener);\n-\n-\t\ttry {\n-\t\t\t\/\/ Test that at least one VM (the one running the test was discovered)\n-\n-\t\t\tAwaitility.await().atMost(Duration.ofSeconds(5)).until(() -> !foundVms.isEmpty());\n-\t\t\tIServerDescriptor descriptor = foundVms.get(\"pod-abcdef\");\n-\t\t\tAssert.assertNotNull(descriptor);\n-\t\t\tAssert.assertEquals(\n-\t\t\t\t\t\"[JVMDescriptor] Java command: \/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar --port 9090 PID: 88774\",\n-\t\t\t\t\tdescriptor.getJvmInfo().toString());\n-\t\t\tAssert.assertEquals(JVMType.HOTSPOT, descriptor.getJvmInfo().getJvmType());\n-\t\t\tAssert.assertEquals(\"18.0.1\", descriptor.getJvmInfo().getJavaVersion());\n-\t\t\tAssert.assertTrue(descriptor instanceof IConnectionDescriptor);\n-\t\t\tIConnectionDescriptor connectDescriptor = (IConnectionDescriptor) descriptor;\n-\t\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider()\n-\t\t\t\t\t.newJMXConnector(connectDescriptor.createJMXServiceURL(), connectDescriptor.getEnvironment());\n-\t\t\tconnector.connect();\n-\t\t\tassertOneSingleAttribute(connector.getMBeanServerConnection());\n-\n-\t\t} finally {\n-\t\t\t\/\/ Tell scanner thread to exit\n-\t\t\tscanner.shutdown();\n-\t\t}\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":0,"deletions":323,"binary":false,"changes":323,"status":"deleted"},{"patch":"@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\/test\/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\">\n+\t\t<accessrules>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/jolokia\/**\"\/>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/json\/simple\/*\"\/>\n+\t\t<\/accessrules>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"output\" path=\"target\/test-classes\"\/>\n+<\/classpath>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/.classpath","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -11,1 +11,0 @@\n- org.openjdk.jmc.common.test,\n@@ -14,1 +13,1 @@\n- org.openjdk.jmc.rjmx;bundle-version=\"9.0.0\",\n+ org.openjdk.jmc.rjmx,\n@@ -16,1 +15,1 @@\n- org.awaitility;bundle-version=\"4.0.0\",\n+ org.awaitility,\n@@ -19,1 +18,0 @@\n-Import-Package: org.openjdk.jmc.rjmx.descriptorprovider\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/META-INF\/MANIFEST.MF","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,16 +57,0 @@\n-\t\t<dependency>\n-\t\t\t<groupId>org.jolokia<\/groupId>\n-\t\t\t<artifactId>jolokia-jvm<\/artifactId>\n-\t\t\t<version>${jolokia.version}<\/version>\n-\t\t\t<exclusions>\n-\t\t\t\t<exclusion>\n-\t\t\t\t\t<groupId>com.sun<\/groupId>\n-\t\t\t\t\t<artifactId>tools<\/artifactId>\n-\t\t\t\t<\/exclusion>\n-\t\t\t<\/exclusions>\n-\t\t<\/dependency>\n-\t\t<dependency>\n-\t\t\t<groupId>org.jolokia<\/groupId>\n-\t\t\t<artifactId>jolokia-jmx-adapter<\/artifactId>\n-\t\t\t<version>${jolokia.version}<\/version>\n-\t\t<\/dependency>\n@@ -90,16 +74,0 @@\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n-\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n-\t\t\t\t<version>${tycho.version}<\/version>\n-\t\t\t\t<configuration>\n-\t\t\t\t\t<extraClasspathElements>\n-\t\t\t\t\t\t<dependency>\n-\n-\t\t\t\t\t\t\t<groupId>org.awaitility<\/groupId>\n-\t\t\t\t\t\t\t<artifactId>awaitility<\/artifactId>\n-\t\t\t\t\t\t\t<version>4.0.0<\/version>\n-\t\t\t\t\t\t<\/dependency>\n-\n-\t\t\t\t\t<\/extraClasspathElements>\n-\t\t\t\t<\/configuration>\n-\t\t\t<\/plugin>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/pom.xml","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\/test\/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\">\n+\t\t<accessrules>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/jolokia\/**\"\/>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"org\/json\/simple\/*\"\/>\n+\t\t\t<accessrule kind=\"accessible\" pattern=\"io\/fabric8\/kubernetes\/client\/**\"\/>\n+\t\t<\/accessrules>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"output\" path=\"target\/test-classes\"\/>\n+<\/classpath>\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/.classpath","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -6,0 +6,1 @@\n+Import-Package: io.fabric8.kubernetes.api.model\n@@ -11,1 +12,0 @@\n- org.openjdk.jmc.common.test,\n@@ -16,1 +16,0 @@\n- org.awaitility;bundle-version=\"4.0.0\",\n@@ -19,1 +18,2 @@\n- com.github.tomakehurst.wiremock-standalone;bundle-version=\"2.27.2\"\n+ com.github.tomakehurst.wiremock-standalone;bundle-version=\"2.27.2\",\n+ org.awaitility;bundle-version=\"4.0.0\"\n@@ -21,3 +21,0 @@\n-Import-Package: io.fabric8.kubernetes.client,\n- org.openjdk.jmc.kubernetes,\n- org.openjdk.jmc.rjmx.descriptorprovider\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/META-INF\/MANIFEST.MF","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -57,5 +57,0 @@\n-\t\t<dependency>\n-\t\t\t<groupId>com.github.tomakehurst<\/groupId>\n-\t\t\t<artifactId>wiremock-standalone<\/artifactId>\n-\t\t\t<version>2.27.2<\/version>\n-\t\t<\/dependency>\n@@ -63,22 +58,0 @@\n-\n-\t<build>\n-\t\t<plugins>\n-\t\t\t<plugin>\n-\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n-\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n-\t\t\t\t<version>${tycho.version}<\/version>\n-\t\t\t\t<configuration>\n-\t\t\t\t\t<extraClasspathElements>\n-\t\t\t\t\t\t<dependency>\n-\n-\t\t\t\t\t\t\t<groupId>org.awaitility<\/groupId>\n-\t\t\t\t\t\t\t<artifactId>awaitility<\/artifactId>\n-\t\t\t\t\t\t\t<version>4.0.0<\/version>\n-\t\t\t\t\t\t<\/dependency>\n-\n-\t\t\t\t\t<\/extraClasspathElements>\n-\t\t\t\t<\/configuration>\n-\t\t\t<\/plugin>\n-\n-\t\t<\/plugins>\n-\t<\/build>\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/pom.xml","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -67,0 +67,4 @@\n+import org.openjdk.jmc.common.jvm.JVMType;\n+import org.openjdk.jmc.common.security.ICredentials;\n+import org.openjdk.jmc.common.security.InMemoryCredentials;\n+import org.openjdk.jmc.common.security.SecurityException;\n@@ -71,4 +75,0 @@\n-import org.openjdk.jmc.ui.common.jvm.JVMType;\n-import org.openjdk.jmc.ui.common.security.ICredentials;\n-import org.openjdk.jmc.ui.common.security.InMemoryCredentials;\n-import org.openjdk.jmc.ui.common.security.SecurityException;\n@@ -81,2 +81,0 @@\n-import io.fabric8.kubernetes.client.Config;\n-\n@@ -84,1 +82,1 @@\n- * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are functional. In order\n+ * Test that JMX connections done with JmcKubernetesJmxConnectionProvider are functional. In order\n@@ -163,1 +161,2 @@\n-\t\tSystem.setProperty(Config.KUBERNETES_KUBECONFIG_FILE, configFile.getAbsolutePath());\n+\t\t\/\/Setting taken from: https:\/\/github.com\/fabric8io\/kubernetes-client\/blob\/77a65f7d40f31a5dc37492cd9de3c317c2702fb4\/kubernetes-client-api\/src\/main\/java\/io\/fabric8\/kubernetes\/client\/Config.java#L120, unlikely to change\n+\t\tSystem.setProperty(\"kubeconfig\", configFile.getAbsolutePath());\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"}]}