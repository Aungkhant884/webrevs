{"files":[{"patch":"@@ -191,0 +191,14 @@\n+   <plugin\n+         id=\"org.openjdk.jmc.jolokia\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n+\n+   <plugin\n+         id=\"org.openjdk.jmc.kubernetes\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n+\n","filename":"application\/org.openjdk.jmc.feature.core\/feature.xml","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: %Bundle-Name\n+Bundle-SymbolicName: org.openjdk.jmc.jolokia;singleton:=true\n+Bundle-Version: 8.3.0.qualifier\n+Automatic-Module-Name: org.openjdk.jmc.jolokia\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Require-Bundle: org.openjdk.jmc.rjmx;bundle-version=\"8.3.0\",\n+ org.eclipse.core.runtime,\n+ org.eclipse.ui,\n+ org.openjdk.jmc.ui;bundle-version=\"8.3.0\",\n+ org.jolokia.jmx-adapter.standalone;bundle-version=\"1.7.1\";visibility:=reexport,\n+ org.jolokia.jvm;bundle-version=\"1.7.1\"\n+Export-Package: org.apache.commons.codec.binary,\n+ org.apache.http,\n+ org.apache.http.client,\n+ org.apache.http.client.methods,\n+ org.apache.http.entity,\n+ org.apache.http.message,\n+ org.jolokia.client,\n+ org.jolokia.client.exception,\n+ org.jolokia.client.jmxadapter,\n+ org.jolokia.client.request,\n+ org.jolokia.converter,\n+ org.jolokia.util,\n+ org.json.simple,\n+ org.openjdk.jmc.jolokia,\n+ org.openjdk.jmc.jolokia.preferences\n+Import-Package: org.openjdk.jmc.rjmx.descriptorprovider\n+Bundle-Activator: org.openjdk.jmc.jolokia.JmcJolokiaPlugin\n+Bundle-ActivationPolicy: lazy\n","filename":"application\/org.openjdk.jmc.jolokia\/META-INF\/MANIFEST.MF","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+#Properties file for org.openjdk.jmc.jolokia\n+page.name = Jolokia\n+Bundle-Name = Jolokia JMC Connection\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.jolokia\/OSGI-INF\/l10n\/bundle.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+#\n+#  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2021, Kantega AS. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+source.. = src\/main\/java\/\n+output.. = target\/classes\/\n+bin.includes = META-INF\/,\\\n+               OSGI-INF\/,\\\n+               .,\\\n+               plugin.xml,\\\n+               OSGI-INF\/l10n\/bundle.properties\n","filename":"application\/org.openjdk.jmc.jolokia\/build.properties","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<?eclipse version=\"3.4\"?>\n+<plugin>\n+   <extension\n+         point=\"org.openjdk.jmc.rjmx.descriptorProvider\">\n+      <provider\n+            class=\"org.openjdk.jmc.jolokia.JolokiaDiscoveryListener\">\n+      <\/provider>\n+   <\/extension>\n+      <extension\n+         point=\"org.openjdk.jmc.rjmx.jmxProtocols\">\n+      <client\n+            class=\"org.openjdk.jmc.jolokia.JmcJolokiaJmxConnectionProvider\" protocol=\"jolokia\">\n+            <sysproperty name=\"running.in.jmc\" include=\"true\" \/>\n+      <\/client>\n+   <\/extension>\n+      <extension\n+            point=\"org.eclipse.ui.preferencePages\">\n+         <page\n+               category=\"org.openjdk.jmc.browser.preferences.BrowserPreferencePage\"\n+               class=\"org.openjdk.jmc.jolokia.preferences.JolokiaPreferencePage\"\n+               id=\"org.openjdk.jmc.jolokia.preferences.JolokiaPreferencePage\"\n+               name=\"%page.name\">\n+         <\/page>\n+      <\/extension>\n+      <extension\n+            point=\"org.eclipse.core.runtime.preferences\">\n+         <initializer\n+               class=\"org.openjdk.jmc.jolokia.preferences.PreferenceInitializer\">\n+         <\/initializer>\n+      <\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.jolokia\/plugin.xml","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.jolokia<\/artifactId>\n+\t<packaging>eclipse-plugin<\/packaging>\n+\t<build>\n+\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n+\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n+\t\t\t\t<version>${tycho.version}<\/version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<extraClasspathElements>\n+\t\t\t\t\t\t<dependency>\n+\t\t\t\t\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t\t\t\t\t<artifactId>jolokia-jmx-adapter<\/artifactId>\n+\t\t\t\t\t\t\t<version>${jolokia.version}<\/version>\n+\t\t\t\t\t\t<\/dependency>\n+\t\t\t\t\t<\/extraClasspathElements>\n+\t\t\t\t<\/configuration>\n+\t\t\t<\/plugin>\n+\t\t<\/plugins>\n+\t<\/build>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t<artifactId>jolokia-jmx-adapter<\/artifactId>\n+\t\t\t<version>${jolokia.version}<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>org.openjdk.jmc.rjmx<\/artifactId>\n+\t\t\t<version>8.3.0-SNAPSHOT<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>junit<\/groupId>\n+\t\t\t<artifactId>junit<\/artifactId>\n+\t\t\t<version>4.13.1<\/version>\n+\t\t\t<scope>test<\/scope>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t<artifactId>jolokia-jvm<\/artifactId>\n+\t\t\t<version>${jolokia.version}<\/version>\n+\t\t\t<exclusions>\n+\t\t\t\t<exclusion>\n+\t\t\t\t\t<groupId>com.sun<\/groupId>\n+\t\t\t\t\t<artifactId>tools<\/artifactId>\n+\t\t\t\t<\/exclusion>\n+\t\t\t<\/exclusions>\n+\t\t<\/dependency>\n+\t<\/dependencies>\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t<\/properties>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.jolokia\/pom.xml","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.openjdk.jmc.rjmx.descriptorprovider.AbstractDescriptorProvider;\n+import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n+\n+\/**\n+ * \n+ * The {@code AbstractCachedDescriptorProvider} keeps a list of identified JVMs that can be refreshed in the background by some means of\n+ * discovering JVMs. \n+ * Listeners will be notified of any changes.\n+ *\/\n+@SuppressWarnings(\"restriction\")\n+public abstract class AbstractCachedDescriptorProvider extends AbstractDescriptorProvider {\n+\n+\tprivate static final long LOCAL_REFRESH_INTERVAL = 20000;\n+\tprivate Scanner scanner;\n+\tprivate Thread scannerThread;\n+\t\/**\n+\t * Map<UUID, IServerDescriptor>\n+\t *\/\n+\tprivate final Map<String, ServerConnectionDescriptor> knownDescriptors = new HashMap<>();\n+\n+\t\/**\n+\t * This is where we periodically scan and report deltas to the listeners.\n+\t *\/\n+\tprivate class Scanner implements Runnable {\n+\t\tboolean isRunning;\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tisRunning = true;\n+\t\t\twhile (isRunning) {\n+\t\t\t\ttry {\n+\t\t\t\t\tscan();\n+\t\t\t\t\tThread.sleep(LOCAL_REFRESH_INTERVAL);\n+\t\t\t\t} catch (InterruptedException ignore) {\n+\t\t\t\t\t\/\/ Don't mind being interrupted.\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/**\n+\t\t * Marks this scanner as terminated.\n+\t\t *\/\n+\t\tpublic void shutdown() {\n+\t\t\tisRunning = false;\n+\t\t}\n+\n+\t\tprotected void scan() {\n+\t\t\tMap<String, ServerConnectionDescriptor> newOnes = discoverJvms();\n+\n+\t\t\tsynchronized (knownDescriptors) {\n+\t\t\t\t\/\/ Remove stale ones...\n+\t\t\t\tfor (Iterator<Entry<String, ServerConnectionDescriptor>> entryIterator = knownDescriptors.entrySet()\n+\t\t\t\t\t\t.iterator(); entryIterator.hasNext();) {\n+\t\t\t\t\tEntry<String, ServerConnectionDescriptor> entry = entryIterator.next();\n+\t\t\t\t\tif (newOnes.containsKey(entry.getKey())) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tentryIterator.remove();\n+\t\t\t\t\tonDescriptorRemoved(entry.getKey());\n+\t\t\t\t}\n+\n+\t\t\t\t\/\/ Add new ones...\n+\t\t\t\tfor (Entry<String, ServerConnectionDescriptor> entry : newOnes.entrySet()) {\n+\t\t\t\t\tif (knownDescriptors.containsKey(entry.getKey())) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tonDescriptorDetected(entry.getValue(), entry.getValue().getPath(), entry.getValue().serviceUrl(),\n+\t\t\t\t\t\t\tentry.getValue());\n+\t\t\t\t}\n+\t\t\t\tknownDescriptors.clear();\n+\t\t\t\tknownDescriptors.putAll(newOnes);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Sets up the thread.\n+\t *\/\n+\tprivate void initialize() {\n+\n+\t\tscanner = new Scanner();\n+\t\tscannerThread = new Thread(scanner, getName()); \/\/ $NON-NLS-1$\n+\t\tscannerThread.start();\n+\t}\n+\n+\tprotected abstract boolean isEnabled();\n+\n+\tprotected abstract Map<String, ServerConnectionDescriptor> discoverJvms();\n+\n+\t@Override\n+\tpublic void addDescriptorListener(IDescriptorListener l) {\n+\t\tsynchronized (m_descriptorListeners) {\n+\t\t\tif (m_descriptorListeners.size() == 0) {\n+\t\t\t\tsuper.addDescriptorListener(l);\n+\t\t\t\tinitialize();\n+\t\t\t} else {\n+\t\t\t\tsuper.addDescriptorListener(l);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void removeDescriptorListener(IDescriptorListener l) {\n+\t\tsynchronized (m_descriptorListeners) {\n+\t\t\tsuper.removeDescriptorListener(l);\n+\t\t\tif (m_descriptorListeners.size() == 0 && scanner != null) {\n+\t\t\t\tscanner.shutdown();\n+\t\t\t\tscannerThread.interrupt();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Shuts down the scanner thread.\n+\t *\/\n+\tpublic void shutdown() {\n+\t\tscanner.shutdown();\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/AbstractCachedDescriptorProvider.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -0,0 +1,209 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.util.LinkedList;\n+import java.util.Optional;\n+\n+import javax.management.AttributeNotFoundException;\n+import javax.management.Descriptor;\n+import javax.management.ImmutableDescriptor;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanOperationInfo;\n+import javax.management.MBeanParameterInfo;\n+import javax.management.ObjectName;\n+import javax.management.modelmbean.DescriptorSupport;\n+import javax.management.openmbean.TabularData;\n+\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.jolokia.converter.Converters;\n+import org.jolokia.converter.json.JsonConvertOptions;\n+\n+\/**\n+ * Make JMC specific adjustments to Jolokia JMX connection. \n+ * May consider to use the decorator pattern if differences are big,\n+ * but for now subclass\n+ *\/\n+public class JmcJolokiaJmxConnection extends RemoteJmxAdapter {\n+\n+\tprivate static final String UNKNOWN = \"Unknown\"; \/\/$NON-NLS-1$\n+\tprivate static final String DIAGNOSTIC_OPTIONS = \"com.sun.management:type=DiagnosticCommand\"; \/\/$NON-NLS-1$\n+\tprivate static final String PREFIX = \"dcmd.\"; \/\/$NON-NLS-1$\n+\tprivate static final String IMPACT = PREFIX + \"vmImpact\"; \/\/$NON-NLS-1$\n+\tprivate static final String NAME = PREFIX + \"name\"; \/\/$NON-NLS-1$\n+\tprivate static final String DESCRIPTION = PREFIX + \"description\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENTS = PREFIX + \"arguments\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_NAME = PREFIX + \"arg.name\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_DESCRIPTION = PREFIX + \"arg.description\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_MANDATORY = PREFIX + \"arg.isMandatory\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_TYPE = PREFIX + \"arg.type\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_OPTION = PREFIX + \"arg.isOption\"; \/\/$NON-NLS-1$\n+\tprivate static final String ARGUMENT_MULITPLE = PREFIX + \"arg.isMultiple\"; \/\/$NON-NLS-1$\n+\n+\tpublic JmcJolokiaJmxConnection(J4pClient client) throws IOException {\n+\t\tsuper(client);\n+\t}\n+\n+\t@Override\n+\tpublic MBeanInfo getMBeanInfo(ObjectName name) throws InstanceNotFoundException, IOException {\n+\t\tMBeanInfo mBeanInfo = super.getMBeanInfo(name);\n+\t\t\/\/ the diagnostic options tab and memory relies on descriptor info in MBeanInfo,\n+\t\t\/\/ modify descriptors the first time\n+\t\tif (DIAGNOSTIC_OPTIONS.equals(name.getCanonicalName())\n+\t\t\t\t&& mBeanInfo.getOperations()[0].getDescriptor() == ImmutableDescriptor.EMPTY_DESCRIPTOR) {\n+\n+\t\t\tMBeanOperationInfo[] modifiedOperations = new MBeanOperationInfo[mBeanInfo.getOperations().length];\n+\n+\t\t\tfor (int i = 0; i < mBeanInfo.getOperations().length; i++) {\n+\t\t\t\tmodifiedOperations[i] = stealOrBuildOperationInfo(mBeanInfo.getOperations()[i], checkForLocalOperationInfo(name));\n+\t\t\t}\n+\t\t\t\/\/create a copy with modified operations in place of the original MBeanInfo in the cache\n+\t\t\tfinal MBeanInfo modifiedMBeanInfo = new MBeanInfo(mBeanInfo.getClassName(), mBeanInfo.getDescription(),\n+\t\t\t\t\tmBeanInfo.getAttributes(), mBeanInfo.getConstructors(), modifiedOperations,\n+\t\t\t\t\tmBeanInfo.getNotifications());\n+\t\t\tthis.mbeanInfoCache.put(name, modifiedMBeanInfo);\n+\t\t\treturn modifiedMBeanInfo;\n+\t\t}\n+\t\treturn mBeanInfo;\n+\t}\n+\n+\tprivate Optional<MBeanInfo> checkForLocalOperationInfo(ObjectName name) {\n+\t\tMBeanInfo localInfo;\n+\t\ttry {\n+\t\t\tlocalInfo = ManagementFactory.getPlatformMBeanServer().getMBeanInfo(name);\n+\t\t} catch (Exception ignore) {\n+\t\t\tlocalInfo = null;\n+\t\t}\n+\t\treturn Optional.ofNullable(localInfo);\n+\t}\n+\n+\t@Override\n+\tpublic Object invoke(ObjectName name, String operationName, Object[] params, String[] signature)\n+\t\t\tthrows InstanceNotFoundException, MBeanException, IOException {\n+\t\tfor (int i = 0; i < params.length; i++) {\n+\t\t\tObject object = params[i];\n+\t\t\tif (object instanceof TabularData) {\n+\t\t\t\ttry {\n+\t\t\t\t\tparams[i] = new Converters().getToJsonConverter().convertToJson(object, new LinkedList<String>(),\n+\t\t\t\t\t\t\tJsonConvertOptions.DEFAULT);\n+\t\t\t\t} catch (AttributeNotFoundException ignore) {\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\t\treturn super.invoke(name, operationName, params, signature);\n+\t}\n+\n+\t\/**\n+\t * Build MBeanOperationInfo by taking information from the corresponding \n+\t * MBean in the local JVM for a more precise signature. \n+\t * If it is not available locally, attempt to construct it from the metadata from Jolokia.\n+\t * \n+\t * @param original MBeanInfo from Jolokia list.\n+\t * @param localInfo\n+\t *            MBeanInfo from this JVM to use for getting descriptor.\n+\t * @return Descriptor\n+\t *\/\n+\tprivate MBeanOperationInfo stealOrBuildOperationInfo(MBeanOperationInfo original, Optional<MBeanInfo> localInfo) {\t\t\t\n+\t\treturn localInfo\n+\t\t\t\t.map(info -> checkForMatchingLocalOperation(original, info))\/\/ first attempt to get descriptor from local copy\n+\t\t\t\t.orElseGet(()->reverseEngineerOperationInfo(original));\/\/ if not, reverse engineer descriptor from operation info\n+\t}\n+\n+\tprivate MBeanOperationInfo checkForMatchingLocalOperation(MBeanOperationInfo original, MBeanInfo info) {\n+\t\tfor (MBeanOperationInfo localOperation : info.getOperations()) {\n+\t\t\tif (localOperation.getName().equals(original.getName())) {\n+\t\t\t\tif (localOperation.getSignature().length == original.getSignature().length) {\n+\t\t\t\t\tfor (int i = 0; i < original.getSignature().length; i++) {\n+\t\t\t\t\t\tMBeanParameterInfo param = original.getSignature()[i];\n+\t\t\t\t\t\tif (!param.getType().equals(localOperation.getSignature()[i].getType())) {\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t} else if (i == original.getSignature().length - 1) {\n+\t\t\t\t\t\t\t\/\/ whole signature matches, use as replacement\n+\t\t\t\t\t\t\treturn localOperation;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate MBeanOperationInfo reverseEngineerOperationInfo(MBeanOperationInfo original) {\n+\t\tDescriptorSupport result = new DescriptorSupport();\n+\t\tresult.setField(NAME, original.getName());\n+\t\tresult.setField(DESCRIPTION, original.getDescription());\n+\t\tresult.setField(IMPACT, UNKNOWN);\n+\t\tresult.setField(ARGUMENTS, buildArguments(original.getSignature()));\n+\t\treturn new MBeanOperationInfo(original.getName(), original.getDescription(), original.getSignature(),\n+\t\t\t\toriginal.getReturnType(), MBeanOperationInfo.UNKNOWN, result);\n+\t}\n+\n+\tprivate Descriptor buildArguments(MBeanParameterInfo[] signature) {\n+\t\tDescriptorSupport parameters = new DescriptorSupport();\n+\t\tfor (MBeanParameterInfo parameter : signature) {\n+\t\t\tparameters.setField(parameter.getName(), buildArgument(parameter));\n+\t\t}\n+\t\treturn parameters;\n+\t}\n+\n+\tprivate Descriptor buildArgument(MBeanParameterInfo parameter) {\n+\t\tDescriptorSupport result = new DescriptorSupport();\n+\t\tresult.setField(ARGUMENT_NAME, parameter.getName());\n+\t\tboolean isMultiple = parameter.getType().startsWith(\"[\"); \/\/$NON-NLS-1$\n+\t\tresult.setField(ARGUMENT_MULITPLE, String.valueOf(isMultiple));\n+\t\tString type = parameter.getType();\n+\t\tif (isMultiple) {\n+\t\t\tif (type.startsWith(\"[L\")) { \/\/$NON-NLS-1$\n+\t\t\t\ttype = type.substring(2);\n+\t\t\t} else {\n+\t\t\t\ttype = type.substring(1);\n+\t\t\t}\n+\n+\t\t}\n+\t\t\/\/ probably more reverse mapping of types should be done here, but we hope it is\n+\t\t\/\/ sufficient\n+\t\tresult.setField(ARGUMENT_TYPE, type);\n+\t\tresult.setField(ARGUMENT_DESCRIPTION, parameter.getDescription());\n+\t\tresult.setField(ARGUMENT_MANDATORY, \"false\"); \/\/$NON-NLS-1$\n+\t\tresult.setField(ARGUMENT_OPTION, \"false\"); \/\/$NON-NLS-1$\n+\t\treturn result;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnection.java","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorProvider;\n+import javax.management.remote.JMXServiceURL;\n+\n+public class JmcJolokiaJmxConnectionProvider implements JMXConnectorProvider {\n+\t@Override\n+\tpublic JMXConnector newJMXConnector(JMXServiceURL serviceURL, Map<String, ?> environment) throws IOException {\n+\t\tif (!\"jolokia\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(\"I only serve Jolokia connections\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn new JmcJolokiaJmxConnector(serviceURL, environment);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnectionProvider.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.client.J4pClientBuilder;\n+import org.jolokia.client.jmxadapter.JolokiaJmxConnector;\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+\n+public class JmcJolokiaJmxConnector extends JolokiaJmxConnector {\n+\n+\tpublic JmcJolokiaJmxConnector(JMXServiceURL serviceURL, Map<String, ?> environment) {\n+\t\tsuper(serviceURL, environment);\n+\t}\n+\n+\t@Override\n+\tprotected RemoteJmxAdapter instantiateAdapter(J4pClientBuilder clientBuilder, Map<String, Object> mergedEnv)\n+\t\t\tthrows IOException {\n+\t\treturn new JmcJolokiaJmxConnection(clientBuilder.build());\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnector.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import org.openjdk.jmc.ui.MCAbstractUIPlugin;\n+\n+public class JmcJolokiaPlugin extends MCAbstractUIPlugin {\n+\n+\tpublic final static String PLUGIN_ID = \"org.openjdk.jmc.jolokia\"; \/\/$NON-NLS-1$\n+\tprivate static JmcJolokiaPlugin plugin;\n+\n+\tpublic JmcJolokiaPlugin() {\n+\t\tsuper(PLUGIN_ID);\n+\t\tplugin = this;\n+\t}\n+\n+\tpublic static JmcJolokiaPlugin getDefault() {\n+\t\treturn plugin;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaPlugin.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import javax.management.Attribute;\n+import javax.management.AttributeList;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.openmbean.CompositeDataSupport;\n+import javax.management.openmbean.TabularDataSupport;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.json.simple.JSONObject;\n+import org.openjdk.jmc.ui.common.jvm.Connectable;\n+import org.openjdk.jmc.ui.common.jvm.JVMArch;\n+import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.ui.common.jvm.JVMType;\n+\/**\n+ * Provide data about JVMs accessed over Jolokia for the JVM browser\n+ *\/\n+public class JolokiaAgentDescriptor implements ServerConnectionDescriptor {\n+\n+\tpublic static final JVMDescriptor NULL_DESCRIPTOR = new JVMDescriptor(null, null, null, null, null, null, null,\n+\t\t\tnull, false, Connectable.UNKNOWN);\n+\tprivate final JMXServiceURL serviceUrl;\n+\tprivate final JSONObject agentData;\n+\tprivate final JVMDescriptor jvmDescriptor;\n+\n+\tpublic JolokiaAgentDescriptor(JSONObject agentData, JVMDescriptor jvmDescriptor)\n+\t\t\tthrows URISyntaxException, MalformedURLException {\n+\t\tsuper();\n+\t\tURI uri = new URI((String) agentData.get(\"url\")); \/\/$NON-NLS-1$\n+\t\tthis.serviceUrl = new JMXServiceURL(\n+\t\t\t\tString.format(\"service:jmx:jolokia:\/\/%s:%s%s\", uri.getHost(), uri.getPort(), uri.getPath())); \/\/$NON-NLS-1$\n+\t\tthis.agentData = agentData;\n+\t\tthis.jvmDescriptor = jvmDescriptor;\n+\t}\n+\n+\tJMXServiceURL getServiceUrl() {\n+\t\treturn serviceUrl;\n+\t}\n+\n+\t@Override\n+\tpublic String getGUID() {\n+\t\treturn String.valueOf(agentData.get(\"agent_id\")); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayName() {\n+\t\treturn String.valueOf(agentData.get(\"agent_id\")); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic JVMDescriptor getJvmInfo() {\n+\t\treturn this.jvmDescriptor;\n+\t}\n+\n+\t\/**\n+\t * Best effort to extract JVM information from a connection if everything works. \n+\t * Can be adjusted to support different flavors of JVM.\n+\t *\/\n+\tpublic static JVMDescriptor attemptToGetJvmInfo(RemoteJmxAdapter adapter) {\n+\n+\t\ttry {\n+\t\t\tAttributeList attributes = adapter.getAttributes(new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME),\n+\t\t\t\t\tnew String[] {\"Pid\", \"Name\", \"InputArguments\", \"SystemProperties\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$ \/\/$NON-NLS-4$\n+\t\t\tInteger pid = null;\n+\t\t\tString arguments = null, javaCommand = null, javaVersion = null, vmName = null, vmVendor = null;\n+\t\t\tboolean isDebug = false;\n+\t\t\tJVMType type = JVMType.UNKNOWN;\n+\t\t\tJVMArch arch = JVMArch.UNKNOWN;\n+\t\t\tfor (Attribute attribute : attributes.asList()) {\n+\t\t\t\t\/\/ newer JVM have pid as separate attribute, older have to parse from name\n+\t\t\t\tif (attribute.getName().equalsIgnoreCase(\"Pid\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tpid = Integer.valueOf(String.valueOf(attribute.getValue()));\n+\t\t\t\t\t} catch (NumberFormatException ignore) {\n+\t\t\t\t\t}\n+\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"Name\") && pid == null) { \/\/$NON-NLS-1$\n+\t\t\t\t\tString pidAndHost = String.valueOf(attribute.getValue());\n+\t\t\t\t\tint separator = pidAndHost.indexOf('@');\n+\t\t\t\t\tif (separator > 0) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpid = Integer.valueOf(pidAndHost.substring(0, separator));\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"InputArguments\")) { \/\/$NON-NLS-1$\n+\n+\t\t\t\t\tif (attribute.getValue() instanceof String[]) {\n+\t\t\t\t\t\targuments = Arrays.toString((String[]) attribute.getValue());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\targuments = String.valueOf(attribute.getValue());\n+\t\t\t\t\t}\n+\t\t\t\t\tif (arguments.contains(\"-agentlib:jdwp\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\tisDebug = true;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"SystemProperties\") \/\/$NON-NLS-1$\n+\t\t\t\t\t\t&& attribute.getValue() instanceof TabularDataSupport) {\n+\t\t\t\t\tTabularDataSupport systemProperties = (TabularDataSupport) attribute.getValue();\n+\n+\t\t\t\t\t\/\/ quite clumsy: iterate over properties as we need to use the exact key, which is non trivial\n+\t\t\t\t\t\/\/ to reproduce\n+\t\t\t\t\tfor (Object entry : systemProperties.values()) {\n+\t\t\t\t\t\tString key = ((CompositeDataSupport) entry).get(\"key\").toString(); \/\/$NON-NLS-1$\n+\t\t\t\t\t\tString value = ((CompositeDataSupport) entry).get(\"value\").toString(); \/\/$NON-NLS-1$\n+\t\t\t\t\t\tif (key.equalsIgnoreCase(\"sun.management.compiler\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tif (value.toLowerCase().contains(\"hotspot\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\ttype = JVMType.HOTSPOT;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"sun.arch.data.model\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tString archIndicator = value;\n+\t\t\t\t\t\t\tif (archIndicator.contains(\"64\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\tarch = JVMArch.BIT64;\n+\t\t\t\t\t\t\t} else if (archIndicator.contains(\"32\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\tarch = JVMArch.BIT32;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"sun.java.command\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tjavaCommand = value;\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.version\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tjavaVersion = value;\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.vm.name\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tvmName = value;\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.vm.vendor\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tvmVendor = value;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t\treturn new JVMDescriptor(javaVersion, type, arch, javaCommand, arguments, vmName, vmVendor, pid, isDebug,\n+\t\t\t\t\tConnectable.UNKNOWN);\n+\n+\t\t} catch (RuntimeException | IOException | InstanceNotFoundException | MalformedObjectNameException ignore) {\n+\t\t\treturn NULL_DESCRIPTOR;\n+\t\t}\n+\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL createJMXServiceURL() throws IOException {\n+\t\treturn serviceUrl;\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, Object> getEnvironment() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic String getPath() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL serviceUrl() {\n+\t\treturn this.serviceUrl;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaAgentDescriptor.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.jolokia.discovery.JolokiaDiscovery;\n+import org.jolokia.util.JulLogHandler;\n+import org.json.simple.JSONObject;\n+import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.jolokia.preferences.PreferenceConstants;\n+\n+public class JolokiaDiscoveryListener extends AbstractCachedDescriptorProvider implements PreferenceConstants {\n+\n+\t@Override\n+\tprotected Map<String, ServerConnectionDescriptor> discoverJvms() {\n+\t\tMap<String, ServerConnectionDescriptor> found = new HashMap<>();\n+\t\tif (!JmcJolokiaPlugin.getDefault().getPreferenceStore().getBoolean(P_SCAN)) {\n+\t\t\treturn found;\n+\t\t}\n+\t\ttry {\n+\t\t\tfor (Object object : new JolokiaDiscovery(\"jmc\", new JulLogHandler()).lookupAgents()) { \/\/$NON-NLS-1$\n+\t\t\t\ttry {\n+\n+\t\t\t\t\tJSONObject response = (JSONObject) object;\n+\t\t\t\t\tJVMDescriptor jvmInfo;\n+\t\t\t\t\ttry {\/\/ if it is connectable, see if we can get info from connection\n+\t\t\t\t\t\tjvmInfo = JolokiaAgentDescriptor\n+\t\t\t\t\t\t\t\t.attemptToGetJvmInfo(new RemoteJmxAdapter(String.valueOf(response.get(\"url\")))); \/\/$NON-NLS-1$\n+\t\t\t\t\t} catch (Exception ignore) {\n+\t\t\t\t\t\tjvmInfo = JolokiaAgentDescriptor.NULL_DESCRIPTOR;\n+\t\t\t\t\t}\n+\t\t\t\t\tJolokiaAgentDescriptor agentDescriptor = new JolokiaAgentDescriptor(response, jvmInfo);\n+\t\t\t\t\tfound.put(agentDescriptor.getGUID(), agentDescriptor);\n+\n+\t\t\t\t} catch (URISyntaxException ignore) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException ignore) {\n+\t\t}\n+\t\treturn found;\n+\t}\n+\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn Messages.JolokiaDiscoveryListener_Description;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"jolokia\"; \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tprotected boolean isEnabled() {\n+\t\treturn true;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaDiscoveryListener.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.jolokia.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String JolokiaDiscoveryListener_Description;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/Messages.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.IServerDescriptor;\n+\n+\/**\n+ * Describes the JVM and how to connect to it\n+ *\/\n+public interface ServerConnectionDescriptor extends IServerDescriptor, IConnectionDescriptor {\n+\tString getPath();\n+\n+\tJMXServiceURL serviceUrl();\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/ServerConnectionDescriptor.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,1 @@\n+JolokiaDiscoveryListener_Description=Uses Jolokia Discovery to report any active JVMs with Jolokia broadcasting\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/messages.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+import org.eclipse.jface.preference.BooleanFieldEditor;\n+import org.eclipse.jface.preference.FieldEditorPreferencePage;\n+import org.eclipse.ui.IWorkbench;\n+import org.eclipse.ui.IWorkbenchPreferencePage;\n+import org.openjdk.jmc.jolokia.JmcJolokiaPlugin;\n+\n+public class JolokiaPreferencePage extends FieldEditorPreferencePage implements IWorkbenchPreferencePage {\n+\n+\tpublic JolokiaPreferencePage() {\n+\t\tsuper(GRID);\n+\t\tsetPreferenceStore(JmcJolokiaPlugin.getDefault().getPreferenceStore());\n+\t\tsetDescription(Messages.JolokiaPreferencePage_Description);\n+\t}\n+\n+\tpublic void createFieldEditors() {\n+\t\taddField(new BooleanFieldEditor(PreferenceConstants.P_SCAN, Messages.JolokiaPreferencePage_Label,\n+\t\t\t\tgetFieldEditorParent()));\n+\n+\t}\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)\n+\t *\/\n+\tpublic void init(IWorkbench workbench) {\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/JolokiaPreferencePage.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.jolokia.preferences.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String JolokiaPreferencePage_Description;\n+\tpublic static String JolokiaPreferencePage_Label;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/Messages.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+\/**\n+ * Constant definitions for plug-in preferences\n+ *\/\n+public interface PreferenceConstants {\n+\n+\tpublic static final String P_SCAN = \"discoverJolokia\"; \/\/$NON-NLS-1$\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceConstants.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;\n+import org.eclipse.jface.preference.IPreferenceStore;\n+import org.openjdk.jmc.jolokia.JmcJolokiaPlugin;\n+\n+\/**\n+ * Class used to initialize default preference values.\n+ *\/\n+public class PreferenceInitializer extends AbstractPreferenceInitializer {\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#\n+\t * initializeDefaultPreferences()\n+\t *\/\n+\tpublic void initializeDefaultPreferences() {\n+\t\tIPreferenceStore store = JmcJolokiaPlugin.getDefault().getPreferenceStore();\n+\t\tstore.setDefault(PreferenceConstants.P_SCAN, false);\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceInitializer.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+JolokiaPreferencePage_Description=Discover Jolokia Agents\\n\\nhttps:\/\/jolokia.org\/reference\/html\/protocol.html\\#discovery\\n\\n\n+JolokiaPreferencePage_Label=&Discover Jolokia agents\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/messages.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"","filename":"application\/org.openjdk.jmc.kubernetes\/.gitignore","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/.gitignore","status":"copied"},{"patch":"@@ -0,0 +1,21 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: %Bundle-Name\n+Bundle-SymbolicName: org.openjdk.jmc.kubernetes;singleton:=true\n+Bundle-Version: 8.3.0.qualifier\n+Automatic-Module-Name: org.openjdk.jmc.kubernetes\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Require-Bundle: org.openjdk.jmc.jolokia;bundle-version=\"8.3.0\",\n+ org.eclipse.core.runtime,\n+ org.eclipse.ui,\n+ org.openjdk.jmc.ui,\n+ org.eclipse.swt,\n+ org.jolokia.kubernetes.standalone;bundle-version=\"1.7.1\",\n+ org.openjdk.jmc.rjmx;bundle-version=\"8.3.0\"\n+Export-Package: org.openjdk.jmc.kubernetes,\n+ org.openjdk.jmc.kubernetes.preferences\n+Import-Package: org.apache.commons.logging;version=\"1.2.0\",\n+ org.openjdk.jmc.rjmx,\n+ org.openjdk.jmc.rjmx.descriptorprovider\n+Bundle-Activator: org.openjdk.jmc.kubernetes.JmcKubernetesPlugin\n+Bundle-ActivationPolicy: lazy\n","filename":"application\/org.openjdk.jmc.kubernetes\/META-INF\/MANIFEST.MF","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+#Properties file for org.openjdk.jmc.kubernetes\n+page.name = Kubernetes\n+Bundle-Name = Kubernetes JMC extensions\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.kubernetes\/OSGI-INF\/l10n\/bundle.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+source.. = src\/main\/java\/\n+output.. = target\/classes\/\n+bin.includes = META-INF\/,\\\n+               OSGI-INF\/,\\\n+               .,\\\n+               OSGI-INF\/l10n\/bundle.properties,\\\n+               plugin.xml\n","filename":"application\/org.openjdk.jmc.kubernetes\/build.properties","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+--><?eclipse version=\"3.4\"?>\n+<plugin>\n+      <extension\n+         point=\"org.openjdk.jmc.rjmx.jmxProtocols\">\n+      <client\n+            class=\"org.openjdk.jmc.kubernetes.JmcKubernetesJmxConnectionProvider\" protocol=\"kubernetes\">\n+            <sysproperty name=\"running.in.jmc\" include=\"true\" \/>\n+      <\/client>\n+   <\/extension>\n+      <extension\n+            point=\"org.eclipse.ui.preferencePages\">\n+         <page\n+               category=\"org.openjdk.jmc.browser.preferences.BrowserPreferencePage\"\n+               class=\"org.openjdk.jmc.kubernetes.preferences.JmcKubernetesPreferenceForm\"\n+               id=\"org.openjdk.jmc.kubernetes.preferences.JmcKubernetesPreferences\"\n+               name=\"%page.name\">\n+         <\/page>\n+      <\/extension>\n+      <extension\n+            point=\"org.eclipse.core.runtime.preferences\">\n+         <initializer\n+               class=\"org.openjdk.jmc.kubernetes.preferences.PreferenceInitializer\">\n+         <\/initializer>\n+      <\/extension>\n+      <extension\n+         point=\"org.openjdk.jmc.rjmx.descriptorProvider\">\n+      <provider\n+            class=\"org.openjdk.jmc.kubernetes.KubernetesDiscoveryListener\">\n+      <\/provider>\n+   <\/extension>\n+      <extension\n+            point=\"org.eclipse.help.toc\">\n+         <toc\n+               file=\"toc.xml\">\n+         <\/toc>\n+         <toc\n+               file=\"testToc.xml\"\n+               primary=\"true\">\n+         <\/toc>\n+      <\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.kubernetes\/plugin.xml","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.kubernetes<\/artifactId>\n+\t<packaging>eclipse-plugin<\/packaging>\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n+\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n+\t\t\t\t<version>${tycho.version}<\/version>\n+\t\t\t<\/plugin>\n+\t\t<\/plugins>\n+\t<\/build>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t<artifactId>jolokia-kubernetes<\/artifactId>\n+\t\t\t<version>${jolokia.version}<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>junit<\/groupId>\n+\t\t\t<artifactId>junit<\/artifactId>\n+\t\t\t<version>4.13.1<\/version>\n+\t\t\t<scope>test<\/scope>\n+\t\t<\/dependency>\n+\t<\/dependencies>\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t<\/properties>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.kubernetes\/pom.xml","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.regex.Pattern;\n+\n+import javax.management.InstanceNotFoundException;\n+\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.client.exception.J4pException;\n+import org.jolokia.client.exception.J4pRemoteException;\n+import org.jolokia.client.request.J4pResponse;\n+import org.openjdk.jmc.jolokia.JmcJolokiaJmxConnection;\n+import org.openjdk.jmc.rjmx.ConnectionException;\n+\/**\n+ * Jolokia based MBeanServerConnector tailored for JMC needs\n+ *\/\n+public class JmcKubernetesJmxConnection extends JmcJolokiaJmxConnection {\n+\n+\tstatic final Collection<Pattern> DISCONNECT_SIGNS = Arrays.asList(Pattern.compile(\"Error: pods \\\".+\\\" not found\")); \/\/$NON-NLS-1$\n+\n+\tpublic JmcKubernetesJmxConnection(J4pClient client) throws IOException {\n+\t\tsuper(client);\n+\t}\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\t@Override\n+\tprotected J4pResponse unwrapException(J4pException e) throws IOException, InstanceNotFoundException {\n+\t\t\/\/ recognize signs of disconnect and signal to the application for better\n+\t\t\/\/ handling\n+\t\tif (isKnownDisconnectException(e)) {\n+\t\t\tthrow new ConnectionException(e.getMessage());\n+\t\t} else {\n+\t\t\treturn super.unwrapException(e);\n+\t\t}\n+\t}\n+\n+\tprivate boolean isKnownDisconnectException(J4pException e) {\n+\t\tif (!(e instanceof J4pRemoteException)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (!\"io.fabric8.kubernetes.client.KubernetesClientException\".equals(((J4pRemoteException) e).getErrorType())) { \/\/$NON-NLS-1$\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn DISCONNECT_SIGNS.stream().anyMatch(pattern -> pattern.matcher(e.getMessage()).matches());\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnection.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorProvider;\n+import javax.management.remote.JMXServiceURL;\n+\/**\n+ * This {@code JMXConnectionProvider} handles the \"kubernetes\" protocol.\n+ *\/\n+public class JmcKubernetesJmxConnectionProvider implements JMXConnectorProvider {\n+\t@Override\n+\tpublic JMXConnector newJMXConnector(JMXServiceURL serviceURL, Map<String, ?> environment) throws IOException {\n+\t\tif (!\"kubernetes\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(\"I only serve Kubernetes connections\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn new JmcKubernetesJmxConnector(serviceURL, environment);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnectionProvider.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.jolokia.kubernetes.client.KubernetesJmxConnector;\n+\n+public class JmcKubernetesJmxConnector extends KubernetesJmxConnector {\n+\n+\tpublic JmcKubernetesJmxConnector(JMXServiceURL serviceURL, Map<String, ?> environment) {\n+\t\tsuper(serviceURL, environment);\n+\t}\n+\n+\t@Override\n+\tprotected RemoteJmxAdapter createAdapter(J4pClient client) throws IOException {\n+\t\treturn new JmcKubernetesJmxConnection(client);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnector.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n+import org.openjdk.jmc.kubernetes.preferences.PreferenceConstants;\n+import org.openjdk.jmc.ui.MCAbstractUIPlugin;\n+\n+public class JmcKubernetesPlugin extends MCAbstractUIPlugin\n+\t\timplements KubernetesScanningParameters, PreferenceConstants {\n+\n+\tpublic final static String PLUGIN_ID = \"org.openjdk.jmc.kubernetes\"; \/\/$NON-NLS-1$\n+\n+\t\/\/ The shared instance.\n+\tprivate static JmcKubernetesPlugin plugin;\n+\n+\t\/**\n+\t * The constructor.\n+\t *\/\n+\tpublic JmcKubernetesPlugin() {\n+\t\tsuper(PLUGIN_ID);\n+\t\tplugin = this;\n+\t}\n+\n+\t\/**\n+\t * @return the shared instance.\n+\t *\/\n+\tpublic static JmcKubernetesPlugin getDefault() {\n+\t\treturn plugin;\n+\t}\n+\n+\n+\t@Override\n+\tpublic boolean scanForInstances() {\n+\t\treturn getPreferenceStore().getBoolean(P_SCAN_FOR_INSTANCES);\n+\t}\n+\n+\t@Override\n+\tpublic boolean scanAllContexts() {\n+\t\treturn getPreferenceStore().getBoolean(P_SCAN_ALL_CONTEXTS);\n+\t}\n+\n+\t@Override\n+\tpublic String jolokiaPort() {\n+\t\treturn getPreferenceStore().getString(P_JOLOKIA_PORT);\n+\t}\n+\n+\t@Override\n+\tpublic String username() {\n+\t\treturn getPreferenceStore().getString(P_USERNAME);\n+\t}\n+\n+\t@Override\n+\tpublic String password() {\n+\t\treturn getPreferenceStore().getString(P_PASSWORD);\n+\t}\n+\n+\t@Override\n+\tpublic String jolokiaPath() {\n+\t\treturn getPreferenceStore().getString(P_JOLOKIA_PATH);\n+\t}\n+\n+\t@Override\n+\tpublic String requireLabel() {\n+\t\treturn getPreferenceStore().getString(P_REQUIRE_LABEL);\n+\t}\n+\n+\t@Override\n+\tpublic String jolokiaProtocol() {\n+\t\treturn getPreferenceStore().getString(P_JOLOKIA_PROTOCOL);\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesPlugin.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,326 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.eclipse.core.runtime.Platform;\n+import org.jolokia.client.J4pClient;\n+import org.jolokia.kubernetes.client.KubernetesJmxConnector;\n+import org.jolokia.util.AuthorizationHeaderParser;\n+import org.jolokia.util.Base64Util;\n+import org.openjdk.jmc.jolokia.AbstractCachedDescriptorProvider;\n+import org.openjdk.jmc.jolokia.JolokiaAgentDescriptor;\n+import org.openjdk.jmc.jolokia.ServerConnectionDescriptor;\n+import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n+import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+import org.osgi.framework.FrameworkUtil;\n+\n+import io.fabric8.kubernetes.api.model.NamedContext;\n+import io.fabric8.kubernetes.api.model.ObjectMeta;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.fabric8.kubernetes.api.model.PodList;\n+import io.fabric8.kubernetes.api.model.Secret;\n+import io.fabric8.kubernetes.client.Config;\n+import io.fabric8.kubernetes.client.KubernetesClient;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.FilterWatchListMultiDeletable;\n+import io.fabric8.kubernetes.client.internal.KubeConfigUtils;\n+import io.fabric8.kubernetes.client.utils.Utils;\n+\/**\n+ * This class attempts to connect to JVMs in pods running in kubernetes in a background thread.\n+ * Enablement and parameters for the scanning is given by user preferences.\n+ *\/\n+public class KubernetesDiscoveryListener extends AbstractCachedDescriptorProvider {\n+\n+\tprivate final static Pattern SECRET_PATTERN = Pattern\n+\t\t\t.compile(\"\\\\$\\\\{kubernetes\/secret\/(?<secretName>[^\/]+)\/(?<itemName>[^\\\\}]+)}\"); \/\/$NON-NLS-1$\n+\tprivate final static Pattern ATTRIBUTE_PATTERN = Pattern\n+\t\t\t.compile(\"\\\\$\\\\{kubernetes\/annotation\/(?<annotationName>[^\/]+)}\"); \/\/$NON-NLS-1$\n+\tprivate final static Set<String> VALID_JOLOKIA_PROTOCOLS = new HashSet<>(Arrays.asList(\"http\", \"https\")); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\n+\tpublic final String getDescription() {\n+\t\treturn Messages.KubernetesDiscoveryListener_Description;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"kubernetes\"; \/\/$NON-NLS-1$\n+\t}\n+\n+\tboolean notEmpty(String value) {\n+\t\treturn value != null && value.length() > 0;\n+\t}\n+\n+\tprivate List<String> contexts;\n+\tprivate long contextsCached = 0L;\n+\n+\tprivate List<String> allContexts() throws IOException {\n+\t\tfinal String path = Utils.getSystemPropertyOrEnvVar(Config.KUBERNETES_KUBECONFIG_FILE,\n+\t\t\t\tnew File(System.getProperty(\"user.home\"), \".kube\" + File.separator + \"config\").toString()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+\t\tFile configPath = new File(path);\n+\t\tif (contexts != null && contextsCached > configPath.lastModified()) {\/\/ the YAML parsing is soo incredibly sloow, hence cache context names for later\n+\t\t\t\/\/ runs\n+\t\t\treturn contexts;\n+\t\t}\n+\t\t\/\/reload config if kubeconfig has been modified since we cached the config\n+\t\tio.fabric8.kubernetes.api.model.Config config = KubeConfigUtils.parseConfig(configPath);\n+\t\tthis.contextsCached = System.currentTimeMillis();\n+\t\tKubernetesJmxConnector.resetKubernetesConfig();\n+\t\treturn contexts = config.getContexts().stream().map(NamedContext::getName).collect(Collectors.toList());\n+\t}\n+\n+\t@Override\n+\tprotected Map<String, ServerConnectionDescriptor> discoverJvms() {\n+\t\tMap<String, ServerConnectionDescriptor> found = new HashMap<>();\n+\t\tKubernetesScanningParameters parameters = JmcKubernetesPlugin.getDefault();\n+\t\tif (!isEnabled()) {\n+\t\t\treturn found;\n+\t\t}\n+\t\tboolean hasScanned = false;\n+\n+\t\tif (parameters.scanAllContexts()) {\n+\t\t\ttry {\n+\t\t\t\tfor (final String context : allContexts()) {\n+\t\t\t\t\thasScanned = true;\n+\t\t\t\t\tscanContext(found, parameters, context);\n+\t\t\t\t}\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass()))\n+\t\t\t\t\t\t.error(Messages.KubernetesDiscoveryListener_UnableToFindContexts, e);\n+\t\t\t}\n+\t\t}\n+\t\tif (!hasScanned) {\/\/ scan default context\n+\t\t\treturn scanContext(found, parameters, null);\n+\t\t}\n+\t\treturn found;\n+\n+\t}\n+\n+\tprivate Map<String, ServerConnectionDescriptor> scanContext(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n+\t\ttry {\n+\t\t\tscanContextUnsafe(found, parameters, context);\n+\t\t} catch (Exception e) {\n+\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass()))\n+\t\t\t\t\t.error(Messages.KubernetesDiscoveryListener_UnableToScan + context, e);\n+\t\t}\n+\t\treturn found;\n+\t}\n+\n+\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n+\t\tString pathLabel = parameters.requireLabel();\n+\t\tKubernetesClient client = KubernetesJmxConnector.getApiClient(context);\n+\n+\t\tFilterWatchListMultiDeletable<Pod, PodList, Boolean, Watch, Watcher<Pod>> query = client.pods()\n+\t\t\t\t.inAnyNamespace();\n+\t\tList<Pod> podList;\n+\t\tboolean hasPathLabel = notEmpty(pathLabel);\n+\t\tif (hasPathLabel) {\n+\t\t\tpodList = query.withLabel(pathLabel).list().getItems();\n+\t\t} else {\n+\t\t\tpodList = query.list().getItems();\n+\t\t}\n+\t\t\/\/ can consider parallelization for big contexts, however since it is the\n+\t\t\/\/ background await the situation a bit\n+\t\tpodList.stream().forEach(pod -> scanPod(found, parameters, context, client, pod));\n+\t\treturn found;\n+\t}\n+\n+\tprivate void scanPod(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context,\n+\t\tKubernetesClient client, Pod pod) {\n+\n+\t\tfinal ObjectMeta metadata = pod.getMetadata();\n+\t\tHashMap<String, String> headers = new HashMap<>();\n+\t\tMap<String, Object> env = new HashMap<>();\n+\t\tif (notEmpty(parameters.username())) {\n+\t\t\tif (!notEmpty(parameters.password())) {\n+\t\t\t\tthrow new IllegalArgumentException(Messages.KubernetesDiscoveryListener_MustProvidePassword);\n+\t\t\t}\n+\t\t\tauthorize(headers, client, parameters.username(), parameters.password(), metadata.getNamespace(), env);\n+\t\t}\n+\t\tfinal StringBuilder url = new StringBuilder(metadata.getSelfLink());\n+\t\t\/\/ JMX url must be reverse constructed, so that we can connect from the\n+\t\t\/\/ resulting node in the JVM browser\n+\t\tfinal StringBuilder jmxUrl = new StringBuilder(\"service:jmx:kubernetes:\/\/\/\").append(metadata.getNamespace()) \/\/$NON-NLS-1$\n+\t\t\t\t.append('\/');\n+\n+\t\tfinal String protocol = getValueOrAttribute(parameters.jolokiaProtocol(), metadata);\n+\t\tfinal String podName = metadata.getName();\n+\t\tif (notEmpty(protocol)) {\n+\t\t\tif (!VALID_JOLOKIA_PROTOCOLS.contains(protocol)) {\n+\t\t\t\tthrow new IllegalArgumentException(Messages.KubernetesDiscoveryListener_JolokiaProtocol + protocol\n+\t\t\t\t\t\t+ Messages.KubernetesDiscoveryListener_HttpOrHttps);\n+\t\t\t}\n+\t\t\t\/\/ a bit clumsy, need to inject protocol _before_ podname in selflink\n+\t\t\turl.insert(url.lastIndexOf(podName), protocol + \":\"); \/\/$NON-NLS-1$\n+\t\t\tjmxUrl.append(protocol).append(':');\n+\t\t}\n+\n+\t\tjmxUrl.append(podName);\n+\n+\t\tfinal String port = getValueOrAttribute(parameters.jolokiaPort(), metadata);\n+\t\tif (port != null) {\n+\t\t\turl.append(\":\").append(port); \/\/$NON-NLS-1$\n+\t\t\tjmxUrl.append(':').append(port);\n+\t\t}\n+\n+\t\turl.append(\"\/proxy\"); \/\/$NON-NLS-1$\n+\n+\t\tfinal String path = getValueOrAttribute(parameters.jolokiaPath(), metadata);\n+\n+\t\tif (!path.startsWith(\"\/\")) { \/\/$NON-NLS-1$\n+\t\t\turl.append('\/');\n+\t\t\tjmxUrl.append('\/');\n+\t\t}\n+\t\turl.append(path);\n+\t\tjmxUrl.append(path);\n+\n+\t\tif (context != null) {\n+\t\t\tenv.put(KubernetesJmxConnector.KUBERNETES_CLIENT_CONTEXT, context);\n+\t\t}\n+\t\tJ4pClient jvmClient = KubernetesJmxConnector.probeProxyPath(env, client, url, headers);\n+\t\tif (jvmClient != null) {\n+\t\t\tJmcKubernetesJmxConnection connection;\n+\t\t\ttry {\n+\t\t\t\tconnection = new JmcKubernetesJmxConnection(jvmClient);\n+\t\t\t\tJVMDescriptor jvmDescriptor = JolokiaAgentDescriptor.attemptToGetJvmInfo(connection);\n+\t\t\t\tJMXServiceURL jmxServiceURL = new JMXServiceURL(jmxUrl.toString());\n+\t\t\t\tKubernetesJvmDescriptor descriptor = new KubernetesJvmDescriptor(metadata, jvmDescriptor, jmxServiceURL,\n+\t\t\t\t\t\tenv);\n+\t\t\t\tfound.put(descriptor.getGUID(), descriptor);\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass()))\n+\t\t\t\t\t\t.error(Messages.KubernetesDiscoveryListener_ErrConnectingToJvm, e);\n+\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate String getValueOrAttribute(String configValue, ObjectMeta metadata) {\n+\t\tif (notEmpty(configValue)) {\n+\t\t\tMatcher pattern = ATTRIBUTE_PATTERN.matcher(configValue);\n+\t\t\tif (pattern.find()) {\n+\t\t\t\treturn metadata.getAnnotations().get(pattern.group(\"annotationName\")); \/\/$NON-NLS-1$\n+\t\t\t} else {\n+\t\t\t\treturn configValue;\/\/ the default is to use config value as is\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate void authorize(\n+\t\tHashMap<String, String> headers, KubernetesClient client, String username, String password, String namespace,\n+\t\tMap<String, Object> jmxEnv) {\n+\n+\t\tfinal Matcher userNameMatcher = SECRET_PATTERN.matcher(username);\n+\t\tString secretName = null;\n+\t\tMap<String, String> secretValues = null;\n+\t\tif (userNameMatcher.find()) {\n+\t\t\tsecretName = userNameMatcher.group(\"secretName\"); \/\/$NON-NLS-1$\n+\t\t\tsecretValues = findSecret(client, namespace, secretName);\n+\t\t\tusername = secretValues.get(userNameMatcher.group(\"itemName\")); \/\/$NON-NLS-1$\n+\t\t}\n+\n+\t\tfinal Matcher passwordMatcher = SECRET_PATTERN.matcher(password);\n+\t\tif (passwordMatcher.find()) {\n+\t\t\tif (!secretName.equals(passwordMatcher.group(\"secretName\"))) { \/\/$NON-NLS-1$\n+\t\t\t\tsecretValues = findSecret(client, namespace, passwordMatcher.group(\"secretName\")); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t\tpassword = secretValues.get(passwordMatcher.group(\"itemName\")); \/\/$NON-NLS-1$\n+\t\t}\n+\n+\t\theaders.put(AuthorizationHeaderParser.JOLOKIA_ALTERNATE_AUTHORIZATION_HEADER,\n+\t\t\t\t\"Basic \" + Base64Util.encode((username + \":\" + password).getBytes())); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tjmxEnv.put(JMXConnector.CREDENTIALS, new String[] {username, password});\n+\n+\t}\n+\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\tprivate Map<String, String> findSecret(KubernetesClient client, String namespace, String secretName) {\n+\n+\t\tfor (Secret secret : client.secrets().inNamespace(namespace).list().getItems()) {\n+\t\t\tif (secret.getMetadata().getName().equals(secretName)) {\n+\t\t\t\tif (\"kubernetes.io\/basic-auth\".equals(secret.getType())) { \/\/$NON-NLS-1$\n+\t\t\t\t\tMap<String, String> data = secret.getData();\n+\t\t\t\t\tdata.replaceAll((key, value) -> new String(Base64.decodeBase64(value)));\n+\t\t\t\t\treturn data;\n+\t\t\t\t} else if (\"Opaque\".equals(secret.getType())) { \/\/$NON-NLS-1$\n+\t\t\t\t\tfor (Entry<String, String> entry : secret.getData().entrySet()) {\n+\t\t\t\t\t\tif (entry.getKey().endsWith(\".properties\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\t\t\tproperties.load(new ByteArrayInputStream(Base64.decodeBase64(entry.getValue())));\n+\t\t\t\t\t\t\t\treturn (Map) properties;\n+\t\t\t\t\t\t\t} catch (IOException ignore) {\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\t\tthrow new NoSuchElementException(Messages.KubernetesDiscoveryListener_CouldNotFindSecret + secretName\n+\t\t\t\t+ Messages.KubernetesDiscoveryListener_InNamespace + namespace);\n+\n+\t}\n+\n+\t@Override\n+\tprotected boolean isEnabled() {\n+\t\treturn JmcKubernetesPlugin.getDefault().scanForInstances();\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesDiscoveryListener.java","additions":326,"deletions":0,"binary":false,"changes":326,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.kubernetes.client.KubernetesJmxConnector;\n+import org.openjdk.jmc.jolokia.ServerConnectionDescriptor;\n+import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+\n+import io.fabric8.kubernetes.api.model.ObjectMeta;\n+\n+public class KubernetesJvmDescriptor implements ServerConnectionDescriptor {\n+\n+\tprivate final JVMDescriptor jvmDescriptor;\n+\tprivate final ObjectMeta metadata;\n+\tprivate final Map<String, Object> env;\n+\tprivate final JMXServiceURL connectUrl;\n+\n+\tpublic KubernetesJvmDescriptor(ObjectMeta metadata, JVMDescriptor jvmDescriptor, JMXServiceURL connectUrl,\n+\t\t\tMap<String, Object> env) {\n+\t\tthis.jvmDescriptor = jvmDescriptor;\n+\t\tthis.metadata = metadata;\n+\t\tthis.env = env;\n+\t\tthis.connectUrl = connectUrl;\n+\t}\n+\n+\t@Override\n+\tpublic String getGUID() {\n+\t\treturn this.metadata.getName();\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayName() {\n+\t\treturn this.metadata.getName();\n+\t}\n+\n+\t@Override\n+\tpublic JVMDescriptor getJvmInfo() {\n+\t\treturn this.jvmDescriptor;\n+\t}\n+\n+\tpublic String getPath() {\n+\t\tString namespace = metadata.getNamespace();\n+\t\tfinal Object context = this.env.get(KubernetesJmxConnector.KUBERNETES_CLIENT_CONTEXT);\n+\t\tif (context != null) {\n+\t\t\treturn context + \"\/\" + namespace; \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn namespace;\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL createJMXServiceURL() throws IOException {\n+\t\treturn this.connectUrl;\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, Object> getEnvironment() {\n+\t\treturn this.env;\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL serviceUrl() {\n+\t\treturn this.connectUrl;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesJvmDescriptor.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.kubernetes.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String KubernetesDiscoveryListener_CouldNotFindSecret;\n+\tpublic static String KubernetesDiscoveryListener_Description;\n+\tpublic static String KubernetesDiscoveryListener_ErrConnectingToJvm;\n+\tpublic static String KubernetesDiscoveryListener_HttpOrHttps;\n+\tpublic static String KubernetesDiscoveryListener_InNamespace;\n+\tpublic static String KubernetesDiscoveryListener_JolokiaProtocol;\n+\tpublic static String KubernetesDiscoveryListener_MustProvidePassword;\n+\tpublic static String KubernetesDiscoveryListener_UnableToFindContexts;\n+\tpublic static String KubernetesDiscoveryListener_UnableToScan;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/Messages.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+KubernetesDiscoveryListener_CouldNotFindSecret=Could not find secret named \n+KubernetesDiscoveryListener_Description=List JVM in kubernetes cluster\n+KubernetesDiscoveryListener_ErrConnectingToJvm=Error connecting to JVM in pod\n+KubernetesDiscoveryListener_HttpOrHttps=' must be either 'http' or 'https'\n+KubernetesDiscoveryListener_InNamespace=\\ in namespace \n+KubernetesDiscoveryListener_JolokiaProtocol=Jolokia protocol '\n+KubernetesDiscoveryListener_MustProvidePassword=Password must be specified when username is specified\n+KubernetesDiscoveryListener_UnableToFindContexts=Unable to find all kubernetes contexts\n+KubernetesDiscoveryListener_UnableToScan=Unable to scan kubernetes context \n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/messages.properties","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+import org.eclipse.jface.preference.BooleanFieldEditor;\n+import org.eclipse.jface.preference.FieldEditor;\n+import org.eclipse.jface.preference.FieldEditorPreferencePage;\n+import org.eclipse.jface.preference.StringFieldEditor;\n+import org.eclipse.ui.IWorkbench;\n+import org.eclipse.ui.IWorkbenchPreferencePage;\n+import org.openjdk.jmc.kubernetes.JmcKubernetesPlugin;\n+import org.openjdk.jmc.ui.misc.PasswordFieldEditor;\n+\n+\/**\n+ * This class represents a preference page that is contributed to the Preferences dialog. By\n+ * subclassing <samp>FieldEditorPreferencePage<\/samp>, we can use the field support built into JFace\n+ * that allows us to create a page that is small and knows how to save, restore and apply itself.\n+ * <p>\n+ * This page is used to modify preferences only. They are stored in the preference store that\n+ * belongs to the main plug-in class. That way, preferences can be accessed directly via the\n+ * preference store.\n+ *\/\n+public class JmcKubernetesPreferenceForm extends FieldEditorPreferencePage\n+\t\timplements IWorkbenchPreferencePage, PreferenceConstants {\n+\n+\tprivate Map<FieldEditor, Object> dependantControls = new WeakHashMap<>();\n+\n+\tpublic JmcKubernetesPreferenceForm() {\n+\t\tsuper(GRID);\n+\t\tsetPreferenceStore(JmcKubernetesPlugin.getDefault().getPreferenceStore());\n+\t\tsetDescription(Messages.JmcKubernetesPreferenceForm_FormDescription);\n+\t}\n+\n+\t\/**\n+\t * Creates the field editors. Field editors are abstractions of the common GUI blocks needed to\n+\t * manipulate various types of preferences. Each field editor knows how to save and restore\n+\t * itself.\n+\t *\/\n+\tpublic void createFieldEditors() {\n+\t\tBooleanFieldEditor mainEnabler = new BooleanFieldEditor(P_SCAN_FOR_INSTANCES,\n+\t\t\t\tMessages.JmcKubernetesPreferenceForm_ScanForPods, getFieldEditorParent()) {\n+\t\t\t@Override\n+\t\t\tprotected void valueChanged(boolean oldValue, boolean newValue) {\n+\t\t\t\tsuper.valueChanged(oldValue, newValue);\n+\t\t\t\tenableDependantFields(newValue);\n+\t\t\t}\n+\t\t};\n+\t\taddField(mainEnabler);\n+\n+\t\tthis.addDependantField(new BooleanFieldEditor(P_SCAN_ALL_CONTEXTS,\n+\t\t\t\tMessages.JmcKubernetesPreferenceForm_AllContexts, getFieldEditorParent()));\n+\t\tthis.addTextField(new StringFieldEditor(P_REQUIRE_LABEL, Messages.JmcKubernetesPreferenceForm_RequireLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_LabelToolTip);\n+\t\tthis.addTextField(new StringFieldEditor(P_JOLOKIA_PATH, Messages.JmcKubernetesPreferenceForm_PathLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_PathTooltip);\n+\t\tthis.addTextField(new StringFieldEditor(P_JOLOKIA_PORT, Messages.JmcKubernetesPreferenceForm_PortLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_PortTooltip);\n+\t\tthis.addTextField(new StringFieldEditor(P_JOLOKIA_PROTOCOL, Messages.JmcKubernetesPreferenceForm_ProtocolLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_ProtocolTooltip);\n+\t\tthis.addTextField(new StringFieldEditor(P_USERNAME, Messages.JmcKubernetesPreferenceForm_UsernameLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_UsernameTooltip);\n+\t\tPasswordFieldEditor passwordField = new PasswordFieldEditor(P_PASSWORD,\n+\t\t\t\tMessages.JmcKubernetesPreferenceForm_PasswordLabel, getFieldEditorParent());\n+\t\tString passwordTooltip = Messages.JmcKubernetesPreferenceForm_PasswordTooltip;\n+\t\tpasswordField.getTextControl(getFieldEditorParent()).setToolTipText(passwordTooltip);\n+\t\tthis.addDependantField(passwordField);\n+\t\t\/\/ set initial enablement\n+\t\tenableDependantFields(JmcKubernetesPlugin.getDefault().scanForInstances());\n+\n+\t}\n+\n+\tprivate void addTextField(StringFieldEditor field, String tooltip) {\n+\t\tthis.addDependantField(field);\n+\t\tfield.getTextControl(getFieldEditorParent()).setToolTipText(tooltip);\n+\t\tfield.getLabelControl(getFieldEditorParent()).setToolTipText(tooltip);\n+\n+\t}\n+\n+\tprivate void addDependantField(FieldEditor field) {\n+\t\tthis.dependantControls.put(field, null);\n+\t\taddField(field);\n+\t}\n+\n+\tprivate void enableDependantFields(boolean enabled) {\n+\t\tfor (FieldEditor field : this.dependantControls.keySet()) {\n+\t\t\tfield.setEnabled(enabled, getFieldEditorParent());\n+\t\t}\n+\t}\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)\n+\t *\/\n+\tpublic void init(IWorkbench workbench) {\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+public interface KubernetesScanningParameters {\n+\tboolean scanForInstances();\n+\n+\tboolean scanAllContexts();\n+\n+\tString jolokiaPort();\n+\n+\tString username();\n+\n+\tString password();\n+\n+\tString jolokiaPath();\n+\n+\tString jolokiaProtocol();\n+\n+\tString requireLabel();\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/KubernetesScanningParameters.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.kubernetes.preferences.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String JmcKubernetesPreferenceForm_AllContexts;\n+\tpublic static String JmcKubernetesPreferenceForm_FormDescription;\n+\tpublic static String JmcKubernetesPreferenceForm_LabelToolTip;\n+\tpublic static String JmcKubernetesPreferenceForm_PasswordLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_PasswordTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_PathLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_PathTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_PortLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_PortTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_ProtocolLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_ProtocolTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_RequireLabel;\n+\tpublic static String JmcKubernetesPreferenceForm_ScanForPods;\n+\tpublic static String JmcKubernetesPreferenceForm_UsernameTooltip;\n+\tpublic static String JmcKubernetesPreferenceForm_UsernameLabel;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/Messages.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+\/**\n+ * Constant definitions for plug-in preferences\n+ *\/\n+public interface PreferenceConstants {\n+\n+\tpublic static final String P_SCAN_FOR_INSTANCES = \"scanForInstances\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_SCAN_ALL_CONTEXTS = \"scanAllContexts\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_REQUIRE_LABEL = \"requireLabel\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_JOLOKIA_PATH = \"jolokiaPath\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_JOLOKIA_PORT = \"jolokiaPort\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_JOLOKIA_PROTOCOL = \"jolokiaProtocol\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_USERNAME = \"username\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_PASSWORD = \"password\"; \/\/$NON-NLS-1$\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/PreferenceConstants.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes.preferences;\n+\n+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;\n+import org.eclipse.jface.preference.IPreferenceStore;\n+import org.openjdk.jmc.kubernetes.JmcKubernetesPlugin;\n+\n+\/**\n+ * Class used to initialize default preference values.\n+ *\/\n+public class PreferenceInitializer extends AbstractPreferenceInitializer implements PreferenceConstants {\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#\n+\t * initializeDefaultPreferences()\n+\t *\/\n+\tpublic void initializeDefaultPreferences() {\n+\t\tIPreferenceStore store = JmcKubernetesPlugin.getDefault().getPreferenceStore();\n+\t\tstore.setDefault(P_SCAN_FOR_INSTANCES, false);\n+\t\tstore.setDefault(P_SCAN_ALL_CONTEXTS, false);\n+\t\tstore.setDefault(P_REQUIRE_LABEL, \"jolokia\"); \/\/$NON-NLS-1$\n+\t\tstore.setDefault(P_JOLOKIA_PATH, \"\/jolokia\/\"); \/\/$NON-NLS-1$\n+\t\tstore.setDefault(P_JOLOKIA_PORT, \"8778\"); \/\/$NON-NLS-1$\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/PreferenceInitializer.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+JmcKubernetesPreferenceForm_AllContexts=Scan pods from all locally configured &contexts, if false: only scan the current contexts\n+JmcKubernetesPreferenceForm_FormDescription=Options that allows you to scan kubernetes for JVMs running Jolokia\\\n+\\n\\nThe Kubernetes Proxy API will be used to attempt to access Jolokia like this (parenthesis denote optional components): \\\n+\\n\\n$kubernetesBaseUrl\/api\/v1\/namespaces\/podNamespace\/pods\/(jolokiaProtocol:)podname(:jolokiaPort)\/proxy\/jolokiaPath\\n\\n\n+JmcKubernetesPreferenceForm_LabelToolTip=Only attempt to connect to pods with this label set, leave empty to try to scan all pods\n+JmcKubernetesPreferenceForm_PasswordLabel=Require pass&word\n+JmcKubernetesPreferenceForm_PasswordTooltip=Password , alternatively use ${kubernetes\/secret\/secretName\/secretItem} where the secret is in the same namespace as the pod and the type is either kubernetes.io\/basic-auth or Opaque with java.util.Properties compatible values\n+JmcKubernetesPreferenceForm_PathLabel=Jolokia &path in pods\n+JmcKubernetesPreferenceForm_PathTooltip=Use this path for jolokia, or specify ${kubernetes\/annotation\/annotationName} to be able to to get port name from pod metadata annotation of your choice\n+JmcKubernetesPreferenceForm_PortLabel=Jolokia p&ort in pods\n+JmcKubernetesPreferenceForm_PortTooltip=Port to use, leave empty to use default port of Kubernetes proxy, hardcode a port value, or alternatively ${kubernetes\/annotation\/annotationName} to get port name from pod metadata annotation of your choice\n+JmcKubernetesPreferenceForm_ProtocolLabel=Jolokia pro&tocol in pods\n+JmcKubernetesPreferenceForm_ProtocolTooltip=Protocol to use (optional), will infer http if not set, or hardcode to https, or alternatively ${kubernetes\/annotation\/annotationName} to get port name from pod metadata  annotation of your choice\n+JmcKubernetesPreferenceForm_RequireLabel=Require &label to scan pod\n+JmcKubernetesPreferenceForm_ScanForPods=&Scan for kubernetes pods with Jolokia support\n+JmcKubernetesPreferenceForm_UsernameTooltip=Username , alternatively use ${kubernetes\/secret\/secretName\/secretItem} where the secret is in the same namespace as the pod and the type is either kubernetes.io\/basic-auth or Opaque with java.util.Properties compatible values\n+JmcKubernetesPreferenceForm_UsernameLabel=Require &username\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/messages.properties","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -49,0 +49,1 @@\n+\t\t<jolokia.version>1.7.1<\/jolokia.version>\n@@ -120,0 +121,2 @@\n+\t\t<module>org.openjdk.jmc.jolokia<\/module>\n+\t\t<module>org.openjdk.jmc.kubernetes<\/module>\n","filename":"application\/pom.xml","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,20 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: RJMX Test\n+Bundle-SymbolicName: org.openjdk.jmc.jolokia.test;singleton:=true\n+Bundle-Version: 8.3.0.qualifier\n+Bundle-Vendor: Oracle Corporation\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Bundle-ActivationPolicy: lazy\n+Require-Bundle: org.junit,\n+ org.openjdk.jmc.jolokia,\n+ org.openjdk.jmc.common.test,\n+ org.eclipse.osgi;bundle-version=\"3.16.200\",\n+ org.eclipse.ui.workbench,\n+ org.openjdk.jmc.rjmx;bundle-version=\"8.3.0\",\n+ org.eclipse.ui,\n+ org.awaitility;bundle-version=\"4.0.0\",\n+ org.hamcrest;bundle-version=\"2.1.0\"\n+Automatic-Module-Name: org.openjdk.jmc.jolokia.test\n+Import-Package: org.openjdk.jmc.rjmx.descriptorprovider\n+Bundle-Classpath: target\/dependency\/awaitility-4.0.0.jar\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/META-INF\/MANIFEST.MF","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+#  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2021, Kantega AS. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+source.. = src\/test\/java\/,\\\n+           src\/test\/resources\/\n+output.. = target\/test-classes\/\n+bin.includes = META-INF\/,.\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/build.properties","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application.tests<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.jolokia.test<\/artifactId>\n+\t<packaging>eclipse-test-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t<\/properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.awaitility<\/groupId>\n+\t\t\t<artifactId>awaitility<\/artifactId>\n+\t\t\t<version>4.0.0<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t<artifactId>jolokia-jvm<\/artifactId>\n+\t\t\t<version>${jolokia.version}<\/version>\n+\t\t\t<exclusions>\n+\t\t\t\t<exclusion>\n+\t\t\t\t\t<groupId>com.sun<\/groupId>\n+\t\t\t\t\t<artifactId>tools<\/artifactId>\n+\t\t\t\t<\/exclusion>\n+\t\t\t<\/exclusions>\n+\t\t<\/dependency>\n+\t<\/dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n+\t\t\t\t<artifactId>tycho-surefire-plugin<\/artifactId>\n+\t\t\t\t<version>${tycho.version}<\/version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<includes>${test.includes}<\/includes>\n+\t\t\t\t\t<!-- Start jolokia on a random free port to avoid requiring specific \n+\t\t\t\t\t\tports to run test -->\n+\t\t\t\t\t<argLine>-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-jvm\/${jolokia.version}\/jolokia-jvm-${jolokia.version}.jar=port=0,discover=true<\/argLine>\n+\t\t\t\t<\/configuration>\n+\t\t\t<\/plugin>\t\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n+\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n+\t\t\t\t<version>${tycho.version}<\/version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<extraClasspathElements>\n+\t\t\t\t\t\t<dependency>\n+\n+\t\t\t\t\t\t\t<groupId>org.awaitility<\/groupId>\n+\t\t\t\t\t\t\t<artifactId>awaitility<\/artifactId>\n+\t\t\t\t\t\t\t<version>4.0.0<\/version>\n+\t\t\t\t\t\t<\/dependency>\n+\n+\t\t\t\t\t<\/extraClasspathElements>\n+\t\t\t\t<\/configuration>\n+\t\t\t<\/plugin>\n+\n+\t\t<\/plugins>\n+\t<\/build>\n+<\/project>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/pom.xml","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.management.Attribute;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.MBeanAttributeInfo;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.OperationsException;\n+import javax.management.ReflectionException;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.awaitility.Awaitility;\n+import org.eclipse.core.runtime.preferences.InstanceScope;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.IDescribable;\n+import org.openjdk.jmc.jolokia.preferences.PreferenceConstants;\n+import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n+\n+\/**\n+ * I test that JMX connections done with JmcJolokiaJmxConnectionProvider are functional\n+ *\/\n+@SuppressWarnings(\"restriction\")\n+public class JolokiaTest {\n+\n+\tstatic String jolokiaUrl;\n+\n+\tprivate static Set<String> unsafeAttributes = new HashSet<>(\n+\t\t\tArrays.asList(\"BootClassPath\", \"UsageThreshold\", \"UsageThresholdExceeded\", \"UsageThresholdCount\",\n+\t\t\t\t\t\"CollectionUsageThreshold\", \"CollectionUsageThresholdExceeded\", \"CollectionUsageThresholdCount\"));\n+\n+\tprivate static JolokiaDiscoveryListener discoveryListener;\n+\n+\tprivate static MBeanServerConnection jolokiaConnection;\n+\n+\t@BeforeClass\n+\tpublic static void startServer() throws Exception {\n+\t\t\/\/ wait for Jolokia to be ready before commencing tests\n+\t\tAwaitility.await().atMost(Duration.ofSeconds(15))\/\/Note: hard code property to avoid module dependency on agent\n+\t\t\t\t.until(() -> (jolokiaUrl = System.getProperty(\"jolokia.agent\")) != null);\n+\t\tdiscoveryListener = new JolokiaDiscoveryListener();\n+\t\tjolokiaConnection = getJolokiaMBeanConnector();\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testReadAttributesOverJolokia() throws MalformedURLException, IOException, OperationsException,\n+\t\t\tIntrospectionException, AttributeNotFoundException, ReflectionException, MBeanException {\n+\t\tfor (ObjectName objectName : jolokiaConnection.queryNames(null, null)) {\n+\t\t\tfor (MBeanAttributeInfo attributeInfo : getJolokiaMBeanConnector().getMBeanInfo(objectName)\n+\t\t\t\t\t.getAttributes()) {\n+\t\t\t\tif (!unsafeAttributes.contains(attributeInfo.getName())) {\n+\t\t\t\t\tSystem.out.println(\"Getting attribute \" + objectName + \"\/\" + attributeInfo.getName());\n+\t\t\t\t\tgetJolokiaMBeanConnector().getAttribute(objectName, attributeInfo.getName());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t}\n+\n+\t@Test\n+\tpublic void testExecuteOperation() throws InstanceNotFoundException, MalformedObjectNameException, MBeanException,\n+\t\t\tReflectionException, MalformedURLException, IOException {\n+\t\tjolokiaConnection.invoke(new ObjectName(\"java.lang:type=Memory\"), \"gc\", new Object[0], new String[0]);\n+\t}\n+\n+\t@Test\n+\tpublic void testWriteAttribute()\n+\t\t\tthrows InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException,\n+\t\t\tMalformedObjectNameException, MBeanException, ReflectionException, MalformedURLException, IOException {\n+\t\tObjectName objectName = new ObjectName(\"jolokia:type=Config\");\n+\t\tString attribute = \"Debug\";\n+\t\tjolokiaConnection.setAttribute(objectName, new Attribute(attribute, true));\n+\t\tAssert.assertEquals(true, jolokiaConnection.getAttribute(objectName, attribute));\n+\n+\t}\n+\n+\tprivate static MBeanServerConnection getJolokiaMBeanConnector() throws IOException, MalformedURLException {\n+\t\tJMXConnector connector = new JmcJolokiaJmxConnectionProvider().newJMXConnector(\n+\t\t\t\tnew JMXServiceURL(jolokiaUrl.replace(\"http\", \"service:jmx:jolokia\")), Collections.emptyMap());\n+\t\tconnector.connect();\n+\t\tMBeanServerConnection connection = connector.getMBeanServerConnection();\n+\t\treturn connection;\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscover() {\n+\n+\t\tfinal AtomicInteger foundVms = new AtomicInteger(0);\n+\n+\t\t\/\/Set config so that scanning takes place\n+\t\tInstanceScope.INSTANCE.getNode(JmcJolokiaPlugin.PLUGIN_ID).put(PreferenceConstants.P_SCAN, \"true\");\n+\n+\t\tdiscoveryListener.addDescriptorListener(new IDescriptorListener() {\n+\t\t\tpublic void onDescriptorDetected(\n+\t\t\t\tIServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n+\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n+\t\t\t\tfoundVms.getAndIncrement();\n+\t\t\t}\n+\n+\t\t\tpublic void onDescriptorRemoved(String descriptorId) {\n+\t\t\t\tfoundVms.getAndDecrement();\n+\t\t\t}\n+\n+\t\t});\n+\t\t\/\/ Test that at least one VM (the one running the test was discovered)\n+\t\tAwaitility.await().atMost(Duration.ofSeconds(5)).until(() -> foundVms.get() > 0);\n+\t}\n+\n+\t@AfterClass\n+\tpublic static void stopServer() throws Exception {\n+\t\tdiscoveryListener.shutdown();\n+\t}\n+\n+}\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/src\/test\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaTest.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: RJMX Test\n+Bundle-SymbolicName: org.openjdk.jmc.kubernetes.test;singleton:=true\n+Bundle-Version: 8.3.0.qualifier\n+Bundle-Vendor: Oracle Corporation\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Bundle-ActivationPolicy: lazy\n+Require-Bundle: org.junit,\n+ org.openjdk.jmc.jolokia,\n+ org.openjdk.jmc.common.test,\n+ org.eclipse.osgi;bundle-version=\"3.16.200\",\n+ org.eclipse.ui.workbench,\n+ org.openjdk.jmc.rjmx;bundle-version=\"8.3.0\",\n+ org.eclipse.ui,\n+ org.awaitility;bundle-version=\"4.0.0\",\n+ org.hamcrest;bundle-version=\"2.1.0\",\n+ org.openjdk.jmc.kubernetes;bundle-version=\"8.3.0\",\n+ com.github.tomakehurst.wiremock-standalone;bundle-version=\"2.27.2\"\n+Automatic-Module-Name: org.openjdk.jmc.jolokia.test\n+Import-Package: io.fabric8.kubernetes.client,\n+ org.openjdk.jmc.rjmx.descriptorprovider\n+Bundle-Classpath: target\/dependency\/awaitility-4.0.0.jar\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/META-INF\/MANIFEST.MF","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+#  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2021, Kantega AS. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+source.. = src\/test\/java\/,\\\n+           src\/test\/resources\/\n+output.. = target\/test-classes\/\n+bin.includes = META-INF\/,.\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/build.properties","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved. \n+\tCopyright (c) 2021, Kantega AS. All rights reserved. DO NOT ALTER OR REMOVE \n+\tCOPYRIGHT NOTICES OR THIS FILE HEADER. The contents of this file are subject \n+\tto the terms of either the Universal Permissive License v 1.0 as shown at \n+\thttp:\/\/oss.oracle.com\/licenses\/upl or the following license: Redistribution \n+\tand use in source and binary forms, with or without modification, are permitted \n+\tprovided that the following conditions are met: 1. Redistributions of source \n+\tcode must retain the above copyright notice, this list of conditions and \n+\tthe following disclaimer. 2. Redistributions in binary form must reproduce \n+\tthe above copyright notice, this list of conditions and the following disclaimer \n+\tin the documentation and\/or other materials provided with the distribution. \n+\t3. Neither the name of the copyright holder nor the names of its contributors \n+\tmay be used to endorse or promote products derived from this software without \n+\tspecific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n+\tHOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n+\tBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS \n+\tFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n+\tHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n+\tEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT \n+\tOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n+\tINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \n+\tSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n+\tANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \n+\tOF SUCH DAMAGE. -->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application.tests<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.kubernetes.test<\/artifactId>\n+\t<packaging>eclipse-test-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t<\/properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.awaitility<\/groupId>\n+\t\t\t<artifactId>awaitility<\/artifactId>\n+\t\t\t<version>4.0.0<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.github.tomakehurst<\/groupId>\n+\t\t\t<artifactId>wiremock-standalone<\/artifactId>\n+\t\t\t<version>2.27.2<\/version>\n+\t\t<\/dependency>\n+\t<\/dependencies>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n+\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n+\t\t\t\t<version>${tycho.version}<\/version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<extraClasspathElements>\n+\t\t\t\t\t\t<dependency>\n+\n+\t\t\t\t\t\t\t<groupId>org.awaitility<\/groupId>\n+\t\t\t\t\t\t\t<artifactId>awaitility<\/artifactId>\n+\t\t\t\t\t\t\t<version>4.0.0<\/version>\n+\t\t\t\t\t\t<\/dependency>\n+\n+\t\t\t\t\t<\/extraClasspathElements>\n+\t\t\t\t<\/configuration>\n+\t\t\t<\/plugin>\n+\t\t<\/plugins>\n+\t<\/build>\n+<\/project>\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/pom.xml","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Kantega AS. All rights reserved. \n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.kubernetes;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClients;\n+import org.awaitility.Awaitility;\n+import org.eclipse.core.runtime.preferences.InstanceScope;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.IDescribable;\n+import org.openjdk.jmc.kubernetes.preferences.PreferenceConstants;\n+import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n+import org.openjdk.jmc.ui.common.jvm.JVMType;\n+\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+\n+import io.fabric8.kubernetes.client.Config;\n+\n+\/**\n+ * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are\n+ * functional. In order to be able to test this in a contained environment, the\n+ * kubernetes API is mocked with wiremock.\n+ *\/\n+@SuppressWarnings(\"restriction\")\n+public class JmcKubernetesTest {\n+\n+\t@ClassRule\n+\tpublic static WireMockRule wiremock = new WireMockRule(\n+\t\t\tWireMockConfiguration.options().extensions(new ResponseTemplateTransformer(false)).port(0));\n+\n+\tstatic final String jolokiaUrl = \"service:jmx:kubernetes:\/\/\/ns1\/pod-abcdef\/jolokia\";\n+\n+\tprivate static MBeanServerConnection jolokiaConnection;\n+\n+\t@BeforeClass\n+\tpublic static void connect() throws Exception {\n+\t\tCloseableHttpResponse configResponse = HttpClients.createDefault()\n+\t\t\t\t.execute(new HttpGet(wiremock.baseUrl() + \"\/mock-kube-config.yml\"));\n+\t\tAssert.assertEquals(configResponse.getStatusLine().getStatusCode(), 200);\n+\t\tFile configFile = File.createTempFile(\"mock-kube-config\", \".yml\");\n+\t\tconfigResponse.getEntity().writeTo(new FileOutputStream(configFile));\n+\t\t\/\/ we set this so the KubernetesDiscoveryListener will work\n+\t\tSystem.setProperty(Config.KUBERNETES_KUBECONFIG_FILE, configFile.getAbsolutePath());\n+\t\tjolokiaConnection = getKubernetesMBeanConnector();\n+\t}\n+\n+\t@Test\n+\tpublic void testExecuteOperation() throws InstanceNotFoundException, MalformedObjectNameException, MBeanException,\n+\t\t\tReflectionException, MalformedURLException, IOException {\n+\t\tjolokiaConnection.invoke(new ObjectName(\"java.lang:type=Memory\"), \"gc\", new Object[0], new String[0]);\n+\t}\n+\n+\t@Test\n+\tpublic void testReadAttribute()\n+\t\t\tthrows InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException,\n+\t\t\tMalformedObjectNameException, MBeanException, ReflectionException, MalformedURLException, IOException {\n+\t\tObjectName objectName = new ObjectName(\"java.lang:type=Memory\");\n+\t\tString attribute = \"Verbose\";\n+\t\tAssert.assertEquals(false, jolokiaConnection.getAttribute(objectName, attribute));\n+\n+\t}\n+\n+\tprivate static MBeanServerConnection getKubernetesMBeanConnector() throws IOException, MalformedURLException {\n+\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider().newJMXConnector(new JMXServiceURL(jolokiaUrl),\n+\t\t\t\tCollections.emptyMap());\n+\t\tconnector.connect();\n+\t\tMBeanServerConnection connection = connector.getMBeanServerConnection();\n+\t\treturn connection;\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscover() {\n+\n+\t\t\/\/ Set config so that scanning takes place\n+\t\tInstanceScope.INSTANCE.getNode(JmcKubernetesPlugin.PLUGIN_ID).put(PreferenceConstants.P_SCAN_FOR_INSTANCES,\n+\t\t\t\t\"true\");\n+\n+\t\ttestThatJVMIsFound();\n+\t}\n+\n+\tprivate void testThatJVMIsFound() {\n+\t\tfinal Map<String, IServerDescriptor> foundVms = new HashMap<>();\n+\t\tIDescriptorListener descriptorListener = new IDescriptorListener() {\n+\t\t\tpublic void onDescriptorDetected(IServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n+\t\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n+\t\t\t\tfoundVms.put(serverDescriptor.getGUID(), serverDescriptor);\n+\t\t\t}\n+\n+\t\t\tpublic void onDescriptorRemoved(String descriptorId) {\n+\t\t\t\tfoundVms.remove(descriptorId);\n+\t\t\t}\n+\t\t};\n+\t\tKubernetesDiscoveryListener discoveryListener = new KubernetesDiscoveryListener();\n+\t\tdiscoveryListener.addDescriptorListener(descriptorListener);\n+\t\ttry {\n+\t\t\t\/\/ Test that at least one VM (the one running the test was discovered)\n+\t\t\tAwaitility.await().atMost(Duration.ofSeconds(5)).until(() -> !foundVms.isEmpty());\n+\t\t\tIServerDescriptor descriptor = foundVms.get(\"pod-abcdef\");\n+\t\t\tAssert.assertNotNull(descriptor);\n+\t\t\tAssert.assertEquals(\n+\t\t\t\t\t\"[JVMDescriptor] Java command: \/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar --port 9090 PID: 88774\",\n+\t\t\t\t\tdescriptor.getJvmInfo().toString());\n+\t\t\tAssert.assertEquals(JVMType.HOTSPOT, descriptor.getJvmInfo().getJvmType());\n+\t\t\tAssert.assertEquals(\"18.0.1\", descriptor.getJvmInfo().getJavaVersion());\n+\t\t} finally {\n+\t\t\tdiscoveryListener.removeDescriptorListener(descriptorListener);\n+\t\t}\n+\t}\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+   \"request\" : {\n+      \"attribute\" : \"Verbose\",\n+      \"mbean\" : \"java.lang:type=Memory\",\n+      \"type\" : \"read\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658563869,\n+   \"value\" : false\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-attribute.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+   \"request\" : {\n+      \"mbean\" : \"java.lang:type=Memory\",\n+      \"operation\" : \"gc()\",\n+      \"type\" : \"exec\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658567003,\n+   \"value\" : null\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-exec.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+{\n+\t\"request\": {\n+\t\t\"type\": \"version\"\n+\t},\n+\t\"value\": {\n+\t\t\"agent\": \"1.7.1\",\n+\t\t\"protocol\": \"7.2\",\n+\t\t\"config\": {\n+\t\t\t\"listenForHttpService\": \"true\",\n+\t\t\t\"authIgnoreCerts\": \"false\",\n+\t\t\t\"agentId\": \"192.168.1.104-28660-5bd82fed-servlet\",\n+\t\t\t\"debug\": \"false\",\n+\t\t\t\"agentType\": \"servlet\",\n+\t\t\t\"policyLocation\": \"classpath:\\\/jolokia-access.xml\",\n+\t\t\t\"agentContext\": \"\\\/jolokia\",\n+\t\t\t\"serializeException\": \"false\",\n+\t\t\t\"mimeType\": \"text\\\/plain\",\n+\t\t\t\"dispatcherClasses\": \"org.jolokia.http.Jsr160ProxyNotEnabledByDefaultAnymoreDispatcher\",\n+\t\t\t\"authMode\": \"basic\",\n+\t\t\t\"authMatch\": \"any\",\n+\t\t\t\"streaming\": \"true\",\n+\t\t\t\"canonicalNaming\": \"true\",\n+\t\t\t\"historyMaxEntries\": \"10\",\n+\t\t\t\"allowErrorDetails\": \"false\",\n+\t\t\t\"allowDnsReverseLookup\": \"true\",\n+\t\t\t\"realm\": \"jolokia\",\n+\t\t\t\"includeStackTrace\": \"false\",\n+\t\t\t\"restrictorClass\": \"io.hawt.system.RBACRestrictor\",\n+\t\t\t\"mbeanQualifier\": \"qualifier=hawtio\",\n+\t\t\t\"useRestrictorService\": \"false\",\n+\t\t\t\"debugMaxEntries\": \"100\"\n+\t\t},\n+\t\t\"info\": {\n+\t\t\t\"product\": \"jetty\",\n+\t\t\t\"vendor\": \"Eclipse\",\n+\t\t\t\"version\": \"9.4.z-SNAPSHOT\"\n+\t\t}\n+\t},\n+\t\"timestamp\": 1658556959,\n+\t\"status\": 200\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-version.json","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+{\n+   \"request\" : {\n+      \"path\" : \"java.lang\/type=Memory\",\n+      \"type\" : \"list\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658566168,\n+   \"value\" : {\n+      \"attr\" : {\n+         \"HeapMemoryUsage\" : {\n+            \"desc\" : \"HeapMemoryUsage\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.openmbean.CompositeData\"\n+         },\n+         \"NonHeapMemoryUsage\" : {\n+            \"desc\" : \"NonHeapMemoryUsage\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.openmbean.CompositeData\"\n+         },\n+         \"ObjectName\" : {\n+            \"desc\" : \"ObjectName\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.ObjectName\"\n+         },\n+         \"ObjectPendingFinalizationCount\" : {\n+            \"desc\" : \"ObjectPendingFinalizationCount\",\n+            \"rw\" : false,\n+            \"type\" : \"int\"\n+         },\n+         \"Verbose\" : {\n+            \"desc\" : \"Verbose\",\n+            \"rw\" : true,\n+            \"type\" : \"boolean\"\n+         }\n+      },\n+      \"class\" : \"sun.management.MemoryImpl\",\n+      \"desc\" : \"Information on the management interface of the MBean\",\n+      \"op\" : {\n+         \"gc\" : {\n+            \"args\" : [],\n+            \"desc\" : \"gc\",\n+            \"ret\" : \"void\"\n+         }\n+      }\n+   }\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/memory-list.json","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+apiVersion: v1\n+clusters:\n+- cluster:\n+    server: {{request.baseUrl}}\/kubernetes\/\n+  name: test\n+contexts:\n+- context:\n+    cluster: test\n+    user: test\n+  name: test\n+current-context: test\n+kind: Config\n+preferences: {}\n+users:\n+- name: test\n+  user:\n+    token: foobar\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/mock-kube-config.yml","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+{\n+\t\"metadata\": {\n+\t\t\"clusterName\": \"test\",\n+\t\t\"labels\": {\n+\t\t\t\"jolokia\": true\n+\t\t},\n+\t\t\"name\": \"pod-abcdef\",\n+\t\t\"namespace\": \"ns1\",\n+\t\t\"selfLink\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/pod.json","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+{\n+\t\"items\": [{\n+\t\t\"metadata\": {\n+\t\t\t\"clusterName\": \"test\",\n+\t\t\t\"labels\": {\n+\t\t\t\t\"jolokia\": true\n+\t\t\t},\n+\t\t\t\"name\": \"pod-abcdef\",\n+\t\t\t\"namespace\": \"ns1\",\n+\t\t\t\"selfLink\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t\t}\n+\t}]\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/pods.json","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+{\n+   \"request\" : {\n+      \"path\" : \"java.lang\/type=Runtime\",\n+      \"type\" : \"list\"\n+   },\n+   \"status\" : 200,\n+   \"timestamp\" : 1658564737,\n+   \"value\" : {\n+      \"attr\" : {\n+         \"BootClassPath\" : {\n+            \"desc\" : \"BootClassPath\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"BootClassPathSupported\" : {\n+            \"desc\" : \"BootClassPathSupported\",\n+            \"rw\" : false,\n+            \"type\" : \"boolean\"\n+         },\n+         \"ClassPath\" : {\n+            \"desc\" : \"ClassPath\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"InputArguments\" : {\n+            \"desc\" : \"InputArguments\",\n+            \"rw\" : false,\n+            \"type\" : \"[Ljava.lang.String;\"\n+         },\n+         \"LibraryPath\" : {\n+            \"desc\" : \"LibraryPath\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"ManagementSpecVersion\" : {\n+            \"desc\" : \"ManagementSpecVersion\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"Name\" : {\n+            \"desc\" : \"Name\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"ObjectName\" : {\n+            \"desc\" : \"ObjectName\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.ObjectName\"\n+         },\n+         \"Pid\" : {\n+            \"desc\" : \"Pid\",\n+            \"rw\" : false,\n+            \"type\" : \"long\"\n+         },\n+         \"SpecName\" : {\n+            \"desc\" : \"SpecName\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"SpecVendor\" : {\n+            \"desc\" : \"SpecVendor\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"SpecVersion\" : {\n+            \"desc\" : \"SpecVersion\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"StartTime\" : {\n+            \"desc\" : \"StartTime\",\n+            \"rw\" : false,\n+            \"type\" : \"long\"\n+         },\n+         \"SystemProperties\" : {\n+            \"desc\" : \"SystemProperties\",\n+            \"rw\" : false,\n+            \"type\" : \"javax.management.openmbean.TabularData\"\n+         },\n+         \"Uptime\" : {\n+            \"desc\" : \"Uptime\",\n+            \"rw\" : false,\n+            \"type\" : \"long\"\n+         },\n+         \"VmName\" : {\n+            \"desc\" : \"VmName\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"VmVendor\" : {\n+            \"desc\" : \"VmVendor\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         },\n+         \"VmVersion\" : {\n+            \"desc\" : \"VmVersion\",\n+            \"rw\" : false,\n+            \"type\" : \"java.lang.String\"\n+         }\n+      },\n+      \"class\" : \"sun.management.RuntimeImpl\",\n+      \"desc\" : \"Information on the management interface of the MBean\"\n+   }\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/runtime-list.json","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+[\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"Pid\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : 88774\n+   },\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"Name\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : \"88774@Martins-MacBook-Pro-2.local\"\n+   },\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"InputArguments\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : []\n+   },\n+   {\n+      \"request\" : {\n+         \"attribute\" : \"SystemProperties\",\n+         \"mbean\" : \"java.lang:type=Runtime\",\n+         \"type\" : \"read\"\n+      },\n+      \"status\" : 200,\n+      \"timestamp\" : 1658586915,\n+      \"value\" : {\n+         \"apple.awt.application.name\" : \"App\",\n+         \"file.encoding\" : \"UTF-8\",\n+         \"file.separator\" : \"\/\",\n+         \"ftp.nonProxyHosts\" : \"local|*.local|169.254\/16|*.169.254\/16\",\n+         \"hawtio.authenticationEnabled\" : \"false\",\n+         \"hawtio.redirect.scheme\" : \"http\",\n+         \"hawtio.url\" : \"http:\/\/localhost:9090\/hawtio\",\n+         \"http.nonProxyHosts\" : \"local|*.local|169.254\/16|*.169.254\/16\",\n+         \"java.class.path\" : \"\/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar\",\n+         \"java.class.version\" : \"62.0\",\n+         \"java.home\" : \"\/Library\/Java\/JavaVirtualMachines\/temurin-18.jdk\/Contents\/Home\",\n+         \"java.io.tmpdir\" : \"\/var\/folders\/1f\/cdm0073x1mj1swnhtw181_4m0000gn\/T\/\",\n+         \"java.library.path\" : \"\/Users\/marska\/Library\/Java\/Extensions:\/Library\/Java\/Extensions:\/Network\/Library\/Java\/Extensions:\/System\/Library\/Java\/Extensions:\/usr\/lib\/java:.\",\n+         \"java.runtime.name\" : \"OpenJDK Runtime Environment\",\n+         \"java.runtime.version\" : \"18.0.1+10\",\n+         \"java.specification.name\" : \"Java Platform API Specification\",\n+         \"java.specification.vendor\" : \"Oracle Corporation\",\n+         \"java.specification.version\" : \"18\",\n+         \"java.vendor\" : \"Eclipse Adoptium\",\n+         \"java.vendor.url\" : \"https:\/\/adoptium.net\/\",\n+         \"java.vendor.url.bug\" : \"https:\/\/github.com\/adoptium\/adoptium-support\/issues\",\n+         \"java.vendor.version\" : \"Temurin-18.0.1+10\",\n+         \"java.version\" : \"18.0.1\",\n+         \"java.version.date\" : \"2022-04-19\",\n+         \"java.vm.compressedOopsMode\" : \"Zero based\",\n+         \"java.vm.info\" : \"mixed mode, sharing\",\n+         \"java.vm.name\" : \"OpenJDK 64-Bit Server VM\",\n+         \"java.vm.specification.name\" : \"Java Virtual Machine Specification\",\n+         \"java.vm.specification.vendor\" : \"Oracle Corporation\",\n+         \"java.vm.specification.version\" : \"18\",\n+         \"java.vm.vendor\" : \"Eclipse Adoptium\",\n+         \"java.vm.version\" : \"18.0.1+10\",\n+         \"jdk.debug\" : \"release\",\n+         \"line.separator\" : \"\\n\",\n+         \"native.encoding\" : \"UTF-8\",\n+         \"org.eclipse.jetty.util.log.class\" : \"org.eclipse.jetty.util.log.Slf4jLog\",\n+         \"os.arch\" : \"x86_64\",\n+         \"os.name\" : \"Mac OS X\",\n+         \"os.version\" : \"11.6.6\",\n+         \"path.separator\" : \":\",\n+         \"socksNonProxyHosts\" : \"local|*.local|169.254\/16|*.169.254\/16\",\n+         \"sun.arch.data.model\" : \"64\",\n+         \"sun.awt.enableExtraMouseButtons\" : \"true\",\n+         \"sun.boot.library.path\" : \"\/Library\/Java\/JavaVirtualMachines\/temurin-18.jdk\/Contents\/Home\/lib\",\n+         \"sun.cpu.endian\" : \"little\",\n+         \"sun.io.unicode.encoding\" : \"UnicodeBig\",\n+         \"sun.java.command\" : \"\/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar --port 9090\",\n+         \"sun.java.launcher\" : \"SUN_STANDARD\",\n+         \"sun.jnu.encoding\" : \"UTF-8\",\n+         \"sun.management.compiler\" : \"HotSpot 64-Bit Tiered Compilers\",\n+         \"sun.stderr.encoding\" : \"UTF-8\",\n+         \"sun.stdout.encoding\" : \"UTF-8\",\n+         \"user.country\" : \"NO\",\n+         \"user.dir\" : \"\/Users\/marska\/Documents\/dev\/jmc\/jmc8\/releng\/third-party\",\n+         \"user.home\" : \"\/Users\/marska\",\n+         \"user.language\" : \"nb\",\n+         \"user.name\" : \"marska\",\n+         \"user.timezone\" : \"Asia\/Taipei\"\n+      }\n+   }\n+]\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/system-attributes.json","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPath\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\/proxy\/jolokia\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"operation\\\":\\\"gc()\\\",\\\"mbean\\\":\\\"java.lang:type=Memory\\\",\\\"type\\\":\\\"EXEC\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-exec.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-exec.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPath\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\/proxy\/jolokia\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"path\\\":\\\"java.lang\/type=Memory\\\",\\\"type\\\":\\\"LIST\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"memory-list.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-list-memory.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"path\\\":\\\"java.lang\/type=Runtime\\\",\\\"type\\\":\\\"LIST\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"runtime-list.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-list-runtime.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"type\\\":\\\"version\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-version.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-probe.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"type\\\":\\\"VERSION\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-version.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-probe2.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPath\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\/proxy\/jolokia\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"attribute\\\":\\\"Verbose\\\",\\\"mbean\\\":\\\"java.lang:type=Memory\\\",\\\"type\\\":\\\"READ\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-attribute.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-read-attribute.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"{\\\"type\\\":\\\"version\\\"}\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"jolokia-version.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jvm-properties.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -0,0 +1,13 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"url\": \"\/mock-kube-config.yml\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"mock-kube-config.yml\",\n+\t\t\"transformers\": [\n+\t\t\t\"response-template\"\n+\t\t]\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/kube-config.json","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"url\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"pod.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/pod.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"urlPath\": \"\/kubernetes\/api\/v1\/pods\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"pods.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/pods.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"POST\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"bodyPatterns\": [\n+\t\t\t{\n+\t\t\t\t\"equalToJson\": \"[{\\\"attribute\\\":\\\"Pid\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"},{\\\"attribute\\\":\\\"Name\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"},{\\\"attribute\\\":\\\"InputArguments\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"},{\\\"attribute\\\":\\\"SystemProperties\\\",\\\"mbean\\\":\\\"java.lang:type=Runtime\\\",\\\"type\\\":\\\"READ\\\"}]\"\n+\t\t\t}\n+\t\t]\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"system-attributes.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/system-attributes.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -56,0 +56,2 @@\n+\t\t<module>org.openjdk.jmc.jolokia.test<\/module>\n+\t\t<module>org.openjdk.jmc.kubernetes.test<\/module>\n","filename":"application\/tests\/pom.xml","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+   Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2020, 2021, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<?pde version=\"3.8\"?>\n+<target name=\"jmc-target-2020-12\" sequenceNumber=\"47\">\n+    <locations>\n+        <location includeAllPlatforms=\"false\" includeConfigurePhase=\"true\" includeMode=\"planner\" includeSource=\"true\" type=\"InstallableUnit\">\n+            <unit id=\"com.sun.mail.jakarta.mail\" version=\"2.0.1\"\/>\n+            <unit id=\"com.sun.activation.jakarta.activation\" version=\"2.0.1\"\/>\n+            <unit id=\"org.owasp.encoder\" version=\"1.2.3\"\/>\n+            <unit id=\"org.lz4.lz4-java\" version=\"1.8.0\"\/>\n+            <unit id=\"org.hdrhistogram.HdrHistogram\" version=\"2.1.12\"\/>\n+            <unit id=\"org.adoptopenjdk.jemmy-awt-input\" version=\"2.0.0\"\/>\n+            <unit id=\"org.adoptopenjdk.jemmy-browser\" version=\"2.0.0\"\/>\n+            <unit id=\"org.adoptopenjdk.jemmy-core\" version=\"2.0.0\"\/>\n+            <unit id=\"org.adoptopenjdk.jemmy-swt\" version=\"2.0.0\"\/>\n+            <unit id=\"org.eclipse.jetty.websocket.api\" version=\"10.0.5\"\/>\n+            <unit id=\"org.eclipse.jetty.websocket.server\" version=\"10.0.5\"\/>\n+            <unit id=\"org.eclipse.jetty.websocket.servlet\" version=\"10.0.5\"\/>\n+            <unit id=\"org.eclipse.jetty.websocket.javax.server\" version=\"10.0.5\"\/>\n+            <unit id=\"org.apache.aries.spifly.dynamic.bundle\" version=\"1.3.4\"\/>\n+            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.jvm\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.kubernetes.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n+            <repository location=\"http:\/\/localhost:8080\/site\"\/>\n+        <\/location>\n+        <location includeAllPlatforms=\"false\" includeConfigurePhase=\"true\" includeMode=\"planner\" includeSource=\"true\" type=\"InstallableUnit\">\n+            <unit id=\"org.eclipse.equinox.executable.feature.group\" version=\"3.8.1000.v20200915-1508\"\/>\n+            <unit id=\"org.eclipse.pde.feature.group\" version=\"3.14.600.v20201202-1800\"\/>\n+            <unit id=\"org.eclipse.platform.sdk\" version=\"4.18.0.I20201202-1800\"\/>\n+            <repository location=\"http:\/\/download.eclipse.org\/releases\/2020-12\/\"\/>\n+        <\/location>\n+        <location includeAllPlatforms=\"false\" includeConfigurePhase=\"true\" includeMode=\"planner\" includeSource=\"true\" type=\"InstallableUnit\">\n+            <unit id=\"org.eclipse.babel.nls_eclipse_ja.feature.group\" version=\"4.18.0.v20210327075149\"\/>\n+            <unit id=\"org.eclipse.babel.nls_eclipse_zh.feature.group\" version=\"4.18.0.v20210327075149\"\/>\n+            <repository location=\"https:\/\/archive.eclipse.org\/technology\/babel\/update-site\/R0.18.3\/2020-12\/\"\/>\n+        <\/location>\n+    <\/locations>\n+    <targetJRE path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-11\"\/>\n+<\/target>\n","filename":"releng\/platform-definitions\/platform-definition-2020-12\/platform-definition-2020-12.target","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.jvm\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.kubernetes.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-06\/platform-definition-2021-06.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.jvm\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.kubernetes.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-09\/platform-definition-2021-09.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"org.jolokia.org.jolokia.jmx-adapter.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.jvm\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.kubernetes.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-12\/platform-definition-2021-12.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.jvm\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.kubernetes.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-03\/platform-definition-2022-03.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"org.jolokia.jmx-adapter.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.jvm\" version=\"1.7.1\"\/>\n+            <unit id=\"org.jolokia.kubernetes.standalone\" version=\"1.7.1\"\/>\n+            <unit id=\"com.github.tomakehurst.wiremock-standalone\" version=\"2.27.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-06\/platform-definition-2022-06.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,33 +2,26 @@\n-<!--\n-   Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n-\n-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-   The contents of this file are subject to the terms of either the Universal Permissive License\n-   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-\n-   or the following license:\n-\n-   Redistribution and use in source and binary forms, with or without modification, are permitted\n-   provided that the following conditions are met:\n-\n-   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-   and the following disclaimer.\n-\n-   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-   conditions and the following disclaimer in the documentation and\/or other materials provided with\n-   the distribution.\n-\n-   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-   endorse or promote products derived from this software without specific prior written permission.\n-\n-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--->\n-<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+<!-- Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved. \n+\tDO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. The contents \n+\tof this file are subject to the terms of either the Universal Permissive \n+\tLicense v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl or the following \n+\tlicense: Redistribution and use in source and binary forms, with or without \n+\tmodification, are permitted provided that the following conditions are met: \n+\t1. Redistributions of source code must retain the above copyright notice, \n+\tthis list of conditions and the following disclaimer. 2. Redistributions \n+\tin binary form must reproduce the above copyright notice, this list of conditions \n+\tand the following disclaimer in the documentation and\/or other materials \n+\tprovided with the distribution. 3. Neither the name of the copyright holder \n+\tnor the names of its contributors may be used to endorse or promote products \n+\tderived from this software without specific prior written permission. THIS \n+\tSOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \n+\tANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n+\tWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \n+\tIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY \n+\tDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n+\t(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n+\tLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND \n+\tON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n+\t(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF \n+\tTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. -->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"\n+\txmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n@@ -57,0 +50,2 @@\n+\t\t<jolokia.version>1.7.1<\/jolokia.version>\n+\t\t<wiremock.version>2.27.2<\/wiremock.version>\n@@ -118,0 +113,16 @@\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-jmx-adapter:jar:standalone:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-kubernetes:jar:standalone:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-jvm:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>com.github.tomakehurst:wiremock-standalone:${wiremock.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<transitive>false<\/transitive>\n+\t\t\t\t\t\t\t\t<\/artifact>\n@@ -152,1 +163,2 @@\n-\t\t\t\t\t\t\t\t\t<message>Building JMC requires Java 8 version JDK 1.8.0_40 or later<\/message>\n+\t\t\t\t\t\t\t\t\t<message>Building JMC requires Java 8 version JDK 1.8.0_40 or\n+\t\t\t\t\t\t\t\t\t\tlater<\/message>\n","filename":"releng\/third-party\/pom.xml","additions":46,"deletions":34,"binary":false,"changes":80,"status":"modified"}]}