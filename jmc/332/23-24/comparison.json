{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import org.eclipse.core.runtime.Platform;\n@@ -39,0 +40,4 @@\n+import org.openjdk.jmc.ui.common.security.ICredentials;\n+import org.openjdk.jmc.ui.common.security.PersistentCredentials;\n+import org.openjdk.jmc.ui.common.security.SecurityException;\n+import org.osgi.framework.FrameworkUtil;\n@@ -78,0 +83,15 @@\n+\t\n+\tprivate ICredentials getScanningCredentials() throws SecurityException {\n+\t\tfinal String key = getPreferenceStore().getString(P_CREDENTIALS_KEY);\n+\t\tif (key == null) {\n+\t\t\tString username=\"\", password=\"\";\n+\t\t\treturn storeCredentials(username, password);\n+\t\t}\n+\t\treturn new PersistentCredentials(key);\n+\t}\n+\n+\tpublic ICredentials storeCredentials(String username, String password) throws SecurityException {\n+\t\tPersistentCredentials credentials = new PersistentCredentials(username, password, \"kubernetes\");\n+\t\tgetPreferenceStore().setValue(P_CREDENTIALS_KEY, credentials.getExportedId());\n+\t\treturn credentials;\n+\t}\n@@ -80,2 +100,2 @@\n-\tpublic String username() {\n-\t\treturn getPreferenceStore().getString(P_USERNAME);\n+\tpublic String username() throws SecurityException {\n+\t\treturn getScanningCredentials().getUsername();\n@@ -85,2 +105,2 @@\n-\tpublic String password() {\n-\t\treturn getPreferenceStore().getString(P_PASSWORD);\n+\tpublic String password() throws SecurityException {\n+\t\treturn getScanningCredentials().getPassword();\n@@ -104,0 +124,6 @@\n+\t@Override\n+\tpublic void logError(String message, Throwable error) {\n+\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass())).error(message, error);\n+\t\t\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesPlugin.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-import org.eclipse.core.runtime.Platform;\n@@ -66,1 +65,1 @@\n-import org.osgi.framework.FrameworkUtil;\n+import org.openjdk.jmc.ui.common.security.SecurityException;\n@@ -91,0 +90,10 @@\n+\t\n+\tKubernetesScanningParameters settings;\n+\t\n+\tpublic KubernetesDiscoveryListener() {\n+\t\tthis(JmcKubernetesPlugin.getDefault());\n+\t}\n+\t\n+\tKubernetesDiscoveryListener(KubernetesScanningParameters parameters){\n+\t\tthis.settings=parameters;\n+\t}\n@@ -125,0 +134,4 @@\n+\t\treturn scanForJvms();\n+\t}\n+\n+\tMap<String, ServerConnectionDescriptor> scanForJvms() {\n@@ -126,1 +139,0 @@\n-\t\tKubernetesScanningParameters parameters = JmcKubernetesPlugin.getDefault();\n@@ -132,1 +144,1 @@\n-\t\tif (parameters.scanAllContexts()) {\n+\t\tif (settings.scanAllContexts()) {\n@@ -136,1 +148,1 @@\n-\t\t\t\t\tscanContext(found, parameters, context);\n+\t\t\t\t\tscanContext(found, settings, context);\n@@ -139,2 +151,1 @@\n-\t\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass()))\n-\t\t\t\t\t\t.error(Messages.KubernetesDiscoveryListener_UnableToFindContexts, e);\n+\t\t\t\tsettings.logError(Messages.KubernetesDiscoveryListener_UnableToFindContexts, e);\n@@ -144,1 +155,1 @@\n-\t\t\treturn scanContext(found, parameters, null);\n+\t\t\treturn scanContext(found, settings, null);\n@@ -147,1 +158,0 @@\n-\n@@ -155,2 +165,1 @@\n-\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass()))\n-\t\t\t\t\t.error(Messages.KubernetesDiscoveryListener_UnableToScan + context, e);\n+\t\t\tparameters.logError(Messages.KubernetesDiscoveryListener_UnableToScan + context, e);\n@@ -188,3 +197,6 @@\n-\t\tif (notEmpty(parameters.username())) {\n-\t\t\tif (!notEmpty(parameters.password())) {\n-\t\t\t\tthrow new IllegalArgumentException(Messages.KubernetesDiscoveryListener_MustProvidePassword);\n+\t\ttry {\n+\t\t\tif (notEmpty(parameters.username())) {\n+\t\t\t\tif (!notEmpty(parameters.password())) {\n+\t\t\t\t\tthrow new IllegalArgumentException(Messages.KubernetesDiscoveryListener_MustProvidePassword);\n+\t\t\t\t}\n+\t\t\t\tauthorize(headers, client, parameters.username(), parameters.password(), metadata.getNamespace(), env);\n@@ -192,1 +204,2 @@\n-\t\t\tauthorize(headers, client, parameters.username(), parameters.password(), metadata.getNamespace(), env);\n+\t\t} catch (SecurityException e) {\n+\t\t\t\/\/skipping authorization if anything fails\n@@ -245,2 +258,1 @@\n-\t\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass()))\n-\t\t\t\t\t\t.error(Messages.KubernetesDiscoveryListener_ErrConnectingToJvm, e);\n+\t\t\t\tparameters.logError(Messages.KubernetesDiscoveryListener_ErrConnectingToJvm, e);\n@@ -310,1 +322,0 @@\n-\n@@ -312,1 +323,0 @@\n-\n@@ -324,1 +334,1 @@\n-\t\treturn JmcKubernetesPlugin.getDefault().scanForInstances();\n+\t\treturn this.settings.scanForInstances();\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesDiscoveryListener.java","additions":30,"deletions":20,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.logging.Level;\n@@ -43,0 +44,6 @@\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.ModifyListener;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Text;\n@@ -46,1 +53,1 @@\n-import org.openjdk.jmc.ui.misc.PasswordFieldEditor;\n+import org.openjdk.jmc.ui.common.security.SecurityException;\n@@ -49,3 +56,4 @@\n- * This class represents a preference page that is contributed to the Preferences dialog. By\n- * subclassing <samp>FieldEditorPreferencePage<\/samp>, we can use the field support built into JFace\n- * that allows us to create a page that is small and knows how to save, restore and apply itself.\n+ * This class represents a preference page that is contributed to the\n+ * Preferences dialog. By subclassing <samp>FieldEditorPreferencePage<\/samp>, we\n+ * can use the field support built into JFace that allows us to create a page\n+ * that is small and knows how to save, restore and apply itself.\n@@ -53,3 +61,3 @@\n- * This page is used to modify preferences only. They are stored in the preference store that\n- * belongs to the main plug-in class. That way, preferences can be accessed directly via the\n- * preference store.\n+ * This page is used to modify preferences only. They are stored in the\n+ * preference store that belongs to the main plug-in class. That way,\n+ * preferences can be accessed directly via the preference store.\n@@ -60,1 +68,4 @@\n-\tprivate Map<FieldEditor, Object> dependantControls = new WeakHashMap<>();\n+\tprivate Map<Control, Object> dependantControls = new WeakHashMap<>();\n+\tprivate Text userField;\n+\tprivate Text passwordField;\n+\tprivate boolean credentialsDirty;\n@@ -69,3 +80,3 @@\n-\t * Creates the field editors. Field editors are abstractions of the common GUI blocks needed to\n-\t * manipulate various types of preferences. Each field editor knows how to save and restore\n-\t * itself.\n+\t * Creates the field editors. Field editors are abstractions of the common GUI\n+\t * blocks needed to manipulate various types of preferences. Each field editor\n+\t * knows how to save and restore itself.\n@@ -84,2 +95,3 @@\n-\t\tthis.addDependantField(new BooleanFieldEditor(P_SCAN_ALL_CONTEXTS,\n-\t\t\t\tMessages.JmcKubernetesPreferenceForm_AllContexts, getFieldEditorParent()));\n+\t\tBooleanFieldEditor scanContextsEditor = new BooleanFieldEditor(P_SCAN_ALL_CONTEXTS,\n+\t\t\t\tMessages.JmcKubernetesPreferenceForm_AllContexts, getFieldEditorParent());\n+\t\tthis.addDependantField(scanContextsEditor, scanContextsEditor.getDescriptionControl(getFieldEditorParent()));\n@@ -94,7 +106,1 @@\n-\t\tthis.addTextField(new StringFieldEditor(P_USERNAME, Messages.JmcKubernetesPreferenceForm_UsernameLabel,\n-\t\t\t\tgetFieldEditorParent()), Messages.JmcKubernetesPreferenceForm_UsernameTooltip);\n-\t\tPasswordFieldEditor passwordField = new PasswordFieldEditor(P_PASSWORD,\n-\t\t\t\tMessages.JmcKubernetesPreferenceForm_PasswordLabel, getFieldEditorParent());\n-\t\tString passwordTooltip = Messages.JmcKubernetesPreferenceForm_PasswordTooltip;\n-\t\tpasswordField.getTextControl(getFieldEditorParent()).setToolTipText(passwordTooltip);\n-\t\tthis.addDependantField(passwordField);\n+\t\tcreateCredentialFields();\n@@ -106,0 +112,29 @@\n+\tprivate void createCredentialFields() {\n+\t\tLabel userLabel = new Label(getFieldEditorParent(), SWT.NONE);\n+\t\tuserLabel.setText(Messages.JmcKubernetesPreferenceForm_UsernameLabel);\n+\t\tuserLabel.setLayoutData(new GridData());\n+\t\tthis.userField = new Text(getFieldEditorParent(), SWT.SINGLE | SWT.BORDER);\n+\t\tuserField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n+\t\tuserField.setToolTipText(Messages.JmcKubernetesPreferenceForm_UsernameTooltip);\n+\t\tthis.dependantControls.put(userField, null);\n+\n+\t\tLabel passLabel = new Label(getFieldEditorParent(), SWT.NONE);\n+\t\tpassLabel.setText(Messages.JmcKubernetesPreferenceForm_PasswordLabel);\n+\t\tpassLabel.setLayoutData(new GridData());\n+\t\tthis.passwordField = new Text(getFieldEditorParent(), SWT.PASSWORD | SWT.SINGLE | SWT.BORDER);\n+\t\tpasswordField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n+\t\t\n+\t\tJmcKubernetesPlugin plugin = JmcKubernetesPlugin.getDefault();\n+\t\t\n+\t\ttry {\n+\t\t\tuserField.setText(plugin.username());\n+\t\t\tpasswordField.setText(plugin.password());\n+\t\t} catch (SecurityException e) {\n+\t\t\tplugin.getLogger().log(Level.WARNING, \"Could not load kubernetes credentials\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t\t\n+\t\tModifyListener markCredentials = e -> credentialsDirty = true;\n+\t\tthis.userField.addModifyListener(markCredentials);\n+\t\tthis.passwordField.addModifyListener(markCredentials);\n+\t}\n+\n@@ -107,2 +142,3 @@\n-\t\tthis.addDependantField(field);\n-\t\tfield.getTextControl(getFieldEditorParent()).setToolTipText(tooltip);\n+\t\tText textControl = field.getTextControl(getFieldEditorParent());\n+\t\tthis.addDependantField(field, textControl);\n+\t\ttextControl.setToolTipText(tooltip);\n@@ -113,2 +149,2 @@\n-\tprivate void addDependantField(FieldEditor field) {\n-\t\tthis.dependantControls.put(field, null);\n+\tprivate void addDependantField(FieldEditor field, Control control) {\n+\t\tthis.dependantControls.put(control, null);\n@@ -119,2 +155,2 @@\n-\t\tfor (FieldEditor field : this.dependantControls.keySet()) {\n-\t\t\tfield.setEnabled(enabled, getFieldEditorParent());\n+\t\tfor (Control field : this.dependantControls.keySet()) {\n+\t\t\tfield.setEnabled(enabled);\n@@ -132,0 +168,17 @@\n+\t@Override\n+\tpublic boolean performOk() {\n+\t\tupdateCredentialsIfApplicable();\n+\t\treturn super.performOk();\n+\t}\n+\n+\tprivate void updateCredentialsIfApplicable() {\n+\t\tif (this.credentialsDirty) {\n+\t\t\ttry {\n+\t\t\t\tJmcKubernetesPlugin.getDefault().storeCredentials(userField.getText(), passwordField.getText());\n+\t\t\t} catch (SecurityException ex) {\n+\t\t\t\tJmcKubernetesPlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\t\"Could not store kubernetes credentials\", ex); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":79,"deletions":26,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import org.openjdk.jmc.ui.common.security.ICredentials;\n+import org.openjdk.jmc.ui.common.security.SecurityException;\n+\n@@ -43,1 +46,1 @@\n-\tString username();\n+\tString username() throws SecurityException;\n@@ -45,1 +48,1 @@\n-\tString password();\n+\tString password() throws SecurityException;\n@@ -52,0 +55,4 @@\n+\t\n+\tICredentials storeCredentials(String username, String password) throws SecurityException;\n+\t\n+\tvoid logError(String message, Throwable error);\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/KubernetesScanningParameters.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,3 +47,1 @@\n-\tpublic static final String P_USERNAME = \"username\"; \/\/$NON-NLS-1$\n-\tpublic static final String P_PASSWORD = \"password\"; \/\/$NON-NLS-1$\n-\n+\tpublic static final String P_CREDENTIALS_KEY = \"kubernetes.scanning.credentials\"; \/\/$NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/PreferenceConstants.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,323 @@\n+package org.openjdk.jmc.kubernetes;\n+\/* Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2021, Kantega AS. All rights reserved. \n+* \n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* The contents of this file are subject to the terms of either the Universal Permissive License\n+* v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+*\n+* or the following license:\n+*\n+* Redistribution and use in source and binary forms, with or without modification, are permitted\n+* provided that the following conditions are met:\n+* \n+* 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+* and the following disclaimer.\n+* \n+* 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+* conditions and the following disclaimer in the documentation and\/or other materials provided with\n+* the distribution.\n+* \n+* 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+* endorse or promote products derived from this software without specific prior written permission.\n+* \n+* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+* FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+* WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+*\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.HttpClients;\n+import org.awaitility.Awaitility;\n+import org.jolokia.util.Base64Util;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.IDescribable;\n+import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n+import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n+import org.openjdk.jmc.ui.common.jvm.JVMType;\n+import org.openjdk.jmc.ui.common.security.ICredentials;\n+import org.openjdk.jmc.ui.common.security.InMemoryCredentials;\n+import org.openjdk.jmc.ui.common.security.SecurityException;\n+\n+import com.github.tomakehurst.wiremock.client.WireMock;\n+import com.github.tomakehurst.wiremock.core.WireMockConfiguration;\n+import com.github.tomakehurst.wiremock.extension.responsetemplating.ResponseTemplateTransformer;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+\n+import io.fabric8.kubernetes.client.Config;\n+import snippet.INCLUDING;\n+import snippet.OR;\n+\n+\/**\n+ * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are\n+ * functional. In order to be able to test this in a contained environment, the\n+ * kubernetes API is mocked with wiremock.\n+ *\/\n+@SuppressWarnings(\"restriction\")\n+public class JmcKubernetesTest {\n+\n+\tstatic class TestParameters implements KubernetesScanningParameters {\n+\t\tpublic boolean scanForInstances, scanAllContexts;\n+\t\tpublic String jolokiaPort, jolokiaPath = \"\/jolokia\/\", jolokiaProtocol, requireLabel;\n+\t\tpublic InMemoryCredentials credentials;\n+\n+\t\t@Override\n+\t\tpublic boolean scanForInstances() {\n+\t\t\treturn this.scanForInstances;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean scanAllContexts() {\n+\t\t\treturn this.scanAllContexts;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaPort() {\n+\t\t\treturn this.jolokiaPort;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String username() throws SecurityException {\n+\t\t\treturn this.credentials == null ? null : this.credentials.getUsername();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String password() throws SecurityException {\n+\t\t\treturn this.credentials == null ? null : this.credentials.getPassword();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaPath() {\n+\t\t\treturn this.jolokiaPath;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaProtocol() {\n+\t\t\treturn this.jolokiaProtocol;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String requireLabel() {\n+\t\t\treturn this.requireLabel;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ICredentials storeCredentials(String username, String password) throws SecurityException {\n+\t\t\treturn this.credentials = new InMemoryCredentials(username, password);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void logError(String message, Throwable error) {\n+\t\t\tSystem.out.println(message);\n+\t\t\terror.printStackTrace(System.out);\n+\t\t}\n+\t}\n+\n+\t@ClassRule\n+\tpublic static WireMockRule wiremock = new WireMockRule(\n+\t\t\tWireMockConfiguration.options().extensions(new ResponseTemplateTransformer(false)).port(0));\n+\n+\tstatic final String jolokiaUrl = \"service:jmx:kubernetes:\/\/\/ns1\/pod-abcdef\/jolokia\";\n+\tstatic final KubernetesScanningParameters disableScanning = new TestParameters();\n+\n+\tprivate static MBeanServerConnection jolokiaConnection;\n+\n+\t@BeforeClass\n+\tpublic static void connect() throws Exception {\n+\t\tCloseableHttpResponse configResponse = HttpClients.createDefault()\n+\t\t\t\t.execute(new HttpGet(wiremock.baseUrl() + \"\/mock-kube-config.yml\"));\n+\t\tAssert.assertEquals(configResponse.getStatusLine().getStatusCode(), 200);\n+\t\tFile configFile = File.createTempFile(\"mock-kube-config\", \".yml\");\n+\t\tconfigResponse.getEntity().writeTo(new FileOutputStream(configFile));\n+\t\t\/\/ we set this so the KubernetesDiscoveryListener will work\n+\t\tSystem.setProperty(Config.KUBERNETES_KUBECONFIG_FILE, configFile.getAbsolutePath());\n+\t\tjolokiaConnection = getKubernetesMBeanConnector();\n+\t}\n+\n+\t@Test\n+\tpublic void testExecuteOperation() throws InstanceNotFoundException, MalformedObjectNameException, MBeanException,\n+\t\t\tReflectionException, MalformedURLException, IOException {\n+\t\tjolokiaConnection.invoke(new ObjectName(\"java.lang:type=Memory\"), \"gc\", new Object[0], new String[0]);\n+\t}\n+\n+\t@Test\n+\tpublic void testReadAttribute()\n+\t\t\tthrows InstanceNotFoundException, AttributeNotFoundException, InvalidAttributeValueException,\n+\t\t\tMalformedObjectNameException, MBeanException, ReflectionException, MalformedURLException, IOException {\n+\t\tMBeanServerConnection jmxConnection = jolokiaConnection;\n+\t\tassertOneSingleAttribute(jmxConnection);\n+\n+\t}\n+\n+\tprivate void assertOneSingleAttribute(MBeanServerConnection jmxConnection) throws MalformedObjectNameException,\n+\t\t\tMBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException, IOException {\n+\t\tObjectName objectName = new ObjectName(\"java.lang:type=Memory\");\n+\t\tString attribute = \"Verbose\";\n+\t\tAssert.assertEquals(false, jmxConnection.getAttribute(objectName, attribute));\n+\t}\n+\n+\t@Before\n+\tpublic void reset() {\n+\t\twiremock.resetAll();\n+\t\twiremock.resetRequests();\n+\t}\n+\n+\tprivate static MBeanServerConnection getKubernetesMBeanConnector() throws IOException, MalformedURLException {\n+\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider().newJMXConnector(new JMXServiceURL(jolokiaUrl),\n+\t\t\t\tCollections.emptyMap());\n+\t\tconnector.connect();\n+\t\tMBeanServerConnection connection = connector.getMBeanServerConnection();\n+\t\treturn connection;\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithMostlyDefaultSettings() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\t\/\/ Set config so that scanning takes place\n+\t\tparameters.scanForInstances = true;\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithPathFromAnnotation() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.jolokiaPath = \"${kubernetes\/annotation\/jolokiaPath}\";\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithPortFromAnnotation() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.jolokiaPort = \"${kubernetes\/annotation\/jolokiaPort}\";\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithBasicAuthFromSecret() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-auth\/username}\",\n+\t\t\t\t\"${kubernetes\/secret\/jolokia-auth\/password}\");\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(\n+\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"admin:admin\".getBytes()))));\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithAuthFromProperties() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-properties\/user}\",\n+\t\t\t\t\"${kubernetes\/secret\/jolokia-properties\/password}\");\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(\n+\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"admin:secret\".getBytes()))));\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithAuthDirectlyFromSettings() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"user\", \"***\");\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(\n+\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"user:***\".getBytes()))));\n+\t}\n+\n+\tprivate ICredentials storeCredentials(String user, String password) throws SecurityException {\n+\t\treturn JmcKubernetesPlugin.getDefault().storeCredentials(user, password);\n+\t}\n+\n+\tprivate void testThatJvmIsFound(TestParameters parameters) throws Exception {\n+\n+\t\tfinal KubernetesDiscoveryListener scanner = new KubernetesDiscoveryListener(parameters);\n+\t\tfinal Map<String, IServerDescriptor> foundVms = new HashMap<>();\n+\t\tIDescriptorListener descriptorListener = new IDescriptorListener() {\n+\t\t\tpublic void onDescriptorDetected(IServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n+\t\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n+\t\t\t\tfoundVms.put(serverDescriptor.getGUID(), serverDescriptor);\n+\t\t\t}\n+\n+\t\t\tpublic void onDescriptorRemoved(String descriptorId) {\n+\t\t\t\tfoundVms.remove(descriptorId);\n+\t\t\t}\n+\t\t};\n+\t\tscanner.addDescriptorListener(descriptorListener);\n+\n+\t\ttry {\n+\t\t\t\/\/ Test that at least one VM (the one running the test was discovered)\n+\n+\t\t\tAwaitility.await().atMost(Duration.ofSeconds(5)).until(() -> !foundVms.isEmpty());\n+\t\t\tIServerDescriptor descriptor = foundVms.get(\"pod-abcdef\");\n+\t\t\tAssert.assertNotNull(descriptor);\n+\t\t\tAssert.assertEquals(\n+\t\t\t\t\t\"[JVMDescriptor] Java command: \/Users\/marska\/Downloads\/hawtio-app-2.9.1.jar --port 9090 PID: 88774\",\n+\t\t\t\t\tdescriptor.getJvmInfo().toString());\n+\t\t\tAssert.assertEquals(JVMType.HOTSPOT, descriptor.getJvmInfo().getJvmType());\n+\t\t\tAssert.assertEquals(\"18.0.1\", descriptor.getJvmInfo().getJavaVersion());\n+\t\t\tAssert.assertTrue(descriptor instanceof IConnectionDescriptor);\n+\t\t\tIConnectionDescriptor connectDescriptor = (IConnectionDescriptor) descriptor;\n+\t\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider()\n+\t\t\t\t\t.newJMXConnector(connectDescriptor.createJMXServiceURL(), connectDescriptor.getEnvironment());\n+\t\t\tconnector.connect();\n+\t\t\tassertOneSingleAttribute(connector.getMBeanServerConnection());\n+\n+\t\t} finally {\n+\t\t\t\/\/ Tell scanner thread to exit\n+\t\t\tscanner.shutdown();\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":323,"deletions":0,"binary":false,"changes":323,"status":"added"},{"patch":"@@ -22,0 +22,1 @@\n+ org.openjdk.jmc.kubernetes,\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-import org.eclipse.core.runtime.preferences.InstanceScope;\n+import org.jolokia.util.Base64Util;\n@@ -62,0 +62,1 @@\n+import org.junit.Before;\n@@ -66,1 +67,1 @@\n-import org.openjdk.jmc.kubernetes.preferences.PreferenceConstants;\n+import org.openjdk.jmc.kubernetes.preferences.KubernetesScanningParameters;\n@@ -71,0 +72,3 @@\n+import org.openjdk.jmc.ui.common.security.ICredentials;\n+import org.openjdk.jmc.ui.common.security.InMemoryCredentials;\n+import org.openjdk.jmc.ui.common.security.SecurityException;\n@@ -72,0 +76,1 @@\n+import com.github.tomakehurst.wiremock.client.WireMock;\n@@ -86,0 +91,57 @@\n+\tstatic class TestParameters implements KubernetesScanningParameters {\n+\t\tpublic boolean scanForInstances, scanAllContexts;\n+\t\tpublic String jolokiaPort, jolokiaPath = \"\/jolokia\/\", jolokiaProtocol, requireLabel;\n+\t\tpublic InMemoryCredentials credentials;\n+\n+\t\t@Override\n+\t\tpublic boolean scanForInstances() {\n+\t\t\treturn this.scanForInstances;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean scanAllContexts() {\n+\t\t\treturn this.scanAllContexts;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaPort() {\n+\t\t\treturn this.jolokiaPort;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String username() throws SecurityException {\n+\t\t\treturn this.credentials == null ? null : this.credentials.getUsername();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String password() throws SecurityException {\n+\t\t\treturn this.credentials == null ? null : this.credentials.getPassword();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaPath() {\n+\t\t\treturn this.jolokiaPath;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String jolokiaProtocol() {\n+\t\t\treturn this.jolokiaProtocol;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String requireLabel() {\n+\t\t\treturn this.requireLabel;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ICredentials storeCredentials(String username, String password) throws SecurityException {\n+\t\t\treturn this.credentials = new InMemoryCredentials(username, password);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void logError(String message, Throwable error) {\n+\t\t\tSystem.out.println(message);\n+\t\t\terror.printStackTrace(System.out);\n+\t\t}\n+\t}\n+\n@@ -116,0 +178,7 @@\n+\t\tMBeanServerConnection jmxConnection = jolokiaConnection;\n+\t\tassertOneSingleAttribute(jmxConnection);\n+\n+\t}\n+\n+\tprivate void assertOneSingleAttribute(MBeanServerConnection jmxConnection) throws MalformedObjectNameException,\n+\t\t\tMBeanException, AttributeNotFoundException, InstanceNotFoundException, ReflectionException, IOException {\n@@ -118,1 +187,2 @@\n-\t\tAssert.assertEquals(false, jolokiaConnection.getAttribute(objectName, attribute));\n+\t\tAssert.assertEquals(false, jmxConnection.getAttribute(objectName, attribute));\n+\t}\n@@ -120,0 +190,4 @@\n+\t@Before\n+\tpublic void reset() {\n+\t\twiremock.resetAll();\n+\t\twiremock.resetRequests();\n@@ -131,1 +205,1 @@\n-\tpublic void testDiscover() {\n+\tpublic void testDiscoverWithMostlyDefaultSettings() throws Exception {\n@@ -133,0 +207,1 @@\n+\t\tTestParameters parameters = new TestParameters();\n@@ -134,2 +209,53 @@\n-\t\tInstanceScope.INSTANCE.getNode(JmcKubernetesPlugin.PLUGIN_ID).put(PreferenceConstants.P_SCAN_FOR_INSTANCES,\n-\t\t\t\t\"true\");\n+\t\tparameters.scanForInstances = true;\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithPathFromAnnotation() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.jolokiaPath = \"${kubernetes\/annotation\/jolokiaPath}\";\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithPortFromAnnotation() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.jolokiaPort = \"${kubernetes\/annotation\/jolokiaPort}\";\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithBasicAuthFromSecret() throws Exception {\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-auth\/username}\",\n+\t\t\t\t\"${kubernetes\/secret\/jolokia-auth\/password}\");\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(\n+\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"admin:admin\".getBytes()))));\n+\t}\n+\n+\t@Test\n+\tpublic void testDiscoverWithAuthFromProperties() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"${kubernetes\/secret\/jolokia-properties\/user}\",\n+\t\t\t\t\"${kubernetes\/secret\/jolokia-properties\/password}\");\n+\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(\n+\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"admin:secret\".getBytes()))));\n+\t}\n@@ -137,1 +263,13 @@\n-\t\ttestThatJVMIsFound();\n+\t@Test\n+\tpublic void testDiscoverWithAuthDirectlyFromSettings() throws Exception {\n+\n+\t\tTestParameters parameters = new TestParameters();\n+\t\tparameters.scanForInstances = true;\n+\t\tparameters.credentials = new InMemoryCredentials(\"user\", \"***\");\n+\t\ttestThatJvmIsFound(parameters);\n+\t\t\/\/ Verify that the expected authorization was picked up\n+\t\tWireMock.verify(WireMock\n+\t\t\t\t.postRequestedFor(\n+\t\t\t\t\t\tWireMock.urlPathMatching(\"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.withHeader(\"X-jolokia-authorization\",\n+\t\t\t\t\t\tWireMock.equalTo(\"Basic \" + Base64Util.encode(\"user:***\".getBytes()))));\n@@ -140,1 +278,3 @@\n-\tprivate void testThatJVMIsFound() {\n+\tprivate void testThatJvmIsFound(TestParameters parameters) throws Exception {\n+\n+\t\tfinal KubernetesDiscoveryListener scanner = new KubernetesDiscoveryListener(parameters);\n@@ -152,2 +292,2 @@\n-\t\tKubernetesDiscoveryListener discoveryListener = new KubernetesDiscoveryListener();\n-\t\tdiscoveryListener.addDescriptorListener(descriptorListener);\n+\t\tscanner.addDescriptorListener(descriptorListener);\n+\n@@ -156,0 +296,1 @@\n+\n@@ -164,0 +305,7 @@\n+\t\t\tAssert.assertTrue(descriptor instanceof IConnectionDescriptor);\n+\t\t\tIConnectionDescriptor connectDescriptor = (IConnectionDescriptor) descriptor;\n+\t\t\tJMXConnector connector = new JmcKubernetesJmxConnectionProvider()\n+\t\t\t\t\t.newJMXConnector(connectDescriptor.createJMXServiceURL(), connectDescriptor.getEnvironment());\n+\t\t\tconnector.connect();\n+\t\t\tassertOneSingleAttribute(connector.getMBeanServerConnection());\n+\n@@ -165,1 +313,2 @@\n-\t\t\tdiscoveryListener.removeDescriptorListener(descriptorListener);\n+\t\t\t\/\/ Tell scanner thread to exit\n+\t\t\tscanner.shutdown();\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":160,"deletions":11,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -0,0 +1,19 @@\n+{\n+    \"apiVersion\": \"v1\",\n+    \"data\": {\n+        \"password\": \"YWRtaW4=\",\n+        \"username\": \"YWRtaW4=\"\n+    },\n+    \"kind\": \"Secret\",\n+    \"metadata\": {\n+        \"annotations\": {\n+            \"kubectl.kubernetes.io\/last-applied-configuration\": \"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Secret\\\",\\\"metadata\\\":{\\\"annotations\\\":{},\\\"name\\\":\\\"jolokia-auth\\\",\\\"namespace\\\":\\\"jfr\\\"},\\\"stringData\\\":{\\\"password\\\":\\\"admin\\\",\\\"username\\\":\\\"admin\\\"},\\\"type\\\":\\\"kubernetes.io\/basic-auth\\\"}\\n\"\n+        },\n+        \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+        \"name\": \"jolokia-auth\",\n+        \"namespace\": \"jfr\",\n+        \"resourceVersion\": \"130\",\n+        \"uid\": \"e1563217-ef08-481d-b2e3-233fa3040b56\"\n+    },\n+    \"type\": \"kubernetes.io\/basic-auth\"\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-basic-auth-secret.json","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -0,0 +1,15 @@\n+{\n+    \"apiVersion\": \"v1\",\n+    \"data\": {\n+        \"jolokia.properties\": \"aG9zdD0wLjAuMC4wCnBhc3N3b3JkPXNlY3JldAp1c2VyPWFkbWluCnBvcnQ9ODc3OApkaXNjb3ZlcnlFbmFibGVkPXRydWUKZGlzY292ZXJ5QWdlbnRVcmw9aHR0cDovLyR7aG9zdH06ODc3OC9qb2xva2lhLwpwb2xpY3lMb2NhdGlvbj1jbGFzc3BhdGg6L0JPT1QtSU5GL2NsYXNzZXMvam9sb2tpYS1hY2Nlc3MueG1s\"\n+    },\n+    \"kind\": \"Secret\",\n+    \"metadata\": {\n+        \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+        \"name\": \"jolokia-properties\",\n+        \"namespace\": \"jfr\",\n+        \"resourceVersion\": \"147\",\n+        \"uid\": \"025bf17a-cff5-46e6-8499-dd9d6de43fa9\"\n+    },\n+    \"type\": \"Opaque\"\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/jolokia-properties-secret.json","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -2,9 +2,15 @@\n-\t\"items\": [{\n-\t\t\"metadata\": {\n-\t\t\t\"clusterName\": \"test\",\n-\t\t\t\"labels\": {\n-\t\t\t\t\"jolokia\": true\n-\t\t\t},\n-\t\t\t\"name\": \"pod-abcdef\",\n-\t\t\t\"namespace\": \"ns1\",\n-\t\t\t\"selfLink\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t\"items\": [\n+\t\t{\n+\t\t\t\"metadata\": {\n+\t\t\t\t\"clusterName\": \"test\",\n+\t\t\t\t\"labels\": {\n+\t\t\t\t\t\"jolokia\": true\n+\t\t\t\t},\n+\t\t\t\t\"annotations\": {\n+\t\t\t\t\t\"jolokiaPort\": 8778,\n+\t\t\t\t\t\"jolokiaPath\": \"jolokia\"\n+\t\t\t\t},\n+\t\t\t\t\"name\": \"pod-abcdef\",\n+\t\t\t\t\"namespace\": \"ns1\",\n+\t\t\t\t\"selfLink\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\"\n+\t\t\t}\n@@ -12,1 +18,1 @@\n-\t}]\n+\t]\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/pods.json","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+{\n+    \"apiVersion\": \"v1\",\n+    \"items\": [\n+        {\n+            \"apiVersion\": \"v1\",\n+            \"data\": {\n+                \"password\": \"YWRtaW4=\",\n+                \"username\": \"YWRtaW4=\"\n+            },\n+            \"kind\": \"Secret\",\n+            \"metadata\": {\n+                \"annotations\": {\n+                    \"kubectl.kubernetes.io\/last-applied-configuration\": \"{\\\"apiVersion\\\":\\\"v1\\\",\\\"kind\\\":\\\"Secret\\\",\\\"metadata\\\":{\\\"annotations\\\":{},\\\"name\\\":\\\"jolokia-auth\\\",\\\"namespace\\\":\\\"ns1\\\"},\\\"stringData\\\":{\\\"password\\\":\\\"admin\\\",\\\"username\\\":\\\"admin\\\"},\\\"type\\\":\\\"kubernetes.io\/basic-auth\\\"}\\n\"\n+                },\n+                \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+                \"name\": \"jolokia-auth\",\n+                \"namespace\": \"ns1\",\n+                \"resourceVersion\": \"130\",\n+                \"uid\": \"e1563217-ef08-481d-b2e3-233fa3040b56\"\n+            },\n+            \"type\": \"kubernetes.io\/basic-auth\"\n+        },\n+        {\n+            \"apiVersion\": \"v1\",\n+            \"data\": {\n+                \"jolokia.properties\": \"aG9zdD0wLjAuMC4wCnBhc3N3b3JkPXNlY3JldAp1c2VyPWFkbWluCnBvcnQ9ODc3OApkaXNjb3ZlcnlFbmFibGVkPXRydWUKZGlzY292ZXJ5QWdlbnRVcmw9aHR0cDovLyR7aG9zdH06ODc3OC9qb2xva2lhLwpwb2xpY3lMb2NhdGlvbj1jbGFzc3BhdGg6L0JPT1QtSU5GL2NsYXNzZXMvam9sb2tpYS1hY2Nlc3MueG1s\"\n+            },\n+            \"kind\": \"Secret\",\n+            \"metadata\": {\n+                \"creationTimestamp\": \"2022-05-20T13:59:12Z\",\n+                \"name\": \"jolokia-properties\",\n+                \"namespace\": \"ns1\",\n+                \"resourceVersion\": \"147\",\n+                \"uid\": \"025bf17a-cff5-46e6-8499-dd9d6de43fa9\"\n+            },\n+            \"type\": \"Opaque\"\n+        }\n+    ],\n+    \"kind\": \"List\",\n+    \"metadata\": {\n+        \"resourceVersion\": \"\"\n+    }\n+}\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/__files\/secrets.json","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"urlPath\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\/proxy\/jolokia\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-list-memory.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-list-runtime.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-probe.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-probe2.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"urlPath\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef\/proxy\/jolokia\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jolokia-read-attribute.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/jvm-properties.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+{\n+\t\"request\": {\n+\t\t\"method\": \"GET\",\n+\t\t\"url\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/secrets\"\n+\t},\n+\t\"response\": {\n+\t\t\"status\": 200,\n+\t\t\"bodyFileName\": \"secrets.json\"\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/secrets.json","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -4,1 +4,1 @@\n-\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia\/?\",\n+\t\t\"urlPathPattern\": \"\/kubernetes\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\",\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/resources\/mappings\/system-attributes.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}