{"files":[{"patch":"@@ -95,1 +95,1 @@\n-\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/configuration<\/jmc.config.path>\n","filename":"application\/org.openjdk.jmc.jolokia\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,4 +45,3 @@\n- * \n- * The {@code AbstractCachedDescriptorProvider} keeps a list of identified JVMs that can be refreshed in the background by some means of\n- * discovering JVMs. \n- * Listeners will be notified of any changes.\n+ * The {@code AbstractCachedDescriptorProvider} keeps a list of identified JVMs that can be\n+ * refreshed in the background by some means of discovering JVMs. Listeners will be notified of any\n+ * changes.\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/AbstractCachedDescriptorProvider.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -59,3 +59,2 @@\n- * Make JMC specific adjustments to Jolokia JMX connection. \n- * May consider to use the decorator pattern if differences are big,\n- * but for now subclass\n+ * Make JMC specific adjustments to Jolokia JMX connection. May consider to use the decorator\n+ * pattern if differences are big, but for now subclass\n@@ -94,1 +93,2 @@\n-\t\t\t\tmodifiedOperations[i] = stealOrBuildOperationInfo(mBeanInfo.getOperations()[i], checkForLocalOperationInfo(name));\n+\t\t\t\tmodifiedOperations[i] = stealOrBuildOperationInfo(mBeanInfo.getOperations()[i],\n+\t\t\t\t\t\tcheckForLocalOperationInfo(name));\n@@ -134,3 +134,3 @@\n-\t * Build MBeanOperationInfo by taking information from the corresponding \n-\t * MBean in the local JVM for a more precise signature. \n-\t * If it is not available locally, attempt to construct it from the metadata from Jolokia.\n+\t * Build MBeanOperationInfo by taking information from the corresponding MBean in the local JVM\n+\t * for a more precise signature. If it is not available locally, attempt to construct it from\n+\t * the metadata from Jolokia.\n@@ -138,1 +138,2 @@\n-\t * @param original MBeanInfo from Jolokia list.\n+\t * @param original\n+\t *            MBeanInfo from Jolokia list.\n@@ -143,4 +144,3 @@\n-\tprivate MBeanOperationInfo stealOrBuildOperationInfo(MBeanOperationInfo original, Optional<MBeanInfo> localInfo) {\t\t\t\n-\t\treturn localInfo\n-\t\t\t\t.map(info -> checkForMatchingLocalOperation(original, info))\/\/ first attempt to get descriptor from local copy\n-\t\t\t\t.orElseGet(()->reverseEngineerOperationInfo(original));\/\/ if not, reverse engineer descriptor from operation info\n+\tprivate MBeanOperationInfo stealOrBuildOperationInfo(MBeanOperationInfo original, Optional<MBeanInfo> localInfo) {\n+\t\treturn localInfo.map(info -> checkForMatchingLocalOperation(original, info))\/\/ first attempt to get descriptor from local copy\n+\t\t\t\t.orElseGet(() -> reverseEngineerOperationInfo(original));\/\/ if not, reverse engineer descriptor from operation info\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnection.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -100,2 +101,2 @@\n-\t * Best effort to extract JVM information from a connection if everything works. \n-\t * Can be adjusted to support different flavors of JVM.\n+\t * Best effort to extract JVM information from a connection if everything works. Can be adjusted\n+\t * to support different flavors of JVM.\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaAgentDescriptor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/configuration<\/jmc.config.path>\n","filename":"application\/org.openjdk.jmc.kubernetes\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnection.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnectionProvider.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,3 +81,2 @@\n- * This class attempts to connect to JVMs in pods running in kubernetes in a\n- * background thread. Enablement and parameters for the scanning is given by\n- * user preferences.\n+ * This class attempts to connect to JVMs in pods running in kubernetes in a background thread.\n+ * Enablement and parameters for the scanning is given by user preferences.\n@@ -126,1 +125,1 @@\n-\t\t\t\/\/ runs\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ runs\n@@ -164,2 +163,2 @@\n-\tprivate Map<String, ServerConnectionDescriptor> scanContext(Map<String, ServerConnectionDescriptor> found,\n-\t\t\tKubernetesScanningParameters parameters, String context) {\n+\tprivate Map<String, ServerConnectionDescriptor> scanContext(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n@@ -174,2 +173,2 @@\n-\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(Map<String, ServerConnectionDescriptor> found,\n-\t\t\tKubernetesScanningParameters parameters, String context) {\n+\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n@@ -194,2 +193,3 @@\n-\tprivate void scanPod(Map<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters,\n-\t\t\tString context, KubernetesClient client, Pod pod) {\n+\tprivate void scanPod(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context,\n+\t\tKubernetesClient client, Pod pod) {\n@@ -281,2 +281,3 @@\n-\tprivate void authorize(HashMap<String, String> headers, KubernetesClient client, String username, String password,\n-\t\t\tString namespace, Map<String, Object> jmxEnv) {\n+\tprivate void authorize(\n+\t\tHashMap<String, String> headers, KubernetesClient client, String username, String password, String namespace,\n+\t\tMap<String, Object> jmxEnv) {\n@@ -303,1 +304,1 @@\n-\t\tjmxEnv.put(JMXConnector.CREDENTIALS, new String[] { username, password });\n+\t\tjmxEnv.put(JMXConnector.CREDENTIALS, new String[] {username, password});\n@@ -307,1 +308,1 @@\n-\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesDiscoveryListener.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -57,4 +57,3 @@\n- * This class represents a preference page that is contributed to the\n- * Preferences dialog. By subclassing <samp>FieldEditorPreferencePage<\/samp>, we\n- * can use the field support built into JFace that allows us to create a page\n- * that is small and knows how to save, restore and apply itself.\n+ * This class represents a preference page that is contributed to the Preferences dialog. By\n+ * subclassing <samp>FieldEditorPreferencePage<\/samp>, we can use the field support built into JFace\n+ * that allows us to create a page that is small and knows how to save, restore and apply itself.\n@@ -62,3 +61,3 @@\n- * This page is used to modify preferences only. They are stored in the\n- * preference store that belongs to the main plug-in class. That way,\n- * preferences can be accessed directly via the preference store.\n+ * This page is used to modify preferences only. They are stored in the preference store that\n+ * belongs to the main plug-in class. That way, preferences can be accessed directly via the\n+ * preference store.\n@@ -81,3 +80,3 @@\n-\t * Creates the field editors. Field editors are abstractions of the common GUI\n-\t * blocks needed to manipulate various types of preferences. Each field editor\n-\t * knows how to save and restore itself.\n+\t * Creates the field editors. Field editors are abstractions of the common GUI blocks needed to\n+\t * manipulate various types of preferences. Each field editor knows how to save and restore\n+\t * itself.\n@@ -181,1 +180,1 @@\n-\t\t\t\tthis.credentialsDirty=false;\n+\t\t\t\tthis.credentialsDirty = false;\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-\t\n+\n@@ -57,1 +57,1 @@\n-\t\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/KubernetesScanningParameters.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,3 +85,2 @@\n- * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are\n- * functional. In order to be able to test this in a contained environment, the\n- * kubernetes API is mocked with wiremock.\n+ * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are functional. In order\n+ * to be able to test this in a contained environment, the kubernetes API is mocked with wiremock.\n@@ -289,2 +288,3 @@\n-\t\t\tpublic void onDescriptorDetected(IServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n-\t\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n+\t\t\tpublic void onDescriptorDetected(\n+\t\t\t\tIServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n+\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-\t\t<spotless.config.path>${basedir}\/..\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/..\/configuration<\/jmc.config.path>\n@@ -68,0 +68,5 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.jolokia<\/groupId>\n+\t\t\t<artifactId>jolokia-jmx-adapter<\/artifactId>\n+\t\t\t<version>${jolokia.version}<\/version>\n+\t\t<\/dependency>\n@@ -78,1 +83,2 @@\n-\t\t\t\t\t<!-- Start jolokia on a random free port to avoid requiring specific \n+\t\t\t\t\t<!-- Start jolokia on a random free port to avoid requiring\n+\t\t\t\t\tspecific \n@@ -80,1 +86,2 @@\n-\t\t\t\t\t<argLine>-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-jvm\/${jolokia.version}\/jolokia-jvm-${jolokia.version}.jar=port=0,discover=true<\/argLine>\n+\t\t\t\t\t<argLine>\n+\t\t\t\t\t\t-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-jvm\/${jolokia.version}\/jolokia-jvm-${jolokia.version}.jar=port=0,discover=true<\/argLine>\n@@ -82,1 +89,1 @@\n-\t\t\t<\/plugin>\t\n+\t\t\t<\/plugin>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/pom.xml","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-\t\t<spotless.config.path>${basedir}\/..\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/..\/configuration<\/jmc.config.path>\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,3 +84,2 @@\n- * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are\n- * functional. In order to be able to test this in a contained environment, the\n- * kubernetes API is mocked with wiremock.\n+ * I test that JMX connections done with JmcKubernetesJmxConnectionProvider are functional. In order\n+ * to be able to test this in a contained environment, the kubernetes API is mocked with wiremock.\n@@ -240,2 +239,1 @@\n-\t\t\t\t.postRequestedFor(\n-\t\t\t\t\t\tWireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.postRequestedFor(WireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n@@ -257,2 +255,1 @@\n-\t\t\t\t.postRequestedFor(\n-\t\t\t\t\t\tWireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.postRequestedFor(WireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n@@ -272,2 +269,1 @@\n-\t\t\t\t.postRequestedFor(\n-\t\t\t\t\t\tWireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n+\t\t\t\t.postRequestedFor(WireMock.urlPathMatching(\"\/api\/v1\/namespaces\/ns1\/pods\/pod-abcdef.*\/proxy\/jolokia.*\"))\n@@ -283,2 +279,3 @@\n-\t\t\tpublic void onDescriptorDetected(IServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n-\t\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n+\t\t\tpublic void onDescriptorDetected(\n+\t\t\t\tIServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n+\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/src\/test\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesTest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"}]}