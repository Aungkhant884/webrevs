{"files":[{"patch":"@@ -45,4 +45,2 @@\n- * \n- * I cache a list if identified JVMs that can be refreshed in the background\n- * by some means of discovering JVMs and notify changes of any changes\n- *\n+ * I cache a list if identified JVMs that can be refreshed in the background by some means of\n+ * discovering JVMs and notify changes of any changes\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/AbstractCachedDescriptorProvider.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,5 +58,2 @@\n- * \n- *         Make JMC specific adjustments to Jolokia JMX connection May consider\n- *         to create a decorator pattern if differences are big but begin with a\n- *         subclass\n- *\n+ * Make JMC specific adjustments to Jolokia JMX connection May consider to create a decorator\n+ * pattern if differences are big but begin with a subclass\n@@ -104,4 +101,4 @@\n-\t\t\tfinal MBeanInfo modifiedMBeanInfo = new MBeanInfo(mBeanInfo.getClassName(), mBeanInfo.getDescription(), mBeanInfo.getAttributes(),\n-\t\t\t\t\tmBeanInfo.getConstructors(), modifiedOperations, mBeanInfo.getNotifications());\n-\t\t\tthis.mbeanInfoCache.put(name,\n-\t\t\t\t\tmodifiedMBeanInfo);\n+\t\t\tfinal MBeanInfo modifiedMBeanInfo = new MBeanInfo(mBeanInfo.getClassName(), mBeanInfo.getDescription(),\n+\t\t\t\t\tmBeanInfo.getAttributes(), mBeanInfo.getConstructors(), modifiedOperations,\n+\t\t\t\t\tmBeanInfo.getNotifications());\n+\t\t\tthis.mbeanInfoCache.put(name, modifiedMBeanInfo);\n@@ -112,1 +109,1 @@\n-\t\n+\n@@ -118,1 +115,1 @@\n-\t\t\tif(object instanceof TabularData) {\n+\t\t\tif (object instanceof TabularData) {\n@@ -120,1 +117,2 @@\n-\t\t\t\t\tparams[i]=new Converters().getToJsonConverter().convertToJson(object, new LinkedList<String>(), JsonConvertOptions.DEFAULT);\n+\t\t\t\t\tparams[i] = new Converters().getToJsonConverter().convertToJson(object, new LinkedList<String>(),\n+\t\t\t\t\t\t\tJsonConvertOptions.DEFAULT);\n@@ -124,1 +122,1 @@\n-\t\t\t\n+\n@@ -130,2 +128,2 @@\n-\t * build \/ reverse engineer MBeanOperationInfo by using the local one if it is a\n-\t * match or try to reverse engineer otherwise\n+\t * build \/ reverse engineer MBeanOperationInfo by using the local one if it is a match or try to\n+\t * reverse engineer otherwise\n@@ -134,1 +132,2 @@\n-\t * @param localInfo MBeanInfo from this JVM to use for getting descriptor\n+\t * @param localInfo\n+\t *            MBeanInfo from this JVM to use for getting descriptor\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnection.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -47,4 +47,4 @@\n-        if(!\"jolokia\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n-            throw new MalformedURLException(\"I only serve Jolokia connections\"); \/\/$NON-NLS-1$\n-        }\n-        return new JmcJolokiaJmxConnector(serviceURL, environment);\n+\t\tif (!\"jolokia\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(\"I only serve Jolokia connections\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn new JmcJolokiaJmxConnector(serviceURL, environment);\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnectionProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-\t\n+\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-\t\n+\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,2 +62,2 @@\n-\tpublic static final JVMDescriptor NULL_DESCRIPTOR = new JVMDescriptor(null, null, null,null, null, null, null, null, false,\n-\t\t\tConnectable.UNKNOWN);\n+\tpublic static final JVMDescriptor NULL_DESCRIPTOR = new JVMDescriptor(null, null, null, null, null, null, null,\n+\t\t\tnull, false, Connectable.UNKNOWN);\n@@ -98,2 +98,2 @@\n-\t * Best effort to extract JVM information from a connection if everything works.\n-\t * Can be adjusted to support different flavors of JVM\n+\t * Best effort to extract JVM information from a connection if everything works. Can be adjusted\n+\t * to support different flavors of JVM\n@@ -105,1 +105,1 @@\n-\t\t\t\t\tnew String[] { \"Pid\", \"Name\", \"InputArguments\", \"SystemProperties\" }); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$ \/\/$NON-NLS-4$\n+\t\t\t\t\tnew String[] {\"Pid\", \"Name\", \"InputArguments\", \"SystemProperties\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$ \/\/$NON-NLS-4$\n@@ -107,1 +107,1 @@\n-\t\t\tString arguments=null, javaCommand=null, javaVersion=null, vmName=null, vmVendor = null;\n+\t\t\tString arguments = null, javaCommand = null, javaVersion = null, vmName = null, vmVendor = null;\n@@ -159,1 +159,1 @@\n-\t\t\t\t\t\t} else if(key.equalsIgnoreCase(\"java.version\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.version\")) { \/\/$NON-NLS-1$\n@@ -162,3 +162,3 @@\n-\t\t\t\t\t\t\tvmName=value;\n-\t\t\t\t\t\t} else if(key.equalsIgnoreCase(\"java.vm.vendor\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tvmVendor=value;\n+\t\t\t\t\t\t\tvmName = value;\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.vm.vendor\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tvmVendor = value;\n@@ -174,1 +174,1 @@\n-\t\t} catch (RuntimeException|IOException|InstanceNotFoundException|MalformedObjectNameException ignore) {\n+\t\t} catch (RuntimeException | IOException | InstanceNotFoundException | MalformedObjectNameException ignore) {\n@@ -200,1 +200,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaAgentDescriptor.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-\t\tMap<String, ServerConnectionDescriptor> found=new HashMap<>();\n-\t\tif(!JmcJolokiaPlugin.getDefault().getPreferenceStore().getBoolean(P_SCAN)) {\n+\t\tMap<String, ServerConnectionDescriptor> found = new HashMap<>();\n+\t\tif (!JmcJolokiaPlugin.getDefault().getPreferenceStore().getBoolean(P_SCAN)) {\n@@ -79,1 +79,0 @@\n-\n@@ -84,1 +83,1 @@\n-\t\n+\n@@ -94,2 +93,0 @@\n-\t\n-\t\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaDiscoveryListener.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/ServerConnectionDescriptor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,3 +42,1 @@\n-public class JolokiaPreferencePage\n-\textends FieldEditorPreferencePage\n-\timplements IWorkbenchPreferencePage {\n+public class JolokiaPreferencePage extends FieldEditorPreferencePage implements IWorkbenchPreferencePage {\n@@ -51,1 +49,0 @@\n-\t\n@@ -54,4 +51,1 @@\n-\t\taddField(\n-\t\t\tnew BooleanFieldEditor(\n-\t\t\t\tPreferenceConstants.P_SCAN,\n-\t\t\t\tMessages.JolokiaPreferencePage_Label,\n+\t\taddField(new BooleanFieldEditor(PreferenceConstants.P_SCAN, Messages.JolokiaPreferencePage_Label,\n@@ -62,1 +56,3 @@\n-\t\/* (non-Javadoc)\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n@@ -67,2 +63,2 @@\n-\t\n-}\n\\ No newline at end of file\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/JolokiaPreferencePage.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-\n@@ -44,1 +43,0 @@\n-\t\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceConstants.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()\n+\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#\n+\t * initializeDefaultPreferences()\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceInitializer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -47,4 +47,4 @@\n-        if(!\"kubernetes\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n-            throw new MalformedURLException(\"I only serve Kubernetes connections\"); \/\/$NON-NLS-1$\n-        }\n-        return new JmcKubernetesJmxConnector(serviceURL, environment);\n+\t\tif (!\"kubernetes\".equals(serviceURL.getProtocol())) { \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(\"I only serve Kubernetes connections\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn new JmcKubernetesJmxConnector(serviceURL, environment);\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnectionProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-\t\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesJmxConnector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n-public class JmcKubernetesPlugin extends MCAbstractUIPlugin implements KubernetesScanningParameters, PreferenceConstants{\n+public class JmcKubernetesPlugin extends MCAbstractUIPlugin\n+\t\timplements KubernetesScanningParameters, PreferenceConstants {\n@@ -95,1 +96,1 @@\n-\t\n+\n@@ -110,1 +111,1 @@\n-\t\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesPlugin.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,2 +83,4 @@\n-\tprivate final static Pattern SECRET_PATTERN = Pattern.compile(\"\\\\$\\\\{kubernetes\/secret\/(?<secretName>[^\/]+)\/(?<itemName>[^\\\\}]+)}\"); \/\/$NON-NLS-1$\n-\tprivate final static Pattern ATTRIBUTE_PATTERN = Pattern.compile(\"\\\\$\\\\{kubernetes\/annotation\/(?<annotationName>[^\/]+)}\"); \/\/$NON-NLS-1$\n+\tprivate final static Pattern SECRET_PATTERN = Pattern\n+\t\t\t.compile(\"\\\\$\\\\{kubernetes\/secret\/(?<secretName>[^\/]+)\/(?<itemName>[^\\\\}]+)}\"); \/\/$NON-NLS-1$\n+\tprivate final static Pattern ATTRIBUTE_PATTERN = Pattern\n+\t\t\t.compile(\"\\\\$\\\\{kubernetes\/annotation\/(?<annotationName>[^\/]+)}\"); \/\/$NON-NLS-1$\n@@ -101,1 +103,1 @@\n-\tprivate long contextsCached=0L;\n+\tprivate long contextsCached = 0L;\n@@ -108,1 +110,1 @@\n-\t\t\t\t\t\t\t\t\/\/ runs\n+\t\t\t\/\/ runs\n@@ -113,1 +115,1 @@\n-\t\tthis.contextsCached=System.currentTimeMillis();\n+\t\tthis.contextsCached = System.currentTimeMillis();\n@@ -122,1 +124,1 @@\n-\t\tif(!isEnabled()) {\n+\t\tif (!isEnabled()) {\n@@ -145,2 +147,2 @@\n-\tprivate Map<String, ServerConnectionDescriptor> scanContext(Map<String, ServerConnectionDescriptor> found,\n-\t\t\tKubernetesScanningParameters parameters, String context) {\n+\tprivate Map<String, ServerConnectionDescriptor> scanContext(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n@@ -156,2 +158,2 @@\n-\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(Map<String, ServerConnectionDescriptor> found,\n-\t\t\tKubernetesScanningParameters parameters, String context) {\n+\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n@@ -176,2 +178,3 @@\n-\tprivate void scanPod(Map<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters,\n-\t\t\tString context, KubernetesClient client, Pod pod) {\n+\tprivate void scanPod(\n+\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context,\n+\t\tKubernetesClient client, Pod pod) {\n@@ -235,2 +238,2 @@\n-\t\t\t\tKubernetesJvmDescriptor descriptor = new KubernetesJvmDescriptor(metadata, jvmDescriptor,\n-\t\t\t\t\t\tjmxServiceURL, env);\n+\t\t\t\tKubernetesJvmDescriptor descriptor = new KubernetesJvmDescriptor(metadata, jvmDescriptor, jmxServiceURL,\n+\t\t\t\t\t\tenv);\n@@ -239,1 +242,2 @@\n-\t\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass())).error(Messages.KubernetesDiscoveryListener_ErrConnectingToJvm, e);\n+\t\t\t\tPlatform.getLog(FrameworkUtil.getBundle(getClass()))\n+\t\t\t\t\t\t.error(Messages.KubernetesDiscoveryListener_ErrConnectingToJvm, e);\n@@ -257,2 +261,3 @@\n-\tprivate void authorize(HashMap<String, String> headers, KubernetesClient client, String username, String password,\n-\t\t\tString namespace, Map<String, Object> jmxEnv) {\n+\tprivate void authorize(\n+\t\tHashMap<String, String> headers, KubernetesClient client, String username, String password, String namespace,\n+\t\tMap<String, Object> jmxEnv) {\n@@ -283,1 +288,1 @@\n-\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesDiscoveryListener.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-\t\n+\n@@ -53,2 +53,3 @@\n-\t\n-\tpublic KubernetesJvmDescriptor(ObjectMeta metadata, JVMDescriptor jvmDescriptor, JMXServiceURL connectUrl, Map<String, Object> env) {\n+\n+\tpublic KubernetesJvmDescriptor(ObjectMeta metadata, JVMDescriptor jvmDescriptor, JMXServiceURL connectUrl,\n+\t\t\tMap<String, Object> env) {\n@@ -56,1 +57,1 @@\n-\t\tthis.metadata = metadata;\t\n+\t\tthis.metadata = metadata;\n@@ -76,1 +77,0 @@\n-\n@@ -79,2 +79,2 @@\n-\t\tfinal Object context=this.env.get(KubernetesJmxConnector.KUBERNETES_CLIENT_CONTEXT);\n-\t\tif(context!=null) {\n+\t\tfinal Object context = this.env.get(KubernetesJmxConnector.KUBERNETES_CLIENT_CONTEXT);\n+\t\tif (context != null) {\n@@ -86,1 +86,0 @@\n-\n@@ -92,1 +91,0 @@\n-\n@@ -98,1 +96,0 @@\n-\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesJvmDescriptor.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -49,4 +49,3 @@\n- * This class represents a preference page that is contributed to the\n- * Preferences dialog. By subclassing <samp>FieldEditorPreferencePage<\/samp>, we\n- * can use the field support built into JFace that allows us to create a page\n- * that is small and knows how to save, restore and apply itself.\n+ * This class represents a preference page that is contributed to the Preferences dialog. By\n+ * subclassing <samp>FieldEditorPreferencePage<\/samp>, we can use the field support built into JFace\n+ * that allows us to create a page that is small and knows how to save, restore and apply itself.\n@@ -54,3 +53,3 @@\n- * This page is used to modify preferences only. They are stored in the\n- * preference store that belongs to the main plug-in class. That way,\n- * preferences can be accessed directly via the preference store.\n+ * This page is used to modify preferences only. They are stored in the preference store that\n+ * belongs to the main plug-in class. That way, preferences can be accessed directly via the\n+ * preference store.\n@@ -71,3 +70,3 @@\n-\t * Creates the field editors. Field editors are abstractions of the common GUI\n-\t * blocks needed to manipulate various types of preferences. Each field editor\n-\t * knows how to save and restore itself.\n+\t * Creates the field editors. Field editors are abstractions of the common GUI blocks needed to\n+\t * manipulate various types of preferences. Each field editor knows how to save and restore\n+\t * itself.\n@@ -134,1 +133,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+\n@@ -39,0 +40,1 @@\n+\n@@ -40,0 +42,1 @@\n+\n@@ -41,0 +44,1 @@\n+\n@@ -42,0 +46,1 @@\n+\n@@ -43,0 +48,1 @@\n+\n@@ -44,0 +50,1 @@\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/KubernetesScanningParameters.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-\t\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/PreferenceConstants.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,2 @@\n-\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#initializeDefaultPreferences()\n+\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#\n+\t * initializeDefaultPreferences()\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/PreferenceInitializer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}