{"files":[{"patch":"@@ -79,0 +79,1 @@\n+\n@@ -80,2 +81,3 @@\n- * This class attempts to connect to JVMs in pods running in kubernetes in a background thread.\n- * Enablement and parameters for the scanning is given by user preferences.\n+ * This class attempts to connect to JVMs in pods running in kubernetes in a\n+ * background thread. Enablement and parameters for the scanning is given by\n+ * user preferences.\n@@ -90,1 +92,1 @@\n-\t\n+\n@@ -92,1 +94,1 @@\n-\t\n+\n@@ -96,3 +98,3 @@\n-\t\n-\tKubernetesDiscoveryListener(KubernetesScanningParameters parameters){\n-\t\tthis.settings=parameters;\n+\n+\tKubernetesDiscoveryListener(KubernetesScanningParameters parameters) {\n+\t\tthis.settings = parameters;\n@@ -121,1 +123,3 @@\n-\t\tif (contexts != null && contextsCached > configPath.lastModified()) {\/\/ the YAML parsing is soo incredibly sloow, hence cache context names for later\n+\t\tif (contexts != null && contextsCached > configPath.lastModified()) {\/\/ the YAML parsing is soo incredibly\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ sloow, hence cache context names for\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ later\n@@ -125,1 +129,1 @@\n-\t\t\/\/reload config if kubeconfig has been modified since we cached the config\n+\t\t\/\/ reload config if kubeconfig has been modified since we cached the config\n@@ -160,2 +164,2 @@\n-\tprivate Map<String, ServerConnectionDescriptor> scanContext(\n-\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n+\tprivate Map<String, ServerConnectionDescriptor> scanContext(Map<String, ServerConnectionDescriptor> found,\n+\t\t\tKubernetesScanningParameters parameters, String context) {\n@@ -170,2 +174,2 @@\n-\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(\n-\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context) {\n+\tprivate Map<String, ServerConnectionDescriptor> scanContextUnsafe(Map<String, ServerConnectionDescriptor> found,\n+\t\t\tKubernetesScanningParameters parameters, String context) {\n@@ -190,3 +194,2 @@\n-\tprivate void scanPod(\n-\t\tMap<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters, String context,\n-\t\tKubernetesClient client, Pod pod) {\n+\tprivate void scanPod(Map<String, ServerConnectionDescriptor> found, KubernetesScanningParameters parameters,\n+\t\t\tString context, KubernetesClient client, Pod pod) {\n@@ -205,1 +208,1 @@\n-\t\t\t\/\/skipping authorization if anything fails\n+\t\t\t\/\/ skipping authorization if anything fails\n@@ -207,1 +210,2 @@\n-\t\tfinal StringBuilder url = new StringBuilder(metadata.getSelfLink());\n+\t\tfinal StringBuilder url = new StringBuilder(\"\/api\/\").append(pod.getApiVersion()).append(\"\/namespaces\/\")\n+\t\t\t\t.append(metadata.getNamespace()).append(\"\/pods\/\");\n@@ -221,1 +225,1 @@\n-\t\t\turl.insert(url.lastIndexOf(podName), protocol + \":\"); \/\/$NON-NLS-1$\n+\t\t\turl.append(protocol).append(':');\n@@ -226,0 +230,1 @@\n+\t\turl.append(podName);\n@@ -276,3 +281,2 @@\n-\tprivate void authorize(\n-\t\tHashMap<String, String> headers, KubernetesClient client, String username, String password, String namespace,\n-\t\tMap<String, Object> jmxEnv) {\n+\tprivate void authorize(HashMap<String, String> headers, KubernetesClient client, String username, String password,\n+\t\t\tString namespace, Map<String, Object> jmxEnv) {\n@@ -299,1 +303,1 @@\n-\t\tjmxEnv.put(JMXConnector.CREDENTIALS, new String[] {username, password});\n+\t\tjmxEnv.put(JMXConnector.CREDENTIALS, new String[] { username, password });\n@@ -303,1 +307,1 @@\n-\t@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/KubernetesDiscoveryListener.java","additions":28,"deletions":24,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import org.openjdk.jmc.ui.common.security.CredentialsNotAvailableException;\n@@ -126,1 +127,1 @@\n-\t\t\n+\n@@ -128,1 +129,1 @@\n-\t\t\n+\n@@ -132,0 +133,2 @@\n+\t\t} catch (CredentialsNotAvailableException ignore) {\n+\t\t\t\/\/ ignore if credentials are not stored\n@@ -135,1 +138,1 @@\n-\t\t\n+\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,24 +2,33 @@\n-<!-- Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved. \n-\tCopyright (c) 2021, Kantega AS. All rights reserved. DO NOT ALTER OR REMOVE \n-\tCOPYRIGHT NOTICES OR THIS FILE HEADER. The contents of this file are subject \n-\tto the terms of either the Universal Permissive License v 1.0 as shown at \n-\thttp:\/\/oss.oracle.com\/licenses\/upl or the following license: Redistribution \n-\tand use in source and binary forms, with or without modification, are permitted \n-\tprovided that the following conditions are met: 1. Redistributions of source \n-\tcode must retain the above copyright notice, this list of conditions and \n-\tthe following disclaimer. 2. Redistributions in binary form must reproduce \n-\tthe above copyright notice, this list of conditions and the following disclaimer \n-\tin the documentation and\/or other materials provided with the distribution. \n-\t3. Neither the name of the copyright holder nor the names of its contributors \n-\tmay be used to endorse or promote products derived from this software without \n-\tspecific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT \n-\tHOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, \n-\tBUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS \n-\tFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n-\tHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, \n-\tEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT \n-\tOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS \n-\tINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, \n-\tSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN \n-\tANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY \n-\tOF SUCH DAMAGE. -->\n+<!--   \n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Kantega AS. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n@@ -73,0 +82,1 @@\n+\n","filename":"application\/tests\/org.openjdk.jmc.kubernetes.test\/pom.xml","additions":34,"deletions":24,"binary":false,"changes":58,"status":"modified"}]}