{"files":[{"patch":"@@ -43,0 +43,3 @@\n+import org.openjdk.jmc.ui.common.security.SecurityManagerFactory;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+import org.osgi.framework.BundleContext;\n@@ -68,0 +71,11 @@\n+\tprivate void ensureNeededCredentialsAreUnlocked() {\n+\t\tif (getScanningCredentials() != null && SecurityManagerFactory.getSecurityManager().isLocked()) {\n+\t\t\tDisplayToolkit.safeAsyncExec(() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\tSecurityManagerFactory.getSecurityManager().unlock();\n+\t\t\t\t} catch (SecurityException e) {\n+\t\t\t\t\tlogError(\"Error unlocking credentials needed for kubernetes scanning\", e);\/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t}\n@@ -71,1 +85,6 @@\n-\t\treturn getPreferenceStore().getBoolean(P_SCAN_FOR_INSTANCES);\n+\t\t\/\/ If credentials are locked and credentials are required, the scanner thread\n+\t\t\/\/ will get hung\n+\t\t\/\/ therefore await credentials store to be unlocked before proceeding to scan\n+\t\treturn getPreferenceStore().getBoolean(P_SCAN_FOR_INSTANCES)\n+\t\t\t\t&& (getScanningCredentials() == null || !SecurityManagerFactory.getSecurityManager().isLocked());\n+\n@@ -83,8 +102,4 @@\n-\t\n-\tprivate ICredentials getScanningCredentials() throws SecurityException {\n-\t\tfinal String key = getPreferenceStore().getString(P_CREDENTIALS_KEY);\n-\t\tif (key == null) {\n-\t\t\tString username=\"\", password=\"\";\n-\t\t\treturn storeCredentials(username, password);\n-\t\t}\n-\t\treturn new PersistentCredentials(key);\n+\n+\tprivate PersistentCredentials getScanningCredentials() {\n+\t\tString key = getPreferenceStore().getString(P_CREDENTIALS_KEY);\n+\t\treturn key == null ? null : new PersistentCredentials(key);\n@@ -94,1 +109,1 @@\n-\t\tPersistentCredentials credentials = new PersistentCredentials(username, password, \"kubernetes\");\n+\t\tPersistentCredentials credentials = new PersistentCredentials(username, password, \"kubernetes\");\/\/$NON-NLS-1$\n@@ -101,1 +116,6 @@\n-\t\treturn getScanningCredentials().getUsername();\n+\t\tfinal PersistentCredentials cred = getScanningCredentials();\n+\t\tif (cred == null) {\n+\t\t\treturn \"\";\/\/$NON-NLS-1$\n+\t\t} else {\n+\t\t\treturn cred.getUsername();\n+\t\t}\n@@ -106,1 +126,6 @@\n-\t\treturn getScanningCredentials().getPassword();\n+\t\tfinal PersistentCredentials cred = getScanningCredentials();\n+\t\tif (cred == null) {\n+\t\t\treturn \"\";\/\/$NON-NLS-1$\n+\t\t} else {\n+\t\t\treturn cred.getPassword();\n+\t\t}\n@@ -127,1 +152,6 @@\n-\t\t\n+\t}\n+\n+\t@Override\n+\tpublic void start(BundleContext context) throws Exception {\n+\t\tsuper.start(context);\n+\t\tthis.ensureNeededCredentialsAreUnlocked();\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/JmcKubernetesPlugin.java","additions":43,"deletions":13,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -181,0 +181,1 @@\n+\t\t\t\tthis.credentialsDirty=false;\n","filename":"application\/org.openjdk.jmc.kubernetes\/src\/main\/java\/org\/openjdk\/jmc\/kubernetes\/preferences\/JmcKubernetesPreferenceForm.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}