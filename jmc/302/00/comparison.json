{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,16 +86,18 @@\n-\t\tGarbageCollectionsInfo aggregate = resultProvider.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n-\t\tif (aggregate != null) {\n-\t\t\tint gcLockers = aggregate.getGcLockers();\n-\t\t\tif (gcLockers > 0) {\n-\t\t\t\tint gcCount = aggregate.getGcCount();\n-\t\t\t\tIQuantity limit = valueProvider.getPreferenceValue(GC_LOCKER_RATIO_LIMIT);\n-\t\t\t\tdouble ratio = gcLockers \/ gcCount;\n-\t\t\t\tdouble score = RulesToolkit.mapExp74(ratio, limit.doubleValue());\n-\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n-\t\t\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRuleFactory_TEXT_INFO))\n-\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.GcLockerRuleFactory_TEXT_INFO_LONG))\n-\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n-\t\t\t\t\t\t.addResult(GC_LOCKER_RATIO, UnitLookup.PERCENT_UNITY.quantity(ratio)).build();\n-\t\t\t} else {\n-\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.OK)\n-\t\t\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRuleFactory_TEXT_OK)).build();\n+\t\tif (resultProvider != null) {\n+\t\t\tGarbageCollectionsInfo aggregate = resultProvider.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n+\t\t\tif (aggregate != null) {\n+\t\t\t\tint gcLockers = aggregate.getGcLockers();\n+\t\t\t\tif (gcLockers > 0) {\n+\t\t\t\t\tint gcCount = aggregate.getGcCount();\n+\t\t\t\t\tIQuantity limit = valueProvider.getPreferenceValue(GC_LOCKER_RATIO_LIMIT);\n+\t\t\t\t\tdouble ratio = gcLockers \/ gcCount;\n+\t\t\t\t\tdouble score = RulesToolkit.mapExp74(ratio, limit.doubleValue());\n+\t\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n+\t\t\t\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRuleFactory_TEXT_INFO))\n+\t\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.GcLockerRuleFactory_TEXT_INFO_LONG))\n+\t\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t\t.addResult(GC_LOCKER_RATIO, UnitLookup.PERCENT_UNITY.quantity(ratio)).build();\n+\t\t\t\t} else {\n+\t\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.OK)\n+\t\t\t\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRuleFactory_TEXT_OK)).build();\n+\t\t\t\t}\n@@ -103,3 +105,0 @@\n-\t\t} else {\n-\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.NA)\n-\t\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRule_TEXT_NA)).build();\n@@ -107,0 +106,3 @@\n+\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.NA)\n+\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRule_TEXT_NA)).build();\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/GcLockerRule.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,13 +78,18 @@\n-\t\t\t\tGarbageCollectionsInfo aggregate = resultProvider.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n-\t\t\t\tif (aggregate.foundNonRequestedSerialOldGc()) {\n-\t\t\t\t\tCollectorType oldCollectorType = CollectorType.getOldCollectorType(items);\n-\t\t\t\t\tif (oldCollectorType == CollectorType.CMS) {\n-\t\t\t\t\t\treturn ResultBuilder.createFor(GcStallRule.this, valueProvider).setSeverity(Severity.WARNING)\n-\t\t\t\t\t\t\t\t.setSummary(Messages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_CMS))\n-\t\t\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_CMS_LONG))\n-\t\t\t\t\t\t\t\t.build();\n-\t\t\t\t\t} else if (oldCollectorType == CollectorType.G1_OLD) {\n-\t\t\t\t\t\treturn ResultBuilder.createFor(GcStallRule.this, valueProvider).setSeverity(Severity.WARNING)\n-\t\t\t\t\t\t\t\t.setSummary(Messages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_G1))\n-\t\t\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_G1_LONG))\n-\t\t\t\t\t\t\t\t.build();\n+\t\t\t\tif (resultProvider != null) {\n+\t\t\t\t\tGarbageCollectionsInfo aggregate = resultProvider.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n+\t\t\t\t\tif (aggregate.foundNonRequestedSerialOldGc()) {\n+\t\t\t\t\t\tCollectorType oldCollectorType = CollectorType.getOldCollectorType(items);\n+\t\t\t\t\t\tif (oldCollectorType == CollectorType.CMS) {\n+\t\t\t\t\t\t\treturn ResultBuilder.createFor(GcStallRule.this, valueProvider)\n+\t\t\t\t\t\t\t\t\t.setSeverity(Severity.WARNING)\n+\t\t\t\t\t\t\t\t\t.setSummary(Messages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_CMS))\n+\t\t\t\t\t\t\t\t\t.setExplanation(\n+\t\t\t\t\t\t\t\t\t\t\tMessages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_CMS_LONG))\n+\t\t\t\t\t\t\t\t\t.build();\n+\t\t\t\t\t\t} else if (oldCollectorType == CollectorType.G1_OLD) {\n+\t\t\t\t\t\t\treturn ResultBuilder.createFor(GcStallRule.this, valueProvider)\n+\t\t\t\t\t\t\t\t\t.setSeverity(Severity.WARNING)\n+\t\t\t\t\t\t\t\t\t.setSummary(Messages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_G1))\n+\t\t\t\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.SerialOldRuleFactory_TEXT_WARN_G1_LONG))\n+\t\t\t\t\t\t\t\t\t.build();\n+\t\t\t\t\t\t}\n@@ -92,0 +97,3 @@\n+\t\t\t\t} else {\n+\t\t\t\t\treturn ResultBuilder.createFor(GcStallRule.this, valueProvider).setSeverity(Severity.NA)\n+\t\t\t\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRule_TEXT_NA)).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/GcStallRule.java","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,6 +101,18 @@\n-\t\tGarbageCollectionsInfo aggregate = rp.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n-\t\tif (aggregate.getObjectCountGCs() > 0) {\n-\t\t\tdouble score = RulesToolkit.mapExp74(aggregate.getObjectCountGCs(), limit.longValue());\n-\t\t\tString longMessage = Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_INFO_LONG);\n-\t\t\tif (RulesToolkit.isEventsEnabled(items, JdkTypeIDs.OBJECT_COUNT)) {\n-\t\t\t\tlongMessage += \"\\n\" + Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_INFO_LONG_JFR); \/\/$NON-NLS-1$\n+\t\tif (rp != null) {\n+\t\t\tGarbageCollectionsInfo aggregate = rp.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n+\t\t\tif (aggregate.getObjectCountGCs() > 0) {\n+\t\t\t\tdouble score = RulesToolkit.mapExp74(aggregate.getObjectCountGCs(), limit.longValue());\n+\t\t\t\tString longMessage = Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_INFO_LONG);\n+\t\t\t\tif (RulesToolkit.isEventsEnabled(items, JdkTypeIDs.OBJECT_COUNT)) {\n+\t\t\t\t\tlongMessage += \"\\n\" + Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_INFO_LONG_JFR); \/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t\treturn ResultBuilder.createFor(this, vp).setSeverity(Severity.get(score))\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_INFO))\n+\t\t\t\t\t\t.setExplanation(longMessage)\n+\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t.addResult(OBJECT_COUNT_GCS, UnitLookup.NUMBER_UNITY.quantity(aggregate.getObjectCountGCs()))\n+\t\t\t\t\t\t.build();\n+\t\t\t} else {\n+\t\t\t\treturn ResultBuilder.createFor(this, vp).setSeverity(Severity.OK)\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_OK))\n+\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_OK_LONG)).build();\n@@ -108,9 +120,0 @@\n-\t\t\treturn ResultBuilder.createFor(this, vp).setSeverity(Severity.get(score))\n-\t\t\t\t\t.setSummary(Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_INFO))\n-\t\t\t\t\t.setExplanation(longMessage).addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n-\t\t\t\t\t.addResult(OBJECT_COUNT_GCS, UnitLookup.NUMBER_UNITY.quantity(aggregate.getObjectCountGCs()))\n-\t\t\t\t\t.build();\n-\t\t} else {\n-\t\t\treturn ResultBuilder.createFor(this, vp).setSeverity(Severity.OK)\n-\t\t\t\t\t.setSummary(Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_OK))\n-\t\t\t\t\t.setExplanation(Messages.getString(Messages.HeapInspectionGcRuleFactory_TEXT_OK_LONG)).build();\n@@ -118,0 +121,3 @@\n+\n+\t\treturn ResultBuilder.createFor(this, vp).setSeverity(Severity.NA)\n+\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRule_TEXT_NA)).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/HeapInspectionRule.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -198,1 +198,2 @@\n-\t\t\theapUsedRatio = UnitLookup.PERCENT_UNITY.quantity(avgHeapUsed.ratioTo(maxHeapSize));\n+\t\t\tif (avgHeapUsed != null)\n+\t\t\t\theapUsedRatio = UnitLookup.PERCENT_UNITY.quantity(avgHeapUsed.ratioTo(maxHeapSize));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/StringDeduplicationRule.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,13 +99,15 @@\n-\t\tGarbageCollectionsInfo aggregate = resultProvider.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n-\t\tIQuantity limit = valueProvider.getPreferenceValue(SYSTEM_GC_RATIO_LIMIT);\n-\t\tif (aggregate.getSystemGcCount() > 0) {\n-\t\t\tdouble systemGcRatio = aggregate.getSystemGcCount() \/ aggregate.getGcCount();\n-\t\t\tdouble score = RulesToolkit.mapExp100(systemGcRatio, limit.doubleValue());\n-\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n-\t\t\t\t\t.setSummary(Messages.getString(Messages.SystemGcRuleFactory_TEXT_INFO))\n-\t\t\t\t\t.setExplanation(Messages.getString(Messages.SystemGcRuleFactory_TEXT_INFO_LONG))\n-\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n-\t\t\t\t\t.addResult(SYSTEM_GC_RATIO, UnitLookup.PERCENT_UNITY.quantity(systemGcRatio)).build();\n-\t\t} else {\n-\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.OK)\n-\t\t\t\t\t.setSummary(Messages.getString(Messages.SystemGcRuleFactory_TEXT_OK)).build();\n+\t\tif (resultProvider != null) {\n+\t\t\tGarbageCollectionsInfo aggregate = resultProvider.getResultValue(GarbageCollectionInfoRule.GC_INFO);\n+\t\t\tIQuantity limit = valueProvider.getPreferenceValue(SYSTEM_GC_RATIO_LIMIT);\n+\t\t\tif (aggregate.getSystemGcCount() > 0) {\n+\t\t\t\tdouble systemGcRatio = aggregate.getSystemGcCount() \/ aggregate.getGcCount();\n+\t\t\t\tdouble score = RulesToolkit.mapExp100(systemGcRatio, limit.doubleValue());\n+\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.get(score))\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.SystemGcRuleFactory_TEXT_INFO))\n+\t\t\t\t\t\t.setExplanation(Messages.getString(Messages.SystemGcRuleFactory_TEXT_INFO_LONG))\n+\t\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t\t.addResult(SYSTEM_GC_RATIO, UnitLookup.PERCENT_UNITY.quantity(systemGcRatio)).build();\n+\t\t\t} else {\n+\t\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.OK)\n+\t\t\t\t\t\t.setSummary(Messages.getString(Messages.SystemGcRuleFactory_TEXT_OK)).build();\n+\t\t\t}\n@@ -113,0 +115,2 @@\n+\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.NA)\n+\t\t\t\t.setSummary(Messages.getString(Messages.GcLockerRule_TEXT_NA)).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/SystemGcRule.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"}]}