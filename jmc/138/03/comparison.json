{"files":[{"patch":"@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -86,2 +87,2 @@\n-\t\tIItem longestEvent = items.apply(JdkFilters.FILE_READ)\n-\t\t\t\t.getAggregate(Aggregators.itemWithMax(JfrAttributes.DURATION));\n+\t\tIItemCollection fileReadEvents = items.apply(JdkFilters.FILE_READ);\n+\t\tIItem longestEvent = fileReadEvents.getAggregate(Aggregators.itemWithMax(JfrAttributes.DURATION));\n@@ -100,1 +101,2 @@\n-\t\t\tString fileName = sanitizeFileName(RulesToolkit.getValue(longestEvent, JdkAttributes.IO_PATH));\n+\t\t\tString longestIOPath = RulesToolkit.getValue(longestEvent, JdkAttributes.IO_PATH);\n+\t\t\tString fileName = sanitizeFileName(longestIOPath);\n@@ -103,0 +105,11 @@\n+\t\t\tString avgDuration = fileReadEvents\n+\t\t\t\t\t.getAggregate(Aggregators.avg(JdkTypeIDs.FILE_READ, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tString totalDuration = fileReadEvents\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.FILE_READ, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tIItemCollection eventsFromLongestIOPath = fileReadEvents\n+\t\t\t\t\t.apply(ItemFilters.equals(JdkAttributes.IO_PATH, longestIOPath));\n+\t\t\tString totalLongestIOPath = eventsFromLongestIOPath\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.FILE_READ, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n@@ -106,1 +119,1 @@\n-\t\t\t\t\t\t\tfileName, amountRead),\n+\t\t\t\t\t\t\tfileName, amountRead, avgDuration, totalDuration, totalLongestIOPath),\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/io\/FileReadRule.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -84,2 +85,2 @@\n-\t\tIItem longestEvent = items.apply(JdkFilters.FILE_WRITE)\n-\t\t\t\t.getAggregate(Aggregators.itemWithMax(JfrAttributes.DURATION));\n+\t\tIItemCollection fileWriteEvents = items.apply(JdkFilters.FILE_WRITE);\n+\t\tIItem longestEvent = fileWriteEvents.getAggregate(Aggregators.itemWithMax(JfrAttributes.DURATION));\n@@ -98,0 +99,2 @@\n+\t\t\tString longestIOPath = RulesToolkit.getValue(longestEvent, JdkAttributes.IO_PATH);\n+\t\t\tString fileName = FileReadRule.sanitizeFileName(longestIOPath);\n@@ -100,1 +103,11 @@\n-\t\t\tString fileName = FileReadRule.sanitizeFileName(RulesToolkit.getValue(longestEvent, JdkAttributes.IO_PATH));\n+\t\t\tString avgDuration = fileWriteEvents\n+\t\t\t\t\t.getAggregate(Aggregators.avg(JdkTypeIDs.FILE_WRITE, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tString totalDuration = fileWriteEvents\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.FILE_WRITE, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tIItemCollection eventsFromLongestIOPath = fileWriteEvents\n+\t\t\t\t\t.apply(ItemFilters.equals(JdkAttributes.IO_PATH, longestIOPath));\n+\t\t\tString totalLongestIOPath = eventsFromLongestIOPath\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.FILE_WRITE, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n@@ -104,1 +117,1 @@\n-\t\t\t\t\t\t\tfileName, amountWritten),\n+\t\t\t\t\t\t\tfileName, amountWritten, avgDuration, totalDuration, totalLongestIOPath),\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/io\/FileWriteRule.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -123,1 +124,2 @@\n-\t\t\tString address = sanitizeAddress(RulesToolkit.getValue(longestEvent, JdkAttributes.IO_ADDRESS));\n+\t\t\tString longestIOAddress = RulesToolkit.getValue(longestEvent, JdkAttributes.IO_ADDRESS);\n+\t\t\tString address = sanitizeAddress(longestIOAddress);\n@@ -126,0 +128,10 @@\n+\t\t\tString avgDuration = readItems.getAggregate(Aggregators.avg(JdkTypeIDs.SOCKET_READ, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tString totalDuration = readItems\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.SOCKET_READ, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tIItemCollection eventsFromLongestAddress = readItems\n+\t\t\t\t\t.apply(ItemFilters.equals(JdkAttributes.IO_ADDRESS, longestIOAddress));\n+\t\t\tString totalLongestIOAddress = eventsFromLongestAddress\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.SOCKET_READ, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n@@ -129,1 +141,1 @@\n-\t\t\t\t\tpeakDuration, address, amountRead) + \" \" \/\/$NON-NLS-1$\n+\t\t\t\t\tpeakDuration, address, amountRead, avgDuration, totalDuration, totalLongestIOAddress) + \" \" \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/io\/SocketReadRule.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -100,2 +101,2 @@\n-\t\tIItem longestEvent = items.apply(JdkFilters.NO_RMI_SOCKET_WRITE)\n-\t\t\t\t.getAggregate(Aggregators.itemWithMax(JfrAttributes.DURATION));\n+\t\tIItemCollection writeItems = items.apply(JdkFilters.NO_RMI_SOCKET_WRITE);\n+\t\tIItem longestEvent = writeItems.getAggregate(Aggregators.itemWithMax(JfrAttributes.DURATION));\n@@ -116,2 +117,2 @@\n-\t\t\tString address = SocketReadRule\n-\t\t\t\t\t.sanitizeAddress(RulesToolkit.getValue(longestEvent, JdkAttributes.IO_ADDRESS));\n+\t\t\tString longestIOAddress = RulesToolkit.getValue(longestEvent, JdkAttributes.IO_ADDRESS);\n+\t\t\tString address = SocketReadRule.sanitizeAddress(longestIOAddress);\n@@ -120,0 +121,11 @@\n+\t\t\tString avgDuration = writeItems\n+\t\t\t\t\t.getAggregate(Aggregators.avg(JdkTypeIDs.SOCKET_WRITE, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tString totalDuration = writeItems\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.SOCKET_WRITE, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tIItemCollection eventsFromLongestAddress = writeItems\n+\t\t\t\t\t.apply(ItemFilters.equals(JdkAttributes.IO_ADDRESS, longestIOAddress));\n+\t\t\tString totalLongestIOAddress = eventsFromLongestAddress\n+\t\t\t\t\t.getAggregate(Aggregators.sum(JdkTypeIDs.SOCKET_WRITE, JfrAttributes.DURATION))\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n@@ -124,1 +136,2 @@\n-\t\t\t\t\tamountWritten) + \" \" + Messages.getString(Messages.SocketWriteRuleFactory_TEXT_RMI_NOTE); \/\/$NON-NLS-1$\n+\t\t\t\t\tamountWritten, avgDuration, totalDuration, totalLongestIOAddress) + \" \" \/\/$NON-NLS-1$\n+\t\t\t\t\t+ Messages.getString(Messages.SocketWriteRuleFactory_TEXT_RMI_NOTE);\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/io\/SocketWriteRule.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-FileReadRuleFactory_TEXT_WARN_LONG=The longest recorded file read took {0} to read {2} from {1}.\n+FileReadRuleFactory_TEXT_WARN_LONG=The longest recorded file read took {0} to read {2} from {1}. Average time of recorded IO: {3}. Total time of recorded IO: {4}. Total time of recorded IO for the file {1}: {5}.\n@@ -254,1 +254,1 @@\n-FileWriteRuleFactory_TEXT_WARN_LONG=The longest recorded file write took {0} to write {2} to {1}.\n+FileWriteRuleFactory_TEXT_WARN_LONG=The longest recorded file write took {0} to write {2} to {1}. Average time of recorded IO: {3}. Total time of recorded IO: {4}. Total time of recorded IO for the file {1}: {5}.\n@@ -572,1 +572,1 @@\n-SocketReadRuleFactory_TEXT_WARN_LONG=The longest recorded socket read took {0} to read {2} from the host at {1}.\n+SocketReadRuleFactory_TEXT_WARN_LONG=The longest recorded socket read took {0} to read {2} from the host at {1}. Average time of recorded IO: {3}. Total time of recorded IO: {4}. Total time of recorded IO for the host {1}: {5}.\n@@ -585,1 +585,1 @@\n-SocketWriteRuleFactory_TEXT_WARN_LONG=The longest recorded socket write took {0} to write {2} to the host at {1}.\n+SocketWriteRuleFactory_TEXT_WARN_LONG=The longest recorded socket write took {0} to write {2} to the host at {1}. Average time of recorded IO: {3}. Total time of recorded IO: {4}. Total time of recorded IO for the host {1}: {5}.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import org.openjdk.jmc.common.item.IAccessorKey;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.common.util.MemberAccessorToolkit;\n+\n+public class FileTestEvent extends TestEvent {\n+\tprivate final String fileName;\n+\tprivate final long duration;\n+\tprivate final long bytesProcessed;\n+\n+\tpublic FileTestEvent(String eventType, String fileName, long duration, long bytesProcessed) {\n+\t\tsuper(eventType);\n+\t\tthis.fileName = fileName;\n+\t\tthis.duration = duration;\n+\t\tthis.bytesProcessed = bytesProcessed;\n+\t}\n+\n+\t@Override\n+\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\tif (\"duration\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.MILLISECOND.quantity(duration));\n+\t\t}\n+\t\tif (\"path\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, String, String> constant(fileName);\n+\t\t}\n+\t\tif (\"bytesRead\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.BYTE.quantity(bytesProcessed));\n+\t\t}\n+\t\tif (\"bytesWritten\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.BYTE.quantity(bytesProcessed));\n+\t\t}\n+\t\treturn null;\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/FileTestEvent.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.openjdk.jmc.common.item.IAggregator;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemConsumer;\n+import org.openjdk.jmc.common.item.IItemFilter;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.IRange;\n+\n+public class MockEventCollection implements IItemCollection {\n+\tprivate final List<TestEventItem> items = new ArrayList<>();\n+\n+\tpublic MockEventCollection(TestEvent[] values) {\n+\t\tfor (TestEvent value : values) {\n+\t\t\titems.add(new TestEventItem(value));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IItemCollection apply(IItemFilter filter) {\n+\t\tArrayList<TestEvent> newEntries = new ArrayList<>();\n+\t\tfor (TestEventItem item : items) {\n+\t\t\tif (filter.getPredicate(item.getType()).test(item)) {\n+\t\t\t\tnewEntries.add(item.getEvent());\n+\t\t\t}\n+\t\t}\n+\t\treturn new MockEventCollection(newEntries.toArray(new TestEvent[0]));\n+\t}\n+\n+\t@Override\n+\tpublic Iterator<IItemIterable> iterator() {\n+\t\treturn Collections.<IItemIterable> unmodifiableList(items).iterator();\n+\t}\n+\n+\t@Override\n+\tpublic <V, C extends IItemConsumer<C>> V getAggregate(IAggregator<V, C> aggregator) {\n+\t\treturn aggregate(aggregator, items.iterator());\n+\t}\n+\n+\tprivate static <V, C extends IItemConsumer<C>> V aggregate(\n+\t\tfinal IAggregator<V, C> aggregator, final Iterator<? extends IItem> items) {\n+\t\treturn aggregator.getValue(new Iterator<C>() {\n+\n+\t\t\tTestEventItem next = findNext();\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasNext() {\n+\t\t\t\treturn next != null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic C next() {\n+\t\t\t\tC calc = aggregator.newItemConsumer(next.getType());\n+\t\t\t\tcalc.consume(next);\n+\t\t\t\tnext = findNext();\n+\t\t\t\treturn calc;\n+\t\t\t}\n+\n+\t\t\tTestEventItem findNext() {\n+\t\t\t\twhile (items.hasNext()) {\n+\t\t\t\t\tTestEventItem ii = (TestEventItem) items.next();\n+\t\t\t\t\tif (aggregator.acceptType(ii.getType())) {\n+\t\t\t\t\t\treturn ii;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void remove() {\n+\t\t\t\tthrow new UnsupportedOperationException();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasItems() {\n+\t\treturn !items.isEmpty();\n+\t}\n+\n+\t@Override\n+\tpublic Set<IRange<IQuantity>> getTimeRanges() {\n+\t\treturn null;\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/MockEventCollection.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import org.openjdk.jmc.common.item.IAccessorKey;\n+import org.openjdk.jmc.common.item.ICanonicalAccessorFactory;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.common.util.MemberAccessorToolkit;\n+\n+public class SocketTestEvent extends TestEvent {\n+\tprivate final String address;\n+\tprivate final long duration;\n+\tprivate final long bytesProcessed;\n+\n+\tpublic SocketTestEvent(String eventType, String address, long duration, long bytesProcessed) {\n+\t\tsuper(eventType);\n+\t\tthis.address = address;\n+\t\tthis.duration = duration;\n+\t\tthis.bytesProcessed = bytesProcessed;\n+\t}\n+\n+\t@Override\n+\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\tif (\"duration\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.MILLISECOND.quantity(duration));\n+\t\t}\n+\t\tif (\"address\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, String, String> constant(address);\n+\t\t}\n+\t\tif (\"bytesRead\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.BYTE.quantity(bytesProcessed));\n+\t\t}\n+\t\tif (\"bytesWritten\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.BYTE.quantity(bytesProcessed));\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasAttribute(ICanonicalAccessorFactory<?> attribute) {\n+\t\tif (\"duration\".equals(attribute.getIdentifier())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (\"address\".equals(attribute.getIdentifier())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (\"bytesRead\".equals(attribute.getIdentifier())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (\"bytesWritten\".equals(attribute.getIdentifier())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/SocketTestEvent.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.openjdk.jmc.common.IDescribable;\n+import org.openjdk.jmc.common.item.IAccessorKey;\n+import org.openjdk.jmc.common.item.IAttribute;\n+import org.openjdk.jmc.common.item.ICanonicalAccessorFactory;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.item.IType;\n+\n+public class TestEvent implements IType<IItem> {\n+\tprivate final String eventName;\n+\n+\tpublic TestEvent(String eventName) {\n+\t\tthis.eventName = eventName;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn eventName;\n+\t}\n+\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<IAttribute<?>> getAttributes() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic Map<IAccessorKey<?>, ? extends IDescribable> getAccessorKeys() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasAttribute(ICanonicalAccessorFactory<?> attribute) {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic String getIdentifier() {\n+\t\treturn eventName;\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestEvent.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.function.Predicate;\n+\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.item.IType;\n+\n+public class TestEventItem implements IItem, IItemIterable {\n+\tprivate final TestEvent event;\n+\n+\tpublic TestEventItem(TestEvent event) {\n+\t\tthis.event = event;\n+\t}\n+\n+\t@Override\n+\tpublic IType<IItem> getType() {\n+\t\treturn event;\n+\t}\n+\n+\tTestEvent getEvent() {\n+\t\treturn event;\n+\t}\n+\n+\t@Override\n+\tpublic Iterator<IItem> iterator() {\n+\t\treturn Collections.singleton((IItem) event).iterator();\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasItems() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic long getItemCount() {\n+\t\t\/\/ TODO Auto-generated method stub\n+\t\treturn 0;\n+\t}\n+\n+\t@Override\n+\tpublic IItemIterable apply(Predicate<IItem> predicate) {\n+\t\t\/\/ TODO Auto-generated method stub\n+\t\treturn null;\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestEventItem.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.rules.IRule;\n+import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.io.FileReadRule;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.io.FileWriteRule;\n+\n+public class TestFileReadWriteRule {\n+\tprivate static final String FILE_NAME_1 = \"\/user\/dir\/file1.dat\";\n+\tprivate static final String FILE_NAME_2 = \"\/user\/dir\/file2.dat\";\n+\n+\t@Test\n+\tpublic void testReadRule() {\n+\t\ttestFileRule(JdkTypeIDs.FILE_READ, new FileReadRule(),\n+\t\t\t\t\"The longest recorded file read took 5 s to read 4 KiB from \/user\/dir\/file1.dat. Average time of recorded IO: 4.500 s. Total time of recorded IO: 13.500 s. Total time of recorded IO for the file \/user\/dir\/file1.dat: 9.500 s.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Test\n+\tpublic void testWriteRule() {\n+\t\ttestFileRule(JdkTypeIDs.FILE_WRITE, new FileWriteRule(),\n+\t\t\t\t\"The longest recorded file write took 5 s to write 4 KiB to \/user\/dir\/file1.dat. Average time of recorded IO: 4.500 s. Total time of recorded IO: 13.500 s. Total time of recorded IO for the file \/user\/dir\/file1.dat: 9.500 s.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\tprivate void testFileRule(String eventType, IRule rule, String expectedLongDesc) {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new FileTestEvent(eventType, FILE_NAME_1, 4500, 4096),\n+\t\t\t\tnew FileTestEvent(eventType, FILE_NAME_1, 5000, 4096),\n+\t\t\t\tnew FileTestEvent(eventType, FILE_NAME_2, 4000, 4096)};\n+\t\tIItemCollection events = new MockEventCollection(testEvents);\n+\t\tRunnableFuture<Result> future = rule.evaluate(events, IPreferenceValueProvider.DEFAULT_VALUES);\n+\t\ttry {\n+\t\t\tfuture.run();\n+\t\t\tResult res = future.get();\n+\t\t\tString longDesc = res.getLongDescription();\n+\t\t\tAssert.assertEquals(expectedLongDesc, longDesc);\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestFileReadWriteRule.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.rules.IRule;\n+import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.io.SocketReadRule;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.io.SocketWriteRule;\n+\n+public class TestSocketReadWriteRule {\n+\tprivate static final String ADDRESS_1 = \"123.45.67.78\";\n+\tprivate static final String ADDRESS_2 = \"123.102.103.104\";\n+\n+\t@Test\n+\tpublic void testReadRule() {\n+\t\ttestSocketRule(JdkTypeIDs.SOCKET_READ, new SocketReadRule(),\n+\t\t\t\t\"The longest recorded socket read took 5 s to read 4 KiB from the host at 123.45.67.78. Average time of recorded IO: 4.500 s. Total time of recorded IO: 13.500 s. Total time of recorded IO for the host 123.45.67.78: 9.500 s. Note that there are some socket read patterns with high duration reads that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication and MQ series.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Test\n+\tpublic void testWriteRule() {\n+\t\ttestSocketRule(JdkTypeIDs.SOCKET_WRITE, new SocketWriteRule(),\n+\t\t\t\t\"The longest recorded socket write took 5 s to write 4 KiB to the host at 123.45.67.78. Average time of recorded IO: 4.500 s. Total time of recorded IO: 13.500 s. Total time of recorded IO for the host 123.45.67.78: 9.500 s. Note that there are some socket write patterns with high duration writes that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\tprivate void testSocketRule(String eventType, IRule rule, String expectedLongDesc) {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new SocketTestEvent(eventType, ADDRESS_1, 4500, 4096),\n+\t\t\t\tnew SocketTestEvent(eventType, ADDRESS_1, 5000, 4096),\n+\t\t\t\tnew SocketTestEvent(eventType, ADDRESS_2, 4000, 4096)};\n+\t\tIItemCollection events = new MockEventCollection(testEvents);\n+\t\tRunnableFuture<Result> future = rule.evaluate(events, IPreferenceValueProvider.DEFAULT_VALUES);\n+\t\ttry {\n+\t\t\tfuture.run();\n+\t\t\tResult res = future.get();\n+\t\t\tString longDesc = res.getLongDescription();\n+\t\t\tAssert.assertEquals(expectedLongDesc, longDesc);\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestSocketReadWriteRule.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -4528,1 +4528,1 @@\n-<longDescription>The longest recorded socket write took 349.745 ms to write 81 B to the host at 10.161.190.213. Note that there are some socket write patterns with high duration writes that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication.<\/longDescription>\n+<longDescription>The longest recorded socket write took 349.745 ms to write 81 B to the host at 10.161.190.213. Average time of recorded IO: 37.121 ms. Total time of recorded IO: 1.077 s. Total time of recorded IO for the host 10.161.190.213: 398.835 ms. Note that there are some socket write patterns with high duration writes that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication.<\/longDescription>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/resources\/baseline\/JfrRuleBaseline.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}