{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Datadog, Inc. All rights reserved.\n@@ -50,0 +50,1 @@\n+import java.io.BufferedWriter;\n@@ -53,0 +54,1 @@\n+import java.io.FileWriter;\n@@ -55,0 +57,2 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n@@ -56,0 +60,6 @@\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n@@ -68,0 +78,1 @@\n+import org.eclipse.jface.action.ActionContributionItem;\n@@ -69,0 +80,2 @@\n+import org.eclipse.jface.action.IContributionItem;\n+import org.eclipse.jface.action.IMenuCreator;\n@@ -88,0 +101,1 @@\n+import org.eclipse.swt.widgets.Control;\n@@ -89,0 +103,1 @@\n+import org.eclipse.swt.widgets.Menu;\n@@ -97,0 +112,1 @@\n+import org.openjdk.jmc.common.item.IAttribute;\n@@ -98,0 +114,1 @@\n+import org.openjdk.jmc.common.item.IItemIterable;\n@@ -99,0 +116,5 @@\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.unit.ContentType;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.common.util.Pair;\n@@ -101,0 +123,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n@@ -106,0 +129,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.AttributeSelection;\n@@ -121,0 +145,2 @@\n+\tprivate static final String ATTRIBUTE_SELECTION_ID = \"AttributeSelection\"; \/\/$NON-NLS-1$\n+\tprivate static final String ATTRIBUTE_SELECTION_SEP_ID = \"AttrSelectionSep\"; \/\/$NON-NLS-1$\n@@ -171,0 +197,3 @@\n+\tprivate IAttribute<IQuantity> currentAttribute;\n+\tprivate AttributeSelection attributeSelection;\n+\tprivate IToolBarManager toolBar;\n@@ -282,2 +311,3 @@\n-\t\tprivate FlameGraphView view;\n-\t\tprivate IItemCollection items;\n+\t\tprivate final FlameGraphView view;\n+\t\tprivate final IItemCollection items;\n+\t\tprivate final IAttribute<IQuantity> attribute;\n@@ -286,1 +316,1 @@\n-\t\tprivate ModelRebuildRunnable(FlameGraphView view, IItemCollection items) {\n+\t\tprivate ModelRebuildRunnable(FlameGraphView view, IItemCollection items, IAttribute<IQuantity> attribute) {\n@@ -289,0 +319,1 @@\n+\t\t\tthis.attribute = attribute;\n@@ -301,1 +332,6 @@\n-\t\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(items, view.frameSeparator, !view.threadRootAtTop);\n+\t\t\tIItemCollection filteredItems = items;\n+\t\t\tif (attribute != null) {\n+\t\t\t\tfilteredItems = filteredItems.apply(ItemFilters.hasAttribute(attribute));\n+\t\t\t}\n+\t\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(filteredItems, view.frameSeparator,\n+\t\t\t\t\t!view.threadRootAtTop, attribute);\n@@ -306,0 +342,1 @@\n+\n@@ -310,1 +347,7 @@\n-\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, flameGraphJson));\n+\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> {\n+\t\t\t\t\tview.setModel(items, flameGraphJson);\n+\n+\t\t\t\t\tList<Pair<String, IAttribute<IQuantity>>> attrList = AttributeSelection.extractAttributes(items);\n+\t\t\t\t\tString attrName = attribute != null ? attribute.getName() : null;\n+\t\t\t\t\tview.createAttributeSelection(attrName, attrList);\n+\t\t\t\t});\n@@ -315,0 +358,10 @@\n+\tprivate void createAttributeSelection(String attrName, Collection<Pair<String, IAttribute<IQuantity>>> items) {\n+\t\tif (attributeSelection != null) {\n+\t\t\ttoolBar.remove(attributeSelection.getId());\n+\t\t}\n+\t\tattributeSelection = new AttributeSelection(items, attrName, this::getCurrentAttribute,\n+\t\t\t\tthis::setCurrentAttribute, () -> triggerRebuildTask(currentItems));\n+\t\ttoolBar.insertAfter(ATTRIBUTE_SELECTION_SEP_ID, attributeSelection);\n+\t\ttoolBar.update(true);\n+\t}\n+\n@@ -332,1 +385,1 @@\n-\t\tIToolBarManager toolBar = site.getActionBars().getToolBarManager();\n+\t\ttoolBar = site.getActionBars().getToolBarManager();\n@@ -339,0 +392,4 @@\n+\n+\t\ttoolBar.add(new Separator(ATTRIBUTE_SELECTION_SEP_ID));\n+\t\tcreateAttributeSelection(null, Collections.emptyList());\n+\n@@ -342,0 +399,8 @@\n+\tprivate IAttribute<IQuantity> getCurrentAttribute() {\n+\t\treturn currentAttribute;\n+\t}\n+\n+\tprivate void setCurrentAttribute(IAttribute<IQuantity> attr) {\n+\t\tcurrentAttribute = attr;\n+\t}\n+\n@@ -391,1 +456,1 @@\n-\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, items);\n+\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, items, currentAttribute);\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":74,"deletions":9,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.ui.common;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jface.action.Action;\n+import org.eclipse.jface.action.ActionContributionItem;\n+import org.eclipse.jface.action.IAction;\n+import org.eclipse.jface.action.IMenuCreator;\n+import org.eclipse.jface.action.Separator;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Menu;\n+import org.openjdk.jmc.common.item.IAttribute;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.unit.ContentType;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.common.util.Pair;\n+\n+public class AttributeSelection extends Action implements IMenuCreator {\n+\tpublic static final String SAMPLES = \"Samples\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTRIBUTE_SELECTION_ID = \"AttributeSelection\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTRIBUTE_SELECTION_SEP_ID = \"AttrSelectionSep\"; \/\/$NON-NLS-1$\n+\n+\tprivate Menu menu;\n+\tprivate final Collection<Pair<String, IAttribute<IQuantity>>> items;\n+\tprivate final Supplier<IAttribute<IQuantity>> getCurrentAttr;\n+\tprivate final Consumer<IAttribute<IQuantity>> setCurrentAttr;\n+\tprivate final Runnable onSet;\n+\n+\tpublic static List<Pair<String, IAttribute<IQuantity>>> extractAttributes(IItemCollection items) {\n+\t\tSet<Pair<String, IAttribute<IQuantity>>> compatibleAttr = new HashSet<>();\n+\t\tfor (IItemIterable eventIterable : items) {\n+\t\t\tList<IAttribute<?>> attributes = eventIterable.getType().getAttributes();\n+\t\t\tfor (IAttribute<?> attr : attributes) {\n+\t\t\t\tContentType<?> contentType = attr.getContentType();\n+\t\t\t\tif (contentType == UnitLookup.NUMBER || contentType == UnitLookup.MEMORY) {\n+\t\t\t\t\tcompatibleAttr.add(new Pair<>(attr.getName(), (IAttribute<IQuantity>) attr));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tList<Pair<String, IAttribute<IQuantity>>> sortedList = new ArrayList<>(compatibleAttr);\n+\t\tsortedList.sort(Comparator.comparing(p -> p.left));\n+\t\tsortedList.add(0, new Pair<>(SAMPLES, null));\n+\t\tsortedList.add(1, new Pair<>(\"---\", null));\n+\t\treturn sortedList;\n+\t}\n+\n+\tpublic AttributeSelection(Collection<Pair<String, IAttribute<IQuantity>>> items, String attrName,\n+\t\t\tSupplier<IAttribute<IQuantity>> getCurrentAttr, Consumer<IAttribute<IQuantity>> setCurrentAttr,\n+\t\t\tRunnable onSet) {\n+\t\tsuper(attrName != null ? attrName : SAMPLES, IAction.AS_DROP_DOWN_MENU);\n+\t\tsetId(ATTRIBUTE_SELECTION_ID);\n+\t\tthis.items = items;\n+\t\tthis.getCurrentAttr = getCurrentAttr;\n+\t\tthis.setCurrentAttr = setCurrentAttr;\n+\t\tthis.onSet = onSet;\n+\t\tsetMenuCreator(this);\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\t\/\/ do nothing\n+\t}\n+\n+\t@Override\n+\tpublic Menu getMenu(Control parent) {\n+\t\tif (menu == null) {\n+\t\t\tmenu = new Menu(parent);\n+\t\t\tpopulate(items);\n+\t\t}\n+\t\treturn menu;\n+\t}\n+\n+\t@Override\n+\tpublic Menu getMenu(Menu parent) {\n+\t\tif (menu == null) {\n+\t\t\tmenu = new Menu(parent);\n+\t\t\tpopulate(items);\n+\t\t}\n+\t\treturn menu;\n+\t}\n+\n+\tprivate void populate(Collection<Pair<String, IAttribute<IQuantity>>> attributes) {\n+\t\tfor (Pair<String, IAttribute<IQuantity>> item : attributes) {\n+\t\t\tif (item.left.equals(\"---\")) {\n+\t\t\t\t(new Separator()).fill(menu, 1);\n+\t\t\t} else {\n+\t\t\t\tActionContributionItem actionItem = new ActionContributionItem(\n+\t\t\t\t\t\tnew SetAttribute(item, item.right == getCurrentAttr.get()));\n+\t\t\t\tactionItem.fill(menu, -1);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class SetAttribute extends Action {\n+\t\tprivate IAttribute<IQuantity> value;\n+\n+\t\tSetAttribute(Pair<String, IAttribute<IQuantity>> item, boolean isSelected) {\n+\t\t\tsuper(item.left, IAction.AS_RADIO_BUTTON);\n+\t\t\tthis.value = item.right;\n+\t\t\tsetChecked(isSelected);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tif (value != getCurrentAttr.get()) {\n+\t\t\t\tsetCurrentAttr.accept(value);\n+\t\t\t\tonSet.run();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/AttributeSelection.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -163,1 +163,1 @@\n-\t\t\t\tint forkOffset = parentFork.getItemOffset();\n+\t\t\t\tlong forkOffset = parentFork.getItemOffset();\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/MethodProfilingPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import java.util.Collection;\n+import java.util.Collections;\n@@ -97,0 +99,1 @@\n+import org.openjdk.jmc.common.item.IAttribute;\n@@ -102,0 +105,1 @@\n+import org.openjdk.jmc.common.item.ItemFilters;\n@@ -104,0 +108,1 @@\n+import org.openjdk.jmc.common.util.Pair;\n@@ -115,0 +120,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.AttributeSelection;\n@@ -214,0 +220,4 @@\n+\tprivate AttributeSelection attributeSelection;\n+\tprivate IAttribute<IQuantity> currentAttribute;\n+\tprivate IToolBarManager toolBar;\n+\tprivate ViewerColumn valueColumn;\n@@ -379,0 +389,20 @@\n+\tprivate void createAttributeSelection(String attrName, Collection<Pair<String, IAttribute<IQuantity>>> items) {\n+\t\tif (attributeSelection != null) {\n+\t\t\ttoolBar.remove(attributeSelection.getId());\n+\t\t}\n+\t\tattributeSelection = new AttributeSelection(items, attrName, this::getCurrentAttribute,\n+\t\t\t\tthis::setCurrentAttribute, this::rebuildModel);\n+\t\ttoolBar.insertAfter(AttributeSelection.ATTRIBUTE_SELECTION_SEP_ID, attributeSelection);\n+\t\ttoolBar.update(true);\n+\t\tif (attrName == null) {\n+\t\t\tattrName = AttributeSelection.SAMPLES;\n+\t\t}\n+\t\tif (valueColumn != null) {\n+\t\t\tif (treeLayout) {\n+\t\t\t\t((TreeViewerColumn) valueColumn).getColumn().setText(attrName);\n+\t\t\t} else {\n+\t\t\t\t((TableViewerColumn) valueColumn).getColumn().setText(attrName);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n@@ -429,1 +459,1 @@\n-\t\tIToolBarManager toolBar = site.getActionBars().getToolBarManager();\n+\t\ttoolBar = site.getActionBars().getToolBarManager();\n@@ -439,0 +469,3 @@\n+\t\ttoolBar.add(new Separator(AttributeSelection.ATTRIBUTE_SELECTION_SEP_ID));\n+\t\tcreateAttributeSelection(null, Collections.emptyList());\n+\n@@ -442,0 +475,8 @@\n+\tprivate IAttribute<IQuantity> getCurrentAttribute() {\n+\t\treturn currentAttribute;\n+\t}\n+\n+\tprivate void setCurrentAttribute(IAttribute<IQuantity> attr) {\n+\t\tcurrentAttribute = attr;\n+\t}\n+\n@@ -567,2 +608,2 @@\n-\t\tbuildColumn(viewer, Messages.STACKTRACE_VIEW_COUNT_COLUMN_NAME, SWT.RIGHT, columnWidths[1])\n-\t\t\t\t.setLabelProvider(countLabelProvider);\n+\t\tvalueColumn = buildColumn(viewer, AttributeSelection.SAMPLES, SWT.RIGHT, columnWidths[1]);\n+\t\tvalueColumn.setLabelProvider(countLabelProvider);\n@@ -721,1 +762,6 @@\n-\t\treturn new StacktraceModel(threadRootAtTop, frameSeparatorManager.getFrameSeparator(), itemsToShow);\n+\t\tIItemCollection filteredItems = itemsToShow;\n+\t\tif (currentAttribute != null) {\n+\t\t\tfilteredItems = filteredItems.apply(ItemFilters.hasAttribute(currentAttribute));\n+\t\t}\n+\t\treturn new StacktraceModel(threadRootAtTop, frameSeparatorManager.getFrameSeparator(), filteredItems,\n+\t\t\t\tcurrentAttribute);\n@@ -756,0 +802,3 @@\n+\t\tList<Pair<String, IAttribute<IQuantity>>> attrList = AttributeSelection.extractAttributes(itemsToShow);\n+\t\tString attrName = currentAttribute != null ? currentAttribute.getName() : null;\n+\t\tcreateAttributeSelection(attrName, attrList);\n@@ -779,1 +828,1 @@\n-\t\t\tif (event.index == 2 && (total = rootFork.getItemsInFork()) > 0) { \/\/ index == 2 => percentage column\n+\t\t\tif (event.index == 2 && (total = rootFork.getAggregateItemsInFork()) > 0) { \/\/ index == 2 => percentage column\n@@ -782,1 +831,1 @@\n-\t\t\t\tint forkOffset = parentFork.getItemOffset();\n+\t\t\t\tlong forkOffset = parentFork.getItemOffset();\n@@ -784,1 +833,1 @@\n-\t\t\t\tint siblingsWidth = (int) Math.round(event.width * parentFork.getItemsInFork() \/ total);\n+\t\t\t\tint siblingsWidth = (int) Math.round(event.width * parentFork.getAggregateItemsInFork() \/ total);\n@@ -789,1 +838,1 @@\n-\t\t\t\tdouble fraction = frame.getItemCount() \/ total;\n+\t\t\t\tdouble fraction = frame.getAttributeAggregate() \/ total;\n@@ -805,1 +854,1 @@\n-\t\t\tif (event.index == 3 && (total = rootFork.getItemsInFork()) > 0) { \/\/ index == 3 => percentage (by duration) column\n+\t\t\tif (event.index == 3 && (total = rootFork.getAggregateItemsInFork()) > 0) { \/\/ index == 3 => percentage (by duration) column\n@@ -808,1 +857,1 @@\n-\t\t\t\tint forkOffset = parentFork.getItemOffset();\n+\t\t\t\tlong forkOffset = parentFork.getItemOffset();\n@@ -810,1 +859,1 @@\n-\t\t\t\tint siblingsWidth = (int) Math.round(event.width * parentFork.getItemsInFork() \/ total);\n+\t\t\t\tint siblingsWidth = (int) Math.round(event.width * parentFork.getAggregateItemsInFork() \/ total);\n@@ -815,1 +864,1 @@\n-\t\t\t\tdouble fraction = frame.getItemCount() \/ total;\n+\t\t\t\tdouble fraction = frame.getAttributeAggregate() \/ total;\n@@ -829,3 +878,3 @@\n-\t\t\tint itemCount = frame.getItemCount();\n-\t\t\tint totalCount = getRootFork(frame.getBranch().getParentFork()).getItemsInFork();\n-\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(itemCount \/ (double) totalCount).displayUsing(IDisplayable.AUTO);\n+\t\t\tlong aggregValue = frame.getAttributeAggregate();\n+\t\t\tlong totalCount = getRootFork(frame.getBranch().getParentFork()).getAggregateItemsInFork();\n+\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(aggregValue \/ (double) totalCount).displayUsing(IDisplayable.AUTO);\n@@ -911,1 +960,1 @@\n-\t\t\treturn Integer.toString(((StacktraceFrame) element).getItemCount());\n+\t\t\treturn Long.toString(((StacktraceFrame) element).getAttributeAggregate());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":66,"deletions":17,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Datadog, Inc. All rights reserved.\n@@ -59,0 +59,1 @@\n+import org.openjdk.jmc.common.item.Aggregators;\n@@ -61,0 +62,2 @@\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n@@ -96,1 +99,1 @@\n-\t\t\tsb.append(createRootNodeJson(model.getItems()));\n+\t\t\tsb.append(createRootNodeJson(model));\n@@ -167,3 +170,3 @@\n-\tprivate static String createRootNodeJson(IItemCollection events) {\n-\t\tMap<String, Long> eventCountsByType = countEventsByType(events);\n-\t\tString rootTitle = createRootNodeTitle(eventCountsByType);\n+\tprivate static String createRootNodeJson(StacktraceTreeModel model) {\n+\t\tMap<String, Long> eventCountsByType = countEventsByType(model.getItems());\n+\t\tString rootTitle = createRootNodeTitle(model, eventCountsByType);\n@@ -171,2 +174,19 @@\n-\t\treturn createJsonProps(rootTitle, rootDescription,\n-\t\t\t\teventCountsByType.values().stream().mapToLong(Long::longValue).sum());\n+\t\tdouble rootValue;\n+\t\tif (model.getAttribute() == null) {\n+\t\t\trootValue = eventValueSum(eventCountsByType);\n+\t\t} else {\n+\t\t\tIQuantity aggregate = model.getItems().getAggregate(Aggregators.sum(model.getAttribute()));\n+\t\t\tif (aggregate == null) {\n+\t\t\t\trootValue = eventValueSum(eventCountsByType);\n+\t\t\t} else {\n+\t\t\t\trootValue = aggregate.doubleValue();\n+\t\t\t\tif (model.getAttribute().getContentType() == UnitLookup.MEMORY) {\n+\t\t\t\t\trootValue = rootValue \/ 1024;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn createJsonProps(rootTitle, rootDescription, rootValue);\n+\t}\n+\n+\tprivate static double eventValueSum(Map<String, Long> eventCountsByType) {\n+\t\treturn eventCountsByType.values().stream().mapToLong(Long::longValue).sum();\n@@ -175,1 +195,1 @@\n-\tprivate static String createRootNodeTitle(Map<String, Long> eventCountsByType) {\n+\tprivate static String createRootNodeTitle(StacktraceTreeModel model, Map<String, Long> eventCountsByType) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/json\/FlameGraphJsonSerializer.java","additions":29,"deletions":9,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.IAttribute;\n@@ -38,0 +40,7 @@\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.item.IType;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.QuantitiesToolkit;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n@@ -40,0 +49,4 @@\n+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.aggregateItems;\n+\n+import java.util.Arrays;\n+\n@@ -55,0 +68,1 @@\n+\tprivate final IAttribute<IQuantity> attribute;\n@@ -57,2 +71,2 @@\n-\tStacktraceFrame(IItem[] items, IMCFrame frame, Branch branch, int indexInBranch) {\n-\t\tthis(new SimpleArray<>(items, items.length), frame, branch, indexInBranch);\n+\tStacktraceFrame(IItem[] items, IMCFrame frame, Branch branch, int indexInBranch, IAttribute<IQuantity> attribute) {\n+\t\tthis(new SimpleArray<>(items, items.length), frame, branch, indexInBranch, attribute);\n@@ -61,1 +75,2 @@\n-\tStacktraceFrame(SimpleArray<IItem> items, IMCFrame frame, Branch branch, int indexInBranch) {\n+\tStacktraceFrame(SimpleArray<IItem> items, IMCFrame frame, Branch branch, int indexInBranch,\n+\t\t\tIAttribute<IQuantity> attribute) {\n@@ -66,0 +81,1 @@\n+\t\tthis.attribute = attribute;\n@@ -103,0 +119,14 @@\n+\t\/**\n+\t * @return the value of the aggregation on the attribute\n+\t *\/\n+\tpublic long getAttributeAggregate() {\n+\t\tIMemberAccessor<IQuantity, IItem> accessor = StacktraceModel.getAccessor(items, attribute);\n+\t\tif (accessor != null) {\n+\t\t\tIQuantity quantity = aggregateItems(items, accessor);\n+\t\t\tif (quantity != null) {\n+\t\t\t\treturn quantity.longValue();\n+\t\t\t}\n+\t\t}\n+\t\treturn getItemCount();\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/StacktraceFrame.java","additions":34,"deletions":4,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.common.item.IAttribute;\n@@ -50,0 +51,1 @@\n+import org.openjdk.jmc.common.item.IType;\n@@ -51,0 +53,1 @@\n+import org.openjdk.jmc.common.unit.IQuantity;\n@@ -97,0 +100,1 @@\n+\tprivate final IAttribute<IQuantity> attribute;\n@@ -110,0 +114,5 @@\n+\t\tthis(threadRootAtTop, frameSeparator, items, null);\n+\t}\n+\n+\tpublic StacktraceModel(boolean threadRootAtTop, FrameSeparator frameSeparator, IItemCollection items,\n+\t\t\tIAttribute<IQuantity> attribute) {\n@@ -113,0 +122,1 @@\n+\t\tthis.attribute = attribute;\n@@ -152,0 +162,17 @@\n+\tstatic IMemberAccessor<IQuantity, IItem> getAccessor(SimpleArray<IItem> items, IAttribute<IQuantity> attribute) {\n+\t\tif (items.size() > 0 && attribute != null) {\n+\t\t\tIType<IItem> type = (IType<IItem>) items.get(0).getType();\n+\t\t\treturn type.getAccessor(attribute.getKey());\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tstatic IQuantity aggregateItems(SimpleArray<IItem> items, IMemberAccessor<IQuantity, IItem> accessor) {\n+\t\tIQuantity quantity = null;\n+\t\tfor (IItem item : items) {\n+\t\t\tIQuantity value = accessor.getMember(item);\n+\t\t\tquantity = quantity == null ? value : quantity.add(value);\n+\t\t}\n+\t\treturn quantity;\n+\t}\n+\n@@ -265,1 +292,1 @@\n-\t\tprivate final int itemOffsetInFork;\n+\t\tprivate final long itemOffsetInFork;\n@@ -270,1 +297,1 @@\n-\t\tprivate Branch(Fork parent, SimpleArray<IItem> items, IMCFrame frame, int siblingIndex, int itemOffsetInFork) {\n+\t\tprivate Branch(Fork parent, SimpleArray<IItem> items, IMCFrame frame, int siblingIndex, long itemOffsetInFork) {\n@@ -274,1 +301,1 @@\n-\t\t\tfirstFrame = new StacktraceFrame(items, frame, this, 0);\n+\t\t\tfirstFrame = new StacktraceFrame(items, frame, this, 0, attribute);\n@@ -277,1 +304,1 @@\n-\t\tpublic int getItemOffsetInFork() {\n+\t\tpublic long getItemOffsetInFork() {\n@@ -386,1 +413,1 @@\n-\t\t\t\t\tnode = new StacktraceFrame(node.getItems(), commonFrame, this, tail.size() + 1);\n+\t\t\t\t\tnode = new StacktraceFrame(node.getItems(), commonFrame, this, tail.size() + 1, attribute);\n@@ -389,1 +416,1 @@\n-\t\t\t\t\tnode = new StacktraceFrame(subset, commonFrame, this, tail.size() + 1);\n+\t\t\t\t\tnode = new StacktraceFrame(subset, commonFrame, this, tail.size() + 1, attribute);\n@@ -416,1 +443,1 @@\n-\t\tprivate final int itemOffset;\n+\t\tprivate final long itemOffset;\n@@ -418,0 +445,1 @@\n+\t\tprivate final long aggregateItemsInFork;\n@@ -434,1 +462,1 @@\n-\t\tprivate Fork(Iterable<? extends IItem> items, int itemOffset, Branch parentBranch) {\n+\t\tprivate Fork(Iterable<? extends IItem> items, long itemOffset, Branch parentBranch) {\n@@ -440,0 +468,1 @@\n+\t\t\tlong aggregateValue = 0;\n@@ -444,1 +473,1 @@\n-\t\t\t\tBranch b = new Branch(Fork.this, fe.items, fe.frame, branches.size(), itemsInFork);\n+\t\t\t\tBranch b = new Branch(Fork.this, fe.items, fe.frame, branches.size(), aggregateValue);\n@@ -446,0 +475,11 @@\n+\n+\t\t\t\tIMemberAccessor<IQuantity, IItem> memberAccessor = getAccessor(fe.items, attribute);\n+\t\t\t\tif (memberAccessor != null) {\n+\t\t\t\t\tIQuantity quantity = aggregateItems(fe.items, memberAccessor);\n+\t\t\t\t\tif (quantity != null) {\n+\t\t\t\t\t\taggregateValue += quantity.longValue();\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\taggregateValue += fe.items.size();\n+\t\t\t\t}\n+\n@@ -456,0 +496,1 @@\n+\t\t\tthis.aggregateItemsInFork = aggregateValue;\n@@ -459,1 +500,1 @@\n-\t\tpublic int getItemOffset() {\n+\t\tpublic long getItemOffset() {\n@@ -467,0 +508,4 @@\n+\t\tpublic long getAggregateItemsInFork() {\n+\t\t\treturn aggregateItemsInFork;\n+\t\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/StacktraceModel.java","additions":56,"deletions":11,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Datadog, Inc. All rights reserved.\n@@ -48,0 +48,1 @@\n+import org.openjdk.jmc.common.unit.UnitLookup;\n@@ -165,0 +166,4 @@\n+\tpublic IAttribute<IQuantity> getAttribute() {\n+\t\treturn attribute;\n+\t}\n+\n@@ -184,0 +189,3 @@\n+\t\tif (attribute != null && attribute.getContentType() == UnitLookup.MEMORY) {\n+\t\t\tvalue = value \/ 1024;\n+\t\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/tree\/StacktraceTreeModel.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\",\"v\": 468, \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": 24, \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": 24, \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 24, \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 24, \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 24, \"c\": [ ]}]}]}]}]},{\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": 112, \"c\": [ {\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": 112, \"c\": [ ]}]},{\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": 104, \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": 104, \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": 104, \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 104, \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 104, \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": 104, \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": 104, \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": 104, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 104, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 104, \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": 104, \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": 104, \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 104, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 104, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 104, \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": 104, \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": 104, \"c\": [ {\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": 104, \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n+{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\",\"v\": 0, \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": 0, \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": 0, \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 0, \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 0, \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 0, \"c\": [ ]}]}]}]}]},{\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": 0, \"c\": [ {\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": 0, \"c\": [ ]}]},{\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": 0, \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": 0, \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": 0, \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 0, \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 0, \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": 0, \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": 0, \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": 0, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 0, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 0, \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": 0, \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": 0, \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 0, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 0, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 0, \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": 0, \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": 0, \"c\": [ {\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": 0, \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/main\/resources\/flamegraph-attribute-inverted.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\",\"v\": 468, \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 24, \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 24, \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 24, \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": 24, \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": 24, \"c\": [ ]}]}]}]}]},{\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": 112, \"c\": [ {\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": 112, \"c\": [ ]}]},{\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": 104, \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": 104, \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": 104, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 104, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 104, \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 104, \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": 104, \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": 104, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 104, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 104, \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": 104, \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": 104, \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 104, \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 104, \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": 104, \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": 104, \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": 104, \"c\": [ {\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": 104, \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n+{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\",\"v\": 0, \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 0, \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 0, \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": 0, \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": 0, \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": 0, \"c\": [ ]}]}]}]}]},{\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": 0, \"c\": [ {\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": 0, \"c\": [ ]}]},{\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": 0, \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": 0, \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": 0, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 0, \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 0, \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": 0, \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": 0, \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": 0, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 0, \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": 0, \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": 0, \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": 0, \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 0, \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": 0, \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": 0, \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": 0, \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": 0, \"c\": [ {\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": 0, \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/main\/resources\/flamegraph-attribute.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Datadog, Inc. All rights reserved.\n@@ -85,3 +85,3 @@\n-\t\texpected.put(\"Arrays.copyOfRange(char[], int, int)\", asList(104.00));\n-\t\texpected.put(\"TimerThread.mainLoop()\", asList(112.00));\n-\t\texpected.put(\"AbstractCollection.toArray()\", asList(24.00));\n+\t\texpected.put(\"Arrays.copyOfRange(char[], int, int)\", asList(104.0 \/ 1024));\n+\t\texpected.put(\"TimerThread.mainLoop()\", asList(112.0 \/ 1024));\n+\t\texpected.put(\"AbstractCollection.toArray()\", asList(24.0 \/ 1024));\n@@ -104,3 +104,3 @@\n-\t\texpected.put(\"JFRImpl.onNewChunk()\", asList(24.0));\n-\t\texpected.put(\"TimerThread.run()\", asList(112.00));\n-\t\texpected.put(\"Thread.run()\", asList(104.0));\n+\t\texpected.put(\"JFRImpl.onNewChunk()\", asList(24.0 \/ 1024));\n+\t\texpected.put(\"TimerThread.run()\", asList(112.0 \/ 1024));\n+\t\texpected.put(\"Thread.run()\", asList(104.0 \/ 1024));\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/StacktraceTreeModelTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}