{"files":[{"patch":"@@ -143,0 +143,2 @@\n+\t\tPredicate predicate;\n+\n@@ -147,0 +149,5 @@\n+\t\tSumConsumer(IMemberAccessor<? extends IQuantity, IItem> accessor, Predicate predicate) {\n+\t\t\tsuper(accessor);\n+\t\t\tthis.predicate = predicate;\n+\t\t}\n+\n@@ -153,1 +160,4 @@\n-\t\t\tsum += fieldValue.doubleValueIn(unit);\n+\t\t\tdouble value = fieldValue.doubleValueIn(unit);\n+\t\t\tif ((predicate != null && predicate.test(value)) || (predicate == null)) {\n+\t\t\t\tsum += value;\n+\t\t\t}\n@@ -760,0 +770,25 @@\n+\tpublic static IAggregator<IQuantity, ?> sum(\n+\t\tString name, String description, final String typeId, final IAttribute<IQuantity> attribute,\n+\t\tPredicate<Double> predicate) {\n+\t\tContentType<IQuantity> contentType = attribute.getContentType();\n+\t\tif (contentType instanceof LinearKindOfQuantity) {\n+\t\t\treturn new Sum(name, description, (LinearKindOfQuantity) contentType) {\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic SumConsumer newItemConsumer(IType<IItem> type) {\n+\t\t\t\t\treturn new SumConsumer(getAccessor(type), predicate);\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tprotected IMemberAccessor<IQuantity, IItem> doGetAccessor(IType<IItem> type) {\n+\t\t\t\t\tif (type.getIdentifier().equals(typeId)) {\n+\t\t\t\t\t\treturn attribute.getAccessor(type);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\n+\t\t\t};\n+\t\t}\n+\t\tthrow new IllegalArgumentException(\"Can only use LinearKindOfQuantity\"); \/\/$NON-NLS-1$\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/Aggregators.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-\t\t\tSOCKET_READ, IO_SOCKET_BYTES_READ);\n+\t\t\tSOCKET_READ, IO_SOCKET_BYTES_READ, (value -> value >= 0));\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}