{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -123,1 +124,2 @@\n-\tprivate static final IItemFilter TABLE_ITEMS = ItemFilters.or(JdkFilters.OBJECT_COUNT, JdkFilters.ALLOC_ALL);\n+\tprivate static final IItemFilter TABLE_ITEMS = ItemFilters.or(JdkFilters.OBJECT_COUNT, JdkFilters.ALLOC_ALL,\n+\t\t\tJdkFilters.OBJ_ALLOC);\n@@ -133,13 +135,0 @@\n-\tprivate static final ItemHistogramBuilder HISTOGRAM = new ItemHistogramBuilder();\n-\n-\tstatic {\n-\t\tHISTOGRAM.addColumn(INSTANCES_COL, JdkAggregators.OBJECT_COUNT_MAX_INSTANCES);\n-\t\tHISTOGRAM.addColumn(SIZE_COL, JdkAggregators.OBJECT_COUNT_MAX_SIZE);\n-\t\tHISTOGRAM.addColumn(INCREASE_COL, ObjectStatisticsDataProvider.getIncreaseAggregator());\n-\t\tHISTOGRAM.addColumn(ALLOCATION_COL, JdkAggregators.ALLOCATION_TOTAL);\n-\t\tHISTOGRAM.addPercentageColumn(ALLOCATION_PERCENT_COL, JdkAggregators.ALLOCATION_TOTAL,\n-\t\t\t\tMessages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE, Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC);\n-\t\tHISTOGRAM.addColumn(INSIDE_TLAB_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM);\n-\t\tHISTOGRAM.addColumn(OUTSIDE_TLAB_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM);\n-\t}\n-\n@@ -179,0 +168,11 @@\n+\t\t\tItemHistogramBuilder HISTOGRAM = new ItemHistogramBuilder();\n+\t\t\tIAggregator<IQuantity, ?> allocTotalAggregator = hasObjectAllocSampleEvent()\n+\t\t\t\t\t? JdkAggregators.OBJ_ALLOC_TOTAL_SUM : JdkAggregators.ALLOCATION_TOTAL;\n+\t\t\tHISTOGRAM.addColumn(INSTANCES_COL, JdkAggregators.OBJECT_COUNT_MAX_INSTANCES);\n+\t\t\tHISTOGRAM.addColumn(SIZE_COL, JdkAggregators.OBJECT_COUNT_MAX_SIZE);\n+\t\t\tHISTOGRAM.addColumn(INCREASE_COL, ObjectStatisticsDataProvider.getIncreaseAggregator());\n+\t\t\tHISTOGRAM.addColumn(ALLOCATION_COL, allocTotalAggregator);\n+\t\t\tHISTOGRAM.addPercentageColumn(ALLOCATION_PERCENT_COL, allocTotalAggregator,\n+\t\t\t\t\tMessages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE, Messages.HeapPage_ALLOCATION_TOTAL_PERCENTAGE_DESC);\n+\t\t\tHISTOGRAM.addColumn(INSIDE_TLAB_COL, JdkAggregators.ALLOC_INSIDE_TLAB_SUM);\n+\t\t\tHISTOGRAM.addColumn(OUTSIDE_TLAB_COL, JdkAggregators.ALLOC_OUTSIDE_TLAB_SUM);\n@@ -190,0 +190,4 @@\n+\t\t\t\tboolean hasObjectAllocSampleEvent = hasObjectAllocSampleEvent();\n+\t\t\t\tIAggregator<IQuantity, ?> allocTotalAggregator = hasObjectAllocSampleEvent\n+\t\t\t\t\t\t? JdkAggregators.OBJ_ALLOC_TOTAL_SUM : JdkAggregators.ALLOCATION_TOTAL;\n+\t\t\t\tIItemFilter selectedFilter = hasObjectAllocSampleEvent ? JdkFilters.OBJ_ALLOC : JdkFilters.ALLOC_ALL;\n@@ -191,2 +195,2 @@\n-\t\t\t\t\t\tJdkAggregators.ALLOCATION_TOTAL.getDescription(), selectedItems.apply(JdkFilters.ALLOC_ALL),\n-\t\t\t\t\t\tJdkAggregators.ALLOCATION_TOTAL, DataPageToolkit.ALLOCATION_COLOR));\n+\t\t\t\t\t\tallocTotalAggregator.getDescription(), selectedItems.apply(selectedFilter),\n+\t\t\t\t\t\tallocTotalAggregator, DataPageToolkit.ALLOCATION_COLOR));\n@@ -248,2 +252,4 @@\n-\t\t\tallocationAction = DataPageToolkit.createAggregatorCheckAction(JdkAggregators.ALLOCATION_TOTAL,\n-\t\t\t\t\tALLOCATION_COL, DataPageToolkit.ALLOCATION_COLOR, b -> buildChart());\n+\t\t\tIAggregator<IQuantity, ?> allocTotalAggregator = hasObjectAllocSampleEvent()\n+\t\t\t\t\t? JdkAggregators.OBJ_ALLOC_TOTAL_SUM : JdkAggregators.ALLOCATION_TOTAL;\n+\t\t\tallocationAction = DataPageToolkit.createAggregatorCheckAction(allocTotalAggregator, ALLOCATION_COL,\n+\t\t\t\t\tDataPageToolkit.ALLOCATION_COLOR, b -> buildChart());\n@@ -284,0 +290,4 @@\n+\tprivate boolean hasObjectAllocSampleEvent() {\n+\t\treturn getDataSource().getItems().apply(ItemFilters.type(JdkTypeIDs.OBJ_ALLOC_SAMPLE)).hasItems();\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/HeapPage.java","additions":29,"deletions":19,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -338,0 +338,3 @@\n+\tpublic static final IAggregator<IQuantity, ?> OBJ_ALLOC_TOTAL_SUM = Aggregators.sum(\n+\t\t\tMessages.getString(Messages.AGGR_OBJ_ALLOC_SUM), Messages.getString(Messages.AGGR_OBJ_ALLOC_SUM_DESC),\n+\t\t\tJdkTypeIDs.OBJ_ALLOC_SAMPLE, JdkAttributes.SAMPLE_WEIGHT);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1283,0 +1283,2 @@\n+\tpublic static final IAttribute<IQuantity> SAMPLE_WEIGHT = attr(\"weight\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_SAMPLE_WEIGHT), MEMORY);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+\tpublic static final IItemFilter OBJ_ALLOC = ItemFilters.type(JdkTypeIDs.OBJ_ALLOC_SAMPLE);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkFilters.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+\tpublic static final String OBJ_ALLOC_SAMPLE = PREFIX + \"ObjectAllocationSample\";\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkTypeIDs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,2 @@\n+\tpublic static final String AGGR_OBJ_ALLOC_SUM = \"AGGR_OBJ_ALLOC_SUM\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OBJ_ALLOC_SUM_DESC = \"AGGR_OBJ_ALLOC_SUM_DESC\"; \/\/$NON-NLS-1$\n@@ -424,0 +426,1 @@\n+\tpublic static final String ATTR_SAMPLE_WEIGHT = \"ATTR_SAMPLE_WEIGHT\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -337,0 +337,1 @@\n+ATTR_SAMPLE_WEIGHT=Sample Weight\n@@ -343,0 +344,2 @@\n+AGGR_OBJ_ALLOC_SUM=Alloc Total\n+AGGR_OBJ_ALLOC_SUM_DESC=The estimated total of allocation size\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}