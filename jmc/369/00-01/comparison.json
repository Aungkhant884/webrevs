{"files":[{"patch":"@@ -11,0 +11,1 @@\n+JVM_ARGUMENTS=\"\"\n@@ -86,0 +87,1 @@\n+        printf \" \\t%s\\t%s\\n\" \"--skipJDPMulticastTests\" \"skip multicast related tests\"\n@@ -103,1 +105,1 @@\n-    mvn verify\n+    mvn ${JVM_ARGUMENTS} verify\n@@ -111,1 +113,1 @@\n-    mvn verify -P uitests\n+    mvn ${JVM_ARGUMENTS} verify -P uitests\n@@ -121,1 +123,1 @@\n-    mvn package --log-file \"${packageLog}\"\n+    mvn ${JVM_ARGUMENTS} package --log-file \"${packageLog}\"\n@@ -142,1 +144,1 @@\n-    mvn package --log-file \"${packageLog}\"\n+    mvn ${JVM_ARGUMENTS} package --log-file \"${packageLog}\"\n@@ -294,0 +296,3 @@\n+            --skipJDPMulticastTests)\n+                JVM_ARGUMENTS=\"${JVM_ARGUMENTS} -DskipJDPMulticastTests=true \"\n+                ;;\n","filename":"build.sh","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-\t\tAssume.assumeTrue(TestToolkit.BROADCASTING_SUPPORTED);\n+\t\tAssume.assumeTrue(TestToolkit.areBroadcastingTestsEnabled());\n@@ -88,1 +88,1 @@\n-\t\tAssume.assumeTrue(TestToolkit.BROADCASTING_SUPPORTED);\n+\t\tAssume.assumeTrue(TestToolkit.areBroadcastingTestsEnabled());\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/src\/test\/java\/org\/openjdk\/jmc\/jdp\/client\/JDPClientTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-\t\tAssume.assumeTrue(TestToolkit.BROADCASTING_SUPPORTED);\n+\t\tAssume.assumeTrue(TestToolkit.areBroadcastingTestsEnabled());\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/src\/test\/java\/org\/openjdk\/jmc\/jdp\/client\/JDPJMXTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,5 +58,0 @@\n-\t\/**\n-\t * See https:\/\/bugs.openjdk.java.net\/browse\/JMC-7539\n-\t *\/\n-\tpublic static final boolean BROADCASTING_SUPPORTED;\n-\n@@ -72,1 +67,0 @@\n-\t\tBROADCASTING_SUPPORTED = isBroadcastingSupported();\n@@ -160,14 +154,40 @@\n-\tprivate static boolean isBroadcastingSupported() {\n-\t\ttry {\n-\t\t\tInetAddress multiCastAddress = InetAddress.getByName(\"239.255.255.255\");\n-\t\t\tint multiCastPort = 7711;\n-\t\t\tThread thread = new Thread(() -> {\n-\t\t\t\ttry (MulticastSocket ssocket = new MulticastSocket(multiCastPort)) {\n-\t\t\t\t\tssocket.setTimeToLive(1);\n-\t\t\t\t\tssocket.joinGroup(multiCastAddress);\n-\t\t\t\t\tfinal DatagramPacket dp = new DatagramPacket(new byte[] {1}, 1, multiCastAddress, multiCastPort);\n-\t\t\t\t\twhile (true) {\n-\t\t\t\t\t\tssocket.send(dp);\n-\t\t\t\t\t\tThread.sleep(10);\n-\t\t\t\t\t}\n-\t\t\t\t} catch (InterruptedException | IOException e) {\n+\t\/**\n+\t * See https:\/\/bugs.openjdk.java.net\/browse\/JMC-7539\n+\t *\/\n+\tpublic static boolean areBroadcastingTestsEnabled() {\n+\t\tif (System.getProperty(\"skipJDPMulticastTests\", \"false\").equals(\"true\")) {\n+\t\t\tJDPClientTest.LOGGER.log(Level.INFO, \"Broadcasting related tests are disabled\");\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (!isBroadcastingPossible()) {\n+\t\t\tString os = System.getProperty(\"os.name\").toLowerCase();\n+\t\t\tString helpMessage = \", you could try \";\n+\t\t\tString address = TEST_MULTICAST_ADDRESS.getCanonicalHostName();\n+\t\t\tif (os.startsWith(\"mac\") || os.startsWith(\"darwin\")) {\n+\t\t\t\thelpMessage += String.format(\"'sudo route add -host %s -interface en0'\", address);\n+\t\t\t} else if (os.startsWith(\"linux\")) {\n+\t\t\t\thelpMessage += String.format(\"'sudo ip route add %s dev eth0'\", address);\n+\t\t\t} else {\n+\t\t\t\thelpMessage = \"\";\n+\t\t\t}\n+\t\t\tJDPClientTest.LOGGER.log(Level.WARNING, \"Broadcasting does not seem to be possible.\\n\"\n+\t\t\t\t\t+ \"This is usually related to VPN. There are four possible ways to remedy this:\\n\"\n+\t\t\t\t\t+ \"  1. Try to configure your VPN, or perhaps turn it off.\\n\"\n+\t\t\t\t\t+ \"  2. Add a proper route for local multicast\" + helpMessage + \".\\n\"\n+\t\t\t\t\t+ \"  3. If the two above really can't be made to work, use -DskipJDPMulticastTests=true (with Java or maven)\\n\"\n+\t\t\t\t\t+ \"     or --skipJDPMulticastTests (as first argument of the build script)\");\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\tprivate static boolean isBroadcastingPossible() {\n+\t\tInetAddress multiCastAddress = TEST_MULTICAST_ADDRESS;\n+\t\tint multiCastPort = 7711;\n+\t\tThread thread = new Thread(() -> {\n+\t\t\ttry (MulticastSocket ssocket = new MulticastSocket(multiCastPort)) {\n+\t\t\t\tssocket.setTimeToLive(1);\n+\t\t\t\tssocket.joinGroup(multiCastAddress);\n+\t\t\t\tfinal DatagramPacket dp = new DatagramPacket(new byte[] { 1 }, 1, multiCastAddress, multiCastPort);\n+\t\t\t\twhile (true) {\n+\t\t\t\t\tssocket.send(dp);\n+\t\t\t\t\tThread.sleep(10);\n@@ -175,11 +195,1 @@\n-\t\t\t});\n-\t\t\tthread.start();\n-\t\t\ttry (MulticastSocket socket = new MulticastSocket(multiCastPort)) {\n-\t\t\t\tsocket.joinGroup(multiCastAddress);\n-\t\t\t\tbyte[] buffer = new byte[4096];\n-\t\t\t\tsocket.setSoTimeout(300);\n-\t\t\t\tsocket.receive(new DatagramPacket(buffer, buffer.length));\n-\t\t\t\treturn true;\n-\t\t\t} catch (IOException e) {\n-\t\t\t} finally {\n-\t\t\t\tthread.interrupt();\n+\t\t\t} catch (InterruptedException | IOException e) {\n@@ -187,1 +197,11 @@\n-\t\t} catch (UnknownHostException ex) {\n+\t\t});\n+\t\tthread.start();\n+\t\ttry (MulticastSocket socket = new MulticastSocket(multiCastPort)) {\n+\t\t\tsocket.joinGroup(multiCastAddress);\n+\t\t\tbyte[] buffer = new byte[4096];\n+\t\t\tsocket.setSoTimeout(300);\n+\t\t\tsocket.receive(new DatagramPacket(buffer, buffer.length));\n+\t\t\treturn true;\n+\t\t} catch (IOException e) {\n+\t\t} finally {\n+\t\t\tthread.interrupt();\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/src\/test\/java\/org\/openjdk\/jmc\/jdp\/client\/TestToolkit.java","additions":52,"deletions":32,"binary":false,"changes":84,"status":"modified"}]}