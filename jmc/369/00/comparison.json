{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import org.junit.Assume;\n@@ -65,0 +66,1 @@\n+\t\tAssume.assumeTrue(TestToolkit.BROADCASTING_SUPPORTED);\n@@ -86,0 +88,1 @@\n+\t\tAssume.assumeTrue(TestToolkit.BROADCASTING_SUPPORTED);\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/src\/test\/java\/org\/openjdk\/jmc\/jdp\/client\/JDPClientTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import org.junit.Assume;\n@@ -61,0 +62,1 @@\n+\t\tAssume.assumeTrue(TestToolkit.BROADCASTING_SUPPORTED);\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/src\/test\/java\/org\/openjdk\/jmc\/jdp\/client\/JDPJMXTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.io.IOException;\n@@ -36,0 +37,1 @@\n+import java.net.DatagramPacket;\n@@ -38,0 +40,1 @@\n+import java.net.MulticastSocket;\n@@ -55,0 +58,4 @@\n+\t\/**\n+\t * See https:\/\/bugs.openjdk.java.net\/browse\/JMC-7539\n+\t *\/\n+\tpublic static final boolean BROADCASTING_SUPPORTED;\n@@ -65,0 +72,1 @@\n+\t\tBROADCASTING_SUPPORTED = isBroadcastingSupported();\n@@ -151,0 +159,32 @@\n+\n+\tprivate static boolean isBroadcastingSupported() {\n+\t\ttry {\n+\t\t\tInetAddress multiCastAddress = InetAddress.getByName(\"239.255.255.255\");\n+\t\t\tint multiCastPort = 7711;\n+\t\t\tThread thread = new Thread(() -> {\n+\t\t\t\ttry (MulticastSocket ssocket = new MulticastSocket(multiCastPort)) {\n+\t\t\t\t\tssocket.setTimeToLive(1);\n+\t\t\t\t\tssocket.joinGroup(multiCastAddress);\n+\t\t\t\t\tfinal DatagramPacket dp = new DatagramPacket(new byte[] {1}, 1, multiCastAddress, multiCastPort);\n+\t\t\t\t\twhile (true) {\n+\t\t\t\t\t\tssocket.send(dp);\n+\t\t\t\t\t\tThread.sleep(10);\n+\t\t\t\t\t}\n+\t\t\t\t} catch (InterruptedException | IOException e) {\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tthread.start();\n+\t\t\ttry (MulticastSocket socket = new MulticastSocket(multiCastPort)) {\n+\t\t\t\tsocket.joinGroup(multiCastAddress);\n+\t\t\t\tbyte[] buffer = new byte[4096];\n+\t\t\t\tsocket.setSoTimeout(300);\n+\t\t\t\tsocket.receive(new DatagramPacket(buffer, buffer.length));\n+\t\t\t\treturn true;\n+\t\t\t} catch (IOException e) {\n+\t\t\t} finally {\n+\t\t\t\tthread.interrupt();\n+\t\t\t}\n+\t\t} catch (UnknownHostException ex) {\n+\t\t}\n+\t\treturn false;\n+\t}\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/src\/test\/java\/org\/openjdk\/jmc\/jdp\/client\/TestToolkit.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}