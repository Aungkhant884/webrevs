{"files":[{"patch":"@@ -50,2 +50,0 @@\n-import org.openjdk.jmc.common.version.JavaVMVersionToolkit;\n-import org.openjdk.jmc.common.version.JavaVersion;\n@@ -59,1 +57,0 @@\n-import org.openjdk.jmc.rjmx.IServerHandle;\n@@ -138,0 +135,59 @@\n+\t\/**\n+\t * Creates a server descriptor with information matching the currently running JVM.\n+\t * \n+\t * @return the server descriptor.\n+\t *\/\n+\tpublic static IServerDescriptor createDefaultServerDesciptor() {\n+\t\tString jvmName = System.getProperty(\"java.vm.name\");\n+\t\t\/\/ Assume hooking up to same JVM version as running the tests...\n+\t\tJVMDescriptor jvmDescriptor = new JVMDescriptor(System.getProperty(\"java.vm.version\"),\n+\t\t\t\tJVMType.getJVMType(jvmName), null, \"\", \"\", jvmName, System.getProperty(\"java.vm.vendor\"), null, false,\n+\t\t\t\tConnectable.MGMNT_AGENT_STARTED);\n+\t\treturn new ServerDescriptor(null, \"Test\", jvmDescriptor);\n+\t}\n+\n+\t\/**\n+\t * Creates a server descriptor with information derived from the JVM with the provided\n+\t * connection.\n+\t * \n+\t * @param connection\n+\t *            an active {@link MBeanServerConnection}.\n+\t * @return the server descriptor.\n+\t * @throws IOException\n+\t *\/\n+\tpublic static IServerDescriptor createDefaultServerDesciptor(MBeanServerConnection connection) throws IOException {\n+\t\tMap<String, String> properties = ConnectionToolkit.getRuntimeBean(connection).getSystemProperties();\n+\t\tString jvmName = properties.get(\"java.vm.name\");\n+\t\t\/\/ Assume hooking up to same JVM version as running the tests...\n+\t\tJVMDescriptor jvmDescriptor = new JVMDescriptor(properties.get(\"java.vm.version\"), JVMType.getJVMType(jvmName),\n+\t\t\t\tnull, \"\", \"\", jvmName, properties.get(\"java.vm.vendor\"), null, false, Connectable.MGMNT_AGENT_STARTED);\n+\t\treturn new ServerDescriptor(null, \"Test\", jvmDescriptor);\n+\t}\n+\n+\t\/**\n+\t * Creates a server descriptor with information derived from the JVM described by the server\n+\t * descriptor. Will connect temporarily to derive the information.\n+\t * \n+\t * @param descriptor\n+\t *            the descriptor defining the JVM to connect to.\n+\t * @return the server descriptor, with information derived from the actual connection, or an\n+\t *         {@link IOException} if one could not be derived.\n+\t * @throws IOException\n+\t *\/\n+\tpublic static IServerDescriptor createDefaultServerDesciptor(IConnectionDescriptor descriptor) throws IOException {\n+\t\tRJMXConnection rjmxConnection = new RJMXConnection(descriptor, RjmxTestCase.createDefaultServerDesciptor(),\n+\t\t\t\tnull);\n+\t\tif (!rjmxConnection.connect()) {\n+\t\t\trjmxConnection.close();\n+\t\t\tthrow new IOException(\"Could not connect to \" + descriptor);\n+\t\t}\n+\t\ttry (DefaultConnectionHandle handle = new DefaultConnectionHandle(rjmxConnection, \"derive server descriptor\",\n+\t\t\t\tnull)) {\n+\t\t\tMBeanServerConnection mbeanServer = handle.getServiceOrNull(MBeanServerConnection.class);\n+\t\t\tif (mbeanServer != null) {\n+\t\t\t\treturn createDefaultServerDesciptor(mbeanServer);\n+\t\t\t}\n+\t\t}\n+\t\tthrow new IOException(\"Could not derive the server descriptor for \" + descriptor.toString());\n+\t}\n+\n@@ -224,1 +280,2 @@\n-\t * Quick'n'Dirty way to create a {@link IConnectionHandle}.\n+\t * Quick'n'Dirty way to create a {@link IConnectionHandle}. Will have a server descriptor\n+\t * matching the connection.\n@@ -232,1 +289,1 @@\n-\t\tRJMXConnection connection = new RJMXConnection(descriptor, createDefaultServerDesciptor(), null);\n+\t\tRJMXConnection connection = new RJMXConnection(descriptor, createDefaultServerDesciptor(descriptor), null);\n@@ -237,9 +294,0 @@\n-\tprivate static IServerDescriptor createDefaultServerDesciptor() {\n-\t\tString jvmName = System.getProperty(\"java.vm.name\");\n-\t\t\/\/ Assume hooking up to same JVM version as running the tests...\n-\t\tJVMDescriptor jvmDescriptor = new JVMDescriptor(System.getProperty(\"java.vm.version\"),\n-\t\t\t\tJVMType.getJVMType(jvmName), null, \"\", \"\", jvmName, System.getProperty(\"java.vm.vendor\"), null, false,\n-\t\t\t\tConnectable.MGMNT_AGENT_STARTED);\n-\t\treturn new ServerDescriptor(null, \"Test\", jvmDescriptor);\n-\t}\n-\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/RjmxTestCase.java","additions":62,"deletions":14,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -35,0 +35,4 @@\n+import java.io.IOException;\n+\n+import javax.management.MBeanServerConnection;\n+\n@@ -37,1 +41,2 @@\n-\n+import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -39,0 +44,2 @@\n+import org.openjdk.jmc.rjmx.internal.DefaultConnectionHandle;\n+import org.openjdk.jmc.rjmx.internal.RJMXConnection;\n@@ -47,1 +54,4 @@\n-\t\tdefaultServer = new ServerHandle(LocalRJMXTestToolkit.createDefaultDescriptor());\n+\t\tdefaultServer = new ServerHandle(\n+\t\t\t\tderiveServerDescriptor(RjmxTestCase.getDefaultConnectionDescriptor(),\n+\t\t\t\t\t\tRjmxTestCase.createDefaultServerDesciptor()),\n+\t\t\t\tLocalRJMXTestToolkit.createDefaultDescriptor(), null);\n@@ -51,0 +61,9 @@\n+\tprivate IServerDescriptor deriveServerDescriptor(\n+\t\tIConnectionDescriptor connectionDescriptor, IServerDescriptor defaultDescriptor) {\n+\t\ttry {\n+\t\t\treturn RjmxTestCase.createDefaultServerDesciptor(connectionDescriptor);\n+\t\t} catch (IOException e) {\n+\t\t\treturn defaultDescriptor;\n+\t\t}\n+\t}\n+\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/ServerHandleTestCase.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"}]}