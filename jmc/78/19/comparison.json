{"files":[{"patch":"@@ -102,1 +102,1 @@\n-\t\t\tif (other.packageName != null) {\n+\t\t\tif (other.packageName != null)\n@@ -104,1 +104,0 @@\n-\t\t\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceNode.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import java.util.Iterator;\n@@ -94,1 +95,2 @@\n-\tpublic static TraceNode createTree(TraceNode root, StacktraceModel model) {\n+\tpublic static TraceNode createTree(final TraceNode root, final StacktraceModel model) {\n+\n@@ -96,3 +98,1 @@\n-\t\tfor (Branch branch : rootFork.getBranches()) {\n-\t\t\taddBranch(root, branch);\n-\t\t}\n+\t\taddFork(root, rootFork);\n@@ -102,0 +102,28 @@\n+\t\/**\n+\t * DescriptionContainer for the TraceNode model (title, content)\n+\t *\/\n+\tprivate static class DescriptionContainer {\n+\t\tprivate final StringBuilder titleSb = new StringBuilder();\n+\t\tprivate final StringBuilder descSb = new StringBuilder();\n+\n+\t\tprivate DescriptionContainer() {\n+\n+\t\t}\n+\n+\t\tprivate void appendTitle(String s) {\n+\t\t\ttitleSb.append(s);\n+\t\t}\n+\n+\t\tprivate String title() {\n+\t\t\treturn titleSb.toString();\n+\t\t}\n+\n+\t\tprivate void appendDesc(String s) {\n+\t\t\tdescSb.append(s);\n+\t\t}\n+\n+\t\tprivate String desc() {\n+\t\t\treturn descSb.toString();\n+\t\t}\n+\t}\n+\n@@ -113,2 +141,1 @@\n-\t\tStringBuilder titleSb = new StringBuilder();\n-\t\tStringBuilder descSb = new StringBuilder();\n+\t\tfinal DescriptionContainer descContainer = new DescriptionContainer();\n@@ -118,1 +145,1 @@\n-\t\t\ttitleSb.append(getFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE));\n+\t\t\tdescContainer.appendTitle(getFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE));\n@@ -122,2 +149,2 @@\n-\t\t\ttitleSb.append(selectionText);\n-\t\t\tcreateNodeTitleAndDescription(titleSb, descSb, orderedEventTypeNameWithCount);\n+\t\t\tdescContainer.appendTitle(selectionText);\n+\t\t\tcreateNodeTitleAndDescription(descContainer, orderedEventTypeNameWithCount);\n@@ -126,1 +153,5 @@\n-\t\treturn new TraceNode(titleSb.toString(), 0, descSb.toString());\n+\t\tif (Thread.currentThread().isAlive()) {\n+\t\t\treturn new TraceNode(descContainer.title(), 0, descContainer.desc());\n+\t\t} else {\n+\t\t\treturn new TraceNode(getFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE), 0, null);\n+\t\t}\n@@ -153,2 +184,2 @@\n-\tprivate static void addBranch(TraceNode root, Branch branch) {\n-\t\tStacktraceFrame firstFrame = branch.getFirstFrame();\n+\tprivate static void addBranch(final TraceNode root, final Branch branch) {\n+\t\tfinal StacktraceFrame firstFrame = branch.getFirstFrame();\n@@ -157,1 +188,5 @@\n-\t\tfor (StacktraceFrame frame : branch.getTailFrames()) {\n+\n+\t\tfinal StacktraceFrame[] frames = branch.getTailFrames();\n+\t\tint i = 0;\n+\t\twhile (Thread.currentThread().isAlive() && i < frames.length) {\n+\t\t\tfinal StacktraceFrame frame = frames[i];\n@@ -161,0 +196,1 @@\n+\t\t\ti++;\n@@ -162,0 +198,1 @@\n+\n@@ -166,2 +203,6 @@\n-\t\tfor (Branch branch : fork.getBranches()) {\n-\t\t\taddBranch(node, branch);\n+\t\tfinal Branch[] branches = fork.getBranches();\n+\t\tint i = 0;\n+\n+\t\twhile (Thread.currentThread().isAlive() && i < branches.length) {\n+\t\t\taddBranch(node, branches[i]);\n+\t\t\ti++;\n@@ -213,1 +254,1 @@\n-\t\tStringBuilder titleSb, StringBuilder descSb, Map<String, Integer> orderedItemCountByType) {\n+\t\tDescriptionContainer descContainer, Map<String, Integer> orderedItemCountByType) {\n@@ -215,1 +256,1 @@\n-\t\tint i = 0;\n+\t\tint rootEventsCount = 0;\n@@ -221,1 +262,4 @@\n-\t\tfor (Map.Entry<String, Integer> e : orderedItemCountByType.entrySet()) {\n+\t\tint i = 0;\n+\t\tIterator<Map.Entry<String, Integer>> it = orderedItemCountByType.entrySet().iterator();\n+\t\twhile (Thread.currentThread().isAlive() && it.hasNext()) {\n+\t\t\tMap.Entry<String, Integer> e = it.next();\n@@ -225,3 +269,3 @@\n-\t\t\t\ttitleSb.append(eventType);\n-\t\t\t\tif (i < maxEventsInTile) {\n-\t\t\t\t\ttitleSb.append(SELECT_EVENT_DELIMITER);\n+\t\t\t\tdescContainer.appendTitle(eventType);\n+\t\t\t\tif (rootEventsCount < maxEventsInTile) {\n+\t\t\t\t\tdescContainer.appendTitle(SELECT_EVENT_DELIMITER);\n@@ -232,1 +276,1 @@\n-\t\t\tif (i < DEFAULT_ROOT_EVENT_MAX) {\n+\t\t\tif (rootEventsCount < DEFAULT_ROOT_EVENT_MAX) {\n@@ -235,1 +279,1 @@\n-\t\t\t\tdescSb.append(tableEvent);\n+\t\t\t\tdescContainer.appendDesc(tableEvent);\n@@ -239,0 +283,1 @@\n+\t\t\trootEventsCount++;\n@@ -242,7 +287,8 @@\n-\t\tif (restEventCount > 0) {\n-\t\t\tString restEventCountText = String.valueOf(restEventCount);\n-\t\t\tString restItemCountText = String.valueOf(orderedItemCountByType.size() - DEFAULT_ROOT_EVENT_MAX);\n-\t\t\tString tableEventRest = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN,\n-\t\t\t\t\trestEventCountText, restItemCountText);\n-\t\t\tdescSb.append(tableEventRest);\n-\t\t}\n+\t\tif (i == orderedItemCountByType.size()) {\n+\t\t\tif (restEventCount > 0) {\n+\t\t\t\tString restEventCountText = String.valueOf(restEventCount);\n+\t\t\t\tString restItemCountText = String.valueOf(orderedItemCountByType.size() - DEFAULT_ROOT_EVENT_MAX);\n+\t\t\t\tString tableEventRest = getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN,\n+\t\t\t\t\t\trestEventCountText, restItemCountText);\n+\t\t\t\tdescContainer.appendDesc(tableEventRest);\n+\t\t\t}\n@@ -250,2 +296,3 @@\n-\t\tif (maxEventsInTile < orderedItemCountByType.size() - 1) {\n-\t\t\ttitleSb.append(getFlameviewMessage(FLAMEVIEW_SELECT_HTML_MORE)); \/\/ $NON-NLS-1$\n+\t\t\tif (maxEventsInTile < orderedItemCountByType.size() - 1) {\n+\t\t\t\tdescContainer.appendTitle(getFlameviewMessage(FLAMEVIEW_SELECT_HTML_MORE)); \/\/ $NON-NLS-1$\n+\t\t\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceTreeUtils.java","additions":79,"deletions":32,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import java.util.concurrent.Callable;\n@@ -64,0 +65,1 @@\n+import java.util.concurrent.Future;\n@@ -106,0 +108,2 @@\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;\n@@ -107,0 +111,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -126,1 +131,2 @@\n-\t\t\/\/ from: https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.css\n+\t\t\/\/ from:\n+\t\t\/\/ https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.css\n@@ -136,1 +142,2 @@\n-\t\t\/\/ from: https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.min.js\n+\t\t\/\/ from:\n+\t\t\/\/ https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.min.js\n@@ -138,1 +145,1 @@\n-\t\t\/\/ jmc flameview coloring, tooltip and other  functions\n+\t\t\/\/ jmc flameview coloring, tooltip and other functions\n@@ -149,1 +156,2 @@\n-\t\t\/\/ formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts,\n+\t\t\/\/ formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9\n+\t\t\/\/ specific scripts,\n@@ -160,2 +168,0 @@\n-\tprivate TraceNode currentRoot;\n-\tprivate CompletableFuture<TraceNode> currentModelCalculator;\n@@ -164,1 +170,0 @@\n-\tprivate IItemCollection currentItems;\n@@ -168,0 +173,2 @@\n+\tprivate Future<Void> modelCalculationFuture;\n+\tprivate volatile IItemCollection currentItems;\n@@ -334,1 +341,6 @@\n-\t\t\tsetItems(AdapterUtil.getAdapter(first, IItemCollection.class));\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\trebuildModel(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\trebuildModel(items);\n+\t\t\t}\n@@ -338,4 +350,3 @@\n-\tprivate void setItems(IItemCollection items) {\n-\t\tif (items != null) {\n-\t\t\tcurrentItems = items;\n-\t\t\trebuildModel(items);\n+\tprivate void rebuildModel(IItemCollection items) {\n+\t\tif (modelCalculationFuture != null) {\n+\t\t\tmodelCalculationFuture.cancel(true);\n@@ -343,0 +354,3 @@\n+\n+\t\tmodelCalculationFuture = getModelPreparer(items, true);\n+\t\tcurrentItems = items;\n@@ -345,8 +359,2 @@\n-\tprivate void rebuildModel(IItemCollection items) {\n-\t\t\/\/ Release old model before building the new\n-\t\tif (currentModelCalculator != null) {\n-\t\t\tcurrentModelCalculator.cancel(true);\n-\t\t}\n-\t\tcurrentModelCalculator = getModelPreparer(items, frameSeparator, true);\n-\t\tcurrentModelCalculator.thenAcceptAsync(this::setModel, DisplayToolkit.inDisplayThread())\n-\t\t\t\t.exceptionally(FlameGraphView::handleModelBuildException);\n+\tprivate StacktraceModel createStacktraceModel(IItemCollection items) {\n+\t\treturn new StacktraceModel(threadRootAtTop, frameSeparator, items);\n@@ -355,7 +363,29 @@\n-\tprivate CompletableFuture<TraceNode> getModelPreparer(\n-\t\tfinal IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {\n-\t\treturn CompletableFuture.supplyAsync(() -> {\n-\t\t\tStacktraceModel model = new StacktraceModel(threadRootAtTop, frameSeparator, items);\n-\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(items, model.getRootFork().getBranchCount());\n-\t\t\treturn TraceTreeUtils.createTree(root, model);\n-\t\t}, MODEL_EXECUTOR);\n+\tprivate Future<Void> getModelPreparer(final IItemCollection items, final boolean materializeSelectedBranches) {\n+\n+\t\tfinal Callable<Void> modelPreparerTask = () -> {\n+\t\t\t\/\/ reduce the pressure on displayThread during a scrolling, ensure movement is final, seems there could be visibility issue\n+\t\t\tThread.sleep(200);\n+\t\t\tStacktraceModel model = createStacktraceModel(items);\n+\t\t\tFork rootFork = model.getRootFork();\n+\t\t\tif (materializeSelectedBranches) {\n+\t\t\t\tBranch selectedBranch = StacktraceModel.getLastSelectedBranch(rootFork);\n+\t\t\t\tif (selectedBranch != null) {\n+\t\t\t\t\tselectedBranch.getEndFork();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(items, rootFork.getBranchCount());\n+\t\t\tif (Thread.currentThread().isAlive()) {\n+\t\t\t\tTraceNode traceNode = TraceTreeUtils.createTree(root, model);\n+\t\t\t\tStringBuilder jsonModelBuilder = toJSonModel(traceNode);\n+\n+\t\t\t\tif (Thread.currentThread().isAlive()) {\n+\t\t\t\t\tDisplayToolkit.inDisplayThread()\n+\t\t\t\t\t\t\t.execute(() -> this.processModel(items, jsonModelBuilder.toString()));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t};\n+\n+\t\treturn MODEL_EXECUTOR.submit(modelPreparerTask);\n+\n@@ -364,4 +394,3 @@\n-\tprivate void setModel(TraceNode root) {\n-\t\tif (!browser.isDisposed() && !root.equals(currentRoot)) {\n-\t\t\tcurrentRoot = root;\n-\t\t\tsetViewerInput(root);\n+\tprivate void processModel(final IItemCollection items, final String json) {\n+\t\tif (items.equals(currentItems) && !browser.isDisposed()) {\n+\t\t\tsetViewerInput(json);\n@@ -371,1 +400,1 @@\n-\tprivate void setViewerInput(TraceNode root) {\n+\tprivate void setViewerInput(String json) {\n@@ -381,1 +410,0 @@\n-\t\t\t\tbrowser.removeProgressListener(this);\n@@ -384,2 +412,1 @@\n-\n-\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", toJSon(root), icicleViewActive));\n+\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", json, icicleViewActive));\n@@ -387,0 +414,1 @@\n+\t\t\t\tbrowser.removeProgressListener(this);\n@@ -410,1 +438,2 @@\n-\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n+\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1\n+\t\t\t\/\/ (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n@@ -453,15 +482,1 @@\n-\tprivate static Void handleModelBuildException(Throwable ex) {\n-\t\tif (!(ex.getCause() instanceof CancellationException)) {\n-\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to build stacktrace view model\", ex); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate static String toJSon(TraceNode root) {\n-\t\tif (root == null) {\n-\t\t\treturn \"\\\"\\\"\";\n-\t\t}\n-\t\treturn render(root);\n-\t}\n-\n-\tprivate static String render(TraceNode root) {\n+\tprivate StringBuilder toJSonModel(TraceNode root) {\n@@ -473,1 +488,1 @@\n-\t\treturn builder.toString();\n+\t\treturn builder;\n@@ -476,6 +491,8 @@\n-\tprivate static void render(StringBuilder builder, TraceNode node) {\n-\t\tString start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)\n-\t\t\t\t: createJsonTraceNode(node);\n-\t\tbuilder.append(start);\n-\t\trenderChildren(builder, node);\n-\t\tbuilder.append(\"]}\");\n+\tprivate void render(StringBuilder builder, TraceNode node) {\n+\t\tif (Thread.currentThread().isAlive()) {\n+\t\t\tString start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)\n+\t\t\t\t\t: createJsonTraceNode(node);\n+\t\t\tbuilder.append(start);\n+\t\t\trenderChildren(builder, node);\n+\t\t\tbuilder.append(\"]}\");\n+\t\t}\n@@ -484,2 +501,4 @@\n-\tprivate static void renderChildren(StringBuilder builder, TraceNode node) {\n-\t\tfor (int i = 0; i < node.getChildren().size(); i++) {\n+\tprivate void renderChildren(StringBuilder builder, TraceNode node) {\n+\n+\t\tint i = 0;\n+\t\twhile (Thread.currentThread().isAlive() && i < node.getChildren().size()) {\n@@ -490,0 +509,1 @@\n+\t\t\ti++;\n@@ -532,1 +552,1 @@\n-\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n+\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/ $NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":81,"deletions":61,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.getLastSelectedBranch;\n+\n@@ -39,0 +41,2 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -91,1 +95,0 @@\n-\n@@ -177,0 +180,1 @@\n+\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);\n@@ -688,1 +692,1 @@\n-\t\t});\n+\t\t}, MODEL_EXECUTOR);\n@@ -871,12 +875,0 @@\n-\t\/\/ See JMC-6787\n-\t@SuppressWarnings(\"deprecation\")\n-\tprivate static Branch getLastSelectedBranch(Fork fromFork) {\n-\t\tBranch lastSelectedBranch = null;\n-\t\tBranch branch = fromFork.getSelectedBranch();\n-\t\twhile (branch != null) {\n-\t\t\tlastSelectedBranch = branch;\n-\t\t\tbranch = branch.getEndFork().getSelectedBranch();\n-\t\t}\n-\t\treturn lastSelectedBranch;\n-\t}\n-\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -167,0 +167,12 @@\n+\t\/\/ See JMC-6787\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic static Branch getLastSelectedBranch(Fork fromFork) {\n+\t\tBranch lastSelectedBranch = null;\n+\t\tBranch branch = fromFork.getSelectedBranch();\n+\t\twhile (branch != null) {\n+\t\t\tlastSelectedBranch = branch;\n+\t\t\tbranch = branch.getEndFork().getSelectedBranch();\n+\t\t}\n+\t\treturn lastSelectedBranch;\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/StacktraceModel.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}