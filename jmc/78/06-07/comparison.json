{"files":[{"patch":"@@ -53,1 +53,0 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n@@ -97,1 +96,2 @@\n-\tpublic static TraceNode createTree(final AtomicBoolean active, TraceNode root, StacktraceModel model) {\n+\/\/\tpublic static TraceNode createTree(final AtomicBoolean active, TraceNode root, StacktraceModel model) {\n+\tpublic static TraceNode createTree(TraceNode root, StacktraceModel model) {\n@@ -102,1 +102,1 @@\n-\t\twhile (active.get() && i < branches.length) {\n+\t\twhile (!Thread.currentThread().isInterrupted() && i < branches.length) {\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceTreeUtils.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import java.util.concurrent.Callable;\n@@ -65,1 +66,1 @@\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.Future;\n@@ -170,2 +171,4 @@\n-\tprivate IItemCollection currentItems = ItemCollectionToolkit.build(Stream.empty());\n-\tprivate volatile AtomicBoolean modelCalculationActive = new AtomicBoolean();\n+\tprivate IItemCollection currentItems;\n+\tprivate TraceNode currentTraceRoot;\n+\/\/\tprivate volatile AtomicBoolean modelCalculationActive = new AtomicBoolean();\n+\tprivate volatile Future<Void> modelCalculationFuture;\n@@ -286,1 +289,1 @@\n-\t\tprivate static final ModelsContainer EMPTY = new ModelsContainer(null, null);\n+\t\tprivate static final ModelsContainer EMPTY = new ModelsContainer(null, null, null);\n@@ -289,0 +292,1 @@\n+\t\tprivate final String json;\n@@ -290,2 +294,1 @@\n-\t\tprivate ModelsContainer(TraceNode root, StacktraceModel model) {\n-\t\t\tsuper();\n+\t\tprivate ModelsContainer(TraceNode root, StacktraceModel model, String json) {\n@@ -294,0 +297,1 @@\n+\t\t\tthis.json = json;\n@@ -299,0 +303,4 @@\n+\t\t\n+\t\tprivate String json() {\n+\t\t\treturn json;\n+\t\t}\n@@ -301,1 +309,2 @@\n-\t\t\treturn model.equals(m);\n+\t\t\t\n+\t\t\treturn Thread.currentThread().isInterrupted() ? false : model.equals(m);\n@@ -305,1 +314,1 @@\n-\t\t\treturn root != null && model != null;\n+\t\t\treturn root != null && !root.isCanceled() && model != null && json != null;\n@@ -415,0 +424,4 @@\n+\tprivate void writeLog(String message) {\n+\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, message); \/\/$NON-NLS-1$\n+\t}\n+\t\n@@ -416,2 +429,3 @@\n-\t\tif (modelCalculationActive.get()) {\n-\t\t\tmodelCalculationActive.set(false);\n+\t\tif(modelCalculationFuture != null) {\n+\t\t\tmodelCalculationFuture.cancel(true);\n+\t\t\twriteLog(\"rebuildModel, canceled, from thread: \" + Thread.currentThread().getName() + \", feature done: \" + modelCalculationFuture.isDone());\n@@ -420,4 +434,1 @@\n-\t\tfinal CompletableFuture<ModelsContainer> currentModelCalculator = getModelPreparer(createStacktraceModel(),\n-\t\t\t\ttrue);\n-\t\tcurrentModelCalculator.thenAcceptAsync(this::setModel, DisplayToolkit.inDisplayThread())\n-\t\t\t\t.exceptionally(FlameGraphView::handleModelBuildException);\n+\t\tmodelCalculationFuture = getModelPreparer(createStacktraceModel(), true);\n@@ -430,4 +441,4 @@\n-\tprivate CompletableFuture<ModelsContainer> getModelPreparer(\n-\t\tfinal StacktraceModel model, final boolean materializeSelectedBranches) {\n-\t\tmodelCalculationActive.set(true);\n-\t\treturn CompletableFuture.supplyAsync(() -> {\n+\tprivate Future<Void> getModelPreparer(final StacktraceModel model, final boolean materializeSelectedBranches){\n+\t\t\n+\t\tfinal Callable<Void> callable = () -> {\n+\t\t\t\n@@ -440,0 +451,21 @@\n+\t\t\t} \n+\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(currentItems, rootFork.getBranchCount());\n+\t\t\tif(Thread.currentThread().isAlive()) {\n+\t\t\t\tTraceNode traceNode = TraceTreeUtils.createTree(root, model);\n+\t\t\t\tJSonModelBuilder jsonModelBuilder = toJSonModel(root);\n+\t\t\t\t\n+\t\t\t\tif(Thread.currentThread().isAlive() && !traceNode.isCanceled() && !jsonModelBuilder.isCanceled()) {\n+\t\t\t\t\t\n+\t\t\t\t\tModelsContainer modelContainer = new ModelsContainer(traceNode, model, jsonModelBuilder.build());\n+\t\t\t\t\tif(Thread.currentThread().isAlive()) {\n+\t\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> this.setModel(modelContainer));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\twriteLog(\"callable, not alive, not display thread:\" + Thread.currentThread().getName());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t} else {\n+\t\t\t\t\twriteLog(\"callable, not alive, traceNode.isCanceled, jsonModelBuild.isCanceled, thread:\" + Thread.currentThread().getName());\n+\t\t\t\t}\n+\t\t\t}else {\n+\t\t\t\twriteLog(\"getModelPreparer Thread, canceled: \" + Thread.currentThread().getName());\n@@ -441,9 +473,6 @@\n-\n-\t\t\tif (modelCalculationActive.get()) {\n-\t\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(currentItems, rootFork.getBranchCount());\n-\t\t\t\tTraceNode traceNode = TraceTreeUtils.createTree(modelCalculationActive, root, model);\n-\t\t\t\treturn traceNode.isCanceled() ? ModelsContainer.EMPTY : new ModelsContainer(traceNode, model);\n-\t\t\t} else {\n-\t\t\t\treturn ModelsContainer.EMPTY;\n-\t\t\t}\n-\t\t}, MODEL_EXECUTOR);\n+\t\t\t\n+\t\t\treturn null;\n+\t\t};\n+\t\t\n+\t\treturn  MODEL_EXECUTOR.submit(callable);\n+\t\t\n@@ -454,2 +483,13 @@\n-\t\tif (container.isReady() && !browser.isDisposed() && container.isEqualStacktraceModel(createStacktraceModel())) {\n-\t\t\tsetViewerInput(container.root());\n+\/\/\t\tif (container.isReady() && !browser.isDisposed() && container.isEqualStacktraceModel(createStacktraceModel())) {\n+\t\tif (currentTraceRoot == null) {\n+\t\t\twriteLog(\"setModel1: JSON: \" + Thread.currentThread().getName());\n+\/\/\t\t\tsetViewerInput(container.root());\n+\t\t\tsetViewerInput(container.json());\n+\t\t\tcurrentTraceRoot = container.root();\n+\t\t} else if (container.isReady() && !browser.isDisposed() && \n+\t\t\t\t!currentTraceRoot.equals(container.root()) && \n+\t\t\t\tcontainer.isEqualStacktraceModel(createStacktraceModel())) {\n+\t\t\twriteLog(\"setModel2: JSON: \" + Thread.currentThread().getName());\n+\/\/\t\t\tsetViewerInput(container.root());\n+\t\t\tcurrentTraceRoot = container.root();\n+\t\t\tsetViewerInput(container.json());\n@@ -459,1 +499,26 @@\n-\tprivate void setViewerInput(TraceNode root) {\n+\/\/\tprivate void setViewerInput(TraceNode root) {\n+\/\/\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(false));\n+\/\/\t\tbrowser.setText(HTML_PAGE);\n+\/\/\t\tbrowser.addListener(SWT.Resize, event -> {\n+\/\/\t\t\tbrowser.execute(\"resizeFlameGraph();\");\n+\/\/\t\t});\n+\/\/\n+\/\/\t\tbrowser.addProgressListener(new ProgressAdapter() {\n+\/\/\t\t\t@Override\n+\/\/\t\t\tpublic void completed(ProgressEvent event) {\n+\/\/\t\t\t\tbrowser.removeProgressListener(this);\n+\/\/\t\t\t\tJSonModelBuilder jsonModelBuilder = toJSonModel(root);\n+\/\/\t\t\t\tif (!jsonModelBuilder.isCanceled()) {\n+\/\/\t\t\t\t\tbrowser.execute(\n+\/\/\t\t\t\t\t\t\tString.format(\"configureTooltipText('%s', '%s', '%s', '%s', '%s');\", TABLE_COLUMN_COUNT,\n+\/\/\t\t\t\t\t\t\t\t\tTABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));\n+\/\/\t\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", jsonModelBuilder.build(), icicleViewActive));\n+\/\/\t\t\t\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(true));\n+\/\/\t\t\t\t}\n+\/\/\n+\/\/\t\t\t}\n+\/\/\t\t});\n+\/\/\n+\/\/\t}\n+\t\n+\tprivate void setViewerInput(String json) {\n@@ -470,2 +535,0 @@\n-\t\t\t\tJSonModelBuilder jsonModelBuilder = toJSonModel(root);\n-\t\t\t\tif (!jsonModelBuilder.isCanceled()) {\n@@ -475,1 +538,1 @@\n-\t\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", jsonModelBuilder.build(), icicleViewActive));\n+\t\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", json, icicleViewActive));\n@@ -479,1 +542,1 @@\n-\t\t\t}\n+\t\t\t\n@@ -565,2 +628,3 @@\n-\t\tAtomicBoolean renderActive = new AtomicBoolean(true);\n-\t\trenderChildren(renderActive, builder, root);\n+\/\/\t\tAtomicBoolean renderActive = new AtomicBoolean(true);\n+\/\/\t\trenderChildren(renderActive, builder, root);\n+\t\trenderChildren(builder, root);\n@@ -571,1 +635,9 @@\n-\tprivate void render(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {\n+\/\/\tprivate void render(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {\n+\/\/\t\tString start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)\n+\/\/\t\t\t\t: createJsonTraceNode(node);\n+\/\/\t\tbuilder.append(start);\n+\/\/\t\trenderChildren(renderActive, builder, node);\n+\/\/\t\tbuilder.append(\"]}\");\n+\/\/\t}\n+\t\n+\tprivate void render(JSonModelBuilder builder, TraceNode node) {\n@@ -575,1 +647,1 @@\n-\t\trenderChildren(renderActive, builder, node);\n+\t\trenderChildren(builder, node);\n@@ -578,2 +650,35 @@\n-\n-\tprivate void renderChildren(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {\n+\t\n+\/\/\tprivate void renderChildren(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {\n+\/\/\n+\/\/\t\tint i = 0;\n+\/\/\t\twhile (renderActive.get() && i < node.getChildren().size()) {\n+\/\/\t\t\tif (!modelCalculationActive.get()) {\n+\/\/\t\t\t\trenderActive.set(false);\n+\/\/\t\t\t\tbuilder.setCanceled();\n+\/\/\t\t\t}\n+\/\/\n+\/\/\t\t\trender(renderActive, builder, node.getChildren().get(i));\n+\/\/\t\t\tif (i < node.getChildren().size() - 1) {\n+\/\/\t\t\t\tbuilder.append(\",\");\n+\/\/\t\t\t}\n+\/\/\t\t\ti++;\n+\/\/\t\t}\n+\/\/\t}\n+\n+\/\/\tprivate void renderChildren(JSonModelBuilder builder, TraceNode node) {\n+\/\/\n+\/\/\t\tint i = 0;\n+\/\/\t\twhile (!Thread.currentThread().isInterrupted() && i < node.getChildren().size()) {\n+\/\/\t\t\tif (Thread.currentThread().isInterrupted()) {\n+\/\/\t\t\t\tbuilder.setCanceled();\n+\/\/\t\t\t}\n+\/\/\n+\/\/\t\t\trender(renderActive, builder, node.getChildren().get(i));\n+\/\/\t\t\tif (i < node.getChildren().size() - 1) {\n+\/\/\t\t\t\tbuilder.append(\",\");\n+\/\/\t\t\t}\n+\/\/\t\t\ti++;\n+\/\/\t\t}\n+\/\/\t}\n+\t\n+\tprivate void renderChildren(JSonModelBuilder builder, TraceNode node) {\n@@ -582,7 +687,2 @@\n-\t\twhile (renderActive.get() && i < node.getChildren().size()) {\n-\t\t\tif (!modelCalculationActive.get()) {\n-\t\t\t\trenderActive.set(false);\n-\t\t\t\tbuilder.setCanceled();\n-\t\t\t}\n-\n-\t\t\trender(renderActive, builder, node.getChildren().get(i));\n+\t\twhile (!Thread.currentThread().isInterrupted() && i < node.getChildren().size()) {\n+\t\t\trender(builder, node.getChildren().get(i));\n@@ -594,0 +694,3 @@\n+\t\tif (i < node.getChildren().size()) {\n+\t\t\tbuilder.setCanceled();\n+\t\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":150,"deletions":47,"binary":false,"changes":197,"status":"modified"}]}