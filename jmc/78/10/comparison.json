{"files":[{"patch":"@@ -40,0 +40,1 @@\n+\tpublic static final TraceNode EMPTY = new TraceNode(null, 0, null);\n@@ -44,0 +45,1 @@\n+\tprivate boolean valid = true;\n@@ -71,0 +73,8 @@\n+\tpublic boolean isValid() {\n+\t\treturn valid;\n+\t}\n+\n+\tpublic void setInvalid() {\n+\t\tthis.valid = false;\n+\t}\n+\n@@ -78,0 +88,1 @@\n+\t\tresult = prime * result + (valid ? 1231 : 1237);\n@@ -102,1 +113,1 @@\n-\t\t\tif (other.packageName != null) {\n+\t\t\tif (other.packageName != null)\n@@ -104,1 +115,0 @@\n-\t\t\t}\n@@ -107,0 +117,2 @@\n+\t\tif (valid != other.valid)\n+\t\t\treturn false;\n@@ -113,2 +125,2 @@\n-\t\treturn \"TraceNode [name: \" + name + \", value: \" + value + \", packageName: \" + packageName + \", children: \"\n-\t\t\t\t+ children.size() + \"]\";\n+\t\treturn \"TraceNode [name: \" + name + \", value: \" + value + \", valid:\" + valid + \", packageName: \" + packageName\n+\t\t\t\t+ \", children: \" + children.size() + \"]\";\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceNode.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-\tpublic static TraceNode createTree(TraceNode root, StacktraceModel model) {\n+\tpublic static TraceNode createTree(final TraceNode root, final StacktraceModel model) {\n@@ -96,2 +96,10 @@\n-\t\tfor (Branch branch : rootFork.getBranches()) {\n-\t\t\taddBranch(root, branch);\n+\n+\t\tfinal Branch[] branches = rootFork.getBranches();\n+\t\tint i = 0;\n+\t\twhile (Thread.currentThread().isAlive() && root.isValid() && i < branches.length) {\n+\t\t\taddBranch(root, branches[i]);\n+\t\t\ti++;\n+\t\t}\n+\n+\t\tif (i < branches.length) {\n+\t\t\troot.setInvalid();\n@@ -99,0 +107,1 @@\n+\n@@ -153,2 +162,2 @@\n-\tprivate static void addBranch(TraceNode root, Branch branch) {\n-\t\tStacktraceFrame firstFrame = branch.getFirstFrame();\n+\tprivate static void addBranch(final TraceNode root, final Branch branch) {\n+\t\tfinal StacktraceFrame firstFrame = branch.getFirstFrame();\n@@ -157,1 +166,5 @@\n-\t\tfor (StacktraceFrame frame : branch.getTailFrames()) {\n+\n+\t\tfinal StacktraceFrame[] frames = branch.getTailFrames();\n+\t\tint i = 0;\n+\t\twhile (Thread.currentThread().isAlive() && root.isValid() && i < frames.length) {\n+\t\t\tfinal StacktraceFrame frame = frames[i];\n@@ -161,0 +174,4 @@\n+\t\t\ti++;\n+\t\t}\n+\t\tif (i < frames.length) {\n+\t\t\troot.setInvalid();\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceTreeUtils.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import java.util.concurrent.Callable;\n@@ -64,0 +65,1 @@\n+import java.util.concurrent.Future;\n@@ -106,0 +108,2 @@\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;\n@@ -107,0 +111,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -126,1 +131,2 @@\n-\t\t\/\/ from: https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.css\n+\t\t\/\/ from:\n+\t\t\/\/ https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.css\n@@ -136,1 +142,2 @@\n-\t\t\/\/ from: https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.min.js\n+\t\t\/\/ from:\n+\t\t\/\/ https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.min.js\n@@ -138,1 +145,1 @@\n-\t\t\/\/ jmc flameview coloring, tooltip and other  functions\n+\t\t\/\/ jmc flameview coloring, tooltip and other functions\n@@ -149,1 +156,2 @@\n-\t\t\/\/ formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts,\n+\t\t\/\/ formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9\n+\t\t\/\/ specific scripts,\n@@ -160,2 +168,0 @@\n-\tprivate TraceNode currentRoot;\n-\tprivate CompletableFuture<TraceNode> currentModelCalculator;\n@@ -165,0 +171,2 @@\n+\tprivate TraceNode currentTraceNode = TraceNode.EMPTY;\n+\tprivate Future<Void> modelCalculationFuture;\n@@ -205,1 +213,1 @@\n-\t\t\t\trebuildModel(currentItems);\n+\t\t\t\trebuildModel();\n@@ -275,0 +283,60 @@\n+\t\/**\n+\t * Container for created {@link TraceNode} and {@link StacktraceModel}\n+\t *\/\n+\tprivate final class ModelsContainer {\n+\t\tprivate final TraceNode root;\n+\t\tprivate final StacktraceModel model;\n+\t\tprivate final String json;\n+\n+\t\tprivate ModelsContainer(TraceNode root, StacktraceModel model, String json) {\n+\t\t\tthis.root = root;\n+\t\t\tthis.model = model;\n+\t\t\tthis.json = json;\n+\t\t}\n+\n+\t\tprivate TraceNode root() {\n+\t\t\treturn root;\n+\t\t}\n+\n+\t\tprivate String json() {\n+\t\t\treturn json;\n+\t\t}\n+\n+\t\tprivate boolean isReady(StacktraceModel m) {\n+\t\t\treturn Thread.currentThread().isAlive() && root != null && model != null && json != null && root.isValid()\n+\t\t\t\t\t&& model.equals(m);\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * JSonModelBuilder holds the calculated json string, can be canceled\n+\t *\/\n+\tprivate static class JSonModelBuilder {\n+\t\tprivate static final JSonModelBuilder EMPTY = new JSonModelBuilder(\"\\\"\\\"\");\n+\t\tprivate final StringBuilder builder = new StringBuilder();\n+\t\tprivate boolean valid = true;\n+\n+\t\tprivate JSonModelBuilder() {\n+\t\t}\n+\n+\t\tprivate JSonModelBuilder(String json) {\n+\t\t\tthis.builder.append(json);\n+\t\t}\n+\n+\t\tprivate void append(String s) {\n+\t\t\tthis.builder.append(s);\n+\t\t}\n+\n+\t\tprivate String build() {\n+\t\t\treturn builder.toString();\n+\t\t}\n+\n+\t\tprivate boolean isValid() {\n+\t\t\treturn valid;\n+\t\t}\n+\n+\t\tprivate void setInvalid() {\n+\t\t\tthis.valid = false;\n+\t\t}\n+\t}\n+\n@@ -334,1 +402,6 @@\n-\t\t\tsetItems(AdapterUtil.getAdapter(first, IItemCollection.class));\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\tsetItems(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\tsetItems(items);\n+\t\t\t}\n@@ -339,4 +412,2 @@\n-\t\tif (items != null) {\n-\t\t\tcurrentItems = items;\n-\t\t\trebuildModel(items);\n-\t\t}\n+\t\tcurrentItems = items;\n+\t\trebuildModel();\n@@ -345,4 +416,3 @@\n-\tprivate void rebuildModel(IItemCollection items) {\n-\t\t\/\/ Release old model before building the new\n-\t\tif (currentModelCalculator != null) {\n-\t\t\tcurrentModelCalculator.cancel(true);\n+\tprivate void rebuildModel() {\n+\t\tif (modelCalculationFuture != null) {\n+\t\t\tmodelCalculationFuture.cancel(true);\n@@ -350,3 +420,2 @@\n-\t\tcurrentModelCalculator = getModelPreparer(items, frameSeparator, true);\n-\t\tcurrentModelCalculator.thenAcceptAsync(this::setModel, DisplayToolkit.inDisplayThread())\n-\t\t\t\t.exceptionally(FlameGraphView::handleModelBuildException);\n+\n+\t\tmodelCalculationFuture = getModelPreparer(currentItems, true);\n@@ -355,7 +424,2 @@\n-\tprivate CompletableFuture<TraceNode> getModelPreparer(\n-\t\tfinal IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {\n-\t\treturn CompletableFuture.supplyAsync(() -> {\n-\t\t\tStacktraceModel model = new StacktraceModel(threadRootAtTop, frameSeparator, items);\n-\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(items, model.getRootFork().getBranchCount());\n-\t\t\treturn TraceTreeUtils.createTree(root, model);\n-\t\t}, MODEL_EXECUTOR);\n+\tprivate StacktraceModel createCurrentStacktraceModel() {\n+\t\treturn new StacktraceModel(threadRootAtTop, frameSeparator, currentItems);\n@@ -364,4 +428,35 @@\n-\tprivate void setModel(TraceNode root) {\n-\t\tif (!browser.isDisposed() && !root.equals(currentRoot)) {\n-\t\t\tcurrentRoot = root;\n-\t\t\tsetViewerInput(root);\n+\tprivate Future<Void> getModelPreparer(final IItemCollection items, final boolean materializeSelectedBranches) {\n+\n+\t\tfinal StacktraceModel model = createCurrentStacktraceModel();\n+\t\tfinal Callable<Void> modelPreparerTask = () -> {\n+\n+\t\t\tFork rootFork = model.getRootFork();\n+\t\t\tif (materializeSelectedBranches) {\n+\t\t\t\tBranch selectedBranch = StacktraceModel.getLastSelectedBranch(rootFork);\n+\t\t\t\tif (selectedBranch != null) {\n+\t\t\t\t\tselectedBranch.getEndFork();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(items, rootFork.getBranchCount());\n+\t\t\tif (Thread.currentThread().isAlive()) {\n+\t\t\t\tTraceNode traceNode = TraceTreeUtils.createTree(root, model);\n+\t\t\t\tJSonModelBuilder jsonModelBuilder = toJSonModel(root);\n+\n+\t\t\t\tif (Thread.currentThread().isAlive() && traceNode.isValid() && jsonModelBuilder.isValid()) {\n+\t\t\t\t\tModelsContainer modelContainer = new ModelsContainer(traceNode, model, jsonModelBuilder.build());\n+\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> this.setModel(modelContainer));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t};\n+\n+\t\treturn MODEL_EXECUTOR.submit(modelPreparerTask);\n+\n+\t}\n+\n+\tprivate void setModel(ModelsContainer container) {\n+\t\t\/\/ Check that the model is prepared for current stacktrace and ui update is required \n+\t\tif (!browser.isDisposed() && container.isReady(createCurrentStacktraceModel())\n+\t\t\t\t&& !container.root().equals(currentTraceNode)) {\n+\t\t\tcurrentTraceNode = container.root();\n+\t\t\tsetViewerInput(container.json());\n@@ -371,1 +466,1 @@\n-\tprivate void setViewerInput(TraceNode root) {\n+\tprivate void setViewerInput(String json) {\n@@ -384,2 +479,1 @@\n-\n-\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", toJSon(root), icicleViewActive));\n+\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", json, icicleViewActive));\n@@ -389,0 +483,1 @@\n+\n@@ -410,1 +505,2 @@\n-\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n+\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1\n+\t\t\t\/\/ (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n@@ -453,8 +549,1 @@\n-\tprivate static Void handleModelBuildException(Throwable ex) {\n-\t\tif (!(ex.getCause() instanceof CancellationException)) {\n-\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to build stacktrace view model\", ex); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate static String toJSon(TraceNode root) {\n+\tprivate JSonModelBuilder toJSonModel(TraceNode root) {\n@@ -462,1 +551,1 @@\n-\t\t\treturn \"\\\"\\\"\";\n+\t\t\treturn JSonModelBuilder.EMPTY;\n@@ -467,2 +556,2 @@\n-\tprivate static String render(TraceNode root) {\n-\t\tStringBuilder builder = new StringBuilder();\n+\tprivate JSonModelBuilder render(TraceNode root) {\n+\t\tJSonModelBuilder builder = new JSonModelBuilder();\n@@ -473,1 +562,1 @@\n-\t\treturn builder.toString();\n+\t\treturn builder;\n@@ -476,1 +565,1 @@\n-\tprivate static void render(StringBuilder builder, TraceNode node) {\n+\tprivate void render(JSonModelBuilder builder, TraceNode node) {\n@@ -484,2 +573,4 @@\n-\tprivate static void renderChildren(StringBuilder builder, TraceNode node) {\n-\t\tfor (int i = 0; i < node.getChildren().size(); i++) {\n+\tprivate void renderChildren(JSonModelBuilder builder, TraceNode node) {\n+\n+\t\tint i = 0;\n+\t\twhile (Thread.currentThread().isAlive() && i < node.getChildren().size()) {\n@@ -490,0 +581,4 @@\n+\t\t\ti++;\n+\t\t}\n+\t\tif (i < node.getChildren().size()) {\n+\t\t\tbuilder.setInvalid();\n@@ -532,1 +627,1 @@\n-\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n+\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/ $NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":145,"deletions":50,"binary":false,"changes":195,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.getLastSelectedBranch;\n+\n@@ -39,0 +41,2 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -91,1 +95,0 @@\n-\n@@ -177,0 +180,1 @@\n+\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);\n@@ -688,1 +692,1 @@\n-\t\t});\n+\t\t}, MODEL_EXECUTOR);\n@@ -871,12 +875,0 @@\n-\t\/\/ See JMC-6787\n-\t@SuppressWarnings(\"deprecation\")\n-\tprivate static Branch getLastSelectedBranch(Fork fromFork) {\n-\t\tBranch lastSelectedBranch = null;\n-\t\tBranch branch = fromFork.getSelectedBranch();\n-\t\twhile (branch != null) {\n-\t\t\tlastSelectedBranch = branch;\n-\t\t\tbranch = branch.getEndFork().getSelectedBranch();\n-\t\t}\n-\t\treturn lastSelectedBranch;\n-\t}\n-\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -167,0 +167,12 @@\n+\t\/\/ See JMC-6787\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic static Branch getLastSelectedBranch(Fork fromFork) {\n+\t\tBranch lastSelectedBranch = null;\n+\t\tBranch branch = fromFork.getSelectedBranch();\n+\t\twhile (branch != null) {\n+\t\t\tlastSelectedBranch = branch;\n+\t\t\tbranch = branch.getEndFork().getSelectedBranch();\n+\t\t}\n+\t\treturn lastSelectedBranch;\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/StacktraceModel.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}