{"files":[{"patch":"@@ -88,2 +88,0 @@\n-\t * @param active\n-\t *            is calculation still active\n@@ -96,2 +94,1 @@\n-\/\/\tpublic static TraceNode createTree(final AtomicBoolean active, TraceNode root, StacktraceModel model) {\n-\tpublic static TraceNode createTree(TraceNode root, StacktraceModel model) {\n+\tpublic static TraceNode createTree(final TraceNode root, final StacktraceModel model) {\n@@ -102,1 +99,1 @@\n-\t\twhile (!Thread.currentThread().isInterrupted() && i < branches.length) {\n+\t\twhile (Thread.currentThread().isAlive() && i < branches.length) {\n@@ -165,2 +162,2 @@\n-\tprivate static void addBranch(TraceNode root, Branch branch) {\n-\t\tStacktraceFrame firstFrame = branch.getFirstFrame();\n+\tprivate static void addBranch(final TraceNode root, final Branch branch) {\n+\t\tfinal StacktraceFrame firstFrame = branch.getFirstFrame();\n@@ -169,1 +166,5 @@\n-\t\tfor (StacktraceFrame frame : branch.getTailFrames()) {\n+\t\t\n+\t\tfinal StacktraceFrame[] frames = branch.getTailFrames();\n+\t\tint i = 0;\n+\t\twhile (Thread.currentThread().isAlive() && i < frames.length) {\n+\t\t\tfinal StacktraceFrame frame = frames[i];\n@@ -173,0 +174,4 @@\n+\t\t\ti++;\n+\t\t}\n+\t\tif(i < frames.length) {\n+\t\t\troot.setCanceled();\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceTreeUtils.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -172,3 +172,2 @@\n-\tprivate TraceNode currentTraceRoot;\n-\/\/\tprivate volatile AtomicBoolean modelCalculationActive = new AtomicBoolean();\n-\tprivate volatile Future<Void> modelCalculationFuture;\n+\tprivate TraceNode currentTraceRoot = TraceNode.EMPTY;\n+\tprivate Future<Void> modelCalculationFuture;\n@@ -456,1 +455,1 @@\n-\t\t\t\t\n+\n@@ -458,1 +457,0 @@\n-\t\t\t\t\t\n@@ -460,7 +458,2 @@\n-\t\t\t\t\tif(Thread.currentThread().isAlive()) {\n-\t\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> this.setModel(modelContainer));\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\twriteLog(\"callable, not alive, not display thread:\" + Thread.currentThread().getName());\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n+\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> this.setModel(modelContainer));\n+\n@@ -468,1 +461,1 @@\n-\t\t\t\t\twriteLog(\"callable, not alive, traceNode.isCanceled, jsonModelBuild.isCanceled, thread:\" + Thread.currentThread().getName());\n+\t\t\t\t\twriteLog(\"callable, not alive, traceNode.isCanceled, jsonModelBuild.isCanceled, thread canceled:\" + Thread.currentThread().getName());\n@@ -482,10 +475,5 @@\n-\t\t\/\/ Check that the models are prepared and up to date \n-\/\/\t\tif (container.isReady() && !browser.isDisposed() && container.isEqualStacktraceModel(createStacktraceModel())) {\n-\t\tif (currentTraceRoot == null) {\n-\t\t\twriteLog(\"setModel1: JSON: \" + Thread.currentThread().getName());\n-\/\/\t\t\tsetViewerInput(container.root());\n-\t\t\tsetViewerInput(container.json());\n-\t\t\tcurrentTraceRoot = container.root();\n-\t\t} else if (container.isReady() && !browser.isDisposed() && \n-\t\t\t\t!currentTraceRoot.equals(container.root()) && \n-\t\t\t\tcontainer.isEqualStacktraceModel(createStacktraceModel())) {\n+\t\t\/\/ Check that the model is prepared for current stacktrace and ui update is required \n+\t\tif (!browser.isDisposed() && container.isReady()\n+\t\t\t\t&& container.isEqualStacktraceModel(createStacktraceModel())\n+\t\t\t\t&& !currentTraceRoot.equals(container.root())  \n+\t\t\t\t) {\n@@ -493,1 +481,0 @@\n-\/\/\t\t\tsetViewerInput(container.root());\n@@ -496,1 +483,1 @@\n-\t\t} \n+\t\t}\n@@ -498,25 +485,0 @@\n-\n-\/\/\tprivate void setViewerInput(TraceNode root) {\n-\/\/\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(false));\n-\/\/\t\tbrowser.setText(HTML_PAGE);\n-\/\/\t\tbrowser.addListener(SWT.Resize, event -> {\n-\/\/\t\t\tbrowser.execute(\"resizeFlameGraph();\");\n-\/\/\t\t});\n-\/\/\n-\/\/\t\tbrowser.addProgressListener(new ProgressAdapter() {\n-\/\/\t\t\t@Override\n-\/\/\t\t\tpublic void completed(ProgressEvent event) {\n-\/\/\t\t\t\tbrowser.removeProgressListener(this);\n-\/\/\t\t\t\tJSonModelBuilder jsonModelBuilder = toJSonModel(root);\n-\/\/\t\t\t\tif (!jsonModelBuilder.isCanceled()) {\n-\/\/\t\t\t\t\tbrowser.execute(\n-\/\/\t\t\t\t\t\t\tString.format(\"configureTooltipText('%s', '%s', '%s', '%s', '%s');\", TABLE_COLUMN_COUNT,\n-\/\/\t\t\t\t\t\t\t\t\tTABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));\n-\/\/\t\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", jsonModelBuilder.build(), icicleViewActive));\n-\/\/\t\t\t\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(true));\n-\/\/\t\t\t\t}\n-\/\/\n-\/\/\t\t\t}\n-\/\/\t\t});\n-\/\/\n-\/\/\t}\n@@ -541,2 +503,0 @@\n-\n-\t\t\t\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":12,"deletions":52,"binary":false,"changes":64,"status":"modified"}]}