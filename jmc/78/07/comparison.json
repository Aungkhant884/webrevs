{"files":[{"patch":"@@ -40,0 +40,1 @@\n+\tpublic static final TraceNode EMPTY = new TraceNode(null, 0, null);\n@@ -44,0 +45,1 @@\n+\tprivate boolean canceled = false;\n@@ -71,0 +73,8 @@\n+\tpublic boolean isCanceled() {\n+\t\treturn canceled;\n+\t}\n+\n+\tpublic void setCanceled() {\n+\t\tthis.canceled = true;\n+\t}\n+\n@@ -78,0 +88,1 @@\n+\t\tresult = prime * result + (canceled ? 1231 : 1237);\n@@ -102,1 +113,1 @@\n-\t\t\tif (other.packageName != null) {\n+\t\t\tif (other.packageName != null)\n@@ -104,1 +115,0 @@\n-\t\t\t}\n@@ -107,0 +117,2 @@\n+\t\tif (canceled != other.canceled)\n+\t\t\treturn false;\n@@ -113,2 +125,2 @@\n-\t\treturn \"TraceNode [name: \" + name + \", value: \" + value + \", packageName: \" + packageName + \", children: \"\n-\t\t\t\t+ children.size() + \"]\";\n+\t\treturn \"TraceNode [name: \" + name + \", value: \" + value + \", canceled:\" + canceled + \", packageName: \"\n+\t\t\t\t+ packageName + \", children: \" + children.size() + \"]\";\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceNode.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+\t * @param active\n+\t *            is calculation still active\n@@ -94,0 +96,1 @@\n+\/\/\tpublic static TraceNode createTree(final AtomicBoolean active, TraceNode root, StacktraceModel model) {\n@@ -96,2 +99,10 @@\n-\t\tfor (Branch branch : rootFork.getBranches()) {\n-\t\t\taddBranch(root, branch);\n+\n+\t\tfinal Branch[] branches = rootFork.getBranches();\n+\t\tint i = 0;\n+\t\twhile (!Thread.currentThread().isInterrupted() && i < branches.length) {\n+\t\t\taddBranch(root, branches[i]);\n+\t\t\ti++;\n+\t\t}\n+\n+\t\tif (i < branches.length) {\n+\t\t\troot.setCanceled();\n@@ -99,0 +110,1 @@\n+\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/tree\/TraceTreeUtils.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.getLastSelectedBranch;\n@@ -59,0 +60,1 @@\n+import java.util.concurrent.Callable;\n@@ -64,0 +66,1 @@\n+import java.util.concurrent.Future;\n@@ -106,0 +109,2 @@\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;\n@@ -107,0 +112,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -126,1 +132,2 @@\n-\t\t\/\/ from: https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.css\n+\t\t\/\/ from:\n+\t\t\/\/ https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.css\n@@ -136,1 +143,2 @@\n-\t\t\/\/ from: https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.min.js\n+\t\t\/\/ from:\n+\t\t\/\/ https:\/\/cdn.jsdelivr.net\/gh\/spiermar\/d3-flame-graph@2.0.3\/dist\/d3-flamegraph.min.js\n@@ -138,1 +146,1 @@\n-\t\t\/\/ jmc flameview coloring, tooltip and other  functions\n+\t\t\/\/ jmc flameview coloring, tooltip and other functions\n@@ -149,1 +157,2 @@\n-\t\t\/\/ formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9 specific scripts,\n+\t\t\/\/ formatter arguments for the template: %1 - CSSs stylesheets, %2 - IE9\n+\t\t\/\/ specific scripts,\n@@ -160,2 +169,0 @@\n-\tprivate TraceNode currentRoot;\n-\tprivate CompletableFuture<TraceNode> currentModelCalculator;\n@@ -165,0 +172,3 @@\n+\tprivate TraceNode currentTraceRoot;\n+\/\/\tprivate volatile AtomicBoolean modelCalculationActive = new AtomicBoolean();\n+\tprivate volatile Future<Void> modelCalculationFuture;\n@@ -205,1 +215,1 @@\n-\t\t\t\trebuildModel(currentItems);\n+\t\t\t\trebuildModel();\n@@ -275,0 +285,65 @@\n+\t\/**\n+\t * Container for created {@link TraceNode} and {@link StacktraceModel}\n+\t *\/\n+\tprivate static final class ModelsContainer {\n+\t\tprivate static final ModelsContainer EMPTY = new ModelsContainer(null, null, null);\n+\t\tprivate final TraceNode root;\n+\t\tprivate final StacktraceModel model;\n+\t\tprivate final String json;\n+\n+\t\tprivate ModelsContainer(TraceNode root, StacktraceModel model, String json) {\n+\t\t\tthis.root = root;\n+\t\t\tthis.model = model;\n+\t\t\tthis.json = json;\n+\t\t}\n+\n+\t\tprivate TraceNode root() {\n+\t\t\treturn root;\n+\t\t}\n+\t\t\n+\t\tprivate String json() {\n+\t\t\treturn json;\n+\t\t}\n+\n+\t\tprivate boolean isEqualStacktraceModel(StacktraceModel m) {\n+\t\t\t\n+\t\t\treturn Thread.currentThread().isInterrupted() ? false : model.equals(m);\n+\t\t}\n+\n+\t\tprivate boolean isReady() {\n+\t\t\treturn root != null && !root.isCanceled() && model != null && json != null;\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * JSonModelBuilder holds the calculated json string, can be canceled\n+\t *\/\n+\tprivate static class JSonModelBuilder {\n+\t\tprivate static final JSonModelBuilder EMPTY = new JSonModelBuilder(\"\\\"\\\"\");\n+\t\tprivate final StringBuilder builder = new StringBuilder();\n+\t\tprivate boolean canceled = false;\n+\n+\t\tprivate JSonModelBuilder() {\n+\t\t}\n+\n+\t\tprivate JSonModelBuilder(String json) {\n+\t\t\tthis.builder.append(json);\n+\t\t}\n+\n+\t\tprivate void append(String s) {\n+\t\t\tthis.builder.append(s);\n+\t\t}\n+\n+\t\tprivate String build() {\n+\t\t\treturn builder.toString();\n+\t\t}\n+\n+\t\tprivate boolean isCanceled() {\n+\t\t\treturn canceled;\n+\t\t}\n+\n+\t\tprivate void setCanceled() {\n+\t\t\tthis.canceled = true;\n+\t\t}\n+\t}\n+\n@@ -334,1 +409,6 @@\n-\t\t\tsetItems(AdapterUtil.getAdapter(first, IItemCollection.class));\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\tsetItems(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\tsetItems(items);\n+\t\t\t}\n@@ -339,4 +419,3 @@\n-\t\tif (items != null) {\n-\t\t\tcurrentItems = items;\n-\t\t\trebuildModel(items);\n-\t\t}\n+\t\tcurrentItems = items;\n+\t\trebuildModel();\n+\n@@ -345,4 +424,8 @@\n-\tprivate void rebuildModel(IItemCollection items) {\n-\t\t\/\/ Release old model before building the new\n-\t\tif (currentModelCalculator != null) {\n-\t\t\tcurrentModelCalculator.cancel(true);\n+\tprivate void writeLog(String message) {\n+\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, message); \/\/$NON-NLS-1$\n+\t}\n+\t\n+\tprivate void rebuildModel() {\n+\t\tif(modelCalculationFuture != null) {\n+\t\t\tmodelCalculationFuture.cancel(true);\n+\t\t\twriteLog(\"rebuildModel, canceled, from thread: \" + Thread.currentThread().getName() + \", feature done: \" + modelCalculationFuture.isDone());\n@@ -350,3 +433,2 @@\n-\t\tcurrentModelCalculator = getModelPreparer(items, frameSeparator, true);\n-\t\tcurrentModelCalculator.thenAcceptAsync(this::setModel, DisplayToolkit.inDisplayThread())\n-\t\t\t\t.exceptionally(FlameGraphView::handleModelBuildException);\n+\n+\t\tmodelCalculationFuture = getModelPreparer(createStacktraceModel(), true);\n@@ -355,7 +437,2 @@\n-\tprivate CompletableFuture<TraceNode> getModelPreparer(\n-\t\tfinal IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {\n-\t\treturn CompletableFuture.supplyAsync(() -> {\n-\t\t\tStacktraceModel model = new StacktraceModel(threadRootAtTop, frameSeparator, items);\n-\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(items, model.getRootFork().getBranchCount());\n-\t\t\treturn TraceTreeUtils.createTree(root, model);\n-\t\t}, MODEL_EXECUTOR);\n+\tprivate StacktraceModel createStacktraceModel() {\n+\t\treturn new StacktraceModel(threadRootAtTop, frameSeparator, currentItems);\n@@ -364,5 +441,56 @@\n-\tprivate void setModel(TraceNode root) {\n-\t\tif (!browser.isDisposed() && !root.equals(currentRoot)) {\n-\t\t\tcurrentRoot = root;\n-\t\t\tsetViewerInput(root);\n-\t\t}\n+\tprivate Future<Void> getModelPreparer(final StacktraceModel model, final boolean materializeSelectedBranches){\n+\t\t\n+\t\tfinal Callable<Void> callable = () -> {\n+\t\t\t\n+\t\t\tFork rootFork = model.getRootFork();\n+\t\t\tif (materializeSelectedBranches) {\n+\t\t\t\tBranch selectedBranch = getLastSelectedBranch(rootFork);\n+\t\t\t\tif (selectedBranch != null) {\n+\t\t\t\t\tselectedBranch.getEndFork();\n+\t\t\t\t}\n+\t\t\t} \n+\t\t\tTraceNode root = TraceTreeUtils.createRootWithDescription(currentItems, rootFork.getBranchCount());\n+\t\t\tif(Thread.currentThread().isAlive()) {\n+\t\t\t\tTraceNode traceNode = TraceTreeUtils.createTree(root, model);\n+\t\t\t\tJSonModelBuilder jsonModelBuilder = toJSonModel(root);\n+\t\t\t\t\n+\t\t\t\tif(Thread.currentThread().isAlive() && !traceNode.isCanceled() && !jsonModelBuilder.isCanceled()) {\n+\t\t\t\t\t\n+\t\t\t\t\tModelsContainer modelContainer = new ModelsContainer(traceNode, model, jsonModelBuilder.build());\n+\t\t\t\t\tif(Thread.currentThread().isAlive()) {\n+\t\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> this.setModel(modelContainer));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\twriteLog(\"callable, not alive, not display thread:\" + Thread.currentThread().getName());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t} else {\n+\t\t\t\t\twriteLog(\"callable, not alive, traceNode.isCanceled, jsonModelBuild.isCanceled, thread:\" + Thread.currentThread().getName());\n+\t\t\t\t}\n+\t\t\t}else {\n+\t\t\t\twriteLog(\"getModelPreparer Thread, canceled: \" + Thread.currentThread().getName());\n+\t\t\t}\n+\t\t\t\n+\t\t\treturn null;\n+\t\t};\n+\t\t\n+\t\treturn  MODEL_EXECUTOR.submit(callable);\n+\t\t\n+\t}\n+\n+\tprivate void setModel(ModelsContainer container) {\n+\t\t\/\/ Check that the models are prepared and up to date \n+\/\/\t\tif (container.isReady() && !browser.isDisposed() && container.isEqualStacktraceModel(createStacktraceModel())) {\n+\t\tif (currentTraceRoot == null) {\n+\t\t\twriteLog(\"setModel1: JSON: \" + Thread.currentThread().getName());\n+\/\/\t\t\tsetViewerInput(container.root());\n+\t\t\tsetViewerInput(container.json());\n+\t\t\tcurrentTraceRoot = container.root();\n+\t\t} else if (container.isReady() && !browser.isDisposed() && \n+\t\t\t\t!currentTraceRoot.equals(container.root()) && \n+\t\t\t\tcontainer.isEqualStacktraceModel(createStacktraceModel())) {\n+\t\t\twriteLog(\"setModel2: JSON: \" + Thread.currentThread().getName());\n+\/\/\t\t\tsetViewerInput(container.root());\n+\t\t\tcurrentTraceRoot = container.root();\n+\t\t\tsetViewerInput(container.json());\n+\t\t} \n@@ -371,1 +499,26 @@\n-\tprivate void setViewerInput(TraceNode root) {\n+\/\/\tprivate void setViewerInput(TraceNode root) {\n+\/\/\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(false));\n+\/\/\t\tbrowser.setText(HTML_PAGE);\n+\/\/\t\tbrowser.addListener(SWT.Resize, event -> {\n+\/\/\t\t\tbrowser.execute(\"resizeFlameGraph();\");\n+\/\/\t\t});\n+\/\/\n+\/\/\t\tbrowser.addProgressListener(new ProgressAdapter() {\n+\/\/\t\t\t@Override\n+\/\/\t\t\tpublic void completed(ProgressEvent event) {\n+\/\/\t\t\t\tbrowser.removeProgressListener(this);\n+\/\/\t\t\t\tJSonModelBuilder jsonModelBuilder = toJSonModel(root);\n+\/\/\t\t\t\tif (!jsonModelBuilder.isCanceled()) {\n+\/\/\t\t\t\t\tbrowser.execute(\n+\/\/\t\t\t\t\t\t\tString.format(\"configureTooltipText('%s', '%s', '%s', '%s', '%s');\", TABLE_COLUMN_COUNT,\n+\/\/\t\t\t\t\t\t\t\t\tTABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));\n+\/\/\t\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", jsonModelBuilder.build(), icicleViewActive));\n+\/\/\t\t\t\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(true));\n+\/\/\t\t\t\t}\n+\/\/\n+\/\/\t\t\t}\n+\/\/\t\t});\n+\/\/\n+\/\/\t}\n+\t\n+\tprivate void setViewerInput(String json) {\n@@ -382,2 +535,6 @@\n-\t\t\t\tbrowser.execute(String.format(\"configureTooltipText('%s', '%s', '%s', '%s', '%s');\", TABLE_COLUMN_COUNT,\n-\t\t\t\t\t\tTABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));\n+\t\t\t\t\tbrowser.execute(\n+\t\t\t\t\t\t\tString.format(\"configureTooltipText('%s', '%s', '%s', '%s', '%s');\", TABLE_COLUMN_COUNT,\n+\t\t\t\t\t\t\t\t\tTABLE_COLUMN_EVENT_TYPE, TOOLTIP_PACKAGE, TOOLTIP_SAMPLES, TOOLTIP_DESCRIPTION));\n+\t\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", json, icicleViewActive));\n+\t\t\t\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(true));\n+\t\t\t\t}\n@@ -385,3 +542,1 @@\n-\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", toJSon(root), icicleViewActive));\n-\t\t\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(true));\n-\t\t\t}\n+\t\t\t\n@@ -389,0 +544,1 @@\n+\n@@ -410,1 +566,2 @@\n-\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n+\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1\n+\t\t\t\/\/ (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n@@ -460,1 +617,1 @@\n-\tprivate static String toJSon(TraceNode root) {\n+\tprivate JSonModelBuilder toJSonModel(TraceNode root) {\n@@ -462,1 +619,1 @@\n-\t\t\treturn \"\\\"\\\"\";\n+\t\t\treturn JSonModelBuilder.EMPTY;\n@@ -467,2 +624,2 @@\n-\tprivate static String render(TraceNode root) {\n-\t\tStringBuilder builder = new StringBuilder();\n+\tprivate JSonModelBuilder render(TraceNode root) {\n+\t\tJSonModelBuilder builder = new JSonModelBuilder();\n@@ -471,0 +628,2 @@\n+\/\/\t\tAtomicBoolean renderActive = new AtomicBoolean(true);\n+\/\/\t\trenderChildren(renderActive, builder, root);\n@@ -473,1 +632,1 @@\n-\t\treturn builder.toString();\n+\t\treturn builder;\n@@ -476,1 +635,9 @@\n-\tprivate static void render(StringBuilder builder, TraceNode node) {\n+\/\/\tprivate void render(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {\n+\/\/\t\tString start = UNCLASSIFIABLE_FRAME.equals(node.getName()) ? createJsonDescTraceNode(node)\n+\/\/\t\t\t\t: createJsonTraceNode(node);\n+\/\/\t\tbuilder.append(start);\n+\/\/\t\trenderChildren(renderActive, builder, node);\n+\/\/\t\tbuilder.append(\"]}\");\n+\/\/\t}\n+\t\n+\tprivate void render(JSonModelBuilder builder, TraceNode node) {\n@@ -483,3 +650,38 @@\n-\n-\tprivate static void renderChildren(StringBuilder builder, TraceNode node) {\n-\t\tfor (int i = 0; i < node.getChildren().size(); i++) {\n+\t\n+\/\/\tprivate void renderChildren(AtomicBoolean renderActive, JSonModelBuilder builder, TraceNode node) {\n+\/\/\n+\/\/\t\tint i = 0;\n+\/\/\t\twhile (renderActive.get() && i < node.getChildren().size()) {\n+\/\/\t\t\tif (!modelCalculationActive.get()) {\n+\/\/\t\t\t\trenderActive.set(false);\n+\/\/\t\t\t\tbuilder.setCanceled();\n+\/\/\t\t\t}\n+\/\/\n+\/\/\t\t\trender(renderActive, builder, node.getChildren().get(i));\n+\/\/\t\t\tif (i < node.getChildren().size() - 1) {\n+\/\/\t\t\t\tbuilder.append(\",\");\n+\/\/\t\t\t}\n+\/\/\t\t\ti++;\n+\/\/\t\t}\n+\/\/\t}\n+\n+\/\/\tprivate void renderChildren(JSonModelBuilder builder, TraceNode node) {\n+\/\/\n+\/\/\t\tint i = 0;\n+\/\/\t\twhile (!Thread.currentThread().isInterrupted() && i < node.getChildren().size()) {\n+\/\/\t\t\tif (Thread.currentThread().isInterrupted()) {\n+\/\/\t\t\t\tbuilder.setCanceled();\n+\/\/\t\t\t}\n+\/\/\n+\/\/\t\t\trender(renderActive, builder, node.getChildren().get(i));\n+\/\/\t\t\tif (i < node.getChildren().size() - 1) {\n+\/\/\t\t\t\tbuilder.append(\",\");\n+\/\/\t\t\t}\n+\/\/\t\t\ti++;\n+\/\/\t\t}\n+\/\/\t}\n+\t\n+\tprivate void renderChildren(JSonModelBuilder builder, TraceNode node) {\n+\n+\t\tint i = 0;\n+\t\twhile (!Thread.currentThread().isInterrupted() && i < node.getChildren().size()) {\n@@ -490,0 +692,4 @@\n+\t\t\ti++;\n+\t\t}\n+\t\tif (i < node.getChildren().size()) {\n+\t\t\tbuilder.setCanceled();\n@@ -532,1 +738,1 @@\n-\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n+\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/ $NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":254,"deletions":48,"binary":false,"changes":302,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import static org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.getLastSelectedBranch;\n+\n@@ -39,0 +41,2 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -91,1 +95,0 @@\n-\n@@ -177,0 +180,1 @@\n+\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(1);\n@@ -688,1 +692,1 @@\n-\t\t});\n+\t\t}, MODEL_EXECUTOR);\n@@ -871,12 +875,0 @@\n-\t\/\/ See JMC-6787\n-\t@SuppressWarnings(\"deprecation\")\n-\tprivate static Branch getLastSelectedBranch(Fork fromFork) {\n-\t\tBranch lastSelectedBranch = null;\n-\t\tBranch branch = fromFork.getSelectedBranch();\n-\t\twhile (branch != null) {\n-\t\t\tlastSelectedBranch = branch;\n-\t\t\tbranch = branch.getEndFork().getSelectedBranch();\n-\t\t}\n-\t\treturn lastSelectedBranch;\n-\t}\n-\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -167,0 +167,12 @@\n+\t\/\/ See JMC-6787\n+\t@SuppressWarnings(\"deprecation\")\n+\tpublic static Branch getLastSelectedBranch(Fork fromFork) {\n+\t\tBranch lastSelectedBranch = null;\n+\t\tBranch branch = fromFork.getSelectedBranch();\n+\t\twhile (branch != null) {\n+\t\t\tlastSelectedBranch = branch;\n+\t\t\tbranch = branch.getEndFork().getSelectedBranch();\n+\t\t}\n+\t\treturn lastSelectedBranch;\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/StacktraceModel.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}