{"files":[{"patch":"@@ -59,0 +59,1 @@\n+import java.util.concurrent.Callable;\n@@ -64,0 +65,1 @@\n+import java.util.concurrent.Future;\n@@ -107,0 +109,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -160,5 +163,0 @@\n-\tprivate TraceNode currentRoot;\n-\tprivate CompletableFuture<TraceNode> currentModelCalculator;\n-\tprivate boolean threadRootAtTop = true;\n-\tprivate boolean icicleViewActive = true;\n-\tprivate IItemCollection currentItems;\n@@ -168,0 +166,5 @@\n+\tprivate Future<Void> modelCalculationFuture;\n+\tprivate boolean threadRootAtTop = true;\n+\tprivate boolean icicleViewActive = true;\n+\tprivate IItemCollection currentItems;\n+\tprivate volatile ModelState modelState;\n@@ -189,0 +192,4 @@\n+\tprivate enum ModelState {\n+\t\tINIT, CALCULATION, READY, NONE\n+\t}\n+\n@@ -205,1 +212,1 @@\n-\t\t\t\trebuildModel(currentItems);\n+\t\t\t\ttriggerRebuildTask(currentItems);\n@@ -334,1 +341,6 @@\n-\t\t\tsetItems(AdapterUtil.getAdapter(first, IItemCollection.class));\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\ttriggerRebuildTask(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\ttriggerRebuildTask(items);\n+\t\t\t}\n@@ -338,4 +350,7 @@\n-\tprivate void setItems(IItemCollection items) {\n-\t\tif (items != null) {\n-\t\t\tcurrentItems = items;\n-\t\t\trebuildModel(items);\n+\tprivate void triggerRebuildTask(IItemCollection items) {\n+\t\t\/\/ Release old model calculation before building a new\n+\t\tif (modelCalculationFuture != null) {\n+\t\t\tmodelCalculationFuture.cancel(true);\n+\t\t\tif (modelCalculationFuture.isDone()) {\n+\t\t\t\tfinishModelCalculationFuture(modelCalculationFuture);\n+\t\t\t}\n@@ -343,0 +358,5 @@\n+\n+\t\tCallable<Void> modelPreparerTask = getModelPreparerTask(items);\n+\t\tmodelCalculationFuture = MODEL_EXECUTOR.submit(modelPreparerTask);\n+\t\tthis.currentItems = items;\n+\t\tthis.modelState = ModelState.INIT;\n@@ -345,4 +365,7 @@\n-\tprivate void rebuildModel(IItemCollection items) {\n-\t\t\/\/ Release old model before building the new\n-\t\tif (currentModelCalculator != null) {\n-\t\t\tcurrentModelCalculator.cancel(true);\n+\tprivate void finishModelCalculationFuture(Future<Void> f) {\n+\t\ttry {\n+\t\t\tf.get();\n+\t\t} catch (CancellationException t) {\n+\t\t\t\/\/noop\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Flameview build has failed\", e); \/\/$NON-NLS-1$\n@@ -350,3 +373,0 @@\n-\t\tcurrentModelCalculator = getModelPreparer(items, frameSeparator, true);\n-\t\tcurrentModelCalculator.thenAcceptAsync(this::setModel, DisplayToolkit.inDisplayThread())\n-\t\t\t\t.exceptionally(FlameGraphView::handleModelBuildException);\n@@ -355,3 +375,3 @@\n-\tprivate CompletableFuture<TraceNode> getModelPreparer(\n-\t\tfinal IItemCollection items, final FrameSeparator separator, final boolean materializeSelectedBranches) {\n-\t\treturn CompletableFuture.supplyAsync(() -> {\n+\tprivate Callable<Void> getModelPreparerTask(final IItemCollection items) {\n+\t\treturn () -> {\n+\t\t\tthis.modelState = ModelState.CALCULATION;\n@@ -359,0 +379,1 @@\n+\n@@ -360,2 +381,8 @@\n-\t\t\treturn TraceTreeUtils.createTree(root, model);\n-\t\t}, MODEL_EXECUTOR);\n+\t\t\tTraceNode traceNode = TraceTreeUtils.createTree(root, model);\n+\t\t\tString jsonModel = toJSonModel(traceNode).toString();\n+\n+\t\t\tthis.modelState = ModelState.READY;\n+\t\t\tDisplayToolkit.inDisplayThread().execute(() -> this.setModel(items, jsonModel));\n+\n+\t\t\treturn null;\n+\t\t};\n@@ -364,4 +391,3 @@\n-\tprivate void setModel(TraceNode root) {\n-\t\tif (!browser.isDisposed() && !root.equals(currentRoot)) {\n-\t\t\tcurrentRoot = root;\n-\t\t\tsetViewerInput(root);\n+\tprivate void setModel(final IItemCollection items, final String json) {\n+\t\tif (ModelState.READY.equals(modelState) && items.equals(currentItems) && !browser.isDisposed()) {\n+\t\t\tsetViewerInput(json);\n@@ -371,1 +397,1 @@\n-\tprivate void setViewerInput(TraceNode root) {\n+\tprivate void setViewerInput(String json) {\n@@ -379,0 +405,9 @@\n+\t\t\tprivate boolean loaded = false;\n+\n+\t\t\t@Override\n+\t\t\tpublic void changed(ProgressEvent event) {\n+\t\t\t\tif (loaded) {\n+\t\t\t\t\tbrowser.removeProgressListener(this);\n+\t\t\t\t}\n+\t\t\t}\n+\n@@ -381,1 +416,0 @@\n-\t\t\t\tbrowser.removeProgressListener(this);\n@@ -384,2 +418,1 @@\n-\n-\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", toJSon(root), icicleViewActive));\n+\t\t\t\tbrowser.execute(String.format(\"processGraph(%s, %s);\", json, icicleViewActive));\n@@ -387,0 +420,1 @@\n+\t\t\t\tloaded = true;\n@@ -447,1 +481,1 @@\n-\t\t\t\/\/ noop\n+\t\t\t\/\/ noop : model calculation is canceled when is still running\n@@ -453,15 +487,1 @@\n-\tprivate static Void handleModelBuildException(Throwable ex) {\n-\t\tif (!(ex.getCause() instanceof CancellationException)) {\n-\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to build stacktrace view model\", ex); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate static String toJSon(TraceNode root) {\n-\t\tif (root == null) {\n-\t\t\treturn \"\\\"\\\"\";\n-\t\t}\n-\t\treturn render(root);\n-\t}\n-\n-\tprivate static String render(TraceNode root) {\n+\tprivate StringBuilder toJSonModel(TraceNode root) {\n@@ -473,1 +493,1 @@\n-\t\treturn builder.toString();\n+\t\treturn builder;\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":68,"deletions":48,"binary":false,"changes":116,"status":"modified"}]}