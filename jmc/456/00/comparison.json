{"files":[{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.rules.jdk.general;\n+\n+import static org.openjdk.jmc.common.unit.UnitLookup.NUMBER;\n+import static org.openjdk.jmc.common.unit.UnitLookup.NUMBER_UNITY;\n+import static org.openjdk.jmc.common.unit.UnitLookup.PLAIN_TEXT;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.openjdk.jmc.common.IMCType;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemFilter;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.common.util.TypedPreference;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.rules.IResult;\n+import org.openjdk.jmc.flightrecorder.rules.IResultValueProvider;\n+import org.openjdk.jmc.flightrecorder.rules.IRule;\n+import org.openjdk.jmc.flightrecorder.rules.ResultBuilder;\n+import org.openjdk.jmc.flightrecorder.rules.Severity;\n+import org.openjdk.jmc.flightrecorder.rules.TypedCollectionResult;\n+import org.openjdk.jmc.flightrecorder.rules.TypedResult;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;\n+import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;\n+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;\n+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.RequiredEventsBuilder;\n+\n+public class FinalizersRunRule implements IRule {\n+\n+\tprivate static final String FINALIZERS_RUN_RESULT_ID = \"FinalizersRun\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final TypedResult<IQuantity> FINALIZERS_RUN_COUNT = new TypedResult<>(\"finalizersRunCount\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT),\n+\t\t\tMessages.getString(Messages.FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT_DESC), NUMBER, IQuantity.class);\n+\tprivate static final TypedCollectionResult<String> FINALIZERS_RUN_CLASSES = new TypedCollectionResult<>(\n+\t\t\t\"finalizersRunClasses\", Messages.getString(Messages.FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES), \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES_DESC), PLAIN_TEXT,\n+\t\t\tString.class);\n+\tprivate static final Collection<TypedResult<?>> RESULT_ATTRIBUTES = Arrays\n+\t\t\t.<TypedResult<?>> asList(FINALIZERS_RUN_COUNT, FINALIZERS_RUN_CLASSES);\n+\n+\tprivate static final Map<String, EventAvailability> REQUIRED_EVENTS = RequiredEventsBuilder.create()\n+\t\t\t.addEventType(JdkTypeIDs.FINALIZER_STATISTICS, EventAvailability.AVAILABLE).build();\n+\n+\tprivate static final TypedPreference<String> FINALIZABLE_CLASSES_INCLUDE_REGEXP = new TypedPreference<>(\n+\t\t\t\"finalizable.classes.include.regexp\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP),\n+\t\t\tMessages.getString(Messages.FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP_DESC),\n+\t\t\tPLAIN_TEXT.getPersister(),\n+\t\t\t\/\/ Exclude a number of common standard library prefixes.\n+\t\t\t\"^(?!java\\\\.|javax\\\\.|sun\\\\.|com\\\\.sun\\\\.|jdk\\\\.|scala\\\\.|kotlin\\\\.|kotlinx\\\\.|groovy\\\\.|closure\\\\.).*$\"); \/\/$NON-NLS-1$\n+\tprivate static final List<TypedPreference<?>> CONFIG_ATTRIBUTES = Arrays\n+\t\t\t.<TypedPreference<?>> asList(FINALIZABLE_CLASSES_INCLUDE_REGEXP);\n+\n+\t@Override\n+\tpublic RunnableFuture<IResult> createEvaluation(\n+\t\tIItemCollection items, IPreferenceValueProvider valueProvider, IResultValueProvider resultProvider) {\n+\t\treturn new FutureTask<>(() -> getResult(items, valueProvider));\n+\t}\n+\n+\t@Override\n+\tpublic Collection<TypedPreference<?>> getConfigurationAttributes() {\n+\t\treturn CONFIG_ATTRIBUTES;\n+\t}\n+\n+\t@Override\n+\tpublic Collection<TypedResult<?>> getResults() {\n+\t\treturn RESULT_ATTRIBUTES;\n+\t}\n+\n+\t@Override\n+\tpublic String getId() {\n+\t\treturn FINALIZERS_RUN_RESULT_ID;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn Messages.getString(Messages.FinalizersRunRule_RULE_NAME);\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, EventAvailability> getRequiredEvents() {\n+\t\treturn REQUIRED_EVENTS;\n+\t}\n+\n+\t@Override\n+\tpublic String getTopic() {\n+\t\treturn JfrRuleTopics.JAVA_APPLICATION;\n+\t}\n+\n+\tprivate IResult getResult(IItemCollection items, IPreferenceValueProvider valueProvider) {\n+\t\tString classesIncludeRegex = valueProvider.getPreferenceValue(FINALIZABLE_CLASSES_INCLUDE_REGEXP);\n+\t\tIItemFilter finalizerStatisticsEventsFilter = ItemFilters.and(ItemFilters.type(JdkTypeIDs.FINALIZER_STATISTICS),\n+\t\t\t\tItemFilters.matches(JdkAttributes.FINALIZABLE_CLASS_NAME, classesIncludeRegex));\n+\t\tIItemCollection finalizerStatisticsEvents = items.apply(finalizerStatisticsEventsFilter);\n+\n+\t\tlong totalCount = 0;\n+\t\tSet<String> finalizableClasses = new HashSet<String>();\n+\t\tfor (IItemIterable eventIterable : finalizerStatisticsEvents) {\n+\t\t\tIMemberAccessor<IMCType, IItem> finalizableClassAccessor = JdkAttributes.FINALIZABLE_CLASS\n+\t\t\t\t\t.getAccessor(eventIterable.getType());\n+\t\t\tIMemberAccessor<IQuantity, IItem> totalFinalizersRunAccessor = JdkAttributes.TOTAL_FINALIZERS_RUN\n+\t\t\t\t\t.getAccessor(eventIterable.getType());\n+\t\t\tfor (IItem event : eventIterable) {\n+\t\t\t\tIMCType finalizableClass = finalizableClassAccessor.getMember(event);\n+\t\t\t\tIQuantity totalFinalizersRun = totalFinalizersRunAccessor.getMember(event);\n+\t\t\t\tif (finalizableClass != null && totalFinalizersRun != null) {\n+\t\t\t\t\tlong countforEvent = totalFinalizersRun.clampedLongValueIn(NUMBER_UNITY);\n+\t\t\t\t\tif (countforEvent > 0) {\n+\t\t\t\t\t\ttotalCount += countforEvent;\n+\t\t\t\t\t\tfinalizableClasses.add(finalizableClass.getFullName());\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (totalCount <= 0) {\n+\t\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.OK)\n+\t\t\t\t\t.setSummary(Messages.getString(Messages.FinalizersRunRule_SUMMARY_OK)).build();\n+\t\t}\n+\n+\t\treturn ResultBuilder.createFor(this, valueProvider).setSeverity(Severity.INFO)\n+\t\t\t\t.setSummary(Messages.getString(Messages.FinalizersRunRule_SUMMARY_WARN))\n+\t\t\t\t.setExplanation(Messages.getString(Messages.FinalizersRunRule_EXPLANATION))\n+\t\t\t\t.setSolution(Messages.getString(Messages.FinalizersRunRule_SOLUTION))\n+\t\t\t\t.addResult(FINALIZERS_RUN_COUNT, NUMBER_UNITY.quantity(totalCount))\n+\t\t\t\t.addResult(FINALIZERS_RUN_CLASSES, finalizableClasses).build();\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/FinalizersRunRule.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,0 +270,11 @@\n+\tpublic static final String FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP = \"FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP_DESC = \"FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_EXPLANATION = \"FinalizersRunRule_EXPLANATION\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES = \"FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES_DESC = \"FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT = \"FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT_DESC = \"FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_RULE_NAME = \"FinalizersRunRule_RULE_NAME\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_SOLUTION = \"FinalizersRunRule_SOLUTION\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_SUMMARY_OK = \"FinalizersRunRule_SUMMARY_OK\"; \/\/$NON-NLS-1$\n+\tpublic static final String FinalizersRunRule_SUMMARY_WARN = \"FinalizersRunRule_SUMMARY_WARN\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+org.openjdk.jmc.flightrecorder.rules.jdk.general.FinalizersRunRule\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/META-INF\/services\/org.openjdk.jmc.flightrecorder.rules.IRule","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -281,0 +281,13 @@\n+FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP=Finalizable Classes Included\n+FinalizersRunRule_CONFIG_FINALIZABLE_CLASSES_INCLUDE_REGEXP_DESC=The regular expression used to filter finalizable classes.\n+# {finalizersRunClasses} is a list of strings\n+FinalizersRunRule_EXPLANATION=Finalization can lead to performance issues, deadlocks, or hangs, and has been marked for removal in a future Java version. The following finalizable classes have been detected: {finalizersRunClasses}\n+FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES=Finalizer Classes\n+FinalizersRunRule_RESULT_FINALIZERS_RUN_CLASSES_DESC=The classes for which finalizers were run.\n+FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT=Finalizer Count\n+FinalizersRunRule_RESULT_FINALIZERS_RUN_COUNT_DESC=The number of finalizers that were run.\n+FinalizersRunRule_RULE_NAME=Finalizers Run\n+FinalizersRunRule_SOLUTION=Remove finalize method implementations from your application, and consider making use of the [Cleaner API](https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/lang\/ref\/Cleaner.html) instead.\n+FinalizersRunRule_SUMMARY_OK=No finalizer executions were detected.\n+# {finalizersRunCount} is a number\n+FinalizersRunRule_SUMMARY_WARN={finalizersRunCount} finalizers were run.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1292,0 +1292,22 @@\n+\n+\tpublic static final IAttribute<IQuantity> TOTAL_FINALIZERS_RUN = attr(\"totalFinalizersRun\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_TOTAL_FINALIZERS_RUN),\n+\t\t\tMessages.getString(Messages.ATTR_TOTAL_FINALIZERS_RUN_DESC), NUMBER);\n+\tpublic static final IAttribute<IMCType> FINALIZABLE_CLASS = attr(\"finalizableClass\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_FINALIZABLE_CLASS),\n+\t\t\tMessages.getString(Messages.ATTR_FINALIZABLE_CLASS_DESC), CLASS);\n+\tpublic static final IAttribute<String> FINALIZABLE_CLASS_NAME = Attribute.canonicalize(\n+\t\t\tnew Attribute<String>(\"finalizableClassName\", Messages.getString(Messages.ATTR_FINALIZABLE_CLASS_NAME), \/\/$NON-NLS-1$\n+\t\t\t\t\tMessages.getString(Messages.ATTR_FINALIZABLE_CLASS_NAME_DESC), PLAIN_TEXT) {\n+\t\t\t\t@Override\n+\t\t\t\tpublic <U> IMemberAccessor<String, U> customAccessor(IType<U> type) {\n+\t\t\t\t\tfinal IMemberAccessor<IMCType, U> accessor = FINALIZABLE_CLASS.getAccessor(type);\n+\t\t\t\t\treturn accessor == null ? null : new IMemberAccessor<String, U>() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic String getMember(U i) {\n+\t\t\t\t\t\t\tIMCType type = accessor.getMember(i);\n+\t\t\t\t\t\t\treturn type == null ? null : type.getFullName();\n+\t\t\t\t\t\t}\n+\t\t\t\t\t};\n+\t\t\t\t}\n+\t\t\t});\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -208,0 +208,3 @@\n+\n+\tpublic static final String FINALIZER_STATISTICS = PREFIX + \"FinalizerStatistics\";\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkTypeIDs.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -284,0 +284,6 @@\n+\tpublic static final String ATTR_FINALIZABLE_CLASS = \"ATTR_FINALIZABLE_CLASS\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_FINALIZABLE_CLASS_DESC = \"ATTR_FINALIZABLE_CLASS_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_FINALIZABLE_CLASS_NAME = \"ATTR_FINALIZABLE_CLASS_NAME\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_FINALIZABLE_CLASS_NAME_DESC = \"ATTR_FINALIZABLE_CLASS_NAME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_TOTAL_FINALIZERS_RUN = \"ATTR_TOTAL_FINALIZERS_RUN\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_TOTAL_FINALIZERS_RUN_DESC = \"ATTR_TOTAL_FINALIZERS_RUN_DESC\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,6 @@\n+ATTR_FINALIZABLE_CLASS=Class\n+ATTR_FINALIZABLE_CLASS_DESC=The finalizable class\n+ATTR_FINALIZABLE_CLASS_NAME=Class Name\n+ATTR_FINALIZABLE_CLASS_NAME=The finalizable class name\n+ATTR_TOTAL_FINALIZERS_RUN=Finalizers Run\n+ATTR_TOTAL_FINALIZERS_RUN_DESC=The number of finalizers that were run\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/messages\/internal\/messages.properties","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -112,0 +112,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -410,0 +414,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -674,0 +682,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -940,0 +952,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -1192,0 +1208,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -1449,0 +1469,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -1706,0 +1730,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -1987,0 +2015,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -2276,0 +2308,4 @@\n+        <\/rule>\n+         <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n@@ -2556,0 +2592,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -2864,0 +2904,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -3174,0 +3218,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -3419,0 +3467,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -3659,0 +3711,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -3920,0 +3976,4 @@\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n@@ -4101,0 +4161,241 @@\n+    <report>\n+        <file>jdk18-finalizers.jfr<\/file>\n+        <rule>\n+            <id>FinalizersRun<\/id>\n+            <severity>Information<\/severity>\n+            <summary>26.5 ×10⁶ finalizers were run.<\/summary>\n+            <explanation>Finalization can lead to performance issues, deadlocks, or hangs, and has been marked for removal in a future Java version. The following finalizable classes have been detected: &lt;ul&gt;&lt;li&gt;my_package.Main$MyFinalizableObject&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n+            <solution>Remove finalize method implementations from your application, and consider making use of the [Cleaner API](https:\/\/docs.oracle.com\/en\/java\/javase\/17\/docs\/api\/java.base\/java\/lang\/ref\/Cleaner.html) instead.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>No events with stack traces were recorded.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>JfrPeriodicEventsFix<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+    <\/report>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml","additions":301,"deletions":0,"binary":false,"changes":301,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+jdk18-finalizers.jfr\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/jfr\/index.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/jfr\/jdk18-finalizers.jfr","binary":true,"status":"added"}]}