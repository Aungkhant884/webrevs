{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.ArrayList;\n@@ -54,0 +55,1 @@\n+import org.openjdk.jmc.common.version.JavaVersionSupport;\n@@ -69,0 +71,1 @@\n+import org.openjdk.jmc.rjmx.ConnectionToolkit;\n@@ -90,1 +93,1 @@\n-\t\t\t\tpropertyRoots, \"root\");\n+\t\t\t\tremoveUnsupportedRootNodes(propertyRoots), \"root\");\n@@ -105,1 +108,1 @@\n-\t\t\t\t\t\"org\", \"IN_CONFIGURATION\"), propertyRoots, \"root\");\n+\t\t\t\t\t\"org\", \"IN_CONFIGURATION\"), removeUnsupportedRootNodes(propertyRoots), \"root\");\n@@ -116,1 +119,1 @@\n-\t\t\t\tpropertyRoots, \"root\");\n+\t\t\t\tremoveUnsupportedRootNodes(propertyRoots), \"root\");\n@@ -125,1 +128,1 @@\n-\t\t\t\tpropertyRoots, \"root\");\n+\t\t\t\tremoveUnsupportedRootNodes(propertyRoots), \"root\");\n@@ -149,1 +152,2 @@\n-\t\t\/\/ FIXME: Should we include extraTestOption and enabledButWrongForTest here, with either IN_CONFIGURATION style, or some new disabled\/error style?\n+\t\t\/\/ FIXME: Should we include extraTestOption and enabledButWrongForTest here,\n+\t\t\/\/ with either IN_CONFIGURATION style, or some new disabled\/error style?\n@@ -151,1 +155,2 @@\n-\t\tassertOptions(threadAllocation, Arrays.asList(\"Enabled\", \"IN_BOTH\", \"Period\", \"IN_BOTH\")); \/\/ \"extraTestOption\", \"IN_CONFIGURATION\"\n+\t\tassertOptions(threadAllocation, Arrays.asList(\"Enabled\", \"IN_BOTH\", \"Period\", \"IN_BOTH\")); \/\/ \"extraTestOption\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ \"IN_CONFIGURATION\"\n@@ -154,1 +159,2 @@\n-\t\tassertOptions(classLoadingStatistics, Arrays.asList(\"Period\", \"IN_BOTH\", \"Enabled\", \"IN_BOTH\")); \/\/ \"enabledButWrongForTest\", \"IN_CONFIGURATION\"\n+\t\tassertOptions(classLoadingStatistics, Arrays.asList(\"Period\", \"IN_BOTH\", \"Enabled\", \"IN_BOTH\")); \/\/ \"enabledButWrongForTest\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ \"IN_CONFIGURATION\"\n@@ -187,1 +193,2 @@\n-\t\t\/\/ FIXME: Should we include extraTestOption and enabledButWrongForTest here, with either IN_CONFIGURATION style, or some new disabled\/error style?\n+\t\t\/\/ FIXME: Should we include extraTestOption and enabledButWrongForTest here,\n+\t\t\/\/ with either IN_CONFIGURATION style, or some new disabled\/error style?\n@@ -189,1 +196,2 @@\n-\t\tassertOptions(threadAllocation, Arrays.asList(\"Enabled\", \"IN_BOTH\", \"Period\", \"IN_BOTH\")); \/\/ \"extraTestOption\", \"IN_CONFIGURATION\"\n+\t\tassertOptions(threadAllocation, Arrays.asList(\"Enabled\", \"IN_BOTH\", \"Period\", \"IN_BOTH\")); \/\/ \"extraTestOption\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ \"IN_CONFIGURATION\"\n@@ -192,1 +200,2 @@\n-\t\tassertOptions(classLoadingStatistics, Arrays.asList(\"Period\", \"IN_BOTH\", \"Enabled\", \"IN_SERVER\")); \/\/ \"enabledButWrongForTest\", \"IN_CONFIGURATION\"\n+\t\tassertOptions(classLoadingStatistics, Arrays.asList(\"Period\", \"IN_BOTH\", \"Enabled\", \"IN_SERVER\")); \/\/ \"enabledButWrongForTest\",\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\/\/ \"IN_CONFIGURATION\"\n@@ -244,0 +253,5 @@\n+\t\tString[] expected = new String[] {\"Enabled\", \"Period\", \"Stack Trace\", \"Threshold\"};\n+\t\tif (ConnectionToolkit.isJavaVersionAboveOrEqual(getConnectionHandle(), JavaVersionSupport.JDK_16)) {\n+\t\t\t\/\/ probably related to https:\/\/bugs.openjdk.java.net\/browse\/JDK-8257602\n+\t\t\texpected = new String[] {\"Enabled\", \"Event Emission Throttle\", \"Period\", \"Stack Trace\", \"Threshold\"};\n+\t\t}\n@@ -245,1 +259,1 @@\n-\t\t\t\tnew String[] {\"Enabled\", \"Period\", \"Stack Trace\", \"Threshold\"}, props.toArray());\n+\t\t\t\texpected, props.toArray());\n@@ -290,1 +304,2 @@\n-\t\/\/ TODO: Add more tests: Other categories, labels, descriptions, option label and descriptions, content types.\n+\t\/\/ TODO: Add more tests: Other categories, labels, descriptions, option label\n+\t\/\/ and descriptions, content types.\n@@ -321,0 +336,13 @@\n+\tprivate <T extends PathElement> Collection<T> removeUnsupportedRootNodes(Collection<T> actualNodes) {\n+\t\tList<T> res = new ArrayList<T>();\n+\t\tfor (T pathElement : actualNodes) {\n+\t\t\tif (!pathElement.getName().equals(\"jdk\")) {\n+\t\t\t\t\/\/ jdk named root nodes are related to nodes that are not supported in newer\n+\t\t\t\t\/\/ JDKs\n+\t\t\t\t\/\/ like jdk.SafepointWaitBlocked (removed in JDK 13)\n+\t\t\t\tres.add(pathElement);\n+\t\t\t}\n+\t\t}\n+\t\treturn res;\n+\t}\n+\n@@ -338,1 +366,1 @@\n-\t\t\t\tactualNodesNames.containsAll(expectedNodesNames) && expectedNodesNames.containsAll(actualNodesNames));\n+\t\t\t\tactualNodesNames.containsAll(expectedNodesNames));\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/test\/PropertyContentBuilderTest.java","additions":41,"deletions":13,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -67,0 +67,5 @@\n+\tpublic static final JavaVersion JDK_13 = new JavaVersion(13, 0);\n+\tpublic static final JavaVersion JDK_14 = new JavaVersion(14, 0);\n+\tpublic static final JavaVersion JDK_15 = new JavaVersion(15, 0);\n+\tpublic static final JavaVersion JDK_16 = new JavaVersion(16, 0);\n+\tpublic static final JavaVersion JDK_17 = new JavaVersion(17, 0);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/version\/JavaVersionSupport.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}