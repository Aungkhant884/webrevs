{"files":[{"filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/jfr\/Generated_MetadataBaseline_11.jfr","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+jdk.ActiveRecording,destination#text,duration#timespan,eventThread#thread,id#number,maxAge#timespan,maxSize#memory,name#text,recordingDuration#timespan,recordingStart#timestamp,stackTrace#stacktrace,startTime#timestamp\n+jdk.ActiveSetting,duration#timespan,eventThread#thread,name#text,settingFor#labeledIdentifier,stackTrace#stacktrace,startTime#timestamp,value#text\n+jdk.AllocationRequiringGC,eventThread#thread,gcId#number,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockClassRevocation,disableBiasing#boolean,duration#timespan,eventThread#thread,revokedClass#class,safepointId#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockRevocation,duration#timespan,eventThread#thread,lockClass#class,previousOwner#thread,safepointId#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockSelfRevocation,duration#timespan,eventThread#thread,lockClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.BooleanFlag,name#text,origin#text,startTime#timestamp,value#boolean\n+jdk.BooleanFlagChanged,name#text,newValue#boolean,oldValue#boolean,origin#text,startTime#timestamp\n+jdk.CPUInformation,cores#number,cpu#text,description#text,hwThreads#number,sockets#number,startTime#timestamp\n+jdk.CPULoad,jvmSystem#percentage,jvmUser#percentage,machineTotal#percentage,startTime#timestamp\n+jdk.CPUTimeStampCounter,fastTimeAutoEnabled#boolean,fastTimeEnabled#boolean,fastTimeFrequency#frequency,osFrequency#frequency,startTime#timestamp\n+jdk.ClassDefine,definedClass#class,definingClassLoader#classLoader,eventThread#thread,stackTrace#stacktrace,startTime#timestamp\n+jdk.ClassLoad,definingClassLoader#classLoader,duration#timespan,eventThread#thread,initiatingClassLoader#classLoader,loadedClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.ClassLoaderStatistics,anonymousBlockSize#memory,anonymousChunkSize#memory,anonymousClassCount#number,blockSize#memory,chunkSize#memory,classCount#number,classLoader#classLoader,classLoaderData#address,parentClassLoader#classLoader,startTime#timestamp\n+jdk.ClassLoadingStatistics,loadedClassCount#number,startTime#timestamp,unloadedClassCount#number\n+jdk.ClassUnload,definingClassLoader#classLoader,eventThread#thread,startTime#timestamp,unloadedClass#class\n+jdk.CodeCacheConfiguration,expansionSize#memory,initialSize#memory,minBlockLength#memory,nonNMethodSize#memory,nonProfiledSize#memory,profiledSize#memory,reservedSize#memory,reservedTopAddress#address,startAddress#address,startTime#timestamp\n+jdk.CodeCacheFull,adaptorCount#number,codeBlobType#text,commitedTopAddress#address,entryCount#number,eventThread#thread,fullCount#number,methodCount#number,reservedTopAddress#address,startAddress#address,startTime#timestamp,unallocatedCapacity#memory\n+jdk.CodeCacheStatistics,adaptorCount#number,codeBlobType#text,entryCount#number,fullCount#number,methodCount#number,reservedTopAddress#address,startAddress#address,startTime#timestamp,unallocatedCapacity#memory\n+jdk.CodeSweeperConfiguration,flushingEnabled#boolean,startTime#timestamp,sweeperEnabled#boolean\n+jdk.CodeSweeperStatistics,methodReclaimedCount#number,peakFractionTime#timespan,peakSweepTime#timespan,startTime#timestamp,sweepCount#number,totalSweepTime#timespan\n+jdk.Compilation,codeSize#memory,compileId#number,compileLevel#number,duration#timespan,eventThread#thread,inlinedBytes#memory,isOsr#boolean,method#method,startTime#timestamp,succeded#boolean\n+jdk.CompilationFailure,compileId#number,eventThread#thread,failureMessage#text,startTime#timestamp\n+jdk.CompilerConfiguration,startTime#timestamp,threadCount#number,tieredCompilation#boolean\n+jdk.CompilerInlining,bci#number,callee:descriptor#text,callee:name#text,callee:type#text,caller#method,compileId#number,eventThread#thread,message#text,startTime#timestamp,succeeded#boolean\n+jdk.CompilerPhase,compileId#number,duration#timespan,eventThread#thread,phase#text,phaseLevel#number,startTime#timestamp\n+jdk.CompilerStatistics,bailoutCount#number,compileCount#number,invalidatedCount#number,nmethodCodeSize#memory,nmethodsSize#memory,osrBytesCompiled#memory,osrCompileCount#number,peakTimeSpent#timespan,standardBytesCompiled#memory,standardCompileCount#number,startTime#timestamp,totalTimeSpent#timespan\n+jdk.ConcurrentModeFailure,gcId#number,startTime#timestamp\n+jdk.DataLoss,amount#memory,startTime#timestamp,total#memory\n+jdk.DoubleFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.DoubleFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.DumpReason,reason#text,recordingId#number,startTime#timestamp\n+jdk.EvacuationFailed,evacuationFailed:firstSize#memory,evacuationFailed:objectCount#number,evacuationFailed:smallestSize#memory,evacuationFailed:totalSize#memory,gcId#number,startTime#timestamp\n+jdk.EvacuationInformation,allocationRegions#number,allocationRegionsUsedAfter#memory,allocationRegionsUsedBefore#memory,bytesCopied#memory,cSetRegions#number,cSetUsedAfter#memory,cSetUsedBefore#memory,gcId#number,regionsFreed#number,startTime#timestamp\n+jdk.ExceptionStatistics,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,throwables#number\n+jdk.ExecuteVMOperation,blocking#boolean,caller#thread,duration#timespan,eventThread#thread,operation#text,safepoint#boolean,safepointId#number,startTime#timestamp\n+jdk.ExecutionSample,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,state#text\n+jdk.FileForce,duration#timespan,eventThread#thread,metaData#boolean,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.FileRead,bytesRead#memory,duration#timespan,endOfFile#boolean,eventThread#thread,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.FileWrite,bytesWritten#memory,duration#timespan,eventThread#thread,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.G1AdaptiveIHOP,additionalBufferSize#memory,currentOccupancy#memory,gcId#number,ihopTargetOccupancy#memory,predictedAllocationRate#frequency,predictedMarkingDuration#timespan,predictionActive#boolean,startTime#timestamp,threshold#memory,thresholdPercentage#percentage\n+jdk.G1BasicIHOP,currentOccupancy#memory,gcId#number,lastMarkingDuration#timespan,recentAllocationRate#frequency,recentMutatorAllocationSize#memory,recentMutatorDuration#timespan,startTime#timestamp,targetOccupancy#memory,threshold#memory,thresholdPercentage#percentage\n+jdk.G1EvacuationOldStatistics,startTime#timestamp,statistics:allocated#memory,statistics:directAllocated#memory,statistics:failureUsed#memory,statistics:failureWaste#memory,statistics:gcId#number,statistics:regionEndWaste#memory,statistics:regionsRefilled#memory,statistics:undoWaste#memory,statistics:used#memory,statistics:wasted#memory\n+jdk.G1EvacuationYoungStatistics,startTime#timestamp,statistics:allocated#memory,statistics:directAllocated#memory,statistics:failureUsed#memory,statistics:failureWaste#memory,statistics:gcId#number,statistics:regionEndWaste#memory,statistics:regionsRefilled#memory,statistics:undoWaste#memory,statistics:used#memory,statistics:wasted#memory\n+jdk.G1GarbageCollection,duration#timespan,gcId#number,startTime#timestamp,type#text\n+jdk.G1HeapRegionInformation,index#number,start#address,startTime#timestamp,type#text,used#memory\n+jdk.G1HeapRegionTypeChange,from#text,index#number,start#address,startTime#timestamp,to#text,used#memory\n+jdk.G1HeapSummary,edenTotalSize#memory,edenUsedSize#memory,gcId#number,numberOfRegions#number,startTime#timestamp,survivorUsedSize#memory,when#text\n+jdk.G1MMU,gcId#number,gcTime#timespan,pauseTarget#timespan,startTime#timestamp,timeSlice#timespan\n+jdk.GCConfiguration,concurrentGCThreads#number,gcTimeRatio#number,isExplicitGCConcurrent#boolean,isExplicitGCDisabled#boolean,oldCollector#text,parallelGCThreads#number,pauseTarget#timespan,startTime#timestamp,usesDynamicGCThreads#boolean,youngCollector#text\n+jdk.GCHeapConfiguration,compressedOopsMode#text,heapAddressBits#number,initialSize#memory,maxSize#memory,minSize#memory,objectAlignment#memory,startTime#timestamp,usesCompressedOops#boolean\n+jdk.GCHeapSummary,gcId#number,heapSpace:committedEnd#address,heapSpace:committedSize#memory,heapSpace:reservedEnd#address,heapSpace:reservedSize#memory,heapSpace:start#address,heapUsed#memory,startTime#timestamp,when#text\n+jdk.GCPhaseConcurrent,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePause,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel1,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel2,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel3,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel4,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCReferenceStatistics,count#number,gcId#number,startTime#timestamp,type#text\n+jdk.GCSurvivorConfiguration,initialTenuringThreshold#number,maxTenuringThreshold#number,startTime#timestamp\n+jdk.GCTLABConfiguration,minTLABSize#memory,startTime#timestamp,tlabRefillWasteLimit#memory,usesTLABs#boolean\n+jdk.GarbageCollection,cause#text,duration#timespan,gcId#number,longestPause#timespan,name#text,startTime#timestamp,sumOfPauses#timespan\n+jdk.InitialEnvironmentVariable,key#text,startTime#timestamp,value#text\n+jdk.InitialSystemProperty,key#text,startTime#timestamp,value#text\n+jdk.IntFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.IntFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.JVMInformation,javaArguments#text,jvmArguments#text,jvmFlags#text,jvmName#text,jvmStartTime#timestamp,jvmVersion#text,pid#number,startTime#timestamp\n+jdk.JavaErrorThrow,duration#timespan,eventThread#thread,message#text,stackTrace#stacktrace,startTime#timestamp,thrownClass#class\n+jdk.JavaExceptionThrow,duration#timespan,eventThread#thread,message#text,stackTrace#stacktrace,startTime#timestamp,thrownClass#class\n+jdk.JavaMonitorEnter,address#address,duration#timespan,eventThread#thread,monitorClass#class,previousOwner#thread,stackTrace#stacktrace,startTime#timestamp\n+jdk.JavaMonitorInflate,address#address,cause#text,duration#timespan,eventThread#thread,monitorClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.JavaMonitorWait,address#address,duration#timespan,eventThread#thread,monitorClass#class,notifier#thread,stackTrace#stacktrace,startTime#timestamp,timedOut#boolean,timeout#timespan\n+jdk.JavaThreadStatistics,accumulatedCount#number,activeCount#number,daemonCount#number,peakCount#number,startTime#timestamp\n+jdk.LongFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.LongFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.MetaspaceAllocationFailure,anonymousClassLoader#boolean,classLoader#classLoader,metadataType#text,metaspaceObjectType#text,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.MetaspaceChunkFreeListSummary,gcId#number,humongousChunks#number,humongousChunksTotalSize#memory,mediumChunks#number,mediumChunksTotalSize#memory,metadataType#text,smallChunks#number,smallChunksTotalSize#memory,specializedChunks#number,specializedChunksTotalSize#memory,startTime#timestamp,when#text\n+jdk.MetaspaceGCThreshold,newValue#memory,oldValue#memory,startTime#timestamp,updater#text\n+jdk.MetaspaceOOM,anonymousClassLoader#boolean,classLoader#classLoader,metadataType#text,metaspaceObjectType#text,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.MetaspaceSummary,classSpace:committed#memory,classSpace:reserved#memory,classSpace:used#memory,dataSpace:committed#memory,dataSpace:reserved#memory,dataSpace:used#memory,gcId#number,gcThreshold#memory,metaspace:committed#memory,metaspace:reserved#memory,metaspace:used#memory,startTime#timestamp,when#text\n+jdk.ModuleExport,exportedPackage#package,exportingModule#module,startTime#timestamp,targetModule#module\n+jdk.ModuleRequire,requiredModule#module,source#module,startTime#timestamp\n+jdk.NativeLibrary,baseAddress#address,name#text,startTime#timestamp,topAddress#address\n+jdk.NativeMethodSample,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,state#text\n+jdk.NetworkUtilization,networkInterface#text,readRate#frequency,startTime#timestamp,writeRate#frequency\n+jdk.OSInformation,osVersion#text,startTime#timestamp\n+jdk.ObjectAllocationInNewTLAB,allocationSize#memory,eventThread#thread,objectClass#class,stackTrace#stacktrace,startTime#timestamp,tlabSize#memory\n+jdk.ObjectAllocationOutsideTLAB,allocationSize#memory,eventThread#thread,objectClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.ObjectCount,count#number,gcId#number,objectClass#class,startTime#timestamp,totalSize#memory\n+jdk.ObjectCountAfterGC,count#number,gcId#number,objectClass#class,startTime#timestamp,totalSize#memory\n+jdk.OldGarbageCollection,duration#timespan,gcId#number,startTime#timestamp\n+jdk.OldObjectSample,allocationTime#timestamp,arrayElements#number,duration#timespan,eventThread#thread,lastKnownHeapUsage#memory,object#oldObject,root#oldObjectGcRoot,stackTrace#stacktrace,startTime#timestamp\n+jdk.PSHeapSummary,edenSpace:end#address,edenSpace:size#memory,edenSpace:start#address,edenSpace:used#memory,fromSpace:end#address,fromSpace:size#memory,fromSpace:start#address,fromSpace:used#memory,gcId#number,oldObjectSpace:end#address,oldObjectSpace:size#memory,oldObjectSpace:start#address,oldObjectSpace:used#memory,oldSpace:committedEnd#address,oldSpace:committedSize#memory,oldSpace:reservedEnd#address,oldSpace:reservedSize#memory,oldSpace:start#address,startTime#timestamp,toSpace:end#address,toSpace:size#memory,toSpace:start#address,toSpace:used#memory,when#text,youngSpace:committedEnd#address,youngSpace:committedSize#memory,youngSpace:reservedEnd#address,youngSpace:reservedSize#memory,youngSpace:start#address\n+jdk.ParallelOldGarbageCollection,densePrefix#address,duration#timespan,gcId#number,startTime#timestamp\n+jdk.PhysicalMemory,startTime#timestamp,totalSize#memory,usedSize#memory\n+jdk.PromoteObjectInNewPLAB,eventThread#thread,gcId#number,objectClass#class,objectSize#memory,plabSize#memory,startTime#timestamp,tenured#boolean,tenuringAge#number\n+jdk.PromoteObjectOutsidePLAB,eventThread#thread,gcId#number,objectClass#class,objectSize#memory,startTime#timestamp,tenured#boolean,tenuringAge#number\n+jdk.PromotionFailed,gcId#number,promotionFailed:firstSize#memory,promotionFailed:objectCount#number,promotionFailed:smallestSize#memory,promotionFailed:totalSize#memory,startTime#timestamp,thread#thread\n+jdk.ReservedStackActivation,eventThread#thread,method#method,stackTrace#stacktrace,startTime#timestamp\n+jdk.SafepointBegin,duration#timespan,eventThread#thread,jniCriticalThreadCount#number,safepointId#number,startTime#timestamp,totalThreadCount#number\n+jdk.SafepointCleanup,duration#timespan,eventThread#thread,safepointId#number,startTime#timestamp\n+jdk.SafepointCleanupTask,duration#timespan,eventThread#thread,name#text,safepointId#number,startTime#timestamp\n+jdk.SafepointEnd,duration#timespan,eventThread#thread,safepointId#number,startTime#timestamp\n+jdk.SafepointStateSynchronization,duration#timespan,eventThread#thread,initialThreadCount#number,iterations#number,runningThreadCount#number,safepointId#number,startTime#timestamp\n+jdk.SafepointWaitBlocked,duration#timespan,eventThread#thread,runningThreadCount#number,safepointId#number,startTime#timestamp\n+jdk.SecurityPropertyModification,duration#timespan,eventThread#thread,key#text,stackTrace#stacktrace,startTime#timestamp,value#text\n+jdk.ShenandoahHeapRegionInformation,index#number,start#address,startTime#timestamp,state#text,used#memory\n+jdk.ShenandoahHeapRegionStateChange,from#text,index#number,start#address,startTime#timestamp,to#text,used#memory\n+jdk.Shutdown,eventThread#thread,reason#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.SocketRead,address#text,bytesRead#memory,duration#timespan,endOfStream#boolean,eventThread#thread,host#text,port#number,stackTrace#stacktrace,startTime#timestamp,timeout#timespan\n+jdk.SocketWrite,address#text,bytesWritten#memory,duration#timespan,eventThread#thread,host#text,port#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.StringFlag,name#text,origin#text,startTime#timestamp,value#text\n+jdk.StringFlagChanged,name#text,newValue#text,oldValue#text,origin#text,startTime#timestamp\n+jdk.SweepCodeCache,duration#timespan,eventThread#thread,flushedCount#number,startTime#timestamp,sweepId#number,sweptCount#number,zombifiedCount#number\n+jdk.SystemProcess,commandLine#text,pid#text,startTime#timestamp\n+jdk.TLSHandshake,certificateId#number,cipherSuite#text,duration#timespan,eventThread#thread,peerHost#text,peerPort#number,protocolVersion#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.TenuringDistribution,age#number,gcId#number,size#memory,startTime#timestamp\n+jdk.ThreadAllocationStatistics,allocated#memory,eventThread#thread,startTime#timestamp\n+jdk.ThreadCPULoad,eventThread#thread,startTime#timestamp,system#percentage,user#percentage\n+jdk.ThreadContextSwitchRate,startTime#timestamp,switchRate#frequency\n+jdk.ThreadDump,result#text,startTime#timestamp\n+jdk.ThreadEnd,eventThread#thread,startTime#timestamp,thread#thread\n+jdk.ThreadPark,address#address,duration#timespan,eventThread#thread,parkedClass#class,stackTrace#stacktrace,startTime#timestamp,timeout#timespan,until#timestamp\n+jdk.ThreadSleep,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,time#timespan\n+jdk.ThreadStart,eventThread#thread,startTime#timestamp,thread#thread\n+jdk.UnsignedIntFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.UnsignedIntFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.UnsignedLongFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.UnsignedLongFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.VirtualizationInformation,name#text,startTime#timestamp\n+jdk.X509Certificate,algorithm#text,certificateId#number,duration#timespan,eventThread#thread,issuer#text,keyLength#number,keyType#text,serialNumber#text,stackTrace#stacktrace,startTime#timestamp,subject#text,validFrom#timestamp,validUntil#timestamp\n+jdk.X509Validation,certificateId#number,certificatePosition#number,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,validationCounter#number\n+jdk.YoungGarbageCollection,duration#timespan,gcId#number,startTime#timestamp,tenuringThreshold#number\n+jdk.YoungGenerationConfiguration,maxSize#memory,minSize#memory,newRatio#number,startTime#timestamp\n+jdk.ZPageAllocation,duration#timespan,eventThread#thread,freeAfter#memory,inCacheAfter#memory,noReserve#boolean,nonBlocking#boolean,pageSize#memory,startTime#timestamp,usedAfter#memory\n+jdk.ZStatisticsCounter,duration#timespan,eventThread#thread,id#text,increment#number,startTime#timestamp,value#number\n+jdk.ZStatisticsSampler,duration#timespan,eventThread#thread,id#text,startTime#timestamp,value#number\n+jdk.ZThreadPhase,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/jfr\/Generated_MetadataBaseline_11.txt","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/jfr\/Generated_MetadataBaseline_9.jfr","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+jdk.ActiveRecording,destination#text,duration#timespan,eventThread#thread,id#number,maxAge#timespan,maxSize#memory,name#text,recordingDuration#timespan,recordingStart#timestamp,stackTrace#stacktrace,startTime#timestamp\n+jdk.ActiveSetting,duration#timespan,eventThread#thread,name#text,settingFor#labeledIdentifier,stackTrace#stacktrace,startTime#timestamp,value#text\n+jdk.AllocationRequiringGC,eventThread#thread,gcId#number,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockClassRevocation,disableBiasing#boolean,duration#timespan,eventThread#thread,revokedClass#class,safepointId#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockRevocation,duration#timespan,eventThread#thread,lockClass#class,previousOwner#thread,safepointId#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockSelfRevocation,duration#timespan,eventThread#thread,lockClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.BooleanFlag,name#text,origin#text,startTime#timestamp,value#boolean\n+jdk.BooleanFlagChanged,name#text,newValue#boolean,oldValue#boolean,origin#text,startTime#timestamp\n+jdk.CPUInformation,cores#number,cpu#text,description#text,hwThreads#number,sockets#number,startTime#timestamp\n+jdk.CPULoad,jvmSystem#percentage,jvmUser#percentage,machineTotal#percentage,startTime#timestamp\n+jdk.CPUTimeStampCounter,fastTimeAutoEnabled#boolean,fastTimeEnabled#boolean,fastTimeFrequency#frequency,osFrequency#frequency,startTime#timestamp\n+jdk.ClassDefine,definedClass#class,definingClassLoader#classLoader,eventThread#thread,stackTrace#stacktrace,startTime#timestamp\n+jdk.ClassLoad,definingClassLoader#classLoader,duration#timespan,eventThread#thread,initiatingClassLoader#classLoader,loadedClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.ClassLoaderStatistics,anonymousBlockSize#memory,anonymousChunkSize#memory,anonymousClassCount#number,blockSize#memory,chunkSize#memory,classCount#number,classLoader#classLoader,classLoaderData#address,parentClassLoader#classLoader,startTime#timestamp\n+jdk.ClassLoadingStatistics,loadedClassCount#number,startTime#timestamp,unloadedClassCount#number\n+jdk.ClassUnload,definingClassLoader#classLoader,eventThread#thread,startTime#timestamp,unloadedClass#class\n+jdk.CodeCacheConfiguration,expansionSize#memory,initialSize#memory,minBlockLength#memory,nonNMethodSize#memory,nonProfiledSize#memory,profiledSize#memory,reservedSize#memory,reservedTopAddress#address,startAddress#address,startTime#timestamp\n+jdk.CodeCacheFull,adaptorCount#number,codeBlobType#text,commitedTopAddress#address,entryCount#number,eventThread#thread,fullCount#number,methodCount#number,reservedTopAddress#address,startAddress#address,startTime#timestamp,unallocatedCapacity#memory\n+jdk.CodeCacheStatistics,adaptorCount#number,codeBlobType#text,entryCount#number,fullCount#number,methodCount#number,reservedTopAddress#address,startAddress#address,startTime#timestamp,unallocatedCapacity#memory\n+jdk.CodeSweeperConfiguration,flushingEnabled#boolean,startTime#timestamp,sweeperEnabled#boolean\n+jdk.CodeSweeperStatistics,methodReclaimedCount#number,peakFractionTime#timespan,peakSweepTime#timespan,startTime#timestamp,sweepCount#number,totalSweepTime#timespan\n+jdk.Compilation,codeSize#memory,compileId#number,compileLevel#number,duration#timespan,eventThread#thread,inlinedBytes#memory,isOsr#boolean,method#method,startTime#timestamp,succeded#boolean\n+jdk.CompilationFailure,compileId#number,eventThread#thread,failureMessage#text,startTime#timestamp\n+jdk.CompilerConfiguration,startTime#timestamp,threadCount#number,tieredCompilation#boolean\n+jdk.CompilerInlining,bci#number,callee:descriptor#text,callee:name#text,callee:type#text,caller#method,compileId#number,eventThread#thread,message#text,startTime#timestamp,succeeded#boolean\n+jdk.CompilerPhase,compileId#number,duration#timespan,eventThread#thread,phase#text,phaseLevel#number,startTime#timestamp\n+jdk.CompilerStatistics,bailoutCount#number,compileCount#number,invalidatedCount#number,nmethodCodeSize#memory,nmethodsSize#memory,osrBytesCompiled#memory,osrCompileCount#number,peakTimeSpent#timespan,standardBytesCompiled#memory,standardCompileCount#number,startTime#timestamp,totalTimeSpent#timespan\n+jdk.ConcurrentModeFailure,gcId#number,startTime#timestamp\n+jdk.DataLoss,amount#memory,startTime#timestamp,total#memory\n+jdk.DoubleFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.DoubleFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.DumpReason,reason#text,recordingId#number,startTime#timestamp\n+jdk.EvacuationFailed,evacuationFailed:firstSize#memory,evacuationFailed:objectCount#number,evacuationFailed:smallestSize#memory,evacuationFailed:totalSize#memory,gcId#number,startTime#timestamp\n+jdk.EvacuationInformation,allocationRegions#number,allocationRegionsUsedAfter#memory,allocationRegionsUsedBefore#memory,bytesCopied#memory,cSetRegions#number,cSetUsedAfter#memory,cSetUsedBefore#memory,gcId#number,regionsFreed#number,startTime#timestamp\n+jdk.ExceptionStatistics,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,throwables#number\n+jdk.ExecuteVMOperation,blocking#boolean,caller#thread,duration#timespan,eventThread#thread,operation#text,safepoint#boolean,safepointId#number,startTime#timestamp\n+jdk.ExecutionSample,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,state#text\n+jdk.FileForce,duration#timespan,eventThread#thread,metaData#boolean,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.FileRead,bytesRead#memory,duration#timespan,endOfFile#boolean,eventThread#thread,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.FileWrite,bytesWritten#memory,duration#timespan,eventThread#thread,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.G1AdaptiveIHOP,additionalBufferSize#memory,currentOccupancy#memory,gcId#number,ihopTargetOccupancy#memory,predictedAllocationRate#frequency,predictedMarkingDuration#timespan,predictionActive#boolean,startTime#timestamp,threshold#memory,thresholdPercentage#percentage\n+jdk.G1BasicIHOP,currentOccupancy#memory,gcId#number,lastMarkingDuration#timespan,recentAllocationRate#frequency,recentMutatorAllocationSize#memory,recentMutatorDuration#timespan,startTime#timestamp,targetOccupancy#memory,threshold#memory,thresholdPercentage#percentage\n+jdk.G1EvacuationOldStatistics,startTime#timestamp,statistics:allocated#memory,statistics:directAllocated#memory,statistics:failureUsed#memory,statistics:failureWaste#memory,statistics:gcId#number,statistics:regionEndWaste#memory,statistics:regionsRefilled#memory,statistics:undoWaste#memory,statistics:used#memory,statistics:wasted#memory\n+jdk.G1EvacuationYoungStatistics,startTime#timestamp,statistics:allocated#memory,statistics:directAllocated#memory,statistics:failureUsed#memory,statistics:failureWaste#memory,statistics:gcId#number,statistics:regionEndWaste#memory,statistics:regionsRefilled#memory,statistics:undoWaste#memory,statistics:used#memory,statistics:wasted#memory\n+jdk.G1GarbageCollection,duration#timespan,gcId#number,startTime#timestamp,type#text\n+jdk.G1HeapRegionInformation,index#number,start#address,startTime#timestamp,type#text,used#memory\n+jdk.G1HeapRegionTypeChange,from#text,index#number,start#address,startTime#timestamp,to#text,used#memory\n+jdk.G1HeapSummary,edenTotalSize#memory,edenUsedSize#memory,gcId#number,numberOfRegions#number,startTime#timestamp,survivorUsedSize#memory,when#text\n+jdk.G1MMU,gcId#number,gcTime#timespan,pauseTarget#timespan,startTime#timestamp,timeSlice#timespan\n+jdk.GCConfiguration,concurrentGCThreads#number,gcTimeRatio#number,isExplicitGCConcurrent#boolean,isExplicitGCDisabled#boolean,oldCollector#text,parallelGCThreads#number,pauseTarget#timespan,startTime#timestamp,usesDynamicGCThreads#boolean,youngCollector#text\n+jdk.GCHeapConfiguration,compressedOopsMode#text,heapAddressBits#number,initialSize#memory,maxSize#memory,minSize#memory,objectAlignment#memory,startTime#timestamp,usesCompressedOops#boolean\n+jdk.GCHeapSummary,gcId#number,heapSpace:committedEnd#address,heapSpace:committedSize#memory,heapSpace:reservedEnd#address,heapSpace:reservedSize#memory,heapSpace:start#address,heapUsed#memory,startTime#timestamp,when#text\n+jdk.GCPhaseConcurrent,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePause,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel1,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel2,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel3,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel4,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCReferenceStatistics,count#number,gcId#number,startTime#timestamp,type#text\n+jdk.GCSurvivorConfiguration,initialTenuringThreshold#number,maxTenuringThreshold#number,startTime#timestamp\n+jdk.GCTLABConfiguration,minTLABSize#memory,startTime#timestamp,tlabRefillWasteLimit#memory,usesTLABs#boolean\n+jdk.GarbageCollection,cause#text,duration#timespan,gcId#number,longestPause#timespan,name#text,startTime#timestamp,sumOfPauses#timespan\n+jdk.InitialEnvironmentVariable,key#text,startTime#timestamp,value#text\n+jdk.InitialSystemProperty,key#text,startTime#timestamp,value#text\n+jdk.IntFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.IntFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.JVMInformation,javaArguments#text,jvmArguments#text,jvmFlags#text,jvmName#text,jvmStartTime#timestamp,jvmVersion#text,pid#number,startTime#timestamp\n+jdk.JavaErrorThrow,duration#timespan,eventThread#thread,message#text,stackTrace#stacktrace,startTime#timestamp,thrownClass#class\n+jdk.JavaExceptionThrow,duration#timespan,eventThread#thread,message#text,stackTrace#stacktrace,startTime#timestamp,thrownClass#class\n+jdk.JavaMonitorEnter,address#address,duration#timespan,eventThread#thread,monitorClass#class,previousOwner#thread,stackTrace#stacktrace,startTime#timestamp\n+jdk.JavaMonitorInflate,address#address,cause#text,duration#timespan,eventThread#thread,monitorClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.JavaMonitorWait,address#address,duration#timespan,eventThread#thread,monitorClass#class,notifier#thread,stackTrace#stacktrace,startTime#timestamp,timedOut#boolean,timeout#timespan\n+jdk.JavaThreadStatistics,accumulatedCount#number,activeCount#number,daemonCount#number,peakCount#number,startTime#timestamp\n+jdk.LongFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.LongFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.MetaspaceAllocationFailure,anonymousClassLoader#boolean,classLoader#classLoader,metadataType#text,metaspaceObjectType#text,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.MetaspaceChunkFreeListSummary,gcId#number,humongousChunks#number,humongousChunksTotalSize#memory,mediumChunks#number,mediumChunksTotalSize#memory,metadataType#text,smallChunks#number,smallChunksTotalSize#memory,specializedChunks#number,specializedChunksTotalSize#memory,startTime#timestamp,when#text\n+jdk.MetaspaceGCThreshold,newValue#memory,oldValue#memory,startTime#timestamp,updater#text\n+jdk.MetaspaceOOM,anonymousClassLoader#boolean,classLoader#classLoader,metadataType#text,metaspaceObjectType#text,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.MetaspaceSummary,classSpace:committed#memory,classSpace:reserved#memory,classSpace:used#memory,dataSpace:committed#memory,dataSpace:reserved#memory,dataSpace:used#memory,gcId#number,gcThreshold#memory,metaspace:committed#memory,metaspace:reserved#memory,metaspace:used#memory,startTime#timestamp,when#text\n+jdk.ModuleExport,exportedPackage#package,exportingModule#module,startTime#timestamp,targetModule#module\n+jdk.ModuleRequire,requiredModule#module,source#module,startTime#timestamp\n+jdk.NativeLibrary,baseAddress#address,name#text,startTime#timestamp,topAddress#address\n+jdk.NativeMethodSample,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,state#text\n+jdk.NetworkUtilization,networkInterface#text,readRate#frequency,startTime#timestamp,writeRate#frequency\n+jdk.OSInformation,osVersion#text,startTime#timestamp\n+jdk.ObjectAllocationInNewTLAB,allocationSize#memory,eventThread#thread,objectClass#class,stackTrace#stacktrace,startTime#timestamp,tlabSize#memory\n+jdk.ObjectAllocationOutsideTLAB,allocationSize#memory,eventThread#thread,objectClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.ObjectCount,count#number,gcId#number,objectClass#class,startTime#timestamp,totalSize#memory\n+jdk.ObjectCountAfterGC,count#number,gcId#number,objectClass#class,startTime#timestamp,totalSize#memory\n+jdk.OldGarbageCollection,duration#timespan,gcId#number,startTime#timestamp\n+jdk.OldObjectSample,allocationTime#timestamp,arrayElements#number,duration#timespan,eventThread#thread,lastKnownHeapUsage#memory,object#oldObject,root#oldObjectGcRoot,stackTrace#stacktrace,startTime#timestamp\n+jdk.PSHeapSummary,edenSpace:end#address,edenSpace:size#memory,edenSpace:start#address,edenSpace:used#memory,fromSpace:end#address,fromSpace:size#memory,fromSpace:start#address,fromSpace:used#memory,gcId#number,oldObjectSpace:end#address,oldObjectSpace:size#memory,oldObjectSpace:start#address,oldObjectSpace:used#memory,oldSpace:committedEnd#address,oldSpace:committedSize#memory,oldSpace:reservedEnd#address,oldSpace:reservedSize#memory,oldSpace:start#address,startTime#timestamp,toSpace:end#address,toSpace:size#memory,toSpace:start#address,toSpace:used#memory,when#text,youngSpace:committedEnd#address,youngSpace:committedSize#memory,youngSpace:reservedEnd#address,youngSpace:reservedSize#memory,youngSpace:start#address\n+jdk.ParallelOldGarbageCollection,densePrefix#address,duration#timespan,gcId#number,startTime#timestamp\n+jdk.PhysicalMemory,startTime#timestamp,totalSize#memory,usedSize#memory\n+jdk.PromoteObjectInNewPLAB,eventThread#thread,gcId#number,objectClass#class,objectSize#memory,plabSize#memory,startTime#timestamp,tenured#boolean,tenuringAge#number\n+jdk.PromoteObjectOutsidePLAB,eventThread#thread,gcId#number,objectClass#class,objectSize#memory,startTime#timestamp,tenured#boolean,tenuringAge#number\n+jdk.PromotionFailed,gcId#number,promotionFailed:firstSize#memory,promotionFailed:objectCount#number,promotionFailed:smallestSize#memory,promotionFailed:totalSize#memory,startTime#timestamp,thread#thread\n+jdk.ReservedStackActivation,eventThread#thread,method#method,stackTrace#stacktrace,startTime#timestamp\n+jdk.SafepointBegin,duration#timespan,eventThread#thread,jniCriticalThreadCount#number,safepointId#number,startTime#timestamp,totalThreadCount#number\n+jdk.SafepointCleanup,duration#timespan,eventThread#thread,safepointId#number,startTime#timestamp\n+jdk.SafepointCleanupTask,duration#timespan,eventThread#thread,name#text,safepointId#number,startTime#timestamp\n+jdk.SafepointEnd,duration#timespan,eventThread#thread,safepointId#number,startTime#timestamp\n+jdk.SafepointStateSynchronization,duration#timespan,eventThread#thread,initialThreadCount#number,iterations#number,runningThreadCount#number,safepointId#number,startTime#timestamp\n+jdk.SafepointWaitBlocked,duration#timespan,eventThread#thread,runningThreadCount#number,safepointId#number,startTime#timestamp\n+jdk.SecurityPropertyModification,duration#timespan,eventThread#thread,key#text,stackTrace#stacktrace,startTime#timestamp,value#text\n+jdk.ShenandoahHeapRegionInformation,index#number,start#address,startTime#timestamp,state#text,used#memory\n+jdk.ShenandoahHeapRegionStateChange,from#text,index#number,start#address,startTime#timestamp,to#text,used#memory\n+jdk.Shutdown,eventThread#thread,reason#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.SocketRead,address#text,bytesRead#memory,duration#timespan,endOfStream#boolean,eventThread#thread,host#text,port#number,stackTrace#stacktrace,startTime#timestamp,timeout#timespan\n+jdk.SocketWrite,address#text,bytesWritten#memory,duration#timespan,eventThread#thread,host#text,port#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.StringFlag,name#text,origin#text,startTime#timestamp,value#text\n+jdk.StringFlagChanged,name#text,newValue#text,oldValue#text,origin#text,startTime#timestamp\n+jdk.SweepCodeCache,duration#timespan,eventThread#thread,flushedCount#number,startTime#timestamp,sweepId#number,sweptCount#number,zombifiedCount#number\n+jdk.SystemProcess,commandLine#text,pid#text,startTime#timestamp\n+jdk.TLSHandshake,certificateId#number,cipherSuite#text,duration#timespan,eventThread#thread,peerHost#text,peerPort#number,protocolVersion#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.TenuringDistribution,age#number,gcId#number,size#memory,startTime#timestamp\n+jdk.ThreadAllocationStatistics,allocated#memory,eventThread#thread,startTime#timestamp\n+jdk.ThreadCPULoad,eventThread#thread,startTime#timestamp,system#percentage,user#percentage\n+jdk.ThreadContextSwitchRate,startTime#timestamp,switchRate#frequency\n+jdk.ThreadDump,result#text,startTime#timestamp\n+jdk.ThreadEnd,eventThread#thread,startTime#timestamp,thread#thread\n+jdk.ThreadPark,address#address,duration#timespan,eventThread#thread,parkedClass#class,stackTrace#stacktrace,startTime#timestamp,timeout#timespan,until#timestamp\n+jdk.ThreadSleep,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,time#timespan\n+jdk.ThreadStart,eventThread#thread,startTime#timestamp,thread#thread\n+jdk.UnsignedIntFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.UnsignedIntFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.UnsignedLongFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.UnsignedLongFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.VirtualizationInformation,name#text,startTime#timestamp\n+jdk.X509Certificate,algorithm#text,certificateId#number,duration#timespan,eventThread#thread,issuer#text,keyLength#number,keyType#text,serialNumber#text,stackTrace#stacktrace,startTime#timestamp,subject#text,validFrom#timestamp,validUntil#timestamp\n+jdk.X509Validation,certificateId#number,certificatePosition#number,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,validationCounter#number\n+jdk.YoungGarbageCollection,duration#timespan,gcId#number,startTime#timestamp,tenuringThreshold#number\n+jdk.YoungGenerationConfiguration,maxSize#memory,minSize#memory,newRatio#number,startTime#timestamp\n+jdk.ZPageAllocation,duration#timespan,eventThread#thread,freeAfter#memory,inCacheAfter#memory,noReserve#boolean,nonBlocking#boolean,pageSize#memory,startTime#timestamp,usedAfter#memory\n+jdk.ZStatisticsCounter,duration#timespan,eventThread#thread,id#text,increment#number,startTime#timestamp,value#number\n+jdk.ZStatisticsSampler,duration#timespan,eventThread#thread,id#text,startTime#timestamp,value#number\n+jdk.ZThreadPhase,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/jfr\/Generated_MetadataBaseline_9.txt","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/jfr\/Metadata_failing.jfr","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<launchConfiguration type=\"org.eclipse.pde.ui.JunitLaunchConfig\">\n+    <booleanAttribute key=\"append.args\" value=\"true\"\/>\n+    <booleanAttribute key=\"askclear\" value=\"false\"\/>\n+    <booleanAttribute key=\"automaticAdd\" value=\"true\"\/>\n+    <booleanAttribute key=\"automaticValidate\" value=\"true\"\/>\n+    <stringAttribute key=\"bad_container_name\" value=\"\\org.openjdk.jmc.flightrecorder.uitest\\launchers\\uitest.launch\"\/>\n+    <stringAttribute key=\"bootstrap\" value=\"\"\/>\n+    <stringAttribute key=\"checked\" value=\"[NONE]\"\/>\n+    <booleanAttribute key=\"clearConfig\" value=\"true\"\/>\n+    <booleanAttribute key=\"clearws\" value=\"true\"\/>\n+    <booleanAttribute key=\"clearwslog\" value=\"false\"\/>\n+    <stringAttribute key=\"configLocation\" value=\"${workspace_loc}\/.metadata\/.plugins\/org.eclipse.pde.core\/pde-junit\"\/>\n+    <booleanAttribute key=\"default\" value=\"true\"\/>\n+    <booleanAttribute key=\"includeOptional\" value=\"true\"\/>\n+    <stringAttribute key=\"location\" value=\"${workspace_loc}\/..\/junit-workspace\"\/>\n+    <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n+        <listEntry value=\"\/org.openjdk.jmc.flightrecorder.uitest\"\/>\n+    <\/listAttribute>\n+    <listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n+        <listEntry value=\"4\"\/>\n+    <\/listAttribute>\n+    <stringAttribute key=\"org.eclipse.jdt.junit.CONTAINER\" value=\"=org.openjdk.jmc.flightrecorder.uitest\"\/>\n+    <booleanAttribute key=\"org.eclipse.jdt.junit.KEEPRUNNING_ATTR\" value=\"false\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.junit.TESTNAME\" value=\"\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.junit.TEST_KIND\" value=\"org.eclipse.jdt.junit.loader.junit4\"\/>\n+    <booleanAttribute key=\"org.eclipse.jdt.launching.ATTR_ATTR_USE_ARGFILE\" value=\"false\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.launching.JRE_CONTAINER\" value=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-11\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.launching.PROGRAM_ARGUMENTS\" value=\"-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl} -consoleLog\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"org.openjdk.jmc.flightrecorder.uitest\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER\" value=\"org.eclipse.pde.ui.workbenchClasspathProvider\"\/>\n+    <stringAttribute key=\"org.eclipse.jdt.launching.VM_ARGUMENTS\" value=\"-ea -XX:+IgnoreUnrecognizedVMOptions -XX:+UseG1GC -XX:+FlightRecorder -Djava.net.preferIPv4Stack=true -Djdk.attach.allowAttachSelf=true --add-exports=java.xml\/com.sun.org.apache.xerces.internal.parsers=ALL-UNNAMED --add-exports=jdk.internal.jvmstat\/sun.jvmstat.monitor=ALL-UNNAMED --add-exports=java.management\/sun.management=ALL-UNNAMED --add-exports=java.management\/sun.management.counter.perf=ALL-UNNAMED --add-exports=jdk.management.agent\/jdk.internal.agent=ALL-UNNAMED --add-exports=jdk.attach\/sun.tools.attach=ALL-UNNAMED --add-exports=java.desktop\/sun.awt.windows=ALL-UNNAMED --add-opens=java.base\/java.net=ALL-UNNAMED --add-opens=jdk.attach\/sun.tools.attach=ALL-UNNAMED -Dmc.memusage.jfr.minsecondsreload=10 -Dmc.memusage.jfr.minsecondsnavigation=5\"\/>\n+    <stringAttribute key=\"pde.version\" value=\"3.3\"\/>\n+    <stringAttribute key=\"product\" value=\"org.openjdk.jmc.rcp.application.product\"\/>\n+    <booleanAttribute key=\"run_in_ui_thread\" value=\"false\"\/>\n+    <booleanAttribute key=\"show_selected_only\" value=\"false\"\/>\n+    <booleanAttribute key=\"tracing\" value=\"false\"\/>\n+    <booleanAttribute key=\"useCustomFeatures\" value=\"false\"\/>\n+    <booleanAttribute key=\"useDefaultConfig\" value=\"true\"\/>\n+    <booleanAttribute key=\"useDefaultConfigArea\" value=\"false\"\/>\n+    <booleanAttribute key=\"useProduct\" value=\"true\"\/>\n+<\/launchConfiguration>\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/launchers\/UITest-Flightrecorder.launch","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -70,1 +70,2 @@\n-\tprivate static String[] events = new String[] {\"Class Load\", \"File Write\", \"Java Thread Statistics\", \"Thread Dump\"};\n+\tprivate static String[] events = new String[] {\"Class Loading Statistics\", \"File Write\", \"Java Thread Statistics\",\n+\t\t\t\"Thread Dump\"};\n@@ -153,0 +154,1 @@\n+\t\t\tint testCount = 0;\n@@ -156,0 +158,5 @@\n+\t\t\t\t\t\/\/ Since it doesn't seem to work well for components not visible in a scroll pane,\n+\t\t\t\t\t\/\/ we only do it for the first five components on the JVM_INTERNALS tab\n+\t\t\t\t\tif (tab.equals(JfrUi.Tabs.JVM_INTERNALS) && testCount++ > 5) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/uitest\/JfrComponentTests.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -90,1 +90,3 @@\n-\t\tif (ConnectionHelper.is9u0EAorLater(TEST_CONNECTION)) {\n+\t\tif (ConnectionHelper.is11orLater(TEST_CONNECTION)) {\n+\t\t\thandleRecording(BASELINE_JFR_FILE + \"11\");\n+\t\t} else if (ConnectionHelper.is9u0EAorLater(TEST_CONNECTION)) {\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/uitest\/MetadataTestBase.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/src\/test\/resources\/jfr\/MetadataBaseline_11.jfr","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+jdk.ActiveRecording,destination#text,duration#timespan,eventThread#thread,id#number,maxAge#timespan,maxSize#memory,name#text,recordingDuration#timespan,recordingStart#timestamp,stackTrace#stacktrace,startTime#timestamp\n+jdk.ActiveSetting,duration#timespan,eventThread#thread,name#text,settingFor#labeledIdentifier,stackTrace#stacktrace,startTime#timestamp,value#text\n+jdk.AllocationRequiringGC,eventThread#thread,gcId#number,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockClassRevocation,disableBiasing#boolean,duration#timespan,eventThread#thread,revokedClass#class,safepointId#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockRevocation,duration#timespan,eventThread#thread,lockClass#class,previousOwner#thread,safepointId#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.BiasedLockSelfRevocation,duration#timespan,eventThread#thread,lockClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.BooleanFlag,name#text,origin#text,startTime#timestamp,value#boolean\n+jdk.BooleanFlagChanged,name#text,newValue#boolean,oldValue#boolean,origin#text,startTime#timestamp\n+jdk.CPUInformation,cores#number,cpu#text,description#text,hwThreads#number,sockets#number,startTime#timestamp\n+jdk.CPULoad,jvmSystem#percentage,jvmUser#percentage,machineTotal#percentage,startTime#timestamp\n+jdk.CPUTimeStampCounter,fastTimeAutoEnabled#boolean,fastTimeEnabled#boolean,fastTimeFrequency#frequency,osFrequency#frequency,startTime#timestamp\n+jdk.ClassDefine,definedClass#class,definingClassLoader#classLoader,eventThread#thread,stackTrace#stacktrace,startTime#timestamp\n+jdk.ClassLoad,definingClassLoader#classLoader,duration#timespan,eventThread#thread,initiatingClassLoader#classLoader,loadedClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.ClassLoaderStatistics,anonymousBlockSize#memory,anonymousChunkSize#memory,anonymousClassCount#number,blockSize#memory,chunkSize#memory,classCount#number,classLoader#classLoader,classLoaderData#address,parentClassLoader#classLoader,startTime#timestamp\n+jdk.ClassLoadingStatistics,loadedClassCount#number,startTime#timestamp,unloadedClassCount#number\n+jdk.ClassUnload,definingClassLoader#classLoader,eventThread#thread,startTime#timestamp,unloadedClass#class\n+jdk.CodeCacheConfiguration,expansionSize#memory,initialSize#memory,minBlockLength#memory,nonNMethodSize#memory,nonProfiledSize#memory,profiledSize#memory,reservedSize#memory,reservedTopAddress#address,startAddress#address,startTime#timestamp\n+jdk.CodeCacheFull,adaptorCount#number,codeBlobType#text,commitedTopAddress#address,entryCount#number,eventThread#thread,fullCount#number,methodCount#number,reservedTopAddress#address,startAddress#address,startTime#timestamp,unallocatedCapacity#memory\n+jdk.CodeCacheStatistics,adaptorCount#number,codeBlobType#text,entryCount#number,fullCount#number,methodCount#number,reservedTopAddress#address,startAddress#address,startTime#timestamp,unallocatedCapacity#memory\n+jdk.CodeSweeperConfiguration,flushingEnabled#boolean,startTime#timestamp,sweeperEnabled#boolean\n+jdk.CodeSweeperStatistics,methodReclaimedCount#number,peakFractionTime#timespan,peakSweepTime#timespan,startTime#timestamp,sweepCount#number,totalSweepTime#timespan\n+jdk.Compilation,codeSize#memory,compileId#number,compileLevel#number,duration#timespan,eventThread#thread,inlinedBytes#memory,isOsr#boolean,method#method,startTime#timestamp,succeded#boolean\n+jdk.CompilationFailure,compileId#number,eventThread#thread,failureMessage#text,startTime#timestamp\n+jdk.CompilerConfiguration,startTime#timestamp,threadCount#number,tieredCompilation#boolean\n+jdk.CompilerInlining,bci#number,callee:descriptor#text,callee:name#text,callee:type#text,caller#method,compileId#number,eventThread#thread,message#text,startTime#timestamp,succeeded#boolean\n+jdk.CompilerPhase,compileId#number,duration#timespan,eventThread#thread,phase#text,phaseLevel#number,startTime#timestamp\n+jdk.CompilerStatistics,bailoutCount#number,compileCount#number,invalidatedCount#number,nmethodCodeSize#memory,nmethodsSize#memory,osrBytesCompiled#memory,osrCompileCount#number,peakTimeSpent#timespan,standardBytesCompiled#memory,standardCompileCount#number,startTime#timestamp,totalTimeSpent#timespan\n+jdk.ConcurrentModeFailure,gcId#number,startTime#timestamp\n+jdk.DataLoss,amount#memory,startTime#timestamp,total#memory\n+jdk.DoubleFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.DoubleFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.DumpReason,reason#text,recordingId#number,startTime#timestamp\n+jdk.EvacuationFailed,evacuationFailed:firstSize#memory,evacuationFailed:objectCount#number,evacuationFailed:smallestSize#memory,evacuationFailed:totalSize#memory,gcId#number,startTime#timestamp\n+jdk.EvacuationInformation,allocationRegions#number,allocationRegionsUsedAfter#memory,allocationRegionsUsedBefore#memory,bytesCopied#memory,cSetRegions#number,cSetUsedAfter#memory,cSetUsedBefore#memory,gcId#number,regionsFreed#number,startTime#timestamp\n+jdk.ExceptionStatistics,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,throwables#number\n+jdk.ExecuteVMOperation,blocking#boolean,caller#thread,duration#timespan,eventThread#thread,operation#text,safepoint#boolean,safepointId#number,startTime#timestamp\n+jdk.ExecutionSample,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,state#text\n+jdk.FileForce,duration#timespan,eventThread#thread,metaData#boolean,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.FileRead,bytesRead#memory,duration#timespan,endOfFile#boolean,eventThread#thread,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.FileWrite,bytesWritten#memory,duration#timespan,eventThread#thread,path#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.G1AdaptiveIHOP,additionalBufferSize#memory,currentOccupancy#memory,gcId#number,ihopTargetOccupancy#memory,predictedAllocationRate#frequency,predictedMarkingDuration#timespan,predictionActive#boolean,startTime#timestamp,threshold#memory,thresholdPercentage#percentage\n+jdk.G1BasicIHOP,currentOccupancy#memory,gcId#number,lastMarkingDuration#timespan,recentAllocationRate#frequency,recentMutatorAllocationSize#memory,recentMutatorDuration#timespan,startTime#timestamp,targetOccupancy#memory,threshold#memory,thresholdPercentage#percentage\n+jdk.G1EvacuationOldStatistics,startTime#timestamp,statistics:allocated#memory,statistics:directAllocated#memory,statistics:failureUsed#memory,statistics:failureWaste#memory,statistics:gcId#number,statistics:regionEndWaste#memory,statistics:regionsRefilled#memory,statistics:undoWaste#memory,statistics:used#memory,statistics:wasted#memory\n+jdk.G1EvacuationYoungStatistics,startTime#timestamp,statistics:allocated#memory,statistics:directAllocated#memory,statistics:failureUsed#memory,statistics:failureWaste#memory,statistics:gcId#number,statistics:regionEndWaste#memory,statistics:regionsRefilled#memory,statistics:undoWaste#memory,statistics:used#memory,statistics:wasted#memory\n+jdk.G1GarbageCollection,duration#timespan,gcId#number,startTime#timestamp,type#text\n+jdk.G1HeapRegionInformation,index#number,start#address,startTime#timestamp,type#text,used#memory\n+jdk.G1HeapRegionTypeChange,from#text,index#number,start#address,startTime#timestamp,to#text,used#memory\n+jdk.G1HeapSummary,edenTotalSize#memory,edenUsedSize#memory,gcId#number,numberOfRegions#number,startTime#timestamp,survivorUsedSize#memory,when#text\n+jdk.G1MMU,gcId#number,gcTime#timespan,pauseTarget#timespan,startTime#timestamp,timeSlice#timespan\n+jdk.GCConfiguration,concurrentGCThreads#number,gcTimeRatio#number,isExplicitGCConcurrent#boolean,isExplicitGCDisabled#boolean,oldCollector#text,parallelGCThreads#number,pauseTarget#timespan,startTime#timestamp,usesDynamicGCThreads#boolean,youngCollector#text\n+jdk.GCHeapConfiguration,compressedOopsMode#text,heapAddressBits#number,initialSize#memory,maxSize#memory,minSize#memory,objectAlignment#memory,startTime#timestamp,usesCompressedOops#boolean\n+jdk.GCHeapSummary,gcId#number,heapSpace:committedEnd#address,heapSpace:committedSize#memory,heapSpace:reservedEnd#address,heapSpace:reservedSize#memory,heapSpace:start#address,heapUsed#memory,startTime#timestamp,when#text\n+jdk.GCPhaseConcurrent,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePause,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel1,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel2,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel3,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCPhasePauseLevel4,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n+jdk.GCReferenceStatistics,count#number,gcId#number,startTime#timestamp,type#text\n+jdk.GCSurvivorConfiguration,initialTenuringThreshold#number,maxTenuringThreshold#number,startTime#timestamp\n+jdk.GCTLABConfiguration,minTLABSize#memory,startTime#timestamp,tlabRefillWasteLimit#memory,usesTLABs#boolean\n+jdk.GarbageCollection,cause#text,duration#timespan,gcId#number,longestPause#timespan,name#text,startTime#timestamp,sumOfPauses#timespan\n+jdk.InitialEnvironmentVariable,key#text,startTime#timestamp,value#text\n+jdk.InitialSystemProperty,key#text,startTime#timestamp,value#text\n+jdk.IntFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.IntFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.JVMInformation,javaArguments#text,jvmArguments#text,jvmFlags#text,jvmName#text,jvmStartTime#timestamp,jvmVersion#text,pid#number,startTime#timestamp\n+jdk.JavaErrorThrow,duration#timespan,eventThread#thread,message#text,stackTrace#stacktrace,startTime#timestamp,thrownClass#class\n+jdk.JavaExceptionThrow,duration#timespan,eventThread#thread,message#text,stackTrace#stacktrace,startTime#timestamp,thrownClass#class\n+jdk.JavaMonitorEnter,address#address,duration#timespan,eventThread#thread,monitorClass#class,previousOwner#thread,stackTrace#stacktrace,startTime#timestamp\n+jdk.JavaMonitorInflate,address#address,cause#text,duration#timespan,eventThread#thread,monitorClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.JavaMonitorWait,address#address,duration#timespan,eventThread#thread,monitorClass#class,notifier#thread,stackTrace#stacktrace,startTime#timestamp,timedOut#boolean,timeout#timespan\n+jdk.JavaThreadStatistics,accumulatedCount#number,activeCount#number,daemonCount#number,peakCount#number,startTime#timestamp\n+jdk.LongFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.LongFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.MetaspaceAllocationFailure,anonymousClassLoader#boolean,classLoader#classLoader,metadataType#text,metaspaceObjectType#text,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.MetaspaceChunkFreeListSummary,gcId#number,humongousChunks#number,humongousChunksTotalSize#memory,mediumChunks#number,mediumChunksTotalSize#memory,metadataType#text,smallChunks#number,smallChunksTotalSize#memory,specializedChunks#number,specializedChunksTotalSize#memory,startTime#timestamp,when#text\n+jdk.MetaspaceGCThreshold,newValue#memory,oldValue#memory,startTime#timestamp,updater#text\n+jdk.MetaspaceOOM,anonymousClassLoader#boolean,classLoader#classLoader,metadataType#text,metaspaceObjectType#text,size#memory,stackTrace#stacktrace,startTime#timestamp\n+jdk.MetaspaceSummary,classSpace:committed#memory,classSpace:reserved#memory,classSpace:used#memory,dataSpace:committed#memory,dataSpace:reserved#memory,dataSpace:used#memory,gcId#number,gcThreshold#memory,metaspace:committed#memory,metaspace:reserved#memory,metaspace:used#memory,startTime#timestamp,when#text\n+jdk.ModuleExport,exportedPackage#package,exportingModule#module,startTime#timestamp,targetModule#module\n+jdk.ModuleRequire,requiredModule#module,source#module,startTime#timestamp\n+jdk.NativeLibrary,baseAddress#address,name#text,startTime#timestamp,topAddress#address\n+jdk.NativeMethodSample,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,state#text\n+jdk.NetworkUtilization,networkInterface#text,readRate#frequency,startTime#timestamp,writeRate#frequency\n+jdk.OSInformation,osVersion#text,startTime#timestamp\n+jdk.ObjectAllocationInNewTLAB,allocationSize#memory,eventThread#thread,objectClass#class,stackTrace#stacktrace,startTime#timestamp,tlabSize#memory\n+jdk.ObjectAllocationOutsideTLAB,allocationSize#memory,eventThread#thread,objectClass#class,stackTrace#stacktrace,startTime#timestamp\n+jdk.ObjectCount,count#number,gcId#number,objectClass#class,startTime#timestamp,totalSize#memory\n+jdk.ObjectCountAfterGC,count#number,gcId#number,objectClass#class,startTime#timestamp,totalSize#memory\n+jdk.OldGarbageCollection,duration#timespan,gcId#number,startTime#timestamp\n+jdk.OldObjectSample,allocationTime#timestamp,arrayElements#number,duration#timespan,eventThread#thread,lastKnownHeapUsage#memory,object#oldObject,root#oldObjectGcRoot,stackTrace#stacktrace,startTime#timestamp\n+jdk.PSHeapSummary,edenSpace:end#address,edenSpace:size#memory,edenSpace:start#address,edenSpace:used#memory,fromSpace:end#address,fromSpace:size#memory,fromSpace:start#address,fromSpace:used#memory,gcId#number,oldObjectSpace:end#address,oldObjectSpace:size#memory,oldObjectSpace:start#address,oldObjectSpace:used#memory,oldSpace:committedEnd#address,oldSpace:committedSize#memory,oldSpace:reservedEnd#address,oldSpace:reservedSize#memory,oldSpace:start#address,startTime#timestamp,toSpace:end#address,toSpace:size#memory,toSpace:start#address,toSpace:used#memory,when#text,youngSpace:committedEnd#address,youngSpace:committedSize#memory,youngSpace:reservedEnd#address,youngSpace:reservedSize#memory,youngSpace:start#address\n+jdk.ParallelOldGarbageCollection,densePrefix#address,duration#timespan,gcId#number,startTime#timestamp\n+jdk.PhysicalMemory,startTime#timestamp,totalSize#memory,usedSize#memory\n+jdk.PromoteObjectInNewPLAB,eventThread#thread,gcId#number,objectClass#class,objectSize#memory,plabSize#memory,startTime#timestamp,tenured#boolean,tenuringAge#number\n+jdk.PromoteObjectOutsidePLAB,eventThread#thread,gcId#number,objectClass#class,objectSize#memory,startTime#timestamp,tenured#boolean,tenuringAge#number\n+jdk.PromotionFailed,gcId#number,promotionFailed:firstSize#memory,promotionFailed:objectCount#number,promotionFailed:smallestSize#memory,promotionFailed:totalSize#memory,startTime#timestamp,thread#thread\n+jdk.ReservedStackActivation,eventThread#thread,method#method,stackTrace#stacktrace,startTime#timestamp\n+jdk.SafepointBegin,duration#timespan,eventThread#thread,jniCriticalThreadCount#number,safepointId#number,startTime#timestamp,totalThreadCount#number\n+jdk.SafepointCleanup,duration#timespan,eventThread#thread,safepointId#number,startTime#timestamp\n+jdk.SafepointCleanupTask,duration#timespan,eventThread#thread,name#text,safepointId#number,startTime#timestamp\n+jdk.SafepointEnd,duration#timespan,eventThread#thread,safepointId#number,startTime#timestamp\n+jdk.SafepointStateSynchronization,duration#timespan,eventThread#thread,initialThreadCount#number,iterations#number,runningThreadCount#number,safepointId#number,startTime#timestamp\n+jdk.SafepointWaitBlocked,duration#timespan,eventThread#thread,runningThreadCount#number,safepointId#number,startTime#timestamp\n+jdk.SecurityPropertyModification,duration#timespan,eventThread#thread,key#text,stackTrace#stacktrace,startTime#timestamp,value#text\n+jdk.ShenandoahHeapRegionInformation,index#number,start#address,startTime#timestamp,state#text,used#memory\n+jdk.ShenandoahHeapRegionStateChange,from#text,index#number,start#address,startTime#timestamp,to#text,used#memory\n+jdk.Shutdown,eventThread#thread,reason#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.SocketRead,address#text,bytesRead#memory,duration#timespan,endOfStream#boolean,eventThread#thread,host#text,port#number,stackTrace#stacktrace,startTime#timestamp,timeout#timespan\n+jdk.SocketWrite,address#text,bytesWritten#memory,duration#timespan,eventThread#thread,host#text,port#number,stackTrace#stacktrace,startTime#timestamp\n+jdk.StringFlag,name#text,origin#text,startTime#timestamp,value#text\n+jdk.StringFlagChanged,name#text,newValue#text,oldValue#text,origin#text,startTime#timestamp\n+jdk.SweepCodeCache,duration#timespan,eventThread#thread,flushedCount#number,startTime#timestamp,sweepId#number,sweptCount#number,zombifiedCount#number\n+jdk.SystemProcess,commandLine#text,pid#text,startTime#timestamp\n+jdk.TLSHandshake,certificateId#number,cipherSuite#text,duration#timespan,eventThread#thread,peerHost#text,peerPort#number,protocolVersion#text,stackTrace#stacktrace,startTime#timestamp\n+jdk.TenuringDistribution,age#number,gcId#number,size#memory,startTime#timestamp\n+jdk.ThreadAllocationStatistics,allocated#memory,eventThread#thread,startTime#timestamp\n+jdk.ThreadCPULoad,eventThread#thread,startTime#timestamp,system#percentage,user#percentage\n+jdk.ThreadContextSwitchRate,startTime#timestamp,switchRate#frequency\n+jdk.ThreadDump,result#text,startTime#timestamp\n+jdk.ThreadEnd,eventThread#thread,startTime#timestamp,thread#thread\n+jdk.ThreadPark,address#address,duration#timespan,eventThread#thread,parkedClass#class,stackTrace#stacktrace,startTime#timestamp,timeout#timespan,until#timestamp\n+jdk.ThreadSleep,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,time#timespan\n+jdk.ThreadStart,eventThread#thread,startTime#timestamp,thread#thread\n+jdk.UnsignedIntFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.UnsignedIntFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.UnsignedLongFlag,name#text,origin#text,startTime#timestamp,value#number\n+jdk.UnsignedLongFlagChanged,name#text,newValue#number,oldValue#number,origin#text,startTime#timestamp\n+jdk.VirtualizationInformation,name#text,startTime#timestamp\n+jdk.X509Certificate,algorithm#text,certificateId#number,duration#timespan,eventThread#thread,issuer#text,keyLength#number,keyType#text,serialNumber#text,stackTrace#stacktrace,startTime#timestamp,subject#text,validFrom#timestamp,validUntil#timestamp\n+jdk.X509Validation,certificateId#number,certificatePosition#number,duration#timespan,eventThread#thread,stackTrace#stacktrace,startTime#timestamp,validationCounter#number\n+jdk.YoungGarbageCollection,duration#timespan,gcId#number,startTime#timestamp,tenuringThreshold#number\n+jdk.YoungGenerationConfiguration,maxSize#memory,minSize#memory,newRatio#number,startTime#timestamp\n+jdk.ZPageAllocation,duration#timespan,eventThread#thread,freeAfter#memory,inCacheAfter#memory,noReserve#boolean,nonBlocking#boolean,pageSize#memory,startTime#timestamp,usedAfter#memory\n+jdk.ZStatisticsCounter,duration#timespan,eventThread#thread,id#text,increment#number,startTime#timestamp,value#number\n+jdk.ZStatisticsSampler,duration#timespan,eventThread#thread,id#text,startTime#timestamp,value#number\n+jdk.ZThreadPhase,duration#timespan,eventThread#thread,gcId#number,name#text,startTime#timestamp\n","filename":"application\/uitests\/org.openjdk.jmc.flightrecorder.uitest\/src\/test\/resources\/jfr\/MetadataBaseline_11.txt","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -56,0 +56,11 @@\n+\t\/**\n+\t * Find out if the connection is of a specific JDK release or later\n+\t * \n+\t * @param connectionName\n+\t *            the name of the connection to test\n+\t * @return {@code true} if equal or later, otherwise {@code false}\n+\t *\/\n+\tpublic static boolean is11orLater(String connectionName) {\n+\t\treturn testVersion(connectionName, JavaVersionSupport.JDK_11);\n+\t}\n+\n","filename":"application\/uitests\/org.openjdk.jmc.test.jemmy\/src\/test\/java\/org\/openjdk\/jmc\/test\/jemmy\/misc\/helpers\/ConnectionHelper.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -143,1 +143,2 @@\n-\t\tDateFormat df = patchYear(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM));\n+\t\tDateFormat df = UnitLookup\n+\t\t\t\t.patchTimestamp(patchYear(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM)));\n@@ -335,1 +336,2 @@\n-\t\t\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM);\n+\t\t\tDateFormat df = UnitLookup\n+\t\t\t\t\t.patchTimestamp(DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM));\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/TimestampKind.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -516,1 +516,1 @@\n-\tprivate static DateFormat patchTimestamp(DateFormat df) {\n+\tstatic DateFormat patchTimestamp(DateFormat df) {\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/UnitLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,128 +3,128 @@\n-<report>\n-<file>allocation_10s_before.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Information<\/severity>\n-<summary>The most allocated type is likely ''java.lang.Integer'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Integer java.lang.Integer.valueOf(int)&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>Information<\/severity>\n-<summary>The most allocations were likely done by thread ''main'' at: &lt;ul&gt;&lt;li&gt;Integer java.lang.Integer.valueOf(int)&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by halts.<\/summary>\n-<explanation>The highest ratio of application halts to execution time was 0.192 % during 4\/26\/2018 12:10:29 PM – 12:11:29 PM. 28.1 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 1.16 %. 28.1 % of the total halts were for reasons other than GC.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>An average CPU load of 1 % was caused by other processes for during 4\/26\/2018 12:10:33 PM – 12:10:34 PM.<\/summary>\n-<explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>OK<\/severity>\n-<summary>The settings for Compressed Oops were OK.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the VM options.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no duplicate JVM flags on the command line.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated 0 exceptions per second during 4\/26\/2018 12:10:30 PM – 12:10:31 PM.<\/summary>\n-<explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Information<\/severity>\n-<summary>There are fewer sampled threads than the total number of hardware threads (cores).<\/summary>\n-<explanation>1 threads with at least 4 method samples were found, but the machine has 32 hardware threads (cores). The application might benefit from a higher level of parallelism. This could also be caused by threads doing something else than running Java code, for example running native code or spending time in the JVM internals.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file read events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file write events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No Stop-the-World, Full GC events detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>OK<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Information<\/severity>\n-<summary>The ratio between memory freed by garbage collections per second and liveset is 6,501 %. This may be excessive.<\/summary>\n-<explanation>242 MiB per second was freed by garbage collections during 4\/26\/2018 12:10:29 PM – 12:10:39 PM. The average liveset was 3.72 MiB. This may be excessive.\n+    <report>\n+        <file>allocation_10s_before.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The most allocated type is likely ''java.lang.Integer'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Integer java.lang.Integer.valueOf(int)&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The most allocations were likely done by thread ''main'' at: &lt;ul&gt;&lt;li&gt;Integer java.lang.Integer.valueOf(int)&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by halts.<\/summary>\n+            <explanation>The highest ratio of application halts to execution time was 0.192 % during 4\/26\/2018 12:10:29.000 PM – 12:11:29 PM. 28.1 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 1.16 %. 28.1 % of the total halts were for reasons other than GC.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>An average CPU load of 1 % was caused by other processes for during 4\/26\/2018 12:10:33.000 PM – 12:10:34 PM.<\/summary>\n+            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The settings for Compressed Oops were OK.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the VM options.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no duplicate JVM flags on the command line.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated 0 exceptions per second during 4\/26\/2018 12:10:30.000 PM – 12:10:31 PM.<\/summary>\n+            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Information<\/severity>\n+            <summary>There are fewer sampled threads than the total number of hardware threads (cores).<\/summary>\n+            <explanation>1 threads with at least 4 method samples were found, but the machine has 32 hardware threads (cores). The application might benefit from a higher level of parallelism. This could also be caused by threads doing something else than running Java code, for example running native code or spending time in the JVM internals.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file read events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file write events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Stop-the-World, Full GC events detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>OK<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The ratio between memory freed by garbage collections per second and liveset is 6,501 %. This may be excessive.<\/summary>\n+            <explanation>242 MiB per second was freed by garbage collections during 4\/26\/2018 12:10:29.000 PM – 12:10:39 PM. The average liveset was 3.72 MiB. This may be excessive.\n@@ -133,1728 +133,1728 @@\n-<\/rule>\n-<rule>\n-<id>GcLocker<\/id>\n-<severity>OK<\/severity>\n-<summary>No GCs were affected by the GC Locker.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the GC configuration.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n-<explanation>The highest ratio between garbage collection pauses and execution time was 0.138 % during 4\/26\/2018 12:10:29 PM – 12:11:29 PM. The garbage collection pause ratio of the entire recording was 0.836 %.<\/explanation>\n-<solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n-<\/rule>\n-<rule>\n-<id>GcStall<\/id>\n-<severity>OK<\/severity>\n-<summary>No indications that the garbage collector could not keep up with the workload were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapInspectionGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM did not perform any heap inspection GCs.<\/summary>\n-<explanation>This is good since they usually take a lot of time.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM was paused for 100 % during 4\/26\/2018 12:10:36.933 PM – .944<\/summary>\n-<explanation>The time spent performing garbage collection may be reduced by increasing the heap size or by trying to reduce allocation.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>OK<\/severity>\n-<summary>No memory leaks were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>OK<\/severity>\n-<summary>The class data does not seem to increase during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>OK<\/severity>\n-<summary>The longest GC pause was 11.003 ms.<\/summary>\n-<explanation\/>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>OK<\/severity>\n-<summary>The system did not run low on physical memory during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>OK<\/severity>\n-<summary>The metaspace was not exhausted during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SystemGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No garbage collections were caused by System.gc().<\/summary>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>No object allocations outside of TLABs detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 30.318 ms).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>allocation_10s_fixed.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocated type is likely ''java.util.HashMap$ValueIterator'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Iterator java.util.HashMap$Values.iterator()&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocations were likely done by thread ''main'' at: &lt;ul&gt;&lt;li&gt;Iterator java.util.HashMap$Values.iterator()&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by halts.<\/summary>\n-<explanation>The highest ratio of application halts to execution time was 0.0309 % during 4\/26\/2018 12:12:46 PM – 12:13:46 PM. 100 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0.187 %. 100 % of the total halts were for reasons other than GC.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>An average CPU load of 7 % was caused by other processes for during 4\/26\/2018 12:12:47 PM – 12:12:48 PM.<\/summary>\n-<explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>OK<\/severity>\n-<summary>The settings for Compressed Oops were OK.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the VM options.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no duplicate JVM flags on the command line.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated 0 exceptions per second during 4\/26\/2018 12:12:47 PM – 12:12:48 PM.<\/summary>\n-<explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Information<\/severity>\n-<summary>There are fewer sampled threads than the total number of hardware threads (cores).<\/summary>\n-<explanation>1 threads with at least 4 method samples were found, but the machine has 32 hardware threads (cores). The application might benefit from a higher level of parallelism. This could also be caused by threads doing something else than running Java code, for example running native code or spending time in the JVM internals.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file read events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file write events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No Stop-the-World, Full GC events detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Only 0 heap summary events were found, this rule requires at least 10 events to be able to calculate a relevant result. This likely means that only a few garbage collections occurred during the recording. Having few garbage collections is generally a good sign.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the GC configuration.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n-<explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/26\/2018 12:12:46 PM – 12:13:46 PM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n-<solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The runtime did not spend much time performing garbage collections.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>Too few events to calculate the result.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>OK<\/severity>\n-<summary>The class data does not seem to increase during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>OK<\/severity>\n-<summary>The application did not cause any long GC pause times.<\/summary>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>OK<\/severity>\n-<summary>The system did not run low on physical memory during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>OK<\/severity>\n-<summary>The metaspace was not exhausted during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>No object allocations outside of TLABs detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 17.957 ms).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>crash_jdk9.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by halts.<\/summary>\n-<explanation>The highest ratio of application halts to execution time was 0 % during 4\/24\/2018 10:16:27 AM – 10:17:27 AM. 0 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0 %. 0 % of the total halts were for reasons other than GC.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>OK<\/severity>\n-<summary>The settings for Compressed Oops were OK.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the VM options.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Warning<\/severity>\n-<summary>This recording was dumped for an exceptional reason.<\/summary>\n-<explanation>Recording was dumped due to a JVM crash. Some events are likely missing from the end of the recording.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no duplicate JVM flags on the command line.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file read events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file write events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No Stop-the-World, Full GC events detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the GC configuration.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n-<explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/24\/2018 10:16:27 AM – 10:17:27 AM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n-<solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The runtime did not spend much time performing garbage collections.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>Too few events to calculate the result.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>OK<\/severity>\n-<summary>The class data does not seem to increase during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>OK<\/severity>\n-<summary>The application did not cause any long GC pause times.<\/summary>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>Information<\/severity>\n-<summary>The maximum amount of used memory was 88.9 % of the physical memory available.<\/summary>\n-<explanation>The maximum amount of memory used was 28.4 GiB. This is 88.9 % of the 31.9 GiB of physical memory available. Having little free memory may lead to swapping, which is very expensive. To avoid this, either decrease the memory usage or increase the amount of available memory.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>OK<\/severity>\n-<summary>The metaspace was not exhausted during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 0 s).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>flight_recording_hidden.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocated type is likely ''byte[]'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt;(int)&lt;\/li&gt;&lt;li&gt;void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt;()&lt;\/li&gt;&lt;li&gt;void sun.management.jdp.JdpPacketWriter.&amp;lt;init&amp;gt;()&lt;\/li&gt;&lt;li&gt;byte[] sun.management.jdp.JdpJmxPacket.getPacketData()&lt;\/li&gt;&lt;li&gt;void sun.management.jdp.JdpBroadcaster.sendPacket(JdpPacket)&lt;\/li&gt;&lt;li&gt;void sun.management.jdp.JdpController$JDPControllerRunner.run()&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocations were likely done by thread ''AWT-EventQueue-0'' at: &lt;ul&gt;&lt;li&gt;void java.awt.EventQueue.dispatchEvent(AWTEvent)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpOneEventForFilters(int)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEvents(int, Conditional)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEvents(Conditional)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>Warning<\/severity>\n-<summary>An average CPU load of 60 % was caused by other processes for during 4\/25\/2018 11:38:36 AM – 11:38:44 AM.<\/summary>\n-<explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>OK<\/severity>\n-<summary>The program did not context switch excessively during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Information<\/severity>\n-<summary>DebugNonSafepoints was not enabled.<\/summary>\n-<explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n-<solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no duplicate JVM flags on the command line.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated 0 exceptions per second during 4\/25\/2018 11:38:36 AM – 11:38:37 AM.<\/summary>\n-<explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the GC configuration.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>Warning<\/severity>\n-<summary>The maximum amount of used memory was 99.8 % of the physical memory available.<\/summary>\n-<explanation>The maximum amount of memory used was 16 GiB. This is 99.8 % of the 16 GiB of physical memory available. Having little free memory may lead to swapping, which is very expensive. To avoid this, either decrease the memory usage or increase the amount of available memory.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the management agent settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the recording settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Warning<\/severity>\n-<summary>The environment variables in the recording may contain passwords.<\/summary>\n-<explanation>The following suspicious environment variables were found in this recording: &lt;ul&gt;&lt;li&gt;P4PASSWD&lt;\/li&gt;&lt;\/ul&gt;. The following regular expression was used to exclude strings from this rule: ''(passworld|passwise)''.<\/explanation>\n-<solution>If you wish to keep having passwords in your environment variables, but want to be able to share recordings without also sharing the passwords, please disable the ''Initial Environment Variable'' event.<\/solution>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>No object allocations outside of TLABs detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 67.887 ms).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>full_gc_cms.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>Warning<\/severity>\n-<summary>Full GC detected.<\/summary>\n-<explanation>At least one Full, Stop-The-World Garbage Collection occurred during this recording. For the CMS and G1 collectors, Full GC events are a strong negative performance indicator. Tunable GC parameters can be used to allow the collector to operate in concurrent mode, avoiding Stop-The-World pauses and increasing GC and application performance.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>OK<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcLocker<\/id>\n-<severity>OK<\/severity>\n-<summary>No GCs were affected by the GC Locker.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcStall<\/id>\n-<severity>Warning<\/severity>\n-<summary>The CMS garbage collector was used, but the JVM had to revert to do a Serial Old Collection.<\/summary>\n-<explanation>The application used the Concurrent Mark Sweep garbage collector, but the JVM had to revert to a Serial Old Collection, which takes more time. This is because the Concurrent Collector could not keep up with the object allocations that happened during the collection. You can decrease the risk of this by lowering the value of [-XX:CMSInitiatingOccupancyFraction](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/vm\/gctuning\/cms.html).<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapInspectionGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM did not perform any heap inspection GCs.<\/summary>\n-<explanation>This is good since they usually take a lot of time.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SystemGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No garbage collections were caused by System.gc().<\/summary>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>full_gc_g1.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>Warning<\/severity>\n-<summary>Full GC detected.<\/summary>\n-<explanation>At least one Full, Stop-The-World Garbage Collection occurred during this recording. For the CMS and G1 collectors, Full GC events are a strong negative performance indicator. Tunable GC parameters can be used to allow the collector to operate in concurrent mode, avoiding Stop-The-World pauses and increasing GC and application performance.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>OK<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcLocker<\/id>\n-<severity>OK<\/severity>\n-<summary>No GCs were affected by the GC Locker.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcStall<\/id>\n-<severity>Warning<\/severity>\n-<summary>There occurred Concurrent Mode failures during certain garbage collections.<\/summary>\n-<explanation>Concurrent Mode failures means that the Garbage Collector hasn't been able to keep up with the Java Program. Try lowering the value of [-XX:InitiatingHeapOccupancyPercent](http:\/\/www.oracle.com\/technetwork\/articles\/java\/vmoptions-jsp-140102.html).<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapInspectionGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM did not perform any heap inspection GCs.<\/summary>\n-<explanation>This is good since they usually take a lot of time.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SystemGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No garbage collections were caused by System.gc().<\/summary>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>jdk15.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>Warning<\/severity>\n-<summary>Full GC detected.<\/summary>\n-<explanation>At least one Full, Stop-The-World Garbage Collection occurred during this recording. For the CMS and G1 collectors, Full GC events are a strong negative performance indicator. Tunable GC parameters can be used to allow the collector to operate in concurrent mode, avoiding Stop-The-World pauses and increasing GC and application performance.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>OK<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcLocker<\/id>\n-<severity>OK<\/severity>\n-<summary>No GCs were affected by the GC Locker.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcStall<\/id>\n-<severity>Warning<\/severity>\n-<summary>There occurred Concurrent Mode failures during certain garbage collections.<\/summary>\n-<explanation>Concurrent Mode failures means that the Garbage Collector hasn't been able to keep up with the Java Program. Try lowering the value of [-XX:InitiatingHeapOccupancyPercent](http:\/\/www.oracle.com\/technetwork\/articles\/java\/vmoptions-jsp-140102.html).<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Information<\/severity>\n-<summary>2 heap dump(s) performed.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HeapInspectionGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM did not perform any heap inspection GCs.<\/summary>\n-<explanation>This is good since they usually take a lot of time.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Information<\/severity>\n-<summary>1 process(es) started.<\/summary>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SystemGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No garbage collections were caused by System.gc().<\/summary>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>parallel-gc_cpu.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocated type is likely ''java.util.ArrayList'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Collection oracle.jrockit.jfr.JFRImpl.getRecordings()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.MetaProducer.onNewChunk()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.JFRImpl.onNewChunk()&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocations were likely done by thread ''RMI TCP Connection(1)-127.0.0.1'' at: &lt;ul&gt;&lt;li&gt;void java.io.ObjectInputStream$BlockDataInputStream.&amp;lt;init&amp;gt;(ObjectInputStream, InputStream)&lt;\/li&gt;&lt;li&gt;void java.io.ObjectInputStream.&amp;lt;init&amp;gt;(InputStream)&lt;\/li&gt;&lt;li&gt;void sun.rmi.server.MarshalInputStream.&amp;lt;init&amp;gt;(InputStream)&lt;\/li&gt;&lt;li&gt;void sun.rmi.transport.ConnectionInputStream.&amp;lt;init&amp;gt;(InputStream)&lt;\/li&gt;&lt;li&gt;ObjectInput sun.rmi.transport.StreamRemoteCall.getInputStream()&lt;\/li&gt;&lt;li&gt;boolean sun.rmi.transport.Transport.serviceCall(RemoteCall)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by halts.<\/summary>\n-<explanation>The highest ratio of application halts to execution time was 0 % during 4\/4\/2014 11:17:05 AM – 11:18:05 AM. 0 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0 %. 0 % of the total halts were for reasons other than GC.\n+        <\/rule>\n+        <rule>\n+            <id>GcLocker<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No GCs were affected by the GC Locker.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the GC configuration.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n+            <explanation>The highest ratio between garbage collection pauses and execution time was 0.138 % during 4\/26\/2018 12:10:29.000 PM – 12:11:29 PM. The garbage collection pause ratio of the entire recording was 0.836 %.<\/explanation>\n+            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>GcStall<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No indications that the garbage collector could not keep up with the workload were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapInspectionGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM did not perform any heap inspection GCs.<\/summary>\n+            <explanation>This is good since they usually take a lot of time.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM was paused for 100 % during 4\/26\/2018 12:10:36.933.000 PM – .944<\/summary>\n+            <explanation>The time spent performing garbage collection may be reduced by increasing the heap size or by trying to reduce allocation.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No memory leaks were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The class data does not seem to increase during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The longest GC pause was 11.003 ms.<\/summary>\n+            <explanation\/>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The system did not run low on physical memory during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SystemGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No garbage collections were caused by System.gc().<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No object allocations outside of TLABs detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 30.318 ms).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>allocation_10s_fixed.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocated type is likely ''java.util.HashMap$ValueIterator'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Iterator java.util.HashMap$Values.iterator()&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocations were likely done by thread ''main'' at: &lt;ul&gt;&lt;li&gt;Iterator java.util.HashMap$Values.iterator()&lt;\/li&gt;&lt;li&gt;void Allocator.go()&lt;\/li&gt;&lt;li&gt;void Allocator.main(String[])&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by halts.<\/summary>\n+            <explanation>The highest ratio of application halts to execution time was 0.0309 % during 4\/26\/2018 12:12:46.000 PM – 12:13:46 PM. 100 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0.187 %. 100 % of the total halts were for reasons other than GC.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>An average CPU load of 7 % was caused by other processes for during 4\/26\/2018 12:12:47.000 PM – 12:12:48 PM.<\/summary>\n+            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The settings for Compressed Oops were OK.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the VM options.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no duplicate JVM flags on the command line.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated 0 exceptions per second during 4\/26\/2018 12:12:47.000 PM – 12:12:48 PM.<\/summary>\n+            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Information<\/severity>\n+            <summary>There are fewer sampled threads than the total number of hardware threads (cores).<\/summary>\n+            <explanation>1 threads with at least 4 method samples were found, but the machine has 32 hardware threads (cores). The application might benefit from a higher level of parallelism. This could also be caused by threads doing something else than running Java code, for example running native code or spending time in the JVM internals.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file read events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file write events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Stop-the-World, Full GC events detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Only 0 heap summary events were found, this rule requires at least 10 events to be able to calculate a relevant result. This likely means that only a few garbage collections occurred during the recording. Having few garbage collections is generally a good sign.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the GC configuration.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n+            <explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/26\/2018 12:12:46.000 PM – 12:13:46 PM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n+            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The runtime did not spend much time performing garbage collections.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>Too few events to calculate the result.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The class data does not seem to increase during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application did not cause any long GC pause times.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The system did not run low on physical memory during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No object allocations outside of TLABs detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 17.957 ms).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>crash_jdk9.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by halts.<\/summary>\n+            <explanation>The highest ratio of application halts to execution time was 0 % during 4\/24\/2018 10:16:27.000 AM – 10:17:27 AM. 0 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0 %. 0 % of the total halts were for reasons other than GC.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The settings for Compressed Oops were OK.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the VM options.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>This recording was dumped for an exceptional reason.<\/summary>\n+            <explanation>Recording was dumped due to a JVM crash. Some events are likely missing from the end of the recording.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no duplicate JVM flags on the command line.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file read events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file write events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Stop-the-World, Full GC events detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the GC configuration.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n+            <explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/24\/2018 10:16:27.000 AM – 10:17:27 AM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n+            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The runtime did not spend much time performing garbage collections.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>Too few events to calculate the result.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The class data does not seem to increase during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application did not cause any long GC pause times.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The maximum amount of used memory was 88.9 % of the physical memory available.<\/summary>\n+            <explanation>The maximum amount of memory used was 28.4 GiB. This is 88.9 % of the 31.9 GiB of physical memory available. Having little free memory may lead to swapping, which is very expensive. To avoid this, either decrease the memory usage or increase the amount of available memory.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 0 s).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>flight_recording_hidden.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocated type is likely ''byte[]'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt;(int)&lt;\/li&gt;&lt;li&gt;void java.io.ByteArrayOutputStream.&amp;lt;init&amp;gt;()&lt;\/li&gt;&lt;li&gt;void sun.management.jdp.JdpPacketWriter.&amp;lt;init&amp;gt;()&lt;\/li&gt;&lt;li&gt;byte[] sun.management.jdp.JdpJmxPacket.getPacketData()&lt;\/li&gt;&lt;li&gt;void sun.management.jdp.JdpBroadcaster.sendPacket(JdpPacket)&lt;\/li&gt;&lt;li&gt;void sun.management.jdp.JdpController$JDPControllerRunner.run()&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocations were likely done by thread ''AWT-EventQueue-0'' at: &lt;ul&gt;&lt;li&gt;void java.awt.EventQueue.dispatchEvent(AWTEvent)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpOneEventForFilters(int)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEvents(int, Conditional)&lt;\/li&gt;&lt;li&gt;void java.awt.EventDispatchThread.pumpEvents(Conditional)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>An average CPU load of 60 % was caused by other processes for during 4\/25\/2018 11:38:36.000 AM – 11:38:44 AM.<\/summary>\n+            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program did not context switch excessively during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Information<\/severity>\n+            <summary>DebugNonSafepoints was not enabled.<\/summary>\n+            <explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n+            <solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no duplicate JVM flags on the command line.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated 0 exceptions per second during 4\/25\/2018 11:38:36.000 AM – 11:38:37 AM.<\/summary>\n+            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the GC configuration.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>The maximum amount of used memory was 99.8 % of the physical memory available.<\/summary>\n+            <explanation>The maximum amount of memory used was 16 GiB. This is 99.8 % of the 16 GiB of physical memory available. Having little free memory may lead to swapping, which is very expensive. To avoid this, either decrease the memory usage or increase the amount of available memory.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the management agent settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the recording settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>The environment variables in the recording may contain passwords.<\/summary>\n+            <explanation>The following suspicious environment variables were found in this recording: &lt;ul&gt;&lt;li&gt;P4PASSWD&lt;\/li&gt;&lt;\/ul&gt;. The following regular expression was used to exclude strings from this rule: ''(passworld|passwise)''.<\/explanation>\n+            <solution>If you wish to keep having passwords in your environment variables, but want to be able to share recordings without also sharing the passwords, please disable the ''Initial Environment Variable'' event.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No object allocations outside of TLABs detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 67.887 ms).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>full_gc_cms.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>Full GC detected.<\/summary>\n+            <explanation>At least one Full, Stop-The-World Garbage Collection occurred during this recording. For the CMS and G1 collectors, Full GC events are a strong negative performance indicator. Tunable GC parameters can be used to allow the collector to operate in concurrent mode, avoiding Stop-The-World pauses and increasing GC and application performance.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>OK<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcLocker<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No GCs were affected by the GC Locker.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcStall<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>The CMS garbage collector was used, but the JVM had to revert to do a Serial Old Collection.<\/summary>\n+            <explanation>The application used the Concurrent Mark Sweep garbage collector, but the JVM had to revert to a Serial Old Collection, which takes more time. This is because the Concurrent Collector could not keep up with the object allocations that happened during the collection. You can decrease the risk of this by lowering the value of [-XX:CMSInitiatingOccupancyFraction](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/vm\/gctuning\/cms.html).<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapInspectionGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM did not perform any heap inspection GCs.<\/summary>\n+            <explanation>This is good since they usually take a lot of time.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SystemGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No garbage collections were caused by System.gc().<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>full_gc_g1.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>Full GC detected.<\/summary>\n+            <explanation>At least one Full, Stop-The-World Garbage Collection occurred during this recording. For the CMS and G1 collectors, Full GC events are a strong negative performance indicator. Tunable GC parameters can be used to allow the collector to operate in concurrent mode, avoiding Stop-The-World pauses and increasing GC and application performance.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>OK<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcLocker<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No GCs were affected by the GC Locker.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcStall<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>There occurred Concurrent Mode failures during certain garbage collections.<\/summary>\n+            <explanation>Concurrent Mode failures means that the Garbage Collector hasn't been able to keep up with the Java Program. Try lowering the value of [-XX:InitiatingHeapOccupancyPercent](http:\/\/www.oracle.com\/technetwork\/articles\/java\/vmoptions-jsp-140102.html).<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapInspectionGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM did not perform any heap inspection GCs.<\/summary>\n+            <explanation>This is good since they usually take a lot of time.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SystemGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No garbage collections were caused by System.gc().<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>jdk15.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>Full GC detected.<\/summary>\n+            <explanation>At least one Full, Stop-The-World Garbage Collection occurred during this recording. For the CMS and G1 collectors, Full GC events are a strong negative performance indicator. Tunable GC parameters can be used to allow the collector to operate in concurrent mode, avoiding Stop-The-World pauses and increasing GC and application performance.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>OK<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcLocker<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No GCs were affected by the GC Locker.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcStall<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>There occurred Concurrent Mode failures during certain garbage collections.<\/summary>\n+            <explanation>Concurrent Mode failures means that the Garbage Collector hasn't been able to keep up with the Java Program. Try lowering the value of [-XX:InitiatingHeapOccupancyPercent](http:\/\/www.oracle.com\/technetwork\/articles\/java\/vmoptions-jsp-140102.html).<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Information<\/severity>\n+            <summary>2 heap dump(s) performed.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HeapInspectionGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM did not perform any heap inspection GCs.<\/summary>\n+            <explanation>This is good since they usually take a lot of time.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Information<\/severity>\n+            <summary>1 process(es) started.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SystemGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No garbage collections were caused by System.gc().<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>parallel-gc_cpu.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocated type is likely ''java.util.ArrayList'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Collection oracle.jrockit.jfr.JFRImpl.getRecordings()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.MetaProducer.onNewChunk()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.JFRImpl.onNewChunk()&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocations were likely done by thread ''RMI TCP Connection(1)-127.0.0.1'' at: &lt;ul&gt;&lt;li&gt;void java.io.ObjectInputStream$BlockDataInputStream.&amp;lt;init&amp;gt;(ObjectInputStream, InputStream)&lt;\/li&gt;&lt;li&gt;void java.io.ObjectInputStream.&amp;lt;init&amp;gt;(InputStream)&lt;\/li&gt;&lt;li&gt;void sun.rmi.server.MarshalInputStream.&amp;lt;init&amp;gt;(InputStream)&lt;\/li&gt;&lt;li&gt;void sun.rmi.transport.ConnectionInputStream.&amp;lt;init&amp;gt;(InputStream)&lt;\/li&gt;&lt;li&gt;ObjectInput sun.rmi.transport.StreamRemoteCall.getInputStream()&lt;\/li&gt;&lt;li&gt;boolean sun.rmi.transport.Transport.serviceCall(RemoteCall)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by halts.<\/summary>\n+            <explanation>The highest ratio of application halts to execution time was 0 % during 4\/4\/2014 11:17:05.000 AM – 11:18:05 AM. 0 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0 %. 0 % of the total halts were for reasons other than GC.\n@@ -1862,283 +1862,283 @@\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>An average CPU load of 0 % was caused by other processes for during 4\/4\/2014 11:17:07 AM – 11:17:08 AM.<\/summary>\n-<explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>OK<\/severity>\n-<summary>The settings for Compressed Oops were OK.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Information<\/severity>\n-<summary>DebugNonSafepoints was not enabled.<\/summary>\n-<explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n-<solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the VM options.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no duplicate JVM flags on the command line.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated 0 exceptions per second during 4\/4\/2014 11:17:06.152 AM – 11:17:07.152 AM.<\/summary>\n-<explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no problems with the amount of sampled threads.<\/summary>\n-<explanation>There are more sampled threads than the amount of hardware threads. This indicates that the application has enough parallelism for the available hardware.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file read events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file write events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>Warning<\/severity>\n-<summary>The recording is from an early access build.<\/summary>\n-<explanation>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by &amp;#34;java_re&amp;#34; with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No Stop-the-World, Full GC events detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Only 0 heap summary events were found, this rule requires at least 10 events to be able to calculate a relevant result. This likely means that only a few garbage collections occurred during the recording. Having few garbage collections is generally a good sign.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>Information<\/severity>\n-<summary>The runtime used 2 GC threads on a machine with 1 CPU cores.<\/summary>\n-<explanation>It's suboptimal to use more GC threads than available cores. Removing the '-XX:ParallelGCThreads' flag will allow the JVM to set the number of GC threads automatically.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n-<explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/4\/2014 11:17:05 AM – 11:18:05 AM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n-<solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The runtime did not spend much time performing garbage collections.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>Information<\/severity>\n-<summary>This recording contains few profiling samples even though the CPU load is high.<\/summary>\n-<explanation>The profiling data is thus likely not relevant. This might be because the application is running a lot JNI code or that the JVM is spending a lot of time in GC, class loading, JIT compilation etc.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>Too few events to calculate the result.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>OK<\/severity>\n-<summary>The class data does not seem to increase during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>OK<\/severity>\n-<summary>The application did not cause any long GC pause times.<\/summary>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>OK<\/severity>\n-<summary>The system did not run low on physical memory during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the management agent settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>OK<\/severity>\n-<summary>137 processes were running while this Flight Recording was made.<\/summary>\n-<explanation>At 4\/4\/14 11:17:10.326 AM, a total of 137 other processes were running on the host machine that this Flight Recording was made on.<\/explanation>\n-<solution>If this is a server environment, it may be good to only run other critical processes on that machine.<\/solution>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the recording settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the environment variables.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>OK<\/severity>\n-<summary>SocketReadRuleFactory_TEXT_NO_EVENTS<\/summary>\n-<explanation>Note that there are some socket read patterns with high duration reads that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication and MQ series.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no socket write events in this recording.<\/summary>\n-<explanation>Note that there are some socket write patterns with high duration writes that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>No object allocations outside of TLABs detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 0 s).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>parallel-on-singlecpu.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocated type is likely ''java.lang.Object[]'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Object[] java.util.AbstractCollection.toArray()&lt;\/li&gt;&lt;li&gt;void java.util.ArrayList.&amp;lt;init&amp;gt;(Collection)&lt;\/li&gt;&lt;li&gt;Collection oracle.jrockit.jfr.JFRImpl.getRecordings()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.MetaProducer.onNewChunk()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.JFRImpl.onNewChunk()&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocations were likely done by thread ''RMI TCP Connection(1)-127.0.0.1'' at: &lt;ul&gt;&lt;li&gt;Throwable java.lang.Throwable.fillInStackTrace(int)&lt;\/li&gt;&lt;li&gt;Throwable java.lang.Throwable.fillInStackTrace()&lt;\/li&gt;&lt;li&gt;void java.lang.Throwable.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;li&gt;void java.lang.Exception.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;li&gt;void java.lang.ReflectiveOperationException.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;li&gt;void java.lang.NoSuchFieldException.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by halts.<\/summary>\n-<explanation>The highest ratio of application halts to execution time was 0 % during 4\/4\/2014 8:54:33 AM – 8:55:33 AM. 0 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0 %. 0 % of the total halts were for reasons other than GC.\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>An average CPU load of 0 % was caused by other processes for during 4\/4\/2014 11:17:07.000 AM – 11:17:08 AM.<\/summary>\n+            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The settings for Compressed Oops were OK.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Information<\/severity>\n+            <summary>DebugNonSafepoints was not enabled.<\/summary>\n+            <explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n+            <solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the VM options.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no duplicate JVM flags on the command line.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated 0 exceptions per second during 4\/4\/2014 11:17:06.152.000 AM – 11:17:07.152 AM.<\/summary>\n+            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no problems with the amount of sampled threads.<\/summary>\n+            <explanation>There are more sampled threads than the amount of hardware threads. This indicates that the application has enough parallelism for the available hardware.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file read events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file write events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>The recording is from an early access build.<\/summary>\n+            <explanation>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by &amp;#34;java_re&amp;#34; with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Stop-the-World, Full GC events detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Only 0 heap summary events were found, this rule requires at least 10 events to be able to calculate a relevant result. This likely means that only a few garbage collections occurred during the recording. Having few garbage collections is generally a good sign.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The runtime used 2 GC threads on a machine with 1 CPU cores.<\/summary>\n+            <explanation>It's suboptimal to use more GC threads than available cores. Removing the '-XX:ParallelGCThreads' flag will allow the JVM to set the number of GC threads automatically.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n+            <explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/4\/2014 11:17:05.000 AM – 11:18:05 AM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n+            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The runtime did not spend much time performing garbage collections.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Information<\/severity>\n+            <summary>This recording contains few profiling samples even though the CPU load is high.<\/summary>\n+            <explanation>The profiling data is thus likely not relevant. This might be because the application is running a lot JNI code or that the JVM is spending a lot of time in GC, class loading, JIT compilation etc.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>Too few events to calculate the result.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The class data does not seem to increase during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application did not cause any long GC pause times.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The system did not run low on physical memory during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the management agent settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>OK<\/severity>\n+            <summary>137 processes were running while this Flight Recording was made.<\/summary>\n+            <explanation>At 4\/4\/14 11:17:10.326 AM, a total of 137 other processes were running on the host machine that this Flight Recording was made on.<\/explanation>\n+            <solution>If this is a server environment, it may be good to only run other critical processes on that machine.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the recording settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the environment variables.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>SocketReadRuleFactory_TEXT_NO_EVENTS<\/summary>\n+            <explanation>Note that there are some socket read patterns with high duration reads that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication and MQ series.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no socket write events in this recording.<\/summary>\n+            <explanation>Note that there are some socket write patterns with high duration writes that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No object allocations outside of TLABs detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 0 s).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>parallel-on-singlecpu.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocated type is likely ''java.lang.Object[]'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;Object[] java.util.AbstractCollection.toArray()&lt;\/li&gt;&lt;li&gt;void java.util.ArrayList.&amp;lt;init&amp;gt;(Collection)&lt;\/li&gt;&lt;li&gt;Collection oracle.jrockit.jfr.JFRImpl.getRecordings()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.MetaProducer.onNewChunk()&lt;\/li&gt;&lt;li&gt;void oracle.jrockit.jfr.JFRImpl.onNewChunk()&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocations were likely done by thread ''RMI TCP Connection(1)-127.0.0.1'' at: &lt;ul&gt;&lt;li&gt;Throwable java.lang.Throwable.fillInStackTrace(int)&lt;\/li&gt;&lt;li&gt;Throwable java.lang.Throwable.fillInStackTrace()&lt;\/li&gt;&lt;li&gt;void java.lang.Throwable.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;li&gt;void java.lang.Exception.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;li&gt;void java.lang.ReflectiveOperationException.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;li&gt;void java.lang.NoSuchFieldException.&amp;lt;init&amp;gt;(String)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by halts.<\/summary>\n+            <explanation>The highest ratio of application halts to execution time was 0 % during 4\/4\/2014 8:54:33.000 AM – 8:55:33 AM. 0 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 0 %. 0 % of the total halts were for reasons other than GC.\n@@ -2146,427 +2146,427 @@\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>An average CPU load of 0 % was caused by other processes for during 4\/4\/2014 8:54:36 AM – 8:54:37 AM.<\/summary>\n-<explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>OK<\/severity>\n-<summary>The settings for Compressed Oops were OK.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>OK<\/severity>\n-<summary>The program did not context switch excessively during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Information<\/severity>\n-<summary>DebugNonSafepoints was not enabled.<\/summary>\n-<explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n-<solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the VM options.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no duplicate JVM flags on the command line.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated 0 exceptions per second during 4\/4\/2014 8:54:34 AM – 8:54:35 AM.<\/summary>\n-<explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no problems with the amount of sampled threads.<\/summary>\n-<explanation>There are more sampled threads than the amount of hardware threads. This indicates that the application has enough parallelism for the available hardware.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file read events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file write events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>Warning<\/severity>\n-<summary>The recording is from an early access build.<\/summary>\n-<explanation>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by &amp;#34;java_re&amp;#34; with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Only 0 heap summary events were found, this rule requires at least 10 events to be able to calculate a relevant result. This likely means that only a few garbage collections occurred during the recording. Having few garbage collections is generally a good sign.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>Information<\/severity>\n-<summary>The runtime used a parallel GC on a single-core machine.<\/summary>\n-<explanation>The runtime used a parallel GC on a single-core machine. This is not optimal. Use the [Serial Collector](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/vm\/gctuning\/collectors.html) instead, which is optimized for single-core machines.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n-<explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/4\/2014 8:54:33 AM – 8:55:33 AM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n-<solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The runtime did not spend much time performing garbage collections.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>Information<\/severity>\n-<summary>This recording contains few profiling samples even though the CPU load is high.<\/summary>\n-<explanation>The profiling data is thus likely not relevant. This might be because the application is running a lot JNI code or that the JVM is spending a lot of time in GC, class loading, JIT compilation etc.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>Too few events to calculate the result.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>OK<\/severity>\n-<summary>The class data does not seem to increase during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>OK<\/severity>\n-<summary>The application did not cause any long GC pause times.<\/summary>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>OK<\/severity>\n-<summary>The system did not run low on physical memory during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the management agent settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>OK<\/severity>\n-<summary>137 processes were running while this Flight Recording was made.<\/summary>\n-<explanation>At 4\/4\/14 8:54:38.623 AM, a total of 137 other processes were running on the host machine that this Flight Recording was made on.<\/explanation>\n-<solution>If this is a server environment, it may be good to only run other critical processes on that machine.<\/solution>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the recording settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the environment variables.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>OK<\/severity>\n-<summary>SocketReadRuleFactory_TEXT_NO_EVENTS<\/summary>\n-<explanation>Note that there are some socket read patterns with high duration reads that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication and MQ series.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>No object allocations outside of TLABs detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 0 s).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>stringdedup_enabled_jdk9.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by halts.<\/summary>\n-<explanation>The highest ratio of application halts to execution time was 0.0819 % during 4\/24\/2018 10:08:52 AM – 10:09:52 AM. 51.6 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 1 %. 51.6 % of the total halts were for reasons other than GC.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>An average CPU load of 15 % was caused by other processes for during 4\/24\/2018 10:08:54 AM – 10:08:55 AM.<\/summary>\n-<explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>OK<\/severity>\n-<summary>The settings for Compressed Oops were OK.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the VM options.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no duplicate JVM flags on the command line.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated 0 exceptions per second during 4\/24\/2018 10:08:53 AM – 10:08:54 AM.<\/summary>\n-<explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Information<\/severity>\n-<summary>There are fewer sampled threads than the total number of hardware threads (cores).<\/summary>\n-<explanation>1 threads with at least 4 method samples were found, but the machine has 32 hardware threads (cores). The application might benefit from a higher level of parallelism. This could also be caused by threads doing something else than running Java code, for example running native code or spending time in the JVM internals.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file read events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>There are no file write events in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No Stop-the-World, Full GC events detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>OK<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcLocker<\/id>\n-<severity>OK<\/severity>\n-<summary>No GCs were affected by the GC Locker.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the GC configuration.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n-<explanation>The highest ratio between garbage collection pauses and execution time was 0.0397 % during 4\/24\/2018 10:08:52 AM – 10:09:52 AM. The garbage collection pause ratio of the entire recording was 0.486 %.<\/explanation>\n-<solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n-<\/rule>\n-<rule>\n-<id>GcStall<\/id>\n-<severity>OK<\/severity>\n-<summary>No indications that the garbage collector could not keep up with the workload were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapInspectionGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM did not perform any heap inspection GCs.<\/summary>\n-<explanation>This is good since they usually take a lot of time.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM was paused for 100 % during 4\/24\/2018 10:08:53.973 AM – .982<\/summary>\n-<explanation>The time spent performing garbage collection may be reduced by increasing the heap size or by trying to reduce allocation.\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>An average CPU load of 0 % was caused by other processes for during 4\/4\/2014 8:54:36.000 AM – 8:54:37 AM.<\/summary>\n+            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The settings for Compressed Oops were OK.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program did not context switch excessively during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Information<\/severity>\n+            <summary>DebugNonSafepoints was not enabled.<\/summary>\n+            <explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n+            <solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the VM options.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no duplicate JVM flags on the command line.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated 0 exceptions per second during 4\/4\/2014 8:54:34.000 AM – 8:54:35 AM.<\/summary>\n+            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no problems with the amount of sampled threads.<\/summary>\n+            <explanation>There are more sampled threads than the amount of hardware threads. This indicates that the application has enough parallelism for the available hardware.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file read events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file write events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>The recording is from an early access build.<\/summary>\n+            <explanation>This recording is from an early access build of the JRE (Java HotSpot(TM) Client VM (25.20-b08) for linux-x86 JRE (1.8.0_20-ea-b08), built on Apr  1 2014 19:40:24 by &amp;#34;java_re&amp;#34; with gcc 4.3.0 20080428 (Red Hat 4.3.0-8)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Only 0 heap summary events were found, this rule requires at least 10 events to be able to calculate a relevant result. This likely means that only a few garbage collections occurred during the recording. Having few garbage collections is generally a good sign.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The runtime used a parallel GC on a single-core machine.<\/summary>\n+            <explanation>The runtime used a parallel GC on a single-core machine. This is not optimal. Use the [Serial Collector](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/vm\/gctuning\/collectors.html) instead, which is optimized for single-core machines.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n+            <explanation>The highest ratio between garbage collection pauses and execution time was 0 % during 4\/4\/2014 8:54:33.000 AM – 8:55:33 AM. The garbage collection pause ratio of the entire recording was 0 %.<\/explanation>\n+            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The runtime did not spend much time performing garbage collections.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Information<\/severity>\n+            <summary>This recording contains few profiling samples even though the CPU load is high.<\/summary>\n+            <explanation>The profiling data is thus likely not relevant. This might be because the application is running a lot JNI code or that the JVM is spending a lot of time in GC, class loading, JIT compilation etc.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>Too few events to calculate the result.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The class data does not seem to increase during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application did not cause any long GC pause times.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The system did not run low on physical memory during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the management agent settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>OK<\/severity>\n+            <summary>137 processes were running while this Flight Recording was made.<\/summary>\n+            <explanation>At 4\/4\/14 8:54:38.623 AM, a total of 137 other processes were running on the host machine that this Flight Recording was made on.<\/explanation>\n+            <solution>If this is a server environment, it may be good to only run other critical processes on that machine.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the recording settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the environment variables.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>SocketReadRuleFactory_TEXT_NO_EVENTS<\/summary>\n+            <explanation>Note that there are some socket read patterns with high duration reads that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication and MQ series.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No object allocations outside of TLABs detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 0 s).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>stringdedup_enabled_jdk9.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by halts.<\/summary>\n+            <explanation>The highest ratio of application halts to execution time was 0.0819 % during 4\/24\/2018 10:08:52.000 AM – 10:09:52 AM. 51.6 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 1 %. 51.6 % of the total halts were for reasons other than GC.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>An average CPU load of 15 % was caused by other processes for during 4\/24\/2018 10:08:54.000 AM – 10:08:55 AM.<\/summary>\n+            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The settings for Compressed Oops were OK.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the VM options.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no duplicate JVM flags on the command line.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated 0 exceptions per second during 4\/24\/2018 10:08:53.000 AM – 10:08:54 AM.<\/summary>\n+            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Information<\/severity>\n+            <summary>There are fewer sampled threads than the total number of hardware threads (cores).<\/summary>\n+            <explanation>1 threads with at least 4 method samples were found, but the machine has 32 hardware threads (cores). The application might benefit from a higher level of parallelism. This could also be caused by threads doing something else than running Java code, for example running native code or spending time in the JVM internals.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file read events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There are no file write events in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Stop-the-World, Full GC events detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>OK<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcLocker<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No GCs were affected by the GC Locker.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the GC configuration.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n+            <explanation>The highest ratio between garbage collection pauses and execution time was 0.0397 % during 4\/24\/2018 10:08:52.000 AM – 10:09:52 AM. The garbage collection pause ratio of the entire recording was 0.486 %.<\/explanation>\n+            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>GcStall<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No indications that the garbage collector could not keep up with the workload were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapInspectionGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM did not perform any heap inspection GCs.<\/summary>\n+            <explanation>This is good since they usually take a lot of time.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM was paused for 100 % during 4\/24\/2018 10:08:53.973.000 AM – .982<\/summary>\n+            <explanation>The time spent performing garbage collection may be reduced by increasing the heap size or by trying to reduce allocation.\n@@ -2574,140 +2574,140 @@\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>Too few events to calculate the result.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>OK<\/severity>\n-<summary>The class data does not seem to increase during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>OK<\/severity>\n-<summary>The longest GC pause was 9.017 ms.<\/summary>\n-<explanation\/>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>Information<\/severity>\n-<summary>The maximum amount of used memory was 91.8 % of the physical memory available.<\/summary>\n-<explanation>The maximum amount of memory used was 29.3 GiB. This is 91.8 % of the 31.9 GiB of physical memory available. Having little free memory may lead to swapping, which is very expensive. To avoid this, either decrease the memory usage or increase the amount of available memory.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>OK<\/severity>\n-<summary>The metaspace was not exhausted during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No stack traces were truncated in this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SystemGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No garbage collections were caused by System.gc().<\/summary>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 25.346 ms).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>wldf.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Information<\/severity>\n-<summary>The most allocated type is likely ''char[]'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;char[] java.util.Arrays.copyOfRange(char[], int, int)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>OK<\/severity>\n-<summary>The most allocations were likely done by thread ''[ACTIVE] ExecuteThread: &amp;#39;5&amp;#39; for queue: &amp;#39;weblogic.kernel.Default (self-tuning)&amp;#39;'' at: &lt;ul&gt;&lt;li&gt;char[] java.util.Arrays.copyOfRange(char[], int, int)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n-<explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by halts.<\/summary>\n-<explanation>The highest ratio of application halts to execution time was 2.22 % during 9\/24\/2015 10:08:56 AM – 10:09:56 AM. 0.0271 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 1.88 %. 0.0212 % of the total halts were for reasons other than GC.\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>Too few events to calculate the result.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The class data does not seem to increase during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The longest GC pause was 9.017 ms.<\/summary>\n+            <explanation\/>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The maximum amount of used memory was 91.8 % of the physical memory available.<\/summary>\n+            <explanation>The maximum amount of memory used was 29.3 GiB. This is 91.8 % of the 31.9 GiB of physical memory available. Having little free memory may lead to swapping, which is very expensive. To avoid this, either decrease the memory usage or increase the amount of available memory.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No stack traces were truncated in this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SystemGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No garbage collections were caused by System.gc().<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 25.346 ms).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>wldf.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The most allocated type is likely ''char[]'', most commonly allocated by: &lt;ul&gt;&lt;li&gt;char[] java.util.Arrays.copyOfRange(char[], int, int)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Frequently allocated types are good places to start when trying to reduce garbage collections. Look at where the most common types are being allocated to see if many instances are created along the same call path. Try to reduce the number of instances created by invoking the most commonly taken paths less.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The most allocations were likely done by thread ''[ACTIVE] ExecuteThread: &amp;#39;5&amp;#39; for queue: &amp;#39;weblogic.kernel.Default (self-tuning)&amp;#39;'' at: &lt;ul&gt;&lt;li&gt;char[] java.util.Arrays.copyOfRange(char[], int, int)&lt;\/li&gt;&lt;\/ul&gt;<\/summary>\n+            <explanation>Many allocations performed by the same thread might indicate a problem in a multi-threaded program. Look at the stack traces for the thread with the highest allocation rate. See if the allocation rate can be brought down, or balanced among the active threads.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by halts.<\/summary>\n+            <explanation>The highest ratio of application halts to execution time was 2.22 % during 9\/24\/2015 10:08:56.000 AM – 10:09:56 AM. 0.0271 % of the halts were for reasons other than GC. The halts ratio for the entire recording was 1.88 %. 0.0212 % of the total halts were for reasons other than GC.\n@@ -2715,159 +2715,159 @@\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran WebLogic Server with bytecode verification disabled.<\/summary>\n-<explanation>The application ran WebLogic Server with bytecode verification disabled. While not generally recommended, it is considered OK for WLS.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>OK<\/severity>\n-<summary>com.oracle.medrec.model.User was loaded -1 time(s) without being unloaded<\/summary>\n-<explanation>Some classes have been loaded multiple times, and the difference between the number of times a class have been loaded and the number of times it has been unloaded has exceeded the user specified limit. This in itself need not be a problem, but check to see if you expect these classes to be loaded multiple times to make sure that you do not have a class loader leak. The following classes were detected as potential problems: &lt;ul&gt;&lt;li&gt;com.oracle.medrec.model.User (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.service.PatientService (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.service.PhysicianService (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.facade.PatientFacade (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.common.messaging.MessageClient (-1)&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>OK<\/severity>\n-<summary>No significant time was spent loading new classes during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>Warning<\/severity>\n-<summary>An average CPU load of 54 % was caused by other processes for during 9\/24\/2015 10:08:17 AM – 10:08:22 AM.<\/summary>\n-<explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>OK<\/severity>\n-<summary>The settings for Compressed Oops were OK.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>OK<\/severity>\n-<summary>The program did not context switch excessively during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Information<\/severity>\n-<summary>DebugNonSafepoints was not enabled.<\/summary>\n-<explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n-<solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the VM options.<\/summary>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>Information<\/severity>\n-<summary>2 duplicated JVM flags found.<\/summary>\n-<explanation>Duplicated JVM flags may be caused by multiple layers of scripts used when launching the application. Having duplicate flags is dangerous as changing one of the flags in one of the scripts may not have the intended effect. This can be especially dangerous for security related system properties. The following flags were duplicated: &lt;ul&gt;&lt;li&gt;-Djava.endorsed.dirs=c:\\java\\JDK18~1.0_6\\jre\\lib\\endorsed;C:\\tmp\\WLS-JFR\\oracle_common\\modules\\endorsed,-Djava.endorsed.dirs=c:\\java\\JDK18~1.0_6\\jre\\lib\\endorsed;C:\\tmp\\WLS-JFR\\oracle_common\\modules\\endorsed&lt;\/li&gt;&lt;li&gt;-Xverify:none,-Xverify:none&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n-<solution>Try to find all the places where the flag is defined and keep only one.<\/solution>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated an average of 17 errors per minute during 9\/24\/2015 10:08:14 AM – 10:09:14 AM.<\/summary>\n-<explanation>17 errors were thrown in total. The most common error was ''java.lang.NoSuchMethodError'', which was thrown 13 times. Investigate the thrown errors to see if they can be avoided. Errors indicate that something went wrong with the code execution and should never be used for flow control. The following regular expression was used to exclude 381 errors from this rule: ''(com.sun.el.parser.ELParser\\$LookaheadSuccess)''.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>OK<\/severity>\n-<summary>The program generated 515 exceptions per second during 9\/24\/2015 10:08:58 AM – 10:09:27 AM.<\/summary>\n-<explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>OK<\/severity>\n-<summary>There were no problems with the amount of sampled threads.<\/summary>\n-<explanation>There are more sampled threads than the amount of hardware threads. This indicates that the application has enough parallelism for the available hardware.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>OK<\/severity>\n-<summary>No long file read pauses were found in this recording (the longest was 16.269 ms).<\/summary>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>OK<\/severity>\n-<summary>No long file write pauses were found in this recording (the longest was 172.408 ms).<\/summary>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>OK<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>The ratio between memory freed by garbage collections per second and liveset is 47.4 %. This is likely a reasonable amount.<\/summary>\n-<explanation>61.4 MiB per second was freed by garbage collections during 9\/24\/2015 10:09:18 AM – 10:09:28 AM. The average liveset was 130 MiB. This is likely a reasonable amount.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>GcLocker<\/id>\n-<severity>OK<\/severity>\n-<summary>No GCs were affected by the GC Locker.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the GC configuration.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n-<explanation>The highest ratio between garbage collection pauses and execution time was 2.22 % during 9\/24\/2015 10:08:56 AM – 10:09:56 AM. The garbage collection pause ratio of the entire recording was 1.88 %.<\/explanation>\n-<solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n-<\/rule>\n-<rule>\n-<id>GcStall<\/id>\n-<severity>OK<\/severity>\n-<summary>No indications that the garbage collector could not keep up with the workload were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Warning<\/severity>\n-<summary>Most of the heap was used by only a few classes.<\/summary>\n-<explanation>If the heap usage needs to be reduced, then this would be a good place to start.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapInspectionGc<\/id>\n-<severity>Information<\/severity>\n-<summary>The JVM performed 4 heap inspection garbage collections.<\/summary>\n-<explanation>Performing heap inspection garbage collections may be a problem since they usually take a lot of time.\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran WebLogic Server with bytecode verification disabled.<\/summary>\n+            <explanation>The application ran WebLogic Server with bytecode verification disabled. While not generally recommended, it is considered OK for WLS.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>OK<\/severity>\n+            <summary>com.oracle.medrec.model.User was loaded -1 time(s) without being unloaded<\/summary>\n+            <explanation>Some classes have been loaded multiple times, and the difference between the number of times a class have been loaded and the number of times it has been unloaded has exceeded the user specified limit. This in itself need not be a problem, but check to see if you expect these classes to be loaded multiple times to make sure that you do not have a class loader leak. The following classes were detected as potential problems: &lt;ul&gt;&lt;li&gt;com.oracle.medrec.model.User (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.service.PatientService (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.service.PhysicianService (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.facade.PatientFacade (-1)&lt;\/li&gt;&lt;li&gt;com.oracle.medrec.common.messaging.MessageClient (-1)&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No significant time was spent loading new classes during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>An average CPU load of 54 % was caused by other processes for during 9\/24\/2015 10:08:17.000 AM – 10:08:22 AM.<\/summary>\n+            <explanation>The application performance can be affected when the machine is under heavy load and there are other processes that use CPU or other resources on the same computer. To profile representatively or get higher throughput, shut down other resource intensive processes running on the machine.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The settings for Compressed Oops were OK.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program did not context switch excessively during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Information<\/severity>\n+            <summary>DebugNonSafepoints was not enabled.<\/summary>\n+            <explanation>If DebugNonSafepoints is not enabled, the method profiling data will be less accurate as threads that are not at safepoints will not be correctly sampled. There is a slight performance overhead when enabling these flags. For more information see [HotSpot Runtime Overview\/Thread Management](http:\/\/openjdk.java.net\/groups\/hotspot\/docs\/RuntimeOverview.html#Thread%20Management|outline]).<\/explanation>\n+            <solution>Use the following JVM flags to enable this: '-XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints'.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the VM options.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>Information<\/severity>\n+            <summary>2 duplicated JVM flags found.<\/summary>\n+            <explanation>Duplicated JVM flags may be caused by multiple layers of scripts used when launching the application. Having duplicate flags is dangerous as changing one of the flags in one of the scripts may not have the intended effect. This can be especially dangerous for security related system properties. The following flags were duplicated: &lt;ul&gt;&lt;li&gt;-Djava.endorsed.dirs=c:\\java\\JDK18~1.0_6\\jre\\lib\\endorsed;C:\\tmp\\WLS-JFR\\oracle_common\\modules\\endorsed,-Djava.endorsed.dirs=c:\\java\\JDK18~1.0_6\\jre\\lib\\endorsed;C:\\tmp\\WLS-JFR\\oracle_common\\modules\\endorsed&lt;\/li&gt;&lt;li&gt;-Xverify:none,-Xverify:none&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n+            <solution>Try to find all the places where the flag is defined and keep only one.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated an average of 17 errors per minute during 9\/24\/2015 10:08:14.000 AM – 10:09:14 AM.<\/summary>\n+            <explanation>17 errors were thrown in total. The most common error was ''java.lang.NoSuchMethodError'', which was thrown 13 times. Investigate the thrown errors to see if they can be avoided. Errors indicate that something went wrong with the code execution and should never be used for flow control. The following regular expression was used to exclude 381 errors from this rule: ''(com.sun.el.parser.ELParser\\$LookaheadSuccess)''.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program generated 515 exceptions per second during 9\/24\/2015 10:08:58.000 AM – 10:09:27 AM.<\/summary>\n+            <explanation>Throwing exceptions is more expensive than normal code execution, which means that they should only be used for exceptional situations. Investigate the thrown exceptions to see if any of them can be avoided with a non-exceptional control flow.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>OK<\/severity>\n+            <summary>There were no problems with the amount of sampled threads.<\/summary>\n+            <explanation>There are more sampled threads than the amount of hardware threads. This indicates that the application has enough parallelism for the available hardware.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No long file read pauses were found in this recording (the longest was 16.269 ms).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No long file write pauses were found in this recording (the longest was 172.408 ms).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM version used for this recording has full Flight Recorder support.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>OK<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The ratio between memory freed by garbage collections per second and liveset is 47.4 %. This is likely a reasonable amount.<\/summary>\n+            <explanation>61.4 MiB per second was freed by garbage collections during 9\/24\/2015 10:09:18.000 AM – 10:09:28 AM. The average liveset was 130 MiB. This is likely a reasonable amount.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>GcLocker<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No GCs were affected by the GC Locker.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the GC configuration.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Application efficiency was not highly affected by GC pauses.<\/summary>\n+            <explanation>The highest ratio between garbage collection pauses and execution time was 2.22 % during 9\/24\/2015 10:08:56.000 AM – 10:09:56 AM. The garbage collection pause ratio of the entire recording was 1.88 %.<\/explanation>\n+            <solution>Pause times may be reduced by increasing the heap size or by trying to reduce allocation.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>GcStall<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No indications that the garbage collector could not keep up with the workload were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>Most of the heap was used by only a few classes.<\/summary>\n+            <explanation>If the heap usage needs to be reduced, then this would be a good place to start.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapInspectionGc<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The JVM performed 4 heap inspection garbage collections.<\/summary>\n+            <explanation>Performing heap inspection garbage collections may be a problem since they usually take a lot of time.\n@@ -2875,90 +2875,90 @@\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>Information<\/severity>\n-<summary>The JVM was paused for 100 % during 9\/24\/2015 10:07:58.865 AM – 10:07:59.432 AM<\/summary>\n-<explanation>The time spent performing garbage collection may be reduced by increasing the heap size or by trying to reduce allocation.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>OK<\/severity>\n-<summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Information<\/severity>\n-<summary>The live set on the heap seems to increase with a speed of about 638 KiB per second during the recording.<\/summary>\n-<explanation>This may be due to a memory leak in the application or it may be an artifact of a short recording if the JVM has recently been started. The recording began 3.249 s after the JVM was started. More information can be gathered by using the 'Old Object Sample' event, if available.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>Information<\/severity>\n-<summary>The class data seems to increase constantly in the metaspace during the recording.<\/summary>\n-<explanation>This behavior may indicate a memory leak in the metaspace, this could be due to the application not unloading classes as needed.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Information<\/severity>\n-<summary>Threads in the application were blocked on locks for a total of 1 min 26 s.<\/summary>\n-<explanation>The most blocking monitor class was ''org.apache.log4j.Logger'', which was blocked 1,612 times for a total of 1 min 23 s.The following regular expression was used to exclude threads from this rule: ''(.*weblogic\\.socket\\.Muxer.*)''<\/explanation>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>OK<\/severity>\n-<summary>The longest GC pause was 576.207 ms.<\/summary>\n-<explanation\/>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>OK<\/severity>\n-<summary>The system did not run low on physical memory during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the management agent settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>OK<\/severity>\n-<summary>The metaspace was not exhausted during this recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>OK<\/severity>\n-<summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>Information<\/severity>\n-<summary>Deprecated option flags were detected.<\/summary>\n-<explanation>The following option flags are or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:PermSize=128m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;li&gt;-XX:MaxPermSize=256m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>OK<\/severity>\n-<summary>No problems were found with the recording settings.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>OK<\/severity>\n-<summary>0.089 % of the total allocation (2.07 GiB) is caused by conversion from primitive types to object types. The most common object type that primitives are converted into is ''java.lang.Integer''.<\/summary>\n-<explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The JVM was paused for 100 % during 9\/24\/2015 10:07:58.865.000 AM – 10:07:59.432 AM<\/summary>\n+            <explanation>The time spent performing garbage collection may be reduced by increasing the heap size or by trying to reduce allocation.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The JVM does not seem to cause a lot of CPU load.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The live set on the heap seems to increase with a speed of about 638 KiB per second during the recording.<\/summary>\n+            <explanation>This may be due to a memory leak in the application or it may be an artifact of a short recording if the JVM has recently been started. The recording began 3.249 s after the JVM was started. More information can be gathered by using the 'Old Object Sample' event, if available.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>Information<\/severity>\n+            <summary>The class data seems to increase constantly in the metaspace during the recording.<\/summary>\n+            <explanation>This behavior may indicate a memory leak in the metaspace, this could be due to the application not unloading classes as needed.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Information<\/severity>\n+            <summary>Threads in the application were blocked on locks for a total of 1 min 26 s.<\/summary>\n+            <explanation>The most blocking monitor class was ''org.apache.log4j.Logger'', which was blocked 1,612 times for a total of 1 min 23 s.The following regular expression was used to exclude threads from this rule: ''(.*weblogic\\.socket\\.Muxer.*)''<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The longest GC pause was 576.207 ms.<\/summary>\n+            <explanation\/>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The system did not run low on physical memory during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the management agent settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The metaspace was not exhausted during this recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No methods where optimization would be particularly efficient could be detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>Information<\/severity>\n+            <summary>Deprecated option flags were detected.<\/summary>\n+            <explanation>The following option flags are or will be deprecated. &lt;ul&gt;&lt;li&gt;-XX:PermSize=128m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;li&gt;-XX:MaxPermSize=256m: Ignored in Java 8 and removed in Java 9. PermGen was removed in JDK 8, since Java users should not need to know up front how much memory to reserve for class metadata etc. Just like in the JRockit and J9 JVMs, native memory is now used for class metadata, and it will dynamically grow as needed. The equivalent of java.lang.OutOfMemoryError: PermGen will be much harder to provoke. To influence when to start attempting to reclaim metaspace memory, check out the [MaxMetaspaceSize flag](https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html).&lt;\/li&gt;&lt;\/ul&gt; Deprecated option flags should be avoided. In some cases they enable legacy code and in other cases they are ignored completely. They will usually be removed in a later Java release.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No problems were found with the recording settings.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the system properties.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>OK<\/severity>\n+            <summary>0.089 % of the total allocation (2.07 GiB) is caused by conversion from primitive types to object types. The most common object type that primitives are converted into is ''java.lang.Integer''.<\/summary>\n+            <explanation>\n@@ -2967,22 +2967,22 @@\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>OK<\/severity>\n-<summary>No long socket read pauses were found in this recording (the longest was 105.982 ms).<\/summary>\n-<explanation>Note that there are some socket read patterns with high duration reads that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication and MQ series.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Information<\/severity>\n-<summary>There are long socket write pauses in this recording (the longest is 349.745 ms).<\/summary>\n-<explanation>The longest recorded socket write took 349.745 ms to write 81 B to the host at 10.161.190.213. Average time of recorded IO: 37.121 ms. Total time of recorded IO: 1.077 s. Total time of recorded IO for the host 10.161.190.213: 398.835 ms. Note that there are some socket write patterns with high duration writes that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>Warning<\/severity>\n-<summary>Some stack traces were truncated in this recording.<\/summary>\n-<explanation>The Flight Recorder is configured with a maximum captured stack depth of 64. 35.7 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No long socket read pauses were found in this recording (the longest was 105.982 ms).<\/summary>\n+            <explanation>Note that there are some socket read patterns with high duration reads that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication and MQ series.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Information<\/severity>\n+            <summary>There are long socket write pauses in this recording (the longest is 349.745 ms).<\/summary>\n+            <explanation>The longest recorded socket write took 349.745 ms to write 81 B to the host at 10.161.190.213. Average time of recorded IO: 37.121 ms. Total time of recorded IO: 1.077 s. Total time of recorded IO for the host 10.161.190.213: 398.835 ms. Note that there are some socket write patterns with high duration writes that we consider to be normal and are therefore excluded. Such patterns include JMX RMI communication.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>Some stack traces were truncated in this recording.<\/summary>\n+            <explanation>The Flight Recorder is configured with a maximum captured stack depth of 64. 35.7 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n@@ -2990,5 +2990,5 @@\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>OK<\/severity>\n-<summary>Approximately 1,746 % of the live set consists of the internal array type of strings (''char[]'' for this JDK version).\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>OK<\/severity>\n+            <summary>Approximately 1,746 % of the live set consists of the internal array type of strings (''char[]'' for this JDK version).\n@@ -2996,1 +2996,1 @@\n-<explanation>String deduplication is enabled using the JVM flag '-XX:+UseStringDeduplication'. This flag can be used together with the G1 garbage collector in JDK 8u20 or later, or with the Shenandoah garbage collector.\n+            <explanation>String deduplication is enabled using the JVM flag '-XX:+UseStringDeduplication'. This flag can be used together with the G1 garbage collector in JDK 8u20 or later, or with the Shenandoah garbage collector.\n@@ -2999,245 +2999,245 @@\n-<\/rule>\n-<rule>\n-<id>SystemGc<\/id>\n-<severity>OK<\/severity>\n-<summary>No garbage collections were caused by System.gc().<\/summary>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>OK<\/severity>\n-<summary>The program allocated 2.39 % of the memory outside of TLABs.<\/summary>\n-<solution>Allocating objects outside of Thread Local Allocation Buffers (TLABs) is more expensive than allocating inside TLABs. This may be acceptable if the individual allocations are intended to be larger than a reasonable TLAB. It may be possible to avoid this by decreasing the size of the individual allocations. There are some TLAB related JVM flags that you can experiment with, but it is usually better to let the JVM manage TLAB sizes automatically.<\/solution>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>OK<\/severity>\n-<summary>No excessively long VM operations were found in this recording (the longest was 592.965 ms).<\/summary>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>OK<\/severity>\n-<summary>No revocation of biased locks found.<\/summary>\n-<\/rule>\n-<\/report>\n-<report>\n-<file>wls-medrec-jdk9.jfr<\/file>\n-<rule>\n-<id>Allocations.class<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Allocations.thread<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ApplicationHalts<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>BufferLost<\/id>\n-<severity>OK<\/severity>\n-<summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n-<\/rule>\n-<rule>\n-<id>BytecodeVerification<\/id>\n-<severity>OK<\/severity>\n-<summary>The application ran with bytecode verification enabled.<\/summary>\n-<\/rule>\n-<rule>\n-<id>ClassLeak<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ClassLoading<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CodeCache<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompareCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>CompressedOops<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ContextSwitch<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DMSIncident<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DebugNonSafepoints<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DiscouragedVmOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DumpReason<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>DuplicateFlags<\/id>\n-<severity>Information<\/severity>\n-<summary>5 duplicated JVM flags found.<\/summary>\n-<explanation>Duplicated JVM flags may be caused by multiple layers of scripts used when launching the application. Having duplicate flags is dangerous as changing one of the flags in one of the scripts may not have the intended effect. This can be especially dangerous for security related system properties. The following flags were duplicated: &lt;ul&gt;&lt;li&gt;-XX:NewSize=65m,-XX:NewSize=65m&lt;\/li&gt;&lt;li&gt;-Dweblogic.home=C:\\weblogic\\src122130_build\\Oracle_Home\\wlserver\/server,-Dweblogic.home=C:\\weblogic\\SRC122~1\\ORACLE~1\\wlserver\\server&lt;\/li&gt;&lt;li&gt;-Xmx500m,-Xmx500m&lt;\/li&gt;&lt;li&gt;-Xms160m,-Xms160m&lt;\/li&gt;&lt;li&gt;-XX:MaxNewSize=65m,-XX:MaxNewSize=65m&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n-<solution>Try to find all the places where the flag is defined and keep only one.<\/solution>\n-<\/rule>\n-<rule>\n-<id>Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Exceptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Fatal Errors<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FewSampledThreads<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FileWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>FlightRecordingSupport<\/id>\n-<severity>Warning<\/severity>\n-<summary>The recording is from an early access build.<\/summary>\n-<explanation>This recording is from an early access build of the JRE (Java HotSpot(TM) 64-Bit Server VM (9-ea+148) for windows-amd64 JRE (9-ea+148), built on Dec  7 2016 18:47:38 by &amp;#34;javare&amp;#34; with MS VC++ 12.0 (VS2013)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.<\/explanation>\n-<\/rule>\n-<rule>\n-<id>FullGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GarbageCollectionInfoRule<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcFreedRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>GcOptions<\/id>\n-<severity>Not Applicable<\/severity>\n-<summary>Too few events to calculate the result.<\/summary>\n-<\/rule>\n-<rule>\n-<id>GcPauseRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapContent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HeapDump<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighGc<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>HighJvmCpu<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>IncreasingMetaSpaceLiveSet<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>JavaBlocking<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LongGcPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>LowOnPhysicalMemory<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManagementAgent<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ManyRunningProcesses<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MetaspaceOom<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>MethodProfiling<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>Options<\/id>\n-<severity>OK<\/severity>\n-<summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n-<\/rule>\n-<rule>\n-<id>OverAggressiveRecordingSetting<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInArguments<\/id>\n-<severity>OK<\/severity>\n-<summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n-<\/rule>\n-<rule>\n-<id>PasswordsInEnvironment<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PasswordsInSystemProperties<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>PrimitiveToObjectConversion<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>ProcessStarted<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketRead<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>SocketWrite<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>StackdepthSetting<\/id>\n-<severity>Warning<\/severity>\n-<summary>Some stack traces were truncated in this recording.<\/summary>\n-<explanation>The Flight Recorder is configured with a maximum captured stack depth of 64. 17.5 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n+        <\/rule>\n+        <rule>\n+            <id>SystemGc<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No garbage collections were caused by System.gc().<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The program allocated 2.39 % of the memory outside of TLABs.<\/summary>\n+            <solution>Allocating objects outside of Thread Local Allocation Buffers (TLABs) is more expensive than allocating inside TLABs. This may be acceptable if the individual allocations are intended to be larger than a reasonable TLAB. It may be possible to avoid this by decreasing the size of the individual allocations. There are some TLAB related JVM flags that you can experiment with, but it is usually better to let the JVM manage TLAB sizes automatically.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No excessively long VM operations were found in this recording (the longest was 592.965 ms).<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No revocation of biased locks found.<\/summary>\n+        <\/rule>\n+    <\/report>\n+    <report>\n+        <file>wls-medrec-jdk9.jfr<\/file>\n+        <rule>\n+            <id>Allocations.class<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Allocations.thread<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ApplicationHalts<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>BufferLost<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No Flight Recorder buffers were lost during the recording.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>BytecodeVerification<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The application ran with bytecode verification enabled.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLeak<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ClassLoading<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CodeCache<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompareCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>CompressedOops<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ContextSwitch<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DMSIncident<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DebugNonSafepoints<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DiscouragedVmOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DumpReason<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>DuplicateFlags<\/id>\n+            <severity>Information<\/severity>\n+            <summary>5 duplicated JVM flags found.<\/summary>\n+            <explanation>Duplicated JVM flags may be caused by multiple layers of scripts used when launching the application. Having duplicate flags is dangerous as changing one of the flags in one of the scripts may not have the intended effect. This can be especially dangerous for security related system properties. The following flags were duplicated: &lt;ul&gt;&lt;li&gt;-XX:NewSize=65m,-XX:NewSize=65m&lt;\/li&gt;&lt;li&gt;-Dweblogic.home=C:\\weblogic\\src122130_build\\Oracle_Home\\wlserver\/server,-Dweblogic.home=C:\\weblogic\\SRC122~1\\ORACLE~1\\wlserver\\server&lt;\/li&gt;&lt;li&gt;-Xmx500m,-Xmx500m&lt;\/li&gt;&lt;li&gt;-Xms160m,-Xms160m&lt;\/li&gt;&lt;li&gt;-XX:MaxNewSize=65m,-XX:MaxNewSize=65m&lt;\/li&gt;&lt;\/ul&gt;<\/explanation>\n+            <solution>Try to find all the places where the flag is defined and keep only one.<\/solution>\n+        <\/rule>\n+        <rule>\n+            <id>Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Exceptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Fatal Errors<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FewSampledThreads<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FileWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>FlightRecordingSupport<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>The recording is from an early access build.<\/summary>\n+            <explanation>This recording is from an early access build of the JRE (Java HotSpot(TM) 64-Bit Server VM (9-ea+148) for windows-amd64 JRE (9-ea+148), built on Dec  7 2016 18:47:38 by &amp;#34;javare&amp;#34; with MS VC++ 12.0 (VS2013)). The automated analysis is not supported, and you may see errors when attempting to analyze the recording.<\/explanation>\n+        <\/rule>\n+        <rule>\n+            <id>FullGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>This rule is only valid for CMS and G1 Garbage Collectors, neither of which were detected for this JVM.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GarbageCollectionInfoRule<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcFreedRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>GcOptions<\/id>\n+            <severity>Not Applicable<\/severity>\n+            <summary>Too few events to calculate the result.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>GcPauseRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapContent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HeapDump<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighGc<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>HighJvmCpu<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>IncreasingMetaSpaceLiveSet<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>JavaBlocking<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LongGcPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>LowOnPhysicalMemory<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManagementAgent<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ManyRunningProcesses<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MetaspaceOom<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>MethodProfiling<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>Options<\/id>\n+            <severity>OK<\/severity>\n+            <summary>No undocumented, deprecated or non-recommended option flags were detected.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>OverAggressiveRecordingSetting<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInArguments<\/id>\n+            <severity>OK<\/severity>\n+            <summary>The recording does not seem to contain passwords in the application arguments.<\/summary>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInEnvironment<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PasswordsInSystemProperties<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>PrimitiveToObjectConversion<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>ProcessStarted<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketRead<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>SocketWrite<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>StackdepthSetting<\/id>\n+            <severity>Warning<\/severity>\n+            <summary>Some stack traces were truncated in this recording.<\/summary>\n+            <explanation>The Flight Recorder is configured with a maximum captured stack depth of 64. 17.5 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n@@ -3245,22 +3245,22 @@\n-<\/rule>\n-<rule>\n-<id>StringDeduplication<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>TlabAllocationRatio<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>VMOperations<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocation<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<rule>\n-<id>biasedLockingRevocationPause<\/id>\n-<severity>Not Applicable<\/severity>\n-<\/rule>\n-<\/report>\n+        <\/rule>\n+        <rule>\n+            <id>StringDeduplication<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>TlabAllocationRatio<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>VMOperations<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocation<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+        <rule>\n+            <id>biasedLockingRevocationPause<\/id>\n+            <severity>Not Applicable<\/severity>\n+        <\/rule>\n+    <\/report>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/resources\/baseline\/JfrRuleBaseline.xml","additions":3250,"deletions":3250,"binary":false,"changes":6500,"status":"modified"}]}