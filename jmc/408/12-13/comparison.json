{"files":[{"patch":"@@ -257,1 +257,1 @@\n-\t\t\t\t\t\t.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),\n+\t\t\t\t.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),\n@@ -260,1 +260,1 @@\n-\t\t\t\t\t\t.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));\n+\t\t\t\t.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));\n@@ -268,1 +268,1 @@\n-\t\t\t\tImageDescriptor disabledImageDescriptor) {\n+\t\t\t\t\t\t\t\t ImageDescriptor disabledImageDescriptor) {\n@@ -290,6 +290,6 @@\n-\t\t\tcase SAVE_AS:\n-\t\t\t\tExecutors.newSingleThreadExecutor().execute(FlamegraphSwingView.this::saveFlamegraph);\n-\t\t\t\tbreak;\n-\t\t\tcase PRINT:\n-\t\t\t\t\/\/ not supported\n-\t\t\t\tbreak;\n+\t\t\t\tcase SAVE_AS:\n+\t\t\t\t\tExecutors.newSingleThreadExecutor().execute(FlamegraphSwingView.this::saveFlamegraph);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase PRINT:\n+\t\t\t\t\t\/\/ not supported\n+\t\t\t\t\tbreak;\n@@ -387,1 +387,1 @@\n-\t\tgroupByActions = new GroupByAction[] {new GroupByAction(GroupActionType.LAST_FRAME),\n+\t\tgroupByActions = new GroupByAction[]{new GroupByAction(GroupActionType.LAST_FRAME),\n@@ -389,1 +389,1 @@\n-\t\tgroupByFlameviewActions = new ViewModeAction[] {new ViewModeAction(GroupActionType.FLAME_GRAPH),\n+\t\tgroupByFlameviewActions = new ViewModeAction[]{new ViewModeAction(GroupActionType.FLAME_GRAPH),\n@@ -391,1 +391,1 @@\n-\t\texportActions = new ExportAction[] {new ExportAction(ExportActionType.SAVE_AS),\n+\t\texportActions = new ExportAction[]{new ExportAction(ExportActionType.SAVE_AS),\n@@ -471,1 +471,1 @@\n-\t\t\t\t\t\t\t\t\t\tfalse, false, true, false),\n+\t\t\t\t\t\t\t\tfalse, false, true, false),\n@@ -545,1 +545,1 @@\n-\t\tfinal IItemCollection items, final List<FrameBox<Node>> flatFrameList, String rootFrameDescription) {\n+\t\t\tfinal IItemCollection items, final List<FrameBox<Node>> flatFrameList, String rootFrameDescription) {\n@@ -563,78 +563,78 @@\n-        var future = new CompletableFuture<Path>();\n-\n-        DisplayToolkit.inDisplayThread().execute(() -> {\n-            var fd = new FileDialog(embeddingComposite.getShell(), SWT.SAVE);\n-            fd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));\n-            fd.setFilterNames(\n-                    new String[]{getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});\n-            fd.setFilterExtensions(new String[]{\"*.jpg\", \"*.png\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-            fd.setFileName(\"flame_graph\"); \/\/$NON-NLS-1$\n-            fd.setOverwrite(true);\n-            if (fd.open() == null) {\n-                future.cancel(true);\n-                return;\n-            }\n-\n-            var fileName = fd.getFileName().toLowerCase();\n-            \/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n-            if (!fileName.endsWith(\".jpg\") && !fileName.endsWith(\".jpeg\") && !fileName.endsWith(\".png\")) { \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n-                future.completeExceptionally(new UnsupportedOperationException(\"Unsupported image format\")); \/\/$NON-NLS-1$\n-                return;\n-            }\n-            future.complete(Paths.get(fd.getFilterPath(), fd.getFileName()));\n-        });\n-\n-        Supplier<RenderedImage> generator = () -> {\n-            var fgImage = new FlamegraphImage<>(\n-                    FrameTextsProvider.of(\n-                            frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(), \/\/$NON-NLS-1$\n-                            frame -> frame.isRoot() ? \"\" \/\/$NON-NLS-1$\n-                                    : FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false,\n-                                    false, false, false, true, false),\n-                            frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()), \/\/$NON-NLS-1$\n-                    new DimmingFrameColorProvider<Node>(\n-                            frame -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n-                                    .apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n-                    FrameFontProvider.defaultFontProvider());\n-\n-            return fgImage.generate(flamegraphView.getFrameModel(), flamegraphView.getMode(), 2000);\n-        };\n-\n-        Optional.of(future)\n-                .map(f -> {\n-                    try {\n-                        return f.get();\n-                    } catch (CancellationException e) {\n-                        \/\/ noop : model calculation is canceled when is still running\n-                    } catch (InterruptedException | ExecutionException e) {\n-                        FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n-                    }\n-                    return null;\n-                })\n-                .ifPresent(destinationPath -> {\n-                    \/\/ make spotbugs happy about NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\n-                    var type = Optional.ofNullable(destinationPath.getFileName())\n-                            .map(p -> p.toString().toLowerCase())\n-                            .map(f ->\n-                                    switch (f.substring(f.lastIndexOf('.') + 1)) { \/\/$NON-NLS-1$\n-                                        case \"jpeg\", \"jpg\" -> \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-                                                \"jpg\"; \/\/$NON-NLS-1$\n-                                        case \"png\" -> \/\/$NON-NLS-1$\n-                                                \"png\"; \/\/$NON-NLS-1$\n-                                        default -> null;\n-                                    }\n-                            ).orElseThrow(() -> new IllegalStateException(\"Unhandled type for \" + destinationPath));\n-\n-                    try (var os = new BufferedOutputStream(Files.newOutputStream(destinationPath))) {\n-                    \tvar renderImg = generator.get();\n-                    \t\n-                    \tvar img = switch(type) {\n-                    \t\tcase \"png\" -> renderImg;\n-                    \t\tcase \"jpg\" -> {\n-                    \t\t\t\/\/ JPG does not have an alpha channel, and ImageIO.write will simply write a 0 byte file\n-                    \t\t\t\/\/ to workaround this it is required to copy the image to a BufferedImage without alpha channel\n-                            \tvar newBufferedImage = new BufferedImage(\n-                            \t\t\trenderImg.getWidth(),\n-                            \t\t\trenderImg.getHeight(),\n-                            \t\t\tBufferedImage.TYPE_INT_RGB\n-                            \t\t\t);\n+\t\tvar future = new CompletableFuture<Path>();\n+\n+\t\tDisplayToolkit.inDisplayThread().execute(() -> {\n+\t\t\tvar fd = new FileDialog(embeddingComposite.getShell(), SWT.SAVE);\n+\t\t\tfd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));\n+\t\t\tfd.setFilterNames(\n+\t\t\t\t\tnew String[]{getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});\n+\t\t\tfd.setFilterExtensions(new String[]{\"*.jpg\", \"*.png\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\tfd.setFileName(\"flame_graph\"); \/\/$NON-NLS-1$\n+\t\t\tfd.setOverwrite(true);\n+\t\t\tif (fd.open() == null) {\n+\t\t\t\tfuture.cancel(true);\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tvar fileName = fd.getFileName().toLowerCase();\n+\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n+\t\t\tif (!fileName.endsWith(\".jpg\") && !fileName.endsWith(\".jpeg\") && !fileName.endsWith(\".png\")) { \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+\t\t\t\tfuture.completeExceptionally(new UnsupportedOperationException(\"Unsupported image format\")); \/\/$NON-NLS-1$\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tfuture.complete(Paths.get(fd.getFilterPath(), fd.getFileName()));\n+\t\t});\n+\n+\t\tSupplier<RenderedImage> generator = () -> {\n+\t\t\tvar fgImage = new FlamegraphImage<>(\n+\t\t\t\t\tFrameTextsProvider.of(\n+\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(), \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t: FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false,\n+\t\t\t\t\t\t\t\t\tfalse, false, false, true, false),\n+\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()), \/\/$NON-NLS-1$\n+\t\t\t\t\tnew DimmingFrameColorProvider<Node>(\n+\t\t\t\t\t\t\tframe -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n+\t\t\t\t\t\t\t\t\t.apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n+\t\t\t\t\tFrameFontProvider.defaultFontProvider());\n+\n+\t\t\treturn fgImage.generate(flamegraphView.getFrameModel(), flamegraphView.getMode(), 2000);\n+\t\t};\n+\n+\t\tOptional.of(future)\n+\t\t\t\t.map(f -> {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\treturn f.get();\n+\t\t\t\t\t} catch (CancellationException e) {\n+\t\t\t\t\t\t\/\/ noop : model calculation is canceled when is still running\n+\t\t\t\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\t\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t})\n+\t\t\t\t.ifPresent(destinationPath -> {\n+\t\t\t\t\t\/\/ make spotbugs happy about NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\n+\t\t\t\t\tvar type = Optional.ofNullable(destinationPath.getFileName())\n+\t\t\t\t\t\t\t.map(p -> p.toString().toLowerCase())\n+\t\t\t\t\t\t\t.map(f ->\n+\t\t\t\t\t\t\t\t\tswitch (f.substring(f.lastIndexOf('.') + 1)) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t\tcase \"jpeg\", \"jpg\" -> \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t\t\t\t\t\t\t\t\t\t\"jpg\"; \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t\tcase \"png\" -> \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t\t\t\t\"png\"; \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t\tdefault -> null;\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t).orElseThrow(() -> new IllegalStateException(\"Unhandled type for \" + destinationPath));\n+\n+\t\t\t\t\ttry (var os = new BufferedOutputStream(Files.newOutputStream(destinationPath))) {\n+\t\t\t\t\t\tvar renderImg = generator.get();\n+\n+\t\t\t\t\t\tvar img = switch (type) {\n+\t\t\t\t\t\t\tcase \"png\" -> renderImg;\n+\t\t\t\t\t\t\tcase \"jpg\" -> {\n+\t\t\t\t\t\t\t\t\/\/ JPG does not have an alpha channel, and ImageIO.write will simply write a 0 byte file\n+\t\t\t\t\t\t\t\t\/\/ to workaround this it is required to copy the image to a BufferedImage without alpha channel\n+\t\t\t\t\t\t\t\tvar newBufferedImage = new BufferedImage(\n+\t\t\t\t\t\t\t\t\t\trenderImg.getWidth(),\n+\t\t\t\t\t\t\t\t\t\trenderImg.getHeight(),\n+\t\t\t\t\t\t\t\t\t\tBufferedImage.TYPE_INT_RGB\n+\t\t\t\t\t\t\t\t);\n@@ -642,17 +642,17 @@\n-\t\t\t\t\t\t\t\t\n-                \t\t\t\tyield newBufferedImage;\n-                    \t\t}\n-                    \t\tdefault -> throw new IllegalStateException(\"Type is checked above\");\n-                    \t};\n-                    \t\n-                    \t\n-                        var result = ImageIO.write(\n-                                img,\n-                                type,\n-                                os\n-                        );\n-                    } catch (IOException e) {\n-                        FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n-                    }\n-                });\n-    }\n+\n+\t\t\t\t\t\t\t\tyield newBufferedImage;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tdefault -> throw new IllegalStateException(\"Type is checked above\");\n+\t\t\t\t\t\t};\n+\n+\n+\t\t\t\t\t\tvar result = ImageIO.write(\n+\t\t\t\t\t\t\t\timg,\n+\t\t\t\t\t\t\t\ttype,\n+\t\t\t\t\t\t\t\tos\n+\t\t\t\t\t\t);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/views\/FlamegraphSwingView.java","additions":109,"deletions":109,"binary":false,"changes":218,"status":"modified"}]}