{"files":[{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -188,0 +188,7 @@\n+   <plugin\n+         id=\"org.openjdk.jmc.flightrecorder.flamegraph\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n+\n","filename":"application\/org.openjdk.jmc.feature.flightrecorder\/feature.xml","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-11\"\/>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/.classpath","status":"copied"},{"patch":"@@ -3,1 +3,1 @@\n-\t<name>org.openjdk.jmc.browser.attach.ja<\/name>\n+\t<name>org.openjdk.jmc.flightrecorder.flamegraph<\/name>\n@@ -31,1 +31,0 @@\n-\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n@@ -33,0 +32,1 @@\n+\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/.project","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/l10n\/org.openjdk.jmc.browser.attach.ja\/.project","status":"copied"},{"patch":"@@ -0,0 +1,21 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Localization: plugin\n+Bundle-Name: flamegraph\n+Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.flamegraph; singleton:=true\n+Bundle-Version: 9.0.0.qualifier\n+Require-Bundle: org.eclipse.ui,\n+ org.eclipse.core.runtime,\n+ org.openjdk.jmc.flightrecorder,\n+ org.openjdk.jmc.flightrecorder.ui,\n+ org.openjdk.jmc.flightrecorder.rules,\n+ org.openjdk.jmc.common,\n+ fireplace-swing,\n+ fireplace-swt-awt-bridge,\n+ fireplace-swing-animation,\n+ radiance-animation\n+Bundle-RequiredExecutionEnvironment: JavaSE-11\n+Bundle-Vendor: Oracle Corporation\n+Automatic-Module-Name: org.openjdk.jmc.flightrecorder.ext.flamegraph\n+Export-Package: org.openjdk.jmc.flightrecorder.flamegraph,\n+ org.openjdk.jmc.flightrecorder.flamegraph.views\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/META-INF\/MANIFEST.MF","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+source.. = src\/main\/java\/\n+output.. = target\/classes\/\n+bin.includes = META-INF\/,\\\n+               .,\\\n+               plugin.xml,\\\n+               plugin.properties,\\\n+               icons\/\n+pde.match.rule.bundle=compatible\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/build.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/flame.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flame.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/flame@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flame@2x.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/flameflip.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flameflip.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/flameflip@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flameflip@2x.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/icicleflip.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/icicleflip.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/icicleflip@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/icicleflip@2x.png","status":"copied"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/map.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<svg\n+        width=\"200\"\n+        height=\"200\"\n+        viewBox=\"0 0 52.916665 52.916666\"\n+        version=\"1.1\"\n+        id=\"svg12313\"\n+        xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\n+    <g id=\"layer1\">\n+        <path\n+                fill=\"none\"\n+                stroke=\"#637CA5\"\n+                stroke-width=\"5\"\n+                d=\"M 4.9131315,7.8985343 5.0413641,48.702044 18.634017,45.322612 34.278392,48.952371 47.871044,45.948432 V 5.2700874 L 34.801926,8.688152 19.112941,4.5848932 Z\"\n+                id=\"map\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#297437\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"M 10.583333,40.216666 19.05,37.967708 l 15.120469,4.051517 7.539902,-2.020311 -0.170788,0.08546\"\n+                id=\"root-frame\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#948334\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"m 20.902083,32.808333 13.11252,3.51349 2.894772,-0.867656\"\n+                id=\"frame-a\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#944434\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"m 30.294791,30.294791 3.042709,0.79375\"\n+                id=\"frame-b1\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#944434\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"M 12.303125,34.528125 18.25625,32.808333\"\n+                id=\"frame-b2\"\n+        \/>\n+    <\/g>\n+<\/svg>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/map.svg","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/map@2x.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/reset-zoom.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<svg\n+        width=\"200\"\n+        height=\"200\"\n+        viewBox=\"0 0 200 200\"\n+        version=\"1.1\"\n+        xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\n+    <g id=\"magnifier\">\n+        <path\n+                fill=\"#637CA5\"\n+                stroke-width=\"7\"\n+                stroke=\"#637CA5\"\n+                d=\"M 87.359375,4.1269531 C 64.924608,3.3040022 42.455816,11.502669 25.755859,28.015625 a 9,9 0 0 0 -0.07227,12.728516 9,9 0 0 0 12.728515,0.07031 c 20.926187,-20.691861 53.4311,-24.735272 78.935556,-9.78125 25.50443,14.954022 37.33223,44.84362 28.92577,72.796879 -8.40646,27.95325 -34.95851,46.73868 -64.646482,45.55273 C 51.938982,148.19687 27.031455,127.36761 20.945312,98.841797 A 9,9 0 0 0 10.265625,91.917969 9,9 0 0 0 3.3417969,102.59766 C 11.149535,139.1926 43.190479,165.86235 80.910156,167.36914 118.62983,168.87593 152.73164,144.85971 163.51172,109.01367 174.2918,73.16763 158.93855,34.55223 126.45117,15.503906 114.26841,8.360785 100.82023,4.6207237 87.359375,4.1269531 Z\"\n+                id=\"circle\"\n+        \/>\n+        <path\n+                fill=\"#637CA5\"\n+                stroke=\"#637CA5\"\n+                stroke-width=\"26\"\n+                stroke-linecap=\"round\"\n+                d=\"m 137.10341,140.73762 c 82.4111,79.18213 0,0 0,0 z\"\n+                id=\"handle\"\n+        \/>\n+        <path\n+                fill=\"#637CA5\"\n+                stroke=\"#637CA5\"\n+                stroke-width=\"22\"\n+                stroke-linecap=\"round\"\n+                d=\"m 15.127275,14.1251 1.984848,39.242378 39.760602,-3.034511\"\n+                id=\"arrow\"\n+        \/>\n+    <\/g>\n+<\/svg>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/reset-zoom.svg","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/icons\/reset-zoom@2x.png","binary":true,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n-DEPENDENCY_VIEW=Dependency View\n+FLAME_VIEW_NAME=Flame Graph View\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/plugin.properties","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.dependencyview\/plugin.properties","status":"copied"},{"patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+   Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<?eclipse version=\"3.2\"?>\n+<plugin>\n+\t<extension point=\"org.eclipse.ui.views\">\n+\t\t<view\n+\t\t\tallowMultiple=\"false\"\n+\t\t\tcategory=\"org.openjdk.jmc.ui.main\"\n+\t\t\tclass=\"org.openjdk.jmc.flightrecorder.flamegraph.views.FlamegraphSwingView\"\n+\t\t\ticon=\"icons\/flame.png\"\n+\t\t\tid=\"org.openjdk.jmc.flightrecorder.flamegraph\"\n+\t\t\tname=\"%FLAME_VIEW_NAME\"\/>\n+\t<\/extension>\n+\t<extension point=\"org.eclipse.ui.perspectiveExtensions\">\n+\t\t<perspectiveExtension targetID=\"org.openjdk.jmc.ui.idesupport.StandardPerspective\">\n+\t\t\t<view\n+\t\t\t\tid=\"org.openjdk.jmc.flightrecorder.flamegraph\"\n+\t\t\t\trelationship=\"stack\"\n+\t\t\t\trelative=\"org.openjdk.jmc.flightrecorder.ui.StacktraceView\"\n+\t\t\t\tshowTitle=\"true\"\n+\t\t\t\tvisible=\"true\"\/>\n+\t\t<\/perspectiveExtension>\n+\t<\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/plugin.xml","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+   Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.flightrecorder.flamegraph<\/artifactId>\n+\t<packaging>eclipse-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<spotless.config.path.js>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formattingjs.xml<\/spotless.config.path.js>\n+\t<\/properties>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t<\/plugins>\n+\t<\/build>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/pom.xml","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flamegraph;\n+\n+\/**\n+ * Class that holds reference to the icons and images used by the Flight Recorder plug-in\n+ *\/\n+public final class FlamegraphImages {\n+\tpublic static final String ICON_FLAME_FLIP = \"flameflip.png\"; \/\/$NON-NLS-1$\n+\tpublic static final String ICON_ICICLE_FLIP = \"icicleflip.png\"; \/\/$NON-NLS-1$\n+\tpublic static final String ICON_RESET_ZOOM = \"reset-zoom.png\"; \/\/$NON-NLS-1$\n+\tpublic static final String ICON_MINIMAP = \"map.png\"; \/\/$NON-NLS-1$\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/FlamegraphImages.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flamegraph;\n+\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public class Messages {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.flightrecorder.flamegraph.messages\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n+\n+\tpublic static final String FLAMEVIEW_FLAME_GRAPH = \"FLAMEVIEW_FLAME_GRAPH\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_ICICLE_GRAPH = \"FLAMEVIEW_ICICLE_GRAPH\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_SAVE_AS = \"FLAMEVIEW_SAVE_AS\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_PRINT = \"FLAMEVIEW_PRINT\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_SAVE_FLAME_GRAPH_AS = \"FLAMEVIEW_SAVE_FLAME_GRAPH_AS\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_JPEG_IMAGE = \"FLAMEVIEW_JPEG_IMAGE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_PNG_IMAGE = \"FLAMEVIEW_PNG_IMAGE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_TOGGLE_MINIMAP = \"FLAMEVIEW_TOGGLE_MINIMAP\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_RESET_ZOOM = \"FLAMEVIEW_RESET_ZOOM\"; \/\/$NON-NLS-1$\n+\n+\tprivate Messages() {\n+\t}\n+\n+\tpublic static String getString(String key) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn '!' + key + '!';\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/Messages.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -34,1 +34,1 @@\n-package org.openjdk.jmc.flightrecorder.flameview;\n+package org.openjdk.jmc.flightrecorder.flamegraph;\n@@ -69,1 +69,1 @@\n-\t\treturn org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);\n+\t\treturn org.openjdk.jmc.flightrecorder.flamegraph.Messages.getString(key);\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/MessagesUtils.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/MessagesUtils.java","status":"copied"},{"patch":"@@ -0,0 +1,658 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flamegraph.views;\n+\n+import static java.util.Collections.reverseOrder;\n+import static java.util.Map.Entry.comparingByValue;\n+import static java.util.stream.Collectors.toMap;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_FLAME_GRAPH;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_ICICLE_GRAPH;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_JPEG_IMAGE;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_PNG_IMAGE;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_PRINT;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_RESET_ZOOM;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_SAVE_AS;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_SAVE_FLAME_GRAPH_AS;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.Messages.FLAMEVIEW_TOGGLE_MINIMAP;\n+import static org.openjdk.jmc.flightrecorder.flamegraph.MessagesUtils.getFlameviewMessage;\n+\n+import java.awt.image.RenderedImage;\n+import java.io.BufferedOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.util.stream.Stream;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+import org.eclipse.jface.action.Action;\n+import org.eclipse.jface.action.IAction;\n+import org.eclipse.jface.action.Separator;\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.jface.resource.ResourceLocator;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.window.DefaultToolTip;\n+import org.eclipse.jface.window.ToolTip;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.graphics.Point;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.swt.widgets.FileDialog;\n+import org.eclipse.ui.IMemento;\n+import org.eclipse.ui.ISelectionListener;\n+import org.eclipse.ui.ISharedImages;\n+import org.eclipse.ui.IViewSite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.ui.part.ViewPart;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.util.FormatToolkit;\n+import org.openjdk.jmc.flightrecorder.flamegraph.FlamegraphImages;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.Node;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;\n+import org.openjdk.jmc.ui.CoreImages;\n+import org.openjdk.jmc.ui.common.util.AdapterUtil;\n+import org.openjdk.jmc.ui.handlers.MCContextMenuManager;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+\n+import io.github.bric3.fireplace.core.ui.Colors;\n+import io.github.bric3.fireplace.flamegraph.ColorMapper;\n+import io.github.bric3.fireplace.flamegraph.DimmingFrameColorProvider;\n+import io.github.bric3.fireplace.flamegraph.FlamegraphImage;\n+import io.github.bric3.fireplace.flamegraph.FlamegraphView;\n+import io.github.bric3.fireplace.flamegraph.FrameBox;\n+import io.github.bric3.fireplace.flamegraph.FrameFontProvider;\n+import io.github.bric3.fireplace.flamegraph.FrameModel;\n+import io.github.bric3.fireplace.flamegraph.FrameTextsProvider;\n+import io.github.bric3.fireplace.flamegraph.animation.ZoomAnimation;\n+import io.github.bric3.fireplace.swt_awt.EmbeddingComposite;\n+import io.github.bric3.fireplace.swt_awt.SWT_AWTBridge;\n+\n+public class FlamegraphSwingView extends ViewPart implements ISelectionListener {\n+    private static final String DIR_ICONS = \"icons\/\"; \/\/$NON-NLS-1$\n+    private static final String PLUGIN_ID = \"org.openjdk.jmc.flightrecorder.flamegraph\"; \/\/$NON-NLS-1$\n+\n+    private static final int MODEL_EXECUTOR_THREADS_NUMBER = 3;\n+    private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(MODEL_EXECUTOR_THREADS_NUMBER,\n+            new ThreadFactory() {\n+                private final ThreadGroup group = new ThreadGroup(\"FlameGraphModelCalculationGroup\"); \/\/$NON-NLS-1$\n+                private final AtomicInteger counter = new AtomicInteger();\n+\n+                @Override\n+                public Thread newThread(Runnable r) {\n+                    var t = new Thread(group, r, \"FlamegraphJavaModelCalculation-\" + counter.getAndIncrement()); \/\/$NON-NLS-1$\n+                    t.setDaemon(true);\n+                    return t;\n+                }\n+            });\n+    private FrameSeparator frameSeparator;\n+\n+    private SashForm container;\n+    private EmbeddingComposite embeddingComposite;\n+    private FlamegraphView<Node> flamegraphView;\n+\n+    private GroupByAction[] groupByActions;\n+    private ViewModeAction[] groupByFlameviewActions;\n+    private ExportAction[] exportActions;\n+    private boolean threadRootAtTop = true;\n+    private boolean icicleViewActive = true;\n+    private IItemCollection currentItems;\n+    private volatile ModelState modelState = ModelState.NONE;\n+    private ModelRebuildRunnable modelRebuildRunnable;\n+\n+    private enum GroupActionType {\n+        THREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),\n+        LAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),\n+        ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n+                FlamegraphImages.ICON_ICICLE_FLIP)),\n+        FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n+                FlamegraphImages.ICON_FLAME_FLIP));\n+\n+        private final String message;\n+        private final int action;\n+        private final ImageDescriptor imageDescriptor;\n+\n+        private GroupActionType(String message, int action, ImageDescriptor imageDescriptor) {\n+            this.message = message;\n+            this.action = action;\n+            this.imageDescriptor = imageDescriptor;\n+        }\n+    }\n+\n+    private enum ModelState {\n+        NOT_STARTED, STARTED, FINISHED, NONE;\n+    }\n+\n+    private class GroupByAction extends Action {\n+        private final GroupActionType actionType;\n+\n+        GroupByAction(GroupActionType actionType) {\n+            super(actionType.message, actionType.action);\n+            this.actionType = actionType;\n+            setToolTipText(actionType.message);\n+            setImageDescriptor(actionType.imageDescriptor);\n+            setChecked(GroupActionType.THREAD_ROOT.equals(actionType) == threadRootAtTop);\n+        }\n+\n+        @Override\n+        public void run() {\n+            boolean newValue = isChecked() == GroupActionType.THREAD_ROOT.equals(actionType);\n+            if (newValue != threadRootAtTop) {\n+                threadRootAtTop = newValue;\n+                triggerRebuildTask(currentItems);\n+            }\n+        }\n+    }\n+\n+    private class ViewModeAction extends Action {\n+        private final GroupActionType actionType;\n+\n+        ViewModeAction(GroupActionType actionType) {\n+            super(actionType.message, actionType.action);\n+            this.actionType = actionType;\n+            setToolTipText(actionType.message);\n+            setImageDescriptor(actionType.imageDescriptor);\n+            setChecked(GroupActionType.ICICLE_GRAPH.equals(actionType) == icicleViewActive);\n+        }\n+\n+        @Override\n+        public void run() {\n+            icicleViewActive = GroupActionType.ICICLE_GRAPH.equals(actionType);\n+            SwingUtilities.invokeLater(() -> flamegraphView\n+                    .setMode(icicleViewActive ? FlamegraphView.Mode.ICICLEGRAPH : FlamegraphView.Mode.FLAMEGRAPH));\n+        }\n+    }\n+\n+    private class ToggleMinimapAction extends Action {\n+        private ToggleMinimapAction() {\n+            super(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP), IAction.AS_CHECK_BOX);\n+            setToolTipText(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP));\n+            setImageDescriptor(flameviewImageDescriptor(FlamegraphImages.ICON_MINIMAP));\n+\n+            setChecked(false);\n+        }\n+\n+        @Override\n+        public void run() {\n+            boolean toggleMinimap = !flamegraphView.isShowMinimap();\n+            SwingUtilities.invokeLater(() -> flamegraphView.setShowMinimap(toggleMinimap));\n+            setChecked(toggleMinimap);\n+        }\n+    }\n+\n+    private class ResetZoomAction extends Action {\n+        private ResetZoomAction() {\n+            super(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM), IAction.AS_PUSH_BUTTON);\n+            setToolTipText(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM));\n+            setImageDescriptor(flameviewImageDescriptor(FlamegraphImages.ICON_RESET_ZOOM));\n+        }\n+\n+        @Override\n+        public void run() {\n+            SwingUtilities.invokeLater(() -> flamegraphView.resetZoom());\n+        }\n+    }\n+\n+    private enum ExportActionType {\n+        SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()\n+                .getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()\n+                .getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),\n+        PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()\n+                .getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()\n+                .getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));\n+\n+        private final String message;\n+        private final int action;\n+        private final ImageDescriptor imageDescriptor;\n+        private final ImageDescriptor disabledImageDescriptor;\n+\n+        private ExportActionType(String message, int action, ImageDescriptor imageDescriptor,\n+                                 ImageDescriptor disabledImageDescriptor) {\n+            this.message = message;\n+            this.action = action;\n+            this.imageDescriptor = imageDescriptor;\n+            this.disabledImageDescriptor = disabledImageDescriptor;\n+        }\n+    }\n+\n+    private class ExportAction extends Action {\n+        private final ExportActionType actionType;\n+\n+        private ExportAction(ExportActionType actionType) {\n+            super(actionType.message, actionType.action);\n+            this.actionType = actionType;\n+            setToolTipText(actionType.message);\n+            setImageDescriptor(actionType.imageDescriptor);\n+            setDisabledImageDescriptor(actionType.disabledImageDescriptor);\n+        }\n+\n+        @Override\n+        public void run() {\n+            switch (actionType) {\n+                case SAVE_AS:\n+                    Executors.newSingleThreadExecutor().execute(FlamegraphSwingView.this::saveFlamegraph);\n+                    break;\n+                case PRINT:\n+                    \/\/ not supported\n+                    break;\n+            }\n+        }\n+    }\n+\n+    private static class ModelRebuildRunnable implements Runnable {\n+\n+        private final FlamegraphSwingView view;\n+        private final IItemCollection items;\n+        private volatile boolean isInvalid;\n+\n+        private ModelRebuildRunnable(FlamegraphSwingView view, IItemCollection items) {\n+            this.view = view;\n+            this.items = items;\n+        }\n+\n+        private void setInvalid() {\n+            this.isInvalid = true;\n+        }\n+\n+        @Override\n+        public void run() {\n+            view.modelState = ModelState.STARTED;\n+            if (isInvalid) {\n+                return;\n+            }\n+            var treeModel = new StacktraceTreeModel(items, view.frameSeparator, !view.threadRootAtTop);\n+            if (isInvalid) {\n+                return;\n+            }\n+            var rootFrameDescription = createRootNodeDescription(items);\n+            var frameBoxList = convert(treeModel);\n+            if (isInvalid) {\n+                return;\n+            } else {\n+                view.modelState = ModelState.FINISHED;\n+                view.setModel(items, frameBoxList, rootFrameDescription);\n+            }\n+        }\n+\n+        private static List<FrameBox<Node>> convert(StacktraceTreeModel model) {\n+            var nodes = new ArrayList<FrameBox<Node>>();\n+\n+            FrameBox.flattenAndCalculateCoordinate(\n+                    nodes,\n+                    model.getRoot(),\n+                    Node::getChildren,\n+                    Node::getCumulativeWeight,\n+                    node -> node.getChildren().stream().mapToDouble(Node::getCumulativeWeight).sum(),\n+                    0.0d,\n+                    1.0d,\n+                    0\n+            );\n+\n+            return nodes;\n+        }\n+\n+        private static String createRootNodeDescription(IItemCollection items) {\n+            var freq = eventTypeFrequency(items);\n+            \/\/ root => 51917 events of 1 type: Method Profiling Sample[51917],\n+            long totalEvents = freq.values().stream().mapToLong(Long::longValue).sum();\n+            if (totalEvents == 0) {\n+                return \"Stack Trace not available\";\n+            }\n+            var description = new StringBuilder(totalEvents + \" event(s) of \" + freq.size() + \" type(s): \");\n+            int i = 0;\n+            for (var e : freq.entrySet()) {\n+                description.append(e.getKey()).append(\"[\").append(e.getValue()).append(\"]\");\n+                if (i < freq.size() - 1 && i < 3) {\n+                    description.append(\", \");\n+                }\n+                if (i >= 3) {\n+                    description.append(\", ...\");\n+                    break;\n+                }\n+                i++;\n+            }\n+\n+            return description.toString();\n+        }\n+\n+        private static Map<String, Long> eventTypeFrequency(IItemCollection items) {\n+            var eventCountByType = new HashMap<String, Long>();\n+            for (var eventIterable : items) {\n+                if (eventIterable.getItemCount() == 0) {\n+                    continue;\n+                }\n+                eventCountByType.compute(eventIterable.getType().getName(),\n+                        (k, v) -> (v == null ? 0 : v) + eventIterable.getItemCount());\n+            }\n+            \/\/ sort the map in ascending order of values\n+            return eventCountByType.entrySet().stream().sorted(reverseOrder(comparingByValue()))\n+                    .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n+        }\n+    }\n+\n+    @Override\n+    public void init(IViewSite site, IMemento memento) throws PartInitException {\n+        super.init(site, memento);\n+        frameSeparator = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD, false);\n+        groupByActions = new GroupByAction[]{new GroupByAction(GroupActionType.LAST_FRAME),\n+                new GroupByAction(GroupActionType.THREAD_ROOT)};\n+        groupByFlameviewActions = new ViewModeAction[]{new ViewModeAction(GroupActionType.FLAME_GRAPH),\n+                new ViewModeAction(GroupActionType.ICICLE_GRAPH)};\n+        exportActions = new ExportAction[]{new ExportAction(ExportActionType.SAVE_AS),\n+                \/* new ExportAction(ExportActionType.PRINT) *\/};\n+        Stream.of(exportActions).forEach((action) -> action.setEnabled(false));\n+\n+        var siteMenu = site.getActionBars().getMenuManager();\n+        siteMenu.add(new Separator(MCContextMenuManager.GROUP_TOP));\n+        siteMenu.add(new Separator(MCContextMenuManager.GROUP_VIEWER_SETUP));\n+\n+        var toolBar = site.getActionBars().getToolBarManager();\n+        toolBar.add(new ResetZoomAction());\n+        toolBar.add(new ToggleMinimapAction());\n+        toolBar.add(new Separator());\n+        Stream.of(groupByFlameviewActions).forEach(toolBar::add);\n+        toolBar.add(new Separator());\n+        Stream.of(groupByActions).forEach(toolBar::add);\n+        toolBar.add(new Separator());\n+        Stream.of(exportActions).forEach(toolBar::add);\n+        getSite().getPage().addSelectionListener(this);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        getSite().getPage().removeSelectionListener(this);\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void createPartControl(Composite parent) {\n+        container = new SashForm(parent, SWT.HORIZONTAL);\n+        embeddingComposite = new EmbeddingComposite(container);\n+        container.setMaximizedControl(embeddingComposite);\n+\n+        \/\/ done here to avoid SWT complain about wrong thread\n+        var embedSize = embeddingComposite.getSize();\n+        java.awt.Color bgColorAwtColor = SWT_AWTBridge.toAWTColor(container.getBackground());\n+\n+        var tooltip = new StyledToolTip(embeddingComposite, ToolTip.NO_RECREATE, true);\n+        {\n+            tooltip.setPopupDelay(500);\n+            tooltip.setShift(new Point(10, 5));\n+\n+            embeddingComposite.addListener(\n+                    SWT.MouseExit,\n+                    event -> Display.getDefault().timerExec(300, tooltip::hide)\n+            );\n+        }\n+\n+        embeddingComposite.init(() -> {\n+            flamegraphView = createFlameGraph(embeddingComposite, tooltip);\n+            new ZoomAnimation().install(flamegraphView);\n+\n+            flamegraphView.component.setBackground(bgColorAwtColor);\n+            return flamegraphView.component;\n+        });\n+    }\n+\n+    @Override\n+    public void selectionChanged(IWorkbenchPart part, ISelection selection) {\n+        if (selection instanceof IStructuredSelection) {\n+            var first = ((IStructuredSelection) selection).getFirstElement();\n+            var items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+            if (items == null) {\n+                triggerRebuildTask(ItemCollectionToolkit.build(Stream.empty()));\n+            } else if (!items.equals(currentItems)) {\n+                triggerRebuildTask(items);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void setFocus() {\n+        embeddingComposite.setFocus();\n+    }\n+\n+    private FlamegraphView<Node> createFlameGraph(Composite owner, DefaultToolTip tooltip) {\n+        var fg = new FlamegraphView<Node>();\n+        fg.putClientProperty(FlamegraphView.SHOW_STATS, false);\n+        fg.setShowMinimap(false);\n+\n+        fg.setRenderConfiguration(\n+                FrameTextsProvider.of(\n+                        frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(),\n+                        frame -> frame.isRoot() ? \"\"\n+                                : FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false, false,\n+                                false, false, true, false),\n+                        frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()),\n+                new DimmingFrameColorProvider<>(\n+                        frame -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n+                                .apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n+                FrameFontProvider.defaultFontProvider());\n+\n+        fg.setHoverListener((frameBox, frameRect, mouseEvent) -> {\n+            \/\/ This code knows too much about Flamegraph but given tooltips\n+            \/\/ will probably evolve it may be too early to refactor it\n+            var scrollPane = (JScrollPane) mouseEvent.getComponent();\n+            var canvas = scrollPane.getViewport().getView();\n+\n+            java.awt.Point pointOnCanvas = SwingUtilities.convertPoint(scrollPane, mouseEvent.getPoint(), canvas);\n+            pointOnCanvas.y = frameRect.y + frameRect.height;\n+            java.awt.Point componentPoint = SwingUtilities.convertPoint(canvas, pointOnCanvas,\n+                    flamegraphView.component);\n+\n+            if (frameBox.isRoot()) {\n+                return;\n+            }\n+\n+            var method = frameBox.actualNode.getFrame().getMethod();\n+\n+            var escapedMethod = frameBox.actualNode.getFrame()\n+                    .getHumanReadableShortString().replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n+            var sb = new StringBuilder()\n+                    .append(\"<form><p>\").append(\"<b>\").append(escapedMethod)\n+                    .append(\"<\/b><br\/>\");\n+\n+            var packageName = method.getType().getPackage();\n+            if (packageName != null) {\n+                sb.append(packageName).append(\"<br\/>\");\n+            }\n+            sb.append(\"<hr\/>Weight: \").append(frameBox.actualNode.getCumulativeWeight()).append(\"<br\/>\")\n+                    .append(\"Type: \").append(frameBox.actualNode.getFrame().getType()).append(\"<br\/>\");\n+\n+            var bci = frameBox.actualNode.getFrame().getBCI();\n+            if (bci != null) {\n+                sb.append(\"BCI: \").append(bci).append(\"<br\/>\");\n+            }\n+            var frameLineNumber = frameBox.actualNode.getFrame().getFrameLineNumber();\n+            if (frameLineNumber != null) {\n+                sb.append(\"Line number: \").append(frameLineNumber).append(\"<br\/>\");\n+            }\n+            sb.append(\"<\/p><\/form>\");\n+            var text = sb.toString();\n+\n+            Display.getDefault().asyncExec(() -> {\n+                var control = Display.getDefault().getCursorControl();\n+\n+                if (Objects.equals(owner, control)) {\n+                    tooltip.setText(text);\n+\n+                    tooltip.hide();\n+                    tooltip.show(SWT_AWTBridge.toSWTPoint(componentPoint));\n+                }\n+            });\n+        });\n+\n+        return fg;\n+    }\n+\n+    private void triggerRebuildTask(IItemCollection items) {\n+        \/\/ Release old model calculation before building a new\n+        if (modelRebuildRunnable != null) {\n+            modelRebuildRunnable.setInvalid();\n+        }\n+\n+        currentItems = items;\n+        modelState = ModelState.NOT_STARTED;\n+        modelRebuildRunnable = new ModelRebuildRunnable(this, items);\n+        if (!modelRebuildRunnable.isInvalid) {\n+            MODEL_EXECUTOR.execute(modelRebuildRunnable);\n+        }\n+    }\n+\n+    private void setModel(\n+            final IItemCollection items, final List<FrameBox<Node>> flatFrameList, String rootFrameDescription) {\n+        if (ModelState.FINISHED.equals(modelState) && items.equals(currentItems)) {\n+            SwingUtilities.invokeLater(() -> {\n+                flamegraphView.setModel(new FrameModel<>(rootFrameDescription,\n+                        (frameA, frameB) -> Objects.equals(frameA.actualNode.getFrame(), frameB.actualNode.getFrame()),\n+                        flatFrameList));\n+\n+                Display.getDefault().asyncExec(() -> {\n+                    if (embeddingComposite.isDisposed()) {\n+                        return;\n+                    }\n+                    Stream.of(exportActions).forEach((action) -> action.setEnabled(!flatFrameList.isEmpty()));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void saveFlamegraph() {\n+        var future = new CompletableFuture<Path>();\n+\n+        DisplayToolkit.inDisplayThread().execute(() -> {\n+            var fd = new FileDialog(embeddingComposite.getShell(), SWT.SAVE);\n+            fd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));\n+            fd.setFilterNames(\n+                    new String[]{getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});\n+            fd.setFilterExtensions(new String[]{\"*.jpg\", \"*.png\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+            fd.setFileName(\"flame_graph\"); \/\/$NON-NLS-1$\n+            fd.setOverwrite(true);\n+            if (fd.open() == null) {\n+                future.cancel(true);\n+                return;\n+            }\n+\n+            var fileName = fd.getFileName().toLowerCase();\n+            \/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n+            if (!fileName.endsWith(\".jpg\") && !fileName.endsWith(\".jpeg\") && !fileName.endsWith(\".png\")) { \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+                future.completeExceptionally(new UnsupportedOperationException(\"Unsupported image format\")); \/\/$NON-NLS-1$\n+                return;\n+            }\n+            future.complete(Paths.get(fd.getFilterPath(), fd.getFileName()));\n+        });\n+\n+        Supplier<RenderedImage> generator = () -> {\n+            var fgImage = new FlamegraphImage<>(\n+                    FrameTextsProvider.of(\n+                            frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(), \/\/$NON-NLS-1$\n+                            frame -> frame.isRoot() ? \"\" \/\/$NON-NLS-1$\n+                                    : FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false,\n+                                    false, false, false, true, false),\n+                            frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()), \/\/$NON-NLS-1$\n+                    new DimmingFrameColorProvider<Node>(\n+                            frame -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n+                                    .apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n+                    FrameFontProvider.defaultFontProvider());\n+\n+            return fgImage.generate(flamegraphView.getFrameModel(), flamegraphView.getMode(), 2000);\n+        };\n+\n+        Optional.of(future)\n+                .map(f -> {\n+                    try {\n+                        return f.get();\n+                    } catch (CancellationException e) {\n+                        \/\/ noop : model calculation is canceled when is still running\n+                    } catch (InterruptedException | ExecutionException e) {\n+                        FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n+                    }\n+                    return null;\n+                })\n+                .ifPresent(destinationPath -> {\n+                    \/\/ make spotbugs happy about NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\n+                    var type = Optional.ofNullable(destinationPath.getFileName())\n+                            .map(p -> p.toString().toLowerCase())\n+                            .map(f ->\n+                                    switch (f.substring(f.lastIndexOf('.') + 1)) { \/\/$NON-NLS-1$\n+                                        case \"jpeg\", \"jpg\" -> \/\/$NON-NLS-1$\n+                                                \"jpg\"; \/\/$NON-NLS-1$\n+                                        case \"png\" -> \/\/$NON-NLS-1$\n+                                                \"png\"; \/\/$NON-NLS-1$\n+                                        default -> null;\n+                                    }\n+                            ).orElseThrow(() -> new IllegalStateException(\"Unhandled type for \" + destinationPath));\n+\n+                    try (var os = new BufferedOutputStream(Files.newOutputStream(destinationPath))) {\n+                        ImageIO.write(\n+                                generator.get(),\n+                                type,\n+                                os\n+                        );\n+                    } catch (IOException e) {\n+                        FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n+                    }\n+                });\n+    }\n+\n+    private static ImageDescriptor flameviewImageDescriptor(String iconName) {\n+        return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n+    }\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/views\/FlamegraphSwingView.java","additions":658,"deletions":0,"binary":false,"changes":658,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flamegraph.views;\n+\n+import org.eclipse.jface.layout.GridLayoutFactory;\n+import org.eclipse.jface.window.DefaultToolTip;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.ui.forms.widgets.FormText;\n+\n+\/**\n+ * This tool tip extends the Jface implementation and relies on the {@link FormText} control\n+ * to render the text.\n+ * \n+ * @author brice.dutheil\n+ * @see FormText\n+ *\/\n+public class StyledToolTip extends DefaultToolTip {\n+\tpublic StyledToolTip(Control control) {\n+\t\tsuper(control);\n+\t}\n+\n+\tpublic StyledToolTip(Control control, int style, boolean manualActivation) {\n+\t\tsuper(control, style, manualActivation);\n+\t}\n+\n+\t@Override\n+\tprotected Composite createToolTipContentArea(Event event, Composite parent) {\n+\t\tfinal Composite container = setDefaultLayout(new Composite(parent, SWT.NULL), event);\n+\t\tGridLayoutFactory.fillDefaults().margins(2, 2).generateLayout(container);\n+\t\tFormText formText = setDefaultLayout(new FormText(container, SWT.NONE), event);\n+\t\t\n+\t\tString pseudoHtml = getText(event);\n+\n+\t\tformText.setText(pseudoHtml, true, false);\n+\t\treturn parent;\n+\t}\n+\n+\tprivate <T extends Control> T setDefaultLayout(T control, Event event) {\n+\t\tcontrol.setBackground(getBackgroundColor(event));\n+\t\tcontrol.setForeground(getForegroundColor(event));\n+\t\tcontrol.setFont(getFont(event));\n+\t\treturn control;\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/views\/StyledToolTip.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -57,0 +57,2 @@\n+FLAMEVIEW_TOGGLE_MINIMAP=Toggle minimap\n+FLAMEVIEW_RESET_ZOOM=Reset zoom\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/messages.properties","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameview\/messages.properties","status":"copied"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -57,0 +57,2 @@\n+FLAMEVIEW_TOGGLE_MINIMAP=Toggle minimap\n+FLAMEVIEW_RESET_ZOOM=Reset zoom\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/messages_ja.properties","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameview\/messages_ja.properties","status":"copied"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -57,0 +57,2 @@\n+FLAMEVIEW_TOGGLE_MINIMAP=Toggle minimap\n+FLAMEVIEW_RESET_ZOOM=Reset zoom\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/messages_zh_CN.properties","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameview\/messages_zh_CN.properties","status":"copied"},{"patch":"@@ -91,0 +91,1 @@\n+\t\t<module>org.openjdk.jmc.flightrecorder.flamegraph<\/module>\n","filename":"application\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-09\/platform-definition-2022-09.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-12\/platform-definition-2022-12.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.rc3\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2023-03\/platform-definition-2023-03.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+\t\t<fireplace.version>0.0.1-rc3<\/fireplace.version>\n+\t\t<radiance.version>6.0.0<\/radiance.version>\n@@ -133,0 +135,23 @@\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>io.github.bric3.fireplace:fireplace-swing:${fireplace.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>io.github.bric3.fireplace:fireplace-swt-awt-bridge:${fireplace.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>io.github.bric3.fireplace:fireplace-swing-animation:${fireplace.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<!-- Dependency of fireplace-swing-animation -->\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.pushing-pixels:radiance-animation:${radiance.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t\t<override>true<\/override>\n+\t\t\t\t\t\t\t\t\t<instructions>\n+\t\t\t\t\t\t\t\t\t\t<Bundle-Name>radiance-animation<\/Bundle-Name>\n+\t\t\t\t\t\t\t\t\t\t<Bundle-SymbolicName>radiance-animation<\/Bundle-SymbolicName>\n+\t\t\t\t\t\t\t\t\t\t<Export-Package>org.pushingpixels.radiance.animation.api.*<\/Export-Package>\n+\t\t\t\t\t\t\t\t\t<\/instructions>\n+\t\t\t\t\t\t\t\t<\/artifact>\n","filename":"releng\/third-party\/pom.xml","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}