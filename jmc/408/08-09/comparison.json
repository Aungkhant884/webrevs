{"files":[{"patch":"@@ -50,3 +50,0 @@\n-import java.awt.Component;\n-import java.awt.Rectangle;\n-import java.awt.event.MouseEvent;\n@@ -65,0 +62,1 @@\n+import java.util.Optional;\n@@ -72,0 +70,1 @@\n+import java.util.function.Supplier;\n@@ -81,2 +80,0 @@\n-import org.eclipse.jface.action.IMenuManager;\n-import org.eclipse.jface.action.IToolBarManager;\n@@ -94,1 +91,0 @@\n-import org.eclipse.swt.widgets.Control;\n@@ -96,1 +92,0 @@\n-import org.eclipse.swt.widgets.Event;\n@@ -98,1 +93,0 @@\n-import org.eclipse.swt.widgets.Listener;\n@@ -107,2 +101,0 @@\n-import org.openjdk.jmc.common.IMCMethod;\n-import org.openjdk.jmc.common.IMCPackage;\n@@ -110,1 +102,0 @@\n-import org.openjdk.jmc.common.item.IItemIterable;\n@@ -129,1 +120,0 @@\n-import io.github.bric3.fireplace.flamegraph.FlamegraphView.HoverListener;\n@@ -139,514 +129,529 @@\n-\tprivate static final String DIR_ICONS = \"icons\/\"; \/\/$NON-NLS-1$\n-\tprivate static final String PLUGIN_ID = \"org.openjdk.jmc.flightrecorder.flamegraph\"; \/\/$NON-NLS-1$\n-\n-\tprivate static final int MODEL_EXECUTOR_THREADS_NUMBER = 3;\n-\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(MODEL_EXECUTOR_THREADS_NUMBER,\n-\t\t\tnew ThreadFactory() {\n-\t\t\t\tprivate ThreadGroup group = new ThreadGroup(\"FlameGraphModelCalculationGroup\");\n-\t\t\t\tprivate AtomicInteger counter = new AtomicInteger();\n-\n-\t\t\t\t@Override\n-\t\t\t\tpublic Thread newThread(Runnable r) {\n-\t\t\t\t\tThread t = new Thread(group, r, \"FlamegraphJavaModelCalculation-\" + counter.getAndIncrement());\n-\t\t\t\t\tt.setDaemon(true);\n-\t\t\t\t\treturn t;\n-\t\t\t\t}\n-\t\t\t});\n-\tprivate FrameSeparator frameSeparator;\n-\n-\tprivate SashForm container;\n-\tprivate EmbeddingComposite embeddingComposite;\n-\tprivate FlamegraphView<Node> flamegraphView;\n-\n-\tprivate GroupByAction[] groupByActions;\n-\tprivate ViewModeAction[] groupByFlameviewActions;\n-\tprivate ExportAction[] exportActions;\n-\tprivate boolean threadRootAtTop = true;\n-\tprivate boolean icicleViewActive = true;\n-\tprivate IItemCollection currentItems;\n-\tprivate volatile ModelState modelState = ModelState.NONE;\n-\tprivate ModelRebuildRunnable modelRebuildRunnable;\n-\n-\tprivate enum GroupActionType {\n-\t\tTHREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),\n-\t\tLAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),\n-\t\tICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n-\t\t\t\tFlamegraphImages.ICON_ICICLE_FLIP)),\n-\t\tFLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n-\t\t\t\tFlamegraphImages.ICON_FLAME_FLIP));\n-\n-\t\tprivate final String message;\n-\t\tprivate final int action;\n-\t\tprivate final ImageDescriptor imageDescriptor;\n-\n-\t\tprivate GroupActionType(String message, int action, ImageDescriptor imageDescriptor) {\n-\t\t\tthis.message = message;\n-\t\t\tthis.action = action;\n-\t\t\tthis.imageDescriptor = imageDescriptor;\n-\t\t}\n-\t}\n-\n-\tprivate enum ModelState {\n-\t\tNOT_STARTED, STARTED, FINISHED, NONE;\n-\t}\n-\n-\tprivate class GroupByAction extends Action {\n-\t\tprivate final GroupActionType actionType;\n-\n-\t\tGroupByAction(GroupActionType actionType) {\n-\t\t\tsuper(actionType.message, actionType.action);\n-\t\t\tthis.actionType = actionType;\n-\t\t\tsetToolTipText(actionType.message);\n-\t\t\tsetImageDescriptor(actionType.imageDescriptor);\n-\t\t\tsetChecked(GroupActionType.THREAD_ROOT.equals(actionType) == threadRootAtTop);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t\tboolean newValue = isChecked() == GroupActionType.THREAD_ROOT.equals(actionType);\n-\t\t\tif (newValue != threadRootAtTop) {\n-\t\t\t\tthreadRootAtTop = newValue;\n-\t\t\t\ttriggerRebuildTask(currentItems);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate class ViewModeAction extends Action {\n-\t\tprivate final GroupActionType actionType;\n-\n-\t\tViewModeAction(GroupActionType actionType) {\n-\t\t\tsuper(actionType.message, actionType.action);\n-\t\t\tthis.actionType = actionType;\n-\t\t\tsetToolTipText(actionType.message);\n-\t\t\tsetImageDescriptor(actionType.imageDescriptor);\n-\t\t\tsetChecked(GroupActionType.ICICLE_GRAPH.equals(actionType) == icicleViewActive);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t\ticicleViewActive = GroupActionType.ICICLE_GRAPH.equals(actionType);\n-\t\t\tSwingUtilities.invokeLater(() -> flamegraphView\n-\t\t\t\t\t.setMode(icicleViewActive ? FlamegraphView.Mode.ICICLEGRAPH : FlamegraphView.Mode.FLAMEGRAPH));\n-\t\t}\n-\t}\n-\n-\tprivate class ToggleMinimapAction extends Action {\n-\t\tprivate ToggleMinimapAction() {\n-\t\t\tsuper(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP), IAction.AS_CHECK_BOX);\n-\t\t\tsetToolTipText(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP));\n-\t\t\tsetImageDescriptor(flameviewImageDescriptor(FlamegraphImages.ICON_MINIMAP));\n-\n-\t\t\tsetChecked(false);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t\tboolean toggleMinimap = !flamegraphView.isShowMinimap();\n-\t\t\tSwingUtilities.invokeLater(() -> flamegraphView.setShowMinimap(toggleMinimap));\n-\t\t\tsetChecked(toggleMinimap);\n-\t\t}\n-\t}\n-\n-\tprivate class ResetZoomAction extends Action {\n-\t\tprivate ResetZoomAction() {\n-\t\t\tsuper(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM), IAction.AS_PUSH_BUTTON);\n-\t\t\tsetToolTipText(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM));\n-\t\t\tsetImageDescriptor(flameviewImageDescriptor(FlamegraphImages.ICON_RESET_ZOOM));\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t\tSwingUtilities.invokeLater(() -> flamegraphView.resetZoom());\n-\t\t}\n-\t}\n-\n-\tprivate enum ExportActionType {\n-\t\tSAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()\n-\t\t\t\t.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()\n-\t\t\t\t\t\t.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),\n-\t\tPRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()\n-\t\t\t\t.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()\n-\t\t\t\t\t\t.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));\n-\n-\t\tprivate final String message;\n-\t\tprivate final int action;\n-\t\tprivate final ImageDescriptor imageDescriptor;\n-\t\tprivate final ImageDescriptor disabledImageDescriptor;\n-\n-\t\tprivate ExportActionType(String message, int action, ImageDescriptor imageDescriptor,\n-\t\t\t\tImageDescriptor disabledImageDescriptor) {\n-\t\t\tthis.message = message;\n-\t\t\tthis.action = action;\n-\t\t\tthis.imageDescriptor = imageDescriptor;\n-\t\t\tthis.disabledImageDescriptor = disabledImageDescriptor;\n-\t\t}\n-\t}\n-\n-\tprivate class ExportAction extends Action {\n-\t\tprivate final ExportActionType actionType;\n-\n-\t\tprivate ExportAction(ExportActionType actionType) {\n-\t\t\tsuper(actionType.message, actionType.action);\n-\t\t\tthis.actionType = actionType;\n-\t\t\tsetToolTipText(actionType.message);\n-\t\t\tsetImageDescriptor(actionType.imageDescriptor);\n-\t\t\tsetDisabledImageDescriptor(actionType.disabledImageDescriptor);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t\tswitch (actionType) {\n-\t\t\tcase SAVE_AS:\n-\t\t\t\tExecutors.newSingleThreadExecutor().execute(FlamegraphSwingView.this::saveFlamegraph);\n-\t\t\t\tbreak;\n-\t\t\tcase PRINT:\n-\t\t\t\t\/\/ not supported\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate static class ModelRebuildRunnable implements Runnable {\n-\n-\t\tprivate FlamegraphSwingView view;\n-\t\tprivate IItemCollection items;\n-\t\tprivate volatile boolean isInvalid;\n-\n-\t\tprivate ModelRebuildRunnable(FlamegraphSwingView view, IItemCollection items) {\n-\t\t\tthis.view = view;\n-\t\t\tthis.items = items;\n-\t\t}\n-\n-\t\tprivate void setInvalid() {\n-\t\t\tthis.isInvalid = true;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void run() {\n-\t\t\tview.modelState = ModelState.STARTED;\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(items, view.frameSeparator, !view.threadRootAtTop);\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tString rootFrameDescription = createRootNodeDescription(items);\n-\t\t\tList<FrameBox<Node>> frameBoxList = convert(treeModel);\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t} else {\n-\t\t\t\tview.modelState = ModelState.FINISHED;\n-\t\t\t\tview.setModel(items, frameBoxList, rootFrameDescription);\n-\t\t\t}\n-\t\t}\n-\n-\t\tprivate static List<FrameBox<Node>> convert(StacktraceTreeModel model) {\n-\t\t\tList<FrameBox<Node>> nodes = new ArrayList<FrameBox<Node>>();\n-\n-\t\t\tFrameBox.flattenAndCalculateCoordinate(nodes, model.getRoot(), Node::getChildren, Node::getCumulativeWeight,\n-\t\t\t\t\tnode -> {\n-\t\t\t\t\t\t\/\/ Eclipse looses the type in the inner lambda, so it needs to be\n-\t\t\t\t\t\t\/\/ explicitly available\n-\t\t\t\t\t\tStream<Node> children = node.getChildren().stream();\n-\t\t\t\t\t\treturn children.mapToDouble(Node::getCumulativeWeight).sum();\n-\t\t\t\t\t}, 0.0d, 1.0d, 0);\n-\n-\t\t\treturn nodes;\n-\t\t}\n-\n-\t\tprivate static String createRootNodeDescription(IItemCollection items) {\n-\t\t\tMap<String, Long> freq = eventTypeFrequency(items);\n-\t\t\t\/\/ root => 51917 events of 1 type: Method Profiling Sample[51917],\n-\t\t\tlong totalEvents = freq.values().stream().mapToLong(Long::longValue).sum();\n-\t\t\tif (totalEvents == 0) {\n-\t\t\t\treturn \"Stack Trace not available\";\n-\t\t\t}\n-\t\t\tStringBuilder description = new StringBuilder(totalEvents + \" event(s) of \" + freq.size() + \" type(s): \");\n-\t\t\tint i = 0;\n-\t\t\tfor (Map.Entry<String, Long> e : freq.entrySet()) {\n-\t\t\t\tdescription.append(e.getKey()).append(\"[\").append(e.getValue()).append(\"]\");\n-\t\t\t\tif (i < freq.size() - 1 && i < 3) {\n-\t\t\t\t\tdescription.append(\", \");\n-\t\t\t\t}\n-\t\t\t\tif (i >= 3) {\n-\t\t\t\t\tdescription.append(\", ...\");\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t\ti++;\n-\t\t\t}\n-\n-\t\t\treturn description.toString();\n-\t\t}\n-\n-\t\tprivate static Map<String, Long> eventTypeFrequency(IItemCollection items) {\n-\t\t\tMap<String, Long> eventCountByType = new HashMap<String, Long>();\n-\t\t\tfor (IItemIterable eventIterable : items) {\n-\t\t\t\tif (eventIterable.getItemCount() == 0) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\teventCountByType.compute(eventIterable.getType().getName(),\n-\t\t\t\t\t\t(k, v) -> (v == null ? 0 : v) + eventIterable.getItemCount());\n-\t\t\t}\n-\t\t\t\/\/ sort the map in ascending order of values\n-\t\t\treturn eventCountByType.entrySet().stream().sorted(reverseOrder(comparingByValue()))\n-\t\t\t\t\t.collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void init(IViewSite site, IMemento memento) throws PartInitException {\n-\t\tsuper.init(site, memento);\n-\t\tframeSeparator = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD, false);\n-\t\tgroupByActions = new GroupByAction[] {new GroupByAction(GroupActionType.LAST_FRAME),\n-\t\t\t\tnew GroupByAction(GroupActionType.THREAD_ROOT)};\n-\t\tgroupByFlameviewActions = new ViewModeAction[] {new ViewModeAction(GroupActionType.FLAME_GRAPH),\n-\t\t\t\tnew ViewModeAction(GroupActionType.ICICLE_GRAPH)};\n-\t\texportActions = new ExportAction[] {new ExportAction(ExportActionType.SAVE_AS),\n-\t\t\t\t\/* new ExportAction(ExportActionType.PRINT) *\/};\n-\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(false));\n-\n-\t\tIMenuManager siteMenu = site.getActionBars().getMenuManager();\n-\t\tsiteMenu.add(new Separator(MCContextMenuManager.GROUP_TOP));\n-\t\tsiteMenu.add(new Separator(MCContextMenuManager.GROUP_VIEWER_SETUP));\n-\n-\t\tIToolBarManager toolBar = site.getActionBars().getToolBarManager();\n-\t\ttoolBar.add(new ResetZoomAction());\n-\t\ttoolBar.add(new ToggleMinimapAction());\n-\t\ttoolBar.add(new Separator());\n-\t\tStream.of(groupByFlameviewActions).forEach(toolBar::add);\n-\t\ttoolBar.add(new Separator());\n-\t\tStream.of(groupByActions).forEach(toolBar::add);\n-\t\ttoolBar.add(new Separator());\n-\t\tStream.of(exportActions).forEach(toolBar::add);\n-\t\tgetSite().getPage().addSelectionListener(this);\n-\t}\n-\n-\t@Override\n-\tpublic void dispose() {\n-\t\tgetSite().getPage().removeSelectionListener(this);\n-\t\tsuper.dispose();\n-\t}\n-\n-\t@Override\n-\tpublic void createPartControl(Composite parent) {\n-\t\tcontainer = new SashForm(parent, SWT.HORIZONTAL);\n-\t\tembeddingComposite = new EmbeddingComposite(container);\n-\t\tcontainer.setMaximizedControl(embeddingComposite);\n-\n-\t\t\/\/ done here to avoid SWT complain about wrong thread\n-\t\tPoint embedSize = embeddingComposite.getSize();\n-\t\tjava.awt.Color bgColorAwtColor = SWT_AWTBridge.toAWTColor(container.getBackground());\n-\n-\t\tStyledToolTip tooltip = new StyledToolTip(embeddingComposite, ToolTip.NO_RECREATE, true);\n-\t\t{\n-\t\t\ttooltip.setPopupDelay(500);\n-\t\t\ttooltip.setShift(new Point(10, 5));\n-\n-\t\t\tembeddingComposite.addListener(SWT.MouseExit, new Listener() {\n-\t\t\t\tpublic void handleEvent(Event event) {\n-\t\t\t\t\tDisplay.getDefault().timerExec(300, () -> tooltip.hide());\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\n-\t\tembeddingComposite.init(() -> {\n-\t\t\tflamegraphView = createFlameGraph(embeddingComposite, tooltip);\n-\t\t\tnew ZoomAnimation().install(flamegraphView);\n-\n-\t\t\tflamegraphView.component.setBackground(bgColorAwtColor);\n-\t\t\treturn flamegraphView.component;\n-\t\t});\n-\t}\n-\n-\t@Override\n-\tpublic void selectionChanged(IWorkbenchPart part, ISelection selection) {\n-\t\tif (selection instanceof IStructuredSelection) {\n-\t\t\tObject first = ((IStructuredSelection) selection).getFirstElement();\n-\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n-\t\t\tif (items == null) {\n-\t\t\t\ttriggerRebuildTask(ItemCollectionToolkit.build(Stream.empty()));\n-\t\t\t} else if (!items.equals(currentItems)) {\n-\t\t\t\ttriggerRebuildTask(items);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setFocus() {\n-\t\tembeddingComposite.setFocus();\n-\t}\n-\n-\tprivate FlamegraphView<Node> createFlameGraph(Composite owner, DefaultToolTip tooltip) {\n-\t\tFlamegraphView<Node> fg = new FlamegraphView<Node>();\n-\t\tfg.putClientProperty(FlamegraphView.SHOW_STATS, false);\n-\t\tfg.setShowMinimap(false);\n-\n-\t\tfg.setRenderConfiguration(\n-\t\t\t\tFrameTextsProvider.of(\n-\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(),\n-\t\t\t\t\t\tframe -> frame.isRoot() ? \"\"\n-\t\t\t\t\t\t\t\t: FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false, false,\n-\t\t\t\t\t\t\t\t\t\tfalse, false, true, false),\n-\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()),\n-\t\t\t\tnew DimmingFrameColorProvider<Node>(\n-\t\t\t\t\t\tframe -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n-\t\t\t\t\t\t\t\t.apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n-\t\t\t\tFrameFontProvider.defaultFontProvider());\n-\n-\t\tfg.setHoverListener(new HoverListener<Node>() {\n-\t\t\tpublic void onFrameHover(FrameBox<Node> frameBox, Rectangle frameRect, MouseEvent mouseEvent) {\n-\t\t\t\t\/\/ This code knows too much about Flamegraph but given tooltips\n-\t\t\t\t\/\/ will probably evolve it may be too early to refactor it\n-\t\t\t\tJScrollPane scrollPane = (JScrollPane) mouseEvent.getComponent();\n-\t\t\t\tComponent canvas = scrollPane.getViewport().getView();\n-\n-\t\t\t\tjava.awt.Point pointOnCanvas = SwingUtilities.convertPoint(scrollPane, mouseEvent.getPoint(), canvas);\n-\t\t\t\tpointOnCanvas.y = frameRect.y + frameRect.height;\n-\t\t\t\tjava.awt.Point componentPoint = SwingUtilities.convertPoint(canvas, pointOnCanvas,\n-\t\t\t\t\t\tflamegraphView.component);\n-\n-\t\t\t\tif (frameBox.isRoot()) {\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\n-\t\t\t\tIMCMethod method = frameBox.actualNode.getFrame().getMethod();\n-\n-\t\t\t\tString escapedMethod = frameBox.actualNode.getFrame()\n-\t\t\t\t\t\t.getHumanReadableShortString().replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n-\t\t\t\tStringBuilder sb = new StringBuilder()\n-\t\t\t\t\t\t.append(\"<form><p>\").append(\"<b>\").append(escapedMethod)\n-\t\t\t\t\t\t.append(\"<\/b><br\/>\");\n-\n-\t\t\t\tIMCPackage packageName = method.getType().getPackage();\n-\t\t\t\tif (packageName != null) {\n-\t\t\t\t\tsb.append(packageName).append(\"<br\/>\");\n-\t\t\t\t}\n-\t\t\t\tsb.append(\"<hr\/>Weight: \").append(frameBox.actualNode.getCumulativeWeight()).append(\"<br\/>\")\n-\t\t\t\t\t\t.append(\"Type: \").append(frameBox.actualNode.getFrame().getType()).append(\"<br\/>\");\n-\n-\t\t\t\tInteger bci = frameBox.actualNode.getFrame().getBCI();\n-\t\t\t\tif (bci != null) {\n-\t\t\t\t\tsb.append(\"BCI: \").append(bci).append(\"<br\/>\");\n-\t\t\t\t}\n-\t\t\t\tInteger frameLineNumber = frameBox.actualNode.getFrame().getFrameLineNumber();\n-\t\t\t\tif (frameLineNumber != null) {\n-\t\t\t\t\tsb.append(\"Line number: \").append(frameLineNumber).append(\"<br\/>\");\n-\t\t\t\t}\n-\t\t\t\tsb.append(\"<\/p><\/form>\");\n-\t\t\t\tString text = sb.toString();\n-\n-\t\t\t\tDisplay.getDefault().asyncExec(() -> {\n-\t\t\t\t\tControl control = Display.getDefault().getCursorControl();\n-\n-\t\t\t\t\tif (Objects.equals(owner, control)) {\n-\t\t\t\t\t\ttooltip.setText(text);\n-\n-\t\t\t\t\t\ttooltip.hide();\n-\t\t\t\t\t\ttooltip.show(SWT_AWTBridge.toSWTPoint(componentPoint));\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t}\n-\t\t});\n-\n-\t\treturn fg;\n-\t}\n-\n-\tprivate void triggerRebuildTask(IItemCollection items) {\n-\t\t\/\/ Release old model calculation before building a new\n-\t\tif (modelRebuildRunnable != null) {\n-\t\t\tmodelRebuildRunnable.setInvalid();\n-\t\t}\n-\n-\t\tcurrentItems = items;\n-\t\tmodelState = ModelState.NOT_STARTED;\n-\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, items);\n-\t\tif (!modelRebuildRunnable.isInvalid) {\n-\t\t\tMODEL_EXECUTOR.execute(modelRebuildRunnable);\n-\t\t}\n-\t}\n-\n-\tprivate void setModel(\n-\t\tfinal IItemCollection items, final List<FrameBox<Node>> flatFrameList, String rootFrameDescription) {\n-\t\tif (ModelState.FINISHED.equals(modelState) && items.equals(currentItems)) {\n-\t\t\tSwingUtilities.invokeLater(() -> {\n-\t\t\t\tflamegraphView.setModel(new FrameModel<Node>(rootFrameDescription,\n-\t\t\t\t\t\t(frameA, frameB) -> Objects.equals(frameA.actualNode.getFrame(), frameB.actualNode.getFrame()),\n-\t\t\t\t\t\tflatFrameList));\n-\n-\t\t\t\tDisplay.getDefault().asyncExec(() -> {\n-\t\t\t\t\tif (embeddingComposite.isDisposed()) {\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(!flatFrameList.isEmpty()));\n-\t\t\t\t});\n-\t\t\t});\n-\t\t}\n-\t}\n-\n-\tprivate void saveFlamegraph() {\n-\t\tCompletableFuture<Path> future = new CompletableFuture<Path>();\n-\n-\t\tDisplayToolkit.inDisplayThread().execute(() -> {\n-\t\t\tFileDialog fd = new FileDialog(embeddingComposite.getShell(), SWT.SAVE);\n-\t\t\tfd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));\n-\t\t\tfd.setFilterNames(\n-\t\t\t\t\tnew String[] {getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});\n-\t\t\tfd.setFilterExtensions(new String[] {\"*.jpg\", \"*.png\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\tfd.setFileName(\"flame_graph\"); \/\/$NON-NLS-1$\n-\t\t\tfd.setOverwrite(true);\n-\t\t\tif (fd.open() == null) {\n-\t\t\t\tfuture.cancel(true);\n-\t\t\t\treturn;\n-\t\t\t}\n-\n-\t\t\tString fileName = fd.getFileName().toLowerCase();\n-\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n-\t\t\tif (!fileName.endsWith(\".jpg\") && !fileName.endsWith(\".jpeg\") && !fileName.endsWith(\".png\")) { \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n-\t\t\t\tfuture.completeExceptionally(new UnsupportedOperationException(\"Unsupported image format\")); \/\/$NON-NLS-1$\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tfuture.complete(Paths.get(fd.getFilterPath(), fd.getFileName()));\n-\t\t});\n-\n-\t\ttry {\n-\t\t\tPath destinationPath = future.get();\n-\n-\t\t\tString type = null;\n-\t\t\tString filename = destinationPath.getFileName().toString().toLowerCase();\n-\t\t\tswitch (filename.substring(filename.lastIndexOf('.') + 1)) {\n-\t\t\tcase \"jpeg\": \/\/$NON-NLS-1$\n-\t\t\tcase \"jpg\": \/\/$NON-NLS-1$\n-\t\t\t\ttype = \"jpg\"; \/\/$NON-NLS-1$\n-\t\t\t\tbreak;\n-\t\t\tcase \"png\": \/\/$NON-NLS-1$\n-\t\t\t\ttype = \"png\"; \/\/$NON-NLS-1$\n-\t\t\t\tbreak;\n-\t\t\t}\n-\n-\t\t\tFlamegraphImage<Node> fgImage = new FlamegraphImage<>(\n-\t\t\t\t\tFrameTextsProvider.of(\n-\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(), \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\t\t\t: FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false,\n-\t\t\t\t\t\t\t\t\t\t\tfalse, false, false, true, false),\n-\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()), \/\/$NON-NLS-1$\n-\t\t\t\t\tnew DimmingFrameColorProvider<Node>(\n-\t\t\t\t\t\t\tframe -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n-\t\t\t\t\t\t\t\t\t.apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n-\t\t\t\t\tFrameFontProvider.defaultFontProvider());\n-\n-\t\t\tRenderedImage image = fgImage.generate(flamegraphView.getFrameModel(), flamegraphView.getMode(), 2000);\n-\t\t\ttry (BufferedOutputStream os = new BufferedOutputStream(Files.newOutputStream(destinationPath))) {\n-\t\t\t\tImageIO.write(image, type, os);\n-\t\t\t}\n-\t\t} catch (CancellationException e) {\n-\t\t\t\/\/ noop : model calculation is canceled when is still running\n-\t\t} catch (InterruptedException | ExecutionException | IOException e) {\n-\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-\n-\tprivate static ImageDescriptor flameviewImageDescriptor(String iconName) {\n-\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n-\t}\n+    private static final String DIR_ICONS = \"icons\/\"; \/\/$NON-NLS-1$\n+    private static final String PLUGIN_ID = \"org.openjdk.jmc.flightrecorder.flamegraph\"; \/\/$NON-NLS-1$\n+\n+    private static final int MODEL_EXECUTOR_THREADS_NUMBER = 3;\n+    private static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(MODEL_EXECUTOR_THREADS_NUMBER,\n+            new ThreadFactory() {\n+                private final ThreadGroup group = new ThreadGroup(\"FlameGraphModelCalculationGroup\"); \/\/$NON-NLS-1$\n+                private final AtomicInteger counter = new AtomicInteger();\n+\n+                @Override\n+                public Thread newThread(Runnable r) {\n+                    var t = new Thread(group, r, \"FlamegraphJavaModelCalculation-\" + counter.getAndIncrement()); \/\/$NON-NLS-1$\n+                    t.setDaemon(true);\n+                    return t;\n+                }\n+            });\n+    private FrameSeparator frameSeparator;\n+\n+    private SashForm container;\n+    private EmbeddingComposite embeddingComposite;\n+    private FlamegraphView<Node> flamegraphView;\n+\n+    private GroupByAction[] groupByActions;\n+    private ViewModeAction[] groupByFlameviewActions;\n+    private ExportAction[] exportActions;\n+    private boolean threadRootAtTop = true;\n+    private boolean icicleViewActive = true;\n+    private IItemCollection currentItems;\n+    private volatile ModelState modelState = ModelState.NONE;\n+    private ModelRebuildRunnable modelRebuildRunnable;\n+\n+    private enum GroupActionType {\n+        THREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),\n+        LAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),\n+        ICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n+                FlamegraphImages.ICON_ICICLE_FLIP)),\n+        FLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n+                FlamegraphImages.ICON_FLAME_FLIP));\n+\n+        private final String message;\n+        private final int action;\n+        private final ImageDescriptor imageDescriptor;\n+\n+        private GroupActionType(String message, int action, ImageDescriptor imageDescriptor) {\n+            this.message = message;\n+            this.action = action;\n+            this.imageDescriptor = imageDescriptor;\n+        }\n+    }\n+\n+    private enum ModelState {\n+        NOT_STARTED, STARTED, FINISHED, NONE;\n+    }\n+\n+    private class GroupByAction extends Action {\n+        private final GroupActionType actionType;\n+\n+        GroupByAction(GroupActionType actionType) {\n+            super(actionType.message, actionType.action);\n+            this.actionType = actionType;\n+            setToolTipText(actionType.message);\n+            setImageDescriptor(actionType.imageDescriptor);\n+            setChecked(GroupActionType.THREAD_ROOT.equals(actionType) == threadRootAtTop);\n+        }\n+\n+        @Override\n+        public void run() {\n+            boolean newValue = isChecked() == GroupActionType.THREAD_ROOT.equals(actionType);\n+            if (newValue != threadRootAtTop) {\n+                threadRootAtTop = newValue;\n+                triggerRebuildTask(currentItems);\n+            }\n+        }\n+    }\n+\n+    private class ViewModeAction extends Action {\n+        private final GroupActionType actionType;\n+\n+        ViewModeAction(GroupActionType actionType) {\n+            super(actionType.message, actionType.action);\n+            this.actionType = actionType;\n+            setToolTipText(actionType.message);\n+            setImageDescriptor(actionType.imageDescriptor);\n+            setChecked(GroupActionType.ICICLE_GRAPH.equals(actionType) == icicleViewActive);\n+        }\n+\n+        @Override\n+        public void run() {\n+            icicleViewActive = GroupActionType.ICICLE_GRAPH.equals(actionType);\n+            SwingUtilities.invokeLater(() -> flamegraphView\n+                    .setMode(icicleViewActive ? FlamegraphView.Mode.ICICLEGRAPH : FlamegraphView.Mode.FLAMEGRAPH));\n+        }\n+    }\n+\n+    private class ToggleMinimapAction extends Action {\n+        private ToggleMinimapAction() {\n+            super(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP), IAction.AS_CHECK_BOX);\n+            setToolTipText(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP));\n+            setImageDescriptor(flameviewImageDescriptor(FlamegraphImages.ICON_MINIMAP));\n+\n+            setChecked(false);\n+        }\n+\n+        @Override\n+        public void run() {\n+            boolean toggleMinimap = !flamegraphView.isShowMinimap();\n+            SwingUtilities.invokeLater(() -> flamegraphView.setShowMinimap(toggleMinimap));\n+            setChecked(toggleMinimap);\n+        }\n+    }\n+\n+    private class ResetZoomAction extends Action {\n+        private ResetZoomAction() {\n+            super(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM), IAction.AS_PUSH_BUTTON);\n+            setToolTipText(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM));\n+            setImageDescriptor(flameviewImageDescriptor(FlamegraphImages.ICON_RESET_ZOOM));\n+        }\n+\n+        @Override\n+        public void run() {\n+            SwingUtilities.invokeLater(() -> flamegraphView.resetZoom());\n+        }\n+    }\n+\n+    private enum ExportActionType {\n+        SAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()\n+                .getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()\n+                .getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),\n+        PRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()\n+                .getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()\n+                .getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));\n+\n+        private final String message;\n+        private final int action;\n+        private final ImageDescriptor imageDescriptor;\n+        private final ImageDescriptor disabledImageDescriptor;\n+\n+        private ExportActionType(String message, int action, ImageDescriptor imageDescriptor,\n+                                 ImageDescriptor disabledImageDescriptor) {\n+            this.message = message;\n+            this.action = action;\n+            this.imageDescriptor = imageDescriptor;\n+            this.disabledImageDescriptor = disabledImageDescriptor;\n+        }\n+    }\n+\n+    private class ExportAction extends Action {\n+        private final ExportActionType actionType;\n+\n+        private ExportAction(ExportActionType actionType) {\n+            super(actionType.message, actionType.action);\n+            this.actionType = actionType;\n+            setToolTipText(actionType.message);\n+            setImageDescriptor(actionType.imageDescriptor);\n+            setDisabledImageDescriptor(actionType.disabledImageDescriptor);\n+        }\n+\n+        @Override\n+        public void run() {\n+            switch (actionType) {\n+                case SAVE_AS:\n+                    Executors.newSingleThreadExecutor().execute(FlamegraphSwingView.this::saveFlamegraph);\n+                    break;\n+                case PRINT:\n+                    \/\/ not supported\n+                    break;\n+            }\n+        }\n+    }\n+\n+    private static class ModelRebuildRunnable implements Runnable {\n+\n+        private final FlamegraphSwingView view;\n+        private final IItemCollection items;\n+        private volatile boolean isInvalid;\n+\n+        private ModelRebuildRunnable(FlamegraphSwingView view, IItemCollection items) {\n+            this.view = view;\n+            this.items = items;\n+        }\n+\n+        private void setInvalid() {\n+            this.isInvalid = true;\n+        }\n+\n+        @Override\n+        public void run() {\n+            view.modelState = ModelState.STARTED;\n+            if (isInvalid) {\n+                return;\n+            }\n+            var treeModel = new StacktraceTreeModel(items, view.frameSeparator, !view.threadRootAtTop);\n+            if (isInvalid) {\n+                return;\n+            }\n+            var rootFrameDescription = createRootNodeDescription(items);\n+            var frameBoxList = convert(treeModel);\n+            if (isInvalid) {\n+                return;\n+            } else {\n+                view.modelState = ModelState.FINISHED;\n+                view.setModel(items, frameBoxList, rootFrameDescription);\n+            }\n+        }\n+\n+        private static List<FrameBox<Node>> convert(StacktraceTreeModel model) {\n+            var nodes = new ArrayList<FrameBox<Node>>();\n+\n+            FrameBox.flattenAndCalculateCoordinate(\n+                    nodes,\n+                    model.getRoot(),\n+                    Node::getChildren,\n+                    Node::getCumulativeWeight,\n+                    node -> node.getChildren().stream().mapToDouble(Node::getCumulativeWeight).sum(),\n+                    0.0d,\n+                    1.0d,\n+                    0\n+            );\n+\n+            return nodes;\n+        }\n+\n+        private static String createRootNodeDescription(IItemCollection items) {\n+            var freq = eventTypeFrequency(items);\n+            \/\/ root => 51917 events of 1 type: Method Profiling Sample[51917],\n+            long totalEvents = freq.values().stream().mapToLong(Long::longValue).sum();\n+            if (totalEvents == 0) {\n+                return \"Stack Trace not available\";\n+            }\n+            var description = new StringBuilder(totalEvents + \" event(s) of \" + freq.size() + \" type(s): \");\n+            int i = 0;\n+            for (var e : freq.entrySet()) {\n+                description.append(e.getKey()).append(\"[\").append(e.getValue()).append(\"]\");\n+                if (i < freq.size() - 1 && i < 3) {\n+                    description.append(\", \");\n+                }\n+                if (i >= 3) {\n+                    description.append(\", ...\");\n+                    break;\n+                }\n+                i++;\n+            }\n+\n+            return description.toString();\n+        }\n+\n+        private static Map<String, Long> eventTypeFrequency(IItemCollection items) {\n+            var eventCountByType = new HashMap<String, Long>();\n+            for (var eventIterable : items) {\n+                if (eventIterable.getItemCount() == 0) {\n+                    continue;\n+                }\n+                eventCountByType.compute(eventIterable.getType().getName(),\n+                        (k, v) -> (v == null ? 0 : v) + eventIterable.getItemCount());\n+            }\n+            \/\/ sort the map in ascending order of values\n+            return eventCountByType.entrySet().stream().sorted(reverseOrder(comparingByValue()))\n+                    .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n+        }\n+    }\n+\n+    @Override\n+    public void init(IViewSite site, IMemento memento) throws PartInitException {\n+        super.init(site, memento);\n+        frameSeparator = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD, false);\n+        groupByActions = new GroupByAction[]{new GroupByAction(GroupActionType.LAST_FRAME),\n+                new GroupByAction(GroupActionType.THREAD_ROOT)};\n+        groupByFlameviewActions = new ViewModeAction[]{new ViewModeAction(GroupActionType.FLAME_GRAPH),\n+                new ViewModeAction(GroupActionType.ICICLE_GRAPH)};\n+        exportActions = new ExportAction[]{new ExportAction(ExportActionType.SAVE_AS),\n+                \/* new ExportAction(ExportActionType.PRINT) *\/};\n+        Stream.of(exportActions).forEach((action) -> action.setEnabled(false));\n+\n+        var siteMenu = site.getActionBars().getMenuManager();\n+        siteMenu.add(new Separator(MCContextMenuManager.GROUP_TOP));\n+        siteMenu.add(new Separator(MCContextMenuManager.GROUP_VIEWER_SETUP));\n+\n+        var toolBar = site.getActionBars().getToolBarManager();\n+        toolBar.add(new ResetZoomAction());\n+        toolBar.add(new ToggleMinimapAction());\n+        toolBar.add(new Separator());\n+        Stream.of(groupByFlameviewActions).forEach(toolBar::add);\n+        toolBar.add(new Separator());\n+        Stream.of(groupByActions).forEach(toolBar::add);\n+        toolBar.add(new Separator());\n+        Stream.of(exportActions).forEach(toolBar::add);\n+        getSite().getPage().addSelectionListener(this);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        getSite().getPage().removeSelectionListener(this);\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void createPartControl(Composite parent) {\n+        container = new SashForm(parent, SWT.HORIZONTAL);\n+        embeddingComposite = new EmbeddingComposite(container);\n+        container.setMaximizedControl(embeddingComposite);\n+\n+        \/\/ done here to avoid SWT complain about wrong thread\n+        var embedSize = embeddingComposite.getSize();\n+        java.awt.Color bgColorAwtColor = SWT_AWTBridge.toAWTColor(container.getBackground());\n+\n+        var tooltip = new StyledToolTip(embeddingComposite, ToolTip.NO_RECREATE, true);\n+        {\n+            tooltip.setPopupDelay(500);\n+            tooltip.setShift(new Point(10, 5));\n+\n+            embeddingComposite.addListener(\n+                    SWT.MouseExit,\n+                    event -> Display.getDefault().timerExec(300, tooltip::hide)\n+            );\n+        }\n+\n+        embeddingComposite.init(() -> {\n+            flamegraphView = createFlameGraph(embeddingComposite, tooltip);\n+            new ZoomAnimation().install(flamegraphView);\n+\n+            flamegraphView.component.setBackground(bgColorAwtColor);\n+            return flamegraphView.component;\n+        });\n+    }\n+\n+    @Override\n+    public void selectionChanged(IWorkbenchPart part, ISelection selection) {\n+        if (selection instanceof IStructuredSelection) {\n+            var first = ((IStructuredSelection) selection).getFirstElement();\n+            var items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+            if (items == null) {\n+                triggerRebuildTask(ItemCollectionToolkit.build(Stream.empty()));\n+            } else if (!items.equals(currentItems)) {\n+                triggerRebuildTask(items);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void setFocus() {\n+        embeddingComposite.setFocus();\n+    }\n+\n+    private FlamegraphView<Node> createFlameGraph(Composite owner, DefaultToolTip tooltip) {\n+        var fg = new FlamegraphView<Node>();\n+        fg.putClientProperty(FlamegraphView.SHOW_STATS, false);\n+        fg.setShowMinimap(false);\n+\n+        fg.setRenderConfiguration(\n+                FrameTextsProvider.of(\n+                        frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(),\n+                        frame -> frame.isRoot() ? \"\"\n+                                : FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false, false,\n+                                false, false, true, false),\n+                        frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()),\n+                new DimmingFrameColorProvider<>(\n+                        frame -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n+                                .apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n+                FrameFontProvider.defaultFontProvider());\n+\n+        fg.setHoverListener((frameBox, frameRect, mouseEvent) -> {\n+            \/\/ This code knows too much about Flamegraph but given tooltips\n+            \/\/ will probably evolve it may be too early to refactor it\n+            var scrollPane = (JScrollPane) mouseEvent.getComponent();\n+            var canvas = scrollPane.getViewport().getView();\n+\n+            java.awt.Point pointOnCanvas = SwingUtilities.convertPoint(scrollPane, mouseEvent.getPoint(), canvas);\n+            pointOnCanvas.y = frameRect.y + frameRect.height;\n+            java.awt.Point componentPoint = SwingUtilities.convertPoint(canvas, pointOnCanvas,\n+                    flamegraphView.component);\n+\n+            if (frameBox.isRoot()) {\n+                return;\n+            }\n+\n+            var method = frameBox.actualNode.getFrame().getMethod();\n+\n+            var escapedMethod = frameBox.actualNode.getFrame()\n+                    .getHumanReadableShortString().replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n+            var sb = new StringBuilder()\n+                    .append(\"<form><p>\").append(\"<b>\").append(escapedMethod)\n+                    .append(\"<\/b><br\/>\");\n+\n+            var packageName = method.getType().getPackage();\n+            if (packageName != null) {\n+                sb.append(packageName).append(\"<br\/>\");\n+            }\n+            sb.append(\"<hr\/>Weight: \").append(frameBox.actualNode.getCumulativeWeight()).append(\"<br\/>\")\n+                    .append(\"Type: \").append(frameBox.actualNode.getFrame().getType()).append(\"<br\/>\");\n+\n+            var bci = frameBox.actualNode.getFrame().getBCI();\n+            if (bci != null) {\n+                sb.append(\"BCI: \").append(bci).append(\"<br\/>\");\n+            }\n+            var frameLineNumber = frameBox.actualNode.getFrame().getFrameLineNumber();\n+            if (frameLineNumber != null) {\n+                sb.append(\"Line number: \").append(frameLineNumber).append(\"<br\/>\");\n+            }\n+            sb.append(\"<\/p><\/form>\");\n+            var text = sb.toString();\n+\n+            Display.getDefault().asyncExec(() -> {\n+                var control = Display.getDefault().getCursorControl();\n+\n+                if (Objects.equals(owner, control)) {\n+                    tooltip.setText(text);\n+\n+                    tooltip.hide();\n+                    tooltip.show(SWT_AWTBridge.toSWTPoint(componentPoint));\n+                }\n+            });\n+        });\n+\n+        return fg;\n+    }\n+\n+    private void triggerRebuildTask(IItemCollection items) {\n+        \/\/ Release old model calculation before building a new\n+        if (modelRebuildRunnable != null) {\n+            modelRebuildRunnable.setInvalid();\n+        }\n+\n+        currentItems = items;\n+        modelState = ModelState.NOT_STARTED;\n+        modelRebuildRunnable = new ModelRebuildRunnable(this, items);\n+        if (!modelRebuildRunnable.isInvalid) {\n+            MODEL_EXECUTOR.execute(modelRebuildRunnable);\n+        }\n+    }\n+\n+    private void setModel(\n+            final IItemCollection items, final List<FrameBox<Node>> flatFrameList, String rootFrameDescription) {\n+        if (ModelState.FINISHED.equals(modelState) && items.equals(currentItems)) {\n+            SwingUtilities.invokeLater(() -> {\n+                flamegraphView.setModel(new FrameModel<>(rootFrameDescription,\n+                        (frameA, frameB) -> Objects.equals(frameA.actualNode.getFrame(), frameB.actualNode.getFrame()),\n+                        flatFrameList));\n+\n+                Display.getDefault().asyncExec(() -> {\n+                    if (embeddingComposite.isDisposed()) {\n+                        return;\n+                    }\n+                    Stream.of(exportActions).forEach((action) -> action.setEnabled(!flatFrameList.isEmpty()));\n+                });\n+            });\n+        }\n+    }\n+\n+    private void saveFlamegraph() {\n+        var future = new CompletableFuture<Path>();\n+\n+        DisplayToolkit.inDisplayThread().execute(() -> {\n+            var fd = new FileDialog(embeddingComposite.getShell(), SWT.SAVE);\n+            fd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));\n+            fd.setFilterNames(\n+                    new String[]{getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});\n+            fd.setFilterExtensions(new String[]{\"*.jpg\", \"*.png\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+            fd.setFileName(\"flame_graph\"); \/\/$NON-NLS-1$\n+            fd.setOverwrite(true);\n+            if (fd.open() == null) {\n+                future.cancel(true);\n+                return;\n+            }\n+\n+            var fileName = fd.getFileName().toLowerCase();\n+            \/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n+            if (!fileName.endsWith(\".jpg\") && !fileName.endsWith(\".jpeg\") && !fileName.endsWith(\".png\")) { \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+                future.completeExceptionally(new UnsupportedOperationException(\"Unsupported image format\")); \/\/$NON-NLS-1$\n+                return;\n+            }\n+            future.complete(Paths.get(fd.getFilterPath(), fd.getFileName()));\n+        });\n+\n+        Supplier<RenderedImage> generator = () -> {\n+            var fgImage = new FlamegraphImage<>(\n+                    FrameTextsProvider.of(\n+                            frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(), \/\/$NON-NLS-1$\n+                            frame -> frame.isRoot() ? \"\" \/\/$NON-NLS-1$\n+                                    : FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false,\n+                                    false, false, false, true, false),\n+                            frame -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()), \/\/$NON-NLS-1$\n+                    new DimmingFrameColorProvider<Node>(\n+                            frame -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n+                                    .apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n+                    FrameFontProvider.defaultFontProvider());\n+\n+            return fgImage.generate(flamegraphView.getFrameModel(), flamegraphView.getMode(), 2000);\n+        };\n+\n+        Optional.of(future)\n+                .map(f -> {\n+                    try {\n+                        return f.get();\n+                    } catch (CancellationException e) {\n+                        \/\/ noop : model calculation is canceled when is still running\n+                    } catch (InterruptedException | ExecutionException e) {\n+                        FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n+                    }\n+                    return null;\n+                })\n+                .ifPresent(destinationPath -> {\n+                    \/\/ make spotbugs happy about NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\n+                    var type = Optional.ofNullable(destinationPath.getFileName())\n+                            .map(p -> p.toString().toLowerCase())\n+                            .map(f ->\n+                                    switch (f.substring(f.lastIndexOf('.') + 1)) { \/\/$NON-NLS-1$\n+                                        case \"jpeg\", \"jpg\" -> \/\/$NON-NLS-1$\n+                                                \"jpg\"; \/\/$NON-NLS-1$\n+                                        case \"png\" -> \/\/$NON-NLS-1$\n+                                                \"png\"; \/\/$NON-NLS-1$\n+                                        default -> null;\n+                                    }\n+                            ).orElseThrow(() -> new IllegalStateException(\"Unhandled type for \" + destinationPath));\n+\n+                    try (var os = new BufferedOutputStream(Files.newOutputStream(destinationPath))) {\n+                        ImageIO.write(\n+                                generator.get(),\n+                                type,\n+                                os\n+                        );\n+                    } catch (IOException e) {\n+                        FlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n+                    }\n+                });\n+    }\n+\n+    private static ImageDescriptor flameviewImageDescriptor(String iconName) {\n+        return ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n+    }\n","filename":"application\/org.openjdk.jmc.flightrecorder.flamegraph\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flamegraph\/views\/FlamegraphSwingView.java","additions":531,"deletions":526,"binary":false,"changes":1057,"status":"modified"}]}