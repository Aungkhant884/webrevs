{"files":[{"patch":"@@ -188,0 +188,7 @@\n+   <plugin\n+         id=\"org.openjdk.jmc.flightrecorder.flameview-java\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n+\n","filename":"application\/org.openjdk.jmc.feature.flightrecorder\/feature.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -4,1 +4,0 @@\n-\t<classpathentry kind=\"src\" path=\"src\/main\/js\"\/>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/.classpath","additions":0,"deletions":1,"binary":false,"changes":1,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/.classpath","status":"copied"},{"patch":"@@ -3,1 +3,1 @@\n-\t<name>org.openjdk.jmc.browser.attach.ja<\/name>\n+\t<name>org.openjdk.jmc.flightrecorder.flameview-java<\/name>\n@@ -31,1 +31,0 @@\n-\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n@@ -33,0 +32,1 @@\n+\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/.project","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/l10n\/org.openjdk.jmc.browser.attach.ja\/.project","status":"copied"},{"patch":"@@ -0,0 +1,21 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Localization: plugin\n+Bundle-Name: FlameViewJava\n+Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.flameview-java; singleton:=true\n+Bundle-Version: 8.3.0.qualifier\n+Require-Bundle: org.eclipse.ui,\n+ org.eclipse.core.runtime,\n+ org.openjdk.jmc.flightrecorder,\n+ org.openjdk.jmc.flightrecorder.ui,\n+ org.openjdk.jmc.flightrecorder.rules,\n+ org.openjdk.jmc.common,\n+ fireplace-swing,\n+ fireplace-swt-awt-bridge,\n+ fireplace-swing-animation,\n+ radiance-animation\n+Bundle-RequiredExecutionEnvironment: JavaSE-11\n+Bundle-Vendor: Oracle Corporation\n+Automatic-Module-Name: org.openjdk.jmc.flightrecorder.ext.flameview-java\n+Export-Package: org.openjdk.jmc.flightrecorder.flameviewjava,\n+ org.openjdk.jmc.flightrecorder.flameviewjava.views\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/META-INF\/MANIFEST.MF","additions":21,"deletions":0,"binary":false,"changes":21,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+source.. = src\/main\/java\/\n+output.. = target\/classes\/\n+bin.includes = META-INF\/,\\\n+               .,\\\n+               plugin.xml,\\\n+               plugin.properties,\\\n+               icons\/\n+pde.match.rule.bundle=compatible\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/build.properties","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/flame.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flame.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/flame@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flame@2x.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/flameflip.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flameflip.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/flameflip@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/flameflip@2x.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/icicleflip.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/icicleflip.png","status":"copied"},{"patch":"","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/icicleflip@2x.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/icons\/icicleflip@2x.png","status":"copied"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/map.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<svg\n+        width=\"200\"\n+        height=\"200\"\n+        viewBox=\"0 0 52.916665 52.916666\"\n+        version=\"1.1\"\n+        id=\"svg12313\"\n+        xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\n+    <g id=\"layer1\">\n+        <path\n+                fill=\"none\"\n+                stroke=\"#637CA5\"\n+                stroke-width=\"5\"\n+                d=\"M 4.9131315,7.8985343 5.0413641,48.702044 18.634017,45.322612 34.278392,48.952371 47.871044,45.948432 V 5.2700874 L 34.801926,8.688152 19.112941,4.5848932 Z\"\n+                id=\"map\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#297437\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"M 10.583333,40.216666 19.05,37.967708 l 15.120469,4.051517 7.539902,-2.020311 -0.170788,0.08546\"\n+                id=\"root-frame\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#948334\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"m 20.902083,32.808333 13.11252,3.51349 2.894772,-0.867656\"\n+                id=\"frame-a\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#944434\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"m 30.294791,30.294791 3.042709,0.79375\"\n+                id=\"frame-b1\"\n+        \/>\n+        <path\n+                fill=\"none\"\n+                stroke=\"#944434\"\n+                stroke-width=\"4\"\n+                style=\"paint-order:markers fill stroke\"\n+                d=\"M 12.303125,34.528125 18.25625,32.808333\"\n+                id=\"frame-b2\"\n+        \/>\n+    <\/g>\n+<\/svg>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/map.svg","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/map@2x.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/reset-zoom.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<svg\n+        width=\"200\"\n+        height=\"200\"\n+        viewBox=\"0 0 200 200\"\n+        version=\"1.1\"\n+        xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\n+    <g id=\"magnifier\">\n+        <path\n+                fill=\"#637CA5\"\n+                stroke-width=\"7\"\n+                stroke=\"#637CA5\"\n+                d=\"M 87.359375,4.1269531 C 64.924608,3.3040022 42.455816,11.502669 25.755859,28.015625 a 9,9 0 0 0 -0.07227,12.728516 9,9 0 0 0 12.728515,0.07031 c 20.926187,-20.691861 53.4311,-24.735272 78.935556,-9.78125 25.50443,14.954022 37.33223,44.84362 28.92577,72.796879 -8.40646,27.95325 -34.95851,46.73868 -64.646482,45.55273 C 51.938982,148.19687 27.031455,127.36761 20.945312,98.841797 A 9,9 0 0 0 10.265625,91.917969 9,9 0 0 0 3.3417969,102.59766 C 11.149535,139.1926 43.190479,165.86235 80.910156,167.36914 118.62983,168.87593 152.73164,144.85971 163.51172,109.01367 174.2918,73.16763 158.93855,34.55223 126.45117,15.503906 114.26841,8.360785 100.82023,4.6207237 87.359375,4.1269531 Z\"\n+                id=\"circle\"\n+        \/>\n+        <path\n+                fill=\"#637CA5\"\n+                stroke=\"#637CA5\"\n+                stroke-width=\"26\"\n+                stroke-linecap=\"round\"\n+                d=\"m 137.10341,140.73762 c 82.4111,79.18213 0,0 0,0 z\"\n+                id=\"handle\"\n+        \/>\n+        <path\n+                fill=\"#637CA5\"\n+                stroke=\"#637CA5\"\n+                stroke-width=\"22\"\n+                stroke-linecap=\"round\"\n+                d=\"m 15.127275,14.1251 1.984848,39.242378 39.760602,-3.034511\"\n+                id=\"arrow\"\n+        \/>\n+    <\/g>\n+<\/svg>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/reset-zoom.svg","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/icons\/reset-zoom@2x.png","binary":true,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2019, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -34,1 +34,1 @@\n-FLAME_VIEW_NAME=Flame View\n+FLAME_VIEW_NAME=Flame Graph View\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/plugin.properties","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/plugin.properties","status":"copied"},{"patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+   Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<?eclipse version=\"3.2\"?>\n+<plugin>\n+\t<extension point=\"org.eclipse.ui.views\">\n+\t\t<view\n+\t\t\tallowMultiple=\"false\"\n+\t\t\tcategory=\"org.openjdk.jmc.ui.main\"\n+\t\t\tclass=\"org.openjdk.jmc.flightrecorder.flameviewjava.views.FlamegraphJavaView\"\n+\t\t\ticon=\"icons\/flame.png\"\n+\t\t\tid=\"org.openjdk.jmc.flightrecorder.flameview-java\"\n+\t\t\tname=\"%FLAME_VIEW_NAME\"\/>\n+\t<\/extension>\n+\t<extension point=\"org.eclipse.ui.perspectiveExtensions\">\n+\t\t<perspectiveExtension targetID=\"org.openjdk.jmc.ui.idesupport.StandardPerspective\">\n+\t\t\t<view\n+\t\t\t\tid=\"org.openjdk.jmc.flightrecorder.flameview-java\"\n+\t\t\t\trelationship=\"stack\"\n+\t\t\t\trelative=\"org.openjdk.jmc.flightrecorder.ui.StacktraceView\"\n+\t\t\t\tshowTitle=\"true\"\n+\t\t\t\tvisible=\"true\"\/>\n+\t\t<\/perspectiveExtension>\n+\t<\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/plugin.xml","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+   Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>org.openjdk.jmc.flightrecorder.flameview-java<\/artifactId>\n+\t<packaging>eclipse-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<spotless.config.path.js>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formattingjs.xml<\/spotless.config.path.js>\n+\t<\/properties>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t<\/plugins>\n+\t<\/build>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/pom.xml","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flameviewjava;\n+\n+\/**\n+ * Class that holds reference to the icons and images used by the Flight Recorder plug-in\n+ *\/\n+public final class FlameviewImages {\n+\tpublic static final String ICON_FLAME_FLIP = \"flameflip.png\"; \/\/$NON-NLS-1$\n+\tpublic static final String ICON_ICICLE_FLIP = \"icicleflip.png\"; \/\/$NON-NLS-1$\n+\tpublic static final String ICON_RESET_ZOOM = \"reset-zoom.png\"; \/\/$NON-NLS-1$\n+\tpublic static final String ICON_MINIMAP = \"map.png\"; \/\/$NON-NLS-1$\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/FlameviewImages.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flameviewjava;\n+\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public class Messages {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.flightrecorder.flameviewjava.messages\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n+\n+\tpublic static final String FLAMEVIEW_FLAME_GRAPH = \"FLAMEVIEW_FLAME_GRAPH\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_ICICLE_GRAPH = \"FLAMEVIEW_ICICLE_GRAPH\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_SAVE_AS = \"FLAMEVIEW_SAVE_AS\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_PRINT = \"FLAMEVIEW_PRINT\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_SAVE_FLAME_GRAPH_AS = \"FLAMEVIEW_SAVE_FLAME_GRAPH_AS\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_JPEG_IMAGE = \"FLAMEVIEW_JPEG_IMAGE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_PNG_IMAGE = \"FLAMEVIEW_PNG_IMAGE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_TOGGLE_MINIMAP = \"FLAMEVIEW_TOGGLE_MINIMAP\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEVIEW_RESET_ZOOM = \"FLAMEVIEW_RESET_ZOOM\"; \/\/$NON-NLS-1$\n+\n+\tprivate Messages() {\n+\t}\n+\n+\tpublic static String getString(String key) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn '!' + key + '!';\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/Messages.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -34,1 +34,1 @@\n-package org.openjdk.jmc.flightrecorder.flameview;\n+package org.openjdk.jmc.flightrecorder.flameviewjava;\n@@ -69,1 +69,1 @@\n-\t\treturn org.openjdk.jmc.flightrecorder.flameview.Messages.getString(key);\n+\t\treturn org.openjdk.jmc.flightrecorder.flameviewjava.Messages.getString(key);\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/MessagesUtils.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/MessagesUtils.java","status":"copied"},{"patch":"@@ -0,0 +1,654 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flameviewjava.views;\n+\n+import static java.util.Collections.reverseOrder;\n+import static java.util.Map.Entry.comparingByValue;\n+import static java.util.stream.Collectors.toMap;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_FLAME_GRAPH;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_ICICLE_GRAPH;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_JPEG_IMAGE;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_PNG_IMAGE;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_PRINT;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_RESET_ZOOM;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_SAVE_AS;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_SAVE_FLAME_GRAPH_AS;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.Messages.FLAMEVIEW_TOGGLE_MINIMAP;\n+import static org.openjdk.jmc.flightrecorder.flameviewjava.MessagesUtils.getFlameviewMessage;\n+\n+import java.awt.Component;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseEvent;\n+import java.awt.image.RenderedImage;\n+import java.io.BufferedOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+import java.util.stream.Stream;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+import org.eclipse.jface.action.Action;\n+import org.eclipse.jface.action.IAction;\n+import org.eclipse.jface.action.IMenuManager;\n+import org.eclipse.jface.action.IToolBarManager;\n+import org.eclipse.jface.action.Separator;\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.jface.resource.ResourceLocator;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.window.DefaultToolTip;\n+import org.eclipse.jface.window.ToolTip;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.graphics.Color;\n+import org.eclipse.swt.graphics.Point;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.swt.widgets.FileDialog;\n+import org.eclipse.swt.widgets.Listener;\n+import org.eclipse.ui.IMemento;\n+import org.eclipse.ui.ISelectionListener;\n+import org.eclipse.ui.ISharedImages;\n+import org.eclipse.ui.IViewSite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.ui.part.ViewPart;\n+import org.openjdk.jmc.common.IMCMethod;\n+import org.openjdk.jmc.common.IMCPackage;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.util.FormatToolkit;\n+import org.openjdk.jmc.flightrecorder.flameviewjava.FlameviewImages;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.Node;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;\n+import org.openjdk.jmc.ui.CoreImages;\n+import org.openjdk.jmc.ui.common.util.AdapterUtil;\n+import org.openjdk.jmc.ui.handlers.MCContextMenuManager;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+\n+import io.github.bric3.fireplace.core.ui.Colors;\n+import io.github.bric3.fireplace.flamegraph.ColorMapper;\n+import io.github.bric3.fireplace.flamegraph.DimmingFrameColorProvider;\n+import io.github.bric3.fireplace.flamegraph.FlamegraphImage;\n+import io.github.bric3.fireplace.flamegraph.FlamegraphView;\n+import io.github.bric3.fireplace.flamegraph.FlamegraphView.HoverListener;\n+import io.github.bric3.fireplace.flamegraph.FrameBox;\n+import io.github.bric3.fireplace.flamegraph.FrameFontProvider;\n+import io.github.bric3.fireplace.flamegraph.FrameModel;\n+import io.github.bric3.fireplace.flamegraph.FrameTextsProvider;\n+import io.github.bric3.fireplace.flamegraph.animation.ZoomAnimation;\n+import io.github.bric3.fireplace.swt_awt.EmbeddingComposite;\n+import io.github.bric3.fireplace.swt_awt.SWT_AWTBridge;\n+\n+public class FlamegraphJavaView extends ViewPart implements ISelectionListener {\n+\tprivate static final String DIR_ICONS = \"icons\/\"; \/\/$NON-NLS-1$\n+\tprivate static final String PLUGIN_ID = \"org.openjdk.jmc.flightrecorder.flameview-java\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final int MODEL_EXECUTOR_THREADS_NUMBER = 3;\n+\tprivate static final ExecutorService MODEL_EXECUTOR = Executors.newFixedThreadPool(MODEL_EXECUTOR_THREADS_NUMBER,\n+\t\t\tnew ThreadFactory() {\n+\t\t\t\tprivate ThreadGroup group = new ThreadGroup(\"FlameGraphModelCalculationGroup\");\n+\t\t\t\tprivate AtomicInteger counter = new AtomicInteger();\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic Thread newThread(Runnable r) {\n+\t\t\t\t\tThread t = new Thread(group, r, \"FlamegraphJavaModelCalculation-\" + counter.getAndIncrement());\n+\t\t\t\t\tt.setDaemon(true);\n+\t\t\t\t\treturn t;\n+\t\t\t\t}\n+\t\t\t});\n+\tprivate FrameSeparator frameSeparator;\n+\n+\tprivate SashForm container;\n+\tprivate EmbeddingComposite embeddingComposite;\n+\tprivate FlamegraphView<Node> flamegraphView;\n+\n+\tprivate GroupByAction[] groupByActions;\n+\tprivate ViewModeAction[] groupByFlameviewActions;\n+\tprivate ExportAction[] exportActions;\n+\tprivate boolean threadRootAtTop = true;\n+\tprivate boolean icicleViewActive = true;\n+\tprivate IItemCollection currentItems;\n+\tprivate volatile ModelState modelState = ModelState.NONE;\n+\tprivate ModelRebuildRunnable modelRebuildRunnable;\n+\n+\tprivate enum GroupActionType {\n+\t\tTHREAD_ROOT(Messages.STACKTRACE_VIEW_THREAD_ROOT, IAction.AS_RADIO_BUTTON, CoreImages.THREAD),\n+\t\tLAST_FRAME(Messages.STACKTRACE_VIEW_LAST_FRAME, IAction.AS_RADIO_BUTTON, CoreImages.METHOD_NON_OPTIMIZED),\n+\t\tICICLE_GRAPH(getFlameviewMessage(FLAMEVIEW_ICICLE_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n+\t\t\t\tFlameviewImages.ICON_ICICLE_FLIP)),\n+\t\tFLAME_GRAPH(getFlameviewMessage(FLAMEVIEW_FLAME_GRAPH), IAction.AS_RADIO_BUTTON, flameviewImageDescriptor(\n+\t\t\t\tFlameviewImages.ICON_FLAME_FLIP));\n+\n+\t\tprivate final String message;\n+\t\tprivate final int action;\n+\t\tprivate final ImageDescriptor imageDescriptor;\n+\n+\t\tprivate GroupActionType(String message, int action, ImageDescriptor imageDescriptor) {\n+\t\t\tthis.message = message;\n+\t\t\tthis.action = action;\n+\t\t\tthis.imageDescriptor = imageDescriptor;\n+\t\t}\n+\t}\n+\n+\tprivate enum ModelState {\n+\t\tNOT_STARTED, STARTED, FINISHED, NONE;\n+\t}\n+\n+\tprivate class GroupByAction extends Action {\n+\t\tprivate final GroupActionType actionType;\n+\n+\t\tGroupByAction(GroupActionType actionType) {\n+\t\t\tsuper(actionType.message, actionType.action);\n+\t\t\tthis.actionType = actionType;\n+\t\t\tsetToolTipText(actionType.message);\n+\t\t\tsetImageDescriptor(actionType.imageDescriptor);\n+\t\t\tsetChecked(GroupActionType.THREAD_ROOT.equals(actionType) == threadRootAtTop);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tboolean newValue = isChecked() == GroupActionType.THREAD_ROOT.equals(actionType);\n+\t\t\tif (newValue != threadRootAtTop) {\n+\t\t\t\tthreadRootAtTop = newValue;\n+\t\t\t\ttriggerRebuildTask(currentItems);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class ViewModeAction extends Action {\n+\t\tprivate final GroupActionType actionType;\n+\n+\t\tViewModeAction(GroupActionType actionType) {\n+\t\t\tsuper(actionType.message, actionType.action);\n+\t\t\tthis.actionType = actionType;\n+\t\t\tsetToolTipText(actionType.message);\n+\t\t\tsetImageDescriptor(actionType.imageDescriptor);\n+\t\t\tsetChecked(GroupActionType.ICICLE_GRAPH.equals(actionType) == icicleViewActive);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\ticicleViewActive = GroupActionType.ICICLE_GRAPH.equals(actionType);\n+\t\t\tSwingUtilities.invokeLater(() -> flamegraphView\n+\t\t\t\t\t.setMode(icicleViewActive ? FlamegraphView.Mode.ICICLEGRAPH : FlamegraphView.Mode.FLAMEGRAPH));\n+\t\t}\n+\t}\n+\n+\tprivate class ToggleMinimapAction extends Action {\n+\t\tprivate ToggleMinimapAction() {\n+\t\t\tsuper(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP), IAction.AS_CHECK_BOX);\n+\t\t\tsetToolTipText(getFlameviewMessage(FLAMEVIEW_TOGGLE_MINIMAP));\n+\t\t\tsetImageDescriptor(flameviewImageDescriptor(FlameviewImages.ICON_MINIMAP));\n+\n+\t\t\tsetChecked(false);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tboolean toggleMinimap = !flamegraphView.isShowMinimap();\n+\t\t\tSwingUtilities.invokeLater(() -> flamegraphView.setShowMinimap(toggleMinimap));\n+\t\t\tsetChecked(toggleMinimap);\n+\t\t}\n+\t}\n+\n+\tprivate class ResetZoomAction extends Action {\n+\t\tprivate ResetZoomAction() {\n+\t\t\tsuper(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM), IAction.AS_PUSH_BUTTON);\n+\t\t\tsetToolTipText(getFlameviewMessage(FLAMEVIEW_RESET_ZOOM));\n+\t\t\tsetImageDescriptor(flameviewImageDescriptor(FlameviewImages.ICON_RESET_ZOOM));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tSwingUtilities.invokeLater(() -> flamegraphView.resetZoom());\n+\t\t}\n+\t}\n+\n+\tprivate enum ExportActionType {\n+\t\tSAVE_AS(getFlameviewMessage(FLAMEVIEW_SAVE_AS), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench()\n+\t\t\t\t.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT), PlatformUI.getWorkbench()\n+\t\t\t\t\t\t.getSharedImages().getImageDescriptor(ISharedImages.IMG_ETOOL_SAVEAS_EDIT_DISABLED)),\n+\t\tPRINT(getFlameviewMessage(FLAMEVIEW_PRINT), IAction.AS_PUSH_BUTTON, PlatformUI.getWorkbench().getSharedImages()\n+\t\t\t\t.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT), PlatformUI.getWorkbench().getSharedImages()\n+\t\t\t\t\t\t.getImageDescriptor(ISharedImages.IMG_ETOOL_PRINT_EDIT_DISABLED));\n+\n+\t\tprivate final String message;\n+\t\tprivate final int action;\n+\t\tprivate final ImageDescriptor imageDescriptor;\n+\t\tprivate final ImageDescriptor disabledImageDescriptor;\n+\n+\t\tprivate ExportActionType(String message, int action, ImageDescriptor imageDescriptor,\n+\t\t\t\tImageDescriptor disabledImageDescriptor) {\n+\t\t\tthis.message = message;\n+\t\t\tthis.action = action;\n+\t\t\tthis.imageDescriptor = imageDescriptor;\n+\t\t\tthis.disabledImageDescriptor = disabledImageDescriptor;\n+\t\t}\n+\t}\n+\n+\tprivate class ExportAction extends Action {\n+\t\tprivate final ExportActionType actionType;\n+\n+\t\tprivate ExportAction(ExportActionType actionType) {\n+\t\t\tsuper(actionType.message, actionType.action);\n+\t\t\tthis.actionType = actionType;\n+\t\t\tsetToolTipText(actionType.message);\n+\t\t\tsetImageDescriptor(actionType.imageDescriptor);\n+\t\t\tsetDisabledImageDescriptor(actionType.disabledImageDescriptor);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tswitch (actionType) {\n+\t\t\tcase SAVE_AS:\n+\t\t\t\tExecutors.newSingleThreadExecutor().execute(FlamegraphJavaView.this::saveFlamegraph);\n+\t\t\t\tbreak;\n+\t\t\tcase PRINT:\n+\t\t\t\t\/\/ not supported\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static class ModelRebuildRunnable implements Runnable {\n+\n+\t\tprivate FlamegraphJavaView view;\n+\t\tprivate IItemCollection items;\n+\t\tprivate volatile boolean isInvalid;\n+\n+\t\tprivate ModelRebuildRunnable(FlamegraphJavaView view, IItemCollection items) {\n+\t\t\tthis.view = view;\n+\t\t\tthis.items = items;\n+\t\t}\n+\n+\t\tprivate void setInvalid() {\n+\t\t\tthis.isInvalid = true;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tview.modelState = ModelState.STARTED;\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(items, view.frameSeparator, !view.threadRootAtTop);\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tString rootFrameDescription = createRootNodeDescription(items);\n+\t\t\tList<FrameBox<Node>> frameBoxList = convert(treeModel);\n+\t\t\tif (isInvalid) {\n+\t\t\t\treturn;\n+\t\t\t} else {\n+\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\tview.setModel(items, frameBoxList, rootFrameDescription);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate static List<FrameBox<Node>> convert(StacktraceTreeModel model) {\n+\t\t\tList<FrameBox<Node>> nodes = new ArrayList<FrameBox<Node>>();\n+\n+\t\t\tFrameBox.flattenAndCalculateCoordinate(nodes, model.getRoot(), Node::getChildren, Node::getCumulativeWeight,\n+\t\t\t\t\tnode -> {\n+\t\t\t\t\t\t\/\/ Eclipse looses the type in the inner lambda, so it needs to be\n+\t\t\t\t\t\t\/\/ explicitly available\n+\t\t\t\t\t\tStream<Node> children = node.getChildren().stream();\n+\t\t\t\t\t\treturn children.mapToDouble(Node::getCumulativeWeight).sum();\n+\t\t\t\t\t}, 0.0d, 1.0d, 0);\n+\n+\t\t\treturn nodes;\n+\t\t}\n+\n+\t\tprivate static String createRootNodeDescription(IItemCollection items) {\n+\t\t\tMap<String, Long> freq = eventTypeFrequency(items);\n+\t\t\t\/\/ root => 51917 events of 1 type: Method Profiling Sample[51917],\n+\t\t\tlong totalEvents = freq.values().stream().mapToLong(Long::longValue).sum();\n+\t\t\tif (totalEvents == 0) {\n+\t\t\t\treturn \"Stack Trace not available\";\n+\t\t\t}\n+\t\t\tStringBuilder description = new StringBuilder(totalEvents + \" event(s) of \" + freq.size() + \" type(s): \");\n+\t\t\tint i = 0;\n+\t\t\tfor (Map.Entry<String, Long> e : freq.entrySet()) {\n+\t\t\t\tdescription.append(e.getKey()).append(\"[\").append(e.getValue()).append(\"]\");\n+\t\t\t\tif (i < freq.size() - 1 && i < 3) {\n+\t\t\t\t\tdescription.append(\", \");\n+\t\t\t\t}\n+\t\t\t\tif (i >= 3) {\n+\t\t\t\t\tdescription.append(\", ...\");\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\ti++;\n+\t\t\t}\n+\n+\t\t\treturn description.toString();\n+\t\t}\n+\n+\t\tprivate static Map<String, Long> eventTypeFrequency(IItemCollection items) {\n+\t\t\tMap<String, Long> eventCountByType = new HashMap<String, Long>();\n+\t\t\tfor (IItemIterable eventIterable : items) {\n+\t\t\t\tif (eventIterable.getItemCount() == 0) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\teventCountByType.compute(eventIterable.getType().getName(),\n+\t\t\t\t\t\t(k, v) -> (v == null ? 0 : v) + eventIterable.getItemCount());\n+\t\t\t}\n+\t\t\t\/\/ sort the map in ascending order of values\n+\t\t\treturn eventCountByType.entrySet().stream().sorted(reverseOrder(comparingByValue()))\n+\t\t\t\t\t.collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void init(IViewSite site, IMemento memento) throws PartInitException {\n+\t\tsuper.init(site, memento);\n+\t\tframeSeparator = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD, false);\n+\t\tgroupByActions = new GroupByAction[] {new GroupByAction(GroupActionType.LAST_FRAME),\n+\t\t\t\tnew GroupByAction(GroupActionType.THREAD_ROOT)};\n+\t\tgroupByFlameviewActions = new ViewModeAction[] {new ViewModeAction(GroupActionType.FLAME_GRAPH),\n+\t\t\t\tnew ViewModeAction(GroupActionType.ICICLE_GRAPH)};\n+\t\texportActions = new ExportAction[] {new ExportAction(ExportActionType.SAVE_AS),\n+\t\t\t\t\/* new ExportAction(ExportActionType.PRINT) *\/};\n+\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(false));\n+\n+\t\tIMenuManager siteMenu = site.getActionBars().getMenuManager();\n+\t\tsiteMenu.add(new Separator(MCContextMenuManager.GROUP_TOP));\n+\t\tsiteMenu.add(new Separator(MCContextMenuManager.GROUP_VIEWER_SETUP));\n+\n+\t\tIToolBarManager toolBar = site.getActionBars().getToolBarManager();\n+\t\ttoolBar.add(new ResetZoomAction());\n+\t\ttoolBar.add(new ToggleMinimapAction());\n+\t\ttoolBar.add(new Separator());\n+\t\tStream.of(groupByFlameviewActions).forEach(toolBar::add);\n+\t\ttoolBar.add(new Separator());\n+\t\tStream.of(groupByActions).forEach(toolBar::add);\n+\t\ttoolBar.add(new Separator());\n+\t\tStream.of(exportActions).forEach(toolBar::add);\n+\t\tgetSite().getPage().addSelectionListener(this);\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\tgetSite().getPage().removeSelectionListener(this);\n+\t\tsuper.dispose();\n+\t}\n+\n+\t@Override\n+\tpublic void createPartControl(Composite parent) {\n+\t\tcontainer = new SashForm(parent, SWT.HORIZONTAL);\n+\t\tembeddingComposite = new EmbeddingComposite(container);\n+\t\tcontainer.setMaximizedControl(embeddingComposite);\n+\n+\t\t\/\/ done here to avoid SWT complain about wrong thread\n+\t\tPoint embedSize = embeddingComposite.getSize();\n+\t\tjava.awt.Color bgColorAwtColor = SWT_AWTBridge.toAWTColor(container.getBackground());\n+\n+\t\tStyledToolTip tooltip = new StyledToolTip(embeddingComposite, ToolTip.NO_RECREATE, true);\n+\t\t{\n+\t\t\ttooltip.setPopupDelay(500);\n+\t\t\ttooltip.setShift(new Point(10, 5));\n+\n+\t\t\tembeddingComposite.addListener(SWT.MouseExit, new Listener() {\n+\t\t\t\tpublic void handleEvent(Event event) {\n+\t\t\t\t\tDisplay.getDefault().timerExec(300, () -> tooltip.hide());\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\n+\t\tembeddingComposite.init(() -> {\n+\t\t\tflamegraphView = createFlameGraph(embeddingComposite, tooltip);\n+\t\t\tnew ZoomAnimation().install(flamegraphView);\n+\n+\t\t\tflamegraphView.component.setBackground(bgColorAwtColor);\n+\t\t\treturn flamegraphView.component;\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tpublic void selectionChanged(IWorkbenchPart part, ISelection selection) {\n+\t\tif (selection instanceof IStructuredSelection) {\n+\t\t\tObject first = ((IStructuredSelection) selection).getFirstElement();\n+\t\t\tIItemCollection items = AdapterUtil.getAdapter(first, IItemCollection.class);\n+\t\t\tif (items == null) {\n+\t\t\t\ttriggerRebuildTask(ItemCollectionToolkit.build(Stream.empty()));\n+\t\t\t} else if (!items.equals(currentItems)) {\n+\t\t\t\ttriggerRebuildTask(items);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setFocus() {\n+\t\tembeddingComposite.setFocus();\n+\t}\n+\n+\tprivate FlamegraphView<Node> createFlameGraph(Composite owner, DefaultToolTip tooltip) {\n+\t\tFlamegraphView<Node> fg = new FlamegraphView<Node>();\n+\t\tfg.putClientProperty(FlamegraphView.SHOW_STATS, false);\n+\t\tfg.setShowMinimap(false);\n+\n+\t\tfg.setRenderConfiguration(\n+\t\t\t\tFrameTextsProvider.of(\n+\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(),\n+\t\t\t\t\t\tframe -> frame.isRoot() ? \"\"\n+\t\t\t\t\t\t\t\t: FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false, false,\n+\t\t\t\t\t\t\t\t\t\tfalse, false, true, false),\n+\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()),\n+\t\t\t\tnew DimmingFrameColorProvider<Node>(\n+\t\t\t\t\t\tframe -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n+\t\t\t\t\t\t\t\t.apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n+\t\t\t\tFrameFontProvider.defaultFontProvider());\n+\n+\t\tfg.setHoverListener(new HoverListener<Node>() {\n+\t\t\tpublic void onFrameHover(FrameBox<Node> frameBox, Rectangle frameRect, MouseEvent mouseEvent) {\n+\t\t\t\t\/\/ This code knows too much about Flamegraph but given tooltips\n+\t\t\t\t\/\/ will probably evolve it may be too early to refactor it\n+\t\t\t\tJScrollPane scrollPane = (JScrollPane) mouseEvent.getComponent();\n+\t\t\t\tComponent canvas = scrollPane.getViewport().getView();\n+\n+\t\t\t\tjava.awt.Point pointOnCanvas = SwingUtilities.convertPoint(scrollPane, mouseEvent.getPoint(), canvas);\n+\t\t\t\tpointOnCanvas.y = frameRect.y + frameRect.height;\n+\t\t\t\tjava.awt.Point componentPoint = SwingUtilities.convertPoint(canvas, pointOnCanvas,\n+\t\t\t\t\t\tflamegraphView.component);\n+\n+\t\t\t\tif (frameBox.isRoot()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\tIMCMethod method = frameBox.actualNode.getFrame().getMethod();\n+\n+\t\t\t\tString escapedMethod = frameBox.actualNode.getFrame()\n+\t\t\t\t\t\t.getHumanReadableShortString().replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n+\t\t\t\tStringBuilder sb = new StringBuilder()\n+\t\t\t\t\t\t.append(\"<form><p>\").append(\"<b>\").append(escapedMethod)\n+\t\t\t\t\t\t.append(\"<\/b><br\/>\");\n+\n+\t\t\t\tIMCPackage packageName = method.getType().getPackage();\n+\t\t\t\tif (packageName != null) {\n+\t\t\t\t\tsb.append(packageName).append(\"<br\/>\");\n+\t\t\t\t}\n+\t\t\t\tsb.append(\"<hr\/>Weight: \").append(frameBox.actualNode.getCumulativeWeight()).append(\"<br\/>\")\n+\t\t\t\t\t\t.append(\"Type: \").append(frameBox.actualNode.getFrame().getType()).append(\"<br\/>\");\n+\n+\t\t\t\tInteger bci = frameBox.actualNode.getFrame().getBCI();\n+\t\t\t\tif (bci != null) {\n+\t\t\t\t\tsb.append(\"BCI: \").append(bci).append(\"<br\/>\");\n+\t\t\t\t}\n+\t\t\t\tInteger frameLineNumber = frameBox.actualNode.getFrame().getFrameLineNumber();\n+\t\t\t\tif (frameLineNumber != null) {\n+\t\t\t\t\tsb.append(\"Line number: \").append(frameLineNumber).append(\"<br\/>\");\n+\t\t\t\t}\n+\t\t\t\tsb.append(\"<\/p><\/form>\");\n+\t\t\t\tString text = sb.toString();\n+\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> {\n+\t\t\t\t\tControl control = Display.getDefault().getCursorControl();\n+\n+\t\t\t\t\tif (Objects.equals(owner, control)) {\n+\t\t\t\t\t\ttooltip.setText(text);\n+\n+\t\t\t\t\t\ttooltip.hide();\n+\t\t\t\t\t\ttooltip.show(SWT_AWTBridge.toSWTPoint(componentPoint));\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\t\t});\n+\n+\t\treturn fg;\n+\t}\n+\n+\tprivate void triggerRebuildTask(IItemCollection items) {\n+\t\t\/\/ Release old model calculation before building a new\n+\t\tif (modelRebuildRunnable != null) {\n+\t\t\tmodelRebuildRunnable.setInvalid();\n+\t\t}\n+\n+\t\tcurrentItems = items;\n+\t\tmodelState = ModelState.NOT_STARTED;\n+\t\tmodelRebuildRunnable = new ModelRebuildRunnable(this, items);\n+\t\tif (!modelRebuildRunnable.isInvalid) {\n+\t\t\tMODEL_EXECUTOR.execute(modelRebuildRunnable);\n+\t\t}\n+\t}\n+\n+\tprivate void setModel(\n+\t\tfinal IItemCollection items, final List<FrameBox<Node>> flatFrameList, String rootFrameDescription) {\n+\t\tif (ModelState.FINISHED.equals(modelState) && items.equals(currentItems)) {\n+\t\t\tSwingUtilities.invokeLater(() -> {\n+\t\t\t\tflamegraphView.setModel(new FrameModel<Node>(rootFrameDescription,\n+\t\t\t\t\t\t(frameA, frameB) -> Objects.equals(frameA.actualNode.getFrame(), frameB.actualNode.getFrame()),\n+\t\t\t\t\t\tflatFrameList));\n+\n+\t\t\t\tDisplay.getDefault().asyncExec(() -> {\n+\t\t\t\t\tif (embeddingComposite.isDisposed()) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tStream.of(exportActions).forEach((action) -> action.setEnabled(!flatFrameList.isEmpty()));\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\t}\n+\n+\tprivate void saveFlamegraph() {\n+\t\tCompletableFuture<Path> future = new CompletableFuture<Path>();\n+\n+\t\tDisplayToolkit.inDisplayThread().execute(() -> {\n+\t\t\tFileDialog fd = new FileDialog(embeddingComposite.getShell(), SWT.SAVE);\n+\t\t\tfd.setText(getFlameviewMessage(FLAMEVIEW_SAVE_FLAME_GRAPH_AS));\n+\t\t\tfd.setFilterNames(\n+\t\t\t\t\tnew String[] {getFlameviewMessage(FLAMEVIEW_JPEG_IMAGE), getFlameviewMessage(FLAMEVIEW_PNG_IMAGE)});\n+\t\t\tfd.setFilterExtensions(new String[] {\"*.jpg\", \"*.png\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\tfd.setFileName(\"flame_graph\"); \/\/$NON-NLS-1$\n+\t\t\tfd.setOverwrite(true);\n+\t\t\tif (fd.open() == null) {\n+\t\t\t\tfuture.cancel(true);\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tString fileName = fd.getFileName().toLowerCase();\n+\t\t\t\/\/ FIXME: FileDialog filterIndex returns -1 (https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=546256)\n+\t\t\tif (!fileName.endsWith(\".jpg\") && !fileName.endsWith(\".jpeg\") && !fileName.endsWith(\".png\")) { \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+\t\t\t\tfuture.completeExceptionally(new UnsupportedOperationException(\"Unsupported image format\")); \/\/$NON-NLS-1$\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tfuture.complete(Paths.get(fd.getFilterPath(), fd.getFileName()));\n+\t\t});\n+\n+\t\ttry {\n+\t\t\tPath destinationPath = future.get();\n+\n+\t\t\tString type = null;\n+\t\t\tString filename = destinationPath.getFileName().toString().toLowerCase();\n+\t\t\tswitch (filename.substring(filename.lastIndexOf('.') + 1)) {\n+\t\t\tcase \"jpeg\": \/\/$NON-NLS-1$\n+\t\t\tcase \"jpg\": \/\/$NON-NLS-1$\n+\t\t\t\ttype = \"jpg\"; \/\/$NON-NLS-1$\n+\t\t\t\tbreak;\n+\t\t\tcase \"png\": \/\/$NON-NLS-1$\n+\t\t\t\ttype = \"png\"; \/\/$NON-NLS-1$\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\tFlamegraphImage<Node> fgImage = new FlamegraphImage<>(\n+\t\t\t\t\tFrameTextsProvider.of(\n+\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getHumanReadableShortString(), \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t: FormatToolkit.getHumanReadable(frame.actualNode.getFrame().getMethod(), false,\n+\t\t\t\t\t\t\t\t\t\t\tfalse, false, false, true, false),\n+\t\t\t\t\t\t\tframe -> frame.isRoot() ? \"\" : frame.actualNode.getFrame().getMethod().getMethodName()), \/\/$NON-NLS-1$\n+\t\t\t\t\tnew DimmingFrameColorProvider<Node>(\n+\t\t\t\t\t\t\tframe -> ColorMapper.ofObjectHashUsing(Colors.Palette.DATADOG.colors())\n+\t\t\t\t\t\t\t\t\t.apply(frame.actualNode.getFrame().getMethod().getType().getPackage())),\n+\t\t\t\t\tFrameFontProvider.defaultFontProvider());\n+\n+\t\t\tRenderedImage image = fgImage.generate(flamegraphView.getFrameModel(), flamegraphView.getMode(), 2000);\n+\t\t\ttry (BufferedOutputStream os = new BufferedOutputStream(Files.newOutputStream(destinationPath))) {\n+\t\t\t\tImageIO.write(image, type, os);\n+\t\t\t}\n+\t\t} catch (CancellationException e) {\n+\t\t\t\/\/ noop : model calculation is canceled when is still running\n+\t\t} catch (InterruptedException | ExecutionException | IOException e) {\n+\t\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to save flame graph\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\tprivate static ImageDescriptor flameviewImageDescriptor(String iconName) {\n+\t\treturn ResourceLocator.imageDescriptorFromBundle(PLUGIN_ID, DIR_ICONS + iconName).orElse(null); \/\/$NON-NLS-1$\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/views\/FlamegraphJavaView.java","additions":654,"deletions":0,"binary":false,"changes":654,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flameviewjava.views;\n+\n+import org.eclipse.jface.layout.GridLayoutFactory;\n+import org.eclipse.jface.window.DefaultToolTip;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.ui.forms.widgets.FormText;\n+\n+\/**\n+ * This tool tip extends the Jface implementation and relies on the {@link FormText} control\n+ * to render the text.\n+ * \n+ * @author brice.dutheil\n+ * @see FormText\n+ *\/\n+public class StyledToolTip extends DefaultToolTip {\n+\tpublic StyledToolTip(Control control) {\n+\t\tsuper(control);\n+\t}\n+\n+\tpublic StyledToolTip(Control control, int style, boolean manualActivation) {\n+\t\tsuper(control, style, manualActivation);\n+\t}\n+\n+\t@Override\n+\tprotected Composite createToolTipContentArea(Event event, Composite parent) {\n+\t\tfinal Composite container = setDefaultLayout(new Composite(parent, SWT.NULL), event);\n+\t\tGridLayoutFactory.fillDefaults().margins(2, 2).generateLayout(container);\n+\t\tFormText formText = setDefaultLayout(new FormText(container, SWT.NONE), event);\n+\t\t\n+\t\tString pseudoHtml = getText(event);\n+\n+\t\tformText.setText(pseudoHtml, true, false);\n+\t\treturn parent;\n+\t}\n+\n+\tprivate <T extends Control> T setDefaultLayout(T control, Event event) {\n+\t\tcontrol.setBackground(getBackgroundColor(event));\n+\t\tcontrol.setForeground(getForegroundColor(event));\n+\t\tcontrol.setFont(getFont(event));\n+\t\treturn control;\n+\t}\n+}\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/views\/StyledToolTip.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -57,0 +57,2 @@\n+FLAMEVIEW_TOGGLE_MINIMAP=Toggle minimap\n+FLAMEVIEW_RESET_ZOOM=Reset zoom\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/messages.properties","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameview\/messages.properties","status":"copied"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -57,0 +57,2 @@\n+FLAMEVIEW_TOGGLE_MINIMAP=Toggle minimap\n+FLAMEVIEW_RESET_ZOOM=Reset zoom\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/messages_ja.properties","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameview\/messages_ja.properties","status":"copied"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2022, Datadog, Inc. All rights reserved.\n@@ -57,0 +57,2 @@\n+FLAMEVIEW_TOGGLE_MINIMAP=Toggle minimap\n+FLAMEVIEW_RESET_ZOOM=Reset zoom\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview-java\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameviewjava\/messages_zh_CN.properties","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/flameview\/messages_zh_CN.properties","status":"copied"},{"patch":"@@ -90,0 +90,1 @@\n+\t\t<module>org.openjdk.jmc.flightrecorder.flameview-java<\/module>\n","filename":"application\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-06\/platform-definition-2021-06.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-09\/platform-definition-2021-09.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2021-12\/platform-definition-2021-12.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-03\/platform-definition-2022-03.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+            <unit id=\"fireplace-swing\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swt-awt-bridge\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"fireplace-swing-animation\" version=\"0.0.1.20220908124742\"\/>\n+            <unit id=\"radiance-animation\" version=\"6.0.0\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2022-06\/platform-definition-2022-06.target","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+\t\t<fireplace.version>0.0.1-rc3<\/fireplace.version>\n+\t\t<radiance.version>6.0.0<\/radiance.version>\n@@ -118,0 +120,23 @@\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>io.github.bric3.fireplace:fireplace-swing:${fireplace.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>io.github.bric3.fireplace:fireplace-swt-awt-bridge:${fireplace.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>io.github.bric3.fireplace:fireplace-swing-animation:${fireplace.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<!-- Dependency of fireplace-swing-animation -->\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.pushing-pixels:radiance-animation:${radiance.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<source>true<\/source>\n+\t\t\t\t\t\t\t\t\t<override>true<\/override>\n+\t\t\t\t\t\t\t\t\t<instructions>\n+\t\t\t\t\t\t\t\t\t\t<Bundle-Name>radiance-animation<\/Bundle-Name>\n+\t\t\t\t\t\t\t\t\t\t<Bundle-SymbolicName>radiance-animation<\/Bundle-SymbolicName>\n+\t\t\t\t\t\t\t\t\t\t<Export-Package>org.pushingpixels.radiance.animation.api.*<\/Export-Package>\n+\t\t\t\t\t\t\t\t\t<\/instructions>\n+\t\t\t\t\t\t\t\t<\/artifact>\n","filename":"releng\/third-party\/pom.xml","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}