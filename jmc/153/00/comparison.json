{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.text.MessageFormat;\n@@ -65,0 +66,4 @@\n+\t\tif (verifyNone == null) {\n+\t\t\tverifyNone = RulesToolkit.findMatches(JdkTypeIDs.VM_INFO, items, JdkAttributes.JAVA_ARGUMENTS,\n+\t\t\t\t\t\"\\\\-Xverify:none\", false); \/\/$NON-NLS-1$\n+\t\t}\n@@ -68,0 +73,4 @@\n+\t\tif (noVerify == null) {\n+\t\t\tnoVerify = RulesToolkit.findMatches(JdkTypeIDs.VM_INFO, items, JdkAttributes.JAVA_ARGUMENTS, \"\\\\-noverify*\", \/\/$NON-NLS-1$\n+\t\t\t\t\tfalse);\n+\t\t}\n@@ -76,2 +85,4 @@\n-\t\t\treturn new Result(this, 100, Messages.getString(Messages.VerifyNoneRule_TEXT_INFO),\n-\t\t\t\t\tMessages.getString(Messages.VerifyNoneRule_TEXT_INFO_LONG));\n+\t\t\tString argument = verifyNone != null ? verifyNone : noVerify;\n+\t\t\tString longDescription = MessageFormat.format(Messages.getString(Messages.VerifyNoneRule_TEXT_INFO_LONG),\n+\t\t\t\t\targument);\n+\t\t\treturn new Result(this, 100, Messages.getString(Messages.VerifyNoneRule_TEXT_INFO), longDescription);\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/VerifyNoneRule.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -517,1 +517,2 @@\n-VerifyNoneRule_TEXT_INFO_LONG=The application ran with bytecode verification disabled. Disabling bytecode verification is unsafe and should not be done in a production system. If it is not necessary for the application, then don't use '-Xverify:none' or '-noverify' on the command line. See the <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/ENV04-J.+Do+not+disable+bytecode+verification\">Secure Coding Standard for Java<\/a>.\n+# {0} argument used for disabling bytecode verficiation\n+VerifyNoneRule_TEXT_INFO_LONG=The application ran with bytecode verification disabled with ''{0}'' argument. Disabling bytecode verification is unsafe and should not be done in a production system. If it is not necessary for the application, then don't use '-Xverify:none' or '-noverify' on the command line. See the <a href=\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/ENV04-J.+Do+not+disable+bytecode+verification\">Secure Coding Standard for Java<\/a>.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import org.openjdk.jmc.common.item.IAccessorKey;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.util.MemberAccessorToolkit;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+\n+public class VMInfoTestEvent extends TestEvent {\n+\tprivate final String jvmArguments;\n+\tprivate final String javaArguments;\n+\n+\tpublic VMInfoTestEvent(String jvmArguments, String javaArguments) {\n+\t\tsuper(JdkTypeIDs.VM_INFO);\n+\t\tthis.jvmArguments = jvmArguments;\n+\t\tthis.javaArguments = javaArguments;\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\tif (\"jvmArguments\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, String, String> constant(jvmArguments);\n+\t\t}\n+\t\tif (\"javaArguments\".equals(attribute.getIdentifier())) {\n+\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, String, String> constant(javaArguments);\n+\t\t}\n+\t\treturn null;\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/VMInfoTestEvent.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.test.rules.jdk;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.general.VerifyNoneRule;\n+\n+public class VerifyNoneRuleTest {\n+\n+\t@Test\n+\tpublic void verifyNone_jvmArguments() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new VMInfoTestEvent(\"-Xverify:none\", \"\")};\n+\t\ttestVerifyNoneRule(testEvents,\n+\t\t\t\t\"The application ran with bytecode verification disabled with '-Xverify:none' argument. Disabling bytecode verification is unsafe and should not be done in a production system. If it is not necessary for the application, then dont use -Xverify:none or -noverify on the command line. See the <a href=\\\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/ENV04-J.+Do+not+disable+bytecode+verification\\\">Secure Coding Standard for Java<\/a>.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Test\n+\tpublic void verifyNone_javaArguments() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new VMInfoTestEvent(\"\", \"-Xverify:none\")};\n+\t\ttestVerifyNoneRule(testEvents,\n+\t\t\t\t\"The application ran with bytecode verification disabled with '-Xverify:none' argument. Disabling bytecode verification is unsafe and should not be done in a production system. If it is not necessary for the application, then dont use -Xverify:none or -noverify on the command line. See the <a href=\\\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/ENV04-J.+Do+not+disable+bytecode+verification\\\">Secure Coding Standard for Java<\/a>.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Test\n+\tpublic void noVerify_jvmArguments() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new VMInfoTestEvent(\"-noverify\", \"\")};\n+\t\ttestVerifyNoneRule(testEvents,\n+\t\t\t\t\"The application ran with bytecode verification disabled with '-noverify' argument. Disabling bytecode verification is unsafe and should not be done in a production system. If it is not necessary for the application, then dont use -Xverify:none or -noverify on the command line. See the <a href=\\\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/ENV04-J.+Do+not+disable+bytecode+verification\\\">Secure Coding Standard for Java<\/a>.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Test\n+\tpublic void noVerify_javaArguments() {\n+\t\tTestEvent[] testEvents = new TestEvent[] {new VMInfoTestEvent(\"\", \"-noverify\")};\n+\t\ttestVerifyNoneRule(testEvents,\n+\t\t\t\t\"The application ran with bytecode verification disabled with '-noverify' argument. Disabling bytecode verification is unsafe and should not be done in a production system. If it is not necessary for the application, then dont use -Xverify:none or -noverify on the command line. See the <a href=\\\"https:\/\/www.securecoding.cert.org\/confluence\/display\/java\/ENV04-J.+Do+not+disable+bytecode+verification\\\">Secure Coding Standard for Java<\/a>.\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\tprivate void testVerifyNoneRule(TestEvent[] testEvents, String descriptionExpected) {\n+\t\tIItemCollection events = new MockEventCollection(testEvents);\n+\t\t@SuppressWarnings(\"restriction\")\n+\t\tVerifyNoneRule verifyNoneRule = new VerifyNoneRule();\n+\t\tRunnableFuture<Result> future = verifyNoneRule.evaluate(events, IPreferenceValueProvider.DEFAULT_VALUES);\n+\t\ttry {\n+\t\t\tfuture.run();\n+\t\t\tResult res = future.get();\n+\t\t\tString longDesc = res.getLongDescription();\n+\t\t\tAssert.assertEquals(descriptionExpected, longDesc);\n+\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/VerifyNoneRuleTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}