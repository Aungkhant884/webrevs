{"files":[{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.TypedField;\n@@ -96,1 +97,1 @@\n-\tvoid writeValueType(LEB128Writer writer, TypedValueImpl typedValue, boolean useCp) {\n+\tvoid writeValueType(LEB128Writer writer, TypedValueImpl typedValue, boolean useConstantPoolReferences) {\n@@ -102,1 +103,1 @@\n-\t\t\twriteBuiltinType(writer, typedValue, useCp);\n+\t\t\twriteBuiltinType(writer, typedValue, useConstantPoolReferences);\n@@ -107,1 +108,2 @@\n-\t\t\t\tif (useCp) { \/\/ (assumption) all custom types have constant pool\n+\t\t\t\tif (type.hasConstantPool()) {\n+\t\t\t\t\t\/\/ only if cp-refs are allowed\n@@ -111,1 +113,2 @@\n-\t\t\t\t\t\tif (fieldValue.getField().isArray()) {\n+\t\t\t\t\t\tTypedField field = fieldValue.getField();\n+\t\t\t\t\t\tif (field.isArray()) {\n@@ -114,1 +117,1 @@\n-\t\t\t\t\t\t\t\twriteValueType(writer, t, true);\n+\t\t\t\t\t\t\t\twriteValueType(writer, t, t.getType().hasConstantPool());\n@@ -117,1 +120,1 @@\n-\t\t\t\t\t\t\twriteValueType(writer, fieldValue.getValue(), true);\n+\t\t\t\t\t\t\twriteValueType(writer, fieldValue.getValue(), field.getType().hasConstantPool());\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/ConstantPool.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}