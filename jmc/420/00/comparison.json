{"files":[{"patch":"@@ -267,0 +267,2 @@\n+\tpublic static String HeapPage_SIZE_TOTAL_PERCENTAGE;\n+\tpublic static String HeapPage_SIZE_TOTAL_PERCENTAGE_DESC;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,0 +134,4 @@\n+\tprivate static final String AVG_SIZE_COL = \"avgSize\"; \/\/$NON-NLS-1$\n+\tprivate static final String AVG_INSTANCES_COL = \"avgInstances\"; \/\/$NON-NLS-1$\n+\tprivate static final String INSTANCES_INCREASE_COL = \"instancesIncrease\"; \/\/$NON-NLS-1$\n+\tprivate static final String HEAP_PERCENT_COL = \"heapPercent\"; \/\/$NON-NLS-1$\n@@ -179,0 +183,5 @@\n+\t\t\tHISTOGRAM.addColumn(AVG_INSTANCES_COL, JdkAggregators.OBJECT_COUNT_AVG_INSTANCES);\n+\t\t\tHISTOGRAM.addColumn(AVG_SIZE_COL, JdkAggregators.OBJECT_COUNT_AVG_SIZE);\n+\t\t\tHISTOGRAM.addColumn(INSTANCES_INCREASE_COL, ObjectStatisticsDataProvider.getIncreaseInstancesAggregator());\n+\t\t\tHISTOGRAM.addPercentageColumn(HEAP_PERCENT_COL, JdkAggregators.OBJECT_COUNT_TOTAL_SIZE,\n+\t\t\t\t\tMessages.HeapPage_SIZE_TOTAL_PERCENTAGE, Messages.HeapPage_SIZE_TOTAL_PERCENTAGE_DESC);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/HeapPage.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -379,0 +379,2 @@\n+HeapPage_SIZE_TOTAL_PERCENTAGE=Percentage of Heap\n+HeapPage_SIZE_TOTAL_PERCENTAGE_DESC=Total size of all objects of the class as a percentage.\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,2 +105,2 @@\n-\t * @return an aggregator for the increase in the live set between the first and last garbage\n-\t *         collections\n+\t * @return an aggregator for the increase in the live size set between the first and last\n+\t *         garbage collections\n@@ -133,0 +133,31 @@\n+\n+\t\/**\n+\t * @return an aggregator for the increase in the live instances set between the first and last\n+\t *         garbage collections\n+\t *\/\n+\tpublic static IAggregator<IQuantity, ?> getIncreaseInstancesAggregator() {\n+\t\treturn new Aggregators.MergingAggregator<IQuantity, IncreaseCalculator>(\n+\t\t\t\tMessages.getString(Messages.ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE),\n+\t\t\t\tMessages.getString(Messages.ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE_DESC),\n+\t\t\t\tUnitLookup.MEMORY) {\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean acceptType(IType<IItem> type) {\n+\t\t\t\treturn JdkTypeIDs.OBJECT_COUNT.equals(type.getIdentifier());\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic IncreaseCalculator newItemConsumer(IType<IItem> type) {\n+\t\t\t\tIType<IItem> iType = type;\n+\t\t\t\treturn new IncreaseCalculator(JfrAttributes.END_TIME.getAccessor(iType),\n+\t\t\t\t\t\tJdkAttributes.COUNT.getAccessor(iType));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic IQuantity getValue(IncreaseCalculator consumer) {\n+\t\t\t\treturn consumer == null || consumer.maxX == null ? null : consumer.yAtMaxX.subtract(consumer.yAtMinX);\n+\n+\t\t\t}\n+\t\t};\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/dataproviders\/ObjectStatisticsDataProvider.java","additions":33,"deletions":2,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -460,0 +460,2 @@\n+\tpublic static final String ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE = \"ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE\"; \/\/$NON-NLS-1$\n+\tpublic static final String ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE_DESC = \"ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE_DESC\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -501,0 +501,2 @@\n+ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE=Live Instances Increase\n+ObjectStatisticsDataProvider_AGGR_LIVE_INSTANCES_INCREASE_DESC=The difference in total instances from after the first garbage collection to after the last\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,0 +207,6 @@\n+\tpublic static final IAggregator<IQuantity, ?> OBJECT_COUNT_AVG_SIZE = avg(\n+\t\t\tMessages.getString(Messages.AGGR_OBJECT_COUNT_AVG_SIZE),\n+\t\t\tMessages.getString(Messages.AGGR_OBJECT_COUNT_AVG_SIZE_DESC), OBJECT_COUNT, HEAP_TOTAL);\n+\tpublic static final IAggregator<IQuantity, ?> OBJECT_COUNT_TOTAL_SIZE = sum(\n+\t\t\tMessages.getString(Messages.AGGR_OBJECT_COUNT_TOTAL_SIZE),\n+\t\t\tMessages.getString(Messages.AGGR_OBJECT_COUNT_TOTAL_SIZE_DESC), OBJECT_COUNT, HEAP_TOTAL);\n@@ -210,0 +216,3 @@\n+\tpublic static final IAggregator<IQuantity, ?> OBJECT_COUNT_AVG_INSTANCES = avg(\n+\t\t\tMessages.getString(Messages.AGGR_OBJECT_COUNT_AVG_INSTANCES),\n+\t\t\tMessages.getString(Messages.AGGR_OBJECT_COUNT_AVG_INSTANCES_DESC), OBJECT_COUNT, JdkAttributes.COUNT);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -155,0 +155,2 @@\n+\tpublic static final String AGGR_OBJECT_COUNT_AVG_INSTANCES = \"AGGR_OBJECT_COUNT_AVG_INSTANCES\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OBJECT_COUNT_AVG_INSTANCES_DESC = \"AGGR_OBJECT_COUNT_AVG_INSTANCES_DESC\"; \/\/$NON-NLS-1$\n@@ -157,0 +159,4 @@\n+\tpublic static final String AGGR_OBJECT_COUNT_AVG_SIZE = \"AGGR_OBJECT_COUNT_AVG_SIZE\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OBJECT_COUNT_AVG_SIZE_DESC = \"AGGR_OBJECT_COUNT_AVG_SIZE_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OBJECT_COUNT_TOTAL_SIZE = \"AGGR_OBJECT_COUNT_TOTAL_SIZE\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OBJECT_COUNT_TOTAL_SIZE_DESC = \"AGGR_OBJECT_COUNT_TOTAL_SIZE_DESC\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -355,0 +355,2 @@\n+AGGR_OBJECT_COUNT_AVG_SIZE=Avg Live Size\n+AGGR_OBJECT_COUNT_AVG_SIZE_DESC=An estimate of the average size of all instances after garbage collection\n@@ -357,0 +359,4 @@\n+AGGR_OBJECT_COUNT_AVG_INSTANCES=Avg Live Count\n+AGGR_OBJECT_COUNT_AVG_INSTANCES_DESC=An estimate of the average number of instances after garbage collection\n+AGGR_OBJECT_COUNT_TOTAL_SIZE=Total Size\n+AGGR_OBJECT_COUNT_TOTAL_SIZE_DESC=An estimate of the total size.\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}