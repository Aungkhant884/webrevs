{"files":[{"patch":"@@ -220,0 +220,11 @@\n+On Linux you can use the build.sh script to build JMC:\n+```\n+usage: call .\/build.sh with the following options:\n+   --runTests    to run the tests\n+   --runUiTests  to run the tests including UI tests\n+   --packageJmc  to package JMC\n+   --clean       to run maven clean\n+```\n+\n+Otherwise follow the steps manually:\n+\n","filename":"README.md","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,204 @@\n+#!\/bin\/bash\n+set -e # immediately exit if any command has a non-zero exit status\n+set -u # a reference to any variable you have not previously defined causes the program to immediately exit\n+set -o pipefail # If any command in a pipeline fails, that return code will be used as the return code of the whole pipeline\n+\n+PROGNAME=$(basename \"$0\")\n+\n+JETTY_PID=\"\"\n+\n+function err_report() {\n+    err_log \"$(date +%T) ${PROGNAME}: Error on line $1\"\n+    err_log \"$(date +%T) current working directory: $PWD\"\n+}\n+\n+function exitTrap() {\n+    if [ -n \"${JETTY_PID}\" ]; then\n+        echo \"$(date +%T) terminating jetty server\"\n+        pkill -P \"${JETTY_PID}\"\n+    fi\n+}\n+\n+function err_log() {\n+    echo \"$@\" >&2\n+}\n+\n+trap 'err_report $LINENO' ERR\n+trap 'exitTrap' EXIT\n+\n+function printHelp() {\n+    echo \"usage: call .\/$(basename \"$0\") with the following options:\"\n+    {\n+        printf \" \\t%s\\t%s\\n\" \"--runTests\" \"to run the tests\"\n+        printf \" \\t%s\\t%s\\n\" \"--runUiTests\" \"to run the tests including UI tests\"\n+        printf \" \\t%s\\t%s\\n\" \"--packageJmc\" \"to package JMC\"\n+        printf \" \\t%s\\t%s\\n\" \"--clean\" \"to run maven clean\"\n+        printf \" \\t%s\\t%s\\n\" \"--run\" \"to run JMC once it was packaged\"\n+        printf \" \\t%s\\t%s\\n\" \"--help\" \"to show this help dialog\"\n+    } | column -ts $'\\t'\n+}\n+\n+if [ $# -eq 0 ]; then\n+    printHelp\n+    exit 0\n+fi\n+\n+function runTests() {\n+    mvn verify\n+}\n+\n+function runUiTests() {\n+    mvn verify -P uitests\n+}\n+\n+function packageJmc() {\n+    local timestamp\n+    timestamp=\"$(date +%Y%m%d%H%M%S)\"\n+    local BASEDIR\n+    BASEDIR=$(mvn help:evaluate -Dexpression=project.build.directory --non-recursive -q -DforceStdout)\n+\n+    mkdir -p \"${BASEDIR}\" # just in case clean was called before\n+\n+    local p2SiteLog=\"${BASEDIR}\/build_${timestamp}.1.p2_site.log\"\n+    local jettyLog=\"${BASEDIR}\/build_${timestamp}.2.jetty.log\"\n+    local installLog=\"${BASEDIR}\/build_${timestamp}.3.install.log\"\n+    local packageLog=\"${BASEDIR}\/build_${timestamp}.4.package.log\"\n+\n+    pushd releng\/third-party 1> \/dev\/null || {\n+        err_log \"directory releng\/third-party not found\"\n+        exit 1\n+    }\n+    echo \"$(date +%T) building p2:site - logging output to ${p2SiteLog}\"\n+    mvn p2:site --log-file \"${p2SiteLog}\"\n+\n+    echo \"$(date +%T) run jetty - logging output to ${jettyLog}\"\n+    touch \"${jettyLog}\" # create file so that it exists already for tail below\n+    mvn jetty:run --log-file \"${jettyLog}\" &\n+    JETTY_PID=$!\n+\n+    while ! grep -q \"^\\[INFO\\] Started Jetty Server$\" \"${jettyLog}\"; do\n+        echo \"$(date +%T) waiting for jetty server to start\"\n+        sleep 1\n+    done\n+    echo \"$(date +%T) jetty server up and running\"\n+\n+    popd 1> \/dev\/null || {\n+        err_log \"could not go to project root directory\"\n+        exit 1\n+    }\n+    pushd core 1> \/dev\/null || {\n+        err_log \"directory core not found\"\n+        exit 1\n+    }\n+\n+    echo \"$(date +%T) installing core artfacts - logging output to ${installLog}\"\n+    mvn clean install --log-file \"${installLog}\"\n+\n+    popd 1> \/dev\/null || {\n+        err_log \"could not go to project root directory\"\n+        exit 1\n+    }\n+    echo \"$(date +%T) packaging jmc - logging output to ${packageLog}\"\n+    mvn package --log-file \"${packageLog}\"\n+\n+    if [[ \"${OSTYPE}\" =~ \"linux\"* ]]; then\n+        echo \"You can now run jmc by calling \\\"${PROGNAME} --run\\\" or \\\"${BASEDIR}\/products\/org.openjdk.jmc\/linux\/gtk\/x86_64\/JDK\\ Mission\\ Control\/jmc\\\"\"\n+    elif [[ \"${OSTYPE}\" =~ \"darwin\"* ]]; then\n+        echo \"You can now run jmc by calling \\\"${PROGNAME} --run\\\" or \\\"${BASEDIR}\/products\/org.openjdk.jmc\/macosx\/cocoa\/x86_64\/JDK\\ Mission\\ Control.app\/Contents\/MacOS\/jmc\\\"\"\n+    else\n+        err_log \"unknown OS type: \\\"${OSTYPE}\\\". Please check your package in \\\"${BASEDIR}\/products\/org.openjdk.jmc\/\\\"\"\n+    fi\n+}\n+\n+function clean() {\n+    mvn clean\n+\n+    pushd core 1> \/dev\/null || {\n+        err_log \"directory core not found\"\n+        exit 1\n+    }\n+    mvn clean\n+    popd 1> \/dev\/null || {\n+        err_log \"could not go to project root directory\"\n+        exit 1\n+    }\n+\n+    pushd releng\/third-party 1> \/dev\/null || {\n+        err_log \"directory releng\/third-party not found\"\n+        exit 1\n+    }\n+    mvn clean\n+    popd 1> \/dev\/null || {\n+        err_log \"could not go to project root directory\"\n+        exit 1\n+    }\n+}\n+\n+function run() {\n+    local BASEDIR\n+    BASEDIR=\"$(mvn help:evaluate -Dexpression=project.build.directory --non-recursive -q -DforceStdout)\"\n+\n+    local path\n+    if [[ \"${OSTYPE}\" =~ \"linux\"* ]]; then\n+        path=\"${BASEDIR}\/products\/org.openjdk.jmc\/linux\/gtk\/x86_64\/JDK Mission Control\/jmc\"\n+    elif [[ \"${OSTYPE}\" =~ \"darwin\"* ]]; then\n+        path=\"${BASEDIR}\/products\/org.openjdk.jmc\/macosx\/cocoa\/x86_64\/JDK Mission Control.app\/Contents\/MacOS\/jmc\"\n+    else\n+        err_log \"unknown OS type: ${OSTYPE}\"\n+        exit 1\n+    fi\n+\n+    if [ -f \"${path}\" ]; then\n+        exec \"${path}\"\n+    else\n+        err_log \"JMC not found in \\\"${path}\\\". Did you call --packageJmc before?\"\n+        exit 1\n+    fi\n+}\n+\n+function parseArgs() {\n+    while [[ $# -gt 0 ]]; do\n+        case \"$1\" in\n+            --help)\n+                printHelp\n+                exit 0\n+                ;;\n+            --test)\n+                runTests\n+                ;;\n+            --testUi)\n+                runUiTests\n+                ;;\n+            --packageJmc)\n+                packageJmc\n+                ;;\n+            --clean)\n+                clean\n+                ;;\n+            --run)\n+                run\n+                ;;\n+            *)\n+                err_log \"unknown argument \\\"$1\\\"\"\n+                printHelp\n+                exit 1\n+                ;;\n+        esac\n+        shift\n+    done\n+}\n+\n+function checkPreconditions() {\n+    if ! command -v   mvn &> \/dev\/null ; then\n+        err_log \"It seems you do not have maven installed. Please ensure you have it installed and executable as \\\"mvn\\\".\"\n+        exit 1\n+    fi\n+\n+    if ! command -v   java &> \/dev\/null ; then\n+        err_log \"It seems you do not have java installed. Please ensure you have it installed and executable as \\\"java\\\".\"\n+        exit 1\n+    fi\n+}\n+\n+checkPreconditions\n+parseArgs \"$@\"\n","filename":"build.sh","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"}]}