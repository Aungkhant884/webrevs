{"files":[{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.rules.jdk.general;\n+\n+import java.text.MessageFormat;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.FutureTask;\n+import java.util.concurrent.RunnableFuture;\n+\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n+import org.openjdk.jmc.common.util.TypedPreference;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.rules.IRule;\n+import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.jdk.messages.internal.Messages;\n+import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;\n+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit;\n+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;\n+\n+public class ProcessStartedRule implements IRule {\n+\tprivate static final String PROCESS_STARTED_RESULT_ID = \"ProcessStarted\"; \/\/$NON-NLS-1$\n+\n+\tprivate Result getResult(IItemCollection items, IPreferenceValueProvider valueProvider) {\n+\t\tEventAvailability eventAvailability = RulesToolkit.getEventAvailability(items, JdkTypeIDs.PROCESS_START);\n+\t\tif (eventAvailability == EventAvailability.DISABLED) {\n+\t\t\treturn RulesToolkit.getEventAvailabilityResult(this, items, eventAvailability, JdkTypeIDs.PROCESS_START);\n+\t\t}\n+\t\tIItemCollection processStartEvents = items.apply(ItemFilters.type(JdkTypeIDs.PROCESS_START));\n+\t\tif (!processStartEvents.hasItems()) {\n+\t\t\treturn new Result(this, 0, Messages.getString(Messages.ProcessStartedRule_TEXT_OK));\n+\t\t}\n+\t\tIQuantity processStartedCount = processStartEvents.getAggregate(Aggregators.count());\n+\t\tString message = Messages.getString(Messages.ProcessStartedRule_TEXT_INFO);\n+\t\treturn new Result(this, 50,\n+\t\t\t\tMessageFormat.format(message, processStartedCount.clampedLongValueIn(UnitLookup.NUMBER_UNITY)));\n+\t}\n+\n+\t@Override\n+\tpublic RunnableFuture<Result> evaluate(final IItemCollection items, final IPreferenceValueProvider valueProvider) {\n+\t\tFutureTask<Result> evaluationTask = new FutureTask<>(new Callable<Result>() {\n+\t\t\t@Override\n+\t\t\tpublic Result call() throws Exception {\n+\t\t\t\treturn getResult(items, valueProvider);\n+\t\t\t}\n+\t\t});\n+\t\treturn evaluationTask;\n+\t}\n+\n+\t@Override\n+\tpublic Collection<TypedPreference<?>> getConfigurationAttributes() {\n+\t\treturn Collections.emptyList();\n+\t}\n+\n+\t@Override\n+\tpublic String getId() {\n+\t\treturn PROCESS_STARTED_RESULT_ID;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn Messages.getString(Messages.ProcessStartedRule_RULE_NAME);\n+\t}\n+\n+\t@Override\n+\tpublic String getTopic() {\n+\t\treturn JfrRuleTopics.PROCESSES;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ProcessStartedRule.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -477,0 +477,3 @@\n+\tpublic static final String ProcessStartedRule_RULE_NAME = \"ProcessStartedRule_RULE_NAME\"; \/\/$NON-NLS-1$\n+\tpublic static final String ProcessStartedRule_TEXT_INFO = \"ProcessStartedRule_TEXT_INFO\"; \/\/$NON-NLS-1$\n+\tpublic static final String ProcessStartedRule_TEXT_OK = \"ProcessStartedRule_TEXT_OK\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+org.openjdk.jmc.flightrecorder.rules.jdk.general.ProcessStartedRule\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/META-INF\/services\/org.openjdk.jmc.flightrecorder.rules.IRule","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -546,0 +546,4 @@\n+ProcessStartedRule_RULE_NAME=Process Started\n+# {0} is a number of processes\n+ProcessStartedRule_TEXT_INFO={0} process(es) started.\n+ProcessStartedRule_TEXT_OK=No process started.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -203,0 +203,2 @@\n+\n+\tpublic static final String PROCESS_START = PREFIX + \"ProcessStart\";\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkTypeIDs.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -349,0 +349,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -758,0 +765,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -1167,0 +1181,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -1576,0 +1597,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -1985,0 +2013,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -2394,0 +2429,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -2803,0 +2845,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>Information<\/severity>\n+<score>50.0<\/score>\n+<shortDescription>1 process(es) started.<\/shortDescription>\n+<longDescription>1 process(es) started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -3213,0 +3262,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -3622,0 +3678,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -4031,0 +4094,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -4440,0 +4510,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n@@ -4851,0 +4928,7 @@\n+<id>ProcessStarted<\/id>\n+<severity>OK<\/severity>\n+<score>0.0<\/score>\n+<shortDescription>No process started.<\/shortDescription>\n+<longDescription>No process started.<\/longDescription>\n+<\/rule>\n+<rule>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/resources\/baseline\/JfrRuleBaseline.xml","additions":84,"deletions":0,"binary":false,"changes":84,"status":"modified"}]}