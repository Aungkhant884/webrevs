{"files":[{"patch":"@@ -466,0 +466,1 @@\n+\tpublic static String STACKTRACE_VIEW_PERCENTAGE_BY_DURATION_COLUMN_NAME;\n@@ -479,0 +480,1 @@\n+\tpublic static String STACKTRACE_VIEW_PERCENTAGE_BY_DURATION;\n@@ -593,0 +595,10 @@\n+\n+\tpublic static String stackTraceMessage(double duration, double totalDuration, String frameFraction) {\n+\t\tString message;\n+\t\tif (duration == 1) {\n+\t\t\tmessage = Messages.STACKTRACE_VIEW_TRACE_OF_TOTAL;\n+\t\t} else {\n+\t\t\tmessage = Messages.STACKTRACE_VIEW_TRACES_OF_TOTAL;\n+\t\t}\n+\t\treturn NLS.bind(message, new Object[] {duration, frameFraction, totalDuration});\n+\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+import org.openjdk.jmc.common.item.IItem;\n@@ -96,0 +97,2 @@\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.item.IType;\n@@ -97,0 +100,1 @@\n+import org.openjdk.jmc.common.unit.IQuantity;\n@@ -99,0 +103,1 @@\n+import org.openjdk.jmc.flightrecorder.JfrAttributes;\n@@ -188,0 +193,1 @@\n+\tprivate static final String PERCENTAGE_DURATION_KEY = \"perDuration\"; \/\/$NON-NLS-1$\n@@ -194,0 +200,1 @@\n+\tprivate boolean perDuration;\n@@ -376,0 +383,1 @@\n+\t\tperDuration = StateToolkit.readBoolean(state, PERCENTAGE_DURATION_KEY, false);\n@@ -387,0 +395,4 @@\n+\t\tIAction perByDurationAction = ActionToolkit.checkAction(this::setPerDuration,\n+\t\t\t\tMessages.STACKTRACE_VIEW_PERCENTAGE_BY_DURATION, CoreImages.TIMESPAN);\n+\t\ttreeAction.setChecked(perDuration);\n+\n@@ -421,0 +433,1 @@\n+\t\ttoolBar.add(perByDurationAction);\n@@ -443,0 +456,6 @@\n+\tprivate void setPerDuration(boolean perDuration) {\n+\t\tthis.perDuration = perDuration;\n+\t\trebuildModel();\n+\t\trebuildViewer();\n+\t}\n+\n@@ -507,4 +526,15 @@\n-\t\tList<String> headers = Arrays.asList(Messages.STACKTRACE_VIEW_STACK_TRACE,\n-\t\t\t\tMessages.STACKTRACE_VIEW_COUNT_COLUMN_NAME, Messages.STACKTRACE_VIEW_PERCENTAGE_COLUMN_NAME);\n-\t\tCopySelectionAction copyAction = new CopySelectionAction(viewer, FormatToolkit.selectionFormatter(headers,\n-\t\t\t\tstackTraceLabelProvider, countLabelProvider, percentageLabelProvider));\n+\t\tList<String> headers;\n+\t\tCopySelectionAction copyAction;\n+\t\tif (perDuration) {\n+\t\t\theaders = Arrays.asList(Messages.STACKTRACE_VIEW_STACK_TRACE, Messages.STACKTRACE_VIEW_COUNT_COLUMN_NAME,\n+\t\t\t\t\tMessages.STACKTRACE_VIEW_PERCENTAGE_COLUMN_NAME,\n+\t\t\t\t\tMessages.STACKTRACE_VIEW_PERCENTAGE_BY_DURATION_COLUMN_NAME);\n+\t\t\tcopyAction = new CopySelectionAction(viewer,\n+\t\t\t\t\tFormatToolkit.selectionFormatter(headers, stackTraceLabelProvider, countLabelProvider,\n+\t\t\t\t\t\t\tpercentageLabelProvider, percentageByDurationLabelProvider));\n+\t\t} else {\n+\t\t\theaders = Arrays.asList(Messages.STACKTRACE_VIEW_STACK_TRACE, Messages.STACKTRACE_VIEW_COUNT_COLUMN_NAME,\n+\t\t\t\t\tMessages.STACKTRACE_VIEW_PERCENTAGE_COLUMN_NAME);\n+\t\t\tcopyAction = new CopySelectionAction(viewer, FormatToolkit.selectionFormatter(headers,\n+\t\t\t\t\tstackTraceLabelProvider, countLabelProvider, percentageLabelProvider));\n+\t\t}\n@@ -528,0 +558,2 @@\n+\t\tif (perDuration)\n+\t\t\tviewer.getControl().addListener(SWT.EraseItem, PERCENTAGE_BY_DURATION_BACKGROUND_DRAWER);\n@@ -536,1 +568,3 @@\n-\n+\t\tif (perDuration)\n+\t\t\tbuildColumn(viewer, Messages.STACKTRACE_VIEW_PERCENTAGE_BY_DURATION_COLUMN_NAME, SWT.RIGHT, 300)\n+\t\t\t\t\t.setLabelProvider(percentageByDurationLabelProvider);\n@@ -651,0 +685,1 @@\n+\t\tmemento.putBoolean(PERCENTAGE_DURATION_KEY, perDuration);\n@@ -748,0 +783,26 @@\n+\tprivate static final Listener PERCENTAGE_BY_DURATION_BACKGROUND_DRAWER = new Listener() {\n+\t\t@Override\n+\t\tpublic void handleEvent(Event event) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) event.item.getData();\n+\t\t\tFork rootFork = getRootFork(frame.getBranch().getParentFork());\n+\t\t\tdouble total;\n+\t\t\tif (event.index == 3 && (total = rootFork.getItemsInFork()) > 0) { \/\/ index == 3 => percentage (by duration) column\n+\t\t\t\t\/\/ Draw siblings\n+\t\t\t\tFork parentFork = frame.getBranch().getParentFork();\n+\t\t\t\tint forkOffset = parentFork.getItemOffset();\n+\t\t\t\tint siblingsStart = (int) Math.floor(event.width * forkOffset \/ total);\n+\t\t\t\tint siblingsWidth = (int) Math.round(event.width * parentFork.getItemsInFork() \/ total);\n+\t\t\t\tevent.gc.setBackground(SIBLINGS_COUNT_COLOR);\n+\t\t\t\tevent.gc.fillRectangle(event.x + siblingsStart, event.y, siblingsWidth, event.height);\n+\t\t\t\t\/\/ Draw group\n+\t\t\t\tdouble offset = (forkOffset + frame.getBranch().getItemOffsetInFork()) \/ total;\n+\t\t\t\tdouble fraction = frame.getItemCount() \/ total;\n+\t\t\t\tevent.gc.setBackground(COUNT_COLOR);\n+\t\t\t\tint startPixel = (int) Math.floor(event.width * offset);\n+\t\t\t\tint widthPixel = (int) Math.round(event.width * fraction);\n+\t\t\t\tevent.gc.fillRectangle(event.x + startPixel, event.y, Math.max(widthPixel, 1), event.height);\n+\t\t\t\tevent.detail &= ~SWT.BACKGROUND;\n+\t\t\t}\n+\t\t}\n+\t};\n+\n@@ -779,0 +840,52 @@\n+\tprivate final ColumnLabelProvider percentageByDurationLabelProvider = new ColumnLabelProvider() {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\tIQuantity duration = getDurationCount(frame.getItems());\n+\t\t\tIQuantity totalDuration = getDurationCount(\n+\t\t\t\t\tgetRootFork(frame.getBranch().getParentFork()).getAllItemsInFork());\n+\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(duration.doubleValue() \/ (double) totalDuration.doubleValue())\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getToolTipText(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\tFork rootFork = getRootFork(frame.getBranch().getParentFork());\n+\t\t\tIQuantity duration = getDurationCount(frame.getItems());\n+\t\t\tIQuantity totalDuration = getDurationCount(rootFork.getAllItemsInFork());\n+\t\t\tFork parentFork = frame.getBranch().getParentFork();\n+\t\t\tint itemsInSiblings = parentFork.getItemsInFork() - frame.getBranch().getFirstFrame().getItemCount();\n+\t\t\tString frameFraction = UnitLookup.PERCENT_UNITY\n+\t\t\t\t\t.quantity(duration.doubleValue() \/ (double) totalDuration.doubleValue())\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tStringBuilder sb = new StringBuilder(\"<form>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<li style='image' value='\" + COUNT_IMG_KEY + \"'><span nowrap='true'>\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\tsb.append(Messages.stackTraceMessage(duration.doubleValue(), totalDuration.doubleValue(), frameFraction));\n+\t\t\tsb.append(\"<\/span><\/li>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<li style='image' value='\" + SIBLINGS_IMG_KEY + \"'><span nowrap='true'>\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\tsb.append(Messages.siblingMessage(itemsInSiblings, parentFork.getBranchCount() - 1));\n+\t\t\tsb.append(\"<\/span><\/li>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<\/form>\"); \/\/$NON-NLS-1$\n+\t\t\treturn sb.toString();\n+\t\t}\n+\t};\n+\n+\tprivate IQuantity getDurationCount(SimpleArray<IItem> simpleArray) {\n+\t\tIQuantity q = null;\n+\t\tfor (IItem item : simpleArray.elements()) {\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tIType<IItem> type = (IType<IItem>) item.getType();\n+\t\t\tIMemberAccessor<IQuantity, IItem> durationAccessor = JfrAttributes.DURATION.getAccessor(type);\n+\t\t\tif (durationAccessor != null) {\n+\t\t\t\tif (q != null) {\n+\t\t\t\t\tq = q.add(durationAccessor.getMember(item));\n+\t\t\t\t} else {\n+\t\t\t\t\tq = durationAccessor.getMember(item);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn q;\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":118,"deletions":5,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -445,0 +445,1 @@\n+STACKTRACE_VIEW_PERCENTAGE_BY_DURATION_COLUMN_NAME=Percentage (By Duration)\n@@ -456,0 +457,1 @@\n+STACKTRACE_VIEW_PERCENTAGE_BY_DURATION=Show Percentage By Duration\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -420,0 +420,1 @@\n+\t\tprivate final SimpleArray<IItem> allItems;\n@@ -440,0 +441,2 @@\n+\n+\t\t\tSimpleArray<IItem> allItems = new SimpleArray<IItem>(new IItem[0]);\n@@ -444,0 +447,5 @@\n+\t\t\t\tif (allItems != null) {\n+\t\t\t\t\tallItems.addAll(fe.items.elements());\n+\t\t\t\t} else {\n+\t\t\t\t\tallItems = new SimpleArray<IItem>(fe.items.elements());\n+\t\t\t\t}\n@@ -449,0 +457,1 @@\n+\t\t\tthis.allItems = allItems;\n@@ -459,0 +468,4 @@\n+\t\tpublic SimpleArray<IItem> getAllItemsInFork() {\n+\t\t\treturn allItems;\n+\t\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/StacktraceModel.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}