{"files":[{"patch":"@@ -56,0 +56,2 @@\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n@@ -97,0 +99,1 @@\n+import org.openjdk.jmc.flightrecorder.rules.ResultProvider;\n@@ -1207,1 +1210,1 @@\n-\t\tif (preferences == null) {\n+ \t\tif (preferences == null) {\n@@ -1213,0 +1216,1 @@\n+\t\tResultProvider resultProvider = new ResultProvider();\n@@ -1222,1 +1226,1 @@\n-\t\t\t\t\tRunnableFuture<IResult> resultFuture = rule.createEvaluation(items, preferences, null);\n+\t\t\t\t\tRunnableFuture<IResult> resultFuture = rule.createEvaluation(items, preferences, resultProvider);\n@@ -1242,3 +1246,19 @@\n-\t\t\t\tRunnableFuture<IResult> resultFuture = rule.createEvaluation(items, preferences, null);\n-\t\t\t\tresultFutures.put(rule, resultFuture);\n-\t\t\t\tfutureQueue.add(resultFuture);\n+\t\t\t\tIRule depRule = rules.stream().filter(r -> r.getId().equals(dependencyName)).findFirst().orElse(null);\n+\t\t\t\tFuture<IResult> depResultFuture = resultFutures.get(depRule);\n+\t\t\t\tif (depResultFuture != null) {\n+\t\t\t\t\tif(!depResultFuture.isDone()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t((Runnable) depResultFuture).run();\n+\t\t\t\t\t\t\tIResult result = depResultFuture.get();\n+\t\t\t\t\t\t\tresultProvider.addResults(result);\n+\t\t\t\t\t\t} catch (InterruptedException | ExecutionException e) {\n+\t\t\t\t\t\t\tLogger.getLogger(RulesToolkit.class.getName()).log(Level.WARNING,\n+\t\t\t\t\t\t\t\t\t\"Unexpected problem evaluating rule dependency.\", e); \/\/$NON-NLS-1$\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (depResultFuture.isDone()) {\n+\t\t\t\t\t\tRunnableFuture<IResult> resultFuture = rule.createEvaluation(items, preferences, resultProvider);\n+\t\t\t\t\t\tresultFutures.put(rule, resultFuture);\n+\t\t\t\t\t\tfutureQueue.add(resultFuture);\n+\t\t\t\t\t}\n+\t\t\t\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"}]}