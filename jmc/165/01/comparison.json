{"files":[{"patch":"@@ -358,0 +358,2 @@\n+\tpublic static String MethodProfilingPage_PREDECESSORS_DESCRIPTION;\n+\tpublic static String MethodProfilingPage_SUCCESSORS_DESCRIPTION;\n@@ -369,0 +371,2 @@\n+\tpublic static String PAGES_SUCCESSORS;\n+\tpublic static String PAGES_PREDECESSORS;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,5 @@\n-import java.util.function.Consumer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.logging.Level;\n+import java.util.stream.Stream;\n@@ -39,0 +43,7 @@\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.ITreeContentProvider;\n+import org.eclipse.jface.viewers.SelectionChangedEvent;\n+import org.eclipse.jface.viewers.TreeViewer;\n+import org.eclipse.jface.viewers.TreeViewerColumn;\n+import org.eclipse.jface.viewers.ViewerColumn;\n@@ -40,0 +51,2 @@\n+import org.eclipse.swt.custom.CTabFolder;\n+import org.eclipse.swt.custom.CTabItem;\n@@ -41,0 +54,3 @@\n+import org.eclipse.swt.graphics.Color;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.graphics.RGB;\n@@ -42,0 +58,3 @@\n+import org.eclipse.swt.widgets.Event;\n+import org.eclipse.swt.widgets.Listener;\n+import org.eclipse.swt.widgets.TreeColumn;\n@@ -44,1 +63,3 @@\n-\n+import org.openjdk.jmc.common.IDisplayable;\n+import org.openjdk.jmc.common.IMCFrame;\n+import org.openjdk.jmc.common.IMCStackTrace;\n@@ -47,0 +68,2 @@\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.IItem;\n@@ -49,0 +72,2 @@\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n@@ -50,0 +75,1 @@\n+import org.openjdk.jmc.common.item.ItemToolkit;\n@@ -52,0 +78,2 @@\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.flightrecorder.JfrAttributes;\n@@ -53,0 +81,2 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkFilters;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkFilters.MethodFilter;\n@@ -55,0 +85,10 @@\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFormatToolkit;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceFrame;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Branch;\n+import org.openjdk.jmc.flightrecorder.stacktrace.StacktraceModel.Fork;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.AggregatableFrame;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.Node;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n@@ -61,1 +101,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -71,1 +110,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogramWithInput;\n@@ -79,0 +117,3 @@\n+import org.openjdk.jmc.ui.handlers.MethodFormatter;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n@@ -80,0 +121,1 @@\n+import org.openjdk.jmc.ui.misc.SWTColorToolkit;\n@@ -82,0 +124,55 @@\n+\tprivate static final Color ALTERNATE_COLOR = SWTColorToolkit.getColor(new RGB(255, 255, 240));\n+\tprivate static final String COUNT_IMG_KEY = \"countColor\"; \/\/$NON-NLS-1$\n+\tprivate static final String SIBLINGS_IMG_KEY = \"siblingsColor\"; \/\/$NON-NLS-1$\n+\tprivate static final String PERCENTAGE_COL_ID = \"HotMethods.Percentage\"; \/\/$NON-NLS-1$\n+\tprivate static final Color SIBLINGS_COUNT_COLOR = SWTColorToolkit.getColor(new RGB(170, 250, 170));\n+\tprivate static final Color COUNT_COLOR = SWTColorToolkit.getColor(new RGB(100, 200, 100));\n+\n+\tprivate static final Listener PERCENTAGE_BACKGROUND_DRAWER = new Listener() {\n+\t\t@Override\n+\t\tpublic void handleEvent(Event event) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) event.item.getData();\n+\t\t\tFork rootFork = getRootFork(frame.getBranch().getParentFork());\n+\t\t\tdouble total;\n+\t\t\tif (event.index == 2 && (total = rootFork.getItemsInFork()) > 0) { \/\/ index == 2 => percentage column\n+\t\t\t\t\/\/ Draw siblings\n+\t\t\t\tFork parentFork = frame.getBranch().getParentFork();\n+\t\t\t\tint forkOffset = parentFork.getItemOffset();\n+\t\t\t\tint siblingsStart = (int) Math.floor(event.width * forkOffset \/ total);\n+\t\t\t\tint siblingsWidth = (int) Math.round(event.width * parentFork.getItemsInFork() \/ total);\n+\t\t\t\tevent.gc.setBackground(SIBLINGS_COUNT_COLOR);\n+\t\t\t\tevent.gc.fillRectangle(event.x + siblingsStart, event.y, siblingsWidth, event.height);\n+\t\t\t\t\/\/ Draw group\n+\t\t\t\tdouble offset = (forkOffset + frame.getBranch().getItemOffsetInFork()) \/ total;\n+\t\t\t\tdouble fraction = frame.getItemCount() \/ total;\n+\t\t\t\tevent.gc.setBackground(COUNT_COLOR);\n+\t\t\t\tint startPixel = (int) Math.floor(event.width * offset);\n+\t\t\t\tint widthPixel = (int) Math.round(event.width * fraction);\n+\t\t\t\tevent.gc.fillRectangle(event.x + startPixel, event.y, Math.max(widthPixel, 1), event.height);\n+\t\t\t\tevent.detail &= ~SWT.BACKGROUND;\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tprivate static final Listener SUCCESSOR_PERCENTAGE_BACKGROUND_DRAWER = new Listener() {\n+\t\t@Override\n+\t\tpublic void handleEvent(Event event) {\n+\t\t\tSuccessorNode node = (SuccessorNode) event.item.getData();\n+\t\t\tdouble total;\n+\t\t\tif (event.index == 2 && (total = node.model.root.count) > 0) { \/\/ index == 2 => percentage column\n+\t\t\t\t\/\/ Draw siblings\n+\t\t\t\tint siblingsStart = 0;\n+\t\t\t\tint siblingsWidth = (int) Math.round(event.width * node.count \/ total);\n+\t\t\t\tevent.gc.setBackground(SIBLINGS_COUNT_COLOR);\n+\t\t\t\tevent.gc.fillRectangle(event.x + siblingsStart, event.y, siblingsWidth, event.height);\n+\t\t\t\t\/\/ Draw group\n+\t\t\t\tdouble fraction = node.count \/ total;\n+\t\t\t\tevent.gc.setBackground(COUNT_COLOR);\n+\t\t\t\tint startPixel = 0;\n+\t\t\t\tint widthPixel = (int) Math.round(event.width * fraction);\n+\t\t\t\tevent.gc.fillRectangle(event.x + startPixel, event.y, Math.max(widthPixel, 1), event.height);\n+\t\t\t\tevent.detail &= ~SWT.BACKGROUND;\n+\t\t\t}\n+\t\t}\n+\t};\n+\n@@ -106,2 +203,1 @@\n-\tprivate static final ItemHistogramBuilder PACKAGE_HISTOGRAM = new ItemHistogramBuilder();\n-\tprivate static final ItemHistogramBuilder CLASS_HISTOGRAM = new ItemHistogramBuilder();\n+\tprivate static final ItemHistogramBuilder HOT_METHODS_HISTOGRAM = new ItemHistogramBuilder();\n@@ -110,4 +206,3 @@\n-\t\tPACKAGE_HISTOGRAM.addCountColumn();\n-\t\t\/\/ FIXME: Add some top frame balance aggregate, but which? Tried similar to top frame balance but without dividing with total.\n-\n-\t\tCLASS_HISTOGRAM.addCountColumn();\n+\t\tHOT_METHODS_HISTOGRAM.addCountColumn();\n+\t\tHOT_METHODS_HISTOGRAM.addPercentageColumn(PERCENTAGE_COL_ID, Aggregators.count(), \"Percentage\",\n+\t\t\t\t\"Sample percentage over total\");\n@@ -117,2 +212,1 @@\n-\t\tprivate static final String CLASS_FILTER = \"classFilter\"; \/\/$NON-NLS-1$\n-\t\tprivate static final String PACKAGE_FILTER = \"packageFilter\"; \/\/$NON-NLS-1$\n+\t\tprivate static final String METHOD_TABLE = \"methodTable\"; \/\/$NON-NLS-1$\n@@ -120,2 +214,2 @@\n-\t\tprivate static final String PACKAGE_TABLE_ELEMENT = \"packageTable\"; \/\/$NON-NLS-1$\n-\t\tprivate static final String CLASS_TABLE_ELEMENT = \"classTable\"; \/\/$NON-NLS-1$\n+\t\tprivate static final String TABLE_ELEMENT = \"table\"; \/\/$NON-NLS-1$\n+\t\tprivate static final String METHOD_FORMAT_KEY = \"metodFormat\"; \/\/$NON-NLS-1$\n@@ -123,2 +217,3 @@\n-\t\tprivate final ItemHistogram packageTable;\n-\t\tprivate final ItemHistogram classTable;\n+\t\tprivate final ItemHistogram table;\n+\t\tprivate final TreeViewer successorTree;\n+\t\tprivate final TreeViewer predecessorTree;\n@@ -126,5 +221,1 @@\n-\t\tprivate final IPageContainer pageContainer;\n-\t\tprivate Consumer<IItemCollection> chained;\n-\t\tprivate FilterComponent packageTableFilter;\n-\t\tprivate FilterComponent classTableFilter;\n-\t\tprivate IItemCollection selectionItems;\n+\t\tprivate FilterComponent tableFilter;\n@@ -132,0 +223,2 @@\n+\t\tprivate MethodFormatter methodFormatter;\n+\t\tprivate int[] columnWidths = {650, 80, 120};\n@@ -134,1 +227,0 @@\n-\t\t\tthis.pageContainer = pageContainer;\n@@ -139,30 +231,52 @@\n-\t\t\tpackageTable = PACKAGE_HISTOGRAM.buildWithoutBorder(sash, JdkAttributes.STACK_TRACE_TOP_PACKAGE,\n-\t\t\t\t\tgetTableSettings(state.getChild(PACKAGE_TABLE_ELEMENT)));\n-\t\t\tMCContextMenuManager mmPackage = MCContextMenuManager\n-\t\t\t\t\t.create(packageTable.getManager().getViewer().getControl());\n-\t\t\tColumnMenusFactory.addDefaultMenus(packageTable.getManager(), mmPackage);\n-\t\t\tSelectionStoreActionToolkit.addSelectionStoreActions(pageContainer.getSelectionStore(), packageTable,\n-\t\t\t\t\tMessages.MethodProfilingPage_PACKAGE_HISTOGRAM_SELECTION, mmPackage);\n-\n-\t\t\tclassTable = CLASS_HISTOGRAM.buildWithoutBorder(sash, JdkAttributes.STACK_TRACE_TOP_CLASS,\n-\t\t\t\t\tgetTableSettings(state.getChild(CLASS_TABLE_ELEMENT)));\n-\t\t\tMCContextMenuManager mmClass = MCContextMenuManager\n-\t\t\t\t\t.create(classTable.getManager().getViewer().getControl());\n-\t\t\tColumnMenusFactory.addDefaultMenus(classTable.getManager(), mmClass);\n-\t\t\tSelectionStoreActionToolkit.addSelectionStoreActions(pageContainer.getSelectionStore(), classTable,\n-\t\t\t\t\tMessages.MethodProfilingPage_CLASS_HISTOGRAM_SELECTION, mmClass);\n-\n-\t\t\tchained = ItemHistogramWithInput.chain(packageTable, this::updateDetails, classTable);\n-\n-\t\t\tpackageTableFilter = FilterComponent.createFilterComponent(packageTable, packageFilter, getItems(),\n-\t\t\t\t\tpageContainer.getSelectionStore()::getSelections, this::onPackageFilterChange);\n-\t\t\tpackageTableFilter.loadState(state.getChild(PACKAGE_FILTER));\n-\t\t\tmmPackage.add(packageTableFilter.getShowFilterAction());\n-\t\t\tmmPackage.add(packageTableFilter.getShowSearchAction());\n-\t\t\tclassTableFilter = FilterComponent.createFilterComponent(classTable, classFilter, getItems(),\n-\t\t\t\t\tpageContainer.getSelectionStore()::getSelections, this::onClassFilterChange);\n-\t\t\tclassTableFilter.loadState(state.getChild(CLASS_FILTER));\n-\t\t\tmmClass.add(classTableFilter.getShowFilterAction());\n-\t\t\tmmClass.add(classTableFilter.getShowSearchAction());\n-\n-\t\t\t\/\/ FIXME: Create a bar chart or something of the samples, similar to the one on Java application?\n+\t\t\ttable = HOT_METHODS_HISTOGRAM.buildWithoutBorder(sash, JdkAttributes.STACK_TRACE_TOP_METHOD,\n+\t\t\t\t\tgetTableSettings(state.getChild(TABLE_ELEMENT)));\n+\t\t\tMCContextMenuManager mm = MCContextMenuManager.create(table.getManager().getViewer().getControl());\n+\t\t\tColumnMenusFactory.addDefaultMenus(table.getManager(), mm);\n+\t\t\tSelectionStoreActionToolkit.addSelectionStoreActions(pageContainer.getSelectionStore(), table,\n+\t\t\t\t\tMessages.FileIOPage_HISTOGRAM_SELECTION, mm);\n+\t\t\ttable.getManager().getViewer().addSelectionChangedListener(e -> updateDetails(e));\n+\t\t\ttable.getManager().getViewer()\n+\t\t\t\t\t.addSelectionChangedListener(e -> pageContainer.showSelection(table.getSelection().getItems()));\n+\t\t\ttableFilter = FilterComponent.createFilterComponent(table, MethodProfilingPage.this.tableFilter,\n+\t\t\t\t\tgetDataSource().getItems().apply(TABLE_ITEMS), pageContainer.getSelectionStore()::getSelections,\n+\t\t\t\t\tthis::onTableFilterChange);\n+\t\t\tmm.add(tableFilter.getShowFilterAction());\n+\t\t\tmm.add(tableFilter.getShowSearchAction());\n+\n+\t\t\ttableFilter.loadState(state.getChild(METHOD_TABLE));\n+\t\t\tmethodFormatter = new MethodFormatter(state.getChild(METHOD_FORMAT_KEY), this::refreshTrees);\n+\n+\t\t\tCTabFolder tabFolder = new CTabFolder(sash, SWT.NONE);\n+\t\t\ttoolkit.adapt(tabFolder);\n+\t\t\tCTabItem t1 = new CTabItem(tabFolder, SWT.NONE);\n+\t\t\tt1.setToolTipText(Messages.MethodProfilingPage_PREDECESSORS_DESCRIPTION);\n+\t\t\tpredecessorTree = buildTree(tabFolder, new StacktraceReducedTreeContentProvider());\n+\t\t\tt1.setText(Messages.PAGES_PREDECESSORS);\n+\t\t\tt1.setControl(predecessorTree.getControl());\n+\t\t\tpredecessorTree.getControl().addListener(SWT.EraseItem, PERCENTAGE_BACKGROUND_DRAWER);\n+\t\t\tbuildColumn(predecessorTree, Messages.STACKTRACE_VIEW_STACK_TRACE, SWT.NONE, columnWidths[0])\n+\t\t\t\t\t.setLabelProvider(new StackTraceLabelProvider(methodFormatter));\n+\t\t\tbuildColumn(predecessorTree, Messages.STACKTRACE_VIEW_COUNT_COLUMN_NAME, SWT.RIGHT, columnWidths[1])\n+\t\t\t\t\t.setLabelProvider(new CountLabelProvider());\n+\t\t\tbuildColumn(predecessorTree, Messages.STACKTRACE_VIEW_PERCENTAGE_COLUMN_NAME, SWT.RIGHT, columnWidths[2])\n+\t\t\t\t\t.setLabelProvider(new PercentageLabelProvider());\n+\t\t\tMCContextMenuManager predTreeMenu = MCContextMenuManager.create(predecessorTree.getControl());\n+\t\t\tpredTreeMenu.appendToGroup(MCContextMenuManager.GROUP_VIEWER_SETUP, methodFormatter.createMenu());\n+\n+\t\t\tCTabItem t2 = new CTabItem(tabFolder, SWT.NONE);\n+\t\t\tt2.setToolTipText(Messages.MethodProfilingPage_SUCCESSORS_DESCRIPTION);\n+\t\t\tsuccessorTree = buildTree(tabFolder, new StacktraceTreeContentProvider());\n+\t\t\tt2.setText(Messages.PAGES_SUCCESSORS);\n+\t\t\tt2.setControl(successorTree.getControl());\n+\t\t\tsuccessorTree.getControl().addListener(SWT.EraseItem, SUCCESSOR_PERCENTAGE_BACKGROUND_DRAWER);\n+\t\t\tsuccessorTree.getControl().addDisposeListener(e -> columnWidths = getColumnWidths(successorTree));\n+\t\t\tbuildColumn(successorTree, Messages.STACKTRACE_VIEW_STACK_TRACE, SWT.NONE, columnWidths[0])\n+\t\t\t\t\t.setLabelProvider(new StackTraceTreeLabelProvider(methodFormatter));\n+\t\t\tbuildColumn(successorTree, Messages.STACKTRACE_VIEW_COUNT_COLUMN_NAME, SWT.RIGHT, columnWidths[1])\n+\t\t\t\t\t.setLabelProvider(new CountTreeLabelProvider());\n+\t\t\tbuildColumn(successorTree, Messages.STACKTRACE_VIEW_PERCENTAGE_COLUMN_NAME, SWT.RIGHT, columnWidths[2])\n+\t\t\t\t\t.setLabelProvider(new PercentageTreeLabelProvider());\n+\t\t\tMCContextMenuManager succTreeMenu = MCContextMenuManager.create(successorTree.getControl());\n+\t\t\tsuccTreeMenu.appendToGroup(MCContextMenuManager.GROUP_VIEWER_SETUP, methodFormatter.createMenu());\n+\n+\t\t\ttabFolder.setSelection(t1);\n@@ -175,0 +289,2 @@\n+\t\t\ttable.getManager().setSelectionState(tableSelection);\n+\n@@ -177,4 +293,0 @@\n-\t\t\tonPackageFilterChange(packageFilter);\n-\t\t\tonClassFilterChange(classFilter);\n-\t\t\tpackageTable.getManager().setSelectionState(packageState);\n-\t\t\tclassTable.getManager().setSelectionState(classState);\n@@ -183,3 +295,3 @@\n-\t\tprivate void onPackageFilterChange(IItemFilter filter) {\n-\t\t\tpackageFilter = filter;\n-\t\t\tpackageTableFilter.filterChangeHelper(filter, chained, packageTable.getAllRows()::getRowCount, getItems());\n+\t\tprivate void refreshTrees() {\n+\t\t\tpredecessorTree.refresh();\n+\t\t\tsuccessorTree.refresh();\n@@ -188,5 +300,26 @@\n-\t\tprivate void onClassFilterChange(IItemFilter filter) {\n-\t\t\tclassFilter = filter;\n-\t\t\tIItemCollection items = packageTable.getSelection().getItems();\n-\t\t\titems = items.hasItems() ? items : getItems();\n-\t\t\tclassTableFilter.filterChangeHelper(filter, classTable, items);\n+\t\tprivate TreeViewer buildTree(Composite parent, IContentProvider contentProvider) {\n+\t\t\tTreeViewer treeViewer = new TreeViewer(parent,\n+\t\t\t\t\tSWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION | SWT.BORDER);\n+\t\t\ttreeViewer.setContentProvider(contentProvider);\n+\t\t\ttreeViewer.getTree().setHeaderVisible(true);\n+\t\t\ttreeViewer.getTree().setLinesVisible(true);\n+\t\t\treturn treeViewer;\n+\t\t}\n+\n+\t\tprivate int[] getColumnWidths(TreeViewer viewer) {\n+\t\t\tif (!viewer.getControl().isDisposed()) {\n+\t\t\t\treturn Stream.of(viewer.getTree().getColumns()).mapToInt(TreeColumn::getWidth).toArray();\n+\t\t\t}\n+\t\t\treturn columnWidths;\n+\t\t}\n+\n+\t\tprivate ViewerColumn buildColumn(TreeViewer viewer, String text, int style, int width) {\n+\t\t\tTreeViewerColumn vc = new TreeViewerColumn(viewer, style);\n+\t\t\tvc.getColumn().setWidth(width);\n+\t\t\tvc.getColumn().setText(text);\n+\t\t\treturn vc;\n+\t\t}\n+\n+\t\tprivate void onTableFilterChange(IItemFilter filter) {\n+\t\t\ttableFilter.filterChangeHelper(filter, table, getDataSource().getItems().apply(TABLE_ITEMS));\n+\t\t\tMethodProfilingPage.this.tableFilter = filter;\n@@ -198,4 +331,1 @@\n-\t\t\tpackageTable.getManager().getSettings().saveState(writableState.createChild(PACKAGE_TABLE_ELEMENT));\n-\t\t\tclassTable.getManager().getSettings().saveState(writableState.createChild(CLASS_TABLE_ELEMENT));\n-\t\t\tpackageTableFilter.saveState(writableState.createChild(PACKAGE_FILTER));\n-\t\t\tclassTableFilter.saveState(writableState.createChild(CLASS_FILTER));\n+\t\t\tmethodFormatter.saveState(writableState.createChild(METHOD_FORMAT_KEY));\n@@ -206,2 +336,1 @@\n-\t\t\tpackageState = packageTable.getManager().getSelectionState();\n-\t\t\tclassState = classTable.getManager().getSelectionState();\n+\t\t\ttableSelection = table.getManager().getSelectionState();\n@@ -211,2 +340,7 @@\n-\t\tprivate void updateDetails(IItemCollection items) {\n-\t\t\tpageContainer.showSelection(items);\n+\t\tprivate void updateDetails(SelectionChangedEvent event) {\n+\t\t\tIItemCollection items = table.getSelection().getItems();\n+\t\t\t\/\/ Release old model before building the new\n+\t\t\tpredecessorTree.setInput(null);\n+\t\t\tsuccessorTree.setInput(null);\n+\t\t\tbuildPredecessorTree(items);\n+\t\t\tbuildSuccessorTree(items);\n@@ -215,3 +349,6 @@\n-\t\tprivate void onInputSelected(IItemCollection items, IRange<IQuantity> timeRange) {\n-\t\t\tselectionItems = items;\n-\t\t\tchained.accept(getItems());\n+\t\tprivate void buildPredecessorTree(IItemCollection items) {\n+\t\t\tFrameSeparator frameSeparator = new FrameSeparator(FrameCategorization.METHOD, false);\n+\t\t\tStacktraceModel stacktraceModel = new StacktraceModel(false, frameSeparator, items);\n+\t\t\tCompletableFuture<StacktraceModel> modelPreparer = getModelPreparer(stacktraceModel, false);\n+\t\t\tmodelPreparer.thenAcceptAsync(this::setModelPredecessor, DisplayToolkit.inDisplayThread())\n+\t\t\t\t\t.exceptionally(MethodProfilingPage::handleModelBuilException);\n@@ -220,4 +357,4 @@\n-\t\tprivate IItemCollection getItems() {\n-\t\t\tIItemCollection items = selectionItems != null ? selectionItems : getDataSource().getItems();\n-\t\t\treturn ItemCollectionToolkit.filterIfNotNull(\n-\t\t\t\t\tItemCollectionToolkit.filterIfNotNull(items.apply(TABLE_ITEMS), packageFilter), classFilter);\n+\t\tprivate void setModelPredecessor(StacktraceModel model) {\n+\t\t\tif (!predecessorTree.getControl().isDisposed()) {\n+\t\t\t\tpredecessorTree.setInput(model.getRootFork());\n+\t\t\t}\n@@ -226,0 +363,106 @@\n+\t\tprivate void buildSuccessorTree(IItemCollection items) {\n+\t\t\tCompletableFuture<SuccessorTreeModel> modelPreparer = getSuccessorModelPreparer(items);\n+\t\t\tmodelPreparer.thenAcceptAsync(this::setModelSuccessor, DisplayToolkit.inDisplayThread())\n+\t\t\t\t\t.exceptionally(MethodProfilingPage::handleModelBuilException);\n+\n+\t\t}\n+\n+\t\tprivate void mergeNode(SuccessorTreeModel model, SuccessorNode destNode, Node srcNode) {\n+\t\t\tdestNode.count += (int) srcNode.getCumulativeWeight();\n+\t\t\tfor (Node child : srcNode.getChildren()) {\n+\t\t\t\tString key = SuccessorTreeModel.makeKey(child.getFrame());\n+\t\t\t\tSuccessorNode existing = destNode.children.putIfAbsent(key, new SuccessorNode(model, destNode, child));\n+\t\t\t\tif (existing != null) {\n+\t\t\t\t\tmergeNode(model, existing, child);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate void traverse(Node current, String typeName, String methodName, SuccessorTreeModel model) {\n+\t\t\tif (methodName.equals(current.getFrame().getMethod().getMethodName())\n+\t\t\t\t\t&& typeName.equals(current.getFrame().getMethod().getType().getFullName())) {\n+\t\t\t\tif (model.root == null) {\n+\t\t\t\t\tmodel.root = new SuccessorNode(model, null, current);\n+\t\t\t\t}\n+\t\t\t\tmergeNode(model, model.root, current);\n+\t\t\t}\n+\t\t\tfor (Node child : current.getChildren()) {\n+\t\t\t\ttraverse(child, typeName, methodName, model);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate void setModelSuccessor(SuccessorTreeModel model) {\n+\t\t\tif (model == null) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tif (!successorTree.getControl().isDisposed()) {\n+\t\t\t\tsuccessorTree.setInput(model);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate CompletableFuture<StacktraceModel> getModelPreparer(\n+\t\t\tStacktraceModel model, boolean materializeSelectedBranches) {\n+\t\t\treturn CompletableFuture.supplyAsync(() -> {\n+\t\t\t\tFork root = model.getRootFork();\n+\t\t\t\tif (materializeSelectedBranches) {\n+\t\t\t\t\tBranch selectedBranch = getLastSelectedBranch(root);\n+\t\t\t\t\tif (selectedBranch != null) {\n+\t\t\t\t\t\tselectedBranch.getEndFork();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn model;\n+\t\t\t});\n+\t\t}\n+\n+\t\tprivate CompletableFuture<SuccessorTreeModel> getSuccessorModelPreparer(IItemCollection items) {\n+\t\t\treturn CompletableFuture.supplyAsync(() -> {\n+\t\t\t\tIItem execSample = null;\n+\t\t\t\tif (items.hasItems()) {\n+\t\t\t\t\tIItemIterable itemIterable = items.iterator().next();\n+\t\t\t\t\tif (itemIterable.hasItems()) {\n+\t\t\t\t\t\texecSample = itemIterable.iterator().next();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (execSample == null) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\t@SuppressWarnings(\"deprecation\")\n+\t\t\t\tIMemberAccessor<IMCStackTrace, IItem> accessor = ItemToolkit.accessor(JfrAttributes.EVENT_STACKTRACE);\n+\t\t\t\tIMCStackTrace stackTrace = accessor.getMember(execSample);\n+\t\t\t\tString methodName = null;\n+\t\t\t\tString typeName = null;\n+\t\t\t\tif (stackTrace != null) {\n+\t\t\t\t\tif (!stackTrace.getFrames().isEmpty()) {\n+\t\t\t\t\t\tIMCFrame topFrame = stackTrace.getFrames().get(0);\n+\t\t\t\t\t\tmethodName = topFrame.getMethod().getMethodName();\n+\t\t\t\t\t\ttypeName = topFrame.getMethod().getType().getFullName();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (methodName == null || typeName == null) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\tMethodFilter methodFilter = new JdkFilters.MethodFilter(typeName, methodName);\n+\t\t\t\t\/\/ Filters event containing the current method\n+\t\t\t\tIItemCollection methodEvents = getDataSource().getItems()\n+\t\t\t\t\t\t.apply(ItemFilters.and(TABLE_ITEMS, methodFilter));\n+\t\t\t\tStacktraceTreeModel stacktraceTreeModel = new StacktraceTreeModel(methodEvents);\n+\t\t\t\tSuccessorTreeModel model = new SuccessorTreeModel();\n+\t\t\t\ttraverse(stacktraceTreeModel.getRoot(), typeName, methodName, model);\n+\t\t\t\treturn model;\n+\t\t\t});\n+\t\t}\n+\n+\t\t\/\/ See JMC-6787\n+\t\t@SuppressWarnings(\"deprecation\")\n+\t\tprivate Branch getLastSelectedBranch(Fork fromFork) {\n+\t\t\tBranch lastSelectedBranch = null;\n+\t\t\tBranch branch = fromFork.getSelectedBranch();\n+\t\t\twhile (branch != null) {\n+\t\t\t\tlastSelectedBranch = branch;\n+\t\t\t\tbranch = branch.getEndFork().getSelectedBranch();\n+\t\t\t}\n+\t\t\treturn lastSelectedBranch;\n+\t\t}\n+\n+\t\tprivate void onInputSelected(IItemCollection items, IRange<IQuantity> timeRange) {\n+\t\t}\n@@ -232,1 +475,2 @@\n-\t\t\t\t\t\t\tnew ColumnSettings(ItemHistogram.COUNT_COL_ID, false, 120, false)));\n+\t\t\t\t\t\t\tnew ColumnSettings(ItemHistogram.COUNT_COL_ID, false, 120, false),\n+\t\t\t\t\t\t\tnew ColumnSettings(PERCENTAGE_COL_ID, false, 120, false)));\n@@ -238,0 +482,13 @@\n+\tprivate static Void handleModelBuilException(Throwable ex) {\n+\t\tFlightRecorderUI.getDefault().getLogger().log(Level.SEVERE, \"Failed to build stacktrace view model\", ex); \/\/$NON-NLS-1$\n+\t\treturn null;\n+\t}\n+\n+\tprivate static boolean isFirstInBranchWithSiblings(StacktraceFrame frame) {\n+\t\treturn frame.getBranch().getFirstFrame() == frame && frame.getBranch().getParentFork().getBranchCount() > 1;\n+\t}\n+\n+\tprivate static boolean isLastFrame(StacktraceFrame frame) {\n+\t\treturn frame.getBranch().getLastFrame() == frame && frame.getBranch().getEndFork().getBranchCount() == 0;\n+\t}\n+\n@@ -243,4 +500,2 @@\n-\tprivate IItemFilter packageFilter;\n-\tprivate SelectionState packageState;\n-\tprivate IItemFilter classFilter;\n-\tprivate SelectionState classState;\n+\tprivate IItemFilter tableFilter = null;\n+\tprivate SelectionState tableSelection;\n@@ -257,0 +512,281 @@\n+\n+\tprivate static Fork getRootFork(Fork fork) {\n+\t\twhile (fork.getParentBranch() != null) {\n+\t\t\tfork = fork.getParentBranch().getParentFork();\n+\t\t}\n+\t\treturn fork;\n+\t}\n+\n+\tprivate static class StackTraceLabelProvider extends ColumnLabelProvider {\n+\t\tFrameSeparator frameSeparator;\n+\t\tMethodFormatter methodFormatter;\n+\n+\t\tpublic StackTraceLabelProvider(MethodFormatter methodFormatter) {\n+\t\t\tframeSeparator = new FrameSeparator(FrameCategorization.METHOD, false);\n+\t\t\tthis.methodFormatter = methodFormatter;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tIMCFrame frame = ((StacktraceFrame) element).getFrame();\n+\t\t\treturn getText(frame, frameSeparator);\n+\t\t}\n+\n+\t\tprotected String getText(IMCFrame frame, FrameSeparator frameSeparator) {\n+\t\t\treturn StacktraceFormatToolkit.formatFrame(frame, frameSeparator, methodFormatter.showReturnValue(),\n+\t\t\t\t\tmethodFormatter.showReturnValuePackage(), methodFormatter.showClassName(),\n+\t\t\t\t\tmethodFormatter.showClassPackageName(), methodFormatter.showArguments(),\n+\t\t\t\t\tmethodFormatter.showArgumentsPackage());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Image getImage(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\tFlightRecorderUI plugin = FlightRecorderUI.getDefault();\n+\t\t\tboolean isFirstInBranch = isFirstInBranchWithSiblings(frame);\n+\t\t\tif (isFirstInBranch) {\n+\t\t\t\treturn plugin.getImage(ImageConstants.ICON_ARROW_CURVED_UP);\n+\t\t\t} else if (isLastFrame(frame)) {\n+\t\t\t\treturn plugin.getImage(ImageConstants.ICON_ARROW_UP_END);\n+\t\t\t} else {\n+\t\t\t\treturn plugin.getImage(ImageConstants.ICON_ARROW_UP);\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Color getBackground(Object element) {\n+\t\t\tint parentCount = 0;\n+\t\t\tBranch e = ((StacktraceFrame) element).getBranch();\n+\t\t\twhile (e != null) {\n+\t\t\t\te = e.getParentFork().getParentBranch();\n+\t\t\t\tparentCount++;\n+\t\t\t}\n+\t\t\treturn parentCount % 2 == 0 ? null : ALTERNATE_COLOR;\n+\t\t}\n+\t}\n+\n+\tprivate static class StackTraceTreeLabelProvider extends StackTraceLabelProvider {\n+\n+\t\tpublic StackTraceTreeLabelProvider(MethodFormatter methodFormatter) {\n+\t\t\tsuper(methodFormatter);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tIMCFrame frame = ((SuccessorNode) element).frame;\n+\t\t\treturn getText(frame, frameSeparator);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Image getImage(Object element) {\n+\t\t\tFlightRecorderUI plugin = FlightRecorderUI.getDefault();\n+\t\t\tSuccessorNode node = (SuccessorNode) element;\n+\t\t\tif (isFirstInBranchWithSiblings(node)) {\n+\t\t\t\treturn plugin.getImage(ImageConstants.ICON_ARROW_CURVED_UP);\n+\t\t\t} else if (isLastFrame(node)) {\n+\t\t\t\treturn plugin.getImage(ImageConstants.ICON_ARROW_UP_END);\n+\t\t\t} else {\n+\t\t\t\treturn plugin.getImage(ImageConstants.ICON_ARROW_UP);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate boolean isFirstInBranchWithSiblings(SuccessorNode node) {\n+\t\t\tSuccessorNode parent = node.parent;\n+\t\t\tif (parent == null) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (node.children.isEmpty()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tprivate boolean isLastFrame(SuccessorNode node) {\n+\t\t\tSuccessorNode parent = node.parent;\n+\t\t\tif (parent == null) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tSuccessorNode[] children = parent.children.values().toArray(new SuccessorNode[0]);\n+\t\t\tif (children.length == 0) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn children[children.length - 1] == node;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Color getBackground(Object element) {\n+\t\t\tint parentCount = 0;\n+\t\t\tSuccessorNode current = ((SuccessorNode) element).parent;\n+\t\t\twhile (current != null) {\n+\t\t\t\tcurrent = current.parent;\n+\t\t\t\tparentCount++;\n+\t\t\t}\n+\t\t\treturn parentCount % 2 == 0 ? null : ALTERNATE_COLOR;\n+\t\t}\n+\t}\n+\n+\tprivate static class CountLabelProvider extends ColumnLabelProvider {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\treturn Integer.toString(((StacktraceFrame) element).getItemCount());\n+\t\t}\n+\t}\n+\n+\tprivate static class CountTreeLabelProvider extends ColumnLabelProvider {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\treturn Integer.toString((int) ((SuccessorNode) element).count);\n+\t\t}\n+\t}\n+\n+\tprivate static class PercentageLabelProvider extends ColumnLabelProvider {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\tint itemCount = frame.getItemCount();\n+\t\t\tint totalCount = getRootFork(frame.getBranch().getParentFork()).getItemsInFork();\n+\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(itemCount \/ (double) totalCount).displayUsing(IDisplayable.AUTO);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getToolTipText(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\tFork rootFork = getRootFork(frame.getBranch().getParentFork());\n+\t\t\tint itemCount = frame.getItemCount();\n+\t\t\tint totalCount = rootFork.getItemsInFork();\n+\t\t\tFork parentFork = frame.getBranch().getParentFork();\n+\t\t\tint itemsInSiblings = parentFork.getItemsInFork() - frame.getBranch().getFirstFrame().getItemCount();\n+\t\t\tString frameFraction = UnitLookup.PERCENT_UNITY.quantity(itemCount \/ (double) totalCount)\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tStringBuilder sb = new StringBuilder(\"<form>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<li style='image' value='\" + COUNT_IMG_KEY + \"'><span nowrap='true'>\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\tsb.append(Messages.stackTraceMessage(itemCount, totalCount, frameFraction));\n+\t\t\tsb.append(\"<\/span><\/li>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<li style='image' value='\" + SIBLINGS_IMG_KEY + \"'><span nowrap='true'>\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\tsb.append(Messages.siblingMessage(itemsInSiblings, parentFork.getBranchCount() - 1));\n+\t\t\tsb.append(\"<\/span><\/li>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<\/form>\"); \/\/$NON-NLS-1$\n+\t\t\treturn sb.toString();\n+\t\t}\n+\t}\n+\n+\tprivate static class PercentageTreeLabelProvider extends ColumnLabelProvider {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tSuccessorNode node = (SuccessorNode) element;\n+\t\t\tint itemCount = node.count;\n+\t\t\tint totalCount = node.model.root.count;\n+\t\t\treturn UnitLookup.PERCENT_UNITY.quantity(itemCount \/ (double) totalCount).displayUsing(IDisplayable.AUTO);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getToolTipText(Object element) {\n+\t\t\tSuccessorNode node = (SuccessorNode) element;\n+\t\t\tint itemCount = node.count;\n+\t\t\tint totalCount = node.model.root.count;\n+\t\t\tString frameFraction = UnitLookup.PERCENT_UNITY.quantity(itemCount \/ (double) totalCount)\n+\t\t\t\t\t.displayUsing(IDisplayable.AUTO);\n+\t\t\tStringBuilder sb = new StringBuilder(\"<form>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<li style='image' value='\" + COUNT_IMG_KEY + \"'><span nowrap='true'>\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\tsb.append(Messages.stackTraceMessage(itemCount, totalCount, frameFraction));\n+\t\t\tsb.append(\"<\/span><\/li>\"); \/\/$NON-NLS-1$\n+\t\t\tsb.append(\"<\/form>\"); \/\/$NON-NLS-1$\n+\t\t\treturn sb.toString();\n+\t\t}\n+\t}\n+\n+\tprivate static class StacktraceReducedTreeContentProvider extends AbstractStructuredContentProvider\n+\t\t\timplements ITreeContentProvider {\n+\n+\t\t@Override\n+\t\tpublic StacktraceFrame[] getElements(Object inputElement) {\n+\t\t\tFork rootFork = (Fork) inputElement;\n+\t\t\tif (rootFork.getBranchCount() == 1) {\n+\t\t\t\tBranch branch = rootFork.getBranch(0);\n+\t\t\t\treturn Stream\n+\t\t\t\t\t\t.concat(Stream.concat(Stream.of(branch.getFirstFrame()), Stream.of(branch.getTailFrames())),\n+\t\t\t\t\t\t\t\tStream.of(branch.getEndFork().getFirstFrames()))\n+\t\t\t\t\t\t.toArray(StacktraceFrame[]::new);\n+\t\t\t} else {\n+\t\t\t\treturn rootFork.getFirstFrames();\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasChildren(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\treturn isFirstInBranchWithSiblings(frame) && frame.getBranch().hasTail();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic StacktraceFrame[] getChildren(Object parentElement) {\n+\t\t\tStream<StacktraceFrame> children = Stream.empty();\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) parentElement;\n+\t\t\tif (isFirstInBranchWithSiblings(frame)) {\n+\t\t\t\tchildren = Stream.concat(Stream.of(frame.getBranch().getTailFrames()),\n+\t\t\t\t\t\tStream.of(frame.getBranch().getEndFork().getFirstFrames()));\n+\t\t\t}\n+\t\t\treturn children.toArray(StacktraceFrame[]::new);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic StacktraceFrame getParent(Object element) {\n+\t\t\tStacktraceFrame frame = (StacktraceFrame) element;\n+\t\t\tif (isFirstInBranchWithSiblings(frame) || frame.getBranch().getParentFork().getBranchCount() == 1) {\n+\t\t\t\tBranch parentBranch = frame.getBranch().getParentFork().getParentBranch();\n+\t\t\t\treturn parentBranch == null ? null : parentBranch.getFirstFrame();\n+\t\t\t} else {\n+\t\t\t\treturn frame.getBranch().getFirstFrame();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static class StacktraceTreeContentProvider extends AbstractStructuredContentProvider\n+\t\t\timplements ITreeContentProvider {\n+\n+\t\t@Override\n+\t\tpublic SuccessorNode[] getElements(Object inputElement) {\n+\t\t\tif (inputElement instanceof SuccessorTreeModel) {\n+\t\t\t\treturn new SuccessorNode[] {((SuccessorTreeModel) inputElement).root};\n+\t\t\t}\n+\t\t\treturn new SuccessorNode[] {(SuccessorNode) inputElement};\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic SuccessorNode[] getChildren(Object inputElement) {\n+\t\t\treturn ((SuccessorNode) inputElement).children.values().toArray(new SuccessorNode[0]);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Object getParent(Object element) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasChildren(Object element) {\n+\t\t\treturn !((SuccessorNode) element).children.isEmpty();\n+\t\t}\n+\t}\n+\n+\tprivate static class SuccessorTreeModel {\n+\t\tSuccessorNode root;\n+\n+\t\tpublic static String makeKey(IMCFrame frame) {\n+\t\t\treturn frame.getMethod().getType().getFullName() + \"::\" + frame.getMethod().getMethodName();\n+\t\t}\n+\t}\n+\n+\tprivate static class SuccessorNode {\n+\t\tfinal SuccessorTreeModel model;\n+\t\tfinal SuccessorNode parent;\n+\t\tfinal AggregatableFrame frame;\n+\t\tfinal Map<String, SuccessorNode> children = new HashMap<>();\n+\t\tint count;\n+\n+\t\tSuccessorNode(SuccessorTreeModel model, SuccessorNode parent, Node node) {\n+\t\t\tthis.model = model;\n+\t\t\tthis.parent = parent;\n+\t\t\tthis.frame = node.getFrame();\n+\t\t\tthis.count = (int) node.getCumulativeWeight();\n+\t\t}\n+\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/MethodProfilingPage.java","additions":620,"deletions":84,"binary":false,"changes":704,"status":"modified"},{"patch":"@@ -573,0 +573,2 @@\n+PAGES_SUCCESSORS=Successors\n+PAGES_PREDECESSORS=Predecessors\n@@ -639,0 +641,2 @@\n+MethodProfilingPage_SUCCESSORS_DESCRIPTION=Successors\n+MethodProfilingPage_PREDECESSORS_DESCRIPTION=Predecessors\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-\n@@ -45,0 +44,1 @@\n+import org.openjdk.jmc.common.IWritableState;\n@@ -92,1 +92,4 @@\n-\t\tIState state = MementoToolkit.asState(memento);\n+\t\tthis(MementoToolkit.asState(memento), onUpdate);\n+\t}\n+\n+\tpublic MethodFormatter(IState state, Runnable onUpdate) {\n@@ -183,0 +186,6 @@\n+\n+\tpublic void saveState(IWritableState state) {\n+\t\tstate.putString(RETURN_VALUE, options[RETURN_VALUE_INDEX].name());\n+\t\tstate.putString(CLASS, options[CLASS_INDEX].name());\n+\t\tstate.putString(PARAMETER, options[PARAMETER_INDEX].name());\n+\t}\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/handlers\/MethodFormatter.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-\tprivate static class MethodFilter implements IItemFilter {\n+\tpublic static class MethodFilter implements IItemFilter {\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkFilters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}