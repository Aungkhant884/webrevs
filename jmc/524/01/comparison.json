{"files":[{"patch":"@@ -0,0 +1,6 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" path=\"src\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"\/>\n+\t<classpathentry kind=\"output\" path=\"bin\"\/>\n+<\/classpath>\n","filename":"releng\/tools\/org.openjdk.jmc.util.listversions\/.classpath","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<projectDescription>\n+\t<name>org.openjdk.jmc.util.listversions<\/name>\n+\t<comment><\/comment>\n+\t<projects>\n+\t<\/projects>\n+\t<buildSpec>\n+\t\t<buildCommand>\n+\t\t\t<name>org.eclipse.jdt.core.javabuilder<\/name>\n+\t\t\t<arguments>\n+\t\t\t<\/arguments>\n+\t\t<\/buildCommand>\n+\t<\/buildSpec>\n+\t<natures>\n+\t\t<nature>org.eclipse.jdt.core.javanature<\/nature>\n+\t<\/natures>\n+<\/projectDescription>\n","filename":"releng\/tools\/org.openjdk.jmc.util.listversions\/.project","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.util.listversions;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.zip.ZipInputStream;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+public class ListVersions {\n+\n+\tpublic static void main(String[] args) throws IOException {\n+\t\tif (args.length != 1) {\n+\t\t\tSystem.out.println(\"You need to specify the Eclipse version, e.g. 2023-09!\");\n+\t\t\tSystem.exit(2);\n+\t\t}\n+\t\tString eclipseVersion = args[0];\n+\n+\t\tString updateSite = String.format(\"https:\/\/download.eclipse.org\/releases\/%s\/\", eclipseVersion);\n+\t\tString compositeArtifactsUrl = updateSite + \"compositeArtifacts.jar\";\n+\n+\t\ttry (InputStream compositeStream = new URL(compositeArtifactsUrl).openStream();\n+\t\t\t\tZipInputStream compositeZipStream = new ZipInputStream(compositeStream)) {\n+\t\t\tcompositeZipStream.getNextEntry();\n+\n+\t\t\tDocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+\t\t\tDocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+\t\t\tDocument compositeDoc = dBuilder.parse(compositeZipStream);\n+\n+\t\t\tNodeList childrenList = compositeDoc.getElementsByTagName(\"child\");\n+\t\t\tString subDirectory = null;\n+\n+\t\t\tfor (int i = 0; i < childrenList.getLength(); i++) {\n+\t\t\t\tNode childNode = childrenList.item(i);\n+\t\t\t\tif (childNode.getNodeType() == Node.ELEMENT_NODE) {\n+\t\t\t\t\tElement childElement = (Element) childNode;\n+\t\t\t\t\tsubDirectory = childElement.getAttribute(\"location\");\n+\t\t\t\t\tif (Character.isDigit(subDirectory.charAt(0))) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (subDirectory == null) {\n+\t\t\t\tSystem.out.println(\"Failed to find subdirectory.\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tString contentJarUrl = updateSite + subDirectory + \"\/content.jar\";\n+\n+\t\t\ttry (InputStream contentStream = new URL(contentJarUrl).openStream();\n+\t\t\t\t\tZipInputStream contentZipStream = new ZipInputStream(contentStream)) {\n+\t\t\t\tcontentZipStream.getNextEntry();\n+\n+\t\t\t\tDocument contentDoc = dBuilder.parse(contentZipStream);\n+\n+\t\t\t\tNodeList unitList = contentDoc.getElementsByTagName(\"unit\");\n+\t\t\t\tfor (int i = 0; i < unitList.getLength(); i++) {\n+\t\t\t\t\tNode unitNode = unitList.item(i);\n+\t\t\t\t\tif (unitNode.getNodeType() == Node.ELEMENT_NODE) {\n+\t\t\t\t\t\tElement unitElement = (Element) unitNode;\n+\t\t\t\t\t\tString id = unitElement.getAttribute(\"id\");\n+\t\t\t\t\t\tString version = unitElement.getAttribute(\"version\");\n+\t\t\t\t\t\tswitch (id) {\n+\t\t\t\t\t\tcase \"org.eclipse.equinox.executable.feature.group\":\n+\t\t\t\t\t\tcase \"org.eclipse.pde.feature.group\":\n+\t\t\t\t\t\tcase \"org.eclipse.platform.sdk\":\n+\t\t\t\t\t\t\tSystem.out.println(\"Found unit: \" + id + \", Version: \" + version);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tdefault:\n+\t\t\t\t\t\t\t\/\/ Ignoring other units\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t}\n+}\n","filename":"releng\/tools\/org.openjdk.jmc.util.listversions\/src\/org\/openjdk\/jmc\/util\/listversions\/ListVersions.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}