{"files":[{"patch":"@@ -2,0 +2,1 @@\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +66,1 @@\n-public class FlameGraphJSONMarshaller {\n+public class FlameGraphJsonMarshaller {\n@@ -72,2 +73,2 @@\n-\tpublic static String toJSON(StacktraceTreeModel model) {\n-\t\treturn toJSON(model, model.getRoot());\n+\tpublic static String toJson(StacktraceTreeModel model) {\n+\t\treturn toJson(model, model.getRoot());\n@@ -76,1 +77,1 @@\n-\tprivate static String toJSON(StacktraceTreeModel model, Node node) {\n+\tprivate static String toJson(StacktraceTreeModel model, Node node) {\n@@ -83,1 +84,1 @@\n-\t\t\tsb.append(createRootNodeJSON(model.getItems()));\n+\t\t\tsb.append(createRootNodeJson(model.getItems()));\n@@ -85,1 +86,1 @@\n-\t\t\tsb.append(JSONProps(node.getFrame(), node.getCumulativeWeight()));\n+\t\t\tsb.append(createNodeJsonProps(node.getFrame(), node.getCumulativeWeight()));\n@@ -95,1 +96,1 @@\n-\t\t\tsb.append(toJSON(model, nodes.get(childId)));\n+\t\t\tsb.append(toJson(model, nodes.get(childId)));\n@@ -102,1 +103,1 @@\n-\tprivate static String JSONProps(AggregatableFrame frame, double value) {\n+\tprivate static String createNodeJsonProps(AggregatableFrame frame, double value) {\n@@ -123,1 +124,1 @@\n-\tprivate static String JSONProps(String frameName, String description) {\n+\tprivate static String createJsonProps(String frameName, String description) {\n@@ -152,1 +153,1 @@\n-\tprivate static String createRootNodeJSON(IItemCollection events) {\n+\tprivate static String createRootNodeJson(IItemCollection events) {\n@@ -156,1 +157,1 @@\n-\t\treturn JSONProps(rootTitle, rootDescription);\n+\t\treturn createJsonProps(rootTitle, rootDescription);\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/FlameGraphJsonMarshaller.java","additions":12,"deletions":11,"binary":false,"changes":23,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/FlameGraphJSONMarshaller.java","status":"renamed"},{"patch":"@@ -99,1 +99,1 @@\n-import org.openjdk.jmc.flightrecorder.flameview.FlameGraphJSONMarshaller;\n+import org.openjdk.jmc.flightrecorder.flameview.FlameGraphJsonMarshaller;\n@@ -311,1 +311,1 @@\n-\t\t\tString flameGraphJSON = FlameGraphJSONMarshaller.toJSON(treeModel);\n+\t\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(treeModel);\n@@ -316,1 +316,1 @@\n-\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, flameGraphJSON));\n+\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, flameGraphJson));\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/build.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,2 +2,3 @@\n-<!--   \n-   Copyright (c) 2020 Datadog, Inc. All rights reserved.\n+<!--\n+   Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2020, Datadog, Inc. All rights reserved.\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/pom.xml","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n- *\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- *\n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.flameview.test;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.test.io.IOResourceSet;\n-import org.openjdk.jmc.common.util.StringToolkit;\n-import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n-import org.openjdk.jmc.flightrecorder.flameview.FlameGraphJSONMarshaller;\n-import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n-import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n-import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n-import org.openjdk.jmc.flightrecorder.test.util.RecordingToolkit;\n-import org.openjdk.jmc.flightrecorder.test.util.StacktraceTestToolkit;\n-\n-public class FlameGraphJSONMarshallerTest {\n-\n-\tprivate static IItemCollection testRecording;\n-\n-\t@BeforeClass\n-\tpublic static void beforeAll() throws IOException, CouldNotLoadRecordingException {\n-\t\tIOResourceSet[] testResources = StacktraceTestToolkit.getTestResources();\n-\t\tIOResourceSet resourceSet = testResources[0];\n-\t\ttestRecording = RecordingToolkit.getFlightRecording(resourceSet);\n-\t}\n-\n-\tprivate static final FrameSeparator separator = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD,\n-\t\t\tfalse);\n-\n-\t@Test\n-\tpublic void testRenderedJSONWithAttribute() throws Exception {\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator, true,\n-\t\t\t\tJdkAttributes.ALLOCATION_SIZE);\n-\t\tString flameGraphJSON = FlameGraphJSONMarshaller.toJSON(model);\n-\n-\t\tString expectedJSON = readResource(\"\/flamegraph-attribute.json\");\n-\t\tassertEquals(expectedJSON, flameGraphJSON);\n-\t}\n-\n-\t@Test\n-\tpublic void testRenderedJSONWithCounts() throws Exception {\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator);\n-\t\tString flameGraphJSON = FlameGraphJSONMarshaller.toJSON(model);\n-\n-\t\tString expectedJSON = readResource(\"\/flamegraph-counts.json\");\n-\t\tassertEquals(expectedJSON, flameGraphJSON);\n-\t}\n-\n-\tprivate String readResource(String resourcePath) throws IOException {\n-\t\ttry (InputStream is = FlameGraphJSONMarshallerTest.class.getResourceAsStream(resourcePath)) {\n-\t\t\tif (is == null) {\n-\t\t\t\tthrow new IllegalArgumentException(resourcePath + \" not found\");\n-\t\t\t}\n-\t\t\treturn StringToolkit.readString(is);\n-\t\t}\n-\t}\n-\n-}\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/test\/FlameGraphJSONMarshallerTest.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.flameview.test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.test.io.IOResourceSet;\n+import org.openjdk.jmc.common.util.StringToolkit;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.flameview.FlameGraphJsonMarshaller;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n+import org.openjdk.jmc.flightrecorder.test.util.RecordingToolkit;\n+import org.openjdk.jmc.flightrecorder.test.util.StacktraceTestToolkit;\n+\n+public class FlameGraphJsonMarshallerTest {\n+\n+\tprivate static IItemCollection testRecording;\n+\n+\t@BeforeClass\n+\tpublic static void beforeAll() throws IOException, CouldNotLoadRecordingException {\n+\t\tIOResourceSet[] testResources = StacktraceTestToolkit.getTestResources();\n+\t\tIOResourceSet resourceSet = testResources[0];\n+\t\ttestRecording = RecordingToolkit.getFlightRecording(resourceSet);\n+\t}\n+\n+\tprivate static final FrameSeparator separator = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD,\n+\t\t\tfalse);\n+\n+\t@Test\n+\tpublic void testRenderedJsonWithAttribute() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator, true,\n+\t\t\t\tJdkAttributes.ALLOCATION_SIZE);\n+\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-attribute.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n+\t@Test\n+\tpublic void testRenderedJsonWithCounts() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator);\n+\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-counts.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n+\tprivate String readResource(String resourcePath) throws IOException {\n+\t\ttry (InputStream is = FlameGraphJsonMarshallerTest.class.getResourceAsStream(resourcePath)) {\n+\t\t\tif (is == null) {\n+\t\t\t\tthrow new IllegalArgumentException(resourcePath + \" not found\");\n+\t\t\t}\n+\t\t\treturn StringToolkit.readString(is);\n+\t\t}\n+\t}\n+\n+}\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/test\/FlameGraphJsonMarshallerTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/tree\/Node.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/tree\/StacktraceTreeModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}