{"files":[{"patch":"@@ -55,1 +55,0 @@\n-import java.util.Set;\n@@ -78,3 +77,0 @@\n-\t\tMap<Integer, Set<Integer>> childrenLookup = model.getChildrenLookup();\n-\t\tMap<Integer, Node> nodes = model.getNodes();\n-\n@@ -83,1 +79,1 @@\n-\t\tif (node.equals(model.getRoot())) {\n+\t\tif (node.isRoot()) {\n@@ -89,1 +85,0 @@\n-\t\tSet<Integer> childIds = childrenLookup.get(node.getNodeId());\n@@ -92,1 +87,1 @@\n-\t\tfor (int childId : childIds) {\n+\t\tfor (Node child : node.getChildren()) {\n@@ -96,1 +91,1 @@\n-\t\t\tsb.append(toJson(model, nodes.get(childId)));\n+\t\t\tsb.append(toJson(model, child));\n@@ -106,1 +101,1 @@\n-\t\t\t\/\/ TODO: this is untested\n+\t\t\t\/\/ TODO: find recording with truncated stacks and add unit test for this case\n@@ -114,1 +109,3 @@\n-\t\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(frame.getHumanReadableShortString()));\n+\t\t\tString frameName = frame.getHumanReadableShortString();\n+\t\t\tString packageName = FormatToolkit.getPackage(frame.getMethod().getType().getPackage());\n+\t\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(frameName));\n@@ -116,2 +113,1 @@\n-\t\t\tsb.append(addQuotes(\"p\")).append(\": \")\n-\t\t\t\t\t.append(addQuotes(FormatToolkit.getPackage(frame.getMethod().getType().getPackage())));\n+\t\t\tsb.append(addQuotes(\"p\")).append(\": \").append(addQuotes(packageName));\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/FlameGraphJsonMarshaller.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -56,0 +56,5 @@\n+\tprivate static final boolean INVERTED_STACKS = true;\n+\tprivate static final boolean REGULAR_STACKS = false;\n+\tprivate static final FrameSeparator METHOD_SEPARATOR = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD,\n+\t\t\tfalse);\n+\n@@ -65,3 +70,0 @@\n-\tprivate static final FrameSeparator separator = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD,\n-\t\t\tfalse);\n-\n@@ -70,1 +72,1 @@\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator, true,\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, REGULAR_STACKS,\n@@ -78,0 +80,10 @@\n+\t@Test\n+\tpublic void testRenderedJsonWithAttributeInvertedStacks() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, INVERTED_STACKS,\n+\t\t\t\tJdkAttributes.ALLOCATION_SIZE);\n+\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-attribute-inverted.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n@@ -80,1 +92,1 @@\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator);\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording);\n@@ -87,0 +99,9 @@\n+\t@Test\n+\tpublic void testRenderedJsonWithCountsInvertedStacks() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, INVERTED_STACKS);\n+\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-counts-inverted.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/test\/FlameGraphJsonMarshallerTest.java","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\", \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": \"24\", \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": \"24\", \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ ]}]}]}]}]},{\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": \"112\", \"c\": [ {\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": \"112\", \"c\": [ ]}]},{\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": \"104\", \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": \"104\", \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": \"104\", \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": \"104\", \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": \"104\", \"c\": [ {\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-attribute-inverted.json","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\", \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": \"24\", \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": \"24\", \"c\": [ ]}]}]}]}]},{\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": \"104\", \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": \"104\", \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": \"104\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},{\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": \"112\", \"c\": [ {\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": \"112\", \"c\": [ ]}]}]}\n\\ No newline at end of file\n+{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\", \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"24\", \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": \"24\", \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": \"24\", \"c\": [ ]}]}]}]}]},{\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": \"112\", \"c\": [ {\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": \"112\", \"c\": [ ]}]},{\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": \"104\", \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"104\", \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": \"104\", \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": \"104\", \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": \"104\", \"c\": [ {\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": \"104\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-attribute.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\", \"c\": [ {\"n\": \"ObjectOutputStream$BlockDataOutputStream.writeUTF(String)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeUTF(String)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectStreamClass.writeNonProxy(ObjectOutputStream)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeNonProxyDesc(ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeClassDesc(ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeOrdinaryObject(Object, ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeObject0(Object, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeObject(Object)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ArrayList.writeObject(ObjectOutputStream)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]}]}]},{\"n\": \"Buffer.checkIndex(int)\",\"p\": \"java.nio\",\"v\": \"1\", \"c\": [ {\"n\": \"DirectByteBuffer.put(int, byte)\",\"p\": \"java.nio\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR$ThreadBuffer.release()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR$ThreadBuffer.finish(ByteBuffer, boolean)\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR.releaseThreadBuffer(ByteBuffer, boolean)\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"InstantEvent.write()\",\"p\": \"com.oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"InstantEvent.commit()\",\"p\": \"com.oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]},{\"n\": \"Object.wait(long)\",\"p\": \"java.lang\",\"v\": \"108\", \"c\": [ {\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": \"10\", \"c\": [ {\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": \"10\", \"c\": [ ]}]},{\"n\": \"OGLRenderQueue$QueueFlusher.run()\",\"p\": \"sun.java2d.opengl\",\"v\": \"98\", \"c\": [ ]}]},{\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ ]}]}]}]}]},{\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ ]}]},{\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": \"1\", \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": \"1\", \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": \"1\", \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": \"1\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": \"1\", \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"1\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"1\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"1\", \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": \"1\", \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": \"1\", \"c\": [ {\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},{\"n\": \"SocketInputStream.read(byte[], int, int, int)\",\"p\": \"java.net\",\"v\": \"9\", \"c\": [ {\"n\": \"SocketInputStream.read(byte[], int, int)\",\"p\": \"java.net\",\"v\": \"9\", \"c\": [ {\"n\": \"BufferedInputStream.fill()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"BufferedInputStream.read()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"FilterInputStream.read()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"9\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"9\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"9\", \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": \"9\", \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": \"9\", \"c\": [ {\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": \"9\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-counts-inverted.json","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -1,1 +1,1 @@\n-{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\", \"c\": [ {\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ ]}]}]}]}]},{\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": \"10\", \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": \"10\", \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": \"10\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"10\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"10\", \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"10\", \"c\": [ {\"n\": \"FilterInputStream.read()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"BufferedInputStream.read()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"BufferedInputStream.fill()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"SocketInputStream.read(byte[], int, int)\",\"p\": \"java.net\",\"v\": \"9\", \"c\": [ {\"n\": \"SocketInputStream.read(byte[], int, int, int)\",\"p\": \"java.net\",\"v\": \"9\", \"c\": [ ]}]}]}]}]},{\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": \"1\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": \"1\", \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": \"1\", \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": \"1\", \"c\": [ {\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},{\"n\": \"InstantEvent.commit()\",\"p\": \"com.oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"InstantEvent.write()\",\"p\": \"com.oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR.releaseThreadBuffer(ByteBuffer, boolean)\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR$ThreadBuffer.finish(ByteBuffer, boolean)\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR$ThreadBuffer.release()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"DirectByteBuffer.put(int, byte)\",\"p\": \"java.nio\",\"v\": \"1\", \"c\": [ {\"n\": \"Buffer.checkIndex(int)\",\"p\": \"java.nio\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]},{\"n\": \"ArrayList.writeObject(ObjectOutputStream)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeObject(Object)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeObject0(Object, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeOrdinaryObject(Object, ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeClassDesc(ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeNonProxyDesc(ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectStreamClass.writeNonProxy(ObjectOutputStream)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeUTF(String)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream$BlockDataOutputStream.writeUTF(String)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]}]}]},{\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": \"11\", \"c\": [ {\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": \"11\", \"c\": [ {\"n\": \"Object.wait(long)\",\"p\": \"java.lang\",\"v\": \"10\", \"c\": [ ]}]}]},{\"n\": \"OGLRenderQueue$QueueFlusher.run()\",\"p\": \"sun.java2d.opengl\",\"v\": \"98\", \"c\": [ {\"n\": \"Object.wait(long)\",\"p\": \"java.lang\",\"v\": \"98\", \"c\": [ ]}]}]}\n\\ No newline at end of file\n+{\"n\": \"468 events of 21 types: Recording Setting[255], Java Monitor Wait[108], Thread Allocation Statistics[44]...\",\"p\": \"\",\"d\": \"255:Recording Setting|108:Java Monitor Wait|44:Thread Allocation Statistics|9:Socket Read|9:Class Loading Statistics|9:Exception Statistics|9:Java Thread Statistics|8:CPU Load|3:Allocation in new TLAB|2:Method Profiling Sample|12:Others... (11 types)|\", \"c\": [ {\"n\": \"ArrayList.writeObject(ObjectOutputStream)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeObject(Object)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeObject0(Object, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeOrdinaryObject(Object, ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeClassDesc(ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeNonProxyDesc(ObjectStreamClass, boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectStreamClass.writeNonProxy(ObjectOutputStream)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream.writeUTF(String)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectOutputStream$BlockDataOutputStream.writeUTF(String)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]}]}]},{\"n\": \"InstantEvent.commit()\",\"p\": \"com.oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"InstantEvent.write()\",\"p\": \"com.oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR.releaseThreadBuffer(ByteBuffer, boolean)\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR$ThreadBuffer.finish(ByteBuffer, boolean)\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"VMJFR$ThreadBuffer.release()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"DirectByteBuffer.put(int, byte)\",\"p\": \"java.nio\",\"v\": \"1\", \"c\": [ {\"n\": \"Buffer.checkIndex(int)\",\"p\": \"java.nio\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]},{\"n\": \"TimerThread.run()\",\"p\": \"java.util\",\"v\": \"11\", \"c\": [ {\"n\": \"TimerThread.mainLoop()\",\"p\": \"java.util\",\"v\": \"11\", \"c\": [ {\"n\": \"Object.wait(long)\",\"p\": \"java.lang\",\"v\": \"10\", \"c\": [ ]}]}]},{\"n\": \"OGLRenderQueue$QueueFlusher.run()\",\"p\": \"sun.java2d.opengl\",\"v\": \"98\", \"c\": [ {\"n\": \"Object.wait(long)\",\"p\": \"java.lang\",\"v\": \"98\", \"c\": [ ]}]},{\"n\": \"JFRImpl.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"MetaProducer.onNewChunk()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"JFRImpl.getRecordings()\",\"p\": \"oracle.jrockit.jfr\",\"v\": \"1\", \"c\": [ {\"n\": \"ArrayList.<init>(Collection)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ {\"n\": \"AbstractCollection.toArray()\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ ]}]}]}]}]},{\"n\": \"Thread.run()\",\"p\": \"java.lang\",\"v\": \"10\", \"c\": [ {\"n\": \"ThreadPoolExecutor$Worker.run()\",\"p\": \"java.util.concurrent\",\"v\": \"10\", \"c\": [ {\"n\": \"ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker)\",\"p\": \"java.util.concurrent\",\"v\": \"10\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"10\", \"c\": [ {\"n\": \"TCPTransport$ConnectionHandler.run0()\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"10\", \"c\": [ {\"n\": \"TCPTransport.handleMessages(Connection, boolean)\",\"p\": \"sun.rmi.transport.tcp\",\"v\": \"10\", \"c\": [ {\"n\": \"Transport.serviceCall(RemoteCall)\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"AccessController.doPrivileged(PrivilegedExceptionAction, AccessControlContext)\",\"p\": \"java.security\",\"v\": \"1\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"Transport$1.run()\",\"p\": \"sun.rmi.transport\",\"v\": \"1\", \"c\": [ {\"n\": \"UnicastServerRef.dispatch(Remote, RemoteCall)\",\"p\": \"sun.rmi.server\",\"v\": \"1\", \"c\": [ {\"n\": \"UnicastRef.unmarshalValue(Class, ObjectInput)\",\"p\": \"sun.rmi.server\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readOrdinaryObject(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readSerialData(Object, ObjectStreamClass)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectStreamClass.invokeReadObject(Object, ObjectInputStream)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"Method.invoke(Object, Object[])\",\"p\": \"java.lang.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"DelegatingMethodAccessorImpl.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"GeneratedMethodAccessor3.invoke(Object, Object[])\",\"p\": \"sun.reflect\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectName.readObject(ObjectInputStream)\",\"p\": \"javax.management\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readObject0(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream.readString(boolean)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTF()\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"ObjectInputStream$BlockDataInputStream.readUTFBody(long)\",\"p\": \"java.io\",\"v\": \"1\", \"c\": [ {\"n\": \"StringBuilder.toString()\",\"p\": \"java.lang\",\"v\": \"1\", \"c\": [ {\"n\": \"String.<init>(char[], int, int)\",\"p\": \"java.lang\",\"v\": \"1\", \"c\": [ {\"n\": \"Arrays.copyOfRange(char[], int, int)\",\"p\": \"java.util\",\"v\": \"1\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},{\"n\": \"FilterInputStream.read()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"BufferedInputStream.read()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"BufferedInputStream.fill()\",\"p\": \"java.io\",\"v\": \"9\", \"c\": [ {\"n\": \"SocketInputStream.read(byte[], int, int)\",\"p\": \"java.net\",\"v\": \"9\", \"c\": [ {\"n\": \"SocketInputStream.read(byte[], int, int, int)\",\"p\": \"java.net\",\"v\": \"9\", \"c\": [ ]}]}]}]}]}]}]}]}]}]}]}]}\n\\ No newline at end of file\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-counts.json","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n@@ -57,0 +60,10 @@\n+\t\/**\n+\t * The parent node; null when root.\n+\t *\/\n+\tNode parent;\n+\n+\t\/**\n+\t * The child nodes; empty when leaf.\n+\t *\/\n+\tfinal List<Node> children = new ArrayList<>();\n+\n@@ -62,2 +75,7 @@\n-\tpublic Node(Integer nodeId, AggregatableFrame frame) {\n-\t\tthis.nodeId = nodeId;\n+\tpublic static Node newRootNode(AggregatableFrame rootFrame) {\n+\t\treturn new Node(null, rootFrame);\n+\t}\n+\n+\tpublic Node(Node parent, AggregatableFrame frame) {\n+\t\tthis.nodeId = computeNodeId(parent, frame);\n+\t\tthis.parent = parent;\n@@ -70,0 +88,4 @@\n+\tprivate static Integer computeNodeId(Node parent, AggregatableFrame frame) {\n+\t\treturn Objects.hash(parent != null ? parent.getNodeId() : null, frame.hashCode());\n+\t}\n+\n@@ -98,0 +120,22 @@\n+\t\/**\n+\t * @return the list of child nodes, in order of appearance.\n+\t *\/\n+\tpublic List<Node> getChildren() {\n+\t\treturn Collections.unmodifiableList(children);\n+\t}\n+\n+\t\/**\n+\t * @return the parent node or null when root.\n+\t *\/\n+\tpublic Node getParent() {\n+\t\treturn parent;\n+\t}\n+\n+\tpublic boolean isRoot() {\n+\t\treturn parent == null;\n+\t}\n+\n+\tpublic boolean isLeaf() {\n+\t\treturn children.isEmpty();\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/tree\/Node.java","additions":46,"deletions":2,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -39,3 +39,0 @@\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n@@ -43,4 +40,0 @@\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Set;\n-import java.util.TreeSet;\n@@ -80,4 +73,0 @@\n-\tprivate final Map<Integer, Node> nodes = new HashMap<>(1024);\n-\tprivate final Map<Integer, Set<Integer>> childrenLookup = new HashMap<>(1024);\n-\tprivate final Integer rootId;\n-\n@@ -87,1 +76,3 @@\n-\tprivate final boolean threadRootAtTop;\n+\tprivate final boolean invertedStacks;\n+\n+\tprivate final Node root;\n@@ -97,1 +88,1 @@\n-\t\tthis(items, DEFAULT_FRAME_SEPARATOR, true, null);\n+\t\tthis(items, DEFAULT_FRAME_SEPARATOR, false, null);\n@@ -110,1 +101,1 @@\n-\t\tthis(items, frameSeparator, true, null);\n+\t\tthis(items, frameSeparator, false, null);\n@@ -121,2 +112,2 @@\n-\t * @param threadRootAtTop\n-\t *            defines how the stacks are aggregated. Defaults to true (i.e. bottom-up,\n+\t * @param invertedStacks\n+\t *            defines how the stacks are aggregated. Defaults to false (i.e. bottom-up,\n@@ -125,2 +116,2 @@\n-\tpublic StacktraceTreeModel(IItemCollection items, FrameSeparator frameSeparator, boolean threadRootAtTop) {\n-\t\tthis(items, frameSeparator, threadRootAtTop, null);\n+\tpublic StacktraceTreeModel(IItemCollection items, FrameSeparator frameSeparator, boolean invertedStacks) {\n+\t\tthis(items, frameSeparator, invertedStacks, null);\n@@ -136,2 +127,2 @@\n-\t * @param threadRootAtTop\n-\t *            defines how the stacks are aggregated. Defaults to true (i.e. bottom-up,\n+\t * @param invertedStacks\n+\t *            defines how the stacks are aggregated. Defaults to false (i.e. bottom-up,\n@@ -143,1 +134,1 @@\n-\tpublic StacktraceTreeModel(IItemCollection items, FrameSeparator frameSeparator, boolean threadRootAtTop,\n+\tpublic StacktraceTreeModel(IItemCollection items, FrameSeparator frameSeparator, boolean invertedStacks,\n@@ -148,1 +139,1 @@\n-\t\tthis.threadRootAtTop = threadRootAtTop;\n+\t\tthis.invertedStacks = invertedStacks;\n@@ -151,4 +142,1 @@\n-\t\tthis.rootId = newNodeId(null, rootFrame);\n-\t\tnodes.put(rootId, new Node(rootId, rootFrame));\n-\t\tchildrenLookup.put(rootId, new TreeSet<>());\n-\n+\t\tthis.root = Node.newRootNode(rootFrame);\n@@ -165,15 +153,1 @@\n-\t\treturn nodes.get(rootId);\n-\t}\n-\n-\t\/**\n-\t * @return an unmodifiable view over the child lookup map.\n-\t *\/\n-\tpublic Map<Integer, Set<Integer>> getChildrenLookup() {\n-\t\treturn Collections.unmodifiableMap(childrenLookup);\n-\t}\n-\n-\t\/**\n-\t * @return an unmodifiable view over the node lookup map.\n-\t *\/\n-\tpublic Map<Integer, Node> getNodes() {\n-\t\treturn Collections.unmodifiableMap(nodes);\n+\t\treturn root;\n@@ -212,1 +186,1 @@\n-\t\tInteger parentId = rootId;\n+\t\tNode parent = getRoot();\n@@ -215,1 +189,1 @@\n-\t\t\tint idx = threadRootAtTop ? frames.size() - 1 - processedFrames : processedFrames;\n+\t\t\tint idx = invertedStacks ? processedFrames : frames.size() - 1 - processedFrames;\n@@ -218,1 +192,1 @@\n-\t\t\tif (stacktrace.getTruncationState().isTruncated() && threadRootAtTop && processedFrames == 0) {\n+\t\t\tif (stacktrace.getTruncationState().isTruncated() && !invertedStacks && processedFrames == 0) {\n@@ -225,2 +199,1 @@\n-\t\t\tint nodeId = newNodeId(parentId, frame);\n-\t\t\tNode current = getOrCreateNode(nodeId, frame);\n+\t\t\tNode current = getOrCreateNode(parent, frame);\n@@ -232,5 +205,1 @@\n-\t\t\tchildrenLookup.get(parentId).add(current.getNodeId());\n-\t\t\tif (childrenLookup.get(current.getNodeId()) == null) {\n-\t\t\t\tchildrenLookup.put(current.getNodeId(), new HashSet<>());\n-\t\t\t}\n-\t\t\tparentId = current.getNodeId();\n+\t\t\tparent = current;\n@@ -241,16 +210,9 @@\n-\tprivate Node getOrCreateNode(Integer nodeId, AggregatableFrame frame) {\n-\t\tNode n = nodes.get(nodeId);\n-\t\tif (n == null) {\n-\t\t\tn = new Node(nodeId, frame);\n-\t\t\tnodes.put(nodeId, n);\n-\t\t}\n-\t\treturn n;\n-\t}\n-\n-\tprivate Integer newNodeId(Integer parentId, AggregatableFrame aframe) {\n-\t\t\/\/ this is a naive implementation of content-addressable stacks\n-\t\t\/\/ given the same ancestors and the same frame, the node will have the same id\n-\t\tif (parentId == null) {\n-\t\t\treturn aframe.hashCode();\n-\t\t}\n-\t\treturn Objects.hash(parentId, aframe.hashCode());\n+\tprivate Node getOrCreateNode(Node parent, AggregatableFrame frame) {\n+\t\treturn parent.children.stream()\n+\t\t\t\t\t\/\/ TODO: consider a map lookup instead of linear search\n+\t\t\t\t\t.filter(child -> child.getFrame().equals(frame)).findAny()\n+\t\t\t\t\t.orElseGet(() -> {\n+\t\t\t\t\t\tNode result = new Node(parent, frame);\n+\t\t\t\t\t\tparent.children.add(result);\n+\t\t\t\t\t\treturn result;\n+\t\t\t\t\t});\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/stacktrace\/tree\/StacktraceTreeModel.java","additions":29,"deletions":67,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import java.util.Set;\n@@ -75,2 +74,2 @@\n-\tpublic void testTreeModelWithAttributeThreadRootAtTop() {\n-\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(testRecording, separator, true,\n+\tpublic void testTreeModelWithAttributeNormalStacks() {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator, false,\n@@ -78,0 +77,1 @@\n+\t\tNode root = model.getRoot();\n@@ -80,4 +80,1 @@\n-\t\tInteger rootId = treeModel.getRoot().getNodeId();\n-\t\tSet<Integer> rootNodeChildIds = treeModel.getChildrenLookup().get(rootId);\n-\t\tassertNotNull(rootNodeChildIds);\n-\t\tassertEquals(3, rootNodeChildIds.size());\n+\t\tassertEquals(3, root.getChildren().size());\n@@ -86,1 +83,1 @@\n-\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(treeModel);\n+\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(root);\n@@ -97,2 +94,2 @@\n-\tpublic void testTreeModelWithAttributeThreadRootAtBottom() {\n-\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(testRecording, separator, false,\n+\tpublic void testTreeModelWithAttributeInvertedStacks() {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator, true,\n@@ -101,5 +98,3 @@\n-\t\t\/\/ check number of branches from root\n-\t\tInteger rootId = treeModel.getRoot().getNodeId();\n-\t\tSet<Integer> rootNodeChildIds = treeModel.getChildrenLookup().get(rootId);\n-\t\tassertNotNull(rootNodeChildIds);\n-\t\tassertEquals(3, rootNodeChildIds.size());\n+\n+\t\tNode root = model.getRoot();\n+\t\tassertEquals(3, root.getChildren().size());\n@@ -108,1 +103,1 @@\n-\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(treeModel);\n+\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(root);\n@@ -119,2 +114,3 @@\n-\tpublic void testTreeModelWithoutAttributeThreadRootAtTop() {\n-\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(testRecording, separator);\n+\tpublic void testTreeModelWithoutAttributeNormalStacks() {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator);\n+\t\tNode root = model.getRoot();\n@@ -123,4 +119,1 @@\n-\t\tInteger rootId = treeModel.getRoot().getNodeId();\n-\t\tSet<Integer> rootNodeChildIds = treeModel.getChildrenLookup().get(rootId);\n-\t\tassertNotNull(rootNodeChildIds);\n-\t\tassertEquals(6, rootNodeChildIds.size());\n+\t\tassertEquals(6, root.getChildren().size());\n@@ -129,1 +122,1 @@\n-\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(treeModel);\n+\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(root);\n@@ -142,2 +135,3 @@\n-\tpublic void testTreeModelWithoutAttributeThreadRootAtBottom() {\n-\t\tStacktraceTreeModel treeModel = new StacktraceTreeModel(testRecording, separator, false);\n+\tpublic void testTreeModelWithoutAttributeInvertedStacks() {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, separator, true);\n+\t\tNode root = model.getRoot();\n@@ -146,4 +140,1 @@\n-\t\tInteger rootId = treeModel.getRoot().getNodeId();\n-\t\tSet<Integer> rootNodeChildIds = treeModel.getChildrenLookup().get(rootId);\n-\t\tassertNotNull(rootNodeChildIds);\n-\t\tassertEquals(7, rootNodeChildIds.size());\n+\t\tassertEquals(7, root.getChildren().size());\n@@ -152,1 +143,1 @@\n-\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(treeModel);\n+\t\tMap<String, List<Double>> leafValues = getLeafNodeValues(model.getRoot());\n@@ -164,3 +155,1 @@\n-\tpublic Map<String, List<Double>> getLeafNodeValues(StacktraceTreeModel treeModel) {\n-\t\tMap<Integer, Node> nodesById = treeModel.getNodes();\n-\t\tMap<Integer, Set<Integer>> childrenLookup = treeModel.getChildrenLookup();\n+\tprivate Map<String, List<Double>> getLeafNodeValues(Node root) {\n@@ -168,8 +157,13 @@\n-\t\t\/\/ we get the leaves by checking the lookup and selecting nodes with no children\n-\t\tfor (Integer nodeId : childrenLookup.keySet()) {\n-\t\t\tif (childrenLookup.get(nodeId).isEmpty()) {\n-\t\t\t\tNode node = nodesById.get(nodeId);\n-\t\t\t\tString key = node.getFrame().getHumanReadableShortString();\n-\t\t\t\tleafValues.computeIfAbsent(key, k -> new ArrayList<>());\n-\t\t\t\tleafValues.get(key).add(node.getWeight());\n-\t\t\t\tleafValues.get(key).sort(Comparator.naturalOrder());\n+\t\tpickLeaves(root, leafValues);\n+\t\treturn leafValues;\n+\t}\n+\n+\tprivate void pickLeaves(Node node, Map<String, List<Double>> accumulator) {\n+\t\tif (node.isLeaf()) {\n+\t\t\tString name = node.getFrame().getHumanReadableShortString();\n+\t\t\taccumulator.computeIfAbsent(name, k -> new ArrayList<>());\n+\t\t\taccumulator.get(name).add(node.getWeight());\n+\t\t\taccumulator.get(name).sort(Comparator.naturalOrder());\n+\t\t} else {\n+\t\t\tfor (Node child : node.getChildren()) {\n+\t\t\t\tpickLeaves(child, accumulator);\n@@ -178,1 +172,0 @@\n-\t\treturn leafValues;\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/StacktraceTreeModelTest.java","additions":35,"deletions":42,"binary":false,"changes":77,"status":"modified"}]}