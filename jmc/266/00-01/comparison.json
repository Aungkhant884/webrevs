{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.logging.Logger;\n@@ -43,0 +44,2 @@\n+\tprivate static Logger LOG = Logger.getLogger(SpecificReaders.class.getName());\n+\n@@ -44,0 +47,6 @@\n+\t\tboolean fallback;\n+\t\tint methodIdx;\n+\t\tint lineNumberIdx;\n+\t\tint bytecodeIndexIdx;\n+\t\tint typeIdx;\n+\n@@ -48,0 +57,24 @@\n+\t\t@Override\n+\t\tvoid addField(String identifier, String name, String description, ValueReaders.IValueReader reader)\n+\t\t\t\tthrows InvalidJfrFileException {\n+\t\t\tsuper.addField(identifier, name, description, reader);\n+\t\t\tint currentIdx = valueReaders.size() - 1;\n+\t\t\tswitch (identifier) {\n+\t\t\tcase \"method\":\n+\t\t\t\tmethodIdx = currentIdx;\n+\t\t\t\tbreak;\n+\t\t\tcase \"lineNumber\":\n+\t\t\t\tlineNumberIdx = currentIdx;\n+\t\t\t\tbreak;\n+\t\t\tcase \"bytecodeIndex\":\n+\t\t\t\tbytecodeIndexIdx = currentIdx;\n+\t\t\t\tbreak;\n+\t\t\tcase \"type\":\n+\t\t\t\ttypeIdx = currentIdx;\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tfallback = true; \/\/ invalid expected format, falling back to ReflectiveReader\n+\t\t\t\tLOG.warning(\"unexpected fields for StackFrame2Reader: \" + identifier);\n+\t\t\t}\n+\t\t}\n+\n@@ -51,0 +84,3 @@\n+\t\t\tif (fallback) {\n+\t\t\t\treturn super.read(in, allowUnresolvedReference);\n+\t\t\t}\n@@ -52,4 +88,4 @@\n-\t\t\tjfrFrame.method = valueReaders.get(0).read(in, allowUnresolvedReference);\n-\t\t\tjfrFrame.lineNumber = valueReaders.get(1).read(in, allowUnresolvedReference);\n-\t\t\tjfrFrame.bytecodeIndex = valueReaders.get(2).read(in, allowUnresolvedReference);\n-\t\t\tjfrFrame.type = valueReaders.get(3).read(in, allowUnresolvedReference);\n+\t\t\tjfrFrame.method = valueReaders.get(methodIdx).read(in, allowUnresolvedReference);\n+\t\t\tjfrFrame.lineNumber = valueReaders.get(lineNumberIdx).read(in, allowUnresolvedReference);\n+\t\t\tjfrFrame.bytecodeIndex = valueReaders.get(bytecodeIndexIdx).read(in, allowUnresolvedReference);\n+\t\t\tjfrFrame.type = valueReaders.get(typeIdx).read(in, allowUnresolvedReference);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/SpecificReaders.java","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"}]}