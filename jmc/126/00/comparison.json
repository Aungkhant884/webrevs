{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.function.Predicate;\n@@ -46,1 +47,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -100,2 +100,2 @@\n-\t\tpublic IItemIterable apply(IPredicate<IItem> filter) {\n-\t\t\treturn new StreamBackedItemIterable(() -> items.get().filter(filter::evaluate), getType());\n+\t\tpublic IItemIterable apply(Predicate<IItem> filter) {\n+\t\t\treturn new StreamBackedItemIterable(() -> items.get().filter(filter::test), getType());\n@@ -111,1 +111,1 @@\n-\t\t\tIPredicate<IItem> predicate = on.getPredicate(itemStream.getType());\n+\t\t\tPredicate<IItem> predicate = on.getPredicate(itemStream.getType());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/ItemIterableToolkit.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -73,1 +72,1 @@\n-\t\t\tIPredicate<IItem> predicate = filter.getPredicate(eventType);\n+\t\t\tPredicate<IItem> predicate = filter.getPredicate(eventType);\n@@ -79,1 +78,1 @@\n-\t\t\t\treturn ItemIterableToolkit.build(itemSupplier(ea.getEvents(), eventType, range, predicate::evaluate),\n+\t\t\t\treturn ItemIterableToolkit.build(itemSupplier(ea.getEvents(), eventType, range, predicate::test),\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/StreamModel.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.function.Predicate;\n@@ -68,1 +69,0 @@\n-\n@@ -70,1 +70,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -98,1 +97,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/LaneEditor.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.function.Predicate;\n@@ -41,1 +42,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -63,1 +63,1 @@\n-\tprivate final IPredicate<Object> m_valueFilter;\n+\tprivate final Predicate<Object> m_valueFilter;\n@@ -183,1 +183,1 @@\n-\t\tif (m_valueFilter != null && m_valueFilter.evaluate(event.getValue())) {\n+\t\tif (m_valueFilter != null && m_valueFilter.test(event.getValue())) {\n@@ -238,1 +238,1 @@\n-\tprivate static IPredicate<Object> getValueFilter(IMRIMetadata metadata) {\n+\tprivate static Predicate<Object> getValueFilter(IMRIMetadata metadata) {\n@@ -244,1 +244,1 @@\n-\t\t\treturn new IPredicate<Object>() {\n+\t\t\treturn new Predicate<Object>() {\n@@ -247,1 +247,1 @@\n-\t\t\t\tpublic boolean evaluate(Object value) {\n+\t\t\t\tpublic boolean test(Object value) {\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AbstractAttributeSubscription.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,5 @@\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.common.util.MCMethod\" \/>\n+\t\t<Method name=\"isHidden\" \/>\n+\t\t<Bug pattern=\"NP_BOOLEAN_RETURN_NULL\" \/>\n+\t<\/Match>\n@@ -602,0 +607,6 @@\n+\t<!-- This is an enum! -->\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.ui.misc.FilterEditor\" \/>\n+\t\t<Bug pattern=\"VO_VOLATILE_REFERENCE_TO_ARRAY\" \/>\n+\t<\/Match>\n+\n","filename":"configuration\/spotbugs\/spotbugs-exclude.xml","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7\n-org.eclipse.jdt.core.compiler.compliance=1.7\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.compliance=1.8\n@@ -8,1 +8,1 @@\n-org.eclipse.jdt.core.compiler.source=1.7\n+org.eclipse.jdt.core.compiler.source=1.8\n","filename":"core\/org.openjdk.jmc.common\/.settings\/org.eclipse.jdt.core.prefs","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- *\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- *\n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.common;\n-\n-\/**\n- * A predicate tests an object and returns either {@code true} or {@code false} depending on the\n- * implementation. This is very similar to the Java 8 interface java.util.Predicate.\n- *\n- * @param <T>\n- *            the type of objects that this predicate can test\n- *\/\n-\/\/ FIXME: Move to a subpackage (common.util?)\n-public interface IPredicate<T> {\n-\n-\t\/**\n-\t * Tests an object.\n-\t *\n-\t * @param o\n-\t *            object to test\n-\t * @return the test result, {@code true} or {@code false}\n-\t *\/\n-\tboolean evaluate(T o);\n-}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/IPredicate.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,1 @@\n-\n-import org.openjdk.jmc.common.IPredicate;\n+import java.util.function.Predicate;\n@@ -76,4 +75,2 @@\n-\t\treturn filter(itr, new IPredicate<T>() {\n-\n-\t\t\t@Override\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\treturn filter(itr, new Predicate<T>() {\n+\t\t\tpublic boolean test(T o) {\n@@ -96,1 +93,1 @@\n-\tpublic static <T> Iterator<T> filter(final Iterator<T> itr, final IPredicate<? super T> filter) {\n+\tpublic static <T> Iterator<T> filter(final Iterator<T> itr, final Predicate<? super T> filter) {\n@@ -103,1 +100,1 @@\n-\t\t\t\t\tif (filter.evaluate(object)) {\n+\t\t\t\t\tif (filter.test(object)) {\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/collection\/IteratorToolkit.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.function.Predicate;\n@@ -40,1 +41,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -439,1 +439,1 @@\n-\t\tprivate final IPredicate<IItem> p;\n+\t\tprivate final Predicate<IItem> p;\n@@ -442,1 +442,1 @@\n-\t\tpublic FilterConsumer(IPredicate<IItem> p, C nestedConsumer) {\n+\t\tpublic FilterConsumer(Predicate<IItem> p, C nestedConsumer) {\n@@ -449,1 +449,1 @@\n-\t\t\tif (p.evaluate(item)) {\n+\t\t\tif (p.test(item)) {\n@@ -1022,2 +1022,2 @@\n-\t\treturn Aggregators.valueBuilderAggregator(Aggregators.distinct(attribute),\n-\t\t\t\tnew IValueBuilder<String, Set<String>>() {\n+\t\tIAggregator<Set<String>, ?> aggregator = Aggregators.distinct(attribute);\n+\t\treturn Aggregators.valueBuilderAggregator(aggregator, new IValueBuilder<String, Set<String>>() {\n@@ -1025,4 +1025,4 @@\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String getValue(Set<String> source) {\n-\t\t\t\t\t\treturn source.isEmpty() ? null : StringToolkit.join(source, delimiter);\n-\t\t\t\t\t}\n+\t\t\t@Override\n+\t\t\tpublic String getValue(Set<String> source) {\n+\t\t\t\treturn source.isEmpty() ? null : StringToolkit.join(source, delimiter);\n+\t\t\t}\n@@ -1030,5 +1030,5 @@\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic IType<? super String> getValueType() {\n-\t\t\t\t\t\treturn UnitLookup.PLAIN_TEXT;\n-\t\t\t\t\t}\n-\t\t\t\t}, name, description);\n+\t\t\t@Override\n+\t\t\tpublic IType<? super String> getValueType() {\n+\t\t\t\treturn UnitLookup.PLAIN_TEXT;\n+\t\t\t}\n+\t\t}, name, description);\n@@ -1094,1 +1094,1 @@\n-\t\tfinal IItemConsumerFactory<C> consumerFactory, final IPredicate<IType<IItem>> acceptType) {\n+\t\tfinal IItemConsumerFactory<C> consumerFactory, final Predicate<IType<IItem>> acceptType) {\n@@ -1099,1 +1099,1 @@\n-\t\t\t\treturn acceptType.evaluate(type);\n+\t\t\t\treturn acceptType.test(type);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/Aggregators.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.function.Predicate;\n@@ -41,1 +42,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -140,1 +140,1 @@\n-\t\tprivate final IPredicate<IType<IItem>> acceptType;\n+\t\tprivate final Predicate<IType<IItem>> acceptType;\n@@ -143,1 +143,1 @@\n-\t\t\t\tIItemConsumerFactory<G> consumerFactory, IPredicate<IType<IItem>> acceptType,\n+\t\t\t\tIItemConsumerFactory<G> consumerFactory, Predicate<IType<IItem>> acceptType,\n@@ -154,1 +154,1 @@\n-\t\t\treturn keyField.getAccessor(type) != null && acceptType.evaluate(type);\n+\t\t\treturn keyField.getAccessor(type) != null && acceptType.test(type);\n@@ -176,1 +176,1 @@\n-\t\tIPredicate<IType<IItem>> acceptType, IGroupsFinisher<V, K, C> finisher) {\n+\t\tPredicate<IType<IItem>> acceptType, IGroupsFinisher<V, K, C> finisher) {\n@@ -183,1 +183,1 @@\n-\t\treturn build(name, description, keyField, a, new IPredicate<IType<IItem>>() {\n+\t\treturn build(name, description, keyField, a, new Predicate<IType<IItem>>() {\n@@ -186,1 +186,1 @@\n-\t\t\tpublic boolean evaluate(IType<IItem> o) {\n+\t\t\tpublic boolean test(IType<IItem> o) {\n@@ -194,1 +194,1 @@\n-\t\tIPredicate<IType<IItem>> acceptType) {\n+\t\tPredicate<IType<IItem>> acceptType) {\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/GroupingAggregator.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.common.IPredicate;\n+import java.util.function.Predicate;\n@@ -49,1 +49,1 @@\n-\tIPredicate<IItem> getPredicate(IType<IItem> type);\n+\tPredicate<IItem> getPredicate(IType<IItem> type);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/IItemFilter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n-\n-import org.openjdk.jmc.common.IPredicate;\n+import java.util.function.Predicate;\n@@ -67,1 +66,1 @@\n-\tIItemIterable apply(IPredicate<IItem> predicate);\n+\tIItemIterable apply(Predicate<IItem> predicate);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/IItemIterable.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.function.Predicate;\n@@ -42,1 +43,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -77,1 +77,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -110,2 +110,2 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n-\t\t\tList<IPredicate<IItem>> predicates = new ArrayList<>(filters.length);\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n+\t\t\tList<Predicate<IItem>> predicates = new ArrayList<>(filters.length);\n@@ -130,1 +130,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -148,1 +148,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -178,1 +178,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -206,1 +206,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -273,1 +273,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -281,1 +281,1 @@\n-\t\tprotected abstract IPredicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M value);\n+\t\tprotected abstract Predicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M value);\n@@ -295,1 +295,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -309,1 +309,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -323,1 +323,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M value) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M value) {\n@@ -334,1 +334,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M value) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M value) {\n@@ -345,1 +345,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -360,1 +360,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -375,1 +375,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M limit) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends M, IItem> accessor, M limit) {\n@@ -397,2 +397,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(\n-\t\t\tIMemberAccessor<? extends IRange<M>, IItem> accessor, IRange<M> limit) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends IRange<M>, IItem> accessor, IRange<M> limit) {\n@@ -433,1 +432,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String regexp) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String regexp) {\n@@ -447,1 +446,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String regexp) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String regexp) {\n@@ -461,1 +460,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String substring) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String substring) {\n@@ -472,1 +471,1 @@\n-\t\tprotected IPredicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String substring) {\n+\t\tprotected Predicate<IItem> getPredicate(IMemberAccessor<? extends String, IItem> accessor, String substring) {\n@@ -486,1 +485,1 @@\n-\t\tprivate final static IPredicate<IItem> ALWAYSTRUE = new IPredicate<IItem>() {\n+\t\tprivate final static Predicate<IItem> ALWAYSTRUE = new Predicate<IItem>() {\n@@ -488,1 +487,1 @@\n-\t\t\tpublic boolean evaluate(IItem o) {\n+\t\t\tpublic boolean test(IItem o) {\n@@ -493,1 +492,1 @@\n-\t\tprivate final static IPredicate<IItem> ALWAYSFALSE = new IPredicate<IItem>() {\n+\t\tprivate final static Predicate<IItem> ALWAYSFALSE = new Predicate<IItem>() {\n@@ -495,1 +494,1 @@\n-\t\t\tpublic boolean evaluate(IItem o) {\n+\t\t\tpublic boolean test(IItem o) {\n@@ -501,1 +500,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/ItemFilters.java","additions":28,"deletions":29,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.function.Predicate;\n@@ -44,1 +45,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -50,1 +50,1 @@\n- * Toolkit used to create instances of {@link IPredicate} matching various criteria.\n+ * Toolkit used to create instances of {@link Predicate} matching various criteria.\n@@ -54,1 +54,1 @@\n-\tprivate static final IPredicate<Object> FALSE = new IPredicate<Object>() {\n+\tprivate static final Predicate<Object> FALSE = new Predicate<Object>() {\n@@ -56,1 +56,1 @@\n-\t\tpublic boolean evaluate(Object o) {\n+\t\tpublic boolean test(Object o) {\n@@ -60,1 +60,1 @@\n-\tprivate static final IPredicate<Object> TRUE = new IPredicate<Object>() {\n+\tprivate static final Predicate<Object> TRUE = new Predicate<Object>() {\n@@ -62,1 +62,1 @@\n-\t\tpublic boolean evaluate(Object o) {\n+\t\tpublic boolean test(Object o) {\n@@ -68,1 +68,1 @@\n-\t * @return a predicate that always will evaluate to {@code true}\n+\t * @return a predicate that always will test to {@code true}\n@@ -71,2 +71,2 @@\n-\tpublic static <T> IPredicate<T> truePredicate() {\n-\t\treturn (IPredicate<T>) TRUE;\n+\tpublic static <T> Predicate<T> truePredicate() {\n+\t\treturn (Predicate<T>) TRUE;\n@@ -76,1 +76,1 @@\n-\t * @return a predicate that always will evaluate to {@code false}\n+\t * @return a predicate that always will test to {@code false}\n@@ -79,2 +79,2 @@\n-\tpublic static <T> IPredicate<T> falsePredicate() {\n-\t\treturn (IPredicate<T>) FALSE;\n+\tpublic static <T> Predicate<T> falsePredicate() {\n+\t\treturn (Predicate<T>) FALSE;\n@@ -84,3 +84,2 @@\n-\t * Test if a predicate is guaranteed to always evaluate to {@code true}. Note that if this\n-\t * method returns {@code false}, then it only means that it is unknown what the predicate will\n-\t * return.\n+\t * Test if a predicate is guaranteed to always test to {@code true}. Note that if this method\n+\t * returns {@code false}, then it only means that it is unknown what the predicate will return.\n@@ -90,1 +89,1 @@\n-\t * @return {@code true} if the predicate is guaranteed to evaluate to {@code true}\n+\t * @return {@code true} if the predicate is guaranteed to test to {@code true}\n@@ -92,1 +91,1 @@\n-\tpublic static boolean isTrueGuaranteed(IPredicate<?> p) {\n+\tpublic static boolean isTrueGuaranteed(Predicate<?> p) {\n@@ -97,3 +96,2 @@\n-\t * Test if a predicate is guaranteed to always evaluate to {@code false}. Note that if this\n-\t * method returns {@code false}, then it only means that it is unknown what the predicate will\n-\t * return.\n+\t * Test if a predicate is guaranteed to always test to {@code false}. Note that if this method\n+\t * returns {@code false}, then it only means that it is unknown what the predicate will return.\n@@ -103,1 +101,1 @@\n-\t * @return {@code true} if the predicate is guaranteed to evaluate to {@code false}\n+\t * @return {@code true} if the predicate is guaranteed to test to {@code false}\n@@ -105,1 +103,1 @@\n-\tpublic static boolean isFalseGuaranteed(IPredicate<?> p) {\n+\tpublic static boolean isFalseGuaranteed(Predicate<?> p) {\n@@ -114,2 +112,1 @@\n-\t * @return a predicate that evaluates to {@code true} if all input predicates evaluate to\n-\t *         {@code true}\n+\t * @return a predicate that tests to {@code true} if all input predicates test to {@code true}\n@@ -117,1 +114,1 @@\n-\tpublic static <T> IPredicate<T> and(Collection<IPredicate<T>> predicates) {\n+\tpublic static <T> Predicate<T> and(Collection<Predicate<T>> predicates) {\n@@ -124,2 +121,2 @@\n-\t\t\tfinal List<IPredicate<T>> nonTrivialPredicates = new ArrayList<>(predicates.size());\n-\t\t\tfor (IPredicate<T> p : predicates) {\n+\t\t\tfinal List<Predicate<T>> nonTrivialPredicates = new ArrayList<>(predicates.size());\n+\t\t\tfor (Predicate<T> p : predicates) {\n@@ -137,1 +134,1 @@\n-\t\t\t\treturn new IPredicate<T>() {\n+\t\t\t\treturn new Predicate<T>() {\n@@ -140,3 +137,3 @@\n-\t\t\t\t\tpublic boolean evaluate(T o) {\n-\t\t\t\t\t\tfor (IPredicate<T> ex : nonTrivialPredicates) {\n-\t\t\t\t\t\t\tif (!ex.evaluate(o)) {\n+\t\t\t\t\tpublic boolean test(T o) {\n+\t\t\t\t\t\tfor (Predicate<T> ex : nonTrivialPredicates) {\n+\t\t\t\t\t\t\tif (!ex.test(o)) {\n@@ -158,2 +155,2 @@\n-\t * @return a predicate that evaluates to {@code true} if at least one of the input predicates\n-\t *         evaluate to {@code true}\n+\t * @return a predicate that tests to {@code true} if at least one of the input predicates test\n+\t *         to {@code true}\n@@ -161,1 +158,1 @@\n-\tpublic static <T> IPredicate<T> or(Collection<IPredicate<T>> predicates) {\n+\tpublic static <T> Predicate<T> or(Collection<Predicate<T>> predicates) {\n@@ -168,2 +165,2 @@\n-\t\t\tfinal List<IPredicate<T>> nonTrivialPredicates = new ArrayList<>(predicates.size());\n-\t\t\tfor (IPredicate<T> p : predicates) {\n+\t\t\tfinal List<Predicate<T>> nonTrivialPredicates = new ArrayList<>(predicates.size());\n+\t\t\tfor (Predicate<T> p : predicates) {\n@@ -181,1 +178,1 @@\n-\t\t\t\treturn new IPredicate<T>() {\n+\t\t\t\treturn new Predicate<T>() {\n@@ -184,3 +181,3 @@\n-\t\t\t\t\tpublic boolean evaluate(T o) {\n-\t\t\t\t\t\tfor (IPredicate<T> ex : nonTrivialPredicates) {\n-\t\t\t\t\t\t\tif (ex.evaluate(o)) {\n+\t\t\t\t\tpublic boolean test(T o) {\n+\t\t\t\t\t\tfor (Predicate<T> ex : nonTrivialPredicates) {\n+\t\t\t\t\t\t\tif (ex.test(o)) {\n@@ -202,2 +199,2 @@\n-\t * @return a predicate that evaluates to {@code true} if the input predicate evaluates to\n-\t *         {@code false} and vice versa\n+\t * @return a predicate that tests to {@code true} if the input predicate tests to {@code false}\n+\t *         and vice versa\n@@ -205,1 +202,1 @@\n-\tpublic static <T> IPredicate<T> not(final IPredicate<T> predicate) {\n+\tpublic static <T> Predicate<T> not(final Predicate<T> predicate) {\n@@ -211,1 +208,1 @@\n-\t\t\treturn new IPredicate<T>() {\n+\t\t\treturn new Predicate<T>() {\n@@ -214,2 +211,2 @@\n-\t\t\t\tpublic boolean evaluate(T o) {\n-\t\t\t\t\treturn !predicate.evaluate(o);\n+\t\t\t\tpublic boolean test(T o) {\n+\t\t\t\t\treturn !predicate.test(o);\n@@ -232,1 +229,1 @@\n-\t *            if {@code true}, evaluate values that are equal to the limit to {@code true}\n+\t *            if {@code true}, test values that are equal to the limit to {@code true}\n@@ -237,1 +234,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is less than, or\n+\t * @return a predicate that tests to {@code true} if the value to check is less than, or\n@@ -240,1 +237,1 @@\n-\tpublic static <T, M> IPredicate<T> less(\n+\tpublic static <T, M> Predicate<T> less(\n@@ -260,2 +257,2 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is strictly less\n-\t *         than the limit value\n+\t * @return a predicate that tests to {@code true} if the value to check is strictly less than\n+\t *         the limit value\n@@ -263,1 +260,1 @@\n-\tpublic static <T, M> IPredicate<T> less(\n+\tpublic static <T, M> Predicate<T> less(\n@@ -265,1 +262,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -267,1 +264,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -288,2 +285,2 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is less than or\n-\t *         equal to the limit value\n+\t * @return a predicate that tests to {@code true} if the value to check is less than or equal to\n+\t *         the limit value\n@@ -291,1 +288,1 @@\n-\tpublic static <T, M> IPredicate<T> lessOrEqual(\n+\tpublic static <T, M> Predicate<T> lessOrEqual(\n@@ -293,1 +290,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -295,1 +292,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -313,1 +310,1 @@\n-\t *            if {@code true}, evaluate values that are equal to the limit to {@code true}\n+\t *            if {@code true}, test values that are equal to the limit to {@code true}\n@@ -318,1 +315,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is greater than, or\n+\t * @return a predicate that tests to {@code true} if the value to check is greater than, or\n@@ -321,1 +318,1 @@\n-\tpublic static <T, M> IPredicate<T> more(\n+\tpublic static <T, M> Predicate<T> more(\n@@ -341,2 +338,2 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is strictly greater\n-\t *         than the limit value\n+\t * @return a predicate that tests to {@code true} if the value to check is strictly greater than\n+\t *         the limit value\n@@ -344,1 +341,1 @@\n-\tpublic static <T, M> IPredicate<T> more(\n+\tpublic static <T, M> Predicate<T> more(\n@@ -346,1 +343,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -348,1 +345,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -369,2 +366,2 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is greater than or\n-\t *         equal to the limit value\n+\t * @return a predicate that tests to {@code true} if the value to check is greater than or equal\n+\t *         to the limit value\n@@ -372,1 +369,1 @@\n-\tpublic static <T, M> IPredicate<T> moreOrEqual(\n+\tpublic static <T, M> Predicate<T> moreOrEqual(\n@@ -374,1 +371,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -376,1 +373,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -398,2 +395,2 @@\n-\t * @return a predicate that evaluates to {@code true} if the range value to check intersects\n-\t *         with the limit range\n+\t * @return a predicate that tests to {@code true} if the range value to check intersects with\n+\t *         the limit range\n@@ -401,1 +398,1 @@\n-\tpublic static <T, M extends Comparable<? super M>> IPredicate<T> rangeIntersects(\n+\tpublic static <T, M extends Comparable<? super M>> Predicate<T> rangeIntersects(\n@@ -403,1 +400,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -405,1 +402,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -431,2 +428,2 @@\n-\t * @return a predicate that evaluates to {@code true} if the range value to check is contained\n-\t *         in the limit range\n+\t * @return a predicate that tests to {@code true} if the range value to check is contained in\n+\t *         the limit range\n@@ -434,1 +431,1 @@\n-\tpublic static <T, M extends Comparable<? super M>> IPredicate<T> rangeContained(\n+\tpublic static <T, M extends Comparable<? super M>> Predicate<T> rangeContained(\n@@ -439,1 +436,1 @@\n-\t\t\treturn new IPredicate<T>() {\n+\t\t\treturn new Predicate<T>() {\n@@ -441,1 +438,1 @@\n-\t\t\t\tpublic boolean evaluate(T o) {\n+\t\t\t\tpublic boolean test(T o) {\n@@ -447,1 +444,1 @@\n-\t\t\treturn new IPredicate<T>() {\n+\t\t\treturn new Predicate<T>() {\n@@ -449,1 +446,1 @@\n-\t\t\t\tpublic boolean evaluate(T o) {\n+\t\t\t\tpublic boolean test(T o) {\n@@ -476,1 +473,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the center point of the range value to\n+\t * @return a predicate that tests to {@code true} if the center point of the range value to\n@@ -479,1 +476,1 @@\n-\tpublic static <T, M extends Comparable<? super M>> IPredicate<T> centerContained(\n+\tpublic static <T, M extends Comparable<? super M>> Predicate<T> centerContained(\n@@ -481,1 +478,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -483,1 +480,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -506,1 +503,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is equal to the\n+\t * @return a predicate that tests to {@code true} if the value to check is equal to the\n@@ -509,2 +506,2 @@\n-\tpublic static <T> IPredicate<T> equals(final IMemberAccessor<?, T> valueAccessor, final Object item) {\n-\t\treturn new IPredicate<T>() {\n+\tpublic static <T> Predicate<T> equals(final IMemberAccessor<?, T> valueAccessor, final Object item) {\n+\t\treturn new Predicate<T>() {\n@@ -513,1 +510,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -532,1 +529,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is not equal to the\n+\t * @return a predicate that tests to {@code true} if the value to check is not equal to the\n@@ -535,2 +532,2 @@\n-\tpublic static <T> IPredicate<T> notEquals(final IMemberAccessor<?, T> valueAccessor, final Object item) {\n-\t\treturn new IPredicate<T>() {\n+\tpublic static <T> Predicate<T> notEquals(final IMemberAccessor<?, T> valueAccessor, final Object item) {\n+\t\treturn new Predicate<T>() {\n@@ -539,1 +536,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -557,2 +554,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the value to check is the specified\n-\t *         object\n+\t * @return a predicate that tests to {@code true} if the value to check is the specified object\n@@ -560,2 +556,2 @@\n-\tpublic static <T> IPredicate<T> is(final T item) {\n-\t\treturn new IPredicate<T>() {\n+\tpublic static <T> Predicate<T> is(final T item) {\n+\t\treturn new Predicate<T>() {\n@@ -564,1 +560,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -584,1 +580,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the object to check is included in the\n+\t * @return a predicate that tests to {@code true} if the object to check is included in the\n@@ -587,1 +583,1 @@\n-\tpublic static <T, M> IPredicate<T> memberOf(\n+\tpublic static <T, M> Predicate<T> memberOf(\n@@ -589,1 +585,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -592,1 +588,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -611,1 +607,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the string value matches the regular\n+\t * @return a predicate that tests to {@code true} if the string value matches the regular\n@@ -614,1 +610,1 @@\n-\tpublic static <T> IPredicate<T> matches(final IMemberAccessor<? extends String, T> valueAccessor, String regexp) {\n+\tpublic static <T> Predicate<T> matches(final IMemberAccessor<? extends String, T> valueAccessor, String regexp) {\n@@ -616,1 +612,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -618,1 +614,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n@@ -635,1 +631,1 @@\n-\t * @return a predicate that evaluates to {@code true} if the string value contains the substring\n+\t * @return a predicate that tests to {@code true} if the string value contains the substring\n@@ -637,1 +633,1 @@\n-\tpublic static <T> IPredicate<T> contains(\n+\tpublic static <T> Predicate<T> contains(\n@@ -639,1 +635,1 @@\n-\t\treturn new IPredicate<T>() {\n+\t\treturn new Predicate<T>() {\n@@ -641,1 +637,1 @@\n-\t\t\tpublic boolean evaluate(T o) {\n+\t\t\tpublic boolean test(T o) {\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/util\/PredicateToolkit.java","additions":110,"deletions":114,"binary":false,"changes":224,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.util.function.Predicate;\n@@ -47,1 +48,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -88,1 +88,1 @@\n-\t\t\t\t\tJfrAttributes.EVENT_THREAD, Aggregators.count(), new IPredicate<IType<IItem>>() {\n+\t\t\t\t\tJfrAttributes.EVENT_THREAD, Aggregators.count(), new Predicate<IType<IItem>>() {\n@@ -91,1 +91,1 @@\n-\t\t\t\t\t\tpublic boolean evaluate(IType<IItem> type) {\n+\t\t\t\t\t\tpublic boolean test(IType<IItem> type) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/FewSampledThreadsRule.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.function.Predicate;\n@@ -42,1 +43,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -84,1 +84,1 @@\n-\tprivate static final IPredicate<IMCMethod> IS_AUTOBOXED_PREDICATE = new IPredicate<IMCMethod>() {\n+\tprivate static final Predicate<IMCMethod> IS_AUTOBOXED_PREDICATE = new Predicate<IMCMethod>() {\n@@ -86,1 +86,1 @@\n-\t\tpublic boolean evaluate(IMCMethod method) {\n+\t\tpublic boolean test(IMCMethod method) {\n@@ -150,1 +150,1 @@\n-\t\t\tif (IS_AUTOBOXED_PREDICATE.evaluate(method)) {\n+\t\t\tif (IS_AUTOBOXED_PREDICATE.test(method)) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AutoBoxingRule.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import org.openjdk.jmc.common.unit.IUnit;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/HeapDumpRule.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.function.Predicate;\n@@ -41,1 +42,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -105,1 +105,1 @@\n-\t\tpublic IItemIterable apply(IPredicate<IItem> predicate) {\n+\t\tpublic IItemIterable apply(Predicate<IItem> predicate) {\n@@ -170,2 +170,2 @@\n-\t\tpublic IItemIterable apply(IPredicate<IItem> predicate) {\n-\t\t\tif (predicate.evaluate(itemList.get(0))) {\n+\t\tpublic IItemIterable apply(Predicate<IItem> predicate) {\n+\t\t\tif (predicate.test(itemList.get(0))) {\n@@ -194,1 +194,1 @@\n-\t\treturn filter.getPredicate((IType<IItem>) item.getType()).evaluate(item) ? this : NULLCOLLECTION;\n+\t\treturn filter.getPredicate((IType<IItem>) item.getType()).test(item) ? this : NULLCOLLECTION;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/SingleEntryItemCollection.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,2 @@\n-import org.openjdk.jmc.common.IPredicate;\n+import java.util.function.Predicate;\n+\n@@ -50,1 +51,1 @@\n-\tprivate class TimeRangePredicate implements IPredicate<IItem> {\n+\tprivate class TimeRangePredicate implements Predicate<IItem> {\n@@ -52,1 +53,1 @@\n-\t\tpublic boolean evaluate(IItem o) {\n+\t\tpublic boolean test(IItem o) {\n@@ -84,1 +85,1 @@\n-\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/tree\/TimeRangeFilter.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.function.Predicate;\n@@ -41,1 +42,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -57,1 +57,1 @@\n-\tprivate class TimeRangePredicate implements IPredicate<IItem> {\n+\tprivate class TimeRangePredicate implements Predicate<IItem> {\n@@ -59,1 +59,1 @@\n-\t\tpublic boolean evaluate(IItem o) {\n+\t\tpublic boolean test(IItem o) {\n@@ -111,1 +111,1 @@\n-\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/tree\/TimeRangeThreadFilter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import java.util.function.Predicate;\n@@ -58,1 +59,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -279,1 +279,1 @@\n-\t\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -282,1 +282,1 @@\n-\t\t\t\t\treturn new IPredicate<IItem>() {\n+\t\t\t\t\treturn new Predicate<IItem>() {\n@@ -285,1 +285,1 @@\n-\t\t\t\t\t\tpublic boolean evaluate(IItem o) {\n+\t\t\t\t\t\tpublic boolean test(IItem o) {\n@@ -368,1 +368,1 @@\n-\t\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -370,1 +370,1 @@\n-\t\t\t\treturn new IPredicate<IItem>() {\n+\t\t\t\treturn new Predicate<IItem>() {\n@@ -373,1 +373,1 @@\n-\t\t\t\t\tpublic boolean evaluate(IItem o) {\n+\t\t\t\t\tpublic boolean test(IItem o) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+jre.compilation.profile = JavaSE-1.8\n","filename":"core\/org.openjdk.jmc.flightrecorder\/build.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.util.function.Predicate;\n@@ -42,1 +43,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -69,1 +69,1 @@\n-\t\tEventTypeEntry(EventArray events, IPredicate<IItem> predicate) {\n+\t\tEventTypeEntry(EventArray events, Predicate<IItem> predicate) {\n@@ -75,1 +75,1 @@\n-\t\tfinal IPredicate<IItem> predicate;\n+\t\tfinal Predicate<IItem> predicate;\n@@ -107,2 +107,2 @@\n-\t\tpublic EventTypeEntry apply(IPredicate<IItem> filter) {\n-\t\t\tIPredicate<IItem> newPredicate = PredicateToolkit.and(Arrays.asList(filter, predicate));\n+\t\tpublic EventTypeEntry apply(Predicate<IItem> filter) {\n+\t\t\tPredicate<IItem> newPredicate = PredicateToolkit.and(Arrays.asList(filter, predicate));\n@@ -149,1 +149,1 @@\n-\tprivate static Iterator<IItem> buildIterator(IItem[] array, IPredicate<? super IItem> filter) {\n+\tprivate static Iterator<IItem> buildIterator(IItem[] array, Predicate<? super IItem> filter) {\n@@ -157,1 +157,1 @@\n-\tprivate static boolean isFiltered(IPredicate<?> filter) {\n+\tprivate static boolean isFiltered(Predicate<?> filter) {\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/EventCollection.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import java.util.function.Predicate;\n+\n@@ -38,1 +40,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -167,1 +168,1 @@\n-\t\tpublic IPredicate<IItem> getPredicate(IType<IItem> type) {\n+\t\tpublic Predicate<IItem> getPredicate(IType<IItem> type) {\n@@ -173,1 +174,1 @@\n-\t\t\treturn new IPredicate<IItem>() {\n+\t\t\treturn new Predicate<IItem>() {\n@@ -176,1 +177,1 @@\n-\t\t\t\tpublic boolean evaluate(IItem o) {\n+\t\t\t\tpublic boolean test(IItem o) {\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkFilters.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.util.function.Predicate;\n@@ -38,1 +39,0 @@\n-import org.openjdk.jmc.common.IPredicate;\n@@ -74,1 +74,1 @@\n-\tpublic IItemIterable apply(IPredicate<IItem> filter) {\n+\tpublic IItemIterable apply(Predicate<IItem> filter) {\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/src\/test\/java\/org\/openjdk\/jmc\/common\/test\/mock\/item\/MockItemIterable.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}