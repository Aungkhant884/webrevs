{"files":[{"patch":"@@ -52,0 +52,2 @@\n+\tQUECTO(-30, 'q'),\n+\tRONTO(-27, 'r'),\n@@ -72,1 +74,3 @@\n-\tYOTTA(24, 'Y');\n+\tYOTTA(24, 'Y'),\n+\tRONNA(27, 'R'),\n+\tQUETTA(30, 'Q');\n@@ -95,2 +99,2 @@\n-\tprivate final static DecimalPrefix[] THOUSANDS = {YOCTO, ZEPTO, ATTO, FEMTO, PICO, NANO, MICRO, MILLI, NONE, KILO,\n-\t\t\tMEGA, GIGA, TERA, EXA, PETA, ZETTA, YOTTA};\n+\tprivate final static DecimalPrefix[] THOUSANDS = {QUECTO, RONTO, YOCTO, ZEPTO, ATTO, FEMTO, PICO, NANO, MICRO,\n+\t\t\tMILLI, NONE, KILO, MEGA, GIGA, TERA, EXA, PETA, ZETTA, YOTTA, RONNA, QUETTA};\n@@ -134,1 +138,1 @@\n-\t\tint idx = Math.max(0, getFloorLog1000(value) - (YOCTO.powerOfTen \/ 3));\n+\t\tint idx = Math.max(0, getFloorLog1000(value) - (QUECTO.powerOfTen \/ 3));\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/DecimalPrefix.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-\t\tfinal int minLog10 = DecimalPrefix.YOCTO.powerOf10();\n+\t\tfinal int minLog10 = DecimalPrefix.QUECTO.powerOf10();\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/DecimalUnitSelector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-import static org.openjdk.jmc.common.unit.DecimalPrefix.YOCTO;\n-import static org.openjdk.jmc.common.unit.DecimalPrefix.YOTTA;\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.QUECTO;\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.QUETTA;\n@@ -455,1 +455,1 @@\n-\t\t\t\tEnumSet.range(YOCTO, YOTTA));\n+\t\t\t\tEnumSet.range(QUECTO, QUETTA));\n@@ -475,1 +475,1 @@\n-\t\t\t\tEnumSet.range(YOCTO, YOTTA));\n+\t\t\t\tEnumSet.range(QUECTO, QUETTA));\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/UnitLookup.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-import static org.openjdk.jmc.common.unit.DecimalPrefix.YOCTO;\n-import static org.openjdk.jmc.common.unit.DecimalPrefix.YOTTA;\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.QUECTO;\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.QUETTA;\n@@ -88,1 +88,1 @@\n-\t\tlength = new LinearKindOfQuantity(\"length\", \"m\", YOCTO, YOTTA);\n+\t\tlength = new LinearKindOfQuantity(\"length\", \"m\", QUECTO, QUETTA);\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/src\/main\/java\/org\/openjdk\/jmc\/common\/test\/unit\/AdHocQuantityTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,4 @@\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.QUECTO;\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.QUETTA;\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.RONTO;\n+import static org.openjdk.jmc.common.unit.DecimalPrefix.RONNA;\n@@ -53,0 +57,18 @@\n+\t@Test\n+\tpublic void testQuecto() {\n+\t\tdouble quectos = 2 * Math.pow(10, -30);\n+\t\tassertEquals(-10, DecimalPrefix.getFloorLog1000(quectos));\n+\t\tassertEquals(QUECTO, DecimalPrefix.getEngFloorPrefix(quectos));\n+\t\tassertEquals(-10, DecimalPrefix.getFloorLog1000(-quectos));\n+\t\tassertEquals(QUECTO, DecimalPrefix.getEngFloorPrefix(-quectos));\n+\t}\n+\n+\t@Test\n+\tpublic void testRonto() {\n+\t\tdouble rontos = 2 * Math.pow(10, -27);\n+\t\tassertEquals(-9, DecimalPrefix.getFloorLog1000(rontos));\n+\t\tassertEquals(RONTO, DecimalPrefix.getEngFloorPrefix(rontos));\n+\t\tassertEquals(-9, DecimalPrefix.getFloorLog1000(-rontos));\n+\t\tassertEquals(RONTO, DecimalPrefix.getEngFloorPrefix(-rontos));\n+\t}\n+\n@@ -71,0 +93,18 @@\n+\t@Test\n+\tpublic void testQuetta() {\n+\t\tdouble quettas = 2 * Math.pow(10, 30);\n+\t\tassertEquals(10, DecimalPrefix.getFloorLog1000(quettas));\n+\t\tassertEquals(QUETTA, DecimalPrefix.getEngFloorPrefix(quettas));\n+\t\tassertEquals(10, DecimalPrefix.getFloorLog1000(-quettas));\n+\t\tassertEquals(QUETTA, DecimalPrefix.getEngFloorPrefix(-quettas));\n+\t}\n+\n+\t@Test\n+\tpublic void testRonna() {\n+\t\tdouble ronnas = 2 * Math.pow(10, 27);\n+\t\tassertEquals(9, DecimalPrefix.getFloorLog1000(ronnas));\n+\t\tassertEquals(RONNA, DecimalPrefix.getEngFloorPrefix(ronnas));\n+\t\tassertEquals(9, DecimalPrefix.getFloorLog1000(-ronnas));\n+\t\tassertEquals(RONNA, DecimalPrefix.getEngFloorPrefix(-ronnas));\n+\t}\n+\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/src\/main\/java\/org\/openjdk\/jmc\/common\/test\/unit\/DecimalPrefixTest.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}