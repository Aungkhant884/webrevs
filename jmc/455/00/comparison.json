{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n@@ -76,1 +77,1 @@\n-\tprivate final ConcurrentHashMap<String, Long> entryPoolSizeByType = new ConcurrentHashMap<>();\n+\tprivate final ConcurrentHashMap<String, AtomicLong> entryPoolSizeByType = new ConcurrentHashMap<>();\n@@ -79,1 +80,1 @@\n-\tprivate Map<String, IConstantPoolExtension> constantPoolExtensions = new ConcurrentHashMap<>();\n+\tprivate final Map<String, IConstantPoolExtension> constantPoolExtensions = new ConcurrentHashMap<>();\n@@ -95,7 +96,1 @@\n-\t\tstatsByType.compute(eventTypeName, (key, stats) -> {\n-\t\t\tif (stats == null) {\n-\t\t\t\treturn new EventTypeStats(eventTypeName, size);\n-\t\t\t}\n-\t\t\tstats.add(size);\n-\t\t\treturn stats;\n-\t\t});\n+\t\tstatsByType.computeIfAbsent(eventTypeName, EventTypeStats::new).add(size);\n@@ -109,6 +104,1 @@\n-\t\tentryPoolSizeByType.compute(typeIdentifier, (key, value) -> {\n-\t\t\tif (value == null) {\n-\t\t\t\treturn size;\n-\t\t\t}\n-\t\t\treturn value + size;\n-\t\t});\n+\t\tentryPoolSizeByType.computeIfAbsent(typeIdentifier, id -> new AtomicLong()).addAndGet(size);\n@@ -148,1 +138,1 @@\n-\t\treturn stats.count;\n+\t\treturn stats.getCount();\n@@ -156,1 +146,1 @@\n-\t\treturn stats.totalSize;\n+\t\treturn stats.getTotalSize();\n@@ -163,1 +153,1 @@\n-\t\t\t\tConstPoolItem poolItem = poolStatsByName.computeIfAbsent(info.name, key -> createPoolItem(info));\n+\t\t\t\tConstPoolItem poolItem = poolStatsByName.computeIfAbsent(info.name, this::createPoolItem);\n@@ -324,2 +314,2 @@\n-\tprivate ConstPoolItem createPoolItem(ConstantPoolInfo info) {\n-\t\tLong totalSize = entryPoolSizeByType.get(info.name);\n+\tprivate ConstPoolItem createPoolItem(String infoName) {\n+\t\tAtomicLong totalSize = entryPoolSizeByType.get(infoName);\n@@ -327,1 +317,1 @@\n-\t\treturn new ConstPoolItem(info.name, 0, entrySize);\n+\t\treturn new ConstPoolItem(infoName, 0, entrySize);\n@@ -342,4 +332,8 @@\n-\t\tprivate long count;\n-\t\tprivate long totalSize;\n-\n-\t\tpublic EventTypeStats(String eventTypeName, long size) {\n+\t\tprivate static final AtomicLongFieldUpdater<EventTypeStats> COUNT_UPDATER = AtomicLongFieldUpdater\n+\t\t\t\t.newUpdater(EventTypeStats.class, \"count\");\n+\t\tprivate volatile long count;\n+\t\tprivate static final AtomicLongFieldUpdater<EventTypeStats> TOTAL_SIZE_UPDATER = AtomicLongFieldUpdater\n+\t\t\t\t.newUpdater(EventTypeStats.class, \"totalSize\");\n+\t\tprivate volatile long totalSize;\n+\n+\t\tpublic EventTypeStats(String eventTypeName) {\n@@ -347,2 +341,0 @@\n-\t\t\tthis.count = 1;\n-\t\t\tthis.totalSize = size;\n@@ -352,2 +344,2 @@\n-\t\t\tcount++;\n-\t\t\ttotalSize += size;\n+\t\t\tCOUNT_UPDATER.incrementAndGet(this);\n+\t\t\tTOTAL_SIZE_UPDATER.addAndGet(this, size);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/ParserStats.java","additions":21,"deletions":29,"binary":false,"changes":50,"status":"modified"}]}