{"files":[{"patch":"@@ -237,1 +237,1 @@\n-\t\t\tcolumns.add(new ColumnBuilder(colLabel, KEY_COL_ID, keyAccessor).labelProvider(keyLp).build());\n+\t\t\tcolumns.add(new ColumnBuilder(colLabel, KEY_COL_ID, keyAccessor, keyLp).build());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ItemHistogram.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,0 +132,3 @@\n+\t\tif (key instanceof IMCMethod) {\n+\t\t\treturn FormatToolkit.getHumanReadable((IMCMethod) key, false, false, true, true, true, false, false);\n+\t\t}\n@@ -135,1 +138,0 @@\n-\t\t\/\/ IMCMethod falling through to TypeHandling\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/internal\/MethodWithFrameTypeLabelProvider.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,0 +158,11 @@\n+\t\tthis(name, id, cellAccessor,\n+\t\t\t\tnew DelegatingLabelProvider(DEFAULT_LP, (IMemberAccessor<?, Object>) cellAccessor));\n+\t}\n+\n+\t\/**\n+\t * Users of this method must ensure that all elements in the tree\/table is of type T. This\n+\t * constructor will ensure that the comparator is aligned with the label provider.\n+\t *\/\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic <T> ColumnBuilder(String name, String id, IMemberAccessor<?, T> cellAccessor,\n+\t\t\tColumnLabelProvider labelProvider) {\n@@ -160,1 +171,1 @@\n-\t\tcolumn.labelProvider = new DelegatingLabelProvider(DEFAULT_LP, column.cellAccessor);\n+\t\tcolumn.labelProvider = labelProvider;\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/column\/ColumnBuilder.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.util.Map;\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/LoaderContext.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -213,0 +213,1 @@\n+\t\t@SuppressWarnings(\"unchecked\")\n@@ -268,0 +269,1 @@\n+\t\t@SuppressWarnings(\"unchecked\")\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/ParserStats.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v0\/EventParserManager.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,3 +36,0 @@\n-import org.openjdk.jmc.common.unit.ContentType;\n-import org.openjdk.jmc.flightrecorder.internal.InvalidJfrFileException;\n-\n@@ -40,1 +37,0 @@\n-import java.lang.reflect.Field;\n@@ -43,0 +39,3 @@\n+import org.openjdk.jmc.common.unit.ContentType;\n+import org.openjdk.jmc.flightrecorder.internal.InvalidJfrFileException;\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/SpecificReaders.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}