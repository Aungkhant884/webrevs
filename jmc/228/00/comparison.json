{"files":[{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -988,0 +988,16 @@\n+\t\t\t<page factory=\"org.openjdk.jmc.flightrecorder.ui.constantpools\" id=\"org.openjdk.jmc.flightrecorder.ui.constantpools\">\n+\t\t\t\t<state>\n+\t\t\t\t\t<table sortColumn=\"count\">\n+\t\t\t\t\t\t<column id=\"itemhistogram.key\" width=\"420\" \/>\n+\t\t\t\t\t\t<column id=\"count\" hidden=\"false\" sortAscending=\"false\" width=\"100\" \/>\n+\t\t\t\t\t\t<column id=\"size\" hidden=\"false\" width=\"100\" \/>\n+\t\t\t\t\t\t<column id=\"percentPools\" width=\"100\" \/>\n+\t\t\t\t\t<\/table>\n+\t\t\t\t\t<constantTable>\n+\t\t\t\t\t\t<column id=\"itemhistogram.key\" width=\"420\" \/>\n+\t\t\t\t\t\t<column id=\"itemhistogram.count\" hidden=\"true\" width=\"100\" sortAscending=\"false\" \/>\n+\t\t\t\t\t<\/constantTable>\n+\t\t\t\t\t<typeFilter showFilter=\"false\" showSearch=\"true\" \/>\n+\t\t\t\t\t<valueFilter showFilter=\"false\" showSearch=\"true\" \/>\n+\t\t\t\t<\/state>\n+\t\t\t<\/page>\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/defaultPages.xml","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"filename":"application\/org.openjdk.jmc.flightrecorder.ui\/icons\/pages\/cpool.png","binary":true,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/icons\/graph.png","status":"copied"},{"filename":"application\/org.openjdk.jmc.flightrecorder.ui\/icons\/pages\/cpool@2x.png","binary":true,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -309,0 +309,4 @@\n+      <factory\n+            class=\"org.openjdk.jmc.flightrecorder.ui.pages.ConstantPoolsPage$ConstantPoolsPageFactory\"\n+            id=\"org.openjdk.jmc.flightrecorder.ui.constantpools\">\n+      <\/factory>\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/plugin.xml","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,2 @@\n+\tprivate final IItemCollection constantPools;\n+\tprivate final IItemCollection constants;\n@@ -69,0 +71,10 @@\n+\t\tthis.constantPools = eventsByType.getConstantPools();\n+\t\tthis.constants = eventsByType.getConstants();\n+\t}\n+\n+\tpublic IItemCollection getConstantPools() {\n+\t\treturn constantPools;\n+\t}\n+\n+\tpublic IItemCollection getConstants() {\n+\t\treturn constants;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/StreamModel.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -115,0 +115,1 @@\n+\tpublic static final String PAGE_CONSTANT_POOL = \"pages\/cpool.png\"; \/\/$NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ImageConstants.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -102,0 +102,3 @@\n+\tpublic static String ConstantPoolsPage_PAGE_NAME;\n+\tpublic static String ConstantPoolsPage_SIZE_TOTAL_PERCENTAGE;\n+\tpublic static String ConstantPoolsPage_SIZE_TOTAL_PERCENTAGE_DESC;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.ui.pages;\n+\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.ui.forms.widgets.Form;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+import org.openjdk.jmc.common.IState;\n+import org.openjdk.jmc.common.IWritableState;\n+import org.openjdk.jmc.common.item.Aggregators;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemFilter;\n+import org.openjdk.jmc.common.item.ItemFilters;\n+import org.openjdk.jmc.common.item.ItemToolkit;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n+import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.flightrecorder.ui.IDataPageFactory;\n+import org.openjdk.jmc.flightrecorder.ui.IDisplayablePage;\n+import org.openjdk.jmc.flightrecorder.ui.IPageContainer;\n+import org.openjdk.jmc.flightrecorder.ui.IPageDefinition;\n+import org.openjdk.jmc.flightrecorder.ui.IPageUI;\n+import org.openjdk.jmc.flightrecorder.ui.StreamModel;\n+import org.openjdk.jmc.flightrecorder.ui.common.AbstractDataPage;\n+import org.openjdk.jmc.flightrecorder.ui.common.DataPageToolkit;\n+import org.openjdk.jmc.flightrecorder.ui.common.FilterComponent;\n+import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;\n+import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram;\n+import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogramWithInput;\n+import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram.ItemHistogramBuilder;\n+import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;\n+import org.openjdk.jmc.ui.column.ColumnMenusFactory;\n+import org.openjdk.jmc.ui.column.TableSettings;\n+import org.openjdk.jmc.ui.handlers.MCContextMenuManager;\n+import org.openjdk.jmc.ui.misc.PersistableSashForm;\n+\n+public class ConstantPoolsPage extends AbstractDataPage {\n+\tpublic static class ConstantPoolsPageFactory implements IDataPageFactory {\n+\n+\t\t@Override\n+\t\tpublic String getName(IState state) {\n+\t\t\treturn Messages.ConstantPoolsPage_PAGE_NAME;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ImageDescriptor getImageDescriptor(IState state) {\n+\t\t\treturn FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_CONSTANT_POOL);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String[] getTopics(IState state) {\n+\t\t\treturn new String[] {JfrRuleTopics.RECORDING};\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {\n+\t\t\treturn new ConstantPoolsPage(dpd, items, editor);\n+\t\t}\n+\t}\n+\n+\tprivate static final String TABLE = \"table\"; \/\/$NON-NLS-1$\n+\tprivate static final String CONSTANT_TABLE = \"constantTable\"; \/\/$NON-NLS-1$\n+\tprivate static final String TYPE_FILTER = \"typeFilter\"; \/\/$NON-NLS-1$\n+\tprivate static final String PERCENT_POOLS = \"percentPools\"; \/\/$NON-NLS-1$\n+\tprivate static final String VALUE_FILTER = \"valueFilter\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ItemHistogramBuilder BY_TYPE_CONSTANT_POOLS_HISTOGRAM = new ItemHistogramBuilder();\n+\tprivate static final ItemHistogramBuilder CONSTANT_HISTOGRAM = new ItemHistogramBuilder();\n+\tstatic {\n+\t\tBY_TYPE_CONSTANT_POOLS_HISTOGRAM.addColumn(JdkAttributes.CONSTANT_POOLS_COUNT);\n+\t\tBY_TYPE_CONSTANT_POOLS_HISTOGRAM.addColumn(JdkAttributes.CONSTANT_POOLS_SIZE);\n+\t\tBY_TYPE_CONSTANT_POOLS_HISTOGRAM.addPercentageColumn(PERCENT_POOLS,\n+\t\t\t\tAggregators.sum(JdkAttributes.CONSTANT_POOLS_SIZE), Messages.ConstantPoolsPage_SIZE_TOTAL_PERCENTAGE,\n+\t\t\t\tMessages.ConstantPoolsPage_SIZE_TOTAL_PERCENTAGE_DESC);\n+\t\tCONSTANT_HISTOGRAM.addCountColumn();\n+\t}\n+\n+\tprivate class ConstantPoolsPageUi implements IPageUI {\n+\t\tprivate static final String SASH_ELEMENT = \"sash\"; \/\/$NON-NLS-1$\n+\n+\t\tprivate final IItemCollection constPoolItems;\n+\t\tprivate final SashForm sash;\n+\t\tprivate final ItemHistogram byTypeTable;\n+\t\tprivate final ItemHistogram constantValueTable;\n+\t\tprivate FilterComponent byTypeFilter;\n+\t\tprivate FilterComponent constantValueFilter;\n+\t\tprivate IItemCollection selectionConstPoolItems;\n+\t\tprivate IItemCollection selectionConstantItems;\n+\t\tprivate ItemHistogramWithInput byTypeHistogram;\n+\t\tprivate ItemHistogramWithInput constantHistogram;\n+\n+\t\tConstantPoolsPageUi(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {\n+\t\t\tconstPoolItems = getDataSource().getConstantPools();\n+\t\t\tselectionConstPoolItems = constPoolItems;\n+\t\t\tselectionConstantItems = getDataSource().getConstants();\n+\t\t\tForm form = DataPageToolkit.createForm(parent, toolkit, getName(), getIcon());\n+\t\t\tsash = new SashForm(form.getBody(), SWT.VERTICAL);\n+\t\t\ttoolkit.adapt(sash);\n+\t\t\tbyTypeTable = BY_TYPE_CONSTANT_POOLS_HISTOGRAM.buildWithoutBorder(sash, JdkAttributes.CONSTANT_POOLS_NAME,\n+\t\t\t\t\tnew TableSettings(state.getChild(TABLE)));\n+\t\t\tMCContextMenuManager mm = MCContextMenuManager.create(byTypeTable.getManager().getViewer().getControl());\n+\t\t\tColumnMenusFactory.addDefaultMenus(byTypeTable.getManager(), mm);\n+\t\t\tbyTypeFilter = FilterComponent.createFilterComponent(byTypeTable, null, constPoolItems,\n+\t\t\t\t\tpageContainer.getSelectionStore()::getSelections, this::onTypeFilterChange);\n+\t\t\t\/\/mm.add(byTypeFilter.getShowFilterAction());\n+\t\t\tmm.add(byTypeFilter.getShowSearchAction());\n+\n+\t\t\tconstantValueTable = CONSTANT_HISTOGRAM.buildWithoutBorder(sash, JdkAttributes.CONSTANT_VALUE,\n+\t\t\t\t\tnew TableSettings(state.getChild(CONSTANT_TABLE)));\n+\t\t\tmm = MCContextMenuManager.create(constantValueTable.getManager().getViewer().getControl());\n+\t\t\tColumnMenusFactory.addDefaultMenus(constantValueTable.getManager(), mm);\n+\t\t\tconstantValueFilter = FilterComponent.createFilterComponent(constantValueTable, null,\n+\t\t\t\t\tgetDataSource().getConstants(), pageContainer.getSelectionStore()::getSelections,\n+\t\t\t\t\tthis::onValueFilterChange);\n+\t\t\t\/\/mm.add(constantValueFilter.getShowFilterAction());\n+\t\t\tmm.add(constantValueFilter.getShowSearchAction());\n+\n+\t\t\t\/\/ chains the 2 tables\n+\t\t\tbyTypeHistogram = new ItemHistogramWithInput(byTypeTable);\n+\t\t\tconstantHistogram = new ItemHistogramWithInput(constantValueTable);\n+\t\t\tbyTypeHistogram.addListener(this::typeHistogramListener);\n+\n+\t\t\tbyTypeFilter.loadState(state.getChild(TYPE_FILTER));\n+\t\t\tconstantValueFilter.loadState(state.getChild(VALUE_FILTER));\n+\t\t}\n+\n+\t\tprivate void typeHistogramListener(IItemCollection constantPoolType) {\n+\t\t\tString poolName = ItemToolkit.getFirstFound(constantPoolType, JdkAttributes.CONSTANT_POOLS_NAME);\n+\t\t\tIItemCollection filteredItems = getDataSource().getConstants()\n+\t\t\t\t\t.apply(ItemFilters.equals(JdkAttributes.CONSTANT_TYPE, poolName));\n+\t\t\tconstantHistogram.setInput(filteredItems);\n+\t\t}\n+\n+\t\tprivate void onTypeFilterChange(IItemFilter filter) {\n+\t\t\tbyTypeFilter.filterChangeHelper(filter, byTypeTable, selectionConstPoolItems);\n+\t\t}\n+\n+\t\tprivate void onValueFilterChange(IItemFilter filter) {\n+\t\t\tconstantValueFilter.filterChangeHelper(filter, constantValueTable, selectionConstantItems);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void saveTo(IWritableState writableState) {\n+\t\t\tPersistableSashForm.saveState(sash, writableState.createChild(SASH_ELEMENT));\n+\t\t\tbyTypeTable.getManager().getSettings().saveState(writableState.createChild(TABLE));\n+\t\t\tbyTypeFilter.saveState(writableState.createChild(TYPE_FILTER));\n+\t\t\tconstantValueTable.getManager().getSettings().saveState(writableState.createChild(CONSTANT_TABLE));\n+\t\t\tconstantValueFilter.saveState(writableState.createChild(VALUE_FILTER));\n+\t\t}\n+\t}\n+\n+\tpublic ConstantPoolsPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {\n+\t\tsuper(dpd, items, editor);\n+\t}\n+\n+\t@Override\n+\tpublic IPageUI display(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {\n+\t\treturn new ConstantPoolsPageUi(parent, toolkit, pageContainer, state);\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ConstantPoolsPage.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -105,0 +105,3 @@\n+ConstantPoolsPage_PAGE_NAME=Constant Pools\n+ConstantPoolsPage_SIZE_TOTAL_PERCENTAGE=Total Size (%)\n+ConstantPoolsPage_SIZE_TOTAL_PERCENTAGE_DESC=Size over total constant pool size\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -265,0 +265,10 @@\n+\n+\t@Override\n+\tpublic IItemCollection getConstantPools() {\n+\t\treturn parserStats.getConstantPools();\n+\t}\n+\n+\t@Override\n+\tpublic IItemCollection getConstants() {\n+\t\treturn parserStats.getConstants();\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/EventCollection.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import org.openjdk.jmc.common.item.IItemCollection;\n+\n@@ -61,0 +63,4 @@\n+\n+\tIItemCollection getConstantPools();\n+\n+\tIItemCollection getConstants();\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/IParserStats.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.common.item.IItemCollection;\n@@ -65,0 +66,7 @@\n+\tpublic IItemCollection getConstantPools() {\n+\t\treturn parserStats.getConstantPools();\n+\t}\n+\n+\tpublic IItemCollection getConstants() {\n+\t\treturn parserStats.getConstants();\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/EventArrays.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import org.openjdk.jmc.common.collection.FastAccessNumberMap;\n@@ -150,0 +151,4 @@\n+\tpublic void addTypeConstantPool(long id, String name, FastAccessNumberMap<Object> constantPool) {\n+\t\tparserStats.addConstantPool(id, name, constantPool);\n+\t}\n+\n@@ -161,0 +166,4 @@\n+\n+\tpublic void addEntryPoolSize(String typeIdentifier, long size) {\n+\t\tparserStats.addEntryPoolSize(typeIdentifier, size);\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/LoaderContext.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n@@ -37,0 +42,1 @@\n+import java.util.concurrent.ConcurrentLinkedDeque;\n@@ -41,2 +47,13 @@\n-import javax.swing.text.html.MinimalHTMLWriter;\n-\n+import org.openjdk.jmc.common.IDescribable;\n+import org.openjdk.jmc.common.collection.FastAccessNumberMap;\n+import org.openjdk.jmc.common.item.IAccessorKey;\n+import org.openjdk.jmc.common.item.IAttribute;\n+import org.openjdk.jmc.common.item.ICanonicalAccessorFactory;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IMemberAccessor;\n+import org.openjdk.jmc.common.item.IType;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.UnitLookup;\n+import org.openjdk.jmc.common.util.MemberAccessorToolkit;\n@@ -51,0 +68,4 @@\n+\tprivate final ConcurrentLinkedDeque<ConstantPoolInfo> constantPoolInfoList = new ConcurrentLinkedDeque<ConstantPoolInfo>();\n+\tprivate final ConcurrentHashMap<String, Long> entryPoolSizeByType = new ConcurrentHashMap<>();\n+\tprivate IItemCollection poolStats;\n+\tprivate IItemCollection constants;\n@@ -75,0 +96,13 @@\n+\tpublic void addConstantPool(long id, String name, FastAccessNumberMap<Object> constantPool) {\n+\t\tconstantPoolInfoList.add(new ConstantPoolInfo(id, name, constantPool));\n+\t}\n+\n+\tpublic void addEntryPoolSize(String typeIdentifier, long size) {\n+\t\tentryPoolSizeByType.compute(typeIdentifier, (key, value) -> {\n+\t\t\tif (value == null) {\n+\t\t\t\treturn size;\n+\t\t\t}\n+\t\t\treturn value + size;\n+\t\t});\n+\t}\n+\n@@ -113,0 +147,159 @@\n+\tpublic IItemCollection getConstantPools() {\n+\t\tif (poolStats == null) {\n+\t\t\tMap<String, ConstPoolItem> poolStatsByName = new HashMap<>();\n+\t\t\tfor (ConstantPoolInfo info : constantPoolInfoList) {\n+\t\t\t\tConstPoolItem poolItem = poolStatsByName.computeIfAbsent(info.name, key -> createPoolItem(info));\n+\t\t\t\tpoolItem.count += getConstantPoolCount(info.constantPool);\n+\t\t\t}\n+\t\t\tpoolStats = ItemCollectionToolkit.build(poolStatsByName.values().stream());\n+\t\t}\n+\t\treturn poolStats;\n+\t}\n+\n+\tpublic IItemCollection getConstants() {\n+\t\tif (constants == null) {\n+\t\t\tList<ConstantItem> items = new ArrayList<>();\n+\t\t\tfor (ConstantPoolInfo info : constantPoolInfoList) {\n+\t\t\t\tfor (Object value : info.constantPool) {\n+\t\t\t\t\titems.add(new ConstantItem(info.name, value));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tconstants = ItemCollectionToolkit.build(items.stream());\n+\t\t}\n+\t\treturn constants;\n+\t}\n+\n+\tstatic class ConstPoolItem implements IItem, IType<IItem> {\n+\t\tprivate final String name;\n+\t\tprivate long count;\n+\t\tprivate final long size;\n+\n+\t\t@Override\n+\t\tpublic IType<?> getType() {\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic ConstPoolItem(String name, long count, long size) {\n+\t\t\tthis.name = name;\n+\t\t\tthis.count = count;\n+\t\t\tthis.size = size;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getName() {\n+\t\t\treturn name;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getDescription() {\n+\t\t\treturn \"ConstantPoolStats\";\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic List<IAttribute<?>> getAttributes() {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Map<IAccessorKey<?>, ? extends IDescribable> getAccessorKeys() {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasAttribute(ICanonicalAccessorFactory<?> attribute) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\t\tif (\"name\".equals(attribute.getIdentifier())) {\n+\t\t\t\treturn ((IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, String, String> constant(name));\n+\t\t\t}\n+\t\t\tif (\"count\".equals(attribute.getIdentifier())) {\n+\t\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, Long, Long> constant(count);\n+\t\t\t}\n+\t\t\tif (\"size\".equals(attribute.getIdentifier())) {\n+\t\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.BYTE.quantity(size));\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getIdentifier() {\n+\t\t\treturn \"constPoolStatsType\";\n+\t\t}\n+\t}\n+\n+\tstatic class ConstantItem implements IItem, IType<IItem> {\n+\t\tprivate final String typeName;\n+\t\tprivate final Object constant;\n+\n+\t\tpublic ConstantItem(String typeName, Object constant) {\n+\t\t\tthis.typeName = typeName;\n+\t\t\tthis.constant = constant;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getName() {\n+\t\t\treturn typeName;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getDescription() {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic List<IAttribute<?>> getAttributes() {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Map<IAccessorKey<?>, ? extends IDescribable> getAccessorKeys() {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasAttribute(ICanonicalAccessorFactory<?> attribute) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic <M> IMemberAccessor<M, IItem> getAccessor(IAccessorKey<M> attribute) {\n+\t\t\tif (\"typeName\".equals(attribute.getIdentifier())) {\n+\t\t\t\treturn ((IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, Object, Object> constant(typeName));\n+\t\t\t}\n+\t\t\tif (\"constant\".equals(attribute.getIdentifier())) {\n+\t\t\t\treturn ((IMemberAccessor<M, IItem>) MemberAccessorToolkit.<IItem, Object, Object> constant(constant));\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String getIdentifier() {\n+\t\t\treturn \"constantValueType\";\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IType<?> getType() {\n+\t\t\treturn this;\n+\t\t}\n+\t}\n+\n+\tprivate ConstPoolItem createPoolItem(ConstantPoolInfo info) {\n+\t\tLong totalSize = entryPoolSizeByType.get(info.name);\n+\t\tlong entrySize = totalSize != null ? totalSize.longValue() : 0;\n+\t\treturn new ConstPoolItem(info.name, 0, entrySize);\n+\t}\n+\n+\tprivate long getConstantPoolCount(FastAccessNumberMap<Object> constantPool) {\n+\t\tIterator<Object> iterator = constantPool.iterator();\n+\t\tint count = 0;\n+\t\twhile (iterator.hasNext()) {\n+\t\t\tcount++;\n+\t\t\titerator.next();\n+\t\t}\n+\t\treturn count;\n+\t}\n+\n@@ -150,0 +343,12 @@\n+\n+\tprivate static class ConstantPoolInfo {\n+\t\tfinal long id;\n+\t\tfinal String name;\n+\t\tfinal FastAccessNumberMap<Object> constantPool;\n+\n+\t\tpublic ConstantPoolInfo(long id, String name, FastAccessNumberMap<Object> constantPool) {\n+\t\t\tthis.id = id;\n+\t\t\tthis.name = name;\n+\t\t\tthis.constantPool = constantPool;\n+\t\t}\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/ParserStats.java","additions":207,"deletions":2,"binary":false,"changes":209,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,2 @@\n+\n+\tlong getPosition();\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/IDataInput.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -213,0 +213,4 @@\n+\tpublic long getPosition() {\n+\t\treturn pos;\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/SeekableInputStream.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-\n@@ -147,0 +146,1 @@\n+\t\tfinal LoaderContext context;\n@@ -150,2 +150,2 @@\n-\t\tTypeEntry(ClassElement element) {\n-\t\t\tthis(element, new FastAccessNumberMap<>());\n+\t\tTypeEntry(ClassElement element, LoaderContext context) {\n+\t\t\tthis(element, context, new FastAccessNumberMap<>());\n@@ -157,1 +157,1 @@\n-\t\tTypeEntry(ClassElement element, FastAccessNumberMap<Object> constants) {\n+\t\tTypeEntry(ClassElement element, LoaderContext context, FastAccessNumberMap<Object> constants) {\n@@ -159,0 +159,1 @@\n+\t\t\tthis.context = context;\n@@ -284,0 +285,1 @@\n+\t\t\tcontext.addTypeConstantPool(element.classId, element.typeIdentifier, constants);\n@@ -288,0 +290,1 @@\n+\t\t\tlong start = input.getPosition();\n@@ -296,0 +299,2 @@\n+\t\t\tlong end = input.getPosition();\n+\t\t\tcontext.addEntryPoolSize(element.typeIdentifier, end - start);\n@@ -392,1 +397,1 @@\n-\t\t\t\totherTypes.put(ce.classId, new TypeEntry(ce));\n+\t\t\t\totherTypes.put(ce.classId, new TypeEntry(ce, context));\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/internal\/parser\/v1\/TypeManager.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1270,0 +1270,13 @@\n+\n+\tpublic static final IAttribute<String> CONSTANT_POOLS_NAME = attr(\"name\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_CONSTANT_POOLS_NAME), PLAIN_TEXT);\n+\tpublic static final IAttribute<IQuantity> CONSTANT_POOLS_COUNT = attr(\"count\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_CONSTANT_POOLS_COUNT), NUMBER);\n+\tpublic static final IAttribute<IQuantity> CONSTANT_POOLS_SIZE = attr(\"size\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_CONSTANT_POOLS_SIZE), MEMORY);\n+\tpublic static final IAttribute<String> CONSTANT_TYPE = attr(\"typeName\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_CONSTANT_TYPE), PLAIN_TEXT);\n+\n+\tpublic static final IAttribute<String> CONSTANT_VALUE = attr(\"constant\", \/\/$NON-NLS-1$\n+\t\t\tMessages.getString(Messages.ATTR_CONSTANT_VALUE), PLAIN_TEXT);\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAttributes.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -200,0 +200,5 @@\n+\tpublic static final String ATTR_CONSTANT_POOLS_NAME = \"ATTR_CONSTANT_POOLS_NAME\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_CONSTANT_POOLS_COUNT = \"ATTR_CONSTANT_POOLS_COUNT\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_CONSTANT_POOLS_SIZE = \"ATTR_CONSTANT_POOLS_SIZE\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_CONSTANT_TYPE = \"ATTR_CONSTANT_TYPE\"; \/\/$NON-NLS-1$\n+\tpublic static final String ATTR_CONSTANT_VALUE = \"ATTR_CONSTANT_VALUE\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -104,0 +104,5 @@\n+ATTR_CONSTANT_POOLS_NAME=Constant Pool Name\n+ATTR_CONSTANT_POOLS_COUNT=Count\n+ATTR_CONSTANT_POOLS_SIZE=Size\n+ATTR_CONSTANT_TYPE= Constant Type\n+ATTR_CONSTANT_VALUE=Constant Value\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}