{"files":[{"patch":"@@ -103,1 +103,8 @@\n-\t\t\treturn ((TypedValueImpl) value).getType().equals(this);\n+\t\t\tif (((TypedValueImpl) value).getType().equals(this)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\tif (isSimple()) {\n+\t\t\tif (fields.get(0).getType().canAccept(value)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/CompositeTypeImpl.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import org.openjdk.jmc.flightrecorder.writer.api.TypedFieldValue;\n@@ -45,1 +44,1 @@\n-final class SingleFieldMap implements Map<String, TypedFieldValue> {\n+final class SingleFieldMap implements Map<String, TypedFieldValueImpl> {\n@@ -47,1 +46,1 @@\n-\tprivate final ImmutableMapEntry<String, TypedFieldValue> entry;\n+\tprivate final ImmutableMapEntry<String, TypedFieldValueImpl> entry;\n@@ -49,1 +48,1 @@\n-\tSingleFieldMap(String name, TypedFieldValue value) {\n+\tSingleFieldMap(String name, TypedFieldValueImpl value) {\n@@ -76,1 +75,1 @@\n-\tpublic TypedFieldValue get(Object o) {\n+\tpublic TypedFieldValueImpl get(Object o) {\n@@ -81,1 +80,1 @@\n-\tpublic TypedFieldValue put(String s, TypedFieldValue typedFieldValue) {\n+\tpublic TypedFieldValueImpl put(String s, TypedFieldValueImpl typedFieldValue) {\n@@ -86,1 +85,1 @@\n-\tpublic TypedFieldValue remove(Object o) {\n+\tpublic TypedFieldValueImpl remove(Object o) {\n@@ -91,1 +90,1 @@\n-\tpublic void putAll(Map<? extends String, ? extends TypedFieldValue> map) {\n+\tpublic void putAll(Map<? extends String, ? extends TypedFieldValueImpl> map) {\n@@ -106,1 +105,1 @@\n-\tpublic Collection<TypedFieldValue> values() {\n+\tpublic Collection<TypedFieldValueImpl> values() {\n@@ -111,1 +110,1 @@\n-\tpublic Set<Entry<String, TypedFieldValue>> entrySet() {\n+\tpublic Set<Entry<String, TypedFieldValueImpl>> entrySet() {\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/SingleFieldMap.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-\t\t\t\ttypedValue = wrapSimpleValue(type, typedValue);\n+\t\t\t\ttypedValue = TypedValueImpl.wrapSimpleValueField(type, typedValue);\n@@ -273,12 +273,0 @@\n-\tprivate TypedValueImpl wrapSimpleValue(TypeImpl targetType, TypedValueImpl value) {\n-\t\tTypedFieldImpl valueField = targetType.getFields().get(0);\n-\t\tTypeImpl fieldType = valueField.getType();\n-\t\tif (fieldType.canAccept(value)) {\n-\t\t\tvalue = targetType\n-\t\t\t\t\t.asValue(new SingleFieldMap(valueField.getName(), new TypedFieldValueImpl(valueField, value)));\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException();\n-\t\t}\n-\t\treturn value;\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/TypedValueBuilderImpl.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-final class TypedValueImpl implements TypedValue {\n+public final class TypedValueImpl implements TypedValue {\n@@ -61,0 +61,5 @@\n+\t\tMap<String, TypedFieldValueImpl> valueMap = value instanceof Map ? (Map<String, TypedFieldValueImpl>) value\n+\t\t\t\t: null;\n+\t\tif (valueMap == null && type.isSimple()) {\n+\t\t\tvalueMap = wrapSimpleValueField(type, value);\n+\t\t}\n@@ -62,2 +67,2 @@\n-\t\tthis.value = value instanceof Map ? null : value;\n-\t\tthis.fields = value instanceof Map ? (Map<String, TypedFieldValueImpl>) value : Collections.emptyMap();\n+\t\tthis.value = valueMap == null ? value : null;\n+\t\tthis.fields = valueMap != null ? valueMap : Collections.emptyMap();\n@@ -93,1 +98,1 @@\n-\t\tthis.fields = Collections.unmodifiableMap(other.fields);\n+\t\tthis.fields = other.fields;\n@@ -175,0 +180,25 @@\n+\n+\tstatic TypedValueImpl wrapSimpleValueField(TypeImpl targetType, TypedValueImpl value) {\n+\t\tif (value.getType().isBuiltin()) {\n+\t\t\tTypedFieldImpl valueField = targetType.getFields().get(0);\n+\t\t\tTypeImpl fieldType = valueField.getType();\n+\t\t\tif (fieldType.canAccept(value)) {\n+\t\t\t\tvalue = targetType\n+\t\t\t\t\t\t.asValue(new SingleFieldMap(valueField.getName(), new TypedFieldValueImpl(valueField, value)));\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException();\n+\t\t\t}\n+\t\t}\n+\t\treturn value;\n+\t}\n+\n+\tstatic Map<String, TypedFieldValueImpl> wrapSimpleValueField(TypeImpl targetType, Object value) {\n+\t\tTypedFieldImpl valueField = targetType.getFields().get(0);\n+\t\tTypeImpl fieldType = valueField.getType();\n+\t\tif (fieldType.canAccept(value)) {\n+\t\t\treturn new SingleFieldMap(valueField.getName(),\n+\t\t\t\t\tnew TypedFieldValueImpl(valueField, fieldType.asValue(value)));\n+\t\t} else {\n+\t\t\tthrow new IllegalArgumentException();\n+\t\t}\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/TypedValueImpl.java","additions":34,"deletions":4,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-\t\tCLASS_LOADER(\"jdk.type.ClassLoader\"),\n+\t\tCLASS_LOADER(\"jdk.types.ClassLoader\"),\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/api\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Arrays;\n@@ -45,0 +46,1 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.Types;\n@@ -47,1 +49,2 @@\n-\tprivate static final String FIELD_NAME = \"field\";\n+\tprivate static final String FIELD_1_NAME = \"field_1\";\n+\tprivate static final String FIELD_2_NAME = \"field_2\";\n@@ -205,1 +208,1 @@\n-\t\tassertThrows(IllegalStateException.class, () -> resolvableType.getField(FIELD_NAME));\n+\t\tassertThrows(IllegalStateException.class, () -> resolvableType.getField(FIELD_1_NAME));\n@@ -207,1 +210,1 @@\n-\t\tassertEquals(targetType.getField(FIELD_NAME), resolvableType.getField(FIELD_NAME));\n+\t\tassertEquals(targetType.getField(FIELD_1_NAME), resolvableType.getField(FIELD_1_NAME));\n@@ -261,2 +264,3 @@\n-\t\tList<TypedFieldImpl> fields = Collections\n-\t\t\t\t.singletonList(new TypedFieldImpl(types.getType(TypesImpl.Builtin.STRING), FIELD_NAME));\n+\t\tList<TypedFieldImpl> fields = Arrays.asList(\n+\t\t\t\tnew TypedFieldImpl(types.getType(TypesImpl.Builtin.STRING), FIELD_1_NAME),\n+\t\t\t\tnew TypedFieldImpl(types.getType(Types.Builtin.LONG), FIELD_2_NAME));\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/ResolvableTypeTest.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.Types;\n@@ -60,0 +61,1 @@\n+\tprivate TypeImpl longType;\n@@ -74,0 +76,1 @@\n+\t\tlongType = types.getType(Types.Builtin.LONG);\n@@ -172,2 +175,2 @@\n-\t\tassertThrows(IllegalArgumentException.class, () -> instance.putField(CUSTOM_FIELD_ARRAY_NAME,\n-\t\t\t\tstringType.asValue(\"value1\"), stringType.asValue(\"value2\")));\n+\t\tassertThrows(IllegalArgumentException.class,\n+\t\t\t\t() -> instance.putField(CUSTOM_FIELD_ARRAY_NAME, longType.asValue(1), longType.asValue(2)));\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/TypedValueBuilderImplTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}