{"files":[{"patch":"@@ -48,0 +48,1 @@\n+\t\t\t\t<showIgnore value=\"false\" \/>\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/defaultPages.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023 Oracle and\/or its affiliates. All rights reserved.\n@@ -163,3 +163,4 @@\n-\t\t\t\t\tresult = ResultBuilder.createFor(rule, config::getValue).setSeverity(Severity.NA)\n-\t\t\t\t\t\t\t.setSummary(Messages.JFR_EDITOR_RULES_IGNORED).build();\n-\t\t\t\t\tevaluatedRules.put(rule.getClass(), Severity.NA);\n+\t\t\t\t\tString reason = RulesToolkit.getIgnoreReason(items.getItems(), rule);\n+\t\t\t\t\tresult = ResultBuilder.createFor(rule, config::getValue).setSeverity(Severity.IGNORE)\n+\t\t\t\t\t\t\t.setSummary(reason).build();\n+\t\t\t\t\tevaluatedRules.put(rule.getClass(), Severity.IGNORE);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/RuleManager.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,1 @@\n+\tpublic static final String ICON_IGNORE = \"na.png\"; \/\/$NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ImageConstants.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,0 +301,1 @@\n+\tpublic static String JFR_EDITOR_RULES_IGNORED_REASON;\n@@ -474,0 +475,1 @@\n+\tpublic static String RULESPAGE_SHOW_IGNORE_RESULTS_ACTION;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,0 +154,12 @@\n+\tclass ShowIgnoreAction extends Action {\n+\t\tpublic ShowIgnoreAction(String text) {\n+\t\t\tsuper(text, IAction.AS_CHECK_BOX);\n+\t\t\tsuper.setImageDescriptor(ResultOverview.ICON_IGNORE);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\treport.setShowIgnore(this.isChecked());\n+\t\t}\n+\t}\n+\n@@ -201,0 +213,2 @@\n+\tpublic static final ImageDescriptor ICON_IGNORE = FlightRecorderUI.getDefault()\n+\t\t\t.getMCImageDescriptor(ImageConstants.ICON_IGNORE);\n@@ -217,0 +231,1 @@\n+\tprivate ShowIgnoreAction showIgnoreAction;\n@@ -237,0 +252,3 @@\n+\t\tshowIgnoreAction = new ShowIgnoreAction(Messages.RULESPAGE_SHOW_IGNORE_RESULTS_ACTION);\n+\t\tshowIgnoreAction.setId(\"showIgnore\"); \/\/$NON-NLS-1$\n+\t\tform.getToolBarManager().add(showIgnoreAction);\n@@ -264,0 +282,1 @@\n+\t\tform.getToolBarManager().find(showIgnoreAction.getId()).setVisible(visible);\n@@ -298,0 +317,1 @@\n+\t\t\t\t\tshowIgnoreAction.setChecked(report.getShowIgnore());\n@@ -363,0 +383,1 @@\n+\t\tform.getToolBarManager().find(showIgnoreAction.getId()).setVisible(false);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/overview\/ResultOverview.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,0 +247,1 @@\n+\tprivate Boolean showIgnore = false;\n@@ -333,0 +334,15 @@\n+\tpublic void setShowIgnore(boolean showIgnore) {\n+\t\tthis.showIgnore = showIgnore;\n+\t\tif (!isSinglePage) {\n+\t\t\ttry {\n+\t\t\t\t\/\/ FIXME: Avoid implicit dependency on HTML\/javascript template. Generate script in RulesHtmlToolkit instead\n+\t\t\t\tbrowser.evaluate(String.format(\"overview.showIgnore(%b);\", showIgnore)); \/\/$NON-NLS-1$\n+\t\t\t} catch (SWTException swte) {\n+\t\t\t\tString html = RulesHtmlToolkit.generateStructuredHtml(new PageContainerResultProvider(editor),\n+\t\t\t\t\t\tdescriptors, resultExpandedStates, false);\n+\t\t\t\tString adjustedHtml = adjustAnchorFollowAction(html);\n+\t\t\t\tbrowser.setText(adjustedHtml);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n@@ -337,0 +353,4 @@\n+\tboolean getShowIgnore() {\n+\t\treturn showIgnore;\n+\t}\n+\n@@ -418,0 +438,5 @@\n+\t\ttry {\n+\t\t\tthis.showIgnore = Boolean.valueOf(state.getChild(\"report\").getChild(\"showIgnore\").getAttribute(\"value\")); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+\t\t} catch (NullPointerException npe) {\n+\t\t\t\/\/ ignore NPE when there is no state value is available \n+\t\t}\n@@ -438,0 +463,1 @@\n+\t\t\t\t\tbrowser.execute(String.format(\"overview.showIgnore(%b);\", showIgnore)); \/\/$NON-NLS-1$\n@@ -461,0 +487,1 @@\n+\t\tstate.createChild(\"report\").createChild(\"showIgnore\").putString(\"value\", showIgnore.toString()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/overview\/ResultReportUi.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,0 +186,1 @@\n+JFR_EDITOR_RULES_IGNORED_REASON=Rule \"{0}\" is IGNORED because one \/ more of the following event availability criteria is not met.\n@@ -451,0 +452,1 @@\n+RULESPAGE_SHOW_IGNORE_RESULTS_ACTION=Show IGNORED Results\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,3 @@\n-\tWARNING(75, Messages.getString(Messages.Severity_WARNING));\n+\tWARNING(75, Messages.getString(Messages.Severity_WARNING)),\n+\n+\tIGNORE(-3, Messages.getString(Messages.Severity_IGNORE));\n@@ -73,1 +75,1 @@\n-\tprivate static final Severity[] VALUES = {WARNING, INFO, OK, NA};\n+\tprivate static final Severity[] VALUES = {WARNING, INFO, OK, NA, IGNORE};\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/Severity.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,3 @@\n+\tpublic static final String RulesToolkit_RULE_IGNORED_REASON = \"RulesToolkit_RULE_IGNORED_REASON\"; \/\/$NON-NLS-1$\n+\tpublic static final String RulesToolkit_RULES_IGNORED_REASON = \"RulesToolkit_RULES_IGNORED_REASON\"; \/\/$NON-NLS-1$\n+\tpublic static final String RulesToolkit_RULES_IGNORED_EVENT_AVAILABILITY = \"RulesToolkit_RULES_IGNORED_EVENT_AVAILABILITY\"; \/\/$NON-NLS-1$\n@@ -68,0 +71,1 @@\n+\tpublic static final String Severity_IGNORE = \"Severity_IGNORE\";\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/messages\/internal\/Messages.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,0 +157,2 @@\n+\t\t\t\t} else if (minString.equalsIgnoreCase(\"ignore\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\tminSeverity = Severity.IGNORE;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/JfrRulesReport.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+\tpublic static final String RULESPAGE_SHOW_IGNORE_RESULTS_ACTION = \"RULESPAGE_SHOW_IGNORE_RESULTS_ACTION\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/html\/internal\/Messages.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,2 @@\n+\t\t} else if (result.getSeverity() == Severity.IGNORE) {\n+\t\t\treturn \"ignore\"; \/\/$NON-NLS-1$\n@@ -93,2 +95,0 @@\n-\t\t\t} else if (Boolean.TRUE.equals(result.getResult(IGNORED))) {\n-\t\t\t\treturn \"ignore\"; \/\/$NON-NLS-1$\n@@ -142,0 +142,16 @@\n+\tprivate static String createShowIgnore() {\n+\t\tString ignore = \"<div class=\\\"okbox\\\"><label class=\\\"showIgnoreText\\\" for=\\\"showIgnore\\\">\"; \/\/$NON-NLS-1$\n+\t\tignore += Messages.getString(Messages.RULESPAGE_SHOW_IGNORE_RESULTS_ACTION);\n+\t\tignore += \"<\/label>&nbsp;<input type=\\\"checkbox\\\" onclick='overview.showIgnore(this.checked);' id=\\\"showIgnore\\\">&nbsp;&nbsp;&nbsp;<\/div>\"; \/\/$NON-NLS-1$\n+\t\tignore += \"<script>window.onload = function() {overview.showIgnore(false)}<\/script>\"; \/\/$NON-NLS-1$\n+\t\treturn ignore;\n+\t}\n+\n+\tprivate static String buildShowIgnoreCheckBox() {\n+\t\tString template = PUSH_DIV;\n+\t\ttemplate += END_DIV;\n+\t\ttemplate += createShowIgnore();\n+\t\ttemplate += END_DIV;\n+\t\treturn template;\n+\t}\n+\n@@ -200,1 +216,11 @@\n-\t\treturn MessageFormat.format(sb.toString(), Encode.forHtml(id + uuid), (value == -1) ? \"N\/A\" : value, \/\/$NON-NLS-1$\n+\t\tObject scoreLabel;\n+\t\tif (value == -1) {\n+\t\t\tscoreLabel = \"N\/A\";\n+\t\t} else if (value == -3) {\n+\t\t\tscoreLabel = \"Ignored\";\n+\t\t\tdescription = description.replaceAll(\"\\n\", \"<\/br>\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t} else {\n+\t\t\tscoreLabel = value;\n+\t\t}\n+\n+\t\treturn MessageFormat.format(sb.toString(), Encode.forHtml(id + uuid), scoreLabel, \/\/$NON-NLS-1$\n@@ -288,0 +314,1 @@\n+\t\t\tdiv.append(buildShowIgnoreCheckBox());\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/html\/internal\/RulesHtmlToolkit.java","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,0 +124,1 @@\n+\tprivate static final String NEW_LINE = \"\\n\"; \/\/$NON-NLS-1$\n@@ -198,0 +199,8 @@\n+\n+\t\tpublic static EventAvailability getEventAvailability(int availabilityScore) {\n+\t\t\tfor (EventAvailability event : EventAvailability.values()) {\n+\t\t\t\tif (event.availabilityScore == availabilityScore)\n+\t\t\t\t\treturn event;\n+\t\t\t}\n+\t\t\tthrow new IllegalArgumentException(\"EventAvailability not found.\");\n+\t\t}\n@@ -511,0 +520,30 @@\n+\tpublic static String getIgnoreReason(IItemCollection items, IRule rule) {\n+\t\tStringBuffer ignoreReason = new StringBuffer();\n+\t\tStringBuffer lessAvailableEvents = new StringBuffer();\n+\t\tint numberOfIssues = 0;\n+\t\tMap<String, EventAvailability> availabilityMap = rule.getRequiredEvents();\n+\t\tfor (Entry<String, EventAvailability> entry : availabilityMap.entrySet()) {\n+\t\t\tEventAvailability eventAvailability = getEventAvailability(items, entry.getKey());\n+\t\t\tif (eventAvailability.isLessAvailableThan(entry.getValue())) {\n+\t\t\t\tnumberOfIssues++;\n+\t\t\t\tlessAvailableEvents.append(numberOfIssues + \" \");\n+\t\t\t\tlessAvailableEvents.append(\n+\t\t\t\t\t\tMessageFormat.format(Messages.getString(Messages.RulesToolkit_RULES_IGNORED_EVENT_AVAILABILITY),\n+\t\t\t\t\t\t\t\tentry.getKey(), eventAvailability, entry.getValue()));\n+\t\t\t\tlessAvailableEvents.append(NEW_LINE);\n+\t\t\t}\n+\t\t}\n+\t\tif (numberOfIssues > 0) {\n+\t\t\tif (numberOfIssues == 1) {\n+\t\t\t\tignoreReason.append(MessageFormat.format(Messages.getString(Messages.RulesToolkit_RULE_IGNORED_REASON),\n+\t\t\t\t\t\tnumberOfIssues));\n+\t\t\t} else {\n+\t\t\t\tignoreReason.append(MessageFormat.format(Messages.getString(Messages.RulesToolkit_RULES_IGNORED_REASON),\n+\t\t\t\t\t\tnumberOfIssues));\n+\t\t\t}\n+\t\t\tignoreReason.append(NEW_LINE);\n+\t\t\tignoreReason.append(lessAvailableEvents);\n+\t\t}\n+\t\treturn ignoreReason.toString();\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,3 @@\n-\n+RulesToolkit_RULE_IGNORED_REASON=The rule is not evaluated because of this {0} issue :\n+RulesToolkit_RULES_IGNORED_REASON=The rule is not evaluated because of these {0} issues :\n+RulesToolkit_RULES_IGNORED_EVENT_AVAILABILITY={0} is {1} but the expected status is {2}\n@@ -69,0 +71,1 @@\n+Severity_IGNORE=Ignore\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/messages\/internal\/messages.properties","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+RULESPAGE_SHOW_IGNORE_RESULTS_ACTION=Show IGNORED Results\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/html\/internal\/messages.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,4 @@\n+.rule_score.ignore {\n+\tbackground-color: lightblue;\n+}\n+\n@@ -164,0 +168,4 @@\n+.rule_bar.ignore {\n+\tbackground-color: lightblue;\n+}\n+\n@@ -245,0 +253,6 @@\n+\n+.showIgnoreText {\n+\tfont-family: sans-serif;\n+\tfont-size: 85%;\n+}\n+\n@@ -263,0 +277,1 @@\n+\tvar showIgnore = false;\n@@ -308,0 +323,14 @@\n+\t\tshowIgnore : function(ignore) {\n+\t\t\tvar newDisplay = ignore ? \"block\" : \"none\";\n+\t\t\tvar css = document.all ? 'rules' : 'cssRules';\n+\t\t\tvar rule = document.styleSheets[0][css];\n+\t\t\tfor (var i = 0; i < rule.length; i++) {\n+\t\t\t\tif (rule[i].selectorText == \".ignore\") {\n+\t\t\t\t\trule[i].style.display = newDisplay;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\toverview.updateElementsDisplay(\"ignore\", newDisplay);\n+\t\t\toverview.updatePageHeadersVisibility();\n+\t\t\tshowIgnore = ignore;\n+\t\t},\n+\n@@ -403,1 +432,1 @@\n-\t\t\t\tscore = 'I';\n+\t\t\t\tscore = 'Ignored';\n@@ -426,1 +455,1 @@\n-\t\t\t\t\tif (severity !== 'ignore') {\n+\t\t\t\t\tif (severity === 'ok' || severity === 'na') {\n@@ -439,0 +468,13 @@\n+\n+\t\t\tfor (var i = 0; i < elements.length; i++)  {\n+\t\t\t\telements[i].className = 'rule ' + severity;\n+\t\t\t\tif (showIgnore) {\n+\t\t\t\t\tif (severity === 'ignore') {\n+\t\t\t\t\t\telements[i].style.display = 'block';\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\telements[i].style.display = 'none';\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/html\/internal\/rules_overview.html","additions":45,"deletions":3,"binary":false,"changes":48,"status":"modified"}]}