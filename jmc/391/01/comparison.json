{"files":[{"patch":"@@ -165,0 +165,1 @@\n+\t\t\tinsideSummary.addAggregate(JdkAggregators.ALLOC_INSIDE_TLAB_RATE(visibleRange));\n@@ -175,0 +176,1 @@\n+\t\t\toutsideSummary.addAggregate(JdkAggregators.ALLOC_OUTSIDE_TLAB_RATE(visibleRange));\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/TlabPage.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.common.unit.IRange;\n@@ -772,0 +773,31 @@\n+\tpublic static IAggregator<IQuantity, ?> rate(\n+\t\tString name, String description, final String typeId, final IAttribute<IQuantity> attribute,\n+\t\tIRange<IQuantity> range) {\n+\t\tfinal double duration = range.getExtent().in(UnitLookup.SECOND).doubleValue();\n+\n+\t\tContentType<?> contentType = attribute.getContentType();\n+\t\tif (contentType instanceof LinearKindOfQuantity && contentType == UnitLookup.MEMORY) {\n+\t\t\treturn new Sum(name, description, (LinearKindOfQuantity) contentType) {\n+\n+\t\t\t\t@Override\n+\t\t\t\tprotected IMemberAccessor<IQuantity, IItem> doGetAccessor(IType<IItem> type) {\n+\t\t\t\t\tif (type.getIdentifier().equals(typeId)) {\n+\t\t\t\t\t\treturn attribute.getAccessor(type);\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\n+\t\t\t\t@Override\n+\t\t\t\tpublic IQuantity getValue(SumConsumer consumer) {\n+\t\t\t\t\tif (consumer.unit != null) {\n+\t\t\t\t\t\tIUnit rateUnit = UnitLookup.getRateKind(consumer.unit.getContentType()).getDefaultUnit();\n+\t\t\t\t\t\tIQuantity rate = rateUnit.quantity(consumer.sum \/ duration);\n+\t\t\t\t\t\treturn rate;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\t\tthrow new IllegalArgumentException(\"Can only use LinearKindOfQuantity\"); \/\/$NON-NLS-1$\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/Aggregators.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+\tpublic static final LinearKindOfQuantity MEMORYBANWIDTH = createMemoryBandwidth();\n@@ -162,0 +163,1 @@\n+\tprivate static final Map<String, LinearKindOfQuantity> RATE_MAP;\n@@ -173,0 +175,4 @@\n+\t\tMap<String, LinearKindOfQuantity> rateKinds = new HashMap<>();\n+\t\trateKinds.put(MEMORY.getIdentifier(), MEMORYBANWIDTH);\n+\t\tRATE_MAP = Collections.unmodifiableMap(rateKinds);\n+\n@@ -209,0 +215,4 @@\n+\tpublic static LinearKindOfQuantity getRateKind(KindOfQuantity kind) {\n+\t\treturn RATE_MAP.get(kind.getIdentifier());\n+\t}\n+\n@@ -453,0 +463,13 @@\n+\tprivate static LinearKindOfQuantity createMemoryBandwidth() {\n+\t\t\/\/ the unit is similar to https:\/\/en.wikipedia.org\/wiki\/Bit_rate,\n+\t\t\/\/ but we don't support bits\/s for simplicity.\n+\t\tLinearKindOfQuantity memory = new LinearKindOfQuantity(\"MemoryBandwidth\", \"B\/s\", EnumSet.range(NOBI, PEBI),\n+\t\t\t\tEnumSet.range(NOBI, YOBI));\n+\n+\t\tmemory.addFormatter(new LinearKindOfQuantity.AutoFormatter(memory, \"Dynamic\", 1.0, 1024));\n+\t\tmemory.addFormatter(new KindOfQuantity.ExactFormatter<>(memory));\n+\t\tmemory.addFormatter(new KindOfQuantity.VerboseFormatter<>(memory));\n+\n+\t\treturn memory;\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/UnitLookup.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+\n@@ -105,0 +106,1 @@\n+import org.openjdk.jmc.common.unit.IRange;\n@@ -406,0 +408,7 @@\n+\n+\tpublic static final IAggregator<IQuantity, ?> ALLOC_INSIDE_TLAB_RATE(IRange<IQuantity> range) {\n+\t\treturn Aggregators.rate(Messages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_RATE),\n+\t\t\t\tMessages.getString(Messages.AGGR_ALLOC_INSIDE_TLAB_RATE_DESC), JdkTypeIDs.ALLOC_INSIDE_TLAB,\n+\t\t\t\tJdkAttributes.TLAB_SIZE, range);\n+\t}\n+\n@@ -410,0 +419,7 @@\n+\n+\tpublic static final IAggregator<IQuantity, ?> ALLOC_OUTSIDE_TLAB_RATE(IRange<IQuantity> range) {\n+\t\treturn Aggregators.rate(Messages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_RATE),\n+\t\t\t\tMessages.getString(Messages.AGGR_ALLOC_OUTSIDE_TLAB_RATE_DESC), JdkTypeIDs.ALLOC_OUTSIDE_TLAB,\n+\t\t\t\tJdkAttributes.ALLOCATION_SIZE, range);\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+\tpublic static final String AGGR_ALLOC_INSIDE_TLAB_RATE = \"AGGR_ALLOC_INSIDE_TLAB_RATE\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALLOC_INSIDE_TLAB_RATE_DESC = \"AGGR_ALLOC_INSIDE_TLAB_RATE_DESC\"; \/\/$NON-NLS-1$\n@@ -69,0 +71,2 @@\n+\tpublic static final String AGGR_ALLOC_OUTSIDE_TLAB_RATE = \"AGGR_ALLOC_OUTSIDE_TLAB_RATE\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALLOC_OUTSIDE_TLAB_RATE_DESC = \"AGGR_ALLOC_OUTSIDE_TLAB_RATE_DESC\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -463,0 +463,2 @@\n+AGGR_ALLOC_INSIDE_TLAB_RATE=Alloc Rate in TLABs\n+AGGR_ALLOC_INSIDE_TLAB_RATE_DESC=The estimated allocation rate in TLABs\n@@ -465,0 +467,2 @@\n+AGGR_ALLOC_OUTSIDE_TLAB_RATE=Alloc Rate Outside TLABs\n+AGGR_ALLOC_OUTSIDE_TLAB_RATE_DESC=The estimated allocation rate outside TLABs\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}