{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Map;\n@@ -51,0 +52,3 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs;\n+import org.openjdk.jmc.flightrecorder.rules.IResult;\n+import org.openjdk.jmc.flightrecorder.rules.IResultValueProvider;\n@@ -52,1 +56,3 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n+import org.openjdk.jmc.flightrecorder.rules.ResultBuilder;\n+import org.openjdk.jmc.flightrecorder.rules.Severity;\n+import org.openjdk.jmc.flightrecorder.rules.TypedResult;\n@@ -54,0 +60,2 @@\n+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;\n+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.RequiredEventsBuilder;\n@@ -76,0 +84,8 @@\n+\t\n+\tpublic static final TypedResult<String> VARIABLE_NAME = new TypedResult<>(\"variableName\",\n+\t\t\t\"Variable\", \"A description\", UnitLookup.PLAIN_TEXT, String.class);\n+\t\n+\tprivate static final List<TypedResult<?>> RESULT_ATTRIBUTES = Arrays.<TypedResult<?>> asList(TypedResult.SCORE, VARIABLE_NAME);\n+\t\n+\tprivate static final Map<String, EventAvailability> REQUIRED_EVENTS = RequiredEventsBuilder.create()\n+\t\t\t.addEventType(JdkTypeIDs.ENVIRONMENT_VARIABLE, EventAvailability.AVAILABLE).build();\n@@ -77,1 +93,1 @@\n-\tprivate Result getResult(IItemCollection items, IPreferenceValueProvider valueProvider) {\n+\tprivate IResult getResult(IItemCollection items, IPreferenceValueProvider valueProvider, IResultValueProvider resultProvider) {\n@@ -82,1 +98,6 @@\n-\t\t\treturn new Result(this, 100, \"Could not find the environment variable named \" + variableName);\n+\t\t\treturn ResultBuilder.createFor(this, valueProvider)\n+\t\t\t\t\t.setSeverity(Severity.WARNING)\n+\t\t\t\t\t.setSummary(\"Could not find the environment variable named {variableName}.\")\n+\t\t\t\t\t.addResult(VARIABLE_NAME, variableName)\n+\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(100))\n+\t\t\t\t\t.build();\n@@ -87,1 +108,6 @@\n-\t\t\treturn new Result(this, score, \"The result from parsing the information in the environment variable named \" + variableName + \" was \" + score);\n+\t\t\treturn ResultBuilder.createFor(this, valueProvider)\n+\t\t\t\t\t.setSeverity(Severity.get(score))\n+\t\t\t\t\t.setSummary(\"The result from parsing the information in the environment variable named {variableName} was {core}.\")\n+\t\t\t\t\t.addResult(VARIABLE_NAME, variableName)\n+\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(score))\n+\t\t\t\t\t.build();\n@@ -89,1 +115,6 @@\n-\t\t\treturn new Result(this, 100, \"Could not parse the value for the environment variable named \" + variableName);\n+\t\t\treturn ResultBuilder.createFor(this, valueProvider)\n+\t\t\t\t\t.setSeverity(Severity.WARNING)\n+\t\t\t\t\t.setSummary(\"Could not parse the value for the environment variable named {variableName}.\")\n+\t\t\t\t\t.addResult(VARIABLE_NAME, variableName)\n+\t\t\t\t\t.addResult(TypedResult.SCORE, UnitLookup.NUMBER_UNITY.quantity(100))\n+\t\t\t\t\t.build();\n@@ -94,2 +125,2 @@\n-\tpublic RunnableFuture<Result> evaluate(final IItemCollection items, final IPreferenceValueProvider valueProvider) {\n-\t\tFutureTask<Result> evaluationTask = new FutureTask<>(new Callable<Result>() {\n+\tpublic RunnableFuture<IResult> createEvaluation(final IItemCollection items, final IPreferenceValueProvider valueProvider, final IResultValueProvider resultProvider) {\n+\t\tFutureTask<IResult> evaluationTask = new FutureTask<>(new Callable<IResult>() {\n@@ -97,2 +128,2 @@\n-\t\t\tpublic Result call() throws Exception {\n-\t\t\t\treturn getResult(items, valueProvider);\n+\t\t\tpublic IResult call() throws Exception {\n+\t\t\t\treturn getResult(items, valueProvider, resultProvider);\n@@ -114,0 +145,10 @@\n+\t\n+\t@Override\n+\tpublic Collection<TypedResult<?>> getResults() {\n+\t\treturn RESULT_ATTRIBUTES;\n+\t}\n+\t\n+\t@Override\n+\tpublic Map<String, EventAvailability> getRequiredEvents() {\n+\t\treturn REQUIRED_EVENTS;\n+\t}\n","filename":"application\/org.openjdk.jmc.flightrecorder.pde\/templates_3.4\/simpleruletemplate\/java\/$className$.java","additions":50,"deletions":9,"binary":false,"changes":59,"status":"modified"}]}