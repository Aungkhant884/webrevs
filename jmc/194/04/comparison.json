{"files":[{"patch":"@@ -55,0 +55,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -64,1 +65,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -305,2 +305,2 @@\n-\t\t\tStream<IXDataRenderer> phaseRows = AggregationGrid.mapItems(ItemCollectionToolkit.stream(phaseItems),\n-\t\t\t\t\tJfrAttributes.EVENT_THREAD, JfxPage::buildThreadRenderer);\n+\t\t\tStream<IXDataRenderer> phaseRows = AggregationGrid.mapItems(phaseItems.stream(), JfrAttributes.EVENT_THREAD,\n+\t\t\t\t\tJfxPage::buildThreadRenderer);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ext.jfx\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ext\/jfx\/JfxPage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -105,1 +106,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -81,1 +82,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/graphview\/views\/GraphView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -191,2 +190,1 @@\n-\t\t\tviewer.setInput(buildTree(\n-\t\t\t\t\tItemCollectionToolkit.stream(getDataSource().getItems()).map(IItemIterable::getType).distinct()));\n+\t\t\tviewer.setInput(buildTree(getDataSource().getItems().stream().map(IItemIterable::getType).distinct()));\n","filename":"application\/org.openjdk.jmc.flightrecorder.metadata\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/metadata\/MetadataPage.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,182 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.ui;\n-\n-import java.text.MessageFormat;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.Spliterator;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-import java.util.stream.StreamSupport;\n-\n-import org.openjdk.jmc.common.item.IAggregator;\n-import org.openjdk.jmc.common.item.IAttribute;\n-import org.openjdk.jmc.common.item.IItem;\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.item.IItemConsumer;\n-import org.openjdk.jmc.common.item.IItemFilter;\n-import org.openjdk.jmc.common.item.IItemIterable;\n-import org.openjdk.jmc.common.item.IMemberAccessor;\n-import org.openjdk.jmc.common.item.IType;\n-import org.openjdk.jmc.common.item.ItemFilters;\n-import org.openjdk.jmc.common.item.ItemToolkit;\n-import org.openjdk.jmc.common.unit.IQuantity;\n-import org.openjdk.jmc.common.unit.IRange;\n-import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;\n-\n-\/**\n- * Toolkit class for working with IItemCollection instances\n- *\/\n-public class ItemCollectionToolkit {\n-\n-\tprivate static class StreamBackedItemCollection implements IItemCollection {\n-\n-\t\tprivate final Supplier<Stream<IItemIterable>> items;\n-\t\tprivate final Set<IRange<IQuantity>> chunkRanges;\n-\n-\t\tStreamBackedItemCollection(Supplier<Stream<IItemIterable>> items, Set<IRange<IQuantity>> chunkRanges) {\n-\t\t\tthis.items = items;\n-\t\t\tthis.chunkRanges = chunkRanges;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Iterator<IItemIterable> iterator() {\n-\t\t\treturn items.get().iterator();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Spliterator<IItemIterable> spliterator() {\n-\t\t\treturn items.get().spliterator();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic StreamBackedItemCollection apply(IItemFilter filter) {\n-\t\t\treturn new StreamBackedItemCollection(() -> ItemIterableToolkit.filter(items.get(), filter), chunkRanges);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic <V, C extends IItemConsumer<C>> V getAggregate(IAggregator<V, C> aggregator) {\n-\t\t\treturn ItemIterableToolkit.aggregate(aggregator, items.get());\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean hasItems() {\n-\t\t\treturn items.get().anyMatch(IItemIterable::hasItems);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Set<IRange<IQuantity>> getTimeRanges() {\n-\t\t\treturn chunkRanges;\n-\t\t}\n-\n-\t}\n-\n-\tpublic static final IItemCollection EMPTY = new StreamBackedItemCollection(() -> Stream.empty(),\n-\t\t\tCollections.emptySet());\n-\n-\tpublic static IItemCollection build(Stream<? extends IItem> items, Set<IRange<IQuantity>> chunkRanges) {\n-\t\tMap<IType<IItem>, List<IItem>> byTypeMap = items.collect(Collectors.groupingBy(ItemToolkit::getItemType));\n-\t\tList<Entry<IType<IItem>, List<IItem>>> entryList = new ArrayList<>(byTypeMap.entrySet());\n-\t\treturn ItemCollectionToolkit\n-\t\t\t\t.build(() -> entryList.stream().map(e -> ItemIterableToolkit.build(e.getValue()::stream, e.getKey())));\n-\t}\n-\n-\tpublic static IItemCollection build(Stream<? extends IItem> items) {\n-\t\treturn build(items, Collections.emptySet());\n-\t}\n-\n-\tpublic static IItemCollection build(Supplier<Stream<IItemIterable>> items, Set<IRange<IQuantity>> chunkRanges) {\n-\t\treturn new StreamBackedItemCollection(items, Collections.emptySet());\n-\t}\n-\n-\tpublic static IItemCollection build(Supplier<Stream<IItemIterable>> items) {\n-\t\treturn build(items, Collections.emptySet());\n-\t}\n-\n-\tpublic static IItemCollection merge(Supplier<Stream<IItemCollection>> items) {\n-\t\tSet<IRange<IQuantity>> chunkRanges = items.get().flatMap(i -> i.getTimeRanges().stream())\n-\t\t\t\t.collect(Collectors.toSet());\n-\t\treturn ItemCollectionToolkit.build(() -> items.get().flatMap(ItemCollectionToolkit::stream), chunkRanges);\n-\t}\n-\n-\tpublic static <V> Optional<IItemIterable> join(IItemCollection items, String withTypeId) {\n-\t\tIItemCollection itemsWithType = items.apply(ItemFilters.type(withTypeId));\n-\t\treturn ItemCollectionToolkit.stream(itemsWithType).findAny()\n-\t\t\t\t.map(s -> ItemIterableToolkit.build(\n-\t\t\t\t\t\t() -> ItemCollectionToolkit.stream(itemsWithType).flatMap(ItemIterableToolkit::stream),\n-\t\t\t\t\t\ts.getType()));\n-\t}\n-\n-\tpublic static <T> Supplier<Stream<T>> values(IItemCollection items, IAttribute<T> attribute) {\n-\t\treturn () -> ItemCollectionToolkit.stream(items).flatMap(itemStream -> {\n-\t\t\tIMemberAccessor<T, IItem> accessor = attribute.getAccessor(itemStream.getType());\n-\t\t\tif (accessor != null) {\n-\t\t\t\treturn ItemIterableToolkit.stream(itemStream).map(accessor::getMember);\n-\t\t\t} else {\n-\t\t\t\treturn Stream.empty();\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\tpublic static String getDescription(IItemCollection items) {\n-\t\tMap<IType<?>, Long> itemCountByType = ItemCollectionToolkit.stream(items).filter(IItemIterable::hasItems)\n-\t\t\t\t.collect(Collectors.toMap(IItemIterable::getType, IItemIterable::getItemCount, Long::sum));\n-\t\tif (itemCountByType.size() < 4) {\n-\t\t\treturn itemCountByType.entrySet().stream().map(e -> e.getValue() + \" \" + e.getKey().getName()).sorted() \/\/$NON-NLS-1$\n-\t\t\t\t\t.collect(Collectors.joining(\", \")); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn MessageFormat.format(Messages.ITEM_COLLECTION_DESC,\n-\t\t\t\titemCountByType.values().stream().mapToLong(Long::longValue).sum(), itemCountByType.size());\n-\t}\n-\n-\tpublic static IItemCollection filterIfNotNull(IItemCollection items, IItemFilter filter) {\n-\t\treturn filter == null ? items : items.apply(filter);\n-\t}\n-\n-\tpublic static Stream<IItemIterable> stream(IItemCollection items) {\n-\t\treturn StreamSupport.stream(items.spliterator(), false);\n-\t}\n-\n-\tpublic static Stream<IItemIterable> parallelStream(IItemCollection items) {\n-\t\treturn StreamSupport.stream(items.spliterator(), true);\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/ItemCollectionToolkit.java","additions":0,"deletions":182,"binary":false,"changes":182,"status":"deleted"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.ui;\n-\n-import java.util.Comparator;\n-import java.util.Iterator;\n-import java.util.Objects;\n-import java.util.Spliterator;\n-import java.util.Spliterators;\n-import java.util.function.Function;\n-import java.util.function.Predicate;\n-import java.util.function.Supplier;\n-import java.util.stream.Collector;\n-import java.util.stream.Stream;\n-import java.util.stream.StreamSupport;\n-\n-import org.openjdk.jmc.common.item.IAggregator;\n-import org.openjdk.jmc.common.item.IAttribute;\n-import org.openjdk.jmc.common.item.IItem;\n-import org.openjdk.jmc.common.item.IItemConsumer;\n-import org.openjdk.jmc.common.item.IItemFilter;\n-import org.openjdk.jmc.common.item.IItemIterable;\n-import org.openjdk.jmc.common.item.IMemberAccessor;\n-import org.openjdk.jmc.common.item.IType;\n-import org.openjdk.jmc.common.util.PredicateToolkit;\n-\n-\/**\n- * Toolkit class for working with IItemIterable instances\n- *\/\n-public class ItemIterableToolkit {\n-\n-\tprivate static class StreamBackedItemIterable implements IItemIterable {\n-\n-\t\tprivate final Supplier<Stream<IItem>> items;\n-\t\tprivate final IType<IItem> type;\n-\n-\t\tStreamBackedItemIterable(Supplier<Stream<IItem>> items, IType<IItem> type) {\n-\t\t\tthis.items = items;\n-\t\t\tthis.type = type;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic IType<IItem> getType() {\n-\t\t\treturn type;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean hasItems() {\n-\t\t\treturn items.get().findAny().isPresent();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic long getItemCount() {\n-\t\t\t\/\/ In jdk8 the implementation of count is mapToLong(e -> 1L).sum() which may not be necessary\n-\t\t\tlong exactSizeIfKnown = spliterator().getExactSizeIfKnown();\n-\t\t\treturn exactSizeIfKnown >= 0 ? exactSizeIfKnown : items.get().count();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Iterator<IItem> iterator() {\n-\t\t\treturn Spliterators.iterator(spliterator());\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Spliterator<IItem> spliterator() {\n-\t\t\treturn items.get().spliterator();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic IItemIterable apply(Predicate<IItem> filter) {\n-\t\t\treturn new StreamBackedItemIterable(() -> items.get().filter(filter::test), getType());\n-\t\t}\n-\t}\n-\n-\tpublic static IItemIterable build(Supplier<Stream<IItem>> items, IType<IItem> type) {\n-\t\treturn new StreamBackedItemIterable(items, type);\n-\t}\n-\n-\tpublic static Stream<IItemIterable> filter(Stream<? extends IItemIterable> items, IItemFilter on) {\n-\t\tFunction<IItemIterable, IItemIterable> streamMapper = itemStream -> {\n-\t\t\tPredicate<IItem> predicate = on.getPredicate(itemStream.getType());\n-\t\t\tif (PredicateToolkit.isTrueGuaranteed(predicate)) {\n-\t\t\t\treturn itemStream;\n-\t\t\t} else if (PredicateToolkit.isFalseGuaranteed(predicate)) {\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\treturn itemStream.apply(predicate);\n-\t\t\t}\n-\t\t};\n-\t\treturn items.map(streamMapper).filter(Objects::nonNull);\n-\t}\n-\n-\tpublic static <V, C extends IItemConsumer<C>> V aggregate(\n-\t\tIAggregator<V, C> a, Stream<? extends IItemIterable> items) {\n-\t\tFunction<IItemIterable, C> itemsToValue = itemsStream -> ItemIterableToolkit.parallelStream(itemsStream)\n-\t\t\t\t.collect(valueCollector(a, itemsStream.getType()));\n-\t\tStream<C> consumers = items.filter(is -> a.acceptType(is.getType())).map(itemsToValue);\n-\t\treturn a.getValue(consumers.iterator());\n-\t}\n-\n-\tprivate static <C extends IItemConsumer<C>> Collector<IItem, C, C> valueCollector(\n-\t\tIAggregator<?, C> a, IType<IItem> type) {\n-\t\treturn Collector.of(() -> a.newItemConsumer(type), C::consume, IItemConsumer::merge,\n-\t\t\t\tCollector.Characteristics.UNORDERED);\n-\t}\n-\n-\tpublic static <V> Stream<? extends IItem> sorted(\n-\t\tIItemIterable items, IAttribute<V> onAttribute, Comparator<? super V> valueComparator) {\n-\t\tIMemberAccessor<V, IItem> va = onAttribute.getAccessor(items.getType());\n-\t\treturn stream(items).sorted((i1, i2) -> Objects.compare(va.getMember(i1), va.getMember(i2), valueComparator));\n-\t}\n-\n-\tpublic static Stream<IItem> stream(IItemIterable items) {\n-\t\treturn StreamSupport.stream(items.spliterator(), false);\n-\t}\n-\n-\tpublic static Stream<IItem> parallelStream(IItemIterable items) {\n-\t\treturn StreamSupport.stream(items.spliterator(), true);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/ItemIterableToolkit.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -84,0 +84,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -224,1 +225,1 @@\n-\t\t\t\t\t\t\t\tItemCollectionToolkit.stream(itemsRelatedToSelection)\n+\t\t\t\t\t\t\t\titemsRelatedToSelection.stream()\n@@ -587,2 +588,1 @@\n-\t\t\tStream<? extends IItemIterable> items = Stream.concat(ItemCollectionToolkit.stream(srcItems),\n-\t\t\t\t\tItemCollectionToolkit.stream(dstItems));\n+\t\t\tStream<? extends IItemIterable> items = Stream.concat(srcItems.stream(), dstItems.stream());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/JfrPropertySheet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.item.ItemIterableToolkit;\n@@ -167,1 +169,1 @@\n-\t\treturn getTypeTree(ItemCollectionToolkit.stream(getItems()));\n+\t\treturn getTypeTree(getItems().stream());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/StreamModel.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.item.ItemIterableToolkit;\n@@ -57,2 +59,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n@@ -222,1 +222,1 @@\n-\t\t\treturn ItemIterableToolkit.parallelStream(is).collect(KeyedStream.collector(getMemberFunc));\n+\t\t\treturn is.parallelStream().collect(KeyedStream.collector(getMemberFunc));\n@@ -243,1 +243,1 @@\n-\t\tMap<T, List<IItem[]>> itemsMap = mapItems(ItemCollectionToolkit.stream(items), classifier);\n+\t\tMap<T, List<IItem[]>> itemsMap = mapItems(items.stream(), classifier);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/AggregationGrid.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n@@ -104,1 +102,1 @@\n-\t\treturn ItemIterableToolkit.parallelStream(is).collect(collector(is.getType()));\n+\t\treturn is.parallelStream().collect(collector(is.getType()));\n@@ -109,2 +107,2 @@\n-\t\tList<List<C>> collect = ItemCollectionToolkit.parallelStream(items).filter(this::acceptItems)\n-\t\t\t\t.map(this::collectItems).collect(Collectors.toList());\n+\t\tList<List<C>> collect = items.parallelStream().filter(this::acceptItems).map(this::collectItems)\n+\t\t\t\t.collect(Collectors.toList());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/BucketBuilder.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -129,2 +130,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n@@ -922,2 +921,1 @@\n-\t\treturn ItemCollectionToolkit.stream(items).filter(IItemIterable::hasItems)\n-\t\t\t\t.flatMap(is -> is.getType().getAttributes().stream());\n+\t\treturn items.stream().filter(IItemIterable::hasItems).flatMap(is -> is.getType().getAttributes().stream());\n@@ -967,2 +965,2 @@\n-\t\tIItem firstItem = ItemCollectionToolkit.stream(items).filter(is -> is.getType().hasAttribute(attribute))\n-\t\t\t\t.flatMap(ItemIterableToolkit::stream)\n+\t\tIItem firstItem = items.stream().filter(is -> is.getType().hasAttribute(attribute))\n+\t\t\t\t.flatMap(iterable -> iterable.stream())\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/DataPageToolkit.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-import org.eclipse.swt.widgets.Event;\n@@ -70,1 +69,0 @@\n-import org.eclipse.swt.widgets.Listener;\n@@ -72,1 +70,0 @@\n-\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/FlavorSelector.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-\n@@ -63,0 +62,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -69,2 +69,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n@@ -187,4 +185,3 @@\n-\t\t\tIMemberAccessor<Object, T> anyValueAccessor = row -> ItemCollectionToolkit\n-\t\t\t\t\t.stream(AggregationGrid.getItems(row))\n-\t\t\t\t\t.flatMap(is -> ItemIterableToolkit.stream(is).map(a.getAccessor(is.getType())::getMember))\n-\t\t\t\t\t.filter(Objects::nonNull).findAny().orElse(null);\n+\t\t\tIMemberAccessor<Object, T> anyValueAccessor = row -> AggregationGrid.getItems(row).stream()\n+\t\t\t\t\t.flatMap(is -> is.stream().map(a.getAccessor(is.getType())::getMember)).filter(Objects::nonNull)\n+\t\t\t\t\t.findAny().orElse(null);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ItemHistogram.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ItemHistogramWithInput.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,2 +60,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n@@ -159,1 +157,1 @@\n-\t\tshow(ItemCollectionToolkit.stream(items).flatMap(ItemIterableToolkit::stream).iterator());\n+\t\tshow(items.stream().flatMap(iterable -> iterable.stream()).iterator());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ItemList.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -46,1 +47,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ItemRow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,2 +51,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n@@ -110,1 +108,1 @@\n-\t\treturn ItemIterableToolkit.parallelStream(is).collect(collector(is.getType()));\n+\t\treturn is.parallelStream().collect(collector(is.getType()));\n@@ -116,2 +114,2 @@\n-\t\tList<List<Pair<C, CC>>> collect = ItemCollectionToolkit.parallelStream(items).filter(this::acceptItems)\n-\t\t\t\t.map(this::collectItems).collect(Collectors.toList());\n+\t\tList<List<Pair<C, CC>>> collect = items.parallelStream().filter(this::acceptItems).map(this::collectItems)\n+\t\t\t\t.collect(Collectors.toList());\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/PairBucketBuilder.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -70,1 +71,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -103,2 +103,2 @@\n-\t\tthis.typeTree = dataSourceSupplier.get().getTypeTree(ItemCollectionToolkit\n-\t\t\t\t.stream(dataSourceSupplier.get().getItems()).filter(this::typeWithThreadAndDuration));\n+\t\tthis.typeTree = dataSourceSupplier.get()\n+\t\t\t\t.getTypeTree(dataSourceSupplier.get().getItems().stream().filter(this::typeWithThreadAndDuration));\n@@ -113,2 +113,2 @@\n-\t\ttypeTree = dataSourceSupplier.get().getTypeTree(ItemCollectionToolkit\n-\t\t\t\t.stream(dataSourceSupplier.get().getItems()).filter(this::typeWithThreadAndDuration));\n+\t\ttypeTree = dataSourceSupplier.get()\n+\t\t\t\t.getTypeTree(dataSourceSupplier.get().getItems().stream().filter(this::typeWithThreadAndDuration));\n@@ -124,2 +124,2 @@\n-\t\ttypeTree = dataSourceSupplier.get().getTypeTree(ItemCollectionToolkit\n-\t\t\t\t.stream(dataSourceSupplier.get().getItems()).filter(this::typeWithThreadAndDuration));\n+\t\ttypeTree = dataSourceSupplier.get()\n+\t\t\t\t.getTypeTree(dataSourceSupplier.get().getItems().stream().filter(this::typeWithThreadAndDuration));\n@@ -211,4 +211,2 @@\n-\t\tIterator<IQuantity> start = ItemCollectionToolkit.values(startEvents, JfrAttributes.START_TIME).get().sorted()\n-\t\t\t\t.iterator();\n-\t\tIterator<IQuantity> end = ItemCollectionToolkit.values(endEvents, JfrAttributes.END_TIME).get().sorted()\n-\t\t\t\t.iterator();\n+\t\tIterator<IQuantity> start = startEvents.values(JfrAttributes.START_TIME).get().sorted().iterator();\n+\t\tIterator<IQuantity> end = endEvents.values(JfrAttributes.END_TIME).get().sorted().iterator();\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/ThreadGraphLanes.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -237,1 +237,0 @@\n-\tpublic static String ITEM_COLLECTION_DESC;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -78,1 +79,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -276,2 +276,1 @@\n-\t\t\t\tStream<IMCClassLoader> stream = ItemCollectionToolkit.values(selection, JdkAttributes.CLASSLOADER).get()\n-\t\t\t\t\t\t.distinct();\n+\t\t\t\tStream<IMCClassLoader> stream = selection.values(JdkAttributes.CLASSLOADER).get().distinct();\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ClassLoadingPage.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -91,1 +92,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/CodeCachePage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -66,1 +67,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/CompilationsPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -257,2 +256,2 @@\n-\t\t\ttypeFilterTree.setInput(getDataSource().getTypeTree((ItemCollectionToolkit.stream(selectionItems)\n-\t\t\t\t\t.filter(ii -> showTypesWithoutEvents || ii.hasItems()))));\n+\t\t\ttypeFilterTree.setInput(getDataSource()\n+\t\t\t\t\t.getTypeTree((selectionItems.stream().filter(ii -> showTypesWithoutEvents || ii.hasItems()))));\n@@ -294,1 +293,1 @@\n-\t\t\t\ttypes = ItemCollectionToolkit.stream(selectionItems).map(is -> is.getType()).distinct().iterator();\n+\t\t\t\ttypes = selectionItems.stream().map(is -> is.getType()).distinct().iterator();\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/EventBrowserPage.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -86,1 +87,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ExceptionsPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -73,1 +74,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/FileIOPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -105,1 +106,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/GarbageCollectionsPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -61,0 +62,1 @@\n+import org.openjdk.jmc.common.item.ItemIterableToolkit;\n@@ -78,2 +80,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/HeapPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -77,1 +78,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/JavaApplicationPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -86,1 +87,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/MemoryLeakPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -88,1 +89,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/SocketIOPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-\n@@ -90,1 +89,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemIterableToolkit;\n@@ -431,4 +429,2 @@\n-\t\treturn ItemIterableToolkit.stream(is)\n-\t\t\t\t.map(i -> parseCollection(stAccessor.getMember(i).displayUsing(IDisplayable.AUTO),\n-\t\t\t\t\t\tresultAccessor.getMember(i)))\n-\t\t\t\t.toArray(ThreadDumpCollection[]::new);\n+\t\treturn is.stream().map(i -> parseCollection(stAccessor.getMember(i).displayUsing(IDisplayable.AUTO),\n+\t\t\t\tresultAccessor.getMember(i))).toArray(ThreadDumpCollection[]::new);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ThreadDumpsPage.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -72,1 +73,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/VMOperationPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -83,1 +82,1 @@\n-\t\t\tItemCollectionToolkit.stream(items).map(IItemIterable::getType).forEach(type -> {\n+\t\t\titems.stream().map(IItemIterable::getType).forEach(type -> {\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/itemhandler\/AttributeComponentConfiguration.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n@@ -355,1 +354,1 @@\n-\t\t\t\tif (ItemCollectionToolkit.stream(chartItems).count() > 0 && !attributesToLineChart.isEmpty()) {\n+\t\t\t\tif (chartItems.stream().count() > 0 && !attributesToLineChart.isEmpty()) {\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/itemhandler\/ItemChart.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -89,1 +90,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/itemhandler\/ItemHandlerPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,0 +60,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -68,1 +69,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/itemhandler\/ItemListAndChart.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -49,1 +50,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/selection\/ChartSelection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/selection\/IItemStreamFlavor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/selection\/ItemBackedSelection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -49,1 +50,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/selection\/RangedChartSelection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -52,1 +53,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/selection\/SelectionStoreActionToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -48,1 +49,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/selection\/StacktraceFrameSelection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+import org.openjdk.jmc.common.item.ItemCollectionToolkit;\n@@ -107,1 +108,0 @@\n-import org.openjdk.jmc.flightrecorder.ui.ItemCollectionToolkit;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -479,2 +479,0 @@\n-# {0} is a number, {1} is a number\n-ITEM_COLLECTION_DESC={0} events of {1} types\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import javax.management.MBeanServerConnection;\n-\n@@ -44,2 +42,0 @@\n-import org.openjdk.jmc.rjmx.internal.DefaultConnectionHandle;\n-import org.openjdk.jmc.rjmx.internal.RJMXConnection;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/ServerHandleTestCase.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,0 @@\n-\t@SuppressWarnings(\"unchecked\")\n","filename":"application\/uitests\/org.openjdk.jmc.test.jemmy\/src\/test\/java\/org\/openjdk\/jmc\/test\/jemmy\/misc\/wrappers\/MCTextCanvas.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n@@ -43,1 +46,1 @@\n-public interface IItemCollection extends Iterable<IItemIterable> {\n+public interface IItemCollection extends Iterable<IItemIterable>, Supplier<Stream<IItemIterable>> {\n@@ -77,1 +80,1 @@\n-\t * @return a set of IRange objects representing the time ranges of represented by this\n+\t * @return a set of IRange objects representing the time ranges available in this\n@@ -80,1 +83,58 @@\n-\tSet<IRange<IQuantity>> getTimeRanges();\n+\tSet<IRange<IQuantity>> getAvailableTimeRanges();\n+\n+\/\/\t\/**\n+\/\/\t * Returns a new item collection with all items in this collection that pass the filter and is\n+\/\/\t * within the provided range.\n+\/\/\t * \n+\/\/\t * @param range\n+\/\/\t *            the matching range.\n+\/\/\t * @param filter\n+\/\/\t *            the matching filter.\n+\/\/\t * @return an item collection matching the range and filter.\n+\/\/\t *\/\n+\/\/\tIItemCollection getItems(IRange<IQuantity> range, IItemFilter filter);\n+\n+\t\/**\n+\t * Creates a new sequential {@code Stream} of {@link IItemIterable} from the\n+\t * {@link IItemCollection}.\n+\t *\n+\t * @return a new sequential {@code Stream}\n+\t *\/\n+\tdefault Stream<IItemIterable> stream() {\n+\t\treturn StreamSupport.stream(this.spliterator(), false);\n+\t}\n+\n+\t\/**\n+\t * Creates a new parallel {@code Stream} of {@link IItemIterable} from the\n+\t * {@link IItemCollection}.\n+\t *\n+\t * @return a new parallel {@code Stream}\n+\t *\/\n+\tdefault Stream<IItemIterable> parallelStream() {\n+\t\treturn StreamSupport.stream(this.spliterator(), true);\n+\t}\n+\n+\t\/**\n+\t * Returns the values for the supplied attribute from this IItemCollection.\n+\t * \n+\t * @param <T>\n+\t *            the type of the attribute, e.g. IQuantity.\n+\t * @param attribute\n+\t *            the attribute to retrieve values for.\n+\t * @return a stream of values.\n+\t *\/\n+\tdefault <T> Supplier<Stream<T>> values(IAttribute<T> attribute) {\n+\t\treturn () -> this.stream().flatMap(itemStream -> {\n+\t\t\tIMemberAccessor<T, IItem> accessor = attribute.getAccessor(itemStream.getType());\n+\t\t\tif (accessor != null) {\n+\t\t\t\treturn itemStream.stream().map(accessor::getMember);\n+\t\t\t} else {\n+\t\t\t\treturn Stream.empty();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t@Override\n+\tdefault Stream<IItemIterable> get() {\n+\t\treturn stream();\n+\t}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/IItemCollection.java","additions":63,"deletions":3,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -37,0 +37,3 @@\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n@@ -41,1 +44,1 @@\n-public interface IItemIterable extends Iterable<IItem> {\n+public interface IItemIterable extends Iterable<IItem>, Supplier<Stream<IItem>> {\n@@ -68,0 +71,22 @@\n+\t\/**\n+\t * Creates a new sequential {@code Stream} of {@link IItem} from the {@link IItemIterable}.\n+\t *\n+\t * @return a new sequential {@code Stream}\n+\t *\/\n+\tdefault Stream<IItem> stream() {\n+\t\treturn StreamSupport.stream(this.spliterator(), false);\n+\t}\n+\n+\t\/**\n+\t * Creates a new parallel {@code Stream} of {@link IItem} from the {@link IItemIterable}.\n+\t *\n+\t * @return a new parallel {@code Stream}\n+\t *\/\n+\tdefault Stream<IItem> parallelStream() {\n+\t\treturn StreamSupport.stream(this.spliterator(), true);\n+\t}\n+\n+\t@Override\n+\tdefault Stream<IItem> get() {\n+\t\treturn stream();\n+\t}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/IItemIterable.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.item;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.Spliterator;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.openjdk.jmc.common.messages.internal.Messages;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+import org.openjdk.jmc.common.unit.IRange;\n+\n+\/**\n+ * Toolkit class for working with IItemCollection instances\n+ *\/\n+public class ItemCollectionToolkit {\n+\tpublic static final IItemCollection EMPTY = new StreamBackedItemCollection(() -> Stream.empty(),\n+\t\t\tCollections.emptySet());\n+\n+\tprivate static class StreamBackedItemCollection implements IItemCollection {\n+\n+\t\tprivate final Supplier<Stream<IItemIterable>> items;\n+\t\tprivate final Set<IRange<IQuantity>> chunkRanges;\n+\n+\t\tStreamBackedItemCollection(Supplier<Stream<IItemIterable>> items, Set<IRange<IQuantity>> chunkRanges) {\n+\t\t\tthis.items = items;\n+\t\t\tthis.chunkRanges = chunkRanges;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Iterator<IItemIterable> iterator() {\n+\t\t\treturn items.get().iterator();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Spliterator<IItemIterable> spliterator() {\n+\t\t\treturn items.get().spliterator();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic StreamBackedItemCollection apply(IItemFilter filter) {\n+\t\t\treturn new StreamBackedItemCollection(() -> ItemIterableToolkit.filter(items.get(), filter), chunkRanges);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic <V, C extends IItemConsumer<C>> V getAggregate(IAggregator<V, C> aggregator) {\n+\t\t\treturn ItemIterableToolkit.aggregate(aggregator, items.get());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasItems() {\n+\t\t\treturn items.get().anyMatch(IItemIterable::hasItems);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Set<IRange<IQuantity>> getAvailableTimeRanges() {\n+\t\t\treturn chunkRanges;\n+\t\t}\n+\n+\t}\n+\n+\tstatic IItemCollection build(Stream<? extends IItem> items, Set<IRange<IQuantity>> chunkRanges) {\n+\t\tMap<IType<IItem>, List<IItem>> byTypeMap = items.collect(Collectors.groupingBy(ItemToolkit::getItemType));\n+\t\tList<Entry<IType<IItem>, List<IItem>>> entryList = new ArrayList<>(byTypeMap.entrySet());\n+\t\treturn ItemCollectionToolkit\n+\t\t\t\t.build(() -> entryList.stream().map(e -> ItemIterableToolkit.build(e.getValue()::stream, e.getKey())));\n+\t}\n+\n+\tpublic static IItemCollection build(Stream<? extends IItem> items) {\n+\t\treturn build(items, Collections.emptySet());\n+\t}\n+\n+\tpublic static IItemCollection build(Supplier<Stream<IItemIterable>> items, Set<IRange<IQuantity>> chunkRanges) {\n+\t\treturn new StreamBackedItemCollection(items, Collections.emptySet());\n+\t}\n+\n+\tpublic static IItemCollection build(Supplier<Stream<IItemIterable>> items) {\n+\t\treturn build(items, Collections.emptySet());\n+\t}\n+\n+\tpublic static IItemCollection merge(Supplier<Stream<IItemCollection>> items) {\n+\t\tSet<IRange<IQuantity>> chunkRanges = items.get().flatMap(i -> i.getAvailableTimeRanges().stream())\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\treturn ItemCollectionToolkit.build(() -> items.get().flatMap(i -> i.stream()), chunkRanges);\n+\t}\n+\n+\tpublic static <V> Optional<IItemIterable> join(IItemCollection items, String withTypeId) {\n+\t\tIItemCollection itemsWithType = items.apply(ItemFilters.type(withTypeId));\n+\t\treturn itemsWithType.stream().findAny().map(\n+\t\t\t\ts -> ItemIterableToolkit.build(() -> itemsWithType.stream().flatMap(i -> i.stream()), s.getType()));\n+\t}\n+\n+\tpublic static String getDescription(IItemCollection items) {\n+\t\tMap<IType<?>, Long> itemCountByType = items.stream().filter(IItemIterable::hasItems)\n+\t\t\t\t.collect(Collectors.toMap(IItemIterable::getType, IItemIterable::getItemCount, Long::sum));\n+\t\tif (itemCountByType.size() < 4) {\n+\t\t\treturn itemCountByType.entrySet().stream().map(e -> e.getValue() + \" \" + e.getKey().getName()).sorted() \/\/$NON-NLS-1$\n+\t\t\t\t\t.collect(Collectors.joining(\", \")); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn MessageFormat.format(Messages.ITEM_COLLECTION_DESC,\n+\t\t\t\titemCountByType.values().stream().mapToLong(Long::longValue).sum(), itemCountByType.size());\n+\t}\n+\n+\tpublic static IItemCollection filterIfNotNull(IItemCollection items, IItemFilter filter) {\n+\t\treturn filter == null ? items : items.apply(filter);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/ItemCollectionToolkit.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.item;\n+\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.stream.Collector;\n+import java.util.stream.Stream;\n+\n+import org.openjdk.jmc.common.util.PredicateToolkit;\n+\n+\/**\n+ * Toolkit class for working with IItemIterable instances\n+ *\/\n+public class ItemIterableToolkit {\n+\n+\tprivate static class StreamBackedItemIterable implements IItemIterable {\n+\n+\t\tprivate final Supplier<Stream<IItem>> items;\n+\t\tprivate final IType<IItem> type;\n+\n+\t\tStreamBackedItemIterable(Supplier<Stream<IItem>> items, IType<IItem> type) {\n+\t\t\tthis.items = items;\n+\t\t\tthis.type = type;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IType<IItem> getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasItems() {\n+\t\t\treturn items.get().findAny().isPresent();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic long getItemCount() {\n+\t\t\t\/\/ In jdk8 the implementation of count is mapToLong(e -> 1L).sum() which may not be necessary\n+\t\t\tlong exactSizeIfKnown = spliterator().getExactSizeIfKnown();\n+\t\t\treturn exactSizeIfKnown >= 0 ? exactSizeIfKnown : items.get().count();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Iterator<IItem> iterator() {\n+\t\t\treturn Spliterators.iterator(spliterator());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Spliterator<IItem> spliterator() {\n+\t\t\treturn items.get().spliterator();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IItemIterable apply(Predicate<IItem> filter) {\n+\t\t\treturn new StreamBackedItemIterable(() -> items.get().filter(filter::test), getType());\n+\t\t}\n+\t}\n+\n+\tpublic static IItemIterable build(Supplier<Stream<IItem>> items, IType<IItem> type) {\n+\t\treturn new StreamBackedItemIterable(items, type);\n+\t}\n+\n+\tpublic static Stream<IItemIterable> filter(Stream<? extends IItemIterable> items, IItemFilter on) {\n+\t\tFunction<IItemIterable, IItemIterable> streamMapper = itemStream -> {\n+\t\t\tPredicate<IItem> predicate = on.getPredicate(itemStream.getType());\n+\t\t\tif (PredicateToolkit.isTrueGuaranteed(predicate)) {\n+\t\t\t\treturn itemStream;\n+\t\t\t} else if (PredicateToolkit.isFalseGuaranteed(predicate)) {\n+\t\t\t\treturn null;\n+\t\t\t} else {\n+\t\t\t\treturn itemStream.apply(predicate);\n+\t\t\t}\n+\t\t};\n+\t\treturn items.map(streamMapper).filter(Objects::nonNull);\n+\t}\n+\n+\tpublic static <V, C extends IItemConsumer<C>> V aggregate(\n+\t\tIAggregator<V, C> a, Stream<? extends IItemIterable> items) {\n+\t\tFunction<IItemIterable, C> itemsToValue = itemsStream -> itemsStream.stream()\n+\t\t\t\t.collect(valueCollector(a, itemsStream.getType()));\n+\t\tStream<C> consumers = items.filter(is -> a.acceptType(is.getType())).map(itemsToValue);\n+\t\treturn a.getValue(consumers.iterator());\n+\t}\n+\n+\tprivate static <C extends IItemConsumer<C>> Collector<IItem, C, C> valueCollector(\n+\t\tIAggregator<?, C> a, IType<IItem> type) {\n+\t\treturn Collector.of(() -> a.newItemConsumer(type), C::consume, IItemConsumer::merge,\n+\t\t\t\tCollector.Characteristics.UNORDERED);\n+\t}\n+\n+\tpublic static <V> Stream<? extends IItem> sorted(\n+\t\tIItemIterable items, IAttribute<V> onAttribute, Comparator<? super V> valueComparator) {\n+\t\tIMemberAccessor<V, IItem> va = onAttribute.getAccessor(items.getType());\n+\t\treturn items.stream().sorted((i1, i2) -> Objects.compare(va.getMember(i1), va.getMember(i2), valueComparator));\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/ItemIterableToolkit.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -58,0 +58,1 @@\n+\tpublic static final String ITEM_COLLECTION_DESC = \"ITEM_COLLECTION_DESC\";\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -178,0 +178,4 @@\n+\n+# {0} is a number, {1} is a number\n+ITEM_COLLECTION_DESC={0} events of {1} types\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/resources\/org\/openjdk\/jmc\/common\/messages\/internal\/messages.properties","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -113,4 +113,0 @@\n-\t\tpublic String getName() {\n-\t\t\treturn name;\n-\t\t}\n-\n@@ -186,1 +182,0 @@\n-\t\tString shortDescription = null;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/compilation\/CodeCacheRule.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,6 +35,0 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n@@ -43,1 +37,1 @@\n-import java.text.MessageFormat;\n+import java.util.ArrayList;\n@@ -47,0 +41,1 @@\n+import java.util.Map;\n@@ -52,1 +47,0 @@\n-import org.openjdk.jmc.common.unit.UnitLookup;\n@@ -55,0 +49,1 @@\n+import org.openjdk.jmc.common.unit.UnitLookup;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/PasswordsInSystemPropertiesRule.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -111,5 +111,0 @@\n-\t\/**\n-\t * Constant value of the maximum number of stack frames to display for the hottest path.\n-\t *\/\n-\tprivate static final int MAX_STACK_DEPTH = 10;\n-\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/latency\/MethodProfilingRule.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-\t\t\t\t\t\trow[column + j] = new SingleEntryItemCollection(item, input.getTimeRanges())\n+\t\t\t\t\t\trow[column + j] = new SingleEntryItemCollection(item, input.getAvailableTimeRanges())\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/DefaultIItemResultSet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-\t\tpublic Set<IRange<IQuantity>> getTimeRanges() {\n+\t\tpublic Set<IRange<IQuantity>> getAvailableTimeRanges() {\n@@ -232,1 +232,1 @@\n-\tpublic Set<IRange<IQuantity>> getTimeRanges() {\n+\tpublic Set<IRange<IQuantity>> getAvailableTimeRanges() {\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/SingleEntryItemCollection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import org.openjdk.jmc.common.IMCMethod;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/ResultToolkit.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -222,1 +222,1 @@\n-\tpublic Set<IRange<IQuantity>> getTimeRanges() {\n+\tpublic Set<IRange<IQuantity>> getAvailableTimeRanges() {\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/EventCollection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-\t\t\t<version>${junit.version}<\/version>\n+\t\t\t<version>${junit.version}<\/version><!--$NO-MVN-MAN-VER$-->\n@@ -65,1 +65,1 @@\n-\t\t\t\t<version>${maven.jar.version}<\/version>\n+\t\t\t\t<version>${maven.jar.version}<\/version><!--$NO-MVN-MAN-VER$-->\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.test.item;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItem;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.common.test.mock.item.MockAttributes;\n+import org.openjdk.jmc.common.test.mock.item.MockCollections;\n+import org.openjdk.jmc.common.unit.IQuantity;\n+\n+public class StreamTest {\n+\n+\t@Test\n+\tpublic void testIItemIterableStream() {\n+\t\tIItemCollection mockDoubleCollection = MockCollections\n+\t\t\t\t.getNumberCollection(MockCollections.generateNumberArray(99, 100));\n+\t\tList<IItemIterable> iterables = mockDoubleCollection.stream().collect(Collectors.toList());\n+\t\tList<String> ids = mockDoubleCollection.stream().map(iterable -> iterable.getType().getIdentifier())\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\t\/\/ Reference value from excel\n+\t\tAssert.assertEquals(1, iterables.size());\n+\t\tassertEquals(\"mock\/MockNumberItem\", ids.get(0));\n+\t}\n+\n+\t@Test\n+\tpublic void testIItemStream() {\n+\t\tIItemCollection mockDoubleCollection = MockCollections\n+\t\t\t\t.getNumberCollection(MockCollections.generateNumberArray(999, 100));\n+\t\tList<IItem> items = mockDoubleCollection.stream().flatMap((iterable) -> iterable.stream())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t\/\/ Reference value from excel\n+\t\tAssert.assertEquals(999, items.size());\n+\t}\n+\n+\t@Test\n+\tpublic void testValues() {\n+\t\tIItemCollection mockDoubleCollection = MockCollections\n+\t\t\t\t.getNumberCollection(MockCollections.generateNumberArray(99, 100));\n+\t\tList<IQuantity> values = mockDoubleCollection.values(MockAttributes.DOUBLE_VALUE).get()\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tAssert.assertEquals(99, values.size());\n+\t\tvalues.forEach((value) -> Assert.assertTrue(value.doubleValue() >= 0 && value.doubleValue() <= 100));\n+\t}\n+\n+}\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/src\/test\/java\/org\/openjdk\/jmc\/common\/test\/item\/StreamTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -130,1 +130,1 @@\n-\tpublic Set<IRange<IQuantity>> getTimeRanges() {\n+\tpublic Set<IRange<IQuantity>> getAvailableTimeRanges() {\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/src\/test\/java\/org\/openjdk\/jmc\/common\/test\/mock\/item\/MockItemCollection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-\t\t\t<version>${junit.version}<\/version>\n+\t\t\t<version>${junit.version}<\/version><!--$NO-MVN-MAN-VER$-->\n@@ -100,1 +100,1 @@\n-            <version>${maven.jar.version}<\/version>\n+            <version>${maven.jar.version}<\/version><!--$NO-MVN-MAN-VER$-->\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+\t@SuppressWarnings(\"unchecked\")\n@@ -58,2 +59,2 @@\n-\t\t\treturn (IMemberAccessor<M, IItem>) MemberAccessorToolkit\n-\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.MILLISECOND.quantity(duration));\n+\t\t\treturn ((IMemberAccessor<M, IItem>) MemberAccessorToolkit\n+\t\t\t\t\t.<IItem, IQuantity, IQuantity> constant(UnitLookup.MILLISECOND.quantity(duration)));\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/FileTestEvent.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-\tpublic Set<IRange<IQuantity>> getTimeRanges() {\n+\tpublic Set<IRange<IQuantity>> getAvailableTimeRanges() {\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/MockEventCollection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+\t@SuppressWarnings(\"unchecked\")\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/SocketTestEvent.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+@SuppressWarnings(\"restriction\")\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestFileReadWriteRule.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+@SuppressWarnings(\"restriction\")\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestSocketReadWriteRule.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+@SuppressWarnings(\"restriction\")\n@@ -80,1 +81,0 @@\n-\t\t@SuppressWarnings(\"restriction\")\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/VerifyNoneRuleTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                   <version>${junit.version}<\/version>\n+                   <version>${junit.version}<\/version><!--$NO-MVN-MAN-VER$-->\n@@ -88,1 +88,1 @@\n-            <version>${maven.jar.version}<\/version>\n+            <version>${maven.jar.version}<\/version><!--$NO-MVN-MAN-VER$-->\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-                   <version>${junit.version}<\/version>\n+                   <version>${junit.version}<\/version><!--$NO-MVN-MAN-VER$-->\n@@ -81,1 +81,1 @@\n-            <version>${maven.jar.version}<\/version>\n+            <version>${maven.jar.version}<\/version><!--$NO-MVN-MAN-VER$-->\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-import static org.junit.Assert.assertNotNull;\n-\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/StacktraceTreeModelTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-\t\t\t<version>${junit.version}<\/version>\n+\t\t\t<version>${junit.version}<\/version><!--$NO-MVN-MAN-VER$-->\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/pom.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}