{"files":[{"patch":"@@ -55,1 +55,1 @@\n-\t * \n+\t *\n@@ -88,1 +88,1 @@\n-\t * \n+\t *\n@@ -110,1 +110,1 @@\n-\t * \n+\t *\n@@ -198,1 +198,1 @@\n-\t * \n+\t *\n@@ -206,2 +206,1 @@\n-\t\tString version = System.getProperty(\"java.version\");\n-\t\tif (Integer.parseInt(version.substring(0, version.indexOf(\".\"))) < 9) {\n+\t\tif (isPreJava9()) {\n@@ -238,0 +237,9 @@\n+\tprivate static boolean isPreJava9() {\n+\t\ttry {\n+\t\t\tClass.forName(\"java.lang.Module\");\n+\t\t\treturn false;\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\n@@ -240,1 +248,1 @@\n-\t * \n+\t *\n@@ -253,1 +261,1 @@\n-\t * \n+\t *\n@@ -264,1 +272,1 @@\n-\t * \n+\t *\n@@ -279,1 +287,1 @@\n-\t * \n+\t *\n@@ -299,1 +307,1 @@\n-\t * \n+\t *\n@@ -319,1 +327,1 @@\n-\t * \n+\t *\n@@ -333,1 +341,1 @@\n-\t * \n+\t *\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/AccessUtils.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.test;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Suite;\n-import org.junit.runners.Suite.SuiteClasses;\n-import org.openjdk.jmc.agent.converters.test.TestConverterTransforms;\n-\n-@RunWith(Suite.class)\n-@SuiteClasses({TestDefaultTransformRegistry.class, TestUtils.class, TestJFRTransformer.class,\n-\t\tTestConverterTransforms.class, TestProbeDefinitionValidation.class, TestCompressedFrameTransformation.class,\n-\t\tTestEmitOnlyOnException.class})\n-\n-public class AllTests {\n-}\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/AllTests.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -37,1 +37,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -40,0 +39,1 @@\n+import static org.junit.Assert.assertTrue;\n@@ -42,0 +42,1 @@\n+import java.text.MessageFormat;\n@@ -56,1 +57,2 @@\n-\tprivate static final String EVENT_NAME = \"JFR Hello World Event 6 %TEST_NAME%\";\n+\tprivate static final String CORRECT_EVENT_NAME = \"JFR Hello World Event 6 %TEST_NAME%\";\n+\tprivate static final String INCORRECT_EVENT_NAME = \"JFR Hello World Event 6 Incorrect %TEST_NAME%\";\n@@ -65,4 +67,4 @@\n-\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\" + \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\" + \"<path>\"\n-\t\t\t+ EVENT_PATH + \"<\/path>\" + \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n-\t\t\t+ \"<method>\" + \"<name>\" + METHOD_NAME + \"<\/name>\" + \"<descriptor>\" + CORRECT_METHOD_DESCRIPTOR\n-\t\t\t+ \"<\/descriptor>\" + \"<\/method>\" + \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\n+\t\t\t+ \"<name>{0}<\/name>\" + \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\" + \"<path>\" + EVENT_PATH\n+\t\t\t+ \"<\/path>\" + \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\" + \"<method>\"\n+\t\t\t+ \"<name>\" + METHOD_NAME + \"<\/name>\" + \"<descriptor>{1}<\/descriptor>\" + \"<\/method>\"\n+\t\t\t+ \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\n@@ -72,2 +74,3 @@\n-\t\tTransformRegistry registry = DefaultTransformRegistry\n-\t\t\t\t.from(new ByteArrayInputStream(XML_DESCRIPTION.getBytes()));\n+\t\tString xmlDescription = MessageFormat.format(XML_DESCRIPTION, CORRECT_EVENT_NAME, CORRECT_METHOD_DESCRIPTOR);\n+\n+\t\tTransformRegistry registry = DefaultTransformRegistry.from(new ByteArrayInputStream(xmlDescription.getBytes()));\n@@ -89,2 +92,4 @@\n-\t\tTransformRegistry registry = DefaultTransformRegistry.from(new ByteArrayInputStream(\n-\t\t\t\tXML_DESCRIPTION.replace(CORRECT_METHOD_DESCRIPTOR, INCORRECT_METHOD_DESCRIPTOR).getBytes()));\n+\t\tString xmlDescription = MessageFormat.format(XML_DESCRIPTION, INCORRECT_EVENT_NAME,\n+\t\t\t\tINCORRECT_METHOD_DESCRIPTOR);\n+\n+\t\tTransformRegistry registry = DefaultTransformRegistry.from(new ByteArrayInputStream(xmlDescription.getBytes()));\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestIncorrectMethodDescriptor.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}