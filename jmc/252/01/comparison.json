{"files":[{"patch":"@@ -35,1 +35,17 @@\n-import com.sun.org.apache.xalan.internal.xslt.Process;\n+import static java.nio.file.Files.exists;\n+import static java.nio.file.Files.newInputStream;\n+import static java.nio.file.Files.newOutputStream;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.Deque;\n+\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n@@ -43,0 +59,1 @@\n+\n@@ -44,1 +61,60 @@\n-\t\tProcess._main(args);\n+\t\tfinal Deque<String> deque = new ArrayDeque<>(Arrays.asList(args));\n+\t\tPath inputFile = null;\n+\t\tPath outputFile = null;\n+\t\tPath sylesheetFile = null;\n+\t\twhile (!deque.isEmpty()) {\n+\t\t\tswitch (deque.poll()) {\n+\t\t\tcase \"-IN\":\n+\t\t\t\tinputFile = checkedToPath(deque.poll(), \"input file\", true);\n+\t\t\t\tbreak;\n+\t\t\tcase \"-OUT\":\n+\t\t\t\toutputFile = checkedToPath(deque.poll(), \"output file\", false);\n+\t\t\t\tbreak;\n+\t\t\tcase \"-XSL\":\n+\t\t\t\tsylesheetFile = checkedToPath(deque.poll(), \"stylesheet file\", true);\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\tif (inputFile != null && outputFile != null && sylesheetFile != null) {\n+\t\t\ttry {\n+\t\t\t\ttransform(inputFile, outputFile, sylesheetFile);\n+\t\t\t\tSystem.exit(0);\n+\t\t\t} catch (IOException | TransformerException e) {\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tSystem.exit(1);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tusage();\n+\t\t\tSystem.exit(1);\n+\t\t}\n+\t}\n+\n+\tprivate static void usage() {\n+\t\tSystem.out.println(\"Usage: Transform -IN <input file> -XSL <stylesheet file> -OUT <output file>\");\n+\t}\n+\n+\tprivate static Path checkedToPath(String arg, String fileDescription, boolean isInputFile) {\n+\t\tif (arg == null) {\n+\t\t\tSystem.err.format(\"%s not given\", fileDescription).println();\n+\t\t} else {\n+\t\t\tPath file = Paths.get(arg);\n+\t\t\tif (isInputFile && exists(file)) {\n+\t\t\t\treturn file;\n+\t\t\t} else {\n+\t\t\t\tSystem.err.format(\"%s '%s' not found\", fileDescription, file).println();\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate static void transform(Path inputFile, Path outputFile, Path sylesheetFile)\n+\t\t\tthrows IOException, TransformerException {\n+\t\tTransformerFactory transformerFactory = TransformerFactory.newInstance();\n+\t\ttry (InputStream xslIn = newInputStream(sylesheetFile);\n+\t\t\t\tInputStream in = newInputStream(inputFile);\n+\t\t\t\tOutputStream out = newOutputStream(outputFile)) {\n+\t\t\ttransformerFactory.newTransformer(new StreamSource(xslIn)).transform(new StreamSource(in),\n+\t\t\t\t\tnew StreamResult(out));\n+\t\t}\n","filename":"releng\/tools\/org.openjdk.jmc.util.releasenotes\/src\/org\/openjdk\/jmc\/utils\/releasenotes\/Transform.java","additions":78,"deletions":2,"binary":false,"changes":80,"status":"modified"}]}