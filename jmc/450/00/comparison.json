{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,0 +202,1 @@\n+\t\tsuper(powerOf2 >= 0, powerOf2 == 0, 0, Math.scalb(1.0, powerOf2));\n@@ -205,5 +206,0 @@\n-\t@Override\n-\tpublic double getMultiplier() {\n-\t\treturn Math.scalb(1.0, powerOf2);\n-\t}\n-\n@@ -262,10 +258,0 @@\n-\t@Override\n-\tpublic boolean isUnity() {\n-\t\treturn (powerOf2 == 0);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isInteger() {\n-\t\treturn (powerOf2 >= 0);\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/BinaryScaleFactor.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,0 +244,1 @@\n+\t\tsuper(powerOf10 >= 0, powerOf10 == 0, 0, Math.pow(10.0, powerOf10));\n@@ -247,5 +248,0 @@\n-\t@Override\n-\tpublic double getMultiplier() {\n-\t\treturn Math.pow(10.0, powerOf10);\n-\t}\n-\n@@ -310,10 +306,0 @@\n-\t@Override\n-\tpublic boolean isUnity() {\n-\t\treturn (powerOf10 == 0);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isInteger() {\n-\t\treturn (powerOf10 >= 0);\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/DecimalScaleFactor.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/IScalarAffineTransform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+\t\tsuper(false, false, factor);\n@@ -118,12 +119,0 @@\n-\t@Override\n-\tpublic boolean isUnity() {\n-\t\t\/\/ NOTE: Since we're imprecise, we cannot return true.\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isInteger() {\n-\t\t\/\/ NOTE: Since we're imprecise, we cannot return true (yet).\n-\t\treturn false;\n-\t}\n-\n@@ -145,5 +134,0 @@\n-\n-\t@Override\n-\tpublic double getMultiplier() {\n-\t\treturn numberFactor;\n-\t}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/ImpreciseScaleFactor.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,1 @@\n-public class LongPostOffsetTransform implements IScalarAffineTransform {\n-\tprivate final double multiplier;\n+public class LongPostOffsetTransform extends ScalarAffineTransform {\n@@ -44,1 +43,1 @@\n-\t\tthis.multiplier = multiplier;\n+\t\tsuper(false, false, offset, multiplier);\n@@ -48,10 +47,0 @@\n-\t@Override\n-\tpublic double getOffset() {\n-\t\treturn offset;\n-\t}\n-\n-\t@Override\n-\tpublic double getMultiplier() {\n-\t\treturn multiplier;\n-\t}\n-\n@@ -138,10 +127,0 @@\n-\t@Override\n-\tpublic boolean isUnity() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isInteger() {\n-\t\treturn false;\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/LongPostOffsetTransform.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-public class LongPreOffsetTransform implements IScalarAffineTransform {\n+public class LongPreOffsetTransform extends ScalarAffineTransform {\n@@ -44,1 +44,0 @@\n-\tprivate final double multiplier;\n@@ -47,0 +46,1 @@\n+\t\tsuper(false, false, preOffset * multiplier, multiplier);\n@@ -48,11 +48,0 @@\n-\t\tthis.multiplier = multiplier;\n-\t}\n-\n-\t@Override\n-\tpublic double getOffset() {\n-\t\treturn preOffset * multiplier;\n-\t}\n-\n-\t@Override\n-\tpublic double getMultiplier() {\n-\t\treturn multiplier;\n@@ -143,10 +132,0 @@\n-\t@Override\n-\tpublic boolean isUnity() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isInteger() {\n-\t\treturn false;\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/LongPreOffsetTransform.java","additions":3,"deletions":24,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+\t\tsuper(true, factor == 1L, factor);\n@@ -115,10 +116,0 @@\n-\t@Override\n-\tpublic boolean isUnity() {\n-\t\treturn (longMultiplier == 1L);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isInteger() {\n-\t\treturn true;\n-\t}\n-\n@@ -140,5 +131,0 @@\n-\n-\t@Override\n-\tpublic double getMultiplier() {\n-\t\treturn longMultiplier;\n-\t}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/LongScaleFactor.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.unit;\n+\n+abstract class ScalarAffineTransform implements IScalarAffineTransform {\n+\n+\tprotected final boolean isInteger;\n+\tprotected final boolean isUnity;\n+\tprotected final double offset;\n+\tprotected final double multiplier;\n+\n+\tScalarAffineTransform(boolean isInteger, boolean isUnity, double offset, double multiplier) {\n+\t\tthis.isInteger = isInteger;\n+\t\tthis.isUnity = isUnity;\n+\t\tthis.offset = offset;\n+\t\tthis.multiplier = multiplier;\n+\t}\n+\n+\t@Override\n+\tpublic final double getOffset() {\n+\t\treturn offset;\n+\t}\n+\n+\t@Override\n+\tpublic final double getMultiplier() {\n+\t\treturn multiplier;\n+\t}\n+\n+\t@Override\n+\tpublic final boolean isUnity() {\n+\t\treturn isUnity;\n+\t}\n+\n+\t@Override\n+\tpublic final boolean isInteger() {\n+\t\treturn isInteger;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/ScalarAffineTransform.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,10 @@\n-public abstract class ScaleFactor implements IScalarAffineTransform, Comparable<ScaleFactor> {\n+public abstract class ScaleFactor extends ScalarAffineTransform implements Comparable<ScaleFactor> {\n+\n+\tprotected ScaleFactor(boolean isInteger, boolean isUnity, double offset, double multiplier) {\n+\t\tsuper(isInteger, isUnity, offset, multiplier);\n+\t}\n+\n+\tprotected ScaleFactor(boolean isInteger, boolean isUnity, double multiplier) {\n+\t\tthis(isInteger, isUnity, 0, multiplier);\n+\t}\n+\n@@ -98,5 +107,0 @@\n-\t@Override\n-\tpublic final double getOffset() {\n-\t\treturn 0;\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/ScaleFactor.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-public class SimpleAffineTransform implements IScalarAffineTransform {\n+public class SimpleAffineTransform extends ScalarAffineTransform {\n@@ -37,2 +37,0 @@\n-\tprivate final double multiplier;\n-\tprivate final double offset;\n@@ -62,12 +60,1 @@\n-\t\tthis.multiplier = multiplier;\n-\t\tthis.offset = offset;\n-\t}\n-\n-\t@Override\n-\tpublic double getOffset() {\n-\t\treturn offset;\n-\t}\n-\n-\t@Override\n-\tpublic double getMultiplier() {\n-\t\treturn multiplier;\n+\t\tsuper(false, false, offset, multiplier);\n@@ -151,10 +138,0 @@\n-\t@Override\n-\tpublic boolean isUnity() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isInteger() {\n-\t\treturn false;\n-\t}\n-\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/SimpleAffineTransform.java","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"}]}