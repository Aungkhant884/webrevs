{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,3 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n@@ -69,1 +72,5 @@\n-\t\tcalculateData(items);\n+\t\ttry {\n+\t\t\tcalculateData(items);\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n@@ -73,1 +80,1 @@\n-\tprivate void calculateData(IItemCollection input) {\n+\tprivate void calculateData(IItemCollection input) throws InterruptedException {\n@@ -75,0 +82,1 @@\n+\t\tfinal IItemCollection newInput = input;\n@@ -99,8 +107,22 @@\n-\t\t\t\tfor (Object o : aggregate) {\n-\t\t\t\t\tIItemCollection rowCollection = input.apply(ItemFilters.equals((IAttribute) query.getGroupBy(), o));\n-\t\t\t\t\tObject[] row = newRow();\n-\t\t\t\t\tint column = 0;\n-\t\t\t\t\tfor (; column < attributes.size(); column++) {\n-\t\t\t\t\t\t\/\/ Optimization - it is too expensive to do aggregation for these. You simply\n-\t\t\t\t\t\t\/\/ get first non-null matching attribute - we're only using this for the group by today.\n-\t\t\t\t\t\trow[column] = getFirstNonNull(rowCollection, attributes.get(column));\n+\t\t\t\tint SUM_NUM_THREADS = Runtime.getRuntime().availableProcessors();\n+\t\t\t\tExecutorService exec = Executors.newFixedThreadPool(SUM_NUM_THREADS);\n+\t\t\t\ttry {\n+\t\t\t\t\tfor (final Object o : aggregate) {\n+\t\t\t\t\t\texec.submit(new Runnable() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic void run() {\n+\t\t\t\t\t\t\t\tIItemCollection rowCollection = newInput\n+\t\t\t\t\t\t\t\t\t\t.apply(ItemFilters.equals((IAttribute) query.getGroupBy(), o));\n+\t\t\t\t\t\t\t\tObject[] row = newRow();\n+\t\t\t\t\t\t\t\tint column = 0;\n+\t\t\t\t\t\t\t\tfor (; column < attributes.size(); column++) {\n+\t\t\t\t\t\t\t\t\t\/\/ Optimization - it is too expensive to do aggregation for these. You simply\n+\t\t\t\t\t\t\t\t\t\/\/ get first non-null matching attribute - we're only using this for the group by today.\n+\t\t\t\t\t\t\t\t\trow[column] = getFirstNonNull(rowCollection, attributes.get(column));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tfor (int j = 0; j < aggregators.size(); j++) {\n+\t\t\t\t\t\t\t\t\trow[column + j] = rowCollection.getAggregate(aggregators.get(j));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\tdata.add(row);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n@@ -108,4 +130,2 @@\n-\t\t\t\t\tfor (int j = 0; j < aggregators.size(); j++) {\n-\t\t\t\t\t\trow[column + j] = rowCollection.getAggregate(aggregators.get(j));\n-\t\t\t\t\t}\n-\t\t\t\t\tdata.add(row);\n+\t\t\t\t} finally {\n+\t\t\t\t\texec.shutdown();\n@@ -113,0 +133,2 @@\n+\t\t\t\t\/\/ Higher timeout value added for worst case\n+\t\t\t\texec.awaitTermination(1, TimeUnit.HOURS);\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/DefaultIItemResultSet.java","additions":37,"deletions":15,"binary":false,"changes":52,"status":"modified"}]}