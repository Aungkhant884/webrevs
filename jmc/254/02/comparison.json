{"files":[{"patch":"@@ -115,0 +115,7 @@\n+         version=\"0.0.0\"\n+         unpack=\"false\"\/>\n+         \n+   <plugin\n+         id=\"org.openjdk.jmc.flightrecorder.serializers\"\n+         download-size=\"0\"\n+         install-size=\"0\"\n","filename":"application\/org.openjdk.jmc.feature.flightrecorder\/feature.xml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+ org.openjdk.jmc.flightrecorder.serializers,\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/META-INF\/MANIFEST.MF","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,215 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n- *\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- *\n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.flameview;\n-\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_MORE;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_EVENT;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_EVENTS;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_TYPE;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_ROOT_NODE_TYPES;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER;\n-import static org.openjdk.jmc.flightrecorder.flameview.Messages.FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN;\n-import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getFlameviewMessage;\n-import static org.openjdk.jmc.flightrecorder.flameview.MessagesUtils.getStacktraceMessage;\n-import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;\n-import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.openjdk.jmc.common.IMCFrame;\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.item.IItemIterable;\n-import org.openjdk.jmc.common.util.FormatToolkit;\n-import org.openjdk.jmc.flightrecorder.stacktrace.tree.AggregatableFrame;\n-import org.openjdk.jmc.flightrecorder.stacktrace.tree.Node;\n-import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n-\n-public class FlameGraphJsonMarshaller {\n-\n-\tprivate static final String UNCLASSIFIABLE_FRAME = getStacktraceMessage(STACKTRACE_UNCLASSIFIABLE_FRAME);\n-\tprivate static final String UNCLASSIFIABLE_FRAME_DESC = getStacktraceMessage(STACKTRACE_UNCLASSIFIABLE_FRAME_DESC);\n-\tprivate final static int MAX_TYPES_IN_ROOT_TITLE = 2;\n-\tprivate final static int MAX_TYPES_IN_ROOT_DESCRIPTION = 10;\n-\n-\tpublic static String toJson(StacktraceTreeModel model) {\n-\t\treturn toJson(model, model.getRoot());\n-\t}\n-\n-\tprivate static String toJson(StacktraceTreeModel model, Node node) {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tsb.append(\"{\");\n-\t\tif (node.isRoot()) {\n-\t\t\tsb.append(createRootNodeJson(model.getItems()));\n-\t\t} else {\n-\t\t\tsb.append(createNodeJsonProps(node.getFrame(), node.getCumulativeWeight()));\n-\t\t}\n-\n-\t\tsb.append(\", \").append(addQuotes(\"c\")).append(\": [ \");\n-\t\tboolean first = true;\n-\t\tfor (Node child : node.getChildren()) {\n-\t\t\tif (!first) {\n-\t\t\t\tsb.append(\",\");\n-\t\t\t}\n-\t\t\tsb.append(toJson(model, child));\n-\t\t\tfirst = false;\n-\t\t}\n-\t\tsb.append(\"]\").append(\"}\");\n-\t\treturn sb.toString();\n-\t}\n-\n-\tprivate static String createNodeJsonProps(AggregatableFrame frame, double value) {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tif (frame.getType().equals(IMCFrame.Type.UNKNOWN) && frame.getHumanReadableShortString().equals(\".()\")) {\n-\t\t\t\/\/ TODO: find recording with truncated stacks and add unit test for this case\n-\t\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(UNCLASSIFIABLE_FRAME));\n-\t\t\tsb.append(\",\");\n-\t\t\tsb.append(addQuotes(\"d\")).append(\": \").append(addQuotes(UNCLASSIFIABLE_FRAME_DESC));\n-\t\t\tsb.append(\",\");\n-\t\t\tsb.append(addQuotes(\"p\")).append(\": \").append(addQuotes(\"\"));\n-\t\t\tsb.append(\",\");\n-\t\t} else {\n-\t\t\tString frameName = frame.getHumanReadableShortString();\n-\t\t\tString packageName = FormatToolkit.getPackage(frame.getMethod().getType().getPackage());\n-\t\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(frameName));\n-\t\t\tsb.append(\",\");\n-\t\t\tsb.append(addQuotes(\"p\")).append(\": \").append(addQuotes(packageName));\n-\t\t\tsb.append(\",\");\n-\t\t}\n-\t\tsb.append(addQuotes(\"v\")).append(\": \").append(String.valueOf((int) value));\n-\t\treturn sb.toString();\n-\t}\n-\n-\tprivate static String createJsonProps(String frameName, String description, double value) {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(frameName));\n-\t\tsb.append(\",\");\n-\t\tsb.append(addQuotes(\"p\")).append(\": \").append(addQuotes(\"\"));\n-\t\tsb.append(\",\");\n-\t\tsb.append(addQuotes(\"d\")).append(\": \").append(addQuotes(description));\n-\t\tsb.append(\",\");\n-\t\tsb.append(addQuotes(\"v\")).append(\": \").append(String.valueOf((int) value));\n-\t\treturn sb.toString();\n-\t}\n-\n-\tprivate static String addQuotes(String str) {\n-\t\treturn String.format(\"\\\"%s\\\"\", str);\n-\t}\n-\n-\tpublic static Map<String, Long> countEventsByType(IItemCollection items) {\n-\t\tfinal HashMap<String, Long> eventCountByType = new HashMap<>();\n-\t\tfor (IItemIterable eventIterable : items) {\n-\t\t\tif (eventIterable.getItemCount() == 0) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tString typeName = eventIterable.getType().getName();\n-\t\t\tlong newValue = eventCountByType.getOrDefault(typeName, 0L) + eventIterable.getItemCount();\n-\t\t\teventCountByType.put(typeName, newValue);\n-\t\t}\n-\t\t\/\/ sort the map in ascending order of values\n-\t\treturn eventCountByType.entrySet().stream().sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))\n-\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n-\t}\n-\n-\tprivate static String createRootNodeJson(IItemCollection events) {\n-\t\tMap<String, Long> eventCountsByType = countEventsByType(events);\n-\t\tString rootTitle = createRootNodeTitle(eventCountsByType);\n-\t\tString rootDescription = createRootNodeDescription(eventCountsByType);\n-\t\treturn createJsonProps(rootTitle, rootDescription,\n-\t\t\t\teventCountsByType.values().stream().mapToLong(Long::longValue).sum());\n-\t}\n-\n-\tprivate static String createRootNodeTitle(Map<String, Long> eventCountsByType) {\n-\t\tint eventsInTitle = Math.min(eventCountsByType.size(), MAX_TYPES_IN_ROOT_TITLE);\n-\t\tlong totalEvents = eventCountsByType.values().stream().mapToLong(Long::longValue).sum();\n-\t\tif (totalEvents == 0) {\n-\t\t\treturn getFlameviewMessage(FLAMEVIEW_SELECT_STACKTRACE_NOT_AVAILABLE);\n-\t\t}\n-\t\tStringBuilder title = new StringBuilder(createRootNodeTitlePrefix(totalEvents, eventCountsByType.size()));\n-\t\tint i = 0;\n-\t\tfor (Map.Entry<String, Long> entry : eventCountsByType.entrySet()) {\n-\t\t\tString eventType = getFlameviewMessage(FLAMEVIEW_SELECT_TITLE_EVENT_PATTERN, entry.getKey(),\n-\t\t\t\t\tString.valueOf(entry.getValue()));\n-\t\t\ttitle.append(eventType);\n-\t\t\tif (i < eventsInTitle) {\n-\t\t\t\ttitle.append(getFlameviewMessage(FLAMEVIEW_SELECT_TITLE_EVENT_MORE_DELIMITER));\n-\t\t\t} else {\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\ti++;\n-\t\t}\n-\t\tif (eventCountsByType.size() > MAX_TYPES_IN_ROOT_TITLE) {\n-\t\t\ttitle.append(getFlameviewMessage(FLAMEVIEW_SELECT_HTML_MORE)); \/\/ $NON-NLS-1$\n-\t\t}\n-\t\treturn title.toString();\n-\t}\n-\n-\tprivate static String createRootNodeTitlePrefix(long events, int types) {\n-\t\tString eventText = getFlameviewMessage(\n-\t\t\t\tevents > 1 ? FLAMEVIEW_SELECT_ROOT_NODE_EVENTS : FLAMEVIEW_SELECT_ROOT_NODE_EVENT);\n-\t\tString typeText = getFlameviewMessage(\n-\t\t\t\ttypes > 1 ? FLAMEVIEW_SELECT_ROOT_NODE_TYPES : FLAMEVIEW_SELECT_ROOT_NODE_TYPE);\n-\t\treturn getFlameviewMessage(FLAMEVIEW_SELECT_ROOT_NODE, String.valueOf(events), eventText, String.valueOf(types),\n-\t\t\t\ttypeText);\n-\t}\n-\n-\tprivate static String createRootNodeDescription(Map<String, Long> eventCountsByType) {\n-\t\tStringBuilder description = new StringBuilder();\n-\t\tint i = 0;\n-\t\tlong remainingEvents = 0;\n-\t\tfor (Map.Entry<String, Long> entry : eventCountsByType.entrySet()) {\n-\t\t\tif (i < MAX_TYPES_IN_ROOT_DESCRIPTION) {\n-\t\t\t\tdescription.append(getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_PATTERN,\n-\t\t\t\t\t\tString.valueOf(entry.getValue()), entry.getKey()));\n-\t\t\t} else {\n-\t\t\t\tremainingEvents = Long.sum(remainingEvents, entry.getValue());\n-\t\t\t}\n-\t\t\ti++;\n-\t\t}\n-\n-\t\tif (remainingEvents > 0) {\n-\t\t\tint remainingTypes = eventCountsByType.size() - MAX_TYPES_IN_ROOT_DESCRIPTION;\n-\t\t\tdescription.append(getFlameviewMessage(FLAMEVIEW_SELECT_HTML_TABLE_EVENT_REST_PATTERN,\n-\t\t\t\t\tString.valueOf(remainingEvents), String.valueOf(remainingTypes)));\n-\t\t}\n-\t\treturn description.toString();\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/FlameGraphJsonMarshaller.java","additions":0,"deletions":215,"binary":false,"changes":215,"status":"deleted"},{"patch":"@@ -100,1 +100,0 @@\n-import org.openjdk.jmc.flightrecorder.flameview.FlameGraphJsonMarshaller;\n@@ -102,0 +101,1 @@\n+import org.openjdk.jmc.flightrecorder.serializers.json.FlameGraphJsonSerializer;\n@@ -305,1 +305,1 @@\n-\t\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(treeModel);\n+\t\t\tString flameGraphJson = FlameGraphJsonSerializer.toJson(treeModel);\n","filename":"application\/org.openjdk.jmc.flightrecorder.flameview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/views\/FlameGraphView.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,2 +6,3 @@\n-Require-Bundle: org.openjdk.jmc.flightrecorder;bundle-version=\"8.1.0\",\n- org.openjdk.jmc.flightrecorder.ui;bundle-version=\"8.1.0\",\n+Require-Bundle: org.openjdk.jmc.flightrecorder,\n+ org.openjdk.jmc.flightrecorder.ui,\n+ org.openjdk.jmc.flightrecorder.serializers,\n","filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/META-INF\/MANIFEST.MF","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-import org.openjdk.jmc.flightrecorder.ext.graphview.graph.DotGenerator;\n+import org.openjdk.jmc.flightrecorder.serializers.dot.DotSerializer;\n@@ -330,1 +330,1 @@\n-\t\treturn DotGenerator.toDot(model, maxNodesRendered, DotGenerator.getDefaultConfiguration());\n+\t\treturn DotSerializer.toDot(model, maxNodesRendered, DotSerializer.getDefaultConfiguration());\n","filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/graphview\/views\/GraphView.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -169,0 +169,5 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>flightrecorder.serializers<\/artifactId>\n+\t\t\t<version>${revision}${changelist}<\/version>\n+\t\t<\/dependency>\n","filename":"application\/pom.xml","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<projectDescription>\n-\t<name>org.openjdk.jmc.flightrecorder.flameview.test<\/name>\n-\t<comment><\/comment>\n-\t<projects>\n-\t<\/projects>\n-\t<buildSpec>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.jdt.core.javabuilder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.pde.ManifestBuilder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.pde.SchemaBuilder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.m2e.core.maven2Builder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t<\/buildSpec>\n-\t<natures>\n-\t\t<nature>org.eclipse.m2e.core.maven2Nature<\/nature>\n-\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n-\t\t<nature>org.eclipse.jdt.core.javanature<\/nature>\n-\t<\/natures>\n-<\/projectDescription>\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/.project","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,23 +0,0 @@\n-Manifest-Version: 1.0\n-Bundle-Version: 8.1.0.qualifier\n-Bundle-Name: Flameview Tests\n-Bundle-ManifestVersion: 2\n-Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.flameview.test;singleton:=true\n-Bundle-Vendor: Oracle Corporation\n-Require-Bundle: org.junit,\n- org.openjdk.jmc.flightrecorder,\n- org.openjdk.jmc.flightrecorder.flameview,\n- org.openjdk.jmc.common.test,\n- org.openjdk.jmc.flightrecorder.test\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n-Bundle-ActivationPolicy: lazy\n-Automatic-Module-Name: org.openjdk.jmc.flightrecorder.flameview.test\n-Import-Package: org.openjdk.jmc.common,\n- org.openjdk.jmc.common.item,\n- org.openjdk.jmc.common.unit,\n- org.openjdk.jmc.common.util,\n- org.openjdk.jmc.flightrecorder,\n- org.openjdk.jmc.flightrecorder.jdk,\n- org.openjdk.jmc.flightrecorder.stacktrace,\n- org.openjdk.jmc.flightrecorder.test.util\n- \n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/META-INF\/MANIFEST.MF","additions":0,"deletions":23,"binary":false,"changes":23,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-#\n-#  Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2020, Datadog, Inc. All rights reserved.\n-#\n-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-#  The contents of this file are subject to the terms of either the Universal Permissive License \n-#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-#   \n-#  or the following license:\n-#   \n-#  Redistribution and use in source and binary forms, with or without modification, are permitted\n-#  provided that the following conditions are met:\n-#   \n-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-#  and the following disclaimer.\n-#   \n-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n-#  the distribution.\n-#   \n-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-#  endorse or promote products derived from this software without specific prior written permission.\n-#\n-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-#\n-source.. = src\/test\/java\/,\\\n-           src\/test\/resources\/   \n-output.. = target\/test-classes\/\n-bin.includes = META-INF\/,\\\n-               .\n-pde.match.rule.bundle=compatible\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/build.properties","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-   Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-   Copyright (c) 2020, Datadog, Inc. All rights reserved.\n-   \n-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-   \n-   The contents of this file are subject to the terms of either the Universal Permissive License \n-   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-   \n-   or the following license:\n-   \n-   Redistribution and use in source and binary forms, with or without modification, are permitted\n-   provided that the following conditions are met:\n-   \n-   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-   and the following disclaimer.\n-   \n-   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-   conditions and the following disclaimer in the documentation and\/or other materials provided with\n-   the distribution.\n-   \n-   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-   endorse or promote products derived from this software without specific prior written permission.\n-   \n-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--->\n-<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n-\t<modelVersion>4.0.0<\/modelVersion>\n-\t<parent>\n-\t\t<groupId>org.openjdk.jmc<\/groupId>\n-\t\t<artifactId>missioncontrol.application.tests<\/artifactId>\n-\t\t<version>${revision}${changelist}<\/version>\n-\t<\/parent>\n-\t<artifactId>org.openjdk.jmc.flightrecorder.flameview.test<\/artifactId>\n-\t<packaging>eclipse-test-plugin<\/packaging>\n-\n-\t<properties>\n-\t\t<spotless.config.path>${basedir}\/..\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n-\t<\/properties>\n-<\/project>\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/pom.xml","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,117 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n- *\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- *\n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.flameview.test;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.test.io.IOResourceSet;\n-import org.openjdk.jmc.common.util.StringToolkit;\n-import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n-import org.openjdk.jmc.flightrecorder.flameview.FlameGraphJsonMarshaller;\n-import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n-import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n-import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n-import org.openjdk.jmc.flightrecorder.test.util.RecordingToolkit;\n-import org.openjdk.jmc.flightrecorder.test.util.StacktraceTestToolkit;\n-\n-public class FlameGraphJsonMarshallerTest {\n-\n-\tprivate static final boolean INVERTED_STACKS = true;\n-\tprivate static final boolean REGULAR_STACKS = false;\n-\tprivate static final FrameSeparator METHOD_SEPARATOR = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD,\n-\t\t\tfalse);\n-\n-\tprivate static IItemCollection testRecording;\n-\n-\t@BeforeClass\n-\tpublic static void beforeAll() throws IOException, CouldNotLoadRecordingException {\n-\t\tIOResourceSet[] testResources = StacktraceTestToolkit.getTestResources();\n-\t\tIOResourceSet resourceSet = testResources[0];\n-\t\ttestRecording = RecordingToolkit.getFlightRecording(resourceSet);\n-\t}\n-\n-\t@Test\n-\tpublic void testRenderedJsonWithAttribute() throws Exception {\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, REGULAR_STACKS,\n-\t\t\t\tJdkAttributes.ALLOCATION_SIZE);\n-\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n-\n-\t\tString expectedJson = readResource(\"\/flamegraph-attribute.json\");\n-\t\tassertEquals(expectedJson, flameGraphJson);\n-\t}\n-\n-\t@Test\n-\tpublic void testRenderedJsonWithAttributeInvertedStacks() throws Exception {\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, INVERTED_STACKS,\n-\t\t\t\tJdkAttributes.ALLOCATION_SIZE);\n-\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n-\n-\t\tString expectedJson = readResource(\"\/flamegraph-attribute-inverted.json\");\n-\t\tassertEquals(expectedJson, flameGraphJson);\n-\t}\n-\n-\t@Test\n-\tpublic void testRenderedJsonWithCounts() throws Exception {\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording);\n-\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n-\n-\t\tString expectedJson = readResource(\"\/flamegraph-counts.json\");\n-\t\tassertEquals(expectedJson, flameGraphJson);\n-\t}\n-\n-\t@Test\n-\tpublic void testRenderedJsonWithCountsInvertedStacks() throws Exception {\n-\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, INVERTED_STACKS);\n-\t\tString flameGraphJson = FlameGraphJsonMarshaller.toJson(model);\n-\n-\t\tString expectedJson = readResource(\"\/flamegraph-counts-inverted.json\");\n-\t\tassertEquals(expectedJson, flameGraphJson);\n-\t}\n-\n-\tprivate String readResource(String resourcePath) throws IOException {\n-\t\ttry (InputStream is = FlameGraphJsonMarshallerTest.class.getResourceAsStream(resourcePath)) {\n-\t\t\tif (is == null) {\n-\t\t\t\tthrow new IllegalArgumentException(resourcePath + \" not found\");\n-\t\t\t}\n-\t\t\treturn StringToolkit.readString(is);\n-\t\t}\n-\t}\n-\n-}\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/flameview\/test\/FlameGraphJsonMarshallerTest.java","additions":0,"deletions":117,"binary":false,"changes":117,"status":"deleted"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n-\t\t<module>org.openjdk.jmc.flightrecorder.flameview.test<\/module>\n","filename":"application\/tests\/pom.xml","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+\n@@ -13,0 +14,1 @@\n+datadog\n@@ -30,0 +32,1 @@\n+jfr\n@@ -51,0 +54,1 @@\n+serializers\n@@ -68,0 +72,1 @@\n+xml\n@@ -73,2 +78,0 @@\n-datadog\n-xml\n","filename":"configuration\/ide\/eclipse\/dictionary\/dictionary.txt","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" output=\"target\/classes\" path=\"src\/main\/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry excluding=\"**\" kind=\"src\" output=\"target\/classes\" path=\"src\/main\/resources\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\"\/>\n+\t<classpathentry kind=\"src\" output=\"target\/test-classes\" path=\"src\/test\/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"src\" output=\"target\/classes\" path=\"${rootDir}\/license\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"output\" path=\"target\/classes\"\/>\n+<\/classpath>\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/.classpath","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Bundle-Name: Common Plug-in\n+Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.serializers;singleton:=true\n+Bundle-Version: 8.1.0.qualifier\n+Bundle-Vendor: Oracle Corporation\n+Export-Package: org.openjdk.jmc.flightrecorder.serializers,\n+ org.openjdk.jmc.flightrecorder.serializers.json,\n+ org.openjdk.jmc.flightrecorder.serializers.dot\n+Automatic-Module-Name: org.openjdk.jmc.flightrecorder.serializers\n+Require-Bundle: org.lz4.lz4-java, org.openjdk.jmc.flightrecorder\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/META-INF\/MANIFEST.MF","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -40,1 +40,0 @@\n-jre.compilation.profile = JavaSE-1.8\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/build.properties","additions":0,"deletions":1,"binary":false,"changes":1,"previous_filename":"core\/org.openjdk.jmc.flightrecorder.writer\/build.properties","status":"copied"},{"patch":"@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.core<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t<artifactId>flightrecorder.serializers<\/artifactId>\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t<\/properties>\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>common<\/artifactId>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>flightrecorder<\/artifactId>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.lz4<\/groupId>\n+\t\t\t<artifactId>lz4-java<\/artifactId>\n+\t\t\t<version>1.7.1<\/version>\n+\t\t<\/dependency>\n+\t<\/dependencies>\n+<\/project>\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/pom.xml","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2019, 2020, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Datadog, Inc. All rights reserved.\n@@ -34,1 +34,1 @@\n-package org.openjdk.jmc.flightrecorder.ext.graphview.graph;\n+package org.openjdk.jmc.flightrecorder.serializers.dot;\n@@ -56,1 +56,1 @@\n-public final class DotGenerator {\n+public final class DotSerializer {\n@@ -445,1 +445,5 @@\n-\t * Generates a dot file for the CPU profiling events available in the recording.\n+\t * Generates a DOT file for the execution sample (CPU profiling) events available in the\n+\t * recording.\n+\t * <p>\n+\t * TODO: This could easily be made highly configurable to allow the user to configure which\n+\t * event type to filter for, what attribute to use for weight, and what frame separator to use.\n@@ -448,0 +452,1 @@\n+\t *            takes one argument - the file name of the JFR file to serialize into DOT.\n@@ -452,0 +457,6 @@\n+\t\tif (args.length != 1) {\n+\t\t\tSystem.out.println(\"Usage: DotSerializer <filename>\\n\");\n+\t\t\tSystem.out.println(\n+\t\t\t\t\t\"Serializes the execution sample events in a JFR file into a DOT file, suitable for visualizing with GraphViz.\");\n+\t\t\tSystem.exit(2);\n+\t\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/dot\/DotSerializer.java","additions":16,"deletions":5,"binary":false,"changes":21,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ext\/graphview\/graph\/DotGenerator.java","status":"renamed"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.serializers.internal;\n+\n+import java.text.MessageFormat;\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public class Messages {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.flightrecorder.serializers.internal.messages\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n+\n+\tpublic static final String FLAMEGRAPH_FLAME_GRAPH = \"FLAMEGRAPH_FLAME_GRAPH\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_ICICLE_GRAPH = \"FLAMEGRAPH_ICICLE_GRAPH\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SAVE_AS = \"FLAMEGRAPH_SAVE_AS\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_PRINT = \"FLAMEGRAPH_PRINT\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SAVE_FLAME_GRAPH_AS = \"FLAMEGRAPH_SAVE_FLAME_GRAPH_AS\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_JPEG_IMAGE = \"FLAMEGRAPH_JPEG_IMAGE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_PNG_IMAGE = \"FLAMEGRAPH_PNG_IMAGE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_STACKTRACE_NOT_AVAILABLE = \"FLAMEGRAPH_SELECT_STACKTRACE_NOT_AVAILABLE\"; \/\/$NON-NLS-1$\t\t\n+\tpublic static final String FLAMEGRAPH_SELECT_ROOT_NODE_EVENT = \"FLAMEGRAPH_SELECT_ROOT_NODE_EVENT\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_ROOT_NODE_EVENTS = \"FLAMEGRAPH_SELECT_ROOT_NODE_EVENTS\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_ROOT_NODE_TYPE = \"FLAMEGRAPH_SELECT_ROOT_NODE_TYPE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_ROOT_NODE_TYPES = \"FLAMEGRAPH_SELECT_ROOT_NODE_TYPES\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_ROOT_NODE = \"FLAMEGRAPH_SELECT_ROOT_NODE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_TITLE_EVENT_MORE_DELIMITER = \"FLAMEGRAPH_SELECT_TITLE_EVENT_MORE_DELIMITER\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_TITLE_EVENT_PATTERN = \"FLAMEGRAPH_SELECT_TITLE_EVENT_PATTERN\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_PATTERN = \"FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_PATTERN\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_REST_PATTERN = \"FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_REST_PATTERN\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_MORE = \"FLAMEGRAPH_SELECT_HTML_MORE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_TABLE_COUNT = \"FLAMEGRAPH_SELECT_HTML_TABLE_COUNT\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_TYPE = \"FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_TYPE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_TOOLTIP_PACKAGE = \"FLAMEGRAPH_SELECT_HTML_TOOLTIP_PACKAGE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_TOOLTIP_SAMPLES = \"FLAMEGRAPH_SELECT_HTML_TOOLTIP_SAMPLES\"; \/\/$NON-NLS-1$\n+\tpublic static final String FLAMEGRAPH_SELECT_HTML_TOOLTIP_DESCRIPTION = \"FLAMEGRAPH_SELECT_HTML_TOOLTIP_DESCRIPTION\"; \/\/$NON-NLS-1$\n+\n+\tprivate Messages() {\n+\t}\n+\n+\tpublic static String getString(String key) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn '!' + key + '!';\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Localized parameterized message.\n+\t * \n+\t * @param key\n+\t *            the message key for the format string\n+\t * @param values\n+\t *            message values the values to pass to the format string\n+\t * @return message the formatted message\n+\t *\/\n+\tpublic static String getFormattedMessage(String key, Object ... values) {\n+\t\tif (values == null || values.length == 0) {\n+\t\t\treturn getString(key);\n+\t\t} else {\n+\t\t\treturn MessageFormat.format(getString(key), values);\n+\t\t}\n+\t}\n+\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/internal\/Messages.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.serializers.json;\n+\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_HTML_MORE;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_PATTERN;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_REST_PATTERN;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_ROOT_NODE;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_ROOT_NODE_EVENT;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_ROOT_NODE_EVENTS;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_ROOT_NODE_TYPE;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_ROOT_NODE_TYPES;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_STACKTRACE_NOT_AVAILABLE;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_TITLE_EVENT_MORE_DELIMITER;\n+import static org.openjdk.jmc.flightrecorder.serializers.internal.Messages.FLAMEGRAPH_SELECT_TITLE_EVENT_PATTERN;\n+import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME;\n+import static org.openjdk.jmc.flightrecorder.stacktrace.Messages.STACKTRACE_UNCLASSIFIABLE_FRAME_DESC;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.openjdk.jmc.common.IMCFrame;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.item.IItemIterable;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkFilters;\n+import org.openjdk.jmc.flightrecorder.serializers.internal.Messages;\n+import org.openjdk.jmc.common.util.FormatToolkit;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator.FrameCategorization;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.AggregatableFrame;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.Node;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n+\n+\/**\n+ * Produces a tree model suitable for rendering flame graphs.\n+ *\/\n+public class FlameGraphJsonSerializer {\n+\tprivate static final String UNCLASSIFIABLE_FRAME = Messages.getString(STACKTRACE_UNCLASSIFIABLE_FRAME);\n+\tprivate static final String UNCLASSIFIABLE_FRAME_DESC = Messages.getString(STACKTRACE_UNCLASSIFIABLE_FRAME_DESC);\n+\tprivate final static int MAX_TYPES_IN_ROOT_TITLE = 2;\n+\tprivate final static int MAX_TYPES_IN_ROOT_DESCRIPTION = 10;\n+\n+\t\/**\n+\t * Serializes a {@link StacktraceTreeModel} to JSON.\n+\t * \n+\t * @param model\n+\t *            the {@link StacktraceTreeModel} to serialize to JSON.\n+\t * @return a String containing the serialized model.\n+\t *\/\n+\tpublic static String toJson(StacktraceTreeModel model) {\n+\t\treturn toJson(model, model.getRoot());\n+\t}\n+\n+\tprivate static String toJson(StacktraceTreeModel model, Node node) {\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tsb.append(\"{\");\n+\t\tif (node.isRoot()) {\n+\t\t\tsb.append(createRootNodeJson(model.getItems()));\n+\t\t} else {\n+\t\t\tsb.append(createNodeJsonProps(node.getFrame(), node.getCumulativeWeight()));\n+\t\t}\n+\n+\t\tsb.append(\", \").append(addQuotes(\"c\")).append(\": [ \");\n+\t\tboolean first = true;\n+\t\tfor (Node child : node.getChildren()) {\n+\t\t\tif (!first) {\n+\t\t\t\tsb.append(\",\");\n+\t\t\t}\n+\t\t\tsb.append(toJson(model, child));\n+\t\t\tfirst = false;\n+\t\t}\n+\t\tsb.append(\"]\").append(\"}\");\n+\t\treturn sb.toString();\n+\t}\n+\n+\tprivate static String createNodeJsonProps(AggregatableFrame frame, double value) {\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tif (frame.getType().equals(IMCFrame.Type.UNKNOWN) && frame.getHumanReadableShortString().equals(\".()\")) {\n+\t\t\t\/\/ TODO: find recording with truncated stacks and add unit test for this case\n+\t\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(UNCLASSIFIABLE_FRAME));\n+\t\t\tsb.append(\",\");\n+\t\t\tsb.append(addQuotes(\"d\")).append(\": \").append(addQuotes(UNCLASSIFIABLE_FRAME_DESC));\n+\t\t\tsb.append(\",\");\n+\t\t\tsb.append(addQuotes(\"p\")).append(\": \").append(addQuotes(\"\"));\n+\t\t\tsb.append(\",\");\n+\t\t} else {\n+\t\t\tString frameName = frame.getHumanReadableShortString();\n+\t\t\tString packageName = FormatToolkit.getPackage(frame.getMethod().getType().getPackage());\n+\t\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(frameName));\n+\t\t\tsb.append(\",\");\n+\t\t\tsb.append(addQuotes(\"p\")).append(\": \").append(addQuotes(packageName));\n+\t\t\tsb.append(\",\");\n+\t\t}\n+\t\tsb.append(addQuotes(\"v\")).append(\": \").append(String.valueOf((int) value));\n+\t\treturn sb.toString();\n+\t}\n+\n+\tprivate static String createJsonProps(String frameName, String description, double value) {\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tsb.append(addQuotes(\"n\")).append(\": \").append(addQuotes(frameName));\n+\t\tsb.append(\",\");\n+\t\tsb.append(addQuotes(\"p\")).append(\": \").append(addQuotes(\"\"));\n+\t\tsb.append(\",\");\n+\t\tsb.append(addQuotes(\"d\")).append(\": \").append(addQuotes(description));\n+\t\tsb.append(\",\");\n+\t\tsb.append(addQuotes(\"v\")).append(\": \").append(String.valueOf((int) value));\n+\t\treturn sb.toString();\n+\t}\n+\n+\tprivate static String addQuotes(String str) {\n+\t\treturn String.format(\"\\\"%s\\\"\", str);\n+\t}\n+\n+\tprivate static Map<String, Long> countEventsByType(IItemCollection items) {\n+\t\tfinal HashMap<String, Long> eventCountByType = new HashMap<>();\n+\t\tfor (IItemIterable eventIterable : items) {\n+\t\t\tif (eventIterable.getItemCount() == 0) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tString typeName = eventIterable.getType().getName();\n+\t\t\tlong newValue = eventCountByType.getOrDefault(typeName, 0L) + eventIterable.getItemCount();\n+\t\t\teventCountByType.put(typeName, newValue);\n+\t\t}\n+\t\t\/\/ sort the map in ascending order of values\n+\t\treturn eventCountByType.entrySet().stream().sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))\n+\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));\n+\t}\n+\n+\tprivate static String createRootNodeJson(IItemCollection events) {\n+\t\tMap<String, Long> eventCountsByType = countEventsByType(events);\n+\t\tString rootTitle = createRootNodeTitle(eventCountsByType);\n+\t\tString rootDescription = createRootNodeDescription(eventCountsByType);\n+\t\treturn createJsonProps(rootTitle, rootDescription,\n+\t\t\t\teventCountsByType.values().stream().mapToLong(Long::longValue).sum());\n+\t}\n+\n+\tprivate static String createRootNodeTitle(Map<String, Long> eventCountsByType) {\n+\t\tint eventsInTitle = Math.min(eventCountsByType.size(), MAX_TYPES_IN_ROOT_TITLE);\n+\t\tlong totalEvents = eventCountsByType.values().stream().mapToLong(Long::longValue).sum();\n+\t\tif (totalEvents == 0) {\n+\t\t\treturn Messages.getString(FLAMEGRAPH_SELECT_STACKTRACE_NOT_AVAILABLE);\n+\t\t}\n+\t\tStringBuilder title = new StringBuilder(createRootNodeTitlePrefix(totalEvents, eventCountsByType.size()));\n+\t\tint i = 0;\n+\t\tfor (Map.Entry<String, Long> entry : eventCountsByType.entrySet()) {\n+\t\t\tString eventType = Messages.getFormattedMessage(FLAMEGRAPH_SELECT_TITLE_EVENT_PATTERN, entry.getKey(),\n+\t\t\t\t\tString.valueOf(entry.getValue()));\n+\t\t\ttitle.append(eventType);\n+\t\t\tif (i < eventsInTitle) {\n+\t\t\t\ttitle.append(Messages.getFormattedMessage(FLAMEGRAPH_SELECT_TITLE_EVENT_MORE_DELIMITER));\n+\t\t\t} else {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\ti++;\n+\t\t}\n+\t\tif (eventCountsByType.size() > MAX_TYPES_IN_ROOT_TITLE) {\n+\t\t\ttitle.append(Messages.getFormattedMessage(FLAMEGRAPH_SELECT_HTML_MORE));\n+\t\t}\n+\t\treturn title.toString();\n+\t}\n+\n+\tprivate static String createRootNodeTitlePrefix(long events, int types) {\n+\t\tString eventText = Messages.getFormattedMessage(\n+\t\t\t\tevents > 1 ? FLAMEGRAPH_SELECT_ROOT_NODE_EVENTS : FLAMEGRAPH_SELECT_ROOT_NODE_EVENT);\n+\t\tString typeText = Messages\n+\t\t\t\t.getFormattedMessage(types > 1 ? FLAMEGRAPH_SELECT_ROOT_NODE_TYPES : FLAMEGRAPH_SELECT_ROOT_NODE_TYPE);\n+\t\treturn Messages.getFormattedMessage(FLAMEGRAPH_SELECT_ROOT_NODE, String.valueOf(events), eventText,\n+\t\t\t\tString.valueOf(types), typeText);\n+\t}\n+\n+\tprivate static String createRootNodeDescription(Map<String, Long> eventCountsByType) {\n+\t\tStringBuilder description = new StringBuilder();\n+\t\tint i = 0;\n+\t\tlong remainingEvents = 0;\n+\t\tfor (Map.Entry<String, Long> entry : eventCountsByType.entrySet()) {\n+\t\t\tif (i < MAX_TYPES_IN_ROOT_DESCRIPTION) {\n+\t\t\t\tdescription.append(Messages.getFormattedMessage(FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_PATTERN,\n+\t\t\t\t\t\tString.valueOf(entry.getValue()), entry.getKey()));\n+\t\t\t} else {\n+\t\t\t\tremainingEvents = Long.sum(remainingEvents, entry.getValue());\n+\t\t\t}\n+\t\t\ti++;\n+\t\t}\n+\n+\t\tif (remainingEvents > 0) {\n+\t\t\tint remainingTypes = eventCountsByType.size() - MAX_TYPES_IN_ROOT_DESCRIPTION;\n+\t\t\tdescription.append(Messages.getFormattedMessage(FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_REST_PATTERN,\n+\t\t\t\t\tString.valueOf(remainingEvents), String.valueOf(remainingTypes)));\n+\t\t}\n+\t\treturn description.toString();\n+\t}\n+\n+\t\/**\n+\t * Generates a JSON file for the execution sample (CPU profiling) events available in the\n+\t * recording.\n+\t * <p>\n+\t * TODO: This could easily be made highly configurable to allow the user to configure which\n+\t * event type to filter for, what attribute to use for weight, and what frame separator to use.\n+\t * \n+\t * @param args\n+\t *            takes one argument - the file name of the JFR file to serialize into JSON.\n+\t * @throws IOException\n+\t * @throws CouldNotLoadRecordingException\n+\t *\/\n+\tpublic static void main(String[] args) throws IOException, CouldNotLoadRecordingException {\n+\t\tif (args.length != 1) {\n+\t\t\tSystem.out.println(\"Usage: FlameGraphJsonSerializer <filename>\\n\");\n+\t\t\tSystem.out.println(\n+\t\t\t\t\t\"Serializes the execution sample events a JFR file into a JSON file, suitable for visualizing with flame graph library.\");\n+\t\t\tSystem.exit(2);\n+\t\t}\n+\t\tFile jfrFile = new File(args[0]);\n+\t\tIItemCollection items = JfrLoaderToolkit.loadEvents(jfrFile);\n+\t\tIItemCollection filteredItems = items.apply(JdkFilters.EXECUTION_SAMPLE);\n+\t\tFrameSeparator frameSeparator = new FrameSeparator(FrameCategorization.METHOD, false);\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(filteredItems, frameSeparator);\n+\t\tSystem.out.println(toJson(model));\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/json\/FlameGraphJsonSerializer.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"},{"patch":"@@ -34,9 +34,5 @@\n-package org.openjdk.jmc.flightrecorder.writer.api;\n-\n-import java.util.List;\n-\n-public interface TypeStructure {\n-\tList<? extends TypedField> getFields();\n-\n-\tList<Annotation> getAnnotations();\n-}\n+\/**\n+ * This bundle contains various serializers to convert JFR data to other formats, such as JSON and\n+ * DOT.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.serializers;\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/package-info.java","additions":5,"deletions":9,"binary":false,"changes":14,"previous_filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/api\/TypeStructure.java","status":"copied"},{"patch":"@@ -0,0 +1,56 @@\n+#\n+#  Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2020, 2021, Datadog, Inc. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+#\n+FLAMEGRAPH_FLAME_GRAPH=Flame Graph\n+FLAMEGRAPH_ICICLE_GRAPH=Icicle Graph\n+FLAMEGRAPH_SAVE_AS=Save as...\n+FLAMEGRAPH_PRINT=Print\n+FLAMEGRAPH_SAVE_FLAME_GRAPH_AS=Save flame graph as...\n+FLAMEGRAPH_JPEG_IMAGE=JPEG image\n+FLAMEGRAPH_PNG_IMAGE=PNG image\n+FLAMEGRAPH_SELECT_STACKTRACE_NOT_AVAILABLE=Stack Trace not available\n+FLAMEGRAPH_SELECT_ROOT_NODE_EVENT=event\n+FLAMEGRAPH_SELECT_ROOT_NODE_EVENTS=events\n+FLAMEGRAPH_SELECT_ROOT_NODE_TYPE=type\n+FLAMEGRAPH_SELECT_ROOT_NODE_TYPES=types\n+FLAMEGRAPH_SELECT_ROOT_NODE={0} {1} of {2} {3}:\\u0020\n+FLAMEGRAPH_SELECT_TITLE_EVENT_MORE_DELIMITER=,\\u0020\n+FLAMEGRAPH_SELECT_TITLE_EVENT_PATTERN={0}[{1}]\n+FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_PATTERN={0}:{1}|\n+FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_REST_PATTERN={0}:Others... ({1} types)|\n+FLAMEGRAPH_SELECT_HTML_MORE=...\n+FLAMEGRAPH_SELECT_HTML_TABLE_COUNT=Count\n+FLAMEGRAPH_SELECT_HTML_TABLE_EVENT_TYPE=Event Type\n+FLAMEGRAPH_SELECT_HTML_TOOLTIP_PACKAGE=Package\n+FLAMEGRAPH_SELECT_HTML_TOOLTIP_SAMPLES=Samples\n+FLAMEGRAPH_SELECT_HTML_TOOLTIP_DESCRIPTION=Description\n\\ No newline at end of file\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/serializers\/internal\/messages.properties","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -98,0 +98,1 @@\n+\t\t<module>org.openjdk.jmc.flightrecorder.serializers<\/module>\n","filename":"core\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/.classpath","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/.classpath","status":"renamed"},{"patch":"@@ -0,0 +1,15 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: Flight Recorder Serializers Test\n+Bundle-SymbolicName: org.openjdk.jmc.flightrecorder.serializers.test;singleton:=true\n+Bundle-Version: 8.1.0.qualifier\n+Bundle-Vendor: Oracle Corporation\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Bundle-ActivationPolicy: lazy\n+Require-Bundle: org.junit,\n+ org.openjdk.jmc.common.test,\n+ org.openjdk.jmc.flightrecorder,\n+ org.openjdk.jmc.flightrecorder.test,\n+ org.openjdk.jmc.flightrecorder.serializers\n+Automatic-Module-Name: org.openjdk.jmc.flightrecorder.serializers.test\n+Export-Package: org.openjdk.jmc.flightrecorder.serializers.dot.test\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/META-INF\/MANIFEST.MF","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -34,3 +34,3 @@\n-source.. = src\/main\/java\/,\\\n-           src\/main\/resources\/\n-output.. = target\/classes\/\n+source.. = src\/test\/java\/,\\\n+           src\/test\/resources\/\n+output.. = target\/test-classes\/\n@@ -40,1 +40,0 @@\n-jre.compilation.profile = JavaSE-1.8\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/build.properties","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"core\/org.openjdk.jmc.flightrecorder.writer\/build.properties","status":"copied"},{"patch":"@@ -3,1 +3,2 @@\n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Datadog, Inc. All rights reserved.\n@@ -41,1 +42,1 @@\n-\t<artifactId>flightrecorder.rules.test<\/artifactId>\n+\t<artifactId>flightrecorder.serializers.test<\/artifactId>\n@@ -48,1 +49,1 @@\n-                   <artifactId>flightrecorder.test<\/artifactId>\n+                   <artifactId>common.test<\/artifactId>\n@@ -55,3 +56,1 @@\n-                   <artifactId>common.test<\/artifactId>\n-                   <type>test-jar<\/type>\n-                   <scope>test<\/scope>\n+                   <artifactId>common<\/artifactId>\n@@ -62,1 +61,1 @@\n-                   <artifactId>common<\/artifactId>\n+                   <artifactId>flightrecorder<\/artifactId>\n@@ -67,1 +66,1 @@\n-                   <artifactId>flightrecorder<\/artifactId>\n+                   <artifactId>flightrecorder.test<\/artifactId>\n@@ -72,1 +71,1 @@\n-                   <artifactId>flightrecorder.rules<\/artifactId>\n+                   <artifactId>flightrecorder.serializers<\/artifactId>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/pom.xml","additions":8,"deletions":9,"binary":false,"changes":17,"previous_filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/pom.xml","status":"copied"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.serializers.dot.test;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.test.TestToolkit;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.serializers.dot.DotSerializer;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.graph.StacktraceGraphModel;\n+import org.openjdk.jmc.flightrecorder.test.util.RecordingToolkit;\n+\n+public class DotSerializerTest {\n+\n+\t@Test\n+\tpublic void testGetRecording() throws IOException, CouldNotLoadRecordingException {\n+\t\tIItemCollection collection = RecordingToolkit.getFlightRecording(\n+\t\t\t\tTestToolkit.getNamedResource(DotSerializerTest.class, \"recordings\", \"hotmethods.jfr\"));\n+\t\tassertNotNull(collection);\n+\t\tString dot = DotSerializer\n+\t\t\t\t.toDot(new StacktraceGraphModel(new FrameSeparator(FrameSeparator.FrameCategorization.LINE, false),\n+\t\t\t\t\t\tcollection, null), Integer.MAX_VALUE, DotSerializer.getDefaultConfiguration());\n+\t\tassertTrue(\"Dot file should contain digraph element\", dot.contains(\"digraph\"));\n+\t\tassertTrue(\"Dot file should contain at least 50 nodes\", dot.contains(\"N50\"));\n+\t\tassertTrue(\"Dot file should contain a link between N1 and N2\", dot.contains(\"N1 -> N2\"));\n+\t}\n+\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/dot\/test\/DotSerializerTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.serializers.json.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.common.test.TestToolkit;\n+import org.openjdk.jmc.common.test.io.IOResourceSet;\n+import org.openjdk.jmc.common.util.StringToolkit;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAttributes;\n+import org.openjdk.jmc.flightrecorder.serializers.json.FlameGraphJsonSerializer;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n+import org.openjdk.jmc.flightrecorder.test.util.RecordingToolkit;\n+import org.openjdk.jmc.flightrecorder.test.util.StacktraceTestToolkit;\n+\n+public class FlameGraphJsonSerializerTest {\n+\tprivate static final boolean INVERTED_STACKS = true;\n+\tprivate static final boolean REGULAR_STACKS = false;\n+\tprivate static final FrameSeparator METHOD_SEPARATOR = new FrameSeparator(FrameSeparator.FrameCategorization.METHOD,\n+\t\t\tfalse);\n+\n+\tprivate static IItemCollection testRecording;\n+\n+\t@BeforeClass\n+\tpublic static void beforeAll() throws IOException, CouldNotLoadRecordingException {\n+\t\tIOResourceSet[] testResources = StacktraceTestToolkit.getTestResources();\n+\t\tIOResourceSet resourceSet = testResources[0];\n+\t\ttestRecording = RecordingToolkit.getFlightRecording(resourceSet);\n+\t}\n+\n+\t@Test\n+\tpublic void testSerializeKnownRecording() throws IOException, CouldNotLoadRecordingException {\n+\t\tIItemCollection collection = RecordingToolkit.getFlightRecording(\n+\t\t\t\tTestToolkit.getNamedResource(FlameGraphJsonSerializerTest.class, \"recordings\", \"hotmethods.jfr\"));\n+\t\tassertNotNull(collection);\n+\t\tString json = FlameGraphJsonSerializer.toJson(new StacktraceTreeModel(collection,\n+\t\t\t\tnew FrameSeparator(FrameSeparator.FrameCategorization.METHOD, false)));\n+\t\tassertTrue(\"JSon file should contain Method Profiling Sample[24526]\",\n+\t\t\t\tjson.contains(\"Method Profiling Sample[24526]\"));\n+\t}\n+\n+\t@Test\n+\tpublic void testRenderedJsonWithAttribute() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, REGULAR_STACKS,\n+\t\t\t\tJdkAttributes.ALLOCATION_SIZE);\n+\t\tString flameGraphJson = FlameGraphJsonSerializer.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-attribute.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n+\t@Test\n+\tpublic void testRenderedJsonWithAttributeInvertedStacks() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, INVERTED_STACKS,\n+\t\t\t\tJdkAttributes.ALLOCATION_SIZE);\n+\t\tString flameGraphJson = FlameGraphJsonSerializer.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-attribute-inverted.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n+\t@Test\n+\tpublic void testRenderedJsonWithCounts() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording);\n+\t\tString flameGraphJson = FlameGraphJsonSerializer.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-counts.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n+\t@Test\n+\tpublic void testRenderedJsonWithCountsInvertedStacks() throws Exception {\n+\t\tStacktraceTreeModel model = new StacktraceTreeModel(testRecording, METHOD_SEPARATOR, INVERTED_STACKS);\n+\t\tString flameGraphJson = FlameGraphJsonSerializer.toJson(model);\n+\n+\t\tString expectedJson = readResource(\"\/flamegraph-counts-inverted.json\");\n+\t\tassertEquals(expectedJson, flameGraphJson);\n+\t}\n+\n+\tprivate String readResource(String resourcePath) throws IOException {\n+\t\ttry (InputStream is = FlameGraphJsonSerializer.class.getResourceAsStream(resourcePath)) {\n+\t\t\tif (is == null) {\n+\t\t\t\tthrow new IllegalArgumentException(resourcePath + \" not found\");\n+\t\t\t}\n+\t\t\treturn StringToolkit.readString(is);\n+\t\t}\n+\t}\n+\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/json\/test\/FlameGraphJsonSerializerTest.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/test\/resources\/flamegraph-attribute-inverted.json","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-attribute-inverted.json","status":"renamed"},{"patch":"","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/test\/resources\/flamegraph-attribute.json","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-attribute.json","status":"renamed"},{"patch":"","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/test\/resources\/flamegraph-counts-inverted.json","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-counts-inverted.json","status":"renamed"},{"patch":"","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/test\/resources\/flamegraph-counts.json","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/tests\/org.openjdk.jmc.flightrecorder.flameview.test\/src\/test\/resources\/flamegraph-counts.json","status":"renamed"},{"patch":"","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/test\/resources\/recordings\/hotmethods.jfr","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.graphview\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/ext\/graphview\/graph\/hotmethods.jfr","status":"copied"},{"patch":"@@ -35,1 +35,0 @@\n-import java.io.File;\n@@ -43,1 +42,0 @@\n-import org.junit.runners.parameterized.TestWithParameters;\n@@ -48,1 +46,0 @@\n-import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/RecordingTest.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n-   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2021, Datadog, Inc. All rights reserved.\n@@ -48,0 +49,1 @@\n+\t\t<module>org.openjdk.jmc.flightrecorder.serializers.test<\/module>\n","filename":"core\/tests\/pom.xml","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}