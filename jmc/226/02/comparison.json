{"files":[{"patch":"@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry kind=\"src\" output=\"target\/classes\" path=\"src\/main\/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry excluding=\"**\" kind=\"src\" output=\"target\/classes\" path=\"src\/main\/resources\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"src\" output=\"target\/test-classes\" path=\"src\/test\/java\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.USER_LIBRARY\/JMC_JDK\"\/>\n+\t<classpathentry kind=\"output\" path=\"target\/classes\"\/>\n+<\/classpath>\n","filename":"application\/org.openjdk.jmc.console.agent\/.classpath","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: JMC Agent Plugin\n+Bundle-SymbolicName: org.openjdk.jmc.console.agent;singleton:=true\n+Bundle-Version: 8.1.0.qualifier\n+Require-Bundle: org.eclipse.core.runtime,\n+ org.eclipse.ui,\n+ org.eclipse.jface.text,\n+ org.eclipse.ui.editors,\n+ org.eclipse.core.filesystem,\n+ org.eclipse.ui.ide,\n+ org.eclipse.core.resources,\n+ org.eclipse.e4.core.contexts,\n+ org.openjdk.jmc.console.ui,\n+ org.openjdk.jmc.flightrecorder.ui,\n+ org.openjdk.jmc.rjmx\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n+Import-Package: javax.inject,\n+ org.eclipse.debug.core.sourcelookup.containers\n+Bundle-ActivationPolicy: lazy\n+Bundle-Activator: org.openjdk.jmc.console.agent.AgentPlugin\n+Automatic-Module-Name: org.openjdk.jmc.console.ext.agent\n","filename":"application\/org.openjdk.jmc.console.agent\/META-INF\/MANIFEST.MF","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+source.. = src\/main\/java\/\n+output.. = target\/classes\/\n+bin.includes = plugin.xml,\\\n+               META-INF\/,\\\n+               .,\\\n+               icons\/\n","filename":"application\/org.openjdk.jmc.console.agent\/build.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"filename":"application\/org.openjdk.jmc.console.agent\/icons\/agent-256.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.console.agent\/icons\/agent.png","binary":true,"status":"added"},{"filename":"application\/org.openjdk.jmc.console.agent\/icons\/agent@2x.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<?eclipse version=\"3.4\"?>\n+<plugin>\n+    <extension point=\"org.openjdk.jmc.rjmx.actionProvider\">\n+        <action\n+            factory=\"org.openjdk.jmc.console.agent.actions.AgentEditorOpener\"\n+            icon=\"icons\/agent-16.png\"\n+            label=\"Agent Plugin\">\n+        <\/action>\n+        <provider\n+            icon=\"icons\/agent-16.png\"\n+            id=\"org.openjdk.jmc.console.ext.agent\"\n+            description=\"The JMC Agent Plugin can be used to add JFR instrumentation declaratively to a running program\"\n+            label=\"Agent Plugin\"\n+            priority=\"101\"\n+            doubleClickActionIndex=\"0\">\n+            <action\n+                factory=\"org.openjdk.jmc.console.agent.actions.AgentEditorOpener\"\n+                icon=\"icons\/agent-16.png\"\n+                label=\"Open the JMC Agent Plugin\">\n+            <\/action>\n+        <\/provider>\n+    <\/extension>\n+\n+    <extension point=\"org.eclipse.ui.editors\">\n+        <editor\n+            class=\"org.openjdk.jmc.console.ext.agent.editor.AgentEditor\"\n+            default=\"true\"\n+            id=\"org.openjdk.jmc.console.ext.agent.editor.AgentEditor\"\n+            icon=\"icons\/agent-16.png\"\n+            name=\"Agent Plugin\"\/>\n+    <\/extension>\n+    \n+    <extension point=\"org.eclipse.ui.editors\">\n+      \t<editor\n+            id=\"org.openjdk.jmc.console.ext.agent.tabs.raweditor.RawEditor\"\n+            name=\"Agent XML Editor\"\n+            icon=\"icons\/agent-16.png\"\n+            extensions=\"xml\"\n+            class=\"org.openjdk.jmc.console.ext.agent.tabs.raweditor.RawEditor\"\n+            contributorClass=\"org.eclipse.ui.texteditor.BasicTextEditorActionContributor\">\n+      \t<\/editor>\n+   <\/extension>\n+\n+    <extension point=\"org.eclipse.ui.commands\">\n+\t\t<command\n+        id=\"org.openjdk.jmc.console.ext.agent.openPresetManagerHandler\"\n+\t\tdefaultHandler=\"org.openjdk.jmc.console.ext.agent.manager.OpenPresetManagerHandler\"\n+\t\tname=\"Open Agent Preset Manager\">\n+\t\t<\/command>\n+    <\/extension>\n+\n+    <extension\n+      point=\"org.eclipse.ui.menus\">\n+    <menuContribution\n+        allPopups=\"false\"\n+        locationURI=\"menu:window?after=additions\">\n+      <command\n+            commandId=\"org.openjdk.jmc.console.ext.agent.openPresetManagerHandler\"\n+            icon=\"icons\/agent-16.png\"\n+            label=\"Agent Preset Manager\"\n+            style=\"push\">\n+      <\/command>\n+    <\/menuContribution>\n+  <\/extension>\n+<\/plugin>\n","filename":"application\/org.openjdk.jmc.console.agent\/plugin.xml","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n+\t\t xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\n+\t<artifactId>org.openjdk.jmc.console.agent<\/artifactId>\n+\t<version>8.1.0-SNAPSHOT<\/version>\n+\t<packaging>eclipse-plugin<\/packaging>\n+\n+\t<properties>\n+\t\t<jmc.agent.version>1.0.0-SNAPSHOT<\/jmc.agent.version>\n+\t\t<java.version>1.8<\/java.version>\n+\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t<\/properties>\n+\n+\t<build>\n+\t\t<plugins>\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>org.eclipse.tycho<\/groupId>\n+\t\t\t\t<artifactId>tycho-compiler-plugin<\/artifactId>\n+\t\t\t\t<version>${tycho.version}<\/version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<extraClasspathElements>\n+\t\t\t\t\t\t<dependency>\n+\t\t\t\t\t\t\t<groupId>sun.jdk<\/groupId>\n+\t\t\t\t\t\t\t<artifactId>tools<\/artifactId>\n+\t\t\t\t\t\t\t<version>1.8.0<\/version>\n+\t\t\t\t\t\t\t<scope>system<\/scope>\n+\t\t\t\t\t\t\t<systemPath>${java.home}\/..\/lib\/tools.jar<\/systemPath>\n+\t\t\t\t\t\t<\/dependency>\n+\t\t\t\t\t<\/extraClasspathElements>\n+\t\t\t\t<\/configuration>\n+\t\t\t<\/plugin>\n+\t\t<\/plugins>\n+\t<\/build>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.console.agent\/pom.xml","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent;\n+\n+import org.openjdk.jmc.rjmx.ConnectionException;\n+import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.IConnectionListener;\n+import org.openjdk.jmc.rjmx.IServerHandle;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.ReflectionException;\n+import javax.management.openmbean.CompositeData;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+public final class AgentJmxHelper {\n+\tprivate final static String AGENT_OBJECT_NAME = \"org.openjdk.jmc.jfr.agent:type=AgentController\"; \/\/$NON-NLS-1$\n+\tprivate final static String DEFINE_EVENT_PROBES = \"defineEventProbes\"; \/\/$NON-NLS-1$\n+\tprivate final static String RETRIEVE_EVENT_PROBES = \"retrieveEventProbes\"; \/\/$NON-NLS-1$\n+\tprivate final static String RETRIEVE_CURRENT_TRANSFORMS = \"retrieveCurrentTransforms\"; \/\/$NON-NLS-1$\n+\tprivate final static String CONNECTION_USAGE = \"Agent MBean\"; \/\/$NON-NLS-1$\n+\n+\tprivate final IServerHandle serverHandle;\n+\tprivate final IConnectionHandle connectionHandle;\n+\tprivate final MBeanServerConnection mbsc;\n+\n+\tprivate final Set<IConnectionListener> connectionListeners = new HashSet<>();\n+\n+\tpublic AgentJmxHelper(IServerHandle serverHandle) throws ConnectionException {\n+\t\tthis.serverHandle = Objects.requireNonNull(serverHandle);\n+\t\tconnectionHandle = serverHandle.connect(CONNECTION_USAGE, this::onConnectionChange);\n+\t\tmbsc = connectionHandle.getServiceOrDummy(MBeanServerConnection.class);\n+\t}\n+\n+\tpublic IServerHandle getServerHandle() {\n+\t\treturn serverHandle;\n+\t}\n+\n+\tpublic IConnectionHandle getConnectionHandle() {\n+\t\treturn connectionHandle;\n+\t}\n+\n+\tpublic MBeanServerConnection getMBeanServerConnection() {\n+\t\treturn mbsc;\n+\t}\n+\n+\tpublic void addConnectionChangedListener(IConnectionListener connectionListener) {\n+\t\tconnectionListeners.add(Objects.requireNonNull(connectionListener));\n+\t}\n+\n+\tpublic void removeConnectionChangedListener(IConnectionListener connectionListener) {\n+\t\tconnectionListeners.remove(connectionListener);\n+\t}\n+\n+\tpublic boolean isLocalJvm() {\n+\t\treturn connectionHandle.getServerDescriptor().getJvmInfo() != null;\n+\t}\n+\n+\tpublic boolean isMXBeanRegistered() {\n+\t\ttry {\n+\t\t\treturn mbsc.isRegistered(new ObjectName(AGENT_OBJECT_NAME));\n+\t\t} catch (MalformedObjectNameException | IOException e) {\n+\t\t\tAgentPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not check if agent MXBean is registered\", e);\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tpublic String retrieveEventProbes() {\n+\t\ttry {\n+\t\t\tObject result = mbsc.invoke(new ObjectName(AGENT_OBJECT_NAME), RETRIEVE_EVENT_PROBES, new Object[0],\n+\t\t\t\t\tnew String[0]);\n+\t\t\treturn result.toString();\n+\t\t} catch (InstanceNotFoundException\n+\t\t\t\t| MalformedObjectNameException\n+\t\t\t\t| MBeanException\n+\t\t\t\t| ReflectionException\n+\t\t\t\t| IOException e) {\n+\t\t\tAgentPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not retrieve event probes\", e);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic CompositeData[] retrieveCurrentTransforms() {\n+\t\ttry {\n+\t\t\tObject result = mbsc.invoke(new ObjectName(AGENT_OBJECT_NAME), RETRIEVE_CURRENT_TRANSFORMS, new Object[0],\n+\t\t\t\t\tnew String[0]);\n+\t\t\treturn (CompositeData[]) result;\n+\t\t} catch (InstanceNotFoundException\n+\t\t\t\t| MalformedObjectNameException\n+\t\t\t\t| MBeanException\n+\t\t\t\t| ReflectionException\n+\t\t\t\t| IOException e) {\n+\t\t\tAgentPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not retrieve current transforms\", e);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic void defineEventProbes(String xmlDescription) {\n+\t\ttry {\n+\t\t\tObject[] params = {xmlDescription};\n+\t\t\tString[] signature = {String.class.getName()};\n+\t\t\tmbsc.invoke(new ObjectName(AGENT_OBJECT_NAME), DEFINE_EVENT_PROBES, params, signature);\n+\t\t} catch (InstanceNotFoundException\n+\t\t\t\t| MalformedObjectNameException\n+\t\t\t\t| MBeanException\n+\t\t\t\t| ReflectionException\n+\t\t\t\t| IOException e) {\n+\t\t\tAgentPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not define event probes: \" + xmlDescription,\n+\t\t\t\t\te);\n+\t\t}\n+\t}\n+\n+\tpublic void onConnectionChange(IConnectionHandle connection) {\n+\t\tfor (IConnectionListener listener : connectionListeners) {\n+\t\t\tlistener.onConnectionChange(connection);\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/AgentJmxHelper.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent;\n+\n+import org.eclipse.jface.resource.ImageRegistry;\n+import org.openjdk.jmc.ui.MCAbstractUIPlugin;\n+import org.osgi.framework.BundleContext;\n+\n+public class AgentPlugin extends MCAbstractUIPlugin {\n+\tpublic static final String PLUGIN_ID = \"org.openjdk.jmc.console.ext.agent\"; \/\/$NON-NLS-1$\n+\n+\tpublic static final String ICON_AGENT = \"agent.png\"; \/\/$NON-NLS-1$\n+\n+\tprivate static AgentPlugin m_plugin;\n+\n+\tpublic AgentPlugin() {\n+\t\tsuper(PLUGIN_ID);\n+\t}\n+\n+\t@Override\n+\tpublic void start(BundleContext context) throws Exception {\n+\t\tsuper.start(context);\n+\t\tm_plugin = this;\n+\t}\n+\n+\t@Override\n+\tpublic void stop(BundleContext context) throws Exception {\n+\t\tm_plugin = null;\n+\t\tsuper.stop(context);\n+\t}\n+\n+\tpublic static AgentPlugin getDefault() {\n+\t\treturn m_plugin;\n+\t}\n+\n+\t@Override\n+\tprotected void initializeImageRegistry(ImageRegistry registry) {\n+\t\tregisterImage(registry, ICON_AGENT, ICON_AGENT);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/AgentPlugin.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.actions;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.core.runtime.jobs.Job;\n+import org.eclipse.jface.dialogs.IDialogConstants;\n+import org.eclipse.jface.wizard.WizardDialog;\n+import org.eclipse.osgi.util.NLS;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.ui.IEditorInput;\n+import org.eclipse.ui.IWorkbenchWindow;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.PlatformUI;\n+import org.openjdk.jmc.common.io.IOToolkit;\n+import org.openjdk.jmc.console.agent.AgentJmxHelper;\n+import org.openjdk.jmc.console.agent.AgentPlugin;\n+import org.openjdk.jmc.console.agent.editor.AgentEditor;\n+import org.openjdk.jmc.console.agent.editor.AgentEditorInput;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.StartAgentWizard;\n+import org.openjdk.jmc.rjmx.ConnectionException;\n+import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.IConnectionListener;\n+import org.openjdk.jmc.rjmx.IServerHandle;\n+import org.openjdk.jmc.rjmx.JVMSupportToolkit;\n+import org.openjdk.jmc.rjmx.actionprovider.IActionFactory;\n+import org.openjdk.jmc.ui.common.action.Executable;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+\n+import java.util.Objects;\n+\n+public class AgentEditorOpener implements IActionFactory {\n+\n+\t@Override\n+\tpublic Executable createAction(IServerHandle serverHandle) {\n+\t\treturn () -> new ConnectJob(serverHandle).schedule();\n+\t}\n+\n+\tprivate final static class ConnectJob extends Job implements IConnectionListener {\n+\n+\t\tprivate final IServerHandle serverHandle;\n+\t\tprivate IConnectionHandle connectionHandle;\n+\t\tprivate AgentJmxHelper helper;\n+\n+\t\tprivate ConnectJob(IServerHandle serverHandle) {\n+\t\t\tsuper(Messages.AgentEditorOpener_JOB_NAME);\n+\n+\t\t\tthis.serverHandle = Objects.requireNonNull(serverHandle);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected IStatus run(IProgressMonitor monitor) {\n+\t\t\ttry {\n+\t\t\t\thelper = new AgentJmxHelper(serverHandle);\n+\t\t\t\thelper.addConnectionChangedListener(this);\n+\t\t\t\tconnectionHandle = helper.getConnectionHandle();\n+\n+\t\t\t\tIStatus ret = doRun(monitor);\n+\n+\t\t\t\thelper.removeConnectionChangedListener(this);\n+\t\t\t\treturn ret;\n+\t\t\t} catch (ConnectionException e) {\n+\t\t\t\t\/\/ FIXME: Show stacktrace? (Need to show our own ExceptionDialog in that case, or maybe create our own DetailsAreaProvider, see WorkbenchStatusDialogManager.setDetailsAreaProvider)\n+\t\t\t\treturn new Status(IStatus.ERROR, AgentPlugin.PLUGIN_ID, IStatus.ERROR,\n+\t\t\t\t\t\tNLS.bind(Messages.AgentEditorOpener_MESSAGE_COULD_NOT_CONNECT,\n+\t\t\t\t\t\t\t\tserverHandle.getServerDescriptor().getDisplayName(), e.getMessage()),\n+\t\t\t\t\t\te);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprivate IStatus doRun(IProgressMonitor monitor) {\n+\t\t\tString[] error = JVMSupportToolkit.checkConsoleSupport(connectionHandle);\n+\t\t\tif (error.length == 2 && !DialogToolkit.openConfirmOnUiThread(error[0], error[1])) {\n+\t\t\t\treturn Status.CANCEL_STATUS;\n+\t\t\t}\n+\n+\t\t\t\/\/ local JVM but agent not running\n+\t\t\tif (!helper.isMXBeanRegistered() && helper.isLocalJvm()) {\n+\t\t\t\tDisplayToolkit.safeAsyncExec(Display.getDefault(), () -> {\n+\t\t\t\t\tWizardDialog dialog = new WizardDialog(Display.getDefault().getActiveShell(),\n+\t\t\t\t\t\t\tnew StartAgentWizard(helper)) {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void createButtonsForButtonBar(Composite parent) {\n+\t\t\t\t\t\t\tsuper.createButtonsForButtonBar(parent);\n+\t\t\t\t\t\t\tButton finishButton = getButton(IDialogConstants.FINISH_ID);\n+\t\t\t\t\t\t\tfinishButton.setText(Messages.StartAgentWizard_WIZARD_FINISH_BUTTON_TEXT);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t};\n+\t\t\t\t\tdialog.setHelpAvailable(true);\n+\t\t\t\t\tdialog.create();\n+\t\t\t\t\tdialog.open();\n+\t\t\t\t});\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t}\n+\n+\t\t\t\/\/ remote JVM and agent not running\n+\t\t\tif (!helper.isMXBeanRegistered() && !helper.isLocalJvm()) {\n+\t\t\t\tDisplayToolkit.safeAsyncExec(Display.getDefault(), () -> {\n+\t\t\t\t\tIWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();\n+\t\t\t\t\tDialogToolkit.showError(window.getShell(),\n+\t\t\t\t\t\t\tMessages.AgentEditorOpener_MESSAGE_STARTING_AGENT_ON_REMOTE_JVM_NOT_SUPPORTED,\n+\t\t\t\t\t\t\tMessages.AgentEditorOpener_MESSAGE_START_AGENT_MANUALLY);\n+\t\t\t\t});\n+\t\t\t\treturn Status.OK_STATUS;\n+\t\t\t}\n+\n+\t\t\t\/\/ agent already running\n+\t\t\tDisplayToolkit.safeAsyncExec(Display.getDefault(), () -> {\n+\t\t\t\tIWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();\n+\t\t\t\ttry {\n+\t\t\t\t\tIEditorInput ei = new AgentEditorInput(serverHandle, helper.getConnectionHandle(), helper);\n+\t\t\t\t\twindow.getActivePage().openEditor(ei, AgentEditor.EDITOR_ID, true);\n+\t\t\t\t} catch (PartInitException e) {\n+\t\t\t\t\tDialogToolkit.showException(window.getShell(),\n+\t\t\t\t\t\t\tMessages.AgentEditorOpener_MESSAGE_FAILED_TO_OPEN_AGENT_EDITOR, e);\n+\t\t\t\t}\n+\t\t\t});\n+\n+\t\t\treturn Status.OK_STATUS;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void canceling() {\n+\t\t\tIOToolkit.closeSilently(connectionHandle);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void onConnectionChange(IConnectionHandle connection) {\n+\t\t\tif (serverHandle.getState() == IServerHandle.State.DISPOSED) {\n+\t\t\t\tcancel();\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/actions\/AgentEditorOpener.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.editor;\n+\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.jface.action.IToolBarManager;\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.dialogs.ProgressIndicator;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.StackLayout;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.ui.IEditorInput;\n+import org.eclipse.ui.IEditorSite;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.forms.widgets.Form;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+import org.eclipse.ui.part.EditorPart;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.IConnectionListener;\n+import org.openjdk.jmc.rjmx.IServerHandle;\n+import org.openjdk.jmc.ui.WorkbenchToolkit;\n+import org.openjdk.jmc.ui.misc.CompositeToolkit;\n+\n+import java.util.stream.Stream;\n+\n+public class AgentEditor extends EditorPart implements IConnectionListener {\n+\tpublic static final String EDITOR_ID = \"org.openjdk.jmc.console.ext.agent.editor.AgentEditor\"; \/\/$NON-NLS-1$\n+\n+\tprivate Composite parentComposite;\n+\tprivate FormToolkit formToolkit;\n+\tprivate StackLayout stackLayout;\n+\tprivate Form form;\n+\n+\t@Override\n+\tpublic void onConnectionChange(IConnectionHandle connection) {\n+\t\tboolean serverDisposed = getAgentEditorInput().getServerHandle().getState() == IServerHandle.State.DISPOSED;\n+\t\tif (serverDisposed) {\n+\t\t\tWorkbenchToolkit.asyncCloseEditor(AgentEditor.this);\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (!connection.isConnected() && form != null) {\n+\t\t\tform.setMessage(Messages.AgentEditor_CONNECTION_LOST, IMessageProvider.ERROR);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void doSave(IProgressMonitor iProgressMonitor) {\n+\t\t\/\/ intentionally empty\n+\t}\n+\n+\t@Override\n+\tpublic void doSaveAs() {\n+\t\t\/\/ intentionally empty\n+\t}\n+\n+\t@Override\n+\tpublic boolean isDirty() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSaveAsAllowed() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic void setFocus() {\n+\t\tparentComposite.setFocus();\n+\t}\n+\n+\t@Override\n+\tpublic void init(IEditorSite site, IEditorInput input) throws PartInitException {\n+\t\tsetSite(site);\n+\t\tsetInput(input);\n+\n+\t\ttry {\n+\t\t\tgetAgentEditorInput();\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new PartInitException(e.getMessage(), e);\n+\t\t}\n+\n+\t\tsetPartName(getAgentEditorInput().getName());\n+\n+\t\tgetAgentEditorInput().getAgentJmxHelper().addConnectionChangedListener(this);\n+\t}\n+\n+\tprotected AgentEditorInput getAgentEditorInput() {\n+\t\tAgentEditorInput aei;\n+\t\tIEditorInput input = super.getEditorInput();\n+\t\tif (input instanceof AgentEditorInput) {\n+\t\t\taei = (AgentEditorInput) input;\n+\t\t} else {\n+\t\t\taei = input.getAdapter(AgentEditorInput.class);\n+\t\t}\n+\n+\t\tif (aei == null) {\n+\t\t\t\/\/ Not likely to be null, but guard just in case\n+\t\t\tthrow new RuntimeException(\"The agent editor cannot handle the provided editor input\"); \/\/$NON-NLS-1$\n+\t\t}\n+\n+\t\treturn (AgentEditorInput) super.getEditorInput();\n+\t}\n+\n+\t@Override\n+\tpublic void createPartControl(Composite parent) {\n+\t\tparentComposite = parent;\n+\t\tstackLayout = new StackLayout();\n+\t\tparentComposite.setLayout(stackLayout);\n+\n+\t\tformToolkit = new FormToolkit(FlightRecorderUI.getDefault().getFormColors(Display.getCurrent()));\n+\t\tformToolkit.setBorderStyle(SWT.NULL);\n+\n+\t\tstackLayout.topControl = formToolkit.createComposite(parent);\n+\t\tProgressIndicator progressIndicator = CompositeToolkit.createWaitIndicator((Composite) stackLayout.topControl,\n+\t\t\t\tformToolkit);\n+\t\tprogressIndicator.beginTask(1);\n+\n+\t\tcreateAgentEditorUi(parent);\n+\t}\n+\n+\tprivate void createAgentEditorUi(Composite parent) {\n+\t\tform = formToolkit.createForm(parent);\n+\t\tform.setText(Messages.AgentEditor_AGENT_EDITOR_TITLE);\n+\t\tform.setImage(getTitleImage());\n+\t\tformToolkit.decorateFormHeading(form);\n+\n+\t\tIToolBarManager manager = form.getToolBarManager();\n+\n+\t\tAgentEditorAction[] actions = new AgentEditorAction[] {\n+\t\t\t\tnew AgentEditorAction(AgentEditorAction.AgentEditorActionType.REFRESH), \/\/\n+\t\t\t\tnew AgentEditorAction(AgentEditorAction.AgentEditorActionType.LOAD_PRESET), \/\/\n+\t\t\t\tnew AgentEditorAction(AgentEditorAction.AgentEditorActionType.SAVE_AS_PRESET), \/\/\n+\t\t};\n+\t\tStream.of(actions).forEach(manager::add);\n+\t\tStream.of(actions).forEach((action) -> action.setEnabled(false));\n+\t\tform.updateToolBar();\n+\n+\t\tComposite body = form.getBody();\n+\t\tbody.setLayout(new FillLayout());\n+\n+\t\tAgentEditorUi agentEditorUi = new AgentEditorUi(this, actions);\n+\t\tagentEditorUi.createContent(form, formToolkit);\n+\t\tagentEditorUi.refresh(() -> {\n+\t\t\tstackLayout.topControl.dispose();\n+\t\t\tstackLayout.topControl = form;\n+\t\t\tparentComposite.layout();\n+\t\t});\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/AgentEditor.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.editor;\n+\n+import org.eclipse.jface.action.Action;\n+import org.eclipse.jface.action.IAction;\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.openjdk.jmc.ui.UIPlugin;\n+\n+public class AgentEditorAction extends Action {\n+\tprivate static final String MESSAGE_REFRESH = \"Refresh\";\n+\tprivate static final String MESSAGE_LOAD_PRESET = \"Load a preset...\";\n+\tprivate static final String MESSAGE_SAVE_AS_PRESET = \"Save as a preset...\";\n+\n+\tprivate final AgentEditorActionType actionType;\n+\tprivate Runnable runnable = () -> {\n+\t};\n+\n+\tAgentEditorAction(AgentEditorActionType actionType) {\n+\t\tsuper(actionType.message, actionType.action);\n+\t\tthis.actionType = actionType;\n+\t\tsetToolTipText(actionType.message);\n+\t\tsetImageDescriptor(actionType.imageDescriptor);\n+\t}\n+\n+\t@Override\n+\tpublic void run() {\n+\t\trunnable.run();\n+\t}\n+\n+\tpublic void setRunnable(Runnable callback) {\n+\t\trunnable = callback;\n+\t}\n+\n+\tpublic AgentEditorActionType getType() {\n+\t\treturn actionType;\n+\t}\n+\n+\tenum AgentEditorActionType {\n+\t\tREFRESH(MESSAGE_REFRESH, IAction.AS_PUSH_BUTTON, UIPlugin.getDefault()\n+\t\t\t\t.getMCImageDescriptor(UIPlugin.ICON_REFRESH)), \/\/ \n+\t\tLOAD_PRESET(MESSAGE_LOAD_PRESET, IAction.AS_PUSH_BUTTON, UIPlugin.getDefault()\n+\t\t\t\t.getMCImageDescriptor(UIPlugin.ICON_CHANGE)), \/\/\n+\t\tSAVE_AS_PRESET(MESSAGE_SAVE_AS_PRESET, IAction.AS_PUSH_BUTTON, UIPlugin.getDefault()\n+\t\t\t\t.getMCImageDescriptor(UIPlugin.ICON_SAVE));\n+\n+\t\tprivate final String message;\n+\t\tprivate final int action;\n+\t\tprivate final ImageDescriptor imageDescriptor;\n+\n+\t\tAgentEditorActionType(String message, int action, ImageDescriptor imageDescriptor) {\n+\t\t\tthis.message = message;\n+\t\t\tthis.action = action;\n+\t\t\tthis.imageDescriptor = imageDescriptor;\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/AgentEditorAction.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.editor;\n+\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.ui.IEditorInput;\n+import org.eclipse.ui.IPersistableElement;\n+import org.eclipse.ui.ISharedImages;\n+import org.eclipse.ui.PlatformUI;\n+import org.openjdk.jmc.console.agent.AgentJmxHelper;\n+import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.IServerHandle;\n+\n+public class AgentEditorInput implements IEditorInput {\n+\n+\tprivate final IServerHandle serverHandle;\n+\tprivate final IConnectionHandle connectionHandle;\n+\tprivate final AgentJmxHelper agentJmxHelper;\n+\n+\tpublic AgentEditorInput(IServerHandle serverHandle, IConnectionHandle connectionHandle,\n+\t\t\tAgentJmxHelper agentJmxHelper) {\n+\t\tthis.serverHandle = serverHandle;\n+\t\tthis.connectionHandle = connectionHandle;\n+\t\tthis.agentJmxHelper = agentJmxHelper;\n+\t}\n+\n+\t@Override\n+\tpublic boolean exists() {\n+\t\treturn true;\n+\t}\n+\n+\tpublic IServerHandle getServerHandle() {\n+\t\treturn serverHandle;\n+\t}\n+\n+\tpublic IConnectionHandle getConnectionHandle() {\n+\t\treturn connectionHandle;\n+\t}\n+\n+\tpublic AgentJmxHelper getAgentJmxHelper() {\n+\t\treturn agentJmxHelper;\n+\t}\n+\n+\t@Override\n+\tpublic ImageDescriptor getImageDescriptor() {\n+\t\treturn PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJ_ELEMENT);\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn serverHandle.getServerDescriptor().getDisplayName();\n+\t}\n+\n+\t@Override\n+\tpublic IPersistableElement getPersistable() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic String getToolTipText() {\n+\t\treturn serverHandle.getServerDescriptor().getDisplayName();\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\treturn obj instanceof AgentEditorInput && ((AgentEditorInput) obj).serverHandle.equals(serverHandle);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn serverHandle.hashCode();\n+\t}\n+\n+\t@Override\n+\tpublic <T> T getAdapter(Class<T> adapter) {\n+\t\treturn null;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/AgentEditorInput.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,334 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.editor;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.window.Window;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.swt.widgets.FileDialog;\n+import org.eclipse.ui.IWorkbenchWindow;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.ui.forms.widgets.Form;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+import org.openjdk.jmc.console.agent.AgentJmxHelper;\n+import org.openjdk.jmc.console.agent.AgentPlugin;\n+import org.openjdk.jmc.console.agent.editor.sections.EventDetailSection;\n+import org.openjdk.jmc.console.agent.editor.sections.EventListSection;\n+import org.openjdk.jmc.console.agent.editor.sections.GlobalConfigSection;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+import org.openjdk.jmc.console.agent.manager.model.PresetRepository;\n+import org.openjdk.jmc.console.agent.manager.model.PresetRepositoryFactory;\n+import org.openjdk.jmc.console.agent.utils.ProbeValidator;\n+import org.openjdk.jmc.console.agent.utils.ValidationResult;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+import org.openjdk.jmc.ui.misc.DisplayToolkit;\n+import org.openjdk.jmc.ui.misc.MCLayoutFactory;\n+import org.openjdk.jmc.ui.wizards.OnePageWizardDialog;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.transform.stream.StreamSource;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.stream.Stream;\n+\n+public class AgentEditorUi {\n+\tprivate final ExecutorService EXECUTOR_SERVICE = Executors.newSingleThreadExecutor();\n+\n+\tprivate final AgentJmxHelper helper;\n+\tprivate final PresetRepository presetRepository = PresetRepositoryFactory.createSingleton();\n+\n+\tprivate final AgentEditorAction[] actions;\n+\n+\tprivate GlobalConfigSection globalConfigSection;\n+\tprivate EventListSection eventListSection;\n+\tprivate EventDetailSection eventDetailSection;\n+\n+\tpublic AgentEditorUi(AgentEditor editor, AgentEditorAction[] actions) {\n+\t\thelper = editor.getAgentEditorInput().getAgentJmxHelper();\n+\t\tthis.actions = Arrays.copyOf(actions, actions.length);\n+\n+\t\tbindAgentEditorActions();\n+\t}\n+\n+\tprotected void createContent(Form form, FormToolkit toolkit) {\n+\t\tComposite body = form.getBody();\n+\t\tbody.setLayout(MCLayoutFactory.createFormPageLayout());\n+\n+\t\tComposite container = new Composite(body, SWT.NONE);\n+\t\tcontainer.setLayout(new FillLayout());\n+\t\tcontainer.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tSashForm hSashForm = new SashForm(container, SWT.HORIZONTAL);\n+\t\tSashForm vSashForm = new SashForm(hSashForm, SWT.VERTICAL);\n+\n+\t\tglobalConfigSection = new GlobalConfigSection(vSashForm, toolkit);\n+\t\teventListSection = new EventListSection(vSashForm, toolkit);\n+\t\teventDetailSection = new EventDetailSection(hSashForm, toolkit);\n+\n+\t\teventListSection.addSelectionChangedListener(selectionChangedEvent -> eventDetailSection\n+\t\t\t\t.setInput((IEvent) selectionChangedEvent.getStructuredSelection().getFirstElement()));\n+\n+\t\thSashForm.setWeights(new int[] {3, 7});\n+\t\tvSashForm.setWeights(new int[] {1, 4});\n+\t}\n+\n+\tprotected void refresh(Runnable done) {\n+\t\tEXECUTOR_SERVICE.submit(() -> {\n+\t\t\tString probes = helper.retrieveEventProbes();\n+\t\t\tIPreset[] preset = new IPreset[] {null};\n+\t\t\tif (probes != null && !probes.isEmpty()) {\n+\t\t\t\tpreset[0] = presetRepository.createPreset();\n+\t\t\t\ttry {\n+\t\t\t\t\tpreset[0].deserialize(probes);\n+\t\t\t\t} catch (IOException | SAXException e) {\n+\t\t\t\t\t\/\/ TODO: display error dialog\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tDisplayToolkit.inDisplayThread().execute(() -> {\n+\t\t\t\tglobalConfigSection.setInput(preset[0]);\n+\t\t\t\teventListSection.setInput(preset[0]);\n+\t\t\t\teventDetailSection.setInput(null);\n+\t\t\t\tdone.run();\n+\t\t\t\tStream.of(actions).forEach((action) -> action.setEnabled(true));\n+\t\t\t});\n+\t\t});\n+\t}\n+\n+\tprivate void refresh() {\n+\t\tStream.of(actions).forEach((action) -> action.setEnabled(false));\n+\t\trefresh(() -> {\n+\t\t});\n+\t}\n+\n+\tprivate void loadPreset() {\n+\t\tStream.of(actions).forEach((action) -> action.setEnabled(false));\n+\n+\t\tPresetSelectorWizardPage presetSelector = new PresetSelectorWizardPage();\n+\t\tif (new OnePageWizardDialog(Display.getCurrent().getActiveShell(), presetSelector).open() != Window.OK) {\n+\t\t\tStream.of(actions).forEach((action) -> action.setEnabled(true));\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tString parentPath = PresetRepositoryFactory.getCreatedStorageDir().getAbsolutePath();\n+\t\t\tString filePath = parentPath + File.separator + presetSelector.getSelectedPreset().getFileName();\n+\t\t\tapplyConfig(filePath);\n+\t\t\trefresh(() -> {\n+\t\t\t});\n+\t\t} catch (IOException e) {\n+\t\t\tAgentPlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\"Could not find the file \" + presetSelector.getSelectedPreset().getFileName(), e);\n+\t\t} finally {\n+\t\t\tStream.of(actions).forEach((action) -> action.setEnabled(true));\n+\t\t}\n+\t}\n+\n+\tprivate void savePreset() {\n+\t\tIPreset preset = presetRepository.createPreset();\n+\t\ttry {\n+\t\t\tpreset.deserialize(helper.retrieveEventProbes());\n+\t\t\tpresetRepository.addPreset(preset);\n+\t\t} catch (IOException | SAXException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\tDialogToolkit.openConfirmOnUiThread(\"Saved to Preset\", \"Configuration saved to \" + preset.getFileName());\n+\t}\n+\n+\tprivate void bindAgentEditorActions() {\n+\t\tStream.of(actions).forEach((action) -> {\n+\t\t\tswitch (action.getType()) {\n+\t\t\tcase REFRESH:\n+\t\t\t\taction.setRunnable(this::refresh);\n+\t\t\t\tbreak;\n+\t\t\tcase LOAD_PRESET:\n+\t\t\t\taction.setRunnable(this::loadPreset);\n+\t\t\t\tbreak;\n+\t\t\tcase SAVE_AS_PRESET:\n+\t\t\t\taction.setRunnable(this::savePreset);\n+\t\t\t}\n+\n+\t\t});\n+\t}\n+\n+\tprivate class PresetSelectorWizardPage extends BaseWizardPage {\n+\t\tprivate static final String PAGE_NAME = \"Apply Preset\";\n+\t\tprivate static final String MESSAGE_PAGE_TITLE = \"Apply Preset\";\n+\t\tprivate static final String MESSAGE_PAGE_DESCRIPTION = \"Select a preset to apply\";\n+\t\tprivate static final String ID_PRESET = \"preset\"; \/\/ $NON-NLS-1$\n+\t\tprivate static final String MESSAGE_EVENTS = \"event(s)\";\n+\n+\t\tprivate TableInspector tableInspector;\n+\t\tprivate IPreset selectedPreset;\n+\n+\t\tpublic PresetSelectorWizardPage() {\n+\t\t\tsuper(PAGE_NAME);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void createControl(Composite parent) {\n+\t\t\tinitializeDialogUnits(parent);\n+\n+\t\t\tsetTitle(MESSAGE_PAGE_TITLE);\n+\t\t\tsetDescription(MESSAGE_PAGE_DESCRIPTION);\n+\n+\t\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\t\tsc.setContent(container);\n+\n+\t\t\tcontainer.setLayout(new FillLayout());\n+\t\t\tcreatePresetTableContainer(container);\n+\n+\t\t\tsc.setExpandHorizontal(true);\n+\t\t\tsc.setExpandVertical(true);\n+\t\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\t\tsetControl(sc);\n+\n+\t\t}\n+\n+\t\tprivate Composite createPresetTableContainer(Composite parent) {\n+\t\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\t\ttableInspector = new TableInspector(container, TableInspector.MULTI) {\n+\t\t\t\t@Override\n+\t\t\t\tprotected void addColumns() {\n+\t\t\t\t\taddColumn(ID_PRESET, new ColumnLabelProvider() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic String getText(Object element) {\n+\t\t\t\t\t\t\tif (!(element instanceof IPreset)) {\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"element must be an IPreset\"); \/\/ $NON-NLS-1$\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tIPreset preset = (IPreset) element;\n+\t\t\t\t\t\t\treturn preset.getFileName() + \" - \" + preset.getEvents().length + \" \" + MESSAGE_EVENTS;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic Image getImage(Object element) {\n+\t\t\t\t\t\t\treturn AgentPlugin.getDefault().getImage(AgentPlugin.ICON_AGENT); \/\/ TODO: replace the icon in the future\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t};\n+\t\t\ttableInspector.setContentProvider(new PresetTableContentProvider());\n+\t\t\ttableInspector.getViewer().addSelectionChangedListener(\n+\t\t\t\t\te -> selectedPreset = (IPreset) e.getStructuredSelection().getFirstElement());\n+\t\t\ttableInspector.setInput(presetRepository);\n+\n+\t\t\treturn container;\n+\t\t}\n+\n+\t\tpublic IPreset getSelectedPreset() {\n+\t\t\treturn selectedPreset;\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class PresetTableContentProvider extends AbstractStructuredContentProvider {\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object inputElement) {\n+\t\t\tif (!(inputElement instanceof PresetRepository)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be a PresetRepository\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tPresetRepository repository = (PresetRepository) inputElement;\n+\t\t\treturn repository.listPresets();\n+\t\t}\n+\t}\n+\n+\tprivate static final String ERROR_PAGE_TITLE = \"Error in Configuration\";\n+\n+\tprivate void applyConfig(String path) {\n+\t\ttry {\n+\t\t\tbyte[] bytes = Files.readAllBytes(Paths.get(path));\n+\t\t\tString validationMessage = validateProbeDefinition(new String(bytes, StandardCharsets.UTF_8));\n+\t\t\tif (!validationMessage.isEmpty()) {\n+\t\t\t\tDialogToolkit.openConfirmOnUiThread(ERROR_PAGE_TITLE, validationMessage);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\thelper.defineEventProbes(new String(bytes, StandardCharsets.UTF_8));\n+\t\t} catch (IOException e) {\n+\t\t\tAgentPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not apply XML config\", e);\n+\t\t}\n+\t}\n+\n+\tprivate String validateProbeDefinition(String configuration) {\n+\t\tProbeValidator validator = new ProbeValidator();\n+\t\ttry {\n+\t\t\tvalidator.validate(\n+\t\t\t\t\tnew StreamSource(new ByteArrayInputStream(configuration.getBytes(StandardCharsets.UTF_8))));\n+\t\t} catch (IOException e) {\n+\t\t\treturn e.getMessage();\n+\t\t} catch (SAXException e) {\n+\t\t\t\/\/ noop\n+\t\t}\n+\n+\t\tValidationResult result = validator.getValidationResult();\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tif (result.getFatalError() != null) {\n+\t\t\tsb.append(\"[FATAL]\\t\").append(result.getFatalError().getMessage()).append('\\n');\n+\t\t}\n+\n+\t\tfor (SAXException error : result.getErrors()) {\n+\t\t\tsb.append(\"[ERROR]\\t\").append(error.getMessage()).append('\\n');\n+\t\t}\n+\n+\t\tfor (SAXException warning : result.getErrors()) {\n+\t\t\tsb.append(\"[WARN]\\t\").append(warning.getMessage()).append('\\n');\n+\t\t}\n+\n+\t\treturn sb.toString();\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/AgentEditorUi.java","additions":334,"deletions":0,"binary":false,"changes":334,"status":"added"},{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.editor.sections;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.ITreeContentProvider;\n+import org.eclipse.jface.viewers.TreeViewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.StackLayout;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Tree;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+import org.openjdk.jmc.console.agent.manager.model.ICapturedValue;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+import org.openjdk.jmc.console.agent.manager.model.IField;\n+import org.openjdk.jmc.console.agent.manager.model.IMethodParameter;\n+import org.openjdk.jmc.ui.column.ColumnBuilder;\n+import org.openjdk.jmc.ui.column.ColumnManager;\n+import org.openjdk.jmc.ui.column.IColumn;\n+import org.openjdk.jmc.ui.misc.MCLayoutFactory;\n+import org.openjdk.jmc.ui.misc.MCSectionPart;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class EventDetailSection extends MCSectionPart {\n+\tprivate static final String SECTION_TITLE = \"Event Details\";\n+\tprivate static final String NO_EVENT_SELECTED = \"No event selected\";\n+\tprivate static final String HEADER_KEY = \"Key\";\n+\tprivate static final String HEADER_VALUE = \"Value\";\n+\n+\tprivate final Composite stack;\n+\tprivate final StackLayout stackLayout;\n+\tprivate final Composite message;\n+\tprivate final TreeViewer viewer;\n+\n+\tpublic EventDetailSection(Composite parent, FormToolkit toolkit) {\n+\t\tsuper(parent, toolkit, DEFAULT_TITLE_STYLE);\n+\n+\t\tgetSection().setText(SECTION_TITLE);\n+\n+\t\tComposite body = createSectionBody(MCLayoutFactory.createMarginFreeFormPageLayout());\n+\t\tstack = toolkit.createComposite(body);\n+\t\tstack.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\t\tstackLayout = new StackLayout();\n+\t\tstack.setLayout(stackLayout);\n+\n+\t\tmessage = toolkit.createComposite(stack);\n+\t\tmessage.setLayout(new GridLayout(1, false));\n+\t\ttoolkit.createLabel(message, NO_EVENT_SELECTED).setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true));\n+\n+\t\tviewer = createViewer(stack, toolkit);\n+\t\tviewer.getControl()\n+\t\t\t\t.setLayoutData(MCLayoutFactory.createFormPageLayoutData(SWT.DEFAULT, SWT.DEFAULT, true, true));\n+\n+\t\tstackLayout.topControl = message;\n+\t}\n+\n+\tprivate TreeViewer createViewer(Composite parent, FormToolkit formToolkit) {\n+\t\tTree tree = formToolkit.createTree(parent, SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION);\n+\t\tTreeViewer viewer = new TreeViewer(tree);\n+\t\tviewer.setContentProvider(new TreeContentProvider());\n+\n+\t\tList<IColumn> columns = new ArrayList<>();\n+\t\tcolumns.add(new ColumnBuilder(HEADER_KEY, HEADER_KEY, new ColumnLabelProvider() {\n+\t\t\t@Override\n+\t\t\tpublic String getText(Object element) {\n+\t\t\t\tMap.Entry<String, ?> entry = (Map.Entry<String, ?>) element;\n+\t\t\t\treturn entry.getKey();\n+\t\t\t}\n+\t\t}).build());\n+\t\tcolumns.add(new ColumnBuilder(HEADER_VALUE, HEADER_VALUE, new ColumnLabelProvider() {\n+\t\t\t@Override\n+\t\t\tpublic String getText(Object element) {\n+\t\t\t\tMap.Entry<String, ?> entry = (Map.Entry<String, ?>) element;\n+\t\t\t\treturn entry.getValue() instanceof String ? (String) entry.getValue() : \"\";\n+\t\t\t}\n+\t\t}).build());\n+\t\tColumnManager.build(viewer, columns, null);\n+\n+\t\treturn viewer;\n+\t}\n+\n+\tpublic void setInput(IEvent event) {\n+\t\tviewer.setInput(event);\n+\t\tstackLayout.topControl = event == null ? message : viewer.getControl();\n+\t\tstack.layout();\n+\t}\n+\n+\tprivate static class TreeContentProvider implements ITreeContentProvider {\n+\n+\t\tprivate Map<String, Object> serializeEvent(IEvent event) {\n+\t\t\tMap<String, Object> entries = new HashMap<>();\n+\t\t\tentries.put(\"ID\", event.getId());\n+\t\t\tentries.put(\"Name\", event.getName());\n+\t\t\tentries.put(\"Class\", event.getClazz());\n+\t\t\tentries.put(\"Description\", event.getDescription());\n+\t\t\tentries.put(\"Path\", event.getPath());\n+\t\t\tentries.put(\"Stack Trace\", String.valueOf(event.getStackTrace()));\n+\t\t\tentries.put(\"Rethrow\", String.valueOf(event.getRethrow()));\n+\t\t\tentries.put(\"Location\", String.valueOf(event.getLocation()));\n+\t\t\tentries.put(\"Method\", serializeMethod(event));\n+\t\t\tentries.put(\"Fields\", serializeFields(event));\n+\n+\t\t\treturn entries;\n+\t\t}\n+\n+\t\tprivate Map<String, Object> serializeFields(IEvent event) {\n+\t\t\tMap<String, Object> fields = new HashMap<>();\n+\t\t\tint i = 0;\n+\t\t\tfor (IField field : event.getFields()) {\n+\t\t\t\tfields.put(\"[\" + (i++) + \"]\", serializeField(field));\n+\t\t\t}\n+\n+\t\t\treturn fields;\n+\t\t}\n+\n+\t\tprivate Map<String, String> serializeField(IField field) {\n+\t\t\tMap<String, String> f = serializeCapturedValue(field);\n+\t\t\tf.put(\"Expression\", field.getExpression());\n+\t\t\treturn f;\n+\t\t}\n+\n+\t\tprivate Map<String, Object> serializeMethod(IEvent event) {\n+\t\t\tMap<String, Object> method = new HashMap<>();\n+\t\t\tmethod.put(\"Name\", event.getMethodName());\n+\t\t\tmethod.put(\"Descriptor\", event.getMethodDescriptor());\n+\t\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\t\tint i = 0;\n+\t\t\tfor (IMethodParameter methodParameter : event.getMethodParameters()) {\n+\t\t\t\tparameters.put(\"[\" + (i++) + \"]\", serializeParameter(methodParameter));\n+\t\t\t}\n+\t\t\tmethod.put(\"Parameters\", parameters);\n+\t\t\tmethod.put(\"Return Value\", event.getMethodReturnValue());\n+\t\t\treturn method;\n+\t\t}\n+\n+\t\tprivate Map<String, String> serializeCapturedValue(ICapturedValue capturedValue) {\n+\t\t\tMap<String, String> value = new HashMap<>();\n+\t\t\tvalue.put(\"Name\", capturedValue.getName());\n+\t\t\tvalue.put(\"Description\", capturedValue.getDescription());\n+\t\t\tvalue.put(\"Content Type\", String.valueOf(capturedValue.getContentType()));\n+\t\t\tvalue.put(\"Relation Key\", capturedValue.getRelationKey());\n+\t\t\tvalue.put(\"Converter\", capturedValue.getConverter());\n+\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tprivate Map<String, String> serializeParameter(IMethodParameter methodParameter) {\n+\t\t\tMap<String, String> method = serializeCapturedValue(methodParameter);\n+\t\t\tmethod.put(\"Index\", String.valueOf(methodParameter.getIndex()));\n+\n+\t\t\treturn method;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object o) {\n+\t\t\tif (o == null) {\n+\t\t\t\treturn new Object[0];\n+\t\t\t}\n+\n+\t\t\tif (!(o instanceof IEvent)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be an IEvent\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\treturn serializeEvent((IEvent) o).entrySet().toArray(new Map.Entry[0]);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Object[] getChildren(Object o) {\n+\t\t\tMap.Entry<String, ?> entry = (Map.Entry<String, ?>) o;\n+\t\t\tif (entry.getValue() instanceof Map) {\n+\t\t\t\treturn ((Map) entry.getValue()).entrySet().toArray(new Map.Entry[0]);\n+\t\t\t}\n+\n+\t\t\treturn new Object[0];\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Object getParent(Object o) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean hasChildren(Object o) {\n+\t\t\tMap.Entry<String, ?> entry = (Map.Entry<String, ?>) o;\n+\t\t\treturn entry.getValue() instanceof Map;\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/sections\/EventDetailSection.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.editor.sections;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.ISelectionChangedListener;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.StackLayout;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+import org.openjdk.jmc.console.agent.manager.model.Event;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.MCLayoutFactory;\n+import org.openjdk.jmc.ui.misc.MCSectionPart;\n+\n+public class EventListSection extends MCSectionPart {\n+\tprivate static final String SECTION_TITLE = \"Event List\";\n+\tprivate static final String NO_EVENT_REGISTERED = \"No event registered\";\n+\n+\tprivate final Composite stack;\n+\tprivate final StackLayout stackLayout;\n+\tprivate final Composite message;\n+\tprivate final TableViewer viewer;\n+\n+\tpublic EventListSection(Composite parent, FormToolkit toolkit) {\n+\t\tsuper(parent, toolkit, DEFAULT_TITLE_STYLE);\n+\n+\t\tgetSection().setText(SECTION_TITLE);\n+\n+\t\tComposite body = createSectionBody(MCLayoutFactory.createMarginFreeFormPageLayout());\n+\t\tstack = toolkit.createComposite(body);\n+\t\tstack.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\t\tstackLayout = new StackLayout();\n+\t\tstack.setLayout(stackLayout);\n+\n+\t\tmessage = toolkit.createComposite(stack);\n+\t\tmessage.setLayout(new GridLayout(1, false));\n+\t\ttoolkit.createLabel(message, NO_EVENT_REGISTERED)\n+\t\t\t\t.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true));\n+\n+\t\tviewer = createViewer(stack, toolkit);\n+\t\tviewer.getControl()\n+\t\t\t\t.setLayoutData(MCLayoutFactory.createFormPageLayoutData(SWT.DEFAULT, SWT.DEFAULT, true, true));\n+\t}\n+\n+\tprivate TableViewer createViewer(Composite parent, FormToolkit formToolkit) {\n+\t\tTable table = formToolkit.createTable(parent, SWT.V_SCROLL | SWT.H_SCROLL | SWT.BORDER | SWT.FULL_SELECTION);\n+\t\tTableViewer viewer = new TableViewer(table);\n+\t\tviewer.setContentProvider(new ListContentProvider());\n+\n+\t\tviewer.setLabelProvider(new ColumnLabelProvider() {\n+\t\t\t@Override\n+\t\t\tpublic String getText(Object element) {\n+\t\t\t\treturn ((Event) element).getName();\n+\t\t\t}\n+\t\t});\n+\n+\t\treturn viewer;\n+\t}\n+\n+\tpublic void setInput(IPreset preset) {\n+\t\tviewer.setInput(preset);\n+\t\tstackLayout.topControl = preset == null || preset.getEvents().length == 0 ? message : viewer.getControl();\n+\t\tstack.layout();\n+\t}\n+\n+\tpublic void addSelectionChangedListener(ISelectionChangedListener listener) {\n+\t\tviewer.addSelectionChangedListener(listener);\n+\t}\n+\n+\tpublic void removeSelectionChangedListener(ISelectionChangedListener listener) {\n+\t\tviewer.removeSelectionChangedListener(listener);\n+\t}\n+\n+\tprivate static class ListContentProvider extends AbstractStructuredContentProvider {\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object inputElement) {\n+\t\t\tif (inputElement == null) {\n+\t\t\t\treturn new Object[0];\n+\t\t\t}\n+\n+\t\t\tif (!(inputElement instanceof IPreset)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be an IPreset\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\treturn ((IPreset) inputElement).getEvents();\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/sections\/EventListSection.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.editor.sections;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.StackLayout;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Table;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+import org.openjdk.jmc.ui.column.ColumnBuilder;\n+import org.openjdk.jmc.ui.column.ColumnManager;\n+import org.openjdk.jmc.ui.column.IColumn;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.MCLayoutFactory;\n+import org.openjdk.jmc.ui.misc.MCSectionPart;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class GlobalConfigSection extends MCSectionPart {\n+\tprivate static final String SECTION_TITLE = \"Global Configurations\";\n+\tprivate static final String HEADER_OPTION = \"Option\";\n+\tprivate static final String HEADER_VALUE = \"Value\";\n+\tprivate static final String ALLOW_TO_STRING = \"Allow toString()\";\n+\tprivate static final String ALLOW_CONVERTER = \"Allow converters\";\n+\tprivate static final String CLASS_PREFIX = \"Class prefix\";\n+\tprivate static final String NO_CONFIG_APPLIED = \"No configuration applied\";\n+\n+\tprivate final Composite stack;\n+\tprivate final StackLayout stackLayout;\n+\tprivate final Composite message;\n+\tprivate final TableViewer viewer;\n+\n+\tpublic GlobalConfigSection(Composite parent, FormToolkit toolkit) {\n+\t\tsuper(parent, toolkit, DEFAULT_TITLE_STYLE);\n+\n+\t\tgetSection().setText(SECTION_TITLE);\n+\n+\t\tComposite body = createSectionBody(MCLayoutFactory.createMarginFreeFormPageLayout());\n+\t\tstack = toolkit.createComposite(body);\n+\t\tstack.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\t\tstackLayout = new StackLayout();\n+\t\tstack.setLayout(stackLayout);\n+\n+\t\tmessage = toolkit.createComposite(stack);\n+\t\tmessage.setLayout(new GridLayout(1, false));\n+\t\ttoolkit.createLabel(message, NO_CONFIG_APPLIED).setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, true, true));\n+\n+\t\tviewer = createViewer(stack, toolkit);\n+\t\tviewer.getControl()\n+\t\t\t\t.setLayoutData(MCLayoutFactory.createFormPageLayoutData(SWT.DEFAULT, SWT.DEFAULT, true, true));\n+\n+\t\tstackLayout.topControl = message;\n+\t}\n+\n+\tprivate TableViewer createViewer(Composite parent, FormToolkit formToolkit) {\n+\t\tTable table = formToolkit.createTable(parent, SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION);\n+\t\tTableViewer viewer = new TableViewer(table);\n+\t\tviewer.setContentProvider(new ConfigContentProvider());\n+\n+\t\tList<IColumn> columns = new ArrayList<>(2);\n+\t\tcolumns.add(new ColumnBuilder(HEADER_OPTION, HEADER_OPTION, new ColumnLabelProvider() {\n+\t\t\t@Override\n+\t\t\tpublic String getText(Object element) {\n+\t\t\t\treturn ((Map.Entry<String, String>) element).getKey();\n+\t\t\t}\n+\t\t}).build());\n+\t\tcolumns.add(new ColumnBuilder(HEADER_VALUE, HEADER_VALUE, new ColumnLabelProvider() {\n+\t\t\t@Override\n+\t\t\tpublic String getText(Object element) {\n+\t\t\t\treturn ((Map.Entry<String, String>) element).getValue();\n+\t\t\t}\n+\t\t}).build());\n+\t\tColumnManager.build(viewer, columns, null);\n+\n+\t\treturn viewer;\n+\t}\n+\n+\tpublic void setInput(IPreset preset) {\n+\t\tviewer.setInput(preset);\n+\t\tstackLayout.topControl = preset == null ? message : viewer.getControl();\n+\t\tstack.layout();\n+\t}\n+\n+\tprivate static class ConfigContentProvider extends AbstractStructuredContentProvider {\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object inputElement) {\n+\t\t\tif (inputElement == null) {\n+\t\t\t\treturn new Object[0];\n+\t\t\t}\n+\n+\t\t\tif (!(inputElement instanceof IPreset)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be an IPreset\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tIPreset preset = (IPreset) inputElement;\n+\n+\t\t\tMap<String, String> entries = new HashMap<>(3);\n+\t\t\tentries.put(ALLOW_TO_STRING, String.valueOf(preset.getAllowToString()));\n+\t\t\tentries.put(ALLOW_CONVERTER, String.valueOf(preset.getAllowConverter()));\n+\t\t\tentries.put(CLASS_PREFIX, preset.getClassPrefix());\n+\n+\t\t\treturn entries.entrySet().toArray(new Map.Entry[0]);\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/sections\/GlobalConfigSection.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager;\n+\n+import org.eclipse.core.commands.AbstractHandler;\n+import org.eclipse.core.commands.ExecutionEvent;\n+import org.eclipse.jface.dialogs.Dialog;\n+import org.eclipse.swt.widgets.Display;\n+import org.eclipse.swt.widgets.Shell;\n+import org.openjdk.jmc.console.agent.manager.model.PresetRepository;\n+import org.openjdk.jmc.console.agent.manager.model.PresetRepositoryFactory;\n+\n+public class OpenPresetManagerHandler extends AbstractHandler {\n+\n+\t@Override\n+\tpublic Object execute(ExecutionEvent event) {\n+\t\tShell shell = Display.getCurrent().getActiveShell();\n+\t\tPresetRepository repository = PresetRepositoryFactory.createSingleton();\n+\n+\t\tDialog dialog = PresetManager.createFor(shell, repository);\n+\t\tdialog.open();\n+\t\treturn null;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/OpenPresetManagerHandler.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager;\n+\n+import org.eclipse.jface.dialogs.Dialog;\n+import org.eclipse.jface.wizard.IWizardPage;\n+import org.eclipse.swt.widgets.Shell;\n+import org.openjdk.jmc.console.agent.manager.model.PresetRepository;\n+import org.openjdk.jmc.console.agent.manager.wizards.PresetManagerPage;\n+import org.openjdk.jmc.ui.wizards.OnePageWizardDialog;\n+\n+public class PresetManager extends OnePageWizardDialog {\n+\tprivate PresetManager(Shell parent, IWizardPage page) {\n+\t\tsuper(parent, page);\n+\t}\n+\n+\tpublic static Dialog createFor(Shell shell, PresetRepository repository) {\n+\t\tPresetManager manager = new PresetManager(shell, new PresetManagerPage(repository));\n+\t\treturn manager;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/PresetManager.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Locale;\n+\n+class CapturedValue implements ICapturedValue {\n+\n+\tprivate static final String DEFAULT_STRING_FIELD = \"\"; \/\/ $NON-NLS-1$\n+\tprivate static final Object DEFAULT_OBJECT_TYPE = null;\n+\tprivate static final String CONVERTER_REGEX = \"([a-zA-Z_$][a-zA-Z0-9_$]*\\\\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)\"; \/\/ $NON-NLS-1$\n+\n+\tprivate static final String XML_TAG_CAPTURED_VALUE = \"capturedvalue\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_NAME = \"name\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_DESCRIPTION = \"description\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_CONTENT_TYPE = \"contenttype\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_RELATION_KEY = \"relationkey\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_CONVERTER = \"converter\"; \/\/ $NON-NLS-1$\n+\n+\tprivate String name;\n+\tprivate String description;\n+\tprivate ContentType contentType;\n+\tprivate String relationKey;\n+\tprivate String converter;\n+\n+\tCapturedValue() {\n+\t\tname = DEFAULT_STRING_FIELD;\n+\t\tdescription = DEFAULT_STRING_FIELD;\n+\t\tcontentType = (ContentType) DEFAULT_OBJECT_TYPE;\n+\t\trelationKey = DEFAULT_STRING_FIELD;\n+\t\tconverter = DEFAULT_STRING_FIELD;\n+\t}\n+\n+\tCapturedValue(Element element) {\n+\t\tthis();\n+\n+\t\tNodeList elements;\n+\t\telements = element.getElementsByTagName(XML_TAG_NAME);\n+\t\tif (elements.getLength() != 0) {\n+\t\t\tname = elements.item(0).getTextContent();\n+\t\t}\n+\n+\t\telements = element.getElementsByTagName(XML_TAG_DESCRIPTION);\n+\t\tif (elements.getLength() != 0) {\n+\t\t\tdescription = elements.item(0).getTextContent();\n+\t\t}\n+\n+\t\telements = element.getElementsByTagName(XML_TAG_CONTENT_TYPE);\n+\t\tif (elements.getLength() != 0) {\n+\t\t\tcontentType = ContentType.valueOf(elements.item(0).getTextContent().toUpperCase(Locale.ENGLISH));\n+\t\t}\n+\n+\t\telements = element.getElementsByTagName(XML_TAG_RELATION_KEY);\n+\t\tif (elements.getLength() != 0) {\n+\t\t\trelationKey = elements.item(0).getTextContent();\n+\t\t}\n+\n+\t\telements = element.getElementsByTagName(XML_TAG_CONVERTER);\n+\t\tif (elements.getLength() != 0) {\n+\t\t\tconverter = elements.item(0).getTextContent();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Element buildElement(Document document) {\n+\t\tElement element = document.createElement(XML_TAG_CAPTURED_VALUE);\n+\n+\t\tif (name != null && !name.isEmpty()) {\n+\t\t\tElement nameElement = document.createElement(XML_TAG_NAME);\n+\t\t\tnameElement.setTextContent(name);\n+\t\t\telement.appendChild(nameElement);\n+\t\t}\n+\n+\t\tif (description != null && !description.isEmpty()) {\n+\t\t\tElement descriptionElement = document.createElement(XML_TAG_DESCRIPTION);\n+\t\t\tdescriptionElement.setTextContent(description);\n+\t\t\telement.appendChild(descriptionElement);\n+\t\t}\n+\n+\t\tif (contentType != null) {\n+\t\t\tElement contentTypeElement = document.createElement(XML_TAG_CONTENT_TYPE);\n+\t\t\tcontentTypeElement.setTextContent(contentType.toString());\n+\t\t\telement.appendChild(contentTypeElement);\n+\t\t}\n+\n+\t\tif (relationKey != null && !relationKey.isEmpty()) {\n+\t\t\tElement relationKeyElement = document.createElement(XML_TAG_RELATION_KEY);\n+\t\t\trelationKeyElement.setTextContent(relationKey);\n+\t\t\telement.appendChild(relationKeyElement);\n+\t\t}\n+\n+\t\tif (converter != null && !converter.isEmpty()) {\n+\t\t\tElement converterElement = document.createElement(XML_TAG_CONVERTER);\n+\t\t\tconverterElement.setTextContent(converter);\n+\t\t\telement.appendChild(converterElement);\n+\t\t}\n+\n+\t\treturn element;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\t@Override\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn description;\n+\t}\n+\n+\t@Override\n+\tpublic void setDescription(String description) {\n+\t\tthis.description = description;\n+\t}\n+\n+\t@Override\n+\tpublic ContentType getContentType() {\n+\t\treturn contentType;\n+\t}\n+\n+\t@Override\n+\tpublic void setContentType(ContentType contentType) {\n+\t\tthis.contentType = contentType;\n+\t}\n+\n+\t@Override\n+\tpublic String getRelationKey() {\n+\t\treturn relationKey;\n+\t}\n+\n+\t@Override\n+\tpublic void setRelationKey(String relationKey) {\n+\t\tif (relationKey != null && !relationKey.isEmpty()) {\n+\t\t\trelationKey = relationKey.trim();\n+\t\t\ttry {\n+\t\t\t\tnew URI(relationKey);\n+\t\t\t} catch (URISyntaxException e) {\n+\t\t\t\tthrow new IllegalArgumentException(Messages.CapturedValue_ERROR_RELATION_KEY_HAS_INCORRECT_SYNTAX);\n+\t\t\t}\n+\t\t}\n+\n+\t\tthis.relationKey = relationKey;\n+\t}\n+\n+\t@Override\n+\tpublic String getConverter() {\n+\t\treturn converter;\n+\t}\n+\n+\t@Override\n+\tpublic void setConverter(String converter) {\n+\t\tif (converter != null && !converter.isEmpty()) {\n+\t\t\tconverter = converter.trim();\n+\t\t\tif (!converter.matches(CONVERTER_REGEX)) {\n+\t\t\t\tthrow new IllegalArgumentException(Messages.CapturedValue_ERROR_CONVERTER_HAS_INCORRECT_SYNTAX);\n+\t\t\t}\n+\t\t}\n+\n+\t\tthis.converter = converter;\n+\t}\n+\n+\tprotected void copyContentToWorkingCopy(CapturedValue copy) {\n+\t\tcopy.name = name;\n+\t\tcopy.description = description;\n+\t\tcopy.contentType = contentType;\n+\t\tcopy.relationKey = relationKey;\n+\t\tcopy.converter = converter;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/CapturedValue.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"},{"patch":"@@ -0,0 +1,685 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class Event implements IEvent {\n+\tprivate static final String DEFAULT_STRING_FIELD = \"\"; \/\/ $NON-NLS-1$\n+\tprivate static final boolean DEFAULT_BOOLEAN_FIELD = false;\n+\tprivate static final Object DEFAULT_OBJECT_FIELD = null;\n+\tprivate static final String DEFAULT_EVENT_ID = \"event.id\"; \/\/ $NON-NLS-1$\n+\tprivate static final String DEFAULT_EVENT_NAME = \"New Custom Event\"; \/\/ $NON-NLS-1$\n+\tprivate static final String DEFAULT_EVENT_CLAZZ = \"com.company.project.MyClass\"; \/\/ $NON-NLS-1$\n+\tprivate static final String DEFAULT_METHOD_NAME = \"myMethod\"; \/\/ $NON-NLS-1$\n+\tprivate static final String DEFAULT_METHOD_DESCRIPTOR = \"()V\"; \/\/ $NON-NLS-1$\n+\tprivate static final String CLAZZ_REGEX = \"([a-zA-Z_$][a-zA-Z0-9_$]*\\\\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)\"; \/\/ $NON-NLS-1$\n+\tprivate static final String PATH_REGEX = \"([^\/]+\/)*([^\/]*)\"; \/\/ $NON-NLS-1$\n+\tprivate static final String METHOD_NAME_REGEX = \"[a-zA-Z_$][a-zA-Z0-9_$]*\"; \/\/ $NON-NLS-1$\n+\tprivate static final String METHOD_DESCRIPTOR_REGEX = \"\\\\((\\\\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*\/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))*\\\\)(V|\\\\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*\/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))\"; \/\/ $NON-NLS-1$\n+\n+\tprivate static final Pattern NAME_WITH_COUNT_PATTERN = Pattern.compile(\"^(.*)\\\\s*\\\\((\\\\d+)\\\\)$\"); \/\/ $NON-NLS-1$\n+\tprivate static final Pattern COUNT_SUFFIX_PATTERN = Pattern.compile(\"^\\\\s*\\\\((\\\\d+)\\\\)$\"); \/\/ $NON-NLS-1$\n+\n+\tprivate static final String XML_TAG_EVENT = \"event\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_NAME = \"label\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_DESCRIPTION = \"description\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_CLASS = \"class\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_PATH = \"path\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_STACK_TRACE = \"stacktrace\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_RETHROW = \"rethrow\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_LOCATION = \"location\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_METHOD = \"method\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_DESCRIPTOR = \"descriptor\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_PARAMETERS = \"parameters\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_PARAMETER = \"parameter\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_FIELDS = \"fields\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_FIELD = \"field\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_RETURN_VALUE = \"returnvalue\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_ATTRIBUTE_ID = \"id\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_METHOD_NAME = \"name\"; \/\/ $NON-NLS-1$\n+\n+\tprivate final Preset preset;\n+\tprivate final List<IMethodParameter> parameters = new ArrayList<>();\n+\tprivate final List<IField> fields = new ArrayList<>();\n+\n+\tprivate String id;\n+\tprivate String name;\n+\tprivate String clazz;\n+\tprivate String description;\n+\tprivate String path;\n+\tprivate boolean recordStackTrace;\n+\tprivate boolean useRethrow;\n+\tprivate Location location;\n+\tprivate String methodName;\n+\tprivate String methodDescriptor;\n+\tprivate IMethodReturnValue returnValue;\n+\n+\tEvent(Preset preset) {\n+\t\tthis.preset = preset;\n+\n+\t\tid = DEFAULT_EVENT_ID;\n+\t\tname = DEFAULT_EVENT_NAME;\n+\t\tclazz = DEFAULT_EVENT_CLAZZ;\n+\t\tdescription = DEFAULT_STRING_FIELD;\n+\t\tpath = DEFAULT_STRING_FIELD;\n+\t\trecordStackTrace = DEFAULT_BOOLEAN_FIELD;\n+\t\tuseRethrow = DEFAULT_BOOLEAN_FIELD;\n+\t\tmethodName = DEFAULT_METHOD_NAME;\n+\t\tmethodDescriptor = DEFAULT_METHOD_DESCRIPTOR;\n+\t\tlocation = (Location) DEFAULT_OBJECT_FIELD;\n+\t}\n+\n+\tEvent(Preset preset, Element element) {\n+\t\tthis(preset);\n+\n+\t\tid = element.getAttribute(XML_ATTRIBUTE_ID);\n+\t\tname = getFirstDirectChildElementByTagName(element, XML_TAG_NAME).getTextContent();\n+\t\tclazz = getFirstDirectChildElementByTagName(element, XML_TAG_CLASS).getTextContent();\n+\n+\t\tElement descriptionElement = getFirstDirectChildElementByTagName(element, XML_TAG_DESCRIPTION);\n+\t\tif (descriptionElement != null) {\n+\t\t\tdescription = descriptionElement.getTextContent();\n+\t\t}\n+\n+\t\tElement pathElement = getFirstDirectChildElementByTagName(element, XML_TAG_PATH);\n+\t\tif (pathElement != null) {\n+\t\t\tpath = pathElement.getTextContent();\n+\t\t}\n+\n+\t\tElement stackTraceElement = getFirstDirectChildElementByTagName(element, XML_TAG_STACK_TRACE);\n+\t\tif (stackTraceElement != null) {\n+\t\t\trecordStackTrace = Boolean.parseBoolean(stackTraceElement.getTextContent());\n+\t\t}\n+\n+\t\tElement rethrowElement = getFirstDirectChildElementByTagName(element, XML_TAG_RETHROW);\n+\t\tif (rethrowElement != null) {\n+\t\t\tuseRethrow = Boolean.parseBoolean(rethrowElement.getTextContent());\n+\t\t}\n+\n+\t\tElement locationElement = getFirstDirectChildElementByTagName(element, XML_TAG_LOCATION);\n+\t\tif (locationElement != null) {\n+\t\t\tlocation = Location.valueOf(locationElement.getTextContent().toUpperCase(Locale.ENGLISH));\n+\t\t}\n+\n+\t\tElement methodElement = getFirstDirectChildElementByTagName(element, XML_TAG_METHOD);\n+\t\tmethodName = getFirstDirectChildElementByTagName(methodElement, XML_TAG_METHOD_NAME).getTextContent();\n+\t\tmethodDescriptor = getFirstDirectChildElementByTagName(methodElement, XML_TAG_DESCRIPTOR).getTextContent();\n+\n+\t\tElement parametersElement = getFirstDirectChildElementByTagName(methodElement, XML_TAG_PARAMETERS);\n+\t\tif (parametersElement != null) {\n+\t\t\tNodeList parameterNodes = parametersElement.getElementsByTagName(XML_TAG_PARAMETER);\n+\t\t\tfor (int i = 0; i < parameterNodes.getLength(); i++) {\n+\t\t\t\tparameters.add(createMethodParameter((Element) parameterNodes.item(i)));\n+\t\t\t}\n+\t\t}\n+\n+\t\tElement returnValueElement = getFirstDirectChildElementByTagName(methodElement, XML_TAG_RETURN_VALUE);\n+\t\tif (returnValueElement != null) {\n+\t\t\treturnValue = createMethodReturnValue(returnValueElement);\n+\t\t}\n+\n+\t\tElement fieldsElement = getFirstDirectChildElementByTagName(element, XML_TAG_FIELDS);\n+\t\tif (fieldsElement != null) {\n+\t\t\tNodeList fieldNodes = fieldsElement.getElementsByTagName(XML_TAG_FIELD);\n+\t\t\tfor (int i = 0; i < fieldNodes.getLength(); i++) {\n+\t\t\t\tfields.add(createField((Element) fieldNodes.item(i)));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate Element buildMethodElement(Document document) {\n+\t\tElement methodElement = document.createElement(XML_TAG_METHOD);\n+\t\t{\n+\t\t\tElement methodNameElement = document.createElement(XML_TAG_METHOD_NAME);\n+\t\t\tmethodNameElement.setTextContent(methodName);\n+\t\t\tmethodElement.appendChild(methodNameElement);\n+\n+\t\t\tElement methodDescriptorElement = document.createElement(XML_TAG_DESCRIPTOR);\n+\t\t\tmethodDescriptorElement.setTextContent(methodDescriptor);\n+\t\t\tmethodElement.appendChild(methodDescriptorElement);\n+\n+\t\t\tif (!parameters.isEmpty()) {\n+\t\t\t\tElement methodParametersElement = document.createElement(XML_TAG_PARAMETERS);\n+\t\t\t\tfor (IMethodParameter methodParameter : parameters) {\n+\t\t\t\t\tmethodParametersElement.appendChild(methodParameter.buildElement(document));\n+\t\t\t\t}\n+\t\t\t\tmethodElement.appendChild(methodParametersElement);\n+\t\t\t}\n+\n+\t\t\tif (returnValue != null) {\n+\t\t\t\tmethodElement.appendChild(returnValue.buildElement(document));\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn methodElement;\n+\t}\n+\n+\t@Override\n+\tpublic Element buildElement(Document document) {\n+\t\tElement element = document.createElement(XML_TAG_EVENT);\n+\t\telement.setAttribute(XML_ATTRIBUTE_ID, id);\n+\n+\t\tElement nameElement = document.createElement(XML_TAG_NAME);\n+\t\tnameElement.setTextContent(name);\n+\t\telement.appendChild(nameElement);\n+\n+\t\tif (description != null && !description.isEmpty()) {\n+\t\t\tElement descriptionElement = document.createElement(XML_TAG_DESCRIPTION);\n+\t\t\tdescriptionElement.setTextContent(description);\n+\t\t\telement.appendChild(descriptionElement);\n+\t\t}\n+\n+\t\tElement classElement = document.createElement(XML_TAG_CLASS);\n+\t\tclassElement.setTextContent(clazz);\n+\t\telement.appendChild(classElement);\n+\n+\t\tif (path != null && !path.isEmpty()) {\n+\t\t\tElement pathElement = document.createElement(XML_TAG_PATH);\n+\t\t\tpathElement.setTextContent(path);\n+\t\t\telement.appendChild(pathElement);\n+\t\t}\n+\n+\t\tElement stackTraceElement = document.createElement(XML_TAG_STACK_TRACE);\n+\t\tstackTraceElement.setTextContent(String.valueOf(recordStackTrace));\n+\t\telement.appendChild(stackTraceElement);\n+\n+\t\tElement rethrowElement = document.createElement(XML_TAG_RETHROW);\n+\t\trethrowElement.setTextContent(String.valueOf(useRethrow));\n+\t\telement.appendChild(rethrowElement);\n+\n+\t\tif (location != null) {\n+\t\t\tElement locationElement = document.createElement(XML_TAG_LOCATION);\n+\t\t\tlocationElement.setTextContent(location.toString());\n+\t\t\telement.appendChild(locationElement);\n+\t\t}\n+\n+\t\telement.appendChild(buildMethodElement(document));\n+\n+\t\tif (!fields.isEmpty()) {\n+\t\t\tElement fieldsElement = document.createElement(XML_TAG_FIELDS);\n+\t\t\tfor (IField field : fields) {\n+\t\t\t\tfieldsElement.appendChild(field.buildElement(document));\n+\t\t\t}\n+\t\t\telement.appendChild(fieldsElement);\n+\t\t}\n+\n+\t\treturn element;\n+\t}\n+\n+\t@Override\n+\tpublic String getId() {\n+\t\treturn id;\n+\t}\n+\n+\t@Override\n+\tpublic void setId(String id) {\n+\t\tif (id == null || id.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_ID_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tthis.id = id;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\t@Override\n+\tpublic void setName(String name) {\n+\t\tif (name == null || name.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tthis.name = name;\n+\t}\n+\n+\t@Override\n+\tpublic String getClazz() {\n+\t\treturn clazz;\n+\t}\n+\n+\t@Override\n+\tpublic void setClazz(String clazz) {\n+\t\tif (clazz == null || clazz.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_CLASS_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tclazz = clazz.trim();\n+\t\tif (!clazz.matches(CLAZZ_REGEX)) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_CLASS_HAS_INCORRECT_SYNTAX);\n+\t\t}\n+\n+\t\tthis.clazz = clazz;\n+\t}\n+\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn description;\n+\t}\n+\n+\t@Override\n+\tpublic void setDescription(String description) {\n+\t\tthis.description = description;\n+\t}\n+\n+\t@Override\n+\tpublic String getPath() {\n+\t\treturn path;\n+\t}\n+\n+\t@Override\n+\tpublic void setPath(String path) {\n+\t\tif (path != null) {\n+\t\t\tpath = path.trim();\n+\t\t\tif (!path.matches(PATH_REGEX)) {\n+\t\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_PATH_HAS_INCORRECT_SYNTAX);\n+\t\t\t}\n+\t\t}\n+\n+\t\tthis.path = path;\n+\t}\n+\n+\t@Override\n+\tpublic boolean getStackTrace() {\n+\t\treturn recordStackTrace;\n+\t}\n+\n+\t@Override\n+\tpublic void setStackTrace(boolean enabled) {\n+\t\trecordStackTrace = enabled;\n+\t}\n+\n+\t@Override\n+\tpublic boolean getRethrow() {\n+\t\treturn useRethrow;\n+\t}\n+\n+\t@Override\n+\tpublic void setRethrow(boolean enabled) {\n+\t\tuseRethrow = enabled;\n+\t}\n+\n+\t@Override\n+\tpublic Location getLocation() {\n+\t\treturn location;\n+\t}\n+\n+\t@Override\n+\tpublic void setLocation(Location location) {\n+\t\tthis.location = location;\n+\n+\t}\n+\n+\t@Override\n+\tpublic String getMethodName() {\n+\t\treturn methodName;\n+\t}\n+\n+\t@Override\n+\tpublic void setMethodName(String methodName) {\n+\t\tif (methodName == null || methodName.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_METHOD_NAME_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tmethodName = methodName.trim();\n+\t\tif (!methodName.matches(METHOD_NAME_REGEX)) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_METHOD_NAME_HAS_INCORRECT_SYNTAX);\n+\t\t}\n+\n+\t\tthis.methodName = methodName;\n+\t}\n+\n+\t@Override\n+\tpublic String getMethodDescriptor() {\n+\t\treturn methodDescriptor;\n+\t}\n+\n+\t@Override\n+\tpublic void setMethodDescriptor(String methodDescriptor) {\n+\t\tif (methodDescriptor == null || methodDescriptor.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_METHOD_DESCRIPTOR_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tmethodDescriptor = methodDescriptor.trim();\n+\t\tif (!methodDescriptor.matches(METHOD_DESCRIPTOR_REGEX)) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_METHOD_DESCRIPTOR_HAS_INCORRECT_SYNTAX);\n+\t\t}\n+\n+\t\tthis.methodDescriptor = methodDescriptor;\n+\t}\n+\n+\t@Override\n+\tpublic IMethodParameter[] getMethodParameters() {\n+\t\treturn parameters.toArray(new IMethodParameter[0]);\n+\t}\n+\n+\t@Override\n+\tpublic void addMethodParameter(IMethodParameter methodParameter) {\n+\t\tif (methodParameter == null) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_METHOD_PARAMETER_CANNOT_BE_NULL);\n+\t\t}\n+\t\tif (containsIndex(methodParameter.getIndex())) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_INDEX_MUST_BE_UNIQUE);\n+\t\t}\n+\n+\t\tparameters.add(methodParameter);\n+\t}\n+\n+\t@Override\n+\tpublic void removeMethodParameter(IMethodParameter methodParameter) {\n+\t\tparameters.remove(methodParameter);\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsMethodParameter(IMethodParameter methodParameter) {\n+\t\treturn parameters.contains(methodParameter);\n+\t}\n+\n+\t@Override\n+\tpublic void setMethodReturnValue(IMethodReturnValue methodReturnValue) {\n+\t\treturnValue = methodReturnValue;\n+\t}\n+\n+\t@Override\n+\tpublic IMethodReturnValue getMethodReturnValue() {\n+\t\treturn returnValue;\n+\t}\n+\n+\t@Override\n+\tpublic IField[] getFields() {\n+\t\treturn fields.toArray(new IField[0]);\n+\t}\n+\n+\t@Override\n+\tpublic void addField(IField field) {\n+\t\tif (field == null) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Event_ERROR_FIELD_CANNOT_BE_NULL);\n+\t\t}\n+\t\tfields.add(field);\n+\t}\n+\n+\t@Override\n+\tpublic void removeField(IField field) {\n+\t\tfields.remove(field);\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsField(IField field) {\n+\t\treturn fields.contains(field);\n+\t}\n+\n+\t@Override\n+\tpublic Event createWorkingCopy() {\n+\t\tEvent copy = new Event(preset);\n+\t\tcopy.id = id;\n+\t\tcopy.name = name;\n+\t\tcopy.clazz = clazz;\n+\t\tcopy.description = description;\n+\t\tcopy.path = path;\n+\t\tcopy.recordStackTrace = recordStackTrace;\n+\t\tcopy.useRethrow = useRethrow;\n+\t\tcopy.methodName = methodName;\n+\t\tcopy.methodDescriptor = methodDescriptor;\n+\t\tcopy.location = location;\n+\n+\t\tif (returnValue != null) {\n+\t\t\tcopy.returnValue = returnValue.createWorkingCopy();\n+\t\t}\n+\n+\t\tcopy.parameters\n+\t\t\t\t.addAll(parameters.stream().map(IMethodParameter::createWorkingCopy).collect(Collectors.toList()));\n+\t\tcopy.fields.addAll(fields.stream().map(IField::createWorkingCopy).collect(Collectors.toList()));\n+\n+\t\treturn copy;\n+\t}\n+\n+\t@Override\n+\tpublic IEvent createDuplicate() {\n+\t\tEvent duplicate = createWorkingCopy();\n+\t\tduplicate.id = preset.nextUniqueEventId(id);\n+\t\tduplicate.name = preset.nextUniqueEventName(name);\n+\n+\t\treturn duplicate;\n+\t}\n+\n+\t@Override\n+\tpublic int nextUniqueParameterIndex() {\n+\t\tList<IMethodParameter> sorted = parameters.stream().sorted(Comparator.comparingInt(IMethodParameter::getIndex))\n+\t\t\t\t.collect(Collectors.toList());\n+\n+\t\tint index = 0;\n+\t\tif (sorted.isEmpty()) {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tfor (IMethodParameter parameter : sorted) {\n+\t\t\tif (parameter.getIndex() > index) {\n+\t\t\t\treturn index;\n+\t\t\t}\n+\n+\t\t\tindex = parameter.getIndex() + 1;\n+\t\t}\n+\n+\t\treturn index;\n+\t}\n+\n+\t@Override\n+\tpublic String nextUniqueParameterName(String originalName) {\n+\t\toriginalName = originalName.trim();\n+\n+\t\t\/\/ First, extract a base name and a count of the original name.\n+\t\tString baseName = originalName;\n+\t\t\/\/ Use count -1 to mean that no count should be appended, the baseName suffices.\n+\t\tlong proposedCount = -1;\n+\t\tMatcher matcher = NAME_WITH_COUNT_PATTERN.matcher(originalName);\n+\t\tif (matcher.matches()) {\n+\t\t\ttry {\n+\t\t\t\tlong count = Long.parseLong(matcher.group(2));\n+\t\t\t\t\/\/ Valid match, use the shorter base and this count.\n+\t\t\t\tbaseName = matcher.group(1).trim();\n+\t\t\t\tproposedCount = count;\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\/\/ Too large number. => Use the entire name as base.\n+\t\t\t\t\/\/ (Yes, we could have used BigInteger, but which sane person would want such names?)\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/\/ Second, find any existing templates matching the proposed baseName pattern,\n+\t\t\/\/ with or without count, and make sure the proposed count is greater.\n+\t\tint baseLen = baseName.length();\n+\t\tfor (IMethodParameter parameter : parameters) {\n+\t\t\tString tempName = parameter.getName().trim();\n+\t\t\tif (tempName.startsWith(baseName)) {\n+\t\t\t\tif (tempName.equals(baseName) && (proposedCount < 1)) {\n+\t\t\t\t\tproposedCount = 1;\n+\t\t\t\t} else {\n+\t\t\t\t\t\/\/ Note that this pattern must ignore leading whitespace.\n+\t\t\t\t\tMatcher tempMatch = COUNT_SUFFIX_PATTERN.matcher(tempName.substring(baseLen));\n+\t\t\t\t\tif (tempMatch.matches()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tlong count = Long.parseLong(tempMatch.group(1));\n+\t\t\t\t\t\t\tif (count < Long.MAX_VALUE) {\n+\t\t\t\t\t\t\t\t\/\/ Valid match, use a count greater than this, unless the proposed was greater.\n+\t\t\t\t\t\t\t\tproposedCount = Math.max(proposedCount, count + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\/\/ Too large number, pretend we didn't see this template.\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (proposedCount == -1) {\n+\t\t\treturn baseName;\n+\t\t} else {\n+\t\t\treturn baseName + \" (\" + proposedCount + ')'; \/\/ $NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String nextUniqueFieldName(String originalName) {\n+\t\toriginalName = originalName.trim();\n+\n+\t\t\/\/ First, extract a base name and a count of the original name.\n+\t\tString baseName = originalName;\n+\t\t\/\/ Use count -1 to mean that no count should be appended, the baseName suffices.\n+\t\tlong proposedCount = -1;\n+\t\tMatcher matcher = NAME_WITH_COUNT_PATTERN.matcher(originalName);\n+\t\tif (matcher.matches()) {\n+\t\t\ttry {\n+\t\t\t\tlong count = Long.parseLong(matcher.group(2));\n+\t\t\t\t\/\/ Valid match, use the shorter base and this count.\n+\t\t\t\tbaseName = matcher.group(1).trim();\n+\t\t\t\tproposedCount = count;\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\/\/ Too large number. => Use the entire name as base.\n+\t\t\t\t\/\/ (Yes, we could have used BigInteger, but which sane person would want such names?)\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/\/ Second, find any existing templates matching the proposed baseName pattern,\n+\t\t\/\/ with or without count, and make sure the proposed count is greater.\n+\t\tint baseLen = baseName.length();\n+\t\tfor (IField field : fields) {\n+\t\t\tString tempName = field.getName().trim();\n+\t\t\tif (tempName.startsWith(baseName)) {\n+\t\t\t\tif (tempName.equals(baseName) && (proposedCount < 1)) {\n+\t\t\t\t\tproposedCount = 1;\n+\t\t\t\t} else {\n+\t\t\t\t\t\/\/ Note that this pattern must ignore leading whitespace.\n+\t\t\t\t\tMatcher tempMatch = COUNT_SUFFIX_PATTERN.matcher(tempName.substring(baseLen));\n+\t\t\t\t\tif (tempMatch.matches()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tlong count = Long.parseLong(tempMatch.group(1));\n+\t\t\t\t\t\t\tif (count < Long.MAX_VALUE) {\n+\t\t\t\t\t\t\t\t\/\/ Valid match, use a count greater than this, unless the proposed was greater.\n+\t\t\t\t\t\t\t\tproposedCount = Math.max(proposedCount, count + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\/\/ Too large number, pretend we didn't see this template.\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (proposedCount == -1) {\n+\t\t\treturn baseName;\n+\t\t} else {\n+\t\t\treturn baseName + \" (\" + proposedCount + ')'; \/\/ $NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic MethodReturnValue createMethodReturnValue() {\n+\t\treturn new MethodReturnValue(this);\n+\t}\n+\n+\tpublic MethodReturnValue createMethodReturnValue(Element element) {\n+\t\treturn new MethodReturnValue(this, element);\n+\t}\n+\n+\t@Override\n+\tpublic MethodParameter createMethodParameter() {\n+\t\tMethodParameter parameter = new MethodParameter(this);\n+\n+\t\tparameter.setName(nextUniqueParameterName(parameter.getName()));\n+\t\tparameter.setIndex(nextUniqueParameterIndex());\n+\t\treturn parameter;\n+\t}\n+\n+\tprivate MethodParameter createMethodParameter(Element element) {\n+\t\treturn new MethodParameter(this, element);\n+\t}\n+\n+\t@Override\n+\tpublic void updateMethodParameter(IMethodParameter original, IMethodParameter workingCopy) {\n+\t\tif (parameters.remove(original)) {\n+\t\t\tparameters.add(workingCopy);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Field createField() {\n+\t\tField field = new Field(this);\n+\n+\t\tfield.setName(nextUniqueFieldName(field.getName()));\n+\t\treturn field;\n+\t}\n+\n+\tprivate Field createField(Element element) {\n+\t\treturn new Field(this, element);\n+\t}\n+\n+\t@Override\n+\tpublic void updateField(IField original, IField workingCopy) {\n+\t\tif (fields.remove(original)) {\n+\t\t\tfields.add(workingCopy);\n+\t\t}\n+\t}\n+\n+\tprivate boolean containsIndex(int index) {\n+\t\tfor (IMethodParameter param : parameters) {\n+\t\t\tif (param.getIndex() == index) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate static Element getFirstDirectChildElementByTagName(Element parent, String name) {\n+\t\tNodeList children = parent.getChildNodes();\n+\t\tfor (int i = 0; i < children.getLength(); i++) {\n+\t\t\tNode child = children.item(i);\n+\t\t\tif (child instanceof Element && child.getNodeName().equals(name)) {\n+\t\t\t\treturn (Element) child;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn null;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/Event.java","additions":685,"deletions":0,"binary":false,"changes":685,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+\n+public class Field extends CapturedValue implements IField {\n+\n+\tprivate static final String DEFAULT_FIELD_NAME = \"New Field\"; \/\/ $NON-NLS-1$\n+\tprivate static final String DEFAULT_FIELD_EXPRESSION = \"myField\"; \/\/ $NON-NLS-1$\n+\tprivate static final String EXPRESSION_REGEX = \"([a-zA-Z_$][a-zA-Z0-9_$]*\\\\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)(\\\\.[a-zA-Z_$][a-zA-Z_$]*)*\"; \/\/ $NON-NLS-1$\n+\n+\tprivate static final String XML_TAG_FIELD = \"field\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_EXPRESSION = \"expression\"; \/\/ $NON-NLS-1$\n+\n+\tprivate final Event event;\n+\n+\tprivate String expression;\n+\n+\tField(Event event) {\n+\t\tsuper();\n+\t\tthis.event = event;\n+\n+\t\texpression = DEFAULT_FIELD_EXPRESSION;\n+\t\tsetName(DEFAULT_FIELD_NAME);\n+\t}\n+\n+\tField(Event event, Element element) {\n+\t\tsuper(element);\n+\t\tthis.event = event;\n+\n+\t\tNodeList elements = element.getElementsByTagName(XML_TAG_EXPRESSION);\n+\t\tif (elements.getLength() != 0) {\n+\t\t\texpression = elements.item(0).getTextContent();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Element buildElement(Document document) {\n+\t\tElement element = super.buildElement(document);\n+\t\telement = (Element) document.renameNode(element, null, XML_TAG_FIELD);\n+\n+\t\tElement expressionElement = document.createElement(XML_TAG_EXPRESSION);\n+\t\texpressionElement.setTextContent(expression);\n+\t\telement.appendChild(expressionElement);\n+\n+\t\treturn element;\n+\t}\n+\n+\t@Override\n+\tpublic void setName(String name) {\n+\t\tif (name == null || name.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Field_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tsuper.setName(name);\n+\t}\n+\n+\tpublic String getExpression() {\n+\t\treturn expression;\n+\t}\n+\n+\tpublic void setExpression(String expression) {\n+\t\tif (expression == null || expression.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Field_ERROR_EXPRESSION_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\texpression = expression.trim();\n+\t\tif (!expression.matches(EXPRESSION_REGEX)) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Field_ERROR_EXPRESSION_HAS_INCORRECT_SYNTAX);\n+\t\t}\n+\n+\t\tthis.expression = expression;\n+\t}\n+\n+\t@Override\n+\tpublic Field createWorkingCopy() {\n+\t\tField copy = new Field(event);\n+\n+\t\tcopyContentToWorkingCopy(copy);\n+\t\tcopy.expression = expression;\n+\n+\t\treturn copy;\n+\t}\n+\n+\t@Override\n+\tpublic Field createDuplicate() {\n+\t\tField duplicate = createWorkingCopy();\n+\t\tduplicate.setName(event.nextUniqueFieldName(getName()));\n+\n+\t\treturn duplicate;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/Field.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public interface ICapturedValue {\n+\tenum ContentType {\n+\t\tNONE, BYTES, TIMESTAMP, MILLIS, NANOS, TICKS, ADDRESS, OS_THREAD, JAVA_THREAD, STACK_TRACE, CLASS, PERCENTAGE\n+\t}\n+\n+\tString getName();\n+\n+\tvoid setName(String name);\n+\n+\tString getDescription();\n+\n+\tvoid setDescription(String description);\n+\n+\tContentType getContentType();\n+\n+\tvoid setContentType(ContentType contentType);\n+\n+\tString getRelationKey();\n+\n+\tvoid setRelationKey(String relationKey);\n+\n+\tString getConverter();\n+\n+\tvoid setConverter(String converter);\n+\n+\tElement buildElement(Document document);\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/ICapturedValue.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public interface IEvent {\n+\tenum Location {\n+\t\tENTRY, EXIT, WRAP,\n+\t}\n+\n+\tString getId();\n+\n+\tvoid setId(String id);\n+\n+\tString getName();\n+\n+\tvoid setName(String name);\n+\n+\tString getClazz();\n+\n+\tvoid setClazz(String clazz);\n+\n+\tString getDescription();\n+\n+\tvoid setDescription(String description);\n+\n+\tString getPath();\n+\n+\tvoid setPath(String path);\n+\n+\tboolean getStackTrace();\n+\n+\tvoid setStackTrace(boolean enabled);\n+\n+\tboolean getRethrow();\n+\n+\tvoid setRethrow(boolean enabled);\n+\n+\tLocation getLocation();\n+\n+\tvoid setLocation(Location location);\n+\n+\tString getMethodName();\n+\n+\tvoid setMethodName(String methodName);\n+\n+\tString getMethodDescriptor();\n+\n+\tvoid setMethodDescriptor(String methodDescriptor);\n+\n+\tIMethodParameter[] getMethodParameters();\n+\n+\tvoid addMethodParameter(IMethodParameter methodParameter);\n+\n+\tvoid removeMethodParameter(IMethodParameter methodParameter);\n+\n+\tboolean containsMethodParameter(IMethodParameter methodParameter);\n+\n+\tvoid setMethodReturnValue(IMethodReturnValue methodReturnValue);\n+\n+\tIMethodReturnValue getMethodReturnValue();\n+\n+\tIField[] getFields();\n+\n+\tvoid addField(IField field);\n+\n+\tvoid removeField(IField field);\n+\n+\tboolean containsField(IField field);\n+\n+\tIEvent createWorkingCopy();\n+\n+\tIEvent createDuplicate();\n+\n+\tint nextUniqueParameterIndex();\n+\n+\tString nextUniqueParameterName(String originalName);\n+\n+\tString nextUniqueFieldName(String originalName);\n+\n+\tIMethodReturnValue createMethodReturnValue();\n+\n+\tIMethodParameter createMethodParameter();\n+\n+\tvoid updateMethodParameter(IMethodParameter original, IMethodParameter workingCopy);\n+\n+\tIField createField();\n+\n+\tvoid updateField(IField original, IField workingCopy);\n+\n+\tElement buildElement(Document document);\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/IEvent.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+public interface IField extends ICapturedValue {\n+\tString getExpression();\n+\n+\tvoid setExpression(String expression);\n+\n+\tIField createWorkingCopy();\n+\n+\tIField createDuplicate();\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/IField.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+public interface IMethodParameter extends ICapturedValue {\n+\tint getIndex();\n+\n+\tvoid setIndex(int index);\n+\n+\tIMethodParameter createWorkingCopy();\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/IMethodParameter.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+public interface IMethodReturnValue extends ICapturedValue {\n+\tIMethodReturnValue createWorkingCopy();\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/IMethodReturnValue.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.w3c.dom.Document;\n+import org.xml.sax.SAXException;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+public interface IPreset {\n+\n+\tString getFileName();\n+\n+\tvoid setFileName(String fileName);\n+\n+\tvoid setClassPrefix(String prefix);\n+\n+\tString getClassPrefix();\n+\n+\tvoid setAllowToString(boolean allowed);\n+\n+\tboolean getAllowToString();\n+\n+\tvoid setAllowConverter(boolean allowed);\n+\n+\tboolean getAllowConverter();\n+\n+\tIEvent[] getEvents();\n+\n+\tvoid addEvent(IEvent event);\n+\n+\tvoid removeEvent(IEvent event);\n+\n+\tboolean containsEvent(IEvent event);\n+\n+\tIEvent createEvent();\n+\n+\tvoid updateEvent(IEvent original, IEvent workingCopy);\n+\n+\tIPreset createWorkingCopy();\n+\n+\tIPreset createDuplicate();\n+\n+\tString nextUniqueEventName(String originalName);\n+\n+\tString nextUniqueEventId(String originalName);\n+\n+\tvoid setStorageDelegate(IPresetStorageDelegate storageDelegate);\n+\n+\tIPresetStorageDelegate getStorageDelegate();\n+\n+\tboolean save();\n+\n+\tboolean delete();\n+\n+\tvoid deserialize(InputStream xmlStream) throws IOException, SAXException;\n+\n+\tvoid deserialize(String xmlSource) throws IOException, SAXException;\n+\n+\tString serialize();\n+\n+\tDocument buildDocument();\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/IPreset.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+public interface IPresetStorageDelegate {\n+\n+\tString getName();\n+\n+\tInputStream getContents();\n+\n+\tboolean save(String fileName, String fileContent) throws IOException;\n+\n+\tboolean delete();\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/IPresetStorageDelegate.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.nio.charset.IllegalCharsetNameException;\n+import java.nio.charset.StandardCharsets;\n+\n+public class LocalStorageDelegate implements IPresetStorageDelegate {\n+\tprivate final File file;\n+\n+\tpublic static IPresetStorageDelegate getDelegate() throws IOException {\n+\t\tFile dir = PresetRepositoryFactory.getCreatedStorageDir();\n+\t\tFile file = File.createTempFile(\"preset-\", PresetRepositoryFactory.PRESET_FILE_EXTENSION, dir);\n+\t\treturn new LocalStorageDelegate(file);\n+\t}\n+\n+\tpublic static IPresetStorageDelegate getDelegate(String fileName) throws IOException {\n+\t\tFile dir = PresetRepositoryFactory.getCreatedStorageDir();\n+\t\tFile file = new File(dir, fileName);\n+\t\treturn new LocalStorageDelegate(file);\n+\t}\n+\n+\tpublic static IPresetStorageDelegate getDelegate(File file) {\n+\t\treturn new LocalStorageDelegate(file);\n+\t}\n+\n+\tprivate LocalStorageDelegate(File file) {\n+\t\tthis.file = file;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn file.getName();\n+\t}\n+\n+\t@Override\n+\tpublic InputStream getContents() {\n+\t\ttry {\n+\t\t\treturn new FileInputStream(file);\n+\t\t} catch (FileNotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean save(String fileName, String fileContent) throws IOException {\n+\t\tif (!file.getName().equals(fileName)) {\n+\t\t\tif (!file.renameTo(new File(PresetRepositoryFactory.getCreatedStorageDir(), fileName))) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry {\n+\t\t\ttry (Writer out = new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8)) {\n+\t\t\t\tout.write(fileContent);\n+\t\t\t\tout.flush();\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t} catch (IllegalCharsetNameException | FileNotFoundException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean delete() {\n+\t\treturn file.delete();\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/LocalStorageDelegate.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public class MethodParameter extends CapturedValue implements IMethodParameter {\n+\tprivate static final String DEFAULT_PARAMETER_NAME = \"New Parameter\"; \/\/ $NON-NLS-1$\n+\tprivate static final int DEFAULT_INDEX = 0;\n+\n+\tprivate static final String XML_TAG_PARAMETER = \"parameter\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_ATTRIBUTE_INDEX = \"index\"; \/\/ $NON-NLS-1$\n+\n+\tprivate final Event event;\n+\n+\tprivate int index;\n+\n+\tMethodParameter(Event event) {\n+\t\tsuper();\n+\t\tthis.event = event;\n+\n+\t\tindex = DEFAULT_INDEX;\n+\t\tsetName(DEFAULT_PARAMETER_NAME);\n+\t}\n+\n+\tMethodParameter(Event event, Element element) {\n+\t\tsuper(element);\n+\t\tthis.event = event;\n+\n+\t\tindex = Integer.parseInt(element.getAttribute(XML_ATTRIBUTE_INDEX));\n+\t}\n+\n+\t@Override\n+\tpublic Element buildElement(Document document) {\n+\t\tElement element = super.buildElement(document);\n+\t\telement = (Element) document.renameNode(element, null, XML_TAG_PARAMETER);\n+\t\telement.setAttribute(XML_ATTRIBUTE_INDEX, String.valueOf(index));\n+\t\treturn element;\n+\t}\n+\n+\t@Override\n+\tpublic void setName(String name) {\n+\t\tif (name == null || name.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.MethodParameter_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tsuper.setName(name);\n+\t}\n+\n+\t@Override\n+\tpublic int getIndex() {\n+\t\treturn index;\n+\t}\n+\n+\t@Override\n+\tpublic void setIndex(int index) {\n+\t\tif (index < 0) {\n+\t\t\tthrow new IllegalArgumentException(Messages.MethodParameter_ERROR_INDEX_CANNOT_BE_LESS_THAN_ZERO);\n+\t\t}\n+\n+\t\tthis.index = index;\n+\t}\n+\n+\t@Override\n+\tpublic MethodParameter createWorkingCopy() {\n+\t\tMethodParameter parameter = new MethodParameter(event);\n+\n+\t\tcopyContentToWorkingCopy(parameter);\n+\t\tparameter.index = index;\n+\n+\t\treturn parameter;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/MethodParameter.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+\n+public class MethodReturnValue extends CapturedValue implements IMethodReturnValue {\n+\n+\tprivate static final String XML_TAG_RETURN_VALUE = \"returnvalue\"; \/\/ $NON-NLS-1$\n+\n+\tprivate final Event event;\n+\n+\tMethodReturnValue(Event event) {\n+\t\tsuper();\n+\n+\t\tthis.event = event;\n+\t}\n+\n+\tMethodReturnValue(Event event, Element element) {\n+\t\tsuper(element);\n+\n+\t\tthis.event = event;\n+\t}\n+\n+\t@Override\n+\tpublic Element buildElement(Document document) {\n+\t\tElement element = super.buildElement(document);\n+\t\treturn (Element) document.renameNode(element, null, XML_TAG_RETURN_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic MethodReturnValue createWorkingCopy() {\n+\t\tMethodReturnValue copy = new MethodReturnValue(event);\n+\n+\t\tcopyContentToWorkingCopy(copy);\n+\t\treturn copy;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/MethodReturnValue.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,546 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.utils.ProbeValidator;\n+import org.openjdk.jmc.console.agent.utils.ValidationResult;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class Preset implements IPreset {\n+\tprivate static final String FILE_NAME_EXTENSION = \".xml\"; \/\/ $NON-NLS-1$\n+\tprivate static final String DEFAULT_FILE_NAME = \"new_file.xml\"; \/\/ $NON-NLS-1$\n+\tprivate static final String DEFAULT_CLASS_PREFIX = \"__JFREvent\"; \/\/ $NON-NLS-1$\n+\tprivate static final boolean DEFAULT_BOOLEAN_FIELD = false;\n+\n+\tprivate static final String XML_TAG_JFR_AGENT = \"jfragent\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_CONFIG = \"config\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_CLASS_PREFIX = \"classprefix\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_ALLOW_TO_STRING = \"allowtostring\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_ALLOW_CONVERTER = \"allowconverter\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_EVENTS = \"events\"; \/\/ $NON-NLS-1$\n+\tprivate static final String XML_TAG_EVENT = \"event\"; \/\/ $NON-NLS-1$\n+\n+\tprivate static final Pattern ID_WITH_COUNT_PATTERN = Pattern.compile(\"^(.*)\\\\.(\\\\d+)$\"); \/\/ $NON-NLS-1$\n+\tprivate static final Pattern ID_COUNT_SUFFIX_PATTERN = Pattern.compile(\"^\\\\.(\\\\d+)$\"); \/\/ $NON-NLS-1$\n+\tprivate static final Pattern NAME_WITH_COUNT_PATTERN = Pattern.compile(\"^(.*)\\\\s*\\\\((\\\\d+)\\\\)$\"); \/\/$NON-NLS-1$\n+\tprivate static final Pattern NAME_COUNT_SUFFIX_PATTERN = Pattern.compile(\"^\\\\s*\\\\((\\\\d+)\\\\)$\"); \/\/$NON-NLS-1$\n+\n+\tprivate final PresetRepository presetRepository;\n+\tprivate IPresetStorageDelegate storageDelegate;\n+\tprivate final List<IEvent> events = new ArrayList<>();\n+\n+\tprivate String fileName;\n+\tprivate String classPrefix;\n+\tprivate boolean allowToString;\n+\tprivate boolean allowConverter;\n+\n+\tPreset(PresetRepository repository) {\n+\t\tpresetRepository = repository;\n+\n+\t\tfileName = DEFAULT_FILE_NAME;\n+\t\tclassPrefix = DEFAULT_CLASS_PREFIX;\n+\t\tallowToString = DEFAULT_BOOLEAN_FIELD;\n+\t\tallowConverter = DEFAULT_BOOLEAN_FIELD;\n+\t}\n+\n+\tPreset(PresetRepository repository, IPresetStorageDelegate storageDelegate) throws IOException, SAXException {\n+\t\tthis(repository);\n+\n+\t\tif (storageDelegate != null) {\n+\t\t\tdeserialize(storageDelegate.getContents());\n+\n+\t\t\tfileName = storageDelegate.getName();\n+\t\t}\n+\t}\n+\n+\tpublic void deserialize(InputStream xmlStream) throws IOException, SAXException {\n+\t\tbyte[] output = {};\n+\t\tint length = Integer.MAX_VALUE;\n+\t\tint pos = 0;\n+\t\twhile (pos < length) {\n+\t\t\tint bytesToRead;\n+\t\t\tif (pos >= output.length) { \/\/ Only expand when there's no room\n+\t\t\t\tbytesToRead = Math.min(length - pos, output.length + 1024);\n+\t\t\t\tif (output.length < pos + bytesToRead) {\n+\t\t\t\t\toutput = Arrays.copyOf(output, pos + bytesToRead);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\tbytesToRead = output.length - pos;\n+\t\t\t}\n+\t\t\tint cc = xmlStream.read(output, pos, bytesToRead);\n+\t\t\tif (cc < 0) {\n+\t\t\t\tif (output.length != pos) {\n+\t\t\t\t\toutput = Arrays.copyOf(output, pos);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tpos += cc;\n+\t\t}\n+\n+\t\tdeserialize(new String(output, StandardCharsets.UTF_8));\n+\t}\n+\n+\tpublic void deserialize(String xmlSource) throws IOException, SAXException {\n+\t\tProbeValidator validator = new ProbeValidator();\n+\t\tvalidator.validate(new StreamSource(new ByteArrayInputStream(xmlSource.getBytes(StandardCharsets.UTF_8))));\n+\t\tValidationResult result = validator.getValidationResult();\n+\t\tif (!result.isValid()) {\n+\t\t\tif (result.getFatalError() != null) {\n+\t\t\t\tthrow result.getFatalError();\n+\t\t\t} else {\n+\t\t\t\tthrow result.getErrors().get(0);\n+\t\t\t}\n+\t\t}\n+\n+\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\t\tDocumentBuilder builder;\n+\t\ttry {\n+\t\t\tbuilder = factory.newDocumentBuilder();\n+\t\t} catch (ParserConfigurationException e) {\n+\t\t\t\/\/ This should not happen anyway\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\tDocument document = builder.parse(new ByteArrayInputStream(xmlSource.getBytes(StandardCharsets.UTF_8)));\n+\t\tNodeList elements;\n+\n+\t\t\/\/ parse global configurations\n+\t\t\/\/ Note: we don't worry about hierarchy here and directly get nodes by tag name, since the validation already \n+\t\t\/\/ guaranteed a correct structure and tag names are unique.\n+\t\telements = document.getElementsByTagName(XML_TAG_CONFIG); \/\/ $NON-NLS-1$\n+\t\tif (elements.getLength() != 0) {\n+\t\t\tElement configElement = (Element) elements.item(0);\n+\n+\t\t\telements = configElement.getElementsByTagName(XML_TAG_CLASS_PREFIX); \/\/ $NON-NLS-1$\n+\t\t\tif (elements.getLength() != 0) {\n+\t\t\t\tclassPrefix = elements.item(0).getTextContent();\n+\t\t\t}\n+\n+\t\t\telements = configElement.getElementsByTagName(XML_TAG_ALLOW_TO_STRING); \/\/ $NON-NLS-1$\n+\t\t\tif (elements.getLength() != 0) {\n+\t\t\t\tallowToString = Boolean.parseBoolean(elements.item(0).getTextContent());\n+\t\t\t}\n+\n+\t\t\telements = configElement.getElementsByTagName(XML_TAG_ALLOW_CONVERTER); \/\/ $NON-NLS-1$\n+\t\t\tif (elements.getLength() != 0) {\n+\t\t\t\tallowConverter = Boolean.parseBoolean(elements.item(0).getTextContent());\n+\t\t\t}\n+\t\t}\n+\n+\t\telements = document.getElementsByTagName(XML_TAG_EVENTS); \/\/ $NON-NLS-1$\n+\t\tif (elements.getLength() != 0) {\n+\t\t\tElement eventsElement = (Element) elements.item(0);\n+\t\t\telements = eventsElement.getElementsByTagName(XML_TAG_EVENT);\n+\t\t\tfor (int i = 0; i < elements.getLength(); i++) {\n+\t\t\t\tevents.add(createEvent((Element) elements.item(i)));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate Element buildConfigElement(Document document) {\n+\t\tElement element = document.createElement(XML_TAG_CONFIG);\n+\n+\t\tElement classPrefixElement = document.createElement(XML_TAG_CLASS_PREFIX);\n+\t\tclassPrefixElement.setTextContent(classPrefix != null ? classPrefix : \"\");\n+\t\telement.appendChild(classPrefixElement);\n+\n+\t\tElement allowToStringElement = document.createElement(XML_TAG_ALLOW_TO_STRING);\n+\t\tallowToStringElement.setTextContent(String.valueOf(allowToString));\n+\t\telement.appendChild(allowToStringElement);\n+\n+\t\tElement allowConverterElement = document.createElement(XML_TAG_ALLOW_CONVERTER);\n+\t\tallowConverterElement.setTextContent(String.valueOf(allowConverter));\n+\t\telement.appendChild(allowConverterElement);\n+\n+\t\treturn element;\n+\t}\n+\n+\t@Override\n+\tpublic Document buildDocument() {\n+\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\t\tDocumentBuilder builder;\n+\t\ttry {\n+\t\t\tbuilder = factory.newDocumentBuilder();\n+\t\t} catch (ParserConfigurationException e) {\n+\t\t\t\/\/ This should not happen anyway\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\tDocument document = builder.newDocument();\n+\n+\t\tElement jfrAgentElement = document.createElement(XML_TAG_JFR_AGENT);\n+\t\tdocument.appendChild(jfrAgentElement);\n+\n+\t\tjfrAgentElement.appendChild(buildConfigElement(document));\n+\n+\t\tElement eventsElement = document.createElement(XML_TAG_EVENTS);\n+\t\tfor (IEvent event : events) {\n+\t\t\teventsElement.appendChild(event.buildElement(document));\n+\t\t}\n+\t\tjfrAgentElement.appendChild(eventsElement);\n+\n+\t\treturn document;\n+\t}\n+\n+\tpublic String serialize() {\n+\t\tDocument document = buildDocument();\n+\n+\t\tTransformerFactory tf = TransformerFactory.newInstance();\n+\t\tTransformer transformer;\n+\t\ttry {\n+\t\t\ttransformer = tf.newTransformer();\n+\t\t} catch (TransformerConfigurationException e) {\n+\t\t\t\/\/ This should not happen anyway\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\t\ttransformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\t\ttransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+\t\tStringWriter writer = new StringWriter(2000);\n+\t\ttry {\n+\t\t\ttransformer.transform(new DOMSource(document), new StreamResult(writer));\n+\t\t} catch (TransformerException e) {\n+\t\t\t\/\/ This should not happen anyway\n+\t\t\tthrow new RuntimeException(e);\n+\t\t}\n+\n+\t\treturn writer.getBuffer().toString();\n+\t}\n+\n+\t@Override\n+\tpublic String getFileName() {\n+\t\treturn fileName;\n+\t}\n+\n+\t@Override\n+\tpublic void setFileName(String fileName) {\n+\t\tif (fileName == null || fileName.isEmpty()) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Preset_ERROR_FILE_NAME_CANNOT_BE_EMPTY_OR_NULL);\n+\t\t}\n+\n+\t\tthis.fileName = fileName;\n+\t}\n+\n+\t@Override\n+\tpublic void setClassPrefix(String prefix) {\n+\t\tif (prefix != null) {\n+\t\t\tprefix = prefix.trim();\n+\t\t}\n+\n+\t\tthis.classPrefix = prefix;\n+\t}\n+\n+\t@Override\n+\tpublic String getClassPrefix() {\n+\t\treturn classPrefix;\n+\t}\n+\n+\t@Override\n+\tpublic void setAllowToString(boolean allowed) {\n+\t\tallowToString = allowed;\n+\t}\n+\n+\t@Override\n+\tpublic boolean getAllowToString() {\n+\t\treturn allowToString;\n+\t}\n+\n+\t@Override\n+\tpublic void setAllowConverter(boolean allowed) {\n+\t\tallowConverter = allowed;\n+\t}\n+\n+\t@Override\n+\tpublic boolean getAllowConverter() {\n+\t\treturn allowConverter;\n+\t}\n+\n+\t@Override\n+\tpublic IEvent[] getEvents() {\n+\t\treturn events.toArray(new IEvent[0]);\n+\t}\n+\n+\t@Override\n+\tpublic void addEvent(IEvent event) {\n+\t\tif (containsId(event.getId())) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Preset_ERROR_MUST_HAVE_UNIQUE_ID);\n+\t\t}\n+\t\tif (containsEventClassName(event)) {\n+\t\t\tthrow new IllegalArgumentException(Messages.Preset_ERROR_MUST_HAVE_UNIQUE_EVENT_CLASS_NAME);\n+\t\t}\n+\n+\t\tevents.add(event);\n+\t}\n+\n+\t@Override\n+\tpublic void removeEvent(IEvent event) {\n+\t\tevents.remove(event);\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsEvent(IEvent event) {\n+\t\treturn events.contains(event);\n+\t}\n+\n+\t@Override\n+\tpublic IEvent createEvent() {\n+\t\tEvent event = new Event(this);\n+\n+\t\tString idPrefix = fileName;\n+\t\tif (idPrefix.endsWith(FILE_NAME_EXTENSION)) {\n+\t\t\tidPrefix = idPrefix.substring(0, idPrefix.lastIndexOf(FILE_NAME_EXTENSION)).replaceAll(\"\\\\s\", \"_\");\n+\t\t}\n+\t\tidPrefix = nextUniqueEventId(idPrefix + \".event.1\"); \/\/ $NON-NLS-1$\n+\n+\t\tString name = nextUniqueEventName(event.getName());\n+\t\tevent.setId(idPrefix);\n+\t\tevent.setName(name);\n+\n+\t\treturn event;\n+\t}\n+\n+\tprivate IEvent createEvent(Element element) {\n+\t\treturn new Event(this, element);\n+\t}\n+\n+\t@Override\n+\tpublic void updateEvent(IEvent original, IEvent workingCopy) {\n+\t\tif (events.remove(original)) {\n+\t\t\tevents.add(workingCopy);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Preset createWorkingCopy() {\n+\t\tPreset copy = new Preset(presetRepository);\n+\t\tcopy.fileName = fileName;\n+\t\tcopy.classPrefix = classPrefix;\n+\t\tcopy.allowToString = allowToString;\n+\t\tcopy.allowConverter = allowConverter;\n+\n+\t\tcopy.events.addAll(events.stream().map(IEvent::createWorkingCopy).collect(Collectors.toList()));\n+\n+\t\treturn copy;\n+\t}\n+\n+\t@Override\n+\tpublic Preset createDuplicate() {\n+\t\tPreset duplicate = createWorkingCopy();\n+\t\tduplicate.fileName = presetRepository.nextUniqueName(duplicate.fileName);\n+\n+\t\treturn duplicate;\n+\t}\n+\n+\t@Override\n+\tpublic String nextUniqueEventName(String originalName) {\n+\t\toriginalName = originalName.trim();\n+\n+\t\t\/\/ First, extract a base name and a count of the original name.\n+\t\tString baseName = originalName;\n+\t\t\/\/ Use count -1 to mean that no count should be appended, the baseName suffices.\n+\t\tlong proposedCount = -1;\n+\t\tMatcher matcher = NAME_WITH_COUNT_PATTERN.matcher(originalName);\n+\t\tif (matcher.matches()) {\n+\t\t\ttry {\n+\t\t\t\tlong count = Long.parseLong(matcher.group(2));\n+\t\t\t\t\/\/ Valid match, use the shorter base and this count.\n+\t\t\t\tbaseName = matcher.group(1).trim();\n+\t\t\t\tproposedCount = count;\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\/\/ Too large number. => Use the entire name as base.\n+\t\t\t\t\/\/ (Yes, we could have used BigInteger, but which sane person would want such names?)\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/\/ Second, find any existing templates matching the proposed baseName pattern,\n+\t\t\/\/ with or without count, and make sure the proposed count is greater.\n+\t\tint baseLen = baseName.length();\n+\t\tfor (IEvent event : events) {\n+\t\t\tString tempName = event.getName().trim();\n+\t\t\tif (tempName.startsWith(baseName)) {\n+\t\t\t\tif (tempName.equals(baseName) && (proposedCount < 1)) {\n+\t\t\t\t\tproposedCount = 1;\n+\t\t\t\t} else {\n+\t\t\t\t\t\/\/ Note that this pattern must ignore leading whitespace.\n+\t\t\t\t\tMatcher tempMatch = NAME_COUNT_SUFFIX_PATTERN.matcher(tempName.substring(baseLen));\n+\t\t\t\t\tif (tempMatch.matches()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tlong count = Long.parseLong(tempMatch.group(1));\n+\t\t\t\t\t\t\tif (count < Long.MAX_VALUE) {\n+\t\t\t\t\t\t\t\t\/\/ Valid match, use a count greater than this, unless the proposed was greater.\n+\t\t\t\t\t\t\t\tproposedCount = Math.max(proposedCount, count + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\/\/ Too large number, pretend we didn't see this template.\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (proposedCount == -1) {\n+\t\t\treturn baseName;\n+\t\t} else {\n+\t\t\treturn baseName + \" (\" + proposedCount + ')'; \/\/ $NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String nextUniqueEventId(String originalName) {\n+\t\toriginalName = originalName.trim();\n+\n+\t\t\/\/ First, extract a base name and a count of the original name.\n+\t\tString baseName = originalName;\n+\t\t\/\/ Use count -1 to mean that no count should be appended, the baseName suffices.\n+\t\tlong proposedCount = -1;\n+\t\tMatcher matcher = ID_WITH_COUNT_PATTERN.matcher(originalName);\n+\t\tif (matcher.matches()) {\n+\t\t\ttry {\n+\t\t\t\tlong count = Long.parseLong(matcher.group(2));\n+\t\t\t\t\/\/ Valid match, use the shorter base and this count.\n+\t\t\t\tbaseName = matcher.group(1).trim();\n+\t\t\t\tproposedCount = count;\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\/\/ Too large number. => Use the entire name as base.\n+\t\t\t\t\/\/ (Yes, we could have used BigInteger, but which sane person would want such names?)\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/\/ Second, find any existing templates matching the proposed baseName pattern,\n+\t\t\/\/ with or without count, and make sure the proposed count is greater.\n+\t\tint baseLen = baseName.length();\n+\t\tfor (IEvent event : events) {\n+\t\t\tString tempName = event.getId().trim();\n+\t\t\tif (tempName.startsWith(baseName)) {\n+\t\t\t\tif (tempName.equals(baseName) && (proposedCount < 1)) {\n+\t\t\t\t\tproposedCount = 1;\n+\t\t\t\t} else {\n+\t\t\t\t\t\/\/ Note that this pattern must ignore leading whitespace.\n+\t\t\t\t\tMatcher tempMatch = ID_COUNT_SUFFIX_PATTERN.matcher(tempName.substring(baseLen));\n+\t\t\t\t\tif (tempMatch.matches()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tlong count = Long.parseLong(tempMatch.group(1));\n+\t\t\t\t\t\t\tif (count < Long.MAX_VALUE) {\n+\t\t\t\t\t\t\t\t\/\/ Valid match, use a count greater than this, unless the proposed was greater.\n+\t\t\t\t\t\t\t\tproposedCount = Math.max(proposedCount, count + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\/\/ Too large number, pretend we didn't see this template.\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (proposedCount == -1) {\n+\t\t\treturn baseName;\n+\t\t} else {\n+\t\t\treturn baseName + '.' + proposedCount; \/\/ $NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setStorageDelegate(IPresetStorageDelegate storageDelegate) {\n+\t\tthis.storageDelegate = storageDelegate;\n+\t}\n+\n+\t@Override\n+\tpublic IPresetStorageDelegate getStorageDelegate() {\n+\t\treturn storageDelegate;\n+\t}\n+\n+\t@Override\n+\tpublic boolean save() {\n+\t\tif (storageDelegate == null) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\treturn storageDelegate.save(fileName, serialize());\n+\t\t} catch (IOException e) {\n+\t\t\t\/\/ TODO: log exception\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean delete() {\n+\t\tif (storageDelegate == null) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\treturn storageDelegate.delete();\n+\t}\n+\n+\tprivate boolean containsId(String id) {\n+\t\tfor (IEvent e : events) {\n+\t\t\tif (e.getId().equals(id)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate boolean containsEventClassName(IEvent event) {\n+\t\tfor (IEvent e : events) {\n+\t\t\tif (e.getClazz().equals(event.getClazz()) && e.getName().equals(event.getName())) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/Preset.java","additions":546,"deletions":0,"binary":false,"changes":546,"status":"added"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.xml.sax.SAXException;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class PresetRepository {\n+\tprivate static final String DEFAULT_FILE_NAME = \"new_preset.xml\"; \/\/ $NON-NLS-1$\n+\tprivate static final String FILE_NAME_EXTENSION = \".xml\"; \/\/ $NON-NLS-1$\n+\n+\tprivate static final Pattern NAME_WITH_COUNT_PATTERN = Pattern.compile(\"^(.*)_(\\\\d+)$\"); \/\/ $NON-NLS-1$\n+\tprivate static final Pattern COUNT_SUFFIX_PATTERN = Pattern.compile(\"^_(\\\\d+)$\"); \/\/ $NON-NLS-1$\n+\n+\tprivate List<IPreset> presets = new ArrayList<>();\n+\n+\tprotected PresetRepository() {\n+\t}\n+\n+\tpublic void removePreset(IPreset configuration) {\n+\t\tif (presets.remove(configuration)) {\n+\t\t\tconfiguration.delete();\n+\t\t}\n+\t}\n+\n+\tpublic void addPreset(IPreset configuration) throws IOException {\n+\t\tpresets.add(configuration);\n+\n+\t\tif (configuration.getStorageDelegate() == null) {\n+\t\t\tconfiguration.setStorageDelegate(LocalStorageDelegate.getDelegate(configuration.getFileName()));\n+\t\t}\n+\n+\t\tconfiguration.save();\n+\t}\n+\n+\tpublic boolean containsPreset(IPreset configuration) {\n+\t\treturn presets.contains(configuration);\n+\t}\n+\n+\tpublic IPreset[] listPresets() {\n+\t\treturn presets.toArray(new IPreset[0]);\n+\t}\n+\n+\tpublic void updatePreset(IPreset original, IPreset workingCopy) throws IOException {\n+\t\tif (containsPreset(original)) {\n+\t\t\tremovePreset(original);\n+\t\t\toriginal.delete();\n+\n+\t\t\taddPreset(workingCopy);\n+\t\t}\n+\t}\n+\n+\tpublic IPreset createPreset() {\n+\t\tString fileName = nextUniqueName(DEFAULT_FILE_NAME);\n+\t\tPreset preset = new Preset(this);\n+\t\tpreset.setFileName(fileName);\n+\n+\t\treturn preset;\n+\t}\n+\n+\tpublic void importPreset(File file) throws IOException, SAXException {\n+\t\tIPreset preset = createPreset();\n+\t\tpreset.setFileName(nextUniqueName(file.getName()));\n+\t\ttry (FileInputStream fis = new FileInputStream(file)) {\n+\t\t\tpreset.deserialize(fis);\n+\t\t}\n+\t\taddPreset(preset);\n+\t}\n+\n+\tpublic void exportPreset(IPreset preset, File file) throws IOException {\n+\t\ttry (FileOutputStream fos = new FileOutputStream(file)) {\n+\t\t\tfos.write(preset.serialize().getBytes(StandardCharsets.UTF_8));\n+\t\t}\n+\t}\n+\n+\tString nextUniqueName(String originalName) {\n+\t\toriginalName = originalName.trim();\n+\n+\t\t\/\/ First, extract a base name and a count of the original name.\n+\t\tString baseName = originalName;\n+\t\tif (baseName.endsWith(FILE_NAME_EXTENSION)) {\n+\t\t\tbaseName = baseName.substring(0, baseName.lastIndexOf(FILE_NAME_EXTENSION));\n+\t\t}\n+\t\t\/\/ Use count -1 to mean that no count should be appended, the baseName suffices.\n+\t\tlong proposedCount = -1;\n+\t\tMatcher matcher = NAME_WITH_COUNT_PATTERN.matcher(originalName);\n+\t\tif (matcher.matches()) {\n+\t\t\ttry {\n+\t\t\t\tlong count = Long.parseLong(matcher.group(2));\n+\t\t\t\t\/\/ Valid match, use the shorter base and this count.\n+\t\t\t\tbaseName = matcher.group(1).trim();\n+\t\t\t\tproposedCount = count;\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\/\/ Too large number. => Use the entire name as base.\n+\t\t\t\t\/\/ (Yes, we could have used BigInteger, but which sane person would want such names?)\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/\/ Second, find any existing templates matching the proposed baseName pattern,\n+\t\t\/\/ with or without count, and make sure the proposed count is greater.\n+\t\tint baseLen = baseName.length();\n+\t\tfor (IPreset preset : presets) {\n+\t\t\tString tempName = preset.getFileName().trim();\n+\t\t\tif (tempName.endsWith(FILE_NAME_EXTENSION)) {\n+\t\t\t\ttempName = tempName.substring(0, tempName.lastIndexOf(FILE_NAME_EXTENSION));\n+\t\t\t}\n+\t\t\tif (tempName.startsWith(baseName)) {\n+\t\t\t\tif (tempName.equals(baseName) && (proposedCount < 1)) {\n+\t\t\t\t\tproposedCount = 1;\n+\t\t\t\t} else {\n+\t\t\t\t\t\/\/ Note that this pattern must ignore leading whitespace.\n+\t\t\t\t\tMatcher tempMatch = COUNT_SUFFIX_PATTERN.matcher(tempName.substring(baseLen));\n+\t\t\t\t\tif (tempMatch.matches()) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tlong count = Long.parseLong(tempMatch.group(1));\n+\t\t\t\t\t\t\tif (count < Long.MAX_VALUE) {\n+\t\t\t\t\t\t\t\t\/\/ Valid match, use a count greater than this, unless the proposed was greater.\n+\t\t\t\t\t\t\t\tproposedCount = Math.max(proposedCount, count + 1);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t\t\/\/ Too large number, pretend we didn't see this template.\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (proposedCount == -1) {\n+\t\t\treturn baseName + FILE_NAME_EXTENSION;\n+\t\t} else {\n+\t\t\treturn baseName + '_' + proposedCount + FILE_NAME_EXTENSION;\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/PresetRepository.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.model;\n+\n+import org.openjdk.jmc.console.agent.AgentPlugin;\n+import org.xml.sax.SAXException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.logging.Level;\n+\n+public class PresetRepositoryFactory {\n+\tstatic final String PRESET_FILE_EXTENSION = \".xml\"; \/\/ $NON-NLS-1$\n+\tprivate static final File PRESET_STORAGE_DIR = AgentPlugin.getDefault().getStateLocation().append(\".presets\") \/\/ $NON-NLS-1$\n+\t\t\t.toFile();\n+\n+\tprivate static PresetRepository singleton;\n+\n+\tpublic static PresetRepository createSingleton() {\n+\t\tif (singleton == null) {\n+\t\t\tsynchronized (PresetRepositoryFactory.class) {\n+\t\t\t\tif (singleton == null) {\n+\t\t\t\t\tsingleton = create();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn singleton;\n+\t}\n+\n+\tprotected static PresetRepository create() {\n+\t\tPresetRepository repository = new PresetRepository();\n+\t\tinitiate(repository);\n+\t\treturn repository;\n+\t}\n+\n+\tprotected static void initiate(PresetRepository repository) {\n+\t\taddLocalPresetTo(repository);\n+\t}\n+\n+\tprivate static void addLocalPresetTo(PresetRepository repository) {\n+\t\tFile localDir = PRESET_STORAGE_DIR;\n+\t\tif (!localDir.isDirectory()) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tFile[] files = localDir.listFiles((dir, name) -> name.endsWith(PRESET_FILE_EXTENSION));\n+\t\tif (files == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfor (File file : files) {\n+\t\t\tif (file.length() == 0) {\n+\t\t\t\t\/\/ FIXME: delete or just ignore empty files? \n+\t\t\t} else {\n+\t\t\t\tIPreset preset;\n+\t\t\t\tIPresetStorageDelegate delegate = LocalStorageDelegate.getDelegate(file);\n+\t\t\t\ttry {\n+\t\t\t\t\tpreset = new Preset(repository, delegate);\n+\t\t\t\t\trepository.addPreset(preset);\n+\t\t\t\t} catch (IOException | SAXException e) {\n+\t\t\t\t\tAgentPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not add local XML config\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static File getCreatedStorageDir() throws IOException {\n+\t\tif (!PRESET_STORAGE_DIR.isDirectory()) {\n+\t\t\t\/\/ Since the parent directory should exist, we explicitly avoid \"mkdirs()\".\n+\t\t\tif (!PRESET_STORAGE_DIR.mkdir()) {\n+\t\t\t\tthrow new IOException(\"Could not create the directory \" + PRESET_STORAGE_DIR.toString()); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t\treturn PRESET_STORAGE_DIR;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/PresetRepositoryFactory.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,247 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.events.ModifyListener;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Listener;\n+import org.eclipse.swt.widgets.Spinner;\n+import org.eclipse.swt.widgets.Text;\n+import org.openjdk.jmc.console.agent.manager.model.ICapturedValue;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+import org.openjdk.jmc.console.agent.manager.model.IField;\n+import org.openjdk.jmc.console.agent.manager.model.IMethodParameter;\n+import org.openjdk.jmc.console.agent.manager.model.IMethodReturnValue;\n+import org.openjdk.jmc.console.agent.manager.model.ICapturedValue.ContentType;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+public class CapturedValueEditingPage extends BaseWizardPage {\n+\n+\tprivate final IEvent event;\n+\tprivate ICapturedValue capturedValue;\n+\n+\tprivate Text nameText;\n+\tprivate Spinner indexSpinner;\n+\tprivate Button isReturnValueButton;\n+\tprivate Text expressionText;\n+\tprivate Text descriptionText;\n+\tprivate Combo contentTypeCombo;\n+\tprivate Button contentTypeClearButton;\n+\tprivate Text relationalKeyText;\n+\tprivate Text converterText;\n+\n+\tpublic CapturedValueEditingPage(IEvent event, ICapturedValue capturedValue) {\n+\t\tsuper(Messages.CapturedValueEditingPage_PAGE_NAME);\n+\n+\t\tthis.event = event;\n+\t\tthis.capturedValue = capturedValue;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tif (capturedValue instanceof IMethodParameter || capturedValue instanceof IMethodReturnValue) {\n+\t\t\tsetTitle(Messages.CapturedValueEditingPage_MESSAGE_PARAMETER_OR_RETURN_VALUE_EDITING_PAGE_TITLE);\n+\t\t\tsetDescription(\n+\t\t\t\t\tMessages.CapturedValueEditingPage_MESSAGE_PARAMETER_OR_RETURN_VALUE_EDITING_PAGE_DESCRIPTION);\n+\t\t} else if (capturedValue instanceof IField) {\n+\t\t\tsetTitle(Messages.CapturedValueEditingPage_MESSAGE_FIELD_EDITING_PAGE_TITLE);\n+\t\t\tsetDescription(Messages.CapturedValueEditingPage_MESSAGE_FIELD_EDITING_PAGE_DESCRIPTION);\n+\t\t} else {\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\"captured value must be a an IMethodParameter, IMethodReturnValue or IFeild\"); \/\/ $NON-NLS-1$\n+\t\t}\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tGridLayout layout = new GridLayout();\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tcreateConfigContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateSeparator(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateMetaInfoContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\n+\t\tbindListeners();\n+\t\tpopulateUi();\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\t}\n+\n+\tprivate Composite createConfigContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 5;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tnameText = createTextInput(container, cols, Messages.CapturedValueEditingPage_LABEL_NAME,\n+\t\t\t\tMessages.CapturedValueEditingPage_MESSAGE_NAME_OF_THE_CAPTURING);\n+\t\tif (capturedValue instanceof IField) {\n+\t\t\texpressionText = createTextInput(container, cols, Messages.CapturedValueEditingPage_LABEL_EXPRESSION,\n+\t\t\t\t\tMessages.CapturedValueEditingPage_MESSAGE_JAVA_PRIMARY_EXPRESSION_TO_BE_EVALUATED);\n+\t\t} else {\n+\t\t\tindexSpinner = createSpinnerInput(container, 3, Messages.CapturedValueEditingPage_LABEL_INDEX);\n+\t\t\tisReturnValueButton = createCheckbox(container, Messages.CapturedValueEditingPage_LABEL_IS_RETURN_VALUE);\n+\t\t\tisReturnValueButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 2, 0));\n+\t\t}\n+\t\tdescriptionText = createMultiTextInput(container, cols, Messages.CapturedValueEditingPage_LABEL_DESCRIPTION,\n+\t\t\t\tMessages.CapturedValueEditingPage_MESSAGE_OPTIONAL_DESCRIPTION_OF_THIS_CAPTURING);\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate Composite createMetaInfoContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 8;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tcontentTypeCombo = createComboInput(container, cols - 2, Messages.CapturedValueEditingPage_LABEL_CONTENT_TYPE,\n+\t\t\t\tStream.of(ContentType.values()).map(ContentType::toString).toArray(String[]::new));\n+\t\tcontentTypeClearButton = createButton(container, Messages.CapturedValueEditingPage_LABEL_CLEAR);\n+\t\tcontentTypeClearButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 2, 0));\n+\n+\t\trelationalKeyText = createTextInput(container, cols, Messages.CapturedValueEditingPage_LABEL_RELATIONAL_KEY,\n+\t\t\t\tMessages.CapturedValueEditingPage_MESSAGE_RELATIONAL_KEY_DESCRIPTION);\n+\n+\t\tconverterText = createTextInput(container, cols, Messages.CapturedValueEditingPage_LABEL_CONVERTER,\n+\t\t\t\tMessages.CapturedValueEditingPage_MESSAGE_CONVERTER_DESCRIPTION);\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void bindListeners() {\n+\t\tnameText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> capturedValue.setName(nameText.getText())));\n+\t\tif (indexSpinner != null) {\n+\t\t\tindexSpinner.addModifyListener(handleExceptionIfAny(\n+\t\t\t\t\t(ModifyListener) e -> ((IMethodParameter) capturedValue).setIndex(indexSpinner.getSelection())));\n+\t\t}\n+\t\tif (isReturnValueButton != null) {\n+\t\t\tisReturnValueButton.addListener(SWT.Selection, e -> {\n+\t\t\t\tindexSpinner.setEnabled(!isReturnValueButton.getSelection());\n+\t\t\t\tif (isReturnValueButton.getSelection()) {\n+\t\t\t\t\tconvertParameterToReturnValue();\n+\t\t\t\t} else {\n+\t\t\t\t\tconvertReturnValueToParameter();\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\tif (expressionText != null) {\n+\t\t\texpressionText.addModifyListener(handleExceptionIfAny(\n+\t\t\t\t\t(ModifyListener) e -> ((IField) capturedValue).setExpression(expressionText.getText())));\n+\t\t}\n+\t\tdescriptionText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> capturedValue.setDescription(descriptionText.getText())));\n+\t\tcontentTypeCombo.addModifyListener(handleExceptionIfAny(\n+\t\t\t\t(ModifyListener) e -> capturedValue.setContentType(contentTypeCombo.getSelectionIndex() == -1 ? null\n+\t\t\t\t\t\t: ContentType.valueOf(contentTypeCombo.getText().toUpperCase(Locale.ENGLISH)))));\n+\t\tcontentTypeClearButton.addListener(SWT.Selection,\n+\t\t\t\thandleExceptionIfAny((Listener) e -> contentTypeCombo.deselectAll()));\n+\t\trelationalKeyText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> capturedValue.setRelationKey(relationalKeyText.getText())));\n+\t\tconverterText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> capturedValue.setConverter(converterText.getText())));\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\tsetText(nameText, capturedValue.getName());\n+\t\tif (indexSpinner != null) {\n+\t\t\tindexSpinner.setSelection(\n+\t\t\t\t\tcapturedValue instanceof IMethodParameter ? ((IMethodParameter) capturedValue).getIndex() : 0);\n+\t\t\tindexSpinner.setEnabled(capturedValue instanceof IMethodParameter);\n+\t\t}\n+\t\tif (isReturnValueButton != null) {\n+\t\t\tisReturnValueButton.setSelection(capturedValue instanceof IMethodReturnValue);\n+\t\t}\n+\t\tif (expressionText != null) {\n+\t\t\tsetText(expressionText, ((IField) capturedValue).getExpression());\n+\t\t}\n+\t\tsetText(descriptionText, capturedValue.getDescription());\n+\t\tsetText(contentTypeCombo,\n+\t\t\t\tcapturedValue.getContentType() == null ? null : capturedValue.getContentType().toString());\n+\t\tsetText(relationalKeyText, capturedValue.getRelationKey());\n+\t\tsetText(converterText, capturedValue.getConverter());\n+\t}\n+\n+\tpublic ICapturedValue getResult() {\n+\t\treturn capturedValue;\n+\t}\n+\n+\tprivate void convertParameterToReturnValue() {\n+\t\tIMethodParameter parameter = (IMethodParameter) capturedValue;\n+\n+\t\t\/\/ TODO: do this is in model instead\n+\t\tIMethodReturnValue returnValue = event.createMethodReturnValue();\n+\t\treturnValue.setName(parameter.getName());\n+\t\treturnValue.setDescription(parameter.getDescription());\n+\t\treturnValue.setContentType(parameter.getContentType());\n+\t\treturnValue.setRelationKey(parameter.getRelationKey());\n+\t\treturnValue.setConverter(parameter.getConverter());\n+\n+\t\tcapturedValue = returnValue;\n+\t}\n+\n+\tprivate void convertReturnValueToParameter() {\n+\t\tIMethodReturnValue returnValue = (IMethodReturnValue) capturedValue;\n+\n+\t\t\/\/ TODO: do this is in model instead\n+\t\tIMethodParameter parameter = event.createMethodParameter();\n+\t\tparameter.setIndex(0);\n+\t\tparameter.setName(returnValue.getName());\n+\t\tparameter.setDescription(returnValue.getDescription());\n+\t\tparameter.setContentType(returnValue.getContentType());\n+\t\tparameter.setRelationKey(returnValue.getRelationKey());\n+\t\tparameter.setConverter(returnValue.getConverter());\n+\n+\t\tcapturedValue = parameter;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/CapturedValueEditingPage.java","additions":247,"deletions":0,"binary":false,"changes":247,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.wizard.Wizard;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+\n+public class EventEditingWizard extends Wizard {\n+\n+\tprivate final IEvent event;\n+\n+\tprotected EventEditingWizard(IEvent event) {\n+\t\tthis.event = event;\n+\t}\n+\n+\t@Override\n+\tpublic boolean performFinish() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic void addPages() {\n+\t\taddPage(new EventEditingWizardConfigPage(event));\n+\t\taddPage(new EventEditingWizardParameterPage(event));\n+\t\taddPage(new EventEditingWizardFieldPage(event));\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/EventEditingWizard.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,203 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.wizard.IWizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.events.ModifyListener;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Listener;\n+import org.eclipse.swt.widgets.Text;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent.Location;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+public class EventEditingWizardConfigPage extends BaseWizardPage {\n+\n+\tprivate final IEvent event;\n+\n+\tprivate Text idText;\n+\tprivate Text nameText;\n+\tprivate Text descriptionText;\n+\tprivate Text classText;\n+\tprivate Text methodNameText;\n+\tprivate Text methodDescriptorText;\n+\tprivate Text pathText;\n+\tprivate Combo locationCombo;\n+\tprivate Button locationClearButton;\n+\tprivate Button recordExceptionsButton;\n+\tprivate Button recordStackTraceButton;\n+\n+\tprotected EventEditingWizardConfigPage(IEvent event) {\n+\t\tsuper(Messages.EventEditingWizardConfigPage_PAGE_NAME);\n+\n+\t\tthis.event = event;\n+\t}\n+\n+\t@Override\n+\tpublic IWizardPage getNextPage() {\n+\t\treturn super.getNextPage();\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.EventEditingWizardConfigPage_MESSAGE_EVENT_EDITING_WIZARD_CONFIG_PAGE_TITLE);\n+\t\tsetDescription(Messages.EventEditingWizardConfigPage_MESSAGE_EVENT_EDITING_WIZARD_CONFIG_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tGridLayout layout = new GridLayout();\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tcreateConfigContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateSeparator(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateInstrumentationTargetContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateSeparator(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateMetaInfoContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\n+\t\tbindListeners();\n+\t\tpopulateUi();\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\t}\n+\n+\tprivate Composite createConfigContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 5;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tidText = createTextInput(container, cols, Messages.EventEditingWizardConfigPage_LABEL_ID,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_MESSAGE_EVENT_ID);\n+\t\tnameText = createTextInput(container, cols, Messages.EventEditingWizardConfigPage_LABEL_NAME,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_MESSAGE_NAME_OF_THE_EVENT);\n+\t\tdescriptionText = createMultiTextInput(container, cols, Messages.EventEditingWizardConfigPage_LABEL_DESCRIPTION,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_MESSAGE_OPTIONAL_DESCRIPTION_OF_THIS_EVENT);\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate Composite createInstrumentationTargetContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 8;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tclassText = createTextInput(container, cols, Messages.EventEditingWizardConfigPage_LABEL_CLASS,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_MESSAGE_FULLY_QUALIFIED_CLASS_NAME);\n+\t\tText[] receivers = createMultiInputTextInput(container, cols,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_LABEL_METHOD,\n+\t\t\t\tnew String[] {Messages.EventEditingWizardConfigPage_MESSAGE_METHOD_NAME,\n+\t\t\t\t\t\tMessages.EventEditingWizardConfigPage_MESSAGE_METHOD_DESCRIPTOR});\n+\n+\t\tmethodNameText = receivers[0];\n+\t\tmethodDescriptorText = receivers[1];\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate Composite createMetaInfoContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 8;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tpathText = createTextInput(container, cols, Messages.EventEditingWizardConfigPage_LABEL_PATH,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_MESSAGE_PATH_TO_EVENT);\n+\t\tlocationCombo = createComboInput(container, cols - 2, Messages.EventEditingWizardConfigPage_LABEL_LOCATION,\n+\t\t\t\tStream.of(Location.values()).map(Location::toString).toArray(String[]::new));\n+\t\tlocationClearButton = createButton(container, Messages.EventEditingWizardConfigPage_LABEL_CLEAR);\n+\t\tlocationClearButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 2, 0));\n+\n+\t\trecordExceptionsButton = createCheckboxInput(container, cols,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_LABEL_RECORD_EXCEPTIONS);\n+\t\trecordStackTraceButton = createCheckboxInput(container, cols,\n+\t\t\t\tMessages.EventEditingWizardConfigPage_LABEL_RECORD_STACK_TRACE);\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void bindListeners() {\n+\t\tidText.addModifyListener(handleExceptionIfAny((ModifyListener) e -> event.setId(idText.getText())));\n+\t\tnameText.addModifyListener(handleExceptionIfAny((ModifyListener) e -> event.setName(nameText.getText())));\n+\t\tdescriptionText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> event.setDescription(descriptionText.getText())));\n+\t\tmethodNameText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> event.setMethodName(methodNameText.getText())));\n+\t\tmethodDescriptorText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> event.setMethodDescriptor(methodDescriptorText.getText())));\n+\t\tpathText.addModifyListener(handleExceptionIfAny((ModifyListener) e -> event.setPath(pathText.getText())));\n+\t\tclassText.addModifyListener(handleExceptionIfAny((ModifyListener) e -> event.setClazz(classText.getText())));\n+\t\tlocationCombo.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> event.setLocation(locationCombo.getSelectionIndex() == -1\n+\t\t\t\t\t\t? null : Location.valueOf(locationCombo.getText().toUpperCase(Locale.ENGLISH)))));\n+\t\tlocationClearButton.addListener(SWT.Selection, e -> locationCombo.deselectAll());\n+\t\trecordExceptionsButton.addListener(SWT.Selection,\n+\t\t\t\thandleExceptionIfAny((Listener) e -> event.setRethrow(recordExceptionsButton.getSelection())));\n+\t\trecordStackTraceButton.addListener(SWT.Selection,\n+\t\t\t\thandleExceptionIfAny((Listener) e -> event.setStackTrace(recordStackTraceButton.getSelection())));\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\tsetText(idText, event.getId());\n+\t\tsetText(nameText, event.getName());\n+\t\tsetText(descriptionText, event.getDescription());\n+\t\tsetText(classText, event.getClazz());\n+\t\tsetText(methodNameText, event.getMethodName());\n+\t\tsetText(methodDescriptorText, event.getMethodDescriptor());\n+\t\tsetText(pathText, event.getPath());\n+\t\tsetText(locationCombo, event.getLocation() == null ? null : event.getLocation().toString());\n+\t\trecordExceptionsButton.setSelection(event.getRethrow());\n+\t\trecordStackTraceButton.setSelection(event.getStackTrace());\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/EventEditingWizardConfigPage.java","additions":203,"deletions":0,"binary":false,"changes":203,"status":"added"},{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.window.Window;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Display;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+import org.openjdk.jmc.console.agent.manager.model.IField;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+import org.openjdk.jmc.ui.wizards.OnePageWizardDialog;\n+\n+public class EventEditingWizardFieldPage extends BaseWizardPage {\n+\n+\tprivate final IEvent event;\n+\n+\tprivate TableInspector tableInspector;\n+\n+\tprotected EventEditingWizardFieldPage(IEvent event) {\n+\t\tsuper(Messages.EventEditingWizardFieldPage_PAGE_NAME);\n+\n+\t\tthis.event = event;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.EventEditingWizardFieldPage_MESSAGE_EVENT_EDITING_WIZARD_FIELD_PAGE_TITLE);\n+\t\tsetDescription(Messages.EventEditingWizardFieldPage_MESSAGE_EVENT_EDITING_WIZARD_FIELD_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\tcreateFieldTableContainer(container);\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\n+\t\tpopulateUi();\n+\t}\n+\n+\tprivate Composite createFieldTableContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\ttableInspector = new TableInspector(container,\n+\t\t\t\tTableInspector.MULTI | TableInspector.SHOW_HEADER | TableInspector.ADD_BUTTON\n+\t\t\t\t\t\t| TableInspector.EDIT_BUTTON | TableInspector.DUPLICATE_BUTTON | TableInspector.REMOVE_BUTTON) {\n+\t\t\t@Override\n+\t\t\tprotected void addColumns() {\n+\t\t\t\taddColumn(Messages.EventEditingWizardFieldPage_LABEL_NAME, Messages.EventEditingWizardFieldPage_ID_NAME,\n+\t\t\t\t\t\tnew FieldTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(IField field) {\n+\t\t\t\t\t\t\t\treturn field.getName();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\n+\t\t\t\taddColumn(Messages.EventEditingWizardFieldPage_LABEL_EXPRESSION,\n+\t\t\t\t\t\tMessages.EventEditingWizardFieldPage_ID_EXPRESSION, new FieldTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(IField field) {\n+\t\t\t\t\t\t\t\treturn field.getExpression();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\n+\t\t\t\taddColumn(Messages.EventEditingWizardFieldPage_LABEL_DESCRIPTION,\n+\t\t\t\t\t\tMessages.EventEditingWizardFieldPage_ID_DESCRIPTION, new FieldTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(IField field) {\n+\t\t\t\t\t\t\t\treturn field.getDescription();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onAddButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIField field = event.createField();\n+\t\t\t\twhile (new OnePageWizardDialog(Display.getCurrent().getActiveShell(),\n+\t\t\t\t\t\tnew CapturedValueEditingPage(event, field)).open() == Window.OK) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tevent.addField(field);\n+\t\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\t\tif (DialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\tMessages.EventEditingWizardFieldPage_MESSAGE_UNABLE_TO_SAVE_THE_FIELD,\n+\t\t\t\t\t\t\t\te.getMessage())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onEditButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIField original = (IField) selection.getFirstElement();\n+\t\t\t\tIField workingCopy = original.createWorkingCopy();\n+\t\t\t\twhile (new OnePageWizardDialog(Display.getCurrent().getActiveShell(),\n+\t\t\t\t\t\tnew CapturedValueEditingPage(event, workingCopy)).open() == Window.OK) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tevent.updateField(original, workingCopy);\n+\t\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\t\tif (DialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\tMessages.EventEditingWizardFieldPage_MESSAGE_UNABLE_TO_SAVE_THE_FIELD,\n+\t\t\t\t\t\t\t\te.getMessage())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onDuplicateButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIField original = (IField) selection.getFirstElement();\n+\t\t\t\tIField duplicate = original.createDuplicate();\n+\t\t\t\tevent.addField(duplicate);\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onRemoveButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tfor (Object field : selection) {\n+\t\t\t\t\tevent.removeField((IField) field);\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\t\t};\n+\t\ttableInspector.setContentProvider(new FieldTableContentProvider());\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\ttableInspector.setInput(event);\n+\t}\n+\n+\tprivate static class FieldTableContentProvider extends AbstractStructuredContentProvider {\n+\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object inputElement) {\n+\t\t\tif (!(inputElement instanceof IEvent)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be an IEvent\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tIEvent event = (IEvent) inputElement;\n+\t\t\treturn event.getFields();\n+\t\t}\n+\t}\n+\n+\tprivate static abstract class FieldTableLabelProvider extends ColumnLabelProvider {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tif (!(element instanceof IField)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"element must be an IField\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\treturn doGetText((IField) element);\n+\t\t}\n+\n+\t\tprotected abstract String doGetText(IField field);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/EventEditingWizardFieldPage.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"},{"patch":"@@ -0,0 +1,249 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.window.Window;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Display;\n+import org.openjdk.jmc.console.agent.manager.model.ICapturedValue;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+import org.openjdk.jmc.console.agent.manager.model.IMethodParameter;\n+import org.openjdk.jmc.console.agent.manager.model.IMethodReturnValue;\n+import org.openjdk.jmc.console.agent.manager.model.MethodParameter;\n+import org.openjdk.jmc.console.agent.manager.model.MethodReturnValue;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+import org.openjdk.jmc.ui.wizards.OnePageWizardDialog;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class EventEditingWizardParameterPage extends BaseWizardPage {\n+\n+\tprivate final IEvent event;\n+\n+\tprivate TableInspector tableInspector;\n+\n+\tprotected EventEditingWizardParameterPage(IEvent event) {\n+\t\tsuper(Messages.EventEditingWizardParameterPage_PAGE_NAME);\n+\n+\t\tthis.event = event;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.EventEditingWizardParameterPage_MESSAGE_EVENT_EDITING_WIZARD_PARAMETER_PAGE_TITLE);\n+\t\tsetDescription(\n+\t\t\t\tMessages.EventEditingWizardParameterPage_MESSAGE_EVENT_EDITING_WIZARD_PARAMETER_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\tcreateFieldTableContainer(container);\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\n+\t\tpopulateUi();\n+\t}\n+\n+\tprivate Composite createFieldTableContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\ttableInspector = new TableInspector(container, TableInspector.MULTI | TableInspector.SHOW_HEADER\n+\t\t\t\t| TableInspector.ADD_BUTTON | TableInspector.EDIT_BUTTON | TableInspector.REMOVE_BUTTON) {\n+\t\t\t@Override\n+\t\t\tprotected void addColumns() {\n+\t\t\t\taddColumn(Messages.EventEditingWizardParameterPage_LABEL_INDEX,\n+\t\t\t\t\t\tMessages.EventEditingWizardParameterPage_ID_INDEX, new ParameterTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(ICapturedValue parameter) {\n+\t\t\t\t\t\t\t\tif (parameter instanceof IMethodReturnValue) {\n+\t\t\t\t\t\t\t\t\treturn Messages.EventEditingWizardParameterPage_MESSAGE_RETURN_VALUE;\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tif (parameter instanceof IMethodParameter) {\n+\t\t\t\t\t\t\t\t\treturn ((IMethodParameter) parameter).getIndex() + \"\";\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\t\t\t\t\"element must be a an IMethodParameter or IMethodReturnValue\"); \/\/ $NON-NLS-1$\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\n+\t\t\t\taddColumn(Messages.EventEditingWizardParameterPage_LABEL_NAME,\n+\t\t\t\t\t\tMessages.EventEditingWizardParameterPage_ID_NAME, new ParameterTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(ICapturedValue parameter) {\n+\t\t\t\t\t\t\t\treturn parameter.getName();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\n+\t\t\t\taddColumn(Messages.EventEditingWizardParameterPage_LABEL_DESCRIPTION,\n+\t\t\t\t\t\tMessages.EventEditingWizardParameterPage_ID_DESCRIPTION, new ParameterTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(ICapturedValue parameter) {\n+\t\t\t\t\t\t\t\treturn parameter.getDescription();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onAddButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIMethodParameter parameter = event.createMethodParameter();\n+\t\t\t\tCapturedValueEditingPage page = new CapturedValueEditingPage(event, parameter);\n+\t\t\t\twhile (new OnePageWizardDialog(Display.getCurrent().getActiveShell(), page).open() == Window.OK) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tICapturedValue capturedValue = page.getResult();\n+\t\t\t\t\t\tif (capturedValue instanceof IMethodParameter) {\n+\t\t\t\t\t\t\tevent.addMethodParameter((IMethodParameter) capturedValue);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tevent.setMethodReturnValue((IMethodReturnValue) capturedValue);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\t\tif (DialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\tMessages.EventEditingWizardParameterPage_MESSAGE_UNABLE_TO_SAVE_THE_PARAMETER_OR_RETURN_VALUE,\n+\t\t\t\t\t\t\t\te.getMessage())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onEditButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tICapturedValue original = (ICapturedValue) selection.getFirstElement();\n+\t\t\t\tICapturedValue workingCopy;\n+\t\t\t\tif (original instanceof IMethodParameter) {\n+\t\t\t\t\tworkingCopy = ((IMethodParameter) original).createWorkingCopy();\n+\t\t\t\t} else {\n+\t\t\t\t\tworkingCopy = ((IMethodReturnValue) original).createWorkingCopy();\n+\t\t\t\t}\n+\t\t\t\tCapturedValueEditingPage page = new CapturedValueEditingPage(event, workingCopy);\n+\t\t\t\tif (new OnePageWizardDialog(Display.getCurrent().getActiveShell(), page).open() == Window.OK) {\n+\t\t\t\t\tICapturedValue modified = page.getResult();\n+\t\t\t\t\tif (original instanceof IMethodParameter) {\n+\t\t\t\t\t\tevent.removeMethodParameter((IMethodParameter) original);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tevent.setMethodReturnValue(null);\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (modified instanceof IMethodParameter) {\n+\t\t\t\t\t\tevent.addMethodParameter((IMethodParameter) modified);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tevent.setMethodReturnValue((IMethodReturnValue) modified);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onRemoveButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tfor (Object value : selection) {\n+\t\t\t\t\tICapturedValue capturedValue = (ICapturedValue) value;\n+\t\t\t\t\tif (capturedValue instanceof MethodParameter) {\n+\t\t\t\t\t\tevent.removeMethodParameter((MethodParameter) capturedValue);\n+\t\t\t\t\t} else if (capturedValue instanceof MethodReturnValue) {\n+\t\t\t\t\t\tevent.setMethodReturnValue(null);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\t\t};\n+\n+\t\ttableInspector.setContentProvider(new ParameterTableContentProvider());\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\ttableInspector.setInput(event);\n+\t}\n+\n+\tprivate static class ParameterTableContentProvider extends AbstractStructuredContentProvider {\n+\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object inputElement) {\n+\t\t\tif (!(inputElement instanceof IEvent)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be an IEvent\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tIEvent event = (IEvent) inputElement;\n+\t\t\tIMethodParameter[] parameters = event.getMethodParameters();\n+\t\t\tif (event.getMethodReturnValue() == null) {\n+\t\t\t\treturn parameters;\n+\t\t\t}\n+\n+\t\t\tList<ICapturedValue> capturedValues = new ArrayList<>(Arrays.asList(parameters));\n+\t\t\tcapturedValues.add(event.getMethodReturnValue());\n+\t\t\treturn capturedValues.toArray(new ICapturedValue[0]);\n+\t\t}\n+\t}\n+\n+\tprivate static abstract class ParameterTableLabelProvider extends ColumnLabelProvider {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tif (!(element instanceof IMethodParameter) && !(element instanceof IMethodReturnValue)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"element must be a an IMethodParameter or IMethodReturnValue\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\treturn doGetText((ICapturedValue) element);\n+\t\t}\n+\n+\t\tprotected abstract String doGetText(ICapturedValue field);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/EventEditingWizardParameterPage.java","additions":249,"deletions":0,"binary":false,"changes":249,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.wizard.IWizardPage;\n+import org.eclipse.jface.wizard.Wizard;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+\n+public class PresetEditingWizard extends Wizard {\n+\n+\tprivate final IPreset preset;\n+\n+\tprotected PresetEditingWizard(IPreset preset) {\n+\t\tthis.preset = preset;\n+\t}\n+\n+\t@Override\n+\tpublic boolean performFinish() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic void addPages() {\n+\t\taddPage(new PresetEditingWizardConfigPage(preset));\n+\t\taddPage(new PresetEditingWizardEventPage(preset));\n+\t\taddPage(new PresetEditingWizardPreviewPage(preset));\n+\t}\n+\n+\t@Override\n+\tpublic IWizardPage getNextPage(IWizardPage page) {\n+\t\tIWizardPage nextPage = super.getNextPage(page);\n+\t\tif (nextPage instanceof PresetEditingWizardPreviewPage) {\n+\t\t\t((PresetEditingWizardPreviewPage) nextPage).refresh();\n+\t\t}\n+\n+\t\treturn nextPage;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/PresetEditingWizard.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.events.ModifyListener;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Listener;\n+import org.eclipse.swt.widgets.Text;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+\n+public class PresetEditingWizardConfigPage extends BaseWizardPage {\n+\tprivate final IPreset preset;\n+\n+\tprivate Text fileNameText;\n+\tprivate Text classPrefixText;\n+\tprivate Button allowToStringButton;\n+\tprivate Button allowConverterButton;\n+\n+\tprotected PresetEditingWizardConfigPage(IPreset preset) {\n+\t\tsuper(Messages.PresetEditingWizardConfigPage_PAGE_NAME);\n+\n+\t\tthis.preset = preset;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.PresetEditingWizardConfigPage_MESSAGE_PRESET_EDITING_WIZARD_CONFIG_PAGE_TITLE);\n+\t\tsetDescription(Messages.PresetEditingWizardConfigPage_MESSAGE_PRESET_EDITING_WIZARD_CONFIG_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tcontainer.setLayout(new GridLayout());\n+\n+\t\tcreateFileNameContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateSeparator(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateGlobalConfigContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\n+\t\tpopulateUi();\n+\t\tbindListeners();\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\t}\n+\n+\tprivate Composite createFileNameContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 5;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tfileNameText = createTextInput(container, cols, Messages.PresetEditingWizardConfigPage_LABEL_FILE_NAME,\n+\t\t\t\tMessages.PresetEditingWizardConfigPage_MESSAGE_NAME_OF_THE_SAVED_XML);\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate Composite createGlobalConfigContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 5;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tclassPrefixText = createTextInput(container, cols, Messages.PresetEditingWizardConfigPage_LABEL_CLASS_PREFIX,\n+\t\t\t\tMessages.PresetEditingWizardConfigPage_MESSAGE_PREFIX_ADDED_TO_GENERATED_EVENT_CLASSES);\n+\t\tallowToStringButton = createCheckboxInput(parent, cols,\n+\t\t\t\tMessages.PresetEditingWizardConfigPage_LABEL_ALLOW_TO_STRING);\n+\t\tallowConverterButton = createCheckboxInput(parent, cols,\n+\t\t\t\tMessages.PresetEditingWizardConfigPage_LABEL_ALLOW_CONVERTER);\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void bindListeners() {\n+\t\tfileNameText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> preset.setFileName(fileNameText.getText())));\n+\t\tclassPrefixText.addModifyListener(\n+\t\t\t\thandleExceptionIfAny((ModifyListener) e -> preset.setClassPrefix(classPrefixText.getText())));\n+\t\tallowToStringButton.addListener(SWT.Selection,\n+\t\t\t\thandleExceptionIfAny((Listener) e -> preset.setAllowToString(allowToStringButton.getSelection())));\n+\t\tallowConverterButton.addListener(SWT.Selection,\n+\t\t\t\thandleExceptionIfAny((Listener) e -> preset.setAllowConverter(allowConverterButton.getSelection())));\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\tsetText(fileNameText, preset.getFileName());\n+\t\tsetText(classPrefixText, preset.getClassPrefix());\n+\t\tallowToStringButton.setSelection(preset.getAllowToString());\n+\t\tallowConverterButton.setSelection(preset.getAllowConverter());\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/PresetEditingWizardConfigPage.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -0,0 +1,203 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.openjdk.jmc.console.agent.manager.model.IEvent;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+\n+public class PresetEditingWizardEventPage extends BaseWizardPage {\n+\n+\tprivate final IPreset preset;\n+\n+\tprivate TableInspector tableInspector;\n+\n+\tprotected PresetEditingWizardEventPage(IPreset preset) {\n+\t\tsuper(Messages.PresetEditingWizardEventPage_PAGE_NAME);\n+\n+\t\tthis.preset = preset;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.PresetEditingWizardEventPage_MESSAGE_PRESET_EDITING_WIZARD_EVENT_PAGE_TITLE);\n+\t\tsetDescription(Messages.PresetEditingWizardEventPage_MESSAGE_PRESET_EDITING_WIZARD_EVENT_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\tcreateEventTableContainer(container);\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\n+\t\tpopulateUi();\n+\t}\n+\n+\tprivate Composite createEventTableContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\ttableInspector = new TableInspector(container,\n+\t\t\t\tTableInspector.MULTI | TableInspector.SHOW_HEADER | TableInspector.ADD_BUTTON\n+\t\t\t\t\t\t| TableInspector.EDIT_BUTTON | TableInspector.DUPLICATE_BUTTON | TableInspector.REMOVE_BUTTON) {\n+\t\t\t@Override\n+\t\t\tprotected void addColumns() {\n+\t\t\t\taddColumn(Messages.PresetEditingWizardEventPage_LABEL_ID_COLUMN,\n+\t\t\t\t\t\tMessages.PresetEditingWizardEventPage_ID_ID_COLUMN, new EventTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(IEvent event) {\n+\t\t\t\t\t\t\t\treturn event.getId();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\n+\t\t\t\taddColumn(Messages.PresetEditingWizardEventPage_LABEL_NAME_COLUMN,\n+\t\t\t\t\t\tMessages.PresetEditingWizardEventPage_ID_NAME_COLUMN, new EventTableLabelProvider() {\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tprotected String doGetText(IEvent event) {\n+\t\t\t\t\t\t\t\treturn event.getName();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onAddButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIEvent event = preset.createEvent();\n+\t\t\t\twhile (DialogToolkit.openWizardWithHelp(new EventEditingWizard(event))) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tpreset.addEvent(event);\n+\t\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\t\tif (DialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\tMessages.PresetEditingWizardEventPage_MESSAGE_UNABLE_TO_SAVE_THE_PRESET,\n+\t\t\t\t\t\t\t\te.getMessage())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onEditButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIEvent original = (IEvent) selection.getFirstElement();\n+\t\t\t\tIEvent workingCopy = original.createWorkingCopy();\n+\t\t\t\twhile (DialogToolkit.openWizardWithHelp(new EventEditingWizard(workingCopy))) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tpreset.updateEvent(original, workingCopy);\n+\t\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\t\tif (DialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\tMessages.PresetEditingWizardEventPage_MESSAGE_UNABLE_TO_SAVE_THE_PRESET,\n+\t\t\t\t\t\t\t\te.getMessage())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onDuplicateButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIEvent original = (IEvent) selection.getFirstElement();\n+\t\t\t\tIEvent duplicate = original.createDuplicate();\n+\t\t\t\tpreset.addEvent(duplicate);\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onRemoveButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tfor (Object event : selection) {\n+\t\t\t\t\tpreset.removeEvent((IEvent) event);\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\t\t};\n+\t\ttableInspector.setContentProvider(new EventTableContentProvider());\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\ttableInspector.setInput(preset);\n+\t}\n+\n+\tprivate static class EventTableContentProvider extends AbstractStructuredContentProvider {\n+\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object inputElement) {\n+\t\t\tif (!(inputElement instanceof IPreset)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be an IPreset\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tIPreset preset = (IPreset) inputElement;\n+\t\t\treturn preset.getEvents();\n+\t\t}\n+\t}\n+\n+\tprivate static abstract class EventTableLabelProvider extends ColumnLabelProvider {\n+\t\t@Override\n+\t\tpublic String getText(Object element) {\n+\t\t\tif (!(element instanceof IEvent)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"element must be an IEvent\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\treturn doGetText((IEvent) element);\n+\t\t}\n+\n+\t\tprotected abstract String doGetText(IEvent event);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/PresetEditingWizardEventPage.java","additions":203,"deletions":0,"binary":false,"changes":203,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.text.Document;\n+import org.eclipse.jface.text.IDocument;\n+import org.eclipse.jface.text.IDocumentPartitioner;\n+import org.eclipse.jface.text.rules.FastPartitioner;\n+import org.eclipse.jface.text.source.SourceViewer;\n+import org.eclipse.jface.text.source.VerticalRuler;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.raweditor.internal.ColorManager;\n+import org.openjdk.jmc.console.agent.raweditor.internal.XmlConfiguration;\n+import org.openjdk.jmc.console.agent.raweditor.internal.XmlPartitionScanner;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+\n+public class PresetEditingWizardPreviewPage extends BaseWizardPage {\n+\n+\tprivate IPreset preset;\n+\n+\tprivate IDocument document;\n+\n+\tprotected PresetEditingWizardPreviewPage(IPreset preset) {\n+\t\tsuper(Messages.PresetEditingWizardPreviewPage_PAGE_NAME);\n+\n+\t\tthis.preset = preset;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.PresetEditingWizardPreviewPage_MESSAGE_PRESET_EDITING_WIZARD_PREVIEW_PAGE_TITLE);\n+\t\tsetDescription(Messages.PresetEditingWizardPreviewPage_MESSAGE_PRESET_EDITING_WIZARD_PREVIEW_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\tcreatePreviewViewer(container);\n+\n+\t\tpopulateUi();\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\t}\n+\n+\tprivate void createPreviewViewer(Composite container) {\n+\t\tComposite parent = new Composite(container, SWT.NONE);\n+\t\tparent.setLayout(new FillLayout());\n+\n+\t\tVerticalRuler ruler = new VerticalRuler(0);\n+\t\tSourceViewer editor = new SourceViewer(parent, ruler, SWT.V_SCROLL | SWT.H_SCROLL);\n+\t\teditor.configure(new XmlConfiguration(new ColorManager()));\n+\n+\t\tdocument = new Document();\n+\t\tIDocumentPartitioner partitioner = new FastPartitioner(new XmlPartitionScanner(),\n+\t\t\t\tnew String[] {XmlPartitionScanner.XML_TAG, XmlPartitionScanner.XML_COMMENT});\n+\t\tpartitioner.connect(document);\n+\t\tdocument.setDocumentPartitioner(partitioner);\n+\t\teditor.setDocument(document);\n+\n+\t\teditor.setEditable(false);\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\tdocument.set(preset.serialize());\n+\t}\n+\n+\tpublic void refresh() {\n+\t\tif (document != null) {\n+\t\t\tdocument.set(preset.serialize());\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/PresetEditingWizardPreviewPage.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,246 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.manager.wizards;\n+\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.openjdk.jmc.console.agent.AgentPlugin;\n+import org.openjdk.jmc.console.agent.manager.model.IPreset;\n+import org.openjdk.jmc.console.agent.manager.model.PresetRepository;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.console.agent.wizards.BaseWizardPage;\n+import org.openjdk.jmc.ui.misc.AbstractStructuredContentProvider;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+import org.xml.sax.SAXException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class PresetManagerPage extends BaseWizardPage {\n+\n+\tprivate static final String ID_PRESET = \"preset\"; \/\/ $NON-NLS-1$\n+\tprivate static final String PRESET_XML_EXTENSION = \"*.xml\"; \/\/ $NON-NLS-1$\n+\n+\tprivate final PresetRepository repository;\n+\n+\tprivate TableInspector tableInspector;\n+\n+\tpublic PresetManagerPage(PresetRepository repository) {\n+\t\tsuper(Messages.PresetManagerPage_PAGE_NAME);\n+\n+\t\tthis.repository = repository;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.PresetManagerPage_MESSAGE_PRESET_MANAGER_PAGE_TITLE);\n+\t\tsetDescription(Messages.PresetManagerPage_MESSAGE_PRESET_MANAGER_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\tcreatePresetTableContainer(container);\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\n+\t\tpopulateUi();\n+\t}\n+\n+\tprivate Composite createPresetTableContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\ttableInspector = new TableInspector(container,\n+\t\t\t\tTableInspector.MULTI | TableInspector.ADD_BUTTON | TableInspector.EDIT_BUTTON\n+\t\t\t\t\t\t| TableInspector.DUPLICATE_BUTTON | TableInspector.REMOVE_BUTTON\n+\t\t\t\t\t\t| TableInspector.IMPORT_FILES_BUTTON | TableInspector.EXPORT_FILE_BUTTON) {\n+\t\t\t@Override\n+\t\t\tprotected void addColumns() {\n+\t\t\t\taddColumn(ID_PRESET, new ColumnLabelProvider() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic String getText(Object element) {\n+\t\t\t\t\t\tif (!(element instanceof IPreset)) {\n+\t\t\t\t\t\t\tthrow new IllegalArgumentException(\"element must be an IPreset\"); \/\/ $NON-NLS-1$\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tIPreset preset = (IPreset) element;\n+\t\t\t\t\t\treturn preset.getFileName() + \" - \" + preset.getEvents().length + \" \"\n+\t\t\t\t\t\t\t\t+ Messages.PresetManagerPage_MESSAGE_EVENTS;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Image getImage(Object element) {\n+\t\t\t\t\t\treturn AgentPlugin.getDefault().getImage(AgentPlugin.ICON_AGENT); \/\/ TODO: replace the icon in the future\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onAddButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIPreset preset = repository.createPreset();\n+\t\t\t\twhile (DialogToolkit.openWizardWithHelp(new PresetEditingWizard(preset))) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\trepository.addPreset(preset);\n+\t\t\t\t\t} catch (IllegalArgumentException | IOException e) {\n+\t\t\t\t\t\tif (DialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\tMessages.PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_SAVE_THE_PRESET,\n+\t\t\t\t\t\t\t\te.getLocalizedMessage())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onEditButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIPreset original = (IPreset) selection.getFirstElement();\n+\t\t\t\tIPreset workingCopy = original.createWorkingCopy();\n+\t\t\t\twhile (DialogToolkit.openWizardWithHelp(new PresetEditingWizard(workingCopy))) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\trepository.updatePreset(original, workingCopy);\n+\t\t\t\t\t} catch (IllegalArgumentException | IOException e) {\n+\t\t\t\t\t\tif (DialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\tMessages.PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_SAVE_THE_PRESET,\n+\t\t\t\t\t\t\t\te.getLocalizedMessage())) {\n+\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onDuplicateButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tIPreset original = (IPreset) selection.getFirstElement();\n+\t\t\t\tIPreset duplicate = original.createDuplicate();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\trepository.addPreset(duplicate);\n+\t\t\t\t} catch (IllegalArgumentException | IOException e) {\n+\t\t\t\t\tDialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\tMessages.PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_SAVE_THE_PRESET,\n+\t\t\t\t\t\t\te.getLocalizedMessage());\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onRemoveButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tfor (Object preset : selection) {\n+\t\t\t\t\trepository.removePreset((IPreset) preset);\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onImportFilesButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tString[] files = openFileDialog(Messages.PresetManagerPage_MESSAGE_IMPORT_EXTERNAL_PRESET_FILES,\n+\t\t\t\t\t\tnew String[] {PRESET_XML_EXTENSION}, SWT.OPEN | SWT.MULTI);\n+\t\t\t\tif (files.length != 0) {\n+\t\t\t\t\tfor (String path : files) {\n+\t\t\t\t\t\tFile file = new File(path);\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\trepository.importPreset(file);\n+\t\t\t\t\t\t} catch (IOException | SAXException e) {\n+\t\t\t\t\t\t\tDialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\t\t\tMessages.PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_IMPORT_THE_PRESET,\n+\t\t\t\t\t\t\t\t\te.getLocalizedMessage());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\ttableInspector.getViewer().refresh();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tprotected void onExportFileButtonSelected(IStructuredSelection selection) {\n+\t\t\t\tString[] files = openFileDialog(Messages.PresetManagerPage_MESSAGE_EXPORT_PRESET_TO_A_FILE,\n+\t\t\t\t\t\tnew String[] {PRESET_XML_EXTENSION}, SWT.SAVE | SWT.SINGLE);\n+\t\t\t\tif (files.length == 0) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\tFile file = new File(files[0]);\n+\t\t\t\ttry {\n+\t\t\t\t\trepository.exportPreset((IPreset) selection.getFirstElement(), file);\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tDialogToolkit.openConfirmOnUiThread(\n+\t\t\t\t\t\t\tMessages.PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_EXPORT_THE_PRESET,\n+\t\t\t\t\t\t\te.getLocalizedMessage());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t\ttableInspector.setContentProvider(new PresetTableContentProvider());\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\ttableInspector.setInput(repository);\n+\t}\n+\n+\tprivate static class PresetTableContentProvider extends AbstractStructuredContentProvider {\n+\t\t@Override\n+\t\tpublic Object[] getElements(Object inputElement) {\n+\t\t\tif (!(inputElement instanceof PresetRepository)) {\n+\t\t\t\tthrow new IllegalArgumentException(\"input element must be a PresetRepository\"); \/\/ $NON-NLS-1$\n+\t\t\t}\n+\n+\t\t\tPresetRepository repository = (PresetRepository) inputElement;\n+\t\t\treturn repository.listPresets();\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/wizards\/PresetManagerPage.java","additions":246,"deletions":0,"binary":false,"changes":246,"status":"added"},{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.messages.internal;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.console.ext.agent.messages.internal.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String AgentEditorOpener_JOB_NAME;\n+\tpublic static String AgentEditorOpener_MESSAGE_COULD_NOT_CONNECT;\n+\tpublic static String AgentEditorOpener_MESSAGE_STARTING_AGENT_ON_REMOTE_JVM_NOT_SUPPORTED;\n+\tpublic static String AgentEditorOpener_MESSAGE_START_AGENT_MANUALLY;\n+\tpublic static String AgentEditorOpener_MESSAGE_FAILED_TO_OPEN_AGENT_EDITOR;\n+\tpublic static String AgentEditor_CONNECTION_LOST;\n+\tpublic static String AgentEditor_AGENT_EDITOR_TITLE;\n+\tpublic static String CapturedValue_ERROR_RELATION_KEY_HAS_INCORRECT_SYNTAX;\n+\tpublic static String CapturedValue_ERROR_CONVERTER_HAS_INCORRECT_SYNTAX;\n+\tpublic static String Event_ERROR_ID_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Event_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Event_ERROR_CLASS_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Event_ERROR_METHOD_NAME_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Event_ERROR_METHOD_DESCRIPTOR_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Event_ERROR_METHOD_PARAMETER_CANNOT_BE_NULL;\n+\tpublic static String Event_ERROR_FIELD_CANNOT_BE_NULL;\n+\tpublic static String Event_ERROR_CLASS_HAS_INCORRECT_SYNTAX;\n+\tpublic static String Event_ERROR_PATH_HAS_INCORRECT_SYNTAX;\n+\tpublic static String Event_ERROR_METHOD_NAME_HAS_INCORRECT_SYNTAX;\n+\tpublic static String Event_ERROR_METHOD_DESCRIPTOR_HAS_INCORRECT_SYNTAX;\n+\tpublic static String Event_ERROR_INDEX_MUST_BE_UNIQUE;\n+\tpublic static String Field_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Field_ERROR_EXPRESSION_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Field_ERROR_EXPRESSION_HAS_INCORRECT_SYNTAX;\n+\tpublic static String MethodParameter_ERROR_INDEX_CANNOT_BE_LESS_THAN_ZERO;\n+\tpublic static String MethodParameter_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Preset_ERROR_FILE_NAME_CANNOT_BE_EMPTY_OR_NULL;\n+\tpublic static String Preset_ERROR_MUST_HAVE_UNIQUE_ID;\n+\tpublic static String Preset_ERROR_MUST_HAVE_UNIQUE_EVENT_CLASS_NAME;\n+\tpublic static String CapturedValueEditingPage_PAGE_NAME;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_PARAMETER_OR_RETURN_VALUE_EDITING_PAGE_TITLE;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_PARAMETER_OR_RETURN_VALUE_EDITING_PAGE_DESCRIPTION;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_FIELD_EDITING_PAGE_TITLE;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_FIELD_EDITING_PAGE_DESCRIPTION;\n+\tpublic static String CapturedValueEditingPage_LABEL_NAME;\n+\tpublic static String CapturedValueEditingPage_LABEL_INDEX;\n+\tpublic static String CapturedValueEditingPage_LABEL_IS_RETURN_VALUE;\n+\tpublic static String CapturedValueEditingPage_LABEL_EXPRESSION;\n+\tpublic static String CapturedValueEditingPage_LABEL_DESCRIPTION;\n+\tpublic static String CapturedValueEditingPage_LABEL_CONTENT_TYPE;\n+\tpublic static String CapturedValueEditingPage_LABEL_CLEAR;\n+\tpublic static String CapturedValueEditingPage_LABEL_RELATIONAL_KEY;\n+\tpublic static String CapturedValueEditingPage_LABEL_CONVERTER;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_NAME_OF_THE_CAPTURING;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_JAVA_PRIMARY_EXPRESSION_TO_BE_EVALUATED;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_OPTIONAL_DESCRIPTION_OF_THIS_CAPTURING;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_RELATIONAL_KEY_DESCRIPTION;\n+\tpublic static String CapturedValueEditingPage_MESSAGE_CONVERTER_DESCRIPTION;\n+\tpublic static String EventEditingWizardConfigPage_PAGE_NAME;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_EVENT_EDITING_WIZARD_CONFIG_PAGE_TITLE;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_EVENT_EDITING_WIZARD_CONFIG_PAGE_DESCRIPTION;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_ID;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_NAME;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_DESCRIPTION;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_CLASS;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_METHOD;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_PATH;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_LOCATION;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_CLEAR;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_RECORD_EXCEPTIONS;\n+\tpublic static String EventEditingWizardConfigPage_LABEL_RECORD_STACK_TRACE;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_EVENT_ID;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_NAME_OF_THE_EVENT;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_FULLY_QUALIFIED_CLASS_NAME;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_METHOD_NAME;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_METHOD_DESCRIPTOR;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_OPTIONAL_DESCRIPTION_OF_THIS_EVENT;\n+\tpublic static String EventEditingWizardConfigPage_MESSAGE_PATH_TO_EVENT;\n+\tpublic static String EventEditingWizardFieldPage_PAGE_NAME;\n+\tpublic static String EventEditingWizardFieldPage_MESSAGE_EVENT_EDITING_WIZARD_FIELD_PAGE_TITLE;\n+\tpublic static String EventEditingWizardFieldPage_MESSAGE_EVENT_EDITING_WIZARD_FIELD_PAGE_DESCRIPTION;\n+\tpublic static String EventEditingWizardFieldPage_MESSAGE_UNABLE_TO_SAVE_THE_FIELD;\n+\tpublic static String EventEditingWizardFieldPage_LABEL_NAME;\n+\tpublic static String EventEditingWizardFieldPage_LABEL_EXPRESSION;\n+\tpublic static String EventEditingWizardFieldPage_LABEL_DESCRIPTION;\n+\tpublic static String EventEditingWizardFieldPage_ID_NAME;\n+\tpublic static String EventEditingWizardFieldPage_ID_EXPRESSION;\n+\tpublic static String EventEditingWizardFieldPage_ID_DESCRIPTION;\n+\tpublic static String EventEditingWizardParameterPage_PAGE_NAME;\n+\tpublic static String EventEditingWizardParameterPage_MESSAGE_EVENT_EDITING_WIZARD_PARAMETER_PAGE_TITLE;\n+\tpublic static String EventEditingWizardParameterPage_MESSAGE_EVENT_EDITING_WIZARD_PARAMETER_PAGE_DESCRIPTION;\n+\tpublic static String EventEditingWizardParameterPage_MESSAGE_RETURN_VALUE;\n+\tpublic static String EventEditingWizardParameterPage_MESSAGE_UNABLE_TO_SAVE_THE_PARAMETER_OR_RETURN_VALUE;\n+\tpublic static String EventEditingWizardParameterPage_LABEL_INDEX;\n+\tpublic static String EventEditingWizardParameterPage_LABEL_NAME;\n+\tpublic static String EventEditingWizardParameterPage_LABEL_DESCRIPTION;\n+\tpublic static String EventEditingWizardParameterPage_ID_INDEX;\n+\tpublic static String EventEditingWizardParameterPage_ID_NAME;\n+\tpublic static String EventEditingWizardParameterPage_ID_DESCRIPTION;\n+\tpublic static String PresetEditingWizardConfigPage_PAGE_NAME;\n+\tpublic static String PresetEditingWizardConfigPage_MESSAGE_PRESET_EDITING_WIZARD_CONFIG_PAGE_TITLE;\n+\tpublic static String PresetEditingWizardConfigPage_MESSAGE_PRESET_EDITING_WIZARD_CONFIG_PAGE_DESCRIPTION;\n+\tpublic static String PresetEditingWizardConfigPage_LABEL_FILE_NAME;\n+\tpublic static String PresetEditingWizardConfigPage_LABEL_CLASS_PREFIX;\n+\tpublic static String PresetEditingWizardConfigPage_LABEL_ALLOW_TO_STRING;\n+\tpublic static String PresetEditingWizardConfigPage_LABEL_ALLOW_CONVERTER;\n+\tpublic static String PresetEditingWizardConfigPage_MESSAGE_NAME_OF_THE_SAVED_XML;\n+\tpublic static String PresetEditingWizardConfigPage_MESSAGE_PREFIX_ADDED_TO_GENERATED_EVENT_CLASSES;\n+\tpublic static String PresetEditingWizardEventPage_PAGE_NAME;\n+\tpublic static String PresetEditingWizardEventPage_MESSAGE_PRESET_EDITING_WIZARD_EVENT_PAGE_TITLE;\n+\tpublic static String PresetEditingWizardEventPage_MESSAGE_PRESET_EDITING_WIZARD_EVENT_PAGE_DESCRIPTION;\n+\tpublic static String PresetEditingWizardEventPage_MESSAGE_UNABLE_TO_SAVE_THE_PRESET;\n+\tpublic static String PresetEditingWizardEventPage_LABEL_ID_COLUMN;\n+\tpublic static String PresetEditingWizardEventPage_LABEL_NAME_COLUMN;\n+\tpublic static String PresetEditingWizardEventPage_ID_ID_COLUMN;\n+\tpublic static String PresetEditingWizardEventPage_ID_NAME_COLUMN;\n+\tpublic static String PresetEditingWizardPreviewPage_PAGE_NAME;\n+\tpublic static String PresetEditingWizardPreviewPage_MESSAGE_PRESET_EDITING_WIZARD_PREVIEW_PAGE_TITLE;\n+\tpublic static String PresetEditingWizardPreviewPage_MESSAGE_PRESET_EDITING_WIZARD_PREVIEW_PAGE_DESCRIPTION;\n+\tpublic static String PresetManagerPage_PAGE_NAME;\n+\tpublic static String PresetManagerPage_MESSAGE_PRESET_MANAGER_PAGE_TITLE;\n+\tpublic static String PresetManagerPage_MESSAGE_PRESET_MANAGER_PAGE_DESCRIPTION;\n+\tpublic static String PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_SAVE_THE_PRESET;\n+\tpublic static String PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_IMPORT_THE_PRESET;\n+\tpublic static String PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_EXPORT_THE_PRESET;\n+\tpublic static String PresetManagerPage_MESSAGE_IMPORT_EXTERNAL_PRESET_FILES;\n+\tpublic static String PresetManagerPage_MESSAGE_EXPORT_PRESET_TO_A_FILE;\n+\tpublic static String PresetManagerPage_MESSAGE_EVENTS;\n+\tpublic static String EditorTab_TITLE;\n+\tpublic static String ActionButtons_LABEL_SAVE_TO_PRESET_BUTTON;\n+\tpublic static String ActionButtons_LABEL_SAVE_TO_FILE_BUTTON;\n+\tpublic static String ActionButtons_LABEL_APPLY_PRESET_BUTTON;\n+\tpublic static String ActionButtons_LABEL_APPLY_LOCAL_CONFIG_BUTTON;\n+\tpublic static String ActionButtons_ERROR_PAGE_TITLE;\n+\tpublic static String ActionButtons_MESSAGE_APPLY_LOCAL_CONFIG;\n+\tpublic static String LiveConfigTab_TITLE;\n+\tpublic static String OverviewTab_TITLE;\n+\tpublic static String OverviewTab_MESSAGE_AGENT_LOADED;\n+\tpublic static String EditAgentSection_MESSAGE_ENTER_PATH;\n+\tpublic static String EditAgentSection_MESSAGE_AGENT_XML_PATH;\n+\tpublic static String EditAgentSection_MESSAGE_BROWSE;\n+\tpublic static String EditAgentSection_MESSAGE_EDIT;\n+\tpublic static String EditAgentSection_MESSAGE_VALIDATE;\n+\tpublic static String EditAgentSection_MESSAGE_APPLY;\n+\tpublic static String EditAgentSection_MESSAGE_NO_WARNINGS_OR_ERRORS_FOUND;\n+\tpublic static String PresetsTab_TITLE;\n+\tpublic static String BaseWizardPage_MESSAGE_UNEXPECTED_ERROR_HAS_OCCURRED;\n+\tpublic static String StartAgentWizard_MESSAGE_FAILED_TO_START_AGENT;\n+\tpublic static String StartAgentWizard_MESSAGE_FAILED_TO_OPEN_AGENT_EDITOR;\n+\tpublic static String StartAgentWizard_MESSAGE_UNEXPECTED_ERROR_HAS_OCCURRED;\n+\tpublic static String StartAgentWizard_MESSAGE_INVALID_AGENT_CONFIG;\n+\tpublic static String StartAgentWizard_MESSAGE_ACCESS_TO_UNSAFE_REQUIRED;\n+\tpublic static String StartAgentWizard_WIZARD_FINISH_BUTTON_TEXT;\n+\tpublic static String StartAgentWizard_MESSAGE_FAILED_TO_LOAD_AGENT;\n+\tpublic static String StartAgentWizardPage_PAGE_NAME;\n+\tpublic static String StartAgentWizardPage_MESSAGE_START_AGENT_WIZARD_PAGE_TITLE;\n+\tpublic static String StartAgentWizardPage_MESSAGE_START_AGENT_WIZARD_PAGE_DESCRIPTION;\n+\tpublic static String StartAgentWizardPage_MESSAGE_PATH_TO_AN_AGENT_JAR;\n+\tpublic static String StartAgentWizardPage_MESSAGE_PATH_TO_AN_AGENT_CONFIG;\n+\tpublic static String StartAgentWizardPage_LABEL_TARGET_JVM;\n+\tpublic static String StartAgentWizardPage_LABEL_AGENT_JAR;\n+\tpublic static String StartAgentWizardPage_LABEL_AGENT_XML;\n+\tpublic static String StartAgentWizardPage_LABEL_BROWSE;\n+\tpublic static String StartAgentWizardPage_DIALOG_BROWSER_FOR_AGENT_JAR;\n+\tpublic static String StartAgentWizardPage_DIALOG_BROWSER_FOR_AGENT_CONFIG;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/messages\/internal\/Messages.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor;\n+\n+import org.openjdk.jmc.console.agent.raweditor.internal.XmlEditor;\n+\n+public class RawEditor extends XmlEditor {\n+\tpublic static final String EDITOR_ID = \"org.openjdk.jmc.console.ext.agent.tabs.raweditor.RawEditor\"; \/\/$NON-NLS-1$\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/RawEditor.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.swt.graphics.Color;\n+import org.eclipse.swt.graphics.RGB;\n+import org.eclipse.swt.widgets.Display;\n+\n+public class ColorManager {\n+\n+\tprotected Map<RGB, Color> fColorTable = new HashMap<>(10);\n+\n+\tpublic void dispose() {\n+\t\tfColorTable.values().forEach(Color::dispose);\n+\t}\n+\n+\tpublic Color getColor(RGB rgb) {\n+\t\tColor color = fColorTable.get(rgb);\n+\t\tif (color == null) {\n+\t\t\tcolor = new Color(Display.getCurrent(), rgb);\n+\t\t\tfColorTable.put(rgb, color);\n+\t\t}\n+\t\treturn color;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/ColorManager.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.core.runtime.Assert;\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.jface.text.DocumentEvent;\n+import org.eclipse.jface.text.IDocument;\n+import org.eclipse.jface.text.IRegion;\n+import org.eclipse.jface.text.ITypedRegion;\n+import org.eclipse.jface.text.Region;\n+import org.eclipse.jface.text.TextAttribute;\n+import org.eclipse.jface.text.TextPresentation;\n+import org.eclipse.jface.text.presentation.IPresentationDamager;\n+import org.eclipse.jface.text.presentation.IPresentationRepairer;\n+import org.eclipse.swt.custom.StyleRange;\n+\n+public class NonRuleBasedDamagerRepairer implements IPresentationDamager, IPresentationRepairer {\n+\n+\t\/** The document this object works on *\/\n+\tprotected IDocument fDocument;\n+\t\/** The default text attribute if non is returned as data by the current token *\/\n+\tprotected TextAttribute fDefaultTextAttribute;\n+\n+\tpublic NonRuleBasedDamagerRepairer(TextAttribute defaultTextAttribute) {\n+\t\tAssert.isNotNull(defaultTextAttribute);\n+\n+\t\tfDefaultTextAttribute = defaultTextAttribute;\n+\t}\n+\n+\t@Override\n+\tpublic void setDocument(IDocument document) {\n+\t\tfDocument = document;\n+\t}\n+\n+\t\/**\n+\t * Returns the end offset of the line that contains the specified offset or if the offset is\n+\t * inside a line delimiter, the end offset of the next line.\n+\t *\n+\t * @param offset\n+\t *            the offset whose line end offset must be computed\n+\t * @return the line end offset for the given offset\n+\t * @exception BadLocationException\n+\t *                if offset is invalid in the current document\n+\t *\/\n+\tprotected int endOfLineOf(int offset) throws BadLocationException {\n+\n+\t\tIRegion info = fDocument.getLineInformationOfOffset(offset);\n+\t\tif (offset <= info.getOffset() + info.getLength())\n+\t\t\treturn info.getOffset() + info.getLength();\n+\n+\t\tint line = fDocument.getLineOfOffset(offset);\n+\t\ttry {\n+\t\t\tinfo = fDocument.getLineInformation(line + 1);\n+\t\t\treturn info.getOffset() + info.getLength();\n+\t\t} catch (BadLocationException x) {\n+\t\t\treturn fDocument.getLength();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IRegion getDamageRegion(ITypedRegion partition, DocumentEvent event, boolean documentPartitioningChanged) {\n+\t\tif (!documentPartitioningChanged) {\n+\t\t\ttry {\n+\n+\t\t\t\tIRegion info = fDocument.getLineInformationOfOffset(event.getOffset());\n+\t\t\t\tint start = Math.max(partition.getOffset(), info.getOffset());\n+\n+\t\t\t\tint end = event.getOffset() + (event.getText() == null ? event.getLength() : event.getText().length());\n+\n+\t\t\t\tif (info.getOffset() <= end && end <= info.getOffset() + info.getLength()) {\n+\t\t\t\t\t\/\/ optimize the case of the same line\n+\t\t\t\t\tend = info.getOffset() + info.getLength();\n+\t\t\t\t} else\n+\t\t\t\t\tend = endOfLineOf(end);\n+\n+\t\t\t\tend = Math.min(partition.getOffset() + partition.getLength(), end);\n+\t\t\t\treturn new Region(start, end - start);\n+\n+\t\t\t} catch (BadLocationException x) {\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn partition;\n+\t}\n+\n+\t@Override\n+\tpublic void createPresentation(TextPresentation presentation, ITypedRegion region) {\n+\t\taddRange(presentation, region.getOffset(), region.getLength(), fDefaultTextAttribute);\n+\t}\n+\n+\t\/**\n+\t * Adds style information to the given text presentation.\n+\t *\n+\t * @param presentation\n+\t *            the text presentation to be extended\n+\t * @param offset\n+\t *            the offset of the range to be styled\n+\t * @param length\n+\t *            the length of the range to be styled\n+\t * @param attr\n+\t *            the attribute describing the style of the range to be styled\n+\t *\/\n+\tprotected void addRange(TextPresentation presentation, int offset, int length, TextAttribute attr) {\n+\t\tif (attr != null)\n+\t\t\tpresentation.addStyleRange(\n+\t\t\t\t\tnew StyleRange(offset, length, attr.getForeground(), attr.getBackground(), attr.getStyle()));\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/NonRuleBasedDamagerRepairer.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.jface.text.rules.ICharacterScanner;\n+import org.eclipse.jface.text.rules.IToken;\n+import org.eclipse.jface.text.rules.MultiLineRule;\n+\n+public class TagRule extends MultiLineRule {\n+\n+\tpublic TagRule(IToken token) {\n+\t\tsuper(\"<\", \">\", token);\n+\t}\n+\n+\t@Override\n+\tprotected boolean sequenceDetected(ICharacterScanner scanner, char[] sequence, boolean eofAllowed) {\n+\t\tint c = scanner.read();\n+\t\tif (sequence[0] == '<') {\n+\t\t\tif (c == '?') {\n+\t\t\t\t\/\/ processing instruction - abort\n+\t\t\t\tscanner.unread();\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tif (c == '!') {\n+\t\t\t\tscanner.unread();\n+\t\t\t\t\/\/ comment - abort\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t} else if (sequence[0] == '>') {\n+\t\t\tscanner.unread();\n+\t\t}\n+\t\treturn super.sequenceDetected(scanner, sequence, eofAllowed);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/TagRule.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.swt.graphics.RGB;\n+\n+public interface XmlColorConstants {\n+\tRGB XML_COMMENT = new RGB(128, 0, 0);\n+\tRGB PROC_INSTR = new RGB(128, 128, 128);\n+\tRGB STRING = new RGB(0, 128, 0);\n+\tRGB DEFAULT = new RGB(0, 0, 0);\n+\tRGB TAG = new RGB(0, 0, 128);\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlColorConstants.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.jface.text.IDocument;\n+import org.eclipse.jface.text.ITextDoubleClickStrategy;\n+import org.eclipse.jface.text.TextAttribute;\n+import org.eclipse.jface.text.presentation.IPresentationReconciler;\n+import org.eclipse.jface.text.presentation.PresentationReconciler;\n+import org.eclipse.jface.text.rules.DefaultDamagerRepairer;\n+import org.eclipse.jface.text.rules.Token;\n+import org.eclipse.jface.text.source.ISourceViewer;\n+import org.eclipse.jface.text.source.SourceViewerConfiguration;\n+\n+public class XmlConfiguration extends SourceViewerConfiguration {\n+\tprivate XmlDoubleClickStrategy doubleClickStrategy;\n+\tprivate XmlTagScanner tagScanner;\n+\tprivate XmlScanner scanner;\n+\tprivate ColorManager colorManager;\n+\n+\tpublic XmlConfiguration(ColorManager colorManager) {\n+\t\tthis.colorManager = colorManager;\n+\t}\n+\n+\t@Override\n+\tpublic String[] getConfiguredContentTypes(ISourceViewer sourceViewer) {\n+\t\treturn new String[] {IDocument.DEFAULT_CONTENT_TYPE, XmlPartitionScanner.XML_COMMENT,\n+\t\t\t\tXmlPartitionScanner.XML_TAG};\n+\t}\n+\n+\t@Override\n+\tpublic ITextDoubleClickStrategy getDoubleClickStrategy(ISourceViewer sourceViewer, String contentType) {\n+\t\tif (doubleClickStrategy == null)\n+\t\t\tdoubleClickStrategy = new XmlDoubleClickStrategy();\n+\t\treturn doubleClickStrategy;\n+\t}\n+\n+\tprotected XmlScanner getXMLScanner() {\n+\t\tif (scanner == null) {\n+\t\t\tscanner = new XmlScanner(colorManager);\n+\t\t\tscanner.setDefaultReturnToken(\n+\t\t\t\t\tnew Token(new TextAttribute(colorManager.getColor(XmlColorConstants.DEFAULT))));\n+\t\t}\n+\t\treturn scanner;\n+\t}\n+\n+\tprotected XmlTagScanner getXMLTagScanner() {\n+\t\tif (tagScanner == null) {\n+\t\t\ttagScanner = new XmlTagScanner(colorManager);\n+\t\t\ttagScanner\n+\t\t\t\t\t.setDefaultReturnToken(new Token(new TextAttribute(colorManager.getColor(XmlColorConstants.TAG))));\n+\t\t}\n+\t\treturn tagScanner;\n+\t}\n+\n+\t@Override\n+\tpublic IPresentationReconciler getPresentationReconciler(ISourceViewer sourceViewer) {\n+\t\tPresentationReconciler reconciler = new PresentationReconciler();\n+\n+\t\tDefaultDamagerRepairer dr = new DefaultDamagerRepairer(getXMLTagScanner());\n+\t\treconciler.setDamager(dr, XmlPartitionScanner.XML_TAG);\n+\t\treconciler.setRepairer(dr, XmlPartitionScanner.XML_TAG);\n+\n+\t\tdr = new DefaultDamagerRepairer(getXMLScanner());\n+\t\treconciler.setDamager(dr, IDocument.DEFAULT_CONTENT_TYPE);\n+\t\treconciler.setRepairer(dr, IDocument.DEFAULT_CONTENT_TYPE);\n+\n+\t\tNonRuleBasedDamagerRepairer ndr = new NonRuleBasedDamagerRepairer(\n+\t\t\t\tnew TextAttribute(colorManager.getColor(XmlColorConstants.XML_COMMENT)));\n+\t\treconciler.setDamager(ndr, XmlPartitionScanner.XML_COMMENT);\n+\t\treconciler.setRepairer(ndr, XmlPartitionScanner.XML_COMMENT);\n+\n+\t\treturn reconciler;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlConfiguration.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.IStatus;\n+import org.eclipse.core.runtime.Status;\n+import org.eclipse.jface.text.IDocument;\n+import org.eclipse.jface.text.IDocumentPartitioner;\n+import org.eclipse.jface.text.rules.FastPartitioner;\n+import org.eclipse.ui.IStorageEditorInput;\n+import org.eclipse.ui.editors.text.EditorsUI;\n+import org.eclipse.ui.editors.text.StorageDocumentProvider;\n+\n+public class XmlDocumentProvider extends StorageDocumentProvider {\n+\n+\t@Override\n+\tprotected IDocument createDocument(Object element) throws CoreException {\n+\t\tIDocument document = super.createDocument(element);\n+\t\tif (document != null) {\n+\t\t\tIDocumentPartitioner partitioner = new FastPartitioner(new XmlPartitionScanner(),\n+\t\t\t\t\tnew String[] {XmlPartitionScanner.XML_TAG, XmlPartitionScanner.XML_COMMENT});\n+\t\t\tpartitioner.connect(document);\n+\t\t\tdocument.setDocumentPartitioner(partitioner);\n+\t\t}\n+\t\treturn document;\n+\t}\n+\n+\t@Override\n+\tprotected void doSaveDocument(IProgressMonitor monitor, Object element, IDocument document, boolean overwrite)\n+\t\t\tthrows CoreException {\n+\t\t\/\/ TODO: Prototype implementation that most likely requires revise\n+\t\tIStorageEditorInput ei = (IStorageEditorInput) element;\n+\t\tFile out = ei.getStorage().getFullPath().toFile();\n+\n+\t\tif (!out.exists()) {\n+\t\t\ttry {\n+\t\t\t\tout.createNewFile();\n+\t\t\t} catch (IOException | SecurityException e) {\n+\t\t\t\tIStatus s = new Status(IStatus.ERROR, EditorsUI.PLUGIN_ID, IStatus.OK, e.getMessage(), e);\n+\t\t\t\tthrow new CoreException(s);\n+\t\t\t}\n+\t\t}\n+\n+\t\ttry (FileOutputStream fos = new FileOutputStream(out)) {\n+\t\t\tfos.write(document.get().getBytes()); \/\/ TODO: encoding?\n+\t\t} catch (IOException e) {\n+\t\t\tIStatus s = new Status(IStatus.ERROR, EditorsUI.PLUGIN_ID, IStatus.OK, e.getMessage(), e);\n+\t\t\tthrow new CoreException(s);\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlDocumentProvider.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.jface.text.BadLocationException;\n+import org.eclipse.jface.text.IDocument;\n+import org.eclipse.jface.text.ITextDoubleClickStrategy;\n+import org.eclipse.jface.text.ITextViewer;\n+\n+public class XmlDoubleClickStrategy implements ITextDoubleClickStrategy {\n+\tprotected ITextViewer fText;\n+\n+\t@Override\n+\tpublic void doubleClicked(ITextViewer part) {\n+\t\tint pos = part.getSelectedRange().x;\n+\n+\t\tif (pos < 0)\n+\t\t\treturn;\n+\n+\t\tfText = part;\n+\n+\t\tif (!selectComment(pos)) {\n+\t\t\tselectWord(pos);\n+\t\t}\n+\t}\n+\n+\tprotected boolean selectComment(int caretPos) {\n+\t\tIDocument doc = fText.getDocument();\n+\t\tint startPos, endPos;\n+\n+\t\ttry {\n+\t\t\tint pos = caretPos;\n+\t\t\tchar c = ' ';\n+\n+\t\t\twhile (pos >= 0) {\n+\t\t\t\tc = doc.getChar(pos);\n+\t\t\t\tif (c == '\\\\') {\n+\t\t\t\t\tpos -= 2;\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (c == Character.LINE_SEPARATOR || c == '\\\"')\n+\t\t\t\t\tbreak;\n+\t\t\t\t--pos;\n+\t\t\t}\n+\n+\t\t\tif (c != '\\\"')\n+\t\t\t\treturn false;\n+\n+\t\t\tstartPos = pos;\n+\n+\t\t\tpos = caretPos;\n+\t\t\tint length = doc.getLength();\n+\t\t\tc = ' ';\n+\n+\t\t\twhile (pos < length) {\n+\t\t\t\tc = doc.getChar(pos);\n+\t\t\t\tif (c == Character.LINE_SEPARATOR || c == '\\\"')\n+\t\t\t\t\tbreak;\n+\t\t\t\t++pos;\n+\t\t\t}\n+\t\t\tif (c != '\\\"')\n+\t\t\t\treturn false;\n+\n+\t\t\tendPos = pos;\n+\n+\t\t\tint offset = startPos + 1;\n+\t\t\tint len = endPos - offset;\n+\t\t\tfText.setSelectedRange(offset, len);\n+\t\t\treturn true;\n+\t\t} catch (BadLocationException x) {\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+\tprotected boolean selectWord(int caretPos) {\n+\n+\t\tIDocument doc = fText.getDocument();\n+\t\tint startPos, endPos;\n+\n+\t\ttry {\n+\n+\t\t\tint pos = caretPos;\n+\t\t\tchar c;\n+\n+\t\t\twhile (pos >= 0) {\n+\t\t\t\tc = doc.getChar(pos);\n+\t\t\t\tif (!Character.isJavaIdentifierPart(c))\n+\t\t\t\t\tbreak;\n+\t\t\t\t--pos;\n+\t\t\t}\n+\n+\t\t\tstartPos = pos;\n+\n+\t\t\tpos = caretPos;\n+\t\t\tint length = doc.getLength();\n+\n+\t\t\twhile (pos < length) {\n+\t\t\t\tc = doc.getChar(pos);\n+\t\t\t\tif (!Character.isJavaIdentifierPart(c))\n+\t\t\t\t\tbreak;\n+\t\t\t\t++pos;\n+\t\t\t}\n+\n+\t\t\tendPos = pos;\n+\t\t\tselectRange(startPos, endPos);\n+\t\t\treturn true;\n+\n+\t\t} catch (BadLocationException x) {\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+\tprivate void selectRange(int startPos, int stopPos) {\n+\t\tint offset = startPos + 1;\n+\t\tint length = stopPos - offset;\n+\t\tfText.setSelectedRange(offset, length);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlDoubleClickStrategy.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.core.resources.IStorage;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IPath;\n+import org.eclipse.debug.core.sourcelookup.containers.LocalFileStorage;\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.ui.IEditorInput;\n+import org.eclipse.ui.IFileEditorInput;\n+import org.eclipse.ui.IPathEditorInput;\n+import org.eclipse.ui.IPersistableElement;\n+import org.eclipse.ui.IStorageEditorInput;\n+import org.eclipse.ui.editors.text.ILocationProvider;\n+import org.eclipse.ui.editors.text.TextEditor;\n+\n+public class XmlEditor extends TextEditor {\n+\tprivate ColorManager colorManager;\n+\n+\tpublic XmlEditor() {\n+\t\tsuper();\n+\t\tcolorManager = new ColorManager();\n+\t\tsetSourceViewerConfiguration(new XmlConfiguration(colorManager));\n+\t\tsetDocumentProvider(new XmlDocumentProvider());\n+\t}\n+\n+\t@Override\n+\tprotected void doSetInput(IEditorInput input) throws CoreException {\n+\t\tinput = convertInput(input);\n+\n+\t\tsuper.doSetInput(input);\n+\t\tsetDocumentProvider(input);\n+\t}\n+\n+\t@Override\n+\tprotected void createActions() {\n+\/\/\t\tsuper.createActions();\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\tcolorManager.dispose();\n+\t\tsuper.dispose();\n+\t}\n+\n+\tpublic static IEditorInput convertInput(IEditorInput editorInput) {\n+\t\tif (editorInput instanceof IFileEditorInput || editorInput instanceof IStorageEditorInput) {\n+\t\t\treturn editorInput;\n+\t\t}\n+\n+\t\tif (editorInput instanceof IPathEditorInput) {\n+\t\t\tIPath p = ((IPathEditorInput) editorInput).getPath();\n+\n+\t\t\tIStorage s = new LocalFileStorage(p.toFile()) {\n+\t\t\t\tpublic boolean isReadOnly() {\n+\t\t\t\t\treturn false;\n+\t\t\t\t};\n+\t\t\t};\n+\n+\t\t\treturn new IStorageEditorInput() {\n+\t\t\t\tpublic <T> T getAdapter(Class<T> adapter) {\n+\t\t\t\t\tif (adapter.equals(ILocationProvider.class)) {\n+\t\t\t\t\t\treturn (T) (ILocationProvider) element -> p;\n+\t\t\t\t\t}\n+\t\t\t\t\treturn editorInput.getAdapter(adapter);\n+\t\t\t\t}\n+\n+\t\t\t\tpublic boolean exists() {\n+\t\t\t\t\treturn editorInput.exists();\n+\t\t\t\t}\n+\n+\t\t\t\tpublic ImageDescriptor getImageDescriptor() {\n+\t\t\t\t\treturn editorInput.getImageDescriptor();\n+\t\t\t\t}\n+\n+\t\t\t\tpublic String getName() {\n+\t\t\t\t\treturn editorInput.getName();\n+\t\t\t\t}\n+\n+\t\t\t\tpublic IPersistableElement getPersistable() {\n+\t\t\t\t\treturn editorInput.getPersistable();\n+\t\t\t\t}\n+\n+\t\t\t\tpublic String getToolTipText() {\n+\t\t\t\t\treturn editorInput.getToolTipText();\n+\t\t\t\t}\n+\n+\t\t\t\tpublic IStorage getStorage() {\n+\t\t\t\t\treturn s;\n+\t\t\t\t}\n+\t\t\t};\n+\t\t}\n+\n+\t\tthrow new UnsupportedOperationException();\n+\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlEditor.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.jface.text.rules.IPredicateRule;\n+import org.eclipse.jface.text.rules.IToken;\n+import org.eclipse.jface.text.rules.MultiLineRule;\n+import org.eclipse.jface.text.rules.RuleBasedPartitionScanner;\n+import org.eclipse.jface.text.rules.Token;\n+\n+public class XmlPartitionScanner extends RuleBasedPartitionScanner {\n+\tpublic final static String XML_COMMENT = \"__xml_comment\";\n+\tpublic final static String XML_TAG = \"__xml_tag\";\n+\n+\tpublic XmlPartitionScanner() {\n+\n+\t\tIToken xmlComment = new Token(XML_COMMENT);\n+\t\tIToken tag = new Token(XML_TAG);\n+\n+\t\tIPredicateRule[] rules = new IPredicateRule[2];\n+\n+\t\trules[0] = new MultiLineRule(\"<!--\", \"-->\", xmlComment);\n+\t\trules[1] = new TagRule(tag);\n+\n+\t\tsetPredicateRules(rules);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlPartitionScanner.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.jface.text.TextAttribute;\n+import org.eclipse.jface.text.rules.IRule;\n+import org.eclipse.jface.text.rules.IToken;\n+import org.eclipse.jface.text.rules.RuleBasedScanner;\n+import org.eclipse.jface.text.rules.SingleLineRule;\n+import org.eclipse.jface.text.rules.Token;\n+import org.eclipse.jface.text.rules.WhitespaceRule;\n+\n+public class XmlScanner extends RuleBasedScanner {\n+\n+\tpublic XmlScanner(ColorManager manager) {\n+\t\tIToken procInstr = new Token(new TextAttribute(manager.getColor(XmlColorConstants.PROC_INSTR)));\n+\n+\t\tIRule[] rules = new IRule[2];\n+\t\t\/\/Add rule for processing instructions\n+\t\trules[0] = new SingleLineRule(\"<?\", \"?>\", procInstr);\n+\t\t\/\/ Add generic whitespace rule.\n+\t\trules[1] = new WhitespaceRule(new XmlWhitespaceDetector());\n+\n+\t\tsetRules(rules);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlScanner.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.jface.text.TextAttribute;\n+import org.eclipse.jface.text.rules.IRule;\n+import org.eclipse.jface.text.rules.IToken;\n+import org.eclipse.jface.text.rules.RuleBasedScanner;\n+import org.eclipse.jface.text.rules.SingleLineRule;\n+import org.eclipse.jface.text.rules.Token;\n+import org.eclipse.jface.text.rules.WhitespaceRule;\n+\n+public class XmlTagScanner extends RuleBasedScanner {\n+\n+\tpublic XmlTagScanner(ColorManager manager) {\n+\t\tIToken string = new Token(new TextAttribute(manager.getColor(XmlColorConstants.STRING)));\n+\n+\t\tIRule[] rules = new IRule[3];\n+\n+\t\t\/\/ Add rule for double quotes\n+\t\trules[0] = new SingleLineRule(\"\\\"\", \"\\\"\", string, '\\\\');\n+\t\t\/\/ Add a rule for single quotes\n+\t\trules[1] = new SingleLineRule(\"'\", \"'\", string, '\\\\');\n+\t\t\/\/ Add generic whitespace rule.\n+\t\trules[2] = new WhitespaceRule(new XmlWhitespaceDetector());\n+\n+\t\tsetRules(rules);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlTagScanner.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.raweditor.internal;\n+\n+import org.eclipse.jface.text.rules.IWhitespaceDetector;\n+\n+public class XmlWhitespaceDetector implements IWhitespaceDetector {\n+\n+\t@Override\n+\tpublic boolean isWhitespace(char c) {\n+\t\treturn (c == ' ' || c == '\\t' || c == '\\n' || c == '\\r');\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlWhitespaceDetector.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.utils;\n+\n+import java.io.IOException;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Result;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+\n+import org.w3c.dom.ls.LSResourceResolver;\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+public class ProbeValidator extends Validator {\n+\tfinal private Validator validator;\n+\n+\tprivate ValidationResult validationResult = new ValidationResult();\n+\n+\tprivate static final String PROBE_SCHEMA_XSD = \"jfrprobes_schema.xsd\"; \/\/$NON-NLS-1$\n+\tprivate static final Schema PROBE_SCHEMA;\n+\n+\tstatic {\n+\t\ttry {\n+\t\t\tSchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+\t\t\tPROBE_SCHEMA = factory\n+\t\t\t\t\t.newSchema(new StreamSource(ProbeValidator.class.getResourceAsStream(PROBE_SCHEMA_XSD)));\n+\t\t} catch (SAXException e) {\n+\t\t\tthrow new ExceptionInInitializerError(e);\n+\t\t}\n+\t}\n+\n+\tpublic ProbeValidator() {\n+\t\tvalidator = PROBE_SCHEMA.newValidator();\n+\t\tvalidator.setErrorHandler(new ProbeValidatorErrorHandler());\n+\t}\n+\n+\tpublic ValidationResult getValidationResult() {\n+\t\treturn this.validationResult;\n+\t}\n+\n+\t@Override\n+\tpublic void reset() {\n+\t\tvalidationResult = new ValidationResult();\n+\t\tvalidator.reset();\n+\t}\n+\n+\t@Override\n+\tpublic void validate(Source source, Result result) throws SAXException, IOException {\n+\t\tvalidator.validate(source, result);\n+\t}\n+\n+\t@Override\n+\tpublic void setErrorHandler(ErrorHandler errorHandler) {\n+\t\tthrow new UnsupportedOperationException(\"setErrorHandler is unsupported\");\n+\t}\n+\n+\t@Override\n+\tpublic ErrorHandler getErrorHandler() {\n+\t\treturn validator.getErrorHandler();\n+\t}\n+\n+\t@Override\n+\tpublic void setResourceResolver(LSResourceResolver resourceResolver) {\n+\t\tvalidator.setResourceResolver(resourceResolver);\n+\t}\n+\n+\t@Override\n+\tpublic LSResourceResolver getResourceResolver() {\n+\t\treturn validator.getResourceResolver();\n+\t}\n+\n+\tprivate class ProbeValidatorErrorHandler implements ErrorHandler {\n+\n+\t\t@Override\n+\t\tpublic void warning(SAXParseException exception) throws SAXException {\n+\t\t\tvalidationResult.addWarning(exception);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void error(SAXParseException exception) throws SAXException {\n+\t\t\tvalidationResult.addError(exception);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void fatalError(SAXParseException exception) throws SAXException {\n+\t\t\tvalidationResult.setFatalError(exception);\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/utils\/ProbeValidator.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.utils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import org.xml.sax.SAXParseException;\n+\n+public class ValidationResult {\n+\tprivate List<SAXParseException> warnings = new ArrayList<>();\n+\tprivate List<SAXParseException> errors = new ArrayList<>();\n+\tprivate SAXParseException fatalError;\n+\n+\t\/* package-private *\/ ValidationResult(ArrayList<SAXParseException> warnings, ArrayList<SAXParseException> errors,\n+\t\t\tSAXParseException fatalError) {\n+\t\tthis.warnings = Objects.requireNonNull(warnings);\n+\t\tthis.errors = Objects.requireNonNull(errors);\n+\t\tthis.fatalError = fatalError;\n+\t}\n+\n+\t\/* package-private *\/ ValidationResult() {\n+\t}\n+\n+\t\/* package-private *\/ void addError(SAXParseException error) {\n+\t\terrors.add(error);\n+\t}\n+\n+\t\/* package-private *\/ void addWarning(SAXParseException warning) {\n+\t\twarnings.add(warning);\n+\t}\n+\n+\t\/* package-private *\/ void setFatalError(SAXParseException fatalError) {\n+\t\tthis.fatalError = fatalError;\n+\t}\n+\n+\tpublic boolean isValid() {\n+\t\treturn errors.isEmpty() && fatalError == null;\n+\t}\n+\n+\tpublic List<SAXParseException> getWarnings() {\n+\t\treturn warnings;\n+\t}\n+\n+\tpublic List<SAXParseException> getErrors() {\n+\t\treturn errors;\n+\t}\n+\n+\tpublic SAXParseException getFatalError() {\n+\t\treturn fatalError;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/utils\/ValidationResult.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,493 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.wizards;\n+\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.jface.viewers.ColumnLabelProvider;\n+import org.eclipse.jface.viewers.IContentProvider;\n+import org.eclipse.jface.viewers.IStructuredSelection;\n+import org.eclipse.jface.viewers.TableViewer;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.ModifyListener;\n+import org.eclipse.swt.layout.FillLayout;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.FileDialog;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Listener;\n+import org.eclipse.swt.widgets.Spinner;\n+import org.eclipse.swt.widgets.Text;\n+import org.eclipse.swt.widgets.Widget;\n+import org.eclipse.ui.IWorkbenchWindow;\n+import org.eclipse.ui.PlatformUI;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.ui.column.ColumnBuilder;\n+import org.openjdk.jmc.ui.column.ColumnManager;\n+import org.openjdk.jmc.ui.column.IColumn;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+import org.openjdk.jmc.ui.misc.OptimisticComparator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public abstract class BaseWizardPage extends WizardPage {\n+\n+\tprivate static final String FILE_OPEN_FILTER_PATH = \"file.open.filter.path\"; \/\/ $NON-NLS-1$\n+\n+\tprivate Map<Widget, Exception> exceptions = new HashMap<>();\n+\n+\tprotected BaseWizardPage(String pageName) {\n+\t\tsuper(pageName);\n+\t}\n+\n+\tprotected BaseWizardPage(String pageName, String title, ImageDescriptor titleImage) {\n+\t\tsuper(pageName, title, titleImage);\n+\n+\t\tsetPageComplete(true);\n+\t}\n+\n+\t@Override\n+\tpublic boolean canFlipToNextPage() {\n+\t\treturn super.canFlipToNextPage() && exceptions.isEmpty();\n+\t}\n+\n+\tprotected static Composite createComposite(Composite parent) {\n+\t\treturn new Composite(parent, SWT.NONE);\n+\t}\n+\n+\tprotected static Label createLabel(Composite parent, String text) {\n+\t\tLabel label = new Label(parent, SWT.NONE);\n+\t\tlabel.setText(text);\n+\t\treturn label;\n+\t}\n+\n+\tprotected static Text createText(Composite parent, String hint) {\n+\t\tText text = new Text(parent, SWT.BORDER);\n+\t\ttext.setMessage(hint);\n+\t\ttext.setEnabled(true);\n+\t\treturn text;\n+\t}\n+\n+\tprotected static Text createMultiText(Composite parent, String hint) {\n+\t\tText text = new Text(parent, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);\n+\t\t\/\/ FIXME: Multi line Text field (SWT.MULTI) does not support Text.setMessage\n+\t\t\/\/ https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=328832\n+\t\ttext.setMessage(hint);\n+\t\ttext.setEnabled(true);\n+\t\treturn text;\n+\t}\n+\n+\tprotected static Label createSeparator(Composite parent) {\n+\t\treturn new Label(parent, SWT.SEPARATOR | SWT.HORIZONTAL);\n+\t}\n+\n+\tprotected static Combo createCombo(Composite parent, String[] items) {\n+\t\tCombo combo = new Combo(parent, SWT.DROP_DOWN | SWT.READ_ONLY);\n+\t\tcombo.setItems(items);\n+\t\treturn combo;\n+\t}\n+\n+\tprotected static Button createButton(Composite parent, String text) {\n+\t\tButton button = new Button(parent, SWT.PUSH);\n+\t\tbutton.setText(text);\n+\t\treturn button;\n+\t}\n+\n+\tprotected static Button createCheckbox(Composite parent, String text) {\n+\t\tButton checkbox = new Button(parent, SWT.CHECK);\n+\t\tcheckbox.setText(text);\n+\t\treturn checkbox;\n+\t}\n+\n+\tprotected static Spinner createSpinner(Composite parent) {\n+\t\treturn new Spinner(parent, SWT.NONE);\n+\t}\n+\n+\tprotected static void setText(Text receiver, String text) {\n+\t\ttext = text == null ? \"\" : text;\n+\t\treceiver.setText(text);\n+\t}\n+\n+\tprotected static void setText(Combo receiver, String text) {\n+\t\ttext = text == null ? \"\" : text;\n+\t\treceiver.setText(text);\n+\t}\n+\n+\tprotected static Text createTextInput(Composite parent, int cols, String label, String hint) {\n+\t\tLabel l = createLabel(parent, label);\n+\t\tl.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false, 2, 0));\n+\n+\t\tText t = createText(parent, hint);\n+\t\tt.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, cols - 2, 0));\n+\n+\t\treturn t;\n+\t}\n+\n+\tprotected static Text createMultiTextInput(Composite parent, int cols, String label, String hint) {\n+\t\tLabel l = createLabel(parent, label);\n+\t\tl.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false, cols, 0));\n+\n+\t\tText t = createMultiText(parent, hint);\n+\t\tGridData gd = new GridData(SWT.FILL, SWT.CENTER, true, true, cols, 0);\n+\t\tgd.heightHint = 100;\n+\t\tt.setLayoutData(gd);\n+\n+\t\treturn t;\n+\t}\n+\n+\tprotected static Text[] createMultiInputTextInput(Composite parent, int cols, String label, String[] hints) {\n+\t\tLabel l = createLabel(parent, label);\n+\t\tl.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false, 2, 0));\n+\n+\t\tComposite container = createComposite(parent);\n+\t\tcontainer.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, cols - 2, 0));\n+\t\tcontainer.setLayout(new FillLayout());\n+\n+\t\tText[] t = new Text[hints.length];\n+\t\tfor (int i = 0; i < hints.length; i++) {\n+\t\t\tt[i] = createText(container, hints[i]);\n+\t\t}\n+\n+\t\treturn t;\n+\t}\n+\n+\tprotected static Combo createComboInput(Composite parent, int cols, String label, String[] items) {\n+\t\tLabel l = createLabel(parent, label);\n+\t\tl.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false, 2, 0));\n+\n+\t\tCombo c = createCombo(parent, items);\n+\t\tc.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, cols - 2, 0));\n+\n+\t\treturn c;\n+\t}\n+\n+\tprotected static Button createCheckboxInput(Composite parent, int cols, String text) {\n+\t\tButton b = createCheckbox(parent, text);\n+\t\tb.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false, cols, 0));\n+\n+\t\treturn b;\n+\t}\n+\n+\tprotected static Spinner createSpinnerInput(Composite parent, int cols, String label) {\n+\t\tLabel l = createLabel(parent, label);\n+\t\tl.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false, 2, 0));\n+\n+\t\tSpinner s = createSpinner(parent);\n+\t\ts.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, cols - 2, 0));\n+\n+\t\treturn s;\n+\t}\n+\n+\tprotected ModifyListener handleExceptionIfAny(ModifyListener listener) {\n+\t\treturn e -> handleExceptionIfAny(e.widget, () -> listener.modifyText(e));\n+\t}\n+\n+\tprotected Listener handleExceptionIfAny(Listener listener) {\n+\t\treturn e -> handleExceptionIfAny(e.widget, () -> listener.handleEvent(e));\n+\t}\n+\n+\tprotected void handleExceptionIfAny(Widget widget, Runnable runnable) {\n+\t\ttry {\n+\t\t\trunnable.run();\n+\t\t\texceptions.remove(widget);\n+\n+\t\t\tif (exceptions.isEmpty()) {\n+\t\t\t\tsetErrorMessage(null);\n+\t\t\t}\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\texceptions.put(widget, e);\n+\t\t\tsetErrorMessage(e.getLocalizedMessage());\n+\t\t} catch (Exception e) {\n+\t\t\tIWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();\n+\t\t\tDialogToolkit.showException(window.getShell(),\n+\t\t\t\t\tMessages.BaseWizardPage_MESSAGE_UNEXPECTED_ERROR_HAS_OCCURRED, e);\n+\t\t}\n+\n+\t\tsetPageComplete(exceptions.isEmpty());\n+\t\tgetWizard().getContainer().updateButtons();\n+\t}\n+\n+\tprotected String[] openFileDialog(String title, String[] extensions, int style) {\n+\t\tString filterPath = FlightRecorderUI.getDefault().getDialogSettings().get(FILE_OPEN_FILTER_PATH);\n+\t\tif (filterPath != null && Files.notExists(Paths.get(filterPath))) {\n+\t\t\tfilterPath = System.getProperty(\"user.home\", \".\/\"); \/\/ $NON-NLS-1$ $NON-NLS-2$\n+\t\t}\n+\n+\t\tIWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();\n+\t\tFileDialog dialog = new FileDialog(window.getShell(), style);\n+\t\tdialog.setFilterPath(filterPath);\n+\t\tdialog.setText(title);\n+\t\tdialog.setFilterExtensions(extensions);\n+\n+\t\tif (dialog.open() == null) {\n+\t\t\treturn new String[] {};\n+\t\t}\n+\n+\t\treturn Arrays.stream(dialog.getFileNames()).map(name -> dialog.getFilterPath() + File.separator + name)\n+\t\t\t\t.toArray(String[]::new);\n+\t}\n+\n+\tprotected static abstract class TableInspector extends Composite {\n+\t\tpublic static final int MULTI = 1;\n+\t\tpublic static final int SHOW_HEADER = 1 << 1;\n+\t\tpublic static final int ADD_BUTTON = 1 << 2;\n+\t\tpublic static final int EDIT_BUTTON = 1 << 3;\n+\t\tpublic static final int DUPLICATE_BUTTON = 1 << 4;\n+\t\tpublic static final int REMOVE_BUTTON = 1 << 5;\n+\t\tpublic static final int IMPORT_FILES_BUTTON = 1 << 6;\n+\t\tpublic static final int EXPORT_FILE_BUTTON = 1 << 7;\n+\n+\t\tprivate static final String LABEL_ADD_BUTTON = \"Add...\";\n+\t\tprivate static final String LABEL_EDIT_BUTTON = \"Edit\";\n+\t\tprivate static final String LABEL_DUPLICATE_BUTTON = \"Duplicate\";\n+\t\tprivate static final String LABEL_REMOVE_BUTTON = \"Remove\";\n+\t\tprivate static final String LABEL_IMPORT_FILES_BUTTON = \"Import Files...\";\n+\t\tprivate static final String LABEL_EXPORT_FILE_BUTTON = \"Export File...\";\n+\n+\t\tprivate final int options;\n+\t\tprivate final List<IColumn> columns = new ArrayList<>();\n+\t\tprivate final List<Button> buttons = new ArrayList<>();\n+\t\tprivate final TableViewer tableViewer;\n+\t\tprivate final Composite buttonContainer;\n+\n+\t\tprivate Button addButton;\n+\t\tprivate Button editButton;\n+\t\tprivate Button duplicateButton;\n+\t\tprivate Button removeButton;\n+\t\tprivate Button importFilesButton;\n+\t\tprivate Button exportFileButton;\n+\n+\t\tprotected TableInspector(Composite parent, int options) {\n+\t\t\tsuper(parent, SWT.NONE);\n+\t\t\tsetLayout(new GridLayout(2, false));\n+\n+\t\t\tthis.options = options;\n+\n+\t\t\tint style = SWT.V_SCROLL | SWT.BORDER | SWT.FULL_SELECTION;\n+\t\t\tif ((options & MULTI) != 0) {\n+\t\t\t\tstyle |= SWT.MULTI;\n+\t\t\t}\n+\t\t\ttableViewer = new TableViewer(this, style);\n+\t\t\ttableViewer.getControl().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\t\t\taddColumns();\n+\t\t\tColumnManager.build(tableViewer, columns, null);\n+\t\t\ttableViewer.getTable().setHeaderVisible((options & SHOW_HEADER) != 0);\n+\n+\t\t\tbuttonContainer = new Composite(this, SWT.NONE);\n+\t\t\tbuttonContainer.setLayoutData(new GridData(SWT.FILL, SWT.BEGINNING, false, true));\n+\t\t\tGridLayout layout = new GridLayout(1, true);\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tbuttonContainer.setLayout(layout);\n+\t\t\taddButtons();\n+\n+\t\t\tif (buttons.isEmpty()) {\n+\t\t\t\tbuttonContainer.dispose();\n+\t\t\t\tsetLayout(new GridLayout(1, false));\n+\t\t\t}\n+\n+\t\t\tbindListeners();\n+\t\t}\n+\n+\t\tprotected final void addColumn(String name, String id, ColumnLabelProvider labelProvider) {\n+\t\t\tcolumns.add(new ColumnBuilder(name, id, labelProvider).comparator(new OptimisticComparator(labelProvider))\n+\t\t\t\t\t.build());\n+\t\t}\n+\n+\t\tprotected final void addColumn(String id, ColumnLabelProvider labelProvider) {\n+\t\t\tcolumns.add(new ColumnBuilder(\"\", id, labelProvider).comparator(new OptimisticComparator(labelProvider))\n+\t\t\t\t\t.build());\n+\t\t}\n+\n+\t\tprotected abstract void addColumns();\n+\n+\t\tprotected final Button addButton(String text) {\n+\t\t\tButton b = createButton(buttonContainer, text);\n+\t\t\tb.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\t\tbuttons.add(b);\n+\t\t\treturn b;\n+\t\t}\n+\n+\t\tprotected void addButtons() {\n+\t\t\tif ((options & ADD_BUTTON) != 0) {\n+\t\t\t\taddButton = addButton(LABEL_ADD_BUTTON);\n+\t\t\t}\n+\n+\t\t\tif ((options & EDIT_BUTTON) != 0) {\n+\t\t\t\teditButton = addButton(LABEL_EDIT_BUTTON);\n+\t\t\t}\n+\n+\t\t\tif ((options & DUPLICATE_BUTTON) != 0) {\n+\t\t\t\tduplicateButton = addButton(LABEL_DUPLICATE_BUTTON);\n+\t\t\t}\n+\n+\t\t\tif ((options & REMOVE_BUTTON) != 0) {\n+\t\t\t\tremoveButton = addButton(LABEL_REMOVE_BUTTON);\n+\t\t\t}\n+\n+\t\t\tif ((options & IMPORT_FILES_BUTTON) != 0) {\n+\t\t\t\timportFilesButton = addButton(LABEL_IMPORT_FILES_BUTTON);\n+\t\t\t}\n+\n+\t\t\tif ((options & EXPORT_FILE_BUTTON) != 0) {\n+\t\t\t\texportFileButton = addButton(LABEL_EXPORT_FILE_BUTTON);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic Button getAddButton() {\n+\t\t\treturn addButton;\n+\t\t}\n+\n+\t\tpublic Button getEditButton() {\n+\t\t\treturn editButton;\n+\t\t}\n+\n+\t\tpublic Button getDuplicateButton() {\n+\t\t\treturn duplicateButton;\n+\t\t}\n+\n+\t\tpublic Button getRemoveButton() {\n+\t\t\treturn removeButton;\n+\t\t}\n+\n+\t\tpublic Button getImportFilesButton() {\n+\t\t\treturn importFilesButton;\n+\t\t}\n+\n+\t\tpublic Button getExportFileButton() {\n+\t\t\treturn exportFileButton;\n+\t\t}\n+\n+\t\tpublic void setContentProvider(IContentProvider contentProvider) {\n+\t\t\ttableViewer.setContentProvider(contentProvider);\n+\t\t}\n+\n+\t\tpublic void setInput(Object input) {\n+\t\t\ttableViewer.setInput(input);\n+\t\t}\n+\n+\t\tpublic TableViewer getViewer() {\n+\t\t\treturn tableViewer;\n+\t\t}\n+\n+\t\tprotected void bindListeners() {\n+\t\t\tif (addButton != null) {\n+\t\t\t\taddButton.addListener(SWT.Selection, e -> onAddButtonSelected(tableViewer.getStructuredSelection()));\n+\t\t\t}\n+\n+\t\t\tif (editButton != null) {\n+\t\t\t\teditButton.addListener(SWT.Selection, e -> onEditButtonSelected(tableViewer.getStructuredSelection()));\n+\t\t\t}\n+\n+\t\t\tif (duplicateButton != null) {\n+\t\t\t\tduplicateButton.addListener(SWT.Selection,\n+\t\t\t\t\t\te -> onDuplicateButtonSelected(tableViewer.getStructuredSelection()));\n+\t\t\t}\n+\n+\t\t\tif (removeButton != null) {\n+\t\t\t\tremoveButton.addListener(SWT.Selection,\n+\t\t\t\t\t\te -> onRemoveButtonSelected(tableViewer.getStructuredSelection()));\n+\t\t\t}\n+\n+\t\t\tif (importFilesButton != null) {\n+\t\t\t\timportFilesButton.addListener(SWT.Selection,\n+\t\t\t\t\t\te -> onImportFilesButtonSelected(tableViewer.getStructuredSelection()));\n+\t\t\t}\n+\n+\t\t\tif (exportFileButton != null) {\n+\t\t\t\texportFileButton.addListener(SWT.Selection,\n+\t\t\t\t\t\te -> onExportFileButtonSelected(tableViewer.getStructuredSelection()));\n+\t\t\t}\n+\n+\t\t\ttableViewer.addSelectionChangedListener(e -> toggleButtonAvailabilityBy(e.getStructuredSelection()));\n+\t\t\ttoggleButtonAvailabilityBy(tableViewer.getStructuredSelection());\n+\t\t}\n+\n+\t\tprotected void toggleButtonAvailabilityBy(IStructuredSelection selection) {\n+\t\t\tif (addButton != null) {\n+\t\t\t\taddButton.setEnabled(true);\n+\t\t\t}\n+\n+\t\t\tif (editButton != null) {\n+\t\t\t\teditButton.setEnabled(selection.size() == 1);\n+\t\t\t}\n+\n+\t\t\tif (duplicateButton != null) {\n+\t\t\t\tduplicateButton.setEnabled(selection.size() == 1);\n+\t\t\t}\n+\n+\t\t\tif (removeButton != null) {\n+\t\t\t\tremoveButton.setEnabled(!selection.isEmpty());\n+\t\t\t}\n+\n+\t\t\tif (importFilesButton != null) {\n+\t\t\t\timportFilesButton.setEnabled(true);\n+\t\t\t}\n+\n+\t\t\tif (exportFileButton != null) {\n+\t\t\t\texportFileButton.setEnabled(selection.size() == 1);\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected void onExportFileButtonSelected(IStructuredSelection selection) {\n+\t\t}\n+\n+\t\tprotected void onImportFilesButtonSelected(IStructuredSelection selection) {\n+\t\t}\n+\n+\t\tprotected void onRemoveButtonSelected(IStructuredSelection selection) {\n+\t\t}\n+\n+\t\tprotected void onDuplicateButtonSelected(IStructuredSelection selection) {\n+\t\t}\n+\n+\t\tprotected void onEditButtonSelected(IStructuredSelection selection) {\n+\t\t}\n+\n+\t\tprotected void onAddButtonSelected(IStructuredSelection selection) {\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/wizards\/BaseWizardPage.java","additions":493,"deletions":0,"binary":false,"changes":493,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.wizards;\n+\n+import com.sun.tools.attach.AgentInitializationException;\n+import com.sun.tools.attach.AgentLoadException;\n+import com.sun.tools.attach.AttachNotSupportedException;\n+import com.sun.tools.attach.VirtualMachine;\n+import org.eclipse.jface.wizard.Wizard;\n+import org.eclipse.ui.IEditorInput;\n+import org.eclipse.ui.IWorkbenchWindow;\n+import org.eclipse.ui.PartInitException;\n+import org.eclipse.ui.PlatformUI;\n+import org.openjdk.jmc.console.agent.AgentJmxHelper;\n+import org.openjdk.jmc.console.agent.editor.AgentEditor;\n+import org.openjdk.jmc.console.agent.editor.AgentEditorInput;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.ui.misc.DialogToolkit;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+public class StartAgentWizard extends Wizard {\n+\n+\tprivate final AgentJmxHelper helper;\n+\tprivate final StartAgentWizardPage startAgentWizardPage;\n+\n+\tpublic StartAgentWizard(AgentJmxHelper helper) {\n+\t\tthis.helper = helper;\n+\t\tstartAgentWizardPage = new StartAgentWizardPage(helper);\n+\t}\n+\n+\t@Override\n+\tpublic boolean canFinish() {\n+\t\treturn !startAgentWizardPage.getAgentJarPath().isEmpty();\n+\t}\n+\n+\t@Override\n+\tpublic boolean performFinish() {\n+\t\tJVMDescriptor targetJvm = startAgentWizardPage.getTargetJvm();\n+\t\tString agentJarPath = startAgentWizardPage.getAgentJarPath();\n+\t\tString agentXmlPath = startAgentWizardPage.getAgentXmlPath();\n+\n+\t\tIWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();\n+\t\ttry {\n+\t\t\tVirtualMachine vm = VirtualMachine.attach(targetJvm.getPid() + \"\");\n+\t\t\tloadAgent(vm, agentJarPath, agentXmlPath);\n+\t\t\tIEditorInput ei = new AgentEditorInput(helper.getServerHandle(), helper.getConnectionHandle(), helper);\n+\t\t\twindow.getActivePage().openEditor(ei, AgentEditor.EDITOR_ID, true);\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tDialogToolkit.showException(window.getShell(), Messages.StartAgentWizard_MESSAGE_FAILED_TO_START_AGENT,\n+\t\t\t\t\tMessages.StartAgentWizard_MESSAGE_INVALID_AGENT_CONFIG, e);\n+\t\t\treturn false;\n+\t\t} catch (AgentLoadException e) {\n+\t\t\tDialogToolkit.showException(window.getShell(), Messages.StartAgentWizard_MESSAGE_FAILED_TO_START_AGENT,\n+\t\t\t\t\tMessages.StartAgentWizard_MESSAGE_FAILED_TO_LOAD_AGENT, e);\n+\t\t\treturn false;\n+\t\t} catch (AttachNotSupportedException | IOException e) {\n+\t\t\tDialogToolkit.showException(window.getShell(), Messages.StartAgentWizard_MESSAGE_FAILED_TO_START_AGENT,\n+\t\t\t\t\tMessages.StartAgentWizard_MESSAGE_UNEXPECTED_ERROR_HAS_OCCURRED, e);\n+\t\t\treturn false;\n+\t\t} catch (AgentInitializationException e) {\n+\t\t\tDialogToolkit.showException(window.getShell(), Messages.StartAgentWizard_MESSAGE_FAILED_TO_START_AGENT,\n+\t\t\t\t\tMessages.StartAgentWizard_MESSAGE_ACCESS_TO_UNSAFE_REQUIRED, e);\n+\t\t\treturn false;\n+\t\t} catch (PartInitException e) {\n+\t\t\tDialogToolkit.showException(window.getShell(),\n+\t\t\t\t\tMessages.StartAgentWizard_MESSAGE_FAILED_TO_OPEN_AGENT_EDITOR,\n+\t\t\t\t\tMessages.StartAgentWizard_MESSAGE_UNEXPECTED_ERROR_HAS_OCCURRED, e);\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+\n+\tprivate void loadAgent(VirtualMachine vm, String agentJar, String xmlPath)\n+\t\t\tthrows IOException, AgentLoadException, AgentInitializationException {\n+\t\tif (agentJar.isEmpty() || Files.notExists(Paths.get(agentJar))) {\n+\t\t\tthrow new IllegalArgumentException(\"the Agent JAR path does exists\");\n+\t\t}\n+\n+\t\tif (!xmlPath.isEmpty() && Files.notExists(Paths.get(xmlPath))) {\n+\t\t\tthrow new IllegalArgumentException(\"the Agent configuration path does exists\");\n+\t\t}\n+\n+\t\tvm.loadAgent(agentJar, xmlPath);\n+\t}\n+\n+\t@Override\n+\tpublic void addPages() {\n+\t\taddPage(startAgentWizardPage);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/wizards\/StartAgentWizard.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.console.agent.wizards;\n+\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.ScrolledComposite;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Text;\n+import org.openjdk.jmc.console.agent.AgentJmxHelper;\n+import org.openjdk.jmc.console.agent.messages.internal.Messages;\n+import org.openjdk.jmc.ui.common.jvm.JVMDescriptor;\n+\n+public class StartAgentWizardPage extends BaseWizardPage {\n+\n+\tprivate static final String FILE_OPEN_JAR_EXTENSION = \"*.jar\"; \/\/ $NON-NLS-1$\n+\tprivate static final String FILE_OPEN_XML_EXTENSION = \"*.xml\"; \/\/ $NON-NLS-1$\n+\n+\tprivate final AgentJmxHelper helper;\n+\n+\tprivate Text targetJvmText;\n+\tprivate Text agentJarText;\n+\tprivate Button agentJarBrowseButton;\n+\tprivate Text agentXmlText;\n+\tprivate Button agentXmlBrowseButton;\n+\n+\tprotected StartAgentWizardPage(AgentJmxHelper helper) {\n+\t\tsuper(Messages.StartAgentWizardPage_PAGE_NAME);\n+\n+\t\tthis.helper = helper;\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tinitializeDialogUnits(parent);\n+\n+\t\tsetTitle(Messages.StartAgentWizardPage_MESSAGE_START_AGENT_WIZARD_PAGE_TITLE);\n+\t\tsetDescription(Messages.StartAgentWizardPage_MESSAGE_START_AGENT_WIZARD_PAGE_DESCRIPTION);\n+\n+\t\tScrolledComposite sc = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);\n+\t\tComposite container = new Composite(sc, SWT.NONE);\n+\t\tsc.setContent(container);\n+\n+\t\tGridLayout layout = new GridLayout();\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tcreateTargetJvmContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateSeparator(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\t\tcreateAgentBrowserContainer(container).setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));\n+\n+\t\tbindListeners();\n+\t\tpopulateUi();\n+\n+\t\tsc.setExpandHorizontal(true);\n+\t\tsc.setExpandVertical(true);\n+\t\tsc.setMinSize(container.computeSize(SWT.DEFAULT, SWT.DEFAULT));\n+\t\tsetControl(sc);\n+\t}\n+\n+\tpublic JVMDescriptor getTargetJvm() {\n+\t\treturn helper.getConnectionHandle().getServerDescriptor().getJvmInfo();\n+\t}\n+\n+\tpublic String getAgentJarPath() {\n+\t\treturn agentJarText.getText();\n+\t}\n+\n+\tpublic String getAgentXmlPath() {\n+\t\treturn agentXmlText.getText();\n+\t}\n+\n+\tprivate Composite createTargetJvmContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 5;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\ttargetJvmText = createTextInput(container, cols, Messages.StartAgentWizardPage_LABEL_TARGET_JVM, \"\"); \/\/ $NON-NLS-1$\n+\t\ttargetJvmText.setEnabled(false);\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate Composite createAgentBrowserContainer(Composite parent) {\n+\t\tComposite container = new Composite(parent, SWT.NONE);\n+\t\tint cols = 8;\n+\t\tGridLayout layout = new GridLayout(cols, false);\n+\t\tlayout.horizontalSpacing = 8;\n+\t\tcontainer.setLayout(layout);\n+\n+\t\tagentJarText = createTextInput(container, cols - 2, Messages.StartAgentWizardPage_LABEL_AGENT_JAR,\n+\t\t\t\tMessages.StartAgentWizardPage_MESSAGE_PATH_TO_AN_AGENT_JAR);\n+\t\tagentJarText.setEditable(false);\n+\t\tagentJarBrowseButton = createButton(container, Messages.StartAgentWizardPage_LABEL_BROWSE);\n+\t\tagentJarBrowseButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 2, 0));\n+\n+\t\tagentXmlText = createTextInput(container, cols - 2, Messages.StartAgentWizardPage_LABEL_AGENT_XML,\n+\t\t\t\tMessages.StartAgentWizardPage_MESSAGE_PATH_TO_AN_AGENT_CONFIG);\n+\t\tagentXmlText.setEditable(false);\n+\t\tagentXmlBrowseButton = createButton(container, Messages.StartAgentWizardPage_LABEL_BROWSE);\n+\t\tagentXmlBrowseButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 2, 0));\n+\n+\t\treturn container;\n+\t}\n+\n+\tprivate void bindListeners() {\n+\t\tagentJarBrowseButton.addListener(SWT.Selection, e -> {\n+\t\t\tString[] path = openFileDialog(Messages.StartAgentWizardPage_DIALOG_BROWSER_FOR_AGENT_JAR,\n+\t\t\t\t\tnew String[] {FILE_OPEN_JAR_EXTENSION}, SWT.OPEN | SWT.SINGLE);\n+\t\t\tif (path.length != 0) {\n+\t\t\t\tsetText(agentJarText, path[0]);\n+\t\t\t}\n+\t\t});\n+\t\tagentXmlBrowseButton.addListener(SWT.Selection, e -> {\n+\t\t\tString[] path = openFileDialog(Messages.StartAgentWizardPage_DIALOG_BROWSER_FOR_AGENT_CONFIG,\n+\t\t\t\t\tnew String[] {FILE_OPEN_XML_EXTENSION}, SWT.OPEN | SWT.SINGLE);\n+\t\t\tif (path.length != 0) {\n+\t\t\t\tsetText(agentXmlText, path[0]);\n+\t\t\t}\n+\t\t});\n+\t\tagentJarText.addModifyListener(e -> setPageComplete(!agentJarText.getText().isEmpty()));\n+\t\tgetWizard().getContainer().updateButtons();\n+\t}\n+\n+\tprivate void populateUi() {\n+\t\tsetText(targetJvmText, helper.getConnectionHandle().getServerDescriptor().getDisplayName());\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/wizards\/StartAgentWizardPage.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,210 @@\n+#\n+# Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+#\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# The contents of this file are subject to the terms of either the Universal Permissive License\n+# v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#\n+# or the following license:\n+#\n+# Redistribution and use in source and binary forms, with or without modification, are permitted\n+# provided that the following conditions are met:\n+#\n+# 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+# and the following disclaimer.\n+#\n+# 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+# conditions and the following disclaimer in the documentation and\/or other materials provided with\n+# the distribution.\n+#\n+# 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+# endorse or promote products derived from this software without specific prior written permission.\n+#\n+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+#\n+AgentEditorOpener_JOB_NAME=Connecting to RJMX service\n+AgentEditorOpener_MESSAGE_COULD_NOT_CONNECT=Could not connect\n+AgentEditorOpener_MESSAGE_STARTING_AGENT_ON_REMOTE_JVM_NOT_SUPPORTED=Starting an agent on remote JVM is not supported\n+AgentEditorOpener_MESSAGE_START_AGENT_MANUALLY=Start the agent manually and try again\n+AgentEditorOpener_MESSAGE_FAILED_TO_OPEN_AGENT_EDITOR=Failed to open the JMC Agent Editor\n+\n+AgentEditor_CONNECTION_LOST=Connection Lost\n+AgentEditor_AGENT_EDITOR_TITLE=Agent Live Config\n+\n+CapturedValue_ERROR_RELATION_KEY_HAS_INCORRECT_SYNTAX=Relation key has incorrect syntax.\n+CapturedValue_ERROR_CONVERTER_HAS_INCORRECT_SYNTAX=Converter has incorrect syntax.\n+\n+Event_ERROR_ID_CANNOT_BE_EMPTY_OR_NULL=ID cannot be empty or null.\n+Event_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL=Name cannot be empty or null.\n+Event_ERROR_CLASS_CANNOT_BE_EMPTY_OR_NULL=Class cannot be empty or null.\n+Event_ERROR_METHOD_NAME_CANNOT_BE_EMPTY_OR_NULL=Method name cannot be empty or null.\n+Event_ERROR_METHOD_DESCRIPTOR_CANNOT_BE_EMPTY_OR_NULL=Method descriptor cannot be empty or null.\n+Event_ERROR_METHOD_PARAMETER_CANNOT_BE_NULL=Method parameter cannot be null.\n+Event_ERROR_FIELD_CANNOT_BE_NULL=Field cannot be null.\n+Event_ERROR_CLASS_HAS_INCORRECT_SYNTAX=Class has incorrect syntax.\n+Event_ERROR_PATH_HAS_INCORRECT_SYNTAX=Path has incorrect syntax.\n+Event_ERROR_METHOD_NAME_HAS_INCORRECT_SYNTAX=Method name has incorrect syntax.\n+Event_ERROR_METHOD_DESCRIPTOR_HAS_INCORRECT_SYNTAX=Method descriptor has incorrect syntax.\n+Event_ERROR_INDEX_MUST_BE_UNIQUE=Method parameter index must be unique.\n+\n+Field_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL=Name cannot be empty or null.\n+Field_ERROR_EXPRESSION_CANNOT_BE_EMPTY_OR_NULL=Expression cannot be empty or null.\n+Field_ERROR_EXPRESSION_HAS_INCORRECT_SYNTAX=Expression has incorrect syntax.\n+\n+MethodParameter_ERROR_INDEX_CANNOT_BE_LESS_THAN_ZERO=Index cannot be less than zero.\n+MethodParameter_ERROR_NAME_CANNOT_BE_EMPTY_OR_NULL=Name cannot be empty or null.\n+\n+Preset_ERROR_FILE_NAME_CANNOT_BE_EMPTY_OR_NULL=File name cannot be empty or null.\n+Preset_ERROR_MUST_HAVE_UNIQUE_ID=An event with the same id already exists.\n+Preset_ERROR_MUST_HAVE_UNIQUE_EVENT_CLASS_NAME=Event must have a unique event name per class\n+\n+CapturedValueEditingPage_PAGE_NAME=Agent Captured Value Editing\n+CapturedValueEditingPage_MESSAGE_PARAMETER_OR_RETURN_VALUE_EDITING_PAGE_TITLE=Edit a Parameter or Return Value\n+CapturedValueEditingPage_MESSAGE_PARAMETER_OR_RETURN_VALUE_EDITING_PAGE_DESCRIPTION=Define a capturing of a method parameter or a return value.\n+CapturedValueEditingPage_MESSAGE_FIELD_EDITING_PAGE_TITLE=Edit a Parameter or Return Value Capturing\n+CapturedValueEditingPage_MESSAGE_FIELD_EDITING_PAGE_DESCRIPTION=Define a custom expression evaluation and capture its result.\n+CapturedValueEditingPage_LABEL_NAME=Name: \n+CapturedValueEditingPage_LABEL_INDEX=Index: \n+CapturedValueEditingPage_LABEL_IS_RETURN_VALUE=This is a return value\n+CapturedValueEditingPage_LABEL_EXPRESSION=Expression: \n+CapturedValueEditingPage_LABEL_DESCRIPTION=Description: \n+CapturedValueEditingPage_LABEL_CONTENT_TYPE=Content Type: \n+CapturedValueEditingPage_LABEL_CLEAR=Clear\n+CapturedValueEditingPage_LABEL_RELATIONAL_KEY=Relational Key: \n+CapturedValueEditingPage_LABEL_CONVERTER=Converter: \n+CapturedValueEditingPage_MESSAGE_NAME_OF_THE_CAPTURING=Name of this capturing\n+CapturedValueEditingPage_MESSAGE_JAVA_PRIMARY_EXPRESSION_TO_BE_EVALUATED=Java primary expression to be evaluated\n+CapturedValueEditingPage_MESSAGE_OPTIONAL_DESCRIPTION_OF_THIS_CAPTURING=(Optional) Description of this capturing\n+CapturedValueEditingPage_MESSAGE_RELATIONAL_KEY_DESCRIPTION=(Optional) Unique URI signifying a relationship\n+CapturedValueEditingPage_MESSAGE_CONVERTER_DESCRIPTION=(Optional) fully qualified class name of a value converter\n+\n+EventEditingWizardConfigPage_PAGE_NAME=Agent Event Editing\n+EventEditingWizardConfigPage_MESSAGE_EVENT_EDITING_WIZARD_CONFIG_PAGE_TITLE=Edit Event Configurations\n+EventEditingWizardConfigPage_MESSAGE_EVENT_EDITING_WIZARD_CONFIG_PAGE_DESCRIPTION=Edit basic information of an event on how it should be instrumented and injected.\n+EventEditingWizardConfigPage_LABEL_ID=ID: \n+EventEditingWizardConfigPage_LABEL_NAME=Name: \n+EventEditingWizardConfigPage_LABEL_DESCRIPTION=Description: \n+EventEditingWizardConfigPage_LABEL_CLASS=Class: \n+EventEditingWizardConfigPage_LABEL_METHOD=Method: \n+EventEditingWizardConfigPage_LABEL_PATH=Path: \n+EventEditingWizardConfigPage_LABEL_LOCATION=Location: \n+EventEditingWizardConfigPage_LABEL_CLEAR=Clear\n+EventEditingWizardConfigPage_LABEL_RECORD_EXCEPTIONS=Record exceptions\n+EventEditingWizardConfigPage_LABEL_RECORD_STACK_TRACE=Record stack trace\n+EventEditingWizardConfigPage_MESSAGE_EVENT_ID=Event ID\n+EventEditingWizardConfigPage_MESSAGE_NAME_OF_THE_EVENT=Name of the event\n+EventEditingWizardConfigPage_MESSAGE_FULLY_QUALIFIED_CLASS_NAME=Fully qualified class name\n+EventEditingWizardConfigPage_MESSAGE_METHOD_NAME=Method name\n+EventEditingWizardConfigPage_MESSAGE_METHOD_DESCRIPTOR=Method descriptor\n+EventEditingWizardConfigPage_MESSAGE_OPTIONAL_DESCRIPTION_OF_THIS_EVENT=(Optional) Description of this event\n+EventEditingWizardConfigPage_MESSAGE_PATH_TO_EVENT=Path to event in event browser\n+\n+EventEditingWizardFieldPage_PAGE_NAME=Agent Event Editing\n+EventEditingWizardFieldPage_MESSAGE_EVENT_EDITING_WIZARD_FIELD_PAGE_TITLE=Add or Remove Event Fields\n+EventEditingWizardFieldPage_MESSAGE_EVENT_EDITING_WIZARD_FIELD_PAGE_DESCRIPTION=Fields are a subset of Java primary expressions which can be evaluated and recorded when committing an event.\n+EventEditingWizardFieldPage_MESSAGE_UNABLE_TO_SAVE_THE_FIELD=Unable to add the field\n+EventEditingWizardFieldPage_LABEL_NAME=Name\n+EventEditingWizardFieldPage_LABEL_EXPRESSION=Expression\n+EventEditingWizardFieldPage_LABEL_DESCRIPTION=Description\n+EventEditingWizardFieldPage_ID_NAME=name\n+EventEditingWizardFieldPage_ID_EXPRESSION=expression\n+EventEditingWizardFieldPage_ID_DESCRIPTION=description\n+\n+EventEditingWizardParameterPage_PAGE_NAME=Agent Event Editing\n+EventEditingWizardParameterPage_MESSAGE_EVENT_EDITING_WIZARD_PARAMETER_PAGE_TITLE=Add or Remove Event Parameters\n+EventEditingWizardParameterPage_MESSAGE_EVENT_EDITING_WIZARD_PARAMETER_PAGE_DESCRIPTION=Function parameters and return values can be recorded when committing an event.\n+EventEditingWizardParameterPage_MESSAGE_RETURN_VALUE=(Return value)\n+EventEditingWizardParameterPage_MESSAGE_UNABLE_TO_SAVE_THE_PARAMETER_OR_RETURN_VALUE=Unable to add the parameter\/return value\n+EventEditingWizardParameterPage_LABEL_INDEX=Index\n+EventEditingWizardParameterPage_LABEL_NAME=Name\n+EventEditingWizardParameterPage_LABEL_DESCRIPTION=Description\n+EventEditingWizardParameterPage_ID_INDEX=index\n+EventEditingWizardParameterPage_ID_NAME=name\n+EventEditingWizardParameterPage_ID_DESCRIPTION=description\n+\n+PresetEditingWizardConfigPage_PAGE_NAME=Agent Preset Editing\n+PresetEditingWizardConfigPage_MESSAGE_PRESET_EDITING_WIZARD_CONFIG_PAGE_TITLE=Edit Preset Global Configurations\n+PresetEditingWizardConfigPage_MESSAGE_PRESET_EDITING_WIZARD_CONFIG_PAGE_DESCRIPTION=Global configurations are defaults which applies to any event missing a per-even configuration.\n+PresetEditingWizardConfigPage_LABEL_FILE_NAME=File Name: \n+PresetEditingWizardConfigPage_LABEL_CLASS_PREFIX=Class Prefix: \n+PresetEditingWizardConfigPage_LABEL_ALLOW_TO_STRING=Allow toString\n+PresetEditingWizardConfigPage_LABEL_ALLOW_CONVERTER=Allow Converter\n+PresetEditingWizardConfigPage_MESSAGE_NAME_OF_THE_SAVED_XML=Name of the saved XML on file system\n+PresetEditingWizardConfigPage_MESSAGE_PREFIX_ADDED_TO_GENERATED_EVENT_CLASSES=Prefix added to generated event classes\n+\t\n+PresetEditingWizardEventPage_PAGE_NAME=Agent Preset Editing\n+PresetEditingWizardEventPage_MESSAGE_PRESET_EDITING_WIZARD_EVENT_PAGE_TITLE=Add or Remove Preset Events\n+PresetEditingWizardEventPage_MESSAGE_PRESET_EDITING_WIZARD_EVENT_PAGE_DESCRIPTION=Add new events to the prset, or remove\/edit existing events.\n+PresetEditingWizardEventPage_MESSAGE_UNABLE_TO_SAVE_THE_PRESET=Unable to add the event\n+PresetEditingWizardEventPage_LABEL_ID_COLUMN=ID\n+PresetEditingWizardEventPage_LABEL_NAME_COLUMN=name\n+PresetEditingWizardEventPage_ID_ID_COLUMN=id\n+PresetEditingWizardEventPage_ID_NAME_COLUMN=name\n+\n+PresetManagerPage_PAGE_NAME=Agent Preset Manager\n+PresetManagerPage_MESSAGE_PRESET_MANAGER_PAGE_TITLE=JMC Agent Configuration Preset Manager\n+PresetManagerPage_MESSAGE_PRESET_MANAGER_PAGE_DESCRIPTION=Presets for JMC agent are useful to repeatedly apply configurations to a running JMC agent.\n+PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_SAVE_THE_PRESET=Unable to save the preset\n+PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_IMPORT_THE_PRESET=Unable to import the preset\n+PresetManagerPage_MESSAGE_PRESET_MANAGER_UNABLE_TO_EXPORT_THE_PRESET=Unable to export the preset\n+PresetManagerPage_MESSAGE_IMPORT_EXTERNAL_PRESET_FILES=Import external preset files\n+PresetManagerPage_MESSAGE_EXPORT_PRESET_TO_A_FILE=Import the preset to a file\n+PresetManagerPage_MESSAGE_EVENTS=event(s)\n+\n+PresetEditingWizardPreviewPage_PAGE_NAME=Agent Preset Editing\n+PresetEditingWizardPreviewPage_MESSAGE_PRESET_EDITING_WIZARD_PREVIEW_PAGE_TITLE=Preview Preset Output\n+PresetEditingWizardPreviewPage_MESSAGE_PRESET_EDITING_WIZARD_PREVIEW_PAGE_DESCRIPTION=Inpsects the generated XML before it is saved. Click Back to make any modifications if needed. Click Finish to save.\n+\n+EditorTab_TITLE=Editor\n+\n+ActionButtons_LABEL_SAVE_TO_PRESET_BUTTON=Save to Preset\n+ActionButtons_LABEL_SAVE_TO_FILE_BUTTON=Save to File\n+ActionButtons_LABEL_APPLY_PRESET_BUTTON=Apply Preset\n+ActionButtons_LABEL_APPLY_LOCAL_CONFIG_BUTTON=Apply Local Config\n+ActionButtons_ERROR_PAGE_TITLE=Error in Configuration\n+ActionButtons_MESSAGE_APPLY_LOCAL_CONFIG=Apply a local configuration\n+\n+LiveConfigTab_TITLE=Live Config\n+\n+OverviewTab_TITLE=Overview\n+OverviewTab_MESSAGE_AGENT_LOADED=Agent is loaded\n+\n+EditAgentSection_MESSAGE_ENTER_PATH=Enter Path...\n+EditAgentSection_MESSAGE_AGENT_XML_PATH=XML Path: \n+EditAgentSection_MESSAGE_BROWSE=Browse\n+EditAgentSection_MESSAGE_EDIT=Edit\n+EditAgentSection_MESSAGE_VALIDATE=Validate\n+EditAgentSection_MESSAGE_APPLY=Apply\n+EditAgentSection_MESSAGE_NO_WARNINGS_OR_ERRORS_FOUND=No errors\/warnings found!\n+\n+PresetsTab_TITLE=Presets\n+\n+BaseWizardPage_MESSAGE_UNEXPECTED_ERROR_HAS_OCCURRED=An unexpected has error occurred.\n+\n+StartAgentWizard_MESSAGE_FAILED_TO_START_AGENT=Failed to start JMC Agent\n+StartAgentWizard_MESSAGE_FAILED_TO_OPEN_AGENT_EDITOR=Failed to open the JMC Agent Editor\n+StartAgentWizard_MESSAGE_UNEXPECTED_ERROR_HAS_OCCURRED=An unexpected has error occurred.\n+StartAgentWizard_MESSAGE_INVALID_AGENT_CONFIG=An invalid configuration is entered.\n+StartAgentWizard_MESSAGE_FAILED_TO_LOAD_AGENT=Failed to load the JMC Agent. Check that the provided agent jar is correct.\n+StartAgentWizard_MESSAGE_ACCESS_TO_UNSAFE_REQUIRED=Could not access jdk.internal.misc.Unsafe! Did you run your application with '--add-opens java.base\/jdk.internal.misc=ALL-UNNAMED'?\n+StartAgentWizardPage_PAGE_NAME=Start Agent Wizard Page\n+StartAgentWizardPage_MESSAGE_START_AGENT_WIZARD_PAGE_TITLE=Start JMC Agent\n+StartAgentWizardPage_MESSAGE_START_AGENT_WIZARD_PAGE_DESCRIPTION=Enter the JMC Agent configuration details and then click 'Start' to start the agent.\n+StartAgentWizardPage_MESSAGE_PATH_TO_AN_AGENT_JAR=Path to an agent JAR\n+StartAgentWizardPage_MESSAGE_PATH_TO_AN_AGENT_CONFIG=(Optional) Path to an agent configuration\n+StartAgentWizardPage_LABEL_TARGET_JVM=Target JVM: \n+StartAgentWizardPage_LABEL_AGENT_JAR=Agent JAR: \n+StartAgentWizardPage_LABEL_AGENT_XML=Agent XML: \n+StartAgentWizardPage_LABEL_BROWSE=Browse...\n+StartAgentWizardPage_DIALOG_BROWSER_FOR_AGENT_JAR=Browser for JMC Agent JAR\n+StartAgentWizardPage_DIALOG_BROWSER_FOR_AGENT_CONFIG=Browser for JMC Agent Configuration\n+StartAgentWizard_WIZARD_FINISH_BUTTON_TEXT=Start\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/resources\/org\/openjdk\/jmc\/console\/ext\/agent\/messages\/internal\/messages.properties","additions":210,"deletions":0,"binary":false,"changes":210,"status":"added"},{"patch":"@@ -0,0 +1,217 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n+<xs:schema elementFormDefault=\"qualified\" xmlns:xs=\"http:\/\/www.w3.org\/2001\/XMLSchema\">\n+\t<xs:element type=\"jfrAgentType\" name=\"jfragent\" \/>\n+\n+\t<xs:complexType name=\"jfrAgentType\">\n+\t\t<xs:all>\n+\t\t\t<xs:element type=\"configType\" name=\"config\" minOccurs=\"0\">\n+\t\t\t\t<xs:annotation>\n+\t\t\t\t\t<xs:documentation>Global configuration options<\/xs:documentation>\n+\t\t\t\t<\/xs:annotation>\n+\t\t\t<\/xs:element>\n+\t\t\t<xs:element type=\"eventsType\" name=\"events\" minOccurs=\"0\" \/>\n+\t\t<\/xs:all>\n+\t<\/xs:complexType>\n+\n+\t<xs:complexType name=\"configType\">\n+\t\t<xs:all>\n+\t\t\t<xs:element type=\"xs:string\" name=\"classprefix\" minOccurs=\"0\">\n+\t\t\t\t<xs:annotation>\n+\t\t\t\t\t<xs:documentation>This is the prefix to use when generating event class names<\/xs:documentation>\n+\t\t\t\t<\/xs:annotation>\n+\t\t\t<\/xs:element>\n+\t\t\t<xs:element type=\"xs:boolean\" name=\"allowtostring\" minOccurs=\"0\">\n+\t\t\t\t<xs:annotation>\n+\t\t\t\t\t<xs:documentation>\n+\t\t\t\t\t\tWill allow the recording of arrays and object parameters as Strings. This will cause toString to\n+\t\t\t\t\t\tbe called for array elements and objects other than strings, which in turn can cause trouble if\n+\t\t\t\t\t\tthe toString method is badly implemented. Use with care.\n+\t\t\t\t\t<\/xs:documentation>\n+\t\t\t\t<\/xs:annotation>\n+\t\t\t<\/xs:element>\n+\t\t\t<xs:element type=\"xs:boolean\" name=\"allowconverter\" minOccurs=\"0\">\n+\t\t\t\t<xs:annotation>\n+\t\t\t\t\t<xs:documentation>\n+\t\t\t\t\t\tAllows converters to be used. If a converter is badly implemented, you are on your own.\n+\t\t\t\t\t<\/xs:documentation>\n+\t\t\t\t<\/xs:annotation>\n+\t\t\t<\/xs:element>\n+\t\t<\/xs:all>\n+\t<\/xs:complexType>\n+\n+\t<xs:complexType name=\"eventsType\">\n+\t\t<xs:sequence>\n+\t\t\t<xs:element type=\"eventType\" name=\"event\" maxOccurs=\"unbounded\" minOccurs=\"0\" \/>\n+\t\t<\/xs:sequence>\n+\t<\/xs:complexType>\n+\n+\t<xs:complexType name=\"eventType\">\n+\t\t<xs:all>\n+\t\t\t<xs:element type=\"xs:string\" name=\"label\" \/>\n+\t\t\t<xs:element type=\"classType\" name=\"class\" \/>\n+\t\t\t<xs:element type=\"methodType\" name=\"method\" \/>\n+\t\t\t<xs:element type=\"xs:string\" name=\"description\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"pathType\" name=\"path\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"xs:boolean\" name=\"stacktrace\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"xs:boolean\" name=\"rethrow\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"locationType\" name=\"location\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"fieldsType\" name=\"fields\" minOccurs=\"0\" \/>\n+\t\t<\/xs:all>\n+\t\t<xs:attribute type=\"xs:string\" name=\"id\" use=\"required\" \/>\n+\t<\/xs:complexType>\n+\n+\t<xs:simpleType name=\"classType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>the fully qualified class name (FQCN) of the class to be transformed<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:restriction base=\"xs:normalizedString\">\n+\t\t\t<xs:pattern value=\"([a-zA-Z_$][a-zA-Z0-9_$]*\\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)\" \/>\n+\t\t\t<xs:whiteSpace value=\"collapse\" \/>\n+\t\t<\/xs:restriction>\n+\t<\/xs:simpleType>\n+\n+\t<xs:complexType name=\"methodType\">\n+\t\t<xs:all>\n+\t\t\t<xs:element type=\"methodNameType\" name=\"name\" \/>\n+\t\t\t<xs:element type=\"descriptorType\" name=\"descriptor\" \/>\n+\t\t\t<xs:element type=\"parametersType\" name=\"parameters\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"returnValueType\" name=\"returnvalue\" minOccurs=\"0\" \/>\n+\t\t<\/xs:all>\n+\t<\/xs:complexType>\n+\n+\t<xs:simpleType name=\"methodNameType\">\n+\t\t<xs:restriction base=\"xs:normalizedString\">\n+\t\t\t<xs:pattern value=\"[a-zA-Z_$][a-zA-Z0-9_$]*\" \/>\n+\t\t\t<xs:whiteSpace value=\"collapse\" \/>\n+\t\t<\/xs:restriction>\n+\t<\/xs:simpleType>\n+\n+\t<xs:simpleType name=\"descriptorType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>see §4.3.3 in Java Virtual Machine Specification<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:restriction base=\"xs:normalizedString\">\n+\t\t\t<xs:pattern value=\"\\((\\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*\/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))*\\)(V|\\[*([BCDFIJSZ]|L([a-zA-Z_$][a-zA-Z0-9_$]*\/)*[a-zA-Z_$][a-zA-Z0-9_$]*;))\" \/>\n+\t\t\t<xs:whiteSpace value=\"collapse\" \/>\n+\t\t<\/xs:restriction>\n+\t<\/xs:simpleType>\n+\n+\t<xs:complexType name=\"parametersType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>only if we allow toString<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:sequence>\n+\t\t\t<xs:element type=\"parameterType\" name=\"parameter\" maxOccurs=\"unbounded\" minOccurs=\"0\" \/>\n+\t\t<\/xs:sequence>\n+\t<\/xs:complexType>\n+\n+\t<xs:complexType name=\"parameterType\">\n+\t\t<xs:all>\n+\t\t\t<xs:element type=\"xs:string\" name=\"name\" \/>\n+\t\t\t<xs:element type=\"xs:string\" name=\"description\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"contentTypeType\" name=\"contenttype\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"relationKeyType\" name=\"relationkey\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"converterType\" name=\"converter\" minOccurs=\"0\" \/>\n+\t\t<\/xs:all>\n+\t\t<xs:attribute type=\"xs:nonNegativeInteger\" name=\"index\" use=\"required\" \/>\n+\t<\/xs:complexType>\n+\n+\t<xs:simpleType name=\"contentTypeType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>see com.oracle.jrockit.jfr.ContentType<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:restriction base=\"xs:normalizedString\">\n+\t\t\t<xs:enumeration value=\"None\" \/>\n+\t\t\t<xs:enumeration value=\"Bytes\" \/>\n+\t\t\t<xs:enumeration value=\"Timestamp\" \/>\n+\t\t\t<xs:enumeration value=\"Millis\" \/>\n+\t\t\t<xs:enumeration value=\"Nanos\" \/>\n+\t\t\t<xs:enumeration value=\"Ticks\" \/>\n+\t\t\t<xs:enumeration value=\"Address\" \/>\n+\t\t\t<xs:enumeration value=\"OSThread\" \/>\n+\t\t\t<xs:enumeration value=\"JavaThread\" \/>\n+\t\t\t<xs:enumeration value=\"StackTrace\" \/>\n+\t\t\t<xs:enumeration value=\"Class\" \/>\n+\t\t\t<xs:enumeration value=\"Percentage\" \/>\n+\t\t\t<xs:whiteSpace value=\"collapse\" \/>\n+\t\t<\/xs:restriction>\n+\t<\/xs:simpleType>\n+\n+\t<xs:simpleType name=\"relationKeyType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>\n+\t\t\t\ta unique URI signifying a relationship between different events based on the values of specific\n+\t\t\t\tfields\n+\t\t\t<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:restriction base=\"xs:anyURI\" \/>\n+\t<\/xs:simpleType>\n+\n+\t<xs:simpleType name=\"converterType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>the fully qualified class name (FQCN) of the converter used<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:restriction base=\"classType\" \/>\n+\t<\/xs:simpleType>\n+\n+\t<xs:complexType name=\"returnValueType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>This will only work if we allow toString<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:all>\n+\t\t\t<xs:element type=\"xs:string\" name=\"description\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"contentTypeType\" name=\"contenttype\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"relationKeyType\" name=\"relationkey\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"converterType\" name=\"converter\" minOccurs=\"0\" \/>\n+\t\t<\/xs:all>\n+\t<\/xs:complexType>\n+\n+\t<xs:simpleType name=\"pathType\">\n+\t\t<xs:restriction base=\"xs:normalizedString\">\n+\t\t\t<xs:pattern value=\"([^\/]+\/)*([^\/]*)\" \/>\n+\t\t\t<xs:whiteSpace value=\"collapse\" \/>\n+\t\t<\/xs:restriction>\n+\t<\/xs:simpleType>\n+\n+\t<xs:simpleType name=\"locationType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>location {ENTRY, EXIT, WRAP}<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:restriction base=\"xs:normalizedString\">\n+\t\t\t<xs:enumeration value=\"ENTRY\" \/>\n+\t\t\t<xs:enumeration value=\"EXIT\" \/>\n+\t\t\t<xs:enumeration value=\"WRAP\" \/>\n+\t\t\t<xs:whiteSpace value=\"collapse\" \/>\n+\t\t<\/xs:restriction>\n+\t<\/xs:simpleType>\n+\n+\t<xs:complexType name=\"fieldsType\">\n+\t\t<xs:sequence>\n+\t\t\t<xs:element type=\"fieldType\" name=\"field\" maxOccurs=\"unbounded\" minOccurs=\"0\" \/>\n+\t\t<\/xs:sequence>\n+\t<\/xs:complexType>\n+\n+\t<xs:complexType name=\"fieldType\">\n+\t\t<xs:all>\n+\t\t\t<xs:element type=\"xs:string\" name=\"name\" \/>\n+\t\t\t<xs:element type=\"expressionType\" name=\"expression\" \/>\n+\t\t\t<xs:element type=\"xs:string\" name=\"description\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"contentTypeType\" name=\"contenttype\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"relationKeyType\" name=\"relationkey\" minOccurs=\"0\" \/>\n+\t\t\t<xs:element type=\"converterType\" name=\"converter\" minOccurs=\"0\" \/>\n+\t\t<\/xs:all>\n+\t<\/xs:complexType>\n+\n+\t<xs:simpleType name=\"expressionType\">\n+\t\t<xs:annotation>\n+\t\t\t<xs:documentation>\n+\t\t\t\tan expression in a subset of primary expressions (see §15.8 in Java Language Specification) to be\n+\t\t\t\tevaluated\n+\t\t\t<\/xs:documentation>\n+\t\t<\/xs:annotation>\n+\t\t<xs:restriction base=\"xs:normalizedString\">\n+\t\t\t<xs:pattern value=\"([a-zA-Z_$][a-zA-Z0-9_$]*\\.)*([a-zA-Z_$][a-zA-Z0-9_$]*)(\\.[a-zA-Z_$][a-zA-Z_$]*)*\" \/>\n+\t\t\t<xs:whiteSpace value=\"collapse\" \/>\n+\t\t<\/xs:restriction>\n+\t<\/xs:simpleType>\n+<\/xs:schema>\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/resources\/org\/openjdk\/jmc\/console\/ext\/agent\/utils\/jfrprobes_schema.xsd","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+bin.includes = feature.xml\n+pde.match.rule.feature=compatible\n+pde.match.rule.bundle=compatible\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.feature.console.agent\/build.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<feature\n+      id=\"org.openjdk.jmc.feature.console.ext.agent\"\n+      label=\"JMC Agent Plugin\"\n+      version=\"8.1.0.qualifier\">\n+\n+   <description url=\"http:\/\/www.example.com\/description\">\n+      a Mission Control plug-in to control JMC agents\n+   <\/description>\n+\n+   <requires>\n+      <import feature=\"org.openjdk.jmc.feature.core\" version=\"8.0.0.qualifier\"\/>\n+      <import feature=\"org.openjdk.jmc.feature.console\" version=\"8.0.0.qualifier\"\/>\n+      <import plugin=\"org.openjdk.jmc.console.agent\"\/>\n+   <\/requires>\n+\n+<\/feature>\n","filename":"application\/org.openjdk.jmc.feature.console.agent\/feature.xml","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--   \n+   Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+   \n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+   \n+   The contents of this file are subject to the terms of either the Universal Permissive License \n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+   \n+   or the following license:\n+   \n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+   \n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+   \n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+   \n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+   \n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0<\/modelVersion>\n+\n+\t<parent>\n+\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t<artifactId>missioncontrol.application<\/artifactId>\n+\t\t<version>${revision}${changelist}<\/version>\n+\t<\/parent>\n+\t\n+\t<artifactId>org.openjdk.jmc.feature.console.agent<\/artifactId>\n+\t<version>8.1.0-SNAPSHOT<\/version>\n+\t<packaging>eclipse-feature<\/packaging>\n+\t\n+\t<properties>\n+\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t<\/properties>\n+<\/project>\n","filename":"application\/org.openjdk.jmc.feature.console.agent\/pom.xml","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -59,1 +59,1 @@\n-         unpack=\"false\"\/>\n+         unpack=\"false\"\/> \n","filename":"application\/org.openjdk.jmc.feature.console\/feature.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,0 +74,4 @@\n+   <includes\n+         id=\"org.openjdk.jmc.feature.console.ext.agent\"\n+         version=\"0.0.0\"\/>\n+\n@@ -94,1 +98,1 @@\n-  <plugin\n+   <plugin\n","filename":"application\/org.openjdk.jmc.feature.rcp\/feature.xml","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -202,0 +202,3 @@\n+\t\tif (menu.indexOf(IWorkbenchActionConstants.FIND_EXT) == -1) {\n+\t\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.FIND_EXT));\n+\t\t}\n","filename":"application\/org.openjdk.jmc.rcp.application\/src\/main\/java\/org\/openjdk\/jmc\/rcp\/application\/ApplicationActionBarAdvisor.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+\t\t<module>org.openjdk.jmc.feature.console.agent<\/module>\n@@ -117,0 +118,1 @@\n+\t\t<module>org.openjdk.jmc.console.agent<\/module>\n","filename":"application\/pom.xml","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,51 @@\n+    <!-- copied from jmc-agent-plugin -->\n+    <!-- The API here returns null as a meaningful value, this is fine. -->\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.AgentJmxHelper\"\/>\n+\t\t<Method name=\"retrieveCurrentTransforms\"\/>\n+\t\t<Bug pattern=\"PZLA_PREFER_ZERO_LENGTH_ARRAYS\"\/>\n+\t<\/Match>\n+\t<!-- this is a fire and forget method, we don't need the return value. -->\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.editor.AgentEditorUi\"\/>\n+\t\t<Method name=\"refresh\"\/>\n+\t\t<Bug pattern=\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"\/>\n+\t<\/Match>\n+\t<!-- We don't need the return value of createNewFile, if something went wrong the exception will be caught and handled -->\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.raweditor.internal.XmlDocumentProvider\"\/>\n+\t\t<Method name=\"doSaveDocument\"\/>\n+\t\t<Bug pattern=\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"\/>\n+\t<\/Match>\n+\t<!-- The double check is intentional here for synchronization, verify that we need to create\n+\t\tthe singleton before acquiring the lock. -->\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.manager.model.PresetRepositoryFactory\" \/>\n+\t\t<Method name=\"createSingleton\"\/>\n+\t\t<Bug pattern=\"DC_DOUBLECHECK\" \/>\n+\t<\/Match>\n+\t<!-- This is a false positive. Eclipse handles initialization of critical components elsewhere -->\n+    <Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.editor.AgentEditor\" \/>\n+\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\" \/>\n+    <\/Match>\n+    <Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.raweditor.internal.NonRuleBasedDamagerRepairer\"\/>\n+\t\t<Method name=\"endOfLineOf\"\/>\n+\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+\t<\/Match>\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.raweditor.internal.NonRuleBasedDamagerRepairer\"\/>\n+\t\t<Method name=\"getDamageRegion\"\/>\n+\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+\t<\/Match>\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.raweditor.internal.XmlDoubleClickStrategy\"\/>\n+\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+\t<\/Match>\n+\t<Match>\n+\t\t<Class name=\"org.openjdk.jmc.console.ext.agent.tabs.overview.OverviewTab\"\/>\n+\t\t<Method name=\"loadAgentListener\"\/>\n+\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+\t<\/Match>\n+\t\n","filename":"configuration\/spotbugs\/spotbugs-exclude.xml","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"}]}