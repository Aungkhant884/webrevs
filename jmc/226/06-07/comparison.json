{"files":[{"patch":"@@ -101,4 +101,2 @@\n-\t\t\t\tDialogToolkit.showException(window.getShell(),\n-\t\t\t\t\t\tMessages.AgentEditorOpener_MESSAGE_COULD_NOT_CONNECT,\n-\t\t\t\t\t\te);\n-\t\t\t\t\t\t\n+\t\t\t\tDialogToolkit.showException(window.getShell(), Messages.AgentEditorOpener_MESSAGE_COULD_NOT_CONNECT, e);\n+\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/actions\/AgentEditorOpener.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -138,2 +138,1 @@\n-\t\t\t\t\tDialogToolkit.showException(window.getShell(),\n-\t\t\t\t\t\t\tMessages.AgentEditorUI_MESSAGE_FAILED_TO_LOAD_PRESET,\n+\t\t\t\t\tDialogToolkit.showException(window.getShell(), Messages.AgentEditorUI_MESSAGE_FAILED_TO_LOAD_PRESET,\n@@ -191,2 +190,1 @@\n-\t\t\t\t\tMessages.PresetSelectorWizardPage_MESSAGE_FAILED_TO_SAVE_PRESET,\n-\t\t\t\t\te);\n+\t\t\t\t\tMessages.PresetSelectorWizardPage_MESSAGE_FAILED_TO_SAVE_PRESET, e);\n@@ -261,1 +259,1 @@\n-\t\t\t\t\t\t\t\t\t+ Messages.PresetSelectorWizardPage_MESSAGE_EVENTS; \n+\t\t\t\t\t\t\t\t\t+ Messages.PresetSelectorWizardPage_MESSAGE_EVENTS;\n@@ -302,1 +300,2 @@\n-\t\t\t\tDialogToolkit.openConfirmOnUiThread(Messages.PresetSelectorWizardPage_ERROR_PAGE_TITLE, validationMessage);\n+\t\t\t\tDialogToolkit.openConfirmOnUiThread(Messages.PresetSelectorWizardPage_ERROR_PAGE_TITLE,\n+\t\t\t\t\t\tvalidationMessage);\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/AgentEditorUi.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import org.openjdk.jmc.console.agent.AgentPlugin;\n@@ -63,0 +64,1 @@\n+import java.util.logging.Level;\n@@ -69,2 +71,1 @@\n-\t\n-\tprivate static Logger logger = Logger.getLogger(Preset.class.getName());\n+\n@@ -518,1 +519,1 @@\n-\t\t\tlogger.warning(e.getMessage());\n+\t\t\tAgentPlugin.getDefault().getLogger().log(Level.WARNING, \"Failed to save preset\", e);\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/Preset.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -85,1 +85,2 @@\n-\t\t\t\tAgentPlugin.getDefault().getLogger().log(Level.FINE, \"Empty file in preset storage directory: \" + file.getPath());\n+\t\t\t\tAgentPlugin.getDefault().getLogger().log(Level.FINE,\n+\t\t\t\t\t\t\"Empty file in preset storage directory: \" + file.getPath());\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/manager\/model\/PresetRepositoryFactory.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-\t\t\n+\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/raweditor\/internal\/XmlDocumentProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,25 +37,0 @@\n-\t<Match>\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.AgentJmxHelper\"\/>\n-\t\t<Method name=\"retrieveCurrentTransforms\"\/>\n-\t\t<Bug pattern=\"PZLA_PREFER_ZERO_LENGTH_ARRAYS\"\/>\n-\t<\/Match>\n-\t<!-- this is a fire and forget method, we don't need the return value. -->\n-\t<Match>\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.editor.AgentEditorUi\"\/>\n-\t\t<Method name=\"refresh\"\/>\n-\t\t<Bug pattern=\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"\/>\n-\t<\/Match>\n-\t<!-- We don't need the return value of createNewFile, if something went wrong the exception will be caught and handled -->\n-\t<Match>\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.XmlDocumentProvider\"\/>\n-\t\t<Method name=\"doSaveDocument\"\/>\n-\t\t<Bug pattern=\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"\/>\n-\t<\/Match>\n-\t<!-- The double check is intentional here for synchronization, verify that we need to create\n-\t\tthe singleton before acquiring the lock. -->\n-\t<Match>\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.manager.model.PresetRepositoryFactory\" \/>\n-\t\t<Method name=\"createSingleton\"\/>\n-\t\t<Bug pattern=\"DC_DOUBLECHECK\" \/>\n-\t<\/Match>\n-\t<!-- This is a false positive. Eclipse handles initialization of critical components elsewhere -->\n@@ -63,2 +38,3 @@\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.editor.AgentEditor\" \/>\n-\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\" \/>\n+        <Class name=\"org.openjdk.jmc.console.agent.AgentJmxHelper\"\/>\n+        <Method name=\"retrieveCurrentTransforms\"\/>\n+        <Bug pattern=\"PZLA_PREFER_ZERO_LENGTH_ARRAYS\"\/>\n@@ -66,0 +42,1 @@\n+    <!-- this is a fire and forget method, we don't need the return value. -->\n@@ -67,19 +44,42 @@\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.NonRuleBasedDamagerRepairer\"\/>\n-\t\t<Method name=\"endOfLineOf\"\/>\n-\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n-\t<\/Match>\n-\t<Match>\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.NonRuleBasedDamagerRepairer\"\/>\n-\t\t<Method name=\"getDamageRegion\"\/>\n-\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n-\t<\/Match>\n-\t<Match>\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.XmlDoubleClickStrategy\"\/>\n-\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n-\t<\/Match>\n-\t<Match>\n-\t\t<Class name=\"org.openjdk.jmc.console.agent.tabs.overview.OverviewTab\"\/>\n-\t\t<Method name=\"loadAgentListener\"\/>\n-\t\t<Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n-\t<\/Match>\n-\t\n+        <Class name=\"org.openjdk.jmc.console.agent.editor.AgentEditorUi\"\/>\n+        <Method name=\"refresh\"\/>\n+        <Bug pattern=\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"\/>\n+    <\/Match>\n+    <!-- We don't need the return value of createNewFile, if something went wrong the exception will be caught and handled -->\n+    <Match>\n+        <Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.XmlDocumentProvider\"\/>\n+        <Method name=\"doSaveDocument\"\/>\n+        <Bug pattern=\"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE\"\/>\n+    <\/Match>\n+    <!-- The double check is intentional here for synchronization, verify that we need to create\n+        the singleton before acquiring the lock. -->\n+    <Match>\n+        <Class name=\"org.openjdk.jmc.console.agent.manager.model.PresetRepositoryFactory\" \/>\n+        <Method name=\"createSingleton\"\/>\n+        <Bug pattern=\"DC_DOUBLECHECK\" \/>\n+    <\/Match>\n+    <!-- This is a false positive. Eclipse handles initialization of critical components elsewhere -->\n+    <Match>\n+        <Class name=\"org.openjdk.jmc.console.agent.editor.AgentEditor\" \/>\n+        <Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\" \/>\n+    <\/Match>\n+    <Match>\n+        <Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.NonRuleBasedDamagerRepairer\"\/>\n+        <Method name=\"endOfLineOf\"\/>\n+        <Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+    <\/Match>\n+    <Match>\n+        <Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.NonRuleBasedDamagerRepairer\"\/>\n+        <Method name=\"getDamageRegion\"\/>\n+        <Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+    <\/Match>\n+    <Match>\n+        <Class name=\"org.openjdk.jmc.console.agent.raweditor.internal.XmlDoubleClickStrategy\"\/>\n+        <Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+    <\/Match>\n+    <Match>\n+        <Class name=\"org.openjdk.jmc.console.agent.tabs.overview.OverviewTab\"\/>\n+        <Method name=\"loadAgentListener\"\/>\n+        <Bug pattern=\"UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\"\/>\n+    <\/Match>\n+\n","filename":"configuration\/spotbugs\/spotbugs-exclude.xml","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"}]}