{"files":[{"patch":"@@ -47,1 +47,4 @@\n-*.log\n\\ No newline at end of file\n+*.log\n+\n+# Ignore the generated test baseline\n+core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/baseline\/Generated_JfrRuleBaseline.xml\n\\ No newline at end of file\n","filename":".gitignore","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,5 +33,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-11\"\/>\n","filename":"agent\/.classpath","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=11\n@@ -6,1 +6,1 @@\n-org.eclipse.jdt.core.compiler.compliance=1.8\n+org.eclipse.jdt.core.compiler.compliance=11\n@@ -20,2 +20,2 @@\n-org.eclipse.jdt.core.compiler.release=disabled\n-org.eclipse.jdt.core.compiler.source=1.8\n+org.eclipse.jdt.core.compiler.release=enabled\n+org.eclipse.jdt.core.compiler.source=11\n","filename":"agent\/.settings\/org.eclipse.jdt.core.prefs","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -18,0 +18,1 @@\n+    <stringAttribute key=\"org.eclipse.jdt.launching.MODULE_NAME\" value=\"org.openjdk.jmc.agent\"\/>\n","filename":"agent\/launchers\/InstrumentMe.launch","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-\tpublic final static String VERSION = \"0.0.2\"; \/\/$NON-NLS-1$\n+\tpublic final static String VERSION = \"0.1.0\"; \/\/$NON-NLS-1$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Agent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-public interface Attribute {\n+public interface Attribute extends Convertable {\n@@ -45,2 +45,0 @@\n-\n-\tString getConverterClassName();\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Attribute.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent;\n+\n+\/**\n+ * Interface for something that can use a converter to translate a value.\n+ *\/\n+public interface Convertable {\n+\t\/**\n+\t * @return true if this is convertable, false otherwise.\n+\t *\/\n+\tdefault boolean hasConverter() {\n+\t\treturn getConverterClassName() != null;\n+\t}\n+\n+\t\/**\n+\t * The class name of the converter to use.\n+\t *\n+\t * @return the class name of the converter to use, or null, if no converter should be used.\n+\t *\/\n+\tString getConverterClassName();\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Convertable.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -41,0 +41,1 @@\n+import org.openjdk.jmc.agent.impl.AbstractConvertable;\n@@ -43,1 +44,1 @@\n-public class Field implements Attribute {\n+public class Field extends AbstractConvertable implements Attribute {\n@@ -51,1 +52,0 @@\n-\tprivate final String converterClassName;\n@@ -58,0 +58,1 @@\n+\t\tsuper(converterClassName);\n@@ -63,1 +64,0 @@\n-\t\tthis.converterClassName = converterClassName;\n@@ -101,5 +101,0 @@\n-\t@Override\n-\tpublic String getConverterClassName() {\n-\t\treturn this.converterClassName;\n-\t}\n-\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Field.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.agent.impl.AbstractConvertable;\n@@ -42,1 +43,1 @@\n-public final class Parameter implements Attribute {\n+public final class Parameter extends AbstractConvertable implements Attribute {\n@@ -51,1 +52,0 @@\n-\tprivate final String converterClassName;\n@@ -55,0 +55,1 @@\n+\t\tsuper(converterClassName);\n@@ -60,1 +61,0 @@\n-\t\tthis.converterClassName = converterClassName;\n@@ -96,4 +96,0 @@\n-\n-\tpublic String getConverterClassName() {\n-\t\treturn converterClassName;\n-\t}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Parameter.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.agent.impl.AbstractConvertable;\n@@ -42,1 +43,1 @@\n-public final class ReturnValue implements Attribute {\n+public final class ReturnValue extends AbstractConvertable implements Attribute {\n@@ -48,1 +49,0 @@\n-\tprivate final String converterClassName;\n@@ -52,0 +52,1 @@\n+\t\tsuper(converterClassName);\n@@ -56,1 +57,0 @@\n-\t\tthis.converterClassName = converterClassName;\n@@ -85,5 +85,0 @@\n-\t@Override\n-\tpublic String getConverterClassName() {\n-\t\treturn converterClassName;\n-\t}\n-\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/ReturnValue.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-import org.openjdk.jmc.agent.jfrnext.impl.JFRNextClassVisitor;\n-import org.openjdk.jmc.agent.util.InspectionClassLoader;\n+import org.openjdk.jmc.agent.jfrlegacy.impl.JFRLegacyClassVisitor;\n@@ -64,2 +63,0 @@\n-\t\t\/\/ We need a class instance for reflective inspection, so create a InspectionClassLoader if the class if not yet \n-\t\t\/\/ loaded.\n@@ -67,1 +64,1 @@\n-\t\t\t\tprotectionDomain, classBeingRedefined != null ? null : new InspectionClassLoader(loader));\n+\t\t\t\tprotectionDomain);\n@@ -72,1 +69,4 @@\n-\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n+\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain) {\n+\t\tif (transformDataList == null) {\n+\t\t\treturn null;\n+\t\t}\n@@ -76,1 +76,1 @@\n-\t\t\t\t\tprotectionDomain, inspectionClassLoader);\n+\t\t\t\t\tprotectionDomain);\n@@ -84,1 +84,1 @@\n-\t\tProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n+\t\tProtectionDomain protectionDomain) {\n@@ -86,1 +86,1 @@\n-\t\t\t\tprotectionDomain, inspectionClassLoader);\n+\t\t\t\tprotectionDomain);\n@@ -91,1 +91,1 @@\n-\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n+\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain) {\n@@ -100,4 +100,3 @@\n-\t\t\t\t\t? new JFRNextClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined,\n-\t\t\t\t\t\t\tprotectionDomain, inspectionClassLoader)\n-\t\t\t\t\t: new JFRClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,\n-\t\t\t\t\t\t\tinspectionClassLoader);\n+\t\t\t\t\t? new JFRClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain)\n+\t\t\t\t\t: new JFRLegacyClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined,\n+\t\t\t\t\t\t\tprotectionDomain);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Transformer.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,2 @@\n- * The default converter used if nothing has been specified.\n+ * The default converter used if nothing has been specified on reference types. The default use is\n+ * opt-in, but it can also just be used as a converter if opted out.\n@@ -40,5 +41,2 @@\n-public final class DefaultStringConverter implements StringConverter<Object> {\n-\tprivate final static DefaultStringConverter INSTANCE = new DefaultStringConverter();\n-\n-\t@Override\n-\tpublic String convert(Object o) {\n+public final class DefaultStringConverter {\n+\tpublic static String convert(Object o) {\n@@ -47,4 +45,0 @@\n-\n-\tpublic static DefaultStringConverter getInstance() {\n-\t\treturn INSTANCE;\n-\t}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/DefaultStringConverter.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.converters;\n-\n-\/**\n- * Interface for converting an object to a double.\n- *\/\n-public interface DoubleConverter<T> {\n-\t\/**\n-\t * Converts an object to a double.\n-\t * \n-\t * @param o\n-\t *            the object to convert.\n-\t * @return the object converted to a double.\n-\t *\/\n-\tdouble convert(T o);\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/DoubleConverter.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.converters;\n+\n+import java.io.File;\n+import java.util.logging.Level;\n+\n+import org.openjdk.jmc.agent.Agent;\n+\n+\/**\n+ * A converter which converts files into their canonical path.\n+ *\/\n+public final class FileConverter {\n+\tpublic static String convert(File file) {\n+\t\tif (file == null) {\n+\t\t\treturn \"null\";\n+\t\t}\n+\t\ttry {\n+\t\t\treturn file.getCanonicalPath();\n+\t\t} catch (Throwable e) {\n+\t\t\tAgent.getLogger().log(Level.WARNING,\n+\t\t\t\t\t\"Agent failed to convert file to String, will use path. File was: \" + file.toString(), e);\n+\t\t}\n+\t\treturn file.getPath();\n+\t}\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/FileConverter.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.converters;\n-\n-\/**\n- * Interface for converting an object to a float.\n- *\/\n-public interface FloatConverter<T> {\n-\t\/**\n-\t * Converts an object to a float.\n-\t * \n-\t * @param o\n-\t *            the object to convert.\n-\t * @return the object converted to a float.\n-\t *\/\n-\tfloat convert(T o);\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/FloatConverter.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.converters;\n-\n-\/**\n- * Interface for converting an object to an int.\n- *\/\n-public interface IntConverter<T> {\n-\t\/**\n-\t * Converts an object to an int.\n-\t * \n-\t * @param o\n-\t *            the object to convert.\n-\t * @return the object converted to a int.\n-\t *\/\n-\tint convert(T o);\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/IntConverter.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.converters;\n-\n-\/**\n- * Interface for converting an object to a long.\n- *\/\n-public interface LongConverter<T> {\n-\t\/**\n-\t * Converts an object to a long.\n-\t * \n-\t * @param o\n-\t *            the object to convert.\n-\t * @return the object converted to a long.\n-\t *\/\n-\tlong convert(T o);\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/LongConverter.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.converters;\n-\n-\/**\n- * Interface for converting objects to Strings.\n- *\/\n-public interface StringConverter<T> {\n-\t\/**\n-\t * Converts an object to a String.\n-\t * \n-\t * @param o\n-\t *            the object to convert.\n-\t * @return the object converted to a String.\n-\t *\/\n-\tString convert(T o);\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/StringConverter.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,6 @@\n- * This package contains converter interfaces and implementations. A converter will convert an\n- * object into one of the types that the recorder can record. Note that the converter will be called\n- * from the event site, so make sure your code performs. If your converter has a static getInstance\n- * method, it will be assumed that your converter is thread safe, and no converter field will be\n- * generated into the event class - the singleton will be used instead.\n+ * This package contains converter implementations. A converter will convert an object into one of\n+ * the types that the recorder can record. Note that the converter will be called from the event\n+ * site, so make sure your code performs and that no exceptions can escape. For a converter to\n+ * function, it must contain a static method named convert, and take as a single argument of the\n+ * type of the parameter\/return value\/field it is supposed to convert. It must return one of the JFR\n+ * supported field types.\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/converters\/package-info.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.impl;\n+\n+import org.openjdk.jmc.agent.Convertable;\n+\n+public abstract class AbstractConvertable implements Convertable {\n+\tprivate final String converterClassName;\n+\n+\tpublic AbstractConvertable(String converterClassName) {\n+\t\tthis.converterClassName = converterClassName;\n+\t}\n+\n+\t@Override\n+\tpublic String getConverterClassName() {\n+\t\treturn converterClassName;\n+\t}\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/impl\/AbstractConvertable.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -69,0 +69,1 @@\n+import org.openjdk.jmc.agent.Agent;\n@@ -190,1 +191,1 @@\n-\t\t\tSystem.err.println(\"Encountered probe without associated class! Check probe definitions!\"); \/\/$NON-NLS-1$\n+\t\t\tAgent.getLogger().warning(\"Encountered probe without associated class! Check probe definitions!\"); \/\/$NON-NLS-1$\n@@ -194,1 +195,1 @@\n-\t\t\tSystem.err.println(\"Encountered probe without associated id! Check probe definitions!\"); \/\/$NON-NLS-1$\n+\t\t\tAgent.getLogger().warning(\"Encountered probe without associated id! Check probe definitions!\"); \/\/$NON-NLS-1$\n@@ -204,2 +205,2 @@\n-\t\t\t\t\tSystem.err.println(\"Encountered probe with an event class name that already exists. \"\n-\t\t\t\t\t\t\t+ \"Check probe definitions!\"); \/\/$NON-NLS-1$\n+\t\t\t\t\tAgent.getLogger().warning(\"Encountered probe with an event class name that already exists: \"\n+\t\t\t\t\t\t\t+ tdEventClassName + \"Check probe definitions!\"); \/\/$NON-NLS-1$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/impl\/DefaultTransformRegistry.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.impl;\n+\n+import java.lang.reflect.Method;\n+\n+import org.openjdk.jmc.agent.Agent;\n+import org.openjdk.jmc.agent.Convertable;\n+\n+public class ResolvedConvertable extends AbstractConvertable implements Convertable {\n+\tprivate final static String CONVERTER_METHOD = \"convert\";\n+\tprivate final Class<?> converterClass;\n+\tprivate final Method converterMethod;\n+\n+\tpublic ResolvedConvertable(String converterClassName) {\n+\t\tsuper(converterClassName);\n+\t\tClass<?> tmpClass = null;\n+\t\ttry {\n+\t\t\tif (converterClassName != null) {\n+\t\t\t\ttmpClass = Class.forName(converterClassName);\n+\t\t\t}\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\tAgent.getLogger().severe(\"Failed to load specified converter class \" + converterClassName\n+\t\t\t\t\t+ \" - will not use that converter!\");\n+\t\t}\n+\t\tthis.converterClass = tmpClass;\n+\t\tthis.converterMethod = getConvertMethod(tmpClass);\n+\t}\n+\n+\tpublic Class<?> getConverterClass() {\n+\t\treturn converterClass;\n+\t}\n+\n+\tpublic Method getConverterMethod() {\n+\t\treturn converterMethod;\n+\t}\n+\n+\tprivate static Method getConvertMethod(Class<?> converterClass) {\n+\t\tif (converterClass == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tfor (Method m : converterClass.getDeclaredMethods()) {\n+\t\t\tif (CONVERTER_METHOD.equals(m.getName())) {\n+\t\t\t\treturn m;\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"Resolved \" + getConverterClassName() + \":\\nClass: \" + converterClass.getCanonicalName() + \"\\nMethod: \"\n+\t\t\t\t+ getConverterMethod();\n+\t}\n+\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/impl\/ResolvedConvertable.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -46,0 +46,1 @@\n+import org.openjdk.jmc.agent.Convertable;\n@@ -233,1 +234,1 @@\n-\tpublic boolean isAllowedFieldType(Type type) {\n+\tpublic boolean isAllowedEventFieldType(Convertable convertable, Type type) {\n@@ -237,0 +238,4 @@\n+\t\t\/\/ FIXME: Add better validation, such as checking the class is available\n+\t\tif (isAllowConverter() && convertable.hasConverter()) {\n+\t\t\treturn true;\n+\t\t}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/JFRTransformDescriptor.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.lang.reflect.Method;\n@@ -47,1 +48,5 @@\n-public class JFRClassVisitor extends ClassVisitor implements Opcodes {\n+\/**\n+ * This class visits a class to be instrumented, discovers methods to be visited and visits them. It\n+ * will also kick off the generation of the event class and register the created event class.\n+ *\/\n+public class JFRClassVisitor extends ClassVisitor {\n@@ -54,2 +59,1 @@\n-\t\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain,\n-\t\t\tInspectionClassLoader inspectionClassLoader) {\n+\t\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain) {\n@@ -62,0 +66,2 @@\n+\t\t\tInspectionClassLoader inspectionClassLoader = classBeingRedefined != null ? null\n+\t\t\t\t\t: new InspectionClassLoader(definingClassLoader);\n@@ -83,3 +89,2 @@\n-\t\t\tClass<?> c = generateEventClass();\n-\t\t\tAgent.getLogger().log(Level.FINE, \"Generated \" + c);\n-\t\t} catch (Throwable t) {\n+\t\t\treflectiveRegister(generateEventClass());\n+\t\t} catch (Exception e) {\n@@ -87,1 +92,1 @@\n-\t\t\t\t\tt);\n+\t\t\t\t\te);\n@@ -93,1 +98,0 @@\n-\n@@ -97,0 +101,7 @@\n+\t\/\/ NOTE: multi-release jars should let us compile against jdk9 and do a direct call here\n+\tprivate void reflectiveRegister(Class<?> generateEventClass) throws Exception {\n+\t\tClass<?> jfr = Class.forName(\"jdk.jfr.FlightRecorder\"); \/\/$NON-NLS-1$\n+\t\tMethod registerMethod = jfr.getDeclaredMethod(\"register\", Class.class); \/\/$NON-NLS-1$\n+\t\tregisterMethod.invoke(null, generateEventClass);\n+\t}\n+\n@@ -102,1 +113,0 @@\n-\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFRClassVisitor.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import org.openjdk.jmc.agent.Agent;\n@@ -45,1 +46,0 @@\n-import org.openjdk.jmc.agent.Field;\n@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.agent.Field;\n@@ -48,0 +49,1 @@\n+import org.openjdk.jmc.agent.impl.ResolvedConvertable;\n@@ -52,0 +54,4 @@\n+\/**\n+ * This class is responsible for generating the JFR event class described by the transform\n+ * descriptor.\n+ *\/\n@@ -53,13 +59,2 @@\n-\tprivate static final String CLASS_NAME_INSTANT_EVENT = \"com\/oracle\/jrockit\/jfr\/InstantEvent\"; \/\/$NON-NLS-1$\n-\tprivate static final String CLASS_NAME_DURATION_EVENT = \"com\/oracle\/jrockit\/jfr\/DurationEvent\"; \/\/$NON-NLS-1$\n-\tprivate static final String CLASS_NAME_TIMED_EVENT = \"com\/oracle\/jrockit\/jfr\/TimedEvent\"; \/\/$NON-NLS-1$\n-\n-\t\/**\n-\t * Generates an event class.\n-\t * \n-\t * @param td\n-\t *            the transform descriptor describing the transform.\n-\t * @return returns the byte code for the generated class.\n-\t * @throws Exception\n-\t *             if the event class could not be generated.\n-\t *\/\n+\tprivate static final String CLASS_EVENT = \"jdk\/jfr\/Event\"; \/\/$NON-NLS-1$\n+\n@@ -68,3 +63,2 @@\n-\t\t\/\/ TODO: Add support for different locations\n-\t\tcw.visit(Opcodes.V1_7, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, td.getEventClassName(), null,\n-\t\t\t\tgetEventTypeName(JFREventType.TIMED), null);\n+\t\t\/\/ FIXME: Perhaps switch to Opcodes V9 when there is one.\n+\t\tcw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, td.getEventClassName(), null, CLASS_EVENT, null);\n@@ -76,1 +70,0 @@\n-\t\tgenerateTokenField(cw);\n@@ -78,1 +71,0 @@\n-\t\tgenerateClinit(cw, td.getEventClassName(), parameterizedClassName);\n@@ -81,1 +73,0 @@\n-\n@@ -101,1 +92,1 @@\n-\t\tif (!td.isAllowedFieldType(type)) {\n+\t\tif (!td.isAllowedEventFieldType(attribute, type)) {\n@@ -103,1 +94,1 @@\n-\t\t\t\t\t.warning(\"Skipped generating field in event class for parameter \" + attribute + \" and type \" + type \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t\t\t.warning(\"Skipped generating field in event class for attribute \" + attribute + \" and type \" + type \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n@@ -108,1 +99,1 @@\n-\t\tString fieldType = getFieldType(type);\n+\t\tString fieldType = null;\n@@ -110,13 +101,5 @@\n-\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_PUBLIC, attribute.getFieldName(), fieldType, null, null);\n-\t\tAnnotationVisitor av = fv.visitAnnotation(\"Lcom\/oracle\/jrockit\/jfr\/ValueDefinition;\", true); \/\/$NON-NLS-1$\n-\t\tif (attribute.getName() != null) {\n-\t\t\tav.visit(\"name\", attribute.getName()); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tif (attribute.getDescription() != null) {\n-\t\t\tav.visit(\"description\", attribute.getDescription()); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tif (attribute.getContentType() != null) {\n-\t\t\tav.visitEnum(\"contentType\", \"Lcom\/oracle\/jrockit\/jfr\/ContentType;\", attribute.getContentType()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t}\n-\t\tif (attribute.getRelationKey() != null) {\n-\t\t\tav.visit(\"relationKey\", attribute.getRelationKey()); \/\/$NON-NLS-1$\n+\t\tif (attribute.hasConverter()) {\n+\t\t\tResolvedConvertable resolved = new ResolvedConvertable(attribute.getConverterClassName());\n+\t\t\tfieldType = getFieldType(Type.getType(resolved.getConverterMethod().getReturnType()));\n+\t\t} else {\n+\t\t\tfieldType = getFieldType(type);\n@@ -124,0 +107,6 @@\n+\n+\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_PROTECTED, attribute.getFieldName(), fieldType, null, null);\n+\n+\t\t\/\/ Name\n+\t\tAnnotationVisitor av = fv.visitAnnotation(\"Ljdk\/jfr\/Label;\", true);\n+\t\tav.visit(\"value\", attribute.getName());\n@@ -125,0 +114,20 @@\n+\n+\t\t\/\/ Description\n+\t\tav = fv.visitAnnotation(\"Ljdk\/jfr\/Description;\", true);\n+\t\tav.visit(\"value\", attribute.getDescription());\n+\t\tav.visitEnd();\n+\n+\t\t\/\/ \"ContentType\"\n+\t\t\/\/ We support the old JDK 7 style content types transparently.\n+\t\t\/\/ We also support user defined content types and a single string value annotation parameter to the annotation.\n+\t\tString contentTypeAnnotation = getContentTypeAnnotation(attribute.getContentType());\n+\t\tif (contentTypeAnnotation != null) {\n+\t\t\tString[] contentTypeAnnotationInfo = contentTypeAnnotation.split(\";\");\n+\t\t\tav = fv.visitAnnotation(contentTypeAnnotationInfo[0] + \";\", true);\n+\t\t\tif (contentTypeAnnotationInfo.length > 1) {\n+\t\t\t\tav.visit(\"value\", contentTypeAnnotationInfo[1]);\n+\t\t\t}\n+\t\t\tav.visitEnd();\n+\t\t}\n+\n+\t\t\/\/ FIXME: RelKey\n@@ -130,1 +139,1 @@\n-\t\tif (!td.isAllowedFieldType(type)) {\n+\t\tif (!td.isAllowedEventFieldType(returnValue, type)) {\n@@ -139,4 +148,23 @@\n-\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_PUBLIC, returnValue.getFieldName(), fieldType, null, null);\n-\t\tAnnotationVisitor av = fv.visitAnnotation(\"Lcom\/oracle\/jrockit\/jfr\/ValueDefinition;\", true); \/\/$NON-NLS-1$\n-\t\tif (returnValue.getName() != null) {\n-\t\t\tav.visit(\"name\", returnValue.getName()); \/\/$NON-NLS-1$\n+\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_PROTECTED, returnValue.getFieldName(), fieldType, null, null);\n+\n+\t\t\/\/ Name\n+\t\tAnnotationVisitor av = fv.visitAnnotation(\"Ljdk\/jfr\/Label;\", true);\n+\t\tav.visit(\"value\", returnValue.getName());\n+\t\tav.visitEnd();\n+\n+\t\t\/\/ Description\n+\t\tav = fv.visitAnnotation(\"Ljdk\/jfr\/Description;\", true);\n+\t\tav.visit(\"value\", returnValue.getDescription());\n+\t\tav.visitEnd();\n+\n+\t\t\/\/ \"ContentType\"\n+\t\t\/\/ We support the old JDK 7 style content types transparently.\n+\t\t\/\/ We also support user defined content types and a single string value annotation parameter to the annotation.\n+\t\tString contentTypeAnnotation = getContentTypeAnnotation(returnValue.getContentType());\n+\t\tif (contentTypeAnnotation != null) {\n+\t\t\tString[] contentTypeAnnotationInfo = contentTypeAnnotation.split(\";\");\n+\t\t\tav = fv.visitAnnotation(contentTypeAnnotationInfo[0] + \";\", true);\n+\t\t\tif (contentTypeAnnotationInfo.length > 1) {\n+\t\t\t\tav.visit(\"value\", contentTypeAnnotationInfo[1]);\n+\t\t\t}\n+\t\t\tav.visitEnd();\n@@ -144,2 +172,8 @@\n-\t\tif (returnValue.getDescription() != null) {\n-\t\t\tav.visit(\"description\", returnValue.getDescription()); \/\/$NON-NLS-1$\n+\n+\t\t\/\/ FIXME: RelKey\n+\t\tfv.visitEnd();\n+\t}\n+\n+\tprivate static String getContentTypeAnnotation(String contentType) {\n+\t\tif (contentType == null) {\n+\t\t\treturn null;\n@@ -147,2 +181,27 @@\n-\t\tif (returnValue.getContentType() != null) {\n-\t\t\tav.visitEnum(\"contentType\", \"Lcom\/oracle\/jrockit\/jfr\/ContentType;\", returnValue.getContentType()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tswitch (contentType) {\n+\t\tcase \"None\":\n+\t\t\treturn null;\n+\t\tcase \"Address\":\n+\t\t\treturn \"Ljdk\/jfr\/MemoryAddress;\";\n+\t\tcase \"Bytes\":\n+\t\t\treturn \"Ljdk\/jfr\/DataAmount;\";\n+\t\tcase \"Timestamp\":\n+\t\t\treturn \"Ljdk\/jfr\/Timestamp;\";\n+\t\tcase \"Millis\":\n+\t\t\treturn \"Ljdk\/jfr\/Timespan;\" + \"MILLISECONDS\";\n+\t\tcase \"Nanos\":\n+\t\t\treturn \"Ljdk\/jfr\/Timespan;\" + \"NANOSECONDS\";\n+\t\tcase \"Ticks\":\n+\t\t\treturn \"Ljdk\/jfr\/Timespan;\" + \"TICKS\";\n+\t\tcase \"Percentage\":\n+\t\t\treturn \"Ljdk\/jfr\/Percentage;\";\n+\n+\t\tdefault:\n+\t\t\tif (contentType.startsWith(\"L\") && contentType.endsWith(\";\")) {\n+\t\t\t\tAgent.getLogger()\n+\t\t\t\t\t\t.fine(\"Using user defined content type. Note that this only works with JDK 9 and later!\");\n+\t\t\t\treturn contentType;\n+\t\t\t}\n+\t\t\tAgent.getLogger().severe(\"Unsupported content type \" + contentType\n+\t\t\t\t\t+ \". Either use a JDK 7\/8 content type, or specify the class of the annotation specifying the content type, e.g. Ljdk\/jfr\/DataAmount;. If specifying the content type annotation explicitly, it will only work on JDK 9 or later.\");\n+\t\t\treturn null;\n@@ -150,2 +209,0 @@\n-\t\tav.visitEnd();\n-\t\tfv.visitEnd();\n@@ -158,1 +215,0 @@\n-\n@@ -162,0 +218,7 @@\n+\t\/*\n+\t * In JDK 9 the event types do not really need to be registered. There are also no tokens to\n+\t * track to optimize lookup. So no need for a clinit.\n+\t *\n+\t * That said, once the class has been defined, we will still register it, to make sure that the\n+\t * metadata is visible to all consumers, even though no event has been emitted.\n+\t *\/\n@@ -163,1 +226,1 @@\n-\t\tMethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, \"<init>\", \"()V\", null, null); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tMethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n@@ -167,1 +230,0 @@\n-\t\tmv.visitLineNumber(19, l0);\n@@ -169,3 +231,2 @@\n-\t\tmv.visitFieldInsn(Opcodes.GETSTATIC, className, \"token\", \"Lcom\/oracle\/jrockit\/jfr\/EventToken;\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tmv.visitMethodInsn(Opcodes.INVOKESPECIAL, CLASS_NAME_TIMED_EVENT, \"<init>\", \/\/$NON-NLS-1$\n-\t\t\t\t\"(Lcom\/oracle\/jrockit\/jfr\/EventToken;)V\", false); \/\/$NON-NLS-1$\n+\t\tmv.visitMethodInsn(Opcodes.INVOKESPECIAL, \"jdk\/jfr\/Event\", \"<init>\", \"()V\", false);\n+\t\tmv.visitInsn(Opcodes.RETURN);\n@@ -174,19 +235,2 @@\n-\t\tmv.visitLineNumber(20, l1);\n-\t\tmv.visitInsn(Opcodes.RETURN);\n-\t\tLabel l2 = new Label();\n-\t\tmv.visitLabel(l2);\n-\t\tmv.visitLocalVariable(\"this\", parameterizedClassName, null, l0, l2, 0); \/\/$NON-NLS-1$\n-\t\tmv.visitMaxs(2, 1);\n-\t\tmv.visitEnd();\n-\t}\n-\n-\tprivate static void generateClinit(ClassWriter cw, String className, String parameterizedClassName) {\n-\t\tMethodVisitor mv = cw.visitMethod(Opcodes.ACC_STATIC, \"<clinit>\", \"()V\", null, null); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tmv.visitCode();\n-\t\tmv.visitLdcInsn(Type.getType(parameterizedClassName));\n-\t\tmv.visitMethodInsn(Opcodes.INVOKESTATIC, JFRUtils.INAME, \"register\", \/\/$NON-NLS-1$\n-\t\t\t\t\"(Ljava\/lang\/Class;)Ljava\/lang\/Object;\", false); \/\/$NON-NLS-1$\n-\t\tmv.visitTypeInsn(Opcodes.CHECKCAST, \"com\/oracle\/jrockit\/jfr\/EventToken\");\n-\t\tmv.visitFieldInsn(Opcodes.PUTSTATIC, className, \"token\", \"Lcom\/oracle\/jrockit\/jfr\/EventToken;\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tmv.visitInsn(Opcodes.RETURN);\n-\t\tmv.visitMaxs(1, 0);\n+\t\tmv.visitLocalVariable(\"this\", parameterizedClassName, null, l0, l1, 0);\n+\t\tmv.visitMaxs(1, 1);\n@@ -196,6 +240,0 @@\n-\tprivate static void generateTokenField(ClassWriter cw) {\n-\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_FINAL + Opcodes.ACC_STATIC, \"token\", \/\/$NON-NLS-1$\n-\t\t\t\t\"Lcom\/oracle\/jrockit\/jfr\/EventToken;\", null, null); \/\/$NON-NLS-1$\n-\t\tfv.visitEnd();\n-\t}\n-\n@@ -203,8 +241,4 @@\n-\t\tAnnotationVisitor av0 = cw.visitAnnotation(\"Lcom\/oracle\/jrockit\/jfr\/EventDefinition;\", true); \/\/$NON-NLS-1$\n-\t\tav0.visit(\"name\", td.getEventName()); \/\/$NON-NLS-1$\n-\t\tav0.visit(\"description\", td.getEventDescription()); \/\/$NON-NLS-1$\n-\t\tav0.visit(\"path\", td.getEventPath()); \/\/$NON-NLS-1$\n-\t\tav0.visit(\"stacktrace\", td.isRecordStackTrace()); \/\/$NON-NLS-1$\n-\t\tav0.visit(\"thread\", true); \/\/$NON-NLS-1$\n-\t\tav0.visitEnd();\n-\t}\n+\t\t\/\/ Label\n+\t\tAnnotationVisitor av = cw.visitAnnotation(\"Ljdk\/jfr\/Label;\", true);\n+\t\tav.visit(\"value\", td.getEventName());\n+\t\tav.visitEnd();\n@@ -212,9 +246,11 @@\n-\tprivate static String getEventTypeName(JFREventType eventType) {\n-\t\tswitch (eventType) {\n-\t\tcase DURATION:\n-\t\t\treturn CLASS_NAME_DURATION_EVENT;\n-\t\tcase TIMED:\n-\t\t\treturn CLASS_NAME_TIMED_EVENT;\n-\t\tcase INSTANT:\n-\t\t\treturn CLASS_NAME_INSTANT_EVENT;\n-\t\tcase UNDEFINED:\n+\t\t\/\/ Description\n+\t\tav = cw.visitAnnotation(\"Ljdk\/jfr\/Description;\", true);\n+\t\tav.visit(\"value\", td.getEventDescription());\n+\t\tav.visitEnd();\n+\n+\t\t\/\/ Category (path)\n+\t\tString[] pathElements = td.getEventPath().split(\"\/\");\n+\t\tav = cw.visitAnnotation(\"Ljdk\/jfr\/Category;\", true);\n+\t\tAnnotationVisitor arrayVisitor = av.visitArray(\"value\");\n+\t\tfor (String pathElement : pathElements) {\n+\t\t\tarrayVisitor.visit(null, pathElement);\n@@ -222,1 +258,9 @@\n-\t\treturn CLASS_NAME_TIMED_EVENT;\n+\t\tarrayVisitor.visitEnd();\n+\t\tav.visitEnd();\n+\n+\t\t\/\/ Stacktrace on\/off\n+\t\tav = cw.visitAnnotation(\"Ljdk\/jfr\/StackTrace;\", true);\n+\t\tav.visit(\"value\", td.isRecordStackTrace());\n+\t\tav.visitEnd();\n+\n+\t\t\/\/ Note that thread is always recorded these days\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFREventClassGenerator.java","additions":140,"deletions":96,"binary":false,"changes":236,"status":"modified"},{"patch":"@@ -35,0 +35,4 @@\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n@@ -44,0 +48,1 @@\n+import org.openjdk.jmc.agent.impl.ResolvedConvertable;\n@@ -50,4 +55,0 @@\n-import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n@@ -55,1 +56,2 @@\n- * Code emitter for JFR distributed with pre-JDK 9 releases. Probably works with JRockit too. ;)\n+ * This class is responsible for transforming the method to be instrumented. Code emitter for JFR\n+ * next, i.e. the version of JFR distributed with JDK 9 and later.\n@@ -69,0 +71,1 @@\n+\tprivate Label catchBegin = new Label();\n@@ -82,1 +85,1 @@\n-\t\tthis.shouldInstrumentThrow = !transformDescriptor.isUseRethrow(); \/\/ don't instrument inner throws if rethrow is enabled\n+\t\tthis.shouldInstrumentThrow = !transformDescriptor.isUseRethrow() || !transformDescriptor.isEmitOnException(); \/\/ don't instrument inner throws if rethrow is enabled\n@@ -89,1 +92,1 @@\n-\t\tif (transformDescriptor.isUseRethrow()) {\n+\t\tif (transformDescriptor.isUseRethrow() || transformDescriptor.isEmitOnException()) {\n@@ -96,1 +99,1 @@\n-\t\tif (transformDescriptor.isUseRethrow()) {\n+\t\tif (transformDescriptor.isUseRethrow() && !transformDescriptor.isEmitOnException()) {\n@@ -105,0 +108,11 @@\n+\t\t} else if (transformDescriptor.isEmitOnException()) {\n+\t\t\tvisitLabel(tryEnd);\n+\t\t\tvisitTryCatchBlock(tryBegin, tryEnd, catchBegin, THROWABLE_BINARY_NAME);\n+\t\t\tif (!transformDescriptor.isUseRethrow()) {\n+\t\t\t\tvisitFrame(Opcodes.F_NEW, 0, null, 1, new Object[] {THROWABLE_BINARY_NAME});\n+\t\t\t\tvisitInsn(RETURN);\n+\t\t\t} else {\n+\t\t\t\tvisitFrame(Opcodes.F_NEW, 0, null, 1, new Object[] {THROWABLE_BINARY_NAME});\n+\t\t\t\tshouldInstrumentThrow = true;\n+\t\t\t\tvisitInsn(ATHROW);\n+\t\t\t}\n@@ -106,1 +120,0 @@\n-\n@@ -126,1 +139,2 @@\n-\t\t\tif (transformDescriptor.isAllowedFieldType(argumentType)) {\n+\t\t\tif (transformDescriptor.isAllowedEventFieldType(param, argumentType)) {\n+\t\t\t\t\/\/ Top of the stack is the event instance object reference.\n@@ -129,0 +143,8 @@\n+\t\t\t\tif (param.hasConverter()) {\n+\t\t\t\t\targumentType = convertify(mv, param);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (TypeUtils.shouldStringify(param, argumentType)) {\n+\t\t\t\t\t\tTypeUtils.stringify(mv);\n+\t\t\t\t\t\targumentType = TypeUtils.STRING_TYPE;\n+\t\t\t\t\t}\n+\t\t\t\t}\n@@ -141,1 +163,1 @@\n-\t\t\tif (transformDescriptor.isAllowedFieldType(refChain.getType())) {\n+\t\t\tif (transformDescriptor.isAllowedEventFieldType(field, refChain.getType())) {\n@@ -224,4 +246,0 @@\n-\t\tif (TypeUtils.shouldStringify(type)) {\n-\t\t\tTypeUtils.stringify(mv);\n-\t\t\ttype = TypeUtils.STRING_TYPE;\n-\t\t}\n@@ -231,0 +249,8 @@\n+\tprivate Type convertify(MethodVisitor mv, Attribute convertable) {\n+\t\tResolvedConvertable resolvedConvertable = new ResolvedConvertable(convertable.getConverterClassName());\n+\t\tmv.visitMethodInsn(Opcodes.INVOKESTATIC, Type.getInternalName(resolvedConvertable.getConverterClass()),\n+\t\t\t\tresolvedConvertable.getConverterMethod().getName(),\n+\t\t\t\tType.getMethodDescriptor(resolvedConvertable.getConverterMethod()), false);\n+\t\treturn Type.getType(resolvedConvertable.getConverterMethod().getReturnType());\n+\t}\n+\n@@ -233,0 +259,3 @@\n+\t\tif (transformDescriptor.isEmitOnException()) {\n+\t\t\tvisitLabel(catchBegin);\n+\t\t}\n@@ -236,1 +265,0 @@\n-\n@@ -262,2 +290,0 @@\n-\t\tmv.visitInsn(DUP);\n-\t\tmv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), \"end\", \"()V\", false); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFRMethodAdvisor.java","additions":44,"deletions":18,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.jfr.impl;\n+\n+\/**\n+ * This package contains classes related to adding JFR events for more recent versions of JFR\n+ * (Oracle JDK 9 and above, OpenJDK 8 and above).\n+ *\/\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/package-info.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.jfrlegacy.impl;\n+\n+import java.security.ProtectionDomain;\n+import java.util.logging.Level;\n+\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.openjdk.jmc.agent.Agent;\n+import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;\n+import org.openjdk.jmc.agent.util.InspectionClassLoader;\n+import org.openjdk.jmc.agent.util.TypeUtils;\n+\n+public class JFRLegacyClassVisitor extends ClassVisitor implements Opcodes {\n+\tprivate final JFRTransformDescriptor transformDescriptor;\n+\tprivate final ClassLoader definingClassLoader;\n+\tprivate final Class<?> inspectionClass;\n+\tprivate final ProtectionDomain protectionDomain;\n+\n+\tpublic JFRLegacyClassVisitor(ClassWriter cv, JFRTransformDescriptor descriptor, ClassLoader definingLoader,\n+\t\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain) {\n+\t\tsuper(Opcodes.ASM8, cv);\n+\t\tthis.transformDescriptor = descriptor;\n+\t\tthis.definingClassLoader = definingLoader;\n+\t\tthis.protectionDomain = protectionDomain;\n+\n+\t\ttry {\n+\t\t\tInspectionClassLoader inspectionClassLoader = classBeingRedefined != null ? null\n+\t\t\t\t\t: new InspectionClassLoader(definingClassLoader);\n+\t\t\tthis.inspectionClass = classBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined\n+\t\t\t\t\t: inspectionClassLoader.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\tthrow new IllegalStateException(e); \/\/ This should not happen\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n+\t\tMethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n+\t\tif (name.equals(transformDescriptor.getMethod().getName())\n+\t\t\t\t&& desc.equals(transformDescriptor.getMethod().getSignature())) {\n+\t\t\ttransformDescriptor.matchFound(true);\n+\t\t\treturn new JFRLegacyMethodAdvisor(transformDescriptor, inspectionClass, Opcodes.ASM8, mv, access, name,\n+\t\t\t\t\tdesc);\n+\t\t}\n+\t\treturn mv;\n+\t}\n+\n+\t@Override\n+\tpublic void visitEnd() {\n+\t\ttry {\n+\t\t\tClass<?> c = generateEventClass();\n+\t\t\tAgent.getLogger().log(Level.FINE, \"Generated \" + c);\n+\t\t} catch (Throwable t) {\n+\t\t\tAgent.getLogger().log(Level.SEVERE, \"Failed to generate event class for \" + transformDescriptor.toString(), \/\/$NON-NLS-1$\n+\t\t\t\t\tt);\n+\t\t}\n+\t\tif (!transformDescriptor.isMatchFound()) {\n+\t\t\tAgent.getLogger().warning(\"Method \" + transformDescriptor.getMethod().getName() + \" \"\n+\t\t\t\t\t+ transformDescriptor.getMethod().getSignature() + \" not found.\"); \/\/ $NON-NLS-1$\n+\t\t}\n+\n+\t\tsuper.visitEnd();\n+\t}\n+\n+\tprivate Class<?> generateEventClass() throws Exception {\n+\t\tbyte[] eventClass = JFRLegacyEventClassGenerator.generateEventClass(transformDescriptor, inspectionClass);\n+\t\treturn TypeUtils.defineClass(transformDescriptor.getEventClassName(), eventClass, 0, eventClass.length,\n+\t\t\t\tdefiningClassLoader, protectionDomain);\n+\t}\n+\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrlegacy\/impl\/JFRLegacyClassVisitor.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.agent.jfr.impl;\n+package org.openjdk.jmc.agent.jfrlegacy.impl;\n@@ -52,1 +52,1 @@\n-public class JFREventClassGenerator {\n+public class JFRLegacyEventClassGenerator {\n@@ -70,1 +70,1 @@\n-\t\t\t\tgetEventTypeName(JFREventType.TIMED), null);\n+\t\t\t\tgetEventTypeName(JFRLegacyEventType.TIMED), null);\n@@ -101,2 +101,2 @@\n-\t\tif (!td.isAllowedFieldType(type)) {\n-\t\t\tLogger.getLogger(JFREventClassGenerator.class.getName())\n+\t\tif (!td.isAllowedEventFieldType(attribute, type)) {\n+\t\t\tLogger.getLogger(JFRLegacyEventClassGenerator.class.getName())\n@@ -130,2 +130,2 @@\n-\t\tif (!td.isAllowedFieldType(type)) {\n-\t\t\tLogger.getLogger(JFREventClassGenerator.class.getName())\n+\t\tif (!td.isAllowedEventFieldType(returnValue, type)) {\n+\t\t\tLogger.getLogger(JFRLegacyEventClassGenerator.class.getName())\n@@ -212,1 +212,1 @@\n-\tprivate static String getEventTypeName(JFREventType eventType) {\n+\tprivate static String getEventTypeName(JFRLegacyEventType eventType) {\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrlegacy\/impl\/JFRLegacyEventClassGenerator.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFREventClassGenerator.java","status":"copied"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.agent.jfr.impl;\n+package org.openjdk.jmc.agent.jfrlegacy.impl;\n@@ -35,1 +35,1 @@\n-public enum JFREventType {\n+public enum JFRLegacyEventType {\n@@ -38,1 +38,1 @@\n-\tpublic static JFREventType parse(String string) {\n+\tpublic static JFRLegacyEventType parse(String string) {\n@@ -42,1 +42,1 @@\n-\t\tJFREventType et = JFREventType.valueOf(string.toUpperCase().trim());\n+\t\tJFRLegacyEventType et = JFRLegacyEventType.valueOf(string.toUpperCase().trim());\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrlegacy\/impl\/JFRLegacyEventType.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFREventType.java","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.agent.jfr.impl;\n+package org.openjdk.jmc.agent.jfrlegacy.impl;\n@@ -57,1 +57,1 @@\n-public class JFRMethodAdvisor extends AdviceAdapter {\n+public class JFRLegacyMethodAdvisor extends AdviceAdapter {\n@@ -72,1 +72,1 @@\n-\tprotected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api,\n+\tprotected JFRLegacyMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api,\n@@ -126,1 +126,1 @@\n-\t\t\tif (transformDescriptor.isAllowedFieldType(argumentType)) {\n+\t\t\tif (transformDescriptor.isAllowedEventFieldType(param, argumentType)) {\n@@ -141,1 +141,1 @@\n-\t\t\tif (transformDescriptor.isAllowedFieldType(refChain.getType())) {\n+\t\t\tif (transformDescriptor.isAllowedEventFieldType(field, refChain.getType())) {\n@@ -224,1 +224,1 @@\n-\t\tif (TypeUtils.shouldStringify(type)) {\n+\t\tif (TypeUtils.shouldStringify(param, type)) {\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrlegacy\/impl\/JFRLegacyMethodAdvisor.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFRMethodAdvisor.java","status":"copied"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.agent.jfr.impl;\n+package org.openjdk.jmc.agent.jfrlegacy.impl;\n@@ -42,0 +42,1 @@\n+import org.openjdk.jmc.agent.Agent;\n@@ -44,1 +45,1 @@\n- * Utility class to support JDK 7 and JDK 8 style JFR.\n+ * Utility class to support Oracle JDK 7 and JDK 8 style JFR.\n@@ -78,2 +79,2 @@\n-\t\t\tSystem.err.println(\"Failed to find the addEvent method of the producer.\");\n-\t\t\tSystem.err.println(\"No BCI generated JFR events will be available.\");\n+\t\t\tAgent.getLogger().severe(\"Failed to find the addEvent method of the producer.\");\n+\t\t\tAgent.getLogger().severe(\"No BCI generated JFR events will be available.\");\n@@ -94,1 +95,1 @@\n-\t\t\tSystem.err.println(\n+\t\t\tAgent.getLogger().severe(\n@@ -96,1 +97,1 @@\n-\t\t\tSystem.err.println(\"No BCI generated JFR events will be available.\");\n+\t\t\tAgent.getLogger().severe(\"No BCI generated JFR events will be available.\");\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrlegacy\/impl\/JFRUtils.java","additions":7,"deletions":6,"binary":false,"changes":13,"previous_filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFRUtils.java","status":"renamed"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.jfrlegacy.impl;\n+\n+\/**\n+ * This package contains classes related to adding JFR events for the early versions of JFR in the\n+ * Oracle JDK 7 and the Oracle JDK 8.\n+ *\/\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrlegacy\/impl\/package-info.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.jfrnext.impl;\n-\n-import java.lang.reflect.Method;\n-import java.security.ProtectionDomain;\n-import java.util.logging.Level;\n-\n-import org.objectweb.asm.ClassVisitor;\n-import org.objectweb.asm.ClassWriter;\n-import org.objectweb.asm.MethodVisitor;\n-import org.objectweb.asm.Opcodes;\n-import org.openjdk.jmc.agent.Agent;\n-import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;\n-import org.openjdk.jmc.agent.util.InspectionClassLoader;\n-import org.openjdk.jmc.agent.util.TypeUtils;\n-\n-public class JFRNextClassVisitor extends ClassVisitor {\n-\tprivate final JFRTransformDescriptor transformDescriptor;\n-\tprivate final ClassLoader definingClassLoader;\n-\tprivate final Class<?> inspectionClass;\n-\tprivate final ProtectionDomain protectionDomain;\n-\n-\tpublic JFRNextClassVisitor(ClassWriter cv, JFRTransformDescriptor descriptor, ClassLoader definingLoader,\n-\t\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain,\n-\t\t\tInspectionClassLoader inspectionClassLoader) {\n-\t\tsuper(Opcodes.ASM8, cv);\n-\t\tthis.transformDescriptor = descriptor;\n-\t\tthis.definingClassLoader = definingLoader;\n-\t\tthis.protectionDomain = protectionDomain;\n-\n-\t\ttry {\n-\t\t\tthis.inspectionClass = classBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined\n-\t\t\t\t\t: inspectionClassLoader.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\tthrow new IllegalStateException(e); \/\/ This should not happen\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n-\t\tMethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n-\t\tif (name.equals(transformDescriptor.getMethod().getName())\n-\t\t\t\t&& desc.equals(transformDescriptor.getMethod().getSignature())) {\n-\t\t\ttransformDescriptor.matchFound(true);\n-\t\t\treturn new JFRNextMethodAdvisor(transformDescriptor, inspectionClass, Opcodes.ASM8, mv, access, name, desc);\n-\t\t}\n-\t\treturn mv;\n-\t}\n-\n-\t@Override\n-\tpublic void visitEnd() {\n-\t\ttry {\n-\t\t\treflectiveRegister(generateEventClass());\n-\t\t} catch (Exception e) {\n-\t\t\tAgent.getLogger().log(Level.SEVERE, \"Failed to generate event class for \" + transformDescriptor.toString(), \/\/$NON-NLS-1$\n-\t\t\t\t\te);\n-\t\t}\n-\t\tif (!transformDescriptor.isMatchFound()) {\n-\t\t\tAgent.getLogger().warning(\"Method \" + transformDescriptor.getMethod().getName() + \" \"\n-\t\t\t\t\t+ transformDescriptor.getMethod().getSignature() + \" not found.\"); \/\/ $NON-NLS-1$\n-\t\t}\n-\t\tsuper.visitEnd();\n-\t}\n-\n-\t\/\/ NOTE: multi-release jars should let us compile against jdk9 and do a direct call here\n-\tprivate void reflectiveRegister(Class<?> generateEventClass) throws Exception {\n-\t\tClass<?> jfr = Class.forName(\"jdk.jfr.FlightRecorder\"); \/\/$NON-NLS-1$\n-\t\tMethod registerMethod = jfr.getDeclaredMethod(\"register\", Class.class); \/\/$NON-NLS-1$\n-\t\tregisterMethod.invoke(null, generateEventClass);\n-\t}\n-\n-\tprivate Class<?> generateEventClass() throws Exception {\n-\t\tbyte[] eventClass = JFRNextEventClassGenerator.generateEventClass(transformDescriptor, inspectionClass);\n-\t\treturn TypeUtils.defineClass(transformDescriptor.getEventClassName(), eventClass, 0, eventClass.length,\n-\t\t\t\tdefiningClassLoader, protectionDomain);\n-\t}\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrnext\/impl\/JFRNextClassVisitor.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,256 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.jfrnext.impl;\n-\n-import java.util.logging.Logger;\n-\n-import org.objectweb.asm.AnnotationVisitor;\n-import org.objectweb.asm.ClassWriter;\n-import org.objectweb.asm.FieldVisitor;\n-import org.objectweb.asm.Label;\n-import org.objectweb.asm.MethodVisitor;\n-import org.objectweb.asm.Opcodes;\n-import org.objectweb.asm.Type;\n-import org.openjdk.jmc.agent.Agent;\n-import org.openjdk.jmc.agent.Attribute;\n-import org.openjdk.jmc.agent.Parameter;\n-import org.openjdk.jmc.agent.Field;\n-import org.openjdk.jmc.agent.ReturnValue;\n-import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;\n-import org.openjdk.jmc.agent.util.TypeUtils;\n-import org.openjdk.jmc.agent.util.expression.IllegalSyntaxException;\n-\n-public class JFRNextEventClassGenerator {\n-\tprivate static final String CLASS_EVENT = \"jdk\/jfr\/Event\"; \/\/$NON-NLS-1$\n-\n-\tpublic static byte[] generateEventClass(JFRTransformDescriptor td, Class<?> classBeingRedefined) throws Exception {\n-\t\tClassWriter cw = new ClassWriter(0);\n-\t\t\/\/ FIXME: Perhaps switch to Opcodes V9 when there is one.\n-\t\tcw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, td.getEventClassName(), null, CLASS_EVENT, null);\n-\n-\t\tcw.visitSource(TypeUtils.getNamePart(td.getEventClassName()) + TypeUtils.JAVA_FILE_EXTENSION, null);\n-\n-\t\tString parameterizedClassName = TypeUtils.parameterize(td.getEventClassName());\n-\t\tgenerateClassAnnotations(cw, td);\n-\t\tgenerateAttributeFields(cw, td, classBeingRedefined);\n-\t\tgenerateInit(cw, td.getEventClassName(), parameterizedClassName);\n-\t\tcw.visitEnd();\n-\t\treturn cw.toByteArray();\n-\t}\n-\n-\tprivate static void generateAttributeFields(ClassWriter cw, JFRTransformDescriptor td, Class<?> classBeingRedefined)\n-\t\t\tthrows IllegalSyntaxException {\n-\t\tType[] args = Type.getArgumentTypes(td.getMethod().getSignature());\n-\t\tfor (Parameter param : td.getParameters()) {\n-\t\t\tcreateField(cw, td, param, args[param.getIndex()]);\n-\t\t}\n-\t\tif (td.getReturnValue() != null) {\n-\t\t\tcreateField(cw, td, Type.getReturnType(td.getMethod().getSignature()));\n-\t\t}\n-\n-\t\tfor (Field field : td.getFields()) {\n-\t\t\tcreateField(cw, td, field, field.resolveReferenceChain(classBeingRedefined).getType());\n-\t\t}\n-\t}\n-\n-\tprivate static void createField(ClassWriter cw, JFRTransformDescriptor td, Attribute attribute, Type type) {\n-\t\tif (!td.isAllowedFieldType(type)) {\n-\t\t\tLogger.getLogger(JFRNextEventClassGenerator.class.getName())\n-\t\t\t\t\t.warning(\"Skipped generating field in event class for attribute \" + attribute + \" and type \" + type \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t\t\t\t\t+ \" because of configuration settings!\"); \/\/$NON-NLS-1$\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tString fieldType = getFieldType(type);\n-\n-\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_PROTECTED, attribute.getFieldName(), fieldType, null, null);\n-\n-\t\t\/\/ Name\n-\t\tAnnotationVisitor av = fv.visitAnnotation(\"Ljdk\/jfr\/Label;\", true);\n-\t\tav.visit(\"value\", attribute.getName());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ Description\n-\t\tav = fv.visitAnnotation(\"Ljdk\/jfr\/Description;\", true);\n-\t\tav.visit(\"value\", attribute.getDescription());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ \"ContentType\"\n-\t\t\/\/ We support the old JDK 7 style content types transparently.\n-\t\t\/\/ We also support user defined content types and a single string value annotation parameter to the annotation.\n-\t\tString contentTypeAnnotation = getContentTypeAnnotation(attribute.getContentType());\n-\t\tif (contentTypeAnnotation != null) {\n-\t\t\tString[] contentTypeAnnotationInfo = contentTypeAnnotation.split(\";\");\n-\t\t\tav = fv.visitAnnotation(contentTypeAnnotationInfo[0] + \";\", true);\n-\t\t\tif (contentTypeAnnotationInfo.length > 1) {\n-\t\t\t\tav.visit(\"value\", contentTypeAnnotationInfo[1]);\n-\t\t\t}\n-\t\t\tav.visitEnd();\n-\t\t}\n-\n-\t\t\/\/ FIXME: RelKey\n-\t\tfv.visitEnd();\n-\t}\n-\n-\tprivate static void createField(ClassWriter cw, JFRTransformDescriptor td, Type type) {\n-\t\tReturnValue returnValue = td.getReturnValue();\n-\t\tif (!td.isAllowedFieldType(type)) {\n-\t\t\tLogger.getLogger(JFRNextEventClassGenerator.class.getName())\n-\t\t\t\t\t.warning(\"Skipped generating field in event class for return value \" + returnValue + \" and type \" \/\/$NON-NLS-1$\/\/$NON-NLS-2$\n-\t\t\t\t\t\t\t+ type + \" because of configuration settings!\"); \/\/$NON-NLS-1$\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tString fieldType = getFieldType(type);\n-\n-\t\tFieldVisitor fv = cw.visitField(Opcodes.ACC_PROTECTED, returnValue.getFieldName(), fieldType, null, null);\n-\n-\t\t\/\/ Name\n-\t\tAnnotationVisitor av = fv.visitAnnotation(\"Ljdk\/jfr\/Label;\", true);\n-\t\tav.visit(\"value\", returnValue.getName());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ Description\n-\t\tav = fv.visitAnnotation(\"Ljdk\/jfr\/Description;\", true);\n-\t\tav.visit(\"value\", returnValue.getDescription());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ \"ContentType\"\n-\t\t\/\/ We support the old JDK 7 style content types transparently.\n-\t\t\/\/ We also support user defined content types and a single string value annotation parameter to the annotation.\n-\t\tString contentTypeAnnotation = getContentTypeAnnotation(returnValue.getContentType());\n-\t\tif (contentTypeAnnotation != null) {\n-\t\t\tString[] contentTypeAnnotationInfo = contentTypeAnnotation.split(\";\");\n-\t\t\tav = fv.visitAnnotation(contentTypeAnnotationInfo[0] + \";\", true);\n-\t\t\tif (contentTypeAnnotationInfo.length > 1) {\n-\t\t\t\tav.visit(\"value\", contentTypeAnnotationInfo[1]);\n-\t\t\t}\n-\t\t\tav.visitEnd();\n-\t\t}\n-\n-\t\t\/\/ FIXME: RelKey\n-\t\tfv.visitEnd();\n-\t}\n-\n-\tprivate static String getContentTypeAnnotation(String contentType) {\n-\t\tif (contentType == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tswitch (contentType) {\n-\t\tcase \"None\":\n-\t\t\treturn null;\n-\t\tcase \"Address\":\n-\t\t\treturn \"Ljdk\/jfr\/MemoryAddress;\";\n-\t\tcase \"Bytes\":\n-\t\t\treturn \"Ljdk\/jfr\/DataAmount;\";\n-\t\tcase \"Timestamp\":\n-\t\t\treturn \"Ljdk\/jfr\/Timestamp;\";\n-\t\tcase \"Millis\":\n-\t\t\treturn \"Ljdk\/jfr\/Timespan;\" + \"MILLISECONDS\";\n-\t\tcase \"Nanos\":\n-\t\t\treturn \"Ljdk\/jfr\/Timespan;\" + \"NANOSECONDS\";\n-\t\tcase \"Ticks\":\n-\t\t\treturn \"Ljdk\/jfr\/Timespan;\" + \"TICKS\";\n-\t\tcase \"Percentage\":\n-\t\t\treturn \"Ljdk\/jfr\/Percentage;\";\n-\n-\t\tdefault:\n-\t\t\tif (contentType.startsWith(\"L\") && contentType.endsWith(\";\")) {\n-\t\t\t\tAgent.getLogger()\n-\t\t\t\t\t\t.fine(\"Using user defined content type. Note that this only works with JDK 9 and later!\");\n-\t\t\t\treturn contentType;\n-\t\t\t}\n-\t\t\tAgent.getLogger().severe(\"Unsupported content type \" + contentType\n-\t\t\t\t\t+ \". Either use a JDK 7\/8 content type, or specify the class of the annotation specifying the content type, e.g. Ljdk\/jfr\/DataAmount;. If specifying the content type annotation explicitly, it will only work on JDK 9 or later.\");\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tprivate static String getFieldType(Type type) {\n-\t\tif (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {\n-\t\t\treturn \"Ljava\/lang\/String;\"; \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn type.getDescriptor();\n-\t}\n-\n-\t\/*\n-\t * In JDK 9 the event types do not really need to be registered. There are also no tokens to\n-\t * track to optimize lookup. So no need for a clinit.\n-\t *\n-\t * That said, once the class has been defined, we will still register it, to make sure that the\n-\t * metadata is visible to all consumers, even though no event has been emitted.\n-\t *\/\n-\tprivate static void generateInit(ClassWriter cw, String className, String parameterizedClassName) {\n-\t\tMethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-\t\tmv.visitCode();\n-\t\tLabel l0 = new Label();\n-\t\tmv.visitLabel(l0);\n-\t\tmv.visitVarInsn(Opcodes.ALOAD, 0);\n-\t\tmv.visitMethodInsn(Opcodes.INVOKESPECIAL, \"jdk\/jfr\/Event\", \"<init>\", \"()V\", false);\n-\t\tmv.visitInsn(Opcodes.RETURN);\n-\t\tLabel l1 = new Label();\n-\t\tmv.visitLabel(l1);\n-\t\tmv.visitLocalVariable(\"this\", parameterizedClassName, null, l0, l1, 0);\n-\t\tmv.visitMaxs(1, 1);\n-\t\tmv.visitEnd();\n-\t}\n-\n-\tprivate static void generateClassAnnotations(ClassWriter cw, JFRTransformDescriptor td) {\n-\t\t\/\/ Label\n-\t\tAnnotationVisitor av = cw.visitAnnotation(\"Ljdk\/jfr\/Label;\", true);\n-\t\tav.visit(\"value\", td.getEventName());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ Description\n-\t\tav = cw.visitAnnotation(\"Ljdk\/jfr\/Description;\", true);\n-\t\tav.visit(\"value\", td.getEventDescription());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ Category (path)\n-\t\tString[] pathElements = td.getEventPath().split(\"\/\");\n-\t\tav = cw.visitAnnotation(\"Ljdk\/jfr\/Category;\", true);\n-\t\tAnnotationVisitor arrayVisitor = av.visitArray(\"value\");\n-\t\tfor (String pathElement : pathElements) {\n-\t\t\tarrayVisitor.visit(null, pathElement);\n-\t\t}\n-\t\tarrayVisitor.visitEnd();\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ Stacktrace on\/off\n-\t\tav = cw.visitAnnotation(\"Ljdk\/jfr\/StackTrace;\", true);\n-\t\tav.visit(\"value\", td.isRecordStackTrace());\n-\t\tav.visitEnd();\n-\n-\t\t\/\/ Note that thread is always recorded these days\n-\t}\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrnext\/impl\/JFRNextEventClassGenerator.java","additions":0,"deletions":256,"binary":false,"changes":256,"status":"deleted"},{"patch":"@@ -1,277 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.jfrnext.impl;\n-\n-import org.objectweb.asm.Label;\n-import org.objectweb.asm.MethodVisitor;\n-import org.objectweb.asm.Opcodes;\n-import org.objectweb.asm.Type;\n-import org.objectweb.asm.commons.AdviceAdapter;\n-import org.openjdk.jmc.agent.Field;\n-import org.openjdk.jmc.agent.Attribute;\n-import org.openjdk.jmc.agent.Parameter;\n-import org.openjdk.jmc.agent.ReturnValue;\n-import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;\n-import org.openjdk.jmc.agent.util.TypeUtils;\n-import org.openjdk.jmc.agent.util.expression.ReferenceChainElement;\n-import org.openjdk.jmc.agent.util.expression.IllegalSyntaxException;\n-import org.openjdk.jmc.agent.util.expression.ReferenceChain;\n-\n-import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-\/**\n- * Code emitter for JFR next, i.e. the version of JFR distributed with JDK 9 and later.\n- *\/\n-public class JFRNextMethodAdvisor extends AdviceAdapter {\n-\tprivate static final String THROWABLE_BINARY_NAME = \"java\/lang\/Throwable\"; \/\/$NON-NLS-1$\n-\n-\tprivate final JFRTransformDescriptor transformDescriptor;\n-\tprivate final Class<?> inspectionClass;\n-\tprivate final Type[] argumentTypesRef;\n-\tprivate final Type returnTypeRef;\n-\tprivate final Type eventType;\n-\tprivate int eventLocal = -1;\n-\n-\tprivate Label tryBegin = new Label();\n-\tprivate Label tryEnd = new Label();\n-\tprivate Label catchBegin = new Label();\n-\n-\tprivate boolean shouldInstrumentThrow;\n-\n-\tprotected JFRNextMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api,\n-\t\t\tMethodVisitor mv, int access, String name, String desc) {\n-\t\tsuper(api, mv, access, name, desc);\n-\t\tthis.transformDescriptor = transformDescriptor;\n-\t\tthis.inspectionClass = inspectionClass;\n-\t\t\/\/ These are not accessible from the super type (made private), so must save an extra reference. :\/\n-\t\tthis.argumentTypesRef = Type.getArgumentTypes(desc);\n-\t\tthis.returnTypeRef = Type.getReturnType(desc);\n-\t\tthis.eventType = Type.getObjectType(transformDescriptor.getEventClassName());\n-\n-\t\tthis.shouldInstrumentThrow = !transformDescriptor.isUseRethrow() || !transformDescriptor.isEmitOnException(); \/\/ don't instrument inner throws if rethrow is enabled\n-\t}\n-\n-\t@Override\n-\tpublic void visitCode() {\n-\t\tsuper.visitCode();\n-\n-\t\tif (transformDescriptor.isUseRethrow() || transformDescriptor.isEmitOnException()) {\n-\t\t\tvisitLabel(tryBegin);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void visitEnd() {\n-\t\tif (transformDescriptor.isUseRethrow() && !transformDescriptor.isEmitOnException()) {\n-\t\t\tvisitLabel(tryEnd);\n-\t\t\tvisitTryCatchBlock(tryBegin, tryEnd, tryEnd, THROWABLE_BINARY_NAME);\n-\n-\t\t\tvisitFrame(Opcodes.F_NEW, 0, null, 1, new Object[] {THROWABLE_BINARY_NAME});\n-\n-\t\t\t\/\/ Simply rethrow. Event commits are instrumented by onMethodExit()\n-\t\t\tshouldInstrumentThrow = true;\n-\t\t\tvisitInsn(ATHROW);\n-\t\t} else if (transformDescriptor.isEmitOnException()) {\n-\t\t\tvisitLabel(tryEnd);\n-\t\t\tvisitTryCatchBlock(tryBegin, tryEnd, catchBegin, THROWABLE_BINARY_NAME);\n-\t\t\tif (!transformDescriptor.isUseRethrow()) {\n-\t\t\t\tvisitFrame(Opcodes.F_NEW, 0, null, 1, new Object[] {THROWABLE_BINARY_NAME});\n-\t\t\t\tvisitInsn(RETURN);\n-\t\t\t} else {\n-\t\t\t\tvisitFrame(Opcodes.F_NEW, 0, null, 1, new Object[] {THROWABLE_BINARY_NAME});\n-\t\t\t\tshouldInstrumentThrow = true;\n-\t\t\t\tvisitInsn(ATHROW);\n-\t\t\t}\n-\t\t}\n-\t\tsuper.visitEnd();\n-\t}\n-\n-\t@Override\n-\tprotected void onMethodEnter() {\n-\t\ttry {\n-\t\t\tcreateEvent();\n-\t\t} catch (IllegalSyntaxException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\n-\tprivate void createEvent() throws IllegalSyntaxException {\n-\t\tmv.visitTypeInsn(NEW, transformDescriptor.getEventClassName());\n-\t\tmv.visitInsn(DUP);\n-\t\tmv.visitInsn(DUP);\n-\t\tmv.visitMethodInsn(INVOKESPECIAL, transformDescriptor.getEventClassName(), \"<init>\", \"()V\", false); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tfor (Parameter param : transformDescriptor.getParameters()) {\n-\t\t\tType argumentType = argumentTypesRef[param.getIndex()];\n-\t\t\tif (transformDescriptor.isAllowedFieldType(argumentType)) {\n-\t\t\t\tmv.visitInsn(DUP);\n-\t\t\t\tloadArg(param.getIndex());\n-\t\t\t\twriteAttribute(param, argumentType);\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (Field field : transformDescriptor.getFields()) {\n-\t\t\tReferenceChain refChain = field.resolveReferenceChain(inspectionClass).normalize();\n-\n-\t\t\tif (!refChain.isStatic() && Modifier.isStatic(getAccess())) {\n-\t\t\t\tthrow new IllegalSyntaxException(\n-\t\t\t\t\t\t\"Illegal non-static reference from a static context: \" + field.getExpression());\n-\t\t\t}\n-\n-\t\t\tif (transformDescriptor.isAllowedFieldType(refChain.getType())) {\n-\t\t\t\tmv.visitInsn(DUP);\n-\t\t\t\tloadField(refChain);\n-\t\t\t\twriteAttribute(field, refChain.getType());\n-\t\t\t}\n-\t\t}\n-\n-\t\tmv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), \"begin\", \"()V\", false); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\teventLocal = newLocal(eventType);\n-\t\tmv.visitVarInsn(ASTORE, eventLocal);\n-\t}\n-\n-\tprivate void loadField(ReferenceChain refChain) {\n-\t\tType type = refChain.getType();\n-\t\tboolean isStatic = Modifier.isStatic(getAccess());\n-\t\tLabel nullCase = new Label();\n-\t\tLabel continueCase = new Label();\n-\t\tList<Object> localVarVerifications = new ArrayList<>();\n-\t\tif (!isStatic) {\n-\t\t\tlocalVarVerifications.add(Type.getInternalName(inspectionClass)); \/\/ \"this\"\n-\t\t}\n-\t\tfor (Type argType : argumentTypesRef) {\n-\t\t\tlocalVarVerifications.add(TypeUtils.getFrameVerificationType(argType));\n-\t\t}\n-\n-\t\t\/\/ Assumes the reference chain is normalized already. See ReferenceChain.normalize()\n-\t\tList<ReferenceChainElement> refs = refChain.getReferences();\n-\t\tfor (int i = 0; i < refs.size(); i++) {\n-\t\t\tReferenceChainElement ref = refs.get(i);\n-\n-\t\t\tif (ref instanceof ReferenceChainElement.ThisReference) {\n-\t\t\t\tmv.visitVarInsn(ALOAD, 0); \/\/ load \"this\"\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (ref instanceof ReferenceChainElement.FieldReference) {\n-\t\t\t\tmv.visitFieldInsn(ref.isStatic() ? GETSTATIC : GETFIELD, ref.getMemberingType().getInternalName(),\n-\t\t\t\t\t\t((ReferenceChainElement.FieldReference) ref).getName(),\n-\t\t\t\t\t\tref.getReferencedType().getDescriptor());\n-\n-\t\t\t\t\/\/ null check for field references\n-\t\t\t\tif (i < refs.size() - 1) { \/\/ Skip null check for final reference. Null is acceptable here\n-\t\t\t\t\tmv.visitInsn(DUP);\n-\t\t\t\t\tmv.visitJumpInsn(IFNULL, nullCase);\n-\t\t\t\t}\n-\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tif (ref instanceof ReferenceChainElement.QualifiedThisReference) {\n-\t\t\t\tint suffix = ((ReferenceChainElement.QualifiedThisReference) ref).getDepth();\n-\t\t\t\tClass<?> c = ref.getMemberingClass();\n-\t\t\t\twhile (!ref.getReferencedClass().equals(c)) {\n-\t\t\t\t\tmv.visitFieldInsn(GETFIELD, Type.getType(c).getInternalName(), \"this$\" + (suffix--),\n-\t\t\t\t\t\t\tType.getType(c.getEnclosingClass()).getDescriptor());\n-\t\t\t\t\tc = c.getEnclosingClass();\n-\t\t\t\t}\n-\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\n-\t\t\tthrow new UnsupportedOperationException(\"Unsupported reference chain element type\");\n-\t\t}\n-\n-\t\t\/\/ loaded a value, jump to writing attribute\n-\t\tmv.visitJumpInsn(GOTO, continueCase);\n-\n-\t\t\/\/ null reference on path, load zero value\n-\t\tmv.visitLabel(nullCase);\n-\t\tmv.visitFrame(F_NEW, localVarVerifications.size(), localVarVerifications.toArray(), 4,\n-\t\t\t\tnew Object[] {eventType.getInternalName(), eventType.getInternalName(), eventType.getInternalName(),\n-\t\t\t\t\t\tType.getInternalName(Object.class)});\n-\t\tmv.visitInsn(POP);\n-\t\tmv.visitInsn(TypeUtils.getConstZeroOpcode(type));\n-\n-\t\t\/\/ must verify frame for jump targets\n-\t\tmv.visitLabel(continueCase);\n-\t\tmv.visitFrame(F_NEW, localVarVerifications.size(), localVarVerifications.toArray(), 4,\n-\t\t\t\tnew Object[] {eventType.getInternalName(), eventType.getInternalName(), eventType.getInternalName(),\n-\t\t\t\t\t\tTypeUtils.getFrameVerificationType(type)});\n-\t}\n-\n-\tprivate void writeAttribute(Attribute param, Type type) {\n-\t\tif (TypeUtils.shouldStringify(type)) {\n-\t\t\tTypeUtils.stringify(mv);\n-\t\t\ttype = TypeUtils.STRING_TYPE;\n-\t\t}\n-\t\tputField(Type.getObjectType(transformDescriptor.getEventClassName()), param.getFieldName(), type);\n-\t}\n-\n-\t@Override\n-\tprotected void onMethodExit(int opcode) {\n-\t\tif (transformDescriptor.isEmitOnException()) {\n-\t\t\tvisitLabel(catchBegin);\n-\t\t}\n-\t\tif (opcode == ATHROW && !shouldInstrumentThrow) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (returnTypeRef.getSort() != Type.VOID && opcode != ATHROW) {\n-\t\t\tReturnValue returnValue = transformDescriptor.getReturnValue();\n-\t\t\tif (returnValue != null) {\n-\t\t\t\temitSettingReturnParam(opcode, returnValue);\n-\t\t\t}\n-\t\t}\n-\t\tcommitEvent();\n-\t}\n-\n-\tprivate void emitSettingReturnParam(int opcode, ReturnValue returnValue) {\n-\t\tif (returnTypeRef.getSize() == 1) {\n-\t\t\tdup();\n-\t\t\tmv.visitVarInsn(ALOAD, eventLocal);\n-\t\t\tswap();\n-\t\t} else {\n-\t\t\tdup2();\n-\t\t\tmv.visitVarInsn(ALOAD, eventLocal);\n-\t\t\tdupX2();\n-\t\t\tpop();\n-\t\t}\n-\t\twriteAttribute(returnValue, returnTypeRef);\n-\t}\n-\n-\tprivate void commitEvent() {\n-\t\tmv.visitVarInsn(ALOAD, eventLocal);\n-\t\tmv.visitMethodInsn(INVOKEVIRTUAL, transformDescriptor.getEventClassName(), \"commit\", \"()V\", false); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t}\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrnext\/impl\/JFRNextMethodAdvisor.java","additions":0,"deletions":277,"binary":false,"changes":277,"status":"deleted"},{"patch":"@@ -47,1 +47,2 @@\n-import org.openjdk.jmc.agent.jfr.impl.JFRUtils;\n+import org.openjdk.jmc.agent.Convertable;\n+import org.openjdk.jmc.agent.jfrlegacy.impl.JFRUtils;\n@@ -220,1 +221,4 @@\n-\tpublic static boolean shouldStringify(Type argumentType) {\n+\tpublic static boolean shouldStringify(Convertable convertable, Type argumentType) {\n+\t\t\/*\n+\t\t * if (convertable.getConverterClassName() != null) { return false; }\n+\t\t *\/\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/TypeUtils.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+\t@SuppressWarnings(\"deprecation\")\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/expression\/ExpressionResolver.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,7 @@\n+\t\t\t<xs:element type=\"xs:boolean\" name=\"enabledefaultconverters\" minOccurs=\"0\">\n+\t\t\t\t<xs:annotation>\n+\t\t\t\t\t<xs:documentation>\n+\t\t\t\t\t\tEnables a set of pre-packaged converters, converting some commonly found types to Strings.\n+\t\t\t\t\t<\/xs:documentation>\n+\t\t\t\t<\/xs:annotation>\n+\t\t\t<\/xs:element>\n@@ -42,1 +49,1 @@\n-\t\t\t\t\t\tCauses events to only be emitted if the instrmented method throws an exception\n+\t\t\t\t\t\tCauses events to only be emitted if the instrumented method throws an exception\n","filename":"agent\/src\/main\/resources\/org\/openjdk\/jmc\/agent\/impl\/jfrprobes_schema.xsd","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -3,1 +36,0 @@\n-import org.openjdk.jmc.agent.converters.DoubleConverter;\n@@ -9,3 +41,2 @@\n-public class GurkConverterDouble implements DoubleConverter<Gurka> {\n-\t@Override\n-\tpublic double convert(Gurka gurka) {\n+public class GurkConverterDouble {\n+\tpublic static double convert(Gurka gurka) {\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/GurkConverterDouble.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -3,1 +36,0 @@\n-import org.openjdk.jmc.agent.converters.FloatConverter;\n@@ -9,3 +41,2 @@\n-public class GurkConverterFloat implements FloatConverter<Gurka> {\n-\t@Override\n-\tpublic float convert(Gurka gurka) {\n+public class GurkConverterFloat {\n+\tpublic static float convert(Gurka gurka) {\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/GurkConverterFloat.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -3,1 +36,0 @@\n-import org.openjdk.jmc.agent.converters.IntConverter;\n@@ -9,3 +41,2 @@\n-public class GurkConverterInt implements IntConverter<Gurka> {\n-\t@Override\n-\tpublic int convert(Gurka gurka) {\n+public class GurkConverterInt {\n+\tpublic static int convert(Gurka gurka) {\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/GurkConverterInt.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -3,1 +36,0 @@\n-import org.openjdk.jmc.agent.converters.LongConverter;\n@@ -9,4 +41,3 @@\n-public class GurkConverterLong implements LongConverter<Gurka> {\n-\t@Override\n-\tpublic long convert(Gurka o) {\n-\t\treturn (long) o.getID();\n+public class GurkConverterLong {\n+\tpublic static long convert(Gurka gurka) {\n+\t\treturn (long) gurka.getID();\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/GurkConverterLong.java","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -3,1 +36,0 @@\n-import org.openjdk.jmc.agent.converters.StringConverter;\n@@ -9,4 +41,3 @@\n-public class GurkConverterString implements StringConverter<Gurka> {\n-\t@Override\n-\tpublic String convert(Gurka o) {\n-\t\treturn \"StringGurka \" + o.getID();\n+public class GurkConverterString {\n+\tpublic static String convert(Gurka gurka) {\n+\t\treturn \"StringGurka \" + gurka.getID();\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/GurkConverterString.java","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Datadog, Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -3,0 +36,1 @@\n+import java.io.File;\n@@ -4,0 +38,2 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n@@ -6,0 +42,1 @@\n+import org.openjdk.jmc.agent.test.util.TestToolkit;\n@@ -27,0 +64,2 @@\n+\t\t\t\t\tprintFileToString(new File(TestToolkit.randomString().toLowerCase() + \".tmp\"));\n+\t\t\t\t\tprintUriToString(new URI(\"http:\/\/localhost:7777\/\" + TestToolkit.randomString()));\n@@ -28,0 +67,1 @@\n+\t\t\t\t} catch (URISyntaxException e) {\n@@ -34,1 +74,1 @@\n-\t\tSystem.out.println(\"String: \" + gurka);\n+\t\tSystem.out.println(\"C String: \" + gurka);\n@@ -39,1 +79,1 @@\n-\t\tSystem.out.println(\"Int: \" + gurka);\n+\t\tSystem.out.println(\"C Int: \" + gurka);\n@@ -44,1 +84,1 @@\n-\t\tSystem.out.println(\"Long: \" + gurka);\n+\t\tSystem.out.println(\"C Long: \" + gurka);\n@@ -49,1 +89,1 @@\n-\t\tSystem.out.println(\"Float: \" + gurka);\n+\t\tSystem.out.println(\"C Float: \" + gurka);\n@@ -54,1 +94,11 @@\n-\t\tSystem.out.println(\"Double: \" + gurka);\n+\t\tSystem.out.println(\"C Double: \" + gurka);\n+\t\tThread.sleep(1000);\n+\t}\n+\n+\tpublic static void printFileToString(File file) throws InterruptedException {\n+\t\tSystem.out.println(\"C File: \" + file);\n+\t\tThread.sleep(1000);\n+\t}\n+\n+\tpublic static void printUriToString(URI someUri) throws InterruptedException {\n+\t\tSystem.out.println(\"C URI: \" + someUri);\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/InstrumentMeConverter.java","additions":55,"deletions":5,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n@@ -37,0 +39,2 @@\n+import java.io.BufferedOutputStream;\n+import java.io.ByteArrayOutputStream;\n@@ -38,0 +42,1 @@\n+import java.io.PrintWriter;\n@@ -44,0 +49,1 @@\n+import org.objectweb.asm.ClassReader;\n@@ -45,0 +51,2 @@\n+import org.objectweb.asm.util.CheckClassAdapter;\n+import org.objectweb.asm.util.TraceClassVisitor;\n@@ -46,0 +54,1 @@\n+import org.openjdk.jmc.agent.Transformer;\n@@ -62,0 +71,35 @@\n+\n+\t\tTransformer jfrTransformer = new Transformer(registry);\n+\t\tbyte[] transformedClass = jfrTransformer.transform(InstrumentMeConverter.class.getClassLoader(),\n+\t\t\t\tType.getInternalName(InstrumentMeConverter.class), InstrumentMeConverter.class, null,\n+\t\t\t\tTestToolkit.getByteCode(InstrumentMeConverter.class));\n+\n+\t\tassertNotNull(transformedClass);\n+\t\tassertFalse(registry.hasPendingTransforms(Type.getInternalName(InstrumentMeConverter.class)));\n+\n+\t\tTraceClassVisitor visitor = new TraceClassVisitor(\n+\t\t\t\tnew PrintWriter(new BufferedOutputStream(new ByteArrayOutputStream())));\n+\t\tCheckClassAdapter checkAdapter = new CheckClassAdapter(visitor);\n+\t\tClassReader reader = new ClassReader(transformedClass);\n+\t\treader.accept(checkAdapter, 0);\n+\t}\n+\n+\tpublic static void main(String[] args) throws XMLStreamException, IOException, IllegalClassFormatException {\n+\t\tTransformRegistry registry = DefaultTransformRegistry.from(TestToolkit.getProbesXMLFromTemplate(getTemplate(),\n+\t\t\t\t\"testRunConverterTransforms\" + runCount.getAndIncrement())); \/\/$NON-NLS-1$\n+\n+\t\tassertTrue(registry.hasPendingTransforms(Type.getInternalName(InstrumentMeConverter.class)));\n+\n+\t\tTransformer jfrTransformer = new Transformer(registry);\n+\t\tbyte[] transformedClass = jfrTransformer.transform(InstrumentMeConverter.class.getClassLoader(),\n+\t\t\t\tType.getInternalName(InstrumentMeConverter.class), InstrumentMeConverter.class, null,\n+\t\t\t\tTestToolkit.getByteCode(InstrumentMeConverter.class));\n+\n+\t\tassertNotNull(transformedClass);\n+\t\tassertFalse(registry.hasPendingTransforms(Type.getInternalName(InstrumentMeConverter.class)));\n+\n+\t\tTraceClassVisitor visitor = new TraceClassVisitor(new PrintWriter(System.out));\n+\t\tCheckClassAdapter checkAdapter = new CheckClassAdapter(visitor);\n+\t\tClassReader reader = new ClassReader(transformedClass);\n+\t\treader.accept(checkAdapter, 0);\n+\t\tSystem.out.println(registry);\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/TestConverterTransforms.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020 Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n@@ -37,5 +37,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.io.ByteArrayInputStream;\n@@ -43,2 +38,0 @@\n-import java.lang.management.ManagementFactory;\n-import java.util.List;\n@@ -47,3 +40,0 @@\n-import javax.management.JMX;\n-import javax.management.ObjectName;\n-\n@@ -51,1 +41,0 @@\n-import org.junit.Before;\n@@ -53,7 +42,0 @@\n-import org.objectweb.asm.Type;\n-import org.openjdk.jmc.agent.TransformDescriptor;\n-import org.openjdk.jmc.agent.TransformRegistry;\n-import org.openjdk.jmc.agent.Transformer;\n-import org.openjdk.jmc.agent.impl.DefaultTransformRegistry;\n-import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;\n-import org.openjdk.jmc.agent.jmx.AgentControllerMXBean;\n@@ -73,15 +55,0 @@\n-\tprivate static final String AGENT_OBJECT_NAME = \"org.openjdk.jmc.jfr.agent:type=AgentController\"; \/\/$NON-NLS-1$\n-\tprivate static final String EVENT_ID = \"demo.jfr.test6\";\n-\tprivate static final String EVENT_NAME = \"JFR Hello World Event 1 %TEST_NAME%\";\n-\tprivate static final String EVENT_DESCRIPTION = \"JFR Hello World Event 1 %TEST_NAME%\";\n-\tprivate static final String EVENT_PATH = \"demo\/jfrhelloworldevent\";\n-\tprivate static final String EVENT_CLASS_NAME = \"org.openjdk.jmc.agent.test.TestDummy\";\n-\tprivate static final String METHOD_NAME = \"testWithoutException\";\n-\tprivate static final String METHOD_DESCRIPTOR = \"()V\";\n-\n-\tprivate static final String XML_DESCRIPTION = \"<jfragent>\" + \"<events>\" + \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n-\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\" + \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\" + \"<path>\"\n-\t\t\t+ EVENT_PATH + \"<\/path>\" + \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n-\t\t\t+ \"<method>\" + \"<name>\" + METHOD_NAME + \"<\/name>\" + \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n-\t\t\t+ \"<\/method>\" + \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\n-\n@@ -92,1 +59,1 @@\n-\t\t\tClass reproducer = c.loadClass(TestDummy.class.getName());\n+\t\t\tClass<?> reproducer = c.loadClass(TestDummy.class.getName());\n@@ -103,6 +70,0 @@\n-\tprivate void doDefineEventProbes(String xmlDescription) throws Exception {\n-\t\tAgentControllerMXBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\n-\t\t\t\tnew ObjectName(AGENT_OBJECT_NAME), AgentControllerMXBean.class, false);\n-\t\tmbean.defineEventProbes(xmlDescription);\n-\t}\n-\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestCustomClassloader.java","additions":3,"deletions":42,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-import org.openjdk.jmc.agent.jfrnext.impl.JFRNextEventClassGenerator;\n+import org.openjdk.jmc.agent.jfr.impl.JFREventClassGenerator;\n@@ -150,1 +150,1 @@\n-\t\tbyte[] eventClass = JFRNextEventClassGenerator.generateEventClass(eventTd, InstrumentMe.class);\n+\t\tbyte[] eventClass = JFREventClassGenerator.generateEventClass(eventTd, InstrumentMe.class);\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestDefineEventProbes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-\t\t\tbuilder.append(Character.toString((char) (RND.nextInt(26) + 64)));\n+\t\t\tbuilder.append(Character.toString((char) (RND.nextInt(26) + 65)));\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/util\/TestToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,32 +2,23 @@\n-<!--   \n-   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n-   \n-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-   \n-   The contents of this file are subject to the terms of either the Universal Permissive License \n-   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-   \n-   or the following license:\n-   \n-   Redistribution and use in source and binary forms, with or without modification, are permitted\n-   provided that the following conditions are met:\n-   \n-   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-   and the following disclaimer.\n-   \n-   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-   conditions and the following disclaimer in the documentation and\/or other materials provided with\n-   the distribution.\n-   \n-   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-   endorse or promote products derived from this software without specific prior written permission.\n-   \n-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--->\n+<!-- Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved. \n+\tDO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. The contents \n+\tof this file are subject to the terms of either the Universal Permissive \n+\tLicense v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl or the following \n+\tlicense: Redistribution and use in source and binary forms, with or without \n+\tmodification, are permitted provided that the following conditions are met: \n+\t1. Redistributions of source code must retain the above copyright notice, \n+\tthis list of conditions and the following disclaimer. 2. Redistributions \n+\tin binary form must reproduce the above copyright notice, this list of conditions \n+\tand the following disclaimer in the documentation and\/or other materials \n+\tprovided with the distribution. 3. Neither the name of the copyright holder \n+\tnor the names of its contributors may be used to endorse or promote products \n+\tderived from this software without specific prior written permission. THIS \n+\tSOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \n+\tANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \n+\tWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \n+\tIN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY \n+\tDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \n+\t(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; \n+\tLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND \n+\tON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n+\t(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF \n+\tTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. -->\n@@ -40,3 +31,3 @@\n-\t\t\t This will cause toString to be called for array elements and objects other \n-\t\t\t than strings, which in turn can cause trouble if the toString method is badly \n-\t\t\t implemented. Use with care. -->\n+\t\t\tThis will cause toString to be called for array elements and objects other \n+\t\t\tthan strings, which in turn can cause trouble if the toString method is badly \n+\t\t\timplemented. Use with care. -->\n@@ -44,2 +35,2 @@\n-\t\t<!-- Allows converters to be used. \n-\t\t     See the org.openjdk.jmc.agent.converters package for more information. -->\n+\t\t<!-- Allows converters to be used. See the org.openjdk.jmc.agent.converters \n+\t\t\tpackage for more information. -->\n@@ -48,1 +39,2 @@\n-\t<!-- Event probe declarations -->\n+\n+\t<!-- Converter test event probes -->\n@@ -51,2 +43,3 @@\n-\t\t\t<name>ConverterEventString-%TEST_NAME%<\/name>\n-\t\t\t<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to\n+\t\t\t<name>ConverterEventString<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\ttransform the Gurka parameter to\n@@ -61,1 +54,1 @@\n-\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/bciagent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n@@ -64,2 +57,3 @@\n-\t\t\t\t\t\t<name>Gurka Attribute<\/name>\n-\t\t\t\t\t\t<description>The one and only converted Gurk-parameter<\/description>\n+\t\t\t\t\t\t<name>String Gurka<\/name>\n+\t\t\t\t\t\t<description>The one and only converted Gurk-parameter\n+\t\t\t\t\t\t<\/description>\n@@ -67,1 +61,2 @@\n-\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterString<\/converter>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterString\n+\t\t\t\t\t\t<\/converter>\n@@ -73,2 +68,3 @@\n-\t\t\t<name>ConverterEventInt-%TEST_NAME%<\/name>\n-\t\t\t<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to an\n+\t\t\t<name>ConverterEventInt<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\ttransform the Gurka parameter to an\n@@ -79,1 +75,2 @@\n-\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter<\/class>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n@@ -82,1 +79,1 @@\n-\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/bciagent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n@@ -85,2 +82,3 @@\n-\t\t\t\t\t\t<name>Gurka Attribute<\/name>\n-\t\t\t\t\t\t<description>The one and only converted Gurk-parameter<\/description>\n+\t\t\t\t\t\t<name>Int Gurka<\/name>\n+\t\t\t\t\t\t<description>The one and only converted Gurk-parameter\n+\t\t\t\t\t\t<\/description>\n@@ -88,1 +86,2 @@\n-\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterInt<\/converter>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterInt\n+\t\t\t\t\t\t<\/converter>\n@@ -95,2 +94,3 @@\n-\t\t\t<name>ConverterEventLong-%TEST_NAME%<\/name>\n-\t\t\t<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a\n+\t\t\t<name>ConverterEventLong<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\ttransform the Gurka parameter to a\n@@ -101,1 +101,2 @@\n-\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter<\/class>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n@@ -104,1 +105,1 @@\n-\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/bciagent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n@@ -107,2 +108,3 @@\n-\t\t\t\t\t\t<name>Gurka Attribute<\/name>\n-\t\t\t\t\t\t<description>The one and only converted Gurk-parameter<\/description>\n+\t\t\t\t\t\t<name>Long Gurka<\/name>\n+\t\t\t\t\t\t<description>The one and only converted Gurk-parameter\n+\t\t\t\t\t\t<\/description>\n@@ -110,1 +112,2 @@\n-\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterLong<\/converter>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterLong\n+\t\t\t\t\t\t<\/converter>\n@@ -117,2 +120,3 @@\n-\t\t\t<name>ConverterEventFloat-%TEST_NAME%<\/name>\n-\t\t\t<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a\n+\t\t\t<name>ConverterEventFloat<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\ttransform the Gurka parameter to a\n@@ -122,1 +126,2 @@\n-\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter<\/class>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n@@ -125,1 +130,1 @@\n-\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/bciagent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n@@ -128,2 +133,3 @@\n-\t\t\t\t\t\t<name>Gurka Attribute<\/name>\n-\t\t\t\t\t\t<description>The one and only converted Gurk-parameter<\/description>\n+\t\t\t\t\t\t<name>Float Gurka<\/name>\n+\t\t\t\t\t\t<description>The one and only converted Gurk-parameter\n+\t\t\t\t\t\t<\/description>\n@@ -131,1 +137,2 @@\n-\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterFloat<\/converter>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterFloat\n+\t\t\t\t\t\t<\/converter>\n@@ -138,3 +145,4 @@\n-\t\t\t<name>ConverterEventDouble-%TEST_NAME%<\/name>\n-\t\t\t<description>Defined in the xml file and added by the agent. Should transform the Gurka parameter to a\n-\t\t\t\tfloat.\n+\t\t\t<name>ConverterEventDouble<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\ttransform the Gurka parameter to a\n+\t\t\t\tdouble.\n@@ -144,1 +152,2 @@\n-\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter<\/class>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n@@ -146,2 +155,54 @@\n-\t\t\t\t<name>printGurkaToFloat<\/name>\n-\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/bciagent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<name>printGurkaToDouble<\/name>\n+\t\t\t\t<descriptor>(Lorg\/openjdk\/jmc\/agent\/test\/Gurka;)V<\/descriptor>\n+\t\t\t\t<parameters>\n+\t\t\t\t\t<parameter index=\"0\">\n+\t\t\t\t\t\t<name>Double Gurka<\/name>\n+\t\t\t\t\t\t<description>The one and only converted Gurk-parameter\n+\t\t\t\t\t\t<\/description>\n+\t\t\t\t\t\t<contenttype>None<\/contenttype>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterDouble\n+\t\t\t\t\t\t<\/converter>\n+\t\t\t\t\t<\/parameter>\n+\t\t\t\t<\/parameters>\n+\t\t\t<\/method>\n+\t\t\t<location>WRAP<\/location>\n+\t\t<\/event>\n+\t\t<event id=\"demo.jfr.convertertest.File\">\n+\t\t\t<name>ConverterEventFile<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\ttransform the File parameter to a\n+\t\t\t\tString.\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/converterevents<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>printFileToString<\/name>\n+\t\t\t\t<descriptor>(Ljava\/io\/File;)V<\/descriptor>\n+\t\t\t\t<parameters>\n+\t\t\t\t\t<parameter index=\"0\">\n+\t\t\t\t\t\t<name>Default File<\/name>\n+\t\t\t\t\t\t<description>The converted File-parameter<\/description>\n+\t\t\t\t\t\t<contenttype>None<\/contenttype>\n+\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.FileConverter\n+\t\t\t\t\t\t<\/converter>\n+\t\t\t\t\t<\/parameter>\n+\t\t\t\t<\/parameters>\n+\t\t\t<\/method>\n+\t\t\t<location>WRAP<\/location>\n+\t\t<\/event>\n+\t\t<event id=\"demo.jfr.convertertest.URI\">\n+\t\t\t<name>ConverterEventUri<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent. Should\n+\t\t\t\ttransform the URI parameter to a\n+\t\t\t\tString using the standard toString\n+\t\t\t\tbehaviour.\n+\t\t\t<\/description>\n+\t\t\t<path>demo\/converterevents<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.converters.test.InstrumentMeConverter\n+\t\t\t<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>printUriToString<\/name>\n+\t\t\t\t<descriptor>(Ljava\/net\/URI;)V<\/descriptor>\n@@ -150,2 +211,2 @@\n-\t\t\t\t\t\t<name>Gurka Attribute<\/name>\n-\t\t\t\t\t\t<description>The one and only converted Gurk-parameter<\/description>\n+\t\t\t\t\t\t<name>String URI<\/name>\n+\t\t\t\t\t\t<description>The converted URI-parameter<\/description>\n@@ -153,1 +214,0 @@\n-\t\t\t\t\t\t<converter>org.openjdk.jmc.agent.converters.test.GurkConverterFloat<\/converter>\n","filename":"agent\/src\/test\/resources\/org\/openjdk\/jmc\/agent\/converters\/test\/jfrprobes_template.xml","additions":134,"deletions":74,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+datadog\n","filename":"configuration\/ide\/eclipse\/dictionary\/dictionary.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -52,1 +52,1 @@\n-<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -80,1 +80,1 @@\n-<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -122,1 +122,1 @@\n-<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -157,1 +157,1 @@\n-<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -213,1 +213,1 @@\n-<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -262,1 +262,1 @@\n-<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -283,1 +283,1 @@\n-<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -290,1 +290,1 @@\n-<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -318,1 +318,1 @@\n-<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -332,1 +332,1 @@\n-<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -339,1 +339,1 @@\n-<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -346,1 +346,1 @@\n-<longDescription>The Primitive To Object Conversion rule requires events to be available from the following event types: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Primitive To Object Conversion rule requires events to be available from the following event types: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -360,1 +360,1 @@\n-<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -367,1 +367,1 @@\n-<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -461,1 +461,1 @@\n-<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -468,1 +468,1 @@\n-<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -496,1 +496,1 @@\n-<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -538,1 +538,1 @@\n-<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -573,1 +573,1 @@\n-<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -587,1 +587,1 @@\n-<longDescription>The G1\/CMS Full Collection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The G1\/CMS Full Collection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -629,1 +629,1 @@\n-<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -643,1 +643,1 @@\n-<longDescription>The GCs Caused by Heap Inspection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GCs Caused by Heap Inspection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -678,1 +678,1 @@\n-<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -699,1 +699,1 @@\n-<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -706,1 +706,1 @@\n-<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -734,1 +734,1 @@\n-<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -748,1 +748,1 @@\n-<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -755,1 +755,1 @@\n-<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -762,1 +762,1 @@\n-<longDescription>The Primitive To Object Conversion rule requires events to be available from the following event types: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Primitive To Object Conversion rule requires events to be available from the following event types: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -776,1 +776,1 @@\n-<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -783,1 +783,1 @@\n-<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -797,1 +797,1 @@\n-<longDescription>The String Deduplication rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The String Deduplication rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -804,1 +804,1 @@\n-<longDescription>The GCs Caused by System.gc() rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GCs Caused by System.gc() rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -842,1 +842,1 @@\n-<longDescription>The Allocated Classes rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Allocated Classes rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -849,1 +849,1 @@\n-<longDescription>The Threads Allocating rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Threads Allocating rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -877,1 +877,1 @@\n-<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -884,1 +884,1 @@\n-<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -898,1 +898,1 @@\n-<longDescription>The Competing CPU Ratio Usage rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Competing CPU Ratio Usage rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -912,1 +912,1 @@\n-<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -954,1 +954,1 @@\n-<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -961,1 +961,1 @@\n-<longDescription>The Thrown Exceptions rule requires events to be available from the following event types: 'Exception Statistics'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Thrown Exceptions rule requires events to be available from the following event types: 'Exception Statistics'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -975,1 +975,1 @@\n-<longDescription>The Parallel Threads rule requires events to be available from the following event types: 'CPU Information', 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Parallel Threads rule requires events to be available from the following event types: 'CPU Information', 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -989,1 +989,1 @@\n-<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1003,1 +1003,1 @@\n-<longDescription>The G1\/CMS Full Collection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The G1\/CMS Full Collection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1045,1 +1045,1 @@\n-<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1059,1 +1059,1 @@\n-<longDescription>The GCs Caused by Heap Inspection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GCs Caused by Heap Inspection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1073,1 +1073,1 @@\n-<longDescription>The High JVM CPU Load rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The High JVM CPU Load rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1094,1 +1094,1 @@\n-<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1115,1 +1115,1 @@\n-<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1122,1 +1122,1 @@\n-<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1136,1 +1136,1 @@\n-<longDescription>The Method Profiling rule requires events to be available from the following event types: 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Method Profiling rule requires events to be available from the following event types: 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1150,1 +1150,1 @@\n-<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1164,1 +1164,1 @@\n-<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1171,1 +1171,1 @@\n-<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1178,1 +1178,1 @@\n-<longDescription>The Primitive To Object Conversion rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Primitive To Object Conversion rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1192,1 +1192,1 @@\n-<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1199,1 +1199,1 @@\n-<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1213,1 +1213,1 @@\n-<longDescription>The String Deduplication rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The String Deduplication rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1220,1 +1220,1 @@\n-<longDescription>The GCs Caused by System.gc() rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GCs Caused by System.gc() rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1227,1 +1227,1 @@\n-<longDescription>The TLAB Allocation Ratio rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The TLAB Allocation Ratio rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -1580,1 +1580,1 @@\n-<longDescription>The following suspicious environment variables were found in this recording: &lt;ul&gt;&lt;li&gt;P4PASSWD&lt;\/li&gt;&lt;\/ul&gt;&lt;p&gt;They may contain passwords. If you wish to keep having passwords in your environment variables, but want to be able to share recordings without also sharing the passwords, please disable the 'Initial Environment Variable' event. The following regular expression was used to exclude strings from this rule: '(passworld|passwise)'.<\/longDescription>\n+<longDescription>The following suspicious environment variables were found in this recording: &lt;ul&gt;&lt;li&gt;P4PASSWD&lt;\/li&gt;&lt;\/ul&gt;&lt;p&gt;They may contain passwords. If you wish to keep having passwords in your environment variables, but want to be able to share recordings without also sharing the passwords, please disable the 'Initial Environment Variable' event.<\/longDescription>\n@@ -3754,1 +3754,1 @@\n-<longDescription>The Allocated Classes rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Allocated Classes rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -3761,1 +3761,1 @@\n-<longDescription>The Threads Allocating rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Threads Allocating rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -3789,1 +3789,1 @@\n-<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Leak rule requires that the following event types are enabled: 'Class Load', 'Class Unload'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -3796,1 +3796,1 @@\n-<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Class Loading Pressure rule requires that the following event types are enabled: 'Class Load'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -3824,1 +3824,1 @@\n-<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -3866,1 +3866,1 @@\n-<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -3901,1 +3901,1 @@\n-<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -3957,1 +3957,1 @@\n-<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Heap Content rule requires that the following event types are enabled: 'Object Count'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4006,1 +4006,1 @@\n-<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4027,1 +4027,1 @@\n-<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Management Agent Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4034,1 +4034,1 @@\n-<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Competing Processes rule requires that the following event types are enabled: 'System Process'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4062,1 +4062,1 @@\n-<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Discouraged Recording Settings rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4076,1 +4076,1 @@\n-<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in Environment Variables rule requires that the following event types are enabled: 'Initial Environment Variable'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4083,1 +4083,1 @@\n-<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in System Properties rule requires that the following event types are enabled: 'Initial System Property'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4090,1 +4090,1 @@\n-<longDescription>The Primitive To Object Conversion rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Primitive To Object Conversion rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4104,1 +4104,1 @@\n-<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4111,1 +4111,1 @@\n-<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4139,1 +4139,1 @@\n-<longDescription>The TLAB Allocation Ratio rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The TLAB Allocation Ratio rule requires that the following event types are enabled: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;If you are using JMC to create a flight recording, then you can enable event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4281,2 +4281,2 @@\n-<shortDescription>The program generated an average of 17 errors per minute during 9\/24\/2015 10:08:14 AM – 10:09:14 AM.<\/shortDescription>\n-<longDescription>The program generated an average of 17 errors per minute during 9\/24\/2015 10:08:14 AM – 10:09:14 AM. 17 errors were thrown in total.&lt;p&gt;The most common error was 'java.lang.NoSuchMethodError', which was thrown 13 times.&lt;p&gt;Investigate the thrown errors to see if they can be avoided. Errors indicate that something went wrong with the code execution and should never be used for flow control. The following regular expression was used to exclude 381 errors from this rule: '(com.sun.el.parser.ELParser\\$LookaheadSuccess)'.<\/longDescription>\n+<shortDescription>The program generated an average of 17 errors per minute during 9\/24\/2015 12:08:14 PM – 12:09:14 PM.<\/shortDescription>\n+<longDescription>The program generated an average of 17 errors per minute during 9\/24\/2015 12:08:14 PM – 12:09:14 PM. 17 errors were thrown in total.&lt;p&gt;The most common error was 'java.lang.NoSuchMethodError', which was thrown 13 times.&lt;p&gt;Investigate the thrown errors to see if they can be avoided. Errors indicate that something went wrong with the code execution and should never be used for flow control. The following regular expression was used to exclude 381 errors from this rule: '(com.sun.el.parser.ELParser\\$LookaheadSuccess)'.<\/longDescription>\n@@ -4602,1 +4602,1 @@\n-<longDescription>The Application Halts rule requires events to be available from the following event types: 'GC Phase Pause', 'VM Operation'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Application Halts rule requires events to be available from the following event types: 'GC Phase Pause', 'VM Operation'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4637,1 +4637,1 @@\n-<longDescription>The Code Cache rule requires events to be available from the following event types: 'Code Cache Configuration', 'Code Cache Full', 'Code Cache Statistics', 'JVM Information'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Code Cache rule requires events to be available from the following event types: 'Code Cache Configuration', 'Code Cache Full', 'Code Cache Statistics', 'JVM Information'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4644,1 +4644,1 @@\n-<longDescription>The Competing CPU Ratio Usage rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Competing CPU Ratio Usage rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4651,1 +4651,1 @@\n-<longDescription>The Compressed Oops rule requires events to be available from the following event types: 'Boolean Flag', 'JVM Information', 'Unsigned Long Flag'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Compressed Oops rule requires events to be available from the following event types: 'Boolean Flag', 'JVM Information', 'Unsigned Long Flag'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4658,1 +4658,1 @@\n-<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Context Switches rule requires events to be available from the following event types: 'Thread Context Switch Rate'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4700,1 +4700,1 @@\n-<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Thrown Errors rule requires events to be available from the following event types: 'Java Error'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4707,1 +4707,1 @@\n-<longDescription>The Thrown Exceptions rule requires events to be available from the following event types: 'Exception Statistics'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Thrown Exceptions rule requires events to be available from the following event types: 'Exception Statistics'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4721,1 +4721,1 @@\n-<longDescription>The Parallel Threads rule requires events to be available from the following event types: 'CPU Information', 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Parallel Threads rule requires events to be available from the following event types: 'CPU Information', 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4735,1 +4735,1 @@\n-<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The File Write Peak Duration rule requires events to be available from the following event types: 'File Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4756,1 +4756,1 @@\n-<longDescription>The GC Freed Ratio rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GC Freed Ratio rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4777,1 +4777,1 @@\n-<longDescription>The GC Pauses rule requires events to be available from the following event types: 'GC Phase Pause'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GC Pauses rule requires events to be available from the following event types: 'GC Phase Pause'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4784,1 +4784,1 @@\n-<longDescription>The GC Stall rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GC Stall rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4791,1 +4791,1 @@\n-<longDescription>The Heap Content rule requires events to be available from the following event types: 'Object Count'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Heap Content rule requires events to be available from the following event types: 'Object Count'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4805,1 +4805,1 @@\n-<longDescription>The GCs Caused by Heap Inspection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GCs Caused by Heap Inspection rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4819,1 +4819,1 @@\n-<longDescription>The High JVM CPU Load rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The High JVM CPU Load rule requires events to be available from the following event types: 'CPU Load'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4840,1 +4840,1 @@\n-<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Java Blocking rule requires events to be available from the following event types: 'Java Monitor Blocked'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4854,1 +4854,1 @@\n-<longDescription>The Free Physical Memory rule requires events to be available from the following event types: 'Physical Memory'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Free Physical Memory rule requires events to be available from the following event types: 'Physical Memory'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4868,1 +4868,1 @@\n-<longDescription>The Competing Processes rule requires events to be available from the following event types: 'System Process'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Competing Processes rule requires events to be available from the following event types: 'System Process'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4882,1 +4882,1 @@\n-<longDescription>The Method Profiling rule requires events to be available from the following event types: 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Method Profiling rule requires events to be available from the following event types: 'Method Profiling Sample', 'Recording Setting'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4910,1 +4910,1 @@\n-<longDescription>The Passwords in Environment Variables rule requires events to be available from the following event types: 'Initial Environment Variable'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in Environment Variables rule requires events to be available from the following event types: 'Initial Environment Variable'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4917,1 +4917,1 @@\n-<longDescription>The Passwords in System Properties rule requires events to be available from the following event types: 'Initial System Property'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Passwords in System Properties rule requires events to be available from the following event types: 'Initial System Property'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4924,1 +4924,1 @@\n-<longDescription>The Primitive To Object Conversion rule requires events to be available from the following event types: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Primitive To Object Conversion rule requires events to be available from the following event types: 'Allocation in new TLAB', 'Allocation outside TLAB'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4938,1 +4938,1 @@\n-<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Read Peak Duration rule requires events to be available from the following event types: 'Socket Read'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4945,1 +4945,1 @@\n-<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The Socket Write Peak Duration rule requires events to be available from the following event types: 'Socket Write'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4959,1 +4959,1 @@\n-<longDescription>The String Deduplication rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The String Deduplication rule requires events to be available from the following event types: 'Heap Summary'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n@@ -4966,1 +4966,1 @@\n-<longDescription>The GCs Caused by System.gc() rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/9\/tools\/java.htm#JSWOR624\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n+<longDescription>The GCs Caused by System.gc() rule requires events to be available from the following event types: 'Garbage Collection'.&lt;p&gt;They were either disabled during the recording or there might not have happened anything to trigger an event. Event settings like period and threshold may also prevent some events from being emitted. If you are using JMC to create a flight recording, then you can enable and configure event types in the Start Flight Recording wizard. If you are starting the flight recording from the command line, then you can use the settings parameter of &lt;a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/tools\/unix\/java.html\"&gt;-XX:FlightRecorderOptions&lt;\/a&gt;.<\/longDescription>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/baseline\/JfrRuleBaseline.xml","additions":108,"deletions":108,"binary":false,"changes":216,"previous_filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/resources\/baseline\/JfrRuleBaseline.xml","status":"copied"}]}