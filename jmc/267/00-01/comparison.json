{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import org.openjdk.jmc.common.util.FormatToolkit;\n@@ -47,0 +48,1 @@\n+import org.openjdk.jmc.flightrecorder.ui.common.ItemHistogram;\n@@ -51,2 +53,3 @@\n- * This label provider will render {@link MethodWithFrameType} objects. It is similar to how\n- * {@link IMCMethod}'s will be rendered, but with an additional overlay version of the images. The\n+ * This label provider will render {@link MethodWithFrameType} objects. It can also be used for\n+ * {@link IMCMethod} and {@link IMCFrame}. It is similar to how {@link IMCMethod}'s will be rendered\n+ * by default in {@link ItemHistogram}, but with an additional overlay version of the images. The\n@@ -126,2 +129,1 @@\n-\t\t}\n-\t\tif (key instanceof IMCFrame) {\n+\t\t} else if (key instanceof IMCFrame) {\n@@ -133,0 +135,1 @@\n+\t\t\/\/ IMCMethod falling through to TypeHandling\n@@ -141,0 +144,17 @@\n+\t\tIMCMethod method = null;\n+\t\tIMCFrame.Type frameType = null;\n+\t\tif (key instanceof MethodWithFrameType) {\n+\t\t\tMethodWithFrameType mwft = (MethodWithFrameType) key;\n+\t\t\tmethod = mwft.getMethod();\n+\t\t\tframeType = mwft.getFrameType();\n+\t\t} else if (key instanceof IMCFrame) {\n+\t\t\tIMCFrame frame = (IMCFrame) key;\n+\t\t\tmethod = ((IMCFrame) key).getMethod();\n+\t\t\tframeType = frame.getType();\n+\t\t} else if (key instanceof IMCMethod) {\n+\t\t\tmethod = (IMCMethod) key;\n+\t\t}\n+\t\tif (method != null) {\n+\t\t\treturn FormatToolkit.getHumanReadable(method, true, false, true, true, true, false, true)\n+\t\t\t\t\t+ ((frameType != null) ? (\" [\" + frameType + \"]\") : \"\");\n+\t\t}\n@@ -144,1 +164,1 @@\n-\t\treturn key.toString();\n+\t\treturn TypeHandling.getValueString(key);\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/internal\/MethodWithFrameTypeLabelProvider.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import java.lang.reflect.Modifier;\n+\n@@ -116,0 +118,52 @@\n+\t\/**\n+\t * Get a human readable string representing a method.\n+\t *\n+\t * @param method\n+\t *            the method to get a string for\n+\t * @param showReturnValue\n+\t *            {@code true} if the return value type should be included\n+\t * @param showReturnValuePackage\n+\t *            {@code true} if the package name of the return value type should be included. Only\n+\t *            relevant if {@code showReturnValue} is {@code true}.\n+\t * @param showClassName\n+\t *            {@code true} if the class name for the method should be included\n+\t * @param showClassPackageName\n+\t *            {@code true} if the package name of the class for the method should be included.\n+\t *            Only relevant if {@code showClassName} is {@code true}.\n+\t * @param showArguments\n+\t *            {@code true} if the class names for the method arguments should be included\n+\t * @param showArgumentsPackage\n+\t *            {@code true} if the package names of the classes for the method arguments should\n+\t *            be included. Only relevant if {@code showArguments} is {@code true}.\n+\t * @param showModifiers\n+\t *            {@code true} if the modifiers for the method should be included. Only relevant if\n+\t *            {@code showModifiers} is {@code true}.\n+\t * @return a human readable string representing the method\n+\t *\/\n+\tpublic static String getHumanReadable(\n+\t\tIMCMethod method, boolean showReturnValue, boolean showReturnValuePackage, boolean showClassName,\n+\t\tboolean showClassPackageName, boolean showArguments, boolean showArgumentsPackage, boolean showModifiers) {\n+\t\tString humanReadable = \"\";\n+\t\ttry {\n+\t\t\tif (showModifiers) {\n+\t\t\t\thumanReadable += getModifiers(method) + ' ';\n+\t\t\t}\n+\t\t\thumanReadable += getHumanReadable(method, showReturnValue, showReturnValuePackage, showClassName,\n+\t\t\t\t\tshowClassPackageName, showArguments, showArgumentsPackage);\n+\t\t} catch (Exception e) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn humanReadable;\n+\t}\n+\n+\t\/**\n+\t * Returns the modifiers for a method, as a human readable string.\n+\t *\n+\t * @param method\n+\t *            the methods to get the modifiers for.\n+\t * @return the modifiers for a method, as a human readable string.\n+\t *\/\n+\tprivate static String getModifiers(IMCMethod method) {\n+\t\treturn Modifier.toString(method.getModifier());\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/util\/FormatToolkit.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}