{"files":[{"patch":"@@ -76,0 +76,2 @@\n+import org.eclipse.swt.dnd.TextTransfer;\n+import org.eclipse.swt.dnd.Transfer;\n@@ -113,0 +115,1 @@\n+import org.openjdk.jmc.flightrecorder.serializers.stacktraces.CollapsedSerializer;\n@@ -120,0 +123,1 @@\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n@@ -139,0 +143,1 @@\n+import org.openjdk.jmc.ui.misc.ClipboardManager;\n@@ -191,0 +196,14 @@\n+\tprivate class ExportCollpasedAction extends Action {\n+\t\tExportCollpasedAction() {\n+\t\t\tsuper(\"Collapsed\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tSystem.err.println(\"Export to collapsed\");\n+\t\t\tString content = CollapsedSerializer.toCollapsed(new StacktraceTreeModel(itemsToShow,\n+\t\t\t\t\tnew FrameSeparator(FrameCategorization.METHOD, false), false, currentAttribute));\n+\t\t\tClipboardManager.setClipboardContents(new Object[] {content}, new Transfer[] {TextTransfer.getInstance()});\n+\t\t}\n+\t}\n+\n@@ -694,0 +713,5 @@\n+\t\tMenuManager exportMenu = new MenuManager(\"Export stacktraces\");\n+\t\texportMenu.setRemoveAllWhenShown(true);\n+\t\texportMenu.addMenuListener((manager) -> manager.add(new ExportCollpasedAction()));\n+\t\tmenu.appendToGroup(MCContextMenuManager.GROUP_EDIT, exportMenu);\n+\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/views\/stacktrace\/StacktraceView.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -10,1 +10,2 @@\n- org.openjdk.jmc.flightrecorder.serializers.dot\n+ org.openjdk.jmc.flightrecorder.serializers.dot, \n+ org.openjdk.jmc.flightrecorder.serializers.stacktraces\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/META-INF\/MANIFEST.MF","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-#  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n-#  Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+#  Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2021, 2023, Datadog, Inc. All rights reserved.\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/build.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.serializers.stacktraces;\n+\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.AggregatableFrame;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.Node;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/**\n+ * Converts a {@link StacktraceTreeModel} to a collapsed format that can be used as input for the\n+ * flamegraph perl script from https:\/\/github.com\/brendangregg\/FlameGraph repository.\n+ *\/\n+public class CollapsedSerializer {\n+\n+\t\/**\n+\t * Serializes a {@link StacktraceTreeModel} to collasped format.\n+\t *\n+\t * @param model\n+\t *            the {@link StacktraceTreeModel} to serialize to collapsed format.\n+\t * @return a String containing the serialized model.\n+\t *\/\n+\tpublic static String toCollapsed(StacktraceTreeModel model) {\n+\t\tStringBuilder sb = new StringBuilder();\n+\t\tList<String> lines = new ArrayList<>();\n+\t\ttoCollapsed(sb, lines, model, model.getRoot());\n+\t\treturn String.join(\"\\n\", lines);\n+\t}\n+\n+\tprivate static void toCollapsed(StringBuilder sb, List<String> lines, StacktraceTreeModel model, Node node) {\n+\t\tif (!node.isRoot()) {\n+\t\t\tappendFrame(sb, node.getFrame(), node.getCumulativeWeight());\n+\t\t}\n+\t\tif (node.getChildren().isEmpty()) {\n+\t\t\tlines.add(sb.toString() + \" \" + (int) node.getCumulativeWeight());\n+\t\t\treturn;\n+\t\t}\n+\t\tfor (Node child : node.getChildren()) {\n+\t\t\ttoCollapsed(new StringBuilder(sb), lines, model, child);\n+\t\t}\n+\t}\n+\n+\tprivate static void appendFrame(StringBuilder sb, AggregatableFrame frame, double value) {\n+\t\tif (sb.length() > 0) {\n+\t\t\tsb.append(\";\");\n+\t\t}\n+\t\tsb.append(frame.getHumanReadableShortString());\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/stacktraces\/CollapsedSerializer.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Datadog, Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.serializers.stacktraces.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.IOException;\n+\n+import org.junit.Test;\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n+import org.openjdk.jmc.flightrecorder.serializers.json.test.FlameGraphJsonSerializerTest;\n+import org.openjdk.jmc.flightrecorder.serializers.stacktraces.CollapsedSerializer;\n+import org.openjdk.jmc.flightrecorder.stacktrace.FrameSeparator;\n+import org.openjdk.jmc.flightrecorder.stacktrace.tree.StacktraceTreeModel;\n+import org.openjdk.jmc.flightrecorder.test.util.RecordingToolkit;\n+import org.openjdk.jmc.test.TestToolkit;\n+\n+public class CollapsedSerializerTest {\n+\t@Test\n+\tpublic void testSerializeKnownRecording() throws IOException, CouldNotLoadRecordingException {\n+\t\tIItemCollection collection = RecordingToolkit.getFlightRecording(\n+\t\t\t\tTestToolkit.getNamedResource(FlameGraphJsonSerializerTest.class, \"recordings\", \"hotmethods.jfr\"));\n+\t\tassertNotNull(collection);\n+\t\tString collapsed = CollapsedSerializer.toCollapsed(new StacktraceTreeModel(collection,\n+\t\t\t\tnew FrameSeparator(FrameSeparator.FrameCategorization.METHOD, false)));\n+\t\tString[] lines = collapsed.split(\"\\n\");\n+\t\tassertEquals(15, lines.length);\n+\t\tassertEquals(\n+\t\t\t\t\"Thread.run();Worker.run();HolderOfUniqueValues.initialize(int);LinkedList.add(Object);LinkedList.linkLast(Object) 2068\",\n+\t\t\t\tlines[0]);\n+\t\tassertEquals(\"Thread.run();Worker.run();HolderOfUniqueValues.initialize(int);Integer.valueOf(int) 1536\",\n+\t\t\t\tlines[1]);\n+\t\tassertEquals(\n+\t\t\t\t\"HotMethods.main(String[]);BufferedInputStream.read();BufferedInputStream.fill();FileInputStream.read(byte[], int, int);FileInputStream.readBytes(byte[], int, int) 4906\",\n+\t\t\t\tlines[14]);\n+\t}\n+\n+}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.serializers.test\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/stacktraces\/test\/CollapsedSerializerTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}