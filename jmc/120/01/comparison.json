{"files":[{"patch":"@@ -14,1 +14,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\">\r\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\">\r\n","filename":"core\/org.openjdk.jmc.common\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/org.openjdk.jmc.common\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\">\r\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\">\r\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7\n-org.eclipse.jdt.core.compiler.compliance=1.7\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.compliance=1.8\n@@ -8,1 +8,1 @@\n-org.eclipse.jdt.core.compiler.source=1.7\n+org.eclipse.jdt.core.compiler.source=1.8\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/.settings\/org.eclipse.jdt.core.prefs","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -170,2 +171,2 @@\n-\t\t\tIQuantity profiledAggregate = items\n-\t\t\t\t\t.getAggregate(Aggregators.filter(Aggregators.min(JdkAttributes.UNALLOCATED),\n+\t\t\tIQuantity profiledAggregate = items.getAggregate(\n+\t\t\t\t\t(IAggregator<IQuantity, ?>) Aggregators.filter(Aggregators.min(JdkAttributes.UNALLOCATED),\n@@ -175,2 +176,2 @@\n-\t\t\t\tprofiledRatio = UnitLookup.PERCENT_UNITY.quantity(\n-\t\t\t\t\t\tprofiledAggregate.ratioTo(items.getAggregate(Aggregators.min(JdkAttributes.PROFILED_SIZE))));\n+\t\t\t\tprofiledRatio = UnitLookup.PERCENT_UNITY.quantity(profiledAggregate.ratioTo(\n+\t\t\t\t\t\titems.getAggregate((IAggregator<IQuantity, ?>) Aggregators.min(JdkAttributes.PROFILED_SIZE))));\n@@ -180,2 +181,2 @@\n-\t\t\tIQuantity nonProfiledAggregate = items\n-\t\t\t\t\t.getAggregate(Aggregators.filter(Aggregators.min(JdkAttributes.UNALLOCATED),\n+\t\t\tIQuantity nonProfiledAggregate = items.getAggregate(\n+\t\t\t\t\t(IAggregator<IQuantity, ?>) Aggregators.filter(Aggregators.min(JdkAttributes.UNALLOCATED),\n@@ -185,2 +186,2 @@\n-\t\t\t\tnonProfiledRatio = UnitLookup.PERCENT_UNITY.quantity(nonProfiledAggregate\n-\t\t\t\t\t\t.ratioTo(items.getAggregate(Aggregators.min(JdkAttributes.NON_PROFILED_SIZE))));\n+\t\t\t\tnonProfiledRatio = UnitLookup.PERCENT_UNITY.quantity(nonProfiledAggregate.ratioTo(items\n+\t\t\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.min(JdkAttributes.NON_PROFILED_SIZE))));\n@@ -190,1 +191,0 @@\n-\n@@ -192,3 +192,5 @@\n-\t\t\t\t\t.getAggregate(Aggregators.filter(Aggregators.min(JdkAttributes.UNALLOCATED),\n-\t\t\t\t\t\t\tItemFilters.matches(JdkAttributes.CODE_HEAP, NON_NMETHODS_NAME)))\n-\t\t\t\t\t.ratioTo(items.getAggregate(Aggregators.min(JdkAttributes.NON_NMETHOD_SIZE))));\n+\t\t\t\t\t.getAggregate(\n+\t\t\t\t\t\t\t(IAggregator<IQuantity, ?>) Aggregators.filter(Aggregators.min(JdkAttributes.UNALLOCATED),\n+\t\t\t\t\t\t\t\t\tItemFilters.matches(JdkAttributes.CODE_HEAP, NON_NMETHODS_NAME)))\n+\t\t\t\t\t.ratioTo(items.getAggregate(\n+\t\t\t\t\t\t\t(IAggregator<IQuantity, ?>) Aggregators.min(JdkAttributes.NON_NMETHOD_SIZE))));\n@@ -233,4 +235,4 @@\n-\t\t\tIQuantity codeCacheReserved = items\n-\t\t\t\t\t.getAggregate(Aggregators.min(JdkTypeIDs.CODE_CACHE_CONFIG, JdkAttributes.RESERVED_SIZE));\n-\t\t\tIQuantity unallocated = items\n-\t\t\t\t\t.getAggregate(Aggregators.min(JdkTypeIDs.CODE_CACHE_STATISTICS, JdkAttributes.UNALLOCATED));\n+\t\t\tIQuantity codeCacheReserved = items.getAggregate((IAggregator<IQuantity, ?>) Aggregators\n+\t\t\t\t\t.min(JdkTypeIDs.CODE_CACHE_CONFIG, JdkAttributes.RESERVED_SIZE));\n+\t\t\tIQuantity unallocated = items.getAggregate((IAggregator<IQuantity, ?>) Aggregators\n+\t\t\t\t\t.min(JdkTypeIDs.CODE_CACHE_STATISTICS, JdkAttributes.UNALLOCATED));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/compilation\/CodeCacheRule.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -119,2 +120,3 @@\n-\t\t\texcludedErrors = items.getAggregate(\n-\t\t\t\t\tAggregators.filter(Aggregators.count(), ItemFilters.and(ItemFilters.type(JdkTypeIDs.ERRORS_THROWN),\n+\n+\t\t\texcludedErrors = items.getAggregate((IAggregator<IQuantity, ?>) Aggregators.filter(Aggregators.count(),\n+\t\t\t\t\tItemFilters.and(ItemFilters.type(JdkTypeIDs.ERRORS_THROWN),\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/exceptions\/ErrorRule.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -80,1 +81,2 @@\n-\t\tIQuantity startTime = filtered.getAggregate(JdkAggregators.first(JfrAttributes.START_TIME));\n+\t\tIQuantity startTime = filtered\n+\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) JdkAggregators.first(JfrAttributes.START_TIME));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/BufferLostRule.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -93,1 +94,1 @@\n-\t\t\tIQuantity max = events.getAggregate(Aggregators.max(JfrAttributes.DURATION));\n+\t\t\tIQuantity max = events.getAggregate((IAggregator<IQuantity, ?>) Aggregators.max(JfrAttributes.DURATION));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ClassLoadingRule.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -75,1 +76,2 @@\n-\t\tSet<String> args = jvmInfoItems.getAggregate(Aggregators.distinct(JdkAttributes.JVM_ARGUMENTS));\n+\t\tSet<String> args = jvmInfoItems\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(JdkAttributes.JVM_ARGUMENTS));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/DuplicateFlagsRule.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -231,1 +231,1 @@\n-\t\t\t\t\t.getAggregate(Aggregators.max(JdkAttributes.NUMBER_OF_CORES));\n+\t\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.max(JdkAttributes.NUMBER_OF_CORES));\n@@ -289,1 +289,1 @@\n-\t\t\t\t.getAggregate(Aggregators.max(JdkAttributes.HW_THREADS));\n+\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.max(JdkAttributes.HW_THREADS));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/FewSampledThreadsRule.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -167,1 +168,1 @@\n-\t\t\t\t.getAggregate(Aggregators.max(attr(\"fastTimeConversionAdjustments\", null, \/\/$NON-NLS-1$\n+\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.max(attr(\"fastTimeConversionAdjustments\", null, \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/FlightRecordingSupportRule.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -73,1 +74,1 @@\n-\t\t\t\t.getAggregate(Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n@@ -76,1 +77,1 @@\n-\t\t\t\t.getAggregate(Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n@@ -79,1 +80,1 @@\n-\t\t\t\t.getAggregate(Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ManagementAgentRule.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -127,2 +128,2 @@\n-\t\tSet<IMCType> revokedTypes = filter(filteredTypes,\n-\t\t\t\trevokedClassesEvents.getAggregate(Aggregators.distinct(JdkAttributes.BIASED_REVOCATION_CLASS)));\n+\t\tSet<IMCType> revokedTypes = filter(filteredTypes, revokedClassesEvents.getAggregate(\n+\t\t\t\t(IAggregator<Set<IMCType>, ?>) Aggregators.distinct(JdkAttributes.BIASED_REVOCATION_CLASS)));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/latency\/BiasedLockingRevocationRule.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -357,2 +357,2 @@\n-\t\t\t\t\tSet<IQuantity> settingTimes = items.apply(settingsFilter)\n-\t\t\t\t\t\t\t.getAggregate(Aggregators.distinct(JfrAttributes.START_TIME));\n+\t\t\t\t\tSet<IQuantity> settingTimes = items.apply(settingsFilter).getAggregate(\n+\t\t\t\t\t\t\t(IAggregator<Set<IQuantity>, ?>) Aggregators.distinct(JfrAttributes.START_TIME));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/latency\/MethodProfilingRule.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -215,1 +216,2 @@\n-\t\t\t\tIQuantity lowestGcId = heapSummaryWindowItems.getAggregate(Aggregators.min(JdkAttributes.GC_ID));\n+\t\t\t\tIQuantity lowestGcId = heapSummaryWindowItems\n+\t\t\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.min(JdkAttributes.GC_ID));\n@@ -231,1 +233,2 @@\n-\t\t\t\tIQuantity highestGcId = heapSummaryWindowItems.getAggregate(Aggregators.max(JdkAttributes.GC_ID));\n+\t\t\t\tIQuantity highestGcId = heapSummaryWindowItems\n+\t\t\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.max(JdkAttributes.GC_ID));\n@@ -260,1 +263,1 @@\n-\t\t\t\t\t\t.getAggregate(Aggregators.distinct(JdkAttributes.GC_ID));\n+\t\t\t\t\t\t.getAggregate((IAggregator<Set<IQuantity>, ?>) Aggregators.distinct(JdkAttributes.GC_ID));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/GcFreedRatioRule.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -129,1 +130,1 @@\n-\t\t\t\t\t.getAggregate(JdkAggregators.first(JdkAttributes.HEAP_USED));\n+\t\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) JdkAggregators.first(JdkAttributes.HEAP_USED));\n@@ -262,1 +263,1 @@\n-\t\t\t\t.getAggregate(Aggregators.max(JdkAttributes.CLASSLOADER_LOADED_COUNT));\n+\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.max(JdkAttributes.CLASSLOADER_LOADED_COUNT));\n@@ -269,1 +270,1 @@\n-\t\t\t\t.getAggregate(Aggregators.min(JfrAttributes.START_TIME));\n+\t\t\t\t.getAggregate((IAggregator<IQuantity, ?>) Aggregators.min(JfrAttributes.START_TIME));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/IncreasingLiveSetRule.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -145,3 +146,3 @@\n-\t\tIQuantity aggregate = items\n-\t\t\t\t.getAggregate(Aggregators.filter(Aggregators.max(JdkTypeIDs.GC_PAUSE_L1, JfrAttributes.DURATION),\n-\t\t\t\t\t\tItemFilters.equals(JdkAttributes.GC_PHASE_NAME, \"References\"))); \/\/$NON-NLS-1$\n+\t\tIQuantity aggregate = items.getAggregate((IAggregator<IQuantity, ?>) Aggregators.filter(\n+\t\t\t\tAggregators.max(JdkTypeIDs.GC_PAUSE_L1, JfrAttributes.DURATION),\n+\t\t\t\tItemFilters.equals(JdkAttributes.GC_PHASE_NAME, \"References\"))); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/LongGcPauseRule.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -215,1 +216,2 @@\n-\t\tSet<IQuantity> gcIds = objectCountItems.getAggregate(Aggregators.distinct(JdkAttributes.GC_ID));\n+\t\tSet<IQuantity> gcIds = objectCountItems\n+\t\t\t\t.getAggregate((IAggregator<Set<IQuantity>, ?>) Aggregators.distinct(JdkAttributes.GC_ID));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/StringDeduplicationRule.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,2 @@\n-\t\t\tSet<?> aggregate = input.getAggregate(Aggregators.distinct(query.getGroupBy()));\n+\t\t\tIAggregator<?, ?> aggregator = Aggregators.distinct(query.getGroupBy());\n+\t\t\tSet<?> aggregate = input.getAggregate((IAggregator<Set<?>, ?>) aggregator);\n@@ -104,2 +105,1 @@\n-\t\t\t\t\t\t\/\/ get first non-null\n-\t\t\t\t\t\t\/\/ matching attribute - we're only using this for the group by today.\n+\t\t\t\t\t\t\/\/ get first non-null matching attribute - we're only using this for the group by today.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/DefaultIItemResultSet.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\">\r\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\">\r\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7\n-org.eclipse.jdt.core.compiler.compliance=1.7\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.compliance=1.8\n@@ -8,1 +8,1 @@\n-org.eclipse.jdt.core.compiler.source=1.7\n+org.eclipse.jdt.core.compiler.source=1.8\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/.settings\/org.eclipse.jdt.core.prefs","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+import org.openjdk.jmc.common.item.IAggregator;\n@@ -240,2 +241,3 @@\n-\t\treturn items.getAggregate(Aggregators.filter(Aggregators.distinctAsString(typeId, attribute),\n-\t\t\t\tItemFilters.and(ItemFilters.type(typeId), ItemFilters.matches(attribute, regexp))));\n+\t\treturn items.getAggregate(\n+\t\t\t\t(IAggregator<String, ?>) Aggregators.filter(Aggregators.distinctAsString(typeId, attribute),\n+\t\t\t\t\t\tItemFilters.and(ItemFilters.type(typeId), ItemFilters.matches(attribute, regexp))));\n@@ -662,1 +664,1 @@\n-\t\t\t\t.getAggregate(Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(JdkAttributes.ENVIRONMENT_VALUE));\n@@ -943,1 +945,2 @@\n-\t\treturn items.apply(filter).getAggregate(Aggregators.distinct(JdkAttributes.REC_SETTING_VALUE));\n+\t\treturn items.apply(filter)\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(JdkAttributes.REC_SETTING_VALUE));\n@@ -958,1 +961,2 @@\n-\t\tSet<String> names = items.getAggregate(Aggregators.distinct(\"\", TYPE_NAME_ACCESSOR_FACTORY)); \/\/$NON-NLS-1$\n+\t\tSet<String> names = items\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(\"\", TYPE_NAME_ACCESSOR_FACTORY)); \/\/$NON-NLS-1$\n@@ -1297,1 +1301,2 @@\n-\t\tSet<String> optionsValues = optionsFlag.getAggregate(Aggregators.distinct(JdkAttributes.FLAG_VALUE_TEXT));\n+\t\tSet<String> optionsValues = optionsFlag\n+\t\t\t\t.getAggregate((IAggregator<Set<String>, ?>) Aggregators.distinct(JdkAttributes.FLAG_VALUE_TEXT));\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\">\r\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\">\r\n","filename":"core\/org.openjdk.jmc.flightrecorder\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/org.openjdk.jmc.flightrecorder\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,3 +58,1 @@\n- * Java 1.7 based implementation of {@link IItemCollection} using {@link IItemIterable} iterators.\n- * This class is only intended to be used as an IItemCollection outside of the usage in\n- * {@link JfrLoaderToolkit}.\n+ * Implementation of {@link IItemCollection} using {@link IItemIterable} iterators.\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/EventCollection.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n- * A Java 1.7 compatible collection of methods used to load binary JFR data into\n- * {@link IItemCollection} implementations.\n+ * A collection of methods used to load binary JFR data into {@link IItemCollection}\n+ * implementations.\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/JfrLoaderToolkit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,2 @@\n-\t\t<maven.compiler.source>1.7<\/maven.compiler.source>\n-\t\t<maven.compiler.target>1.7<\/maven.compiler.target>\n+\t\t<maven.compiler.source>1.8<\/maven.compiler.source>\n+\t\t<maven.compiler.target>1.8<\/maven.compiler.target>\n","filename":"core\/pom.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\"\/>\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7\n-org.eclipse.jdt.core.compiler.compliance=1.7\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.compliance=1.8\n@@ -9,1 +9,1 @@\n-org.eclipse.jdt.core.compiler.source=1.7\n+org.eclipse.jdt.core.compiler.source=1.8\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/.settings\/org.eclipse.jdt.core.prefs","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\"\/>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7\n-org.eclipse.jdt.core.compiler.compliance=1.7\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.compliance=1.8\n@@ -6,1 +6,1 @@\n-org.eclipse.jdt.core.compiler.source=1.7\n+org.eclipse.jdt.core.compiler.source=1.8\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/.settings\/org.eclipse.jdt.core.prefs","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\"\/>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7\n-org.eclipse.jdt.core.compiler.compliance=1.7\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8\n+org.eclipse.jdt.core.compiler.compliance=1.8\n@@ -6,1 +6,1 @@\n-org.eclipse.jdt.core.compiler.source=1.7\n+org.eclipse.jdt.core.compiler.source=1.8\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/.settings\/org.eclipse.jdt.core.prefs","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\"\/>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-Bundle-RequiredExecutionEnvironment: JavaSE-1.7\n+Bundle-RequiredExecutionEnvironment: JavaSE-1.8\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.8\"\/>\n","filename":"core\/tests\/org.openjdk.jmc.jdp.test\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-\t\t<maven.compiler.source>1.7<\/maven.compiler.source>\n-\t\t<maven.compiler.target>1.7<\/maven.compiler.target>\n+\t\t<maven.compiler.source>1.8<\/maven.compiler.source>\n+\t\t<maven.compiler.target>1.8<\/maven.compiler.target>\n","filename":"core\/tests\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -334,2 +334,2 @@\n-\t\t\t\t\t\t\t\t\t<version>[1.8.0-40,)<\/version>\n-\t\t\t\t\t\t\t\t\t<message>Building JMC requires Java 8 version JDK 1.8.0_40 or later<\/message>\n+\t\t\t\t\t\t\t\t\t<version>[11,)<\/version>\n+\t\t\t\t\t\t\t\t\t<message>Building JMC requires Java 11 or later<\/message>\n","filename":"pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}