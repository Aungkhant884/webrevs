{"files":[{"patch":"@@ -1,1 +0,0 @@\n-@file:DependsOn(\"org.junit.jupiter:junit-jupiter:5.7.0\")\n@@ -11,0 +10,1 @@\n+import org.eclipse.jgit.revwalk.RevTree\n@@ -14,0 +14,2 @@\n+import org.eclipse.jgit.treewalk.TreeWalk\n+import org.eclipse.jgit.treewalk.filter.PathSuffixFilter\n@@ -26,1 +28,1 @@\n-run()\n+treeWalk()\n@@ -79,1 +81,1 @@\n-                            newPath = diff.newPath,\n+                            headPath = diff.newPath,\n@@ -81,1 +83,1 @@\n-                            baseBytes = getBytes(reader, diff.oldId)\n+                            baseBytes = getBytes(reader, diff.oldId),\n@@ -84,1 +86,1 @@\n-                    ADD -> Change(newPath = diff.newPath, headBytes = getBytes(reader, diff.newId))\n+                    ADD -> Change(headPath = diff.newPath, headBytes = getBytes(reader, diff.newId))\n@@ -94,1 +96,6 @@\n-class Change(val newPath: String, val headBytes: ByteArray, val baseBytes: ByteArray? = null)\n+class Change(\n+    val headPath: String,\n+    val headBytes: ByteArray,\n+    val baseBytes: ByteArray? = null,\n+    val basePath: String? = null\n+)\n@@ -111,0 +118,7 @@\n+\n+    fun endsWith(year: Int): Boolean =\n+        if (end == null) {\n+            start == year\n+        } else {\n+            end == year\n+        }\n@@ -113,1 +127,1 @@\n-data class CopyrightString(private val range: Range, private val holder: CopyrightHolders) {\n+data class CopyrightString(val range: Range, val holder: CopyrightHolders) {\n@@ -118,10 +132,6 @@\n-                val parts: List<String> = line\n-                    .split(\".\").first()\n-                    .split(\"(c)\")[1]\n-                    .split(\",\")\n-                    .map { part -> part.trim() }\n-                when (parts.size) {\n-                    2 -> CopyrightString(Range(parts[0].toInt()), CopyrightHolders.fromString(parts[1]))\n-                    3 -> CopyrightString(Range(parts[0].toInt(), parts[1].toInt()), CopyrightHolders.fromString(parts[2]))\n-                    else -> throw IllegalArgumentException()\n-                }\n+                val regex = \"\"\".*Copyright \\(c\\) (\\d{4}),(?: (\\d{4}),)? ([^.]+).*\"\"\".toRegex()\n+                val match = regex.matchEntire(line) ?: throw IllegalArgumentException(\"failed to match regex\")\n+                CopyrightString(\n+                    range = Range(match.groups[1]!!.value.toInt(), match.groups[2]?.value?.toInt()),\n+                    holder = CopyrightHolders.fromString(match.groups[3]!!.value)\n+                )\n@@ -129,1 +139,1 @@\n-                throw IllegalArgumentException(\"游리 Failed to parse: $line\", e)\n+                throw IllegalArgumentException(\"游리 Failed to parse '$line': $e\", e)\n@@ -140,1 +150,1 @@\n-class CopyrightHeader(val holders: List<CopyrightString>) {\n+data class CopyrightHeader(val holders: List<CopyrightString>) {\n@@ -142,2 +152,2 @@\n-        fun parse(file: String): CopyrightHeader {\n-            val holders = file.split(\"\\n\").mapNotNull { CopyrightString.parse(it) }\n+        fun parse(fileContents: String): CopyrightHeader {\n+            val holders = fileContents.split(\"\\n\").mapNotNull { CopyrightString.parse(it) }\n@@ -191,1 +201,1 @@\n-            val fileType = FileTypes.fromPath(change.newPath)\n+            val fileType = FileTypes.fromPath(change.headPath)\n@@ -193,1 +203,1 @@\n-                println(\"丘쀮잺 ${change.newPath}\")\n+                println(\"丘쀮잺 ${change.headPath}\")\n@@ -196,9 +206,2 @@\n-            val header = if (change.baseBytes != null) {\n-                val baseContent = String(change.baseBytes, Charsets.UTF_8)\n-                try {\n-                    CopyrightHeader.update(CopyrightHeader.parse(baseContent), year)\n-                } catch (e: Exception) {\n-                    println(\"游댮 ${change.newPath}\")\n-                    println(e.message)\n-                    return false\n-                }\n+            return if (change.baseBytes != null) {\n+                checkModifiedFile(change, year, fileType)\n@@ -206,6 +209,13 @@\n-                CopyrightHeader(\n-                    listOf(\n-                        CopyrightString(Range(year), CopyrightHolders.ORACLE),\n-                        CopyrightString(Range(year), CopyrightHolders.DATADOG)\n-                    )\n-                )\n+                checkNewFile(change, year, fileType)\n+            }\n+        }\n+\n+        private fun checkModifiedFile(change: Change, year: Int, fileType: FileTypes): Boolean {\n+            val baseContent = String(change.baseBytes!!, Charsets.UTF_8)\n+            val baseHeader = try {\n+                CopyrightHeader.parse(baseContent)\n+            } catch (e: Exception) {\n+                println(\"游리 ${change.headPath}\")\n+                println(\"Failed to parse header in base commit $change\")\n+                println(e.message)\n+                return false\n@@ -213,0 +223,1 @@\n+            val header = CopyrightHeader.update(baseHeader, year)\n@@ -214,3 +225,24 @@\n-            val expected = header.format(fileType)\n-            return if (headContent.startsWith(expected)) {\n-                println(\"游릭 ${change.newPath}\")\n+            return checkContents(change.headPath, headContent, fileType, header)\n+        }\n+\n+        private fun checkNewFile(change: Change, year: Int, fileType: FileTypes): Boolean {\n+            val headContent = String(change.headBytes, Charsets.UTF_8)\n+            return try {\n+                val header = CopyrightHeader.parse(headContent)\n+                val invalid = header.holders.filter { it.range != Range(year) }\n+                if (invalid.isNotEmpty()) throw IllegalArgumentException(\"Invalid ranges $invalid\")\n+                if (header.holders.none { it.holder == CopyrightHolders.ORACLE }) {\n+                    throw IllegalArgumentException(\"Oracle copyright missing\")\n+                }\n+                checkContents(change.headPath, headContent, fileType, header)\n+            } catch (e: Exception) {\n+                println(\"游댮 ${change.headPath}\")\n+                println(e.message)\n+                false\n+            }\n+        }\n+\n+        private fun checkContents(filePath: String, fileContent: String, fileType: FileTypes, expectedHeader: CopyrightHeader): Boolean {\n+            val expected = expectedHeader.format(fileType)\n+            return if (fileContent.startsWith(expected)) {\n+                println(\"游릭 $filePath\")\n@@ -219,1 +251,1 @@\n-                println(\"游댮 ${change.newPath}\")\n+                println(\"游댮 $filePath\")\n@@ -223,1 +255,1 @@\n-                println(headContent.substring(0, expected.length + 1))\n+                println(fileContent.substring(0, expected.length + 1))\n@@ -253,1 +285,3 @@\n-    ORACLE(\"Oracle and\/or its affiliates\"), DATADOG(\"Datadog, Inc\");\n+    ORACLE(\"Oracle and\/or its affiliates\"),\n+    DATADOG(\"Datadog, Inc\"),\n+    RED_HAT(\"Red Hat Inc\");\n@@ -262,24 +296,41 @@\n-\/\/ fun treeWalk() {\n-\/\/    val revWalk = RevWalk(repo)\n-\/\/    val lastCommitId = repo.resolve(Constants.HEAD)!!\n-\/\/    val commit: RevCommit = revWalk.parseCommit(lastCommitId)\n-\/\/\n-\/\/    val tree: RevTree = commit.tree\n-\/\/    val treeWalk = TreeWalk(repo)\n-\/\/    treeWalk.addTree(tree)\n-\/\/    treeWalk.isRecursive = true\n-\/\/\n-\/\/    println(\"starting tree walk\")\n-\/\/    treeWalk.filter = PathSuffixFilter.create(\".java\")\n-\/\/    val javaFiles = mutableListOf<Pair<String, Instant>>()\n-\/\/    while (treeWalk.next()) {\n-\/\/        git.log().addPath(treeWalk.pathString).setMaxCount(1).call().forEach {\n-\/\/            javaFiles.add(Pair(treeWalk.pathString, Instant.ofEpochSecond(it.commitTime.toLong())))\n-\/\/        }\n-\/\/        if (javaFiles.size % 10 == 0) {\n-\/\/            println(javaFiles.size)\n-\/\/            break\n-\/\/        }\n-\/\/    }\n-\/\/    println(javaFiles)\n-\/\/ }\n+fun treeWalk() {\n+    val git = Git.open(File(\".\"))\n+    val repo = git.repository!!\n+    val revWalk = RevWalk(repo)\n+    val lastCommitId = repo.resolve(Constants.HEAD)!!\n+    val commit: RevCommit = revWalk.parseCommit(lastCommitId)\n+\n+    val tree: RevTree = commit.tree\n+    val treeWalk = TreeWalk(repo)\n+    treeWalk.addTree(tree)\n+    treeWalk.isRecursive = true\n+    treeWalk.filter = PathSuffixFilter.create(\".java\")\n+    var successes = 0\n+    var failures = 0\n+    while (treeWalk.next()) {\n+        git.log()\n+            .addPath(treeWalk.pathString)\n+            .setMaxCount(1)\n+            .call().forEach { lastCommit ->\n+                val year = Instant.ofEpochSecond(lastCommit.commitTime.toLong())\n+                    .atZone(ZoneId.of(\"Etc\/UTC\"))\n+                    .year\n+                try {\n+                    val header = CopyrightHeader.parse(File(treeWalk.pathString).readText(Charsets.UTF_8))\n+                    if (header.holders.none { it.holder == CopyrightHolders.ORACLE }) {\n+                        throw IllegalArgumentException(\"no Oracle copyright\")\n+                    }\n+                    if (header.holders.any { !it.range.endsWith(year) }) {\n+                        throw IllegalArgumentException(\"invalid range, expected to end with $year but was $header\")\n+                    }\n+                    println(\"游릭 ${treeWalk.pathString}\")\n+                    successes++\n+                } catch (e: Exception) {\n+                    println(\"游댮 ${treeWalk.pathString}\")\n+                    println(e.message)\n+                    failures++\n+                }\n+            }\n+    }\n+    println(\"$successes succeeded; $failures failed\")\n+}\n","filename":"scripts\/copyrightchecker.main.kts","additions":119,"deletions":68,"binary":false,"changes":187,"status":"modified"}]}