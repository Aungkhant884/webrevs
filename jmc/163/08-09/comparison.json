{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.util.Arrays;\n@@ -74,0 +75,2 @@\n+\t\n+\tprivate static final Collection<TypedResult<?>> RESULT_ATTRIBUTES = Arrays.<TypedResult<?>> asList(HARDWARE_THREADS, PARALLEL_GC_THREADS);\n@@ -156,1 +159,1 @@\n-\t\treturn Collections.emptyList();\n+\t\treturn RESULT_ATTRIBUTES;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/DiscouragedGcOptionsRule.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+\tprivate static final IQuantity DEFAULT_STACK_DEPTH_SETTING = UnitLookup.NUMBER_UNITY.quantity(64);\n+\n@@ -107,2 +109,2 @@\n-\tpublic static final TypedResult<String> STACK_DEPTH = new TypedResult<>(\"stackdepth\", \"Stackdepth\", \/\/$NON-NLS-1$\n-\t\t\t\"The maximum stack depth before the trace is truncated.\", UnitLookup.PLAIN_TEXT, String.class);\n+\tpublic static final TypedResult<IQuantity> STACK_DEPTH = new TypedResult<>(\"stackdepth\", \"Stackdepth\", \/\/$NON-NLS-1$\n+\t\t\t\"The maximum stack depth before the trace is truncated.\", UnitLookup.NUMBER, IQuantity.class);\n@@ -162,0 +164,1 @@\n+\t\t\tIQuantity stackDepthSetting = stackDepthValue == null ? DEFAULT_STACK_DEPTH_SETTING : UnitLookup.NUMBER_UNITY.quantity(Long.parseLong(stackDepthValue));\n@@ -164,1 +167,1 @@\n-\t\t\t\t\t.setExplanation(explanation).addResult(STACK_DEPTH, stackDepthValue)\n+\t\t\t\t\t.setExplanation(explanation).addResult(STACK_DEPTH, stackDepthSetting)\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/StackDepthSettingRule.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1978,1 +1978,1 @@\n-<summary>The runtime used {parallelGcThreads} GC threads on a machine with {hwThreads} CPU cores.<\/summary>\n+<summary>The runtime used 2 GC threads on a machine with 1 CPU cores.<\/summary>\n@@ -2988,1 +2988,1 @@\n-<explanation>The Flight Recorder is configured with a maximum captured stack depth of {stackdepth}. 35.7 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n+<explanation>The Flight Recorder is configured with a maximum captured stack depth of 64. 35.7 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n@@ -3243,1 +3243,1 @@\n-<explanation>The Flight Recorder is configured with a maximum captured stack depth of {stackdepth}. 17.5 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n+<explanation>The Flight Recorder is configured with a maximum captured stack depth of 64. 17.5 % of all traces were larger than this option, and were therefore truncated. If more detailed traces are required, increase the ''-XX:FlightRecorderOptions=stackdepth=&lt;value&gt;'' value.\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/resources\/baseline\/JfrRuleBaseline.xml","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}