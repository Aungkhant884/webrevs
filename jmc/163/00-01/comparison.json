{"files":[{"patch":"@@ -49,1 +49,1 @@\n-# {slowPhaseRatio} is a percentage, {1} is a time period\n+# {slowPhaseRatio} is a percentage, {targetTime} is a time period\n","filename":"application\/org.openjdk.jmc.flightrecorder.ext.jfx\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ext\/jfx\/messages.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.IResultValueProvider;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/IPageContainer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/ResultPage.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/overview\/ResultOverview.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n@@ -394,2 +393,0 @@\n-\t\tboolean allIgnored = editor.getRuleManager().getScoreStream(topicsArray).allMatch(d -> d == Result.IGNORE);\n-\t\tscript.append(String.format(\"overview.allIgnored(%b);\", allIgnored)); \/\/$NON-NLS-1$\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/overview\/ResultReportUi.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -84,1 +84,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/itemhandler\/ItemHandlerPage.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-\tpublic void addFormatter(DisplayFormatter<T> formatter) {\n+\tprotected void addFormatter(DisplayFormatter<T> formatter) {\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/ContentType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,0 @@\n-\t\t\t\/\/ FIXME: Should the score be hard-coded to 50 here?\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/cpu\/HighJvmCpuRule.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-\tpublic static List<IMCMethod> getRelevantTraceHtmlList(Branch branch, int rootItems) {\n+\tpublic static List<IMCMethod> getRelevantTraceList(Branch branch, int rootItems) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/dataproviders\/StacktraceDataProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkQueries;\n@@ -185,1 +186,1 @@\n-\t\t\t\t\t.addResult(EXCLUDED_ERRORS, excludedErrors)\n+\t\t\t\t\t.addResult(EXCLUDED_ERRORS, excludedErrors).addResult(TypedResult.ITEM_QUERY, JdkQueries.ERRORS)\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/exceptions\/ErrorRule.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkQueries;\n@@ -117,0 +118,1 @@\n+\t\t\t\t\t.addResult(TypedResult.ITEM_QUERY, JdkQueries.THROWABLES_STATISTICS)\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/exceptions\/ExceptionRule.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkQueries;\n@@ -134,0 +135,1 @@\n+\t\t\t\t\t.addResult(TypedResult.ITEM_QUERY, JdkQueries.JFR_DATA_LOST)\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/BufferLostRule.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\t\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\t\n+ *\t\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\t\n+ *\t\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\t\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\t\n+ *\t\n+ * or the following license:\t\n+ *\t\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\t\n+ * provided that the following conditions are met:\t\n+ *\t\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\t\n+ * and the following disclaimer.\t\n+ *\t\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\t\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\t\n+ * the distribution.\t\n+ *\t\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\t\n+ * endorse or promote products derived from this software without specific prior written permission.\t\n+ *\t\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\t\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\t\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\t\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\t\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\t\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\t\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\t\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\t\n+ *\/\n@@ -51,1 +83,8 @@\n-\n+import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.RequiredEventsBuilder;\n+\n+\/**\n+ * This rule looks at the loaded classes to try to figure out if multiple classes with the same name\n+ * has been loaded. Note that this rule can get fairly expensive if you have load events with many\n+ * (thousands) of unique classes.\n+ *\/\n+\/\/ FIXME: This rule could perhaps be improved by doing a linear regression of the metaspace usage the higher k, the higher score.\n@@ -85,6 +124,3 @@\n-\tprivate static final Map<String, EventAvailability> REQUIRED_EVENTS = new HashMap<>();\n-\n-\tstatic {\n-\t\tREQUIRED_EVENTS.put(JdkTypeIDs.CLASS_LOAD, EventAvailability.AVAILABLE);\n-\t\tREQUIRED_EVENTS.put(JdkTypeIDs.CLASS_UNLOAD, EventAvailability.AVAILABLE);\n-\t}\n+\tprivate static final Map<String, EventAvailability> REQUIRED_EVENTS = RequiredEventsBuilder.create()\n+\t\t\t.addEventType(JdkTypeIDs.CLASS_LOAD, EventAvailability.ENABLED)\n+\t\t\t.addEventType(JdkTypeIDs.CLASS_UNLOAD, EventAvailability.ENABLED).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ClassLeakingRule.java","additions":43,"deletions":7,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkQueries;\n@@ -145,0 +146,1 @@\n+\t\t\t\t\t\t.addResult(TypedResult.ITEM_QUERY, JdkQueries.CLASS_LOAD)\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/ClassLoadingRule.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import org.openjdk.jmc.common.item.IItemQuery;\n@@ -51,0 +52,1 @@\n+import org.openjdk.jmc.common.item.ItemQueryBuilder;\n@@ -99,0 +101,1 @@\n+\t\t\tIItemQuery query = ItemQueryBuilder.fromWhere(FILTER).build();\n@@ -101,1 +104,1 @@\n-\t\t\t\t\t.addResult(DMS_INCIDENTS, incidents)\n+\t\t\t\t\t.addResult(DMS_INCIDENTS, incidents).addResult(TypedResult.ITEM_QUERY, query)\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/DMSIncidentRule.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/FastTimeRule.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import org.openjdk.jmc.flightrecorder.jdk.JdkQueries;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/io\/SocketReadRule.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/latency\/BiasedLockingRevocationPauseRule.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -119,0 +119,2 @@\n+\tpublic static final TypedCollectionResult<String> FILTERED_TYPES = new TypedCollectionResult<>(\"filteredTypes\",\n+\t\t\t\"Filtered Types\", \"Types that were filtered out.\", UnitLookup.PLAIN_TEXT, String.class);\n@@ -121,1 +123,1 @@\n-\t\t\t.<TypedResult<?>> asList(TypedResult.SCORE, REVOKED_TYPES, REVOCATION_CLASSES);\n+\t\t\t.<TypedResult<?>> asList(TypedResult.SCORE, REVOKED_TYPES, REVOCATION_CLASSES, FILTERED_TYPES);\n@@ -144,1 +146,0 @@\n-\t\tList<IMCType> revokedTypesResult = new ArrayList<>();\n@@ -174,3 +175,2 @@\n-\t\t\texplanation.append(MessageFormat.format(\n-\t\t\t\t\tMessages.getString(Messages.BiasedLockingRevocationRule_TEXT_REVOKE_LIMIT_CLASSES_FOUND_LONG),\n-\t\t\t\t\twarningLimit));\n+\t\t\texplanation.append(\n+\t\t\t\t\tMessages.getString(Messages.BiasedLockingRevocationRule_TEXT_REVOKE_LIMIT_CLASSES_FOUND_LONG));\n@@ -195,1 +195,1 @@\n-\t\t\t\t.build();\n+\t\t\t\t.addResult(FILTERED_TYPES, filteredTypes).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/latency\/BiasedLockingRevocationRule.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-\t\tList<IMCMethod> relevantFramesList = StacktraceDataProvider.getRelevantTraceHtmlList(rootFork.getBranch(0),\n+\t\tList<IMCMethod> relevantFramesList = StacktraceDataProvider.getRelevantTraceList(rootFork.getBranch(0),\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AllocationByClassRule.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-\t\t\tList<IMCMethod> mostRelevantFrames = StacktraceDataProvider.getRelevantTraceHtmlList(rootFork.getBranch(0),\n+\t\t\tList<IMCMethod> mostRelevantFrames = StacktraceDataProvider.getRelevantTraceList(rootFork.getBranch(0),\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/memory\/AllocationByThreadRule.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-package org.openjdk.jmc.flightrecorder.rules.jdk.next;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.FutureTask;\n-import java.util.concurrent.RunnableFuture;\n-\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.unit.IQuantity;\n-import org.openjdk.jmc.common.unit.UnitLookup;\n-import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n-import org.openjdk.jmc.common.util.TypedPreference;\n-import org.openjdk.jmc.flightrecorder.rules.IResult;\n-import org.openjdk.jmc.flightrecorder.rules.IResultValueProvider;\n-import org.openjdk.jmc.flightrecorder.rules.IRule;\n-import org.openjdk.jmc.flightrecorder.rules.ResultBuilder;\n-import org.openjdk.jmc.flightrecorder.rules.Severity;\n-import org.openjdk.jmc.flightrecorder.rules.TypedResult;\n-import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;\n-\n-public class NoDependencyRule implements IRule {\n-\n-\tpublic static TypedResult<IQuantity> FOUND_BYTES = new TypedResult<IQuantity>(\"foundBytes\", \"Found Bytes\",\n-\t\t\t\"Some bytes we found\", UnitLookup.MEMORY, IQuantity.class);\n-\tprivate static Collection<TypedResult<?>> RESULTS = Arrays.<TypedResult<?>> asList(FOUND_BYTES);\n-\n-\t@Override\n-\tpublic String getId() {\n-\t\treturn \"noDeps\";\n-\t}\n-\n-\t@Override\n-\tpublic String getTopic() {\n-\t\treturn \"next\";\n-\t}\n-\n-\t@Override\n-\tpublic String getName() {\n-\t\treturn \"No Dependencies\";\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, EventAvailability> getRequiredEvents() {\n-\t\treturn Collections.emptyMap();\n-\t}\n-\n-\t@Override\n-\tpublic RunnableFuture<IResult> createEvaluation(\n-\t\tfinal IItemCollection items, final IPreferenceValueProvider preferenceValueProvider,\n-\t\tfinal IResultValueProvider dependencyResults) {\n-\t\tFutureTask<IResult> futureTask = new FutureTask<IResult>(new Callable<IResult>() {\n-\t\t\t@Override\n-\t\t\tpublic IResult call() throws Exception {\n-\t\t\t\t\/\/ Here we do some calculations\n-\t\t\t\tIQuantity bytes = UnitLookup.GIBIBYTE.quantity(2);\n-\t\t\t\treturn ResultBuilder.createFor(NoDependencyRule.this, preferenceValueProvider).setSeverity(Severity.OK)\n-\t\t\t\t\t\t.setSummary(\"No dependencies for this rule\").setExplanation(\"There are bytes in the heap!!!\")\n-\t\t\t\t\t\t.setSolution(\"Don't allocate things!\").addResult(FOUND_BYTES, bytes).build();\n-\t\t\t}\n-\t\t});\n-\t\treturn futureTask;\n-\t}\n-\n-\t@Override\n-\tpublic Collection<TypedPreference<?>> getConfigurationAttributes() {\n-\t\treturn Collections.emptySet();\n-\t}\n-\n-\t@Override\n-\tpublic Collection<TypedResult<?>> getResults() {\n-\t\treturn RESULTS;\n-\t}\n-\n-}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/next\/NoDependencyRule.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-package org.openjdk.jmc.flightrecorder.rules.jdk.next;\n-\n-import java.text.MessageFormat;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.FutureTask;\n-import java.util.concurrent.RunnableFuture;\n-\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.unit.IQuantity;\n-import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n-import org.openjdk.jmc.common.util.TypedPreference;\n-import org.openjdk.jmc.flightrecorder.rules.DependsOn;\n-import org.openjdk.jmc.flightrecorder.rules.IResult;\n-import org.openjdk.jmc.flightrecorder.rules.IResultValueProvider;\n-import org.openjdk.jmc.flightrecorder.rules.IRule;\n-import org.openjdk.jmc.flightrecorder.rules.ResultBuilder;\n-import org.openjdk.jmc.flightrecorder.rules.Severity;\n-import org.openjdk.jmc.flightrecorder.rules.TypedResult;\n-import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;\n-\n-@DependsOn(value = NoDependencyRule.class, severity = Severity.OK)\n-public class OneDependencyRule implements IRule {\n-\n-\t@Override\n-\tpublic String getId() {\n-\t\treturn \"OneDependency\";\n-\t}\n-\n-\t@Override\n-\tpublic String getTopic() {\n-\t\treturn \"next\";\n-\t}\n-\n-\t@Override\n-\tpublic String getName() {\n-\t\treturn \"One Dependency Rule\";\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, EventAvailability> getRequiredEvents() {\n-\t\treturn Collections.emptyMap();\n-\t}\n-\n-\t@Override\n-\tpublic RunnableFuture<IResult> createEvaluation(\n-\t\tfinal IItemCollection items, final IPreferenceValueProvider preferenceValueProvider,\n-\t\tfinal IResultValueProvider dependencyResults) {\n-\t\tFutureTask<IResult> futureTask = new FutureTask<IResult>(new Callable<IResult>() {\n-\t\t\t@Override\n-\t\t\tpublic IResult call() throws Exception {\n-\t\t\t\t\/\/ Here we look up an earlier result\n-\t\t\t\tIQuantity resultValue = dependencyResults.getResultValue(NoDependencyRule.FOUND_BYTES);\n-\t\t\t\tif (resultValue != null) {\n-\t\t\t\t\treturn ResultBuilder.createFor(OneDependencyRule.this, preferenceValueProvider)\n-\t\t\t\t\t\t\t.setSeverity(Severity.INFO).setSummary(\"We found {foundBytes} earlier!\")\n-\t\t\t\t\t\t\t.setExplanation(MessageFormat.format(\"A dependency for this rule found '{'{0}'}'\",\n-\t\t\t\t\t\t\t\t\tNoDependencyRule.FOUND_BYTES.getIdentifier()))\n-\t\t\t\t\t\t\t.setSolution(\"Fix the earlier issue, it might be important\").build();\n-\t\t\t\t} else {\n-\t\t\t\t\treturn ResultBuilder.createFor(OneDependencyRule.this, preferenceValueProvider)\n-\t\t\t\t\t\t\t.setSeverity(Severity.OK).setSummary(\"We didn't find any bytes earlier!\")\n-\t\t\t\t\t\t\t.setExplanation(\"A dependency for this rule did not find anything\").build();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t\treturn futureTask;\n-\t}\n-\n-\t@Override\n-\tpublic Collection<TypedPreference<?>> getConfigurationAttributes() {\n-\t\treturn Collections.emptySet();\n-\t}\n-\n-\t@Override\n-\tpublic Collection<TypedResult<?>> getResults() {\n-\t\treturn Collections.emptySet();\n-\t}\n-\n-}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/next\/OneDependencyRule.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,191 +0,0 @@\n-package org.openjdk.jmc.flightrecorder.rules.jdk.next;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.RunnableFuture;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-import org.openjdk.jmc.common.IDisplayable;\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.unit.IQuantity;\n-import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n-import org.openjdk.jmc.common.util.StringToolkit;\n-import org.openjdk.jmc.common.util.TypedPreference;\n-import org.openjdk.jmc.flightrecorder.CouldNotLoadRecordingException;\n-import org.openjdk.jmc.flightrecorder.JfrLoaderToolkit;\n-import org.openjdk.jmc.flightrecorder.rules.IResult;\n-import org.openjdk.jmc.flightrecorder.rules.IResultValueProvider;\n-import org.openjdk.jmc.flightrecorder.rules.IRule;\n-import org.openjdk.jmc.flightrecorder.rules.ResultToolkit;\n-import org.openjdk.jmc.flightrecorder.rules.RuleRegistry;\n-import org.openjdk.jmc.flightrecorder.rules.TypedCollectionResult;\n-import org.openjdk.jmc.flightrecorder.rules.TypedResult;\n-\n-public class Runner {\n-\n-\tprivate static final Pattern TEMPLATE_PATTERN = Pattern.compile(\"(\\\\{.*?\\\\})\"); \/\/$NON-NLS-1$\n-\n-\tprivate static class ResultProvider implements IResultValueProvider {\n-\n-\t\tprivate Map<TypedResult<?>, Object> resultMap;\n-\t\tprivate Map<TypedCollectionResult<?>, Collection<?>> collectionResultMap;\n-\n-\t\tpublic ResultProvider() {\n-\t\t\tresultMap = new HashMap<>();\n-\t\t\tcollectionResultMap = new HashMap<>();\n-\t\t}\n-\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\t@Override\n-\t\tpublic <T> T getResultValue(TypedResult<T> key) {\n-\t\t\tObject result = resultMap.get(key);\n-\t\t\tif (key.getResultClass() == null) {\n-\t\t\t\treturn (T) result;\n-\t\t\t}\n-\t\t\treturn key.getResultClass().cast(result);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic TypedResult<?> getResultByIdentifier(String identifier) {\n-\t\t\tfor (TypedResult<?> result : resultMap.keySet()) {\n-\t\t\t\tif (result.getIdentifier().equals(identifier)) {\n-\t\t\t\t\treturn result;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfor (TypedCollectionResult<?> result : collectionResultMap.keySet()) {\n-\t\t\t\tif (result.getIdentifier().equals(identifier)) {\n-\t\t\t\t\treturn result;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\t@Override\n-\t\tpublic <T> Collection<T> getResultValue(TypedCollectionResult<T> result) {\n-\t\t\tCollection<?> collection = collectionResultMap.get(result);\n-\t\t\tif (collection != null) {\n-\t\t\t\tCollection<T> results = new ArrayList<>(collection.size());\n-\t\t\t\tfor (Object object : collection) {\n-\t\t\t\t\tClass<T> resultClass = result.getResultClass();\n-\t\t\t\t\tresults.add(resultClass == null ? (T) object : resultClass.cast(object));\n-\t\t\t\t}\n-\t\t\t\treturn Collections.unmodifiableCollection(results);\n-\t\t\t}\n-\t\t\treturn Collections.<T> emptyList();\n-\t\t}\n-\n-\t}\n-\n-\tprivate static class PreferenceProvider implements IPreferenceValueProvider {\n-\n-\t\t@Override\n-\t\tpublic <T> T getPreferenceValue(TypedPreference<T> preference) {\n-\t\t\treturn preference.getDefaultValue();\n-\t\t}\n-\n-\t}\n-\n-\tprivate static void printResult(IResult result, IResultValueProvider resultProvider) {\n-\t\tString summary = result.getSummary();\n-\t\tString explanation = result.getExplanation();\n-\t\tString solution = result.getSolution();\n-\n-\t\tif (summary != null)\n-\t\t\tsummary = ResultToolkit.populateMessage(result, summary, false);\n-\t\tif (explanation != null)\n-\t\t\texplanation = ResultToolkit.populateMessage(result, explanation, false);\n-\t\tif (solution != null)\n-\t\t\tsolution = ResultToolkit.populateMessage(result, solution, false);\n-\n-\t\tSystem.out.println(\"==========\"); \/\/$NON-NLS-1$\n-\t\tSystem.out.println(\"Rule: \" + result.getRule().getName()); \/\/$NON-NLS-1$\n-\t\tSystem.out.println(\"Severity: \" + result.getSeverity()); \/\/$NON-NLS-1$\n-\t\tSystem.out.println(\"Summary: \" + summary); \/\/$NON-NLS-1$\n-\t\tSystem.out.println(\"Explanation: \" + explanation); \/\/$NON-NLS-1$\n-\t\tSystem.out.println(\"Solution: \" + solution); \/\/$NON-NLS-1$\n-\t\tSystem.out.println(\"==========\"); \/\/$NON-NLS-1$\n-\t}\n-\n-\tprivate static String formatString(IResult result, String string, IResultValueProvider resultProvider) {\n-\t\tString s = string;\n-\t\t\/\/Collection<TypedResult<?>> results = result.getRule().getResults();\n-\t\tMatcher matcher = TEMPLATE_PATTERN.matcher(s);\n-\t\twhile (matcher.find()) {\n-\t\t\tfor (int i = 0; i < matcher.groupCount(); i++) {\n-\t\t\t\tString group = matcher.group(i);\n-\t\t\t\tString subGroup = group.substring(1, group.length() - 1);\n-\t\t\t\tTypedResult<?> typedResult = resultProvider.getResultByIdentifier(subGroup);\n-\t\t\t\tif (typedResult != null) {\n-\t\t\t\t\tif (typedResult instanceof TypedCollectionResult<?>) {\n-\t\t\t\t\t\tCollection<?> results = resultProvider.getResultValue((TypedCollectionResult<?>) typedResult);\n-\t\t\t\t\t\tString joined = StringToolkit.join(results, \",\"); \/\/$NON-NLS-1$\n-\t\t\t\t\t\ts = s.replace(group, joined);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tObject typedResultInstance = resultProvider.getResultValue(typedResult);\n-\t\t\t\t\t\tif (typedResultInstance != null) {\n-\t\t\t\t\t\t\tif (typedResultInstance instanceof IQuantity) {\n-\t\t\t\t\t\t\t\ts = s.replace(group, ((IQuantity) typedResultInstance).displayUsing(IDisplayable.AUTO));\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\ts = s.replace(group, typedResultInstance.toString());\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tSystem.err.println(\"In: \" + string + \", \" + group + \" is null\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\/\/\t\tfor (TypedResult<?> typedResult : results) {\n-\/\/\t\t\tObject result2 = resultProvider.getResultValue(typedResult);\n-\/\/\t\t\tString formattedResult = result2.toString();\n-\/\/\t\t\tif (typedResult.getClass().equals(IQuantity.class)) {\n-\/\/\t\t\t\tformattedResult = ((IQuantity) (result.getResult(typedResult))).displayUsing(IDisplayable.AUTO);\n-\/\/\t\t\t}\n-\/\/\t\t\ts = string.replace(\"{\" + typedResult.getIdentifier() + \"}\", formattedResult); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\/\/\t\t}\n-\t\treturn s;\n-\t}\n-\n-\tpublic static void main(String[] args) throws IOException, CouldNotLoadRecordingException {\n-\t\tCollection<IRule> rules2 = RuleRegistry.getRules();\n-\t\tIItemCollection events = null;\n-\t\tif (args.length > 0) {\n-\t\t\tevents = JfrLoaderToolkit.loadEvents(new File(args[0]));\n-\t\t}\n-\t\tResultProvider resultProvider = new ResultProvider();\n-\t\tPreferenceProvider prefProvider = new PreferenceProvider();\n-\t\tSystem.out.println(\"Running Rules\"); \/\/$NON-NLS-1$\n-\t\tfor (IRule rule : rules2) {\n-\t\t\tRunnableFuture<IResult> ruleFuture = rule.createEvaluation(events, prefProvider, resultProvider);\n-\t\t\ttry {\n-\t\t\t\tSystem.out.println(\"Running \" + rule.getName()); \/\/$NON-NLS-1$\n-\t\t\t\truleFuture.run();\n-\t\t\t\tIResult result = ruleFuture.get();\n-\t\t\t\tif (rule.getResults() != null) {\n-\t\t\t\t\tfor (TypedResult<?> typedResult : rule.getResults()) {\n-\t\t\t\t\t\tif (typedResult instanceof TypedCollectionResult<?>) {\n-\t\t\t\t\t\t\tTypedCollectionResult<?> typedCollectionResult = (TypedCollectionResult<?>) typedResult;\n-\t\t\t\t\t\t\tCollection<?> result2 = result.getResult(typedCollectionResult);\n-\t\t\t\t\t\t\tresultProvider.collectionResultMap.put(typedCollectionResult, result2);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tresultProvider.resultMap.put(typedResult, result.getResult(typedResult));\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tprintResult(result, resultProvider);\n-\t\t\t} catch (InterruptedException | ExecutionException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/next\/Runner.java","additions":0,"deletions":191,"binary":false,"changes":191,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-package org.openjdk.jmc.flightrecorder.rules.jdk.util;\n-\n-import org.openjdk.jmc.common.unit.IConstraint;\n-import org.openjdk.jmc.common.unit.IPersister;\n-import org.openjdk.jmc.common.unit.QuantityConversionException;\n-\n-public class ClassEntryPersister implements IPersister<ClassEntry> {\n-\n-\t@Override\n-\tpublic IConstraint<ClassEntry> combine(IConstraint<?> other) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic ClassEntry parsePersisted(String persistedValue) throws QuantityConversionException {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic ClassEntry parseInteractive(String interactiveValue) throws QuantityConversionException {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic boolean validate(ClassEntry value) {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic String persistableString(ClassEntry value) {\n-\t\treturn null;\n-\t}\n-\n-\t@Override\n-\tpublic String interactiveFormat(ClassEntry value) {\n-\t\treturn null;\n-\t}\n-\n-}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/util\/ClassEntryPersister.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -66,1 +66,1 @@\n-# {largestAllocatedType} is a type name, {1} is a size in bytes, {2} is a method reference string\n+# {largestAllocatedType} is a type name, {largestAllocatedByType} is a size in bytes, {secondFrameMostAllocated} is a method reference string\n@@ -79,1 +79,1 @@\n-# {0} is the user configured revocation limit\n+# {revocationClasses} is the user configured revocation limit\n@@ -81,2 +81,2 @@\n-# {0} is the classes that were filtered out from the result.\n-BiasedLockingRevocationRule_TEXT_EPILOGUE=<p>Biased locking is a technique used by the JVM to decrease the cost of uncontended locking to near lock free performance. A thread can bias a lock object to itself, making subsequent locking by the same thread very inexpensive. If the lock starts being used by other threads, the bias can either be revoked, rebiased towards the other thread, or revoked from being biased again for the rest of the runtime of the JVM.<\/p><p>Having a lot of revoked classes need not be a problem, but can provide opportunities for optimizations, tuning and design improvements. For example, if you have a lot of contention during the startup of your application, the revocation costs may be significant, and you may want to delay the enablement of biased locking using the ''-XX:BiasedLockingStartupDelay=&lt;time in ms&gt;'' flag. For applications that heavily depend on contended locking, and cannot be redesigned, it may be beneficial to turn off biased locking altogether (''-XX:-UseBiasedLocking''). For benchmarking, you may want to set ''-XX:BiasedLockingStartupDelay'' to zero.<p><p>The following classes were filtered out: {0}<\/p>\n+# {filteredTypes} is the classes that were filtered out from the result.\n+BiasedLockingRevocationRule_TEXT_EPILOGUE=Biased locking is a technique used by the JVM to decrease the cost of uncontended locking to near lock free performance. A thread can bias a lock object to itself, making subsequent locking by the same thread very inexpensive. If the lock starts being used by other threads, the bias can either be revoked, rebiased towards the other thread, or revoked from being biased again for the rest of the runtime of the JVM.\\n Having a lot of revoked classes need not be a problem, but can provide opportunities for optimizations, tuning and design improvements. For example, if you have a lot of contention during the startup of your application, the revocation costs may be significant, and you may want to delay the enablement of biased locking using the ''-XX:BiasedLockingStartupDelay=<time in ms>'' flag. For applications that heavily depend on contended locking, and cannot be redesigned, it may be beneficial to turn off biased locking altogether (''-XX:-UseBiasedLocking''). For benchmarking, you may want to set ''-XX:BiasedLockingStartupDelay'' to zero.\\n The following classes were filtered out: {filteredTypes}\n@@ -87,1 +87,1 @@\n-# {0} is a time period\n+# {revocationTime} is a time period\n@@ -681,1 +681,1 @@\n-# {longestOperationDuration} is a time period, {longestOperation} is a JVM operation type, {2} is a thread name, {3} is a time stamp\n+# {longestOperationDuration} is a time period, {longestOperation} is a JVM operation type, {longestOperationCaller} is a thread name, {longestOperationStartTime} is a time stamp\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -66,5 +66,0 @@\n-\t\t<dependency>\n-\t\t\t<groupId>org.jgrapht<\/groupId>\n-\t\t\t<artifactId>jgrapht-core<\/artifactId>\n-\t\t\t<version>1.4.0<\/version>\n-\t\t<\/dependency>\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/pom.xml","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/IRecordingSetting.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/IResult.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/IResultValueProvider.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- *\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- *\n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.rules;\n-\n-import org.openjdk.jmc.common.item.IItemQuery;\n-\n-\/**\n- * A result from evaluating a rule. It contains a score value that shows how severe the result\n- * should be considered, text descriptions that can be used to tell the user about found problems\n- * (and possible solutions), and a query that can be used to identify specific data items related to\n- * the result.\n- *\/\n-public final class Result {\n-\n-\t\/**\n-\t * Magic numbers for specific cases where an IRule returns a Result without a score\n-\t *\/\n-\tpublic static final double NOT_APPLICABLE = -1;\n-\tpublic static final double FAILED = -2;\n-\tpublic static final double IGNORE = -3;\n-\t\/\/ JFR GUI specific magic number to indicate rule being evaluated\n-\tprivate static final double IN_PROGRESS = -200;\n-\n-\tprivate final IRule rule;\n-\tprivate final double score;\n-\tprivate final String shortDescription;\n-\tprivate final String longDescription;\n-\tprivate final IItemQuery query;\n-\n-\tpublic Result(IRule rule, double score, String shortDescription) {\n-\t\tthis(rule, score, shortDescription, null, null);\n-\t}\n-\n-\tpublic Result(IRule rule, double score, String shortDescription, String longDescription) {\n-\t\tthis(rule, score, shortDescription, longDescription, null);\n-\t}\n-\n-\tpublic Result(IRule rule, double score, String shortDescription, String longDescription, IItemQuery query) {\n-\t\tif (rule == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Rule parameter cannot be null.\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tif (Double.isInfinite(score) || Double.isNaN(score)) {\n-\t\t\tthrow new IllegalArgumentException(\"Score cannot not be infinite or NaN.\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tif (!isValidScore(score)) {\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"Score must be greater than or equal to 0 and less than or equal to 100.\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tif (shortDescription == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Short description cannot be null.\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tthis.rule = rule;\n-\t\tthis.score = score;\n-\t\tthis.shortDescription = shortDescription;\n-\t\tthis.longDescription = longDescription;\n-\t\tthis.query = query;\n-\t}\n-\n-\t\/**\n-\t * @param score\n-\t *            the score to validate\n-\t * @return {@code true} if score is in interval 0.0 <= score <= 100.0 or if it is one of the\n-\t *         defined magic numbers (including -200 for JMC UI purposes) {@code false} otherwise\n-\t *\/\n-\tprivate boolean isValidScore(double score) {\n-\t\tif (Double.compare(score, 0) < 0) {\n-\t\t\treturn Double.compare(score, NOT_APPLICABLE) == 0 || Double.compare(score, FAILED) == 0\n-\t\t\t\t\t|| Double.compare(score, IGNORE) == 0 || Double.compare(score, IN_PROGRESS) == 0;\n-\t\t}\n-\t\treturn Double.compare(score, 100) <= 0;\n-\t}\n-\n-\t\/**\n-\t * The rule which generated this result.\n-\t *\n-\t * @return the rule creating this result\n-\t *\/\n-\tpublic IRule getRule() {\n-\t\treturn rule;\n-\t}\n-\n-\t\/**\n-\t * A score between 0 and 100 where 0 means \"no problem\" and 100 means \"big problem\". A score\n-\t * below zero means that the rule could not perform the evaluation for some reason. The score\n-\t * can be passed into {@link Severity#get(double)} to get a matching {@link Severity} value.\n-\t *\n-\t * @return the score for this result\n-\t *\/\n-\tpublic double getScore() {\n-\t\treturn score;\n-\t}\n-\n-\t\/**\n-\t * @return a short text message describing the result\n-\t *\/\n-\tpublic String getShortDescription() {\n-\t\treturn shortDescription;\n-\t}\n-\n-\t\/**\n-\t * @return A longer text message describing the result. Can be {@code null} if no long\n-\t *         description is provided.\n-\t *\/\n-\tpublic String getLongDescription() {\n-\t\tif (longDescription != null) {\n-\t\t\treturn longDescription;\n-\t\t}\n-\t\treturn shortDescription;\n-\t}\n-\n-\t\/**\n-\t * @return the query of the result\n-\t *\/\n-\tpublic IItemQuery getItemQuery() {\n-\t\treturn query;\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn String.format(\"[(%E): %s, %s]\", getScore(), getShortDescription(), getRule().getTopic()); \/\/$NON-NLS-1$\n-\t}\n-}\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/Result.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/ResultBuilder.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/ResultToolkit.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/RuleRegistry.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/TypedCollectionResult.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/TypedResult.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/report\/html\/internal\/HtmlResultProvider.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/RulesToolkit.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestFileReadWriteRule.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/TestSocketReadWriteRule.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/PasswordsInArgumentsRuleTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/PasswordsInEnvironmentRuleTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import org.openjdk.jmc.flightrecorder.rules.Result;\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/test\/rules\/jdk\/general\/PasswordsInSystemPropertiesRuleTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,153 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.flightrecorder.rules;\n-\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.concurrent.RunnableFuture;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.common.item.ItemFilters;\n-import org.openjdk.jmc.common.item.ItemQueryBuilder;\n-import org.openjdk.jmc.common.util.IPreferenceValueProvider;\n-import org.openjdk.jmc.common.util.TypedPreference;\n-import org.openjdk.jmc.flightrecorder.rules.util.RulesToolkit.EventAvailability;\n-\n-@SuppressWarnings(\"nls\")\n-public class ResultTest {\n-\n-\tprivate static class TestRule implements IRule {\n-\n-\t\t@Override\n-\t\tpublic RunnableFuture<IResult> createEvaluation(\n-\t\t\tIItemCollection items, IPreferenceValueProvider valueProvider, IResultValueProvider resultProvider) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Collection<TypedPreference<?>> getConfigurationAttributes() {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getId() {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getName() {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic String getTopic() {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Map<String, EventAvailability> getRequiredEvents() {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Collection<TypedResult<?>> getResults() {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t}\n-\n-\tprivate static final IRule RULE = new TestRule();\n-\tprivate static final String MSG = \"testString\";\n-\n-\t@Rule\n-\tpublic ExpectedException exception = ExpectedException.none();\n-\n-\t@Test\n-\tpublic void testNormal() {\n-\t\tnew Result(RULE, 10, MSG, MSG + MSG, ItemQueryBuilder.fromWhere(ItemFilters.type(\"test\")).build());\n-\t\tnew Result(RULE, 100.0, MSG, null, null);\n-\t\tnew Result(RULE, 0.000000, MSG, null, null);\n-\t\tnew Result(RULE, 0, MSG);\n-\t\tnew Result(RULE, Result.NOT_APPLICABLE, MSG, null, null);\n-\t\tnew Result(RULE, -2, MSG);\n-\t\tnew Result(RULE, -3, MSG);\n-\t\tnew Result(RULE, -200, MSG); \/\/ undeclared in-progress magic number\n-\t}\n-\n-\t@Test\n-\tpublic void testLessThanScore() {\n-\t\texception.expect(IllegalArgumentException.class);\n-\t\texception.expectMessage(\"greater than or equal to 0\");\n-\t\tnew Result(RULE, -0.5, MSG);\n-\t}\n-\n-\t@Test\n-\tpublic void testGreaterThanScore() {\n-\t\texception.expect(IllegalArgumentException.class);\n-\t\texception.expectMessage(\"less than or equal to 100\");\n-\t\tnew Result(RULE, 101, MSG);\n-\t}\n-\n-\t@Test\n-\tpublic void testNaNscore() {\n-\t\texception.expect(IllegalArgumentException.class);\n-\t\texception.expectMessage(\"NaN\");\n-\t\tnew Result(RULE, Double.NaN, MSG);\n-\t}\n-\n-\t@Test\n-\tpublic void testInfinity() {\n-\t\texception.expect(IllegalArgumentException.class);\n-\t\texception.expectMessage(\"infinite\");\n-\t\tnew Result(RULE, Double.NEGATIVE_INFINITY, MSG);\n-\t}\n-\n-\t@Test\n-\tpublic void testStringParameters() {\n-\t\texception.expect(IllegalArgumentException.class);\n-\t\texception.expectMessage(\"description\");\n-\t\tnew Result(new TestRule(), 10, null);\n-\t}\n-\n-\t@Test\n-\tpublic void testNullRule() {\n-\t\texception.expect(IllegalArgumentException.class);\n-\t\texception.expectMessage(\"Rule parameter cannot be null\");\n-\t\tnew Result(null, 10, MSG);\n-\t}\n-\n-}\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/ResultTest.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"deleted"}]}