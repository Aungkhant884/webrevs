{"files":[{"patch":"@@ -789,0 +789,3 @@\n+\t\t<page factory=\"org.openjdk.jmc.flightrecorder.ui.gcsummary\"\n+\t\t\tid=\"org.openjdk.jmc.flightrecorder.ui.gcsummary\">\n+\t\t<\/page>\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/defaultPages.xml","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -272,0 +272,4 @@\n+      <\/factory>\n+       <factory\n+            class=\"org.openjdk.jmc.flightrecorder.ui.pages.GCSummaryPage$GCSummaryPageFactory\"\n+            id=\"org.openjdk.jmc.flightrecorder.ui.gcsummary\">\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/plugin.xml","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,0 +192,5 @@\n+\tpublic static String GCSummaryPage_PAGE_NAME;\n+\tpublic static String GCSummaryPage_SECTION_YOUNG_COLLECTION;\n+\tpublic static String GCSummaryPage_SECTION_OLD_COLLECTION;\n+\tpublic static String GCSummaryPage_SECTION_ALL_COLLECTION;\n+\tpublic static String GCSummaryPage_SECTION_ALL_COLLECTION_PAUSE;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/Messages.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.flightrecorder.ui.pages;\n+\n+import org.eclipse.jface.resource.ImageDescriptor;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.custom.SashForm;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.ui.forms.widgets.Form;\n+import org.eclipse.ui.forms.widgets.FormToolkit;\n+import org.eclipse.ui.forms.widgets.Section;\n+\n+import org.openjdk.jmc.common.IState;\n+import org.openjdk.jmc.common.item.IItemFilter;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkAggregators;\n+import org.openjdk.jmc.flightrecorder.jdk.JdkFilters;\n+import org.openjdk.jmc.flightrecorder.rules.util.JfrRuleTopics;\n+import org.openjdk.jmc.flightrecorder.ui.FlightRecorderUI;\n+import org.openjdk.jmc.flightrecorder.ui.IDataPageFactory;\n+import org.openjdk.jmc.flightrecorder.ui.IDisplayablePage;\n+import org.openjdk.jmc.flightrecorder.ui.IPageContainer;\n+import org.openjdk.jmc.flightrecorder.ui.IPageDefinition;\n+import org.openjdk.jmc.flightrecorder.ui.IPageUI;\n+import org.openjdk.jmc.flightrecorder.ui.StreamModel;\n+import org.openjdk.jmc.flightrecorder.ui.common.AbstractDataPage;\n+import org.openjdk.jmc.flightrecorder.ui.common.DataPageToolkit;\n+import org.openjdk.jmc.flightrecorder.ui.common.ImageConstants;\n+import org.openjdk.jmc.flightrecorder.ui.common.ItemAggregateViewer;\n+import org.openjdk.jmc.flightrecorder.ui.messages.internal.Messages;\n+import org.openjdk.jmc.ui.accessibility.SimpleTraverseListener;\n+import org.openjdk.jmc.ui.misc.CompositeToolkit;\n+\n+public class GCSummaryPage extends AbstractDataPage {\n+\tpublic static class GCSummaryPageFactory implements IDataPageFactory {\n+\n+\t\t@Override\n+\t\tpublic String getName(IState state) {\n+\t\t\treturn Messages.GCSummaryPage_PAGE_NAME;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ImageDescriptor getImageDescriptor(IState state) {\n+\t\t\treturn FlightRecorderUI.getDefault().getMCImageDescriptor(ImageConstants.PAGE_GC);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String[] getTopics(IState state) {\n+\t\t\treturn new String[] {JfrRuleTopics.GC_SUMMARY};\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IDisplayablePage createPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {\n+\t\t\treturn new GCSummaryPage(dpd, items, editor);\n+\t\t}\n+\n+\t}\n+\n+\t@Override\n+\tpublic IPageUI display(Composite parent, FormToolkit toolkit, IPageContainer pageContainer, IState state) {\n+\t\tForm form = DataPageToolkit.createForm(parent, toolkit, getName(), getIcon());\n+\n+\t\tSashForm mainContainer = new SashForm(form.getBody(), SWT.VERTICAL);\n+\t\tmainContainer.addTraverseListener(new SimpleTraverseListener());\n+\n+\t\tSashForm firstContainer = new SashForm(mainContainer, SWT.HORIZONTAL);\n+\t\tfirstContainer.addTraverseListener(new SimpleTraverseListener());\n+\n+\t\tSection youngCollectionSection = CompositeToolkit.createSection(firstContainer, toolkit,\n+\t\t\t\tMessages.GCSummaryPage_SECTION_YOUNG_COLLECTION);\n+\t\tItemAggregateViewer ycConfig = new ItemAggregateViewer(youngCollectionSection, toolkit);\n+\t\tycConfig.addAggregate(JdkAggregators.YOUNG_COLLECTION_GC_COUNT);\n+\t\tycConfig.addAggregate(JdkAggregators.YOUNG_COLLECTION_AVG_GC_TIME);\n+\t\tycConfig.addAggregate(JdkAggregators.YOUNG_COLLECTION_MAX_GC_TIME);\n+\t\tycConfig.addAggregate(JdkAggregators.YOUNG_COLLECTION_TOTAL_GC_TIME);\n+\t\tyoungCollectionSection.setClient(ycConfig.getControl());\n+\n+\t\tSection oldCollectionSection = CompositeToolkit.createSection(firstContainer, toolkit,\n+\t\t\t\tMessages.GCSummaryPage_SECTION_OLD_COLLECTION);\n+\t\tItemAggregateViewer ocConfig = new ItemAggregateViewer(oldCollectionSection, toolkit);\n+\t\tocConfig.addAggregate(JdkAggregators.OLD_COLLECTION_GC_COUNT);\n+\t\tocConfig.addAggregate(JdkAggregators.OLD_COLLECTION_AVG_GC_TIME);\n+\t\tocConfig.addAggregate(JdkAggregators.OLD_COLLECTION_MAX_GC_TIME);\n+\t\tocConfig.addAggregate(JdkAggregators.OLD_COLLECTION_TOTAL_GC_TIME);\n+\t\toldCollectionSection.setClient(ocConfig.getControl());\n+\n+\t\tSashForm secondContainer = new SashForm(mainContainer, SWT.HORIZONTAL);\n+\t\tsecondContainer.addTraverseListener(new SimpleTraverseListener());\n+\n+\t\tSection allCollectionSection = CompositeToolkit.createSection(secondContainer, toolkit,\n+\t\t\t\tMessages.GCSummaryPage_SECTION_ALL_COLLECTION);\n+\t\tItemAggregateViewer acConfig = new ItemAggregateViewer(allCollectionSection, toolkit);\n+\t\tacConfig.addAggregate(JdkAggregators.ALL_COLLECTION_GC_COUNT);\n+\t\tacConfig.addAggregate(JdkAggregators.ALL_COLLECTION_AVG_GC_TIME);\n+\t\tacConfig.addAggregate(JdkAggregators.ALL_COLLECTION_MAX_GC_TIME);\n+\t\tacConfig.addAggregate(JdkAggregators.ALL_COLLECTION_TOTAL_GC_TIME);\n+\t\tallCollectionSection.setClient(acConfig.getControl());\n+\n+\t\tSection allCollectionPauseSection = CompositeToolkit.createSection(secondContainer, toolkit,\n+\t\t\t\tMessages.GCSummaryPage_SECTION_ALL_COLLECTION_PAUSE);\n+\t\tItemAggregateViewer acpConfig = new ItemAggregateViewer(allCollectionPauseSection, toolkit);\n+\t\tacpConfig.addAggregate(JdkAggregators.AVERAGE_GC_PAUSE);\n+\t\tacpConfig.addAggregate(JdkAggregators.LONGEST_GC_PAUSE);\n+\t\tacpConfig.addAggregate(JdkAggregators.TOTAL_GC_PAUSE);\n+\t\tallCollectionPauseSection.setClient(acpConfig.getControl());\n+\n+\t\tycConfig.setValues(getDataSource().getItems());\n+\t\tocConfig.setValues(getDataSource().getItems());\n+\t\tacConfig.setValues(getDataSource().getItems());\n+\t\tacpConfig.setValues(getDataSource().getItems());\n+\n+\t\taddResultActions(form);\n+\n+\t\treturn null;\n+\t}\n+\n+\tpublic GCSummaryPage(IPageDefinition dpd, StreamModel items, IPageContainer editor) {\n+\t\tsuper(dpd, items, editor);\n+\t}\n+\n+\t@Override\n+\tpublic IItemFilter getDefaultSelectionFilter() {\n+\t\treturn JdkFilters.GC_CONFIG;\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/GCSummaryPage.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -317,0 +317,5 @@\n+GCSummaryPage_PAGE_NAME=GC Summary\n+GCSummaryPage_SECTION_YOUNG_COLLECTION=Young Collection Total Time\n+GCSummaryPage_SECTION_OLD_COLLECTION=Old Collection Total Time\n+GCSummaryPage_SECTION_ALL_COLLECTION=All Collections Total Time\n+GCSummaryPage_SECTION_ALL_COLLECTION_PAUSE=All Collections Pause Time\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/ui\/messages\/internal\/messages.properties","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+\tpublic static final String GC_SUMMARY = \"gc_summary\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/util\/JfrRuleTopics.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,0 +85,3 @@\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs.GC_COLLECTOR_YOUNG_GARBAGE_COLLECTION;\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs.GC_COLLECTOR_OLD_GARBAGE_COLLECTION;\n+import static org.openjdk.jmc.flightrecorder.jdk.JdkTypeIDs.GARBAGE_COLLECTION;\n@@ -288,0 +291,3 @@\n+\tpublic static final IAggregator<IQuantity, ?> AVERAGE_GC_PAUSE = Aggregators.avg(\n+\t\t\tMessages.getString(Messages.AGGR_AVERAGE_GC_PAUSE), Messages.getString(Messages.AGGR_AVERAGE_GC_PAUSE_DESC),\n+\t\t\tGC_PAUSE, DURATION);\n@@ -291,0 +297,45 @@\n+\t\/\/Young Collection GC\n+\tpublic static final IAggregator<IQuantity, ?> YOUNG_COLLECTION_GC_COUNT = Aggregators.count(\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_GC_COUNT),\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_GC_COUNT_DESC), JdkFilters.YOUNG_GARBAGE_COLLECTION);\n+\tpublic static final IAggregator<IQuantity, ?> YOUNG_COLLECTION_MAX_GC_TIME = Aggregators.max(\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_MAX_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_MAX_GC_TIME_DESC), GC_COLLECTOR_YOUNG_GARBAGE_COLLECTION,\n+\t\t\tDURATION);\n+\tpublic static final IAggregator<IQuantity, ?> YOUNG_COLLECTION_AVG_GC_TIME = Aggregators.avg(\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_AVG_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_AVG_GC_TIME_DESC), GC_COLLECTOR_YOUNG_GARBAGE_COLLECTION,\n+\t\t\tDURATION);\n+\tpublic static final IAggregator<IQuantity, ?> YOUNG_COLLECTION_TOTAL_GC_TIME = Aggregators.sum(\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME_DESC),\n+\t\t\tGC_COLLECTOR_YOUNG_GARBAGE_COLLECTION, DURATION);\n+\t\/\/Old Collection GC\n+\tpublic static final IAggregator<IQuantity, ?> OLD_COLLECTION_GC_COUNT = Aggregators.count(\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_GC_COUNT),\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_GC_COUNT_DESC), JdkFilters.OLD_GARBAGE_COLLECTION);\n+\tpublic static final IAggregator<IQuantity, ?> OLD_COLLECTION_MAX_GC_TIME = Aggregators.max(\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_MAX_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_MAX_GC_TIME_DESC), GC_COLLECTOR_OLD_GARBAGE_COLLECTION,\n+\t\t\tDURATION);\n+\tpublic static final IAggregator<IQuantity, ?> OLD_COLLECTION_AVG_GC_TIME = Aggregators.avg(\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_AVG_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_AVG_GC_TIME_DESC), GC_COLLECTOR_OLD_GARBAGE_COLLECTION,\n+\t\t\tDURATION);\n+\tpublic static final IAggregator<IQuantity, ?> OLD_COLLECTION_TOTAL_GC_TIME = Aggregators.sum(\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_TOTAL_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_OLD_COLLECTION_TOTAL_GC_TIME_DESC), GC_COLLECTOR_OLD_GARBAGE_COLLECTION,\n+\t\t\tDURATION);\n+\t\/\/All Collection GC\n+\tpublic static final IAggregator<IQuantity, ?> ALL_COLLECTION_GC_COUNT = Aggregators.count(\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_GC_COUNT),\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_GC_COUNT_DESC), JdkFilters.GARBAGE_COLLECTION);\n+\tpublic static final IAggregator<IQuantity, ?> ALL_COLLECTION_MAX_GC_TIME = Aggregators.max(\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_MAX_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_MAX_GC_TIME_DESC), GARBAGE_COLLECTION, DURATION);\n+\tpublic static final IAggregator<IQuantity, ?> ALL_COLLECTION_AVG_GC_TIME = Aggregators.avg(\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_AVG_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_AVG_GC_TIME_DESC), GARBAGE_COLLECTION, DURATION);\n+\tpublic static final IAggregator<IQuantity, ?> ALL_COLLECTION_TOTAL_GC_TIME = Aggregators.sum(\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_TOTAL_GC_TIME),\n+\t\t\tMessages.getString(Messages.AGGR_ALL_COLLECTION_TOTAL_GC_TIME_DESC), GARBAGE_COLLECTION, DURATION);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkAggregators.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -86,0 +86,2 @@\n+\tpublic static final IItemFilter YOUNG_GARBAGE_COLLECTION = ItemFilters\n+\t\t\t.type(JdkTypeIDs.GC_COLLECTOR_YOUNG_GARBAGE_COLLECTION);\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/JdkFilters.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,0 +113,26 @@\n+\tpublic static final String AGGR_AVERAGE_GC_PAUSE = \"AGGR_AVERAGE_GC_PAUSE\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_AVERAGE_GC_PAUSE_DESC = \"AGGR_AVERAGE_GC_PAUSE_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_MAX_GC_TIME = \"AGGR_YOUNG_COLLECTION_MAX_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_MAX_GC_TIME_DESC = \"AGGR_YOUNG_COLLECTION_MAX_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_AVG_GC_TIME = \"AGGR_YOUNG_COLLECTION_AVG_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_AVG_GC_TIME_DESC = \"AGGR_YOUNG_COLLECTION_AVG_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME = \"AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME_DESC = \"AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_MAX_GC_TIME = \"AGGR_OLD_COLLECTION_MAX_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_MAX_GC_TIME_DESC = \"AGGR_OLD_COLLECTION_MAX_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_AVG_GC_TIME = \"AGGR_OLD_COLLECTION_AVG_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_AVG_GC_TIME_DESC = \"AGGR_OLD_COLLECTION_AVG_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_TOTAL_GC_TIME = \"AGGR_OLD_COLLECTION_TOTAL_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_TOTAL_GC_TIME_DESC = \"AGGR_OLD_COLLECTION_TOTAL_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_MAX_GC_TIME = \"AGGR_ALL_COLLECTION_MAX_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_MAX_GC_TIME_DESC = \"AGGR_ALL_COLLECTION_MAX_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_AVG_GC_TIME = \"AGGR_ALL_COLLECTION_AVG_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_AVG_GC_TIME_DESC = \"AGGR_ALL_COLLECTION_AVG_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_TOTAL_GC_TIME = \"AGGR_ALL_COLLECTION_TOTAL_GC_TIME\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_TOTAL_GC_TIME_DESC = \"AGGR_ALL_COLLECTION_TOTAL_GC_TIME_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_GC_COUNT = \"AGGR_YOUNG_COLLECTION_GC_COUNT\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_YOUNG_COLLECTION_GC_COUNT_DESC = \"AGGR_YOUNG_COLLECTION_GC_COUNT_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_GC_COUNT = \"AGGR_OLD_COLLECTION_GC_COUNT\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_OLD_COLLECTION_GC_COUNT_DESC = \"AGGR_OLD_COLLECTION_GC_COUNT_DESC\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_GC_COUNT = \"AGGR_ALL_COLLECTION_GC_COUNT\"; \/\/$NON-NLS-1$\n+\tpublic static final String AGGR_ALL_COLLECTION_GC_COUNT_DESC = \"AGGR_ALL_COLLECTION_GC_COUNT_DESC\"; \/\/$NON-NLS-1$\t\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/Messages.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -401,0 +401,2 @@\n+AGGR_AVERAGE_GC_PAUSE=Average Pause\n+AGGR_AVERAGE_GC_PAUSE_DESC=The duration of the average GC pause\n@@ -403,0 +405,24 @@\n+AGGR_YOUNG_COLLECTION_MAX_GC_TIME=Maximum GC Time\n+AGGR_YOUNG_COLLECTION_MAX_GC_TIME_DESC=The maximum duration for young garbage collection.\n+AGGR_YOUNG_COLLECTION_AVG_GC_TIME=Average GC Time\n+AGGR_YOUNG_COLLECTION_AVG_GC_TIME_DESC=The average duration for young garbage collection.\n+AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME=Total GC Time\n+AGGR_YOUNG_COLLECTION_TOTAL_GC_TIME_DESC=The total duration for young garbage collection.\n+AGGR_OLD_COLLECTION_MAX_GC_TIME=Maximum GC Time\n+AGGR_OLD_COLLECTION_MAX_GC_TIME_DESC=The maximum duration for old garbage collection.\n+AGGR_OLD_COLLECTION_AVG_GC_TIME=Average GC Time\n+AGGR_OLD_COLLECTION_AVG_GC_TIME_DESC=The average duration for old garbage collection.\n+AGGR_OLD_COLLECTION_TOTAL_GC_TIME=Total GC Time\n+AGGR_OLD_COLLECTION_TOTAL_GC_TIME_DESC=The total duration for old garbage collection.\n+AGGR_ALL_COLLECTION_MAX_GC_TIME=Maximum GC Time\n+AGGR_ALL_COLLECTION_MAX_GC_TIME_DESC=The maximum duration for all garbage collection.\n+AGGR_ALL_COLLECTION_AVG_GC_TIME=Average GC Time\n+AGGR_ALL_COLLECTION_AVG_GC_TIME_DESC=The average duration for all garbage collection.\n+AGGR_ALL_COLLECTION_TOTAL_GC_TIME=Total GC Time\n+AGGR_ALL_COLLECTION_TOTAL_GC_TIME_DESC=The total duration for all garbage collection.\n+AGGR_YOUNG_COLLECTION_GC_COUNT=GC Count\n+AGGR_YOUNG_COLLECTION_GC_COUNT_DESC=The count of GC for young garbage collection.\n+AGGR_OLD_COLLECTION_GC_COUNT=GC Count\n+AGGR_OLD_COLLECTION_GC_COUNT_DESC=The count of GC for old garbage collection.\n+AGGR_ALL_COLLECTION_GC_COUNT=GC Count\n+AGGR_ALL_COLLECTION_GC_COUNT_DESC=The count of GC for all garbage collection.\n","filename":"core\/org.openjdk.jmc.flightrecorder\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/jdk\/messages\/internal\/messages.properties","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}