{"files":[{"patch":"@@ -69,6 +69,0 @@\n-        <dependency>\n-            <groupId>org.projectlombok<\/groupId>\n-            <artifactId>lombok<\/artifactId>\n-            <version>1.18.12<\/version>\n-            <scope>provided<\/scope>\n-        <\/dependency>\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/pom.xml","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import lombok.ToString;\n@@ -39,1 +38,0 @@\n-import org.openjdk.jmc.flightrecorder.writer.api.TypedFieldBuilder;\n@@ -51,1 +49,0 @@\n-@ToString(of = {\"id\", \"name\", \"supertype\"})\n@@ -253,0 +250,5 @@\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"BaseType [id=\" + id + \", name=\" + name + \", supertype=\" + supertype + \"]\";\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/BaseType.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import lombok.ToString;\n@@ -45,1 +44,0 @@\n-@ToString(of = \"builtin\")\n@@ -140,0 +138,5 @@\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"BuiltinType [builtin=\" + builtin + \"]\";\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/BuiltinType.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,6 +36,0 @@\n-import lombok.ToString;\n-import org.openjdk.jmc.flightrecorder.writer.api.Type;\n-import org.openjdk.jmc.flightrecorder.writer.api.TypedFieldValue;\n-import org.openjdk.jmc.flightrecorder.writer.api.TypedValue;\n-import org.openjdk.jmc.flightrecorder.writer.api.Types;\n-\n@@ -44,0 +38,2 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.Types;\n+\n@@ -45,1 +41,0 @@\n-@ToString\n@@ -173,0 +168,5 @@\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"Chunk [writer=\" + writer + \", startTicks=\" + startTicks + \", startNanos=\" + startNanos + \"]\";\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/Chunk.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n@@ -45,2 +43,0 @@\n-@ToString(of = \"type\")\n-@EqualsAndHashCode\n@@ -202,0 +198,42 @@\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"ConstantPool [type=\" + type + \"]\";\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((constantMap == null) ? 0 : constantMap.hashCode());\n+\t\tresult = prime * result + ((reverseMap == null) ? 0 : reverseMap.hashCode());\n+\t\tresult = prime * result + ((type == null) ? 0 : type.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tConstantPool other = (ConstantPool) obj;\n+\t\tif (constantMap == null) {\n+\t\t\tif (other.constantMap != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!constantMap.equals(other.constantMap))\n+\t\t\treturn false;\n+\t\tif (reverseMap == null) {\n+\t\t\tif (other.reverseMap != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!reverseMap.equals(other.reverseMap))\n+\t\t\treturn false;\n+\t\tif (type == null) {\n+\t\t\tif (other.type != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!type.equals(other.type))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/ConstantPool.java","additions":42,"deletions":4,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -36,3 +36,0 @@\n-import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n-import org.openjdk.jmc.flightrecorder.writer.api.Type;\n@@ -51,2 +48,0 @@\n-@ToString\n-@EqualsAndHashCode\n@@ -65,1 +60,0 @@\n-\t@SuppressWarnings(\"unchecked\")\n@@ -98,1 +92,0 @@\n-\t@SuppressWarnings(\"unchecked\")\n@@ -112,0 +105,30 @@\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"ConstantPools [constantPoolMap=\" + constantPoolMap + \"]\";\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((constantPoolMap == null) ? 0 : constantPoolMap.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tConstantPools other = (ConstantPools) obj;\n+\t\tif (constantPoolMap == null) {\n+\t\t\tif (other.constantPoolMap != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!constantPoolMap.equals(other.constantPoolMap))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/ConstantPools.java","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import lombok.Getter;\n-import lombok.NonNull;\n@@ -46,1 +44,0 @@\n-\t@Getter\n@@ -48,1 +45,0 @@\n-\t@Getter\n@@ -51,2 +47,2 @@\n-\tImmutableMapEntry(@NonNull K key, V value) {\n-\t\tthis.key = key;\n+\tImmutableMapEntry(K key, V value) {\n+\t\tthis.key = Objects.requireNonNull(key);\n@@ -80,0 +76,10 @@\n+\n+\t@Override\n+\tpublic K getKey() {\n+\t\treturn key;\n+\t}\n+\n+\t@Override\n+\tpublic V getValue() {\n+\t\treturn value;\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/ImmutableMapEntry.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,8 +36,0 @@\n-import lombok.EqualsAndHashCode;\n-import lombok.NonNull;\n-import lombok.ToString;\n-import org.openjdk.jmc.flightrecorder.writer.api.Annotation;\n-import org.openjdk.jmc.flightrecorder.writer.api.NamedType;\n-import org.openjdk.jmc.flightrecorder.writer.api.Type;\n-import org.openjdk.jmc.flightrecorder.writer.api.Types;\n-\n@@ -46,0 +38,1 @@\n+import java.util.Objects;\n@@ -53,0 +46,4 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.Annotation;\n+import org.openjdk.jmc.flightrecorder.writer.api.NamedType;\n+import org.openjdk.jmc.flightrecorder.writer.api.Types;\n+\n@@ -54,2 +51,0 @@\n-@ToString\n-@EqualsAndHashCode\n@@ -274,1 +269,2 @@\n-\tint stringIndex(@NonNull String value) {\n+\tint stringIndex(String value) {\n+\t\tObjects.requireNonNull(value);\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/MetadataImpl.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,7 +36,0 @@\n-import org.openjdk.jmc.flightrecorder.writer.api.Annotation;\n-import org.openjdk.jmc.flightrecorder.writer.api.Type;\n-import org.openjdk.jmc.flightrecorder.writer.api.TypeStructure;\n-import org.openjdk.jmc.flightrecorder.writer.api.TypeStructureBuilder;\n-import org.openjdk.jmc.flightrecorder.writer.api.Recording;\n-import org.openjdk.jmc.flightrecorder.writer.api.TypedValue;\n-\n@@ -57,0 +50,5 @@\n+import org.openjdk.jmc.flightrecorder.writer.api.Annotation;\n+import org.openjdk.jmc.flightrecorder.writer.api.Recording;\n+import org.openjdk.jmc.flightrecorder.writer.api.TypeStructureBuilder;\n+import org.openjdk.jmc.flightrecorder.writer.api.TypedValue;\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/RecordingImpl.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,1 +36,3 @@\n-import lombok.ToString;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n@@ -41,1 +43,0 @@\n-import org.openjdk.jmc.flightrecorder.writer.api.TypedFieldBuilder;\n@@ -44,4 +45,0 @@\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-@ToString\n@@ -251,0 +248,5 @@\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"ResolvableType [typeName=\" + typeName + \", metadata=\" + metadata + \", delegate=\" + delegate + \"]\";\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/ResolvableType.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import lombok.NonNull;\n-import lombok.ToString;\n@@ -44,0 +42,1 @@\n+import java.util.Objects;\n@@ -50,1 +49,3 @@\n-\tSingleFieldMap(@NonNull String name, @NonNull TypedFieldValue value) {\n+\tSingleFieldMap(String name, TypedFieldValue value) {\n+\t\tObjects.nonNull(name);\n+\t\tObjects.nonNull(value);\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/SingleFieldMap.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import lombok.ToString;\n@@ -45,1 +44,0 @@\n-@ToString\n@@ -114,0 +112,6 @@\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"TypedFieldImpl [hashCode=\" + hashCode + \", name=\" + name + \", type=\" + type + \", isArray=\" + isArray\n+\t\t\t\t+ \", annotations=\" + annotations + \"]\";\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/TypedFieldImpl.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import lombok.NonNull;\n@@ -69,2 +68,2 @@\n-\tTypedValueImpl(@NonNull TypeImpl type, @NonNull Consumer<TypedValueBuilder> builderCallback) {\n-\t\tthis(type, getFieldValues(type, builderCallback));\n+\tTypedValueImpl(TypeImpl type, Consumer<TypedValueBuilder> builderCallback) {\n+\t\tthis(Objects.requireNonNull(type), getFieldValues(type, Objects.requireNonNull(builderCallback)));\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/TypedValueImpl.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import lombok.Getter;\n-import lombok.ToString;\n@@ -43,1 +41,0 @@\n-@ToString\n@@ -48,1 +45,0 @@\n-\t@Getter\n@@ -50,1 +46,0 @@\n-\t@Getter\n@@ -96,0 +91,13 @@\n+\n+\tpublic Type getType() {\n+\t\treturn type;\n+\t}\n+\n+\tpublic String getValue() {\n+\t\treturn value;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"Annotation [type=\" + type + \", value=\" + value + \"]\";\n+\t}\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/api\/Annotation.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+\n@@ -52,1 +53,0 @@\n-import org.openjdk.jmc.flightrecorder.writer.api.Types;\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/BuiltinTypeTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,3 @@\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n@@ -40,4 +43,0 @@\n-import org.openjdk.jmc.flightrecorder.writer.api.TypedFieldBuilder;\n-\n-import java.util.List;\n-import java.util.function.Consumer;\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/InvalidType.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n@@ -41,0 +40,2 @@\n+import java.io.ByteArrayOutputStream;\n+\n@@ -48,2 +49,0 @@\n-import java.io.ByteArrayOutputStream;\n-\n","filename":"core\/org.openjdk.jmc.flightrecorder.writer\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/writer\/RecordingImplTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}