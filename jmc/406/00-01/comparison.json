{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,3 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n@@ -81,0 +84,8 @@\n+\n+\tpublic static boolean isPasswordValid(final String password) {\n+\t\tPattern PASSWORD_PATTERN = Pattern\n+\t\t\t\t.compile(\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#(&)[{-}]:;',?\/*~$^+=<>]).{8,20}$\"); \/\/$NON-NLS-1$\n+\n+\t\tMatcher matcher = PASSWORD_PATTERN.matcher(password);\n+\t\treturn matcher.matches();\n+\t}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/security\/PersistentCredentials.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import org.openjdk.jmc.ui.common.security.PersistentCredentials;\n@@ -67,3 +68,0 @@\n-\tprivate static final Pattern PASSWORD_PATTERN = Pattern\n-\t\t\t.compile(\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#(&)[{-}]:;',?\/*~$^+=<>]).{8,20}$\"); \/\/$NON-NLS-1$\n-\n@@ -156,1 +154,1 @@\n-\t\tif (!isValid(passwordField.getText())) {\n+\t\tif (!PersistentCredentials.isPasswordValid(passwordField.getText())) {\n@@ -170,5 +168,0 @@\n-\tpublic static boolean isValid(final String password) {\n-\t\tMatcher matcher = PASSWORD_PATTERN.matcher(password);\n-\t\treturn matcher.matches();\n-\t}\n-\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/security\/MasterPasswordWizardPage.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.ui.test.security;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.openjdk.jmc.ui.common.security.PersistentCredentials;\n+\n+@SuppressWarnings(\"nls\")\n+public class MasterPasswordTest {\n+\n+\tprivate final String invalidPwdValue = \"Jmc20\";\n+\tprivate final String validPwdValue = \"Jmc@2022\";\n+\n+\t@Test\n+\tpublic void testInvalidMasterPassword() throws Exception {\n+\t\tboolean result = PersistentCredentials.isPasswordValid(invalidPwdValue);\n+\t\tassertFalse(result);\n+\t}\n+\n+\t@Test\n+\tpublic void testValidMasterPassword() throws Exception {\n+\t\tboolean result = PersistentCredentials.isPasswordValid(validPwdValue);\n+\t\tassertTrue(result);\n+\t}\n+\n+}\n","filename":"application\/tests\/org.openjdk.jmc.ui.test\/src\/test\/java\/org\/openjdk\/jmc\/ui\/test\/security\/MasterPasswordTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}