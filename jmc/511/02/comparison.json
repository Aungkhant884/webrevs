{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.time.Duration;\n@@ -47,0 +48,1 @@\n+import java.util.logging.Logger;\n@@ -87,0 +89,1 @@\n+\tprivate final static Logger LOGGER = Logger.getLogger(DependencyView.class.getName());\n@@ -119,10 +122,25 @@\n-\t\t\tview.modelState = ModelState.STARTED;\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items);\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t} else {\n-\t\t\t\tview.modelState = ModelState.FINISHED;\n-\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson, packageDepth));\n+\t\t\tfinal var start = System.currentTimeMillis();\n+\t\t\tException exception = null;\n+\t\t\tLOGGER.info(\"starting to create model\");\n+\t\t\ttry {\n+\t\t\t\tview.modelState = ModelState.STARTED;\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items, () -> isInvalid);\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t} else {\n+\t\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson, packageDepth));\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\texception = e;\n+\t\t\t\tthrow e;\n+\t\t\t} finally {\n+\t\t\t\tfinal var duration = Duration.ofMillis(System.currentTimeMillis() - start);\n+\t\t\t\tvar level = Level.INFO;\n+\t\t\t\tif (exception != null) {\n+\t\t\t\t\tlevel = Level.SEVERE;\n+\t\t\t\t}\n+\t\t\t\tLOGGER.log(level, \"creating model took \" + duration + \" isInvalid:\" + isInvalid, exception);\n@@ -168,1 +186,1 @@\n-\t\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(currentItems);\n+\t\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(currentItems, () -> false);\n","filename":"application\/org.openjdk.jmc.flightrecorder.dependencyview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/dependencyview\/DependencyView.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.time.Duration;\n@@ -46,0 +47,1 @@\n+import java.util.logging.Logger;\n@@ -73,0 +75,1 @@\n+\tprivate final static Logger LOGGER = Logger.getLogger(HeatmapView.class.getName());\n@@ -100,10 +103,25 @@\n-\t\t\tview.modelState = ModelState.STARTED;\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items);\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t} else {\n-\t\t\t\tview.modelState = ModelState.FINISHED;\n-\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson));\n+\t\t\tfinal var start = System.currentTimeMillis();\n+\t\t\tException exception = null;\n+\t\t\tLOGGER.info(\"starting to create model\");\n+\t\t\ttry {\n+\t\t\t\tview.modelState = ModelState.STARTED;\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items, () -> isInvalid);\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t} else {\n+\t\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson));\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\texception = e;\n+\t\t\t\tthrow e;\n+\t\t\t} finally {\n+\t\t\t\tfinal var duration = Duration.ofMillis(System.currentTimeMillis() - start);\n+\t\t\t\tvar level = Level.INFO;\n+\t\t\t\tif (exception != null) {\n+\t\t\t\t\tlevel = Level.SEVERE;\n+\t\t\t\t}\n+\t\t\t\tLOGGER.log(level, \"creating model took \" + duration + \" isInvalid:\" + isInvalid, exception);\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/heatmap\/views\/HeatmapView.java","additions":28,"deletions":10,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Datadog, Inc. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.function.BooleanSupplier;\n@@ -73,0 +74,11 @@\n+\tpublic static String toJsonString(IItemCollection items, BooleanSupplier stopFlag) {\n+\t\tStringWriter sw = new StringWriter();\n+\t\tIItemCollectionJsonSerializer marshaller = new IItemCollectionJsonSerializer(sw);\n+\t\ttry {\n+\t\t\tmarshaller.writeRecording(items, stopFlag);\n+\t\t} catch (IOException e) {\n+\t\t\tLOGGER.log(Level.SEVERE, \"Failed to serialize recording to JSON\", e);\n+\t\t}\n+\t\treturn sw.getBuffer().toString();\n+\t}\n+\n@@ -105,0 +117,23 @@\n+\tprivate void writeRecording(IItemCollection recording, BooleanSupplier stopFlag) throws IOException {\n+\t\twriteObjectBegin();\n+\t\tnextField(true, \"events\");\n+\t\twriteArrayBegin();\n+\t\tint count = 0;\n+\t\tfor (IItemIterable events : recording) {\n+\t\t\tif (stopFlag.getAsBoolean()) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tfor (IItem event : events) {\n+\t\t\t\tif (stopFlag.getAsBoolean()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tnextElement(count == 0);\n+\t\t\t\twriteEvent(event);\n+\t\t\t\tcount++;\n+\t\t\t}\n+\t\t}\n+\t\twriteArrayEnd();\n+\t\twriteObjectEnd();\n+\t\tflush();\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/json\/IItemCollectionJsonSerializer.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"}]}