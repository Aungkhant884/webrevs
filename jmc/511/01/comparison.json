{"files":[{"patch":"@@ -81,1 +81,0 @@\n-import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n@@ -84,0 +83,1 @@\n+import org.openjdk.jmc.ui.common.util.VisualizationUtil;\n@@ -123,1 +123,1 @@\n-\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items);\n+\t\t\tString eventsJson = VisualizationUtil.toJsonString(items);\n@@ -168,1 +168,1 @@\n-\t\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(currentItems);\n+\t\t\t\t\tString eventsJson = VisualizationUtil.toJsonString(currentItems);\n","filename":"application\/org.openjdk.jmc.flightrecorder.dependencyview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/dependencyview\/DependencyView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n@@ -70,0 +69,1 @@\n+import org.openjdk.jmc.ui.common.util.VisualizationUtil;\n@@ -104,1 +104,1 @@\n-\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items);\n+\t\t\tString eventsJson = VisualizationUtil.toJsonString(items);\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/heatmap\/views\/HeatmapView.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -12,1 +12,2 @@\n-Import-Package: org.eclipse.core.expressions\n+Import-Package: org.eclipse.core.expressions,\n+ org.openjdk.jmc.flightrecorder.serializers.json\n","filename":"application\/org.openjdk.jmc.ui.common\/META-INF\/MANIFEST.MF","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.ui.common.util;\n+\n+import org.openjdk.jmc.common.item.IItemCollection;\n+import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n+\n+\/**\n+ * This helper class is to synchronize the visualization threads (Dependency View, Heatmap View)\n+ * This solves java.lang.OutOfMemoryError: Java heap space\n+ *\/\n+public final class VisualizationUtil {\n+\t\/**\n+\t * Do not instantiate.\n+\t *\/\n+\tprivate VisualizationUtil() {\n+\t}\n+\n+\t\/**\n+\t * This method calls the method toJsonString present in core class IItemCollectionJsonSerializer\n+\t * \n+\t * @param items\n+\t * @return String\n+\t *\/\n+\tpublic synchronized static String toJsonString(IItemCollection items) {\n+\t\treturn IItemCollectionJsonSerializer.toJsonString(items);\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/util\/VisualizationUtil.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}