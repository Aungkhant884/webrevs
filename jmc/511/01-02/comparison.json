{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.time.Duration;\n@@ -47,0 +48,1 @@\n+import java.util.logging.Logger;\n@@ -81,0 +83,1 @@\n+import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n@@ -83,1 +86,0 @@\n-import org.openjdk.jmc.ui.common.util.VisualizationUtil;\n@@ -87,0 +89,1 @@\n+\tprivate final static Logger LOGGER = Logger.getLogger(DependencyView.class.getName());\n@@ -119,10 +122,25 @@\n-\t\t\tview.modelState = ModelState.STARTED;\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tString eventsJson = VisualizationUtil.toJsonString(items);\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t} else {\n-\t\t\t\tview.modelState = ModelState.FINISHED;\n-\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson, packageDepth));\n+\t\t\tfinal var start = System.currentTimeMillis();\n+\t\t\tException exception = null;\n+\t\t\tLOGGER.info(\"starting to create model\");\n+\t\t\ttry {\n+\t\t\t\tview.modelState = ModelState.STARTED;\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items, () -> isInvalid);\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t} else {\n+\t\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson, packageDepth));\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\texception = e;\n+\t\t\t\tthrow e;\n+\t\t\t} finally {\n+\t\t\t\tfinal var duration = Duration.ofMillis(System.currentTimeMillis() - start);\n+\t\t\t\tvar level = Level.INFO;\n+\t\t\t\tif (exception != null) {\n+\t\t\t\t\tlevel = Level.SEVERE;\n+\t\t\t\t}\n+\t\t\t\tLOGGER.log(level, \"creating model took \" + duration + \" isInvalid:\" + isInvalid, exception);\n@@ -168,1 +186,1 @@\n-\t\t\t\t\tString eventsJson = VisualizationUtil.toJsonString(currentItems);\n+\t\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(currentItems, () -> false);\n","filename":"application\/org.openjdk.jmc.flightrecorder.dependencyview\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/dependencyview\/DependencyView.java","additions":30,"deletions":12,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.time.Duration;\n@@ -46,0 +47,1 @@\n+import java.util.logging.Logger;\n@@ -67,0 +69,1 @@\n+import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n@@ -69,1 +72,0 @@\n-import org.openjdk.jmc.ui.common.util.VisualizationUtil;\n@@ -73,0 +75,1 @@\n+\tprivate final static Logger LOGGER = Logger.getLogger(HeatmapView.class.getName());\n@@ -100,10 +103,25 @@\n-\t\t\tview.modelState = ModelState.STARTED;\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tString eventsJson = VisualizationUtil.toJsonString(items);\n-\t\t\tif (isInvalid) {\n-\t\t\t\treturn;\n-\t\t\t} else {\n-\t\t\t\tview.modelState = ModelState.FINISHED;\n-\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson));\n+\t\t\tfinal var start = System.currentTimeMillis();\n+\t\t\tException exception = null;\n+\t\t\tLOGGER.info(\"starting to create model\");\n+\t\t\ttry {\n+\t\t\t\tview.modelState = ModelState.STARTED;\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tString eventsJson = IItemCollectionJsonSerializer.toJsonString(items, () -> isInvalid);\n+\t\t\t\tif (isInvalid) {\n+\t\t\t\t\treturn;\n+\t\t\t\t} else {\n+\t\t\t\t\tview.modelState = ModelState.FINISHED;\n+\t\t\t\t\tDisplayToolkit.inDisplayThread().execute(() -> view.setModel(items, eventsJson));\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\texception = e;\n+\t\t\t\tthrow e;\n+\t\t\t} finally {\n+\t\t\t\tfinal var duration = Duration.ofMillis(System.currentTimeMillis() - start);\n+\t\t\t\tvar level = Level.INFO;\n+\t\t\t\tif (exception != null) {\n+\t\t\t\t\tlevel = Level.SEVERE;\n+\t\t\t\t}\n+\t\t\t\tLOGGER.log(level, \"creating model took \" + duration + \" isInvalid:\" + isInvalid, exception);\n","filename":"application\/org.openjdk.jmc.flightrecorder.heatmap\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/heatmap\/views\/HeatmapView.java","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -12,2 +12,1 @@\n-Import-Package: org.eclipse.core.expressions,\n- org.openjdk.jmc.flightrecorder.serializers.json\n+Import-Package: org.eclipse.core.expressions\n","filename":"application\/org.openjdk.jmc.ui.common\/META-INF\/MANIFEST.MF","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.ui.common.util;\n-\n-import org.openjdk.jmc.common.item.IItemCollection;\n-import org.openjdk.jmc.flightrecorder.serializers.json.IItemCollectionJsonSerializer;\n-\n-\/**\n- * This helper class is to synchronize the visualization threads (Dependency View, Heatmap View)\n- * This solves java.lang.OutOfMemoryError: Java heap space\n- *\/\n-public final class VisualizationUtil {\n-\t\/**\n-\t * Do not instantiate.\n-\t *\/\n-\tprivate VisualizationUtil() {\n-\t}\n-\n-\t\/**\n-\t * This method calls the method toJsonString present in core class IItemCollectionJsonSerializer\n-\t * \n-\t * @param items\n-\t * @return String\n-\t *\/\n-\tpublic synchronized static String toJsonString(IItemCollection items) {\n-\t\treturn IItemCollectionJsonSerializer.toJsonString(items);\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/util\/VisualizationUtil.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2021, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Datadog, Inc. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.util.function.BooleanSupplier;\n@@ -73,0 +74,11 @@\n+\tpublic static String toJsonString(IItemCollection items, BooleanSupplier stopFlag) {\n+\t\tStringWriter sw = new StringWriter();\n+\t\tIItemCollectionJsonSerializer marshaller = new IItemCollectionJsonSerializer(sw);\n+\t\ttry {\n+\t\t\tmarshaller.writeRecording(items, stopFlag);\n+\t\t} catch (IOException e) {\n+\t\t\tLOGGER.log(Level.SEVERE, \"Failed to serialize recording to JSON\", e);\n+\t\t}\n+\t\treturn sw.getBuffer().toString();\n+\t}\n+\n@@ -105,0 +117,23 @@\n+\tprivate void writeRecording(IItemCollection recording, BooleanSupplier stopFlag) throws IOException {\n+\t\twriteObjectBegin();\n+\t\tnextField(true, \"events\");\n+\t\twriteArrayBegin();\n+\t\tint count = 0;\n+\t\tfor (IItemIterable events : recording) {\n+\t\t\tif (stopFlag.getAsBoolean()) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tfor (IItem event : events) {\n+\t\t\t\tif (stopFlag.getAsBoolean()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tnextElement(count == 0);\n+\t\t\t\twriteEvent(event);\n+\t\t\t\tcount++;\n+\t\t\t}\n+\t\t}\n+\t\twriteArrayEnd();\n+\t\twriteObjectEnd();\n+\t\tflush();\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.flightrecorder.serializers\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/serializers\/json\/IItemCollectionJsonSerializer.java","additions":37,"deletions":2,"binary":false,"changes":39,"status":"modified"}]}