{"files":[{"patch":"@@ -41,2 +41,0 @@\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n@@ -44,1 +42,0 @@\n-import java.util.Collections;\n@@ -54,1 +51,1 @@\n-import org.openjdk.jmc.agent.util.VersionUtils;\n+import org.openjdk.jmc.agent.util.ModuleUtils;\n@@ -78,1 +75,1 @@\n-\t\topenUnsafePackage(instrumentation);\n+\t\tModuleUtils.openUnsafePackage(instrumentation);\n@@ -82,34 +79,0 @@\n-\t\/**\n-\t * Allows the agent's module to access the Unsafe class\n-\t *\/\n-\tprivate static void openUnsafePackage(Instrumentation instrumentation) {\n-\t\tif (VersionUtils.getFeatureVersion() >= 11) {\n-\t\t\tMethod redefineModule = getRedefineModuleMethod();\n-\n-\t\t\ttry {\n-\t\t\t\tredefineModule.invoke(instrumentation, Object.class.getModule(), Collections.emptySet(), \/\/ extraReads\n-\t\t\t\t\t\tCollections.emptyMap(), \/\/ extraExports\n-\t\t\t\t\t\tCollections.singletonMap(\"jdk.internal.misc\", Collections.singleton(Agent.class.getModule())), \/\/ extraOpens\n-\t\t\t\t\t\tCollections.emptySet(), \/\/ extraUses\n-\t\t\t\t\t\tCollections.emptyMap() \/\/ extraProvides\n-\t\t\t\t);\n-\t\t\t} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n-\t\t\t\tSystem.out.println(\n-\t\t\t\t\t\t\"Could not find, or access, any defineClass method. The agent will not work. If on JDK 11, try adding  --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\"); \/\/$NON-NLS-1$\n-\t\t\t\te.printStackTrace();\n-\t\t\t\tSystem.out.flush();\n-\t\t\t\tSystem.exit(3);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate static Method getRedefineModuleMethod() {\n-\t\tfor (java.lang.reflect.Method method : Instrumentation.class.getDeclaredMethods()) {\n-\t\t\tif (method.getName().equals(\"redefineModule\")) {\n-\t\t\t\treturn method;\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn null;\n-\t}\n-\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Agent.java","additions":2,"deletions":39,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-import org.openjdk.jmc.agent.jfr.VersionResolver;\n-import org.openjdk.jmc.agent.jfr.VersionResolver.JFRVersion;\n@@ -51,0 +49,2 @@\n+import org.openjdk.jmc.agent.util.VersionUtils;\n+import org.openjdk.jmc.agent.util.VersionUtils.JFRVersion;\n@@ -92,1 +92,1 @@\n-\t\tif (VersionResolver.getAvailableJFRVersion() == JFRVersion.NONE) {\n+\t\tif (VersionUtils.getAvailableJFRVersion() == JFRVersion.NONE) {\n@@ -99,1 +99,1 @@\n-\t\t\tClassVisitor visitor = VersionResolver.getAvailableJFRVersion() == JFRVersion.JFRNEXT\n+\t\t\tClassVisitor visitor = VersionUtils.getAvailableJFRVersion() == JFRVersion.JFRNEXT\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Transformer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,64 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.agent.jfr;\n-\n-public final class VersionResolver {\n-\tprivate final static JFRVersion availableJFRVersion;\n-\n-\tpublic enum JFRVersion {\n-\t\tJFR, JFRNEXT, NONE\n-\t}\n-\n-\tstatic {\n-\t\tJFRVersion type = null;\n-\t\ttry {\n-\t\t\tClass.forName(\"com.oracle.jrockit.jfr.InstantEvent\"); \/\/$NON-NLS-1$\n-\t\t\ttype = JFRVersion.JFR;\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\ttry {\n-\t\t\t\tClass.forName(\"jdk.jfr.ValueDescriptor\"); \/\/$NON-NLS-1$\n-\t\t\t\ttype = JFRVersion.JFRNEXT;\n-\t\t\t} catch (ClassNotFoundException e2) {\n-\t\t\t\ttype = JFRVersion.NONE;\n-\t\t\t}\n-\t\t}\n-\t\tavailableJFRVersion = type;\n-\t}\n-\n-\tprivate VersionResolver() {\n-\t}\n-\n-\tpublic static JFRVersion getAvailableJFRVersion() {\n-\t\treturn availableJFRVersion;\n-\t}\n-}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/VersionResolver.java","additions":0,"deletions":64,"binary":false,"changes":64,"status":"deleted"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.OptionalInt;\n@@ -206,1 +207,2 @@\n-\t\tif (isPreJava9()) {\n+\t\tOptionalInt featureVersion = VersionUtils.getFeatureVersion();\n+\t\tif (featureVersion.isPresent() && featureVersion.getAsInt() < 9) {\n@@ -237,9 +239,0 @@\n-\tprivate static boolean isPreJava9() {\n-\t\ttry {\n-\t\t\tClass.forName(\"java.lang.Module\");\n-\t\t\treturn false;\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\treturn true;\n-\t\t}\n-\t}\n-\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/AccessUtils.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.util;\n+\n+import java.lang.instrument.Instrumentation;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.logging.Level;\n+\n+import org.openjdk.jmc.agent.Agent;\n+\n+\/**\n+ * Utility for dealing with module system specifics.\n+ *\/\n+public class ModuleUtils {\n+\n+\t\/**\n+\t * Allows the agent's module to access the Unsafe class when running on JDK 11 or newer.\n+\t *\/\n+\tpublic static void openUnsafePackage(Instrumentation instrumentation) {\n+\t\tVersionUtils.getFeatureVersion().ifPresent(featureVersion -> {\n+\t\t\tif (featureVersion >= 11) {\n+\n+\t\t\t\tMethod redefineModule = getRedefineModuleMethod();\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tredefineModule.invoke(instrumentation, Object.class.getModule(), Collections.emptySet(), \/\/ extraReads\n+\t\t\t\t\t\t\tCollections.emptyMap(), \/\/ extraExports\n+\t\t\t\t\t\t\tCollections.singletonMap(\"jdk.internal.misc\",\n+\t\t\t\t\t\t\t\t\tCollections.singleton(Agent.class.getModule())), \/\/ extraOpens\n+\t\t\t\t\t\t\tCollections.emptySet(), \/\/ extraUses\n+\t\t\t\t\t\t\tCollections.emptyMap() \/\/ extraProvides\n+\t\t\t\t\t);\n+\t\t\t\t} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+\t\t\t\t\tAgent.getLogger().log(Level.WARNING, \"Failed to open module\", e); \/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprivate static Method getRedefineModuleMethod() {\n+\t\tfor (java.lang.reflect.Method method : Instrumentation.class.getDeclaredMethods()) {\n+\t\t\tif (method.getName().equals(\"redefineModule\")) {\n+\t\t\t\treturn method;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn null;\n+\t}\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/ModuleUtils.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -2,2 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +36,1 @@\n+import java.util.OptionalInt;\n@@ -38,1 +38,1 @@\n-public class VersionUtils {\n+public final class VersionUtils {\n@@ -40,0 +40,1 @@\n+\tprivate static final JFRVersion AVAILABLE_JFR_VERSION = determineJFRVersion();\n@@ -42,2 +43,35 @@\n-\tpublic static int getFeatureVersion() {\n-\t\treturn FEATURE_VERSION;\n+\tpublic enum JFRVersion {\n+\t\tJFR, JFRNEXT, NONE\n+\t}\n+\n+\tprivate VersionUtils() {\n+\t}\n+\n+\tprivate static JFRVersion determineJFRVersion() {\n+\t\tJFRVersion type = null;\n+\t\ttry {\n+\t\t\tClass.forName(\"com.oracle.jrockit.jfr.InstantEvent\"); \/\/$NON-NLS-1$\n+\t\t\ttype = JFRVersion.JFR;\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\ttry {\n+\t\t\t\tClass.forName(\"jdk.jfr.ValueDescriptor\"); \/\/$NON-NLS-1$\n+\t\t\t\ttype = JFRVersion.JFRNEXT;\n+\t\t\t} catch (ClassNotFoundException e2) {\n+\t\t\t\ttype = JFRVersion.NONE;\n+\t\t\t}\n+\t\t}\n+\t\treturn type;\n+\t}\n+\n+\t\/**\n+\t * Returns the current JVM's JFR version.\n+\t *\/\n+\tpublic static JFRVersion getAvailableJFRVersion() {\n+\t\treturn AVAILABLE_JFR_VERSION;\n+\t}\n+\n+\t\/**\n+\t * Returns the current JVM's feature (major) version, e.g. 8, 11, or 15.\n+\t *\/\n+\tpublic static OptionalInt getFeatureVersion() {\n+\t\treturn FEATURE_VERSION == 0 ? OptionalInt.empty() : OptionalInt.of(FEATURE_VERSION);\n@@ -70,5 +104,0 @@\n-\t\t\tSystem.out.println(\"Could not identify Java version. The agent will not work\"); \/\/$NON-NLS-1$\n-\t\t\te.printStackTrace();\n-\t\t\tSystem.out.flush();\n-\t\t\tSystem.exit(3);\n-\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/VersionUtils.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"}]}