{"files":[{"patch":"@@ -133,1 +133,1 @@\n-\t\t\t\t\t\t\t<argLine> -Djava.security.manager -Djava.security.policy=target\/test-classes\/org\/openjdk\/jmc\/agent\/test\/failing_control_permission.policy --add-opens java.base\/jdk.internal.misc=ALL-UNNAMED\n+\t\t\t\t\t\t\t<argLine> -Djava.security.manager -Djava.security.policy=target\/test-classes\/org\/openjdk\/jmc\/agent\/test\/failing_control_permission.policy\n@@ -146,1 +146,1 @@\n-\t\t\t\t\t\t\t<argLine> --add-opens java.base\/jdk.internal.misc=ALL-UNNAMED\n+\t\t\t\t\t\t\t<argLine>\n@@ -159,1 +159,1 @@\n-\t\t\t\t\t\t\t<argLine> --add-opens java.base\/jdk.internal.misc=ALL-UNNAMED\n+\t\t\t\t\t\t\t<argLine>\n@@ -172,1 +172,1 @@\n-\t\t\t\t\t\t\t<argLine> --add-opens java.base\/jdk.internal.misc=ALL-UNNAMED\n+\t\t\t\t\t\t\t<argLine>\n@@ -185,1 +185,1 @@\n-\t\t\t\t\t\t\t<argLine> --add-opens java.base\/jdk.internal.misc=ALL-UNNAMED\n+\t\t\t\t\t\t\t<argLine>\n","filename":"agent\/pom.xml","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * \n+ *\n@@ -13,1 +13,1 @@\n- * \n+ *\n@@ -16,1 +16,1 @@\n- * \n+ *\n@@ -20,1 +20,1 @@\n- * \n+ *\n@@ -23,1 +23,1 @@\n- * \n+ *\n@@ -41,0 +41,2 @@\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n@@ -42,0 +44,1 @@\n+import java.util.Collections;\n@@ -51,0 +54,1 @@\n+import org.openjdk.jmc.agent.util.VersionUtils;\n@@ -74,0 +78,1 @@\n+\t\topenUnsafePackage(instrumentation);\n@@ -77,0 +82,34 @@\n+\t\/**\n+\t * Allows the agent's module to access the Unsafe class\n+\t *\/\n+\tprivate static void openUnsafePackage(Instrumentation instrumentation) {\n+\t\tif (VersionUtils.getFeatureVersion() >= 11) {\n+\t\t\tMethod redefineModule = getRedefineModuleMethod();\n+\n+\t\t\ttry {\n+\t\t\t\tredefineModule.invoke(instrumentation, Object.class.getModule(), Collections.emptySet(), \/\/ extraReads\n+\t\t\t\t\t\tCollections.emptyMap(), \/\/ extraExports\n+\t\t\t\t\t\tCollections.singletonMap(\"jdk.internal.misc\", Collections.singleton(Agent.class.getModule())), \/\/ extraOpens\n+\t\t\t\t\t\tCollections.emptySet(), \/\/ extraUses\n+\t\t\t\t\t\tCollections.emptyMap() \/\/ extraProvides\n+\t\t\t\t);\n+\t\t\t} catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {\n+\t\t\t\tSystem.out.println(\n+\t\t\t\t\t\t\"Could not find, or access, any defineClass method. The agent will not work. If on JDK 11, try adding  --add-exports java.base\/jdk.internal.misc=ALL-UNNAMED\"); \/\/$NON-NLS-1$\n+\t\t\t\te.printStackTrace();\n+\t\t\t\tSystem.out.flush();\n+\t\t\t\tSystem.exit(3);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static Method getRedefineModuleMethod() {\n+\t\tfor (java.lang.reflect.Method method : Instrumentation.class.getDeclaredMethods()) {\n+\t\t\tif (method.getName().equals(\"redefineModule\")) {\n+\t\t\t\treturn method;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn null;\n+\t}\n+\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Agent.java","additions":44,"deletions":5,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.agent.util;\n+\n+import java.lang.reflect.Method;\n+\n+public class VersionUtils {\n+\n+\tprivate static final int FEATURE_VERSION = determineFeatureVersion();\n+\n+\tpublic static int getFeatureVersion() {\n+\t\treturn FEATURE_VERSION;\n+\t}\n+\n+\tprivate static int determineFeatureVersion() {\n+\t\ttry {\n+\t\t\tMethod versionMethod = getMethod(Runtime.class, \"version\");\n+\n+\t\t\t\/\/ pre Java 9\n+\t\t\tif (versionMethod == null) {\n+\t\t\t\tString version = System.getProperty(\"java.version\");\n+\t\t\t\treturn Integer.valueOf(version.substring(2, 3));\n+\t\t\t}\n+\n+\t\t\tObject version = versionMethod.invoke(null);\n+\n+\t\t\tMethod featureMethod = getMethod(version.getClass(), \"feature\");\n+\n+\t\t\t\/\/ Java 10+\n+\t\t\tif (featureMethod != null) {\n+\t\t\t\treturn (int) featureMethod.invoke(version);\n+\t\t\t} else {\n+\t\t\t\t\/\/ Java 9\n+\t\t\t\tMethod majorMethod = getMethod(version.getClass(), \"major\");\n+\t\t\t\treturn (int) majorMethod.invoke(version);\n+\t\t\t}\n+\n+\t\t} catch (Exception e) {\n+\t\t\tSystem.out.println(\"Could not identify Java version. The agent will not work\"); \/\/$NON-NLS-1$\n+\t\t\te.printStackTrace();\n+\t\t\tSystem.out.flush();\n+\t\t\tSystem.exit(3);\n+\n+\t\t\treturn 0;\n+\t\t}\n+\t}\n+\n+\tprivate static Method getMethod(Class<?> clazz, String methodName) throws Exception {\n+\t\ttry {\n+\t\t\treturn clazz.getDeclaredMethod(methodName);\n+\t\t} catch (NoSuchMethodException e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/VersionUtils.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}