{"files":[{"patch":"@@ -63,1 +63,1 @@\n-\t\t\n+\n@@ -74,4 +74,4 @@\n-\t\t\t\t\/\/ FIXME: Optimization, should do all transforms to one class in one go, instead of creating one class writer per transform.\n-\t\t\t\tclassfileBuffer = doTransform(td, classfileBuffer, definingClassLoader, classBeingRedefined,\n-\t\t\t\t\t\tprotectionDomain, inspectionClassLoader);\n-\t\t\t\ttd.setPendingTransforms(false);\n+\t\t\t\/\/ FIXME: Optimization, should do all transforms to one class in one go, instead of creating one class writer per transform.\n+\t\t\tclassfileBuffer = doTransform(td, classfileBuffer, definingClassLoader, classBeingRedefined,\n+\t\t\t\t\tprotectionDomain, inspectionClassLoader);\n+\t\t\ttd.setPendingTransforms(false);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Transformer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -63,6 +63,5 @@\n- * JMC-6895\n- * \n- * When the agent instruments a class being loaded by a custom classloader, it will first instrument it in\n- * the AppClassloader. Since the agent then checks on future retransforms if the class is already there, it will \n- * use this version when it is called from the custom ClassLoader's loadClass chain. When invoking the instrumented method\n- * the old pre-instrumented method will be run instead.\n+ * JMC-6895 When the agent instruments a class being loaded by a custom classloader, it will first\n+ * instrument it in the AppClassloader. Since the agent then checks on future retransforms if the\n+ * class is already there, it will use this version when it is called from the custom ClassLoader's\n+ * loadClass chain. When invoking the instrumented method the old pre-instrumented method will be\n+ * run instead.\n@@ -71,1 +70,1 @@\n-\t\n+\n@@ -83,17 +82,6 @@\n-\tprivate static final String XML_DESCRIPTION = \"<jfragent>\"\n-\t\t\t+ \"<events>\"\n-\t\t\t+ \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n-\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\"\n-\t\t\t+ \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\"\n-\t\t\t+ \"<path>\" + EVENT_PATH + \"<\/path>\"\n-\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n-\t\t\t+ \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n-\t\t\t+ \"<method>\"\n-\t\t\t+ \"<name>\" + METHOD_NAME + \"<\/name>\"\n-\t\t\t+ \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n-\t\t\t+ \"<\/method>\"\n-\t\t\t+ \"<location>WRAP<\/location>\"\n-\t\t\t+ \"<\/event>\"\n-\t\t\t+ \"<\/events>\"\n-\t\t\t+ \"<\/jfragent>\";\n-\t\n+\tprivate static final String XML_DESCRIPTION = \"<jfragent>\" + \"<events>\" + \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n+\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\" + \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\" + \"<path>\"\n+\t\t\t+ EVENT_PATH + \"<\/path>\" + \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n+\t\t\t+ \"<method>\" + \"<name>\" + METHOD_NAME + \"<\/name>\" + \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n+\t\t\t+ \"<\/method>\" + \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\n+\n@@ -105,2 +93,3 @@\n-\t\t\tfor(int i = 0; i < 10; i++) {\n-\t\t\t\treproducer.getDeclaredMethod(\"testWithoutException\").invoke(reproducer.getDeclaredConstructor().newInstance());\n+\t\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\t\treproducer.getDeclaredMethod(\"testWithoutException\")\n+\t\t\t\t\t\t.invoke(reproducer.getDeclaredConstructor().newInstance());\n@@ -113,2 +102,2 @@\n-\t\n-\tprivate void doDefineEventProbes(String xmlDescription) throws Exception  {\n+\n+\tprivate void doDefineEventProbes(String xmlDescription) throws Exception {\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestCustomClassloader.java","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -3,2 +3,3 @@\n-   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n-\n+   Copyright (c) 2020 Oracle and\/or its affiliates. All rights reserved.\n+   Copyright (c) 2020 Red Hat Inc. All rights reserved.\n+   \n","filename":"agent\/src\/test\/resources\/org\/openjdk\/jmc\/agent\/test\/jfrprobes_simple_2.xml","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}