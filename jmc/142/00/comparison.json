{"files":[{"patch":"@@ -114,0 +114,1 @@\n+\t\t\t\t\t\t<exclude>TestCustomClassloader.java<\/exclude>\n@@ -151,0 +152,13 @@\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>test-custom-classloader<\/id>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>integration-test<\/goal>\n+\t\t\t\t\t\t\t<goal>verify<\/goal>\n+\t\t\t\t\t\t<\/goals>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<argLine> --add-opens java.base\/jdk.internal.misc=ALL-UNNAMED\n+\t\t\t\t\t\t\t\t-XX:+FlightRecorder -javaagent:target\/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar=target\/test-classes\/org\/openjdk\/jmc\/agent\/test\/jfrprobes_simple_2.xml\n+\t\t\t\t\t\t\t\t -cp target\/org.openjdk.jmc.agent-1.0.0-SNAPSHOT.jar:target\/test-classes\/ <\/argLine>\n+\t\t\t\t\t\t\t<includes>TestCustomClassloader.java<\/includes>\n+\t\t\t\t\t\t<\/configuration>\n+\t\t\t\t\t<\/execution>\n","filename":"agent\/pom.xml","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -63,4 +63,1 @@\n-\t\tif (!registry.hasPendingTransforms(className)) {\n-\t\t\treturn registry.isRevertIntrumentation() ? classfileBuffer : null;\n-\t\t}\n-\n+\t\t\n@@ -77,1 +74,0 @@\n-\t\t\tif (td.isPendingTransforms()) {\n@@ -82,1 +78,0 @@\n-\t\t\t}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Transformer.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -104,7 +104,3 @@\n-\t\ttry {\n-\t\t\treturn Class.forName(TypeUtils.getCanonicalName(transformDescriptor.getEventClassName()));\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\tbyte[] eventClass = JFRNextEventClassGenerator.generateEventClass(transformDescriptor, inspectionClass);\n-\t\t\treturn TypeUtils.defineClass(transformDescriptor.getEventClassName(), eventClass, 0, eventClass.length,\n-\t\t\t\t\tdefiningClassLoader, protectionDomain);\n-\t\t}\n+\t\tbyte[] eventClass = JFRNextEventClassGenerator.generateEventClass(transformDescriptor, inspectionClass);\n+\t\treturn TypeUtils.defineClass(transformDescriptor.getEventClassName(), eventClass, 0, eventClass.length,\n+\t\t\t\tdefiningClassLoader, protectionDomain);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrnext\/impl\/JFRNextClassVisitor.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020 Red Hat Inc. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+package org.openjdk.jmc.agent.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+import javax.management.JMX;\n+import javax.management.ObjectName;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.objectweb.asm.Type;\n+import org.openjdk.jmc.agent.TransformDescriptor;\n+import org.openjdk.jmc.agent.TransformRegistry;\n+import org.openjdk.jmc.agent.Transformer;\n+import org.openjdk.jmc.agent.impl.DefaultTransformRegistry;\n+import org.openjdk.jmc.agent.jfr.JFRTransformDescriptor;\n+import org.openjdk.jmc.agent.jmx.AgentControllerMXBean;\n+import org.openjdk.jmc.agent.test.util.TestToolkit;\n+\n+\/***\n+ * JMC-6895\n+ * \n+ * When the agent instruments a class being loaded by a custom classloader, it will first instrument it in\n+ * the AppClassloader. Since the agent then checks on future retransforms if the class is already there, it will \n+ * use this version when it is called from the custom ClassLoader's loadClass chain. When invoking the instrumented method\n+ * the old pre-instrumented method will be run instead.\n+ *\/\n+public class TestCustomClassloader {\n+\t\n+\tprivate static Logger logger = Logger.getLogger(TestCustomClassloader.class.getName());\n+\n+\tprivate static final String AGENT_OBJECT_NAME = \"org.openjdk.jmc.jfr.agent:type=AgentController\"; \/\/$NON-NLS-1$\n+\tprivate static final String EVENT_ID = \"demo.jfr.test6\";\n+\tprivate static final String EVENT_NAME = \"JFR Hello World Event 1 %TEST_NAME%\";\n+\tprivate static final String EVENT_DESCRIPTION = \"JFR Hello World Event 1 %TEST_NAME%\";\n+\tprivate static final String EVENT_PATH = \"demo\/jfrhelloworldevent\";\n+\tprivate static final String EVENT_CLASS_NAME = \"org.openjdk.jmc.agent.test.TestDummy\";\n+\tprivate static final String METHOD_NAME = \"testWithoutException\";\n+\tprivate static final String METHOD_DESCRIPTOR = \"()V\";\n+\n+\tprivate static final String XML_DESCRIPTION = \"<jfragent>\"\n+\t\t\t+ \"<events>\"\n+\t\t\t+ \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n+\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\"\n+\t\t\t+ \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\"\n+\t\t\t+ \"<path>\" + EVENT_PATH + \"<\/path>\"\n+\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n+\t\t\t+ \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n+\t\t\t+ \"<method>\"\n+\t\t\t+ \"<name>\" + METHOD_NAME + \"<\/name>\"\n+\t\t\t+ \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n+\t\t\t+ \"<\/method>\"\n+\t\t\t+ \"<location>WRAP<\/location>\"\n+\t\t\t+ \"<\/event>\"\n+\t\t\t+ \"<\/events>\"\n+\t\t\t+ \"<\/jfragent>\";\n+\t\n+\t@Test\n+\tpublic void testCorrectMethodDescriptor() throws Exception {\n+\t\ttry {\n+\t\t\tClassLoader c = new CustomClassLoader();\n+\t\t\tClass reproducer = c.loadClass(TestDummy.class.getName());\n+\t\t\tfor(int i = 0; i < 10; i++) {\n+\t\t\t\treproducer.getDeclaredMethod(\"testWithoutException\").invoke(reproducer.getDeclaredConstructor().newInstance());\n+\t\t\t}\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\tlogger.severe(\"===================================\" + e.toString());\n+\t\t\tAssert.fail();\n+\t\t}\n+\t}\n+\t\n+\tprivate void doDefineEventProbes(String xmlDescription) throws Exception  {\n+\t\tAgentControllerMXBean mbean = JMX.newMXBeanProxy(ManagementFactory.getPlatformMBeanServer(),\n+\t\t\t\tnew ObjectName(AGENT_OBJECT_NAME), AgentControllerMXBean.class, false);\n+\t\tmbean.defineEventProbes(xmlDescription);\n+\t}\n+\n+\tprivate class CustomClassLoader extends ClassLoader {\n+\n+\t\t@Override\n+\t\tprotected Class<?> findClass(String moduleName, String name) {\n+\t\t\ttry {\n+\t\t\t\tif (name.equals(TestDummy.class.getName())) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\treturn defineClass(TestDummy.class.getName(), TestToolkit.getByteCode(TestDummy.class), 0,\n+\t\t\t\t\t\t\t\tTestToolkit.getByteCode(TestDummy.class).length);\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\tSystem.err.println(\"Could not define class\");\n+\t\t\t\t\t\treturn null;\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\treturn loadClass(name, false);\n+\t\t\t\t}\n+\t\t\t} catch (ClassNotFoundException e) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Class<?> loadClass(String name) throws ClassNotFoundException {\n+\t\t\tif (name.equals(TestDummy.class.getName())) {\n+\t\t\t\treturn findClass(\"\", name);\n+\t\t\t}\n+\t\t\treturn loadClass(name, false);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n+\t\t\ttry {\n+\t\t\t\tClassLoader.getPlatformClassLoader().loadClass(name);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tlogger.severe(\"Exception thrown: \" + e.toString());\n+\t\t\t}\n+\t\t\treturn ClassLoader.getPlatformClassLoader().loadClass(name);\n+\t\t}\n+\t}\n+}\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestCustomClassloader.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+   Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+\n+   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+   The contents of this file are subject to the terms of either the Universal Permissive License\n+   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+\n+   or the following license:\n+\n+   Redistribution and use in source and binary forms, with or without modification, are permitted\n+   provided that the following conditions are met:\n+\n+   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+   and the following disclaimer.\n+\n+   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+   conditions and the following disclaimer in the documentation and\/or other materials provided with\n+   the distribution.\n+\n+   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+   endorse or promote products derived from this software without specific prior written permission.\n+\n+   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+-->\n+<jfragent>\n+\t<events>\n+\t\t<event id=\"demo.jfr.test1\">\n+\t\t\t<name>JFR Hello World Event 1 %TEST_NAME%<\/name>\n+\t\t\t<description>Defined in the xml file and added by the agent.<\/description>\n+\t\t\t<path>demo\/jfrhelloworldevent1<\/path>\n+\t\t\t<stacktrace>true<\/stacktrace>\n+\t\t\t<class>org.openjdk.jmc.agent.test.TestDummy<\/class>\n+\t\t\t<method>\n+\t\t\t\t<name>testWithoutException<\/name>\n+\t\t\t\t<descriptor>()V<\/descriptor>\n+\t\t\t<\/method>\n+\t\t\t<!-- location {ENTRY, EXIT, WRAP}-->\n+\t\t\t<location>WRAP<\/location>\n+\t\t<\/event>\n+\t<\/events>\n+<\/jfragent>\n","filename":"agent\/src\/test\/resources\/org\/openjdk\/jmc\/agent\/test\/jfrprobes_simple_2.xml","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}