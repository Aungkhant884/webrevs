{"files":[{"patch":"@@ -27,0 +27,2 @@\n+    - name: Run agent tests\n+      run: .\/scripts\/runagenttests.sh\n@@ -49,0 +51,2 @@\n+    - name: Run agent tests\n+      run: .\/scripts\/runagenttests.sh\n@@ -74,0 +78,3 @@\n+    - name: Run agent tests\n+      run: .\\scripts\\runagenttests.bat\n+      shell: cmd\n","filename":".github\/workflows\/validate.yml","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-\t\t<maven.compiler.source>1.7<\/maven.compiler.source>\n-\t\t<maven.compiler.target>1.7<\/maven.compiler.target>\n+\t\t<maven.compiler.source>1.8<\/maven.compiler.source>\n+\t\t<maven.compiler.target>1.8<\/maven.compiler.target>\n@@ -48,1 +48,2 @@\n-\t\t<spotless.config.path>${basedir}\/..\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n+\t\t<spotless.version>1.26.0<\/spotless.version>\n+\t\t<spotless.config.path>${basedir}\/..\/configuration\/ide\/eclipse\/formatting\/formatting.xml<\/spotless.config.path>\n@@ -246,0 +247,13 @@\n+\t\t\t<plugin>\n+\t\t\t\t<groupId>com.diffplug.spotless<\/groupId>\n+\t\t\t\t<artifactId>spotless-maven-plugin<\/artifactId>\n+\t\t\t\t<version>${spotless.version}<\/version>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<java>\n+\t\t\t\t\t\t<eclipse>\n+\t  \t\t\t\t\t\t<file>${spotless.config.path}<\/file>\n+\t \t\t\t\t\t\t<version>4.8.0<\/version>\n+ \t\t\t\t\t\t<\/eclipse>\n+\t\t\t\t\t<\/java>\n+\t\t\t\t<\/configuration>\n+\t\t\t<\/plugin>\n","filename":"agent\/pom.xml","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -105,2 +105,2 @@\n-\t\tTransformRegistry registry =\n-\t\t\t\tconfiguration != null ? DefaultTransformRegistry.from(configuration) : DefaultTransformRegistry.empty();\n+\t\tTransformRegistry registry = configuration != null ? DefaultTransformRegistry.from(configuration)\n+\t\t\t\t: DefaultTransformRegistry.empty();\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Agent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,2 @@\n-\tpublic ReturnValue(String name, String description, String contentType, String relationKey, String converterClassName) {\n+\tpublic ReturnValue(String name, String description, String contentType, String relationKey,\n+\t\t\tString converterClassName) {\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/ReturnValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,1 +109,2 @@\n-\t\tString id, String internalName, Method method, Map<String, String> values, List<Parameter> parameters, ReturnValue returnValue, List<Field> fields) {\n+\t\tString id, String internalName, Method method, Map<String, String> values, List<Parameter> parameters,\n+\t\tReturnValue returnValue, List<Field> fields) {\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/TransformDescriptor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-\t *           an XML snippet describing the current configuration\n+\t *            an XML snippet describing the current configuration\n@@ -83,2 +83,1 @@\n-\t *           an XML snippet describing the wanted modifications.\n-\t *\n+\t *            an XML snippet describing the wanted modifications.\n@@ -98,0 +97,1 @@\n+\t * \n@@ -99,1 +99,1 @@\n-\t *           true if class instrumentation should be reverted, false otherwise.\n+\t *            true if class instrumentation should be reverted, false otherwise.\n@@ -105,0 +105,1 @@\n+\t * \n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/TransformRegistry.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -75,2 +75,1 @@\n-\t\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain,\n-\t\t\tInspectionClassLoader inspectionClassLoader) {\n+\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n@@ -90,1 +89,1 @@\n-\t\t\tProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n+\t\tProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n@@ -96,2 +95,2 @@\n-\t\tJFRTransformDescriptor td, byte[] classfileBuffer, ClassLoader definingClassLoader, Class<?> classBeingRedefined,\n-\t\t\tProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n+\t\tJFRTransformDescriptor td, byte[] classfileBuffer, ClassLoader definingClassLoader,\n+\t\tClass<?> classBeingRedefined, ProtectionDomain protectionDomain, InspectionClassLoader inspectionClassLoader) {\n@@ -105,5 +104,5 @@\n-\t\t\tClassVisitor visitor = VersionResolver.getAvailableJFRVersion() == JFRVersion.JFRNEXT ?\n-\t\t\t\t\tnew JFRNextClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,\n-\t\t\t\t\t\t\tinspectionClassLoader) :\n-\t\t\t\t\tnew JFRClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,\n-\t\t\t\t\t\t\tinspectionClassLoader); \n+\t\t\tClassVisitor visitor = VersionResolver.getAvailableJFRVersion() == JFRVersion.JFRNEXT\n+\t\t\t\t\t? new JFRNextClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined,\n+\t\t\t\t\t\t\tprotectionDomain, inspectionClassLoader)\n+\t\t\t\t\t: new JFRClassVisitor(classWriter, td, definingClassLoader, classBeingRedefined, protectionDomain,\n+\t\t\t\t\t\t\tinspectionClassLoader);\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/Transformer.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-\t\n+\n@@ -158,1 +158,1 @@\n-\t\t\t\t\tif (validate(registry,td)) {\n+\t\t\t\t\tif (validate(registry, td)) {\n@@ -200,1 +200,1 @@\n-\t\t\tString tdEventClassName = ((JFRTransformDescriptor)td).getEventClassName();\n+\t\t\tString tdEventClassName = ((JFRTransformDescriptor) td).getEventClassName();\n@@ -251,1 +251,2 @@\n-\t\treturn TransformDescriptor.create(id, TypeUtils.getInternalName(values.get(\"class\")), method, values, parameters, returnValue[0], fields); \/\/$NON-NLS-1$\n+\t\treturn TransformDescriptor.create(id, TypeUtils.getInternalName(values.get(\"class\")), method, values, \/\/$NON-NLS-1$\n+\t\t\t\tparameters, returnValue[0], fields);\n@@ -415,2 +416,2 @@\n-\tprivate static Method parseMethod(XMLStreamReader streamReader, List<Parameter> parameters, ReturnValue[] returnValue)\n-\t\t\tthrows XMLStreamException {\n+\tprivate static Method parseMethod(\n+\t\tXMLStreamReader streamReader, List<Parameter> parameters, ReturnValue[] returnValue) throws XMLStreamException {\n@@ -484,1 +485,1 @@\n-\t\ttry  {\n+\t\ttry {\n@@ -498,1 +499,1 @@\n-\t\t\t\t\t\tif(modifiedClasses.add(td.getClassName())) {\n+\t\t\t\t\t\tif (modifiedClasses.add(td.getClassName())) {\n@@ -501,1 +502,1 @@\n-\t\t\t\t\t\tif (validate(this,td)) {\n+\t\t\t\t\t\tif (validate(this, td)) {\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/impl\/DefaultTransformRegistry.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -76,1 +76,2 @@\n-\t\t\tMap<String, String> transformationAttributes, List<Parameter> parameters, ReturnValue returnValue, List<Field> fields) {\n+\t\t\tMap<String, String> transformationAttributes, List<Parameter> parameters, ReturnValue returnValue,\n+\t\t\tList<Field> fields) {\n@@ -108,2 +109,2 @@\n-\t\tObject[]  values =  td.values().toArray();\n-\t\tfor (int i = 0; i < values.length; i++){\n+\t\tObject[] values = td.values().toArray();\n+\t\tfor (int i = 0; i < values.length; i++) {\n@@ -116,2 +117,3 @@\n-\t\treturn new JFRTransformDescriptor((String) cd.get(\"id\"), (String) cd.get(\"className\"), Method.from((CompositeData) cd.get(\"method\")),\n-\t\t\t\tattr, params, ReturnValue.from((CompositeData) cd.get(\"returnValue\")), fields);\n+\t\treturn new JFRTransformDescriptor((String) cd.get(\"id\"), (String) cd.get(\"className\"),\n+\t\t\t\tMethod.from((CompositeData) cd.get(\"method\")), attr, params,\n+\t\t\t\tReturnValue.from((CompositeData) cd.get(\"returnValue\")), fields);\n@@ -151,1 +153,1 @@\n-\t\n+\n@@ -155,1 +157,1 @@\n-\t\n+\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/JFRTransformDescriptor.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -62,4 +62,2 @@\n-\t\t\tthis.inspectionClass =\n-\t\t\t\t\tclassBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined :\n-\t\t\t\t\t\t\tinspectionClassLoader\n-\t\t\t\t\t\t\t\t\t.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));\n+\t\t\tthis.inspectionClass = classBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined\n+\t\t\t\t\t: inspectionClassLoader.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));\n@@ -93,1 +91,1 @@\n-\t\t\t\t\t + transformDescriptor.getMethod().getSignature() + \" not found.\"); \/\/ $NON-NLS-1$\n+\t\t\t\t\t+ transformDescriptor.getMethod().getSignature() + \" not found.\"); \/\/ $NON-NLS-1$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFRClassVisitor.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,1 +85,2 @@\n-\tprivate static void generateAttributeFields(ClassWriter cw, JFRTransformDescriptor td, Class<?> classBeingRedefined) throws IllegalSyntaxException {\n+\tprivate static void generateAttributeFields(ClassWriter cw, JFRTransformDescriptor td, Class<?> classBeingRedefined)\n+\t\t\tthrows IllegalSyntaxException {\n@@ -131,2 +132,2 @@\n-\t\t\t\t\t.warning(\"Skipped generating field in event class for return value \" + returnValue + \" and type \" + type \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t\t\t\t\t+ \" because of configuration settings!\"); \/\/$NON-NLS-1$\n+\t\t\t\t\t.warning(\"Skipped generating field in event class for return value \" + returnValue + \" and type \" \/\/$NON-NLS-1$\/\/$NON-NLS-2$\n+\t\t\t\t\t\t\t+ type + \" because of configuration settings!\"); \/\/$NON-NLS-1$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFREventClassGenerator.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-\tprotected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api, \n+\tprotected JFRMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api,\n@@ -85,2 +85,2 @@\n-    @Override\n-    public void visitCode() {\n+\t@Override\n+\tpublic void visitCode() {\n@@ -92,1 +92,1 @@\n-    }\n+\t}\n@@ -94,2 +94,2 @@\n-    @Override\n-    public void visitEnd() {\n+\t@Override\n+\tpublic void visitEnd() {\n@@ -108,1 +108,1 @@\n-    }\n+\t}\n@@ -137,1 +137,2 @@\n-\t\t\t\tthrow new IllegalSyntaxException(\"Illegal non-static reference from a static context: \" + field.getExpression());\n+\t\t\t\tthrow new IllegalSyntaxException(\n+\t\t\t\t\t\t\"Illegal non-static reference from a static context: \" + field.getExpression());\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfr\/impl\/JFRMethodAdvisor.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-\n@@ -64,4 +63,2 @@\n-\t\t\tthis.inspectionClass =\n-\t\t\t\t\tclassBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined :\n-\t\t\t\t\t\t\tinspectionClassLoader\n-\t\t\t\t\t\t\t\t\t.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));\n+\t\t\tthis.inspectionClass = classBeingRedefined != null || descriptor.getFields().isEmpty() ? classBeingRedefined\n+\t\t\t\t\t: inspectionClassLoader.loadClass(TypeUtils.getCanonicalName(transformDescriptor.getClassName()));\n@@ -89,2 +86,2 @@\n-\t\t\tAgent.getLogger().log(Level.SEVERE,\n-\t\t\t\t\t\"Failed to generate event class for \" + transformDescriptor.toString(), e); \/\/$NON-NLS-1$\n+\t\t\tAgent.getLogger().log(Level.SEVERE, \"Failed to generate event class for \" + transformDescriptor.toString(), \/\/$NON-NLS-1$\n+\t\t\t\t\te);\n@@ -93,2 +90,2 @@\n-\t\t\t Agent.getLogger().warning(\"Method \" + transformDescriptor.getMethod().getName() + \" \"\n-\t\t\t + transformDescriptor.getMethod().getSignature() + \" not found.\"); \/\/ $NON-NLS-1$\n+\t\t\tAgent.getLogger().warning(\"Method \" + transformDescriptor.getMethod().getName() + \" \"\n+\t\t\t\t\t+ transformDescriptor.getMethod().getSignature() + \" not found.\"); \/\/ $NON-NLS-1$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrnext\/impl\/JFRNextClassVisitor.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -71,1 +71,2 @@\n-\tprivate static void generateAttributeFields(ClassWriter cw, JFRTransformDescriptor td, Class<?> classBeingRedefined) throws IllegalSyntaxException {\n+\tprivate static void generateAttributeFields(ClassWriter cw, JFRTransformDescriptor td, Class<?> classBeingRedefined)\n+\t\t\tthrows IllegalSyntaxException {\n@@ -128,2 +129,2 @@\n-\t\t\t\t\t.warning(\"Skipped generating field in event class for return value \" + returnValue + \" and type \" + type \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t\t\t\t\t+ \" because of configuration settings!\"); \/\/$NON-NLS-1$\n+\t\t\t\t\t.warning(\"Skipped generating field in event class for return value \" + returnValue + \" and type \" \/\/$NON-NLS-1$\/\/$NON-NLS-2$\n+\t\t\t\t\t\t\t+ type + \" because of configuration settings!\"); \/\/$NON-NLS-1$\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrnext\/impl\/JFRNextEventClassGenerator.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-\tprotected JFRNextMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api, \n+\tprotected JFRNextMethodAdvisor(JFRTransformDescriptor transformDescriptor, Class<?> inspectionClass, int api,\n@@ -102,1 +102,1 @@\n-\t\t\t\n+\n@@ -148,1 +148,2 @@\n-\t\t\t\tthrow new IllegalSyntaxException(\"Illegal non-static reference from a static context: \" + field.getExpression());\n+\t\t\t\tthrow new IllegalSyntaxException(\n+\t\t\t\t\t\t\"Illegal non-static reference from a static context: \" + field.getExpression());\n@@ -232,1 +233,1 @@\n-\t\n+\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jfrnext\/impl\/JFRNextMethodAdvisor.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-\t\n+\n@@ -51,1 +51,1 @@\n-\t\n+\n@@ -60,1 +60,1 @@\n-\tpublic void defineEventProbes(String xmlDescription) throws Exception{\n+\tpublic void defineEventProbes(String xmlDescription) throws Exception {\n@@ -99,1 +99,1 @@\n-\t\tList<TransformDescriptor> tds  = new ArrayList<>();\n+\t\tList<TransformDescriptor> tds = new ArrayList<>();\n@@ -105,1 +105,1 @@\n-\t\tfor (TransformDescriptor td :tds) {\n+\t\tfor (TransformDescriptor td : tds) {\n@@ -117,4 +117,4 @@\n-\t\t  SecurityManager secMan = System.getSecurityManager();\n-\t\t  if (secMan != null) {\n-\t\t    secMan.checkPermission(new ManagementPermission(\"control\"));\n-\t\t  }\n+\t\tSecurityManager secMan = System.getSecurityManager();\n+\t\tif (secMan != null) {\n+\t\t\tsecMan.checkPermission(new ManagementPermission(\"control\"));\n+\t\t}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jmx\/AgentController.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-\t *           the XML snippet describing event probes to transform.\n+\t *            the XML snippet describing event probes to transform.\n@@ -45,1 +45,1 @@\n-\t *           thrown when an event probe's specified class can not be retransformed.\n+\t *             thrown when an event probe's specified class can not be retransformed.\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/jmx\/AgentControllerMXBean.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,2 +56,4 @@\n-\t * @param clazz the class to lookup from\n-\t * @param name the name of the field\n+\t * @param clazz\n+\t *            the class to lookup from\n+\t * @param name\n+\t *            the name of the field\n@@ -59,1 +61,2 @@\n-\t * @throws NoSuchFieldException if a field with the specified name is not found.\n+\t * @throws NoSuchFieldException\n+\t *             if a field with the specified name is not found.\n@@ -86,3 +89,6 @@\n-\t * @param targetClass the class being referenced\n-\t * @param field the field being accessed\n-\t * @param currentClass the caller class\n+\t * @param targetClass\n+\t *            the class being referenced\n+\t * @param field\n+\t *            the field being accessed\n+\t * @param currentClass\n+\t *            the caller class\n@@ -105,4 +111,8 @@\n-\t * @param targetClass the class being referenced\n-\t * @param memberClass the class declaring the field\/method\/inner class\n-\t * @param currentClass the caller class\n-\t * @param modifiers member access modifiers in bit flags as a integer\n+\t * @param targetClass\n+\t *            the class being referenced\n+\t * @param memberClass\n+\t *            the class declaring the field\/method\/inner class\n+\t * @param currentClass\n+\t *            the caller class\n+\t * @param modifiers\n+\t *            member access modifiers in bit flags as a integer\n@@ -111,2 +121,2 @@\n-\tpublic static boolean verifyMemberAccess(Class<?> targetClass, Class<?> memberClass, Class<?> currentClass, \n-\t\t\tint modifiers) {\n+\tpublic static boolean verifyMemberAccess(\n+\t\tClass<?> targetClass, Class<?> memberClass, Class<?> currentClass, int modifiers) {\n@@ -186,1 +196,2 @@\n-\t * Check whether the module has the class exported for the caller to access.\n+\t * Check whether the module has the class exported for the caller to access. For Pre-9 Java\n+\t * runtime, this function always returns <code>true<\/code>.\n@@ -188,4 +199,4 @@\n-\t * For Pre-9 Java runtime, this function always returns <code>true<\/code>.\n-\t * \n-\t * @param targetClass the class being accessed\n-\t * @param callerClass the caller class\n+\t * @param targetClass\n+\t *            the class being accessed\n+\t * @param callerClass\n+\t *            the caller class\n@@ -216,2 +227,2 @@\n-\t\t\tMethod isExportedMethod = targetModule.getClass()\n-\t\t\t\t\t.getDeclaredMethod(\"isExported\", String.class, Class.forName(\"java.lang.Module\"));\n+\t\t\tMethod isExportedMethod = targetModule.getClass().getDeclaredMethod(\"isExported\", String.class,\n+\t\t\t\t\tClass.forName(\"java.lang.Module\"));\n@@ -219,1 +230,4 @@\n-\t\t} catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+\t\t} catch (ClassNotFoundException\n+\t\t\t\t| NoSuchMethodException\n+\t\t\t\t| IllegalAccessException\n+\t\t\t\t| InvocationTargetException e) {\n@@ -227,1 +241,2 @@\n-\t * @param clazz the class to lookup the package name against\n+\t * @param clazz\n+\t *            the class to lookup the package name against\n@@ -232,1 +247,1 @@\n-\t\t\n+\n@@ -236,1 +251,1 @@\n-\t * Polyfill for <code>Reflection.getClassAccessFlags(Class<?>)<\/code> as \n+\t * Polyfill for <code>Reflection.getClassAccessFlags(Class<?>)<\/code> as\n@@ -239,1 +254,2 @@\n-\t * @param c the class being inspected\n+\t * @param c\n+\t *            the class being inspected\n@@ -249,2 +265,4 @@\n-\t * @param lhs the first class\n-\t * @param rhs the second class\n+\t * @param lhs\n+\t *            the first class\n+\t * @param rhs\n+\t *            the second class\n@@ -262,2 +280,4 @@\n-\t * @param queryClass the subclass\n-\t * @param ofClass the superclass\n+\t * @param queryClass\n+\t *            the subclass\n+\t * @param ofClass\n+\t *            the superclass\n@@ -277,4 +297,2 @@\n-\t * Polyfill Class.getNestMembers() for pre-11 runtime. \n-\t * \n-\t * This function does not fully respect the definition of nesting from JVM's perspective. It's only used for \n-\t * validating access.\n+\t * Polyfill Class.getNestMembers() for pre-11 runtime. This function does not fully respect the\n+\t * definition of nesting from JVM's perspective. It's only used for validating access.\n@@ -282,1 +300,2 @@\n-\t * @param clazz the class to inspect against\n+\t * @param clazz\n+\t *            the class to inspect against\n@@ -298,1 +317,2 @@\n-\t * Polyfill Class.isNestMateOf() for pre-11 runtime.\n+\t * Polyfill Class.isNestMateOf() for pre-11 runtime. This function does not fully respect the\n+\t * definition of nesting from JVM's perspective. It's only used for validating access.\n@@ -300,5 +320,4 @@\n-\t * This function does not fully respect the definition of nesting from JVM's perspective. It's only used for\n-\t * validating access.\n-\t * \n-\t * @param lhs the first class\n-\t * @param rhs the second class\n+\t * @param lhs\n+\t *            the first class\n+\t * @param rhs\n+\t *            the second class\n@@ -312,4 +331,2 @@\n-\t * Polyfill Class.getNestHost() for pre-11 runtime.\n-\t * \n-\t * This function does not fully respect the definition of nesting from JVM's perspective. It's only used for\n-\t * validating access.\n+\t * Polyfill Class.getNestHost() for pre-11 runtime. This function does not fully respect the\n+\t * definition of nesting from JVM's perspective. It's only used for validating access.\n@@ -317,1 +334,2 @@\n-\t * @param clazz the class the inspect against\n+\t * @param clazz\n+\t *            the class the inspect against\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/AccessUtils.java","additions":62,"deletions":44,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -123,2 +123,2 @@\n-\t\t\tString eventClassName, byte[] eventClass, int i, int length, ClassLoader definingClassLoader,\n-\t\t\tProtectionDomain protectionDomain) {\n+\t\tString eventClassName, byte[] eventClass, int i, int length, ClassLoader definingClassLoader,\n+\t\tProtectionDomain protectionDomain) {\n@@ -126,2 +126,2 @@\n-\t\t\treturn (Class<?>) UNSAFE_DEFINE_CLASS_METHOD\n-\t\t\t\t\t.invoke(UNSAFE, eventClassName, eventClass, i, length, definingClassLoader, protectionDomain);\n+\t\t\treturn (Class<?>) UNSAFE_DEFINE_CLASS_METHOD.invoke(UNSAFE, eventClassName, eventClass, i, length,\n+\t\t\t\t\tdefiningClassLoader, protectionDomain);\n@@ -129,2 +129,1 @@\n-\t\t\tAgent.getLogger()\n-\t\t\t\t\t.log(Level.SEVERE, \"Failed to dynamically define the class \" + eventClassName, e); \/\/$NON-NLS-1$\n+\t\t\tAgent.getLogger().log(Level.SEVERE, \"Failed to dynamically define the class \" + eventClassName, e); \/\/$NON-NLS-1$\n@@ -231,1 +230,2 @@\n-\t * @param className the fully qualified class name in internal form.\n+\t * @param className\n+\t *            the fully qualified class name in internal form.\n@@ -239,1 +239,2 @@\n-\t * Converts a canonical class name into the internal form (binary name).\n+\t * Converts a canonical class name into the internal form (binary name). eg.\n+\t * <code>com.company.project<\/code> converts into <code>com\/company\/project<\/code>\n@@ -241,3 +242,2 @@\n-\t * eg. <code>com.company.project<\/code> converts into <code>com\/company\/project<\/code>\n-\t * \n-\t * @param className the canonical class name\n+\t * @param className\n+\t *            the canonical class name\n@@ -251,3 +251,2 @@\n-\t * Converts a internal class name (binary name) into the canonical form.\n-\t *\n-\t * ie. <code>com\/company\/project<\/code> converts into <code>com.company.project<\/code> \n+\t * Converts a internal class name (binary name) into the canonical form. ie.\n+\t * <code>com\/company\/project<\/code> converts into <code>com.company.project<\/code>\n@@ -255,1 +254,2 @@\n-\t * @param binaryName the internal class name\n+\t * @param binaryName\n+\t *            the internal class name\n@@ -263,2 +263,2 @@\n-\t * Returns the constant loading instruction that pushes a zero value of the given type onto the operand stack. A \n-\t * null reference is pushed if the given type is an object or an array.\n+\t * Returns the constant loading instruction that pushes a zero value of the given type onto the\n+\t * operand stack. A null reference is pushed if the given type is an object or an array.\n@@ -266,1 +266,2 @@\n-\t * @param type the type of the operand\n+\t * @param type\n+\t *            the type of the operand\n@@ -295,2 +296,2 @@\n-\t * Returns a array element for ASM's <code>MethodVisitor.visitFrame()<\/code> method used for frame verification of \n-\t * a given type.\n+\t * Returns a array element for ASM's <code>MethodVisitor.visitFrame()<\/code> method used for\n+\t * frame verification of a given type.\n@@ -298,1 +299,2 @@\n-\t * @param type the type of the element on the operand stack or in the local variable table\n+\t * @param type\n+\t *            the type of the element on the operand stack or in the local variable table\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/TypeUtils.java","additions":23,"deletions":21,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -99,1 +99,2 @@\n-\t\t\tenterIllegalState(\"Unexpected end of input: expects 'this', 'super', a field name, a class name, a package name, or a package name fragment\");\n+\t\t\tenterIllegalState(\n+\t\t\t\t\t\"Unexpected end of input: expects 'this', 'super', a field name, a class name, a package name, or a package name fragment\");\n@@ -266,2 +267,2 @@\n-\t\tif (!caller.equals(memberingClass) && Modifier.isPrivate(field.getModifiers()) && AccessUtils\n-\t\t\t\t.areNestMates(caller, memberingClass)) {\n+\t\tif (!caller.equals(memberingClass) && Modifier.isPrivate(field.getModifiers())\n+\t\t\t\t&& AccessUtils.areNestMates(caller, memberingClass)) {\n@@ -720,1 +721,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/expression\/ExpressionResolver.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -41,5 +41,4 @@\n- * A ReferenceChain instance presents a field reference expression.\n- * \n- * eg. <code>OuterClass.this.field.STATIC_FIELD<\/code> is a reference chain consisting elements: a qualified-this \n- * reference and two field reference (<code>field<\/code> and <code>STATIC_FIELD<\/code>).\n- * \n+ * A ReferenceChain instance presents a field reference expression. eg.\n+ * <code>OuterClass.this.field.STATIC_FIELD<\/code> is a reference chain consisting elements: a\n+ * qualified-this reference and two field reference (<code>field<\/code> and\n+ * <code>STATIC_FIELD<\/code>).\n@@ -52,1 +51,2 @@\n-\t * @param callerClass the caller class making this reference\n+\t * @param callerClass\n+\t *            the caller class making this reference\n@@ -74,2 +74,2 @@\n-\t * Reduces the reference chain to prepend \"this\" or qualified-this references if necessary, and short-circuits on\n-\t * static references\n+\t * Reduces the reference chain to prepend \"this\" or qualified-this references if necessary, and\n+\t * short-circuits on static references\n@@ -119,1 +119,3 @@\n-\t * @param ref ReferenceChainElement to be appended\n+\t * \n+\t * @param ref\n+\t *            ReferenceChainElement to be appended\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/expression\/ReferenceChain.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-\n@@ -168,3 +167,2 @@\n-\t\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\tString.format(\"%s is not an enclosing class of %s\", enclosingClass.getName(),\n-\t\t\t\t\t\t\t\t\tinnerClass.getName()));\n+\t\t\t\t\tthrow new IllegalArgumentException(String.format(\"%s is not an enclosing class of %s\",\n+\t\t\t\t\t\t\tenclosingClass.getName(), innerClass.getName()));\n","filename":"agent\/src\/main\/java\/org\/openjdk\/jmc\/agent\/util\/expression\/ReferenceChainElement.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-\t\n+\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/converters\/test\/InstrumentMeConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,3 @@\n-@SuiteClasses({TestDefaultTransformRegistry.class, TestUtils.class, TestJFRTransformer.class, TestConverterTransforms.class, TestProbeDefinitionValidation.class, TestCompressedFrameTransformation.class, TestEmitOnlyOnException.class})\n+@SuiteClasses({TestDefaultTransformRegistry.class, TestUtils.class, TestJFRTransformer.class,\n+\t\tTestConverterTransforms.class, TestProbeDefinitionValidation.class, TestCompressedFrameTransformation.class,\n+\t\tTestEmitOnlyOnException.class})\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/AllTests.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-\tpublic static class MyPojo { \n+\tpublic static class MyPojo {\n@@ -54,2 +54,2 @@\n-\t\n-\tpublic class MyInnerClass extends InstrumentMe{\n+\n+\tpublic class MyInnerClass extends InstrumentMe {\n@@ -261,1 +261,2 @@\n-\t\tSystem.out.println(\"#SJFR12. Capturing 'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD' and 'STATIC_OBJECT_FIELD.instanceStringField'\"); \/\/$NON-NLS-1$\n+\t\tSystem.out.println(\n+\t\t\t\t\"#SJFR12. Capturing 'STATIC_OBJECT_FIELD.STATIC_STRING_FIELD' and 'STATIC_OBJECT_FIELD.instanceStringField'\"); \/\/$NON-NLS-1$\n@@ -266,1 +267,2 @@\n-\t\tSystem.out.println(\"#SJFR13. Capturing 'STATIC_NULL_FIELD.STATIC_STRING_FIELD' and 'STATIC_NULL_FIELD.instanceStringField'\"); \/\/$NON-NLS-1$\n+\t\tSystem.out.println(\n+\t\t\t\t\"#SJFR13. Capturing 'STATIC_NULL_FIELD.STATIC_STRING_FIELD' and 'STATIC_NULL_FIELD.instanceStringField'\"); \/\/$NON-NLS-1$\n@@ -368,1 +370,1 @@\n-\t\n+\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/InstrumentMe.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,10 +58,4 @@\n-\t\t\t+ \"<path>demo\/jfrhelloworldevent1<\/path>\"\n-\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n-\t\t\t+ \"<class>org.openjdk.jmc.agent.test.InstrumentMe<\/class>\"\n-\t\t\t+ \"<method>\"\n-\t\t\t+ \"<name>printHelloWorldJFR1<\/name>\"\n-\t\t\t+ \"<descriptor>()V<\/descriptor>\"\n-\t\t\t+ \"<\/method>\"\n-\t\t\t+ \"<location>WRAP<\/location>\"\n-\t\t\t+ \"<\/event>\";\n-\t\n+\t\t\t+ \"<path>demo\/jfrhelloworldevent1<\/path>\" + \"<stacktrace>true<\/stacktrace>\"\n+\t\t\t+ \"<class>org.openjdk.jmc.agent.test.InstrumentMe<\/class>\" + \"<method>\" + \"<name>printHelloWorldJFR1<\/name>\"\n+\t\t\t+ \"<descriptor>()V<\/descriptor>\" + \"<\/method>\" + \"<location>WRAP<\/location>\" + \"<\/event>\";\n+\n@@ -71,1 +65,1 @@\n-\t\n+\n@@ -140,2 +134,2 @@\n-\t\tTransformRegistry registry = DefaultTransformRegistry\n-\t\t\t\t.from(TestToolkit.getProbesXMLFromTemplate(getXMLDescription(XML_EVENT_DESCRIPTION), \"clearAllTransformData\")); \/\/$NON-NLS-1$\n+\t\tTransformRegistry registry = DefaultTransformRegistry.from(TestToolkit\n+\t\t\t\t.getProbesXMLFromTemplate(getXMLDescription(XML_EVENT_DESCRIPTION), \"clearAllTransformData\")); \/\/$NON-NLS-1$\n@@ -145,1 +139,1 @@\n-\t\tassertEquals(classesCleared.iterator().next(),Type.getInternalName(InstrumentMe.class));\n+\t\tassertEquals(classesCleared.iterator().next(), Type.getInternalName(InstrumentMe.class));\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestDefaultTransformRegistry.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -78,16 +78,5 @@\n-\tprivate static final String XML_DESCRIPTION = \"<jfragent>\"\n-\t\t\t+ \"<events>\"\n-\t\t\t+ \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n-\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\"\n-\t\t\t+ \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\"\n-\t\t\t+ \"<path>\" + EVENT_PATH + \"<\/path>\"\n-\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n-\t\t\t+ \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n-\t\t\t+ \"<method>\"\n-\t\t\t+ \"<name>\" + METHOD_NAME + \"<\/name>\"\n-\t\t\t+ \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n-\t\t\t+ \"<\/method>\"\n-\t\t\t+ \"<location>WRAP<\/location>\"\n-\t\t\t+ \"<\/event>\"\n-\t\t\t+ \"<\/events>\"\n-\t\t\t+ \"<\/jfragent>\";\n+\tprivate static final String XML_DESCRIPTION = \"<jfragent>\" + \"<events>\" + \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n+\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\" + \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\" + \"<path>\"\n+\t\t\t+ EVENT_PATH + \"<\/path>\" + \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n+\t\t\t+ \"<method>\" + \"<name>\" + METHOD_NAME + \"<\/name>\" + \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n+\t\t\t+ \"<\/method>\" + \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\n@@ -133,2 +122,3 @@\n-\t\tJFRTransformDescriptor eventTd = new JFRTransformDescriptor(EVENT_ID, TypeUtils.getInternalName(EVENT_CLASS_NAME),\n-\t\t\t\tmethod, attributes, new ArrayList<Parameter>(), retVal, new ArrayList<Field>());\n+\t\tJFRTransformDescriptor eventTd = new JFRTransformDescriptor(EVENT_ID,\n+\t\t\t\tTypeUtils.getInternalName(EVENT_CLASS_NAME), method, attributes, new ArrayList<Parameter>(), retVal,\n+\t\t\t\tnew ArrayList<Field>());\n@@ -139,2 +129,2 @@\n-\t\t\tpublic MethodVisitor visitMethod(int access, String name, String desc, String signature,\n-\t\t\t\t\tString[] exceptions) {\n+\t\t\tpublic MethodVisitor visitMethod(\n+\t\t\t\tint access, String name, String desc, String signature, String[] exceptions) {\n@@ -169,1 +159,1 @@\n-\tprivate void doDefineEventProbes(String xmlDescription) throws Exception  {\n+\tprivate void doDefineEventProbes(String xmlDescription) throws Exception {\n@@ -178,1 +168,1 @@\n-\t\n+\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestDefineEventProbes.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -38,10 +38,10 @@\n-\t\t\n-\t\tpublic void testWithoutException() {\n-\t\t\tSystem.out.println(\"I'm going to return now. bye!\");\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tpublic void testWithException() throws Exception {\n-\t\t\tSystem.out.println(\"I'm going to throw an exception now. bye!\");\n-\t\t\tthrow new RuntimeException();\n-\t\t}\n+\n+\tpublic void testWithoutException() {\n+\t\tSystem.out.println(\"I'm going to return now. bye!\");\n+\t\treturn;\n+\t}\n+\n+\tpublic void testWithException() throws Exception {\n+\t\tSystem.out.println(\"I'm going to throw an exception now. bye!\");\n+\t\tthrow new RuntimeException();\n+\t}\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestDummy.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-\t\n+\n@@ -64,33 +64,12 @@\n-\t\n-\tprivate static final String XML_DESCRIPTION = \"<jfragent>\"\n-\t\t\t+ \"<config>\"\n-\t\t\t+ \"<emitonexception>true<\/emitonexception>\"\n-\t\t\t+ \"<\/config>\"\n-\t\t\t+ \"<events>\"\n-\t\t\t+ \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n-\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\"\n-\t\t\t+ \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\"\n-\t\t\t+ \"<path>\" + EVENT_PATH + \"<\/path>\"\n-\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n-\t\t\t+ \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n-\t\t\t+ \"<method>\"\n-\t\t\t+ \"<name>\" + METHOD_NAME + \"<\/name>\"\n-\t\t\t+ \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n-\t\t\t+ \"<\/method>\"\n-\t\t\t+ \"<location>WRAP<\/location>\"\n-\t\t\t+ \"<\/event>\"\n-\t\t\t+ \"<event id=\\\"\" + EVENT_ID + \"2\" + \"\\\">\"\n-\t\t\t+ \"<name>\" + EVENT_NAME + \"2\" + \"<\/name>\"\n-\t\t\t+ \"<description>\" + EVENT_DESCRIPTION + \"2\" + \"<\/description>\"\n-\t\t\t+ \"<path>\" + EVENT_PATH + \"<\/path>\"\n-\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n-\t\t\t+ \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n-\t\t\t+ \"<method>\"\n-\t\t\t+ \"<name>\" + METHOD_NAME_2 + \"<\/name>\"\n-\t\t\t+ \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\"\n-\t\t\t+ \"<\/method>\"\n-\t\t\t+ \"<location>WRAP<\/location>\"\n-\t\t\t+ \"<\/event>\"\n-\t\t\t+ \"<\/events>\"\n-\t\t\t+ \"<\/jfragent>\";\n-\t\n+\n+\tprivate static final String XML_DESCRIPTION = \"<jfragent>\" + \"<config>\" + \"<emitonexception>true<\/emitonexception>\"\n+\t\t\t+ \"<\/config>\" + \"<events>\" + \"<event id=\\\"\" + EVENT_ID + \"\\\">\" + \"<name>\" + EVENT_NAME + \"<\/name>\"\n+\t\t\t+ \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\" + \"<path>\" + EVENT_PATH + \"<\/path>\"\n+\t\t\t+ \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\" + \"<method>\" + \"<name>\"\n+\t\t\t+ METHOD_NAME + \"<\/name>\" + \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\" + \"<\/method>\"\n+\t\t\t+ \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<event id=\\\"\" + EVENT_ID + \"2\" + \"\\\">\" + \"<name>\" + EVENT_NAME\n+\t\t\t+ \"2\" + \"<\/name>\" + \"<description>\" + EVENT_DESCRIPTION + \"2\" + \"<\/description>\" + \"<path>\" + EVENT_PATH\n+\t\t\t+ \"<\/path>\" + \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\" + \"<method>\"\n+\t\t\t+ \"<name>\" + METHOD_NAME_2 + \"<\/name>\" + \"<descriptor>\" + METHOD_DESCRIPTOR + \"<\/descriptor>\" + \"<\/method>\"\n+\t\t\t+ \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\n+\n@@ -100,1 +79,2 @@\n-\t\tTransformRegistry registry = DefaultTransformRegistry.from(new ByteArrayInputStream(XML_DESCRIPTION.getBytes())); \/\/$NON-NLS-1$\n+\t\tTransformRegistry registry = DefaultTransformRegistry\n+\t\t\t\t.from(new ByteArrayInputStream(XML_DESCRIPTION.getBytes())); \/\/$NON-NLS-1$\n@@ -102,1 +82,1 @@\n-\t\t\n+\n@@ -105,4 +85,3 @@\n-\t\tType.getInternalName(TestDummy.class), TestDummy.class, null,\n-\t\tTestToolkit.getByteCode(TestDummy.class));\n-\t\n-\t\tassertNotNull(transformedClass);\t\n+\t\t\t\tType.getInternalName(TestDummy.class), TestDummy.class, null, TestToolkit.getByteCode(TestDummy.class));\n+\n+\t\tassertNotNull(transformedClass);\n@@ -112,1 +91,2 @@\n-\t\t} catch (Exception e) {}\n+\t\t} catch (Exception e) {\n+\t\t}\n@@ -114,1 +94,1 @@\n-\t\n+\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestEmitOnlyOnException.java","additions":22,"deletions":42,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-\t\n+\n@@ -64,17 +64,6 @@\n-\tprivate static final String XML_DESCRIPTION = \"<jfragent>\"\n-\t\t\t+ \"<events>\"\n-\t\t\t+ \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n-\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\"\n-\t\t\t+ \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\"\n-\t\t\t+ \"<path>\" + EVENT_PATH + \"<\/path>\"\n-\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n-\t\t\t+ \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n-\t\t\t+ \"<method>\"\n-\t\t\t+ \"<name>\" + METHOD_NAME + \"<\/name>\"\n-\t\t\t+ \"<descriptor>\" + CORRECT_METHOD_DESCRIPTOR + \"<\/descriptor>\"\n-\t\t\t+ \"<\/method>\"\n-\t\t\t+ \"<location>WRAP<\/location>\"\n-\t\t\t+ \"<\/event>\"\n-\t\t\t+ \"<\/events>\"\n-\t\t\t+ \"<\/jfragent>\";\n-\t\n+\tprivate static final String XML_DESCRIPTION = \"<jfragent>\" + \"<events>\" + \"<event id=\\\"\" + EVENT_ID + \"\\\">\"\n+\t\t\t+ \"<name>\" + EVENT_NAME + \"<\/name>\" + \"<description>\" + EVENT_DESCRIPTION + \"<\/description>\" + \"<path>\"\n+\t\t\t+ EVENT_PATH + \"<\/path>\" + \"<stacktrace>true<\/stacktrace>\" + \"<class>\" + EVENT_CLASS_NAME + \"<\/class>\"\n+\t\t\t+ \"<method>\" + \"<name>\" + METHOD_NAME + \"<\/name>\" + \"<descriptor>\" + CORRECT_METHOD_DESCRIPTOR\n+\t\t\t+ \"<\/descriptor>\" + \"<\/method>\" + \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\" + \"<\/jfragent>\";\n+\n@@ -83,1 +72,2 @@\n-\t\tTransformRegistry registry = DefaultTransformRegistry.from(new ByteArrayInputStream(XML_DESCRIPTION.getBytes()));\n+\t\tTransformRegistry registry = DefaultTransformRegistry\n+\t\t\t\t.from(new ByteArrayInputStream(XML_DESCRIPTION.getBytes()));\n@@ -85,1 +75,1 @@\n-\t\t\n+\n@@ -87,4 +77,3 @@\n-\t\tjfrTransformer.transform(InstrumentMe.class.getClassLoader(),\n-\t\t\t\tType.getInternalName(InstrumentMe.class), InstrumentMe.class, null,\n-\t\t\t\tTestToolkit.getByteCode(InstrumentMe.class));\n-\t\t\n+\t\tjfrTransformer.transform(InstrumentMe.class.getClassLoader(), Type.getInternalName(InstrumentMe.class),\n+\t\t\t\tInstrumentMe.class, null, TestToolkit.getByteCode(InstrumentMe.class));\n+\n@@ -93,2 +82,2 @@\n-\t\t\n-\t\tJFRTransformDescriptor descriptor = (JFRTransformDescriptor)descriptors.get(0);\n+\n+\t\tJFRTransformDescriptor descriptor = (JFRTransformDescriptor) descriptors.get(0);\n@@ -97,1 +86,1 @@\n-\t\n+\n@@ -100,3 +89,2 @@\n-\t\tTransformRegistry registry = DefaultTransformRegistry.from(\n-\t\t\t\tnew ByteArrayInputStream(XML_DESCRIPTION.replace(CORRECT_METHOD_DESCRIPTOR, INCORRECT_METHOD_DESCRIPTOR)\n-\t\t\t\t\t\t.getBytes()));\n+\t\tTransformRegistry registry = DefaultTransformRegistry.from(new ByteArrayInputStream(\n+\t\t\t\tXML_DESCRIPTION.replace(CORRECT_METHOD_DESCRIPTOR, INCORRECT_METHOD_DESCRIPTOR).getBytes()));\n@@ -104,1 +92,1 @@\n-\t\t\n+\n@@ -106,4 +94,3 @@\n-\t\tjfrTransformer.transform(InstrumentMe.class.getClassLoader(),\n-\t\t\t\tType.getInternalName(InstrumentMe.class), InstrumentMe.class, null,\n-\t\t\t\tTestToolkit.getByteCode(InstrumentMe.class));\n-\t\t\n+\t\tjfrTransformer.transform(InstrumentMe.class.getClassLoader(), Type.getInternalName(InstrumentMe.class),\n+\t\t\t\tInstrumentMe.class, null, TestToolkit.getByteCode(InstrumentMe.class));\n+\n@@ -112,2 +99,2 @@\n-\t\tJFRTransformDescriptor descriptor = (JFRTransformDescriptor)descriptors.get(0);\n-\t\t\n+\t\tJFRTransformDescriptor descriptor = (JFRTransformDescriptor) descriptors.get(0);\n+\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestIncorrectMethodDescriptor.java","additions":24,"deletions":37,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-\t\t} catch(SecurityException e) {\n+\t\t} catch (SecurityException e) {\n@@ -60,1 +60,1 @@\n-\tprivate void doDefineEventProbes(String xmlDescription) throws Exception  {\n+\tprivate void doDefineEventProbes(String xmlDescription) throws Exception {\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestPermissionChecks.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,2 +44,1 @@\n-\t\t\t\t+ \"                <returnvalue>\\n\"\n-\t\t\t\t+ \"                    <name>returnValue<\/name>\\n\"\n+\t\t\t\t+ \"                <returnvalue>\\n\" + \"                    <name>returnValue<\/name>\\n\"\n@@ -84,3 +83,4 @@\n-\t\tfor (String clazz : Arrays\n-\t\t\t\t.asList(\"MyClass\", \"pkg_name.MyClass\", \"com.company.project.MyClass\", \"MyClass$MyInnerClass\")) {\n-\t\t\tDefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, clazz) + GLOBAL_POSTFIX);\n+\t\tfor (String clazz : Arrays.asList(\"MyClass\", \"pkg_name.MyClass\", \"com.company.project.MyClass\",\n+\t\t\t\t\"MyClass$MyInnerClass\")) {\n+\t\t\tDefaultTransformRegistry\n+\t\t\t\t\t.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, clazz) + GLOBAL_POSTFIX);\n@@ -132,1 +132,2 @@\n-\t\t\tDefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, descriptor) + GLOBAL_POSTFIX);\n+\t\t\tDefaultTransformRegistry\n+\t\t\t\t\t.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, descriptor) + GLOBAL_POSTFIX);\n@@ -180,3 +181,4 @@\n-\t\tfor (String expression : Arrays\n-\t\t\t\t.asList(\"this\", \"this.field\", \"MyClass.this.field\", \"field\", \"super.field\", \"STATIC_FIELD\")) {\n-\t\t\tDefaultTransformRegistry.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, expression) + GLOBAL_POSTFIX);\n+\t\tfor (String expression : Arrays.asList(\"this\", \"this.field\", \"MyClass.this.field\", \"field\", \"super.field\",\n+\t\t\t\t\"STATIC_FIELD\")) {\n+\t\t\tDefaultTransformRegistry\n+\t\t\t\t\t.validateProbeDefinition(GLOBAL_PREFIX + MessageFormat.format(probe, expression) + GLOBAL_POSTFIX);\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestProbeDefinitionValidation.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -49,3 +49,1 @@\n-\tprivate static final String XML_TEST_DESCRIPTION = \"<jfragent>\"\n-\t\t\t+ \"<events>\"\n-\t\t\t+ \"<event id=\\\"demo.jfr.test1\\\">\"\n+\tprivate static final String XML_TEST_DESCRIPTION = \"<jfragent>\" + \"<events>\" + \"<event id=\\\"demo.jfr.test1\\\">\"\n@@ -54,10 +52,3 @@\n-\t\t\t+ \"<path>demo\/jfrhelloworldevent1<\/path>\"\n-\t\t\t+ \"<stacktrace>true<\/stacktrace>\"\n-\t\t\t+ \"<class>org.openjdk.jmc.agent.test.InstrumentMe<\/class>\"\n-\t\t\t+ \"<method>\"\n-\t\t\t+ \"<name>printHelloWorldJFR1<\/name>\"\n-\t\t\t+ \"<descriptor>()V<\/descriptor>\"\n-\t\t\t+ \"<\/method>\"\n-\t\t\t+ \"<location>WRAP<\/location>\"\n-\t\t\t+ \"<\/event>\"\n-\t\t\t+ \"<\/events>\"\n+\t\t\t+ \"<path>demo\/jfrhelloworldevent1<\/path>\" + \"<stacktrace>true<\/stacktrace>\"\n+\t\t\t+ \"<class>org.openjdk.jmc.agent.test.InstrumentMe<\/class>\" + \"<method>\" + \"<name>printHelloWorldJFR1<\/name>\"\n+\t\t\t+ \"<descriptor>()V<\/descriptor>\" + \"<\/method>\" + \"<location>WRAP<\/location>\" + \"<\/event>\" + \"<\/events>\"\n@@ -65,0 +56,1 @@\n+\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/TestRetrieveEventProbes.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-\t\n+\n","filename":"agent\/src\/test\/java\/org\/openjdk\/jmc\/agent\/test\/util\/TestToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,2 +96,2 @@\n-        \t\t\t\t\t\t<file>${spotless.config.path}<\/file>\n-        \t\t\t\t\t\t<version>4.8.0<\/version>\n+        \t\t\t\t\t\t\t<file>${spotless.config.path}<\/file>\n+        \t\t\t\t\t\t\t<version>4.8.0<\/version>\n","filename":"core\/pom.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -12,1 +12,0 @@\n-echo \"======== Running spotless for application ===\"\n@@ -14,1 +13,6 @@\n-call mvn -Puitests spotless:check || EXIT \/B 4\n+echo \"======== Running spotless for agent ==========\"\n+cd agent\n+call mvn spotless:check || EXIT \/B 4\n+cd ..\n+echo \"======== Running spotless for application ===\"\n+call mvn -Puitests spotless:check || EXIT \/B 5\n","filename":"scripts\/checkformatting.bat","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-cd ..\/..\/core\n+cd ..\/..\n@@ -11,0 +11,1 @@\n+cd core\n@@ -14,1 +15,0 @@\n-echo \"======== Running spotless for application ===\"\n@@ -16,0 +16,5 @@\n+echo \"======== Running spotless for agent =========\"\n+cd agent\n+sh -c \"mvn spotless:check\"\n+cd ..\n+echo \"======== Running spotless for application ===\"\n","filename":"scripts\/checkformatting.sh","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,7 @@\n+@echo off\n+echo \"======== Running agent tests ================\"\n+cd agent\n+rem The integration tests fail on windows - change to \"mvn verify\" once fixed.\n+mvn test\n+echo \"======== Finished ===========================\"\n+\n","filename":"scripts\/runagenttests.bat","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+#!\/bin\/sh -l\n+\n+set -e\n+echo \"======== Running agent tests ================\"\n+cd agent\n+mvn verify\n+echo \"======== Finished ===========================\"\n+\n","filename":"scripts\/runagenttests.sh","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"}]}