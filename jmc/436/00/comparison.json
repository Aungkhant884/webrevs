{"files":[{"patch":"@@ -89,5 +89,1 @@\n-\t\t\tNumber multiplier = innerFactor.targetNumber(longMultiplier);\n-\t\t\tif (multiplier instanceof Long) {\n-\t\t\t\treturn new LongScaleFactor(multiplier.longValue());\n-\t\t\t}\n-\t\t\treturn new ImpreciseScaleFactor(multiplier);\n+\t\t\treturn innerFactor.scale(longMultiplier);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/BinaryScaleFactor.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -127,5 +127,1 @@\n-\t\t\tNumber multiplier = innerFactor.targetNumber(longMultiplier);\n-\t\t\tif (multiplier instanceof Long) {\n-\t\t\t\treturn new LongScaleFactor(multiplier.longValue());\n-\t\t\t}\n-\t\t\treturn new ImpreciseScaleFactor(multiplier);\n+\t\t\treturn innerFactor.scale(longMultiplier);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/DecimalScaleFactor.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-\tNumber getOffset();\n+\tdouble getOffset();\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/IScalarAffineTransform.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-\tprivate final Number numberFactor;\n+\tprivate final double numberFactor;\n@@ -42,1 +42,1 @@\n-\tpublic ImpreciseScaleFactor(Number factor) {\n+\tpublic ImpreciseScaleFactor(double factor) {\n@@ -51,1 +51,1 @@\n-\t\treturn new ImpreciseScaleFactor(innerFactor.targetValue(numberFactor.doubleValue()));\n+\t\treturn new ImpreciseScaleFactor(innerFactor.targetValue(numberFactor));\n@@ -56,1 +56,1 @@\n-\t\treturn new ImpreciseScaleFactor(1.0 \/ numberFactor.doubleValue());\n+\t\treturn new ImpreciseScaleFactor(1.0 \/ numberFactor);\n@@ -61,1 +61,1 @@\n-\t\tif (numberFactor.doubleValue() >= 1.0) {\n+\t\tif (numberFactor >= 1.0) {\n@@ -78,1 +78,1 @@\n-\t\tif (numberFactor.doubleValue() >= 1.0) {\n+\t\tif (numberFactor >= 1.0) {\n@@ -95,1 +95,1 @@\n-\t\treturn srcNumericalValue * numberFactor.doubleValue();\n+\t\treturn srcNumericalValue * numberFactor;\n@@ -100,1 +100,1 @@\n-\t\treturn Math.round(srcNumericalValue * numberFactor.doubleValue());\n+\t\treturn Math.round(srcNumericalValue * numberFactor);\n@@ -105,1 +105,1 @@\n-\t\treturn (long) Math.floor(srcNumericalValue * numberFactor.doubleValue());\n+\t\treturn (long) Math.floor(srcNumericalValue * numberFactor);\n@@ -133,1 +133,1 @@\n-\t\t\t\t&& numberFactor.equals(((ImpreciseScaleFactor) other).numberFactor);\n+\t\t\t\t&& Double.compare(numberFactor, ((ImpreciseScaleFactor) other).numberFactor) == 0;\n@@ -138,1 +138,1 @@\n-\t\treturn numberFactor.hashCode();\n+\t\treturn Double.hashCode(numberFactor);\n@@ -143,1 +143,1 @@\n-\t\treturn numberFactor.toString();\n+\t\treturn Double.toString(numberFactor);\n@@ -148,1 +148,1 @@\n-\t\treturn numberFactor.doubleValue();\n+\t\treturn numberFactor;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/ImpreciseScaleFactor.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-\tpublic Number getOffset() {\n+\tpublic double getOffset() {\n@@ -157,1 +157,1 @@\n-\t\t\t\ttargetNumber(innerTransform.getOffset()));\n+\t\t\t\ttargetValue(innerTransform.getOffset()));\n@@ -169,1 +169,1 @@\n-\t\tdouble otherOffset = innerTransform.getOffset().doubleValue();\n+\t\tdouble otherOffset = innerTransform.getOffset();\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/LongPostOffsetTransform.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-\tpublic Number getOffset() {\n+\tpublic double getOffset() {\n@@ -159,1 +159,1 @@\n-\t\t\t\ttargetNumber(innerTransform.getOffset()));\n+\t\t\t\ttargetValue(innerTransform.getOffset()));\n@@ -171,1 +171,1 @@\n-\t\tdouble otherOffset = innerTransform.getOffset().doubleValue();\n+\t\tdouble otherOffset = innerTransform.getOffset();\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/LongPreOffsetTransform.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,5 +50,1 @@\n-\t\tNumber multiplier = innerFactor.targetNumber(longMultiplier);\n-\t\tif (multiplier instanceof Long) {\n-\t\t\treturn new LongScaleFactor(multiplier.longValue());\n-\t\t}\n-\t\treturn new ImpreciseScaleFactor(multiplier);\n+\t\treturn innerFactor.scale(longMultiplier);\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/LongScaleFactor.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,16 +86,0 @@\n-\t@Override\n-\tpublic IQuantity in(IUnit targetUnit) {\n-\t\tif (targetUnit == unit) {\n-\t\t\treturn this;\n-\t\t}\n-\t\treturn targetUnit.quantity(numberValueIn(targetUnit));\n-\t}\n-\n-\t@Override\n-\tpublic ITypedQuantity<U> in(U targetUnit) {\n-\t\tif (targetUnit == unit) {\n-\t\t\treturn this;\n-\t\t}\n-\t\treturn targetUnit.quantity(numberValueIn(targetUnit));\n-\t}\n-\n@@ -195,0 +179,24 @@\n+\t\t@Override\n+\t\tpublic IQuantity in(IUnit targetUnit) {\n+\t\t\tif (unit == targetUnit) {\n+\t\t\t\treturn this;\n+\t\t\t}\n+\t\t\tIScalarAffineTransform transform = unit.valueTransformTo(targetUnit);\n+\t\t\tif (transform.targetOutOfRange(numericalValue, Long.MAX_VALUE)) {\n+\t\t\t\treturn targetUnit.quantity(doubleValueIn(targetUnit));\n+\t\t\t}\n+\t\t\treturn targetUnit.quantity(clampedLongValueIn(targetUnit));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ITypedQuantity<U> in(U targetUnit) {\n+\t\t\tif (unit == targetUnit) {\n+\t\t\t\treturn this;\n+\t\t\t}\n+\t\t\tIScalarAffineTransform transform = unit.valueTransformTo(targetUnit);\n+\t\t\tif (transform.targetOutOfRange(numericalValue, Long.MAX_VALUE)) {\n+\t\t\t\treturn targetUnit.quantity(doubleValueIn(targetUnit));\n+\t\t\t}\n+\t\t\treturn targetUnit.quantity(clampedLongValueIn(targetUnit));\n+\t\t}\n+\n@@ -377,0 +385,16 @@\n+\t\t@Override\n+\t\tpublic IQuantity in(IUnit targetUnit) {\n+\t\t\tif (targetUnit == unit) {\n+\t\t\t\treturn this;\n+\t\t\t}\n+\t\t\treturn targetUnit.quantity(doubleValueIn(targetUnit));\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ITypedQuantity<U> in(U targetUnit) {\n+\t\t\tif (targetUnit == unit) {\n+\t\t\t\treturn this;\n+\t\t\t}\n+\t\t\treturn targetUnit.quantity(doubleValueIn(targetUnit));\n+\t\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/ScalarQuantity.java","additions":40,"deletions":16,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-\t\t\t\ttargetNumber(innerTransform.getOffset()));\n+\t\t\t\ttargetValue(innerTransform.getOffset()));\n@@ -99,1 +99,1 @@\n-\tpublic final Number getOffset() {\n+\tpublic final double getOffset() {\n@@ -130,0 +130,7 @@\n+\tpublic ScaleFactor scale(long multiplier) {\n+\t\tif (isInteger() && !targetOutOfRange(multiplier, Long.MAX_VALUE)) {\n+\t\t\treturn new LongScaleFactor(targetValue(multiplier));\n+\t\t}\n+\t\treturn new ImpreciseScaleFactor(targetValue((double) multiplier));\n+\t}\n+\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/ScaleFactor.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-\tpublic Number getOffset() {\n+\tpublic double getOffset() {\n@@ -164,1 +164,1 @@\n-\t\t\t\ttargetNumber(innerTransform.getOffset()));\n+\t\t\t\ttargetValue(innerTransform.getOffset()));\n@@ -173,1 +173,1 @@\n-\t\tdouble otherOffset = innerTransform.getOffset().doubleValue();\n+\t\tdouble otherOffset = innerTransform.getOffset();\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/unit\/SimpleAffineTransform.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}