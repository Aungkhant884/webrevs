{"files":[{"patch":"@@ -111,1 +111,2 @@\n-        systemHeaders = HttpHeaders.of(systemHeaders.map(), (k,v) -> uh.firstValue(k).isEmpty());\n+        final HttpHeaders sh = HttpHeaders.of(systemHeaders.map(),\n+                (k,v) -> uh.firstValue(k).isEmpty());\n@@ -117,1 +118,1 @@\n-        collectHeaders1(sb, systemHeaders, nocookies);\n+        collectHeaders1(sb, sh, nocookies);\n@@ -122,1 +123,1 @@\n-        collectHeaders1(sb, userHeaders, nocookies);\n+        collectHeaders1(sb, uh, nocookies);\n@@ -124,2 +125,2 @@\n-        \/\/ Gather all 'Cookie:' headers and concatenate their\n-        \/\/ values in a single line.\n+        \/\/ Gather all 'Cookie:' headers from the unfiltered system headers,\n+        \/\/ and the user headers, and concatenate their values in a single line\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Request.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+    private static final String COOKIE_HEADER = \"Cookie\";\n@@ -241,1 +242,1 @@\n-                Log.logError(\"Subscriber::onError threw exception: {0}\", (Object) t);\n+                Log.logError(\"Subscriber::onError threw exception: {0}\", t);\n@@ -324,4 +325,1 @@\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"streamid: \")\n-                .append(streamid);\n-        return sb.toString();\n+        return \"streamid: \" + streamid;\n@@ -375,1 +373,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -427,1 +424,1 @@\n-                String msg = \"Unexpected frame: \" + frame.toString();\n+                String msg = \"Unexpected frame: \" + frame;\n@@ -629,0 +626,1 @@\n+        \/\/ Don't override Cookie values that have been set by the CookieHandler.\n@@ -630,0 +628,3 @@\n+        BiPredicate<String, String> overrides =\n+                (k, v) -> COOKIE_HEADER.equalsIgnoreCase(k)\n+                          || uh.firstValue(k).isEmpty();\n@@ -632,1 +633,3 @@\n-        sysh = HttpHeaders.of(sysh.map(), (k,v) -> uh.firstValue(k).isEmpty());\n+        \/\/   except for \"Cookie:\" - user cookies will be appended to system\n+        \/\/   cookies\n+        sysh = HttpHeaders.of(sysh.map(), overrides);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -334,2 +334,2 @@\n-                } else if (cookie.size() == 2 && !cookie.get(1).equals(\"ORDER=BISCUITS\")) {\n-                    String msg = \"Incorrect cookie header value:[\" + cookie.get(0) + \"]\";\n+                } else if (cookie.size() > 1 && !cookie.get(1).equals(\"ORDER=BISCUITS\")) {\n+                    String msg = \"Incorrect cookie header value:[\" + cookie.get(1) + \"]\";\n","filename":"test\/jdk\/java\/net\/httpclient\/CookieHeaderTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,3 @@\n- * @bug 8199851\n- * @summary Test for multiple vs single cookie header for HTTP\/2 vs HTTP\/1.1\n+ * @bug 8276774\n+ * @summary Test that user-supplied cookies are appended to\n+ *          server-cookies for HTTP\/2 vs HTTP\/1.1\n@@ -34,1 +35,1 @@\n- * @library \/lib\/testlibrary \/test\/lib http2\/server\n+ * @library \/lib\/testlibrary http2\/server\n@@ -40,1 +41,1 @@\n- *       CookieHeaderTest\n+ *       UserCookieTest\n@@ -43,11 +44,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n-import jdk.testlibrary.SimpleSSLContext;\n-import org.testng.annotations.AfterTest;\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import javax.net.ServerSocketFactory;\n-import javax.net.ssl.SSLContext;\n@@ -61,1 +51,0 @@\n-import java.net.CookieManager;\n@@ -75,1 +64,0 @@\n-import java.util.HashMap;\n@@ -85,0 +73,11 @@\n+import javax.net.ServerSocketFactory;\n+import javax.net.ssl.SSLContext;\n+\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.HttpsConfigurator;\n+import com.sun.net.httpserver.HttpsServer;\n+import jdk.testlibrary.SimpleSSLContext;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n@@ -89,1 +88,0 @@\n-import static org.testng.Assert.assertTrue;\n@@ -91,1 +89,1 @@\n-public class CookieHeaderTest implements HttpServerAdapters {\n+public class UserCookieTest implements HttpServerAdapters {\n@@ -156,0 +154,5 @@\n+        String userCookie = \"PRICE=42\";\n+        List<String> expectedCookies =\n+                Stream.concat(cookies.stream(), Stream.of(userCookie)).collect(Collectors.toList());\n+\n+\n@@ -158,1 +161,2 @@\n-                .header(\"X-uuid\", \"uuid-\" + requestCounter.incrementAndGet());\n+                .header(\"X-uuid\", \"uuid-\" + requestCounter.incrementAndGet())\n+                .header(\"Cookie\", userCookie);\n@@ -175,1 +179,1 @@\n-                    cookies.stream()\n+                    expectedCookies.stream()\n@@ -179,1 +183,2 @@\n-                    .header(\"X-uuid\", \"uuid-\" + requestCounter.incrementAndGet());\n+                    .header(\"X-uuid\", \"uuid-\" + requestCounter.incrementAndGet())\n+                    .header(\"Cookie\", userCookie);\n@@ -245,1 +250,1 @@\n-        @Override\n+        @java.lang.Override\n@@ -252,1 +257,1 @@\n-        @Override\n+        @java.lang.Override\n@@ -263,1 +268,1 @@\n-        @Override\n+        @java.lang.Override\n@@ -334,2 +339,7 @@\n-                } else if (cookie.size() == 2 && !cookie.get(1).equals(\"ORDER=BISCUITS\")) {\n-                    String msg = \"Incorrect cookie header value:[\" + cookie.get(0) + \"]\";\n+                } else if (cookie.size() > 1 && !cookie.get(1).equals(\"ORDER=BISCUITS\")) {\n+                    String msg = \"Incorrect cookie header value:[\" + cookie.get(1) + \"]\";\n+                     (new RuntimeException(msg)).printStackTrace();\n+                    t.sendResponseHeaders(500, -1);\n+                    os.write(msg.getBytes(UTF_8));\n+                } else if (cookie.size() > 2 && !cookie.get(2).equals(\"PRICE=42\")) {\n+                    String msg = \"Incorrect cookie header value:[\" + cookie.get(2) + \"]\";\n@@ -339,1 +349,1 @@\n-                } else if (cookie.size() != 2) {\n+                } else if (cookie.size() != 3) {\n@@ -396,1 +406,1 @@\n-        @Override\n+        @java.lang.Override\n@@ -473,1 +483,1 @@\n-                        if (values.size() != 2) {\n+                        if (values.size() != 3) {\n@@ -482,0 +492,3 @@\n+                        } else if (!values.get(2).equals(\"PRICE=42\")) {\n+                            resp = \"Unexpected cookie: \" + values.get(1) + \" in \" + values;\n+                            status = \"500 Internal Server Error\";\n","filename":"test\/jdk\/java\/net\/httpclient\/UserCookieTest.java","additions":44,"deletions":31,"binary":false,"changes":75,"previous_filename":"test\/jdk\/java\/net\/httpclient\/CookieHeaderTest.java","status":"copied"}]}