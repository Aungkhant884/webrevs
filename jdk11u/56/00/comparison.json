{"files":[{"patch":"@@ -87,2 +87,3 @@\n-     * The key is the AlgorithmId of the algorithm, and the value is the name of\n-     * the field or attribute.\n+     * The key is the AlgorithmId of the algorithm, and the value is a record\n+     * containing the name of the field or attribute and whether the key\n+     * should also be checked (ex: if it is a signature algorithm).\n@@ -90,1 +91,11 @@\n-    private Map<AlgorithmId, String> algorithms = new HashMap<>();\n+    private class AlgorithmInfo {\n+        String field;\n+        boolean checkKey;\n+        private AlgorithmInfo(String f, boolean cK) {\n+            field = f;\n+            checkKey = cK;\n+        }\n+        String field() { return field; }\n+        boolean checkKey() { return checkKey; }\n+    }\n+    private Map<AlgorithmId, AlgorithmInfo> algorithms = new HashMap<>();\n@@ -326,1 +337,2 @@\n-            algorithms.put(digestAlgorithmId, \"SignerInfo digestAlgorithm field\");\n+            algorithms.put(digestAlgorithmId,\n+                new AlgorithmInfo(\"SignerInfo digestAlgorithm field\", false));\n@@ -385,1 +397,2 @@\n-                    \"SignerInfo digestEncryptionAlgorithm field\");\n+                    new AlgorithmInfo(\n+                        \"SignerInfo digestEncryptionAlgorithm field\", true));\n@@ -572,1 +585,2 @@\n-        algorithms.put(digestAlgId, \"TimestampToken digestAlgorithm field\");\n+        algorithms.put(digestAlgId,\n+            new AlgorithmInfo(\"TimestampToken digestAlgorithm field\", false));\n@@ -629,1 +643,1 @@\n-        Map<AlgorithmId, String> algorithms = new HashMap<>();\n+        Map<AlgorithmId, AlgorithmInfo> algorithms = new HashMap<>();\n@@ -636,3 +650,4 @@\n-            for (Map.Entry<AlgorithmId, String> algorithm : algorithms.entrySet()) {\n-                params.setExtendedExceptionMsg(name, algorithm.getValue());\n-                AlgorithmId algId = algorithm.getKey();\n+            for (var algEntry : algorithms.entrySet()) {\n+                AlgorithmInfo info = algEntry.getValue();\n+                params.setExtendedExceptionMsg(name, info.field());\n+                AlgorithmId algId = algEntry.getKey();\n@@ -640,1 +655,1 @@\n-                    algId.getParameters(), params);\n+                    algId.getParameters(), params, info.checkKey());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/SignerInfo.java","additions":26,"deletions":11,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.security.cert.X509CRL;\n@@ -60,1 +59,0 @@\n-import sun.security.x509.X509CRLImpl;\n@@ -288,1 +286,1 @@\n-                currSigAlgParams, cp);\n+                currSigAlgParams, cp, true);\n@@ -294,1 +292,1 @@\n-            certPathDefaultConstraints.permits(currSigAlg, currSigAlgParams, cp);\n+            certPathDefaultConstraints.permits(currSigAlg, currSigAlgParams, cp, true);\n@@ -380,23 +378,0 @@\n-    \/**\n-     * Check the signature algorithm with the specified public key.\n-     *\n-     * @param key the public key to verify the CRL signature\n-     * @param crl the target CRL\n-     * @param variant the Validator variant of the operation. A null value\n-     *                passed will set it to Validator.GENERIC.\n-     * @param anchor the trust anchor selected to validate the CRL issuer\n-     *\/\n-    static void check(PublicKey key, X509CRL crl, String variant,\n-                      TrustAnchor anchor) throws CertPathValidatorException {\n-\n-        X509CRLImpl x509CRLImpl = null;\n-        try {\n-            x509CRLImpl = X509CRLImpl.toImpl(crl);\n-        } catch (CRLException ce) {\n-            throw new CertPathValidatorException(ce);\n-        }\n-\n-        AlgorithmId algorithmId = x509CRLImpl.getSigAlgId();\n-        check(key, algorithmId, variant, anchor);\n-    }\n-\n@@ -417,1 +392,1 @@\n-            new CertPathConstraintsParameters(key, variant, anchor));\n+            new CertPathConstraintsParameters(key, variant, anchor), true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/AlgorithmChecker.java","additions":3,"deletions":28,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -691,1 +691,2 @@\n-            AlgorithmChecker.check(prevKey, crl, variant, anchor);\n+            AlgorithmChecker.check(prevKey, crlImpl.getSigAlgId(),\n+                                   variant, anchor);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/DistributionPointFetcher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -197,3 +197,3 @@\n-        ConstraintsParameters cp) throws CertPathValidatorException {\n-\n-        permits(algorithm, cp);\n+            ConstraintsParameters cp, boolean checkKey)\n+            throws CertPathValidatorException {\n+        permits(algorithm, cp, checkKey);\n@@ -206,1 +206,1 @@\n-        throws CertPathValidatorException {\n+            throws CertPathValidatorException {\n@@ -224,1 +224,1 @@\n-            permits(digestAlg, cp);\n+            permits(digestAlg, cp, false);\n@@ -230,1 +230,1 @@\n-                    permits(mgfDigestAlg, cp);\n+                    permits(mgfDigestAlg, cp, false);\n@@ -238,2 +238,2 @@\n-    public final void permits(String algorithm, ConstraintsParameters cp)\n-            throws CertPathValidatorException {\n+    public final void permits(String algorithm, ConstraintsParameters cp,\n+            boolean checkKey) throws CertPathValidatorException {\n@@ -241,5 +241,6 @@\n-        \/\/ Check if named curves in the key are disabled.\n-        for (Key key : cp.getKeys()) {\n-            for (String curve : getNamedCurveFromKey(key)) {\n-                if (!cachedCheckAlgorithm(curve)) {\n-                    throw new CertPathValidatorException(\n+        if (checkKey) {\n+            \/\/ Check if named curves in the key are disabled.\n+            for (Key key : cp.getKeys()) {\n+                for (String curve : getNamedCurveFromKey(key)) {\n+                    if (!cachedCheckAlgorithm(curve)) {\n+                        throw new CertPathValidatorException(\n@@ -249,0 +250,1 @@\n+                    }\n@@ -253,1 +255,1 @@\n-        algorithmConstraints.permits(algorithm, cp);\n+        algorithmConstraints.permits(algorithm, cp, checkKey);\n@@ -487,2 +489,2 @@\n-        public void permits(String algorithm, ConstraintsParameters cp)\n-                throws CertPathValidatorException {\n+        public void permits(String algorithm, ConstraintsParameters cp,\n+                boolean checkKey) throws CertPathValidatorException {\n@@ -502,2 +504,4 @@\n-            for (Key key : cp.getKeys()) {\n-                algorithms.add(key.getAlgorithm());\n+            if (checkKey) {\n+                for (Key key : cp.getKeys()) {\n+                    algorithms.add(key.getAlgorithm());\n+                }\n@@ -513,0 +517,3 @@\n+                    if (!checkKey && constraint instanceof KeySizeConstraint) {\n+                        continue;\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":25,"deletions":18,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    public JarConstraintsParameters(List<X509Certificate> chain, Timestamp timestamp) {\n+    public JarConstraintsParameters(List<X509Certificate> chain, Date timestamp) {\n@@ -105,6 +105,1 @@\n-        if (timestamp != null) {\n-            addToCertsAndKeys(timestamp.getSignerCertPath());\n-            this.timestamp = timestamp.getTimestamp();\n-        } else {\n-            this.timestamp = null;\n-        }\n+        this.timestamp = timestamp;\n@@ -181,1 +176,1 @@\n-        return message;\n+        return message == null ? \".\" : message;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/JarConstraintsParameters.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-                   .permits(algorithm, params);\n+                .permits(algorithm, params, false);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ManifestEntryVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -362,1 +362,1 @@\n-                    .jarConstraints().permits(algorithm, params);\n+                    .jarConstraints().permits(algorithm, params, false);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureFileVerifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -976,1 +976,2 @@\n-                                c.setTime(tsTokenInfo.getDate());\n+                                Date tsDate = tsTokenInfo.getDate();\n+                                c.setTime(tsDate);\n@@ -978,1 +979,5 @@\n-                                    new JarConstraintsParameters(chain, si.getTimestamp());\n+                                    new JarConstraintsParameters(chain, tsDate);\n+                                JarConstraintsParameters jcpts =\n+                                    new JarConstraintsParameters(\n+                                        tsSi.getCertificateChain(tsToken),\n+                                        tsDate);\n@@ -980,1 +985,1 @@\n-                                        rb.getString(\"history.with.ts\"),\n+                                        rb.getString(\"history.with.ts\"),      \/\/ GLGLGL\n@@ -987,3 +992,3 @@\n-                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true, jcp),\n-                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true, jcp),\n-                                        verifyWithWeak(tsKey, jcp));\n+                                        verifyWithWeak(tsDigestAlg, DIGEST_PRIMITIVE_SET, true, jcpts),\n+                                        verifyWithWeak(tsSigAlg, SIG_PRIMITIVE_SET, true, jcpts),\n+                                        verifyWithWeak(tsKey, jcpts));\n@@ -1336,1 +1341,1 @@\n-            DISABLED_CHECK.permits(alg, jcp);\n+            DISABLED_CHECK.permits(alg, jcp, false);\n@@ -1342,1 +1347,1 @@\n-            LEGACY_CHECK.permits(alg, jcp);\n+            LEGACY_CHECK.permits(alg, jcp, false);\n@@ -1364,1 +1369,1 @@\n-            DISABLED_CHECK.permits(key.getAlgorithm(), jcp);\n+            DISABLED_CHECK.permits(key.getAlgorithm(), jcp, true);\n@@ -1370,1 +1375,1 @@\n-            LEGACY_CHECK.permits(key.getAlgorithm(), jcp);\n+            LEGACY_CHECK.permits(key.getAlgorithm(), jcp, true);\n@@ -1387,1 +1392,1 @@\n-            DISABLED_CHECK.permits(alg, jcp);\n+            DISABLED_CHECK.permits(alg, jcp, false);\n@@ -1389,1 +1394,1 @@\n-                LEGACY_CHECK.permits(alg, jcp);\n+                LEGACY_CHECK.permits(alg, jcp, false);\n@@ -1416,1 +1421,1 @@\n-            DISABLED_CHECK.permits(key.getAlgorithm(), jcp);\n+            DISABLED_CHECK.permits(key.getAlgorithm(), jcp, true);\n@@ -1418,1 +1423,1 @@\n-                LEGACY_CHECK.permits(key.getAlgorithm(), jcp);\n+                LEGACY_CHECK.permits(key.getAlgorithm(), jcp, true);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n- *      8269039\n+ *      8269039 8275887\n@@ -346,0 +346,1 @@\n+                        .shouldNotMatch(\"Signature.*(disabled)\")\n@@ -362,0 +363,2 @@\n+                        .shouldNotContain(\"option is considered a security \" +\n+                            \"risk and is disabled\")\n@@ -405,0 +408,11 @@\n+                        .shouldNotContain(\"The SHA-256 algorithm specified \" +\n+                            \"for the -digestalg option is considered a \" +\n+                            \"security risk\")\n+                        .shouldNotContain(\"The SHA256withRSA algorithm \" +\n+                            \"specified for the -sigalg option is considered \" +\n+                            \"a security risk\")\n+                        .shouldNotContain(\"The SHA-256 algorithm specified \" +\n+                            \"for the -tsadigestalg option is considered a \" +\n+                            \"security risk\")\n+                        .shouldContain(\"The RSA signing key has a keysize \" +\n+                            \"of 1024 which is considered a security risk\")\n@@ -659,1 +673,1 @@\n-                .shouldMatch(\"SignatureException:.*keysize\");\n+                .shouldMatch(\"SignatureException:.*MD5\");\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"}]}