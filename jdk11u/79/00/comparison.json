{"files":[{"patch":"@@ -64,1 +64,1 @@\n-    private synchronized native long finish();\n+    synchronized native long finish();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/java\/util\/jar\/pack\/NativeUnpack.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,0 +119,5 @@\n+                } finally {\n+                    if (_nunp != null) {\n+                       \/\/ Free up native memory and JNI handles to prevent leaks\n+                       ((NativeUnpack) _nunp).finish();\n+                    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/java\/util\/jar\/pack\/UnpackerImpl.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -317,1 +317,3 @@\n-  unpacker* uPtr = get_unpacker(env, pObj, false);\n+  \/\/ There's no need to create a new unpacker here if we don't already have one\n+  \/\/ just to immediatly free it afterwards.\n+  unpacker* uPtr = get_unpacker(env, pObj, \/* noCreate= *\/ true);\n@@ -320,0 +322,1 @@\n+  \/\/ free_unpacker() will set the unpacker field on 'pObj' to null\n","filename":"src\/jdk.pack\/share\/native\/libunpack\/jni.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315135\n+ * @run main\/othervm\/timeout=300 -Dcom.sun.java.util.jar.pack.disable.native=false -Xmx8m UnpackMalformed\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Pack200;\n+\n+@SuppressWarnings(\"removal\")\n+public class UnpackMalformed {\n+    public static void main(String[] args) {\n+        try {\n+            ByteArrayInputStream in = new ByteArrayInputStream(\"foobar\".getBytes());\n+            for (int i=0; i < 1_000; i++) {\n+                try {\n+                    JarOutputStream out = new JarOutputStream(new ByteArrayOutputStream());\n+                    Pack200.Unpacker unpacker = Pack200.newUnpacker();\n+                    unpacker.unpack(in, out);\n+                } catch (IOException e) {\n+                }\n+            }\n+        } catch (OutOfMemoryError e) {\n+            System.out.println(e);\n+            throw e;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/pack200\/UnpackMalformed.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}