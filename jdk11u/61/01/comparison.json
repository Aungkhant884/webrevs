{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import javax.lang.model.type.TypeMirror;\n@@ -155,0 +156,15 @@\n+    \/**\n+     * Returns the language model type referred to by the leaf node of the given\n+     * {@link DocTreePath}, or {@code null} if unknown. This method usually\n+     * returns the same value as {@code getElement(path).asType()} for a\n+     * {@code path} argument for which {@link #getElement(DocTreePath)} returns\n+     * a non-null value, but may return a type that includes additional\n+     * information, such as a parameterized generic type instead of a raw type.\n+     *\n+     * @param path the path for the tree node\n+     * @return the referenced type, or null\n+     *\n+     * @since 11\n+     *\/\n+    public abstract TypeMirror getType(DocTreePath path);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/util\/DocTrees.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -869,7 +869,3 @@\n-        String sig = tree.getSignature();\n-        if (sig.contains(\"<\") || sig.contains(\">\")) {\n-            env.messages.error(REFERENCE, tree, \"dc.type.arg.not.allowed\");\n-        } else {\n-            Element e = env.trees.getElement(getCurrentPath());\n-            if (e == null)\n-                env.messages.error(REFERENCE, tree, \"dc.ref.not.found\");\n+        Element e = env.trees.getElement(getCurrentPath());\n+        if (e == null) {\n+            env.messages.error(REFERENCE, tree, \"dc.ref.not.found\");\n@@ -877,0 +873,1 @@\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/Checker.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-dc.type.arg.not.allowed = type arguments not allowed here\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/doclint\/resources\/doclint.properties","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -423,0 +423,25 @@\n+    @Override @DefinedBy(Api.COMPILER_TREE)\n+    public TypeMirror getType(DocTreePath path) {\n+        DocTree tree = path.getLeaf();\n+        if (tree instanceof DCReference) {\n+            JCTree qexpr = ((DCReference)tree).qualifierExpression;\n+            if (qexpr != null) {\n+                Log.DeferredDiagnosticHandler deferredDiagnosticHandler =\n+                        new Log.DeferredDiagnosticHandler(log);\n+                try {\n+                    Env<AttrContext> env = getAttrContext(path.getTreePath());\n+                    Type t = attr.attribType(((DCReference) tree).qualifierExpression, env);\n+                    if (t != null && !t.isErroneous()) {\n+                        return t;\n+                    }\n+                } catch (Abort e) { \/\/ may be thrown by Check.completionError in case of bad class file\n+                    return null;\n+                } finally {\n+                    log.popDiagnosticHandler(deferredDiagnosticHandler);\n+                }\n+            }\n+        }\n+        Element e = getElement(path);\n+        return e == null ? null : e.asType();\n+    }\n+\n@@ -708,1 +733,1 @@\n-        if (method.params().size() != paramTypes.size())\n+        if (method.params().size() != paramTypes.size()) {\n@@ -710,53 +735,0 @@\n-\n-        List<Type> methodParamTypes = types.erasureRecursive(method.asType()).getParameterTypes();\n-\n-        return (Type.isErroneous(paramTypes))\n-            ? fuzzyMatch(paramTypes, methodParamTypes)\n-            : types.isSameTypes(paramTypes, methodParamTypes);\n-    }\n-\n-    boolean fuzzyMatch(List<Type> paramTypes, List<Type> methodParamTypes) {\n-        List<Type> l1 = paramTypes;\n-        List<Type> l2 = methodParamTypes;\n-        while (l1.nonEmpty()) {\n-            if (!fuzzyMatch(l1.head, l2.head))\n-                return false;\n-            l1 = l1.tail;\n-            l2 = l2.tail;\n-        }\n-        return true;\n-    }\n-\n-    boolean fuzzyMatch(Type paramType, Type methodParamType) {\n-        Boolean b = fuzzyMatcher.visit(paramType, methodParamType);\n-        return (b == Boolean.TRUE);\n-    }\n-\n-    TypeRelation fuzzyMatcher = new TypeRelation() {\n-        @Override\n-        public Boolean visitType(Type t, Type s) {\n-            if (t == s)\n-                return true;\n-\n-            if (s.isPartial())\n-                return visit(s, t);\n-\n-            switch (t.getTag()) {\n-            case BYTE: case CHAR: case SHORT: case INT: case LONG: case FLOAT:\n-            case DOUBLE: case BOOLEAN: case VOID: case BOT: case NONE:\n-                return t.hasTag(s.getTag());\n-            default:\n-                throw new AssertionError(\"fuzzyMatcher \" + t.getTag());\n-            }\n-        }\n-\n-        @Override\n-        public Boolean visitArrayType(ArrayType t, Type s) {\n-            if (t == s)\n-                return true;\n-\n-            if (s.isPartial())\n-                return visit(s, t);\n-\n-            return s.hasTag(ARRAY)\n-                && visit(t.elemtype, types.elemtype(s));\n@@ -765,9 +737,3 @@\n-        @Override\n-        public Boolean visitClassType(ClassType t, Type s) {\n-            if (t == s)\n-                return true;\n-\n-            if (s.isPartial())\n-                return visit(s, t);\n-\n-            return t.tsym == s.tsym;\n+        List<Type> methodParamTypes = method.asType().getParameterTypes();\n+        if (!Type.isErroneous(paramTypes) && types.isSubtypes(paramTypes, methodParamTypes)) {\n+            return true;\n@@ -776,6 +742,3 @@\n-        @Override\n-        public Boolean visitErrorType(ErrorType t, Type s) {\n-            return s.hasTag(CLASS)\n-                    && t.tsym.name == ((ClassType) s).tsym.name;\n-        }\n-    };\n+        methodParamTypes = types.erasureRecursive(methodParamTypes);\n+        return types.isSameTypes(paramTypes, methodParamTypes);\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTrees.java","additions":33,"deletions":70,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1038,11 +1038,7 @@\n-                \/*\n-                 * it seems to me this is the right thing to do, but it causes comparator failures.\n-                 *\/\n-                if (!configuration.backwardCompatibility) {\n-                    StringContent content = utils.isEnclosingPackageIncluded(refClass)\n-                            ? new StringContent(utils.getSimpleName(refClass))\n-                            : new StringContent(utils.getFullyQualifiedName(refClass));\n-                    label = plainOrCode(isLinkPlain, content);\n-                } else {\n-                    label = plainOrCode(isLinkPlain,\n-                            new StringContent(utils.getSimpleName(refClass)));\n+                if (!refClass.getTypeParameters().isEmpty() && seetext.contains(\"<\")) {\n+                    \/\/ If this is a generic type link try to use the TypeMirror representation.\n+                    TypeMirror refType = ch.getReferencedType(see);\n+                    if (refType != null) {\n+                        return plainOrCode(isLinkPlain, getLink(\n+                                new LinkInfoImpl(configuration, LinkInfoImpl.Kind.DEFAULT, refType)));\n+                    }\n@@ -1050,1 +1046,1 @@\n-\n+                label = plainOrCode(isLinkPlain, new StringContent(utils.getSimpleName(refClass)));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,1 +150,1 @@\n-        } else if (linkInfo.typeElement != null) {\n+        } else if (ctype == null && linkInfo.typeElement != null) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkFactoryImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,5 +190,0 @@\n-        \/**\n-         * The header for field documentation copied from parent.\n-         *\/\n-        VARIABLE_ELEMENT_COPY,\n-\n@@ -361,1 +356,0 @@\n-            case VARIABLE_ELEMENT_COPY:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkInfoImpl.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -140,5 +140,0 @@\n-    \/**\n-     * Maintain backward compatibility with previous javadoc version\n-     *\/\n-    public boolean backwardCompatibility = true;\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/BaseConfiguration.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+    private final BaseConfiguration configuration;\n@@ -94,1 +95,1 @@\n-        \/\/this.configuration = configuration;\n+        this.configuration = configuration;\n@@ -147,1 +148,2 @@\n-    Element getElement(BaseConfiguration c, ReferenceTree rtree) {\n+    Element getElement(ReferenceTree rtree) {\n+        Utils utils = configuration.utils;\n@@ -150,1 +152,1 @@\n-            TypeMirror symbol = c.utils.getSymbol(rtree.getSignature());\n+            TypeMirror symbol = utils.getSymbol(rtree.getSignature());\n@@ -154,1 +156,1 @@\n-            return  c.docEnv.getTypeUtils().asElement(symbol);\n+            return  configuration.docEnv.getTypeUtils().asElement(symbol);\n@@ -163,2 +165,2 @@\n-            CommentHelper ovch = c.utils.getCommentHelper(overriddenElement);\n-            return ovch.getElement(c, rtree);\n+            CommentHelper ovch = utils.getCommentHelper(overriddenElement);\n+            return ovch.getElement(rtree);\n@@ -173,2 +175,2 @@\n-                CommentHelper ovch = c.utils.getCommentHelper(overriddenElement);\n-                return ovch.getElement(c, rtree);\n+                CommentHelper ovch = utils.getCommentHelper(overriddenElement);\n+                return ovch.getElement(rtree);\n@@ -178,1 +180,1 @@\n-        DocTrees doctrees = c.docEnv.getDocTrees();\n+        DocTrees doctrees = configuration.docEnv.getDocTrees();\n@@ -182,0 +184,9 @@\n+    public TypeMirror getType(ReferenceTree rtree) {\n+        DocTreePath docTreePath = DocTreePath.getPath(path, dctree, rtree);\n+        if (docTreePath != null) {\n+            DocTrees doctrees = configuration.docEnv.getDocTrees();\n+            return doctrees.getType(docTreePath);\n+        }\n+        return null;\n+    }\n+\n@@ -186,1 +197,1 @@\n-            return getElement(c, exceptionName);\n+            return getElement(exceptionName);\n@@ -434,24 +445,1 @@\n-        return new SimpleDocTreeVisitor<Element, Void>() {\n-            @Override\n-            public Element visitSee(SeeTree node, Void p) {\n-                for (DocTree dt : node.getReference()) {\n-                    return visit(dt, null);\n-                }\n-                return null;\n-            }\n-\n-            @Override\n-            public Element visitLink(LinkTree node, Void p) {\n-                return visit(node.getReference(), null);\n-            }\n-\n-            @Override\n-            public Element visitProvides(ProvidesTree node, Void p) {\n-                return visit(node.getServiceType(), null);\n-            }\n-\n-            @Override\n-            public Element visitValue(ValueTree node, Void p) {\n-                return visit(node.getReference(), null);\n-            }\n-\n+        return new ReferenceDocTreeVisitor<Element>() {\n@@ -460,11 +448,1 @@\n-                return getElement(c, node);\n-            }\n-\n-            @Override\n-            public Element visitSerialField(SerialFieldTree node, Void p) {\n-                return visit(node.getType(), null);\n-            }\n-\n-            @Override\n-            public Element visitUses(UsesTree node, Void p) {\n-                return visit(node.getServiceType(), null);\n+                return getElement(node);\n@@ -472,0 +450,2 @@\n+        }.visit(dtree, null);\n+    }\n@@ -473,0 +453,2 @@\n+    public TypeMirror getReferencedType(DocTree dtree) {\n+        return new ReferenceDocTreeVisitor<TypeMirror>() {\n@@ -474,2 +456,2 @@\n-            protected Element defaultAction(DocTree node, Void p) {\n-               return null;\n+            public TypeMirror visitReference(ReferenceTree node, Void p) {\n+                return getType(node);\n@@ -489,1 +471,1 @@\n-        return new SimpleDocTreeVisitor<String, Void>() {\n+        return new ReferenceDocTreeVisitor<String>() {\n@@ -491,5 +473,2 @@\n-            public String visitSee(SeeTree node, Void p) {\n-                for (DocTree dt : node.getReference()) {\n-                    return visit(dt, null);\n-                }\n-                return null;\n+            public String visitReference(ReferenceTree node, Void p) {\n+                return node.getSignature();\n@@ -497,0 +476,2 @@\n+        }.visit(dtree, null);\n+    }\n@@ -498,3 +479,5 @@\n-            @Override\n-            public String visitLink(LinkTree node, Void p) {\n-                return visit(node.getReference(), null);\n+    private static class ReferenceDocTreeVisitor<R> extends SimpleDocTreeVisitor<R, Void> {\n+        @Override\n+        public R visitSee(SeeTree node, Void p) {\n+            for (DocTree dt : node.getReference()) {\n+                return visit(dt, null);\n@@ -502,0 +485,2 @@\n+            return null;\n+        }\n@@ -503,4 +488,4 @@\n-            @Override\n-            public String visitValue(ValueTree node, Void p) {\n-                return visit(node.getReference(), null);\n-            }\n+        @Override\n+        public R visitLink(LinkTree node, Void p) {\n+            return visit(node.getReference(), null);\n+        }\n@@ -508,4 +493,4 @@\n-            @Override\n-            public String visitReference(ReferenceTree node, Void p) {\n-                return node.getSignature();\n-            }\n+        @Override\n+        public R visitProvides(ProvidesTree node, Void p) {\n+            return visit(node.getServiceType(), null);\n+        }\n@@ -513,4 +498,4 @@\n-            @Override\n-            public String visitSerialField(SerialFieldTree node, Void p) {\n-                return visit(node.getType(), null);\n-            }\n+        @Override\n+        public R visitValue(ValueTree node, Void p) {\n+            return visit(node.getReference(), null);\n+        }\n@@ -518,5 +503,14 @@\n-            @Override\n-            protected String defaultAction(DocTree node, Void p) {\n-               return null;\n-            }\n-        }.visit(dtree, null);\n+        @Override\n+        public R visitSerialField(SerialFieldTree node, Void p) {\n+            return visit(node.getType(), null);\n+        }\n+\n+        @Override\n+        public R visitUses(UsesTree node, Void p) {\n+            return visit(node.getServiceType(), null);\n+        }\n+\n+        @Override\n+        protected R defaultAction(DocTree node, Void p) {\n+            return null;\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":67,"deletions":73,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8177280\n+ * @summary see and link tag syntax should allow generic types\n+ * @library ..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build JavadocTester\n+ * @run main TestGenericTypeLink\n+ *\/\n+\n+public class TestGenericTypeLink extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestGenericTypeLink test = new TestGenericTypeLink();\n+        test.runTests();\n+    }\n+\n+    \/**\n+     * Test valid internal and external links to generic types.\n+     *\/\n+    @Test\n+    public void testValidLinks() {\n+        javadoc(\"-d\", \"out1\",\n+                \"-sourcepath\", testSrc,\n+                \"-linkoffline\", \"http:\/\/example.com\/docs\/api\/\", testSrc,\n+                \"-package\", \"pkg1\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"pkg1\/A.html\", true,\n+                \"<div class=\\\"block\\\"><code><a href=\\\"http:\/\/example.com\/docs\/api\/java.base\"\n+                + \"\/java\/util\/List.html?is-external=true\\\" title=\\\"class or interface in java.util\\\" \"\n+                + \"class=\\\"externalLink\\\">List<\/a>&lt;<a href=\\\"http:\/\/example.com\/docs\/api\/\"\n+                + \"java.base\/java\/lang\/String.html?is-external=true\\\" title=\\\"class or interface in java.lang\\\" \"\n+                + \"class=\\\"externalLink\\\">String<\/a>&gt;<\/code>\\n\"\n+                + \" <a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/java\/util\/\"\n+                + \"List.html?is-external=true\\\" title=\\\"class or interface in java.util\\\" class=\\\"externalLink\\\">\"\n+                + \"List<\/a>&lt;? extends <a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/\"\n+                + \"java\/lang\/CharSequence.html?is-external=true\\\" title=\\\"class or interface in java.lang\\\" \"\n+                + \"class=\\\"externalLink\\\">CharSequence<\/a>&gt;\\n\"\n+                + \" <a href=\\\"#someMethod(java.util.List,int)\\\"><code>someMethod(\"\n+                + \"ArrayList&lt;Integer&gt;, int)<\/code><\/a>\\n\"\n+                + \" <a href=\\\"#otherMethod(java.util.Map,double)\\\"><code>otherMethod(\"\n+                + \"Map&lt;String, StringBuilder&gt;, double)<\/code><\/a><\/div>\\n\",\n+\n+                \"<dl>\\n\"\n+                + \"<dt><span class=\\\"seeLabel\\\">See Also:<\/span><\/dt>\\n\"\n+                + \"<dd><code><a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/\"\n+                + \"java\/util\/Map.html?is-external=true\\\" title=\\\"class or interface in java.util\\\" \"\n+                + \"class=\\\"externalLink\\\">Map<\/a>&lt;<a href=\\\"http:\/\/example.com\/\"\n+                + \"docs\/api\/java.base\/java\/lang\/String.html?is-external=true\\\" title=\\\"class or interface \"\n+                + \"in java.lang\\\" class=\\\"externalLink\\\">String<\/a>,&#8203;? extends \"\n+                + \"<a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/\"\n+                + \"java\/lang\/CharSequence.html?is-external=true\\\" title=\\\"class or interface in \"\n+                + \"java.lang\\\" class=\\\"externalLink\\\">CharSequence<\/a>&gt;<\/code>, \\n\"\n+                + \"<code><a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/\"\n+                + \"java\/util\/Map.html?is-external=true\\\" title=\\\"class or interface in java.util\\\" \"\n+                + \"class=\\\"externalLink\\\">Map<\/a>&lt;<a href=\\\"http:\/\/example.com\/docs\/api\/\"\n+                + \"java.base\/java\/lang\/String.html?is-external=true\\\" title=\\\"class or interface in java.lang\\\" \"\n+                + \"class=\\\"externalLink\\\">String<\/a>,&#8203;? super <a href=\\\"A.html\\\" title=\\\"class in pkg1\\\">\"\n+                + \"A<\/a>&lt;<a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/\"\n+                + \"java\/lang\/String.html?is-external=true\\\" title=\\\"class or interface in java.lang\\\" \"\n+                + \"class=\\\"externalLink\\\">String<\/a>,&#8203;? extends <a href=\\\"http:\/\/example.com\/docs\/api\"\n+                + \"\/java.base\/java\/lang\/RuntimeException.html?is-external=true\\\" \"\n+                + \"title=\\\"class or interface in java.lang\\\" class=\\\"externalLink\\\">RuntimeException<\/a>\"\n+                + \"&gt;&gt;<\/code>, \\n\"\n+                + \"<a href=\\\"#someMethod(java.util.List,int)\\\"><code>someMethod\"\n+                + \"(List&lt;Number&gt;, int)<\/code><\/a>, \\n\"\n+                + \"<a href=\\\"#otherMethod(java.util.Map,double)\\\"><code>otherMethod\"\n+                + \"(Map&lt;String, ? extends CharSequence&gt;, double)<\/code><\/a><\/dd>\\n\"\n+                + \"<\/dl>\"\n+                );\n+        checkOutput(\"pkg1\/A.SomeException.html\", true,\n+                \"<div class=\\\"block\\\"><code><a href=\\\"A.html\\\" title=\\\"class in pkg1\\\">A<\/a>&lt;\"\n+                + \"<a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/java\/lang\/String.html?is-external=true\"\n+                + \"\\\" title=\\\"class or interface in java.lang\\\" class=\\\"externalLink\\\">String<\/a>\"\n+                + \",&#8203;<a href=\\\"A.SomeException.html\\\" title=\\\"class in pkg1\\\">A.SomeException<\/a>&gt;<\/code>\\n\"\n+                + \" <a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/java\/util\/Map.html?is-external=true\"\n+                + \"\\\" title=\\\"class or interface in java.util\\\" class=\\\"externalLink\\\">\"\n+                + \"link to generic type with label<\/a><\/div>\",\n+\n+                \"<dl>\\n\"\n+                + \"<dt><span class=\\\"seeLabel\\\">See Also:<\/span><\/dt>\\n\"\n+                + \"<dd><code><a href=\\\"A.html\\\" title=\\\"class in pkg1\\\">A<\/a>&lt;<a href=\\\"http:\/\/example.com\/docs\/api\"\n+                + \"\/java.base\/java\/lang\/String.html?is-external=true\\\" \"\n+                + \"title=\\\"class or interface in java.lang\\\" class=\\\"externalLink\\\">String<\/a>\"\n+                + \",&#8203;<a href=\\\"A.SomeException.html\\\" title=\\\"class in pkg1\\\">A.SomeException<\/a>&gt;<\/code>, \\n\"\n+                + \"<a href=\\\"http:\/\/example.com\/docs\/api\/java.base\/\"\n+                + \"java\/util\/List.html?is-external=true\\\" title=\\\"class or interface in java.util\\\" \"\n+                + \"class=\\\"externalLink\\\"><code>Link to generic type with label<\/code><\/a><\/dd>\\n\"\n+                + \"<\/dl>\"\n+                );\n+    }\n+\n+    \/**\n+     * Test invalid links to generic types.\n+     *\/\n+    @Test\n+    public void testInvalidLinks() {\n+        javadoc(\"-d\", \"out2\",\n+                \"-sourcepath\", testSrc,\n+                \"-linkoffline\", \"http:\/\/example.com\/docs\/api\/\", testSrc,\n+                \"-package\", \"pkg2\");\n+        checkExit(Exit.ERROR);\n+        checkOutput(\"pkg2\/B.html\", true,\n+                \"<div class=\\\"block\\\"><code>java.util.Foo<String><\/code>\\n\"\n+                + \" Baz<Object>\\n\"\n+                + \" <code>#b(List<Integer>)<\/code><\/div>\",\n+\n+                \"<dl>\\n\"\n+                + \"<dt><span class=\\\"seeLabel\\\">See Also:<\/span><\/dt>\\n\"\n+                + \"<dd><code>java.util.List<Bar><\/code>, \\n\"\n+                + \"<code>Baz<Object, String><\/code>, \\n\"\n+                + \"<code>B#b(List<Baz>)<\/code><\/dd>\\n<\/dl>\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/TestGenericTypeLink.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+module:java.base\n+java.io\n+java.lang\n+java.util\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/element-list","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg1;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+\/**\n+ * {@link List<String>}\n+ * {@linkplain List<? extends CharSequence>}\n+ * {@link #someMethod(ArrayList<Integer>, int)}\n+ * {@link A#otherMethod(Map<String, StringBuilder>, double)}\n+ *\n+ * @see Map<String, ? extends CharSequence>\n+ * @see Map<String, ? super A<String, ? extends RuntimeException>>\n+ * @see #someMethod(List<Number>, int)\n+ * @see #otherMethod(Map<String, ? extends CharSequence>, double)\n+ *\/\n+public class A<T, E extends Exception> {\n+\n+    \/**\n+     * {@link A<String, A.SomeException>}\n+     * {@linkplain Map<String, ? extends CharSequence> link to generic type with label}\n+     *\n+     * @see A<String, A.SomeException>\n+     * @see List<String> Link to generic type with label\n+     *\/\n+    static class SomeException extends Exception {}\n+\n+    \/**\n+     * @param list a list\n+     * @param i an int\n+     *\/\n+    public void someMethod(List<? extends Number> list, int i) {}\n+\n+    \/**\n+     * @param list a list\n+     * @param d a double\n+     *\/\n+    public void otherMethod(Map<String, ?> list, double d) {}\n+\n+    \/**\n+     * Here's a generic link: {@link A<Object, RuntimeException>.Inner}\n+     *\/\n+    public void overriddenMethod() {}\n+\n+    \/**\n+     * @see A<String, java.lang.RuntimeException>.Inner\n+     * @see A<A<String, java.lang.RuntimeException>.Inner, A.SomeException>\n+     *\/\n+    class Inner {}\n+\n+}\n+\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/pkg1\/A.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package pkg2;\n+\n+import java.util.List;\n+\n+\/**\n+ * {@link java.util.Foo<String>}\n+ * {@linkplain Baz<Object>}\n+ * {@link #b(List<Integer>)}\n+ *\n+ * @see java.util.List<Bar>\n+ * @see Baz<Object, String>\n+ * @see B#b(List<Baz>)\n+ *\/\n+public class B {\n+\n+    public static void b(List<? extends CharSequence> l) {}\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testGenericTypeLink\/pkg2\/B.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8004832 8020556 8002154 8200432\n+ * @bug 8004832 8020556 8002154 8200432 8177280\n","filename":"test\/langtools\/tools\/doclint\/ReferenceTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,7 +28,1 @@\n-ReferenceTest.java:60: error: type arguments not allowed here\n-     * {@link java.util.List<String>}\n-              ^\n-ReferenceTest.java:61: error: type arguments not allowed here\n-     * {@link java.util.List<String>#equals}\n-              ^\n-ReferenceTest.java:62: error: type arguments not allowed here\n+ReferenceTest.java:62: error: reference not found\n@@ -37,7 +31,1 @@\n-ReferenceTest.java:63: error: type arguments not allowed here\n-     * @see java.util.List<String>\n-            ^\n-ReferenceTest.java:64: error: type arguments not allowed here\n-     * @see java.util.List<String>#equals\n-            ^\n-ReferenceTest.java:65: error: type arguments not allowed here\n+ReferenceTest.java:65: error: reference not found\n@@ -52,1 +40,1 @@\n-16 errors\n+12 errors\n@@ -54,1 +42,0 @@\n-\n","filename":"test\/langtools\/tools\/doclint\/ReferenceTest.out","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"}]}