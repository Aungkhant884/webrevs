{"files":[{"patch":"@@ -86,0 +86,1 @@\n+  BUILD_JDK_JTREG_EXCLUDE += exeLibraryCache.c\n","filename":"make\/test\/JtregNativeJdk.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -163,1 +163,1 @@\n-JVM_LoadLibrary(const char *name);\n+JVM_LoadLibrary(const char *name, jboolean throwException);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3445,1 +3445,1 @@\n-JVM_ENTRY_NO_ENV(void*, JVM_LoadLibrary(const char* name))\n+JVM_ENTRY_NO_ENV(void*, JVM_LoadLibrary(const char* name, jboolean throwException))\n@@ -3455,12 +3455,16 @@\n-    char msg[1024];\n-    jio_snprintf(msg, sizeof msg, \"%s: %s\", name, ebuf);\n-    \/\/ Since 'ebuf' may contain a string encoded using\n-    \/\/ platform encoding scheme, we need to pass\n-    \/\/ Exceptions::unsafe_to_utf8 to the new_exception method\n-    \/\/ as the last argument. See bug 6367357.\n-    Handle h_exception =\n-      Exceptions::new_exception(thread,\n-                                vmSymbols::java_lang_UnsatisfiedLinkError(),\n-                                msg, Exceptions::unsafe_to_utf8);\n-\n-    THROW_HANDLE_0(h_exception);\n+    if (throwException) {\n+      char msg[1024];\n+      jio_snprintf(msg, sizeof msg, \"%s: %s\", name, ebuf);\n+      \/\/ Since 'ebuf' may contain a string encoded using\n+      \/\/ platform encoding scheme, we need to pass\n+      \/\/ Exceptions::unsafe_to_utf8 to the new_exception method\n+      \/\/ as the last argument. See bug 6367357.\n+      Handle h_exception =\n+        Exceptions::new_exception(thread,\n+                                  vmSymbols::java_lang_UnsatisfiedLinkError(),\n+                                  msg, Exceptions::unsafe_to_utf8);\n+\n+      THROW_HANDLE_0(h_exception);\n+    } else {\n+      return load_result;\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import sun.security.action.GetPropertyAction;\n@@ -31,0 +32,11 @@\n+    private static final boolean hasDynamicLoaderCache;\n+    static {\n+        String osVersion = GetPropertyAction.privilegedGetProperty(\"os.version\");\n+        \/\/ dynamic linker cache support on os.version >= 11.x\n+        int major = 11;\n+        int i = osVersion.indexOf('.');\n+        try {\n+            major = Integer.parseInt(i < 0 ? osVersion : osVersion.substring(0, i));\n+        } catch (NumberFormatException e) {}\n+        hasDynamicLoaderCache = major >= 11;\n+    }\n@@ -34,0 +46,14 @@\n+    \/**\n+     * Returns true if loading a native library only if\n+     * it's present on the file system.\n+     *\n+     * @implNote\n+     * On macOS 11.x or later which supports dynamic linker cache,\n+     * the dynamic library is not present on the filesystem.  The\n+     * library cannot determine if a dynamic library exists on a\n+     * given path or not and so this method returns false.\n+     *\/\n+    static boolean loadLibraryOnlyIfPresent() {\n+        return !hasDynamicLoaderCache;\n+    }\n+\n","filename":"src\/java.base\/macosx\/classes\/java\/lang\/ClassLoaderHelper.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2409,0 +2409,2 @@\n+        private static final boolean loadLibraryOnlyIfPresent = ClassLoaderHelper.loadLibraryOnlyIfPresent();\n+\n@@ -2423,1 +2425,2 @@\n-        native boolean load0(String name, boolean isBuiltin);\n+        native boolean load0(String name, boolean isBuiltin,\n+                             boolean throwExceptionIfFail);\n@@ -2442,1 +2445,1 @@\n-            if (!load0(name, isBuiltin)) return false;\n+            if (!load0(name, isBuiltin, loadLibraryOnlyIfPresent)) return false;\n@@ -2684,1 +2687,4 @@\n-                            return file.exists() ? file.getCanonicalPath() : null;\n+                            if (NativeLibrary.loadLibraryOnlyIfPresent && !file.exists()) {\n+                                return null;\n+                            }\n+                            return file.getCanonicalPath();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -339,1 +339,2 @@\n-  (JNIEnv *env, jobject this, jstring name, jboolean isBuiltin)\n+  (JNIEnv *env, jobject this, jstring name,\n+   jboolean isBuiltin, jboolean throwExceptionIfFail)\n@@ -353,1 +354,1 @@\n-    handle = isBuiltin ? procHandle : JVM_LoadLibrary(cname);\n+    handle = isBuiltin ? procHandle : JVM_LoadLibrary(cname, throwExceptionIfFail);\n","filename":"src\/java.base\/share\/native\/libjava\/ClassLoader.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,8 @@\n+    \/**\n+     * Returns true if loading a native library only if\n+     * it's present on the file system.\n+     *\/\n+    static boolean loadLibraryOnlyIfPresent() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ClassLoaderHelper.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,8 @@\n+    \/**\n+     * Returns true if loading a native library only if\n+     * it's present on the file system.\n+     *\/\n+    static boolean loadLibraryOnlyIfPresent() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/windows\/classes\/java\/lang\/ClassLoaderHelper.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8275703\n+ * @library \/test\/lib\n+ * @requires os.family == \"mac\"\n+ * @run main\/native\/othervm -Djava.library.path=\/usr\/lib LibraryFromCache blas\n+ * @run main\/native\/othervm -Djava.library.path=\/usr\/lib LibraryFromCache BLAS\n+ * @summary Test System::loadLibrary to be able to load a library even\n+ *          if it's not present on the filesystem on macOS which supports\n+ *          dynamic library cache\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class LibraryFromCache {\n+    public static void main(String[] args) throws IOException {\n+        String libname = args[0];\n+        if (!systemHasLibrary(libname)) {\n+            System.out.println(\"Test skipped. Library \" + libname + \" not found\");\n+            return;\n+        }\n+\n+        System.loadLibrary(libname);\n+    }\n+\n+    \/*\n+     * Returns true if dlopen successfully loads the specified library\n+     *\/\n+    private static boolean systemHasLibrary(String libname) throws IOException {\n+        Path launcher = Paths.get(System.getProperty(\"test.nativepath\"), \"LibraryCache\");\n+        ProcessBuilder pb = new ProcessBuilder(launcher.toString(), \"lib\" + libname + \".dylib\");\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(pb.start());\n+        System.out.println(outputAnalyzer.getOutput());\n+        return outputAnalyzer.getExitValue() == 0;\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/loadLibrary\/exeLibraryCache\/LibraryFromCache.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <dlfcn.h>\n+\n+int main(int argc, char** argv)\n+{\n+    void *handle;\n+\n+    if (argc != 2) {\n+        fprintf(stderr, \"Usage: %s <lib_filename_or_full_path>\\n\", argv[0]);\n+        return EXIT_FAILURE;\n+    }\n+\n+    printf(\"Attempting to load library '%s'...\\n\", argv[1]);\n+\n+    handle = dlopen(argv[1], RTLD_LAZY);\n+\n+    if (handle == NULL) {\n+       fprintf(stderr, \"Unable to load library!\\n\");\n+       return EXIT_FAILURE;\n+    }\n+\n+    printf(\"Library successfully loaded!\\n\");\n+\n+    return dlclose(handle);\n+}\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/loadLibrary\/exeLibraryCache\/exeLibraryCache.c","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}