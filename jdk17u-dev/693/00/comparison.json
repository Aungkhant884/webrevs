{"files":[{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8262721\n+ * @summary Add Tests to verify single iteration loops are properly optimized\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestFewIterationsCountedLoop\n+ *\/\n+\n+public class TestFewIterationsCountedLoop {\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:LoopUnrollLimit=0\");\n+        TestFramework.run();\n+    }\n+\n+    static volatile int barrier;\n+    static final Object object = new Object();\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void singleIterationFor() {\n+        for (int i = 0; i < 1; i++) {\n+            barrier = 0x42; \/\/ something that can't be optimized out\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void singleIterationWhile() {\n+        int i = 0;\n+        while (i < 1) {\n+            barrier = 0x42;\n+            i++;\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    @Warmup(1) \/\/ So C2 can't rely on profile data\n+    public static void singleIterationDoWhile() {\n+        int i = 0;\n+        do {\n+            synchronized(object) {} \/\/ so loop head is not cloned by ciTypeFlow\n+            barrier = 0x42;\n+            i++;\n+        } while (i < 1);\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"0\" }, counts = { IRNode.COUNTEDLOOP, \"1\" })\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"> 0\" }, failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void twoIterationsFor() {\n+        for (int i = 0; i < 2; i++) {\n+            barrier = 0x42; \/\/ something that can't be optimized out\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"0\" }, counts = { IRNode.COUNTEDLOOP, \"1\" })\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"> 0\" }, failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void twoIterationsWhile() {\n+        int i = 0;\n+        while (i < 2) {\n+            barrier = 0x42;\n+            i++;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"0\" }, counts = { IRNode.COUNTEDLOOP, \"1\" })\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"> 0\" }, failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void twoIterationsDoWhile() {\n+        int i = 0;\n+        do {\n+            synchronized(object) {} \/\/ so loop head is not cloned by ciTypeFlow\n+            barrier = 0x42;\n+            i++;\n+        } while (i < 2);\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"0\" }, counts = { IRNode.COUNTEDLOOP, \"1\" })\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"> 0\" }, failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void threadIterationsFor() {\n+        for (int i = 0; i < 2; i++) {\n+            barrier = 0x42; \/\/ something that can't be optimized out\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"0\" }, counts = { IRNode.COUNTEDLOOP, \"1\" })\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"> 0\" }, failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void threeIterationsWhile() {\n+        int i = 0;\n+        while (i < 2) {\n+            barrier = 0x42;\n+            i++;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"0\" }, counts = { IRNode.COUNTEDLOOP, \"1\" })\n+    @IR(applyIf = { \"LoopUnrollLimit\", \"> 0\" }, failOn = { IRNode.COUNTEDLOOP, IRNode.LOOP })\n+    public static void threeIterationsDoWhile() {\n+        int i = 0;\n+        do {\n+            synchronized(object) {} \/\/ so loop head is not cloned by ciTypeFlow\n+            barrier = 0x42;\n+            i++;\n+        } while (i < 2);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestFewIterationsCountedLoop.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}