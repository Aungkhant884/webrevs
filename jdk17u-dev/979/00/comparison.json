{"files":[{"patch":"@@ -154,0 +154,4 @@\n+bool Block::is_trivially_unreachable() const {\n+  return num_preds() <= 1 && !head()->is_Root() && !head()->is_Start();\n+}\n+\n@@ -173,1 +177,1 @@\n-  if (num_preds() <= 1) {\n+  if (is_trivially_unreachable()) {\n@@ -611,13 +615,0 @@\n-  \/\/ If the fake exit block becomes unreachable, remove it from the block list.\n-  if (dead->num_preds() == 1) {\n-    for (uint i = 0; i < number_of_blocks(); i++) {\n-      Block* block = get_block(i);\n-      if (block == dead) {\n-        _blocks.remove(i);\n-      } else if (block->_pre_order > dead->_pre_order) {\n-        \/\/ Enforce contiguous pre-order indices (assumed by PhaseBlockLayout).\n-        block->_pre_order--;\n-      }\n-    }\n-    _number_of_blocks--;\n-  }\n@@ -960,0 +951,40 @@\n+void PhaseCFG::remove_unreachable_blocks() {\n+  ResourceMark rm;\n+  Block_List unreachable;\n+  \/\/ Initialize worklist of unreachable blocks to be removed.\n+  for (uint i = 0; i < number_of_blocks(); i++) {\n+    Block* block = get_block(i);\n+    assert(block->_pre_order == i, \"Block::pre_order does not match block index\");\n+    if (block->is_trivially_unreachable()) {\n+      unreachable.push(block);\n+    }\n+  }\n+  \/\/ Now remove all blocks that are transitively unreachable.\n+  while (unreachable.size() > 0) {\n+    Block* dead = unreachable.pop();\n+    \/\/ When this code runs (after PhaseCFG::fixup_flow()), Block::_pre_order\n+    \/\/ does not contain pre-order but block-list indices. Ensure they stay\n+    \/\/ contiguous by decrementing _pre_order for all elements after 'dead'.\n+    \/\/ Block::_rpo does not contain valid reverse post-order indices anymore\n+    \/\/ (they are invalidated by block insertions in PhaseCFG::fixup_flow()),\n+    \/\/ so there is no need to update them.\n+    for (uint i = dead->_pre_order + 1; i < number_of_blocks(); i++) {\n+      get_block(i)->_pre_order--;\n+    }\n+    _blocks.remove(dead->_pre_order);\n+    _number_of_blocks--;\n+    \/\/ Update the successors' predecessor list and push new unreachable blocks.\n+    for (uint i = 0; i < dead->_num_succs; i++) {\n+      Block* succ = dead->_succs[i];\n+      Node* head = succ->head();\n+      for (int j = head->req() - 1; j >= 1; j--) {\n+        if (get_block_for_node(head->in(j)) == dead) {\n+          head->del_req(j);\n+        }\n+      }\n+      if (succ->is_trivially_unreachable()) {\n+        unreachable.push(succ);\n+      }\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":45,"deletions":14,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -324,0 +324,3 @@\n+  \/\/ Whether the block is not root-like and does not have any predecessors.\n+  bool is_trivially_unreachable() const;\n+\n@@ -607,0 +610,4 @@\n+  \/\/ Remove all blocks that are transitively unreachable. Such blocks can be\n+  \/\/ found e.g. after PhaseCFG::convert_NeverBranch_to_Goto(). This function\n+  \/\/ assumes post-fixup_flow() block indices (Block::_pre_order, Block::_rpo).\n+  void remove_unreachable_blocks();\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2759,0 +2759,1 @@\n+    cfg.remove_unreachable_blocks();\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}