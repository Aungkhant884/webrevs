{"files":[{"patch":"@@ -376,0 +376,9 @@\n+\/\/ Release a range allocated with reserve_multiple carefully, to not trip mapping\n+\/\/ asserts on Windows in os::release_memory()\n+static void carefully_release_multiple(address start, int num_stripes, size_t stripe_len) {\n+  for (int stripe = 0; stripe < num_stripes; stripe++) {\n+    address q = start + (stripe * stripe_len);\n+    EXPECT_TRUE(os::release_memory((char*)q, stripe_len));\n+  }\n+}\n+\n@@ -388,11 +397,13 @@\n-  size_t total_range_len = num_stripes * stripe_len;\n-  \/\/ Reserve a large contiguous area to get the address space...\n-  address p = (address)os::reserve_memory(total_range_len);\n-  EXPECT_NE(p, (address)NULL);\n-  \/\/ .. release it...\n-  EXPECT_TRUE(os::release_memory((char*)p, total_range_len));\n-  \/\/ ... re-reserve in the same spot multiple areas...\n-  for (int stripe = 0; stripe < num_stripes; stripe++) {\n-    address q = p + (stripe * stripe_len);\n-    \/\/ Commit, alternatingly with or without exec permission,\n-    \/\/  to prevent kernel from folding these mappings.\n+  address p = NULL;\n+  for (int tries = 0; tries < 256 && p == NULL; tries ++) {\n+    size_t total_range_len = num_stripes * stripe_len;\n+    \/\/ Reserve a large contiguous area to get the address space...\n+    p = (address)os::reserve_memory(total_range_len);\n+    EXPECT_NE(p, (address)NULL);\n+    \/\/ .. release it...\n+    EXPECT_TRUE(os::release_memory((char*)p, total_range_len));\n+    \/\/ ... re-reserve in the same spot multiple areas...\n+    for (int stripe = 0; stripe < num_stripes; stripe++) {\n+      address q = p + (stripe * stripe_len);\n+      \/\/ Commit, alternatingly with or without exec permission,\n+      \/\/  to prevent kernel from folding these mappings.\n@@ -400,1 +411,1 @@\n-    const bool executable = exec_supported ? (stripe % 2 == 0) : false;\n+      const bool executable = exec_supported ? (stripe % 2 == 0) : false;\n@@ -402,1 +413,1 @@\n-    const bool executable = stripe % 2 == 0;\n+      const bool executable = stripe % 2 == 0;\n@@ -404,3 +415,10 @@\n-    q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);\n-    EXPECT_NE(q, (address)NULL);\n-    EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable));\n+      q = (address)os::attempt_reserve_memory_at((char*)q, stripe_len, executable);\n+      if (q == NULL) {\n+        \/\/ Someone grabbed that area concurrently. Cleanup, then retry.\n+        tty->print_cr(\"reserve_multiple: retry (%d)...\", stripe);\n+        carefully_release_multiple(p, stripe, stripe_len);\n+        p = NULL;\n+      } else {\n+        EXPECT_TRUE(os::commit_memory((char*)q, stripe_len, executable));\n+      }\n+    }\n@@ -429,8 +447,0 @@\n-\/\/ Release a range allocated with reserve_multiple carefully, to not trip mapping\n-\/\/ asserts on Windows in os::release_memory()\n-static void carefully_release_multiple(address start, int num_stripes, size_t stripe_len) {\n-  for (int stripe = 0; stripe < num_stripes; stripe++) {\n-    address q = start + (stripe * stripe_len);\n-    EXPECT_TRUE(os::release_memory((char*)q, stripe_len));\n-  }\n-}\n","filename":"test\/hotspot\/gtest\/runtime\/test_os.cpp","additions":34,"deletions":24,"binary":false,"changes":58,"status":"modified"}]}