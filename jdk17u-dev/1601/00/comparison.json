{"files":[{"patch":"@@ -83,0 +83,1 @@\n+\n@@ -87,1 +88,2 @@\n-  }  else {\n+    _reference_stack[_depth] = reference;\n+  } else {\n@@ -91,0 +93,6 @@\n+    _mark_bits->mark_obj(pointee);\n+    _reference_stack[_depth] = reference;\n+    \/\/ is the pointee a sample object?\n+    if (pointee->mark().is_marked()) {\n+      add_chain();\n+    }\n@@ -92,9 +100,0 @@\n-  _reference_stack[_depth] = reference;\n-  _mark_bits->mark_obj(pointee);\n-  assert(_mark_bits->is_marked(pointee), \"invariant\");\n-\n-  \/\/ is the pointee a sample object?\n-  if (pointee->mark().is_marked()) {\n-    add_chain();\n-  }\n-\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/dfsClosure.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -237,1 +237,9 @@\n-  return leak_context_edge_idx(sample) != 0;\n+  const int idx = leak_context_edge_idx(sample);\n+  if (idx == 0) {\n+    return false;\n+  }\n+  assert(idx > 0, \"invariant\");\n+  assert(_leak_context_edges != nullptr, \"invariant\");\n+  assert(idx < _leak_context_edges->length(), \"invariant\");\n+  assert(_leak_context_edges->at(idx) != nullptr, \"invariant\");\n+  return true;\n@@ -246,1 +254,4 @@\n-      return _leak_context_edges->at(idx);\n+      assert(idx < _leak_context_edges->length(), \"invariant\");\n+      const StoredEdge* const edge =_leak_context_edges->at(idx);\n+      assert(edge != nullptr, \"invariant\");\n+      return edge;\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeStore.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}