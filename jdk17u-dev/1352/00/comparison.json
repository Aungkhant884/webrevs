{"files":[{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4170447\n+   @summary JTable: non-Icon data in Icon column.\n+   @key headful\n+*\/\n+\n+import java.io.File;\n+import java.awt.Component;\n+import javax.swing.ImageIcon;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.TableCellRenderer;\n+import javax.swing.table.TableModel;\n+\n+public class bug4170447 {\n+\n+    static volatile boolean failed = false;\n+    static volatile JFrame frame = null;\n+\n+    public static void main(String args[]) throws Exception {\n+         SwingUtilities.invokeAndWait(bug4170447::createUI);\n+         Thread.sleep(5000);\n+         SwingUtilities.invokeAndWait(() -> {\n+             if (frame != null) {\n+                frame.dispose();\n+             }\n+         });\n+        if (failed) {\n+            throw new RuntimeException(\"Some exception occurred...\");\n+        }\n+    }\n+\n+    static void createUI() {\n+        String imgDir = System.getProperty(\"test.src\", \".\");\n+        String imgPath = imgDir + File.separator + \"swing.small.gif\";\n+        ImageIcon icn = new ImageIcon(imgPath,\"test\");\n+        final Object data[][] = {\n+            {\"CELL 0 0\", icn},\n+            {\"CELL 1 0\", \"String\"}\n+        };\n+        String[] str = {\"Column 0\", \"Column 1\"};\n+\n+        TableModel dataModel = new AbstractTableModel() {\n+                public int getColumnCount() { return 2; }\n+                public int getRowCount() { return 2; }\n+                public Object getValueAt(int row, int col) {return data[row][col];}\n+                public Class getColumnClass(int c) {return getValueAt(0, c).getClass();}\n+                public boolean isCellEditable(int row, int col) {return getColumnClass(col) == String.class;}\n+                public void setValueAt(Object aValue, int row, int column) {data[row][column] = aValue;}\n+            };\n+\n+        MyTable tbl = new MyTable(dataModel);\n+        JScrollPane sp = new JScrollPane(tbl);\n+        frame = new JFrame(\"bug4170447\");\n+        frame.getContentPane().add(sp);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    static class MyTable extends JTable {\n+        public MyTable(TableModel tm) {\n+            super(tm);\n+        }\n+\n+        public Component prepareRenderer(TableCellRenderer rend, int row, int col) {\n+            try {\n+                return super.prepareRenderer(rend, row, col);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                failed = true;\n+                return null;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/4170447\/bug4170447.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"filename":"test\/jdk\/javax\/swing\/JTable\/4170447\/swing.small.gif","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4098201\n+   @summary Tests setRowHeight(int row, int height).\n+*\/\n+\n+import javax.swing.JTable;\n+\n+public class bug4098201 {\n+\n+  public static void main(String args[]) {\n+    JTable table = new JTable(4,3);\n+    table.setRowHeight(1, table.getRowHeight()*2);\n+    if (table.getRowHeight(0) * 2 != table.getRowHeight(1)) {\n+        throw new Error(\"Can't set height for specified row...\");\n+    }\n+  }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4098201.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4130356\n+   @summary JTable.setRowSelectionInterval(int, int) shouldn't accept invalid range\n+*\/\n+\n+import javax.swing.JTable;\n+import javax.swing.ListSelectionModel;\n+\n+public class bug4130356 {\n+\n+  public static void main(String[] argv) {\n+    JTable table = new JTable(4,3);\n+    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+    try {\n+      table.setRowSelectionInterval(10,13);\n+      throw new Error(\"Invalid arguments supported!!!\");\n+    } catch (IllegalArgumentException iae) {}\n+  }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4130356.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4159300\n+   @summary Tests that JTable processes tableChanged events quickly\n+   @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Container;\n+import java.awt.Rectangle;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+public class bug4159300 {\n+\n+    static volatile JFrame frame = null;\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(bug4159300::createUI);\n+        Thread.sleep(3000);\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        });\n+    }\n+\n+    static void createUI() {\n+        frame = new JFrame(\"bug4159300\");\n+        Container c = frame.getContentPane();\n+        c.setLayout(new BorderLayout());\n+        \/\/ create table\n+        Object[] columnNames = {\"only column\"};\n+        DefaultTableModel model = new DefaultTableModel(columnNames, 0);\n+        Object[] row = makeRow(model.getRowCount());\n+        model.addRow(row);\n+\n+        JTable table = new JTable(model);\n+        c.add(new JScrollPane(table), BorderLayout.CENTER);\n+\n+        \/\/ create button\n+        JButton immediateButton = new JButton(\"Add row\");\n+        immediateButton.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                int rowCount = model.getRowCount();\n+                Object[] row = makeRow(rowCount);\n+                model.addRow(row);\n+                int rows = model.getRowCount();\n+                int lastRow = rows - 1;\n+                table.setRowSelectionInterval(lastRow, lastRow);\n+                Rectangle r = table.getCellRect(lastRow, 0, false);\n+                table.scrollRectToVisible(r);\n+            }\n+        });\n+        c.add(immediateButton, BorderLayout.SOUTH);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    static Object[] makeRow(int rowNumber) {\n+        Object[] row = { \"\"+rowNumber };\n+        return row;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4159300.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4243159\n+   @summary Tests that JTable() do not throw ArrayIndexOutOfBoundsException\n+*\/\n+\n+import javax.swing.JTable;\n+\n+public class bug4243159 {\n+\n+    \/* Looks boring, but tests the no-args constructor works *\/\n+    public static void main(String[] argv) {\n+        JTable table = new JTable();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4243159.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4243313\n+   @summary Tests that instantiating JTable through reflection\n+            does not throw ClassNotFoundException\n+*\/\n+\n+import java.beans.Beans;\n+\n+public class bug4243313 {\n+\n+    public static void main(String[] argv) throws Exception {\n+        Object table = Beans.instantiate(null, \"javax.swing.JTable\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4243313.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+   @test\n+   @bug 4247487\n+   @summary Tests that the following methods of JTable are public:\n+            int getAccessibleColumnAtIndex(int)\n+            int getAccessibleRowAtIndex(int)\n+            int getAccessibleIndexAt(int, int)\n+*\/\n+\n+import javax.swing.JTable;\n+\n+public class bug4247487 {\n+\n+    static class TestTable extends JTable {\n+\n+        public TestTable() {\n+            super(new Object[][]{{\"one\", \"two\"}},\n+                  new Object[]{\"A\", \"B\"});\n+        }\n+\n+        public void test() {\n+            int[] rowIndices = {0, 0, 1, 1};\n+            int[] colIndices = {0, 1, 0, 1};\n+            JTable.AccessibleJTable at =\n+                (JTable.AccessibleJTable)getAccessibleContext();\n+\n+            for (int i=0; i<4; i++) {\n+                if (at.getAccessibleRowAtIndex(i) != rowIndices[i]) {\n+                    throw new Error(\"Failed: wrong row index\");\n+                }\n+                if (at.getAccessibleColumnAtIndex(i) != colIndices[i]) {\n+                    throw new Error(\"Failed: wrong column index\");\n+                }\n+            }\n+            if (at.getAccessibleIndexAt(0,0) != 0 ||\n+                at.getAccessibleIndexAt(0,1) != 1 ||\n+                at.getAccessibleIndexAt(1,0) != 2 ||\n+                at.getAccessibleIndexAt(1,1) != 3) {\n+\n+                throw new Error(\"Failed: wrong index\");\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] argv) {\n+        TestTable test = new TestTable();\n+        test.test();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4247487.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+   @test\n+   @bug 4248070\n+   @summary cellEditor bound in JTable.\n+*\/\n+\n+import javax.swing.JTable;\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.IntrospectionException;\n+import java.beans.PropertyDescriptor;\n+\n+public class bug4248070 {\n+\n+  public static void main(String[] argv) {\n+\n+    BeanInfo bi = null;\n+\n+    try {\n+        bi = Introspector.getBeanInfo(JTable.class);\n+    } catch (IntrospectionException e) {\n+    }\n+\n+    PropertyDescriptor[] pd = bi.getPropertyDescriptors();\n+    int i;\n+    for (i=0; i<pd.length; i++) {\n+        if (pd[i].getName().equals(\"cellEditor\")) {\n+            break;\n+        }\n+    }\n+    if (!pd[i].isBound()) {\n+       throw new RuntimeException(\"cellEditor property of JTable isn't flagged as bound in bean info...\");\n+    }\n+  }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JTable\/bug4248070.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}