{"files":[{"patch":"@@ -493,2 +493,5 @@\n-        int index = (int)indexCoder;\n-        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, index << coder);\n+        int index = ((int)indexCoder) << coder;\n+        if (index < 0) {\n+            throw new OutOfMemoryError(\"Overflow: String length out of range\");\n+        }\n+        return (byte[]) UNSAFE.allocateUninitializedArray(byte.class, index);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test 8297530\n+ * @summary This sanity tests that OOME is correctly thrown when\n+ *          the length of the array to be allocated for a concatenation.\n+ *          Before the fix for 8297530 an IllegalArgumentException could\n+ *          erroneously be thrown when the length of the string is between\n+ *          Integer.MAX_VALUE \/ 2 and Integer.MAX_VALUE and the String coder\n+ *          is UTF16.\n+ *\n+ * @requires sun.arch.data.model == \"64\"\n+ * @run main\/othervm -Xverify:all -Xmx4g ImplicitStringConcatOOME\n+ * @run main\/othervm -Xverify:all -Xmx4g -XX:-CompactStrings ImplicitStringConcatOOME\n+ *\/\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+public class ImplicitStringConcatOOME {\n+\n+    static String s000, s001, s002, s003, s004, s005, s006, s007, s008, s009;\n+    static String s010, s011, s012, s013, s014, s015, s016, s017, s018, s019;\n+    static String s020, s021, s022, s023, s024, s025, s026, s027, s028, s029;\n+    static String s030, s031, s032, s033, s034, s035, s036, s037, s038, s039;\n+    static String s040, s041, s042, s043, s044, s045, s046, s047, s048, s049;\n+    static String s050, s051, s052, s053, s054, s055, s056, s057, s058, s059;\n+    static String s060, s061, s062, s063, s064, s065, s066, s067, s068, s069;\n+    static String s070, s071, s072, s073, s074, s075, s076, s077, s078, s079;\n+    static String s080, s081, s082, s083, s084, s085, s086, s087, s088, s089;\n+    static String s090, s091, s092, s093, s094, s095, s096, s097, s098, s099;\n+\n+    static String s100, s101, s102, s103, s104, s105, s106, s107, s108, s109;\n+    static String s110, s111, s112, s113, s114, s115, s116, s117, s118, s119;\n+    static String s120, s121, s122, s123, s124, s125, s126, s127, s128, s129;\n+    static String s130, s131, s132, s133, s134, s135, s136, s137, s138, s139;\n+    static String s140, s141, s142, s143, s144, s145, s146, s147, s148, s149;\n+    static String s150, s151, s152, s153, s154, s155, s156, s157, s158, s159;\n+    static String s160, s161, s162, s163, s164, s165, s166, s167, s168, s169;\n+    static String s170, s171, s172, s173, s174, s175, s176, s177, s178, s179;\n+    static String s180, s181, s182, s183, s184, s185, s186, s187, s188, s189;\n+    static String s190, s191, s192, s193, s194, s195, s196, s197, s198, s199;\n+\n+    static String s_utf16;\n+    static {\n+        String s = \"10 letters\".repeat(1_073_742);\n+        for (Field f : ImplicitStringConcatOOME.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(f.getModifiers())) {\n+                try {\n+                    f.set(null, s);\n+                } catch (IllegalAccessException e) {\n+                    throw new IllegalStateException(e);\n+                }\n+            }\n+        }\n+        s_utf16 = \"\\u0257\";\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            String res =\n+                    s000 + s001 + s002 + s003 + s004 + s005 + s006 + s007 + s008 + s009 +\n+                    s010 + s011 + s012 + s013 + s014 + s015 + s016 + s017 + s018 + s019 +\n+                    s020 + s021 + s022 + s023 + s024 + s025 + s026 + s027 + s028 + s029 +\n+                    s030 + s031 + s032 + s033 + s034 + s035 + s036 + s037 + s038 + s039 +\n+                    s040 + s041 + s042 + s043 + s044 + s045 + s046 + s047 + s048 + s049 +\n+                    s050 + s051 + s052 + s053 + s054 + s055 + s056 + s057 + s058 + s059 +\n+                    s060 + s061 + s062 + s063 + s064 + s065 + s066 + s067 + s068 + s069 +\n+                    s070 + s071 + s072 + s073 + s074 + s075 + s076 + s077 + s078 + s079 +\n+                    s080 + s081 + s082 + s083 + s084 + s085 + s086 + s087 + s088 + s089 +\n+                    s090 + s091 + s092 + s093 + s094 + s095 + s096 + s097 + s098 + s099 +\n+\n+                    s100 + s101 + s102 + s103 + s104 + s105 + s106 + s107 + s108 + s109 +\n+                    s110 + s111 + s112 + s113 + s114 + s115 + s116 + s117 + s118 + s119 +\n+                    s120 + s121 + s122 + s123 + s124 + s125 + s126 + s127 + s128 + s129 +\n+                    s130 + s131 + s132 + s133 + s134 + s135 + s136 + s137 + s138 + s139 +\n+                    s140 + s141 + s142 + s143 + s144 + s145 + s146 + s147 + s148 + s149 +\n+                    s150 + s151 + s152 + s153 + s154 + s155 + s156 + s157 + s158 + s159 +\n+                    s160 + s161 + s162 + s163 + s164 + s165 + s166 + s167 + s168 + s169 +\n+                    s170 + s171 + s172 + s173 + s174 + s175 + s176 + s177 + s178 + s179 +\n+                    s180 + s181 + s182 + s183 + s184 + s185 + s186 + s187 + s188 + s189 +\n+                    s190 + s191 + s192 + s193 + s194 + s195 + s196 + s197 + s198 + s199;\n+            throw new IllegalStateException(\"Expected OOME\");\n+        } catch (OutOfMemoryError e) {\n+            \/\/ Expected\n+        }\n+        try {\n+            \/\/ Compact Strings meant capacity for UTF16 strings were cut in\n+            \/\/ half, regardless of -XX:+CompactStrings setting\n+            String res =\n+                    s000 + s001 + s002 + s003 + s004 + s005 + s006 + s007 + s008 + s009 +\n+                    s010 + s011 + s012 + s013 + s014 + s015 + s016 + s017 + s018 + s019 +\n+                    s020 + s021 + s022 + s023 + s024 + s025 + s026 + s027 + s028 + s029 +\n+                    s030 + s031 + s032 + s033 + s034 + s035 + s036 + s037 + s038 + s039 +\n+                    s040 + s041 + s042 + s043 + s044 + s045 + s046 + s047 + s048 + s049 +\n+                    s050 + s051 + s052 + s053 + s054 + s055 + s056 + s057 + s058 + s059 +\n+                    s060 + s061 + s062 + s063 + s064 + s065 + s066 + s067 + s068 + s069 +\n+                    s070 + s071 + s072 + s073 + s074 + s075 + s076 + s077 + s078 + s079 +\n+                    s080 + s081 + s082 + s083 + s084 + s085 + s086 + s087 + s088 + s089 +\n+                    s090 + s091 + s092 + s093 + s094 + s095 + s096 + s097 + s098 + s099 +\n+                    s_utf16;\n+            throw new IllegalStateException(\"Expected OOME\");\n+        } catch (OutOfMemoryError e) {\n+            \/\/ Expected\n+        }\n+    }\n+\n+    public static void test(String expected, String actual) {\n+       \/\/ Fingers crossed: String concat should work.\n+       if (!expected.equals(actual)) {\n+          throw new IllegalStateException(\"Expected = \" + expected + \", actual = \" + actual);\n+       }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/lang\/String\/concat\/ImplicitStringConcatOOME.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}