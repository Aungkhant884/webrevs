{"files":[{"patch":"@@ -3522,1 +3522,1 @@\n-        if (m->outcnt() == 0) {\n+        if (m->outcnt() == 0 && m != top()) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8287432\n+ * @summary Test removal of precedence edge of MemBarAcquire together with other now dead input nodes which visits a\n+ *          top node. This resulted in a crash before as it disconnected top from the graph which is unexpected.\n+ *\n+ * @run main\/othervm -Xbatch compiler.c2.TestRemoveMemBarPrecEdge\n+ *\/\n+package compiler.c2;\n+\n+public class TestRemoveMemBarPrecEdge {\n+    static boolean flag = false;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+            flag = !flag;\n+        }\n+    }\n+\n+    public static void test() {\n+        \/\/ currentThread() is intrinsified and C2 emits a special AddP node with a base that is top.\n+        Thread t = Thread.currentThread();\n+        \/\/ getName() returns the volatile _name field. The method is inlined and we just emit a LoadN + DecodeN which\n+        \/\/ is a precedence edge input into both MemBarAcquire nodes below for the volatile field _name.\n+        if (flag) {\n+            t.getName();\n+        } else {\n+            t.getName();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestRemoveMemBarPrecEdge.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}