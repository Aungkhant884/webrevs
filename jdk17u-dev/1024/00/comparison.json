{"files":[{"patch":"@@ -3696,0 +3696,2 @@\n+\/\/ Goes over all children of the root of the loop tree, collects all controls for the loop and its inner loops then\n+\/\/ checks whether any control is a branch out of the loop and if it is, whether it's not a NeverBranch.\n@@ -3698,9 +3700,19 @@\n-    uint i = 1;\n-    for (; i < C->root()->req(); i++) {\n-      Node* in = C->root()->in(i);\n-      if (in != NULL &&\n-          in->Opcode() == Op_Halt &&\n-          in->in(0)->is_Proj() &&\n-          in->in(0)->in(0)->Opcode() == Op_NeverBranch &&\n-          in->in(0)->in(0)->in(0) == l->_head) {\n-        break;\n+    Unique_Node_List wq;\n+    Node* head = l->_head;\n+    assert(head->is_Region(), \"\");\n+    for (uint i = 1; i < head->req(); ++i) {\n+      Node* in = head->in(i);\n+      if (get_loop(in) != _ltree_root) {\n+        wq.push(in);\n+      }\n+    }\n+    for (uint i = 0; i < wq.size(); ++i) {\n+      Node* c = wq.at(i);\n+      if (c == head) {\n+        continue;\n+      } else if (c->is_Region()) {\n+        for (uint j = 1; j < c->req(); ++j) {\n+          wq.push(c->in(j));\n+        }\n+      } else {\n+        wq.push(c->in(0));\n@@ -3709,2 +3721,12 @@\n-    if (i == C->root()->req()) {\n-      return false;\n+    assert(wq.member(head), \"\");\n+    for (uint i = 0; i < wq.size(); ++i) {\n+      Node* c = wq.at(i);\n+      if (c->is_MultiBranch()) {\n+        for (DUIterator_Fast jmax, j = c->fast_outs(jmax); j < jmax; j++) {\n+          Node* u = c->fast_out(j);\n+          assert(u->is_CFG(), \"\");\n+          if (!wq.member(u) && c->Opcode() != Op_NeverBranch) {\n+            return false;\n+          }\n+        }\n+      }\n@@ -3713,1 +3735,0 @@\n-\n@@ -3728,0 +3749,2 @@\n+  bool do_max_unroll = (_mode == LoopOptsMaxUnroll);\n+\n@@ -3797,2 +3820,2 @@\n-  bool stop_early = !C->has_loops() && !skip_loop_opts && !do_split_ifs && !_verify_me && !_verify_only &&\n-    !bs->is_gc_specific_loop_opts_pass(_mode);\n+  bool stop_early = !C->has_loops() && !skip_loop_opts && !do_split_ifs && !do_max_unroll && !_verify_me &&\n+          !_verify_only && !bs->is_gc_specific_loop_opts_pass(_mode);\n@@ -3937,1 +3960,1 @@\n-  if (_mode == LoopOptsMaxUnroll) {\n+  if (do_max_unroll) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":38,"deletions":15,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8294217\n+ * @summary Assertion failure: parsing found no loops but there are some\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm -Xmx1G -XX:-BackgroundCompilation TestInfiniteLoopNest\n+ *\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+public class TestInfiniteLoopNest {\n+    long l;\n+\n+    void q() {\n+        if (b) {\n+            Object o = new Object();\n+            return;\n+        }\n+\n+        do {\n+            l++;\n+            while (l != 1) --l;\n+            l = 9;\n+        } while (l != 5);\n+\n+    }\n+\n+    public static void main(String[] p) throws Exception {\n+        Thread thread = new Thread() {\n+            public void run() {\n+                TestInfiniteLoopNest t = new TestInfiniteLoopNest();\n+                for (int i = 524; i < 19710; i += 1) {\n+                    b = true;\n+                    t.q();\n+                    b = false;\n+                }\n+                t.q();\n+            }\n+        };\n+        \/\/ Give thread some time to trigger compilation\n+        thread.setDaemon(true);\n+        thread.start();\n+        Thread.sleep(Utils.adjustTimeout(4000));\n+    }\n+\n+    static Boolean b;\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestInfiniteLoopNest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}