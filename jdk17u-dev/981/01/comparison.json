{"files":[{"patch":"@@ -42,0 +42,2 @@\n+    public static final String SAFEPOINT_WHILE_PRINTING_MESSAGE = \"<!-- safepoint while printing -->\";\n+\n@@ -490,1 +492,10 @@\n-            throw new IRViolationException(failuresBuilder.toString(), compilationsBuilder.toString());\n+\n+            \/\/ In some very rare cases, the VM output to regex match on contains \"<!-- safepoint while printing -->\"\n+            \/\/ (emitted by ttyLocker::break_tty_for_safepoint) which might be the reason for a matching error.\n+            \/\/ Do not throw an exception in this case (i.e. bailout).\n+            String compilations = compilationsBuilder.toString();\n+            if (!compilations.contains(SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+                throw new IRViolationException(failuresBuilder.toString(), compilations);\n+            } else {\n+                System.out.println(\"Found \" + SAFEPOINT_WHILE_PRINTING_MESSAGE + \", bail out of IR matching\");\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/IRMatcher.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,3 +34,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n+import java.util.*;\n@@ -45,1 +43,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -54,1 +52,7 @@\n-    private static final List<Exception> exceptions = new ArrayList<>();\n+    private static final Map<Exception, String> exceptions = new LinkedHashMap<>();\n+    private static final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private static final ByteArrayOutputStream baosErr = new ByteArrayOutputStream();\n+    private static final PrintStream ps = new PrintStream(baos);\n+    private static final PrintStream psErr = new PrintStream(baosErr);\n+    private static final PrintStream oldOut = System.out;\n+    private static final PrintStream oldErr = System.err;\n@@ -57,2 +61,3 @@\n-        System.out.println(TestFramework.getLastTestVMOutput());\n-        exceptions.add(e);\n+        System.out.flush();\n+        System.err.flush();\n+        exceptions.put(e, baos.toString() + System.lineSeparator() + baosErr.toString());\n@@ -62,3 +67,3 @@\n-        runFailOnTestsArgs(BadFailOnConstraint.create(AndOr1.class, \"test1(int)\", 1, \"CallStaticJava\"), \"-XX:TLABRefillWasteFraction=50\", \"-XX:+UsePerfData\", \"-XX:+UseTLAB\");\n-        runFailOnTestsArgs(BadFailOnConstraint.create(AndOr1.class, \"test2()\", 1, \"CallStaticJava\"), \"-XX:TLABRefillWasteFraction=50\", \"-XX:-UsePerfData\", \"-XX:+UseTLAB\");\n-\n+        \/\/ Redirect System.out and System.err to reduce noise.\n+        System.setOut(ps);\n+        System.setErr(psErr);\n@@ -70,0 +75,3 @@\n+        runCheck(new String[] {\"-XX:TLABRefillWasteFraction=50\", \"-XX:+UsePerfData\", \"-XX:+UseTLAB\"}, BadFailOnConstraint.create(AndOr1.class, \"test1(int)\", 1, \"CallStaticJava\"));\n+        runCheck(new String[] {\"-XX:TLABRefillWasteFraction=50\", \"-XX:-UsePerfData\", \"-XX:+UseTLAB\"}, BadFailOnConstraint.create(AndOr1.class, \"test2()\", 1, \"CallStaticJava\"));\n+\n@@ -226,6 +234,0 @@\n-        \/\/ Redirect stdout to stream and then check if we find required IR encoding read from socket.\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        PrintStream ps = new PrintStream(baos);\n-        PrintStream old = System.out;\n-        System.setOut(ps);\n-\n@@ -234,1 +236,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveThrownException(baos.toString());\n@@ -237,1 +239,1 @@\n-                boolean failed = false;\n+                StringBuilder failures = new StringBuilder();\n@@ -245,2 +247,1 @@\n-                    exceptions.add(new RuntimeException(\"Could not find all both() methods, expected 7 but found \" + bothCount));\n-                    failed = true;\n+                    failures.append(\"- Could not find all both() methods, expected 7 but found \").append(bothCount).append(System.lineSeparator());\n@@ -253,1 +254,3 @@\n-                    Asserts.assertFalse(match.contains(\"PrintOptoAssembly\"), \"Cannot contain opto assembly: \" + output);\n+                    if (match.contains(\"PrintOptoAssembly\")) {\n+                        failures.append(\"Cannot contain opto assembly: \").append(System.lineSeparator()).append(match);\n+                    }\n@@ -257,2 +260,1 @@\n-                    exceptions.add(new RuntimeException(\"Could not find all ideal() methods, expected 7 but found \" + count));\n-                    failed = true;\n+                    failures.append(\"- Could not find all ideal() methods, expected 7 but found \").append(count).append(System.lineSeparator());\n@@ -265,1 +267,3 @@\n-                    Asserts.assertFalse(match.contains(\"PrintIdeal\"), \"Cannot contain opto assembly: \" + output);\n+                    if (match.contains(\"PrintIdeal\")) {\n+                        failures.append(\"Cannot contain print assembly: \").append(System.lineSeparator()).append(match);\n+                    }\n@@ -269,2 +273,1 @@\n-                    exceptions.add(new RuntimeException(\"Could not find all opto() methods, expected 7 but found \" + count));\n-                    failed = true;\n+                    failures.append(\"- Could not find all opto() methods, expected 7 but found \").append(count).append(System.lineSeparator());\n@@ -272,3 +275,2 @@\n-                if (failed) {\n-                    System.err.println(TestFramework.getLastTestVMOutput());\n-                    System.err.println(output);\n+                if (!failures.isEmpty()) {\n+                    addException(new RuntimeException(failures.toString()));\n@@ -286,1 +288,0 @@\n-        baos.reset();\n@@ -293,1 +294,0 @@\n-        baos.reset();\n@@ -300,1 +300,0 @@\n-        baos.reset();\n@@ -303,1 +302,2 @@\n-        System.setOut(old);\n+        System.setOut(oldOut);\n+        System.setErr(oldErr);\n@@ -306,3 +306,8 @@\n-            System.err.println(\"TestIRMatching failed with one or more exceptions:\");\n-            for (Exception e : exceptions) {\n-                System.err.println(e.getMessage());\n+            System.err.println(\"TestIRMatching failed with \" + exceptions.size() + \" exception(s):\");\n+            int i = 1;\n+            System.err.println(\"************************\");\n+            for (Map.Entry<Exception, String> entry : exceptions.entrySet()) {\n+                System.err.println(\"***** Exception \" + String.format(\"%02d\", i++) +\" *****\");\n+                System.err.println(\"************************\");\n+\n+                Exception e = entry.getKey();\n@@ -310,1 +315,16 @@\n-                System.err.println(\"---------\");\n+                System.err.println();\n+                System.err.println(\"===== OUTPUT ======\");\n+                System.err.println(entry.getValue());\n+                System.err.println(\"MESSAGE: \" + e.getMessage());\n+                System.err.println(\"************************\");\n+            }\n+            i = 1;\n+            System.err.println(\"====================================\");\n+            System.err.println(\"********************\");\n+            System.err.println(\"***** OVERVIEW *****\");\n+            System.err.println(\"********************\");\n+            for (Map.Entry<Exception, String> entry : exceptions.entrySet()) {\n+                Exception e = entry.getKey();\n+                System.err.print((i++) + \") \");\n+                entry.getKey().printStackTrace(System.err);\n+                System.err.println(\"********************\");\n@@ -312,1 +332,1 @@\n-            throw new RuntimeException(\"TestIRMatching failed with one or more exceptions - check stderr and stdout\");\n+            throw new RuntimeException(\"TestIRMatching failed with \" + exceptions.size() + \" exception(s) - check stderr and stdout\");\n@@ -316,0 +336,6 @@\n+    private static void runFramework(TestFramework framework) {\n+        baos.reset();\n+        baosErr.reset();\n+        framework.start();\n+    }\n+\n@@ -318,1 +344,1 @@\n-            new TestFramework(clazz).addFlags(args).start();\n+            runFramework(new TestFramework(clazz).addFlags(args));\n@@ -325,1 +351,1 @@\n-        new TestFramework(clazz).addFlags(args).start();\n+        runFramework(new TestFramework(clazz).addFlags(args));\n@@ -330,2 +356,6 @@\n-            new TestFramework(constraints[0].getKlass()).addFlags(args).start(); \/\/ All constraints have the same class.\n-            shouldNotReach();\n+            TestFramework framework = new TestFramework(constraints[0].getKlass()); \/\/ All constraints have the same class.\n+            if (args != null) {\n+                framework.addFlags(args);\n+            }\n+            runFramework(framework);\n+            Utils.shouldHaveThrownException(baos.toString());\n@@ -340,8 +370,1 @@\n-        try {\n-            TestFramework.run(constraints[0].getKlass()); \/\/ All constraints have the same class.\n-            shouldNotReach();\n-        } catch (IRViolationException e) {\n-            checkConstraints(e, constraints);\n-        } catch (Exception e) {\n-            addException(e);\n-        }\n+        runCheck(null, constraints);\n@@ -357,1 +380,1 @@\n-            System.out.println(TestFramework.getLastTestVMOutput());\n+            System.out.println(e.getCompilations());\n@@ -359,17 +382,1 @@\n-            exceptions.add(e1);\n-        }\n-    }\n-\n-    \/\/ Single constraint\n-    private static void runFailOnTestsArgs(Constraint constraint, String... args) {\n-        try {\n-            new TestFramework(constraint.getKlass()).addFlags(args).start(); \/\/ All constraints have the same class.\n-            shouldNotReach();\n-        } catch (IRViolationException e) {\n-            try {\n-                constraint.checkConstraint(e);\n-            } catch (Exception e1) {\n-                addException(e);\n-            }\n-        } catch (Exception e) {\n-            addException(e);\n+            addException(e1);\n@@ -379,4 +386,0 @@\n-    public static void shouldNotReach() {\n-        throw new ShouldNotReachException(\"Framework did not fail but it should have!\");\n-    }\n-\n@@ -394,2 +397,3 @@\n-        Asserts.assertTrue(output.contains(builder.toString()), \"Could not find encoding: \\\"\" + builder.toString()\n-                                                                + System.lineSeparator());\n+        if (!output.contains(builder.toString())) {\n+            addException(new RuntimeException(\"Could not find encoding: \\\"\" + builder.toString() + System.lineSeparator()));\n+        }\n@@ -1453,6 +1457,0 @@\n-class ShouldNotReachException extends RuntimeException {\n-    ShouldNotReachException(String s) {\n-        super(s);\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":78,"deletions":80,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n@@ -37,1 +39,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -44,0 +46,5 @@\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintStream ps = new PrintStream(baos);\n+        PrintStream oldOut = System.out;\n+        System.setOut(ps);\n+\n@@ -47,1 +54,1 @@\n-            throw new RuntimeException(\"Should not reach\");\n+            Utils.shouldHaveThrownException(baos.toString());\n@@ -49,0 +56,1 @@\n+            System.setOut(oldOut);\n@@ -53,0 +61,1 @@\n+        System.setOut(oldOut);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestRunTests.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -47,1 +47,4 @@\n-            Asserts.fail(\"Should not reach\");\n+            if (Utils.notAllBailedOut(sDefault, s1, s3)) {\n+                \/\/ Not all scenarios had a bailout which means that at least one exception should have been thrown.\n+                Asserts.fail(\"Should have thrown an exception\");\n+            }\n@@ -49,1 +52,4 @@\n-            Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\"), e.getMessage());\n+            if (!e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\")) {\n+                \/\/ Was there a bailout in a scenario? If not fail.\n+                Asserts.assertTrue(Utils.anyBailedOut(sDefault, s1, s3), e.getMessage());\n+            }\n@@ -53,1 +59,4 @@\n-            Asserts.fail(\"Should not reach\");\n+            if (Utils.notAllBailedOut(s1, s3)) {\n+                \/\/ Not all scenarios had a bailout which means that at least one exception should have been thrown.\n+                Asserts.fail(\"Should have thrown an exception\");\n+            }\n@@ -55,1 +64,4 @@\n-            Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #1, #3\"), e.getMessage());\n+            if (!e.getMessage().contains(\"The following scenarios have failed: #1, #3\")) {\n+                \/\/ Was there a bailout in a scenario? If not fail.\n+                Asserts.assertTrue(Utils.anyBailedOut(sDefault, s1, s3), e.getMessage());\n+            }\n@@ -74,1 +86,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenarios.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.driver.IRMatcher;\n+import compiler.lib.ir_framework.driver.TestVMProcess;\n+import jdk.test.lib.Asserts;\n+\n+import java.util.Arrays;\n+\n+public class Utils {\n+    public static void shouldHaveThrownException(String s) {\n+        \/\/ Do not throw an exception if we hit a safepoint while printing which could possibly let the IR matching fail.\n+        \/\/ This happens very rarely. If there is a problem with the test, then we will catch that on the next test invocation.\n+        if (!s.contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+            Asserts.fail(\"Should have thrown exception\");\n+        }\n+    }\n+\n+    \/**\n+     * Is there at least one scenario which hit a safepoint while printing (i.e. a bailout)?\n+     *\/\n+    public static boolean anyBailedOut(Scenario... scenarios) {\n+        return Arrays.stream(scenarios).anyMatch(s -> s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n+    }\n+\n+    \/**\n+     * Is there at least one scenario which did not hit a safepoint while printing (i.e. a bailout)?\n+     *\/\n+    public static boolean notAllBailedOut(Scenario... scenarios) {\n+        return Arrays.stream(scenarios).anyMatch(s -> !s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/Utils.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}