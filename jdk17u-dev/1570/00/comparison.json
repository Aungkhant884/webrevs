{"files":[{"patch":"@@ -42,0 +42,1 @@\n+    init_class_id(Class_Con);\n@@ -56,1 +57,3 @@\n-  ConINode( const TypeInt *t ) : ConNode(t) {}\n+  ConINode(const TypeInt *t) : ConNode(t) {\n+    init_class_id(Class_ConI);\n+  }\n","filename":"src\/hotspot\/share\/opto\/connode.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1894,2 +1894,8 @@\n-    assert(final_con == (jlong)final_int, \"final value should be integer\");\n-    return TypeInt::make(final_int);\n+    \/\/ Assert checks for overflow only if all input nodes are ConINodes, as during CCP\n+    \/\/ there might be a temporary overflow from PhiNodes see JDK-8309266\n+    assert((in(Init)->is_ConI() && in(Limit)->is_ConI() && in(Stride)->is_ConI()) ? final_con == (jlong)final_int : true, \"final value should be integer\");\n+    if (final_con == (jlong)final_int) {\n+      return TypeInt::make(final_int);\n+    } else {\n+      return bottom_type();\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+class ConINode;\n@@ -576,2 +577,1 @@\n-    _in[i1] = n2;\n-    _in[i2] = n1;\n+    _in[i1] = n2;    _in[i2] = n1;\n@@ -710,0 +710,2 @@\n+      DEFINE_CLASS_ID(Con, Type, 8)\n+          DEFINE_CLASS_ID(ConI, Con, 0)\n@@ -857,0 +859,1 @@\n+  DEFINE_CLASS_QUERY(ConI)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}