{"files":[{"patch":"@@ -42,0 +42,1 @@\n+    init_class_id(Class_Con);\n@@ -56,1 +57,3 @@\n-  ConINode( const TypeInt *t ) : ConNode(t) {}\n+  ConINode(const TypeInt *t) : ConNode(t) {\n+    init_class_id(Class_ConI);\n+  }\n","filename":"src\/hotspot\/share\/opto\/connode.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1894,2 +1894,8 @@\n-    assert(final_con == (jlong)final_int, \"final value should be integer\");\n-    return TypeInt::make(final_int);\n+    \/\/ Assert checks for overflow only if all input nodes are ConINodes, as during CCP\n+    \/\/ there might be a temporary overflow from PhiNodes see JDK-8309266\n+    assert((in(Init)->is_ConI() && in(Limit)->is_ConI() && in(Stride)->is_ConI()) ? final_con == (jlong)final_int : true, \"final value should be integer\");\n+    if (final_con == (jlong)final_int) {\n+      return TypeInt::make(final_int);\n+    } else {\n+      return bottom_type();\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+class ConINode;\n@@ -710,0 +711,2 @@\n+      DEFINE_CLASS_ID(Con, Type, 8)\n+          DEFINE_CLASS_ID(ConI, Con, 0)\n@@ -857,0 +860,1 @@\n+  DEFINE_CLASS_QUERY(ConI)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309266\n+ * @summary Integer overflow in LoopLimit::Value during PhaseCCP::analyze, triggered by the Phi Node from \"flag ? Integer.MAX_VALUE : 1000\"\n+ * @run main\/othervm -Xbatch -XX:CompileOnly=compiler.loopopts.TestLoopLimitOverflowDuringCCP::* compiler.loopopts.TestLoopLimitOverflowDuringCCP\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestLoopLimitOverflowDuringCCP {\n+    static boolean flag;\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10000; i++) {\n+            flag = !flag;\n+            test();\n+        }\n+    }\n+\n+    public static void test() {\n+        int limit = flag ? Integer.MAX_VALUE : 1000;\n+        int i = 0;\n+        while (i < limit) {\n+            i += 3;\n+            if (flag) {\n+                return;\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopLimitOverflowDuringCCP.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}