{"files":[{"patch":"@@ -638,1 +638,0 @@\n-javax\/net\/ssl\/SSLEngine\/TestAllSuites.java                      8298874 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm\/timeout=180 TestAllSuites TLSv1.1\n+ * @run main\/othervm\/timeout=180 TestAllSuites TLSv1.2\n+ * @run main\/othervm\/timeout=180 TestAllSuites TLSv1.3\n@@ -28,1 +33,0 @@\n- * @run main\/timeout=180 TestAllSuites\n@@ -32,2 +36,1 @@\n- * Iterate through all the suites using both TLS and SSLv3, and turn\n- * SSLv2Hello off and on.  Exchange some bytes and shutdown.\n+ * Iterate through all the suites, exchange some bytes and shutdown.\n@@ -38,0 +41,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -44,0 +49,1 @@\n+import java.util.Arrays;\n@@ -47,1 +53,1 @@\n-    private static boolean debug = false;\n+    private static final boolean DEBUG = Boolean.getBoolean(\"test.debug\");\n@@ -49,3 +55,4 @@\n-    private SSLContext sslc;\n-    private SSLEngine ssle1;    \/\/ client\n-    private SSLEngine ssle2;    \/\/ server\n+    private final SSLContext SSL_CONTEXT;\n+    private final String PROTOCOL;\n+    private SSLEngine clientEngine;\n+    private SSLEngine serverEngine;\n@@ -53,4 +60,3 @@\n-    private static String pathToStores = \"..\/etc\";\n-    private static String keyStoreFile = \"keystore\";\n-    private static String trustStoreFile = \"truststore\";\n-    private static String passwd = \"passphrase\";\n+    private static final String PATH_TO_STORES = \"..\/etc\";\n+    private static final String KEYSTORE_FILENAME = \"keystore\";\n+    private static final String TRUSTSTORE_FILENAME = \"truststore\";\n@@ -58,6 +64,6 @@\n-    private static String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-    private static String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n+    private static final String KEYSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + KEYSTORE_FILENAME;\n+    private static final String TRUSTSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + TRUSTSTORE_FILENAME;\n@@ -65,4 +71,4 @@\n-    private ByteBuffer appOut1;         \/\/ write side of ssle1\n-    private ByteBuffer appIn1;          \/\/ read side of ssle1\n-    private ByteBuffer appOut2;         \/\/ write side of ssle2\n-    private ByteBuffer appIn2;          \/\/ read side of ssle2\n+    private ByteBuffer clientOut;\n+    private ByteBuffer clientIn;\n+    private ByteBuffer serverOut;\n+    private ByteBuffer serverIn;\n@@ -70,2 +76,2 @@\n-    private ByteBuffer oneToTwo;        \/\/ \"reliable\" transport ssle1->ssle2\n-    private ByteBuffer twoToOne;        \/\/ \"reliable\" transport ssle2->ssle1\n+    private ByteBuffer clientToServer;\n+    private ByteBuffer serverToClient;\n@@ -73,6 +79,0 @@\n-    String [][] protocols = new String [][] {\n-        { \"SSLv3\" },\n-        { \"TLSv1\" },\n-        { \"SSLv3\", \"SSLv2Hello\"},\n-        { \"TLSv1\", \"SSLv2Hello\"}\n-    };\n@@ -80,3 +80,3 @@\n-    \/*\n-     * Majority of the test case is here, setup is done below.\n-     *\/\n+    private void createSSLEngines() {\n+        clientEngine = SSL_CONTEXT.createSSLEngine(\"client\", 1);\n+        clientEngine.setUseClientMode(true);\n@@ -84,3 +84,2 @@\n-    private void createSSLEngines() throws Exception {\n-        ssle1 = sslc.createSSLEngine(\"client\", 1);\n-        ssle1.setUseClientMode(true);\n+        serverEngine = SSL_CONTEXT.createSSLEngine(\"server\", 2);\n+        serverEngine.setUseClientMode(false);\n@@ -88,2 +87,2 @@\n-        ssle2 = sslc.createSSLEngine(\"server\", 2);\n-        ssle2.setUseClientMode(false);\n+        clientEngine.setEnabledProtocols(new String[]{PROTOCOL});\n+        serverEngine.setEnabledProtocols(new String[]{PROTOCOL});\n@@ -93,9 +92,7 @@\n-\n-        createSSLEngines();\n-        String [] suites = ssle1.getSupportedCipherSuites();\n-\n-        for (int i = 0; i < suites.length; i++) {\n-            for (int j = 0; j < protocols.length; j++) {\n-                createSSLEngines();\n-                runTest(suites[i], protocols[j]);\n-            }\n+        String [] suites = clientEngine.getEnabledCipherSuites();\n+        System.out.println(\"Enabled cipher suites for protocol \" + PROTOCOL +\n+                \": \" + Arrays.toString(suites));\n+        for (String suite: suites){\n+            \/\/ Need to recreate engines to override enabled ciphers\n+            createSSLEngines();\n+            runTest(suite);\n@@ -105,1 +102,1 @@\n-    private void runTest(String suite, String [] protocols) throws Exception {\n+    private void runTest(String suite) throws Exception {\n@@ -110,4 +107,1 @@\n-        System.out.println(\"Testing: \" + suite);\n-        for (int i = 0; i < protocols.length; i++) {\n-            System.out.print(protocols[i] + \" \");\n-        }\n+        System.out.printf(\"Testing: %s with %s%n\", PROTOCOL, suite);\n@@ -115,7 +109,1 @@\n-        \/*\n-         * Don't run the Kerberized suites for now.\n-         *\/\n-        if (suite.startsWith(\"TLS_KRB5\")) {\n-            System.out.println(\"Ignoring Kerberized suite\");\n-            return;\n-        }\n+        String [] suites = new String [] { suite };\n@@ -123,4 +111,1 @@\n-        \/*\n-         * Don't run the SCSV suite\n-         *\/\n-        if (suite.equals(\"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\")) {\n+        if(suite.equals(\"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\")) {\n@@ -131,12 +116,2 @@\n-\n-        if (!suite.contains(\"DH_anon\")) {\n-            ssle2.setNeedClientAuth(true);\n-        }\n-\n-        String [] suites = new String [] { suite };\n-\n-        ssle1.setEnabledCipherSuites(suites);\n-        ssle2.setEnabledCipherSuites(suites);\n-\n-        ssle1.setEnabledProtocols(protocols);\n-        ssle2.setEnabledProtocols(protocols);\n+        clientEngine.setEnabledCipherSuites(suites);\n+        serverEngine.setEnabledCipherSuites(suites);\n@@ -146,2 +121,2 @@\n-        SSLEngineResult result1;        \/\/ ssle1's results from last operation\n-        SSLEngineResult result2;        \/\/ ssle2's results from last operation\n+        SSLEngineResult clientResult;        \/\/ clientEngine's results from last operation\n+        SSLEngineResult serverResult;        \/\/ serverEngine's results from last operation\n@@ -150,1 +125,1 @@\n-        while (!isEngineClosed(ssle1) || !isEngineClosed(ssle2)) {\n+        while (!isEngineClosed(clientEngine) || !isEngineClosed(serverEngine)) {\n@@ -154,2 +129,2 @@\n-            result1 = ssle1.wrap(appOut1, oneToTwo);\n-            result2 = ssle2.wrap(appOut2, twoToOne);\n+            clientResult = clientEngine.wrap(clientOut, clientToServer);\n+            serverResult = serverEngine.wrap(serverOut, serverToClient);\n@@ -157,2 +132,2 @@\n-            log(\"wrap1:  \" + result1);\n-            log(\"oneToTwo  = \" + oneToTwo);\n+            log(\"Client engine wrap result:  \" + clientResult);\n+            log(\"clientToServer  = \" + clientToServer);\n@@ -161,2 +136,2 @@\n-            log(\"wrap2:  \" + result2);\n-            log(\"twoToOne  = \" + twoToOne);\n+            log(\"Server engine wrap result:  \" + serverResult);\n+            log(\"serverToClient  = \" + serverToClient);\n@@ -164,2 +139,2 @@\n-            runDelegatedTasks(result1, ssle1);\n-            runDelegatedTasks(result2, ssle2);\n+            runDelegatedTasks(clientResult, clientEngine);\n+            runDelegatedTasks(serverResult, serverEngine);\n@@ -167,2 +142,2 @@\n-            oneToTwo.flip();\n-            twoToOne.flip();\n+            clientToServer.flip();\n+            serverToClient.flip();\n@@ -172,2 +147,2 @@\n-            result1 = ssle1.unwrap(twoToOne, appIn1);\n-            result2 = ssle2.unwrap(oneToTwo, appIn2);\n+            clientResult = clientEngine.unwrap(serverToClient, clientIn);\n+            serverResult = serverEngine.unwrap(clientToServer, serverIn);\n@@ -175,2 +150,2 @@\n-            log(\"unwrap1: \" + result1);\n-            log(\"twoToOne  = \" + twoToOne);\n+            log(\"Client engine unrap result: \" + clientResult);\n+            log(\"serverToClient  = \" + serverToClient);\n@@ -179,2 +154,2 @@\n-            log(\"unwrap2: \" + result2);\n-            log(\"oneToTwo  = \" + oneToTwo);\n+            log(\"Server engine unwrap result: \" + serverResult);\n+            log(\"clientToServer  = \" + clientToServer);\n@@ -182,2 +157,2 @@\n-            runDelegatedTasks(result1, ssle1);\n-            runDelegatedTasks(result2, ssle2);\n+            runDelegatedTasks(clientResult, clientEngine);\n+            runDelegatedTasks(serverResult, serverEngine);\n@@ -185,2 +160,2 @@\n-            oneToTwo.compact();\n-            twoToOne.compact();\n+            clientToServer.compact();\n+            serverToClient.compact();\n@@ -189,1 +164,1 @@\n-             * If we've transfered all the data between app1 and app2,\n+             * If we've transferred all the data between client and server\n@@ -192,2 +167,2 @@\n-            if (!dataDone && (appOut1.limit() == appIn2.position()) &&\n-                    (appOut2.limit() == appIn1.position())) {\n+            if (!dataDone && (clientOut.limit() == serverIn.position()) &&\n+                    (serverOut.limit() == clientIn.position())) {\n@@ -195,2 +170,2 @@\n-                checkTransfer(appOut1, appIn2);\n-                checkTransfer(appOut2, appIn1);\n+                checkTransfer(clientOut, serverIn);\n+                checkTransfer(serverOut, clientIn);\n@@ -198,2 +173,2 @@\n-                log(\"Closing ssle1's *OUTBOUND*...\");\n-                ssle1.closeOutbound();\n+                clientEngine.closeOutbound();\n+                serverEngine.closeOutbound();\n@@ -204,0 +179,3 @@\n+        System.out.println(\"Negotiated protocol: \" + clientEngine.getSession().getProtocol());\n+        System.out.println(\"Negotiated cipher: \" + clientEngine.getSession().getCipherSuite());\n+\n@@ -208,2 +186,2 @@\n-        ssle1.closeInbound();\n-        ssle1.closeOutbound();\n+        clientEngine.closeInbound();\n+        clientEngine.closeOutbound();\n@@ -211,2 +189,2 @@\n-        ssle2.closeInbound();\n-        ssle2.closeOutbound();\n+        serverEngine.closeInbound();\n+        serverEngine.closeOutbound();\n@@ -214,3 +192,3 @@\n-        appOut1.rewind();\n-        appIn1.clear();\n-        oneToTwo.clear();\n+        clientOut.rewind();\n+        clientIn.clear();\n+        clientToServer.clear();\n@@ -218,2 +196,2 @@\n-        result1 = ssle1.wrap(appOut1, oneToTwo);\n-        checkResult(result1);\n+        clientResult = clientEngine.wrap(clientOut, clientToServer);\n+        checkResult(clientResult);\n@@ -221,2 +199,2 @@\n-        result1 = ssle1.unwrap(oneToTwo, appIn1);\n-        checkResult(result1);\n+        clientResult = clientEngine.unwrap(clientToServer, clientIn);\n+        checkResult(clientResult);\n@@ -246,3 +224,3 @@\n-        TestAllSuites tas;\n-\n-        tas = new TestAllSuites();\n+        if (args.length < 1) {\n+            throw new RuntimeException(\"Missing TLS protocol parameter.\");\n+        }\n@@ -250,1 +228,4 @@\n-        tas.createSSLEngines();\n+        switch(args[0]) {\n+            case \"TLSv1.1\" -> SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1.1\");\n+            case \"TLSv1.3\" -> SecurityUtils.addToDisabledTlsAlgs(\"TLSv1.2\");\n+        }\n@@ -252,1 +233,3 @@\n-        tas.test();\n+        TestAllSuites testAllSuites = new TestAllSuites(args[0]);\n+        testAllSuites.createSSLEngines();\n+        testAllSuites.test();\n@@ -264,2 +247,3 @@\n-    public TestAllSuites() throws Exception {\n-        sslc = getSSLContext(keyFilename, trustFilename);\n+    public TestAllSuites(String protocol) throws Exception {\n+        PROTOCOL = protocol;\n+        SSL_CONTEXT = getSSLContext(KEYSTORE_PATH, TRUSTSTORE_PATH);\n@@ -288,1 +272,1 @@\n-        SSLContext sslCtx = SSLContext.getInstance(\"TLS\");\n+        SSLContext sslCtx = SSLContext.getInstance(PROTOCOL);\n@@ -298,1 +282,1 @@\n-        SSLSession session = ssle1.getSession();\n+        SSLSession session = clientEngine.getSession();\n@@ -302,2 +286,2 @@\n-        appIn1 = ByteBuffer.allocateDirect(appBufferMax + 50);\n-        appIn2 = ByteBuffer.allocateDirect(appBufferMax + 50);\n+        clientIn = ByteBuffer.allocateDirect(appBufferMax + 50);\n+        serverIn = ByteBuffer.allocateDirect(appBufferMax + 50);\n@@ -305,2 +289,2 @@\n-        oneToTwo = ByteBuffer.allocateDirect(netBufferMax);\n-        twoToOne = ByteBuffer.allocateDirect(netBufferMax);\n+        clientToServer = ByteBuffer.allocateDirect(netBufferMax);\n+        serverToClient = ByteBuffer.allocateDirect(netBufferMax);\n@@ -308,2 +292,2 @@\n-        appOut1 = ByteBuffer.wrap(\"Hi Engine2, I'm SSLEngine1\".getBytes());\n-        appOut2 = ByteBuffer.wrap(\"Hello Engine1, I'm SSLEngine2\".getBytes());\n+        clientOut = ByteBuffer.wrap(\"Hi Server, I'm Client\".getBytes());\n+        serverOut = ByteBuffer.wrap(\"Hello Client, I'm Server\".getBytes());\n@@ -311,2 +295,2 @@\n-        log(\"AppOut1 = \" + appOut1);\n-        log(\"AppOut2 = \" + appOut2);\n+        log(\"ClientOut = \" + clientOut);\n+        log(\"ServerOut = \" + serverOut);\n@@ -350,1 +334,1 @@\n-        if (debug) {\n+        if (DEBUG) {\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLEngine\/TestAllSuites.java","additions":118,"deletions":134,"binary":false,"changes":252,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.stream.Stream;\n@@ -55,0 +56,20 @@\n+    \/**\n+     * Adds the specified protocols to the jdk.tls.disabledAlgorithms\n+     * security property\n+     *\/\n+    public static void addToDisabledTlsAlgs(String... protocols) {\n+        addToDisabledArgs(\"jdk.tls.disabledAlgorithms\", List.of(protocols));\n+    }\n+\n+    \/**\n+     * Adds constraints to the specified security property.\n+     *\/\n+    public static void addToDisabledArgs(String prop, List<String> constraints) {\n+        String value = Security.getProperty(prop);\n+        value = Stream.concat(Arrays.stream(value.split(\",\")),\n+                        constraints.stream())\n+                .map(String::trim)\n+                .collect(Collectors.joining(\",\"));\n+        Security.setProperty(prop, value);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/security\/SecurityUtils.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}