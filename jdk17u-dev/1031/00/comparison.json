{"files":[{"patch":"@@ -2048,3 +2048,3 @@\n-static void clone_outer_loop_helper(Node* n, const IdealLoopTree *loop, const IdealLoopTree* outer_loop,\n-                                    const Node_List &old_new, Unique_Node_List& wq, PhaseIdealLoop* phase,\n-                                    bool check_old_new) {\n+static void collect_nodes_in_outer_loop_not_reachable_from_sfpt(Node* n, const IdealLoopTree *loop, const IdealLoopTree* outer_loop,\n+                                                                const Node_List &old_new, Unique_Node_List& wq, PhaseIdealLoop* phase,\n+                                                                bool check_old_new) {\n@@ -2057,11 +2057,13 @@\n-      assert(!loop->is_member(u_loop), \"can be in outer loop or out of both loops only\");\n-      if (outer_loop->is_member(u_loop)) {\n-        wq.push(u);\n-      } else {\n-        \/\/ nodes pinned with control in the outer loop but not referenced from the safepoint must be moved out of\n-        \/\/ the outer loop too\n-        Node* u_c = u->in(0);\n-        if (u_c != NULL) {\n-          IdealLoopTree* u_c_loop = phase->get_loop(u_c);\n-          if (outer_loop->is_member(u_c_loop) && !loop->is_member(u_c_loop)) {\n-            wq.push(u);\n+      assert(!loop->is_member(u_loop) || !loop->_body.contains(u), \"can be in outer loop or out of both loops only\");\n+      if (!loop->is_member(u_loop)) {\n+        if (outer_loop->is_member(u_loop)) {\n+          wq.push(u);\n+        } else {\n+          \/\/ nodes pinned with control in the outer loop but not referenced from the safepoint must be moved out of\n+          \/\/ the outer loop too\n+          Node* u_c = u->in(0);\n+          if (u_c != NULL) {\n+            IdealLoopTree* u_c_loop = phase->get_loop(u_c);\n+            if (outer_loop->is_member(u_c_loop) && !loop->is_member(u_c_loop)) {\n+              wq.push(u);\n+            }\n@@ -2186,1 +2188,6 @@\n-      clone_outer_loop_helper(old, loop, outer_loop, old_new, wq, this, true);\n+      collect_nodes_in_outer_loop_not_reachable_from_sfpt(old, loop, outer_loop, old_new, wq, this, true);\n+    }\n+\n+    for (uint i = 0; i < loop->_body.size(); i++) {\n+      Node* old = loop->_body.at(i);\n+      collect_nodes_in_outer_loop_not_reachable_from_sfpt(old, loop, outer_loop, old_new, wq, this, true);\n@@ -2191,1 +2198,1 @@\n-      clone_outer_loop_helper(inner_out, loop, outer_loop, old_new, wq, this, true);\n+      collect_nodes_in_outer_loop_not_reachable_from_sfpt(inner_out, loop, outer_loop, old_new, wq, this, true);\n@@ -2202,1 +2209,1 @@\n-      clone_outer_loop_helper(n, loop, outer_loop, old_new, wq, this, false);\n+      collect_nodes_in_outer_loop_not_reachable_from_sfpt(n, loop, outer_loop, old_new, wq, this, false);\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8295788\n+ * @summary C2 compilation hits \"assert((mode == ControlAroundStripMined && use == sfpt) || !use->is_reachable_from_root()) failed: missed a node\"\n+ *\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestUseFromInnerInOuterUnusedBySfpt TestUseFromInnerInOuterUnusedBySfpt\n+ *\n+ *\/\n+\n+public class TestUseFromInnerInOuterUnusedBySfpt {\n+\n+    public static final int N = 400;\n+\n+    public static void dMeth(long l, int i5, int i6) {\n+\n+        int i7=14, i8=-14, i9=7476, i11=0;\n+        long lArr[]=new long[N];\n+\n+        for (i7 = 3; i7 < 177; i7++) {\n+            lArr[i7 + 1] >>= l;\n+            l -= i8;\n+            i6 = (int)l;\n+        }\n+        for (i9 = 15; i9 < 356; i9 += 3) {\n+            i11 = 14;\n+            do {\n+                i5 |= i6;\n+            } while (--i11 > 0);\n+        }\n+    }\n+\n+    public static void main(String[] strArr) {\n+        TestUseFromInnerInOuterUnusedBySfpt _instance = new TestUseFromInnerInOuterUnusedBySfpt();\n+        for (int i = 0; i < 10; i++) {\n+            _instance.dMeth(-12L, -50242, 20);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestUseFromInnerInOuterUnusedBySfpt.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}