{"files":[{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.FontMetrics;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JTextPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.Caret;\n+import javax.swing.text.Document;\n+import javax.swing.text.Position;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.View;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+\n+\/*\n+ * @test\n+ * @bug 6318524 8239502\n+ * @summary Tests that children of ParagraphView do not mess up their parents\n+ * @run main bug6318524\n+ *\/\n+\/*\n+ * Test parameters:\n+ * -show: Show frame for visual inspection\n+ * -save: Save the start image after the first paragraph is justified,\n+ *        and the last image before it's checked that the first paragraph\n+ *        remains justified\n+ * -saveAll: Save images for all the intermediate steps\n+ *\/\n+public class bug6318524 {\n+    private static final String LONG_WORD = \"consequences\";\n+    private static final String TEXT = \"Justified: \"\n+            + LONG_WORD + \" \" + LONG_WORD;\n+    private static final int REPEAT_COUNT = 18;\n+\n+    private static JTextPane textPane;\n+    private static Dimension bounds;\n+\n+    private static int step = 0;\n+\n+    private static Shape firstLineEndsAt;\n+\n+    public static void main(String[] args) throws Throwable {\n+        List<String> argList = Arrays.asList(args);\n+\n+        \/\/ Show frame for visual inspection\n+        final boolean showFrame = argList.contains(\"-show\");\n+        \/\/ Save images for all the intermediate steps\n+        final boolean saveAllImages = argList.contains(\"-saveAll\");\n+        \/\/ Save the start and last image only\n+        final boolean saveImage = saveAllImages || argList.contains(\"-save\");\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            createUI(showFrame);\n+            paintToImage(step++, saveAllImages);\n+            makeLineJustified();\n+            paintToImage(step++, saveImage);\n+\n+            firstLineEndsAt = getEndOfFirstLine();\n+\n+            moveCursorToStart();\n+            pressEnter(saveAllImages);\n+\n+            paintToImage(step++, saveImage);\n+            checkLineJustified();\n+        });\n+    }\n+\n+    private static void createUI(boolean showFrame) {\n+        textPane = new JTextPane();\n+        textPane.setText(TEXT);\n+\n+        FontMetrics fm = textPane.getFontMetrics(textPane.getFont());\n+        int textWidth = fm.stringWidth(LONG_WORD);\n+        int textHeight = fm.getHeight();\n+        bounds = new Dimension(2 * textWidth,\n+                               (REPEAT_COUNT + 3) * textHeight);\n+        textPane.setPreferredSize(bounds);\n+        textPane.setSize(bounds);\n+\n+        if (showFrame) {\n+            JFrame frame = new JFrame(\"bug6318524\");\n+            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\n+            frame.getContentPane().add(textPane);\n+\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        }\n+    }\n+\n+    private static void makeLineJustified() {\n+        SimpleAttributeSet sas = new SimpleAttributeSet();\n+        StyleConstants.setAlignment(sas, StyleConstants.ALIGN_JUSTIFIED);\n+        textPane.setParagraphAttributes(sas, false);\n+    }\n+\n+    private static void moveCursorToStart() {\n+        \/\/ Move cursor to the beginning\n+        Caret caret = textPane.getCaret();\n+        caret.setDot(0);\n+    }\n+\n+    private static void pressEnter(boolean saveImages) {\n+        Document doc = textPane.getDocument();\n+        try {\n+            for (int i = 0; i < REPEAT_COUNT; i++) {\n+                \/\/ Add a new paragraph at the beginning\n+                doc.insertString(0, \"\\n\", null);\n+                \/\/ Paint the textPane after each change\n+                paintToImage(step++, saveImages);\n+            }\n+        } catch (BadLocationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void checkLineJustified() {\n+        Shape newPosition = getEndOfFirstLine();\n+        if (((Rectangle) firstLineEndsAt).x != ((Rectangle) newPosition).x) {\n+            System.err.println(\"Old: \" + firstLineEndsAt);\n+            System.err.println(\"New: \" + newPosition);\n+            throw new RuntimeException(\"The first line of the paragraph is not justified\");\n+        }\n+    }\n+\n+    private static Shape getEndOfFirstLine() {\n+        try {\n+            final View rootView = textPane.getUI().getRootView(textPane);\n+            final View boxView = rootView.getView(0);\n+            final View paragraphView = boxView.getView(boxView.getViewCount() - 1);\n+            assert paragraphView.getViewCount() == 2;\n+            final View rowView = paragraphView.getView(0);\n+            return rowView.getView(0)\n+                          .modelToView(rowView.getEndOffset() - 1,\n+                                       textPane.getBounds(),\n+                                       Position.Bias.Backward);\n+        } catch (BadLocationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void paintToImage(final int step, boolean saveImage) {\n+        BufferedImage im = new BufferedImage(bounds.width, bounds.height,\n+                TYPE_INT_RGB);\n+        Graphics g = im.getGraphics();\n+        textPane.paint(g);\n+        g.dispose();\n+        if (saveImage) {\n+            saveImage(im, String.format(\"%02d.png\", step));\n+        }\n+    }\n+\n+    private static void saveImage(BufferedImage image, String fileName) {\n+        try {\n+            ImageIO.write(image, \"png\", new File(fileName));\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/FlowView\/6318524\/bug6318524.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"}]}