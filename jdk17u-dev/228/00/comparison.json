{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import java.nio.file.DirectoryNotEmptyException;\n@@ -40,1 +39,0 @@\n-import java.nio.file.NoSuchFileException;\n@@ -68,2 +66,0 @@\n-import javax.tools.JavaFileObject.Kind;\n-import javax.tools.JavaFileManager.Location;\n@@ -110,1 +106,1 @@\n-        timeoutFactor = (ttf == null) ? 1.0f : Float.valueOf(ttf);\n+        timeoutFactor = (ttf == null) ? 1.0f : Float.parseFloat(ttf);\n@@ -114,1 +110,1 @@\n-    public static final Path currDir = Paths.get(\".\");\n+    public static final Path currDir = Path.of(\".\");\n@@ -130,0 +126,1 @@\n+     *\n@@ -142,0 +139,1 @@\n+     *\n@@ -169,0 +167,1 @@\n+     *\n@@ -180,0 +179,1 @@\n+     *\n@@ -181,1 +181,1 @@\n-     * @param lines the strings to be filtered\n+     * @param lines   the strings to be filtered\n@@ -191,0 +191,1 @@\n+     *\n@@ -203,0 +204,1 @@\n+     *\n@@ -204,2 +206,2 @@\n-     * @param lines the strings to be filtered\n-     * @param match if true, return the lines that match; otherwise if false, return the lines that do not match.\n+     * @param lines   the strings to be filtered\n+     * @param match   if true, return the lines that match; otherwise if false, return the lines that do not match.\n@@ -220,0 +222,1 @@\n+     *\n@@ -221,1 +224,1 @@\n-     * @param to where to copy the file\n+     * @param to   where to copy the file\n@@ -225,1 +228,1 @@\n-        copyFile(Paths.get(from), Paths.get(to));\n+        copyFile(Path.of(from), Path.of(to));\n@@ -234,0 +237,1 @@\n+     *\n@@ -235,1 +239,1 @@\n-     * @param to where to copy the file\n+     * @param to   where to copy the file\n@@ -252,0 +256,1 @@\n+     *\n@@ -259,1 +264,1 @@\n-            Files.createDirectories(Paths.get(p));\n+            Files.createDirectories(Path.of(p));\n@@ -267,0 +272,1 @@\n+     *\n@@ -281,0 +287,1 @@\n+     *\n@@ -292,0 +299,1 @@\n+     *\n@@ -303,0 +311,1 @@\n+     *\n@@ -322,0 +331,1 @@\n+     *\n@@ -329,1 +339,1 @@\n-        Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n+        Files.walkFileTree(root, new SimpleFileVisitor<>() {\n@@ -332,1 +342,1 @@\n-            private Deque<List<Path>> dirFiles = new LinkedList<>();\n+            private final Deque<List<Path>> dirFiles = new LinkedList<>();\n@@ -335,1 +345,1 @@\n-            public FileVisitResult visitFile(Path file, BasicFileAttributes a) throws IOException {\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes a) {\n@@ -342,1 +352,1 @@\n-            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes a) throws IOException {\n+            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes a) {\n@@ -372,0 +382,1 @@\n+     *\n@@ -373,1 +384,1 @@\n-     * @param ioe the earlier exception, or null\n+     * @param ioe  the earlier exception, or null\n@@ -375,1 +386,1 @@\n-     *  trying to delete the file\n+     * trying to delete the file\n@@ -392,0 +403,1 @@\n+     *\n@@ -404,0 +416,1 @@\n+     *\n@@ -434,0 +447,1 @@\n+     *\n@@ -435,1 +449,1 @@\n-     * @param to where to move the file\n+     * @param to   where to move the file\n@@ -439,1 +453,1 @@\n-        moveFile(Paths.get(from), Paths.get(to));\n+        moveFile(Path.of(from), Path.of(to));\n@@ -448,0 +462,1 @@\n+     *\n@@ -449,1 +464,1 @@\n-     * @param to where to move the file\n+     * @param to   where to move the file\n@@ -464,0 +479,1 @@\n+     *\n@@ -475,0 +491,1 @@\n+     *\n@@ -485,1 +502,2 @@\n-     * @param path the file to be read\n+     *\n+     * @param path     the file to be read\n@@ -491,1 +509,1 @@\n-        return readAllLines(Paths.get(path), encoding);\n+        return readAllLines(Path.of(path), encoding);\n@@ -496,1 +514,2 @@\n-     * @param path the file to be read\n+     *\n+     * @param path     the file to be read\n@@ -512,0 +531,1 @@\n+     *\n@@ -523,0 +543,1 @@\n+     *\n@@ -524,1 +545,1 @@\n-     * @param paths the directories in which to search for files\n+     * @param paths         the directories in which to search for files\n@@ -531,1 +552,1 @@\n-            Files.walkFileTree(p, new SimpleFileVisitor<Path>() {\n+            Files.walkFileTree(p, new SimpleFileVisitor<>() {\n@@ -533,2 +554,1 @@\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n-                        throws IOException {\n+                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n@@ -542,1 +562,1 @@\n-        return files.toArray(new Path[files.size()]);\n+        return files.toArray(new Path[0]);\n@@ -548,1 +568,2 @@\n-     * @param path where to write the file\n+     *\n+     * @param path    where to write the file\n@@ -553,1 +574,1 @@\n-        writeFile(Paths.get(path), content);\n+        writeFile(Path.of(path), content);\n@@ -559,1 +580,2 @@\n-     * @param path where to write the file\n+     *\n+     * @param path    where to write the file\n@@ -583,1 +605,2 @@\n-     * @param dir the base directory\n+     *\n+     * @param dir      the base directory\n@@ -596,1 +619,2 @@\n-     * Returns the path for the binary of a JDK tool within {@link testJDK}.\n+     * Returns the path for the binary of a JDK tool within {@link #testJDK}.\n+     *\n@@ -601,1 +625,1 @@\n-        return Paths.get(testJDK, \"bin\", tool);\n+        return Path.of(testJDK, \"bin\", tool);\n@@ -606,1 +630,2 @@\n-     * @param <T> the type parameter of the {@code Iterable}\n+     *\n+     * @param <T>   the type parameter of the {@code Iterable}\n@@ -627,0 +652,1 @@\n+         *\n@@ -628,1 +654,1 @@\n-         * @param source the source text\n+         * @param source    the source text\n@@ -638,0 +664,1 @@\n+         *\n@@ -648,0 +675,1 @@\n+         *\n@@ -656,0 +684,1 @@\n+         *\n@@ -672,1 +701,1 @@\n-        private static Pattern commentPattern =\n+        private final static Pattern commentPattern =\n@@ -674,1 +703,1 @@\n-        private static Pattern modulePattern =\n+        private final static Pattern modulePattern =\n@@ -676,3 +705,3 @@\n-        private static Pattern packagePattern =\n-                Pattern.compile(\"package\\\\s+(((?:\\\\w+\\\\.)*)(?:\\\\w+))\");\n-        private static Pattern classPattern =\n+        private final static Pattern packagePattern =\n+                Pattern.compile(\"package\\\\s+(((?:\\\\w+\\\\.)*)\\\\w+)\");\n+        private final static Pattern classPattern =\n@@ -692,1 +721,1 @@\n-                sb.append(source.substring(start, matcher.start()));\n+                sb.append(source, start, matcher.start());\n@@ -728,2 +757,1 @@\n-     * @deprecated This is a legacy method for compatibility with ToolBox v1.\n-     *      Use {@link JavaSource#getName JavaSource.getName} instead.\n+     *\n@@ -732,0 +760,2 @@\n+     * @deprecated This is a legacy method for compatibility with ToolBox v1.\n+     * Use {@link JavaSource#getName JavaSource.getName} instead.\n@@ -744,1 +774,2 @@\n-    \/**Validate if a given name is a valid file name\n+    \/**\n+     * Validates if a given name is a valid file name\n@@ -746,0 +777,3 @@\n+     *\n+     * @param name the name\n+     * @throws IllegalArgumentException if the name is a reserved name\n@@ -748,1 +782,1 @@\n-        for (String part : name.split(\"\\\\.|\/|\\\\\\\\\")) {\n+        for (String part : name.split(\"[.\/\\\\\\\\]\")) {\n@@ -756,6 +790,2 @@\n-    \/**\n-     * A memory file manager, for saving generated files in memory.\n-     * The file manager delegates to a separate file manager for listing and\n-     * reading input files.\n-     *\/\n-    public static class MemoryFileManager extends ForwardingJavaFileManager {\n+\n+    public static class MemoryFileManager extends ForwardingJavaFileManager<JavaFileManager> {\n@@ -773,1 +803,1 @@\n-         * Construct a memory file manager which stores output files in memory,\n+         * Constructs a memory file manager which stores output files in memory,\n@@ -781,1 +811,1 @@\n-         * Construct a memory file manager which stores output files in memory,\n+         * Constructs a memory file manager which stores output files in memory,\n@@ -783,0 +813,1 @@\n+         *\n@@ -802,0 +833,1 @@\n+         *\n@@ -814,0 +846,1 @@\n+         *\n@@ -815,1 +848,1 @@\n-         * @param name the name of the file\n+         * @param name     the name of the file\n@@ -826,0 +859,1 @@\n+         *\n@@ -827,1 +861,1 @@\n-         * @param name the name of the file\n+         * @param name     the name of the file\n@@ -841,4 +875,2 @@\n-            Map<String, Content> filesForLocation = files.get(location);\n-            if (filesForLocation == null)\n-                files.put(location, filesForLocation = new HashMap<>());\n-            filesForLocation.put(name, content);\n+            files.computeIfAbsent(location, k -> new HashMap<>())\n+                    .put(name, content);\n@@ -856,1 +888,4 @@\n-             * @param name binary name of the class to be stored in this file object\n+             *\n+             * @param location the location in which to save the file object\n+             * @param name     binary name of the class to be stored in this file object\n+             * @param kind     the kind of file object\n@@ -893,1 +928,1 @@\n-                        String text = ((StringWriter) out).toString();\n+                        String text = out.toString();\n","filename":"test\/langtools\/tools\/lib\/toolbox\/ToolBox.java","additions":99,"deletions":64,"binary":false,"changes":163,"status":"modified"}]}