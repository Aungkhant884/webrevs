{"files":[{"patch":"@@ -160,1 +160,1 @@\n-                        return make.at(t.pos).SpeculativeNewClass(encl, typeargs, clazz, args, def, t.def != null);\n+                        return make.at(t.pos).SpeculativeNewClass(encl, typeargs, clazz, args, def, t.def != null || t.classDeclRemoved());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/DeferredAttr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8225559\n+ * @summary assertion error at TransTypes.visitApply\n+ * @compile ProtectedConstructorTest.java\n+ *\/\n+\n+import pkg.Bar;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Supplier;\n+\n+class ProtectedConstructorTest {\n+    public void foo() {\n+        supply(getSupplier(new Bar<>(){}));\n+        CompletableFuture<List<String>> completableFuture = getCompletableFuture(getSupplier(new Bar<>(){}));\n+        completableFuture = getCompletableFuture(() -> getList(null, new Bar<>() {}));\n+    }\n+\n+    static <U> Supplier<U> getSupplier(Bar<U> t) {\n+        return null;\n+    }\n+\n+    static <U> void supply(Supplier<U> supplier) {}\n+    static <U> CompletableFuture<U> getCompletableFuture(Supplier<U> supplier) { return null; }\n+    <T> List<T> getList(final Supplier<List<T>> supplier, Bar<T> t) { return null; }\n+}\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/protectedConstructor\/ProtectedConstructorTest.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -22,1 +22,0 @@\n- *\n@@ -24,1 +23,0 @@\n-package pkg;\n@@ -26,3 +24,1 @@\n-interface Bar {\n-\n-    void foo();\n+package pkg;\n@@ -30,0 +26,3 @@\n+public abstract class Bar<T> {\n+    protected Bar() {}\n+    protected Bar(Class<?> c) {}\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/protectedConstructor\/pkg\/Bar.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\/Bar.java","status":"copied"}]}