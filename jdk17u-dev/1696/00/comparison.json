{"files":[{"patch":"@@ -39,1 +39,1 @@\n-  _initialized(false), _pagesizes(), _default_hugepage_size(SIZE_MAX) {}\n+  _initialized(false), _pagesizes(), _default_hugepage_size(SIZE_MAX), _inconsistent(false) {}\n@@ -114,11 +114,13 @@\n-  DIR *dir = opendir(sys_hugepages);\n-\n-  struct dirent *entry;\n-  size_t pagesize;\n-  while ((entry = readdir(dir)) != nullptr) {\n-    if (entry->d_type == DT_DIR &&\n-        sscanf(entry->d_name, \"hugepages-%zukB\", &pagesize) == 1) {\n-      \/\/ The kernel is using kB, hotspot uses bytes\n-      \/\/ Add each found Large Page Size to page_sizes\n-      pagesize *= K;\n-      pagesizes.add(pagesize);\n+  DIR* dir = opendir(sys_hugepages);\n+\n+  if (dir != nullptr) {\n+    struct dirent *entry;\n+    size_t pagesize;\n+    while ((entry = readdir(dir)) != nullptr) {\n+      if (entry->d_type == DT_DIR &&\n+          sscanf(entry->d_name, \"hugepages-%zukB\", &pagesize) == 1) {\n+        \/\/ The kernel is using kB, hotspot uses bytes\n+        \/\/ Add each found Large Page Size to page_sizes\n+        pagesize *= K;\n+        pagesizes.add(pagesize);\n+      }\n@@ -126,0 +128,1 @@\n+    closedir(dir);\n@@ -127,1 +130,0 @@\n-  closedir(dir);\n@@ -142,0 +144,3 @@\n+  if (_inconsistent) {\n+    os->print_cr(\"  Support inconsistent. JVM will not use static hugepages.\");\n+  }\n@@ -145,1 +150,0 @@\n-  _pagesizes = scan_hugepages();\n@@ -147,3 +151,12 @@\n-  assert(_pagesizes.contains(_default_hugepage_size),\n-         \"Unexpected configuration: default pagesize (\" SIZE_FORMAT \") \"\n-         \"has no associated directory in \/sys\/kernel\/mm\/hugepages..\", _default_hugepage_size);\n+  if (_default_hugepage_size > 0) {\n+    _pagesizes = scan_hugepages();\n+    \/\/ See https:\/\/www.kernel.org\/doc\/Documentation\/vm\/hugetlbpage.txt: \/proc\/meminfo should match\n+    \/\/ \/sys\/kernel\/mm\/hugepages\/hugepages-xxxx. However, we may run on a broken kernel (e.g. on WSL)\n+    \/\/ that only exposes \/proc\/meminfo but not \/sys\/kernel\/mm\/hugepages. In that case, we are not\n+    \/\/ sure about the state of hugepage support by the kernel, so we won't use static hugepages.\n+    if (!_pagesizes.contains(_default_hugepage_size)) {\n+      log_info(pagesize)(\"Unexpected configuration: default pagesize (\" SIZE_FORMAT \") \"\n+                         \"has no associated directory in \/sys\/kernel\/mm\/hugepages..\", _default_hugepage_size);\n+      _inconsistent = true;\n+    }\n+  }\n","filename":"src\/hotspot\/os\/linux\/hugepages.cpp","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -55,0 +55,3 @@\n+  \/\/ If true, the kernel support for hugepages is inconsistent\n+  bool _inconsistent;\n+\n@@ -63,0 +66,2 @@\n+\n+  bool inconsistent() const { return _inconsistent; }\n@@ -101,1 +106,1 @@\n-  static bool supports_static_hugepages()       { return default_static_hugepage_size() > 0; }\n+  static bool supports_static_hugepages()       { return default_static_hugepage_size() > 0 && !_static_hugepage_support.inconsistent(); }\n","filename":"src\/hotspot\/os\/linux\/hugepages.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run driver HugePageDetection\n+ * @run driver TestHugePageDetection\n@@ -39,1 +39,1 @@\n-public class HugePageDetection {\n+public class TestHugePageDetection {\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestHugePageDetection.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/runtime\/os\/HugePageDetection.java","status":"renamed"}]}