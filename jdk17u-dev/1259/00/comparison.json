{"files":[{"patch":"@@ -119,1 +119,1 @@\n-  } else if (!UseG1GC && !UseShenandoahGC) {\n+  } else if (!UseG1GC && !UseShenandoahGC && !UseZGC) {\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupConfig.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/javaClasses.inline.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n@@ -36,0 +38,1 @@\n+#include \"gc\/z\/zMarkContext.inline.hpp\"\n@@ -282,1 +285,21 @@\n-void ZMark::mark_and_follow(ZMarkCache* cache, ZMarkStackEntry entry) {\n+static void try_deduplicate(ZMarkContext* context, oop obj) {\n+  if (!StringDedup::is_enabled()) {\n+    \/\/ Not enabled\n+    return;\n+  }\n+\n+  if (!java_lang_String::is_instance_inlined(obj)) {\n+    \/\/ Not a String object\n+    return;\n+  }\n+\n+  if (java_lang_String::test_and_set_deduplication_requested(obj)) {\n+    \/\/ Already requested deduplication\n+    return;\n+  }\n+\n+  \/\/ Request deduplication\n+  context->string_dedup_requests()->add(obj);\n+}\n+\n+void ZMark::mark_and_follow(ZMarkContext* context, ZMarkStackEntry entry) {\n@@ -314,1 +337,1 @@\n-    cache->inc_live(page, aligned_size);\n+    context->cache()->inc_live(page, aligned_size);\n@@ -322,1 +345,5 @@\n-      follow_object(ZOop::from_address(addr), finalizable);\n+      const oop obj = ZOop::from_address(addr);\n+      follow_object(obj, finalizable);\n+\n+      \/\/ Try deduplicate\n+      try_deduplicate(context, obj);\n@@ -328,1 +355,3 @@\n-bool ZMark::drain(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks, ZMarkCache* cache, T* timeout) {\n+bool ZMark::drain(ZMarkContext* context, T* timeout) {\n+  ZMarkStripe* const stripe = context->stripe();\n+  ZMarkThreadLocalStacks* const stacks = context->stacks();\n@@ -333,1 +362,1 @@\n-    mark_and_follow(cache, entry);\n+    mark_and_follow(context, entry);\n@@ -346,1 +375,4 @@\n-bool ZMark::try_steal_local(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n+bool ZMark::try_steal_local(ZMarkContext* context) {\n+  ZMarkStripe* const stripe = context->stripe();\n+  ZMarkThreadLocalStacks* const stacks = context->stacks();\n+\n@@ -363,1 +395,4 @@\n-bool ZMark::try_steal_global(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n+bool ZMark::try_steal_global(ZMarkContext* context) {\n+  ZMarkStripe* const stripe = context->stripe();\n+  ZMarkThreadLocalStacks* const stacks = context->stacks();\n+\n@@ -380,2 +415,2 @@\n-bool ZMark::try_steal(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n-  return try_steal_local(stripe, stacks) || try_steal_global(stripe, stacks);\n+bool ZMark::try_steal(ZMarkContext* context) {\n+  return try_steal_local(context) || try_steal_global(context);\n@@ -499,1 +534,1 @@\n-void ZMark::work_without_timeout(ZMarkCache* cache, ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks) {\n+void ZMark::work_without_timeout(ZMarkContext* context) {\n@@ -504,1 +539,1 @@\n-    if (!drain(stripe, stacks, cache, &no_timeout)) {\n+    if (!drain(context, &no_timeout)) {\n@@ -509,1 +544,1 @@\n-    if (try_steal(stripe, stacks)) {\n+    if (try_steal(context)) {\n@@ -564,1 +599,1 @@\n-void ZMark::work_with_timeout(ZMarkCache* cache, ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks, uint64_t timeout_in_micros) {\n+void ZMark::work_with_timeout(ZMarkContext* context, uint64_t timeout_in_micros) {\n@@ -569,1 +604,1 @@\n-    if (!drain(stripe, stacks, cache, &timeout)) {\n+    if (!drain(context, &timeout)) {\n@@ -574,1 +609,1 @@\n-    if (try_steal(stripe, stacks)) {\n+    if (try_steal(context)) {\n@@ -585,1 +620,0 @@\n-  ZMarkCache cache(_stripes.nstripes());\n@@ -588,0 +622,1 @@\n+  ZMarkContext context(_stripes.nstripes(), stripe, stacks);\n@@ -590,1 +625,1 @@\n-    work_without_timeout(&cache, stripe, stacks);\n+    work_without_timeout(&context);\n@@ -592,1 +627,1 @@\n-    work_with_timeout(&cache, stripe, stacks, timeout_in_micros);\n+    work_with_timeout(&context, timeout_in_micros);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":53,"deletions":18,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class ZMarkCache;\n+class ZMarkContext;\n@@ -67,9 +67,6 @@\n-  void mark_and_follow(ZMarkCache* cache, ZMarkStackEntry entry);\n-\n-  template <typename T> bool drain(ZMarkStripe* stripe,\n-                                   ZMarkThreadLocalStacks* stacks,\n-                                   ZMarkCache* cache,\n-                                   T* timeout);\n-  bool try_steal_local(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks);\n-  bool try_steal_global(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks);\n-  bool try_steal(ZMarkStripe* stripe, ZMarkThreadLocalStacks* stacks);\n+  void mark_and_follow(ZMarkContext* context, ZMarkStackEntry entry);\n+\n+  template <typename T> bool drain(ZMarkContext* context, T* timeout);\n+  bool try_steal_local(ZMarkContext* context);\n+  bool try_steal_global(ZMarkContext* context);\n+  bool try_steal(ZMarkContext* context);\n@@ -87,7 +84,2 @@\n-  void work_without_timeout(ZMarkCache* cache,\n-                            ZMarkStripe* stripe,\n-                            ZMarkThreadLocalStacks* stacks);\n-  void work_with_timeout(ZMarkCache* cache,\n-                         ZMarkStripe* stripe,\n-                         ZMarkThreadLocalStacks* stacks,\n-                         uint64_t timeout_in_micros);\n+  void work_without_timeout(ZMarkContext* context);\n+  void work_with_timeout(ZMarkContext* context, uint64_t timeout_in_micros);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.hpp","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZMARKCONTEXT_HPP\n+#define SHARE_GC_Z_ZMARKCONTEXT_HPP\n+\n+#include \"gc\/z\/zMarkCache.hpp\"\n+#include \"gc\/shared\/stringdedup\/stringDedup.hpp\"\n+#include \"memory\/allocation.hpp\"\n+\n+class ZMarkStripe;\n+class ZMarkThreadLocalStacks;\n+\n+class ZMarkContext : public StackObj {\n+private:\n+  ZMarkCache                    _cache;\n+  ZMarkStripe* const            _stripe;\n+  ZMarkThreadLocalStacks* const _stacks;\n+  StringDedup::Requests         _string_dedup_requests;\n+\n+public:\n+  ZMarkContext(size_t nstripes,\n+               ZMarkStripe* stripe,\n+               ZMarkThreadLocalStacks* stacks);\n+\n+  ZMarkCache* cache();\n+  ZMarkStripe* stripe();\n+  ZMarkThreadLocalStacks* stacks();\n+  StringDedup::Requests* string_dedup_requests();\n+};\n+\n+#endif \/\/ SHARE_GC_Z_ZMARKCONTEXT_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.hpp","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef SHARE_GC_Z_ZMARKCONTEXT_INLINE_HPP\n+#define SHARE_GC_Z_ZMARKCONTEXT_INLINE_HPP\n+\n+#include \"gc\/z\/zMarkContext.hpp\"\n+\n+inline ZMarkContext::ZMarkContext(size_t nstripes,\n+                                  ZMarkStripe* stripe,\n+                                  ZMarkThreadLocalStacks* stacks) :\n+    _cache(nstripes),\n+    _stripe(stripe),\n+    _stacks(stacks),\n+    _string_dedup_requests() {}\n+\n+inline ZMarkCache* ZMarkContext::cache() {\n+  return &_cache;\n+}\n+\n+inline ZMarkStripe* ZMarkContext::stripe() {\n+  return _stripe;\n+}\n+\n+inline ZMarkThreadLocalStacks* ZMarkContext::stacks() {\n+  return _stacks;\n+}\n+\n+inline StringDedup::Requests* ZMarkContext::string_dedup_requests() {\n+  return &_string_dedup_requests;\n+}\n+\n+#endif \/\/ SHARE_GC_Z_ZMARKCACHE_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkContext.inline.hpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -52,0 +52,13 @@\n+\/*\n+ * @test TestStringDeduplicationAgeThreshold\n+ * @summary Test string deduplication age threshold\n+ * @bug 8029075\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationAgeThreshold Z\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationAgeThreshold.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,0 +52,13 @@\n+\/*\n+ * @test TestStringDeduplicationFullGC\n+ * @summary Test string deduplication during full GC\n+ * @bug 8029075\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationFullGC Z\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationFullGC.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -39,0 +39,13 @@\n+\/*\n+ * @test TestStringDeduplicationInterned\n+ * @summary Test string deduplication of interned strings\n+ * @bug 8029075\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationInterned Z\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationInterned.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,0 +52,13 @@\n+\/*\n+ * @test TestStringDeduplicationPrintOptions\n+ * @summary Test string deduplication print options\n+ * @bug 8029075\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationPrintOptions Z\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationPrintOptions.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,0 +52,13 @@\n+\/*\n+ * @test TestStringDeduplicationTableResize\n+ * @summary Test string deduplication table resize\n+ * @bug 8029075\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationTableResize Z\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationTableResize.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,0 +52,13 @@\n+\/*\n+ * @test TestStringDeduplicationYoungGC\n+ * @summary Test string deduplication during young GC\n+ * @bug 8029075\n+ * @requires vm.gc.Z\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationYoungGC Z\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationYoungGC.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}