{"files":[{"patch":"@@ -344,1 +344,1 @@\n-\/\/ sun.misc.Signal support\n+\/\/ sun.misc.Signal and BREAK_SIGNAL support\n@@ -565,5 +565,0 @@\n-  if (sig == BREAK_SIGNAL) {\n-    assert(!ReduceSignalUsage, \"Should not happen with -Xrs\/-XX:+ReduceSignalUsage\");\n-    return true; \/\/ ignore it\n-  }\n-\n@@ -1205,1 +1200,1 @@\n-void set_signal_handler(int sig, bool do_check = true) {\n+void set_signal_handler(int sig) {\n@@ -1249,1 +1244,2 @@\n-  do_check_signal_periodically[sig] = do_check;\n+\n+  do_check_signal_periodically[sig] = true;\n@@ -1288,4 +1284,16 @@\n-    \/\/ This is just for early initialization phase. Intercepting the signal here reduces the risk\n-    \/\/ that an attach client accidentally forces HotSpot to quit prematurely. We skip the periodic\n-    \/\/ check because late initialization will overwrite it to UserHandler.\n-    set_signal_handler(BREAK_SIGNAL, false);\n+    \/\/ Install BREAK_SIGNAL's handler in early initialization phase, in\n+    \/\/ order to reduce the risk that an attach client accidentally forces\n+    \/\/ HotSpot to quit prematurely.\n+    \/\/ The actual work for handling BREAK_SIGNAL is performed by the Signal\n+    \/\/ Dispatcher thread, which is created and started at a much later point,\n+    \/\/ see os::initialize_jdk_signal_support(). Any BREAK_SIGNAL received\n+    \/\/ before the Signal Dispatcher thread is started is queued up via the\n+    \/\/ pending_signals[BREAK_SIGNAL] counter, and will be processed by the\n+    \/\/ Signal Dispatcher thread in a delayed fashion.\n+    \/\/\n+    \/\/ Also note that HotSpot does NOT support signal chaining for BREAK_SIGNAL.\n+    \/\/ Applications that require a custom BREAK_SIGNAL handler should run with\n+    \/\/ -XX:+ReduceSignalUsage. Otherwise if libjsig is used together with\n+    \/\/ -XX:+ReduceSignalUsage, libjsig will prevent changing BREAK_SIGNAL's\n+    \/\/ handler to a custom handler.\n+    os::signal(BREAK_SIGNAL, os::user_handler());\n@@ -1293,0 +1301,1 @@\n+\n@@ -1787,3 +1796,1 @@\n-  install_signal_handlers();\n-\n-  \/\/ Initialize data for jdk.internal.misc.Signal\n+  \/\/ Initialize data for jdk.internal.misc.Signal and BREAK_SIGNAL's handler.\n@@ -1794,0 +1801,2 @@\n+  install_signal_handlers();\n+\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":24,"deletions":15,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2269,0 +2269,9 @@\n+\n+  \/\/ Initialize sigbreakHandler.\n+  \/\/ The actual work for handling CTRL-BREAK is performed by the Signal\n+  \/\/ Dispatcher thread, which is created and started at a much later point,\n+  \/\/ see os::initialize_jdk_signal_support(). Any CTRL-BREAK received\n+  \/\/ before the Signal Dispatcher thread is started is queued up via the\n+  \/\/ pending_signals[SIGBREAK] counter, and will be processed by the\n+  \/\/ Signal Dispatcher thread in a delayed fashion.\n+  os::signal(SIGBREAK, os::user_handler());\n@@ -4389,1 +4398,2 @@\n-  \/\/ Initialize data for jdk.internal.misc.Signal\n+  \/\/ Initialize data for jdk.internal.misc.Signal, and install CTRL-C and\n+  \/\/ CTRL-BREAK handlers.\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -516,2 +516,0 @@\n-    \/\/ Handle ^BREAK\n-    os::signal(SIGBREAK, os::user_handler());\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}