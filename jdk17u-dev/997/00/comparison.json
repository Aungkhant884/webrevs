{"files":[{"patch":"@@ -546,0 +546,42 @@\n+  \/\/ Update dominator tree information of the new goto block.\n+  block->_idom = in;\n+  block->_dom_depth = in->_dom_depth + 1;\n+  if (out->_idom != in) {\n+    \/\/ The successor block was not immediately dominated by the predecessor\n+    \/\/ block, so there is no dominator subtree to update.\n+    return;\n+  }\n+  \/\/ Update immediate dominator of the successor block.\n+  out->_idom = block;\n+  \/\/ Increment the dominator tree depth of the goto block's descendants. These\n+  \/\/ are found by a depth-first search starting from the successor block. Two\n+  \/\/ domination properties guarantee that only descendant blocks are visited:\n+  \/\/ 1) all dominators of a block b must appear in any path from the root to b;\n+  \/\/ 2) if a block b does not dominate another block b', b cannot dominate any\n+  \/\/    block reachable from b' either.\n+  \/\/ The exploration uses header indices as block identifiers, since\n+  \/\/ Block::_pre_order might not be unique in the context of this function.\n+  ResourceMark rm;\n+  VectorSet descendants;\n+  descendants.set(block->head()->_idx); \/\/ The goto block is a descendant of itself.\n+  Block_List worklist;\n+  worklist.push(out); \/\/ Start exploring from the successor block.\n+  while (worklist.size() > 0) {\n+    Block* b = worklist.pop();\n+    \/\/ The immediate dominator of b is a descendant, hence b is also a\n+    \/\/ descendant. Even though all predecessors of b might not have been visited\n+    \/\/ yet, we know that all dominators of b have been already visited (since\n+    \/\/ they must appear in any path from the goto block to b).\n+    descendants.set(b->head()->_idx);\n+    b->_dom_depth++;\n+    for (uint i = 0; i < b->_num_succs; i++) {\n+      Block* s = b->_succs[i];\n+      if (s != get_root_block() &&\n+          !descendants.test(s->head()->_idx) &&\n+          \/\/ Do not search below non-descendant successors, since any block\n+          \/\/ reachable from them cannot be descendant either.\n+          descendants.test(s->_idom->head()->_idx)) {\n+        worklist.push(s);\n+      }\n+    }\n+  }\n@@ -1278,0 +1320,17 @@\n+void PhaseCFG::verify_dominator_tree() const {\n+  for (uint i = 0; i < number_of_blocks(); i++) {\n+    Block* block = get_block(i);\n+    assert(block->_dom_depth <= number_of_blocks(), \"unexpected dominator tree depth\");\n+    if (block == get_root_block()) {\n+      assert(block->_dom_depth == 1, \"unexpected root dominator tree depth\");\n+      \/\/ The root block does not have an immediate dominator, stop checking.\n+      continue;\n+    }\n+    assert(block->_idom != nullptr, \"non-root blocks must have immediate dominators\");\n+    assert(block->_dom_depth == block->_idom->_dom_depth + 1,\n+           \"the dominator tree depth of a node must succeed that of its immediate dominator\");\n+    assert(block->num_preds() > 2 || block->_idom == get_block_for_node(block->pred(1)),\n+           \"the immediate dominator of a single-predecessor block must be the predecessor\");\n+  }\n+}\n+\n@@ -1347,0 +1406,1 @@\n+  verify_dominator_tree();\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -640,0 +640,2 @@\n+  \/\/ Check local dominator tree invariants.\n+  void verify_dominator_tree() const NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2765,0 +2765,1 @@\n+    cfg.verify_dominator_tree();\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -380,0 +380,6 @@\n+        if (node == block->head()) {\n+          if (block->_idom != NULL) {\n+            print_prop(\"idom\", block->_idom->_pre_order);\n+          }\n+          print_prop(\"dom_depth\", block->_dom_depth);\n+        }\n","filename":"src\/hotspot\/share\/opto\/idealGraphPrinter.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}