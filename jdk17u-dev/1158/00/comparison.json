{"files":[{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8295774\n+ * @summary Verify that List Item selection via mouse\/keys generates ItemEvent\/ActionEvent appropriately.\n+ * @run main ListItemEventsTest\n+ *\/\n+public class ListItemEventsTest {\n+\n+    private static final int MOUSE_DELAY = 100;\n+    private static final int KEYBOARD_DELAY = 1000;\n+\n+    private static Frame frame;\n+    private volatile static List list;\n+    private volatile static boolean actionPerformed = false;\n+    private volatile static boolean itemStateChanged = false;\n+    private static Robot robot;\n+\n+    public static void initializeGUI() {\n+        frame = new Frame(\"Test Frame\");\n+        frame.setLayout(new FlowLayout());\n+        list = new List();\n+        list.add(\"One\");\n+        list.add(\"Two\");\n+        list.add(\"Three\");\n+        list.add(\"Four\");\n+        list.add(\"Five\");\n+        list.addItemListener((event) -> {\n+            System.out.println(\"Got an ItemEvent: \" + event);\n+            itemStateChanged = true;\n+        });\n+        list.addActionListener((event) -> {\n+            System.out.println(\"Got an ActionEvent: \" + event);\n+            actionPerformed = true;\n+        });\n+\n+        frame.add(list);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] s) throws Exception {\n+        robot = new Robot();\n+        try {\n+            robot.setAutoDelay(MOUSE_DELAY);\n+            robot.setAutoWaitForIdle(true);\n+\n+            EventQueue.invokeLater(ListItemEventsTest::initializeGUI);\n+            robot.waitForIdle();\n+\n+            Point listAt = list.getLocationOnScreen();\n+            Dimension listSize = list.getSize();\n+            robot.mouseMove(listAt.x + listSize.width \/ 2,\n+                listAt.y + listSize.height \/ 2);\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (!itemStateChanged) {\n+                throw new RuntimeException(\n+                    \"FAIL: List did not trigger ItemEvent when item selected!\");\n+            }\n+\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mousePress(MouseEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(MouseEvent.BUTTON1_DOWN_MASK);\n+\n+            if (!actionPerformed) {\n+                throw new RuntimeException(\n+                    \"FAIL: List did not trigger ActionEvent when double\"\n+                        + \" clicked!\");\n+            }\n+\n+            itemStateChanged = false;\n+            actionPerformed = false;\n+\n+            EventQueue.invokeAndWait(() -> list.select(0));\n+            robot.waitForIdle();\n+\n+            if (itemStateChanged) {\n+                throw new RuntimeException(\n+                    \"FAIL: List triggered ItemEvent when item selected by \"\n+                        + \"calling the API!\");\n+            }\n+\n+            robot.setAutoDelay(KEYBOARD_DELAY);\n+\n+            itemStateChanged = false;\n+            typeKey(KeyEvent.VK_DOWN);\n+\n+            if (!itemStateChanged) {\n+                throw new RuntimeException(\n+                    \"FAIL: List did not trigger ItemEvent when item selected by\"\n+                        + \" down arrow key!\");\n+            }\n+\n+            itemStateChanged = false;\n+            typeKey(KeyEvent.VK_UP);\n+\n+            if (!itemStateChanged) {\n+                throw new RuntimeException(\n+                    \"FAIL: List did not trigger ItemEvent when item selected by\"\n+                        + \" up arrow key!\");\n+            }\n+\n+            if (actionPerformed) {\n+                throw new RuntimeException(\n+                    \"FAIL: List triggerd ActionEvent unnecessarily. Action generated\"\n+                        + \" when item selected using API or UP\/DOWN keys!\");\n+            }\n+\n+            actionPerformed = false;\n+            typeKey(KeyEvent.VK_ENTER);\n+\n+            if (!actionPerformed) {\n+                throw new RuntimeException(\n+                    \"FAIL: List did not trigger ActionEvent when enter\"\n+                        + \" key typed!\");\n+            }\n+\n+            System.out.println(\"Test passed!\");\n+\n+        } finally {\n+            EventQueue.invokeAndWait(ListItemEventsTest::disposeFrame);\n+        }\n+    }\n+\n+    public static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private static void typeKey(int key) throws Exception {\n+        robot.keyPress(key);\n+        robot.keyRelease(key);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/ComponentEvent\/ListItemEventsTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}