{"files":[{"patch":"@@ -34,0 +34,2 @@\n+import java.security.cert.CertPathValidatorException;\n+import java.security.cert.CertPathValidatorException.BasicReason;\n@@ -38,0 +40,2 @@\n+import java.security.cert.CertificateParsingException;\n+import java.security.cert.TrustAnchor;\n@@ -46,0 +50,2 @@\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n@@ -63,0 +69,1 @@\n+import sun.security.provider.certpath.CertPathConstraintsParameters;\n@@ -86,0 +93,1 @@\n+import sun.security.validator.Validator;\n@@ -181,0 +189,2 @@\n+    private Set<X509Certificate> trustedCerts = new HashSet<>();\n+\n@@ -1120,0 +1130,1 @@\n+        KeyStore cakstore = buildTrustedCerts();\n@@ -1128,1 +1139,7 @@\n-            caks = KeyStoreUtil.getCacertsKeyStore();\n+            if (cakstore != null) {\n+                caks = cakstore;\n+            } else {\n+                \/\/ try to load cacerts again, and let exception propagate\n+                \/\/ if it cannot be loaded\n+                caks = KeyStoreUtil.getCacertsKeyStore();\n+            }\n@@ -1485,1 +1502,3 @@\n-        checkWeak(rb.getString(\"the.certificate.request\"), req);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                req.getSubjectPublicKeyInfo(), null, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate.request\"), req, cpcp);\n@@ -1544,2 +1563,5 @@\n-        checkWeak(rb.getString(\"the.issuer\"), keyStore.getCertificateChain(alias));\n-        checkWeak(rb.getString(\"the.generated.certificate\"), cert);\n+        checkWeakConstraint(rb.getString(\"the.issuer\"),\n+                keyStore.getCertificateChain(alias));\n+        cpcp = buildCertPathConstraint(cert, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate\"),\n+                cert, cpcp);\n@@ -1594,1 +1616,4 @@\n-        checkWeak(rb.getString(\"the.generated.crl\"), crl, privateKey);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                privateKey, null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.crl\"), crl, privateKey,\n+                cpcp);\n@@ -1640,1 +1665,4 @@\n-        checkWeak(rb.getString(\"the.generated.certificate.request\"), request);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                request.getSubjectPublicKeyInfo(), null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate.request\"),\n+                request, cpcp);\n@@ -1685,1 +1713,3 @@\n-        checkWeak(rb.getString(\"the.certificate\"), cert);\n+        CertPathConstraintsParameters cpcp =\n+                buildCertPathConstraint(cert, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate\"), cert, cpcp);\n@@ -2023,1 +2053,2 @@\n-        checkWeak(rb.getString(\"the.generated.certificate\"), finalChain);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate\"),\n+                finalChain);\n@@ -2116,0 +2147,1 @@\n+        CertPathConstraintsParameters cpcp;\n@@ -2172,0 +2204,4 @@\n+\n+                    X509Certificate[] xcerts = convertCerts(chain);\n+                    List<X509Certificate> certs = Arrays.asList(xcerts);\n+                    TrustAnchor anchor = findTrustAnchor(certs);\n@@ -2184,1 +2220,13 @@\n-                        checkWeak(label, chain[i]);\n+\n+                        if (i == 0 &&\n+                                ((X509Certificate)chain[0]).\n+                                getBasicConstraints() == -1) {\n+                            \/\/ this is an EE\n+                            cpcp = buildCertPathConstraint((X509Certificate) chain[i], anchor);\n+                        } else {\n+                            cpcp = new CertPathConstraintsParameters(\n+                                    (X509Certificate)chain[i], null, anchor,\n+                                    null);\n+                        }\n+\n+                        checkWeakConstraint(label, chain[i], cpcp);\n@@ -2191,1 +2239,1 @@\n-                    checkWeak(label, chain);\n+                    checkWeakConstraint(label, chain);\n@@ -2220,1 +2268,2 @@\n-            checkWeak(label, cert);\n+            cpcp = buildCertPathConstraint((X509Certificate)cert, null);\n+            checkWeakConstraint(label, cert, cpcp);\n@@ -2447,1 +2496,3 @@\n-                checkWeak(\"<\" + newAlias + \">\", c);\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint((X509Certificate)c, null);\n+                checkWeakConstraint(\"<\" + newAlias + \">\", c, cpcp);\n@@ -2644,0 +2695,3 @@\n+                    CertPathConstraintsParameters cpcp =\n+                            buildCertPathConstraint((X509Certificate)signer,\n+                            null);\n@@ -2648,1 +2702,1 @@\n-                            withWeak(signer.getPublicKey()));\n+                            withWeakConstraint(signer.getPublicKey(), cpcp));\n@@ -2656,0 +2710,3 @@\n+                    CertPathConstraintsParameters cpcp =\n+                            buildCertPathConstraint((X509Certificate)signer,\n+                            null);\n@@ -2660,1 +2717,1 @@\n-                            withWeak(signer.getPublicKey()));\n+                            withWeakConstraint(signer.getPublicKey(), cpcp));\n@@ -2677,1 +2734,9 @@\n-            checkWeak(rb.getString(\"the.crl\"), crl, signer == null ? null : signer.getPublicKey());\n+\n+            if (signer != null) {\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint((X509Certificate)signer, null);\n+                checkWeakConstraint(rb.getString(\"the.crl\"), crl,\n+                        signer.getPublicKey(), cpcp);\n+            } else {\n+                checkWeak(rb.getString(\"the.crl\"), crl, null);\n+            }\n@@ -2723,0 +2788,2 @@\n+        CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters(pkey, null, null);\n@@ -2726,1 +2793,1 @@\n-                withWeak(pkey),\n+                withWeakConstraint(pkey, cpcp),\n@@ -2750,1 +2817,6 @@\n-        checkWeak(rb.getString(\"the.certificate.request\"), req);\n+\n+        CertPathConstraintsParameters cpcp1 =\n+                new CertPathConstraintsParameters(\n+                req.getSubjectPublicKeyInfo(), null, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate.request\"), req,\n+                cpcp1);\n@@ -2770,0 +2842,3 @@\n+        X509Certificate[] xcerts = convertCerts(certs);\n+        List<X509Certificate> chain = Arrays.asList(xcerts);\n+        TrustAnchor anchor = findTrustAnchor(chain);\n@@ -2790,1 +2865,11 @@\n-            checkWeak(oneInMany(rb.getString(\"the.certificate\"), i, certs.length), x509Cert);\n+            CertPathConstraintsParameters cpcp;\n+            if (i == 0 &&\n+                    x509Cert.getBasicConstraints() == -1) {\n+                \/\/ this is an EE\n+                cpcp = buildCertPathConstraint(x509Cert, anchor);\n+            } else {\n+                cpcp = new CertPathConstraintsParameters(x509Cert,\n+                        null, anchor, null);\n+            }\n+            checkWeakConstraint(oneInMany(rb.getString(\"the.certificate\"),\n+                    i, certs.length), x509Cert, cpcp);\n@@ -2902,0 +2987,5 @@\n+                @SuppressWarnings(\"unchecked\")\n+                List<X509Certificate> chain =\n+                        (List<X509Certificate>)certs;\n+                TrustAnchor anchor = findTrustAnchor(chain);\n+                CertPathConstraintsParameters cpcp;\n@@ -2914,1 +3004,8 @@\n-                    checkWeak(oneInManys(rb.getString(\n+                    if (cc == 0 && x.getBasicConstraints() == -1) {\n+                        \/\/ this is an EE\n+                        cpcp = buildCertPathConstraint(x, anchor);\n+                    } else {\n+                        cpcp = new CertPathConstraintsParameters(\n+                                x, null, anchor, null);\n+                    }\n+                    checkWeakConstraint(oneInManys(rb.getString(\n@@ -2917,1 +3014,1 @@\n-                            ss.size()), x);\n+                            ss.size()), x, cpcp);\n@@ -2924,0 +3021,4 @@\n+                    @SuppressWarnings(\"unchecked\")\n+                    List<X509Certificate> tschain =\n+                            (List<X509Certificate>)certs;\n+                    anchor = findTrustAnchor(tschain);\n@@ -2936,1 +3037,9 @@\n-                        checkWeak(oneInManys(rb.getString(\n+                        if (cc == 0 &&\n+                                x.getBasicConstraints() == -1) {\n+                            \/\/ this is an EE\n+                            cpcp = buildCertPathConstraint(x, anchor);\n+                        } else {\n+                            cpcp = new CertPathConstraintsParameters(\n+                                    x, null, anchor, null);\n+                        }\n+                        checkWeakConstraint(oneInManys(rb.getString(\n@@ -2939,1 +3048,1 @@\n-                                ss.size()), x);\n+                                ss.size()), x, cpcp);\n@@ -2969,0 +3078,3 @@\n+            @SuppressWarnings(\"unchecked\")\n+            List<X509Certificate> xcerts = (List<X509Certificate>)chain;\n+            TrustAnchor anchor = findTrustAnchor(xcerts);\n@@ -2979,1 +3091,11 @@\n-                    checkWeak(oneInMany(rb.getString(\"the.certificate\"), i++, chain.size()), cert);\n+                    X509Certificate x = (X509Certificate)cert;\n+                    CertPathConstraintsParameters cpcp;\n+                    if (i == 0 && x.getBasicConstraints() == -1) {\n+                        \/\/ this is an EE\n+                        cpcp = buildCertPathConstraint(x, anchor);\n+                    } else {\n+                        cpcp = new CertPathConstraintsParameters(\n+                                x, null, anchor, null);\n+                    }\n+                    checkWeakConstraint(oneInMany(rb.getString(\n+                            \"the.certificate\"), i++, chain.size()), x, cpcp);\n@@ -3203,0 +3325,3 @@\n+        CertPathConstraintsParameters cpcp =\n+                buildCertPathConstraint(cert, null);\n+\n@@ -3204,1 +3329,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3224,1 +3349,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3235,1 +3360,1 @@\n-                checkWeak(rb.getString(\"the.input\"), cert);\n+                checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3244,1 +3369,1 @@\n-                checkWeak(rb.getString(\"the.input\"), cert);\n+                checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3271,1 +3396,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3411,0 +3536,15 @@\n+    private String withWeakConstraint(String alg,\n+            CertPathConstraintsParameters cpcp) {\n+        try {\n+            DISABLED_CHECK.permits(alg, cpcp, false);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"with.disabled\"), alg);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(alg, cpcp, false);\n+            return alg;\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"with.weak\"), alg);\n+        }\n+    }\n+\n@@ -3437,1 +3577,2 @@\n-    private String withWeak(Key key) {\n+    private String withWeakConstraint(Key key,\n+            CertPathConstraintsParameters cpcp) {\n@@ -3440,7 +3581,9 @@\n-        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-                if (kLen >= 0) {\n-                    return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n-                } else {\n-                    return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n-                }\n+        try {\n+            DISABLED_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+            if (kLen >= 0) {\n+                return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n@@ -3448,1 +3591,1 @@\n-                return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n+                return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n@@ -3450,2 +3593,2 @@\n-        } else {\n-            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n@@ -3466,0 +3609,2 @@\n+        CertPathConstraintsParameters cpcp =\n+                buildCertPathConstraint(cert, null);\n@@ -3468,1 +3613,1 @@\n-            sigName = withWeak(sigName);\n+            sigName = withWeakConstraint(sigName, cpcp);\n@@ -3478,1 +3623,1 @@\n-                        withWeak(pkey),\n+                        withWeakConstraint(pkey, cpcp),\n@@ -3802,1 +3947,1 @@\n-        checkWeak(rb.getString(\"reply\"), replyCerts);\n+        checkWeakConstraint(rb.getString(\"reply\"), replyCerts);\n@@ -3884,1 +4029,4 @@\n-                checkWeak(String.format(fromKeyStore\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint((X509Certificate)root.snd,\n+                        null);\n+                checkWeakConstraint(String.format(fromKeyStore\n@@ -3888,1 +4036,1 @@\n-                          root.snd);\n+                        root.snd, cpcp);\n@@ -3953,1 +4101,3 @@\n-                checkWeak(p.fst, p.snd);\n+                CertPathConstraintsParameters cpcp =\n+                        buildCertPathConstraint(p.snd, null);\n+                checkWeakConstraint(p.fst, p.snd, cpcp);\n@@ -4749,0 +4899,72 @@\n+    private void checkWeakConstraint(String label, String sigAlg, Key key,\n+            CertPathConstraintsParameters cpcp) throws Exception {\n+        if (sigAlg != null) {\n+            try {\n+                DISABLED_CHECK.permits(sigAlg, cpcp, false);\n+                try {\n+                    LEGACY_CHECK.permits(sigAlg, cpcp, false);\n+                } catch (CertPathValidatorException e) {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.weak\"), label, sigAlg));\n+                }\n+            } catch (CertPathValidatorException e) {\n+                String eMessage = e.getMessage();\n+                if (eMessage.contains(\"denyAfter constraint check failed\") &&\n+                        e.getReason() == BasicReason.ALGORITHM_CONSTRAINED) {\n+                    String startSeparator = \"Constraint date: \";\n+                    int startSepPos = eMessage.indexOf(startSeparator);\n+                    String endSeparator = \"; params date\";\n+                    int endSepPos = eMessage.indexOf(endSeparator);\n+                    String denyAfterDate = null;\n+                    try {\n+                        denyAfterDate = eMessage.substring(startSepPos + startSeparator.length(),\n+                                endSepPos);\n+                    } catch (IndexOutOfBoundsException e1) {\n+                        throw new Exception(rb.getString(\n+                                \"Unable.to.parse.denyAfter.string.in.exception.message\"));\n+                    }\n+\n+                    SimpleDateFormat formatter = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss Z yyyy\");\n+                    Date dateObj = null;\n+                    try {\n+                        dateObj = formatter.parse(denyAfterDate);\n+                    } catch (ParseException e2) {\n+                        throw new Exception(rb.getString(\n+                                \"Unable.to.parse.denyAfter.string.in.exception.message\"));\n+                    }\n+                    formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n+                    denyAfterDate = formatter.format(dateObj);\n+\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.usagesignedjar\"), label, sigAlg,\n+                            denyAfterDate));\n+                } else {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.disabled\"), label, sigAlg));\n+                }\n+                if (debug) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                DISABLED_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+                try {\n+                    LEGACY_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+                } catch (CertPathValidatorException e) {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.key.weak\"), label,\n+                            String.format(rb.getString(\"key.bit\"),\n+                            KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+                }\n+            } catch (CertPathValidatorException e) {\n+                weakWarnings.add(String.format(\n+                        rb.getString(\"whose.key.disabled\"), label,\n+                        String.format(rb.getString(\"key.bit\"),\n+                        KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+            }\n+        }\n+    }\n+\n@@ -4775,2 +4997,5 @@\n-    private void checkWeak(String label, Certificate[] certs)\n-            throws KeyStoreException {\n+    private void checkWeakConstraint(String label, Certificate[] certs)\n+            throws KeyStoreException, Exception {\n+        X509Certificate[] xcerts = convertCerts(certs);\n+        List<X509Certificate> chain = Arrays.asList(xcerts);\n+        TrustAnchor anchor = findTrustAnchor(chain);\n@@ -4785,1 +5010,10 @@\n-                checkWeak(fullLabel, xc);\n+\n+                CertPathConstraintsParameters cpcp = null;\n+                if (i == 0 && xc.getBasicConstraints() == -1) {\n+                    \/\/ this is an EE\n+                    cpcp = buildCertPathConstraint(xc, anchor);\n+                } else {\n+                    cpcp = new CertPathConstraintsParameters(\n+                            xc, null, anchor, null);\n+                }\n+                checkWeakConstraint(fullLabel, xc, cpcp);\n@@ -4790,2 +5024,3 @@\n-    private void checkWeak(String label, Certificate cert)\n-            throws KeyStoreException {\n+    private void checkWeakConstraint(String label, Certificate cert,\n+            CertPathConstraintsParameters cpcp)\n+            throws KeyStoreException, Exception {\n@@ -4796,1 +5031,1 @@\n-            checkWeak(label, sigAlg, xc.getPublicKey());\n+            checkWeakConstraint(label, sigAlg, xc.getPublicKey(), cpcp);\n@@ -4800,2 +5035,12 @@\n-    private void checkWeak(String label, PKCS10 p10) {\n-        checkWeak(label, p10.getSigAlg(), p10.getSubjectPublicKeyInfo());\n+    private void checkWeakConstraint(String label, PKCS10 p10,\n+            CertPathConstraintsParameters cpcp) throws Exception {\n+        checkWeakConstraint(label, p10.getSigAlg(),\n+                p10.getSubjectPublicKeyInfo(), cpcp);\n+    }\n+\n+    private void checkWeakConstraint(String label, CRL crl, Key key,\n+            CertPathConstraintsParameters cpcp) throws Exception {\n+        if (crl instanceof X509CRLImpl) {\n+            X509CRLImpl impl = (X509CRLImpl)crl;\n+            checkWeakConstraint(label, impl.getSigAlgName(), key, cpcp);\n+        }\n@@ -4811,0 +5056,70 @@\n+    private KeyStore buildTrustedCerts() {\n+        KeyStore caks = null;\n+        try {\n+            caks = KeyStoreUtil.getCacertsKeyStore();\n+            if (caks != null) {\n+                Enumeration<String> aliases = caks.aliases();\n+                while (aliases.hasMoreElements()) {\n+                    String a = aliases.nextElement();\n+                    try {\n+                        trustedCerts.add((X509Certificate)caks.getCertificate(a));\n+                    } catch (Exception e2) {\n+                        \/\/ ignore, if the keystore has not been loaded\/initialized properly\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            \/\/ Ignore, if cacerts cannot be loaded\n+        }\n+        return caks;\n+    }\n+\n+    private TrustAnchor findTrustAnchor(List<X509Certificate> chain) {\n+        if (chain.isEmpty()) {\n+            return null;\n+        }\n+\n+        X509Certificate last = chain.get(chain.size() - 1);\n+        Optional<X509Certificate> trusted =\n+                trustedCerts.stream()\n+                        .filter(c -> c.getSubjectX500Principal().equals(last.getIssuerX500Principal()))\n+                        .findFirst();\n+        return trusted.isPresent() ? new TrustAnchor(trusted.get(), null) : null;\n+    }\n+\n+    private X509Certificate[] convertCerts(Certificate[] certs) {\n+        X509Certificate[] xcerts = new X509Certificate[certs.length];\n+\n+        for (int i = 0; i < certs.length; i++) {\n+            if (certs[i] instanceof X509Certificate) {\n+                xcerts[i] = (X509Certificate) certs[i];\n+            }\n+        }\n+        return xcerts;\n+    }\n+\n+    private CertPathConstraintsParameters buildCertPathConstraint(\n+        X509Certificate xcert, TrustAnchor anchor) throws Exception{\n+        List<String> eku = xcert.getExtendedKeyUsage();\n+        if (eku == null) {\n+            return new CertPathConstraintsParameters(xcert, null,\n+                    anchor, null);\n+        }\n+\n+        if (eku.contains(KnownOIDs.codeSigning.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_CODE_SIGNING, anchor, null);\n+        } else if (eku.contains(KnownOIDs.clientAuth.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TLS_CLIENT, anchor, null);\n+        } else if (eku.contains(KnownOIDs.serverAuth.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TLS_SERVER, anchor, null);\n+        } else if (eku.contains(KnownOIDs.KP_TimeStamping.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TSA_SERVER, anchor, null);\n+        }\n+        return new CertPathConstraintsParameters(xcert, Validator.VAR_GENERIC,\n+                anchor, null);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":368,"deletions":53,"binary":false,"changes":421,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -485,0 +485,2 @@\n+        {\"whose.sigalg.usagesignedjar\", \"%1$s uses the %2$s signature algorithm which is considered a security risk and cannot be used to sign JARs after %3$s.\"},\n+        {\"Unable.to.parse.denyAfter.string.in.exception.message\", \"Unable to parse denyAfter date string in exception message\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273236\n+ * @summary Test SHA1 usage SignedJAR\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestSha1Usage {\n+\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg rsa -alias ca -dname CN=CA \" +\n+                \"-ext eku=codeSigning -sigalg SHA1withRSA\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*considered a security risk\")\n+                .shouldMatch(\"cannot be used to sign JARs\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+        kt(\"-certreq -alias e1 -file tmp.req\", \"ks\");\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-gencert -alias ca -infile tmp.req -outfile tmp.cert\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The issuer.*SHA1withRSA.*considered a security risk\")\n+                .shouldMatch(\"cannot be used to sign JARs\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/TestSha1Usage.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}