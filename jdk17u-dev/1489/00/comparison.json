{"files":[{"patch":"@@ -747,1 +747,2 @@\n-\/\/ size by this TLS size.\n+\/\/ size by this TLS size. The same function is used to determine whether\n+\/\/ adjustStackSizeForGuardPages() needs to be true.\n@@ -753,8 +754,1 @@\n-GetMinStack _get_minstack_func = NULL;\n-\n-static void get_minstack_init() {\n-  _get_minstack_func =\n-        (GetMinStack)dlsym(RTLD_DEFAULT, \"__pthread_get_minstack\");\n-  log_info(os, thread)(\"Lookup of __pthread_get_minstack %s\",\n-                       _get_minstack_func == NULL ? \"failed\" : \"succeeded\");\n-}\n+GetMinStack _get_minstack_func = nullptr;  \/\/ Initialized via os::init_2()\n@@ -773,2 +767,2 @@\n-    \/\/ In glibc before 2.27, minstack size includes guard_size.\n-    \/\/ In glibc 2.27 and later, guard_size is automatically added\n+    \/\/ If adjustStackSizeForGuardPages() is true, minstack size includes\n+    \/\/ guard_size. Otherwise guard_size is automatically added\n@@ -803,0 +797,36 @@\n+\/\/ In glibc versions prior to 2.27 the guard size mechanism\n+\/\/ was not implemented properly. The POSIX standard requires adding\n+\/\/ the size of the guard pages to the stack size, instead glibc\n+\/\/ took the space out of 'stacksize'. Thus we need to adapt the requested\n+\/\/ stack_size by the size of the guard pages to mimic proper behaviour.\n+\/\/ The fix in glibc 2.27 has now been backported to numerous earlier\n+\/\/ glibc versions so we need to do a dynamic runtime check.\n+static bool _adjustStackSizeForGuardPages = true;\n+bool os::Linux::adjustStackSizeForGuardPages() {\n+  return _adjustStackSizeForGuardPages;\n+}\n+\n+#ifdef __GLIBC__\n+static void init_adjust_stacksize_for_guard_pages() {\n+  assert(_get_minstack_func == nullptr, \"initialization error\");\n+  _get_minstack_func =(GetMinStack)dlsym(RTLD_DEFAULT, \"__pthread_get_minstack\");\n+  log_info(os, thread)(\"Lookup of __pthread_get_minstack %s\",\n+                       _get_minstack_func == nullptr ? \"failed\" : \"succeeded\");\n+\n+  if (_get_minstack_func != nullptr) {\n+    pthread_attr_t attr;\n+    pthread_attr_init(&attr);\n+    size_t min_stack = _get_minstack_func(&attr);\n+    size_t guard = 16 * K; \/\/ Actual value doesn't matter as it is not examined\n+    pthread_attr_setguardsize(&attr, guard);\n+    size_t min_stack2 = _get_minstack_func(&attr);\n+    pthread_attr_destroy(&attr);\n+    \/\/ If the minimum stack size changed when we added the guard page space\n+    \/\/ then we need to perform the adjustment.\n+    _adjustStackSizeForGuardPages = (min_stack2 != min_stack);\n+    log_info(os)(\"Glibc stack size guard page adjustment is %sneeded\",\n+                 _adjustStackSizeForGuardPages ? \"\" : \"not \");\n+  }\n+}\n+#endif \/\/ GLIBC\n+\n@@ -828,7 +858,0 @@\n-  \/\/ In glibc versions prior to 2.7 the guard size mechanism\n-  \/\/ is not implemented properly. The posix standard requires adding\n-  \/\/ the size of the guard pages to the stack size, instead Linux\n-  \/\/ takes the space out of 'stacksize'. Thus we adapt the requested\n-  \/\/ stack_size by the size of the guard pages to mimick proper\n-  \/\/ behaviour. However, be careful not to end up with a size\n-  \/\/ of zero due to overflow. Don't add the guard page in that case.\n@@ -840,0 +863,2 @@\n+  \/\/ Apply stack size adjustments if needed. However, be careful not to end up\n+  \/\/ with a size of zero due to overflow. Don't add the adjustment in that case.\n@@ -844,1 +869,1 @@\n-  } else {\n+  } else if (os::Linux::adjustStackSizeForGuardPages()) {\n@@ -989,1 +1014,1 @@\n-                       p2i(thread->stack_base()), p2i(thread->stack_end()), thread->stack_size());\n+                       p2i(thread->stack_base()), p2i(thread->stack_end()), thread->stack_size() \/ K);\n@@ -1329,1 +1354,1 @@\n-  \/\/ If the fast Posix clocks are supported then the clock_getres()\n+  \/\/ If the fast POSIX clocks are supported then the clock_getres()\n@@ -4563,4 +4588,0 @@\n-  if (AdjustStackSizeForTLS) {\n-    get_minstack_init();\n-  }\n-\n@@ -4589,0 +4610,5 @@\n+#ifdef __GLIBC__\n+  \/\/ Check if we need to adjust the stack size for glibc guard pages.\n+  init_adjust_stacksize_for_guard_pages();\n+#endif\n+\n@@ -5363,3 +5389,3 @@\n-\/\/ ** Due to NPTL implementation error, linux takes the glibc guard page out\n-\/\/    of the stack size given in pthread_attr. We work around this for\n-\/\/    threads created by the VM. (We adapt bottom to be P1 and size accordingly.)\n+\/\/ ** If adjustStackSizeForGuardPages() is true the guard pages have been taken\n+\/\/    out of the stack size given in pthread_attr. We work around this for\n+\/\/    threads created by the VM. We adjust bottom to be P1 and size accordingly.\n@@ -5392,5 +5418,8 @@\n-    \/\/ Work around NPTL stack guard error.\n-    size_t guard_size = 0;\n-    rslt = pthread_attr_getguardsize(&attr, &guard_size);\n-    if (rslt != 0) {\n-      fatal(\"pthread_attr_getguardsize failed with error = %d\", rslt);\n+    if (os::Linux::adjustStackSizeForGuardPages()) {\n+      size_t guard_size = 0;\n+      rslt = pthread_attr_getguardsize(&attr, &guard_size);\n+      if (rslt != 0) {\n+        fatal(\"pthread_attr_getguardsize failed with error = %d\", rslt);\n+      }\n+      *bottom += guard_size;\n+      *size   -= guard_size;\n@@ -5398,2 +5427,0 @@\n-    *bottom += guard_size;\n-    *size   -= guard_size;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":62,"deletions":35,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -157,0 +157,2 @@\n+  static bool adjustStackSizeForGuardPages(); \/\/ See comments in os_linux.cpp\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -884,2 +884,2 @@\n-  \/\/ Work around linux NPTL implementation error, see also os::create_thread() in os_linux.cpp.\n-  LINUX_ONLY(stack_size -= guard_size);\n+  \/\/ Work around glibc stack guard issue, see os::create_thread() in os_linux.cpp.\n+  LINUX_ONLY(if (os::Linux::adjustStackSizeForGuardPages()) stack_size -= guard_size;)\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}