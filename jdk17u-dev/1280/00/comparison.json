{"files":[{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+\n+import javax.xml.xpath.XPathExpressionException;\n+\n+\/*\n+ * @test\n+ * @bug     8289949\n+ * @summary Tests the XPath operator expressions\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ *\n+ * @run testng xpath.XPathOperatorExpTest\n+ *\/\n+public class XPathOperatorExpTest extends XPathTestBase {\n+    private static final Document doc = getDocument();\n+\n+    \/*\n+     * DataProvider for testing the XPath operator expressions.\n+     * Data columns:\n+     *  see parameters of the test \"testOperatorExp\"\n+     *\/\n+    @DataProvider(name = \"operatorExpTestCases\")\n+    public Object[][] getOperatorExp() {\n+        return new Object[][]{\n+                \/\/ boolean and relational operators: or, and, =, !=, <, <=, >, >=\n+                {\"string(\/\/Customer[Age > 0]\/Name)\", \"name2\"},\n+                {\"string(\/\/Customer[Age < 0]\/Name)\", \"name3\"},\n+                {\"string(\/\/Customer[Age = 0]\/Name)\", \"name1\"},\n+                {\"count(\/\/Customer[Age >= 0 and Age <= 0])\", 1},\n+                {\"count(\/\/Customer[Age >= 0][Age <= 0])\", 1},\n+                {\"count(\/\/Customer[Age > 0 or Age < 0])\", 2},\n+                {\"count(\/\/Customer[Age != 0])\", 2},\n+\n+                \/\/ arithmetic operators: +, -, *, div, mod\n+                {\"string(\/\/Customer[last() div 2]\/Name)\", \"name1\"},\n+                {\"string(\/\/Customer[position() * 2 > last()]\/Name)\", \"name2\"},\n+                {\"string(\/\/Customer[position() + 1 < last()]\/Name)\", \"name1\"},\n+                {\"string(\/\/Customer[last() - 1]\/Name)\", \"name2\"},\n+                {\"string(\/\/Customer[last() mod 2]\/Name)\", \"name1\"},\n+\n+                \/\/ union operator: |\n+                {\"count(\/\/Customer[Name='name1'] | \/\/Customer[Name='name2'])\",\n+                        2},\n+                {\"count(\/\/Customer[Name='name1'] | \/\/Customer[Name='name2'] |\" +\n+                        \" \/\/Customer[Name='name3'])\", 3},\n+\n+                \/\/ operator precedence\n+                {\"1 + 2 * 3 + 3\", 10.0},\n+                {\"1 + 1 div 2 + 2\", 3.5},\n+                {\"1 + 1 mod 2 + 2\", 4.0},\n+                {\"1 * 1 mod 2 div 2\", 0},\n+                {\"1 * (1 mod 2) div 2\", 0.5},\n+                {\"(1 + 2) * (3 + 3)\", 18.0},\n+                {\"(1 + 2) div (3 + 3)\", 0.5},\n+                {\"1 - 2 < 3 + 3\", true},\n+                {\"1 * 2 >= 3 div 3\", true},\n+                {\"3 > 2 > 1\", false},\n+                {\"3 > (2 > 1)\", true},\n+                {\"3 > 2 = 1\", true},\n+                {\"1 = 3 > 2\", true},\n+                {\"1 = 2 or 1 <= 2 and 2 != 2\", false},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid operator usage.\n+     * Data columns:\n+     *  see parameters of the test \"testExceptionOnEval\"\n+     *\/\n+    @DataProvider(name = \"exceptionExpTestCases\")\n+    public Object[][] getExceptionExp() {\n+        return new Object[][]{\n+                \/\/ invalid operators\n+                {\"string(\/\/Customer[last() \/ 2]\/Name)\"},\n+                {\"string(\/\/Customer[last() % 2]\/Name)\"},\n+                {\"count(\/\/Customer[Name='name1'] & \/\/Customer[Name='name2'])\"},\n+                {\"count(\/\/Customer[Name='name1'] && \/\/Customer[Name='name2'])\"},\n+                {\"count(\/\/Customer[Name='name1'] || \/\/Customer[Name='name2'])\"},\n+\n+                \/\/ union operator only works for node-sets\n+                {\"\/\/Customer[Name='name1'] | string(\/\/Customer[Name='name2']))\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating XPath operators matches the\n+     * expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"operatorExpTestCases\")\n+    void testOperatorExp(String exp, Object expected) throws Exception {\n+        if (expected instanceof Double d) {\n+            testExp(doc, exp, d, Double.class);\n+        } else if (expected instanceof String s) {\n+            testExp(doc, exp, s, String.class);\n+        } else if (expected instanceof  Boolean b) {\n+            testExp(doc, exp, b, Boolean.class);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n+     *\n+     * @param exp XPath expression\n+     *\/\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathOperatorExpTest.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}