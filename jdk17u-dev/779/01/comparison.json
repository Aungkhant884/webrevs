{"files":[{"patch":"@@ -1282,1 +1282,1 @@\n-    return MacroAssembler::far_branch_size();\n+    return MacroAssembler::far_codestub_branch_size();\n@@ -1287,1 +1287,1 @@\n-    return 4 * NativeInstruction::instruction_size;\n+    return NativeInstruction::instruction_size + MacroAssembler::far_codestub_branch_size();\n@@ -2361,1 +2361,1 @@\n-  assert(__ offset() - offset <= (int) size_deopt_handler(), \"overflow\");\n+  assert(__ offset() - offset == (int) size_deopt_handler(), \"overflow\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,2 +55,7 @@\n-  __ far_jump(ExternalAddress(entry_point));\n-  __ align(wordSize);\n+  int jump_code_size = __ far_jump(ExternalAddress(entry_point));\n+  \/\/ IC stub code size is not expected to vary depending on target address.\n+  \/\/ We use NOPs to make the [ldr + far_jump + nops + int64] stub size equal to ic_stub_code_size.\n+  for (int size = NativeInstruction::instruction_size + jump_code_size + 8;\n+           size < ic_stub_code_size(); size += NativeInstruction::instruction_size) {\n+    __ nop();\n+  }\n@@ -58,0 +63,1 @@\n+  assert((uintptr_t)__ pc() % wordSize == 0, \"\");\n","filename":"src\/hotspot\/cpu\/aarch64\/icBuffer_aarch64.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -385,0 +385,13 @@\n+static inline bool target_needs_far_branch(address addr) {\n+  \/\/ codecache size <= 128M\n+  if (!MacroAssembler::far_branches()) {\n+    return false;\n+  }\n+  \/\/ codecache size > 240M\n+  if (MacroAssembler::codestub_branch_needs_far_jump()) {\n+    return true;\n+  }\n+  \/\/ codecache size: 128M..240M\n+  return !CodeCache::is_non_nmethod(addr);\n+}\n+\n@@ -389,1 +402,1 @@\n-  if (far_branches()) {\n+  if (target_needs_far_branch(entry.target())) {\n@@ -392,1 +405,1 @@\n-    \/\/ the code cache cannot exceed 2Gb.\n+    \/\/ the code cache cannot exceed 2Gb (ADRP limit is 4GB).\n@@ -403,1 +416,1 @@\n-void MacroAssembler::far_jump(Address entry, CodeBuffer *cbuf, Register tmp) {\n+int MacroAssembler::far_jump(Address entry, CodeBuffer *cbuf, Register tmp) {\n@@ -407,1 +420,2 @@\n-  if (far_branches()) {\n+  address start = pc();\n+  if (target_needs_far_branch(entry.target())) {\n@@ -410,1 +424,1 @@\n-    \/\/ the code cache cannot exceed 2Gb.\n+    \/\/ the code cache cannot exceed 2Gb (ADRP limit is 4GB).\n@@ -419,0 +433,1 @@\n+  return pc() - start;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1090,0 +1090,5 @@\n+  \/\/ Check if branches to the the non nmethod section require a far jump\n+  static bool codestub_branch_needs_far_jump() {\n+    return CodeCache::max_distance_to_non_nmethod() > branch_range;\n+  }\n+\n@@ -1093,1 +1098,1 @@\n-  void far_jump(Address entry, CodeBuffer *cbuf = NULL, Register tmp = rscratch1);\n+  int far_jump(Address entry, CodeBuffer *cbuf = NULL, Register tmp = rscratch1);\n@@ -1095,2 +1100,2 @@\n-  static int far_branch_size() {\n-    if (far_branches()) {\n+  static int far_codestub_branch_size() {\n+    if (codestub_branch_needs_far_jump()) {\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -299,0 +299,1 @@\n+  non_profiled_size = align_down(non_profiled_size, alignment);\n@@ -304,1 +305,0 @@\n-  \/\/      Profiled nmethods\n@@ -306,0 +306,1 @@\n+  \/\/      Profiled nmethods\n@@ -308,4 +309,4 @@\n-  ReservedSpace non_method_space    = rs.first_part(non_nmethod_size);\n-  ReservedSpace rest                = rs.last_part(non_nmethod_size);\n-  ReservedSpace profiled_space      = rest.first_part(profiled_size);\n-  ReservedSpace non_profiled_space  = rest.last_part(profiled_size);\n+  ReservedSpace profiled_space      = rs.first_part(profiled_size);\n+  ReservedSpace rest                = rs.last_part(profiled_size);\n+  ReservedSpace non_method_space    = rest.first_part(non_nmethod_size);\n+  ReservedSpace non_profiled_space  = rest.last_part(non_nmethod_size);\n@@ -901,0 +902,17 @@\n+bool CodeCache::is_non_nmethod(address addr) {\n+  CodeHeap* blob = get_code_heap(CodeBlobType::NonNMethod);\n+  return blob->contains(addr);\n+}\n+\n+size_t CodeCache::max_distance_to_non_nmethod() {\n+  if (!SegmentedCodeCache) {\n+    return ReservedCodeCacheSize;\n+  } else {\n+    CodeHeap* blob = get_code_heap(CodeBlobType::NonNMethod);\n+    \/\/ the max distance is minimized by placing the NonNMethod segment\n+    \/\/ in between MethodProfiled and MethodNonProfiled segments\n+    size_t dist1 = (size_t)blob->high() - (size_t)_low_bound;\n+    size_t dist2 = (size_t)_high_bound - (size_t)blob->low();\n+    return dist1 > dist2 ? dist1 : dist2;\n+  }\n+}\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -216,0 +216,3 @@\n+  static size_t max_distance_to_non_nmethod();\n+  static bool is_non_nmethod(address addr);\n+\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2022, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.aarch64;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.*;\n+\n+\/*\n+ * @test\n+ * @bug 8280872\n+ * @summary Far call to runtime stub should be generated with single instruction for CodeHeap up to 250MB\n+ * @library \/test\/lib \/\n+ *\n+ * @requires vm.flagless\n+ * @requires os.arch==\"aarch64\"\n+ * @requires vm.debug == false\n+ * @requires vm.compiler2.enabled\n+ *\n+ * @run driver compiler.c2.aarch64.TestFarJump\n+ *\/\n+public class TestFarJump {\n+\n+    \/\/ ADRP instruction encoding:\n+    \/\/   |31 30 29 28|27 26 25 24|23 22 21 20|19 18 17 16|15 14 13 12|11 10 09 08|07 06 05 04|03 02 01 10|\n+    \/\/   | 1|immlo| 1  0  0  0  0|                immhi                                   |     Rd       |\n+    static boolean isADRP(int encoding) {\n+        final int mask = 0b1001_1111;\n+        final int val  = 0b1001_0000;\n+        return ((encoding >> 24) & mask) == val;\n+    }\n+\n+    \/\/ Looking for adrp instruction in binary\/text assembly output:\n+    \/\/     0x0000ffff7ff1b7d0: c8ff ffd0 | 0801 1091 | 0001 1fd6\n+    \/\/     0x0000ffff6bf20ee0: adrp        x8, 0x0000ffff6bef1000\n+    static boolean containsADRP(String input) {\n+        int index = input.indexOf(\": \");\n+        if (index == -1) {\n+            return false;\n+        }\n+        input = input.substring(index + 1);\n+        if (input.contains(\"adrp\")) {\n+            return true;\n+        }\n+        Pattern pattern = Pattern.compile(\"[0-9a-f ]*\");\n+        Matcher matcher = pattern.matcher(input);\n+        while (matcher.find()) {\n+            String match = matcher.group();\n+            match = match.replace(\" \" , \"\");\n+            if (match.length() != 8) {\n+                continue;\n+            }\n+            int dump = (int)Long.parseLong(match, 16);\n+            int encoding = Integer.reverseBytes(dump);\n+            \/\/ Check the first instruction only. The raw pointer can be confused with the encoded adrp instruction:\n+            \/\/ emit_exception_handler() = far_call() + should_not_reach_here() = ADRP + ADD + BLR + DCPS1 + raw_pointer\n+            return isADRP(encoding);\n+        }\n+        return false;\n+    }\n+\n+    static void runVM(boolean bigCodeHeap) throws Exception {\n+        String className = TestFarJump.class.getName();\n+        String[] procArgs = {\n+            \"-XX:-Inline\",\n+            \"-Xcomp\",\n+            \"-Xbatch\",\n+            \"-XX:+TieredCompilation\",\n+            \"-XX:+SegmentedCodeCache\",\n+            \"-XX:CompileOnly=\" + className + \"::main\",\n+            \"-XX:ReservedCodeCacheSize=\" + (bigCodeHeap ? \"256M\" : \"200M\"),\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+PrintAssembly\",\n+            className};\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(procArgs);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        List<String> lines = output.asLines();\n+\n+        ListIterator<String> itr = lines.listIterator();\n+        while (itr.hasNext()) {\n+            String line = itr.next();\n+            if (line.contains(\"[Exception Handler]\")) {\n+                String next1 = itr.next();\n+                String next2 = itr.next();\n+                System.out.println(line);\n+                System.out.println(next1);\n+                System.out.println(next2);\n+                boolean containsADRP = containsADRP(next1) || containsADRP(next2);\n+                if (bigCodeHeap && !containsADRP) {\n+                    throw new RuntimeException(\"ADRP instruction is expected on far jump\");\n+                }\n+                if (!bigCodeHeap && containsADRP) {\n+                    throw new RuntimeException(\"for CodeHeap < 250MB the far jump is expected to be encoded with a single branch instruction\");\n+                }\n+                return;\n+            }\n+        }\n+        throw new RuntimeException(\"Assembly output: exception Handler is not found\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            \/\/ Main VM: fork VM with options\n+            runVM(true);\n+            runVM(false);\n+            return;\n+        }\n+        if (args.length > 0) {\n+            \/\/ We are in a forked VM. Just exit\n+            System.out.println(\"Ok\");\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestFarJump.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}