{"files":[{"patch":"@@ -1186,8 +1186,0 @@\n-            } else if ((tree.sym.flags() & (ABSTRACT|DEFAULT|PRIVATE)) == ABSTRACT) {\n-                if ((owner.flags() & INTERFACE) != 0) {\n-                    log.error(tree.body.pos(), Errors.IntfMethCantHaveBody);\n-                } else {\n-                    log.error(tree.pos(), Errors.AbstractMethCantHaveBody);\n-                }\n-            } else if ((tree.mods.flags & NATIVE) != 0) {\n-                log.error(tree.pos(), Errors.NativeMethCantHaveBody);\n@@ -1195,0 +1187,9 @@\n+                if ((tree.sym.flags() & (ABSTRACT|DEFAULT|PRIVATE)) == ABSTRACT) {\n+                    if ((owner.flags() & INTERFACE) != 0) {\n+                        log.error(tree.body.pos(), Errors.IntfMethCantHaveBody);\n+                    } else {\n+                        log.error(tree.pos(), Errors.AbstractMethCantHaveBody);\n+                    }\n+                } else if ((tree.mods.flags & NATIVE) != 0) {\n+                    log.error(tree.pos(), Errors.NativeMethCantHaveBody);\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8145239 8129559 8080354 8189248 8010319 8246353 8247456\n+ * @bug 8145239 8129559 8080354 8189248 8010319 8246353 8247456 8292755\n@@ -345,0 +345,14 @@\n+    public void testDefaultMethodInInterface() {\n+        assertEvalFail(\"\"\"\n+                       interface C {\n+                           public void run() {\n+                               try {\n+                                   throw IllegalStateException();\n+                               } catch (Throwable t) {\n+                                   throw new RuntimeException(t);\n+                               }\n+                           }\n+                       }\n+                       \"\"\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/jshell\/ClassesTest.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8292755\n+ * @summary Verify error recovery related to method modifiers.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main MethodModifiers\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task.Expect;\n+import toolbox.Task.OutputKind;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class MethodModifiers extends TestRunner {\n+\n+    ToolBox tb;\n+\n+    public MethodModifiers() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        MethodModifiers t = new MethodModifiers();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testNonDefaultMethodInterface() throws Exception {\n+        String code = \"\"\"\n+                      interface Test {\n+                          void test() {\n+                              try {\n+                                  unresolvable();\n+                              } catch (Throwable t) {\n+                                  throw new RuntimeException(t);\n+                              }\n+                          }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\",\n+                         \"-XDshould-stop.at=FLOW\",\n+                         \"-XDdev\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Test.java:2:17: compiler.err.intf.meth.cant.have.body\",\n+                \"Test.java:4:13: compiler.err.cant.resolve.location.args: kindname.method, unresolvable, , , (compiler.misc.location: kindname.interface, Test, null)\",\n+                \"2 errors\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testAbstractMethodWithBody() throws Exception {\n+        String code = \"\"\"\n+                      abstract class Test {\n+                          abstract void test() {\n+                              try {\n+                                  unresolvable();\n+                              } catch (Throwable t) {\n+                                  throw new RuntimeException(t);\n+                              }\n+                          }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\",\n+                         \"-XDshould-stop.at=FLOW\",\n+                         \"-XDdev\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Test.java:2:19: compiler.err.abstract.meth.cant.have.body\",\n+                \"Test.java:4:13: compiler.err.cant.resolve.location.args: kindname.method, unresolvable, , , (compiler.misc.location: kindname.class, Test, null)\",\n+                \"2 errors\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+    @Test\n+    public void testNativeMethodWithBody() throws Exception {\n+        String code = \"\"\"\n+                      class Test {\n+                          native void test() {\n+                              try {\n+                                  unresolvable();\n+                              } catch (Throwable t) {\n+                                  throw new RuntimeException(t);\n+                              }\n+                          }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\",\n+                         \"-XDshould-stop.at=FLOW\",\n+                         \"-XDdev\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Test.java:2:17: compiler.err.native.meth.cant.have.body\",\n+                \"Test.java:4:13: compiler.err.cant.resolve.location.args: kindname.method, unresolvable, , , (compiler.misc.location: kindname.class, Test, null)\",\n+                \"2 errors\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/MethodModifiers.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"}]}