{"files":[{"patch":"@@ -2018,1 +2018,0 @@\n-    debug_only( int cnt = 0; );\n@@ -2021,1 +2020,0 @@\n-      assert( cnt++ < 40, \"infinite cycle in loop optimization\" );\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8284944\n+ * @requires vm.compiler2.enabled\n+ * @summary triggers the loop optimization phase `LoopOptsCount` many times\n+ * @run main\/othervm -Xcomp -XX:-PartialPeelLoop -XX:CompileCommand=compileonly,TestMaxLoopOptsCountReached::test TestMaxLoopOptsCountReached\n+ *\/\n+\n+import java.lang.System.Logger.Level;\n+\n+public class TestMaxLoopOptsCountReached {\n+\n+    static Long a = Long.valueOf(42);\n+\n+    class A {\n+\n+        static String e(long f, boolean b, String g, Level h, String s,\n+                        Object... i) {\n+            return \"message\" + s + new String() + g;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        test(null, \"\", null, null);\n+        test(null, \"\", null, null);\n+    }\n+\n+    static void test(Integer o, String g, String name, Object obj) {\n+        for (Level q : Level.values())\n+            for (Level r : Level.values())\n+                A.e(a.longValue(), q != Level.OFF, g, null, null);\n+        for (Level q : Level.values())\n+            for (Level r : Level.values())\n+                A.e(a.longValue(), q != Level.OFF, g, null, null);\n+        for (Level q : Level.values()) {\n+            for (Level r : Level.values()) {\n+                String msg = q + \"message\";\n+                String val =\n+                        (q != Level.OFF || name != msg)\n+                                ? A.e(a.longValue(), q != Level.OFF, g, null, null, \"foo\")\n+                                : null;\n+            }\n+            for (Level r : Level.values()) {\n+                String msg = q + \"message\";\n+                String val =\n+                        (q != Level.OFF || name != msg)\n+                                ? A.e(a.longValue(), q != Level.OFF, g, null, null, \"foo\")\n+                                : null;\n+            }\n+        }\n+        for (Level q : Level.values()) {\n+            for (Level r : Level.values()) {\n+                String msg = q + \"message\";\n+                String val =\n+                        (q != Level.OFF || name != msg)\n+                                ? A.e(a.longValue(), q != Level.OFF, g, null, null, \"foo\")\n+                                : null;\n+            }\n+            for (Level r : Level.values()) {\n+                String msg = q + \"message\";\n+                String val =\n+                        (q != Level.OFF || name != msg)\n+                                ? A.e(a.longValue(), q != Level.OFF, g, null, null, \"foo\")\n+                                : null;\n+            }\n+        }\n+        for (Level q : Level.values()) {\n+            for (Level r : Level.values()) {\n+                String msg = q + \"message\";\n+                String val =\n+                        (q != Level.OFF || name != msg)\n+                                ? A.e(a.longValue(), q != Level.OFF, g, null, null, \"foo\")\n+                                : null;\n+            }\n+            for (Level r : Level.values())\n+                ;\n+        }\n+        for (Level q : Level.values()) {\n+            for (Level r : Level.values())\n+                ;\n+            for (Level r : Level.values())\n+                ;\n+        }\n+        for (Level q : Level.values()) {\n+            for (Level r : Level.values()) {\n+                String msg = q + \"message\";\n+                String val =\n+                        (q != Level.OFF || name != msg)\n+                                ? A.e(a.longValue(), q != Level.OFF, g, null, null, \"foo\")\n+                                : null;\n+            }\n+            for (Level r : Level.values())\n+                ;\n+        }\n+        for (Level q : Level.values()) {\n+            for (Level r : Level.values())\n+                ;\n+            for (Level r : Level.values())\n+                ;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMaxLoopOptsCountReached.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}