{"files":[{"patch":"@@ -93,1 +93,7 @@\n-  return is_even(value());\n+  \/\/ Do not use is_XMMRegister() here as it depends on the UseAVX setting.\n+  if (value() >= ConcreteRegisterImpl::max_fpr && value() < ConcreteRegisterImpl::max_xmm) {\n+    int base = value() - ConcreteRegisterImpl::max_fpr;\n+    return base % XMMRegisterImpl::max_slots_per_register == 0;\n+  } else {\n+    return is_even(value());   \/\/ General, float, and K registers are all two slots wide\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/vmreg_x86.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,4 +234,0 @@\n-    if (false && r->is_reg() && !r->is_concrete()) {\n-      continue;\n-    }\n-\n@@ -315,3 +311,1 @@\n-            if (b->is_stack() || b->is_concrete() || true ) {\n-              omap->set_oop( b);\n-            }\n+            omap->set_oop(b);\n@@ -320,3 +314,1 @@\n-        if (b->is_stack() || b->is_concrete() || true ) {\n-          omap->set_derived_oop( r, b);\n-        }\n+        omap->set_derived_oop(r, b);\n@@ -350,3 +342,1 @@\n-      if ( callee->is_concrete() || true ) {\n-        omap->set_callee_saved( r, callee);\n-      }\n+      omap->set_callee_saved(r, callee);\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2914,0 +2914,10 @@\n+  if (OptoReg::is_reg(def_reg)) {\n+    VMReg vmreg = OptoReg::as_VMReg(def_reg);\n+    if (vmreg->is_reg() && !vmreg->is_concrete() && !vmreg->prev()->is_concrete()) {\n+      \/\/ This is one of the high slots of a vector register.\n+      \/\/ ScheduleAndBundle already checked there are no live wide\n+      \/\/ vectors in this method so it can be safely ignored.\n+      return;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8275847\n+ * @requires vm.compiler2.enabled\n+ * @summary Test that small method with runtime calls can be scheduled.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestScheduleSmallMethod\n+ *\/\n+public class TestScheduleSmallMethod {\n+\n+    public static void main(String[] args) {\n+        TestFramework framework = new TestFramework();\n+        Scenario schedulerOn = new Scenario(0, \"-XX:+OptoScheduling\");\n+        Scenario schedulerOff = new Scenario(1, \"-XX:-OptoScheduling\");\n+        framework.addScenarios(schedulerOn, schedulerOff).start();\n+    }\n+\n+    @Test\n+    public double testSmallMethodTwoRuntimeCalls(double value) {\n+        \/\/ The two intrinsified Math calls below caused the scheduler to\n+        \/\/ bail out with \"too many D-U pinch points\". See bug 8275847.\n+        return Math.log(Math.sin(value));\n+    }\n+\n+    @Run(test = \"testSmallMethodTwoRuntimeCalls\")\n+    public void checkTestSmallMethodTwoRuntimeCalls() throws Throwable {\n+        Asserts.assertLessThan(testSmallMethodTwoRuntimeCalls(Math.PI\/2), 0.00001);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestScheduleSmallMethod.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}