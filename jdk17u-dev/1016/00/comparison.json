{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -36,4 +35,2 @@\n-        failures += Tests.test(\"StrictMath.atan2(double, double)\", input1, input2,\n-                               StrictMath.atan2(input1, input2), expected);\n-        failures += Tests.test(\"Math.atan2(double, double)\", input1, input2,\n-                               Math.atan2(input1, input2), expected);\n+        failures += Tests.test(\"StrictMath.atan2\", input1, input2, StrictMath::atan2, expected);\n+        failures += Tests.test(\"Math.atan2\",       input1, input2, Math::atan2,       expected);\n@@ -58,1 +55,1 @@\n-    public static void main(String [] argv) {\n+    public static void main(String... argv) {\n","filename":"test\/jdk\/java\/lang\/Math\/Atan2Tests.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,2 @@\n-        failures += Tests.test(\"Math.ceil\",  input, Math.ceil(input),   expected);\n-        failures += Tests.test(\"StrictMath.ceil\",  input, StrictMath.ceil(input), expected);\n+        failures += Tests.test(\"Math.ceil\",        input, Math::ceil,       expected);\n+        failures += Tests.test(\"StrictMath.ceil\",  input, StrictMath::ceil, expected);\n@@ -40,2 +40,2 @@\n-        failures += Tests.test(\"Math.floor\",  input, Math.floor(input),   expected);\n-        failures += Tests.test(\"StrictMath.floor\",  input, StrictMath.floor(input), expected);\n+        failures += Tests.test(\"Math.floor\",        input, Math::floor,       expected);\n+        failures += Tests.test(\"StrictMath.floor\",  input, StrictMath::floor, expected);\n","filename":"test\/jdk\/java\/lang\/Math\/CeilAndFloorTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @author Joseph D. Darcy\n@@ -49,11 +48,4 @@\n-        double minus_input = -input;\n-        double minus_expected = -expected;\n-\n-        failures+=Tests.test(\"Math.cbrt(double)\", input,\n-                             Math.cbrt(input), expected);\n-        failures+=Tests.test(\"Math.cbrt(double)\", minus_input,\n-                             Math.cbrt(minus_input), minus_expected);\n-        failures+=Tests.test(\"StrictMath.cbrt(double)\", input,\n-                             StrictMath.cbrt(input), expected);\n-        failures+=Tests.test(\"StrictMath.cbrt(double)\", minus_input,\n-                             StrictMath.cbrt(minus_input), minus_expected);\n+        failures+=Tests.test(\"Math.cbrt\",        input, Math::cbrt,        expected);\n+        failures+=Tests.test(\"Math.cbrt\",       -input, Math::cbrt,       -expected);\n+        failures+=Tests.test(\"StrictMath.cbrt\",  input, StrictMath::cbrt,  expected);\n+        failures+=Tests.test(\"StrictMath.cbrt\", -input, StrictMath::cbrt, -expected);\n@@ -327,1 +319,1 @@\n-    public static void main(String argv[]) {\n+    public static void main(String... argv) {\n","filename":"test\/jdk\/java\/lang\/Math\/CubeRootTests.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,2 @@\n-        failures += Tests.test(\"StrictMath.exp\", input, StrictMath.exp(input), expected);\n-        failures += Tests.test(\"Math.exp\", input, Math.exp(input), expected);\n+        failures += Tests.test(\"StrictMath.exp\", input, StrictMath::exp, expected);\n+        failures += Tests.test(\"Math.exp\",       input, Math::exp,       expected);\n","filename":"test\/jdk\/java\/lang\/Math\/ExpCornerCaseTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -217,1 +216,1 @@\n-    public static void main(String argv[]) {\n+    public static void main(String... argv) {\n","filename":"test\/jdk\/java\/lang\/Math\/Expm1Tests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -368,4 +368,2 @@\n-        failures += Tests.test(\"Math.fma(double)\", input1, input2, input3,\n-                               Math.fma(input1, input2, input3), expected);\n-        failures += Tests.test(\"StrictMath.fma(double)\", input1, input2, input3,\n-                               StrictMath.fma(input1, input2, input3), expected);\n+        failures += Tests.test(\"Math.fma\",       input1, input2, input3, Math::fma,       expected);\n+        failures += Tests.test(\"StrictMath.fma\", input1, input2, input3, StrictMath::fma, expected);\n@@ -374,4 +372,2 @@\n-        failures += Tests.test(\"Math.fma(double)\", input2, input1, input3,\n-                               Math.fma(input2, input1, input3), expected);\n-        failures += Tests.test(\"StrictMath.fma(double)\", input2, input1, input3,\n-                               StrictMath.fma(input2, input1, input3), expected);\n+        failures += Tests.test(\"Math.fma\",       input2, input1, input3, Math::fma,       expected);\n+        failures += Tests.test(\"StrictMath.fma\", input2, input1, input3, StrictMath::fma, expected);\n","filename":"test\/jdk\/java\/lang\/Math\/FusedMultiplyAddTests.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -36,0 +35,14 @@\n+    public static void main(String... argv) {\n+        int failures = 0;\n+\n+        failures += testSinh();\n+        failures += testCosh();\n+        failures += testTanh();\n+\n+        if (failures > 0) {\n+            System.err.println(\"Testing the hyperbolic functions incurred \"\n+                               + failures + \" failures.\");\n+            throw new RuntimeException();\n+        }\n+    }\n+\n@@ -358,6 +371,2 @@\n-        failures += Tests.testTolerance(\"Math.sinh(double)\",\n-                                        input, Math.sinh(input),\n-                                        expected, tolerance);\n-        failures += Tests.testTolerance(\"Math.sinh(double)\",\n-                                        -input, Math.sinh(-input),\n-                                        -expected, tolerance);\n+        failures += Tests.testTolerance(\"Math.sinh\",        input, Math::sinh,        expected, tolerance);\n+        failures += Tests.testTolerance(\"Math.sinh\",       -input, Math::sinh,       -expected, tolerance);\n@@ -365,6 +374,2 @@\n-        failures += Tests.testTolerance(\"StrictMath.sinh(double)\",\n-                                        input, StrictMath.sinh(input),\n-                                        expected, tolerance);\n-        failures += Tests.testTolerance(\"StrictMath.sinh(double)\",\n-                                        -input, StrictMath.sinh(-input),\n-                                        -expected, tolerance);\n+        failures += Tests.testTolerance(\"StrictMath.sinh\",  input, StrictMath::sinh,  expected, tolerance);\n+        failures += Tests.testTolerance(\"StrictMath.sinh\", -input, StrictMath::sinh, -expected, tolerance);\n@@ -378,13 +383,5 @@\n-        failures += Tests.testUlpDiff(\"Math.sinh(double)\",\n-                                      input, Math.sinh(input),\n-                                      expected, ulps);\n-        failures += Tests.testUlpDiff(\"Math.sinh(double)\",\n-                                      -input, Math.sinh(-input),\n-                                      -expected, ulps);\n-\n-        failures += Tests.testUlpDiff(\"StrictMath.sinh(double)\",\n-                                      input, StrictMath.sinh(input),\n-                                      expected, ulps);\n-        failures += Tests.testUlpDiff(\"StrictMath.sinh(double)\",\n-                                      -input, StrictMath.sinh(-input),\n-                                      -expected, ulps);\n+        failures += Tests.testUlpDiff(\"Math.sinh\",        input, Math::sinh,        expected, ulps);\n+        failures += Tests.testUlpDiff(\"Math.sinh\",       -input, Math::sinh,       -expected, ulps);\n+\n+        failures += Tests.testUlpDiff(\"StrictMath.sinh\",  input, StrictMath::sinh,  expected, ulps);\n+        failures += Tests.testUlpDiff(\"StrictMath.sinh\", -input, StrictMath::sinh, -expected, ulps);\n@@ -394,1 +391,0 @@\n-\n@@ -597,1 +593,0 @@\n-\n@@ -736,13 +731,5 @@\n-        failures += Tests.testUlpDiff(\"Math.cosh(double)\",\n-                                      input, Math.cosh(input),\n-                                      expected, ulps);\n-        failures += Tests.testUlpDiff(\"Math.cosh(double)\",\n-                                      -input, Math.cosh(-input),\n-                                      expected, ulps);\n-\n-        failures += Tests.testUlpDiff(\"StrictMath.cosh(double)\",\n-                                      input, StrictMath.cosh(input),\n-                                      expected, ulps);\n-        failures += Tests.testUlpDiff(\"StrictMath.cosh(double)\",\n-                                      -input, StrictMath.cosh(-input),\n-                                      expected, ulps);\n+        failures += Tests.testUlpDiff(\"Math.cosh\",        input, Math::cosh,       expected, ulps);\n+        failures += Tests.testUlpDiff(\"Math.cosh\",       -input, Math::cosh,       expected, ulps);\n+\n+        failures += Tests.testUlpDiff(\"StrictMath.cosh\",  input, StrictMath::cosh, expected, ulps);\n+        failures += Tests.testUlpDiff(\"StrictMath.cosh\", -input, StrictMath::cosh, expected, ulps);\n@@ -752,1 +739,0 @@\n-\n@@ -955,1 +941,0 @@\n-\n@@ -1010,6 +995,2 @@\n-        failures += Tests.testTolerance(\"Math.tanh(double\",\n-                                        input, Math.tanh(input),\n-                                        expected, tolerance);\n-        failures += Tests.testTolerance(\"Math.tanh(double\",\n-                                        -input, Math.tanh(-input),\n-                                        -expected, tolerance);\n+        failures += Tests.testTolerance(\"Math.tanh\",       input, Math::tanh,         expected, tolerance);\n+        failures += Tests.testTolerance(\"Math.tanh\",      -input, Math::tanh,        -expected, tolerance);\n@@ -1017,6 +998,2 @@\n-        failures += Tests.testTolerance(\"StrictMath.tanh(double\",\n-                                        input, StrictMath.tanh(input),\n-                                        expected, tolerance);\n-        failures += Tests.testTolerance(\"StrictMath.tanh(double\",\n-                                        -input, StrictMath.tanh(-input),\n-                                        -expected, tolerance);\n+        failures += Tests.testTolerance(\"StrictMath.tanh\",  input, StrictMath::tanh,  expected, tolerance);\n+        failures += Tests.testTolerance(\"StrictMath.tanh\", -input, StrictMath::tanh, -expected, tolerance);\n@@ -1031,19 +1008,2 @@\n-        failures += Tests.testUlpDiffWithAbsBound(\"Math.tanh(double)\",\n-                                                  input, Math.tanh(input),\n-                                                  expected, ulps, 1.0);\n-        failures += Tests.testUlpDiffWithAbsBound(\"Math.tanh(double)\",\n-                                                  -input, Math.tanh(-input),\n-                                                  -expected, ulps, 1.0);\n-\n-        failures += Tests.testUlpDiffWithAbsBound(\"StrictMath.tanh(double)\",\n-                                                  input, StrictMath.tanh(input),\n-                                                  expected, ulps, 1.0);\n-        failures += Tests.testUlpDiffWithAbsBound(\"StrictMath.tanh(double)\",\n-                                                  -input, StrictMath.tanh(-input),\n-                                                  -expected, ulps, 1.0);\n-        return failures;\n-    }\n-\n-\n-    public static void main(String argv[]) {\n-        int failures = 0;\n+        failures += Tests.testUlpDiffWithAbsBound(\"Math.tanh\",       input,  Math::tanh,       expected, ulps, 1.0);\n+        failures += Tests.testUlpDiffWithAbsBound(\"Math.tanh\",      -input,  Math::tanh,      -expected, ulps, 1.0);\n@@ -1051,9 +1011,3 @@\n-        failures += testSinh();\n-        failures += testCosh();\n-        failures += testTanh();\n-\n-        if (failures > 0) {\n-            System.err.println(\"Testing the hyperbolic functions incurred \"\n-                               + failures + \" failures.\");\n-            throw new RuntimeException();\n-        }\n+        failures += Tests.testUlpDiffWithAbsBound(\"StrictMath.tanh\",  input, StrictMath::tanh,  expected, ulps, 1.0);\n+        failures += Tests.testUlpDiffWithAbsBound(\"StrictMath.tanh\", -input, StrictMath::tanh, -expected, ulps, 1.0);\n+        return failures;\n@@ -1061,1 +1015,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/Math\/HyperbolicTests.java","additions":38,"deletions":85,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @author Joseph D. Darcy\n@@ -54,1 +53,0 @@\n-\n@@ -191,1 +189,0 @@\n-\n@@ -197,1 +194,0 @@\n-\n@@ -224,2 +220,2 @@\n-        for(int i = -1; i <= 1; i+=2) {\n-            for(int j = -1; j <= 1; j+=2) {\n+        for(int i = -1; i <= 1; i += 2) {\n+            for(int j = -1; j <= 1; j += 2) {\n@@ -228,9 +224,5 @@\n-                failures += Tests.testUlpDiff(\"Math.hypot\", x, y,\n-                                              Math.hypot(x, y), expected, ulps);\n-                failures += Tests.testUlpDiff(\"Math.hypot\", y, x,\n-                                              Math.hypot(y, x ), expected, ulps);\n-\n-                failures += Tests.testUlpDiff(\"StrictMath.hypot\", x, y,\n-                                              StrictMath.hypot(x, y), expected, ulps);\n-                failures += Tests.testUlpDiff(\"StrictMath.hypot\", y, x,\n-                                              StrictMath.hypot(y, x), expected, ulps);\n+                failures += Tests.testUlpDiff(\"Math.hypot\",       x, y, Math::hypot,       expected, ulps);\n+                failures += Tests.testUlpDiff(\"Math.hypot\",       y, x, Math::hypot,       expected, ulps);\n+\n+                failures += Tests.testUlpDiff(\"StrictMath.hypot\", x, y, StrictMath::hypot, expected, ulps);\n+                failures += Tests.testUlpDiff(\"StrictMath.hypot\", y, x, StrictMath::hypot, expected, ulps);\n@@ -243,1 +235,1 @@\n-    public static void main(String argv[]) {\n+    public static void main(String... argv) {\n@@ -255,1 +247,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/Math\/HypotTests.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,2 @@\n-        failures += Tests.test(\"Math.cos\",       input, Math.cos(input),       expected);\n-        failures += Tests.test(\"StrictMath.cos\", input, StrictMath.cos(input), expected);\n+        failures += Tests.test(\"Math.cos\",       input, Math::cos,       expected);\n+        failures += Tests.test(\"StrictMath.cos\", input, StrictMath::cos, expected);\n@@ -85,2 +85,2 @@\n-        failures += Tests.test(\"Math.acos\",       input, Math.acos(input),       expected);\n-        failures += Tests.test(\"StrictMath.acos\", input, StrictMath.acos(input), expected);\n+        failures += Tests.test(\"Math.acos\",       input, Math::acos,       expected);\n+        failures += Tests.test(\"StrictMath.acos\", input, StrictMath::acos, expected);\n@@ -106,2 +106,2 @@\n-        failures += Tests.test(\"Math.atan\",       input, Math.atan(input),       expected);\n-        failures += Tests.test(\"StrictMath.atan\", input, StrictMath.atan(input), expected);\n+        failures += Tests.test(\"Math.atan\",       input, Math::atan,       expected);\n+        failures += Tests.test(\"StrictMath.atan\", input, StrictMath::atan, expected);\n@@ -126,2 +126,2 @@\n-        failures += Tests.test(\"Math.log\",       input, Math.log(input),       expected);\n-        failures += Tests.test(\"StrictMath.log\", input, StrictMath.log(input), expected);\n+        failures += Tests.test(\"Math.log\",       input, Math::log,       expected);\n+        failures += Tests.test(\"StrictMath.log\", input, StrictMath::log, expected);\n","filename":"test\/jdk\/java\/lang\/Math\/Ieee754SpecialCaseTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @author Joseph D. Darcy\n@@ -367,1 +366,1 @@\n-                             Math.nextAfter(start, direction), expected);\n+                             Math::nextAfter, expected);\n@@ -369,1 +368,1 @@\n-                             Math.nextAfter(minus_start, minus_direction), minus_expected);\n+                             Math::nextAfter, minus_expected);\n@@ -372,1 +371,1 @@\n-                             StrictMath.nextAfter(start, direction), expected);\n+                             StrictMath::nextAfter, expected);\n@@ -374,1 +373,1 @@\n-                             StrictMath.nextAfter(minus_start, minus_direction), minus_expected);\n+                             StrictMath::nextAfter, minus_expected);\n@@ -589,1 +588,1 @@\n-                                 testCases[i][0], Math.nextUp(testCases[i][0]), testCases[i][1]);\n+                                 testCases[i][0], Math::nextUp, testCases[i][1]);\n@@ -592,1 +591,1 @@\n-                                 testCases[i][0], StrictMath.nextUp(testCases[i][0]), testCases[i][1]);\n+                                 testCases[i][0], StrictMath::nextUp, testCases[i][1]);\n@@ -668,1 +667,1 @@\n-                                 testCases[i][0], Math.nextDown(testCases[i][0]), testCases[i][1]);\n+                                 testCases[i][0], Math::nextDown, testCases[i][1]);\n@@ -671,1 +670,1 @@\n-                                 testCases[i][0], StrictMath.nextDown(testCases[i][0]), testCases[i][1]);\n+                                 testCases[i][0], StrictMath::nextDown, testCases[i][1]);\n@@ -909,1 +908,1 @@\n-                                             Math.copySign(testCases[i][m], testCases[j][n]),\n+                                             Math::copySign,\n@@ -914,1 +913,1 @@\n-                                             StrictMath.copySign(testCases[i][m], testCases[j][n]),\n+                                             StrictMath::copySign,\n@@ -935,1 +934,1 @@\n-                                         StrictMath.copySign(testCases[i][m], NaNs[j]),\n+                                         StrictMath::copySign,\n@@ -1387,1 +1386,1 @@\n-                             Math.ulp(d), expected);\n+                             Math::ulp, expected);\n@@ -1389,1 +1388,1 @@\n-                             Math.ulp(minus_d), expected);\n+                             Math::ulp, expected);\n@@ -1391,1 +1390,1 @@\n-                             StrictMath.ulp(d), expected);\n+                             StrictMath::ulp, expected);\n@@ -1393,1 +1392,1 @@\n-                             StrictMath.ulp(minus_d), expected);\n+                             StrictMath::ulp, expected);\n@@ -1667,1 +1666,1 @@\n-                                 testCases[i][0], Math.signum(testCases[i][0]), testCases[i][1]);\n+                                 testCases[i][0], Math::signum, testCases[i][1]);\n@@ -1669,1 +1668,1 @@\n-                                 testCases[i][0], StrictMath.signum(testCases[i][0]), testCases[i][1]);\n+                                 testCases[i][0], StrictMath::signum, testCases[i][1]);\n@@ -1676,1 +1675,1 @@\n-    public static void main(String argv[]) {\n+    public static void main(String... argv) {\n","filename":"test\/jdk\/java\/lang\/Math\/IeeeRecommendedTests.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -44,5 +43,2 @@\n-        failures+=Tests.test(\"Math.log10(double)\", input,\n-                             Math.log10(input), expected);\n-\n-        failures+=Tests.test(\"StrictMath.log10(double)\", input,\n-                             StrictMath.log10(input), expected);\n+        failures+=Tests.test(\"Math.log10\",       input, Math::log10,       expected);\n+        failures+=Tests.test(\"StrictMath.log10\", input, StrictMath::log10, expected);\n@@ -124,2 +120,0 @@\n-\n-\n@@ -208,1 +202,1 @@\n-    public static void main(String argv[]) {\n+    public static void main(String... argv) {\n@@ -219,1 +213,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/Math\/Log10Tests.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @author Joseph D. Darcy\n@@ -170,1 +169,0 @@\n-\n@@ -172,1 +170,0 @@\n-\n@@ -188,6 +185,2 @@\n-        failures += Tests.testUlpDiff(\"Math.lop1p(double\",\n-                                      input, Math.log1p(input),\n-                                      expected, ulps);\n-        failures += Tests.testUlpDiff(\"StrictMath.log1p(double\",\n-                                      input, StrictMath.log1p(input),\n-                                      expected, ulps);\n+        failures += Tests.testUlpDiff(\"Math.lop1p\",       input, Math::log1p,       expected, ulps);\n+        failures += Tests.testUlpDiff(\"StrictMath.log1p\", input, StrictMath::log1p, expected, ulps);\n@@ -197,1 +190,1 @@\n-    public static void main(String argv[]) {\n+    public static void main(String... argv) {\n","filename":"test\/jdk\/java\/lang\/Math\/Log1pTests.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -38,4 +37,2 @@\n-        failures += Tests.test(\"StrictMath.pow(double, double)\", input1, input2,\n-                               StrictMath.pow(input1, input2), expected);\n-        failures += Tests.test(\"Math.pow(double, double)\", input1, input2,\n-                               Math.pow(input1, input2), expected);\n+        failures += Tests.test(\"StrictMath.pow\", input1, input2, StrictMath::pow, expected);\n+        failures += Tests.test(\"Math.pow\",       input1, input2, Math::pow,       expected);\n@@ -45,1 +42,0 @@\n-\n@@ -48,2 +44,2 @@\n-        failures += Tests.test(\"StrictMath.pow(double, double)\", input1, input2,\n-                               StrictMath.pow(input1, input2), expected);\n+        failures += Tests.test(\"StrictMath.pow\", input1, input2,\n+                               StrictMath::pow, expected);\n@@ -55,2 +51,2 @@\n-        failures += Tests.test(\"Math.pow(double, double)\", input1, input2,\n-                               Math.pow(input1, input2), expected);\n+        failures += Tests.test(\"Math.pow\", input1, input2,\n+                               Math::pow, expected);\n@@ -61,2 +57,0 @@\n-        double smResult = StrictMath.pow(input1, input2);\n-        double mResult = Math.pow(input1, input2);\n@@ -65,2 +59,1 @@\n-            input1, input2, mResult, smResult, 2.0\n-        );\n+            input1, input2, Math::pow, StrictMath.pow(input1, input2), 2.0);\n@@ -316,1 +309,1 @@\n-    public static void main(String [] argv) {\n+    public static void main(String... argv) {\n","filename":"test\/jdk\/java\/lang\/Math\/PowTests.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,6 +35,4 @@\n-        failures += Tests.test(\"Math.rint\",  input, Math.rint(input),   expected);\n-        failures += Tests.test(\"Math.rint\", -input, Math.rint(-input), -expected);\n-        failures += Tests.test(\"StrictMath.rint\",\n-                               input, StrictMath.rint(input),   expected);\n-        failures += Tests.test(\"StrictMath.rint\", -input,\n-                               StrictMath.rint(-input), -expected);\n+        failures += Tests.test(\"Math.rint\",        input, Math::rint,        expected);\n+        failures += Tests.test(\"Math.rint\",       -input, Math::rint,       -expected);\n+        failures += Tests.test(\"StrictMath.rint\",  input, StrictMath::rint,  expected);\n+        failures += Tests.test(\"StrictMath.rint\", -input, StrictMath::rint, -expected);\n@@ -44,2 +42,1 @@\n-\n-    public static void main(String args[]) {\n+    public static void main(String... args) {\n@@ -100,1 +97,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/Math\/Rint.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,2 +67,2 @@\n-        failures += Tests.test(\"Math.round\",        input, Math.round(input),       expected);\n-        failures += Tests.test(\"StrictMath.round\",  input, StrictMath.round(input), expected);\n+        failures += Tests.test(\"Math.round\",        input, Math::round,       expected);\n+        failures += Tests.test(\"StrictMath.round\",  input, StrictMath::round, expected);\n@@ -148,14 +148,8 @@\n-        failures += Tests.test(\"Math.round\", Double.NaN, Math.round(Double.NaN), 0.0);\n-        failures += Tests.test(\"Math.round\", Double.POSITIVE_INFINITY,\n-                Math.round(Double.POSITIVE_INFINITY), Long.MAX_VALUE);\n-        failures += Tests.test(\"Math.round\", Double.NEGATIVE_INFINITY,\n-                Math.round(Double.NEGATIVE_INFINITY), Long.MIN_VALUE);\n-        failures += Tests.test(\"Math.round\", -(double)Long.MIN_VALUE,\n-                Math.round(-(double)Long.MIN_VALUE), Long.MAX_VALUE);\n-        failures += Tests.test(\"Math.round\", (double) Long.MIN_VALUE,\n-                Math.round((double) Long.MIN_VALUE), Long.MIN_VALUE);\n-        failures += Tests.test(\"Math.round\", 0, Math.round(0), 0.0);\n-        failures += Tests.test(\"Math.round\", Double.MIN_VALUE,\n-                Math.round(Double.MIN_VALUE), 0.0);\n-        failures += Tests.test(\"Math.round\", -Double.MIN_VALUE,\n-                Math.round(-Double.MIN_VALUE), 0.0);\n+        failures += Tests.test(\"Math.round\", Double.NaN,               Math::round, 0.0);\n+        failures += Tests.test(\"Math.round\", Double.POSITIVE_INFINITY, Math::round, Long.MAX_VALUE);\n+        failures += Tests.test(\"Math.round\", Double.NEGATIVE_INFINITY, Math::round, Long.MIN_VALUE);\n+        failures += Tests.test(\"Math.round\", -(double)Long.MIN_VALUE,  Math::round, Long.MAX_VALUE);\n+        failures += Tests.test(\"Math.round\", (double) Long.MIN_VALUE,  Math::round, Long.MIN_VALUE);\n+        failures += Tests.test(\"Math.round\", 0,                        Math::round, 0.0);\n+        failures += Tests.test(\"Math.round\", Double.MIN_VALUE,         Math::round, 0.0);\n+        failures += Tests.test(\"Math.round\", -Double.MIN_VALUE,        Math::round, 0.0);\n","filename":"test\/jdk\/java\/lang\/Math\/RoundTests.java","additions":11,"deletions":17,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- * @author Vivek Deshpande\n@@ -1505,1 +1504,1 @@\n-        failures += Tests.testBounds(\"Math.sin\", input, Math.sin(input), bound1, bound2);\n+        failures += Tests.testBounds(\"Math.sin\", input, Math::sin, bound1, bound2);\n@@ -2924,1 +2923,1 @@\n-        failures += Tests.testBounds(\"Math.cos\", input, Math.cos(input), bound1, bound2);\n+        failures += Tests.testBounds(\"Math.cos\", input, Math::cos, bound1, bound2);\n","filename":"test\/jdk\/java\/lang\/Math\/SinCosCornerCasesTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -36,4 +35,2 @@\n-        failures += Tests.testUlpDiff(\"StrictMath.tan(double, double)\", input,\n-                               StrictMath.tan(input), expected, ulps);\n-        failures += Tests.testUlpDiff(\"Math.tan(double, double)\", input,\n-                               Math.tan(input), expected, ulps);\n+        failures += Tests.testUlpDiff(\"StrictMath.tan\", input, StrictMath::tan, expected, ulps);\n+        failures += Tests.testUlpDiff(\"Math.tan\",       input, Math::tan,       expected, ulps);\n@@ -176,1 +173,1 @@\n-    public static void main(String [] argv) {\n+    public static void main(String... argv) {\n","filename":"test\/jdk\/java\/lang\/Math\/TanTests.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,4 @@\n+import java.util.function.DoubleBinaryOperator;\n+import java.util.function.DoubleUnaryOperator;\n+import java.util.function.DoubleToIntFunction;\n+\n@@ -238,2 +242,1 @@\n-        }\n-        else\n+        } else {\n@@ -241,0 +244,1 @@\n+        }\n@@ -251,2 +255,1 @@\n-        }\n-        else\n+        } else {\n@@ -254,0 +257,1 @@\n+        }\n@@ -294,0 +298,7 @@\n+    public static int test(String testName,\n+                           double input,\n+                           DoubleToIntFunction func,\n+                           int expected) {\n+        return test(testName, input, func.applyAsInt(input), expected);\n+    }\n+\n@@ -302,2 +313,1 @@\n-        }\n-        else\n+        } else {\n@@ -305,0 +315,1 @@\n+        }\n@@ -315,2 +326,1 @@\n-        }\n-        else\n+        } else {\n@@ -318,0 +328,1 @@\n+        }\n@@ -320,0 +331,6 @@\n+    public static int test(String testName,\n+                           double input,\n+                           DoubleUnaryOperator func,\n+                           double expected) {\n+        return test(testName, input, func.applyAsDouble(input), expected);\n+    }\n@@ -329,2 +346,1 @@\n-        }\n-        else\n+        } else {\n@@ -332,0 +348,1 @@\n+        }\n@@ -344,2 +361,1 @@\n-        }\n-        else\n+        } else {\n@@ -347,0 +363,8 @@\n+        }\n+    }\n+\n+    public static int test(String testName,\n+                           double input1, double input2,\n+                           DoubleBinaryOperator func,\n+                           double expected) {\n+        return test(testName, input1, input2, func.applyAsDouble(input1, input2), expected);\n@@ -359,2 +383,1 @@\n-        }\n-        else\n+        } else {\n@@ -362,0 +385,1 @@\n+        }\n@@ -374,2 +398,1 @@\n-        }\n-        else\n+        } else {\n@@ -377,0 +400,1 @@\n+        }\n@@ -389,2 +413,1 @@\n-        }\n-        else\n+        } else {\n@@ -392,0 +415,1 @@\n+        }\n@@ -405,2 +429,1 @@\n-        }\n-        else\n+        } else {\n@@ -408,0 +431,13 @@\n+        }\n+    }\n+\n+    @FunctionalInterface\n+    public interface DoubleTernaryOperator {\n+        double applyAsDouble(double input1, double input2, double input3);\n+    }\n+\n+    public static int test(String testName,\n+                           double input1, double input2, double input3,\n+                           DoubleTernaryOperator func, double expected) {\n+        return test(testName, input1, input2, input3, func.applyAsDouble(input1, input2, input3), expected);\n+\n@@ -421,2 +457,1 @@\n-        }\n-        else\n+        } else {\n@@ -424,0 +459,1 @@\n+        }\n@@ -445,2 +481,1 @@\n-                }\n-                else\n+                } else {\n@@ -448,0 +483,1 @@\n+                }\n@@ -453,0 +489,5 @@\n+    public static int testUlpDiff(String testName, double input,\n+                                  DoubleUnaryOperator func, double expected, double ulps) {\n+        return testUlpDiff(testName, input, func.applyAsDouble(input), expected, ulps);\n+    }\n+\n@@ -467,0 +508,5 @@\n+    public static int testUlpDiff(String testName, double input1, double input2,\n+                                  DoubleBinaryOperator func, double expected, double ulps) {\n+        return testUlpDiff(testName, input1, input2, func.applyAsDouble(input1, input2), expected, ulps);\n+    }\n+\n@@ -484,0 +530,8 @@\n+    public static int testUlpDiffWithAbsBound(String testName, double input,\n+                                              DoubleUnaryOperator func, double expected,\n+                                              double ulps, double absBound) {\n+        return testUlpDiffWithAbsBound(testName, input,\n+                                       func.applyAsDouble(input), expected,\n+                                       ulps, absBound);\n+    }\n+\n@@ -509,0 +563,8 @@\n+    public static int testUlpDiffWithLowerBound(String testName, double input,\n+                                                DoubleUnaryOperator func, double expected,\n+                                                double ulps, double lowerBound) {\n+        return testUlpDiffWithLowerBound(testName, input,\n+                                         func.applyAsDouble(input), expected,\n+                                         ulps, lowerBound);\n+    }\n+\n@@ -516,1 +578,1 @@\n-        } else\n+        } else {\n@@ -518,0 +580,1 @@\n+        }\n@@ -531,0 +594,5 @@\n+    public static int testTolerance(String testName, double input,\n+                                    DoubleUnaryOperator func, double expected, double tolerance) {\n+        return testTolerance(testName, input, func.applyAsDouble(input), expected, tolerance);\n+\n+    }\n@@ -547,2 +615,1 @@\n-        }\n-        else\n+        } else {\n@@ -550,0 +617,1 @@\n+        }\n@@ -554,0 +622,5 @@\n+    public static int testBounds(String testName, double input, DoubleUnaryOperator func,\n+                                 double bound1, double bound2) {\n+        return testBounds(testName, input, func.applyAsDouble(input), bound1, bound2);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/Math\/Tests.java","additions":101,"deletions":28,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n- * @author Joseph D. Darcy\n@@ -129,2 +128,2 @@\n-        failures += Tests.testBounds(\"Math.exp\",       input, Math.exp(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.exp\", input, StrictMath.exp(input), expected, out);\n+        failures += Tests.testBounds(\"Math.exp\",       input, Math::exp,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.exp\", input, StrictMath::exp, expected, out);\n@@ -161,2 +160,2 @@\n-        failures += Tests.testBounds(\"Math.log\",       input, Math.log(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.log\", input, StrictMath.log(input), expected, out);\n+        failures += Tests.testBounds(\"Math.log\",       input, Math::log,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.log\", input, StrictMath::log, expected, out);\n@@ -194,2 +193,2 @@\n-        failures += Tests.testBounds(\"Math.sin\",       input, Math.sin(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.sin\", input, StrictMath.sin(input), expected, out);\n+        failures += Tests.testBounds(\"Math.sin\",       input, Math::sin,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.sin\", input, StrictMath::sin, expected, out);\n@@ -226,2 +225,2 @@\n-        failures += Tests.testBounds(\"Math.asin\",       input, Math.asin(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.asin\", input, StrictMath.asin(input), expected, out);\n+        failures += Tests.testBounds(\"Math.asin\",       input, Math::asin,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.asin\", input, StrictMath::asin, expected, out);\n@@ -259,2 +258,2 @@\n-        failures += Tests.testBounds(\"Math.cos\",       input, Math.cos(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.cos\", input, StrictMath.cos(input), expected, out);\n+        failures += Tests.testBounds(\"Math.cos\",       input, Math::cos,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.cos\", input, StrictMath::cos, expected, out);\n@@ -283,2 +282,2 @@\n-        failures += Tests.testBounds(\"Math.acos\",       input, Math.acos(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.acos\", input, StrictMath.acos(input), expected, out);\n+        failures += Tests.testBounds(\"Math.acos\",       input, Math::acos,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.acos\", input, StrictMath::acos, expected, out);\n@@ -312,2 +311,2 @@\n-        failures += Tests.testBounds(\"Math.tan\",       input, Math.tan(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.tan\", input, StrictMath.tan(input), expected, out);\n+        failures += Tests.testBounds(\"Math.tan\",       input, Math::tan,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.tan\", input, StrictMath::tan, expected, out);\n@@ -344,2 +343,2 @@\n-        failures += Tests.testBounds(\"Math.atan\",       input, Math.atan(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.atan\", input, StrictMath.atan(input), expected, out);\n+        failures += Tests.testBounds(\"Math.atan\",       input, Math::atan,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.atan\", input, StrictMath::atan, expected, out);\n@@ -370,2 +369,2 @@\n-        failures += Tests.testBounds(\"Math.pow2\",       input, Math.pow(2, input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.pow2\", input, StrictMath.pow(2, input), expected, out);\n+        failures += Tests.testBounds(\"Math.pow2\",       input, d -> Math.pow(2, d),       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.pow2\", input, d -> StrictMath.pow(2, d), expected, out);\n@@ -403,2 +402,2 @@\n-        failures += Tests.testBounds(\"Math.sinh\",       input, Math.sinh(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.sinh\", input, StrictMath.sinh(input), expected, out);\n+        failures += Tests.testBounds(\"Math.sinh\",       input, Math::sinh,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.sinh\", input, StrictMath::sinh, expected, out);\n@@ -431,2 +430,2 @@\n-        failures += Tests.testBounds(\"Math.cosh\",       input, Math.cosh(input),       expected, out);\n-        failures += Tests.testBounds(\"StrictMath.cosh\", input, StrictMath.cosh(input), expected, out);\n+        failures += Tests.testBounds(\"Math.cosh\",       input, Math::cosh,       expected, out);\n+        failures += Tests.testBounds(\"StrictMath.cosh\", input, StrictMath::cosh, expected, out);\n","filename":"test\/jdk\/java\/lang\/Math\/WorstCaseTests.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n- * @author Joseph D. Darcy\n@@ -74,1 +73,1 @@\n-                             StrictMath.cbrt(input), expected);\n+                             StrictMath::cbrt, expected);\n@@ -76,1 +75,1 @@\n-                             StrictMath.cbrt(minus_input), minus_expected);\n+                             StrictMath::cbrt, minus_expected);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/CubeRootTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @author Joseph D. Darcy\n+ * @compile -Xdiags:verbose Expm1Tests.java\n+ * @run main Expm1Tests\n@@ -47,1 +48,1 @@\n-                          StrictMath.expm1(input), expected);\n+                          StrictMath::expm1, expected);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/Expm1Tests.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -48,1 +47,1 @@\n-                          StrictMath.sinh(input), expected);\n+                          StrictMath::sinh, expected);\n@@ -53,1 +52,1 @@\n-                          StrictMath.cosh(input), expected);\n+                          StrictMath::cosh, expected);\n@@ -58,1 +57,1 @@\n-                          StrictMath.tanh(input), expected);\n+                          StrictMath::tanh, expected);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/HyperbolicTests.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n- * @author Joseph D. Darcy\n@@ -75,1 +74,1 @@\n-                               StrictMath.hypot(input1, input2), expected);\n+                               StrictMath::hypot, expected);\n@@ -78,1 +77,1 @@\n-                          StrictMath.hypot(input2, input1), expected);\n+                               StrictMath::hypot, expected);\n@@ -81,1 +80,1 @@\n-                               StrictMath.hypot(-input1, input2), expected);\n+                               StrictMath::hypot, expected);\n@@ -84,1 +83,1 @@\n-                          StrictMath.hypot(input2, -input1), expected);\n+                               StrictMath::hypot, expected);\n@@ -87,1 +86,1 @@\n-                               StrictMath.hypot(input1, -input2), expected);\n+                               StrictMath::hypot, expected);\n@@ -90,1 +89,1 @@\n-                          StrictMath.hypot(-input2, input1), expected);\n+                               StrictMath::hypot, expected);\n@@ -93,1 +92,1 @@\n-                               StrictMath.hypot(-input1, -input2), expected);\n+                               StrictMath::hypot, expected);\n@@ -96,1 +95,1 @@\n-                          StrictMath.hypot(-input2, -input1), expected);\n+                                StrictMath::hypot, expected);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/HypotTests.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -48,1 +47,1 @@\n-                          StrictMath.log10(input), expected);\n+                          StrictMath::log10, expected);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/Log10Tests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -47,1 +46,1 @@\n-                          StrictMath.log1p(input), expected);\n+                          StrictMath::log1p, expected);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/Log1pTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n- * @author Joseph D. Darcy\n@@ -298,1 +297,1 @@\n-                               StrictMath.pow(input1, input2), expected);\n+                               StrictMath::pow, expected);\n","filename":"test\/jdk\/java\/lang\/StrictMath\/PowTests.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,3 @@\n+import java.util.function.DoubleBinaryOperator;\n+import java.util.function.DoubleUnaryOperator;\n+\n@@ -25,2 +28,0 @@\n- *\n- *\n@@ -30,1 +31,0 @@\n-\n@@ -34,4 +34,11 @@\n-    static int test(String testName,\n-                    double input,\n-                    double result,\n-                    double expected) {\n+    public static int test(String testName,\n+                           double input,\n+                           DoubleUnaryOperator func,\n+                           double expected) {\n+        return test(testName, input, func.applyAsDouble(input), expected);\n+    }\n+\n+    public static int test(String testName,\n+                           double input,\n+                           double result,\n+                           double expected) {\n@@ -44,2 +51,1 @@\n-        }\n-        else\n+        } else {\n@@ -47,0 +53,9 @@\n+        }\n+    }\n+\n+    public static int test(String testName,\n+                           double input1,\n+                           double input2,\n+                           DoubleBinaryOperator func,\n+                           double expected) {\n+        return test(testName, input1, input2, func.applyAsDouble(input1, input2), expected);\n@@ -49,2 +64,2 @@\n-    static int test(String testName, double input1,  double input2,\n-                    double result, double expected) {\n+    public static int test(String testName, double input1, double input2,\n+                           double result, double expected) {\n@@ -58,2 +73,1 @@\n-        }\n-        else\n+        } else {\n@@ -61,0 +75,1 @@\n+        }\n","filename":"test\/jdk\/java\/lang\/StrictMath\/Tests.java","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"}]}