{"files":[{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.ComponentOrientation;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JSpinner;\n+import javax.swing.SpinnerDateModel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4515999\n+ * @summary Check whether incrementing dates via the keyboard (up\/down) gives\n+ * the same results as using mouse press on the arrow buttons in a JSpinner.\n+ * @run main JSpinnerMouseAndKeyPressTest\n+ *\/\n+public class JSpinnerMouseAndKeyPressTest {\n+    \/\/ 2 days in milliseconds\n+    private static final int EXPECTED_VALUE_2_DAYS = 2 * 24 * 60 * 60 * 1000;\n+\n+    private static JFrame frame;\n+    private static JSpinner spinner;\n+    private static volatile Point spinnerUpButtonCenter;\n+    private static volatile Point spinnerDownButtonCenter;\n+    private static volatile Date spinnerValue;\n+\n+    public static void main(String[] s) throws Exception {\n+        runTest();\n+    }\n+\n+    private static void setLookAndFeel(final String laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf);\n+            System.out.println(\"LookAndFeel: \" + laf);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        JPanel panel = new JPanel();\n+        spinner = new JSpinner();\n+        spinner.setModel(new DateModel());\n+        JSpinner.DateEditor editor = new JSpinner.DateEditor(spinner, \"dd\/MM\/yy\");\n+        spinner.setEditor(editor);\n+        spinner.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n+        panel.add(spinner);\n+        frame.add(panel);\n+        frame.setUndecorated(true);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+\n+    public static void runTest() throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(100);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(UIManager.LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    setLookAndFeel(laf);\n+                    createUI();\n+                });\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    Point loc = spinner.getLocationOnScreen();\n+                    int editorWidth = spinner.getEditor().getWidth();\n+                    int buttonWidth = spinner.getWidth() - editorWidth;\n+                    int quarterHeight = spinner.getHeight() \/ 4;\n+\n+                    spinnerUpButtonCenter = new Point(loc.x + editorWidth\n+                            + (buttonWidth \/ 2),\n+                            loc.y + quarterHeight);\n+                    spinnerDownButtonCenter = new Point(spinnerUpButtonCenter.x,\n+                            loc.y + (3 * quarterHeight));\n+                });\n+\n+                \/\/ Mouse press use-case\n+                \/\/ Move Mouse pointer to UP button center and click it\n+                robot.mouseMove(spinnerUpButtonCenter.x, spinnerUpButtonCenter.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                updateSpinnerValue();\n+                long upValue = spinnerValue.getTime();\n+\n+                \/\/ Move Mouse pointer to DOWN button center and click it\n+                robot.mouseMove(spinnerDownButtonCenter.x, spinnerDownButtonCenter.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                updateSpinnerValue();\n+                long downValue = spinnerValue.getTime();\n+\n+                long mouseIncrement = upValue - downValue;\n+\n+                \/\/ Key press use-case\n+                \/\/ Up Key press\n+                robot.keyPress(KeyEvent.VK_UP);\n+                robot.keyRelease(KeyEvent.VK_UP);\n+\n+                updateSpinnerValue();\n+                upValue = spinnerValue.getTime();\n+\n+                \/\/ Down Key press\n+                robot.keyPress(KeyEvent.VK_DOWN);\n+                robot.keyRelease(KeyEvent.VK_DOWN);\n+\n+                updateSpinnerValue();\n+                downValue = spinnerValue.getTime();\n+\n+                long keyIncrement = upValue - downValue;\n+\n+                if ((keyIncrement == EXPECTED_VALUE_2_DAYS) &&\n+                        (mouseIncrement == EXPECTED_VALUE_2_DAYS)) {\n+                    System.out.println(\"Test passed\");\n+                } else {\n+                    throw new RuntimeException(\"Test failed because keyIncrement: \" +\n+                            keyIncrement + \" and mouseIncrement: \" +\n+                            mouseIncrement + \" should match with the expected value \" +\n+                            EXPECTED_VALUE_2_DAYS + \" for LnF \" + laf);\n+                }\n+\n+            } finally {\n+                SwingUtilities.invokeAndWait(JSpinnerMouseAndKeyPressTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void updateSpinnerValue() throws Exception {\n+        SwingUtilities.invokeAndWait(() -> spinnerValue = (Date) spinner.getValue());\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private static class DateModel extends SpinnerDateModel {\n+\n+        private final Calendar cal = Calendar.getInstance();\n+\n+        @Override\n+        public Object getNextValue() {\n+            cal.setTime(getDate());\n+            cal.add(Calendar.DAY_OF_MONTH, 2); \/\/ Increment two days\n+            return cal.getTime();\n+        }\n+\n+        @Override\n+        public Object getPreviousValue() {\n+            cal.setTime(getDate());\n+            cal.add(Calendar.DAY_OF_MONTH, -2); \/\/ Decrement two days\n+            return cal.getTime();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JSpinner\/4515999\/JSpinnerMouseAndKeyPressTest.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"}]}