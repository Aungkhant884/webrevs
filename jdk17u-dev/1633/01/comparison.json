{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include \"logging\/log.hpp\"\n@@ -45,0 +46,3 @@\n+        \/\/ Also log if native trim log is active\n+        log_info(trimnative)(\"Manual Trim: \" PROPERFMT \"->\" PROPERFMT \" (%c\" PROPERFMT \")\",\n+                             PROPERFMTARGS(sc.before), PROPERFMTARGS(sc.after), sign, PROPERFMTARGS(delta));\n","filename":"src\/hotspot\/os\/linux\/trimCHeapDCmd.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,10 @@\n+\/*\n+ * @test id=trimNativeStrict\n+ * @requires (os.family==\"linux\") & !vm.musl\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/manual TestTrimNative trimNativeStrict\n+ *\/\n+\n@@ -59,0 +69,11 @@\n+\/*\n+ * @test id=trimNativeLowIntervalStrict\n+ * @summary Very low (sub-second) interval, nothing should explode (stricter test, manual mode)\n+ * @requires (os.family==\"linux\") & !vm.musl\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/manual TestTrimNative trimNativeLowIntervalStrict\n+ *\/\n+\n@@ -164,0 +185,1 @@\n+     * @param strict: if true, expect RSS to go down; if false, just look for trims without looking at RSS.\n@@ -166,1 +188,1 @@\n-                                                          int maxTrimsExpected) {\n+                                                          int maxTrimsExpected, boolean strict) {\n@@ -191,1 +213,2 @@\n-        if (maxTrimsExpected > 0) {\n+        System.out.println(\"Found \" + numTrimsFound + \" trims. Ok.\");\n+        if (strict && maxTrimsExpected > 0) {\n@@ -206,0 +229,2 @@\n+            } else {\n+                System.out.println(\"Found high enough RSS reduction from trims: \" + rssReductionTotal);\n@@ -241,0 +266,2 @@\n+        boolean strictTesting = args[0].endsWith(\"Strict\");\n+\n@@ -242,1 +269,2 @@\n-            case \"trimNative\": {\n+            case \"trimNative\":\n+            case \"trimNativeStrict\": {\n@@ -256,1 +284,1 @@\n-                parseOutputAndLookForNegativeTrim(output, (int) minTrimsExpected, (int) maxTrimsExpected);\n+                parseOutputAndLookForNegativeTrim(output, (int) minTrimsExpected, (int) maxTrimsExpected, strictTesting);\n@@ -266,1 +294,1 @@\n-                parseOutputAndLookForNegativeTrim(output, 0, 0);\n+                parseOutputAndLookForNegativeTrim(output, 0, 0, strictTesting);\n@@ -269,1 +297,2 @@\n-            case \"trimNativeLowInterval\": {\n+            case \"trimNativeLowInterval\":\n+            case \"trimNativeLowIntervalStrict\": {\n@@ -275,1 +304,1 @@\n-                parseOutputAndLookForNegativeTrim(output, 1, 3000);\n+                parseOutputAndLookForNegativeTrim(output, 1, 3000, strictTesting);\n@@ -284,1 +313,1 @@\n-                parseOutputAndLookForNegativeTrim(output, 0, 0);\n+                parseOutputAndLookForNegativeTrim(output, 0, 0, strictTesting);\n@@ -295,1 +324,1 @@\n-                parseOutputAndLookForNegativeTrim(output, 0, 0);\n+                parseOutputAndLookForNegativeTrim(output, 0, 0, strictTesting);\n@@ -301,1 +330,1 @@\n-                parseOutputAndLookForNegativeTrim(output, 0, 0);\n+                parseOutputAndLookForNegativeTrim(output, 0, 0, strictTesting);\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestTrimNative.java","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"}]}