{"files":[{"patch":"@@ -5272,0 +5272,2 @@\n+  const int fill64_per_loop = 4;\n+  const int max_unrolled_fill64 = 8;\n@@ -5275,1 +5277,17 @@\n-  for (int i = 0; i < vector64_count; i++) {\n+  int start64 = 0;\n+  if (vector64_count > max_unrolled_fill64) {\n+    Label LOOP;\n+    Register index = rtmp;\n+\n+    start64 = vector64_count - (vector64_count % fill64_per_loop);\n+\n+    movl(index, 0);\n+    BIND(LOOP);\n+    for (int i = 0; i < fill64_per_loop; i++) {\n+      fill64(Address(base, index, Address::times_1, i * 64), xtmp, use64byteVector);\n+    }\n+    addl(index, fill64_per_loop * 64);\n+    cmpl(index, start64 * 64);\n+    jccb(Assembler::less, LOOP);\n+  }\n+  for (int i = start64; i < vector64_count; i++) {\n@@ -8462,0 +8480,4 @@\n+void MacroAssembler::fill32(Address dst, XMMRegister xmm) {\n+  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n+  vmovdqu(dst, xmm);\n+}\n@@ -8464,2 +8486,1 @@\n-  assert(MaxVectorSize >= 32, \"vector length should be >= 32\");\n-  vmovdqu(Address(dst, disp), xmm);\n+  fill32(Address(dst, disp), xmm);\n@@ -8468,1 +8489,1 @@\n-void MacroAssembler::fill64_avx(Register dst, int disp, XMMRegister xmm, bool use64byteVector) {\n+void MacroAssembler::fill64(Address dst, XMMRegister xmm, bool use64byteVector) {\n@@ -8470,1 +8491,0 @@\n-  BasicType type[] = {T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n@@ -8472,2 +8492,2 @@\n-    fill32_avx(dst, disp, xmm);\n-    fill32_avx(dst, disp + 32, xmm);\n+    fill32(dst, xmm);\n+    fill32(dst.plus_disp(32), xmm);\n@@ -8475,1 +8495,1 @@\n-    evmovdquq(Address(dst, disp), xmm, Assembler::AVX_512bit);\n+    evmovdquq(dst, xmm, Assembler::AVX_512bit);\n@@ -8479,0 +8499,4 @@\n+void MacroAssembler::fill64_avx(Register dst, int disp, XMMRegister xmm, bool use64byteVector) {\n+  fill64(Address(dst, disp), xmm, use64byteVector);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1863,0 +1863,2 @@\n+  void fill32(Address dst, XMMRegister xmm);\n+\n@@ -1865,0 +1867,2 @@\n+  void fill64(Address dst, XMMRegister xmm, bool use64byteVector = false);\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3121,1 +3121,1 @@\n-  if (!IdealizeClearArrayNode || _is_large) return NULL;\n+  if (_is_large) return NULL;\n@@ -3142,0 +3142,1 @@\n+  if (!IdealizeClearArrayNode) return NULL;\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test ClearArray.java\n+ * @bug 8284883\n+ * @compile ClearArray.java\n+ * @summary ClearArray instruction overflows scratch buffer\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation -Xbatch\n+ *   -XX:InitArrayShortSize=32768 -XX:-IdealizeClearArrayNode compiler.c2.ClearArray\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -Xbatch\n+ *   -XX:InitArrayShortSize=32768 -XX:-IdealizeClearArrayNode -XX:UseAVX=3 compiler.c2.ClearArray\n+ *\/\n+\n+package compiler.c2;\n+\n+public class ClearArray {\n+\n+    static long[] STATIC;\n+\n+    static void foo() {\n+        STATIC = new long[2048 - 1];\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; ++i) {\n+            foo();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/ClearArray.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}