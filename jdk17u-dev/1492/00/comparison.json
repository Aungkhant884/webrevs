{"files":[{"patch":"@@ -854,0 +854,9 @@\n+  \/\/ Add an additional page to the stack size to reduce its chances of getting large page aligned\n+  \/\/ so that the stack does not get backed by a transparent huge page.\n+  size_t default_large_page_size = os::Linux::default_large_page_size();\n+  if (default_large_page_size != 0 &&\n+      stack_size >= default_large_page_size &&\n+      is_aligned(stack_size, default_large_page_size)) {\n+    stack_size += os::vm_page_size();\n+  }\n+\n@@ -3804,2 +3813,5 @@\n-  \/\/ 1) Handle the case where we do not want to use huge pages and hence\n-  \/\/    there is no need to scan the OS for related info\n+  \/\/ Always initialize the default large page size even if large pages are not being used.\n+  size_t default_large_page_size = scan_default_large_page_size();\n+  os::Linux::_default_large_page_size = default_large_page_size;\n+\n+  \/\/ 1) Handle the case where we do not want to use huge pages\n@@ -3823,3 +3835,1 @@\n-  \/\/ 2) Scan OS info\n-  size_t default_large_page_size = scan_default_large_page_size();\n-  os::Linux::_default_large_page_size = default_large_page_size;\n+  \/\/ 2) check if large pages are configured\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-define_pd_global(intx, ThreadStackSize,          2048); \/\/ 0 => use system default\n-define_pd_global(intx, VMThreadStackSize,        2048);\n@@ -36,1 +34,11 @@\n-define_pd_global(intx, CompilerThreadStackSize,  2048);\n+\/\/ Set default stack sizes < 2MB so as to prevent stacks from getting\n+\/\/ large-page aligned and backed by THPs on systems where 2MB is the\n+\/\/ default huge page size. For non-JavaThreads, glibc may add an additional\n+\/\/ guard page to the total stack size, so to keep the default sizes same\n+\/\/ for all the following flags, we set them to 2 pages less than 2MB. On\n+\/\/ systems where 2MB is the default large page size, 4KB is most commonly\n+\/\/ the regular page size.\n+define_pd_global(intx, ThreadStackSize,          2040); \/\/ 0 => use system default\n+define_pd_global(intx, VMThreadStackSize,        2040);\n+\n+define_pd_global(intx, CompilerThreadStackSize,  2040);\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/globals_linux_aarch64.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}