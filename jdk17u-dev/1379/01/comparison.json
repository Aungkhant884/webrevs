{"files":[{"patch":"@@ -94,0 +94,2 @@\n+\n+static bool _rehashed = false;\n@@ -507,0 +509,28 @@\n+bool StringTable::should_grow() {\n+  return get_load_factor() > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached();\n+}\n+\n+bool StringTable::rehash_table_expects_safepoint_rehashing() {\n+  \/\/ No rehashing required\n+  if (!needs_rehashing()) {\n+    return false;\n+  }\n+\n+  \/\/ Grow instead of rehash\n+  if (should_grow()) {\n+    return false;\n+  }\n+\n+  \/\/ Already rehashed\n+  if (_rehashed) {\n+    return false;\n+  }\n+\n+  \/\/ Resizing in progress\n+  if (!_local_table->is_safepoint_safe()) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n@@ -508,1 +538,0 @@\n-  static bool rehashed = false;\n@@ -512,2 +541,1 @@\n-  if (get_load_factor() > PREF_AVG_LIST_LEN &&\n-      !_local_table->is_max_size_reached()) {\n+  if (should_grow()) {\n@@ -520,1 +548,1 @@\n-  if (rehashed) {\n+  if (_rehashed) {\n@@ -530,1 +558,1 @@\n-      rehashed = true;\n+      _rehashed = true;\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":33,"deletions":5,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -98,0 +98,5 @@\n+private:\n+  static bool should_grow();\n+\n+public:\n+  static bool rehash_table_expects_safepoint_rehashing();\n","filename":"src\/hotspot\/share\/classfile\/stringTable.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -106,0 +106,1 @@\n+static bool _rehashed = false;\n@@ -768,0 +769,28 @@\n+bool SymbolTable::should_grow() {\n+  return get_load_factor() > PREF_AVG_LIST_LEN && !_local_table->is_max_size_reached();\n+}\n+\n+bool SymbolTable::rehash_table_expects_safepoint_rehashing() {\n+  \/\/ No rehashing required\n+  if (!needs_rehashing()) {\n+    return false;\n+  }\n+\n+  \/\/ Grow instead of rehash\n+  if (should_grow()) {\n+    return false;\n+  }\n+\n+  \/\/ Already rehashed\n+  if (_rehashed) {\n+    return false;\n+  }\n+\n+  \/\/ Resizing in progress\n+  if (!_local_table->is_safepoint_safe()) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n@@ -769,1 +798,0 @@\n-  static bool rehashed = false;\n@@ -773,2 +801,1 @@\n-  if (get_load_factor() > PREF_AVG_LIST_LEN &&\n-      !_local_table->is_max_size_reached()) {\n+  if (should_grow()) {\n@@ -782,1 +809,1 @@\n-  if (rehashed) {\n+  if (_rehashed) {\n@@ -792,1 +819,1 @@\n-    rehashed = true;\n+    _rehashed = true;\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -198,0 +198,5 @@\n+private:\n+  static bool should_grow();\n+\n+public:\n+  static bool rehash_table_expects_safepoint_rehashing();\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -162,0 +162,14 @@\n+}\n+\n+bool InlineCacheBuffer::needs_update_inline_caches() {\n+  \/\/ Stub removal\n+  if (buffer()->number_of_stubs() > 0) {\n+    return true;\n+  }\n+\n+  \/\/ Release pending CompiledICHolder\n+  if (pending_icholder_count() > 0) {\n+    return true;\n+  }\n+\n+  return false;\n","filename":"src\/hotspot\/share\/code\/icBuffer.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -168,0 +168,1 @@\n+  static bool needs_update_inline_caches();\n","filename":"src\/hotspot\/share\/code\/icBuffer.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -254,1 +254,0 @@\n-  static void do_safepoint_work() { }\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -509,10 +509,1 @@\n-class ParallelSPCleanupThreadClosure : public ThreadClosure {\n-public:\n-  void do_thread(Thread* thread) {\n-    if (thread->is_Java_thread()) {\n-      StackWatermarkSet::start_processing(thread->as_Java_thread(), StackWatermarkKind::gc);\n-    }\n-  }\n-};\n-\n-class ParallelSPCleanupTask : public AbstractGangTask {\n+class ParallelCleanupTask : public AbstractGangTask {\n@@ -521,1 +512,0 @@\n-  uint _num_workers;\n@@ -541,1 +531,1 @@\n-  ParallelSPCleanupTask(uint num_workers) :\n+  ParallelCleanupTask() :\n@@ -544,1 +534,0 @@\n-    _num_workers(num_workers),\n@@ -548,7 +537,5 @@\n-  void work(uint worker_id) {\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n-      if (_do_lazy_roots) {\n-        Tracer t(\"lazy partial thread root processing\");\n-        ParallelSPCleanupThreadClosure cl;\n-        Threads::threads_do(&cl);\n-      }\n+  uint expected_num_workers() const {\n+    uint workers = 0;\n+\n+    if (SymbolTable::rehash_table_expects_safepoint_rehashing()) {\n+      workers++;\n@@ -557,3 +544,6 @@\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_UPDATE_INLINE_CACHES)) {\n-      Tracer t(\"updating inline caches\");\n-      InlineCacheBuffer::update_inline_caches();\n+    if (StringTable::rehash_table_expects_safepoint_rehashing()) {\n+      workers++;\n+    }\n+\n+    if (Dictionary::does_any_dictionary_needs_resizing()) {\n+      workers++;\n@@ -562,3 +552,2 @@\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_COMPILATION_POLICY)) {\n-      Tracer t(\"compilation policy safepoint handler\");\n-      CompilationPolicy::do_safepoint_work();\n+    if (InlineCacheBuffer::needs_update_inline_caches()) {\n+      workers++;\n@@ -567,0 +556,9 @@\n+    if (_do_lazy_roots) {\n+      workers++;\n+    }\n+\n+    return MAX2<uint>(1, workers);\n+  }\n+\n+  void work(uint worker_id) {\n+    \/\/ These tasks are ordered by relative length of time to execute so that potentially longer tasks start first.\n@@ -588,0 +586,21 @@\n+    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n+      if (_do_lazy_roots) {\n+        Tracer t(\"lazy partial thread root processing\");\n+        class LazyRootClosure : public ThreadClosure {\n+        public:\n+          void do_thread(Thread* thread) {\n+            if (thread->is_Java_thread()) {\n+              StackWatermarkSet::start_processing(thread->as_Java_thread(), StackWatermarkKind::gc);\n+            }\n+          }\n+        };\n+        LazyRootClosure cl;\n+        Threads::java_threads_do(&cl);\n+      }\n+    }\n+\n+    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_UPDATE_INLINE_CACHES)) {\n+      Tracer t(\"updating inline caches\");\n+      InlineCacheBuffer::update_inline_caches();\n+    }\n+\n@@ -605,0 +624,1 @@\n+  ParallelCleanupTask cleanup;\n@@ -606,1 +626,2 @@\n-  if (cleanup_workers != NULL) {\n+  const uint expected_num_workers = cleanup.expected_num_workers();\n+  if (cleanup_workers != nullptr && expected_num_workers > 1) {\n@@ -608,3 +629,2 @@\n-    uint num_cleanup_workers = cleanup_workers->active_workers();\n-    ParallelSPCleanupTask cleanup(num_cleanup_workers);\n-    cleanup_workers->run_task(&cleanup);\n+    const uint num_workers = MIN2(expected_num_workers, cleanup_workers->active_workers());\n+    cleanup_workers->run_task(&cleanup, num_workers);\n@@ -613,1 +633,0 @@\n-    ParallelSPCleanupTask cleanup(1);\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":50,"deletions":31,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-    SAFEPOINT_CLEANUP_COMPILATION_POLICY,\n","filename":"src\/hotspot\/share\/runtime\/safepoint.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1679,1 +1679,1 @@\n-    \/\/ level at a safepoint in ObjectSynchronizer::do_safepoint_work().\n+    \/\/ level at a safepoint in SafepointSynchronize::do_cleanup_tasks.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-        output.shouldContain(\"compilation policy safepoint handler\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/SafepointCleanupTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}