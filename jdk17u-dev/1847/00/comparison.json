{"files":[{"patch":"@@ -639,2 +639,0 @@\n-javax\/net\/ssl\/SSLEngine\/EngineCloseOnAlert.java                 8298868 generic-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- *\n- * @run main\/othervm EngineCloseOnAlert\n+ * @run main EngineCloseOnAlert\n@@ -43,3 +42,3 @@\n-    private static final String pathToStores = \"..\/etc\";\n-    private static final String keyStoreFile = \"keystore\";\n-    private static final String trustStoreFile = \"truststore\";\n+    private static final String PATH_TO_STORES = \"..\/etc\";\n+    private static final String KEYSTORE_FILENAME = \"keystore\";\n+    private static final String TRUSTSTORE_FILENAME = \"truststore\";\n@@ -47,6 +46,6 @@\n-    private static final String keyFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-    private static final String trustFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n+    private static final String KEYSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + KEYSTORE_FILENAME;\n+    private static final String TRUSTSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + TRUSTSTORE_FILENAME;\n@@ -56,1 +55,0 @@\n-    private static TrustManagerFactory EMPTY_TMF;\n@@ -58,2 +56,0 @@\n-    private static final String[] TLS10ONLY = { \"TLSv1\" };\n-    private static final String[] TLS12ONLY = { \"TLSv1.2\" };\n@@ -94,0 +90,1 @@\n+    private static final String TLSv12 = \"TLSv1.2\";\n@@ -107,1 +104,3 @@\n-            SSLContext context = SSLContext.getDefault();\n+            SSLContext context = SSLContext.getInstance(TLSv12);\n+            context.init(null, null, null);\n+\n@@ -139,1 +138,2 @@\n-            } catch (SSLException e) {\n+                throw new RuntimeException(\"The expected SSLHandshakeException was not thrown.\");\n+            } catch (SSLHandshakeException e) {\n@@ -150,3 +150,0 @@\n-            \/\/ The above should show that isInboundDone returns true, and\n-            \/\/ handshake status is NEED_WRAP. That is the correct behavior,\n-            \/\/ wrap will put a fatal alert message in the buffer.\n@@ -159,1 +156,1 @@\n-            checkEngineState(server, NEED_UNWRAP, true, true);\n+            checkEngineState(server, NOT_HANDSHAKING, true, true);\n@@ -170,1 +167,2 @@\n-            } catch (SSLException e) {\n+                throw new RuntimeException(\"Client did not throw the expected SSLException.\");\n+            } catch (SSLHandshakeException e) {\n@@ -191,2 +189,3 @@\n-            SSLContext cliContext = SSLContext.getDefault();\n-            SSLContext servContext = SSLContext.getInstance(\"TLS\");\n+            SSLContext cliContext = SSLContext.getInstance(TLSv12);\n+            cliContext.init(null, null, null);\n+            SSLContext servContext = SSLContext.getInstance(TLSv12);\n@@ -198,1 +197,0 @@\n-            client.setEnabledProtocols(TLS12ONLY);\n@@ -201,1 +199,0 @@\n-            server.setEnabledProtocols(TLS10ONLY);\n@@ -235,2 +232,3 @@\n-            \/\/ The client should parse this and throw an exception because\n-            \/\/ It is unwiling to do TLS 1.0\n+            \/\/ Change the handshake type field to client_hello which will\n+            \/\/ cause the client to generate an unexpected_message alert\n+            raw.put(5, (byte)0x1);\n@@ -240,1 +238,2 @@\n-            checkEngineState(client, NEED_UNWRAP, false, false);\n+            checkEngineState(client, NEED_WRAP, true, false);\n+            raw.clear();\n@@ -242,0 +241,1 @@\n+            \/\/ Now the client should wrap the exception\n@@ -243,7 +243,10 @@\n-                client.unwrap(raw, plain);\n-            } catch (SSLException e) {\n-                System.out.println(\"Client throws exception: \" + e);\n-                System.out.println(\"Engine closure status: isInboundDone=\"\n-                        + client.isInboundDone() + \", isOutboundDone=\"\n-                        + client.isOutboundDone() + \", handshake status=\"\n-                        + client.getHandshakeStatus());\n+                client.wrap(plain, raw);\n+                throw new RuntimeException(\"The expected exception was not \"\n+                    + \"thrown after the client processed an unexpected message.\");\n+            } catch (SSLProtocolException exc) {\n+                \/\/ this is the expected code path\n+                System.out.println(\"Client throws expected exception: \" + exc);\n+                System.out.println(\"Client engine state: \" +\n+                        \"isInboundDone = \"+ client.isInboundDone() +\n+                        \", isOutboundDone = \" + client.isOutboundDone() +\n+                        \", handshake status = \" + client.getHandshakeStatus());\n@@ -253,2 +256,0 @@\n-\n-            \/\/ Now the client should wrap the exception\n@@ -256,2 +257,1 @@\n-            checkEngineState(client, NEED_UNWRAP, true, true);\n-            raw.flip();\n+            checkEngineState(client, NOT_HANDSHAKING, true, true);\n@@ -260,0 +260,1 @@\n+            raw.flip();\n@@ -263,2 +264,3 @@\n-                checkEngineState(server, NEED_UNWRAP, false, false);\n-            } catch (SSLException e) {\n+                throw new RuntimeException(\"The server did not throw an \"\n+                        + \"SSLProtocolException after parsing an alert message.\");\n+            } catch (SSLProtocolException e) {\n@@ -341,2 +343,2 @@\n-        keystore.load(new FileInputStream(keyFilename), passphrase);\n-        truststore.load(new FileInputStream(trustFilename), passphrase);\n+        keystore.load(new FileInputStream(KEYSTORE_PATH), passphrase);\n+        truststore.load(new FileInputStream(TRUSTSTORE_PATH), passphrase);\n@@ -349,1 +351,1 @@\n-        EMPTY_TMF = TrustManagerFactory.getInstance(\"PKIX\");\n+        TrustManagerFactory EMPTY_TMF = TrustManagerFactory.getInstance(\"PKIX\");\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLEngine\/EngineCloseOnAlert.java","additions":47,"deletions":45,"binary":false,"changes":92,"status":"modified"}]}