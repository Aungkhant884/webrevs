{"files":[{"patch":"@@ -56,10 +56,0 @@\n-    \/**\n-     * Returns the maximum amount of kernel physical memory, in bytes, that\n-     * can be allocated in the Isolation Group.\n-     *\n-     * @return The maximum amount of memory in bytes or -1 if\n-     *         there is no limit set.\n-     *\n-     *\/\n-    public long getKernelMemoryLimit();\n-\n@@ -96,10 +86,0 @@\n-    \/**\n-     * Returns the maximum amount of networking physical memory, in bytes,\n-     * that can be allocated in the Isolation Group.\n-     *\n-     * @return The maximum amount of memory in bytes or -1 if\n-     *         there is no limit.\n-     *\n-     *\/\n-    public long getTcpMemoryLimit();\n-\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupV1Metrics.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -51,5 +51,0 @@\n-    @Override\n-    public long getKernelMemoryLimit() {\n-        return metrics.getKernelMemoryLimit();\n-    }\n-\n@@ -71,5 +66,0 @@\n-    @Override\n-    public long getTcpMemoryLimit() {\n-        return metrics.getTcpMemoryLimit();\n-    }\n-\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupV1MetricsImpl.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -336,4 +336,0 @@\n-    public long getKernelMemoryLimit() {\n-        return CgroupV1SubsystemController.longValOrUnlimited(getLongValue(memory, \"memory.kmem.limit_in_bytes\"));\n-    }\n-\n@@ -352,4 +348,0 @@\n-    public long getTcpMemoryLimit() {\n-        return CgroupV1SubsystemController.longValOrUnlimited(getLongValue(memory, \"memory.kmem.tcp.limit_in_bytes\"));\n-    }\n-\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1Subsystem.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,3 +42,0 @@\n-            case \"kernelmem\":\n-                testKernelMemoryLimit(args[1]);\n-                break;\n@@ -122,17 +119,0 @@\n-    private static void testKernelMemoryLimit(String value) {\n-        Metrics m = Metrics.systemMetrics();\n-        if (m instanceof CgroupV1Metrics) {\n-            CgroupV1Metrics mCgroupV1 = (CgroupV1Metrics)m;\n-            System.out.println(\"TEST PASSED!!!\");\n-            long limit = getMemoryValue(value);\n-            long kmemlimit = mCgroupV1.getKernelMemoryLimit();\n-            if (kmemlimit != UNLIMITED && limit != kmemlimit) {\n-                throw new RuntimeException(\"Kernel Memory limit not equal, expected : [\"\n-                        + limit + \"]\" + \", got : [\"\n-                        + kmemlimit + \"]\");\n-            }\n-        } else {\n-            throw new RuntimeException(\"kernel memory limit test not supported for cgroups v2\");\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/MetricsMemoryTester.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -66,3 +66,2 @@\n-            \/\/ kernel memory, '--kernel-memory' switch, and OOM killer,\n-            \/\/ '--oom-kill-disable' switch, tests not supported by cgroupv2\n-            \/\/ runtimes\n+            \/\/ OOM killer disable, '--oom-kill-disable' switch, test not supported\n+            \/\/ by cgroupv2\n@@ -71,3 +70,0 @@\n-                    testKernelMemoryLimit(\"100m\");\n-                    testKernelMemoryLimit(\"1g\");\n-\n@@ -76,2 +72,2 @@\n-                    System.out.println(\"kernel memory tests and OOM Kill flag tests not \" +\n-                                       \"possible with cgroupv2.\");\n+                    System.out.println(\"OOM kill disable test not \" +\n+                                       \"supported with cgroupv2.\");\n@@ -162,24 +158,0 @@\n-    private static void testKernelMemoryLimit(String value) throws Exception {\n-        Common.logNewTestCase(\"testKernelMemoryLimit, value = \" + value);\n-        DockerRunOptions opts =\n-                new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"MetricsMemoryTester\");\n-        opts.addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\")\n-                .addDockerOpts(\"--kernel-memory=\" + value)\n-                .addJavaOpts(\"-cp\", \"\/test-classes\/\")\n-                .addJavaOpts(\"--add-exports\", \"java.base\/jdk.internal.platform=ALL-UNNAMED\")\n-                .addClassOptions(\"kernelmem\", value);\n-        OutputAnalyzer oa = DockerTestUtils.dockerRunJava(opts);\n-\n-        \/\/ Some container runtimes (e.g. runc, docker 18.09)\n-        \/\/ have been built without kernel memory accounting. In\n-        \/\/ that case, the runtime issues a message on stderr saying\n-        \/\/ so. Skip the test in that case.\n-        if (oa.getStderr().contains(\"kernel memory accounting disabled\")) {\n-            System.out.println(\"Kernel memory accounting disabled, \" +\n-                                       \"skipping the test case\");\n-            return;\n-        }\n-\n-        oa.shouldHaveExitValue(0).shouldContain(\"TEST PASSED!!!\");\n-    }\n-\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestDockerMemoryMetrics.java","additions":4,"deletions":32,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -250,7 +250,0 @@\n-        oldVal = metrics.getKernelMemoryLimit();\n-        newVal = getLongValueFromFile(Controller.MEMORY, \"memory.kmem.limit_in_bytes\");\n-        newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED : newVal;\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(Controller.MEMORY, \"memory.kmem.limit_in_bytes\", oldVal, newVal);\n-        }\n-\n@@ -276,7 +269,0 @@\n-        oldVal = metrics.getTcpMemoryLimit();\n-        newVal = getLongValueFromFile(Controller.MEMORY, \"memory.kmem.tcp.limit_in_bytes\");\n-        newVal = newVal > unlimited_minimum ? CgroupSubsystem.LONG_RETVAL_UNLIMITED: newVal;\n-        if (!CgroupMetricsTester.compareWithErrorMargin(oldVal, newVal)) {\n-            fail(Controller.MEMORY, \"memory.kmem.tcp.limit_in_bytes\", oldVal, newVal);\n-        }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/cgroup\/MetricsTesterCgroupV1.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}