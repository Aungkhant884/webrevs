{"files":[{"patch":"@@ -31,1 +31,33 @@\n- * @run driver SharedBaseAddress\n+ * @run driver SharedBaseAddress 0\n+ *\/\n+\n+\/**\n+ * @test SharedBaseAddress\n+ * @bug 8265705 8267351\n+ * @summary Test variety of values for SharedBaseAddress, making sure\n+ *          VM handles normal values as well as edge values w\/o a crash.\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @run driver SharedBaseAddress 1\n+ *\/\n+\n+\/**\n+ * @test SharedBaseAddress\n+ * @bug 8265705 8267351\n+ * @summary Test variety of values for SharedBaseAddress, making sure\n+ *          VM handles normal values as well as edge values w\/o a crash.\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @run driver SharedBaseAddress 0 provoke\n+ *\/\n+\n+\/**\n+ * @test SharedBaseAddress\n+ * @bug 8265705 8267351\n+ * @summary Test variety of values for SharedBaseAddress, making sure\n+ *          VM handles normal values as well as edge values w\/o a crash.\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @library \/test\/lib\n+ * @run driver SharedBaseAddress 1 provoke\n@@ -61,0 +93,8 @@\n+        int mid = testTable.length \/ 2;\n+        int start = args[0].equals(\"0\") ? 0 : mid;\n+        int end   = args[0].equals(\"0\") ? mid : testTable.length;\n+        boolean provoke = (args.length > 1 && args[1].equals(\"provoke\"));\n+\n+        \/\/ provoke == true: we want to increase the chance that mapping the generated archive at the designated base\n+        \/\/ succeeds, to test Klass pointer encoding at that weird location. We do this by sizing heap + class space\n+        \/\/ small, and by switching off compressed oops.\n@@ -62,11 +102,7 @@\n-        for (int run = 0; run < 2; run ++) {\n-            \/\/ We run twice:\n-            \/\/ Once, where we want to increase the chance that mapping the generated archive at the designated base\n-            \/\/ succeeds, to test Klass pointer encoding at that weird location. We do this by sizing heap + class space\n-            \/\/ small, and by switching off compressed oops.\n-            \/\/ On the second run, we don't do this but instead go with default parameters. This is more of a test of\n-            \/\/ CDS' ability to recover if mapping at runtime fails.\n-            for (String testEntry : testTable) {\n-                String filename = \"SharedBaseAddress-base\" + testEntry + \"-run\" + run + \".jsa\";\n-                System.out.println(\"sharedBaseAddress = \" + testEntry);\n-                CDSOptions opts = (new CDSOptions())\n+        \/\/ provoke == false:  we just go with default parameters. This is more of a test of\n+        \/\/ CDS' ability to recover if mapping at runtime fails.\n+        for (int i = start; i < end; i++) {\n+            String testEntry = testTable[i];\n+            String filename = \"SharedBaseAddress-base\" + testEntry + \".jsa\";\n+            System.out.println(\"sharedBaseAddress = \" + testEntry);\n+            CDSOptions opts = (new CDSOptions())\n@@ -82,12 +118,16 @@\n-                if (run == 0 && Platform.is64bit()) {\n-                    opts.addPrefix(\"-Xmx128m\")\n-                        .addPrefix(\"-XX:CompressedClassSpaceSize=32m\")\n-                        .addPrefix(\"-XX:-UseCompressedOops\");\n-                }\n-                CDSTestUtils.createArchiveAndCheck(opts);\n-                OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n-                if (testEntry.equals(\"0\")) {\n-                    out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n-                            .shouldContain(\"Try to map archive(s) at an alternative address\")\n-                            .shouldNotMatch(failedPattern);\n-                }\n+            if (provoke) {\n+                opts.addPrefix(\"-Xmx128m\")\n+                    .addPrefix(\"-XX:CompressedClassSpaceSize=32m\")\n+                    .addPrefix(\"-XX:-UseCompressedOops\");\n+            }\n+            if (Platform.isDebugBuild()) {\n+                \/\/ Make VM start faster in debug build with large heap.\n+                opts.addPrefix(\"-XX:-ZapUnusedHeapArea\");\n+            }\n+\n+            CDSTestUtils.createArchiveAndCheck(opts);\n+            OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n+            if (testEntry.equals(\"0\")) {\n+                out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n+                   .shouldContain(\"Try to map archive(s) at an alternative address\")\n+                   .shouldNotMatch(failedPattern);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedBaseAddress.java","additions":64,"deletions":24,"binary":false,"changes":88,"status":"modified"}]}