{"files":[{"patch":"@@ -153,1 +153,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -156,2 +156,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -168,0 +166,4 @@\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == NULL;\n+  }\n@@ -185,1 +187,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -188,2 +190,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -200,0 +200,5 @@\n+\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == NULL;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -375,1 +375,5 @@\n-  bool equals(Symbol** value, bool* is_dead) {\n+  \/\/ Note: When equals() returns \"true\", the symbol's refcount is incremented. This is\n+  \/\/ needed to ensure that the symbol is kept alive before equals() returns to the caller,\n+  \/\/ so that another thread cannot clean the symbol up concurrently. The caller is\n+  \/\/ responsible for decrementing the refcount, when the symbol is no longer needed.\n+  bool equals(Symbol** value) {\n@@ -385,1 +389,0 @@\n-        *is_dead = true;\n@@ -389,1 +392,0 @@\n-      *is_dead = (sym->refcount() == 0);\n@@ -393,0 +395,3 @@\n+  bool is_dead(Symbol** value) {\n+    return (*value)->refcount() == 0;\n+  }\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  bool equals(WeakHandle* value, bool* is_dead) {\n+  bool equals(WeakHandle* value) {\n@@ -132,2 +132,0 @@\n-      \/\/ dead oop, mark this hash dead for cleaning\n-      *is_dead = true;\n@@ -144,0 +142,4 @@\n+  bool is_dead(WeakHandle* value) {\n+    oop val_oop = value->peek();\n+    return val_oop == NULL;\n+  }\n","filename":"src\/hotspot\/share\/prims\/resolvedMethodTable.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-  bool equals(ThreadIdTableEntry** value, bool* is_dead) {\n+  bool equals(ThreadIdTableEntry** value) {\n@@ -202,0 +202,3 @@\n+  bool is_dead(ThreadIdTableEntry** value) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -454,1 +454,0 @@\n-  bool have_dead = false;\n@@ -456,1 +455,1 @@\n-    if (lookup_f.equals(rem_n->value(), &have_dead)) {\n+    if (lookup_f.equals(rem_n->value())) {\n@@ -543,3 +542,1 @@\n-    bool is_dead = false;\n-    lookup_f.equals(rem_n->value(), &is_dead);\n-    if (is_dead) {\n+    if (lookup_f.is_dead(rem_n->value())) {\n@@ -623,1 +620,0 @@\n-    bool is_dead = false;\n@@ -625,1 +621,1 @@\n-    if (lookup_f.equals(node->value(), &is_dead)) {\n+    if (lookup_f.equals(node->value())) {\n@@ -628,1 +624,1 @@\n-    if (is_dead && !(*have_dead)) {\n+    if (!(*have_dead) && lookup_f.is_dead(node->value())) {\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -155,0 +155,14 @@\n+\n+TEST_VM(SymbolTable, test_cleanup_leak) {\n+  \/\/ Check that dead entry cleanup doesn't increment refcount of live entry in same bucket.\n+\n+  \/\/ Create symbol and release ref, marking it available for cleanup.\n+  Symbol* entry1 = SymbolTable::new_symbol(\"hash_collision_123\");\n+  entry1->decrement_refcount();\n+\n+  \/\/ Create a new symbol in the same bucket, which will notice the dead entry and trigger cleanup.\n+  \/\/ Note: relies on SymbolTable's use of String::hashCode which collides for these two values.\n+  Symbol* entry2 = SymbolTable::new_symbol(\"hash_collision_397476851\");\n+\n+  ASSERT_EQ(entry2->refcount(), 1) << \"Symbol refcount just created is 1\";\n+}\n","filename":"test\/hotspot\/gtest\/classfile\/test_symbolTable.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value) {\n@@ -111,0 +111,3 @@\n+  bool is_dead(const uintptr_t* value) {\n+    return false;\n+  }\n@@ -536,1 +539,1 @@\n-  bool equals(const uintptr_t* value, bool* is_dead) {\n+  bool equals(const uintptr_t* value) {\n@@ -539,0 +542,3 @@\n+  bool is_dead(const uintptr_t* value) {\n+    return false;\n+  }\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}