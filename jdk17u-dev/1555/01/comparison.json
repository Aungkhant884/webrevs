{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"logging\/logFileStreamOutput.hpp\"\n@@ -59,1 +60,1 @@\n-void AsyncLogWriter::enqueue(LogFileOutput& output, const LogDecorations& decorations, const char* msg) {\n+void AsyncLogWriter::enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg) {\n@@ -70,1 +71,1 @@\n-void AsyncLogWriter::enqueue(LogFileOutput& output, LogMessageBuffer::Iterator msg_iterator) {\n+void AsyncLogWriter::enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator) {\n@@ -98,1 +99,1 @@\n-  bool do_entry(LogFileOutput* output, uint32_t* counter) {\n+  bool do_entry(LogFileStreamOutput* output, uint32_t* counter) {\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"logging\/logFileOutput.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"runtime\/semaphore.hpp\"\n@@ -93,0 +93,3 @@\n+\/\/ Forward declaration\n+class LogFileStreamOutput;\n+\n@@ -94,1 +97,1 @@\n-  LogFileOutput* _output;\n+  LogFileStreamOutput* _output;\n@@ -99,1 +102,1 @@\n-  AsyncLogMessage(LogFileOutput* output, const LogDecorations& decorations, char* msg)\n+  AsyncLogMessage(LogFileStreamOutput* output, const LogDecorations& decorations, char* msg)\n@@ -105,1 +108,1 @@\n-  LogFileOutput* output() const { return _output; }\n+  LogFileStreamOutput* output() const { return _output; }\n@@ -111,1 +114,1 @@\n-typedef KVHashtable<LogFileOutput*, uint32_t, mtLogging> AsyncLogMap;\n+typedef KVHashtable<LogFileStreamOutput*, uint32_t, mtLogging> AsyncLogMap;\n@@ -166,2 +169,2 @@\n-  void enqueue(LogFileOutput& output, const LogDecorations& decorations, const char* msg);\n-  void enqueue(LogFileOutput& output, LogMessageBuffer::Iterator msg_iterator);\n+  void enqueue(LogFileStreamOutput& output, const LogDecorations& decorations, const char* msg);\n+  void enqueue(LogFileStreamOutput& output, LogMessageBuffer::Iterator msg_iterator);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -308,1 +308,3 @@\n-  int written = LogFileStreamOutput::write(decorations, msg);\n+  int written = write_internal(decorations, msg);\n+  \/\/ Need to flush to the filesystem before should_rotate()\n+  written = flush() ? written : -1;\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  int write_blocking(const LogDecorations& decorations, const char* msg);\n+  virtual int write_blocking(const LogDecorations& decorations, const char* msg);\n","filename":"src\/hotspot\/share\/logging\/logFileOutput.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"logging\/logAsyncWriter.hpp\"\n@@ -120,1 +121,2 @@\n-int LogFileStreamOutput::write(const LogDecorations& decorations, const char* msg) {\n+int LogFileStreamOutput::write_internal(const LogDecorations& decorations, const char* msg) {\n+  int written = 0;\n@@ -123,2 +125,0 @@\n-  int written = 0;\n-  FileLocker flocker(_stream);\n@@ -130,0 +130,17 @@\n+  return written;\n+}\n+\n+int LogFileStreamOutput::write_blocking(const LogDecorations& decorations, const char* msg) {\n+  int written = write_internal(decorations, msg);\n+  return flush() ? written : -1;\n+}\n+\n+int LogFileStreamOutput::write(const LogDecorations& decorations, const char* msg) {\n+  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n+  if (aio_writer != nullptr) {\n+    aio_writer->enqueue(*this, decorations, msg);\n+    return 0;\n+  }\n+\n+  FileLocker flocker(_stream);\n+  int written = write_internal(decorations, msg);\n@@ -135,1 +152,5 @@\n-  const bool use_decorations = !_decorators.is_empty();\n+  AsyncLogWriter* aio_writer = AsyncLogWriter::instance();\n+  if (aio_writer != nullptr) {\n+    aio_writer->enqueue(*this, msg_iterator);\n+    return 0;\n+  }\n@@ -140,5 +161,1 @@\n-    if (use_decorations) {\n-      WRITE_LOG_WITH_RESULT_CHECK(write_decorations(msg_iterator.decorations()), written);\n-      WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \" \"), written);\n-    }\n-    WRITE_LOG_WITH_RESULT_CHECK(jio_fprintf(_stream, \"%s\\n\", msg_iterator.message()), written);\n+    written += write_internal(msg_iterator.decorations(), msg_iterator.message());\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.cpp","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+\n@@ -56,0 +57,1 @@\n+  int write_internal(const LogDecorations& decorations, const char* msg);\n@@ -61,0 +63,2 @@\n+  \/\/ Write API used by AsyncLogWriter\n+  virtual int write_blocking(const LogDecorations& decorations, const char* msg);\n","filename":"src\/hotspot\/share\/logging\/logFileStreamOutput.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,0 +69,32 @@\n+\n+  void test_asynclog_drop_messages() {\n+    if (AsyncLogWriter::instance() != nullptr) {\n+      const size_t sz = 100;\n+\n+      \/\/ shrink async buffer.\n+      AutoModifyRestore<size_t> saver(AsyncLogBufferSize, sz * 1024 \/*in byte*\/);\n+      LogMessage(logging) lm;\n+\n+      \/\/ write 100x more messages than its capacity in burst\n+      for (size_t i = 0; i < sz * 100; ++i) {\n+        lm.debug(\"a lot of log...\");\n+      }\n+      lm.flush();\n+    }\n+  }\n+\n+  \/\/ stdout\/stderr support\n+  bool write_to_file(const std::string& output) {\n+    FILE* f = fopen(TestLogFileName, \"w\");\n+\n+    if (f != NULL) {\n+      size_t sz = output.size();\n+      size_t written = fwrite(output.c_str(), sizeof(char), output.size(), f);\n+\n+      if (written == sz * sizeof(char)) {\n+        return fclose(f) == 0;\n+      }\n+    }\n+\n+    return false;\n+  }\n@@ -201,1 +233,1 @@\n-  const size_t sz = 100;\n+  test_asynclog_drop_messages();\n@@ -203,0 +235,1 @@\n+  AsyncLogWriter::flush();\n@@ -204,3 +237,3 @@\n-    \/\/ shrink async buffer.\n-    AutoModifyRestore<size_t> saver(AsyncLogBufferSize, sz * 1024 \/*in byte*\/);\n-    LogMessage(logging) lm;\n+    EXPECT_TRUE(file_contains_substring(TestLogFileName, \"messages dropped due to async logging\"));\n+  }\n+}\n@@ -208,6 +241,34 @@\n-    \/\/ write 100x more messages than its capacity in burst\n-    for (size_t i = 0; i < sz * 100; ++i) {\n-      lm.debug(\"a lot of log...\");\n-    }\n-    lm.flush();\n-    AsyncLogWriter::flush();\n+TEST_VM_F(AsyncLogTest, stdoutOutput) {\n+  testing::internal::CaptureStdout();\n+  set_log_config(\"stdout\", \"logging=debug\");\n+\n+  test_asynclog_ls();\n+  test_asynclog_drop_messages();\n+\n+  AsyncLogWriter::flush();\n+  EXPECT_TRUE(write_to_file(testing::internal::GetCapturedStdout()));\n+\n+  EXPECT_TRUE(file_contains_substring(TestLogFileName, \"LogStreamWithAsyncLogImpl\"));\n+  EXPECT_TRUE(file_contains_substring(TestLogFileName, \"logStream msg1-msg2-msg3\"));\n+  EXPECT_TRUE(file_contains_substring(TestLogFileName, \"logStream newline\"));\n+\n+  if (AsyncLogWriter::instance() != nullptr) {\n+    EXPECT_TRUE(file_contains_substring(TestLogFileName, \"messages dropped due to async logging\"));\n+  }\n+}\n+\n+TEST_VM_F(AsyncLogTest, stderrOutput) {\n+  testing::internal::CaptureStderr();\n+  set_log_config(\"stderr\", \"logging=debug\");\n+\n+  test_asynclog_ls();\n+  test_asynclog_drop_messages();\n+\n+  AsyncLogWriter::flush();\n+  EXPECT_TRUE(write_to_file(testing::internal::GetCapturedStderr()));\n+\n+  EXPECT_TRUE(file_contains_substring(TestLogFileName, \"LogStreamWithAsyncLogImpl\"));\n+  EXPECT_TRUE(file_contains_substring(TestLogFileName, \"logStream msg1-msg2-msg3\"));\n+  EXPECT_TRUE(file_contains_substring(TestLogFileName, \"logStream newline\"));\n+\n+  if (AsyncLogWriter::instance() != nullptr) {\n","filename":"test\/hotspot\/gtest\/logging\/test_asynclog.cpp","additions":71,"deletions":10,"binary":false,"changes":81,"status":"modified"}]}