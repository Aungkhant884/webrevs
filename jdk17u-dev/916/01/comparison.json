{"files":[{"patch":"@@ -73,0 +73,3 @@\n+<li><a href=\"#signing\">Signing<\/a><ul>\n+<li><a href=\"#macos-1\">macOS<\/a><\/li>\n+<\/ul><\/li>\n@@ -491,1 +494,1 @@\n-<p>These make control variables only make sense when running tests. Please see <a href=\"testing.html\">Testing the JDK<\/a> for details.<\/p>\n+<p>These make control variables only make sense when running tests. Please see <strong>Testing the JDK<\/strong> (<a href=\"testing.html\">html<\/a>, <a href=\"testing.md\">markdown<\/a>) for details.<\/p>\n@@ -517,1 +520,7 @@\n-<p>For more details on how to run tests, please see the <a href=\"testing.html\">Testing the JDK<\/a> document.<\/p>\n+<p>For more details on how to run tests, please see <strong>Testing the JDK<\/strong> (<a href=\"testing.html\">html<\/a>, <a href=\"testing.md\">markdown<\/a>).<\/p>\n+<h2 id=\"signing\">Signing<\/h2>\n+<h3 id=\"macos-1\">macOS<\/h3>\n+<p>Modern versions of macOS require applications to be signed and notarizied before distribution. See Apple's documentation for more background on what this means and how it works. To help support this, the JDK build can be configured to automatically sign all native binaries, and the JDK bundle, with all the options needed for successful notarization, as well as all the entitlements required by the JDK. To enable <code>hardened<\/code> signing, use configure parameter <code>--with-macosx-codesign=hardened<\/code> and configure the signing identity you wish to use with <code>--with-macosx-codesign-identity=&lt;identity&gt;<\/code>. The identity refers to a signing identity from Apple that needs to be preinstalled on the build host.<\/p>\n+<p>When not signing for distribution with the hardened option, the JDK build will still attempt to perform <code>adhoc<\/code> signing to add the special entitlement <code>com.apple.security.get-task-allow<\/code> to each binary. This entitlement is required to be able to dump core files from a process. Note that adding this entitlement makes the build invalid for notarization, so it is only added when signing in <code>debug<\/code> mode. To explicitly enable this kind of adhoc signing, use configure parameter <code>--with-macosx-codesign=debug<\/code>. It will be enabled by default in most cases.<\/p>\n+<p>It's also possible to completely disable any explicit codesign operations done by the JDK build using the configure parameter <code>--without-macosx-codesign<\/code>. The exact behavior then depends on the architecture. For macOS on x64, it (at least at the time of this writing) results in completely unsigned binaries that should still work fine for development and debugging purposes. On aarch64, the Xcode linker will apply a default &quot;adhoc&quot; signing, without any entitlements. Such a build does not allow dumping core files.<\/p>\n+<p>The default mode &quot;auto&quot; will try for <code>hardened<\/code> signing if the debug level is <code>release<\/code> and either the default identity or the specified identity is valid. If hardened isn't possible, then <code>debug<\/code> signing is chosen if it works. If nothing works, the codesign build step is disabled.<\/p>\n","filename":"doc\/building.html","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -821,1 +821,1 @@\n-[Testing the JDK](testing.html) for details.\n+**Testing the JDK** ([html](testing.html), [markdown](testing.md)) for details.\n@@ -868,2 +868,38 @@\n-For more details on how to run tests, please see the [Testing\n-the JDK](testing.html) document.\n+For more details on how to run tests, please see **Testing the JDK**\n+([html](testing.html), [markdown](testing.md)).\n+\n+## Signing\n+\n+### macOS\n+\n+Modern versions of macOS require applications to be signed and notarizied before\n+distribution. See Apple's documentation for more background on what this means\n+and how it works. To help support this, the JDK build can be configured to\n+automatically sign all native binaries, and the JDK bundle, with all the options\n+needed for successful notarization, as well as all the entitlements required by\n+the JDK. To enable `hardened` signing, use configure parameter\n+`--with-macosx-codesign=hardened` and configure the signing identity you wish to\n+use with `--with-macosx-codesign-identity=<identity>`. The identity refers to a\n+signing identity from Apple that needs to be preinstalled on the build host.\n+\n+When not signing for distribution with the hardened option, the JDK build will\n+still attempt to perform `adhoc` signing to add the special entitlement\n+`com.apple.security.get-task-allow` to each binary. This entitlement is required\n+to be able to dump core files from a process. Note that adding this entitlement\n+makes the build invalid for notarization, so it is only added when signing in\n+`debug` mode. To explicitly enable this kind of adhoc signing, use configure\n+parameter `--with-macosx-codesign=debug`. It will be enabled by default in most\n+cases.\n+\n+It's also possible to completely disable any explicit codesign operations done\n+by the JDK build using the configure parameter `--without-macosx-codesign`.\n+The exact behavior then depends on the architecture. For macOS on x64, it (at\n+least at the time of this writing) results in completely unsigned binaries that\n+should still work fine for development and debugging purposes. On aarch64, the\n+Xcode linker will apply a default \"adhoc\" signing, without any entitlements.\n+Such a build does not allow dumping core files.\n+\n+The default mode \"auto\" will try for `hardened` signing if the debug level is\n+`release` and either the default identity or the specified identity is valid.\n+If hardened isn't possible, then `debug` signing is chosen if it works. If\n+nothing works, the codesign build step is disabled.\n","filename":"doc\/building.md","additions":39,"deletions":3,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -281,10 +281,1 @@\n-  # On Macosx release builds, when there is a code signing certificate available,\n-  # the final bundle layout can be signed.\n-  SIGN_BUNDLE := false\n-  ifeq ($(call isTargetOs, macosx)+$(DEBUG_LEVEL), true+release)\n-    ifneq ($(CODESIGN), )\n-      SIGN_BUNDLE := true\n-    endif\n-  endif\n-\n-  ifeq ($(SIGN_BUNDLE), true)\n+  ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n","filename":"make\/Bundles.gmk","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -163,19 +163,17 @@\n-  AC_MSG_CHECKING([if make --output-sync is supported])\n-  if $MAKE --version -O > \/dev\/null 2>&1; then\n-    OUTPUT_SYNC_SUPPORTED=true\n-    AC_MSG_RESULT([yes])\n-    AC_MSG_CHECKING([for output-sync value])\n-    AC_ARG_WITH([output-sync], [AS_HELP_STRING([--with-output-sync],\n-      [set make output sync type if supported by make. @<:@recurse@:>@])],\n-      [OUTPUT_SYNC=$with_output_sync])\n-    if test \"x$OUTPUT_SYNC\" = \"x\"; then\n-      OUTPUT_SYNC=none\n-    fi\n-    AC_MSG_RESULT([$OUTPUT_SYNC])\n-    if ! $MAKE --version -O$OUTPUT_SYNC > \/dev\/null 2>&1; then\n-      AC_MSG_ERROR([Make did not the support the value $OUTPUT_SYNC as output sync type.])\n-    fi\n-  else\n-    OUTPUT_SYNC_SUPPORTED=false\n-    AC_MSG_RESULT([no])\n-  fi\n+  UTIL_ARG_WITH(NAME: output-sync, TYPE: literal,\n+      VALID_VALUES: [none recurse line target], DEFAULT: recurse,\n+      OPTIONAL: true, ENABLED_DEFAULT: true,\n+      ENABLED_RESULT: OUTPUT_SYNC_SUPPORTED,\n+      CHECKING_MSG: [for make --output-sync value],\n+      DESC: [set make --output-sync type if supported by make],\n+      CHECK_AVAILABLE:\n+      [\n+        AC_MSG_CHECKING([if make --output-sync is supported])\n+        if ! $MAKE --version -O > \/dev\/null 2>&1; then\n+          AC_MSG_RESULT([no])\n+          AVAILABLE=false\n+        else\n+          AC_MSG_RESULT([yes])\n+        fi\n+      ]\n+  )\n@@ -381,37 +379,0 @@\n-\n-    if test \"x$CODESIGN\" != \"x\"; then\n-      # Check for user provided code signing identity.\n-      # If no identity was provided, fall back to \"openjdk_codesign\".\n-      AC_ARG_WITH([macosx-codesign-identity], [AS_HELP_STRING([--with-macosx-codesign-identity],\n-        [specify the code signing identity])],\n-        [MACOSX_CODESIGN_IDENTITY=$with_macosx_codesign_identity],\n-        [MACOSX_CODESIGN_IDENTITY=openjdk_codesign]\n-      )\n-\n-      AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n-\n-      # Verify that the codesign certificate is present\n-      AC_MSG_CHECKING([if codesign certificate is present])\n-      $RM codesign-testfile\n-      $TOUCH codesign-testfile\n-      $CODESIGN -s \"$MACOSX_CODESIGN_IDENTITY\" codesign-testfile 2>&AS_MESSAGE_LOG_FD \\\n-          >&AS_MESSAGE_LOG_FD || CODESIGN=\n-      $RM codesign-testfile\n-      if test \"x$CODESIGN\" = x; then\n-        AC_MSG_RESULT([no])\n-      else\n-        AC_MSG_RESULT([yes])\n-        # Verify that the codesign has --option runtime\n-        AC_MSG_CHECKING([if codesign has --option runtime])\n-        $RM codesign-testfile\n-        $TOUCH codesign-testfile\n-        $CODESIGN --option runtime -s \"$MACOSX_CODESIGN_IDENTITY\" codesign-testfile \\\n-            2>&AS_MESSAGE_LOG_FD >&AS_MESSAGE_LOG_FD || CODESIGN=\n-        $RM codesign-testfile\n-        if test \"x$CODESIGN\" = x; then\n-          AC_MSG_ERROR([codesign does not have --option runtime. macOS 10.13.6 and above is required.])\n-        else\n-          AC_MSG_RESULT([yes])\n-        fi\n-      fi\n-    fi\n","filename":"make\/autoconf\/basic_tools.m4","additions":17,"deletions":56,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+JDKOPT_SETUP_MACOSX_SIGNING\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -730,0 +730,102 @@\n+\n+################################################################################\n+#\n+# Setup signing on macOS. This can either be setup to sign with a real identity\n+# and enabling the hardened runtime, or it can simply add the debug entitlement\n+# com.apple.security.get-task-allow without actually signing any binaries. The\n+# latter is needed to be able to debug processes and dump core files on modern\n+# versions of macOS. It can also be skipped completely.\n+#\n+# Check if codesign will run with the given parameters\n+# $1: Parameters to run with\n+# $2: Checking message\n+# Sets CODESIGN_SUCCESS=true\/false\n+AC_DEFUN([JDKOPT_CHECK_CODESIGN_PARAMS],\n+[\n+  PARAMS=\"$1\"\n+  MESSAGE=\"$2\"\n+  CODESIGN_TESTFILE=\"$CONFIGURESUPPORT_OUTPUTDIR\/codesign-testfile\"\n+  $RM \"$CODESIGN_TESTFILE\"\n+  $TOUCH \"$CODESIGN_TESTFILE\"\n+  CODESIGN_SUCCESS=false\n+  $CODESIGN $PARAMS \"$CODESIGN_TESTFILE\" 2>&AS_MESSAGE_LOG_FD \\\n+      >&AS_MESSAGE_LOG_FD && CODESIGN_SUCCESS=true\n+  $RM \"$CODESIGN_TESTFILE\"\n+  AC_MSG_CHECKING([$MESSAGE])\n+  if test \"x$CODESIGN_SUCCESS\" = \"xtrue\"; then\n+    AC_MSG_RESULT([yes])\n+  else\n+    AC_MSG_RESULT([no])\n+  fi\n+])\n+\n+AC_DEFUN([JDKOPT_CHECK_CODESIGN_HARDENED],\n+[\n+  JDKOPT_CHECK_CODESIGN_PARAMS([-s \"$MACOSX_CODESIGN_IDENTITY\" --option runtime],\n+      [if codesign with hardened runtime is possible])\n+])\n+\n+AC_DEFUN([JDKOPT_CHECK_CODESIGN_DEBUG],\n+[\n+  JDKOPT_CHECK_CODESIGN_PARAMS([-s -], [if debug mode codesign is possible])\n+])\n+\n+AC_DEFUN([JDKOPT_SETUP_MACOSX_SIGNING],\n+[\n+  ENABLE_CODESIGN=false\n+  if test \"x$OPENJDK_TARGET_OS\" = \"xmacosx\" && test \"x$CODESIGN\" != \"x\"; then\n+\n+    UTIL_ARG_WITH(NAME: macosx-codesign, TYPE: literal, OPTIONAL: true,\n+        VALID_VALUES: [hardened debug auto], DEFAULT: auto,\n+        ENABLED_DEFAULT: true,\n+        CHECKING_MSG: [for macosx code signing mode],\n+        DESC: [set the macosx code signing mode (hardened, debug, auto)]\n+    )\n+\n+    MACOSX_CODESIGN_MODE=disabled\n+    if test \"x$MACOSX_CODESIGN_ENABLED\" = \"xtrue\"; then\n+\n+      # Check for user provided code signing identity.\n+      UTIL_ARG_WITH(NAME: macosx-codesign-identity, TYPE: string,\n+          DEFAULT: openjdk_codesign, CHECK_VALUE: UTIL_CHECK_STRING_NON_EMPTY,\n+          DESC: [specify the macosx code signing identity],\n+          CHECKING_MSG: [for macosx code signing identity]\n+      )\n+      AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n+\n+      if test \"x$MACOSX_CODESIGN\" = \"xauto\"; then\n+        # Only try to default to hardened signing on release builds\n+        if test \"x$DEBUG_LEVEL\" = \"xrelease\"; then\n+          JDKOPT_CHECK_CODESIGN_HARDENED\n+          if test \"x$CODESIGN_SUCCESS\" = \"xtrue\"; then\n+            MACOSX_CODESIGN_MODE=hardened\n+          fi\n+        fi\n+        if test \"x$MACOSX_CODESIGN_MODE\" = \"xdisabled\"; then\n+          JDKOPT_CHECK_CODESIGN_DEBUG\n+          if test \"x$CODESIGN_SUCCESS\" = \"xtrue\"; then\n+            MACOSX_CODESIGN_MODE=debug\n+          fi\n+        fi\n+        AC_MSG_CHECKING([for macosx code signing mode])\n+        AC_MSG_RESULT([$MACOSX_CODESIGN_MODE])\n+      elif test \"x$MACOSX_CODESIGN\" = \"xhardened\"; then\n+        JDKOPT_CHECK_CODESIGN_HARDENED\n+        if test \"x$CODESIGN_SUCCESS\" = \"xfalse\"; then\n+          AC_MSG_ERROR([Signing with hardened runtime is not possible])\n+        fi\n+        MACOSX_CODESIGN_MODE=hardened\n+      elif test \"x$MACOSX_CODESIGN\" = \"xdebug\"; then\n+        JDKOPT_CHECK_CODESIGN_DEBUG\n+        if test \"x$CODESIGN_SUCCESS\" = \"xfalse\"; then\n+          AC_MSG_ERROR([Signing in debug mode is not possible])\n+        fi\n+        MACOSX_CODESIGN_MODE=debug\n+      else\n+        AC_MSG_ERROR([unknown value for --with-macosx-codesign: $MACOSX_CODESIGN])\n+      fi\n+    fi\n+    AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n+    AC_SUBST(MACOSX_CODESIGN_MODE)\n+  fi\n+])\n","filename":"make\/autoconf\/jdk-options.m4","additions":102,"deletions":0,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -446,1 +446,2 @@\n-# The macosx code signing identity to use\n+# The macosx code signing configuration\n+MACOSX_CODESIGN_MODE:=@MACOSX_CODESIGN_MODE@\n","filename":"make\/autoconf\/spec.gmk.in","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-# is not available, as specified by AVAILABLE and\/or AVAILABLE_CHECK.\n+# is not available, as specified by AVAILABLE and\/or CHECK_AVAILABLE.\n@@ -333,1 +333,1 @@\n-#     <NAME in uppercase>_RESULT.\n+#     <NAME in uppercase>_ENABLED.\n@@ -379,1 +379,1 @@\n-  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --enable-ARG_NAME], ARG_CHECKING_MSG))\n+  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --enable-ARG_NAME], m4_normalize(ARG_CHECKING_MSG)))\n@@ -466,0 +466,348 @@\n+###############################################################################\n+# Helper functions for ARG_WITH, to validate different types of argument\n+\n+# Dispatcher to call the correct UTIL_CHECK_TYPE_* function depending on the ARG_TYPE\n+AC_DEFUN([UTIL_CHECK_TYPE],\n+[\n+  UTIL_CHECK_TYPE_$1($2)\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_string],\n+[\n+  # All strings always passes\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_integer],\n+[\n+  # Check that the argument is an integer\n+  # Additional [] needed to keep m4 from mangling shell constructs.\n+  [ if [[ ! \"$1\" =~ ^[0-9]+$ ]] ; then ]\n+    FAILURE=\"Not an integer: $1\"\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_file],\n+[\n+  # Check that the argument is an existing file\n+  if test ! -f \"$1\" ; then\n+    FAILURE=\"File $1 does not exist or is not readable\"\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_directory],\n+[\n+  # Check that the argument is an existing directory\n+  if test ! -d \"$1\" ; then\n+    FAILURE=\"Directory $1 does not exist or is not readable\"\n+  fi\n+\n+  if test \"[x]ARG_CHECK_FOR_FILES\" != x; then\n+    for file in ARG_CHECK_FOR_FILES; do\n+      found_files=$($ECHO $(ls $1\/$file 2> \/dev\/null))\n+      if test \"x$found_files\" = x; then\n+        FAILURE=\"Directory $1 does not contain $file\"\n+        break\n+      elif ! test -e \"$found_files\"; then\n+        FAILURE=\"Directory $1 contains multiple $file: $found_files\"\n+        break\n+      fi\n+    done\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_literal],\n+[\n+  # Check if it contains a space between non-space characters\n+  # Additional [] needed to keep m4 from mangling shell constructs.\n+  [ if [[ \"$1\" =~ [^' ']' '+[^' '] ]] ; then ]\n+    FAILURE=\"Multiple words: $1\"\n+  fi\n+\n+  # Check that the selected variants are valid\n+  UTIL_GET_NON_MATCHING_VALUES(invalid_value, $1, \\\n+      ARG_VALID_VALUES)\n+  if test \"x$invalid_value\" != x; then\n+    FAILURE=\"Invalid value: $invalid_value. Valid values are: ARG_VALID_VALUES\"\n+  fi\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_multivalue],\n+[\n+  # We accept either space or comma as separator, but use space internally\n+  values=`$ECHO $1 | $SED -e 's\/,\/ \/g'`\n+\n+  # Check that the selected variants are valid\n+  UTIL_GET_NON_MATCHING_VALUES(invalid_value, $values, \\\n+      ARG_VALID_VALUES)\n+  if test \"x$invalid_value\" != x; then\n+    FAILURE=\"Invalid value(s): $invalid_value. Valid values are: ARG_VALID_VALUES\"\n+  fi\n+\n+  # Update to version without comma\n+  ARG_RESULT=$($ECHO $values)\n+])\n+\n+AC_DEFUN([UTIL_CHECK_TYPE_features],\n+[\n+  # We accept either space or comma as separator, but use space internally\n+  feature_list=`$ECHO $1 | $SED -e 's\/,\/ \/g'`\n+  features_enabled=`$ECHO $feature_list | \\\n+    $AWK '{ for (i=1; i<=NF; i++) if (!match($i, \/^-.*\/)) printf(\"%s \", $i) }'`\n+  features_disabled=`$ECHO $feature_list | \\\n+    $AWK '{ for (i=1; i<=NF; i++) if (match($i, \/^-.*\/)) printf(\"%s \", substr($i, 2))}'`\n+\n+  # Check that the selected features are valid\n+  UTIL_GET_NON_MATCHING_VALUES(invalid_features, $features_enabled \\\n+        $features_disabled, ARG_VALID_VALUES)\n+  if test \"x$invalid_features\" != x; then\n+    FAILURE=\"Invalid feature(s): $invalid_features. Valid values are: ARG_VALID_VALUES\"\n+  fi\n+\n+  # Update to version without comma\n+  ARG_RESULT=$($ECHO $feature_list)\n+])\n+\n+###############################################################################\n+# Creates a command-line option using the --with-* pattern. Will return a\n+# string in the RESULT variable with the option provided by the user, or the\n+# empty string if the --with-* option was not given. The option can not be given\n+# if it is not available, as specified by AVAILABLE and\/or CHECK_AVAILABLE.\n+#\n+# Arguments:\n+#   NAME: The base name of this option (i.e. what follows --with-). Required.\n+#   TYPE: The type of the value. Can be one of \"string\", \"integer\", \"file\",\n+#     \"directory\", \"literal\", \"multivalue\" or \"features\". Required.\n+#   DEFAULT: The default value for this option. Can be any valid string.\n+#     Required.\n+#   OPTIONAL: If this feature can be disabled. Defaults to false. If true,\n+#     the feature can be disabled using --without-FOO, --with-FOO=no, or\n+#     --with-FOO=. Check the ENABLED_RESULT variable for the enabled\/disabled\n+#     state.\n+#   RESULT: The name of the variable to set to the result. Defaults to\n+#     <NAME in uppercase>. Set to empty if ENABLED_RESULT is false.\n+#   ENABLED_DEFAULT: If the value is enabled by default. Defaults to false. Only\n+#     relevant if OPTIONAL is true.\n+#   ENABLED_RESULT: The name of the variable to set to the enabled\/disabled\n+#     result state. Defaults to <NAME in uppercase>_ENABLED.\n+#   AVAILABLE: If true, this option is allowed to be selected. Defaults to true.\n+#   DESC: A description of this option. Defaults to a generic and unhelpful\n+#     string.\n+#   DEFAULT_DESC: A message describing the default value, for the help. Defaults\n+#     to the literal value of DEFAULT, or \"<none>\" if DEFAULT is empty.\n+#   CHECKING_MSG: The message to present to user when checking this option.\n+#     Defaults to a generic message.\n+#   CHECK_AVAILABLE: An optional code block to execute to determine if the\n+#     option should be available. Must set AVAILABLE to 'false' if not.\n+#   VALID_VALUES: A list of literals that are the allowed values. Only valid if\n+#     TYPE is \"literal\", \"multivalue\" or \"features\".\n+#   CHECK_VALUE: An optional code block to execute to determine if the value\n+#     is correct. Must set FAILURE to a non-empty string if not. This string\n+#     will be displayed. The value is given in $RESULT.\n+#   CHECK_FOR_FILES: A list of files to verify the presence for. Only valid if\n+#     TYPE is \"directory\". Paths are relative the directory given as value.\n+#     Wildcards are accepted. Exactly one matching file must be found, for each\n+#     listed file, or FAILURE is set.\n+#   IF_AUTO: An optional code block to execute if the value is \"auto\", either by\n+#     default or given by the command line. Must set RESULT to the calculated\n+#     value.\n+#   IF_GIVEN:  An optional code block to execute if the option was given on the\n+#     command line (regardless of the value).\n+#   IF_NOT_GIVEN:  An optional code block to execute if the option was not given\n+#     on the command line (regardless of the value).\n+#\n+UTIL_DEFUN_NAMED([UTIL_ARG_WITH],\n+    [*NAME *TYPE *DEFAULT OPTIONAL RESULT ENABLED_DEFAULT ENABLED_RESULT\n+    AVAILABLE DESC DEFAULT_DESC CHECKING_MSG CHECK_AVAILABLE VALID_VALUES\n+    CHECK_VALUE CHECK_FOR_FILES IF_AUTO IF_GIVEN IF_NOT_GIVEN], [$@],\n+[\n+  ##########################\n+  # Part 1: Set up m4 macros\n+  ##########################\n+\n+  # If ENABLED_DEFAULT is not specified, set it to 'false'.\n+  m4_define([ARG_ENABLED_DEFAULT], m4_if(ARG_ENABLED_DEFAULT, , false, ARG_ENABLED_DEFAULT))\n+\n+  # If AVAILABLE is not specified, set it to 'true'.\n+  m4_define([ARG_AVAILABLE], m4_if(ARG_AVAILABLE, , true, ARG_AVAILABLE))\n+\n+  # If OPTIONAL is not specified, set it to 'false'.\n+  m4_define([ARG_OPTIONAL], m4_if(ARG_OPTIONAL, , false, ARG_OPTIONAL))\n+\n+  # If DEFAULT_DESC is not specified, calculate it from DEFAULT.\n+  m4_define([ARG_DEFAULT_DESC], m4_if(ARG_DEFAULT_DESC, , m4_if(ARG_DEFAULT, , <none>, ARG_DEFAULT), ARG_DEFAULT_DESC))\n+\n+  # If RESULT is not specified, set it to 'ARG_NAME'.\n+  m4_define([ARG_RESULT], m4_if(ARG_RESULT, , m4_translit(ARG_NAME, [a-z-], [A-Z_]), ARG_RESULT))\n+\n+  # If ENABLED_RESULT is not specified, set it to 'ARG_NAME[_ENABLED]'.\n+  m4_define([ARG_ENABLED_RESULT], m4_if(ARG_ENABLED_RESULT, , m4_translit(ARG_NAME, [a-z-], [A-Z_])[_ENABLED], ARG_ENABLED_RESULT))\n+\n+  # Construct shell variable names for the option\n+  m4_define(ARG_OPTION, [with_]m4_translit(ARG_NAME, [-], [_]))\n+  m4_define(ARG_GIVEN, m4_translit(ARG_NAME, [a-z-], [A-Z_])[_GIVEN])\n+\n+  # If DESC is not specified, set it to a generic description.\n+  m4_define([ARG_DESC], m4_if(ARG_DESC, , [Give a value for the ARG_NAME feature], m4_normalize(ARG_DESC)))\n+\n+  # If CHECKING_MSG is not specified, set it to a generic description.\n+  m4_define([ARG_CHECKING_MSG], m4_if(ARG_CHECKING_MSG, , [for --with-ARG_NAME], m4_normalize(ARG_CHECKING_MSG)))\n+\n+  m4_define([ARG_HAS_AUTO_BLOCK], m4_if(ARG_IF_AUTO, , false, true))\n+\n+  # If the code blocks are not given, set them to the empty statements to avoid\n+  # tripping up bash.\n+  m4_define([ARG_CHECK_AVAILABLE], m4_if(ARG_CHECK_AVAILABLE, , :, ARG_CHECK_AVAILABLE))\n+  m4_define([ARG_CHECK_VALUE], m4_if(ARG_CHECK_VALUE, , :, ARG_CHECK_VALUE))\n+  m4_define([ARG_CHECK_FOR_FILES], m4_if(ARG_CHECK_FOR_FILES, , :, ARG_CHECK_FOR_FILES))\n+  m4_define([ARG_IF_AUTO], m4_if(ARG_IF_AUTO, , :, ARG_IF_AUTO))\n+  m4_define([ARG_IF_GIVEN], m4_if(ARG_IF_GIVEN, , :, ARG_IF_GIVEN))\n+  m4_define([ARG_IF_NOT_GIVEN], m4_if(ARG_IF_NOT_GIVEN, , :, ARG_IF_NOT_GIVEN))\n+\n+  ##########################\n+  # Part 2: Set up autoconf shell code\n+  ##########################\n+\n+  # Check that OPTIONAL has a valid value\n+  if test \"[x]ARG_OPTIONAL\" != xtrue && test \"[x]ARG_OPTIONAL\" != xfalse ; then\n+    AC_MSG_ERROR([Internal error: Argument OPTIONAL to [UTIL_ARG_WITH] can only be true or false, was: 'ARG_OPTIONAL'])\n+  fi\n+\n+  # Check that ENABLED_DEFAULT has a valid value\n+  if test \"[x]ARG_ENABLED_DEFAULT\" != xtrue && test \"[x]ARG_ENABLED_DEFAULT\" != xfalse ; then\n+    AC_MSG_ERROR([Internal error: Argument ENABLED_DEFAULT to [UTIL_ARG_WITH] can only be true or false, was: 'ARG_ENABLED_DEFAULT'])\n+  fi\n+\n+  # Check that AVAILABLE has a valid value\n+  if test \"[x]ARG_AVAILABLE\" != xtrue && test \"[x]ARG_AVAILABLE\" != xfalse; then\n+    AC_MSG_ERROR([Internal error: Argument AVAILABLE to [UTIL_ARG_WITH] can only be true or false, was: 'ARG_AVAILABLE'])\n+  fi\n+\n+  # Check that TYPE has a valid value\n+  # Need to assign since we can't expand ARG TYPE inside the m4 quoted if statement\n+  TEST_TYPE=\"ARG_TYPE\"\n+  # Additional [] needed to keep m4 from mangling shell constructs.\n+  [ if [[ ! \"$TEST_TYPE\" =~ ^(string|integer|file|directory|literal|multivalue|features)$ ]] ; then ]\n+    AC_MSG_ERROR([Internal error: Argument TYPE to [UTIL_ARG_WITH] must be a valid type, was: 'ARG_TYPE'])\n+  fi\n+\n+  AC_ARG_WITH(ARG_NAME, AS_HELP_STRING([--with-]ARG_NAME,\n+      [ARG_DESC [ARG_DEFAULT_DESC]]), [ARG_GIVEN=true], [ARG_GIVEN=false])\n+\n+  # Check if the option is available\n+  AVAILABLE=ARG_AVAILABLE\n+  # Run the available check block (if any), which can overwrite AVAILABLE.\n+  ARG_CHECK_AVAILABLE\n+\n+  # Check if the option should be turned on\n+  echo check msg:ARG_CHECKING_MSG:\n+  AC_MSG_CHECKING(ARG_CHECKING_MSG)\n+\n+  if test x$AVAILABLE = xfalse; then\n+    ARG_RESULT=\"$ARG_OPTION\"\n+    ARG_ENABLED_RESULT=false\n+    REASON=\"not available\"\n+  else\n+    if test x$ARG_GIVEN = xfalse; then\n+      ARG_RESULT=\"ARG_DEFAULT\"\n+      if test \"[x]ARG_OPTIONAL\" = xtrue; then\n+        ARG_ENABLED_RESULT=ARG_ENABLED_DEFAULT\n+      else\n+        ARG_ENABLED_RESULT=true\n+      fi\n+      REASON=\"default\"\n+\n+    else # ARG_GIVEN is true\n+      # Special treatment of \"yes\" and \"no\" for \"--with-ARG\" and \"--without-ARG\"\n+      if test \"x$ARG_OPTION\" = xyes || test \"x$ARG_OPTION\" = xno || test \"x$ARG_OPTION\" = x ; then\n+        if test \"[x]ARG_OPTIONAL\" = xfalse; then\n+          if test \"x$ARG_OPTION\" = x; then\n+            # If not optional, the empty string is a valid value\n+            ARG_RESULT=\"\"\n+            ARG_ENABLED_RESULT=true\n+            REASON=\"from command line\"\n+          else\n+            AC_MSG_RESULT([invalid])\n+            AC_MSG_ERROR([Option [--with-]ARG_NAME must have a specified value])\n+          fi\n+        else\n+          if test \"x$ARG_OPTION\" = xyes; then\n+            ARG_RESULT=\"ARG_DEFAULT\"\n+            ARG_ENABLED_RESULT=true\n+            REASON=\"default as enabled from command line\"\n+          else\n+            # For optional values, both --without-FOO and --with-FOO= disables\n+            ARG_RESULT=\"\"\n+            ARG_ENABLED_RESULT=false\n+            REASON=\"from command line\"\n+          fi\n+        fi\n+      else\n+        # The most common case -- the user gives a value for the option.\n+        ARG_RESULT=\"$ARG_OPTION\"\n+        ARG_ENABLED_RESULT=true\n+        REASON=\"from command line\"\n+      fi\n+    fi\n+  fi\n+\n+  if test \"x$ARG_ENABLED_RESULT\" = xfalse; then\n+    if test \"x$REASON\" = \"xnot available\"; then\n+      AC_MSG_RESULT([<invalid>, $REASON])\n+      if test \"x$ARG_RESULT\" != \"x\" && test \"x$ARG_RESULT\" != \"xno\" ; then\n+        AC_MSG_WARN([Option [--with-]ARG_NAME is not available for this configuration])\n+      fi\n+    else\n+      AC_MSG_RESULT([<disabled>, $REASON])\n+    fi\n+    ARG_RESULT=\"\"\n+  else\n+    if test [x]ARG_HAS_AUTO_BLOCK = xtrue && test \"x$ARG_RESULT\" = xauto; then\n+      # Execute \"auto\" payload\n+      ARG_IF_AUTO\n+\n+      ARG_RESULT=\"$RESULT\"\n+      REASON=\"$REASON (calculated from 'auto')\"\n+    fi\n+\n+    if test \"x$ARG_RESULT\" = x; then\n+      AC_MSG_RESULT([<none>, $REASON])\n+    else\n+      AC_MSG_RESULT([$ARG_RESULT, $REASON])\n+    fi\n+  fi\n+\n+  # Verify value\n+  # First use our dispatcher to verify that type requirements are satisfied\n+  UTIL_CHECK_TYPE(ARG_TYPE, $ARG_RESULT)\n+\n+  if test \"x$FAILURE\" = x; then\n+    # Execute custom verification payload, if present\n+    RESULT=\"$ARG_RESULT\"\n+\n+    ARG_CHECK_VALUE\n+\n+    ARG_RESULT=\"$RESULT\"\n+  fi\n+\n+  if test \"x$FAILURE\" != x; then\n+    AC_MSG_NOTICE([Invalid value for [--with-]ARG_NAME: \"$ARG_RESULT\"])\n+    AC_MSG_NOTICE([$FAILURE])\n+    AC_MSG_ERROR([Cannot continue])\n+  fi\n+\n+  # Execute result payloads, if present\n+  if test x$ARG_GIVEN = xtrue; then\n+    ARG_IF_GIVEN\n+  else\n+    ARG_IF_NOT_GIVEN\n+  fi\n+])\n+\n+###############################################################################\n+# Helper functions for CHECK_VALUE in ARG_WITH.\n+AC_DEFUN([UTIL_CHECK_STRING_NON_EMPTY],\n+[\n+  if test \"x$RESULT\" = \"x\"; then\n+    FAILURE=\"Value cannot be empty\"\n+  fi\n+])\n","filename":"make\/autoconf\/util.m4","additions":351,"deletions":3,"binary":false,"changes":354,"status":"modified"},{"patch":"@@ -270,1 +270,6 @@\n-DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default.plist\n+ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+  CODESIGN_PLIST_SUFFIX := -debug\n+else\n+  CODESIGN_PLIST_SUFFIX :=\n+endif\n+DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default$(CODESIGN_PLIST_SUFFIX).plist\n@@ -273,1 +278,1 @@\n-    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1)).plist, \\\n+    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1))$(CODESIGN_PLIST_SUFFIX).plist, \\\n@@ -1209,3 +1214,2 @@\n-                # This only works if the openjdk_codesign identity is present on the system. Let\n-                # silently fail otherwise.\n-                ifneq ($(CODESIGN), )\n+                # On macosx, optionally run codesign on every binary\n+                ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n@@ -1214,0 +1218,2 @@\n+                else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+\t\t  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@\n","filename":"make\/common\/NativeCompilation.gmk","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-    <key>com.apple.security.device.audio-input<\/key>\n+    <key>com.apple.security.get-task-allow<\/key>\n","filename":"make\/data\/macosxsigning\/default-debug.plist","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"make\/data\/macosxsigning\/java.plist","status":"copied"},{"patch":"@@ -5,2 +5,0 @@\n-    <key>com.apple.security.app-sandbox<\/key>\n-    <true\/>\n@@ -19,0 +17,2 @@\n+    <key>com.apple.security.get-task-allow<\/key>\n+    <true\/>\n","filename":"make\/data\/macosxsigning\/java-debug.plist","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/sandbox.plist","status":"copied"}]}