{"files":[{"patch":"@@ -1560,0 +1560,9 @@\n+  if (peel_only) {\n+    \/\/ Nodes in the peeled iteration that were marked as reductions within the\n+    \/\/ original loop might not be reductions within their new outer loop.\n+    for (uint i = 0; i < loop->_body.size(); i++) {\n+      Node* n = old_new[loop->_body[i]->_idx];\n+      n->remove_flag(Node::Flag_is_reduction);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3412,0 +3412,11 @@\n+#ifdef ASSERT\n+bool IdealLoopTree::has_reduction_nodes() const {\n+  for (uint i = 0; i < _body.size(); i++) {\n+    if (_body[i]->is_reduction()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -780,0 +780,5 @@\n+#ifdef ASSERT\n+  \/\/ Tell whether the body contains nodes marked as reductions.\n+  bool has_reduction_nodes() const;\n+#endif \/\/ ASSERT\n+\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -113,0 +113,2 @@\n+  assert(!lpt->has_reduction_nodes() || cl->is_reduction_loop(),\n+         \"non-reduction loop contains reduction nodes\");\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8279622\n+ * @summary Test that reduction nodes peeled out of an inner loop are not\n+ *          vectorized as reductions within the outer loop.\n+ * @library \/test\/lib\n+ * @comment The test is run with -XX:LoopUnrollLimit=32 to prevent unrolling\n+ *          from fully replacing vectorization.\n+ * @run main\/othervm -Xbatch -XX:LoopUnrollLimit=32\n+ *      compiler.loopopts.superword.TestPeeledReductionNode\n+ *\/\n+package compiler.loopopts.superword;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestPeeledReductionNode {\n+    static final int N = 32;\n+    static final int M = 65; \/\/ Must be odd and >= 65 to trigger the failure.\n+    static final int INPUT = 0b0000_0000_0000_0000_0000_0000_0000_0001;\n+    static final int MASK  = 0b0000_0000_1000_0000_0000_0000_0000_0000;\n+    static final int EXPECTED = (M % 2 == 0 ? INPUT : INPUT ^ MASK);\n+    static int mask = 0;\n+    public static void main(String[] args) {\n+        int r[] = new int[N];\n+        for (int i = 0; i < N; i++) {\n+            r[i] = INPUT;\n+        }\n+        \/\/ Trigger the relevant OSR compilation and set\n+        \/\/ TestPeeledReductionNode.mask to MASK.\n+        for (int k = 0; k < MASK; k++) {\n+            TestPeeledReductionNode.mask++;\n+        }\n+        for (int i = 0; i < N; i++) {\n+            for (int j = 0; j < M; j++) {\n+                \/\/ Before the fix, this reduction is peeled out of its loop and\n+                \/\/ wrongly remains marked as a reduction within the outer loop.\n+                r[i] ^= TestPeeledReductionNode.mask;\n+            }\n+        }\n+        for (int i = 0; i < N; i++) {\n+            Asserts.assertEquals(r[i], EXPECTED);\n+        }\n+        return;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestPeeledReductionNode.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}