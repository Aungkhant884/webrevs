{"files":[{"patch":"@@ -104,1 +104,6 @@\n-        SNIHostName sniHostName = null;\n+        \/\/ Is it a Fully-Qualified Domain Names (FQDN) ending with a dot?\n+        if (hostname != null && hostname.endsWith(\".\")) {\n+            \/\/ Remove the ending dot, which is not allowed in SNIHostName.\n+            hostname = hostname.substring(0, hostname.length() - 1);\n+        }\n+\n@@ -111,1 +116,1 @@\n-                sniHostName = new SNIHostName(hostname);\n+                return new SNIHostName(hostname);\n@@ -121,1 +126,1 @@\n-        return sniHostName;\n+        return null;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/Utilities.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -407,0 +407,6 @@\n+        \/\/ Is it a Fully-Qualified Domain Names (FQDN) ending with a dot?\n+        if (peerHost != null && peerHost.endsWith(\".\")) {\n+            \/\/ Remove the ending dot, which is not allowed in SNIHostName.\n+            peerHost = peerHost.substring(0, peerHost.length() - 1);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509TrustManagerImpl.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,251 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8065422\n+ * @summary Trailing dot in hostname causes TLS handshake to fail\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm --add-opens java.base\/sun.security.ssl=ALL-UNNAMED\n+ *      -Djdk.net.hosts.file=hostsForExample EndingDotHostname\n+ *\/\n+\n+import javax.net.ssl.*;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.*;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class EndingDotHostname {\n+    public static void main(String[] args) throws Exception {\n+        System.setProperty(\"jdk.net.hosts.file\", \"hostsForExample\");\n+        (new EndingDotHostname()).run();\n+    }\n+\n+    public void run() throws Exception {\n+        bootUp();\n+    }\n+\n+    \/\/ =================================================\n+    \/\/ Stuffs to boot up the client-server mode testing.\n+    private Thread serverThread = null;\n+    private volatile Exception serverException = null;\n+    private volatile Exception clientException = null;\n+\n+    \/\/ Is the server ready to serve?\n+    protected final CountDownLatch serverCondition = new CountDownLatch(1);\n+\n+    \/\/ Is the client ready to handshake?\n+    protected final CountDownLatch clientCondition = new CountDownLatch(1);\n+\n+    \/\/ What's the server port?  Use any free port by default\n+    protected volatile int serverPort = 0;\n+\n+    \/\/ Boot up the testing, used to drive remainder of the test.\n+    private void bootUp() throws Exception {\n+        Exception startException = null;\n+        try {\n+            startServer();\n+            startClient();\n+        } catch (Exception e) {\n+            startException = e;\n+        }\n+\n+        \/\/ Wait for other side to close down.\n+        if (serverThread != null) {\n+            serverThread.join();\n+        }\n+\n+        \/\/ The test is pretty much over. Which side threw an exception?\n+        Exception local = clientException;\n+        Exception remote = serverException;\n+\n+        Exception exception = null;\n+\n+        \/\/ Check various exception conditions.\n+        if ((local != null) && (remote != null)) {\n+            \/\/ If both failed, return the curthread's exception.\n+            local.initCause(remote);\n+            exception = local;\n+        } else if (local != null) {\n+            exception = local;\n+        } else if (remote != null) {\n+            exception = remote;\n+        } else if (startException != null) {\n+            exception = startException;\n+        }\n+\n+        \/\/ If there was an exception *AND* a startException, output it.\n+        if (exception != null) {\n+            if (exception != startException && startException != null) {\n+                exception.addSuppressed(startException);\n+            }\n+            throw exception;\n+        }\n+\n+        \/\/ Fall-through: no exception to throw!\n+    }\n+\n+    private void startServer() {\n+        serverThread = new Thread(() -> {\n+            try {\n+                doServerSide();\n+            } catch (Exception e) {\n+                \/\/ Our server thread just died. Release the client,\n+                \/\/ if not active already...\n+                serverException = e;\n+            }\n+        });\n+\n+        serverThread.start();\n+    }\n+\n+    private void startClient() {\n+        try {\n+            doClientSide();\n+        } catch (Exception e) {\n+            clientException = e;\n+        }\n+    }\n+\n+    protected void doServerSide() throws Exception {\n+        \/\/ kick off the server side service\n+        SSLContext context = SSLExampleCert.createServerSSLContext();\n+        SSLServerSocketFactory sslssf = context.getServerSocketFactory();\n+\n+        SSLServerSocket sslServerSocket =\n+                (SSLServerSocket)sslssf.createServerSocket();\n+        sslServerSocket.bind(new InetSocketAddress(\n+                InetAddress.getLoopbackAddress(), 0));\n+        serverPort = sslServerSocket.getLocalPort();\n+\n+        \/\/ Signal the client, the server is ready to accept connection.\n+        serverCondition.countDown();\n+\n+        \/\/ Try to accept a connection in 30 seconds.\n+        SSLSocket sslSocket;\n+        try {\n+            sslServerSocket.setSoTimeout(30000);\n+            sslSocket = (SSLSocket)sslServerSocket.accept();\n+        } catch (SocketTimeoutException ste) {\n+            \/\/ Ignore the test case if no connection within 30 seconds.\n+            System.out.println(\n+                    \"No incoming client connection in 30 seconds. \" +\n+                            \"Ignore in server side.\");\n+            return;\n+        } finally {\n+            sslServerSocket.close();\n+        }\n+\n+        \/\/ handle the connection\n+        try {\n+            \/\/ Is it the expected client connection?\n+            \/\/\n+            \/\/ Naughty test cases or third party routines may try to\n+            \/\/ connection to this server port unintentionally.  In\n+            \/\/ order to mitigate the impact of unexpected client\n+            \/\/ connections and avoid intermittent failure, it should\n+            \/\/ be checked that the accepted connection is really linked\n+            \/\/ to the expected client.\n+            boolean clientIsReady =\n+                    clientCondition.await(30L, TimeUnit.SECONDS);\n+\n+            if (clientIsReady) {\n+                \/\/ Run the application in server side.\n+                runServerApplication(sslSocket);\n+            } else {    \/\/ Otherwise, ignore\n+                \/\/ We don't actually care about plain socket connections\n+                \/\/ for TLS communication testing generally.  Just ignore\n+                \/\/ the test if the accepted connection is not linked to\n+                \/\/ the expected client or the client connection timeout\n+                \/\/ in 30 seconds.\n+                System.out.println(\n+                        \"The client is not the expected one or timeout. \" +\n+                                \"Ignore in server side.\");\n+            }\n+        } finally {\n+            sslSocket.close();\n+        }\n+    }\n+\n+    \/\/ Define the server side application of the test for the specified socket.\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n+        \/\/ here comes the test logic\n+        InputStream sslIS = socket.getInputStream();\n+        OutputStream sslOS = socket.getOutputStream();\n+\n+        sslIS.read();\n+        sslOS.write(85);\n+        sslOS.flush();\n+    }\n+\n+    protected void doClientSide() throws Exception {\n+        \/\/ Wait for server to get started.\n+        \/\/\n+        \/\/ The server side takes care of the issue if the server cannot\n+        \/\/ get started in 90 seconds.  The client side would just ignore\n+        \/\/ the test case if the serer is not ready.\n+        boolean serverIsReady =\n+                serverCondition.await(90L, TimeUnit.SECONDS);\n+        if (!serverIsReady) {\n+            System.out.println(\n+                    \"The server is not ready yet in 90 seconds. \" +\n+                            \"Ignore in client side.\");\n+            return;\n+        }\n+\n+        SSLContext context = SSLExampleCert.createClientSSLContext();\n+        SSLSocketFactory sslsf = context.getSocketFactory();\n+\n+        try (SSLSocket sslSocket = (SSLSocket)sslsf.createSocket(\n+                \"www.example.com.\", serverPort)) {\n+            \/\/ OK, here the client and server get connected.\n+            SSLParameters sslParameters = sslSocket.getSSLParameters();\n+            sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n+            sslSocket.setSSLParameters(sslParameters);\n+\n+            \/\/ Signal the server, the client is ready to communicate.\n+            clientCondition.countDown();\n+\n+            \/\/ There is still a chance in theory that the server thread may\n+            \/\/ wait client-ready timeout and then quit.  The chance should\n+            \/\/ be really rare so we don't consider it until it becomes a\n+            \/\/ real problem.\n+\n+            \/\/ Run the application in client side.\n+            runClientApplication(sslSocket);\n+        }\n+    }\n+\n+    \/\/ Define the client side application of the test for the specified socket.\n+    protected void runClientApplication(SSLSocket socket) throws Exception {\n+        InputStream sslIS = socket.getInputStream();\n+        OutputStream sslOS = socket.getOutputStream();\n+\n+        sslOS.write(280);\n+        sslOS.flush();\n+        sslIS.read();\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/ServerName\/EndingDotHostname.java","additions":251,"deletions":0,"binary":false,"changes":251,"status":"added"},{"patch":"@@ -0,0 +1,414 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.net.ssl.*;\n+import java.io.*;\n+import java.lang.reflect.Field;\n+import java.net.InetAddress;\n+import java.security.KeyFactory;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.PKIXBuilderParameters;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Base64;\n+import java.util.Date;\n+\n+\/**\n+ * A template to use \"www.example.com\" as the server name.  The caller should\n+ *  set a virtual hosts file with System Property, \"jdk.net.hosts.file\". This\n+ *  class will map the loopback address to \"www.example.com\", and write to\n+ *  the specified hosts file.\n+ *\n+ *  Commands used:\n+ *  # Root CA\n+ *  > openssl req -new -config openssl.cnf -out root-ca.csr \\\n+ *        -keyout private\/root-ca.key -days 7300 -newkey rsa:2048\n+ *  > openssl ca -selfsign -config openssl.cnf -in root-ca.csr \\\n+ *        -out certs\/root-ca.crt -extensions v3_ca\n+ *  -keyfile private\/root-ca.key -days 7300\n+ *\n+ *  # www.example.com\n+ *  > openssl req -new -keyout private\/example.key \\\n+ *        -out example.csr -days 7299 -newkey rsa:2048\n+ *  > openssl ca -config openssl.cnf -in example.csr \\\n+ *        -out certs\/example.crt -extensions usr_cert\n+ *  -keyfile private\/root-ca.key -days 7299\n+ *\n+ *  # Client\n+ *  > openssl req -new -keyout private\/client.key \\\n+ *        -out client.csr -days 7299 -newkey rsa:2048\n+ *  > openssl ca -config openssl.cnf -in client.csr \\\n+ *        -out certs\/client.crt -extensions usr_cert\n+ *  -keyfile private\/root-ca.key -days 7299\n+ *\n+ *  The key files should be in PKCS8 format:\n+ *  > openssl pkcs8 -topk8 -inform PEM -outform pem \\\n+ *         -in private\/example.key -out private\/example-pkcs.key -nocrypt\n+ *\/\n+public enum SSLExampleCert {\n+    \/\/ Version: 3 (0x2)\n+    \/\/ Serial Number: 4097 (0x1001)\n+    \/\/ Signature Algorithm: sha256WithRSAEncryption\n+    \/\/ Issuer: C = US, ST = California, O = Example, OU = Test\n+    \/\/ Validity\n+    \/\/     Not Before: Feb 25 20:12:04 2022 GMT\n+    \/\/     Not After : Feb 20 20:12:04 2042 GMT\n+    \/\/ Subject: C = US, ST = California, O = Example, OU = Test\n+    \/\/ Subject Public Key Info:\n+    \/\/     Public Key Algorithm: rsaEncryption\n+    \/\/         RSA Public-Key: (2048 bit)\n+    CA_RSA(\"RSA\",\n+        \"\"\"\n+            -----BEGIN CERTIFICATE-----\n+            MIIDtDCCApygAwIBAgICEAEwDQYJKoZIhvcNAQELBQAwQzELMAkGA1UEBhMCVVMx\n+            EzARBgNVBAgTCkNhbGlmb3JuaWExEDAOBgNVBAoTB0V4YW1wbGUxDTALBgNVBAsT\n+            BFRlc3QwHhcNMjIwMjI1MjAxMjA0WhcNNDIwMjIwMjAxMjA0WjBDMQswCQYDVQQG\n+            EwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEQMA4GA1UEChMHRXhhbXBsZTENMAsG\n+            A1UECxMEVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKOGhEDj\n+            lZ5R6o20kJdgrIRcY1he4qKLWQ4vU0thqAg4mEcKCZZn4\/NL05UgJCFLwYaxMZZe\n+            etb\/WaTRvQpDDFh7AhsMR24m6zKKJVk9E\/e\/8ur7sGDIVq8hZOBTq85ZdxPj\/zKW\n+            wB1BR\/RcY4DsGno1USlkV7TVeZc1qpJHTPImesevzH7zX8nhnFlf4TTQbpQt6RxU\n+            cr+udWpMOyP9xMerIyp7jpPy79tIaGP2x7ryt2BB9FU4RwPk4DcdfOkmdS86md1c\n+            GI9H5qM5rUzyqey0J8wMRLj+E0Vx0F1XELZeTtyulbIbhrBhu\/KOXZG2zNIeK+2F\n+            XxDlx9tD+bbcJfUCAwEAAaOBsTCBrjAdBgNVHQ4EFgQULjM9fwJnC3Tp1QYM8HNL\n+            y60btl0wbAYDVR0jBGUwY4AULjM9fwJnC3Tp1QYM8HNLy60btl2hR6RFMEMxCzAJ\n+            BgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRAwDgYDVQQKEwdFeGFtcGxl\n+            MQ0wCwYDVQQLEwRUZXN0ggIQATAPBgNVHRMBAf8EBTADAQH\/MA4GA1UdDwEB\/wQE\n+            AwIBBjANBgkqhkiG9w0BAQsFAAOCAQEAR0Mk+2X\/rr4kYYfHsQUIsROwDZSQhQr3\n+            QOeLc7fyTjkM96OHXN2dKVoOcpzgKi1goHW7lh8vVmKRQk2wfFqRZV9\/kQBFK\/gz\n+            QtN5gp+pA8Wk912Uj5gD0loiPcRf5bDElvLnr2iwt4VdKkvGIYa9Eu9CYbkf1x3t\n+            ahVLmrZLBkqvKxo4MG4KGYXkqtII3M6clM4ScFa\/0rR1nGZOgZyqG7AMMHc01csA\n+            oLlEZx2hUcpJbz+sfCGUWYaF2uKJvuWMNFbGSDhfs8pOMGgelMOHaKVtgOEfEASN\n+            TSqzqn0vzjJ78Mi6mN7\/6L\/onDKzROxClw0hc6L+PIhIHftD1ckvVQ==\n+            -----END CERTIFICATE-----\"\"\",\n+\n+        \"\"\"\n+            MIIFHDBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIn\/uWtEzLDK8CAggA\n+            MAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECIk7+JC4ErMDBIIEyA3yvNhMm\/Oj\n+            ZdkN0HSzPyLv9bOfUyyx4NA121kizZIq\/FkUjn8pGxzU63rzMk2vU1hmp2\/O3ymr\n+            vmV7gzXRp4ULZCjFwn4cLxi9ieKgBOr9MmgTlRc1oZ9P\/Y8eWhmjGxA2CU3fy7Kv\n+            DyzftqAetV8YzTelk8xqxLrGevB16O3zDbFj4dcmG7a0i75kqlI8QyQklJ9uyE10\n+            SELWFlV6w+3GD82YrbR\/8v4fE5KP\/nAPbtN4h4C7MY3kJQL+apHr5B3Jst+6N62t\n+            JzmxGS5z3ZVT3Bn3mxi8awo8\/XS8s+ZOSnH6nHvz83NBUQwSkVbtujlg+yMD2jg4\n+            Nt3LWfLnF8Q6n4oAQ1ZP9KJyVIh8+PN12txIRoWq1pF74hJmbfVfiCSR\/tMrw6lr\n+            XqlkG1Mi7RmpTCz9ScTUBWY\/dyScYFITenv\/WE+UnfQ+DXBC+78lkmL36M0Rx\/ip\n+            S4O1Tgy\/z\/MIv1s+ZpAFsRRczlpo9lbVEMuSGEWWTIQJCRPFV8Y1NKHmWUgeZpl3\n+            2YUjpHNyQt\/a1s1h1g5w9+UNuABt\/3cUUnlA7psueb6l4x6M92QFBOpe1xUDL51D\n+            RpaipVl1luFWvE84hqgCIv8Kh9EbkAlclmK8CIOkMQAabk0GmhCfEdm+PCW61Cao\n+            rfCMwZ9Bx6zAcXGRrvl0sK35z8C3r8wLftaS\/5xF6RTJBy6XY2iiFW6D44qZDFbh\n+            0rWV8zDtCf2+OZtEvPkeUn3sjevDW78TM6F7HBjXAeIFrNyJGVe2CTlEJLoZi5pX\n+            W1blhMJ93N1mLiDYisILANmJRBfGMt0tYE\/pGcJRlkuqG0qylnqRojjL83CTQvFy\n+            46q\/obR36enRDvCZPvQrX2dB7Vkgpkz\/drZ6+avmKdQcTjY\/ycCd3DclwexhgUoX\n+            QDntZuJQLp7C4tFfHRy2uh4DOEjzMP6a\/NQ3q7p6vc6BTNTFZRUAdyNwcEDIzSLM\n+            nZSPFBiz+gukhtNSCO28kLc8OX1hYsSAMgzbImcMtAiQHG3bFAJ0cs0jF4U9VrJt\n+            4\/97kiDBuCgGb2b5t0+uDqipE6G4B6494IGm5KoIPAPbXMJQstmuzjTJt95UTF+p\n+            e60AnWIXcvEOouIIMzC7gH2g23St5Bo6NixfxcmVfkFa92TDlCTxEz5Z5mnma06k\n+            Pao4Km1eJkYS\/QaCDnCZs\/yCAMhINUTTDd0\/7Y9YE3Dmd5B1s2wOa+ovESSL3Mdv\n+            dZoxh91QR+6hQuz3iYztC\/BszMtATH8MznAoco0QFAhKi56Wppe+p1ATLWFMqk4W\n+            elX9vtw5XLucKy5cMkQYh144SnrerlPJTAOGy0XXKunj8ceZfEN6zcS9Us9IN5aF\n+            iENMFHjPsscrrKFhKypaMIn67PuIhVhw4PnGrWejr6TM1gUx+zOcRCwT+5ka2L7U\n+            aqmgS8cDg5ZfAHcbig7No9kku\/OSk+5QzkVKca2TZQHm++60oQTzRl3\/NWiELO+e\n+            Sl6r8i7dS0Kv3bB\/AbLfIHtDgebxUh78qXMel\/OUWd58ezxBS74rZ4AQTpYcdTbR\n+            jKHploWi8h5yXYn\/YdEZG1vW\/zYseFNb7QKT5Cznucl8O\/+lNZIOVw63Pq368dTD\n+            tG1GZkIlwM+jlJjRew05YQ==\n+            \"\"\"),\n+\n+    \/\/ Version: 3 (0x2)\n+    \/\/ Serial Number: 4098 (0x1002)\n+    \/\/ Signature Algorithm: sha256WithRSAEncryption\n+    \/\/ Issuer: C = US, ST = California, O = Example, OU = Test\n+    \/\/ Validity\n+    \/\/     Not Before: Feb 25 20:31:29 2022 GMT\n+    \/\/     Not After : Feb 19 20:31:29 2042 GMT\n+    \/\/ Subject: C = US, ST = California, O = Example, OU = Test, CN = www.example.com\n+    \/\/ Subject Public Key Info:\n+    \/\/     Public Key Algorithm: rsaEncryption\n+    \/\/         RSA Public-Key: (2048 bit)\n+    SERVER_EXAMPLE_RSA(\"RSA\",\n+        \"\"\"\n+            -----BEGIN CERTIFICATE-----\n+            MIIDaTCCAlGgAwIBAgICEAIwDQYJKoZIhvcNAQELBQAwQzELMAkGA1UEBhMCVVMx\n+            EzARBgNVBAgTCkNhbGlmb3JuaWExEDAOBgNVBAoTB0V4YW1wbGUxDTALBgNVBAsT\n+            BFRlc3QwHhcNMjIwMjI1MjAzMTI5WhcNNDIwMjE5MjAzMTI5WjBdMQswCQYDVQQG\n+            EwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEQMA4GA1UECgwHRXhhbXBsZTENMAsG\n+            A1UECwwEVGVzdDEYMBYGA1UEAwwPd3d3LmV4YW1wbGUuY29tMIIBIjANBgkqhkiG\n+            9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3crcRzecIV08Muh6kA0CuVKnPkU2bLC+6bpV\n+            7\/iBZ4D3qMwO8Q02+gP71pPNoAQ1nsifxR4k9mBVYOjar35RVpuFmLRRVMargrxg\n+            4WWDfVgLMhOeCy8+Tl4Mp\/yRL3nkr0MJd57RCOPcPE84J\/1Crq1Luy2+hsXSj25L\n+            VJKx2o6LE0tfwPWnufdNUHzHRuNoBR83OpqIT0uXH15THZS+0ZcQwrJMcKYe4JWl\n+            6oXWcsWbtTG+r7QLIRKck2IG7jjHFpE83Q6Iv2HkhctgGZofwSTZyMmJ8eClovva\n+            WFLDaLL2WuI3NwZM\/\/knjMyfsEWtWsILXayCn5NTT74ClQjWQQIDAQABo00wSzAJ\n+            BgNVHRMEAjAAMB0GA1UdDgQWBBQ9nPjenO4PMLtMTBddNiIDsPywjzAfBgNVHSME\n+            GDAWgBQuMz1\/AmcLdOnVBgzwc0vLrRu2XTANBgkqhkiG9w0BAQsFAAOCAQEAVOvM\n+            fMDOxOCkWB244cx7J+f2qZU6\/1qGlJUiL0WRLRj1XEmB8AYSZEb6Os1suF8sotka\n+            nA9Aw1SFA\/wNyrSKazXNlOKo0In1mu\/OjHU7n6XYVAyDmFGziYY8zTqG1h8ZPrI7\n+            oAkNgnNDwmwy7uCAvMj+Q4QQ0Q4YxTHV\/i3X1HuEwThRgz9cJGdDRIAsimRHDSDO\n+            5hsIJo6VASz0ISrYMxNZQ1og+XktdNssPK616bPf+APwXXnsWSuGkIdGDU059DII\n+            cTSsLTbWkTWDXAAQo+sfDZUrvqopCK000eoywEmPQrTf7O8oAQdRvTsyxwMvOONd\n+            EWQ9pDW9+RC8l5DtRA==\n+            -----END CERTIFICATE-----\"\"\",\n+\n+        \"\"\"\n+            MIIEwAIBADANBgkqhkiG9w0BAQEFAASCBKowggSmAgEAAoIBAQDdytxHN5whXTwy\n+            6HqQDQK5Uqc+RTZssL7pulXv+IFngPeozA7xDTb6A\/vWk82gBDWeyJ\/FHiT2YFVg\n+            6NqvflFWm4WYtFFUxquCvGDhZYN9WAsyE54LLz5OXgyn\/JEveeSvQwl3ntEI49w8\n+            Tzgn\/UKurUu7Lb6GxdKPbktUkrHajosTS1\/A9ae5901QfMdG42gFHzc6mohPS5cf\n+            XlMdlL7RlxDCskxwph7glaXqhdZyxZu1Mb6vtAshEpyTYgbuOMcWkTzdDoi\/YeSF\n+            y2AZmh\/BJNnIyYnx4KWi+9pYUsNosvZa4jc3Bkz\/+SeMzJ+wRa1awgtdrIKfk1NP\n+            vgKVCNZBAgMBAAECggEBAMUMAtJe7J6Tx\/TuqF0swfvGHAHt2eGM0cCzpMATh1xe\n+            rylPSgMNG4faXDcSj4AX3U+ZrKCjHHGruo7jsc5yqm8IsxOtOAjajOwU0vnNh5mn\n+            zCKMXUBQk8lqM1JXyOFmKS8wnsug1NRSJIuMUjbtAf5QxlSg2oHAZUa61cBoqAyk\n+            KXbw9uBYnM4n8WGXdax\/LLPuonjnz2Sc35CC1LhRAF\/K7oyjg7KvScnphIFRaLiU\n+            X4tFH0nLpcao5de0fP5eUEkbUZ3hE6MEZvOsxn5CFkjH2VdtZ9D5dc3ArV3UMe26\n+            +3swdenriYZ73HNJDiLAdeIVh9IrGVxhH9UowF9psIUCgYEA\/Ldlx4vTTlM7URFn\n+            luqK7D8WH9x4JiCLEGxU80nJxxIgF8eqhOFzsQemytTrf4o1xAkyyPIweHzwApCA\n+            lBdwC4Mc44DjoLFVdTET9hEq7E\/UK81znc0mD4v8Hz2JI6h3f2sQrcEAPBvjBwtc\n+            TpS9WlSBKSO3NOb3Hlucq7COVKcCgYEA4KyZ+dOyKVLyGjd0g22v4YW7VC016Hql\n+            uQ7SN1vuI3zQMa2rZfEv5z2L7olJKrDFcmqk8W1tfElrMaSsuohm8khhx0lPtHMw\n+            4Su\/tci\/3rEUl+DPrQExdjrrDXCqpUunOAlMP9qElsNBGdkrQ6QlMnSVVi2v8Vf1\n+            f86Mey2UEtcCgYEAqcOlmqPigfZFnZLcjLPoOQW0HhkjmTE5WgH8GybRZmpVpsPZ\n+            V8R\/zEeAkzbvMFEvBw7Kz9RqHTaIoKBjz5fjC8i7ClVWFGesKbqbVyx3MiH6PKaa\n+            aUIbtEvsRSw4SPztsWnB3YcOWlK9csj97Efc36Zu0a0NcHtLPFh8aZWEN3cCgYEA\n+            oQFv8oWPlmeXkcwN1iWjtfT1EtS3XhuOaXjCkuNxW8MVG5S+UHawAoGrpsyBP3Og\n+            e2cLPuxRWpDunYvKMH6Rb60JTRwvXzxxWdvVLbtoLHkwLcrwaKWDQZvlWCNWVtBJ\n+            TDH1j4jUHYpdO93SUE3wTiEX58Mj48tJ5kYpjBhUlc8CgYEA7PG3ORGqZtfCiNmj\n+            CxvPtQiFC+ogf+v8cMQtrKVTgpnI2pxzG+cSXYvL4cnyY2JnwqarWorUic8JU2e2\n+            EhW53PWUg7VpITlLsqOpATIDiviFAN4qOOxgDt5v0C1PyB3aXe2B5VA3IgczssyR\n+            OLy7p\/DhOpu2bqnpKyIkAuzZgFc=\n+            \"\"\"),\n+\n+\n+    \/\/ Version: 3 (0x2)\n+    \/\/ Serial Number: 4099 (0x1003)\n+    \/\/ Signature Algorithm: sha256WithRSAEncryption\n+    \/\/ Issuer: C = US, ST = California, O = Example, OU = Test\n+    \/\/ Validity\n+    \/\/     Not Before: Feb 25 20:33:59 2022 GMT\n+    \/\/     Not After : Feb 19 20:33:59 2042 GMT\n+    \/\/ Subject: C = US, ST = California, O = Example, OU = Test, CN = Do-Not-Reply\n+    \/\/ Subject Public Key Info:\n+    \/\/     Public Key Algorithm: rsaEncryption\n+    \/\/         RSA Public-Key: (2048 bit)\n+    CLIENT_EXAMPLE_RSA(\"RSA\",\n+        \"\"\"\n+            -----BEGIN CERTIFICATE-----\n+            MIIDZjCCAk6gAwIBAgICEAMwDQYJKoZIhvcNAQELBQAwQzELMAkGA1UEBhMCVVMx\n+            EzARBgNVBAgTCkNhbGlmb3JuaWExEDAOBgNVBAoTB0V4YW1wbGUxDTALBgNVBAsT\n+            BFRlc3QwHhcNMjIwMjI1MjAzMzU5WhcNNDIwMjE5MjAzMzU5WjBaMQswCQYDVQQG\n+            EwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEQMA4GA1UECgwHRXhhbXBsZTENMAsG\n+            A1UECwwEVGVzdDEVMBMGA1UEAwwMRG8tTm90LVJlcGx5MIIBIjANBgkqhkiG9w0B\n+            AQEFAAOCAQ8AMIIBCgKCAQEA2yJgm3Lthr+97vdEWTb4zaNuLTa\/DkCXdmVNIQk9\n+            kVn2hjZrPc+JghBCaWpohGVTQ+zxplIJXk+QVZ0ePEimE7ahBClz4MlAgMpt1uxy\n+            mYYUAsSZDCaFUI9Cpx1f0BiSWu330196K\/AfRIoT+\/SOZucnpbepxyrt+Az5SKrH\n+            TJR\/OSqeX4XKGPoRI96pKxDOV8pY5\/I9h9yKGuxfufbpOdVODngVLcMKgBAkiD+2\n+            sguEHM+iGLx970+W6yycu1dFY1CAgWLUF3evUxe8avwePgx7lTFXnNueYt96Ny9v\n+            L1o\/WzoBe3z1mTl5Qb\/\/3tYbXn8vdiDYm0dT8wImpDbpvwIDAQABo00wSzAJBgNV\n+            HRMEAjAAMB0GA1UdDgQWBBSXqW\/B1BVjNgowSwa3MBiHMkzp6zAfBgNVHSMEGDAW\n+            gBQuMz1\/AmcLdOnVBgzwc0vLrRu2XTANBgkqhkiG9w0BAQsFAAOCAQEABIMAjT5T\n+            lZDV\/1wmdKCyJQJ7WUjA44N5\/yBGtEmpAJ0VM7\/COnk8lqiYxrk50wK7lt0tiklX\n+            4aLqbAgnDc27z9AQGHOqB69dZprGQT9PsTByjK6i7KPGs30ygyND41j0rju\/GM2e\n+            3xprZbusODENRyL196QV4ai0WVe1hEvv0wTMIcnXYmZHMP8ArdVRHWaDQF6zW0Mh\n+            QbFqklt5W0ZIl2ZmC8z7z2Z6jv\/BYyDo3U96LfdCWsEKxSKiX\/PGHqZu4D3A4VSE\n+            0+fE7cX61kgRdGvZJgFjtYxtfkXd1HlyJ48Dqilzl+rvgvR5XA68zijjN0khPhml\n+            wZhPIOCIaWMZYw==\n+            -----END CERTIFICATE-----\"\"\",\n+\n+        \"\"\"\n+            MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDbImCbcu2Gv73u\n+            90RZNvjNo24tNr8OQJd2ZU0hCT2RWfaGNms9z4mCEEJpamiEZVND7PGmUgleT5BV\n+            nR48SKYTtqEEKXPgyUCAym3W7HKZhhQCxJkMJoVQj0KnHV\/QGJJa7ffTX3or8B9E\n+            ihP79I5m5yelt6nHKu34DPlIqsdMlH85Kp5fhcoY+hEj3qkrEM5Xyljn8j2H3Ioa\n+            7F+59uk51U4OeBUtwwqAECSIP7ayC4Qcz6IYvH3vT5brLJy7V0VjUICBYtQXd69T\n+            F7xq\/B4+DHuVMVec255i33o3L28vWj9bOgF7fPWZOXlBv\/\/e1htefy92INibR1Pz\n+            AiakNum\/AgMBAAECggEAW0WxWW4AMyzwDnWdWU+FSBm3TUvNPkF3FNBS1NzFcSI4\n+            hWRrPJ6R1sOw9blleSe\/C77IVA89abPYGWDM9C0KR5G89T\/SzSDmJf6qy2dGwF1R\n+            PmnmmWH+CzTwfSzF+KYTZ55QqBDPkTd9vo2Ij1woaAIFyId8RsHBxpyYxESlqGY4\n+            C6IzEqxFQ0obHXasNR+dP4iOWS4ONhxeUHixcrDHxbmoqmHt0WuJwXhlOjxHgr+i\n+            lUPTe5y+Y2B1gVNYrN4KlDTJqJ6lu4n6MFQ46jhfddzTk3uiEOTVWK6nE8Cf0NM7\n+            djTzTcR8xAVpoY5XDlk0aBfEd8Np7TLSjV4vU3J04QKBgQD6scazH\/H9Yu9ZbR7w\n+            EeN\/k7uDDlgahWg8\/93syzdFtSNIRGvdalNMhTfM\/zXaM\/Cl63gvZilWxC+56Uvg\n+            6QC+rBUwzZrm7ryb6hT6Zyoo4w72bw3jGOJ3e2\/bclSLrAcJnL\/1Gq87J3CS16wl\n+            NIHrlOlY8orToEdki+6HaagyEQKBgQDfxZz4Uqsa+jDO\/rEm959+nz2RkaXYu1Ld\n+            DhYONxmlw69\/BbwzOvzr88qKNbd+b+oIK8kpm7Lvpc2\/cuqItTFdehmw+tGhMWYo\n+            XizKCeKeCByFTjXI2\/PEPUHMy0D8M68Tx\/Hq0NbIYqCyzkaamHhXpuJGftxGfd3\/\n+            U0NB4WGOzwKBgQDgnyN7YfcwY1I0XUqoLk8aA2Oy5MpaUQh6B4RwZBENO2T2np\/L\n+            TzZ9zKuX2WAGOB26fMY+KhqGLNjaike7qOpK7eM6zC6sFmMWjGHpj0A+TFwewJi\/\n+            z48zIX2zMbjBQQ05NqLkWdmCdi8u02HiIC78x3thgEiVn\/n4BE1gNXJIEQKBgEdr\n+            dfcXw36\/vZZDWd07CU\/LmUX9u3YaC498MHPnCCuM8lVTSkb7m7\/fNpS4IlGbfJGR\n+            EApUpF6yh6GEFvD9C71u\/AYtd3zAHH\/j1t3BG\/AeXKP7W1U5RmsqtfacJKiaAlYI\n+            6eBtOTAJsop\/Ja+v3DD1laC0Wq+w+orEU2ISgiWnAoGBAK9\/9m3RCYPNYzS\/PQ2B\n+            AgE2FQRuY8FXxHegZo2tBBwIojPeVHO1OoThYVNgiQfW9k27dFkRwXVAtt6Jqgax\n+            fvOby8rWRStXH2qHVyvHicceL7iXs6v2bX20Szsy44eMkoFfAImea6ZdErLdVWvI\n+            fxlYpTIVpBt3Nu2BRJn28ili\n+            \"\"\");\n+\n+    final String keyAlgo;\n+    final String certStr;\n+    final String privateKeyStr;\n+\n+    \/\/ Trusted certificate\n+    private final static SSLExampleCert[] TRUSTED_CERTS = {\n+            SSLExampleCert.CA_RSA\n+    };\n+\n+    \/\/ Server certificate.\n+    private final static SSLExampleCert[] SERVER_CERTS = {\n+            SSLExampleCert.SERVER_EXAMPLE_RSA\n+    };\n+\n+    \/\/ Client certificate.\n+    private final static SSLExampleCert[] CLIENT_CERTS = {\n+            SSLExampleCert.CLIENT_EXAMPLE_RSA\n+    };\n+\n+    \/\/ Set \"www.example.com\" to loopback address.\n+    static {\n+        String hostsFileName = System.getProperty(\"jdk.net.hosts.file\");\n+        String loopbackHostname =\n+                InetAddress.getLoopbackAddress().getHostAddress() +\n+                \" \" + \"www.example.com    www.example.com.\\n\";\n+        try (FileWriter writer= new FileWriter(hostsFileName, false)) {\n+             writer.write(loopbackHostname);\n+        } catch (IOException ioe) {\n+             \/\/ ignore\n+        }\n+    }\n+\n+    SSLExampleCert(String keyAlgo, String certStr, String privateKeyStr) {\n+        this.keyAlgo = keyAlgo;\n+        this.certStr = certStr;\n+        this.privateKeyStr = privateKeyStr;\n+    }\n+\n+    public static SSLContext createClientSSLContext() throws Exception {\n+        return createSSLContext(TRUSTED_CERTS, CLIENT_CERTS);\n+    }\n+\n+    public static SSLContext createServerSSLContext() throws Exception {\n+        return createSSLContext(TRUSTED_CERTS, SERVER_CERTS);\n+    }\n+\n+    private static SSLContext createSSLContext(\n+            SSLExampleCert[] trustedCerts,\n+            SSLExampleCert[] endEntityCerts) throws Exception {\n+        char[] passphrase = \"passphrase\".toCharArray();\n+\n+        \/\/ Generate certificate from cert string.\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        \/\/ Import the trusted certs.\n+        KeyStore ts = null;     \/\/ trust store\n+        if (trustedCerts != null && trustedCerts.length != 0) {\n+            ts = KeyStore.getInstance(\"PKCS12\");\n+            ts.load(null, null);\n+\n+            Certificate[] trustedCert = new Certificate[trustedCerts.length];\n+            for (int i = 0; i < trustedCerts.length; i++) {\n+                try (ByteArrayInputStream is = new ByteArrayInputStream(\n+                        trustedCerts[i].certStr.getBytes())) {\n+                    trustedCert[i] = cf.generateCertificate(is);\n+                }\n+\n+                ts.setCertificateEntry(\"trusted-cert-\" +\n+                        trustedCerts[i].name(), trustedCert[i]);\n+            }\n+        }\n+\n+        \/\/ Import the key materials.\n+        KeyStore ks = null;     \/\/ trust store\n+        if (endEntityCerts != null && endEntityCerts.length != 0) {\n+            ks = KeyStore.getInstance(\"PKCS12\");\n+            ks.load(null, null);\n+\n+            for (SSLExampleCert endEntityCert : endEntityCerts) {\n+                \/\/ generate the private key.\n+                PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n+                        Base64.getMimeDecoder()\n+                                .decode(endEntityCert.privateKeyStr));\n+                KeyFactory kf =\n+                        KeyFactory.getInstance(\n+                                endEntityCert.keyAlgo);\n+                PrivateKey priKey = kf.generatePrivate(priKeySpec);\n+\n+                \/\/ generate certificate chain\n+                Certificate keyCert;\n+                try (ByteArrayInputStream is = new ByteArrayInputStream(\n+                        endEntityCert.certStr.getBytes())) {\n+                    keyCert = cf.generateCertificate(is);\n+                }\n+\n+                Certificate[] chain = new Certificate[]{keyCert};\n+\n+                \/\/ import the key entry.\n+                ks.setKeyEntry(\"end-entity-cert-\" +\n+                                endEntityCert.name(),\n+                        priKey, passphrase, chain);\n+            }\n+        }\n+\n+        \/\/ Set the date for the verifying of certificates.\n+        DateFormat df = new SimpleDateFormat(\"MM\/dd\/yyyy\");\n+        Date verifyingDate = df.parse(\"02\/02\/2023\");\n+\n+        \/\/ Create an SSLContext object.\n+        TrustManagerFactory tmf =\n+                TrustManagerFactory.getInstance(\"PKIX\");\n+        if (ts != null) {\n+            PKIXBuilderParameters pkixParams =\n+                    new PKIXBuilderParameters(ts, null);\n+            pkixParams.setDate(verifyingDate);\n+            pkixParams.setRevocationEnabled(false);\n+            ManagerFactoryParameters managerFactoryParameters =\n+                    new CertPathTrustManagerParameters(pkixParams);\n+            tmf.init(managerFactoryParameters);\n+        } else {\n+            tmf.init((KeyStore)null);\n+        }\n+\n+        SSLContext context = SSLContext.getInstance(\"TLS\");\n+        if (endEntityCerts != null && endEntityCerts.length != 0) {\n+            KeyManagerFactory kmf =\n+                    KeyManagerFactory.getInstance(\"NewSunX509\");\n+            kmf.init(ks, passphrase);\n+\n+            KeyManager[] kms = kmf.getKeyManagers();\n+            if (kms != null && kms.length != 0) {\n+                KeyManager km = kms[0];\n+                Field verificationDateField =\n+                        km.getClass().getDeclaredField(\"verificationDate\");\n+                verificationDateField.setAccessible(true);\n+                verificationDateField.set(km, verifyingDate);\n+            }\n+\n+            context.init(kms, tmf.getTrustManagers(), null);\n+        } else {\n+            context.init(null, tmf.getTrustManagers(), null);\n+        }\n+\n+        return context;\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLExampleCert.java","additions":414,"deletions":0,"binary":false,"changes":414,"status":"added"}]}