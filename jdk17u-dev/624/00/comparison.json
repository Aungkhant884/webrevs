{"files":[{"patch":"@@ -119,0 +119,12 @@\n+    if test \"x$ALLOW_ABSOLUTE_PATHS_IN_OUTPUT\" = \"xfalse\"; then\n+      # Check if compiler supports -fdebug-prefix-map. If so, use that to make\n+      # the debug symbol paths resolve to paths relative to the workspace root.\n+      workspace_root_trailing_slash=\"${WORKSPACE_ROOT%\/}\/\"\n+      DEBUG_PREFIX_CFLAGS=\"-fdebug-prefix-map=${workspace_root_trailing_slash}=\"\n+      FLAGS_COMPILER_CHECK_ARGUMENTS(ARGUMENT: [${DEBUG_PREFIX_CFLAGS}],\n+        IF_FALSE: [\n+            DEBUG_PREFIX_CFLAGS=\n+        ]\n+      )\n+    fi\n+\n","filename":"make\/autoconf\/flags-cflags.m4","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -362,1 +362,1 @@\n-      # gcc assembly files must contain an appropriate relative .file\n+      # gcc or clang assembly files must contain an appropriate relative .file\n@@ -364,1 +364,1 @@\n-      ifeq ($(TOOLCHAIN_TYPE), gcc)\n+      ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n@@ -406,2 +406,3 @@\n-    # For reproducible builds with gcc ensure random symbol generation is seeded deterministically\n-    ifeq ($(TOOLCHAIN_TYPE), gcc)\n+    # For reproducible builds with gcc and clang ensure random symbol generation is\n+    # seeded deterministically\n+    ifneq ($(findstring $(TOOLCHAIN_TYPE), gcc clang), )\n","filename":"make\/common\/NativeCompilation.gmk","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}