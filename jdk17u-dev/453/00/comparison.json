{"files":[{"patch":"@@ -2402,1 +2402,1 @@\n-        return checkRestrictedType(pos, findIdentInternal(env, name, kind), name);\n+        return checkNonExistentType(checkRestrictedType(pos, findIdentInternal(env, name, kind), name));\n@@ -2438,1 +2438,1 @@\n-        return checkRestrictedType(pos, findIdentInPackageInternal(env, pck, name, kind), name);\n+        return checkNonExistentType(checkRestrictedType(pos, findIdentInPackageInternal(env, pck, name, kind), name));\n@@ -2475,1 +2475,11 @@\n-        return checkRestrictedType(pos, findIdentInTypeInternal(env, site, name, kind), name);\n+        return checkNonExistentType(checkRestrictedType(pos, findIdentInTypeInternal(env, site, name, kind), name));\n+    }\n+\n+    private Symbol checkNonExistentType(Symbol symbol) {\n+        \/*  Guard against returning a type is not on the class path of the current compilation,\n+         *  but *was* on the class path of a separate compilation that produced a class file\n+         *  that is on the class path of the current compilation. Such a type will fail completion\n+         *  but the completion failure may have been silently swallowed (e.g. missing annotation types)\n+         *  with an error stub symbol lingering in the symbol tables.\n+         *\/\n+        return symbol instanceof ClassSymbol c && c.type.isErroneous() && c.classfile == null ? typeNotFound : symbol;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8155701\n+ * @summary Ensure that compiler surfaces diagnostics about inaccessible class\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @run main MissingAnnotationClassFile\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.*;\n+\n+import javax.tools.JavaCompiler;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n+\n+import toolbox.*;\n+\n+public class MissingAnnotationClassFile {\n+\n+    public static void main(String [] args) throws Exception {\n+\n+        ToolBox tb = new ToolBox();\n+        Path base = Paths.get(\".\");\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.createDirectories(testSrc);\n+        Path libSrc = testSrc.resolve(\"lib-src\");\n+        tb.createDirectories(libSrc);\n+        tb.writeJavaFiles(libSrc, \"package lib;\\n\" +\n+                                  \"public @interface I {\\n\" +\n+                                  \"    String value();\\n\" +\n+                                  \"}\\n\",\n+\n+                                  \"package lib;\\n\" +\n+                                  \"@I(\\\"Foo\\\")\\n\" +\n+                                  \"public class Foo {}\\n\");\n+        Path libClasses = base.resolve(\"lib-classes\");\n+        tb.createDirectories(libClasses);\n+        new JavacTask(tb).outdir(libClasses.toString())\n+                         .sourcepath(libSrc.toString())\n+                         .files(tb.findJavaFiles(libSrc))\n+                         .run()\n+                         .writeAll();\n+\n+        Files.delete(libClasses.resolve(\"lib\/I.class\"));\n+\n+        tb.writeJavaFiles(testSrc, \"import lib.Foo;\\n\" +\n+                                   \"public class Bar {\\n\" +\n+                                   \"@lib.I(\\\"Bar\\\")\\n\" +\n+                                   \"public void bar() {}\\n\" +\n+                                   \"}\\n\");\n+        Path testClasses = base.resolve(\"test-classes\");\n+        tb.createDirectories(testClasses);\n+\n+        Path bar = testSrc.resolve(\"Bar.java\");\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        List<String> errors = new ArrayList<>();\n+\n+        try (StandardJavaFileManager fm = compiler.getStandardFileManager(null, null, null)) {\n+            com.sun.source.util.JavacTask task = (com.sun.source.util.JavacTask)\n+                    compiler.getTask(null,\n+                                     null,\n+                                     d -> errors.add(d.getCode()),\n+                                     Arrays.asList(\"-XDrawDiagnostics\",\n+                                                   \"-classpath\",\n+                                                   libClasses.toString()),\n+                                     null,\n+                                     fm.getJavaFileObjects(bar));\n+            task.parse();\n+            task.analyze();\n+            task.generate();\n+        }\n+\n+        List<String> expected = Arrays.asList(\"compiler.err.cant.resolve.location\");\n+\n+        if (!expected.equals(errors)) {\n+            throw new IllegalStateException(\"Expected error not found!\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/annotations\/MissingAnnotationClassFile.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}