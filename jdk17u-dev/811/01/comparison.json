{"files":[{"patch":"@@ -1314,0 +1314,3 @@\n+  \/\/ Assert that the given node is not a variable shift.\n+  bool assert_not_var_shift(const Node* n);\n+\n@@ -1728,0 +1731,6 @@\n+\/\/ Assert that the given node is not a variable shift.\n+bool assert_not_var_shift(const Node* n) {\n+  assert(VectorNode::is_vshift_cnt(n->in(2)), \"illegal variable shift\");\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-\/\/ Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2021, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n@@ -4246,1 +4246,7 @@\n-instruct vshiftcnt8B(vecD dst, iRegIorL2I cnt) %{\n+\/\/ Vector shift count\n+\/\/ Note-1: Low 8 bits of each element are used, so it doesn't matter if we\n+\/\/         treat it as ints or bytes here.\n+\/\/ Note-2: Shift value is negated for RShiftCntV additionally. See the comments\n+\/\/         on vsra8B rule for more details.\n+\n+instruct vslcnt8B(vecD dst, iRegIorL2I cnt) %{\n@@ -4248,1 +4254,1 @@\n-            n->as_Vector()->length_in_bytes() == 8);\n+                            n->as_Vector()->length_in_bytes() == 8);\n@@ -4250,1 +4256,1 @@\n-  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST);\n@@ -4258,1 +4264,1 @@\n-instruct vshiftcnt16B(vecX dst, iRegIorL2I cnt) %{\n+instruct vslcnt16B(vecX dst, iRegIorL2I cnt) %{\n@@ -4261,1 +4267,1 @@\n-  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST);\n@@ -4269,0 +4275,27 @@\n+instruct vsrcnt8B(vecD dst, iRegIorL2I cnt) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n+            n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"negw  rscratch1, $cnt\\t\"\n+            \"dup   $dst, rscratch1\\t# shift count vector (8B)\" %}\n+  ins_encode %{\n+    __ negw(rscratch1, as_Register($cnt$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T8B, rscratch1);\n+  %}\n+  ins_pipe(vdup_reg_reg64);\n+%}\n+\n+instruct vsrcnt16B(vecX dst, iRegIorL2I cnt) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (RShiftCntV cnt));\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"negw  rscratch1, $cnt\\t\"\n+            \"dup   $dst, rscratch1\\t# shift count vector (16B)\" %}\n+  ins_encode %{\n+    __ negw(rscratch1, as_Register($cnt$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T16B, rscratch1);\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n@@ -4270,2 +4303,1 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8);\n@@ -4305,2 +4337,0 @@\n-\/\/ Note: In inner loop, multiple neg instructions are used, which can be\n-\/\/ moved to outer loop and merge into one neg instruction.\n@@ -4316,0 +4346,8 @@\n+\/\/ The negate is conducted in RShiftCntV rule for case 1, whereas it's done in\n+\/\/ RShiftV* rules for case 2. Because there exists an optimization opportunity\n+\/\/ for case 1, that is, multiple neg instructions in inner loop can be hoisted\n+\/\/ to outer loop and merged into one neg instruction.\n+\/\/\n+\/\/ Note that ShiftVNode::is_var_shift() indicates whether the vector shift\n+\/\/ count is a variable vector(case 2) or not(a vector generated by RShiftCntV,\n+\/\/ i.e. case 1).\n@@ -4317,3 +4355,3 @@\n-instruct vsra8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+instruct vsra8B(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4322,3 +4360,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8B)\" %}\n@@ -4326,1 +4362,17 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra8B_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (RShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4330,1 +4382,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4335,2 +4387,2 @@\n-instruct vsra16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 16);\n+instruct vsra16B(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4339,3 +4391,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (16B)\" %}\n@@ -4343,1 +4393,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra16B_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (RShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4347,1 +4412,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4352,3 +4417,3 @@\n-instruct vsrl8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+instruct vsrl8B(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4357,3 +4422,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (8B)\" %}\n@@ -4361,1 +4424,17 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl8B_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (URShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4365,1 +4444,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4370,2 +4449,2 @@\n-instruct vsrl16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 16);\n+instruct vsrl16B(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4374,3 +4453,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (16B)\" %}\n@@ -4378,1 +4455,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl16B_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (URShiftVB src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4382,1 +4474,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4388,2 +4480,2 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            assert_not_var_shift(n));\n@@ -4392,1 +4484,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -4408,1 +4500,1 @@\n-  predicate(n->as_Vector()->length() == 16);\n+  predicate(n->as_Vector()->length() == 16 && assert_not_var_shift(n));\n@@ -4411,1 +4503,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -4427,2 +4519,2 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            assert_not_var_shift(n));\n@@ -4431,1 +4523,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -4436,1 +4528,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4442,1 +4534,1 @@\n-  predicate(n->as_Vector()->length() == 16);\n+  predicate(n->as_Vector()->length() == 16 && assert_not_var_shift(n));\n@@ -4445,1 +4537,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -4450,1 +4542,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4456,2 +4548,2 @@\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n+  predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&\n+            assert_not_var_shift(n));\n@@ -4460,1 +4552,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -4469,1 +4561,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4476,1 +4568,1 @@\n-  predicate(n->as_Vector()->length() == 16);\n+  predicate(n->as_Vector()->length() == 16 && assert_not_var_shift(n));\n@@ -4479,1 +4571,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -4488,1 +4580,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4495,2 +4587,1 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4);\n@@ -4521,3 +4612,3 @@\n-instruct vsra4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+instruct vsra4S(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4526,3 +4617,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4H)\" %}\n@@ -4530,1 +4619,17 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra4S_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (RShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4534,1 +4639,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4539,2 +4644,2 @@\n-instruct vsra8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 8);\n+instruct vsra8S(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4543,3 +4648,16 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra8S_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (RShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (8H)\" %}\n@@ -4547,1 +4665,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4551,1 +4669,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4556,3 +4674,3 @@\n-instruct vsrl4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+instruct vsrl4S(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4561,3 +4679,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (4H)\" %}\n@@ -4565,1 +4681,17 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl4S_var(vecD dst, vecD src, vecD shift) %{\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (URShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4569,1 +4701,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4574,2 +4706,2 @@\n-instruct vsrl8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 8);\n+instruct vsrl8S(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4578,3 +4710,16 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ ushl(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl8S_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (URShiftVS src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (8H)\" %}\n@@ -4582,1 +4727,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4586,1 +4731,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4592,2 +4737,2 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            assert_not_var_shift(n));\n@@ -4596,1 +4741,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -4612,1 +4757,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && assert_not_var_shift(n));\n@@ -4615,1 +4760,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -4631,2 +4776,2 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            assert_not_var_shift(n));\n@@ -4635,1 +4780,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -4640,1 +4785,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4646,1 +4791,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && assert_not_var_shift(n));\n@@ -4649,1 +4794,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -4654,1 +4799,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4660,2 +4805,2 @@\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n+  predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&\n+            assert_not_var_shift(n));\n@@ -4664,1 +4809,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -4673,1 +4818,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4680,1 +4825,1 @@\n-  predicate(n->as_Vector()->length() == 8);\n+  predicate(n->as_Vector()->length() == 8 && assert_not_var_shift(n));\n@@ -4683,1 +4828,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -4692,1 +4837,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -4724,2 +4869,2 @@\n-instruct vsra2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsra2I(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4728,3 +4873,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2S)\" %}\n@@ -4732,1 +4875,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra2I_var(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (RShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4736,1 +4894,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4741,2 +4899,2 @@\n-instruct vsra4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 4);\n+instruct vsra4I(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4745,3 +4903,16 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra4I_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (RShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (4S)\" %}\n@@ -4749,1 +4920,1 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4753,1 +4924,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4758,2 +4929,2 @@\n-instruct vsrl2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsrl2I(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4762,3 +4933,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (2S)\" %}\n@@ -4766,1 +4935,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl2I_var(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (URShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T8B,\n@@ -4770,1 +4954,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4775,2 +4959,2 @@\n-instruct vsrl4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 4);\n+instruct vsrl4I(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4779,3 +4963,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (4S)\" %}\n@@ -4783,1 +4965,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl4I_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (URShiftVI src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4787,1 +4984,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4793,1 +4990,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4796,1 +4993,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -4806,1 +5003,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && assert_not_var_shift(n));\n@@ -4809,1 +5006,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -4819,1 +5016,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4822,1 +5019,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -4832,1 +5029,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && assert_not_var_shift(n));\n@@ -4835,1 +5032,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -4845,1 +5042,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4848,1 +5045,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -4858,1 +5055,1 @@\n-  predicate(n->as_Vector()->length() == 4);\n+  predicate(n->as_Vector()->length() == 4 && assert_not_var_shift(n));\n@@ -4861,1 +5058,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -4883,2 +5080,2 @@\n-instruct vsra2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsra2L(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4887,3 +5084,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2D)\" %}\n@@ -4891,1 +5086,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra2L_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (RShiftVL src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4895,1 +5105,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4900,2 +5110,2 @@\n-instruct vsrl2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n+instruct vsrl2L(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -4904,3 +5114,1 @@\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector (2D)\" %}\n@@ -4908,1 +5116,16 @@\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+    __ ushl(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl2L_var(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2 && !VectorNode::is_vshift_cnt(n->in(2)));\n+  match(Set dst (URShiftVL src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T16B,\n@@ -4912,1 +5135,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -4918,1 +5141,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4921,1 +5144,1 @@\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"shl  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -4931,1 +5154,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4934,1 +5157,1 @@\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -4944,1 +5167,1 @@\n-  predicate(n->as_Vector()->length() == 2);\n+  predicate(n->as_Vector()->length() == 2 && assert_not_var_shift(n));\n@@ -4947,1 +5170,1 @@\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -4960,1 +5183,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -4965,1 +5188,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4974,1 +5197,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -4979,1 +5202,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -4988,1 +5211,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -4993,1 +5216,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -5002,1 +5225,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -5007,1 +5230,1 @@\n-           as_FloatRegister($src$$reg), sh);\n+            as_FloatRegister($src$$reg), sh);\n@@ -5016,1 +5239,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -5029,1 +5252,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -5042,1 +5265,1 @@\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector (2D)\" %}\n@@ -5055,1 +5278,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (8B)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (8B)\" %}\n@@ -5060,1 +5283,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5070,1 +5293,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (16B)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (16B)\" %}\n@@ -5075,1 +5298,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5085,1 +5308,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (4H)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (4H)\" %}\n@@ -5090,1 +5313,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5100,1 +5323,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (8H)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (8H)\" %}\n@@ -5105,1 +5328,1 @@\n-             as_FloatRegister($src$$reg), sh);\n+              as_FloatRegister($src$$reg), sh);\n@@ -5115,1 +5338,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (2S)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (2S)\" %}\n@@ -5128,1 +5351,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (4S)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (4S)\" %}\n@@ -5141,1 +5364,1 @@\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (2D)\" %}\n+  format %{ \"usra  $dst, $src, $shift\\t# vector (2D)\" %}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":416,"deletions":193,"binary":false,"changes":609,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-\/\/ Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2021, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n@@ -1884,4 +1884,6 @@\n-define(`VSHIFTCNT', `\n-instruct vshiftcnt$3$4`'(vec$5 dst, iRegIorL2I cnt) %{\n-  predicate(ifelse($3, 8, n->as_Vector()->length_in_bytes() == 4 ||`\n-            ')n->as_Vector()->length_in_bytes() == $3);\n+define(`VSLCNT', `\n+instruct vslcnt$1$2`'(vec$3 dst, iRegIorL2I cnt) %{\n+  predicate(ifelse($1, 8,\n+                   (n->as_Vector()->length_in_bytes() == 4 ||`\n+              'n->as_Vector()->length_in_bytes() == $1),\n+                   n->as_Vector()->length_in_bytes() == $1));\n@@ -1889,0 +1891,14 @@\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $cnt\\t# shift count vector ($1$2)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T$1$2, as_Register($cnt$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg`'ifelse($3, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRCNT', `\n+instruct vsrcnt$1$2`'(vec$3 dst, iRegIorL2I cnt) %{\n+  predicate(ifelse($1, 8,\n+                   (n->as_Vector()->length_in_bytes() == 4 ||`\n+             'n->as_Vector()->length_in_bytes() == $1),\n+                   n->as_Vector()->length_in_bytes() == $1));\n@@ -1890,1 +1906,3 @@\n-  format %{ \"$1  $dst, $cnt\\t# shift count vector ($3$4)\" %}\n+  ins_cost(INSN_COST * 2);\n+  format %{ \"negw  rscratch1, $cnt\\t\"\n+            \"dup   $dst, rscratch1\\t# shift count vector ($1$2)\" %}\n@@ -1892,1 +1910,2 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$4, as_Register($cnt$$reg));\n+    __ negw(rscratch1, as_Register($cnt$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T$1$2, rscratch1);\n@@ -1894,1 +1913,1 @@\n-  ins_pipe(vdup_reg_reg`'ifelse($5, D, 64, 128));\n+  ins_pipe(vdup_reg_reg`'ifelse($3, D, 64, 128));\n@@ -1896,3 +1915,24 @@\n-dnl       $1   $2   $3  $4 $5\n-VSHIFTCNT(dup, dup, 8,  B, D)\n-VSHIFTCNT(dup, dup, 16, B, X)\n+dnl\n+\n+\/\/ Vector shift count\n+\/\/ Note-1: Low 8 bits of each element are used, so it doesn't matter if we\n+\/\/         treat it as ints or bytes here.\n+\/\/ Note-2: Shift value is negated for RShiftCntV additionally. See the comments\n+\/\/         on vsra8B rule for more details.\n+dnl    $1  $2 $3\n+VSLCNT(8,  B, D)\n+VSLCNT(16, B, X)\n+VSRCNT(8,  B, D)\n+VSRCNT(16, B, X)\n+dnl\n+define(`PREDICATE',\n+`ifelse($1, 8B,\n+            ifelse($3, `', `predicate(n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8);',\n+                           `predicate((n->as_Vector()->length() == 4 || n->as_Vector()->length() == 8) &&`\n+            '$3);'),\n+        $1, 4S,\n+            ifelse($3, `', `predicate(n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4);',\n+                           `predicate((n->as_Vector()->length() == 2 || n->as_Vector()->length() == 4) &&`\n+            '$3);'),\n+        ifelse($3, `', `predicate(n->as_Vector()->length() == $2);',\n+                       `predicate(n->as_Vector()->length() == $2 && $3);'))')dnl\n@@ -1901,6 +1941,3 @@\n-instruct vsll$3$4`'(vec$6 dst, vec$6 src, vec$6 shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (LShiftV$4 src shift));\n+instruct vsll$1$2`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, )\n+  match(Set dst (LShiftV$2 src shift));\n@@ -1908,1 +1945,1 @@\n-  format %{ \"$1  $dst,$src,$shift\\t# vector ($3$5)\" %}\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector ($1$3)\" %}\n@@ -1910,1 +1947,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ sshl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -1914,1 +1951,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n@@ -1918,12 +1955,8 @@\n-instruct vsra$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (RShiftV$4 src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"$1  $tmp,$shift\\t\"\n-            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n-  ins_encode %{\n-    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n+instruct vsra$1$2`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, VectorNode::is_vshift_cnt(n->in(2)))\n+  match(Set dst (RShiftV$2 src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg),\n@@ -1931,1 +1964,16 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+  %}\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRA_VAR', `\n+instruct vsra$1$2_var`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, !VectorNode::is_vshift_cnt(n->in(2)))\n+  match(Set dst (RShiftV$2 src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"sshl  $dst,$src,$dst\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T`'ifelse($4, D, 8B, 16B),\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -1933,1 +1981,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -1935,1 +1983,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n@@ -1939,12 +1987,8 @@\n-instruct vsrl$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (URShiftV$4 src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"$1  $tmp,$shift\\t\"\n-            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n-  ins_encode %{\n-    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n+instruct vsrl$1$2`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, VectorNode::is_vshift_cnt(n->in(2)))\n+  match(Set dst (URShiftV$2 src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushl  $dst,$src,$shift\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ ushl(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg),\n@@ -1952,1 +1996,16 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+  %}\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRL_VAR', `\n+instruct vsrl$1$2_var`'(vec$4 dst, vec$4 src, vec$4 shift) %{\n+  PREDICATE(`$1$2', $1, !VectorNode::is_vshift_cnt(n->in(2)))\n+  match(Set dst (URShiftV$2 src shift));\n+  ins_cost(INSN_COST * 2);\n+  effect(TEMP_DEF dst);\n+  format %{ \"negr  $dst,$shift\\t\"\n+            \"ushl  $dst,$src,$dst\\t# vector ($1$3)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($dst$$reg), __ T`'ifelse($4, D, 8B, 16B),\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -1954,1 +2013,1 @@\n-            as_FloatRegister($tmp$$reg));\n+            as_FloatRegister($dst$$reg));\n@@ -1956,1 +2015,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128));\n@@ -1960,9 +2019,6 @@\n-instruct vsll$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (LShiftV$4 src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+instruct vsll$1$2_imm`'(vec$4 dst, vec$4 src, immI shift) %{\n+  PREDICATE(`$1$2', $1, assert_not_var_shift(n))\n+  match(Set dst (LShiftV$2 src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -1971,1 +2027,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -1975,1 +2031,1 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+      __ shl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -1977,1 +2033,1 @@\n-    }', $4, S,`\n+    }', $2, S,`\n@@ -1980,1 +2036,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -1984,1 +2040,1 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+      __ shl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -1987,1 +2043,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ shl(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -1991,1 +2047,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -1993,0 +2049,1 @@\n+dnl\n@@ -1994,9 +2051,6 @@\n-instruct vsra$3$4_imm`'(vec$6 dst, vec$6 src, immI_positive shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (RShiftV$4 src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+instruct vsra$1$2_imm`'(vec$4 dst, vec$4 src, immI_positive shift) %{\n+  PREDICATE(`$1$2', $1, assert_not_var_shift(n))\n+  match(Set dst (RShiftV$2 src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2005,2 +2059,2 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', $4, S,`\n+    __ sshr(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', $2, S,`\n@@ -2009,3 +2063,3 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', `\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ sshr(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', `\n+    __ sshr(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2015,1 +2069,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2019,9 +2073,6 @@\n-instruct vsrl$3$4_imm`'(vec$6 dst, vec$6 src, immI_positive shift) %{\n-  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n-            ',\n-  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (URShiftV$4 src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+instruct vsrl$1$2_imm`'(vec$4 dst, vec$4 src, immI_positive shift) %{\n+  PREDICATE(`$1$2', $1, assert_not_var_shift(n))\n+  match(Set dst (URShiftV$2 src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2030,1 +2081,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -2034,3 +2085,3 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n-    }', $4, S,`\n+      __ ushr(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n+    }', $2, S,`\n@@ -2039,1 +2090,1 @@\n-      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($4, D, T8B, T16B),\n@@ -2043,2 +2094,2 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n+      __ ushr(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n@@ -2046,1 +2097,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ ushr(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2050,1 +2101,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2054,3 +2105,3 @@\n-instruct vsrla$3$4_imm`'(vec$6 dst, vec$6 src, immI_positive shift) %{\n-  predicate(n->as_Vector()->length() == $3);\n-  match(Set dst (AddV$4 dst (URShiftV$4 src (RShiftCntV shift))));\n+instruct vsrla$1$2_imm`'(vec$4 dst, vec$4 src, immI_positive shift) %{\n+  predicate(n->as_Vector()->length() == $1);\n+  match(Set dst (AddV$2 dst (URShiftV$2 src (RShiftCntV shift))));\n@@ -2058,2 +2109,2 @@\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+  format %{ \"usra  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2062,3 +2113,3 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n-    }', $4, S,`\n+      __ usra(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n+    }', $2, S,`\n@@ -2067,2 +2118,2 @@\n-      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-             as_FloatRegister($src$$reg), sh);\n+      __ usra(as_FloatRegister($dst$$reg), __ T$1$3,\n+              as_FloatRegister($src$$reg), sh);\n@@ -2070,1 +2121,1 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ usra(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2074,1 +2125,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2078,3 +2129,3 @@\n-instruct vsraa$3$4_imm`'(vec$6 dst, vec$6 src, immI_positive shift) %{\n-  predicate(n->as_Vector()->length() == $3);\n-  match(Set dst (AddV$4 dst (RShiftV$4 src (RShiftCntV shift))));\n+instruct vsraa$1$2_imm`'(vec$4 dst, vec$4 src, immI_positive shift) %{\n+  predicate(n->as_Vector()->length() == $1);\n+  match(Set dst (AddV$2 dst (RShiftV$2 src (RShiftCntV shift))));\n@@ -2082,2 +2133,2 @@\n-  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n-  ins_encode %{ifelse($4, B,`\n+  format %{ \"ssra  $dst, $src, $shift\\t# vector ($1$3)\" %}\n+  ins_encode %{ifelse($2, B,`\n@@ -2086,2 +2137,2 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', $4, S,`\n+    __ ssra(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', $2, S,`\n@@ -2090,3 +2141,3 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n-           as_FloatRegister($src$$reg), sh);', `\n-    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+    __ ssra(as_FloatRegister($dst$$reg), __ T$1$3,\n+            as_FloatRegister($src$$reg), sh);', `\n+    __ ssra(as_FloatRegister($dst$$reg), __ T$1$3,\n@@ -2096,1 +2147,1 @@\n-  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+  ins_pipe(vshift`'ifelse($4, D, 64, 128)_imm);\n@@ -2098,3 +2149,6 @@\n-dnl  $1    $2    $3  $4 $5 $6\n-VSLL(sshl, sshl, 8,  B, B, D)\n-VSLL(sshl, sshl, 16, B, B, X)\n+dnl\n+undefine(PREDICATE)dnl\n+dnl\n+dnl  $1  $2 $3 $4\n+VSLL(8,  B, B, D)\n+VSLL(16, B, B, X)\n@@ -2111,2 +2165,0 @@\n-\/\/ Note: In inner loop, multiple neg instructions are used, which can be\n-\/\/ moved to outer loop and merge into one neg instruction.\n@@ -2122,55 +2174,77 @@\n-dnl  $1    $2    $3  $4 $5 $6\n-VSRA(negr, sshl, 8,  B, B, D)\n-VSRA(negr, sshl, 16, B, B, X)\n-VSRL(negr, ushl, 8,  B, B, D)\n-VSRL(negr, ushl, 16, B, B, X)\n-VSLL_IMM(shl, shl, 8,  B, B, D)\n-VSLL_IMM(shl, shl, 16, B, B, X)\n-VSRA_IMM(sshr, sshr, 8,  B, B, D)\n-VSRA_IMM(sshr, sshr, 16, B, B, X)\n-VSRL_IMM(ushr, ushr, 8,  B, B, D)\n-VSRL_IMM(ushr, ushr, 16, B, B, X)\n-VSLL(sshl, sshl, 4,  S, H, D)\n-VSLL(sshl, sshl, 8,  S, H, X)\n-VSRA(negr, sshl, 4,  S, H, D)\n-VSRA(negr, sshl, 8,  S, H, X)\n-VSRL(negr, ushl, 4,  S, H, D)\n-VSRL(negr, ushl, 8,  S, H, X)\n-VSLL_IMM(shl, shl, 4,  S, H, D)\n-VSLL_IMM(shl, shl, 8,  S, H, X)\n-VSRA_IMM(sshr, sshr, 4,  S, H, D)\n-VSRA_IMM(sshr, sshr, 8,  S, H, X)\n-VSRL_IMM(ushr, ushr, 4,  S, H, D)\n-VSRL_IMM(ushr, ushr, 8,  S, H, X)\n-VSLL(sshl, sshl, 2,  I, S, D)\n-VSLL(sshl, sshl, 4,  I, S, X)\n-VSRA(negr, sshl, 2,  I, S, D)\n-VSRA(negr, sshl, 4,  I, S, X)\n-VSRL(negr, ushl, 2,  I, S, D)\n-VSRL(negr, ushl, 4,  I, S, X)\n-VSLL_IMM(shl, shl, 2,  I, S, D)\n-VSLL_IMM(shl, shl, 4,  I, S, X)\n-VSRA_IMM(sshr, sshr, 2,  I, S, D)\n-VSRA_IMM(sshr, sshr, 4,  I, S, X)\n-VSRL_IMM(ushr, ushr, 2,  I, S, D)\n-VSRL_IMM(ushr, ushr, 4,  I, S, X)\n-VSLL(sshl, sshl, 2,  L, D, X)\n-VSRA(negr, sshl, 2,  L, D, X)\n-VSRL(negr, ushl, 2,  L, D, X)\n-VSLL_IMM(shl, shl, 2,  L, D, X)\n-VSRA_IMM(sshr, sshr, 2,  L, D, X)\n-VSRL_IMM(ushr, ushr, 2,  L, D, X)\n-VSRAA_IMM(ssra, ssra, 8,  B, B, D)\n-VSRAA_IMM(ssra, ssra, 16, B, B, X)\n-VSRAA_IMM(ssra, ssra, 4,  S, H, D)\n-VSRAA_IMM(ssra, ssra, 8,  S, H, X)\n-VSRAA_IMM(ssra, ssra, 2,  I, S, D)\n-VSRAA_IMM(ssra, ssra, 4,  I, S, X)\n-VSRAA_IMM(ssra, ssra, 2,  L, D, X)\n-VSRLA_IMM(usra, usra, 8,  B, B, D)\n-VSRLA_IMM(usra, usra, 16, B, B, X)\n-VSRLA_IMM(usra, usra, 4,  S, H, D)\n-VSRLA_IMM(usra, usra, 8,  S, H, X)\n-VSRLA_IMM(usra, usra, 2,  I, S, D)\n-VSRLA_IMM(usra, usra, 4,  I, S, X)\n-VSRLA_IMM(usra, usra, 2,  L, D, X)\n+\/\/ The negate is conducted in RShiftCntV rule for case 1, whereas it's done in\n+\/\/ RShiftV* rules for case 2. Because there exists an optimization opportunity\n+\/\/ for case 1, that is, multiple neg instructions in inner loop can be hoisted\n+\/\/ to outer loop and merged into one neg instruction.\n+\/\/\n+\/\/ Note that ShiftVNode::is_var_shift() indicates whether the vector shift\n+\/\/ count is a variable vector(case 2) or not(a vector generated by RShiftCntV,\n+\/\/ i.e. case 1).\n+dnl  $1  $2 $3 $4\n+VSRA(8,  B, B, D)\n+VSRA_VAR(8,  B, B, D)\n+VSRA(16, B, B, X)\n+VSRA_VAR(16, B, B, X)\n+VSRL(8,  B, B, D)\n+VSRL_VAR(8,  B, B, D)\n+VSRL(16, B, B, X)\n+VSRL_VAR(16, B, B, X)\n+VSLL_IMM(8,  B, B, D)\n+VSLL_IMM(16, B, B, X)\n+VSRA_IMM(8,  B, B, D)\n+VSRA_IMM(16, B, B, X)\n+VSRL_IMM(8,  B, B, D)\n+VSRL_IMM(16, B, B, X)\n+VSLL(4,  S, H, D)\n+VSLL(8,  S, H, X)\n+VSRA(4,  S, H, D)\n+VSRA_VAR(4,  S, H, D)\n+VSRA(8,  S, H, X)\n+VSRA_VAR(8,  S, H, X)\n+VSRL(4,  S, H, D)\n+VSRL_VAR(4,  S, H, D)\n+VSRL(8,  S, H, X)\n+VSRL_VAR(8,  S, H, X)\n+VSLL_IMM(4,  S, H, D)\n+VSLL_IMM(8,  S, H, X)\n+VSRA_IMM(4,  S, H, D)\n+VSRA_IMM(8,  S, H, X)\n+VSRL_IMM(4,  S, H, D)\n+VSRL_IMM(8,  S, H, X)\n+VSLL(2,  I, S, D)\n+VSLL(4,  I, S, X)\n+VSRA(2,  I, S, D)\n+VSRA_VAR(2,  I, S, D)\n+VSRA(4,  I, S, X)\n+VSRA_VAR(4,  I, S, X)\n+VSRL(2,  I, S, D)\n+VSRL_VAR(2,  I, S, D)\n+VSRL(4,  I, S, X)\n+VSRL_VAR(4,  I, S, X)\n+VSLL_IMM(2,  I, S, D)\n+VSLL_IMM(4,  I, S, X)\n+VSRA_IMM(2,  I, S, D)\n+VSRA_IMM(4,  I, S, X)\n+VSRL_IMM(2,  I, S, D)\n+VSRL_IMM(4,  I, S, X)\n+VSLL(2,  L, D, X)\n+VSRA(2,  L, D, X)\n+VSRA_VAR(2,  L, D, X)\n+VSRL(2,  L, D, X)\n+VSRL_VAR(2,  L, D, X)\n+VSLL_IMM(2,  L, D, X)\n+VSRA_IMM(2,  L, D, X)\n+VSRL_IMM(2,  L, D, X)\n+VSRAA_IMM(8,  B, B, D)\n+VSRAA_IMM(16, B, B, X)\n+VSRAA_IMM(4,  S, H, D)\n+VSRAA_IMM(8,  S, H, X)\n+VSRAA_IMM(2,  I, S, D)\n+VSRAA_IMM(4,  I, S, X)\n+VSRAA_IMM(2,  L, D, X)\n+VSRLA_IMM(8,  B, B, D)\n+VSRLA_IMM(16, B, B, X)\n+VSRLA_IMM(4,  S, H, D)\n+VSRLA_IMM(8,  S, H, X)\n+VSRLA_IMM(2,  I, S, D)\n+VSRLA_IMM(4,  I, S, X)\n+VSRLA_IMM(2,  L, D, X)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":257,"deletions":183,"binary":false,"changes":440,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.Random;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class VectorShiftRight {\n+    @Param({\"1024\"})\n+    public int SIZE;\n+\n+    private byte[]  bytesA,  bytesB;\n+    private short[] shortsA, shortsB;\n+    private char[]  charsA,  charsB;\n+    private int[]   intsA,   intsB;\n+    private long[]  longsA,  longsB;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private Random r = new Random(seed);\n+\n+    @Param(\"3\")\n+    private int shiftCount;\n+\n+    @Setup\n+    public void init() {\n+        bytesA  = new byte[SIZE];\n+        shortsA = new short[SIZE];\n+        charsA  = new char[SIZE];\n+        intsA   = new int[SIZE];\n+        longsA  = new long[SIZE];\n+\n+        bytesB  = new byte[SIZE];\n+        shortsB = new short[SIZE];\n+        charsB  = new char[SIZE];\n+        intsB   = new int[SIZE];\n+        longsB  = new long[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            bytesA[i]  = (byte) r.nextInt();\n+            shortsA[i] = (short) r.nextInt();\n+            charsA[i]  = (char) r.nextInt();\n+            intsA[i]   = r.nextInt();\n+            longsA[i]  = r.nextLong();\n+       }\n+    }\n+\n+    @Benchmark\n+    public void rShiftByte() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bytesB[i] = (byte) (bytesA[i] >> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftByte() {\n+        for (int i = 0; i < SIZE; i++) {\n+            bytesB[i] = (byte) (bytesA[i] >>> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rShiftShort() {\n+        for (int i = 0; i < SIZE; i++) {\n+            shortsB[i] = (short) (shortsA[i] >> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftChar() {\n+        for (int i = 0; i < SIZE; i++) {\n+            charsB[i] = (char) (charsA[i] >>> shiftCount);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rShiftInt() {\n+        for (int i = 0; i < SIZE; i++) {\n+            intsB[i] = intsA[i] >> shiftCount;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftInt() {\n+        for (int i = 0; i < SIZE; i++) {\n+            intsB[i] = intsA[i] >>> shiftCount;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void rShiftLong() {\n+        for (int i = 0; i < SIZE; i++) {\n+            longsB[i] = longsA[i] >> shiftCount;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void urShiftLong() {\n+        for (int i = 0; i < SIZE; i++) {\n+            longsB[i] = longsA[i] >>> shiftCount;\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorShiftRight.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}