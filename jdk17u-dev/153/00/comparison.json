{"files":[{"patch":"@@ -30,1 +30,1 @@\n- *      8067796 8224905 8263729 8265173\n+ *      8067796 8224905 8263729 8265173 8272600 8231297\n@@ -35,2 +35,2 @@\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow Basic\n- * @run main\/othervm\/timeout=300 -Djava.security.manager=allow -Djdk.lang.Process.launchMechanism=fork Basic\n+ * @run main\/othervm\/native\/timeout=300 -Djava.security.manager=allow Basic\n+ * @run main\/othervm\/native\/timeout=300 -Djava.security.manager=allow -Djdk.lang.Process.launchMechanism=fork Basic\n@@ -53,1 +53,0 @@\n-import java.lang.reflect.Field;\n@@ -55,0 +54,1 @@\n+import java.nio.file.Path;\n@@ -88,1 +88,1 @@\n-     * call to {@link System.nanoTime()}.\n+     * call to {@link System#nanoTime()}.\n@@ -2140,1 +2140,1 @@\n-                List<String> childArgs = new ArrayList<>(javaChildArgs);\n+                List<String> childArgs = getSleepArgs();\n@@ -2142,26 +2142,0 @@\n-                {\n-                    \/\/ Redirect any child VM error output away from the stream being tested\n-                    \/\/ and to the log file. For background see:\n-                    \/\/ 8231297: java\/lang\/ProcessBuilder\/Basic.java test fails intermittently\n-                    \/\/ Destroying the process may, depending on the timing, cause some output\n-                    \/\/ from the child VM.\n-                    \/\/ This test requires the thread reading from the subprocess be blocked\n-                    \/\/ in the read from the subprocess; there should be no bytes to read.\n-                    \/\/ Modify the argument list shared with ProcessBuilder to redirect VM output.\n-                    assert (childArgs.get(1).equals(\"-XX:+DisplayVMOutputToStderr\")) : \"Expected arg 1 to be \\\"-XX:+DisplayVMOutputToStderr\\\"\";\n-                    switch (action & 0x1) {\n-                        case 0:\n-                            childArgs.set(1, \"-XX:+DisplayVMOutputToStderr\");\n-                            childArgs.add(2, \"-Xlog:all=warning:stderr\");\n-                            pb.redirectError(INHERIT);\n-                            break;\n-                        case 1:\n-                            childArgs.set(1, \"-XX:+DisplayVMOutputToStdout\");\n-                            childArgs.add(2, \"-Xlog:all=warning:stdout\");\n-                            pb.redirectOutput(INHERIT);\n-                            break;\n-                        default:\n-                            throw new Error();\n-                    }\n-                }\n-                childArgs.add(\"sleep\");\n@@ -2240,3 +2214,4 @@\n-                \/\/ Running the grandchild for 60s should be more than enough.\n-                final String[] cmd = { \"\/bin\/bash\", \"-c\", \"(\/bin\/sleep 60)\" };\n-                final String[] cmdkill = { \"\/bin\/bash\", \"-c\", \"(\/usr\/bin\/pkill -f \\\"sleep 60\\\")\" };\n+                \/\/ Running the grandchild for 59s should be more than enough.\n+                \/\/ A unique (59s) time is needed to avoid killing other sleep processes.\n+                final String[] cmd = { \"\/bin\/bash\", \"-c\", \"(\/bin\/sleep 59)\" };\n+                final String[] cmdkill = { \"\/bin\/bash\", \"-c\", \"(\/usr\/bin\/pkill -f \\\"sleep 59\\\")\" };\n@@ -2444,2 +2419,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2474,2 +2448,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2479,6 +2452,9 @@\n-            p.waitFor(10, TimeUnit.MILLISECONDS);\n-\n-            long end = System.nanoTime();\n-            if ((end - start) < TimeUnit.MILLISECONDS.toNanos(10))\n-                fail(\"Test failed: waitFor didn't take long enough (\" + (end - start) + \"ns)\");\n-\n+            if (p.waitFor(10, TimeUnit.MILLISECONDS)) {\n+                var msg = \"External sleep process terminated early: exitValue: %d, (%dns)%n\"\n+                        .formatted(p.exitValue(), (System.nanoTime() - start));\n+                fail(msg);\n+            } else {\n+                long end = System.nanoTime();\n+                if ((end - start) < TimeUnit.MILLISECONDS.toNanos(10))\n+                    fail(\"Test failed: waitFor didn't take long enough (\" + (end - start) + \"ns)\");\n+            }\n@@ -2493,2 +2469,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2525,2 +2500,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2557,2 +2531,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2589,2 +2562,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2613,2 +2585,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2640,2 +2611,1 @@\n-            List<String> childArgs = new ArrayList<String>(javaChildArgs);\n-            childArgs.add(\"sleep\");\n+            List<String> childArgs = getSleepArgs();\n@@ -2646,6 +2616,9 @@\n-            p.waitFor(1000, TimeUnit.MILLISECONDS);\n-\n-            long end = System.nanoTime();\n-            if ((end - start) < 500000000)\n-                fail(\"Test failed: waitFor didn't take long enough\");\n-\n+            if (p.waitFor(1000, TimeUnit.MILLISECONDS)) {\n+                var msg = \"External sleep process terminated early: exitValue: %02x, (%dns)\"\n+                        .formatted(p.exitValue(), (System.nanoTime() - start));\n+                fail(msg);\n+            } else {\n+                long end = System.nanoTime();\n+                if ((end - start) < 500000000)\n+                    fail(\"Test failed: waitFor didn't take long enough (\" + (end - start) + \"ns)\");\n+            }\n@@ -2658,0 +2631,49 @@\n+    \/\/ Path to native executables, if any\n+    private static final String TEST_NATIVEPATH = System.getProperty(\"test.nativepath\");\n+\n+    \/\/ Path where \"sleep\" program may be found\" or null\n+    private static final Path SLEEP_PATH = initSleepPath();\n+\n+    \/**\n+     * Compute the Path to a sleep executable.\n+     * @return a Path to sleep or BasicSleep(.exe) or null if none\n+     *\/\n+    private static Path initSleepPath() {\n+        if (Windows.is() && TEST_NATIVEPATH != null) {\n+            \/\/ exeBasicSleep is equivalent to sleep on Unix\n+            Path exePath = Path.of(TEST_NATIVEPATH).resolve(\"BasicSleep.exe\");\n+            if (Files.isExecutable(exePath)) {\n+                return exePath;\n+            }\n+        }\n+\n+        List<String> binPaths = List.of(\"\/bin\", \"\/usr\/bin\");\n+        for (String dir : binPaths) {\n+            Path exePath = Path.of(dir).resolve(\"sleep\");\n+            if (Files.isExecutable(exePath)) {\n+                return exePath;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * Return the list of process arguments for a child to sleep 10 minutes (600 seconds).\n+     *\n+     * @return A list of process arguments to sleep 10 minutes.\n+     *\/\n+    private static List<String> getSleepArgs() {\n+        List<String> childArgs = null;\n+        if (SLEEP_PATH != null) {\n+            childArgs = List.of(SLEEP_PATH.toString(), \"600\");\n+        } else {\n+            \/\/ Fallback to the JavaChild ; its 'sleep' command is for 10 minutes.\n+            \/\/ The fallback the Java$Child is used if the test is run without building\n+            \/\/ the BasicSleep native executable (for Windows).\n+            childArgs = new ArrayList<>(javaChildArgs);\n+            childArgs.add(\"sleep\");\n+            System.out.println(\"Sleep not found, fallback to JavaChild: \" + childArgs);\n+        }\n+        return childArgs;\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":85,"deletions":63,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#ifdef _WIN32\n+    #include <windows.h>\n+#else\n+    #include <unistd.h>\n+#endif\n+\/**\n+ * Command line program to sleep at least given number of seconds.\n+ * The behavior should equivalent to the Unix sleep command.\n+ * Actual time sleeping may vary if interrupted, the remaining time\n+ * returned from sleep has limited accuracy.\n+ *\n+ * Note: the file name prefix \"exe\" identifies the source should be built into BasicSleep(.exe).\n+ *\/\n+int main(int argc, char** argv) {\n+    int seconds;\n+\n+    if (argc < 2 || (seconds = atoi(argv[1])) < 0) {\n+        fprintf(stderr, \"usage: BasicSleep <non-negative seconds>\\n\");\n+        exit(1);\n+    }\n+\n+#ifdef _WIN32\n+    Sleep(seconds * 1000);\n+#else\n+    while ((seconds = sleep(seconds)) > 0) {\n+        \/\/ until no more to sleep\n+    }\n+#endif\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/exeBasicSleep.c","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}