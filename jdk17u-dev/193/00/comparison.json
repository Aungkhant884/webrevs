{"files":[{"patch":"@@ -318,0 +318,15 @@\n+  } else if (vbox->is_Phi() && (vect->is_Vector() || vect->is_LoadVector())) {\n+    \/\/ Handle the case when the allocation input to VectorBoxNode is a phi\n+    \/\/ but the vector input is not, which can definitely be the case if the\n+    \/\/ vector input has been value-numbered. It seems to be safe to do by\n+    \/\/ construction because VectorBoxNode and VectorBoxAllocate come in a\n+    \/\/ specific order as a result of expanding an intrinsic call. After that, if\n+    \/\/ any of the inputs to VectorBoxNode are value-numbered they can only\n+    \/\/ move up and are guaranteed to dominate.\n+    Node* new_phi = new PhiNode(vbox->as_Phi()->region(), box_type);\n+    for (uint i = 1; i < vbox->req(); i++) {\n+      Node* new_box = expand_vbox_node_helper(vbox->in(i), vect, box_type, vect_type);\n+      new_phi->set_req(i, new_box);\n+    }\n+    new_phi = C->initial_gvn()->transform(new_phi);\n+    return new_phi;\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}