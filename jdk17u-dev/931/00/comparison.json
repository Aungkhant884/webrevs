{"files":[{"patch":"@@ -239,2 +239,2 @@\n-<th style=\"text-align: left;\">Operating system<\/th>\n-<th style=\"text-align: left;\">Supported toolchain<\/th>\n+<th>Operating system<\/th>\n+<th>Supported toolchain<\/th>\n@@ -245,2 +245,2 @@\n-<td style=\"text-align: left;\">Linux<\/td>\n-<td style=\"text-align: left;\">gcc, clang<\/td>\n+<td>Linux<\/td>\n+<td>gcc, clang<\/td>\n@@ -249,2 +249,2 @@\n-<td style=\"text-align: left;\">macOS<\/td>\n-<td style=\"text-align: left;\">Apple Xcode (using clang)<\/td>\n+<td>macOS<\/td>\n+<td>Apple Xcode (using clang)<\/td>\n@@ -253,2 +253,2 @@\n-<td style=\"text-align: left;\">AIX<\/td>\n-<td style=\"text-align: left;\">IBM XL C\/C++<\/td>\n+<td>AIX<\/td>\n+<td>IBM XL C\/C++<\/td>\n@@ -257,2 +257,2 @@\n-<td style=\"text-align: left;\">Windows<\/td>\n-<td style=\"text-align: left;\">Microsoft Visual Studio<\/td>\n+<td>Windows<\/td>\n+<td>Microsoft Visual Studio<\/td>\n@@ -266,2 +266,2 @@\n-<th style=\"text-align: left;\">Operating system<\/th>\n-<th style=\"text-align: left;\">Toolchain version<\/th>\n+<th>Operating system<\/th>\n+<th>Toolchain version<\/th>\n@@ -272,2 +272,2 @@\n-<td style=\"text-align: left;\">Linux<\/td>\n-<td style=\"text-align: left;\">gcc 10.2.0<\/td>\n+<td>Linux<\/td>\n+<td>gcc 10.2.0<\/td>\n@@ -276,2 +276,2 @@\n-<td style=\"text-align: left;\">macOS<\/td>\n-<td style=\"text-align: left;\">Apple Xcode 10.1 (using clang 10.0.0)<\/td>\n+<td>macOS<\/td>\n+<td>Apple Xcode 10.1 (using clang 10.0.0)<\/td>\n@@ -280,2 +280,2 @@\n-<td style=\"text-align: left;\">Windows<\/td>\n-<td style=\"text-align: left;\">Microsoft Visual Studio 2022 update 17.1.0<\/td>\n+<td>Windows<\/td>\n+<td>Microsoft Visual Studio 2022 update 17.1.0<\/td>\n@@ -295,1 +295,1 @@\n-<p>You will need the Xcode command lines developers tools to be able to build the JDK. (Actually, <em>only<\/em> the command lines tools are needed, not the IDE.) The simplest way to install these is to run:<\/p>\n+<p>You will need the Xcode command line developer tools to be able to build the JDK. (Actually, <em>only<\/em> the command line tools are needed, not the IDE.) The simplest way to install these is to run:<\/p>\n@@ -297,1 +297,5 @@\n-<p>It is advisable to keep an older version of Xcode for building the JDK when updating Xcode. This <a href=\"http:\/\/iosdevelopertips.com\/xcode\/install-multiple-versions-of-xcode.html\">blog page<\/a> has good suggestions on managing multiple Xcode versions. To use a specific version of Xcode, use <code>xcode-select -s<\/code> before running <code>configure<\/code>, or use <code>--with-toolchain-path<\/code> to point to the version of Xcode to use, e.g. <code>configure --with-toolchain-path=\/Applications\/Xcode8.app\/Contents\/Developer\/usr\/bin<\/code><\/p>\n+<p>When updating Xcode, it is advisable to keep an older version for building the JDK. To use a specific version of Xcode you have multiple options:<\/p>\n+<ul>\n+<li>Use <code>xcode-select -s<\/code> before running <code>configure<\/code>, e.g. <code>xcode-select -s \/Applications\/Xcode13.1.app<\/code>. The drawback is that the setting is system wide and you may have to revert it after an OpenJDK build.<\/li>\n+<li>Use configure option <code>--with-xcode-path<\/code>, e.g. <code>configure --with-xcode-path=\/Applications\/Xcode13.1.app<\/code> This allows using a specific Xcode version for an OpenJDK build, independently of the active Xcode version by <code>xcode-select<\/code>.<\/li>\n+<\/ul>\n@@ -300,1 +304,1 @@\n-<p>For aarch64 machines running Windows the minimum accepted version is Visual Studio 2019 (16.8 or higher). For all other platforms the minimum accepted version of Visual Studio is 2017. Older versions will not be accepted by <code>configure<\/code> and will not work. For all platforms the maximum accepted version of Visual Studio is 2019.<\/p>\n+<p>The minimum accepted version of Visual Studio is 2017. Older versions will not be accepted by <code>configure<\/code> and will not work. The maximum accepted version of Visual Studio is 2019.<\/p>\n","filename":"doc\/building.html","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -308,6 +308,6 @@\n- Operating system   Supported toolchain\n- ------------------ -------------------------\n- Linux              gcc, clang\n- macOS              Apple Xcode (using clang)\n- AIX                IBM XL C\/C++\n- Windows            Microsoft Visual Studio\n+| Operating system   | Supported toolchain       |\n+| ------------------ | ------------------------- |\n+| Linux              | gcc, clang                |\n+| macOS              | Apple Xcode (using clang) |\n+| AIX                | IBM XL C\/C++              |\n+| Windows            | Microsoft Visual Studio   |\n@@ -322,5 +322,5 @@\n- Operating system   Toolchain version\n- ------------------ -------------------------------------------------------\n- Linux              gcc 10.2.0\n- macOS              Apple Xcode 10.1 (using clang 10.0.0)\n- Windows            Microsoft Visual Studio 2022 update 17.1.0\n+| Operating system   | Toolchain version                          |\n+| ------------------ | ------------------------------------------ |\n+| Linux              | gcc 10.2.0                                 |\n+| macOS              | Apple Xcode 10.1 (using clang 10.0.0)      |\n+| Windows            | Microsoft Visual Studio 2022 update 17.1.0 |\n@@ -354,2 +354,2 @@\n-You will need the Xcode command lines developers tools to be able to build\n-the JDK. (Actually, *only* the command lines tools are needed, not the IDE.)\n+You will need the Xcode command line developer tools to be able to build\n+the JDK. (Actually, *only* the command line tools are needed, not the IDE.)\n@@ -361,7 +361,7 @@\n-It is advisable to keep an older version of Xcode for building the JDK when\n-updating Xcode. This [blog page](\n-http:\/\/iosdevelopertips.com\/xcode\/install-multiple-versions-of-xcode.html) has\n-good suggestions on managing multiple Xcode versions. To use a specific version\n-of Xcode, use `xcode-select -s` before running `configure`, or use\n-`--with-toolchain-path` to point to the version of Xcode to use, e.g.\n-`configure --with-toolchain-path=\/Applications\/Xcode8.app\/Contents\/Developer\/usr\/bin`\n+When updating Xcode, it is advisable to keep an older version for building the JDK.\n+To use a specific version of Xcode you have multiple options:\n+\n+  * Use `xcode-select -s` before running `configure`, e.g. `xcode-select -s \/Applications\/Xcode13.1.app`. The drawback is that the setting\n+    is system wide and you may have to revert it after an OpenJDK build.\n+  * Use configure option `--with-xcode-path`, e.g. `configure --with-xcode-path=\/Applications\/Xcode13.1.app`\n+    This allows using a specific Xcode version for an OpenJDK build, independently of the active Xcode version by `xcode-select`.\n","filename":"doc\/building.md","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -215,0 +215,12 @@\n+  AC_ARG_WITH([xcode-path], [AS_HELP_STRING([--with-xcode-path],\n+      [set up toolchain on Mac OS using a path to an Xcode installation])])\n+\n+  if test \"x$with_xcode_path\" != x; then\n+    if test \"x$OPENJDK_BUILD_OS\" = \"xmacosx\"; then\n+      UTIL_PREPEND_TO_PATH([TOOLCHAIN_PATH],\n+          $with_xcode_path\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin:$with_xcode_path\/Contents\/Developer\/usr\/bin)\n+    else\n+      AC_MSG_WARN([Option --with-xcode-path is only valid on Mac OS, ignoring.])\n+    fi\n+  fi\n+\n@@ -225,1 +237,1 @@\n-    if test \"x$DEVKIT_ROOT\" != x || \/usr\/bin\/xcodebuild -version >\/dev\/null 2>&1; then\n+    if test \"x$DEVKIT_ROOT\" != x || test \"x$TOOLCHAIN_PATH\" != x || \/usr\/bin\/xcodebuild -version >\/dev\/null 2>&1; then\n","filename":"make\/autoconf\/basic.m4","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}