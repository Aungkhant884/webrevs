{"files":[{"patch":"@@ -95,2 +95,2 @@\n-void Jfr::on_vm_shutdown(bool exception_handler) {\n-  if (JfrRecorder::is_recording()) {\n+void Jfr::on_vm_shutdown(bool exception_handler, bool halt) {\n+  if (!halt && JfrRecorder::is_recording()) {\n","filename":"src\/hotspot\/share\/jfr\/jfr.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  static void on_vm_shutdown(bool exception_handler = false);\n+  static void on_vm_shutdown(bool exception_handler = false, bool halt = false);\n","filename":"src\/hotspot\/share\/jfr\/jfr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-  before_exit(thread);\n+  before_exit(thread, true);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -407,1 +407,1 @@\n-void before_exit(JavaThread* thread) {\n+void before_exit(JavaThread* thread, bool halt) {\n@@ -454,1 +454,1 @@\n-  JFR_ONLY(Jfr::on_vm_shutdown();)\n+  JFR_ONLY(Jfr::on_vm_shutdown(false, halt);)\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-extern void before_exit(JavaThread * thread);\n+extern void before_exit(JavaThread * thread, bool halt = false);\n","filename":"src\/hotspot\/share\/runtime\/java.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,4 +77,6 @@\n-        test(CrasherIllegalAccess.class, \"\", true);\n-        test(CrasherIllegalAccess.class, \"\", false);\n-        test(CrasherHalt.class, \"\", true);\n-        test(CrasherHalt.class, \"\", false);\n+        test(CrasherIllegalAccess.class, \"\", true, null, true);\n+        test(CrasherIllegalAccess.class, \"\", false, null, true);\n+\n+        \/\/ JDK-8290020 disables dumps when calling halt, so expect no dump.\n+        test(CrasherHalt.class, \"\", true, null, false);\n+        test(CrasherHalt.class, \"\", false, null, false);\n@@ -84,1 +86,1 @@\n-        \/\/ test(CrasherSig.class, \"FPE\", true);\n+        \/\/ test(CrasherSig.class, \"FPE\", true, true);\n@@ -87,1 +89,1 @@\n-    private static void test(Class<?> crasher, String signal, boolean disk) throws Exception {\n+    private static void test(Class<?> crasher, String signal, boolean disk, String dumppath, boolean expectDump) throws Exception {\n@@ -92,1 +94,1 @@\n-                verify(runProcess(crasher, signal, disk));\n+                verify(runProcess(crasher, signal, disk), dumppath, expectDump);\n@@ -128,1 +130,1 @@\n-    private static void verify(long pid) throws IOException {\n+    private static void verify(long pid, String dumppath, boolean expectDump) throws IOException {\n@@ -132,3 +134,4 @@\n-        Asserts.assertTrue(Files.exists(file), \"No emergency jfr recording file \" + file + \" exists\");\n-        Asserts.assertNotEquals(Files.size(file), 0L, \"File length 0. Should at least be some bytes\");\n-        System.out.printf(\"File size=%d%n\", Files.size(file));\n+        if (expectDump) {\n+            Asserts.assertTrue(Files.exists(file), \"No emergency jfr recording file \" + file + \" exists\");\n+            Asserts.assertNotEquals(Files.size(file), 0L, \"File length 0. Should at least be some bytes\");\n+            System.out.printf(\"File size=%d%n\", Files.size(file));\n@@ -136,3 +139,3 @@\n-        List<RecordedEvent> events = RecordingFile.readAllEvents(file);\n-        Asserts.assertFalse(events.isEmpty(), \"No event found\");\n-        System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n+            List<RecordedEvent> events = RecordingFile.readAllEvents(file);\n+            Asserts.assertFalse(events.isEmpty(), \"No event found\");\n+            System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n@@ -140,1 +143,4 @@\n-        Files.delete(file);\n+            Files.delete(file);\n+        } else {\n+            Asserts.assertFalse(Files.exists(file), \"Emergency jfr recording file \" + file + \" exists but wasn't expected\");\n+        }\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestDumpOnCrash.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"}]}