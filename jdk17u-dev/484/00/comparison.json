{"files":[{"patch":"@@ -194,1 +194,1 @@\n-bool CompilationPolicy::is_trivial(Method* method) {\n+bool CompilationPolicy::is_trivial(const methodHandle& method) {\n@@ -248,1 +248,1 @@\n-  static bool apply(int i, int b, CompLevel cur_level, const methodHandle& method) {\n+  static bool apply(const methodHandle& method, CompLevel cur_level, int i, int b) {\n@@ -288,1 +288,1 @@\n-  static bool apply(int i, int b, CompLevel cur_level, const methodHandle& method) {\n+  static bool apply(const methodHandle& method, CompLevel cur_level, int i, int b) {\n@@ -599,1 +599,1 @@\n-void CompilationPolicy::handle_counter_overflow(Method* method) {\n+void CompilationPolicy::handle_counter_overflow(const methodHandle& method) {\n@@ -622,1 +622,0 @@\n-    Method* method = task->method();\n@@ -625,6 +624,10 @@\n-    if (task->is_unloaded() || (task->can_become_stale() && is_stale(t, TieredCompileTaskTimeout, method) && !is_old(method))) {\n-      if (!task->is_unloaded()) {\n-        if (PrintTieredEvents) {\n-          print_event(REMOVE_FROM_QUEUE, method, method, task->osr_bci(), (CompLevel) task->comp_level());\n-        }\n-        method->clear_queued_for_compilation();\n+    if (task->is_unloaded()) {\n+      compile_queue->remove_and_mark_stale(task);\n+      task = next_task;\n+      continue;\n+    }\n+    Method* method = task->method();\n+    methodHandle mh(Thread::current(), method);\n+    if (task->can_become_stale() && is_stale(t, TieredCompileTaskTimeout, mh) && !is_old(mh)) {\n+      if (PrintTieredEvents) {\n+        print_event(REMOVE_FROM_QUEUE, method, method, task->osr_bci(), (CompLevel) task->comp_level());\n@@ -632,0 +635,1 @@\n+      method->clear_queued_for_compilation();\n@@ -636,1 +640,1 @@\n-    update_rate(t, method);\n+    update_rate(t, mh);\n@@ -714,1 +718,1 @@\n-  handle_counter_overflow(method());\n+  handle_counter_overflow(method);\n@@ -716,1 +720,1 @@\n-    handle_counter_overflow(inlinee());\n+    handle_counter_overflow(inlinee);\n@@ -795,1 +799,1 @@\n-    update_rate(nanos_to_millis(os::javaTimeNanos()), mh());\n+    update_rate(nanos_to_millis(os::javaTimeNanos()), mh);\n@@ -801,1 +805,1 @@\n-void CompilationPolicy::update_rate(jlong t, Method* m) {\n+void CompilationPolicy::update_rate(jlong t, const methodHandle& method) {\n@@ -804,1 +808,1 @@\n-  if (m->method_counters() == NULL)  return;\n+  if (method->method_counters() == NULL)  return;\n@@ -806,1 +810,1 @@\n-  if (is_old(m)) {\n+  if (is_old(method)) {\n@@ -809,1 +813,1 @@\n-    m->set_rate(0);\n+    method->set_rate(0);\n@@ -816,1 +820,1 @@\n-  jlong delta_t = t - (m->prev_time() != 0 ? m->prev_time() : start_time()); \/\/ milliseconds since the last measurement\n+  jlong delta_t = t - (method->prev_time() != 0 ? method->prev_time() : start_time()); \/\/ milliseconds since the last measurement\n@@ -818,2 +822,2 @@\n-  int event_count = m->invocation_count() + m->backedge_count();\n-  int delta_e = event_count - m->prev_event_count();\n+  int event_count = method->invocation_count() + method->backedge_count();\n+  int delta_e = event_count - method->prev_event_count();\n@@ -825,3 +829,3 @@\n-      m->set_prev_time(t);\n-      m->set_prev_event_count(event_count);\n-      m->set_rate((float)delta_e \/ (float)delta_t); \/\/ Rate is events per millisecond\n+      method->set_prev_time(t);\n+      method->set_prev_event_count(event_count);\n+      method->set_rate((float)delta_e \/ (float)delta_t); \/\/ Rate is events per millisecond\n@@ -831,1 +835,1 @@\n-        m->set_rate(0);\n+        method->set_rate(0);\n@@ -839,1 +843,1 @@\n-bool CompilationPolicy::is_stale(jlong t, jlong timeout, Method* m) {\n+bool CompilationPolicy::is_stale(jlong t, jlong timeout, const methodHandle& method) {\n@@ -841,1 +845,1 @@\n-  jlong delta_t = t - m->prev_time();\n+  jlong delta_t = t - method->prev_time();\n@@ -843,2 +847,2 @@\n-    int event_count = m->invocation_count() + m->backedge_count();\n-    int delta_e = event_count - m->prev_event_count();\n+    int event_count = method->invocation_count() + method->backedge_count();\n+    int delta_e = event_count - method->prev_event_count();\n@@ -853,2 +857,6 @@\n-bool CompilationPolicy::is_old(Method* method) {\n-  return method->invocation_count() > 50000 || method->backedge_count() > 500000;\n+bool CompilationPolicy::is_old(const methodHandle& method) {\n+  int i = method->invocation_count();\n+  int b = method->backedge_count();\n+  double k = TieredOldPercentage \/ 100.0;\n+\n+  return CallPredicate::apply_scaled(method, CompLevel_none, i, b, k) || LoopPredicate::apply_scaled(method, CompLevel_none, i, b, k);\n@@ -858,2 +866,1 @@\n-  return (double)(method->rate() + 1) *\n-    (method->invocation_count() + 1) * (method->backedge_count() + 1);\n+  return (double)(method->rate() + 1) * (method->invocation_count() + 1) * (method->backedge_count() + 1);\n@@ -908,0 +915,3 @@\n+  if (is_old(method)) {\n+    return true;\n+  }\n@@ -914,1 +924,1 @@\n-    return CallPredicate::apply_scaled(method, CompLevel_full_profile, i, b, k) || LoopPredicate::apply_scaled(method, CompLevel_full_profile, i, b, k);\n+    return CallPredicate::apply_scaled(method, CompLevel_none, i, b, k) || LoopPredicate::apply_scaled(method, CompLevel_none, i, b, k);\n@@ -1004,1 +1014,1 @@\n-    if (is_trivial(method())) {\n+    if (is_trivial(method)) {\n@@ -1013,1 +1023,1 @@\n-        } else if (!CompilationModeFlag::disable_intermediate() && Predicate::apply(i, b, cur_level, method)) {\n+        } else if (!CompilationModeFlag::disable_intermediate() && Predicate::apply(method, cur_level, i, b)) {\n@@ -1039,1 +1049,1 @@\n-                                       Predicate::apply(i, b, cur_level, method))) {\n+                                       Predicate::apply(method, cur_level, i, b))) {\n@@ -1049,1 +1059,1 @@\n-                                     Predicate::apply(i, b, cur_level, method))) {\n+                                     Predicate::apply(method, cur_level, i, b))) {\n@@ -1062,1 +1072,1 @@\n-              if (Predicate::apply(mdo_i, mdo_b, cur_level, method)) {\n+              if (Predicate::apply(method, cur_level, mdo_i, mdo_b)) {\n@@ -1082,1 +1092,1 @@\n-  CompLevel next_level = common<CallPredicate>(method, cur_level);\n+  CompLevel next_level = common<CallPredicate>(method, cur_level, is_old(method));\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":51,"deletions":41,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-  inline static void handle_counter_overflow(Method* method);\n+  inline static void handle_counter_overflow(const methodHandle& method);\n@@ -191,1 +191,1 @@\n-  inline static bool is_old(Method* method);\n+  inline static bool is_old(const methodHandle& method);\n@@ -194,1 +194,1 @@\n-  inline static bool is_stale(jlong t, jlong timeout, Method* m);\n+  inline static bool is_stale(jlong t, jlong timeout, const methodHandle& method);\n@@ -201,1 +201,1 @@\n-  inline static void update_rate(jlong t, Method* m);\n+  inline static void update_rate(jlong t, const methodHandle& method);\n@@ -222,1 +222,1 @@\n-  inline static bool is_trivial(Method* method);\n+  inline static bool is_trivial(const methodHandle& method);\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -270,6 +270,5 @@\n-      if (CompilerConfig::is_c1_only()) {\n-        FLAG_SET_ERGO(Tier3InvocationThreshold, threshold);\n-        FLAG_SET_ERGO(Tier3MinInvocationThreshold, threshold);\n-        FLAG_SET_ERGO(Tier3CompileThreshold, threshold);\n-        FLAG_SET_ERGO(Tier3BackEdgeThreshold, osr_threshold);\n-      } else {\n+      FLAG_SET_ERGO(Tier3InvocationThreshold, threshold);\n+      FLAG_SET_ERGO(Tier3MinInvocationThreshold, threshold);\n+      FLAG_SET_ERGO(Tier3CompileThreshold, threshold);\n+      FLAG_SET_ERGO(Tier3BackEdgeThreshold, osr_threshold);\n+      if (CompilerConfig::is_c2_or_jvmci_compiler_only()) {\n@@ -342,0 +341,14 @@\n+\n+    if (FLAG_IS_DEFAULT(Tier3InvocationThreshold)) {\n+      FLAG_SET_DEFAULT(Tier3InvocationThreshold, Tier4InvocationThreshold);\n+    }\n+    if (FLAG_IS_DEFAULT(Tier3MinInvocationThreshold)) {\n+      FLAG_SET_DEFAULT(Tier3MinInvocationThreshold, Tier4MinInvocationThreshold);\n+    }\n+    if (FLAG_IS_DEFAULT(Tier3CompileThreshold)) {\n+      FLAG_SET_DEFAULT(Tier3CompileThreshold, Tier4CompileThreshold);\n+    }\n+    if (FLAG_IS_DEFAULT(Tier3BackEdgeThreshold)) {\n+      FLAG_SET_DEFAULT(Tier3BackEdgeThreshold, Tier4BackEdgeThreshold);\n+    }\n+\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -216,0 +216,6 @@\n+  product(intx, TieredOldPercentage, 1000, DIAGNOSTIC,                      \\\n+          \"Percentage over tier 3 thresholds after which a method is \"      \\\n+          \"considered old (turns off parts of prioritization based on \"     \\\n+          \"compile queue length)\")                                          \\\n+          range(0, max_jint)                                                \\\n+                                                                            \\\n@@ -247,2 +253,1 @@\n-          \"specified percentage of tier 3 thresholds (tier 4 thresholds \"   \\\n-          \"with CompilationMode=high-only|high-only-quick-internal)\")       \\\n+          \"specified percentage of tier 3 thresholds\")                      \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -67,4 +67,0 @@\n-compiler\/whitebox\/ClearMethodStateTest.java 8265360 macosx-aarch64\n-compiler\/whitebox\/EnqueueMethodForCompilationTest.java 8265360 macosx-aarch64\n-compiler\/whitebox\/MakeMethodNotCompilableTest.java 8265360 macosx-aarch64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}