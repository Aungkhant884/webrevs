{"files":[{"patch":"@@ -104,1 +104,1 @@\n-  JfrMonitorTryLock try_msg_lock(JfrMsg_lock);\n+  JfrMutexTryLock try_msg_lock(JfrMsg_lock);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrPostBox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#include \"jfr\/utilities\/jfrTryLock.hpp\"\n@@ -331,1 +332,2 @@\n-  if (JfrBuffer_lock->try_lock()) {\n+  JfrMutexTryLock mutex(JfrBuffer_lock);\n+  if (mutex.acquired()) {\n@@ -353,1 +355,0 @@\n-    JfrBuffer_lock->unlock();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorage.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-class JfrMonitorTryLock : public StackObj {\n+class JfrMutexTryLock : public StackObj {\n@@ -55,1 +55,1 @@\n-  Monitor* _lock;\n+  Mutex* _mutex;\n@@ -59,3 +59,2 @@\n-  JfrMonitorTryLock(Monitor* lock) : _lock(lock), _acquired(lock->try_lock()) {}\n-\n-  ~JfrMonitorTryLock() {\n+  JfrMutexTryLock(Mutex* mutex) : _mutex(mutex), _acquired(mutex->try_lock()) {}\n+  ~JfrMutexTryLock() {\n@@ -63,2 +62,2 @@\n-      assert(_lock->owned_by_self(), \"invariant\");\n-      _lock->unlock();\n+      assert(_mutex->owned_by_self(), \"invariant\");\n+      _mutex->unlock();\n@@ -71,1 +70,0 @@\n-\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrTryLock.hpp","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"}]}