{"files":[{"patch":"@@ -2043,1 +2043,3 @@\n-  if (!PatchALot && Inline && target->is_loaded() && callee_holder->is_linked() && !patch_for_appendix) {\n+  if (!PatchALot && Inline && target->is_loaded() && !patch_for_appendix &&\n+      callee_holder->is_loaded()) { \/\/ the effect of symbolic reference resolution\n+\n@@ -2045,1 +2047,1 @@\n-    if ((code == Bytecodes::_invokestatic && callee_holder->is_initialized()) || \/\/ invokestatic involves an initialization barrier on resolved klass\n+    if ((code == Bytecodes::_invokestatic && klass->is_initialized()) || \/\/ invokestatic involves an initialization barrier on declaring class\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -479,2 +479,3 @@\n-  if (cur_bc() == Bytecodes::_invokedynamic)\n-    return CURRENT_ENV->get_klass_by_name(_holder, ciSymbols::java_lang_invoke_MethodHandle(), false);\n+  if (cur_bc() == Bytecodes::_invokedynamic) {\n+    return CURRENT_ENV->MethodHandle_klass();\n+  }\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -685,0 +685,1 @@\n+        assert(!UNSAFE.shouldBeInitialized(holder)) : holder + \"not initialized\";\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8279515\n+ *\n+ * @requires vm.flagless\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ *\n+ * @run driver compiler.jsr292.ResolvedClassTest\n+ *\/\n+\n+package compiler.jsr292;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+\n+public class ResolvedClassTest {\n+    \/* ======================================================================== *\/\n+    static void testStatic() throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+IgnoreUnrecognizedVMOptions\", \"-showversion\",\n+                \"-XX:+PrintCompilation\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintInlining\",\n+                \"-Xbatch\", \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,\" + TestStatic.class.getName() + \"::test\",\n+                TestStatic.class.getName());\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   not inlineable\");\n+        analyzer.shouldNotContain(\"TestStatic$A::m (1 bytes)   no static binding\");\n+\n+        analyzer.shouldContain(\"TestStatic$A::m (1 bytes)   inline\");\n+    }\n+\n+    static class TestStatic {\n+        static class A {\n+            static void m() {}\n+        }\n+        static class B extends A {}\n+\n+        \/\/ @DontInline\n+        static void test() {\n+            B.m(); \/\/ invokestatic B \"m\" => A::m\n+        }\n+\n+        public static void main(String[] args) {\n+            for (int i = 0; i < 20_000; i++) {\n+                test();\n+            }\n+        }\n+    }\n+\n+    \/* ======================================================================== *\/\n+    static void testStaticInit() throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+IgnoreUnrecognizedVMOptions\", \"-showversion\",\n+                \"-XX:+PrintCompilation\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintInlining\",\n+                \"-Xbatch\", \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,\" + TestStaticInit.class.getName() + \"::test\",\n+                TestStaticInit.class.getName());\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        analyzer.shouldContain(\"TestStaticInit$A::m (1 bytes)   no static binding\");\n+    }\n+\n+    static class TestStaticInit {\n+        static class A {\n+            static {\n+                for (int i = 0; i < 20_000; i++) {\n+                    TestStaticInit.test();\n+                }\n+            }\n+\n+            static void m() {}\n+        }\n+        static class B extends A {}\n+\n+        \/\/ @DontInline\n+        static void test() {\n+            B.m(); \/\/ A::<clinit> => test() => A::m()\n+        }\n+\n+        public static void main(String[] args) {\n+            A.m(); \/\/ trigger initialization of A\n+        }\n+    }\n+\n+    \/* ======================================================================== *\/\n+    static void testIndy() throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:+IgnoreUnrecognizedVMOptions\", \"-showversion\",\n+                \"-XX:+PrintCompilation\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintInlining\",\n+                \"-Xbatch\", \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,\" + TestIndy.class.getName() + \"::test\",\n+                TestIndy.class.getName());\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+\n+        analyzer.shouldHaveExitValue(0);\n+\n+        analyzer.shouldNotContain(\"java.lang.invoke.Invokers$Holder::linkToTargetMethod (9 bytes)   not inlineable\");\n+\n+        analyzer.shouldContain(\"java.lang.invoke.Invokers$Holder::linkToTargetMethod (9 bytes)   force inline by annotation\");\n+        analyzer.shouldContain(\"java\/lang\/invoke\/MethodHandle::invokeBasic (not loaded)   not inlineable\");\n+    }\n+\n+    static class TestIndy {\n+        static String str = \"\";\n+\n+        \/\/ @DontInline\n+        static void test() {\n+            String s1 = \"\" + str; \/\/ indy (linked)\n+\n+            for (int i = 0; i < 200_000; i++) {} \/\/ trigger OSR compilation\n+\n+            String s2 = \"\" + str; \/\/ indy (not linked)\n+        }\n+\n+        public static void main(String[] args) {\n+            test();\n+        }\n+    }\n+\n+    \/* ======================================================================== *\/\n+\n+    public static void main(String[] args) throws IOException {\n+        testStatic();\n+        testStaticInit();\n+        testIndy();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/inlining\/ResolvedClassTest.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}