{"files":[{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4514331\n+ * @summary Check whether pressing <Tab> key always shift focus to next component,\n+ *          even though the current focus is in JTextArea and some text is already selected.\n+ * @run main TabShiftsFocusToNextComponent\n+ *\/\n+public class TabShiftsFocusToNextComponent {\n+\n+    private static JFrame frame;\n+    private static JTextArea textArea;\n+    private static Robot robot;\n+    private static CountDownLatch textAreaGainedFocusLatch;\n+    private static CountDownLatch buttonGainedFocusLatch;\n+\n+    public static void main(String[] s) throws Exception {\n+        runTest();\n+    }\n+\n+    public static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(UIManager.LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            textAreaGainedFocusLatch = new CountDownLatch(1);\n+            buttonGainedFocusLatch = new CountDownLatch(1);\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                SwingUtilities.invokeAndWait(() -> textArea.requestFocusInWindow());\n+\n+                \/\/ Waits until the textArea gains focus.\n+                if (!textAreaGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Test Failed, waited for long, \" +\n+                            \"but the JTextArea can't gain focus for L&F: \" + laf);\n+                }\n+\n+                AtomicReference<Point> textAreaLoc = new AtomicReference<Point>();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    textAreaLoc.set(textArea.getLocationOnScreen());\n+                });\n+\n+                final int x = textAreaLoc.get().x;\n+                final int y = textAreaLoc.get().y;\n+                robot.mouseMove(x + 5, y + 5);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseMove(x + 20, y + 5);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.keyPress(KeyEvent.VK_TAB);\n+                robot.keyRelease(KeyEvent.VK_TAB);\n+\n+                \/\/ Waits until the button gains focus.\n+                if (!buttonGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Test Failed, waited for long, \" +\n+                            \"but the Button can't gain focus when 'Tab' key pressed for L&F: \" + laf);\n+                } else {\n+                    System.out.println(\" Test passed for \" + laf);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(TabShiftsFocusToNextComponent::disposeFrame);\n+            }\n+        }\n+    }\n+\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        JPanel panel = new JPanel();\n+        textArea = new JTextArea(\"I am a JTextArea\");\n+        textArea.addFocusListener(new FocusAdapter() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                textAreaGainedFocusLatch.countDown();\n+            }\n+        });\n+        textArea.setEditable(false);\n+        panel.add(textArea);\n+        JButton button = new JButton(\"Button\");\n+        panel.add(button);\n+        button.addFocusListener(new FocusAdapter() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                buttonGainedFocusLatch.countDown();\n+            }\n+        });\n+\n+        frame.add(panel);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setUndecorated(true);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/4514331\/TabShiftsFocusToNextComponent.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"}]}