{"files":[{"patch":"@@ -108,1 +108,1 @@\n-        return attrs.version >= that.attrs.version;\n+        return attrs.majorVersion >= that.attrs.majorVersion;\n@@ -239,1 +239,1 @@\n-        private int version;\n+        private int majorVersion;\n@@ -258,1 +258,1 @@\n-            this.version = version;\n+            this.majorVersion = version & 0xFFFF; \/\/ JDK-8296329: extract major version only\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,0 +105,4 @@\n+        javac(dest, List.of(), sourceFiles);\n+    }\n+\n+    void javac(Path dest, List<String> extraParameters, Path... sourceFiles) throws Throwable {\n@@ -117,0 +121,1 @@\n+        commands.addAll(extraParameters);\n@@ -125,1 +130,0 @@\n-\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/MRTestBase.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+* @test\n+# @bug 8296329\n+* @summary Tests for version validator.\n+* @library \/test\/lib\n+* @modules java.base\/jdk.internal.misc\n+*          jdk.compiler\n+*          jdk.jartool\n+* @build jdk.test.lib.Utils\n+*        jdk.test.lib.Asserts\n+*        jdk.test.lib.JDKToolFinder\n+*        jdk.test.lib.JDKToolLauncher\n+*        jdk.test.lib.Platform\n+*        jdk.test.lib.process.*\n+*        MRTestBase\n+* @run testng\/timeout=1200 VersionValidatorTest\n+*\/\n+\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+public class VersionValidatorTest extends MRTestBase {\n+    private Path root;\n+\n+    @BeforeMethod\n+    void testInit(Method method) {\n+        root = Paths.get(method.getName());\n+    }\n+\n+    @Test(dataProvider = \"differentMajorVersions\")\n+    public void onlyCompatibleVersionIsAllowedInMultiReleaseJar(String baseMajorVersion, String otherMajorVersion,\n+            boolean enablePreviewForBaseVersion, boolean enablePreviewForOtherVersion, boolean isAcceptable)\n+            throws Throwable {\n+        Path baseVersionClassesDir = compileLibClass(baseMajorVersion, enablePreviewForBaseVersion);\n+        Path otherVersionClassesDir = compileLibClass(otherMajorVersion, enablePreviewForOtherVersion);\n+\n+        var result = jar(\"--create\", \"--file\", \"lib.jar\", \"-C\", baseVersionClassesDir.toString(), \"Lib.class\",\n+                \"--release\", otherMajorVersion, \"-C\", otherVersionClassesDir.toString(), \"Lib.class\");\n+\n+        if (isAcceptable) {\n+            result.shouldHaveExitValue(SUCCESS)\n+                    .shouldBeEmptyIgnoreVMWarnings();\n+        } else {\n+            result.shouldNotHaveExitValue(SUCCESS)\n+                    .shouldContain(\"has a class version incompatible with an earlier version\");\n+        }\n+    }\n+\n+    private Path compileLibClass(String majorVersion, boolean enablePreview) throws Throwable {\n+        String classTemplate = \"\"\"\n+                public class Lib {\n+                    public static int version = $VERSION;\n+                }\n+                    \"\"\";\n+\n+        Path sourceFile = Files.createDirectories(root.resolve(\"src\").resolve(majorVersion)).resolve(\"Lib.java\");\n+        Files.write(sourceFile, classTemplate.replace(\"$VERSION\", majorVersion).getBytes());\n+\n+        Path classesDir = root.resolve(\"classes\").resolve(majorVersion);\n+\n+        javac(classesDir, List.of(\"--release\", majorVersion), sourceFile);\n+        if (enablePreview) {\n+            rewriteMinorVersionForEnablePreviewClass(classesDir.resolve(\"Lib.class\"));\n+        }\n+        return classesDir;\n+    }\n+\n+    private void rewriteMinorVersionForEnablePreviewClass(Path classFile) throws Throwable {\n+        byte[] classBytes = Files.readAllBytes(classFile);\n+        classBytes[4] = -1;\n+        classBytes[5] = -1;\n+        Files.write(classFile, classBytes);\n+    }\n+\n+    @DataProvider\n+    Object[][] differentMajorVersions() {\n+        return new Object[][] {\n+                { \"16\", \"17\", false, true, true },\n+                { \"16\", \"17\", false, false, true },\n+                { \"16\", \"17\", true, true, true },\n+                { \"16\", \"17\", true, false, true },\n+                { \"17\", \"16\", false, true, false },\n+                { \"17\", \"16\", false, false, false },\n+                { \"17\", \"16\", true, true, false },\n+                { \"17\", \"16\", true, false, false },\n+        };\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/VersionValidatorTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}