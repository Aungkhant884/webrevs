{"files":[{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JFrame;\n+import javax.swing.JTree;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4518432\n+ * @summary Verifies that Copying from JTree node and then changing the data in the component that was copied from,\n+ *          is not causing the pastes to use the new edited data instead of the original copied data.\n+ * @run main JTreeNodeCopyPasteTest\n+ *\/\n+public class JTreeNodeCopyPasteTest {\n+\n+    private static JFrame frame;\n+    private static JTree tree;\n+    private static Robot robot;\n+    private static boolean isMac;\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+\n+    private static void runTest() throws Exception {\n+        isMac = System.getProperty(\"os.name\").toLowerCase().contains(\"os x\");\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        robot.setAutoWaitForIdle(true);\n+\n+        \/\/ Filter out Motif laf, as it doesn't support copy-paste in JTree.\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .filter(laf -> !laf.getName().contains(\"Motif\"))\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+\n+                robot.waitForIdle();\n+\n+                \/\/ Select the node named as 'colors'\n+                Point pt = getNodeLocation(1);\n+                robot.mouseMove(pt.x, pt.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                String expectedNodeName = getCurrentNodeName();\n+\n+                \/\/ Copy the contents of that node\n+                copyOrPaste(KeyEvent.VK_C, laf);\n+\n+                \/\/ Edit the Contents of that cell\n+                mouseTripleClick();\n+\n+                typeSomeText();\n+\n+                robot.keyPress(KeyEvent.VK_ENTER);\n+                robot.keyRelease(KeyEvent.VK_ENTER);\n+\n+                \/\/ Select next node\n+                pt = getNodeLocation(2);\n+                robot.mouseMove(pt.x, pt.y);\n+\n+                \/\/ Edit the Contents of that cell\n+                mouseTripleClick();\n+\n+                \/\/ paste the content copied earlier\n+                copyOrPaste(KeyEvent.VK_V, laf);\n+\n+                robot.keyPress(KeyEvent.VK_ENTER);\n+                robot.keyRelease(KeyEvent.VK_ENTER);\n+\n+                \/\/ Now get the node contents of second node\n+                String actualNodeName = getCurrentNodeName();\n+\n+                if (expectedNodeName.equals(actualNodeName)) {\n+                    System.out.println(\"Test Passed in \" + laf);\n+                } else {\n+                    throw new RuntimeException(\"Test Failed in \" + laf + \", Expected : \" + expectedNodeName\n+                            + \", but actual : \" + actualNodeName);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(JTreeNodeCopyPasteTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static String getCurrentNodeName() throws Exception {\n+        AtomicReference<String> nodeName = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            nodeName.set(tree.getLastSelectedPathComponent().toString().trim());\n+        });\n+        return nodeName.get();\n+    }\n+\n+    private static Point getNodeLocation(int rowCount) throws Exception {\n+        AtomicReference<Point> treeNodeLoc = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            final Point locationOnScreen = tree.getLocationOnScreen();\n+            Rectangle rt = tree.getPathBounds(tree.getPathForRow(rowCount));\n+            locationOnScreen.translate((int) (rt.getX() + rt.getWidth() \/ 2), (int) (rt.getY() + rt.getHeight() \/ 2));\n+            treeNodeLoc.set(locationOnScreen);\n+        });\n+        return treeNodeLoc.get();\n+    }\n+\n+    private static void copyOrPaste(int keyCode, String laf) {\n+        \/\/ For AquaLookAndFeel in Mac, the key combination for copy\/paste is META + (C or V)\n+        \/\/ For other OSes and other lafs, the key combination is CONTROL + (C or V)\n+        robot.keyPress(isMac && laf.contains(\"Aqua\") ? KeyEvent.VK_META : KeyEvent.VK_CONTROL);\n+        robot.keyPress(keyCode);\n+        robot.keyRelease(keyCode);\n+        robot.keyRelease(isMac && laf.contains(\"Aqua\") ? KeyEvent.VK_META : KeyEvent.VK_CONTROL);\n+    }\n+\n+    private static void mouseTripleClick() {\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    private static void typeSomeText() {\n+        robot.keyPress(KeyEvent.VK_T);\n+        robot.keyRelease(KeyEvent.VK_T);\n+        robot.keyPress(KeyEvent.VK_E);\n+        robot.keyRelease(KeyEvent.VK_E);\n+        robot.keyPress(KeyEvent.VK_X);\n+        robot.keyRelease(KeyEvent.VK_X);\n+        robot.keyPress(KeyEvent.VK_T);\n+        robot.keyRelease(KeyEvent.VK_T);\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        tree = new JTree();\n+        tree.setEditable(true);\n+        frame.setContentPane(tree);\n+        frame.setSize(new Dimension(200, 200));\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.toFront();\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported laf : \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JTree\/4518432\/JTreeNodeCopyPasteTest.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"}]}