{"files":[{"patch":"@@ -157,1 +157,0 @@\n-JVM_IsThreadAlive\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -260,3 +260,0 @@\n-JNIEXPORT jboolean JNICALL\n-JVM_IsThreadAlive(JNIEnv *env, jobject thread);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2979,6 +2979,0 @@\n-JVM_ENTRY(jboolean, JVM_IsThreadAlive(JNIEnv* env, jobject jthread))\n-  oop thread_oop = JNIHandles::resolve_non_null(jthread);\n-  return java_lang_Thread::is_alive(thread_oop);\n-JVM_END\n-\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1340,1 +1340,3 @@\n-  \/\/ to complete once we've done the notify_all below\n+  \/\/ to complete once we've done the notify_all below. Needs a release() to obey Java Memory Model\n+  \/\/ requirements.\n+  OrderAccess::release();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,1 +160,8 @@\n-    private long eetop;\n+\n+    \/*\n+     * Reserved for exclusive use by the JVM. The historically named\n+     * `eetop` holds the address of the underlying VM JavaThread, and is set to\n+     * non-zero when the thread is started, and reset to zero when the thread terminates.\n+     * A non-zero value indicates this thread isAlive().\n+     *\/\n+    private volatile long eetop;\n@@ -1053,1 +1060,3 @@\n-    public final native boolean isAlive();\n+    public final boolean isAlive() {\n+        return eetop != 0;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-    {\"isAlive\",          \"()Z\",        (void *)&JVM_IsThreadAlive},\n","filename":"src\/java.base\/share\/native\/libjava\/Thread.c","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright 2023, Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug     8305425\n+ * @summary Check Thread.isAlive\n+ * @run main\/othervm\/timeout=10 IsAlive\n+ *\/\n+\n+public class IsAlive {\n+\n+    static boolean spinnerDone;\n+\n+    private static void spin() {\n+        try {\n+            while (!Thread.currentThread().isInterrupted()) {\n+                Thread.sleep(100);\n+            }\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing, just exit\n+        }\n+        spinnerDone = true;\n+    }\n+\n+    static volatile boolean checkerReady;\n+\n+    private static void check(Thread t) {\n+        while (!t.isAlive()) {\n+            \/\/ Burn hard, without any sleeps.\n+            \/\/ Check that we discover the thread is alive eventually.\n+        }\n+\n+        checkerReady = true;\n+\n+        while (t.isAlive()) {\n+            \/\/ Burn hard, without any sleeps.\n+            \/\/ Check that we discover the thread is not alive eventually.\n+        }\n+\n+        if (!spinnerDone) {\n+            throw new RuntimeException(\"Last write of terminated thread was not seen!\");\n+        }\n+    }\n+\n+    private static void assertAlive(Thread t) {\n+        if (!t.isAlive()) {\n+            throw new IllegalStateException(\"Thread \" + t + \" is not alive, but it should be\");\n+        }\n+    }\n+\n+    private static void assertNotAlive(Thread t) {\n+        if (t.isAlive()) {\n+            throw new IllegalStateException(\"Thread \" + t + \" is alive, but it should not be\");\n+        }\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        Thread spinner = new Thread(IsAlive::spin);\n+        spinner.setName(\"Spinner\");\n+        spinner.setDaemon(true);\n+\n+        Thread checker = new Thread(() -> check(spinner));\n+        checker.setName(\"Checker\");\n+        checker.setDaemon(true);\n+\n+        assertNotAlive(spinner);\n+        assertNotAlive(checker);\n+\n+        System.out.println(\"Starting spinner\");\n+        spinner.start();\n+        assertAlive(spinner);\n+\n+        System.out.println(\"Starting checker\");\n+        checker.start();\n+        assertAlive(checker);\n+\n+        System.out.println(\"Waiting for checker to catch up\");\n+        while (!checkerReady) {\n+            Thread.sleep(100);\n+        }\n+\n+        System.out.println(\"Interrupting and joining spinner\");\n+        spinner.interrupt();\n+        spinner.join();\n+        assertNotAlive(spinner);\n+\n+        System.out.println(\"Joining checker\");\n+        checker.join();\n+        assertNotAlive(checker);\n+\n+        System.out.println(\"Complete\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/IsAlive.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}