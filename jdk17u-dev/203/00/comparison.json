{"files":[{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1808,4 +1808,0 @@\n-      if (size_in_bits == 256 && UseAVX < 2) {\n-        return false; \/\/ Implementation limitation\n-      }\n-      break;\n@@ -1813,4 +1809,0 @@\n-      if (is_integral_type(bt) && size_in_bits == 256 && UseAVX < 2) {\n-        return false;\n-      }\n-      break;\n@@ -1818,1 +1810,1 @@\n-      if (is_integral_type(bt) && size_in_bits == 256 && UseAVX < 2) {\n+      if (bt != T_DOUBLE && size_in_bits == 256 && UseAVX < 2) {\n@@ -6609,2 +6601,3 @@\n-      case T_DOUBLE:\n-        __ vpmovsxbd($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+      case T_DOUBLE: {\n+        int mid_vlen_enc = (vlen_enc == Assembler::AVX_512bit) ? Assembler::AVX_256bit : Assembler::AVX_128bit;\n+        __ vpmovsxbd($dst$$XMMRegister, $src$$XMMRegister, mid_vlen_enc);\n@@ -6613,1 +6606,1 @@\n-\n+      }\n@@ -6680,2 +6673,3 @@\n-      case T_DOUBLE:\n-        __ vpmovsxwd($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+      case T_DOUBLE: {\n+        int mid_vlen_enc = (vlen_enc == Assembler::AVX_512bit) ? Assembler::AVX_256bit : Assembler::AVX_128bit;\n+        __ vpmovsxwd($dst$$XMMRegister, $src$$XMMRegister, mid_vlen_enc);\n@@ -6684,0 +6678,1 @@\n+      }\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import java.util.Random;\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.DoubleVector;\n+import jdk.incubator.vector.ShortVector;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @bug 8278948\n+ * @summary Intermediate integer promotion vector length encoding is calculated incorrectly on x86\n+ * @modules jdk.incubator.vector\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:CompileThreshold=100 -XX:UseAVX=1\n+ *                   compiler.vectorapi.Test8278948\n+ *\/\n+public class Test8278948 {\n+    static final int INVOCATIONS = 10000;\n+\n+    static final Random random = Utils.getRandomInstance();\n+    static final byte[] BYTES = new byte[8];\n+    static final short[] SHORTS = new short[4];\n+    static final double[] DOUBLES = new double[4];\n+\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < INVOCATIONS; i++) {\n+            for (int j = 0; j < DOUBLES.length; j++) {\n+                BYTES[j] = (byte)random.nextInt();\n+            }\n+            bytesToDoubles();\n+            for (int j = 0; j < DOUBLES.length; j++) {\n+                Asserts.assertEquals((double)BYTES[j], DOUBLES[j]);\n+            }\n+\n+            for (int j = 0; j < DOUBLES.length; j++) {\n+                SHORTS[j] = (short)random.nextInt();\n+            }\n+            shortsToDoubles();\n+            for (int j = 0; j < DOUBLES.length; j++) {\n+                Asserts.assertEquals((double)SHORTS[j], DOUBLES[j]);\n+            }\n+        }\n+    }\n+\n+    static void bytesToDoubles() {\n+        ((DoubleVector)ByteVector.fromArray(ByteVector.SPECIES_64, BYTES, 0)\n+                .castShape(DoubleVector.SPECIES_256, 0))\n+                .intoArray(DOUBLES, 0);\n+    }\n+\n+    static void shortsToDoubles() {\n+        ((DoubleVector)ShortVector.fromArray(ShortVector.SPECIES_64, SHORTS, 0)\n+                .castShape(DoubleVector.SPECIES_256, 0))\n+                .intoArray(DOUBLES, 0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/Test8278948.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}