{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -648,1 +648,1 @@\n-                r = Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);\n+                r = Math.nextAfter(bound, origin);\n@@ -680,1 +680,1 @@\n-            r = Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);\n+            r = Math.nextDown(r);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/random\/RandomSupport.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verify nextDouble stays within range\n+ * @bug 8280550 8280950\n+ *\/\n+\n+import java.util.SplittableRandom;\n+import java.util.random.RandomGenerator;\n+\n+public class RandomNextDoubleBoundary {\n+    public static void main(String... args) {\n+        negativeBounds();\n+        positiveBounds();\n+    }\n+\n+    private static void negativeBounds() {\n+        \/\/ Both bounds are negative\n+        double lowerBound = -1.0000000000000002;\n+        double upperBound = -1.0;\n+        var sr = new SplittableRandom(42L);\n+        var r = sr.nextDouble(lowerBound, upperBound);\n+\n+        if (r >= upperBound) {\n+            System.err.println(\"r = \" + r + \"\\t\" + Double.toHexString(r));\n+            System.err.println(\"ub = \" + upperBound + \"\\t\" + Double.toHexString(upperBound));\n+            throw new RuntimeException(\"Greater than upper bound\");\n+        }\n+\n+        if (r < lowerBound) {\n+            System.err.println(\"r = \" + r + \"\\t\" + Double.toHexString(r));\n+            System.err.println(\"lb = \" + lowerBound + \"\\t\" + Double.toHexString(lowerBound));\n+            throw new RuntimeException(\"Less than lower bound\");\n+        }\n+    }\n+\n+    private static void positiveBounds() {\n+        double[][] originAndBounds = {{10, 100},\n+                                      {12345, 123456},\n+                                      {5432167.234, 54321678.1238}};\n+        for (double[] originAndBound : originAndBounds) {\n+            nextDoublesWithRange(originAndBound[0], originAndBound[1]);\n+        }\n+    }\n+\n+    public static void nextDoublesWithRange(double origin, double bound) {\n+        RandomGenerator rg = new RandomGenerator() {\n+            @Override\n+            public double nextDouble() {\n+                return Double.MAX_VALUE;\n+            }\n+\n+            @Override\n+            public long nextLong() {\n+                return 0;\n+            }\n+        };\n+        double value = rg.nextDouble(origin, bound);\n+\n+        assertTrue(value >= origin);\n+        assertTrue(value < bound);\n+    }\n+\n+    public static void assertTrue(boolean condition) {\n+        if (!condition) {\n+            throw new AssertionError();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Random\/RandomNextDoubleBoundary.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}