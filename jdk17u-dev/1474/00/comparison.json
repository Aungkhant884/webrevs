{"files":[{"patch":"@@ -1225,1 +1225,2 @@\n-                 reference, LIR_OprFact::intConst(referent_offset), result);\n+                 reference, LIR_OprFact::intConst(referent_offset), result,\n+                 nullptr, info);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @bug 8310126\n+* @summary Test that the Reference::get intrinsic works with a null argument.\n+* @run main\/othervm -XX:TieredStopAtLevel=1 -XX:CompileCommand=compileonly,*TestReferenceGetWithNull::test -Xbatch\n+*                   compiler.intrinsics.TestReferenceGetWithNull\n+*\/\n+\n+package compiler.intrinsics;\n+\n+import java.lang.ref.WeakReference;\n+\n+public class TestReferenceGetWithNull {\n+\n+    \/\/ Declare final such that static binding at the call site is possible\n+    static final class MyReference<T> extends WeakReference<T> {\n+        public MyReference(T referent) {\n+            super(referent);\n+        }\n+    }\n+\n+    static void test(MyReference r) {\n+        try {\n+            r.get();\n+        } catch (Exception e) {\n+            \/\/ Ignore\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Make sure MyReference is loaded\n+        MyReference<String[]> obj = new MyReference<>(args);\n+        \/\/ Trigger compilation\n+        for (int i = 0; i < 50_000; ++i) {\n+            test(null);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestReferenceGetWithNull.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}