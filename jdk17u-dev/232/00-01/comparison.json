{"files":[{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/func\/findByName.\n- * VM Testbase keywords: [feature_mlvm]\n- * VM Testbase readme:\n- * DESCRIPTION\n- *     Try to find a class loaded as a hidden class through the VM system dictionary\n- *     (using Class.forName()). It is an error when the class can be found in this way.\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.func.findByName.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.func.findByName.Test\n- *\/\n-\n-package vm.mlvm.anonloader.func.findByName;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmTest;\n-import vm.share.FileUtils;\n-\n-public class Test extends MlvmTest {\n-    private static final Class<?> PARENT = AnonkTestee01.class;\n-\n-    public boolean run() throws Exception {\n-        try {\n-            byte[] classBytes = FileUtils.readClass(PARENT.getName());\n-            Lookup lookup = MethodHandles.lookup();\n-            Lookup ank_lookup = MethodHandles.privateLookupIn(PARENT, lookup);\n-            Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-            getLog().display(\"Hidden class name: \" + c.getName());\n-            Class.forName(c.getName()).newInstance();\n-            return false;\n-        } catch ( ClassNotFoundException e ) {\n-            return true;\n-        }\n-    }\n-\n-    public static void main(String[] args) { MlvmTest.launch(args); }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/func\/findByName\/Test.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package vm.mlvm.anonloader.share;\n-\n-import vm.mlvm.share.Env;\n-\n-public class AnonkTestee01 {\n-    public final static String muzzy = \"BIG \\uFFFF\\u0000\\uFFFE\\uFEFF MUZZY\";\n-    public final static String\n-    theDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrum\n-    = String.format(\"%65500c%X\", 'c', Env.getRNG().nextLong());\n-\n-    public final String beatingTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrum() {\n-        return theDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrumIsTheDrum;\n-    }\n-\n-    public final String toString() {\n-        return \"Something that looks like \" + super.toString();\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        throw new RuntimeException(\"Making fun of errors\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/share\/AnonkTestee01.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,28 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package vm.mlvm.anonloader.share;\n-\n-public class AnonkTestee02 extends AnonkTestee01 {\n-    public AnonkTestee02() {}\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/share\/AnonkTestee02.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"deleted"},{"patch":"@@ -1,223 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package vm.mlvm.anonloader.share;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-\n-import java.io.File;\n-import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import nsk.share.test.Stresser;\n-import vm.share.options.Option;\n-import vm.share.options.OptionSupport;\n-import vm.share.options.IgnoreUnknownArgumentsHandler;\n-import vm.mlvm.share.Env;\n-import vm.mlvm.share.MlvmTest;\n-import vm.mlvm.share.CustomClassLoaders;\n-import vm.share.FileUtils;\n-import vm.share.UnsafeAccess;\n-\n-\/**\n- * Does stress-testing of class loading subsystem.\n- * This class should be subclassed by the tests\n- * to provide test class data.\n- *\n- * <p>StressClassLoadingTest performs a number of iterations\n- * (the default value is 100 000).\n- * Each iteration gets class bytes from the subclass\n- * and loads it into JVM using either:\n- * <ul>\n- *    <li>a custom {@link java.lang.ClassLoader} implementation or\n- *    <li>{@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass} call.\n- * <\/ul>\n- *\n- * <p>Loading is done in a separate thread. If this thread is stuck,\n- * it is killed after some timeout (default is 10 seconds, please see\n- * -parseTimeout option). The class file is saved as hangXX.class, where XX\n- * starts at 00 and is increased on every hangup.\n- * A prefix can be added to the file name using {@link #setFileNamePrefix}\n- *\n- * <p>The test fails, if there were hangups.\n- *\n- * <p>By default, before loading class, the bytes are\n- * saved to {@code _AnonkTestee01.class} file in the current directory.\n- * If JVM crashes, the bytecodes can be analysed.\n- * Class saving is controlled by -saveClassFile option.\n- * A prefix can be added to the file name using {@link #setFileNamePrefix}\n- * function.\n- *\/\n-public abstract class StressClassLoadingTest extends MlvmTest {\n-    private static final String RESCUE_FILE_NAME = \"_AnonkTestee01.class\";\n-    private static final String HUNG_CLASS_FILE_NAME = \"hang.class\";\n-\n-    @Option(name = \"iterations\", default_value = \"100000\",\n-            description = \"How many times generate a class and parse it\")\n-    private static int iterations;\n-\n-    @Option(name = \"saveClassFile\", default_value = \"true\",\n-            description = \"Save generated class file before loading.\"\n-                    + \" Useful when VM crashes on loading\")\n-    private static boolean saveClassFile;\n-\n-    @Option(name = \"parseTimeout\", default_value = \"10000\",\n-            description = \"Timeout in millisectionds to detect hung parser\"\n-                    + \" thread. The parser thread is killed after the timeout\")\n-    private static int parseTimeout;\n-\n-    @Option(name = \"hiddenLoad\", default_value = \"false\",\n-            description = \"An option for adhoc experiments: load class as a hidden class.\")\n-    private static boolean hiddenLoad;\n-\n-    private String fileNamePrefix = \"\";\n-\n-    private final static AtomicBoolean classFileMessagePrinted\n-            = new AtomicBoolean(false);\n-\n-    \/**\n-     * Sets prefix for names of the files, created by test:\n-     * _AnonkTestee01.class and hangXX.class.\n-     *\n-     * @param p a prefix to add before file name.\n-     * @throws java.lang.NullPointerException if p is null\n-     *\/\n-    public void setFileNamePrefix(String p) {\n-        Objects.requireNonNull(p);\n-        fileNamePrefix = p;\n-    }\n-\n-    static volatile boolean optionsSetup = false;\n-    public static void setupOptions(Object instance) {\n-        if (!optionsSetup) {\n-            synchronized (StressClassLoadingTest.class) {\n-                if (!optionsSetup) {\n-                    OptionSupport.setup(instance, Env.getArgParser().getRawArguments(), new IgnoreUnknownArgumentsHandler());\n-                    optionsSetup = true;\n-\n-                    Env.traceNormal(\"StressClassLoadingTest options: iterations: \" + iterations);\n-                    Env.traceNormal(\"StressClassLoadingTest options: hiddenLoad: \" + hiddenLoad);\n-                    Env.traceNormal(\"StressClassLoadingTest options: parseTimeout: \" + parseTimeout);\n-                    Env.traceNormal(\"StressClassLoadingTest options: saveClassFile: \" + saveClassFile);\n-                }\n-            }\n-        }\n-    }\n-\n-    public boolean run() throws Exception {\n-        setupOptions(this);\n-\n-        Stresser stresser = createStresser();\n-        stresser.start(iterations);\n-\n-        while (stresser.continueExecution()) {\n-            stresser.iteration();\n-\n-            byte[] classBytes = generateClassBytes();\n-            Class<?> hostClass = getHostClass();\n-            String className = hostClass.getName();\n-            File rescueFile = new File(String.format(\"%s_%d_%s\",\n-                    fileNamePrefix, stresser.getIteration(), RESCUE_FILE_NAME));\n-            if (saveClassFile) {\n-                \/\/ Write out the class file being loaded.  It's useful\n-                \/\/ to have if the JVM crashes.\n-                FileUtils.writeBytesToFile(rescueFile, classBytes);\n-                if (classFileMessagePrinted.compareAndSet(false, true)) {\n-                    Env.traceImportant(\"If the JVM crashes then \"\n-                            + \"the class file causing the crash is saved as *_*_\"\n-                            + RESCUE_FILE_NAME);\n-                }\n-            }\n-\n-            Thread parserThread  = new Thread() {\n-                public void run() {\n-                    try {\n-                        Class<?> c;\n-                        if (hiddenLoad) {\n-                            Lookup lookup = MethodHandles.lookup();\n-                            c = lookup.defineHiddenClass(classBytes, true).lookupClass();\n-\n-                        } else {\n-                            c = CustomClassLoaders.makeClassBytesLoader(classBytes, className)\n-                                    .loadClass(className);\n-                        }\n-                        UnsafeAccess.unsafe.ensureClassInitialized(c);\n-                    } catch (Throwable e) {\n-                        Env.traceVerbose(e, \"parser caught exception\");\n-                    }\n-                }\n-            };\n-\n-            parserThread.start();\n-            parserThread.join(parseTimeout);\n-\n-            if (parserThread.isAlive()) {\n-                Env.traceImportant(\"parser thread may be hung!\");\n-                StackTraceElement[] stack = parserThread.getStackTrace();\n-                Env.traceImportant(\"parser thread stack len: \" + stack.length);\n-                Env.traceImportant(parserThread + \" stack trace:\");\n-                for (int i = 0; i < stack.length; ++i) {\n-                    Env.traceImportant(parserThread + \"\\tat \" + stack[i]);\n-                }\n-\n-                Path savedClassPath = Paths.get(fileNamePrefix + HUNG_CLASS_FILE_NAME);\n-\n-                if (saveClassFile) {\n-                    Files.move(rescueFile.toPath(), savedClassPath);\n-                    Env.traceImportant(\"There was a possible hangup during parsing.\"\n-                        + \" The class file, which produced the possible hangup, was saved as \"\n-                        + fileNamePrefix + HUNG_CLASS_FILE_NAME\n-                        + \"... in the test directory. You may want to analyse it \"\n-                        + \"if this test times out.\");\n-                }\n-\n-                parserThread.join(); \/\/ Wait until either thread finishes or test times out.\n-                if (saveClassFile) {\n-                    savedClassPath.toFile().delete();\n-                }\n-            } else if (saveClassFile) {\n-                rescueFile.delete();\n-            }\n-        }\n-\n-        stresser.finish();\n-        return true;\n-    }\n-\n-    \/**\n-     * Generated class bytes. The method is called for each iteration.\n-     *\n-     * @return Byte array with the generated class\n-     *\/\n-    protected abstract byte[] generateClassBytes();\n-\n-    \/**\n-     * Returns a host class for the generated class.\n-     *\n-     * @return A host class that for the generated class\n-     *\/\n-    protected abstract Class<?> getHostClass();\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/share\/StressClassLoadingTest.java","additions":0,"deletions":223,"binary":false,"changes":223,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-#\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/byteMutation\/TEST.properties","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,118 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/byteMutation.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.byteMutation.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.stress.byteMutation.Test -stressIterationsFactor 100000\n- *\/\n-\n-package vm.mlvm.anonloader.stress.byteMutation;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.anonloader.share.StressClassLoadingTest;\n-import vm.share.FileUtils;\n-import vm.share.options.Option;\n-\n-\/**\n- * The test does the following in a cycle:\n- *\n- * <ol>\n- * <li>Takes bytes from a valid class file\n- * <li>Sets 1 to 5 bytes in random positions to random values\n- * <li>Tries to load such class using:\n- *     <ul>\n- *       <li>a custom class loader,\n- *       <li>{@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n- *           when {@code -hiddenLoad true} option is passed to the test.\n- *     <\/ul>\n- * <\/ol>\n- *\n- * <p>In most cases the resulting class file is invalid and rejected by\n- * the VM verifier. But this test tries to find pathological cases, such\n- * as infinite loops during verification or VM crashes.\n- *\n- *\/\n-public class Test extends StressClassLoadingTest {\n-    private final static Class<?> HOST_CLASS = AnonkTestee01.class;\n-    private final byte[] testeeBytes;\n-    @Option(name = \"mutationCount\", default_value = \"3\",\n-            description = \"How many bytes to mutate in a class\")\n-    private int mutationCount = 3;\n-\n-    \/**\n-     * Constructs the test.\n-     * @throws Exception if there are any errors when\n-     * reading {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes.\n-     *\/\n-    public Test() throws Exception {\n-        this.testeeBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n-    }\n-\n-    \/**\n-     * Returns {@link vm.mlvm.anonloader.share.AnonkTestee01} class to the\n-     * parent.\n-     * @return {@link vm.mlvm.anonloader.share.AnonkTestee01} class.\n-     *\/\n-    @Override\n-    protected Class<?> getHostClass() {\n-        return HOST_CLASS;\n-    }\n-\n-    \/**\n-     * Takes {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes\n-     * and modifies mutationCount bytes setting them to random values.\n-     * @return {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes with modified bytes.\n-     *\/\n-    @Override\n-    protected byte[] generateClassBytes() {\n-        \/\/ TODO: there is non-zero probability that generated bytecode will be\n-        \/\/ valid, so it should be a subject of fuzzing mechanism\n-        byte[] alteredBytes = testeeBytes.clone();\n-        for (int j = 0; j < mutationCount; ++j) {\n-            alteredBytes[getRNG().nextInt(alteredBytes.length)] = (byte) getRNG().nextInt(256);\n-        }\n-        return alteredBytes;\n-    }\n-\n-    \/**\n-     * Runs the test.\n-     * @param args Test arguments.\n-     *\/\n-    public static void main(String[] args) {\n-        StressClassLoadingTest.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/byteMutation\/Test.java","additions":0,"deletions":118,"binary":false,"changes":118,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-#\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/heap\/TEST.properties","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/oome\/heap.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.oome.heap.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm -XX:-UseGCOverheadLimit -Xmx128m vm.mlvm.anonloader.stress.oome.heap.Test\n- *\/\n-\n-package vm.mlvm.anonloader.stress.oome.heap;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-import java.util.List;\n-import java.io.IOException;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmOOMTest;\n-import vm.mlvm.share.MlvmTestExecutor;\n-import vm.mlvm.share.Env;\n-import vm.share.FileUtils;\n-\n-\/**\n- * This test loads a class using defineHiddenClass, creates instances\n- * of that class and stores them, expecting Heap OOME.\n- *\n- *\/\n-\n-public class Test extends MlvmOOMTest {\n-    @Override\n-    protected void checkOOME(OutOfMemoryError oome) {\n-        String message = oome.getMessage();\n-        if (!\"Java heap space\".equals(message)) {\n-            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n-        }\n-    }\n-    @Override\n-    protected void eatMemory(List<Object> list) {\n-        byte[] classBytes = null;\n-        try {\n-            classBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n-        } catch (IOException e) {\n-            Env.throwAsUncheckedException(e);\n-        }\n-        try {\n-            while (true) {\n-                Lookup lookup = MethodHandles.lookup();\n-                Lookup ank_lookup = MethodHandles.privateLookupIn(AnonkTestee01.class, lookup);\n-                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-                list.add(c.newInstance());\n-            }\n-        } catch (InstantiationException | IllegalAccessException e) {\n-            Env.throwAsUncheckedException(e);\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        MlvmTestExecutor.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/heap\/Test.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-#\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/metaspace\/TEST.properties","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/oome\/metaspace.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.oome.metaspace.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm -XX:MaxRAMPercentage=25 -XX:-UseGCOverheadLimit -XX:MetaspaceSize=10m\n- *                   -XX:MaxMetaspaceSize=20m vm.mlvm.anonloader.stress.oome.metaspace.Test\n- *\/\n-\n-package vm.mlvm.anonloader.stress.oome.metaspace;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodHandles.Lookup;\n-import java.util.List;\n-import java.io.IOException;\n-\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmOOMTest;\n-import vm.mlvm.share.MlvmTestExecutor;\n-import vm.mlvm.share.Env;\n-import vm.share.FileUtils;\n-\n-\/**\n- * This test loads classes using defineHiddenClass and stores them,\n- * expecting Metaspace OOME.\n- *\n- *\/\n-public class Test extends MlvmOOMTest {\n-    @Override\n-    protected void checkOOME(OutOfMemoryError oome) {\n-        String message = oome.getMessage();\n-        if (!\"Metaspace\".equals(message) && !\"Compressed class space\".equals(message)) {\n-            throw new RuntimeException(\"TEST FAIL : wrong OOME\", oome);\n-        }\n-    }\n-\n-    @Override\n-    protected void eatMemory(List<Object> list) {\n-        byte[] classBytes = null;\n-        try {\n-            classBytes = FileUtils.readClass(AnonkTestee01.class.getName());\n-        } catch (IOException e) {\n-            Env.throwAsUncheckedException(e);\n-        }\n-        try {\n-            while (true) {\n-                Lookup lookup = MethodHandles.lookup();\n-                Lookup ank_lookup = MethodHandles.privateLookupIn(AnonkTestee01.class, lookup);\n-                Class<?> c = ank_lookup.defineHiddenClass(classBytes, true).lookupClass();\n-                list.add(c.newInstance());\n-             }\n-         } catch (InstantiationException | IllegalAccessException e) {\n-             Env.throwAsUncheckedException(e);\n-         }\n-    }\n-\n-    public static void main(String[] args) {\n-        MlvmTestExecutor.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/oome\/metaspace\/Test.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-#\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/parallelLoad\/TEST.properties","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/parallelLoad.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.parallelLoad.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm\n- *      -Xverify:all\n- *      vm.mlvm.anonloader.stress.parallelLoad.Test\n- *      -threadsPerCpu 4\n- *      -threadsExtra 20\n- *      -parseTimeout 0\n- *      -hiddenLoad true\n- *\/\n-\n-package vm.mlvm.anonloader.stress.parallelLoad;\n-\n-import vm.mlvm.anonloader.share.StressClassLoadingTest;\n-import vm.mlvm.anonloader.share.AnonkTestee01;\n-import vm.mlvm.share.MlvmTestExecutor;\n-import vm.mlvm.share.MultiThreadedTest;\n-import vm.share.FileUtils;\n-\n-\/**\n- * Verifies that loading classes in parallel from several threads using\n- * {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n- * does not produce exceptions and crashes.\n- *\n- *\/\n-public class Test extends MultiThreadedTest {\n-    private static final Class<?> HOST_CLASS = AnonkTestee01.class;\n-    private static final String NAME_PREFIX = \"thread%03d\";\n-\n-    private final byte[] classBytes;\n-\n-    private static class SubTest extends StressClassLoadingTest {\n-        private final byte[] classBytes;\n-\n-        public SubTest(byte[] classBytes) {\n-            this.classBytes = classBytes;\n-        }\n-\n-        @Override\n-        protected Class<?> getHostClass() {\n-            return HOST_CLASS;\n-        }\n-\n-        @Override\n-        protected byte[] generateClassBytes() {\n-            return classBytes;\n-        }\n-    }\n-\n-    public Test() throws Exception {\n-        classBytes = FileUtils.readClass(HOST_CLASS.getName());\n-    }\n-\n-    \/**\n-     * Constructs a sub-test class and runs it. The sub-test class loads\n-     * {@link vm.mlvm.anonloader.share.AnonkTestee01} class bytecodes\n-     * using {@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n-     * @param numThread Number of the thread\n-     * @throws Exception if there any exceptions thrown in the sub-test\n-     *\/\n-    @Override\n-    protected boolean runThread(int numThread) throws Exception {\n-        SubTest subTest = new SubTest(classBytes);\n-        subTest.setFileNamePrefix(String.format(NAME_PREFIX, numThread));\n-        return subTest.run();\n-    }\n-\n-    \/**\n-     * Runs the test.\n-     * @param args Test arguments.\n-     *\/\n-    public static void main(String[] args) {\n-        MlvmTestExecutor.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/parallelLoad\/Test.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-#\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-exclusiveAccess.dirs=.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/randomBytecodes\/TEST.properties","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- * @key randomness\n- * @modules java.base\/jdk.internal.misc\n- *\n- * @summary converted from VM Testbase vm\/mlvm\/anonloader\/stress\/randomBytecodes.\n- * VM Testbase keywords: [feature_mlvm, nonconcurrent]\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- *\n- * @comment build test class and indify classes\n- * @build vm.mlvm.anonloader.stress.randomBytecodes.Test\n- * @run driver vm.mlvm.share.IndifiedClassesBuilder\n- *\n- * @run main\/othervm vm.mlvm.anonloader.stress.randomBytecodes.Test -stressIterationsFactor 100000\n- *\/\n-\n-package vm.mlvm.anonloader.stress.randomBytecodes;\n-\n-import java.util.Arrays;\n-import vm.mlvm.anonloader.share.StressClassLoadingTest;\n-\n-\/**\n- * The test does the following in a cycle:\n- * <ol>\n- * <li>Creates a class bytecodes that has a valid 12-byte header\n- *     and has totally random bytes after the header\n- * <li>Tries to load such class using:\n- *     <ul>\n- *       <li>a custom class loader, or\n- *       <li>{@link java.lang.invoke.MethodHandles.Lookup#defineHiddenClass}\n- *           when {@code -hiddenLoad true} is set.\n- *     <\/ul>\n- * <\/ol>\n- *\n- * <p>In most cases the resulting class file is invalid and rejected by\n- * the VM verifier. But this test is looking for pathological cases\n- * such as infinite loops in the verifier or VM crashes.\n- *\n- *\/\n-public class Test extends StressClassLoadingTest {\n-    private static final Class<?> HOST_CLASS = Test.class;\n-    private static final int MAX_SIZE = 0xFFF7;\n-    private static final byte[] CLASS_HEADER = new byte[] {\n-        (byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE,\n-        0x00, 0x00, 0x00, 0x32\n-    };\n-\n-    \/**\n-     * Returns {@link vm.mlvm.anonloader.share.AnonkTestee01} class to the\n-     * parent.\n-     * @return {@link vm.mlvm.anonloader.share.AnonkTestee01} class.\n-     *\/\n-    @Override\n-    protected Class<?> getHostClass() {\n-        return HOST_CLASS;\n-    }\n-\n-    \/**\n-     * Generates a class with valid header (magic and version fields) and\n-     * random bytes after the header.\n-     * <p>Class size is random ([8..65527]).\n-     * Byte values are limited to [0..11] range in order to increase\n-     * possiblity that the random class passes the initial (dead-on-arrival)\n-     * stages of the verifier and is rejected\n-     * in more interesting ones, like method bytecode verification.\n-     * Class version is 52.\n-     *\n-     * @return Class with valid Java header (8 bytes) and totally random bytes\n-     * after the header\n-     *\/\n-    @Override\n-    protected byte[] generateClassBytes() {\n-        final byte[] classBytes = Arrays.copyOf(CLASS_HEADER,\n-                CLASS_HEADER.length + getRNG().nextInt(MAX_SIZE));\n-        for (int j = CLASS_HEADER.length; j < classBytes.length; j++) {\n-            classBytes[j] = (byte) getRNG().nextInt(12);\n-        }\n-\n-        return classBytes;\n-    }\n-\n-    \/**\n-     * Runs the test.\n-     * @param args Test arguments.\n-     *\/\n-    public static void main(String[] args) {\n-        StressClassLoadingTest.launch(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/anonloader\/stress\/randomBytecodes\/Test.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"}]}