{"files":[{"patch":"@@ -6185,0 +6185,12 @@\n+  \/\/ Support for spin waits.\n+  address generate_spin_wait() {\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", \"spin_wait\");\n+    address start = __ pc();\n+\n+    __ spin_wait();\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -7489,0 +7501,2 @@\n+    StubRoutines::aarch64::_spin_wait = generate_spin_wait();\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -60,0 +60,4 @@\n+\n+static void empty_spin_wait() { }\n+address StubRoutines::aarch64::_spin_wait = CAST_FROM_FN_PTR(address, empty_spin_wait);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+  static address _spin_wait;\n+\n@@ -180,0 +182,4 @@\n+  static address spin_wait() {\n+    return _spin_wait;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -385,1 +385,14 @@\n-    return 0;\n+    using spin_wait_func_ptr_t = void (*)();\n+    spin_wait_func_ptr_t func = CAST_TO_FN_PTR(spin_wait_func_ptr_t, StubRoutines::aarch64::spin_wait());\n+    assert(func != nullptr, \"StubRoutines::aarch64::spin_wait must not be null.\");\n+    (*func)();\n+    \/\/ If StubRoutines::aarch64::spin_wait consists of only a RET,\n+    \/\/ SpinPause can be considered as implemented. There will be a sequence\n+    \/\/ of instructions for:\n+    \/\/ - call of SpinPause\n+    \/\/ - load of StubRoutines::aarch64::spin_wait stub pointer\n+    \/\/ - indirect call of the stub\n+    \/\/ - return from the stub\n+    \/\/ - return from SpinPause\n+    \/\/ So '1' always is returned.\n+    return 1;\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test TestSpinPause\n+ * @summary JVM runtime can use SpinPause function for synchronized statements.\n+ *          Check different implementations of JVM SpinPause don't crash JVM.\n+ * @bug 8278241\n+ * @library \/test\/lib\n+ *\n+ * @requires os.arch==\"aarch64\"\n+ *\n+ * @run main\/othervm TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=none TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop -XX:OnSpinWaitInstCount=10 TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xint TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=none TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop -XX:OnSpinWaitInstCount=10 TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xint -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xcomp TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=none TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=nop -XX:OnSpinWaitInstCount=10 TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=isb -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:OnSpinWaitInst=yield -XX:OnSpinWaitInstCount=3 TestSpinPause\n+ *\/\n+\n+public class TestSpinPause {\n+    private Integer[] valueHolder;\n+\n+    private TestSpinPause () {\n+        valueHolder = new Integer[] {Integer.valueOf(101)};\n+    }\n+\n+    private void getSet() {\n+        final int iterCount = 100;\n+        for (int i = 0; i < iterCount; ++i) {\n+           synchronized (valueHolder) {\n+               Integer v = valueHolder[0];\n+               valueHolder[0] = Integer.reverse(v);\n+           }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        TestSpinPause test = new TestSpinPause();\n+        Thread t1 = new Thread(test::getSet);\n+        Thread t2 = new Thread(test::getSet);\n+        t1.start();\n+        t2.start();\n+        t1.join();\n+        t2.join();\n+        System.out.println(\"Done: \" + test.valueHolder[0]);\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/TestSpinPause.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}