{"files":[{"patch":"@@ -13,1 +13,1 @@\n-        default: \"Linux additional (hotspot only), Linux x64, Linux x86, Windows aarch64, Windows x64, macOS x64\"\n+        default: \"Linux additional (hotspot only), Linux x64, Linux x86, Windows aarch64, Windows x64, macOS x64, macOS aarch64\"\n","filename":".github\/workflows\/submit.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-version=17.0.4\n+version=17.0.5\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-DEFAULT_VERSION_UPDATE=4\n+DEFAULT_VERSION_UPDATE=5\n@@ -36,1 +36,1 @@\n-DEFAULT_VERSION_DATE=2022-07-19\n+DEFAULT_VERSION_DATE=2022-10-18\n","filename":"make\/conf\/version-numbers.conf","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -353,4 +353,1 @@\n-  if (!jfa->walkable()) {\n-    \/\/ Capture _last_Java_pc (if needed) and mark anchor walkable.\n-    jfa->capture_last_Java_pc();\n-  }\n+  jfa->make_walkable();\n@@ -359,1 +356,0 @@\n-  vmassert(jfa->last_Java_pc() != NULL, \"not walkable\");\n@@ -820,1 +816,1 @@\n-void JavaFrameAnchor::make_walkable(JavaThread* thread) {\n+void JavaFrameAnchor::make_walkable() {\n@@ -825,1 +821,0 @@\n-  vmassert(Thread::current() == (Thread*)thread, \"not current thread\");\n@@ -828,1 +823,1 @@\n-  capture_last_Java_pc();\n+  _last_Java_pc = (address)_last_Java_sp[-1];\n@@ -832,5 +827,0 @@\n-void JavaFrameAnchor::capture_last_Java_pc() {\n-  vmassert(_last_Java_sp != NULL, \"no last frame set\");\n-  vmassert(_last_Java_pc == NULL, \"already walkable\");\n-  _last_Java_pc = (address)_last_Java_sp[-1];\n-}\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-  void make_walkable(JavaThread* thread);\n-  void capture_last_Java_pc(void);\n+\n+  void make_walkable();\n","filename":"src\/hotspot\/cpu\/aarch64\/javaFrameAnchor_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  void make_walkable(JavaThread* thread) { }\n+  void make_walkable() { }\n","filename":"src\/hotspot\/cpu\/arm\/javaFrameAnchor_arm.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  void make_walkable(JavaThread* thread) { }\n+  void make_walkable() { }\n","filename":"src\/hotspot\/cpu\/ppc\/javaFrameAnchor_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  inline void make_walkable(JavaThread* thread) { }\n+  inline void make_walkable() { }\n","filename":"src\/hotspot\/cpu\/s390\/javaFrameAnchor_s390.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -344,4 +344,1 @@\n-  if (!jfa->walkable()) {\n-    \/\/ Capture _last_Java_pc (if needed) and mark anchor walkable.\n-    jfa->capture_last_Java_pc();\n-  }\n+  jfa->make_walkable();\n@@ -350,1 +347,0 @@\n-  vmassert(jfa->last_Java_pc() != NULL, \"not walkable\");\n@@ -380,4 +376,1 @@\n-  if (!jfa->walkable()) {\n-    \/\/ Capture _last_Java_pc (if needed) and mark anchor walkable.\n-    jfa->capture_last_Java_pc();\n-  }\n+  jfa->make_walkable();\n@@ -386,1 +379,0 @@\n-  vmassert(jfa->last_Java_pc() != NULL, \"not walkable\");\n@@ -724,1 +716,1 @@\n-void JavaFrameAnchor::make_walkable(JavaThread* thread) {\n+void JavaFrameAnchor::make_walkable() {\n@@ -729,2 +721,0 @@\n-  vmassert(Thread::current() == (Thread*)thread, \"not current thread\");\n-  vmassert(last_Java_sp() != NULL, \"not called from Java code?\");\n@@ -732,7 +722,0 @@\n-  capture_last_Java_pc();\n-  vmassert(walkable(), \"something went wrong\");\n-}\n-\n-void JavaFrameAnchor::capture_last_Java_pc() {\n-  vmassert(_last_Java_sp != NULL, \"no last frame set\");\n-  vmassert(_last_Java_pc == NULL, \"already walkable\");\n@@ -740,0 +723,1 @@\n+  vmassert(walkable(), \"something went wrong\");\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":4,"deletions":20,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-  void make_walkable(JavaThread* thread);\n-  void capture_last_Java_pc(void);\n+  void make_walkable();\n","filename":"src\/hotspot\/cpu\/x86\/javaFrameAnchor_x86.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-  void make_walkable(JavaThread* thread) {\n+  void make_walkable() {\n","filename":"src\/hotspot\/cpu\/zero\/javaFrameAnchor_zero.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-    thread->frame_anchor()->make_walkable(thread);\n+    thread->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-      thread->frame_anchor()->make_walkable(thread);\n+      thread->frame_anchor()->make_walkable();\n@@ -212,1 +212,1 @@\n-    _thread->frame_anchor()->make_walkable(_thread);\n+    _thread->frame_anchor()->make_walkable();\n@@ -225,1 +225,1 @@\n-    thread->frame_anchor()->make_walkable(thread);\n+    thread->frame_anchor()->make_walkable();\n@@ -253,1 +253,1 @@\n-    thread->frame_anchor()->make_walkable(thread);\n+    thread->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -615,1 +615,1 @@\n-      jt->frame_anchor()->make_walkable(jt);\n+      jt->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -708,1 +708,1 @@\n-  thread->frame_anchor()->make_walkable(thread);\n+  thread->frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1704,1 +1704,1 @@\n-    frame_anchor()->make_walkable(this);\n+    frame_anchor()->make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1394,1 +1394,1 @@\n-    _anchor.make_walkable(this);\n+    _anchor.make_walkable();\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-            TestLibrary.bomb(\"could not create registry\");\n+            TestLibrary.bomb(\"could not create registry\", e);\n","filename":"test\/jdk\/sun\/rmi\/runtime\/Log\/checkLogging\/CheckLogging.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8240903\n+ * @summary Test consistency of moduleHashes attribute between builds\n+ * @library \/test\/lib\n+ * @run testng HashesOrderTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Collectors;\n+\n+import jdk.test.lib.compiler.ModuleInfoMaker;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class HashesOrderTest {\n+    private ToolProvider JMOD_TOOL = ToolProvider.findFirst(\"jmod\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jmod tool not found\")\n+        );\n+\n+    private String DATE = \"2021-01-06T14:36:00+02:00\";\n+    private int NUM_MODULES = 64;\n+    private Path mods;\n+    private Path lib1;\n+    private Path lib2;\n+    private ModuleInfoMaker builder;\n+\n+    @Test\n+    public void test() throws Exception {\n+        mods = Path.of(\"mods\");\n+        lib1 = Path.of(\"lib1\");\n+        lib2 = Path.of(\"lib2\");\n+        builder = new ModuleInfoMaker(Path.of(\"src\"));\n+\n+        Files.createDirectories(mods);\n+        Files.createDirectories(lib1);\n+        Files.createDirectories(lib2);\n+\n+        makeModule(\"ma\");\n+        String moduleName;\n+        for (int i = 0; i < NUM_MODULES; i++) {\n+            moduleName = \"m\" + i + \"b\";\n+            makeModule(moduleName, \"ma\");\n+            makeJmod(moduleName, lib1);\n+            makeJmod(moduleName, lib2);\n+        }\n+        makeJmod(\"ma\", lib1, \"--module-path\", lib1.toString(),\n+                \"--hash-modules\", \".*\");\n+        Path jmod1 = lib1.resolve(\"ma.jmod\");\n+\n+        makeJmod(\"ma\", lib2, \"--module-path\", lib2.toString(),\n+                \"--hash-modules\", \".*\");\n+        Path jmod2 = lib2.resolve(\"ma.jmod\");\n+\n+        assertEquals(Files.mismatch(jmod1, jmod2), -1);\n+    }\n+\n+    private void makeModule(String mn, String... deps)\n+        throws IOException\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"module \")\n+          .append(mn)\n+          .append(\" {\")\n+          .append(\"\\n\");\n+        Arrays.stream(deps)\n+              .forEach(req -> {\n+                  sb.append(\"    requires \");\n+                  sb.append(req)\n+                    .append(\";\\n\");\n+              });\n+        sb.append(\"}\\n\");\n+        builder.writeJavaFiles(mn, sb.toString());\n+        builder.compile(mn, mods);\n+    }\n+\n+    private void makeJmod(String moduleName, Path libName, String... options) {\n+        Path mclasses = mods.resolve(moduleName);\n+        Path outfile = libName.resolve(moduleName + \".jmod\");\n+        List<String> args = new ArrayList<>();\n+        args.add(\"create\");\n+        Collections.addAll(args, options);\n+        Collections.addAll(args, \"--date\", DATE);\n+        Collections.addAll(args, \"--class-path\", mclasses.toString(),\n+                           outfile.toString());\n+\n+        runJmod(args);\n+    }\n+\n+    private void runJmod(List<String> args) {\n+        runJmod(args.toArray(new String[args.size()]));\n+    }\n+\n+    private void runJmod(String... args) {\n+        int rc = JMOD_TOOL.run(System.out, System.out, args);\n+        System.out.println(\"jmod \" + Arrays.stream(args).collect(Collectors.joining(\" \")));\n+        if (rc != 0) {\n+            throw new AssertionError(\"jmod failed: rc = \" + rc);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jmod\/hashes\/HashesOrderTest.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"}]}