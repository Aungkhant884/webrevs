{"files":[{"patch":"@@ -686,0 +686,15 @@\n+#ifndef PRODUCT\n+static bool falls_through(Bytecodes::Code bc) {\n+  switch (bc) {\n+    \/\/ List may be incomplete.  Here we really only care about bytecodes where compiled code\n+    \/\/ can deoptimize.\n+    case Bytecodes::_goto:\n+    case Bytecodes::_goto_w:\n+    case Bytecodes::_athrow:\n+      return false;\n+    default:\n+      return true;\n+  }\n+}\n+#endif\n+\n@@ -794,1 +809,1 @@\n-          if (!Bytecodes::is_invoke(cur_code) && cur_code != Bytecodes::_athrow) {\n+          if (!Bytecodes::is_invoke(cur_code) && falls_through(cur_code)) {\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler\/interpreter;\n+\n+\/* JASM simplified from the following Java pattern:\n+ *\n+ * public class Custom {\n+ *\n+ *  static void test(int v) {\n+ *      int i8 = 1;\n+ *      try {\n+ *          v += 1;\n+ *      } catch (ArithmeticException exc1) {\n+ *      } finally {\n+ *          for (; i8 < 100; i8++) {\n+ *          }\n+ *      }\n+ *  }\n+ *\n+ *\/\n+\n+super public class Custom {\n+\n+    public static Method test:\"(I)V\" stack 2 locals 3 {\n+        iconst_1;\n+        istore_1;\n+    try t0;\n+        iinc          0, 1;\n+    endtry t0;\n+Loop:\n+        iload_1;\n+        bipush        100;\n+        if_icmpge     Lexit;\n+        iinc          1, 1;\n+        goto          Loop;                 \/\/ deoptimize here on backwards branch\n+    catch t0 java\/lang\/ArithmeticException; \/\/ unreachable block\n+        astore_2;\n+Lexit:\n+        return\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/interpreter\/Custom.jasm","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test VerifyStackWithUnreachableBlock\n+ * @bug 8271055\n+ * @compile Custom.jasm VerifyStackWithUnreachableBlock.java\n+ * @summary Using VerifyStack for method that contains unreachable basic blocks\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:+VerifyStack compiler.interpreter.VerifyStackWithUnreachableBlock\n+ *\/\n+\n+package compiler.interpreter;\n+\n+public class VerifyStackWithUnreachableBlock {\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10000; i++) {\n+            Custom.test(i);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/interpreter\/VerifyStackWithUnreachableBlock.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"}]}