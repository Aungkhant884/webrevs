{"files":[{"patch":"@@ -2,0 +2,3 @@\n+<<<<<<<< HEAD:test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/Block.java\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+========\n@@ -3,0 +6,1 @@\n+>>>>>>>> master:test\/hotspot\/jtreg\/compiler\/allocation\/TestAllocArrayAfterAllocNoUse.java\n@@ -24,0 +28,20 @@\n+<<<<<<<< HEAD:test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/Block.java\n+package compiler.lib.ir_framework.driver.irmatching.parser;\n+\n+import java.util.List;\n+\n+\/**\n+ * Class representing a PrintIdeal or PrintOptoAssembly output block read from the hotspot_pid* file.\n+ *\/\n+record Block(String output, List<String> testClassCompilations) {\n+    public String getOutput() {\n+        return output;\n+    }\n+\n+    public boolean containsTestClassCompilations() {\n+        return !testClassCompilations.isEmpty();\n+    }\n+\n+    public List<String> getTestClassCompilations() {\n+        return testClassCompilations;\n+========\n@@ -51,0 +75,1 @@\n+>>>>>>>> master:test\/hotspot\/jtreg\/compiler\/allocation\/TestAllocArrayAfterAllocNoUse.java\n","filename":"test\/hotspot\/jtreg\/compiler\/allocation\/TestAllocArrayAfterAllocNoUse.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,0 +2,1 @@\n+<<<<<<<< HEAD:test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/Block.java\n@@ -3,0 +4,3 @@\n+========\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+>>>>>>>> master:test\/hotspot\/jtreg\/compiler\/allocation\/TestAllocArrayAfterAllocNoUse.java\n@@ -24,0 +28,1 @@\n+<<<<<<<< HEAD:test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/Block.java\n@@ -42,0 +47,29 @@\n+========\n+\/**\n+ * @test\n+ * @bug 8279125\n+ * @summary fatal error: no reachable node should have no use\n+ * @requires vm.flavor == \"server\"\n+ *\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-DoEscapeAnalysis TestAllocArrayAfterAllocNoUse\n+ *\n+ *\/\n+\n+public class TestAllocArrayAfterAllocNoUse {\n+    private static Object field;\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test();\n+        }\n+    }\n+\n+    private static void test() {\n+        try {\n+            final TestAllocArrayAfterAllocNoUse o = new TestAllocArrayAfterAllocNoUse();\n+        } catch (Exception e) {\n+            final int[] array = new int[100];\n+            field = array;\n+        }\n+\n+>>>>>>>> master:test\/hotspot\/jtreg\/compiler\/allocation\/TestAllocArrayAfterAllocNoUse.java\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/parser\/Block.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -72,0 +72,25 @@\n+<<<<<<< HEAD\n+                {\"count(\/\/@*)\", ID_ATTRIBUTES + FOO_ID_ATTRIBUTES},\n+                {\"count(\/\/*)\",\n+                        ROOT + CUSTOMERS + FOO_CUSTOMERS +\n+                                (CUSTOMERS + FOO_CUSTOMERS) *\n+                                        CUSTOMER_ELEMENTS},\n+                {\"count(\/\/*[@id])\", ID_ATTRIBUTES},\n+                {\"count(.\/*)\", ROOT},\n+                {\"count(\/\/Customer[1]\/following::*)\",\n+                        CUSTOMERS - 1 + FOO_CUSTOMERS +\n+                                (CUSTOMERS - 1 + FOO_CUSTOMERS) *\n+                                        CUSTOMER_ELEMENTS},\n+                {\"count(\/\/Customer[1]\/following-sibling::*)\",\n+                        CUSTOMERS - 1 + FOO_CUSTOMERS},\n+                {\"count(\/\/Customer[3]\/preceding::*)\",\n+                        CUSTOMERS - 1 + (CUSTOMERS - 1) * CUSTOMER_ELEMENTS},\n+                {\"count(\/\/Customer[3]\/preceding-sibling::*)\", CUSTOMERS - 1},\n+                {\"count(\/\/Customer[1]\/ancestor::*)\", ROOT},\n+                {\"count(\/\/Customer[1]\/ancestor-or-self::*)\", ROOT + 1},\n+                {\"count(\/\/Customer[1]\/descendant::*)\", CUSTOMER_ELEMENTS},\n+                {\"count(\/\/Customer[1]\/descendant-or-self::*)\",\n+                        CUSTOMER_ELEMENTS + 1},\n+                {\"count(\/\/Customer\/node())\",\n+                        ID_ATTRIBUTES + CUSTOMERS * CUSTOMER_ELEMENTS},\n+=======\n@@ -101,0 +126,1 @@\n+>>>>>>> master\n@@ -113,0 +139,2 @@\n+<<<<<<< HEAD\n+=======\n@@ -114,0 +142,1 @@\n+>>>>>>> master\n@@ -135,0 +164,2 @@\n+<<<<<<< HEAD\n+=======\n@@ -136,0 +167,1 @@\n+>>>>>>> master\n@@ -143,0 +175,2 @@\n+<<<<<<< HEAD\n+=======\n@@ -144,0 +178,1 @@\n+>>>>>>> master\n@@ -149,0 +184,2 @@\n+<<<<<<< HEAD\n+=======\n@@ -191,0 +228,1 @@\n+>>>>>>> master\n@@ -273,0 +311,2 @@\n+<<<<<<< HEAD\n+=======\n@@ -284,0 +324,1 @@\n+>>>>>>> master\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathNodeSetFnTest.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"}]}