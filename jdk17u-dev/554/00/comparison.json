{"files":[{"patch":"@@ -1185,9 +1185,0 @@\n-void* os::dll_lookup(void* handle, const char* name) {\n-  void* res = dlsym(handle, name);\n-  return res;\n-}\n-\n-void* os::get_default_process_handle() {\n-  return (void*)::dlopen(NULL, RTLD_LAZY);\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1259,16 +1259,0 @@\n-void* os::get_default_process_handle() {\n-#ifdef __APPLE__\n-  \/\/ MacOS X needs to use RTLD_FIRST instead of RTLD_LAZY\n-  \/\/ to avoid finding unexpected symbols on second (or later)\n-  \/\/ loads of a library.\n-  return (void*)::dlopen(NULL, RTLD_FIRST);\n-#else\n-  return (void*)::dlopen(NULL, RTLD_LAZY);\n-#endif\n-}\n-\n-\/\/ XXX: Do we need a lock around this as per Linux?\n-void* os::dll_lookup(void* handle, const char* name) {\n-  return dlsym(handle, name);\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1860,9 +1860,0 @@\n-void* os::dll_lookup(void* handle, const char* name) {\n-  void* res = dlsym(handle, name);\n-  return res;\n-}\n-\n-void* os::get_default_process_handle() {\n-  return (void*)::dlopen(NULL, RTLD_LAZY);\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -655,0 +655,15 @@\n+void* os::get_default_process_handle() {\n+#ifdef __APPLE__\n+  \/\/ MacOS X needs to use RTLD_FIRST instead of RTLD_LAZY\n+  \/\/ to avoid finding unexpected symbols on second (or later)\n+  \/\/ loads of a library.\n+  return (void*)::dlopen(NULL, RTLD_FIRST);\n+#else\n+  return (void*)::dlopen(NULL, RTLD_LAZY);\n+#endif\n+}\n+\n+void* os::dll_lookup(void* handle, const char* name) {\n+  return dlsym(handle, name);\n+}\n+\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}