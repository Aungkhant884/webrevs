{"files":[{"patch":"@@ -45,7 +45,6 @@\n-  \/\/ Increasing this value decreases the number of mappings used for metadata,\n-  \/\/  at the cost of increased virtual size used for Metaspace (or, at least,\n-  \/\/  coarser growth steps). Matters mostly for 32bit platforms due to limited\n-  \/\/  address space.\n-  \/\/ The default of two root chunks has been chosen on a whim but seems to work out okay\n-  \/\/  (coming to a mapping size of 8m per node).\n-  static const size_t _virtual_space_node_default_word_size = chunklevel::MAX_CHUNK_WORD_SIZE * 2;\n+  \/\/ This value only affects the process virtual size, and there only the granularity with which it\n+  \/\/  increases. Matters mostly for 32bit platforms due to limited address space.\n+  \/\/ Note that this only affects the non-class metaspace. Class space ignores this size (it is one\n+  \/\/  single large mapping).\n+  static const size_t _virtual_space_node_default_word_size =\n+      chunklevel::MAX_CHUNK_WORD_SIZE * NOT_LP64(2) LP64_ONLY(16); \/\/ 8MB (32-bit) \/ 64MB (64-bit)\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * 2);\n+            metaspace::chunklevel::MAX_CHUNK_WORD_SIZE * NOT_LP64(2) LP64_ONLY(16));\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspace_misc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}