{"files":[{"patch":"@@ -3106,1 +3106,1 @@\n-instruct replicate2L_zero(vecX dst, immI0 zero)\n+instruct replicate2L_imm(vecX dst, immL con)\n@@ -3109,1 +3109,1 @@\n-  match(Set dst (ReplicateI zero));\n+  match(Set dst (ReplicateL con));\n@@ -3111,1 +3111,1 @@\n-  format %{ \"movi  $dst, $zero\\t# vector (4I)\" %}\n+  format %{ \"movi  $dst, $con\\t# vector (2L)\" %}\n@@ -3113,3 +3113,1 @@\n-    __ eor(as_FloatRegister($dst$$reg), __ T16B,\n-           as_FloatRegister($dst$$reg),\n-           as_FloatRegister($dst$$reg));\n+    __ mov(as_FloatRegister($dst$$reg), __ T2D, $con$$constant);\n@@ -3127,2 +3125,1 @@\n-    __ dup(as_FloatRegister($dst$$reg), __ T2S,\n-           as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n@@ -3140,2 +3137,1 @@\n-    __ dup(as_FloatRegister($dst$$reg), __ T4S,\n-           as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n@@ -3153,2 +3149,1 @@\n-    __ dup(as_FloatRegister($dst$$reg), __ T2D,\n-           as_FloatRegister($src$$reg));\n+    __ dup(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1466,2 +1466,2 @@\n-define(`VREPLICATE', `\n-instruct replicate$3$4$5`'(vec$6 dst, $7 ifelse($7, immI0, zero, $7, immI, con, src))\n+define(`VREPLICATE_REG', `\n+instruct replicate$2$3`'(vec$4 dst, $5 src)\n@@ -1469,4 +1469,4 @@\n-  predicate(ifelse($8, UseSVE == 0 && , $8,\n-                   $8, , , $8`\n-            ')n->as_Vector()->length() == $3);\n-  match(Set dst (Replicate`'ifelse($7, immI0, I, $4) ifelse($7, immI0, zero, $7, immI, con, $7, zero, I, src)));\n+  predicate(ifelse($7, UseSVE == 0 && , $7,\n+                   $7, , , $7`\n+            ')n->as_Vector()->length() == $2);\n+  match(Set dst (Replicate$3 src));\n@@ -1474,1 +1474,1 @@\n-  format %{ \"$1  $dst, $ifelse($7, immI0, zero, $7, immI, con, src)`\\t# vector ('ifelse($4$7, SimmI, $3H, $2, eor, 4I, $3$4)`)\"' %}\n+  format %{ \"dup  $dst, $src\\t# vector ($2$3)\" %}\n@@ -1476,20 +1476,19 @@\n-    __ $2(as_FloatRegister($dst$$reg), __ ifelse(\n-            $2, eor, T16B, T$3`'$9),ifelse(\n-            `$4 $7', `B immI', ` '$con$$constant & 0xff,\n-            `$4 $7', `S immI', ` '$con$$constant & 0xffff,\n-            `$4 $7', `I immI', ` '$con$$constant,\n-            `$2', eor,`\n-           as_FloatRegister($dst$$reg),\n-           as_FloatRegister($dst$$reg)',\n-            `$7', vRegF,`\n-           as_FloatRegister($src$$reg)',\n-            `$7', vRegD,`\n-           as_FloatRegister($src$$reg)',\n-           ` 'as_Register($src$$reg)));\n-  %}\n-  ins_pipe(ifelse($7, immI0, v$1_reg_imm,\n-                  $7, immI,  v$1_reg_imm,\n-                  $7, iRegIorL2I, v$1_reg_reg,\n-                  $7, zero, vmovi_reg_imm,\n-                  $7, iRegL, vdup_reg_reg,\n-                  $4, F, vdup_reg_freg, vdup_reg_dreg)`'ifelse($6, X, 128, 64));\n+    __ dup(as_FloatRegister($dst$$reg), __ T$2$1, $6($src$$reg));\n+  %}\n+  ins_pipe(ifelse($5, iRegIorL2I, vdup_reg_reg,\n+                  $5, iRegL, vdup_reg_reg,\n+                  $3, F, vdup_reg_freg, vdup_reg_dreg)`'ifelse($4, X, 128, 64));\n+%}')dnl\n+define(`VREPLICATE_IMM', `\n+instruct replicate$2$3_imm`'(vec$4 dst, $5 con)\n+%{\n+  predicate(ifelse($7, UseSVE == 0 && , $7,\n+                   $7, , , $7`\n+            ')n->as_Vector()->length() == $2);\n+  match(Set dst (Replicate$3 con));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $con\\t`#' vector ($2`'ifelse($3, S, H, $3))\" %}\n+  ins_encode %{\n+    __ mov(as_FloatRegister($dst$$reg), __ T$2`'iTYPE2SIMD($3), $con$$constant`'$6);\n+  %}\n+  ins_pipe(vmovi_reg_imm`'ifelse($4, X, 128, 64));\n@@ -1497,18 +1496,18 @@\n-dnl        $1    $2    $3  $4 $5     $6 $7          $8                                $9\n-VREPLICATE(dup,  dup,  8,  B, ,      D, iRegIorL2I, n->as_Vector()->length() == 4 ||, B)\n-VREPLICATE(dup,  dup,  16, B, ,      X, iRegIorL2I, UseSVE == 0 && ,                  B)\n-VREPLICATE(movi, mov,  8,  B, _imm,  D, immI,       n->as_Vector()->length() == 4 ||, B)\n-VREPLICATE(movi, mov,  16, B, _imm,  X, immI,       UseSVE == 0 && ,                  B)\n-VREPLICATE(dup,  dup,  4,  S, ,      D, iRegIorL2I, n->as_Vector()->length() == 2 ||, H)\n-VREPLICATE(dup,  dup,  8,  S, ,      X, iRegIorL2I, UseSVE == 0 && ,                  H)\n-VREPLICATE(movi, mov,  4,  S, _imm,  D, immI,       n->as_Vector()->length() == 2 ||, H)\n-VREPLICATE(movi, mov,  8,  S,  _imm, X, immI,       UseSVE == 0 && ,                  H)\n-VREPLICATE(dup,  dup,  2,  I, ,      D, iRegIorL2I, ,                                 S)\n-VREPLICATE(dup,  dup,  4,  I, ,      X, iRegIorL2I, UseSVE == 0 && ,                  S)\n-VREPLICATE(movi, mov,  2,  I, _imm,  D, immI,       ,                                 S)\n-VREPLICATE(movi, mov,  4,  I,  _imm, X, immI,       UseSVE == 0 && ,                  S)\n-VREPLICATE(dup,  dup,  2,  L, ,      X, iRegL,      UseSVE == 0 && ,                  D)\n-VREPLICATE(movi, eor,  2,  L, _zero, X, immI0,      UseSVE == 0 && ,                  D)\n-VREPLICATE(dup,  dup,  2,  F, ,      D, vRegF,      ,                                 S)\n-VREPLICATE(dup,  dup,  4,  F, ,      X, vRegF,      UseSVE == 0 && ,                  S)\n-VREPLICATE(dup,  dup,  2,  D, ,      X, vRegD,      UseSVE == 0 && ,                  D)\n+dnl            $1 $2  $3 $4 $5          $6                $7\n+VREPLICATE_REG(B, 8,  B, D, iRegIorL2I, as_Register,      n->as_Vector()->length() == 4 ||)\n+VREPLICATE_REG(B, 16, B, X, iRegIorL2I, as_Register,      UseSVE == 0 && )\n+VREPLICATE_IMM(B, 8,  B, D, immI,       ` & 0xff',        n->as_Vector()->length() == 4 ||)\n+VREPLICATE_IMM(B, 16, B, X, immI,       ` & 0xff',        UseSVE == 0 && )\n+VREPLICATE_REG(H, 4,  S, D, iRegIorL2I, as_Register,      n->as_Vector()->length() == 2 ||)\n+VREPLICATE_REG(H, 8,  S, X, iRegIorL2I, as_Register,      UseSVE == 0 && )\n+VREPLICATE_IMM(H, 4,  S, D, immI,       ` & 0xffff',      n->as_Vector()->length() == 2 ||)\n+VREPLICATE_IMM(H, 8,  S, X, immI,       ` & 0xffff',      UseSVE == 0 && )\n+VREPLICATE_REG(S, 2,  I, D, iRegIorL2I, as_Register,      )\n+VREPLICATE_REG(S, 4,  I, X, iRegIorL2I, as_Register,      UseSVE == 0 && )\n+VREPLICATE_IMM(S, 2,  I, D, immI,       ,                 )\n+VREPLICATE_IMM(S, 4,  I, X, immI,       ,                 UseSVE == 0 && )\n+VREPLICATE_REG(D, 2,  L, X, iRegL,      as_Register,      UseSVE == 0 && )\n+VREPLICATE_IMM(D, 2,  L, X, immL,       ,                 UseSVE == 0 && )\n+VREPLICATE_REG(S, 2,  F, D, vRegF,      as_FloatRegister, )\n+VREPLICATE_REG(S, 4,  F, X, vRegF,      as_FloatRegister, UseSVE == 0 && )\n+VREPLICATE_REG(D, 2,  D, X, vRegD,      as_FloatRegister, UseSVE == 0 && )\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":44,"deletions":45,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -316,0 +316,47 @@\n+\/\/ Check immediate encoding for movi.\n+\/\/ Return the shift amount which can be {0, 8, 16, 24} for B\/H\/S types. As the D type\n+\/\/ movi does not have shift variant, in this case the return value is the immediate\n+\/\/ after encoding.\n+\/\/ Return -1 if the input imm64 can not be encoded.\n+int Assembler::operand_valid_for_movi_immediate(uint64_t imm64, SIMD_Arrangement T) {\n+  if (T == T1D || T == T2D) {\n+     \/\/ To encode into movi, the 64-bit imm must be in the form of\n+     \/\/ 'aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhh'\n+     \/\/ and encoded in \"a:b:c:d:e:f:g:h\".\n+     uint64_t tmp = imm64;\n+     uint64_t one_byte = 0;\n+     for (int i = 0; i < 8; i++) {\n+       one_byte = tmp & 0xffULL;\n+       if (one_byte != 0xffULL && one_byte != 0) {\n+         return -1; \/\/ can not be encoded\n+       }\n+       tmp = tmp >> 8;\n+     }\n+\n+     imm64 &= 0x0101010101010101ULL;\n+     imm64 |= (imm64 >> 7);\n+     imm64 |= (imm64 >> 14);\n+     imm64 |= (imm64 >> 28);\n+\n+     return imm64 & 0xff;\n+  }\n+\n+  uint32_t imm32 = imm64 & 0xffffffffULL;\n+  if (T == T8B || T == T16B) {       \/\/ 8-bit variant\n+    if (0 == (imm32 & ~0xff))        return 0;\n+  } else if(T == T4H || T == T8H) {  \/\/ 16-bit variant\n+    if (0 == (imm32 & ~0xff))        return 0;\n+    if (0 == (imm32 & ~0xff00))      return 8;\n+  } else if (T == T2S || T == T4S) { \/\/ 32-bit variant\n+    if (0 == (imm32 & ~0xff))        return 0;\n+    if (0 == (imm32 & ~0xff00))      return 8;\n+    if (0 == (imm32 & ~0xff0000))    return 16;\n+    if (0 == (imm32 & ~0xff000000))  return 24;\n+  } else {\n+    assert(false, \"unsupported\");\n+    ShouldNotReachHere();\n+  }\n+\n+  return -1;\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -3257,0 +3257,1 @@\n+  static int  operand_valid_for_movi_immediate(uint64_t imm64, SIMD_Arrangement T);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1512,13 +1512,22 @@\n-\/\/  Vd will get the following values for different arrangements in T\n-\/\/   imm32 == hex 000000gh  T8B:  Vd = ghghghghghghghgh\n-\/\/   imm32 == hex 000000gh  T16B: Vd = ghghghghghghghghghghghghghghghgh\n-\/\/   imm32 == hex 0000efgh  T4H:  Vd = efghefghefghefgh\n-\/\/   imm32 == hex 0000efgh  T8H:  Vd = efghefghefghefghefghefghefghefgh\n-\/\/   imm32 == hex abcdefgh  T2S:  Vd = abcdefghabcdefgh\n-\/\/   imm32 == hex abcdefgh  T4S:  Vd = abcdefghabcdefghabcdefghabcdefgh\n-\/\/   T1D\/T2D: invalid\n-void MacroAssembler::mov(FloatRegister Vd, SIMD_Arrangement T, uint32_t imm32) {\n-  assert(T != T1D && T != T2D, \"invalid arrangement\");\n-  if (T == T8B || T == T16B) {\n-    assert((imm32 & ~0xff) == 0, \"extraneous bits in unsigned imm32 (T8B\/T16B)\");\n-    movi(Vd, T, imm32 & 0xff, 0);\n+\/\/ imm64: only the lower 8\/16\/32 bits are considered for B\/H\/S type. That is,\n+\/\/        the upper 56\/48\/32 bits must be zeros for B\/H\/S type.\n+\/\/ Vd will get the following values for different arrangements in T\n+\/\/   imm64 == hex 000000gh  T8B:  Vd = ghghghghghghghgh\n+\/\/   imm64 == hex 000000gh  T16B: Vd = ghghghghghghghghghghghghghghghgh\n+\/\/   imm64 == hex 0000efgh  T4H:  Vd = efghefghefghefgh\n+\/\/   imm64 == hex 0000efgh  T8H:  Vd = efghefghefghefghefghefghefghefgh\n+\/\/   imm64 == hex abcdefgh  T2S:  Vd = abcdefghabcdefgh\n+\/\/   imm64 == hex abcdefgh  T4S:  Vd = abcdefghabcdefghabcdefghabcdefgh\n+\/\/   imm64 == hex abcdefgh  T1D:  Vd = 00000000abcdefgh\n+\/\/   imm64 == hex abcdefgh  T2D:  Vd = 00000000abcdefgh00000000abcdefgh\n+\/\/ Clobbers rscratch1\n+void MacroAssembler::mov(FloatRegister Vd, SIMD_Arrangement T, uint64_t imm64) {\n+  assert(T != T1Q, \"unsupported\");\n+  if (T == T1D || T == T2D) {\n+    int imm = operand_valid_for_movi_immediate(imm64, T);\n+    if (-1 != imm) {\n+      movi(Vd, T, imm);\n+    } else {\n+      mov(rscratch1, imm64);\n+      dup(Vd, T, rscratch1);\n+    }\n@@ -1527,27 +1536,13 @@\n-  uint32_t nimm32 = ~imm32;\n-  if (T == T4H || T == T8H) {\n-    assert((imm32  & ~0xffff) == 0, \"extraneous bits in unsigned imm32 (T4H\/T8H)\");\n-    imm32 &= 0xffff;\n-    nimm32 &= 0xffff;\n-  }\n-  uint32_t x = imm32;\n-  int movi_cnt = 0;\n-  int movn_cnt = 0;\n-  while (x) { if (x & 0xff) movi_cnt++; x >>= 8; }\n-  x = nimm32;\n-  while (x) { if (x & 0xff) movn_cnt++; x >>= 8; }\n-  if (movn_cnt < movi_cnt) imm32 = nimm32;\n-  unsigned lsl = 0;\n-  while (imm32 && (imm32 & 0xff) == 0) { lsl += 8; imm32 >>= 8; }\n-  if (movn_cnt < movi_cnt)\n-    mvni(Vd, T, imm32 & 0xff, lsl);\n-  else\n-    movi(Vd, T, imm32 & 0xff, lsl);\n-  imm32 >>= 8; lsl += 8;\n-  while (imm32) {\n-    while ((imm32 & 0xff) == 0) { lsl += 8; imm32 >>= 8; }\n-    if (movn_cnt < movi_cnt)\n-      bici(Vd, T, imm32 & 0xff, lsl);\n-    else\n-      orri(Vd, T, imm32 & 0xff, lsl);\n-    lsl += 8; imm32 >>= 8;\n+\n+#ifdef ASSERT\n+  if (T == T8B || T == T16B) assert((imm64 & ~0xff) == 0, \"extraneous bits (T8B\/T16B)\");\n+  if (T == T4H || T == T8H) assert((imm64  & ~0xffff) == 0, \"extraneous bits (T4H\/T8H)\");\n+  if (T == T2S || T == T4S) assert((imm64  & ~0xffffffff) == 0, \"extraneous bits (T2S\/T4S)\");\n+#endif\n+  int shift = operand_valid_for_movi_immediate(imm64, T);\n+  uint32_t imm32 = imm64 & 0xffffffffULL;\n+  if (shift >= 0) {\n+    movi(Vd, T, (imm32 >> shift) & 0xff, shift);\n+  } else {\n+    movw(rscratch1, imm32);\n+    dup(Vd, T, rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":35,"deletions":40,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-  void mov(FloatRegister Vd, SIMD_Arrangement T, uint32_t imm32);\n+  void mov(FloatRegister Vd, SIMD_Arrangement T, uint64_t imm64);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,315 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.LongVector;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/**\n+ * @test\n+ * @bug 8282528\n+ * @summary AArch64: Incorrect replicate2L_zero rule\n+ * @library \/test\/lib\n+ * @requires os.arch == \"aarch64\"\n+ * @modules jdk.incubator.vector\n+ * @run testng\/othervm -XX:UseSVE=0 -XX:-TieredCompilation -XX:CompileThreshold=100 compiler.vectorapi.VectorReplicateLongSpecialImmTest\n+ *\/\n+public class VectorReplicateLongSpecialImmTest {\n+\n+    private static final VectorSpecies<Long> lspec = LongVector.SPECIES_128;\n+    private static final int INVOC_COUNT = 1000;\n+\n+    private static void assertEquals(LongVector lv, long expected) {\n+        Assert.assertEquals(lv.lane(0), expected);\n+        Assert.assertEquals(lv.lane(1), expected);\n+    }\n+\n+    @Test\n+    public void testReplicateL_Imm() {\n+        for (int ic = 0; ic < INVOC_COUNT * INVOC_COUNT; ic++) {\n+            \/\/ On AArch64 ReplicateL will generate movi, which requires the 64-bit\n+            \/\/ imm must be in the form of\n+            \/\/ 'aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffffgggggggghhhhhhhh'\n+            assertEquals(LongVector.broadcast(lspec, 0x0000000000000000L), 0x0000000000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000000000FFL), 0x00000000000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000000000FF00L), 0x000000000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000000000FFFFL), 0x000000000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000000000FF0000L), 0x0000000000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000000000FF00FFL), 0x0000000000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000000000FFFF00L), 0x0000000000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000000000FFFFFFL), 0x0000000000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FF000000L), 0x00000000FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FF0000FFL), 0x00000000FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FF00FF00L), 0x00000000FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FF00FFFFL), 0x00000000FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FFFF0000L), 0x00000000FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FFFF00FFL), 0x00000000FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FFFFFF00L), 0x00000000FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00000000FFFFFFFFL), 0x00000000FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF00000000L), 0x000000FF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF000000FFL), 0x000000FF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF0000FF00L), 0x000000FF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF0000FFFFL), 0x000000FF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF00FF0000L), 0x000000FF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF00FF00FFL), 0x000000FF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF00FFFF00L), 0x000000FF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FF00FFFFFFL), 0x000000FF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFF000000L), 0x000000FFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFF0000FFL), 0x000000FFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFF00FF00L), 0x000000FFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFF00FFFFL), 0x000000FFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFFFF0000L), 0x000000FFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFFFF00FFL), 0x000000FFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFFFFFF00L), 0x000000FFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x000000FFFFFFFFFFL), 0x000000FFFFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF0000000000L), 0x0000FF0000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00000000FFL), 0x0000FF00000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF000000FF00L), 0x0000FF000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF000000FFFFL), 0x0000FF000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF0000FF0000L), 0x0000FF0000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF0000FF00FFL), 0x0000FF0000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF0000FFFF00L), 0x0000FF0000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF0000FFFFFFL), 0x0000FF0000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FF000000L), 0x0000FF00FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FF0000FFL), 0x0000FF00FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FF00FF00L), 0x0000FF00FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FF00FFFFL), 0x0000FF00FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FFFF0000L), 0x0000FF00FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FFFF00FFL), 0x0000FF00FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FFFFFF00L), 0x0000FF00FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FF00FFFFFFFFL), 0x0000FF00FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF00000000L), 0x0000FFFF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF000000FFL), 0x0000FFFF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF0000FF00L), 0x0000FFFF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF0000FFFFL), 0x0000FFFF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF00FF0000L), 0x0000FFFF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF00FF00FFL), 0x0000FFFF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF00FFFF00L), 0x0000FFFF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFF00FFFFFFL), 0x0000FFFF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFF000000L), 0x0000FFFFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFF0000FFL), 0x0000FFFFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFF00FF00L), 0x0000FFFFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFF00FFFFL), 0x0000FFFFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFFFF0000L), 0x0000FFFFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFFFF00FFL), 0x0000FFFFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFFFFFF00L), 0x0000FFFFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x0000FFFFFFFFFFFFL), 0x0000FFFFFFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF000000000000L), 0x00FF000000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000000000FFL), 0x00FF0000000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00000000FF00L), 0x00FF00000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00000000FFFFL), 0x00FF00000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF000000FF0000L), 0x00FF000000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF000000FF00FFL), 0x00FF000000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF000000FFFF00L), 0x00FF000000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF000000FFFFFFL), 0x00FF000000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FF000000L), 0x00FF0000FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FF0000FFL), 0x00FF0000FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FF00FF00L), 0x00FF0000FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FF00FFFFL), 0x00FF0000FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FFFF0000L), 0x00FF0000FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FFFF00FFL), 0x00FF0000FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FFFFFF00L), 0x00FF0000FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF0000FFFFFFFFL), 0x00FF0000FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF00000000L), 0x00FF00FF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF000000FFL), 0x00FF00FF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF0000FF00L), 0x00FF00FF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF0000FFFFL), 0x00FF00FF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF00FF0000L), 0x00FF00FF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF00FF00FFL), 0x00FF00FF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF00FFFF00L), 0x00FF00FF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FF00FFFFFFL), 0x00FF00FF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFF000000L), 0x00FF00FFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFF0000FFL), 0x00FF00FFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFF00FF00L), 0x00FF00FFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFF00FFFFL), 0x00FF00FFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFFFF0000L), 0x00FF00FFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFFFF00FFL), 0x00FF00FFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFFFFFF00L), 0x00FF00FFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FF00FFFFFFFFFFL), 0x00FF00FFFFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF0000000000L), 0x00FFFF0000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00000000FFL), 0x00FFFF00000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF000000FF00L), 0x00FFFF000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF000000FFFFL), 0x00FFFF000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF0000FF0000L), 0x00FFFF0000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF0000FF00FFL), 0x00FFFF0000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF0000FFFF00L), 0x00FFFF0000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF0000FFFFFFL), 0x00FFFF0000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FF000000L), 0x00FFFF00FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FF0000FFL), 0x00FFFF00FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FF00FF00L), 0x00FFFF00FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FF00FFFFL), 0x00FFFF00FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FFFF0000L), 0x00FFFF00FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FFFF00FFL), 0x00FFFF00FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FFFFFF00L), 0x00FFFF00FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFF00FFFFFFFFL), 0x00FFFF00FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF00000000L), 0x00FFFFFF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF000000FFL), 0x00FFFFFF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF0000FF00L), 0x00FFFFFF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF0000FFFFL), 0x00FFFFFF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF00FF0000L), 0x00FFFFFF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF00FF00FFL), 0x00FFFFFF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF00FFFF00L), 0x00FFFFFF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFF00FFFFFFL), 0x00FFFFFF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFF000000L), 0x00FFFFFFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFF0000FFL), 0x00FFFFFFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFF00FF00L), 0x00FFFFFFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFF00FFFFL), 0x00FFFFFFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFFFF0000L), 0x00FFFFFFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFFFF00FFL), 0x00FFFFFFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFFFFFF00L), 0x00FFFFFFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0x00FFFFFFFFFFFFFFL), 0x00FFFFFFFFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00000000000000L), 0xFF00000000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000000000FFL), 0xFF000000000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000000000FF00L), 0xFF0000000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000000000FFFFL), 0xFF0000000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00000000FF0000L), 0xFF00000000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00000000FF00FFL), 0xFF00000000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00000000FFFF00L), 0xFF00000000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00000000FFFFFFL), 0xFF00000000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FF000000L), 0xFF000000FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FF0000FFL), 0xFF000000FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FF00FF00L), 0xFF000000FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FF00FFFFL), 0xFF000000FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FFFF0000L), 0xFF000000FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FFFF00FFL), 0xFF000000FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FFFFFF00L), 0xFF000000FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF000000FFFFFFFFL), 0xFF000000FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF00000000L), 0xFF0000FF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF000000FFL), 0xFF0000FF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF0000FF00L), 0xFF0000FF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF0000FFFFL), 0xFF0000FF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF00FF0000L), 0xFF0000FF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF00FF00FFL), 0xFF0000FF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF00FFFF00L), 0xFF0000FF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FF00FFFFFFL), 0xFF0000FF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFF000000L), 0xFF0000FFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFF0000FFL), 0xFF0000FFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFF00FF00L), 0xFF0000FFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFF00FFFFL), 0xFF0000FFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFFFF0000L), 0xFF0000FFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFFFF00FFL), 0xFF0000FFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFFFFFF00L), 0xFF0000FFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF0000FFFFFFFFFFL), 0xFF0000FFFFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF0000000000L), 0xFF00FF0000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00000000FFL), 0xFF00FF00000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF000000FF00L), 0xFF00FF000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF000000FFFFL), 0xFF00FF000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF0000FF0000L), 0xFF00FF0000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF0000FF00FFL), 0xFF00FF0000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF0000FFFF00L), 0xFF00FF0000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF0000FFFFFFL), 0xFF00FF0000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FF000000L), 0xFF00FF00FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FF0000FFL), 0xFF00FF00FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FF00FF00L), 0xFF00FF00FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FF00FFFFL), 0xFF00FF00FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FFFF0000L), 0xFF00FF00FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FFFF00FFL), 0xFF00FF00FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FFFFFF00L), 0xFF00FF00FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FF00FFFFFFFFL), 0xFF00FF00FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF00000000L), 0xFF00FFFF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF000000FFL), 0xFF00FFFF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF0000FF00L), 0xFF00FFFF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF0000FFFFL), 0xFF00FFFF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF00FF0000L), 0xFF00FFFF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF00FF00FFL), 0xFF00FFFF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF00FFFF00L), 0xFF00FFFF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFF00FFFFFFL), 0xFF00FFFF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFF000000L), 0xFF00FFFFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFF0000FFL), 0xFF00FFFFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFF00FF00L), 0xFF00FFFFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFF00FFFFL), 0xFF00FFFFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFFFF0000L), 0xFF00FFFFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFFFF00FFL), 0xFF00FFFFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFFFFFF00L), 0xFF00FFFFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFF00FFFFFFFFFFFFL), 0xFF00FFFFFFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF000000000000L), 0xFFFF000000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000000000FFL), 0xFFFF0000000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00000000FF00L), 0xFFFF00000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00000000FFFFL), 0xFFFF00000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF000000FF0000L), 0xFFFF000000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF000000FF00FFL), 0xFFFF000000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF000000FFFF00L), 0xFFFF000000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF000000FFFFFFL), 0xFFFF000000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FF000000L), 0xFFFF0000FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FF0000FFL), 0xFFFF0000FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FF00FF00L), 0xFFFF0000FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FF00FFFFL), 0xFFFF0000FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FFFF0000L), 0xFFFF0000FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FFFF00FFL), 0xFFFF0000FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FFFFFF00L), 0xFFFF0000FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF0000FFFFFFFFL), 0xFFFF0000FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF00000000L), 0xFFFF00FF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF000000FFL), 0xFFFF00FF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF0000FF00L), 0xFFFF00FF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF0000FFFFL), 0xFFFF00FF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF00FF0000L), 0xFFFF00FF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF00FF00FFL), 0xFFFF00FF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF00FFFF00L), 0xFFFF00FF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FF00FFFFFFL), 0xFFFF00FF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFF000000L), 0xFFFF00FFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFF0000FFL), 0xFFFF00FFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFF00FF00L), 0xFFFF00FFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFF00FFFFL), 0xFFFF00FFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFFFF0000L), 0xFFFF00FFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFFFF00FFL), 0xFFFF00FFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFFFFFF00L), 0xFFFF00FFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFF00FFFFFFFFFFL), 0xFFFF00FFFFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF0000000000L), 0xFFFFFF0000000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00000000FFL), 0xFFFFFF00000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF000000FF00L), 0xFFFFFF000000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF000000FFFFL), 0xFFFFFF000000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF0000FF0000L), 0xFFFFFF0000FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF0000FF00FFL), 0xFFFFFF0000FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF0000FFFF00L), 0xFFFFFF0000FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF0000FFFFFFL), 0xFFFFFF0000FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FF000000L), 0xFFFFFF00FF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FF0000FFL), 0xFFFFFF00FF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FF00FF00L), 0xFFFFFF00FF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FF00FFFFL), 0xFFFFFF00FF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FFFF0000L), 0xFFFFFF00FFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FFFF00FFL), 0xFFFFFF00FFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FFFFFF00L), 0xFFFFFF00FFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFF00FFFFFFFFL), 0xFFFFFF00FFFFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF00000000L), 0xFFFFFFFF00000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF000000FFL), 0xFFFFFFFF000000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF0000FF00L), 0xFFFFFFFF0000FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF0000FFFFL), 0xFFFFFFFF0000FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF00FF0000L), 0xFFFFFFFF00FF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF00FF00FFL), 0xFFFFFFFF00FF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF00FFFF00L), 0xFFFFFFFF00FFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFF00FFFFFFL), 0xFFFFFFFF00FFFFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFF000000L), 0xFFFFFFFFFF000000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFF0000FFL), 0xFFFFFFFFFF0000FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFF00FF00L), 0xFFFFFFFFFF00FF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFF00FFFFL), 0xFFFFFFFFFF00FFFFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFFFF0000L), 0xFFFFFFFFFFFF0000L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFFFF00FFL), 0xFFFFFFFFFFFF00FFL);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFFFFFF00L), 0xFFFFFFFFFFFFFF00L);\n+            assertEquals(LongVector.broadcast(lspec, 0xFFFFFFFFFFFFFFFFL), 0xFFFFFFFFFFFFFFFFL);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorReplicateLongSpecialImmTest.java","additions":315,"deletions":0,"binary":false,"changes":315,"status":"added"}]}