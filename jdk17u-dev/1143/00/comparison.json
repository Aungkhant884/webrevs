{"files":[{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+\n+import javax.xml.xpath.XPathExpressionException;\n+\n+\/*\n+ * @test\n+ * @bug 8290837\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ * @run testng xpath.XPathBooleanFnTest\n+ * @summary Tests the XPath Boolean Functions\n+ *\/\n+public class XPathBooleanFnTest extends XPathTestBase {\n+\n+    private static final Document doc = getDtdDocument();\n+\n+    \/*\n+     * DataProvider for testing the boolean, not, true, false and lang\n+     * functions.\n+     * Data columns:\n+     *  see parameters of the test \"testBooleanFn\"\n+     *\/\n+    @DataProvider(name = \"booleanExpTestCases\")\n+    public Object[][] getBooleanExp() {\n+        return new Object[][]{\n+                {\"true()\", true},\n+                {\"false()\", false},\n+\n+                {\"boolean(true())\", true},\n+                {\"boolean(false())\", false},\n+                {\"boolean(1)\", true},\n+                {\"boolean(0)\", false},\n+                {\"boolean(-1)\", true},\n+                {\"boolean(1+1)\", true},\n+                {\"boolean(1-1)\", false},\n+                {\"boolean(1+'abc')\", false},\n+                {\"boolean('abc')\", true},\n+                {\"boolean('')\", false},\n+                {\"boolean(\/\/Name)\", true},\n+                {\"boolean(\/\/LastName)\", false},\n+                {\"boolean(\/\/Customer[1]\/ClubMember)\", true},\n+                {\"boolean(\/\/Customer[2]\/ClubMember)\", true},\n+                {\"boolean(\/\/Customer[2]\/ClubMember='true')\", false},\n+                {\"boolean(\/\/Customer[1]\/ClubMember or \" +\n+                        \"\/\/Customer[2]\/ClubMember)\", true},\n+                {\"boolean(\/\/Customer[1]\/ClubMember and \" +\n+                        \"\/\/Customer[2]\/ClubMember)\", true},\n+                {\"boolean(\/\/*[boolean(.)=true()])\", true},\n+                {\"boolean(\/\/*[boolean(.)=false()])\", false},\n+\n+                {\"not(1)\", false},\n+                {\"not(-1)\", false},\n+                {\"not(0)\", true},\n+                {\"not(true())\", false},\n+                {\"not(false())\", true},\n+                {\"not(\/\/Customer[1]\/ClubMember)\", false},\n+                {\"not(\/\/Customer[2]\/ClubMember)\", false},\n+                {\"not(\/\/Customer[2]\/ClubMember='true')\", true},\n+                {\"boolean(\/\/*[not(.)=true()])\", false},\n+                {\"boolean(\/\/*[not(.)=false()])\", true},\n+\n+                {\"boolean(\/\/*[lang('en')])\", true},\n+                {\"boolean(\/\/*[lang('es')])\", false},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid boolean function usage.\n+     * Data columns:\n+     *  see parameters of the test \"testExceptionOnEval\"\n+     *\/\n+    @DataProvider(name = \"exceptionExpTestCases\")\n+    public Object[][] getExceptionExp() {\n+        return new Object[][]{\n+                \/\/ Argument is required for these functions\n+                {\"boolean()\"},\n+                {\"\/\/*[boolean()=true()]\"},\n+                {\"not()\"},\n+                {\"\/\/*[not()=true()]\"},\n+                {\"lang()\"},\n+                {\"\/*[lang()=true()]\"},\n+\n+                \/\/ No arguments should be passed to these functions\n+                {\"true(1)\"},\n+                {\"false(0)\"},\n+                {\"\/\/*[true(.)=true()]\"},\n+                {\"\/\/*[false(.)=false()]\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the boolean, not, true, false\n+     * and lang functions matches the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"booleanExpTestCases\")\n+    void testBooleanFn(String exp, boolean expected) throws Exception {\n+        testExp(doc, exp, expected, Boolean.class);\n+    }\n+\n+    \/**\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n+     *\n+     * @param exp XPath expression\n+     *\/\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathBooleanFnTest.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -72,1 +72,2 @@\n-                {\"count(\/\/@*)\", ID_ATTRIBUTES + FOO_ID_ATTRIBUTES},\n+                {\"count(\/\/@*)\",\n+                        LANG_ATTRIBUTES + ID_ATTRIBUTES + FOO_ID_ATTRIBUTES},\n@@ -76,1 +77,1 @@\n-                                        CUSTOMER_ELEMENTS},\n+                                        (CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS)},\n@@ -79,0 +80,1 @@\n+                {\"count(.)\", ROOT},\n@@ -82,1 +84,1 @@\n-                                        CUSTOMER_ELEMENTS},\n+                                        (CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS)},\n@@ -86,1 +88,2 @@\n-                        CUSTOMERS - 1 + (CUSTOMERS - 1) * CUSTOMER_ELEMENTS},\n+                        CUSTOMERS - 1 + (CUSTOMERS - 1) *\n+                                (CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS)},\n@@ -90,1 +93,2 @@\n-                {\"count(\/\/Customer[1]\/descendant::*)\", CUSTOMER_ELEMENTS},\n+                {\"count(\/\/Customer[1]\/descendant::*)\",\n+                        CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS},\n@@ -92,1 +96,3 @@\n-                        CUSTOMER_ELEMENTS + 1},\n+                        CUSTOMER_ELEMENTS + ADDRESS_ELEMENTS + 1},\n+                \/\/ node() returns all children of the context node including\n+                \/\/ element nodes and text nodes.\n@@ -94,1 +100,1 @@\n-                        ID_ATTRIBUTES + CUSTOMERS * CUSTOMER_ELEMENTS},\n+                        CUSTOMERS + CUSTOMERS * (CUSTOMER_ELEMENTS * 2)},\n@@ -107,0 +113,1 @@\n+                {\"\/\/Customer[position()]\", \"Customer_x1\"},\n@@ -128,0 +135,1 @@\n+                {\"local-name(\/\/*[local-name(.)='Customer'])\", \"Customer\"},\n@@ -135,0 +143,1 @@\n+                {\"name(\/\/*[namespace-uri(.)=\\\"foo\\\"])\", \"foo:Customer\"},\n@@ -140,0 +149,42 @@\n+                {\"name(\/\/*[name(.)='foo:Customer'])\", \"foo:Customer\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid node set function usage.\n+     * Data columns:\n+     *  see parameters of the test \"testExceptionOnEval\"\n+     *\/\n+    @DataProvider(name = \"exceptionExpTestCases\")\n+    public Object[][] getExceptionExp() {\n+        return new Object[][]{\n+                \/\/ Argument is required for these functions\n+                {\"\/\/Customer[id()]\"},\n+                {\"\/\/Customer[id()='x1']\"},\n+                {\"\/\/Customer[count()]\"},\n+                {\"\/\/*[count()=3]\"},\n+\n+                \/\/ No argument should be passed to these functions\n+                {\"\/\/Customer[position(.)]\"},\n+                {\"\/\/*[position(\/\/Customer[1])]\"},\n+                {\"\/\/Customer[last(.)]\"},\n+                {\"\/\/*[last(\/\/Customer[1])]\"},\n+\n+                \/\/ Node-set argument is required for these functions\n+                {\"count(1)\"},\n+                {\"count(true())\"},\n+                {\"count('')\"},\n+                {\"count('abc')\"},\n+                {\"local-name(1)\"},\n+                {\"local-name(true())\"},\n+                {\"local-name('')\"},\n+                {\"local-name('abc')\"},\n+                {\"name(1)\"},\n+                {\"name(true())\"},\n+                {\"name('')\"},\n+                {\"name('abc')\"},\n+                {\"namespace-uri(1)\"},\n+                {\"namespace-uri(true())\"},\n+                {\"namespace-uri('')\"},\n+                {\"namespace-uri('abc')\"},\n@@ -222,0 +273,11 @@\n+\n+    \/**\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n+     *\n+     * @param exp XPath expression\n+     *\/\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n+    }\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathNodeSetFnTest.java","additions":69,"deletions":7,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+\n+import javax.xml.xpath.XPathExpressionException;\n+import java.util.stream.IntStream;\n+\n+\/*\n+ * @test\n+ * @bug 8290838\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ * @run testng xpath.XPathNumberFnTest\n+ * @summary Tests the XPath Number Functions\n+ *\/\n+public class XPathNumberFnTest extends XPathTestBase {\n+\n+    private static final Document doc = getDtdDocument();\n+\n+    \/*\n+     * DataProvider for testing the number, sum, floor, ceiling and round\n+     * functions.\n+     * Data columns:\n+     *  see parameters of the test \"testNumberFn\"\n+     *\/\n+    @DataProvider(name = \"numberExpTestCases\")\n+    public Object[][] getNumberExp() {\n+        return new Object[][]{\n+                {\"number(1)\", 1.0},\n+                {\"number(-1)\", -1.0},\n+                {\"number(0)\", 0},\n+                {\"number(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n+                {\"number(\/\/Customer[1]\/Age + \/\/Customer[2]\/Age)\",\n+                        CUSTOMER_AGES[0] + CUSTOMER_AGES[1]},\n+                {\"number('abc')\", Double.NaN},\n+                {\"number('')\", Double.NaN},\n+                {String.format(\"number(\/\/Age[number()=%d])\", CUSTOMER_AGES[1]),\n+                        CUSTOMER_AGES[1]},\n+                {String.format(\"number(\/\/Age[number(.)=%d])\", CUSTOMER_AGES[1]),\n+                        CUSTOMER_AGES[1]},\n+                {\"number(\/\/Customer[1]\/Name)\", Double.NaN},\n+                {\"number(\/\/Customer[2]\/Age + \/\/Customer[1]\/Name)\", Double.NaN},\n+                {\"number(true())\", 1},\n+                {\"number(false())\", 0},\n+\n+                {\"sum(\/\/Age)\", IntStream.of(CUSTOMER_AGES).sum()},\n+                {\"sum(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n+\n+                {\"floor(1.1)\", 1.0},\n+                {\"floor(-1.6)\", -2.0},\n+                {\"floor(1.0 div 0)\", Double.POSITIVE_INFINITY},\n+                {\"floor(-1.0 div 0)\", Double.NEGATIVE_INFINITY},\n+                {\"floor(true())\", 1},\n+                {\"floor(false())\", 0},\n+                {\"floor(abc)\", Double.NaN},\n+                {\"floor('')\", Double.NaN},\n+                {\"floor(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n+                {\"floor(\/\/Customer[1]\/Name)\", Double.NaN},\n+                {String.format(\"number(\/\/Age[floor(.)=%d])\", CUSTOMER_AGES[1]),\n+                        CUSTOMER_AGES[1]},\n+\n+                {\"ceiling(1.1)\", 2.0},\n+                {\"ceiling(-1.4)\", -1.0},\n+                {\"ceiling(1.0 div 0)\", Double.POSITIVE_INFINITY},\n+                {\"ceiling(-1.0 div 0)\", Double.NEGATIVE_INFINITY},\n+                {\"ceiling(true())\", 1},\n+                {\"ceiling(false())\", 0},\n+                {\"ceiling(abc)\", Double.NaN},\n+                {\"ceiling('')\", Double.NaN},\n+                {\"ceiling(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n+                {\"ceiling(\/\/Customer[1]\/Name)\", Double.NaN},\n+                {String.format(\"number(\/\/Age[ceiling(.)=%d])\",\n+                        CUSTOMER_AGES[1]), CUSTOMER_AGES[1]},\n+\n+                {\"round(1.49)\", 1.0},\n+                {\"round(1.5)\", 2.0},\n+                {\"round(-1.5)\", -1.0},\n+                {\"round(-1.51)\", -2.0},\n+                {\"round(1.0 div 0)\", Double.POSITIVE_INFINITY},\n+                {\"round(-1.0 div 0)\", Double.NEGATIVE_INFINITY},\n+                {\"round(true())\", 1},\n+                {\"round(false())\", 0},\n+                {\"round(abc)\", Double.NaN},\n+                {\"round('')\", Double.NaN},\n+                {\"round(\/\/Customer[2]\/Age)\", CUSTOMER_AGES[1]},\n+                {\"round(\/\/Customer[1]\/Name)\", Double.NaN},\n+                {String.format(\"number(\/\/Age[round(.)=%d])\",\n+                        CUSTOMER_AGES[1]), CUSTOMER_AGES[1]},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid number function usage.\n+     * Data columns:\n+     *  see parameters of the test \"testExceptionOnEval\"\n+     *\/\n+    @DataProvider(name = \"exceptionExpTestCases\")\n+    public Object[][] getExceptionExp() {\n+        return new Object[][]{\n+                \/\/ Argument is required for these functions\n+                {\"\/\/Age[floor()=1.0]\"},\n+                {\"(\/Age[ceiling()=1.0]\"},\n+                {\"\/\/Age[round()=1.0]\"},\n+                {\"\/\/Age[sum()]\"},\n+\n+                \/\/ Node-set argument is required for these functions\n+                {\"sum(1)\"},\n+                {\"sum(true())\"},\n+                {\"sum('')\"},\n+                {\"sum('abc')\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the number, sum, floor, ceiling\n+     * and round functions matches the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"numberExpTestCases\")\n+    void testNumberFn(String exp, double expected) throws Exception {\n+        testExp(doc, exp, expected, Double.class);\n+    }\n+\n+    \/**\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n+     *\n+     * @param exp XPath expression\n+     *\/\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathNumberFnTest.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,384 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package xpath;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+\n+import javax.xml.xpath.XPathExpressionException;\n+\n+\/*\n+ * @test\n+ * @bug 8290836\n+ * @library \/javax\/xml\/jaxp\/unittest\n+ * @run testng xpath.XPathStringFnTest\n+ * @summary Tests the XPath String Functions\n+ *\/\n+public class XPathStringFnTest extends XPathTestBase {\n+\n+    private static final Document doc = getDtdDocument();\n+\n+    \/*\n+     * DataProvider for testing the string function.\n+     * Data columns:\n+     *  see parameters of the test \"testStringFn\"\n+     *\/\n+    @DataProvider(name = \"stringExpTestCases\")\n+    public Object[][] getStringExp() {\n+        return new Object[][]{\n+                {\"string(-0.0)\", \"0\"},\n+                {\"string(0-1)\", \"-1\"},\n+                {\"string(1=1)\", \"true\"},\n+                {\"string(1>2)\", \"false\"},\n+                {\"string(1+a)\", \"NaN\"},\n+                {\"string(1.0 div 0)\", \"Infinity\"},\n+                {\"string(-1.0 div 0)\", \"-Infinity\"},\n+                {\"string(\/\/Customer\/Name)\", \"name1\"},\n+                {\"string(\/\/Customer[1]\/@id)\", \"x1\"},\n+                {\"string(\/\/Customer\/LastName)\", \"\"},\n+                {\"string(\/\/Customer[1]\/Age)\",\n+                        Integer.toString(CUSTOMER_AGES[0])},\n+                {\"string(number(\/\/Customer[2]\/Age))\",\n+                        Integer.toString(CUSTOMER_AGES[1])},\n+                {\"string(\/\/Customer[1]\/Age + \/\/Customer[2]\/Age)\",\n+                        Integer.toString(CUSTOMER_AGES[0] + CUSTOMER_AGES[1])},\n+                {\"string(\/\/Customer[1]\/Age + \/\/Customer[1]\/Name)\", \"NaN\"},\n+                {\"string(\/\/Customer[1]\/ClubMember='true')\", \"true\"},\n+                {\"string(\/\/Customer[2]\/ClubMember='true')\", \"false\"},\n+                {\"string(\/\/Customer[1]\/ClubMember or \" +\n+                        \"\/\/Customer[2]\/ClubMember)\", \"true\"},\n+                {\"string(\/\/Customer[1]\/ClubMember and \" +\n+                        \"\/\/Customer[2]\/ClubMember='true')\", \"false\"},\n+                {\"string(\/\/*[string()='name2'])\", \"name2\"},\n+                {\"string(\/\/*[string(.)='name2'])\", \"name2\"},\n+                {\"string(\/\/*[string(Name)='name2']\/Name)\", \"name2\"},\n+                {\"string(\/\/*[string(@id)='x1']\/\/Street)\", \"1111 111st ave\"},\n+                {\"string(\/\/*[string(..\/@id)='x1']\/Street)\", \"1111 111st ave\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the concat function.\n+     * Data columns:\n+     *  see parameters of the test \"testConcatFn\"\n+     *\/\n+    @DataProvider(name = \"concatExpTestCases\")\n+    public Object[][] getConcatExp() {\n+        return new Object[][]{\n+                {\"concat('Hello', ' name', 1, true())\", \"Hello name1true\"},\n+                {\"concat('Hello ', \/\/Customer\/Name)\", \"Hello name1\"},\n+                {\"concat('Hello ', \/\/Customer\/LastName)\", \"Hello \"},\n+                {\"concat('(', \/\/@id, ')')\", \"(x1)\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the substring, substring-before and\n+     * substring-after functions.\n+     * Data columns:\n+     *  see parameters of the test \"testSubstringFn\"\n+     *\/\n+    @DataProvider(name = \"substringExpTestCases\")\n+    public Object[][] getSubstringExp() {\n+\n+        return new Object[][]{\n+                {\"substring('123@xyz.com', 5, 7)\", \"xyz.com\"},\n+                {\"substring('123@xyz.com', 5, 10)\", \"xyz.com\"},\n+                {\"substring(\/\/Email, 5, 7)\", \"xyz.com\"},\n+                {\"substring(\/\/Email, 5)\", \"xyz.com\"},\n+                {\"substring(\/\/Email, 1, string-length(.))\", \"123@xyz.com\"},\n+                {\"substring(\/\/Email, 1, string-length(.)+1)\", \"123@xyz.com\"},\n+                {\"substring(\/\/LastName, 1)\", \"\"},\n+                {\"string(\/\/*[substring(., 1)='name2'])\", \"name2\"},\n+\n+                {\"substring-before('123@xyz.com', '@')\", \"123\"},\n+                {\"substring-before(\/\/Email, '@')\", \"123\"},\n+                {\"substring-before(\/\/Email, '?')\", \"\"},\n+                {\"substring-before(\/\/Email, '')\", \"\"},\n+                {\"substring-before(\/\/LastName, '')\", \"\"},\n+                {\"string(\/\/*[substring-before(., ' ')='1111'])\", \"1111 111st \" +\n+                        \"ave\"},\n+\n+                {\"substring-after('123@xyz.com', '@')\", \"xyz.com\"},\n+                {\"substring-after(\/\/Email, '@')\", \"xyz.com\"},\n+                {\"substring-after(\/\/Email, '?')\", \"\"},\n+                {\"substring-after(\/\/Email, '')\", \"123@xyz.com\"},\n+                {\"substring-after(\/\/LastName, '')\", \"\"},\n+                {\"string(\/\/*[substring-after(., ' ')='111st ave'])\", \"1111 \" +\n+                        \"111st ave\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the normalize-space function.\n+     * Data columns:\n+     *  see parameters of the test \"testNormalizeSpaceFn\"\n+     *\/\n+    @DataProvider(name = \"normalizeExpTestCases\")\n+    public Object[][] getNormalizeExp() {\n+        return new Object[][]{\n+                {\"normalize-space('  1111   111st   ave  ')\", \"1111 111st ave\"},\n+                {\"normalize-space(true())\", \"true\"},\n+                {\"normalize-space(1.234)\", \"1.234\"},\n+                {\"normalize-space(\/\/Customer[1]\/\/Street)\", \"1111 111st ave\"},\n+                {\"normalize-space(\/\/Customer[2]\/\/Street)\", \"2222 222nd ave\"},\n+                {\"normalize-space(\/\/LastName)\", \"\"},\n+                {\"string(\/\/*[normalize-space()='name1'])\", \"name1\"},\n+                {\"string(\/\/*[normalize-space(.)='name1'])\", \"name1\"},\n+                {\"string(\/\/*[normalize-space(Name)='name2']\/Name)\", \"name2\"},\n+                {\"string(\/\/*[normalize-space(@id)='x1']\/\/Street)\", \"1111 \" +\n+                        \"111st ave\"},\n+                {\"string(\/\/*[normalize-space(..\/@id)='x1']\/Street)\", \"1111 \" +\n+                        \"111st ave\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the translate function.\n+     * Data columns:\n+     *  see parameters of the test \"testTranslateFn\"\n+     *\/\n+    @DataProvider(name = \"translateExpTestCases\")\n+    public Object[][] getTranslateExp() {\n+        return new Object[][]{\n+                {\"translate('1111 111st ave', ' ', '')\", \"1111111stave\"},\n+                {\"translate('1111 111st ave', '', '')\", \"1111 111st ave\"},\n+                {\"translate('1111 111st ave', '1 ', '')\", \"stave\"},\n+                {\"translate('abcabcdcd', 'abcd', 'xyz')\", \"xyzxyzz\"},\n+                {\"translate('abcabcdcd', 'bcd', 'uvwxyz')\", \"auvauvwvw\"},\n+                {\"translate('aabccdacbabcb', 'aaccbbdd', 'wxyz')\", \"wwyywywy\"},\n+                {\"translate(\/\/Customer[1]\/\/Street, \" +\n+                        \"'abcdefghijklmnopqrstuvwxyz', \" +\n+                        \"'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\",\n+                        \"1111 111ST AVE\"},\n+                {\"translate(\/\/LastName, 'name', 'NAME')\", \"\"},\n+                {\"translate(true(), true(), false())\", \"fals\"},\n+                {\"translate(123, 2, 3)\", \"133\"},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the string-length function.\n+     * Data columns:\n+     *  see parameters of the test \"testStringLengthFn\"\n+     *\/\n+    @DataProvider(name = \"stringLengthExpTestCases\")\n+    public Object[][] getStringLengthExp() {\n+        return new Object[][]{\n+                {\"string-length('')\", 0},\n+                {\"string-length(123)\", 3},\n+                {\"string-length(true())\", 4},\n+                {\"string-length('1111 111st ave')\", 14.0},\n+                {\"string-length(\/\/Customer[1]\/\/Street)\", 14.0},\n+                {\"string-length(\/\/LastName)\", 0},\n+                {\"string-length(\/\/Customer[1]\/Name)\", 5},\n+                {\"string-length(\/\/Customer[1]\/@id)\", 2},\n+                {\"string-length(name(\/\/*[string-length()=10]))\", 5},\n+                {\"string-length(name(\/\/*[string-length(.)=10]))\", 5},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the starts-with function.\n+     * Data columns:\n+     *  see parameters of the test \"testStartsWithFn\"\n+     *\/\n+    @DataProvider(name = \"startsWithExpTestCases\")\n+    public Object[][] getStartsWithExp() {\n+        return new Object[][]{\n+                {\"starts-with(\/\/Email, '123')\", true},\n+                {\"starts-with(\/\/Email, 123)\", true},\n+                {\"starts-with(\/\/Email, '?')\", false},\n+                {\"starts-with(\/\/Email, '')\", true},\n+                {\"starts-with(\/\/Customer\/@id, 'x')\", true},\n+                {\"starts-with(\/\/LastName, '')\", true},\n+                {\"boolean(\/\/*[starts-with(., 'name2')]='name2')\", true},\n+                {\"boolean(\/\/*[starts-with(text(), 'name')]='name2')\", true},\n+                {\"boolean(\/\/*[starts-with(., 'name1')]\/.='name2')\", false},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing the contains function.\n+     * Data columns:\n+     *  see parameters of the test \"testContainsFn\"\n+     *\/\n+    @DataProvider(name = \"containsExpTestCases\")\n+    public Object[][] getContainsExp() {\n+        return new Object[][]{\n+                {\"contains(\/\/Email, '123')\", true},\n+                {\"contains(\/\/Email, 123)\", true},\n+                {\"contains(\/\/Email, '?')\", false},\n+                {\"contains(\/\/Email, '')\", true},\n+                {\"contains(\/\/Customer\/@id, 'x')\", true},\n+                {\"contains(\/\/LastName, '')\", true},\n+                {\"boolean(\/\/*[contains(., 'name2')]='name2')\", true},\n+                {\"boolean(\/\/*[contains(text(), 'name')]='name2')\", true},\n+                {\"boolean(\/\/*[contains(., 'name1')]\/.='name2')\", false},\n+        };\n+    }\n+\n+    \/*\n+     * DataProvider for testing XPathExpressionException being thrown on\n+     * invalid string function usage.\n+     * Data columns:\n+     *  see parameters of the test \"testExceptionOnEval\"\n+     *\/\n+    @DataProvider(name = \"exceptionExpTestCases\")\n+    public Object[][] getExceptionExp() {\n+        return new Object[][]{\n+                \/\/ At least two arguments are required for these functions\n+                {\"\/\/*[concat()='name2']\"},\n+                {\"\/\/*[concat(.)='name2']\"},\n+                {\"\/\/*[substring()='name2']\"},\n+                {\"\/\/*[substring(.)='name2']\"},\n+                {\"\/\/*[substring-before()='name2']\"},\n+                {\"\/\/*[substring-before(.)='name2']\"},\n+                {\"\/\/*[substring-after()='name2']\"},\n+                {\"\/\/*[substring-after(.)='name2']\"},\n+                {\"\/\/*[translate()='name2']\"},\n+                {\"\/\/*[translate(.)='name2']\"},\n+                {\"\/\/*[contains()]\"},\n+                {\"\/\/*[contains(.)]\"},\n+                {\"\/\/*[starts-with()]\"},\n+                {\"\/\/*[starts-with(.)]\"},\n+        };\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the string function matches\n+     * the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"stringExpTestCases\")\n+    void testStringFn(String exp, String expected) throws Exception {\n+        testExp(doc, exp, expected, String.class);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the concat function matches\n+     * the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"concatExpTestCases\")\n+    void testConcatFn(String exp, String expected) throws Exception {\n+        testExp(doc, exp, expected, String.class);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the substring, substring-before\n+     * and substring-after functions matches the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"substringExpTestCases\")\n+    void testSubstringFn(String exp, String expected) throws Exception {\n+        testExp(doc, exp, expected, String.class);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the normalize-space function\n+     * matches the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"normalizeExpTestCases\")\n+    void testNormalizeSpaceFn(String exp, String expected) throws Exception {\n+        testExp(doc, exp, expected, String.class);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the translate function matches\n+     * the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"translateExpTestCases\")\n+    void testTranslateFn(String exp, String expected) throws Exception {\n+        testExp(doc, exp, expected, String.class);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the string-length function matches\n+     * the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"stringLengthExpTestCases\")\n+    void testStringLengthFn(String exp, double expected) throws Exception {\n+        testExp(doc, exp, expected, Double.class);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the starts-with function\n+     * matches the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"startsWithExpTestCases\")\n+    void testStartsWithFn(String exp, boolean expected) throws Exception {\n+        testExp(doc, exp, expected, Boolean.class);\n+    }\n+\n+    \/**\n+     * Verifies that the result of evaluating the contains function matches\n+     * the expected result.\n+     *\n+     * @param exp      XPath expression\n+     * @param expected expected result\n+     * @throws Exception if test fails\n+     *\/\n+    @Test(dataProvider = \"containsExpTestCases\")\n+    void testContainsFn(String exp, Boolean expected) throws Exception {\n+        testExp(doc, exp, expected, Boolean.class);\n+    }\n+\n+    \/**\n+     * Verifies that XPathExpressionException is thrown on xpath evaluation.\n+     *\n+     * @param exp XPath expression\n+     *\/\n+    @Test(dataProvider = \"exceptionExpTestCases\")\n+    void testExceptionOnEval(String exp) {\n+        Assert.assertThrows(XPathExpressionException.class, () -> testEval(doc,\n+                exp));\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathStringFnTest.java","additions":384,"deletions":0,"binary":false,"changes":384,"status":"added"},{"patch":"@@ -32,4 +32,1 @@\n-import javax.xml.xpath.XPath;\n-import javax.xml.xpath.XPathFactory;\n-import javax.xml.xpath.XPathNodes;\n-import javax.xml.xpath.XPathEvaluationResult;\n+import javax.xml.xpath.*;\n@@ -41,0 +38,1 @@\n+import org.testng.Assert;\n@@ -55,1 +53,1 @@\n-               <!ELEMENT Customer (Name, Phone, Email, Address)>\n+               <!ELEMENT Customer (Name, Phone, Email, Address, Age, ClubMember)>\n@@ -60,0 +58,2 @@\n+               <!ELEMENT Age (#PCDATA)>\n+               <!ELEMENT ClubMember (#PCDATA)>\n@@ -70,1 +70,1 @@\n-            = \"<Customers xmlns:foo=\\\"foo\\\">\"\n+            = \"<Customers xmlns:foo=\\\"foo\\\" xml:lang=\\\"en\\\">\"\n@@ -80,0 +80,2 @@\n+            + \"        <Age>0<\/Age>\"\n+            + \"        <ClubMember>true<\/ClubMember>\"\n@@ -86,1 +88,1 @@\n-            + \"            <Street>2222 222nd ave<\/Street>\"\n+            + \"            <Street>  2222 222nd ave  <\/Street>\"\n@@ -90,0 +92,2 @@\n+            + \"        <Age>100<\/Age>\"\n+            + \"        <ClubMember>false<\/ClubMember>\"\n@@ -100,0 +104,2 @@\n+            + \"        <Age>-100<\/Age>\"\n+            + \"        <ClubMember>false<\/ClubMember>\"\n@@ -110,0 +116,2 @@\n+            + \"        <foo:Age>0<\/foo:Age>\"\n+            + \"        <foo:ClubMember>true<\/foo:ClubMember>\"\n@@ -116,0 +124,1 @@\n+    final int LANG_ATTRIBUTES = 1;\n@@ -120,1 +129,3 @@\n-    final int CUSTOMER_ELEMENTS = 7;\n+    final int CUSTOMER_ELEMENTS = 6;\n+    \/\/ Number of Address elements.\n+    final int ADDRESS_ELEMENTS = 3;\n@@ -125,0 +136,2 @@\n+    \/\/ Customer Ages\n+    final int[] CUSTOMER_AGES = {0, 100, -100, 0};\n@@ -190,0 +203,41 @@\n+    \/**\n+     * Evaluates XPath expression and checks if it matches the expected result.\n+     *\n+     * @param doc xml document {@link org.w3c.dom.Document}\n+     * @param exp xpath expression string\n+     * @param expected expected result\n+     * @param clazz expected result type for evaluation.\n+     * @param <T> expected result type\n+     *\n+     * @throws Exception if test fails\n+     *\/\n+    static <T> void testExp(Document doc, String exp, T expected,\n+                          Class<T> clazz) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        T result = xPath.evaluateExpression(exp, doc, clazz);\n+        T result2 = (T) xPath.evaluate(exp, doc,\n+                XPathEvaluationResult.XPathResultType.getQNameType(clazz));\n+\n+        Assert.assertEquals(result, expected);\n+        Assert.assertEquals(result2, result);\n+    }\n+\n+    \/**\n+     * Evaluates XPath expression.\n+     *\n+     * @param doc xml document {@link org.w3c.dom.Document}\n+     * @param exp xpath expression string\n+     *\n+     * @throws Exception if test fails\n+     *\/\n+    static void testEval(Document doc, String exp) throws Exception {\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+        try {\n+            xPath.evaluateExpression(exp, doc);\n+        } catch (XPathExpressionException e) {\n+            xPath.evaluate(exp, doc);\n+        }\n+    }\n+\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/xpath\/XPathTestBase.java","additions":62,"deletions":8,"binary":false,"changes":70,"status":"modified"}]}