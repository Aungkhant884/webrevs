{"files":[{"patch":"@@ -11331,0 +11331,102 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct NegI_reg_URShift_reg(iRegINoSp dst,\n+                              immI0 zero, iRegIorL2I src1, immI src2) %{\n+  match(Set dst (SubI zero (URShiftI src1 src2)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"negw  $dst, $src1, LSR $src2\" %}\n+\n+  ins_encode %{\n+    __ negw(as_Register($dst$$reg), as_Register($src1$$reg),\n+            Assembler::LSR, $src2$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct NegI_reg_RShift_reg(iRegINoSp dst,\n+                              immI0 zero, iRegIorL2I src1, immI src2) %{\n+  match(Set dst (SubI zero (RShiftI src1 src2)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"negw  $dst, $src1, ASR $src2\" %}\n+\n+  ins_encode %{\n+    __ negw(as_Register($dst$$reg), as_Register($src1$$reg),\n+            Assembler::ASR, $src2$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct NegI_reg_LShift_reg(iRegINoSp dst,\n+                              immI0 zero, iRegIorL2I src1, immI src2) %{\n+  match(Set dst (SubI zero (LShiftI src1 src2)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"negw  $dst, $src1, LSL $src2\" %}\n+\n+  ins_encode %{\n+    __ negw(as_Register($dst$$reg), as_Register($src1$$reg),\n+            Assembler::LSL, $src2$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct NegL_reg_URShift_reg(iRegLNoSp dst,\n+                              immL0 zero, iRegL src1, immI src2) %{\n+  match(Set dst (SubL zero (URShiftL src1 src2)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"neg  $dst, $src1, LSR $src2\" %}\n+\n+  ins_encode %{\n+    __ neg(as_Register($dst$$reg), as_Register($src1$$reg),\n+            Assembler::LSR, $src2$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct NegL_reg_RShift_reg(iRegLNoSp dst,\n+                              immL0 zero, iRegL src1, immI src2) %{\n+  match(Set dst (SubL zero (RShiftL src1 src2)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"neg  $dst, $src1, ASR $src2\" %}\n+\n+  ins_encode %{\n+    __ neg(as_Register($dst$$reg), as_Register($src1$$reg),\n+            Assembler::ASR, $src2$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct NegL_reg_LShift_reg(iRegLNoSp dst,\n+                              immL0 zero, iRegL src1, immI src2) %{\n+  match(Set dst (SubL zero (LShiftL src1 src2)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"neg  $dst, $src1, LSL $src2\" %}\n+\n+  ins_encode %{\n+    __ neg(as_Register($dst$$reg), as_Register($src1$$reg),\n+            Assembler::LSL, $src2$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_shift);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":102,"deletions":0,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -55,0 +55,18 @@\n+define(`NEG_SHIFT_INSN',\n+`\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct Neg$1_reg_$2_reg(iReg$1NoSp dst,\n+                              imm$1`0' zero, iReg$1`'ORL2I($1) src1, immI src2) %{\n+  match(Set dst (Sub$1 zero ($2$1 src1 src2)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"ifelse($1, I, negw, neg)  $dst, $src1, $3 $src2\" %}\n+\n+  ins_encode %{\n+    __ ifelse($1, I, negw, neg)(as_Register($dst$$reg), as_Register($src1$$reg),\n+            Assembler::$3, $src2$$constant & ifelse($1,I,0x1f,0x3f));\n+  %}\n+\n+  ins_pipe(ialu_reg_shift);\n+%}\n+')dnl\n@@ -129,0 +147,5 @@\n+define(`BOTH_NEG_SHIFT_INSNS',\n+`NEG_SHIFT_INSN($1, URShift, LSR)\n+NEG_SHIFT_INSN($1, RShift, ASR)\n+NEG_SHIFT_INSN($1, LShift, LSL)')dnl\n+dnl\n@@ -154,0 +177,2 @@\n+BOTH_NEG_SHIFT_INSNS(I)\n+BOTH_NEG_SHIFT_INSNS(L)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_ad.m4","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4093292\n+ * @bug 4093292 8280511\n@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -29,0 +30,1 @@\n+ * @run main\/othervm -XX:-TieredCompilation compiler.codegen.ShiftTest\n@@ -33,0 +35,2 @@\n+import jdk.test.lib.Asserts;\n+\n@@ -66,0 +70,125 @@\n+    private static int[] ispecial = {\n+        0, Integer.MAX_VALUE, -Integer.MAX_VALUE, Integer.MIN_VALUE, -42, 42, -1, 1\n+    };\n+\n+    private static long[] lspecial = {\n+        0, Long.MAX_VALUE, -Long.MAX_VALUE, Long.MIN_VALUE, Integer.MAX_VALUE, -Integer.MAX_VALUE, Integer.MIN_VALUE, -42, 42, -1, 1\n+    };\n+\n+    private static int[] ispecial_LeftShift_expected = {\n+        0, 32, -32, 0, 1344, -1344, 32, -32\n+    };\n+\n+    private static int[] ispecial_UnsignedRightShift_expected = {\n+        0, -33554431, -33554432, -33554432 ,-67108863, 0, -67108863, 0\n+    };\n+\n+    private static int[] ispecial_SignedRightShift_expected = {\n+        0, -16777215, 16777216, 16777216, 1, 0, 1, 0\n+    };\n+\n+    private static int[] ispecial_LeftShiftCorner_expected = {\n+        0, -2147483647, 2147483647, -2147483648, 42, -42, 1, -1\n+    };\n+\n+    private static int[] ispecial_UnsignedRightShiftCorner_expected = {\n+        0, -1073741823, -1073741824, -1073741824, -2147483627, -21, -2147483647, 0\n+    };\n+\n+    private static int[] ispecial_SignedRightShiftCorner_expected = {\n+        0, -536870911, 536870912, 536870912, 11, -10, 1, 0\n+    };\n+\n+    private static long[] lspecial_LeftShift_expected = {\n+        0, 256, -256, 0, -549755813632L, 549755813632L, 549755813888L, 10752, -10752, 256, -256\n+    };\n+\n+    private static long[] lspecial_UnsignedRightShift_expected = {\n+        0, -18014398509481983L, -18014398509481984L, -18014398509481984L, -4194303, -36028797014769664L, -36028797014769664L, -36028797018963967L, 0, -36028797018963967L, 0\n+    };\n+\n+    private static long[] lspecial_SignedRightShift_expected = {\n+        0, -9007199254740991L, 9007199254740992L, 9007199254740992L, -2097151, 2097152, 2097152, 1, 0, 1, 0\n+    };\n+\n+    private static long[] lspecial_LeftShiftCorner_expected = {\n+        0, -9223372036854775807L, 9223372036854775807L, -9223372036854775808L, -2147483647, 2147483647, 2147483648L, 42, -42, 1, -1\n+    };\n+\n+    private static long[] lspecial_UnsignedRightShiftCorner_expected = {\n+        0, -4611686018427387903L, -4611686018427387904L, -4611686018427387904L, -1073741823, -9223372035781033984L, -9223372035781033984L, -9223372036854775787L, -21, -9223372036854775807L, 0\n+    };\n+\n+    private static long[] lspecial_SignedRightShiftCorner_expected = {\n+        0, -2305843009213693951L, 2305843009213693952L, 2305843009213693952L, -536870911, 536870912, 536870912, 11, -10, 1, 0\n+    };\n+\n+    private static int negLeftShiftInt(int input) {\n+        return -(input << 5);\n+    }\n+\n+    private static int negUnsignedRightShiftInt(int input) {\n+        return -(input >>> 6);\n+    }\n+\n+    private static int negSignedRightShiftInt(int input) {\n+        return -(input >> 7);\n+    }\n+\n+    private static int negLeftShiftICorner(int input) {\n+        return -(input << 32);\n+    }\n+\n+    private static int negUnsignedRightShiftICorner(int input) {\n+        return -(input >>> 33);\n+    }\n+\n+    private static int negSignedRightShiftICorner(int input) {\n+        return -(input >> 34);\n+    }\n+\n+    private static long negLeftShiftLong(long input) {\n+        return -(input << 8);\n+    }\n+\n+    private static long negUnsignedRightShiftLong(long input) {\n+        return -(input >>> 9);\n+    }\n+\n+    private static long negSignedRightShiftLong(long input) {\n+        return -(input >> 10);\n+    }\n+\n+    private static long negLeftShiftLCorner(long input) {\n+        return -(input << 64);\n+    }\n+\n+    private static long negUnsignedRightShiftLCorner(long input) {\n+        return -(input >>> 65);\n+    }\n+\n+    private static long negSignedRightShiftLCorner(long input) {\n+        return -(input >> 66);\n+    }\n+\n+    private static void testNegShift() {\n+        for (int i = 0; i < 20_000; i++) {\n+            for (int j = 0; j < ispecial.length; j++) {\n+                Asserts.assertEquals(negLeftShiftInt(ispecial[j]), ispecial_LeftShift_expected[j]);\n+                Asserts.assertEquals(negUnsignedRightShiftInt(ispecial[j]), ispecial_UnsignedRightShift_expected[j]);\n+                Asserts.assertEquals(negSignedRightShiftInt(ispecial[j]), ispecial_SignedRightShift_expected[j]);\n+                Asserts.assertEquals(negLeftShiftICorner(ispecial[j]), ispecial_LeftShiftCorner_expected[j]);\n+                Asserts.assertEquals(negUnsignedRightShiftICorner(ispecial[j]), ispecial_UnsignedRightShiftCorner_expected[j]);\n+                Asserts.assertEquals(negSignedRightShiftICorner(ispecial[j]), ispecial_SignedRightShiftCorner_expected[j]);\n+            }\n+            for (int j = 0; j < lspecial.length; j++) {\n+                Asserts.assertEquals(negLeftShiftLong(lspecial[j]), lspecial_LeftShift_expected[j]);\n+                Asserts.assertEquals(negUnsignedRightShiftLong(lspecial[j]), lspecial_UnsignedRightShift_expected[j]);\n+                Asserts.assertEquals(negSignedRightShiftLong(lspecial[j]), lspecial_SignedRightShift_expected[j]);\n+                Asserts.assertEquals(negLeftShiftLCorner(lspecial[j]), lspecial_LeftShiftCorner_expected[j]);\n+                Asserts.assertEquals(negUnsignedRightShiftLCorner(lspecial[j]), lspecial_UnsignedRightShiftCorner_expected[j]);\n+                Asserts.assertEquals(negSignedRightShiftLCorner(lspecial[j]), lspecial_SignedRightShiftCorner_expected[j]);\n+            }\n+        }\n+    }\n+\n@@ -68,0 +197,1 @@\n+        testNegShift();\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/ShiftTest.java","additions":132,"deletions":2,"binary":false,"changes":134,"status":"modified"}]}