{"files":[{"patch":"@@ -1291,4 +1291,7 @@\n-  const Type* src_type = src->Value(&_gvn);\n-  const Type* dst_type = dst->Value(&_gvn);\n-  BasicType src_elem = src_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType dst_elem = dst_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  const TypeAryPtr* src_type = src->Value(&_gvn)->isa_aryptr();\n+  const TypeAryPtr* dst_type = dst->Value(&_gvn)->isa_aryptr();\n+  if (src_type == nullptr || dst_type == nullptr) {\n+    return false;\n+  }\n+  BasicType src_elem = src_type->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType dst_elem = dst_type->klass()->as_array_klass()->element_type()->basic_type();\n@@ -4946,2 +4949,2 @@\n-  BasicType src_elem = src_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType dst_elem = dst_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType src_elem = top_src->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType dst_elem = top_dest->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5000,2 +5003,2 @@\n-  BasicType x_elem = x_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType y_elem = y_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType x_elem = top_x->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType y_elem = top_y->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5108,2 +5111,2 @@\n-  BasicType x_elem = x_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType z_elem = z_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType x_elem = top_x->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType z_elem = top_z->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5157,2 +5160,2 @@\n-  BasicType out_elem = out_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType in_elem = in_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType out_elem = top_out->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType in_elem = top_in->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5212,4 +5215,4 @@\n-  BasicType a_elem = a_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType b_elem = b_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType n_elem = n_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType m_elem = m_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType a_elem = top_a->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType b_elem = top_b->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType n_elem = top_n->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType m_elem = top_m->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5268,3 +5271,3 @@\n-  BasicType a_elem = a_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType n_elem = n_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType m_elem = m_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType a_elem = top_a->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType n_elem = top_n->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType m_elem = top_m->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5320,2 +5323,2 @@\n-  BasicType newArr_elem = newArr_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n-  BasicType oldArr_elem = oldArr_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType newArr_elem = top_newArr->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType oldArr_elem = top_oldArr->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5534,1 +5537,1 @@\n-  BasicType src_elem = src_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType src_elem = top_src->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5623,1 +5626,1 @@\n-  BasicType src_elem = src_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType src_elem = top_src->klass()->as_array_klass()->element_type()->basic_type();\n@@ -5716,1 +5719,1 @@\n-  BasicType src_elem = src_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType src_elem = top_src->klass()->as_array_klass()->element_type()->basic_type();\n@@ -6553,1 +6556,1 @@\n-  BasicType src_elem = src_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType src_elem = top_src->klass()->as_array_klass()->element_type()->basic_type();\n@@ -6645,1 +6648,1 @@\n-  BasicType src_elem = src_type->isa_aryptr()->klass()->as_array_klass()->element_type()->basic_type();\n+  BasicType src_elem = top_src->klass()->as_array_klass()->element_type()->basic_type();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":29,"deletions":26,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8300079\n+ * @summary Verify that String.copyValueOf properly handles null input with intrinsified helper methods.\n+ * @run main\/othervm -XX:-TieredCompilation -Xcomp\n+ *                   -XX:CompileCommand=compileonly,compiler.intrinsics.string.TestCopyValueOf::test\n+ *                   -XX:CompileCommand=dontinline,java.lang.String::rangeCheck\n+ *                   compiler.intrinsics.string.TestCopyValueOf\n+ *\/\n+\n+package compiler.intrinsics.string;\n+\n+public class TestCopyValueOf {\n+\n+    public static boolean test() {\n+        try {\n+            String.copyValueOf(null, 42, 43);\n+        } catch (NullPointerException e) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Warmup\n+        char data[] = {42};\n+        String.copyValueOf(data, 0, 1);\n+\n+        if (!test()) {\n+            throw new RuntimeException(\"Unexpected result\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/string\/TestCopyValueOf.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}