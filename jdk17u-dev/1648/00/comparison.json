{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,3 @@\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.x509\n+ * @modules java.base\/sun.security.tools.keytool\n@@ -29,2 +32,13 @@\n-import java.io.File;\n-import java.util.jar.JarFile;\n+import jdk.security.jarsigner.JarSigner;\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.x509.X500Name;\n+\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n@@ -32,0 +46,2 @@\n+import java.util.jar.JarFile;\n+import java.util.jar.JarOutputStream;\n@@ -33,1 +49,4 @@\n-import java.util.Enumeration;\n+import java.util.zip.ZipFile;\n+\n+import static jdk.test.lib.Utils.runAndCheckException;\n+\n@@ -36,6 +55,0 @@\n-    private static void Unreached (Object o)\n-        throws Exception\n-    {\n-        \/\/ Should never get here\n-        throw new Exception (\"Expected exception was not thrown\");\n-    }\n@@ -44,6 +57,0 @@\n-        File f = new File(System.getProperty(\"test.src\", \".\"), \"thawjar.jar\");\n-        JarFile jf = new JarFile(f);\n-        try {\n-            \/\/ Read entries via Enumeration\n-            for (Enumeration e = jf.entries(); e.hasMoreElements();)\n-                jf.getInputStream((ZipEntry) e.nextElement());\n@@ -51,3 +58,4 @@\n-            \/\/ Read entry by name\n-            ZipEntry ze = jf.getEntry(\"getprop.class\");\n-            JarEntry je = jf.getJarEntry(\"getprop.class\");\n+        Path j = createJar();\n+        Path s = signJar(j, keyEntry(\"cn=duke\"));\n+\n+        try (JarFile jf = new JarFile(s.toFile())) {\n@@ -55,3 +63,8 @@\n-            \/\/ Make sure we throw NPE on null objects\n-            try { Unreached (jf.getEntry(null)); }\n-            catch (NullPointerException e) {}\n+            for (JarEntry e: Collections.list(jf.entries())) {\n+                \/\/ Reading entry to trigger verification\n+                jf.getInputStream(e).transferTo(OutputStream.nullOutputStream());\n+                \/\/ Check that all regular files are signed by duke\n+                if (!e.getName().startsWith(\"META-INF\/\")) {\n+                    checkSignedBy(e, \"cn=duke\");\n+                }\n+            }\n@@ -59,2 +72,3 @@\n-            try { Unreached (jf.getJarEntry(null)); }\n-            catch (NullPointerException e) {}\n+            \/\/ Read ZIP and JAR entries by name\n+            Objects.requireNonNull(jf.getEntry(\"getprop.class\"));\n+            Objects.requireNonNull(jf.getJarEntry(\"getprop.class\"));\n@@ -62,2 +76,4 @@\n-            try { Unreached (jf.getInputStream(null)); }\n-            catch (NullPointerException e) {}\n+            \/\/ Make sure we throw NPE on null parameters\n+            runAndCheckException(() -> jf.getEntry(null), NullPointerException.class);\n+            runAndCheckException(() -> jf.getJarEntry(null), NullPointerException.class);\n+            runAndCheckException(() -> jf.getInputStream(null), NullPointerException.class);\n@@ -70,0 +86,56 @@\n+\n+    \/\/ Check that a JAR entry is signed by an expected DN\n+    private static void checkSignedBy(JarEntry e, String expectedDn) throws Exception {\n+        Certificate[] certs = e.getCertificates();\n+        if (certs == null || certs.length == 0) {\n+            throw new Exception(\"JarEntry has no certificates: \" + e.getName());\n+        }\n+\n+        if (certs[0] instanceof X509Certificate x) {\n+            String name = x.getSubjectX500Principal().getName();\n+            if (!name.equalsIgnoreCase(expectedDn)) {\n+                throw new Exception(\"Expected entry signed by %s, was %s\".formatted(name, expectedDn));\n+            }\n+        } else {\n+            throw new Exception(\"Expected JarEntry.getCertificate to return X509Certificate\");\n+        }\n+    }\n+\n+    private static Path createJar() throws Exception {\n+        Path j = Path.of(\"unsigned.jar\");\n+        try (JarOutputStream out = new JarOutputStream(Files.newOutputStream(j))){\n+            out.putNextEntry(new JarEntry(\"getprop.class\"));\n+            out.write(new byte[] {(byte) 0XCA, (byte) 0XFE, (byte) 0XBA, (byte) 0XBE});\n+        }\n+        return j;\n+    }\n+\n+    private static Path signJar(Path j, KeyStore.PrivateKeyEntry entry) throws Exception {\n+        Path s = Path.of(\"signed.jar\");\n+\n+        JarSigner signer = new JarSigner.Builder(entry)\n+                .signerName(\"zigbert\")\n+                .digestAlgorithm(\"SHA-256\")\n+                .signatureAlgorithm(\"SHA256withRSA\")\n+                .build();\n+\n+        try (ZipFile zip = new ZipFile(j.toFile());\n+            OutputStream out = Files.newOutputStream(s)) {\n+            signer.sign(zip, out);\n+        }\n+\n+        return s;\n+    }\n+\n+    private static KeyStore.PrivateKeyEntry keyEntry(String dname) throws Exception {\n+\n+        CertAndKeyGen gen = new CertAndKeyGen(\"RSA\", \"SHA256withRSA\");\n+\n+        gen.generate(1048); \/\/ Small key size makes test run faster\n+\n+        var oneDay = TimeUnit.DAYS.toSeconds(1);\n+        Certificate cert = gen.getSelfCertificate(new X500Name(dname), oneDay);\n+\n+        return new KeyStore.PrivateKeyEntry(gen.getPrivateKey(),\n+                new Certificate[] {cert});\n+    }\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/VerifySignedJar.java","additions":98,"deletions":26,"binary":false,"changes":124,"status":"modified"},{"filename":"test\/jdk\/java\/util\/jar\/JarFile\/thawjar.jar","binary":true,"status":"deleted"}]}