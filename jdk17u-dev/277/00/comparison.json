{"files":[{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1081,2 +1081,4 @@\n-purposes only and may cause intermittent failures due to the use of\n-address space layout randomization by the operation system.\n+purposes only.\n+It may cause the VM to unexpectedly exit during start\\-up when the CDS\n+archive cannot be used (for example, when certain VM parameters are\n+changed, or when a different JDK is used).\n@@ -5290,2 +5292,7 @@\n-Application Class Data Sharing (AppCDS) extends class data sharing (CDS)\n-to enable application classes to be placed in a shared archive.\n+Application Class Data Sharing (AppCDS) stores classes used by your\n+applications in an archive file.\n+Since these classes are stored in a format that can be loaded very\n+quickly (compared to classes stored in a JAR file), AppCDS can improve\n+the start\\-up time of your applications.\n+In addition, AppCDS can reduce the runtime memory footprint by sharing\n+parts of these classes across multiple processes.\n@@ -5293,12 +5300,9 @@\n-In addition to the core library classes, AppCDS supports \\f[B]Class Data\n-Sharing\\f[R]\n-[https:\/\/docs.oracle.com\/en\/java\/javase\/12\/vm\/class\\-data\\-sharing.html#GUID\\-7EAA3411\\-8CF0\\-4D19\\-BD05\\-DF5E1780AA91]\n-from the following locations:\n-.IP \\[bu] 2\n-Platform classes from the runtime image\n-.IP \\[bu] 2\n-Application classes from the runtime image\n-.IP \\[bu] 2\n-Application classes from the class path\n-.IP \\[bu] 2\n-Application classes from the module path\n+Classes in the CDS archive are stored in an optimized format that\\[aq]s\n+about 2 to 5 times larger than classes stored in JAR files or the JDK\n+runtime image.\n+Therefore, it\\[aq]s a good idea to archive only those classes that are\n+actually used by your application.\n+These usually are just a small portion of all available classes.\n+For example, your application may use only a few APIs provided by a\n+large library.\n+.SS Using CDS Archives\n@@ -5306,3 +5310,6 @@\n-Archiving application classes provides better start up time at runtime.\n-When running multiple JVM processes, AppCDS also reduces the runtime\n-footprint with memory sharing for read\\-only metadata.\n+By default, in most JDK distributions, unless \\f[CB]\\-Xshare:off\\f[R] is\n+specified, the JVM starts up with a default CDS archive, which is\n+usually located in \\f[CB]JAVA_HOME\/lib\/server\/classes.jsa\\f[R] (or\n+\\f[CB]JAVA_HOME\\\\bin\\\\server\\\\classes.jsa\\f[R] on Windows).\n+This archive contains about 1300 core library classes that are used by\n+most applications.\n@@ -5310,1 +5317,4 @@\n-CDS\/AppCDS supports archiving classes from JAR files only.\n+To use CDS for the exact set of classes used by your application, you\n+can use the \\f[CB]\\-XX:SharedArchiveFile\\f[R] option, which has the\n+general form:\n+.RS\n@@ -5312,5 +5322,2 @@\n-Prior to JDK 11, a non\\-empty directory was reported as a fatal error in\n-the following conditions:\n-.IP \\[bu] 2\n-For base CDS, a non\\-empty directory cannot exist in the\n-\\f[CB]\\-Xbootclasspath\/a\\f[R] path\n+\\f[CB]\\-XX:SharedArchiveFile=<static_archive>:<dynamic_archive>\\f[R]\n+.RE\n@@ -5318,8 +5325,1 @@\n-With \\f[CB]\\-XX:+UseAppCDS\\f[R], a non\\-empty directory could not exist in\n-the \\f[CB]\\-Xbootclasspath\/a\\f[R] path, class path, and module path.\n-.PP\n-In JDK 11 and later, \\f[CB]\\-XX:+UseAppCDS\\f[R] is obsolete and the\n-behavior for a non\\-empty directory is based on the class types in the\n-classlist.\n-A non\\-empty directory is reported as a fatal error in the following\n-conditions:\n+The \\f[CB]<static_archive>\\f[R] overrides the default CDS archive.\n@@ -5327,3 +5327,2 @@\n-If application classes or platform classes are not loaded, dump time\n-only reports an error if a non\\-empty directory exists in\n-\\f[CB]\\-Xbootclasspath\/a\\f[R] path\n+The \\f[CB]<dynamic_archive>\\f[R] provides additional classes that can be\n+loaded on top of those in the \\f[CB]<static_archive>\\f[R].\n@@ -5331,10 +5330,2 @@\n-If application classes or platform classes are loaded, dump time reports\n-an error for a non\\-empty directory that exists in\n-\\f[CB]\\-Xbootclasspath\/a\\f[R] path, class path, or module path\n-.PP\n-In JDK 11 and later, using\n-\\f[CB]\\-XX:DumpLoadedClassList=\\f[R]\\f[I]class_list_file\\f[R] results a\n-generated classlist with all classes (both system library classes and\n-application classes) included.\n-You no longer have to specify \\f[CB]\\-XX:+UseAppCDS\\f[R] with\n-\\f[CB]\\-XX:DumpLoadedClassList\\f[R] to produce a complete class list.\n+On Windows, the above path delimiter \\f[CB]:\\f[R] should be replaced with\n+\\f[CB];\\f[R]\n@@ -5342,4 +5333,3 @@\n-In JDK 11 and later, because \\f[CB]UseAppCDS\\f[R] is obsolete,\n-\\f[CB]SharedArchiveFile\\f[R] becomes a product flag by default.\n-Specifying \\f[CB]+UnlockDiagnosticVMOptions\\f[R] for\n-\\f[CB]SharedArchiveFile\\f[R] is no longer needed in any configuration.\n+(The names \"static\" and \"dyanmic\" are used for historical reasons.\n+The only significance is that the \"static\" archive is loaded first and\n+the \"dynamic\" archive is loaded second).\n@@ -5347,4 +5337,3 @@\n-Class Data Sharing (CDS)\/AppCDS does not support archiving array classes\n-in a class list.\n-When an array in the class list is encountered, CDS dump time gives the\n-explicit error message:\n+The JVM can use up to two archives.\n+To use only a single \\f[CB]<static_archive>\\f[R], you can omit the\n+\\f[CB]<dynamic_archive>\\f[R] portion:\n@@ -5353,1 +5342,1 @@\n-\\f[CB]Preload\\ Warning:\\ Cannot\\ find\\f[R] \\f[I]array_name\\f[R]\n+\\f[CB]\\-XX:SharedArchiveFile=<static_archive>\\f[R]\n@@ -5356,26 +5345,3 @@\n-Although an array in the class list is not allowed, some array classes\n-can still be created at CDS\/AppCDS dump time.\n-Those arrays are created during the execution of the Java code used by\n-the Java class loaders (\\f[CB]PlatformClassLoader\\f[R] and the system\n-class loader) to load classes at dump time.\n-The created arrays are archived with the rest of the loaded classes.\n-.SS Extending Class Data Sharing to Support the Module Path\n-.PP\n-In JDK 11, Class Data Sharing (CDS) has been improved to support\n-archiving classes from the module path.\n-.IP \\[bu] 2\n-To create a CDS archive using the \\f[CB]\\-\\-module\\-path\\f[R] VM option,\n-use the following command line syntax:\n-.RS 2\n-.RS\n-.PP\n-\\f[CB]java\\ \\-Xshare:dump\\ \\-XX:SharedClassListFile=\\f[R]\\f[I]class_list_file\\f[R]\n-\\f[CB]\\-XX:SharedArchiveFile=\\f[R]\\f[I]shared_archive_file\\f[R]\n-\\f[CB]\\-\\-module\\-path=\\f[R]\\f[I]path_to_modular_jar\\f[R] \\f[CB]\\-m\\f[R]\n-\\f[I]module_name\\f[R]\n-.RE\n-.RE\n-.IP \\[bu] 2\n-To run with a CDS archive using the \\f[CB]\\-\\-module\\-path\\f[R] VM option,\n-use the following the command line syntax:\n-.RS 2\n+For convenience, the \\f[CB]<dynamic_archive>\\f[R] records the location of\n+the \\f[CB]<static_archive>\\f[R].\n+Therefore, you can omit the \\f[CB]<static_archive>\\f[R] by saying only:\n@@ -5384,4 +5350,1 @@\n-\\f[CB]java\\ \\-XX:SharedArchiveFile=\\f[R]\\f[I]shared_archive_file\\f[R]\n-\\f[CB]\\-\\-module\\-path=\\f[R]\\f[I]path_to_modular_jar\\f[R] \\f[CB]\\-m\\f[R]\n-\\f[I]module_name\\f[R]\n-.RE\n+\\f[CB]\\-XX:SharedArchiveFile=<dynamic_archive>\\f[R]\n@@ -5389,0 +5352,1 @@\n+.SS Creating CDS Archives\n@@ -5390,119 +5354,1 @@\n-The following table describes how the VM options related to module paths\n-can be used along with the \\f[CB]\\-Xshare\\f[R] option.\n-.PP\n-.TS\n-tab(@);\n-l l l.\n-T{\n-Option\n-T}@T{\n-\\-Xshare:dump\n-T}@T{\n-\\-Xshare:{on,auto}\n-T}\n-_\n-T{\n-\\f[CB]\\-\\-module\\-path\\f[R][1] \\f[I]mp\\f[R]\n-T}@T{\n-Allowed\n-T}@T{\n-Allowed[2]\n-T}\n-T{\n-\\f[CB]\\-\\-module\\f[R]\n-T}@T{\n-Allowed\n-T}@T{\n-Allowed\n-T}\n-T{\n-\\f[CB]\\-\\-add\\-module\\f[R]\n-T}@T{\n-Allowed\n-T}@T{\n-Allowed\n-T}\n-T{\n-\\f[CB]\\-\\-upgrade\\-module\\-path\\f[R][3]\n-T}@T{\n-Disallowed (exits if specified)\n-T}@T{\n-Allowed (disables CDS)\n-T}\n-T{\n-\\f[CB]\\-\\-patch\\-module\\f[R][4]\n-T}@T{\n-Disallowed (exits if specified)\n-T}@T{\n-Allowed (disables CDS)\n-T}\n-T{\n-\\f[CB]\\-\\-limit\\-modules\\f[R][5]\n-T}@T{\n-Disallowed (exits if specified)\n-T}@T{\n-Allowed (disables CDS)\n-T}\n-.TE\n-.PP\n-[1] Although there are two ways of specifying a module in a\n-\\f[CB]\\-\\-module\\-path\\f[R], that is, modular JAR or exploded module, only\n-modular JARs are supported.\n-.PP\n-[2] Different \\f[I]mp\\f[R] can be specified during dump time versus run\n-time.\n-If an archived class K was loaded from \\f[CB]mp1.jar\\f[R] at dump time,\n-but changes in \\f[I]mp\\f[R] cause it to be available from a different\n-\\f[CB]mp2.jar\\f[R] at run time, then the archived version of K will be\n-disregarded at run time; K will be loaded dynamically.\n-.PP\n-[3] Currently, only two system modules are upgradeable\n-(\\f[CB]java.compiler\\f[R] and \\f[CB]jdk.internal.vm.compiler\\f[R]).\n-However, these modules are seldom upgraded in production software.\n-.PP\n-[4] As documented in JEP 261, using \\f[CB]\\-\\-patch\\-module\\f[R] is\n-strongly discouraged for production use.\n-.PP\n-[5] \\f[CB]\\-\\-limit\\-modules\\f[R] is intended for testing purposes.\n-It is seldom used in production software.\n-.PP\n-If \\f[CB]\\-\\-upgrade\\-module\\-path\\f[R], \\f[CB]\\-\\-patch\\-module\\f[R], or\n-\\f[CB]\\-\\-limit\\-modules\\f[R] is specified at dump time, an error will be\n-printed and the JVM will exit.\n-For example, if the \\f[CB]\\-\\-limit\\-modules\\f[R] option is specified at\n-dump time, the user will see the following error:\n-.IP\n-.nf\n-\\f[CB]\n-Error\\ occurred\\ during\\ initialization\\ of\\ VM\n-Cannot\\ use\\ the\\ following\\ option\\ when\\ dumping\\ the\\ shared\\ archive:\\ \\-\\-limit\\-modules\n-\\f[R]\n-.fi\n-.PP\n-If \\f[CB]\\-\\-upgrade\\-module\\-path\\f[R], \\f[CB]\\-\\-patch\\-module\\f[R], or\n-\\f[CB]\\-\\-limit\\-modules\\f[R] is specified at run time, a warning message\n-will be printed indicating that CDS is disabled.\n-For example, if the \\f[CB]\\-\\-limit\\-modules\\f[R] options is specified at\n-run time, the user will see the following warning:\n-.IP\n-.nf\n-\\f[CB]\n-Java\\ HotSpot(TM)\\ 64\\-Bit\\ Server\\ VM\\ warning:\\ CDS\\ is\\ disabled\\ when\\ the\\ \\-\\-limit\\-modules\\ option\\ is\\ specified.\n-\\f[R]\n-.fi\n-.PP\n-Several other noteworthy things include:\n-.IP \\[bu] 2\n-Any valid combinations of \\f[CB]\\-cp\\f[R] and \\f[CB]\\-\\-module\\-path\\f[R]\n-are supported.\n-.IP \\[bu] 2\n-A non\\-empty directory in the module path causes a fatal error.\n-The user will see the following error messages:\n-.RS 2\n-.IP\n-.nf\n-\\f[CB]\n-Error:\\ non\\-empty\\ directory\\ <directory>\\ Hint:\\ enable\\ \\-Xlog:class+path=info\\ to\\ diagnose\\ the\\ failure\\ Error\\ occurred\\ during\\ initialization\\ of\\ VM\\ Cannot\\ have\\ non\\-empty\\ directory\\ in\\ paths\n-\\f[R]\n-.fi\n-.RE\n+CDS archives can be created with several methods:\n@@ -5510,3 +5356,1 @@\n-Unlike the class path, there\\[aq]s no restriction that the module path\n-at dump time must be equal to or be a prefix of the module path at run\n-time.\n+\\f[CB]\\-Xshare:dump\\f[R]\n@@ -5514,2 +5358,1 @@\n-The archive is invalidated if an existing JAR in the module path is\n-updated after archive generation.\n+\\f[CB]\\-XX:ArchiveClassesAtExit\\f[R]\n@@ -5517,16 +5360,1 @@\n-Removing a JAR from the module path does not invalidate the shared\n-archive.\n-Archived classes from the removed JAR are not used at runtime.\n-.SS Dynamic CDS archive\n-.PP\n-Dynamic CDS archive extends AppCDS to allow archiving of classes when a\n-Java application exits.\n-It improves the usability of AppCDS by eliminating the trial run step\n-for creating a class list for each application.\n-The archived classes include all loaded application classes and library\n-classes that are not present in the default CDS archive which is\n-included in the JDK.\n-.PP\n-A base archive is required when creating a dynamic archive.\n-If the base archive is not specified, the default CDS archive is used as\n-the base archive.\n+\\f[CB]jcmd\\ VM.cds\\f[R]\n@@ -5534,4 +5362,4 @@\n-To create a dynamic CDS archive with the default CDS archive as the base\n-archive, just add the\n-\\f[CB]\\-XX:ArchiveClassesAtExit=<dynamic\\ archive>\\f[R] option to the\n-command line for running the Java application.\n+One common operation in all these methods is a \"trial run\", where you\n+run the application once to determine the classes that should be stored\n+in the archive.\n+.SS Creating a Static CDS Archive File with \\-Xshare:dump\n@@ -5539,38 +5367,2 @@\n-If the default CDS archive does not exist, the VM will exit with the\n-following error:\n-.IP\n-.nf\n-\\f[CB]\n-ArchiveClassesAtExit\\ not\\ supported\\ when\\ base\\ CDS\\ archive\\ is\\ not\\ loaded\n-\\f[R]\n-.fi\n-.PP\n-To run the Java application using a dynamic CDS archive, just add the\n-\\f[CB]\\-XX:SharedArchiveFile=<dynamic\\ archive>\\f[R] option to the command\n-line for running the Java application.\n-.PP\n-The base archive is not required to be specified in the command line.\n-The base archive information, including its name and full path, will be\n-retrieved from the dynamic archive header.\n-Note that the user could also use the \\f[CB]\\-XX:SharedArchiveFile\\f[R]\n-option for specifying a regular AppCDS archive.\n-Therefore, the specified archive in the \\f[CB]\\-XX:SharedArchiveFile\\f[R]\n-option could be either a regular or dynamic archive.\n-During VM start up the specified archive header will be read.\n-If \\f[CB]\\-XX:SharedArchiveFile\\f[R] refers to a regular archive, then the\n-behavior will be unchanged.\n-If \\f[CB]\\-XX:SharedArchiveFile\\f[R] refers to a dynamic archive, the VM\n-will retrieve the base archive location from the dynamic archive.\n-If the dynamic archive was created with the default CDS archive, then\n-the current default CDS archive will be used, and will be found relative\n-to the current run time environment.\n-.PP\n-Please refer to \\f[B]JDK\\-8221706\\f[R]\n-[https:\/\/bugs.openjdk.java.net\/browse\/JDK\\-8221706] for details on error\n-checking during dynamic CDS archive dump time and run time.\n-.SS Creating a Shared Archive File and Using It to Run an Application\n-.SS AppCDS archive\n-.PP\n-The following steps create a shared archive file that contains all the\n-classes used by the \\f[CB]test.Hello\\f[R] application.\n-The last step runs the application with the shared archive file.\n+The following steps create a static CDS archive file that contains all\n+the classes used by the \\f[CB]test.Hello\\f[R] application.\n@@ -5588,2 +5380,2 @@\n-Note that the classpath specified by the \\f[CB]\\-cp\\f[R] parameter must\n-contain only JAR files.\n+The classpath specified by the \\f[CB]\\-cp\\f[R] parameter must contain only\n+JAR files.\n@@ -5592,1 +5384,1 @@\n-Create a shared archive, named \\f[CB]hello.jsa\\f[R], that contains all the\n+Create a static archive, named \\f[CB]hello.jsa\\f[R], that contains all the\n@@ -5599,3 +5391,0 @@\n-.PP\n-Note that the classpath used at archive creation time must be the same\n-as (or a prefix of) the classpath used at run time.\n@@ -5604,1 +5393,1 @@\n-Run the application \\f[CB]test.Hello\\f[R] with the shared archive\n+Run the application \\f[CB]test.Hello\\f[R] with the archive\n@@ -5618,1 +5407,1 @@\n-\\f[CB]java\\ \\-XX:SharedArchiveFile=hello.jsa\\ \\-cp\\ hello.jar\\ \\-verbose:class\\ test.Hello\\f[R]\n+\\f[CB]java\\ \\-XX:SharedArchiveFile=hello.jsa\\ \\-cp\\ hello.jar\\ \\-Xlog:class+load\\ test.Hello\\f[R]\n@@ -5622,6 +5411,4 @@\n-.IP\n-.nf\n-\\f[CB]\n-Loaded\\ test.Hello\\ from\\ shared\\ objects\\ file\\ by\\ sun\/misc\/Launcher$AppClassLoader\n-\\f[R]\n-.fi\n+.RS\n+.PP\n+\\f[CB][info][class,load]\\ test.Hello\\ source:\\ shared\\ objects\\ file\\f[R]\n+.RE\n@@ -5629,1 +5416,8 @@\n-.SS Dynamic CDS archive\n+.SS Creating a Dynamic CDS Archive File with \\-XX:SharedArchiveFile\n+.PP\n+Advantages of dynamic CDS archives are:\n+.IP \\[bu] 2\n+They usually use less disk space, since they don\\[aq]t need to store the\n+classes that are already in the static archive.\n+.IP \\[bu] 2\n+They are created with one fewer step than the comparable static archive.\n@@ -5632,3 +5426,2 @@\n-classes used by the \\f[CB]test.Hello\\f[R] application and are not included\n-in the default CDS archive.\n-The second step runs the application with the dynamic CDS archive.\n+classes that are used by the \\f[CB]test.Hello\\f[R] application, excluding\n+those that are already in the default CDS archive.\n@@ -5644,3 +5437,0 @@\n-.PP\n-Note that the classpath used at archive creation time must be the same\n-as (or a prefix of) the classpath used at run time.\n@@ -5662,41 +5452,3 @@\n-To automate the above steps 1 and 2, one can write a script such as the\n-following:\n-.IP\n-.nf\n-\\f[CB]\n-\\ \\ \\ \\ ARCHIVE=hello.jsa\n-\\ \\ \\ \\ if\\ test\\ \\-f\\ $ARCHIVE;\\ then\n-\\ \\ \\ \\ \\ \\ \\ \\ FLAG=\"\\-XX:SharedArchiveFile=$ARCHIVE\"\n-\\ \\ \\ \\ else\n-\\ \\ \\ \\ \\ \\ \\ \\ FLAG=\"\\-XX:ArchiveClassesAtExit=$ARCHIVE\"\n-\\ \\ \\ \\ fi\n-\\ \\ \\ \\ $JAVA_HOME\/bin\/java\\ \\-cp\\ hello.jar\\ $FLAG\\ test.Hello\n-\\f[R]\n-.fi\n-.PP\n-Like an AppCDS archive, the archive needs to be re\\-generated if the\n-Java version has changed.\n-The above script could be adjusted to account for the Java version as\n-follows:\n-.IP\n-.nf\n-\\f[CB]\n-\\ \\ \\ \\ ARCHIVE=hello.jsa\n-\\ \\ \\ \\ VERSION=foo.version\n-\\ \\ \\ \\ if\\ test\\ \\-f\\ $ARCHIVE\\ \\-a\\ \\-f\\ $VERSION\\ &&\\ cmp\\ \\-s\\ $VERSION\\ $JAVA_HOME\/release;\\ then\n-\\ \\ \\ \\ \\ \\ \\ \\ FLAG=\"\\-XX:SharedArchiveFile=$ARCHIVE\"\n-\\ \\ \\ \\ else\n-\\ \\ \\ \\ \\ \\ \\ \\ FLAG=\"\\-XX:ArchiveClassesAtExit=$ARCHIVE\"\n-\\ \\ \\ \\ \\ \\ \\ \\ cp\\ \\-f\\ $JAVA_HOME\/release\\ $VERSION\n-\\ \\ \\ \\ fi\n-\\ \\ \\ \\ $JAVA_HOME\/bin\/java\\ \\-cp\\ hello.jar\\ $FLAG\\ test.Hello\n-\\f[R]\n-.fi\n-.PP\n-Currently, we don\\[aq]t support concurrent dumping operations to the\n-same CDS archive.\n-Care should be taken to avoid multiple writers to the same CDS archive.\n-.PP\n-The user could also create a dynamic CDS archive with a specific base\n-archive, e.g.\n-named as \\f[CB]base.jsa\\f[R] as follows:\n+It\\[aq]s also possible to create a dynamic CDS archive with a\n+non\\-default static CDS archive.\n+E.g.,\n@@ -5708,2 +5460,1 @@\n-To run the application using the dynamic CDS archive \\f[CB]hello.jsa\\f[R]\n-and a specific base CDS archive \\f[CB]base.jsa\\f[R]:\n+To run the application using this dynamic CDS archive:\n@@ -5715,42 +5466,2 @@\n-Note that on Windows, the above path delimiter \\f[CB]:\\f[R] should be\n-replaced with \\f[CB];\\f[R].\n-.PP\n-The above command for specifying a base archive is useful if the base\n-archive used for creating the dynamic archive has been moved.\n-Normally, just specifying the dynamic archive should be sufficient since\n-the base archive info can be retrieved from the dynamic archive header.\n-.SS Sharing a Shared Archive Across Multiple Application Processes\n-.PP\n-You can share the same archive file across multiple applications\n-processes.\n-This reduces memory usage because the archive is memory\\-mapped into the\n-address space of the processes.\n-The operating system automatically shares the read\\-only pages across\n-these processes.\n-.PP\n-The following steps demonstrate how to create a common archive that can\n-be shared by different applications.\n-Classes from \\f[CB]common.jar\\f[R], \\f[CB]hello.jar\\f[R] and \\f[CB]hi.jar\\f[R]\n-are archived in the \\f[CB]common.jsa\\f[R] because they are all in the\n-classpath during the archiving step (step 3).\n-.PP\n-To include classes from \\f[CB]hello.jar\\f[R] and \\f[CB]hi.jar\\f[R], the\n-\\f[CB]\\&.jar\\f[R] files must be added to the classpath specified by the\n-\\f[CB]\\-cp\\f[R] parameter.\n-.IP \"1.\" 3\n-Create a list of all classes used by the \\f[CB]Hello\\f[R] application and\n-another list for the \\f[CB]Hi\\f[R] application:\n-.RS 4\n-.RS\n-.PP\n-\\f[CB]java\\ \\-XX:DumpLoadedClassList=hello.classlist\\ \\-cp\\ common.jar:hello.jar\\ Hello\\f[R]\n-.RE\n-.RS\n-.PP\n-\\f[CB]java\\ \\-XX:DumpLoadedClassList=hi.classlist\\ \\-cp\\ common.jar:hi.jar\\ Hi\\f[R]\n-.RE\n-.RE\n-.IP \"2.\" 3\n-Create a single list of classes used by all the applications that will\n-share the shared archive file.\n-.RS 4\n+(On Windows, the above path delimiter \\f[CB]:\\f[R] should be replaced with\n+\\f[CB];\\f[R])\n@@ -5758,3 +5469,1 @@\n-\\f[B]Linux and macOS\\f[R] The following commands combine the files\n-\\f[CB]hello.classlist\\f[R] and \\f[CB]hi.classlist\\f[R] into one file,\n-\\f[CB]common.classlist\\f[R]:\n+As mention above, the name of the static archive can be skipped:\n@@ -5763,1 +5472,1 @@\n-\\f[CB]cat\\ hello.classlist\\ hi.classlist\\ >\\ common.classlist\\f[R]\n+\\f[CB]java\\ \\-XX:SharedArchiveFile=hello.jsa\\ \\-cp\\ hello.jar\\ Hello\\f[R]\n@@ -5765,0 +5474,1 @@\n+.SS Creating CDS Archive Files with jcmd\n@@ -5766,4 +5476,4 @@\n-\\f[B]Windows\\f[R] The following commands combine the files\n-\\f[CB]hello.classlist\\f[R] and \\f[CB]hi.classlist\\f[R] into one file,\n-\\f[CB]common.classlist\\f[R]:\n-.RS\n+The previous two sections require you to modify the application\\[aq]s\n+start\\-up script in order to create a CDS archive.\n+Sometimes this could be difficult, for example, if the application\\[aq]s\n+class path is set up by complex routines.\n@@ -5771,7 +5481,3 @@\n-\\f[CB]type\\ hello.classlist\\ hi.classlist\\ >\\ common.classlist\\f[R]\n-.RE\n-.RE\n-.IP \"3.\" 3\n-Create a shared archive named \\f[CB]common.jsa\\f[R] that contains all the\n-classes in \\f[CB]common.classlist\\f[R]:\n-.RS 4\n+The \\f[CB]jcmd\\ VM.cds\\f[R] command provides a less intrusive way for\n+creating a CDS archive by connecting to a running JVM process.\n+You can create either a static:\n@@ -5780,1 +5486,1 @@\n-\\f[CB]java\\ \\-Xshare:dump\\ \\-XX:SharedArchiveFile=common.jsa\\ \\-XX:SharedClassListFile=common.classlist\\ \\-cp\\ common.jar:hello.jar:hi.jar\\f[R]\n+\\f[CB]jcmd\\ <pid>\\ VM.cds\\ static_dump\\ my_static_archive.jsa\\f[R]\n@@ -5783,11 +5489,1 @@\n-The classpath parameter used is the common class path prefix shared by\n-the \\f[CB]Hello\\f[R] and \\f[CB]Hi\\f[R] applications.\n-.RE\n-.IP \"4.\" 3\n-Run the \\f[CB]Hello\\f[R] and \\f[CB]Hi\\f[R] applications with the same shared\n-archive:\n-.RS 4\n-.RS\n-.PP\n-\\f[CB]java\\ \\-XX:SharedArchiveFile=common.jsa\\ \\-cp\\ common.jar:hello.jar:hi.jar\\ Hello\\f[R]\n-.RE\n+or a dynamic archive:\n@@ -5796,2 +5492,1 @@\n-\\f[CB]java\\ \\-XX:SharedArchiveFile=common.jsa\\ \\-cp\\ common.jar:hello.jar:hi.jar\\ Hi\\f[R]\n-.RE\n+\\f[CB]jcmd\\ <pid>\\ VM.cds\\ dynamic_dump\\ my_dynamic_archive.jsa\\f[R]\n@@ -5799,1 +5494,0 @@\n-.SS Specifying Additional Shared Data Added to an Archive File\n@@ -5801,2 +5495,3 @@\n-The \\f[CB]SharedArchiveConfigFile\\f[R] option is used to specify\n-additional shared data to add to the archive file.\n+To use the resulting archive file in a subsequent run of the application\n+without modifying the application\\[aq]s start\\-up script, you can use\n+the following technique:\n@@ -5805,1 +5500,1 @@\n-\\f[CB]\\-XX:SharedArchiveConfigFile=\\f[R]\\f[I]shared_config_file\\f[R]\n+\\f[CB]env\\ JAVA_TOOL_OPTIONS=\\-XX:SharedArchiveFile=my_static_archive.jsa\\ bash\\ app_start.sh\\f[R]\n@@ -5808,28 +5503,4 @@\n-JDK 9 and later supports adding both symbols and string objects to an\n-archive for memory sharing when you have multiple JVM processes running\n-on the same host.\n-An example of this is having multiple JVM processes that use the same\n-set of Java EE classes.\n-When these common classes are loaded and used, new symbols and strings\n-may be created and added to the JVM\\[aq]s internal \"symbol\" and \"string\"\n-tables.\n-At runtime, the symbols or string objects mapped from the archive file\n-can be shared across multiple JVM processes, resulting in a reduction of\n-overall memory usage.\n-In addition, archiving strings also provides added performance benefits\n-in both startup time and runtime execution.\n-.PP\n-In JDK 10 and later, CONSTANT_String entries in archived classes are\n-resolved to interned String objects at dump time, and all interned\n-String objects are archived.\n-However, even though all CONSTANT_String literals in all archived\n-classes are resolved, it might still beneficial to add additional\n-strings that are not string literals in class files, but are likely to\n-be used by your application at run time.\n-.PP\n-Symbol data should be generated by the \\f[CB]jcmd\\f[R] tool attaching to a\n-running JVM process.\n-See \\f[B]jcmd\\f[R].\n-.PP\n-The following is an example of the symbol dumping command in\n-\\f[CB]jcmd\\f[R]:\n+Note: to use \\f[CB]jcmd\\ <pid>\\ VM.cds\\ dynamic_dump\\f[R], the JVM process\n+identified by \\f[CB]<pid>\\f[R] must be started with\n+\\f[CB]\\-XX:+RecordDynamicDumpInfo\\f[R], which can also be passed to the\n+application start\\-up script with the same technique:\n@@ -5838,1 +5509,1 @@\n-\\f[CB]jcmd\\f[R] \\f[I]pid\\f[R] \\f[CB]VM.symboltable\\ \\-verbose\\f[R]\n+\\f[CB]env\\ JAVA_TOOL_OPTIONS=\\-XX:+RecordDynamicDumpInfo\\ bash\\ app_start.sh\\f[R]\n@@ -5840,34 +5511,22 @@\n-.RS\n-.PP\n-\\f[B]Note:\\f[R] The first line (process ID) and the second line\n-(\\f[CB]\\@VERSION\\ ...\\f[R]) of this \\f[CB]jcmd\\f[R] output should be\n-excluded from the configuration file.\n-.RE\n-.SS Example of a Configuration File\n-.PP\n-The following is an example of a configuration file:\n-.IP\n-.nf\n-\\f[CB]\n-VERSION:\\ 1.0\n-\\@SECTION:\\ Symbol\n-10\\ \\-1:\\ linkMethod\n-\\f[R]\n-.fi\n-.PP\n-In the configuration file example, the \\f[CB]\\@SECTION:\\ Symbol\\f[R] entry\n-uses the following format:\n-.RS\n-.PP\n-\\f[I]length\\f[R] \\f[I]refcount\\f[R]\\f[CB]:\\f[R] \\f[I]symbol\\f[R]\n-.RE\n-.PP\n-The \\f[I]refcount\\f[R] for a shared symbol is always \\f[CB]\\-1\\f[R].\n-.PP\n-\\f[CB]\\@SECTION\\f[R] specifies the type of the section that follows it.\n-All data within the section must be the same type that\\[aq]s specified\n-by \\f[CB]\\@SECTION\\f[R].\n-Different types of data can\\[aq]t be mixed.\n-Multiple separated data sections for the same type specified by\n-different \\f[CB]\\@SECTION\\f[R] are allowed within one\n-\\f[CB]shared_config_file\\f[R] .\n+.SS Restrictions on Class Path and Module Path\n+.IP \\[bu] 2\n+Neither the class path (\\f[CB]\\-classpath\\f[R] and\n+\\f[CB]\\-Xbootclasspath\/a\\f[R]) nor the module path\n+(\\f[CB]\\-\\-module\\-path\\f[R]) can contain non\\-empty directories.\n+.IP \\[bu] 2\n+Only modular JAR files are supported in \\f[CB]\\-\\-module\\-path\\f[R].\n+Exploded modules are not supported.\n+.IP \\[bu] 2\n+The class path used at archive creation time must be the same as (or a\n+prefix of) the class path used at run time.\n+(There\\[aq]s no such requirement for the module path.)\n+.IP \\[bu] 2\n+The CDS archive cannot be loaded if any JAR files in the class path or\n+module path are modified after the archive is generated.\n+.IP \\[bu] 2\n+If any of the VM options \\f[CB]\\-\\-upgrade\\-module\\-path\\f[R],\n+\\f[CB]\\-\\-patch\\-module\\f[R] or \\f[CB]\\-\\-limit\\-modules\\f[R] are specified,\n+CDS is disabled.\n+This means that the JVM will execute without loading any CDS archives.\n+In addition, if you try to create a CDS archive with any of these 3\n+options specified, the JVM will report an error.\n","filename":"src\/java.base\/share\/man\/java.1","additions":129,"deletions":470,"binary":false,"changes":599,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -767,0 +767,50 @@\n+.B \\f[CB]VM.cds\\f[R] [\\f[I]arguments\\f[R]]\n+Dumps a static or dynamic shared archive that includes all currently\n+loaded classes.\n+.RS\n+.PP\n+Impact: Medium \\-\\-\\- pause time depends on number of loaded classes\n+.PP\n+Permission: \\f[CB]java.lang.management.ManagementPermission(monitor)\\f[R]\n+.PP\n+\\f[I]arguments\\f[R]:\n+.IP \\[bu] 2\n+\\f[CB]subcmd\\f[R]: must be either \\f[CB]static_dump\\f[R] or\n+.IP \\[bu] 2\n+\\f[CB]filename\\f[R]: (Optional) Name of the shared archive to be dumped\n+(STRING, no default value)\n+.PP\n+If \\f[CB]filename\\f[R] is not specified, a default file name is chosen\n+using the pid of the target JVM process.\n+For example, java_pid1234_static.jsa, java_pid5678_dynamic.jsa, etc.\n+.PP\n+If \\f[CB]filename\\f[R] is not specified as an absolute path, the archive\n+file is created in a directory relative to the current directory of the\n+target JVM process.\n+.RE\n+.TP\n+.B \\f[CB]VM.classloaders\\f[R] [\\f[I]options\\f[R]]\n+Prints classloader hierarchy.\n+.RS\n+.PP\n+Impact: Medium \\-\\-\\- Depends on number of class loaders and classes\n+loaded.\n+.PP\n+Permission: \\f[CB]java.lang.management.ManagementPermission(monitor)\\f[R]\n+.PP\n+The following \\f[I]options\\f[R] must be specified using either\n+\\f[I]key\\f[R] or \\f[I]key\\f[R]\\f[CB]=\\f[R]\\f[I]value\\f[R] syntax.\n+.PP\n+\\f[I]options\\f[R]:\n+.IP \\[bu] 2\n+\\f[CB]show\\-classes\\f[R]: (Optional) Print loaded classes.\n+(BOOLEAN, false)\n+.IP \\[bu] 2\n+\\f[CB]verbose\\f[R]: (Optional) Print detailed information.\n+(BOOLEAN, false)\n+.IP \\[bu] 2\n+\\f[CB]fold\\f[R]: (Optional) Show loaders of the same name and class as\n+one.\n+(BOOLEAN, true)\n+.RE\n+.TP\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.1","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"}]}