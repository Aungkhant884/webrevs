{"files":[{"patch":"@@ -374,11 +374,0 @@\n-#ifndef PRODUCT\n-void CollectedHeap::check_for_non_bad_heap_word_value(HeapWord* addr, size_t size) {\n-  if (CheckMemoryInitialization && ZapUnusedHeapArea) {\n-    \/\/ please note mismatch between size (in 32\/64 bit words), and ju_addr that always point to a 32 bit word\n-    for (juint* ju_addr = reinterpret_cast<juint*>(addr); ju_addr < reinterpret_cast<juint*>(addr + size); ++ju_addr) {\n-      assert(*ju_addr == badHeapWordVal, \"Found non badHeapWordValue in pre-allocation check\");\n-    }\n-  }\n-}\n-#endif \/\/ PRODUCT\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -159,2 +159,0 @@\n-  virtual void check_for_non_bad_heap_word_value(HeapWord* addr, size_t size)\n-    PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-  void check_for_bad_heap_word_value() const;\n@@ -84,1 +83,0 @@\n-      verify_after();\n@@ -151,16 +149,0 @@\n-void MemAllocator::Allocation::verify_after() {\n-  NOT_PRODUCT(check_for_bad_heap_word_value();)\n-}\n-\n-void MemAllocator::Allocation::check_for_bad_heap_word_value() const {\n-  MemRegion obj_range = _allocator.obj_memory_range(obj());\n-  HeapWord* addr = obj_range.start();\n-  size_t size = obj_range.word_size();\n-  if (CheckMemoryInitialization && ZapUnusedHeapArea) {\n-    for (size_t slot = 0; slot < size; slot += 1) {\n-      assert((*(intptr_t*) (addr + slot)) != ((intptr_t) badHeapWordVal),\n-             \"Found badHeapWordValue in post-allocation check\");\n-    }\n-  }\n-}\n-\n@@ -261,1 +243,0 @@\n-  NOT_PRODUCT(Universe::heap()->check_for_non_bad_heap_word_value(mem, _word_size));\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -920,4 +920,0 @@\n-                                                                            \\\n-  notproduct(bool, CheckMemoryInitialization, false,                        \\\n-          \"Check memory initialization\")                                    \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\n-\/*\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package gc;\n-\n-\/*\n- * test TestMemoryInitialization\n- * bug 4668531\n- * Simple test for -XX:+CheckMemoryInitialization doesn't crash VM\n- *\/\n-\n-public class TestMemoryInitialization {\n-    final static int LOOP_LENGTH = 10;\n-    final static int CHUNK_SIZE = 1500000;\n-\n-    public static byte[] buffer;\n-\n-    public static void main(String args[]) {\n-\n-        for (int i = 0; i < LOOP_LENGTH; i++) {\n-            for (int j = 0; j < LOOP_LENGTH; j++) {\n-                buffer = new byte[CHUNK_SIZE];\n-                buffer = null;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/TestMemoryInitialization.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\n-\/*\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package gc;\n-\n-\/*\n- * @test TestMemoryInitializationWithSerial\n- * @bug 4668531\n- * @library \/\n- * @requires vm.debug & vm.gc.Serial\n- * @summary Simple test for -XX:+CheckMemoryInitialization doesn't crash VM\n- * @run main\/othervm -XX:+UseSerialGC -XX:+CheckMemoryInitialization gc.TestMemoryInitializationWithSerial\n- *\/\n-\n-public class TestMemoryInitializationWithSerial {\n-\n-    public static void main(String args[]) {\n-        TestMemoryInitialization.main(args);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/TestMemoryInitializationWithSerial.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"}]}