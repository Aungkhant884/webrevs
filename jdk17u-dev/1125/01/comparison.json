{"files":[{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+ * @test\n+ * @bug 6299163\n+ * @summary Test to compare java.security.CodeSource\n+ *          Instructions to re-create the used certs file.\n+ *          - Generate a self-signed certificate with basicConstraints=CA:TRUE\n+ *          - Copy the generated certificate 2 times into a newly created certs file.\n+ *\/\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URL;\n+import java.security.CodeSigner;\n+import java.security.CodeSource;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CertsMatch {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        File certsFile = new File(System.getProperty(\"test.src\", \".\"), \"certs\");\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        try (FileInputStream fis = new FileInputStream(certsFile);\n+                BufferedInputStream bis = new BufferedInputStream(fis)) {\n+\n+            ArrayList certs1 = new ArrayList();\n+            ArrayList certs2 = new ArrayList();\n+\n+            \/\/ read the first cert\n+            Certificate cert = cf.generateCertificate(bis);\n+            certs1.add(cert);\n+            certs2.add(cert);\n+\n+            \/\/ read the second cert\n+            cert = cf.generateCertificate(bis);\n+            certs2.add(cert);\n+\n+            URL location = certsFile.toURI().toURL();\n+            CodeSource cs0 = new CodeSource(location, (Certificate[]) null);\n+            CodeSource cs1 = new CodeSource(location,\n+                    (Certificate[]) certs1.toArray(new Certificate[certs1.size()]));\n+            CodeSource cs2 = new CodeSource(location,\n+                    (Certificate[]) certs2.toArray(new Certificate[certs2.size()]));\n+\n+            if (!cs0.implies(cs1) || !cs1.implies(cs2)) {\n+                throw new Exception(\"The implies method is not working correctly\");\n+            }\n+            if (cs0.equals(cs1) || cs1.equals(cs0)\n+                    || cs2.equals(cs1) || cs1.equals(cs2)) {\n+                throw new Exception(\"The equals method is not working correctly\");\n+            }\n+            if (verifySigner(cs0.getCodeSigners(), null)) {\n+                throw new RuntimeException(\"CodeSource.getCodeSigners() should be null\");\n+            }\n+            if (!((verifySigner(cs1.getCodeSigners(), certs1))\n+                    && (verifySigner(cs2.getCodeSigners(), certs2)))) {\n+                throw new RuntimeException(\"Mismatched CodeSigners certificate\");\n+            }\n+        }\n+    }\n+\n+    private static boolean verifySigner(CodeSigner[] css, List certs) {\n+        if (css == null || certs == null) {\n+            return false;\n+        }\n+        if (css.length < 1 || certs.size() < 1) {\n+            return false;\n+        }\n+        boolean result = true;\n+        for (CodeSigner cs : css) {\n+            result &= cs.getSignerCertPath().getCertificates().equals(certs);\n+        }\n+        return result;\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/CodeSource\/CertsMatch.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+\n@@ -54,6 +55,5 @@\n-        throws SecurityException\n-    {\n-        CodeSource thisCs =\n-            new CodeSource(thisURL, (java.security.cert.Certificate[]) null);\n-        CodeSource thatCs =\n-            new CodeSource(thatURL, (java.security.cert.Certificate[]) null);\n+            throws SecurityException {\n+        CodeSource thisCs\n+                = new CodeSource(thisURL, (java.security.cert.Certificate[]) null);\n+        CodeSource thatCs\n+                = new CodeSource(thatURL, (java.security.cert.Certificate[]) null);\n@@ -61,1 +61,5 @@\n-            throw new SecurityException(\"test failed\");\n+            throw new SecurityException(\"CodeSource.implies() returned \"\n+                    + !result + \" instead of \" + result);\n+        }\n+        if (thisCs.getCodeSigners() != null && thatCs.getCodeSigners() != null) {\n+            throw new SecurityException(\"Both getCodeSigners should be null\");\n","filename":"test\/jdk\/java\/security\/CodeSource\/Implies.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,42 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDgzCCAmugAwIBAgIJALi3XHB1pDxTMA0GCSqGSIb3DQEBCwUAMFgxCzAJBgNV\n+BAYTAlVTMQ0wCwYDVQQIDAR0ZXN0MQ0wCwYDVQQHDAR0ZXN0MQ0wCwYDVQQKDAR0\n+ZXN0MQ0wCwYDVQQLDAR0ZXN0MQ0wCwYDVQQDDAR0ZXN0MB4XDTIyMDYwODA3Mzkz\n+MFoXDTQ3MDYwMjA3MzkzMFowWDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBHRlc3Qx\n+DTALBgNVBAcMBHRlc3QxDTALBgNVBAoMBHRlc3QxDTALBgNVBAsMBHRlc3QxDTAL\n+BgNVBAMMBHRlc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUfQUR\n+jdnE1KyZKjPoL2np9T9grBJFaApt1oxNOXLzOW19EYUbbmzERKf9bHALfYIRZonj\n+wYEywWMLxVuM1YdJAKO2X\/X2nvPZLmi9BPVa0aGyG\/X19L9FKXEKugzujrq2gko0\n+ryDpV1Rrbqpv5G9wXA1+jzPVteFgCX9IoNLEatXVAN8gfnuOCvAM83VMit91+LNs\n+uK9Eo9xcPyVt0n7Tl+VtW\/nVzlRz\/p6xHIB0Uo3Dl\/\/QziMllWng98TCxtcTvOBd\n+gl1AlTAwFWGwQRL2xC8iFrJ5vgY4\/afth68W0pqsIH5TCJumGVf\/0VBYIs+OWdyT\n+Wu0Eswjx34gsuvyTAgMBAAGjUDBOMB0GA1UdDgQWBBRmeQRExt2gPyc+b6fB8hL8\n++oiT+jAfBgNVHSMEGDAWgBRmeQRExt2gPyc+b6fB8hL8+oiT+jAMBgNVHRMEBTAD\n+AQH\/MA0GCSqGSIb3DQEBCwUAA4IBAQCRlgYqBPXnrhHySR0GzTG2eSQ2B6MqLTOX\n+nt10kmp92zFJ\/AZIoHZGyNC45dRXLX1ZcV8dtAKzbZLo2u07TGxM\/q66bHOpXbCn\n+FGZqyhanDrkwHWPI58pyDuzRKUQKq+kuwpctDiZpjVBcZIVP\/ecZcI0DO7qKWEXc\n+JVXgfkqjU0PMCQDpahDuPLQ3otYDUgNAY82c4WETypjTE8GaLCg++JmPy0Yo8kR4\n+VBabOgp4FJi+DDo7VNZRuCTZG91pNlKUZNnR\/T1VO0KPtbJoRV5XBRcwdCfhtxNW\n+lK33pqJx7xAY5Gkg+SdvQOA0d4y6YbCF7eO1QyA5x+dqq+YGHpw7\n+-----END CERTIFICATE-----\n+-----BEGIN CERTIFICATE-----\n+MIIDgzCCAmugAwIBAgIJALi3XHB1pDxTMA0GCSqGSIb3DQEBCwUAMFgxCzAJBgNV\n+BAYTAlVTMQ0wCwYDVQQIDAR0ZXN0MQ0wCwYDVQQHDAR0ZXN0MQ0wCwYDVQQKDAR0\n+ZXN0MQ0wCwYDVQQLDAR0ZXN0MQ0wCwYDVQQDDAR0ZXN0MB4XDTIyMDYwODA3Mzkz\n+MFoXDTQ3MDYwMjA3MzkzMFowWDELMAkGA1UEBhMCVVMxDTALBgNVBAgMBHRlc3Qx\n+DTALBgNVBAcMBHRlc3QxDTALBgNVBAoMBHRlc3QxDTALBgNVBAsMBHRlc3QxDTAL\n+BgNVBAMMBHRlc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUfQUR\n+jdnE1KyZKjPoL2np9T9grBJFaApt1oxNOXLzOW19EYUbbmzERKf9bHALfYIRZonj\n+wYEywWMLxVuM1YdJAKO2X\/X2nvPZLmi9BPVa0aGyG\/X19L9FKXEKugzujrq2gko0\n+ryDpV1Rrbqpv5G9wXA1+jzPVteFgCX9IoNLEatXVAN8gfnuOCvAM83VMit91+LNs\n+uK9Eo9xcPyVt0n7Tl+VtW\/nVzlRz\/p6xHIB0Uo3Dl\/\/QziMllWng98TCxtcTvOBd\n+gl1AlTAwFWGwQRL2xC8iFrJ5vgY4\/afth68W0pqsIH5TCJumGVf\/0VBYIs+OWdyT\n+Wu0Eswjx34gsuvyTAgMBAAGjUDBOMB0GA1UdDgQWBBRmeQRExt2gPyc+b6fB8hL8\n++oiT+jAfBgNVHSMEGDAWgBRmeQRExt2gPyc+b6fB8hL8+oiT+jAMBgNVHRMEBTAD\n+AQH\/MA0GCSqGSIb3DQEBCwUAA4IBAQCRlgYqBPXnrhHySR0GzTG2eSQ2B6MqLTOX\n+nt10kmp92zFJ\/AZIoHZGyNC45dRXLX1ZcV8dtAKzbZLo2u07TGxM\/q66bHOpXbCn\n+FGZqyhanDrkwHWPI58pyDuzRKUQKq+kuwpctDiZpjVBcZIVP\/ecZcI0DO7qKWEXc\n+JVXgfkqjU0PMCQDpahDuPLQ3otYDUgNAY82c4WETypjTE8GaLCg++JmPy0Yo8kR4\n+VBabOgp4FJi+DDo7VNZRuCTZG91pNlKUZNnR\/T1VO0KPtbJoRV5XBRcwdCfhtxNW\n+lK33pqJx7xAY5Gkg+SdvQOA0d4y6YbCF7eO1QyA5x+dqq+YGHpw7\n+-----END CERTIFICATE-----\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/CodeSource\/certs","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"}]}