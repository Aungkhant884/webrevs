{"files":[{"patch":"@@ -283,5 +283,17 @@\n-        Socket socket = null;\n-\n-        if (socketFactory != null) {\n-\n-            \/\/ create the factory\n+        SocketFactory factory = getSocketFactory(socketFactory);\n+        assert factory != null;\n+        Socket socket = createConnectionSocket(host, port, factory, connectTimeout);\n+\n+        \/\/ the handshake for SSL connection with server and reset timeout for the socket\n+        if (socket instanceof SSLSocket sslSocket) {\n+            try {\n+                initialSSLHandshake(sslSocket, connectTimeout);\n+            } catch (Exception e) {\n+                \/\/ 8314063 the socket is not closed after the failure of handshake\n+                \/\/ close the socket while the error happened\n+                closeOpenedSocket(socket);\n+                throw e;\n+            }\n+        }\n+        return socket;\n+    }\n@@ -289,0 +301,10 @@\n+    private SocketFactory getSocketFactory(String socketFactoryName) throws Exception {\n+        if (socketFactoryName == null) {\n+            if (debug) {\n+                System.err.println(\"Connection: using default SocketFactory\");\n+            }\n+            return SocketFactory.getDefault();\n+        } else {\n+            if (debug) {\n+                System.err.println(\"Connection: loading supplied SocketFactory: \" + socketFactoryName);\n+            }\n@@ -291,1 +313,1 @@\n-                (Class<? extends SocketFactory>)Obj.helper.loadClass(socketFactory);\n+                    (Class<? extends SocketFactory>) Obj.helper.loadClass(socketFactoryName);\n@@ -293,1 +315,1 @@\n-                socketFactoryClass.getMethod(\"getDefault\", new Class<?>[]{});\n+                    socketFactoryClass.getMethod(\"getDefault\");\n@@ -295,0 +317,3 @@\n+            return factory;\n+        }\n+    }\n@@ -296,35 +321,3 @@\n-            \/\/ create the socket\n-\n-            if (connectTimeout > 0) {\n-\n-                InetSocketAddress endpoint =\n-                        createInetSocketAddress(host, port);\n-\n-                \/\/ unconnected socket\n-                socket = factory.createSocket();\n-\n-                if (debug) {\n-                    System.err.println(\"Connection: creating socket with \" +\n-                            \"a timeout using supplied socket factory\");\n-                }\n-\n-                \/\/ connected socket\n-                socket.connect(endpoint, connectTimeout);\n-            }\n-\n-            \/\/ continue (but ignore connectTimeout)\n-            if (socket == null) {\n-                if (debug) {\n-                    System.err.println(\"Connection: creating socket using \" +\n-                        \"supplied socket factory\");\n-                }\n-                \/\/ connected socket\n-                socket = factory.createSocket(host, port);\n-            }\n-        } else {\n-\n-            if (connectTimeout > 0) {\n-\n-                    InetSocketAddress endpoint = createInetSocketAddress(host, port);\n-\n-                    socket = new Socket();\n+    private Socket createConnectionSocket(String host, int port, SocketFactory factory,\n+                                          int connectTimeout) throws Exception {\n+        Socket socket = null;\n@@ -332,5 +325,12 @@\n-                    if (debug) {\n-                        System.err.println(\"Connection: creating socket with \" +\n-                            \"a timeout\");\n-                    }\n-                    socket.connect(endpoint, connectTimeout);\n+        if (connectTimeout > 0) {\n+            \/\/ create unconnected socket and then connect it if timeout\n+            \/\/ is supplied\n+            InetSocketAddress endpoint =\n+                    createInetSocketAddress(host, port);\n+            \/\/ unconnected socket\n+            socket = factory.createSocket();\n+            \/\/ connect socket with a timeout\n+            socket.connect(endpoint, connectTimeout);\n+            if (debug) {\n+                System.err.println(\"Connection: creating socket with \" +\n+                        \"a connect timeout\");\n@@ -338,9 +338,7 @@\n-\n-            \/\/ continue (but ignore connectTimeout)\n-\n-            if (socket == null) {\n-                if (debug) {\n-                    System.err.println(\"Connection: creating socket\");\n-                }\n-                \/\/ connected socket\n-                socket = new Socket(host, port);\n+        }\n+        if (socket == null) {\n+            \/\/ create connected socket\n+            socket = factory.createSocket(host, port);\n+            if (debug) {\n+                System.err.println(\"Connection: creating connected socket with\" +\n+                        \" no connect timeout\");\n@@ -349,0 +347,8 @@\n+        return socket;\n+    }\n+\n+    \/\/ For LDAP connect timeouts on LDAP over SSL connections must treat\n+    \/\/ the SSL handshake following socket connection as part of the timeout.\n+    \/\/ So explicitly set a socket read timeout, trigger the SSL handshake,\n+    \/\/ then reset the timeout.\n+    private void initialSSLHandshake(SSLSocket sslSocket , int connectTimeout) throws Exception {\n@@ -350,6 +356,0 @@\n-        \/\/ For LDAP connect timeouts on LDAP over SSL connections must treat\n-        \/\/ the SSL handshake following socket connection as part of the timeout.\n-        \/\/ So explicitly set a socket read timeout, trigger the SSL handshake,\n-        \/\/ then reset the timeout.\n-        if (socket instanceof SSLSocket) {\n-            SSLSocket sslSocket = (SSLSocket) socket;\n@@ -368,2 +368,0 @@\n-        }\n-        return socket;\n@@ -645,1 +643,1 @@\n-                    closeOpenedSocket();\n+                    closeOpenedSocket(sock);\n@@ -698,1 +696,1 @@\n-    private void closeOpenedSocket() {\n+    private void closeOpenedSocket(Socket socket) {\n@@ -700,1 +698,2 @@\n-            sock.close();\n+            if (socket != null && !socket.isClosed())\n+                socket.close();\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":66,"deletions":67,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -0,0 +1,249 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.net.URIBuilder;\n+\n+import javax.naming.Context;\n+import javax.naming.ldap.InitialLdapContext;\n+import javax.naming.ldap.LdapContext;\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.SocketException;\n+import java.util.Hashtable;\n+\n+\/*\n+ * @test\n+ * @bug 8314063\n+ * @library \/test\/lib\n+ * @summary For LDAPs connection, if the value of com.sun.jndi.ldap.connect.timeout is\n+ * set too small or not an optimal value for the system, after the socket is created and\n+ * connected to the server, but the handshake between the client and server fails due to\n+ * socket time out, the opened socket is not closed properly. In this test case, the server\n+ * is forced to sleep ten seconds and connection time out for client is one second. This\n+ * will allow the socket opened and connected, and give the chance for the handshake to be\n+ * timed out. Before this fix, the socket is kept opened. Right now the exception will be\n+ * caught and the socket will be closed.\n+ *\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory true 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest -1000 true 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest -1000 false 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 2000 false 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0 true 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0 false 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest false\n+ *\/\n+\n+public class LdapSSLHandshakeFailureTest {\n+    private static String SOCKET_CLOSED_MSG = \"The socket has been closed.\";\n+\n+    private static int serverSleepingTime = 5000;\n+\n+    public static void main(String args[]) throws Exception {\n+\n+        \/\/ Set the keystores\n+        setKeyStore();\n+        boolean serverSlowDown = Boolean.valueOf(args[0]);\n+        if (args.length == 2) {\n+            serverSlowDown = Boolean.valueOf(args[1]);\n+        }\n+\n+        if (args.length == 3) {\n+            serverSleepingTime = Integer.valueOf(args[2]);\n+        }\n+\n+        boolean hasCustomSocketFactory = args[0]\n+                .equals(\"LdapSSLHandshakeFailureTest$CustomSocketFactory\");\n+        \/\/ start the test server first.\n+        try (TestServer server = new TestServer(serverSlowDown, serverSleepingTime)) {\n+            server.start();\n+            Hashtable<String, Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            env.put(\"java.naming.ldap.version\", \"3\");\n+            env.put(Context.PROVIDER_URL, URIBuilder.newBuilder()\n+                    .scheme(\"ldaps\")\n+                    .loopback()\n+                    .port(server.getPortNumber())\n+                    .buildUnchecked().toString());\n+\n+            if (hasCustomSocketFactory) {\n+                env.put(\"java.naming.ldap.factory.socket\", args[0]);\n+                env.put(\"com.sun.jndi.ldap.connect.timeout\", \"1000\");\n+            }\n+\n+            if (args.length == 2 && !hasCustomSocketFactory) {\n+                env.put(\"com.sun.jndi.ldap.connect.timeout\", args[0]);\n+            }\n+\n+            env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n+            env.put(Context.SECURITY_AUTHENTICATION, \"Simple\");\n+            env.put(Context.SECURITY_PRINCIPAL, \"cn=principal\");\n+            env.put(Context.SECURITY_CREDENTIALS, \"123456\");\n+            LdapContext ctx = null;\n+            try {\n+                ctx = new InitialLdapContext(env, null);\n+            } catch (Exception e) {\n+                if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0\n+                        && hasCustomSocketFactory\n+                        && Boolean.valueOf(args[1])) {\n+                    System.out.println(SOCKET_CLOSED_MSG);\n+                } else {\n+                    throw e;\n+                }\n+            } finally {\n+                if (ctx != null)\n+                    ctx.close();\n+            }\n+        }\n+    }\n+\n+    public static class CustomSocketFactory extends SocketFactory {\n+        private static CustomSocket customSocket;\n+\n+        public static CustomSocketFactory getDefault() {\n+            return new CustomSocketFactory();\n+        }\n+\n+        @Override\n+        public Socket createSocket() throws SocketException {\n+            customSocket = new CustomSocket();\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String s, int timeout) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String host, int port, InetAddress localHost,\n+                                   int localPort) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress host, int port) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress address, int port,\n+                                   InetAddress localAddress, int localPort) {\n+            return customSocket;\n+        }\n+    }\n+\n+    private static class CustomSocket extends Socket {\n+        private int closeMethodCalled = 0;\n+\n+        public CustomSocket() {\n+            closeMethodCalled = 0;\n+        }\n+\n+        public int closeMethodCalledCount() {\n+            return closeMethodCalled;\n+        }\n+\n+        @Override\n+        public void close() throws java.io.IOException {\n+            closeMethodCalled++;\n+            super.close();\n+        }\n+    }\n+\n+    private static void setKeyStore() {\n+\n+        String fileName = \"ksWithSAN\", dir = System.getProperty(\"test.src\", \".\") + File.separator;\n+\n+        System.setProperty(\"javax.net.ssl.keyStore\", dir + fileName);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"welcome1\");\n+        System.setProperty(\"javax.net.ssl.trustStore\", dir + fileName);\n+        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"welcome1\");\n+    }\n+\n+    static class TestServer extends Thread implements AutoCloseable {\n+        private boolean isForceToSleep;\n+        private int sleepingTime;\n+        private final ServerSocket serverSocket;\n+        private final int PORT;\n+\n+        private TestServer(boolean isForceToSleep, int sleepingTime) {\n+            this.isForceToSleep = isForceToSleep;\n+            this.sleepingTime = sleepingTime;\n+            try {\n+                SSLServerSocketFactory socketFactory = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n+                serverSocket = socketFactory.createServerSocket(0, 0, InetAddress.getLoopbackAddress());\n+                PORT = serverSocket.getLocalPort();\n+            } catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+            setDaemon(true);\n+        }\n+\n+        public int getPortNumber() {\n+            return PORT;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try (Socket socket = serverSocket.accept();\n+                 InputStream in = socket.getInputStream();\n+                 OutputStream out = socket.getOutputStream()) {\n+                if (isForceToSleep) {\n+                    Thread.sleep(sleepingTime);\n+                }\n+                byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A,\n+                        0x01, 0x00, 0x04, 0x00, 0x04, 0x00};\n+                \/\/ read the bindRequest\n+                while (in.read() != -1) {\n+                    in.skip(in.available());\n+                    break;\n+                }\n+                out.write(bindResponse);\n+                out.flush();\n+                \/\/ ignore the further requests\n+                while (in.read() != -1) {\n+                    in.skip(in.available());\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            if (serverSocket != null) {\n+                serverSocket.close();\n+            }\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":249,"deletions":0,"binary":false,"changes":249,"status":"added"},{"filename":"test\/jdk\/com\/sun\/jndi\/ldap\/ksWithSAN","binary":true,"status":"added"}]}