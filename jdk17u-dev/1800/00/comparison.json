{"files":[{"patch":"@@ -643,1 +643,0 @@\n-javax\/net\/ssl\/SSLEngine\/Basics.java                             8298867 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n- *\n@@ -33,0 +32,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +34,1 @@\n+ * @run main\/othervm Basics\n@@ -39,0 +40,1 @@\n+import java.util.Arrays;\n@@ -42,0 +44,2 @@\n+import jdk.test.lib.security.SecurityUtils;\n+\n@@ -44,4 +48,10 @@\n-    private static String pathToStores = \"..\/etc\";\n-    private static String keyStoreFile = \"keystore\";\n-    private static String trustStoreFile = \"truststore\";\n-    private static String passwd = \"passphrase\";\n+    private static final String PATH_TO_STORES = \"..\/etc\";\n+    private static final String KEY_STORE_FILE = \"keystore\";\n+    private static final String TRUSTSTORE_FILE = \"truststore\";\n+\n+    private static final String KEYSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + KEY_STORE_FILE;\n+    private static final String TRUSTSTORE_PATH =\n+            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n+                \"\/\" + TRUSTSTORE_FILE;\n@@ -49,6 +59,7 @@\n-    private static String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-    private static String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n+    public static void main(String[] args) throws Exception {\n+        SecurityUtils.removeFromDisabledTlsAlgs(\"TLSv1.1\");\n+\n+        runTest(\"TLSv1.3\", \"TLS_AES_256_GCM_SHA384\");\n+        runTest(\"TLSv1.2\", \"TLS_RSA_WITH_AES_256_GCM_SHA384\");\n+        runTest(\"TLSv1.1\", \"TLS_DHE_DSS_WITH_AES_128_CBC_SHA\");\n+    }\n@@ -56,1 +67,2 @@\n-    public static void main(String args[]) throws Exception {\n+    private static void runTest(String protocol, String cipherSuite) throws Exception {\n+        System.out.printf(\"Testing %s with %s%n\", protocol, cipherSuite);\n@@ -62,2 +74,2 @@\n-        ks.load(new FileInputStream(keyFilename), passphrase);\n-        ts.load(new FileInputStream(trustFilename), passphrase);\n+        ks.load(new FileInputStream(KEYSTORE_PATH), passphrase);\n+        ts.load(new FileInputStream(TRUSTSTORE_PATH), passphrase);\n@@ -80,2 +92,7 @@\n-        String secondSuite = suites[1];\n-        String [] oneSuites = new String [] { secondSuite };\n+        \/\/ sanity check that the ciphersuite we want to use is still supported\n+        Arrays.stream(suites)\n+                .filter(s -> s.equals(cipherSuite))\n+                .findFirst()\n+                .orElseThrow((() ->\n+                        new RuntimeException(cipherSuite +\n+                                \" is not a supported ciphersuite.\")));\n@@ -85,1 +102,1 @@\n-        ssle.setEnabledCipherSuites(oneSuites);\n+        ssle.setEnabledCipherSuites(new String [] { cipherSuite });\n@@ -90,2 +107,2 @@\n-                !(suites[0].equals(secondSuite))) {\n-            throw new Exception(\"set ciphers not what was expected\");\n+                !(suites[0].equals(cipherSuite))) {\n+            throw new RuntimeException(\"set ciphers not what was expected\");\n@@ -97,2 +114,7 @@\n-        String secondProtocol = protocols[1];\n-        String [] oneProtocols = new String [] { protocols[1] };\n+        \/\/ sanity check that the protocol we want is still supported\n+        Arrays.stream(protocols)\n+                .filter(p -> p.equals(protocol))\n+                .findFirst()\n+                .orElseThrow(() ->\n+                        new RuntimeException(protocol +\n+                                \" is not a supported TLS protocol.\"));\n@@ -102,1 +124,1 @@\n-        ssle.setEnabledProtocols(oneProtocols);\n+        ssle.setEnabledProtocols(new String[]{ protocol });\n@@ -107,2 +129,2 @@\n-                !(protocols[0].equals(secondProtocol))) {\n-            throw new Exception(\"set protocols not what was expected\");\n+                !(protocols[0].equals(protocol))) {\n+            throw new RuntimeException(\"set protocols not what was expected\");\n@@ -114,2 +136,2 @@\n-        if (ssle.getUseClientMode() != true) {\n-            throw new Exception(\"set\/getUseClientMode false\");\n+        if (!ssle.getUseClientMode()) {\n+            throw new RuntimeException(\"set\/getUseClientMode false\");\n@@ -119,2 +141,2 @@\n-        if (ssle.getUseClientMode() != false) {\n-            throw new Exception(\"set\/getUseClientMode true\");\n+        if (ssle.getUseClientMode()) {\n+            throw new RuntimeException(\"set\/getUseClientMode true\");\n@@ -127,2 +149,2 @@\n-        if (ssle.getNeedClientAuth() != false) {\n-            throw new Exception(\"set\/getNeedClientAuth true\");\n+        if (ssle.getNeedClientAuth()) {\n+            throw new RuntimeException(\"set\/getNeedClientAuth true\");\n@@ -132,2 +154,2 @@\n-        if (ssle.getNeedClientAuth() != true) {\n-            throw new Exception(\"set\/getNeedClientAuth false\");\n+        if (!ssle.getNeedClientAuth()) {\n+            throw new RuntimeException(\"set\/getNeedClientAuth false\");\n@@ -138,2 +160,2 @@\n-        if (ssle.getNeedClientAuth() == true) {\n-            throw new Exception(\"set\/getWantClientAuth need = true\");\n+        if (ssle.getNeedClientAuth()) {\n+            throw new RuntimeException(\"set\/getWantClientAuth need = true\");\n@@ -142,2 +164,2 @@\n-        if (ssle.getWantClientAuth() != true) {\n-            throw new Exception(\"set\/getNeedClientAuth false\");\n+        if (!ssle.getWantClientAuth()) {\n+            throw new RuntimeException(\"set\/getNeedClientAuth false\");\n@@ -147,2 +169,2 @@\n-        if (ssle.getWantClientAuth() != false) {\n-            throw new Exception(\"set\/getNeedClientAuth true\");\n+        if (ssle.getWantClientAuth()) {\n+            throw new RuntimeException(\"set\/getNeedClientAuth true\");\n@@ -159,2 +181,2 @@\n-        if (ssle.getEnableSessionCreation() != false) {\n-            throw new Exception(\"set\/getSessionCreation true\");\n+        if (ssle.getEnableSessionCreation()) {\n+            throw new RuntimeException(\"set\/getSessionCreation true\");\n@@ -164,2 +186,2 @@\n-        if (ssle.getEnableSessionCreation() != true) {\n-            throw new Exception(\"set\/getSessionCreation false\");\n+        if (!ssle.getEnableSessionCreation()) {\n+            throw new RuntimeException(\"set\/getSessionCreation false\");\n@@ -173,1 +195,1 @@\n-            throw new Exception(\"wrap should have overflowed\");\n+            throw new RuntimeException(\"wrap should have overflowed\");\n@@ -180,5 +202,0 @@\n-        \/\/\n-        \/\/if (ssle.unwrap(smallBB, smallBB).getStatus() !=\n-        \/\/      Status.BUFFER_OVERFLOW) {\n-        \/\/    throw new Exception(\"unwrap should have overflowed\");\n-        \/\/}\n@@ -199,1 +216,1 @@\n-            throw new Exception(\"initial client hello needs unwrap\");\n+            throw new RuntimeException(\"initial client hello needs unwrap\");\n@@ -202,5 +219,9 @@\n-        \/* Checking for overflow wrap\/unwrap() *\/\n-\n-        if (ssle.wrap(appBB, netBB).getStatus() !=\n-                Status.BUFFER_OVERFLOW) {\n-            throw new Exception(\"unwrap should have overflowed\");\n+        \/*\n+         * After the first call to wrap(), the handshake status is\n+         * NEED_UNWRAP and we need to receive data before doing anymore\n+         * handshaking.\n+         *\/\n+        SSLEngineResult result = ssle.wrap(appBB, netBB);\n+        if (result.getStatus() != Status.OK\n+            && result.bytesConsumed() != 0 && result.bytesProduced() != 0) {\n+            throw new RuntimeException(\"wrap should have returned without doing anything\");\n@@ -221,1 +242,1 @@\n-            throw new Exception(\"unwrap wasn't ReadOnlyBufferException\");\n+            throw new RuntimeException(\"unwrap wasn't ReadOnlyBufferException\");\n@@ -236,1 +257,1 @@\n-            throw new Exception(\"unwrap should underflow\");\n+            throw new RuntimeException(\"unwrap should underflow\");\n@@ -244,1 +265,1 @@\n-            throw new Exception(\"unwrap should underflow\");\n+            throw new RuntimeException(\"unwrap should underflow\");\n@@ -252,1 +273,1 @@\n-            throw new Exception(\"unwrap should underflow\");\n+            throw new RuntimeException(\"unwrap should underflow\");\n@@ -257,0 +278,5 @@\n+            \/*\n+             * Exceptions are thrown when:\n+             *    - the length field is correct but the data can't be decoded.\n+             *    - the length field is larger than max allowed.\n+             *\/\n@@ -258,3 +284,5 @@\n-            throw new Exception(\"Didn't catch the nasty SSLException\");\n-        } catch (SSLException e) {\n-            System.out.println(\"caught the nasty SSLException: \" + e);\n+            throw new RuntimeException(\"Expected SSLProtocolException was not thrown \"\n+                    + \"for bad input\");\n+        } catch (SSLProtocolException e) {\n+            System.out.println(\"caught the SSLProtocolException for bad decoding: \"\n+                    + e);\n@@ -281,2 +309,2 @@\n-        \/\/ \"HELLO HELLO\"\n-        (byte) 0x48, (byte) 0x45, (byte) 0x4C, (byte) 0x4C, (byte) 0x20,\n+        \/\/ bad data but correct record length to cause decryption error\n+        (byte) 0x48, (byte) 0x45, (byte) 0x4C, (byte) 0x00, (byte) 0x04,\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLEngine\/Basics.java","additions":92,"deletions":64,"binary":false,"changes":156,"status":"modified"}]}