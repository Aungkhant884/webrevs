{"files":[{"patch":"@@ -242,1 +242,0 @@\n-sun\/java2d\/DirectX\/OnScreenRenderingResizeTest\/OnScreenRenderingResizeTest.java 8022403 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n- * doesn't produce artifacts or crashes\n- * @author Dmitri.Trembovetski@sun.com: area=Graphics\n+ *          doesn't produce artifacts or crashes\n@@ -36,1 +35,0 @@\n-import java.awt.EventQueue;\n@@ -41,1 +39,0 @@\n-import java.awt.Insets;\n@@ -45,2 +42,1 @@\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n+import java.awt.EventQueue;\n@@ -55,1 +51,0 @@\n-    private static volatile boolean done = false;\n@@ -58,4 +53,5 @@\n-    private static final int FRAME_W = 256;\n-    private static final int FRAME_H = 256;\n-    private static final int IMAGE_W = 128;\n-    private static final int IMAGE_H = 128;\n+    private static int FRAME_W;\n+    private static int FRAME_H;\n+    private static int IMAGE_W;\n+    private static int IMAGE_H;\n+    private static final int tolerance = 12;\n@@ -67,1 +63,12 @@\n-    public static void main(String[] args) {\n+    private static Frame frame;\n+\n+    private static void createAndShowGUI() {\n+        frame = new Frame();\n+        frame.setBackground(bgColor);\n+        frame.setUndecorated(true);\n+        frame.setAlwaysOnTop(true);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n@@ -77,1 +84,2 @@\n-                System.err.println(\"Usage: OnScreenRenderingResizeTest [-inf][-nocheck]\");\n+                System.err.println(\"Usage: OnScreenRenderingResizeTest\" +\n+                                   \" [-inf][-nocheck]\");\n@@ -81,24 +89,0 @@\n-        BufferedImage output =\n-            new BufferedImage(IMAGE_W, IMAGE_H, BufferedImage.TYPE_INT_RGB);\n-        output.setAccelerationPriority(0.0f);\n-        Graphics g = output.getGraphics();\n-        g.setColor(renderColor);\n-        g.fillRect(0, 0, output.getWidth(), output.getHeight());\n-\n-        final Frame frame = new Frame(\"OnScreenRenderingResizeTest\") {\n-            public void paint(Graphics g) {}\n-            public void update(Graphics g) {}\n-        };\n-        frame.setBackground(bgColor);\n-        frame.setUndecorated(true);\n-        frame.pack();\n-\n-        GraphicsConfiguration gc = frame.getGraphicsConfiguration();\n-        Rectangle gcBounds = gc.getBounds();\n-        frame.setBounds(gcBounds.width \/ 4, gcBounds.height \/ 4, FRAME_W, FRAME_H);\n-\n-        frame.addWindowListener(new WindowAdapter() {\n-            public void windowClosing(WindowEvent e) {\n-                done = true;\n-            }\n-        });\n@@ -108,1 +92,1 @@\n-                    frame.setVisible(true);\n+                    createAndShowGUI();\n@@ -111,1 +95,0 @@\n-            \/\/ wait for Vista's effects to complete\n@@ -117,30 +100,31 @@\n-        int maxW = gcBounds.width \/2;\n-        int maxH = gcBounds.height\/2;\n-        int minW = frame.getWidth();\n-        int minH = frame.getHeight();\n-        int incW = 10, incH = 10, cnt = 0;\n-        Robot robot = null;\n-        if (!nocheck && gc.getColorModel().getPixelSize() > 8) {\n-            try {\n-                robot = new Robot();\n-            } catch (AWTException ex) {\n-                System.err.println(\"Robot creation failed, continuing.\");\n-            }\n-        } else {\n-            System.err.println(\"No screen rendering checks.\");\n-        }\n-\n-        VolatileImage vi = gc.createCompatibleVolatileImage(512, 512);\n-        vi.validate(gc);\n-\n-        long timeStarted = System.currentTimeMillis();\n-        while (!done && (System.currentTimeMillis() - timeStarted) < RUN_TIME) {\n-\n-            if (++cnt > 100) {\n-                int w = frame.getWidth() + incW;\n-                int h = frame.getHeight() + incH;\n-                if (w < minW || w > maxW ) {\n-                    incW = -incW;\n-                }\n-                if (h < minH || h > maxH ) {\n-                    incH = -incH;\n+        try {\n+            GraphicsConfiguration gc = frame.getGraphicsConfiguration();\n+            Rectangle gcBounds = gc.getBounds();\n+            FRAME_W = (gcBounds.width \/ 4);\n+            FRAME_H = (gcBounds.height \/ 4);\n+            IMAGE_W = (gcBounds.width \/ 8);\n+            IMAGE_H = (gcBounds.height \/ 8);\n+            frame.setBounds(gcBounds.width \/ 4, gcBounds.height \/ 4,\n+                            FRAME_W, FRAME_H);\n+\n+            BufferedImage output =\n+                new BufferedImage(IMAGE_W, IMAGE_H,\n+                                  BufferedImage.TYPE_INT_RGB);\n+            output.setAccelerationPriority(0.0f);\n+            Graphics g = output.getGraphics();\n+            g.setColor(renderColor);\n+            g.fillRect(0, 0, IMAGE_W, IMAGE_H);\n+\n+            int maxW = gcBounds.width \/ 2;\n+            int maxH = gcBounds.height \/ 2;\n+            int minW = FRAME_W;\n+            int minH = FRAME_H;\n+            int incW = 10, incH = 10, cnt = 0;\n+            Robot robot = null;\n+            if (!nocheck && gc.getColorModel().getPixelSize() > 8) {\n+                try {\n+                    robot = new Robot();\n+                    robot.setAutoDelay(100);\n+                    robot.mouseMove(0,0);\n+                } catch (AWTException ex) {\n+                    System.err.println(\"Robot creation failed, continuing.\");\n@@ -148,2 +132,2 @@\n-                frame.setSize(w, h);\n-                cnt = 0;\n+            } else {\n+                System.err.println(\"No screen rendering checks.\");\n@@ -151,3 +135,2 @@\n-\n-            \/\/ try to put the device into non-default state, for example,\n-            \/\/ this operation below will set the transform\n+            VolatileImage vi = gc.\n+                createCompatibleVolatileImage(IMAGE_W, IMAGE_H);\n@@ -155,27 +138,50 @@\n-            Graphics2D vig = (Graphics2D)vi.getGraphics();\n-            vig.rotate(30.0f, vi.getWidth()\/2, vi.getHeight()\/2);\n-            vig.drawImage(output, 0, 0,\n-                          vi.getWidth(), vi.getHeight(), null);\n-\n-            Insets in = frame.getInsets();\n-            frame.getGraphics().drawImage(output, in.left, in.top, null);\n-            if (cnt == 90 && robot != null) {\n-                robot.waitForIdle();\n-                \/\/ area where we blitted to should be either white or green\n-                Point p = frame.getLocationOnScreen();\n-                p.translate(in.left+10, in.top+10);\n-                BufferedImage bi =\n-                    robot.createScreenCapture(\n-                        new Rectangle(p.x, p.y, IMAGE_W\/2, IMAGE_H\/2));\n-                int accepted1[] = { Color.white.getRGB(), Color.green.getRGB()};\n-                checkBI(bi, accepted1);\n-\n-                \/\/ the are where we didn't render should stay white\n-                p = frame.getLocationOnScreen();\n-                p.translate(in.left, in.top+IMAGE_H+5);\n-                bi = robot.createScreenCapture(\n-                    new Rectangle(p.x, p.y,\n-                                  frame.getWidth()-in.left-in.right,\n-                                  frame.getHeight()-in.top-in.bottom-5-IMAGE_H));\n-                int accepted2[] = { Color.white.getRGB() };\n-                checkBI(bi, accepted2);\n+            long timeStarted = System.currentTimeMillis();\n+            while ((System.currentTimeMillis() - timeStarted) < RUN_TIME) {\n+\n+                if (++cnt > 100) {\n+                    int w = frame.getWidth() + incW;\n+                    int h = frame.getHeight() + incH;\n+                    if (w < minW || w > maxW ) {\n+                        incW = -incW;\n+                    }\n+                    if (h < minH || h > maxH ) {\n+                        incH = -incH;\n+                    }\n+                    frame.setSize(w, h);\n+                    cnt = 0;\n+                }\n+                \/\/ try to put the device into non-default state, for example,\n+                \/\/ this operation below will set the transform\n+                vi.validate(gc);\n+                Graphics2D vig = (Graphics2D)vi.getGraphics();\n+                vig.rotate(30.0f, IMAGE_W\/2, IMAGE_H\/2);\n+                vig.drawImage(output, 0, 0,\n+                              IMAGE_W, IMAGE_H, null);\n+\n+                frame.getGraphics().\n+                    drawImage(output, 0, 0, null);\n+                if (cnt == 90 && robot != null) {\n+                    robot.waitForIdle();\n+                    \/\/ area where we blit and should be either white or green\n+                    Point p = frame.getLocationOnScreen();\n+                    p.translate(10, 10);\n+                    BufferedImage bi =\n+                        robot.createScreenCapture(\n+                            new Rectangle(p.x, p.y,\n+                                          (IMAGE_W \/ 2), (IMAGE_H \/ 2)));\n+                    int accepted1[] = {Color.white.getRGB(),\n+                                       Color.green.getRGB()};\n+                    checkBI(bi, accepted1);\n+\n+                    \/\/ the area where we didn't render should stay white\n+                    robot.waitForIdle();\n+                    p = frame.getLocationOnScreen();\n+                    p.translate(10, IMAGE_H + 10);\n+                    bi = robot.createScreenCapture(\n+                        new Rectangle(p.x, p.y,\n+                                      frame.getWidth() - 20,\n+                                      frame.getHeight() - 20 - (IMAGE_H)));\n+                    int accepted2[] = { Color.white.getRGB() };\n+                    checkBI(bi, accepted2);\n+                }\n+                Thread.yield();\n@@ -183,2 +189,2 @@\n-\n-            Thread.yield();\n+        } finally {\n+            frame.dispose();\n@@ -186,1 +192,0 @@\n-        frame.dispose();\n@@ -193,1 +198,5 @@\n-                int pix = bi.getRGB(x, y);\n+                int actual = bi.getRGB(x, y);\n+                int alpha = (actual >> 24) & 0xFF;\n+                int red = (actual >> 16) & 0xFF;\n+                int green = (actual >> 8) & 0xFF;\n+                int blue = (actual) & 0xFF;\n@@ -196,1 +205,8 @@\n-                    if (pix == acc) {\n+                    int accAlpha = (acc >> 24) & 0xFF;\n+                    int accRed = (acc >> 16) & 0xFF;\n+                    int accGreen = (acc >> 8) & 0xFF;\n+                    int accBlue = (acc) & 0xFF;\n+                    if (!(Math.abs(alpha - accAlpha) > tolerance ||\n+                          Math.abs(red - accRed) > tolerance ||\n+                          Math.abs(green - accGreen) > tolerance ||\n+                          Math.abs(blue - accBlue) > tolerance)) {\n@@ -207,1 +223,0 @@\n-\n@@ -210,1 +225,2 @@\n-                                         \" rgb=0x\" + Integer.toHexString(pix));\n+                                         \" rgb=0x\" + Integer.\n+                                         toHexString(actual));\n","filename":"test\/jdk\/sun\/java2d\/DirectX\/OnScreenRenderingResizeTest\/OnScreenRenderingResizeTest.java","additions":125,"deletions":109,"binary":false,"changes":234,"status":"modified"}]}