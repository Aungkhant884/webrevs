{"files":[{"patch":"@@ -125,0 +125,1 @@\n+                    \"CompileThreshold\",\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.stream.Collectors;\n@@ -100,1 +101,2 @@\n-        String[] jtregVMFlags = Utils.getTestJavaOpts();\n+        \/\/ Ignore CompileCommand flags which have an impact on the profiling information.\n+        List<String> jtregVMFlags = Arrays.stream(Utils.getTestJavaOpts()).filter(s -> !s.contains(\"CompileThreshold\")).collect(Collectors.toList());\n@@ -102,1 +104,1 @@\n-            cmds.addAll(Arrays.asList(jtregVMFlags));\n+            cmds.addAll(jtregVMFlags);\n@@ -114,1 +116,1 @@\n-            cmds.addAll(Arrays.asList(jtregVMFlags));\n+            cmds.addAll(jtregVMFlags);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/TestVMProcess.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.driver.IRViolationException;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8276546\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compMode != \"Xcomp\" & vm.compiler1.enabled & vm.compiler2.enabled & vm.flagless\n+ * @summary Test that CompileThreshold flag is ignored when passed as Java\/VM option to the framework.\n+ *          Normally, the framework should be called with driver.\n+ * @library \/test\/lib \/testlibrary_tests \/\n+ * @run main\/othervm -XX:CompileThreshold=12 -XX:+UseG1GC ir_framework.tests.TestCompileThreshold\n+ *\/\n+\n+public class TestCompileThreshold {\n+    public int iFld = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            \/\/ CompileThreshold=12 passed to the JTreg test is ignored even though we prefer command line flags.\n+            \/\/ CompileThreshold=10 is user defined and passed directly to the framework and thus not ignored.\n+            \/\/ InterpreterProfilePercentage=0 ensures that we compile exactly after 10 invocations.\n+            TestFramework.runWithFlags(\"-XX:CompileThreshold=10\", \"-XX:InterpreterProfilePercentage=0\",\n+                                       \"-XX:-TieredCompilation\", \"-DTest=testWithCompileThreshold\",\n+                                       \"-DPreferCommandLineFlags=true\");\n+        } catch (IRViolationException e) {\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Failed IR Rules (1)\"), \"exactly one rule failed\");\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"testWithCompileThreshold()\"),\n+                               \"testWithCompileThreshold() failed\");\n+        }\n+\n+        try {\n+            TestFramework.runWithFlags(\"-XX:InterpreterProfilePercentage=0\", \"-XX:-TieredCompilation\",\n+                                       \"-DTest=testWithoutCompileThreshold\");\n+        } catch (IRViolationException e) {\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"Failed IR Rules (1)\"), \"exactly one rule failed\");\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"testWithoutCompileThreshold()\"),\n+                               \"testWithoutCompileThreshold() failed\");\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.CALL, \"1\"}) \/\/ fails\n+    public void testWithCompileThreshold() {\n+        iFld++;\n+    }\n+\n+    @Run(test = \"testWithCompileThreshold\")\n+    @Warmup(20)\n+    public void runTestWithCompileThreshold(RunInfo info) {\n+        if (iFld == 10) {\n+            TestFramework.assertNotCompiled(info.getTest());\n+        } else if (iFld == 11) {\n+            \/\/ CompileThreshold=10 is passed directly as a flag to the framework.\n+            \/\/ Therefore, testWithCompileThreshold() must be compiled by now.\n+            TestFramework.assertCompiled(info.getTest());\n+        }\n+        testWithCompileThreshold();\n+    }\n+\n+\n+    @Test\n+    @IR(counts = {IRNode.CALL, \"1\"}) \/\/ fails\n+    public void testWithoutCompileThreshold() {\n+        iFld++;\n+    }\n+\n+    @Run(test = \"testWithoutCompileThreshold\")\n+    @Warmup(20)\n+    public void runTestWithoutCompileThreshold(RunInfo info) {\n+        testWithCompileThreshold();\n+        if (info.isWarmUp()) {\n+            \/\/ CompileThreshold=12 is passed to the JTreg test but not directly to the framework.\n+            \/\/ Therefore, it is ignored and we do not trigger a compilation until the framework does.\n+            TestFramework.assertNotCompiled(info.getTest());\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestCompileThreshold.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}