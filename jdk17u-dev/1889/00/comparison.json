{"files":[{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ @test\n+ @bug 4908468\n+ @summary Linux Empty Choice throws NPE\n+ @key headful\n+ @run main EmptyChoiceTest\n+*\/\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class EmptyChoiceTest\n+{\n+    Frame frame;\n+    Choice choice = null;\n+\n+    public static void main(String[] args) throws\n+            InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            EmptyChoiceTest emptyChoiceTest = new EmptyChoiceTest();\n+            emptyChoiceTest.init();\n+            emptyChoiceTest.test();\n+        });\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        frame.setLayout(new BorderLayout());\n+        choice = new Choice();\n+        frame.add(choice, BorderLayout.NORTH);\n+        frame.setSize(200, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    public void test () {\n+        try {\n+            int iWidth = choice.getWidth();\n+            int iHeight = choice.getHeight();\n+            Image componentImage =\n+                choice.createImage(iWidth, iHeight);\n+            Graphics graphics =\n+                componentImage.getGraphics();\n+            graphics.setClip(0, 0, iWidth, iHeight);\n+            choice.printAll(graphics);\n+            System.out.println(\"PrintAll successful!\");\n+        } catch (NullPointerException exp) {\n+            throw new RuntimeException(\"Test failed. \" +\n+                    \"Empty Choice printAll throws NullPointerException\");\n+        } catch (Exception exc){\n+            throw new RuntimeException(\"Test failed.\", exc);\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/EmptyChoiceTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ @test\n+ @bug 4115130\n+ @summary Tests Inserting\/Removing items doesn't cause crash.\n+ @key headful\n+ @run main InsertRemoveTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class InsertRemoveTest {\n+    Choice choice1;\n+    Choice choice2;\n+    Choice choice3;\n+    Frame f;\n+    int itemCount = 0;\n+    int iterCount = 0;\n+\n+    public static void main(String[] args)\n+            throws InterruptedException, InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> new InsertRemoveTest().start());\n+    }\n+\n+    public void start() {\n+        f = new Frame(\"Check Choice\");\n+        f.setLayout(new BorderLayout());\n+\n+        choice1 = new Choice();\n+        choice2 = new Choice();\n+        choice3 = new Choice();\n+\n+        f.add(choice1, BorderLayout.NORTH);\n+        f.add(choice3, BorderLayout.CENTER);\n+        f.add(choice2, BorderLayout.SOUTH);\n+\n+        f.pack();\n+        f.setLocationRelativeTo(null);\n+        f.setVisible(true);\n+\n+        try {\n+            for (int i = 0; i < 50; i++) {\n+                if (choice1 != null && itemCount < 40) {\n+                    choice1.insert(\"I am Choice, yes I am : \" + iterCount,\n+                            0);\n+                    choice2.add(\"I am the same, yes I am : \" + iterCount);\n+                    choice3.insert(\"I am the same, yes I am : \" + iterCount,\n+                            10);\n+                    itemCount++;\n+                    iterCount++;\n+                }\n+                if (itemCount >= 20 && choice1 != null\n+                        && choice1.getItemCount() > 0) {\n+                    choice1.remove(0);\n+                    choice2.remove(10);\n+                    choice3.remove(19);\n+                    itemCount--;\n+                }\n+                f.validate();\n+            }\n+        } finally {\n+            f.dispose();\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/InsertRemoveTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6246503\n+  @summary Disabling a choice after selection locks keyboard, \\\n+           mouse and makes the system unusable\n+  @key headful\n+  @run main OpenedChoiceHangs\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class OpenedChoiceHangs implements ItemListener {\n+    static final Object FOCUS_LOCK = new Object();\n+\n+    Frame frame;\n+    Choice ch = new Choice();\n+    Button b = new Button(\"A button\");\n+    Robot robot;\n+\n+    public static void main(String[] args)\n+            throws InterruptedException, InvocationTargetException {\n+        OpenedChoiceHangs openedChoiceHangs = new OpenedChoiceHangs();\n+        EventQueue.invokeAndWait(openedChoiceHangs::init);\n+        openedChoiceHangs.test();\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+\n+        frame.setLayout(new FlowLayout());\n+        for (int i = 1; i < 10; i++) {\n+            ch.add(\"item \" + i);\n+        }\n+        frame.add(ch);\n+        frame.add(b);\n+        ch.setBackground(new Color(255, 0, 0));\n+        ch.setForeground(new Color(255, 0, 0));\n+        ch.addItemListener(this);\n+\n+        frame.setSize(200, 200);\n+        frame.setVisible(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.validate();\n+    }\n+\n+    public void test() {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+            robot.delay(1000);\n+            robot.mouseMove(ch.getLocationOnScreen().x + ch.getWidth() \/ 2,\n+                    ch.getLocationOnScreen().y + ch.getHeight() \/ 2);\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(1000);\n+            if (!ch.isFocusOwner()) {\n+                synchronized (FOCUS_LOCK) {\n+                    FOCUS_LOCK.wait(3000);\n+                }\n+            }\n+            if (!ch.isFocusOwner()){\n+                throw new RuntimeException(\n+                        \"Test failed. Choice has no focus after mouse press.\");\n+            }\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.delay(1000);\n+\n+            robot.keyPress(KeyEvent.VK_UP);\n+            robot.keyRelease(KeyEvent.VK_UP);\n+            robot.delay(1000);\n+\n+            Color color = robot.getPixelColor(\n+                    ch.getLocationOnScreen().x + ch.getWidth() \/ 2,\n+                    ch.getLocationOnScreen().y + ch.getHeight() * 4);\n+            System.out.println(\"Color is \" + color);\n+            if (color.equals(new Color(255, 0,0))){\n+                throw new RuntimeException(\n+                        \"Test failed. Choice is disabled and still opened. \");\n+            }\n+        } catch (AWTException e) {\n+            throw new RuntimeException(\n+                    \"Test interrupted due to AWTException. Robot=\" + robot, e);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Test interrupted. Robot=\" + robot, e);\n+        } finally {\n+            EventQueue.invokeLater(frame::dispose);\n+        }\n+\n+        System.out.println(\"Test passed: Choice became closed after disabling.\");\n+    }\n+\n+    public void itemStateChanged (ItemEvent ie) {\n+        System.out.println(\"Choice Item has changed: \"+ie);\n+        ch.setEnabled(false);\n+    }\n+    public void focusGained(FocusEvent fEvent){\n+        System.out.println(\"focusGained\"+fEvent);\n+        synchronized(FOCUS_LOCK){\n+            FOCUS_LOCK.notify();\n+        }\n+    }\n+\n+    public void focusLost(FocusEvent fEvent){\n+        System.out.println(\"focusLost\"+fEvent);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/OpenedChoiceHangs.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6259328\n+  @summary Choice scrolls when dragging the parent frame while drop-down \\\n+            is active\n+  @key headful\n+  @run main PressOutsideOpenedChoice\n+*\/\n+\n+\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class PressOutsideOpenedChoice extends Frame {\n+    Robot robot;\n+    Choice choice1 = new Choice();\n+    Point pt;\n+\n+    public static void main(String[] args)\n+            throws InterruptedException, InvocationTargetException {\n+        PressOutsideOpenedChoice pressOutsideOpenedChoice =\n+                new PressOutsideOpenedChoice();\n+        EventQueue.invokeAndWait(pressOutsideOpenedChoice::init);\n+        pressOutsideOpenedChoice.start();\n+    }\n+\n+    public void init() {\n+        for (int i = 1; i < 50; i++) {\n+            choice1.add(\"item-\" + i);\n+        }\n+        choice1.setForeground(Color.red);\n+        choice1.setBackground(Color.red);\n+        add(choice1);\n+        setLayout(new FlowLayout());\n+        setSize (200,200);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+        validate();\n+    }\n+\n+    public void start() {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+            robot.delay(1000);\n+            testPressOutsideOpenedChoice(InputEvent.BUTTON1_DOWN_MASK);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(\"Test failed. Exception thrown: \" + e);\n+        } finally {\n+            EventQueue.invokeLater(this::dispose);\n+        }\n+    }\n+\n+    public void testPressOutsideOpenedChoice(int button) {\n+        pt = choice1.getLocationOnScreen();\n+        robot.mouseMove(pt.x + choice1.getWidth() - choice1.getHeight() \/ 4,\n+                pt.y + choice1.getHeight() \/ 2);\n+        robot.delay(100);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        \/\/move mouse outside of the choice\n+        robot.mouseMove(pt.x - choice1.getWidth() \/ 2,\n+                pt.y + choice1.getHeight() \/ 2);\n+        robot.delay(400);\n+        robot.mousePress(button);\n+        robot.mouseRelease(button);\n+        robot.delay(200);\n+        Color color = robot.getPixelColor(pt.x + choice1.getWidth() \/ 2,\n+                pt.y + 3 * choice1.getHeight());\n+        System.out.println(\"color got \" +\n+                robot.getPixelColor(pt.x + choice1.getWidth() \/ 2,\n+                        pt.y + 3 * choice1.getHeight()));\n+        if (color.equals(Color.red)) {\n+            throw new RuntimeException(\"Test failed. Choice didn't close \" +\n+                    \"after mouse press outside of Choice \" + button);\n+        } else {\n+            System.out.println(\"Test passed. \" +\n+                    \"Choice closed with MousePress outside\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/PressOutsideOpenedChoice.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"}]}