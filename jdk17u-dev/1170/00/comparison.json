{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,3 +24,0 @@\n-import java.awt.Graphics;\n-import java.awt.image.BufferedImage;\n-import java.io.IOException;\n@@ -28,2 +25,2 @@\n-import javax.swing.Icon;\n-import javax.swing.filechooser.FileSystemView;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n@@ -49,1 +46,0 @@\n- * @requires !vm.debug\n@@ -55,5 +51,0 @@\n-\/*\n- * note: AWT can throw assertion from GetDiBits() extracting icon\n- * bits in fastdebug mode on windows headless systems. That is why\n- * we have @requires !vm.debug\" above.\n- *\/\n@@ -63,1 +54,1 @@\n-    public void test() throws IOException {\n+    public void test() {\n@@ -66,2 +57,0 @@\n-        BufferedImage[] defaultInstallerIconImg = new BufferedImage[1];\n-\n@@ -69,1 +58,1 @@\n-        long size1 = createInstaller(null, \"WithDefaultIcon\");\n+        var size1 = createInstaller(null, \"WithDefaultIcon\");\n@@ -72,1 +61,1 @@\n-        long size2 = createInstaller(customIcon, \"WithCustomIcon\");\n+        var size2 = createInstaller(customIcon, \"WithCustomIcon\");\n@@ -75,1 +64,1 @@\n-        long size3 = createInstaller(customIcon, null);\n+        var size3 = createInstaller(customIcon, null);\n@@ -77,2 +66,8 @@\n-        TKit.assertTrue(size2 < size1, \"Installer 2 built with custom icon \" +\n-                \"should  be smaller than Installer 1 built with default icon\");\n+        if (Stream.of(size1, size2, size3).allMatch(Optional::<Long>isEmpty)) {\n+            TKit.trace(\n+                    \"Not verifying sizes of installers because they were not created\");\n+            return;\n+        }\n+\n+        TKit.assertTrue(size2.get() < size1.get(), \"Check installer 2 built with custom icon \" +\n+                \"is smaller than Installer 1 built with default icon\");\n@@ -80,2 +75,2 @@\n-        TKit.assertTrue(size3 < size1, \"Installer 3 built with custom icon \" +\n-                \"should be smaller than Installer 1 built with default icon\");\n+        TKit.assertTrue(size3.get() < size1.get(), \"Check installer 3 built with custom icon \" +\n+                \"is smaller than Installer 1 built with default icon\");\n@@ -85,1 +80,1 @@\n-    private long createInstaller(Path icon, String nameSuffix) throws IOException {\n+    private Optional<Long> createInstaller(Path icon, String nameSuffix) {\n@@ -99,0 +94,3 @@\n+                \/\/ Create installer bundle in the test work directory, ignore\n+                \/\/ value of jpackage.test.output system property.\n+                cmd.setDefaultInputOutput();\n@@ -102,1 +100,1 @@\n-        Path installerExePath[] = new Path[1];\n+        Long installerExeByteCount[] = new Long[1];\n@@ -105,1 +103,4 @@\n-            installerExePath[0] = cmd.outputBundle();\n+            Path installerExePath = cmd.outputBundle();\n+            installerExeByteCount[0] = installerExePath.toFile().length();\n+            TKit.trace(String.format(\"Size of [%s] is %d bytes\",\n+                    installerExePath, installerExeByteCount[0]));\n@@ -110,9 +111,1 @@\n-        long size = 0L;\n-        if (installerExePath[0] != null) {\n-            size = installerExePath[0].toFile().length();\n-            TKit.trace(\" installer: \" + installerExePath[0] + \" - size: \" + size);\n-            if (nameSuffix != null) {\n-                TKit.deleteIfExists(installerExePath[0]);\n-            }\n-        }\n-        return size;\n+        return Optional.ofNullable(installerExeByteCount[0]);\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinInstallerIconTest.java","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"}]}