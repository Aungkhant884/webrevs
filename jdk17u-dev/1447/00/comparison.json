{"files":[{"patch":"@@ -89,0 +89,1 @@\n+    StringDedup::Requests requests;\n@@ -91,1 +92,2 @@\n-                   ShenandoahStringDedup::is_enabled() ? ENQUEUE_DEDUP : NO_DEDUP);\n+                   ShenandoahStringDedup::is_enabled() ? ENQUEUE_DEDUP : NO_DEDUP,\n+                   &requests);\n@@ -137,0 +139,1 @@\n+    StringDedup::Requests requests;\n@@ -147,1 +150,1 @@\n-      ShenandoahMarkRefsClosure<NO_DEDUP> mark_cl(q, rp);\n+      ShenandoahMarkRefsClosure             mark_cl(q, rp);\n@@ -154,1 +157,2 @@\n-                   _dedup_string ? ENQUEUE_DEDUP : NO_DEDUP);\n+                   _dedup_string ? ENQUEUE_DEDUP : NO_DEDUP,\n+                   &requests);\n@@ -192,3 +196,1 @@\n-  \/\/ Cannot enable string deduplication during root scanning. Otherwise,\n-  \/\/ may result lock inversion between stack watermark and string dedup queue lock.\n-  ShenandoahMarkRefsClosure<NO_DEDUP> cl(q, _rp);\n+  ShenandoahMarkRefsClosure cl(q, _rp);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-  _stringDedup_requests(),\n@@ -59,1 +58,1 @@\n-void ShenandoahMark::mark_loop_prework(uint w, TaskTerminator *t, ShenandoahReferenceProcessor *rp) {\n+void ShenandoahMark::mark_loop_prework(uint w, TaskTerminator *t, ShenandoahReferenceProcessor *rp, StringDedup::Requests* const req) {\n@@ -69,1 +68,1 @@\n-      using Closure = ShenandoahMarkUpdateRefsMetadataClosure<STRING_DEDUP>;\n+      using Closure = ShenandoahMarkUpdateRefsMetadataClosure;\n@@ -71,1 +70,1 @@\n-      mark_loop_work<Closure, CANCELLABLE>(&cl, ld, w, t);\n+      mark_loop_work<Closure, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n@@ -73,1 +72,1 @@\n-      using Closure = ShenandoahMarkRefsMetadataClosure<STRING_DEDUP>;\n+      using Closure = ShenandoahMarkRefsMetadataClosure;\n@@ -75,1 +74,1 @@\n-      mark_loop_work<Closure, CANCELLABLE>(&cl, ld, w, t);\n+      mark_loop_work<Closure, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n@@ -79,1 +78,1 @@\n-      using Closure = ShenandoahMarkUpdateRefsClosure<STRING_DEDUP>;\n+      using Closure = ShenandoahMarkUpdateRefsClosure;\n@@ -81,1 +80,1 @@\n-      mark_loop_work<Closure, CANCELLABLE>(&cl, ld, w, t);\n+      mark_loop_work<Closure, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n@@ -83,1 +82,1 @@\n-      using Closure = ShenandoahMarkRefsClosure<STRING_DEDUP>;\n+      using Closure = ShenandoahMarkRefsClosure;\n@@ -85,1 +84,1 @@\n-      mark_loop_work<Closure, CANCELLABLE>(&cl, ld, w, t);\n+      mark_loop_work<Closure, CANCELLABLE, STRING_DEDUP>(&cl, ld, w, t, req);\n@@ -93,1 +92,1 @@\n-               bool cancellable, StringDedupMode dedup_mode) {\n+               bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req) {\n@@ -97,1 +96,1 @@\n-        mark_loop_prework<true, NO_DEDUP>(worker_id, terminator, rp);\n+        mark_loop_prework<true, NO_DEDUP>(worker_id, terminator, rp, req);\n@@ -100,1 +99,1 @@\n-        mark_loop_prework<true, ENQUEUE_DEDUP>(worker_id, terminator, rp);\n+        mark_loop_prework<true, ENQUEUE_DEDUP>(worker_id, terminator, rp, req);\n@@ -103,1 +102,1 @@\n-        mark_loop_prework<true, ALWAYS_DEDUP>(worker_id, terminator, rp);\n+        mark_loop_prework<true, ALWAYS_DEDUP>(worker_id, terminator, rp, req);\n@@ -109,1 +108,1 @@\n-        mark_loop_prework<false, NO_DEDUP>(worker_id, terminator, rp);\n+        mark_loop_prework<false, NO_DEDUP>(worker_id, terminator, rp, req);\n@@ -112,1 +111,1 @@\n-        mark_loop_prework<false, ENQUEUE_DEDUP>(worker_id, terminator, rp);\n+        mark_loop_prework<false, ENQUEUE_DEDUP>(worker_id, terminator, rp, req);\n@@ -115,1 +114,1 @@\n-        mark_loop_prework<false, ALWAYS_DEDUP>(worker_id, terminator, rp);\n+        mark_loop_prework<false, ALWAYS_DEDUP>(worker_id, terminator, rp, req);\n@@ -121,2 +120,2 @@\n-template <class T, bool CANCELLABLE>\n-void ShenandoahMark::mark_loop_work(T* cl, ShenandoahLiveData* live_data, uint worker_id, TaskTerminator *terminator) {\n+template <class T, bool CANCELLABLE, StringDedupMode STRING_DEDUP>\n+void ShenandoahMark::mark_loop_work(T* cl, ShenandoahLiveData* live_data, uint worker_id, TaskTerminator *terminator, StringDedup::Requests* const req) {\n@@ -150,1 +149,1 @@\n-        do_task<T>(q, cl, live_data, &t);\n+        do_task<T, STRING_DEDUP>(q, cl, live_data, req, &t);\n@@ -179,1 +178,1 @@\n-        do_task<T>(q, cl, live_data, &t);\n+        do_task<T, STRING_DEDUP>(q, cl, live_data, req, &t);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-  template<class T, StringDedupMode STRING_DEDUP>\n-  static inline void mark_through_ref(T* p, ShenandoahObjToScanQueue* q, ShenandoahMarkingContext* const mark_context, StringDedup::Requests* const req, bool weak);\n+  template<class T>\n+  static inline void mark_through_ref(T* p, ShenandoahObjToScanQueue* q, ShenandoahMarkingContext* const mark_context, bool weak);\n@@ -59,2 +59,2 @@\n-  template <class T>\n-  inline void do_task(ShenandoahObjToScanQueue* q, T* cl, ShenandoahLiveData* live_data, ShenandoahMarkTask* task);\n+  template <class T, StringDedupMode STRING_DEDUP>\n+  inline void do_task(ShenandoahObjToScanQueue* q, T* cl, ShenandoahLiveData* live_data, StringDedup::Requests* const req, ShenandoahMarkTask* task);\n@@ -70,2 +70,2 @@\n-  template <class T, bool CANCELLABLE>\n-  void mark_loop_work(T* cl, ShenandoahLiveData* live_data, uint worker_id, TaskTerminator *t);\n+  template <class T, bool CANCELLABLE,StringDedupMode STRING_DEDUP>\n+  void mark_loop_work(T* cl, ShenandoahLiveData* live_data, uint worker_id, TaskTerminator *t, StringDedup::Requests* const req);\n@@ -74,1 +74,1 @@\n-  void mark_loop_prework(uint worker_id, TaskTerminator *terminator, ShenandoahReferenceProcessor *rp);\n+  void mark_loop_prework(uint worker_id, TaskTerminator *terminator, ShenandoahReferenceProcessor *rp, StringDedup::Requests* const req);\n@@ -76,0 +76,2 @@\n+  template <StringDedupMode STRING_DEDUP>\n+  inline void dedup_string(oop obj, StringDedup::Requests* const req);\n@@ -78,1 +80,1 @@\n-                 bool cancellable, StringDedupMode dedup_mode);\n+                 bool cancellable, StringDedupMode dedup_mode, StringDedup::Requests* const req);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,2 +43,16 @@\n-template <class T>\n-void ShenandoahMark::do_task(ShenandoahObjToScanQueue* q, T* cl, ShenandoahLiveData* live_data, ShenandoahMarkTask* task) {\n+template <StringDedupMode STRING_DEDUP>\n+void ShenandoahMark::dedup_string(oop obj, StringDedup::Requests* const req) {\n+  if (STRING_DEDUP == ENQUEUE_DEDUP) {\n+    if (ShenandoahStringDedup::is_candidate(obj)) {\n+      req->add(obj);\n+    }\n+  } else if (STRING_DEDUP == ALWAYS_DEDUP) {\n+    if (ShenandoahStringDedup::is_string_candidate(obj) &&\n+        !ShenandoahStringDedup::dedup_requested(obj)) {\n+        req->add(obj);\n+    }\n+  }\n+}\n+\n+template <class T, StringDedupMode STRING_DEDUP>\n+void ShenandoahMark::do_task(ShenandoahObjToScanQueue* q, T* cl, ShenandoahLiveData* live_data, StringDedup::Requests* const req, ShenandoahMarkTask* task) {\n@@ -59,0 +73,1 @@\n+      dedup_string<STRING_DEDUP>(obj, req);\n@@ -211,1 +226,0 @@\n-  StringDedup::Requests     _stringdedup_requests;\n@@ -225,9 +239,0 @@\n-    if (ShenandoahStringDedup::is_enabled()) {\n-      do_buffer_impl<ENQUEUE_DEDUP>(buffer, size);\n-    } else {\n-      do_buffer_impl<NO_DEDUP>(buffer, size);\n-    }\n-  }\n-\n-  template<StringDedupMode STRING_DEDUP>\n-  void do_buffer_impl(void **buffer, size_t size) {\n@@ -236,1 +241,1 @@\n-      ShenandoahMark::mark_through_ref<oop, STRING_DEDUP>(p, _queue, _mark_context, &_stringdedup_requests, false);\n+      ShenandoahMark::mark_through_ref<oop>(p, _queue, _mark_context, false);\n@@ -241,2 +246,2 @@\n-template<class T, StringDedupMode STRING_DEDUP>\n-inline void ShenandoahMark::mark_through_ref(T* p, ShenandoahObjToScanQueue* q, ShenandoahMarkingContext* const mark_context, StringDedup::Requests* const req, bool weak) {\n+template<class T>\n+inline void ShenandoahMark::mark_through_ref(T* p, ShenandoahObjToScanQueue* q, ShenandoahMarkingContext* const mark_context, bool weak) {\n@@ -260,10 +265,0 @@\n-\n-      if ((STRING_DEDUP == ENQUEUE_DEDUP) && ShenandoahStringDedup::is_candidate(obj)) {\n-        assert(ShenandoahStringDedup::is_enabled(), \"Must be enabled\");\n-        req->add(obj);\n-      } else if ((STRING_DEDUP == ALWAYS_DEDUP) &&\n-                 ShenandoahStringDedup::is_string_candidate(obj) &&\n-                 !ShenandoahStringDedup::dedup_requested(obj)) {\n-        assert(ShenandoahStringDedup::is_enabled(), \"Must be enabled\");\n-        req->add(obj);\n-      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":20,"deletions":25,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-  StringDedup::Requests     _stringDedup_requests;\n@@ -49,1 +48,1 @@\n-  template <class T, StringDedupMode STRING_DEDUP>\n+  template <class T>\n@@ -68,1 +67,1 @@\n-  template <class T, StringDedupMode STRING_DEDUP>\n+  template <class T>\n@@ -79,1 +78,0 @@\n-template <StringDedupMode STRING_DEDUP>\n@@ -83,1 +81,1 @@\n-  inline void do_oop_work(T* p)     { work<T, STRING_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T>(p); }\n@@ -94,1 +92,0 @@\n-template <StringDedupMode STRING_DEDUP>\n@@ -98,1 +95,1 @@\n-  inline void do_oop_work(T* p)     { work<T, STRING_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T>(p); }\n@@ -110,1 +107,0 @@\n-template <StringDedupMode STRING_DEDUP>\n@@ -114,1 +110,1 @@\n-  inline void do_oop_work(T* p)     { work<T, STRING_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T>(p); }\n@@ -126,1 +122,0 @@\n-template <StringDedupMode STRING_DEDUP>\n@@ -130,1 +125,1 @@\n-  inline void do_oop_work(T* p)     { work<T, STRING_DEDUP>(p); }\n+  inline void do_oop_work(T* p)     { work<T>(p); }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.hpp","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-template<class T, StringDedupMode STRING_DEDUP>\n+template<class T>\n@@ -35,1 +35,1 @@\n-  ShenandoahMark::mark_through_ref<T, STRING_DEDUP>(p, _queue, _mark_context, &_stringDedup_requests, _weak);\n+  ShenandoahMark::mark_through_ref<T>(p, _queue, _mark_context, _weak);\n@@ -38,1 +38,1 @@\n-template<class T, StringDedupMode STRING_DEDUP>\n+template<class T>\n@@ -44,1 +44,1 @@\n-  ShenandoahMarkRefsSuperClosure::work<T, STRING_DEDUP>(p);\n+  ShenandoahMarkRefsSuperClosure::work<T>(p);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOopClosures.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  ShenandoahMark::mark_through_ref<T, NO_DEDUP>(p, _queue, _mark_context, NULL, false);\n+  ShenandoahMark::mark_through_ref<T>(p, _queue, _mark_context, false);\n@@ -134,0 +134,1 @@\n+  StringDedup::Requests requests;\n@@ -137,1 +138,1 @@\n-            ShenandoahStringDedup::is_enabled() ? ALWAYS_DEDUP : NO_DEDUP);\n+            ShenandoahStringDedup::is_enabled() ? ALWAYS_DEDUP : NO_DEDUP, &requests);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,0 +39,12 @@\n+\/*\n+ * @test TestStringDeduplicationInterned\n+ * @summary Test string deduplication of interned strings\n+ * @bug 8029075\n+ * @requires vm.gc.Shenandoah\n+ * @library \/test\/lib\n+ * @library \/\n+ * @modules java.base\/jdk.internal.misc:open\n+ * @modules java.base\/java.lang:open\n+ *          java.management\n+ * @run driver gc.stringdedup.TestStringDeduplicationInterned Shenandoah\n+ *\/\n","filename":"test\/hotspot\/jtreg\/gc\/stringdedup\/TestStringDeduplicationInterned.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}