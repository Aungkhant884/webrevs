{"files":[{"patch":"@@ -65,7 +65,0 @@\n-void G1BarrierSet::enqueue(oop pre_val) {\n-  \/\/ Nulls should have been already filtered.\n-  assert(oopDesc::is_oop(pre_val, true), \"Error\");\n-  SATBMarkQueue& queue = G1ThreadLocalData::satb_mark_queue(Thread::current());\n-  G1BarrierSet::satb_mark_queue_set().enqueue(queue, pre_val);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -61,2 +61,4 @@\n-  \/\/ pre-marking object graph.\n-  static void enqueue(oop pre_val);\n+  \/\/ pre-marking object graph. Prefer the version that takes location, as it\n+  \/\/ can avoid touching the heap unnecessarily.\n+  template <class T> static void enqueue(T* dst);\n+  static void enqueue_preloaded(oop pre_val);\n@@ -64,1 +66,1 @@\n-  static void enqueue_if_weak(DecoratorSet decorators, oop value);\n+  static void enqueue_preloaded_if_weak(DecoratorSet decorators, oop value);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"gc\/g1\/g1ThreadLocalData.hpp\"\n@@ -36,0 +37,23 @@\n+inline void G1BarrierSet::enqueue_preloaded(oop pre_val) {\n+  \/\/ Nulls should have been already filtered.\n+  assert(oopDesc::is_oop(pre_val, true), \"Error\");\n+\n+  G1SATBMarkQueueSet& queue_set = G1BarrierSet::satb_mark_queue_set();\n+  if (!queue_set.is_active()) return;\n+\n+  SATBMarkQueue& queue = G1ThreadLocalData::satb_mark_queue(Thread::current());\n+  queue_set.enqueue_known_active(queue, pre_val);\n+}\n+\n+template <class T>\n+inline void G1BarrierSet::enqueue(T* dst) {\n+  G1SATBMarkQueueSet& queue_set = G1BarrierSet::satb_mark_queue_set();\n+  if (!queue_set.is_active()) return;\n+\n+  T heap_oop = RawAccess<MO_RELAXED>::oop_load(dst);\n+  if (!CompressedOops::is_null(heap_oop)) {\n+    SATBMarkQueue& queue = G1ThreadLocalData::satb_mark_queue(Thread::current());\n+    queue_set.enqueue_known_active(queue, CompressedOops::decode_not_null(heap_oop));\n+  }\n+}\n+\n@@ -43,4 +67,1 @@\n-  T heap_oop = RawAccess<MO_RELAXED>::oop_load(field);\n-  if (!CompressedOops::is_null(heap_oop)) {\n-    enqueue(CompressedOops::decode_not_null(heap_oop));\n-  }\n+  enqueue(field);\n@@ -58,1 +79,1 @@\n-inline void G1BarrierSet::enqueue_if_weak(DecoratorSet decorators, oop value) {\n+inline void G1BarrierSet::enqueue_preloaded_if_weak(DecoratorSet decorators, oop value) {\n@@ -68,1 +89,1 @@\n-    enqueue(value);\n+    enqueue_preloaded(value);\n@@ -77,1 +98,1 @@\n-  enqueue_if_weak(decorators, value);\n+  enqueue_preloaded_if_weak(decorators, value);\n@@ -86,1 +107,1 @@\n-  enqueue_if_weak(decorators, value);\n+  enqueue_preloaded_if_weak(decorators, value);\n@@ -94,1 +115,1 @@\n-  enqueue_if_weak(AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength<decorators>(base, offset), value);\n+  enqueue_preloaded_if_weak(AccessBarrierSupport::resolve_possibly_unknown_oop_ref_strength<decorators>(base, offset), value);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.inline.hpp","additions":30,"deletions":9,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2295,1 +2295,1 @@\n-  G1BarrierSet::enqueue(obj);\n+  G1BarrierSet::enqueue_preloaded(obj);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}