{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import java.security.cert.CertificateParsingException;\n@@ -50,2 +49,0 @@\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n@@ -4927,11 +4924,0 @@\n-                    SimpleDateFormat formatter = new SimpleDateFormat(\"EEE MMM dd HH:mm:ss Z yyyy\");\n-                    Date dateObj = null;\n-                    try {\n-                        dateObj = formatter.parse(denyAfterDate);\n-                    } catch (ParseException e2) {\n-                        throw new Exception(rb.getString(\n-                                \"Unable.to.parse.denyAfter.string.in.exception.message\"));\n-                    }\n-                    formatter = new SimpleDateFormat(\"yyyy-MM-dd\");\n-                    denyAfterDate = formatter.format(dateObj);\n-\n@@ -5246,0 +5232,1 @@\n+    @Override\n@@ -5250,0 +5237,1 @@\n+    @Override\n@@ -5257,0 +5245,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,4 @@\n+import java.time.DateTimeException;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.time.ZoneId;\n@@ -45,2 +49,0 @@\n-import java.util.Calendar;\n-import java.util.Date;\n@@ -55,1 +57,0 @@\n-import java.util.TimeZone;\n@@ -703,1 +704,2 @@\n-        private Date denyAfterDate;\n+        private final ZonedDateTime zdt;\n+        private final Instant denyAfterDate;\n@@ -706,2 +708,0 @@\n-            Calendar c;\n-\n@@ -711,1 +711,1 @@\n-                debug.println(\"DenyAfterConstraint read in as:  year \" +\n+                debug.println(\"DenyAfterConstraint read in as: year \" +\n@@ -715,15 +715,5 @@\n-            c = new Calendar.Builder().setTimeZone(TimeZone.getTimeZone(\"GMT\"))\n-                    .setDate(year, month - 1, day).build();\n-\n-            if (year > c.getActualMaximum(Calendar.YEAR) ||\n-                    year < c.getActualMinimum(Calendar.YEAR)) {\n-                throw new IllegalArgumentException(\n-                        \"Invalid year given in constraint: \" + year);\n-            }\n-            if ((month - 1) > c.getActualMaximum(Calendar.MONTH) ||\n-                    (month - 1) < c.getActualMinimum(Calendar.MONTH)) {\n-                throw new IllegalArgumentException(\n-                        \"Invalid month given in constraint: \" + month);\n-            }\n-            if (day > c.getActualMaximum(Calendar.DAY_OF_MONTH) ||\n-                    day < c.getActualMinimum(Calendar.DAY_OF_MONTH)) {\n+            try {\n+                zdt = ZonedDateTime\n+                    .of(year, month, day, 0, 0, 0, 0, ZoneId.of(\"GMT\"));\n+                denyAfterDate = zdt.toInstant();\n+            } catch (DateTimeException dte) {\n@@ -731,1 +721,1 @@\n-                        \"Invalid Day of Month given in constraint: \" + day);\n+                    \"Invalid denyAfter date\", dte);\n@@ -734,1 +724,0 @@\n-            denyAfterDate = c.getTime();\n@@ -737,1 +726,1 @@\n-                        denyAfterDate);\n+                        zdt.toLocalDate());\n@@ -752,2 +741,1 @@\n-            Date currentDate;\n-            String errmsg;\n+            Instant currentDate;\n@@ -756,1 +744,1 @@\n-                currentDate = cp.getDate();\n+                currentDate = cp.getDate().toInstant();\n@@ -758,1 +746,1 @@\n-                currentDate = new Date();\n+                currentDate = Instant.now();\n@@ -761,1 +749,1 @@\n-            if (!denyAfterDate.after(currentDate)) {\n+            if (!denyAfterDate.isAfter(currentDate)) {\n@@ -768,1 +756,1 @@\n-                        denyAfterDate + \"; params date: \" +\n+                        zdt.toLocalDate() + \"; params date: \" +\n@@ -787,1 +775,1 @@\n-            return denyAfterDate.after(new Date());\n+            return denyAfterDate.isAfter(Instant.now());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":21,"deletions":33,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+public class CustomClassLoader extends ClassLoader {\n+\n+    public CustomClassLoader(ClassLoader parent) {\n+        super(parent);\n+    }\n+\n+    @Override\n+    public Class<?> findClass(String name) throws ClassNotFoundException {\n+        try (InputStream is = getClass().getClassLoader()\n+                .getResourceAsStream(name + \".class\")) {\n+            byte[] buf = is.readAllBytes();\n+            return defineClass(name, buf, 0, buf.length);\n+        } catch (IOException e) {\n+            throw new ClassNotFoundException(e.getMessage());\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/SignedJar\/CustomClassLoader.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8280890\n+ * @library \/test\/lib\n+ * @build SignedJarWithCustomClassLoader CustomClassLoader\n+ * @run main\/othervm SignedJarWithCustomClassLoader\n+ * @summary Make sure java.system.class.loader property can be used when custom\n+ *     class loader is inside signed jar\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarUtils;\n+\n+public class SignedJarWithCustomClassLoader {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ compile the Main program\n+        String main = \"\"\"\n+                      public class Main {\n+                          public static void main(String[] args) {}\n+                      }\n+                      \"\"\";\n+        String testClasses = System.getProperty(\"test.classes\", \"\");\n+        ClassFileInstaller.writeClassToDisk(\"Main\",\n+             InMemoryJavaCompiler.compile(\"Main\", main),\n+             testClasses);\n+\n+        \/\/ create the jar file\n+        Path classes = Paths.get(testClasses);\n+        JarUtils.createJarFile(Paths.get(\"test.jar\"), classes,\n+            classes.resolve(\"CustomClassLoader.class\"),\n+            classes.resolve(\"Main.class\"));\n+\n+        \/\/ create signer's keypair\n+        SecurityTools.keytool(\"-genkeypair -keyalg RSA -keystore ks \" +\n+                              \"-storepass changeit -dname CN=test -alias test\")\n+                     .shouldHaveExitValue(0);\n+\n+        \/\/ sign jar\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                                \"-signedjar signed.jar test.jar test\")\n+                     .shouldHaveExitValue(0);\n+\n+        \/\/ run app with system class loader set to custom classloader\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-cp\", \"signed.jar\",\n+            \"-Djava.system.class.loader=CustomClassLoader\", \"Main\");\n+        ProcessTools.executeProcess(pb)\n+                    .shouldHaveExitValue(0);\n+\n+        \/\/ sign jar again, but this time with SHA-1 which is disabled\n+        SecurityTools.jarsigner(\"-keystore ks -storepass changeit \" +\n+                                \"-digestalg SHA-1 -sigalg SHA1withRSA \" +\n+                                \"-signedjar signed.jar test.jar test\")\n+                     .shouldHaveExitValue(0);\n+\n+        \/\/ run app again, should still succeed even though SHA-1 is disabled\n+        pb = ProcessTools.createJavaProcessBuilder(\n+            \"-cp\", \"signed.jar\",\n+            \"-Djava.system.class.loader=CustomClassLoader\", \"Main\");\n+        ProcessTools.executeProcess(pb)\n+                    .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/java\/security\/SignedJar\/SignedJarWithCustomClassLoader.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"}]}