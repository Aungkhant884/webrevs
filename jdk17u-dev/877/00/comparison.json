{"files":[{"patch":"@@ -35,1 +35,3 @@\n-  intptr_t* sp = Atomic::load_acquire(&_anchor._last_Java_sp);\n+  \/\/ Only called by current thread or when the thread is suspended.\n+  \/\/ No memory barrier needed, here. Only writer must write sp last (for use by profiler).\n+  intptr_t* sp = last_Java_sp();\n@@ -53,3 +55,6 @@\n-    frame last_frame = pd_last_frame();\n-    if (last_frame.pc() == nullptr) return false;\n-    *fr_addr = last_frame;\n+    intptr_t* sp = last_Java_sp();\n+    address pc = _anchor.last_Java_pc();\n+    \/\/ pc can be seen as null because not all writers use store pc + release store sp.\n+    \/\/ Simply discard the sample in this very rare case.\n+    if (pc == nullptr) return false;\n+    *fr_addr = frame(sp, pc);\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/thread_aix_ppc.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,1 +34,3 @@\n-  intptr_t* sp = Atomic::load_acquire(&_anchor._last_Java_sp);\n+  \/\/ Only called by current thread or when the thread is suspended.\n+  \/\/ No memory barrier needed, here. Only writer must write sp last (for use by profiler).\n+  intptr_t* sp = last_Java_sp();\n@@ -52,3 +54,6 @@\n-    frame last_frame = pd_last_frame();\n-    if (last_frame.pc() == nullptr) return false;\n-    *fr_addr = last_frame;\n+    intptr_t* sp = last_Java_sp();\n+    address pc = _anchor.last_Java_pc();\n+    \/\/ pc can be seen as null because not all writers use store pc + release store sp.\n+    \/\/ Simply discard the sample in this very rare case.\n+    if (pc == nullptr) return false;\n+    *fr_addr = frame(sp, pc);\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/thread_linux_ppc.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}