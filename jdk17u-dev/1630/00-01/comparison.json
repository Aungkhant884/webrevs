{"files":[{"patch":"@@ -117,0 +117,40 @@\n+typedef ResourceHashtable<\n+  LogFileStreamOutput*,\n+  uint32_t,\n+  primitive_hash<LogFileStreamOutput*>,\n+  primitive_equals<LogFileStreamOutput*>,\n+  17\/*table_size*\/,\n+  ResourceObj::RESOURCE_AREA,\n+  mtLogging>  ResourceAsyncLogMap;\n+\n+class CopyIterator {\n+ private:\n+  ResourceAsyncLogMap& _dst;\n+\n+ public:\n+  CopyIterator(ResourceAsyncLogMap& dst): _dst(dst) {}\n+\n+  bool do_entry(LogFileStreamOutput* output, uint32_t& counter) {\n+    if (counter > 0) {\n+      bool created = _dst.put(output, counter);\n+      assert(created == true, \"sanity check\");\n+      counter = 0;\n+    }\n+    return true;\n+  }\n+};\n+\n+class OutputIterator {\n+ private:\n+  const LogDecorations _decorations {LogLevel::Warning, LogTagSetMapping<LogTag::__NO_TAG>::tagset(),\n+                                     LogDecorators::All};\n+ public:\n+  bool do_entry(LogFileStreamOutput* output, uint32_t counter) {\n+    if (counter > 0) {\n+      stringStream ss;\n+      ss.print(UINT32_FORMAT_W(6) \" messages dropped due to async logging\", counter);\n+      output->write_blocking(_decorations, ss.as_string(false));\n+    }\n+    return true;\n+  }\n+};\n@@ -120,5 +160,1 @@\n-  ResourceHashtable<LogFileStreamOutput*, uint32_t,\n-                    primitive_hash<LogFileStreamOutput*>,\n-                    primitive_equals<LogFileStreamOutput*>,\n-                    17\/*table_size*\/, ResourceObj::RESOURCE_AREA,\n-                    mtLogging> snapshot;\n+  ResourceAsyncLogMap snapshot;\n@@ -134,8 +170,2 @@\n-    _stats.iterate([&] (LogFileStreamOutput* output, uint32_t& counter) {\n-      if (counter > 0) {\n-        bool created = snapshot.put(output, counter);\n-        assert(created == true, \"sanity check\");\n-        counter = 0;\n-      }\n-      return true;\n-    });\n+    CopyIterator cp_iter(snapshot);\n+    _stats.iterate(&cp_iter);\n@@ -159,10 +189,3 @@\n-  LogDecorations decorations(LogLevel::Warning, LogTagSetMapping<LogTag::__NO_TAG>::tagset(),\n-                             LogDecorators::All);\n-  snapshot.iterate([&](LogFileStreamOutput* output, uint32_t& counter) {\n-    if (counter > 0) {\n-      stringStream ss;\n-      ss.print(UINT32_FORMAT_W(6) \" messages dropped due to async logging\", counter);\n-      output->write_blocking(decorations, ss.as_string(false));\n-    }\n-    return true;\n-  });\n+\n+  OutputIterator output_iter;\n+  snapshot.iterate(&output_iter);\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":46,"deletions":23,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -61,3 +61,7 @@\n-  using AsyncLogMap = ResourceHashtable<LogFileStreamOutput*, uint32_t, primitive_hash<LogFileStreamOutput*>,\n-                                        primitive_equals<LogFileStreamOutput*>, 17,\n-                                        ResourceObj::C_HEAP, mtLogging>;\n+  using AsyncLogMap = ResourceHashtable<\n+    LogFileStreamOutput*,\n+    uint32_t,\n+    primitive_hash<LogFileStreamOutput*>,\n+    primitive_equals<LogFileStreamOutput*>,\n+    17\/*table_size*\/,\n+    ResourceObj::C_HEAP, mtLogging>;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -187,8 +187,0 @@\n-    auto function = [&] (K& k, V& v) {\n-      return iter->do_entry(k, v);\n-    };\n-    iterate(function);\n-  }\n-\n-  template<typename Function>\n-  void iterate(Function function) const { \/\/ lambda enabled API\n@@ -196,1 +188,0 @@\n-\n@@ -200,1 +191,1 @@\n-        bool cont = function(node->_key, node->_value);\n+        bool cont = iter->do_entry(node->_key, node->_value);\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}