{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,1 @@\n+      assert(_hwm != state._hwm, \"Sanity check: HWM moves when we have later chunks\");\n@@ -123,3 +124,0 @@\n-    _chunk = state._chunk;      \/\/ Roll back to saved chunk.\n-    _hwm = state._hwm;\n-    _max = state._max;\n@@ -127,3 +125,23 @@\n-    \/\/ Clear out this chunk (to detect allocation bugs)\n-    if (ZapResourceArea) {\n-      memset(state._hwm, badResourceValue, state._max - state._hwm);\n+    if (_hwm != state._hwm) {\n+      \/\/ HWM moved: resource area was used. Roll back!\n+\n+      char* replaced_hwm = _hwm;\n+\n+      _chunk = state._chunk;\n+      _hwm = state._hwm;\n+      _max = state._max;\n+\n+      \/\/ Clear out this chunk (to detect allocation bugs).\n+      \/\/ If current chunk contains the replaced HWM, this means we are\n+      \/\/ doing the rollback within the same chunk, and we only need to\n+      \/\/ clear up to replaced HWM.\n+      if (ZapResourceArea) {\n+        char* limit = _chunk->contains(replaced_hwm) ? replaced_hwm : _max;\n+        assert(limit >= _hwm, \"Sanity check: non-negative memset size\");\n+        memset(_hwm, badResourceValue, limit - _hwm);\n+      }\n+    } else {\n+      \/\/ No allocations. Nothing to rollback. Check it.\n+      assert(_chunk == state._chunk, \"Sanity check: idempotence\");\n+      assert(_hwm == state._hwm,     \"Sanity check: idempotence\");\n+      assert(_max == state._max,     \"Sanity check: idempotence\");\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"}]}