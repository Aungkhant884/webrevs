{"files":[{"patch":"@@ -268,1 +268,1 @@\n-LCMS_CFLAGS=-DCMS_DONT_USE_FAST_FLOOR\n+LCMS_CFLAGS=-DCMS_DONT_USE_FAST_FLOOR -DCMS_NO_HALF_SUPPORT\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -729,2 +729,1 @@\n-static JavaThread* get_native(jobject thread) {\n-  ThreadsListHandle tlh;\n+static JavaThread* get_native(ThreadsListHandle& tlh, jobject thread) {\n@@ -737,1 +736,2 @@\n-  JavaThread* native_thread = get_native(thread);\n+  ThreadsListHandle tlh;\n+  JavaThread* native_thread = get_native(tlh, thread);\n@@ -742,1 +742,2 @@\n-  JavaThread* native_thread = get_native(thread);\n+  ThreadsListHandle tlh;\n+  JavaThread* native_thread = get_native(tlh, thread);\n@@ -752,1 +753,2 @@\n-  JavaThread* native_thread = get_native(thread);\n+  ThreadsListHandle tlh;\n+  JavaThread* native_thread = get_native(tlh, thread);\n@@ -762,1 +764,2 @@\n-  JavaThread* native_thread = get_native(thread);\n+  ThreadsListHandle tlh;\n+  JavaThread* native_thread = get_native(tlh, thread);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,1 @@\n+      assert(_hwm != state._hwm, \"Sanity check: HWM moves when we have later chunks\");\n@@ -123,3 +124,0 @@\n-    _chunk = state._chunk;      \/\/ Roll back to saved chunk.\n-    _hwm = state._hwm;\n-    _max = state._max;\n@@ -127,3 +125,23 @@\n-    \/\/ Clear out this chunk (to detect allocation bugs)\n-    if (ZapResourceArea) {\n-      memset(state._hwm, badResourceValue, state._max - state._hwm);\n+    if (_hwm != state._hwm) {\n+      \/\/ HWM moved: resource area was used. Roll back!\n+\n+      char* replaced_hwm = _hwm;\n+\n+      _chunk = state._chunk;\n+      _hwm = state._hwm;\n+      _max = state._max;\n+\n+      \/\/ Clear out this chunk (to detect allocation bugs).\n+      \/\/ If current chunk contains the replaced HWM, this means we are\n+      \/\/ doing the rollback within the same chunk, and we only need to\n+      \/\/ clear up to replaced HWM.\n+      if (ZapResourceArea) {\n+        char* limit = _chunk->contains(replaced_hwm) ? replaced_hwm : _max;\n+        assert(limit >= _hwm, \"Sanity check: non-negative memset size\");\n+        memset(_hwm, badResourceValue, limit - _hwm);\n+      }\n+    } else {\n+      \/\/ No allocations. Nothing to rollback. Check it.\n+      assert(_chunk == state._chunk, \"Sanity check: idempotence\");\n+      assert(_hwm == state._hwm,     \"Sanity check: idempotence\");\n+      assert(_max == state._max,     \"Sanity check: idempotence\");\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -993,5 +993,6 @@\n-  if (thread != NULL) {\n-    if (thread->is_Java_thread()) {\n-      oop obj = thread->as_Java_thread()->threadObj();\n-      return (obj == NULL) ? 0 : java_lang_Thread::thread_id(obj);\n-    }\n+  if (thread != NULL && thread->is_Java_thread()) {\n+    Thread* current = Thread::current();\n+    guarantee(current != thread || thread->as_Java_thread()->is_oop_safe(),\n+              \"current cannot touch oops after its GC barrier is detached.\");\n+    oop obj = thread->as_Java_thread()->threadObj();\n+    return (obj == NULL) ? 0 : java_lang_Thread::thread_id(obj);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -124,0 +124,1 @@\n+#include \"services\/threadIdTable.hpp\"\n@@ -3581,0 +3582,7 @@\n+    if (ThreadIdTable::is_initialized()) {\n+      \/\/ This cleanup must be done before the current thread's GC barrier\n+      \/\/ is detached since we need to touch the threadObj oop.\n+      jlong tid = SharedRuntime::get_java_tid(p);\n+      ThreadIdTable::remove_thread(tid);\n+    }\n+\n@@ -3586,0 +3594,6 @@\n+    if (p->is_exiting()) {\n+      \/\/ If we got here via JavaThread::exit(), then we remember that the\n+      \/\/ thread's GC barrier has been detached. We don't do this when we get\n+      \/\/ here from another path, e.g., cleanup_failed_attach_current_thread().\n+      p->set_terminated(JavaThread::_thread_gc_barrier_detached);\n+    }\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -889,1 +889,1 @@\n-    _not_terminated = 0xDEAD - 2,\n+    _not_terminated = 0xDEAD - 3,\n@@ -891,0 +891,1 @@\n+    _thread_gc_barrier_detached,                 \/\/ thread's GC barrier has been detached\n@@ -899,1 +900,1 @@\n-  \/\/   _not_terminated => _thread_exiting => _thread_terminated\n+  \/\/   _not_terminated => _thread_exiting => _thread_gc_barrier_detached => _thread_terminated\n@@ -903,0 +904,4 @@\n+  \/\/\n+  \/\/ A JavaThread that fails to JNI attach has these _terminated field transitions:\n+  \/\/   _not_terminated => _thread_terminated\n+  \/\/\n@@ -1129,1 +1134,2 @@\n-  \/\/ thread has called JavaThread::exit() or is terminated\n+  \/\/ thread has called JavaThread::exit(), thread's GC barrier is detached\n+  \/\/ or thread is terminated\n@@ -1131,0 +1137,2 @@\n+  \/\/ thread's GC barrier is NOT detached and thread is NOT terminated\n+  bool is_oop_safe() const;\n@@ -1132,1 +1140,1 @@\n-  \/\/ against the two non-terminated values so that a freed JavaThread\n+  \/\/ against the three non-terminated values so that a freed JavaThread\n@@ -1135,1 +1143,2 @@\n-    return l_terminated != _not_terminated && l_terminated != _thread_exiting;\n+    return l_terminated != _not_terminated && l_terminated != _thread_exiting &&\n+           l_terminated != _thread_gc_barrier_detached;\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -187,2 +187,0 @@\n-  \/\/ Use load-acquire so that setting of _terminated by\n-  \/\/ JavaThread::exit() is seen more quickly.\n@@ -190,1 +188,9 @@\n-  return l_terminated == _thread_exiting || check_is_terminated(l_terminated);\n+  return l_terminated == _thread_exiting ||\n+         l_terminated == _thread_gc_barrier_detached ||\n+         check_is_terminated(l_terminated);\n+}\n+\n+inline bool JavaThread::is_oop_safe() const {\n+  TerminatedTypes l_terminated = Atomic::load_acquire(&_terminated);\n+  return l_terminated != _thread_gc_barrier_detached &&\n+         !check_is_terminated(l_terminated);\n@@ -194,2 +200,0 @@\n-  \/\/ Use load-acquire so that setting of _terminated by\n-  \/\/ JavaThread::exit() is seen more quickly.\n@@ -201,1 +205,0 @@\n-  \/\/ use release-store so the setting of _terminated is seen more quickly\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -698,1 +698,1 @@\n-        \/\/ that has just passed the removal point in ThreadsSMRSupport::remove_thread()\n+        \/\/ that has just passed the removal point in Threads::remove().\n@@ -982,6 +982,0 @@\n-\n-  if (ThreadIdTable::is_initialized()) {\n-    jlong tid = SharedRuntime::get_java_tid(thread);\n-    ThreadIdTable::remove_thread(tid);\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-          \/\/ that has just passed the removal point in ThreadsSMRSupport::remove_thread()\n+          \/\/ that has just passed the removal point in Threads::remove().\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,2 @@\n-    \/\/ JavaThread::exit() skipped calling current_thread_exiting()\n+    \/\/ We did not get here via JavaThread::exit() so current_thread_exiting()\n+    \/\/ was not called, e.g., JavaThread::cleanup_failed_attach_current_thread().\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1161,0 +1161,2 @@\n+            Class<?> type = null;\n+            Method foundMethod = null;\n@@ -1180,1 +1182,5 @@\n-                        return method;\n+                        Class<?> rt = method.getReturnType();\n+                        if (foundMethod == null || type.isAssignableFrom(rt)) {\n+                            foundMethod = method;\n+                            type = rt;\n+                        }\n@@ -1184,0 +1190,3 @@\n+            if (foundMethod != null) {\n+                return foundMethod;\n+            }\n","filename":"src\/java.desktop\/share\/classes\/java\/beans\/Introspector.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.beans.BeanInfo;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+\n+import javax.swing.JPanel;\n+\n+\/**\n+ * @test\n+ * @bug 8308152\n+ * @summary PropertyDescriptor should work with overridden generic getter method\n+ *\/\n+public class OverriddenGetter {\n+\n+    static class Parent<T> {\n+        private T value;\n+        public T getValue() {return value;}\n+        public final void setValue(T value) {this.value = value;}\n+    }\n+\n+    static class ChildO extends Parent<Object> {\n+        public ChildO() {}\n+        @Override\n+        public Object getValue() {return super.getValue();}\n+    }\n+\n+    static class ChildA extends Parent<ArithmeticException> {\n+        public ChildA() {}\n+        @Override\n+        public ArithmeticException getValue() {return super.getValue();}\n+    }\n+\n+    static class ChildS extends Parent<String> {\n+        public ChildS() {}\n+        @Override\n+        public String getValue() {return super.getValue();}\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        test(\"UI\", JPanel.class, \"getUI\", \"setUI\");\n+        test(\"value\", ChildO.class, \"getValue\", \"setValue\");\n+        test(\"value\", ChildA.class, \"getValue\", \"setValue\");\n+        test(\"value\", ChildS.class, \"getValue\", \"setValue\");\n+    }\n+\n+    private static void test(String name, Class<?> beanClass,\n+                             String read, String write) throws Exception\n+    {\n+        var gold = new PropertyDescriptor(name, beanClass, read, write);\n+        BeanInfo beanInfo = Introspector.getBeanInfo(beanClass);\n+        PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();\n+        for (PropertyDescriptor pd : pds) {\n+            if (pd.getName().equals(gold.getName())) {\n+                if (pd.getReadMethod() != gold.getReadMethod()) {\n+                    System.err.println(\"Expected: \" + gold.getReadMethod());\n+                    System.err.println(\"Actual: \" + pd.getReadMethod());\n+                    throw new RuntimeException(\"Wrong read method\");\n+                }\n+                if (pd.getWriteMethod() != gold.getWriteMethod()) {\n+                    System.err.println(\"Expected: \" + gold.getWriteMethod());\n+                    System.err.println(\"Actual: \" + pd.getWriteMethod());\n+                    throw new RuntimeException(\"Wrong write method\");\n+                }\n+                if (pd.getPropertyType() != gold.getPropertyType()) {\n+                    System.err.println(\"Expected: \" + gold.getPropertyType());\n+                    System.err.println(\"Actual: \" + pd.getPropertyType());\n+                    throw new RuntimeException(\"Wrong property type\");\n+                }\n+                return;\n+            }\n+        }\n+        throw new RuntimeException(\"The PropertyDescriptor is not found\");\n+    }\n+}\n","filename":"test\/jdk\/java\/beans\/PropertyDescriptor\/OverriddenGetter.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}