{"files":[{"patch":"@@ -503,6 +503,2 @@\n-    if (minObjAlignmentInBytes == 8) {\n-      logMinObjAlignmentInBytes = 3;\n-    } else if (minObjAlignmentInBytes == 16) {\n-      logMinObjAlignmentInBytes = 4;\n-    } else {\n-      throw new RuntimeException(\"Object alignment \" + minObjAlignmentInBytes + \" not yet supported\");\n+    if ((minObjAlignmentInBytes & (minObjAlignmentInBytes - 1)) != 0) {\n+      throw new RuntimeException(\"Object alignment \" + minObjAlignmentInBytes + \" is not power of two\");\n@@ -511,0 +507,2 @@\n+    logMinObjAlignmentInBytes = Integer.numberOfTrailingZeros(minObjAlignmentInBytes);\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import sun.jvm.hotspot.HotSpotAgent;\n+import sun.jvm.hotspot.runtime.VM;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.SA.SATestUtils;\n+import jdk.test.lib.Utils;\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @requires vm.hasSA\n+ * @modules jdk.hotspot.agent\/sun.jvm.hotspot\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.runtime\n+ * @run driver TestObjectAlignment\n+ *\/\n+\n+public class TestObjectAlignment {\n+\n+    private static LingeredApp theApp = null;\n+\n+    private static void checkAlignment(String pid, int expectedAlign) throws Exception {\n+        HotSpotAgent agent = new HotSpotAgent();\n+\n+        try {\n+            agent.attach(Integer.parseInt(pid));\n+            int actualAlign = VM.getVM().getObjectAlignmentInBytes();\n+            Asserts.assertEquals(expectedAlign, actualAlign,\n+                                 \"Address of HeapRegion does not match.\");\n+        } finally {\n+            agent.detach();\n+        }\n+    }\n+\n+    private static void createAnotherToAttach(long lingeredAppPid, int expectedAlign)\n+                                                         throws Exception {\n+        \/\/ Start a new process to attach to the lingered app\n+        ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(\n+            \"--add-modules=jdk.hotspot.agent\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot=ALL-UNNAMED\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot.runtime=ALL-UNNAMED\",\n+            \"TestObjectAlignment\",\n+            Long.toString(lingeredAppPid),\n+            Integer.toString(expectedAlign)\n+        );\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n+        OutputAnalyzer SAOutput = ProcessTools.executeProcess(processBuilder);\n+        SAOutput.shouldHaveExitValue(0);\n+        System.out.println(SAOutput.getOutput());\n+    }\n+\n+    public static void main (String... args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        if (args == null || args.length == 0) {\n+            for (int align = 8; align <= 256; align *= 2) {\n+                try {\n+                    theApp = new LingeredApp();\n+                    LingeredApp.startApp(theApp, \"-XX:ObjectAlignmentInBytes=\" + align);\n+                    createAnotherToAttach(theApp.getPid(), align);\n+                } finally {\n+                    LingeredApp.stopApp(theApp);\n+                }\n+            }\n+        } else {\n+            checkAlignment(args[0], Integer.parseInt(args[1]));\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestObjectAlignment.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}