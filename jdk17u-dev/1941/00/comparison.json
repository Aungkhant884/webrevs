{"files":[{"patch":"@@ -4521,1 +4521,1 @@\n-void MacroAssembler::test_bit(Register Rd, Register Rs, uint32_t bit_pos, Register tmp) {\n+void MacroAssembler::test_bit(Register Rd, Register Rs, uint32_t bit_pos) {\n@@ -4527,1 +4527,7 @@\n-  andi(Rd, Rs, 1UL << bit_pos, tmp);\n+  int64_t imm = (int64_t)(1UL << bit_pos);\n+  if (is_simm12(imm)) {\n+    and_imm12(Rd, Rs, imm);\n+  } else {\n+    srli(Rd, Rs, bit_pos);\n+    and_imm12(Rd, Rd, 1);\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1147,1 +1147,1 @@\n-  void test_bit(Register Rd, Register Rs, uint32_t bit_pos, Register tmp = t0);\n+  void test_bit(Register Rd, Register Rs, uint32_t bit_pos);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2321,1 +2321,1 @@\n-      __ test_bit(flag, flag, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS), tmp \/* tmp *\/);\n+      __ test_bit(flag, flag, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}