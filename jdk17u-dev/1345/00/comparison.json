{"files":[{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-  \/\/ arbitrary value between 27 and 256\n-  CRC32C_MIDDLE = 8 * 86,\n+  \/\/ arbitrary value between 9 and 256\n+  CRC32C_MIDDLE = 8 * 74,\n@@ -46,1 +46,1 @@\n-  \/\/ shows that 240 and 1024 are equally good choices as the 216==8*27\n+  \/\/ shows that 240 and 1024 are equally good choices as the 216==8*9*3\n@@ -50,1 +50,1 @@\n-  CRC32C_LOW = 8 * 27,\n+  CRC32C_LOW = 8 * 9,\n","filename":"src\/hotspot\/cpu\/x86\/crc32c.h","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -7940,1 +7940,0 @@\n-  BIND(L_wordByWord);\n@@ -7942,4 +7941,7 @@\n-  jcc(Assembler::greaterEqual, L_byteByByteProlog);\n-    crc32(in_out, Address(in1, 0), 4);\n-    addq(in1, 4);\n-    jmp(L_wordByWord);\n+  jccb(Assembler::greaterEqual, L_byteByByteProlog);\n+  align(16);\n+  BIND(L_wordByWord);\n+    crc32(in_out, Address(in1, 0), 8);\n+    addq(in1, 8);\n+    cmpq(in1, tmp1);\n+    jcc(Assembler::less, L_wordByWord);\n@@ -7951,1 +7953,0 @@\n-  BIND(L_byteByByte);\n@@ -7954,0 +7955,1 @@\n+  BIND(L_byteByByte);\n@@ -7957,1 +7959,2 @@\n-    jmp(L_byteByByte);\n+    cmpl(tmp2, in2);\n+    jcc(Assembler::lessEqual, L_byteByByte);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}