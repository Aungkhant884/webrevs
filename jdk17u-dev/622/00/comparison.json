{"files":[{"patch":"@@ -0,0 +1,281 @@\n+\/*\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.HeadlessException;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4390885\n+ * @summary This test checks CCC #4390885, which verifies that it should be\n+ *          possible to set the location of the JFileChooser.\n+ * @run main JFileChooserSetLocationTest\n+ *\/\n+public class JFileChooserSetLocationTest {\n+\n+    public static final String SHOW_DIALOG_OUTSIDE_THE_PANEL =\n+            \"ShowFileChooser OUTSIDE the Panel\";\n+    public static final String SHOW_DIALOG_OVER_THE_PANEL =\n+            \"ShowFileChooser OVER the Panel\";\n+    public static final String SHOW_SAVE_DIALOG_OVER_THE_PANEL =\n+            \"ShowSaveDialog\";\n+    private static final int TOLERANCE_LEVEL = 6;\n+    private static final int xOut = 75;\n+    private static final int yOut = 75;\n+    private static Robot robot;\n+    private static JPanel panel;\n+    private static MyFileChooser fileChooser;\n+    private static int xIn;\n+    private static int yIn;\n+    private static JButton btn;\n+    private static JButton btn1;\n+    private static JButton btn2;\n+    private static JFrame frame;\n+\n+    public static void main(String[] s) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                AtomicReference<Point> pt = new AtomicReference<>();\n+                AtomicReference<Dimension> dim = new AtomicReference<>();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    pt.set(panel.getLocationOnScreen());\n+                    dim.set(panel.getSize());\n+                });\n+                Point panelLoc = pt.get();\n+                Dimension panelDim = dim.get();\n+                xIn = (panelLoc.x + panelDim.width) \/ 2;\n+                yIn = (panelLoc.y + panelDim.height) \/ 2;\n+\n+                Point dest = getCenterPointOf(btn);\n+\n+                robot.mouseMove(dest.x, dest.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                robot.waitForIdle();\n+\n+                Point actualPos = getActualLocation(fileChooser);\n+\n+                \/\/ Case 1 :  Verifying that the location of JFileChooser\n+                \/\/ 'Show Dialog' is correctly set outside the frame at (25,25)\n+                verify(xOut, actualPos.x, yOut, actualPos.y);\n+\n+                hitKeys(KeyEvent.VK_ESCAPE);\n+\n+                dest = getCenterPointOf(btn1);\n+                robot.mouseMove(dest.x, dest.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                actualPos = getActualLocation(fileChooser);\n+\n+                \/\/ Case 2 :  Verifying that the location of JFileChooser\n+                \/\/ 'Show Dialog' is correctly set inside the test frame\n+                verify(xIn, actualPos.x, yIn, actualPos.y);\n+\n+                hitKeys(KeyEvent.VK_ESCAPE);\n+\n+                dest = getCenterPointOf(btn2);\n+                robot.mouseMove(dest.x, dest.y);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                actualPos = getActualLocation(fileChooser);\n+\n+                \/\/  Case 3 :  Verifying that the location of JFileChooser\n+                \/\/  'Save Dialog' is correctly set inside the test frame\n+                verify(xIn, actualPos.x, yIn, actualPos.y);\n+\n+                hitKeys(KeyEvent.VK_ESCAPE);\n+\n+                System.out.println(\"Test Passed, All cases passed for \" + laf);\n+            } finally {\n+                SwingUtilities.invokeAndWait(\n+                        JFileChooserSetLocationTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static Point getCenterPointOf(final Component comp)\n+            throws Exception {\n+\n+        AtomicReference<Point> pt = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> pt.set(comp.getLocationOnScreen()));\n+        Point loc = pt.get();\n+        loc.translate(comp.getWidth() \/ 2, comp.getHeight() \/ 2);\n+        return loc;\n+    }\n+\n+    private static Point getActualLocation(final MyFileChooser fcoo)\n+            throws Exception {\n+        AtomicReference<Point> pt = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> pt.set(fcoo.getDialogLocation()));\n+        return pt.get();\n+    }\n+\n+    public static void verify(int x1, int x2, int y1, int y2) {\n+        System.out.println(\"verify \" + x1 + \"==\" + x2 + \"; \" + y1 + \"==\" + y2);\n+        if ((Math.abs(x1 - x2) < TOLERANCE_LEVEL) &&\n+            (Math.abs(y1 - y2) < TOLERANCE_LEVEL)) {\n+            System.out.println(\"Test passed\");\n+        } else {\n+            throw new RuntimeException(\n+                    \"Test Failed, setLocation() is not working properly\");\n+        }\n+    }\n+\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n+    }\n+\n+    public static void createUI() {\n+        frame = new JFrame();\n+        panel = new JPanel();\n+        btn = new JButton(SHOW_DIALOG_OUTSIDE_THE_PANEL);\n+        btn1 = new JButton(SHOW_DIALOG_OVER_THE_PANEL);\n+        btn2 = new JButton(SHOW_SAVE_DIALOG_OVER_THE_PANEL);\n+        ActionListener actionListener = actionEvent -> {\n+            String btnAction = actionEvent.getActionCommand();\n+            if (btnAction.equals(SHOW_DIALOG_OUTSIDE_THE_PANEL)) {\n+                fileChooser = new MyFileChooser(xOut, yOut);\n+                fileChooser.showOpenDialog(panel);\n+            } else if (btnAction.equals(SHOW_DIALOG_OVER_THE_PANEL)) {\n+                fileChooser = new MyFileChooser(xIn, yIn);\n+                fileChooser.showOpenDialog(panel);\n+            } else if (btnAction.equals(SHOW_SAVE_DIALOG_OVER_THE_PANEL)) {\n+                fileChooser = new MyFileChooser(xIn, yIn);\n+                fileChooser.showSaveDialog(panel);\n+            }\n+        };\n+        btn.addActionListener(actionListener);\n+        btn1.addActionListener(actionListener);\n+        btn2.addActionListener(actionListener);\n+        panel.add(btn);\n+        panel.add(btn1);\n+        panel.add(btn2);\n+\n+        frame.add(panel);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            System.out.println(\"Testing \" + lafName);\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported laf : \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private static class MyFileChooser extends JFileChooser {\n+        JDialog dialog;\n+        int x, y;\n+\n+        public MyFileChooser(int x, int y) {\n+            super();\n+            this.x = x;\n+            this.y = y;\n+        }\n+\n+        protected JDialog createDialog(Component parent)\n+                throws HeadlessException {\n+\n+            dialog = super.createDialog(parent);\n+\n+            System.out.println(\n+                    \"createDialog and set location to (\" + x + \", \" + y + \")\");\n+            dialog.setLocation(x, y);\n+\n+            return dialog;\n+        }\n+\n+        public Point getDialogLocation() {\n+            return dialog.getLocation();\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/JFileChooserSetLocationTest.java","additions":281,"deletions":0,"binary":false,"changes":281,"status":"added"}]}