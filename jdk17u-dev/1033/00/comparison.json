{"files":[{"patch":"@@ -306,4 +306,4 @@\n-      jlong buffer = (jlong) NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, jbyte, buffer_size);\n-      int res = encode(THREAD, runtimeKlass, buffer, buffer_size);\n-      if ((_from_env != nullptr && _from_env->has_pending_exception()) || HAS_PENDING_EXCEPTION) {\n-        JVMCIRuntime::fatal_exception(_from_env, \"HotSpotJVMCIRuntime.encodeThrowable should not throw an exception\");\n+      jlong buffer = (jlong) NEW_RESOURCE_ARRAY_IN_THREAD_RETURN_NULL(THREAD, jbyte, buffer_size);\n+      if (buffer == 0L) {\n+        decode(THREAD, runtimeKlass, 0L);\n+        return;\n@@ -311,1 +311,17 @@\n-      if (res < 0) {\n+      int res = encode(THREAD, runtimeKlass, buffer, buffer_size);\n+      if (_from_env != nullptr && !_from_env->is_hotspot() && _from_env->has_pending_exception()) {\n+        \/\/ Cannot get name of exception thrown by `encode` as that involves\n+        \/\/ calling into libjvmci which in turn can raise another exception.\n+        _from_env->clear_pending_exception();\n+        decode(THREAD, runtimeKlass, -2L);\n+        return;\n+      } else if (HAS_PENDING_EXCEPTION) {\n+        Symbol *ex_name = PENDING_EXCEPTION->klass()->name();\n+        CLEAR_PENDING_EXCEPTION;\n+        if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n+          decode(THREAD, runtimeKlass, -1L);\n+        } else {\n+          decode(THREAD, runtimeKlass, -2L);\n+        }\n+        return;\n+      } else if (res < 0) {\n@@ -319,1 +335,1 @@\n-          JVMCIRuntime::fatal_exception(_to_env, \"HotSpotJVMCIRuntime.decodeAndThrowThrowable should throw an exception\");\n+          _to_env->throw_InternalError(\"HotSpotJVMCIRuntime.decodeAndThrowThrowable should have thrown an exception\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -212,2 +212,8 @@\n-     * @param buffer a native byte buffer containing an exception encoded by\n-     *            {@link #encodeThrowable}\n+     * @param errorOrBuffer an error code or a native byte buffer containing an exception encoded by\n+     *            {@link #encodeThrowable}. Error code values and their meanings are:\n+     *\n+     *            <pre>\n+     *             0: native memory for the buffer could not be allocated\n+     *            -1: an OutOfMemoryError was thrown while encoding the exception\n+     *            -2: some other throwable was thrown while encoding the exception\n+     *            <\/pre>\n@@ -216,1 +222,13 @@\n-    static void decodeAndThrowThrowable(long buffer) throws Throwable {\n+    static void decodeAndThrowThrowable(long errorOrBuffer) throws Throwable {\n+        if (errorOrBuffer >= -2L && errorOrBuffer <= 0) {\n+            String context = String.format(\"while encoding an exception to translate it from %s to %s\",\n+                            IS_IN_NATIVE_IMAGE ? \"HotSpot\" : \"libjvmci\",\n+                            IS_IN_NATIVE_IMAGE ? \"libjvmci\" : \"HotSpot\");\n+            if (errorOrBuffer == 0) {\n+                throw new InternalError(\"native buffer could not be allocated \" + context);\n+            }\n+            if (errorOrBuffer == -1L) {\n+                throw new OutOfMemoryError(\"OutOfMemoryError occurred \" + context);\n+            }\n+            throw new InternalError(\"unexpected problem occurred \" + context);\n+        }\n@@ -218,1 +236,1 @@\n-        int encodingLength = unsafe.getInt(buffer);\n+        int encodingLength = unsafe.getInt(errorOrBuffer);\n@@ -220,1 +238,1 @@\n-        unsafe.copyMemory(null, buffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n+        unsafe.copyMemory(null, errorOrBuffer + 4, encoding, Unsafe.ARRAY_BYTE_BASE_OFFSET, encodingLength);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -152,1 +152,0 @@\n-    @VMEntryPoint\n@@ -226,1 +225,0 @@\n-    @VMEntryPoint\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/TranslatedException.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}