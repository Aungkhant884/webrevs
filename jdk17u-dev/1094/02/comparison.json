{"files":[{"patch":"@@ -426,1 +426,1 @@\n-      DISABLED_WARNINGS_gcc := implicit-fallthrough cast-function-type bad-function-cast, \\\n+      DISABLED_WARNINGS_gcc := implicit-fallthrough cast-function-type bad-function-cast dangling-pointer stringop-overflow, \\\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,0 +231,11 @@\n+const char* type2name(BasicType t) {\n+  if (t < ARRAY_SIZE(type2name_tab)) {\n+    return type2name_tab[t];\n+  } else if (t == T_ILLEGAL) {\n+    return \"*illegal*\";\n+  } else {\n+    fatal(\"invalid type %d\", t);\n+    return \"invalid type\";\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -724,4 +724,1 @@\n-inline const char* type2name(BasicType t) {\n-  assert((uint)t < T_CONFLICT + 1, \"invalid type\");\n-  return type2name_tab[t];\n-}\n+const char* type2name(BasicType t);\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,2 @@\n+#include <assert.h>\n+\n@@ -1629,1 +1631,2 @@\n-            *nargv++ = ((arg + 2) == NULL) ? NULL : JLI_StringDup(arg + 2);\n+            assert(arg[2] != '\\0' && \"Invalid JAVA_ARGS or EXTRA_JAVA_ARGS defined by build\");\n+            *nargv++ = JLI_StringDup(arg + 2);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}