{"files":[{"patch":"@@ -65,19 +65,0 @@\n-\/\/ Total malloc invocation count\n-size_t MallocMemorySnapshot::total_count() const {\n-  size_t amount = 0;\n-  for (int index = 0; index < mt_number_of_types; index ++) {\n-    amount += _malloc[index].malloc_count();\n-  }\n-  return amount;\n-}\n-\n-\/\/ Total malloc'd memory amount\n-size_t MallocMemorySnapshot::total() const {\n-  size_t amount = 0;\n-  for (int index = 0; index < mt_number_of_types; index ++) {\n-    amount += _malloc[index].malloc_size();\n-  }\n-  amount += _tracking_header.size() + total_arena();\n-  return amount;\n-}\n-\n@@ -99,0 +80,1 @@\n+  _all_mallocs.deallocate(arena_size);\n@@ -230,1 +212,0 @@\n-  MallocMemorySummary::record_new_malloc_header(sizeof(MallocHeader));\n@@ -265,1 +246,0 @@\n-  MallocMemorySummary::record_free_malloc_header(sizeof(MallocHeader));\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  MemoryCounter     _tracking_header;\n+  MemoryCounter     _all_mallocs;\n@@ -152,3 +152,1 @@\n-  inline MemoryCounter* malloc_overhead() {\n-    return &_tracking_header;\n-  }\n+  inline size_t malloc_overhead() const;\n@@ -157,1 +155,4 @@\n-  size_t total_count() const;\n+  size_t total_count() const {\n+    return _all_mallocs.count();\n+  }\n+\n@@ -159,1 +160,4 @@\n-  size_t total() const;\n+  size_t total() const {\n+    return _all_mallocs.size() + malloc_overhead() + total_arena();\n+  }\n+\n@@ -173,1 +177,1 @@\n-    s->_tracking_header = _tracking_header;\n+    s->_all_mallocs = _all_mallocs;\n@@ -197,0 +201,1 @@\n+     as_snapshot()->_all_mallocs.allocate(size);\n@@ -201,0 +206,1 @@\n+     as_snapshot()->_all_mallocs.deallocate(size);\n@@ -220,9 +226,0 @@\n-   \/\/ Record memory used by malloc tracking header\n-   static inline void record_new_malloc_header(size_t sz) {\n-     as_snapshot()->malloc_overhead()->allocate(sz);\n-   }\n-\n-   static inline void record_free_malloc_header(size_t sz) {\n-     as_snapshot()->malloc_overhead()->deallocate(sz);\n-   }\n-\n@@ -231,1 +228,1 @@\n-     return as_snapshot()->malloc_overhead()->size();\n+     return as_snapshot()->malloc_overhead();\n@@ -347,0 +344,4 @@\n+size_t MallocMemorySnapshot::malloc_overhead() const {\n+  return _all_mallocs.count() * sizeof(MallocHeader);\n+}\n+\n","filename":"src\/hotspot\/share\/services\/mallocTracker.hpp","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-    return bl->_malloc_memory_snapshot.malloc_overhead()->size();\n+    return bl->_malloc_memory_snapshot.malloc_overhead();\n","filename":"src\/hotspot\/share\/services\/memBaseline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,2 +160,2 @@\n-    reserved_amount  += _malloc_snapshot->malloc_overhead()->size();\n-    committed_amount += _malloc_snapshot->malloc_overhead()->size();\n+    reserved_amount  += _malloc_snapshot->malloc_overhead();\n+    committed_amount += _malloc_snapshot->malloc_overhead();\n@@ -213,1 +213,1 @@\n-      amount_in_current_scale(_malloc_snapshot->malloc_overhead()->size()) > 0) {\n+      amount_in_current_scale(_malloc_snapshot->malloc_overhead()) > 0) {\n@@ -215,1 +215,1 @@\n-        amount_in_current_scale(_malloc_snapshot->malloc_overhead()->size()), scale);\n+        amount_in_current_scale(_malloc_snapshot->malloc_overhead()), scale);\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}