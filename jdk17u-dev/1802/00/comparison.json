{"files":[{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.fences;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.lang.invoke.VarHandle;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class Multiple {\n+\n+    @Benchmark\n+    public void plain() {\n+        \/\/ Do nothing\n+    }\n+\n+    @Benchmark\n+    public void loadLoad() {\n+        VarHandle.loadLoadFence();\n+        VarHandle.loadLoadFence();\n+        VarHandle.loadLoadFence();\n+        VarHandle.loadLoadFence();\n+    }\n+\n+    @Benchmark\n+    public void storeStore() {\n+        VarHandle.storeStoreFence();\n+        VarHandle.storeStoreFence();\n+        VarHandle.storeStoreFence();\n+        VarHandle.storeStoreFence();\n+    }\n+\n+    @Benchmark\n+    public void acquire() {\n+        VarHandle.acquireFence();\n+        VarHandle.acquireFence();\n+        VarHandle.acquireFence();\n+        VarHandle.acquireFence();\n+    }\n+\n+    @Benchmark\n+    public void release() {\n+        VarHandle.releaseFence();\n+        VarHandle.releaseFence();\n+        VarHandle.releaseFence();\n+        VarHandle.releaseFence();\n+    }\n+\n+    @Benchmark\n+    public void full() {\n+        VarHandle.fullFence();\n+        VarHandle.fullFence();\n+        VarHandle.fullFence();\n+        VarHandle.fullFence();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/Multiple.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.fences;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.lang.invoke.VarHandle;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class MultipleWithLoads {\n+\n+    int x, y, z;\n+\n+    @Benchmark\n+    public int plain() {\n+        int t1 = x + y + z;\n+        int t2 = x + y + z;\n+        int t3 = x + y + z;\n+        return t1 + t2 + t3;\n+    }\n+\n+    @Benchmark\n+    public int loadLoad() {\n+        VarHandle.loadLoadFence();\n+        int t1 = x + y + z;\n+        VarHandle.loadLoadFence();\n+        int t2 = x + y + z;\n+        VarHandle.loadLoadFence();\n+        int t3 = x + y + z;\n+        VarHandle.loadLoadFence();\n+        return t1 + t2 + t3;\n+    }\n+\n+    @Benchmark\n+    public int storeStore() {\n+        VarHandle.storeStoreFence();\n+        int t1 = x + y + z;\n+        VarHandle.storeStoreFence();\n+        int t2 = x + y + z;\n+        VarHandle.storeStoreFence();\n+        int t3 = x + y + z;\n+        VarHandle.storeStoreFence();\n+        return t1 + t2 + t3;\n+    }\n+\n+    @Benchmark\n+    public int acquire() {\n+        VarHandle.acquireFence();\n+        int t1 = x + y + z;\n+        VarHandle.acquireFence();\n+        int t2 = x + y + z;\n+        VarHandle.acquireFence();\n+        int t3 = x + y + z;\n+        VarHandle.acquireFence();\n+        return t1 + t2 + t3;\n+    }\n+\n+    @Benchmark\n+    public int release() {\n+        VarHandle.releaseFence();\n+        int t1 = x + y + z;\n+        VarHandle.releaseFence();\n+        int t2 = x + y + z;\n+        VarHandle.releaseFence();\n+        int t3 = x + y + z;\n+        VarHandle.releaseFence();\n+        return t1 + t2 + t3;\n+    }\n+\n+    @Benchmark\n+    public int full() {\n+        VarHandle.fullFence();\n+        int t1 = x + y + z;\n+        VarHandle.fullFence();\n+        int t2 = x + y + z;\n+        VarHandle.fullFence();\n+        int t3 = x + y + z;\n+        VarHandle.fullFence();\n+        return t1 + t2 + t3;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/MultipleWithLoads.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.fences;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.lang.invoke.VarHandle;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class MultipleWithStores {\n+\n+    int x, y, z;\n+\n+    @Benchmark\n+    public void plain() {\n+        x = 1;\n+        y = 1;\n+        z = 1;\n+    }\n+\n+    @Benchmark\n+    public void loadLoad() {\n+        VarHandle.loadLoadFence();\n+        x = 1;\n+        VarHandle.loadLoadFence();\n+        y = 1;\n+        VarHandle.loadLoadFence();\n+        z = 1;\n+        VarHandle.loadLoadFence();\n+    }\n+\n+    @Benchmark\n+    public void storeStore() {\n+        VarHandle.storeStoreFence();\n+        x = 1;\n+        VarHandle.storeStoreFence();\n+        y = 1;\n+        VarHandle.storeStoreFence();\n+        z = 1;\n+        VarHandle.storeStoreFence();\n+    }\n+\n+    @Benchmark\n+    public void acquire() {\n+        VarHandle.releaseFence();\n+        x = 1;\n+        VarHandle.releaseFence();\n+        y = 1;\n+        VarHandle.releaseFence();\n+        z = 1;\n+        VarHandle.releaseFence();\n+    }\n+\n+    @Benchmark\n+    public void release() {\n+        VarHandle.releaseFence();\n+        x = 1;\n+        VarHandle.releaseFence();\n+        y = 1;\n+        VarHandle.releaseFence();\n+        z = 1;\n+        VarHandle.releaseFence();\n+    }\n+\n+    @Benchmark\n+    public void full() {\n+        VarHandle.fullFence();\n+        x = 1;\n+        VarHandle.fullFence();\n+        y = 1;\n+        VarHandle.fullFence();\n+        z = 1;\n+        VarHandle.fullFence();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/MultipleWithStores.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.fences;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.lang.invoke.VarHandle;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3, jvmArgsAppend = {\"-XX:+UseParallelGC\", \"-Xmx128m\"})\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class SafePublishing {\n+\n+    @Benchmark\n+    public Object plain() {\n+        return new Plain();\n+    }\n+\n+    @Benchmark\n+    public Object release() {\n+        return new Release();\n+    }\n+\n+    @Benchmark\n+    public Object storeStore() {\n+        return new StoreStore();\n+    }\n+\n+    static class Plain {\n+        int x;\n+        public Plain() {\n+            x = 1;\n+            VarHandle.releaseFence();\n+        }\n+    }\n+\n+    static class Release {\n+        int x;\n+        public Release() {\n+            x = 1;\n+            VarHandle.releaseFence();\n+        }\n+    }\n+\n+    static class StoreStore {\n+        int x;\n+        public StoreStore() {\n+            x = 1;\n+            VarHandle.storeStoreFence();\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/SafePublishing.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.fences;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.lang.invoke.VarHandle;\n+import java.util.concurrent.TimeUnit;\n+\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class Single {\n+\n+    @Benchmark\n+    public void plain() {\n+        \/\/ Do nothing\n+    }\n+\n+    @Benchmark\n+    public void loadLoad() {\n+        VarHandle.loadLoadFence();\n+    }\n+\n+    @Benchmark\n+    public void storeStore() {\n+        VarHandle.storeStoreFence();\n+    }\n+\n+    @Benchmark\n+    public void acquire() {\n+        VarHandle.acquireFence();\n+    }\n+\n+    @Benchmark\n+    public void release() {\n+        VarHandle.releaseFence();\n+    }\n+\n+    @Benchmark\n+    public void full() {\n+        VarHandle.fullFence();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/fences\/Single.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}