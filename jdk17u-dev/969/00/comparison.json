{"files":[{"patch":"@@ -42,0 +42,2 @@\n+    public static final String SAFEPOINT_WHILE_PRINTING_MESSAGE = \"<!-- safepoint while printing -->\";\n+\n@@ -490,1 +492,10 @@\n-            throw new IRViolationException(failuresBuilder.toString(), compilationsBuilder.toString());\n+\n+            \/\/ In some very rare cases, the VM output to regex match on contains \"<!-- safepoint while printing -->\"\n+            \/\/ (emitted by ttyLocker::break_tty_for_safepoint) which might be the reason for a matching error.\n+            \/\/ Do not throw an exception in this case (i.e. bailout).\n+            String compilations = compilationsBuilder.toString();\n+            if (!compilations.contains(SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+                throw new IRViolationException(failuresBuilder.toString(), compilationsBuilder.toString());\n+            } else {\n+                System.out.println(\"Found \" + SAFEPOINT_WHILE_PRINTING_MESSAGE + \", bail out of IR matching\");\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/IRMatcher.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -234,1 +234,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveThrownException();\n@@ -331,1 +331,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveThrownException();\n@@ -342,1 +342,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveThrownException();\n@@ -367,1 +367,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveThrownException();\n@@ -379,4 +379,0 @@\n-    public static void shouldNotReach() {\n-        throw new ShouldNotReachException(\"Framework did not fail but it should have!\");\n-    }\n-\n@@ -1453,6 +1449,0 @@\n-class ShouldNotReachException extends RuntimeException {\n-    ShouldNotReachException(String s) {\n-        super(s);\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -47,1 +47,1 @@\n-            throw new RuntimeException(\"Should not reach\");\n+            Utils.shouldHaveThrownException();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestRunTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -47,1 +47,4 @@\n-            Asserts.fail(\"Should not reach\");\n+            if (Utils.notAllBailedOut(sDefault, s1, s3)) {\n+                \/\/ Not all scenarios had a bailout which means that at least one exception should have been thrown.\n+                Asserts.fail(\"Should have thrown an exception\");\n+            }\n@@ -49,1 +52,4 @@\n-            Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\"), e.getMessage());\n+            if (!e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\")) {\n+                \/\/ Was there a bailout in a scenario? If not fail.\n+                Asserts.assertTrue(Utils.anyBailedOut(sDefault, s1, s3), e.getMessage());\n+            }\n@@ -53,1 +59,4 @@\n-            Asserts.fail(\"Should not reach\");\n+            if (Utils.notAllBailedOut(s1, s3)) {\n+                \/\/ Not all scenarios had a bailout which means that at least one exception should have been thrown.\n+                Asserts.fail(\"Should have thrown an exception\");\n+            }\n@@ -55,1 +64,4 @@\n-            Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #1, #3\"), e.getMessage());\n+            if (!e.getMessage().contains(\"The following scenarios have failed: #1, #3\")) {\n+                \/\/ Was there a bailout in a scenario? If not fail.\n+                Asserts.assertTrue(Utils.anyBailedOut(sDefault, s1, s3), e.getMessage());\n+            }\n@@ -74,1 +86,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenarios.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.driver.IRMatcher;\n+import compiler.lib.ir_framework.driver.TestVMProcess;\n+import jdk.test.lib.Asserts;\n+\n+import java.util.Arrays;\n+\n+public class Utils {\n+    public static void shouldHaveThrownException() {\n+        \/\/ Do not throw an exception if we hit a safepoint while printing which could possibly let the IR matching fail.\n+        \/\/ This happens very rarely. If there is a problem with the test, then we will catch that on the next test invocation.\n+        if (!TestVMProcess.getLastTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+            Asserts.fail(\"Should have thrown exception\");\n+        }\n+    }\n+\n+    \/**\n+     * Is there at least one scenario which hit a safepoint while printing (i.e. a bailout)?\n+     *\/\n+    public static boolean anyBailedOut(Scenario... scenarios) {\n+        return Arrays.stream(scenarios).anyMatch(s -> s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n+    }\n+\n+    \/**\n+     * Is there at least one scenario which did not hit a safepoint while printing (i.e. a bailout)?\n+     *\/\n+    public static boolean notAllBailedOut(Scenario... scenarios) {\n+        return Arrays.stream(scenarios).anyMatch(s -> !s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/Utils.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}