{"files":[{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\/\/ Check dynamic limits updating. HotSpot side.\n+public class LimitUpdateChecker {\n+\n+    private static final File UPDATE_FILE = new File(\"\/tmp\", \"limitsUpdated\");\n+    private static final File STARTED_FILE = new File(\"\/tmp\", \"started\");\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"LimitUpdateChecker: Entering\");\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+        printMetrics(wb); \/\/ print initial limits\n+        createStartedFile();\n+        while (!UPDATE_FILE.exists()) {\n+            Thread.sleep(200);\n+        }\n+        System.out.println(\"'limitsUpdated' file appeared. Stopped loop.\");\n+        printMetrics(wb); \/\/ print limits after update\n+        System.out.println(\"LimitUpdateChecker DONE.\");\n+\n+    }\n+\n+    private static void printMetrics(WhiteBox wb) {\n+        wb.printOsInfo();\n+    }\n+\n+    private static void createStartedFile() throws Exception {\n+        FileOutputStream fout = new FileOutputStream(STARTED_FILE);\n+        fout.close();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/LimitUpdateChecker.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8308090\n+ * @key cgroups\n+ * @summary Test container limits updating as they get updated at runtime without restart\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox LimitUpdateChecker\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar whitebox.jar jdk.test.whitebox.WhiteBox\n+ * @run driver TestLimitsUpdating\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestLimitsUpdating {\n+    private static final String TARGET_CONTAINER = \"limitsUpdatingHS_\" + Runtime.getRuntime().version().major();\n+    private static final String imageName = Common.imageName(\"limitsUpdating\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        Common.prepareWhiteBox();\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+        try {\n+            testLimitUpdates();\n+        } finally {\n+            if (!DockerTestUtils.RETAIN_IMAGE_AFTER_TEST) {\n+                DockerTestUtils.removeDockerImage(imageName);\n+            }\n+        }\n+    }\n+\n+    private static void testLimitUpdates() throws Exception {\n+        File sharedtmpdir = new File(\"test-sharedtmp\");\n+        File flag = new File(sharedtmpdir, \"limitsUpdated\"); \/\/ shared with LimitUpdateChecker\n+        File started = new File(sharedtmpdir, \"started\"); \/\/ shared with LimitUpdateChecker\n+        sharedtmpdir.mkdir();\n+        flag.delete();\n+        started.delete();\n+        DockerRunOptions opts = new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"LimitUpdateChecker\");\n+        opts.addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\");\n+        opts.addDockerOpts(\"--volume\", sharedtmpdir.getAbsolutePath() + \":\/tmp\");\n+        opts.addDockerOpts(\"--cpu-period\", \"100000\");\n+        opts.addDockerOpts(\"--cpu-quota\", \"200000\");\n+        opts.addDockerOpts(\"--memory\", \"500m\");\n+        opts.addDockerOpts(\"--memory-swap\", \"500m\");\n+        opts.addDockerOpts(\"--name\", TARGET_CONTAINER);\n+        opts.addJavaOpts(\"-cp\", \"\/test-classes\/\");\n+        Common.addWhiteBoxOpts(opts);\n+        final OutputAnalyzer out[] = new OutputAnalyzer[1];\n+        Thread t1 = new Thread() {\n+                public void run() {\n+                    try {\n+                        out[0] = DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            };\n+        t1.start();\n+\n+       \/\/ Wait for target container (that we later update) to complete its\n+       \/\/ initial starting-up phase. Prints initial container limits.\n+        while (!started.exists()) {\n+            System.out.println(\"Wait for target container to start\");\n+            Thread.sleep(100);\n+        }\n+\n+        final List<String> containerCommand = getContainerUpdate(300_000, 100_000, \"300m\");\n+        \/\/ Run the update command so as to increase resources once the container signaled it has started.\n+        Thread t2 = new Thread() {\n+                public void run() {\n+                    try {\n+                        DockerTestUtils.execute(containerCommand).shouldHaveExitValue(0);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            };\n+        t2.start();\n+        t2.join();\n+\n+        \/\/ Set the flag for the to-get updated container, indicating the update\n+        \/\/ has completed.\n+        FileOutputStream fout = new FileOutputStream(flag);\n+        fout.close();\n+\n+        t1.join();\n+\n+        \/\/ Do assertions based on the output in target container\n+        OutputAnalyzer targetOut = out[0];\n+        targetOut.shouldContain(\"active_processor_count: 2\"); \/\/ initial value\n+        targetOut.shouldContain(\"active_processor_count: 3\"); \/\/ updated value\n+        targetOut.shouldContain(\"memory_limit_in_bytes: 512000 k\"); \/\/ initial value\n+        targetOut.shouldContain(\"memory_and_swap_limit_in_bytes: 512000 k\"); \/\/ initial value\n+        targetOut.shouldContain(\"memory_limit_in_bytes: 307200 k\"); \/\/ updated value\n+        targetOut.shouldContain(\"memory_and_swap_limit_in_bytes: 307200 k\"); \/\/ updated value\n+    }\n+\n+    private static List<String> getContainerUpdate(int cpuQuota, int cpuPeriod, String memory) {\n+        List<String> cmd = DockerTestUtils.buildContainerCommand();\n+        cmd.add(\"update\");\n+        cmd.add(\"--cpu-period=\" + cpuPeriod);\n+        cmd.add(\"--cpu-quota=\" + cpuQuota);\n+        cmd.add(\"--memory=\" + memory);\n+        cmd.add(\"--memory-swap=\" + memory); \/\/ no swap\n+        cmd.add(TARGET_CONTAINER);\n+        return cmd;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestLimitsUpdating.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import com.sun.management.OperatingSystemMXBean;\n+import java.lang.management.ManagementFactory;\n+import jdk.internal.platform.Metrics;\n+\n+\n+\/\/ Check dynamic limits updating. Metrics (java) side.\n+public class LimitUpdateChecker {\n+\n+    private static final File UPDATE_FILE = new File(\"\/tmp\", \"limitsUpdated\");\n+    private static final File STARTED_FILE = new File(\"\/tmp\", \"started\");\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Running LimitUpdateChecker...\");\n+        Metrics metrics = jdk.internal.platform.Container.metrics();\n+        OperatingSystemMXBean osBean = (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();\n+        printMetrics(osBean, metrics); \/\/ initial limits\n+        createStartedFile();\n+        while (!UPDATE_FILE.exists()) {\n+            Thread.sleep(200);\n+        }\n+        System.out.println(\"'limitsUpdated' file appeared. Stopped loop.\");\n+        printMetrics(osBean, metrics); \/\/ updated limits\n+        System.out.println(\"LimitUpdateChecker DONE.\");\n+    }\n+\n+    private static void printMetrics(OperatingSystemMXBean osBean, Metrics metrics) {\n+        System.out.println(String.format(\"Runtime.availableProcessors: %d\", Runtime.getRuntime().availableProcessors()));\n+        System.out.println(String.format(\"OperatingSystemMXBean.getAvailableProcessors: %d\", osBean.getAvailableProcessors()));\n+        System.out.println(\"Metrics.getMemoryLimit() == \" + metrics.getMemoryLimit());\n+        System.out.println(String.format(\"OperatingSystemMXBean.getTotalMemorySize: %d\", osBean.getTotalMemorySize()));\n+    }\n+\n+    private static void createStartedFile() throws Exception {\n+        FileOutputStream fout = new FileOutputStream(STARTED_FILE);\n+        fout.close();\n+    }\n+\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/LimitUpdateChecker.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8308090\n+ * @key cgroups\n+ * @summary Test container limits updating as they get updated at runtime without restart\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.platform\n+ * @build LimitUpdateChecker\n+ * @run driver TestLimitsUpdating\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestLimitsUpdating {\n+    private static final long M = 1024 * 1024;\n+    private static final String TARGET_CONTAINER = \"limitsUpdatingJDK_\" + Runtime.getRuntime().version().major();\n+    private static final String imageName = Common.imageName(\"limitsUpdatingJDK\");\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+        try {\n+            testLimitUpdates();\n+        } finally {\n+            if (!DockerTestUtils.RETAIN_IMAGE_AFTER_TEST) {\n+                DockerTestUtils.removeDockerImage(imageName);\n+            }\n+        }\n+    }\n+\n+    private static void testLimitUpdates() throws Exception {\n+        File sharedtmpdir = new File(\"jdk-sharedtmp\");\n+        File flag = new File(sharedtmpdir, \"limitsUpdated\"); \/\/ shared with LimitUpdateChecker\n+        File started = new File(sharedtmpdir, \"started\"); \/\/ shared with LimitUpdateChecker\n+        sharedtmpdir.mkdir();\n+        flag.delete();\n+        started.delete();\n+        DockerRunOptions opts = new DockerRunOptions(imageName, \"\/jdk\/bin\/java\", \"LimitUpdateChecker\");\n+        opts.addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\");\n+        opts.addDockerOpts(\"--volume\", sharedtmpdir.getAbsolutePath() + \":\/tmp\");\n+        opts.addDockerOpts(\"--cpu-period\", \"100000\");\n+        opts.addDockerOpts(\"--cpu-quota\", \"200000\");\n+        opts.addDockerOpts(\"--memory\", \"500m\");\n+        opts.addDockerOpts(\"--memory-swap\", \"500m\");\n+        opts.addDockerOpts(\"--name\", TARGET_CONTAINER);\n+        opts.addJavaOpts(\"-cp\", \"\/test-classes\/\");\n+        \/\/ LimitUpdateChecker uses Metrics (jdk.internal.platform) for\n+        \/\/ printing JDK container limits\n+        opts.addJavaOpts(\"--add-exports\");\n+        opts.addJavaOpts(\"java.base\/jdk.internal.platform=ALL-UNNAMED\");\n+        final OutputAnalyzer out[] = new OutputAnalyzer[1];\n+        Thread t1 = new Thread() {\n+                public void run() {\n+                    try {\n+                        out[0] = DockerTestUtils.dockerRunJava(opts).shouldHaveExitValue(0);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            };\n+        t1.start();\n+\n+       \/\/ Wait for target container (that we later update) to complete its\n+       \/\/ initial starting-up phase. Prints initial container limits using\n+       \/\/ OS MXBean and Metrics API\n+        while (!started.exists()) {\n+            System.out.println(\"Wait for target container to start\");\n+            Thread.sleep(100);\n+        }\n+\n+        final List<String> containerCommand = getContainerUpdate(300_000, 100_000, \"300m\");\n+        \/\/ Run the update command so as to increase resources once the container signaled it has started.\n+        Thread t2 = new Thread() {\n+                public void run() {\n+                    try {\n+                        DockerTestUtils.execute(containerCommand).shouldHaveExitValue(0);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            };\n+        t2.start();\n+        t2.join();\n+\n+        \/\/ Set the flag for the to-get updated container, indicating the update\n+        \/\/ has completed.\n+        FileOutputStream fout = new FileOutputStream(flag);\n+        fout.close();\n+\n+        t1.join();\n+\n+        \/\/ Do assertions based on the output in target container\n+        OutputAnalyzer targetOut = out[0];\n+        targetOut.shouldContain(\"Runtime.availableProcessors: 2\");                  \/\/ initial value\n+        targetOut.shouldContain(\"OperatingSystemMXBean.getAvailableProcessors: 2\"); \/\/ initial value\n+        targetOut.shouldContain(\"Runtime.availableProcessors: 3\");                  \/\/ updated value\n+        targetOut.shouldContain(\"OperatingSystemMXBean.getAvailableProcessors: 3\"); \/\/ updated value\n+        long memoryInBytes = 500 * M;\n+        targetOut.shouldContain(\"Metrics.getMemoryLimit() == \" + memoryInBytes);    \/\/ initial value\n+        targetOut.shouldContain(\"OperatingSystemMXBean.getTotalMemorySize: \" + memoryInBytes); \/\/ initial value\n+        long updatedValue = 300 * M;\n+        targetOut.shouldContain(\"Metrics.getMemoryLimit() == \" + updatedValue);    \/\/ updated value\n+        targetOut.shouldContain(\"OperatingSystemMXBean.getTotalMemorySize: \" + updatedValue); \/\/ updated value\n+    }\n+\n+    private static List<String> getContainerUpdate(int cpuQuota, int cpuPeriod, String memory) {\n+        List<String> cmd = DockerTestUtils.buildContainerCommand();\n+        cmd.add(\"update\");\n+        cmd.add(\"--cpu-period=\" + cpuPeriod);\n+        cmd.add(\"--cpu-quota=\" + cpuQuota);\n+        cmd.add(\"--memory=\" + memory);\n+        cmd.add(\"--memory-swap=\" + memory); \/\/ no swap\n+        cmd.add(TARGET_CONTAINER);\n+        return cmd;\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/platform\/docker\/TestLimitsUpdating.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -205,3 +205,1 @@\n-        List<String> cmd = new ArrayList<>();\n-\n-        cmd.add(Container.ENGINE_COMMAND);\n+        List<String> cmd = buildContainerCommand();\n@@ -230,0 +228,6 @@\n+    public static List<String> buildContainerCommand() {\n+        List<String> cmd = new ArrayList<>();\n+        cmd.add(Container.ENGINE_COMMAND);\n+        return cmd;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerTestUtils.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}