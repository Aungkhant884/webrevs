{"files":[{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4513402\n+  @summary AWTEventMulticaster.getListeners throws unexpected ArrayStoreException\n+*\/\n+\n+import java.awt.AWTEventMulticaster;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentListener;\n+import java.awt.event.FocusListener;\n+\n+public class ArrayStoreException {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        ComponentListener mc =\n+            AWTEventMulticaster.add(\n+                new ComponentAdapter() {},\n+                new ComponentAdapter() {});\n+\n+        if (AWTEventMulticaster.getListeners(mc, FocusListener.class).length == 0) {\n+            System.out.println(\"OKAY\");\n+        } else {\n+            System.out.println(\"empty array expected\");\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/AWTEventMulticaster\/ArrayStoreException.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,323 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4370733\n+  @summary AWTKeyStroke's getAWTKeyStroke(String) and toString() method aren't symmetric\n+*\/\n+\n+import java.awt.AWTKeyStroke;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import javax.swing.KeyStroke;\n+\n+public class ToStringTest {\n+\n+    \/* Note this test is deliberately testing the deprecated constants\n+     * as well as their replacements.\n+     *\/\n+    @SuppressWarnings(\"deprecation\")\n+    public static final int[] modifiers = {\n+        0,\n+        InputEvent.SHIFT_MASK,\n+        InputEvent.CTRL_MASK,\n+        InputEvent.META_MASK,\n+        InputEvent.ALT_MASK,\n+        InputEvent.ALT_GRAPH_MASK,\n+        InputEvent.BUTTON1_MASK,\n+        InputEvent.BUTTON2_MASK,\n+        InputEvent.BUTTON3_MASK,\n+        InputEvent.SHIFT_DOWN_MASK,\n+        InputEvent.CTRL_DOWN_MASK,\n+        InputEvent.META_DOWN_MASK,\n+        InputEvent.ALT_DOWN_MASK,\n+        InputEvent.BUTTON1_DOWN_MASK,\n+        InputEvent.BUTTON2_DOWN_MASK,\n+        InputEvent.BUTTON3_DOWN_MASK,\n+        InputEvent.ALT_GRAPH_DOWN_MASK\n+    };\n+\n+    public static final int[] keys = {\n+        KeyEvent.VK_A,\n+        KeyEvent.VK_B,\n+        KeyEvent.VK_C,\n+        KeyEvent.VK_D,\n+        KeyEvent.VK_E,\n+        KeyEvent.VK_F,\n+        KeyEvent.VK_G,\n+        KeyEvent.VK_H,\n+        KeyEvent.VK_I,\n+        KeyEvent.VK_J,\n+        KeyEvent.VK_K,\n+        KeyEvent.VK_L,\n+        KeyEvent.VK_M,\n+        KeyEvent.VK_N,\n+        KeyEvent.VK_O,\n+        KeyEvent.VK_P,\n+        KeyEvent.VK_Q,\n+        KeyEvent.VK_R,\n+        KeyEvent.VK_S,\n+        KeyEvent.VK_T,\n+        KeyEvent.VK_U,\n+        KeyEvent.VK_V,\n+        KeyEvent.VK_W,\n+        KeyEvent.VK_X,\n+        KeyEvent.VK_Y,\n+        KeyEvent.VK_Z,\n+        KeyEvent.VK_0,\n+        KeyEvent.VK_1,\n+        KeyEvent.VK_2,\n+        KeyEvent.VK_3,\n+        KeyEvent.VK_4,\n+        KeyEvent.VK_5,\n+        KeyEvent.VK_6,\n+        KeyEvent.VK_7,\n+        KeyEvent.VK_8,\n+        KeyEvent.VK_9,\n+\n+        KeyEvent.VK_COMMA,\n+        KeyEvent.VK_PERIOD,\n+        KeyEvent.VK_SLASH,\n+        KeyEvent.VK_SEMICOLON,\n+        KeyEvent.VK_EQUALS,\n+        KeyEvent.VK_OPEN_BRACKET,\n+        KeyEvent.VK_BACK_SLASH,\n+        KeyEvent.VK_CLOSE_BRACKET,\n+\n+        KeyEvent.VK_ENTER,\n+        KeyEvent.VK_BACK_SPACE,\n+        KeyEvent.VK_TAB,\n+        KeyEvent.VK_CANCEL,\n+        KeyEvent.VK_CLEAR,\n+        KeyEvent.VK_SHIFT,\n+        KeyEvent.VK_CONTROL,\n+        KeyEvent.VK_ALT,\n+        KeyEvent.VK_PAUSE,\n+        KeyEvent.VK_CAPS_LOCK,\n+        KeyEvent.VK_ESCAPE,\n+        KeyEvent.VK_SPACE,\n+        KeyEvent.VK_PAGE_UP,\n+        KeyEvent.VK_PAGE_DOWN,\n+        KeyEvent.VK_END,\n+        KeyEvent.VK_HOME,\n+        KeyEvent.VK_LEFT,\n+        KeyEvent.VK_UP,\n+        KeyEvent.VK_RIGHT,\n+        KeyEvent.VK_DOWN,\n+        KeyEvent.VK_ADD,\n+        KeyEvent.VK_SEPARATOR,\n+        KeyEvent.VK_SUBTRACT,\n+        KeyEvent.VK_DECIMAL,\n+        KeyEvent.VK_DIVIDE,\n+        KeyEvent.VK_DELETE,\n+        KeyEvent.VK_NUM_LOCK,\n+        KeyEvent.VK_SCROLL_LOCK,\n+\n+        KeyEvent.VK_WINDOWS,\n+        KeyEvent.VK_CONTEXT_MENU,\n+\n+        KeyEvent.VK_F1,\n+        KeyEvent.VK_F2,\n+        KeyEvent.VK_F3,\n+        KeyEvent.VK_F4,\n+        KeyEvent.VK_F5,\n+        KeyEvent.VK_F6,\n+        KeyEvent.VK_F7,\n+        KeyEvent.VK_F8,\n+        KeyEvent.VK_F9,\n+        KeyEvent.VK_F10,\n+        KeyEvent.VK_F11,\n+        KeyEvent.VK_F12,\n+        KeyEvent.VK_F13,\n+        KeyEvent.VK_F14,\n+        KeyEvent.VK_F15,\n+        KeyEvent.VK_F16,\n+        KeyEvent.VK_F17,\n+        KeyEvent.VK_F18,\n+        KeyEvent.VK_F19,\n+        KeyEvent.VK_F20,\n+        KeyEvent.VK_F21,\n+        KeyEvent.VK_F22,\n+        KeyEvent.VK_F23,\n+        KeyEvent.VK_F24,\n+\n+        KeyEvent.VK_PRINTSCREEN,\n+        KeyEvent.VK_INSERT,\n+        KeyEvent.VK_HELP,\n+        KeyEvent.VK_META,\n+        KeyEvent.VK_BACK_QUOTE,\n+        KeyEvent.VK_QUOTE,\n+\n+        KeyEvent.VK_KP_UP,\n+        KeyEvent.VK_KP_DOWN,\n+        KeyEvent.VK_KP_LEFT,\n+        KeyEvent.VK_KP_RIGHT,\n+\n+        KeyEvent.VK_DEAD_GRAVE,\n+        KeyEvent.VK_DEAD_ACUTE,\n+        KeyEvent.VK_DEAD_CIRCUMFLEX,\n+        KeyEvent.VK_DEAD_TILDE,\n+        KeyEvent.VK_DEAD_MACRON,\n+        KeyEvent.VK_DEAD_BREVE,\n+        KeyEvent.VK_DEAD_ABOVEDOT,\n+        KeyEvent.VK_DEAD_DIAERESIS,\n+        KeyEvent.VK_DEAD_ABOVERING,\n+        KeyEvent.VK_DEAD_DOUBLEACUTE,\n+        KeyEvent.VK_DEAD_CARON,\n+        KeyEvent.VK_DEAD_CEDILLA,\n+        KeyEvent.VK_DEAD_OGONEK,\n+        KeyEvent.VK_DEAD_IOTA,\n+        KeyEvent.VK_DEAD_VOICED_SOUND,\n+        KeyEvent.VK_DEAD_SEMIVOICED_SOUND,\n+\n+        KeyEvent.VK_AMPERSAND,\n+        KeyEvent.VK_ASTERISK,\n+        KeyEvent.VK_QUOTEDBL,\n+        KeyEvent.VK_LESS,\n+        KeyEvent.VK_GREATER,\n+        KeyEvent.VK_BRACELEFT,\n+        KeyEvent.VK_BRACERIGHT,\n+        KeyEvent.VK_AT,\n+        KeyEvent.VK_COLON,\n+        KeyEvent.VK_CIRCUMFLEX,\n+        KeyEvent.VK_DOLLAR,\n+        KeyEvent.VK_EURO_SIGN,\n+        KeyEvent.VK_EXCLAMATION_MARK,\n+        KeyEvent.VK_INVERTED_EXCLAMATION_MARK,\n+        KeyEvent.VK_LEFT_PARENTHESIS,\n+        KeyEvent.VK_NUMBER_SIGN,\n+        KeyEvent.VK_MINUS,\n+        KeyEvent.VK_PLUS,\n+        KeyEvent.VK_RIGHT_PARENTHESIS,\n+        KeyEvent.VK_UNDERSCORE,\n+\n+        KeyEvent.VK_FINAL,\n+        KeyEvent.VK_CONVERT,\n+        KeyEvent.VK_NONCONVERT,\n+        KeyEvent.VK_ACCEPT,\n+        KeyEvent.VK_MODECHANGE,\n+        KeyEvent.VK_KANA,\n+        KeyEvent.VK_KANJI,\n+        KeyEvent.VK_ALPHANUMERIC,\n+        KeyEvent.VK_KATAKANA,\n+        KeyEvent.VK_HIRAGANA,\n+        KeyEvent.VK_FULL_WIDTH,\n+        KeyEvent.VK_HALF_WIDTH,\n+        KeyEvent.VK_ROMAN_CHARACTERS,\n+        KeyEvent.VK_ALL_CANDIDATES,\n+        KeyEvent.VK_PREVIOUS_CANDIDATE,\n+        KeyEvent.VK_CODE_INPUT,\n+        KeyEvent.VK_JAPANESE_KATAKANA,\n+        KeyEvent.VK_JAPANESE_HIRAGANA,\n+        KeyEvent.VK_JAPANESE_ROMAN,\n+        KeyEvent.VK_KANA_LOCK,\n+        KeyEvent.VK_INPUT_METHOD_ON_OFF,\n+\n+        KeyEvent.VK_AGAIN,\n+        KeyEvent.VK_UNDO,\n+        KeyEvent.VK_COPY,\n+        KeyEvent.VK_PASTE,\n+        KeyEvent.VK_CUT,\n+        KeyEvent.VK_FIND,\n+        KeyEvent.VK_PROPS,\n+        KeyEvent.VK_STOP,\n+\n+        KeyEvent.VK_COMPOSE,\n+        KeyEvent.VK_ALT_GRAPH,\n+        KeyEvent.VK_BEGIN,\n+\n+        KeyEvent.VK_NUMPAD0,\n+        KeyEvent.VK_NUMPAD1,\n+        KeyEvent.VK_NUMPAD2,\n+        KeyEvent.VK_NUMPAD3,\n+        KeyEvent.VK_NUMPAD4,\n+        KeyEvent.VK_NUMPAD5,\n+        KeyEvent.VK_NUMPAD6,\n+        KeyEvent.VK_NUMPAD7,\n+        KeyEvent.VK_NUMPAD8,\n+        KeyEvent.VK_NUMPAD9\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        System.err.println(\"**** Testing AWTKeyStrokes\");\n+        for (int n_key=0; n_key < keys.length; n_key++) {\n+            for (int n_mod=0; n_mod < modifiers.length; n_mod++) {\n+                checkStroke(AWTKeyStroke.getAWTKeyStroke(keys[n_key],\n+                                                         modifiers[n_mod],\n+                                                         true));\n+                checkStroke(AWTKeyStroke.getAWTKeyStroke(keys[n_key],\n+                                                         modifiers[n_mod],\n+                                                         false));\n+            }\n+        }\n+\n+        System.err.println(\"**** Testing Swing KeyStrokes\");\n+        for (int n_key=0; n_key < keys.length; n_key++) {\n+            for (int n_mod=0; n_mod < modifiers.length; n_mod++) {\n+                checkStroke(KeyStroke.getKeyStroke(keys[n_key],\n+                                                         modifiers[n_mod],\n+                                                         true));\n+                checkStroke(KeyStroke.getKeyStroke(keys[n_key],\n+                                                         modifiers[n_mod],\n+                                                         false));\n+            }\n+        }\n+\n+        Character a = Character.valueOf('a');\n+        System.err.println(\"**** Testing KEY_TYPED AWTKeyStrokes\");\n+        for (int n_mod = 0; n_mod < modifiers.length; n_mod++) {\n+            checkStroke(AWTKeyStroke.getAWTKeyStroke(a, modifiers[n_mod]));\n+        }\n+        System.err.println(\"**** Testing KEY_TYPED Swing KeyStrokes\");\n+        for (int n_mod = 0; n_mod < modifiers.length; n_mod++) {\n+            checkStroke(KeyStroke.getKeyStroke(a, modifiers[n_mod]));\n+        }\n+\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    public static void checkStroke(AWTKeyStroke original) {\n+        System.err.println(\"AWT Original >> \" + original);\n+        AWTKeyStroke copy = AWTKeyStroke.getAWTKeyStroke(original.toString());\n+        \/\/ System.err.println(\"AWT Copy >> \" + copy);\n+        if (!original.equals(copy)) {\n+            System.out.println(\"AWT bad copy for VK= 0x\" +\n+                           Integer.toString(original.getKeyCode(), 16));\n+            throw new RuntimeException(\"Test Failed: for \" + original);\n+        }\n+    }\n+\n+    public static void checkStroke(KeyStroke original) {\n+        System.err.println(\"Swing Original >> \" + original);\n+        KeyStroke copy = KeyStroke.getKeyStroke(original.toString());\n+        \/\/ System.err.println(\"Swing Copy >> \" + copy);\n+        if (!original.equals(copy)) {\n+            System.out.println(\"Swing bad copy for VK= 0x\" +\n+                           Integer.toString(original.getKeyCode(), 16));\n+            throw new RuntimeException(\"Test Failed: for \" + original);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/AWTKeyStroke\/ToStringTest.java","additions":323,"deletions":0,"binary":false,"changes":323,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6242148\n+  @summary API method java.awt.BorderLayout.getConstraints(null) should return null\n+*\/\n+\n+import java.awt.BorderLayout;\n+\n+public class NullConstraintsReturns {\n+\n+    public static void main(String[] args) {\n+        BorderLayout bl = new BorderLayout();\n+        Object constraints = bl.getConstraints(null);\n+        if (constraints != null) {\n+            throw new RuntimeException(\"Test failed. Constraints is not null: \" + constraints);\n+        }\n+        System.out.println(\"Test Passed.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/BorderLayout\/NullConstraintsReturns.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4245382\n+  @summary Tests that Button.setLabel(null) does not cause NPE in Java code or VM crash\n+  @key headful\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+\n+public class ButtonNullLabelTest {\n+\n+    public static void main(String args[]) throws Exception {\n+        EventQueue.invokeAndWait(() -> runTest());\n+    }\n+\n+   static void runTest() {\n+        \/\/ Native code test\n+        Frame frame = new Frame(\"Test null in native\");\n+        Button button = new Button();\n+        try {\n+            button.setLabel(null);\n+            System.out.println(\"Set to null - test native\");\n+            frame.add(button);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            System.out.println(\"Test null in native **successful**\");\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"Test failed - test native\");\n+            throw new RuntimeException(\"Test failed - test native\");\n+        } finally {\n+            frame.dispose();\n+        }\n+\n+        \/\/ Peer code test\n+        frame = new Frame(\"Test null in peer before show\");\n+        button = new Button();\n+        try {\n+            System.out.println(\"Set to null - test native before show\");\n+            frame.add(button);\n+            frame.pack();\n+            button.setLabel(null);\n+            frame.setVisible(true);\n+            System.out.println(\"Set null in peer before show **successful**\");\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"Test failed - test peer before show\");\n+            throw new RuntimeException(\"Test failed - test peer before show\");\n+        } finally {\n+            frame.dispose();\n+        }\n+\n+        \/\/ Peer code test\n+        frame = new Frame(\"Test null in peer after show\");\n+        button = new Button();\n+        try {\n+            System.out.println(\"Set to null - test peer after show\");\n+            frame.add(button);\n+            frame.pack();\n+            frame.setVisible(true);\n+            button.setLabel(null);\n+            System.out.println(\"Test null in peer after show **successful**\");\n+        } catch (NullPointerException npe) {\n+            System.out.println(\"Test failed - peer after show\");\n+            throw new RuntimeException(\"Test failed - peer after show\");\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Button\/ButtonNullLabelTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5044469\n+  @summary REG: Disabled component gains focus and receives keyevents on win32\n+  @key headful\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.KeyEvent;\n+\n+public class DisabledButtonPress implements ActionListener, FocusListener {\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            DisabledButtonPress test = new DisabledButtonPress();\n+            EventQueue.invokeAndWait(() -> test.createUI());\n+            runTest();\n+        } finally {\n+            if (f != null) {\n+               f.dispose();\n+            }\n+        }\n+        if (!testPassed) {\n+            throw new RuntimeException(\"Test Failed.\");\n+        }\n+    }\n+\n+    final static Object FOCUS_LOCK = new Object();\n+    final static Object ACTION_LOCK = new Object();\n+    static volatile Frame f;\n+    static volatile Button b2;\n+    static volatile boolean testPassed = true;\n+\n+    public void createUI() {\n+        f = new Frame(\"DisabledButtonPress\");\n+        b2 = new Button(\"Click Me\");\n+        b2.addActionListener(this);\n+        b2.addFocusListener(this);\n+        f.add(b2);\n+        f.pack();\n+        f.setVisible(true);\n+    }\n+\n+    static void runTest() throws Exception {\n+\n+        Robot robot = new Robot();\n+        robot.delay(500);\n+        System.out.println(\"Requesting focus\");\n+        System.out.println(\" b2.requestFocusInWindow()=\"+  b2.requestFocusInWindow());\n+        b2.setEnabled(false);\n+        synchronized(FOCUS_LOCK) {\n+            FOCUS_LOCK.wait(3000);\n+        }\n+        if (!b2.isFocusOwner()) {\n+            throw new RuntimeException(\"Test failed. Button doesn't have a focus.\");\n+        }\n+        System.out.println(\"Button disabling\");\n+        robot.delay(1000);\n+        robot.keyPress(KeyEvent.VK_SPACE);\n+        robot.delay(10);\n+        robot.keyRelease(KeyEvent.VK_SPACE);\n+        synchronized(ACTION_LOCK) {\n+            ACTION_LOCK.wait(2000); \/\/give time to handle\n+                                    \/\/ ACTION_PERFORMED event from the Button if it was generated\n+        }\n+    }\n+\n+    public void focusGained(FocusEvent ae) {\n+        System.out.println(\"Button got focus\");\n+        synchronized(FOCUS_LOCK) {\n+            FOCUS_LOCK.notify();\n+        }\n+    }\n+\n+    public void focusLost(FocusEvent ae) {}\n+\n+    public void actionPerformed(ActionEvent evt) {\n+        System.out.println(\"Button: \" + evt.getActionCommand() + \" Clicked. Event is \" +evt);\n+        if (evt.getSource() == b2) {\n+            testPassed = false;\n+            synchronized(ACTION_LOCK) {\n+                ACTION_LOCK.notify();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Button\/DisabledButtonPress.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4531849\n+  @summary Test that double action event no longer sent\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+\n+public class DoubleActionEventTest implements ActionListener, WindowListener {\n+\n+    static class Lock {\n+        boolean go = false;\n+        public synchronized boolean getGo() {return go;}\n+        public synchronized void setGo(boolean newGo) {go = newGo;}\n+    }\n+\n+    static volatile Frame f;\n+    static volatile int numActionEvents = 0;\n+    static volatile Lock lock = new Lock();\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            DoubleActionEventTest test = new DoubleActionEventTest();\n+            EventQueue.invokeAndWait(() -> test.createUI());\n+            runTest();\n+        } finally {\n+            if (f != null) {\n+                f.dispose();\n+            }\n+        }\n+    }\n+\n+    public void createUI() {\n+        f = new Frame(\"DoubleActionEventTest\");\n+        f.setLayout (new BorderLayout());\n+        f.addWindowListener(this);\n+        Button b = new Button(\"Action Listening Button\");\n+        b.addActionListener(this);\n+        f.add(b);\n+        f.setBounds(100, 100, 200, 200);\n+        f.setVisible(true);\n+    }\n+\n+    static void runTest() throws Exception {\n+\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(250);\n+        robot.setAutoWaitForIdle(true);\n+        robot.mouseMove(200, 200);\n+\n+        while (!lock.getGo()) {}\n+\n+        robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);\n+\n+        if (numActionEvents != 1) {\n+            System.out.println(\"Wrong number of ActionEvents.  Test FAILS.\");\n+            throw new RuntimeException(\"TEST FAILS\");\n+        }\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        numActionEvents++;\n+        System.out.println(\"Number of ActionEvents: \" + numActionEvents);\n+    }\n+\n+    public void windowActivated(WindowEvent e) {\n+        lock.setGo(true);\n+    }\n+    public void windowClosed(WindowEvent e) {}\n+    public void windowClosing(WindowEvent e) {}\n+    public void windowDeactivated(WindowEvent e) {}\n+    public void windowDeiconified(WindowEvent e) {}\n+    public void windowIconified(WindowEvent e) {}\n+    public void windowOpened(WindowEvent e) {}\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Button\/DoubleActionEventTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}