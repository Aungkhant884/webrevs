{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,4 @@\n- * @run main\/othervm DatagramSocketMulticasting\n- * @run main\/othervm -Djava.net.preferIPv4Stack=true DatagramSocketMulticasting\n- * @run main\/othervm -Djdk.usePlainDatagramSocketImpl=true DatagramSocketMulticasting\n- * @run main\/othervm -Djdk.usePlainDatagramSocketImpl=true -Djava.net.preferIPv4Stack=true DatagramSocketMulticasting\n+ * @run junit\/othervm DatagramSocketMulticasting\n+ * @run junit\/othervm -Djava.net.preferIPv4Stack=true DatagramSocketMulticasting\n+ * @run junit\/othervm -Djdk.usePlainDatagramSocketImpl=true DatagramSocketMulticasting\n+ * @run junit\/othervm -Djdk.usePlainDatagramSocketImpl=true -Djava.net.preferIPv4Stack=true DatagramSocketMulticasting\n@@ -53,0 +53,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -62,0 +63,3 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n@@ -64,0 +68,1 @@\n+    static final int MAX_TRIES = 3;\n@@ -65,2 +70,3 @@\n-    public static void main(String[] args) throws IOException {\n-        IPSupport.throwSkippedExceptionIfNonOperational();\n+    @Test\n+    public void main() throws IOException {\n+        assumeTrue(IPSupport.currentConfigurationIsValid(), \"Invalid networking configuration\");\n@@ -137,1 +143,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertNull(s.getOption(IP_MULTICAST_IF));\n@@ -143,1 +149,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertNull(s.getOption(IP_MULTICAST_IF));\n@@ -160,1 +166,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertNull(s.getOption(IP_MULTICAST_IF));\n@@ -237,1 +243,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) == null);\n+        assertNull(s.getOption(IP_MULTICAST_IF));\n@@ -256,1 +262,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_TTL) == 1);\n+        assertEquals(1, s.getOption(IP_MULTICAST_TTL));\n@@ -261,1 +267,1 @@\n-            assertTrue(s.getOption(IP_MULTICAST_TTL) == ttl);\n+            assertEquals(ttl, s.getOption(IP_MULTICAST_TTL));\n@@ -278,1 +284,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_LOOP) == true);\n+        assertTrue(s.getOption(IP_MULTICAST_LOOP));\n@@ -284,1 +290,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_LOOP) == false);\n+        assertFalse(s.getOption(IP_MULTICAST_LOOP));\n@@ -286,1 +292,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_LOOP) == true);\n+        assertTrue(s.getOption(IP_MULTICAST_LOOP));\n@@ -303,1 +309,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) != null);\n+        assertNotNull(s.getOption(IP_MULTICAST_IF));\n@@ -306,1 +312,2 @@\n-        byte[] message = \"hello\".getBytes(\"UTF-8\");\n+        String message = \"testSendReceive\";\n+        byte[] messageBytes = message.getBytes(\"UTF-8\");\n@@ -309,1 +316,1 @@\n-        DatagramPacket p = new DatagramPacket(message, message.length);\n+        DatagramPacket p = new DatagramPacket(messageBytes, messageBytes.length);\n@@ -313,1 +320,1 @@\n-        \/\/ receive message\n+        \/\/ receive message with retry in case of stray messages\n@@ -315,2 +322,15 @@\n-        p = new DatagramPacket(new byte[1024], 100);\n-        s.receive(p);\n+        for (int i = 1; i <= MAX_TRIES; i++) {\n+            p = new DatagramPacket(new byte[1024], 100);\n+            s.receive(p);\n+            String messageReceived = new String(p.getData(), 0, p.getLength(), \"UTF-8\");\n+\n+            System.out.format(\n+                    \"TestSendReceive iteration [%s], Received DatagramPacket [%s] from [%s]%n\",\n+                    i, messageReceived, s.getLocalSocketAddress());\n+\n+            if (s.getLocalPort() == p.getPort()) {\n+                assertEquals(message, messageReceived,\n+                        String.format(\"expected message %s, instead received %s%n\",\n+                                message, messageReceived));\n+                break;\n+            }\n@@ -318,2 +338,2 @@\n-        assertTrue(p.getLength() == message.length);\n-        assertTrue(p.getPort() == s.getLocalPort());\n+            assertNotEquals(MAX_TRIES, i, \"testSendReceive: too many retries\");\n+        }\n@@ -331,1 +351,1 @@\n-        assertTrue(s.getOption(IP_MULTICAST_IF) != null);\n+        assertNotNull(s.getOption(IP_MULTICAST_IF));\n@@ -335,1 +355,1 @@\n-        String text = nano + \": hello\";\n+        String text = nano + \": testSendNoReceive\";\n@@ -352,1 +372,3 @@\n-                    System.out.format(\"Received unexpected message from %s%n\", p.getSocketAddress());\n+                    String messageReceived = new String(p.getData(), 0, p.getLength(), \"UTF-8\");\n+                    System.out.format(\"Received unexpected message %s from %s%n\",\n+                            messageReceived, p.getSocketAddress());\n@@ -359,20 +381,0 @@\n-\n-\n-    static void assertTrue(boolean e) {\n-        if (!e) throw new RuntimeException();\n-    }\n-\n-    interface ThrowableRunnable {\n-        void run() throws Exception;\n-    }\n-\n-    static void assertThrows(Class<?> exceptionClass, ThrowableRunnable task) {\n-        try {\n-            task.run();\n-            throw new RuntimeException(\"Exception not thrown\");\n-        } catch (Exception e) {\n-            if (!exceptionClass.isInstance(e)) {\n-                throw new RuntimeException(\"expected: \" + exceptionClass + \", actual: \" + e);\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/DatagramSocketMulticasting.java","additions":49,"deletions":47,"binary":false,"changes":96,"status":"modified"}]}