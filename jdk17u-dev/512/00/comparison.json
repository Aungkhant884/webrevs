{"files":[{"patch":"@@ -0,0 +1,233 @@\n+\/*\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.GridLayout;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+import javax.swing.AbstractButton;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4138746\n+ * @summary This testcase tests RFE-4138746 request, verifies the case-sensitive\n+ *          setting of Mnemonics to AbstractButton & JLabel.\n+ * @run main JLabelMnemonicsTest\n+ *\/\n+public class JLabelMnemonicsTest {\n+\n+    private static JButton button1;\n+    private static JButton button2;\n+    private static JLabel label1;\n+    private static JLabel label2;\n+    private static JPanel panel;\n+    private static Robot robot;\n+    private static boolean result;\n+    private static CountDownLatch focusGainedLatch;\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        final boolean isMac =\n+                System.getProperty(\"os.name\").toLowerCase().contains(\"os x\");\n+\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                result = true;\n+                focusGainedLatch = new CountDownLatch(1);\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                \/\/ Verifier 1: Verifies if getDisplayedMnemonicIndex() returns the\n+                \/\/ right index set with setDisplayedMnemonicIndex method for JButton\n+                if (getDisplayedMnemonicIndex(button1) == 5 &&\n+                    getDisplayedMnemonicIndex(button2) == 0) {\n+                    System.out.println(\"Verifier 1 Passed\");\n+                } else {\n+                    System.out.println(\n+                            \"Verifier 1 Failed, testing JButton failed\");\n+                    result = false;\n+                }\n+\n+                \/\/ Verifier 2: Verifies that, on setting displayedMnemonicIndex to\n+                \/\/ -1, the component can be still accessed with the mnemonic set\n+                if (isMac) {\n+                    hitKeys(KeyEvent.VK_ALT, KeyEvent.VK_CONTROL,\n+                            KeyEvent.VK_V);\n+                } else {\n+                    hitKeys(KeyEvent.VK_ALT, KeyEvent.VK_V);\n+                }\n+                if (focusGainedLatch.await(3, TimeUnit.SECONDS)) {\n+                    System.out.println(\"Verifier 2 Passed\");\n+                } else {\n+                    System.out.println(\n+                            \"Verifier 2 Failed, Waited too long, but Button3 \" +\n+                            \"has not yet gained focus in \" + laf);\n+                    result = false;\n+                }\n+\n+                \/\/ Verifier 3: Testing JLabel: Verifies if\n+                \/\/ getDisplayedMnemonicIndex() returns the right\n+                \/\/ index set with setDisplayedMnemonicIndex method for JLabel\n+                if (getDisplayedMnemonicIndex(label1) == 5 &&\n+                    getDisplayedMnemonicIndex(label2) == 0) {\n+                    System.out.println(\"Verifier 3 Passed\");\n+                } else {\n+                    System.out.println(\"Verifier 3, testing JLabel Failed\");\n+                    result = false;\n+                }\n+\n+                if (result) {\n+                    System.out.println(\"Test Passed in \" + laf);\n+                } else {\n+                    throw new RuntimeException(\n+                            \"Test Failed, as one or more verifiers failed in \" +\n+                            laf);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(JLabelMnemonicsTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static int getDisplayedMnemonicIndex(JLabel jLabel)\n+            throws Exception {\n+        final AtomicInteger index = new AtomicInteger();\n+        SwingUtilities.invokeAndWait(\n+                () -> index.set(jLabel.getDisplayedMnemonicIndex()));\n+        return index.get();\n+    }\n+\n+    private static int getDisplayedMnemonicIndex(AbstractButton button)\n+            throws Exception {\n+        final AtomicInteger index = new AtomicInteger();\n+        SwingUtilities.invokeAndWait(\n+                () -> index.set(button.getDisplayedMnemonicIndex()));\n+        return index.get();\n+    }\n+\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        panel = new JPanel();\n+        panel.setLayout(new GridLayout(2, 3));\n+\n+        button1 = new JButton(\"Save As\");\n+        button1.setMnemonic(KeyEvent.VK_A);\n+        button1.setDisplayedMnemonicIndex(5);\n+        panel.add(button1);\n+\n+        button2 = new JButton(\"save AS\");\n+        button2.setMnemonic(KeyEvent.VK_S);\n+        panel.add(button2);\n+\n+        JButton button3 = new JButton(\"Save As\");\n+        button3.setMnemonic(KeyEvent.VK_V);\n+        button3.setDisplayedMnemonicIndex(-1);\n+        panel.add(button3);\n+        button3.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent fe) {\n+                System.out.println(\"FocusGained on Button3\");\n+                focusGainedLatch.countDown();\n+            }\n+        });\n+\n+        label1 = new JLabel(\"Save As\");\n+        label1.setDisplayedMnemonic(KeyEvent.VK_A);\n+        label1.setDisplayedMnemonicIndex(5);\n+        panel.add(label1);\n+\n+        label2 = new JLabel(\"save AS\");\n+        label2.setDisplayedMnemonic(KeyEvent.VK_S);\n+        panel.add(label2);\n+\n+        frame.add(panel);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JLabel\/4138746\/JLabelMnemonicsTest.java","additions":233,"deletions":0,"binary":false,"changes":233,"status":"added"}]}