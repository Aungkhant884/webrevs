{"files":[{"patch":"@@ -1603,1 +1603,7 @@\n-                register_new_node(cast, x_ctrl);\n+                Node* prev = _igvn.hash_find_insert(cast);\n+                if (prev != nullptr) {\n+                  cast->destruct(&_igvn);\n+                  cast = prev;\n+                } else {\n+                  register_new_node(cast, x_ctrl);\n+                }\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8308103\n+ * @summary Massive (up to ~30x) increase in C2 compilation time since JDK 17\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestSinkingNodesCausesLongCompilation::mainTest -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:RepeatCompilation=30 TestSinkingNodesCausesLongCompilation\n+ *\/\n+\n+public class TestSinkingNodesCausesLongCompilation {\n+    public static final int N = 400;\n+    public static int iFld=41489;\n+\n+    public void mainTest(String[] strArr1) {\n+        int i9=-13, i10=-248, i11=-4, i13=33, i15=-171, i18=-58, iArr2[]=new int[N];\n+\n+        for (i9 = 7; i9 < 256; i9++) {\n+            i11 = 1;\n+            do {\n+            } while (++i11 < 101);\n+        }\n+        for (int i14 : iArr2) {\n+            for (i15 = 63; 0 < i15; i15 -= 2) {\n+                i10 *= i13;\n+                i10 >>= i14;\n+            }\n+            for (i18 = 2; 63 > i18; i18++) {\n+                i10 = iFld;\n+                iArr2[i18] |= i11;\n+            }\n+        }\n+        System.out.println(\"i9 = \" + i9);\n+    }\n+\n+    public static void main(String[] strArr) {\n+        TestSinkingNodesCausesLongCompilation _instance = new TestSinkingNodesCausesLongCompilation();\n+        for (int i = 0; i < 10; i++) {\n+            _instance.mainTest(strArr);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSinkingNodesCausesLongCompilation.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}