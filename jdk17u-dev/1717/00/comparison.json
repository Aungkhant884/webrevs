{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,1 @@\n-        if ((moduleInfo != null) != isModular) {\n+        if ((moduleInfo == null) == isModular) {\n@@ -262,4 +262,1 @@\n-        if (value.isPresent()) {\n-            return value.get().toString();\n-        }\n-        return null;\n+        return value.map(Object::toString).orElse(null);\n@@ -268,2 +265,1 @@\n-    private static <T> T getPathParam(Map<String, ? super Object> params,\n-            String paramName, Supplier<T> func) throws ConfigException {\n+    private static <T> T getPathParam(String paramName, Supplier<T> func) throws ConfigException {\n@@ -281,1 +277,1 @@\n-        return getPathParam(params, paramName, () -> {\n+        return getPathParam(paramName, () -> {\n@@ -300,1 +296,1 @@\n-                    .collect(Collectors.toUnmodifiableList());\n+                    .toList();\n@@ -308,7 +304,3 @@\n-        return getPathParam(params, paramName, () -> {\n-            String value = (String) params.get(paramName);\n-            return (value == null) ? List.of() :\n-                    List.of(value.split(File.pathSeparator)).stream()\n-                    .map(Path::of)\n-                    .collect(Collectors.toUnmodifiableList());\n-        });\n+        return getPathParam(paramName, () ->\n+                params.get(paramName) instanceof String value ?\n+                        Stream.of(value.split(File.pathSeparator)).map(Path::of).toList() : List.of());\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherData.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"}]}