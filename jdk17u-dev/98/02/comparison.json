{"files":[{"patch":"@@ -1059,10 +1059,17 @@\n-            long colorBits[MAX_ICON_SIZE * MAX_ICON_SIZE];\n-            GetDIBits(dc, iconInfo.hbmColor, 0, iconSize, colorBits, &bmi, DIB_RGB_COLORS);\n-            \/\/ XP supports alpha in some icons, and depending on device.\n-            \/\/ This should take precedence over the icon mask bits.\n-            BOOL hasAlpha = FALSE;\n-            if (IS_WINXP) {\n-                for (int i = 0; i < nBits; i++) {\n-                    if ((colorBits[i] & 0xff000000) != 0) {\n-                        hasAlpha = TRUE;\n-                        break;\n+\n+            long *colorBits = NULL;\n+            long *maskBits = NULL;\n+\n+            try {\n+                entry_point();\n+                colorBits = (long*)safe_Malloc(MAX_ICON_SIZE * MAX_ICON_SIZE * sizeof(long));\n+                GetDIBits(dc, iconInfo.hbmColor, 0, iconSize, colorBits, &bmi, DIB_RGB_COLORS);\n+                \/\/ XP supports alpha in some icons, and depending on device.\n+                \/\/ This should take precedence over the icon mask bits.\n+                BOOL hasAlpha = FALSE;\n+                if (IS_WINXP) {\n+                    for (int i = 0; i < nBits; i++) {\n+                        if ((colorBits[i] & 0xff000000) != 0) {\n+                            hasAlpha = TRUE;\n+                            break;\n+                        }\n@@ -1071,9 +1078,9 @@\n-            }\n-            if (!hasAlpha) {\n-                \/\/ Extract the mask bitmap\n-                long maskBits[MAX_ICON_SIZE * MAX_ICON_SIZE];\n-                GetDIBits(dc, iconInfo.hbmMask, 0, iconSize, maskBits, &bmi, DIB_RGB_COLORS);\n-                \/\/ Copy the mask alphas into the color bits\n-                for (int i = 0; i < nBits; i++) {\n-                    if (maskBits[i] == 0) {\n-                        colorBits[i] |= 0xff000000;\n+                if (!hasAlpha) {\n+                    \/\/ Extract the mask bitmap\n+                    maskBits = (long*)safe_Malloc(MAX_ICON_SIZE * MAX_ICON_SIZE * sizeof(long));\n+                    GetDIBits(dc, iconInfo.hbmMask, 0, iconSize, maskBits, &bmi, DIB_RGB_COLORS);\n+                    \/\/ Copy the mask alphas into the color bits\n+                    for (int i = 0; i < nBits; i++) {\n+                        if (maskBits[i] == 0) {\n+                            colorBits[i] |= 0xff000000;\n+                        }\n@@ -1082,0 +1089,8 @@\n+                \/\/ Create java array\n+                iconBits = env->NewIntArray(nBits);\n+                if (!(env->ExceptionCheck())) {\n+                    \/\/ Copy values to java array\n+                    env->SetIntArrayRegion(iconBits, 0, nBits, colorBits);\n+                }\n+            } catch(std::bad_alloc&) {\n+                handle_bad_alloc();\n@@ -1083,0 +1098,1 @@\n+\n@@ -1085,6 +1101,9 @@\n-            \/\/ Create java array\n-            iconBits = env->NewIntArray(nBits);\n-            if (!(env->ExceptionCheck())) {\n-            \/\/ Copy values to java array\n-            env->SetIntArrayRegion(iconBits, 0, nBits, colorBits);\n-        }\n+\n+            \/\/ Free bitmap buffers if they were allocated\n+            if (colorBits != NULL) {\n+                free(colorBits);\n+            }\n+\n+            if (maskBits != NULL) {\n+                free(maskBits);\n+            }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/ShellFolder2.cpp","additions":44,"deletions":25,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277299\n+ * @requires (os.family == \"windows\")\n+ * @summary STACK_OVERFLOW in Java_sun_awt_shell_Win32ShellFolder2_getIconBits\n+ * @run main\/othervm -Xss320k ShellFolderStackOverflow\n+ *\/\n+import javax.swing.UIManager;\n+\n+public class ShellFolderStackOverflow {\n+    public static void main(final String... args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        \/\/ With default stack size for 32-bit VM next call will cause VM crash\n+        UIManager.getIcon(\"Tree.openIcon\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSystemView\/ShellFolderStackOverflow.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}