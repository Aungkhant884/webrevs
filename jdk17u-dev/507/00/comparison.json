{"files":[{"patch":"@@ -365,7 +365,14 @@\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ! grep --include=test-summary.txt -lqr build\/*\/test-results -e \"TEST SUCCESS\" ; then\n-            cat build\/*\/test-results\/*\/text\/newfailures.txt ;\n-            cat build\/*\/test-results\/*\/text\/other_errors.txt ;\n-            exit 1 ;\n+      - name: Generate test failure summary\n+        run: |\n+          #\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+          failure_count=$(echo $failures | wc -w || true)\n+          error_count=$(echo $errors | wc -w || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n@@ -374,0 +381,81 @@\n+          echo \"::error:: Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n+\n+          echo \"### :boom: Test failures summary\" >> $GITHUB_STEP_SUMMARY\n+\n+          if [[ \"$failures\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported failure:\" >> $GITHUB_STEP_SUMMARY\n+            for test in $failures; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+          if [[ \"$errors\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported errors:\"  >> $GITHUB_STEP_SUMMARY\n+            for test in $errors; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+      - name: Collect failed test output\n+        run: |\n+          #\n+          # This is a separate step, since if the markdown from a step gets bigger than\n+          # 1024 kB it is skipped, but then the summary above is still generated\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+          report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n+          fi\n+\n+          echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n+          for test in $failures $errors; do\n+            anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+            base_path=\"$(echo \"$test\" | tr '#' '_')\"\n+            report_file=\"$report_dir\/$base_path.jtr\"\n+            hs_err_files=\"$report_dir\/$base_path\/hs_err*.log\"\n+            echo \"####  <a id=\"$anchor\">$test\"\n+\n+            echo \"<details><summary>View test results<\/summary>\"\n+            echo \"\"\n+            echo '```'\n+            if [[ -f \"$report_file\" ]]; then\n+              cat \"$report_file\"\n+            else\n+              echo \"Error: Result file $report_file not found\"\n+            fi\n+            echo '```'\n+            echo \"<\/details>\"\n+            echo \"\"\n+\n+            if [[ \"$hs_err_files\" != \"\" ]]; then\n+              echo \"<details><summary>View HotSpot error log<\/summary>\"\n+              echo \"\"\n+              for hs_err in $hs_err_files; do\n+                echo '```'\n+                echo \"$hs_err:\"\n+                echo \"\"\n+                cat \"$hs_err\"\n+                echo '```'\n+              done\n+\n+              echo \"<\/details>\"\n+              echo \"\"\n+            fi\n+\n+          done >> $GITHUB_STEP_SUMMARY\n+\n+          echo \":arrow_right: To see the entire test log, click the job in the list to the left\"  >> $GITHUB_STEP_SUMMARY\n+\n+          # This will abort the entire job in GHA, which is what we want\n+          exit 1\n+\n@@ -833,7 +921,53 @@\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ! grep --include=test-summary.txt -lqr build\/*\/test-results -e \"TEST SUCCESS\" ; then\n-            cat build\/*\/test-results\/*\/text\/newfailures.txt ;\n-            cat build\/*\/test-results\/*\/text\/other_errors.txt ;\n-            exit 1 ;\n+      - name: Generate test failure summary\n+        run: |\n+          #\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+          failure_count=$(echo $failures | wc -w || true)\n+          error_count=$(echo $errors | wc -w || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n+          fi\n+\n+          echo \"::error:: Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n+\n+          echo \"### :boom: Test failures summary\" >> $GITHUB_STEP_SUMMARY\n+\n+          if [[ \"$failures\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported failure:\" >> $GITHUB_STEP_SUMMARY\n+            for test in $failures; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+          if [[ \"$errors\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported errors:\"  >> $GITHUB_STEP_SUMMARY\n+            for test in $errors; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+      - name: Collect failed test output\n+        run: |\n+          #\n+          # This is a separate step, since if the markdown from a step gets bigger than\n+          # 1024 kB it is skipped, but then the summary above is still generated\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+          report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n@@ -842,0 +976,42 @@\n+          echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n+          for test in $failures $errors; do\n+            anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+            base_path=\"$(echo \"$test\" | tr '#' '_')\"\n+            report_file=\"$report_dir\/$base_path.jtr\"\n+            hs_err_files=\"$report_dir\/$base_path\/hs_err*.log\"\n+            echo \"####  <a id=\"$anchor\">$test\"\n+\n+            echo \"<details><summary>View test results<\/summary>\"\n+            echo \"\"\n+            echo '```'\n+            if [[ -f \"$report_file\" ]]; then\n+              cat \"$report_file\"\n+            else\n+              echo \"Error: Result file $report_file not found\"\n+            fi\n+            echo '```'\n+            echo \"<\/details>\"\n+            echo \"\"\n+\n+            if [[ \"$hs_err_files\" != \"\" ]]; then\n+              echo \"<details><summary>View HotSpot error log<\/summary>\"\n+              echo \"\"\n+              for hs_err in $hs_err_files; do\n+                echo '```'\n+                echo \"$hs_err:\"\n+                echo \"\"\n+                cat \"$hs_err\"\n+                echo '```'\n+              done\n+\n+              echo \"<\/details>\"\n+              echo \"\"\n+            fi\n+\n+          done >> $GITHUB_STEP_SUMMARY\n+\n+          echo \":arrow_right: To see the entire test log, click the job in the list to the left\"  >> $GITHUB_STEP_SUMMARY\n+\n+          # This will abort the entire job in GHA, which is what we want\n+          exit 1\n+\n@@ -1674,7 +1850,14 @@\n-      - name: Check that all tests executed successfully\n-        if: steps.run_tests.outcome != 'skipped'\n-        run: >\n-          if ! grep --include=test-summary.txt -lqr build\/*\/test-results -e \"TEST SUCCESS\" ; then\n-            cat build\/*\/test-results\/*\/text\/newfailures.txt ;\n-            cat build\/*\/test-results\/*\/text\/other_errors.txt ;\n-            exit 1 ;\n+      - name: Generate test failure summary\n+        run: |\n+          #\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+          failure_count=$(echo $failures | wc -w || true)\n+          error_count=$(echo $errors | wc -w || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n@@ -1683,0 +1866,81 @@\n+          echo \"::error:: Test run reported $failure_count test failure(s) and $error_count error(s). See summary for details.\"\n+\n+          echo \"### :boom: Test failures summary\" >> $GITHUB_STEP_SUMMARY\n+\n+          if [[ \"$failures\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported failure:\" >> $GITHUB_STEP_SUMMARY\n+            for test in $failures; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+          if [[ \"$errors\" != \"\" ]]; then\n+            echo \"\" >> $GITHUB_STEP_SUMMARY\n+            echo \"These tests reported errors:\"  >> $GITHUB_STEP_SUMMARY\n+            for test in $errors; do\n+              anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+              echo \"* [$test](#user-content-$anchor)\"\n+            done >> $GITHUB_STEP_SUMMARY\n+          fi\n+\n+      - name: Collect failed test output\n+        run: |\n+          #\n+          # This is a separate step, since if the markdown from a step gets bigger than\n+          # 1024 kB it is skipped, but then the summary above is still generated\n+          test_suite_name=$(cat build\/run-test-prebuilt\/test-support\/test-last-ids.txt)\n+          results_dir=build\/run-test-prebuilt\/test-results\/$test_suite_name\/text\n+          report_dir=build\/run-test-prebuilt\/test-support\/$test_suite_name\n+\n+          failures=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/newfailures.txt || true)\n+          errors=$(sed -e 's!\\(.*\\)\\.java!\\1!' -e '\/^#\/d' $results_dir\/other_errors.txt || true)\n+\n+          if [[ \"$failures\" = \"\" && \"$errors\" = \"\" ]]; then\n+            # If we have nothing to report, exit this step now\n+            exit 0\n+          fi\n+\n+          echo \"### Test output for failed tests\" >> $GITHUB_STEP_SUMMARY\n+          for test in $failures $errors; do\n+            anchor=\"$(echo \"$test\" | tr [A-Z\/] [a-z_])\"\n+            base_path=\"$(echo \"$test\" | tr '#' '_')\"\n+            report_file=\"$report_dir\/$base_path.jtr\"\n+            hs_err_files=\"$report_dir\/$base_path\/hs_err*.log\"\n+            echo \"####  <a id=\"$anchor\">$test\"\n+\n+            echo \"<details><summary>View test results<\/summary>\"\n+            echo \"\"\n+            echo '```'\n+            if [[ -f \"$report_file\" ]]; then\n+              cat \"$report_file\"\n+            else\n+              echo \"Error: Result file $report_file not found\"\n+            fi\n+            echo '```'\n+            echo \"<\/details>\"\n+            echo \"\"\n+\n+            if [[ \"$hs_err_files\" != \"\" ]]; then\n+              echo \"<details><summary>View HotSpot error log<\/summary>\"\n+              echo \"\"\n+              for hs_err in $hs_err_files; do\n+                echo '```'\n+                echo \"$hs_err:\"\n+                echo \"\"\n+                cat \"$hs_err\"\n+                echo '```'\n+              done\n+\n+              echo \"<\/details>\"\n+              echo \"\"\n+            fi\n+\n+          done >> $GITHUB_STEP_SUMMARY\n+\n+          echo \":arrow_right: To see the entire test log, click the job in the list to the left\"  >> $GITHUB_STEP_SUMMARY\n+\n+          # This will abort the entire job in GHA, which is what we want\n+          exit 1\n+\n","filename":".github\/workflows\/submit.yml","additions":285,"deletions":21,"binary":false,"changes":306,"status":"modified"}]}