{"files":[{"patch":"@@ -66,1 +66,1 @@\n-        return theInstance.hashCode();\n+        return System.identityHashCode(theInstance);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/common\/SimpleCMYKColorSpace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.imageio.plugins.common.SimpleCMYKColorSpace;\n@@ -167,0 +168,6 @@\n+    \/** If reading CMYK as an Image, flip the bytes *\/\n+    private boolean invertCMYK = false;\n+\n+    \/** Whether to read as a raster *\/\n+    private boolean readAsRaster = false;\n+\n@@ -941,0 +948,26 @@\n+        case JPEG.JCS_YCCK:\n+        case JPEG.JCS_CMYK:\n+            \/\/ There's no standard CMYK ColorSpace in JDK so raw.getType()\n+            \/\/ will return null so skip that.\n+            \/\/ And we can't add RGB because the number of bands is different.\n+            \/\/ So need to create our own special that is 4 channels and uses\n+            \/\/ the iccCS ColorSpace based on profile data in the image, and\n+            \/\/ if there is none, on the internal CMYKColorSpace class\n+            if (iccCS == null) {\n+                iccCS = SimpleCMYKColorSpace.getInstance();\n+            }\n+            if (iccCS != null) {\n+                list.add(new ImageTypeProducer(colorSpaceCode) {\n+                    @Override\n+                    protected ImageTypeSpecifier produce() {\n+                        int [] bands = {0, 1, 2, 3};\n+                        return ImageTypeSpecifier.createInterleaved\n+                         (iccCS,\n+                          bands,\n+                          DataBuffer.TYPE_BYTE,\n+                          false,\n+                          false);\n+                    }\n+                });\n+            }\n+            break;\n@@ -1022,0 +1055,2 @@\n+        case JPEG.JCS_CMYK:  \/\/ Its CMYK in the file\n+            break;\n@@ -1147,0 +1182,2 @@\n+\n+        readAsRaster = wantRaster;\n@@ -1189,0 +1226,10 @@\n+         \/\/ Adobe seems to have decided that the bytes in CMYK JPEGs\n+         \/\/ should be stored inverted. So we need some extra logic to\n+         \/\/ flip them in that case. Don't flip for the raster case\n+         \/\/ so code that is reading these as rasters today won't\n+         \/\/ see a change in behaviour.\n+         invertCMYK =\n+             (!wantRaster &&\n+              ((colorSpaceCode == JPEG.JCS_YCCK) ||\n+               (colorSpaceCode == JPEG.JCS_CMYK)));\n+\n@@ -1367,0 +1414,15 @@\n+\n+        \/*\n+         * CMYK JPEGs seems to be universally inverted at the byte level.\n+         * Fix this here before storing.\n+         * For \"compatibility\" don't do this if the target is a raster.\n+         * Need to do this here in case the application is listening\n+         * for line-by-line updates to the image.\n+         *\/\n+        if (invertCMYK) {\n+            byte[] data = ((DataBufferByte)raster.getDataBuffer()).getData();\n+            for (int i = 0, len = data.length; i < len; i++) {\n+                data[i] = (byte)(0x0ff - (data[i] & 0xff));\n+            }\n+        }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageReader.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -135,0 +135,1 @@\n+    private boolean invertCMYK = false;\n@@ -658,0 +659,1 @@\n+        invertCMYK = false;\n@@ -811,0 +813,8 @@\n+                         case ColorSpace.TYPE_CMYK:\n+                             outCsType = JPEG.JCS_CMYK;\n+                             if (jfif != null) {\n+                                 ignoreJFIF = true;\n+                                 warningOccurred\n+                                 (WARNING_IMAGE_METADATA_JFIF_MISMATCH);\n+                             }\n+                             break;\n@@ -1017,0 +1027,5 @@\n+        invertCMYK =\n+            (!rasterOnly &&\n+             ((outCsType == JPEG.JCS_YCCK) ||\n+              (outCsType == JPEG.JCS_CMYK)));\n+\n@@ -1727,0 +1742,6 @@\n+        if (invertCMYK) {\n+            byte[] data = ((DataBufferByte)raster.getDataBuffer()).getData();\n+            for (int i = 0, len = data.length; i < len; i++) {\n+                data[i] = (byte)(0x0ff - (data[i] & 0xff));\n+            }\n+        }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/jpeg\/JPEGImageWriter.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,200 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *\n+ * This test verifies that using the built-in ImageI\/O JPEG plugin that JPEG images\n+ * that are in a CMYK ColorSpace can be read into a BufferedImage using the convemience\n+ * APIS and that and the colours are properly interpreted.\n+ * Since there is no standard JDK CMYK ColorSpace, this requires that either the image\n+ * contain an ICC_Profile which can be used by the plugin to create an ICC_ColorSpace\n+ * or that the plugin provides a suitable default CMYK ColorSpace instance by some other means.\n+ *\n+ * The test further verifies that the resultant BufferedImage will be re-written as a CMYK\n+ * BufferedImage. It can do this so long as the BufferedImage has that CMYK ColorSpace\n+ * used by its ColorModel.\n+ *\n+ * The verification requires re-reading again the re-written image and checking the\n+ * re-read image still has a CMYK ColorSpace and the same colours.\n+ *\n+ * Optionally - not for use in the test harness - the test can be passed a parameter\n+ * -display to create a UI which renders all the images the test is\n+ * verifying so it can be manually verified\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274735\n+ * @summary Verify CMYK JPEGs can be read and written\n+ *\/\n+\n+import java.awt.Color;\n+import static java.awt.Color.*;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public class CMYKJPEGTest {\n+\n+    static String[] fileNames = {\n+        \"black_cmyk.jpg\",\n+        \"white_cmyk.jpg\",\n+        \"gray_cmyk.jpg\",\n+        \"red_cmyk.jpg\",\n+        \"blue_cmyk.jpg\",\n+        \"green_cmyk.jpg\",\n+        \"cyan_cmyk.jpg\",\n+        \"magenta_cmyk.jpg\",\n+        \"yellow_cmyk.jpg\",\n+    };\n+\n+    static Color[] colors = {\n+         black,\n+         white,\n+         gray,\n+         red,\n+         blue,\n+         green,\n+         cyan,\n+         magenta,\n+         yellow,\n+    };\n+\n+    static boolean display;\n+\n+    static BufferedImage[] readImages;\n+    static BufferedImage[] writtenImages;\n+    static int imageIndex = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        if (args.length > 0) {\n+            display = \"-display\".equals(args[0]);\n+        }\n+\n+        String sep = System.getProperty(\"file.separator\");\n+        String dir = System.getProperty(\"test.src\", \".\");\n+        String prefix = dir+sep;\n+\n+        readImages = new BufferedImage[fileNames.length];\n+        writtenImages = new BufferedImage[fileNames.length];\n+\n+        for (String fileName : fileNames) {\n+            String color = fileName.replace(\"_cmyk.jpg\", \"\");\n+            test(prefix+fileName, color, imageIndex++);\n+        }\n+        if (display) {\n+            SwingUtilities.invokeAndWait(() -> createUI());\n+        }\n+    }\n+\n+    static void test(String fileName, String color, int index)\n+                 throws IOException {\n+\n+        readImages[index] = ImageIO.read(new File(fileName));\n+        verify(readImages[index], color, colors[index]);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ImageIO.write(readImages[index], \"jpg\", baos);\n+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+        writtenImages[index] = ImageIO.read(bais);\n+        verify(writtenImages[index], color, colors[index]);\n+    }\n+\n+    static void verify(BufferedImage img, String colorName, Color c) {\n+        ColorModel cm = img.getColorModel();\n+        int tc = cm.getNumComponents();\n+        int cc = cm.getNumColorComponents();\n+        if (cc != 4 || tc != 4) {\n+            throw new RuntimeException(\"Unexpected num comp for \" + img);\n+        }\n+\n+        int rgb = img.getRGB(0,0);\n+        int c_red = c.getRed();\n+        int c_green = c.getGreen();\n+        int c_blue = c.getBlue();\n+        int i_red =   (rgb & 0x0ff0000) >> 16;\n+        int i_green = (rgb & 0x000ff00) >> 8;\n+        int i_blue =  (rgb & 0x00000ff);\n+        int tol = 16;\n+        if ((Math.abs(i_red - c_red) > tol) ||\n+            (Math.abs(i_green - c_green) > tol) ||\n+            (Math.abs(i_blue - c_blue) > tol))\n+        {\n+           System.err.println(\"red=\"+i_red+\" green=\"+i_green+\" blue=\"+i_blue);\n+           throw new RuntimeException(\"Too different \" + img + \" \" + colorName + \" \" + c);\n+        }\n+    }\n+\n+    static class ImageComp extends JComponent {\n+\n+        BufferedImage img;\n+\n+        ImageComp(BufferedImage img) {\n+           this.img = img;\n+        }\n+\n+        public Dimension getPreferredSize() {\n+            return new Dimension(img.getWidth(), img.getHeight());\n+        }\n+\n+        public Dimension getMinimumSize() {\n+           return getPreferredSize();\n+        }\n+\n+        public void paintComponent(Graphics g) {\n+           super.paintComponent(g);\n+           g.drawImage(img, 0, 0, null);\n+        }\n+    }\n+\n+    static void createUI() {\n+        JFrame f = new JFrame(\"CMYK JPEG Test\");\n+        JPanel p = new JPanel();\n+        p.setLayout(new GridLayout(3, colors.length, 10, 10));\n+        for (String s :  fileNames) {\n+           p.add(new JLabel(s.replace(\"_cmyk.jpg\", \"\")));\n+        }\n+        for (BufferedImage i : readImages) {\n+            p.add(new ImageComp(i));\n+        }\n+        for (BufferedImage i : writtenImages) {\n+            p.add(new ImageComp(i));\n+        }\n+        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        f.add(p);\n+        f.pack();\n+        f.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/CMYKJPEGTest.java","additions":200,"deletions":0,"binary":false,"changes":200,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/black_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/blue_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/cyan_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/gray_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/green_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/magenta_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/red_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/white_cmyk.jpg","binary":true,"status":"added"},{"filename":"test\/jdk\/javax\/imageio\/plugins\/jpeg\/CMYK\/yellow_cmyk.jpg","binary":true,"status":"added"}]}