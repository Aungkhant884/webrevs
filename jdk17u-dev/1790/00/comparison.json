{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.awt.font.FontRenderContext;\n@@ -64,0 +65,3 @@\n+    \/** Locale for getting font names. *\/\n+    private static final Locale ENGLISH_LOCALE = Locale.ENGLISH;\n+\n@@ -70,1 +74,1 @@\n-                              .getAvailableFontFamilyNames(Locale.ENGLISH))\n+                              .getAvailableFontFamilyNames(ENGLISH_LOCALE))\n@@ -73,0 +77,1 @@\n+                      .filter(font -> !isBrokenFont(font))\n@@ -85,0 +90,20 @@\n+    \/**\n+     * Checks whether the font renders the glyph in {@code TEXT} and\n+     * returns {@code true} if the glyph isn't rendered.\n+     *\n+     * @param font the font to test\n+     * @return {@code true} if the visual bounds of {@code TEXT} are empty, and\n+     *         {@code false} otherwise\n+     *\/\n+    private static boolean isBrokenFont(final Font font) {\n+        final boolean empty =\n+                font.createGlyphVector(new FontRenderContext(null, false, false),\n+                                       TEXT)\n+                    .getVisualBounds()\n+                    .isEmpty();\n+        if (empty) {\n+            System.err.println(\"Broken font: \" + font.getFontName(ENGLISH_LOCALE));\n+        }\n+        return empty;\n+    }\n+\n@@ -148,1 +173,1 @@\n-        String fontName = font.getFontName(Locale.ENGLISH);\n+        String fontName = font.getFontName(ENGLISH_LOCALE);\n","filename":"test\/jdk\/java\/awt\/font\/FontScaling\/StretchedFontTest.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}