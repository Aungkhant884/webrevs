{"files":[{"patch":"@@ -3226,0 +3226,188 @@\n+  \/\/ Arguments:\n+  \/\/\n+  \/\/ Inputs:\n+  \/\/   c_rarg0   - byte[]  source+offset\n+  \/\/   c_rarg1   - int[]   SHA.state\n+  \/\/   c_rarg2   - int     offset\n+  \/\/   c_rarg3   - int     limit\n+  \/\/\n+  address generate_md5_implCompress(bool multi_block, const char *name) {\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, \"StubRoutines\", name);\n+    address start = __ pc();\n+\n+    Register buf       = c_rarg0;\n+    Register state     = c_rarg1;\n+    Register ofs       = c_rarg2;\n+    Register limit     = c_rarg3;\n+    Register a         = r4;\n+    Register b         = r5;\n+    Register c         = r6;\n+    Register d         = r7;\n+    Register rscratch3 = r10;\n+    Register rscratch4 = r11;\n+\n+    Label keys;\n+    Label md5_loop;\n+\n+    __ BIND(md5_loop);\n+\n+    \/\/ Save hash values for addition after rounds\n+    __ ldrw(a, Address(state,  0));\n+    __ ldrw(b, Address(state,  4));\n+    __ ldrw(c, Address(state,  8));\n+    __ ldrw(d, Address(state, 12));\n+\n+#define FF(r1, r2, r3, r4, k, s, t)              \\\n+    __ eorw(rscratch3, r3, r4);                  \\\n+    __ movw(rscratch2, t);                       \\\n+    __ andw(rscratch3, rscratch3, r2);           \\\n+    __ addw(rscratch4, r1, rscratch2);           \\\n+    __ ldrw(rscratch1, Address(buf, k*4));       \\\n+    __ eorw(rscratch3, rscratch3, r4);           \\\n+    __ addw(rscratch3, rscratch3, rscratch1);    \\\n+    __ addw(rscratch3, rscratch3, rscratch4);    \\\n+    __ rorw(rscratch2, rscratch3, 32 - s);       \\\n+    __ addw(r1, rscratch2, r2);\n+\n+#define GG(r1, r2, r3, r4, k, s, t)              \\\n+    __ eorw(rscratch2, r2, r3);                  \\\n+    __ ldrw(rscratch1, Address(buf, k*4));       \\\n+    __ andw(rscratch3, rscratch2, r4);           \\\n+    __ movw(rscratch2, t);                       \\\n+    __ eorw(rscratch3, rscratch3, r3);           \\\n+    __ addw(rscratch4, r1, rscratch2);           \\\n+    __ addw(rscratch3, rscratch3, rscratch1);    \\\n+    __ addw(rscratch3, rscratch3, rscratch4);    \\\n+    __ rorw(rscratch2, rscratch3, 32 - s);       \\\n+    __ addw(r1, rscratch2, r2);\n+\n+#define HH(r1, r2, r3, r4, k, s, t)              \\\n+    __ eorw(rscratch3, r3, r4);                  \\\n+    __ movw(rscratch2, t);                       \\\n+    __ addw(rscratch4, r1, rscratch2);           \\\n+    __ ldrw(rscratch1, Address(buf, k*4));       \\\n+    __ eorw(rscratch3, rscratch3, r2);           \\\n+    __ addw(rscratch3, rscratch3, rscratch1);    \\\n+    __ addw(rscratch3, rscratch3, rscratch4);    \\\n+    __ rorw(rscratch2, rscratch3, 32 - s);       \\\n+    __ addw(r1, rscratch2, r2);\n+\n+#define II(r1, r2, r3, r4, k, s, t)              \\\n+    __ movw(rscratch3, t);                       \\\n+    __ ornw(rscratch2, r2, r4);                  \\\n+    __ addw(rscratch4, r1, rscratch3);           \\\n+    __ ldrw(rscratch1, Address(buf, k*4));       \\\n+    __ eorw(rscratch3, rscratch2, r3);           \\\n+    __ addw(rscratch3, rscratch3, rscratch1);    \\\n+    __ addw(rscratch3, rscratch3, rscratch4);    \\\n+    __ rorw(rscratch2, rscratch3, 32 - s);       \\\n+    __ addw(r1, rscratch2, r2);\n+\n+    \/\/ Round 1\n+    FF(a, b, c, d,  0,  7, 0xd76aa478)\n+    FF(d, a, b, c,  1, 12, 0xe8c7b756)\n+    FF(c, d, a, b,  2, 17, 0x242070db)\n+    FF(b, c, d, a,  3, 22, 0xc1bdceee)\n+    FF(a, b, c, d,  4,  7, 0xf57c0faf)\n+    FF(d, a, b, c,  5, 12, 0x4787c62a)\n+    FF(c, d, a, b,  6, 17, 0xa8304613)\n+    FF(b, c, d, a,  7, 22, 0xfd469501)\n+    FF(a, b, c, d,  8,  7, 0x698098d8)\n+    FF(d, a, b, c,  9, 12, 0x8b44f7af)\n+    FF(c, d, a, b, 10, 17, 0xffff5bb1)\n+    FF(b, c, d, a, 11, 22, 0x895cd7be)\n+    FF(a, b, c, d, 12,  7, 0x6b901122)\n+    FF(d, a, b, c, 13, 12, 0xfd987193)\n+    FF(c, d, a, b, 14, 17, 0xa679438e)\n+    FF(b, c, d, a, 15, 22, 0x49b40821)\n+\n+    \/\/ Round 2\n+    GG(a, b, c, d,  1,  5, 0xf61e2562)\n+    GG(d, a, b, c,  6,  9, 0xc040b340)\n+    GG(c, d, a, b, 11, 14, 0x265e5a51)\n+    GG(b, c, d, a,  0, 20, 0xe9b6c7aa)\n+    GG(a, b, c, d,  5,  5, 0xd62f105d)\n+    GG(d, a, b, c, 10,  9, 0x02441453)\n+    GG(c, d, a, b, 15, 14, 0xd8a1e681)\n+    GG(b, c, d, a,  4, 20, 0xe7d3fbc8)\n+    GG(a, b, c, d,  9,  5, 0x21e1cde6)\n+    GG(d, a, b, c, 14,  9, 0xc33707d6)\n+    GG(c, d, a, b,  3, 14, 0xf4d50d87)\n+    GG(b, c, d, a,  8, 20, 0x455a14ed)\n+    GG(a, b, c, d, 13,  5, 0xa9e3e905)\n+    GG(d, a, b, c,  2,  9, 0xfcefa3f8)\n+    GG(c, d, a, b,  7, 14, 0x676f02d9)\n+    GG(b, c, d, a, 12, 20, 0x8d2a4c8a)\n+\n+    \/\/ Round 3\n+    HH(a, b, c, d,  5,  4, 0xfffa3942)\n+    HH(d, a, b, c,  8, 11, 0x8771f681)\n+    HH(c, d, a, b, 11, 16, 0x6d9d6122)\n+    HH(b, c, d, a, 14, 23, 0xfde5380c)\n+    HH(a, b, c, d,  1,  4, 0xa4beea44)\n+    HH(d, a, b, c,  4, 11, 0x4bdecfa9)\n+    HH(c, d, a, b,  7, 16, 0xf6bb4b60)\n+    HH(b, c, d, a, 10, 23, 0xbebfbc70)\n+    HH(a, b, c, d, 13,  4, 0x289b7ec6)\n+    HH(d, a, b, c,  0, 11, 0xeaa127fa)\n+    HH(c, d, a, b,  3, 16, 0xd4ef3085)\n+    HH(b, c, d, a,  6, 23, 0x04881d05)\n+    HH(a, b, c, d,  9,  4, 0xd9d4d039)\n+    HH(d, a, b, c, 12, 11, 0xe6db99e5)\n+    HH(c, d, a, b, 15, 16, 0x1fa27cf8)\n+    HH(b, c, d, a,  2, 23, 0xc4ac5665)\n+\n+    \/\/ Round 4\n+    II(a, b, c, d,  0,  6, 0xf4292244)\n+    II(d, a, b, c,  7, 10, 0x432aff97)\n+    II(c, d, a, b, 14, 15, 0xab9423a7)\n+    II(b, c, d, a,  5, 21, 0xfc93a039)\n+    II(a, b, c, d, 12,  6, 0x655b59c3)\n+    II(d, a, b, c,  3, 10, 0x8f0ccc92)\n+    II(c, d, a, b, 10, 15, 0xffeff47d)\n+    II(b, c, d, a,  1, 21, 0x85845dd1)\n+    II(a, b, c, d,  8,  6, 0x6fa87e4f)\n+    II(d, a, b, c, 15, 10, 0xfe2ce6e0)\n+    II(c, d, a, b,  6, 15, 0xa3014314)\n+    II(b, c, d, a, 13, 21, 0x4e0811a1)\n+    II(a, b, c, d,  4,  6, 0xf7537e82)\n+    II(d, a, b, c, 11, 10, 0xbd3af235)\n+    II(c, d, a, b,  2, 15, 0x2ad7d2bb)\n+    II(b, c, d, a,  9, 21, 0xeb86d391)\n+\n+#undef FF\n+#undef GG\n+#undef HH\n+#undef II\n+\n+    \/\/ write hash values back in the correct order\n+    __ ldrw(rscratch1, Address(state,  0));\n+    __ addw(rscratch1, rscratch1, a);\n+    __ strw(rscratch1, Address(state,  0));\n+\n+    __ ldrw(rscratch2, Address(state,  4));\n+    __ addw(rscratch2, rscratch2, b);\n+    __ strw(rscratch2, Address(state,  4));\n+\n+    __ ldrw(rscratch3, Address(state,  8));\n+    __ addw(rscratch3, rscratch3, c);\n+    __ strw(rscratch3, Address(state,  8));\n+\n+    __ ldrw(rscratch4, Address(state, 12));\n+    __ addw(rscratch4, rscratch4, d);\n+    __ strw(rscratch4, Address(state, 12));\n+\n+    if (multi_block) {\n+      __ add(buf, buf, 64);\n+      __ add(ofs, ofs, 64);\n+      __ cmp(ofs, limit);\n+      __ br(Assembler::LE, md5_loop);\n+      __ mov(c_rarg0, ofs); \/\/ return ofs\n+    }\n+\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -7467,0 +7655,4 @@\n+    if (UseMD5Intrinsics) {\n+      StubRoutines::_md5_implCompress      = generate_md5_implCompress(false,    \"md5_implCompress\");\n+      StubRoutines::_md5_implCompressMB    = generate_md5_implCompress(true,     \"md5_implCompressMB\");\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":192,"deletions":0,"binary":false,"changes":192,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  code_size2 = 32000           \/\/ simply increase if too small (assembler will crash if too small)\n+  code_size2 = 45000           \/\/ simply increase if too small (assembler will crash if too small)\n","filename":"src\/hotspot\/cpu\/aarch64\/stubRoutines_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -275,3 +275,2 @@\n-  if (UseMD5Intrinsics) {\n-    warning(\"MD5 intrinsics are not available on this CPU\");\n-    FLAG_SET_DEFAULT(UseMD5Intrinsics, false);\n+  if (FLAG_IS_DEFAULT(UseMD5Intrinsics)) {\n+    UseMD5Intrinsics = true;\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,2 @@\n-            = \/\/ x86 variants\n+            = new OrPredicate(new CPUSpecificPredicate(\"aarch64.*\", null, null),\n+              \/\/ x86 variants\n@@ -66,1 +67,1 @@\n-                              new CPUSpecificPredicate(\"x86.*\",     null, null)));\n+                              new CPUSpecificPredicate(\"x86.*\",     null, null))));\n","filename":"test\/hotspot\/jtreg\/compiler\/testlibrary\/sha\/predicate\/IntrinsicPredicates.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}