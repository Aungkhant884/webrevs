{"files":[{"patch":"@@ -4336,1 +4336,2 @@\n-    __ insertps($dst$$XMMRegister, $val$$XMMRegister, $idx$$constant);\n+    uint x_idx = $idx$$constant & right_n_bits(2);\n+    __ insertps($dst$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4356,1 +4357,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n@@ -4362,1 +4363,1 @@\n-      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx);\n+      __ vinsertps($vtmp$$XMMRegister, $vtmp$$XMMRegister, $val$$XMMRegister, x_idx << 4);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3267,1 +3267,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3269,1 +3269,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3273,1 +3273,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3267,1 +3267,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3269,1 +3269,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3273,1 +3273,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3267,1 +3267,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3269,1 +3269,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3273,1 +3273,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3267,1 +3267,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3269,1 +3269,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3273,1 +3273,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(byte[] r, byte[] a, byte element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3272,1 +3272,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3274,1 +3274,1 @@\n-                av.withLane(0, (byte)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n@@ -3278,1 +3278,4 @@\n-        assertInsertArraysEquals(r, a, (byte)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2452,1 +2452,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2454,1 +2454,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2458,1 +2458,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2452,1 +2452,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2454,1 +2454,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2458,1 +2458,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2452,1 +2452,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2454,1 +2454,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2458,1 +2458,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2452,1 +2452,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2454,1 +2454,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2458,1 +2458,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(double[] r, double[] a, double element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2457,1 +2457,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2459,1 +2459,1 @@\n-                av.withLane(0, (double)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n@@ -2463,1 +2463,4 @@\n-        assertInsertArraysEquals(r, a, (double)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2462,1 +2462,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2464,1 +2464,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2468,1 +2468,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2462,1 +2462,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2464,1 +2464,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2468,1 +2468,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2462,1 +2462,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2464,1 +2464,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2468,1 +2468,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2462,1 +2462,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2464,1 +2464,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2468,1 +2468,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(float[] r, float[] a, float element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -2467,1 +2467,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -2469,1 +2469,1 @@\n-                av.withLane(0, (float)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n@@ -2473,1 +2473,4 @@\n-        assertInsertArraysEquals(r, a, (float)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3232,1 +3232,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3234,1 +3234,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3238,1 +3238,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3232,1 +3232,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3234,1 +3234,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3238,1 +3238,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3232,1 +3232,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3234,1 +3234,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3238,1 +3238,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3232,1 +3232,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3234,1 +3234,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3238,1 +3238,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(int[] r, int[] a, int element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3237,1 +3237,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3239,1 +3239,1 @@\n-                av.withLane(0, (int)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n@@ -3243,1 +3243,4 @@\n-        assertInsertArraysEquals(r, a, (int)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3254,1 +3254,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3256,1 +3256,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3260,1 +3260,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3254,1 +3254,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3256,1 +3256,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3260,1 +3260,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3254,1 +3254,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3256,1 +3256,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3260,1 +3260,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -186,2 +186,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -189,1 +189,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3254,1 +3254,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3256,1 +3256,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3260,1 +3260,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -191,2 +191,2 @@\n-    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(long[] r, long[] a, long element, int index, int start, int end) {\n+        int i = start;\n@@ -194,1 +194,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3259,1 +3259,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3261,1 +3261,1 @@\n-                av.withLane(0, (long)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n@@ -3265,1 +3265,4 @@\n-        assertInsertArraysEquals(r, a, (long)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3257,1 +3257,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3259,1 +3259,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3263,1 +3263,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3257,1 +3257,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3259,1 +3259,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3263,1 +3263,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3257,1 +3257,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3259,1 +3259,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3263,1 +3263,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -232,1 +232,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3257,1 +3257,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3259,1 +3259,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3263,1 +3263,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -234,2 +234,2 @@\n-    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals(short[] r, short[] a, short element, int index, int start, int end) {\n+        int i = start;\n@@ -237,1 +237,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n@@ -3262,1 +3262,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -3264,1 +3264,1 @@\n-                av.withLane(0, (short)4).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n@@ -3268,1 +3268,4 @@\n-        assertInsertArraysEquals(r, a, (short)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n@@ -7,1 +7,1 @@\n-                av.withLane(0, ($type$)4).intoArray(r, i);\n+                av.withLane((j++ \\& (SPECIES.length()-1)), ($type$)(65535+i)).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-With-Op.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5,1 +5,4 @@\n-        assertInsertArraysEquals(r, a, ($type$)4, 0);\n+\n+        for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+            assertInsertArraysEquals(r, a, ($type$)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+        }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-With-Op.template","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -260,2 +260,2 @@\n-    static void assertInsertArraysEquals($type$[] r, $type$[] a, $type$ element, int index) {\n-        int i = 0;\n+    static void assertInsertArraysEquals($type$[] r, $type$[] a, $type$ element, int index, int start, int end) {\n+        int i = start;\n@@ -263,1 +263,1 @@\n-            for (; i < a.length; i += 1) {\n+            for (; i < end; i += 1) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}