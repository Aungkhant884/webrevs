{"files":[{"patch":"@@ -283,1 +283,0 @@\n- *                   -XX:ObjectAlignmentInBytes=32\n@@ -289,1 +288,0 @@\n- *                   -XX:ObjectAlignmentInBytes=32\n@@ -295,1 +293,0 @@\n- *                   -XX:ObjectAlignmentInBytes=32\n@@ -315,2 +312,3 @@\n-    \/\/ With int[] arrays, this overflows 4G boundary\n-    static final int LARGE_ARRAY_SIZE = 1024*1024*1024 + 1024;\n+    \/\/ These should overflow 4G size boundary\n+    static final int LARGE_INT_ARRAY_SIZE = 1024*1024*1024 + 1024;\n+    static final int LARGE_OBJ_ARRAY_SIZE = (4096\/(int)REF_SIZE)*1024*1024 + 1024;\n@@ -449,2 +447,2 @@\n-        int[] arr = new int[LARGE_ARRAY_SIZE];\n-        long expected = roundUp(4L*LARGE_ARRAY_SIZE + 16, OBJ_ALIGN);\n+        int[] arr = new int[LARGE_INT_ARRAY_SIZE];\n+        long expected = roundUp(4L*LARGE_INT_ARRAY_SIZE + 16, OBJ_ALIGN);\n@@ -457,2 +455,1 @@\n-        Object[] arr = new Object[LARGE_ARRAY_SIZE];\n-        long expected = roundUp(REF_SIZE*LARGE_ARRAY_SIZE + 16, OBJ_ALIGN);\n+        Object[] arr = new Object[LARGE_OBJ_ARRAY_SIZE];\n","filename":"test\/jdk\/java\/lang\/instrument\/GetObjectSizeIntrinsicsTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"}]}