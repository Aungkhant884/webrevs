{"files":[{"patch":"@@ -492,1 +492,11 @@\n-    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout) );\n+    int ret;\n+    threadEntry_t self;\n+    fdEntry_t *fdEntry = getFdEntry(ufds[0].fd);\n+    if (fdEntry == NULL) {\n+        errno = EBADF;\n+        return -1;\n+    }\n+    startOp(fdEntry, &self);\n+    ret = poll(ufds, nfds, timeout);\n+    endOp(fdEntry, &self);\n+    return ret;\n","filename":"src\/java.base\/aix\/native\/libnet\/aix_close.c","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -399,1 +399,11 @@\n-    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout) );\n+    int ret;\n+    threadEntry_t self;\n+    fdEntry_t *fdEntry = getFdEntry(ufds[0].fd);\n+    if (fdEntry == NULL) {\n+        errno = EBADF;\n+        return -1;\n+    }\n+    startOp(fdEntry, &self);\n+    ret = poll(ufds, nfds, timeout);\n+    endOp(fdEntry, &self);\n+    return ret;\n","filename":"src\/java.base\/linux\/native\/libnet\/linux_close.c","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -403,1 +403,11 @@\n-    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout) );\n+    int ret;\n+    threadEntry_t self;\n+    fdEntry_t *fdEntry = getFdEntry(ufds[0].fd);\n+    if (fdEntry == NULL) {\n+        errno = EBADF;\n+        return -1;\n+    }\n+    startOp(fdEntry, &self);\n+    ret = poll(ufds, nfds, timeout);\n+    endOp(fdEntry, &self);\n+    return ret;\n","filename":"src\/java.base\/macosx\/native\/libnet\/bsd_close.c","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8312065\n+ * @summary Socket.connect does not timeout as expected when profiling (i.e. keep receiving signal)\n+ * @requires (os.family != \"windows\")\n+ * @compile NativeThread.java\n+ * @run main\/othervm\/native\/timeout=120 -Djdk.net.usePlainSocketImpl B8312065\n+ *\/\n+\n+import sun.misc.Signal;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class B8312065 {\n+    public static void main(String[] args) throws Exception {\n+        System.loadLibrary(\"NativeThread\");\n+\n+        \/\/ Setup SIGPIPE handler\n+        Signal.handle(new Signal(\"PIPE\"), System.out::println);\n+\n+        long osThreadId = NativeThread.getID();\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+\n+        Thread t = new Thread(() -> {\n+            latch.countDown();\n+            try {\n+                \/\/ Send SIGPIPE to the thread every second\n+                for (int i = 0; i < 10; i++) {\n+                    if (NativeThread.signal(osThreadId, NativeThread.SIGPIPE) != 0) {\n+                        System.out.println(\"Failed to send signal\");\n+                        System.exit(1);\n+                    }\n+                    Thread.sleep(1000);\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            } finally {\n+                System.out.println(\"Test FAILED\");\n+                System.exit(1);\n+            }\n+        });\n+        t.setDaemon(true);\n+        t.start();\n+\n+        latch.await();\n+\n+        try {\n+            Socket socket = new Socket();\n+            \/\/ There is no good way to mock SocketTimeoutException, just assume 192.168.255.255 is not in use.\n+            socket.connect(new InetSocketAddress(\"192.168.255.255\", 8080), 2000);\n+        } catch (SocketTimeoutException e) {\n+            System.out.println(\"Test passed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/Socket\/B8312065.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}