{"files":[{"patch":"@@ -71,0 +71,7 @@\n+#if (__STDC_VERSION__ >= 199901L)\n+#include <stdbool.h>\n+#else\n+#define true 1\n+#define false 0\n+#endif\n+\n@@ -391,3 +398,3 @@\n- * Macro to perform a blocking IO operation. Restarts\n- * automatically if interrupted by signal (other than\n- * our wakeup signal)\n+ * Macro to perform a blocking IO operation.\n+ * If RETRY is true, then restarts automatically if interrupted\n+ * by signal (other than our wakeup signal).\n@@ -395,14 +402,14 @@\n-#define BLOCKING_IO_RETURN_INT(FD, FUNC) {      \\\n-    int ret;                                    \\\n-    threadEntry_t self;                         \\\n-    fdEntry_t *fdEntry = getFdEntry(FD);        \\\n-    if (fdEntry == NULL) {                      \\\n-        errno = EBADF;                          \\\n-        return -1;                              \\\n-    }                                           \\\n-    do {                                        \\\n-        startOp(fdEntry, &self);                \\\n-        ret = FUNC;                             \\\n-        endOp(fdEntry, &self);                  \\\n-    } while (ret == -1 && errno == EINTR);      \\\n-    return ret;                                 \\\n+#define BLOCKING_IO_RETURN_INT(FD, FUNC, RETRY) {     \\\n+    int ret;                                          \\\n+    threadEntry_t self;                               \\\n+    fdEntry_t *fdEntry = getFdEntry(FD);              \\\n+    if (fdEntry == NULL) {                            \\\n+        errno = EBADF;                                \\\n+        return -1;                                    \\\n+    }                                                 \\\n+    do {                                              \\\n+        startOp(fdEntry, &self);                      \\\n+        ret = FUNC;                                   \\\n+        endOp(fdEntry, &self);                        \\\n+    } while ((RETRY) && ret == -1 && errno == EINTR); \\\n+    return ret;                                       \\\n@@ -412,1 +419,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0), true );\n@@ -416,1 +423,1 @@\n-    BLOCKING_IO_RETURN_INT(s, recv(s, buf, len, MSG_NONBLOCK));\n+    BLOCKING_IO_RETURN_INT(s, recv(s, buf, len, MSG_NONBLOCK), true );\n@@ -421,1 +428,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen) );\n+    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen), true );\n@@ -425,1 +432,1 @@\n-    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags) );\n+    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags), true );\n@@ -430,1 +437,1 @@\n-    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen) );\n+    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen), true );\n@@ -434,1 +441,1 @@\n-    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen), true );\n@@ -492,11 +499,1 @@\n-    int ret;\n-    threadEntry_t self;\n-    fdEntry_t *fdEntry = getFdEntry(ufds[0].fd);\n-    if (fdEntry == NULL) {\n-        errno = EBADF;\n-        return -1;\n-    }\n-    startOp(fdEntry, &self);\n-    ret = poll(ufds, nfds, timeout);\n-    endOp(fdEntry, &self);\n-    return ret;\n+    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout), false );\n","filename":"src\/java.base\/aix\/native\/libnet\/aix_close.c","additions":31,"deletions":34,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -43,0 +43,7 @@\n+#if (__STDC_VERSION__ >= 199901L)\n+#include <stdbool.h>\n+#else\n+#define true 1\n+#define false 0\n+#endif\n+\n@@ -348,3 +355,3 @@\n- * Macro to perform a blocking IO operation. Restarts\n- * automatically if interrupted by signal (other than\n- * our wakeup signal)\n+ * Macro to perform a blocking IO operation.\n+ * If RETRY is true, then restarts automatically if interrupted\n+ * by signal (other than our wakeup signal).\n@@ -352,14 +359,14 @@\n-#define BLOCKING_IO_RETURN_INT(FD, FUNC) {      \\\n-    int ret;                                    \\\n-    threadEntry_t self;                         \\\n-    fdEntry_t *fdEntry = getFdEntry(FD);        \\\n-    if (fdEntry == NULL) {                      \\\n-        errno = EBADF;                          \\\n-        return -1;                              \\\n-    }                                           \\\n-    do {                                        \\\n-        startOp(fdEntry, &self);                \\\n-        ret = FUNC;                             \\\n-        endOp(fdEntry, &self);                  \\\n-    } while (ret == -1 && errno == EINTR);      \\\n-    return ret;                                 \\\n+#define BLOCKING_IO_RETURN_INT(FD, FUNC, RETRY) {     \\\n+    int ret;                                          \\\n+    threadEntry_t self;                               \\\n+    fdEntry_t *fdEntry = getFdEntry(FD);              \\\n+    if (fdEntry == NULL) {                            \\\n+        errno = EBADF;                                \\\n+        return -1;                                    \\\n+    }                                                 \\\n+    do {                                              \\\n+        startOp(fdEntry, &self);                      \\\n+        ret = FUNC;                                   \\\n+        endOp(fdEntry, &self);                        \\\n+    } while ((RETRY) && ret == -1 && errno == EINTR); \\\n+    return ret;                                       \\\n@@ -369,1 +376,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0), true );\n@@ -373,1 +380,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT), true );\n@@ -378,1 +385,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen) );\n+    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen), true );\n@@ -382,1 +389,1 @@\n-    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags) );\n+    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags), true );\n@@ -387,1 +394,1 @@\n-    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen) );\n+    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen), true );\n@@ -391,1 +398,1 @@\n-    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen), true );\n@@ -395,1 +402,1 @@\n-    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen), true );\n@@ -399,11 +406,1 @@\n-    int ret;\n-    threadEntry_t self;\n-    fdEntry_t *fdEntry = getFdEntry(ufds[0].fd);\n-    if (fdEntry == NULL) {\n-        errno = EBADF;\n-        return -1;\n-    }\n-    startOp(fdEntry, &self);\n-    ret = poll(ufds, nfds, timeout);\n-    endOp(fdEntry, &self);\n-    return ret;\n+    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout), false );\n","filename":"src\/java.base\/linux\/native\/libnet\/linux_close.c","additions":32,"deletions":35,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -45,0 +45,7 @@\n+#if (__STDC_VERSION__ >= 199901L)\n+#include <stdbool.h>\n+#else\n+#define true 1\n+#define false 0\n+#endif\n+\n@@ -352,3 +359,3 @@\n- * Macro to perform a blocking IO operation. Restarts\n- * automatically if interrupted by signal (other than\n- * our wakeup signal)\n+ * Macro to perform a blocking IO operation.\n+ * If RETRY is true, then restarts automatically if interrupted\n+ * by signal (other than our wakeup signal).\n@@ -356,14 +363,14 @@\n-#define BLOCKING_IO_RETURN_INT(FD, FUNC) {      \\\n-    int ret;                                    \\\n-    threadEntry_t self;                         \\\n-    fdEntry_t *fdEntry = getFdEntry(FD);        \\\n-    if (fdEntry == NULL) {                      \\\n-        errno = EBADF;                          \\\n-        return -1;                              \\\n-    }                                           \\\n-    do {                                        \\\n-        startOp(fdEntry, &self);                \\\n-        ret = FUNC;                             \\\n-        endOp(fdEntry, &self);                  \\\n-    } while (ret == -1 && errno == EINTR);      \\\n-    return ret;                                 \\\n+#define BLOCKING_IO_RETURN_INT(FD, FUNC, RETRY) {     \\\n+    int ret;                                          \\\n+    threadEntry_t self;                               \\\n+    fdEntry_t *fdEntry = getFdEntry(FD);              \\\n+    if (fdEntry == NULL) {                            \\\n+        errno = EBADF;                                \\\n+        return -1;                                    \\\n+    }                                                 \\\n+    do {                                              \\\n+        startOp(fdEntry, &self);                      \\\n+        ret = FUNC;                                   \\\n+        endOp(fdEntry, &self);                        \\\n+    } while ((RETRY) && ret == -1 && errno == EINTR); \\\n+    return ret;                                       \\\n@@ -373,1 +380,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0), true );\n@@ -377,1 +384,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT));\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT), true);\n@@ -382,1 +389,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen) );\n+    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen), true );\n@@ -386,1 +393,1 @@\n-    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags) );\n+    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags), true );\n@@ -391,1 +398,1 @@\n-    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen) );\n+    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen), true );\n@@ -395,1 +402,1 @@\n-    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen), true );\n@@ -399,1 +406,1 @@\n-    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen), true );\n@@ -403,11 +410,1 @@\n-    int ret;\n-    threadEntry_t self;\n-    fdEntry_t *fdEntry = getFdEntry(ufds[0].fd);\n-    if (fdEntry == NULL) {\n-        errno = EBADF;\n-        return -1;\n-    }\n-    startOp(fdEntry, &self);\n-    ret = poll(ufds, nfds, timeout);\n-    endOp(fdEntry, &self);\n-    return ret;\n+    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout), false );\n","filename":"src\/java.base\/macosx\/native\/libnet\/bsd_close.c","additions":32,"deletions":35,"binary":false,"changes":67,"status":"modified"}]}