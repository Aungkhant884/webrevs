{"files":[{"patch":"@@ -391,3 +391,3 @@\n- * Macro to perform a blocking IO operation. Restarts\n- * automatically if interrupted by signal (other than\n- * our wakeup signal)\n+ * Macro to perform a blocking IO operation.\n+ * If interrupted by signal (other than our wakeup signal), and if RETRY is true,\n+ * then restarts automatically\n@@ -395,14 +395,14 @@\n-#define BLOCKING_IO_RETURN_INT(FD, FUNC) {      \\\n-    int ret;                                    \\\n-    threadEntry_t self;                         \\\n-    fdEntry_t *fdEntry = getFdEntry(FD);        \\\n-    if (fdEntry == NULL) {                      \\\n-        errno = EBADF;                          \\\n-        return -1;                              \\\n-    }                                           \\\n-    do {                                        \\\n-        startOp(fdEntry, &self);                \\\n-        ret = FUNC;                             \\\n-        endOp(fdEntry, &self);                  \\\n-    } while (ret == -1 && errno == EINTR);      \\\n-    return ret;                                 \\\n+#define BLOCKING_IO_RETURN_INT(FD, FUNC, RETRY) {     \\\n+    int ret;                                          \\\n+    threadEntry_t self;                               \\\n+    fdEntry_t *fdEntry = getFdEntry(FD);              \\\n+    if (fdEntry == NULL) {                            \\\n+        errno = EBADF;                                \\\n+        return -1;                                    \\\n+    }                                                 \\\n+    do {                                              \\\n+        startOp(fdEntry, &self);                      \\\n+        ret = FUNC;                                   \\\n+        endOp(fdEntry, &self);                        \\\n+    } while ((RETRY) && ret == -1 && errno == EINTR); \\\n+    return ret;                                       \\\n@@ -412,1 +412,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0), JNI_TRUE );\n@@ -416,1 +416,1 @@\n-    BLOCKING_IO_RETURN_INT(s, recv(s, buf, len, MSG_NONBLOCK));\n+    BLOCKING_IO_RETURN_INT(s, recv(s, buf, len, MSG_NONBLOCK), JNI_TRUE );\n@@ -421,1 +421,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen) );\n+    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen), JNI_TRUE );\n@@ -425,1 +425,1 @@\n-    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags) );\n+    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags), JNI_TRUE );\n@@ -430,1 +430,1 @@\n-    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen) );\n+    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen), JNI_TRUE );\n@@ -434,1 +434,1 @@\n-    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen), JNI_TRUE );\n@@ -492,1 +492,1 @@\n-    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout) );\n+    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout), JNI_FALSE );\n","filename":"src\/java.base\/aix\/native\/libnet\/aix_close.c","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -348,3 +348,3 @@\n- * Macro to perform a blocking IO operation. Restarts\n- * automatically if interrupted by signal (other than\n- * our wakeup signal)\n+ * Macro to perform a blocking IO operation.\n+ * If interrupted by signal (other than our wakeup signal), and if RETRY is true,\n+ * then restarts automatically\n@@ -352,14 +352,14 @@\n-#define BLOCKING_IO_RETURN_INT(FD, FUNC) {      \\\n-    int ret;                                    \\\n-    threadEntry_t self;                         \\\n-    fdEntry_t *fdEntry = getFdEntry(FD);        \\\n-    if (fdEntry == NULL) {                      \\\n-        errno = EBADF;                          \\\n-        return -1;                              \\\n-    }                                           \\\n-    do {                                        \\\n-        startOp(fdEntry, &self);                \\\n-        ret = FUNC;                             \\\n-        endOp(fdEntry, &self);                  \\\n-    } while (ret == -1 && errno == EINTR);      \\\n-    return ret;                                 \\\n+#define BLOCKING_IO_RETURN_INT(FD, FUNC, RETRY) {     \\\n+    int ret;                                          \\\n+    threadEntry_t self;                               \\\n+    fdEntry_t *fdEntry = getFdEntry(FD);              \\\n+    if (fdEntry == NULL) {                            \\\n+        errno = EBADF;                                \\\n+        return -1;                                    \\\n+    }                                                 \\\n+    do {                                              \\\n+        startOp(fdEntry, &self);                      \\\n+        ret = FUNC;                                   \\\n+        endOp(fdEntry, &self);                        \\\n+    } while ((RETRY) && ret == -1 && errno == EINTR); \\\n+    return ret;                                       \\\n@@ -369,1 +369,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0), JNI_TRUE );\n@@ -373,1 +373,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT), JNI_TRUE );\n@@ -378,1 +378,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen) );\n+    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen), JNI_TRUE );\n@@ -382,1 +382,1 @@\n-    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags) );\n+    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags), JNI_TRUE );\n@@ -387,1 +387,1 @@\n-    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen) );\n+    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen), JNI_TRUE );\n@@ -391,1 +391,1 @@\n-    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen), JNI_TRUE );\n@@ -395,1 +395,1 @@\n-    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen), JNI_TRUE );\n@@ -399,1 +399,1 @@\n-    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout) );\n+    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout), JNI_FALSE );\n","filename":"src\/java.base\/linux\/native\/libnet\/linux_close.c","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -352,3 +352,3 @@\n- * Macro to perform a blocking IO operation. Restarts\n- * automatically if interrupted by signal (other than\n- * our wakeup signal)\n+ * Macro to perform a blocking IO operation.\n+ * If interrupted by signal (other than our wakeup signal), and if RETRY is true,\n+ * then restarts automatically\n@@ -356,14 +356,14 @@\n-#define BLOCKING_IO_RETURN_INT(FD, FUNC) {      \\\n-    int ret;                                    \\\n-    threadEntry_t self;                         \\\n-    fdEntry_t *fdEntry = getFdEntry(FD);        \\\n-    if (fdEntry == NULL) {                      \\\n-        errno = EBADF;                          \\\n-        return -1;                              \\\n-    }                                           \\\n-    do {                                        \\\n-        startOp(fdEntry, &self);                \\\n-        ret = FUNC;                             \\\n-        endOp(fdEntry, &self);                  \\\n-    } while (ret == -1 && errno == EINTR);      \\\n-    return ret;                                 \\\n+#define BLOCKING_IO_RETURN_INT(FD, FUNC, RETRY) {     \\\n+    int ret;                                          \\\n+    threadEntry_t self;                               \\\n+    fdEntry_t *fdEntry = getFdEntry(FD);              \\\n+    if (fdEntry == NULL) {                            \\\n+        errno = EBADF;                                \\\n+        return -1;                                    \\\n+    }                                                 \\\n+    do {                                              \\\n+        startOp(fdEntry, &self);                      \\\n+        ret = FUNC;                                   \\\n+        endOp(fdEntry, &self);                        \\\n+    } while ((RETRY) && ret == -1 && errno == EINTR); \\\n+    return ret;                                       \\\n@@ -373,1 +373,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0) );\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, 0), JNI_TRUE );\n@@ -377,1 +377,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT));\n+    BLOCKING_IO_RETURN_INT( s, recv(s, buf, len, MSG_DONTWAIT), JNI_TRUE);\n@@ -382,1 +382,1 @@\n-    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen) );\n+    BLOCKING_IO_RETURN_INT( s, recvfrom(s, buf, len, flags, from, fromlen), JNI_TRUE );\n@@ -386,1 +386,1 @@\n-    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags) );\n+    BLOCKING_IO_RETURN_INT( s, send(s, msg, len, flags), JNI_TRUE );\n@@ -391,1 +391,1 @@\n-    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen) );\n+    BLOCKING_IO_RETURN_INT( s, sendto(s, msg, len, flags, to, tolen), JNI_TRUE );\n@@ -395,1 +395,1 @@\n-    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, accept(s, addr, addrlen), JNI_TRUE );\n@@ -399,1 +399,1 @@\n-    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen) );\n+    BLOCKING_IO_RETURN_INT( s, connect(s, addr, addrlen), JNI_TRUE );\n@@ -403,1 +403,1 @@\n-    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout) );\n+    BLOCKING_IO_RETURN_INT( ufds[0].fd, poll(ufds, nfds, timeout), JNI_FALSE );\n","filename":"src\/java.base\/macosx\/native\/libnet\/bsd_close.c","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8312065\n+ * @summary Socket.connect does not timeout as expected when profiling (i.e. keep receiving signal)\n+ * @requires (os.family != \"windows\")\n+ * @compile NativeThread.java\n+ * @run main\/othervm\/native\/timeout=120 -Djdk.net.usePlainSocketImpl B8312065\n+ *\/\n+\n+import sun.misc.Signal;\n+\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+import java.util.concurrent.TimeUnit;\n+\n+public class B8312065 {\n+    public static void main(String[] args) throws Exception {\n+        System.loadLibrary(\"NativeThread\");\n+\n+        \/\/ Setup SIGPIPE handler\n+        Signal.handle(new Signal(\"PIPE\"), System.out::println);\n+\n+        long osThreadId = NativeThread.getID();\n+\n+        int timeoutMillis = 2000;\n+        int n = 10;\n+        Thread t = new Thread(() -> {\n+            \/\/ Send SIGPIPE to the thread every second\n+            for (int i = 0; i < n; i++) {\n+                if (NativeThread.signal(osThreadId, NativeThread.SIGPIPE) != 0) {\n+                    System.out.println(\"Test FAILED: failed to send signal\");\n+                    System.exit(1);\n+                }\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException e) {\n+                    System.out.println(\"Test FAILED: unexpected interrupt\");\n+                    System.exit(1);\n+                }\n+            }\n+            System.out.println(\"Test FAILED: Socket.connect blocked \" + n + \" seconds, \" +\n+                    \"expected around \" + timeoutMillis \/ 1000 + \" seconds\");\n+            System.exit(1);\n+        });\n+        t.setDaemon(true);\n+        t.start();\n+\n+        long startTime = System.nanoTime();\n+\n+        try {\n+            Socket socket = new Socket();\n+            \/\/ There is no good way to mock SocketTimeoutException, just assume 192.168.255.255 is not in use\n+            socket.connect(new InetSocketAddress(\"192.168.255.255\", 8080), timeoutMillis);\n+        } catch (SocketTimeoutException e) {\n+            long duration = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n+            if (duration >= timeoutMillis) {\n+                System.out.println(\"Test passed\");\n+            } else {\n+                System.out.println(\"Test FAILED: duration \" + duration + \" ms, expected >= \" + timeoutMillis + \" ms\");\n+                System.exit(1);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/Socket\/B8312065.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}