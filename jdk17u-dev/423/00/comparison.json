{"files":[{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8240903\n+ * @summary Test consistency of moduleHashes attribute between builds\n+ * @library \/test\/lib\n+ * @run testng HashesOrderTest\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.spi.ToolProvider;\n+import java.util.stream.Collectors;\n+\n+import jdk.test.lib.compiler.ModuleInfoMaker;\n+\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class HashesOrderTest {\n+    private ToolProvider JMOD_TOOL = ToolProvider.findFirst(\"jmod\")\n+        .orElseThrow(() ->\n+            new RuntimeException(\"jmod tool not found\")\n+        );\n+\n+    private String DATE = \"2021-01-06T14:36:00+02:00\";\n+    private int NUM_MODULES = 64;\n+    private Path mods;\n+    private Path lib1;\n+    private Path lib2;\n+    private ModuleInfoMaker builder;\n+\n+    @Test\n+    public void test() throws Exception {\n+        mods = Path.of(\"mods\");\n+        lib1 = Path.of(\"lib1\");\n+        lib2 = Path.of(\"lib2\");\n+        builder = new ModuleInfoMaker(Path.of(\"src\"));\n+\n+        Files.createDirectories(mods);\n+        Files.createDirectories(lib1);\n+        Files.createDirectories(lib2);\n+\n+        makeModule(\"ma\");\n+        String moduleName;\n+        for (int i = 0; i < NUM_MODULES; i++) {\n+            moduleName = \"m\" + i + \"b\";\n+            makeModule(moduleName, \"ma\");\n+            makeJmod(moduleName, lib1);\n+            makeJmod(moduleName, lib2);\n+        }\n+        makeJmod(\"ma\", lib1, \"--module-path\", lib1.toString(),\n+                \"--hash-modules\", \".*\");\n+        Path jmod1 = lib1.resolve(\"ma.jmod\");\n+\n+        makeJmod(\"ma\", lib2, \"--module-path\", lib2.toString(),\n+                \"--hash-modules\", \".*\");\n+        Path jmod2 = lib2.resolve(\"ma.jmod\");\n+\n+        assertEquals(Files.mismatch(jmod1, jmod2), -1);\n+    }\n+\n+    private void makeModule(String mn, String... deps)\n+        throws IOException\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"module \")\n+          .append(mn)\n+          .append(\" {\")\n+          .append(\"\\n\");\n+        Arrays.stream(deps)\n+              .forEach(req -> {\n+                  sb.append(\"    requires \");\n+                  sb.append(req)\n+                    .append(\";\\n\");\n+              });\n+        sb.append(\"}\\n\");\n+        builder.writeJavaFiles(mn, sb.toString());\n+        builder.compile(mn, mods);\n+    }\n+\n+    private void makeJmod(String moduleName, Path libName, String... options) {\n+        Path mclasses = mods.resolve(moduleName);\n+        Path outfile = libName.resolve(moduleName + \".jmod\");\n+        List<String> args = new ArrayList<>();\n+        args.add(\"create\");\n+        Collections.addAll(args, options);\n+        Collections.addAll(args, \"--date\", DATE);\n+        Collections.addAll(args, \"--class-path\", mclasses.toString(),\n+                           outfile.toString());\n+\n+        runJmod(args);\n+    }\n+\n+    private void runJmod(List<String> args) {\n+        runJmod(args.toArray(new String[args.size()]));\n+    }\n+\n+    private void runJmod(String... args) {\n+        int rc = JMOD_TOOL.run(System.out, System.out, args);\n+        System.out.println(\"jmod \" + Arrays.stream(args).collect(Collectors.joining(\" \")));\n+        if (rc != 0) {\n+            throw new AssertionError(\"jmod failed: rc = \" + rc);\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/jmod\/hashes\/HashesOrderTest.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"}]}