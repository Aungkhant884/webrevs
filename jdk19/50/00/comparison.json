{"files":[{"patch":"@@ -886,3 +886,1 @@\n-        if (bytesSize < 0) {\n-            throw new IllegalArgumentException(\"Invalid size : \" + bytesSize);\n-        }\n+        Utils.checkAllocationSizeAndAlign(bytesSize, 1);\n@@ -960,9 +958,1 @@\n-        if (bytesSize < 0) {\n-            throw new IllegalArgumentException(\"Invalid allocation size : \" + bytesSize);\n-        }\n-\n-        if (alignmentBytes <= 0 ||\n-                ((alignmentBytes & (alignmentBytes - 1)) != 0L)) {\n-            throw new IllegalArgumentException(\"Invalid alignment constraint : \" + alignmentBytes);\n-        }\n-\n+        Utils.checkAllocationSizeAndAlign(bytesSize, alignmentBytes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -156,4 +156,1 @@\n-        if (bytesAlignment <= 0 ||\n-                ((bytesAlignment & (bytesAlignment - 1)) != 0L)) {\n-            throw new IllegalArgumentException(\"Invalid alignment constraint : \" + bytesAlignment);\n-        }\n+        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+        Utils.checkAllocationSizeAndAlign(bytesSize, bytesAlignment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/ArenaAllocator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -165,0 +165,13 @@\n+\n+    public static void checkAllocationSizeAndAlign(long bytesSize, long alignmentBytes) {\n+        \/\/ size should be >= 0\n+        if (bytesSize < 0) {\n+            throw new IllegalArgumentException(\"Invalid allocation size : \" + bytesSize);\n+        }\n+\n+        \/\/ alignment should be > 0, and power of two\n+        if (alignmentBytes <= 0 ||\n+                ((alignmentBytes & (alignmentBytes - 1)) != 0L)) {\n+            throw new IllegalArgumentException(\"Invalid alignment constraint : \" + alignmentBytes);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -142,0 +142,20 @@\n+    @Test(dataProvider = \"allocators\", expectedExceptions = IllegalArgumentException.class)\n+    public void testBadAllocationSize(SegmentAllocator allocator) {\n+        allocator.allocate(-1);\n+    }\n+\n+    @Test(dataProvider = \"allocators\", expectedExceptions = IllegalArgumentException.class)\n+    public void testBadAllocationAlignZero(SegmentAllocator allocator) {\n+        allocator.allocate(1, 0);\n+    }\n+\n+    @Test(dataProvider = \"allocators\", expectedExceptions = IllegalArgumentException.class)\n+    public void testBadAllocationAlignNeg(SegmentAllocator allocator) {\n+        allocator.allocate(1, -1);\n+    }\n+\n+    @Test(dataProvider = \"allocators\", expectedExceptions = IllegalArgumentException.class)\n+    public void testBadAllocationAlignNotPowerTwo(SegmentAllocator allocator) {\n+        allocator.allocate(1, 3);\n+    }\n+\n@@ -447,0 +467,9 @@\n+\n+    @DataProvider(name = \"allocators\")\n+    static Object[][] allocators() {\n+        return new Object[][] {\n+                { SegmentAllocator.implicitAllocator() },\n+                { SegmentAllocator.newNativeArena(MemorySession.global()) },\n+                { SegmentAllocator.prefixAllocator(MemorySegment.allocateNative(10, MemorySession.global())) },\n+        };\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"}]}