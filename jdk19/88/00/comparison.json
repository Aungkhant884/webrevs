{"files":[{"patch":"@@ -415,0 +415,6 @@\n+            if ((vthread_state & JVMTI_THREAD_STATE_ALIVE) == 0) {\n+              \/\/ Thread not alive so put on otherThreads list instead of runningVThreads.\n+              \/\/ It might not have started yet or might have terminated. Either way,\n+              \/\/ otherThreads is the place for it.\n+              list = &otherThreads;\n+            }\n@@ -422,1 +428,0 @@\n-                    list = &otherThreads; \/\/ Put on otherThreads list instead of runningVThreads\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/threadControl.c","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8287847\n+ * @summary Test suspending a thread after it has terminated.\n+ * @enablePreview\n+ * @requires vm.continuations\n+ * @run build TestScaffold VMConnection TargetListener TargetAdapter\n+ * @run compile SuspendAfterDeath.java\n+ * @run main\/othervm SuspendAfterDeath\n+ *\/\n+import com.sun.jdi.*;\n+import com.sun.jdi.event.*;\n+import com.sun.jdi.request.*;\n+import java.util.*;\n+\n+class SuspendAfterDeathTarg {\n+    static final String THREAD_NAME = \"duke\";\n+\n+    \/\/ breakpoint here\n+    static void done() {\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        boolean useVirtualThread = ((args.length > 0) && args[0].equals(\"Virtual\"));\n+        Thread thread;\n+        System.out.println(\"Starting debuggee \" + (useVirtualThread ? \"virtual\" : \"platform\") + \" thread.\");\n+        if (useVirtualThread) {\n+            thread = Thread.ofVirtual().name(THREAD_NAME).start(() -> { });\n+        } else {\n+            thread = Thread.ofPlatform().name(THREAD_NAME).start(() -> { });\n+        }\n+        thread.join();\n+        done();\n+    }\n+}\n+\n+public class SuspendAfterDeath extends TestScaffold {\n+    private volatile ThreadReference thread;\n+    private volatile boolean breakpointReached = false;\n+\n+    SuspendAfterDeath(String args[]) {\n+        super(args);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new SuspendAfterDeath(args).startTests();\n+    }\n+\n+    @Override\n+    public void threadDied(ThreadDeathEvent event) {\n+        ThreadReference eventThread = event.thread();\n+        if (eventThread.name().equals(SuspendAfterDeathTarg.THREAD_NAME)) {\n+            System.out.println(\"Target thread died, thread=\" + eventThread);\n+            thread = eventThread;\n+        }\n+    }\n+\n+    @Override\n+    public void breakpointReached(BreakpointEvent event) {\n+        ThreadReference eventThread = event.thread();\n+        System.out.println(\"Breakpoint, thread=\" + eventThread);\n+        if (thread == null) {\n+            failure(\"FAILED: got Breakpoint event before ThreadDeath event.\");\n+        }\n+        breakpointReached = true;\n+        \/* Suspend the thread. This is being done after the thread has exited. *\/\n+        thread.suspend();\n+    }\n+\n+    @Override\n+    public void connect(String args[]) {\n+        String mainWrapper = System.getProperty(\"main.wrapper\");\n+        if (\"Virtual\".equals(mainWrapper)) {\n+            List argList = new ArrayList(Arrays.asList(args));\n+            argList.add(\"Virtual\");\n+            args = (String[]) argList.toArray(args);\n+        }\n+        super.connect(args);\n+    }\n+\n+    @Override\n+    protected void runTests() throws Exception {\n+        BreakpointEvent bpe = startToMain(\"SuspendAfterDeathTarg\");\n+        EventRequestManager erm = vm().eventRequestManager();\n+\n+        \/\/ listener for ThreadDeathEvent captures reference to the thread\n+        ThreadDeathRequest request1 = erm.createThreadDeathRequest();\n+        request1.enable();\n+\n+        \/\/ listener for BreakpointEvent attempts to suspend the thread\n+        ReferenceType targetClass = bpe.location().declaringType();\n+        Location loc = findMethod(targetClass, \"done\", \"()V\").location();\n+        BreakpointRequest request2 = erm.createBreakpointRequest(loc);\n+        request2.setSuspendPolicy(EventRequest.SUSPEND_EVENT_THREAD);\n+        request2.enable();\n+\n+        listenUntilVMDisconnect();\n+\n+        if (thread == null) {\n+            failure(\"FAILED: never got ThreadDeath event for target thread.\");\n+        }\n+        if (!breakpointReached) {\n+            failure(\"FAILED: never got Breakpoint event for target thread.\");\n+        }\n+\n+        if (!testFailed) {\n+            println(\"SuspendAfterDeath: passed\");\n+        } else {\n+            throw new Exception(\"SuspendAfterDeath: failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/jdi\/SuspendAfterDeath.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -69,0 +69,1 @@\n+    public static final String OLD_MAIN_THREAD_NAME = \"old-m-a-i-n\";\n@@ -464,0 +465,3 @@\n+        } else if (\"true\".equals(System.getProperty(\"test.enable.preview\"))) {\n+            \/\/ the test specified @enablePreview.\n+            argInfo.targetVMArgs += \"--enable-preview \";\n@@ -972,0 +976,2 @@\n+            Thread.currentThread().setName(OLD_MAIN_THREAD_NAME);\n+            vthread.setName(\"main\");\n","filename":"test\/jdk\/com\/sun\/jdi\/TestScaffold.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}