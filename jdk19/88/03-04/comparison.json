{"files":[{"patch":"@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=platform_thread\n@@ -34,0 +34,12 @@\n+\n+\/**\n+ * @test id=virtual_thread\n+ * @bug 8287847\n+ * @summary Test suspending a thread after it has terminated.\n+ * @enablePreview\n+ * @requires vm.continuations\n+ * @run build TestScaffold VMConnection TargetListener TargetAdapter\n+ * @run compile SuspendAfterDeath.java\n+ * @run main\/othervm SuspendAfterDeath Virtual\n+ *\/\n+\n@@ -63,0 +75,1 @@\n+    private static boolean useVirtualThread = false;\n@@ -64,2 +77,2 @@\n-    SuspendAfterDeath(String args[]) {\n-        super(args);\n+    SuspendAfterDeath() {\n+        super(new String[0]); \/\/ no args to pass along to debuggee\n@@ -69,1 +82,10 @@\n-        new SuspendAfterDeath(args).startTests();\n+        if (args.length == 1) {\n+            if (\"Virtual\".equals(args[0])) {\n+                useVirtualThread = true; \/\/ see connect() below for how this is handled\n+            } else {\n+                throw new RuntimeException(\"SuspendAfterDeath: invalid argument: \" + args[0]);\n+            }\n+        } else if (args.length != 0) {\n+            throw new RuntimeException(\"SuspendAfterDeath: incorrect number of arguments: \" + args.length);\n+        }\n+        new SuspendAfterDeath().startTests();\n@@ -95,2 +117,2 @@\n-        String mainWrapper = System.getProperty(\"main.wrapper\");\n-        if (\"Virtual\".equals(mainWrapper)) {\n+        if (useVirtualThread) {\n+            \/* Append the \"Virtual\" argument to the arguments used for the debuggee. *\/\n","filename":"test\/jdk\/com\/sun\/jdi\/SuspendAfterDeath.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"}]}