{"files":[{"patch":"@@ -4889,0 +4889,1 @@\n+    case T_CHAR:\n@@ -4920,0 +4921,1 @@\n+    case T_CHAR:\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2613,0 +2613,2 @@\n+                 opc == Op_ReverseBytesI || opc == Op_ReverseBytesL ||\n+                 opc == Op_ReverseBytesUS || opc == Op_ReverseBytesS ||\n@@ -2694,1 +2696,1 @@\n-          NOT_PRODUCT(if(is_trace_loop_reverse() || TraceLoopOpts) {tty->print_cr(\"SWPointer::output: ShouldNotReachHere, exiting SuperWord\");})\n+          NOT_PRODUCT(if(is_trace_loop_reverse() || TraceLoopOpts) {tty->print_cr(\"SWPointer::output: Unhandled scalar opcode (%s), ShouldNotReachHere, exiting SuperWord\", NodeClassNames[opc]);})\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -174,0 +174,1 @@\n+  case Op_ReverseBytesUS:\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -460,0 +460,4 @@\n+      test_reverse_bytes(a0, a1);\n+      for (int i=0; i<ARRLEN; i++) {\n+        errn += verify(\"test_reverse_bytes: \", i, a0[i], Integer.reverseBytes(a1[i]));\n+      }\n@@ -925,1 +929,7 @@\n-    System.out.println(\"test_srav_and: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_reverse_bytes(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_reverse_bytes: \" + (end - start));\n@@ -1274,0 +1284,6 @@\n+  static void test_reverse_bytes(int [] a0, int [] a1) {\n+    for(int i = 0; i < a0.length; i++) {\n+      a0[i] = Integer.reverseBytes(a1[i]);\n+    }\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr6340864\/TestIntVect.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -435,1 +435,4 @@\n-\n+      test_reverse_bytes(a0, a1);\n+      for (int i=0; i<ARRLEN; i++) {\n+        errn += verify(\"test_reverse_bytes: \", i, a0[i], Long.reverseBytes(a1[i]));\n+      }\n@@ -856,0 +859,7 @@\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_reverse_bytes(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_reverse_bytes: \" + (end - start));\n+\n@@ -1126,0 +1136,5 @@\n+  static void test_reverse_bytes(long[] a0, long[] a1) {\n+    for(int i = 0; i < a0.length; i++) {\n+      a0[i] = Long.reverseBytes(a1[i]);\n+    }\n+  }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr6340864\/TestLongVect.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -445,0 +445,4 @@\n+      test_reverse_bytes(a0, a1);\n+      for (int i=0; i<ARRLEN; i++) {\n+        errn += verify(\"test_reverse_bytes: \", i, a0[i], Short.reverseBytes(a1[i]));\n+      }\n@@ -918,1 +922,7 @@\n-    System.out.println(\"test_srav_and: \" + (end - start));\n+\n+    start = System.currentTimeMillis();\n+    for (int i=0; i<ITERS; i++) {\n+      test_reverse_bytes(a0, a1);\n+    }\n+    end = System.currentTimeMillis();\n+    System.out.println(\"test_reverse_bytes: \" + (end - start));\n@@ -1240,1 +1250,5 @@\n-\n+  static void test_reverse_bytes(short[] a0, short[] a1) {\n+    for(int i = 0; i < a0.length; i+=1) {\n+      a0[i] = Short.reverseBytes(a1[i]);\n+    }\n+  }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/cr6340864\/TestShortVect.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/**\n+ * @test\n+ * @bug 8288112\n+ * @summary Auto-vectorization of ReverseBytes operations.\n+ * @requires vm.compiler2.enabled\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n+ * @requires os.simpleArch == \"x64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorization.TestReverseBytes\n+ *\/\n+\n+package compiler.vectorization;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+public class TestReverseBytes {\n+  private static final int ARRLEN = 1024;\n+  private static final int ITERS  = 11000;\n+\n+  private static long [] linp;\n+  private static long [] lout;\n+  private static int  [] iinp;\n+  private static int  [] iout;\n+  private static short [] sinp;\n+  private static short [] sout;\n+  private static char [] cinp;\n+  private static char [] cout;\n+\n+  public static void setup() {\n+      Random r = new Random(1024);\n+      linp = new long[ARRLEN];\n+      lout = new long[ARRLEN];\n+      iinp = new int[ARRLEN];\n+      iout = new int[ARRLEN];\n+      sinp = new short[ARRLEN];\n+      sout = new short[ARRLEN];\n+      cinp = new char[ARRLEN];\n+      cout = new char[ARRLEN];\n+      for(int i = 0; i < ARRLEN; i++) {\n+          linp[i] = r.nextLong();\n+          iinp[i] = r.nextInt();\n+          sinp[i] = (short)r.nextInt();\n+          cinp[i] = (char)r.nextInt();\n+      }\n+  }\n+\n+  public static void main(String args[]) {\n+      setup();\n+      TestFramework.runWithFlags(\"-XX:-TieredCompilation\",\n+                                  \"-XX:CompileThresholdScaling=0.3\");\n+      System.out.println(\"PASSED\");\n+  }\n+\n+  @Test\n+  @IR(counts = {\"ReverseBytesV\" , \" > 0 \"})\n+  public void test_reverse_bytes_long(long[] lout, long[] linp) {\n+      for (int i = 0; i < lout.length; i+=1) {\n+          lout[i] = Long.reverseBytes(linp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_reverse_bytes_long\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_reverse_bytes_long() {\n+      setup();\n+      for (int i = 0; i < ITERS; i++) {\n+          test_reverse_bytes_long(lout , linp);\n+      }\n+  }\n+\n+  @Test\n+  @IR(counts = {\"ReverseBytesV\" , \" > 0 \"})\n+  public void test_reverse_bytes_int(int[] iout, int[] iinp) {\n+      for (int i = 0; i < iout.length; i+=1) {\n+          iout[i] = Integer.reverseBytes(iinp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_reverse_bytes_int\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_reverse_bytes_int() {\n+      setup();\n+      for (int i = 0; i < ITERS; i++) {\n+          test_reverse_bytes_int(iout , iinp);\n+      }\n+  }\n+\n+  @Test\n+  @IR(counts = {\"ReverseBytesV\" , \" > 0 \"})\n+  public void test_reverse_bytes_short(short[] sout, short[] sinp) {\n+      for (int i = 0; i < sout.length; i+=1) {\n+          sout[i] = Short.reverseBytes(sinp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_reverse_bytes_short\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_reverse_bytes_short() {\n+      setup();\n+      for (int i = 0; i < ITERS; i++) {\n+          test_reverse_bytes_short(sout , sinp);\n+      }\n+  }\n+\n+  @Test\n+  @IR(counts = {\"ReverseBytesV\" , \" > 0 \"})\n+  public void test_reverse_bytes_char(char[] cout, char[] cinp) {\n+      for (int i = 0; i < cout.length; i+=1) {\n+          cout[i] = Character.reverseBytes(cinp[i]);\n+      }\n+  }\n+\n+  @Run(test = {\"test_reverse_bytes_char\"}, mode = RunMode.STANDALONE)\n+  public void kernel_test_reverse_bytes_char() {\n+      setup();\n+      for (int i = 0; i < ITERS; i++) {\n+          test_reverse_bytes_char(cout , cinp);\n+      }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestReverseBytes.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -59,0 +59,1 @@\n+    private int[] res;\n@@ -67,0 +68,1 @@\n+        res       = new int[size];\n@@ -149,0 +151,7 @@\n+\n+    @Benchmark\n+    public void reverseBytes() {\n+        for (int i = 0; i < size; i++) {\n+            res[i] = Integer.reverseBytes(intsSmall[i]);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Integers.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    private long[] res;\n@@ -60,0 +61,1 @@\n+        res = new long[size];\n@@ -144,0 +146,7 @@\n+\n+    @Benchmark\n+    public void reverseBytes() {\n+        for (int i = 0; i < size; i++) {\n+            res[i] = Long.reverseBytes(longArraySmall[i]);\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Longs.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}