{"files":[{"patch":"@@ -420,3 +420,2 @@\n-typedef ThreadLocalCheckpointWriteOp<JfrCheckpointManager::Buffer> ThreadLocalWriteOperation;\n-typedef MutexedWriteOp<WriteOperation> MutexedWriteOperation;\n-typedef MutexedWriteOp<ThreadLocalWriteOperation> ThreadLocalMutexedWriteOperation;\n+typedef ThreadLocalCheckpointWriteOp<JfrCheckpointManager::Buffer> ThreadLocalCheckpointOperation;\n+typedef MutexedWriteOp<ThreadLocalCheckpointOperation> ThreadLocalWriteOperation;\n@@ -424,2 +423,2 @@\n-typedef CompositeOperation<MutexedWriteOperation, ReleaseOperation> WriteReleaseOperation;\n-typedef CompositeOperation<ThreadLocalMutexedWriteOperation, ReleaseOperation> ThreadLocalWriteReleaseOperation;\n+typedef ExclusiveOp<WriteOperation> GlobalWriteOperation;\n+typedef CompositeOperation<GlobalWriteOperation, ReleaseOperation> GlobalWriteReleaseOperation;\n@@ -442,1 +441,1 @@\n-  MutexedWriteOperation mwo(wo);\n+  GlobalWriteOperation gwo(wo);\n@@ -445,7 +444,7 @@\n-  WriteReleaseOperation wro(&mwo, &ro);\n-  process_live_list(wro, _global_mspace, true); \/\/ previous epoch list\n-  \/\/ Do thread local list after global. Careful, the tlwo destructor writes to chunk.\n-  ThreadLocalWriteOperation tlwo(_chunkwriter);\n-  ThreadLocalMutexedWriteOperation tlmwo(tlwo);\n-  _thread_local_mspace->iterate(tlmwo, true); \/\/ previous epoch list\n-  return wo.processed() + tlwo.processed();\n+  GlobalWriteReleaseOperation gwro(&gwo, &ro);\n+  process_live_list(gwro, _global_mspace, true); \/\/ previous epoch list\n+  \/\/ Do thread local list after global. Careful, the tlco destructor writes to chunk.\n+  ThreadLocalCheckpointOperation tlco(_chunkwriter);\n+  ThreadLocalWriteOperation tlwo(tlco);\n+  _thread_local_mspace->iterate(tlwo, true); \/\/ previous epoch list\n+  return wo.processed() + tlco.processed();\n@@ -454,2 +453,3 @@\n-typedef DiscardOp<DefaultDiscarder<JfrCheckpointManager::Buffer> > DiscardOperation;\n-typedef CompositeOperation<DiscardOperation, ReleaseOperation> DiscardReleaseOperation;\n+typedef DiscardOp<DefaultDiscarder<JfrCheckpointManager::Buffer> > ThreadLocalDiscardOperation;\n+typedef ExclusiveDiscardOp<DefaultDiscarder<JfrCheckpointManager::Buffer> > GlobalDiscardOperation;\n+typedef CompositeOperation<GlobalDiscardOperation, ReleaseOperation> DiscardReleaseOperation;\n@@ -460,4 +460,5 @@\n-  DiscardOperation discard_operation(mutexed); \/\/ mutexed discard mode\n-  _thread_local_mspace->iterate(discard_operation, true); \/\/ previous epoch list\n-  ReleaseOperation ro(_global_mspace, _global_mspace->live_list(true));\n-  DiscardReleaseOperation discard_op(&discard_operation, &ro);\n+  ThreadLocalDiscardOperation tldo(mutexed); \/\/ mutexed discard mode\n+  _thread_local_mspace->iterate(tldo, true); \/\/ previous epoch list\n+  GlobalDiscardOperation gdo(mutexed); \/\/ mutexed discard mode\n+  ReleaseOperation ro(_global_mspace, _global_mspace->live_list(true)); \/\/ previous epoch list\n+  DiscardReleaseOperation dro(&gdo, &ro);\n@@ -465,2 +466,2 @@\n-  process_live_list(discard_op, _global_mspace, true); \/\/ previous epoch list\n-  return discard_operation.elements();\n+  process_live_list(dro, _global_mspace, true); \/\/ previous epoch list\n+  return tldo.elements() + gdo.elements();\n@@ -563,0 +564,1 @@\n+    assert(_global_mspace->free_list_is_empty(), \"invariant\");\n@@ -565,6 +567,8 @@\n-    MutexedWriteOperation mwo(wo);\n-    process_live_list(mwo, _global_mspace); \/\/ current epoch list\n-    \/\/ Do thread local list after global. Careful, the tlwo destructor writes to chunk.\n-    ThreadLocalWriteOperation tlwo(_chunkwriter);\n-    ThreadLocalMutexedWriteOperation tlmwo(tlwo);\n-    _thread_local_mspace->iterate(tlmwo); \/\/ current epoch list\n+    GlobalWriteOperation gwo(wo);\n+    ReleaseOperation ro(_global_mspace, _global_mspace->live_list()); \/\/ current epoch list\n+    GlobalWriteReleaseOperation gwro(&gwo, &ro);\n+    process_live_list(gwro, _global_mspace); \/\/ current epoch list\n+    \/\/ Do thread local list after global. Careful, the tlco destructor writes to chunk.\n+    ThreadLocalCheckpointOperation tlco(_chunkwriter);\n+    ThreadLocalWriteOperation tlwo(tlco);\n+    _thread_local_mspace->iterate(tlwo); \/\/ current epoch list\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/jfrCheckpointManager.cpp","additions":31,"deletions":27,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -157,0 +157,2 @@\n+ private:\n+  Thread* const _thread;\n@@ -159,1 +161,1 @@\n-  ExclusiveOp(Operation& operation) : MutexedWriteOp<Operation>(operation) {}\n+  ExclusiveOp(Operation& operation);\n@@ -184,0 +186,2 @@\n+ private:\n+  Thread* const _thread;\n@@ -186,1 +190,1 @@\n-  ExclusiveDiscardOp(jfr_operation_mode mode = concurrent) : DiscardOp<Operation>(mode) {}\n+  ExclusiveDiscardOp(jfr_operation_mode mode = concurrent);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +94,1 @@\n-static void retired_sensitive_acquire(Type* t) {\n+static void retired_sensitive_acquire(Type* t, Thread* thread) {\n@@ -96,0 +96,1 @@\n+  assert(thread != nullptr, \"invariant\");\n@@ -99,1 +100,0 @@\n-  Thread* const thread = Thread::current();\n@@ -107,0 +107,3 @@\n+template <typename Operation>\n+inline ExclusiveOp<Operation>::ExclusiveOp(Operation& operation) : MutexedWriteOp<Operation>(operation), _thread(Thread::current()) {}\n+\n@@ -109,1 +112,1 @@\n-  retired_sensitive_acquire(t);\n+  retired_sensitive_acquire(t, _thread);\n@@ -111,1 +114,1 @@\n-  \/\/ User is required to ensure proper release of the acquisition\n+  \/\/ The user is required to ensure proper release of the acquisition.\n@@ -136,0 +139,3 @@\n+template <typename Operation>\n+inline ExclusiveDiscardOp<Operation>::ExclusiveDiscardOp(jfr_operation_mode mode) : DiscardOp<Operation>(mode), _thread(Thread::current()) {}\n+\n@@ -138,1 +144,1 @@\n-  retired_sensitive_acquire(t);\n+  retired_sensitive_acquire(t, _thread);\n@@ -140,1 +146,1 @@\n-  \/\/ User is required to ensure proper release of the acquisition\n+  \/\/ The user is required to ensure proper release of the acquisition.\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrStorageUtils.inline.hpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"}]}