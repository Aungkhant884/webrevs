{"files":[{"patch":"@@ -132,0 +132,5 @@\n+        @Override\n+        public boolean isDeprecated() {\n+            return generator.isDeprecated();\n+        }\n+\n@@ -147,0 +152,5 @@\n+        @Override\n+        public int nextInt(int origin, int bound) {\n+            return generator.nextInt(origin, bound);\n+        }\n+\n@@ -152,0 +162,10 @@\n+        @Override\n+        public long nextLong(long bound) {\n+            return generator.nextLong(bound);\n+        }\n+\n+        @Override\n+        public long nextLong(long origin, long bound) {\n+            return generator.nextLong(origin, bound);\n+        }\n+\n@@ -162,0 +182,10 @@\n+        @Override\n+        public float nextFloat(float bound) {\n+            return generator.nextFloat(bound);\n+        }\n+\n+        @Override\n+        public float nextFloat(float origin, float bound) {\n+            return generator.nextFloat(origin, bound);\n+        }\n+\n@@ -167,0 +197,15 @@\n+        @Override\n+        public double nextDouble(double bound) {\n+            return generator.nextDouble(bound);\n+        }\n+\n+        @Override\n+        public double nextDouble(double origin, double bound) {\n+            return generator.nextDouble(origin, bound);\n+        }\n+\n+        @Override\n+        public double nextExponential() {\n+            return generator.nextExponential();\n+        }\n+\n@@ -172,0 +217,5 @@\n+        @Override\n+        public double nextGaussian(double mean, double stddev) {\n+            return generator.nextGaussian(mean, stddev);\n+        }\n+\n@@ -1069,1 +1119,1 @@\n-   \/**\n+    \/**\n@@ -1079,1 +1129,1 @@\n-    * @throws IllegalArgumentException {@inheritDoc}\n+     * @throws IllegalArgumentException {@inheritDoc}\n","filename":"src\/java.base\/share\/classes\/java\/util\/Random.java","additions":52,"deletions":2,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+ * @bug 8288596\n@@ -448,0 +449,46 @@\n+    private int delegationCount;\n+\n+    private class RandomGen implements RandomGenerator {\n+\n+        @Override\n+        public boolean isDeprecated() {\n+            delegationCount += 1;\n+            return RandomGenerator.super.isDeprecated();\n+        }\n+\n+        @Override\n+        public float nextFloat(float bound) {\n+            delegationCount += 1;\n+            return RandomGenerator.super.nextFloat(bound);\n+        }\n+\n+        @Override\n+        public double nextDouble(double bound) {\n+            delegationCount += 1;\n+            return RandomGenerator.super.nextDouble(bound);\n+        }\n+\n+        @Override\n+        public long nextLong() {\n+            return 0;\n+        }\n+\n+    }\n+\n+    \/*\n+     * Test whether calls to methods inherited from RandomGenerator\n+     * are delegated to the instance returned by from().\n+     * This is not a complete coverage, but simulates the reproducer\n+     * in issue JDK-8288596\n+     *\/\n+    public void testRandomFrom() {\n+        delegationCount = 0;\n+        var r = Random.from(new RandomGen());\n+        r.isDeprecated();\n+        r.nextFloat(1_000.0f);\n+        r.nextFloat();  \/\/ not implemented in RandomGen, does not count\n+        r.nextDouble(1_000.0);\n+        r.nextDouble();  \/\/ not implemented in RandomGen, does not count\n+        assertEquals(delegationCount, 3);\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Random\/RandomTest.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"}]}