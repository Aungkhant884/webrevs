{"files":[{"patch":"@@ -507,1 +507,1 @@\n-            excName = new RawHtml(ch.getExceptionName(throwsTag).toString());\n+            excName = new RawHtml(throwsTag.getExceptionName().toString());\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.CommentHelper;\n@@ -53,1 +52,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.Utils;\n@@ -67,1 +65,1 @@\n-        Utils utils = input.utils;\n+        var utils = input.utils;\n@@ -69,1 +67,1 @@\n-        CommentHelper ch = utils.getCommentHelper(input.element);\n+        var ch = utils.getCommentHelper(input.element);\n@@ -74,1 +72,1 @@\n-                    ? ch.getExceptionName(tag).getSignature()\n+                    ? tag.getExceptionName().getSignature()\n@@ -100,1 +98,1 @@\n-        Utils utils = writer.configuration().utils;\n+        var utils = writer.configuration().utils;\n@@ -106,1 +104,1 @@\n-                writer.configuration().utils.typeUtils,\n+                utils.typeUtils,\n@@ -109,2 +107,2 @@\n-        Map<List<ThrowsTree>, ExecutableElement> tagsMap = new LinkedHashMap<>();\n-        tagsMap.put(utils.getThrowsTrees(executable), executable);\n+        Map<ThrowsTree, ExecutableElement> tagsMap = new LinkedHashMap<>();\n+        utils.getThrowsTrees(executable).forEach(t -> tagsMap.put(t, executable));\n@@ -113,1 +111,1 @@\n-        result.add(throwsTagsOutput(tagsMap, writer, alreadyDocumented, typeSubstitutions, true));\n+        result.add(throwsTagsOutput(tagsMap, alreadyDocumented, typeSubstitutions, writer));\n@@ -148,1 +146,7 @@\n-     * @param throwsTags        the collection of tags to be converted\n+     * @param throwsTags        the tags to be converted; each tag is mapped to\n+     *                          a method it appears on\n+     * @param alreadyDocumented the set of exceptions that have already been\n+     *                          documented and thus must not be documented by\n+     *                          this method. All exceptions documented by this\n+     *                          method will be added to this set upon the\n+     *                          method's return.\n@@ -150,2 +154,0 @@\n-     * @param alreadyDocumented the set of exceptions that have already been documented\n-     * @param allowDuplicates   {@code true} if we allow duplicate tags to be documented\n@@ -154,6 +156,5 @@\n-    protected Content throwsTagsOutput(Map<List<ThrowsTree>, ExecutableElement> throwsTags,\n-                                       TagletWriter writer,\n-                                       Set<String> alreadyDocumented,\n-                                       Map<String, TypeMirror> typeSubstitutions,\n-                                       boolean allowDuplicates) {\n-        Utils utils = writer.configuration().utils;\n+    private Content throwsTagsOutput(Map<ThrowsTree, ExecutableElement> throwsTags,\n+                                     Set<String> alreadyDocumented,\n+                                     Map<String, TypeMirror> typeSubstitutions,\n+                                     TagletWriter writer) {\n+        var utils = writer.configuration().utils;\n@@ -161,1 +162,2 @@\n-        for (Entry<List<ThrowsTree>, ExecutableElement> entry : throwsTags.entrySet()) {\n+        var documentedInThisCall = new HashSet<String>();\n+        for (Entry<ThrowsTree, ExecutableElement> entry : throwsTags.entrySet()) {\n@@ -163,22 +165,20 @@\n-            CommentHelper ch = utils.getCommentHelper(e);\n-            for (ThrowsTree tag : entry.getKey()) {\n-                Element te = ch.getException(tag);\n-                String excName = ch.getExceptionName(tag).toString();\n-                TypeMirror substituteType = typeSubstitutions.get(excName);\n-                if ((!allowDuplicates) &&\n-                        (alreadyDocumented.contains(excName) ||\n-                                (te != null && alreadyDocumented.contains(utils.getFullyQualifiedName(te, false)))) ||\n-                        (substituteType != null && alreadyDocumented.contains(substituteType.toString()))) {\n-                    continue;\n-                }\n-                if (alreadyDocumented.isEmpty()) {\n-                    result.add(writer.getThrowsHeader());\n-                }\n-                result.add(writer.throwsTagOutput(e, tag, substituteType));\n-                if (substituteType != null) {\n-                    alreadyDocumented.add(substituteType.toString());\n-                } else {\n-                    alreadyDocumented.add(te != null\n-                            ? utils.getFullyQualifiedName(te, false)\n-                            : excName);\n-                }\n+            var ch = utils.getCommentHelper(e);\n+            ThrowsTree tag = entry.getKey();\n+            Element te = ch.getException(tag);\n+            String excName = tag.getExceptionName().toString();\n+            TypeMirror substituteType = typeSubstitutions.get(excName);\n+            if (alreadyDocumented.contains(excName)\n+                    || (te != null && alreadyDocumented.contains(utils.getFullyQualifiedName(te, false)))\n+                    || (substituteType != null && alreadyDocumented.contains(substituteType.toString()))) {\n+                continue;\n+            }\n+            if (alreadyDocumented.isEmpty() && documentedInThisCall.isEmpty()) {\n+                result.add(writer.getThrowsHeader());\n+            }\n+            result.add(writer.throwsTagOutput(e, tag, substituteType));\n+            if (substituteType != null) {\n+                documentedInThisCall.add(substituteType.toString());\n+            } else {\n+                documentedInThisCall.add(te != null\n+                        ? utils.getFullyQualifiedName(te, false)\n+                        : excName);\n@@ -187,0 +187,1 @@\n+        alreadyDocumented.addAll(documentedInThisCall);\n@@ -208,2 +209,2 @@\n-        Utils utils = writer.configuration().utils;\n-        Map<List<ThrowsTree>, ExecutableElement> declaredExceptionTags = new LinkedHashMap<>();\n+        var utils = writer.configuration().utils;\n+        Map<ThrowsTree, ExecutableElement> declaredExceptionTags = new LinkedHashMap<>();\n@@ -223,4 +224,2 @@\n-                List<ThrowsTree> inheritedTags = inheritedDoc.tagList.stream()\n-                        .map(t -> (ThrowsTree) t)\n-                        .toList();\n-                declaredExceptionTags.put(inheritedTags, (ExecutableElement) inheritedDoc.holder);\n+                var h = (ExecutableElement) inheritedDoc.holder;\n+                inheritedDoc.tagList.forEach(t -> declaredExceptionTags.put((ThrowsTree) t, h));\n@@ -229,2 +228,2 @@\n-        result.add(throwsTagsOutput(declaredExceptionTags, writer, alreadyDocumented,\n-                typeSubstitutions, false));\n+        result.add(throwsTagsOutput(declaredExceptionTags, alreadyDocumented, typeSubstitutions,\n+                writer));\n@@ -238,1 +237,1 @@\n-        Utils utils = writer.configuration().utils;\n+        var utils = writer.configuration().utils;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":50,"deletions":51,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -550,4 +550,0 @@\n-    public ReferenceTree getExceptionName(ThrowsTree tt) {\n-        return tt.getExceptionName();\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        \/\/ for now keep keep this bug compatible, should fix this correctly in\n+        \/\/ for now keep this bug compatible, should fix this correctly in\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testThrowsInheritance\/TestThrowsTagInheritance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,353 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8067757\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestOneToMany\n+ *\/\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class TestOneToMany extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        var tester = new TestOneToMany();\n+        tester.runTests(m -> new Object[]{Paths.get(m.getName())});\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    \/\/ These tests:\n+    \/\/\n+    \/\/   - Use own exceptions to not depend on platform links or a setup with\n+    \/\/     the no-platform-links option\n+    \/\/   - Enclose files in a package to exercise a typical source layout and\n+    \/\/     avoid enumerating separate files in the javadoc command\n+\n+    @Test\n+    public void testUncheckedException(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                public class MyRuntimeException extends RuntimeException { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException if this\n+                     * @throws MyRuntimeException if that\n+                     *\/\n+                    void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I1 extends I {\n+\n+                    @Override\n+                    void m() throws MyRuntimeException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class IImpl implements I {\n+\n+                    @Override\n+                    public void m() throws MyRuntimeException { }\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C {\n+\n+                    \/**\n+                     * @throws MyRuntimeException if this\n+                     * @throws MyRuntimeException if that\n+                     *\/\n+                    public void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C1 extends C {\n+\n+                    @Override\n+                    public void m() throws MyRuntimeException { }\n+                }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"x\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"x\/IImpl.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/I1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/C1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Overrides:<\/dt>\n+                <dd><code><a href=\"C.html#m()\">m<\/a><\/code>&nbsp;in class&nbsp;<code><a href=\"C.html\" title=\"class in x\">C<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+    }\n+\n+    @Test\n+    public void testUncheckedExceptionWithRedundantThrows(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                public class MyRuntimeException extends RuntimeException { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException if this\n+                     * @throws MyRuntimeException if that\n+                     *\/\n+                    void m() throws MyRuntimeException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I1 extends I {\n+\n+                    @Override\n+                    void m() throws MyRuntimeException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class IImpl implements I {\n+\n+                    @Override\n+                    public void m() throws MyRuntimeException { }\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C {\n+\n+                    \/**\n+                     * @throws MyRuntimeException if this\n+                     * @throws MyRuntimeException if that\n+                     *\/\n+                    public void m() throws MyRuntimeException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C1 extends C {\n+\n+                    @Override\n+                    public void m() throws MyRuntimeException { }\n+                }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"x\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"x\/IImpl.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/I1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/C1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Overrides:<\/dt>\n+                <dd><code><a href=\"C.html#m()\">m<\/a><\/code>&nbsp;in class&nbsp;<code><a href=\"C.html\" title=\"class in x\">C<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+    }\n+\n+    @Test\n+    public void testCheckedException(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                public class MyCheckedException extends Exception { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I {\n+\n+                    \/**\n+                     * @throws MyCheckedException if this\n+                     * @throws MyCheckedException if that\n+                     *\/\n+                    void m() throws MyCheckedException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I1 extends I {\n+\n+                    @Override\n+                    void m() throws MyCheckedException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class IImpl implements I {\n+\n+                    @Override\n+                    public void m() throws MyCheckedException { }\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C {\n+\n+                    \/**\n+                     * @throws MyCheckedException if this\n+                     * @throws MyCheckedException if that\n+                     *\/\n+                    public void m()  throws MyCheckedException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C1 extends C {\n+\n+                    @Override\n+                    public void m() throws MyCheckedException { }\n+                }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"x\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"x\/IImpl.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyCheckedException.html\" title=\"class in x\">MyCheckedException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyCheckedException.html\" title=\"class in x\">MyCheckedException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/I1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyCheckedException.html\" title=\"class in x\">MyCheckedException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyCheckedException.html\" title=\"class in x\">MyCheckedException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/C1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Overrides:<\/dt>\n+                <dd><code><a href=\"C.html#m()\">m<\/a><\/code>&nbsp;in class&nbsp;<code><a href=\"C.html\" title=\"class in x\">C<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyCheckedException.html\" title=\"class in x\">MyCheckedException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyCheckedException.html\" title=\"class in x\">MyCheckedException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+    }\n+\n+    @Test\n+    public void testSubExceptionDoubleInheritance(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                public class MyException extends Exception { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class MySubException extends MyException { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I {\n+\n+                    \/**\n+                     * @throws MyException if this\n+                     * @throws MySubException if that\n+                     *\/\n+                    void m() throws MyException, MySubException;\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I1 extends I {\n+\n+                    @Override\n+                    void m() throws MyException, MySubException;\n+                }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"x\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"x\/I1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyException.html\" title=\"class in x\">MyException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MySubException.html\" title=\"class in x\">MySubException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testThrowsInheritanceMultiple\/TestOneToMany.java","additions":353,"deletions":0,"binary":false,"changes":353,"status":"added"}]}