{"files":[{"patch":"@@ -69,0 +69,1 @@\n+  int            _block_id_start;\n@@ -70,0 +71,1 @@\n+  int           bit_number(int block_id) const   { return block_id - _block_id_start; }\n@@ -125,0 +127,1 @@\n+ , _block_id_start(0)\n@@ -387,5 +390,6 @@\n-  _active.initialize(BlockBegin::number_of_blocks());\n-  _visited.initialize(BlockBegin::number_of_blocks());\n-  _loop_map = GrowableArray<ResourceBitMap>(BlockBegin::number_of_blocks(), BlockBegin::number_of_blocks(), ResourceBitMap());\n-  for (int i = 0; i < BlockBegin::number_of_blocks(); i++) {\n-    _loop_map.at(i).initialize(BlockBegin::number_of_blocks());\n+  const int number_of_blocks = _blocks.length();\n+  _active.initialize(number_of_blocks);\n+  _visited.initialize(number_of_blocks);\n+  _loop_map = GrowableArray<ResourceBitMap>(number_of_blocks, number_of_blocks, ResourceBitMap());\n+  for (int i = 0; i < number_of_blocks; i++) {\n+    _loop_map.at(i).initialize(number_of_blocks);\n@@ -404,1 +408,1 @@\n-  \/\/ -  Now, the tricky part here is how we detect irriducible loops. In the algorithm above the loop state bits\n+  \/\/ -  Now, the tricky part here is how we detect irreducible loops. In the algorithm above the loop state bits\n@@ -409,1 +413,3 @@\n-  BitMap& loop_state = mark_loops(_bci2block->at(0), false);\n+  BlockBegin* start = _bci2block->at(0);\n+  _block_id_start = start->block_id();\n+  BitMap& loop_state = mark_loops(start, false);\n@@ -422,0 +428,2 @@\n+  int block_id = block->block_id();\n+  int block_bit = bit_number(block_id);\n@@ -430,3 +438,3 @@\n-    assert(_loop_map.at(block->block_id()).is_empty(), \"must not be set yet\");\n-    assert(0 <= _next_loop_index && _next_loop_index < BlockBegin::number_of_blocks(), \"_next_loop_index is too large\");\n-    _loop_map.at(block->block_id()).set_bit(_next_loop_index++);\n+    assert(_loop_map.at(block_bit).is_empty(), \"must not be set yet\");\n+    assert(0 <= _next_loop_index && _next_loop_index < _loop_map.length(), \"_next_loop_index is too large\");\n+    _loop_map.at(block_bit).set_bit(_next_loop_index++);\n@@ -435,1 +443,1 @@\n-    assert(_loop_map.at(block->block_id()).count_one_bits() == 1, \"exactly one bit must be set\");\n+    assert(_loop_map.at(block_bit).count_one_bits() == 1, \"exactly one bit must be set\");\n@@ -441,2 +449,3 @@\n-  if (_visited.at(block_id)) {\n-    if (_active.at(block_id)) {\n+  int block_bit = bit_number(block_id);\n+  if (_visited.at(block_bit)) {\n+    if (_active.at(block_bit)) {\n@@ -447,1 +456,1 @@\n-    return _loop_map.at(block_id);\n+    return _loop_map.at(block_bit);\n@@ -455,2 +464,2 @@\n-  _visited.set_bit(block_id);\n-  _active.set_bit(block_id);\n+  _visited.set_bit(block_bit);\n+  _active.set_bit(block_bit);\n@@ -459,1 +468,1 @@\n-  ResourceBitMap loop_state(BlockBegin::number_of_blocks());\n+  ResourceBitMap loop_state(_loop_map.length());\n@@ -461,0 +470,1 @@\n+    BlockBegin* sux = successor_at(block, i);\n@@ -462,1 +472,1 @@\n-    loop_state.set_union(mark_loops(successor_at(block, i), in_subroutine));\n+    loop_state.set_union(mark_loops(sux, in_subroutine));\n@@ -466,1 +476,1 @@\n-  _active.clear_bit(block_id);\n+  _active.clear_bit(block_bit);\n@@ -479,1 +489,1 @@\n-    BitMap& header_loop_state = _loop_map.at(block_id);\n+    BitMap& header_loop_state = _loop_map.at(block_bit);\n@@ -486,2 +496,2 @@\n-  _loop_map.at(block_id).set_from(loop_state);\n-  return _loop_map.at(block_id);\n+  _loop_map.at(block_bit).set_from(loop_state);\n+  return _loop_map.at(block_bit);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":32,"deletions":22,"binary":false,"changes":54,"status":"modified"}]}