{"files":[{"patch":"@@ -740,0 +740,6 @@\n+     * <p>\n+     * If the given string contains any {@code '\\0'} characters, they will be\n+     * copied as well. This means that, depending on the method used to read\n+     * the string, such as {@link MemorySegment#getUtf8String(long)}, the string\n+     * will appear truncated when read again.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,0 +74,5 @@\n+     * <p>\n+     * If the given string contains any {@code '\\0'} characters, they will be\n+     * copied as well. This means that, depending on the method used to read\n+     * the string, such as {@link MemorySegment#getUtf8String(long)}, the string\n+     * will appear truncated when read again.\n@@ -79,1 +84,0 @@\n-     * @throws IllegalArgumentException if the UTF-8 encoded bytes of the given string contain a {@code 0} byte.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.Arrays;\n@@ -143,0 +142,6 @@\n+    public static void copy(MemorySegment addr, byte[] bytes) {\n+        var heapSegment = MemorySegment.ofArray(bytes);\n+        addr.copyFrom(heapSegment);\n+        addr.set(JAVA_BYTE, bytes.length, (byte)0);\n+    }\n+\n@@ -145,7 +150,1 @@\n-        for (int i = 0; i < bytes.length; i++) {\n-            byte b = bytes[i];\n-            if (b == 0) {\n-                throw new IllegalArgumentException(\"String contains zero byte: \" + Arrays.toString(bytes));\n-            }\n-            addr.set(JAVA_BYTE, i, b);\n-        }\n+        copy(addr, bytes);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -207,17 +207,0 @@\n-    @DataProvider\n-    public Object[][] invalidStrings() {\n-        return new Object[][] {\n-                { \"\\0\\0\\0\\0\" },\n-                { \"ab\\0d\" }\n-        };\n-    }\n-\n-    @Test(dataProvider = \"invalidStrings\",\n-            expectedExceptions = IllegalArgumentException.class,\n-            expectedExceptionsMessageRegExp = \".*String contains zero byte.*\")\n-    public void testInvalidStrings(String invalid) {\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            session.allocateUtf8String(invalid); \/\/ should fail\n-        }\n-    }\n-\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"}]}