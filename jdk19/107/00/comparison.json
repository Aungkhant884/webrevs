{"files":[{"patch":"@@ -79,0 +79,1 @@\n+     * @throws IllegalArgumentException if the UTF-8 encoded bytes of the given string contain a {@code 0} byte.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SegmentAllocator.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.Arrays;\n@@ -142,6 +143,0 @@\n-    public static void copy(MemorySegment addr, byte[] bytes) {\n-        var heapSegment = MemorySegment.ofArray(bytes);\n-        addr.copyFrom(heapSegment);\n-        addr.set(JAVA_BYTE, bytes.length, (byte)0);\n-    }\n-\n@@ -150,1 +145,7 @@\n-        copy(addr, bytes);\n+        for (int i = 0; i < bytes.length; i++) {\n+            byte b = bytes[i];\n+            if (b == 0) {\n+                throw new IllegalArgumentException(\"String contains zero byte: \" + Arrays.toString(bytes));\n+            }\n+            addr.set(JAVA_BYTE, i, b);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -207,0 +207,17 @@\n+    @DataProvider\n+    public Object[][] invalidStrings() {\n+        return new Object[][] {\n+                { \"\\0\\0\\0\\0\" },\n+                { \"ab\\0d\" }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"invalidStrings\",\n+            expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*String contains zero byte.*\")\n+    public void testInvalidStrings(String invalid) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            session.allocateUtf8String(invalid); \/\/ should fail\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}