{"files":[{"patch":"@@ -233,8 +233,0 @@\n-intptr_t* frame::compiled_sender_sp(CodeBlob* cb) const {\n-  return sender_sp();\n-}\n-\n-address* frame::compiled_sender_pc_addr(CodeBlob* cb) const {\n-  return sender_pc_addr();\n-}\n-\n@@ -243,0 +235,2 @@\n+  address* pc_addr = (address*)&(own_abi()->return_pc);\n+\n@@ -247,0 +241,6 @@\n+  assert(!Continuation::is_return_barrier_entry(*pc_addr), \"return barrier\");\n+  assert(_pc == *pc_addr || pc == *pc_addr || 0 == *pc_addr,\n+         \"must be (pc: \" INTPTR_FORMAT \" _pc: \" INTPTR_FORMAT \" pc_addr: \" INTPTR_FORMAT\n+         \" *pc_addr: \" INTPTR_FORMAT  \" sp: \" INTPTR_FORMAT \")\",\n+         p2i(pc), p2i(_pc), p2i(pc_addr), p2i(*pc_addr), p2i(sp()));\n+  DEBUG_ONLY(address old_pc = _pc;)\n@@ -248,0 +248,1 @@\n+  _pc = pc; \/\/ must be set before call to get_deopt_original_pc\n@@ -250,1 +251,1 @@\n-    assert(original_pc == _pc, \"expected original to be stored before patching\");\n+    \/\/ assert(original_pc == _pc, \"expected original to be stored before patching\");\n@@ -252,1 +253,1 @@\n-    \/\/ Leave _pc as is.\n+    _pc = original_pc;\n@@ -255,1 +256,0 @@\n-    _pc = pc;\n@@ -257,0 +257,11 @@\n+  assert(!is_compiled_frame() || !_cb->as_compiled_method()->is_deopt_entry(_pc), \"must be\");\n+\n+  #ifdef ASSERT\n+  {\n+    frame f(this->sp(), pc, this->unextended_sp());\n+    assert(f.is_deoptimized_frame() == this->is_deoptimized_frame() && f.pc() == this->pc() && f.raw_pc() == this->raw_pc(),\n+           \"must be (f.is_deoptimized_frame(): %d this->is_deoptimized_frame(): %d \"\n+           \"f.pc(): \" INTPTR_FORMAT \" this->pc(): \" INTPTR_FORMAT \" f.raw_pc(): \" INTPTR_FORMAT \" this->raw_pc(): \" INTPTR_FORMAT \")\",\n+           f.is_deoptimized_frame(), this->is_deoptimized_frame(), p2i(f.pc()), p2i(this->pc()), p2i(f.raw_pc()), p2i(this->raw_pc()));\n+  }\n+  #endif\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -463,1 +463,2 @@\n-  inline void find_codeblob_and_set_pc_and_deopt_state(address pc);\n+  \/\/ Initialize frame members (_pc and _sp must be given)\n+  inline void setup();\n@@ -470,2 +471,1 @@\n-  inline frame(intptr_t* sp, address pc);\n-  inline frame(intptr_t* sp, address pc, intptr_t* unextended_sp);\n+  inline frame(intptr_t* sp, address pc, intptr_t* unextended_sp = nullptr, intptr_t* fp = nullptr, CodeBlob* cb = nullptr);\n@@ -482,4 +482,0 @@\n-\n-  intptr_t* compiled_sender_sp(CodeBlob* cb) const;\n-  address*  compiled_sender_pc_addr(CodeBlob* cb) const;\n-\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n@@ -35,2 +36,10 @@\n-inline void frame::find_codeblob_and_set_pc_and_deopt_state(address pc) {\n-  assert(pc != NULL, \"precondition: must have PC\");\n+\/\/ Initialize frame members (_sp must be given)\n+inline void frame::setup() {\n+  if (_pc == nullptr) {\n+    _pc = (address)own_abi()->return_pc;\n+    assert(_pc != nullptr, \"must have PC\");\n+  }\n+\n+  if (_cb == nullptr) {\n+    _cb = CodeCache::find_blob(_pc);\n+  }\n@@ -38,2 +47,7 @@\n-  _cb = CodeCache::find_blob(pc);\n-  _pc = pc;   \/\/ Must be set for get_deopt_original_pc().\n+  if (_fp == nullptr) {\n+    _fp = (intptr_t*)own_abi()->callers_sp;\n+  }\n+\n+  if (_unextended_sp == nullptr) {\n+    _unextended_sp = _sp;\n+  }\n@@ -41,1 +55,3 @@\n-  _fp = (intptr_t *) own_abi()->callers_sp;\n+  \/\/ When thawing continuation frames the _unextended_sp passed to the constructor is not aligend\n+  assert(_on_heap || (is_aligned(_sp, alignment_in_bytes) && is_aligned(_fp, alignment_in_bytes)),\n+         \"invalid alignment sp:\" PTR_FORMAT \" unextended_sp:\" PTR_FORMAT \" fp:\" PTR_FORMAT, p2i(_sp), p2i(_unextended_sp), p2i(_fp));\n@@ -44,1 +60,1 @@\n-  if (original_pc != NULL) {\n+  if (original_pc != nullptr) {\n@@ -47,0 +63,2 @@\n+    assert(_cb == nullptr || _cb->as_compiled_method()->insts_contains_inclusive(_pc),\n+           \"original PC must be in the main code section of the the compiled method (or must be immediately following it)\");\n@@ -48,1 +66,5 @@\n-    _deopt_state = not_deoptimized;\n+    if (_cb == SharedRuntime::deopt_blob()) {\n+      _deopt_state = is_deoptimized;\n+    } else {\n+      _deopt_state = not_deoptimized;\n+    }\n@@ -51,1 +73,1 @@\n-  assert(((uint64_t)_sp & 0x7) == 0, \"SP must be 8-byte aligned\");\n+  \/\/ assert(_on_heap || is_aligned(_sp, frame::frame_alignment), \"SP must be 8-byte aligned\");\n@@ -56,14 +78,3 @@\n-\/\/ Initialize all fields, _unextended_sp will be adjusted in find_codeblob_and_set_pc_and_deopt_state.\n-inline frame::frame() : _sp(NULL), _pc(NULL), _cb(NULL), _deopt_state(unknown), _on_heap(false),\n-#ifdef ASSERT\n-                        _frame_index(-1),\n-#endif\n-                        _unextended_sp(NULL), _fp(NULL) {}\n-\n-inline frame::frame(intptr_t* sp) : _sp(sp), _on_heap(false),\n-#ifdef ASSERT\n-                        _frame_index(-1),\n-#endif\n-                        _unextended_sp(sp) {\n-  find_codeblob_and_set_pc_and_deopt_state((address)own_abi()->return_pc);\n-}\n+\/\/ Initialize all fields\n+inline frame::frame() : _sp(nullptr), _pc(nullptr), _cb(nullptr), _oop_map(nullptr), _deopt_state(unknown),\n+                        _on_heap(false), DEBUG_ONLY(_frame_index(-1) COMMA) _unextended_sp(nullptr), _fp(nullptr) {}\n@@ -71,6 +82,4 @@\n-inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _on_heap(false),\n-#ifdef ASSERT\n-                        _frame_index(-1),\n-#endif\n-                        _unextended_sp(sp) {\n-  find_codeblob_and_set_pc_and_deopt_state(pc); \/\/ Also sets _fp and adjusts _unextended_sp.\n+inline frame::frame(intptr_t* sp, address pc, intptr_t* unextended_sp, intptr_t* fp, CodeBlob* cb)\n+  : _sp(sp), _pc(pc), _cb(cb), _oop_map(nullptr),\n+    _on_heap(false), DEBUG_ONLY(_frame_index(-1) COMMA) _unextended_sp(unextended_sp), _fp(fp) {\n+  setup();\n@@ -79,7 +88,1 @@\n-inline frame::frame(intptr_t* sp, address pc, intptr_t* unextended_sp) : _sp(sp), _on_heap(false),\n-#ifdef ASSERT\n-                                                                         _frame_index(-1),\n-#endif\n-                                                                         _unextended_sp(unextended_sp) {\n-  find_codeblob_and_set_pc_and_deopt_state(pc); \/\/ Also sets _fp and adjusts _unextended_sp.\n-}\n+inline frame::frame(intptr_t* sp) : frame(sp, nullptr) {}\n@@ -89,7 +92,4 @@\n-inline frame::frame(void* sp, void* pc, void* unextended_sp) :\n-  _sp((intptr_t*)sp), _pc(NULL), _cb(NULL), _on_heap(false),\n-#ifdef ASSERT\n-  _frame_index(-1),\n-#endif\n-  _unextended_sp((intptr_t*)unextended_sp) {\n-  find_codeblob_and_set_pc_and_deopt_state((address)pc); \/\/ Also sets _fp and adjusts _unextended_sp.\n+inline frame::frame(void* sp, void* pc, void* unextended_sp)\n+  : _sp((intptr_t*)sp), _pc((address)pc), _cb(nullptr), _oop_map(nullptr),\n+    _on_heap(false), DEBUG_ONLY(_frame_index(-1) COMMA) _unextended_sp((intptr_t*)unextended_sp) {\n+  setup();\n@@ -307,1 +307,10 @@\n-  Unimplemented();\n+  if (_cb == NULL) return NULL;\n+  if (_cb->oop_maps() != NULL) {\n+    NativePostCallNop* nop = nativePostCallNop_at(_pc);\n+    if (nop != NULL && nop->displacement() != 0) {\n+      int slot = ((nop->displacement() >> 24) & 0xff);\n+      return _cb->oop_map_for_slot(slot, _pc);\n+    }\n+    const ImmutableOopMap* oop_map = OopMapSet::find_map(this);\n+    return oop_map;\n+  }\n@@ -358,1 +367,1 @@\n-  if (_cb != NULL) return sender_for_compiled_frame(map);\n+  if (_cb != nullptr) return sender_for_compiled_frame(map);\n@@ -366,2 +375,1 @@\n-  assert(map != NULL, \"map must be set\");\n-  \/\/ Frame owned by compiler.\n+  assert(map != nullptr, \"map must be set\");\n@@ -369,2 +377,2 @@\n-  address pc = *compiled_sender_pc_addr(_cb);\n-  frame caller(compiled_sender_sp(_cb), pc);\n+  intptr_t* sender_sp = this->sender_sp();\n+  address   sender_pc = this->sender_pc();\n@@ -373,2 +381,0 @@\n-\n-  \/\/ Get the rest.\n@@ -378,1 +384,1 @@\n-    if (_cb->oop_maps() != NULL) {\n+    if (_cb->oop_maps() != nullptr) {\n@@ -383,1 +389,1 @@\n-  return caller;\n+  return frame(sender_sp, sender_pc);\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":58,"deletions":52,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -660,1 +660,1 @@\n-  int displacement() const { Unimplemented(); return 0; }\n+  int displacement() const { return 0; }\n@@ -666,1 +666,1 @@\n-  Unimplemented();\n+  \/\/ Unimplemented();\n@@ -678,1 +678,1 @@\n-    Unimplemented();\n+    \/\/ Unimplemented();\n","filename":"src\/hotspot\/cpu\/s390\/nativeInst_s390.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2860,0 +2860,38 @@\n+  RuntimeStub* generate_cont_doYield() {\n+    if (!Continuations::enabled()) return nullptr;\n+    Unimplemented();\n+    return nullptr;\n+  }\n+\n+  address generate_cont_thaw(bool return_barrier, bool exception) {\n+    if (!Continuations::enabled()) return nullptr;\n+    Unimplemented();\n+    return nullptr;\n+  }\n+\n+  address generate_cont_thaw() {\n+    if (!Continuations::enabled()) return nullptr;\n+    Unimplemented();\n+    return nullptr;\n+  }\n+\n+  address generate_cont_returnBarrier() {\n+    if (!Continuations::enabled()) return nullptr;\n+    Unimplemented();\n+    return nullptr;\n+  }\n+\n+  address generate_cont_returnBarrier_exception() {\n+    if (!Continuations::enabled()) return nullptr;\n+    Unimplemented();\n+    return nullptr;\n+  }\n+\n+  #if INCLUDE_JFR\n+  RuntimeStub* generate_jfr_write_checkpoint() {\n+    if (!Continuations::enabled()) return nullptr;\n+    Unimplemented();\n+    return nullptr;\n+  }\n+  #endif \/\/ INCLUD_JFR\n+\n@@ -2898,0 +2936,14 @@\n+  void generate_phase1() {\n+    if (!Continuations::enabled()) return;\n+\n+    \/\/ Continuation stubs:\n+    StubRoutines::_cont_thaw          = generate_cont_thaw();\n+    StubRoutines::_cont_returnBarrier = generate_cont_returnBarrier();\n+    StubRoutines::_cont_returnBarrierExc = generate_cont_returnBarrier_exception();\n+    StubRoutines::_cont_doYield_stub  = generate_cont_doYield();\n+    StubRoutines::_cont_doYield       = StubRoutines::_cont_doYield_stub == nullptr ? nullptr\n+                                      : StubRoutines::_cont_doYield_stub->entry_point();\n+\n+    JFR_ONLY(StubRoutines::_jfr_write_checkpoint_stub = generate_jfr_write_checkpoint();)\n+    JFR_ONLY(StubRoutines::_jfr_write_checkpoint = StubRoutines::_jfr_write_checkpoint_stub->entry_point();)\n+  }\n@@ -2974,5 +3026,3 @@\n-  StubGenerator(CodeBuffer* code, bool all) : StubCodeGenerator(code) {\n-    _stub_count = !all ? 0x100 : 0x200;\n-    if (all) {\n-      generate_all();\n-    } else {\n+  StubGenerator(CodeBuffer* code, int phase) : StubCodeGenerator(code) {\n+    _stub_count = (phase == 0) ? 0x100 : 0x200;\n+    if (phase == 0) {\n@@ -2980,0 +3030,4 @@\n+    } else if (phase == 1) {\n+      generate_phase1(); \/\/ stubs that must be available for the interpreter\n+    } else {\n+      generate_all();\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":59,"deletions":5,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -486,0 +486,1 @@\n+  if (!Continuations::enabled()) return nullptr;\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-#if defined(PPC64)\n+#if defined(PPC64) || defined(S390)\n@@ -245,1 +245,1 @@\n-#endif \/\/ defined(PPC64)\n+#endif \/\/ defined(PPC64) || defined(S390)\n@@ -254,0 +254,1 @@\n+      S390_ONLY(_stack_arg_slots = align_up(_stack_arg_slots, 2));\n@@ -258,1 +259,1 @@\n-#if defined(PPC64)\n+#if defined(PPC64) || defined(S390)\n@@ -265,1 +266,1 @@\n-#endif \/\/ defined(PPC64)\n+#endif \/\/ defined(PPC64) || defined(S390)\n@@ -271,0 +272,1 @@\n+      S390_ONLY(_stack_arg_slots = align_up(_stack_arg_slots, 2));\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}