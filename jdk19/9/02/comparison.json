{"files":[{"patch":"@@ -143,8 +143,3 @@\n-                try {\n-                    if (!(AppImageFile.load(applicationImage).isSigned())) {\n-                        Log.info(MessageFormat.format(I18N.getString(\n-                                 \"warning.unsigned.app.image\"), getID()));\n-                    }\n-                } catch (IOException ioe) {\n-                    \/\/ Ignore - In case of a forign or tampered with app-image,\n-                    \/\/ user is notified of this when the name is extracted.\n+                if (!(AppImageFile.load(applicationImage).isSigned())) {\n+                    Log.info(MessageFormat.format(I18N.getString(\n+                            \"warning.unsigned.app.image\"), getID()));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -76,6 +76,1 @@\n-\n-    private AppImageFile() {\n-        this(null, null, null, null, null, null, null);\n-    }\n-\n-    private AppImageFile(String launcherName, String mainClass,\n+    private AppImageFile(Path appImageDir, String launcherName, String mainClass,\n@@ -84,0 +79,38 @@\n+        boolean isValid = true;\n+        if (!Objects.equals(getVersion(), creatorVersion)) {\n+            isValid = false;\n+        }\n+\n+        if (!Objects.equals(getPlatform(), creatorPlatform)) {\n+            isValid = false;\n+        }\n+\n+        if (launcherName == null || launcherName.length() == 0) {\n+            isValid = false;\n+        }\n+\n+        if (mainClass == null || mainClass.length() == 0) {\n+            isValid = false;\n+        }\n+\n+        for (var launcher : launcherInfos) {\n+            if (\"\".equals(launcher.getName())) {\n+                isValid = false;\n+            }\n+        }\n+\n+        if (signedStr == null ||\n+                !(\"true\".equals(signedStr) || \"false\".equals(signedStr))) {\n+            isValid = false;\n+        }\n+\n+        if (appStoreStr == null ||\n+                !(\"true\".equals(appStoreStr) || \"false\".equals(appStoreStr))) {\n+            isValid = false;\n+        }\n+\n+        if (!isValid) {\n+            throw new RuntimeException(MessageFormat.format(I18N.getString(\n+                \"error.invalid-app-image\"), appImageDir));\n+        }\n+\n@@ -124,4 +157,0 @@\n-    void verifyCompatible() throws ConfigException {\n-        \/\/ Just do nothing for now.\n-    }\n-\n@@ -192,1 +221,1 @@\n-    static AppImageFile load(Path appImageDir) throws IOException {\n+    static AppImageFile load(Path appImageDir) {\n@@ -200,4 +229,0 @@\n-            if (mainLauncher == null) {\n-                \/\/ No main launcher, this is fatal.\n-                return new AppImageFile();\n-            }\n@@ -207,4 +232,0 @@\n-            if (mainClass == null) {\n-                \/\/ No main class, this is fatal.\n-                return new AppImageFile();\n-            }\n@@ -234,1 +255,1 @@\n-            AppImageFile file = new AppImageFile(mainLauncher, mainClass,\n+            return new AppImageFile(appImageDir, mainLauncher, mainClass,\n@@ -236,4 +257,0 @@\n-            if (!file.isValid()) {\n-                file = new AppImageFile();\n-            }\n-            return file;\n@@ -243,0 +260,6 @@\n+        } catch (NoSuchFileException nsfe) {\n+            \/\/ non jpackage generated app-image (no app\/.jpackage.xml)\n+            throw new RuntimeException(MessageFormat.format(I18N.getString(\n+                    \"error.foreign-app-image\"), appImageDir));\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(ioe);\n@@ -278,5 +301,3 @@\n-            try {\n-                AppImageFile appImageInfo = AppImageFile.load(appImageDir);\n-                if (appImageInfo != null) {\n-                    launchers.add(new LauncherInfo(\n-                            appImageInfo.getLauncherName(), params));\n+            AppImageFile appImageInfo = AppImageFile.load(appImageDir);\n+            launchers.add(new LauncherInfo(\n+                    appImageInfo.getLauncherName(), params));\n@@ -284,11 +305,1 @@\n-                    return launchers;\n-                }\n-            } catch (NoSuchFileException nsfe) {\n-                \/\/ non jpackage generated app-image (no app\/.jpackage.xml)\n-                Log.info(MessageFormat.format(I18N.getString(\n-                        \"warning.foreign-app-image\"), appImageDir));\n-            } catch (IOException ioe) {\n-                Log.verbose(ioe);\n-                Log.info(MessageFormat.format(I18N.getString(\n-                        \"warning.invalid-app-image\"), appImageDir));\n-            }\n+            return launchers;\n@@ -305,7 +316,1 @@\n-        try {\n-            return AppImageFile.load(appImageDir).getLauncherName();\n-        } catch (IOException ioe) {\n-            Log.verbose(MessageFormat.format(I18N.getString(\n-                    \"warning.foreign-app-image\"), appImageDir));\n-            return null;\n-        }\n+        return AppImageFile.load(appImageDir).getLauncherName();\n@@ -315,7 +320,1 @@\n-        try {\n-            return AppImageFile.load(appImageDir).getMainClass();\n-        } catch (IOException ioe) {\n-            Log.verbose(MessageFormat.format(I18N.getString(\n-                    \"warning.foreign-app-image\"), appImageDir));\n-            return null;\n-        }\n+        return AppImageFile.load(appImageDir).getMainClass();\n@@ -335,1 +334,1 @@\n-        return \"1.0\";\n+        return System.getProperty(\"java.version\");\n@@ -342,22 +341,0 @@\n-    private boolean isValid() {\n-        if (launcherName == null || launcherName.length() == 0) {\n-            return false;\n-        }\n-\n-        for (var launcher : addLauncherInfos) {\n-            if (\"\".equals(launcher.getName())) {\n-                return false;\n-            }\n-        }\n-\n-        if (!Objects.equals(getVersion(), creatorVersion)) {\n-            return false;\n-        }\n-\n-        if (!Objects.equals(getPlatform(), creatorPlatform)) {\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":54,"deletions":77,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -534,6 +534,2 @@\n-                    try {\n-                        return AppImageFile.load(getPredefinedAppImage(params))\n-                                .isAppStore();\n-                    } catch (IOException ex) {\n-                        return false;\n-                    }\n+                    return AppImageFile.load(getPredefinedAppImage(params))\n+                            .isAppStore();\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,2 +80,3 @@\n-warning.foreign-app-image=Warning: app-image dir ({0}) not generated by jpackage.\n-warning.invalid-app-image=Warning: cannot parse .jpackage.xml in app-image dir ({0})\n+\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n+error.invalid-app-image=Error: app-image dir ({0}) generated by another jpackage version or malformed .jpackage.xml\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,2 +78,3 @@\n-warning.foreign-app-image=Warnung: app-image-Verzeichnis ({0}) wurde von jpackage nicht generiert.\n-warning.invalid-app-image=Warnung: .jpackage.xml kann in app-image-Verzeichnis ({0}) nicht geparst werden\n+\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n+error.invalid-app-image=Error: app-image dir ({0}) generated by another jpackage version or malformed .jpackage.xml\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_de.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,2 +78,3 @@\n-warning.foreign-app-image=\\u8B66\\u544A: app-image\\u30C7\\u30A3\\u30EC\\u30AF\\u30C8\\u30EA({0})\\u306Fjpackage\\u3067\\u751F\\u6210\\u3055\\u308C\\u307E\\u305B\\u3093\\u3002\n-warning.invalid-app-image=\\u8B66\\u544A: app-image\\u30C7\\u30A3\\u30EC\\u30AF\\u30C8\\u30EA({0})\\u306E.jpackage.xml\\u3092\\u89E3\\u6790\\u3067\\u304D\\u307E\\u305B\\u3093\n+\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n+error.invalid-app-image=Error: app-image dir ({0}) generated by another jpackage version or malformed .jpackage.xml\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_ja.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -78,2 +78,3 @@\n-warning.foreign-app-image=\\u8B66\\u544A\\uFF1Ajpackage \\u672A\\u751F\\u6210 app-image \\u76EE\\u5F55 ({0})\\u3002\n-warning.invalid-app-image=\\u8B66\\u544A\\uFF1A\\u65E0\\u6CD5\\u89E3\\u6790 app-image \\u76EE\\u5F55 ({0}) \\u4E2D\\u7684 .jpackage.xml\n+\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n+error.invalid-app-image=Error: app-image dir ({0}) generated by another jpackage version or malformed .jpackage.xml\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_zh_CN.properties","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import jdk.jpackage.internal.IOUtils;\n@@ -301,0 +302,51 @@\n+    public void createJPackageXMLFile(String mainLauncher, String mainClass)\n+            throws IOException {\n+        String appImage = getArgumentValue(\"--app-image\");\n+        if (appImage == null) {\n+            throw new RuntimeException(\"Error: --app-image expected\");\n+        }\n+\n+        final String version = System.getProperty(\"java.version\");\n+        final String platform;\n+\n+        if (TKit.isWindows()) {\n+            platform = \"windows\";\n+        } else if (TKit.isLinux()) {\n+            platform = \"linux\";\n+        } else if (TKit.isOSX()) {\n+            platform = \"macOS\";\n+        } else {\n+            platform = \"unknown\";\n+        }\n+\n+        ApplicationLayout layout = ApplicationLayout.platformAppImage();\n+        Path jpackageXMLFile = layout.resolveAt(Path.of(appImage))\n+                .appDirectory().resolve(\".jpackage.xml\");\n+\n+        IOUtils.createXml(jpackageXMLFile, xml -> {\n+                xml.writeStartElement(\"jpackage-state\");\n+                xml.writeAttribute(\"version\", version);\n+                xml.writeAttribute(\"platform\", platform);\n+\n+                xml.writeStartElement(\"app-version\");\n+                xml.writeCharacters(\"1.0\");\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"main-launcher\");\n+                xml.writeCharacters(mainLauncher);\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"main-class\");\n+                xml.writeCharacters(mainClass);\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"signed\");\n+                xml.writeCharacters(\"false\");\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"app-store\");\n+                xml.writeCharacters(\"false\");\n+                xml.writeEndElement();\n+            });\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import org.junit.function.ThrowingRunnable;\n@@ -77,4 +78,4 @@\n-        assertInvalid(createFromXml(\"<foo\/>\"));\n-        assertInvalid(createFromXml(\"<jpackage-state\/>\"));\n-        assertInvalid(createFromXml(JPACKAGE_STATE_OPEN, \"<\/jpackage-state>\"));\n-        assertInvalid(createFromXml(\n+        assertInvalid(() -> createFromXml(\"<foo\/>\"));\n+        assertInvalid(() -> createFromXml(\"<jpackage-state\/>\"));\n+        assertInvalid(() -> createFromXml(JPACKAGE_STATE_OPEN, \"<\/jpackage-state>\"));\n+        assertInvalid(() -> createFromXml(\n@@ -84,1 +85,1 @@\n-        assertInvalid(createFromXml(\n+        assertInvalid(() -> createFromXml(\n@@ -89,1 +90,1 @@\n-        assertInvalid(createFromXml(\n+        assertInvalid(() -> createFromXml(\n@@ -102,0 +103,2 @@\n+                    \"<signed>false<\/signed>\",\n+                    \"<app-store>false<\/app-store>\",\n@@ -109,0 +112,2 @@\n+                    \"<signed>false<\/signed>\",\n+                    \"<app-store>false<\/app-store>\",\n@@ -115,0 +120,2 @@\n+                    \"<signed>false<\/signed>\",\n+                    \"<app-store>false<\/app-store>\",\n@@ -202,3 +209,4 @@\n-    private void assertInvalid(AppImageFile file) {\n-        Assert.assertNull(file.getLauncherName());\n-        Assert.assertNull(file.getAddLaunchers());\n+    private void assertInvalid(ThrowingRunnable action) {\n+        Exception ex = Assert.assertThrows(RuntimeException.class, action);\n+        Assert.assertTrue(ex instanceof RuntimeException);\n+        Assert.assertTrue(ex.getMessage().contains(\"malformed .jpackage.xml\"));\n","filename":"test\/jdk\/tools\/jpackage\/junit\/jdk\/jpackage\/internal\/AppImageFileTest.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,1 @@\n+            cmd.createJPackageXMLFile(\"EmptyAppImagePackageTest\", \"Hello\");\n@@ -104,0 +105,1 @@\n+\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppImagePackageTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+        cmd.createJPackageXMLFile(\"PredefinedAppImageErrorTest\", \"Hello\");\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/PredefinedAppImageErrorTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}