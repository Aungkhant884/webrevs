{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import jdk.jpackage.internal.IOUtils;\n@@ -325,1 +326,1 @@\n-        TKit.createXml(jpackageXMLFile, xml -> {\n+        IOUtils.createXml(jpackageXMLFile, xml -> {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.io.Writer;\n-import java.lang.reflect.Proxy;\n@@ -33,2 +31,0 @@\n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.Method;\n@@ -54,1 +50,0 @@\n-import java.util.HashMap;\n@@ -66,3 +61,0 @@\n-import javax.xml.stream.XMLOutputFactory;\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n@@ -244,89 +236,0 @@\n-    @FunctionalInterface\n-    public static interface XmlConsumer {\n-        void accept(XMLStreamWriter xml) throws IOException, XMLStreamException;\n-    }\n-\n-    private static class PrettyPrintHandler implements InvocationHandler {\n-\n-        PrettyPrintHandler(XMLStreamWriter target) {\n-            this.target = target;\n-        }\n-\n-        @Override\n-        public Object invoke(Object proxy, Method method, Object[] args) throws\n-                Throwable {\n-            switch (method.getName()) {\n-                case \"writeStartElement\":\n-                    \/\/ update state of parent node\n-                    if (depth > 0) {\n-                        hasChildElement.put(depth - 1, true);\n-                    }\n-                    \/\/ reset state of current node\n-                    hasChildElement.put(depth, false);\n-                    \/\/ indent for current depth\n-                    target.writeCharacters(EOL);\n-                    target.writeCharacters(repeat(depth, INDENT));\n-                    depth++;\n-                    break;\n-                case \"writeEndElement\":\n-                    depth--;\n-                    if (hasChildElement.get(depth) == true) {\n-                        target.writeCharacters(EOL);\n-                        target.writeCharacters(repeat(depth, INDENT));\n-                    }\n-                    break;\n-                case \"writeProcessingInstruction\":\n-                case \"writeEmptyElement\":\n-                    \/\/ update state of parent node\n-                    if (depth > 0) {\n-                        hasChildElement.put(depth - 1, true);\n-                    }\n-                    \/\/ indent for current depth\n-                    target.writeCharacters(EOL);\n-                    target.writeCharacters(repeat(depth, INDENT));\n-                    break;\n-                default:\n-                    break;\n-            }\n-            method.invoke(target, args);\n-            return null;\n-        }\n-\n-        private static String repeat(int d, String s) {\n-            StringBuilder sb = new StringBuilder();\n-            while (d-- > 0) {\n-                sb.append(s);\n-            }\n-            return sb.toString();\n-        }\n-\n-        private final XMLStreamWriter target;\n-        private int depth = 0;\n-        private final Map<Integer, Boolean> hasChildElement = new HashMap<>();\n-        private static final String INDENT = \"  \";\n-        private static final String EOL = \"\\n\";\n-    }\n-\n-    public static void createXml(Path dstFile, XmlConsumer xmlConsumer) throws\n-            IOException {\n-        XMLOutputFactory xmlFactory = XMLOutputFactory.newInstance();\n-        Files.createDirectories(dstFile.getParent());\n-        try (Writer w = Files.newBufferedWriter(dstFile)) {\n-            \/\/ Wrap with pretty print proxy\n-            XMLStreamWriter xml = (XMLStreamWriter) Proxy.newProxyInstance(\n-                    XMLStreamWriter.class.getClassLoader(), new Class<?>[]{\n-                XMLStreamWriter.class}, new PrettyPrintHandler(\n-                    xmlFactory.createXMLStreamWriter(w)));\n-\n-            xml.writeStartDocument();\n-            xmlConsumer.accept(xml);\n-            xml.writeEndDocument();\n-            xml.flush();\n-            xml.close();\n-        } catch (XMLStreamException ex) {\n-            throw new IOException(ex);\n-        } catch (IOException ex) {\n-            throw ex;\n-        }\n-    }\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"modified"}]}