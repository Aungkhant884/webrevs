{"files":[{"patch":"@@ -67,2 +67,2 @@\n-    private final String signedStr;\n-    private final String appStoreStr;\n+    private final boolean signed;\n+    private final boolean appStore;\n@@ -76,1 +76,1 @@\n-    private AppImageFile(String launcherName, String mainClass,\n+    private AppImageFile(Path appImageDir, String launcherName, String mainClass,\n@@ -79,0 +79,38 @@\n+        boolean isValid = true;\n+        if (!Objects.equals(getVersion(), creatorVersion)) {\n+            isValid = false;\n+        }\n+\n+        if (!Objects.equals(getPlatform(), creatorPlatform)) {\n+            isValid = false;\n+        }\n+\n+        if (launcherName == null || launcherName.length() == 0) {\n+            isValid = false;\n+        }\n+\n+        if (mainClass == null || mainClass.length() == 0) {\n+            isValid = false;\n+        }\n+\n+        for (var launcher : launcherInfos) {\n+            if (\"\".equals(launcher.getName())) {\n+                isValid = false;\n+            }\n+        }\n+\n+        if (signedStr == null ||\n+                !(\"true\".equals(signedStr) || \"false\".equals(signedStr))) {\n+            isValid = false;\n+        }\n+\n+        if (appStoreStr == null ||\n+                !(\"true\".equals(appStoreStr) || \"false\".equals(appStoreStr))) {\n+            isValid = false;\n+        }\n+\n+        if (!isValid) {\n+            throw new RuntimeException(MessageFormat.format(I18N.getString(\n+                \"error.invalid-app-image\"), appImageDir));\n+        }\n+\n@@ -84,2 +122,2 @@\n-        this.signedStr = signedStr;\n-        this.appStoreStr = appStoreStr;\n+        this.signed = \"true\".equals(signedStr);\n+        this.appStore = \"true\".equals(appStoreStr);\n@@ -112,1 +150,1 @@\n-        return \"true\".equals(signedStr);\n+        return signed;\n@@ -116,1 +154,1 @@\n-        return \"true\".equals(appStoreStr);\n+        return appStore;\n@@ -217,1 +255,1 @@\n-            AppImageFile file = new AppImageFile(mainLauncher, mainClass,\n+            return new AppImageFile(appImageDir, mainLauncher, mainClass,\n@@ -219,5 +257,0 @@\n-            if (!file.isValid()) {\n-                throw new RuntimeException(MessageFormat.format(I18N.getString(\n-                        \"error.invalid-app-image\"), appImageDir));\n-            }\n-            return file;\n@@ -308,36 +341,0 @@\n-    private boolean isValid() {\n-        if (!Objects.equals(getVersion(), creatorVersion)) {\n-            return false;\n-        }\n-\n-        if (!Objects.equals(getPlatform(), creatorPlatform)) {\n-            return false;\n-        }\n-\n-        if (launcherName == null || launcherName.length() == 0) {\n-            return false;\n-        }\n-\n-        if (mainClass == null || mainClass.length() == 0) {\n-            return false;\n-        }\n-\n-        for (var launcher : addLauncherInfos) {\n-            if (\"\".equals(launcher.getName())) {\n-                return false;\n-            }\n-        }\n-\n-        if (signedStr == null ||\n-                !(\"true\".equals(signedStr) || \"false\".equals(signedStr))) {\n-            return false;\n-        }\n-\n-        if (appStoreStr == null ||\n-                !(\"true\".equals(appStoreStr) || \"false\".equals(appStoreStr))) {\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":46,"deletions":49,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-error.foreign-app-image=Error: app-image dir ({0}) not generated by jpackage. Missing .jpackage.xml.\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-error.foreign-app-image=Error: app-image dir ({0}) not generated by jpackage. Missing .jpackage.xml.\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_de.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-error.foreign-app-image=Error: app-image dir ({0}) not generated by jpackage. Missing .jpackage.xml.\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-error.foreign-app-image=Error: app-image dir ({0}) not generated by jpackage. Missing .jpackage.xml.\n+error.foreign-app-image=Error: Missing .jpackage.xml file in app-image dir ({0})\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/resources\/MainResources_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -301,0 +301,51 @@\n+    public void createJPackageXMLFile(String mainLauncher, String mainClass)\n+            throws IOException {\n+        String appImage = getArgumentValue(\"--app-image\");\n+        if (appImage == null) {\n+            throw new RuntimeException(\"Error: --app-image expected\");\n+        }\n+\n+        final String version = System.getProperty(\"java.version\");\n+        final String platform;\n+\n+        if (TKit.isWindows()) {\n+            platform = \"windows\";\n+        } else if (TKit.isLinux()) {\n+            platform = \"linux\";\n+        } else if (TKit.isOSX()) {\n+            platform = \"macOS\";\n+        } else {\n+            platform = \"unknown\";\n+        }\n+\n+        ApplicationLayout layout = ApplicationLayout.platformAppImage();\n+        Path jpackageXMLFile = layout.resolveAt(Path.of(appImage))\n+                .appDirectory().resolve(\".jpackage.xml\");\n+\n+        TKit.createXml(jpackageXMLFile, xml -> {\n+                xml.writeStartElement(\"jpackage-state\");\n+                xml.writeAttribute(\"version\", version);\n+                xml.writeAttribute(\"platform\", platform);\n+\n+                xml.writeStartElement(\"app-version\");\n+                xml.writeCharacters(\"1.0\");\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"main-launcher\");\n+                xml.writeCharacters(mainLauncher);\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"main-class\");\n+                xml.writeCharacters(mainClass);\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"signed\");\n+                xml.writeCharacters(\"false\");\n+                xml.writeEndElement();\n+\n+                xml.writeStartElement(\"app-store\");\n+                xml.writeCharacters(\"false\");\n+                xml.writeEndElement();\n+            });\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.io.Writer;\n+import java.lang.reflect.Proxy;\n@@ -31,0 +33,2 @@\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n@@ -50,0 +54,1 @@\n+import java.util.HashMap;\n@@ -61,0 +66,3 @@\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n@@ -236,17 +244,9 @@\n-    public static void createJPackageXMLFile(Path appImageDir,\n-            String mainLauncher, String mainClass) throws IOException {\n-        String version = System.getProperty(\"java.version\");\n-        String platform = \"\";\n-        Path appDir = appImageDir;\n-        if (TKit.isWindows()) {\n-            platform = \"windows\";\n-            appDir = Files.createDirectories(\n-                         appImageDir.resolve(\"app\"));\n-        } else if (TKit.isLinux()) {\n-            platform = \"linux\";\n-            appDir = Files.createDirectories(\n-                         appImageDir.resolve(\"lib\").resolve(\"app\"));\n-        } else if (TKit.isOSX()) {\n-            platform = \"macOS\";\n-            appDir = Files.createDirectories(\n-                         appImageDir.resolve(\"Contents\").resolve(\"app\"));\n+    @FunctionalInterface\n+    public static interface XmlConsumer {\n+        void accept(XMLStreamWriter xml) throws IOException, XMLStreamException;\n+    }\n+\n+    private static class PrettyPrintHandler implements InvocationHandler {\n+\n+        PrettyPrintHandler(XMLStreamWriter target) {\n+            this.target = target;\n@@ -255,16 +255,76 @@\n-        TKit.createTextFile(appDir.resolve(\".jpackage.xml\"), List.of(\n-                            \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\",\n-                            String.format(\n-                                \"<jpackage-state platform=\\\"%s\\\" version=\\\"%s\\\">\",\n-                                platform, version),\n-                            \"<app-version>1.0<\/app-version>\",\n-                            String.format(\n-                                \"<main-launcher>%s<\/main-launcher>\",\n-                                mainLauncher),\n-                            String.format(\n-                                \"<main-class>%s<\/main-class>\",\n-                                mainClass),\n-                            \"<signed>false<\/signed>\",\n-                            \"<app-store>false<\/app-store>\",\n-                            \"<\/jpackage-state>\"\n-            ));\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws\n+                Throwable {\n+            switch (method.getName()) {\n+                case \"writeStartElement\":\n+                    \/\/ update state of parent node\n+                    if (depth > 0) {\n+                        hasChildElement.put(depth - 1, true);\n+                    }\n+                    \/\/ reset state of current node\n+                    hasChildElement.put(depth, false);\n+                    \/\/ indent for current depth\n+                    target.writeCharacters(EOL);\n+                    target.writeCharacters(repeat(depth, INDENT));\n+                    depth++;\n+                    break;\n+                case \"writeEndElement\":\n+                    depth--;\n+                    if (hasChildElement.get(depth) == true) {\n+                        target.writeCharacters(EOL);\n+                        target.writeCharacters(repeat(depth, INDENT));\n+                    }\n+                    break;\n+                case \"writeProcessingInstruction\":\n+                case \"writeEmptyElement\":\n+                    \/\/ update state of parent node\n+                    if (depth > 0) {\n+                        hasChildElement.put(depth - 1, true);\n+                    }\n+                    \/\/ indent for current depth\n+                    target.writeCharacters(EOL);\n+                    target.writeCharacters(repeat(depth, INDENT));\n+                    break;\n+                default:\n+                    break;\n+            }\n+            method.invoke(target, args);\n+            return null;\n+        }\n+\n+        private static String repeat(int d, String s) {\n+            StringBuilder sb = new StringBuilder();\n+            while (d-- > 0) {\n+                sb.append(s);\n+            }\n+            return sb.toString();\n+        }\n+\n+        private final XMLStreamWriter target;\n+        private int depth = 0;\n+        private final Map<Integer, Boolean> hasChildElement = new HashMap<>();\n+        private static final String INDENT = \"  \";\n+        private static final String EOL = \"\\n\";\n+    }\n+\n+    public static void createXml(Path dstFile, XmlConsumer xmlConsumer) throws\n+            IOException {\n+        XMLOutputFactory xmlFactory = XMLOutputFactory.newInstance();\n+        Files.createDirectories(dstFile.getParent());\n+        try (Writer w = Files.newBufferedWriter(dstFile)) {\n+            \/\/ Wrap with pretty print proxy\n+            XMLStreamWriter xml = (XMLStreamWriter) Proxy.newProxyInstance(\n+                    XMLStreamWriter.class.getClassLoader(), new Class<?>[]{\n+                XMLStreamWriter.class}, new PrettyPrintHandler(\n+                    xmlFactory.createXMLStreamWriter(w)));\n+\n+            xml.writeStartDocument();\n+            xmlConsumer.accept(xml);\n+            xml.writeEndDocument();\n+            xml.flush();\n+            xml.close();\n+        } catch (XMLStreamException ex) {\n+            throw new IOException(ex);\n+        } catch (IOException ex) {\n+            throw ex;\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":93,"deletions":33,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -77,2 +77,0 @@\n-        TKit.createJPackageXMLFile(appImageDir,\n-                \"EmptyAppImagePackageTest\", \"Hello\");\n@@ -92,0 +90,1 @@\n+            cmd.createJPackageXMLFile(\"EmptyAppImagePackageTest\", \"Hello\");\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppImagePackageTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -111,3 +111,0 @@\n-        TKit.createJPackageXMLFile(dummyAppFolder,\n-                \"PredefinedAppImageErrorTest\", \"Hello\");\n-\n@@ -119,0 +116,1 @@\n+        cmd.createJPackageXMLFile(\"PredefinedAppImageErrorTest\", \"Hello\");\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/PredefinedAppImageErrorTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}