{"files":[{"patch":"@@ -428,5 +428,0 @@\n-                    String line = sequence.toString();\n-                    String strippedLine = line.strip();\n-                    int idx = line.indexOf(strippedLine);\n-                    assert idx >= 0; \/\/ because the stripped line is a substring of the line being stripped\n-                    Text whitespace = Text.of(utils.normalizeNewlines(line.substring(0, idx)));\n@@ -436,6 +431,1 @@\n-                        \/\/ If the leading whitespace is not excluded from the link,\n-                        \/\/ browsers might exhibit unwanted behavior. For example, a\n-                        \/\/ browser might display hand-click cursor while user hovers\n-                        \/\/ over that whitespace portion of the line; or use\n-                        \/\/ underline decoration.\n-                        c = new ContentBuilder(whitespace, htmlWriter.linkToContent(element, e, t, strippedLine));\n+                        c = new ContentBuilder(htmlWriter.linkToContent(element, e, t, sequence.toString()));\n@@ -445,1 +435,0 @@\n-                    \/\/ We don't care about trailing whitespace.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TagletWriterImpl.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8266666\n+ * @bug 8266666 8281969\n@@ -183,1 +183,12 @@\n-                ));\n+                ),\n+                new TestCase(\n+                        \"\"\"\n+                                First line\n+                                  Second line \/\/ @link substring=\" \" target=\"java.lang.System#out\"\n+                                \"\"\",\n+                        replace(\"\"\"\n+                                First line\n+                                link(  )Secondlink( )line\n+                                \"\"\", \"link\\\\((.+?)\\\\)\", r -> link(true, \"java.lang.System#out\", r.group(1)))\n+                )\n+        );\n@@ -578,1 +589,1 @@\n-                                 link(Third line)\n+                                link( Third line)\n@@ -729,0 +740,8 @@\n+        \/\/ Caveat: a label used in snippet's @link tag can start, end, or both,\n+        \/\/ with whitespace. In this regard, snippet's @link differs from\n+        \/\/ {@link} and {@linkplain} Standard doclet tags, which trim whitespace\n+        \/\/ from labels. In particular, {@link} and {@linkplain} treat\n+        \/\/ blank labels as not set, whereas snippet's @link does not.\n+\n+        String LABEL_PLACEHOLDER = \"label\";\n+\n@@ -732,1 +751,1 @@\n-                \"\"\".formatted(targetReference, content);\n+                \"\"\".formatted(targetReference, LABEL_PLACEHOLDER);\n@@ -853,2 +872,2 @@\n-            Matcher m = Pattern.compile(\"(?is)<a href=\\\"[^<>]*\\\" title=\\\"[^<>]*\\\" class=\\\"[^<>]*\\\"><code>\"\n-                    + content + \"<\/code><\/a>\").matcher(output);\n+            Matcher m = Pattern.compile(\"(?is)(<a href=\\\"[^<>]*\\\" title=\\\"[^<>]*\\\" class=\\\"[^<>]*\\\"><code>)\"\n+                    +  LABEL_PLACEHOLDER + \"(<\/code><\/a>)\").matcher(output);\n@@ -858,1 +877,1 @@\n-            return m.group(0);\n+            return m.group(1) + content + m.group(2);\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/TestSnippetMarkup.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"}]}