{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2172,1 +2172,4 @@\n-      return os::thread_cpu_time((Thread*) java_thread, user_sys_cpu_time != 0);\n+      oop thread_obj = java_thread->threadObj();\n+      if (thread_obj != NULL && !thread_obj->is_a(vmClasses::BasicVirtualThread_klass())) {\n+        return os::thread_cpu_time((Thread*) java_thread, user_sys_cpu_time != 0);\n+      }\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8284161\n+ * @bug 8284161 8290562\n@@ -66,2 +66,2 @@\n-        runInVirtualThread(() -> {\n-            long currentTid = Thread.currentThread().getId();\n+        Thread vthread = Thread.startVirtualThread(LockSupport::park);\n+        try {\n@@ -69,3 +69,11 @@\n-            boolean found = Arrays.stream(tids).anyMatch(tid -> tid == currentTid);\n-            assertFalse(found);\n-        });\n+\n+            \/\/ current thread should be included\n+            long currentTid = Thread.currentThread().threadId();\n+            assertTrue(Arrays.stream(tids).anyMatch(tid -> tid == currentTid));\n+\n+            \/\/ virtual thread should not be included\n+            long vtid = vthread.threadId();\n+            assertFalse(Arrays.stream(tids).anyMatch(tid -> tid == vtid));\n+        } finally {\n+            LockSupport.unpark(vthread);\n+        }\n@@ -75,1 +83,1 @@\n-     * Test that ThreadMXBean::getThreadInfo returns null for a virual thread.\n+     * Test that ThreadMXBean.getThreadInfo(long) returns null for a virtual thread.\n@@ -79,0 +87,16 @@\n+        Thread vthread = Thread.startVirtualThread(LockSupport::park);\n+        try {\n+            long tid = vthread.threadId();\n+            ThreadInfo info = ManagementFactory.getThreadMXBean().getThreadInfo(tid);\n+            assertTrue(info == null);\n+        } finally {\n+            LockSupport.unpark(vthread);\n+        }\n+    }\n+\n+    \/**\n+     * Test that ThreadMXBean.getThreadInfo(long) returns null when invoked by a virtual\n+     * thread with its own thread id.\n+     *\/\n+    @Test\n+    public void testGetThreadInfo2() throws Exception {\n@@ -80,1 +104,1 @@\n-            long tid = Thread.currentThread().getId();\n+            long tid = Thread.currentThread().threadId();\n@@ -87,2 +111,2 @@\n-     * Test that ThreadMXBean::getThreadInfo on a carrier thread. The stack\n-     * frames of the virtual thread should not be returned.\n+     * Test ThreadMXBean.getThreadInfo(long) with the thread id of a carrier thread.\n+     * The stack frames of the virtual thread should not be returned.\n@@ -91,1 +115,1 @@\n-    public void testGetThreadInfo2() throws Exception {\n+    public void testGetThreadInfo3() throws Exception {\n@@ -132,1 +156,36 @@\n-     * Test that getThreadCpuTime returns -1 for a virual thread..\n+     * Test that ThreadMXBean.getThreadInfo(long[]) returns a null ThreadInfo for\n+     * elements that correspond to a virtual thread.\n+     *\/\n+    @Test\n+    public void testGetThreadInfo4() throws Exception {\n+        Thread vthread = Thread.startVirtualThread(LockSupport::park);\n+        try {\n+            long tid0 = Thread.currentThread().threadId();\n+            long tid1 = vthread.threadId();\n+            long[] tids = new long[] { tid0, tid1 };\n+            ThreadInfo[] infos = ManagementFactory.getThreadMXBean().getThreadInfo(tids);\n+            assertTrue(infos[0].getThreadId() == tid0);\n+            assertTrue(infos[1] == null);\n+        } finally {\n+            LockSupport.unpark(vthread);\n+        }\n+    }\n+\n+    \/**\n+     * Test that ThreadMXBean.getThreadCpuTime(long) returns -1 for a virtual thread.\n+     *\/\n+    @Test\n+    public void testGetThreadCpuTime1() {\n+        Thread vthread = Thread.startVirtualThread(LockSupport::park);\n+        try {\n+            long tid = vthread.threadId();\n+            long cpuTime = ManagementFactory.getThreadMXBean().getThreadCpuTime(tid);\n+            assertTrue(cpuTime == -1L);\n+        } finally {\n+            LockSupport.unpark(vthread);\n+        }\n+    }\n+\n+    \/**\n+     * Test that ThreadMXBean.getThreadCpuTime(long) returns -1 when invoked by a\n+     * virtual thread with its own thread id.\n@@ -135,1 +194,1 @@\n-    public void testGetThreadCpuTime() throws Exception {\n+    public void testGetThreadCpuTime2() throws Exception {\n@@ -137,1 +196,1 @@\n-            long tid = Thread.currentThread().getId();\n+            long tid = Thread.currentThread().threadId();\n@@ -144,1 +203,1 @@\n-     * Test that getThreadUserTime returns -1 for a virual thread.\n+     * Test that ThreadMXBean.getThreadUserTime(long) returns -1 for a virtual thread.\n@@ -147,1 +206,17 @@\n-    public void testGetThreadUserTime() throws Exception {\n+    public void testGetThreadUserTime1() {\n+        Thread vthread = Thread.startVirtualThread(LockSupport::park);\n+        try {\n+            long tid = vthread.threadId();\n+            long userTime = ManagementFactory.getThreadMXBean().getThreadUserTime(tid);\n+            assertTrue(userTime == -1L);\n+        } finally {\n+            LockSupport.unpark(vthread);\n+        }\n+    }\n+\n+    \/**\n+     * Test that ThreadMXBean.getThreadUserTime(long) returns -1 when invoked by a\n+     * virtual thread with its own thread id.\n+     *\/\n+    @Test\n+    public void testGetThreadUserTime2() throws Exception {\n@@ -149,3 +224,3 @@\n-            long tid = Thread.currentThread().getId();\n-            long cpuTime = ManagementFactory.getThreadMXBean().getThreadUserTime(tid);\n-            assertTrue(cpuTime == -1L);\n+            long tid = Thread.currentThread().threadId();\n+            long userTime = ManagementFactory.getThreadMXBean().getThreadUserTime(tid);\n+            assertTrue(userTime == -1L);\n","filename":"test\/jdk\/java\/lang\/management\/ThreadMXBean\/VirtualThreads.java","additions":94,"deletions":19,"binary":false,"changes":113,"status":"modified"}]}