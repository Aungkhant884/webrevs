{"files":[{"patch":"@@ -263,2 +263,2 @@\n-        \/\/ CDS does not handle disableEagerInitialization.\n-        if (!disableEagerInitialization) {\n+        \/\/ CDS does not handle disableEagerInitialization or useImplMethodHandle\n+        if (!disableEagerInitialization && !useImplMethodHandle) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8290417\n+ * @summary CDS cannot archive lambda proxy with useImplMethodHandle\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build pkg1.BaseWithProtectedMethod\n+ * @build pkg2.Child\n+ * @build LambdaWithUseImplMethodHandleApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar test.jar pkg1.BaseWithProtectedMethod pkg2.Child LambdaWithUseImplMethodHandleApp\n+ * @run driver LambdaWithUseImplMethodHandle\n+ *\/\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class LambdaWithUseImplMethodHandle {\n+\n+    \/\/ See pkg2\/Child.jcod for details about the condition that triggers JDK-8290417\n+    public static void main(String[] args) throws Exception {\n+        String appJar = ClassFileInstaller.getJarPath(\"test.jar\");\n+        String mainClass = \"LambdaWithUseImplMethodHandleApp\";\n+        String expectedMsg = \"Called BaseWithProtectedMethod::protectedMethod\";\n+        String classList = \"LambdaWithUseImplMethodHandle.list\";\n+        String archiveName = TestCommon.getNewArchiveName();\n+\n+        \/\/ dump class list\n+        CDSTestUtils.dumpClassList(classList, \"-cp\", appJar, mainClass);\n+\n+        \/\/ create archive with the class list\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n+                       \"-cp\", appJar)\n+            .setArchiveName(archiveName);\n+        CDSTestUtils.createArchiveAndCheck(opts);\n+\n+        \/\/ run with archive\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar)\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        CDSTestUtils.run(runOpts)\n+            .assertNormalExit(expectedMsg);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithUseImplMethodHandle.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8290417\n+ * @summary CDS cannot archive lambda proxy with useImplMethodHandle\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build pkg1.BaseWithProtectedMethod\n+ * @build pkg2.Child\n+ * @build LambdaWithUseImplMethodHandleApp\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar test.jar pkg1.BaseWithProtectedMethod pkg2.Child LambdaWithUseImplMethodHandleApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. DynamicLambdaWithUseImplMethodHandle\n+ *\/\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class DynamicLambdaWithUseImplMethodHandle extends DynamicArchiveTestBase {\n+\n+    \/\/ See pkg2\/Child.jcod for details about the condition that triggers JDK-8290417\n+    public static void main(String[] args) throws Exception {\n+        runTest(DynamicLambdaWithUseImplMethodHandle::test);\n+    }\n+\n+    static void test() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+\n+        String appJar = ClassFileInstaller.getJarPath(\"test.jar\");\n+        String mainClass = \"LambdaWithUseImplMethodHandleApp\";\n+        String expectedMsg = \"Called BaseWithProtectedMethod::protectedMethod\";\n+\n+        dump(topArchiveName,\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(expectedMsg);\n+                });\n+        run(topArchiveName,\n+            \"-Xlog:cds+dynamic=debug,cds=debug\",\n+            \"-cp\", appJar, mainClass)\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(expectedMsg)\n+                          .shouldHaveExitValue(0);\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicLambdaWithUseImplMethodHandle.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+import java.util.Optional;\n+import pkg2.Child;\n+\n+public class LambdaWithUseImplMethodHandleApp {\n+    public static void main(String args[]) {\n+        String name = \"foo\";\n+        Optional<String> opt = Optional.of(name);\n+        (new Child()).test(opt);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/LambdaWithUseImplMethodHandleApp.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package pkg1;\n+\n+public class BaseWithProtectedMethod {\n+    protected void protectedMethod(String s) {\n+        Thread.dumpStack();\n+        System.out.println(\"Called BaseWithProtectedMethod::protectedMethod(\" + s + \")\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/pkg1\/BaseWithProtectedMethod.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,224 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+\n+The following jcod code is generated by\n+\n+cd hotspot\/jtreg\/runtime\/cds\/appcds\n+\n+cat > test-classes\/pkg2\/Child.java << EOF\n+\n+package pkg2;\n+import java.util.Optional;\n+import pkg1.BaseWithProtectedMethod;\n+\n+public class Child extends BaseWithProtectedMethod {\n+    public void test(Optional<String> opt) {\n+        opt.ifPresent(this::protectedMethod);\n+    }\n+}\n+\n+EOF\n+\n+mkdir -p tmp\n+javac8 -g:none -d tmp test-classes\/pkg1\/BaseWithProtectedMethod.java test-classes\/pkg2\/Child.java\n+java -jar ${ASMTOOL} jdec tmp\/pkg2\/Child.class >> test-classes\/pkg2\/Child.jcod\n+rm -f test-classes\/pkg2\/Child.java\n+\n+*\/\n+\n+\n+\/\/ NOTES about JDK-8290417\n+\/\/\n+\/\/ The above Java source file (Child.java) must be compiled with JDK 8 or JDK 11\n+\/\/ in order to trigger JDK-8290417\n+\/\/\n+\/\/ Javac in JDK 17 generates a public method for accessing the protected method\n+\/\/ in the base class. As a result, InnerClassLambdaMetafactory will no generate\n+\/\/ the proxy class in useImplMethodHandle mode.\n+\/\/\n+\/\/ public class pkg2.Child extends pkg1.BaseWithProtectedMethod {\n+\/\/   public pkg2.Child();\n+\/\/     Code:\n+\/\/        0: aload_0\n+\/\/        1: invokespecial #1                  \/\/ Method pkg1\/BaseWithProtectedMethod.\"<init>\":()V\n+\/\/        4: return\n+\/\/\n+\/\/   public void test(java.util.Optional<java.lang.String>);\n+\/\/     Code:\n+\/\/        0: aload_1\n+\/\/        1: aload_0\n+\/\/        2: invokedynamic #7,  0              \/\/ InvokeDynamic #0:accept:(Lpkg2\/Child;)Ljava\/util\/function\/Consumer;\n+\/\/        7: invokevirtual #11                 \/\/ Method java\/util\/Optional.ifPresent:(Ljava\/util\/function\/Consumer;)V\n+\/\/       10: return\n+\/\/\n+\/\/   private static void lambda$test$0(pkg2.Child, java.lang.String);\n+\/\/     Code:\n+\/\/        0: aload_0\n+\/\/        1: aload_1\n+\/\/        2: invokevirtual #17                 \/\/ Method protectedMethod:(Ljava\/lang\/String;)V\n+\/\/        5: return\n+\/\/ }\n+\/\/\n+\/\/ $ java17 -XX:+UnlockDiagnosticVMOptions -XX:+ShowHiddenFrames -cp test-classes LambdaWithUseImplMethodHandleApp\n+\/\/ java.lang.Exception: Stack trace\n+\/\/    at java.base\/java.lang.Thread.dumpStack(Thread.java:1380)\n+\/\/    at pkg1.BaseWithProtectedMethod.protectedMethod(BaseWithProtectedMethod.java:29)\n+\/\/    at pkg2.Child.lambda$test$0(Child.java:8)\n+\/\/    at pkg2.Child$$Lambda$1\/0x0000000800c01000.accept(Unknown Source)\n+\/\/    at java.base\/java.util.Optional.ifPresent(Optional.java:178)\n+\/\/    at pkg2.Child.test(Child.java:8)\n+\/\/    at LambdaWithUseImplMethodHandleApp.main(LambdaWithUseImplMethodHandleApp.java:32)\n+\n+\n+class pkg2\/Child {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  52; \/\/ version\n+  [] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #5 #13; \/\/ #1\n+    InvokeDynamic 0s #19; \/\/ #2\n+    Method #20 #21; \/\/ #3\n+    class #22; \/\/ #4\n+    class #23; \/\/ #5\n+    Utf8 \"<init>\"; \/\/ #6\n+    Utf8 \"()V\"; \/\/ #7\n+    Utf8 \"Code\"; \/\/ #8\n+    Utf8 \"test\"; \/\/ #9\n+    Utf8 \"(Ljava\/util\/Optional;)V\"; \/\/ #10\n+    Utf8 \"Signature\"; \/\/ #11\n+    Utf8 \"(Ljava\/util\/Optional<Ljava\/lang\/String;>;)V\"; \/\/ #12\n+    NameAndType #6 #7; \/\/ #13\n+    Utf8 \"BootstrapMethods\"; \/\/ #14\n+    MethodHandle 6b #24; \/\/ #15\n+    MethodType #25; \/\/ #16\n+    MethodHandle 5b #26; \/\/ #17\n+    MethodType #27; \/\/ #18\n+    NameAndType #28 #29; \/\/ #19\n+    class #30; \/\/ #20\n+    NameAndType #31 #32; \/\/ #21\n+    Utf8 \"pkg2\/Child\"; \/\/ #22\n+    Utf8 \"pkg1\/BaseWithProtectedMethod\"; \/\/ #23\n+    Method #33 #34; \/\/ #24\n+    Utf8 \"(Ljava\/lang\/Object;)V\"; \/\/ #25\n+    Method #5 #35; \/\/ #26\n+    Utf8 \"(Ljava\/lang\/String;)V\"; \/\/ #27\n+    Utf8 \"accept\"; \/\/ #28\n+    Utf8 \"(Lpkg2\/Child;)Ljava\/util\/function\/Consumer;\"; \/\/ #29\n+    Utf8 \"java\/util\/Optional\"; \/\/ #30\n+    Utf8 \"ifPresent\"; \/\/ #31\n+    Utf8 \"(Ljava\/util\/function\/Consumer;)V\"; \/\/ #32\n+    class #36; \/\/ #33\n+    NameAndType #37 #41; \/\/ #34\n+    NameAndType #42 #27; \/\/ #35\n+    Utf8 \"java\/lang\/invoke\/LambdaMetafactory\"; \/\/ #36\n+    Utf8 \"metafactory\"; \/\/ #37\n+    class #44; \/\/ #38\n+    Utf8 \"Lookup\"; \/\/ #39\n+    Utf8 \"InnerClasses\"; \/\/ #40\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/invoke\/MethodType;Ljava\/lang\/invoke\/MethodHandle;Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/CallSite;\"; \/\/ #41\n+    Utf8 \"protectedMethod\"; \/\/ #42\n+    class #45; \/\/ #43\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #44\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #45\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access\n+  #4;\/\/ this_cpx\n+  #5;\/\/ super_cpx\n+\n+  [] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [] { \/\/ Methods\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #6; \/\/ name_index\n+      #7; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#8) { \/\/ Code\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[]{\n+            0x2AB70001B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method\n+      0x0001; \/\/ access\n+      #9; \/\/ name_index\n+      #10; \/\/ descriptor_index\n+      [] { \/\/ Attributes\n+        Attr(#8) { \/\/ Code\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[]{\n+            0x2B2ABA00020000B6;\n+            0x0003B1;\n+          }\n+          [] { \/\/ Traps\n+          } \/\/ end Traps\n+          [] { \/\/ Attributes\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+        ;\n+        Attr(#11) { \/\/ Signature\n+          #12;\n+        } \/\/ end Signature\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [] { \/\/ Attributes\n+    Attr(#40) { \/\/ InnerClasses\n+      [] { \/\/ classes\n+        #38 #43 #39 25;\n+      }\n+    } \/\/ end InnerClasses\n+    ;\n+    Attr(#14) { \/\/ BootstrapMethods\n+      [] { \/\/ bootstrap_methods\n+        {  \/\/  bootstrap_method\n+          #15; \/\/ bootstrap_method_ref\n+          [] { \/\/ bootstrap_arguments\n+            #16;\n+            #17;\n+            #18;\n+          }  \/\/  bootstrap_arguments\n+        }  \/\/  bootstrap_method\n+      }\n+    } \/\/ end BootstrapMethods\n+  } \/\/ Attributes\n+} \/\/ end class pkg2\/Child\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/pkg2\/Child.jcod","additions":224,"deletions":0,"binary":false,"changes":224,"status":"added"}]}