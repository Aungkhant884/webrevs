{"files":[{"patch":"@@ -461,1 +461,5 @@\n-                    newResource(dir, childloc);\n+                    \/\/ if we have already created a resource for this name previously, then don't\n+                    \/\/ recreate it\n+                    if (!nodes.containsKey(childloc.getFullName(true))) {\n+                        newResource(dir, childloc);\n+                    }\n@@ -756,0 +760,1 @@\n+            assert !children.contains(node) : \"Child \" + node + \" already added\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -698,1 +698,0 @@\n-tools\/jlink\/plugins\/CompressorPluginTest.java                   8247407 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.jimage.ImageReader;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+\/**\n+ * @test\n+ * @bug 8247407\n+ * @summary Test that ImageReader doesn't create a Directory node with duplicate children\n+ * @modules java.base\/jdk.internal.jimage\n+ * @run main ImageReaderDuplicateChildNodesTest\n+ *\/\n+public class ImageReaderDuplicateChildNodesTest {\n+\n+    \/**\n+     * Uses the ImageReader to open and read the JAVA_HOME\/lib\/modules image. Tests that the\n+     * {@link ImageReader#findNode(String)} corresponding to a directory doesn't return a node\n+     * with duplicate children in it.\n+     *\/\n+    public static void main(final String[] args) throws Exception {\n+        final Path imagePath = Paths.get(System.getProperty(\"java.home\"), \"lib\", \"modules\");\n+        if (!Files.exists(imagePath)) {\n+            \/\/ skip the testing in the absence of the image file\n+            System.err.println(\"Skipping test since \" + imagePath + \" is absent\");\n+            return;\n+        }\n+        System.out.println(\"Running test against image \" + imagePath);\n+        final String integersParentResource = \"\/modules\/java.base\/java\/lang\";\n+        final String integerResource = integersParentResource + \"\/Integer.class\";\n+        try (final ImageReader reader = ImageReader.open(imagePath)) {\n+            \/\/ find the child node\/resource first\n+            final ImageReader.Node integerNode = reader.findNode(integerResource);\n+            if (integerNode == null) {\n+                throw new RuntimeException(\"ImageReader could not locate \" + integerResource\n+                        + \" in \" + imagePath);\n+            }\n+            \/\/ now find the parent node (which will represent a directory)\n+            final ImageReader.Node parent = reader.findNode(integersParentResource);\n+            if (parent == null) {\n+                throw new RuntimeException(\"ImageReader could not locate \" + integersParentResource\n+                        + \" in \" + imagePath);\n+            }\n+            \/\/ now verify that the parent node which is a directory, doesn't have duplicate children\n+            final List<ImageReader.Node> children = parent.getChildren();\n+            if (children == null || children.isEmpty()) {\n+                throw new RuntimeException(\"ImageReader did not return any child resources under \"\n+                        + integersParentResource + \" in \" + imagePath);\n+            }\n+            final Set<ImageReader.Node> uniqueChildren = new HashSet<>();\n+            for (final ImageReader.Node child : children) {\n+                final boolean unique = uniqueChildren.add(child);\n+                if (!unique) {\n+                    throw new RuntimeException(\"ImageReader returned duplicate child resource \"\n+                            + child + \" under \" + parent + \" from image \" + imagePath);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jimage\/ImageReaderDuplicateChildNodesTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}