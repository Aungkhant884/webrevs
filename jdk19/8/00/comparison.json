{"files":[{"patch":"@@ -1301,2 +1301,10 @@\n-  LabelObj* L_not_prim = new LabelObj();\n-  LabelObj* L_done = new LabelObj();\n+  \/\/ While reading off the universal constant mirror is less efficient than doing\n+  \/\/ another branch and returning the constant answer, this branchless code runs into\n+  \/\/ much less risk of confusion for C1 register allocator. The choice of the universe\n+  \/\/ object here is correct as long as it returns the same modifiers we would expect\n+  \/\/ from the primitive class itself. See spec for Class.getModifiers that provides\n+  \/\/ the typed array klasses with similar modifiers as their component types.\n+\n+  Klass* univ_klass_obj = Universe::byteArrayKlassObj();\n+  assert(univ_klass_obj->modifier_flags() == (JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), \"Sanity\");\n+  LIR_Opr prim_klass = LIR_OprFact::metadataConst(univ_klass_obj);\n@@ -1304,0 +1312,4 @@\n+  LIR_Opr recv_klass = new_register(T_METADATA);\n+  __ move(new LIR_Address(receiver.result(), java_lang_Class::klass_offset(), T_ADDRESS), recv_klass, info);\n+\n+  \/\/ Check if this is a Java mirror of primitive type, and select the appropriate klass.\n@@ -1305,8 +1317,4 @@\n-  \/\/ Checking if it's a java mirror of primitive type\n-  __ move(new LIR_Address(receiver.result(), java_lang_Class::klass_offset(), T_ADDRESS), klass, info);\n-  __ cmp(lir_cond_notEqual, klass, LIR_OprFact::metadataConst(0));\n-  __ branch(lir_cond_notEqual, L_not_prim->label());\n-  __ move(LIR_OprFact::intConst(JVM_ACC_ABSTRACT | JVM_ACC_FINAL | JVM_ACC_PUBLIC), result);\n-  __ branch(lir_cond_always, L_done->label());\n-\n-  __ branch_destination(L_not_prim->label());\n+  __ cmp(lir_cond_equal, recv_klass, LIR_OprFact::metadataConst(0));\n+  __ cmove(lir_cond_equal, prim_klass, recv_klass, klass, T_ADDRESS);\n+\n+  \/\/ Get the answer.\n@@ -1314,1 +1322,0 @@\n-  __ branch_destination(L_done->label());\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"}]}