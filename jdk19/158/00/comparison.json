{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+    public static Class<?>[] classes;\n@@ -62,0 +63,1 @@\n+        System.gc();\n@@ -109,1 +111,1 @@\n-        m.invoke(null, klassbuf);\n+        classes = (Class[]) m.invoke(null, klassbuf);\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestClassLoaderStatsEvent.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-    public static void createNonFindableClasses(byte[] klassbuf) throws Throwable {\n+    public static Class<?>[] createNonFindableClasses(byte[] klassbuf) throws Throwable {\n@@ -91,2 +91,4 @@\n-        Class<?> clh = lookup.defineHiddenClass(klassbuf, false, NESTMATE).lookupClass();\n-        Class<?> arrayOfHidden = Array.newInstance(clh, 10).getClass(); \/\/ HAS ISSUES?\n+        Class<?>[] classes = new Class[2];\n+        classes[0] = lookup.defineHiddenClass(klassbuf, false, NESTMATE).lookupClass();\n+        classes[1] = Array.newInstance(classes[0], 10).getClass(); \/\/ HAS ISSUES?\n+        return classes;\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestClasses.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}