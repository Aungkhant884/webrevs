{"files":[{"patch":"@@ -37,1 +37,4 @@\n-    private static final CABI current;\n+    private static final CABI ABI;\n+    private static final String ARCH;\n+    private static final String OS;\n+    private static final long ADDRESS_SIZE;\n@@ -40,3 +43,3 @@\n-        String arch = privilegedGetProperty(\"os.arch\");\n-        String os = privilegedGetProperty(\"os.name\");\n-        long addressSize = ADDRESS.bitSize();\n+        ARCH = privilegedGetProperty(\"os.arch\");\n+        OS = privilegedGetProperty(\"os.name\");\n+        ADDRESS_SIZE = ADDRESS.bitSize();\n@@ -45,3 +48,3 @@\n-        if ((arch.equals(\"amd64\") || arch.equals(\"x86_64\")) && addressSize == 64) {\n-            if (os.startsWith(\"Windows\")) {\n-                current = Win64;\n+        if ((ARCH.equals(\"amd64\") || ARCH.equals(\"x86_64\")) && ADDRESS_SIZE == 64) {\n+            if (OS.startsWith(\"Windows\")) {\n+                ABI = Win64;\n@@ -49,1 +52,1 @@\n-                current = SysV;\n+                ABI = SysV;\n@@ -51,3 +54,3 @@\n-        } else if (arch.equals(\"aarch64\")) {\n-            if (os.startsWith(\"Mac\")) {\n-                current = MacOsAArch64;\n+        } else if (ARCH.equals(\"aarch64\")) {\n+            if (OS.startsWith(\"Mac\")) {\n+                ABI = MacOsAArch64;\n@@ -56,1 +59,1 @@\n-                current = LinuxAArch64;\n+                ABI = LinuxAArch64;\n@@ -59,2 +62,2 @@\n-            throw new UnsupportedOperationException(\n-                \"Unsupported os, arch, or address size: \" + os + \", \" + arch + \", \" + addressSize);\n+            \/\/ unsupported\n+            ABI = null;\n@@ -65,1 +68,5 @@\n-        return current;\n+        if (ABI == null) {\n+            throw new UnsupportedOperationException(\n+                    \"Unsupported os, arch, or address size: \" + OS + \", \" + ARCH + \", \" + ADDRESS_SIZE);\n+        }\n+        return ABI;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -32,7 +32,0 @@\n-    public static <Z extends MemoryLayout> Z pick(Z sysv, Z win64, Z aarch64) {\n-        return switch (CABI.current()) {\n-            case SysV -> sysv;\n-            case Win64 -> win64;\n-            case LinuxAArch64, MacOsAArch64 -> aarch64;\n-        };\n-    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @enablePreview\n+ *\n+ * @run testng\/othervm -Dos.arch=unknown -Dos.name=unknown --enable-native-access=ALL-UNNAMED TestUnsupportedLinker\n+ *\/\n+\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.VaList;\n+import java.lang.foreign.ValueLayout;\n+\n+import org.testng.annotations.Test;\n+\n+public class TestUnsupportedLinker {\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testLinker() {\n+        Linker.nativeLinker();\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testEmptyVaList() {\n+        VaList.empty();\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testNonEmptyVaList() {\n+        VaList.make(builder -> builder.addVarg(ValueLayout.JAVA_INT, 42), MemorySession.openImplicit());\n+    }\n+\n+    @Test(expectedExceptions = UnsupportedOperationException.class)\n+    public void testUnsafeVaList() {\n+        VaList.ofAddress(MemoryAddress.NULL, MemorySession.openImplicit());\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedLinker.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}