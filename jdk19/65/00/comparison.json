{"files":[{"patch":"@@ -1864,0 +1864,18 @@\n+        push_and(worklist, n, m);\n+      }\n+    }\n+  }\n+}\n+\n+\/\/ AndI\/L::Value() optimizes patterns similar to (v << 2) & 3 to zero if they are bitwise disjoint.\n+\/\/ Add the AndI\/L nodes back to the worklist to re-apply Value() in case the shift value changed.\n+void PhaseCCP::push_and(Unique_Node_List& worklist, const Node* parent, const Node* use) const {\n+  uint use_op = use->Opcode();\n+  if ((use_op == Op_LShiftI || use_op == Op_LShiftL)\n+      && use->in(2) == parent) { \/\/ is shift value (right-hand side of LShift)\n+    for (DUIterator_Fast imax, i = use->fast_outs(imax); i < imax; i++) {\n+      Node* and_node = use->fast_out(i);\n+      uint and_node_op = and_node->Opcode();\n+      if ((and_node_op == Op_AndI || and_node_op == Op_AndL)\n+          && and_node->bottom_type() != type(and_node)) {\n+        worklist.push(and_node);\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -571,0 +571,2 @@\n+  void push_and(Unique_Node_List& worklist, const Node* parent, const Node* use) const;\n+\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8288683\n+ * @library \/test\/lib\n+ * @summary Test that And nodes are added to the CCP worklist if it has an LShift as input.\n+ * @run main\/othervm -Xbatch compiler.c2.TestAndShiftZeroCCP\n+ *\/\n+package compiler.c2;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestAndShiftZeroCCP {\n+    static int iFld = 0xfffff;\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10000; i++) {\n+            Asserts.assertEQ(testAndI(), 224);\n+            Asserts.assertEQ(testAndL(), 224L);\n+            Asserts.assertEQ(testAndLConvI2L(), 224L);\n+        }\n+    }\n+\n+    static int testAndI() {\n+        int x = 10;\n+        int y = iFld;\n+        int z = 3;\n+        int q;\n+        for (int i = 62; i < 70; ++i) {\n+            q = y << i;\n+            for (int j = 0; j < 8; j++) {\n+                z += i;\n+            }\n+            z = q & 0xff;\n+        }\n+        return z;\n+    }\n+\n+    static long testAndL() {\n+        long x = 10;\n+        long y = iFld;\n+        long z = 3;\n+        long q;\n+        for (int i = 62; i < 70; ++i) {\n+            q = y << i;\n+            for (int j = 0; j < 8; j++) {\n+                z += i;\n+            }\n+            z = q & 0xff;\n+        }\n+        return z;\n+    }\n+\n+    static long testAndLConvI2L() {\n+        long x = 10;\n+        long y = iFld;\n+        long z = 3;\n+        long q;\n+        for (int i = 62; i < 70; ++i) {\n+            q = y << i;\n+            for (int j = 0; j < 8; j++) {\n+                z += i;\n+            }\n+            z = q & 0xff;\n+        }\n+        return z;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestAndShiftZeroCCP.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}