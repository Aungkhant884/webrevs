{"files":[{"patch":"@@ -117,1 +117,3 @@\n-        appImageBundler = new MacAppBundler().setDependentTask(true);\n+        appImageBundler = new MacAppBundler()\n+                .setDependentTask(true).\n+                setCreatePackageFile(true);\n@@ -140,5 +142,12 @@\n-            if (Optional.ofNullable(\n-                    SIGN_BUNDLE.fetchFrom(params)).orElse(Boolean.FALSE)) {\n-                \/\/ if signing bundle with app-image, warn user if app-image\n-                \/\/ is not already signed.\n-                if (!(AppImageFile.load(applicationImage).isSigned())) {\n+            if (AppImageFile.load(applicationImage).isSigned()) {\n+                if (!Files.exists(\n+                        PackageFile.getPathInAppImage(applicationImage))) {\n+                    Log.info(MessageFormat.format(I18N.getString(\n+                            \"warning.per.user.app.image.signed\"),\n+                            PackageFile.getPathInAppImage(applicationImage)));\n+                }\n+            } else {\n+                if (Optional.ofNullable(\n+                        SIGN_BUNDLE.fetchFrom(params)).orElse(Boolean.FALSE)) {\n+                    \/\/ if signing bundle with app-image, warn user if app-image\n+                    \/\/ is not already signed.\n@@ -164,0 +173,7 @@\n+\n+            \/\/ Create PackageFile if predefined app image is not signed\n+            if (!StandardBundlerParam.isRuntimeInstaller(params) &&\n+                    !AppImageFile.load(predefinedImage).isSigned()) {\n+                new PackageFile(APP_NAME.fetchFrom(params)).save(\n+                        ApplicationLayout.macAppImage().resolveAt(appDir));\n+            }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":22,"deletions":6,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_de.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_ja.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_zh_CN.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+    protected boolean createPackageFile;\n@@ -56,0 +57,4 @@\n+    public void setCreatePackageFile(boolean v) {\n+        createPackageFile = v;\n+    }\n+\n@@ -81,1 +86,1 @@\n-        if (Platform.isMac()) {\n+        if (createPackageFile) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,0 +115,5 @@\n+    final AppImageBundler setCreatePackageFile(boolean v) {\n+        createPackageFile = v;\n+        return this;\n+    }\n+\n@@ -173,0 +178,1 @@\n+        appBuilder.setCreatePackageFile(createPackageFile);\n@@ -189,0 +195,1 @@\n+    private boolean createPackageFile;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageBundler.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-    boolean isSigned() {\n+    public boolean isSigned() {\n@@ -221,1 +221,1 @@\n-    static AppImageFile load(Path appImageDir) {\n+    public static AppImageFile load(Path appImageDir) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -833,2 +833,1 @@\n-        if (isRuntime() || (isImagePackageType() && !TKit.isOSX()) ||\n-                TKit.isLinux()) {\n+        if (isRuntime() || isImagePackageType() || TKit.isLinux()) {\n@@ -837,1 +836,11 @@\n-            assertFileInAppImage(lookupPath, lookupPath);\n+            if (TKit.isOSX() && hasArgument(\"--app-image\")) {\n+                String appImage = getArgumentValue(\"--app-image\",\n+                        () -> null);\n+                if (AppImageFile.load(Path.of(appImage)).isSigned()) {\n+                    assertFileInAppImage(lookupPath, null);\n+                } else {\n+                    assertFileInAppImage(lookupPath, lookupPath);\n+                }\n+            } else {\n+                assertFileInAppImage(lookupPath, lookupPath);\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -33,1 +34,3 @@\n- * Tests generation of dmg and pkg from signed predefined app image.\n+ * Note: Testing unsgined app image is done to verify support for per-user\n+ * configuration by checking for PackageFile.\n+ * Tests generation of dmg and pkg from signed or unsigned predefined app image.\n@@ -35,2 +38,2 @@\n- * is not signed, but app image inside dmg is signed. This test requires that\n- * the machine is configured with test certificate for\n+ * is not signed, but app image inside dmg is signed or unsigned. This test\n+ * requires that the machine is configured with test certificate for\n@@ -67,0 +70,4 @@\n+        if (!cmd.hasArgument(\"--mac-sign\")) {\n+            return; \/\/ Nothing to check if not signed\n+        }\n+\n@@ -73,0 +80,1 @@\n+        \/\/ DMG always unsigned, so we will check it\n@@ -83,3 +91,6 @@\n-                SigningBase.verifyCodesign(launcherPath, true);\n-                SigningBase.verifyCodesign(dmgImage, true);\n-                SigningBase.verifySpctl(dmgImage, \"exec\");\n+                boolean isSigned = cmd.hasArgument(\"--mac-sign\");\n+                SigningBase.verifyCodesign(launcherPath, isSigned);\n+                SigningBase.verifyCodesign(dmgImage, isSigned);\n+                if (isSigned) {\n+                    SigningBase.verifySpctl(dmgImage, \"exec\");\n+                }\n@@ -91,1 +102,3 @@\n-    public static void test() throws Exception {\n+    @Parameter(\"true\")\n+    @Parameter(\"false\")\n+    public static void test(boolean signAppImage) throws Exception {\n@@ -96,3 +109,0 @@\n-        \/\/ Generate app image. Signed or unsigned based on test\n-        \/\/ parameter. We should able to sign predfined app images\n-        \/\/ which are signed or unsigned.\n@@ -100,4 +110,8 @@\n-                .setArgumentValue(\"--dest\", appimageOutput)\n-                .addArguments(\"--mac-sign\")\n-                .addArguments(\"--mac-signing-key-user-name\", SigningBase.DEV_NAME)\n-                .addArguments(\"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+                .setArgumentValue(\"--dest\", appimageOutput);\n+        if (signAppImage) {\n+            appImageCmd.addArguments(\"--mac-sign\")\n+                    .addArguments(\"--mac-signing-key-user-name\",\n+                            SigningBase.DEV_NAME)\n+                    .addArguments(\"--mac-signing-keychain\",\n+                            SigningBase.KEYCHAIN);\n+        }\n@@ -111,3 +125,7 @@\n-                    cmd.addArguments(\"--mac-sign\",\n-                            \"--mac-signing-key-user-name\", SigningBase.DEV_NAME,\n-                            \"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+                    if (signAppImage) {\n+                        cmd.addArguments(\"--mac-sign\",\n+                                \"--mac-signing-key-user-name\",\n+                                SigningBase.DEV_NAME,\n+                                \"--mac-signing-keychain\",\n+                                SigningBase.KEYCHAIN);\n+                    }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":35,"deletions":17,"binary":false,"changes":52,"status":"modified"}]}