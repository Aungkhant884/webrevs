{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.file.LinkOption;\n@@ -116,1 +117,3 @@\n-        appImageBundler = new MacAppBundler().setDependentTask(true);\n+        appImageBundler = new MacAppBundler()\n+                .setDependentTask(true).\n+                setCreatePackageFile(true);\n@@ -139,5 +142,12 @@\n-            if (Optional.ofNullable(\n-                    SIGN_BUNDLE.fetchFrom(params)).orElse(Boolean.FALSE)) {\n-                \/\/ if signing bundle with app-image, warn user if app-image\n-                \/\/ is not already signed.\n-                if (!(AppImageFile.load(applicationImage).isSigned())) {\n+            if (AppImageFile.load(applicationImage).isSigned()) {\n+                if (!Files.exists(\n+                        PackageFile.getPathInAppImage(applicationImage))) {\n+                    Log.info(MessageFormat.format(I18N.getString(\n+                            \"warning.per.user.app.image.signed\"),\n+                            PackageFile.getPathInAppImage(applicationImage)));\n+                }\n+            } else {\n+                if (Optional.ofNullable(\n+                        SIGN_BUNDLE.fetchFrom(params)).orElse(Boolean.FALSE)) {\n+                    \/\/ if signing bundle with app-image, warn user if app-image\n+                    \/\/ is not already signed.\n@@ -161,1 +171,9 @@\n-            IOUtils.copyRecursive(predefinedImage, appDir);\n+            IOUtils.copyRecursive(predefinedImage, appDir,\n+                    LinkOption.NOFOLLOW_LINKS);\n+\n+            \/\/ Create PackageFile if predefined app image is not signed\n+            if (!StandardBundlerParam.isRuntimeInstaller(params) &&\n+                    !AppImageFile.load(predefinedImage).isSigned()) {\n+                new PackageFile(APP_NAME.fetchFrom(params)).save(\n+                        ApplicationLayout.macAppImage().resolveAt(appDir));\n+            }\n@@ -166,6 +184,0 @@\n-        if (!StandardBundlerParam.isRuntimeInstaller(params)) {\n-            new PackageFile(APP_NAME.fetchFrom(params)).save(\n-                    ApplicationLayout.macAppImage().resolveAt(appDir));\n-           Files.deleteIfExists(AppImageFile.getPathInAppImage(appDir));\n-        }\n-\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_de.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_ja.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+warning.per.user.app.image.signed=Warning: Support for per-user configuration of the installed application will not be supported due to missing \"{0}\" in predefined signed application image.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/MacResources_zh_CN.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+    protected boolean createPackageFile;\n@@ -56,0 +57,4 @@\n+    public void setCreatePackageFile(boolean v) {\n+        createPackageFile = v;\n+    }\n+\n@@ -79,0 +84,1 @@\n+\n@@ -80,0 +86,5 @@\n+        if (createPackageFile) {\n+            new PackageFile(APP_NAME.fetchFrom(params)).save(\n+                    ApplicationLayout.macAppImage().resolveAt(root));\n+        }\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,0 +115,5 @@\n+    final AppImageBundler setCreatePackageFile(boolean v) {\n+        createPackageFile = v;\n+        return this;\n+    }\n+\n@@ -173,0 +178,1 @@\n+        appBuilder.setCreatePackageFile(createPackageFile);\n@@ -189,0 +195,1 @@\n+    private boolean createPackageFile;\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageBundler.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-    boolean isSigned() {\n+    public boolean isSigned() {\n@@ -221,1 +221,1 @@\n-    static AppImageFile load(Path appImageDir) {\n+    public static AppImageFile load(Path appImageDir) {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.nio.file.CopyOption;\n@@ -115,2 +116,3 @@\n-    public static void copyRecursive(Path src, Path dest) throws IOException {\n-        copyRecursive(src, dest, List.of());\n+    public static void copyRecursive(Path src, Path dest, CopyOption... options)\n+            throws IOException {\n+        copyRecursive(src, dest, List.of(), options);\n@@ -120,1 +122,2 @@\n-            final List<String> excludes) throws IOException {\n+            final List<String> excludes, CopyOption... options)\n+            throws IOException {\n@@ -137,1 +140,1 @@\n-                    Files.copy(file, dest.resolve(src.relativize(file)));\n+                    Files.copy(file, dest.resolve(src.relativize(file)), options);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -823,1 +823,1 @@\n-        if (isRuntime() || !isImagePackageType()) {\n+        if (isRuntime() || (!isImagePackageType() && !TKit.isOSX())) {\n@@ -836,1 +836,11 @@\n-            assertFileInAppImage(lookupPath, lookupPath);\n+            if (TKit.isOSX() && hasArgument(\"--app-image\")) {\n+                String appImage = getArgumentValue(\"--app-image\",\n+                        () -> null);\n+                if (AppImageFile.load(Path.of(appImage)).isSigned()) {\n+                    assertFileInAppImage(lookupPath, null);\n+                } else {\n+                    assertFileInAppImage(lookupPath, lookupPath);\n+                }\n+            } else {\n+                assertFileInAppImage(lookupPath, lookupPath);\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.MacHelper;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Annotations.Parameter;\n+\n+\/**\n+ * Note: Testing unsgined app image is done to verify support for per-user\n+ * configuration by checking for PackageFile.\n+ * Tests generation of dmg and pkg from signed or unsigned predefined app image.\n+ * Test will generate pkg and verifies its signature. It verifies that dmg\n+ * is not signed, but app image inside dmg is signed or unsigned. This test\n+ * requires that the machine is configured with test certificate for\n+ * \"Developer ID Installer: jpackage.openjdk.java.net\" in\n+ * jpackagerTest keychain with\n+ * always allowed access to this keychain for user which runs test.\n+ * note:\n+ * \"jpackage.openjdk.java.net\" can be over-ridden by systerm property\n+ * \"jpackage.mac.signing.key.user.name\", and\n+ * \"jpackagerTest\" can be over-ridden by system property\n+ * \"jpackage.mac.signing.keychain\"\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --type pkg,dmg --app-image\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @library base\n+ * @key jpackagePlatformPackage\n+ * @build SigningBase\n+ * @build SigningCheck\n+ * @build jtreg.SkippedException\n+ * @build jdk.jpackage.test.*\n+ * @build SigningPackageTwoStepTest\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @requires (os.family == \"mac\")\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=SigningPackageTwoStepTest\n+ *\/\n+public class SigningPackageTwoStepTest {\n+\n+    private static void verifyPKG(JPackageCommand cmd) {\n+        if (!cmd.hasArgument(\"--mac-sign\")) {\n+            return; \/\/ Nothing to check if not signed\n+        }\n+\n+        Path outputBundle = cmd.outputBundle();\n+        SigningBase.verifyPkgutil(outputBundle);\n+        SigningBase.verifySpctl(outputBundle, \"install\");\n+    }\n+\n+    private static void verifyDMG(JPackageCommand cmd) {\n+        \/\/ DMG always unsigned, so we will check it\n+        Path outputBundle = cmd.outputBundle();\n+        SigningBase.verifyCodesign(outputBundle, false);\n+    }\n+\n+    private static void verifyAppImageInDMG(JPackageCommand cmd) {\n+        MacHelper.withExplodedDmg(cmd, dmgImage -> {\n+            Path launcherPath = dmgImage.resolve(Path.of(\"Contents\", \"MacOS\", cmd.name()));\n+            \/\/ We will be called with all folders in DMG since JDK-8263155, but\n+            \/\/ we only need to verify app.\n+            if (dmgImage.endsWith(cmd.name() + \".app\")) {\n+                boolean isSigned = cmd.hasArgument(\"--mac-sign\");\n+                SigningBase.verifyCodesign(launcherPath, isSigned);\n+                SigningBase.verifyCodesign(dmgImage, isSigned);\n+                if (isSigned) {\n+                    SigningBase.verifySpctl(dmgImage, \"exec\");\n+                }\n+            }\n+        });\n+    }\n+\n+    @Test\n+    @Parameter(\"true\")\n+    @Parameter(\"false\")\n+    public static void test(boolean signAppImage) throws Exception {\n+        SigningCheck.checkCertificates();\n+\n+        Path appimageOutput = TKit.createTempDirectory(\"appimage\");\n+\n+        JPackageCommand appImageCmd = JPackageCommand.helloAppImage()\n+                .setArgumentValue(\"--dest\", appimageOutput);\n+        if (signAppImage) {\n+            appImageCmd.addArguments(\"--mac-sign\")\n+                    .addArguments(\"--mac-signing-key-user-name\",\n+                            SigningBase.DEV_NAME)\n+                    .addArguments(\"--mac-signing-keychain\",\n+                            SigningBase.KEYCHAIN);\n+        }\n+\n+        new PackageTest()\n+                .addRunOnceInitializer(() -> appImageCmd.execute())\n+                .forTypes(PackageType.MAC)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n+                    cmd.removeArgumentWithValue(\"--input\");\n+                    if (signAppImage) {\n+                        cmd.addArguments(\"--mac-sign\",\n+                                \"--mac-signing-key-user-name\",\n+                                SigningBase.DEV_NAME,\n+                                \"--mac-signing-keychain\",\n+                                SigningBase.KEYCHAIN);\n+                    }\n+                })\n+                .forTypes(PackageType.MAC_PKG)\n+                .addBundleVerifier(SigningPackageTwoStepTest::verifyPKG)\n+                .forTypes(PackageType.MAC_DMG)\n+                .addBundleVerifier(SigningPackageTwoStepTest::verifyDMG)\n+                .addBundleVerifier(SigningPackageTwoStepTest::verifyAppImageInDMG)\n+                .run();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}