{"files":[{"patch":"@@ -4351,0 +4351,3 @@\n+                    while (pat instanceof JCParenthesizedPattern parenthesized) {\n+                        pat = parenthesized.pattern;\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -534,1 +534,15 @@\n-                            test = makeBinary(Tag.AND, test, translate(label.guard));\n+                            JCExpression guard = translate(label.guard);\n+                            if (hasJoinedNull) {\n+                                JCPattern pattern = label.pat;\n+                                while (pattern instanceof JCParenthesizedPattern parenthesized) {\n+                                    pattern = parenthesized.pattern;\n+                                }\n+                                Assert.check(pattern.hasTag(Tag.BINDINGPATTERN));\n+                                VarSymbol binding = ((JCBindingPattern) pattern).var.sym;\n+                                guard = makeBinary(Tag.OR,\n+                                                   makeBinary(Tag.EQ,\n+                                                              make.Ident(binding),\n+                                                              makeNull()),\n+                                                   guard);\n+                            }\n+                            test = makeBinary(Tag.AND, test, guard);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-            long typePatternCases = Arrays.stream(caseLabels).filter(l -> l == CaseLabel.TYPE_PATTERN).count();\n+            long typePatternCases = Arrays.stream(caseLabels).filter(l -> l == CaseLabel.TYPE_PATTERN || l == CaseLabel.PARENTHESIZED_PATTERN).count();\n","filename":"test\/langtools\/tools\/javac\/patterns\/CaseStructureTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8262891 8268663\n+ * @bug 8262891 8268663 8289894\n@@ -167,9 +167,9 @@\n-        assertEquals(\"empty\", guardNPE(\"\"));\n-        assertEquals(\"A\", guardNPE(\"A\"));\n-        assertEquals(\"other\", guardNPE(1));\n-        try {\n-            guardNPE(null);\n-            throw new AssertionError(\"Expected exception missing.\");\n-        } catch (NullPointerException ex) {\n-            \/\/expected\n-        }\n+        doTestGuardNPE(this::guardNPE1);\n+        doTestGuardNPE(this::guardNPE2);\n+    }\n+\n+    void doTestGuardNPE(Function<Object, String> test) {\n+        assertEquals(\"empty\", test.apply(\"\"));\n+        assertEquals(\"A\", test.apply(\"A\"));\n+        assertEquals(\"other\", test.apply(1));\n+        assertEquals(\"empty\", test.apply(null));\n@@ -178,1 +178,1 @@\n-    String guardNPE(Object o) {\n+    String guardNPE1(Object o) {\n@@ -186,0 +186,8 @@\n+    String guardNPE2(Object o) {\n+        return switch (o) {\n+            case null, ((((String s)))) when s.isEmpty() -> \"empty\";\n+            case ((((String s)))) -> s;\n+            case Object x -> \"other\";\n+        };\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/Guards.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -257,0 +257,28 @@\n+    void nullAndParenthesized1(Object o) {\n+        record R(Object o) {}\n+        switch (o) {\n+            case null, ((R r)): break;\n+            default: break;\n+        }\n+    }\n+    void nullAndParenthesized2(Object o) {\n+        record R(Object o) {}\n+        switch (o) {\n+            case null, ((R(var v))): break;\n+            default: break;\n+        }\n+    }\n+    void nullAndParenthesized3(Object o) {\n+        record R(Object o) {}\n+        switch (o) {\n+            case ((R r)): case null: break;\n+            default: break;\n+        }\n+    }\n+    void nullAndParenthesized4(Object o) {\n+        record R(Object o) {}\n+        switch (o) {\n+            case ((R(var v))): case null: break;\n+            default: break;\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+SwitchErrors.java:267:24: compiler.err.flows.through.to.pattern\n+SwitchErrors.java:281:37: compiler.err.flows.through.from.pattern\n@@ -58,1 +60,1 @@\n-55 errors\n\\ No newline at end of file\n+57 errors\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/patterns\/SwitchErrors.out","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}