{"files":[{"patch":"@@ -130,1 +130,1 @@\n-public sealed interface MemorySession extends AutoCloseable, SegmentAllocator permits MemorySessionImpl {\n+public sealed interface MemorySession extends AutoCloseable, SegmentAllocator permits MemorySessionImpl, MemorySessionImpl.NonCloseableView {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-        ((MemorySessionImpl)session).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+        MemorySessionImpl.toSessionImpl(session).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n@@ -763,1 +764,1 @@\n-            return ((MemorySessionImpl)segment.session()).baseSession();\n+            return ((AbstractMemorySegmentImpl)segment).sessionImpl();\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Buffer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-            i = SCOPED_MEMORY_ACCESS.vectorizedMismatch(aSession.baseSession(), bSession.baseSession(),\n+            i = SCOPED_MEMORY_ACCESS.vectorizedMismatch(aSession, bSession,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,4 +138,0 @@\n-    public MemorySessionImpl baseSession() {\n-        return this;\n-    }\n-\n@@ -148,2 +144,2 @@\n-        return (o instanceof MemorySessionImpl other) &&\n-                baseSession() == other.baseSession();\n+        return (o instanceof MemorySession other) &&\n+            toSessionImpl(other) == this;\n@@ -154,3 +150,1 @@\n-        MemorySessionImpl base = baseSession();\n-        return (base != this) ?\n-                base.hashCode() : super.hashCode();\n+        return super.hashCode();\n@@ -192,0 +186,6 @@\n+    @ForceInline\n+    public static MemorySessionImpl toSessionImpl(MemorySession session) {\n+        return session instanceof MemorySessionImpl sessionImpl ?\n+                sessionImpl : ((NonCloseableView)session).session;\n+    }\n+\n@@ -344,1 +344,1 @@\n-    public final static class NonCloseableView extends MemorySessionImpl {\n+    public final static class NonCloseableView implements MemorySession {\n@@ -348,1 +348,0 @@\n-            super(session.owner, null, null);\n@@ -353,2 +352,2 @@\n-        public MemorySessionImpl baseSession() {\n-            return session;\n+        public boolean isAlive() {\n+            return session.isAlive();\n@@ -358,2 +357,2 @@\n-        void addInternal(ResourceList.ResourceCleanup resource) {\n-            session.addInternal(resource);\n+        public boolean isCloseable() {\n+            return false;\n@@ -363,2 +362,2 @@\n-        public void release0() {\n-            session.release0();\n+        public Thread ownerThread() {\n+            return session.ownerThread();\n@@ -368,2 +367,2 @@\n-        public void acquire0() {\n-            session.acquire0();\n+        public boolean equals(Object o) {\n+            return session.equals(o);\n@@ -373,2 +372,2 @@\n-        public boolean isCloseable() {\n-            return false;\n+        public int hashCode() {\n+            return session.hashCode();\n@@ -378,2 +377,2 @@\n-        public void justClose() {\n-            throw nonCloseable();\n+        public void whileAlive(Runnable action) {\n+            session.whileAlive(action);\n@@ -383,2 +382,2 @@\n-        public boolean isAlive() {\n-            return session.isAlive();\n+        public MemorySession asNonCloseable() {\n+            return this;\n@@ -388,5 +387,2 @@\n-        public void checkValidStateRaw() {\n-            \/\/ We should never call checkValidStateRaw on a non-closeable view; that method should always be\n-            \/\/ called on the \"base\" session associated with the non-closeable view. Failure to do that\n-            \/\/ will result in use-after-free issues with ScopedMemoryAccess.\n-            throw new IllegalStateException(\"We should not get here!\");\n+        public void addCloseAction(Runnable runnable) {\n+            session.addCloseAction(runnable);\n@@ -396,2 +392,2 @@\n-        public void checkValidState() {\n-            session.checkValidState();\n+        public void close() {\n+            throw new UnsupportedOperationException();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":28,"deletions":32,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl)session;\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n@@ -130,1 +130,1 @@\n-                false, sessionImpl);\n+                false, session);\n@@ -146,3 +146,2 @@\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl)session;\n-        sessionImpl.checkValidState();\n-        AbstractMemorySegmentImpl segment = new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, false, sessionImpl);\n+        MemorySessionImpl.toSessionImpl(session).checkValidState();\n+        AbstractMemorySegmentImpl segment = new NativeMemorySegmentImpl(min.toRawLongValue(), bytesSize, false, session);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        return ((MemorySessionImpl)session()).baseSession();\n+        return MemorySessionImpl.toSessionImpl(session());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Scoped.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        ((MemorySessionImpl)session).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+        MemorySessionImpl.toSessionImpl(session).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -323,1 +323,1 @@\n-        session().checkValidState();\n+        sessionImpl().checkValidState();\n@@ -349,2 +349,2 @@\n-    public MemorySessionImpl session() {\n-        return (MemorySessionImpl)segment.session();\n+    public MemorySession session() {\n+        return segment.session();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private final MemorySessionImpl session;\n+    private final MemorySession session;\n@@ -58,1 +58,1 @@\n-    private MacOsAArch64VaList(MemorySegment segment, MemorySessionImpl session) {\n+    private MacOsAArch64VaList(MemorySegment segment, MemorySession session) {\n@@ -130,1 +130,1 @@\n-        session.checkValidState();\n+        sessionImpl().checkValidState();\n@@ -143,1 +143,1 @@\n-        return new MacOsAArch64VaList(segment, (MemorySessionImpl)session);\n+        return new MacOsAArch64VaList(segment, session);\n@@ -151,1 +151,1 @@\n-    public MemorySessionImpl session() {\n+    public MemorySession session() {\n@@ -157,1 +157,1 @@\n-        session.checkValidState();\n+        sessionImpl().checkValidState();\n@@ -168,1 +168,1 @@\n-        private final MemorySessionImpl session;\n+        private final MemorySession session;\n@@ -172,2 +172,2 @@\n-            ((MemorySessionImpl)session).checkValidState();\n-            this.session = (MemorySessionImpl)session;\n+            MemorySessionImpl.toSessionImpl(session).checkValidState();\n+            this.session = session;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-        session().checkValidState();\n+        sessionImpl().checkValidState();\n@@ -303,2 +303,2 @@\n-    public MemorySessionImpl session() {\n-        return (MemorySessionImpl)segment.session();\n+    public MemorySession session() {\n+        return segment.session();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    private final MemorySessionImpl session;\n+    private final MemorySession session;\n@@ -69,1 +69,1 @@\n-    private WinVaList(MemorySegment segment, MemorySessionImpl session) {\n+    private WinVaList(MemorySegment segment, MemorySession session) {\n@@ -136,1 +136,1 @@\n-        session.checkValidState();\n+        sessionImpl().checkValidState();\n@@ -143,1 +143,1 @@\n-        return new WinVaList(segment, (MemorySessionImpl)session);\n+        return new WinVaList(segment, session);\n@@ -151,1 +151,1 @@\n-    public MemorySessionImpl session() {\n+    public MemorySession session() {\n@@ -157,1 +157,1 @@\n-        session.checkValidState();\n+        sessionImpl().checkValidState();\n@@ -168,1 +168,1 @@\n-        private final MemorySessionImpl session;\n+        private final MemorySession session;\n@@ -172,2 +172,2 @@\n-            ((MemorySessionImpl)session).checkValidState();\n-            this.session = (MemorySessionImpl)session;\n+            MemorySessionImpl.toSessionImpl(session).checkValidState();\n+            this.session = session;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1209,1 +1209,1 @@\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl)session;\n+        MemorySessionImpl sessionImpl = MemorySessionImpl.toSessionImpl(session);\n@@ -1226,1 +1226,1 @@\n-                                            readOnly, sessionImpl);\n+                                            readOnly, session);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -373,3 +373,3 @@\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl)parent;\n-        sessionImpl.acquire0();\n-        child.addCloseAction(sessionImpl::release0);\n+        MemorySessionImpl parentImpl = MemorySessionImpl.toSessionImpl(parent);\n+        parentImpl.acquire0();\n+        child.addCloseAction(parentImpl::release0);\n","filename":"test\/jdk\/java\/foreign\/TestMemorySession.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}