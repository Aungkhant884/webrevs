{"files":[{"patch":"@@ -317,1 +317,1 @@\n-\/\/ Find if the Region node is reachable from the root.\n+\/\/ Check if the RegionNode is part of an unsafe loop and unreachable from root.\n@@ -376,1 +376,1 @@\n-  Node *n = (Node*)phase->C->root();\n+  Node* n = (Node*)phase->C->root();\n@@ -478,1 +478,1 @@\n-  bool add_to_worklist = false;\n+  bool add_to_worklist = true;\n@@ -504,1 +504,1 @@\n-        set_req(i, NULL);       \/\/ Ignore TOP inputs\n+        set_req_X(i, NULL, phase); \/\/ Ignore TOP inputs\n@@ -535,1 +535,2 @@\n-      add_to_worklist = true;\n+      add_to_worklist = false;\n+      phase->is_IterGVN()->add_users_to_worklist(this);\n@@ -550,29 +551,37 @@\n-      \/\/ Yes,  the region will be removed during the next step below.\n-      \/\/ Cut the backedge input and remove phis since no data paths left.\n-      \/\/ We don't cut outputs to other nodes here since we need to put them\n-      \/\/ on the worklist.\n-      PhaseIterGVN *igvn = phase->is_IterGVN();\n-      if (in(1)->outcnt() == 1) {\n-        igvn->_worklist.push(in(1));\n-      }\n-      del_req(1);\n-      cnt = 0;\n-      assert( req() == 1, \"no more inputs expected\" );\n-      uint max = outcnt();\n-      bool progress = true;\n-      Node *top = phase->C->top();\n-      DUIterator j;\n-      while(progress) {\n-        progress = false;\n-        for (j = outs(); has_out(j); j++) {\n-          Node *n = out(j);\n-          if( n->is_Phi() ) {\n-            assert(n->in(0) == this, \"\");\n-            assert( n->req() == 2 &&  n->in(1) != NULL, \"Only one data input expected\" );\n-            \/\/ Break dead loop data path.\n-            \/\/ Eagerly replace phis with top to avoid regionless phis.\n-            igvn->replace_node(n, top);\n-            if( max != outcnt() ) {\n-              progress = true;\n-              j = refresh_out_pos(j);\n-              max = outcnt();\n+      \/\/ This region and therefore all nodes on the input control path(s) are unreachable\n+      \/\/ from root. To avoid incomplete removal of unreachable subgraphs, walk up the CFG\n+      \/\/ and aggressively replace all nodes by top.\n+      PhaseIterGVN* igvn = phase->is_IterGVN();\n+      Node* top = phase->C->top();\n+      ResourceMark rm;\n+      Node_List nstack;\n+      VectorSet visited;\n+      nstack.push(this);\n+      visited.set(_idx);\n+      while (nstack.size() != 0) {\n+        Node* n = nstack.pop();\n+        for (uint i = 0; i < n->req(); ++i) {\n+          Node* m = n->in(i);\n+          assert(m != (Node*)phase->C->root(), \"Should be unreachable from root\");\n+          if (m != NULL && m->is_CFG() && !visited.test_set(m->_idx)) {\n+            nstack.push(m);\n+          }\n+        }\n+        if (n->is_Region()) {\n+          \/\/ Eagerly replace phis with top to avoid regionless phis.\n+          n->set_req(0, NULL);\n+          bool progress = true;\n+          uint max = n->outcnt();\n+          DUIterator j;\n+          while (progress) {\n+            progress = false;\n+            for (j = n->outs(); n->has_out(j); j++) {\n+              Node* u = n->out(j);\n+              if (u->is_Phi()) {\n+                igvn->replace_node(u, top);\n+                if (max != n->outcnt()) {\n+                  progress = true;\n+                  j = n->refresh_out_pos(j);\n+                  max = n->outcnt();\n+                }\n+              }\n@@ -582,0 +591,1 @@\n+        igvn->replace_node(n, top);\n@@ -583,1 +593,1 @@\n-      add_to_worklist = true;\n+      return NULL;\n@@ -586,3 +596,0 @@\n-  if (add_to_worklist) {\n-    phase->is_IterGVN()->add_users_to_worklist(this); \/\/ Revisit collapsed Phis\n-  }\n@@ -632,1 +639,1 @@\n-      if (!add_to_worklist)\n+      if (add_to_worklist) {\n@@ -634,0 +641,1 @@\n+      }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":47,"deletions":39,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -0,0 +1,239 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8284358\n+ * @summary An unreachable loop is not removed, leading to a broken graph.\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:StressSeed=1448005075\n+ *                   -XX:CompileCommand=compileonly,*TestDeadDataLoop::test* -XX:CompileCommand=dontinline,*TestDeadDataLoop::notInlined\n+ *                   compiler.c2.TestDeadDataLoop\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN -XX:StressSeed=1922737097\n+ *                   -XX:CompileCommand=compileonly,*TestDeadDataLoop::test* -XX:CompileCommand=dontinline,*TestDeadDataLoop::notInlined\n+ *                   compiler.c2.TestDeadDataLoop\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:+UnlockDiagnosticVMOptions -XX:+StressIGVN\n+ *                   -XX:CompileCommand=compileonly,*TestDeadDataLoop::test* -XX:CompileCommand=dontinline,*TestDeadDataLoop::notInlined\n+ *                   compiler.c2.TestDeadDataLoop\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestDeadDataLoop {\n+\n+    static class MyValue {\n+        final int x;\n+\n+        MyValue(int x) {\n+            this.x = x;\n+        }\n+    }\n+\n+    static boolean flag = false;\n+    static MyValue escape = null;\n+    static volatile int volInt = 0;\n+\n+    static boolean test1() {\n+        Integer box;\n+        if (flag) {\n+            box = 0;\n+        } else {\n+            box = 1;\n+        }\n+        if (box == 2) {\n+            \/\/ Not reachable but that's only known after Incremental Boxing Inline\n+            for (int i = 0; i < 1000;) {\n+                if (notInlined()) {\n+                    break;\n+                }\n+            }\n+            MyValue val = new MyValue(4);\n+\n+            escape = new MyValue(42);\n+\n+            \/\/ Trigger scalarization of val in safepoint debug info\n+            notInlined();\n+            if (val.x < 0) {\n+              return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    static boolean test2() {\n+        MyValue box = new MyValue(1);\n+        if (box.x == 0) {\n+            \/\/ Not reachable but that's only known once the box.x load is folded during IGVN\n+            for (int i = 0; i < 1000;) {\n+                if (notInlined()) {\n+                    break;\n+                }\n+            }\n+            MyValue val = new MyValue(4);\n+\n+            escape = new MyValue(42);\n+\n+            \/\/ Trigger scalarization of val in safepoint debug info\n+            notInlined();\n+            if (val.x < 0) {\n+              return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    static void test3() {\n+        Integer box = 0;\n+        if (flag) {\n+            box = 1;\n+        }\n+        if (box == 2) {\n+            for (int i = 0; i < 1000;) {\n+                if (notInlined()) {\n+                    break;\n+                }\n+            }\n+            escape = new MyValue(42);\n+        }\n+    }\n+\n+    static void test4() {\n+        MyValue box = new MyValue(1);\n+        if (box.x == 0) {\n+            for (int i = 0; i < 1000;) {\n+                if (notInlined()) {\n+                    break;\n+                }\n+            }\n+            escape = new MyValue(42);\n+        }\n+    }\n+\n+    static void test5() {\n+        MyValue box = new MyValue(1);\n+        if (box.x == 0) {\n+            while (true) {\n+                if (notInlined()) {\n+                    break;\n+                }\n+            }\n+            escape = new MyValue(42);\n+        }\n+    }\n+\n+    static void test6() {\n+        MyValue box = new MyValue(1);\n+        if (box.x == 0) {\n+            while (notInlined()) { }\n+            escape = new MyValue(42);\n+        }\n+    }\n+\n+    static void test7() {\n+        MyValue box = new MyValue(1);\n+        if (box.x == 0) {\n+            while (true) {\n+                escape = new MyValue(2);\n+                if (notInlined()) {\n+                    break;\n+                }\n+            }\n+            escape = new MyValue(42);\n+        }\n+    }\n+\n+    static void test8() {\n+        MyValue box = new MyValue(1);\n+        if (box.x == 0) {\n+            for (int i = 0; i < 1000;) {\n+                notInlined();\n+                if (flag) {\n+                    break;\n+                }\n+            }\n+            escape = new MyValue(42);\n+        }\n+    }\n+\n+    static boolean test9() {\n+        Integer box;\n+        if (flag) {\n+            box = 0;\n+        } else {\n+            box = 1;\n+        }\n+        if (box == 2) {\n+            for (int i = 0; i < 1000;) {\n+                \/\/ MemBarRelease as only Phi user\n+                volInt = 42;\n+                if (flag) {\n+                    break;\n+                }\n+            }\n+            MyValue val = new MyValue(4);\n+\n+            escape = new MyValue(42);\n+\n+            notInlined();\n+            if (val.x < 0) {\n+              return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    static void test10() {\n+        MyValue box = new MyValue(1);\n+        if (box.x == 0) {\n+            while (true) {\n+                \/\/ Allocate node as only Phi user\n+                escape = new MyValue(2);\n+                if (flag) {\n+                    break;\n+                }\n+            }\n+            escape = new MyValue(42);\n+        }\n+    }\n+\n+    public static boolean notInlined() {\n+        return false;\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Make sure classes are initialized\n+        Integer i = 42;\n+        new MyValue(i);\n+        test1();\n+        test2();\n+        test3();\n+        test4();\n+        test5();\n+        test6();\n+        test7();\n+        test8();\n+        test9();\n+        test10();\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestDeadDataLoop.java","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"}]}