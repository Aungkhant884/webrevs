{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.util.function.BiFunction;\n@@ -54,0 +55,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -67,1 +69,1 @@\n-public abstract non-sealed class AbstractMemorySegmentImpl implements MemorySegment, SegmentAllocator, Scoped {\n+public abstract non-sealed class AbstractMemorySegmentImpl implements MemorySegment, SegmentAllocator, Scoped, BiFunction<String, List<Number>, RuntimeException> {\n@@ -397,1 +399,1 @@\n-            Objects.checkIndex(offset, this.length - length + 1);\n+            Preconditions.checkIndex(offset, this.length - length + 1, this);\n@@ -404,0 +406,7 @@\n+    @Override\n+    public RuntimeException apply(String s, List<Number> numbers) {\n+        long offset = numbers.get(0).longValue();\n+        long length = byteSize() - numbers.get(1).longValue() + 1;\n+        return outOfBoundException(offset, length);\n+    }\n+\n@@ -416,1 +425,1 @@\n-        return new IndexOutOfBoundsException(String.format(\"Out of bound access on segment %s; new offset = %d; new length = %d\",\n+        return new IndexOutOfBoundsException(String.format(\"Out of bound access on segment %s; offset = %d; length = %d\",\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -157,0 +157,12 @@\n+    @Test\n+    public void testSegmentOOBMessage() {\n+        try {\n+            var segment = MemorySegment.allocateNative(10, MemorySession.global());\n+            segment.getAtIndex(ValueLayout.JAVA_INT, 2);\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertTrue(ex.getMessage().contains(\"Out of bound access\"));\n+            assertTrue(ex.getMessage().contains(\"offset = 8\"));\n+            assertTrue(ex.getMessage().contains(\"length = 4\"));\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}