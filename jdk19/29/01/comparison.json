{"files":[{"patch":"@@ -816,0 +816,2 @@\n+        \/\/ In general, this optimization cannot be applied for c0 == 31 since\n+        \/\/ 2x << 31 != x << 32 = x << 0 = x (e.g. x = 1: 2 << 31 = 0 != 1)\n@@ -933,1 +935,1 @@\n-    if (add1->in(1) == add1->in(2)) {\n+    if (con != (BitsPerJavaLong - 1) && add1->in(1) == add1->in(2)) {\n@@ -935,0 +937,5 @@\n+      \/\/ Can only be applied if c0 != 63 because:\n+      \/\/ (x + x) << 63 = 2x << 63, while\n+      \/\/ (x + x) << 63 --transform--> x << 64 = x << 0 = x (!= 2x << 63, for example for x = 1)\n+      \/\/ According to the Java spec, chapter 15.19, we only consider the six lowest-order bits of the right-hand operand\n+      \/\/ (i.e. \"right-hand operand\" & 0b111111). Therefore, x << 64 is the same as x << 0 (64 = 0b10000000 & 0b0111111 = 0).\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @bug 8278114\n+ * @bug 8278114 8288564\n@@ -152,0 +152,30 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL_I})\n+    @IR(counts = {IRNode.LSHIFT_I, \"1\",\n+                  IRNode.ADD_I, \"1\"})\n+    public int testIntRandom(int x) {\n+        return (x + x) << 31;\n+    }\n+\n+    @Run(test = \"testIntRandom\")\n+    public void runTestIntRandom() {\n+        int random = RunInfo.getRandom().nextInt();\n+        int interpreterResult = (random + random) << 31;\n+        Asserts.assertEQ(testIntRandom(random), interpreterResult);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL_L})\n+    @IR(counts = {IRNode.LSHIFT_L, \"1\",\n+                  IRNode.ADD_L, \"1\"})\n+    public long testLongRandom(long x) {\n+        return (x + x) << 63;\n+    }\n+\n+    @Run(test = \"testLongRandom\")\n+    public void runTestLongRandom() {\n+        long random = RunInfo.getRandom().nextLong();\n+        long interpreterResult = (random + random) << 63;\n+        Asserts.assertEQ(testLongRandom(random), interpreterResult);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRLShiftIdeal_XPlusX_LShiftC.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}