{"files":[{"patch":"@@ -1488,1 +1488,1 @@\n-        configuration.tagletManager.checkTags(element, trees, true);\n+        configuration.tagletManager.checkTags(element, trees);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -32,2 +33,0 @@\n-import javax.lang.model.element.TypeElement;\n-import javax.lang.model.type.TypeKind;\n@@ -45,3 +44,1 @@\n- * An inline taglet representing the {@code {@inheritDoc}} tag.\n- * It is used to copy documentation from superclass (but not superinterface)\n- * declarations and from overridden and implemented methods.\n+ * A taglet that represents the {@code {@inheritDoc}} tag.\n@@ -55,1 +52,1 @@\n-        super(DocTree.Kind.INHERIT_DOC, true, EnumSet.of(Location.TYPE, Location.METHOD));\n+        super(DocTree.Kind.INHERIT_DOC, true, EnumSet.of(Location.METHOD));\n@@ -99,8 +96,0 @@\n-            \/\/ This is to assert that we don't reach here for a class declaration.\n-            \/\/ Indeed, every class except for java.lang.Object has a superclass.\n-            \/\/ If we ever reach here, we would need a different warning; because\n-            \/\/ the below warning is about method declarations, not class declarations.\n-            \/\/ Unless @inheritDoc is used inside java.lang.Object itself,\n-            \/\/ which would clearly be an error, we shouldn't reach here.\n-            assert !(e instanceof TypeElement typeElement)\n-                    || typeElement.getSuperclass().getKind() == TypeKind.NONE;\n@@ -118,0 +107,3 @@\n+        if (e.getKind() != ElementKind.METHOD) {\n+            return tagletWriter.getOutputInstance();\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/InheritDocTaglet.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-     * Given a series of {@code DocTree}s, check for spelling mistakes.\n+     * Given a series of {@code DocTree}s, check for misuse and spelling mistakes.\n@@ -357,1 +357,0 @@\n-     * @param inlineTrees true if the trees are inline and false otherwise\n@@ -359,4 +358,1 @@\n-    public void checkTags(Element element, Iterable<? extends DocTree> trees, boolean inlineTrees) {\n-        if (trees == null) {\n-            return;\n-        }\n+    public void checkTags(Element element, Iterable<? extends DocTree> trees) {\n@@ -389,17 +385,5 @@\n-                if (inlineTrees && !taglet.isInlineTag()) {\n-                    printTagMisuseWarn(ch, taglet, tag, \"inline\");\n-                }\n-\n-                \/\/ nothing more to do\n-                if (element == null) {\n-                    return;\n-                }\n-\n-                if (!inlineTrees) {\n-                    new SimpleElementVisitor14<Void, Void>() {\n-                        @Override\n-                        public Void visitModule(ModuleElement e, Void p) {\n-                            if (!taglet.inModule()) {\n-                                printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"module\");\n-                            }\n-                            return null;\n+                new SimpleElementVisitor14<Void, Void>() {\n+                    @Override\n+                    public Void visitModule(ModuleElement e, Void p) {\n+                        if (!taglet.inModule()) {\n+                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"module\");\n@@ -407,0 +391,2 @@\n+                        return null;\n+                    }\n@@ -408,6 +394,4 @@\n-                        @Override\n-                        public Void visitPackage(PackageElement e, Void p) {\n-                            if (!taglet.inPackage()) {\n-                                printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"package\");\n-                            }\n-                            return null;\n+                    @Override\n+                    public Void visitPackage(PackageElement e, Void p) {\n+                        if (!taglet.inPackage()) {\n+                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"package\");\n@@ -415,0 +399,2 @@\n+                        return null;\n+                    }\n@@ -416,6 +402,4 @@\n-                        @Override\n-                        public Void visitType(TypeElement e, Void p) {\n-                            if (!taglet.inType()) {\n-                                printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"class\");\n-                            }\n-                            return null;\n+                    @Override\n+                    public Void visitType(TypeElement e, Void p) {\n+                        if (!taglet.inType()) {\n+                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"class\");\n@@ -423,17 +407,9 @@\n-\n-                        @Override\n-                        public Void visitExecutable(ExecutableElement e, Void p) {\n-                            if (utils.isConstructor(e) && !taglet.inConstructor()) {\n-                                printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"constructor\");\n-                            } else if (!taglet.inMethod()) {\n-                                printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"method\");\n-                            }\n-                            return null;\n-                        }\n-\n-                        @Override\n-                        public Void visitVariable(VariableElement e, Void p) {\n-                            if (utils.isField(e) && !taglet.inField()) {\n-                                printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"field\");\n-                            }\n-                            return null;\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    public Void visitExecutable(ExecutableElement e, Void p) {\n+                        if (utils.isConstructor(e) && !taglet.inConstructor()) {\n+                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"constructor\");\n+                        } else if (!taglet.inMethod()) {\n+                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"method\");\n@@ -441,0 +417,2 @@\n+                        return null;\n+                    }\n@@ -442,6 +420,4 @@\n-                        @Override\n-                        public Void visitUnknown(Element e, Void p) {\n-                            if (utils.isOverviewElement(e) && !taglet.inOverview()) {\n-                                printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"overview\");\n-                            }\n-                            return null;\n+                    @Override\n+                    public Void visitVariable(VariableElement e, Void p) {\n+                        if (utils.isField(e) && !taglet.inField()) {\n+                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"field\");\n@@ -449,0 +425,2 @@\n+                        return null;\n+                    }\n@@ -450,3 +428,4 @@\n-                        @Override\n-                        protected Void defaultAction(Element e, Void p) {\n-                            return null;\n+                    @Override\n+                    public Void visitUnknown(Element e, Void p) {\n+                        if (utils.isOverviewElement(e) && !taglet.inOverview()) {\n+                            printTagMisuseWarn(utils.getCommentHelper(e), taglet, tag, \"overview\");\n@@ -454,2 +433,8 @@\n-                    }.visit(element);\n-                }\n+                        return null;\n+                    }\n+\n+                    @Override\n+                    protected Void defaultAction(Element e, Void p) {\n+                        return null;\n+                    }\n+                }.visit(element);\n@@ -492,3 +477,0 @@\n-        if (taglet.isInlineTag()) {\n-            locationsSet.add(\"inline text\");\n-        }\n@@ -499,7 +481,1 @@\n-        StringBuilder combined_locations = new StringBuilder();\n-        for (String location: locationsSet) {\n-            if (combined_locations.length() > 0) {\n-                combined_locations.append(\", \");\n-            }\n-            combined_locations.append(location);\n-        }\n+        var combined_locations = String.join(\", \", locationsSet);\n@@ -507,1 +483,1 @@\n-            \"@\" + taglet.getName(), holderType, combined_locations.toString());\n+            \"@\" + taglet.getName(), holderType, combined_locations);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java","additions":50,"deletions":74,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -278,2 +278,2 @@\n-        tagletManager.checkTags(element, utils.getBlockTags(element), false);\n-        tagletManager.checkTags(element, utils.getFullBody(element), true);\n+        tagletManager.checkTags(element, utils.getBlockTags(element));\n+        tagletManager.checkTags(element, utils.getFullBody(element));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import javax.lang.model.type.TypeMirror;\n@@ -261,11 +260,0 @@\n-        } else if (utils.isTypeElement(input.element)) {\n-            TypeMirror t = ((TypeElement) input.element).getSuperclass();\n-            Element superclass = utils.asTypeElement(t);\n-            if (superclass != null) {\n-                inheritedSearchInput.element = superclass;\n-                output = search(configuration, inheritedSearchInput);\n-                output.isValidInheritDocTag = true;\n-                if (!output.inlineTags.isEmpty()) {\n-                    return output;\n-                }\n-            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocFinder.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-            } else if (tree.getFirstSentence().isEmpty() && !isOverridingMethod) {\n+            } else if (tree.getFirstSentence().isEmpty() && !isOverridingMethod && !pseudoElement(p)) {\n@@ -225,1 +225,1 @@\n-            \/\/ ... otherwise, (e.g. overview file and doc-files\/*.html files) no additional headings are inserted\n+            \/\/ ... otherwise, (e.g. overview file and doc-files\/**\/*.html files) no additional headings are inserted\n@@ -266,0 +266,7 @@\n+    \/\/ Checks if the passed tree path corresponds to an entity, such as\n+    \/\/ the overview file and doc-files\/**\/*.html files.\n+    private boolean pseudoElement(TreePath p) {\n+        return p.getLeaf().getKind() == Tree.Kind.COMPILATION_UNIT\n+                && p.getCompilationUnit().getSourceFile().getKind() == JavaFileObject.Kind.HTML;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8008768\n+ * @bug 8008768 8287379\n@@ -36,7 +36,0 @@\n-\/**\n- * DocTest documentation.\n- *\n- * @apiNote DocTest API note.\n- * @implSpec DocTest implementation spec.\n- * @implNote DocTest implementation note.\n- *\/\n@@ -54,3 +47,3 @@\n-                \"-tag\", \"apiNote:optcm:<em>API Note<\/em>\",\n-                \"-tag\", \"implSpec:optcm:<em>Implementation Requirements<\/em>:\",\n-                \"-tag\", \"implNote:optcm:<em>Implementation Note<\/em>:\",\n+                \"-tag\", \"apiNote:a:API Note\",\n+                \"-tag\", \"implSpec:a:Implementation Requirements:\",\n+                \"-tag\", \"implNote:a:Implementation Note:\",\n@@ -67,10 +60,0 @@\n-    \/**\n-     * DocTest() documentation.\n-     *\n-     * @apiNote DocTest() API note.\n-     * @implSpec DocTest() implementation spec.\n-     * @implNote DocTest() implementation note.\n-     *\/\n-    public DocTest() {\n-    }\n-\n@@ -88,16 +71,0 @@\n-\/**\n- * DocTestWithTags documentation.\n- *\n- * @apiNote DocTestWithTags API note.\n- * <pre>\n- *    DocTestWithTags API note code sample.\n- * <\/pre>\n- * @implSpec DocTestWithTags implementation spec.\n- * <pre>\n- *    DocTestWithTags implementation spec code sample.\n- * <\/pre>\n- * @implNote DocTestWithTags implementation note.\n- * <pre>\n- *    DocTestWithTags implementation note code sample.\n- * <\/pre>\n- *\/\n@@ -106,19 +73,0 @@\n-    \/**\n-     * DocTestWithTags() documentation.\n-     *\n-     * @apiNote DocTestWithTags() API note.\n-     * <pre>\n-     *    DocTestWithTags() API note code sample.\n-     * <\/pre>\n-     * @implSpec DocTestWithTags() implementation spec.\n-     * <pre>\n-     *    DocTestWithTags() implementation spec code sample.\n-     * <\/pre>\n-     * @implNote DocTest() implementation note.\n-     * <pre>\n-     *    DocTest() implementation note code sample.\n-     * <\/pre>\n-     *\/\n-    public DocTestWithTags() {\n-    }\n-\n@@ -134,1 +82,1 @@\n-     *    DocTestWithTags.testMethod() API implementation spec code sample.\n+     *    DocTestWithTags.testMethod() implementation spec code sample.\n@@ -138,1 +86,1 @@\n-     *    DocTest.testMethod() API implementation code sample.\n+     *    DocTest.testMethod() implementation note code sample.\n@@ -148,3 +96,0 @@\n-\/**\n- * SimpleExtendsDocTest documentation.\n- *\/\n@@ -154,8 +99,1 @@\n-     * SimpleExtendsDocTest() documentation.\n-     *\/\n-    public SimpleExtendsDocTest() {\n-\n-    }\n-\n-    \/**\n-     * SimpleExtendsDocTest.testMethod() documenation.\n+     * SimpleExtendsDocTest.testMethod() documentation.\n@@ -163,1 +101,1 @@\n-    @java.lang.Override\n+    @Override\n@@ -168,3 +106,0 @@\n-\/**\n- * {@inheritDoc}\n- *\/\n@@ -176,7 +111,1 @@\n-    public SimpleInheritDocDocTest() {\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @java.lang.Override\n+    @Override\n@@ -187,7 +116,0 @@\n-\/**\n- * {@inheritDoc}\n- *\n- * @apiNote {@inheritDoc}\n- * @implSpec {@inheritDoc}\n- * @implNote {@inheritDoc}\n- *\/\n@@ -203,12 +125,1 @@\n-    public FullInheritDocDocTest() {\n-\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\n-     * @apiNote {@inheritDoc}\n-     * @implSpec {@inheritDoc}\n-     * @implNote {@inheritDoc}\n-     *\/\n-    @java.lang.Override\n+    @Override\n@@ -219,7 +130,0 @@\n-\/**\n- * {@inheritDoc} and FullInheritDocPlusDocTest documentation.\n- *\n- * @implSpec {@inheritDoc} and FullInheritDocPlusDocTest API note.\n- * @implNote {@inheritDoc} and FullInheritDocPlusDocTest implementation specification.\n- * @apiNote {@inheritDoc} and FullInheritDocPlusDocTest implementation note.\n- *\/\n@@ -228,11 +132,0 @@\n-    \/**\n-     * {@inheritDoc} and FullInheritDocPlusDocTest() documentation.\n-     *\n-     * @implSpec {@inheritDoc} and FullInheritDocPlusDocTest() API note.\n-     * @implNote {@inheritDoc} and FullInheritDocPlusDocTest() implementation specification.\n-     * @apiNote {@inheritDoc} and FullInheritDocPlusDocTest() implementation note.\n-     *\/\n-    public FullInheritDocPlusDocTest() {\n-\n-    }\n-\n@@ -242,3 +135,3 @@\n-     * @implSpec {@inheritDoc} and FullInheritDocPlusDocTest.testMethod() API note.\n-     * @implNote {@inheritDoc} and FullInheritDocPlusDocTest.testMethod() implementation specification.\n-     * @apiNote {@inheritDoc} and FullInheritDocPlusDocTest.testMethod() implementation note.\n+     * @implSpec {@inheritDoc} and FullInheritDocPlusDocTest.testMethod() implementation specification.\n+     * @implNote {@inheritDoc} and FullInheritDocPlusDocTest.testMethod() implementation note.\n+     * @apiNote {@inheritDoc} and FullInheritDocPlusDocTest.testMethod() API note.\n@@ -246,1 +139,1 @@\n-    @java.lang.Override\n+    @Override\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/InheritDocForUserTags\/DocTest.java","additions":15,"deletions":122,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8284299\n+ * @bug 8284299 8287379\n@@ -100,0 +100,167 @@\n+\n+    @Test\n+    public void testClassOrInterfaceMainDescription(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                        \/** Class A. *\/\n+                        public class A { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** {@inheritDoc} *\/\n+                        public class B extends A { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** Interface C. *\/\n+                        public interface C { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** {@inheritDoc} *\/\n+                        public interface D extends C { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** Interface E. *\/\n+                        public interface E { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** {@inheritDoc} *\/\n+                        public class F implements E { }\n+                        \"\"\");\n+        javadoc(\"-Xdoclint:none\",\n+                \"-d\", base.resolve(\"out\").toString(),\n+                src.resolve(\"A.java\").toString(),\n+                src.resolve(\"B.java\").toString(),\n+                src.resolve(\"C.java\").toString(),\n+                src.resolve(\"D.java\").toString(),\n+                src.resolve(\"E.java\").toString(),\n+                src.resolve(\"F.java\").toString());\n+        checkExit(Exit.OK);\n+        new OutputChecker(Output.OUT).setExpectOrdered(false).check(\n+                \"\"\"\n+                        B.java:1: warning: Tag @inheritDoc cannot be used in class documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        \/** {@inheritDoc} *\/\n+                            ^\n+                            \"\"\",\n+                \"\"\"\n+                        D.java:1: warning: Tag @inheritDoc cannot be used in class documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        \/** {@inheritDoc} *\/\n+                            ^\n+                            \"\"\",\n+                \"\"\"\n+                        F.java:1: warning: Tag @inheritDoc cannot be used in class documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        \/** {@inheritDoc} *\/\n+                            ^\n+                            \"\"\");\n+    }\n+\n+    @Test\n+    public void testClassOrInterfaceTypeParameter(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                        \/** @param <T> A's parameter *\/\n+                        public class A<T> { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** @param <T> {@inheritDoc} *\/\n+                        public class B extends A { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** @param <T> C's parameter *\/\n+                        public interface C<T> { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** @param <T> {@inheritDoc} *\/\n+                        public interface D<T> extends C<T> { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** @param <T> E's parameter *\/\n+                        public interface E<T> { }\n+                        \"\"\",\n+                \"\"\"\n+                        \/** @param <T> {@inheritDoc} *\/\n+                        public class F<T> implements E<T> { }\n+                        \"\"\");\n+        javadoc(\"-Xdoclint:none\",\n+                \"-d\", base.resolve(\"out\").toString(),\n+                src.resolve(\"A.java\").toString(),\n+                src.resolve(\"B.java\").toString(),\n+                src.resolve(\"C.java\").toString(),\n+                src.resolve(\"D.java\").toString(),\n+                src.resolve(\"E.java\").toString(),\n+                src.resolve(\"F.java\").toString());\n+        checkExit(Exit.OK);\n+        new OutputChecker(Output.OUT).setExpectOrdered(false).check(\n+                \"\"\"\n+                        B.java:1: warning: Tag @inheritDoc cannot be used in class documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        \/** @param <T> {@inheritDoc} *\/\n+                                       ^\n+                                       \"\"\",\n+                \"\"\"\n+                        D.java:1: warning: Tag @inheritDoc cannot be used in class documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        \/** @param <T> {@inheritDoc} *\/\n+                                       ^\n+                                       \"\"\",\n+                \"\"\"\n+                        F.java:1: warning: Tag @inheritDoc cannot be used in class documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        \/** @param <T> {@inheritDoc} *\/\n+                                       ^\n+                                       \"\"\");\n+    }\n+\n+    @Test\n+    public void testOverview(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package p;\n+\n+                \/** A class *\/\n+                public class C { }\n+                \"\"\");\n+        tb.writeFile(src.resolve(\"overview.html\"), \"\"\"\n+                <HTML lang=\"EN\">\n+                <HEAD>\n+                    <TITLE>overview<\/TITLE>\n+                <\/HEAD>\n+                <BODY>\n+                {@inheritDoc}\n+                <\/BODY>\n+                <\/HTML>\n+                \"\"\");\n+        tb.writeFile(\n+                src.resolve(\"p\").resolve(\"doc-files\").resolve(\"example.html\"), \"\"\"\n+                <HTML lang=\"EN\">\n+                <HEAD>\n+                    <TITLE>example<\/TITLE>\n+                <\/HEAD>\n+                <BODY>\n+                {@inheritDoc}\n+                <\/BODY>\n+                <\/HTML>\n+                \"\"\");\n+        javadoc(\"-Xdoclint:none\",\n+                \"-overview\", src.resolve(\"overview.html\").toString(),\n+                \"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+        new OutputChecker(Output.OUT).setExpectOrdered(false).check(\n+                \"\"\"\n+                        overview.html:6: warning: Tag @inheritDoc cannot be used in overview documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        {@inheritDoc}\n+                        ^\n+                        \"\"\",\n+                \"\"\"\n+                        example.html:6: warning: Tag @inheritDoc cannot be used in overview documentation.\\\n+                          It can only be used in the following types of documentation: method.\n+                        {@inheritDoc}\n+                        ^\n+                        \"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testInheritDocWithinInappropriateTag\/TestInheritDocWithinInappropriateTag.java","additions":168,"deletions":1,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,6 +62,0 @@\n-            \"\"\"\n-                <a href=\"relative-class-link.html\">relative class link<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\"#class-fragment\">fragment class link<\/a>\"\"\",\n-            \"\"\"\n-                <a id=\"class-fragment\">Class fragment<\/a>\"\"\",\n@@ -83,5 +77,1 @@\n-                <a id=\"package-fragment\">Package fragment<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\"relative-class-link.html\">relative class link<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\"C.html#class-fragment\">fragment class link<\/a>\"\"\");\n+                <a id=\"package-fragment\">Package fragment<\/a>\"\"\");\n@@ -89,1 +79,1 @@\n-        \/\/ subclass in same pacakge\n+        \/\/ subclass in same package\n@@ -91,4 +81,0 @@\n-                \"\"\"\n-                    <a href=\"relative-class-link.html\">relative class link<\/a>\"\"\",\n-                \"\"\"\n-                    <a href=\"C.html#class-fragment\">fragment class link<\/a>\"\"\",\n@@ -105,4 +91,0 @@\n-                \"\"\"\n-                    <a href=\"..\/..\/pkg\/relative-class-link.html\">relative class link<\/a>\"\"\",\n-                \"\"\"\n-                    <a href=\"..\/..\/pkg\/C.html#class-fragment\">fragment class link<\/a>\"\"\",\n@@ -116,4 +98,0 @@\n-            \"\"\"\n-                <a href=\".\/pkg\/relative-class-link.html\">relative class link<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\".\/pkg\/C.html#class-fragment\">fragment class link<\/a>\"\"\",\n@@ -144,5 +122,1 @@\n-                <a href=\"..\/pkg\/package-summary.html#package-fragment\">package fragment link<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\"..\/pkg\/relative-class-link.html\">relative class link<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\"..\/pkg\/C.html#class-fragment\">fragment class link<\/a>\"\"\");\n+                <a href=\"..\/pkg\/package-summary.html#package-fragment\">package fragment link<\/a>\"\"\");\n@@ -152,4 +126,0 @@\n-            \"\"\"\n-                <a href=\"..\/..\/pkg\/relative-class-link.html\">relative class link<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\"..\/..\/pkg\/C.html#class-fragment\">fragment class link<\/a>\"\"\",\n@@ -178,13 +148,1 @@\n-                <a href=\"..\/..\/pkg\/package-summary.html#package-fragment\">package fragment link<\/a>\"\"\",\n-            \/\/ subclass inheriting relative link doc\n-            \"\"\"\n-                <a href=\"..\/..\/pkg\/relative-class-link.html\">relative class link<\/a>\"\"\",\n-            \"\"\"\n-                <a href=\"..\/..\/pkg\/C.html#class-fragment\">fragment class link<\/a>\"\"\");\n-\n-        \/\/ sibling package summary\n-        checkOutput(\"pkg2\/package-summary.html\", true,\n-            \"\"\"\n-                <a href=\"..\/pkg\/relative-class-link.html\">relative class link<\/a>\"\"\",\n-            \"\"\"\n-                 <a href=\"..\/pkg\/C.html#class-fragment\">fragment class link<\/a>\"\"\");\n+                <a href=\"..\/..\/pkg\/package-summary.html#package-fragment\">package fragment link<\/a>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/TestRelativeLinks.java","additions":5,"deletions":47,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,0 @@\n-\/**\n- * Here are two relative links in a class:\n- * <a href=\"relative-class-link.html\">relative class link<\/a>,\n- * <a href=\"#class-fragment\">fragment class link<\/a>.\n- *\n- * <a id=\"class-fragment\">Class fragment<\/a>.\n- *\/\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/pkg\/C.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n- * {@inheritDoc}\n- *\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/pkg\/D.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n- * {@inheritDoc}\n- *\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/pkg\/sub\/F.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,1 @@\n- * {@inheritDoc}\n- *\n- * A class that extends pkg.C from onother package and inherits some of its comments.\n+ * A class that extends pkg.C from another package and inherits some of its comments.\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/pkg2\/E.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-                \"-tag\", \"custom:optcm:<em>Custom:<\/em>\",\n+                \"-tag\", \"custom:m:<em>Custom:<\/em>\",\n@@ -52,3 +52,0 @@\n-                \"\"\"\n-                    <dt><em>Custom:<\/em><\/dt>\n-                    <dd>doc for BaseClass class<\/dd>\"\"\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSimpleTagInherit\/TestSimpleTagInherit.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/**\n- * @custom doc for BaseClass class\n- *\/\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSimpleTagInherit\/p\/BaseClass.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/**\n- * @custom {@inheritDoc}\n- *\/\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSimpleTagInherit\/p\/TestClass.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-       {@inheritDoc}: ..... ........ ...... ....... type ........... method ..... inline ........\n+       {@inheritDoc}: ..... ........ ...... ....... .... ........... method ..... inline ........\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTaglets\/TestTaglets.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}