[{"commit":{"message":"[feedback] revert some tests\n\nThis addresses Jon's fair concerns on me aggressively removing some\ntest cases, that could still work."},"files":[{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/TestRelativeLinks.java"}],"sha":"7d540c4ede9e26b062f6fc977c5a310a95f1907d"},{"commit":{"message":"Merge remote-tracking branch 'jdk19\/master' into 8287379"},"files":[],"sha":"f8b4bbb299cbee01c51962db0c30d72ef0d83498"},{"commit":{"message":"Merge remote-tracking branch 'jdk19\/master' into 8287379"},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java"}],"sha":"b6e2df835ce9e42ac2cdea9faaecad53842639e2"},{"commit":{"message":"feedback: make method positive"},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java"}],"sha":"3d88d480920bdf4ca2799e8f9a2dc2289b3334bd"},{"commit":{"message":"Merge remote-tracking branch 'jdk19\/master' into 8287379"},"files":[{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTaglets\/TestTaglets.out"}],"sha":"e3308c10c361c9dbb7e1b4973abba71e41632139"},{"commit":{"message":"Update DocTest\n\n1. Removes @inheritDoc from these type of declarations:\n     * class and interface\n     * constructor\n2. Removes empty declarations.\n3. Updates @apiNote, @implSpec and @implNote definitions to match those\n   of JDK API.\n4. Fixes a few typos."},"files":[{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/InheritDocForUserTags\/DocTest.java"}],"sha":"2a81009ae9fb48e971d5082543d5ea63162b89c8"},{"commit":{"message":"Add tests"},"files":[{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testInheritDocWithinInappropriateTag\/TestInheritDocWithinInappropriateTag.java"}],"sha":"7e13ca6f5059358c0e8c91edfcd1c3c46bd11012"},{"commit":{"message":"Disallow @inheritDoc in type declarations\n\nThis undoes undocumented changes introduced by 8008768."},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/InheritDocTaglet.java"},{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocFinder.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/TestRelativeLinks.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/pkg\/D.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/pkg\/sub\/F.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRelativeLinks\/pkg2\/E.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSimpleTagInherit\/TestSimpleTagInherit.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSimpleTagInherit\/p\/BaseClass.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSimpleTagInherit\/p\/TestClass.java"},{"filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTaglets\/TestTaglets.out"}],"sha":"31d38ca4e21c83fefd91f64bfeedf3a2f55e23de"},{"commit":{"message":"Do not warn on inline misuse\n\nThe type of a declaration (module, class or interface, constructor,\nmethod, etc.) for which a tag is applicable, is orthogonal to the type\nof the tag (inline, block, bimodal).\n\nThe code up the stack knows which type of tags it has collected. If\nthose tags are of type other than expected, it's a programming error."},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java"},{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java"},{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletWriter.java"}],"sha":"de779612bd077de7e85cd2ea176827c29737b310"},{"commit":{"message":"Doclint shouldn't warn on inapplicable conditions\n\noverview.html and doc-files\/**\/*.html files cannot have\na main description or be an empty comment. At the very least,\nthe check for being \"an empty comment\" for such files cannot be\nperformed by checking if the files contain any block tags. Block tags\nare applicable to a program element, which those files are not."},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java"}],"sha":"f2a0f66d5ac2277c607ede88f30efec91ddac988"},{"commit":{"message":"Expand checkTags to include non-inline tag\n\nAside from @inheritDoc, which is context-dependent, we now have\na bimodal tag such as {@return}\/@return."},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java"}],"sha":"1dea10d222d0cc264095f84b0d46a8101feb55e5"},{"commit":{"message":"Remove another null-check\n\nThe `element` cannot be null for various reasons:\n\n1. If `element` were null, `getCommentHelper` would NPE (because it\n   calls `Utils.getDocCommentInfo` which NPEs on a null element).\n2. The Overview and Html files correspond to the OverviewElement\n   and DocFileElement pseudo-elements, which are passed to checkTags\n   when respective files are processed.\n\nExisting tests and ad-hoc experiments support that."},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java"}],"sha":"e331fcef15827dc420bd2e9a94abd3ac948828f6"},{"commit":{"message":"Remove null-check\n\nWe can do this safely because the `trees` parameter is never null in\nany of the 3 call sites of the checkTags method."},"files":[{"filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java"}],"sha":"438a7db573cfee4c5f87181c3b212b1f6f9e2c20"}]