{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.io.FileNotFoundException;\n@@ -35,1 +34,0 @@\n-import java.util.ArrayList;\n@@ -56,0 +54,1 @@\n+import jdk.jfr.internal.jfc.model.JFCModelException;\n@@ -232,4 +231,2 @@\n-            } catch(FileNotFoundException e) {\n-                throw new DCmdException(\"Could not find settings file'\" + configName + \"'\", e);\n-            } catch (IOException | ParseException e) {\n-                throw new DCmdException(\"Could not parse settings file '\" + settings[0] + \"'\", e);\n+            } catch (InvalidPathException | IOException | ParseException e) {\n+                throw new DCmdException(JFC.formatException(\"Could not\", e, configName), e);\n@@ -242,1 +239,1 @@\n-        List<SafePath> paths = new ArrayList<>();\n+        JFCModel model = new JFCModel(l -> logWarning(l));\n@@ -244,1 +241,5 @@\n-            paths.add(JFC.createSafePath(setting));\n+            try {\n+                model.parse(JFC.createSafePath(setting));\n+            } catch (InvalidPathException | IOException | JFCModelException | ParseException e) {\n+                throw new DCmdException(JFC.formatException(\"Could not\", e, setting), e);\n+            }\n@@ -247,1 +248,0 @@\n-            JFCModel model = new JFCModel(paths, l -> logWarning(l));\n@@ -269,1 +269,1 @@\n-         } catch (IllegalArgumentException iae) {\n+        } catch (IllegalArgumentException iae) {\n@@ -271,5 +271,1 @@\n-         } catch (FileNotFoundException ioe) {\n-             throw new DCmdException(\"Could not find settings file'\" + settings[0] + \"'\", ioe);\n-         } catch (IOException | ParseException e) {\n-             throw new DCmdException(\"Could not parse settings file '\" + settings[0] + \"'\", e);\n-         }\n+        }\n@@ -439,1 +435,1 @@\n-        } catch (IOException | ParseException e) {\n+        } catch (IOException | JFCModelException | ParseException  e) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.io.FileReader;\n+import java.io.FileNotFoundException;\n@@ -34,0 +34,1 @@\n+import java.nio.file.AccessDeniedException;\n@@ -44,0 +45,1 @@\n+import jdk.jfr.internal.jfc.model.JFCModelException;\n@@ -121,1 +123,5 @@\n-        return JFCParser.createConfiguration(name, reader);\n+        try {\n+            return JFCParser.createConfiguration(name, reader);\n+        } catch (ParseException pe) {\n+            throw new ParseException(\"Error reading JFC file. \" + pe.getMessage(), -1);\n+        }\n@@ -284,1 +290,29 @@\n-        return new FileReader(sf.toFile(), StandardCharsets.UTF_8);\n+        return Files.newBufferedReader(sf.toFile().toPath(), StandardCharsets.UTF_8);\n+    }\n+\n+    public static String formatException(String prefix, Exception e, String input) {\n+        String message = prefix + \" \" + JFC.exceptionToVerb(e) + \" file '\" + input + \"'\";\n+        String details = e.getMessage();\n+        if (e instanceof JFCModelException m) {\n+            return message +  \". \" + details;\n+        }\n+        if (e instanceof ParseException && !details.isEmpty()) {\n+            return message +  \". \" + details;\n+        }\n+        return message;\n+    }\n+\n+    private static String exceptionToVerb(Exception e) {\n+        if (e instanceof FileNotFoundException || e instanceof NoSuchFileException) {\n+            return \"find\";\n+        }\n+        if (e instanceof ParseException) {\n+            return \"parse\";\n+        }\n+        if (e instanceof JFCModelException) {\n+            return \"use\";\n+        }\n+        if (e instanceof AccessDeniedException) {\n+            return \"access\";\n+        }\n+        return \"open\";  \/\/ InvalidPath, IOException\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/JFC.java","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,6 +57,2 @@\n-        } catch (IllegalArgumentException iae) {\n-            throw new ParseException(iae.getMessage(), -1);\n-        } catch (SAXException e) {\n-            ParseException pe =  new ParseException(\"Error reading JFC file. \" + e.getMessage(), -1);\n-            pe.initCause(e);\n-            throw pe;\n+        } catch (IllegalArgumentException | SAXException e) {\n+            throw new ParseException(e.getMessage(), -1);\n@@ -72,1 +68,1 @@\n-    private static String readContent(Reader r) throws IOException {\n+    private static String readContent(Reader r) throws IOException, ParseException {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/JFCParser.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    private final Consumer<String> logger;\n@@ -48,1 +49,1 @@\n-    private JFCModel(XmlConfiguration configuration) throws ParseException {\n+    private JFCModel(XmlConfiguration configuration) throws JFCModelException {\n@@ -51,0 +52,1 @@\n+        this.logger = x -> { }; \/\/ Nothing to log.\n@@ -53,1 +55,1 @@\n-    public JFCModel(Reader reader,  Consumer<String> logger) throws ParseException, IOException {\n+    public JFCModel(Reader reader,  Consumer<String> logger) throws IOException, JFCModelException, ParseException {\n@@ -60,1 +62,1 @@\n-    public JFCModel(List<SafePath> files, Consumer<String> logger) throws IOException, ParseException {\n+    public JFCModel(Consumer<String> logger) {\n@@ -63,12 +65,10 @@\n-        for (SafePath file : files) {\n-            JFCModel model = JFCModel.create(file, logger);\n-            for (var entry : model.controls.entrySet()) {\n-                String name = entry.getKey();\n-                \/\/ Fail-fast checks that prevents an ambiguous file to be written later\n-                if (controls.containsKey(name)) {\n-                    throw new ParseException(\"Control with '\" + name + \"' is declared in multiple files\", 0);\n-                }\n-                controls.put(name, entry.getValue());\n-            }\n-            for (XmlElement child : model.configuration.getChildren()) {\n-                this.configuration.addChild(child);\n+        this.logger = logger;\n+    }\n+\n+    public void parse(SafePath file) throws IOException, JFCModelException, ParseException {\n+        JFCModel model = JFCModel.create(file, logger);\n+        for (var entry : model.controls.entrySet()) {\n+            String name = entry.getKey();\n+            \/\/ Fail-fast checks that prevents an ambiguous file to be written later\n+            if (controls.containsKey(name)) {\n+                throw new JFCModelException(\"Control with '\" + name + \"' is declared in multiple files\");\n@@ -76,0 +76,4 @@\n+            controls.put(name, entry.getValue());\n+        }\n+        for (XmlElement child : model.configuration.getChildren()) {\n+            this.configuration.addChild(child);\n@@ -79,1 +83,1 @@\n-    public static JFCModel create(SafePath file, Consumer<String> logger) throws ParseException, IOException {\n+    public static JFCModel create(SafePath file, Consumer<String> logger) throws IOException, JFCModelException, ParseException{\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/JFCModel.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.internal.jfc.model;\n+\/**\n+ * Signals that a JFCModel is invalid.\n+ *\/\n+public final class JFCModelException extends Exception {\n+    private static final long serialVersionUID = -613252344752758699L;\n+\n+    public JFCModelException(String errorMessage) {\n+        super(errorMessage);\n+    }\n+}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/JFCModelException.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-\n@@ -48,4 +47,2 @@\n-        } catch (SAXException sp) {\n-            ParseException pe = new ParseException(sp.getMessage(), -1);\n-            pe.initCause(sp);\n-            throw pe;\n+        } catch (SAXException | IllegalStateException e) {\n+            throw new ParseException(e.getMessage(), -1);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/Parser.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.text.ParseException;\n@@ -48,1 +47,1 @@\n-    protected void validateChildConstraints() throws ParseException {\n+    protected void validateChildConstraints() throws JFCModelException {\n@@ -50,1 +49,1 @@\n-            throw new ParseException(\"Expected <condition> to not have more than one child\", -1);\n+            throw new JFCModelException(\"Expected <condition> to not have more than one child\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlCondition.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.text.ParseException;\n@@ -88,1 +87,1 @@\n-    protected void validateAttributes() throws ParseException {\n+    protected void validateAttributes() throws JFCModelException {\n@@ -91,1 +90,1 @@\n-            throw new ParseException(\"Only .jfc files of version 2.0 is supported\", -1);\n+            throw new JFCModelException(\"Only .jfc files of version 2.0 is supported\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlConfiguration.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.text.ParseException;\n@@ -66,1 +65,1 @@\n-    final void validate() throws ParseException {\n+    final void validate() throws JFCModelException {\n@@ -182,1 +181,1 @@\n-    protected void validateAttributes() throws ParseException {\n+    protected void validateAttributes() throws JFCModelException {\n@@ -185,1 +184,1 @@\n-                throw new ParseException(\"Missing mandatory attribute '\" + key + \"'\", 0);\n+                throw new JFCModelException(\"Missing mandatory attribute '\" + key + \"'\");\n@@ -190,1 +189,1 @@\n-    private void validateChildren() throws ParseException {\n+    private void validateChildren() throws JFCModelException {\n@@ -196,1 +195,1 @@\n-    protected void validateChildConstraints() throws ParseException {\n+    protected void validateChildConstraints() throws JFCModelException {\n@@ -202,1 +201,1 @@\n-    private final void validateConstraint(Constraint c) throws ParseException {\n+    private final void validateConstraint(Constraint c) throws JFCModelException {\n@@ -206,1 +205,1 @@\n-            throw new ParseException(\"Missing mandatory element <\" + elementName + \">\", 0);\n+            throw new JFCModelException(\"Missing mandatory element <\" + elementName + \">\");\n@@ -210,1 +209,1 @@\n-            throw new ParseException(\"Too many elements of type <\" + elementName + \">\", 0);\n+            throw new JFCModelException(\"Too many elements of type <\" + elementName + \">\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlElement.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.text.ParseException;\n@@ -48,1 +47,1 @@\n-    protected void validateChildConstraints() throws ParseException {\n+    protected void validateChildConstraints() throws JFCModelException {\n@@ -50,1 +49,1 @@\n-            throw new ParseException(\"Expected + <\" + getElementName() + \"> to have at least two children\", 0);\n+            throw new JFCModelException(\"Expected + <\" + getElementName() + \"> to have at least two children\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlExpression.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.text.ParseException;\n@@ -39,1 +38,1 @@\n-    protected void validateChildConstraints() throws ParseException {\n+    protected void validateChildConstraints() throws JFCModelException {\n@@ -41,1 +40,1 @@\n-            throw new ParseException(\"Expected <not> to have a single child\", 0);\n+            throw new JFCModelException(\"Expected <not> to have a single child\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlNot.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.text.ParseException;\n@@ -56,1 +55,1 @@\n-    protected void validateChildConstraints() throws ParseException {\n+    protected void validateChildConstraints() throws JFCModelException {\n@@ -58,1 +57,1 @@\n-            throw new ParseException(\"Expected <test> to not have child elements\", 0);\n+            throw new JFCModelException(\"Expected <test> to not have child elements\");\n@@ -63,1 +62,1 @@\n-    protected void validateAttributes() throws ParseException {\n+    protected void validateAttributes() throws JFCModelException {\n@@ -66,1 +65,1 @@\n-            throw new ParseException(\"Unknown operator '\" + getOperator() + \"', only supported is 'equal'\", 0);\n+            throw new JFCModelException(\"Unknown operator '\" + getOperator() + \"', only supported is 'equal'\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.util.Arrays;\n@@ -40,1 +41,0 @@\n-import jdk.jfr.internal.SecuritySupport;\n@@ -45,0 +45,1 @@\n+import jdk.jfr.internal.jfc.model.JFCModelException;\n@@ -50,1 +51,1 @@\n-    private final List<SafePath> inputFiles = new ArrayList<>();\n+    private final List<String> inputFiles = new ArrayList<>();\n@@ -103,7 +104,2 @@\n-        for (SafePath path : inputFiles) {\n-            try {\n-                String name = path.toPath().getFileName().toString();\n-                displayParameters(stream, path, name);\n-            } catch (InvalidPathException | ParseException | IOException e) {\n-                stream.println(\"Unable read options for \" + path + \" \" + e.getMessage());\n-            }\n+        for (String name : inputFiles) {\n+            displayParameters(stream, name);\n@@ -129,2 +125,1 @@\n-    private void displayParameters(PrintStream stream, SafePath path, String name) throws ParseException, IOException {\n-        JFCModel parameters = JFCModel.create(path, l -> stream.println(\"Warning! \" + l));\n+    private void displayParameters(PrintStream stream, String name) {\n@@ -134,3 +129,9 @@\n-        for (XmlInput input : parameters.getInputs()) {\n-            stream.println(\"  \" + input.getOptionSyntax());\n-            stream.println();\n+        try {\n+            SafePath path = JFC.createSafePath(name);\n+            JFCModel parameters = JFCModel.create(path, l -> stream.println(\"Warning! \" + l));\n+            for (XmlInput input : parameters.getInputs()) {\n+                stream.println(\"  \" + input.getOptionSyntax());\n+                stream.println();\n+            }\n+        } catch (JFCModelException | InvalidPathException | ParseException | IOException e) {\n+            stream.println(JFC.formatException(\"  Could not\", e, name)); \/\/ indented\n@@ -156,1 +157,1 @@\n-                inputFiles.addAll(makeSafePathList(value));\n+                inputFiles.addAll(Arrays.asList(value.split(\",\")));\n@@ -193,0 +194,13 @@\n+        UserInterface ui = new UserInterface();\n+        if (log) {\n+            SettingsLog.enable();\n+        }\n+        JFCModel model = new JFCModel(l -> ui.println(\"Warning! \" + l));\n+        model.setLabel(\"Custom\");\n+        for (String input : inputFiles) {\n+            try {\n+                model.parse(JFC.createSafePath(input));\n+            } catch (InvalidPathException | IOException | JFCModelException | ParseException e) {\n+                throw new UserDataException(JFC.formatException(\"could not\", e, input));\n+            }\n+        }\n@@ -197,6 +211,0 @@\n-            UserInterface ui = new UserInterface();\n-            JFCModel model = new JFCModel(inputFiles, l -> ui.println(\"Warning! \" + l));\n-            model.setLabel(\"Custom\");\n-            if (log) {\n-                SettingsLog.enable();\n-            }\n@@ -230,9 +238,0 @@\n-        } catch (ParseException pe) {\n-            throw new UserDataException(\"parsing error: \" + pe.getMessage());\n-        }\n-    }\n-\n-    private List<SafePath> makeSafePathList(String value) {\n-        List<SafePath> paths = new ArrayList<>();\n-        for (String name : value.split(\",\")) {\n-            paths.add(JFC.createSafePath(name));\n@@ -240,1 +239,0 @@\n-        return paths;\n@@ -243,1 +241,0 @@\n-\n@@ -246,5 +243,1 @@\n-            for (SafePath predefined : SecuritySupport.getPredefinedJFCFiles()) {\n-                if (predefined.toString().endsWith(\"default.jfc\")) {\n-                    inputFiles.add(predefined);\n-                }\n-            }\n+            inputFiles.add(\"default.jfc\");\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Configure.java","additions":31,"deletions":38,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-        output.shouldContain(\"Could not parse setting\");\n+        output.shouldContain(\"Could not find file\");\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/JcmdAsserts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}