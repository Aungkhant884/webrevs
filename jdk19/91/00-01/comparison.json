{"files":[{"patch":"@@ -54,3 +54,3 @@\n- * <h2 id=\"safety\">Safety<\/h2>\n- * The {@code nextVarg} methods used to retrieve elements from a variable argument list\n- * will try to detect out-of-bounds reads on a best-effort basis.\n+ * <h2 id=\"safety\">Safety considerations<\/h2>\n+ * It is possible for clients to access elements outside the spatial bounds of a variable argument list.\n+ * Variable argument list implementations will try to detect out-of-bounds reads on a best-effort basis.\n@@ -58,3 +58,5 @@\n- * In practice, whether this detection succeeds depends on the method used to create the variable argument list.\n- * Particularly, variable argument lists created using {@link #make(Consumer, MemorySession)} are able to detect out-of-bounds reads,\n- * while variable argument lists crearted using {@link #ofAddress(MemoryAddress, MemorySession)} are not.\n+ * Whether this detection succeeds depends on the factory method used to create the variable argument list:\n+ * <ul>\n+ *     <li>Variable argument lists created <em>safely<\/em>, using {@link #make(Consumer, MemorySession)} are capable of detecting out-of-bounds reads;<\/li>\n+ *     <li>Variable argument lists created <em>unsafely<\/em>, using {@link #ofAddress(MemoryAddress, MemorySession)} are not capable of detecting out-of-bounds reads<\/li>\n+ * <\/ul>\n@@ -85,1 +87,1 @@\n-     * @throws NoSuchElementException if an out-of-bounds read is detected.\n+     * @throws NoSuchElementException if an <a href=VaList.hmtl#safety>out-of-bounds<\/a> read is detected.\n@@ -99,1 +101,1 @@\n-     * @throws NoSuchElementException if an out-of-bounds read is detected.\n+     * @throws NoSuchElementException if an <a href=VaList.hmtl#safety>out-of-bounds<\/a> read is detected.\n@@ -113,1 +115,1 @@\n-     * @throws NoSuchElementException if an out-of-bounds read is detected.\n+     * @throws NoSuchElementException if an <a href=VaList.hmtl#safety>out-of-bounds<\/a> read is detected.\n@@ -127,1 +129,1 @@\n-     * @throws NoSuchElementException if an out-of-bounds read is detected.\n+     * @throws NoSuchElementException if an <a href=VaList.hmtl#safety>out-of-bounds<\/a> read is detected.\n@@ -150,1 +152,1 @@\n-     * @throws NoSuchElementException if an out-of-bounds read is detected.\n+     * @throws NoSuchElementException if an <a href=VaList.hmtl#safety>out-of-bounds<\/a> read is detected.\n@@ -162,1 +164,1 @@\n-     * @throws NoSuchElementException if an out-of-bounds read is detected.\n+     * @throws NoSuchElementException if an <a href=VaList.hmtl#safety>out-of-bounds<\/a> read is detected.\n@@ -202,1 +204,1 @@\n-     * @implNote variable argument lists created using this method can not detect out-of-bound reads.\n+     * @implNote variable argument lists created using this method can not detect <a href=VaList.hmtl#safety>out-of-bounds<\/a> reads.\n@@ -233,1 +235,1 @@\n-     * @implNote variable argument lists created using this method can detect out-of-bound reads.\n+     * @implNote variable argument lists created using this method can detect <a href=VaList.hmtl#safety>out-of-bounds<\/a> reads.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-            checkRegAreaElement(layout, typeClass);\n+            checkRegSaveAreaElement(layout, typeClass);\n@@ -291,1 +291,1 @@\n-    private void checkRegAreaElement(MemoryLayout layout, TypeClass typeClass) {\n+    private void checkRegSaveAreaElement(MemoryLayout layout, TypeClass typeClass) {\n@@ -319,1 +319,1 @@\n-                checkRegAreaElement(layout, typeClass);\n+                checkRegSaveAreaElement(layout, typeClass);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}