{"files":[{"patch":"@@ -123,0 +123,3 @@\n+    \/\/ the following methods have to copy the same Javadoc as in MemoryLayout, or subclasses will just show\n+    \/\/ the Object methods javadoc\n+\n@@ -128,1 +131,1 @@\n-        return name.hashCode() << Long.hashCode(alignment);\n+        return Objects.hash(name, size, alignment);\n@@ -137,1 +140,2 @@\n-     *     <li>two value layouts are considered equal if they have the same byte order (see {@link ValueLayout#order()})<\/li>\n+     *     <li>two value layouts are considered equal if they have the same {@linkplain ValueLayout#order() order},\n+     *     and {@linkplain ValueLayout#carrier() carrier}<\/li>\n@@ -144,1 +148,1 @@\n-     * @param that the object to be compared for equality with this layout.\n+     * @param other the object to be compared for equality with this layout.\n@@ -148,2 +152,2 @@\n-    public boolean equals(Object that) {\n-        if (this == that) {\n+    public boolean equals(Object other) {\n+        if (this == other) {\n@@ -153,6 +157,4 @@\n-        if (!(that instanceof AbstractLayout)) {\n-            return false;\n-        }\n-\n-        return Objects.equals(name, ((AbstractLayout) that).name) &&\n-                Objects.equals(alignment, ((AbstractLayout) that).alignment);\n+        return other instanceof AbstractLayout otherLayout &&\n+                name.equals(otherLayout.name) &&\n+                size == otherLayout.size &&\n+                alignment == otherLayout.alignment;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/AbstractLayout.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -146,4 +146,3 @@\n-        if (!(other instanceof GroupLayout g)) {\n-            return false;\n-        }\n-        return kind.equals(g.kind) && elements.equals(g.elements);\n+        return other instanceof GroupLayout otherGroup &&\n+                kind == otherGroup.kind &&\n+                elements.equals(otherGroup.elements);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/GroupLayout.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -587,1 +587,2 @@\n-     *     <li>two value layouts are considered equal if they have the same byte order (see {@link ValueLayout#order()})<\/li>\n+     *     <li>two value layouts are considered equal if they have the same {@linkplain ValueLayout#order() order},\n+     *     and {@linkplain ValueLayout#carrier() carrier}<\/li>\n@@ -594,1 +595,1 @@\n-     * @param that the object to be compared for equality with this layout.\n+     * @param other the object to be compared for equality with this layout.\n@@ -597,1 +598,1 @@\n-    boolean equals(Object that);\n+    boolean equals(Object other);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -127,1 +127,0 @@\n-     * @throws UnsupportedOperationException if this sequence layout does not have an element count.\n@@ -190,2 +189,0 @@\n-     * @throws UnsupportedOperationException if this sequence layout, or one of the nested sequence layouts being\n-     * flattened, does not have an element count.\n@@ -217,4 +214,3 @@\n-        if (!(other instanceof SequenceLayout s)) {\n-            return false;\n-        }\n-        return elemCount == s.elemCount && elementLayout.equals(s.elementLayout);\n+        return other instanceof SequenceLayout otherSeq &&\n+                elemCount == otherSeq.elemCount &&\n+                elementLayout.equals(otherSeq.elementLayout);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SequenceLayout.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -96,0 +96,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n@@ -105,0 +108,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n@@ -113,7 +119,3 @@\n-        if (!(other instanceof ValueLayout v)) {\n-            return false;\n-        }\n-        return carrier.equals(v.carrier) &&\n-            order.equals(v.order) &&\n-            bitSize() == v.bitSize() &&\n-            alignment == v.alignment;\n+        return other instanceof ValueLayout otherValue &&\n+                carrier.equals(otherValue.carrier) &&\n+                order.equals(otherValue.order);\n@@ -174,1 +176,1 @@\n-     * @throws UnsupportedOperationException if the layout path has one or more elements with incompatible alignment constraints.\n+     * @throws UnsupportedOperationException if {@code bitAlignment() > bitSize()}.\n@@ -201,0 +203,3 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n@@ -203,1 +208,1 @@\n-        return Objects.hash(super.hashCode(), order, bitSize(), alignment);\n+        return Objects.hash(super.hashCode(), order, carrier);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"}]}