{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Collections;\n@@ -35,1 +36,0 @@\n-import java.util.Map.Entry;\n@@ -163,2 +163,2 @@\n-        for (Entry<ThrowsTree, ExecutableElement> entry : throwsTags.entrySet()) {\n-            Element e = entry.getValue();\n+        Map<ThrowsTree, ExecutableElement> flattenedExceptions = flatten(throwsTags, writer);\n+        flattenedExceptions.forEach((ThrowsTree t, ExecutableElement e) -> {\n@@ -166,3 +166,2 @@\n-            ThrowsTree tag = entry.getKey();\n-            Element te = ch.getException(tag);\n-            String excName = tag.getExceptionName().toString();\n+            Element te = ch.getException(t);\n+            String excName = t.getExceptionName().toString();\n@@ -173,1 +172,1 @@\n-                continue;\n+                return;\n@@ -178,1 +177,1 @@\n-            result.add(writer.throwsTagOutput(e, tag, substituteType));\n+            result.add(writer.throwsTagOutput(e, t, substituteType));\n@@ -186,1 +185,1 @@\n-        }\n+        });\n@@ -191,0 +190,46 @@\n+    \/*\n+     * A single @throws tag from an overriding method can correspond to multiple\n+     * @throws tags from an overridden method.\n+     *\/\n+    private Map<ThrowsTree, ExecutableElement> flatten(Map<ThrowsTree, ExecutableElement> throwsTags,\n+                                                       TagletWriter writer) {\n+        Map<ThrowsTree, ExecutableElement> result = new LinkedHashMap<>();\n+        throwsTags.forEach((tag, taggedElement) -> {\n+            var expandedTags = expand(tag, taggedElement, writer);\n+            assert Collections.disjoint(result.entrySet(), expandedTags.entrySet());\n+            result.putAll(expandedTags);\n+        });\n+        return result;\n+    }\n+\n+    private Map<ThrowsTree, ExecutableElement> expand(ThrowsTree tag,\n+                                                      ExecutableElement e,\n+                                                      TagletWriter writer) {\n+\n+        \/\/ This method uses Map.of() to create maps of size zero and one.\n+        \/\/ While such maps are effectively ordered, the syntax is more\n+        \/\/ compact than that of LinkedHashMap.\n+\n+        \/\/ peek into @throws description\n+        if (tag.getDescription().stream().noneMatch(d -> d.getKind() == DocTree.Kind.INHERIT_DOC)) {\n+            \/\/ nothing to inherit\n+            return Map.of(tag, e);\n+        }\n+        var input = new DocFinder.Input(writer.configuration().utils, e, this, new DocFinder.DocTreeInfo(tag, e), false, true);\n+        var output = DocFinder.search(writer.configuration(), input);\n+        if (output.tagList.size() <= 1) {\n+            \/\/ outer code will handle this trivial case of inheritance\n+            return Map.of(tag, e);\n+        }\n+        if (tag.getDescription().size() > 1) {\n+            \/\/ there's more to description than just {@inheritDoc}\n+            \/\/ it's likely a documentation error\n+            var ch = writer.configuration().utils.getCommentHelper(e);\n+            writer.configuration().getMessages().error(ch.getDocTreePath(tag), \"doclet.inheritDocWithinInappropriateTag\");\n+            return Map.of();\n+        }\n+        Map<ThrowsTree, ExecutableElement> tags = new LinkedHashMap<>();\n+        output.tagList.forEach(t -> tags.put((ThrowsTree) t, (ExecutableElement) output.holder));\n+        return tags;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":54,"deletions":9,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8067757\n+ * @bug 8067757 6509045\n@@ -353,0 +353,214 @@\n+\n+    @Test\n+    public void testUncheckedExceptionTag(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                public class MyRuntimeException extends RuntimeException { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException if this\n+                     * @throws MyRuntimeException if that\n+                     *\/\n+                    void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I1 extends I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException {@inheritDoc}\n+                     *\/\n+                    @Override\n+                    void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class IImpl implements I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException {@inheritDoc}\n+                     *\/\n+                    @Override\n+                    public void m() { }\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C {\n+\n+                    \/**\n+                     * @throws MyRuntimeException if this\n+                     * @throws MyRuntimeException if that\n+                     *\/\n+                    public void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public class C1 extends C {\n+\n+                    \/**\n+                     * @throws MyRuntimeException {@inheritDoc}\n+                     *\/\n+                    @Override\n+                    public void m() { }\n+                }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"x\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"x\/IImpl.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/I1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/C1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Overrides:<\/dt>\n+                <dd><code><a href=\"C.html#m()\">m<\/a><\/code>&nbsp;in class&nbsp;<code><a href=\"C.html\" title=\"class in x\">C<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if this<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - if that<\/dd>\n+                <\/dl>\"\"\");\n+    }\n+\n+    @Test\n+    public void testWholeShebang(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                public class MyRuntimeException extends RuntimeException { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException always\n+                     *\/\n+                    void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I1 extends I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException sometimes\n+                     * @throws MyRuntimeException rarely\n+                     * @throws MyRuntimeException \"{@inheritDoc}\"\n+                     *\/\n+                    @Override\n+                    void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I2 extends I1 {\n+\n+                    \/**\n+                     * @throws MyRuntimeException occasionally\n+                     * @throws MyRuntimeException {@inheritDoc}\n+                     * @throws MyRuntimeException frequently\n+                     *\/\n+                    @Override\n+                    void m() throws MyRuntimeException,\n+                                    MyRuntimeException,\n+                                    MyRuntimeException,\n+                                    MyRuntimeException;\n+                }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"x\");\n+        checkExit(Exit.OK);\n+        checkOutput(\"x\/I.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - always<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/I1.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - sometimes<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - rarely<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - \"always\"<\/dd>\n+                <\/dl>\"\"\");\n+        checkOutput(\"x\/I2.html\", true, \"\"\"\n+                <dl class=\"notes\">\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I.html\" title=\"interface in x\">I<\/a><\/code><\/dd>\n+                <dt>Specified by:<\/dt>\n+                <dd><code><a href=\"I1.html#m()\">m<\/a><\/code>&nbsp;in interface&nbsp;<code><a href=\"I1.html\" title=\"interface in x\">I1<\/a><\/code><\/dd>\n+                <dt>Throws:<\/dt>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - occasionally<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - sometimes<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - rarely<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - \"always\"<\/dd>\n+                <dd><code><a href=\"MyRuntimeException.html\" title=\"class in x\">MyRuntimeException<\/a><\/code> - frequently<\/dd>\n+                <\/dl>\"\"\");\n+    }\n+\n+    @Test\n+    public void testError(Path base) throws Exception {\n+        var src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                package x;\n+\n+                public class MyRuntimeException extends RuntimeException { }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException sometimes\n+                     * @throws MyRuntimeException rarely\n+                     *\/\n+                    void m();\n+                }\n+                \"\"\", \"\"\"\n+                package x;\n+\n+                public interface I1 extends I {\n+\n+                    \/**\n+                     * @throws MyRuntimeException \"{@inheritDoc}\"\n+                     *\/\n+                    @Override\n+                    void m();\n+                }\n+                \"\"\");\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"x\");\n+        checkExit(Exit.ERROR);\n+        checkOutput(Output.OUT, true, \"\"\"\n+                I1.java:6: error: @inheritDoc cannot be used within this tag\n+                     * @throws MyRuntimeException \"{@inheritDoc}\"\n+                       ^\n+                       \"\"\");\n+    }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testThrowsInheritanceMultiple\/TestOneToMany.java","additions":215,"deletions":1,"binary":false,"changes":216,"status":"modified"}]}