{"files":[{"patch":"@@ -1393,0 +1393,1 @@\n+          op == Op_LShiftI ||\n@@ -1407,0 +1408,2 @@\n+  uint init = 0;\n+  uint stride = 0;\n@@ -1419,2 +1422,4 @@\n-    if (n->is_Opaque1()) {\n-      return true;\n+    if (n->Opcode() == Op_OpaqueLoopInit) {\n+      init++;\n+    } else if (n->Opcode() == Op_OpaqueLoopStride) {\n+      stride++;\n@@ -1423,1 +1428,27 @@\n-  return false;\n+#ifdef ASSERT\n+  wq.clear();\n+  wq.push(iff->in(1)->in(1));\n+  uint verif_init = 0;\n+  uint verif_stride = 0;\n+  for (uint i = 0; i < wq.size(); i++) {\n+    Node* n = wq.at(i);\n+    int op = n->Opcode();\n+    if (!n->is_CFG()) {\n+      if (n->Opcode() == Op_OpaqueLoopInit) {\n+        verif_init++;\n+      } else if (n->Opcode() == Op_OpaqueLoopStride) {\n+        verif_stride++;\n+      } else {\n+        for (uint j = 1; j < n->req(); j++) {\n+          Node* m = n->in(j);\n+          if (m != NULL) {\n+            wq.push(m);\n+          }\n+        }\n+      }\n+    }\n+  }\n+  assert(init == verif_init && stride == verif_stride, \"missed opaque node\");\n+#endif\n+  assert(stride == 0 || init != 0, \"init should be there every time stride is\");\n+  return init != 0;\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8289127\n+ * @summary Apache Lucene triggers: DEBUG MESSAGE: duplicated predicate failed which is impossible\n+ * @run main\/othervm -XX:-BackgroundCompilation -XX:-UseOnStackReplacement -XX:-TieredCompilation TestMissedOpaqueInPredicate\n+ *\/\n+\n+public class TestMissedOpaqueInPredicate {\n+    public static void main(String[] args) {\n+        long[] tmp = new long[28];\n+        long[] longs = new long[32];\n+        for (int i = 0; i < 20_000; i++) {\n+            test(tmp, longs);\n+        }\n+    }\n+\n+    private static void test(long[] tmp, long[] longs) {\n+        for (int iter = 0, tmpIdx = 0, longsIdx = 28; iter < 4; ++iter, tmpIdx += 7, longsIdx += 1) {\n+            long l0 = tmp[tmpIdx + 0] << 12;\n+            l0 |= tmp[tmpIdx + 1] << 10;\n+            l0 |= tmp[tmpIdx + 2] << 8;\n+            l0 |= tmp[tmpIdx + 3] << 6;\n+            l0 |= tmp[tmpIdx + 4] << 4;\n+            l0 |= tmp[tmpIdx + 5] << 2;\n+            l0 |= tmp[tmpIdx + 6] << 0;\n+            longs[longsIdx + 0] = l0;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMissedOpaqueInPredicate.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"}]}