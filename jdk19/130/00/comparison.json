{"files":[{"patch":"@@ -417,1 +417,3 @@\n-    cl->set_slp_max_unroll(local_loop_unroll_factor);\n+    if (cl->is_main_loop() || cl->is_rce_post_loop()) {\n+      cl->set_slp_max_unroll(local_loop_unroll_factor);\n+    }\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8289954\n+ * @summary C2: Assert failed in PhaseCFG::verify() after JDK-8183390\n+ *\n+ * @run main\/othervm -Xcomp -Xbatch\n+ *      -XX:CompileOnly=compiler\/loopopts\/TestUnreachableInnerLoop\n+ *      compiler.loopopts.TestUnreachableInnerLoop\n+ *\/\n+\n+package compiler.loopopts;\n+\n+public class TestUnreachableInnerLoop {\n+\n+    public static int field = 0;\n+    public static int arr[] = new int[500];\n+\n+    public static void fun() {\n+        for (int elem : arr) {\n+            int x = 1, y = 2, z = 3;\n+            int i, j;\n+\n+            \/\/ This is a good loop\n+            for (i = 2; i < 63; i++) {\n+                arr[i] = arr[i] + 3592870;\n+            }\n+\n+            \/\/ The inner loop looks quite complex but it's unreachable\n+            \/\/ code as loop condition \"k < 2\" never satisfies\n+            for (j = 3; j < 63; j++) {\n+                for (int k = j; k < 2; k++) {\n+                    arr[j] <<= k;\n+                    try {\n+                        x = k \/ i;\n+                        y = j % 6;\n+                        arr[k] = 88 % elem;\n+                    } catch (ArithmeticException ex) {}\n+                    switch (2) {\n+                        case 2: {\n+                            try {\n+                                y = arr[j] % y;\n+                                z = x \/ 2345;\n+                                elem = j % -2;\n+                            } catch (ArithmeticException ex) {}\n+                            break;\n+                        }\n+                        case 3: {\n+                            y = arr[j] \/ 2;\n+                            z -= k;\n+                            break;\n+                        }\n+                    }\n+                    arr[100] -= j;\n+                    field += k;\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        fun();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestUnreachableInnerLoop.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}