{"files":[{"patch":"@@ -1323,0 +1323,2 @@\n+  *jt_pp = java_thread;\n+  *thread_oop_p = thread_oop;\n@@ -1327,2 +1329,0 @@\n-  *jt_pp = java_thread;\n-  *thread_oop_p = thread_oop;\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        if (!check(t, t.isVirtual() ? NOT_STARTED : ZOMBIE)) {\n+        if (!check(t, ZOMBIE)) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/thread\/GetThreadState\/thrstat03\/thrstat03.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,6 @@\n+    \/\/ Tested JVM TI thread states\n+    static final int NEW        = 0;        \/\/ No bits are set\n+    static final int TERMINATED = 2;        \/\/ JVMTI_THREAD_STATE_TERMINATED\n+    static final int RUNNABLE   = 5;        \/\/ JVMTI_THREAD_STATE_ALIVE & JVMTI_THREAD_STATE_RUNNABLE\n+    static final int SUSPENDED  = 0x100005; \/\/ RUNNABLE & JVMTI_THREAD_STATE_SUSPENDED\n+\n@@ -44,1 +50,1 @@\n-\n+    native static int getThreadState(Thread thread);\n@@ -54,0 +60,11 @@\n+    private static void testJvmtiThreadState(Thread thread, int expectedState) throws RuntimeException {\n+        String kindStr = thread.isVirtual()? \"virtual \" : \"platform\";\n+        int state = getThreadState(thread);\n+\n+        System.out.printf(\"Expected %s thread state: %06X got: %06X\\n\",\n+                          kindStr, expectedState, state);\n+        if (state != expectedState) {\n+            throw new RuntimeException(\"Test FAILED: Unexpected thread state\");\n+        }\n+    }\n+\n@@ -55,1 +72,2 @@\n-        Thread t1 = Thread.ofPlatform().start(() -> {\n+        Thread t1 = Thread.ofPlatform().factory().newThread(() -> {\n+            testJvmtiThreadState(Thread.currentThread(), RUNNABLE);\n@@ -58,1 +76,2 @@\n-        Thread t2 = Thread.ofVirtual().start(() -> {\n+        Thread t2 = Thread.ofVirtual().factory().newThread(() -> {\n+            testJvmtiThreadState(Thread.currentThread(), RUNNABLE);\n@@ -63,0 +82,3 @@\n+\n+            testJvmtiThreadState(t1, SUSPENDED);\n+\n@@ -64,0 +86,3 @@\n+\n+            testJvmtiThreadState(t1, RUNNABLE);\n+\n@@ -67,0 +92,6 @@\n+        testJvmtiThreadState(t1, NEW);\n+        testJvmtiThreadState(t2, NEW);\n+\n+        t1.start();\n+        t2.start();\n+\n@@ -70,0 +101,3 @@\n+\n+        testJvmtiThreadState(t2, SUSPENDED);\n+\n@@ -74,0 +108,3 @@\n+\n+        testJvmtiThreadState(t1, TERMINATED);\n+        testJvmtiThreadState(t2, TERMINATED);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SelfSuspendDisablerTest\/SelfSuspendDisablerTest.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -61,0 +61,7 @@\n+JNIEXPORT jint JNICALL\n+Java_SelfSuspendDisablerTest_getThreadState(JNIEnv* jni, jclass cls, jthread thread) {\n+  jint state;\n+  check_jvmti_status(jni, jvmti->GetThreadState(thread, &state), \"Error in GetThreadState\");\n+  return state;\n+}\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/SelfSuspendDisablerTest\/libSelfSuspendDisablerTest.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}