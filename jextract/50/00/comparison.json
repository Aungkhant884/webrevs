{"files":[{"patch":"@@ -127,12 +127,12 @@\n-| Option                                                             | Meaning                                                      |\n-|:-------------------------------------------------------------------| ------------------------------------------------------------ |\n-| `-D <macro>`                                                       | define a C preprocessor macro                                |\n-| `--header-class-name <name>`                                       | specify the name of the main header class                    |\n-| `-t, --target-package <package>`                                   | specify target package for the generated bindings            |\n-| `-I <path>`                                                        | specify include files path for the clang parser              |\n-| `-l <library>`                                                     | specify a library that will be loaded by the generated bindings |\n-| `--output <path>`                                                  | specify where to place generated files                       |\n-| `--source`                                                         | generate java sources instead of classfiles                  |\n-| `--dump-includes <String>`                                         | dump included symbols into specified file (see below)        |\n-| `--include-[function,enum,macro,struct,union,typedef,var]<String>` | Include a symbol of the given name and kind in the generated bindings (see below). When one of these options is specified, any symbol that is not matched by any specified filters is omitted from the generated bindings. |\n-| `--version`                                                        | print version information and exit                           |\n+| Option                                                       | Meaning                                                      |\n+| :----------------------------------------------------------- | ------------------------------------------------------------ |\n+| `-D <macro>`                                                 | define a C preprocessor macro                                |\n+| `--header-class-name <name>`                                 | specify the name of the main header class                    |\n+| `-t, --target-package <package>`                             | specify target package for the generated bindings            |\n+| `-I <path>`                                                  | specify include files path for the clang parser              |\n+| `-l <library>`                                               | specify a library that will be loaded by the generated bindings |\n+| `--output <path>`                                            | specify where to place generated files                       |\n+| `--source`                                                   | generate java sources instead of classfiles                  |\n+| `--dump-includes <String>`                                   | dump included symbols into specified file (see below)        |\n+| `--include-[function,macro,struct,union,typedef,var]<String>` | Include a symbol of the given name and kind in the generated bindings (see below). When one of these options is specified, any symbol that is not matched by any specified filters is omitted from the generated bindings. |\n+| `--version`                                                  | print version information and exit                           |\n","filename":"README.md","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-        UNION,\n-        ENUM;\n+        UNION;\n@@ -81,1 +80,0 @@\n-                case ENUM -> IncludeKind.ENUM;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/IncludeHelper.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -173,5 +173,2 @@\n-        boolean isEnumConstant = parent instanceof Declaration.Scoped scoped &&\n-                scoped.kind() == Declaration.Scoped.Kind.ENUM;\n-\n-        if ((!isEnumConstant && !includeHelper.isIncluded(constant)) ||\n-                !constants.add(constant.name())) {\n+        if (!constants.add(constant.name()) || !includeHelper.isIncluded(constant)) {\n+            \/\/skip\n@@ -202,4 +199,0 @@\n-        String scopedName = d.name();\n-        if (!scopedName.isEmpty() && !includeHelper.isIncluded(d)) {\n-            return null;\n-        }\n@@ -208,0 +201,4 @@\n+            String className = d.name();\n+            if (!className.isEmpty() && !includeHelper.isIncluded(d)) {\n+                return null;\n+            }\n@@ -209,1 +206,1 @@\n-            currentBuilder = structBuilder = currentBuilder.addStruct(scopedName, parent, layout, Type.declared(d));\n+            currentBuilder = structBuilder = currentBuilder.addStruct(className, parent, layout, Type.declared(d));\n@@ -211,1 +208,1 @@\n-            if (!scopedName.isEmpty()) {\n+            if (!className.isEmpty()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-help.include-enum=name of enum definition to include\n@@ -60,1 +59,0 @@\n---include-enum <name>          name of enum definition to include        \\n\\\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.reflect.Method;\n@@ -96,2 +95,1 @@\n-        UNION(\"_union\", \"--include-union\"),\n-        ENUM(\"_enum\", \"--include-enum\");\n+        UNION(\"_union\", \"--include-union\");\n@@ -119,9 +117,0 @@\n-                case ENUM -> {\n-                    String[] constantNames = { \"one\", \"two\", \"three\" };\n-                    Method method = null;\n-                    for (String c : constantNames) {\n-                        method = findMethod(headerClass, c);\n-                        if (method == null) break;\n-                    }\n-                    yield method;\n-                }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestFilters.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-enum _enum { one = 1, two = 2, three = 3 };\n-\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/filters.h","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}