{"files":[{"patch":"@@ -116,0 +116,4 @@\n+    public boolean isFunctionInlined() {\n+        return Index_h.clang_Cursor_isFunctionInlined(segment) != 0;\n+    }\n+\n@@ -169,0 +173,4 @@\n+    public LinkageKind linkage() {\n+        return LinkageKind.valueOf(Index_h.clang_getCursorLinkage(segment));\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ *  Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.  Oracle designates this\n+ *  particular file as subject to the \"Classpath\" exception as provided\n+ *  by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+package org.openjdk.jextract.clang;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import static org.openjdk.jextract.clang.libclang.Index_h.*;\n+\n+public enum LinkageKind {\n+    Invalid(CXLinkage_Invalid()),\n+    NoLinkage(CXLinkage_NoLinkage()),\n+    Internal(CXLinkage_Internal()),\n+    UniqueExternal(CXLinkage_UniqueExternal()),\n+    External(CXLinkage_External());\n+\n+    private final int value;\n+\n+    LinkageKind(int value) {\n+        this.value = value;\n+    }\n+\n+    public int value() {\n+        return value;\n+    }\n+\n+    private final static Map<Integer, LinkageKind> lookup;\n+\n+    static {\n+        lookup = new HashMap<>();\n+        for (LinkageKind e: LinkageKind.values()) {\n+            lookup.put(e.value(), e);\n+        }\n+    }\n+\n+    public final static LinkageKind valueOf(int value) {\n+        LinkageKind x = lookup.get(value);\n+        if (null == x) {\n+            throw new NoSuchElementException(\"Invalid Cursor kind value: \" + value);\n+        }\n+        return x;\n+    }\n+}\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/LinkageKind.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -45,1 +45,1 @@\n-                return (int)constants$13.CXCursorVisitor$MH.invokeExact((MemorySegment)symbol, _cursor, _parent, (java.lang.foreign.MemorySegment)_client_data);\n+                return (int)constants$13.CXCursorVisitor$MH.invokeExact((MemorySegment)symbol, _cursor, _parent, _client_data);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+    static final  StructLayout $struct$LAYOUT = MemoryLayout.structLayout(\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+    static final  StructLayout $struct$LAYOUT = MemoryLayout.structLayout(\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+    static final  StructLayout $struct$LAYOUT = MemoryLayout.structLayout(\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(\n+    static final  StructLayout $struct$LAYOUT = MemoryLayout.structLayout(\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1423,0 +1423,26 @@\n+    public static int CXLinkage_Invalid() {\n+        return (int)0L;\n+    }\n+    public static int CXLinkage_NoLinkage() {\n+        return (int)1L;\n+    }\n+    public static int CXLinkage_Internal() {\n+        return (int)2L;\n+    }\n+    public static int CXLinkage_UniqueExternal() {\n+        return (int)3L;\n+    }\n+    public static int CXLinkage_External() {\n+        return (int)4L;\n+    }\n+    public static MethodHandle clang_getCursorLinkage$MH() {\n+        return RuntimeHelper.requireNonNull(constants$6.clang_getCursorLinkage$MH,\"clang_getCursorLinkage\");\n+    }\n+    public static int clang_getCursorLinkage ( MemorySegment cursor) {\n+        var mh$ = clang_getCursorLinkage$MH();\n+        try {\n+            return (int)mh$.invokeExact(cursor);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -1436,1 +1462,1 @@\n-        return RuntimeHelper.requireNonNull(constants$6.clang_getCursorLanguage$MH,\"clang_getCursorLanguage\");\n+        return RuntimeHelper.requireNonNull(constants$7.clang_getCursorLanguage$MH,\"clang_getCursorLanguage\");\n@@ -1916,1 +1942,1 @@\n-        return RuntimeHelper.requireNonNull(constants$7.clang_getTypedefDeclUnderlyingType$MH,\"clang_getTypedefDeclUnderlyingType\");\n+        return RuntimeHelper.requireNonNull(constants$8.clang_getTypedefDeclUnderlyingType$MH,\"clang_getTypedefDeclUnderlyingType\");\n@@ -1982,1 +2008,1 @@\n-        return RuntimeHelper.requireNonNull(constants$8.clang_Cursor_getArgument$MH,\"clang_Cursor_getArgument\");\n+        return RuntimeHelper.requireNonNull(constants$9.clang_Cursor_getArgument$MH,\"clang_Cursor_getArgument\");\n@@ -2036,0 +2062,11 @@\n+    public static MethodHandle clang_Cursor_isFunctionInlined$MH() {\n+        return RuntimeHelper.requireNonNull(constants$9.clang_Cursor_isFunctionInlined$MH,\"clang_Cursor_isFunctionInlined\");\n+    }\n+    public static int clang_Cursor_isFunctionInlined ( MemorySegment C) {\n+        var mh$ = clang_Cursor_isFunctionInlined$MH();\n+        try {\n+            return (int)mh$.invokeExact(C);\n+        } catch (Throwable ex$) {\n+            throw new AssertionError(\"should not reach here\", ex$);\n+        }\n+    }\n@@ -2037,1 +2074,1 @@\n-        return RuntimeHelper.requireNonNull(constants$9.clang_isVolatileQualifiedType$MH,\"clang_isVolatileQualifiedType\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_isVolatileQualifiedType$MH,\"clang_isVolatileQualifiedType\");\n@@ -2048,1 +2085,1 @@\n-        return RuntimeHelper.requireNonNull(constants$9.clang_getTypedefName$MH,\"clang_getTypedefName\");\n+        return RuntimeHelper.requireNonNull(constants$10.clang_getTypedefName$MH,\"clang_getTypedefName\");\n@@ -2103,1 +2140,1 @@\n-        return RuntimeHelper.requireNonNull(constants$10.clang_getResultType$MH,\"clang_getResultType\");\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getResultType$MH,\"clang_getResultType\");\n@@ -2114,1 +2151,1 @@\n-        return RuntimeHelper.requireNonNull(constants$10.clang_getNumArgTypes$MH,\"clang_getNumArgTypes\");\n+        return RuntimeHelper.requireNonNull(constants$11.clang_getNumArgTypes$MH,\"clang_getNumArgTypes\");\n@@ -2169,1 +2206,1 @@\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getNumElements$MH,\"clang_getNumElements\");\n+        return RuntimeHelper.requireNonNull(constants$12.clang_getNumElements$MH,\"clang_getNumElements\");\n@@ -2180,1 +2217,1 @@\n-        return RuntimeHelper.requireNonNull(constants$11.clang_getArrayElementType$MH,\"clang_getArrayElementType\");\n+        return RuntimeHelper.requireNonNull(constants$12.clang_getArrayElementType$MH,\"clang_getArrayElementType\");\n@@ -2265,1 +2302,1 @@\n-        return RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isAnonymousRecordDecl$MH,\"clang_Cursor_isAnonymousRecordDecl\");\n+        return RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isAnonymousRecordDecl$MH,\"clang_Cursor_isAnonymousRecordDecl\");\n@@ -2276,1 +2313,1 @@\n-        return RuntimeHelper.requireNonNull(constants$12.clang_Cursor_isBitField$MH,\"clang_Cursor_isBitField\");\n+        return RuntimeHelper.requireNonNull(constants$13.clang_Cursor_isBitField$MH,\"clang_Cursor_isBitField\");\n@@ -2318,1 +2355,1 @@\n-        return RuntimeHelper.requireNonNull(constants$13.clang_getCursorSpelling$MH,\"clang_getCursorSpelling\");\n+        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorSpelling$MH,\"clang_getCursorSpelling\");\n@@ -2410,1 +2447,1 @@\n-        return RuntimeHelper.requireNonNull(constants$13.clang_PrintingPolicy_getProperty$MH,\"clang_PrintingPolicy_getProperty\");\n+        return RuntimeHelper.requireNonNull(constants$14.clang_PrintingPolicy_getProperty$MH,\"clang_PrintingPolicy_getProperty\");\n@@ -2465,1 +2502,1 @@\n-        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n+        return RuntimeHelper.requireNonNull(constants$15.clang_getCursorDisplayName$MH,\"clang_getCursorDisplayName\");\n@@ -2476,1 +2513,1 @@\n-        return RuntimeHelper.requireNonNull(constants$14.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n+        return RuntimeHelper.requireNonNull(constants$15.clang_getCursorReferenced$MH,\"clang_getCursorReferenced\");\n@@ -2546,1 +2583,1 @@\n-        return RuntimeHelper.requireNonNull(constants$15.clang_getTokenKind$MH,\"clang_getTokenKind\");\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getTokenKind$MH,\"clang_getTokenKind\");\n@@ -2557,1 +2594,1 @@\n-        return RuntimeHelper.requireNonNull(constants$15.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n+        return RuntimeHelper.requireNonNull(constants$16.clang_getTokenSpelling$MH,\"clang_getTokenSpelling\");\n@@ -2612,1 +2649,1 @@\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n+        return RuntimeHelper.requireNonNull(constants$17.clang_getCursorKindSpelling$MH,\"clang_getCursorKindSpelling\");\n@@ -2623,1 +2660,1 @@\n-        return RuntimeHelper.requireNonNull(constants$16.clang_getClangVersion$MH,\"clang_getClangVersion\");\n+        return RuntimeHelper.requireNonNull(constants$17.clang_getClangVersion$MH,\"clang_getClangVersion\");\n@@ -2678,1 +2715,1 @@\n-        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n+        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_getAsLongLong$MH,\"clang_EvalResult_getAsLongLong\");\n@@ -2689,1 +2726,1 @@\n-        return RuntimeHelper.requireNonNull(constants$17.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n+        return RuntimeHelper.requireNonNull(constants$18.clang_EvalResult_isUnsignedInt$MH,\"clang_EvalResult_isUnsignedInt\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":58,"deletions":21,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -34,1 +33,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -144,1 +142,3 @@\n-            if (mtype.returnType().equals(MemorySegment.class)) {\n+            boolean needsAllocator = function.returnLayout().isPresent() &&\n+                                function.returnLayout().get() instanceof GroupLayout;\n+            if (needsAllocator) {\n@@ -154,2 +154,1 @@\n-                return (ret || valueLayout.carrier() != MemorySegment.class) ?\n-                        valueLayout.carrier() : MemorySegment.class;\n+                return valueLayout.carrier();\n@@ -190,1 +189,3 @@\n-            if (mh.type().returnType() == MemorySegment.class) {\n+            boolean needsAllocator = function.returnLayout().isPresent() &&\n+                                            function.returnLayout().get() instanceof GroupLayout;\n+            if (needsAllocator) {\n@@ -240,4 +241,1 @@\n-            if (MemorySegment.class.isAssignableFrom(c)) {\n-                return MemorySegment.class;\n-            }\n-            if (MemorySegment.class.isAssignableFrom(c)) {\n+            if (c == MemorySegment.class) {\n@@ -254,1 +252,1 @@\n-            } else if (MemorySegment.class.isAssignableFrom(c)) {\n+            } else if (c == MemorySegment.class) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,0 +37,26 @@\n+    static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_isVolatileQualifiedType$MH = RuntimeHelper.downcallHandle(\n+        \"clang_isVolatileQualifiedType\",\n+        constants$10.clang_isVolatileQualifiedType$FUNC\n+    );\n+    static final FunctionDescriptor clang_getTypedefName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTypedefName$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getTypedefName\",\n+        constants$10.clang_getTypedefName$FUNC\n+    );\n@@ -89,26 +115,0 @@\n-    static final FunctionDescriptor clang_getResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-        MemoryLayout.paddingLayout(32),\n-        MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getResultType$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getResultType\",\n-        constants$10.clang_getResultType$FUNC\n-    );\n-    static final FunctionDescriptor clang_getNumArgTypes$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getNumArgTypes$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getNumArgTypes\",\n-        constants$10.clang_getNumArgTypes$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$10.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -37,0 +37,26 @@\n+    static final FunctionDescriptor clang_getResultType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getResultType$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getResultType\",\n+        constants$11.clang_getResultType$FUNC\n+    );\n+    static final FunctionDescriptor clang_getNumArgTypes$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getNumArgTypes$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getNumArgTypes\",\n+        constants$11.clang_getNumArgTypes$FUNC\n+    );\n@@ -94,26 +120,0 @@\n-    static final FunctionDescriptor clang_getNumElements$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getNumElements$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getNumElements\",\n-        constants$11.clang_getNumElements$FUNC\n-    );\n-    static final FunctionDescriptor clang_getArrayElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-        MemoryLayout.paddingLayout(32),\n-        MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getArrayElementType$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getArrayElementType\",\n-        constants$11.clang_getArrayElementType$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$11.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -37,0 +37,26 @@\n+    static final FunctionDescriptor clang_getNumElements$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getNumElements$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getNumElements\",\n+        constants$12.clang_getNumElements$FUNC\n+    );\n+    static final FunctionDescriptor clang_getArrayElementType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            MemoryLayout.paddingLayout(32),\n+            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getArrayElementType$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getArrayElementType\",\n+        constants$12.clang_getArrayElementType$FUNC\n+    );\n@@ -82,22 +108,0 @@\n-    static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH = RuntimeHelper.downcallHandle(\n-        \"clang_Cursor_isAnonymousRecordDecl\",\n-        constants$12.clang_Cursor_isAnonymousRecordDecl$FUNC\n-    );\n-    static final FunctionDescriptor clang_Cursor_isBitField$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_Cursor_isBitField$MH = RuntimeHelper.downcallHandle(\n-        \"clang_Cursor_isBitField\",\n-        constants$12.clang_Cursor_isBitField$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$12.java","additions":26,"deletions":22,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -37,0 +37,22 @@\n+    static final FunctionDescriptor clang_Cursor_isAnonymousRecordDecl$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isAnonymousRecordDecl$MH = RuntimeHelper.downcallHandle(\n+        \"clang_Cursor_isAnonymousRecordDecl\",\n+        constants$13.clang_Cursor_isAnonymousRecordDecl$FUNC\n+    );\n+    static final FunctionDescriptor clang_Cursor_isBitField$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_Cursor_isBitField$MH = RuntimeHelper.downcallHandle(\n+        \"clang_Cursor_isBitField\",\n+        constants$13.clang_Cursor_isBitField$FUNC\n+    );\n@@ -81,23 +103,0 @@\n-    static final FunctionDescriptor clang_getCursorSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n-        MemoryLayout.paddingLayout(32)\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getCursorSpelling$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getCursorSpelling\",\n-        constants$13.clang_getCursorSpelling$FUNC\n-    );\n-    static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_INT$LAYOUT\n-    );\n-    static final MethodHandle clang_PrintingPolicy_getProperty$MH = RuntimeHelper.downcallHandle(\n-        \"clang_PrintingPolicy_getProperty\",\n-        constants$13.clang_PrintingPolicy_getProperty$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$13.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -37,0 +37,23 @@\n+    static final FunctionDescriptor clang_getCursorSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorSpelling$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getCursorSpelling\",\n+        constants$14.clang_getCursorSpelling$FUNC\n+    );\n+    static final FunctionDescriptor clang_PrintingPolicy_getProperty$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_INT$LAYOUT\n+    );\n+    static final MethodHandle clang_PrintingPolicy_getProperty$MH = RuntimeHelper.downcallHandle(\n+        \"clang_PrintingPolicy_getProperty\",\n+        constants$14.clang_PrintingPolicy_getProperty$FUNC\n+    );\n@@ -80,30 +103,0 @@\n-    static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n-        MemoryLayout.paddingLayout(32)\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getCursorDisplayName$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getCursorDisplayName\",\n-        constants$14.clang_getCursorDisplayName$FUNC\n-    );\n-    static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getCursorReferenced$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getCursorReferenced\",\n-        constants$14.clang_getCursorReferenced$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$14.java","additions":23,"deletions":30,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -37,0 +37,30 @@\n+    static final FunctionDescriptor clang_getCursorDisplayName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorDisplayName$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getCursorDisplayName\",\n+        constants$15.clang_getCursorDisplayName$FUNC\n+    );\n+    static final FunctionDescriptor clang_getCursorReferenced$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorReferenced$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getCursorReferenced\",\n+        constants$15.clang_getCursorReferenced$FUNC\n+    );\n@@ -89,25 +119,0 @@\n-    static final FunctionDescriptor clang_getTokenKind$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n-        MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName(\"int_data\"),\n-            Constants$root.C_POINTER$LAYOUT.withName(\"ptr_data\")\n-        )\n-    );\n-    static final MethodHandle clang_getTokenKind$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getTokenKind\",\n-        constants$15.clang_getTokenKind$FUNC\n-    );\n-    static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n-        MemoryLayout.paddingLayout(32)\n-    ),\n-        Constants$root.C_POINTER$LAYOUT,\n-        MemoryLayout.structLayout(\n-            MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName(\"int_data\"),\n-            Constants$root.C_POINTER$LAYOUT.withName(\"ptr_data\")\n-        )\n-    );\n-    static final MethodHandle clang_getTokenSpelling$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getTokenSpelling\",\n-        constants$15.clang_getTokenSpelling$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$15.java","additions":30,"deletions":25,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -37,0 +37,25 @@\n+    static final FunctionDescriptor clang_getTokenKind$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName(\"int_data\"),\n+            Constants$root.C_POINTER$LAYOUT.withName(\"ptr_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTokenKind$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getTokenKind\",\n+        constants$16.clang_getTokenKind$FUNC\n+    );\n+    static final FunctionDescriptor clang_getTokenSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        Constants$root.C_POINTER$LAYOUT,\n+        MemoryLayout.structLayout(\n+            MemoryLayout.sequenceLayout(4, Constants$root.C_INT$LAYOUT).withName(\"int_data\"),\n+            Constants$root.C_POINTER$LAYOUT.withName(\"ptr_data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTokenSpelling$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getTokenSpelling\",\n+        constants$16.clang_getTokenSpelling$FUNC\n+    );\n@@ -90,20 +115,0 @@\n-    static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n-        MemoryLayout.paddingLayout(32)\n-    ),\n-        Constants$root.C_INT$LAYOUT\n-    );\n-    static final MethodHandle clang_getCursorKindSpelling$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getCursorKindSpelling\",\n-        constants$16.clang_getCursorKindSpelling$FUNC\n-    );\n-    static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n-        MemoryLayout.paddingLayout(32)\n-    ));\n-    static final MethodHandle clang_getClangVersion$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getClangVersion\",\n-        constants$16.clang_getClangVersion$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$16.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -37,0 +37,20 @@\n+    static final FunctionDescriptor clang_getCursorKindSpelling$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ),\n+        Constants$root.C_INT$LAYOUT\n+    );\n+    static final MethodHandle clang_getCursorKindSpelling$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getCursorKindSpelling\",\n+        constants$17.clang_getCursorKindSpelling$FUNC\n+    );\n+    static final FunctionDescriptor clang_getClangVersion$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n+        MemoryLayout.paddingLayout(32)\n+    ));\n+    static final MethodHandle clang_getClangVersion$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getClangVersion\",\n+        constants$17.clang_getClangVersion$FUNC\n+    );\n@@ -69,14 +89,0 @@\n-    static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n-    );\n-    static final MethodHandle clang_EvalResult_getAsLongLong$MH = RuntimeHelper.downcallHandle(\n-        \"clang_EvalResult_getAsLongLong\",\n-        constants$17.clang_EvalResult_getAsLongLong$FUNC\n-    );\n-    static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n-    );\n-    static final MethodHandle clang_EvalResult_isUnsignedInt$MH = RuntimeHelper.downcallHandle(\n-        \"clang_EvalResult_isUnsignedInt\",\n-        constants$17.clang_EvalResult_isUnsignedInt$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$17.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -37,0 +37,14 @@\n+    static final FunctionDescriptor clang_EvalResult_getAsLongLong$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n+    );\n+    static final MethodHandle clang_EvalResult_getAsLongLong$MH = RuntimeHelper.downcallHandle(\n+        \"clang_EvalResult_getAsLongLong\",\n+        constants$18.clang_EvalResult_getAsLongLong$FUNC\n+    );\n+    static final FunctionDescriptor clang_EvalResult_isUnsignedInt$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n+    );\n+    static final MethodHandle clang_EvalResult_isUnsignedInt$MH = RuntimeHelper.downcallHandle(\n+        \"clang_EvalResult_isUnsignedInt\",\n+        constants$18.clang_EvalResult_isUnsignedInt$FUNC\n+    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$18.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    static final FunctionDescriptor clang_getCursorLanguage$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+    static final FunctionDescriptor clang_getCursorLinkage$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n@@ -83,3 +83,3 @@\n-    static final MethodHandle clang_getCursorLanguage$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getCursorLanguage\",\n-        constants$6.clang_getCursorLanguage$FUNC\n+    static final MethodHandle clang_getCursorLinkage$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getCursorLinkage\",\n+        constants$6.clang_getCursorLinkage$FUNC\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$6.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,11 @@\n+    static final FunctionDescriptor clang_getCursorLanguage$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getCursorLanguage$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getCursorLanguage\",\n+        constants$7.clang_getCursorLanguage$FUNC\n+    );\n@@ -108,15 +119,0 @@\n-    static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-        MemoryLayout.paddingLayout(32),\n-        MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_getTypedefDeclUnderlyingType$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getTypedefDeclUnderlyingType\",\n-        constants$7.clang_getTypedefDeclUnderlyingType$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$7.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -37,0 +37,15 @@\n+    static final FunctionDescriptor clang_getTypedefDeclUnderlyingType$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+        MemoryLayout.paddingLayout(32),\n+        MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        )\n+    );\n+    static final MethodHandle clang_getTypedefDeclUnderlyingType$MH = RuntimeHelper.downcallHandle(\n+        \"clang_getTypedefDeclUnderlyingType\",\n+        constants$8.clang_getTypedefDeclUnderlyingType$FUNC\n+    );\n@@ -96,16 +111,0 @@\n-    static final FunctionDescriptor clang_Cursor_getArgument$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-        MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n-            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        ),\n-        Constants$root.C_INT$LAYOUT\n-    );\n-    static final MethodHandle clang_Cursor_getArgument$MH = RuntimeHelper.downcallHandle(\n-        \"clang_Cursor_getArgument\",\n-        constants$8.clang_Cursor_getArgument$FUNC\n-    );\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$8.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -37,0 +37,16 @@\n+    static final FunctionDescriptor clang_Cursor_getArgument$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n+        Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+        Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+        MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+    ),\n+        MemoryLayout.structLayout(\n+            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+        ),\n+        Constants$root.C_INT$LAYOUT\n+    );\n+    static final MethodHandle clang_Cursor_getArgument$MH = RuntimeHelper.downcallHandle(\n+        \"clang_Cursor_getArgument\",\n+        constants$9.clang_Cursor_getArgument$FUNC\n+    );\n@@ -90,1 +106,1 @@\n-    static final FunctionDescriptor clang_isVolatileQualifiedType$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+    static final FunctionDescriptor clang_Cursor_isFunctionInlined$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n@@ -93,17 +109,2 @@\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n-        )\n-    );\n-    static final MethodHandle clang_isVolatileQualifiedType$MH = RuntimeHelper.downcallHandle(\n-        \"clang_isVolatileQualifiedType\",\n-        constants$9.clang_isVolatileQualifiedType$FUNC\n-    );\n-    static final FunctionDescriptor clang_getTypedefName$FUNC = FunctionDescriptor.of(MemoryLayout.structLayout(\n-        Constants$root.C_POINTER$LAYOUT.withName(\"data\"),\n-        Constants$root.C_INT$LAYOUT.withName(\"private_flags\"),\n-        MemoryLayout.paddingLayout(32)\n-    ),\n-        MemoryLayout.structLayout(\n-            Constants$root.C_INT$LAYOUT.withName(\"kind\"),\n-            MemoryLayout.paddingLayout(32),\n-            MemoryLayout.sequenceLayout(2, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n+            Constants$root.C_INT$LAYOUT.withName(\"xdata\"),\n+            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName(\"data\")\n@@ -112,3 +113,3 @@\n-    static final MethodHandle clang_getTypedefName$MH = RuntimeHelper.downcallHandle(\n-        \"clang_getTypedefName\",\n-        constants$9.clang_getTypedefName$FUNC\n+    static final MethodHandle clang_Cursor_isFunctionInlined$MH = RuntimeHelper.downcallHandle(\n+        \"clang_Cursor_isFunctionInlined\",\n+        constants$9.clang_Cursor_isFunctionInlined$FUNC\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$9.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import org.openjdk.jextract.clang.LinkageKind;\n@@ -69,0 +70,2 @@\n+        LinkageKind linkage = c.linkage();\n+\n@@ -80,0 +83,10 @@\n+\n+        \/\/ If we can clearly determine internal linkage, then filter it.\n+        if (linkage == LinkageKind.Internal) {\n+            return null;\n+        }\n+\n+        \/\/ filter inline functions\n+        if (c.isFunctionInlined()) {\n+            return null;\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider;\n+\n+import java.nio.file.Path;\n+\n+import testlib.TestUtils;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+import static org.testng.Assert.assertNull;\n+import static org.testng.Assert.assertNotNull;\n+\n+public class Test7903285 extends JextractToolRunner {\n+    @Test\n+    public void testStaticSymbols() {\n+        Path test7903285Output = getOutputFilePath(\"test7903285gen\");\n+        Path test7903285H = getInputFilePath(\"test7903285.h\");\n+        run(\"--output\", test7903285Output.toString(), test7903285H.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(test7903285Output)) {\n+            Class<?> cls = loader.loadClass(\"test7903285_h\");\n+            assertNull(findMethod(cls, \"func\", int.class));\n+            assertNotNull(findMethod(cls, \"func2\", int.class));\n+            assertNull(findMethod(cls, \"mul\", int.class, int.class));\n+            assertNull(findMethod(cls, \"mul2\", int.class, int.class));\n+        } finally {\n+            TestUtils.deleteDir(test7903285Output);\n+        }\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903285.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+static void func(int);\n+void func2(int);\n+\n+static inline int mul(int x, int y) { return x*y; }\n+inline int mul2(int x, int y) { return x*y; }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903285.h","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -330,0 +330,5 @@\n+--include-macro CXLinkage_External\n+--include-macro CXLinkage_Internal\n+--include-macro CXLinkage_Invalid\n+--include-macro CXLinkage_NoLinkage\n+--include-macro CXLinkage_UniqueExternal\n@@ -524,0 +529,1 @@\n+--include-function clang_Cursor_isFunctionInlined\n@@ -566,0 +572,1 @@\n+--include-function clang_getCursorLinkage\n","filename":"updateclang\/clang.symbols","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}