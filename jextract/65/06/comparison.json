{"files":[{"patch":"@@ -53,1 +53,0 @@\n-    private RuntimeHelper() {}\n@@ -58,1 +57,0 @@\n-\n@@ -71,0 +69,3 @@\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private RuntimeHelper() {}\n+\n@@ -80,1 +81,1 @@\n-    static final MemorySegment lookupGlobalVariable(String name, MemoryLayout layout) {\n+    static MemorySegment lookupGlobalVariable(String name, MemoryLayout layout) {\n@@ -84,1 +85,1 @@\n-    static final MethodHandle downcallHandle(String name, FunctionDescriptor fdesc) {\n+    static MethodHandle downcallHandle(String name, FunctionDescriptor fdesc) {\n@@ -90,1 +91,1 @@\n-    static final MethodHandle downcallHandle(FunctionDescriptor fdesc) {\n+    static MethodHandle downcallHandle(FunctionDescriptor fdesc) {\n@@ -94,1 +95,1 @@\n-    static final MethodHandle downcallHandleVariadic(String name, FunctionDescriptor fdesc) {\n+    static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor fdesc) {\n@@ -100,1 +101,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, MemorySession session) {\n+    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, MemorySession session) {\n@@ -116,1 +117,1 @@\n-    private static class VarargsInvoker {\n+    private static final class VarargsInvoker {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+    private static final boolean SHOW_GENERATING_CLASS = Boolean.getBoolean(\"jextract.showGeneratingClass\");\n+\n@@ -89,2 +91,9 @@\n-        return (!isNested() || kind == Kind.INTERFACE) ?\n-                    \"public \" : \"public static \";\n+        if (kind == Kind.INTERFACE) {\n+            return \"public \";\n+        }\n+        return (isNested() ? \"public static \" : \"public \") +\n+                (isClassFinal() ? \"final \" : \"\");\n+    }\n+\n+    boolean isClassFinal() {\n+        return true;\n@@ -108,0 +117,15 @@\n+        if (kind != Kind.INTERFACE) {\n+            emitConstructor();\n+        }\n+    }\n+\n+    void emitConstructor() {\n+        incrAlign();\n+        indent();\n+        append(\"\/\/ Suppresses default constructor, ensuring non-instantiability.\\n\");\n+        indent();\n+        append(\"private \");\n+        append(className());\n+        append(\"() {}\");\n+        append('\\n');\n+        decrAlign();\n@@ -177,1 +201,7 @@\n-            append(\"\/\/ Generated by jextract\\n\\n\");\n+            append(\"\/\/ Generated by jextract\");\n+            if (SHOW_GENERATING_CLASS) {\n+                append(\" (via \");\n+                append(getClass().getName());\n+                append(\")\");\n+            }\n+            append(\"\\n\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    static class Constant {\n+    static final class Constant {\n@@ -259,1 +259,1 @@\n-        append(memberMods() + \" \" + layoutClassName + \" \" + fieldName + \" = \");\n+        append(memberMods() + layoutClassName + \" \" + fieldName + \" = \");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ConstantBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -199,1 +199,1 @@\n-        if (primitiveKindSupported(kind) && !kind.layout().isEmpty()) {\n+        if (primitiveKindSupported(kind) && kind.layout().isPresent()) {\n@@ -203,0 +203,1 @@\n+            append(\" final\");\n@@ -216,0 +217,1 @@\n+        append(\" final\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-            addLayout(layoutField(), ((Type.Declared) structType).tree().layout().get())\n+            addLayout(layoutField(), ((Type.Declared) structType).tree().layout().orElseThrow())\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    private RootConstants rootConstants;\n+    private final RootConstants rootConstants;\n@@ -78,2 +78,1 @@\n-                .flatMap(b -> b.toFiles().stream())\n-                .collect(Collectors.toList()));\n+                .flatMap(b -> b.toFiles().stream()).toList());\n@@ -131,1 +130,11 @@\n-        StructBuilder structBuilder = new StructBuilder(this, structName, layout, type);\n+        StructBuilder structBuilder = new StructBuilder(this, structName, layout, type) {\n+            @Override\n+            boolean isClassFinal() {\n+                return false;\n+            }\n+\n+            @Override\n+            void emitConstructor() {\n+                \/\/ None...\n+            }\n+        };\n@@ -169,1 +178,1 @@\n-            return \" \";\n+            return \"final \";\n@@ -181,1 +190,1 @@\n-            return \"public \";\n+            return \"public final \";\n@@ -187,1 +196,0 @@\n-            emitConstructor();\n@@ -200,10 +208,0 @@\n-        void emitConstructor() {\n-            incrAlign();\n-            indent();\n-            append(\"\/* package-private *\/ \");\n-            append(className());\n-            append(\"() {}\");\n-            append('\\n');\n-            decrAlign();\n-        }\n-\n@@ -239,0 +237,5 @@\n+        @Override\n+        String mods() {\n+            return \"final \"; \/\/ Constants$root package-private!\n+        }\n+\n@@ -244,1 +247,1 @@\n-                return \"JAVA_CHAR.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+                return \"JAVA_CHAR\" + withBitAlignmentIfNeeded(ValueLayout.JAVA_CHAR, vl);\n@@ -248,1 +251,1 @@\n-                return \"JAVA_SHORT.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+                return \"JAVA_SHORT\" + withBitAlignmentIfNeeded(ValueLayout.JAVA_SHORT, vl);\n@@ -250,1 +253,1 @@\n-                return \"JAVA_INT.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+                return \"JAVA_INT\" + withBitAlignmentIfNeeded(ValueLayout.JAVA_INT, vl);\n@@ -252,1 +255,1 @@\n-                return \"JAVA_FLOAT.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+                return \"JAVA_FLOAT\" + withBitAlignmentIfNeeded(ValueLayout.JAVA_FLOAT, vl);\n@@ -254,1 +257,1 @@\n-                return \"JAVA_LONG.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+                return \"JAVA_LONG\" + withBitAlignmentIfNeeded(ValueLayout.JAVA_LONG, vl);\n@@ -256,1 +259,1 @@\n-                return \"JAVA_DOUBLE.withBitAlignment(\" + vl.bitAlignment() + \")\";\n+                return \"JAVA_DOUBLE\" + withBitAlignmentIfNeeded(ValueLayout.JAVA_DOUBLE, vl);\n@@ -264,0 +267,7 @@\n+        String withBitAlignmentIfNeeded(ValueLayout original, ValueLayout actual) {\n+            if (original.bitAlignment() == actual.bitAlignment()) {\n+                return \"\";\n+            }\n+            return \".withBitAlignment(\" + actual.bitAlignment() + \")\";\n+        }\n+\n@@ -272,1 +282,1 @@\n-            return addPrimitiveLayout(javaName, (ValueLayout)kind.layout().get());\n+            return addPrimitiveLayout(javaName, (ValueLayout)kind.layout().orElseThrow());\n@@ -301,6 +311,1 @@\n-            constantBuilder = new ConstantBuilder(this, \"constants$\" + constant_class_index++) {\n-                @Override\n-                String mods() {\n-                    return \"\"; \/\/ constants package-private!\n-                }\n-            };\n+            constantBuilder = new ConstantsSequelBuilder(this, \"constants$\" + constant_class_index++);\n@@ -313,0 +318,13 @@\n+\n+    static final class ConstantsSequelBuilder extends ConstantBuilder {\n+\n+        ConstantsSequelBuilder(JavaSourceBuilder enclosing, String className) {\n+            super(enclosing, className);\n+        }\n+\n+        @Override\n+        String mods() {\n+            return \"final \"; \/\/ constants package-private!\n+        }\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":48,"deletions":30,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -27,5 +27,5 @@\n-    private RuntimeHelper() {}\n-    private final static Linker LINKER = Linker.nativeLinker();\n-    private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();\n-    private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();\n-    private final static SymbolLookup SYMBOL_LOOKUP;\n+    private static final Linker LINKER = Linker.nativeLinker();\n+    private static final ClassLoader LOADER = RuntimeHelper.class.getClassLoader();\n+    private static final MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();\n+    private static final SymbolLookup SYMBOL_LOOKUP;\n+    private static final SegmentAllocator THROWING_ALLOCATOR = (x, y) -> { throw new AssertionError(\"should not reach here\"); };\n@@ -42,0 +42,3 @@\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private RuntimeHelper() {}\n+\n@@ -49,3 +52,1 @@\n-    private final static SegmentAllocator THROWING_ALLOCATOR = (x, y) -> { throw new AssertionError(\"should not reach here\"); };\n-\n-    static final MemorySegment lookupGlobalVariable(String name, MemoryLayout layout) {\n+    static MemorySegment lookupGlobalVariable(String name, MemoryLayout layout) {\n@@ -55,1 +56,1 @@\n-    static final MethodHandle downcallHandle(String name, FunctionDescriptor fdesc) {\n+    static MethodHandle downcallHandle(String name, FunctionDescriptor fdesc) {\n@@ -61,1 +62,1 @@\n-    static final MethodHandle downcallHandle(FunctionDescriptor fdesc) {\n+    static MethodHandle downcallHandle(FunctionDescriptor fdesc) {\n@@ -65,1 +66,1 @@\n-    static final MethodHandle downcallHandleVariadic(String name, FunctionDescriptor fdesc) {\n+    static MethodHandle downcallHandleVariadic(String name, FunctionDescriptor fdesc) {\n@@ -71,1 +72,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, MemorySession session) {\n+    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, MemorySession session) {\n@@ -87,1 +88,1 @@\n-    private static class VarargsInvoker {\n+    private static final class VarargsInvoker {\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"}]}