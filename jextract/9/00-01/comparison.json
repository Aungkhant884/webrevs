{"files":[{"patch":"@@ -4,0 +4,1 @@\n+deps\n","filename":".gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -9,6 +9,1 @@\n-Before starting, please make sure `JAVA_HOME` points and jdk 18:\n-\n-```sh\n-$ echo $JAVA_HOME\n-\/path\/to\/jdk18\n-```\n+By default, the build will use the JDK used to run gradle. An alternative JDK can be specified with `-Pjdk=\/path\/to\/jdk`.\n","filename":"README.md","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -12,0 +12,2 @@\n+    \/\/ for downloading files\n+    id \"de.undercouch.download\" version \"5.0.2\"\n@@ -15,0 +17,2 @@\n+project.ext.minimalJDKVersion = Runtime.Version.parse(\"18\");\n+project.ext.depsDir = \"deps\"\n@@ -26,2 +30,2 @@\n-def static checkJDKRelease(String java_home, String expectedVersion) {\n-    Path releaseFile = Path.of(java_home).resolve(\"release\");\n+def static Runtime.Version getJDKVersion(String jdkHome) {\n+    Path releaseFile = Path.of(jdkHome).resolve(\"release\");\n@@ -35,2 +39,2 @@\n-    String foundVersion = props.getProperty(\"JAVA_VERSION\");\n-    if (foundVersion == null) {\n+    String foundVersionStr = props.getProperty(\"JAVA_VERSION\");\n+    if (foundVersionStr == null) {\n@@ -40,3 +44,30 @@\n-    expectedVersion = \"\\\"${expectedVersion}\\\"\"; \/\/ version in release file is quoted\n-    if (!foundVersion.equals(expectedVersion)) {\n-        throw new IllegalArgumentException(\"Incorrect java version. Expected ${expectedVersion}, but found ${foundVersion}\");\n+    foundVersionStr = foundVersionStr.substring(1, foundVersionStr.length() - 1); \/\/ version in release file is quoted\n+    Runtime.Version foundVersion = Runtime.Version.parse(foundVersionStr);\n+\n+    return foundVersion;\n+}\n+\n+def static checkJDKRelease(String jdkHome, Runtime.Version expectedVersion) {\n+    Runtime.Version foundVersion = getJDKVersion(jdkHome);\n+    if (foundVersion.compareToIgnoreOptional(expectedVersion) < 0) {\n+        throw new IllegalArgumentException(\"Incorrect java version. \" +\n+            \"Expected at least '${expectedVersion}', but found '${foundVersion}'\");\n+    }\n+}\n+\n+def satisfiesJDKVersion(String jdkHome, Runtime.Version expectedVersion) {\n+    return getJDKVersion(jdkHome).compareToIgnoreOptional(ext.minimalJDKVersion) >= 0;\n+}\n+\n+def String downloadJDK() {\n+    String jdkUrl = \"https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_\";\n+    String archiveExt;\n+    if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+        jdkUrl += \"windows-x64_bin.zip\";\n+        archiveExt = \".zip\";\n+    } else if (Os.isFamily(Os.FAMILY_MAC)) {\n+        jdkUrl += \"macos-x64_bin.tar.gz\"\n+        archiveExt = \".tar.gz\";\n+    } else {\n+        jdkUrl += \"linux-x64_bin.tar.gz\"\n+        archiveExt = \".tar.gz\";\n@@ -44,0 +75,16 @@\n+\n+    String jdkZipPath = ext.depsDir + \"\/jdk\" + archiveExt;\n+\tdownload.run {\n+\t\tsrc jdkUrl\n+\t\tdest jdkZipPath\n+\t\toverwrite false \/\/ don't overwrite if it already exists\n+\t}\n+\n+    \/\/ extract\n+    FileTree source = Os.isFamily(Os.FAMILY_WINDOWS) ? zipTree(jdkZipPath) : tarTree(jdkZipPath);\n+\tcopy {\n+\t\tfrom source\n+\t\tinto ext.depsDir\n+\t}\n+\n+    return ext.depsDir + \"\/jdk-18\";\n@@ -46,2 +93,13 @@\n-def java_home = System.getProperty(\"java.home\");\n-checkJDKRelease(java_home, \"18\");\n+String jdkHome;\n+if (project.hasProperty(\"jdk\")) {\n+    println(\"using JDK from 'jdk' project property\");\n+    jdkHome = project.property(\"jdk\");\n+    checkJDKRelease(jdkHome, minimalJDKVersion);\n+} else if (satisfiesJDKVersion(System.getProperty(\"java.home\"), minimalJDKVersion)) {\n+    println(\"using JDK from 'java.home' system property\");\n+    jdkHome = System.getProperty(\"java.home\");\n+} else {\n+    println(\"downloading JDK to build with\");\n+    jdkHome = downloadJDK();\n+}\n+println(\"build JDK path is: \" + jdkHome);\n@@ -87,1 +145,1 @@\n-    options.forkOptions.executable = \"${java_home}\/bin\/javac\"\n+    options.forkOptions.executable = \"${jdkHome}\/bin\/javac\"\n@@ -96,0 +154,3 @@\n+    \/\/ moditect uses java.home to find JDK tools\n+    System.setProperty(\"java.home\", \"$jdkHome\")\n+\n@@ -193,1 +254,1 @@\n-    modulePath = [file(\"$buildDir\/modules\"),file(\"$java_home\/jmods\")]\n+    modulePath = [file(\"$buildDir\/modules\"),file(\"$jdkHome\/jmods\")]\n","filename":"build.gradle","additions":72,"deletions":11,"binary":false,"changes":83,"status":"modified"}]}