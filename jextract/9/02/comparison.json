{"files":[{"patch":"@@ -4,0 +4,1 @@\n+deps\n","filename":".gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -9,0 +9,2 @@\n+The JDK used to build jextract can be specified with `-Pjdk=\/path\/to\/jdk`. If that option is omitted, a build JDK will be downloaded automatically.\n+\n@@ -12,1 +14,1 @@\n-$ sh .\/gradlew -Pjdk18_home=<jdk18_home_dir> -Pllvm_home=<libclang_dir> clean verify\n+$ sh .\/gradlew -Pllvm_home=<llvm_dir> clean verify\n@@ -41,1 +43,1 @@\n-$ sh .\/gradlew -Pjdk18_home=<jdk18_home_dir> -Pllvm_home=<libclang_dir> jtreg\n+$ sh .\/gradlew -Pllvm_home=<llvm_dir> -Pjtreg_home=<jtreg_dir> jtreg\n","filename":"README.md","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+import java.util.Properties;\n@@ -11,0 +12,2 @@\n+    \/\/ for downloading files\n+    id \"de.undercouch.download\" version \"5.0.2\"\n@@ -14,0 +17,2 @@\n+project.ext.minimalJDKVersion = Runtime.Version.parse(\"18\");\n+project.ext.depsDir = \"deps\"\n@@ -16,1 +21,5 @@\n-    if (!Files.exists(Path.of(p))) {\n+    checkPath(Path.of(p));\n+}\n+\n+def static checkPath(Path p) {\n+    if (!Files.exists(p)) {\n@@ -21,0 +30,70 @@\n+def static Runtime.Version getJDKVersion(String jdkHome) {\n+    Path releaseFile = Path.of(jdkHome).resolve(\"release\");\n+    checkPath(releaseFile);\n+\n+    Properties props = new Properties();\n+    try (InputStream input = Files.newInputStream(releaseFile)) {\n+        props.load(input);\n+    }\n+\n+    String foundVersionStr = props.getProperty(\"JAVA_VERSION\");\n+    if (foundVersionStr == null) {\n+        throw new IllegalArgumentException(\"Could not determine java version from ${releaseFile}\");\n+    }\n+\n+    foundVersionStr = foundVersionStr.substring(1, foundVersionStr.length() - 1); \/\/ version in release file is quoted\n+    Runtime.Version foundVersion = Runtime.Version.parse(foundVersionStr);\n+\n+    return foundVersion;\n+}\n+\n+def static checkJDKRelease(String jdkHome, Runtime.Version expectedVersion) {\n+    Runtime.Version foundVersion = getJDKVersion(jdkHome);\n+    if (foundVersion.compareToIgnoreOptional(expectedVersion) < 0) {\n+        throw new IllegalArgumentException(\"Incorrect build JDK version. \" +\n+            \"Expected at least '${expectedVersion}', but found '${foundVersion}'\");\n+    }\n+}\n+\n+def String downloadJDK() {\n+    String jdkUrl = \"https:\/\/download.java.net\/java\/GA\/jdk18\/43f95e8614114aeaa8e8a5fcf20a682d\/36\/GPL\/openjdk-18_\";\n+    String archiveExt;\n+    if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+        jdkUrl += \"windows-x64_bin.zip\";\n+        archiveExt = \".zip\";\n+    } else if (Os.isFamily(Os.FAMILY_MAC)) {\n+        jdkUrl += \"macos-x64_bin.tar.gz\"\n+        archiveExt = \".tar.gz\";\n+    } else {\n+        jdkUrl += \"linux-x64_bin.tar.gz\"\n+        archiveExt = \".tar.gz\";\n+    }\n+\n+    String jdkZipPath = ext.depsDir + \"\/jdk\" + archiveExt;\n+\tdownload.run {\n+\t\tsrc jdkUrl\n+\t\tdest jdkZipPath\n+\t\toverwrite false \/\/ don't overwrite if it already exists\n+\t}\n+\n+    \/\/ extract\n+    FileTree source = Os.isFamily(Os.FAMILY_WINDOWS) ? zipTree(jdkZipPath) : tarTree(jdkZipPath);\n+\tcopy {\n+\t\tfrom source\n+\t\tinto ext.depsDir\n+\t}\n+\n+    return ext.depsDir + \"\/jdk-18\";\n+}\n+\n+String jdkHome;\n+if (project.hasProperty(\"jdk\")) {\n+    println(\"using JDK from 'jdk' project property\");\n+    jdkHome = project.property(\"jdk\");\n+    checkJDKRelease(jdkHome, minimalJDKVersion);\n+} else {\n+    println(\"downloading JDK to build with\");\n+    jdkHome = downloadJDK();\n+}\n+println(\"build JDK path is: \" + jdkHome);\n+\n@@ -59,1 +138,1 @@\n-    options.forkOptions.executable = \"${jdk18_home}\/bin\/javac\"\n+    options.forkOptions.executable = \"${jdkHome}\/bin\/javac\"\n@@ -69,1 +148,1 @@\n-    System.setProperty(\"java.home\", \"$jdk18_home\")\n+    System.setProperty(\"java.home\", \"$jdkHome\")\n@@ -168,1 +247,1 @@\n-    modulePath = [file(\"$buildDir\/modules\"),file(\"$jdk18_home\/jmods\")]\n+    modulePath = [file(\"$buildDir\/modules\"),file(\"$jdkHome\/jmods\")]\n","filename":"build.gradle","additions":83,"deletions":4,"binary":false,"changes":87,"status":"modified"}]}