{"files":[{"patch":"@@ -104,7 +104,6 @@\n-        var ftype = d.type();\n-        var rtype = ftype.returnType();\n-        builder.append(typeStr(rtype));\n-        builder.append(\" \");\n-        builder.append(d.name());\n-        builder.append(\"(\");\n-        builder.append(\n+\n+        \/\/ name and args part of the function\n+        StringBuilder buf = new StringBuilder();\n+        buf.append(d.name());\n+        buf.append('(');\n+        buf.append(\n@@ -117,1 +116,1 @@\n-            builder.append(\",...\");\n+            buf.append(\",...\");\n@@ -119,1 +118,10 @@\n-        builder.append(\");\\n\");\n+        buf.append(')');\n+\n+        \/\/ The return type is handled later to take care of\n+        \/\/ pointer to function return type like signal from signal.h\n+        \/\/ void (*signal(int sig, void (*func)(int)))(int)\n+\n+        String funcNameAndArgs = buf.toString();\n+        Type returnType = d.type().returnType();\n+        builder.append(nameAndType(returnType, funcNameAndArgs));\n+        builder.append(\";\\n\");\n@@ -179,6 +187,0 @@\n-    private static String typeStr(Type type) {\n-        var result = type.accept(typeVisitor, \"\");\n-        assert !result.nameIncluded();\n-        return result.typeStr();\n-    }\n-\n@@ -189,2 +191,3 @@\n-        \/\/ context argument in this visitor starts with a name. But it may pick up\n-        \/\/ \"*\" prefixes for pointer type.\n+        \/\/ context argument in this visitor usually starts with a name. But it may pick up\n+        \/\/ \"*\" prefixes for pointer type. [] suffix for array types. For pointer to function\n+        \/\/ return type, the context is name of the function + argument types as in declaration.\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/CDeclarationPrinter.java","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -133,0 +133,5 @@\n+    String getReturnFiName(Declaration.Function func) {\n+        Objects.requireNonNull(func);\n+        return funcReturnID(func);\n+    }\n+\n@@ -146,0 +151,4 @@\n+    private static String funcReturnID(Declaration.Function func) {\n+        return func.name() + \"$return\";\n+    }\n+\n@@ -212,0 +221,1 @@\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/NameMangler.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -249,0 +249,1 @@\n+        \/\/ check for function pointer type arguments\n@@ -261,0 +262,8 @@\n+        \/\/ return type could be a function pointer type\n+        Type.Function returnFunc = Utils.getAsFunctionPointer(funcTree.type().returnType());\n+        if (returnFunc != null) {\n+             if (! generateFunctionalInterface(returnFunc, nameMangler.getReturnFiName(funcTree))) {\n+                 return null;\n+             }\n+        }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -104,0 +104,26 @@\n+    @Test\n+    public void testFunctionPointer2() throws IOException {\n+        var comments = getDocComments(\"funcptrs.h\", \"signal$func.java\");\n+        assertEquals(comments, List.of(\n+            \"void (*signal$func)(int);\"\n+        ));\n+    }\n+\n+    @Test\n+    public void testFunctionPointer3() throws IOException {\n+        var comments = getDocComments(\"funcptrs.h\", \"signal$return.java\");\n+        assertEquals(comments, List.of(\n+            \"void (*signal$return)(int);\"\n+        ));\n+    }\n+\n+    @Test\n+    public void testFunctionPointer4() throws IOException {\n+        var comments = getDocComments(\"funcptrs.h\", \"funcptrs_h.java\");\n+        assertEquals(comments, List.of(\n+            \"Getter for variable: void (*funcptr)(int*,int);\",\n+            \"Setter for variable: void (*funcptr)(int*,int);\",\n+            \"void (*signal(int sig, void (*func)(int)))(int);\"\n+        ));\n+    }\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/TestDocComments.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+void (*signal(int sig, void (*func)(int)))(int);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/funcptrs.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}