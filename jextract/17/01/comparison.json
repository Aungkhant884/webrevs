{"files":[{"patch":"@@ -2,2 +2,1 @@\n-TestNG.dirs = .\/java\n-\n+TestNG.dirs = .\/testng\n@@ -5,1 +4,0 @@\n-\n","filename":"test\/TEST.ROOT","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,20 +3,20 @@\n-    generator\/funcPointerInvokers\/TestFuncPointerInvokers.java \\\n-    generator\/test8239918\/LibTest8239918Test.java \\\n-    generator\/test8244938\/Test8244938.java \\\n-    generator\/test8244959\/Test8244959.java \\\n-    generator\/test8245003\/Test8245003.java \\\n-    generator\/test8246341\/LibTest8246341Test.java \\\n-    generator\/test8246341\/LibTest8246341Test.java \\\n-    generator\/test8246400\/LibTest8246400Test.java \\\n-    generator\/test8249757\/LibTest8249757Test.java \\\n-    generator\/test8252016\/Test8252016.java \\\n-    generator\/test8252121\/Test8252121.java \\\n-    generator\/test8253102\/LibTest8253102Test.java \\\n-    generator\/test8257892\/LibUnsupportedTest.java \\\n-    generator\/test8258605\/LibTest8258605Test.java \\\n-    generator\/test8261511\/Test8261511.java \\\n-    generator\/testFunctionPointer\/LibFuncPtrTest.java \\\n-    generator\/testStruct\/LibStructTest.java \\\n-    java\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java \\\n-    java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java \\\n-    java\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java\n+    jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java \\\n+    jtreg\/generator\/test8239918\/LibTest8239918Test.java \\\n+    jtreg\/generator\/test8244938\/Test8244938.java \\\n+    jtreg\/generator\/test8244959\/Test8244959.java \\\n+    jtreg\/generator\/test8245003\/Test8245003.java \\\n+    jtreg\/generator\/test8246341\/LibTest8246341Test.java \\\n+    jtreg\/generator\/test8246341\/LibTest8246341Test.java \\\n+    jtreg\/generator\/test8246400\/LibTest8246400Test.java \\\n+    jtreg\/generator\/test8249757\/LibTest8249757Test.java \\\n+    jtreg\/generator\/test8252016\/Test8252016.java \\\n+    jtreg\/generator\/test8252121\/Test8252121.java \\\n+    jtreg\/generator\/test8253102\/LibTest8253102Test.java \\\n+    jtreg\/generator\/test8257892\/LibUnsupportedTest.java \\\n+    jtreg\/generator\/test8258605\/LibTest8258605Test.java \\\n+    jtreg\/generator\/test8261511\/Test8261511.java \\\n+    jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java \\\n+    jtreg\/generator\/testStruct\/LibStructTest.java \\\n+    testng\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java \\\n+    testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java \\\n+    testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java\n@@ -25,2 +25,2 @@\n-    generator \\\n-    java \\\n+    jtreg \\\n+    testng \\\n","filename":"test\/TEST.groups","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1,293 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jextract.test.toolprovider;\n-\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.lang.invoke.MethodType;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.FileVisitResult;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.SimpleFileVisitor;\n-import java.nio.file.attribute.BasicFileAttributes;\n-import java.util.Arrays;\n-import java.util.Objects;\n-import java.util.spi.ToolProvider;\n-\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemoryLayout.PathElement;\n-import jdk.incubator.foreign.ValueLayout;\n-import org.openjdk.jextract.JextractTool;\n-import org.openjdk.jextract.Type;\n-\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNotEquals;\n-import static org.testng.Assert.assertNotNull;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n-\n-public class JextractToolRunner {\n-\n-    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n-\n-    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n-    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n-    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n-    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT.withBitAlignment(32);\n-    public static final ValueLayout C_LONG = IS_WINDOWS ? ValueLayout.JAVA_INT.withBitAlignment(32) : ValueLayout.JAVA_LONG.withBitAlignment(64);\n-    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n-    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n-    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n-    public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(ValueLayout.ADDRESS.bitSize());\n-\n-    \/\/ (private) exit codes from jextract tool. Copied from JextractTool.\n-    static final int SUCCESS       = 0;\n-    static final int OPTION_ERROR  = 1;\n-    static final int INPUT_ERROR   = 2;\n-    static final int CLANG_ERROR   = 3;\n-    static final int RUNTIME_ERROR = 4;\n-    static final int OUTPUT_ERROR  = 5;\n-\n-    private static String safeFileName(String filename) {\n-        int ext = filename.lastIndexOf('.');\n-        return ext != -1 ? filename.substring(0, ext) : filename;\n-    }\n-\n-    private static final ToolProvider JEXTRACT_TOOL = new JextractTool.JextractToolProvider();\n-\n-    private final Path inputDir;\n-    private final Path outputDir;\n-\n-    protected JextractToolRunner() {\n-        this(null, null);\n-    }\n-\n-    protected JextractToolRunner(Path input, Path output) {\n-         inputDir = (input != null) ? input :\n-                Paths.get(System.getProperty(\"test.root\", \".\"),\n-                        \"java\", \"org\", \"openjdk\", \"jextract\", \"test\", \"toolprovider\");\n-         outputDir = (output != null) ? output :\n-                Paths.get(System.getProperty(\"test.classes\", \"target\"), \"test-output\");\n-    }\n-\n-    protected Path getInputFilePath(String fileName) {\n-        return inputDir.resolve(fileName).toAbsolutePath();\n-    }\n-\n-    protected Path getOutputFilePath(String fileName) {\n-        return outputDir.resolve(fileName).toAbsolutePath();\n-    }\n-\n-    protected static class JextractResult {\n-        private int exitCode;\n-        private String output;\n-\n-        JextractResult(int exitCode, String output) {\n-            this.exitCode = exitCode;\n-            this.output = output;\n-        }\n-\n-        protected JextractResult checkSuccess() {\n-            assertEquals(exitCode, SUCCESS, \"Sucess expected, failed: \" + exitCode);\n-            return this;\n-        }\n-\n-        protected JextractResult checkFailure() {\n-            assertNotEquals(exitCode, SUCCESS, \"Failure expected, succeeded!\");\n-            return this;\n-        }\n-\n-        protected JextractResult checkFailure(int expectedExitCode) {\n-            assertEquals(exitCode, expectedExitCode, \"Expected error code \" + expectedExitCode);\n-            return this;\n-        }\n-\n-        protected JextractResult checkContainsOutput(String expected) {\n-            Objects.requireNonNull(expected);\n-            assertTrue(output.contains(expected), \"Output does not contain string: \" + expected);\n-            return this;\n-        }\n-\n-        protected JextractResult checkMatchesOutput(String regex) {\n-            Objects.requireNonNull(regex);\n-            assertTrue(output.trim().matches(regex), \"Output does not match regex: \" + regex);\n-            return this;\n-        }\n-    }\n-\n-    protected static JextractResult run(Object... options) {\n-        return run(Arrays.stream(options).map(Objects::toString).toArray(String[]::new));\n-    }\n-\n-    protected static JextractResult run(String... options) {\n-        StringWriter writer = new StringWriter();\n-        PrintWriter pw = new PrintWriter(writer);\n-        String[] args = new String[options.length + 1];\n-        int result = JEXTRACT_TOOL.run(pw, pw, options);\n-        String output = writer.toString();\n-        System.err.println(output);\n-        return new JextractResult(result, output);\n-    }\n-\n-    protected static Loader classLoader(Path... paths) {\n-        try {\n-            URL[] urls = new URL[paths.length];\n-            for (int i = 0; i < paths.length; i++) {\n-                urls[i] = paths[i].toUri().toURL();\n-            }\n-            URLClassLoader ucl = new URLClassLoader(urls,\n-                    JextractToolRunner.class.getClassLoader());\n-            return new Loader(ucl);\n-        } catch (RuntimeException re) {\n-            throw re;\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    protected static Field findField(Class<?> cls, String name) {\n-        try {\n-            return cls.getField(name);\n-        } catch (Exception e) {\n-            System.err.println(e);\n-            return null;\n-        }\n-    }\n-\n-    protected Method checkIntGetter(Class<?> cls, String name, int value) {\n-        Method method = findMethod(cls, name);\n-        assertNotNull(method);\n-        assertEquals(method.getReturnType(), int.class);\n-        try {\n-            assertEquals((int)method.invoke(null), value);\n-        } catch (Exception exp) {\n-            System.err.println(exp);\n-            assertTrue(false, \"should not reach here\");\n-        }\n-        return method;\n-    }\n-\n-    protected static Method findMethod(Class<?> cls, String name, Class<?>... argTypes) {\n-        try {\n-            return cls.getMethod(name, argTypes);\n-        } catch (Exception e) {\n-            System.err.println(e);\n-            return null;\n-        }\n-    }\n-\n-    protected static Method findFirstMethod(Class<?> cls, String name) {\n-        try {\n-            for (Method m : cls.getMethods()) {\n-                if (name.equals(m.getName())) {\n-                    return m;\n-                }\n-            }\n-            return null;\n-        } catch (Exception e) {\n-            System.err.println(e);\n-            return null;\n-        }\n-    }\n-\n-    protected static Class<?> findNestedClass(Class<?> clz, String name) {\n-        return findClass(clz.getClasses(), name);\n-    }\n-\n-    protected static Class<?> findClass(Class<?>[] clz, String name) {\n-        for (Class<?> cls: clz) {\n-            if (cls.getSimpleName().equals(name)) {\n-                return cls;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    protected Method checkMethod(Class<?> cls, String name, MethodType type) {\n-        return checkMethod(cls, name, type.returnType(), type.parameterArray());\n-    }\n-\n-    protected Method checkMethod(Class<?> cls, String name, Class<?> returnType, Class<?>... args) {\n-        Method m = findMethod(cls, name, args);\n-        assertNotNull(m);\n-        assertEquals(m.getReturnType(), returnType);\n-        assertEquals(m.getParameterTypes(), args);\n-        return m;\n-    }\n-\n-    protected static MemoryLayout findLayout(Class<?> cls, String name) {\n-        Method method = findMethod(cls, name + \"$LAYOUT\");\n-        assertNotNull(method);\n-        assertEquals(method.getReturnType(), MemoryLayout.class);\n-        try {\n-            return (MemoryLayout)method.invoke(null);\n-        } catch (Exception exp) {\n-            System.err.println(exp);\n-            assertTrue(false, \"should not reach here\");\n-        }\n-        return null;\n-    }\n-\n-    protected static MemoryLayout findLayout(Class<?> cls) {\n-        return findLayout(cls, \"\");\n-    }\n-\n-    protected static void checkField(MemoryLayout group, String fieldName, MemoryLayout expected) {\n-        assertEquals(group.select(PathElement.groupElement(fieldName)), expected.withName(fieldName));\n-    }\n-\n-    protected static class Loader implements AutoCloseable {\n-\n-        private final URLClassLoader loader;\n-\n-        public Loader(URLClassLoader loader) {\n-            this.loader = loader;\n-        }\n-\n-        public Class<?> loadClass(String className) {\n-            try {\n-                return Class.forName(className, false, loader);\n-            } catch (ClassNotFoundException e) {\n-                \/\/ return null so caller can check if class loading\n-                \/\/ was successful with assertNotNull\/assertNull\n-                return null;\n-            }\n-        }\n-\n-        @Override\n-        public void close() {\n-            try {\n-                loader.close();\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolRunner.java","additions":0,"deletions":293,"binary":false,"changes":293,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.jextract.test.toolprovider;\n-\n-import org.openjdk.jextract.test.TestUtils;\n-import org.testng.annotations.Test;\n-import java.nio.file.Path;\n-import static org.testng.Assert.assertNotNull;\n-\n-\/*\n- * @test\n- * @library \/test\/lib\n- * @build JextractToolRunner\n- * @bug 7903148\n- * @summary jextract crashes when C11 keyword _Static_Assert is used in a header\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED Test7903148\n- *\/\n-public class Test7903148 extends JextractToolRunner {\n-    @Test\n-    public void test() {\n-        Path output = getOutputFilePath(\"7903148gen\");\n-        Path outputH = getInputFilePath(\"test7903148.h\");\n-        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n-        try(TestUtils.Loader loader = TestUtils.classLoader(output)) {\n-            Class<?> headerCls = loader.loadClass(\"test7903148_h\");\n-            assertNotNull(headerCls);\n-            checkMethod(headerCls, \"func\", int.class, int.class);\n-        } finally {\n-            TestUtils.deleteDir(output);\n-        }\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903148.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.jextract.test.toolprovider;\n-\n-import java.nio.file.Path;\n-\n-import org.openjdk.jextract.test.TestUtils;\n-import org.testng.annotations.Ignore;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n-\n-\/\/ This test is ignored because we cannot set the \"-Djextract.decls.per.header\" here (as all testng tests are\n-\/\/ executed in the same VM). Moving the test in a non-testng folder is possible, but this test depends on\n-\/\/ JextractToolRunner and TestUtils which makes it hard.\n-@Ignore\n-public class TestSplit extends JextractToolRunner {\n-    @Test\n-    public void testSplit() {\n-        Path splitOutput = getOutputFilePath(\"split\");\n-        Path splitH = getInputFilePath(\"split.h\");\n-        run(\"-d\", splitOutput.toString(), splitH.toString()).checkSuccess();\n-        try(TestUtils.Loader loader = TestUtils.classLoader(splitOutput)) {\n-            checkPresent(loader, \"split_h\");\n-            checkPresent(loader, \"split_h_1\");\n-            checkPresent(loader, \"split_h_2\");\n-            checkPresent(loader, \"split_h_3\");\n-            checkPresent(loader, \"split_h_4\");\n-            checkMissing(loader, \"split_h_5\");\n-        } finally {\n-            TestUtils.deleteDir(splitOutput);\n-        }\n-    }\n-\n-    private static void checkPresent(TestUtils.Loader loader, String name) {\n-        assertNotNull(loader.loadClass(name));\n-    }\n-\n-    private static void checkMissing(TestUtils.Loader loader, String name) {\n-        assertNull(loader.loadClass(name));\n-    }\n-}\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/TestSplit.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.nio.file.Path;\n+\n+import testlib.TestUtils;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import static org.testng.Assert.*;\n+\n+\/*\n+ * @test\n+ * @library \/lib\n+ * @run testng\/othervm -Djextract.decls.per.header=1 TestSplit\n+ *\/\n+public class TestSplit extends JextractToolRunner {\n+    @Test\n+    public void testSplit() {\n+        Path splitOutput = getOutputFilePath(\"split\");\n+        Path splitH = getInputFilePath(\"split.h\");\n+        run(\"-d\", splitOutput.toString(), splitH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(splitOutput)) {\n+            checkPresent(loader, \"split_h\");\n+            checkPresent(loader, \"split_h_1\");\n+            checkPresent(loader, \"split_h_2\");\n+            checkPresent(loader, \"split_h_3\");\n+            checkPresent(loader, \"split_h_4\");\n+            checkMissing(loader, \"split_h_5\");\n+        } finally {\n+            TestUtils.deleteDir(splitOutput);\n+        }\n+    }\n+\n+    private static void checkPresent(TestUtils.Loader loader, String name) {\n+        assertNotNull(loader.loadClass(name));\n+    }\n+\n+    private static void checkMissing(TestUtils.Loader loader, String name) {\n+        assertNull(loader.loadClass(name));\n+    }\n+}\n","filename":"test\/jtreg\/TestSplit.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -38,1 +38,1 @@\n-  * @library ..\/..\/lib\n+  * @library \/lib\n@@ -44,1 +44,1 @@\n-  * @library ..\/..\/lib\n+  * @library \/lib\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/funcPointerInvokers\/func.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/funcPointerInvokers\/func.h","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/funcPointerInvokers\/libFunc.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/funcPointerInvokers\/libFunc.c","status":"renamed"},{"patch":"@@ -32,1 +32,1 @@\n-  * @library ..\/..\/lib\n+  * @library \/lib\n@@ -40,1 +40,1 @@\n-  * @library ..\/..\/lib\n+  * @library \/lib\n","filename":"test\/jtreg\/generator\/test8239918\/LibTest8239918Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8239918\/LibTest8239918Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8239918\/libTest8239918.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8239918\/libTest8239918.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8239918\/test8239918.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8239918\/test8239918.h","status":"renamed"},{"patch":"@@ -32,1 +32,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -41,1 +41,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8240373\/Lib8240373Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8240373\/Lib8240373Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8240373\/test8240373.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8240373\/test8240373.h","status":"renamed"},{"patch":"@@ -38,1 +38,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -46,1 +46,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8244412\/LibTest8244412Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8244412\/test8244412.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8244412\/test8244412.h","status":"renamed"},{"patch":"@@ -34,1 +34,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -43,1 +43,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8244938\/Test8244938.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8244938\/libTest8244938.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8244938\/libTest8244938.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8244938\/test8244938.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8244938\/test8244938.h","status":"renamed"},{"patch":"@@ -38,1 +38,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -46,1 +46,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8244959\/Test8244959.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8244959\/Test8244959.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8244959\/libPrintf.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8244959\/libPrintf.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8244959\/printf.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8244959\/printf.h","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -44,1 +44,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8245003\/Test8245003.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8245003\/libTest8245003.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8245003\/libTest8245003.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8245003\/test8245003.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8245003\/test8245003.h","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -47,1 +47,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8246341\/LibTest8246341Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8246341\/libTest8246341.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8246341\/libTest8246341.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8246341\/test8246341.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8246341\/test8246341.h","status":"renamed"},{"patch":"@@ -38,1 +38,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -46,1 +46,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8246400\/LibTest8246400Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8246400\/libTest8246400.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8246400\/libTest8246400.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8246400\/test8246400.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8246400\/test8246400.h","status":"renamed"},{"patch":"@@ -30,1 +30,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -38,1 +38,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8249757\/LibTest8249757Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8249757\/LibTest8249757Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8249757\/libTest8249757.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8249757\/libTest8249757.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8249757\/test8249757.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8249757\/test8249757.h","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -47,1 +47,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8252016\/Test8252016.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8252016\/Test8252016.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8252016\/libVSPrintf.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8252016\/libVSPrintf.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8252016\/vsprintf.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8252016\/vsprintf.h","status":"renamed"},{"patch":"@@ -39,1 +39,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -47,1 +47,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8252121\/Test8252121.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8252121\/arrayparam.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8252121\/arrayparam.h","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8252121\/libArrayparam.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8252121\/libArrayparam.c","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -44,1 +44,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8252465\/LibTest8252465Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8252465\/test8252465.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8252465\/test8252465.h","status":"renamed"},{"patch":"@@ -38,1 +38,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -46,1 +46,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8253102\/LibTest8253102Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8253102\/LibTest8253102Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8253102\/libTest8253102.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8253102\/libTest8253102.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8253102\/test8253102.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8253102\/test8253102.h","status":"renamed"},{"patch":"@@ -30,1 +30,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -38,1 +38,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8253390\/LibTest8253390Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8253390\/LibTest8253390Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8253390\/test8253390.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8253390\/test8253390.h","status":"renamed"},{"patch":"@@ -34,1 +34,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -42,1 +42,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8254983\/LibTest8254983Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8254983\/test8254983.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8254983\/test8254983.h","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -47,1 +47,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8257892\/LibUnsupportedTest.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8257892\/libUnsupported.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8257892\/libUnsupported.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8257892\/unsupported.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8257892\/unsupported.h","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -44,1 +44,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8258605\/LibTest8258605Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8258605\/funcParam.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8258605\/funcParam.h","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8258605\/libFuncParam.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8258605\/libFuncParam.c","status":"renamed"},{"patch":"@@ -36,1 +36,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -44,1 +44,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8259473\/LibTest8259473Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8259473\/LibTest8259473Test.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8259473\/test8259473.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8259473\/test8259473.h","status":"renamed"},{"patch":"@@ -34,1 +34,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -42,1 +42,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8261511\/Test8261511.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8261511\/libTest8261511.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8261511\/libTest8261511.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8261511\/test8261511.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8261511\/test8261511.h","status":"renamed"},{"patch":"@@ -32,1 +32,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8281764\/Test8281764.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/generator\/test8281764\/Test8281764.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8281764\/test8281764.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8281764\/test8281764.h","status":"renamed"},{"patch":"@@ -32,1 +32,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/test8282235\/Test8282235.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/generator\/test8282235\/Test8282235.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/test8282235\/test8282235.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/test8282235\/test8282235.h","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-  * @library ..\/..\/lib\n+  * @library \/lib\n@@ -39,1 +39,1 @@\n-  * @library ..\/..\/lib\n+  * @library \/lib\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/testFunctionPointer\/LibFuncPtrTest.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/testFunctionPointer\/funcPtr.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/testFunctionPointer\/funcPtr.h","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/testFunctionPointer\/libFuncPtr.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/testFunctionPointer\/libFuncPtr.c","status":"renamed"},{"patch":"@@ -34,1 +34,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -40,1 +40,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/testGlobalRedefinition\/TestGlobalRedefinition.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/testGlobalRedefinition\/TestGlobalRedefinition.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/testGlobalRedefinition\/redef.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/testGlobalRedefinition\/redef.h","status":"renamed"},{"patch":"@@ -37,1 +37,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n@@ -44,1 +44,1 @@\n- * @library ..\/..\/lib\n+ * @library \/lib\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/testStruct\/LibStructTest.java","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/testStruct\/libStruct.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/testStruct\/libStruct.c","status":"renamed"},{"patch":"","filename":"test\/jtreg\/generator\/testStruct\/struct.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/generator\/testStruct\/struct.h","status":"renamed"},{"patch":"","filename":"test\/jtreg\/split.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/split.h","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.jextract.test.api;\n+package testlib;\n@@ -39,1 +39,1 @@\n-    static final boolean isMacOSX =\n+    protected static final boolean isMacOSX =\n@@ -41,1 +41,1 @@\n-    static final boolean isWindows =\n+    protected static final boolean isWindows =\n@@ -45,2 +45,1 @@\n-        Path header = Paths.get(System.getProperty(\"test.root\", \".\"),\n-                \"java\", \"org\", \"openjdk\", \"jextract\", \"test\", \"api\", headerFilename);\n+        Path header = Paths.get(System.getProperty(\"test.file\")).getParent().resolve(headerFilename);\n@@ -232,1 +231,1 @@\n-    static class TypeUnwrapper {\n+    protected static class TypeUnwrapper {\n","filename":"test\/lib\/testlib\/JextractApiTestBase.java","additions":5,"deletions":6,"binary":false,"changes":11,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/JextractApiTestBase.java","status":"renamed"},{"patch":"@@ -0,0 +1,288 @@\n+\/*\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package testlib;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.spi.ToolProvider;\n+\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.MemoryLayout.PathElement;\n+import jdk.incubator.foreign.ValueLayout;\n+import org.openjdk.jextract.JextractTool;\n+import org.openjdk.jextract.Type;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+public class JextractToolRunner {\n+\n+    private static final boolean IS_WINDOWS = System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n+    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;\n+    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;\n+    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT.withBitAlignment(16);\n+    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT.withBitAlignment(32);\n+    public static final ValueLayout C_LONG = IS_WINDOWS ? ValueLayout.JAVA_INT.withBitAlignment(32) : ValueLayout.JAVA_LONG.withBitAlignment(64);\n+    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG.withBitAlignment(64);\n+    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT.withBitAlignment(32);\n+    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE.withBitAlignment(64);\n+    public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(ValueLayout.ADDRESS.bitSize());\n+\n+    \/\/ (private) exit codes from jextract tool. Copied from JextractTool.\n+    protected static final int SUCCESS       = 0;\n+    protected static final int OPTION_ERROR  = 1;\n+    protected static final int INPUT_ERROR   = 2;\n+    protected static final int CLANG_ERROR   = 3;\n+    protected static final int RUNTIME_ERROR = 4;\n+    protected static final int OUTPUT_ERROR  = 5;\n+\n+    private static String safeFileName(String filename) {\n+        int ext = filename.lastIndexOf('.');\n+        return ext != -1 ? filename.substring(0, ext) : filename;\n+    }\n+\n+    private static final ToolProvider JEXTRACT_TOOL = new JextractTool.JextractToolProvider();\n+\n+    private final Path inputDir;\n+    private final Path outputDir;\n+\n+    protected JextractToolRunner() {\n+        this(null, null);\n+    }\n+\n+    protected JextractToolRunner(Path input, Path output) {\n+         inputDir = (input != null) ? input :\n+                Paths.get(System.getProperty(\"test.file\")).getParent();\n+         outputDir = (output != null) ? output :\n+                Paths.get(System.getProperty(\"test.classes\"), \"test-output\");\n+    }\n+\n+    protected Path getInputFilePath(String fileName) {\n+        return inputDir.resolve(fileName).toAbsolutePath();\n+    }\n+\n+    protected Path getOutputFilePath(String fileName) {\n+        return outputDir.resolve(fileName).toAbsolutePath();\n+    }\n+\n+    protected static class JextractResult {\n+        private int exitCode;\n+        private String output;\n+\n+        JextractResult(int exitCode, String output) {\n+            this.exitCode = exitCode;\n+            this.output = output;\n+        }\n+\n+        public JextractResult checkSuccess() {\n+            assertEquals(exitCode, SUCCESS, \"Sucess expected, failed: \" + exitCode);\n+            return this;\n+        }\n+\n+        public JextractResult checkFailure() {\n+            assertNotEquals(exitCode, SUCCESS, \"Failure expected, succeeded!\");\n+            return this;\n+        }\n+\n+        public JextractResult checkFailure(int expectedExitCode) {\n+            assertEquals(exitCode, expectedExitCode, \"Expected error code \" + expectedExitCode);\n+            return this;\n+        }\n+\n+        public JextractResult checkContainsOutput(String expected) {\n+            Objects.requireNonNull(expected);\n+            assertTrue(output.contains(expected), \"Output does not contain string: \" + expected);\n+            return this;\n+        }\n+\n+        public JextractResult checkMatchesOutput(String regex) {\n+            Objects.requireNonNull(regex);\n+            assertTrue(output.trim().matches(regex), \"Output does not match regex: \" + regex);\n+            return this;\n+        }\n+    }\n+\n+    protected static JextractResult run(Object... options) {\n+        return run(Arrays.stream(options).map(Objects::toString).toArray(String[]::new));\n+    }\n+\n+    protected static JextractResult run(String... options) {\n+        StringWriter writer = new StringWriter();\n+        PrintWriter pw = new PrintWriter(writer);\n+        String[] args = new String[options.length + 1];\n+        int result = JEXTRACT_TOOL.run(pw, pw, options);\n+        String output = writer.toString();\n+        System.err.println(output);\n+        return new JextractResult(result, output);\n+    }\n+\n+    protected static Loader classLoader(Path... paths) {\n+        try {\n+            URL[] urls = new URL[paths.length];\n+            for (int i = 0; i < paths.length; i++) {\n+                urls[i] = paths[i].toUri().toURL();\n+            }\n+            URLClassLoader ucl = new URLClassLoader(urls,\n+                    JextractToolRunner.class.getClassLoader());\n+            return new Loader(ucl);\n+        } catch (RuntimeException re) {\n+            throw re;\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected static Field findField(Class<?> cls, String name) {\n+        try {\n+            return cls.getField(name);\n+        } catch (Exception e) {\n+            System.err.println(e);\n+            return null;\n+        }\n+    }\n+\n+    protected Method checkIntGetter(Class<?> cls, String name, int value) {\n+        Method method = findMethod(cls, name);\n+        assertNotNull(method);\n+        assertEquals(method.getReturnType(), int.class);\n+        try {\n+            assertEquals((int)method.invoke(null), value);\n+        } catch (Exception exp) {\n+            System.err.println(exp);\n+            assertTrue(false, \"should not reach here\");\n+        }\n+        return method;\n+    }\n+\n+    protected static Method findMethod(Class<?> cls, String name, Class<?>... argTypes) {\n+        try {\n+            return cls.getMethod(name, argTypes);\n+        } catch (Exception e) {\n+            System.err.println(e);\n+            return null;\n+        }\n+    }\n+\n+    protected static Method findFirstMethod(Class<?> cls, String name) {\n+        try {\n+            for (Method m : cls.getMethods()) {\n+                if (name.equals(m.getName())) {\n+                    return m;\n+                }\n+            }\n+            return null;\n+        } catch (Exception e) {\n+            System.err.println(e);\n+            return null;\n+        }\n+    }\n+\n+    protected static Class<?> findNestedClass(Class<?> clz, String name) {\n+        return findClass(clz.getClasses(), name);\n+    }\n+\n+    protected static Class<?> findClass(Class<?>[] clz, String name) {\n+        for (Class<?> cls: clz) {\n+            if (cls.getSimpleName().equals(name)) {\n+                return cls;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected Method checkMethod(Class<?> cls, String name, MethodType type) {\n+        return checkMethod(cls, name, type.returnType(), type.parameterArray());\n+    }\n+\n+    protected Method checkMethod(Class<?> cls, String name, Class<?> returnType, Class<?>... args) {\n+        Method m = findMethod(cls, name, args);\n+        assertNotNull(m);\n+        assertEquals(m.getReturnType(), returnType);\n+        assertEquals(m.getParameterTypes(), args);\n+        return m;\n+    }\n+\n+    protected static MemoryLayout findLayout(Class<?> cls, String name) {\n+        Method method = findMethod(cls, name + \"$LAYOUT\");\n+        assertNotNull(method);\n+        assertEquals(method.getReturnType(), MemoryLayout.class);\n+        try {\n+            return (MemoryLayout)method.invoke(null);\n+        } catch (Exception exp) {\n+            System.err.println(exp);\n+            assertTrue(false, \"should not reach here\");\n+        }\n+        return null;\n+    }\n+\n+    protected static MemoryLayout findLayout(Class<?> cls) {\n+        return findLayout(cls, \"\");\n+    }\n+\n+    protected static void checkField(MemoryLayout group, String fieldName, MemoryLayout expected) {\n+        assertEquals(group.select(PathElement.groupElement(fieldName)), expected.withName(fieldName));\n+    }\n+\n+    protected static class Loader implements AutoCloseable {\n+\n+        private final URLClassLoader loader;\n+\n+        public Loader(URLClassLoader loader) {\n+            this.loader = loader;\n+        }\n+\n+        public Class<?> loadClass(String className) {\n+            try {\n+                return Class.forName(className, false, loader);\n+            } catch (ClassNotFoundException e) {\n+                \/\/ return null so caller can check if class loading\n+                \/\/ was successful with assertNotNull\/assertNull\n+                return null;\n+            }\n+        }\n+\n+        @Override\n+        public void close() {\n+            try {\n+                loader.close();\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":288,"deletions":0,"binary":false,"changes":288,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.jextract.test;\n+package testlib;\n","filename":"test\/lib\/testlib\/TestUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/TestUtils.java","status":"renamed"},{"patch":"@@ -0,0 +1,1 @@\n+lib.dirs = \/lib\n\\ No newline at end of file\n","filename":"test\/testng\/TEST.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/SmokeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/SmokeTest.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8238712.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8238712.h","status":"renamed"},{"patch":"@@ -28,0 +28,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8238712.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8238712.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8239490.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8239490.h","status":"renamed"},{"patch":"@@ -28,0 +28,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8239490.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8239490.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8240372.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8240372.h","status":"renamed"},{"patch":"@@ -28,0 +28,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8240372.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8240372.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8240853.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8240853.h","status":"renamed"},{"patch":"@@ -27,0 +27,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8240853.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8240853.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/Test8241650.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/Test8241650.java","status":"renamed"},{"patch":"@@ -35,0 +35,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/TestAttributes.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/TestAttributes.java","status":"renamed"},{"patch":"@@ -32,0 +32,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/TestMacros.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/TestMacros.java","status":"renamed"},{"patch":"@@ -27,0 +27,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/TestNestedBitfields.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/TestNestedBitfields.java","status":"renamed"},{"patch":"@@ -29,0 +29,1 @@\n+import testlib.JextractApiTestBase;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/TestTypedef.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/TestTypedef.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/badMacros.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/badMacros.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/libAsmSymbol.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/libAsmSymbol.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/nestedbitfields.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/nestedbitfields.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/smoke.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/smoke.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/api\/testTypedef.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/api\/testTypedef.h","status":"renamed"},{"patch":"@@ -52,0 +52,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/BadBitfieldTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/BadBitfieldTest.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -38,0 +38,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -28,0 +28,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/IncompleteArrayTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/IncompleteArrayTest.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JDK-8248474.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/JDK-8248474.h","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -28,0 +28,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -35,0 +35,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/RepeatedDeclsTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/RepeatedDeclsTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider;\n+\n+import testlib.TestUtils;\n+import org.testng.annotations.Test;\n+import testlib.JextractToolRunner;\n+\n+import java.nio.file.Path;\n+import static org.testng.Assert.assertNotNull;\n+\n+public class Test7903148 extends JextractToolRunner {\n+    @Test\n+    public void test() {\n+        Path output = getOutputFilePath(\"7903148gen\");\n+        Path outputH = getInputFilePath(\"test7903148.h\");\n+        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(output)) {\n+            Class<?> headerCls = loader.loadClass(\"test7903148_h\");\n+            assertNotNull(headerCls);\n+            checkMethod(headerCls, \"func\", int.class, int.class);\n+        } finally {\n+            TestUtils.deleteDir(output);\n+        }\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903148.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -26,1 +26,2 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.JextractToolRunner;\n+import testlib.TestUtils;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903158.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903158.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240181.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240181.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240657.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240657.java","status":"renamed"},{"patch":"@@ -30,1 +30,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -32,0 +32,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240752.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240752.java","status":"renamed"},{"patch":"@@ -31,1 +31,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -33,0 +33,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8244412.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8244412.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8245767.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8245767.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248415.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248415.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248474.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248474.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249290.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249290.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249300.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249300.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8251943.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8251943.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258223.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258223.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258405.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258405.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260344.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260344.java","status":"renamed"},{"patch":"@@ -30,1 +30,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -32,0 +32,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260705.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260705.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260717.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260717.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260929.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260929.java","status":"renamed"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261578.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261578.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -30,0 +30,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261893.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261893.java","status":"renamed"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -31,0 +31,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262117.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262117.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -28,0 +28,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262733.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262733.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -28,0 +28,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262825.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262825.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -28,0 +28,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262851.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262851.java","status":"renamed"},{"patch":"@@ -26,0 +26,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestAttributedPointerTypedef.java","additions":1,"deletions":0,"binary":false,"changes":1,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/TestAttributedPointerTypedef.java","status":"renamed"},{"patch":"@@ -30,1 +30,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -32,0 +32,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","status":"renamed"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -28,0 +28,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestFilters.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/TestFilters.java","status":"renamed"},{"patch":"@@ -34,1 +34,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -36,0 +36,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","status":"renamed"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -27,0 +27,1 @@\n+import testlib.JextractToolRunner;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestTypedefIsFunctionProto.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/TestTypedefIsFunctionProto.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.jextract.test.TestUtils;\n+import testlib.TestUtils;\n@@ -32,0 +32,2 @@\n+import testlib.JextractToolRunner;\n+\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/UniondeclTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/UniondeclTest.java","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/anonenum.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/anonenum.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/attributedPointerTypedef.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/attributedPointerTypedef.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/badBitfields.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/badBitfields.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/constants.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/constants.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/constants_aux.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/constants_aux.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/directory.h\/DUMMY.TXT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/directory.h\/DUMMY.TXT","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/examples.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/examples.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/exports.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/exports.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/filters.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/filters.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/float_constants.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/float_constants.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/funcproto.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/funcproto.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/hello.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/hello.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/helloargs","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/helloargs","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/illegal_decls.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/illegal_decls.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/incompleteArray.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/incompleteArray.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/libExamples.c","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/libExamples.c","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/name_collision.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/name_collision.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/nested.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/nested.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/non_existent_includer.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/non_existent_includer.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/repeatedDecls.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/repeatedDecls.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903148.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test7903148.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903158.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test7903158.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8245767.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8245767.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8248415.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8248415.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8249290.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8249290.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8249300.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8249300.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8251943.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8251943.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8258223.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8258223.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8258405.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8258405.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8260344.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8260344.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8260705.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8260705.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8260717.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8260717.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8260929.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8260929.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8261578_1.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8261578_1.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8261578_2.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8261578_2.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8261578_3.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8261578_3.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8261893.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8261893.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8262117.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8262117.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8262733.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8262733.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8262825.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8262825.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test8262851.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test8262851.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/typedefs.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/typedefs.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/uniondecl.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/uniondecl.h","status":"renamed"},{"patch":"","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/unsupported_lang.h","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/unsupported_lang.h","status":"renamed"}]}