{"files":[{"patch":"@@ -57,1 +57,1 @@\n-            var a = arena.allocateArray(C_DOUBLE,\n+            var a = arena.allocateFrom(C_DOUBLE,\n@@ -63,1 +63,1 @@\n-            var x = arena.allocateArray(C_DOUBLE,\n+            var x = arena.allocateFrom(C_DOUBLE,\n@@ -66,1 +66,1 @@\n-            var y = arena.allocateArray(C_DOUBLE, n);\n+            var y = arena.allocate(C_DOUBLE, n);\n","filename":"samples\/cblas\/TestBlas.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --enable-preview --source=21 blas\/*.java\n+javac --enable-preview --source=22 blas\/*.java\n","filename":"samples\/cblas\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-time java --enable-native-access=ALL-UNNAMED --enable-preview --source=21 \\\n+time java --enable-native-access=ALL-UNNAMED --enable-preview --source=22 \\\n","filename":"samples\/cblas\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/cblas\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-            var handleAddr = dlopen(libArena.allocateUtf8String(libraryName), RTLD_LOCAL());\n+            var handleAddr = dlopen(libArena.allocateFrom(libraryName), RTLD_LOCAL());\n@@ -51,1 +51,1 @@\n-                    var addr = dlsym(handle, newArena.allocateUtf8String(name));\n+                    var addr = dlsym(handle, newArena.allocateFrom(name));\n@@ -72,1 +72,1 @@\n-            greetingMH.invoke(arena.allocateUtf8String(arg));\n+            greetingMH.invoke(arena.allocateFrom(arg));\n","filename":"samples\/dlopen\/Dlopen.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-javac --enable-preview --source=21 org\/unix\/*.java\n+javac --enable-preview --source=22 org\/unix\/*.java\n","filename":"samples\/dlopen\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --enable-preview --source=21 \\\n+   --enable-preview --source=22 \\\n","filename":"samples\/dlopen\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-javac --enable-preview --source=21 org\/golang\/*.java\n+javac --enable-preview --source=22 org\/golang\/*.java\n","filename":"samples\/go\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-java --enable-preview --source=21 --enable-native-access=ALL-UNNAMED Main.java\n+java --enable-preview --source=22 --enable-native-access=ALL-UNNAMED Main.java\n","filename":"samples\/go\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-javac --enable-preview --source=21 org\/hello\/*.java\n+javac --enable-preview --source=22 org\/hello\/*.java\n","filename":"samples\/helloworld\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-java --enable-native-access=ALL-UNNAMED --enable-preview --source=21 HelloWorld.java\n+java --enable-native-access=ALL-UNNAMED --enable-preview --source=22 HelloWorld.java\n","filename":"samples\/helloworld\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-            var A = arena.allocateArray(C_DOUBLE,\n+            var A = arena.allocateFrom(C_DOUBLE,\n@@ -46,1 +46,1 @@\n-            var b = arena.allocateArray(C_DOUBLE,\n+            var b = arena.allocateFrom(C_DOUBLE,\n","filename":"samples\/lapack\/TestLapack.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --enable-preview --source=21 lapack\/*.java\n+javac --enable-preview --source=22 lapack\/*.java\n","filename":"samples\/lapack\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-java --enable-native-access=ALL-UNNAMED --enable-preview --source=21 \\\n+java --enable-native-access=ALL-UNNAMED --enable-preview --source=22 \\\n","filename":"samples\/lapack\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/lapack\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        String str = clang_getCString(clangStr).getUtf8String(0);\n+        String str = clang_getCString(clangStr).getString(0);\n@@ -53,1 +53,1 @@\n-            var tu = clang_parseTranslationUnit(index, arena.allocateUtf8String(args[0]),\n+            var tu = clang_parseTranslationUnit(index, arena.allocateFrom(args[0]),\n","filename":"samples\/libclang\/ASTPrinter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --enable-preview --source=21 org\/llvm\/clang\/*.java\n+javac --enable-preview --source=22 org\/llvm\/clang\/*.java\n","filename":"samples\/libclang\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/libclang\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/libclang\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-               var url = arena.allocateUtf8String(urlStr);\n+               var url = arena.allocateFrom(urlStr);\n@@ -49,1 +49,1 @@\n-                   String error = curl_easy_strerror(res).getUtf8String(0);\n+                   String error = curl_easy_strerror(res).getString(0);\n","filename":"samples\/libcurl\/CurlMain.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --enable-preview --source=21 org\/jextract\/*.java\n+javac --enable-preview --source=22 org\/jextract\/*.java\n","filename":"samples\/libcurl\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/libcurl\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/libcurl\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-            var fileName = arena.allocateUtf8String(args[0]);\n+            var fileName = arena.allocateFrom(args[0]);\n@@ -294,1 +294,1 @@\n-                                      .reinterpret(3*width, arena.scope(), null);\n+                                      .reinterpret(3*width, arena, null);\n","filename":"samples\/libffmpeg\/LibffmpegMain.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.3\/include \\\n+  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.4\/include \\\n","filename":"samples\/libffmpeg\/compile.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.3\/include \\\n+  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.4\/include \\\n@@ -11,1 +11,1 @@\n-javac --enable-preview --source=21 libffmpeg\/*.java\n+javac --enable-preview --source=22 libffmpeg\/*.java\n","filename":"samples\/libffmpeg\/compilesource.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-   --enable-preview --source=21 \\\n-   -Djava.library.path=\/usr\/local\/Cellar\/ffmpeg@4\/4.4.3\/lib LibffmpegMain.java $*\n+   --enable-preview --source=22 \\\n+   -Djava.library.path=\/usr\/local\/Cellar\/ffmpeg@4\/4.4.4\/lib LibffmpegMain.java $*\n","filename":"samples\/libffmpeg\/run.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-              var url = arena.allocateUtf8String(args[0]);\n-              var path = arena.allocateUtf8String(args[1]);\n+              var url = arena.allocateFrom(args[0]);\n+              var path = arena.allocateFrom(args[1]);\n","filename":"samples\/libgit2\/GitClone.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-javac --enable-preview --source=21 com\/github\/*.java\n+javac --enable-preview --source=22 com\/github\/*.java\n","filename":"samples\/libgit2\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/libgit2\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/libgit2\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            var moduleFilePath = arena.allocateUtf8String(javaHome + \"\/lib\/modules\");\n+            var moduleFilePath = arena.allocateFrom(javaHome + \"\/lib\/modules\");\n@@ -59,1 +59,1 @@\n-                arena.allocateUtf8String(\"java\/util\"));\n+                arena.allocateFrom(\"java\/util\"));\n@@ -67,3 +67,3 @@\n-                   System.out.println(\"module \" + module_name.getUtf8String(0));\n-                   System.out.println(\"package \" + package_name.getUtf8String(0));\n-                   System.out.println(\"name \" + name.getUtf8String(0));\n+                   System.out.println(\"module \" + module_name.getString(0));\n+                   System.out.println(\"package \" + package_name.getString(0));\n+                   System.out.println(\"name \" + name.getString(0));\n","filename":"samples\/libjimage\/JImageFile.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-javac -d build --enable-preview --source=21 org\/openjdk\/*.java\n+javac -d build --enable-preview --source=22 org\/openjdk\/*.java\n","filename":"samples\/libjimage\/compile.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-javac -d build --enable-preview --source=21 org\/openjdk\/*.java\n+javac -d build --enable-preview --source=22 org\/openjdk\/*.java\n","filename":"samples\/libjimage\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,25 +0,0 @@\n-\/\/ Generated by jextract\n-\n-package org.openjdk;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import java.lang.foreign.*;\n-import static java.lang.foreign.ValueLayout.*;\n-final class Constants$root {\n-\n-    \/\/ Suppresses default constructor, ensuring non-instantiability.\n-    private Constants$root() {}\n-    static final OfBoolean C_BOOL$LAYOUT = JAVA_BOOLEAN;\n-    static final OfByte C_CHAR$LAYOUT = JAVA_BYTE;\n-    static final OfShort C_SHORT$LAYOUT = JAVA_SHORT;\n-    static final OfInt C_INT$LAYOUT = JAVA_INT;\n-    static final OfLong C_LONG$LAYOUT = JAVA_LONG;\n-    static final OfLong C_LONG_LONG$LAYOUT = JAVA_LONG;\n-    static final OfFloat C_FLOAT$LAYOUT = JAVA_FLOAT;\n-    static final OfDouble C_DOUBLE$LAYOUT = JAVA_DOUBLE;\n-    static final OfAddress C_POINTER$LAYOUT = ADDRESS.withBitAlignment(64).withTargetLayout(MemoryLayout.sequenceLayout(Constants$root.C_CHAR$LAYOUT));\n-}\n-\n-\n","filename":"samples\/libjimage\/org\/openjdk\/Constants$root.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"deleted"},{"patch":"@@ -19,1 +19,1 @@\n-        return RuntimeHelper.upcallStub(JImageClose_t.class, fi, constants$0.JImageClose_t$FUNC, scope);\n+        return RuntimeHelper.upcallStub(constants$1.const$0, fi, constants$0.const$4, scope);\n@@ -25,1 +25,1 @@\n-                constants$0.JImageClose_t$MH.invokeExact(symbol, _jimage);\n+                constants$1.const$1.invokeExact(symbol, _jimage);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageClose_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        return RuntimeHelper.upcallStub(JImageFindResource_t.class, fi, constants$1.JImageFindResource_t$FUNC, scope);\n+        return RuntimeHelper.upcallStub(constants$2.const$0, fi, constants$1.const$4, scope);\n@@ -25,1 +25,1 @@\n-                return (long)constants$1.JImageFindResource_t$MH.invokeExact(symbol, _jimage, _module_name, _version, _name, _size);\n+                return (long)constants$2.const$1.invokeExact(symbol, _jimage, _module_name, _version, _name, _size);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageFindResource_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        return RuntimeHelper.upcallStub(JImageGetResource_t.class, fi, constants$2.JImageGetResource_t$FUNC, scope);\n+        return RuntimeHelper.upcallStub(constants$2.const$4, fi, constants$2.const$2, scope);\n@@ -25,1 +25,1 @@\n-                return (long)constants$2.JImageGetResource_t$MH.invokeExact(symbol, _jimage, _location, _buffer, _size);\n+                return (long)constants$2.const$5.invokeExact(symbol, _jimage, _location, _buffer, _size);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageGetResource_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        return RuntimeHelper.upcallStub(JImageOpen_t.class, fi, constants$0.JImageOpen_t$FUNC, scope);\n+        return RuntimeHelper.upcallStub(constants$0.const$2, fi, constants$0.const$0, scope);\n@@ -25,1 +25,1 @@\n-                return (java.lang.foreign.MemorySegment)constants$0.JImageOpen_t$MH.invokeExact(symbol, _jimage, _package_name);\n+                return (java.lang.foreign.MemorySegment)constants$0.const$3.invokeExact(symbol, _jimage, _package_name);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageOpen_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        return RuntimeHelper.upcallStub(JImagePackageToModule_t.class, fi, constants$1.JImagePackageToModule_t$FUNC, scope);\n+        return RuntimeHelper.upcallStub(constants$1.const$3, fi, constants$0.const$0, scope);\n@@ -25,1 +25,1 @@\n-                return (java.lang.foreign.MemorySegment)constants$1.JImagePackageToModule_t$MH.invokeExact(symbol, _jimage, _package_name);\n+                return (java.lang.foreign.MemorySegment)constants$0.const$3.invokeExact(symbol, _jimage, _package_name);\n","filename":"samples\/libjimage\/org\/openjdk\/JImagePackageToModule_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        return RuntimeHelper.upcallStub(JImageResourceIterator_t.class, fi, constants$3.JImageResourceIterator_t$FUNC, scope);\n+        return RuntimeHelper.upcallStub(constants$3.const$5, fi, constants$3.const$3, scope);\n@@ -25,1 +25,1 @@\n-                constants$3.JImageResourceIterator_t$MH.invokeExact(symbol, _jimage, _visitor, _arg);\n+                constants$4.const$0.invokeExact(symbol, _jimage, _visitor, _arg);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceIterator_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -19,1 +19,1 @@\n-        return RuntimeHelper.upcallStub(JImageResourceVisitor_t.class, fi, constants$2.JImageResourceVisitor_t$FUNC, scope);\n+        return RuntimeHelper.upcallStub(constants$3.const$1, fi, constants$3.const$0, scope);\n@@ -25,1 +25,1 @@\n-                return (int)constants$2.JImageResourceVisitor_t$MH.invokeExact(symbol, _jimage, _module_name, _version, _package_, _name, _extension, _arg);\n+                return (int)constants$3.const$2.invokeExact(symbol, _jimage, _module_name, _version, _package_, _name, _extension, _arg);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceVisitor_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -23,0 +23,3 @@\n+import java.lang.foreign.AddressLayout;\n+import java.lang.foreign.MemoryLayout;\n+\n@@ -25,0 +28,1 @@\n+import static java.lang.Long.MAX_VALUE;\n@@ -33,0 +37,1 @@\n+    static final AddressLayout POINTER = ValueLayout.ADDRESS.withTargetLayout(MemoryLayout.sequenceLayout(MAX_VALUE, JAVA_BYTE));\n@@ -84,1 +89,9 @@\n-    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, Arena scope) {\n+    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {\n+        try {\n+            return MH_LOOKUP.findVirtual(fi, name, fdesc.toMethodType());\n+        } catch (Throwable ex) {\n+            throw new AssertionError(ex);\n+        }\n+    }\n+\n+    static <Z> MemorySegment upcallStub(MethodHandle fiHandle, Z z, FunctionDescriptor fdesc, Arena scope) {\n@@ -86,3 +99,2 @@\n-            MethodHandle handle = MH_LOOKUP.findVirtual(fi, \"apply\", fdesc.toMethodType());\n-            handle = handle.bindTo(z);\n-            return LINKER.upcallStub(handle, fdesc, scope);\n+            fiHandle = fiHandle.bindTo(z);\n+            return LINKER.upcallStub(fiHandle, fdesc, scope);\n@@ -95,1 +107,1 @@\n-         return addr.reinterpret(numElements * layout.byteSize(), arena.scope(), null);\n+         return addr.reinterpret(numElements * layout.byteSize(), arena, null);\n","filename":"samples\/libjimage\/org\/openjdk\/RuntimeHelper.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -14,3 +14,3 @@\n-    static final FunctionDescriptor JIMAGE_Open$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n+    static final FunctionDescriptor const$0 = FunctionDescriptor.of(RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER\n@@ -18,1 +18,1 @@\n-    static final MethodHandle JIMAGE_Open$MH = RuntimeHelper.downcallHandle(\n+    static final MethodHandle const$1 = RuntimeHelper.downcallHandle(\n@@ -20,1 +20,1 @@\n-        constants$0.JIMAGE_Open$FUNC\n+        constants$0.const$0\n@@ -22,3 +22,3 @@\n-    static final FunctionDescriptor JImageOpen_t$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n+    static final MethodHandle const$2 = RuntimeHelper.upcallHandle(JImageOpen_t.class, \"apply\", constants$0.const$0);\n+    static final MethodHandle const$3 = RuntimeHelper.downcallHandle(\n+        constants$0.const$0\n@@ -26,2 +26,2 @@\n-    static final MethodHandle JImageOpen_t$MH = RuntimeHelper.downcallHandle(\n-        constants$0.JImageOpen_t$FUNC\n+    static final FunctionDescriptor const$4 = FunctionDescriptor.ofVoid(\n+        RuntimeHelper.POINTER\n@@ -29,4 +29,1 @@\n-    static final FunctionDescriptor JIMAGE_Close$FUNC = FunctionDescriptor.ofVoid(\n-        Constants$root.C_POINTER$LAYOUT\n-    );\n-    static final MethodHandle JIMAGE_Close$MH = RuntimeHelper.downcallHandle(\n+    static final MethodHandle const$5 = RuntimeHelper.downcallHandle(\n@@ -34,7 +31,1 @@\n-        constants$0.JIMAGE_Close$FUNC\n-    );\n-    static final FunctionDescriptor JImageClose_t$FUNC = FunctionDescriptor.ofVoid(\n-        Constants$root.C_POINTER$LAYOUT\n-    );\n-    static final MethodHandle JImageClose_t$MH = RuntimeHelper.downcallHandle(\n-        constants$0.JImageClose_t$FUNC\n+        constants$0.const$4\n","filename":"samples\/libjimage\/org\/openjdk\/constants$0.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -14,3 +14,3 @@\n-    static final FunctionDescriptor JIMAGE_PackageToModule$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n+    static final MethodHandle const$0 = RuntimeHelper.upcallHandle(JImageClose_t.class, \"apply\", constants$0.const$4);\n+    static final MethodHandle const$1 = RuntimeHelper.downcallHandle(\n+        constants$0.const$4\n@@ -18,1 +18,1 @@\n-    static final MethodHandle JIMAGE_PackageToModule$MH = RuntimeHelper.downcallHandle(\n+    static final MethodHandle const$2 = RuntimeHelper.downcallHandle(\n@@ -20,1 +20,1 @@\n-        constants$1.JIMAGE_PackageToModule$FUNC\n+        constants$0.const$0\n@@ -22,3 +22,7 @@\n-    static final FunctionDescriptor JImagePackageToModule_t$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n+    static final MethodHandle const$3 = RuntimeHelper.upcallHandle(JImagePackageToModule_t.class, \"apply\", constants$0.const$0);\n+    static final FunctionDescriptor const$4 = FunctionDescriptor.of(JAVA_LONG,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER\n@@ -26,11 +30,1 @@\n-    static final MethodHandle JImagePackageToModule_t$MH = RuntimeHelper.downcallHandle(\n-        constants$1.JImagePackageToModule_t$FUNC\n-    );\n-    static final FunctionDescriptor JIMAGE_FindResource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n-    );\n-    static final MethodHandle JIMAGE_FindResource$MH = RuntimeHelper.downcallHandle(\n+    static final MethodHandle const$5 = RuntimeHelper.downcallHandle(\n@@ -38,11 +32,1 @@\n-        constants$1.JIMAGE_FindResource$FUNC\n-    );\n-    static final FunctionDescriptor JImageFindResource_t$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n-    );\n-    static final MethodHandle JImageFindResource_t$MH = RuntimeHelper.downcallHandle(\n-        constants$1.JImageFindResource_t$FUNC\n+        constants$1.const$4\n","filename":"samples\/libjimage\/org\/openjdk\/constants$1.java","additions":14,"deletions":30,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -14,5 +14,3 @@\n-    static final FunctionDescriptor JIMAGE_GetResource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_LONG_LONG$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_LONG_LONG$LAYOUT\n+    static final MethodHandle const$0 = RuntimeHelper.upcallHandle(JImageFindResource_t.class, \"apply\", constants$1.const$4);\n+    static final MethodHandle const$1 = RuntimeHelper.downcallHandle(\n+        constants$1.const$4\n@@ -20,12 +18,5 @@\n-    static final MethodHandle JIMAGE_GetResource$MH = RuntimeHelper.downcallHandle(\n-        \"JIMAGE_GetResource\",\n-        constants$2.JIMAGE_GetResource$FUNC\n-    );\n-    static final FunctionDescriptor JImageGetResource_t$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_LONG_LONG$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_LONG_LONG$LAYOUT\n-    );\n-    static final MethodHandle JImageGetResource_t$MH = RuntimeHelper.downcallHandle(\n-        constants$2.JImageGetResource_t$FUNC\n+    static final FunctionDescriptor const$2 = FunctionDescriptor.of(JAVA_LONG,\n+        RuntimeHelper.POINTER,\n+        JAVA_LONG,\n+        RuntimeHelper.POINTER,\n+        JAVA_LONG\n@@ -33,16 +24,3 @@\n-    static final FunctionDescriptor JImageResourceVisitor_t$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n-    );\n-    static final MethodHandle JImageResourceVisitor_t$MH = RuntimeHelper.downcallHandle(\n-        constants$2.JImageResourceVisitor_t$FUNC\n-    );\n-    static final FunctionDescriptor JIMAGE_ResourceIterator$FUNC = FunctionDescriptor.ofVoid(\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n+    static final MethodHandle const$3 = RuntimeHelper.downcallHandle(\n+        \"JIMAGE_GetResource\",\n+        constants$2.const$2\n@@ -50,3 +28,3 @@\n-    static final MethodHandle JIMAGE_ResourceIterator$MH = RuntimeHelper.downcallHandle(\n-        \"JIMAGE_ResourceIterator\",\n-        constants$2.JIMAGE_ResourceIterator$FUNC\n+    static final MethodHandle const$4 = RuntimeHelper.upcallHandle(JImageGetResource_t.class, \"apply\", constants$2.const$2);\n+    static final MethodHandle const$5 = RuntimeHelper.downcallHandle(\n+        constants$2.const$2\n","filename":"samples\/libjimage\/org\/openjdk\/constants$2.java","additions":14,"deletions":36,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -14,4 +14,8 @@\n-    static final FunctionDescriptor JImageResourceIterator_t$FUNC = FunctionDescriptor.ofVoid(\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT,\n-        Constants$root.C_POINTER$LAYOUT\n+    static final FunctionDescriptor const$0 = FunctionDescriptor.of(JAVA_INT,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER\n@@ -19,2 +23,3 @@\n-    static final MethodHandle JImageResourceIterator_t$MH = RuntimeHelper.downcallHandle(\n-        constants$3.JImageResourceIterator_t$FUNC\n+    static final MethodHandle const$1 = RuntimeHelper.upcallHandle(JImageResourceVisitor_t.class, \"apply\", constants$3.const$0);\n+    static final MethodHandle const$2 = RuntimeHelper.downcallHandle(\n+        constants$3.const$0\n@@ -22,0 +27,10 @@\n+    static final FunctionDescriptor const$3 = FunctionDescriptor.ofVoid(\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER,\n+        RuntimeHelper.POINTER\n+    );\n+    static final MethodHandle const$4 = RuntimeHelper.downcallHandle(\n+        \"JIMAGE_ResourceIterator\",\n+        constants$3.const$3\n+    );\n+    static final MethodHandle const$5 = RuntimeHelper.upcallHandle(JImageResourceIterator_t.class, \"apply\", constants$3.const$3);\n","filename":"samples\/libjimage\/org\/openjdk\/constants$3.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,19 @@\n+\/\/ Generated by jextract\n+\n+package org.openjdk;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n+final class constants$4 {\n+\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private constants$4() {}\n+    static final MethodHandle const$0 = RuntimeHelper.downcallHandle(\n+        constants$3.const$3\n+    );\n+}\n+\n+\n","filename":"samples\/libjimage\/org\/openjdk\/constants$4.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -12,8 +12,8 @@\n-    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;\n-    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;\n-    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;\n-    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;\n-    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;\n-    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;\n-    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;\n-    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;\n+    public static final OfByte C_CHAR = JAVA_BYTE;\n+    public static final OfShort C_SHORT = JAVA_SHORT;\n+    public static final OfInt C_INT = JAVA_INT;\n+    public static final OfLong C_LONG = JAVA_LONG;\n+    public static final OfLong C_LONG_LONG = JAVA_LONG;\n+    public static final OfFloat C_FLOAT = JAVA_FLOAT;\n+    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;\n+    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;\n@@ -33,1 +33,1 @@\n-    public static final OfLong jlong = Constants$root.C_LONG_LONG$LAYOUT;\n+    public static final OfLong jlong = JAVA_LONG;\n@@ -39,1 +39,1 @@\n-    public static final OfInt jint = Constants$root.C_INT$LAYOUT;\n+    public static final OfInt jint = JAVA_INT;\n@@ -45,1 +45,1 @@\n-    public static final OfLong JImageLocationRef = Constants$root.C_LONG_LONG$LAYOUT;\n+    public static final OfLong JImageLocationRef = JAVA_LONG;\n@@ -47,1 +47,1 @@\n-        return RuntimeHelper.requireNonNull(constants$0.JIMAGE_Open$MH,\"JIMAGE_Open\");\n+        return RuntimeHelper.requireNonNull(constants$0.const$1,\"JIMAGE_Open\");\n@@ -63,1 +63,1 @@\n-        return RuntimeHelper.requireNonNull(constants$0.JIMAGE_Close$MH,\"JIMAGE_Close\");\n+        return RuntimeHelper.requireNonNull(constants$0.const$5,\"JIMAGE_Close\");\n@@ -79,1 +79,1 @@\n-        return RuntimeHelper.requireNonNull(constants$1.JIMAGE_PackageToModule$MH,\"JIMAGE_PackageToModule\");\n+        return RuntimeHelper.requireNonNull(constants$1.const$2,\"JIMAGE_PackageToModule\");\n@@ -95,1 +95,1 @@\n-        return RuntimeHelper.requireNonNull(constants$1.JIMAGE_FindResource$MH,\"JIMAGE_FindResource\");\n+        return RuntimeHelper.requireNonNull(constants$1.const$5,\"JIMAGE_FindResource\");\n@@ -111,1 +111,1 @@\n-        return RuntimeHelper.requireNonNull(constants$2.JIMAGE_GetResource$MH,\"JIMAGE_GetResource\");\n+        return RuntimeHelper.requireNonNull(constants$2.const$3,\"JIMAGE_GetResource\");\n@@ -127,1 +127,1 @@\n-        return RuntimeHelper.requireNonNull(constants$2.JIMAGE_ResourceIterator$MH,\"JIMAGE_ResourceIterator\");\n+        return RuntimeHelper.requireNonNull(constants$3.const$4,\"JIMAGE_ResourceIterator\");\n","filename":"samples\/libjimage\/org\/openjdk\/jimage_h.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   --enable-preview --source=21 \\\n+   --enable-preview --source=22 \\\n","filename":"samples\/libjimage\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-            var pids = arena.allocateArray(C_INT, numPids);\n+            var pids = arena.allocate(C_INT, numPids);\n@@ -53,1 +53,1 @@\n-            var nameBuf = arena.allocateArray(C_CHAR, NAME_BUF_MAX);\n+            var nameBuf = arena.allocate(C_CHAR, NAME_BUF_MAX);\n@@ -58,1 +58,1 @@\n-                String procName = nameBuf.getUtf8String(0);\n+                String procName = nameBuf.getString(0);\n","filename":"samples\/libproc\/LibprocMain.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --enable-preview --source=21 org\/unix\/*.java\n+javac --enable-preview --source=22 org\/unix\/*.java\n","filename":"samples\/libproc\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --enable-preview --source=21 \\\n+   --enable-preview --source=22 \\\n","filename":"samples\/libproc\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            var uncompressedText = arena.allocateUtf8String(TEXT);\n+            var uncompressedText = arena.allocateFrom(TEXT);\n@@ -108,1 +108,1 @@\n-            String decompressedString = decompressed.getUtf8String(0);\n+            String decompressedString = decompressed.getString(0);\n@@ -115,1 +115,1 @@\n-        return code + \" (\" + ZSTD_getErrorName(code).getUtf8String(0) + \")\";\n+        return code + \" (\" + ZSTD_getErrorName(code).getString(0) + \")\";\n","filename":"samples\/libzstd\/LibzstdMain.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-  -I \/usr\/local\/Cellar\/zstd\/1.5.2\/include \\\n+  -I \/usr\/local\/Cellar\/zstd\/1.5.5\/include \\\n@@ -5,1 +5,1 @@\n-    \/usr\/local\/Cellar\/zstd\/1.5.2\/include\/zstd.h\n+    \/usr\/local\/Cellar\/zstd\/1.5.5\/include\/zstd.h\n","filename":"samples\/libzstd\/compile.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-  -I \/usr\/local\/Cellar\/zstd\/1.5.2\/include \\\n+  -I \/usr\/local\/Cellar\/zstd\/1.5.5\/include \\\n@@ -5,1 +5,1 @@\n-  \/usr\/local\/Cellar\/zstd\/1.5.2\/include\/zstd.h\n+  \/usr\/local\/Cellar\/zstd\/1.5.5\/include\/zstd.h\n@@ -7,1 +7,1 @@\n-javac --enable-preview --source=21 libzstd\/*.java\n+javac --enable-preview --source=22 libzstd\/*.java\n","filename":"samples\/libzstd\/compilesource.sh","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-   --enable-preview --source=21 \\\n-   -Djava.library.path=\/usr\/local\/Cellar\/zstd\/1.5.2\/lib LibzstdMain.java\n+   --enable-preview --source=22 \\\n+   -Djava.library.path=\/usr\/local\/Cellar\/zstd\/1.5.5\/lib LibzstdMain.java\n","filename":"samples\/libzstd\/run.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-            var colno = arena.allocateArray(C_INT, Ncol);\n-            var row = arena.allocateArray(C_DOUBLE, Ncol);\n+            var colno = arena.allocate(C_INT, Ncol);\n+            var row = arena.allocate(C_DOUBLE, Ncol);\n","filename":"samples\/lp_solve\/LpSolveDemo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-javac --enable-preview --source=21 net\/sourceforge\/lpsolve\/*.java\n+javac --enable-preview --source=22 net\/sourceforge\/lpsolve\/*.java\n","filename":"samples\/lp_solve\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --source=21 --enable-preview \\\n+   --source=22 --enable-preview \\\n","filename":"samples\/lp_solve\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -45,1 +45,1 @@\n-        var pos = allocator.allocateArray(C_FLOAT, new float[] {0.0f, 15.0f, -15.0f, 0});\n+        var pos = allocator.allocateFrom(C_FLOAT, new float[] {0.0f, 15.0f, -15.0f, 0});\n@@ -47,1 +47,1 @@\n-        var spec = allocator.allocateArray(C_FLOAT, new float[] {1, 1, 1, 0});\n+        var spec = allocator.allocateFrom(C_FLOAT, new float[] {1, 1, 1, 0});\n@@ -74,3 +74,2 @@\n-        try (var scope = MemorySession.openConfined()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            var argc = allocator.allocate(C_INT, 0);\n+        try (var arena = Arena.ofConfined()) {\n+            var argc = arena.allocateFrom(C_INT, 0);\n@@ -80,4 +79,4 @@\n-            glutCreateWindow(allocator.allocateUtf8String(\"Hello Panama!\"));\n-            var teapot = new Teapot(allocator);\n-            var displayStub = glutDisplayFunc$callback.allocate(teapot::display, scope);\n-            var idleStub = glutIdleFunc$callback.allocate(teapot::onIdle, scope);\n+            glutCreateWindow(arena.allocateFrom(\"Hello Panama!\"));\n+            var teapot = new Teapot(arena);\n+            var displayStub = glutDisplayFunc$callback.allocate(teapot::display, arena);\n+            var idleStub = glutIdleFunc$callback.allocate(teapot::onIdle, arena);\n","filename":"samples\/opengl\/Teapot.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --enable-preview --source=21 opengl\/*.java\n+javac --enable-preview --source=22 opengl\/*.java\n","filename":"samples\/opengl\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/opengl\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/opengl\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-      var pattern = arena.allocateUtf8String(args[0]);\n+      var pattern = arena.allocateFrom(args[0]);\n@@ -58,1 +58,1 @@\n-        var buffer = arena.allocateArray(C_CHAR, 128L);\n+        var buffer = arena.allocate(C_CHAR, 128L);\n@@ -62,1 +62,1 @@\n-            buffer.getUtf8String(0));\n+            buffer.getString(0));\n@@ -69,1 +69,1 @@\n-      var subject = arena.allocateUtf8String(args[1]);\n+      var subject = arena.allocateFrom(args[1]);\n","filename":"samples\/pcre2\/PcreCheck.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-javac --enable-preview --source=21 org\/pcre\/*.java\n+javac --enable-preview --source=22 org\/pcre\/*.java\n","filename":"samples\/pcre2\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/pcre2\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-            var str = arena.allocateUtf8String(script);\n+            var str = arena.allocateFrom(script);\n","filename":"samples\/python3\/PythonMain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-javac --enable-preview --source=21 org\/python\/*.java\n+javac --enable-preview --source=22 org\/python\/*.java\n","filename":"samples\/python3\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/python3\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/python3\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-            var url = arena.allocateUtf8String(\"name? \");\n+            var url = arena.allocateFrom(\"name? \");\n@@ -48,1 +48,1 @@\n-            System.out.println(\"Hello, \" + p.getUtf8String(0));\n+            System.out.println(\"Hello, \" + p.getString(0));\n","filename":"samples\/readline\/Readline.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-javac --enable-preview --source=21 org\/unix\/*.java\n+javac --enable-preview --source=22 org\/unix\/*.java\n","filename":"samples\/readline\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/readline\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-            int rc = sqlite3_open(arena.allocateUtf8String(\"employee.db\"), dbPtrPtr);\n+            int rc = sqlite3_open(arena.allocateFrom(\"employee.db\"), dbPtrPtr);\n@@ -60,1 +60,1 @@\n-            var sql = arena.allocateUtf8String(\n+            var sql = arena.allocateFrom(\n@@ -70,1 +70,1 @@\n-                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getUtf8String(0));\n+                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getString(0));\n@@ -77,1 +77,1 @@\n-            sql = arena.allocateUtf8String(\n+            sql = arena.allocateFrom(\n@@ -87,1 +87,1 @@\n-                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getUtf8String(0));\n+                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getString(0));\n@@ -101,2 +101,2 @@\n-                     String name = columnNames.getAtIndex(C_POINTER, i).getUtf8String(0);\n-                     String value = argv.getAtIndex(C_POINTER, i).getUtf8String(0);\n+                     String name = columnNames.getAtIndex(C_POINTER, i).getString(0);\n+                     String value = argv.getAtIndex(C_POINTER, i).getString(0);\n@@ -110,1 +110,1 @@\n-            sql = arena.allocateUtf8String(\"SELECT * FROM EMPLOYEE\");\n+            sql = arena.allocateFrom(\"SELECT * FROM EMPLOYEE\");\n@@ -115,1 +115,1 @@\n-                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getUtf8String(0));\n+                System.err.println(\"SQL error: \" + errMsgPtrPtr.get(C_POINTER, 0).getString(0));\n","filename":"samples\/sqlite\/SqliteMain.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --enable-preview --source=21 org\/sqlite\/*.java\n+javac --enable-preview --source=22 org\/sqlite\/*.java\n","filename":"samples\/sqlite\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --enable-preview --source=21 \\\n+   --enable-preview --source=22 \\\n","filename":"samples\/sqlite\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-            var str = arena.allocateUtf8String(script);\n+            var str = arena.allocateFrom(script);\n","filename":"samples\/tcl\/TCLMain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --enable-preview --source=21 org\/tcl\/*.java\n+javac --enable-preview --source=22 org\/tcl\/*.java\n","filename":"samples\/tcl\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/tcl\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        System.out.println(\"TensorFlow C library version: \" + TF_Version().getUtf8String(0));\n+        System.out.println(\"TensorFlow C library version: \" + TF_Version().getString(0));\n@@ -53,2 +53,2 @@\n-            var savedModelDir = arena.allocateUtf8String(args[0]);\n-            var tags = arena.allocate(C_POINTER, arena.allocateUtf8String(\"serve\"));\n+            var savedModelDir = arena.allocateFrom(args[0]);\n+            var tags = arena.allocateFrom(C_POINTER, arena.allocateFrom(\"serve\"));\n@@ -59,1 +59,1 @@\n-                    TF_Message(status).getUtf8String(0));\n+                    TF_Message(status).getString(0));\n@@ -69,2 +69,2 @@\n-                    TF_OperationName(operation).getUtf8String(0),\n-                    TF_OperationOpType(operation).getUtf8String(0));\n+                    TF_OperationName(operation).getString(0),\n+                    TF_OperationOpType(operation).getString(0));\n","filename":"samples\/tensorflow\/TensorflowLoadSavedModel.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-javac --enable-preview --source=21 org\/tensorflow\/*.java\n+javac --enable-preview --source=22 org\/tensorflow\/*.java\n","filename":"samples\/tensorflow\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --enable-preview --source=21 \\\n+   --enable-preview --source=22 \\\n","filename":"samples\/tensorflow\/loadsavedmodel.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-  --enable-preview --source=19 `\r\n+  --enable-preview --source=22 `\r\n","filename":"samples\/tensorflow\/run_windows.ps1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-            var now = arena.allocate(C_LONG, System.currentTimeMillis() \/ 1000);\n+            var now = arena.allocateFrom(C_LONG, System.currentTimeMillis() \/ 1000);\n","filename":"samples\/time\/PanamaTime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --enable-preview --source=21 org\/unix\/*.java\n+javac --enable-preview --source=22 org\/unix\/*.java\n","filename":"samples\/time\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-    --enable-preview --source=21 \\\n+    --enable-preview --source=22 \\\n","filename":"samples\/time\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}