{"files":[{"patch":"@@ -130,1 +130,4 @@\n-The `jextract` tool includes several customization options. Users can select in which package the generated code should be emitted, and what the name of the main extracted class should be. A complete list of all the supported options is given below:\n+The `jextract` tool includes several customization options. Users can select in which package the generated code should be emitted, and what the name of the main extracted class should be. If no package is specified, classes are generated in the unnamed package. If no name is specified for the main header class, then the header class name is\n+derived from the header file name. For example, if jextract is run on foo.h, then foo_h will be the name of the main header class.\n+\n+A complete list of all the supported options is given below:\n@@ -134,5 +137,5 @@\n-| `-D <macro>`                                                 | define a C preprocessor macro                                |\n-| `--header-class-name <name>`                                 | specify the name of the main header class                    |\n-| `-t, --target-package <package>`                             | specify target package for the generated bindings            |\n-| `-I <path>`                                                  | specify include files path for the clang parser              |\n-| `-l <library>`                                               | specify a library that will be loaded by the generated bindings |\n+| `-D --define-macro <macro>=<value>`                          | define <macro> to <value> (or 1 if <value> omitted)          |\n+| `--header-class-name <name>`                                 | name of the generated header class. If this option is not specified, then header class name is derived from the header file name. For example, class 'foo_h' for header 'foo.h'. |\n+| `-t, --target-package <package>`                             | target package name for the generated classes. If this option is not specified, then unnamed package is used.  |\n+| `-I, --include-dir <dir>`                                    | add directory to the end of the list of include search paths |\n+| `-l, --library <name \\| path>`                               | specify a library by platform-independent name (e.g. \"GL\") or by absolute path (\"\/usr\/lib\/libGL.so\") that will be loaded by the generated class. |\n","filename":"README.md","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -336,1 +336,1 @@\n-        parser.accepts(\"-D\", format(\"help.D\"), true);\n+        parser.accepts(\"-D\", List.of(\"--define-macro\"), format(\"help.D\"), true);\n@@ -343,2 +343,2 @@\n-        parser.accepts(\"-I\", format(\"help.I\"), true);\n-        parser.accepts(\"-l\", format(\"help.l\"), true);\n+        parser.accepts(\"-I\", List.of(\"--include-dir\"), format(\"help.I\"), true);\n+        parser.accepts(\"-l\", List.of(\"--library\"), format(\"help.l\"), true);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,20 +49,26 @@\n-Usage: jextract <options> <header file>                                  \\n\\\n-                                                                         \\n\\\n-Option                         Description                               \\n\\\n-------                         -----------                               \\n\\\n--?, -h, --help                 print help                                \\n\\\n--D <macro>                     define a C preprocessor macro             \\n\\\n--I <path>                      specify include files path                \\n\\\n---dump-includes <file>         dump included symbols into specified file \\n\\\n---header-class-name <name>     name of the header class                  \\n\\\n---include-function <name>      name of function to include               \\n\\\n---include-macro <name>         name of constant macro to include         \\n\\\n---include-struct <name>        name of struct definition to include      \\n\\\n---include-typedef <name>       name of type definition to include        \\n\\\n---include-union <name>         name of union definition to include       \\n\\\n---include-var <name>           name of global variable to include        \\n\\\n--l <library>                   specify a library name or absolute library path   \\n\\\n---output <path>                specify the directory to place generated files    \\n\\\n---source                       generate java sources                     \\n\\\n--t, --target-package <package> target package for specified header files \\n\\\n---version                      print version information and exit        \\n\n+Usage: jextract <options> <header file>                                                         \\n\\\n+                                                                                                \\n\\\n+Option                             Description                                                  \\n\\\n+------                             -----------                                                  \\n\\\n+-?, -h, --help                     print help                                                   \\n\\\n+-D --define-macro <macro>=<value>  define <macro> to <value> (or 1 if <value> omitted)          \\n\\\n+-I, --include-dir <dir>            add directory to the end of the list of include search paths \\n\\\n+--dump-includes <file>             dump included symbols into specified file                    \\n\\\n+--header-class-name <name>         name of the generated header class. If this option is not    \\n\\\n+\\                                   specified, then header class name is derived from the header\\n\\\n+\\                                   file name. For example, class 'foo_h' for header 'foo.h'.   \\n\\\n+--include-function <name>          name of function to include                                  \\n\\\n+--include-macro <name>             name of constant macro to include                            \\n\\\n+--include-struct <name>            name of struct definition to include                         \\n\\\n+--include-typedef <name>           name of type definition to include                           \\n\\\n+--include-union <name>             name of union definition to include                          \\n\\\n+--include-var <name>               name of global variable to include                           \\n\\\n+-l, --library <name | path>        specify a library by platform-independent name (e.g. \"GL\")   \\n\\\n+\\                                   or by absolute path (\"\/usr\/lib\/libGL.so\") that will be      \\n\\\n+\\                                   loaded by the generated class.                              \\n\\\n+--output <path>                    specify the directory to place generated files. If this      \\n\\\n+\\                                   option is not specified, then current directory is used.    \\n\\\n+--source                           generate java sources                                        \\n\\\n+-t, --target-package <package>     target package name for the generated classes. If this option\\n\\\n+\\                                   is not specified, then unnamed package is used.             \\n\\\n+--version                          print version information and exit                           \\n\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.Test;\n+import static test.jextract.test7903347.test7903347_h.*;\n+\n+\/*\n+ * @test id=classes\n+ * @bug 7903347\n+ * @summary add long name option for all single letter options and expand help on default values for various options\n+ * @library \/lib\n+ * @run main\/othervm JtregJextract --library Test7903347 -t test.jextract.test7903347 test7903347.h\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest7903347Test\n+ *\/\n+\/*\n+ * @test id=sources\n+ * @bug 7903347\n+ * @summary add long name option for all single letter options and expand help on default values for various options\n+ * @library \/lib\n+ * @run main\/othervm JtregJextractSources --library Test7903347 -t test.jextract.test7903347 test7903347.h\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED LibTest7903347Test\n+ *\/\n+public class LibTest7903347Test {\n+    @Test\n+    public void test() {\n+        print_point(34, 56);\n+    }\n+}\n","filename":"test\/jtreg\/generator\/test7903347\/LibTest7903347Test.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -24,1 +24,2 @@\n-typedef void (func)(const void *addr);\n+#include \"test7903347.h\"\n+#include <stdio.h>\n@@ -26,5 +27,3 @@\n-#ifdef FOO\n-\n-typedef void (func2)(int scope);\n-\n-#endif\n+EXPORT void print_point(int x, int y) {\n+   printf(\"(%d\\t%d)\\n\", x, y);\n+}\n","filename":"test\/jtreg\/generator\/test7903347\/libTest7903347.c","additions":5,"deletions":6,"binary":false,"changes":11,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903164.h","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-EXPORT int func(int (*f)(int), int);\n+EXPORT void print_point(int x, int y);\n","filename":"test\/jtreg\/generator\/test7903347\/test7903347.h","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jtreg\/generator\/testFunctionPointer\/funcPtr.h","status":"copied"},{"patch":"@@ -178,0 +178,30 @@\n+\n+    @Test\n+    public void tesIncludeDirOption() {\n+        Path includerOutput = getOutputFilePath(\"includergen\");\n+        Path includerH = getInputFilePath(\"includer.h\");\n+        run(\"-I\", includerH.getParent().resolve(\"inc\").toString(),\n+            \"--output\", includerOutput.toString(), includerH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(includerOutput)) {\n+            Class<?> cls = loader.loadClass(\"includer_h\");\n+            \/\/ check a method for \"void included_func(int)\"\n+            assertNotNull(findMethod(cls, \"included_func\", int.class));\n+        } finally {\n+            TestUtils.deleteDir(includerOutput);\n+        }\n+    }\n+\n+    @Test\n+    public void tesIncludeDirOption2() {\n+        Path includerOutput = getOutputFilePath(\"includergen2\");\n+        Path includerH = getInputFilePath(\"includer.h\");\n+        run(\"--include-dir\", includerH.getParent().resolve(\"inc\").toString(),\n+            \"--output\", includerOutput.toString(), includerH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(includerOutput)) {\n+            Class<?> cls = loader.loadClass(\"includer_h\");\n+            \/\/ check a method for \"void included_func(int)\"\n+            assertNotNull(findMethod(cls, \"included_func\", int.class));\n+        } finally {\n+            TestUtils.deleteDir(includerOutput);\n+        }\n+    }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -61,0 +61,14 @@\n+\n+    @Test\n+    public void testWithMacro2() {\n+        Path output = getOutputFilePath(\"7903164gen_withmacro2\");\n+        Path outputH = getInputFilePath(\"test7903164.h\");\n+        run(\"--define-macro\", \"FOO\", \"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(output)) {\n+            assertNotNull(loader.loadClass(\"test7903164_h\"));\n+            assertNotNull(loader.loadClass(\"func\"));\n+            assertNotNull(loader.loadClass(\"func2\"));\n+        } finally {\n+            TestUtils.deleteDir(output);\n+        }\n+    }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903164.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,3 +24,1 @@\n-struct Foo {\n-    int (*Foo)();\n-};\n+void included_func(int);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/inc\/includer_impl.h","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903237.h","status":"copied"},{"patch":"@@ -24,3 +24,1 @@\n-struct Foo {\n-    int (*Foo)();\n-};\n+#include \"includer_impl.h\"\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/includer.h","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903237.h","status":"copied"}]}