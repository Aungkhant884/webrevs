{"files":[{"patch":"@@ -250,0 +250,16 @@\n+    \/**\n+     * A bitfield declaration. Same as a variable declaration, but doesn't have a layout. Instead, it has\n+     * an offset (relative to the enclosing container) and a width.\n+     *\/\n+    interface Bitfield extends Variable {\n+        \/**\n+         * {@return The bitfield offset (relative to the enclosing container)}\n+         *\/\n+        long offset();\n+\n+        \/**\n+         * {@return The bitfield width (in bits)}\n+         *\/\n+        long width();\n+    }\n+\n@@ -357,1 +373,1 @@\n-     * Creates a new bitfield declaration with given name, type and layout.\n+     * Creates a new bitfield declaration with given name, type, offset and width.\n@@ -361,1 +377,2 @@\n-     * @param layout the bitfield declaration layout.\n+     * @param offset the offset of the bitfield (relative to the enclosing container).\n+     * @param width the bitfield width.\n@@ -364,2 +381,2 @@\n-    static Declaration.Variable bitfield(Position pos, String name, Type type, MemoryLayout layout) {\n-        return new DeclarationImpl.VariableImpl(type, layout, Declaration.Variable.Kind.BITFIELD, name, pos);\n+    static Declaration.Variable bitfield(Position pos, String name, Type type, long offset, long width) {\n+        return new DeclarationImpl.BitfieldImpl(type, offset, width, name, pos);\n@@ -417,1 +434,0 @@\n-     * @param layout the bitfields group declaration layout.\n@@ -421,1 +437,1 @@\n-    static Declaration.Scoped bitfields(Position pos, MemoryLayout layout, Declaration.Variable... bitfields) {\n+    static Declaration.Scoped bitfields(Position pos, Declaration.Variable... bitfields) {\n@@ -423,1 +439,1 @@\n-        return new DeclarationImpl.ScopedImpl(Declaration.Scoped.Kind.BITFIELDS, layout, declList, \"\", pos);\n+        return new DeclarationImpl.ScopedImpl(Declaration.Scoped.Kind.BITFIELDS, declList, \"\", pos);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/Declaration.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    public static final class VariableImpl extends DeclarationImpl implements Declaration.Variable {\n+    public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {\n@@ -210,0 +210,50 @@\n+    public static final class BitfieldImpl extends VariableImpl implements Declaration.Bitfield {\n+\n+        final long offset;\n+        final long width;\n+\n+        private BitfieldImpl(Type type, long offset, long width, String name, Position pos, Map<String, List<Constable>> attrs) {\n+            super(type, Optional.<MemoryLayout>empty(), Kind.BITFIELD, name, pos, attrs);\n+            this.offset = offset;\n+            this.width = width;\n+        }\n+\n+        public BitfieldImpl(Type type, long offset, long width, String name, Position pos) {\n+            this(type, offset, width, name, pos, null);\n+        }\n+\n+        @Override\n+        public long offset() {\n+            return offset;\n+        }\n+\n+        @Override\n+        public long width() {\n+            return width;\n+        }\n+\n+        @Override\n+        public Variable withAttributes(Map<String, List<Constable>> attrs) {\n+            return new BitfieldImpl(type, offset, width, name(), pos(), attrs);\n+        }\n+\n+        @Override\n+        public Variable stripAttributes() {\n+            return new BitfieldImpl(type, offset, width, name(), pos(), null);\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (!(o instanceof BitfieldImpl bitfield)) return false;\n+            if (!super.equals(o)) return false;\n+            return offset == bitfield.offset &&\n+                    width == bitfield.width;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(super.hashCode(), offset, width);\n+        }\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import org.openjdk.jextract.Declaration.Bitfield;\n+import org.openjdk.jextract.Declaration.Variable.Kind;\n@@ -107,1 +109,6 @@\n-        builder.append(\"Variable: \" + d.kind() + \" \" + d.name() + \" type = \" + d.type().accept(typeVisitor, null) + \", layout = \" + d.layout());\n+        if (d instanceof Bitfield bitfield) {\n+            builder.append(\"Bitfield: \" + \" type = \" + d.type().accept(typeVisitor, null) + \", name = \" + bitfield.name()\n+                    + \", offset = \" + bitfield.offset() + \", width = \" + bitfield.width());\n+        } else {\n+            builder.append(\"Variable: \" + d.kind() + \" \" + d.name() + \" type = \" + d.type().accept(typeVisitor, null) + \", layout = \" + d.layout());\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/PrettyPrinter.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-            addField(field(c));\n+            addField(field(offset, c));\n@@ -150,1 +150,1 @@\n-    Declaration field(Cursor c) {\n+    Declaration field(long offset, Cursor c) {\n@@ -154,2 +154,1 @@\n-            MemoryLayout sublayout = MemoryLayout.paddingLayout(c.getBitFieldWidth());\n-            return Declaration.bitfield(TreeMaker.CursorPosition.of(c), name, type, sublayout.withName(name));\n+            return Declaration.bitfield(TreeMaker.CursorPosition.of(c), name, type, offset, c.getBitFieldWidth());\n@@ -170,2 +169,2 @@\n-    Declaration.Scoped bitfield(List<MemoryLayout> sublayouts, Declaration.Variable... declarations) {\n-        return Declaration.bitfields(declarations[0].pos(), MemoryLayout.structLayout(sublayouts.toArray(new MemoryLayout[0])), declarations);\n+    Declaration.Scoped bitfield(Declaration.Variable... declarations) {\n+        return Declaration.bitfields(declarations[0].pos(), declarations);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/RecordLayoutComputer.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    private List<MemoryLayout> bitfieldLayouts;\n+    private long bitfieldSize;\n@@ -57,9 +57,1 @@\n-            MemoryLayout layout = null;\n-            if (declaration instanceof Declaration.Scoped scoped) {\n-                layout = scoped.layout().orElse(null);\n-            } else if (declaration instanceof Declaration.Variable var) {\n-                layout = var.layout().orElse(null);\n-            }\n-            if (layout != null) {\n-                bitfieldLayouts.add(declaration.name().isEmpty() ? layout : layout.withName(declaration.name()));\n-            }\n+            bitfieldSize += ((Declaration.Bitfield)declaration).width();\n@@ -73,3 +65,1 @@\n-        if (bitfieldDecls != null) {\n-            bitfieldLayouts.add(MemoryLayout.paddingLayout(bits));\n-        } else {\n+        if (bitfieldDecls == null) {\n@@ -77,0 +67,2 @@\n+        } else {\n+            bitfieldSize += bits;\n@@ -89,1 +81,1 @@\n-            bitfieldLayouts = new ArrayList<>();\n+            bitfieldSize = 0;\n@@ -158,1 +150,0 @@\n-            List<MemoryLayout> prevBitfieldLayouts = bitfieldLayouts;\n@@ -160,0 +151,1 @@\n+            long prevBitfieldSize = bitfieldSize;\n@@ -161,0 +153,1 @@\n+            bitfieldSize = 0;\n@@ -162,1 +155,1 @@\n-                addField(bitfield(prevBitfieldLayouts, prevBitfieldDecls.toArray(new Declaration.Variable[0])));\n+                addField(bitfield(prevBitfieldDecls.toArray(new Declaration.Variable[0])));\n@@ -164,0 +157,1 @@\n+            fieldLayouts.add(MemoryLayout.paddingLayout(prevBitfieldSize));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructLayoutComputer.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -101,3 +101,1 @@\n-            case FieldDecl -> c.isBitField() ?\n-                        createBitfield(c) :\n-                        createVar(c, Declaration.Variable.Kind.FIELD);\n+            case FieldDecl -> createVar(c, Declaration.Variable.Kind.FIELD);\n@@ -317,6 +315,0 @@\n-    private Declaration.Variable createBitfield(Cursor c) {\n-        checkCursorAny(c, CursorKind.FieldDecl);\n-        return Declaration.bitfield(CursorPosition.of(c), c.spelling(), toType(c),\n-                MemoryLayout.paddingLayout(c.getBitFieldWidth()));\n-    }\n-\n@@ -324,0 +316,1 @@\n+        if (c.isBitField()) throw new AssertionError(\"Cannot get here!\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    Declaration field(Cursor c) {\n+    Declaration field(long offset, Cursor c) {\n@@ -69,2 +69,2 @@\n-            Declaration.Variable var = (Declaration.Variable)super.field(c);\n-            return bitfield(List.of(var.layout().get()), var);\n+            Declaration.Variable var = (Declaration.Variable)super.field(offset, c);\n+            return bitfield(var);\n@@ -72,1 +72,1 @@\n-            return super.field(c);\n+            return super.field(offset, c);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnionLayoutComputer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        assertEquals(global.layout().get().bitSize(), size);\n+        assertEquals(((Declaration.Bitfield)global).width(), size);\n","filename":"test\/lib\/testlib\/JextractApiTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}