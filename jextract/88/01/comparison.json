{"files":[{"patch":"@@ -46,0 +46,3 @@\n+cd pcre2\n+rm -rf org\n+cd ..\n","filename":"samples\/cleanall.sh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -54,0 +54,4 @@\n+echo \"compiling pcre2\"\n+cd pcre2\n+sh .\/compile.sh\n+cd ..\n","filename":"samples\/compileall.sh","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,0 +54,4 @@\n+echo \"compiling pcre2\"\n+cd pcre2\n+sh .\/compilesource.sh\n+cd ..\n","filename":"samples\/compilesourceall.sh","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *   - Redistributions of source code must retain the above copyright\n+ *     notice, this list of conditions and the following disclaimer.\n+ *\n+ *   - Redistributions in binary form must reproduce the above copyright\n+ *     notice, this list of conditions and the following disclaimer in the\n+ *     documentation and\/or other materials provided with the distribution.\n+ *\n+ *   - Neither the name of Oracle nor the names of its\n+ *     contributors may be used to endorse or promote products derived\n+ *     from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n+ * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+import java.lang.foreign.*;\n+import static java.lang.foreign.MemorySegment.NULL;\n+import static org.pcre.Pcre.*;\n+\n+class PcreCheck {\n+  public static void main(String[] args) {\n+    if (args.length < 2) {\n+      System.err.println(\"java PcreCheck <regex> <string>\");\n+      System.exit(1);\n+    }\n+\n+    try (var session = MemorySession.openConfined()) {\n+      \/\/ given regex to C string\n+      var pattern = session.allocateUtf8String(args[0]);\n+      var patternSize = args[0].length();\n+\n+      \/\/ output params from pcre2_compile_8\n+      var errcodePtr = session.allocate(C_INT);\n+      var erroffPtr = session.allocate(C_LONG);\n+\n+      \/\/ compile the given regex\n+      var re = pcre2_compile_8(pattern, patternSize, 0,\n+          errcodePtr, erroffPtr, NULL);\n+\n+      \/\/ if compilation failed, report error and exit\n+      if (re.equals(NULL)) {\n+        var buffer = session.allocateArray(C_CHAR, 128L);\n+        pcre2_get_error_message_8(errcodePtr.get(C_INT, 0),\n+            buffer, 127);\n+        System.err.printf(\"regex compilation failed: %s\\n\",\n+            buffer.getUtf8String(0));\n+        System.exit(2);\n+      }\n+\n+      var ovecsize = 64;\n+      var matchData = pcre2_match_data_create_8(ovecsize, NULL);\n+\n+      var subject = session.allocateUtf8String(args[1]);\n+      var subjectSize = args[1].length();\n+      var rc = pcre2_match_8(re, subject, subjectSize, 0, 0, matchData, NULL);\n+      if (rc == 0) {\n+        System.err.printf(\"offset vector too small: %d\\n\",rc);\n+      } else if (rc < 0) {\n+        System.err.println(\"no match found!\");\n+      } else {\n+        var ovector = pcre2_get_ovector_pointer_8(matchData);\n+        var subjectArray = subject.toArray(C_CHAR);\n+        for (int i = 0; i < rc; i++) {\n+          var start = ovector.getAtIndex(C_LONG, 2*i);\n+          var end = ovector.getAtIndex(C_LONG, (2*i + 1));\n+          System.out.printf(\"%d: %s\\n\", i,\n+            new String(subjectArray, (int)start, (int)(end-start)));\n+        }\n+      }\n+\n+      pcre2_match_data_free_8(matchData);\n+      pcre2_code_free_8(re);\n+    }\n+  }\n+}\n","filename":"samples\/pcre2\/PcreCheck.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,6 @@\n+jextract -t org.pcre \\\n+  -I \/usr\/local\/opt\/pcre2\/include \\\n+  -DPCRE2_CODE_UNIT_WIDTH=8 \\\n+  --header-class-name Pcre \\\n+  --library pcre2-8 \\\n+  \/usr\/local\/opt\/pcre2\/include\/pcre2.h\n","filename":"samples\/pcre2\/compile.sh","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -0,0 +1,9 @@\n+jextract -t org.pcre \\\n+  -I \/usr\/local\/opt\/pcre2\/include \\\n+  --header-class-name Pcre \\\n+  -DPCRE2_CODE_UNIT_WIDTH=8 \\\n+  --library pcre2-8 \\\n+  --source \\\n+  \/usr\/local\/opt\/pcre2\/include\/pcre2.h\n+\n+javac --enable-preview --source=20 org\/pcre\/*.java\n","filename":"samples\/pcre2\/compilesource.sh","additions":9,"deletions":0,"binary":false,"changes":9,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+java --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=20 \\\n+    -Djava.library.path=\/usr\/local\/opt\/pcre2\/lib PcreCheck.java $*\n","filename":"samples\/pcre2\/run.sh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}