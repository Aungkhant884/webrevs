{"files":[{"patch":"@@ -48,2 +48,1 @@\n-            var handle = MemorySegment.ofAddress(handleAddr.address(), 0, arena,\n-                () -> dlclose(handleAddr));\n+            var handle = handleAddr.reinterpret(arena.scope(), org.unix.dlfcn_h::dlclose);\n","filename":"samples\/dlopen\/Dlopen.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -293,1 +293,2 @@\n-                var pixelArray = MemorySegment.ofAddress(pdata.address() + y*linesize, 3*width, arena);\n+                var pixelArray = pdata.slice(y * linesize)\n+                                      .reinterpret(3*width, arena.scope(), null);\n","filename":"samples\/libffmpeg\/LibffmpegMain.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-    static JImageClose_t ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static JImageClose_t ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageClose_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-    static JImageFindResource_t ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static JImageFindResource_t ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageFindResource_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-    static JImageGetResource_t ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static JImageGetResource_t ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageGetResource_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-    static JImageOpen_t ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static JImageOpen_t ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageOpen_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-    static JImagePackageToModule_t ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static JImagePackageToModule_t ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImagePackageToModule_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-    static JImageResourceIterator_t ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static JImageResourceIterator_t ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceIterator_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -21,2 +21,2 @@\n-    static JImageResourceVisitor_t ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static JImageResourceVisitor_t ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceVisitor_t.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena scope) {\n-         return MemorySegment.ofAddress(addr.address(), numElements * layout.byteSize(), scope);\n+    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena arena) {\n+         return addr.reinterpret(numElements * layout.byteSize(), arena.scope(), null);\n","filename":"samples\/libjimage\/org\/openjdk\/RuntimeHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -98,2 +98,2 @@\n-                var argv_seg = MemorySegment.ofAddress(argv.address(), C_POINTER.byteSize() * argc, arena);\n-                var columnNames_seg = MemorySegment.ofAddress(columnNames.address(), C_POINTER.byteSize() * argc, arena);\n+                argv = argv.reinterpret(C_POINTER.byteSize() * argc, arena, null);\n+                columnNames = columnNames.reinterpret(C_POINTER.byteSize() * argc, arena, null);\n@@ -101,2 +101,2 @@\n-                     String name = columnNames_seg.getAtIndex(C_POINTER, i).getUtf8String(0);\n-                     String value = argv_seg.getAtIndex(C_POINTER, i).getUtf8String(0);\n+                     String name = columnNames.getAtIndex(C_POINTER, i).getUtf8String(0);\n+                     String value = argv.getAtIndex(C_POINTER, i).getUtf8String(0);\n","filename":"samples\/sqlite\/SqliteMain.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.Consumer;\n@@ -43,1 +44,1 @@\n-    public ClangDisposable(MemorySegment ptr, long size, Runnable cleanup) {\n+    public ClangDisposable(MemorySegment ptr, long size, Consumer<MemorySegment> cleanup) {\n@@ -45,1 +46,1 @@\n-        this.ptr = MemorySegment.ofAddress(ptr.address(), size, arena, cleanup).asReadOnly();\n+        this.ptr = ptr.reinterpret(size, arena.scope(), cleanup).asReadOnly();\n@@ -48,1 +49,1 @@\n-    public ClangDisposable(MemorySegment ptr, Runnable cleanup) {\n+    public ClangDisposable(MemorySegment ptr, Consumer<MemorySegment> cleanup) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/ClangDisposable.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        super(ptr, () -> Index_h.clang_disposeDiagnostic(ptr));\n+        super(ptr, Index_h::clang_disposeDiagnostic);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Diagnostic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        super(addr, () -> Index_h.clang_disposeIndex(addr));\n+        super(addr, Index_h::clang_disposeIndex);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        super(addr, () -> Index_h.clang_disposeTranslationUnit(addr));\n+        super(addr, Index_h::clang_disposeTranslationUnit);\n@@ -138,1 +138,1 @@\n-                    () -> Index_h.clang_disposeTokens(TranslationUnit.this.ptr, addr, size));\n+                    (addrCleanup) -> Index_h.clang_disposeTokens(TranslationUnit.this.ptr, addrCleanup, size));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-    static CXCursorVisitor ofAddress(MemorySegment addr, Arena scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);\n+    static CXCursorVisitor ofAddress(MemorySegment addr, Arena arena) {\n+        MemorySegment symbol = addr.reinterpret(arena.scope(), null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                .map(s -> s.asUnbounded().asSlice(0, layout))\n+                .map(s -> s.reinterpret(layout.byteSize()))\n@@ -113,2 +113,2 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena scope) {\n-         return MemorySegment.ofAddress(addr.address(), numElements * layout.byteSize(), scope);\n+    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena arena) {\n+         return addr.reinterpret(numElements * layout.byteSize(), arena.scope(), null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemorySegment addr, Arena scope) {\\n\");\n+            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemorySegment addr, Arena arena) {\\n\");\n@@ -123,2 +123,2 @@\n-            append(\"MemorySegment symbol = MemorySegment.ofAddress(\");\n-            append(\"addr.address(), 0, scope);\\n\");\n+            append(\"MemorySegment symbol = addr.reinterpret(\");\n+            append(\"arena.scope(), null);\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                .map(s -> s.asUnbounded().asSlice(0, layout))\n+                .map(s -> s.reinterpret(layout.byteSize()))\n@@ -84,2 +84,2 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena scope) {\n-         return MemorySegment.ofAddress(addr.address(), numElements * layout.byteSize(), scope);\n+    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena arena) {\n+         return addr.reinterpret(numElements * layout.byteSize(), arena.scope(), null);\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-            var seg = MemorySegment.ofAddress(getFoo().address(), Foo.sizeof(), arena);\n+            var seg = Foo.ofAddress(getFoo(), arena);\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}