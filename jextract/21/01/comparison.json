{"files":[{"patch":"@@ -123,1 +123,1 @@\n-                append(parameterName(i));\n+                append(\"_\" + parameterName(i));\n@@ -143,1 +143,1 @@\n-                            String paramExpr = parameterName(i);\n+                            String paramExpr = \"_\" + parameterName(i);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,8 +31,0 @@\n-\/*\n- * @test\n- * @library \/test\/lib\n- * @build JextractToolRunner\n- * @bug 7903148\n- * @summary jextract crashes when C11 keyword _Static_Assert is used in a header\n- * @run testng\/othervm --enable-native-access=ALL-UNNAMED Test7903148\n- *\/\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903148.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider;\n+\n+import org.openjdk.jextract.test.TestUtils;\n+import org.testng.annotations.Test;\n+import java.nio.file.Path;\n+import static org.testng.Assert.assertNotNull;\n+\n+public class Test7903158 extends JextractToolRunner {\n+    @Test\n+    public void test() {\n+        Path output = getOutputFilePath(\"7903158gen\");\n+        Path outputH = getInputFilePath(\"test7903158.h\");\n+        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(output)) {\n+            assertNotNull(loader.loadClass(\"test7903158_h\"));\n+            assertNotNull(loader.loadClass(\"func\"));\n+            assertNotNull(loader.loadClass(\"func2\"));\n+        } finally {\n+            TestUtils.deleteDir(output);\n+        }\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903158.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -24,2 +24,2 @@\n-typedef void func(int foo);\n-typedef void (*fptr)(int x, int y);\n+typedef void (func)(const void *addr);\n+typedef void (func2)(int scope);\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test7903158.h","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/generator\/test8281764\/test8281764.h","status":"copied"}]}