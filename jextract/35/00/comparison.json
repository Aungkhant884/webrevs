{"files":[{"patch":"@@ -25,1 +25,1 @@\n-def jextract_version = \"18\"\n+def jextract_version = \"19\"\n@@ -43,3 +43,2 @@\n-    options.release = 18\n-    options.compilerArgs << \"--add-modules=jdk.incubator.foreign\"\n-    options.compilerArgs << \"-Xlint:all\"\n+    options.release = 19\n+    options.compilerArgs << \"--enable-preview\"\n@@ -47,1 +46,1 @@\n-    options.forkOptions.executable = \"${jdk18_home}\/bin\/javac\"\n+    options.forkOptions.executable = \"${jdk19_home}\/bin\/javac\"\n@@ -87,1 +86,1 @@\n-    executable = \"${jdk18_home}\/bin\/jmod\"\n+    executable = \"${jdk19_home}\/bin\/jmod\"\n@@ -106,2 +105,2 @@\n-        '\\\\\"--enable-native-access=org.openjdk.jextract\\\\\"' :\n-        '\"--enable-native-access=org.openjdk.jextract\"'\n+        '\\\\\"--enable-native-access=org.openjdk.jextract\\\\\" \\\\\"--enable-preview\\\"\"' :\n+        '\"--enable-native-access=org.openjdk.jextract\" \"--enable-preview\"'\n@@ -113,1 +112,1 @@\n-    executable = \"${jdk18_home}\/bin\/jlink\"\n+    executable = \"${jdk19_home}\/bin\/jlink\"\n@@ -116,1 +115,1 @@\n-         \"--add-modules=org.openjdk.jextract,jdk.compiler\",\n+         \"--add-modules=org.openjdk.jextract,jdk.compiler,jdk.zipfs\",\n@@ -149,1 +148,1 @@\n-    executable = \"${jdk18_home}\/bin\/jlink\"\n+    executable = \"${jdk19_home}\/bin\/jlink\"\n@@ -151,1 +150,1 @@\n-         \"--module-path=$jmods_dir\" + File.pathSeparator + \"$jdk18_home\/jmods\",\n+         \"--module-path=$jmods_dir\" + File.pathSeparator + \"$jdk19_home\/jmods\",\n@@ -196,0 +195,1 @@\n+            \"-javaoption:--enable-preview\",\n","filename":"build.gradle","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySession;\n@@ -57,3 +57,2 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            var a = allocator.allocateArray(C_DOUBLE, new double[] {\n+        try (var session = MemorySession.openConfined()) {\n+            var a = session.allocateArray(C_DOUBLE, new double[] {\n@@ -65,1 +64,1 @@\n-            var x = allocator.allocateArray(C_DOUBLE, new double[] {\n+            var x = session.allocateArray(C_DOUBLE, new double[] {\n@@ -68,1 +67,1 @@\n-            var y = allocator.allocateArray(C_DOUBLE, n);\n+            var y = session.allocateArray(C_DOUBLE, n);\n","filename":"samples\/cblas\/TestBlas.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --add-modules jdk.incubator.foreign blas\/*.java\n+javac --enable-preview --source=19 blas\/*.java\n","filename":"samples\/cblas\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-time java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+time java --enable-native-access=ALL-UNNAMED --enable-preview --source=19 \\\n","filename":"samples\/cblas\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.foreign.*;\n@@ -34,1 +35,1 @@\n-import jdk.incubator.foreign.*;\n+import java.util.function.Function;\n@@ -39,1 +40,1 @@\n-    \/\/ implementation of SymbolLookup that loads a given shared object using dlopen\n+    \/\/ implementation of Symbol lookup that loads a given shared object using dlopen\n@@ -41,4 +42,3 @@\n-    private static SymbolLookup lookup(String libraryName, ResourceScope scope) {\n-        try (ResourceScope openScope = ResourceScope.newConfinedScope()) {\n-            var openScopeAllocator = SegmentAllocator.nativeAllocator(openScope);\n-            var handle = dlopen(openScopeAllocator.allocateUtf8String(libraryName), RTLD_LOCAL());\n+    private static Function<String, Optional<MemorySegment>> lookup(String libraryName, MemorySession session) {\n+        try (MemorySession libOpenSession = MemorySession.openConfined()) {\n+            var handle = dlopen(libOpenSession.allocateUtf8String(libraryName), RTLD_LOCAL());\n@@ -48,1 +48,1 @@\n-            scope.addCloseAction(() -> dlclose(handle));\n+            session.addCloseAction(() -> dlclose(handle));\n@@ -50,2 +50,1 @@\n-                var allocator = SegmentAllocator.nativeAllocator(scope);\n-                var addr = dlsym(handle, allocator.allocateUtf8String(name));\n+                var addr = dlsym(handle, session.allocateUtf8String(name));\n@@ -53,1 +52,1 @@\n-                            Optional.empty() : Optional.of(NativeSymbol.ofAddress(name, addr, scope));\n+                            Optional.empty() : Optional.of(MemorySegment.ofAddress(addr, 0, session));\n@@ -61,3 +60,2 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n-            var symLookup = lookup(libName, scope);\n+        try (var session = MemorySession.openConfined()) {\n+            var symLookup = lookup(libName, session);\n@@ -65,1 +63,1 @@\n-            var linker = CLinker.systemCLinker();\n+            var linker = Linker.nativeLinker();\n@@ -68,1 +66,1 @@\n-                symLookup.lookup(\"greeting\").get(),\n+                symLookup.apply(\"greeting\").get(),\n@@ -72,1 +70,1 @@\n-            greetingMH.invoke(allocator.allocateUtf8String(arg));\n+            greetingMH.invoke(session.allocateUtf8String(arg));\n","filename":"samples\/dlopen\/Dlopen.java","additions":14,"deletions":16,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-javac --add-modules jdk.incubator.foreign org\/unix\/*.java\n+javac --enable-preview --source=19 org\/unix\/*.java\n","filename":"samples\/dlopen\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --add-modules jdk.incubator.foreign \\\n+   --enable-preview --source=19 \\\n","filename":"samples\/dlopen\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,2 +3,1 @@\n-javac --add-modules jdk.incubator.foreign org\/golang\/*.java\n-\n+javac --enable-preview --source=19 org\/golang\/*.java\n","filename":"samples\/go\/compilesource.sh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-java --add-modules jdk.incubator.foreign --enable-native-access=ALL-UNNAMED Main.java\n+java --enable-preview --source=19 --enable-native-access=ALL-UNNAMED Main.java\n","filename":"samples\/go\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-javac --add-modules jdk.incubator.foreign org\/hello\/*.java\n+javac --enable-preview --source=19 org\/hello\/*.java\n","filename":"samples\/helloworld\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign HelloWorld.java\n+java --enable-native-access=ALL-UNNAMED --enable-preview --source=19 HelloWorld.java\n","filename":"samples\/helloworld\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySession;\n@@ -42,3 +42,2 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            var A = allocator.allocateArray(C_DOUBLE, new double[]{\n+        try (var session = MemorySession.openConfined()) {\n+            var A = session.allocateArray(C_DOUBLE, new double[]{\n@@ -47,1 +46,1 @@\n-            var b = allocator.allocateArray(C_DOUBLE, new double[]{\n+            var b = session.allocateArray(C_DOUBLE, new double[]{\n","filename":"samples\/lapack\/TestLapack.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --add-modules jdk.incubator.foreign lapack\/*.java\n+javac --enable-preview --source=19 lapack\/*.java\n","filename":"samples\/lapack\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java --enable-native-access=ALL-UNNAMED --enable-preview --source=19 \\\n","filename":"samples\/lapack\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -50,1 +50,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n+        try (var session = MemorySession.openConfined()) {\n@@ -53,2 +53,1 @@\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            var tu = clang_parseTranslationUnit(index, allocator.allocateUtf8String(args[0]),\n+            var tu = clang_parseTranslationUnit(index, session.allocateUtf8String(args[0]),\n@@ -58,1 +57,1 @@\n-            var visitor = new NativeSymbol[1];\n+            var visitor = new MemorySegment[1];\n@@ -63,2 +62,2 @@\n-                var name = asJavaString(clang_getCursorSpelling(scope, cursor));\n-                var kindName = asJavaString(clang_getCursorKindSpelling(scope, kind));\n+                var name = asJavaString(clang_getCursorSpelling(session, cursor));\n+                var kindName = asJavaString(clang_getCursorKindSpelling(session, kind));\n@@ -66,1 +65,1 @@\n-                var type = clang_getCursorType(scope, cursor);\n+                var type = clang_getCursorType(session, cursor);\n@@ -68,1 +67,1 @@\n-                    var typeName = asJavaString(clang_getTypeSpelling(scope, type));\n+                    var typeName = asJavaString(clang_getTypeSpelling(session, type));\n@@ -79,1 +78,1 @@\n-            }, scope);\n+            }, session);\n@@ -82,1 +81,1 @@\n-            var root = clang_getTranslationUnitCursor(scope, tu);\n+            var root = clang_getTranslationUnitCursor(session, tu);\n","filename":"samples\/libclang\/ASTPrinter.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --add-modules jdk.incubator.foreign org\/llvm\/clang\/*.java\n+javac --enable-preview --source=19 org\/llvm\/clang\/*.java\n","filename":"samples\/libclang\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,2 @@\n-java -Djava.library.path=${LIBCLANG_HOME}\/lib --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java -Djava.library.path=${LIBCLANG_HOME}\/lib --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n","filename":"samples\/libclang\/run.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -44,3 +44,2 @@\n-           try (var scope = ResourceScope.newConfinedScope()) {\n-               var allocator = SegmentAllocator.nativeAllocator(scope);\n-               var url = allocator.allocateUtf8String(urlStr);\n+           try (var session = MemorySession.openConfined()) {\n+               var url = session.allocateUtf8String(urlStr);\n","filename":"samples\/libcurl\/CurlMain.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --add-modules jdk.incubator.foreign org\/jextract\/*.java\n+javac --enable-preview --source=19 org\/jextract\/*.java\n","filename":"samples\/libcurl\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,2 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n","filename":"samples\/libcurl\/run.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.incubator.foreign.*;\n+import java.lang.foreign.*;\n@@ -42,1 +42,1 @@\n-import static jdk.incubator.foreign.MemoryAddress.*;\n+import static java.lang.foreign.MemoryAddress.*;\n@@ -77,2 +77,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n+        try (var session = MemorySession.openConfined()) {\n@@ -80,1 +79,1 @@\n-            var ppFormatCtx = MemorySegment.allocateNative(C_POINTER, scope);\n+            var ppFormatCtx = MemorySegment.allocateNative(C_POINTER, session);\n@@ -82,1 +81,1 @@\n-            var fileName = allocator.allocateUtf8String(args[0]);\n+            var fileName = session.allocateUtf8String(args[0]);\n@@ -97,1 +96,1 @@\n-            scope.addCloseAction(()-> {\n+            session.addCloseAction(()-> {\n@@ -108,1 +107,1 @@\n-            var formatCtx = MemorySegment.ofAddress(pFormatCtx, AVFormatContext.sizeof(), scope);\n+            var formatCtx = MemorySegment.ofAddress(pFormatCtx, AVFormatContext.sizeof(), session);\n@@ -114,1 +113,1 @@\n-            var streamsArray = MemorySegment.ofAddress(pStreams, nb_streams * C_POINTER.byteSize(), scope);\n+            var streamsArray = MemorySegment.ofAddress(pStreams, nb_streams * C_POINTER.byteSize(), session);\n@@ -124,1 +123,1 @@\n-                var stream = MemorySegment.ofAddress(pStream, AVStream.sizeof(), scope);\n+                var stream = MemorySegment.ofAddress(pStream, AVStream.sizeof(), session);\n@@ -127,1 +126,1 @@\n-                var avcodecCtx = MemorySegment.ofAddress(pCodecCtx, AVCodecContext.sizeof(), scope);\n+                var avcodecCtx = MemorySegment.ofAddress(pCodecCtx, AVCodecContext.sizeof(), session);\n@@ -169,1 +168,1 @@\n-            var codecCtx = MemorySegment.ofAddress(pCodecCtx, AVCodecContext.sizeof(), scope);\n+            var codecCtx = MemorySegment.ofAddress(pCodecCtx, AVCodecContext.sizeof(), session);\n@@ -179,1 +178,1 @@\n-            var frame = MemorySegment.ofAddress(pFrame, AVFrame.sizeof(), scope);\n+            var frame = MemorySegment.ofAddress(pFrame, AVFrame.sizeof(), session);\n@@ -183,1 +182,1 @@\n-            var frameRGB = MemorySegment.ofAddress(pFrameRGB, AVFrame.sizeof(), scope);\n+            var frameRGB = MemorySegment.ofAddress(pFrameRGB, AVFrame.sizeof(), session);\n@@ -200,1 +199,1 @@\n-            var packet = AVPacket.allocate(scope);\n+            var packet = AVPacket.allocate(session);\n@@ -202,1 +201,1 @@\n-            var pFrameFinished = MemorySegment.allocateNative(C_INT, scope);\n+            var pFrameFinished = MemorySegment.allocateNative(C_INT, session);\n@@ -222,1 +221,1 @@\n-                                saveFrame(frameRGB, scope, width, height, i);\n+                                saveFrame(frameRGB, session, width, height, i);\n@@ -269,1 +268,1 @@\n-    private static void saveFrame(MemorySegment frameRGB, ResourceScope scope,\n+    private static void saveFrame(MemorySegment frameRGB, MemorySession session,\n@@ -285,1 +284,1 @@\n-                var pixelArray = MemorySegment.ofAddress(pdata.addOffset(y*linesize), 3*width, scope);\n+                var pixelArray = MemorySegment.ofAddress(pdata.addOffset(y*linesize), 3*width, session);\n","filename":"samples\/libffmpeg\/LibffmpegMain.java","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-  -I \/usr\/local\/Cellar\/ffmpeg\/4.4.1_3\/include \\\n+  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.2\/include \\\n","filename":"samples\/libffmpeg\/compile.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-  -I \/usr\/local\/Cellar\/ffmpeg\/4.4.1_3\/include \\\n+  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.2\/include \\\n@@ -11,1 +11,1 @@\n-javac --add-modules jdk.incubator.foreign libffmpeg\/*.java\n+javac --enable-preview --source=19 libffmpeg\/*.java\n","filename":"samples\/libffmpeg\/compilesource.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-   --add-modules jdk.incubator.foreign \\\n-   -Djava.library.path=\/usr\/local\/Cellar\/ffmpeg\/4.4.1_3\/lib LibffmpegMain.java $*\n+   --enable-preview --source=19 \\\n+   -Djava.library.path=\/usr\/local\/Cellar\/ffmpeg@4\/4.4.2\/lib LibffmpegMain.java $*\n","filename":"samples\/libffmpeg\/run.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySession;\n@@ -36,1 +36,1 @@\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -46,5 +46,4 @@\n-          try (var scope = ResourceScope.newConfinedScope()) {\n-              var allocator = SegmentAllocator.newNativeArena(scope);\n-              var repo = allocator.allocate(C_POINTER);\n-              var url = allocator.allocateUtf8String(args[0]);\n-              var path = allocator.allocateUtf8String(args[1]);\n+          try (var session = MemorySession.openConfined()) {\n+              var repo = session.allocate(C_POINTER);\n+              var url = session.allocateUtf8String(args[0]);\n+              var path = session.allocateUtf8String(args[1]);\n","filename":"samples\/libgit2\/GitClone.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-javac --add-modules jdk.incubator.foreign com\/github\/*.java\n+javac --enable-preview --source=19 com\/github\/*.java\n","filename":"samples\/libgit2\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,2 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n","filename":"samples\/libgit2\/run.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,2 +32,5 @@\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -35,1 +38,1 @@\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -41,4 +44,8 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            var jintResPtr = allocator.allocate(jint);\n-            var moduleFilePath = allocator.allocateUtf8String(javaHome + \"\/lib\/modules\");\n+        Path modPath = Paths.get(javaHome + \"\/lib\/modules\");\n+        if (!Files.exists(modPath)) {\n+           System.err.println(modPath + \" not found, please check if your java.home\");\n+           return;\n+        }\n+        try (var session = MemorySession.openConfined()) {\n+            var jintResPtr = session.allocate(jint);\n+            var moduleFilePath = session.allocateUtf8String(javaHome + \"\/lib\/modules\");\n@@ -47,0 +54,4 @@\n+            if (jimageFile == NULL) {\n+                System.err.println(\"JIMAGE_Open failed to open \" + modPath);\n+                return;\n+            }\n@@ -48,1 +59,1 @@\n-                allocator.allocateUtf8String(\"java\/util\"));\n+                session.allocateUtf8String(\"java\/util\"));\n@@ -60,1 +71,1 @@\n-                }, scope);\n+                }, session);\n","filename":"samples\/libjimage\/JImageFile.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-javac -d build --add-modules jdk.incubator.foreign org\/unix\/*.java org\/openjdk\/*.java\n+javac -d build --enable-preview --source=19 org\/openjdk\/*.java\n","filename":"samples\/libjimage\/compile.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-javac -d build --add-modules jdk.incubator.foreign org\/unix\/*.java org\/openjdk\/*.java\n+javac -d build --enable-preview --source=19 org\/openjdk\/*.java\n","filename":"samples\/libjimage\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,6 +6,0 @@\n-\n-jextract \\\n-  -I \/Library\/Developer\/CommandLineTools\/SDKs\/MacOSX.sdk\/usr\/include \\\n-  -t org.unix \\\n-  --source \\\n-  \/Library\/Developer\/CommandLineTools\/SDKs\/MacOSX.sdk\/usr\/include\/dlfcn.h \n","filename":"samples\/libjimage\/extract.sh","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,23 @@\n+\/\/ Generated by jextract\n+\n+package org.openjdk;\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n+public class Constants$root {\n+\n+    static final  OfBoolean C_BOOL$LAYOUT = JAVA_BOOLEAN;\n+    static final  OfByte C_CHAR$LAYOUT = JAVA_BYTE;\n+    static final  OfShort C_SHORT$LAYOUT = JAVA_SHORT.withBitAlignment(16);\n+    static final  OfInt C_INT$LAYOUT = JAVA_INT.withBitAlignment(32);\n+    static final  OfLong C_LONG$LAYOUT = JAVA_LONG.withBitAlignment(64);\n+    static final  OfLong C_LONG_LONG$LAYOUT = JAVA_LONG.withBitAlignment(64);\n+    static final  OfFloat C_FLOAT$LAYOUT = JAVA_FLOAT.withBitAlignment(32);\n+    static final  OfDouble C_DOUBLE$LAYOUT = JAVA_DOUBLE.withBitAlignment(64);\n+    static final  OfAddress C_POINTER$LAYOUT = ADDRESS.withBitAlignment(64);\n+}\n+\n+\n","filename":"samples\/libjimage\/org\/openjdk\/Constants$root.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    void apply(jdk.incubator.foreign.MemoryAddress x0);\n-    static NativeSymbol allocate(JImageClose_t fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(JImageClose_t.class, fi, constants$0.JImageClose_t$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+    void apply(java.lang.foreign.MemoryAddress jimage);\n+    static MemorySegment allocate(JImageClose_t fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(JImageClose_t.class, fi, constants$0.JImageClose_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;)V\", scope);\n@@ -16,2 +16,3 @@\n-    static JImageClose_t ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"JImageClose_t::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0) -> {\n+    static JImageClose_t ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemoryAddress _jimage) -> {\n@@ -19,1 +20,1 @@\n-                constants$0.JImageClose_t$MH.invokeExact(symbol, x0);\n+                constants$0.JImageClose_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_jimage);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageClose_t.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    long apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);\n-    static NativeSymbol allocate(JImageFindResource_t fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(JImageFindResource_t.class, fi, constants$1.JImageFindResource_t$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)J\", scope);\n+    long apply(java.lang.foreign.MemoryAddress jimage, java.lang.foreign.MemoryAddress module_name, java.lang.foreign.MemoryAddress version, java.lang.foreign.MemoryAddress name, java.lang.foreign.MemoryAddress size);\n+    static MemorySegment allocate(JImageFindResource_t fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(JImageFindResource_t.class, fi, constants$1.JImageFindResource_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)J\", scope);\n@@ -16,2 +16,3 @@\n-    static JImageFindResource_t ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"JImageFindResource_t::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {\n+    static JImageFindResource_t ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemoryAddress _jimage, java.lang.foreign.MemoryAddress _module_name, java.lang.foreign.MemoryAddress _version, java.lang.foreign.MemoryAddress _name, java.lang.foreign.MemoryAddress _size) -> {\n@@ -19,1 +20,1 @@\n-                return (long)constants$1.JImageFindResource_t$MH.invokeExact(symbol, x0, x1, x2, x3, x4);\n+                return (long)constants$1.JImageFindResource_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_jimage, (java.lang.foreign.Addressable)_module_name, (java.lang.foreign.Addressable)_version, (java.lang.foreign.Addressable)_name, (java.lang.foreign.Addressable)_size);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageFindResource_t.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    long apply(jdk.incubator.foreign.MemoryAddress x0, long x1, jdk.incubator.foreign.MemoryAddress x2, long x3);\n-    static NativeSymbol allocate(JImageGetResource_t fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(JImageGetResource_t.class, fi, constants$2.JImageGetResource_t$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;JLjdk\/incubator\/foreign\/MemoryAddress;J)J\", scope);\n+    long apply(java.lang.foreign.MemoryAddress jimage, long location, java.lang.foreign.MemoryAddress buffer, long size);\n+    static MemorySegment allocate(JImageGetResource_t fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(JImageGetResource_t.class, fi, constants$2.JImageGetResource_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;JLjava\/lang\/foreign\/MemoryAddress;J)J\", scope);\n@@ -16,2 +16,3 @@\n-    static JImageGetResource_t ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"JImageGetResource_t::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0, long x1, jdk.incubator.foreign.MemoryAddress x2, long x3) -> {\n+    static JImageGetResource_t ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemoryAddress _jimage, long _location, java.lang.foreign.MemoryAddress _buffer, long _size) -> {\n@@ -19,1 +20,1 @@\n-                return (long)constants$2.JImageGetResource_t$MH.invokeExact(symbol, x0, x1, x2, x3);\n+                return (long)constants$2.JImageGetResource_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_jimage, _location, (java.lang.foreign.Addressable)_buffer, _size);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageGetResource_t.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-    static NativeSymbol allocate(JImageOpen_t fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(JImageOpen_t.class, fi, constants$0.JImageOpen_t$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress name, java.lang.foreign.MemoryAddress error);\n+    static MemorySegment allocate(JImageOpen_t fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(JImageOpen_t.class, fi, constants$0.JImageOpen_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)Ljava\/lang\/foreign\/Addressable;\", scope);\n@@ -16,2 +16,3 @@\n-    static JImageOpen_t ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"JImageOpen_t::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+    static JImageOpen_t ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemoryAddress _name, java.lang.foreign.MemoryAddress _error) -> {\n@@ -19,1 +20,1 @@\n-                return (jdk.incubator.foreign.MemoryAddress)constants$0.JImageOpen_t$MH.invokeExact(symbol, x0, x1);\n+                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$0.JImageOpen_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_name, (java.lang.foreign.Addressable)_error);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageOpen_t.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1);\n-    static NativeSymbol allocate(JImagePackageToModule_t fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(JImagePackageToModule_t.class, fi, constants$1.JImagePackageToModule_t$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemoryAddress;\", scope);\n+    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress jimage, java.lang.foreign.MemoryAddress package_name);\n+    static MemorySegment allocate(JImagePackageToModule_t fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(JImagePackageToModule_t.class, fi, constants$1.JImagePackageToModule_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)Ljava\/lang\/foreign\/Addressable;\", scope);\n@@ -16,2 +16,3 @@\n-    static JImagePackageToModule_t ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"JImagePackageToModule_t::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1) -> {\n+    static JImagePackageToModule_t ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemoryAddress _jimage, java.lang.foreign.MemoryAddress _package_name) -> {\n@@ -19,1 +20,1 @@\n-                return (jdk.incubator.foreign.MemoryAddress)constants$1.JImagePackageToModule_t$MH.invokeExact(symbol, x0, x1);\n+                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$1.JImagePackageToModule_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_jimage, (java.lang.foreign.Addressable)_package_name);\n","filename":"samples\/libjimage\/org\/openjdk\/JImagePackageToModule_t.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2);\n-    static NativeSymbol allocate(JImageResourceIterator_t fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(JImageResourceIterator_t.class, fi, constants$3.JImageResourceIterator_t$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)V\", scope);\n+    void apply(java.lang.foreign.MemoryAddress jimage, java.lang.foreign.MemoryAddress visitor, java.lang.foreign.MemoryAddress arg);\n+    static MemorySegment allocate(JImageResourceIterator_t fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(JImageResourceIterator_t.class, fi, constants$3.JImageResourceIterator_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)V\", scope);\n@@ -16,2 +16,3 @@\n-    static JImageResourceIterator_t ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"JImageResourceIterator_t::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2) -> {\n+    static JImageResourceIterator_t ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemoryAddress _jimage, java.lang.foreign.MemoryAddress _visitor, java.lang.foreign.MemoryAddress _arg) -> {\n@@ -19,1 +20,1 @@\n-                constants$3.JImageResourceIterator_t$MH.invokeExact(symbol, x0, x1, x2);\n+                constants$3.JImageResourceIterator_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_jimage, (java.lang.foreign.Addressable)_visitor, (java.lang.foreign.Addressable)_arg);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceIterator_t.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    int apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6);\n-    static NativeSymbol allocate(JImageResourceVisitor_t fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(JImageResourceVisitor_t.class, fi, constants$2.JImageResourceVisitor_t$FUNC, \"(Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n+    int apply(java.lang.foreign.MemoryAddress jimage, java.lang.foreign.MemoryAddress module_name, java.lang.foreign.MemoryAddress version, java.lang.foreign.MemoryAddress package_, java.lang.foreign.MemoryAddress name, java.lang.foreign.MemoryAddress extension, java.lang.foreign.MemoryAddress arg);\n+    static MemorySegment allocate(JImageResourceVisitor_t fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(JImageResourceVisitor_t.class, fi, constants$2.JImageResourceVisitor_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)I\", scope);\n@@ -16,2 +16,3 @@\n-    static JImageResourceVisitor_t ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"JImageResourceVisitor_t::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6) -> {\n+    static JImageResourceVisitor_t ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemoryAddress _jimage, java.lang.foreign.MemoryAddress _module_name, java.lang.foreign.MemoryAddress _version, java.lang.foreign.MemoryAddress _package_, java.lang.foreign.MemoryAddress _name, java.lang.foreign.MemoryAddress _extension, java.lang.foreign.MemoryAddress _arg) -> {\n@@ -19,1 +20,1 @@\n-                return (int)constants$2.JImageResourceVisitor_t$MH.invokeExact(symbol, x0, x1, x2, x3, x4, x5, x6);\n+                return (int)constants$2.JImageResourceVisitor_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_jimage, (java.lang.foreign.Addressable)_module_name, (java.lang.foreign.Addressable)_version, (java.lang.foreign.Addressable)_package_, (java.lang.foreign.Addressable)_name, (java.lang.foreign.Addressable)_extension, (java.lang.foreign.Addressable)_arg);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceVisitor_t.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4,12 +4,11 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.NativeSymbol;\n-import jdk.incubator.foreign.SymbolLookup;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.Addressable;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.ValueLayout;\n@@ -26,3 +25,2 @@\n-import org.unix.dlfcn_h;\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import static java.lang.foreign.Linker.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -33,1 +31,1 @@\n-    private final static CLinker LINKER = CLinker.systemCLinker();\n+    private final static Linker LINKER = Linker.nativeLinker();\n@@ -39,21 +37,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n-\n-    \/\/ looks up symbols using dlsym - manual change\n-    private static SymbolLookup dlopenLookup(String libraryName) {\n-        System.out.println(\"loading \" + libraryName);\n-        var globalScope = ResourceScope.globalScope();\n-        try (ResourceScope openScope = ResourceScope.newConfinedScope()) {\n-            var openScopeAllocator = SegmentAllocator.newNativeArena(openScope);\n-            final MemoryAddress handle = dlfcn_h.dlopen(openScopeAllocator.allocateUtf8String(libraryName), dlfcn_h.RTLD_LOCAL());\n-            if (handle == MemoryAddress.NULL) {\n-                throw new IllegalArgumentException(\"Cannot find library: \" + libraryName);\n-            }\n-            globalScope.addCloseAction(() -> dlfcn_h.dlclose(handle));\n-            return name -> {\n-                var allocator = SegmentAllocator.newNativeArena(globalScope);\n-                MemoryAddress addr = dlfcn_h.dlsym(handle, allocator.allocateUtf8String(name));\n-                return addr == MemoryAddress.NULL ?\n-                            Optional.empty() : Optional.of(NativeSymbol.ofAddress(name, addr, globalScope));\n-            };\n-        }\n-    }\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n@@ -63,2 +41,11 @@\n-        SymbolLookup dlopenLookup = dlopenLookup(System.getProperty(\"java.home\") + \"\/lib\/libjimage.dylib\");\n-        SYMBOL_LOOKUP = name -> dlopenLookup.lookup(name).or(() -> LINKER.lookup(name));\n+        var libPath = System.getProperty(\"java.home\");\n+        var OS = System.getProperty(\"os.name\");\n+        if (OS.contains(\"Mac OS X\")) {\n+            libPath += \"\/lib\/libjimage.dylib\";\n+        } else if (OS.contains(\"Windows\")) {\n+            libPath = \"\/bin\/jimage.dll\";\n+        } else {\n+            libPath = \"\/lib\/libjimage.so\"; \/\/ some Unix\n+        }\n+        SymbolLookup loaderLookup = SymbolLookup.libraryLookup(libPath, MemorySession.global());\n+        SYMBOL_LOOKUP = name -> loaderLookup.lookup(name).or(() -> LINKER.defaultLookup().lookup(name));\n@@ -77,1 +64,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), MemorySession.openShared())).orElse(null);\n@@ -96,1 +83,1 @@\n-    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, MemorySession scope) {\n@@ -107,1 +94,1 @@\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, ResourceScope scope) {\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession scope) {\n@@ -115,1 +102,1 @@\n-        private final NativeSymbol symbol;\n+        private final MemorySegment symbol;\n@@ -118,1 +105,1 @@\n-        private VarargsInvoker(NativeSymbol symbol, FunctionDescriptor function) {\n+        private VarargsInvoker(MemorySegment symbol, FunctionDescriptor function) {\n@@ -131,1 +118,1 @@\n-        static MethodHandle make(NativeSymbol symbol, FunctionDescriptor function) {\n+        static MethodHandle make(MemorySegment symbol, FunctionDescriptor function) {\n","filename":"samples\/libjimage\/org\/openjdk\/RuntimeHelper.java","additions":32,"deletions":45,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    static final FunctionDescriptor JIMAGE_Open$FUNC = FunctionDescriptor.of(ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+    static final FunctionDescriptor JIMAGE_Open$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n@@ -20,3 +20,3 @@\n-    static final FunctionDescriptor JImageOpen_t$FUNC = FunctionDescriptor.of(ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+    static final FunctionDescriptor JImageOpen_t$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n@@ -28,1 +28,1 @@\n-        ADDRESS\n+        Constants$root.C_POINTER$LAYOUT\n@@ -35,1 +35,1 @@\n-        ADDRESS\n+        Constants$root.C_POINTER$LAYOUT\n","filename":"samples\/libjimage\/org\/openjdk\/constants$0.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,3 +12,3 @@\n-    static final FunctionDescriptor JIMAGE_PackageToModule$FUNC = FunctionDescriptor.of(ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+    static final FunctionDescriptor JIMAGE_PackageToModule$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n@@ -20,3 +20,3 @@\n-    static final FunctionDescriptor JImagePackageToModule_t$FUNC = FunctionDescriptor.of(ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+    static final FunctionDescriptor JImagePackageToModule_t$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n@@ -27,6 +27,6 @@\n-    static final FunctionDescriptor JIMAGE_FindResource$FUNC = FunctionDescriptor.of(JAVA_LONG,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+    static final FunctionDescriptor JIMAGE_FindResource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n@@ -38,6 +38,6 @@\n-    static final FunctionDescriptor JImageFindResource_t$FUNC = FunctionDescriptor.of(JAVA_LONG,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+    static final FunctionDescriptor JImageFindResource_t$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n","filename":"samples\/libjimage\/org\/openjdk\/constants$1.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -12,5 +12,5 @@\n-    static final FunctionDescriptor JIMAGE_GetResource$FUNC = FunctionDescriptor.of(JAVA_LONG,\n-        ADDRESS,\n-        JAVA_LONG,\n-        ADDRESS,\n-        JAVA_LONG\n+    static final FunctionDescriptor JIMAGE_GetResource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_LONG_LONG$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_LONG_LONG$LAYOUT\n@@ -22,5 +22,5 @@\n-    static final FunctionDescriptor JImageGetResource_t$FUNC = FunctionDescriptor.of(JAVA_LONG,\n-        ADDRESS,\n-        JAVA_LONG,\n-        ADDRESS,\n-        JAVA_LONG\n+    static final FunctionDescriptor JImageGetResource_t$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_LONG_LONG$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_LONG_LONG$LAYOUT\n@@ -31,8 +31,8 @@\n-    static final FunctionDescriptor JImageResourceVisitor_t$FUNC = FunctionDescriptor.of(JAVA_INT,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+    static final FunctionDescriptor JImageResourceVisitor_t$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n@@ -44,3 +44,3 @@\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n","filename":"samples\/libjimage\/org\/openjdk\/constants$2.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -13,3 +13,3 @@\n-        ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT,\n+        Constants$root.C_POINTER$LAYOUT\n","filename":"samples\/libjimage\/org\/openjdk\/constants$3.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -8,2 +8,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -13,8 +13,8 @@\n-    public static ValueLayout.OfByte C_CHAR = JAVA_BYTE;\n-    public static ValueLayout.OfShort C_SHORT = JAVA_SHORT;\n-    public static ValueLayout.OfInt C_INT = JAVA_INT;\n-    public static ValueLayout.OfLong C_LONG = JAVA_LONG;\n-    public static ValueLayout.OfLong C_LONG_LONG = JAVA_LONG;\n-    public static ValueLayout.OfFloat C_FLOAT = JAVA_FLOAT;\n-    public static ValueLayout.OfDouble C_DOUBLE = JAVA_DOUBLE;\n-    public static ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS;\n+    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;\n+    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;\n+    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;\n+    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;\n+    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;\n+    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;\n+    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;\n+    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;\n@@ -24,3 +24,3 @@\n-    public static ValueLayout.OfLong jlong = JAVA_LONG;\n-    public static ValueLayout.OfInt jint = JAVA_INT;\n-    public static ValueLayout.OfLong JImageLocationRef = JAVA_LONG;\n+    public static OfLong jlong = Constants$root.C_LONG_LONG$LAYOUT;\n+    public static OfInt jint = Constants$root.C_INT$LAYOUT;\n+    public static OfLong JImageLocationRef = Constants$root.C_LONG_LONG$LAYOUT;\n@@ -33,1 +33,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(name, error);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, error);\n@@ -55,1 +55,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(jimage, package_name);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(jimage, package_name);\n","filename":"samples\/libjimage\/org\/openjdk\/jimage_h.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,14 +0,0 @@\n-\/\/ Generated by jextract\n-\n-package org.unix;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n-public class Dl_info$0 extends dl_info {\n-\n-}\n-\n-\n","filename":"samples\/libjimage\/org\/unix\/Dl_info$0.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -1,235 +0,0 @@\n-package org.unix;\n-\/\/ Generated by jextract\n-\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.NativeSymbol;\n-import jdk.incubator.foreign.SymbolLookup;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ValueLayout;\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.io.File;\n-import java.nio.file.Path;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-import java.util.Optional;\n-import java.util.stream.Stream;\n-\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n-\n-final class RuntimeHelper {\n-\n-    private RuntimeHelper() {}\n-    private final static CLinker LINKER = CLinker.systemCLinker();\n-    private final static ClassLoader LOADER = RuntimeHelper.class.getClassLoader();\n-    private final static MethodHandles.Lookup MH_LOOKUP = MethodHandles.lookup();\n-    private final static SymbolLookup SYMBOL_LOOKUP;\n-\n-    final static SegmentAllocator CONSTANT_ALLOCATOR =\n-            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n-\n-    static {\n-\n-        SymbolLookup loaderLookup = SymbolLookup.loaderLookup();\n-        SYMBOL_LOOKUP = name -> loaderLookup.lookup(name).or(() -> LINKER.lookup(name));\n-    }\n-\n-    static <T> T requireNonNull(T obj, String symbolName) {\n-        if (obj == null) {\n-            throw new UnsatisfiedLinkError(\"unresolved symbol: \" + symbolName);\n-        }\n-        return obj;\n-    }\n-\n-    private final static SegmentAllocator THROWING_ALLOCATOR = (x, y) -> { throw new AssertionError(\"should not reach here\"); };\n-\n-    static final MemorySegment lookupGlobalVariable(String name, MemoryLayout layout) {\n-        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n-    }\n-\n-    static final MethodHandle downcallHandle(String name, FunctionDescriptor fdesc, boolean variadic) {\n-        return SYMBOL_LOOKUP.lookup(name).map(\n-                addr -> {\n-                    return variadic ?\n-                        VarargsInvoker.make(addr, fdesc) :\n-                        LINKER.downcallHandle(addr, fdesc);\n-                }).orElse(null);\n-    }\n-\n-    static final MethodHandle downcallHandle(FunctionDescriptor fdesc, boolean variadic) {\n-        if (variadic) {\n-            throw new AssertionError(\"Cannot get here!\");\n-        }\n-        return LINKER.downcallHandle(fdesc);\n-    }\n-\n-    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n-        try {\n-            MethodHandle handle = MH_LOOKUP.findVirtual(fi, \"apply\",\n-                    MethodType.fromMethodDescriptorString(mtypeDesc, LOADER));\n-            handle = handle.bindTo(z);\n-            return LINKER.upcallStub(handle, fdesc, scope);\n-        } catch (Throwable ex) {\n-            throw new AssertionError(ex);\n-        }\n-    }\n-\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, ResourceScope scope) {\n-         return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), scope);\n-    }\n-\n-    \/\/ Internals only below this point\n-\n-    private static class VarargsInvoker {\n-        private static final MethodHandle INVOKE_MH;\n-        private final NativeSymbol symbol;\n-        private final FunctionDescriptor function;\n-\n-        private VarargsInvoker(NativeSymbol symbol, FunctionDescriptor function) {\n-            this.symbol = symbol;\n-            this.function = function;\n-        }\n-\n-        static {\n-            try {\n-                INVOKE_MH = MethodHandles.lookup().findVirtual(VarargsInvoker.class, \"invoke\", MethodType.methodType(Object.class, SegmentAllocator.class, Object[].class));\n-            } catch (ReflectiveOperationException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n-        static MethodHandle make(NativeSymbol symbol, FunctionDescriptor function) {\n-            VarargsInvoker invoker = new VarargsInvoker(symbol, function);\n-            MethodHandle handle = INVOKE_MH.bindTo(invoker).asCollector(Object[].class, function.argumentLayouts().size() + 1);\n-            MethodType mtype = MethodType.methodType(function.returnLayout().isPresent() ? carrier(function.returnLayout().get(), true) : void.class);\n-            for (MemoryLayout layout : function.argumentLayouts()) {\n-                mtype = mtype.appendParameterTypes(carrier(layout, false));\n-            }\n-            mtype = mtype.appendParameterTypes(Object[].class);\n-            if (mtype.returnType().equals(MemorySegment.class)) {\n-                mtype = mtype.insertParameterTypes(0, SegmentAllocator.class);\n-            } else {\n-                handle = MethodHandles.insertArguments(handle, 0, THROWING_ALLOCATOR);\n-            }\n-            return handle.asType(mtype);\n-        }\n-\n-        static Class<?> carrier(MemoryLayout layout, boolean ret) {\n-            if (layout instanceof ValueLayout valueLayout) {\n-                return (ret || valueLayout.carrier() != MemoryAddress.class) ?\n-                        valueLayout.carrier() : Addressable.class;\n-            } else if (layout instanceof GroupLayout) {\n-                return MemorySegment.class;\n-            } else {\n-                throw new AssertionError(\"Cannot get here!\");\n-            }\n-        }\n-\n-        private Object invoke(SegmentAllocator allocator, Object[] args) throws Throwable {\n-            \/\/ one trailing Object[]\n-            int nNamedArgs = function.argumentLayouts().size();\n-            assert(args.length == nNamedArgs + 1);\n-            \/\/ The last argument is the array of vararg collector\n-            Object[] unnamedArgs = (Object[]) args[args.length - 1];\n-\n-            int argsCount = nNamedArgs + unnamedArgs.length;\n-            Class<?>[] argTypes = new Class<?>[argsCount];\n-            MemoryLayout[] argLayouts = new MemoryLayout[nNamedArgs + unnamedArgs.length];\n-\n-            int pos = 0;\n-            for (pos = 0; pos < nNamedArgs; pos++) {\n-                argLayouts[pos] = function.argumentLayouts().get(pos);\n-            }\n-\n-            assert pos == nNamedArgs;\n-            for (Object o: unnamedArgs) {\n-                argLayouts[pos] = variadicLayout(normalize(o.getClass()));\n-                pos++;\n-            }\n-            assert pos == argsCount;\n-\n-            FunctionDescriptor f = (function.returnLayout().isEmpty()) ?\n-                    FunctionDescriptor.ofVoid(argLayouts) :\n-                    FunctionDescriptor.of(function.returnLayout().get(), argLayouts);\n-            MethodHandle mh = LINKER.downcallHandle(symbol, f);\n-            if (mh.type().returnType() == MemorySegment.class) {\n-                mh = mh.bindTo(allocator);\n-            }\n-            \/\/ flatten argument list so that it can be passed to an asSpreader MH\n-            Object[] allArgs = new Object[nNamedArgs + unnamedArgs.length];\n-            System.arraycopy(args, 0, allArgs, 0, nNamedArgs);\n-            System.arraycopy(unnamedArgs, 0, allArgs, nNamedArgs, unnamedArgs.length);\n-\n-            return mh.asSpreader(Object[].class, argsCount).invoke(allArgs);\n-        }\n-\n-        private static Class<?> unboxIfNeeded(Class<?> clazz) {\n-            if (clazz == Boolean.class) {\n-                return boolean.class;\n-            } else if (clazz == Void.class) {\n-                return void.class;\n-            } else if (clazz == Byte.class) {\n-                return byte.class;\n-            } else if (clazz == Character.class) {\n-                return char.class;\n-            } else if (clazz == Short.class) {\n-                return short.class;\n-            } else if (clazz == Integer.class) {\n-                return int.class;\n-            } else if (clazz == Long.class) {\n-                return long.class;\n-            } else if (clazz == Float.class) {\n-                return float.class;\n-            } else if (clazz == Double.class) {\n-                return double.class;\n-            } else {\n-                return clazz;\n-            }\n-        }\n-\n-        private Class<?> promote(Class<?> c) {\n-            if (c == byte.class || c == char.class || c == short.class || c == int.class) {\n-                return long.class;\n-            } else if (c == float.class) {\n-                return double.class;\n-            } else {\n-                return c;\n-            }\n-        }\n-\n-        private Class<?> normalize(Class<?> c) {\n-            c = unboxIfNeeded(c);\n-            if (c.isPrimitive()) {\n-                return promote(c);\n-            }\n-            if (MemoryAddress.class.isAssignableFrom(c)) {\n-                return MemoryAddress.class;\n-            }\n-            if (MemorySegment.class.isAssignableFrom(c)) {\n-                return MemorySegment.class;\n-            }\n-            throw new IllegalArgumentException(\"Invalid type for ABI: \" + c.getTypeName());\n-        }\n-\n-        private MemoryLayout variadicLayout(Class<?> c) {\n-            if (c == long.class) {\n-                return JAVA_LONG;\n-            } else if (c == double.class) {\n-                return JAVA_DOUBLE;\n-            } else if (MemoryAddress.class.isAssignableFrom(c)) {\n-                return ADDRESS;\n-            } else {\n-                throw new IllegalArgumentException(\"Unhandled variadic argument class: \" + c);\n-            }\n-        }\n-    }\n-}\n","filename":"samples\/libjimage\/org\/unix\/RuntimeHelper.java","additions":0,"deletions":235,"binary":false,"changes":235,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-\/\/ Generated by jextract\n-\n-package org.unix;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n-class constants$0 {\n-\n-    static final FunctionDescriptor dladdr$FUNC = FunctionDescriptor.of(JAVA_INT,\n-        ADDRESS,\n-        ADDRESS\n-    );\n-    static final MethodHandle dladdr$MH = RuntimeHelper.downcallHandle(\n-        \"dladdr\",\n-        constants$0.dladdr$FUNC, false\n-    );\n-    static final FunctionDescriptor dlclose$FUNC = FunctionDescriptor.of(JAVA_INT,\n-        ADDRESS\n-    );\n-    static final MethodHandle dlclose$MH = RuntimeHelper.downcallHandle(\n-        \"dlclose\",\n-        constants$0.dlclose$FUNC, false\n-    );\n-    static final FunctionDescriptor dlerror$FUNC = FunctionDescriptor.of(ADDRESS);\n-    static final MethodHandle dlerror$MH = RuntimeHelper.downcallHandle(\n-        \"dlerror\",\n-        constants$0.dlerror$FUNC, false\n-    );\n-    static final FunctionDescriptor dlopen$FUNC = FunctionDescriptor.of(ADDRESS,\n-        ADDRESS,\n-        JAVA_INT\n-    );\n-    static final MethodHandle dlopen$MH = RuntimeHelper.downcallHandle(\n-        \"dlopen\",\n-        constants$0.dlopen$FUNC, false\n-    );\n-    static final FunctionDescriptor dlsym$FUNC = FunctionDescriptor.of(ADDRESS,\n-        ADDRESS,\n-        ADDRESS\n-    );\n-    static final MethodHandle dlsym$MH = RuntimeHelper.downcallHandle(\n-        \"dlsym\",\n-        constants$0.dlsym$FUNC, false\n-    );\n-    static final FunctionDescriptor dlopen_preflight$FUNC = FunctionDescriptor.of(JAVA_BOOLEAN,\n-        ADDRESS\n-    );\n-    static final MethodHandle dlopen_preflight$MH = RuntimeHelper.downcallHandle(\n-        \"dlopen_preflight\",\n-        constants$0.dlopen_preflight$FUNC, false\n-    );\n-}\n-\n-\n","filename":"samples\/libjimage\/org\/unix\/constants$0.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,20 +0,0 @@\n-\/\/ Generated by jextract\n-\n-package org.unix;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n-class constants$1 {\n-\n-    static final MemorySegment __DARWIN_SUF_64_BIT_INO_T$SEGMENT = RuntimeHelper.CONSTANT_ALLOCATOR.allocateUtf8String(\"$INODE64\");\n-    static final MemorySegment __DARWIN_SUF_1050$SEGMENT = RuntimeHelper.CONSTANT_ALLOCATOR.allocateUtf8String(\"$1050\");\n-    static final MemorySegment __DARWIN_SUF_EXTSN$SEGMENT = RuntimeHelper.CONSTANT_ALLOCATOR.allocateUtf8String(\"$DARWIN_EXTSN\");\n-    static final MemoryAddress RTLD_NEXT$ADDR = MemoryAddress.ofLong(-1L);\n-    static final MemoryAddress RTLD_DEFAULT$ADDR = MemoryAddress.ofLong(-2L);\n-    static final MemoryAddress RTLD_SELF$ADDR = MemoryAddress.ofLong(-3L);\n-}\n-\n-\n","filename":"samples\/libjimage\/org\/unix\/constants$1.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\/\/ Generated by jextract\n-\n-package org.unix;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n-class constants$2 {\n-\n-    static final MemoryAddress RTLD_MAIN_ONLY$ADDR = MemoryAddress.ofLong(-5L);\n-}\n-\n-\n","filename":"samples\/libjimage\/org\/unix\/constants$2.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,97 +0,0 @@\n-\/\/ Generated by jextract\n-\n-package org.unix;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n-public class dl_info {\n-\n-    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(\n-        ADDRESS.withName(\"dli_fname\"),\n-        ADDRESS.withName(\"dli_fbase\"),\n-        ADDRESS.withName(\"dli_sname\"),\n-        ADDRESS.withName(\"dli_saddr\")\n-    ).withName(\"dl_info\");\n-    public static MemoryLayout $LAYOUT() {\n-        return dl_info.$struct$LAYOUT;\n-    }\n-    static final VarHandle dli_fname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"dli_fname\"));\n-    public static VarHandle dli_fname$VH() {\n-        return dl_info.dli_fname$VH;\n-    }\n-    public static MemoryAddress dli_fname$get(MemorySegment seg) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fname$VH.get(seg);\n-    }\n-    public static void dli_fname$set( MemorySegment seg, MemoryAddress x) {\n-        dl_info.dli_fname$VH.set(seg, x);\n-    }\n-    public static MemoryAddress dli_fname$get(MemorySegment seg, long index) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fname$VH.get(seg.asSlice(index*sizeof()));\n-    }\n-    public static void dli_fname$set(MemorySegment seg, long index, MemoryAddress x) {\n-        dl_info.dli_fname$VH.set(seg.asSlice(index*sizeof()), x);\n-    }\n-    static final VarHandle dli_fbase$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"dli_fbase\"));\n-    public static VarHandle dli_fbase$VH() {\n-        return dl_info.dli_fbase$VH;\n-    }\n-    public static MemoryAddress dli_fbase$get(MemorySegment seg) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fbase$VH.get(seg);\n-    }\n-    public static void dli_fbase$set( MemorySegment seg, MemoryAddress x) {\n-        dl_info.dli_fbase$VH.set(seg, x);\n-    }\n-    public static MemoryAddress dli_fbase$get(MemorySegment seg, long index) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_fbase$VH.get(seg.asSlice(index*sizeof()));\n-    }\n-    public static void dli_fbase$set(MemorySegment seg, long index, MemoryAddress x) {\n-        dl_info.dli_fbase$VH.set(seg.asSlice(index*sizeof()), x);\n-    }\n-    static final VarHandle dli_sname$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"dli_sname\"));\n-    public static VarHandle dli_sname$VH() {\n-        return dl_info.dli_sname$VH;\n-    }\n-    public static MemoryAddress dli_sname$get(MemorySegment seg) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_sname$VH.get(seg);\n-    }\n-    public static void dli_sname$set( MemorySegment seg, MemoryAddress x) {\n-        dl_info.dli_sname$VH.set(seg, x);\n-    }\n-    public static MemoryAddress dli_sname$get(MemorySegment seg, long index) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_sname$VH.get(seg.asSlice(index*sizeof()));\n-    }\n-    public static void dli_sname$set(MemorySegment seg, long index, MemoryAddress x) {\n-        dl_info.dli_sname$VH.set(seg.asSlice(index*sizeof()), x);\n-    }\n-    static final VarHandle dli_saddr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement(\"dli_saddr\"));\n-    public static VarHandle dli_saddr$VH() {\n-        return dl_info.dli_saddr$VH;\n-    }\n-    public static MemoryAddress dli_saddr$get(MemorySegment seg) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_saddr$VH.get(seg);\n-    }\n-    public static void dli_saddr$set( MemorySegment seg, MemoryAddress x) {\n-        dl_info.dli_saddr$VH.set(seg, x);\n-    }\n-    public static MemoryAddress dli_saddr$get(MemorySegment seg, long index) {\n-        return (jdk.incubator.foreign.MemoryAddress)dl_info.dli_saddr$VH.get(seg.asSlice(index*sizeof()));\n-    }\n-    public static void dli_saddr$set(MemorySegment seg, long index, MemoryAddress x) {\n-        dl_info.dli_saddr$VH.set(seg.asSlice(index*sizeof()), x);\n-    }\n-    public static long sizeof() { return $LAYOUT().byteSize(); }\n-    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }\n-    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {\n-        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));\n-    }\n-    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n-    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n-    }\n-    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n-}\n-\n-\n","filename":"samples\/libjimage\/org\/unix\/dl_info.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -1,701 +0,0 @@\n-\/\/ Generated by jextract\n-\n-package org.unix;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.VarHandle;\n-import java.nio.ByteOrder;\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n-public class dlfcn_h  {\n-\n-    \/* package-private *\/ dlfcn_h() {}\n-    public static ValueLayout.OfByte C_CHAR = JAVA_BYTE;\n-    public static ValueLayout.OfShort C_SHORT = JAVA_SHORT;\n-    public static ValueLayout.OfInt C_INT = JAVA_INT;\n-    public static ValueLayout.OfLong C_LONG = JAVA_LONG;\n-    public static ValueLayout.OfLong C_LONG_LONG = JAVA_LONG;\n-    public static ValueLayout.OfFloat C_FLOAT = JAVA_FLOAT;\n-    public static ValueLayout.OfDouble C_DOUBLE = JAVA_DOUBLE;\n-    public static ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS;\n-    public static int __DARWIN_ONLY_64_BIT_INO_T() {\n-        return (int)0L;\n-    }\n-    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {\n-        return (int)1L;\n-    }\n-    public static int __DARWIN_ONLY_VERS_1050() {\n-        return (int)0L;\n-    }\n-    public static int __DARWIN_UNIX03() {\n-        return (int)1L;\n-    }\n-    public static int __DARWIN_64_BIT_INO_T() {\n-        return (int)1L;\n-    }\n-    public static int __DARWIN_VERS_1050() {\n-        return (int)1L;\n-    }\n-    public static int __DARWIN_NON_CANCELABLE() {\n-        return (int)0L;\n-    }\n-    public static int __STDC_WANT_LIB_EXT1__() {\n-        return (int)1L;\n-    }\n-    public static int __DARWIN_NO_LONG_LONG() {\n-        return (int)0L;\n-    }\n-    public static int _DARWIN_FEATURE_64_BIT_INODE() {\n-        return (int)1L;\n-    }\n-    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {\n-        return (int)1L;\n-    }\n-    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {\n-        return (int)3L;\n-    }\n-    public static int true_() {\n-        return (int)1L;\n-    }\n-    public static int false_() {\n-        return (int)0L;\n-    }\n-    public static int __bool_true_false_are_defined() {\n-        return (int)1L;\n-    }\n-    public static int __API_TO_BE_DEPRECATED() {\n-        return (int)100000L;\n-    }\n-    public static int __MAC_10_0() {\n-        return (int)1000L;\n-    }\n-    public static int __MAC_10_1() {\n-        return (int)1010L;\n-    }\n-    public static int __MAC_10_2() {\n-        return (int)1020L;\n-    }\n-    public static int __MAC_10_3() {\n-        return (int)1030L;\n-    }\n-    public static int __MAC_10_4() {\n-        return (int)1040L;\n-    }\n-    public static int __MAC_10_5() {\n-        return (int)1050L;\n-    }\n-    public static int __MAC_10_6() {\n-        return (int)1060L;\n-    }\n-    public static int __MAC_10_7() {\n-        return (int)1070L;\n-    }\n-    public static int __MAC_10_8() {\n-        return (int)1080L;\n-    }\n-    public static int __MAC_10_9() {\n-        return (int)1090L;\n-    }\n-    public static int __MAC_10_10() {\n-        return (int)101000L;\n-    }\n-    public static int __MAC_10_10_2() {\n-        return (int)101002L;\n-    }\n-    public static int __MAC_10_10_3() {\n-        return (int)101003L;\n-    }\n-    public static int __MAC_10_11() {\n-        return (int)101100L;\n-    }\n-    public static int __MAC_10_11_2() {\n-        return (int)101102L;\n-    }\n-    public static int __MAC_10_11_3() {\n-        return (int)101103L;\n-    }\n-    public static int __MAC_10_11_4() {\n-        return (int)101104L;\n-    }\n-    public static int __MAC_10_12() {\n-        return (int)101200L;\n-    }\n-    public static int __MAC_10_12_1() {\n-        return (int)101201L;\n-    }\n-    public static int __MAC_10_12_2() {\n-        return (int)101202L;\n-    }\n-    public static int __MAC_10_12_4() {\n-        return (int)101204L;\n-    }\n-    public static int __MAC_10_13() {\n-        return (int)101300L;\n-    }\n-    public static int __MAC_10_13_1() {\n-        return (int)101301L;\n-    }\n-    public static int __MAC_10_13_2() {\n-        return (int)101302L;\n-    }\n-    public static int __MAC_10_13_4() {\n-        return (int)101304L;\n-    }\n-    public static int __MAC_10_14() {\n-        return (int)101400L;\n-    }\n-    public static int __MAC_10_14_1() {\n-        return (int)101401L;\n-    }\n-    public static int __MAC_10_14_4() {\n-        return (int)101404L;\n-    }\n-    public static int __MAC_10_14_6() {\n-        return (int)101406L;\n-    }\n-    public static int __MAC_10_15() {\n-        return (int)101500L;\n-    }\n-    public static int __MAC_10_15_1() {\n-        return (int)101501L;\n-    }\n-    public static int __MAC_10_15_4() {\n-        return (int)101504L;\n-    }\n-    public static int __MAC_10_16() {\n-        return (int)101600L;\n-    }\n-    public static int __MAC_11_0() {\n-        return (int)110000L;\n-    }\n-    public static int __MAC_11_1() {\n-        return (int)110100L;\n-    }\n-    public static int __IPHONE_2_0() {\n-        return (int)20000L;\n-    }\n-    public static int __IPHONE_2_1() {\n-        return (int)20100L;\n-    }\n-    public static int __IPHONE_2_2() {\n-        return (int)20200L;\n-    }\n-    public static int __IPHONE_3_0() {\n-        return (int)30000L;\n-    }\n-    public static int __IPHONE_3_1() {\n-        return (int)30100L;\n-    }\n-    public static int __IPHONE_3_2() {\n-        return (int)30200L;\n-    }\n-    public static int __IPHONE_4_0() {\n-        return (int)40000L;\n-    }\n-    public static int __IPHONE_4_1() {\n-        return (int)40100L;\n-    }\n-    public static int __IPHONE_4_2() {\n-        return (int)40200L;\n-    }\n-    public static int __IPHONE_4_3() {\n-        return (int)40300L;\n-    }\n-    public static int __IPHONE_5_0() {\n-        return (int)50000L;\n-    }\n-    public static int __IPHONE_5_1() {\n-        return (int)50100L;\n-    }\n-    public static int __IPHONE_6_0() {\n-        return (int)60000L;\n-    }\n-    public static int __IPHONE_6_1() {\n-        return (int)60100L;\n-    }\n-    public static int __IPHONE_7_0() {\n-        return (int)70000L;\n-    }\n-    public static int __IPHONE_7_1() {\n-        return (int)70100L;\n-    }\n-    public static int __IPHONE_8_0() {\n-        return (int)80000L;\n-    }\n-    public static int __IPHONE_8_1() {\n-        return (int)80100L;\n-    }\n-    public static int __IPHONE_8_2() {\n-        return (int)80200L;\n-    }\n-    public static int __IPHONE_8_3() {\n-        return (int)80300L;\n-    }\n-    public static int __IPHONE_8_4() {\n-        return (int)80400L;\n-    }\n-    public static int __IPHONE_9_0() {\n-        return (int)90000L;\n-    }\n-    public static int __IPHONE_9_1() {\n-        return (int)90100L;\n-    }\n-    public static int __IPHONE_9_2() {\n-        return (int)90200L;\n-    }\n-    public static int __IPHONE_9_3() {\n-        return (int)90300L;\n-    }\n-    public static int __IPHONE_10_0() {\n-        return (int)100000L;\n-    }\n-    public static int __IPHONE_10_1() {\n-        return (int)100100L;\n-    }\n-    public static int __IPHONE_10_2() {\n-        return (int)100200L;\n-    }\n-    public static int __IPHONE_10_3() {\n-        return (int)100300L;\n-    }\n-    public static int __IPHONE_11_0() {\n-        return (int)110000L;\n-    }\n-    public static int __IPHONE_11_1() {\n-        return (int)110100L;\n-    }\n-    public static int __IPHONE_11_2() {\n-        return (int)110200L;\n-    }\n-    public static int __IPHONE_11_3() {\n-        return (int)110300L;\n-    }\n-    public static int __IPHONE_11_4() {\n-        return (int)110400L;\n-    }\n-    public static int __IPHONE_12_0() {\n-        return (int)120000L;\n-    }\n-    public static int __IPHONE_12_1() {\n-        return (int)120100L;\n-    }\n-    public static int __IPHONE_12_2() {\n-        return (int)120200L;\n-    }\n-    public static int __IPHONE_12_3() {\n-        return (int)120300L;\n-    }\n-    public static int __IPHONE_12_4() {\n-        return (int)120400L;\n-    }\n-    public static int __IPHONE_13_0() {\n-        return (int)130000L;\n-    }\n-    public static int __IPHONE_13_1() {\n-        return (int)130100L;\n-    }\n-    public static int __IPHONE_13_2() {\n-        return (int)130200L;\n-    }\n-    public static int __IPHONE_13_3() {\n-        return (int)130300L;\n-    }\n-    public static int __IPHONE_13_4() {\n-        return (int)130400L;\n-    }\n-    public static int __IPHONE_13_5() {\n-        return (int)130500L;\n-    }\n-    public static int __IPHONE_13_6() {\n-        return (int)130600L;\n-    }\n-    public static int __IPHONE_13_7() {\n-        return (int)130700L;\n-    }\n-    public static int __IPHONE_14_0() {\n-        return (int)140000L;\n-    }\n-    public static int __IPHONE_14_1() {\n-        return (int)140100L;\n-    }\n-    public static int __IPHONE_14_2() {\n-        return (int)140200L;\n-    }\n-    public static int __IPHONE_14_3() {\n-        return (int)140300L;\n-    }\n-    public static int __TVOS_9_0() {\n-        return (int)90000L;\n-    }\n-    public static int __TVOS_9_1() {\n-        return (int)90100L;\n-    }\n-    public static int __TVOS_9_2() {\n-        return (int)90200L;\n-    }\n-    public static int __TVOS_10_0() {\n-        return (int)100000L;\n-    }\n-    public static int __TVOS_10_0_1() {\n-        return (int)100001L;\n-    }\n-    public static int __TVOS_10_1() {\n-        return (int)100100L;\n-    }\n-    public static int __TVOS_10_2() {\n-        return (int)100200L;\n-    }\n-    public static int __TVOS_11_0() {\n-        return (int)110000L;\n-    }\n-    public static int __TVOS_11_1() {\n-        return (int)110100L;\n-    }\n-    public static int __TVOS_11_2() {\n-        return (int)110200L;\n-    }\n-    public static int __TVOS_11_3() {\n-        return (int)110300L;\n-    }\n-    public static int __TVOS_11_4() {\n-        return (int)110400L;\n-    }\n-    public static int __TVOS_12_0() {\n-        return (int)120000L;\n-    }\n-    public static int __TVOS_12_1() {\n-        return (int)120100L;\n-    }\n-    public static int __TVOS_12_2() {\n-        return (int)120200L;\n-    }\n-    public static int __TVOS_12_3() {\n-        return (int)120300L;\n-    }\n-    public static int __TVOS_12_4() {\n-        return (int)120400L;\n-    }\n-    public static int __TVOS_13_0() {\n-        return (int)130000L;\n-    }\n-    public static int __TVOS_13_2() {\n-        return (int)130200L;\n-    }\n-    public static int __TVOS_13_3() {\n-        return (int)130300L;\n-    }\n-    public static int __TVOS_13_4() {\n-        return (int)130400L;\n-    }\n-    public static int __TVOS_14_0() {\n-        return (int)140000L;\n-    }\n-    public static int __TVOS_14_1() {\n-        return (int)140100L;\n-    }\n-    public static int __TVOS_14_2() {\n-        return (int)140200L;\n-    }\n-    public static int __TVOS_14_3() {\n-        return (int)140300L;\n-    }\n-    public static int __WATCHOS_1_0() {\n-        return (int)10000L;\n-    }\n-    public static int __WATCHOS_2_0() {\n-        return (int)20000L;\n-    }\n-    public static int __WATCHOS_2_1() {\n-        return (int)20100L;\n-    }\n-    public static int __WATCHOS_2_2() {\n-        return (int)20200L;\n-    }\n-    public static int __WATCHOS_3_0() {\n-        return (int)30000L;\n-    }\n-    public static int __WATCHOS_3_1() {\n-        return (int)30100L;\n-    }\n-    public static int __WATCHOS_3_1_1() {\n-        return (int)30101L;\n-    }\n-    public static int __WATCHOS_3_2() {\n-        return (int)30200L;\n-    }\n-    public static int __WATCHOS_4_0() {\n-        return (int)40000L;\n-    }\n-    public static int __WATCHOS_4_1() {\n-        return (int)40100L;\n-    }\n-    public static int __WATCHOS_4_2() {\n-        return (int)40200L;\n-    }\n-    public static int __WATCHOS_4_3() {\n-        return (int)40300L;\n-    }\n-    public static int __WATCHOS_5_0() {\n-        return (int)50000L;\n-    }\n-    public static int __WATCHOS_5_1() {\n-        return (int)50100L;\n-    }\n-    public static int __WATCHOS_5_2() {\n-        return (int)50200L;\n-    }\n-    public static int __WATCHOS_5_3() {\n-        return (int)50300L;\n-    }\n-    public static int __WATCHOS_6_0() {\n-        return (int)60000L;\n-    }\n-    public static int __WATCHOS_6_1() {\n-        return (int)60100L;\n-    }\n-    public static int __WATCHOS_6_2() {\n-        return (int)60200L;\n-    }\n-    public static int __WATCHOS_7_0() {\n-        return (int)70000L;\n-    }\n-    public static int __WATCHOS_7_1() {\n-        return (int)70100L;\n-    }\n-    public static int __WATCHOS_7_2() {\n-        return (int)70200L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_0() {\n-        return (int)1000L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_1() {\n-        return (int)1010L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_2() {\n-        return (int)1020L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_3() {\n-        return (int)1030L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_4() {\n-        return (int)1040L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_5() {\n-        return (int)1050L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_6() {\n-        return (int)1060L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_7() {\n-        return (int)1070L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_8() {\n-        return (int)1080L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_9() {\n-        return (int)1090L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_10() {\n-        return (int)101000L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_10_2() {\n-        return (int)101002L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_10_3() {\n-        return (int)101003L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_11() {\n-        return (int)101100L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_11_2() {\n-        return (int)101102L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_11_3() {\n-        return (int)101103L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_11_4() {\n-        return (int)101104L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_12() {\n-        return (int)101200L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_12_1() {\n-        return (int)101201L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_12_2() {\n-        return (int)101202L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_12_4() {\n-        return (int)101204L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_13() {\n-        return (int)101300L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_13_1() {\n-        return (int)101301L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_13_2() {\n-        return (int)101302L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_13_4() {\n-        return (int)101304L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_14() {\n-        return (int)101400L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_14_1() {\n-        return (int)101401L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_14_4() {\n-        return (int)101404L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_14_6() {\n-        return (int)101406L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_15() {\n-        return (int)101500L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_15_1() {\n-        return (int)101501L;\n-    }\n-    public static int MAC_OS_X_VERSION_10_16() {\n-        return (int)101600L;\n-    }\n-    public static int MAC_OS_VERSION_11_0() {\n-        return (int)110000L;\n-    }\n-    public static int __DRIVERKIT_19_0() {\n-        return (int)190000L;\n-    }\n-    public static int __DRIVERKIT_20_0() {\n-        return (int)200000L;\n-    }\n-    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {\n-        return (int)1L;\n-    }\n-    public static int RTLD_LAZY() {\n-        return (int)1L;\n-    }\n-    public static int RTLD_NOW() {\n-        return (int)2L;\n-    }\n-    public static int RTLD_LOCAL() {\n-        return (int)4L;\n-    }\n-    public static int RTLD_GLOBAL() {\n-        return (int)8L;\n-    }\n-    public static int RTLD_NOLOAD() {\n-        return (int)16L;\n-    }\n-    public static int RTLD_NODELETE() {\n-        return (int)128L;\n-    }\n-    public static int RTLD_FIRST() {\n-        return (int)256L;\n-    }\n-    public static MethodHandle dladdr$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.dladdr$MH,\"dladdr\");\n-    }\n-    public static int dladdr ( Addressable x0,  Addressable x1) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.dladdr$MH, \"dladdr\");\n-        try {\n-            return (int)mh$.invokeExact(x0, x1);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle dlclose$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.dlclose$MH,\"dlclose\");\n-    }\n-    public static int dlclose ( Addressable __handle) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlclose$MH, \"dlclose\");\n-        try {\n-            return (int)mh$.invokeExact(__handle);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle dlerror$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.dlerror$MH,\"dlerror\");\n-    }\n-    public static MemoryAddress dlerror () {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlerror$MH, \"dlerror\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle dlopen$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.dlopen$MH,\"dlopen\");\n-    }\n-    public static MemoryAddress dlopen ( Addressable __path,  int __mode) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlopen$MH, \"dlopen\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__path, __mode);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle dlsym$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.dlsym$MH,\"dlsym\");\n-    }\n-    public static MemoryAddress dlsym ( Addressable __handle,  Addressable __symbol) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlsym$MH, \"dlsym\");\n-        try {\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__handle, __symbol);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MethodHandle dlopen_preflight$MH() {\n-        return RuntimeHelper.requireNonNull(constants$0.dlopen_preflight$MH,\"dlopen_preflight\");\n-    }\n-    public static byte dlopen_preflight ( Addressable __path) {\n-        var mh$ = RuntimeHelper.requireNonNull(constants$0.dlopen_preflight$MH, \"dlopen_preflight\");\n-        try {\n-            return (byte)mh$.invokeExact(__path);\n-        } catch (Throwable ex$) {\n-            throw new AssertionError(\"should not reach here\", ex$);\n-        }\n-    }\n-    public static MemorySegment __DARWIN_SUF_64_BIT_INO_T() {\n-        return constants$1.__DARWIN_SUF_64_BIT_INO_T$SEGMENT;\n-    }\n-    public static MemorySegment __DARWIN_SUF_1050() {\n-        return constants$1.__DARWIN_SUF_1050$SEGMENT;\n-    }\n-    public static MemorySegment __DARWIN_SUF_EXTSN() {\n-        return constants$1.__DARWIN_SUF_EXTSN$SEGMENT;\n-    }\n-    public static long __DARWIN_C_ANSI() {\n-        return 4096L;\n-    }\n-    public static long __DARWIN_C_FULL() {\n-        return 900000L;\n-    }\n-    public static long __DARWIN_C_LEVEL() {\n-        return 900000L;\n-    }\n-    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {\n-        return (int)101500L;\n-    }\n-    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {\n-        return (int)110100L;\n-    }\n-    public static MemoryAddress RTLD_NEXT() {\n-        return constants$1.RTLD_NEXT$ADDR;\n-    }\n-    public static MemoryAddress RTLD_DEFAULT() {\n-        return constants$1.RTLD_DEFAULT$ADDR;\n-    }\n-    public static MemoryAddress RTLD_SELF() {\n-        return constants$1.RTLD_SELF$ADDR;\n-    }\n-    public static MemoryAddress RTLD_MAIN_ONLY() {\n-        return constants$2.RTLD_MAIN_ONLY$ADDR;\n-    }\n-}\n-\n-\n","filename":"samples\/libjimage\/org\/unix\/dlfcn_h.java","additions":0,"deletions":701,"binary":false,"changes":701,"status":"deleted"},{"patch":"@@ -3,1 +3,1 @@\n-   --add-modules jdk.incubator.foreign \\\n+   --enable-preview --source=19 \\\n","filename":"samples\/libjimage\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -36,1 +36,1 @@\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -43,2 +43,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n+        try (var session = MemorySession.openConfined()) {\n@@ -48,1 +47,1 @@\n-            var pids = allocator.allocateArray(C_INT, numPids);\n+            var pids = session.allocateArray(C_INT, numPids);\n@@ -54,1 +53,1 @@\n-            var nameBuf = allocator.allocateArray(C_CHAR, NAME_BUF_MAX);\n+            var nameBuf = session.allocateArray(C_CHAR, NAME_BUF_MAX);\n","filename":"samples\/libproc\/LibprocMain.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --add-modules jdk.incubator.foreign org\/unix\/*.java\n+javac --enable-preview --source=19 org\/unix\/*.java\n","filename":"samples\/libproc\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --add-modules jdk.incubator.foreign \\\n+   --enable-preview --source=19 \\\n","filename":"samples\/libproc\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.incubator.foreign.*;\n+import java.lang.foreign.*;\n@@ -34,1 +34,1 @@\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -50,4 +50,3 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n-            var colno = allocator.allocateArray(C_INT, Ncol);\n-            var row = allocator.allocateArray(C_DOUBLE, Ncol);\n+        try (var session = MemorySession.openConfined()) {\n+            var colno = session.allocateArray(C_INT, Ncol);\n+            var row = session.allocateArray(C_DOUBLE, Ncol);\n","filename":"samples\/lp_solve\/LpSolveDemo.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-javac --add-modules jdk.incubator.foreign net\/sourceforge\/lpsolve\/*.java\n+javac --enable-preview --source=19 net\/sourceforge\/lpsolve\/*.java\n","filename":"samples\/lp_solve\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --add-modules jdk.incubator.foreign \\\n+   --source=19 --enable-preview \\\n","filename":"samples\/lp_solve\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --add-modules jdk.incubator.foreign opengl\/*.java\n+javac --enable-preview --source=19 opengl\/*.java\n","filename":"samples\/opengl\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,2 @@\n-java -XstartOnFirstThread --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java -XstartOnFirstThread --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n","filename":"samples\/opengl\/run.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -44,3 +44,2 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n-            var str = allocator.allocateUtf8String(script);\n+        try (var session = MemorySession.openConfined()) {\n+            var str = session.allocateUtf8String(script);\n","filename":"samples\/python3\/PythonMain.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-javac --add-modules jdk.incubator.foreign org\/python\/*.java\n+javac --enable-preview --source=19 org\/python\/*.java\n","filename":"samples\/python3\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,2 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n","filename":"samples\/python3\/run.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -39,3 +39,2 @@\n-       try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n-            var url = allocator.allocateUtf8String(\"name? \");\n+       try (var session = MemorySession.openConfined()) {\n+            var url = session.allocateUtf8String(\"name? \");\n","filename":"samples\/readline\/Readline.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-javac --add-modules jdk.incubator.foreign org\/unix\/*.java\n+javac --enable-preview --source=19 org\/unix\/*.java\n","filename":"samples\/readline\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,3 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign -Djava.library.path=\/usr\/local\/opt\/readline\/lib\/ Readline.java\n+java --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n+    -Djava.library.path=\/usr\/local\/opt\/readline\/lib\/ Readline.java\n","filename":"samples\/readline\/run.sh","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,4 +32,4 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -37,1 +37,1 @@\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -42,2 +42,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n+        try (var session = MemorySession.openConfined()) {\n@@ -45,1 +44,1 @@\n-            var errMsgPtrPtr = allocator.allocate(C_POINTER);\n+            var errMsgPtrPtr = session.allocate(C_POINTER);\n@@ -48,1 +47,1 @@\n-            var dbPtrPtr = allocator.allocate(C_POINTER);\n+            var dbPtrPtr = session.allocate(C_POINTER);\n@@ -50,1 +49,1 @@\n-            int rc = sqlite3_open(allocator.allocateUtf8String(\"employee.db\"), dbPtrPtr);\n+            int rc = sqlite3_open(session.allocateUtf8String(\"employee.db\"), dbPtrPtr);\n@@ -62,1 +61,1 @@\n-            var sql = allocator.allocateUtf8String(\n+            var sql = session.allocateUtf8String(\n@@ -79,1 +78,1 @@\n-            sql = allocator.allocateUtf8String(\n+            sql = session.allocateUtf8String(\n@@ -100,2 +99,2 @@\n-                var argv_seg = MemorySegment.ofAddress(argv, C_POINTER.byteSize() * argc, scope);\n-                var columnNames_seg = MemorySegment.ofAddress(columnNames, C_POINTER.byteSize() * argc, scope);\n+                var argv_seg = MemorySegment.ofAddress(argv, C_POINTER.byteSize() * argc, session);\n+                var columnNames_seg = MemorySegment.ofAddress(columnNames, C_POINTER.byteSize() * argc, session);\n@@ -109,1 +108,1 @@\n-            }, scope);\n+            }, session);\n@@ -112,1 +111,1 @@\n-            sql = allocator.allocateUtf8String(\"SELECT * FROM EMPLOYEE\");\n+            sql = session.allocateUtf8String(\"SELECT * FROM EMPLOYEE\");\n","filename":"samples\/sqlite\/SqliteMain.java","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-javac --add-modules jdk.incubator.foreign org\/sqlite\/*.java\n+javac --enable-preview --source=19 org\/sqlite\/*.java\n","filename":"samples\/sqlite\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-   --add-modules jdk.incubator.foreign \\\n+   --enable-preview --source=19 \\\n","filename":"samples\/sqlite\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -56,3 +56,2 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n-            var str = allocator.allocateUtf8String(script);\n+        try (var session = MemorySession.openConfined()) {\n+            var str = session.allocateUtf8String(script);\n","filename":"samples\/tcl\/TCLMain.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --add-modules jdk.incubator.foreign org\/tcl\/*.java\n+javac --enable-preview --source=19 org\/tcl\/*.java\n","filename":"samples\/tcl\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,2 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n","filename":"samples\/tcl\/run.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.MemoryAddress.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.MemoryAddress.*;\n@@ -48,1 +48,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n+        try (var scope = MemorySession.openConfined()) {\n","filename":"samples\/tensorflow\/TensorflowLoadSavedModel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-javac --add-modules jdk.incubator.foreign org\/tensorflow\/*.java\n+javac --enable-preview --source=19 org\/tensorflow\/*.java\n","filename":"samples\/tensorflow\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,2 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign \\\n+java --enable-native-access=ALL-UNNAMED \\\n+   --enable-preview --source=19 \\\n","filename":"samples\/tensorflow\/loadsavedmodel.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import jdk.incubator.foreign.*;\n+import static java.lang.foreign.Linker.*;\n+import java.lang.foreign.*;\n@@ -39,4 +39,3 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            var now = allocator.allocate(C_LONG, System.currentTimeMillis() \/ 1000);\n-            MemorySegment time = tm.allocate(scope);\n+        try (var session = MemorySession.openConfined()) {\n+            var now = session.allocate(C_LONG, System.currentTimeMillis() \/ 1000);\n+            MemorySegment time = tm.allocate(session);\n","filename":"samples\/time\/PanamaTime.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-javac --add-modules jdk.incubator.foreign org\/unix\/*.java\n+javac --enable-preview --source=19 org\/unix\/*.java\n","filename":"samples\/time\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,3 @@\n-java --enable-native-access=ALL-UNNAMED --add-modules jdk.incubator.foreign PanamaTime.java\n+java --enable-native-access=ALL-UNNAMED \\\n+    --enable-preview --source=19 \\\n+    PanamaTime.java\n","filename":"samples\/time\/run.sh","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-    requires transitive jdk.incubator.foreign;\n","filename":"src\/main\/java\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/Declaration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/Type.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,5 +29,4 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeSymbol;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -122,3 +121,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(\n-                    SegmentAllocator.nativeAllocator(scope))) != 0) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n+            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(scope)) != 0) {\n@@ -187,2 +185,2 @@\n-        private static final NativeSymbol callback = CXCursorVisitor.allocate((c, p, d) -> {\n-            MemorySegment copy = MemorySegment.allocateNative(c.byteSize(), ResourceScope.newImplicitScope());\n+        private static final MemorySegment callback = CXCursorVisitor.allocate((c, p, d) -> {\n+            MemorySegment copy = MemorySegment.allocateNative(c.byteSize(), MemorySession.openImplicit());\n@@ -193,1 +191,1 @@\n-        }, ResourceScope.newImplicitScope());\n+        }, MemorySession.openImplicit());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Diagnostic.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,3 +29,2 @@\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/EvalResult.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,6 +29,4 @@\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryHandles;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySession;\n@@ -85,1 +83,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,7 +28,7 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.Addressable;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -53,1 +53,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n@@ -63,1 +63,1 @@\n-                CLinker linker = CLinker.systemCLinker();\n+                Linker linker = Linker.nativeLinker();\n@@ -65,1 +65,1 @@\n-                MethodHandle PUT_ENV = linker.downcallHandle(linker.lookup(putenv).get(),\n+                MethodHandle PUT_ENV = linker.downcallHandle(linker.defaultLookup().lookup(putenv).get(),\n@@ -97,1 +97,1 @@\n-            MemorySegment.allocateNative(CXString.sizeof(), 8, ResourceScope.newImplicitScope()));\n+            MemorySegment.allocateNative(CXString.sizeof(), 8, MemorySession.openImplicit()));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/LibClang.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryAddress;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/PrintingPolicy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.Addressable;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -58,1 +58,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n+        try (var scope = MemorySession.openConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/SourceLocation.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/SourceRange.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,5 +29,5 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -73,2 +73,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n+        try (MemorySession scope = MemorySession.openConfined()) {\n+            var allocator = scope;\n@@ -95,1 +95,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -137,1 +137,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -177,1 +177,1 @@\n-            return MemorySegment.ofAddress(p, CXToken.$LAYOUT().byteSize(), ResourceScope.newConfinedScope());\n+            return MemorySegment.ofAddress(p, CXToken.$LAYOUT().byteSize(), MemorySession.openConfined());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -104,2 +104,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n+        try (MemorySession scope = MemorySession.openConfined()) {\n+            var allocator = scope;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -37,3 +37,3 @@\n-    int apply(jdk.incubator.foreign.MemorySegment cursor, jdk.incubator.foreign.MemorySegment parent, jdk.incubator.foreign.MemoryAddress client_data);\n-    static NativeSymbol allocate(CXCursorVisitor fi, ResourceScope scope) {\n-        return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$13.CXCursorVisitor$FUNC, \"(Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/MemoryAddress;)I\", scope);\n+    int apply(java.lang.foreign.MemorySegment cursor, java.lang.foreign.MemorySegment parent, java.lang.foreign.MemoryAddress client_data);\n+    static MemorySegment allocate(CXCursorVisitor fi, MemorySession scope) {\n+        return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$13.CXCursorVisitor$FUNC, \"(Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/MemoryAddress;)I\", scope);\n@@ -41,3 +41,3 @@\n-    static CXCursorVisitor ofAddress(MemoryAddress addr, ResourceScope scope) {\n-        NativeSymbol symbol = NativeSymbol.ofAddress(\"CXCursorVisitor::\" + Long.toHexString(addr.toRawLongValue()), addr, scope);\n-return (jdk.incubator.foreign.MemorySegment _cursor, jdk.incubator.foreign.MemorySegment _parent, jdk.incubator.foreign.MemoryAddress _client_data) -> {\n+    static CXCursorVisitor ofAddress(MemoryAddress addr, MemorySession scope) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+        return (java.lang.foreign.MemorySegment _cursor, java.lang.foreign.MemorySegment _parent, java.lang.foreign.MemoryAddress _client_data) -> {\n@@ -45,1 +45,1 @@\n-                return (int)constants$13.CXCursorVisitor$MH.invokeExact(symbol, _cursor, _parent, (jdk.incubator.foreign.Addressable)_client_data);\n+                return (int)constants$13.CXCursorVisitor$MH.invokeExact((Addressable)symbol, _cursor, _parent, (java.lang.foreign.Addressable)_client_data);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -50,1 +50,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg);\n+        return (java.lang.foreign.MemoryAddress)CXString.data$VH.get(seg);\n@@ -56,1 +56,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXString.data$VH.get(seg.asSlice(index*sizeof()));\n+        return (java.lang.foreign.MemoryAddress)CXString.data$VH.get(seg.asSlice(index*sizeof()));\n@@ -82,5 +82,1 @@\n-    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n-    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n-    }\n-    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -52,1 +52,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg);\n+        return (java.lang.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg);\n@@ -58,1 +58,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg.asSlice(index*sizeof()));\n+        return (java.lang.foreign.MemoryAddress)CXToken.ptr_data$VH.get(seg.asSlice(index*sizeof()));\n@@ -68,5 +68,1 @@\n-    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n-    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n-    }\n-    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -69,5 +69,1 @@\n-    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n-    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n-    }\n-    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -50,1 +50,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg);\n+        return (java.lang.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg);\n@@ -56,1 +56,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg.asSlice(index*sizeof()));\n+        return (java.lang.foreign.MemoryAddress)CXUnsavedFile.Filename$VH.get(seg.asSlice(index*sizeof()));\n@@ -66,1 +66,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg);\n+        return (java.lang.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg);\n@@ -72,1 +72,1 @@\n-        return (jdk.incubator.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg.asSlice(index*sizeof()));\n+        return (java.lang.foreign.MemoryAddress)CXUnsavedFile.Contents$VH.get(seg.asSlice(index*sizeof()));\n@@ -98,5 +98,1 @@\n-    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\n-    public static MemorySegment allocateArray(int len, ResourceScope scope) {\n-        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\n-    }\n-    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Constants$root.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -67,1 +67,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(string);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);\n@@ -121,1 +121,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics);\n@@ -143,1 +143,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, SFile);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, SFile);\n@@ -148,3 +148,0 @@\n-    public static MemorySegment clang_getFileName ( ResourceScope scope,  Addressable SFile) {\n-        return clang_getFileName(SegmentAllocator.nativeAllocator(scope), SFile);\n-    }\n@@ -157,1 +154,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -162,3 +159,0 @@\n-    public static MemorySegment clang_getNullLocation ( ResourceScope scope) {\n-        return clang_getNullLocation(SegmentAllocator.nativeAllocator(scope));\n-    }\n@@ -182,1 +176,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, tu, file, line, column);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, tu, file, line, column);\n@@ -187,3 +181,0 @@\n-    public static MemorySegment clang_getLocation ( ResourceScope scope,  Addressable tu,  Addressable file,  int line,  int column) {\n-        return clang_getLocation(SegmentAllocator.nativeAllocator(scope), tu, file, line, column);\n-    }\n@@ -196,1 +187,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, tu, file, offset);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, tu, file, offset);\n@@ -201,3 +192,0 @@\n-    public static MemorySegment clang_getLocationForOffset ( ResourceScope scope,  Addressable tu,  Addressable file,  int offset) {\n-        return clang_getLocationForOffset(SegmentAllocator.nativeAllocator(scope), tu, file, offset);\n-    }\n@@ -276,1 +264,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n@@ -281,3 +269,0 @@\n-    public static MemorySegment clang_getRangeStart ( ResourceScope scope,  MemorySegment range) {\n-        return clang_getRangeStart(SegmentAllocator.nativeAllocator(scope), range);\n-    }\n@@ -290,1 +275,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, range);\n@@ -295,3 +280,0 @@\n-    public static MemorySegment clang_getRangeEnd ( ResourceScope scope,  MemorySegment range) {\n-        return clang_getRangeEnd(SegmentAllocator.nativeAllocator(scope), range);\n-    }\n@@ -319,1 +301,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(D);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(D);\n@@ -341,1 +323,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Unit, Index);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(Unit, Index);\n@@ -381,1 +363,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic, Options);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, Diagnostic, Options);\n@@ -386,3 +368,0 @@\n-    public static MemorySegment clang_formatDiagnostic ( ResourceScope scope,  Addressable Diagnostic,  int Options) {\n-        return clang_formatDiagnostic(SegmentAllocator.nativeAllocator(scope), Diagnostic, Options);\n-    }\n@@ -417,1 +396,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -422,3 +401,0 @@\n-    public static MemorySegment clang_getDiagnosticLocation ( ResourceScope scope,  Addressable x1) {\n-        return clang_getDiagnosticLocation(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -431,1 +407,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -436,3 +412,0 @@\n-    public static MemorySegment clang_getDiagnosticSpelling ( ResourceScope scope,  Addressable x1) {\n-        return clang_getDiagnosticSpelling(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -496,1 +469,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(CIdx, source_filename, command_line_args, num_command_line_args, unsaved_files, num_unsaved_files, options);\n@@ -1357,1 +1330,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -1362,3 +1335,0 @@\n-    public static MemorySegment clang_getNullCursor ( ResourceScope scope) {\n-        return clang_getNullCursor(SegmentAllocator.nativeAllocator(scope));\n-    }\n@@ -1371,1 +1341,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -1376,3 +1346,0 @@\n-    public static MemorySegment clang_getTranslationUnitCursor ( ResourceScope scope,  Addressable x1) {\n-        return clang_getTranslationUnitCursor(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -1485,1 +1452,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);\n@@ -1496,1 +1463,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -1501,3 +1468,0 @@\n-    public static MemorySegment clang_getCursorLocation ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorLocation(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -1510,1 +1474,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -1515,3 +1479,0 @@\n-    public static MemorySegment clang_getCursorExtent ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorExtent(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -1938,1 +1899,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -1943,3 +1904,0 @@\n-    public static MemorySegment clang_getCursorType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getCursorType(SegmentAllocator.nativeAllocator(scope), C);\n-    }\n@@ -1952,1 +1910,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n@@ -1957,3 +1915,0 @@\n-    public static MemorySegment clang_getTypeSpelling ( ResourceScope scope,  MemorySegment CT) {\n-        return clang_getTypeSpelling(SegmentAllocator.nativeAllocator(scope), CT);\n-    }\n@@ -1966,1 +1921,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -1971,3 +1926,0 @@\n-    public static MemorySegment clang_getTypedefDeclUnderlyingType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getTypedefDeclUnderlyingType(SegmentAllocator.nativeAllocator(scope), C);\n-    }\n@@ -1980,1 +1932,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -1985,3 +1937,0 @@\n-    public static MemorySegment clang_getEnumDeclIntegerType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getEnumDeclIntegerType(SegmentAllocator.nativeAllocator(scope), C);\n-    }\n@@ -2038,1 +1987,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C, i);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C, i);\n@@ -2043,3 +1992,0 @@\n-    public static MemorySegment clang_Cursor_getArgument ( ResourceScope scope,  MemorySegment C,  int i) {\n-        return clang_Cursor_getArgument(SegmentAllocator.nativeAllocator(scope), C, i);\n-    }\n@@ -2063,1 +2009,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -2068,3 +2014,0 @@\n-    public static MemorySegment clang_getCanonicalType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getCanonicalType(SegmentAllocator.nativeAllocator(scope), T);\n-    }\n@@ -2110,1 +2053,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, CT);\n@@ -2115,3 +2058,0 @@\n-    public static MemorySegment clang_getTypedefName ( ResourceScope scope,  MemorySegment CT) {\n-        return clang_getTypedefName(SegmentAllocator.nativeAllocator(scope), CT);\n-    }\n@@ -2124,1 +2064,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -2129,3 +2069,0 @@\n-    public static MemorySegment clang_getPointeeType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getPointeeType(SegmentAllocator.nativeAllocator(scope), T);\n-    }\n@@ -2138,1 +2075,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -2143,3 +2080,0 @@\n-    public static MemorySegment clang_getTypeDeclaration ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getTypeDeclaration(SegmentAllocator.nativeAllocator(scope), T);\n-    }\n@@ -2152,1 +2086,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, K);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, K);\n@@ -2157,3 +2091,0 @@\n-    public static MemorySegment clang_getTypeKindSpelling ( ResourceScope scope,  int K) {\n-        return clang_getTypeKindSpelling(SegmentAllocator.nativeAllocator(scope), K);\n-    }\n@@ -2177,1 +2108,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -2182,3 +2113,0 @@\n-    public static MemorySegment clang_getResultType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getResultType(SegmentAllocator.nativeAllocator(scope), T);\n-    }\n@@ -2202,1 +2130,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T, i);\n@@ -2207,3 +2135,0 @@\n-    public static MemorySegment clang_getArgType ( ResourceScope scope,  MemorySegment T,  int i) {\n-        return clang_getArgType(SegmentAllocator.nativeAllocator(scope), T, i);\n-    }\n@@ -2227,1 +2152,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, C);\n@@ -2232,3 +2157,0 @@\n-    public static MemorySegment clang_getCursorResultType ( ResourceScope scope,  MemorySegment C) {\n-        return clang_getCursorResultType(SegmentAllocator.nativeAllocator(scope), C);\n-    }\n@@ -2241,1 +2163,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -2246,3 +2168,0 @@\n-    public static MemorySegment clang_getElementType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getElementType(SegmentAllocator.nativeAllocator(scope), T);\n-    }\n@@ -2266,1 +2185,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, T);\n@@ -2271,3 +2190,0 @@\n-    public static MemorySegment clang_getArrayElementType ( ResourceScope scope,  MemorySegment T) {\n-        return clang_getArrayElementType(SegmentAllocator.nativeAllocator(scope), T);\n-    }\n@@ -2396,1 +2312,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -2401,3 +2317,0 @@\n-    public static MemorySegment clang_getCursorUSR ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorUSR(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -2410,1 +2323,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -2415,3 +2328,0 @@\n-    public static MemorySegment clang_getCursorSpelling ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorSpelling(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -2527,1 +2437,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(x0);\n@@ -2549,1 +2459,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Cursor, Policy);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, Cursor, Policy);\n@@ -2554,3 +2464,0 @@\n-    public static MemorySegment clang_getCursorPrettyPrinted ( ResourceScope scope,  MemorySegment Cursor,  Addressable Policy) {\n-        return clang_getCursorPrettyPrinted(SegmentAllocator.nativeAllocator(scope), Cursor, Policy);\n-    }\n@@ -2563,1 +2470,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -2568,3 +2475,0 @@\n-    public static MemorySegment clang_getCursorDisplayName ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorDisplayName(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -2577,1 +2481,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -2582,3 +2486,0 @@\n-    public static MemorySegment clang_getCursorReferenced ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorReferenced(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -2591,1 +2492,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -2596,3 +2497,0 @@\n-    public static MemorySegment clang_getCursorDefinition ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_getCursorDefinition(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -2627,1 +2525,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1);\n@@ -2632,3 +2530,0 @@\n-    public static MemorySegment clang_Cursor_getMangling ( ResourceScope scope,  MemorySegment x1) {\n-        return clang_Cursor_getMangling(SegmentAllocator.nativeAllocator(scope), x1);\n-    }\n@@ -2667,1 +2562,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n@@ -2672,3 +2567,0 @@\n-    public static MemorySegment clang_getTokenSpelling ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n-        return clang_getTokenSpelling(SegmentAllocator.nativeAllocator(scope), x1, x2);\n-    }\n@@ -2681,1 +2573,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n@@ -2686,3 +2578,0 @@\n-    public static MemorySegment clang_getTokenLocation ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n-        return clang_getTokenLocation(SegmentAllocator.nativeAllocator(scope), x1, x2);\n-    }\n@@ -2695,1 +2584,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, x1, x2);\n@@ -2700,3 +2589,0 @@\n-    public static MemorySegment clang_getTokenExtent ( ResourceScope scope,  Addressable x1,  MemorySegment x2) {\n-        return clang_getTokenExtent(SegmentAllocator.nativeAllocator(scope), x1, x2);\n-    }\n@@ -2731,1 +2617,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, Kind);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, Kind);\n@@ -2736,3 +2622,0 @@\n-    public static MemorySegment clang_getCursorKindSpelling ( ResourceScope scope,  int Kind) {\n-        return clang_getCursorKindSpelling(SegmentAllocator.nativeAllocator(scope), Kind);\n-    }\n@@ -2745,1 +2628,1 @@\n-            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator);\n+            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);\n@@ -2750,3 +2633,0 @@\n-    public static MemorySegment clang_getClangVersion ( ResourceScope scope) {\n-        return clang_getClangVersion(SegmentAllocator.nativeAllocator(scope));\n-    }\n@@ -2770,1 +2650,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(C);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(C);\n@@ -2847,1 +2727,1 @@\n-            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(E);\n+            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(E);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Index_h.java","additions":51,"deletions":171,"binary":false,"changes":222,"status":"modified"},{"patch":"@@ -29,12 +29,11 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.NativeSymbol;\n-import jdk.incubator.foreign.SymbolLookup;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.Addressable;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.ValueLayout;\n@@ -51,2 +50,2 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import static java.lang.foreign.Linker.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -57,1 +56,1 @@\n-    private final static CLinker LINKER = CLinker.systemCLinker();\n+    private final static Linker LINKER = Linker.nativeLinker();\n@@ -63,1 +62,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n@@ -70,2 +69,1 @@\n-        SymbolLookup loaderLookup = SymbolLookup.loaderLookup();\n-        SYMBOL_LOOKUP = name -> loaderLookup.lookup(name).or(() -> LINKER.lookup(name));\n+        SYMBOL_LOOKUP = name -> SymbolLookup.loaderLookup().lookup(name).or(() -> LINKER.defaultLookup().lookup(name));\n@@ -84,1 +82,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), MemorySession.openShared())).orElse(null);\n@@ -103,1 +101,1 @@\n-    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, ResourceScope scope) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, MemorySession scope) {\n@@ -114,1 +112,1 @@\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, ResourceScope scope) {\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession scope) {\n@@ -122,1 +120,1 @@\n-        private final NativeSymbol symbol;\n+        private final MemorySegment symbol;\n@@ -125,1 +123,1 @@\n-        private VarargsInvoker(NativeSymbol symbol, FunctionDescriptor function) {\n+        private VarargsInvoker(MemorySegment symbol, FunctionDescriptor function) {\n@@ -138,1 +136,1 @@\n-        static MethodHandle make(NativeSymbol symbol, FunctionDescriptor function) {\n+        static MethodHandle make(MemorySegment symbol, FunctionDescriptor function) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$0.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$1.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$10.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$11.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$12.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$13.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$14.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$15.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$16.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$17.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$18.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$2.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$3.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$4.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$5.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$6.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$7.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$8.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import jdk.incubator.foreign.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import java.lang.foreign.*;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/constants$9.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -191,2 +191,2 @@\n-            append(\"import jdk.incubator.foreign.*;\\n\");\n-            append(\"import static jdk.incubator.foreign.ValueLayout.*;\\n\");\n+            append(\"import java.lang.foreign.*;\\n\");\n+            append(\"import static java.lang.foreign.ValueLayout.*;\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ClassSourceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,7 +28,7 @@\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.SequenceLayout;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -274,3 +274,1 @@\n-            if (seq.elementCount().isPresent()) {\n-                append(seq.elementCount().getAsLong() + \", \");\n-            }\n+            append(seq.elementCount() + \", \");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ConstantBuilder.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.incubator.foreign.*;\n+import java.lang.foreign.*;\n@@ -51,2 +51,2 @@\n-        this.fiType = CLinker.upcallType(descriptor);\n-        this.downcallType = CLinker.downcallType(descriptor);\n+        this.fiType = Linker.upcallType(descriptor);\n+        this.downcallType = Linker.downcallType(descriptor);\n@@ -95,1 +95,1 @@\n-            append(MEMBER_MODS + \" NativeSymbol allocate(\" + className() + \" fi, ResourceScope scope) {\\n\");\n+            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, MemorySession scope) {\\n\");\n@@ -113,1 +113,1 @@\n-            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemoryAddress addr, ResourceScope scope) {\\n\");\n+            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemoryAddress addr, MemorySession scope) {\\n\");\n@@ -116,2 +116,3 @@\n-            append(\"NativeSymbol symbol = NativeSymbol.ofAddress(\");\n-            append(\"\\\"\" + className() + \"::\\\" + Long.toHexString(addr.toRawLongValue()), addr, scope);\\n\");\n+            append(\"MemorySegment symbol = MemorySegment.ofAddress(\");\n+            append(\"addr, 0, scope);\\n\");\n+            indent();\n@@ -139,1 +140,1 @@\n-            append(mhConstant.accessExpression() + \".invokeExact(symbol\");\n+            append(mhConstant.accessExpression() + \".invokeExact((Addressable)symbol\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.incubator.foreign.FunctionDescriptor;\n+import java.lang.foreign.FunctionDescriptor;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceScanner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,10 +27,10 @@\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.SequenceLayout;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -71,1 +71,2 @@\n-                constantBuilder.addSegment(javaName, nativeName, layout)\n+                if (layout.byteSize() > 0) {\n+                    constantBuilder.addSegment(javaName, nativeName, layout)\n@@ -73,0 +74,1 @@\n+                }\n@@ -84,0 +86,1 @@\n+\n@@ -96,1 +99,1 @@\n-            MethodType downcallType = CLinker.downcallType(descriptor);\n+            MethodType downcallType = Linker.downcallType(descriptor);\n@@ -98,4 +101,0 @@\n-            if (downcallType.returnType().equals(MemorySegment.class)) {\n-                \/\/ emit scoped overload\n-                emitFunctionWrapperScopedOverload(javaName, downcallType, isVarargs, parameterNames);\n-            }\n@@ -159,25 +158,0 @@\n-    private void emitFunctionWrapperScopedOverload(String javaName, MethodType declType, boolean isVarargs, List<String> parameterNames) {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS + \" \");\n-        List<String> paramNames = new ArrayList<>(parameterNames);\n-        paramNames.add(0, \"scope\");\n-        List<String> pExprs = emitFunctionWrapperDecl(javaName,\n-                declType.insertParameterTypes(0, ResourceScope.class),\n-                isVarargs,\n-        paramNames);\n-        String param = pExprs.remove(0);\n-        pExprs.add(0, \"SegmentAllocator.nativeAllocator(\" + param + \")\");\n-        append(\" {\\n\");\n-        incrAlign();\n-        indent();\n-        if (!declType.returnType().equals(void.class)) {\n-            append(\"return \");\n-        }\n-        append(javaName + \"(\" + String.join(\", \", pExprs) + \");\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n-    }\n-\n@@ -215,1 +189,1 @@\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), ResourceScope.globalScope());\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), MemorySession.global());\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":16,"deletions":42,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/JavaSourceBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.incubator.foreign.*;\n+import java.lang.foreign.*;\n@@ -427,12 +427,1 @@\n-        boolean sizeAvailable;\n-        try {\n-            layout.byteSize();\n-            sizeAvailable = true;\n-        } catch (Exception ignored) {\n-            sizeAvailable = false;\n-        }\n-        if (sizeAvailable) {\n-            currentBuilder.addVar(fieldName, tree.name(), layout, Optional.ofNullable(fiName));\n-        } else {\n-            warn(\"Layout size not available for \" + fieldName);\n-        }\n+        currentBuilder.addVar(fieldName, tree.name(), layout, Optional.ofNullable(fiName));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/OutputFactory.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/PrettyPrinter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/RecordLayoutComputer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,6 +27,6 @@\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.SequenceLayout;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -94,2 +94,0 @@\n-            emitScopeAllocate();\n-            emitScopeAllocateArray();\n@@ -139,1 +137,3 @@\n-            emitSegmentGetter(javaName, nativeName, layout);\n+            if (layout.byteSize() > 0) {\n+                emitSegmentGetter(javaName, nativeName, layout);\n+            }\n@@ -157,1 +157,1 @@\n-        append(fiName + \" \" + javaName + \" (MemorySegment segment, ResourceScope scope) {\\n\");\n+        append(fiName + \" \" + javaName + \" (MemorySegment segment, MemorySession scope) {\\n\");\n@@ -257,22 +257,0 @@\n-    private void emitScopeAllocate() {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }\\n\");\n-        decrAlign();\n-    }\n-\n-    private void emitScopeAllocateArray() {\n-        incrAlign();\n-        indent();\n-        append(MEMBER_MODS);\n-        append(\" MemorySegment allocateArray(int len, ResourceScope scope) {\\n\");\n-        incrAlign();\n-        indent();\n-        append(\"return allocateArray(len, SegmentAllocator.nativeAllocator(scope));\\n\");\n-        decrAlign();\n-        indent();\n-        append(\"}\\n\");\n-        decrAlign();\n-    }\n-\n@@ -283,1 +261,1 @@\n-        append(\" MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n+        append(\" MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":11,"deletions":33,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructLayoutComputer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,5 +27,5 @@\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -41,1 +41,1 @@\n-import static jdk.incubator.foreign.ValueLayout.ADDRESS;\n+import static java.lang.foreign.ValueLayout.ADDRESS;\n@@ -445,1 +445,1 @@\n-                return MemoryLayout.sequenceLayout(elem);\n+                return MemoryLayout.sequenceLayout(0, elem);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypeImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypeMaker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnionLayoutComputer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.ValueLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnsupportedLayouts.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.VaList;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.VaList;\n+import java.lang.foreign.ValueLayout;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-                \"--add-modules\", \"jdk.incubator.foreign\",\n-                \/\/ \"--release\", \"18\",\n+                \"--enable-preview\",\n+                \"--source\", \"19\",\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Writer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,7 +4,7 @@\n-import jdk.incubator.foreign.MemoryAccess;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryCopy;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import static jdk.incubator.foreign.CLinker.*;\n+import java.lang.foreign.MemoryAccess;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryCopy;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import static java.lang.foreign.CLinker.*;\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/C-X.java.template","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3,12 +3,11 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.FunctionDescriptor;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.NativeSymbol;\n-import jdk.incubator.foreign.SymbolLookup;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.Addressable;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.ValueLayout;\n@@ -25,2 +24,2 @@\n-import static jdk.incubator.foreign.CLinker.*;\n-import static jdk.incubator.foreign.ValueLayout.*;\n+import static java.lang.foreign.Linker.*;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -31,1 +30,1 @@\n-    private final static CLinker LINKER = CLinker.systemCLinker();\n+    private final static Linker LINKER = Linker.nativeLinker();\n@@ -37,1 +36,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, ResourceScope.newImplicitScope());\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n@@ -42,1 +41,1 @@\n-        SYMBOL_LOOKUP = name -> loaderLookup.lookup(name).or(() -> LINKER.lookup(name));\n+        SYMBOL_LOOKUP = name -> loaderLookup.lookup(name).or(() -> LINKER.defaultLookup().lookup(name));\n@@ -55,1 +54,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), ResourceScope.newSharedScope())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), MemorySession.openShared())).orElse(null);\n@@ -74,1 +73,1 @@\n-    static final <Z> NativeSymbol upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, ResourceScope scope) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, MemorySession scope) {\n@@ -76,1 +75,1 @@\n-            MethodHandle handle = MH_LOOKUP.findVirtual(fi, \"apply\", CLinker.upcallType(fdesc));\n+            MethodHandle handle = MH_LOOKUP.findVirtual(fi, \"apply\", Linker.upcallType(fdesc));\n@@ -84,1 +83,1 @@\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, ResourceScope scope) {\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession scope) {\n@@ -92,1 +91,1 @@\n-        private final NativeSymbol symbol;\n+        private final MemorySegment symbol;\n@@ -95,1 +94,1 @@\n-        private VarargsInvoker(NativeSymbol symbol, FunctionDescriptor function) {\n+        private VarargsInvoker(MemorySegment symbol, FunctionDescriptor function) {\n@@ -108,1 +107,1 @@\n-        static MethodHandle make(NativeSymbol symbol, FunctionDescriptor function) {\n+        static MethodHandle make(MemorySegment symbol, FunctionDescriptor function) {\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+enablePreview=true\n","filename":"test\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n@@ -51,1 +51,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -62,1 +62,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -73,1 +73,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -83,1 +83,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -93,1 +93,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -104,1 +104,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -115,1 +115,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -125,1 +125,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -135,1 +135,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -25,3 +25,2 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySession;\n@@ -55,3 +54,2 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n-            var addr = allocator.allocate(mysize_t, 0L);\n+        try (var session = MemorySession.openConfined()) {\n+            var addr = session.allocate(mysize_t, 0L);\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -50,1 +50,1 @@\n-         try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+         try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,2 +24,1 @@\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySession;\n@@ -28,1 +27,1 @@\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemorySegment;\n@@ -32,1 +31,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n+import static java.lang.foreign.Linker.*;\n@@ -53,3 +52,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            MemorySegment s = allocator.allocate(1024);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment s = session.allocate(1024);\n@@ -57,1 +55,1 @@\n-                    allocator.allocateUtf8String(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n+                    session.allocateUtf8String(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n","filename":"test\/jtreg\/generator\/test8244959\/Test8244959.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemorySegment;\n@@ -30,1 +30,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n+import static java.lang.foreign.Linker.*;\n","filename":"test\/jtreg\/generator\/test8245003\/Test8245003.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -33,1 +33,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n+import static java.lang.foreign.Linker.*;\n@@ -55,1 +55,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -72,1 +72,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n+        try (var scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,4 +24,4 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.Addressable;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n@@ -54,1 +54,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -79,1 +79,1 @@\n-        assertTrue(!sum.scope().isAlive());\n+        assertTrue(!sum.session().isAlive());\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n-import jdk.incubator.foreign.VaList;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.VaList;\n@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemorySegment;\n@@ -33,1 +33,1 @@\n-import static jdk.incubator.foreign.CLinker.*;\n+import static java.lang.foreign.Linker.*;\n@@ -54,3 +54,2 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n-            MemorySegment s = allocator.allocate(1024);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment s = session.allocate(1024);\n@@ -62,2 +61,2 @@\n-            }, scope);\n-            my_vsprintf(s, allocator.allocateUtf8String(\"%hhd %.2f %lld %lld\"), vaList);\n+            }, session);\n+            my_vsprintf(s, session.allocateUtf8String(\"%hhd %.2f %lld %lld\"), vaList);\n","filename":"test\/jtreg\/generator\/test8252016\/Test8252016.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n-import jdk.incubator.foreign.SegmentAllocator;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n+import java.lang.foreign.SegmentAllocator;\n@@ -54,2 +54,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n-            var allocator = SegmentAllocator.nativeAllocator(scope);\n+        try (var session = MemorySession.openConfined()) {\n@@ -57,1 +56,1 @@\n-            MemorySegment seg = allocator.allocateArray(C_INT, array);\n+            MemorySegment seg = session.allocateArray(C_INT, array);\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -51,1 +51,1 @@\n-        try (var scope = ResourceScope.newConfinedScope()) {\n+        try (var scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,4 +25,3 @@\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n@@ -53,1 +52,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8253102\/LibTest8253102Test.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,3 +24,3 @@\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n@@ -51,1 +51,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -62,1 +62,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,5 +25,5 @@\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemoryLayout.PathElement;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n@@ -56,1 +56,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -67,1 +67,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -27,1 +27,1 @@\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static java.lang.foreign.MemoryAddress.NULL;\n@@ -51,1 +51,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -63,1 +63,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jtreg\/generator\/test8259473\/LibTest8259473Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -49,1 +49,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemorySession;\n@@ -46,1 +46,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,5 +24,4 @@\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemoryLayout.PathElement;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.MemorySession;\n@@ -53,1 +52,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -62,1 +61,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -73,1 +72,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-            commands.add(\"--add-modules\");\n-            commands.add(\"jdk.incubator.foreign\");\n+            commands.add(\"--source=19\");\n+            commands.add(\"--enable-preview\");\n","filename":"test\/lib\/JtregJextractSources.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemoryLayout.PathElement;\n-import jdk.incubator.foreign.ValueLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,2 +25,1 @@\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemorySegment;\n@@ -36,2 +35,2 @@\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryAddress;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryAddress;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout;\n@@ -52,1 +52,1 @@\n-                MemoryLayout.sequenceLayout(C_POINTER).withName(\"data\")\n+                MemoryLayout.sequenceLayout(0, C_POINTER).withName(\"data\")\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/IncompleteArrayTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.incubator.foreign.Addressable;\n+import java.lang.foreign.Addressable;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n+import java.lang.foreign.Addressable;\n@@ -32,3 +31,3 @@\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/RepeatedDeclsTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,3 +28,2 @@\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.GroupLayout;\n-import jdk.incubator.foreign.MemoryLayout;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248415.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.incubator.foreign.Addressable;\n+import java.lang.foreign.Addressable;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249290.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.incubator.foreign.Addressable;\n+import java.lang.foreign.Addressable;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249300.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8251943.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260705.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260717.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260929.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.incubator.foreign.MemorySegment;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261578.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,5 +25,4 @@\n-import jdk.incubator.foreign.MemoryAddress;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.NativeSymbol;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemoryAddress;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n@@ -42,1 +41,1 @@\n-import static jdk.incubator.foreign.MemoryLayout.PathElement.sequenceElement;\n+import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;\n@@ -48,1 +47,1 @@\n-    private static final VarHandle VH_bytes = MemoryLayout.sequenceLayout(C_CHAR).varHandle(sequenceElement());\n+    private static final VarHandle VH_bytes = MemoryLayout.sequenceLayout(0, C_CHAR).varHandle(sequenceElement());\n@@ -184,1 +183,1 @@\n-        try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+        try (MemorySession scope = MemorySession.openConfined()) {\n@@ -203,1 +202,1 @@\n-        checkMethod(fiClass, \"allocate\", NativeSymbol.class, fiClass, ResourceScope.class);\n+        checkMethod(fiClass, \"allocate\", MemorySegment.class, fiClass, MemorySession.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.MemorySegment;\n-import jdk.incubator.foreign.ResourceScope;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.MemorySession;\n@@ -38,1 +38,1 @@\n-import static jdk.incubator.foreign.MemoryLayout.PathElement.groupElement;\n+import static java.lang.foreign.MemoryLayout.PathElement.groupElement;\n@@ -158,1 +158,1 @@\n-                try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                try (MemorySession scope = MemorySession.openConfined()) {\n@@ -170,1 +170,1 @@\n-                try (ResourceScope scope = ResourceScope.newConfinedScope()) {\n+                try (MemorySession scope = MemorySession.openConfined()) {\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-import jdk.incubator.foreign.Addressable;\n-import jdk.incubator.foreign.CLinker;\n+import java.lang.foreign.Addressable;\n@@ -31,1 +30,1 @@\n-import jdk.incubator.foreign.GroupLayout;\n+import java.lang.foreign.GroupLayout;\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/UniondeclTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}