{"files":[{"patch":"@@ -13,2 +13,2 @@\n-    static MemorySegment allocate(JImageClose_t fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(JImageClose_t.class, fi, constants$0.JImageClose_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;)V\", scope);\n+    static MemorySegment allocate(JImageClose_t fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(JImageClose_t.class, fi, constants$0.JImageClose_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;)V\", session);\n@@ -16,2 +16,2 @@\n-    static JImageClose_t ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static JImageClose_t ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageClose_t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n-    static MemorySegment allocate(JImageFindResource_t fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(JImageFindResource_t.class, fi, constants$1.JImageFindResource_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)J\", scope);\n+    static MemorySegment allocate(JImageFindResource_t fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(JImageFindResource_t.class, fi, constants$1.JImageFindResource_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)J\", session);\n@@ -16,2 +16,2 @@\n-    static JImageFindResource_t ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static JImageFindResource_t ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageFindResource_t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n-    static MemorySegment allocate(JImageGetResource_t fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(JImageGetResource_t.class, fi, constants$2.JImageGetResource_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;JLjava\/lang\/foreign\/MemoryAddress;J)J\", scope);\n+    static MemorySegment allocate(JImageGetResource_t fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(JImageGetResource_t.class, fi, constants$2.JImageGetResource_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;JLjava\/lang\/foreign\/MemoryAddress;J)J\", session);\n@@ -16,2 +16,2 @@\n-    static JImageGetResource_t ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static JImageGetResource_t ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageGetResource_t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n-    static MemorySegment allocate(JImageOpen_t fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(JImageOpen_t.class, fi, constants$0.JImageOpen_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)Ljava\/lang\/foreign\/Addressable;\", scope);\n+    static MemorySegment allocate(JImageOpen_t fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(JImageOpen_t.class, fi, constants$0.JImageOpen_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)Ljava\/lang\/foreign\/Addressable;\", session);\n@@ -16,2 +16,2 @@\n-    static JImageOpen_t ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static JImageOpen_t ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageOpen_t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n-    static MemorySegment allocate(JImagePackageToModule_t fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(JImagePackageToModule_t.class, fi, constants$1.JImagePackageToModule_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)Ljava\/lang\/foreign\/Addressable;\", scope);\n+    static MemorySegment allocate(JImagePackageToModule_t fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(JImagePackageToModule_t.class, fi, constants$1.JImagePackageToModule_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)Ljava\/lang\/foreign\/Addressable;\", session);\n@@ -16,2 +16,2 @@\n-    static JImagePackageToModule_t ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static JImagePackageToModule_t ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"samples\/libjimage\/org\/openjdk\/JImagePackageToModule_t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n-    static MemorySegment allocate(JImageResourceIterator_t fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(JImageResourceIterator_t.class, fi, constants$3.JImageResourceIterator_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)V\", scope);\n+    static MemorySegment allocate(JImageResourceIterator_t fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(JImageResourceIterator_t.class, fi, constants$3.JImageResourceIterator_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)V\", session);\n@@ -16,2 +16,2 @@\n-    static JImageResourceIterator_t ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static JImageResourceIterator_t ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceIterator_t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,2 +13,2 @@\n-    static MemorySegment allocate(JImageResourceVisitor_t fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(JImageResourceVisitor_t.class, fi, constants$2.JImageResourceVisitor_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)I\", scope);\n+    static MemorySegment allocate(JImageResourceVisitor_t fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(JImageResourceVisitor_t.class, fi, constants$2.JImageResourceVisitor_t$FUNC, \"(Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;Ljava\/lang\/foreign\/MemoryAddress;)I\", session);\n@@ -16,2 +16,2 @@\n-    static JImageResourceVisitor_t ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static JImageResourceVisitor_t ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"samples\/libjimage\/org\/openjdk\/JImageResourceVisitor_t.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, MemorySession scope) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, MemorySession session) {\n@@ -88,1 +88,1 @@\n-            return LINKER.upcallStub(handle, fdesc, scope);\n+            return LINKER.upcallStub(handle, fdesc, session);\n@@ -94,2 +94,2 @@\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession scope) {\n-         return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), scope);\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession session) {\n+         return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), session);\n","filename":"samples\/libjimage\/org\/openjdk\/RuntimeHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,2 +48,2 @@\n-        try (var scope = MemorySession.openConfined()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n+        try (var session = MemorySession.openConfined()) {\n+            var allocator = SegmentAllocator.newNativeArena(session);\n@@ -56,1 +56,1 @@\n-            var session = TF_LoadSessionFromSavedModel(sessionOpts, NULL, savedModelDir, tags, 1, graph, NULL, status);\n+            var tf_session = TF_LoadSessionFromSavedModel(sessionOpts, NULL, savedModelDir, tags, 1, graph, NULL, status);\n@@ -75,1 +75,1 @@\n-            TF_DeleteSession(session, status);\n+            TF_DeleteSession(tf_session, status);\n","filename":"samples\/tensorflow\/TensorflowLoadSavedModel.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -121,2 +121,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(scope)) != 0) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(session)) != 0) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,2 +83,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            SegmentAllocator allocator = SegmentAllocator.newNativeArena(scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            SegmentAllocator allocator = SegmentAllocator.newNativeArena(session);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,5 +58,5 @@\n-        try (var scope = MemorySession.openConfined()) {\n-             MemorySegment file = MemorySegment.allocateNative(C_POINTER, scope);\n-             MemorySegment line = MemorySegment.allocateNative(C_INT, scope);\n-             MemorySegment col = MemorySegment.allocateNative(C_INT, scope);\n-             MemorySegment offset = MemorySegment.allocateNative(C_INT, scope);\n+        try (var session = MemorySession.openConfined()) {\n+             MemorySegment file = MemorySegment.allocateNative(C_POINTER, session);\n+             MemorySegment line = MemorySegment.allocateNative(C_INT, session);\n+             MemorySegment col = MemorySegment.allocateNative(C_INT, session);\n+             MemorySegment offset = MemorySegment.allocateNative(C_INT, session);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/SourceLocation.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var allocator = scope;\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var allocator = session;\n@@ -95,2 +95,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var allocator = SegmentAllocator.newNativeArena(scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var allocator = SegmentAllocator.newNativeArena(session);\n@@ -137,3 +137,3 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            MemorySegment p = MemorySegment.allocateNative(C_POINTER, scope);\n-            MemorySegment pCnt = MemorySegment.allocateNative(C_INT, scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment p = MemorySegment.allocateNative(C_POINTER, session);\n+            MemorySegment pCnt = MemorySegment.allocateNative(C_INT, session);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -104,2 +104,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var allocator = scope;\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var allocator = session;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-    static MemorySegment allocate(CXCursorVisitor fi, MemorySession scope) {\n-        return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$13.CXCursorVisitor$FUNC, \"(Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/MemoryAddress;)I\", scope);\n+    static MemorySegment allocate(CXCursorVisitor fi, MemorySession session) {\n+        return RuntimeHelper.upcallStub(CXCursorVisitor.class, fi, constants$13.CXCursorVisitor$FUNC, \"(Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/MemorySegment;Ljava\/lang\/foreign\/MemoryAddress;)I\", session);\n@@ -41,2 +41,2 @@\n-    static CXCursorVisitor ofAddress(MemoryAddress addr, MemorySession scope) {\n-        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, scope);\n+    static CXCursorVisitor ofAddress(MemoryAddress addr, MemorySession session) {\n+        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, MemorySession scope) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, String mtypeDesc, MemorySession session) {\n@@ -106,1 +106,1 @@\n-            return LINKER.upcallStub(handle, fdesc, scope);\n+            return LINKER.upcallStub(handle, fdesc, session);\n@@ -112,2 +112,2 @@\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession scope) {\n-         return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), scope);\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession session) {\n+         return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), session);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, MemorySession scope) {\\n\");\n+            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, MemorySession session) {\\n\");\n@@ -99,1 +99,1 @@\n-                functionDesc.accessExpression() + \", scope);\\n\");\n+                functionDesc.accessExpression() + \", session);\\n\");\n@@ -113,1 +113,1 @@\n-            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemoryAddress addr, MemorySession scope) {\\n\");\n+            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemoryAddress addr, MemorySession session) {\\n\");\n@@ -117,1 +117,1 @@\n-            append(\"addr, 0, scope);\\n\");\n+            append(\"addr, 0, session);\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        append(fiName + \" \" + javaName + \" (MemorySegment segment, MemorySession scope) {\\n\");\n+        append(fiName + \" \" + javaName + \" (MemorySegment segment, MemorySession session) {\\n\");\n@@ -160,1 +160,1 @@\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(segment), scope);\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(segment), session);\\n\");\n@@ -261,1 +261,1 @@\n-        append(\" MemorySegment ofAddress(MemoryAddress addr, MemorySession scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n+        append(\" MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, MemorySession scope) {\n+    static final <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, MemorySession session) {\n@@ -77,1 +77,1 @@\n-            return LINKER.upcallStub(handle, fdesc, scope);\n+            return LINKER.upcallStub(handle, fdesc, session);\n@@ -83,2 +83,2 @@\n-    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession scope) {\n-         return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), scope);\n+    static MemorySegment asArray(MemoryAddress addr, MemoryLayout layout, int numElements, MemorySession session) {\n+         return MemorySegment.ofAddress(addr, numElements * layout.byteSize(), session);\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -53,3 +53,3 @@\n-            MemorySegment bar = Bar.allocate(scope);\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), scope).address());\n-            Bar.foo(bar, scope).apply(42);\n+            MemorySegment bar = Bar.allocate(session);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), session).address());\n+            Bar.foo(bar, session).apply(42);\n@@ -62,1 +62,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -64,3 +64,3 @@\n-            MemorySegment bar = Bar.allocate(scope);\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), scope).address());\n-            Foo.ofAddress(Bar.foo$get(bar), scope).apply(42);\n+            MemorySegment bar = Bar.allocate(session);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), session).address());\n+            Foo.ofAddress(Bar.foo$get(bar), session).apply(42);\n@@ -73,1 +73,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -75,1 +75,1 @@\n-            f$set(Foo.allocate((i) -> val.set(i), scope).address());\n+            f$set(Foo.allocate((i) -> val.set(i), session).address());\n@@ -83,1 +83,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -85,2 +85,2 @@\n-            f$set(Foo.allocate((i) -> val.set(i), scope).address());\n-            Foo.ofAddress(f$get(), scope).apply(42);\n+            f$set(Foo.allocate((i) -> val.set(i), session).address());\n+            Foo.ofAddress(f$get(), session).apply(42);\n@@ -93,1 +93,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -95,3 +95,3 @@\n-            MemorySegment baz = Baz.allocate(scope);\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), scope).address());\n-            Baz.fp(baz, scope).apply(42);\n+            MemorySegment baz = Baz.allocate(session);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), session).address());\n+            Baz.fp(baz, session).apply(42);\n@@ -104,1 +104,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -106,3 +106,3 @@\n-            MemorySegment baz = Baz.allocate(scope);\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), scope).address());\n-            Baz.fp.ofAddress(Baz.fp$get(baz), scope).apply(42);\n+            MemorySegment baz = Baz.allocate(session);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), session).address());\n+            Baz.fp.ofAddress(Baz.fp$get(baz), session).apply(42);\n@@ -115,1 +115,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -117,1 +117,1 @@\n-            fp$set(fp.allocate((i) -> val.set(i), scope).address());\n+            fp$set(fp.allocate((i) -> val.set(i), session).address());\n@@ -125,1 +125,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -127,2 +127,2 @@\n-            fp$set(fp.allocate((i) -> val.set(i), scope).address());\n-            fp.ofAddress(fp$get(), scope).apply(42);\n+            fp$set(fp.allocate((i) -> val.set(i), session).address());\n+            fp.ofAddress(fp$get(), session).apply(42);\n@@ -135,3 +135,3 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            fp_addr$set(fp_addr.allocate((addr) -> MemoryAddress.ofLong(addr.toRawLongValue() + 1), scope).address());\n-            assertEquals(fp_addr.ofAddress(fp_addr$get(), scope).apply(MemoryAddress.ofLong(42)), MemoryAddress.ofLong(43));\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            fp_addr$set(fp_addr.allocate((addr) -> MemoryAddress.ofLong(addr.toRawLongValue() + 1), session).address());\n+            assertEquals(fp_addr.ofAddress(fp_addr$get(), session).apply(MemoryAddress.ofLong(42)), MemoryAddress.ofLong(43));\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-         try (MemorySession scope = MemorySession.openConfined()) {\n-             var seg = func(scope);\n+         try (MemorySession session = MemorySession.openConfined()) {\n+             var seg = func(session);\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -58,1 +58,1 @@\n-                var addr = MemorySegment.ofAddress(argv, C_POINTER.byteSize() * argc, scope);\n+                var addr = MemorySegment.ofAddress(argv, C_POINTER.byteSize() * argc, session);\n@@ -64,1 +64,1 @@\n-            }, scope);\n+            }, session);\n@@ -72,2 +72,2 @@\n-        try (var scope = MemorySession.openConfined()) {\n-            var allocator = SegmentAllocator.newNativeArena(C_POINTER.byteSize(), scope);\n+        try (var session = MemorySession.openConfined()) {\n+            var allocator = SegmentAllocator.newNativeArena(C_POINTER.byteSize(), session);\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,2 +54,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var v1 = Vector.allocate(scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var v1 = Vector.allocate(session);\n@@ -59,1 +59,1 @@\n-            var v2 = Vector.allocate(scope);\n+            var v2 = Vector.allocate(session);\n@@ -63,1 +63,1 @@\n-            sum = add(scope, v1, v2);\n+            sum = add(session, v1, v2);\n@@ -71,1 +71,1 @@\n-            }, scope);\n+            }, session);\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-        try (var scope = MemorySession.openConfined()) {\n-            var foo = Foo.allocate(scope);\n+        try (var session = MemorySession.openConfined()) {\n+            var foo = Foo.allocate(session);\n@@ -55,1 +55,1 @@\n-            var bar = Bar.allocate(scope);\n+            var bar = Bar.allocate(session);\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -54,1 +54,1 @@\n-            MemorySegment seg = Point.ofAddress(addr, scope);\n+            MemorySegment seg = Point.ofAddress(addr, session);\n","filename":"test\/jtreg\/generator\/test8253102\/LibTest8253102Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -53,1 +53,1 @@\n-            MemorySegment str = Foo._struct.allocate(scope);\n+            MemorySegment str = Foo._struct.allocate(session);\n@@ -62,2 +62,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            MemorySegment str = Foo._union._struct.allocate(scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment str = Foo._union._struct.allocate(session);\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var seg = Foo.allocate(scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var seg = Foo.allocate(session);\n@@ -67,2 +67,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var seg = MemorySegment.ofAddress(getFoo(), Foo.sizeof(), scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var seg = MemorySegment.ofAddress(getFoo(), Foo.sizeof(), session);\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -56,1 +56,1 @@\n-             }, scope));\n+             }, session));\n@@ -63,1 +63,1 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n+        try (MemorySession session = MemorySession.openConfined()) {\n@@ -67,1 +67,1 @@\n-             var foo = getFoo(scope);\n+             var foo = getFoo(session);\n@@ -74,1 +74,1 @@\n-             }, scope));\n+             }, session));\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,3 +49,3 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var funcPtr = Foo.sum$get(get_foo(scope));\n-            var sumIface = Foo.sum.ofAddress(funcPtr, scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var funcPtr = Foo.sum$get(get_foo(session));\n+            var sumIface = Foo.sum.ofAddress(funcPtr, session);\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var handle = func$f.allocate(x -> x * x, scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var handle = func$f.allocate(x -> x * x, session);\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var seg = makePoint(scope, 42, -39);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var seg = makePoint(session, 42, -39);\n@@ -61,2 +61,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var seg = Point.allocate(scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var seg = Point.allocate(session);\n@@ -72,2 +72,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            var seg = Point.allocateArray(3, scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            var seg = Point.allocateArray(3, session);\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -183,2 +183,2 @@\n-        try (MemorySession scope = MemorySession.openConfined()) {\n-            MemorySegment struct = MemorySegment.allocateNative(structLayout, scope);\n+        try (MemorySession session = MemorySession.openConfined()) {\n+            MemorySegment struct = MemorySegment.allocateNative(structLayout, session);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,2 +158,2 @@\n-                try (MemorySession scope = MemorySession.openConfined()) {\n-                    MemorySegment struct = MemorySegment.allocateNative(layout, scope);\n+                try (MemorySession session = MemorySession.openConfined()) {\n+                    MemorySegment struct = MemorySegment.allocateNative(layout, session);\n@@ -170,2 +170,2 @@\n-                try (MemorySession scope = MemorySession.openConfined()) {\n-                    MemorySegment struct = MemorySegment.allocateNative(layout, scope);\n+                try (MemorySession session = MemorySession.openConfined()) {\n+                    MemorySegment struct = MemorySegment.allocateNative(layout, session);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}