{"files":[{"patch":"@@ -27,1 +27,1 @@\n-$ sh .\/gradlew -Pjdk21_home=<jdk21_home_dir> -Pllvm_home=<libclang_dir> clean verify\n+$ sh .\/gradlew -Pjdk22_home=<jdk22_home_dir> -Pllvm_home=<libclang_dir> clean verify\n@@ -55,1 +55,1 @@\n-$ sh .\/gradlew -Pjdk21_home=<jdk21_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n+$ sh .\/gradlew -Pjdk22_home=<jdk22_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n@@ -89,2 +89,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-           MemorySegment point = MemorySegment.allocateNative(Point2d.$LAYOUT(), session);\n+        try (Arena arena = Arena.ofConfined()) {\n+           MemorySegment point = arena.allocate(Point2d.$LAYOUT());\n","filename":"README.md","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    options.release = 21\n+    options.release = 22\n@@ -46,1 +46,1 @@\n-    options.forkOptions.executable = \"${jdk21_home}\/bin\/javac\"\n+    options.forkOptions.executable = \"${jdk22_home}\/bin\/javac\"\n@@ -86,1 +86,1 @@\n-    executable = \"${jdk21_home}\/bin\/jmod\"\n+    executable = \"${jdk22_home}\/bin\/jmod\"\n@@ -112,1 +112,1 @@\n-    executable = \"${jdk21_home}\/bin\/jlink\"\n+    executable = \"${jdk22_home}\/bin\/jlink\"\n@@ -148,1 +148,1 @@\n-    executable = \"${jdk21_home}\/bin\/jlink\"\n+    executable = \"${jdk22_home}\/bin\/jlink\"\n@@ -150,1 +150,1 @@\n-         \"--module-path=$jmods_dir\" + File.pathSeparator + \"$jdk21_home\/jmods\",\n+         \"--module-path=$jmods_dir\" + File.pathSeparator + \"$jdk22_home\/jmods\",\n","filename":"build.gradle","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-        return value.getUtf8String(0);\n+        return value.getString(0);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/EvalResult.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            MemorySegment src = arena.allocateUtf8String(file);\n+            MemorySegment src = arena.allocateString(file);\n@@ -77,1 +77,1 @@\n-                cargs.set(C_POINTER, i * C_POINTER.byteSize(), arena.allocateUtf8String(args[i]));\n+                cargs.set(C_POINTER, i * C_POINTER.byteSize(), arena.allocateString(args[i]));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            IMPLICIT_ALLOCATOR.allocateUtf8String(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY);\n+            IMPLICIT_ALLOCATOR.allocateString(\"LIBCLANG_DISABLE_CRASH_RECOVERY=\" + CRASH_RECOVERY);\n@@ -78,1 +78,1 @@\n-        String str = buf.getUtf8String(0);\n+        String str = buf.getString(0);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/LibClang.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            MemorySegment pathStr = arena.allocateUtf8String(path.toAbsolutePath().toString());\n+            MemorySegment pathStr = arena.allocateString(path.toAbsolutePath().toString());\n@@ -88,2 +88,2 @@\n-                start.set(C_POINTER, FILENAME_OFFSET, arena.allocateUtf8String(inMemoryFiles[i].file));\n-                start.set(C_POINTER, CONTENTS_OFFSET, arena.allocateUtf8String(inMemoryFiles[i].contents));\n+                start.set(C_POINTER, FILENAME_OFFSET, arena.allocateString(inMemoryFiles[i].file));\n+                start.set(C_POINTER, CONTENTS_OFFSET, arena.allocateString(inMemoryFiles[i].contents));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-            MemorySegment cfname = arena.allocateUtf8String(fieldName);\n+            MemorySegment cfname = arena.allocateString(fieldName);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-            .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR$LAYOUT));\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, C_CHAR$LAYOUT));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Constants$root.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-                MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE));\n+                MemoryLayout.sequenceLayout(Long.MAX_VALUE, ValueLayout.JAVA_BYTE));\n@@ -430,1 +430,1 @@\n-            append(\" = RuntimeHelper.CONSTANT_ALLOCATOR.allocateUtf8String(\\\"\");\n+            append(\" = RuntimeHelper.CONSTANT_ALLOCATOR.allocateString(\\\"\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Constants.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-                .withTargetLayout(MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE));\n+                .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, ValueLayout.JAVA_BYTE));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypeImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                \"--source\", \"21\",\n+                \"--source\", \"22\",\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Writer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import static java.lang.Long.MAX_VALUE;\n@@ -35,1 +36,1 @@\n-    static final AddressLayout POINTER = ValueLayout.ADDRESS.withTargetLayout(MemoryLayout.sequenceLayout(JAVA_BYTE));\n+    static final AddressLayout POINTER = ValueLayout.ADDRESS.withTargetLayout(MemoryLayout.sequenceLayout(MAX_VALUE, JAVA_BYTE));\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                    arena.allocateUtf8String(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n+                    arena.allocateString(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n@@ -57,1 +57,1 @@\n-            String str = s.getUtf8String(0);\n+            String str = s.getString(0);\n","filename":"test\/jtreg\/generator\/test8244959\/Test8244959.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,4 +56,4 @@\n-                assertEquals(argv.getAtIndex(C_POINTER, 0).getUtf8String(0), \"java\");\n-                assertEquals(argv.getAtIndex(C_POINTER, 1).getUtf8String(0), \"python\");\n-                assertEquals(argv.getAtIndex(C_POINTER, 2).getUtf8String(0), \"javascript\");\n-                assertEquals(argv.getAtIndex(C_POINTER, 3).getUtf8String(0), \"c++\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 0).getString(0), \"java\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 1).getString(0), \"python\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 2).getString(0), \"javascript\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 3).getString(0), \"c++\");\n@@ -72,1 +72,1 @@\n-            assertEquals(addr.get(C_POINTER, 0).getUtf8String(0), \"hello world\");\n+            assertEquals(addr.get(C_POINTER, 0).getString(0), \"hello world\");\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,2 +47,2 @@\n-        assertEquals(GREETING().getUtf8String(0), \"hello\\nworld\");\n-        assertEquals(GREETING2().getUtf8String(0), \"hello\\tworld\");\n+        assertEquals(GREETING().getString(0), \"hello\\nworld\");\n+        assertEquals(GREETING2().getString(0), \"hello\\tworld\");\n","filename":"test\/jtreg\/generator\/test8253390\/LibTest8253390Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-            commands.add(\"--source=21\");\n+            commands.add(\"--source=22\");\n","filename":"test\/lib\/JtregJextractSources.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-            .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n+            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, C_CHAR));\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-        return actual -> assertEquals(actual.getUtf8String(0), expected);\n+        return actual -> assertEquals(actual.getString(0), expected);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    private static final VarHandle VH_bytes = MemoryLayout.sequenceLayout(C_CHAR).varHandle(sequenceElement());\n+    private static final VarHandle VH_bytes = C_CHAR.arrayElementVarHandle();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}