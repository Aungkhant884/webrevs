{"files":[{"patch":"@@ -244,7 +244,7 @@\n-                       \/\/ check if we have usage like -C<clang_option> such as -C-xc++\n-                       int idx = arg.indexOf('-', 1);\n-                       if (idx != -1) {\n-                           argValue = arg.substring(idx);\n-                           spec = optionSpecs.get(arg.substring(0, idx));\n-                       }\n-                       if (spec == null) {\n+                       \/\/ check for single char option specifier followed\n+                       \/\/ by option value without whitespace in between.\n+                       \/\/ Examples: -lclang, -C-xc++\n+                       spec = arg.length() > 2 ? optionSpecs.get(arg.substring(0, 2)) : null;\n+                       if (spec != null) {\n+                           argValue = arg.substring(2);\n+                       } else {\n@@ -370,2 +370,1 @@\n-            for (Object arg : optionSet.valuesOf(\"-l\")) {\n-                String lib = (String)arg;\n+            for (String lib : optionSet.valuesOf(\"-l\")) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-l.option.value.invalid=option value for -l option should be a name or an absolute path\n+l.option.value.invalid=option value for -l option should be a name or an absolute path: {0}\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}