{"files":[{"patch":"@@ -5,1 +5,1 @@\n-### Getting started\n+### Getting jextract\n@@ -7,39 +7,1 @@\n-`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (a version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424), so a suitable [jdk 19 distribution](https:\/\/jdk.java.net\/19\/) is also required.\n-\n-> <details><summary><strong>Building older jextract versions<\/strong><\/summary>\n-> \n-> The `master` branch always tracks the latest version of the JDK. If you wish to build an older version of jextract, which targets an earlier version of the JDK you can do so by chercking out the appropriate branch.\n-> For example, to build a jextract tool which works against JDK 18:\n-> \n-> `git checkout jdk18`\n-> \n-> Over time, new branches will be added, each targeting a specific JDK version.\n-> <\/details>\n-\n-`jextract` can be built using `gradle`, as follows (on Windows, `gradlew.bat` should be used instead).\n-\n-(**Note**: Run the Gradle build with a Java version appropriate for the Gradle version. For example, Gradle 7.5.1\n-supports JDK 18. Please checkout the [Gradle compatibility matrix](https:\/\/docs.gradle.org\/current\/userguide\/compatibility.html#java) for the appropate JDK version needed for builds)\n-\n-\n-\n-```sh\n-$ sh .\/gradlew -Pjdk19_home=<jdk19_home_dir> -Pllvm_home=<libclang_dir> clean verify\n-```\n-\n-\n-> <details><summary><strong>Using a local installation of LLVM<\/strong><\/summary>\n-> \n-> While the recommended way is to use a [release from the LLVM project](https:\/\/releases.llvm.org\/download.html),\n-> extract it then make `llvm_home` point to this directory, it may be possible to use a local installation instead.\n->\n-> E.g. on macOs the `llvm_home` can also be set as one of these locations :\n-> \n-> * `\/Library\/Developer\/CommandLineTools\/usr\/` if using Command Line Tools\n-> * `\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/` if using XCode\n-> * `$(brew --prefix llvm)` if using the [LLVM install from Homebrew](https:\/\/formulae.brew.sh\/formula\/llvm#default)\n-> \n-> <\/details>\n-\n-After building, there should be a new `jextract` folder under `build`.\n-To run the `jextract` tool, simply run the `jextract` command in the `bin` folder:\n+Pre-built binaries for jextract are periodically released [here](https:\/\/jdk.java.net\/jextract). These binaries are built from the `master` branch of this repo, and target the foreign memory access and function API in the latest mainline JDK (for which binaries can be found [here](https:\/\/jdk.java.net)).\n@@ -47,4 +9,1 @@\n-```sh\n-$ build\/jextract\/bin\/jextract\n-Expected a header file\n-```\n+Alternatively, to build jextract from the latest sources (which include all the latest updates and fixes) please refer to the [building](#building--testing) section below.\n@@ -52,7 +11,1 @@\n-The repository also contains a comprehensive set of tests, written using the [jtreg](https:\/\/openjdk.java.net\/jtreg\/) test framework, which can be run as follows (again, on Windows, `gradlew.bat` should be used instead):\n-\n-```sh\n-$ sh .\/gradlew -Pjdk19_home=<jdk19_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n-```\n-\n-Note however that running `jtreg` task requires `cmake` to be available on the `PATH`.\n+---\n@@ -176,0 +129,58 @@\n+---\n+\n+### Building & Testing\n+\n+`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (a version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424), so a suitable [jdk 19 distribution](https:\/\/jdk.java.net\/19\/) is also required.\n+\n+> <details><summary><strong>Building older jextract versions<\/strong><\/summary>\n+> \n+> The `master` branch always tracks the latest version of the JDK. If you wish to build an older version of jextract, which targets an earlier version of the JDK you can do so by chercking out the appropriate branch.\n+> For example, to build a jextract tool which works against JDK 18:\n+> \n+> `git checkout jdk18`\n+> \n+> Over time, new branches will be added, each targeting a specific JDK version.\n+> <\/details>\n+\n+`jextract` can be built using `gradle`, as follows (on Windows, `gradlew.bat` should be used instead).\n+\n+(**Note**: Run the Gradle build with a Java version appropriate for the Gradle version. For example, Gradle 7.5.1\n+supports JDK 18. Please checkout the [Gradle compatibility matrix](https:\/\/docs.gradle.org\/current\/userguide\/compatibility.html#java) for the appropate JDK version needed for builds)\n+\n+\n+\n+```sh\n+$ sh .\/gradlew -Pjdk19_home=<jdk19_home_dir> -Pllvm_home=<libclang_dir> clean verify\n+```\n+\n+\n+> <details><summary><strong>Using a local installation of LLVM<\/strong><\/summary>\n+> \n+> While the recommended way is to use a [release from the LLVM project](https:\/\/releases.llvm.org\/download.html),\n+> extract it then make `llvm_home` point to this directory, it may be possible to use a local installation instead.\n+>\n+> E.g. on macOs the `llvm_home` can also be set as one of these locations :\n+> \n+> * `\/Library\/Developer\/CommandLineTools\/usr\/` if using Command Line Tools\n+> * `\/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/` if using XCode\n+> * `$(brew --prefix llvm)` if using the [LLVM install from Homebrew](https:\/\/formulae.brew.sh\/formula\/llvm#default)\n+> \n+> <\/details>\n+\n+After building, there should be a new `jextract` folder under `build`.\n+To run the `jextract` tool, simply run the `jextract` command in the `bin` folder:\n+\n+```sh\n+$ build\/jextract\/bin\/jextract\n+Expected a header file\n+```\n+\n+#### Testing\n+\n+The repository also contains a comprehensive set of tests, written using the [jtreg](https:\/\/openjdk.java.net\/jtreg\/) test framework, which can be run as follows (again, on Windows, `gradlew.bat` should be used instead):\n+\n+```sh\n+$ sh .\/gradlew -Pjdk19_home=<jdk19_home_dir> -Pllvm_home=<libclang_dir> -Pjtreg_home=<jtreg_home> jtreg\n+```\n+\n+Note: running `jtreg` task requires `cmake` to be available on the `PATH`.\n","filename":"README.md","additions":62,"deletions":51,"binary":false,"changes":113,"status":"modified"}]}