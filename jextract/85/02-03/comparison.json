{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Optional;\n@@ -105,1 +106,1 @@\n-        builder.append(nameAndType(rtype, \"\"));\n+        builder.append(typeStr(rtype));\n@@ -133,5 +134,6 @@\n-        builder.append(nameAndType(d.type(), d.name()));\n-        builder.append(\" = \");\n-        Object value = d.value();\n-        if (value instanceof String str) {\n-            builder.append(\"\\\"\" + Utils.quote(str) + \"\\\"\");\n+        Optional<String> enumName = EnumConstantLifter.enumName(d);\n+        if (enumName.isPresent()) {\n+            builder.append(\"enum \" + enumName.get() + \".\" + d.name());\n+            builder.append(\" = \");\n+            builder.append(d.value());\n+            builder.append(\";\\n\");\n@@ -139,1 +141,10 @@\n-            builder.append(value);\n+            builder.append(\"#define \");\n+            builder.append(d.name());\n+            Object value = d.value();\n+            builder.append(\" \");\n+            if (value instanceof String str) {\n+                builder.append(\"\\\"\" + Utils.quote(str) + \"\\\"\");\n+            } else {\n+                builder.append(value);\n+            }\n+            builder.append(\"\\n\");\n@@ -141,1 +152,0 @@\n-        builder.append(\";\\n\");\n@@ -169,0 +179,6 @@\n+    private static String typeStr(Type type) {\n+        var result = type.accept(typeVisitor, \"\");\n+        assert !result.nameIncluded();\n+        return result.typeStr();\n+    }\n+\n@@ -173,0 +189,3 @@\n+        \/\/ context argument in this visitor starts with a name. But it may pick up\n+        \/\/ \"*\" prefixes for pointer type.\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/CDeclarationPrinter.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Optional;\n@@ -36,0 +37,2 @@\n+    private static final String ENUM_NAME = \"enum-name\";\n+\n@@ -40,0 +43,4 @@\n+    static Optional<String> enumName(Declaration.Constant constant) {\n+        return constant.getAttribute(ENUM_NAME).map(attrs -> attrs.get(0).toString());\n+    }\n+\n@@ -79,1 +86,4 @@\n-            scoped.members().forEach(fieldTree -> fieldTree.accept(this, null));\n+            \/\/ add the name of the enum as an attribute.\n+            scoped.members().forEach(fieldTree -> fieldTree\n+                .withAttribute(ENUM_NAME, scoped.name())\n+                .accept(this, null));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/EnumConstantLifter.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-            \"int FOO = 42;\", \"char* MSG = \\\"Hello\\\";\"));\n+            \"#define FOO 42\", \"#define MSG \\\"Hello\\\"\"));\n@@ -57,7 +57,7 @@\n-            \"int RED = 0;\",\n-            \"int GREEN = 1;\",\n-            \"int BLUE = 2;\",\n-            \"int club = 1;\",\n-            \"int diamonds = 2;\",\n-            \"int hearts = 3;\",\n-            \"int spades = 4;\"));\n+            \"enum Color.RED = 0;\",\n+            \"enum Color.GREEN = 1;\",\n+            \"enum Color.BLUE = 2;\",\n+            \"enum Suit.club = 1;\",\n+            \"enum Suit.diamonds = 2;\",\n+            \"enum Suit.hearts = 3;\",\n+            \"enum Suit.spades = 4;\"));\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903257\/TestDocComments.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}