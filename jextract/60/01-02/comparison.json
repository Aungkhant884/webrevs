{"files":[{"patch":"@@ -7,1 +7,1 @@\n-`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (a version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424), so a suitable jdk build from panama-foreign repo is also required.\n+`jextract` depends on the [C libclang API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html). To build the jextract sources, the easiest option is to download LLVM binaries for your platform, which can be found [here](https:\/\/releases.llvm.org\/download.html) (a version >= 9 is required). Both the `jextract` tool and the bindings it generates depend heavily on the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/424), so a suitable build of the [panama\/foreign repository](https:\/\/github.com\/openjdk\/panama-foreign) is also required.\n","filename":"README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,0 @@\n-            var formatCtx = MemorySegment.ofAddress(pFormatCtx.address(), AVFormatContext.sizeof(), session);\n@@ -109,1 +108,1 @@\n-            int nb_streams = AVFormatContext.nb_streams$get(formatCtx);\n+            int nb_streams = AVFormatContext.nb_streams$get(pFormatCtx);\n@@ -112,2 +111,1 @@\n-            var pStreams = AVFormatContext.streams$get(formatCtx);\n-            var streamsArray = MemorySegment.ofAddress(pStreams.address(), nb_streams * C_POINTER.byteSize(), session);\n+            var pStreams = AVFormatContext.streams$get(pFormatCtx);\n@@ -121,3 +119,1 @@\n-                var pStream = streamsArray.getAtIndex(C_POINTER, i);\n-                \/\/ AVStream stream;\n-                var stream = MemorySegment.ofAddress(pStream.address(), AVStream.sizeof(), session);\n+                var pStream = pStreams.getAtIndex(C_POINTER, i);\n@@ -125,3 +121,2 @@\n-                pCodecCtx = AVStream.codec$get(stream);\n-                var avcodecCtx = MemorySegment.ofAddress(pCodecCtx.address(), AVCodecContext.sizeof(), session);\n-                if (AVCodecContext.codec_type$get(avcodecCtx) == AVMEDIA_TYPE_VIDEO()) {\n+                pCodecCtx = AVStream.codec$get(pStream);\n+                if (AVCodecContext.codec_type$get(pCodecCtx) == AVMEDIA_TYPE_VIDEO()) {\n@@ -131,1 +126,1 @@\n-                    pCodec = avcodec_find_decoder(AVCodecContext.codec_id$get(avcodecCtx));\n+                    pCodec = avcodec_find_decoder(AVCodecContext.codec_id$get(pCodecCtx));\n@@ -168,3 +163,2 @@\n-            var codecCtx = MemorySegment.ofAddress(pCodecCtx.address(), AVCodecContext.sizeof(), session);\n-            int width = AVCodecContext.width$get(codecCtx);\n-            int height = AVCodecContext.height$get(codecCtx);\n+            int width = AVCodecContext.width$get(pCodecCtx);\n+            int height = AVCodecContext.height$get(pCodecCtx);\n@@ -178,1 +172,0 @@\n-            var frame = MemorySegment.ofAddress(pFrame.address(), AVFrame.sizeof(), session);\n@@ -182,1 +175,0 @@\n-            var frameRGB = MemorySegment.ofAddress(pFrameRGB.address(), AVFrame.sizeof(), session);\n@@ -193,1 +185,1 @@\n-            int pix_fmt = AVCodecContext.pix_fmt$get(codecCtx);\n+            int pix_fmt = AVCodecContext.pix_fmt$get(pCodecCtx);\n@@ -214,3 +206,3 @@\n-                        sws_scale(sws_ctx, AVFrame.data$slice(frame),\n-                            AVFrame.linesize$slice(frame), 0, height,\n-                            AVFrame.data$slice(frameRGB), AVFrame.linesize$slice(frameRGB));\n+                        sws_scale(sws_ctx, AVFrame.data$slice(pFrame),\n+                            AVFrame.linesize$slice(pFrame), 0, height,\n+                            AVFrame.data$slice(pFrameRGB), AVFrame.linesize$slice(pFrameRGB));\n@@ -221,1 +213,1 @@\n-                                saveFrame(frameRGB, session, width, height, i);\n+                                saveFrame(pFrameRGB, session, width, height, i);\n","filename":"samples\/libffmpeg\/LibffmpegMain.java","additions":13,"deletions":21,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.global());\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n@@ -62,1 +62,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), MemorySession.global())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), symbol.session())).orElse(null);\n","filename":"samples\/libjimage\/org\/openjdk\/RuntimeHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import static java.lang.foreign.MemoryAddress.NULL;\n+import static java.lang.foreign.MemorySegment.NULL;\n","filename":"samples\/tcl\/TCLMain.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.global());\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n@@ -83,1 +83,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), MemorySession.global())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), symbol.session())).orElse(null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -117,3 +117,2 @@\n-                \"MemoryLayout\", \"MemorySession\",\n-                \"MemorySegment\", \"ValueLayout\",\n-                \"RuntimeHelper\" -> true;\n+                \"MemoryLayout\", \"MemorySegment\",\n+                \"ValueLayout\", \"RuntimeHelper\" -> true;\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/Utils.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.global());\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.openImplicit());\n@@ -52,1 +52,1 @@\n-        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), MemorySession.global())).orElse(null);\n+        return SYMBOL_LOOKUP.lookup(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), symbol.session())).orElse(null);\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-            assertEquals(fp_addr.ofAddress(fp_addr$get(), session).apply(MemorySegment.ofAddress(42)).address(), MemorySegment.ofAddress(43).address());\n+            assertEquals(fp_addr.ofAddress(fp_addr$get(), session).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}