{"files":[{"patch":"@@ -37,0 +37,3 @@\n+cd lp_solve\n+rm -rf net\n+cd ..\n","filename":"samples\/cleanall.sh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+echo \"compiling lp_solve\"\n+cd lp_solve\n+sh .\/compile.sh\n+cd ..\n","filename":"samples\/compileall.sh","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,4 @@\n+echo \"compiling lp_solve\"\n+cd lp_solve\n+sh .\/compilesource.sh\n+cd ..\n","filename":"samples\/compilesourceall.sh","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ *   - Redistributions of source code must retain the above copyright\n+ *     notice, this list of conditions and the following disclaimer.\n+ *\n+ *   - Redistributions in binary form must reproduce the above copyright\n+ *     notice, this list of conditions and the following disclaimer in the\n+ *     documentation and\/or other materials provided with the distribution.\n+ *\n+ *   - Neither the name of Oracle nor the names of its\n+ *     contributors may be used to endorse or promote products derived\n+ *     from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n+ * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+import jdk.incubator.foreign.*;\n+import static net.sourceforge.lpsolve.lp_lib_h.*;\n+import static jdk.incubator.foreign.MemoryAddress.NULL;\n+\n+\/\/ This is port of C example from http:\/\/web.mit.edu\/lpsolve\/doc\/\n+\n+class LpSolveDemo {\n+    private static final byte TRUE = 1;\n+    private static final byte FALSE = 0;\n+\n+    public static void main(String[] args) {\n+        int Ncol = 2; \/\/ two variables in the model\n+        var lp = make_lp(0, Ncol);\n+        if (lp == NULL) {\n+             System.err.println(\"make_lp returns NULL\");\n+             return;\n+        }\n+\n+        try (var scope = ResourceScope.newConfinedScope()) {\n+            var allocator = SegmentAllocator.nativeAllocator(scope);\n+            var colno = allocator.allocateArray(C_INT, Ncol);\n+            var row = allocator.allocateArray(C_DOUBLE, Ncol);\n+\n+            \/\/ makes building the model faster if it is done rows by row\n+            set_add_rowmode(lp, TRUE);\n+\n+            \/\/ construct first row (120 x + 210 y <= 15000)\n+            int j = 0;\n+            colno.setAtIndex(C_INT, j, 1);\n+            row.setAtIndex(C_DOUBLE, j, 120);\n+            j++;\n+            colno.setAtIndex(C_INT, j, 2);\n+            row.setAtIndex(C_DOUBLE, j, 210);\n+            j++;\n+            add_constraintex(lp, j, row, colno, LE(), 15000);\n+\n+            \/\/ construct second row (110 x + 30 y <= 4000)\n+            j = 0;\n+            colno.setAtIndex(C_INT, j, 1);\n+            row.setAtIndex(C_DOUBLE, j, 110);\n+            j++;\n+            colno.setAtIndex(C_INT, j, 2);\n+            row.setAtIndex(C_DOUBLE, j, 30);\n+            j++;\n+            add_constraintex(lp, j, row, colno, LE(), 4000);\n+\n+            \/\/ construct third row (x + y <= 75)\n+            j = 0;\n+            colno.setAtIndex(C_INT, j, 1);\n+            row.setAtIndex(C_DOUBLE, j, 1);\n+            j++;\n+            colno.setAtIndex(C_INT, j, 2);\n+            row.setAtIndex(C_DOUBLE, j, 1);\n+            j++;\n+            add_constraintex(lp, j, row, colno, LE(), 75);\n+\n+            \/\/ rowmode should be turned off again when done building the model\n+            set_add_rowmode(lp, FALSE);\n+\n+            \/\/ set the objective function (143 x + 60 y)\n+            j = 0;\n+            colno.setAtIndex(C_INT, j, 1);\n+            row.setAtIndex(C_DOUBLE, j, 143);\n+            j++;\n+            colno.setAtIndex(C_INT, j, 2);\n+            row.setAtIndex(C_DOUBLE, j, 60);\n+            j++;\n+\n+            \/\/ set the objective in lpsolve\n+            set_obj_fnex(lp, j, row, colno);\n+\n+            \/\/ set the object direction to maximize\n+            set_maxim(lp);\n+\n+            \/\/ I only want to see important messages on screen while solving\n+            set_verbose(lp, IMPORTANT());\n+\n+            \/\/ Now let lpsolve calculate a solution\n+            int ret = solve(lp);\n+            if (ret != OPTIMAL()) {\n+                System.err.println(\"cannot find optimal solution!\");\n+                return;\n+            }\n+\n+            \/*\n+             * Objective value: 6315.625000\n+             * x0 = 21.875000\n+             * x1 = 53.125000\n+             *\/\n+            System.out.println(\"Objective value: \" + get_objective(lp));\n+\n+            \/\/ variable values\n+            get_variables(lp, row);\n+            for(j = 0; j < Ncol; j++) {\n+                System.out.println(\"x\" + j + \" = \" + row.getAtIndex(C_DOUBLE, j));\n+            }\n+        } finally {\n+            delete_lp(lp);\n+        }\n+    }\n+}\n","filename":"samples\/lp_solve\/LpSolveDemo.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -0,0 +1,8 @@\n+# on Mac, lp_solve can be installed using\n+# brew install lp_solve\n+ \n+jextract \\\n+  -t net.sourceforge.lpsolve \\\n+  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\\n+  -l lpsolve55 \\\n+  \/usr\/local\/Cellar\/lp_solve\/5.5.2.11\/include\/lp_lib.h\n","filename":"samples\/lp_solve\/compile.sh","additions":8,"deletions":0,"binary":false,"changes":8,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+# on Mac, lp_solve can be installed using\n+# brew install lp_solve\n+ \n+jextract \\\n+  --source \\\n+  -t net.sourceforge.lpsolve \\\n+  -I \/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/usr\/include \\\n+  -l lpsolve55 \\\n+  \/usr\/local\/Cellar\/lp_solve\/5.5.2.11\/include\/lp_lib.h\n+\n+javac --add-modules jdk.incubator.foreign net\/sourceforge\/lpsolve\/*.java\n","filename":"samples\/lp_solve\/compilesource.sh","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+java --enable-native-access=ALL-UNNAMED \\\n+   --add-modules jdk.incubator.foreign \\\n+   -Djava.library.path=\/usr\/local\/Cellar\/lp_solve\/5.5.2.11\/lib \\\n+    LpSolveDemo.java\n","filename":"samples\/lp_solve\/run.sh","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"}]}