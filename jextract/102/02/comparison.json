{"files":[{"patch":"@@ -44,2 +44,2 @@\n-        this.arena = Arena.openConfined();\n-        this.ptr = MemorySegment.ofAddress(ptr.address(), size, arena.scope(), cleanup).asReadOnly();\n+        this.arena = Arena.ofConfined();\n+        this.ptr = MemorySegment.ofAddress(ptr.address(), size, arena, cleanup).asReadOnly();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/ClangDisposable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -123,1 +122,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -244,1 +243,1 @@\n-        }, SegmentScope.global());\n+        }, Arena.global());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Arena;\n@@ -32,1 +33,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -47,1 +47,1 @@\n-    private static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> MemorySegment.allocateNative(size, align, SegmentScope.auto());\n+    private static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> Arena.ofAuto().allocate(size, align);\n@@ -90,1 +90,1 @@\n-            MemorySegment.allocateNative(CXString.sizeof(), 8, SegmentScope.auto()));\n+            Arena.ofAuto().allocate(CXString.sizeof(), 8));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/LibClang.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/SourceLocation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -82,1 +82,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -124,1 +124,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    static MemorySegment allocate(CXCursorVisitor fi, SegmentScope scope) {\n+    static MemorySegment allocate(CXCursorVisitor fi, Arena scope) {\n@@ -46,1 +46,1 @@\n-    static CXCursorVisitor ofAddress(MemorySegment addr, SegmentScope scope) {\n+    static CXCursorVisitor ofAddress(MemorySegment addr, Arena scope) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -35,1 +36,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -60,1 +60,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, SegmentScope.auto());\n+            (size, align) -> Arena.ofAuto().allocate(size, align);\n@@ -82,1 +82,3 @@\n-        return SYMBOL_LOOKUP.find(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), symbol.scope())).orElse(null);\n+        return SYMBOL_LOOKUP.find(name)\n+                .map(s -> s.asUnbounded().asSlice(0, layout))\n+                .orElse(null);\n@@ -101,1 +103,1 @@\n-    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, SegmentScope scope) {\n+    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, Arena scope) {\n@@ -111,1 +113,1 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, SegmentScope scope) {\n+    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena scope) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, SegmentScope scope) {\\n\");\n+            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, Arena scope) {\\n\");\n@@ -120,1 +120,1 @@\n-            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemorySegment addr, SegmentScope scope) {\\n\");\n+            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemorySegment addr, Arena scope) {\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), SegmentScope.global());\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), Arena.global());\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-        append(fiName + \" \" + javaName + \"(MemorySegment segment, SegmentScope scope) {\\n\");\n+        append(fiName + \" \" + javaName + \"(MemorySegment segment, Arena scope) {\\n\");\n@@ -283,1 +283,1 @@\n-        append(\" MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n+        append(\" MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -34,1 +34,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, SegmentScope.auto());\n+            (size, align) -> Arena.ofAuto().allocate(size, align);\n@@ -53,1 +53,3 @@\n-        return SYMBOL_LOOKUP.find(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), symbol.scope())).orElse(null);\n+        return SYMBOL_LOOKUP.find(name)\n+                .map(s -> s.asUnbounded().asSlice(0, layout))\n+                .orElse(null);\n@@ -72,1 +74,1 @@\n-    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, SegmentScope scope) {\n+    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, Arena scope) {\n@@ -82,1 +84,1 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, SegmentScope scope) {\n+    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena scope) {\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -53,2 +53,2 @@\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena.scope()));\n-            Bar.foo(bar, arena.scope()).apply(42);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena));\n+            Bar.foo(bar, arena).apply(42);\n@@ -61,1 +61,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -64,2 +64,2 @@\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena.scope()));\n-            Foo.ofAddress(Bar.foo$get(bar), arena.scope()).apply(42);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena));\n+            Foo.ofAddress(Bar.foo$get(bar), arena).apply(42);\n@@ -72,1 +72,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -74,1 +74,1 @@\n-            f$set(Foo.allocate((i) -> val.set(i), arena.scope()));\n+            f$set(Foo.allocate((i) -> val.set(i), arena));\n@@ -82,1 +82,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -84,2 +84,2 @@\n-            f$set(Foo.allocate((i) -> val.set(i), arena.scope()));\n-            Foo.ofAddress(f$get(), arena.scope()).apply(42);\n+            f$set(Foo.allocate((i) -> val.set(i), arena));\n+            Foo.ofAddress(f$get(), arena).apply(42);\n@@ -92,1 +92,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -95,2 +95,2 @@\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena.scope()));\n-            Baz.fp(baz, arena.scope()).apply(42);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena));\n+            Baz.fp(baz, arena).apply(42);\n@@ -103,1 +103,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -106,2 +106,2 @@\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena.scope()));\n-            Baz.fp.ofAddress(Baz.fp$get(baz), arena.scope()).apply(42);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena));\n+            Baz.fp.ofAddress(Baz.fp$get(baz), arena).apply(42);\n@@ -114,1 +114,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -116,1 +116,1 @@\n-            fp$set(fp.allocate((i) -> val.set(i), arena.scope()));\n+            fp$set(fp.allocate((i) -> val.set(i), arena));\n@@ -124,1 +124,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -126,2 +126,2 @@\n-            fp$set(fp.allocate((i) -> val.set(i), arena.scope()));\n-            fp.ofAddress(fp$get(), arena.scope()).apply(42);\n+            fp$set(fp.allocate((i) -> val.set(i), arena));\n+            fp.ofAddress(fp$get(), arena).apply(42);\n@@ -134,3 +134,3 @@\n-        try (Arena arena = Arena.openConfined()) {\n-            fp_addr$set(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), arena.scope()));\n-            assertEquals(fp_addr.ofAddress(fp_addr$get(), arena.scope()).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n+        try (Arena arena = Arena.ofConfined()) {\n+            fp_addr$set(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), arena));\n+            assertEquals(fp_addr.ofAddress(fp_addr$get(), arena).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-         try (Arena arena = Arena.openConfined()) {\n+         try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8244959\/Test8244959.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -56,5 +56,5 @@\n-                assertEquals(argv.get(C_POINTER, 0).getUtf8String(0), \"java\");\n-                assertEquals(argv.get(C_POINTER, C_POINTER.byteSize() * 1).getUtf8String(0), \"python\");\n-                assertEquals(argv.get(C_POINTER, C_POINTER.byteSize() * 2).getUtf8String(0), \"javascript\");\n-                assertEquals(argv.get(C_POINTER, C_POINTER.byteSize() * 3).getUtf8String(0), \"c++\");\n-            }, arena.scope());\n+                assertEquals(argv.getAtIndex(C_POINTER, 0).getUtf8String(0), \"java\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 1).getUtf8String(0), \"python\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 2).getUtf8String(0), \"javascript\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 3).getUtf8String(0), \"c++\");\n+            }, arena);\n@@ -68,1 +68,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -69,1 +69,1 @@\n-            }, arena.scope());\n+            }, arena);\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -54,1 +54,1 @@\n-            MemorySegment seg = Point.ofAddress(addr, arena.scope());\n+            MemorySegment seg = Point.ofAddress(addr, arena);\n","filename":"test\/jtreg\/generator\/test8253102\/LibTest8253102Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -62,1 +62,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -67,2 +67,2 @@\n-        try (Arena arena = Arena.openConfined()) {\n-            var seg = MemorySegment.ofAddress(getFoo().address(), Foo.sizeof(), arena.scope());\n+        try (Arena arena = Arena.ofConfined()) {\n+            var seg = MemorySegment.ofAddress(getFoo().address(), Foo.sizeof(), arena);\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -56,1 +56,1 @@\n-             }, arena.scope()));\n+             }, arena));\n@@ -63,1 +63,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -74,1 +74,1 @@\n-             }, arena.scope()));\n+             }, arena));\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -52,1 +52,1 @@\n-            var sumIface = Foo.sum.ofAddress(funcPtr, arena.scope());\n+            var sumIface = Foo.sum.ofAddress(funcPtr, arena);\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-        try (Arena arena = Arena.openConfined()) {\n-            var handle = func$f.allocate(x -> x * x, arena.scope());\n+        try (Arena arena = Arena.ofConfined()) {\n+            var handle = func$f.allocate(x -> x * x, arena);\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -61,1 +61,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -72,1 +72,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -187,1 +187,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -206,1 +206,1 @@\n-        checkMethod(fiClass, \"allocate\", MemorySegment.class, fiClass, SegmentScope.class);\n+        checkMethod(fiClass, \"allocate\", MemorySegment.class, fiClass, Arena.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-                try (Arena arena = Arena.openConfined()) {\n+                try (Arena arena = Arena.ofConfined()) {\n@@ -170,1 +170,1 @@\n-                try (Arena arena = Arena.openConfined()) {\n+                try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}