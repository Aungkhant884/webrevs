{"files":[{"patch":"@@ -82,1 +82,3 @@\n-        return SYMBOL_LOOKUP.find(name).orElse(null).asUnbounded().asSlice(0, layout.byteSize());\n+        return SYMBOL_LOOKUP.find(name)\n+                .map(s -> s.asUnbounded().asSlice(0, layout))\n+                .orElse(null);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,3 +57,3 @@\n-                assertEquals(argv.getAtIndex(C_POINTER, 1).asUnbounded().getUtf8String(0), \"python\");\n-                assertEquals(argv.getAtIndex(C_POINTER, 2).asUnbounded().getUtf8String(0), \"javascript\");\n-                assertEquals(argv.getAtIndex(C_POINTER, 3).asUnbounded().getUtf8String(0), \"c++\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 1).getUtf8String(0), \"python\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 2).getUtf8String(0), \"javascript\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 3).getUtf8String(0), \"c++\");\n@@ -72,1 +72,1 @@\n-            assertEquals(addr.get(C_POINTER, 0).asUnbounded().getUtf8String(0), \"hello world\");\n+            assertEquals(addr.get(C_POINTER, 0).getUtf8String(0), \"hello world\");\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}