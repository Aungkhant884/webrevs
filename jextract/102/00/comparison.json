{"files":[{"filename":"gradle\/wrapper\/gradle-wrapper.jar","binary":true,"status":"deleted"},{"patch":"@@ -250,0 +250,16 @@\n+    \/**\n+     * A bitfield declaration. Same as a variable declaration, but doesn't have a layout. Instead, it has\n+     * an offset (relative to the enclosing container) and a width.\n+     *\/\n+    interface Bitfield extends Variable {\n+        \/**\n+         * {@return The bitfield offset (relative to the enclosing container)}\n+         *\/\n+        long offset();\n+\n+        \/**\n+         * {@return The bitfield width (in bits)}\n+         *\/\n+        long width();\n+    }\n+\n@@ -357,1 +373,1 @@\n-     * Creates a new bitfield declaration with given name, type and layout.\n+     * Creates a new bitfield declaration with given name, type, offset and width.\n@@ -361,1 +377,2 @@\n-     * @param layout the bitfield declaration layout.\n+     * @param offset the offset of the bitfield (relative to the enclosing container).\n+     * @param width the bitfield width.\n@@ -364,2 +381,2 @@\n-    static Declaration.Variable bitfield(Position pos, String name, Type type, MemoryLayout layout) {\n-        return new DeclarationImpl.VariableImpl(type, layout, Declaration.Variable.Kind.BITFIELD, name, pos);\n+    static Declaration.Variable bitfield(Position pos, String name, Type type, long offset, long width) {\n+        return new DeclarationImpl.BitfieldImpl(type, offset, width, name, pos);\n@@ -417,1 +434,0 @@\n-     * @param layout the bitfields group declaration layout.\n@@ -421,1 +437,1 @@\n-    static Declaration.Scoped bitfields(Position pos, MemoryLayout layout, Declaration.Variable... bitfields) {\n+    static Declaration.Scoped bitfields(Position pos, Declaration.Variable... bitfields) {\n@@ -423,1 +439,1 @@\n-        return new DeclarationImpl.ScopedImpl(Declaration.Scoped.Kind.BITFIELDS, layout, declList, \"\", pos);\n+        return new DeclarationImpl.ScopedImpl(Declaration.Scoped.Kind.BITFIELDS, declList, \"\", pos);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/Declaration.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -44,2 +44,2 @@\n-        this.arena = Arena.openConfined();\n-        this.ptr = MemorySegment.ofAddress(ptr.address(), size, arena.scope(), cleanup).asReadOnly();\n+        this.arena = Arena.ofConfined();\n+        this.ptr = MemorySegment.ofAddress(ptr.address(), size, arena, cleanup).asReadOnly();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/ClangDisposable.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -123,1 +122,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -244,1 +243,1 @@\n-        }, SegmentScope.global());\n+        }, Arena.global());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Arena;\n@@ -32,1 +33,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -47,1 +47,1 @@\n-    private static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> MemorySegment.allocateNative(size, align, SegmentScope.auto());\n+    private static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> Arena.ofAuto().allocate(size, align);\n@@ -90,1 +90,1 @@\n-            MemorySegment.allocateNative(CXString.sizeof(), 8, SegmentScope.auto()));\n+            Arena.ofAuto().allocate(CXString.sizeof(), 8));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/LibClang.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/SourceLocation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -82,1 +82,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -124,1 +124,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    static MemorySegment allocate(CXCursorVisitor fi, SegmentScope scope) {\n+    static MemorySegment allocate(CXCursorVisitor fi, Arena scope) {\n@@ -46,1 +46,1 @@\n-    static CXCursorVisitor ofAddress(MemorySegment addr, SegmentScope scope) {\n+    static CXCursorVisitor ofAddress(MemorySegment addr, Arena scope) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXCursorVisitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXToken.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXType.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n+    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/CXUnsavedFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-    static final OfAddress C_POINTER$LAYOUT = ADDRESS.withBitAlignment(64).asUnbounded();\n+    static final OfAddress C_POINTER$LAYOUT = ADDRESS.withBitAlignment(64)\n+            .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR$LAYOUT));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/Constants$root.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -35,1 +36,0 @@\n-import java.lang.foreign.SegmentScope;\n@@ -60,1 +60,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, SegmentScope.auto());\n+            (size, align) -> Arena.ofAuto().allocate(size, align);\n@@ -82,1 +82,1 @@\n-        return SYMBOL_LOOKUP.find(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), symbol.scope())).orElse(null);\n+        return SYMBOL_LOOKUP.find(name).orElse(null).asUnbounded().asSlice(0, layout.byteSize());\n@@ -101,1 +101,1 @@\n-    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, SegmentScope scope) {\n+    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, Arena scope) {\n@@ -111,1 +111,1 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, SegmentScope scope) {\n+    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena scope) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-    public static final class VariableImpl extends DeclarationImpl implements Declaration.Variable {\n+    public static class VariableImpl extends DeclarationImpl implements Declaration.Variable {\n@@ -210,0 +210,50 @@\n+    public static final class BitfieldImpl extends VariableImpl implements Declaration.Bitfield {\n+\n+        final long offset;\n+        final long width;\n+\n+        private BitfieldImpl(Type type, long offset, long width, String name, Position pos, Map<String, List<Constable>> attrs) {\n+            super(type, Optional.<MemoryLayout>empty(), Kind.BITFIELD, name, pos, attrs);\n+            this.offset = offset;\n+            this.width = width;\n+        }\n+\n+        public BitfieldImpl(Type type, long offset, long width, String name, Position pos) {\n+            this(type, offset, width, name, pos, null);\n+        }\n+\n+        @Override\n+        public long offset() {\n+            return offset;\n+        }\n+\n+        @Override\n+        public long width() {\n+            return width;\n+        }\n+\n+        @Override\n+        public Variable withAttributes(Map<String, List<Constable>> attrs) {\n+            return new BitfieldImpl(type, offset, width, name(), pos(), attrs);\n+        }\n+\n+        @Override\n+        public Variable stripAttributes() {\n+            return new BitfieldImpl(type, offset, width, name(), pos(), null);\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (!(o instanceof BitfieldImpl bitfield)) return false;\n+            if (!super.equals(o)) return false;\n+            return offset == bitfield.offset &&\n+                    width == bitfield.width;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(super.hashCode(), offset, width);\n+        }\n+    }\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/DeclarationImpl.java","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, SegmentScope scope) {\\n\");\n+            append(MEMBER_MODS + \" MemorySegment allocate(\" + className() + \" fi, Arena scope) {\\n\");\n@@ -120,1 +120,1 @@\n-            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemorySegment addr, SegmentScope scope) {\\n\");\n+            append(MEMBER_MODS + \" \" + className() + \" ofAddress(MemorySegment addr, Arena scope) {\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/FunctionalInterfaceBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), SegmentScope.global());\\n\");\n+        append(\"return \" + fiName + \".ofAddress(\" + javaName + \"$get(), Arena.global());\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/HeaderFileBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import org.openjdk.jextract.Declaration.Bitfield;\n+import org.openjdk.jextract.Declaration.Variable.Kind;\n@@ -107,1 +109,6 @@\n-        builder.append(\"Variable: \" + d.kind() + \" \" + d.name() + \" type = \" + d.type().accept(typeVisitor, null) + \", layout = \" + d.layout());\n+        if (d instanceof Bitfield bitfield) {\n+            builder.append(\"Bitfield: \" + \" type = \" + d.type().accept(typeVisitor, null) + \", name = \" + bitfield.name()\n+                    + \", offset = \" + bitfield.offset() + \", width = \" + bitfield.width());\n+        } else {\n+            builder.append(\"Variable: \" + d.kind() + \" \" + d.name() + \" type = \" + d.type().accept(typeVisitor, null) + \", layout = \" + d.layout());\n+        }\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/PrettyPrinter.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-            addField(field(c));\n+            addField(field(offset, c));\n@@ -150,1 +150,1 @@\n-    Declaration field(Cursor c) {\n+    Declaration field(long offset, Cursor c) {\n@@ -154,2 +154,1 @@\n-            MemoryLayout sublayout = MemoryLayout.paddingLayout(c.getBitFieldWidth());\n-            return Declaration.bitfield(TreeMaker.CursorPosition.of(c), name, type, sublayout.withName(name));\n+            return Declaration.bitfield(TreeMaker.CursorPosition.of(c), name, type, offset, c.getBitFieldWidth());\n@@ -170,2 +169,2 @@\n-    Declaration.Scoped bitfield(List<MemoryLayout> sublayouts, Declaration.Variable... declarations) {\n-        return Declaration.bitfields(declarations[0].pos(), MemoryLayout.structLayout(sublayouts.toArray(new MemoryLayout[0])), declarations);\n+    Declaration.Scoped bitfield(Declaration.Variable... declarations) {\n+        return Declaration.bitfields(declarations[0].pos(), declarations);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/RecordLayoutComputer.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-        append(fiName + \" \" + javaName + \"(MemorySegment segment, SegmentScope scope) {\\n\");\n+        append(fiName + \" \" + javaName + \"(MemorySegment segment, Arena scope) {\\n\");\n@@ -283,1 +283,1 @@\n-        append(\" MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n+        append(\" MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }\\n\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    private List<MemoryLayout> bitfieldLayouts;\n+    private long bitfieldSize;\n@@ -57,9 +57,1 @@\n-            MemoryLayout layout = null;\n-            if (declaration instanceof Declaration.Scoped scoped) {\n-                layout = scoped.layout().orElse(null);\n-            } else if (declaration instanceof Declaration.Variable var) {\n-                layout = var.layout().orElse(null);\n-            }\n-            if (layout != null) {\n-                bitfieldLayouts.add(declaration.name().isEmpty() ? layout : layout.withName(declaration.name()));\n-            }\n+            bitfieldSize += ((Declaration.Bitfield)declaration).width();\n@@ -73,3 +65,1 @@\n-        if (bitfieldDecls != null) {\n-            bitfieldLayouts.add(MemoryLayout.paddingLayout(bits));\n-        } else {\n+        if (bitfieldDecls == null) {\n@@ -77,0 +67,2 @@\n+        } else {\n+            bitfieldSize += bits;\n@@ -89,1 +81,1 @@\n-            bitfieldLayouts = new ArrayList<>();\n+            bitfieldSize = 0;\n@@ -158,1 +150,0 @@\n-            List<MemoryLayout> prevBitfieldLayouts = bitfieldLayouts;\n@@ -160,0 +151,1 @@\n+            long prevBitfieldSize = bitfieldSize;\n@@ -161,0 +153,1 @@\n+            bitfieldSize = 0;\n@@ -162,1 +155,1 @@\n-                addField(bitfield(prevBitfieldLayouts, prevBitfieldDecls.toArray(new Declaration.Variable[0])));\n+                addField(bitfield(prevBitfieldDecls.toArray(new Declaration.Variable[0])));\n@@ -164,0 +157,1 @@\n+            fieldLayouts.add(MemoryLayout.paddingLayout(prevBitfieldSize));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/StructLayoutComputer.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import org.openjdk.jextract.Type.Primitive;\n+import org.openjdk.jextract.Type.Primitive.Kind;\n@@ -264,1 +266,3 @@\n-                return \"ADDRESS.withBitAlignment(\" + vl.bitAlignment() + \").asUnbounded()\";\n+                return \"ADDRESS.withBitAlignment(\" + vl.bitAlignment() + \")\" +\n+                \".withTargetLayout(MemoryLayout.sequenceLayout(\" +\n+                        resolvePrimitiveLayout((ValueLayout)Primitive.Kind.Char.layout().get()).accessExpression() + \"))\";\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/ToplevelBuilder.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -101,3 +101,1 @@\n-            case FieldDecl -> c.isBitField() ?\n-                        createBitfield(c) :\n-                        createVar(c, Declaration.Variable.Kind.FIELD);\n+            case FieldDecl -> createVar(c, Declaration.Variable.Kind.FIELD);\n@@ -317,6 +315,0 @@\n-    private Declaration.Variable createBitfield(Cursor c) {\n-        checkCursorAny(c, CursorKind.FieldDecl);\n-        return Declaration.bitfield(CursorPosition.of(c), c.spelling(), toType(c),\n-                MemoryLayout.paddingLayout(c.getBitFieldWidth()));\n-    }\n-\n@@ -324,0 +316,1 @@\n+        if (c.isBitField()) throw new AssertionError(\"Cannot get here!\");\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -182,1 +182,2 @@\n-        public static final ValueLayout.OfAddress POINTER_LAYOUT = ADDRESS.withBitAlignment(64).asUnbounded();\n+        public static final ValueLayout.OfAddress POINTER_LAYOUT = ADDRESS.withBitAlignment(64)\n+                .withTargetLayout(MemoryLayout.sequenceLayout(ValueLayout.JAVA_BYTE));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TypeImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    Declaration field(Cursor c) {\n+    Declaration field(long offset, Cursor c) {\n@@ -69,2 +69,2 @@\n-            Declaration.Variable var = (Declaration.Variable)super.field(c);\n-            return bitfield(List.of(var.layout().get()), var);\n+            Declaration.Variable var = (Declaration.Variable)super.field(offset, c);\n+            return bitfield(var);\n@@ -72,1 +72,1 @@\n-            return super.field(c);\n+            return super.field(offset, c);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/UnionLayoutComputer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -34,1 +34,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align, SegmentScope.auto());\n+            (size, align) -> Arena.ofAuto().allocate(size, align);\n@@ -53,1 +53,3 @@\n-        return SYMBOL_LOOKUP.find(name).map(symbol -> MemorySegment.ofAddress(symbol.address(), layout.byteSize(), symbol.scope())).orElse(null);\n+        return SYMBOL_LOOKUP.find(name)\n+                .map(s -> s.asUnbounded().asSlice(0, layout))\n+                .orElse(null);\n@@ -72,1 +74,1 @@\n-    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, SegmentScope scope) {\n+    static <Z> MemorySegment upcallStub(Class<Z> fi, Z z, FunctionDescriptor fdesc, Arena scope) {\n@@ -82,1 +84,1 @@\n-    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, SegmentScope scope) {\n+    static MemorySegment asArray(MemorySegment addr, MemoryLayout layout, int numElements, Arena scope) {\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -53,2 +53,2 @@\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena.scope()));\n-            Bar.foo(bar, arena.scope()).apply(42);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena));\n+            Bar.foo(bar, arena).apply(42);\n@@ -61,1 +61,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -64,2 +64,2 @@\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena.scope()));\n-            Foo.ofAddress(Bar.foo$get(bar), arena.scope()).apply(42);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena));\n+            Foo.ofAddress(Bar.foo$get(bar), arena).apply(42);\n@@ -72,1 +72,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -74,1 +74,1 @@\n-            f$set(Foo.allocate((i) -> val.set(i), arena.scope()));\n+            f$set(Foo.allocate((i) -> val.set(i), arena));\n@@ -82,1 +82,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -84,2 +84,2 @@\n-            f$set(Foo.allocate((i) -> val.set(i), arena.scope()));\n-            Foo.ofAddress(f$get(), arena.scope()).apply(42);\n+            f$set(Foo.allocate((i) -> val.set(i), arena));\n+            Foo.ofAddress(f$get(), arena).apply(42);\n@@ -92,1 +92,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -95,2 +95,2 @@\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena.scope()));\n-            Baz.fp(baz, arena.scope()).apply(42);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena));\n+            Baz.fp(baz, arena).apply(42);\n@@ -103,1 +103,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -106,2 +106,2 @@\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena.scope()));\n-            Baz.fp.ofAddress(Baz.fp$get(baz), arena.scope()).apply(42);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena));\n+            Baz.fp.ofAddress(Baz.fp$get(baz), arena).apply(42);\n@@ -114,1 +114,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -116,1 +116,1 @@\n-            fp$set(fp.allocate((i) -> val.set(i), arena.scope()));\n+            fp$set(fp.allocate((i) -> val.set(i), arena));\n@@ -124,1 +124,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -126,2 +126,2 @@\n-            fp$set(fp.allocate((i) -> val.set(i), arena.scope()));\n-            fp.ofAddress(fp$get(), arena.scope()).apply(42);\n+            fp$set(fp.allocate((i) -> val.set(i), arena));\n+            fp.ofAddress(fp$get(), arena).apply(42);\n@@ -134,3 +134,3 @@\n-        try (Arena arena = Arena.openConfined()) {\n-            fp_addr$set(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), arena.scope()));\n-            assertEquals(fp_addr.ofAddress(fp_addr$get(), arena.scope()).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n+        try (Arena arena = Arena.ofConfined()) {\n+            fp_addr$set(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), arena));\n+            assertEquals(fp_addr.ofAddress(fp_addr$get(), arena).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-         try (Arena arena = Arena.openConfined()) {\n+         try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8244959\/Test8244959.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -56,5 +56,5 @@\n-                assertEquals(argv.get(C_POINTER, 0).getUtf8String(0), \"java\");\n-                assertEquals(argv.get(C_POINTER, C_POINTER.byteSize() * 1).getUtf8String(0), \"python\");\n-                assertEquals(argv.get(C_POINTER, C_POINTER.byteSize() * 2).getUtf8String(0), \"javascript\");\n-                assertEquals(argv.get(C_POINTER, C_POINTER.byteSize() * 3).getUtf8String(0), \"c++\");\n-            }, arena.scope());\n+                assertEquals(argv.getAtIndex(C_POINTER, 0).getUtf8String(0), \"java\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 1).asUnbounded().getUtf8String(0), \"python\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 2).asUnbounded().getUtf8String(0), \"javascript\");\n+                assertEquals(argv.getAtIndex(C_POINTER, 3).asUnbounded().getUtf8String(0), \"c++\");\n+            }, arena);\n@@ -68,1 +68,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n@@ -72,1 +72,1 @@\n-            assertEquals(addr.get(C_POINTER, 0).getUtf8String(0), \"hello world\");\n+            assertEquals(addr.get(C_POINTER, 0).asUnbounded().getUtf8String(0), \"hello world\");\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -69,1 +69,1 @@\n-            }, arena.scope());\n+            }, arena);\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (var arena = Arena.openConfined()) {\n+        try (var arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -54,1 +54,1 @@\n-            MemorySegment seg = Point.ofAddress(addr, arena.scope());\n+            MemorySegment seg = Point.ofAddress(addr, arena);\n","filename":"test\/jtreg\/generator\/test8253102\/LibTest8253102Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -62,1 +62,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -67,2 +67,2 @@\n-        try (Arena arena = Arena.openConfined()) {\n-            var seg = MemorySegment.ofAddress(getFoo().address(), Foo.sizeof(), arena.scope());\n+        try (Arena arena = Arena.ofConfined()) {\n+            var seg = MemorySegment.ofAddress(getFoo().address(), Foo.sizeof(), arena);\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -56,1 +56,1 @@\n-             }, arena.scope()));\n+             }, arena));\n@@ -63,1 +63,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -74,1 +74,1 @@\n-             }, arena.scope()));\n+             }, arena));\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -52,1 +52,1 @@\n-            var sumIface = Foo.sum.ofAddress(funcPtr, arena.scope());\n+            var sumIface = Foo.sum.ofAddress(funcPtr, arena);\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-        try (Arena arena = Arena.openConfined()) {\n-            var handle = func$f.allocate(x -> x * x, arena.scope());\n+        try (Arena arena = Arena.ofConfined()) {\n+            var handle = func$f.allocate(x -> x * x, arena);\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -61,1 +61,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -72,1 +72,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        assertEquals(global.layout().get().bitSize(), size);\n+        assertEquals(((Declaration.Bitfield)global).width(), size);\n","filename":"test\/lib\/testlib\/JextractApiTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,2 @@\n-    public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS.withBitAlignment(ValueLayout.ADDRESS.bitSize()).asUnbounded();\n+    public static final ValueLayout.OfAddress C_POINTER = ValueLayout.ADDRESS\n+            .withTargetLayout(MemoryLayout.sequenceLayout(C_CHAR));\n","filename":"test\/lib\/testlib\/JextractToolRunner.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.foreign.SegmentScope;\n+import java.lang.foreign.Arena;\n@@ -187,1 +187,1 @@\n-        try (Arena arena = Arena.openConfined()) {\n+        try (Arena arena = Arena.ofConfined()) {\n@@ -206,1 +206,1 @@\n-        checkMethod(fiClass, \"allocate\", MemorySegment.class, fiClass, SegmentScope.class);\n+        checkMethod(fiClass, \"allocate\", MemorySegment.class, fiClass, Arena.class);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-                try (Arena arena = Arena.openConfined()) {\n+                try (Arena arena = Arena.ofConfined()) {\n@@ -170,1 +170,1 @@\n-                try (Arena arena = Arena.openConfined()) {\n+                try (Arena arena = Arena.ofConfined()) {\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}