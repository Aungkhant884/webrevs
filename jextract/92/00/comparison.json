{"files":[{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -56,2 +56,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var a = session.allocateArray(C_DOUBLE,\n+        try (var arena = Arena.openConfined()) {\n+            var a = arena.allocateArray(C_DOUBLE,\n@@ -63,1 +63,1 @@\n-            var x = session.allocateArray(C_DOUBLE,\n+            var x = arena.allocateArray(C_DOUBLE,\n@@ -66,1 +66,1 @@\n-            var y = session.allocateArray(C_DOUBLE, n);\n+            var y = arena.allocateArray(C_DOUBLE, n);\n","filename":"samples\/cblas\/TestBlas.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,3 +43,3 @@\n-        try (MemorySession libOpenSession = MemorySession.openConfined()) {\n-            var handle = dlopen(libOpenSession.allocateUtf8String(libraryName), RTLD_LOCAL());\n-            if (handle == MemorySegment.NULL) {\n+        try (Arena libArena = Arena.openConfined()) {\n+            var handleAddr = dlopen(libArena.allocateUtf8String(libraryName), RTLD_LOCAL());\n+            if (handleAddr.equals(MemorySegment.NULL)) {\n@@ -48,1 +48,2 @@\n-            session.addCloseAction(() -> dlclose(handle));\n+            var handle = MemorySegment.ofAddress(handleAddr.address(), 0, session,\n+                () -> dlclose(handleAddr));\n@@ -50,3 +51,5 @@\n-                var addr = dlsym(handle, session.allocateUtf8String(name));\n-                return addr == MemorySegment.NULL ?\n-                            Optional.empty() : Optional.of(addr);\n+                try (var arena = Arena.openConfined()) {\n+                    var addr = dlsym(handle, arena.allocateUtf8String(name));\n+                    return addr.equals(MemorySegment.NULL) ?\n+                        Optional.empty() : Optional.of(addr);\n+                }\n@@ -60,2 +63,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var symLookup = lookup(libName, session);\n+        try (var arena = Arena.openConfined()) {\n+            var symLookup = lookup(libName, arena.session());\n@@ -70,1 +73,1 @@\n-            greetingMH.invoke(session.allocateUtf8String(arg));\n+            greetingMH.invoke(arena.allocateUtf8String(arg));\n","filename":"samples\/dlopen\/Dlopen.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -42,2 +42,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var A = session.allocateArray(C_DOUBLE,\n+        try (var arena = Arena.openConfined()) {\n+            var A = arena.allocateArray(C_DOUBLE,\n@@ -46,1 +46,1 @@\n-            var b = session.allocateArray(C_DOUBLE,\n+            var b = arena.allocateArray(C_DOUBLE,\n","filename":"samples\/lapack\/TestLapack.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        try (var session = MemorySession.openConfined()) {\n+        try (var arena = Arena.openConfined()) {\n@@ -53,1 +53,1 @@\n-            var tu = clang_parseTranslationUnit(index, session.allocateUtf8String(args[0]),\n+            var tu = clang_parseTranslationUnit(index, arena.allocateUtf8String(args[0]),\n@@ -62,2 +62,2 @@\n-                var name = asJavaString(clang_getCursorSpelling(session, cursor));\n-                var kindName = asJavaString(clang_getCursorKindSpelling(session, kind));\n+                var name = asJavaString(clang_getCursorSpelling(arena, cursor));\n+                var kindName = asJavaString(clang_getCursorKindSpelling(arena, kind));\n@@ -65,1 +65,1 @@\n-                var type = clang_getCursorType(session, cursor);\n+                var type = clang_getCursorType(arena, cursor);\n@@ -67,1 +67,1 @@\n-                    var typeName = asJavaString(clang_getTypeSpelling(session, type));\n+                    var typeName = asJavaString(clang_getTypeSpelling(arena, type));\n@@ -78,1 +78,1 @@\n-            }, session);\n+            }, arena.session());\n@@ -81,1 +81,1 @@\n-            var root = clang_getTranslationUnitCursor(session, tu);\n+            var root = clang_getTranslationUnitCursor(arena, tu);\n","filename":"samples\/libclang\/ASTPrinter.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -44,2 +44,2 @@\n-           try (var session = MemorySession.openConfined()) {\n-               var url = session.allocateUtf8String(urlStr);\n+           try (var arena = Arena.openConfined()) {\n+               var url = arena.allocateUtf8String(urlStr);\n","filename":"samples\/libcurl\/CurlMain.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-            var fileName = session.allocateUtf8String(args[0]);\n+            var fileName = arena.allocateUtf8String(args[0]);\n@@ -96,1 +96,1 @@\n-            session.addCloseAction(()-> {\n+            arena.addCloseAction(()-> {\n","filename":"samples\/libffmpeg\/LibffmpegMain.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.2_4\/include \\\n+  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.3\/include \\\n","filename":"samples\/libffmpeg\/compile.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.2_4\/include \\\n+  -I \/usr\/local\/Cellar\/ffmpeg@4\/4.4.3\/include \\\n","filename":"samples\/libffmpeg\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-   -Djava.library.path=\/usr\/local\/Cellar\/ffmpeg@4\/4.4.2_4\/lib LibffmpegMain.java $*\n+   -Djava.library.path=\/usr\/local\/Cellar\/ffmpeg@4\/4.4.3\/lib LibffmpegMain.java $*\n","filename":"samples\/libffmpeg\/run.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -45,4 +45,4 @@\n-          try (var session = MemorySession.openConfined()) {\n-              var repo = session.allocate(C_POINTER);\n-              var url = session.allocateUtf8String(args[0]);\n-              var path = session.allocateUtf8String(args[1]);\n+          try (var arena = Arena.openConfined()) {\n+              var repo = arena.allocate(C_POINTER);\n+              var url = arena.allocateUtf8String(args[0]);\n+              var path = arena.allocateUtf8String(args[1]);\n","filename":"samples\/libgit2\/GitClone.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -49,3 +49,3 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var jintResPtr = session.allocate(jint);\n-            var moduleFilePath = session.allocateUtf8String(javaHome + \"\/lib\/modules\");\n+        try (var arena = Arena.openConfined()) {\n+            var jintResPtr = arena.allocate(jint);\n+            var moduleFilePath = arena.allocateUtf8String(javaHome + \"\/lib\/modules\");\n@@ -59,1 +59,1 @@\n-                session.allocateUtf8String(\"java\/util\"));\n+                arena.allocateUtf8String(\"java\/util\"));\n@@ -71,1 +71,1 @@\n-                }, session);\n+                }, arena.session());\n","filename":"samples\/libjimage\/JImageFile.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align);\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.implicit());\n","filename":"samples\/libjimage\/org\/openjdk\/RuntimeHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -43,1 +43,1 @@\n-        try (var session = MemorySession.openConfined()) {\n+        try (var arena = Arena.openConfined()) {\n@@ -47,1 +47,1 @@\n-            var pids = session.allocateArray(C_INT, numPids);\n+            var pids = arena.allocateArray(C_INT, numPids);\n@@ -53,1 +53,1 @@\n-            var nameBuf = session.allocateArray(C_CHAR, NAME_BUF_MAX);\n+            var nameBuf = arena.allocateArray(C_CHAR, NAME_BUF_MAX);\n","filename":"samples\/libproc\/LibprocMain.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-        try (var session = MemorySession.openConfined()) {\n+        try (var arena = Arena.openConfined()) {\n@@ -88,1 +88,1 @@\n-            var uncompressedText = session.allocateUtf8String(TEXT);\n+            var uncompressedText = arena.allocateUtf8String(TEXT);\n@@ -90,1 +90,1 @@\n-            var compressedText = session.allocate(TEXT.length());\n+            var compressedText = arena.allocate(TEXT.length());\n@@ -102,1 +102,1 @@\n-            var decompressed = session.allocate(TEXT.length() * 2, 64); \/\/ Needs extra space to decompress\n+            var decompressed = arena.allocate(TEXT.length() * 2, 64); \/\/ Needs extra space to decompress\n","filename":"samples\/libzstd\/LibzstdMain.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,3 +50,3 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var colno = session.allocateArray(C_INT, Ncol);\n-            var row = session.allocateArray(C_DOUBLE, Ncol);\n+        try (var arena = Arena.openConfined()) {\n+            var colno = arena.allocateArray(C_INT, Ncol);\n+            var row = arena.allocateArray(C_DOUBLE, Ncol);\n","filename":"samples\/lp_solve\/LpSolveDemo.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    try (var session = MemorySession.openConfined()) {\n+    try (var session = Arena.openConfined()) {\n","filename":"samples\/pcre2\/PcreCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -44,2 +44,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var str = session.allocateUtf8String(script);\n+        try (var arena = Arena.openConfined()) {\n+            var str = arena.allocateUtf8String(script);\n","filename":"samples\/python3\/PythonMain.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -39,2 +39,2 @@\n-       try (var session = MemorySession.openConfined()) {\n-            var url = session.allocateUtf8String(\"name? \");\n+       try (var arena = Arena.openConfined()) {\n+            var url = arena.allocateUtf8String(\"name? \");\n","filename":"samples\/readline\/Readline.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -41,1 +41,1 @@\n-        try (var session = MemorySession.openConfined()) {\n+        try (var arena = Arena.openConfined()) {\n@@ -43,1 +43,1 @@\n-            var errMsgPtrPtr = session.allocate(C_POINTER);\n+            var errMsgPtrPtr = arena.allocate(C_POINTER);\n@@ -46,1 +46,1 @@\n-            var dbPtrPtr = session.allocate(C_POINTER);\n+            var dbPtrPtr = arena.allocate(C_POINTER);\n@@ -48,1 +48,1 @@\n-            int rc = sqlite3_open(session.allocateUtf8String(\"employee.db\"), dbPtrPtr);\n+            int rc = sqlite3_open(arena.allocateUtf8String(\"employee.db\"), dbPtrPtr);\n@@ -60,1 +60,1 @@\n-            var sql = session.allocateUtf8String(\n+            var sql = arena.allocateUtf8String(\n@@ -77,1 +77,1 @@\n-            sql = session.allocateUtf8String(\n+            sql = arena.allocateUtf8String(\n@@ -98,2 +98,2 @@\n-                var argv_seg = MemorySegment.ofAddress(argv.address(), C_POINTER.byteSize() * argc, session);\n-                var columnNames_seg = MemorySegment.ofAddress(columnNames.address(), C_POINTER.byteSize() * argc, session);\n+                var argv_seg = MemorySegment.ofAddress(argv.address(), C_POINTER.byteSize() * argc, arena.session());\n+                var columnNames_seg = MemorySegment.ofAddress(columnNames.address(), C_POINTER.byteSize() * argc, arena.session());\n@@ -107,1 +107,1 @@\n-            }, session);\n+            }, arena.session());\n@@ -110,1 +110,1 @@\n-            sql = session.allocateUtf8String(\"SELECT * FROM EMPLOYEE\");\n+            sql = arena.allocateUtf8String(\"SELECT * FROM EMPLOYEE\");\n","filename":"samples\/sqlite\/SqliteMain.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -56,2 +56,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var str = session.allocateUtf8String(script);\n+        try (var arena = Arena.openConfined()) {\n+            var str = arena.allocateUtf8String(script);\n","filename":"samples\/tcl\/TCLMain.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,2 +48,1 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var allocator = SegmentAllocator.newNativeArena(session);\n+        try (var arena = Arena.openConfined()) {\n@@ -54,2 +53,2 @@\n-            var savedModelDir = allocator.allocateUtf8String(args[0]);\n-            var tags = allocator.allocate(C_POINTER, allocator.allocateUtf8String(\"serve\"));\n+            var savedModelDir = arena.allocateUtf8String(args[0]);\n+            var tags = arena.allocate(C_POINTER, arena.allocateUtf8String(\"serve\"));\n@@ -66,1 +65,1 @@\n-            var size = allocator.allocate(C_LONG_LONG);\n+            var size = arena.allocate(C_LONG_LONG);\n","filename":"samples\/tensorflow\/TensorflowLoadSavedModel.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var now = session.allocate(C_LONG, System.currentTimeMillis() \/ 1000);\n-            MemorySegment time = tm.allocate(session);\n+        try (var arena = Arena.openConfined()) {\n+            var now = arena.allocate(C_LONG, System.currentTimeMillis() \/ 1000);\n+            MemorySegment time = tm.allocate(arena);\n","filename":"samples\/time\/PanamaTime.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -41,2 +42,1 @@\n-    protected final MemorySession session;\n-    protected final SegmentAllocator arena;\n+    protected final Arena arena;\n@@ -45,4 +45,2 @@\n-        this.session = MemorySession.openConfined();\n-        this.ptr = MemorySegment.ofAddress(ptr.address(), size, session).asReadOnly();\n-        session.addCloseAction(cleanup);\n-        this.arena = SegmentAllocator.newNativeArena(session);\n+        this.arena = Arena.openConfined();\n+        this.ptr = MemorySegment.ofAddress(ptr.address(), size, arena.session(), cleanup).asReadOnly();\n@@ -57,1 +55,1 @@\n-        session.close();\n+        arena.close();\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/ClangDisposable.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -122,2 +123,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(session)) != 0) {\n+        try (Arena arena = Arena.openConfined()) {\n+            if (Index_h.clang_equalLocations(loc, Index_h.clang_getNullLocation(arena)) != 0) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Cursor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -73,4 +74,3 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            SegmentAllocator allocator = SegmentAllocator.newNativeArena(session);\n-            MemorySegment src = allocator.allocateUtf8String(file);\n-            MemorySegment cargs = args.length == 0 ? null : allocator.allocateArray(C_POINTER, args.length);\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment src = arena.allocateUtf8String(file);\n+            MemorySegment cargs = args.length == 0 ? null : arena.allocateArray(C_POINTER, args.length);\n@@ -78,1 +78,1 @@\n-                cargs.set(C_POINTER, i * C_POINTER.byteSize(), allocator.allocateUtf8String(args[i]));\n+                cargs.set(C_POINTER, i * C_POINTER.byteSize(), arena.allocateUtf8String(args[i]));\n@@ -80,1 +80,1 @@\n-            MemorySegment outAddress = allocator.allocate(C_POINTER);\n+            MemorySegment outAddress = arena.allocate(C_POINTER);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Index.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    private static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> MemorySegment.allocateNative(size, align);\n+    private static final SegmentAllocator IMPLICIT_ALLOCATOR = (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.implicit());\n@@ -90,1 +90,1 @@\n-            MemorySegment.allocateNative(CXString.sizeof(), 8));\n+            MemorySegment.allocateNative(CXString.sizeof(), 8, MemorySession.implicit()));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/LibClang.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.foreign.Arena;\n@@ -57,5 +58,5 @@\n-        try (var session = MemorySession.openConfined()) {\n-             MemorySegment file = session.allocate(C_POINTER);\n-             MemorySegment line = session.allocate(C_INT);\n-             MemorySegment col = session.allocate(C_INT);\n-             MemorySegment offset = session.allocate(C_INT);\n+        try (var arena = Arena.openConfined()) {\n+             MemorySegment file = arena.allocate(C_POINTER);\n+             MemorySegment line = arena.allocate(C_INT);\n+             MemorySegment col = arena.allocate(C_INT);\n+             MemorySegment offset = arena.allocate(C_INT);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/SourceLocation.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -59,3 +60,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var allocator = session;\n-            MemorySegment pathStr = allocator.allocateUtf8String(path.toAbsolutePath().toString());\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment pathStr = arena.allocateUtf8String(path.toAbsolutePath().toString());\n@@ -83,2 +83,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var allocator = SegmentAllocator.newNativeArena(session);\n+        try (Arena arena = Arena.openConfined()) {\n@@ -87,1 +86,1 @@\n-                    allocator.allocateArray(CXUnsavedFile.$LAYOUT(), inMemoryFiles.length);\n+                    arena.allocateArray(CXUnsavedFile.$LAYOUT(), inMemoryFiles.length);\n@@ -90,2 +89,2 @@\n-                start.set(C_POINTER, FILENAME_OFFSET, allocator.allocateUtf8String(inMemoryFiles[i].file));\n-                start.set(C_POINTER, CONTENTS_OFFSET, allocator.allocateUtf8String(inMemoryFiles[i].contents));\n+                start.set(C_POINTER, FILENAME_OFFSET, arena.allocateUtf8String(inMemoryFiles[i].file));\n+                start.set(C_POINTER, CONTENTS_OFFSET, arena.allocateUtf8String(inMemoryFiles[i].contents));\n@@ -126,3 +125,3 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            MemorySegment p = session.allocate(C_POINTER);\n-            MemorySegment pCnt = session.allocate(C_INT);\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment p = arena.allocate(C_POINTER);\n+            MemorySegment pCnt = arena.allocate(C_INT);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/TranslationUnit.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.foreign.Arena;\n@@ -108,2 +109,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            MemorySegment cfname = session.allocateUtf8String(fieldName);\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment cfname = arena.allocateUtf8String(fieldName);\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/Type.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+\n@@ -58,1 +59,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align);\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.implicit());\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/libclang\/RuntimeHelper.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-            (size, align) -> MemorySegment.allocateNative(size, align);\n+            (size, align) -> MemorySegment.allocateNative(size, align, MemorySession.implicit());\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/RuntimeHelper.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -51,1 +52,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -53,3 +54,3 @@\n-            MemorySegment bar = Bar.allocate(session);\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), session));\n-            Bar.foo(bar, session).apply(42);\n+            MemorySegment bar = Bar.allocate(arena);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena.session()));\n+            Bar.foo(bar, arena.session()).apply(42);\n@@ -62,1 +63,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -64,3 +65,3 @@\n-            MemorySegment bar = Bar.allocate(session);\n-            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), session));\n-            Foo.ofAddress(Bar.foo$get(bar), session).apply(42);\n+            MemorySegment bar = Bar.allocate(arena);\n+            Bar.foo$set(bar, Foo.allocate((i) -> val.set(i), arena.session()));\n+            Foo.ofAddress(Bar.foo$get(bar), arena.session()).apply(42);\n@@ -73,1 +74,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -75,1 +76,1 @@\n-            f$set(Foo.allocate((i) -> val.set(i), session));\n+            f$set(Foo.allocate((i) -> val.set(i), arena.session()));\n@@ -83,1 +84,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -85,2 +86,2 @@\n-            f$set(Foo.allocate((i) -> val.set(i), session));\n-            Foo.ofAddress(f$get(), session).apply(42);\n+            f$set(Foo.allocate((i) -> val.set(i), arena.session()));\n+            Foo.ofAddress(f$get(), arena.session()).apply(42);\n@@ -93,1 +94,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -95,3 +96,3 @@\n-            MemorySegment baz = Baz.allocate(session);\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), session));\n-            Baz.fp(baz, session).apply(42);\n+            MemorySegment baz = Baz.allocate(arena);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena.session()));\n+            Baz.fp(baz, arena.session()).apply(42);\n@@ -104,1 +105,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -106,3 +107,3 @@\n-            MemorySegment baz = Baz.allocate(session);\n-            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), session));\n-            Baz.fp.ofAddress(Baz.fp$get(baz), session).apply(42);\n+            MemorySegment baz = Baz.allocate(arena);\n+            Baz.fp$set(baz, Baz.fp.allocate((i) -> val.set(i), arena.session()));\n+            Baz.fp.ofAddress(Baz.fp$get(baz), arena.session()).apply(42);\n@@ -115,1 +116,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -117,1 +118,1 @@\n-            fp$set(fp.allocate((i) -> val.set(i), session));\n+            fp$set(fp.allocate((i) -> val.set(i), arena.session()));\n@@ -125,1 +126,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -127,2 +128,2 @@\n-            fp$set(fp.allocate((i) -> val.set(i), session));\n-            fp.ofAddress(fp$get(), session).apply(42);\n+            fp$set(fp.allocate((i) -> val.set(i), arena.session()));\n+            fp.ofAddress(fp$get(), arena.session()).apply(42);\n@@ -135,3 +136,3 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            fp_addr$set(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), session));\n-            assertEquals(fp_addr.ofAddress(fp_addr$get(), session).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n+        try (Arena arena = Arena.openConfined()) {\n+            fp_addr$set(fp_addr.allocate((addr) -> MemorySegment.ofAddress(addr.address() + 1), arena.session()));\n+            assertEquals(fp_addr.ofAddress(fp_addr$get(), arena.session()).apply(MemorySegment.ofAddress(42)), MemorySegment.ofAddress(43));\n","filename":"test\/jtreg\/generator\/funcPointerInvokers\/TestFuncPointerInvokers.java","additions":30,"deletions":29,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.lang.foreign.Arena;\n@@ -26,1 +27,0 @@\n-import java.lang.foreign.MemorySession;\n@@ -54,2 +54,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var addr = session.allocate(mysize_t, 0L);\n+        try (var arena = Arena.openConfined()) {\n+            var addr = arena.allocate(mysize_t, 0L);\n","filename":"test\/jtreg\/generator\/test8244412\/LibTest8244412Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+\n+import java.lang.foreign.Arena;\n@@ -50,2 +52,2 @@\n-         try (MemorySession session = MemorySession.openConfined()) {\n-             var seg = func(session);\n+         try (Arena arena = Arena.openConfined()) {\n+             var seg = func(arena);\n","filename":"test\/jtreg\/generator\/test8244938\/Test8244938.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -52,2 +53,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            MemorySegment s = session.allocate(1024);\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment s = arena.allocate(1024);\n@@ -55,1 +56,1 @@\n-                    session.allocateUtf8String(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n+                    arena.allocateUtf8String(\"%hhd %c %.2f %.2f %lld %lld %d %hd %d %d %lld %c\"), 12,\n","filename":"test\/jtreg\/generator\/test8244959\/Test8244959.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -54,1 +55,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -62,1 +63,1 @@\n-            }, session);\n+            }, arena.session());\n@@ -70,2 +71,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var addr = session.allocate(C_POINTER);\n+        try (var arena = Arena.openConfined()) {\n+            var addr = arena.allocate(C_POINTER);\n","filename":"test\/jtreg\/generator\/test8246341\/LibTest8246341Test.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -52,2 +53,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var v1 = Vector.allocate(session);\n+        try (Arena arena = Arena.openConfined()) {\n+            var v1 = Vector.allocate(arena);\n@@ -57,1 +58,1 @@\n-            var v2 = Vector.allocate(session);\n+            var v2 = Vector.allocate(arena);\n@@ -61,1 +62,1 @@\n-            sum = add(session, v1, v2);\n+            sum = add(arena, v1, v2);\n@@ -69,1 +70,1 @@\n-            }, session);\n+            }, arena.session());\n","filename":"test\/jtreg\/generator\/test8246400\/LibTest8246400Test.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -53,2 +54,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            MemorySegment s = session.allocate(1024);\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment s = arena.allocate(1024);\n@@ -60,2 +61,2 @@\n-            }, session);\n-            my_vsprintf(s, session.allocateUtf8String(\"%hhd %.2f %lld %lld\"), vaList.segment());\n+            }, arena.session());\n+            my_vsprintf(s, arena.allocateUtf8String(\"%hhd %.2f %lld %lld\"), vaList.segment());\n","filename":"test\/jtreg\/generator\/test8252016\/Test8252016.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.lang.foreign.Arena;\n@@ -54,1 +55,1 @@\n-        try (var session = MemorySession.openConfined()) {\n+        try (var arena = Arena.openConfined()) {\n@@ -56,1 +57,1 @@\n-            MemorySegment seg = session.allocateArray(C_INT, array);\n+            MemorySegment seg = arena.allocateArray(C_INT, array);\n","filename":"test\/jtreg\/generator\/test8252121\/Test8252121.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -51,2 +52,2 @@\n-        try (var session = MemorySession.openConfined()) {\n-            var foo = Foo.allocate(session);\n+        try (var arena = Arena.openConfined()) {\n+            var foo = Foo.allocate(arena);\n@@ -55,1 +56,1 @@\n-            var bar = Bar.allocate(session);\n+            var bar = Bar.allocate(arena);\n","filename":"test\/jtreg\/generator\/test8252465\/LibTest8252465Test.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+\n+import java.lang.foreign.Arena;\n@@ -52,1 +54,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -54,1 +56,1 @@\n-            MemorySegment seg = Point.ofAddress(addr, session);\n+            MemorySegment seg = Point.ofAddress(addr, arena.session());\n","filename":"test\/jtreg\/generator\/test8253102\/LibTest8253102Test.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -51,1 +52,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -53,1 +54,1 @@\n-            MemorySegment str = Foo._struct.allocate(session);\n+            MemorySegment str = Foo._struct.allocate(arena);\n@@ -62,2 +63,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            MemorySegment str = Foo._union._struct.allocate(session);\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment str = Foo._union._struct.allocate(arena);\n","filename":"test\/jtreg\/generator\/test8254983\/LibTest8254983Test.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -56,2 +57,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var seg = Foo.allocate(session);\n+        try (Arena arena = Arena.openConfined()) {\n+            var seg = Foo.allocate(arena);\n@@ -67,2 +68,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var seg = MemorySegment.ofAddress(getFoo().address(), Foo.sizeof(), session);\n+        try (Arena arena = Arena.openConfined()) {\n+            var seg = MemorySegment.ofAddress(getFoo().address(), Foo.sizeof(), arena.session());\n","filename":"test\/jtreg\/generator\/test8257892\/LibUnsupportedTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -51,1 +52,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -56,1 +57,1 @@\n-             }, session));\n+             }, arena.session()));\n@@ -63,1 +64,1 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n+        try (Arena arena = Arena.openConfined()) {\n@@ -67,1 +68,1 @@\n-             var foo = getFoo(session);\n+             var foo = getFoo(arena);\n@@ -74,1 +75,1 @@\n-             }, session));\n+             }, arena.session()));\n","filename":"test\/jtreg\/generator\/test8258605\/LibTest8258605Test.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+\n+import java.lang.foreign.Arena;\n@@ -49,3 +51,3 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var funcPtr = Foo.sum$get(get_foo(session));\n-            var sumIface = Foo.sum.ofAddress(funcPtr, session);\n+        try (Arena arena = Arena.openConfined()) {\n+            var funcPtr = Foo.sum$get(get_foo(arena));\n+            var sumIface = Foo.sum.ofAddress(funcPtr, arena.session());\n","filename":"test\/jtreg\/generator\/test8261511\/Test8261511.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -46,2 +47,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var handle = func$f.allocate(x -> x * x, session);\n+        try (Arena arena = Arena.openConfined()) {\n+            var handle = func$f.allocate(x -> x * x, arena.session());\n","filename":"test\/jtreg\/generator\/testFunctionPointer\/LibFuncPtrTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.lang.foreign.Arena;\n@@ -52,2 +53,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var seg = makePoint(session, 42, -39);\n+        try (Arena arena = Arena.openConfined()) {\n+            var seg = makePoint(arena, 42, -39);\n@@ -61,2 +62,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var seg = Point.allocate(session);\n+        try (Arena arena = Arena.openConfined()) {\n+            var seg = Point.allocate(arena);\n@@ -72,2 +73,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            var seg = Point.allocateArray(3, session);\n+        try (Arena arena = Arena.openConfined()) {\n+            var seg = Point.allocateArray(3, arena);\n","filename":"test\/jtreg\/generator\/testStruct\/LibStructTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.lang.foreign.Arena;\n@@ -188,2 +189,2 @@\n-        try (MemorySession session = MemorySession.openConfined()) {\n-            MemorySegment struct = session.allocate(structLayout);\n+        try (Arena arena = Arena.openConfined()) {\n+            MemorySegment struct = arena.allocate(structLayout);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import java.lang.foreign.MemorySession;\n+import java.lang.foreign.Arena;\n@@ -158,2 +158,2 @@\n-                try (MemorySession session = MemorySession.openConfined()) {\n-                    MemorySegment struct = session.allocate(layout);\n+                try (Arena arena = Arena.openConfined()) {\n+                    MemorySegment struct = arena.allocate(layout);\n@@ -170,2 +170,2 @@\n-                try (MemorySession session = MemorySession.openConfined()) {\n-                    MemorySegment struct = session.allocate(layout);\n+                try (Arena arena = Arena.openConfined()) {\n+                    MemorySegment struct = arena.allocate(layout);\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}