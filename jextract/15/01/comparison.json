{"files":[{"patch":"@@ -98,1 +98,7 @@\n-    InclusionDirective(CXCursor_InclusionDirective());\n+    InclusionDirective(CXCursor_InclusionDirective()),\n+    \/*\n+     * Per libclang API docs, clang returns this CursorKind\n+     * for both C11 _Static_assert and C++11 static_assert\n+     *\/\n+    StaticAssert(CXCursor_StaticAssert());\n+\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/clang\/CursorKind.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,1 +65,9 @@\n-        if (lang != CursorLanguage.C && lang != CursorLanguage.Invalid) {\n+        \/*\n+         * We detect non-C constructs to early exit with error for\n+         * unsupported features. But libclang maps both C11's _Static_assert\n+         * and C++11's static_assert to same CursorKind. But the language is\n+         * set a C++ always. Because we want to allow C11's _Static_Assert,\n+         * we allow that exception here.\n+         *\/\n+        if (lang != CursorLanguage.C && lang != CursorLanguage.Invalid &&\n+                c.kind() != CursorKind.StaticAssert) {\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/impl\/TreeMaker.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider;\n+\n+import org.openjdk.jextract.test.TestUtils;\n+import org.testng.annotations.Test;\n+import java.nio.file.Path;\n+import static org.testng.Assert.assertNotNull;\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @build JextractToolRunner\n+ * @bug 7903148\n+ * @summary jextract crashes when C11 keyword _Static_Assert is used in a header\n+ * @run testng\/othervm --enable-native-access=ALL-UNNAMED Test7903148\n+ *\/\n+public class Test7903148 extends JextractToolRunner {\n+    @Test\n+    public void test() {\n+        Path output = getOutputFilePath(\"7903148gen\");\n+        Path outputH = getInputFilePath(\"test7903148.h\");\n+        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(output)) {\n+            Class<?> headerCls = loader.loadClass(\"test7903148_h\");\n+            assertNotNull(headerCls);\n+            checkMethod(headerCls, \"func\", int.class, int.class);\n+        } finally {\n+            TestUtils.deleteDir(output);\n+        }\n+    }\n+}\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903148.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -24,2 +24,3 @@\n-typedef void func(int foo);\n-typedef void (*fptr)(int x, int y);\n+_Static_assert(1 == 1, \"what??\");\n+\n+int func(int x);\n","filename":"test\/java\/org\/openjdk\/jextract\/test\/toolprovider\/test7903148.h","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/generator\/test8281764\/test8281764.h","status":"copied"}]}