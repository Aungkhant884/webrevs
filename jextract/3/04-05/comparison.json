{"files":[{"patch":"@@ -113,0 +113,15 @@\n+#### Command line options\n+\n+The `jextract` tool includes several customization options. Users can select in which package the generated code should be emitted, and what the name of the main extracted class should be. A complete list of all the supported options is given below:\n+\n+| Option                                                       | Meaning                                                      |\n+| ------------------------------------------------------------ | ------------------------------------------------------------ |\n+| `--header-class-name` <String>                               | specify the name the main header class                       |\n+| `-t, --target-package` <String>                              | specify target package for the generated bindings            |\n+| `-I` <String>                                                | specify include files path for the clang parser              |\n+| `-l` <String>                                                | specify a library that will be loaded by the generated bindings |\n+| `-d` <String>                                                | specify where to place generated files                       |\n+| `--source`                                                   | generate java sources instead of classfiles                  |\n+| `--dump-includes` <String>                                   | dump included symbols into specified file (see below)        |\n+| `--include-function` <String><br \/>`--include-macro` <String><br \/>`--include-struct` <String><br \/>`--include-union` <String><br \/>`--include-typedef` <String><br \/>`--include-var` <String> | Include a symbol of the given name and kind in the generated bindings (see below).<br \/>When one of these options is specified, any symbols that is not matched by any specified filters is omitted from the generated bindings. |\n+\n@@ -115,1 +130,1 @@\n-The `jextract` tool includes several customization options. Users can select in which package the generated code should be emitted, and what the name of the main extracted class should be. To allow for symbol filtering, `jextract` can generate a *dump* of all the symbols encountered in an header file; this dump can be manipulated, and then used as an argument file (using the `@argfile` syntax also available in other JDK tools) to e.g. generate bindings only for a *subset* of symbols seen by `jextract`. For instance, if we run `jextract` with as follows:\n+To allow for symbol filtering, `jextract` can generate a *dump* of all the symbols encountered in an header file; this dump can be manipulated, and then used as an argument file (using the `@argfile` syntax also available in other JDK tools) to e.g. generate bindings only for a *subset* of symbols seen by `jextract`. For instance, if we run `jextract` with as follows:\n","filename":"README.md","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"}]}