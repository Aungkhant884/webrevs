{"files":[{"patch":"@@ -3,1 +3,1 @@\n-`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated to a given native library, and the generated Java bindings builds upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/419). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n+`jextract` is a tool which mechanically generates Java bindings from a native library headers. This tools leverages the [clang C API](https:\/\/clang.llvm.org\/doxygen\/group__CINDEX.html) in order to parse the headers associated with a given native library, and the generated Java bindings build upon the [Foreign Function & Memory API](https:\/\/openjdk.java.net\/jeps\/419). The `jextract` tool was originally developed in the context of [Project Panama](https:\/\/openjdk.java.net\/projects\/panama\/) (and then made available in the Project Panama [Early Access binaries](https:\/\/jdk.java.net\/panama\/)).\n@@ -115,1 +115,1 @@\n-The `jextract` tool includes several customization options. Users can select what in which package the generated code should be emitted, and what the name of the main extracted class should be. To allow for symbol filtering, `jextract` can generate a *dump* of all the symbols encountered in an header file; this dump can be manipulated, and then used as an argument file (using the `@argfile` syntax also available in other JDK tools) to e.g. generate bindings only for a *subset* of symbols seen by `jextract`. For instance, if we run `jextract` with as follows:\n+The `jextract` tool includes several customization options. Users can select in which package the generated code should be emitted, and what the name of the main extracted class should be. To allow for symbol filtering, `jextract` can generate a *dump* of all the symbols encountered in an header file; this dump can be manipulated, and then used as an argument file (using the `@argfile` syntax also available in other JDK tools) to e.g. generate bindings only for a *subset* of symbols seen by `jextract`. For instance, if we run `jextract` with as follows:\n","filename":"README.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}