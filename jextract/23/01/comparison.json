{"files":[{"patch":"@@ -121,5 +121,6 @@\n-| `--header-class-name <String>`                               | specify the name of the main header class                       |\n-| `-t, --target-package <String>`                              | specify target package for the generated bindings            |\n-| `-I <String>`                                                | specify include files path for the clang parser              |\n-| `-l <String>`                                                | specify a library that will be loaded by the generated bindings |\n-| `-d <String>`                                                | specify where to place generated files                       |\n+| `-D <macro>`                                                 | define a C preprocessor macro                                |\n+| `--header-class-name <name>`                                 | specify the name of the main header class                    |\n+| `-t, --target-package <package>`                             | specify target package for the generated bindings            |\n+| `-I <path>`                                                  | specify include files path for the clang parser              |\n+| `-l <library>`                                               | specify a library that will be loaded by the generated bindings |\n+| `--output <path>`                                            | specify where to place generated files                       |\n@@ -130,0 +131,5 @@\n+#### clang compiler extra options\n+\n+If you want to pass extra options to clang compiler, you can create a file named _compile_flags.txt_ in the current directory.\n+That text file can contain clang compiler options one per each line.\n+\n","filename":"README.md","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-    args = [ \"test.h\", \"-d\", \"$buildDir\/integration_test\" ]\n+    args = [ \"test.h\", \"--output\", \"$buildDir\/integration_test\" ]\n","filename":"build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-jextract -C \"-D FORCE_OPENBLAS_COMPLEX_STRUCT\" \\\n+jextract -D FORCE_OPENBLAS_COMPLEX_STRUCT \\\n","filename":"samples\/cblas\/compile.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-jextract --source -C \"-D FORCE_OPENBLAS_COMPLEX_STRUCT\" \\\n+jextract --source -D FORCE_OPENBLAS_COMPLEX_STRUCT \\\n","filename":"samples\/cblas\/compilesource.sh","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"samples\/libjimage\/compilesource.sh","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"samples\/libjimage\/compile.sh","status":"copied"},{"patch":"@@ -3,1 +3,0 @@\n-  -C-F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks \\\n","filename":"samples\/opengl\/compile.sh","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+-F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks\n","filename":"samples\/opengl\/compile_flags.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"added"},{"patch":"@@ -3,1 +3,0 @@\n-  -C-F\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX.sdk\/System\/Library\/Frameworks \\\n","filename":"samples\/opengl\/compilesource.sh","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-        \/\/ -lclang => -l, -C-xc++ -> -C\n+        \/\/ -lclang => -l, -DFOO -> -D\n@@ -253,1 +253,1 @@\n-        \/\/ -lclang => clang, -C-xc++ -> -xc++\n+        \/\/ -lclang => clang, -DFOO -> FOO\n@@ -271,1 +271,1 @@\n-                   \/\/ Examples: -lclang, -C-xc++\n+                   \/\/ Examples: -lclang, -DFOO\n@@ -291,1 +291,1 @@\n-                       } \/\/ else -C-xc++ like case. argValue already set\n+                       } \/\/ else -DFOO like case. argValue already set\n@@ -293,0 +293,5 @@\n+                       \/\/ do not allow argument value to start with '-'\n+                       \/\/ this will catch issues like \"-l-lclang\", \"-l -t\"\n+                       if (argValue.charAt(0) == '-') {\n+                           throw new OptionException(spec.help());\n+                       }\n@@ -328,2 +333,1 @@\n-        parser.accepts(\"-C\", format(\"help.C\"), true);\n-        parser.accepts(\"-d\", format(\"help.d\"), true);\n+        parser.accepts(\"-D\", format(\"help.D\"), true);\n@@ -338,0 +342,1 @@\n+        parser.accepts(\"--output\", format(\"help.output\"), true);\n@@ -359,0 +364,18 @@\n+        \/\/ before processing command line options, check & process compile_flags.txt.\n+        Path compileFlagsTxt = Paths.get(\".\", \"compile_flags.txt\");\n+        if (Files.exists(compileFlagsTxt)) {\n+            try {\n+                Files.lines(compileFlagsTxt).forEach(opt -> builder.addClangArg(opt));\n+            } catch (IOException ioExp) {\n+                err.println(\"compile_flags.txt reading failed \" + ioExp);\n+                if (JextractTool.DEBUG) {\n+                    ioExp.printStackTrace(err);\n+                }\n+                return OPTION_ERROR;\n+            }\n+        }\n+\n+        if (optionSet.has(\"-D\")) {\n+            optionSet.valuesOf(\"-D\").forEach(p -> builder.addClangArg(\"-D\" + p));\n+        }\n+\n@@ -375,4 +398,0 @@\n-        if (optionSet.has(\"-C\")) {\n-            optionSet.valuesOf(\"-C\").forEach(p -> builder.addClangArg(p));\n-        }\n-\n@@ -389,2 +408,2 @@\n-        if (optionSet.has(\"-d\")) {\n-            builder.setOutputDir(optionSet.valueOf(\"-d\"));\n+        if (optionSet.has(\"--output\")) {\n+            builder.setOutputDir(optionSet.valueOf(\"--output\"));\n","filename":"src\/main\/java\/org\/openjdk\/jextract\/JextractTool.java","additions":31,"deletions":12,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-help.C=pass through argument for clang\n@@ -33,1 +32,0 @@\n-help.d=specify where to place generated files\n@@ -40,0 +38,1 @@\n+help.D=define a C preprocessor macro\n@@ -44,0 +43,1 @@\n+help.output=specify the directory to place generated files\n@@ -53,12 +53,12 @@\n--C <String>                    pass through argument for clang           \\n\\\n--I <String>                    specify include files path                \\n\\\n--d <String>                    specify where to place generated files    \\n\\\n---dump-includes <String>       dump included symbols into specified file \\n\\\n---header-class-name <String>   name of the header class                  \\n\\\n---include-function <String>    name of function to include               \\n\\\n---include-macro <String>       name of constant macro to include         \\n\\\n---include-struct <String>      name of struct definition to include      \\n\\\n---include-typedef <String>     name of type definition to include        \\n\\\n---include-union <String>       name of union definition to include       \\n\\\n---include-var <String>         name of global variable to include        \\n\\\n--l <String>                    specify a library                         \\n\\\n+-D <macro>                     define a C preprocessor macro             \\n\\\n+-I <path>                      specify include files path                \\n\\\n+--dump-includes <file>         dump included symbols into specified file \\n\\\n+--header-class-name <name>     name of the header class                  \\n\\\n+--include-function <name>      name of function to include               \\n\\\n+--include-macro <name>         name of constant macro to include         \\n\\\n+--include-struct <name>        name of struct definition to include      \\n\\\n+--include-typedef <name>       name of type definition to include        \\n\\\n+--include-union <name>         name of union definition to include       \\n\\\n+--include-var <name>           name of global variable to include        \\n\\\n+-l <library>                   specify a library name or absolute library path   \\n\\\n+--output <path>                specify the directory to place generated files    \\n\\\n@@ -66,1 +66,1 @@\n--t, --target-package <String>  target package for specified header files \\n\n+-t, --target-package <package> target package for specified header files \\n\n","filename":"src\/main\/resources\/org\/openjdk\/jextract\/impl\/resources\/Messages.properties","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        run(\"-d\", splitOutput.toString(), splitH.toString()).checkSuccess();\n+        run(\"--output\", splitOutput.toString(), splitH.toString()).checkSuccess();\n","filename":"test\/jtreg\/TestSplit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        jextrOpts.add(\"-C-nostdinc\");\n+        \/\/ FIXME jextrOpts.add(\"-C-nostdinc\");\n@@ -69,1 +69,1 @@\n-        jextrOpts.add(\"-d\");\n+        jextrOpts.add(\"--output\");\n@@ -89,1 +89,1 @@\n-            if (\"-d\".equals(opt)) {\n+            if (\"--output\".equals(opt)) {\n","filename":"test\/lib\/JtregJextract.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        run(\"-d\", getOutputFilePath(\"badBitfieldsGen\").toString(),\n+        run(\"--output\", getOutputFilePath(\"badBitfieldsGen\").toString(),\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/BadBitfieldTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-        run( \"-d\", dirPath.toString(), getInputFilePath(\"constants.h\").toString()).checkSuccess();\n+        run( \"--output\", dirPath.toString(), getInputFilePath(\"constants.h\").toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/ConstantsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            \"-d\", output,\n+            \"--output\", output,\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/IncompleteArrayTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.nio.file.Files;\n@@ -31,0 +32,3 @@\n+import java.nio.file.Paths;\n+import java.io.IOException;\n+import java.util.List;\n@@ -85,4 +89,10 @@\n-    public void testUnsupportedLanguage() {\n-        run(\"-C-xc++\", getInputFilePath(\"unsupported_lang.h\").toString())\n-            .checkFailure(RUNTIME_ERROR)\n-            .checkContainsOutput(\"Unsupported language: C++\");\n+    public void testUnsupportedLanguage() throws IOException {\n+        Path compileFlagsTxt = Paths.get(\".\", \"compile_flags.txt\");\n+        try {\n+            Files.write(compileFlagsTxt, List.of(\"-xc++\"));\n+            run(getInputFilePath(\"unsupported_lang.h\").toString())\n+                .checkFailure(RUNTIME_ERROR)\n+                .checkContainsOutput(\"Unsupported language: C++\");\n+        } finally {\n+            Files.delete(compileFlagsTxt);\n+        }\n@@ -95,1 +105,1 @@\n-        run(\"-d\", helloOutput.toString(), helloH.toString()).checkSuccess();\n+        run(\"--output\", helloOutput.toString(), helloH.toString()).checkSuccess();\n@@ -110,1 +120,1 @@\n-        run(\"-d\", helloOutput.toString(),\n+        run(\"--output\", helloOutput.toString(),\n@@ -124,1 +134,1 @@\n-        run(targetPkgOption, \"com.acme\", \"-d\",\n+        run(targetPkgOption, \"com.acme\", \"--output\",\n@@ -151,1 +161,1 @@\n-        run(\"--header-class-name\", \"MyHello\", \"-t\", \"com.acme\", \"-d\",\n+        run(\"--header-class-name\", \"MyHello\", \"-t\", \"com.acme\", \"--output\",\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/JextractToolProviderTest.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        run(\"-d\", repeatedDeclsOutput.toString(), repeatedDeclsH.toString()).checkSuccess();\n+        run(\"--output\", repeatedDeclsOutput.toString(), repeatedDeclsH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/RepeatedDeclsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903148.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903158.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.jextract.test.toolprovider;\n+\n+import testlib.JextractToolRunner;\n+import testlib.TestUtils;\n+import org.testng.annotations.Test;\n+import java.nio.file.Path;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertNull;\n+\n+public class Test7903164 extends JextractToolRunner {\n+    @Test\n+    public void testWithoutMacro() {\n+        Path output = getOutputFilePath(\"7903164gen_withoutmacro\");\n+        Path outputH = getInputFilePath(\"test7903164.h\");\n+        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(output)) {\n+            assertNotNull(loader.loadClass(\"test7903164_h\"));\n+            assertNotNull(loader.loadClass(\"func\"));\n+            assertNull(loader.loadClass(\"func2\"));\n+        } finally {\n+            TestUtils.deleteDir(output);\n+        }\n+    }\n+\n+    @Test\n+    public void testWithMacro() {\n+        Path output = getOutputFilePath(\"7903164gen_withmacro\");\n+        Path outputH = getInputFilePath(\"test7903164.h\");\n+        run(\"-D\", \"FOO\", \"--output\", output.toString(), outputH.toString()).checkSuccess();\n+        try(TestUtils.Loader loader = TestUtils.classLoader(output)) {\n+            assertNotNull(loader.loadClass(\"test7903164_h\"));\n+            assertNotNull(loader.loadClass(\"func\"));\n+            assertNotNull(loader.loadClass(\"func2\"));\n+        } finally {\n+            TestUtils.deleteDir(output);\n+        }\n+    }\n+}\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test7903164.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -37,1 +37,1 @@\n-        run(\"-d\", anonenumOutput.toString(), anonenumH.toString()).checkSuccess();\n+        run(\"--output\", anonenumOutput.toString(), anonenumH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240181.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", exportsOutput.toString(), exportsH.toString()).checkSuccess();\n+        run(\"--output\", exportsOutput.toString(), exportsH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240657.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        run(\"-d\", floatConstsOutput.toString(), floatConstsH.toString()).checkSuccess();\n+        run(\"--output\", floatConstsOutput.toString(), floatConstsH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240752.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        run(\"-d\", nameCollisionOutput.toString(), nameCollisionH.toString()).checkSuccess();\n+        run(\"--output\", nameCollisionOutput.toString(), nameCollisionH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8240811.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", typedefsOutput.toString(), typedefsH.toString()).checkSuccess();\n+        run(\"--output\", typedefsOutput.toString(), typedefsH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8244412.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        run(\"-d\", test8245767Output.toString(), test8245767H.toString()).checkSuccess();\n+        run(\"--output\", test8245767Output.toString(), test8245767H.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8245767.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248415.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", test8248474Output.toString(), test8248474H.toString()).checkSuccess();\n+        run(\"--output\", test8248474Output.toString(), test8248474H.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8248474.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249290.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8249300.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8251943.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", test8258223Output.toString(), test8258223H.toString()).checkSuccess();\n+        run(\"--output\", test8258223Output.toString(), test8258223H.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258223.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", test8258405Output.toString(), test8258405H.toString()).checkSuccess();\n+        run(\"--output\", test8258405Output.toString(), test8258405H.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8258405.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-            run(\"-d\", test8260344Output.toString(), test8260344H.toString()).checkSuccess();\n+            run(\"--output\", test8260344Output.toString(), test8260344H.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260344.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260705.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260717.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8260929.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n@@ -54,1 +54,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n@@ -73,1 +73,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261578.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        run(\"-d\", test8261893Output.toString(), test8261893H.toString()).checkSuccess();\n+        run(\"--output\", test8261893Output.toString(), test8261893H.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8261893.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        run(\"-d\", test8262117Output.toString(), test8262117H.toString()).checkSuccess();\n+        run(\"--output\", test8262117Output.toString(), test8262117H.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262117.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262733.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262825.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        run(\"-d\", output.toString(), outputH.toString()).checkSuccess();\n+        run(\"--output\", output.toString(), outputH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/Test8262851.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,5 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n@@ -30,2 +35,5 @@\n-    public void testAttributedPointerTypedef() {\n-        run(\"-C-fms-extensions\", \"-d\", getOutputFilePath(\"attributedPointerTypedef\").toString(),\n+    public void testAttributedPointerTypedef() throws IOException {\n+        Path compileFlagsTxt = Paths.get(\".\", \"compile_flags.txt\");\n+        try {\n+            Files.write(compileFlagsTxt, List.of(\"-fms-extensions\"));\n+            run(\"--output\", getOutputFilePath(\"attributedPointerTypedef\").toString(),\n@@ -33,0 +41,3 @@\n+        } finally {\n+            Files.delete(compileFlagsTxt);\n+        }\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestAttributedPointerTypedef.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-            \"-d\", outputDir,\n+            \"--output\", outputDir,\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestClassGeneration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-            run(\"-d\", filterOutput.toString(), expectedKind.filterOption, expectedKind.symbolName, filterH.toString()).checkSuccess();\n+            run(\"--output\", filterOutput.toString(), expectedKind.filterOption, expectedKind.symbolName, filterH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestFilters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        run(\"-d\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n+        run(\"--output\", nestedOutput.toString(), nestedH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestNested.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-        run(\"-d\", outputPath.toString(), headerFile.toString()).checkSuccess();\n+        run(\"--output\", outputPath.toString(), headerFile.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/TestTypedefIsFunctionProto.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        run(\"-d\", uniondeclOutput.toString(), uniondeclH.toString()).checkSuccess();\n+        run(\"--output\", uniondeclOutput.toString(), uniondeclH.toString()).checkSuccess();\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/UniondeclTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+\n+#ifdef FOO\n+\n@@ -26,0 +29,2 @@\n+\n+#endif\n","filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903164.h","additions":5,"deletions":0,"binary":false,"changes":5,"previous_filename":"test\/testng\/org\/openjdk\/jextract\/test\/toolprovider\/test7903158.h","status":"copied"}]}