{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -63,0 +64,1 @@\n+    private AtomicReference<Throwable> printErrorRef = new AtomicReference<>();\n@@ -326,0 +328,1 @@\n+            printErrorRef.set(null);\n@@ -384,0 +387,9 @@\n+\n+            Throwable printError = printErrorRef.getAndSet(null);\n+            if (printError != null) {\n+                if (printError instanceof PrinterException) {\n+                    throw (PrinterException) printError;\n+                }\n+                throw (PrinterException)\n+                    new PrinterException().initCause(printError);\n+            }\n@@ -789,5 +801,13 @@\n-        Runnable r = new Runnable() { public void run() { synchronized(ret) {\n-            try {\n-                int pageResult = printable.print(graphics, pageFormat, pageIndex);\n-                if (pageResult != Printable.NO_SUCH_PAGE) {\n-                    ret[0] = getPageFormatArea(pageFormat);\n+        Runnable r = new Runnable() {\n+            @Override\n+            public void run() {\n+                synchronized (ret) {\n+                    try {\n+                        int pageResult = printable.print(\n+                            graphics, pageFormat, pageIndex);\n+                        if (pageResult != Printable.NO_SUCH_PAGE) {\n+                            ret[0] = getPageFormatArea(pageFormat);\n+                        }\n+                    } catch (Throwable t) {\n+                        printErrorRef.compareAndSet(null, t);\n+                    }\n@@ -795,2 +815,2 @@\n-            } catch (Exception e) {} \/\/ Original code bailed on any exception\n-        }}};\n+            }\n+        };\n@@ -799,1 +819,5 @@\n-            try { EventQueue.invokeAndWait(r); } catch (Exception e) { e.printStackTrace(); }\n+            try {\n+                EventQueue.invokeAndWait(r);\n+            } catch (Throwable t) {\n+                printErrorRef.compareAndSet(null, t);\n+            }\n@@ -804,1 +828,3 @@\n-        synchronized(ret) { return ret[0]; }\n+        synchronized (ret) {\n+            return ret[0];\n+        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":35,"deletions":9,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8262731\n+   @key headful printer\n+   @summary Verify that \"PrinterJob.print\" throws the expected exception,\n+            if \"Printable.print\" throws an exception.\n+   @run main ExceptionFromPrintableIsIgnoredTest MAIN PE\n+   @run main ExceptionFromPrintableIsIgnoredTest MAIN RE\n+   @run main ExceptionFromPrintableIsIgnoredTest EDT PE\n+   @run main ExceptionFromPrintableIsIgnoredTest EDT RE\n+ *\/\n+\n+import java.awt.Graphics;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.SwingUtilities;\n+\n+public class ExceptionFromPrintableIsIgnoredTest {\n+    private enum TestThreadType {MAIN, EDT}\n+    private enum TestExceptionType {PE, RE}\n+\n+    private volatile Throwable printError;\n+\n+    public static void main(String[] args) {\n+        if (args.length < 2) {\n+            throw new RuntimeException(\"Two arguments are expected:\"\n+                    + \" test thread type and test exception type.\");\n+        }\n+\n+        new ExceptionFromPrintableIsIgnoredTest(\n+            TestThreadType.valueOf(args[0]),\n+            TestExceptionType.valueOf(args[1]));\n+    }\n+\n+    public ExceptionFromPrintableIsIgnoredTest(\n+            final TestThreadType threadType,\n+            final TestExceptionType exceptionType) {\n+        System.out.println(String.format(\n+                \"Test started. threadType='%s', exceptionType='%s'\",\n+                threadType, exceptionType));\n+\n+        String osName = System.getProperty(\"os.name\");\n+        boolean isOSX = osName.toLowerCase().startsWith(\"mac\");\n+        if ((exceptionType == TestExceptionType.RE) && !isOSX) {\n+            System.out.println(\n+                \"Currently this test scenario can be verified only on macOS.\");\n+            return;\n+        }\n+\n+        printError = null;\n+\n+        if (threadType == TestThreadType.MAIN) {\n+            runTest(exceptionType);\n+        } else if (threadType == TestThreadType.EDT) {\n+            try {\n+                SwingUtilities.invokeAndWait(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        runTest(exceptionType);\n+                    }\n+                });\n+            } catch (InterruptedException | InvocationTargetException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        if (printError == null) {\n+            throw new RuntimeException(\"No exception was thrown.\");\n+        } else if (!(printError instanceof PrinterException)) {\n+            throw new RuntimeException(\"Unexpected exception was thrown.\");\n+        }\n+        System.out.println(\"Test passed.\");\n+    }\n+\n+    private void runTest(final TestExceptionType exceptionType) {\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        if (job.getPrintService() == null) {\n+            System.out.println(\"No printers are available.\");\n+            return;\n+        }\n+\n+        job.setPrintable(new Printable() {\n+            @Override\n+            public int print(Graphics graphics, PageFormat pageFormat,\n+                    int pageIndex) throws PrinterException {\n+                if (pageIndex > 1) {\n+                    return NO_SUCH_PAGE;\n+                }\n+                if (exceptionType == TestExceptionType.PE) {\n+                    throw new PrinterException(\n+                        \"Exception from 'Printable.print'.\");\n+                } else if (exceptionType == TestExceptionType.RE) {\n+                    throw new RuntimeException(\n+                        \"Exception from 'Printable.print'.\");\n+                }\n+                return PAGE_EXISTS;\n+            }\n+        });\n+\n+        try {\n+            job.print();\n+        } catch (Throwable t) {\n+            printError = t;\n+\n+            System.out.println(\"'PrinterJob.print' threw the exception:\");\n+            t.printStackTrace(System.out);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ExceptionFromPrintableIsIgnoredTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}