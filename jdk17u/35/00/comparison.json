{"files":[{"patch":"@@ -1669,10 +1669,5 @@\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(getClass().getName());\n-        sb.append(\"[pos=\");\n-        sb.append(position());\n-        sb.append(\" lim=\");\n-        sb.append(limit());\n-        sb.append(\" cap=\");\n-        sb.append(capacity());\n-        sb.append(\"]\");\n-        return sb.toString();\n+        return getClass().getName()\n+                 + \"[pos=\" + position()\n+                 + \" lim=\" + limit()\n+                 + \" cap=\" + capacity()\n+                 + \"]\";\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1137,0 +1137,20 @@\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+#if[byte]\n+        $Type$Buffer direct1 = $Type$Buffer.allocateDirect(cap);\n+        if (!direct1.toString().equals(Basic.toString(direct1))) {\n+           fail(\"Direct buffer toString is incorrect: \"\n+                  + direct1.toString() + \" vs \" + Basic.toString(direct1));\n+        }\n+#end[byte]\n+\n+#if[!char]\n+        $Type$Buffer nondirect1 = $Type$Buffer.allocate(cap);\n+        if (!nondirect1.toString().equals(Basic.toString(nondirect1))) {\n+           fail(\"Heap buffer toString is incorrect: \"\n+                  + nondirect1.toString() + \" vs \" + Basic.toString(nondirect1));\n+        }\n+#end[!char]\n+    }\n+\n@@ -1158,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/Basic-X.java.template","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1137,0 +1137,20 @@\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+\n+        ByteBuffer direct1 = ByteBuffer.allocateDirect(cap);\n+        if (!direct1.toString().equals(Basic.toString(direct1))) {\n+           fail(\"Direct buffer toString is incorrect: \"\n+                  + direct1.toString() + \" vs \" + Basic.toString(direct1));\n+        }\n+\n+\n+\n+        ByteBuffer nondirect1 = ByteBuffer.allocate(cap);\n+        if (!nondirect1.toString().equals(Basic.toString(nondirect1))) {\n+           fail(\"Heap buffer toString is incorrect: \"\n+                  + nondirect1.toString() + \" vs \" + Basic.toString(nondirect1));\n+        }\n+\n+    }\n+\n@@ -1158,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicByte.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,4 @@\n+\n+\n+\n+\n@@ -36,0 +40,6 @@\n+\n+\n+\n+\n+\n+\n@@ -454,0 +464,67 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1058,0 +1135,20 @@\n+    }\n+\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1081,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicChar.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,4 @@\n+\n+\n+\n+\n@@ -36,0 +40,6 @@\n+\n+\n+\n+\n+\n+\n@@ -454,0 +464,67 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1058,0 +1135,20 @@\n+    }\n+\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+        DoubleBuffer nondirect1 = DoubleBuffer.allocate(cap);\n+        if (!nondirect1.toString().equals(Basic.toString(nondirect1))) {\n+           fail(\"Heap buffer toString is incorrect: \"\n+                  + nondirect1.toString() + \" vs \" + Basic.toString(nondirect1));\n+        }\n+\n@@ -1081,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicDouble.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,4 @@\n+\n+\n+\n+\n@@ -36,0 +40,6 @@\n+\n+\n+\n+\n+\n+\n@@ -454,0 +464,67 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1058,0 +1135,20 @@\n+    }\n+\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+        FloatBuffer nondirect1 = FloatBuffer.allocate(cap);\n+        if (!nondirect1.toString().equals(Basic.toString(nondirect1))) {\n+           fail(\"Heap buffer toString is incorrect: \"\n+                  + nondirect1.toString() + \" vs \" + Basic.toString(nondirect1));\n+        }\n+\n@@ -1081,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicFloat.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,4 @@\n+\n+\n+\n+\n@@ -36,0 +40,6 @@\n+\n+\n+\n+\n+\n+\n@@ -454,0 +464,67 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1058,0 +1135,20 @@\n+    }\n+\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+        IntBuffer nondirect1 = IntBuffer.allocate(cap);\n+        if (!nondirect1.toString().equals(Basic.toString(nondirect1))) {\n+           fail(\"Heap buffer toString is incorrect: \"\n+                  + nondirect1.toString() + \" vs \" + Basic.toString(nondirect1));\n+        }\n+\n@@ -1081,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicInt.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,4 @@\n+\n+\n+\n+\n@@ -36,0 +40,6 @@\n+\n+\n+\n+\n+\n+\n@@ -454,0 +464,67 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1058,0 +1135,20 @@\n+    }\n+\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+        LongBuffer nondirect1 = LongBuffer.allocate(cap);\n+        if (!nondirect1.toString().equals(Basic.toString(nondirect1))) {\n+           fail(\"Heap buffer toString is incorrect: \"\n+                  + nondirect1.toString() + \" vs \" + Basic.toString(nondirect1));\n+        }\n+\n@@ -1081,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicLong.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,4 @@\n+\n+\n+\n+\n@@ -36,0 +40,6 @@\n+\n+\n+\n+\n+\n+\n@@ -454,0 +464,67 @@\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -1058,0 +1135,20 @@\n+    }\n+\n+    public static void testToString() {\n+        final int cap = 10;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+        ShortBuffer nondirect1 = ShortBuffer.allocate(cap);\n+        if (!nondirect1.toString().equals(Basic.toString(nondirect1))) {\n+           fail(\"Heap buffer toString is incorrect: \"\n+                  + nondirect1.toString() + \" vs \" + Basic.toString(nondirect1));\n+        }\n+\n@@ -1081,0 +1178,2 @@\n+\n+        testToString();\n","filename":"test\/jdk\/java\/nio\/Buffer\/BasicShort.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"}]}