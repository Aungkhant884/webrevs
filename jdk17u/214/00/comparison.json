{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.test.lib.Platform;\n@@ -75,1 +76,1 @@\n-    private static final boolean VERIFY_IR = REQUESTED_VERIFY_IR && USE_COMPILER && !EXCLUDE_RANDOM && !FLIP_C1_C2 && !TEST_C1;\n+    private static final boolean VERIFY_IR = REQUESTED_VERIFY_IR && USE_COMPILER && !EXCLUDE_RANDOM && !FLIP_C1_C2 && !TEST_C1 && Platform.isServer();\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/flag\/FlagVM.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -77,2 +77,12 @@\n-    private static final CompLevel TIERED_COMPILATION_STOP_AT_LEVEL = CompLevel.forValue(((Long)WHITE_BOX.getVMFlag(\"TieredStopAtLevel\")).intValue());\n-    public static final boolean TEST_C1 = TIERED_COMPILATION && TIERED_COMPILATION_STOP_AT_LEVEL.getValue() < CompLevel.C2.getValue();\n+    private static final CompLevel TIERED_COMPILATION_STOP_AT_LEVEL;\n+    private static final boolean CLIENT_VM = Platform.isClient();\n+\n+    static {\n+        CompLevel level = CompLevel.forValue(((Long)WHITE_BOX.getVMFlag(\"TieredStopAtLevel\")).intValue());\n+        if (CLIENT_VM && level == CompLevel.C2) {\n+            \/\/ No C2 available, use C1 level without profiling.\n+            level = CompLevel.C1_SIMPLE;\n+        }\n+        TIERED_COMPILATION_STOP_AT_LEVEL = level;\n+    }\n+    public static final boolean TEST_C1 = (TIERED_COMPILATION && TIERED_COMPILATION_STOP_AT_LEVEL.getValue() < CompLevel.C2.getValue()) || CLIENT_VM;\n@@ -563,1 +573,4 @@\n-        if (!TIERED_COMPILATION && compLevel.getValue() < CompLevel.C2.getValue()) {\n+        if (TEST_C1 && compLevel == CompLevel.C2) {\n+            return CompLevel.SKIP;\n+        }\n+        if ((!TIERED_COMPILATION && !CLIENT_VM) && compLevel.getValue() < CompLevel.C2.getValue()) {\n@@ -566,1 +579,1 @@\n-        if (TIERED_COMPILATION && compLevel.getValue() > TIERED_COMPILATION_STOP_AT_LEVEL.getValue()) {\n+        if ((TIERED_COMPILATION || CLIENT_VM) && compLevel.getValue() > TIERED_COMPILATION_STOP_AT_LEVEL.getValue()) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/TestVM.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -98,2 +98,2 @@\n-    \/\/ This rule is only applied if the loop unroll limit is 10 or greater.\n-    @IR(applyIf = {\"LoopUnrollLimit\", \">= 10\"}, failOn = IRNode.LOAD)\n+    \/\/ This rule is only applied if TypeProfileLevel is 100 or greater.\n+    @IR(applyIf = {\"TypeProfileLevel\", \">= 100\"}, failOn = IRNode.LOAD)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/IRExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.lib.Platform;\n@@ -60,4 +61,6 @@\n-        framework.setDefaultWarmup(10).addFlags(\"-XX:-TieredCompilation\").start();\n-        framework = new TestFramework(TestNoTiered.class);\n-        framework.setDefaultWarmup(10).addScenarios(new Scenario(0, \"-XX:-TieredCompilation\")).start();\n-        framework = new TestFramework(TestStopAtLevel1.class);\n+        if (!Platform.isClient()) {\n+            framework.setDefaultWarmup(10).addFlags(\"-XX:-TieredCompilation\").start();\n+            framework = new TestFramework(TestNoTiered.class);\n+            framework.setDefaultWarmup(10).addScenarios(new Scenario(0, \"-XX:-TieredCompilation\")).start();\n+            framework = new TestFramework(TestStopAtLevel1.class);\n+        }\n@@ -122,1 +125,3 @@\n-        TestFramework.assertNotCompiled(info.getTest()); \/\/ Never compiled without C1\n+        if (!Platform.isClient()) {\n+            TestFramework.assertNotCompiled(info.getTest()); \/\/ Never compiled without C1\n+        }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestCompLevels.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import compiler.lib.ir_framework.driver.TestVMException;\n@@ -42,10 +43,14 @@\n-    public static void main(String[] args) throws Exception {\n-        if (args.length != 0) {\n-            TestFramework.run();\n-        } else {\n-            OutputAnalyzer oa = run(\"true\");\n-            oa.shouldHaveExitValue(0);\n-            oa = run(\"false\");\n-            oa.shouldNotHaveExitValue(0);\n-            Asserts.assertTrue(oa.getOutput().contains(\"fail run\"), \"did not find run: \" + oa.getOutput());\n-            Asserts.assertTrue(oa.getOutput().contains(\"fail check\"), \"did not find check\" + oa.getOutput());\n+    public static void main(String[] args) {\n+        \/\/ Ignore Compiler Control\n+        TestFramework.runWithFlags(\"-XX:CompileCommand=option,ir_framework.tests.TestDIgnoreCompilerControls::test2,bool,PrintInlining,true\",\n+                                   \"-DIgnoreCompilerControls=true\");\n+        Asserts.assertFalse(TestFramework.getLastTestVMOutput().contains(\"don't inline by annotation\"), \"should have inlined: \"\n+                                                                                                        + TestFramework.getLastTestVMOutput());\n+        \/\/ Don't ignore compiler control, sanity check\n+        try {\n+            TestFramework.runWithFlags(\"-XX:CompileCommand=option,ir_framework.tests.TestDIgnoreCompilerControls::test2,bool,PrintInlining,true\",\n+                                       \"-DIgnoreCompilerControls=false\");\n+            throw new RuntimeException(\"should throw exception\");\n+        } catch (TestVMException e) {\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"fail run\"), \"did not find exception with msg \\\"fail run\\\"\");\n+            Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"don't inline by annotation\"), \"should not have inlined: \" + TestFramework.getLastTestVMOutput());\n@@ -55,10 +60,0 @@\n-    private static OutputAnalyzer run(String flagValue) throws Exception {\n-        OutputAnalyzer oa;\n-        ProcessBuilder process = ProcessTools.createJavaProcessBuilder(\n-                \"-Dtest.class.path=\" + Utils.TEST_CLASS_PATH, \"-Dtest.jdk=\" + Utils.TEST_JDK,\n-                \"-Dtest.vm.opts=-DIgnoreCompilerControls=\" + flagValue,\n-                \"ir_framework.tests.TestDIgnoreCompilerControls\", flagValue);\n-        oa = ProcessTools.executeProcess(process);\n-        return oa;\n-    }\n-\n@@ -66,1 +61,4 @@\n-    public void test() { }\n+    public void test() {}\n+\n+    @ForceCompile\n+    public void ignoredForceCompile() {}\n@@ -72,2 +70,1 @@\n-            \/\/ Should be compiled with -DIgnoreCompilerControls=true\n-            Asserts.assertTrue(WhiteBox.getWhiteBox().isMethodCompiled(getClass().getDeclaredMethod(\"run\", RunInfo.class)), \"fail run\");\n+            Asserts.assertFalse(WhiteBox.getWhiteBox().isMethodCompiled(getClass().getDeclaredMethod(\"ignoredForceCompile\")), \"fail run\");\n@@ -77,0 +74,3 @@\n+    @DontInline\n+    public void ignoreDontInline() {}\n+\n@@ -79,9 +79,2 @@\n-    public void test2() {}\n-\n-\n-    @Check(test = \"test2\")\n-    public void check(TestInfo info) throws NoSuchMethodException {\n-        if (!info.isWarmUp()) {\n-            \/\/ Should be compiled with -DIgnoreCompilerControls=true\n-            Asserts.assertTrue(WhiteBox.getWhiteBox().isMethodCompiled(getClass().getDeclaredMethod(\"check\", TestInfo.class)), \"fail check\");\n-        }\n+    public void test2() {\n+        ignoreDontInline(); \/\/ Is inlined and therefore not compiled separately.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestDIgnoreCompilerControls.java","additions":25,"deletions":32,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n- * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler1.enabled & vm.compiler2.enabled & vm.flagless\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        testFramework.addHelperClasses(HelperA.class).addScenarios(sDefault).addFlags(\"-XX:+UseSuperWord\").start();\n+        testFramework.addHelperClasses(HelperA.class).addScenarios(sDefault).addFlags(\"-XX:+UseTLAB\").start();\n@@ -72,1 +72,1 @@\n-        testFramework.addHelperClasses(HelperA.class).addFlags(\"-XX:+UseSuperWord\", \"-XX:+UseCompiler\").addScenarios(sDefault)\n+        testFramework.addHelperClasses(HelperA.class).addFlags(\"-XX:+UseTLAB\", \"-XX:+UseCompiler\").addScenarios(sDefault)\n@@ -75,1 +75,1 @@\n-        testFramework.addHelperClasses(HelperA.class).addFlags(\"-XX:+UseSuperWord\", \"-XX:+UseCompiler\").addScenarios(sDefault)\n+        testFramework.addHelperClasses(HelperA.class).addFlags(\"-XX:+UseTLAB\", \"-XX:+UseCompiler\").addScenarios(sDefault)\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSanity.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @requires vm.flagless\n+ * @requires vm.flagless & vm.compiler1.enabled & vm.compiler2.enabled\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestWithHelperClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}