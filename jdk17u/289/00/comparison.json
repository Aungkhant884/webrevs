{"files":[{"patch":"@@ -77,0 +77,1 @@\n+    private static native void tableContentCacheClear(long ptr);\n@@ -127,0 +128,7 @@\n+                    if (CAccessible.getSwingAccessible(CAccessible.this) != null) {\n+                        Accessible a = CAccessible.getSwingAccessible(CAccessible.this);\n+                        AccessibleContext ac = a.getAccessibleContext();\n+                        if ((ac != null) && (ac.getAccessibleRole() == AccessibleRole.TABLE)) {\n+                            tableContentCacheClear(ptr);\n+                        }\n+                    }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessible.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,55 +52,0 @@\n-- (NSArray *)accessibilityChildren\n-{\n-    NSArray *children = [super accessibilityChildren];\n-    if (children == NULL) {\n-        JNIEnv *env = [ThreadUtilities getJNIEnv];\n-        CommonComponentAccessibility *parent = [self accessibilityParent];\n-        if (parent->fAccessible == NULL) return nil;\n-        GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n-        jobjectArray jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n-                                                                                      parent->fAccessible, parent->fComponent, sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN, NO);\n-        CHECK_EXCEPTION();\n-        if (jchildrenAndRoles == NULL) return nil;\n-\n-        jsize arrayLen = (*env)->GetArrayLength(env, jchildrenAndRoles);\n-        NSMutableArray *childrenCells = [NSMutableArray arrayWithCapacity:arrayLen\/2];\n-\n-        NSUInteger childIndex = fIndex;\n-\n-        int inc = [(TableAccessibility *)[self accessibilityParent] accessibilityRowCount] * 2;\n-        NSInteger i = childIndex * 2;\n-        for(i; i < arrayLen; i += inc)\n-        {\n-            jobject \/* Accessible *\/ jchild = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i);\n-            jobject \/* String *\/ jchildJavaRole = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i+1);\n-\n-            NSString *childJavaRole = nil;\n-            if (jchildJavaRole != NULL) {\n-                DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n-                DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n-                jobject jkey = (*env)->GetObjectField(env, jchildJavaRole, sjf_key);\n-                CHECK_EXCEPTION();\n-                childJavaRole = JavaStringToNSString(env, jkey);\n-                (*env)->DeleteLocalRef(env, jkey);\n-            }\n-\n-            CellAccessibility *child = [[CellAccessibility alloc] initWithParent:self\n-                                                                         withEnv:env\n-                                                                  withAccessible:jchild\n-                                                                       withIndex:childIndex\n-                                                                        withView:self->fView\n-                                                                    withJavaRole:childJavaRole];\n-            [childrenCells addObject:[[child retain] autorelease]];\n-\n-            (*env)->DeleteLocalRef(env, jchild);\n-            (*env)->DeleteLocalRef(env, jchildJavaRole);\n-\n-            childIndex += (inc \/ 2);\n-        }\n-        (*env)->DeleteLocalRef(env, jchildrenAndRoles);\n-        return childrenCells;\n-    } else {\n-        return children;\n-    }\n-}\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ColumnAccessibility.m","additions":0,"deletions":55,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+{\n+    NSMutableDictionary<NSNumber*, id> *rowCache;\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableAccessibility.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#import \"sun_lwawt_macosx_CAccessible.h\"\n@@ -127,7 +128,4 @@\n-    return [[TableRowAccessibility alloc] initWithParent:self\n-                                                      withEnv:[ThreadUtilities getJNIEnv]\n-                                               withAccessible:NULL\n-                                                    withIndex:index\n-                                                     withView:[self view]\n-                                                 withJavaRole:JavaAccessibilityIgnore];\n-}\n+    if (rowCache == nil) {\n+        int rowCount = [self accessibilityRowCount];\n+        rowCache = [[NSMutableDictionary<NSNumber*, id> dictionaryWithCapacity:rowCount] retain];\n+    }\n@@ -135,8 +133,12 @@\n-- (ColumnAccessibility *)createColumnWithIndex:(NSUInteger)index\n-{\n-    return [[ColumnAccessibility alloc] initWithParent:self\n-                                               withEnv:[ThreadUtilities getJNIEnv]\n-                                        withAccessible:NULL\n-                                             withIndex:index\n-                                              withView:self->fView\n-                                          withJavaRole:JavaAccessibilityIgnore];\n+    id row = [rowCache objectForKey:[NSNumber numberWithUnsignedInteger:index]];\n+    if (row == nil) {\n+        row = [[TableRowAccessibility alloc] initWithParent:self\n+                                                        withEnv:[ThreadUtilities getJNIEnv]\n+                                                 withAccessible:NULL\n+                                                      withIndex:index\n+                                                       withView:[self view]\n+                                                   withJavaRole:JavaAccessibilityIgnore];\n+        [rowCache setObject:row forKey:[NSNumber numberWithUnsignedInteger:index]];\n+    }\n+\n+    return row;\n@@ -192,20 +194,0 @@\n-- (nullable NSArray *)accessibilityColumns\n-{\n-    int colCount = [self accessibilityColumnCount];\n-    NSMutableArray *columns = [NSMutableArray arrayWithCapacity:colCount];\n-    for (int i = 0; i < colCount; i++) {\n-        [columns addObject:[self createColumnWithIndex:i]];\n-    }\n-    return [NSArray arrayWithArray:columns];\n-}\n-\n-- (nullable NSArray *)accessibilitySelectedColumns\n-{\n-    NSArray<NSNumber *> *indexes = [self getTableSelectedInfo:sun_lwawt_macosx_CAccessibility_JAVA_AX_COLS];\n-    NSMutableArray *columns = [NSMutableArray arrayWithCapacity:[indexes count]];\n-    for (NSNumber *i in indexes) {\n-        [columns addObject:[self createColumnWithIndex:i.unsignedIntValue]];\n-    }\n-    return [NSArray arrayWithArray:columns];\n-}\n-\n@@ -241,0 +223,8 @@\n+- (void)clearCache {\n+    for (NSNumber *key in [rowCache allKeys]) {\n+        [[rowCache objectForKey:key] release];\n+    }\n+    [rowCache release];\n+    rowCache = nil;\n+}\n+\n@@ -242,0 +232,16 @@\n+\n+\/*\n+ * Class:     sun_lwawt_macosx_CAccessible\n+ * Method:    tableContentIndexDestroy\n+ * Signature: (J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_sun_lwawt_macosx_CAccessible_tableContentCacheClear\n+        (JNIEnv *env, jclass class, jlong element)\n+{\n+    JNI_COCOA_ENTER(env);\n+        [ThreadUtilities performOnMainThread:@selector(clearCache)\n+                                          on:(CommonComponentAccessibility *)jlong_to_ptr(element)\n+                                  withObject:nil\n+                               waitUntilDone:NO];\n+    JNI_COCOA_EXIT(env);\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableAccessibility.m","additions":41,"deletions":35,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -34,4 +34,5 @@\n-import javax.swing.JTable;\n-import javax.swing.JPanel;\n-import javax.swing.JScrollPane;\n-import javax.swing.SwingUtilities;\n+import javax.swing.*;\n+import javax.swing.event.TableModelEvent;\n+import javax.swing.event.TableModelListener;\n+import javax.swing.table.AbstractTableModel;\n+import javax.swing.table.TableModel;\n@@ -39,1 +40,3 @@\n-import java.awt.FlowLayout;\n+import java.awt.*;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n@@ -97,0 +100,59 @@\n+    public void  createUIWithChangingContent() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of dynamic JTable.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the table.\\n\"\n+                + \"Add and remove rows and columns using the appropriate buttons and try to move around the table\\n\\n\"\n+                + \"If you hear changes in the table - ctrl+tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JTable table = new JTable(new TestTableModel(3, 3));\n+\n+                JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        JScrollPane scrollPane = new JScrollPane(table);\n+        panel.add(scrollPane);\n+\n+        JPanel buttonPanel = new JPanel(new GridLayout());\n+        JButton addRow = new JButton(\"Add row\");\n+        addRow.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                table.setModel(new TestTableModel(table.getModel().getRowCount() + 1, table.getModel().getColumnCount()));\n+            }\n+        });\n+\n+        JButton addColumn = new JButton(\"Add column\");\n+        addColumn.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                table.setModel(new TestTableModel(table.getModel().getRowCount(), table.getModel().getColumnCount() + 1));\n+            }\n+        });\n+\n+        JButton removeRow = new JButton(\"Remove row\");\n+        removeRow.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                table.setModel(new TestTableModel(table.getModel().getRowCount() - 1, table.getModel().getColumnCount()));\n+            }\n+        });\n+\n+        JButton removeColumn = new JButton(\"Remove column\");\n+        removeColumn.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                table.setModel(new TestTableModel(table.getModel().getRowCount(), table.getModel().getColumnCount() - 1));\n+            }\n+        });\n+\n+        buttonPanel.add(addRow);\n+        buttonPanel.add(addColumn);\n+        buttonPanel.add(removeRow);\n+        buttonPanel.add(removeColumn);\n+\n+        panel.add(buttonPanel);\n+\n+        panel.setFocusable(false);\n+        exceptionString = \"AccessibleJTable test failed!\";\n+        super.createUI(panel, \"AccessibleJTableTest\");\n+    }\n+\n@@ -113,0 +175,34 @@\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createUIWithChangingContent);\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+    }\n+\n+    private static class TestTableModel extends AbstractTableModel {\n+        private final int rows;\n+        private final int cols;\n+\n+        TestTableModel(final int r, final int c) {\n+            super();\n+            rows = r;\n+            cols = c;\n+        }\n+\n+        @Override\n+        public int getRowCount() {\n+            return rows >= 0 ? rows : 0;\n+        }\n+\n+        @Override\n+        public int getColumnCount() {\n+            return cols >= 0 ? cols : 0;\n+        }\n+\n+        @Override\n+        public Object getValueAt(int rowIndex, int columnIndex) {\n+            return String.valueOf((rowIndex + 1) * (columnIndex + 1));\n+        }\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJTableTest.java","additions":101,"deletions":5,"binary":false,"changes":106,"status":"modified"}]}