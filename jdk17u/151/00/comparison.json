{"files":[{"patch":"@@ -2564,1 +2564,1 @@\n-        int parallelism = Runtime.getRuntime().availableProcessors() - 1;\n+        int parallelism = Math.max(1, Runtime.getRuntime().availableProcessors() - 1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274349\n+ * @run main\/othervm -XX:ActiveProcessorCount=1 Uniprocessor\n+ * @summary Check the default FJ pool has a reasonable default parallelism\n+ *          level in a uniprocessor environment.\n+ *\/\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ForkJoinPool;\n+\n+public class Uniprocessor {\n+\n+    static volatile boolean done = false;\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        \/\/ If the default parallelism were zero then this task would not\n+        \/\/ complete and the test will timeout.\n+        CountDownLatch ran = new CountDownLatch(1);\n+        ForkJoinPool.commonPool().submit(() -> ran.countDown());\n+        ran.await();\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/Uniprocessor.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -54,0 +54,1 @@\n+import java.util.concurrent.ThreadLocalRandom;\n@@ -226,2 +227,3 @@\n-    public void testGetParallelism() {\n-        ForkJoinPool p = new ForkJoinPool(1);\n+    public void testGetParallelism_requestedValue() {\n+        int parallelism = ThreadLocalRandom.current().nextInt(1, 4);\n+        ForkJoinPool p = new ForkJoinPool(parallelism);\n@@ -229,1 +231,1 @@\n-            assertEquals(1, p.getParallelism());\n+            assertEquals(parallelism, p.getParallelism());\n@@ -232,0 +234,32 @@\n+\n+    private static int availableProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    \/**\n+     * default pool parallelism is availableProcessors()\n+     *\/\n+    public void testParallelism_defaultValue() {\n+        ForkJoinPool p = new ForkJoinPool();\n+        try (PoolCleaner cleaner = cleaner(p)) {\n+            assertEquals(availableProcessors(), p.getParallelism());\n+        }\n+    }\n+\n+    \/**\n+     * default common pool parallelism is max(1, availableProcessors() - 1)\n+     * But getParallelism() returns 1 when property-requested parallelism is 0.\n+     *\/\n+    public void testCommonPoolParallelism_defaultValue() {\n+        if (!testImplementationDetails) return;\n+\n+        Integer propertyParallelism =\n+            Integer.getInteger(\n+                \"java.util.concurrent.ForkJoinPool.common.parallelism\");\n+\n+        int expectedParallelism = (propertyParallelism == null)\n+            ? Math.max(1, availableProcessors() - 1)\n+            : Math.max(1, propertyParallelism);\n+        assertEquals(expectedParallelism,\n+                     ForkJoinPool.commonPool().getParallelism());\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPoolTest.java","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"}]}