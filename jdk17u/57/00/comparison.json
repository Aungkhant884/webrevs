{"files":[{"patch":"@@ -1929,1 +1929,4 @@\n-  heap_region_containing(o)->record_unpin();\n+  ShenandoahHeapRegion* r = heap_region_containing(o);\n+  assert(r != NULL, \"Sanity\");\n+  assert(r->pin_count() > 0, \"Region \" SIZE_FORMAT \" should have non-zero pins\", r->index());\n+  r->record_unpin();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/* @test TestStringCriticalWithDedup\n+ * @summary Test string deduplication should not cause string critical to crash VM\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/java.lang:open\n+ *\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx512m\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive -XX:+UseStringDeduplication -XX:-CompactStrings\n+ *      -XX:+ShenandoahVerify -XX:+ShenandoahDegeneratedGC -XX:ShenandoahTargetNumRegions=4096\n+ *      TestStringCriticalWithDedup\n+ *\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx512m\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCMode=passive -XX:+UseStringDeduplication -XX:-CompactStrings\n+ *      -XX:+ShenandoahVerify -XX:-ShenandoahDegeneratedGC -XX:ShenandoahTargetNumRegions=4096\n+ *      TestStringCriticalWithDedup\n+ *\/\n+\n+\/* @test TestPinnedGarbage\n+ * @summary Test string deduplication should not cause string critical to crash VM\n+ * @requires vm.gc.Shenandoah\n+ * @modules java.base\/java.lang:open\n+ *\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx512m\n+ *      -XX:+UseShenandoahGC -XX:ShenandoahGCHeuristics=aggressive -XX:+UseStringDeduplication -XX:-CompactStrings\n+ *      -XX:ShenandoahTargetNumRegions=4096\n+ *      TestStringCriticalWithDedup\n+ *\n+ * @run main\/othervm\/native -XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -Xmx256m\n+ *      -XX:+UseShenandoahGC -XX:+UseStringDeduplication -XX:-CompactStrings\n+ *      -XX:ShenandoahTargetNumRegions=4096 -XX:+ShenandoahVerify\n+ *      TestStringCriticalWithDedup\n+ *\/\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.concurrent.*;\n+import java.lang.reflect.*;\n+\n+public class TestStringCriticalWithDedup {\n+    private static Field valueField;\n+\n+    static {\n+        System.loadLibrary(\"TestStringCriticalWithDedup\");\n+        try {\n+            valueField = String.class.getDeclaredField(\"value\");\n+            valueField.setAccessible(true);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static final int NUM_RUNS      = 100;\n+    private static final int STRING_COUNT    = 1 << 16;\n+    private static final int LITTLE_GARBAGE_COUNT = 1 << 5;\n+    private static final int PINNED_STRING_COUNT = 1 << 4;\n+\n+    private static native long pin(String s);\n+    private static native void unpin(String s, long p);\n+\n+\n+    private static volatile MyClass sink;\n+    public static void main(String[] args) {\n+        ThreadLocalRandom rng = ThreadLocalRandom.current();\n+        for (int i = 0; i < NUM_RUNS; i++) {\n+            test(rng);\n+        }\n+    }\n+\n+    private static Object getValue(String string) {\n+        try {\n+            return valueField.get(string);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void pissiblePinString(ThreadLocalRandom rng, List<Tuple> pinnedList, String s) {\n+        int oneInCounter = STRING_COUNT \/ PINNED_STRING_COUNT;\n+        if (rng.nextInt(oneInCounter) == 1) {\n+            long v = pin(s);\n+            Object value = getValue(s);\n+            pinnedList.add(new Tuple(s, value, v));\n+        }\n+    }\n+\n+    private static void test(ThreadLocalRandom rng) {\n+        String[] strArray = new String[STRING_COUNT];\n+        List<Tuple> pinnedStrings = new ArrayList<>(PINNED_STRING_COUNT);\n+        for (int i = 0; i < STRING_COUNT; i++) {\n+            \/\/ Create some garbage inbetween, so strings can be scattered in\n+            \/\/ different regions\n+            createLittleGarbage(rng);\n+\n+            strArray[i] = new String(\"Hello\" + (i % 10));\n+            pissiblePinString(rng, pinnedStrings, strArray[i]);\n+        }\n+\n+        \/\/ Let deduplication thread to run a bit\n+        try {\n+            Thread.sleep(10);\n+        } catch(Exception e) {\n+        }\n+\n+        for (int i = 0; i < pinnedStrings.size(); i ++) {\n+            Tuple p = pinnedStrings.get(i);\n+            String s = p.getString();\n+            if (getValue(s) != p.getValue()) {\n+                System.out.println(getValue(s) + \" != \" + p.getValue());\n+                throw new RuntimeException(\"String value should be pinned\");\n+            }\n+            unpin(p.getString(), p.getValuePointer());\n+        }\n+    }\n+\n+    private static void createLittleGarbage(ThreadLocalRandom rng) {\n+        int count = rng.nextInt(LITTLE_GARBAGE_COUNT);\n+        for (int index = 0; index < count; index ++) {\n+            sink = new MyClass();\n+        }\n+    }\n+\n+    private static class Tuple {\n+        String s;\n+        Object value;\n+        long   valuePointer;\n+        public Tuple(String s, Object value, long vp) {\n+            this.s = s;\n+            this.value = value;\n+            this.valuePointer = vp;\n+        }\n+\n+        public String getString() {\n+            return s;\n+        }\n+        public Object getValue() { return value; }\n+        public long getValuePointer() {\n+            return valuePointer;\n+        }\n+    }\n+\n+    private static class MyClass {\n+        public long[] payload = new long[10];\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/TestStringCriticalWithDedup.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include <jni.h>\n+#include <string.h>\n+#include <stdint.h>\n+\n+JNIEXPORT jlong JNICALL\n+Java_TestStringCriticalWithDedup_pin(JNIEnv *env, jclass unused, jstring s) {\n+  const jchar* a = (*env)->GetStringCritical(env, s, NULL);\n+  return (jlong)(uintptr_t)a;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_TestStringCriticalWithDedup_unpin(JNIEnv *env, jclass unused, jstring s, jlong v) {\n+  jchar* a = (jchar*)(uintptr_t)v;\n+  (*env)->ReleaseStringCritical(env, s, a);\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/jni\/libTestStringCriticalWithDedup.c","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}