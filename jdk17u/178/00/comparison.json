{"files":[{"patch":"@@ -1635,0 +1635,2 @@\n+\n+  bool safe_for_if_replacement(const Node* dom) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1395,1 +1395,2 @@\n-        if (dom->req() > 1 && dom->in(1) == bol && prevdom->in(0) == dom) {\n+        if (dom->req() > 1 && dom->in(1) == bol && prevdom->in(0) == dom &&\n+            safe_for_if_replacement(dom)) {\n@@ -1433,0 +1434,19 @@\n+bool PhaseIdealLoop::safe_for_if_replacement(const Node* dom) const {\n+  if (!dom->is_CountedLoopEnd()) {\n+    return true;\n+  }\n+  CountedLoopEndNode* le = dom->as_CountedLoopEnd();\n+  CountedLoopNode* cl = le->loopnode();\n+  if (cl == NULL) {\n+    return true;\n+  }\n+  if (!cl->is_main_loop()) {\n+    return true;\n+  }\n+  if (cl->is_canonical_loop_entry() == NULL) {\n+    return true;\n+  }\n+  \/\/ Further unrolling is possible so loop exit condition might change\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8274145\n+ * @summary C2: Incorrect computation after JDK-8269752\n+ *\n+ * @run main\/othervm -Xcomp -XX:CompileOnly=TestIfReplacedByMainLoopExit::iMeth -XX:CompileOnly=TestIfReplacedByMainLoopExit::mainTest -XX:-TieredCompilation TestIfReplacedByMainLoopExit\n+ *\n+ *\/\n+\n+public class TestIfReplacedByMainLoopExit {\n+\n+    public static final int N = 400;\n+\n+    public static long instanceCount=3024694135L;\n+    public static boolean bFld=true;\n+    public int iFld=-11;\n+\n+    public static long iMeth_check_sum = 0;\n+\n+    public static void vMeth(int i3, int i4, int i5) {\n+\n+        int i6=-71, i7=88, i8=217, i9=14, i10=9677, i18=-244, i19=107, iArr[]=new int[N];\n+    }\n+\n+    public static void init(int[] a, int seed) {\n+        for (int j = 0; j < a.length; j++) {\n+            a[j] = (j % 2 == 0) ? seed + j : seed - j;\n+        }\n+    }\n+\n+    public static long checkSum(int[] a) {\n+        long sum = 0;\n+        for (int j = 0; j < a.length; j++) {\n+            sum += (a[j] \/ (j + 1) + a[j] % (j + 1));\n+        }\n+        return sum;\n+    }\n+\n+    public static int iMeth(boolean b, int i2) {\n+\n+        byte by=81;\n+        int i21=-24074, i22=7, i23=-7, i24=-70, iArr2[]=new int[N];\n+        boolean b2=false;\n+        init(iArr2, -27);\n+\n+        vMeth(189, i2, i2);\n+        for (int i20 : iArr2) {\n+            by *= (byte) TestIfReplacedByMainLoopExit.instanceCount;\n+            for (i23 = 1; i23 < 4; ++i23) {\n+                i24 -= i23;\n+                TestIfReplacedByMainLoopExit.bFld = b2;\n+            }\n+        }\n+        long meth_res = (b ? 1 : 0) + i2 + by + i21 + i22 + i23 + i24 + (b2 ? 1 : 0) + checkSum(iArr2);\n+        iMeth_check_sum += meth_res;\n+        return (int)meth_res;\n+    }\n+\n+    public void mainTest(String[] strArr1) {\n+        int i, i1, i25, i26=9, i27, i28;\n+        byte by1=35;\n+        float f2;\n+\n+        for (i = 17; 310 > i; ++i) {\n+            i1 = ((iMeth(TestIfReplacedByMainLoopExit.bFld, iFld) - iFld) + by1);\n+        }\n+        i1 = 231;\n+        iFld += -13496;\n+        for (i25 = 2; i25 < 271; i25++) {\n+            i26 -= i;\n+            if (TestIfReplacedByMainLoopExit.bFld) break;\n+        }\n+        i26 = i;\n+        iFld += (int)1.338F;\n+        iFld += 30984;\n+        i27 = 1;\n+        do {\n+            iFld *= i25;\n+            for (i28 = 4; i28 < 75; ++i28) {\n+                i1 += i25;\n+            }\n+        } while (++i27 < 335);\n+        f2 = 210;\n+        do {\n+            iFld -= i25;\n+        } while (--f2 > 0);\n+\n+        System.out.println(\"iFld = \" + iFld);\n+    }\n+\n+    public static void main(String[] strArr) {\n+        TestIfReplacedByMainLoopExit _instance = new TestIfReplacedByMainLoopExit();\n+        _instance.mainTest(strArr);\n+        int iFld_sav = _instance.iFld;\n+        for (int i = 0; i < 10; i++ ) {\n+            _instance.iFld=-11;\n+            _instance.mainTest(strArr);\n+            if (_instance.iFld != iFld_sav) {\n+                throw new RuntimeException(\"incorrect execution \" + _instance.iFld + \" != \" + iFld_sav);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestIfReplacedByMainLoopExit.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}