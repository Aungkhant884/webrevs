{"files":[{"patch":"@@ -1507,0 +1507,1 @@\n+            RecordComponent toRemove = null;\n@@ -1512,1 +1513,9 @@\n-                    return rc;\n+                    if (rc.type.hasTag(TypeTag.ERROR) && !var.sym.type.hasTag(TypeTag.ERROR)) {\n+                        \/\/ Found a record component with an erroneous type: save it so that it can be removed later.\n+                        \/\/ If the class type of the record component is generated by annotation processor, it should\n+                        \/\/ use the new actual class type and symbol instead of the old dummy ErrorType.\n+                        toRemove = rc;\n+                    } else {\n+                        \/\/ Found a good record component: just return.\n+                        return rc;\n+                    }\n@@ -1516,1 +1525,6 @@\n-            if (addIfMissing) {\n+            if (toRemove != null) {\n+                \/\/ Found a record component with an erroneous type: remove it and create a new one\n+                recordComponents = List.filter(recordComponents, toRemove);\n+                recordComponents = recordComponents.append(rc = new RecordComponent(var.sym, annotations));\n+            } else if (addIfMissing) {\n+                \/\/ Didn't find the record component: create one.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Set;\n+\n+@SupportedAnnotationTypes(\"*\")\n+public class GenerateTypeProcessor extends AbstractProcessor {\n+\n+    private String code = \"public class GeneratedType { }\";\n+\n+    private boolean firstTime = true;\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        \/\/ Create a new class: GeneratedType\n+        if (firstTime) {\n+            try (OutputStream out =\n+                         processingEnv.getFiler().createSourceFile(\"GeneratedType\").openOutputStream()) {\n+                out.write(code.getBytes());\n+            } catch (IOException ex) {\n+                ex.printStackTrace();\n+            }\n+            firstTime = false;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public SourceVersion getSupportedSourceVersion() {\n+        return SourceVersion.latest();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/GenerateTypeProcessor.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273408\n+ * @summary The compiler shouldn't crash when record component uses the class generated by the annotation processor.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ * @compile GenerateTypeProcessor.java\n+ * @run main RecordComponentTypeTest\n+ *\/\n+\n+import com.sun.tools.classfile.*;\n+\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.Task;\n+\n+public class RecordComponentTypeTest extends TestRunner {\n+\n+    ToolBox tb;\n+    ClassFile cf;\n+\n+    public RecordComponentTypeTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        RecordComponentTypeTest t = new RecordComponentTypeTest();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testRecordComponentUsingGeneratedType() throws Exception {\n+        String code = \"public record RecordComponentUsingGeneratedType(GeneratedType generatedType) { }\";\n+        Path curPath = Path.of(\".\");\n+\n+        \/\/ Have no annotation processor.\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"RecordComponentUsingGeneratedType.java:1:49: compiler.err.cant.resolve.location: kindname.class, \" +\n+                \"GeneratedType, , , (compiler.misc.location: kindname.class, RecordComponentUsingGeneratedType, null)\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+\n+        \/\/ Have annotation processor, and processor generates expected type.\n+        new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-processor\", \"GenerateTypeProcessor\")\n+                .outdir(curPath)\n+                .run();\n+    }\n+\n+    @Test\n+    public void testRecordComponentUsingUnknownType() throws Exception {\n+        String code = \"public record RecordComponentUsingUnknownType(UnknownType unknownType) { }\";\n+        Path curPath = Path.of(\".\");\n+\n+        \/\/ Have no annotation processor.\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"RecordComponentUsingUnknownType.java:1:47: compiler.err.cant.resolve.location: kindname.class, \" +\n+                \"UnknownType, , , (compiler.misc.location: kindname.class, RecordComponentUsingUnknownType, null)\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+\n+        \/\/ Have annotation processor, but processor doesn't generate the expected type.\n+        List<String> output2 = new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .options(\"-XDrawDiagnostics\", \"-processor\", \"GenerateTypeProcessor\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected2 = Arrays.asList(\n+                \"RecordComponentUsingUnknownType.java:1:47: compiler.err.cant.resolve.location: kindname.class, \" +\n+                \"UnknownType, , , (compiler.misc.location: kindname.class, RecordComponentUsingUnknownType, null)\",\n+                \"1 error\");\n+        tb.checkEqual(expected2, output2);\n+    }\n+\n+\n+    @Test\n+    public void testRecordComponentUsingGeneratedTypeWithAnnotation() throws Exception {\n+        String code = \"\"\"\n+                import java.lang.annotation.Retention;\n+                import java.lang.annotation.RetentionPolicy;\n+                public record RecordComponentUsingGeneratedTypeWithAnnotation(@TestAnnotation GeneratedType generatedType) { }\n+\n+                @Retention(RetentionPolicy.RUNTIME)\n+                @interface TestAnnotation { }\n+                \"\"\";\n+        Path curPath = Path.of(\".\");\n+        new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-processor\", \"GenerateTypeProcessor\")\n+                .outdir(curPath)\n+                .run();\n+        cf = ClassFile.read(curPath.resolve(\"RecordComponentUsingGeneratedTypeWithAnnotation.class\"));\n+\n+        for (Field field : cf.fields) {\n+            if (\"generatedType\".equals(field.getName(cf.constant_pool))) {\n+                checkRuntimeVisibleAnnotation(field.attributes);\n+            }\n+        }\n+\n+        for (Method method : cf.methods) {\n+            if (\"generatedType\".equals(method.getName(cf.constant_pool))) {\n+                checkRuntimeVisibleAnnotation(method.attributes);\n+            }\n+        }\n+    }\n+\n+    private void checkRuntimeVisibleAnnotation(Attributes attributes) throws Exception {\n+        RuntimeVisibleAnnotations_attribute annotations =\n+                (RuntimeVisibleAnnotations_attribute) attributes.get(Attribute.RuntimeVisibleAnnotations);\n+        boolean hasAnnotation = false;\n+        for (Annotation annotation : annotations.annotations) {\n+            if (\"LTestAnnotation;\".equals(cf.constant_pool.getUTF8Value(annotation.type_index))) {\n+                hasAnnotation = true;\n+            }\n+        }\n+        if (!hasAnnotation) {\n+            throw new AssertionError(\"Expected RuntimeVisibleAnnotation doesn't appear\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/RecordComponentTypeTest.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"}]}