{"files":[{"patch":"@@ -94,0 +94,18 @@\n+bool AppLauncher::libEnvVariableContainsAppDir() const {\n+    tstring value = SysInfo::getEnvVariable(std::nothrow,\n+            libEnvVarName, tstring());\n+#ifdef _WIN32\n+    value = tstrings::toLower(value);\n+#endif\n+\n+    const tstring_array tokens = tstrings::split(value,\n+            tstring(1, FileUtils::pathSeparator));\n+    return tokens.end() != std::find(tokens.begin(), tokens.end(),\n+#ifdef _WIN32\n+        tstrings::toLower(appDirPath)\n+#else\n+        appDirPath\n+#endif\n+    );\n+}\n+\n@@ -115,2 +133,6 @@\n-    SysInfo::setEnvVariable(libEnvVarName, SysInfo::getEnvVariable(\n-            std::nothrow, libEnvVarName) + FileUtils::pathSeparator + appDirPath);\n+    if (!libEnvVariableContainsAppDir()) {\n+        SysInfo::setEnvVariable(libEnvVarName, SysInfo::getEnvVariable(\n+                std::nothrow, libEnvVarName)\n+                + FileUtils::pathSeparator\n+                + appDirPath);\n+    }\n","filename":"src\/jdk.jpackage\/share\/native\/applauncher\/AppLauncher.cpp","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -68,0 +68,2 @@\n+    bool libEnvVariableContainsAppDir() const;\n+\n","filename":"src\/jdk.jpackage\/share\/native\/applauncher\/AppLauncher.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,0 +141,1 @@\n+    const tstring appDirPath = FileUtils::mkpath() << appImageRoot << _T(\"app\");\n@@ -144,2 +145,1 @@\n-    std::unique_ptr<Jvm> jvm(AppLauncher()\n-        .setImageRoot(appImageRoot)\n+    const AppLauncher appLauncher = AppLauncher().setImageRoot(appImageRoot)\n@@ -147,1 +147,1 @@\n-        .setAppDir(FileUtils::mkpath() << appImageRoot << _T(\"app\"))\n+        .setAppDir(appDirPath)\n@@ -150,2 +150,40 @@\n-                << _T(\"runtime\"))\n-        .createJvmLauncher());\n+            << _T(\"runtime\"));\n+\n+    const bool restart = !appLauncher.libEnvVariableContainsAppDir();\n+\n+    std::unique_ptr<Jvm> jvm(appLauncher.createJvmLauncher());\n+\n+    if (restart) {\n+        jvm = std::unique_ptr<Jvm>();\n+\n+        STARTUPINFOW si;\n+        ZeroMemory(&si, sizeof(si));\n+        si.cb = sizeof(si);\n+\n+        PROCESS_INFORMATION pi;\n+        ZeroMemory(&pi, sizeof(pi));\n+\n+        if (!CreateProcessW(launcherPath.c_str(), GetCommandLineW(),\n+                NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi)) {\n+            JP_THROW(SysError(tstrings::any() << \"CreateProcessW() failed\",\n+                                                            CreateProcessW));\n+        }\n+\n+        WaitForSingleObject(pi.hProcess, INFINITE);\n+\n+        UniqueHandle childProcessHandle(pi.hProcess);\n+        UniqueHandle childThreadHandle(pi.hThread);\n+\n+        DWORD exitCode;\n+        if (!GetExitCodeProcess(pi.hProcess, &exitCode)) {\n+            JP_THROW(SysError(tstrings::any() << \"GetExitCodeProcess() failed\",\n+                                                        GetExitCodeProcess));\n+        }\n+\n+        if (exitCode != 0) {\n+            JP_THROW(tstrings::any() << \"Child process exited with code \"\n+                                                                << exitCode);\n+        }\n+\n+        return;\n+    }\n","filename":"src\/jdk.jpackage\/windows\/native\/applauncher\/WinLauncher.cpp","additions":43,"deletions":5,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,4 +125,0 @@\n-\n-    if (0 != _tputenv_s(name.c_str(), value.c_str())) {\n-        JP_THROW(tstrings::any() << \"_tputenv_s(\" << name << \", \" << value << \") failed: \" << lastCRTError());\n-    }\n","filename":"src\/jdk.jpackage\/windows\/native\/common\/WinSysInfo.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"}]}