{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -624,1 +624,1 @@\n-bool IdealLoopTree::is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar) const {\n+bool IdealLoopTree::is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar DEBUG_ONLY(COMMA ProjNode *predicate_proj)) const {\n@@ -665,0 +665,15 @@\n+#ifdef ASSERT\n+  if (offset && phase->has_ctrl(offset)) {\n+    Node* offset_ctrl = phase->get_ctrl(offset);\n+    if (phase->get_loop(predicate_proj) == phase->get_loop(offset_ctrl) &&\n+        phase->is_dominator(predicate_proj, offset_ctrl)) {\n+      \/\/ If the control of offset is loop predication promoted by previous pass,\n+      \/\/ then it will lead to cyclic dependency.\n+      \/\/ Previously promoted loop predication is in the same loop of predication\n+      \/\/ point.\n+      \/\/ This situation can occur when pinning nodes too conservatively - can we do better?\n+      assert(false, \"cyclic dependency prevents range check elimination, idx: offset %d, offset_ctrl %d, predicate_proj %d\",\n+             offset->_idx, offset_ctrl->_idx, predicate_proj->_idx);\n+    }\n+  }\n+#endif\n@@ -1144,1 +1159,1 @@\n-  } else if (cl != NULL && loop->is_range_check_if(iff, this, invar)) {\n+  } else if (cl != NULL && loop->is_range_check_if(iff, this, invar DEBUG_ONLY(COMMA predicate_proj))) {\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -740,1 +740,1 @@\n-  bool is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar) const;\n+  bool is_range_check_if(IfNode *iff, PhaseIdealLoop *phase, Invariance& invar DEBUG_ONLY(COMMA ProjNode *predicate_proj)) const;\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1628,1 +1628,8 @@\n-        x->set_req(0, in);\n+        if (mem->is_Phi() && (mem->in(0) == region) && mem->in(i)->in(0) != NULL &&\n+            MemNode::all_controls_dominate(address, region)) {\n+          \/\/ Enable other optimizations such as loop predication which does not work\n+          \/\/ if we directly pin the node to node `in`\n+          x->set_req(0, mem->in(i)->in(0)); \/\/ Use same control as memory\n+        } else {\n+          x->set_req(0, in);\n+        }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8272574\n+ * @summary Crashes in PhaseIdealLoop::build_loop_late_post_work\n+ * @requires vm.compiler2.enabled\n+ *\n+ * @run main TestLoopPredicateDep\n+ *\n+ *\/\n+\n+public class TestLoopPredicateDep {\n+    public static void getPermutations(byte[] inputArray, byte[][] outputArray) {\n+        int[] indexes = new int[]{0, 2};\n+\n+        for (int a = 0; a < a + 16; a++) {\n+            int oneIdx = indexes[0]++;\n+            for (int b = a + 1; b < inputArray.length; b++) {\n+                int twoIdx = indexes[1]++;\n+                outputArray[twoIdx][0] = inputArray[a];\n+                outputArray[twoIdx][1] = inputArray[b];\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        final byte[] inputArray = new byte[]{0, 1};\n+        final byte[][] outputArray = new byte[3][2];\n+\n+        for (int i = 0; i < 10; ++i) {\n+            Thread t = new Thread(new Runnable() {\n+                public void run() {\n+                    for (int i = 0; i < 1000000; i++) {\n+                        getPermutations(inputArray, outputArray);\n+                    }\n+                }\n+            });\n+            t.setDaemon(true);\n+            t.start();\n+            try {\n+                Thread.sleep(100);\n+            } catch (Exception e) {\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopPredicateDep.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}