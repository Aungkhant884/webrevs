{"files":[{"patch":"@@ -1549,1 +1549,1 @@\n-                            loopEnv, exprType, names.iterator, List.nil(), List.nil());\n+                            loopEnv, types.skipTypeVars(exprType, false), names.iterator, List.nil(), List.nil());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273234\n+ * @summary extended 'for' with expression of type tvar causes the compiler to crash\n+ * @compile ExprTypeIsTypeVariableTest.java\n+ *\/\n+\n+import java.util.*;\n+\n+class ExprTypeIsTypeVariableTest {\n+    abstract class A {}\n+\n+    abstract class ACD<E> implements Iterable<E> {\n+        public Iterator<E> iterator() {\n+            return null;\n+        }\n+    }\n+\n+    abstract class ALD<E> extends ACD<E> implements List<E> {}\n+\n+    abstract class ASP<NT extends A> extends ALD<A> {\n+        <P extends ASP<NT>> void foo(P prod) {\n+            for (A sym : prod) {}\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/foreach\/ExprTypeIsTypeVariableTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}