{"files":[{"patch":"@@ -666,1 +666,1 @@\n-    assert(klass->size_helper() >= 0, \"illegal instance size\");\n+    assert(klass->size_helper() > 0, \"illegal instance size\");\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-  if (!(offset >= 0 && offset < layout_helper())) {\n+  if (!(offset >= 0 && offset < layout_helper_size_in_bytes())) {\n@@ -213,1 +213,1 @@\n-  assert(offset >= 0 && offset < layout_helper(), \"offset must be tame\");\n+  assert(offset >= 0 && offset < layout_helper_size_in_bytes(), \"offset must be tame\");\n@@ -230,1 +230,3 @@\n-      if (super == NULL || super->nof_nonstatic_fields() == 0) {\n+      if (super == NULL ||\n+          super->nof_nonstatic_fields() == 0 ||\n+          super->layout_helper_size_in_bytes() <= offset) {\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -168,0 +168,3 @@\n+  jint                   layout_helper_size_in_bytes()  {\n+    return Klass::layout_helper_size_in_bytes(layout_helper());\n+  }\n","filename":"src\/hotspot\/share\/ci\/ciInstanceKlass.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1355,1 +1355,1 @@\n-          offset < k->size_helper() * wordSize) {\n+          offset < k->layout_helper_size_in_bytes()) {\n@@ -1379,1 +1379,1 @@\n-    } else if (offset < 0 || offset >= k->size_helper() * wordSize) {\n+    } else if (offset < 0 || offset >= k->layout_helper_size_in_bytes()) {\n@@ -1389,0 +1389,1 @@\n+      assert(offset < canonical_holder->layout_helper_size_in_bytes(), \"\");\n@@ -1661,1 +1662,1 @@\n-          tinst->offset() >= (tinst->klass()->as_instance_klass()->size_helper() * wordSize)) {\n+          tinst->offset() >= (tinst->klass()->as_instance_klass()->layout_helper_size_in_bytes())) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273359\n+ *\n+ * @modules java.base\/jdk.internal.misc:+open\n+ * @run main\/othervm -Xbatch compiler.unsafe.AlignmentGapAccess\n+ *\/\n+\n+package compiler.unsafe;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+public class AlignmentGapAccess {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    static class A           { int  fa; }\n+    static class B extends A { byte fb; }\n+\n+    static final long FA_OFFSET = UNSAFE.objectFieldOffset(A.class, \"fa\");\n+    static final long FB_OFFSET = UNSAFE.objectFieldOffset(B.class, \"fb\");\n+\n+    static int test(B obj) {\n+        return UNSAFE.getInt(obj, FB_OFFSET + 1);\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 20_000; i++) {\n+            test(new B());\n+        }\n+        System.out.println(\"TEST PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/AlignmentGapAccess.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}