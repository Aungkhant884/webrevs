{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,3 @@\n-    private static final Gregorian GREGORIAN_INSTANCE = new Gregorian();\n+    private static final class GregorianHolder {\n+        private static final Gregorian GREGORIAN_INSTANCE = new Gregorian();\n+    }\n@@ -123,1 +125,1 @@\n-        return GREGORIAN_INSTANCE;\n+        return GregorianHolder.GREGORIAN_INSTANCE;\n@@ -138,1 +140,1 @@\n-            return GREGORIAN_INSTANCE;\n+            return GregorianHolder.GREGORIAN_INSTANCE;\n","filename":"src\/java.base\/share\/classes\/sun\/util\/calendar\/CalendarSystem.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+\/**\n+ * @test\n+ * @bug 8273790\n+ * @summary Verify that concurrent classloading of sun.util.calendar.Gregorian and\n+ * sun.util.calendar.CalendarSystem doesn't lead to a deadlock\n+ * @modules java.base\/sun.util.calendar:open\n+ * @run main\/othervm CalendarSystemDeadLockTest\n+ * @run main\/othervm CalendarSystemDeadLockTest\n+ * @run main\/othervm CalendarSystemDeadLockTest\n+ * @run main\/othervm CalendarSystemDeadLockTest\n+ * @run main\/othervm CalendarSystemDeadLockTest\n+ *\/\n+public class CalendarSystemDeadLockTest {\n+\n+    public static void main(final String[] args) throws Exception {\n+        testConcurrentClassLoad();\n+    }\n+\n+    \/**\n+     * Loads {@code sun.util.calendar.Gregorian} and {@code sun.util.calendar.CalendarSystem}\n+     * and invokes {@code sun.util.calendar.CalendarSystem#getGregorianCalendar()} concurrently\n+     * in a thread of their own and expects the classloading of both those classes\n+     * to succeed. Additionally, after these tasks are done, calls the\n+     * sun.util.calendar.CalendarSystem#getGregorianCalendar() and expects it to return a singleton\n+     * instance\n+     *\/\n+    private static void testConcurrentClassLoad() throws Exception {\n+        final int numTasks = 7;\n+        final CountDownLatch taskTriggerLatch = new CountDownLatch(numTasks);\n+        final List<Callable<?>> tasks = new ArrayList<>();\n+        \/\/ add the sun.util.calendar.Gregorian and sun.util.calendar.CalendarSystem for classloading.\n+        \/\/ there are main 2 classes which had a cyclic call in their static init\n+        tasks.add(new ClassLoadTask(\"sun.util.calendar.Gregorian\", taskTriggerLatch));\n+        tasks.add(new ClassLoadTask(\"sun.util.calendar.CalendarSystem\", taskTriggerLatch));\n+        \/\/ add a few other classes for classloading, those which call CalendarSystem#getGregorianCalendar()\n+        \/\/ or CalendarSystem#forName() during their static init\n+        tasks.add(new ClassLoadTask(\"java.util.GregorianCalendar\", taskTriggerLatch));\n+        tasks.add(new ClassLoadTask(\"java.util.Date\", taskTriggerLatch));\n+        tasks.add(new ClassLoadTask(\"java.util.JapaneseImperialCalendar\", taskTriggerLatch));\n+        \/\/ add a couple of tasks which directly invoke sun.util.calendar.CalendarSystem#getGregorianCalendar()\n+        tasks.add(new GetGregorianCalTask(taskTriggerLatch));\n+        tasks.add(new GetGregorianCalTask(taskTriggerLatch));\n+        \/\/ before triggering the tests make sure we have created the correct number of tasks\n+        \/\/ the countdown latch uses\/expects\n+        if (numTasks != tasks.size()) {\n+            throw new RuntimeException(\"Test setup failure - unexpected number of tasks \" + tasks.size()\n+                    + \", expected \" + numTasks);\n+        }\n+        final ExecutorService executor = Executors.newFixedThreadPool(tasks.size());\n+        try {\n+            final Future<?>[] results = new Future[tasks.size()];\n+            \/\/ submit\n+            int i = 0;\n+            for (final Callable<?> task : tasks) {\n+                results[i++] = executor.submit(task);\n+            }\n+            \/\/ wait for completion\n+            for (i = 0; i < tasks.size(); i++) {\n+                results[i].get();\n+            }\n+        } finally {\n+            executor.shutdownNow();\n+        }\n+        \/\/ check that the sun.util.calendar.CalendarSystem#getGregorianCalendar() does indeed return\n+        \/\/ a proper instance\n+        final Object gCal = callCalSystemGetGregorianCal();\n+        if (gCal == null) {\n+            throw new RuntimeException(\"sun.util.calendar.CalendarSystem#getGregorianCalendar()\" +\n+                    \" unexpectedly returned null\");\n+        }\n+        \/\/ now verify that each call to getGregorianCalendar(), either in the tasks or here, returned the exact\n+        \/\/ same instance\n+        if (GetGregorianCalTask.instances.size() != 2) {\n+            throw new RuntimeException(\"Unexpected number of results from call \" +\n+                    \"to sun.util.calendar.CalendarSystem#getGregorianCalendar()\");\n+        }\n+        \/\/ intentional identity check since sun.util.calendar.CalendarSystem#getGregorianCalendar() is\n+        \/\/ expected to return a singleton instance\n+        if ((gCal != GetGregorianCalTask.instances.get(0)) || (gCal != GetGregorianCalTask.instances.get(1))) {\n+            throw new RuntimeException(\"sun.util.calendar.CalendarSystem#getGregorianCalendar()\" +\n+                    \" returned different instances\");\n+        }\n+    }\n+\n+    \/**\n+     * Reflectively calls sun.util.calendar.CalendarSystem#getGregorianCalendar() and returns\n+     * the result\n+     *\/\n+    private static Object callCalSystemGetGregorianCal() throws Exception {\n+        final Class<?> k = Class.forName(\"sun.util.calendar.CalendarSystem\");\n+        return k.getDeclaredMethod(\"getGregorianCalendar\").invoke(null);\n+    }\n+\n+    private static class ClassLoadTask implements Callable<Class<?>> {\n+        private final String className;\n+        private final CountDownLatch latch;\n+\n+        private ClassLoadTask(final String className, final CountDownLatch latch) {\n+            this.className = className;\n+            this.latch = latch;\n+        }\n+\n+        @Override\n+        public Class<?> call() {\n+            System.out.println(Thread.currentThread().getName() + \" loading \" + this.className);\n+            try {\n+                \/\/ let the other tasks know we are ready to trigger our work\n+                latch.countDown();\n+                \/\/ wait for the other task to let us know they are ready to trigger their work too\n+                latch.await();\n+                return Class.forName(this.className);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    private static class GetGregorianCalTask implements Callable<Object> {\n+        \/\/ keeps track of the instances returned by calls to sun.util.calendar.CalendarSystem#getGregorianCalendar()\n+        \/\/ by this task\n+        private static final List<Object> instances = Collections.synchronizedList(new ArrayList<>());\n+        private final CountDownLatch latch;\n+\n+        private GetGregorianCalTask(final CountDownLatch latch) {\n+            this.latch = latch;\n+        }\n+\n+        @Override\n+        public Object call() {\n+            System.out.println(Thread.currentThread().getName()\n+                    + \" calling  sun.util.calendar.CalendarSystem#getGregorianCalendar()\");\n+            try {\n+                \/\/ let the other tasks know we are ready to trigger our work\n+                latch.countDown();\n+                \/\/ wait for the other task to let us know they are ready to trigger their work too\n+                latch.await();\n+                final Object inst = callCalSystemGetGregorianCal();\n+                instances.add(inst);\n+                return inst;\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/util\/calendar\/CalendarSystemDeadLockTest.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"}]}