{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,2 @@\n-     * client to itself using the S4U2self extension.\n-     * @param client the client to impersonate\n+     * user to itself using the S4U2self extension.\n+     * @param user the user to impersonate\n@@ -59,1 +59,1 @@\n-     * @return the new creds (cname=client, sname=middle)\n+     * @return the new creds (cname=user, sname=middle)\n@@ -61,1 +61,1 @@\n-    public static Credentials acquireS4U2selfCreds(PrincipalName client,\n+    public static Credentials acquireS4U2selfCreds(PrincipalName user,\n@@ -67,1 +67,1 @@\n-        String uRealm = client.getRealmString();\n+        String uRealm = user.getRealmString();\n@@ -71,1 +71,1 @@\n-            \/\/ and the client impersonated are on different realms.\n+            \/\/ and the user impersonated are on different realms.\n@@ -90,2 +90,2 @@\n-                ccreds, ccreds.getClient(), sname, null,\n-                new PAData[] {\n+                ccreds, ccreds.getClient(), sname, user,\n+                null, new PAData[] {\n@@ -93,1 +93,1 @@\n-                                new PAForUserEnc(client,\n+                                new PAForUserEnc(user,\n@@ -101,1 +101,1 @@\n-        if (!creds.getClient().equals(client)) {\n+        if (!creds.getClient().equals(user)) {\n@@ -139,1 +139,1 @@\n-                ccreds, ccreds.getClient(), backendPrincipal,\n+                ccreds, ccreds.getClient(), backendPrincipal, null,\n@@ -316,1 +316,1 @@\n-                S4U2Type.NONE);\n+                null, S4U2Type.NONE);\n@@ -328,2 +328,2 @@\n-            Ticket[] additionalTickets, PAData[] extraPAs,\n-            S4U2Type s4u2Type)\n+            PrincipalName user, Ticket[] additionalTickets,\n+            PAData[] extraPAs, S4U2Type s4u2Type)\n@@ -334,1 +334,1 @@\n-                        s4u2Type, additionalTickets, extraPAs);\n+                        s4u2Type, user, additionalTickets, extraPAs);\n@@ -342,1 +342,1 @@\n-                additionalTickets, extraPAs);\n+                user, additionalTickets, extraPAs);\n@@ -352,2 +352,2 @@\n-            S4U2Type s4u2Type, Ticket[] additionalTickets,\n-            PAData[] extraPAs)\n+            S4U2Type s4u2Type, PrincipalName user,\n+            Ticket[] additionalTickets, PAData[] extraPAs)\n@@ -365,1 +365,2 @@\n-                    ReferralsCache.get(cname, sname, refSname.getRealmString());\n+                    ReferralsCache.get(cname, sname, user,\n+                            additionalTickets, refSname.getRealmString());\n@@ -370,1 +371,1 @@\n-                        additionalTickets, extraPAs);\n+                        user, additionalTickets, extraPAs);\n@@ -381,9 +382,3 @@\n-                        if (s4u2Type == S4U2Type.NONE) {\n-                            \/\/ Do not store S4U2Self or S4U2Proxy referral\n-                            \/\/ TGTs in the cache. Caching such tickets is not\n-                            \/\/ defined in MS-SFU and may cause unexpected\n-                            \/\/ results when using them in a different context.\n-                            ReferralsCache.put(cname, sname,\n-                                    server.getRealmString(),\n-                                    serverNameStrings[1], creds);\n-                        }\n+                        ReferralsCache.put(cname, sname, user,\n+                                additionalTickets, server.getRealmString(),\n+                                serverNameStrings[1], creds);\n@@ -414,1 +409,1 @@\n-                    handleS4U2SelfReferral(extraPAs, asCreds, creds);\n+                    handleS4U2SelfReferral(extraPAs, user, creds);\n@@ -443,2 +438,2 @@\n-            S4U2Type s4u2Type, Ticket[] additionalTickets,\n-            PAData[] extraPAs)\n+            S4U2Type s4u2Type, PrincipalName user,\n+            Ticket[] additionalTickets, PAData[] extraPAs)\n@@ -472,1 +467,1 @@\n-                handleS4U2SelfReferral(extraPAs, asCreds, newTgt);\n+                handleS4U2SelfReferral(extraPAs, user, newTgt);\n@@ -501,1 +496,1 @@\n-            Credentials oldCeds, Credentials newCreds)\n+            PrincipalName user, Credentials newCreds)\n@@ -509,3 +504,0 @@\n-                PAForUserEnc paForUser = new PAForUserEnc(\n-                        new DerValue(pa.getValue()),\n-                        oldCeds.getSessionKey());\n@@ -513,1 +505,1 @@\n-                        new PAForUserEnc(paForUser.getName(),\n+                        new PAForUserEnc(user,\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/CredentialsUtil.java","additions":31,"deletions":39,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Red Hat, Inc.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc.\n@@ -28,0 +28,1 @@\n+import java.util.Arrays;\n@@ -34,0 +35,1 @@\n+import java.util.Objects;\n@@ -54,1 +56,4 @@\n-        ReferralCacheKey (PrincipalName cname, PrincipalName sname) {\n+        private PrincipalName user; \/\/ S4U2Self only\n+        private byte[] userSvcTicketEnc; \/\/ S4U2Proxy only\n+        ReferralCacheKey (PrincipalName cname, PrincipalName sname,\n+                PrincipalName user, Ticket userSvcTicket) {\n@@ -57,0 +62,7 @@\n+            this.user = user;\n+            if (userSvcTicket != null && userSvcTicket.encPart != null) {\n+                byte[] userSvcTicketEnc = userSvcTicket.encPart.getBytes();\n+                if (userSvcTicketEnc.length > 0) {\n+                    this.userSvcTicketEnc = userSvcTicketEnc;\n+                }\n+            }\n@@ -63,1 +75,3 @@\n-                    sname.equals(that.sname);\n+                    sname.equals(that.sname) &&\n+                    Objects.equals(user, that.user) &&\n+                    Arrays.equals(userSvcTicketEnc, that.userSvcTicketEnc);\n@@ -66,1 +80,3 @@\n-            return cname.hashCode() + sname.hashCode();\n+            return cname.hashCode() + sname.hashCode() +\n+                    Objects.hashCode(user) +\n+                    Arrays.hashCode(userSvcTicketEnc);\n@@ -87,1 +103,2 @@\n-     * service principal, source KDC realm, destination KDC realm and\n+     * service principal, user principal (S4U2Self only), client service\n+     * ticket (S4U2Proxy only), source KDC realm, destination KDC realm and\n@@ -97,2 +114,6 @@\n-            String fromRealm, String toRealm, Credentials creds) {\n-        ReferralCacheKey k = new ReferralCacheKey(cname, service);\n+            PrincipalName user, Ticket[] userSvcTickets, String fromRealm,\n+            String toRealm, Credentials creds) {\n+        Ticket userSvcTicket = (userSvcTickets != null ?\n+                userSvcTickets[0] : null);\n+        ReferralCacheKey k = new ReferralCacheKey(cname, service,\n+                user, userSvcTicket);\n@@ -128,1 +149,2 @@\n-     * service principal and a source KDC realm.\n+     * a service principal, a user principal (S4U2Self only), a client\n+     * service ticket (S4U2Proxy only) and a source KDC realm.\n@@ -131,2 +153,6 @@\n-            PrincipalName service, String fromRealm) {\n-        ReferralCacheKey k = new ReferralCacheKey(cname, service);\n+            PrincipalName service, PrincipalName user,\n+            Ticket[] userSvcTickets, String fromRealm) {\n+        Ticket userSvcTicket = (userSvcTickets != null ?\n+                userSvcTickets[0] : null);\n+        ReferralCacheKey k = new ReferralCacheKey(cname, service,\n+                user, userSvcTicket);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/ReferralsCache.java","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Red Hat, Inc.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc.\n@@ -290,0 +290,10 @@\n+        testImpersonationSingle();\n+\n+        \/\/ Try a second time to force the use of the Referrals Cache.\n+        \/\/ During this execution, the referral ticket from RABBIT.HOLE\n+        \/\/ to DEV.RABBIT.HOLE (upon the initial S4U2Self message) will\n+        \/\/ be obtained from the Cache.\n+        testImpersonationSingle();\n+    }\n+\n+    private static void testImpersonationSingle() throws Exception {\n@@ -309,0 +319,10 @@\n+        testDelegationWithReferralsSingle();\n+\n+        \/\/ Try a second time to force the use of the Referrals Cache.\n+        \/\/ During this execution, the referral ticket from RABBIT.HOLE\n+        \/\/ to DEV.RABBIT.HOLE (upon the initial S4U2Proxy message) will\n+        \/\/ be obtained from the Cache.\n+        testDelegationWithReferralsSingle();\n+    }\n+\n+    private static void testDelegationWithReferralsSingle() throws Exception {\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/ReferralsTest.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}