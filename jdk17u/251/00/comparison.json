{"files":[{"patch":"@@ -37,0 +37,1 @@\n+import java.lang.annotation.Native;\n@@ -42,0 +43,1 @@\n+import java.util.Arrays;\n@@ -60,0 +62,2 @@\n+import javax.swing.JList;\n+import javax.swing.JTree;\n@@ -119,6 +123,1 @@\n-        if (c != null) {\n-            try {\n-                return LWCToolkit.invokeAndWait(callable, c);\n-            } catch (final Exception e) { e.printStackTrace(); }\n-        }\n-        return null;\n+        return invokeAndWait(callable, c, null);\n@@ -554,0 +553,4 @@\n+                if (parent instanceof JList) {\n+                    ((JList) parent).setSelectedIndex(i);\n+                    return;\n+                }\n@@ -654,3 +657,3 @@\n-    static final int JAVA_AX_ALL_CHILDREN = -1;\n-    static final int JAVA_AX_SELECTED_CHILDREN = -2;\n-    static final int JAVA_AX_VISIBLE_CHILDREN = -3;\n+    @Native static final int JAVA_AX_ALL_CHILDREN = -1;\n+    @Native static final int JAVA_AX_SELECTED_CHILDREN = -2;\n+    @Native static final int JAVA_AX_VISIBLE_CHILDREN = -3;\n@@ -663,47 +666,50 @@\n-                ArrayList<Object> childrenAndRoles = new ArrayList<Object>();\n-                _addChildren(a, whichChildren, allowIgnored, childrenAndRoles);\n-\n-                \/* In the case of fetching a selection, need to check to see if\n-                 * the active descendant is at the beginning of the list.  If it\n-                 * is not it needs to be moved to the beginning of the list so\n-                 * VoiceOver will annouce it correctly.  The list returned\n-                 * from Java is always in order from top to bottom, but when shift\n-                 * selecting downward (extending the list) or multi-selecting using\n-                 * the VO keys control+option+command+return the active descendant\n-                 * is not at the top of the list in the shift select down case and\n-                 * may not be in the multi select case.\n-                 *\/\n-                if (whichChildren == JAVA_AX_SELECTED_CHILDREN) {\n-                    if (!childrenAndRoles.isEmpty()) {\n-                        AccessibleContext activeDescendantAC =\n-                            CAccessible.getActiveDescendant(a);\n-                        if (activeDescendantAC != null) {\n-                            String activeDescendantName =\n-                                activeDescendantAC.getAccessibleName();\n-                            AccessibleRole activeDescendantRole =\n-                                activeDescendantAC.getAccessibleRole();\n-                            \/\/ Move active descendant to front of list.\n-                            \/\/ List contains pairs of each selected item's\n-                            \/\/ Accessible and AccessibleRole.\n-                            ArrayList<Object> newArray  = new ArrayList<Object>();\n-                            int count = childrenAndRoles.size();\n-                            Accessible currentAccessible = null;\n-                            AccessibleContext currentAC = null;\n-                            String currentName = null;\n-                            AccessibleRole currentRole = null;\n-                            for (int i = 0; i < count; i+=2) {\n-                                \/\/ Is this the active descendant?\n-                                currentAccessible = (Accessible)childrenAndRoles.get(i);\n-                                currentAC = currentAccessible.getAccessibleContext();\n-                                currentName = currentAC.getAccessibleName();\n-                                currentRole = (AccessibleRole)childrenAndRoles.get(i+1);\n-                                if (currentName != null && currentName.equals(activeDescendantName) &&\n-                                     currentRole.equals(activeDescendantRole) ) {\n-                                    newArray.add(0, currentAccessible);\n-                                    newArray.add(1, currentRole);\n-                                } else {\n-                                    newArray.add(currentAccessible);\n-                                    newArray.add(currentRole);\n-                                }\n-                            }\n-                            childrenAndRoles = newArray;\n+                return getChildrenAndRolesImpl(a, c, whichChildren, allowIgnored);\n+            }\n+        }, c);\n+    }\n+\n+    private static Object[] getChildrenAndRolesImpl(final Accessible a, final Component c, final int whichChildren, final boolean allowIgnored) {\n+        if (a == null) return null;\n+\n+        ArrayList<Object> childrenAndRoles = new ArrayList<Object>();\n+        _addChildren(a, whichChildren, allowIgnored, childrenAndRoles);\n+\n+        \/* In case of fetching a selection, we need to check if\n+* the active descendant is at the beginning of the list, or\n+* otherwise move it, so that VoiceOver announces it correctly.\n+                * The java list is always in order from top to bottom, but when\n+                * (1) shift-selecting downward (extending the list) or (2) multi-selecting with\n+                * the VO keys (CTRL+ALT+CMD+RETURN) the active descendant\n+                * is not at the top of the list in the 1st case and may not be in the 2nd.\n+                *\/\n+        if (whichChildren == JAVA_AX_SELECTED_CHILDREN) {\n+            if (!childrenAndRoles.isEmpty()) {\n+                AccessibleContext activeDescendantAC =\n+                        CAccessible.getActiveDescendant(a);\n+                if (activeDescendantAC != null) {\n+                    String activeDescendantName =\n+                            activeDescendantAC.getAccessibleName();\n+                    AccessibleRole activeDescendantRole =\n+                            activeDescendantAC.getAccessibleRole();\n+                    \/\/ Move active descendant to front of list.\n+                    \/\/ List contains pairs of each selected item's\n+                    \/\/ Accessible and AccessibleRole.\n+                    ArrayList<Object> newArray = new ArrayList<Object>();\n+                    int count = childrenAndRoles.size();\n+                    Accessible currentAccessible = null;\n+                    AccessibleContext currentAC = null;\n+                    String currentName = null;\n+                    AccessibleRole currentRole = null;\n+                    for (int i = 0; i < count; i += 2) {\n+                        \/\/ Is this the active descendant?\n+                        currentAccessible = (Accessible) childrenAndRoles.get(i);\n+                        currentAC = currentAccessible.getAccessibleContext();\n+                        currentName = currentAC.getAccessibleName();\n+                        currentRole = (AccessibleRole) childrenAndRoles.get(i + 1);\n+                        if (currentName != null && currentName.equals(activeDescendantName) &&\n+                                currentRole.equals(activeDescendantRole)) {\n+                            newArray.add(0, currentAccessible);\n+                            newArray.add(1, currentRole);\n+                        } else {\n+                            newArray.add(currentAccessible);\n+                            newArray.add(currentRole);\n@@ -712,0 +718,1 @@\n+                    childrenAndRoles = newArray;\n@@ -713,0 +720,69 @@\n+            }\n+        }\n+\n+        if ((whichChildren < 0) || (whichChildren * 2 >= childrenAndRoles.size())) {\n+            return childrenAndRoles.toArray();\n+        }\n+\n+        return new Object[]{childrenAndRoles.get(whichChildren * 2), childrenAndRoles.get((whichChildren * 2) + 1)};\n+    }\n+\n+    \/\/ This method is called from the native\n+    \/\/ Each child takes up three entries in the array: one for itself, one for its role, and one for the recursion level\n+    private static Object[] getChildrenAndRolesRecursive(final Accessible a, final Component c, final int whichChildren, final boolean allowIgnored, final int level) {\n+        if (a == null) return null;\n+        return invokeAndWait(new Callable<Object[]>() {\n+            public Object[] call() throws Exception {\n+                ArrayList<Object> currentLevelChildren = new ArrayList<Object>();\n+                ArrayList<Object> allChildren = new ArrayList<Object>();\n+                ArrayList<Accessible> parentStack = new ArrayList<Accessible>();\n+                parentStack.add(a);\n+                ArrayList<Integer> indexses = new ArrayList<Integer>();\n+                Integer index = 0;\n+                int currentLevel = level;\n+                while (!parentStack.isEmpty()) {\n+                    Accessible p = parentStack.get(parentStack.size() - 1);\n+\n+                    currentLevelChildren.addAll(Arrays.asList(getChildrenAndRolesImpl(p, c, JAVA_AX_ALL_CHILDREN, allowIgnored)));\n+                    if ((currentLevelChildren.size() == 0) || (index >= currentLevelChildren.size())) {\n+                        if (!parentStack.isEmpty()) parentStack.remove(parentStack.size() - 1);\n+                        if (!indexses.isEmpty()) index = indexses.remove(indexses.size() - 1);\n+                        currentLevel -= 1;\n+                        currentLevelChildren.clear();\n+                        continue;\n+                    }\n+\n+                    Accessible ca = null;\n+                    Object obj = currentLevelChildren.get(index);\n+                    if (!(obj instanceof Accessible)) {\n+                        index += 2;\n+                        currentLevelChildren.clear();\n+                        continue;\n+                    }\n+                    ca = (Accessible) obj;\n+                    Object role = currentLevelChildren.get(index + 1);\n+                    currentLevelChildren.clear();\n+\n+                    AccessibleContext cac = ca.getAccessibleContext();\n+                    if (cac == null) {\n+                        index += 2;\n+                        continue;\n+                    }\n+\n+                    if ((cac.getAccessibleStateSet().contains(AccessibleState.SELECTED) && (whichChildren == JAVA_AX_SELECTED_CHILDREN)) ||\n+                            (cac.getAccessibleStateSet().contains(AccessibleState.VISIBLE) && (whichChildren == JAVA_AX_VISIBLE_CHILDREN)) ||\n+                            (whichChildren == JAVA_AX_ALL_CHILDREN)) {\n+                        allChildren.add(ca);\n+                        allChildren.add(role);\n+                        allChildren.add(String.valueOf(currentLevel));\n+                    }\n+\n+                    index += 2;\n+\n+                    if (cac.getAccessibleStateSet().contains(AccessibleState.EXPANDED)) {\n+                        parentStack.add(ca);\n+                        indexses.add(index);\n+                        index = 0;\n+                        currentLevel += 1;\n+                        continue;\n+                    }\n@@ -714,2 +790,0 @@\n-                if ((whichChildren < 0) || (whichChildren * 2 >= childrenAndRoles.size())) {\n-                    return childrenAndRoles.toArray();\n@@ -718,1 +792,1 @@\n-                return new Object[] { childrenAndRoles.get(whichChildren * 2), childrenAndRoles.get((whichChildren * 2) + 1) };\n+                return allChildren.toArray();\n@@ -723,2 +797,2 @@\n-    private static final int JAVA_AX_ROWS = 1;\n-    private static final int JAVA_AX_COLS = 2;\n+    @Native private static final int JAVA_AX_ROWS = 1;\n+    @Native private static final int JAVA_AX_COLS = 2;\n@@ -743,0 +817,17 @@\n+    private static int[] getTableSelectedInfo(final Accessible a, final Component c,\n+                                              final int info) {\n+        if (a == null) return null;\n+        return invokeAndWait(() -> {\n+            AccessibleContext ac = a.getAccessibleContext();\n+            AccessibleTable table = ac.getAccessibleTable();\n+            if (table != null) {\n+                if (info == JAVA_AX_COLS) {\n+                    return table.getSelectedAccessibleColumns();\n+                } else if (info == JAVA_AX_ROWS) {\n+                    return table.getSelectedAccessibleRows();\n+                }\n+            }\n+            return null;\n+        }, c);\n+    }\n+\n@@ -861,0 +952,14 @@\n+\n+    private static boolean isTreeRootVisible(Accessible a, Component c) {\n+        if (a == null) return false;\n+\n+        return invokeAndWait(new Callable<Boolean>() {\n+            public Boolean call() throws Exception {\n+                Accessible sa = CAccessible.getSwingAccessible(a);\n+                if (sa instanceof JTree) {\n+                    return ((JTree) sa).isRootVisible();\n+                }\n+                return false;\n+            }\n+        }, c);\n+    }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessibility.java","additions":166,"deletions":61,"binary":false,"changes":227,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import javax.swing.JProgressBar;\n@@ -36,3 +35,0 @@\n-import javax.swing.JSlider;\n-import javax.swing.event.ChangeEvent;\n-import javax.swing.event.ChangeListener;\n@@ -78,0 +74,2 @@\n+    private static native void treeNodeExpanded(long ptr);\n+    private static native void treeNodeCollapsed(long ptr);\n@@ -140,0 +138,7 @@\n+\n+                    if (newValue == AccessibleState.EXPANDED) {\n+                        treeNodeExpanded(ptr);\n+                    } else if (newValue == AccessibleState.COLLAPSED) {\n+                        treeNodeCollapsed(ptr);\n+                    }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CAccessible.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,2 +30,1 @@\n-#import \"JavaComponentAccessibility.h\"\n-#import \"JavaTextAccessibility.h\"\n+#import \"a11y\/CommonComponentAccessibility.h\"\n@@ -614,1 +613,1 @@\n-    id ax = [[[JavaComponentAccessibility alloc] initWithParent:self withEnv:env withAccessible:jcomponent withIndex:-1 withView:self withJavaRole:nil] autorelease];\n+    id ax = [[[CommonComponentAccessibility alloc] initWithParent:self withEnv:env withAccessible:jcomponent withIndex:-1 withView:self withJavaRole:nil] autorelease];\n@@ -619,5 +618,0 @@\n-- (NSArray *)accessibilityAttributeNames\n-{\n-    return [[super accessibilityAttributeNames] arrayByAddingObject:NSAccessibilityChildrenAttribute];\n-}\n-\n@@ -625,2 +619,1 @@\n-\/\/ attribute methods\n-- (id)accessibilityAttributeValue:(NSString *)attribute\n+- (id)accessibilityChildren\n@@ -629,0 +622,1 @@\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n@@ -630,5 +624,1 @@\n-    if ([attribute isEqualToString:NSAccessibilityChildrenAttribute])\n-    {\n-        JNIEnv *env = [ThreadUtilities getJNIEnv];\n-\n-        (*env)->PushLocalFrame(env, 4);\n+    (*env)->PushLocalFrame(env, 4);\n@@ -636,1 +626,1 @@\n-        id result = NSAccessibilityUnignoredChildrenForOnlyChild([self getAxData:env]);\n+    id result = NSAccessibilityUnignoredChildrenForOnlyChild([self getAxData:env]);\n@@ -638,1 +628,1 @@\n-        (*env)->PopLocalFrame(env, NULL);\n+    (*env)->PopLocalFrame(env, NULL);\n@@ -640,6 +630,1 @@\n-        return result;\n-    }\n-    else\n-    {\n-        return [super accessibilityAttributeValue:attribute];\n-    }\n+    return result;\n@@ -647,1 +632,2 @@\n-- (BOOL)accessibilityIsIgnored\n+\n+- (BOOL)isAccessibilityElement\n@@ -649,1 +635,1 @@\n-    return YES;\n+    return NO;\n@@ -659,1 +645,1 @@\n-    id result = [[self getAxData:env] accessibilityHitTest:point withEnv:env];\n+    id result = [[self getAxData:env] accessibilityHitTest:point];\n@@ -684,1 +670,1 @@\n-- (NSString *)accessibleSelectedText\n+- (NSString *)accessibilitySelectedText\n@@ -687,2 +673,9 @@\n-    if (![focused isKindOfClass:[JavaTextAccessibility class]]) return nil;\n-    return [(JavaTextAccessibility *)focused accessibilitySelectedTextAttribute];\n+    if (![focused respondsToSelector:@selector(accessibilitySelectedText)]) return nil;\n+    return [focused accessibilitySelectedText];\n+}\n+\n+- (void)setAccessibilitySelectedText:(NSString *)accessibilitySelectedText {\n+    id focused = [self accessibilityFocusedUIElement];\n+    if ([focused respondsToSelector:@selector(setAccessibilitySelectedText:)]) {\n+    [focused setAccessibilitySelectedText:accessibilitySelectedText];\n+}\n@@ -694,1 +687,1 @@\n-    NSString *selectedText = [self accessibleSelectedText];\n+    NSString *selectedText = [self accessibilitySelectedText];\n@@ -707,2 +700,2 @@\n-    if (![focused isKindOfClass:[JavaTextAccessibility class]]) return NO;\n-    [(JavaTextAccessibility *)focused accessibilitySetSelectedTextAttribute:text];\n+    if (![focused respondsToSelector:@selector(setAccessibilitySelectedText)]) return NO;\n+    [focused setAccessibilitySelectedText:text];\n@@ -718,1 +711,1 @@\n-        NSString *selectedText = [self accessibleSelectedText];\n+        NSString *selectedText = [self accessibilitySelectedText];\n@@ -731,1 +724,1 @@\n-        return [pboard setString:[self accessibleSelectedText] forType:NSStringPboardType];\n+        return [pboard setString:[self accessibilitySelectedText] forType:NSStringPboardType];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTView.m","additions":27,"deletions":34,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+extern NSMutableDictionary *sActions;\n+extern NSMutableDictionary *sActionSelectors;\n+extern NSMutableArray *sAllActionSelectors;\n+void initializeActions();\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityAction.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+NSMutableDictionary *sActions = nil;\n+NSMutableDictionary *sActionSelectors = nil;\n+NSMutableArray *sAllActionSelectors = nil;\n+void initializeActions();\n@@ -151,0 +155,28 @@\n+\n+void initializeActions() {\n+    int actionsCount = 5;\n+\n+    sActions = [[NSMutableDictionary alloc] initWithCapacity:actionsCount];\n+\n+    [sActions setObject:NSAccessibilityPressAction forKey:@\"click\"];\n+    [sActions setObject:NSAccessibilityIncrementAction forKey:@\"increment\"];\n+    [sActions setObject:NSAccessibilityDecrementAction forKey:@\"decrement\"];\n+    [sActions setObject:NSAccessibilityShowMenuAction forKey:@\"togglePopup\"];\n+    [sActions setObject:NSAccessibilityPressAction forKey:@\"toggleExpand\"];\n+\n+    sActionSelectors = [[NSMutableDictionary alloc] initWithCapacity:actionsCount];\n+\n+    [sActionSelectors setObject:NSStringFromSelector(@selector(accessibilityPerformPress)) forKey:NSAccessibilityPressAction];\n+    [sActionSelectors setObject:NSStringFromSelector(@selector(accessibilityPerformShowMenu)) forKey:NSAccessibilityShowMenuAction];\n+    [sActionSelectors setObject:NSStringFromSelector(@selector(accessibilityPerformDecrement)) forKey:NSAccessibilityDecrementAction];\n+    [sActionSelectors setObject:NSStringFromSelector(@selector(accessibilityPerformIncrement)) forKey:NSAccessibilityIncrementAction];\n+    [sActionSelectors setObject:NSStringFromSelector(@selector(accessibilityPerformPick)) forKey:NSAccessibilityPickAction];\n+\n+    sAllActionSelectors = [[NSMutableArray alloc] initWithCapacity:actionsCount];\n+\n+    [sAllActionSelectors addObject:NSStringFromSelector(@selector(accessibilityPerformPick))];\n+    [sAllActionSelectors addObject:NSStringFromSelector(@selector(accessibilityPerformIncrement))];\n+    [sAllActionSelectors addObject:NSStringFromSelector(@selector(accessibilityPerformDecrement))];\n+    [sAllActionSelectors addObject:NSStringFromSelector(@selector(accessibilityPerformShowMenu))];\n+    [sAllActionSelectors addObject:NSStringFromSelector(@selector(accessibilityPerformPress))];\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityAction.m","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+BOOL isExpanded(JNIEnv *env, jobject axContext, jobject component);\n@@ -63,0 +64,3 @@\n+BOOL ObjectEquals(JNIEnv *env, jobject a, jobject b, jobject component);\n+NSNumber* JavaNumberToNSNumber(JNIEnv *env, jobject jnumber);\n+NSValue *javaIntArrayToNSRangeValue(JNIEnv* env, jintArray array);\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityUtilities.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#import \"ThreadUtilities.h\"\n@@ -206,0 +207,14 @@\n+BOOL isExpanded(JNIEnv *env, jobject axContext, jobject component)\n+{\n+    GET_ACCESSIBLESTATE_CLASS_RETURN(NO);\n+    DECLARE_STATIC_FIELD_RETURN(jm_EXPANDED,\n+                                    sjc_AccessibleState,\n+                                    \"EXPANDED\",\n+                                    \"Ljavax\/accessibility\/AccessibleState;\", NO );\n+    jobject axExpandedState = (*env)->GetStaticObjectField(env, sjc_AccessibleState, jm_EXPANDED);\n+    CHECK_EXCEPTION_NULL_RETURN(axExpandedState, NO);\n+    BOOL expanded = containsAxState(env, axContext, axExpandedState, component);\n+    (*env)->DeleteLocalRef(env, axExpandedState);\n+    return expanded;\n+}\n+\n@@ -357,0 +372,69 @@\n+\/*\n+ * Returns Object.equals for the two items\n+ * This may use LWCToolkit.invokeAndWait(); don't call while holding fLock\n+ * and try to pass a component so the event happens on the correct thread.\n+ *\/\n+BOOL ObjectEquals(JNIEnv *env, jobject a, jobject b, jobject component)\n+{\n+    DECLARE_CLASS_RETURN(sjc_Object, \"java\/lang\/Object\", NO);\n+    DECLARE_METHOD_RETURN(jm_equals, sjc_Object, \"equals\", \"(Ljava\/lang\/Object;)Z\", NO);\n+\n+    if ((a == NULL) && (b == NULL)) return YES;\n+    if ((a == NULL) || (b == NULL)) return NO;\n+\n+    if (pthread_main_np() != 0) {\n+        \/\/ If we are on the AppKit thread\n+        DECLARE_CLASS_RETURN(sjc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\", NO);\n+        DECLARE_STATIC_METHOD_RETURN(jm_doEquals, sjc_LWCToolkit, \"doEquals\",\n+                                     \"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/awt\/Component;)Z\", NO);\n+        return (*env)->CallStaticBooleanMethod(env, sjc_LWCToolkit, jm_doEquals, a, b, component);\n+        CHECK_EXCEPTION();\n+    }\n+\n+    jboolean jb = (*env)->CallBooleanMethod(env, a, jm_equals, b);\n+    CHECK_EXCEPTION();\n+    return jb;\n+}\n+\n+\/*\n+ * The java\/lang\/Number concrete class could be for any of the Java primitive\n+ * numerical types or some other subclass.\n+ * All existing A11Y code uses Integer so that is what we look for first\n+ * But all must be able to return a double and NSNumber accepts a double,\n+ * so that's the fall back.\n+ *\/\n+NSNumber* JavaNumberToNSNumber(JNIEnv *env, jobject jnumber) {\n+    if (jnumber == NULL) {\n+        return nil;\n+    }\n+    DECLARE_CLASS_RETURN(jnumber_Class, \"java\/lang\/Number\", nil);\n+    DECLARE_CLASS_RETURN(jinteger_Class, \"java\/lang\/Integer\", nil);\n+    DECLARE_METHOD_RETURN(jm_intValue, jnumber_Class, \"intValue\", \"()I\", nil);\n+    DECLARE_METHOD_RETURN(jm_doubleValue, jnumber_Class, \"doubleValue\", \"()D\", nil);\n+    if ((*env)->IsInstanceOf(env, jnumber, jinteger_Class)) {\n+        jint i = (*env)->CallIntMethod(env, jnumber, jm_intValue);\n+        CHECK_EXCEPTION();\n+        return [NSNumber numberWithInteger:i];\n+    } else {\n+        jdouble d = (*env)->CallDoubleMethod(env, jnumber, jm_doubleValue);\n+        CHECK_EXCEPTION();\n+        return [NSNumber numberWithDouble:d];\n+    }\n+}\n+\n+\/*\n+ * Converts an int array to an NSRange wrapped inside an NSValue\n+ * takes [start, end] values and returns [start, end - start]\n+ *\/\n+NSValue *javaIntArrayToNSRangeValue(JNIEnv* env, jintArray array) {\n+    jint *values = (*env)->GetIntArrayElements(env, array, 0);\n+    if (values == NULL) {\n+        \/\/ Note: Java will not be on the stack here so a java exception can't happen and no need to call ExceptionCheck.\n+        NSLog(@\"%s failed calling GetIntArrayElements\", __FUNCTION__);\n+        return nil;\n+    };\n+    NSValue *value = [NSValue valueWithRange:NSMakeRange(values[0], values[1] - values[0])];\n+    (*env)->ReleaseIntArrayElements(env, array, values, 0);\n+    return value;\n+}\n+\n@@ -426,1 +510,1 @@\n-    [sRoles setObject:NSAccessibilityGridRole forKey:@\"table\"];\n+    [sRoles setObject:NSAccessibilityTableRole forKey:@\"table\"];\n@@ -432,1 +516,1 @@\n-    [sRoles setObject:NSAccessibilityBrowserRole forKey:@\"tree\"];\n+    [sRoles setObject:NSAccessibilityOutlineRole forKey:@\"tree\"];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaAccessibilityUtilities.m","additions":86,"deletions":2,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#import \"a11y\/CommonComponentAccessibility.h\"\n@@ -48,0 +47,6 @@\n+\/\/ these constants are duplicated in CAccessibility.java\n+#define JAVA_AX_ALL_CHILDREN (-1)\n+#define JAVA_AX_SELECTED_CHILDREN (-2)\n+#define JAVA_AX_VISIBLE_CHILDREN (-3)\n+\/\/ If the value is >=0, it's an index\n+\n@@ -85,1 +90,1 @@\n-@interface TabGroupAccessibility : JavaComponentAccessibility {\n+@interface TabGroupLegacyAccessibility : JavaComponentAccessibility {\n@@ -115,1 +120,1 @@\n-@interface TableAccessibility : JavaComponentAccessibility {\n+@interface TableLegacyAccessibility : JavaComponentAccessibility {\n@@ -365,6 +370,10 @@\n-    newChild = [CommonComponentAccessibility getComponentAccessibility:javaRole];\n-    if (newChild == nil) {\n-        if ([javaRole isEqualToString:@\"pagetablist\"]) {\n-            newChild = [TabGroupAccessibility alloc];\n-        } else if ([javaRole isEqualToString:@\"table\"]) {\n-            newChild = [TableAccessibility alloc];\n+    if ([javaRole isEqualToString:@\"pagetablist\"]) {\n+        newChild = [TabGroupLegacyAccessibility alloc];\n+    } else if ([javaRole isEqualToString:@\"table\"]) {\n+        newChild = [TableLegacyAccessibility alloc];\n+    } else {\n+        NSString *nsRole = [sRoles objectForKey:javaRole];\n+        if ([nsRole isEqualToString:NSAccessibilityStaticTextRole] ||\n+            [nsRole isEqualToString:NSAccessibilityTextAreaRole] ||\n+            [nsRole isEqualToString:NSAccessibilityTextFieldRole]) {\n+            newChild = [JavaTextAccessibility alloc];\n@@ -372,8 +381,1 @@\n-            NSString *nsRole = [sRoles objectForKey:javaRole];\n-            if ([nsRole isEqualToString:NSAccessibilityStaticTextRole] ||\n-                [nsRole isEqualToString:NSAccessibilityTextAreaRole] ||\n-                [nsRole isEqualToString:NSAccessibilityTextFieldRole]) {\n-                newChild = [JavaTextAccessibility alloc];\n-            } else {\n-                newChild = [JavaComponentAccessibility alloc];\n-            }\n+            newChild = [JavaComponentAccessibility alloc];\n@@ -390,1 +392,1 @@\n-         ![[parent javaRole] isEqualToString:@\"combobox\"] ) {\n+        ![[parent javaRole] isEqualToString:@\"combobox\"] ) {\n@@ -907,26 +909,0 @@\n-\/*\n- * The java\/lang\/Number concrete class could be for any of the Java primitive\n- * numerical types or some other subclass.\n- * All existing A11Y code uses Integer so that is what we look for first\n- * But all must be able to return a double and NSNumber accepts a double,\n- * so that's the fall back.\n- *\/\n-static NSNumber* JavaNumberToNSNumber(JNIEnv *env, jobject jnumber) {\n-    if (jnumber == NULL) {\n-        return nil;\n-    }\n-    DECLARE_CLASS_RETURN(jnumber_Class, \"java\/lang\/Number\", nil);\n-    DECLARE_CLASS_RETURN(jinteger_Class, \"java\/lang\/Integer\", nil);\n-    DECLARE_METHOD_RETURN(jm_intValue, jnumber_Class, \"intValue\", \"()I\", nil);\n-    DECLARE_METHOD_RETURN(jm_doubleValue, jnumber_Class, \"doubleValue\", \"()D\", nil);\n-    if ((*env)->IsInstanceOf(env, jnumber, jinteger_Class)) {\n-        jint i = (*env)->CallIntMethod(env, jnumber, jm_intValue);\n-        CHECK_EXCEPTION();\n-        return [NSNumber numberWithInteger:i];\n-    } else {\n-        jdouble d = (*env)->CallDoubleMethod(env, jnumber, jm_doubleValue);\n-        CHECK_EXCEPTION();\n-        return [NSNumber numberWithDouble:d];\n-    }\n-}\n-\n@@ -1604,1 +1580,1 @@\n-@implementation TabGroupAccessibility\n+@implementation TabGroupLegacyAccessibility\n@@ -1806,3 +1782,0 @@\n-\n-static BOOL ObjectEquals(JNIEnv *env, jobject a, jobject b, jobject component);\n-\n@@ -1877,1 +1850,1 @@\n-@implementation TableAccessibility\n+@implementation TableLegacyAccessibility\n@@ -1911,27 +1884,0 @@\n-\n-\/*\n- * Returns Object.equals for the two items\n- * This may use LWCToolkit.invokeAndWait(); don't call while holding fLock\n- * and try to pass a component so the event happens on the correct thread.\n- *\/\n-static BOOL ObjectEquals(JNIEnv *env, jobject a, jobject b, jobject component)\n-{\n-    DECLARE_CLASS_RETURN(sjc_Object, \"java\/lang\/Object\", NO);\n-    DECLARE_METHOD_RETURN(jm_equals, sjc_Object, \"equals\", \"(Ljava\/lang\/Object;)Z\", NO);\n-\n-    if ((a == NULL) && (b == NULL)) return YES;\n-    if ((a == NULL) || (b == NULL)) return NO;\n-\n-    if (pthread_main_np() != 0) {\n-        \/\/ If we are on the AppKit thread\n-        DECLARE_CLASS_RETURN(sjc_LWCToolkit, \"sun\/lwawt\/macosx\/LWCToolkit\", NO);\n-        DECLARE_STATIC_METHOD_RETURN(jm_doEquals, sjc_LWCToolkit, \"doEquals\",\n-                                     \"(Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/awt\/Component;)Z\", NO);\n-        return (*env)->CallStaticBooleanMethod(env, sjc_LWCToolkit, jm_doEquals, a, b, component);\n-        CHECK_EXCEPTION();\n-    }\n-\n-    jboolean jb = (*env)->CallBooleanMethod(env, a, jm_equals, b);\n-    CHECK_EXCEPTION();\n-    return jb;\n-}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaComponentAccessibility.m","additions":22,"deletions":76,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -56,17 +56,0 @@\n-\n-\/*\n- * Converts an int array to an NSRange wrapped inside an NSValue\n- * takes [start, end] values and returns [start, end - start]\n- *\/\n-NSValue *javaIntArrayToNSRangeValue(JNIEnv* env, jintArray array) {\n-    jint *values = (*env)->GetIntArrayElements(env, array, 0);\n-    if (values == NULL) {\n-        \/\/ Note: Java will not be on the stack here so a java exception can't happen and no need to call ExceptionCheck.\n-        NSLog(@\"%s failed calling GetIntArrayElements\", __FUNCTION__);\n-        return nil;\n-    };\n-    NSValue *value = [NSValue valueWithRange:NSMakeRange(values[0], values[1] - values[0])];\n-    (*env)->ReleaseIntArrayElements(env, array, values, 0);\n-    return value;\n-}\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaTextAccessibility.m","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-    return [self accessibilityTitleAttribute];\n+    return [super accessibilityLabel];\n@@ -47,0 +47,10 @@\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ButtonAccessibility.m","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface CellAccessibility : CommonComponentAccessibility\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CellAccessibility.h","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CellAccessibility.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"TableAccessibility.h\"\n+\n+@implementation CellAccessibility\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSAccessibilityRole)accessibilityRole\n+{\n+    return NSAccessibilityCellRole;;\n+}\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    NSArray *children = [super accessibilityChildren];\n+    if (children == NULL) {\n+        NSString *javaRole = [self  javaRole];\n+        CommonComponentAccessibility *newChild = [CommonComponentAccessibility createWithParent:self\n+                                                                       accessible:self->fAccessible\n+                                                                             role:javaRole\n+                                                                            index:self->fIndex\n+                                                                          withEnv:[ThreadUtilities getJNIEnv]\n+                                                                         withView:self->fView\n+                                                                        isWrapped:NO];\n+        return [NSArray arrayWithObject:newChild];\n+    } else {\n+        return children;\n+    }\n+}\n+\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n+- (NSRange)accessibilityRowIndexRange {\n+    NSInteger location = -1;\n+    if ([[(CommonComponentAccessibility *)fParent accessibilityParent] isKindOfClass:[TableAccessibility class]]) {\n+        TableAccessibility *table = [(CommonComponentAccessibility *)fParent accessibilityParent];\n+        location = [table accessibleRowAtIndex:fIndex];\n+    }\n+\n+    return NSMakeRange(location, 1);\n+}\n+\n+- (NSRange)accessibilityColumnIndexRange {\n+    NSInteger location = -1;\n+    if ([[(CommonComponentAccessibility *)fParent accessibilityParent] isKindOfClass:[TableAccessibility class]]) {\n+        TableAccessibility *table = [(CommonComponentAccessibility *)fParent accessibilityParent];\n+        location = [table accessibleColumnAtIndex:fIndex];\n+    }\n+\n+    return NSMakeRange(location, 1);\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CellAccessibility.m","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -42,1 +42,1 @@\n-    return [self accessibilityValueAttribute];\n+    return [super accessibilityValue];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CheckboxAccessibility.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface ColumnAccessibility : CommonComponentAccessibility\n+\n+@property(readonly) NSUInteger columnNumberInTable;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ColumnAccessibility.h","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#import \"JavaAccessibilityAction.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"CellAccessibility.h\"\n+#import \"ColumnAccessibility.h\"\n+#import \"TableAccessibility.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n+\n+static jclass sjc_CAccessibility = NULL;\n+\n+static jmethodID jm_getChildrenAndRoles = NULL;\n+#define GET_CHILDRENANDROLES_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(jm_getChildrenAndRoles, sjc_CAccessibility, \"getChildrenAndRoles\",\\\n+                      \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZ)[Ljava\/lang\/Object;\", ret);\n+\n+@implementation ColumnAccessibility\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSAccessibilityRole)accessibilityRole\n+{\n+    return NSAccessibilityColumnRole;\n+}\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    NSArray *children = [super accessibilityChildren];\n+    if (children == NULL) {\n+        JNIEnv *env = [ThreadUtilities getJNIEnv];\n+        CommonComponentAccessibility *parent = [self accessibilityParent];\n+        if (parent->fAccessible == NULL) return nil;\n+        GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n+        jobjectArray jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n+                                                                                      parent->fAccessible, parent->fComponent, sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN, NO);\n+        CHECK_EXCEPTION();\n+        if (jchildrenAndRoles == NULL) return nil;\n+\n+        jsize arrayLen = (*env)->GetArrayLength(env, jchildrenAndRoles);\n+        NSMutableArray *childrenCells = [NSMutableArray arrayWithCapacity:arrayLen\/2];\n+\n+        NSUInteger childIndex = fIndex;\n+\n+        int inc = [(TableAccessibility *)[self accessibilityParent] accessibilityRowCount] * 2;\n+        NSInteger i = childIndex * 2;\n+        for(i; i < arrayLen; i += inc)\n+        {\n+            jobject \/* Accessible *\/ jchild = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i);\n+            jobject \/* String *\/ jchildJavaRole = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i+1);\n+\n+            NSString *childJavaRole = nil;\n+            if (jchildJavaRole != NULL) {\n+                DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n+                DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n+                jobject jkey = (*env)->GetObjectField(env, jchildJavaRole, sjf_key);\n+                CHECK_EXCEPTION();\n+                childJavaRole = JavaStringToNSString(env, jkey);\n+                (*env)->DeleteLocalRef(env, jkey);\n+            }\n+\n+            CellAccessibility *child = [[CellAccessibility alloc] initWithParent:self\n+                                                                         withEnv:env\n+                                                                  withAccessible:jchild\n+                                                                       withIndex:childIndex\n+                                                                        withView:self->fView\n+                                                                    withJavaRole:childJavaRole];\n+            [childrenCells addObject:[[child retain] autorelease]];\n+\n+            (*env)->DeleteLocalRef(env, jchild);\n+            (*env)->DeleteLocalRef(env, jchildJavaRole);\n+\n+            childIndex += (inc \/ 2);\n+        }\n+        (*env)->DeleteLocalRef(env, jchildrenAndRoles);\n+        return childrenCells;\n+    } else {\n+        return children;\n+    }\n+}\n+\n+- (NSInteger)accessibilityIndex\n+{\n+    return fIndex;\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ColumnAccessibility.m","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface ComboBoxAccessibility : CommonComponentAccessibility\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ComboBoxAccessibility.h","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ComboBoxAccessibility.h\"\n+#import \"..\/JavaAccessibilityUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+\n+static jclass sjc_CAccessibility = NULL;\n+\n+static jmethodID sjm_getAccessibleName = NULL;\n+#define GET_ACCESSIBLENAME_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\", \\\n+                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", ret);\n+\n+@implementation ComboBoxAccessibility\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (id)accessibilityValue {\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    if (axContext == NULL) return nil;\n+    jclass axContextClass = (*env)->GetObjectClass(env, axContext);\n+    DECLARE_METHOD_RETURN(jm_getAccessibleSelection, axContextClass, \"getAccessibleSelection\", \"(I)Ljavax\/accessibility\/Accessible;\", nil);\n+    jobject axSelectedChild = (*env)->CallObjectMethod(env, axContext, jm_getAccessibleSelection, 0);\n+    CHECK_EXCEPTION();\n+    (*env)->DeleteLocalRef(env, axContext);\n+    if (axSelectedChild == NULL) {\n+        return nil;\n+    }\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    GET_ACCESSIBLENAME_METHOD_RETURN(nil);\n+    jobject childName = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleName, axSelectedChild, fComponent);\n+    CHECK_EXCEPTION();\n+    if (childName == NULL) {\n+        (*env)->DeleteLocalRef(env, axSelectedChild);\n+        return nil;\n+    }\n+    NSString *selectedText = JavaStringToNSString(env, childName);\n+    (*env)->DeleteLocalRef(env, axSelectedChild);\n+    (*env)->DeleteLocalRef(env, childName);\n+    return selectedText;\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ComboBoxAccessibility.m","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -29,1 +29,3 @@\n-#import \"JavaComponentAccessibility.h\"\n+#include \"jni.h\"\n+\n+#import <AppKit\/AppKit.h>\n@@ -32,5 +34,6 @@\n-\/\/ these constants are duplicated in CAccessibility.java\n-#define JAVA_AX_ALL_CHILDREN (-1)\n-#define JAVA_AX_SELECTED_CHILDREN (-2)\n-#define JAVA_AX_VISIBLE_CHILDREN (-3)\n-\/\/ If the value is >=0, it's an index\n+@interface CommonComponentAccessibility : NSAccessibilityElement {\n+    NSView *fView;\n+    NSObject *fParent;\n+\n+    NSString *fNSRole;\n+    NSString *fJavaRole;\n@@ -38,1 +41,3 @@\n-@interface CommonComponentAccessibility : JavaComponentAccessibility <NSAccessibilityElement> {\n+    jint fIndex;\n+    jobject fAccessible;\n+    jobject fComponent;\n@@ -40,0 +45,3 @@\n+    NSMutableDictionary *fActions;\n+    NSMutableArray *fActionSelectors;\n+    NSObject *fActionsLOCK;\n@@ -41,0 +49,16 @@\n+\n+@property(nonnull, readonly) NSArray *actionSelectors;\n+\n+- (id _Nonnull)initWithParent:(NSObject* _Nonnull)parent withEnv:(JNIEnv _Nonnull * _Nonnull)env withAccessible:(jobject _Nullable)accessible withIndex:(jint)index withView:(NSView* _Nonnull)view withJavaRole:(NSString* _Nullable)javaRole;\n+- (void)unregisterFromCocoaAXSystem;\n+- (void)postValueChanged;\n+- (void)postSelectedTextChanged;\n+- (void)postSelectionChanged;\n+- (void)postTitleChanged;\n+- (void)postTreeNodeExpanded;\n+- (void)postTreeNodeCollapsed;\n+- (BOOL)isEqual:(nonnull id)anObject;\n+- (BOOL)isAccessibleWithEnv:(JNIEnv _Nonnull * _Nonnull)env forAccessible:(nonnull jobject)accessible;\n+\n++ (void)postFocusChanged:(nullable id)message;\n+\n@@ -42,1 +66,38 @@\n-+ (JavaComponentAccessibility * _Nullable) getComponentAccessibility:(NSString * _Nonnull)role;\n+\n++ (CommonComponentAccessibility* _Nullable) getComponentAccessibility:(NSString* _Nonnull)role;\n++ (CommonComponentAccessibility * _Nullable) getComponentAccessibility:(NSString * _Nonnull)role andParent:(CommonComponentAccessibility * _Nonnull)parent;\n+\n++ (NSArray* _Nullable)childrenOfParent:(CommonComponentAccessibility* _Nonnull)parent withEnv:(JNIEnv _Nonnull * _Nonnull)env withChildrenCode:(NSInteger)whichChildren allowIgnored:(BOOL)allowIgnored;\n++ (NSArray* _Nullable)childrenOfParent:(CommonComponentAccessibility* _Nonnull)parent withEnv:(JNIEnv _Nonnull * _Nonnull)env withChildrenCode:(NSInteger)whichChildren allowIgnored:(BOOL)allowIgnored recursive:(BOOL)recursive;\n++ (CommonComponentAccessibility* _Nullable) createWithParent:(CommonComponentAccessibility* _Nullable)parent accessible:(jobject _Nonnull)jaccessible role:(NSString* _Nonnull)javaRole index:(jint)index withEnv:(JNIEnv _Nonnull * _Nonnull)env withView:(NSView* _Nonnull)view;\n++ (CommonComponentAccessibility* _Nullable) createWithAccessible:(jobject _Nonnull)jaccessible role:(NSString* _Nonnull)role index:(jint)index withEnv:(JNIEnv _Nonnull * _Nonnull)env withView:(NSView* _Nonnull)view;\n++ (CommonComponentAccessibility* _Nullable) createWithAccessible:(jobject _Nonnull)jaccessible withEnv:(JNIEnv _Nonnull * _Nonnull)env withView:(NSView* _Nonnull)view;\n+\n+\/\/ If the isWraped parameter is true, then the object passed as a parent was created based on the same java component,\n+\/\/ but performs a different NSAccessibilityRole of a table cell, or a list row, or tree row,\n+\/\/ and we need to create an element whose role corresponds to the role in Java.\n++ (CommonComponentAccessibility* _Nullable) createWithParent:(CommonComponentAccessibility* _Nullable)parent accessible:(jobject _Nonnull)jaccessible role:(NSString* _Nonnull)javaRole index:(jint)index withEnv:(JNIEnv _Nonnull * _Nonnull)env withView:(NSView* _Nonnull)view isWrapped:(BOOL)wrapped;\n+\n+\/\/ The current parameter is used to bypass the check for an item's index on the parent so that the item is created. This is necessary,\n+\/\/ for example, for AccessibleJTreeNode, whose currentComponent has index -1\n++ (CommonComponentAccessibility* _Nullable) createWithAccessible:(jobject _Nonnull)jaccessible withEnv:(JNIEnv _Nonnull * _Nonnull)env withView:(NSView* _Nonnull)view isCurrent:(BOOL)current;\n+\n+- (jobject _Nullable)axContextWithEnv:(JNIEnv _Nonnull * _Nonnull)env;\n+- (NSView* _Nonnull)view;\n+- (NSWindow* _Nonnull)window;\n+- (id _Nonnull)parent;\n+- (NSString* _Nonnull)javaRole;\n+\n+- (BOOL)isMenu;\n+- (BOOL)isSelected:(JNIEnv _Nonnull * _Nonnull)env;\n+- (BOOL)isSelectable:(JNIEnv _Nonnull * _Nonnull)env;\n+- (BOOL)isVisible:(JNIEnv _Nonnull * _Nonnull)env;\n+\n+- (NSArray* _Nullable)accessibleChildrenWithChildCode:(NSInteger)childCode;\n+\n+- (NSDictionary* _Nullable)getActions:(JNIEnv _Nonnull * _Nonnull)env;\n+- (void)getActionsWithEnv:(JNIEnv _Nonnull * _Nonnull)env;\n+- (BOOL)accessiblePerformAction:(NSAccessibilityActionName _Nonnull)actionName;\n+\n+- (BOOL)performAccessibleAction:(int)index;\n+\n@@ -45,1 +106,0 @@\n-- (BOOL)performAccessibleAction:(int)index;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.h","additions":69,"deletions":9,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -27,1 +27,5 @@\n-#import \"JNIUtilities.h\"\n+#import <AppKit\/AppKit.h>\n+#import <JavaRuntimeSupport\/JavaRuntimeSupport.h>\n+#import <dlfcn.h>\n+#import \"JavaAccessibilityAction.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n@@ -29,0 +33,4 @@\n+#import \"JNIUtilities.h\"\n+#import \"AWTView.h\"\n+#import \"sun_lwawt_macosx_CAccessible.h\"\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n@@ -30,0 +38,2 @@\n+\n+\/\/ GET* macros defined in JavaAccessibilityUtilities.h, so they can be shared.\n@@ -31,1 +41,0 @@\n-static jmethodID sjm_getAccessibleComponent = NULL;\n@@ -33,0 +42,19 @@\n+static jmethodID sjm_getAccessibleName = NULL;\n+#define GET_ACCESSIBLENAME_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\", \\\n+                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", ret);\n+\n+static jmethodID jm_getChildrenAndRoles = NULL;\n+#define GET_CHILDRENANDROLES_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(jm_getChildrenAndRoles, sjc_CAccessibility, \"getChildrenAndRoles\",\\\n+                      \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZ)[Ljava\/lang\/Object;\", ret);\n+\n+static jmethodID jm_getChildrenAndRolesRecursive = NULL;\n+#define GET_CHILDRENANDROLESRECURSIVE_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(jm_getChildrenAndRolesRecursive, sjc_CAccessibility, \"getChildrenAndRolesRecursive\",\\\n+                      \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZI)[Ljava\/lang\/Object;\", ret);\n+\n+static jmethodID sjm_getAccessibleComponent = NULL;\n@@ -38,0 +66,10 @@\n+static jmethodID sjm_getAccessibleIndexInParent = NULL;\n+#define GET_ACCESSIBLEINDEXINPARENT_STATIC_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleIndexInParent, sjc_CAccessibility, \"getAccessibleIndexInParent\", \\\n+                             \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)I\", ret);\n+\n+static jclass sjc_CAccessible = NULL;\n+#define GET_CACCESSIBLE_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(sjc_CAccessible, \"sun\/lwawt\/macosx\/CAccessible\", ret);\n+\n@@ -39,0 +77,1 @@\n+static NSMutableDictionary * _Nullable rowRolesMapForParent;\n@@ -47,0 +86,35 @@\n+- (BOOL)isMenu\n+{\n+    id role = [self accessibilityRole];\n+    return [role isEqualToString:NSAccessibilityMenuBarRole] || [role isEqualToString:NSAccessibilityMenuRole] || [role isEqualToString:NSAccessibilityMenuItemRole];\n+}\n+\n+- (BOOL)isSelected:(JNIEnv *)env\n+{\n+    if (fIndex == -1) {\n+        return NO;\n+    }\n+\n+    return isChildSelected(env, ((CommonComponentAccessibility *)[self parent])->fAccessible, fIndex, fComponent);\n+}\n+\n+- (BOOL)isSelectable:(JNIEnv *)env\n+{\n+    jobject axContext = [self axContextWithEnv:env];\n+    BOOL selectable = isSelectable(env, axContext, fComponent);\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return selectable;\n+}\n+\n+- (BOOL)isVisible:(JNIEnv *)env\n+{\n+    if (fIndex == -1) {\n+        return NO;\n+    }\n+\n+    jobject axContext = [self axContextWithEnv:env];\n+    BOOL showing = isShowing(env, axContext, fComponent);\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return showing;\n+}\n+\n@@ -51,1 +125,1 @@\n-    rolesMap = [[NSMutableDictionary alloc] initWithCapacity:37];\n+    rolesMap = [[NSMutableDictionary alloc] initWithCapacity:46];\n@@ -72,0 +146,9 @@\n+    [rolesMap setObject:@\"NavigableTextAccessibility\" forKey:@\"textarea\"];\n+    [rolesMap setObject:@\"NavigableTextAccessibility\" forKey:@\"text\"];\n+    [rolesMap setObject:@\"NavigableTextAccessibility\" forKey:@\"passwordtext\"];\n+    [rolesMap setObject:@\"NavigableTextAccessibility\" forKey:@\"dateeditor\"];\n+    [rolesMap setObject:@\"ComboBoxAccessibility\" forKey:@\"combobox\"];\n+    [rolesMap setObject:@\"TabGroupAccessibility\" forKey:@\"pagetablist\"];\n+    [rolesMap setObject:@\"ListAccessibility\" forKey:@\"list\"];\n+    [rolesMap setObject:@\"OutlineAccessibility\" forKey:@\"tree\"];\n+    [rolesMap setObject:@\"TableAccessibility\" forKey:@\"table\"];\n@@ -97,0 +180,5 @@\n+    rowRolesMapForParent = [[NSMutableDictionary alloc] initWithCapacity:2];\n+\n+    [rowRolesMapForParent setObject:@\"ListRowAccessibility\" forKey:@\"ListAccessibility\"];\n+    [rowRolesMapForParent setObject:@\"OutlineRowAccessibility\" forKey:@\"OutlineAccessibility\"];\n+\n@@ -135,1 +223,1 @@\n-+ (JavaComponentAccessibility *) getComponentAccessibility:(NSString *)role\n++ (CommonComponentAccessibility *) getComponentAccessibility:(NSString *)role\n@@ -146,1 +234,479 @@\n-    return nil;\n+    return [CommonComponentAccessibility alloc];\n+}\n+\n++ (CommonComponentAccessibility *) getComponentAccessibility:(NSString *)role andParent:(CommonComponentAccessibility *)parent\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    if (rolesMap == nil) {\n+        [self initializeRolesMap];\n+    }\n+    NSString *className = [rowRolesMapForParent objectForKey:[[parent class] className]];\n+    if (className == nil) {\n+        return [CommonComponentAccessibility getComponentAccessibility:role];\n+    }\n+    return [NSClassFromString(className) alloc];\n+}\n+\n+- (id)initWithParent:(NSObject *)parent withEnv:(JNIEnv *)env withAccessible:(jobject)accessible withIndex:(jint)index withView:(NSView *)view withJavaRole:(NSString *)javaRole\n+{\n+    self = [super init];\n+    if (self)\n+    {\n+        fParent = [parent retain];\n+        fView = [view retain];\n+        fJavaRole = [javaRole retain];\n+\n+        if (accessible != NULL) {\n+            fAccessible = (*env)->NewWeakGlobalRef(env, accessible);\n+            CHECK_EXCEPTION();\n+        }\n+\n+        jobject jcomponent = [(AWTView *)fView awtComponent:env];\n+        fComponent = (*env)->NewWeakGlobalRef(env, jcomponent);\n+        CHECK_EXCEPTION();\n+\n+        (*env)->DeleteLocalRef(env, jcomponent);\n+\n+        fIndex = index;\n+\n+        fActions = nil;\n+        fActionSelectors = nil;\n+        fActionsLOCK = [[NSObject alloc] init];\n+    }\n+    return self;\n+}\n+\n+- (void)unregisterFromCocoaAXSystem\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    static dispatch_once_t initialize_unregisterUniqueId_once;\n+    static void (*unregisterUniqueId)(id);\n+    dispatch_once(&initialize_unregisterUniqueId_once, ^{\n+        void *jrsFwk = dlopen(\"\/System\/Library\/Frameworks\/JavaVM.framework\/Frameworks\/JavaRuntimeSupport.framework\/JavaRuntimeSupport\", RTLD_LAZY | RTLD_LOCAL);\n+        unregisterUniqueId = dlsym(jrsFwk, \"JRSAccessibilityUnregisterUniqueIdForUIElement\");\n+    });\n+    if (unregisterUniqueId) unregisterUniqueId(self);\n+}\n+\n+- (void)dealloc\n+{\n+    [self unregisterFromCocoaAXSystem];\n+\n+    JNIEnv *env = [ThreadUtilities getJNIEnvUncached];\n+\n+    (*env)->DeleteWeakGlobalRef(env, fAccessible);\n+    fAccessible = NULL;\n+\n+    (*env)->DeleteWeakGlobalRef(env, fComponent);\n+    fComponent = NULL;\n+\n+    [fParent release];\n+    fParent = nil;\n+\n+    [fNSRole release];\n+    fNSRole = nil;\n+\n+    [fJavaRole release];\n+    fJavaRole = nil;\n+\n+    [fView release];\n+    fView = nil;\n+\n+    [fActions release];\n+    fActions = nil;\n+\n+    [fActionsLOCK release];\n+    fActionsLOCK = nil;\n+\n+    [fActionSelectors release];\n+    fActionSelectors = nil;\n+\n+    [super dealloc];\n+}\n+\n+- (void)postValueChanged\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification(self, NSAccessibilityValueChangedNotification);\n+}\n+\n+- (void)postSelectedTextChanged\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification(self, NSAccessibilitySelectedTextChangedNotification);\n+}\n+\n+- (void)postSelectionChanged\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification(self, NSAccessibilitySelectedChildrenChangedNotification);\n+}\n+\n+-(void)postTitleChanged\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification(self, NSAccessibilityTitleChangedNotification);\n+}\n+\n+- (void)postMenuOpened\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification(self, (NSString *)kAXMenuOpenedNotification);\n+}\n+\n+- (void)postMenuClosed\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification(self, (NSString *)kAXMenuClosedNotification);\n+}\n+\n+- (void)postMenuItemSelected\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification(self, (NSString *)kAXMenuItemSelectedNotification);\n+}\n+\n+- (void)postTreeNodeExpanded\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification([[self accessibilitySelectedRows] firstObject], NSAccessibilityRowExpandedNotification);\n+}\n+\n+- (void)postTreeNodeCollapsed\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification([[self accessibilitySelectedRows] firstObject], NSAccessibilityRowCollapsedNotification);\n+}\n+\n+- (BOOL)isEqual:(id)anObject\n+{\n+    if (![anObject isKindOfClass:[self class]]) return NO;\n+    CommonComponentAccessibility *accessibility = (CommonComponentAccessibility *)anObject;\n+\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    return (*env)->IsSameObject(env, accessibility->fAccessible, fAccessible);\n+}\n+\n+- (BOOL)isAccessibleWithEnv:(JNIEnv *)env forAccessible:(jobject)accessible\n+{\n+    return (*env)->IsSameObject(env, fAccessible, accessible);\n+}\n+\n++ (void)initialize\n+{\n+    if (sRoles == nil) {\n+        initializeRoles();\n+    }\n+    if (sActions == nil) {\n+        initializeActions();\n+    }\n+}\n+\n++ (void)postFocusChanged:(id)message\n+{\n+    AWT_ASSERT_APPKIT_THREAD;\n+    NSAccessibilityPostNotification([NSApp accessibilityFocusedUIElement], NSAccessibilityFocusedUIElementChangedNotification);\n+}\n+\n++ (jobject) getCAccessible:(jobject)jaccessible withEnv:(JNIEnv *)env {\n+    DECLARE_CLASS_RETURN(sjc_Accessible, \"javax\/accessibility\/Accessible\", NULL);\n+    GET_CACCESSIBLE_CLASS_RETURN(NULL);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getCAccessible, sjc_CAccessible, \"getCAccessible\",\n+                                \"(Ljavax\/accessibility\/Accessible;)Lsun\/lwawt\/macosx\/CAccessible;\", NULL);\n+    if ((*env)->IsInstanceOf(env, jaccessible, sjc_CAccessible)) {\n+        return jaccessible;\n+    } else if ((*env)->IsInstanceOf(env, jaccessible, sjc_Accessible)) {\n+        jobject o = (*env)->CallStaticObjectMethod(env, sjc_CAccessible,  sjm_getCAccessible, jaccessible);\n+        CHECK_EXCEPTION();\n+        return o;\n+    }\n+    return NULL;\n+}\n+\n++ (NSArray *)childrenOfParent:(CommonComponentAccessibility *)parent withEnv:(JNIEnv *)env withChildrenCode:(NSInteger)whichChildren allowIgnored:(BOOL)allowIgnored\n+{\n+    return [CommonComponentAccessibility childrenOfParent:parent withEnv:env withChildrenCode:whichChildren allowIgnored:allowIgnored recursive:NO];\n+}\n+\n++ (NSArray *)childrenOfParent:(CommonComponentAccessibility *)parent withEnv:(JNIEnv *)env withChildrenCode:(NSInteger)whichChildren allowIgnored:(BOOL)allowIgnored recursive:(BOOL)recursive\n+{\n+    if (parent->fAccessible == NULL) return nil;\n+    jobjectArray jchildrenAndRoles = NULL;\n+    if (recursive) {\n+        GET_CHILDRENANDROLESRECURSIVE_METHOD_RETURN(nil);\n+        jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRolesRecursive,\n+                      parent->fAccessible, parent->fComponent, whichChildren, allowIgnored, 0);\n+        CHECK_EXCEPTION();\n+    } else {\n+        GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n+        jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n+                      parent->fAccessible, parent->fComponent, whichChildren, allowIgnored);\n+        CHECK_EXCEPTION();\n+    }\n+    if (jchildrenAndRoles == NULL) return nil;\n+\n+    jsize arrayLen = (*env)->GetArrayLength(env, jchildrenAndRoles);\n+    NSMutableArray *children = [NSMutableArray arrayWithCapacity:(recursive ? arrayLen\/3 : arrayLen\/2)]; \/\/childrenAndRoles array contains two elements (child, role) for each child\n+\n+    NSInteger i;\n+    NSUInteger childIndex = (whichChildren >= 0) ? whichChildren : 0; \/\/ if we're getting one particular child, make sure to set its index correctly\n+    int inc = recursive ? 3 : 2;\n+    for(i = 0; i < arrayLen; i+=inc)\n+    {\n+        jobject \/* Accessible *\/ jchild = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i);\n+        jobject \/* String *\/ jchildJavaRole = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i+1);\n+\n+        NSString *childJavaRole = nil;\n+        if (jchildJavaRole != NULL) {\n+            DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n+            DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n+            jobject jkey = (*env)->GetObjectField(env, jchildJavaRole, sjf_key);\n+            CHECK_EXCEPTION();\n+            childJavaRole = JavaStringToNSString(env, jkey);\n+            (*env)->DeleteLocalRef(env, jkey);\n+        }\n+\n+        CommonComponentAccessibility *child = [self createWithParent:parent accessible:jchild role:childJavaRole index:childIndex withEnv:env withView:parent->fView];\n+\n+        if (recursive && [child respondsToSelector:@selector(accessibleLevel)]) {\n+            jobject jLevel = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i+2);\n+            NSString *sLevel = nil;\n+            if (jLevel != NULL) {\n+                sLevel = JavaStringToNSString(env, jLevel);\n+                if (sLevel != nil) {\n+                    int level = sLevel.intValue;\n+                    [child setAccessibleLevel:level];\n+                }\n+                (*env)->DeleteLocalRef(env, jLevel);\n+            }\n+        }\n+\n+        (*env)->DeleteLocalRef(env, jchild);\n+        (*env)->DeleteLocalRef(env, jchildJavaRole);\n+\n+        [children addObject:child];\n+        childIndex++;\n+    }\n+    (*env)->DeleteLocalRef(env, jchildrenAndRoles);\n+\n+    return children;\n+}\n+\n++ (CommonComponentAccessibility *) createWithAccessible:(jobject)jaccessible withEnv:(JNIEnv *)env withView:(NSView *)view\n+{\n+    return [CommonComponentAccessibility createWithAccessible:jaccessible withEnv:env withView:view isCurrent:NO];\n+}\n+\n++ (CommonComponentAccessibility *) createWithAccessible:(jobject)jaccessible withEnv:(JNIEnv *)env withView:(NSView *)view isCurrent:(BOOL)current\n+{\n+    GET_ACCESSIBLEINDEXINPARENT_STATIC_METHOD_RETURN(nil);\n+    CommonComponentAccessibility *ret = nil;\n+    jobject jcomponent = [(AWTView *)view awtComponent:env];\n+    jint index = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, sjm_getAccessibleIndexInParent, jaccessible, jcomponent);\n+    CHECK_EXCEPTION();\n+    if (index >= 0 || current) {\n+      NSString *javaRole = getJavaRole(env, jaccessible, jcomponent);\n+      ret = [self createWithAccessible:jaccessible role:javaRole index:index withEnv:env withView:view];\n+    }\n+    (*env)->DeleteLocalRef(env, jcomponent);\n+    return ret;\n+}\n+\n++ (CommonComponentAccessibility *) createWithAccessible:(jobject)jaccessible role:(NSString *)javaRole index:(jint)index withEnv:(JNIEnv *)env withView:(NSView *)view\n+{\n+    return [self createWithParent:nil accessible:jaccessible role:javaRole index:index withEnv:env withView:view];\n+}\n+\n++ (CommonComponentAccessibility *) createWithParent:(CommonComponentAccessibility *)parent accessible:(jobject)jaccessible role:(NSString *)javaRole index:(jint)index withEnv:(JNIEnv *)env withView:(NSView *)view\n+{\n+    return [CommonComponentAccessibility createWithParent:parent accessible:jaccessible role:javaRole index:index withEnv:env withView:view isWrapped:NO];\n+}\n+\n++ (CommonComponentAccessibility *) createWithParent:(CommonComponentAccessibility *)parent accessible:(jobject)jaccessible role:(NSString *)javaRole index:(jint)index withEnv:(JNIEnv *)env withView:(NSView *)view isWrapped:(BOOL)wrapped\n+{\n+    GET_CACCESSIBLE_CLASS_RETURN(NULL);\n+    DECLARE_FIELD_RETURN(jf_ptr, sjc_CAccessible, \"ptr\", \"J\", NULL);\n+    \/\/ try to fetch the jCAX from Java, and return autoreleased\n+    jobject jCAX = [CommonComponentAccessibility getCAccessible:jaccessible withEnv:env];\n+    if (jCAX == NULL) return nil;\n+    if (!wrapped) { \/\/ If wrapped is true, then you don't need to get an existing instance, you need to create a new one\n+        CommonComponentAccessibility *value = (CommonComponentAccessibility *) jlong_to_ptr((*env)->GetLongField(env, jCAX, jf_ptr));\n+        if (value != nil) {\n+            (*env)->DeleteLocalRef(env, jCAX);\n+            return [[value retain] autorelease];\n+        }\n+    }\n+\n+    \/\/ otherwise, create a new instance\n+    CommonComponentAccessibility *newChild = [CommonComponentAccessibility getComponentAccessibility:javaRole andParent:parent];\n+\n+    \/\/ must init freshly -alloc'd object\n+    [newChild initWithParent:parent withEnv:env withAccessible:jCAX withIndex:index withView:view withJavaRole:javaRole]; \/\/ must init new instance\n+\n+    \/\/ If creating a JPopupMenu (not a combobox popup list) need to fire menuOpened.\n+    \/\/ This is the only way to know if the menu is opening; visible state change\n+    \/\/ can't be caught because the listeners are not set up in time.\n+    if ( [javaRole isEqualToString:@\"popupmenu\"] &&\n+         ![[parent javaRole] isEqualToString:@\"combobox\"] ) {\n+        [newChild postMenuOpened];\n+    }\n+\n+    \/\/ must hard retain pointer poked into Java object\n+    [newChild retain];\n+    (*env)->SetLongField(env, jCAX, jf_ptr, ptr_to_jlong(newChild));\n+\n+    \/\/ the link is removed in the wrapper\n+    if (!wrapped) {\n+        (*env)->DeleteLocalRef(env, jCAX);\n+    }\n+\n+    \/\/ return autoreleased instance\n+    return [newChild autorelease];\n+}\n+\n+- (NSDictionary *)getActions:(JNIEnv *)env\n+{\n+    @synchronized(fActionsLOCK) {\n+        if (fActions == nil) {\n+            [self getActionsWithEnv:env];\n+        }\n+    }\n+\n+    return fActions;\n+}\n+\n+- (void)getActionsWithEnv:(JNIEnv *)env\n+{\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_getAccessibleAction, sjc_CAccessibility, \"getAccessibleAction\",\n+                           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleAction;\");\n+\n+    jobject axAction = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getAccessibleAction, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axAction != NULL) {\n+        jclass jc_AccessibleAction = NULL;\n+        GET_CLASS(jc_AccessibleAction, \"javax\/accessibility\/AccessibleAction\");\n+        jmethodID jm_getAccessibleActionCount = NULL;\n+        GET_METHOD(jm_getAccessibleActionCount, jc_AccessibleAction, \"getAccessibleActionCount\", \"()I\");\n+        jint count = (*env)->CallIntMethod(env, axAction, jm_getAccessibleActionCount);\n+        fActions = [[NSMutableDictionary alloc] initWithCapacity:count];\n+        fActionSelectors = [[NSMutableArray alloc] initWithCapacity:count];\n+        for (int i =0; i < count; i++) {\n+            JavaAxAction *action = [[JavaAxAction alloc] initWithEnv:env withAccessibleAction:axAction withIndex:i withComponent:fComponent];\n+            if ([fParent isKindOfClass:[CommonComponentAccessibility class]] &&\n+                [(CommonComponentAccessibility *)fParent isMenu] &&\n+                [[sActions objectForKey:[action getDescription]] isEqualToString:NSAccessibilityPressAction]) {\n+                [fActions setObject:action forKey:NSAccessibilityPickAction];\n+                [fActionSelectors addObject:[sActionSelectors objectForKey:NSAccessibilityPickAction]];\n+            } else {\n+                [fActions setObject:action forKey:[sActions objectForKey:[action getDescription]]];\n+                [fActionSelectors addObject:[sActionSelectors objectForKey:[sActions objectForKey:[action getDescription]]]];\n+            }\n+            [action release];\n+        }\n+        (*env)->DeleteLocalRef(env, axAction);\n+    }\n+}\n+\n+- (BOOL)accessiblePerformAction:(NSAccessibilityActionName)actionName {\n+    NSMutableDictionary *currentAction = [self getActions:[ThreadUtilities getJNIEnv]];\n+    if (currentAction == nil) {\n+        return NO;\n+    }\n+    if ([[currentAction allKeys] containsObject:actionName]) {\n+        [(JavaAxAction *)[currentAction objectForKey:actionName] perform];\n+        return YES;;\n+    }\n+    return NO;\n+}\n+\n+- (NSArray *)actionSelectors {\n+    @synchronized(fActionsLOCK) {\n+        if (fActionSelectors == nil) {\n+            [self getActionsWithEnv:[ThreadUtilities getJNIEnv]];\n+        }\n+    }\n+\n+    return [NSArray arrayWithArray:fActionSelectors];\n+}\n+\n+- (NSArray *)accessibleChildrenWithChildCode:(NSInteger)childCode\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    NSArray *children = [CommonComponentAccessibility childrenOfParent:self\n+                                                    withEnv:env\n+                                                    withChildrenCode:childCode\n+                                                    allowIgnored:([[self accessibilityRole] isEqualToString:NSAccessibilityListRole] || [[self accessibilityRole] isEqualToString:NSAccessibilityOutlineRole] || [[self accessibilityRole] isEqualToString:NSAccessibilityTableRole])\n+                                                             recursive:[[self accessibilityRole] isEqualToString:NSAccessibilityOutlineRole]];\n+\n+    NSArray *value = nil;\n+    if ([children count] > 0) {\n+        value = children;\n+    }\n+\n+    return value;\n+}\n+\n+- (NSView *)view\n+{\n+    return fView;\n+}\n+\n+- (NSWindow *)window\n+{\n+    return [[self view] window];\n+}\n+\n+- (id)parent\n+{\n+    if(fParent == nil) {\n+        JNIEnv* env = [ThreadUtilities getJNIEnv];\n+        GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+        DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleParent, sjc_CAccessibility, \"getAccessibleParent\",\n+                                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\", nil);\n+        GET_CACCESSIBLE_CLASS_RETURN(nil);\n+        DECLARE_STATIC_METHOD_RETURN(sjm_getSwingAccessible, sjc_CAccessible, \"getSwingAccessible\",\n+                                 \"(Ljavax\/accessibility\/Accessible;)Ljavax\/accessibility\/Accessible;\", nil);\n+        DECLARE_CLASS_RETURN(sjc_Window, \"java\/awt\/Window\", nil);\n+\n+        jobject jparent = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,  sjm_getAccessibleParent, fAccessible, fComponent);\n+        CHECK_EXCEPTION();\n+\n+        if (jparent == NULL) {\n+            fParent = fView;\n+        } else {\n+            AWTView *view = fView;\n+            jobject jax = (*env)->CallStaticObjectMethod(env, sjc_CAccessible, sjm_getSwingAccessible, fAccessible);\n+            CHECK_EXCEPTION();\n+\n+            if ((*env)->IsInstanceOf(env, jax, sjc_Window)) {\n+                \/\/ In this case jparent is an owner toplevel and we should retrieve its own view\n+                view = [AWTView awtView:env ofAccessible:jparent];\n+            }\n+            if (view != nil) {\n+                fParent = [CommonComponentAccessibility createWithAccessible:jparent withEnv:env withView:view];\n+            }\n+            if (fParent == nil) {\n+                fParent = fView;\n+            }\n+            (*env)->DeleteLocalRef(env, jparent);\n+            (*env)->DeleteLocalRef(env, jax );\n+        }\n+        [fParent retain];\n+    }\n+    return fParent;\n+}\n+\n+- (NSString *)javaRole\n+{\n+    if(fJavaRole == nil) {\n+        JNIEnv* env = [ThreadUtilities getJNIEnv];\n+        fJavaRole = getJavaRole(env, fAccessible, fComponent);\n+        [fJavaRole retain];\n+    }\n+    return fJavaRole;\n+}\n+\n+- (jobject)axContextWithEnv:(JNIEnv *)env\n+{\n+    return getAxContext(env, fAccessible, fComponent);\n@@ -150,0 +716,54 @@\n+\n+- (BOOL)isAccessibilityElement\n+{\n+    return ![[self accessibilityRole] isEqualToString:JavaAccessibilityIgnore];\n+}\n+\n+- (NSString *)accessibilityLabel\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+\n+    GET_ACCESSIBLENAME_METHOD_RETURN(nil);\n+    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleName, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (val == NULL) {\n+        return nil;\n+    }\n+    NSString* str = JavaStringToNSString(env, val);\n+    (*env)->DeleteLocalRef(env, val);\n+    return str;\n+}\n+\n+- (NSString *)accessibilityHelp\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleDescription, sjc_CAccessibility, \"getAccessibleDescription\",\n+                                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    jobject val = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                                   sjm_getAccessibleDescription, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (val == NULL) {\n+        return nil;\n+    }\n+    NSString* str = JavaStringToNSString(env, val);\n+    (*env)->DeleteLocalRef(env, val);\n+    return str;\n+}\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    return [self accessibleChildrenWithChildCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN];\n+}\n+\n+- (NSArray *)accessibilitySelectedChildren\n+{\n+    return [self accessibleChildrenWithChildCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_SELECTED_CHILDREN];\n+}\n+\n+- (NSArray *)accessibilityVisibleChildren\n+{\n+    return [self accessibleChildrenWithChildCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_VISIBLE_CHILDREN];\n+}\n+\n@@ -171,1 +791,360 @@\n-    return [self accessibilityParentAttribute];\n+    return NSAccessibilityUnignoredAncestor([self parent]);\n+}\n+\n+- (BOOL)isAccessibilityEnabled\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(NO);\n+    DECLARE_STATIC_METHOD_RETURN(jm_isEnabled, sjc_CAccessibility, \"isEnabled\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Z\", NO);\n+\n+    BOOL value = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, jm_isEnabled, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+\n+    return value;\n+}\n+\n+- (id)accessibilityApplicationFocusedUIElement\n+{\n+    return [self accessibilityFocusedUIElement];\n+}\n+\n+- (NSAccessibilityRole)accessibilityRole\n+{\n+    if (fNSRole == nil) {\n+        NSString *javaRole = [self javaRole];\n+        fNSRole = [sRoles objectForKey:javaRole];\n+        \/\/ The sRoles NSMutableDictionary maps popupmenu to Mac's popup button.\n+        \/\/ JComboBox behavior currently relies on this.  However this is not the\n+        \/\/ proper mapping for a JPopupMenu so fix that.\n+        if ( [javaRole isEqualToString:@\"popupmenu\"] &&\n+             ![[[self parent] javaRole] isEqualToString:@\"combobox\"] ) {\n+             fNSRole = NSAccessibilityMenuRole;\n+        }\n+        if (fNSRole == nil) {\n+            \/\/ this component has assigned itself a custom AccessibleRole not in the sRoles array\n+            fNSRole = javaRole;\n+        }\n+        [fNSRole retain];\n+    }\n+    return fNSRole;\n+}\n+\n+- (NSString *)accessibilityRoleDescription\n+{\n+    \/\/ first ask AppKit for its accessible role description for a given AXRole\n+    NSString *value = NSAccessibilityRoleDescription([self accessibilityRole], nil);\n+\n+    if (value == nil) {\n+        \/\/ query java if necessary\n+        JNIEnv* env = [ThreadUtilities getJNIEnv];\n+        GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+        DECLARE_STATIC_METHOD_RETURN(jm_getAccessibleRoleDisplayString, sjc_CAccessibility, \"getAccessibleRoleDisplayString\",\n+                                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+\n+        jobject axRole = (*env)->CallStaticObjectMethod(env, jm_getAccessibleRoleDisplayString, fAccessible, fComponent);\n+        CHECK_EXCEPTION();\n+        if (axRole != NULL) {\n+            value = JavaStringToNSString(env, axRole);\n+            (*env)->DeleteLocalRef(env, axRole);\n+        } else {\n+            value = @\"unknown\";\n+        }\n+    }\n+\n+    return value;\n+}\n+\n+- (BOOL)isAccessibilityFocused\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(NO);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_isFocusTraversable, sjc_CAccessibility, \"isFocusTraversable\",\n+                                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Z\", NO);\n+    \/\/ According to javadoc, a component that is focusable will return true from isFocusTraversable,\n+    \/\/ as well as having AccessibleState.FOCUSABLE in its AccessibleStateSet.\n+    \/\/ We use the former heuristic; if the component focus-traversable, add a focused attribute\n+    \/\/ See also initializeAttributeNamesWithEnv:\n+    if ((*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isFocusTraversable, fAccessible, fComponent)) {\n+        return [self isEqual:[NSApp accessibilityFocusedUIElement]];\n+    }\n+    CHECK_EXCEPTION();\n+\n+    return NO;\n+}\n+\n+- (void)setAccessibilityFocused:(BOOL)accessibilityFocused\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_requestFocus, sjc_CAccessibility, \"requestFocus\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)V\");\n+\n+    if (accessibilityFocused)\n+    {\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestFocus, fAccessible, fComponent);\n+        CHECK_EXCEPTION();\n+    }\n+}\n+\n+- (NSUInteger)accessibilityIndexOfChild:(id)child\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_ACCESSIBLEINDEXINPARENT_STATIC_METHOD_RETURN(0);\n+    jint returnValue =\n+        (*env)->CallStaticIntMethod( env,\n+                                sjc_CAccessibility,\n+                                sjm_getAccessibleIndexInParent,\n+                                ((CommonComponentAccessibility *)child)->fAccessible,\n+                                ((CommonComponentAccessibility *)child)->fComponent );\n+    CHECK_EXCEPTION();\n+    return (returnValue == -1) ? NSNotFound : returnValue;\n+}\n+\n+- (NSInteger)accessibilityIndex\n+{\n+    int index = 0;\n+    if (fParent != NULL) {\n+        index = [fParent accessibilityIndexOfChild:self];\n+    }\n+    return index;\n+}\n+\n+- (id)accessibilityMaxValue\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getMaximumAccessibleValue, sjc_CAccessibility, \"getMaximumAccessibleValue\",\n+                                  \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/Number;\", nil);\n+\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMaximumAccessibleValue, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axValue == NULL) {\n+        return [NSNumber numberWithInt:0];\n+    }\n+    NSNumber* num = JavaNumberToNSNumber(env, axValue);\n+    (*env)->DeleteLocalRef(env, axValue);\n+    return num;\n+}\n+\n+- (id)accessibilityMinValue\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getMinimumAccessibleValue, sjc_CAccessibility, \"getMinimumAccessibleValue\",\n+                                  \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/Number;\", nil);\n+\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getMinimumAccessibleValue, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axValue == NULL) {\n+        return [NSNumber numberWithInt:0];\n+    }\n+    NSNumber* num = JavaNumberToNSNumber(env, axValue);\n+    (*env)->DeleteLocalRef(env, axValue);\n+    return num;\n+}\n+\n+- (NSAccessibilityOrientation)accessibilityOrientation\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+\n+    \/\/ cmcnote - should batch these two calls into one that returns an array of two bools, one for vertical and one for horiz\n+    if (isVertical(env, axContext, fComponent)) {\n+        (*env)->DeleteLocalRef(env, axContext);\n+        return NSAccessibilityOrientationVertical;\n+    }\n+    if (isHorizontal(env, axContext, fComponent)) {\n+        (*env)->DeleteLocalRef(env, axContext);\n+        return NSAccessibilityOrientationHorizontal;\n+    }\n+    return NSAccessibilityOrientationUnknown;\n+}\n+\n+- (NSPoint)accessibilityActivationPoint\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_ACCESSIBLECOMPONENT_STATIC_METHOD_RETURN(NSPointFromString(@\"\"));\n+    jobject axComponent = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleComponent,\n+                           fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+\n+    \/\/ NSAccessibility wants the bottom left point of the object in\n+    \/\/ bottom left based screen coords\n+\n+    \/\/ Get the java screen coords, and make a NSPoint of the bottom left of the AxComponent.\n+    NSSize size = getAxComponentSize(env, axComponent, fComponent);\n+    NSPoint point = getAxComponentLocationOnScreen(env, axComponent, fComponent);\n+    (*env)->DeleteLocalRef(env, axComponent);\n+\n+    point.y += size.height;\n+\n+    \/\/ Now make it into Cocoa screen coords.\n+    point.y = [[[[self view] window] screen] frame].size.height - point.y;\n+\n+    return point;\n+}\n+\n+- (BOOL)isAccessibilitySelected\n+{\n+    return [self isSelected:[ThreadUtilities getJNIEnv]];\n+}\n+\n+- (void)setAccessibilitySelected:(BOOL)accessibilitySelected\n+{\n+   JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS();\n+    DECLARE_STATIC_METHOD(jm_requestSelection,\n+                          sjc_CAccessibility,\n+                          \"requestSelection\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)V\");\n+\n+    if (accessibilitySelected) {\n+        (*env)->CallStaticVoidMethod(env, sjc_CAccessibility, jm_requestSelection, fAccessible, fComponent);\n+        CHECK_EXCEPTION();\n+    }\n+}\n+\n+- (id)accessibilityValue\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+\n+    \/\/ Need to handle popupmenus differently.\n+    \/\/\n+    \/\/ At least for now don't handle combo box menus.\n+    \/\/ This may change when later fixing issues which currently\n+    \/\/ exist for combo boxes, but for now the following is only\n+    \/\/ for JPopupMenus, not for combobox menus.\n+    id parent = [self parent];\n+    if ( [[self javaRole] isEqualToString:@\"popupmenu\"] &&\n+         ![[parent javaRole] isEqualToString:@\"combobox\"] ) {\n+        NSArray *children =\n+            [CommonComponentAccessibility childrenOfParent:self\n+                                        withEnv:env\n+                                        withChildrenCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN\n+                                        allowIgnored:YES];\n+        if ([children count] > 0) {\n+            \/\/ handle case of AXMenuItem\n+            \/\/ need to ask menu what is selected\n+            NSArray *selectedChildrenOfMenu =\n+                [self accessibilitySelectedChildren];\n+            CommonComponentAccessibility *selectedMenuItem =\n+                [selectedChildrenOfMenu objectAtIndex:0];\n+            if (selectedMenuItem != nil) {\n+                GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+                GET_ACCESSIBLENAME_METHOD_RETURN(nil);\n+                jobject itemValue =\n+                        (*env)->CallStaticObjectMethod( env,\n+                                                   sjm_getAccessibleName,\n+                                                   selectedMenuItem->fAccessible,\n+                                                   selectedMenuItem->fComponent );\n+                CHECK_EXCEPTION();\n+                if (itemValue == NULL) {\n+                    return nil;\n+                }\n+                NSString* itemString = JavaStringToNSString(env, itemValue);\n+                (*env)->DeleteLocalRef(env, itemValue);\n+                return itemString;\n+            } else {\n+                return nil;\n+            }\n+        }\n+    }\n+\n+    \/\/ ask Java for the component's accessibleValue. In java, the \"accessibleValue\" just means a numerical value\n+    \/\/ a text value is taken care of in JavaTextAccessibility\n+\n+    \/\/ cmcnote should coalesce these calls into one java call\n+    NSNumber *num = nil;\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleValue, sjc_CAccessibility, \"getAccessibleValue\",\n+                \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleValue;\", nil);\n+    jobject axValue = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, sjm_getAccessibleValue, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axValue != NULL) {\n+        DECLARE_STATIC_METHOD_RETURN(jm_getCurrentAccessibleValue, sjc_CAccessibility, \"getCurrentAccessibleValue\",\n+                                     \"(Ljavax\/accessibility\/AccessibleValue;Ljava\/awt\/Component;)Ljava\/lang\/Number;\", nil);\n+        jobject str = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getCurrentAccessibleValue, axValue, fComponent);\n+        CHECK_EXCEPTION();\n+        if (str != NULL) {\n+            num = JavaNumberToNSNumber(env, str);\n+            (*env)->DeleteLocalRef(env, str);\n+        }\n+        (*env)->DeleteLocalRef(env, axValue);\n+    }\n+    if (num == nil) {\n+        num = [NSNumber numberWithInt:0];\n+    }\n+    return num;\n+}\n+\n+- (id)accessibilityHitTest:(NSPoint)point\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+\n+    DECLARE_CLASS_RETURN(jc_Container, \"java\/awt\/Container\", nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_accessibilityHitTest, sjc_CAccessibility, \"accessibilityHitTest\",\n+                                 \"(Ljava\/awt\/Container;FF)Ljavax\/accessibility\/Accessible;\", nil);\n+\n+    \/\/ Make it into java screen coords\n+    point.y = [[[[self view] window] screen] frame].size.height - point.y;\n+\n+    jobject jparent = fComponent;\n+\n+    id value = nil;\n+    if ((*env)->IsInstanceOf(env, jparent, jc_Container)) {\n+        jobject jaccessible = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_accessibilityHitTest,\n+                               jparent, (jfloat)point.x, (jfloat)point.y);\n+        CHECK_EXCEPTION();\n+        if (jaccessible != NULL) {\n+            value = [CommonComponentAccessibility createWithAccessible:jaccessible withEnv:env withView:fView];\n+            (*env)->DeleteLocalRef(env, jaccessible);\n+        }\n+    }\n+\n+    if (value == nil) {\n+        value = self;\n+    }\n+\n+    if (![value isAccessibilityElement]) {\n+        value = NSAccessibilityUnignoredAncestor(value);\n+    }\n+\n+#ifdef JAVA_AX_DEBUG\n+    NSLog(@\"%s: %@\", __FUNCTION__, value);\n+#endif\n+    return value;\n+}\n+\n+- (id)accessibilityFocusedUIElement\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getFocusOwner, sjc_CAccessibility, \"getFocusOwner\",\n+                                  \"(Ljava\/awt\/Component;)Ljavax\/accessibility\/Accessible;\", nil);\n+    id value = nil;\n+\n+    NSWindow* hostWindow = [[self->fView window] retain];\n+    jobject focused = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getFocusOwner, fComponent);\n+    [hostWindow release];\n+    CHECK_EXCEPTION();\n+\n+    if (focused != NULL) {\n+        DECLARE_CLASS_RETURN(sjc_Accessible, \"javax\/accessibility\/Accessible\", nil);\n+        if ((*env)->IsInstanceOf(env, focused, sjc_Accessible)) {\n+            value = [CommonComponentAccessibility createWithAccessible:focused withEnv:env withView:fView];\n+        }\n+        CHECK_EXCEPTION();\n+        (*env)->DeleteLocalRef(env, focused);\n+    }\n+\n+    if (value == nil) {\n+        value = self;\n+    }\n+#ifdef JAVA_AX_DEBUG\n+    NSLog(@\"%s: %@\", __FUNCTION__, value);\n+#endif\n+    return value;\n+}\n+\n+- (id)accessibilityWindow {\n+    return [self window];\n@@ -175,0 +1154,1 @@\n+\n@@ -190,2 +1170,28 @@\n-- (BOOL)isAccessibilityElement {\n-    return YES;\n+\/\/ NSAccessibilityActions methods\n+\n+- (BOOL)isAccessibilitySelectorAllowed:(SEL)selector {\n+    if ([sAllActionSelectors containsObject:NSStringFromSelector(selector)] &&\n+        ![[self actionSelectors] containsObject:NSStringFromSelector(selector)]) {\n+        return NO;\n+    }\n+    return [super isAccessibilitySelectorAllowed:selector];\n+}\n+\n+- (BOOL)accessibilityPerformPick {\n+    return [self accessiblePerformAction:NSAccessibilityPickAction];\n+}\n+\n+- (BOOL)accessibilityPerformPress {\n+    return [self accessiblePerformAction:NSAccessibilityPressAction];\n+}\n+\n+- (BOOL)accessibilityPerformShowMenu {\n+    return [self accessiblePerformAction:NSAccessibilityShowMenuAction];\n+}\n+\n+- (BOOL)accessibilityPerformDecrement {\n+    return [self accessiblePerformAction:NSAccessibilityDecrementAction];\n+}\n+\n+- (BOOL)accessibilityPerformIncrement {\n+    return [self accessiblePerformAction:NSAccessibilityIncrementAction];\n@@ -195,0 +1201,32 @@\n+\n+\/*\n+ * Class:     sun_lwawt_macosx_CAccessible\n+ * Method:    treeNodeExpanded\n+ * Signature: (J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_sun_lwawt_macosx_CAccessible_treeNodeExpanded\n+  (JNIEnv *env, jclass jklass, jlong element)\n+{\n+    JNI_COCOA_ENTER(env);\n+        [ThreadUtilities performOnMainThread:@selector(postTreeNodeExpanded)\n+                         on:(CommonComponentAccessibility *)jlong_to_ptr(element)\n+                         withObject:nil\n+                         waitUntilDone:NO];\n+    JNI_COCOA_EXIT(env);\n+}\n+\n+\/*\n+ * Class:     sun_lwawt_macosx_CAccessible\n+ * Method:    treeNodeCollapsed\n+ * Signature: (J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_sun_lwawt_macosx_CAccessible_treeNodeCollapsed\n+  (JNIEnv *env, jclass jklass, jlong element)\n+{\n+    JNI_COCOA_ENTER(env);\n+        [ThreadUtilities performOnMainThread:@selector(postTreeNodeCollapsed)\n+                         on:(CommonComponentAccessibility *)jlong_to_ptr(element)\n+                         withObject:nil\n+                         waitUntilDone:NO];\n+    JNI_COCOA_EXIT(env);\n+}\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.m","additions":1046,"deletions":8,"binary":false,"changes":1054,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    if ([[self accessibilityRoleAttribute] isEqualToString:NSAccessibilityStaticTextRole]) {\n+    if ([[self accessibilityRole] isEqualToString:NSAccessibilityStaticTextRole]) {\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonTextAccessibility.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n@@ -46,1 +47,1 @@\n-    NSArray *children = [JavaComponentAccessibility childrenOfParent:self\n+    NSArray *children = [CommonComponentAccessibility childrenOfParent:self\n@@ -48,1 +49,1 @@\n-                                                    withChildrenCode:JAVA_AX_ALL_CHILDREN\n+                                                    withChildrenCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN\n@@ -58,0 +59,10 @@\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/GroupAccessibility.m","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -39,1 +39,11 @@\n-    return [self accessibilityTitleAttribute];\n+    return [super accessibilityLabel];\n+}\n+\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ImageAccessibility.m","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface ListAccessibility : CommonComponentAccessibility <NSAccessibilityList>\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ListAccessibility.h","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ListAccessibility.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+\n+@implementation ListAccessibility\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (nullable NSArray<id<NSAccessibilityRow>> *)accessibilityRows\n+{\n+    return [self accessibilityChildren];\n+}\n+\n+- (nullable NSArray<id<NSAccessibilityRow>> *)accessibilitySelectedRows\n+{\n+    return [self accessibilitySelectedChildren];\n+}\n+\n+- (NSString *)accessibilityLabel\n+{\n+    return [super accessibilityLabel] == NULL ? @\"list\" : [super accessibilityLabel];\n+}\n+\n+\/\/ to avoid warning (why?): method in protocol 'NSAccessibilityElement' not implemented\n+\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+\/\/ to avoid warning (why?): method in protocol 'NSAccessibilityElement' not implemented\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n+@end\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ListAccessibility.m","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface ListRowAccessibility : CommonComponentAccessibility <NSAccessibilityRow>\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ListRowAccessibility.h","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#import \"ListRowAccessibility.h\"\n+#import \"JavaAccessibilityAction.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"ListAccessibility.h\"\n+#import \"ThreadUtilities.h\"\n+\n+@implementation ListRowAccessibility\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSAccessibilityRole)accessibilityRole\n+{\n+    return NSAccessibilityRowRole;\n+}\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    NSArray *children = [super accessibilityChildren];\n+    if (children == NULL) {\n+\n+        \/\/ Since the row element has already been created, we should no create it again, but just retrieve it by a pointer, that's why isWrapped is set to YES.\n+        CommonComponentAccessibility *newChild = [CommonComponentAccessibility createWithParent:self\n+                                                                       accessible:self->fAccessible\n+                                                                             role:self->fJavaRole\n+                                                                            index:self->fIndex\n+                                                                          withEnv:[ThreadUtilities getJNIEnv]\n+                                                                         withView:self->fView\n+                                                                        isWrapped:YES];\n+        return [NSArray arrayWithObject:newChild];\n+    } else {\n+        return children;\n+    }\n+}\n+\n+- (NSInteger)accessibilityIndex\n+{\n+    return [[self accessibilityParent] accessibilityIndexOfChild:self];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ListRowAccessibility.m","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface NavigableTextAccessibility : CommonComponentAccessibility <NSAccessibilityNavigableStaticText>\n+\n+@property(readonly) BOOL accessibleIsPasswordText;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/NavigableTextAccessibility.h","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,316 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"NavigableTextAccessibility.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+\n+static jclass sjc_CAccessibility = NULL;\n+#define GET_CACCESSIBLITY_CLASS() \\\n+     GET_CLASS(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\");\n+#define GET_CACCESSIBLITY_CLASS_RETURN(ret) \\\n+     GET_CLASS_RETURN(sjc_CAccessibility, \"sun\/lwawt\/macosx\/CAccessibility\", ret);\n+\n+static jmethodID sjm_getAccessibleText = NULL;\n+#define GET_ACCESSIBLETEXT_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBLITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleText, sjc_CAccessibility, \"getAccessibleText\", \\\n+              \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleText;\", ret);\n+\n+static jclass sjc_CAccessibleText = NULL;\n+#define GET_CACCESSIBLETEXT_CLASS() \\\n+    GET_CLASS(sjc_CAccessibleText, \"sun\/lwawt\/macosx\/CAccessibleText\");\n+#define GET_CACCESSIBLETEXT_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(sjc_CAccessibleText, \"sun\/lwawt\/macosx\/CAccessibleText\", ret);\n+\n+static jmethodID sjm_getAccessibleEditableText = NULL;\n+#define GET_ACCESSIBLEEDITABLETEXT_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleEditableText, sjc_CAccessibleText, \"getAccessibleEditableText\", \\\n+              \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljavax\/accessibility\/AccessibleEditableText;\", ret);\n+\n+\n+@implementation NavigableTextAccessibility\n+\n+- (BOOL)accessibleIsPasswordText {\n+    return [fJavaRole isEqualToString:@\"passwordtext\"];\n+}\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSRect)accessibilityFrameForRange:(NSRange)range\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(NSMakeRect(0, 0, 0, 0));\n+    DECLARE_STATIC_METHOD_RETURN(jm_getBoundsForRange, sjc_CAccessibleText, \"getBoundsForRange\",\n+                         \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)[D\", NSMakeRect(0, 0, 0, 0));\n+    jdoubleArray axBounds = (jdoubleArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getBoundsForRange,\n+                              fAccessible, fComponent, range.location, range.length);\n+    CHECK_EXCEPTION();\n+    if (axBounds == NULL) return NSMakeRect(0, 0, 0, 0);\n+\n+    \/\/ We cheat because we know that the array is 4 elements long (x, y, width, height)\n+    jdouble *values = (*env)->GetDoubleArrayElements(env, axBounds, 0);\n+    CHECK_EXCEPTION();\n+\n+    NSRect bounds;\n+    bounds.origin.x = values[0];\n+    bounds.origin.y = [[[[self view] window] screen] frame].size.height - values[1] - values[3]; \/\/values[1] is y-coord from top-left of screen. Flip. Account for the height (values[3]) when flipping\n+    bounds.size.width = values[2];\n+    bounds.size.height = values[3];\n+    (*env)->ReleaseDoubleArrayElements(env, axBounds, values, 0);\n+    return bounds;\n+}\n+\n+- (NSInteger)accessibilityLineForIndex:(NSInteger)index\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(-1);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getLineNumberForIndex, sjc_CAccessibleText, \"getLineNumberForIndex\",\n+                           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)I\", -1);\n+    jint row = (*env)->CallStaticIntMethod(env, sjc_CAccessibleText, jm_getLineNumberForIndex,\n+                       fAccessible, fComponent, index);\n+    CHECK_EXCEPTION();\n+    if (row < 0) return -1;\n+    return row;\n+}\n+\n+- (NSRange)accessibilityRangeForLine:(NSInteger)line\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(NSRangeFromString(@\"\"));\n+    DECLARE_STATIC_METHOD_RETURN(jm_getRangeForLine, sjc_CAccessibleText, \"getRangeForLine\",\n+                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\", NSRangeFromString(@\"\"));\n+    jintArray axTextRange = (jintArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                jm_getRangeForLine, fAccessible, fComponent, line);\n+    CHECK_EXCEPTION();\n+    if (axTextRange == NULL) return NSRangeFromString(@\"\");\n+\n+    NSRange range = [javaIntArrayToNSRangeValue(env,axTextRange) rangeValue];\n+    (*env)->DeleteLocalRef(env, axTextRange);\n+    return range;\n+}\n+\n+- (NSString *)accessibilityStringForRange:(NSRange)range\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getStringForRange, sjc_CAccessibleText, \"getStringForRange\",\n+                 \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)Ljava\/lang\/String;\", nil);\n+    jstring jstringForRange = (jstring)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getStringForRange,\n+                            fAccessible, fComponent, range.location, range.length);\n+    CHECK_EXCEPTION();\n+    if (jstringForRange == NULL) return @\"\";\n+    NSString* str = JavaStringToNSString(env, jstringForRange);\n+    (*env)->DeleteLocalRef(env, jstringForRange);\n+    return str;\n+}\n+\n+- (id)accessibilityValue\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    \/\/ cmcnote: inefficient to make three distinct JNI calls. Coalesce. radr:\/\/3951923\n+    GET_ACCESSIBLETEXT_METHOD_RETURN(@\"\");\n+    jobject axText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                      sjm_getAccessibleText, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axText == NULL) return nil;\n+    (*env)->DeleteLocalRef(env, axText);\n+\n+    GET_ACCESSIBLEEDITABLETEXT_METHOD_RETURN(nil);\n+    jobject axEditableText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                       sjm_getAccessibleEditableText, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axEditableText == NULL) return nil;\n+\n+    DECLARE_STATIC_METHOD_RETURN(jm_getTextRange, sjc_CAccessibleText, \"getTextRange\",\n+                    \"(Ljavax\/accessibility\/AccessibleEditableText;IILjava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    jobject jrange = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getTextRange,\n+                       axEditableText, 0, getAxTextCharCount(env, axEditableText, fComponent), fComponent);\n+    CHECK_EXCEPTION();\n+    NSString *string = JavaStringToNSString(env, jrange);\n+\n+    (*env)->DeleteLocalRef(env, jrange);\n+    (*env)->DeleteLocalRef(env, axEditableText);\n+\n+    if (string == nil) string = @\"\";\n+    return string;\n+}\n+\n+- (NSAccessibilitySubrole)accessibilitySubrole {\n+    if ([self accessibleIsPasswordText]) {\n+        return NSAccessibilitySecureTextFieldSubrole;\n+    }\n+    return nil;\n+}\n+\n+- (NSRange)accessibilityRangeForIndex:(NSInteger)index\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(NSRangeFromString(@\"\"));\n+    DECLARE_STATIC_METHOD_RETURN(jm_getRangeForIndex, sjc_CAccessibleText, \"getRangeForIndex\",\n+                    \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\", NSRangeFromString(@\"\"));\n+    jintArray axTextRange = (jintArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getRangeForIndex,\n+                              fAccessible, fComponent, index);\n+    CHECK_EXCEPTION();\n+    if (axTextRange == NULL) return NSRangeFromString(@\"\");\n+\n+    return [javaIntArrayToNSRangeValue(env, axTextRange) rangeValue];\n+}\n+\n+- (NSAccessibilityRole)accessibilityRole {\n+    return [sRoles objectForKey:self.javaRole];\n+}\n+\n+- (NSRange)accessibilityRangeForPosition:(NSPoint)point\n+{\n+   point.y = [[[[self view] window] screen] frame].size.height - point.y; \/\/ flip into java screen coords (0 is at upper-left corner of screen)\n+\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(NSRangeFromString(@\"\"));\n+    DECLARE_STATIC_METHOD_RETURN(jm_getCharacterIndexAtPosition, sjc_CAccessibleText, \"getCharacterIndexAtPosition\",\n+                           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)I\", NSRangeFromString(@\"\"));\n+    jint charIndex = (*env)->CallStaticIntMethod(env, sjc_CAccessibleText, jm_getCharacterIndexAtPosition,\n+                            fAccessible, fComponent, point.x, point.y);\n+    CHECK_EXCEPTION();\n+    if (charIndex == -1) return NSRangeFromString(@\"\");\n+\n+    \/\/ AccessibleText.getIndexAtPoint returns -1 for an invalid point\n+    NSRange range = NSMakeRange(charIndex, 1); \/\/range's length is 1 - one-character range\n+    return range;\n+}\n+\n+- (NSString *)accessibilitySelectedText\n+{\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getSelectedText, sjc_CAccessibleText, \"getSelectedText\",\n+              \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", nil);\n+    jobject axText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText, jm_getSelectedText,\n+                        fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axText == NULL) return @\"\";\n+    NSString* str = JavaStringToNSString(env, axText);\n+    (*env)->DeleteLocalRef(env, axText);\n+    return str;\n+}\n+\n+- (NSRange)accessibilitySelectedTextRange\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(NSRangeFromString(@\"\"));\n+    DECLARE_STATIC_METHOD_RETURN(jm_getSelectedTextRange, sjc_CAccessibleText, \"getSelectedTextRange\",\n+           \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)[I\", NSRangeFromString(@\"\"));\n+    jintArray axTextRange = (*env)->CallStaticObjectMethod(env, sjc_CAccessibleText,\n+                jm_getSelectedTextRange, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    if (axTextRange == NULL) return NSRangeFromString(@\"\");\n+\n+    return [javaIntArrayToNSRangeValue(env, axTextRange) rangeValue];\n+}\n+\n+- (NSInteger)accessibilityNumberOfCharacters\n+{\n+    \/\/ cmcnote: should coalesce these two calls - radr:\/\/3951923\n+    \/\/ also, static text doesn't always have accessibleText. if axText is null, should get the charcount of the accessibleName instead\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_ACCESSIBLETEXT_METHOD_RETURN(0);\n+    jobject axText = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility,\n+                     sjm_getAccessibleText, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    NSInteger num = getAxTextCharCount(env, axText, fComponent);\n+    (*env)->DeleteLocalRef(env, axText);\n+    return num;\n+}\n+\n+- (NSInteger)accessibilityInsertionPointLineNumber\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS_RETURN(0);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getLineNumberForInsertionPoint, sjc_CAccessibleText,\n+             \"getLineNumberForInsertionPoint\", \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)I\", 0);\n+    jint row = (*env)->CallStaticIntMethod(env, sjc_CAccessibleText,\n+                  jm_getLineNumberForInsertionPoint, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    return row >= 0 ? row : 0;\n+}\n+\n+- (void)setAccessibilitySelectedText:(NSString *)accessibilitySelectedText\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jstring jstringValue = NSStringToJavaString(env, accessibilitySelectedText);\n+    GET_CACCESSIBLETEXT_CLASS();\n+    DECLARE_STATIC_METHOD(jm_setSelectedText, sjc_CAccessibleText, \"setSelectedText\",\n+                   \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;Ljava\/lang\/String;)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_CAccessibleText, jm_setSelectedText,\n+              fAccessible, fComponent, jstringValue);\n+    CHECK_EXCEPTION();\n+}\n+\n+- (void)setAccessibilitySelectedTextRange:(NSRange)accessibilitySelectedTextRange\n+{\n+   jint startIndex = accessibilitySelectedTextRange.location;\n+    jint endIndex = startIndex + accessibilitySelectedTextRange.length;\n+\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBLETEXT_CLASS();\n+    DECLARE_STATIC_METHOD(jm_setSelectedTextRange, sjc_CAccessibleText, \"setSelectedTextRange\",\n+                  \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;II)V\");\n+    (*env)->CallStaticVoidMethod(env, sjc_CAccessibleText, jm_setSelectedTextRange,\n+                  fAccessible, fComponent, startIndex, endIndex);\n+    CHECK_EXCEPTION();\n+}\n+\n+- (BOOL)isAccessibilityEdited {\n+    return YES;\n+}\n+\n+- (BOOL)isAccessibilityEnabled {\n+    return YES;\n+}\n+\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n+\/*\n+* Other text methods\n+- (NSRange)accessibilitySharedCharacterRange;\n+- (NSArray *)accessibilitySharedTextUIElements;\n+- (NSData *)accessibilityRTFForRange:(NSRange)range;\n+- (NSRange)accessibilityStyleRangeForIndex:(NSInteger)index;\n+*\/\n+\n+@end\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/NavigableTextAccessibility.m","additions":316,"deletions":0,"binary":false,"changes":316,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ListAccessibility.h\"\n+\n+\/\/ This is a tree representation. See: https:\/\/developer.apple.com\/documentation\/appkit\/nsoutlineview\n+\n+@interface OutlineAccessibility : ListAccessibility <NSAccessibilityOutline>\n+\n+@property(readonly) BOOL isTreeRootVisible;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineAccessibility.h","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"OutlineAccessibility.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+\n+static jclass sjc_CAccessibility = NULL;\n+\n+static jmethodID sjm_isTreeRootVisible = NULL;\n+#define GET_ISTREEROOTVISIBLE_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_isTreeRootVisible, sjc_CAccessibility, \"isTreeRootVisible\", \\\n+                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Z\", ret);\n+\n+@implementation OutlineAccessibility\n+\n+- (BOOL)isTreeRootVisible\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    GET_ISTREEROOTVISIBLE_METHOD_RETURN(NO);\n+    bool isTreeRootVisible = (*env)->CallStaticBooleanMethod(env, sjc_CAccessibility, sjm_isTreeRootVisible, fAccessible, fComponent);\n+    CHECK_EXCEPTION();\n+    return isTreeRootVisible;\n+}\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSString *)accessibilityLabel\n+{\n+    return [[super accessibilityLabel] isEqualToString:@\"list\"] ? @\"tree\" : [super accessibilityLabel];\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineAccessibility.m","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ListRowAccessibility.h\"\n+\n+@interface OutlineRowAccessibility : ListRowAccessibility\n+\n+@property(readwrite) int accessibleLevel;\n+\n+- (jobject)currentAccessibleWithENV:(JNIEnv *)env;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineRowAccessibility.h","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#import \"OutlineRowAccessibility.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+#import \"OutlineAccessibility.h\"\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n+\n+static jclass sjc_CAccessible = NULL;\n+#define GET_CACCESSIBLE_CLASS_RETURN(ret) \\\n+    GET_CLASS_RETURN(sjc_CAccessible, \"sun\/lwawt\/macosx\/CAccessible\", ret);\n+\n+@implementation OutlineRowAccessibility\n+\n+@synthesize accessibleLevel;\n+\n+- (jobject)currentAccessibleWithENV:(JNIEnv *)env\n+{\n+    jobject jAxContext = getAxContext(env, fAccessible, fComponent);\n+    if (jAxContext == NULL) return NULL;\n+    jclass axContextClass = (*env)->GetObjectClass(env, jAxContext);\n+    DECLARE_METHOD_RETURN(jm_getCurrentComponent, axContextClass, \"getCurrentComponent\", \"()Ljava\/awt\/Component;\", NULL);\n+    jobject newComponent = (*env)->CallObjectMethod(env, jAxContext, jm_getCurrentComponent);\n+    CHECK_EXCEPTION();\n+    (*env)->DeleteLocalRef(env, jAxContext);\n+    if (newComponent != NULL) {\n+        GET_CACCESSIBLE_CLASS_RETURN(NULL);\n+        DECLARE_STATIC_METHOD_RETURN(sjm_getCAccessible, sjc_CAccessible, \"getCAccessible\", \"(Ljavax\/accessibility\/Accessible;)Lsun\/lwawt\/macosx\/CAccessible;\", NULL);\n+        jobject currentAccessible = (*env)->CallStaticObjectMethod(env, sjc_CAccessible, sjm_getCAccessible, newComponent);\n+        CHECK_EXCEPTION();\n+        (*env)->DeleteLocalRef(env, newComponent);\n+        return currentAccessible;\n+    } else {\n+        return NULL;\n+    }\n+}\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject currentAccessible = [self currentAccessibleWithENV:env];\n+    if (currentAccessible != NULL) {\n+        CommonComponentAccessibility *currentElement = [CommonComponentAccessibility createWithAccessible:currentAccessible withEnv:env withView:self->fView isCurrent:YES];\n+        NSArray *children = [CommonComponentAccessibility childrenOfParent:currentElement withEnv:env withChildrenCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n+        if ([children count] != 0) {\n+            return children;\n+        }\n+    }\n+\n+    return [NSArray arrayWithObject:[CommonComponentAccessibility createWithParent:self\n+                                                                        accessible:self->fAccessible\n+                                                                              role:self->fJavaRole\n+                                                                             index:self->fIndex\n+                                                                           withEnv:env\n+                                                                          withView:self->fView\n+                                                                         isWrapped:YES]];\n+}\n+\n+- (NSInteger)accessibilityDisclosureLevel\n+{\n+    int level = [self accessibleLevel];\n+    return [(OutlineAccessibility *)[self accessibilityParent] isTreeRootVisible] ? level - 1 : level;\n+}\n+\n+- (BOOL)isAccessibilityDisclosed\n+{\n+    return isExpanded([ThreadUtilities getJNIEnv], [self axContextWithEnv:[ThreadUtilities getJNIEnv]], self->fComponent);\n+}\n+\n+- (NSAccessibilitySubrole)accessibilitySubrole\n+{\n+    return NSAccessibilityOutlineRowSubrole;;\n+}\n+\n+- (NSAccessibilityRole)accessibilityRole\n+{\n+    return NSAccessibilityRowRole;;\n+}\n+\n+- (BOOL)isAccessibilitySelected\n+{\n+    return YES;\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/OutlineRowAccessibility.m","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -42,1 +42,1 @@\n-    return [self accessibilityValueAttribute];\n+    return [super accessibilityValue];\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/RadiobuttonAccessibility.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n@@ -38,1 +39,1 @@\n-    NSArray *children = [JavaComponentAccessibility childrenOfParent:self withEnv:env withChildrenCode:JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n+    NSArray *children = [CommonComponentAccessibility childrenOfParent:self withEnv:env withChildrenCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n@@ -45,3 +46,3 @@\n-    JavaComponentAccessibility *aElement;\n-    while ((aElement = (JavaComponentAccessibility *)[enumerator nextObject])) {\n-        if (![[aElement accessibilityRoleAttribute] isEqualToString:NSAccessibilityScrollBarRole]) {\n+    CommonComponentAccessibility *aElement;\n+    while ((aElement = (CommonComponentAccessibility *)[enumerator nextObject])) {\n+        if (![[aElement accessibilityRole] isEqualToString:NSAccessibilityScrollBarRole]) {\n@@ -59,1 +60,1 @@\n-    NSArray *children = [JavaComponentAccessibility childrenOfParent:self withEnv:env withChildrenCode:JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n+    NSArray *children = [CommonComponentAccessibility childrenOfParent:self withEnv:env withChildrenCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n@@ -63,1 +64,1 @@\n-    JavaComponentAccessibility *aElement;\n+    CommonComponentAccessibility *aElement;\n@@ -65,2 +66,2 @@\n-    while ((aElement = (JavaComponentAccessibility *)[enumerator nextObject])) {\n-        if ([[aElement accessibilityRoleAttribute] isEqualToString:NSAccessibilityScrollBarRole]) {\n+    while ((aElement = (CommonComponentAccessibility *)[enumerator nextObject])) {\n+        if ([[aElement accessibilityRole] isEqualToString:NSAccessibilityScrollBarRole]) {\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ScrollAreaAccessibility.m","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    return [self accessibilityTitleAttribute];\n+    return [super accessibilityLabel];\n@@ -47,1 +47,1 @@\n-    return [self accessibilityValueAttribute];\n+    return [super accessibilityValue];\n@@ -60,0 +60,10 @@\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/SliderAccessibility.m","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    return [self accessibilityTitleAttribute];\n+    return [super accessibilityLabel];\n@@ -47,1 +47,1 @@\n-    return [self accessibilityValueAttribute];\n+    return [super accessibilityValue];\n@@ -61,0 +61,10 @@\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/SpinboxAccessibility.m","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -50,0 +50,10 @@\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/StaticTextAccessibility.m","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface TabButtonAccessibility : CommonComponentAccessibility {\n+    jobject fTabGroupAxContext;\n+}\n+\n+@property(readonly) jobject tabGroup;\n+\n+\/\/ from TabGroup controller\n+- (id)initWithParent:(NSObject *)parent withEnv:(JNIEnv *)env withAccessible:(jobject)accessible withIndex:(jint)index withTabGroup:(jobject)tabGroup withView:(NSView *)view withJavaRole:(NSString *)javaRole;\n+- (void)performPressAction;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TabButtonAccessibility.h","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"TabButtonAccessibility.h\"\n+#import \"JavaAccessibilityAction.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+\n+@implementation TabButtonAccessibility\n+\n+- (id)initWithParent:(NSObject *)parent withEnv:(JNIEnv *)env withAccessible:(jobject)accessible withIndex:(jint)index withTabGroup:(jobject)tabGroup withView:(NSView *)view withJavaRole:(NSString *)javaRole\n+{\n+    self = [super initWithParent:parent withEnv:env withAccessible:accessible withIndex:index withView:view withJavaRole:javaRole];\n+    if (self) {\n+        if (tabGroup != NULL) {\n+            fTabGroupAxContext = (*env)->NewWeakGlobalRef(env, tabGroup);\n+            CHECK_EXCEPTION();\n+        } else {\n+            fTabGroupAxContext = NULL;\n+        }\n+    }\n+    return self;\n+}\n+\n+- (void)dealloc\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnvUncached];\n+\n+    if (fTabGroupAxContext != NULL) {\n+        (*env)->DeleteWeakGlobalRef(env, fTabGroupAxContext);\n+        fTabGroupAxContext = NULL;\n+    }\n+\n+    [super dealloc];\n+}\n+\n+- (jobject)tabGroup\n+{\n+    if (fTabGroupAxContext == NULL) {\n+        JNIEnv* env = [ThreadUtilities getJNIEnv];\n+        jobject tabGroupAxContext = [(CommonComponentAccessibility *)[self parent] axContextWithEnv:env];\n+        fTabGroupAxContext = (*env)->NewWeakGlobalRef(env, tabGroupAxContext);\n+        CHECK_EXCEPTION();\n+        (*env)->DeleteLocalRef(env, tabGroupAxContext);\n+    }\n+    return fTabGroupAxContext;\n+}\n+\n+- (void)performPressAction {\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    TabGroupAction *action = [[TabGroupAction alloc] initWithEnv:env withTabGroup:[self tabGroup] withIndex:fIndex withComponent:fComponent];\n+    [action perform];\n+    [action release];\n+}\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSAccessibilitySubrole)accessibilitySubrole\n+{\n+    if (@available(macOS 10.13, *)) {\n+        return NSAccessibilityTabButtonSubrole;\n+    }\n+    return NSAccessibilityUnknownSubrole;\n+}\n+\n+- (id)accessibilityValue\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    jobject selAccessible = getAxContextSelection(env, [self tabGroup], fIndex, fComponent);\n+\n+    \/\/ Returns the current selection of the page tab list\n+    id val = [NSNumber numberWithBool:ObjectEquals(env, axContext, selAccessible, fComponent)];\n+\n+    (*env)->DeleteLocalRef(env, selAccessible);\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return val;\n+}\n+\n+- (BOOL)accessibilityPerformPress {\n+    [self performPressAction];\n+    return YES;\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TabButtonAccessibility.m","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface TabGroupAccessibility : CommonComponentAccessibility {\n+    NSInteger _numTabs;\n+}\n+\n+@property(readonly) NSInteger numTabs;\n+\n+- (id)currentTabWithEnv:(JNIEnv *)env withAxContext:(jobject)axContext;\n+- (NSArray *)tabButtonsWithEnv:(JNIEnv *)env withTabGroupAxContext:(jobject)axContext withTabCode:(NSInteger)whichTabs allowIgnored:(BOOL)allowIgnored;\n+- (NSArray *)contentsWithEnv:(JNIEnv *)env withTabGroupAxContext:(jobject)axContext withTabCode:(NSInteger)whichTabs allowIgnored:(BOOL)allowIgnored;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TabGroupAccessibility.h","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"TabGroupAccessibility.h\"\n+#import \"TabButtonAccessibility.h\"\n+#import \"..\/JavaAccessibilityUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n+\n+static jclass sjc_CAccessibility = NULL;\n+\n+static jmethodID jm_getChildrenAndRoles = NULL;\n+#define GET_CHILDRENANDROLES_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(jm_getChildrenAndRoles, sjc_CAccessibility, \"getChildrenAndRoles\",\\\n+                      \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZ)[Ljava\/lang\/Object;\", ret);\n+\n+@implementation TabGroupAccessibility\n+\n+- (id)currentTabWithEnv:(JNIEnv *)env withAxContext:(jobject)axContext\n+{\n+    NSArray *tabs = [self tabButtonsWithEnv:env withTabGroupAxContext:axContext withTabCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN allowIgnored:NO];\n+\n+    \/\/ Looking at the JTabbedPane sources, there is always one AccessibleSelection.\n+    jobject selAccessible = getAxContextSelection(env, axContext, 0, fComponent);\n+    if (selAccessible == NULL) return nil;\n+\n+    \/\/ Go through the tabs and find selAccessible\n+    _numTabs = [tabs count];\n+    CommonComponentAccessibility *aTab;\n+    NSInteger i;\n+    for (i = 0; i < _numTabs; i++) {\n+        aTab = (CommonComponentAccessibility *)[tabs objectAtIndex:i];\n+        if ([aTab isAccessibleWithEnv:env forAccessible:selAccessible]) {\n+            (*env)->DeleteLocalRef(env, selAccessible);\n+            return aTab;\n+        }\n+    }\n+    (*env)->DeleteLocalRef(env, selAccessible);\n+    return nil;\n+}\n+\n+- (NSArray *)tabButtonsWithEnv:(JNIEnv *)env withTabGroupAxContext:(jobject)axContext withTabCode:(NSInteger)whichTabs allowIgnored:(BOOL)allowIgnored\n+{\n+    GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n+    jobjectArray jtabsAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n+                                  fAccessible, fComponent, whichTabs, allowIgnored);\n+    CHECK_EXCEPTION();\n+    if(jtabsAndRoles == NULL) return nil;\n+\n+    jsize arrayLen = (*env)->GetArrayLength(env, jtabsAndRoles);\n+    if (arrayLen == 0) {\n+        (*env)->DeleteLocalRef(env, jtabsAndRoles);\n+        return nil;\n+    }\n+    NSMutableArray *tabs = [NSMutableArray arrayWithCapacity:(arrayLen\/2)];\n+\n+    \/\/ all of the tabs have the same role, so we can just find out what that is here and use it for all the tabs\n+    jobject jtabJavaRole = (*env)->GetObjectArrayElement(env, jtabsAndRoles, 1); \/\/ the array entries alternate between tab\/role, starting with tab. so the first role is entry 1.\n+    if (jtabJavaRole == NULL) {\n+        (*env)->DeleteLocalRef(env, jtabsAndRoles);\n+        return nil;\n+    }\n+    DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n+    DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n+    jobject jkey = (*env)->GetObjectField(env, jtabJavaRole, sjf_key);\n+    CHECK_EXCEPTION();\n+    NSString *tabJavaRole = JavaStringToNSString(env, jkey);\n+    (*env)->DeleteLocalRef(env, jkey);\n+\n+    NSInteger i;\n+    NSUInteger tabIndex = (whichTabs >= 0) ? whichTabs : 0; \/\/ if we're getting one particular child, make sure to set its index correctly\n+    for(i = 0; i < arrayLen; i+=2) {\n+        jobject jtab = (*env)->GetObjectArrayElement(env, jtabsAndRoles, i);\n+        CommonComponentAccessibility *tab = [[[TabButtonAccessibility alloc] initWithParent:self withEnv:env withAccessible:jtab withIndex:tabIndex withTabGroup:axContext withView:[self view] withJavaRole:tabJavaRole] autorelease];\n+        (*env)->DeleteLocalRef(env, jtab);\n+        [tabs addObject:tab];\n+        tabIndex++;\n+    }\n+    (*env)->DeleteLocalRef(env, jtabsAndRoles);\n+    return tabs;\n+}\n+\n+- (NSArray *)contentsWithEnv:(JNIEnv *)env withTabGroupAxContext:(jobject)axContext withTabCode:(NSInteger)whichTabs allowIgnored:(BOOL)allowIgnored\n+{\n+    \/\/ Contents are the children of the selected tab.\n+    id currentTab = [self currentTabWithEnv:env withAxContext:axContext];\n+    if (currentTab == nil) return nil;\n+\n+    NSArray *contents = [CommonComponentAccessibility childrenOfParent:currentTab withEnv:env withChildrenCode:whichTabs allowIgnored:allowIgnored];\n+    if ([contents count] <= 0) return nil;\n+    return contents;\n+}\n+\n+- (NSInteger)numTabs\n+{\n+    if (_numTabs == -1) {\n+        _numTabs = [[self accessibilityTabsAttribute] count];\n+    }\n+    return _numTabs;\n+}\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSArray *)accessibilityTabs\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    id tabs = [self tabButtonsWithEnv:env withTabGroupAxContext:axContext withTabCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN allowIgnored:NO];\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return tabs;\n+}\n+\n+- (NSArray *)accessibilityContents\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    NSArray* cont = [self contentsWithEnv:env withTabGroupAxContext:axContext withTabCode:sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN allowIgnored:NO];\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return cont;\n+}\n+\n+- (id)accessibilityValue\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    id val = [self currentTabWithEnv:env withAxContext:axContext];\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return val;\n+}\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    \/\/children = AXTabs + AXContents\n+    NSArray *tabs = [self accessibilityTabs];\n+    NSArray *contents = [self accessibilityContents];\n+\n+    NSMutableArray *children = [NSMutableArray arrayWithCapacity:[tabs count] + [contents count]];\n+    [children addObjectsFromArray:tabs];\n+    [children addObjectsFromArray:contents];\n+\n+    return (NSArray *)children;\n+}\n+\n+- (NSArray *)accessibilityArrayAttributeValues:(NSAccessibilityAttributeName)attribute index:(NSUInteger)index maxCount:(NSUInteger)maxCount\n+{\n+    NSArray *result = nil;\n+    if ( (maxCount == 1) && [attribute isEqualToString:NSAccessibilityChildrenAttribute]) {\n+        \/\/ Children codes for ALL, SELECTED, VISIBLE are <0. If the code is >=0, we treat it as an index to a single child\n+        JNIEnv *env = [ThreadUtilities getJNIEnv];\n+        jobject axContext = [self axContextWithEnv:env];\n+\n+        \/\/children = AXTabs + AXContents\n+        NSArray *children = [self tabButtonsWithEnv:env withTabGroupAxContext:axContext withTabCode:index allowIgnored:NO]; \/\/ first look at the tabs\n+        if ([children count] > 0) {\n+            result = children;\n+         } else {\n+            children= [self contentsWithEnv:env withTabGroupAxContext:axContext withTabCode:(index-[self numTabs]) allowIgnored:NO];\n+            if ([children count] > 0) {\n+                result = children;\n+            }\n+        }\n+        (*env)->DeleteLocalRef(env, axContext);\n+    } else {\n+        result = [super accessibilityArrayAttributeValues:attribute index:index maxCount:maxCount];\n+    }\n+    return result;\n+}\n+\n+- (void)setAccessibilityValue:(id)accessibilityValue\n+{\n+    \/\/ set the current tab\n+    NSNumber *number = (NSNumber *)accessibilityValue;\n+    if (![number boolValue]) return;\n+\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    setAxContextSelection(env, axContext, fIndex, fComponent);\n+    (*env)->DeleteLocalRef(env, axContext);\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TabGroupAccessibility.m","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface TableAccessibility : CommonComponentAccessibility <NSAccessibilityTable>\n+\n+- (BOOL)isAccessibleChildSelectedFromIndex:(int)index;\n+- (int) accessibleRowAtIndex:(int)index;\n+- (int) accessibleColumnAtIndex:(int)index;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableAccessibility.h","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,241 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jni.h\"\n+#import \"TableRowAccessibility.h\"\n+#import \"JavaAccessibilityAction.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"TableAccessibility.h\"\n+#import \"CellAccessibility.h\"\n+#import \"ColumnAccessibility.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+#import \"CellAccessibility.h\"\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n+\n+static jclass sjc_CAccessibility = NULL;\n+\n+static jmethodID sjm_getAccessibleName = NULL;\n+#define GET_ACCESSIBLENAME_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(sjm_getAccessibleName, sjc_CAccessibility, \"getAccessibleName\", \\\n+                     \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;)Ljava\/lang\/String;\", ret);\n+\n+@implementation TableAccessibility\n+\n+- (id)getTableInfo:(jint)info\n+{\n+    if (fAccessible == NULL) return 0;\n+\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getTableInfo, sjc_CAccessibility, \"getTableInfo\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)I\", nil);\n+    jint count = (*env)->CallStaticIntMethod(env, sjc_CAccessibility, jm_getTableInfo, fAccessible,\n+                                        fComponent, info);\n+    CHECK_EXCEPTION();\n+    NSNumber *index = [NSNumber numberWithInt:count];\n+    return index;\n+}\n+\n+- (NSArray<NSNumber *> *)getTableSelectedInfo:(jint)info\n+{\n+    if (fAccessible == NULL) return 0;\n+\n+    JNIEnv* env = [ThreadUtilities getJNIEnv];\n+    GET_CACCESSIBILITY_CLASS_RETURN(nil);\n+    DECLARE_STATIC_METHOD_RETURN(jm_getTableSelectedInfo, sjc_CAccessibility, \"getTableSelectedInfo\",\n+                          \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;I)[I\", nil);\n+    jintArray selected = (*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getTableSelectedInfo, fAccessible,\n+                                        fComponent, info);\n+    CHECK_EXCEPTION();\n+    if (selected == NULL) {\n+        return nil;\n+    }\n+    jsize arrayLen = (*env)->GetArrayLength(env, selected);\n+    jint *indexsis = (*env)->GetIntArrayElements(env, selected, 0);\n+    NSMutableArray<NSNumber *> *nsArraySelected = [NSMutableArray<NSNumber *> arrayWithCapacity:arrayLen];\n+    for (int i = 0; i < arrayLen; i++) {\n+        [nsArraySelected addObject:[NSNumber numberWithInt:indexsis[i]]];\n+    }\n+    (*env)->DeleteLocalRef(env, selected);\n+    return [NSArray<NSNumber *> arrayWithArray:nsArraySelected];\n+}\n+\n+- (int)accessibleRowAtIndex:(int)index\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    if (axContext == NULL) return 0;\n+    jclass clsInfo = (*env)->GetObjectClass(env, axContext);\n+    DECLARE_METHOD_RETURN(jm_getAccessibleRowAtIndex, clsInfo, \"getAccessibleRowAtIndex\", \"(I)I\", -1);\n+    jint rowAtIndex = (*env)->CallIntMethod(env, axContext, jm_getAccessibleRowAtIndex, (jint)index);\n+    CHECK_EXCEPTION();\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return (int)rowAtIndex;\n+}\n+\n+- (int)accessibleColumnAtIndex:(int)index\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    if (axContext == NULL) return 0;\n+    jclass clsInfo = (*env)->GetObjectClass(env, axContext);\n+    DECLARE_METHOD_RETURN(jm_getAccessibleColumnAtIndex, clsInfo, \"getAccessibleColumnAtIndex\", \"(I)I\", -1);\n+    jint columnAtIndex = (*env)->CallIntMethod(env, axContext, jm_getAccessibleColumnAtIndex, (jint)index);\n+    CHECK_EXCEPTION();\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return (int)columnAtIndex;\n+}\n+\n+- (BOOL) isAccessibleChildSelectedFromIndex:(int)index\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    jobject axContext = [self axContextWithEnv:env];\n+    if (axContext == NULL) return NO;\n+    jclass clsInfo = (*env)->GetObjectClass(env, axContext);\n+    DECLARE_METHOD_RETURN(jm_isAccessibleChildSelected, clsInfo, \"isAccessibleChildSelected\", \"(I)Z\", NO);\n+    jboolean isAccessibleChildSelected = (*env)->CallIntMethod(env, axContext, jm_isAccessibleChildSelected, (jint)index);\n+    CHECK_EXCEPTION();\n+    (*env)->DeleteLocalRef(env, axContext);\n+    return isAccessibleChildSelected;\n+}\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    return [self accessibilityRows];\n+}\n+\n+- (NSArray *)accessibilitySelectedChildren\n+{\n+    return [self accessibilitySelectedRows];\n+}\n+\n+- (NSArray *)accessibilityRows\n+{\n+    int rowCount = [self accessibilityRowCount];\n+    NSMutableArray *children = [NSMutableArray arrayWithCapacity:rowCount];\n+    for (int i = 0; i < rowCount; i++) {\n+        [children addObject:[[TableRowAccessibility alloc] initWithParent:self\n+                                                                      withEnv:[ThreadUtilities getJNIEnv]\n+                                                               withAccessible:NULL\n+                                                                    withIndex:i\n+                                                                     withView:[self view]\n+                                                                 withJavaRole:JavaAccessibilityIgnore]];\n+    }\n+    return [NSArray arrayWithArray:children];\n+}\n+\n+- (nullable NSArray<id<NSAccessibilityRow>> *)accessibilitySelectedRows\n+{\n+    NSArray<NSNumber *> *selectedRowIndexses = [self getTableSelectedInfo:sun_lwawt_macosx_CAccessibility_JAVA_AX_ROWS];\n+    NSMutableArray *children = [NSMutableArray arrayWithCapacity:[selectedRowIndexses count]];\n+    for (NSNumber *index in selectedRowIndexses) {\n+        [children addObject:[[TableRowAccessibility alloc] initWithParent:self\n+                                                                      withEnv:[ThreadUtilities getJNIEnv]\n+                                                               withAccessible:NULL\n+                                                                    withIndex:index.unsignedIntValue\n+                                                                     withView:[self view]\n+                                                                 withJavaRole:JavaAccessibilityIgnore]];\n+    }\n+    return [NSArray arrayWithArray:children];\n+}\n+\n+- (NSString *)accessibilityLabel\n+{\n+    return [super accessibilityLabel] == NULL ? @\"table\" : [super accessibilityLabel];\n+}\n+\n+- (NSRect)accessibilityFrame\n+{\n+    return [super accessibilityFrame];\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n+- (nullable NSArray *)accessibilityColumns\n+{\n+    int colCount = [self accessibilityColumnCount];\n+    NSMutableArray *columns = [NSMutableArray arrayWithCapacity:colCount];\n+    for (int i = 0; i < colCount; i++) {\n+        [columns addObject:[[ColumnAccessibility alloc] initWithParent:self\n+                                                                   withEnv:[ThreadUtilities getJNIEnv]\n+                                                            withAccessible:NULL\n+                                                                 withIndex:i\n+                                                                  withView:self->fView\n+                                                              withJavaRole:JavaAccessibilityIgnore]];\n+    }\n+    return [NSArray arrayWithArray:columns];\n+}\n+\n+- (nullable NSArray *)accessibilitySelectedColumns\n+{\n+    NSArray<NSNumber *> *indexes = [self getTableSelectedInfo:sun_lwawt_macosx_CAccessibility_JAVA_AX_COLS];\n+    NSMutableArray *columns = [NSMutableArray arrayWithCapacity:[indexes count]];\n+    for (NSNumber *i in indexes) {\n+        [columns addObject:[[ColumnAccessibility alloc] initWithParent:self\n+                                                                   withEnv:[ThreadUtilities getJNIEnv]\n+                                                            withAccessible:NULL\n+                                                                 withIndex:i.unsignedIntValue\n+                                                                  withView:self->fView\n+                                                              withJavaRole:JavaAccessibilityIgnore]];\n+    }\n+    return [NSArray arrayWithArray:columns];\n+}\n+\n+- (NSInteger)accessibilityRowCount\n+{\n+    return [[self getTableInfo:sun_lwawt_macosx_CAccessibility_JAVA_AX_ROWS] integerValue];\n+}\n+\n+- (NSInteger)accessibilityColumnCount\n+{\n+    return [[self getTableInfo:sun_lwawt_macosx_CAccessibility_JAVA_AX_COLS] integerValue];\n+}\n+\n+- (nullable NSArray *)accessibilitySelectedCells\n+{\n+    NSArray *children = [super accessibilitySelectedChildren];\n+    NSMutableArray *cells = [NSMutableArray arrayWithCapacity:[children count]];\n+    for (CommonComponentAccessibility *child in children) {\n+        [cells addObject:[[CellAccessibility alloc] initWithParent:self\n+                                                           withEnv:[ThreadUtilities getJNIEnv]\n+                                                    withAccessible:child->fAccessible\n+                                                         withIndex:child->fIndex\n+                                                          withView:fView\n+                                                      withJavaRole:child->fJavaRole]];\n+    }\n+    return [NSArray arrayWithArray:cells];\n+}\n+\n+- (id)accessibilityCellForColumn:(NSInteger)column row:(NSInteger)row {\n+    return [[(TableRowAccessibility *)[[self accessibilityRows] objectAtIndex:row] accessibilityChildren] objectAtIndex:column];\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableAccessibility.m","additions":241,"deletions":0,"binary":false,"changes":241,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"CommonComponentAccessibility.h\"\n+\n+@interface TableRowAccessibility : CommonComponentAccessibility <NSAccessibilityRow>\n+\n+@property(readonly) NSUInteger rowNumberInTable;\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableRowAccessibility.h","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"TableRowAccessibility.h\"\n+#import \"JavaAccessibilityAction.h\"\n+#import \"JavaAccessibilityUtilities.h\"\n+#import \"TableAccessibility.h\"\n+#import \"CellAccessibility.h\"\n+#import \"ThreadUtilities.h\"\n+#import \"JNIUtilities.h\"\n+#import \"sun_lwawt_macosx_CAccessibility.h\"\n+\n+static jclass sjc_CAccessibility = NULL;\n+\n+static jmethodID jm_getChildrenAndRoles = NULL;\n+#define GET_CHILDRENANDROLES_METHOD_RETURN(ret) \\\n+    GET_CACCESSIBILITY_CLASS_RETURN(ret); \\\n+    GET_STATIC_METHOD_RETURN(jm_getChildrenAndRoles, sjc_CAccessibility, \"getChildrenAndRoles\",\\\n+                      \"(Ljavax\/accessibility\/Accessible;Ljava\/awt\/Component;IZ)[Ljava\/lang\/Object;\", ret);\n+\n+@implementation TableRowAccessibility\n+\n+\/\/ NSAccessibilityElement protocol methods\n+\n+- (NSAccessibilityRole)accessibilityRole\n+{\n+    return NSAccessibilityRowRole;\n+}\n+\n+- (NSAccessibilitySubrole)accessibilitySubrole\n+{\n+    return NSAccessibilityTableRowSubrole;\n+}\n+\n+- (NSArray *)accessibilityChildren\n+{\n+    NSArray *children = [super accessibilityChildren];\n+    if (children == nil) {\n+        JNIEnv *env = [ThreadUtilities getJNIEnv];\n+        CommonComponentAccessibility *parent = [self accessibilityParent];\n+        if (parent->fAccessible == NULL) return nil;\n+        GET_CHILDRENANDROLES_METHOD_RETURN(nil);\n+        jobjectArray jchildrenAndRoles = (jobjectArray)(*env)->CallStaticObjectMethod(env, sjc_CAccessibility, jm_getChildrenAndRoles,\n+                                                                                      parent->fAccessible, parent->fComponent, sun_lwawt_macosx_CAccessibility_JAVA_AX_ALL_CHILDREN, NO);\n+        CHECK_EXCEPTION();\n+        if (jchildrenAndRoles == NULL) return nil;\n+\n+        jsize arrayLen = (*env)->GetArrayLength(env, jchildrenAndRoles);\n+        NSMutableArray *childrenCells = [NSMutableArray arrayWithCapacity:arrayLen\/2];\n+\n+        NSUInteger childIndex = fIndex * [(TableAccessibility *)parent accessibilityColumnCount];\n+        NSInteger i = childIndex * 2;\n+        NSInteger n = (fIndex + 1) * [(TableAccessibility *)parent accessibilityColumnCount] * 2;\n+        for(i; i < n; i+=2)\n+        {\n+            jobject \/* Accessible *\/ jchild = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i);\n+            jobject \/* String *\/ jchildJavaRole = (*env)->GetObjectArrayElement(env, jchildrenAndRoles, i+1);\n+\n+            NSString *childJavaRole = nil;\n+            if (jchildJavaRole != NULL) {\n+                DECLARE_CLASS_RETURN(sjc_AccessibleRole, \"javax\/accessibility\/AccessibleRole\", nil);\n+                DECLARE_FIELD_RETURN(sjf_key, sjc_AccessibleRole, \"key\", \"Ljava\/lang\/String;\", nil);\n+                jobject jkey = (*env)->GetObjectField(env, jchildJavaRole, sjf_key);\n+                CHECK_EXCEPTION();\n+                childJavaRole = JavaStringToNSString(env, jkey);\n+                (*env)->DeleteLocalRef(env, jkey);\n+            }\n+\n+            CellAccessibility *child = [[CellAccessibility alloc] initWithParent:self\n+                                                                         withEnv:env\n+                                                                  withAccessible:jchild\n+                                                                       withIndex:childIndex\n+                                                                        withView:self->fView\n+                                                                    withJavaRole:childJavaRole];\n+            [childrenCells addObject:[[child retain] autorelease]];\n+\n+            (*env)->DeleteLocalRef(env, jchild);\n+            (*env)->DeleteLocalRef(env, jchildJavaRole);\n+\n+            childIndex++;\n+        }\n+        (*env)->DeleteLocalRef(env, jchildrenAndRoles);\n+        return childrenCells;\n+    } else {\n+        return children;\n+    }\n+}\n+\n+- (NSInteger)accessibilityIndex\n+{\n+    return self->fIndex;\n+}\n+\n+- (NSString *)accessibilityLabel\n+{\n+    NSString *accessibilityName = @\"\";\n+    NSArray *children = [self accessibilityChildren];\n+        for (id cell in children) {\n+            if ([accessibilityName isEqualToString:@\"\"]) {\n+                accessibilityName = [cell accessibilityLabel];\n+            } else {\n+                accessibilityName = [accessibilityName stringByAppendingFormat:@\", %@\", [cell accessibilityLabel]];\n+            }\n+        }\n+        return accessibilityName;\n+}\n+\n+- (id)accessibilityParent\n+{\n+    return [super accessibilityParent];\n+}\n+\n+- (NSRect)accessibilityFrame\n+{\n+        int height = [[[self accessibilityChildren] objectAtIndex:0] accessibilityFrame].size.height;\n+        int width = 0;\n+        NSPoint point = [[[self accessibilityChildren] objectAtIndex:0] accessibilityFrame].origin;\n+        for (id cell in [self accessibilityChildren]) {\n+            width += [cell accessibilityFrame].size.width;\n+        }\n+        return NSMakeRect(point.x, point.y, width, height);\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/TableRowAccessibility.m","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.*;\n+import java.security.PublicKey;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.CountDownLatch;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.GridBagLayout;\n+\n+import javax.swing.JPanel;\n+import javax.swing.JFrame;\n+import javax.swing.JTextArea;\n+import javax.swing.JButton;\n+\n+public abstract class AccessibleComponentTest {\n+\n+    protected static volatile boolean testResult = true;\n+    protected static volatile CountDownLatch countDownLatch;\n+    protected static String INSTRUCTIONS;\n+    protected static String exceptionString;\n+    protected JFrame mainFrame;\n+    protected static AccessibleComponentTest a11yTest;\n+\n+    public abstract CountDownLatch createCountDownLatch();\n+\n+    public void createUI(JPanel component, String testName) {\n+        mainFrame = new JFrame(testName);\n+        GridBagLayout layout = new GridBagLayout();\n+        JPanel mainControlPanel = new JPanel(layout);\n+        JPanel resultButtonPanel = new JPanel(layout);\n+\n+        GridBagConstraints gbc = new GridBagConstraints();\n+\n+        JTextArea instructionTextArea = new JTextArea();\n+        instructionTextArea.setText(INSTRUCTIONS);\n+        instructionTextArea.setEditable(false);\n+        instructionTextArea.setBackground(Color.white);\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 0;\n+        gbc.fill = GridBagConstraints.HORIZONTAL;\n+        mainControlPanel.add(instructionTextArea, gbc);\n+        gbc.gridx = 0;\n+        gbc.gridy = 1;\n+        mainControlPanel.add(component);\n+\n+        JButton passButton = new JButton(\"Pass\");\n+        passButton.setActionCommand(\"Pass\");\n+        passButton.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                mainFrame.dispose();\n+                countDownLatch.countDown();\n+            }\n+        });\n+\n+        JButton failButton = new JButton(\"Fail\");\n+        failButton.setActionCommand(\"Fail\");\n+        failButton.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                testResult = false;\n+                mainFrame.dispose();\n+                countDownLatch.countDown();\n+            }\n+        });\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 0;\n+        resultButtonPanel.add(passButton, gbc);\n+\n+        gbc.gridx = 1;\n+        gbc.gridy = 0;\n+        resultButtonPanel.add(failButton, gbc);\n+\n+        gbc.gridx = 0;\n+        gbc.gridy = 2;\n+        mainControlPanel.add(resultButtonPanel, gbc);\n+\n+        mainFrame.add(mainControlPanel);\n+        mainFrame.pack();\n+\n+        mainFrame.addWindowListener(new WindowAdapter() {\n+\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                mainFrame.dispose();\n+                countDownLatch.countDown();\n+            }\n+        });\n+        mainFrame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleComponentTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264287\n+ * @summary Test implementation of NSAccessibilityComboBox protocol peer\n+ * @author Artem.Semenov@jetbrains.com\n+ * @run main\/manual AccessibleJComboboxTest\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n+ *\/\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JPanel;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+import java.awt.FlowLayout;\n+import java.util.concurrent.CountDownLatch;\n+\n+public class AccessibleJComboboxTest extends AccessibleComponentTest {\n+\n+    @java.lang.Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+\n+    void createCombobox() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JCombobox.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the combobox.\\n\\n\"\n+                + \"If you can hear combobox selected item tab further and press PASS, otherwise press FAIL.\";\n+\n+        JPanel frame = new JPanel();\n+\n+        String[] NAMES = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"};\n+        JComboBox<String> combo = new JComboBox<>(NAMES);\n+\n+        JLabel label = new JLabel(\"This is combobox:\");\n+        label.setLabelFor(combo);\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(label);\n+        frame.add(combo);\n+        exceptionString = \"AccessibleJCombobox test failed!\";\n+        super.createUI(frame, \"AccessibleJComboboxTest\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AccessibleJComboboxTest test = new AccessibleJComboboxTest();\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeLater(test::createCombobox);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJComboboxTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,330 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264292\n+ * @summary Test implementation of NSAccessibilityList protocol peer\n+  * @author Artem.Semenov@jetbrains.com\n+ * @run main\/manual AccessibleJListTest\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n+ *\/\n+\n+import javax.swing.JList;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JWindow;\n+import javax.swing.JPanel;\n+import javax.swing.JLabel;\n+import javax.swing.ListCellRenderer;\n+import javax.swing.SwingUtilities;\n+import javax.swing.Popup;\n+import javax.swing.PopupFactory;\n+\n+import java.awt.event.ActionListener;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+import java.awt.Rectangle;\n+import java.awt.Dimension;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Window;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.util.ArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class AccessibleJListTest extends AccessibleComponentTest {\n+\n+    private static final String[] NAMES = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"};\n+    static JWindow window;\n+\n+    public static void main(String[] args) throws Exception {\n+        a11yTest = new AccessibleJListTest();\n+\n+        countDownLatch = a11yTest.createCountDownLatch();\n+        SwingUtilities.invokeLater(((AccessibleJListTest) a11yTest)::createSimpleList);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+\n+        countDownLatch = a11yTest.createCountDownLatch();\n+        SwingUtilities.invokeLater(((AccessibleJListTest) a11yTest)::createSimpleListRenderer);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+\n+        countDownLatch = a11yTest.createCountDownLatch();\n+        SwingUtilities.invokeLater(((AccessibleJListTest) a11yTest)::createSimpleListNamed);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+\n+        countDownLatch = a11yTest.createCountDownLatch();\n+        SwingUtilities.invokeLater(((AccessibleJListTest) a11yTest)::createCombobox);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+\n+        countDownLatch = a11yTest.createCountDownLatch();\n+        SwingUtilities.invokeLater(((AccessibleJListTest) a11yTest)::createPushButton);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+\n+        countDownLatch = a11yTest.createCountDownLatch();\n+        SwingUtilities.invokeLater(((AccessibleJListTest) a11yTest)::createPushButtonHeavyWeight);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+    }\n+\n+    @java.lang.Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+\n+    public void createSimpleList() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JList.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the list.\\n\"\n+                + \"Press the up and down arrow buttons to move through the list.\\n\\n\"\n+                + \"If you can hear menu items tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JPanel frame = new JPanel();\n+\n+        JList<String> list = new JList<>(NAMES);\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(list);\n+        exceptionString = \"Accessible JList simple list test failed!\";\n+        super.createUI(frame, \"Accessible JList test\");\n+    }\n+\n+    public void createSimpleListRenderer() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JList with renderer.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the list.\\n\"\n+                + \"Press the up and down arrow buttons to move through the list.\\n\\n\"\n+                + \"If you can hear menu items tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JPanel frame = new JPanel();\n+\n+        JList<String> list = new JList<>(NAMES);\n+        list.setCellRenderer(new AccessibleJListTestRenderer());\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(list);\n+        exceptionString = \"Accessible JList with renderer simple list test failed!\";\n+        super.createUI(frame, \"Accessible JList test\");\n+    }\n+\n+    public void createSimpleListNamed() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of named JList.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the list.\\n\"\n+                + \"Press the tab button to move to second list.\\n\\n\"\n+                + \"If you can hear second list name: \\\"second list\\\" - tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JPanel frame = new JPanel();\n+\n+        JList<String> list = new JList<>(NAMES);\n+        JList<String> secondList = new JList<>(NAMES);\n+        secondList.getAccessibleContext().setAccessibleName(\"Second list\");\n+        frame.setLayout(new FlowLayout());\n+        frame.add(list);\n+        frame.add(secondList);\n+        exceptionString = \"Accessible JList simple list named test failed!\";\n+        super.createUI(frame, \"Accessible JList test\");\n+    }\n+\n+\n+    public void createCombobox() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JList in a combobox.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the combobox.\\n\"\n+                + \"Press the up and down arrow buttons to move through the list.\\n\\n\"\n+                + \"If you can hear combobox items tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JPanel frame = new JPanel();\n+\n+        JComboBox<String> combo = new JComboBox<>(NAMES);\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(combo);\n+        exceptionString = \"Accessible JList combobox test failed!\";\n+        super.createUI(frame, \"Accessible JList test\");\n+    }\n+\n+    public void createPushButton() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JList in a popup in a simple window.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the show button and press space.\\n\"\n+                + \"Press the up and down arrow buttons to move through the list.\\n\\n\"\n+                + \"If you can hear popup menu items tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JPanel frame = new JPanel();\n+\n+        JButton button = new JButton(\"show\");\n+        button.setPreferredSize(new Dimension(100, 35));\n+\n+        button.addActionListener(new ActionListener() {\n+\n+            final Runnable dispose = () -> {\n+                window.dispose();\n+                window = null;\n+                button.setText(\"show\");\n+            };\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (window == null) {\n+                    Rectangle bounds = frame.getBounds();\n+                    window = new JWindow(mainFrame);\n+                    JList<String> winList = new JList<>(NAMES);\n+                    winList.addKeyListener(new KeyAdapter() {\n+                        @Override\n+                        public void keyPressed(KeyEvent e) {\n+                            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n+                                dispose.run();\n+                            }\n+                        }\n+                    });\n+                    window.add(winList);\n+                    window.setLocation(bounds.x + bounds.width + 20, bounds.y);\n+                    window.pack();\n+                    window.setVisible(true);\n+                    button.setText(\"hide (ESC)\");\n+                } else {\n+                    dispose.run();\n+                }\n+            }\n+        });\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(button);\n+        exceptionString = \"Accessible JList push button with simple window test failed!\";\n+        super.createUI(frame, \"Accessible JList test\");\n+    }\n+\n+    public void createPushButtonHeavyWeight() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JList in a popup in a heavy weight window.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the show button and press space.\\n\"\n+                + \"Press the up and down arrow buttons to move through the list.\\n\\n\"\n+                + \"If you can hear popup menu items tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JPanel frame = new JPanel();\n+\n+        JButton button = new JButton(\"show\");\n+        button.setPreferredSize(new Dimension(100, 35));\n+\n+        button.addActionListener(new ActionListener() {\n+            private Popup popup = null;\n+\n+            final Runnable dispose = () -> {\n+                popup.hide();\n+                popup = null;\n+                button.requestFocus();\n+                button.setText(\"show\");\n+            };\n+\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                if (popup == null) {\n+                    Rectangle bounds = frame.getBounds();\n+                    PopupFactory factory = PopupFactory.getSharedInstance();\n+                    JList<String> winList = new JList<>(NAMES);\n+                    winList.addKeyListener(new KeyAdapter() {\n+                        @Override\n+                        public void keyPressed(KeyEvent e) {\n+                            if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\n+                                dispose.run();\n+                            }\n+                        }\n+                    });\n+                    popup = factory.getPopup(frame, winList, bounds.x + bounds.width + 20, bounds.y);\n+                    Window c = SwingUtilities.getWindowAncestor(winList);\n+                    if (c != null) {\n+                        c.setAutoRequestFocus(true);\n+                        c.setFocusableWindowState(true);\n+                    }\n+                    popup.show();\n+                    button.setText(\"hide (ESC)\");\n+                } else {\n+                    dispose.run();\n+                }\n+            }\n+        });\n+\n+        frame.setLayout(new FlowLayout());\n+        frame.add(button);\n+        exceptionString = \"Accessible JList push button with heavy weight window test failed!\";\n+        super.createUI(frame, \"Accessible JList test\");\n+    }\n+\n+    public static class AccessibleJListTestRenderer extends JPanel implements ListCellRenderer {\n+        private JLabel labelAJT = new JLabel(\"AJL\");\n+        private JLabel itemName = new JLabel();\n+\n+        AccessibleJListTestRenderer() {\n+            super(new FlowLayout());\n+            setFocusable(false);\n+            layoutComponents();\n+        }\n+\n+        private void layoutComponents() {\n+            add(labelAJT);\n+            add(itemName);\n+        }\n+\n+        @Override\n+        public Dimension getPreferredSize() {\n+            Dimension size = super.getPreferredSize();\n+            return new Dimension(Math.min(size.width, 245), size.height);\n+        }\n+\n+        @Override\n+        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n+            itemName.setText(((String) value));\n+\n+            getAccessibleContext().setAccessibleName(labelAJT.getText() + \", \" + itemName.getText());\n+            return this;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJListTest.java","additions":330,"deletions":0,"binary":false,"changes":330,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264303\n+ * @summary Test implementation of NSAccessibilityTabPanel protocol peer\n+ * @author Artem.Semenov@jetbrains.com\n+ * @run main\/manual AccessibleJTabbedPaneTest\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n+ *\/\n+\n+import javax.swing.JTabbedPane;\n+import javax.swing.JPanel;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n+import javax.swing.JTextField;\n+import javax.swing.JCheckBox;\n+import javax.swing.SwingUtilities;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+public class AccessibleJTabbedPaneTest extends AccessibleComponentTest {\n+\n+    @Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+\n+    void createTabPane() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JTabbedPane.\\n\\n\"\n+                + \"Turn screen reader on, and tab to the JTabbedPane.\\n\"\n+                + \"Use page up and page down arrow buttons to move through the tabs.\\n\\n\"\n+                + \"If you can hear selected tab names tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JTabbedPane tabbedPane = new JTabbedPane();\n+\n+        JPanel panel1 = new JPanel();\n+        String[] names = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"};\n+        JList list = new JList(names);\n+        JLabel fieldName = new JLabel(\"Text field:\");\n+        JTextField textField = new JTextField(\"some text\");\n+        fieldName.setLabelFor(textField);\n+        panel1.add(fieldName);\n+        panel1.add(textField);\n+        panel1.add(list);\n+        tabbedPane.addTab(\"Tab 1\", panel1);\n+        JPanel panel2 = new JPanel();\n+        for (int i = 0; i < 5; i++) {\n+            panel2.add(new JCheckBox(\"CheckBox \" + String.valueOf(i + 1)));\n+        }\n+        tabbedPane.addTab(\"tab 2\", panel2);\n+        JPanel panel = new JPanel();\n+        panel.add(tabbedPane);\n+\n+        exceptionString = \"AccessibleJTabbedPane test failed!\";\n+        createUI(panel, \"AccessibleJTabbedPaneTest\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AccessibleJTabbedPaneTest test = new AccessibleJTabbedPaneTest();\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeLater(test::createTabPane);\n+        countDownLatch.await();\n+\n+        if (!testResult) {\n+            throw new RuntimeException(a11yTest.exceptionString);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJTabbedPaneTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267388\n+ * @summary Test implementation of NSAccessibilityTable protocol peer\n+ * @author Artem.Semenov@jetbrains.com\n+ * @run main\/manual AccessibleJTableTest\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n+ *\/\n+\n+import javax.swing.JTable;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.SwingUtilities;\n+\n+import java.awt.FlowLayout;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class AccessibleJTableTest extends AccessibleComponentTest {\n+    private static final String[] columnNames = {\"One\", \"Two\", \"Three\"};\n+    private static final String[][] data = {\n+            {\"One1\", \"Two1\", \"Three1\"},\n+            {\"One2\", \"Two2\", \"Three2\"},\n+            {\"One3\", \"Two3\", \"Three3\"},\n+            {\"One4\", \"Two4\", \"Three4\"},\n+            {\"One5\", \"Two5\", \"Three5\"}\n+    };\n+\n+    @Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+\n+    public void  createUI() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JTable.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the table.\\n\"\n+                + \"On Windows press the arrow buttons to move through the table.\\n\\n\"\n+                + \"On MacOS, use the up and down arrow buttons to move through rows, and VoiceOver fast navigation to move through columns.\\n\\n\"\n+                + \"If you can hear table cells ctrl+tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JTable table = new JTable(data, columnNames);\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        JScrollPane scrollPane = new JScrollPane(table);\n+        panel.add(scrollPane);\n+        panel.setFocusable(false);\n+        exceptionString = \"AccessibleJTable test failed!\";\n+        super.createUI(panel, \"AccessibleJTableTest\");\n+    }\n+\n+    public void  createUINamed() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of named JTable.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the table.\\n\"\n+                + \"Press the ctrl+tab button to move to second table.\\n\\n\"\n+                + \"If you can hear second table name: \\\"second table\\\" - ctrl+tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        JTable table = new JTable(data, columnNames);\n+        JTable secondTable = new JTable(data, columnNames);\n+        secondTable.getAccessibleContext().setAccessibleName(\"Second table\");\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        JScrollPane scrollPane = new JScrollPane(table);\n+        JScrollPane secondScrollPane = new JScrollPane(secondTable);\n+        panel.add(scrollPane);\n+        panel.add(secondScrollPane);\n+        panel.setFocusable(false);\n+        exceptionString = \"AccessibleJTable test failed!\";\n+        super.createUI(panel, \"AccessibleJTableTest\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AccessibleJTableTest test = new AccessibleJTableTest();\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createUI);\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createUINamed);\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJTableTest.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -0,0 +1,239 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267387\n+ * @summary Test implementation of NSAccessibilityOutLine protocol peer\n+ * @author Artem.Semenov@jetbrains.com\n+ * @run main\/manual AccessibleJTreeTest\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n+ *\/\n+\n+import javax.swing.JTree;\n+import javax.swing.JPanel;\n+import javax.swing.JLabel;\n+import javax.swing.JScrollPane;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.TreeCellRenderer;\n+import javax.swing.SwingUtilities;\n+\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.util.Hashtable;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class AccessibleJTreeTest extends AccessibleComponentTest {\n+\n+    @Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+\n+    public void createSampleTree() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JTree.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the tree.\\n\"\n+                + \"Press the arrow buttons to move through the tree.\\n\\n\"\n+                + \"If you can hear tree components tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        String root = \"Root\";\n+        String[] nodes = new String[] {\"One node\", \"Two node\"};\n+        String[][] leafs = new String[][]{{\"leaf 1.1\", \"leaf 1.2\", \"leaf 1.3\", \"leaf 1.4\"},\n+                {\"leaf 2.1\", \"leaf 2.2\", \"leaf 2.3\", \"leaf 2.4\"}};\n+\n+        Hashtable<String, String[]> data = new Hashtable<String, String[]>();\n+        for (int i = 0; i < nodes.length; i++) {\n+            data.put(nodes[i], leafs[i]);\n+        }\n+\n+        JTree tree = new JTree(data);\n+        tree.setRootVisible(true);\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        JScrollPane scrollPane = new JScrollPane(tree);\n+        panel.add(scrollPane);\n+        panel.setFocusable(false);\n+        exceptionString = \"AccessibleJTree sample item test failed!\";\n+        super.createUI(panel, \"AccessibleJTreeTest\");\n+    }\n+\n+    public void createSampleTreeUnvisableRoot() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JTree with invisible root.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the tree.\\n\"\n+                + \"Press the arrow buttons to move through the tree.\\n\\n\"\n+                + \"If you can hear tree components tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        String root = \"Root\";\n+        String[] nodes = new String[] {\"One node\", \"Two node\"};\n+        String[][] leafs = new String[][]{{\"leaf 1.1\", \"leaf 1.2\", \"leaf 1.3\", \"leaf 1.4\"},\n+                {\"leaf 2.1\", \"leaf 2.2\", \"leaf 2.3\", \"leaf 2.4\"}};\n+\n+        Hashtable<String, String[]> data = new Hashtable<String, String[]>();\n+        for (int i = 0; i < nodes.length; i++) {\n+            data.put(nodes[i], leafs[i]);\n+        }\n+\n+        JTree tree = new JTree(data);\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        JScrollPane scrollPane = new JScrollPane(tree);\n+        panel.add(scrollPane);\n+        panel.setFocusable(false);\n+        exceptionString = \"AccessibleJTree sample item invisible root test failed!\";\n+        super.createUI(panel, \"AccessibleJTreeTest\");\n+    }\n+\n+    public void createSampleTreeNamed() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of named JTree.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the tree.\\n\"\n+                + \"Press the tab button to move to second tree.\\\\n\\n\"\n+                + \"If you can hear second tree name: \\\"second tree\\\" - tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        String root = \"Root\";\n+        String[] nodes = new String[] {\"One node\", \"Two node\"};\n+        String[][] leafs = new String[][]{{\"leaf 1.1\", \"leaf 1.2\", \"leaf 1.3\", \"leaf 1.4\"},\n+                {\"leaf 2.1\", \"leaf 2.2\", \"leaf 2.3\", \"leaf 2.4\"}};\n+\n+        Hashtable<String, String[]> data = new Hashtable<String, String[]>();\n+        for (int i = 0; i < nodes.length; i++) {\n+            data.put(nodes[i], leafs[i]);\n+        }\n+\n+        JTree tree = new JTree(data);\n+        JTree secondTree = new JTree(data);\n+        secondTree.getAccessibleContext().setAccessibleName(\"Second tree\");\n+        tree.setRootVisible(true);\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        JScrollPane scrollPane = new JScrollPane(tree);\n+        JScrollPane secondScrollPane = new JScrollPane(secondTree);\n+        panel.add(scrollPane);\n+        panel.add(secondScrollPane);\n+        panel.setFocusable(false);\n+        exceptionString = \"AccessibleJTree named test failed!\";\n+        super.createUI(panel, \"AccessibleJTreeTest\");\n+    }\n+\n+\n+    public void createRendererTree() {\n+        INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JTree using renderer.\\n\\n\"\n+                + \"Turn screen reader on, and Tab to the tree.\\n\"\n+                + \"Press the arrow buttons to move through the tree.\\n\\n\"\n+                + \"If you can hear tree components tab further and press PASS, otherwise press FAIL.\\n\";\n+\n+        String root = \"Root\";\n+        String[] nodes = new String[] {\"One node\", \"Two node\"};\n+        String[][] leafs = new String[][]{{\"leaf 1.1\", \"leaf 1.2\", \"leaf 1.3\", \"leaf 1.4\"},\n+                {\"leaf 2.1\", \"leaf 2.2\", \"leaf 2.3\", \"leaf 2.4\"}};\n+\n+        Hashtable<String, String[]> data = new Hashtable<String, String[]>();\n+        for (int i = 0; i < nodes.length; i++) {\n+            data.put(nodes[i], leafs[i]);\n+        }\n+\n+        JTree tree = new JTree(data);\n+        tree.setRootVisible(true);\n+        tree.setCellRenderer(new AccessibleJTreeTestRenderer());\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        JScrollPane scrollPane = new JScrollPane(tree);\n+        panel.add(scrollPane);\n+        panel.setFocusable(false);\n+        exceptionString = \"AccessibleJTree renderer item test failed!\";\n+        super.createUI(panel, \"AccessibleJTreeTest\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AccessibleJTreeTest test = new AccessibleJTreeTest();\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createSampleTree);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createSampleTreeNamed);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createSampleTreeUnvisableRoot);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createRendererTree);\n+        countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(AccessibleComponentTest.exceptionString);\n+        }\n+    }\n+\n+    public static class AccessibleJTreeTestRenderer extends JPanel implements TreeCellRenderer {\n+        private JLabel labelAJT = new JLabel(\"AJT\");\n+        private JLabel itemName = new JLabel();\n+\n+        AccessibleJTreeTestRenderer() {\n+            super(new FlowLayout());\n+            setFocusable(false);\n+            layoutComponents();\n+        }\n+\n+        private void layoutComponents() {\n+            add(labelAJT);\n+            add(itemName);\n+        }\n+\n+        @Override\n+        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {\n+                itemName.setText((String) (((DefaultMutableTreeNode) value).getUserObject()));\n+\n+            getAccessibleContext().setAccessibleName(labelAJT.getText() + \", \" + itemName.getText());\n+            return this;\n+        }\n+\n+        @Override\n+        public Dimension getPreferredSize() {\n+            Dimension size = super.getPreferredSize();\n+            return new Dimension(Math.min(size.width, 245), size.height);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleJTreeTest.java","additions":239,"deletions":0,"binary":false,"changes":239,"status":"added"},{"patch":"@@ -0,0 +1,293 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8262031\n+ * @summary Test implementation of NSAccessibilityNavigableStaticTest and NSAccessibilityStaticText protocols peer\n+ * @author Artem.Semenov@jetbrains.com\n+ * @run main\/manual AccessibleTextTest\n+ * @requires (os.family == \"windows\" | os.family == \"mac\")\n+ *\/\n+\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import javax.swing.JTextPane;\n+import javax.swing.SwingUtilities;\n+\n+import java.awt.FlowLayout;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyAdapter;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+public class AccessibleTextTest extends AccessibleComponentTest {\n+    @Override\n+    public CountDownLatch createCountDownLatch() {\n+        return new CountDownLatch(1);\n+    }\n+\n+    private void createSimpleLabel() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JLabel.\\n\\n\"\n+                + \"Turn screen reader on.\\n\"\n+                + \"On MacOS, use the VO navigation keys to read the label text;\\n\"\n+                + \"ON Windows with JAWS, use window virtualization (insert+alt+w and arrows) to read the label text;\\n\"\n+                + \"ON Windows with NVDA, use the browse cursor (insert+num4 or insert+num6) to read the label text;\\n\\n\"\n+                + \"If you can hear text from label tab further and press PASS, otherwise press FAIL.\";\n+\n+        JLabel label = new JLabel(\"this is a label\");\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(label);\n+        exceptionString = \"Simple label test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createOneLineTexField() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JTextField.\\n\\n\"\n+                + \"Turn screen reader on and press Tab to move to the text field and type some characters.\\n\\n\"\n+                + \"If you can hear input results according to your screen reader settings, tab further and press PASS, otherwise press FAIL.\";\n+\n+        JTextField textField = new JTextField(\"some text to edit\");\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(textField);\n+        exceptionString = \"Simple text field test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createPassField() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JPasswordField.\\n\\n\"\n+                + \"Turn screen reader on and press Tab to move to the password field and type some characters.\\n\\n\"\n+                + \"If you can hear  sounds specific to your screen reader when interacting with password fields, tab further and press PASS, otherwise press FAIL.\";\n+\n+        JPasswordField passwordField = new JPasswordField(\"12345678\");\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(passwordField);\n+        exceptionString = \"Simple passfield field test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createNamedTextField() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of named JTextField.\\n\\n\"\n+                + \"Turn screen reader on and press Tab to move to the text field.\\n\\n\"\n+                + \"If you can hear in addition to the fact that this text field is also the names of these fields, tab further and press PASS, otherwise press FAIL.\";\n+\n+        JTextField textField = new JTextField(\"some text 1\");\n+        textField.getAccessibleContext().setAccessibleName(\"This is the first text field:\");\n+\n+        JLabel label = new JLabel(\"This is the second text field:\");\n+        JTextField secondTextField = new JTextField(\"some text 2\");\n+        label.setLabelFor(secondTextField);\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(textField);\n+        panel.add(label);\n+        panel.add(secondTextField);\n+        exceptionString = \"Named text field test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createTextArea() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of JTextArea.\\n\\n\"\n+                + \"Turn screen reader on and press the arrow keys.\\n\\n\"\n+                + \"If you can hear this instructions, tab further and press PASS, otherwise press FAIL.\";\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        exceptionString = \"Simple text area test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createEditableTextArea() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of editable JTextArea.\\n\\n\"\n+                + \"Turn screen reader on and press Tab to move to the text area and type some characters.\\n\\n\"\n+                + \"If you can hear input results according to your screen reader settings, tab further and press PASS, otherwise press FAIL.\";\n+\n+        JTextArea textArea = new JTextArea(\"some text to edit\");\n+        JLabel label = new JLabel(textArea.getText().length() + \" chars\");\n+        label.setLabelFor(textArea);\n+        textArea.setEditable(true);\n+        textArea.addKeyListener(new KeyAdapter() {\n+            @Override\n+            public void keyReleased(KeyEvent e) {\n+                label.setText(String.valueOf(textArea.getText().length()) + \" chars\");\n+            }\n+        });\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(textArea);\n+        panel.add(label);\n+        exceptionString = \"Editable text area test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createTextPane() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of text in JTextPane.\\n\\n\"\n+                + \"Turn screen reader on and press Tab to move to the text pane and press the arrow keys.\\n\\n\"\n+                + \"If you can hear text, tab further and press PASS, otherwise press FAIL.\";\n+\n+        String str = \"Line 1\\nLine 2\\nLine 3\";\n+        JTextPane textPane = new JTextPane();\n+        textPane.setEditable(false);\n+        textPane.setText(str);\n+        JTextArea textArea = new JTextArea();\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(textPane);\n+        exceptionString = \"Simple text pane test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createHTMLTextPane() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of html text in JTextPane.\\n\\n\"\n+                + \"Turn screen reader on and press Tab to move to the text pane and press the arrow keys.\\n\\n\"\n+                + \"If you can hear text, tab further and press PASS, otherwise press FAIL.\";\n+\n+        String str = \"<html><h1>Header<\/h1><ul><li>Item 1<\/li><li>Item 2<\/li><li>Item 3<\/li><\/ul><\/html>\";\n+        JTextPane textPane = new JTextPane();\n+        textPane.setEditable(false);\n+        textPane.setContentType(\"text\/html\");\n+        textPane.setText(str);\n+        JTextArea textArea = new JTextArea();\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(textPane);\n+        exceptionString = \"HTML text pane test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    private void createEditableTextPane() {\n+        AccessibleComponentTest.INSTRUCTIONS = \"INSTRUCTIONS:\\n\"\n+                + \"Check a11y of editable JTextPane.\\n\\n\"\n+                + \"Turn screen reader on and press Tab to move to the text pane and type some characters.\\n\\n\"\n+                + \"If you can hear input results according to your screen reader settings, tab further and press PASS, otherwise press FAIL.\";\n+\n+        JTextPane textPane = new JTextPane();\n+        textPane.setText(\"some text to edit\");\n+        JLabel label = new JLabel(textPane.getText().length() + \" chars\");\n+        label.setLabelFor(textPane);\n+        textPane.addKeyListener(new KeyAdapter() {\n+            @Override\n+            public void keyReleased(KeyEvent e) {\n+                label.setText(String.valueOf(textPane.getText().length()) + \" chars\");\n+            }\n+        });\n+\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new FlowLayout());\n+        panel.add(textPane);\n+        panel.add(label);\n+        exceptionString = \"Editable text pane test failed!\";\n+        super.createUI(panel, \"AccessibleTextTest\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        AccessibleTextTest test = new AccessibleTextTest();\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createSimpleLabel);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createOneLineTexField);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createPassField);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createNamedTextField);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createTextArea);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createEditableTextArea);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createTextPane);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createHTMLTextPane);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+\n+        countDownLatch = test.createCountDownLatch();\n+        SwingUtilities.invokeAndWait(test::createEditableTextPane);\n+        AccessibleComponentTest.countDownLatch.await(15, TimeUnit.MINUTES);\n+        if (!testResult) {\n+            throw new RuntimeException(exceptionString);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/a11y\/AccessibleTextTest.java","additions":293,"deletions":0,"binary":false,"changes":293,"status":"added"}]}