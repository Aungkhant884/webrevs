{"files":[{"patch":"@@ -623,2 +623,0 @@\n-java\/nio\/channels\/FileChannel\/Transfer2GPlus.java               8272047 linux-aarch64\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,2 +50,0 @@\n-    private static final int LINUX_MAX_TRANSFER_SIZE = 0x7ffff000;\n-\n@@ -86,2 +84,2 @@\n-                long n;\n-                if ((n = srcCh.transferTo(0, LENGTH, dstCh)) < LENGTH) {\n+                long total = 0L;\n+                if ((total = srcCh.transferTo(0, LENGTH, dstCh)) < LENGTH) {\n@@ -89,1 +87,1 @@\n-                        throw new RuntimeException(\"Transfer too small: \" + n);\n+                        throw new RuntimeException(\"Transfer too small: \" + total);\n@@ -91,4 +89,9 @@\n-                    if (n != 0x7ffff000)\n-                        throw new RuntimeException(\"Unexpected transfer size: \" + n);\n-                    if ((n += srcCh.transferTo(n, LENGTH, dstCh)) != LENGTH)\n-                        throw new RuntimeException(\"Unexpected total size: \" + n);\n+                    \/\/ If this point is reached we're on Linux which cannot\n+                    \/\/ transfer all LENGTH bytes in one call to sendfile(2),\n+                    \/\/ so loop to get the rest.\n+                    do {\n+                        long n = srcCh.transferTo(total, LENGTH, dstCh);\n+                        if (n == 0)\n+                            break;\n+                        total += n;\n+                    } while (total < LENGTH);\n@@ -101,1 +104,1 @@\n-                System.out.println(\"Transferred \" + n + \" bytes\");\n+                System.out.println(\"Transferred \" + total + \" bytes\");\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfer2GPlus.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"}]}