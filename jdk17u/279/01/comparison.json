{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1161,0 +1161,6 @@\n+        if (data == null && !gfields.defaulted(\"elementData\") && count > 0) {\n+            \/\/ If elementData is null due to 8276665 throwing this exception will not\n+            \/\/ overwrite the original ClassNotFoundException exception.\n+            \/\/ That exception has been recorded and will be thrown from OIS.readObject.\n+            throw new ClassNotFoundException(\"elementData is null\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Vector.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273660\n+ * @summary The class of an element of a Vector may not be found; test that Vector allows\n+ *          the CNFE to be thrown.\n+ * @run testng VectorElementCNFE\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.io.StreamCorruptedException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Vector;\n+\n+import org.testng.annotations.Test;\n+\n+import org.testng.Assert;\n+\n+public class VectorElementCNFE {\n+\n+    \/**\n+     * Test a Vector holding a reference to a class instance that will not be found.\n+     * @throws IOException If any other exception occurs\n+     *\/\n+    @Test\n+    private static void test1() throws IOException {\n+\n+        Role role = new Role();\n+        Vector<Role> vector = new Vector<>();\n+        vector.add(role);\n+\n+        \/\/ Modify the byte stream to change the classname to be deserialized to\n+        \/\/ XectorElementCNFE$Role.\n+        byte[] bytes = writeObject(vector);\n+\n+        String s = new String(bytes, StandardCharsets.ISO_8859_1);  \/\/ Map bytes to chars\n+        int off = s.indexOf(Role.class.getName());\n+        Assert.assertTrue(off >= 0, \"classname Role not found\");\n+\n+        System.out.println(\"Clasname Role offset: \" + off);\n+        bytes[off] = (byte) 'X';  \/\/ replace V with X -> Class not found\n+\n+        \/\/ Deserialize the Vector expecting a ClassNotFoundException\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes));\n+        try {\n+            Object obj = in.readObject();\n+            System.out.println(\"Read: \" + obj);\n+            Assert.fail(\"Should not reach here, an exception should always occur\");\n+        } catch (ClassNotFoundException cnfe) {\n+            \/\/ Expected ClassNotFoundException\n+            String expected = \"XectorElementCNFE$Role\";\n+            Assert.assertEquals(expected, cnfe.getMessage(), \"Wrong classname\");\n+            System.out.println(\"Normal: \" + cnfe);\n+        }\n+        \/\/ Other exceptions cause the test to fail\n+    }\n+\n+    \/**\n+     * Test deserializing a Vector in which there is no \"elementData\" field.\n+     * @throws IOException If any other exception occurs\n+     *\/\n+    @Test\n+    private static void test2() throws IOException {\n+\n+        Role role = new Role();\n+        Vector<Role> vector = new Vector<>();\n+        vector.add(role);\n+\n+        \/\/ Modify the byte stream effectively remove the \"elementData\" field\n+        \/\/ by changing fieldName to be deserialized to \"XelementData\".\n+        byte[] bytes = writeObject(vector);\n+\n+        String s = new String(bytes, StandardCharsets.ISO_8859_1);  \/\/ Map bytes to chars\n+        int off = s.indexOf(\"elementData\");\n+        Assert.assertTrue(off >= 0, \"field elementData not found\");\n+\n+        System.out.println(\"elementData offset: \" + off);\n+        bytes[off] = (byte) 'X';  \/\/ replace 'e' with X -> field elementData not found\n+\n+        \/\/ Deserialize the Vector expecting a StreamCorruptedException\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes));\n+        try {\n+            Object obj = in.readObject();\n+            System.out.println(\"Read: \" + obj);\n+            Assert.fail(\"Should not reach here, an exception should always occur\");\n+        } catch (StreamCorruptedException sce) {\n+            \/\/ Expected StreamCorruptedException\n+            String expected = \"Inconsistent vector internals\";\n+            Assert.assertEquals(expected, sce.getMessage(), \"Wrong exception message\");\n+            System.out.println(\"Normal: \" + sce);\n+        } catch (ClassNotFoundException cnfe) {\n+            Assert.fail(\"CNFE not expected\", cnfe);\n+        }\n+        \/\/ Other exceptions cause the test to fail\n+    }\n+\n+    private static byte[] writeObject(Object o) throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try (ObjectOutputStream os = new ObjectOutputStream(baos)) {\n+            os.writeObject(o);\n+        }\n+        return baos.toByteArray();\n+    }\n+\n+    static class Role implements Serializable {\n+        private static final long serialVersionUID = 0L;\n+\n+        Role() {}\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Vector\/VectorElementCNFE.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}