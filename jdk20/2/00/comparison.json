{"files":[{"patch":"@@ -611,0 +611,9 @@\n+        return parse(filename, content, false);\n+    }\n+\n+    \/** Parse contents of input stream.\n+     *  @param filename     The name of the file from which input stream comes.\n+     *  @param content      The characters to be parsed.\n+     *  @param silent       true if TaskListeners should not be notified\n+     *\/\n+    private JCCompilationUnit parse(JavaFileObject filename, CharSequence content, boolean silent) {\n@@ -617,1 +626,1 @@\n-            if (!taskListener.isEmpty()) {\n+            if (!taskListener.isEmpty() && !silent) {\n@@ -633,1 +642,1 @@\n-        if (content != null && !taskListener.isEmpty()) {\n+        if (content != null && !taskListener.isEmpty() && !silent) {\n@@ -1803,1 +1812,1 @@\n-            JCTree.JCCompilationUnit t = parse(fo, fo.getCharContent(false));\n+            JCTree.JCCompilationUnit t = parse(fo, fo.getCharContent(false), true);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8154283 8167320 8171098 8172809 8173068 8173117 8176045 8177311 8241519\n+ * @bug 8154283 8167320 8171098 8172809 8173068 8173117 8176045 8177311 8241519 8297988\n@@ -68,0 +68,2 @@\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskListener;\n@@ -72,0 +74,1 @@\n+import java.util.ArrayList;\n@@ -1050,0 +1053,99 @@\n+    @Test \/\/JDK-8297988\n+    public void testExportedNameCheckFromSourceNoEvent(Path base) throws Exception {\n+        \/\/when validating \"exports\", javac may parse source(s) from the package to check their\n+        \/\/package name. The AST produced by this parse are thrown away, so listeners should not\n+        \/\/be notified:\n+        Path src = base.resolve(\"src\");\n+        Path m = src.resolve(\"m\");\n+        tb.writeJavaFiles(m,\n+                          \"\"\"\n+                          module m {\n+                              exports test;\n+                          }\n+                          \"\"\",\n+                          \"\"\"\n+                          package test;\n+                          public class Test {}\n+                          \"\"\",\n+                          \"\"\"\n+                          package impl;\n+                          public class Impl {\n+                              void t() {\n+                                  test.Test t;\n+                              }\n+                          }\n+                          \"\"\");\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        record TestCase(Path[] files, String... expectedLog){}\n+\n+        TestCase[] testCases = new TestCase[] {\n+            new TestCase(new Path[] {m.resolve(\"module-info.java\")},\n+                         \"COMPILATION:started:<none>\",\n+                         \"PARSE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"PARSE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ENTER:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ENTER:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ANALYZE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ANALYZE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"COMPILATION:finished:<none>\"),\n+            new TestCase(new Path[] {m.resolve(\"module-info.java\"),\n+                                     m.resolve(\"impl\").resolve(\"Impl.java\")},\n+                         \"COMPILATION:started:<none>\",\n+                         \"PARSE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"PARSE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"PARSE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/impl\/Impl.java\",\n+                         \"PARSE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/impl\/Impl.java\",\n+                         \"ENTER:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ENTER:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/impl\/Impl.java\",\n+                         \"ENTER:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ENTER:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/impl\/Impl.java\",\n+                         \"ANALYZE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ANALYZE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/module-info.java\",\n+                         \"ANALYZE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/impl\/Impl.java\",\n+                         \"PARSE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/test\/Test.java\",\n+                         \"PARSE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/test\/Test.java\",\n+                         \"ENTER:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/test\/Test.java\",\n+                         \"ENTER:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/test\/Test.java\",\n+                         \"ANALYZE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/impl\/Impl.java\",\n+                         \"ANALYZE:started:testExportedNameCheckFromSourceNoEvent\/src\/m\/test\/Test.java\",\n+                         \"ANALYZE:finished:testExportedNameCheckFromSourceNoEvent\/src\/m\/test\/Test.java\",\n+                         \"COMPILATION:finished:<none>\")\n+        };\n+\n+        for (TestCase tc : testCases) {\n+            List<String> log = new ArrayList<>();\n+\n+            new JavacTask(tb)\n+                    .outdir(classes)\n+                    .options(\"--source-path\", m.toString(),\n+                             \"-XDshould-stop.ifNoError=FLOW\")\n+                    .callback(task -> {\n+                        task.addTaskListener(new TaskListener() {\n+                            @Override\n+                            public void started(TaskEvent e) {\n+                                record(e, \"started\");\n+                            }\n+                            @Override\n+                            public void finished(TaskEvent e) {\n+                                record(e, \"finished\");\n+                            }\n+                            private void record(TaskEvent e, String phase) {\n+                                JavaFileObject source = e.getSourceFile();\n+                                String sourceName = source != null ? source.getName() : \"<none>\";\n+                                log.add(e.getKind() + \":\" + phase + \":\" + sourceName);\n+                            }\n+                        });\n+                    })\n+                    .files(tc.files)\n+                    .run()\n+                    .writeAll();\n+\n+            if (!List.of(tc.expectedLog).equals(log)) {\n+                throw new AssertionError(\"Unexpected log, got: \" + log +\n+                                         \", expected: \" + List.of(tc.expectedLog));\n+            }\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/modules\/EdgeCases.java","additions":103,"deletions":1,"binary":false,"changes":104,"status":"modified"}]}