{"files":[{"patch":"@@ -593,8 +593,4 @@\n-                if (c.caseKind == CaseTree.CaseKind.STATEMENT) {\n-                    previousCompletesNormally = c.completesNormally;\n-                } else {\n-                    previousCompletesNormally = false;\n-                    JCBreak brk = make.at(TreeInfo.endPos(c.stats.last())).Break(null);\n-                    brk.target = tree;\n-                    c.stats = c.stats.append(brk);\n-                }\n+                previousCompletesNormally =\n+                        c.caseKind == CaseTree.CaseKind.STATEMENT &&\n+                        c.completesNormally;\n+                appendBreakIfNeeded(tree, c);\n@@ -645,0 +641,8 @@\n+    private void appendBreakIfNeeded(JCTree switchTree, JCCase c) {\n+        if (c.caseKind == CaseTree.CaseKind.RULE) {\n+            JCBreak brk = make.at(TreeInfo.endPos(c.stats.last())).Break(null);\n+            brk.target = switchTree;\n+            c.stats = c.stats.append(brk);\n+        }\n+    }\n+\n@@ -743,0 +747,1 @@\n+                        appendBreakIfNeeded(currentSwitch, accummulated);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8291769\n+ * @bug 8291769 8300195\n@@ -28,0 +28,1 @@\n+ * @enablePreview\n@@ -37,0 +38,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -38,0 +40,5 @@\n+import java.io.PrintStream;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.charset.StandardCharsets;\n@@ -41,1 +48,1 @@\n-import java.util.List;\n+import java.util.Objects;\n@@ -201,0 +208,99 @@\n+    @Test\n+    public void testRuleCases(Path base) throws Exception {\n+        doTestRun(base,\n+               new String[0],\n+               \"\"\"\n+               package test;\n+               public class Test {\n+                   public static void main(String... args) {\n+                       System.out.println(test(new R(\"a\")));\n+                       System.out.println(test(new R(3)));\n+                       System.out.println(test(new R(new R(\"a\"))));\n+                       System.out.println(test(new R(new R(3))));\n+                   }\n+                   public static int test(Object obj) {\n+                       int res;\n+                       switch (obj) {\n+                           case R(String s) -> res = s.length();\n+                           case R(Integer i) -> res = i;\n+                           case R(R(String s)) -> res = 10 + s.length();\n+                           case R(R(Integer i)) -> res = 10 + i;\n+                           default -> res = -1;\n+                       }\n+                       return res;\n+                   }\n+                   record R(Object o) {}\n+               }\n+               \"\"\",\n+               output -> {\n+                   String expectedOutput = \"\"\"\n+                                           1\n+                                           3\n+                                           11\n+                                           13\n+                                           \"\"\";\n+                   if (!Objects.equals(output, expectedOutput)) {\n+                       throw new AssertionError(\"Unexpected output,\" +\n+                                                \" expected: \" + expectedOutput +\n+                                                \" actual: \" + output);\n+                   }\n+               });\n+    }\n+\n+    private void doTestRun(Path base, String[] libraryCode, String testCode, Consumer<String> validate) throws Exception {\n+        Path current = base.resolve(\".\");\n+        Path libClasses = current.resolve(\"libClasses\");\n+\n+        Files.createDirectories(libClasses);\n+\n+        if (libraryCode.length != 0) {\n+            Path libSrc = current.resolve(\"lib-src\");\n+\n+            for (String code : libraryCode) {\n+                tb.writeJavaFiles(libSrc, code);\n+            }\n+\n+            new JavacTask(tb)\n+                    .options(\"--enable-preview\",\n+                             \"-source\", JAVA_VERSION)\n+                    .outdir(libClasses)\n+                    .files(tb.findJavaFiles(libSrc))\n+                    .run();\n+        }\n+\n+        Path src = current.resolve(\"src\");\n+        tb.writeJavaFiles(src, testCode);\n+\n+        Path classes = current.resolve(\"libClasses\");\n+\n+        Files.createDirectories(libClasses);\n+\n+        var log =\n+                new JavacTask(tb)\n+                    .options(\"--enable-preview\",\n+                             \"-source\", JAVA_VERSION,\n+                             \"-XDrawDiagnostics\",\n+                             \"-Xlint:-preview\",\n+                             \"--class-path\", libClasses.toString(),\n+                             \"-XDshould-stop.at=FLOW\")\n+                    .outdir(classes)\n+                    .files(tb.findJavaFiles(src))\n+                    .run(Task.Expect.SUCCESS)\n+                    .writeAll();\n+\n+        ClassLoader cl = new URLClassLoader(new URL[] {classes.toUri().toURL()});\n+        Class<?> testClass = cl.loadClass(\"test.Test\");\n+        Method main = testClass.getMethod(\"main\", String[].class);\n+        PrintStream prevOut = System.out;\n+        var data = new ByteArrayOutputStream();\n+        try (var outStream = new PrintStream(data, true, StandardCharsets.UTF_8)) {\n+            System.setOut(outStream);\n+            main.invoke(null, (Object) new String[0]);\n+        } finally {\n+            System.setOut(prevOut);\n+        }\n+        String output = new String(data.toByteArray(), StandardCharsets.UTF_8);\n+        output = output.replaceAll(\"\\\\R\", \"\\n\");\n+        validate.accept(output);\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternDesugaring.java","additions":109,"deletions":3,"binary":false,"changes":112,"status":"modified"}]}