{"files":[{"patch":"@@ -305,1 +305,22 @@\n-com.sun.management.jmxremote.serial.filter.pattern=java.lang.*;java.math.BigInteger;java.math.BigDecimal;java.util.*;javax.management.openmbean.*;javax.management.ObjectName;java.rmi.MarshalledObject;javax.security.auth.Subject;!*\n+#\n+#   Ending with !* ensures we reject classes which are otherwise unmatched.\n+com.sun.management.jmxremote.serial.filter.pattern=\\\n+java.lang.*;\\\n+java.lang.reflect.Proxy;\\\n+java.math.BigInteger;\\\n+java.math.BigDecimal;\\\n+java.util.*;\\\n+javax.management.*;\\\n+javax.management.modelmbean.*;\\\n+javax.management.monitor.*;\\\n+javax.management.openmbean.*;\\\n+javax.management.relation.*;\\\n+javax.management.remote.*;\\\n+javax.management.remote.rmi.*;\\\n+javax.management.timer.*;\\\n+javax.rmi.ssl.*;\\\n+java.rmi.MarshalledObject;\\\n+java.rmi.dgc.*;\\\n+java.rmi.server.*;\\\n+javax.security.auth.Subject;\\\n+!*\n","filename":"src\/jdk.management.agent\/share\/conf\/management.properties","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8159377 8283093\n+ * @bug 8159377 8283093 8299891\n@@ -51,0 +51,1 @@\n+import java.util.Set;\n@@ -52,0 +53,3 @@\n+import javax.management.Attribute;\n+import javax.management.AttributeList;\n+import javax.management.AttributeChangeNotification;\n@@ -54,0 +58,7 @@\n+import javax.management.ObjectInstance;\n+import javax.management.MBeanNotificationInfo;\n+import javax.management.Notification;\n+import javax.management.NotificationBroadcasterSupport;\n+import javax.management.NotificationListener;\n+import javax.management.Query;\n+import javax.management.QueryExp;\n@@ -76,0 +87,8 @@\n+\n+        public void setMyAttribute(boolean b);\n+\n+        public boolean getMyAttribute();\n+\n+        public void setMyAttribute2(String s);\n+\n+        public String getMyAttribute2();\n@@ -78,1 +97,6 @@\n-    public static class Test implements TestMBean {\n+    public static class Test extends NotificationBroadcasterSupport implements TestMBean {\n+\n+        boolean myAttribute;\n+        String myAttribute2;\n+\n+        private long sequenceNumber = 1;\n@@ -94,0 +118,35 @@\n+\n+        public void setMyAttribute(boolean b) {\n+            this.myAttribute = b;\n+            System.out.println(\"Invoked setMyAttribute\");\n+        }\n+\n+        public boolean getMyAttribute() {\n+            System.out.println(\"Invoked getMyAttribute\");\n+            return myAttribute;\n+        }\n+\n+        public void setMyAttribute2(String s) {\n+            String old = myAttribute2;\n+            this.myAttribute2 = s;\n+            Notification n = new AttributeChangeNotification(this, sequenceNumber++, System.currentTimeMillis(),\n+                                                             \"String attribute changed\", \"myAttribute2\", \"String\",\n+                                                             old, this.myAttribute2);\n+            sendNotification(n);\n+            System.out.println(\"Invoked setMyAttribute2\");\n+        }\n+\n+        public String getMyAttribute2() {\n+            System.out.println(\"Invoked getMyAttribute2\");\n+            return myAttribute2;\n+        }\n+\n+        @Override\n+        public MBeanNotificationInfo[] getNotificationInfo() {\n+            System.out.println(\"Invoked getNotificationInfo\");\n+            String[] types = new String[] { AttributeChangeNotification.ATTRIBUTE_CHANGE };\n+            String name = AttributeChangeNotification.class.getName();\n+            String description = \"An attribute of this MBean has changed\";\n+            MBeanNotificationInfo info = new MBeanNotificationInfo(types, name, description);\n+            return new MBeanNotificationInfo[] {info};\n+        }\n@@ -175,1 +234,1 @@\n-        testDefaultAgent(propertyFile, null);\n+        testDefaultAgent(propertyFile, null, true \/* test operations *\/);\n@@ -178,1 +237,5 @@\n-    private static void testDefaultAgent(String propertyFile, String additionalArgument) throws Exception {\n+    private static void testDefaultAgent(String propertyFile, boolean testOperations) throws Exception {\n+        testDefaultAgent(propertyFile, null, testOperations);\n+    }\n+\n+    private static void testDefaultAgent(String propertyFile, String additionalArgument, boolean testOperations) throws Exception {\n@@ -181,2 +244,3 @@\n-            System.out.println(\"Attempting testDefaultAgent(\" +\n-                               (propertyFile != null ? propertyFile : \"no properties\")\n+            System.out.println(\"Attempting testDefaultAgent(\"\n+                               + (propertyFile != null ? propertyFile : \"no properties\")\n+                               + \" testOperations=\" + testOperations\n@@ -185,1 +249,1 @@\n-                testDefaultAgent(propertyFile, additionalArgument, port);\n+                testDefaultAgent(propertyFile, additionalArgument, port, testOperations);\n@@ -196,1 +260,5 @@\n-    private static void testDefaultAgent(String propertyFile, String additionalArgument, int port) throws Exception {\n+    \/**\n+      * Run the test app and connect. Test MBean Operations if the boolean testOperations is true, otherwise\n+      * test other usages (Attributes, Query)\n+      *\/\n+    private static void testDefaultAgent(String propertyFile, String additionalArgument, int port, boolean testOperations) throws Exception {\n@@ -222,1 +290,5 @@\n-            testMBeanOperations(url);\n+            if (testOperations) {\n+                testMBeanOperations(url);\n+            } else {\n+                testMBeanOtherClasses(url);\n+            }\n@@ -269,1 +341,1 @@\n-            \/\/ filter DefaultAgentFilterTest$MyTestObject\n+            \/\/ Properties file filter blocks DefaultAgentFilterTest$MyTestObject\n@@ -307,0 +379,8 @@\n+        try {\n+            \/\/ Test Attributes and Query work by default:\n+            testDefaultAgent(null \/* no properties file *\/,  false \/* not testing operations *\/);\n+        } catch (Exception ex) {\n+            System.out.println(ex);\n+            System.out.println(\"----\\tTest FAILED !!\");\n+            throw ex;\n+        }\n@@ -311,1 +391,2 @@\n-                             + \"java.rmi.MarshalledObject;javax.security.auth.Subject;DefaultAgentFilterTest$MyTestObject;!*\\\"\");\n+                             + \"java.rmi.MarshalledObject;javax.security.auth.Subject;DefaultAgentFilterTest$MyTestObject;!*\\\"\",\n+                             true \/* test operations *\/);\n@@ -349,0 +430,43 @@\n+\n+            System.out.println(\"Done testMBeanOperations\");\n+        }\n+    }\n+\n+    private static void testMBeanOtherClasses(JMXServiceURL serverUrl) throws Exception {\n+        Map<String, Object> clientEnv = new HashMap<>(1);\n+        ObjectName name = new ObjectName(\"jtreg:type=Test\");\n+        try (JMXConnector client = JMXConnectorFactory.connect(serverUrl, clientEnv)) {\n+            MBeanServerConnection conn = client.getMBeanServerConnection();\n+\n+            \/\/ Set operations send types to the server and can conflict with the filter.\n+            \/\/ Attribute set operations require javax.management.Attribute.\n+            conn.setAttribute(name, new Attribute(\"MyAttribute\", Boolean.TRUE));\n+            boolean b = (Boolean) conn.getAttribute(name, \"MyAttribute\");\n+            if (b != true) {\n+                throw new RuntimeException(\"Attribute not as expected, got: \" + b);\n+            }\n+            conn.setAttribute(name, new Attribute(\"MyAttribute2\", \"my string value\"));\n+            String s = (String) conn.getAttribute(name, \"MyAttribute2\");\n+            if (!s.equals(\"my string value\")) {\n+                throw new RuntimeException(\"Attribute not as expected, got: \" + s);\n+            }\n+\n+            \/\/ Use javax.management.AttributeList:\n+            AttributeList attrs = conn.getAttributes(name, new String [] { \"MyAttribute\", \"MyAttribute2\" });\n+            attrs = conn.setAttributes(name, attrs); \/\/ Setting fails if filter too restrictive\n+\n+            \/\/ Sending a Query uses several classes from javax.management:\n+            QueryExp exp = Query.isInstanceOf(Query.value(\"notImportantClassName\"));\n+            Set<ObjectInstance> queryResult = conn.queryMBeans(name, exp);\n+\n+            \/\/ Notification:\n+            conn.addNotificationListener(name, new NotificationListener() {\n+                public void handleNotification(Notification notification, Object handback) {\n+                    System.out.println(\"Received notification: \" +  notification);\n+                } }, null,  null);\n+            \/\/ Trigger a Notification:\n+            conn.setAttribute(name, new Attribute(\"MyAttribute2\", \"my new string value\"));\n+            \/\/ Receiving the AttributeChangeNotification is not truly important for this test:\n+            try { Thread.sleep(5000); } catch (InterruptedException ie) { }\n+\n+            System.out.println(\"Done testMBeanOtherClasses\");\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/connection\/DefaultAgentFilterTest.java","additions":136,"deletions":12,"binary":false,"changes":148,"status":"modified"}]}