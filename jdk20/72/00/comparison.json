{"files":[{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8287600 8291266 8299207\n+ * @requires os.family == \"mac\"\n+ * @summary [macosx] Some primitives do not render in metal pipeline\n+ * @run main DrawPrimitivesTest\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Point;\n+import java.awt.RenderingHints;\n+import java.awt.Robot;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public abstract class DrawPrimitivesTest extends JFrame {\n+    private final static int W = 800;\n+    private final static int H = 800;\n+    private final static Color[] color = { Color.RED, Color.BLUE, Color.GREEN};\n+    private final static int COLOR_TOLERANCE = 10;\n+    private final CountDownLatch latchRender = new CountDownLatch(1);\n+    private volatile int frameX0 = 0;\n+    private volatile int frameY0 = 0;\n+    private final String name;\n+\n+\n+    private static boolean isAlmostEqual(Color c1, Color c2) {\n+        return Math.abs(c1.getRed() - c2.getRed()) < COLOR_TOLERANCE &&\n+                Math.abs(c1.getGreen() - c2.getGreen()) < COLOR_TOLERANCE &&\n+                Math.abs(c1.getBlue() - c2.getBlue()) < COLOR_TOLERANCE;\n+\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException, AWTException, InvocationTargetException {\n+        new DrawPrimitivesTest(\"drawLine\") {\n+            public void renderPrimitive(Graphics2D g2d, int x0, int y0, int w, int h) {\n+                g2d.drawLine(x0, y0, x0+w, y0+h);\n+            }\n+        }.runTest();\n+\n+        new DrawPrimitivesTest(\"fillRect\") {\n+            public void renderPrimitive(Graphics2D g2d, int x0, int y0, int w, int h) {\n+                g2d.fillRect(x0, y0, w, h);\n+            }\n+        }.runTest();\n+\n+        new DrawPrimitivesTest(\"fillOvalAA\") {\n+            public void renderPrimitive(Graphics2D g2d, int x0, int y0, int w, int h) {\n+                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+                g2d.fillOval(x0, y0, w, h);\n+            }\n+        }.runTest();\n+    }\n+\n+    public abstract void renderPrimitive(Graphics2D g2d, int x0, int y0, int w, int h);\n+\n+    public DrawPrimitivesTest(String name) {\n+        super();\n+        this.name = name;\n+    }\n+\n+    public void runTest() throws InterruptedException, InvocationTargetException, AWTException {\n+        SwingUtilities.invokeLater(() -> {\n+            add(new JPanel() {\n+                @Override\n+                public Dimension getPreferredSize() {\n+                    return new Dimension(W, H);\n+                }\n+\n+                @Override\n+                public void paintComponent(Graphics g) {\n+                    Graphics2D g2d = (Graphics2D) g;\n+                    g2d.setColor(Color.YELLOW);\n+                    int c = 0;\n+                    for (int i = 0; i < W; i += 10) {\n+                        for (int j = 0; j < H; j += 10) {\n+                            c = (c + 1) % color.length;\n+                            g2d.setColor(color[c]);\n+                            renderPrimitive(g2d, i, j, 10, 10);\n+                        }\n+                    }\n+                    Point p = getLocationOnScreen();\n+                    frameX0 = p.x;\n+                    frameY0 = p.y - getInsets().top;\n+\n+                    latchRender.countDown();\n+                }\n+            });\n+            setPreferredSize(new Dimension(W, H));\n+            pack();\n+            setVisible(true);\n+        });\n+\n+        latchRender.await();\n+        Thread.sleep(1000);\n+\n+        Robot robot = new Robot();\n+\n+        boolean hasEmptyContent = true;\n+        l:for (int i = frameX0 + W\/3; i < frameX0 + (2*W)\/3; i++) {\n+            for (int j = 0; j < 10; j += 2) {\n+                if (isAlmostEqual(robot.getPixelColor(i, frameY0 + H \/ 2 + j), Color.RED)) {\n+                    hasEmptyContent = false;\n+                    break l;\n+                }\n+            }\n+        }\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            setVisible(false);\n+            dispose();\n+        });\n+\n+        if (hasEmptyContent) {\n+            throw new RuntimeException(name + \": Empty content\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawPrimitivesTest.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"}]}