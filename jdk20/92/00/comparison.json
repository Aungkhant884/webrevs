{"files":[{"patch":"@@ -1737,0 +1737,1 @@\n+     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment.\n@@ -2082,0 +2083,1 @@\n+     * @throws UnsupportedOperationException if {@code value} is not a {@linkplain #isNative() native} segment.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7934,1 +7934,1 @@\n-     * Finally, in all other cases, we say that a memory access operation is <em>misaligned<\/em>; in such cases an\n+     * In all other cases, we say that a memory access operation is <em>misaligned<\/em>; in such cases an\n@@ -7936,0 +7936,3 @@\n+     * <p>\n+     * Finally, if {@code T} is {@code MemorySegment} all write access modes throw {@link IllegalArgumentException}\n+     * unless the value to be written is a {@linkplain MemorySegment#isNative() native} memory segment.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n@@ -65,2 +66,2 @@\n-            ADDRESS_TO_LONG = lookup.findVirtual(MemorySegment.class, \"address\",\n-                    MethodType.methodType(long.class));\n+            ADDRESS_TO_LONG = lookup.findStatic(SharedUtils.class, \"unboxSegment\",\n+                    MethodType.methodType(long.class, MemorySegment.class));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-    static long unboxSegment(MemorySegment segment) {\n+    public static long unboxSegment(MemorySegment segment) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.lang.foreign.SegmentScope;\n@@ -135,0 +136,16 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Heap segment not allowed.*\")\n+    public void badHeapSegmentSet() {\n+        MemorySegment targetSegment = MemorySegment.allocateNative(ValueLayout.ADDRESS.byteSize(), SegmentScope.auto());\n+        MemorySegment segment = MemorySegment.ofArray(new byte[]{ 0, 1, 2 });\n+        targetSegment.set(ValueLayout.ADDRESS, 0, segment); \/\/ should throw\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class,\n+            expectedExceptionsMessageRegExp = \".*Heap segment not allowed.*\")\n+    public void badHeapSegmentSetAtIndex() {\n+        MemorySegment targetSegment = MemorySegment.allocateNative(ValueLayout.ADDRESS.byteSize(), SegmentScope.auto());\n+        MemorySegment segment = MemorySegment.ofArray(new byte[]{ 0, 1, 2 });\n+        targetSegment.setAtIndex(ValueLayout.ADDRESS, 0, segment); \/\/ should throw\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}