{"files":[{"patch":"@@ -2151,9 +2151,2 @@\n-      \/\/ cache can grow so we have to be more careful\n-      if (Threads::number_of_threads() == 0 ||\n-          SafepointSynchronize::is_at_safepoint()) {\n-        \/\/ we're single threaded or at a safepoint - no locking needed\n-        get_jmethod_id_length_value(jmeths, idnum, &length, &id);\n-      } else {\n-        MutexLocker ml(JmethodIdCreation_lock, Mutex::_no_safepoint_check_flag);\n-        get_jmethod_id_length_value(jmeths, idnum, &length, &id);\n-      }\n+      MutexLocker ml(JmethodIdCreation_lock, Mutex::_no_safepoint_check_flag);\n+      get_jmethod_id_length_value(jmeths, idnum, &length, &id);\n@@ -2169,2 +2162,2 @@\n-    \/\/ This function can be called by the VMThread so we have to do all\n-    \/\/ things that might block on a safepoint before grabbing the lock.\n+    \/\/ This function can be called by the VMThread or GC worker threads so we\n+    \/\/ have to do all things that might block on a safepoint before grabbing the lock.\n@@ -2189,18 +2182,1 @@\n-    jmethodID new_id = NULL;\n-    if (method_h->is_old() && !method_h->is_obsolete()) {\n-      \/\/ The method passed in is old (but not obsolete), we need to use the current version\n-      Method* current_method = method_with_idnum((int)idnum);\n-      assert(current_method != NULL, \"old and but not obsolete, so should exist\");\n-      new_id = Method::make_jmethod_id(class_loader_data(), current_method);\n-    } else {\n-      \/\/ It is the current version of the method or an obsolete method,\n-      \/\/ use the version passed in\n-      new_id = Method::make_jmethod_id(class_loader_data(), method_h());\n-    }\n-\n-    if (Threads::number_of_threads() == 0 ||\n-        SafepointSynchronize::is_at_safepoint()) {\n-      \/\/ we're single threaded or at a safepoint - no locking needed\n-      id = get_jmethod_id_fetch_or_update(idnum, new_id, new_jmeths,\n-                                          &to_dealloc_id, &to_dealloc_jmeths);\n-    } else {\n+    {\n@@ -2208,0 +2184,12 @@\n+      jmethodID new_id = NULL;\n+      if (method_h->is_old() && !method_h->is_obsolete()) {\n+        \/\/ The method passed in is old (but not obsolete), we need to use the current version\n+        Method* current_method = method_with_idnum((int)idnum);\n+        assert(current_method != NULL, \"old and but not obsolete, so should exist\");\n+        new_id = Method::make_jmethod_id(class_loader_data(), current_method);\n+      } else {\n+        \/\/ It is the current version of the method or an obsolete method,\n+        \/\/ use the version passed in\n+        new_id = Method::make_jmethod_id(class_loader_data(), method_h());\n+      }\n+\n@@ -2257,3 +2245,1 @@\n-  assert(Threads::number_of_threads() == 0 ||\n-         SafepointSynchronize::is_at_safepoint() ||\n-         JmethodIdCreation_lock->owned_by_self(), \"sanity check\");\n+  assert(JmethodIdCreation_lock->owned_by_self(), \"sanity check\");\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":18,"deletions":32,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2168,12 +2168,7 @@\n-void Method::ensure_jmethod_ids(ClassLoaderData* loader_data, int capacity) {\n-  ClassLoaderData* cld = loader_data;\n-  if (!SafepointSynchronize::is_at_safepoint()) {\n-    \/\/ Have to add jmethod_ids() to class loader data thread-safely.\n-    \/\/ Also have to add the method to the list safely, which the lock\n-    \/\/ protects as well.\n-    MutexLocker ml(JmethodIdCreation_lock,  Mutex::_no_safepoint_check_flag);\n-    if (cld->jmethod_ids() == NULL) {\n-      cld->set_jmethod_ids(new JNIMethodBlock(capacity));\n-    } else {\n-      cld->jmethod_ids()->ensure_methods(capacity);\n-    }\n+void Method::ensure_jmethod_ids(ClassLoaderData* cld, int capacity) {\n+  \/\/ Have to add jmethod_ids() to class loader data thread-safely.\n+  \/\/ Also have to add the method to the list safely, which the lock\n+  \/\/ protects as well.\n+  MutexLocker ml(JmethodIdCreation_lock,  Mutex::_no_safepoint_check_flag);\n+  if (cld->jmethod_ids() == NULL) {\n+    cld->set_jmethod_ids(new JNIMethodBlock(capacity));\n@@ -2181,6 +2176,1 @@\n-    \/\/ At safepoint, we are single threaded and can set this.\n-    if (cld->jmethod_ids() == NULL) {\n-      cld->set_jmethod_ids(new JNIMethodBlock(capacity));\n-    } else {\n-      cld->jmethod_ids()->ensure_methods(capacity);\n-    }\n+    cld->jmethod_ids()->ensure_methods(capacity);\n@@ -2191,20 +2181,7 @@\n-jmethodID Method::make_jmethod_id(ClassLoaderData* loader_data, Method* m) {\n-  ClassLoaderData* cld = loader_data;\n-\n-  if (!SafepointSynchronize::is_at_safepoint()) {\n-    \/\/ Have to add jmethod_ids() to class loader data thread-safely.\n-    \/\/ Also have to add the method to the list safely, which the lock\n-    \/\/ protects as well.\n-    MutexLocker ml(JmethodIdCreation_lock,  Mutex::_no_safepoint_check_flag);\n-    if (cld->jmethod_ids() == NULL) {\n-      cld->set_jmethod_ids(new JNIMethodBlock());\n-    }\n-    \/\/ jmethodID is a pointer to Method*\n-    return (jmethodID)cld->jmethod_ids()->add_method(m);\n-  } else {\n-    \/\/ At safepoint, we are single threaded and can set this.\n-    if (cld->jmethod_ids() == NULL) {\n-      cld->set_jmethod_ids(new JNIMethodBlock());\n-    }\n-    \/\/ jmethodID is a pointer to Method*\n-    return (jmethodID)cld->jmethod_ids()->add_method(m);\n+jmethodID Method::make_jmethod_id(ClassLoaderData* cld, Method* m) {\n+  \/\/ Have to add jmethod_ids() to class loader data thread-safely.\n+  \/\/ Also have to add the method to the list safely, which the lock\n+  \/\/ protects as well.\n+  assert(JmethodIdCreation_lock->owned_by_self(), \"sanity check\");\n+  if (cld->jmethod_ids() == NULL) {\n+    cld->set_jmethod_ids(new JNIMethodBlock());\n@@ -2212,0 +2189,2 @@\n+  \/\/ jmethodID is a pointer to Method*\n+  return (jmethodID)cld->jmethod_ids()->add_method(m);\n@@ -2221,2 +2200,1 @@\n-void Method::destroy_jmethod_id(ClassLoaderData* loader_data, jmethodID m) {\n-  ClassLoaderData* cld = loader_data;\n+void Method::destroy_jmethod_id(ClassLoaderData* cld, jmethodID m) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":18,"deletions":40,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -777,2 +777,2 @@\n-  static jmethodID make_jmethod_id(ClassLoaderData* loader_data, Method* mh);\n-  static void destroy_jmethod_id(ClassLoaderData* loader_data, jmethodID mid);\n+  static jmethodID make_jmethod_id(ClassLoaderData* cld, Method* mh);\n+  static void destroy_jmethod_id(ClassLoaderData* cld, jmethodID mid);\n@@ -783,1 +783,1 @@\n-  static void ensure_jmethod_ids(ClassLoaderData* loader_data, int capacity);\n+  static void ensure_jmethod_ids(ClassLoaderData* cld, int capacity);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}