{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include <type_traits>\n@@ -64,1 +65,1 @@\n-  static void free_metadata(ClassLoaderData* loader_data, T md) {\n+  static void free_metadata(ClassLoaderData* loader_data, T* md) {\n@@ -68,1 +69,1 @@\n-      \/\/ Call metadata's deallocate function which will call deallocate fields\n+      \/\/ Call metadata's deallocate function which will deallocate fields and release_C_heap_structures\n@@ -72,0 +73,7 @@\n+      \/\/ Call the destructor. This is currently used for MethodData which has a member\n+      \/\/ that needs to be destructed to release resources. Most Metadata derived classes have noop\n+      \/\/ destructors and\/or cleanup using deallocate_contents.\n+      \/\/ T is a potentially const or volatile qualified pointer. Remove any const\n+      \/\/ or volatile so we can call the destructor of the type T points to.\n+      using U = std::remove_cv_t<T>;\n+      md->~U();\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -598,4 +598,4 @@\n-  \/\/ Can't release the constant pool here because the constant pool can be\n-  \/\/ deallocated separately from the InstanceKlass for default methods and\n-  \/\/ redefine classes.\n-  release_C_heap_structures(\/* release_constant_pool *\/ false);\n+  \/\/ Can't release the constant pool or MethodData C heap data here because the constant\n+  \/\/ pool can be deallocated separately from the InstanceKlass for default methods and\n+  \/\/ redefine classes.  MethodData can also be released separately.\n+  release_C_heap_structures(\/* release_sub_metadata *\/ false);\n@@ -2667,2 +2667,4 @@\n-\/\/ Called also by InstanceKlass::deallocate_contents, with false for release_constant_pool.\n-void InstanceKlass::release_C_heap_structures(bool release_constant_pool) {\n+\/\/ Called also by InstanceKlass::deallocate_contents, with false for releasing C heap\n+\/\/ data pointed to metadata that this InstanceKlass points to (the subordinate metadata\n+\/\/ releases its own C heap structures).\n+void InstanceKlass::release_C_heap_structures(bool release_sub_metadata) {\n@@ -2673,1 +2675,3 @@\n-  methods_do(method_release_C_heap_structures);\n+  if (release_sub_metadata) {\n+    methods_do(method_release_C_heap_structures);\n+  }\n@@ -2713,1 +2717,1 @@\n-  if (release_constant_pool) {\n+  if (release_sub_metadata) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1015,1 +1015,1 @@\n-  virtual void release_C_heap_structures(bool release_constant_pool = true);\n+  virtual void release_C_heap_structures(bool release_sub_metadata = true);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,4 +144,3 @@\n-#if INCLUDE_JVMCI\n-    FailedSpeculation::free_failed_speculations(method_data()->get_failed_speculations_address());\n-#endif\n-    \/\/ Destroy MethodData\n+    method_data()->release_C_heap_structures();\n+\n+    \/\/ Destroy MethodData embedded lock\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1824,0 +1824,10 @@\n+\n+void MethodData::deallocate_contents(ClassLoaderData* loader_data) {\n+  release_C_heap_structures();\n+}\n+\n+void MethodData::release_C_heap_structures() {\n+#if INCLUDE_JVMCI\n+  FailedSpeculation::free_failed_speculations(get_failed_speculations_address());\n+#endif\n+}\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2452,2 +2452,3 @@\n-  \/\/ Deallocation support - no metaspace pointer fields to deallocate\n-  void deallocate_contents(ClassLoaderData* loader_data) {}\n+  \/\/ Deallocation support\n+  void deallocate_contents(ClassLoaderData* loader_data);\n+  void release_C_heap_structures();\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}