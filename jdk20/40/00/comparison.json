{"files":[{"patch":"@@ -183,3 +183,1 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is specified, but does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1068,3 +1068,1 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is specified, but does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n@@ -1091,1 +1089,4 @@\n-     *\n+     * This method is <a href=\"package-summary.html#restricted\"><em>restricted<\/em><\/a>.\n+     * Restricted methods are unsafe, and, if used incorrectly, their use might crash\n+     * the JVM or, worse, silently result in memory corruption. Thus, clients should refrain from depending on\n+     * restricted methods, and use safe and supported functionalities, where possible.\n@@ -1100,3 +1101,1 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is specified, but does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n@@ -1143,3 +1142,1 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is specified, but does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -192,3 +192,1 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n@@ -218,3 +216,1 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is either absent, or does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -250,3 +250,1 @@\n-     * @throws IllegalCallerException if access to this method occurs from a module {@code M} and the command line option\n-     * {@code --enable-native-access} is specified, but does not mention the module name {@code M}, or\n-     * {@code ALL-UNNAMED} in case {@code M} is an unnamed module.\n+     * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/VaList.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -427,0 +427,1 @@\n+         * @throws IllegalCallerException If the caller is in a module that does not have native access enabled.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,3 @@\n+                    { MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddress\",\n+                            MethodType.methodType(MemorySegment.class, long.class, long.class)),\n+                            \"MemorySegment::ofAddress\/2\" },\n@@ -55,1 +58,4 @@\n-                            \"MemorySegment::ofAddressNative\" },\n+                            \"MemorySegment::ofAddress\/3\" },\n+                    { MethodHandles.lookup().findStatic(MemorySegment.class, \"ofAddress\",\n+                            MethodType.methodType(MemorySegment.class, long.class, long.class, SegmentScope.class, Runnable.class)),\n+                            \"MemorySegment::ofAddress\/4\" },\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}