{"files":[{"patch":"@@ -186,1 +186,1 @@\n-        return owner == thread;\n+        return owner == null || owner == thread;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -194,0 +194,19 @@\n+    @DataProvider(name = \"scopes\")\n+    public Object[][] scopes() {\n+        return new Object[][] {\n+                { SegmentScope.auto(), false },\n+                { SegmentScope.global(), false },\n+                { Arena.openConfined().scope(), true },\n+                { Arena.openShared().scope(), false }\n+        };\n+    }\n+\n+    @Test(dataProvider = \"scopes\")\n+    public void testIsAccessibleBy(SegmentScope scope, boolean isConfined) {\n+        assertTrue(scope.isAccessibleBy(Thread.currentThread()));\n+        assertTrue(scope.isAccessibleBy(new Thread()) != isConfined);\n+        MemorySegment segment = MemorySegment.ofAddress(0, 0, scope);\n+        assertTrue(segment.scope().isAccessibleBy(Thread.currentThread()));\n+        assertTrue(segment.scope().isAccessibleBy(new Thread()) != isConfined);\n+    }\n+\n@@ -267,1 +286,1 @@\n-        if (segment.scope().isAccessibleBy(Thread.currentThread())) {\n+        if (!segment.scope().isAccessibleBy(Thread.currentThread())) {\n@@ -269,3 +288,1 @@\n-            if (!(e instanceof IllegalStateException)) {\n-                throw e;\n-            }\n+            throw e;\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"}]}