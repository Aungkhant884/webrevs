{"files":[{"patch":"@@ -80,1 +80,1 @@\n-    final SegmentScope session;\n+    final SegmentScope scope;\n@@ -83,1 +83,1 @@\n-    AbstractMemorySegmentImpl(long length, boolean readOnly, SegmentScope session) {\n+    AbstractMemorySegmentImpl(long length, boolean readOnly, SegmentScope scope) {\n@@ -86,1 +86,1 @@\n-        this.session = session;\n+        this.scope = scope;\n@@ -89,1 +89,1 @@\n-    abstract AbstractMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope session);\n+    abstract AbstractMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope scope);\n@@ -95,1 +95,1 @@\n-        return dup(0, length, true, session);\n+        return dup(0, length, true, scope);\n@@ -116,1 +116,1 @@\n-        return dup(offset, newSize, readOnly, session);\n+        return dup(offset, newSize, readOnly, scope);\n@@ -362,1 +362,1 @@\n-        return session;\n+        return scope;\n@@ -367,1 +367,1 @@\n-        return (MemorySessionImpl)session;\n+        return (MemorySessionImpl)scope;\n@@ -484,1 +484,1 @@\n-        final SegmentScope bufferSession;\n+        final SegmentScope bufferScope;\n@@ -486,1 +486,1 @@\n-            bufferSession = bufferSegment.session;\n+            bufferScope = bufferSegment.scope;\n@@ -488,1 +488,1 @@\n-            bufferSession = MemorySessionImpl.heapSession(bb);\n+            bufferScope = MemorySessionImpl.heapSession(bb);\n@@ -511,1 +511,1 @@\n-            return new NativeMemorySegmentImpl(bbAddress + (pos << scaleFactor), size << scaleFactor, readOnly, bufferSession);\n+            return new NativeMemorySegmentImpl(bbAddress + (pos << scaleFactor), size << scaleFactor, readOnly, bufferScope);\n@@ -514,1 +514,1 @@\n-            return new MappedMemorySegmentImpl(bbAddress + pos, unmapper, size, readOnly, bufferSession);\n+            return new MappedMemorySegmentImpl(bbAddress + pos, unmapper, size, readOnly, bufferScope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    abstract HeapMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope session);\n+    abstract HeapMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope scope);\n@@ -102,1 +102,1 @@\n-        OfByte dup(long offset, long size, boolean readOnly, SegmentScope session) {\n+        OfByte dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n@@ -135,1 +135,1 @@\n-        OfChar dup(long offset, long size, boolean readOnly, SegmentScope session) {\n+        OfChar dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n@@ -168,1 +168,1 @@\n-        OfShort dup(long offset, long size, boolean readOnly, SegmentScope session) {\n+        OfShort dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n@@ -201,1 +201,1 @@\n-        OfInt dup(long offset, long size, boolean readOnly, SegmentScope session) {\n+        OfInt dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n@@ -234,1 +234,1 @@\n-        OfLong dup(long offset, long size, boolean readOnly, SegmentScope session) {\n+        OfLong dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n@@ -267,1 +267,1 @@\n-        OfFloat dup(long offset, long size, boolean readOnly, SegmentScope session) {\n+        OfFloat dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n@@ -300,1 +300,1 @@\n-        OfDouble dup(long offset, long size, boolean readOnly, SegmentScope session) {\n+        OfDouble dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/HeapMemorySegmentImpl.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,2 +46,2 @@\n-    public MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, boolean readOnly, SegmentScope session) {\n-        super(min, length, readOnly, session);\n+    public MappedMemorySegmentImpl(long min, UnmapperProxy unmapper, long length, boolean readOnly, SegmentScope scope) {\n+        super(min, length, readOnly, scope);\n@@ -54,1 +54,1 @@\n-                session == MemorySessionImpl.GLOBAL ? null : this);\n+                scope == MemorySessionImpl.GLOBAL ? null : this);\n@@ -58,2 +58,2 @@\n-    MappedMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope session) {\n-        return new MappedMemorySegmentImpl(min + offset, unmapper, size, readOnly, session);\n+    MappedMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n+        return new MappedMemorySegmentImpl(min + offset, unmapper, size, readOnly, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MappedMemorySegmentImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -178,3 +178,3 @@\n-    public static boolean sameOwnerThread(SegmentScope session1, SegmentScope session2) {\n-        return ((MemorySessionImpl) session1).ownerThread() ==\n-                ((MemorySessionImpl) session2).ownerThread();\n+    public static boolean sameOwnerThread(SegmentScope scope1, SegmentScope scope2) {\n+        return ((MemorySessionImpl) scope1).ownerThread() ==\n+                ((MemorySessionImpl) scope2).ownerThread();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/MemorySessionImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-    NativeMemorySegmentImpl(long min, long length, boolean readOnly, SegmentScope session) {\n-        super(length, readOnly, session);\n+    NativeMemorySegmentImpl(long min, long length, boolean readOnly, SegmentScope scope) {\n+        super(length, readOnly, scope);\n@@ -72,2 +72,2 @@\n-    NativeMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope session) {\n-        return new NativeMemorySegmentImpl(min + offset, size, readOnly, session);\n+    NativeMemorySegmentImpl dup(long offset, long size, boolean readOnly, SegmentScope scope) {\n+        return new NativeMemorySegmentImpl(min + offset, size, readOnly, scope);\n@@ -79,1 +79,1 @@\n-                session == MemorySessionImpl.GLOBAL ? null : this);\n+                scope == MemorySessionImpl.GLOBAL ? null : this);\n@@ -104,2 +104,2 @@\n-    public static MemorySegment makeNativeSegment(long byteSize, long byteAlignment, SegmentScope session) {\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl) session;\n+    public static MemorySegment makeNativeSegment(long byteSize, long byteAlignment, SegmentScope scope) {\n+        MemorySessionImpl sessionImpl = (MemorySessionImpl) scope;\n@@ -122,1 +122,1 @@\n-                false, session);\n+                false, scope);\n@@ -141,2 +141,2 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, SegmentScope session, Runnable action) {\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl) session;\n+    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, SegmentScope scope, Runnable action) {\n+        MemorySessionImpl sessionImpl = (MemorySessionImpl) scope;\n@@ -148,1 +148,1 @@\n-        return new NativeMemorySegmentImpl(min, byteSize, false, session);\n+        return new NativeMemorySegmentImpl(min, byteSize, false, scope);\n@@ -152,2 +152,2 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, SegmentScope session) {\n-        MemorySessionImpl sessionImpl = (MemorySessionImpl) session;\n+    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, SegmentScope scope) {\n+        MemorySessionImpl sessionImpl = (MemorySessionImpl) scope;\n@@ -155,1 +155,1 @@\n-        return new NativeMemorySegmentImpl(min, byteSize, false, session);\n+        return new NativeMemorySegmentImpl(min, byteSize, false, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/NativeMemorySegmentImpl.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-        private final SegmentScope session;\n+        private final SegmentScope scope;\n@@ -207,1 +207,1 @@\n-        private Context(SegmentAllocator allocator, SegmentScope session) {\n+        private Context(SegmentAllocator allocator, SegmentScope scope) {\n@@ -209,1 +209,1 @@\n-            this.session = session;\n+            this.scope = scope;\n@@ -216,2 +216,2 @@\n-        public SegmentScope session() {\n-            return session;\n+        public SegmentScope scope() {\n+            return scope;\n@@ -245,1 +245,1 @@\n-                public SegmentScope session() {\n+                public SegmentScope scope() {\n@@ -255,1 +255,1 @@\n-        public static Context ofSession() {\n+        public static Context ofScope() {\n@@ -279,1 +279,1 @@\n-            public SegmentScope session() {\n+            public SegmentScope scope() {\n@@ -681,2 +681,2 @@\n-     * Pops a 'long' from the operand stack, converts it to a 'MemorySegment', with the given size and memory session\n-     * (either the context session, or the global session), and pushes that onto the operand stack.\n+     * Pops a 'long' from the operand stack, converts it to a 'MemorySegment', with the given size and memory scope\n+     * (either the context scope, or the global scope), and pushes that onto the operand stack.\n@@ -684,1 +684,1 @@\n-    record BoxAddress(long size, boolean needsSession) implements Binding {\n+    record BoxAddress(long size, boolean needsScope) implements Binding {\n@@ -701,3 +701,3 @@\n-            SegmentScope session = needsSession ?\n-                    context.session() : SegmentScope.global();\n-            stack.push(NativeMemorySegmentImpl.makeNativeSegmentUnchecked((long) stack.pop(), size, session));\n+            SegmentScope scope = needsScope ?\n+                    context.scope() : SegmentScope.global();\n+            stack.push(NativeMemorySegmentImpl.makeNativeSegmentUnchecked((long) stack.pop(), size, scope));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/Binding.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    private static final String OF_SESSION_DESC = methodType(Binding.Context.class).descriptorString();\n+    private static final String OF_SCOPE_DESC = methodType(Binding.Context.class).descriptorString();\n@@ -85,1 +85,1 @@\n-    private static final String SESSION_DESC = methodType(SegmentScope.class).descriptorString();\n+    private static final String SCOPE_DESC = methodType(SegmentScope.class).descriptorString();\n@@ -297,1 +297,1 @@\n-            emitInvokeStatic(Binding.Context.class, \"ofSession\", OF_SESSION_DESC);\n+            emitInvokeStatic(Binding.Context.class, \"ofScope\", OF_SCOPE_DESC);\n@@ -439,1 +439,1 @@\n-                .anyMatch(Binding.BoxAddress::needsSession);\n+                .anyMatch(Binding.BoxAddress::needsScope);\n@@ -564,1 +564,1 @@\n-        emitInvokeVirtual(Binding.Context.class, \"session\", SESSION_DESC);\n+        emitInvokeVirtual(Binding.Context.class, \"scope\", SCOPE_DESC);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-    public static VaList newVaList(Consumer<VaList.Builder> actions, SegmentScope session) {\n+    public static VaList newVaList(Consumer<VaList.Builder> actions, SegmentScope scope) {\n@@ -293,4 +293,4 @@\n-            case WIN_64 -> Windowsx64Linker.newVaList(actions, session);\n-            case SYS_V -> SysVx64Linker.newVaList(actions, session);\n-            case LINUX_AARCH_64 -> LinuxAArch64Linker.newVaList(actions, session);\n-            case MAC_OS_AARCH_64 -> MacOsAArch64Linker.newVaList(actions, session);\n+            case WIN_64 -> Windowsx64Linker.newVaList(actions, scope);\n+            case SYS_V -> SysVx64Linker.newVaList(actions, scope);\n+            case LINUX_AARCH_64 -> LinuxAArch64Linker.newVaList(actions, scope);\n+            case MAC_OS_AARCH_64 -> MacOsAArch64Linker.newVaList(actions, scope);\n@@ -300,1 +300,1 @@\n-    public static VaList newVaListOfAddress(long address, SegmentScope session) {\n+    public static VaList newVaListOfAddress(long address, SegmentScope scope) {\n@@ -302,4 +302,4 @@\n-            case WIN_64 -> Windowsx64Linker.newVaListOfAddress(address, session);\n-            case SYS_V -> SysVx64Linker.newVaListOfAddress(address, session);\n-            case LINUX_AARCH_64 -> LinuxAArch64Linker.newVaListOfAddress(address, session);\n-            case MAC_OS_AARCH_64 -> MacOsAArch64Linker.newVaListOfAddress(address, session);\n+            case WIN_64 -> Windowsx64Linker.newVaListOfAddress(address, scope);\n+            case SYS_V -> SysVx64Linker.newVaListOfAddress(address, scope);\n+            case LINUX_AARCH_64 -> LinuxAArch64Linker.newVaListOfAddress(address, scope);\n+            case MAC_OS_AARCH_64 -> MacOsAArch64Linker.newVaListOfAddress(address, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    public static MemorySegment make(ABIDescriptor abi, MethodHandle target, CallingSequence callingSequence, SegmentScope session) {\n+    public static MemorySegment make(ABIDescriptor abi, MethodHandle target, CallingSequence callingSequence, SegmentScope scope) {\n@@ -96,1 +96,1 @@\n-        return UpcallStubs.makeUpcall(entryPoint, session);\n+        return UpcallStubs.makeUpcall(entryPoint, scope);\n@@ -133,1 +133,1 @@\n-                : Binding.Context.ofSession();\n+                : Binding.Context.ofScope();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallLinker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-    static MemorySegment makeUpcall(long entry, SegmentScope session) {\n-        ((MemorySessionImpl) session).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n+    static MemorySegment makeUpcall(long entry, SegmentScope scope) {\n+        ((MemorySessionImpl) scope).addOrCleanupIfFail(new MemorySessionImpl.ResourceList.ResourceCleanup() {\n@@ -60,1 +60,1 @@\n-        return MemorySegment.ofAddress(entry, 0, session);\n+        return MemorySegment.ofAddress(entry, 0, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/UpcallStubs.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-    public static VaList newVaList(Consumer<VaList.Builder> actions, SegmentScope session) {\n-        LinuxAArch64VaList.Builder builder = LinuxAArch64VaList.builder(session);\n+    public static VaList newVaList(Consumer<VaList.Builder> actions, SegmentScope scope) {\n+        LinuxAArch64VaList.Builder builder = LinuxAArch64VaList.builder(scope);\n@@ -74,2 +74,2 @@\n-    public static VaList newVaListOfAddress(long address, SegmentScope session) {\n-        return LinuxAArch64VaList.ofAddress(address, session);\n+    public static VaList newVaListOfAddress(long address, SegmentScope scope) {\n+        return LinuxAArch64VaList.ofAddress(address, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64Linker.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -123,2 +123,2 @@\n-    private static LinuxAArch64VaList readFromAddress(long address, SegmentScope session) {\n-        MemorySegment segment = MemorySegment.ofAddress(address, LAYOUT.byteSize(), session);\n+    private static LinuxAArch64VaList readFromAddress(long address, SegmentScope scope) {\n+        MemorySegment segment = MemorySegment.ofAddress(address, LAYOUT.byteSize(), scope);\n@@ -126,2 +126,2 @@\n-        MemorySegment gpRegsArea = MemorySegment.ofAddress(grTop(segment).address() - MAX_GP_OFFSET, MAX_GP_OFFSET, session);\n-        MemorySegment fpRegsArea = MemorySegment.ofAddress(vrTop(segment).address() - MAX_FP_OFFSET, MAX_FP_OFFSET, session);\n+        MemorySegment gpRegsArea = MemorySegment.ofAddress(grTop(segment).address() - MAX_GP_OFFSET, MAX_GP_OFFSET, scope);\n+        MemorySegment fpRegsArea = MemorySegment.ofAddress(vrTop(segment).address() - MAX_FP_OFFSET, MAX_FP_OFFSET, scope);\n@@ -387,2 +387,2 @@\n-    static LinuxAArch64VaList.Builder builder(SegmentScope session) {\n-        return new LinuxAArch64VaList.Builder(session);\n+    static LinuxAArch64VaList.Builder builder(SegmentScope scope) {\n+        return new LinuxAArch64VaList.Builder(scope);\n@@ -391,2 +391,2 @@\n-    public static VaList ofAddress(long address, SegmentScope session) {\n-        return readFromAddress(address, session);\n+    public static VaList ofAddress(long address, SegmentScope scope) {\n+        return readFromAddress(address, scope);\n@@ -435,1 +435,1 @@\n-        private final SegmentScope session;\n+        private final SegmentScope scope;\n@@ -443,4 +443,4 @@\n-        Builder(SegmentScope session) {\n-            this.session = session;\n-            this.gpRegs = MemorySegment.allocateNative(LAYOUT_GP_REGS, session);\n-            this.fpRegs = MemorySegment.allocateNative(LAYOUT_FP_REGS, session);\n+        Builder(SegmentScope scope) {\n+            this.scope = scope;\n+            this.gpRegs = MemorySegment.allocateNative(LAYOUT_GP_REGS, scope);\n+            this.fpRegs = MemorySegment.allocateNative(LAYOUT_FP_REGS, scope);\n@@ -539,1 +539,1 @@\n-            MemorySegment vaListSegment = MemorySegment.allocateNative(LAYOUT, session);\n+            MemorySegment vaListSegment = MemorySegment.allocateNative(LAYOUT, scope);\n@@ -544,1 +544,1 @@\n-                stackArgsSegment = MemorySegment.allocateNative(stackArgsSize, 16, session);\n+                stackArgsSegment = MemorySegment.allocateNative(stackArgsSize, 16, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-    public static VaList newVaList(Consumer<VaList.Builder> actions, SegmentScope session) {\n-        MacOsAArch64VaList.Builder builder = MacOsAArch64VaList.builder(session);\n+    public static VaList newVaList(Consumer<VaList.Builder> actions, SegmentScope scope) {\n+        MacOsAArch64VaList.Builder builder = MacOsAArch64VaList.builder(scope);\n@@ -74,2 +74,2 @@\n-    public static VaList newVaListOfAddress(long address, SegmentScope session) {\n-        return MacOsAArch64VaList.ofAddress(address, session);\n+    public static VaList newVaListOfAddress(long address, SegmentScope scope) {\n+        return MacOsAArch64VaList.ofAddress(address, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-    public static MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, SegmentScope session) {\n+    public static MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, SegmentScope scope) {\n@@ -142,1 +142,1 @@\n-        return UpcallLinker.make(CSysV, target, bindings.callingSequence, session);\n+        return UpcallLinker.make(CSysV, target, bindings.callingSequence, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/CallArranger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -133,2 +133,2 @@\n-    private static SysVVaList readFromAddress(long address, SegmentScope session) {\n-        MemorySegment segment = MemorySegment.ofAddress(address, LAYOUT.byteSize(), session);\n+    private static SysVVaList readFromAddress(long address, SegmentScope scope) {\n+        MemorySegment segment = MemorySegment.ofAddress(address, LAYOUT.byteSize(), scope);\n@@ -325,2 +325,2 @@\n-    static SysVVaList.Builder builder(SegmentScope session) {\n-        return new SysVVaList.Builder(session);\n+    static SysVVaList.Builder builder(SegmentScope scope) {\n+        return new SysVVaList.Builder(scope);\n@@ -329,2 +329,2 @@\n-    public static VaList ofAddress(long address, SegmentScope session) {\n-        return readFromAddress(address, session);\n+    public static VaList ofAddress(long address, SegmentScope scope) {\n+        return readFromAddress(address, scope);\n@@ -362,1 +362,1 @@\n-        private final SegmentScope session;\n+        private final SegmentScope scope;\n@@ -368,3 +368,3 @@\n-        public Builder(SegmentScope session) {\n-            this.session = session;\n-            this.reg_save_area = MemorySegment.allocateNative(LAYOUT_REG_SAVE_AREA, session);\n+        public Builder(SegmentScope scope) {\n+            this.scope = scope;\n+            this.reg_save_area = MemorySegment.allocateNative(LAYOUT_REG_SAVE_AREA, scope);\n@@ -449,1 +449,1 @@\n-            MemorySegment vaListSegment = MemorySegment.allocateNative(LAYOUT, session);\n+            MemorySegment vaListSegment = MemorySegment.allocateNative(LAYOUT, scope);\n@@ -454,1 +454,1 @@\n-                stackArgsSegment = MemorySegment.allocateNative(stackArgsSize, 16, session);\n+                stackArgsSegment = MemorySegment.allocateNative(stackArgsSize, 16, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVVaList.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-    public static VaList newVaListOfAddress(long address, SegmentScope session) {\n-        return SysVVaList.ofAddress(address, session);\n+    public static VaList newVaListOfAddress(long address, SegmentScope scope) {\n+        return SysVVaList.ofAddress(address, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/SysVx64Linker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-    public static MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, SegmentScope session) {\n+    public static MemorySegment arrangeUpcall(MethodHandle target, MethodType mt, FunctionDescriptor cDesc, SegmentScope scope) {\n@@ -141,1 +141,1 @@\n-        return UpcallLinker.make(CWindows, target, bindings.callingSequence, session);\n+        return UpcallLinker.make(CWindows, target, bindings.callingSequence, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/CallArranger.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,2 +152,2 @@\n-    static WinVaList ofAddress(long address, SegmentScope session) {\n-        return new WinVaList(MemorySegment.ofAddress(address, Long.MAX_VALUE, session));\n+    static WinVaList ofAddress(long address, SegmentScope scope) {\n+        return new WinVaList(MemorySegment.ofAddress(address, Long.MAX_VALUE, scope));\n@@ -156,2 +156,2 @@\n-    static Builder builder(SegmentScope session) {\n-        return new Builder(session);\n+    static Builder builder(SegmentScope scope) {\n+        return new Builder(scope);\n@@ -174,1 +174,1 @@\n-        private final SegmentScope session;\n+        private final SegmentScope scope;\n@@ -177,3 +177,3 @@\n-        public Builder(SegmentScope session) {\n-            ((MemorySessionImpl) session).checkValidState();\n-            this.session = session;\n+        public Builder(SegmentScope scope) {\n+            ((MemorySessionImpl) scope).checkValidState();\n+            this.scope = scope;\n@@ -219,1 +219,1 @@\n-            MemorySegment segment = MemorySegment.allocateNative(VA_SLOT_SIZE_BYTES * args.size(), session);\n+            MemorySegment segment = MemorySegment.allocateNative(VA_SLOT_SIZE_BYTES * args.size(), scope);\n@@ -228,1 +228,1 @@\n-                            MemorySegment copy = MemorySegment.allocateNative(arg.layout, session);\n+                            MemorySegment copy = MemorySegment.allocateNative(arg.layout, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/WinVaList.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-    public static VaList newVaListOfAddress(long address, SegmentScope session) {\n-        return WinVaList.ofAddress(address, session);\n+    public static VaList newVaListOfAddress(long address, SegmentScope scope) {\n+        return WinVaList.ofAddress(address, scope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/windows\/Windowsx64Linker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}