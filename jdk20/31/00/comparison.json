{"files":[{"patch":"@@ -359,1 +359,1 @@\n-            Env<AttrContext> packageEnv = isPkgInfo ? topEnv.dup(pd) : null;\n+            Env<AttrContext> packageEnv = null;\n@@ -363,0 +363,2 @@\n+                packageEnv = topEnv.dup(pd != null ? pd : tree);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8298727\n+ * @summary Verify empty package-info.java is handled properly\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.TestRunner toolbox.ToolBox EmptyPackageInfo\n+ * @run main EmptyPackageInfo\n+ *\/\n+\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import com.sun.source.util.Trees;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.tools.ToolProvider;\n+import toolbox.TestRunner;\n+import toolbox.TestRunner.Test;\n+import toolbox.ToolBox;\n+\n+public class EmptyPackageInfo extends TestRunner {\n+\n+    public static void main(String... args) throws Exception {\n+        new EmptyPackageInfo().runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    public EmptyPackageInfo() {\n+        super(System.err);\n+    }\n+\n+    @Test\n+    public void testEmptyPackageInfo(Path outerBase) throws Exception {\n+        Path src = outerBase.resolve(\"src\");\n+        Path classes = outerBase.resolve(\"classes\");\n+        Path packInfo = src.resolve(\"package-info.java\");\n+\n+        tb.writeFile(packInfo, \"\/**javadoc*\/\\n\");\n+        Files.createDirectories(classes);\n+\n+        var compiler = ToolProvider.getSystemJavaCompiler();\n+\n+        try (var fm = compiler.getStandardFileManager(null,\n+                                                      null,\n+                                                      null)) {\n+            var task =\n+                    (JavacTask) compiler.getTask(null,\n+                                                 fm,\n+                                                 null,\n+                                                 null,\n+                                                 null,\n+                                                 fm.getJavaFileObjects(packInfo));\n+            task.analyze();\n+            var pack = task.getElements().getPackageElement(\"\");\n+            var trees = Trees.instance(task);\n+            var packPath = trees.getPath(pack);\n+            var packTree = packPath.getLeaf();\n+            if (packTree.getKind() != Tree.Kind.COMPILATION_UNIT) {\n+                throw new AssertionError(\"Unexpected tree kind: \" + packTree.getKind());\n+            }\n+            var actualJavadoc = trees.getDocComment(packPath);\n+            var expectedJavadoc = \"javadoc\";\n+            if (!expectedJavadoc.equals(actualJavadoc)) {\n+                throw new AssertionError(\"Unexpected javadoc, \" +\n+                                         \"expected: \" + expectedJavadoc +\n+                                         \", got: \" + actualJavadoc);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMultipleFiles(Path outerBase) throws Exception {\n+        Path src = outerBase.resolve(\"src\");\n+        Path classes = outerBase.resolve(\"classes\");\n+        Path packInfo1 = src.resolve(\"test1\").resolve(\"package-info.java\");\n+        Path packInfo2 = src.resolve(\"test2\").resolve(\"package-info.java\");\n+\n+        tb.writeFile(packInfo1, \"\");\n+        tb.writeFile(packInfo2, \"\");\n+        Files.createDirectories(classes);\n+\n+        var compiler = ToolProvider.getSystemJavaCompiler();\n+\n+        try (var fm = compiler.getStandardFileManager(null,\n+                                                      null,\n+                                                      null)) {\n+            var diags = new ArrayList<String>();\n+            var task =\n+                    (JavacTask) compiler.getTask(null,\n+                                                 fm,\n+                                                 d -> diags.add(d.getCode()),\n+                                                 null,\n+                                                 null,\n+                                                 fm.getJavaFileObjects(packInfo1,\n+                                                                       packInfo2));\n+            task.analyze();\n+            var expectedDiags =\n+                    List.of(\"compiler.warn.pkg-info.already.seen\");\n+            if (!expectedDiags.equals(diags)) {\n+                throw new AssertionError(\"Unexpected diags, \" +\n+                                         \"expected: \" + expectedDiags +\n+                                         \", got: \" + diags);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/EmptyPackageInfo.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}