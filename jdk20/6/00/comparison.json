{"files":[{"patch":"@@ -1736,1 +1736,1 @@\n-    if (u->Opcode() == Op_Opaque1) {\n+    if (u->is_Opaque1()) {\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8298353\n+ * @summary C2 fails with assert(opaq->outcnt() == 1 && opaq->in(1) == limit) failed\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -XX:-UseOnStackReplacement -XX:-BackgroundCompilation TestBadCountedLoopLimit\n+ *\n+ *\/\n+\n+import java.util.Arrays;\n+\n+public class TestBadCountedLoopLimit {\n+    private static volatile int barrier;\n+    private static int field;\n+\n+    public static void main(String[] args) {\n+        boolean[] flag1 = new boolean[100];\n+        boolean[] flag2 = new boolean[100];\n+        Arrays.fill(flag2, true);\n+        for (int i = 0; i < 20_000; i++) {\n+            test(0, flag1, flag1);\n+            test(0, flag2, flag2);\n+            testHelper(true, 0, 0);\n+            testHelper(false, 0, 0);\n+        }\n+    }\n+\n+    private static int test(int v, boolean[] flag, boolean[] flag2) {\n+        int j = testHelper(flag2[0], 0, 1);\n+        int i = 1;\n+        int limit = 0;\n+        for (;;) {\n+            synchronized (new Object()) {\n+            }\n+            limit = j;\n+            if (i >= 100) {\n+                break;\n+            }\n+\n+            if (flag[i]) {\n+                return limit - 3;\n+            }\n+\n+            j = testHelper(flag2[i], 100, 101);\n+            i *= 2;\n+        };\n+        for (int k = 0; k < limit; k++) {\n+            barrier = 0x42;\n+        }\n+        return j;\n+    }\n+\n+    private static int testHelper(boolean flag2, int x, int x1) {\n+        return flag2 ? x : x1;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestBadCountedLoopLimit.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}