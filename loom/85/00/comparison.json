{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-  \n+\n@@ -146,1 +146,1 @@\n-  \n+\n@@ -253,7 +253,0 @@\n-\n-inline int frame::interpreted_frame_num_oops(InterpreterOopMap* mask) const {\n-  return   mask->num_oops()\n-        + 1 \/\/ for the mirror oop\n-        + ((intptr_t*)interpreter_frame_monitor_begin() - (intptr_t*)interpreter_frame_monitor_end())\/BasicObjectLock::size();\n-}\n-\n@@ -464,1 +457,1 @@\n-      if (oop_map() != NULL) { \n+      if (oop_map() != NULL) {\n@@ -479,3 +472,3 @@\n-  if (Continuation::is_return_barrier_entry(sender_pc)) {\t\n-    if (map->walk_cont()) { \/\/ about to walk into an h-stack \t\n-      return Continuation::top_frame(*this, map);\t\n+  if (Continuation::is_return_barrier_entry(sender_pc)) {\n+    if (map->walk_cont()) { \/\/ about to walk into an h-stack\n+      return Continuation::top_frame(*this, map);\n@@ -483,1 +476,1 @@\n-      Continuation::fix_continuation_bottom_sender(map->thread(), *this, &sender_pc, &sender_sp);\t\n+      Continuation::fix_continuation_bottom_sender(map->thread(), *this, &sender_pc, &sender_sp);\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n-  \n+\n@@ -115,1 +115,1 @@\n-  intptr_t* bottom = derelativize(frame::interpreter_frame_locals_offset) + 1; \/\/ the sender's unextended sp: derelativize(frame::interpreter_frame_sender_sp_offset); \n+  intptr_t* bottom = derelativize(frame::interpreter_frame_locals_offset) + 1; \/\/ the sender's unextended sp: derelativize(frame::interpreter_frame_sender_sp_offset);\n@@ -132,0 +132,1 @@\n+  ResourceMark rm;\n@@ -187,1 +188,1 @@\n-  \n+\n@@ -208,1 +209,1 @@\n-    guarantee (false, \"\"); \n+    guarantee (false, \"\");\n@@ -219,1 +220,1 @@\n-  \n+\n","filename":"src\/hotspot\/cpu\/aarch64\/instanceStackChunkKlass_aarch64.inline.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,5 +249,0 @@\n-inline int frame::interpreted_frame_num_oops(InterpreterOopMap* mask) const {\n-  Unimplemented();\n-  return 0;\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -231,5 +231,0 @@\n-inline int frame::interpreted_frame_num_oops(InterpreterOopMap* mask) const {\n-  Unimplemented();\n-  return 0;\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -298,5 +298,0 @@\n-inline int frame::interpreted_frame_num_oops(InterpreterOopMap* mask) const {\n-  Unimplemented();\n-  return 0;\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-  \n+\n@@ -244,7 +244,0 @@\n-\n-inline int frame::interpreted_frame_num_oops(InterpreterOopMap* mask) const {\n-  return   mask->num_oops()\n-        + 1 \/\/ for the mirror oop\n-        + ((intptr_t*)interpreter_frame_monitor_begin() - (intptr_t*)interpreter_frame_monitor_end())\/BasicObjectLock::size();\n-}\n-\n@@ -456,1 +449,1 @@\n-      if (oop_map() != NULL) { \n+      if (oop_map() != NULL) {\n@@ -473,3 +466,3 @@\n-  if (Continuation::is_return_barrier_entry(sender_pc)) {\t\n-    if (map->walk_cont()) { \/\/ about to walk into an h-stack \t\n-      return Continuation::top_frame(*this, map);\t\n+  if (Continuation::is_return_barrier_entry(sender_pc)) {\n+    if (map->walk_cont()) { \/\/ about to walk into an h-stack\n+      return Continuation::top_frame(*this, map);\n@@ -477,1 +470,1 @@\n-      Continuation::fix_continuation_bottom_sender(map->thread(), *this, &sender_pc, &sender_sp);\t\n+      Continuation::fix_continuation_bottom_sender(map->thread(), *this, &sender_pc, &sender_sp);\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,1 +113,1 @@\n-  \n+\n@@ -115,1 +115,1 @@\n-  intptr_t* bottom = derelativize(frame::interpreter_frame_locals_offset) + 1; \/\/ the sender's unextended sp: derelativize(frame::interpreter_frame_sender_sp_offset); \n+  intptr_t* bottom = derelativize(frame::interpreter_frame_locals_offset) + 1; \/\/ the sender's unextended sp: derelativize(frame::interpreter_frame_sender_sp_offset);\n@@ -132,0 +132,1 @@\n+  ResourceMark rm;\n@@ -187,1 +188,1 @@\n-  \n+\n@@ -208,1 +209,1 @@\n-    guarantee (false, \"\"); \n+    guarantee (false, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/instanceStackChunkKlass_x86.inline.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,5 +186,0 @@\n-inline int frame::interpreted_frame_num_oops(InterpreterOopMap* mask) const {\n-  Unimplemented();\n-  return 0;\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-    \n+\n@@ -944,1 +944,1 @@\n-  } \n+  }\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,1 +132,1 @@\n-  \n+\n@@ -145,1 +145,1 @@\n-  \n+\n@@ -181,2 +181,2 @@\n-inline bool StackChunkFrameStream<mixed>::is_interpreted() const { \n-  return mixed ? (!is_done() && Interpreter::contains(pc())) : false; \n+inline bool StackChunkFrameStream<mixed>::is_interpreted() const {\n+  return mixed ? (!is_done() && Interpreter::contains(pc())) : false;\n@@ -187,1 +187,1 @@\n-  return is_interpreted() ? interpreter_frame_size() \n+  return is_interpreted() ? interpreter_frame_size()\n@@ -250,2 +250,2 @@\n-  assert (pc() != nullptr && dbg_is_safe(pc(), -1), \n-  \"index: %d sp: \" INTPTR_FORMAT \" sp offset: %d end offset: %d size: %d chunk sp: %d\", \n+  assert (pc() != nullptr && dbg_is_safe(pc(), -1),\n+  \"index: %d sp: \" INTPTR_FORMAT \" sp offset: %d end offset: %d size: %d chunk sp: %d\",\n@@ -257,2 +257,2 @@\n-  assert (_cb != nullptr, \n-    \"index: %d sp: \" INTPTR_FORMAT \" sp offset: %d end offset: %d size: %d chunk sp: %d gc_flag: %d\", \n+  assert (_cb != nullptr,\n+    \"index: %d sp: \" INTPTR_FORMAT \" sp offset: %d end offset: %d size: %d chunk sp: %d gc_flag: %d\",\n@@ -260,2 +260,2 @@\n-  assert (is_interpreted() || ((is_stub() || is_compiled()) && _cb->frame_size() > 0), \n-    \"index: %d sp: \" INTPTR_FORMAT \" sp offset: %d end offset: %d size: %d chunk sp: %d is_stub: %d is_compiled: %d frame_size: %d mixed: %d\", \n+  assert (is_interpreted() || ((is_stub() || is_compiled()) && _cb->frame_size() > 0),\n+    \"index: %d sp: \" INTPTR_FORMAT \" sp offset: %d end offset: %d size: %d chunk sp: %d is_stub: %d is_compiled: %d frame_size: %d mixed: %d\",\n@@ -269,1 +269,1 @@\n-  get_oopmap(pc(), CodeCache::find_oopmap_slot_fast(pc())); \n+  get_oopmap(pc(), CodeCache::find_oopmap_slot_fast(pc()));\n@@ -419,1 +419,1 @@\n-  \n+\n@@ -424,1 +424,1 @@\n-    \n+\n@@ -433,1 +433,1 @@\n-    \n+\n@@ -613,1 +613,1 @@\n-    \n+\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.inline.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,1 +108,1 @@\n-  _chunk = map->_chunk; \/\/ stackChunkHandle(Thread::current(), map->_chunk(), map->_chunk.not_null()); \/\/ \n+  _chunk = map->_chunk; \/\/ stackChunkHandle(Thread::current(), map->_chunk(), map->_chunk.not_null()); \/\/\n@@ -914,2 +914,2 @@\n-  Thread *thread = Thread::current();\n-  methodHandle m (thread, interpreter_frame_method());\n+  Thread* current = Thread::current();\n+  methodHandle m(current, interpreter_frame_method());\n@@ -918,0 +918,1 @@\n+  ResourceMark rm;\n@@ -924,1 +925,1 @@\n-  \n+\n@@ -933,8 +934,0 @@\n-template <bool relative>\n-void frame::oops_interpreted_do(OopClosure* f, const RegisterMap* map, const InterpreterOopMap& mask) const {\n-  Thread *thread = Thread::current();\n-  methodHandle m (thread, interpreter_frame_method());\n-  jint bci = interpreter_frame_bci();\n-  oops_interpreted_do0<relative>(f, map, m, bci, mask);\n-}\n-\n@@ -1181,2 +1174,2 @@\n-   * as in return address being patched. \n-   * It doesn't care if the OP that we return to is a \n+   * as in return address being patched.\n+   * It doesn't care if the OP that we return to is a\n@@ -1297,2 +1290,5 @@\n-  FrameValues& _values;\n-  int _frame_no;\n+  GrowableArray<oop*>* _oops;\n+  GrowableArray<narrowOop*>* _narrow_oops;\n+  GrowableArray<oop*>* _base;\n+  GrowableArray<derived_pointer*>* _derived;\n+  NoSafepointVerifier nsv;\n@@ -1300,4 +1296,5 @@\n-  FrameValuesOopClosure(FrameValues& values, int frame_no) : _values(values), _frame_no(frame_no) {}\n-  virtual void do_oop(oop* p) {\n-    bool good = *p == nullptr || (dbg_is_safe(*p, -1) && dbg_is_safe((*p)->klass(), -1) && oopDesc::is_oop_or_null(*p));\n-    _values.describe(_frame_no, (intptr_t*)p, err_msg(\"oop%s for #%d\", good ? \"\" : \" (BAD)\", _frame_no)); \n+  FrameValuesOopClosure() {\n+    _oops = new (ResourceObj::C_HEAP, mtThread) GrowableArray<oop*>(100, mtThread);\n+    _narrow_oops = new (ResourceObj::C_HEAP, mtThread) GrowableArray<narrowOop*>(100, mtThread);\n+    _base = new (ResourceObj::C_HEAP, mtThread) GrowableArray<oop*>(100, mtThread);\n+    _derived = new (ResourceObj::C_HEAP, mtThread) GrowableArray<derived_pointer*>(100, mtThread);\n@@ -1305,3 +1302,28 @@\n-  virtual void do_oop(narrowOop* p) { _values.describe(_frame_no, (intptr_t*)p, err_msg(\"narrow oop for #%d\", _frame_no)); }\n-  virtual void do_derived_oop(oop* base, derived_pointer* derived) { \n-    _values.describe(_frame_no, (intptr_t*)derived, err_msg(\"derived pointer (base: \" INTPTR_FORMAT \") for #%d\", p2i(base), _frame_no));\n+  ~FrameValuesOopClosure() {\n+    delete _oops;\n+    delete _narrow_oops;\n+    delete _base;\n+    delete _derived;\n+  }\n+  void describe(FrameValues& values, int frame_no) {\n+    for (int i = 0; i < _oops->length(); i++) {\n+      oop* p = _oops->at(i);\n+      bool good = *p == nullptr || (dbg_is_safe(*p, -1) && dbg_is_safe((*p)->klass(), -1) && oopDesc::is_oop_or_null(*p));\n+      values.describe(frame_no, (intptr_t*)p, err_msg(\"oop%s for #%d\", good ? \"\" : \" (BAD)\", frame_no));\n+    }\n+    for (int i = 0; i < _narrow_oops->length(); i++) {\n+      narrowOop* p = _narrow_oops->at(i);\n+      values.describe(frame_no, (intptr_t*)p, err_msg(\"narrow oop for #%d\", frame_no));\n+    }\n+    assert(_base->length() == _derived->length(), \"should be the same\");\n+    for (int i = 0; i < _base->length(); i++) {\n+      oop* base = _base->at(i);\n+      derived_pointer* derived = _derived->at(i);\n+      values.describe(frame_no, (intptr_t*)derived, err_msg(\"derived pointer (base: \" INTPTR_FORMAT \") for #%d\", p2i(base), frame_no));\n+    }\n+  }\n+  virtual void do_oop(oop* p)       { _oops->push(p); }\n+  virtual void do_oop(narrowOop* p) { _narrow_oops->push(p); }\n+  virtual void do_derived_oop(oop* base, derived_pointer* derived) {\n+    _base->push(base);\n+    _derived->push(derived);\n@@ -1372,1 +1394,1 @@\n-      values.describe(-1, info_address, err_msg(\"- %s codelet: %s\", \n+      values.describe(-1, info_address, err_msg(\"- %s codelet: %s\",\n@@ -1411,1 +1433,1 @@\n-      FrameValuesOopClosure oopsFn(values, frame_no);\n+      FrameValuesOopClosure oopsFn;\n@@ -1413,0 +1435,1 @@\n+      oopsFn.describe(values, frame_no);\n@@ -1500,1 +1523,1 @@\n-      FrameValuesOopClosure oopsFn(values, frame_no);\n+      FrameValuesOopClosure oopsFn;\n@@ -1502,0 +1525,1 @@\n+      oopsFn.describe(values, frame_no);\n@@ -1606,1 +1630,1 @@\n-  \n+\n@@ -1644,1 +1668,1 @@\n-          && *fv.location != 0 && *fv.location > -100 && *fv.location < 100 \n+          && *fv.location != 0 && *fv.location > -100 && *fv.location < 100\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":53,"deletions":29,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,3 +202,0 @@\n-  \/\/ the number of oops in the frame\n-  inline int interpreted_frame_num_oops(InterpreterOopMap* mask) const;\n-\n@@ -238,1 +235,1 @@\n-  template <bool relative> \n+  template <bool relative>\n@@ -367,1 +364,1 @@\n-  template <bool relative = false> \n+  template <bool relative = false>\n@@ -444,2 +441,0 @@\n-  template <bool relative = false>\n-  void oops_interpreted_do(OopClosure* f, const RegisterMap* map, const InterpreterOopMap& mask) const;\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-  static int num_oops(const frame&f, InterpreterOopMap* mask);\n@@ -176,0 +175,1 @@\n+    ResourceMark rm;\n@@ -223,5 +223,0 @@\n-int Interpreted::num_oops(const frame&f, InterpreterOopMap* mask) {\n-  \/\/ all locks must be nullptr when freezing, but f.oops_do walks them, so we count them\n-  return f.interpreted_frame_num_oops(mask);\n-}\n-\n@@ -350,1 +345,1 @@\n-#endif \/\/ SHARE_VM_RUNTIME_FRAME_HELPERS_INLINE_HPP\n\\ No newline at end of file\n+#endif \/\/ SHARE_VM_RUNTIME_FRAME_HELPERS_INLINE_HPP\n","filename":"src\/hotspot\/share\/runtime\/frame_helpers.inline.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"}]}