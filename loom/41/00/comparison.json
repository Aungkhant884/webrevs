{"files":[{"patch":"@@ -59,2 +59,1 @@\n-    _gc_data(NULL),\n-    _keepalive(NULL)\n+    _gc_data(NULL)\n@@ -72,2 +71,1 @@\n-    _gc_data(NULL),\n-    _keepalive(NULL)\n+    _gc_data(NULL)\n@@ -375,1 +373,1 @@\n-    \n+\n@@ -631,2 +629,2 @@\n-address* CompiledMethod::orig_pc_addr(const frame* fr) { \n-  return (address*) ((address)fr->unextended_sp() + orig_pc_offset()); \n+address* CompiledMethod::orig_pc_addr(const frame* fr) {\n+  return (address*) ((address)fr->unextended_sp() + orig_pc_offset());\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -177,1 +177,0 @@\n-  oop* _keepalive; \/\/ allocated and maintained by Continuation::weak_storage().\n@@ -416,4 +415,0 @@\n-  oop* get_keepalive();\n-  oop* set_keepalive(oop* keepalive);\n-  bool clear_keepalive(oop* old);\n-\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,10 +69,0 @@\n-inline oop* CompiledMethod::get_keepalive() { return _keepalive; }\n-\n-inline oop* CompiledMethod::set_keepalive(oop* obj) {\n-  return Atomic::cmpxchg(&_keepalive, (oop*) NULL, obj);\n-}\n-\n-inline bool CompiledMethod::clear_keepalive(oop* old) {\n-  return Atomic::cmpxchg(&_keepalive, old, (oop*) NULL) == old;\n-}\n-\n","filename":"src\/hotspot\/share\/code\/compiledMethod.inline.hpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1226,9 +1226,1 @@\n-  bool not_on_new_vthread_stack = CodeCache::marking_cycle() >= align_up(_marking_cycle, 2) + 2;\n-\n-  \/\/ As for old vthread stacks, they are kept alive by a WeakHandle.\n-  bool not_on_old_vthread_stack = false;\n-  if (_keepalive != NULL) {\n-    WeakHandle wh = WeakHandle::from_raw(_keepalive);\n-    not_on_old_vthread_stack = wh.resolve() == NULL;\n-  }\n-  return not_on_new_vthread_stack && not_on_old_vthread_stack;\n+  return CodeCache::marking_cycle() >= align_up(_marking_cycle, 2) + 2;\n@@ -1937,1 +1929,1 @@\n-void nmethod::oops_do(OopClosure* f, bool allow_dead, bool allow_null, bool keepalive_is_strong) {\n+void nmethod::oops_do(OopClosure* f, bool allow_dead, bool allow_null) {\n@@ -1941,9 +1933,0 @@\n-  if (keepalive_is_strong) {\n-    if (_keepalive != NULL) {\n-      WeakHandle wh = WeakHandle::from_raw(_keepalive);\n-      if (wh.resolve() != NULL) {\n-        f->do_oop(_keepalive);\n-      }\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -608,1 +608,0 @@\n-  void oops_do_keepalive(OopClosure* f, bool keepalive) { oops_do(f, false, false, keepalive); }\n@@ -610,1 +609,1 @@\n-  void oops_do(OopClosure* f, bool allow_dead, bool allow_null = false, bool keepalive_is_strong = false);\n+  void oops_do(OopClosure* f, bool allow_dead, bool allow_null = false);\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-  nm->oops_do_keepalive(&_oc, _keepalive_is_strong);\n+  nm->oops_do(&_oc);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeBlobClosure.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-    ZNMethod::nmethod_oops_barrier(nm, true \/* keepalive_is_strong *\/);\n-    nm->mark_as_maybe_on_continuation();\n+  ZNMethod::nmethod_oops_barrier(nm);\n+  nm->mark_as_maybe_on_continuation();\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -259,1 +259,1 @@\n-    ZNMethod::nmethod_oops_do(nm, _cl, false \/* keepalive_is_strong *\/);\n+    ZNMethod::nmethod_oops_do(nm, _cl);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -655,1 +655,1 @@\n-      ZNMethod::nmethod_oops_do_inner(nm, _cl, true \/* keepalive_is_strong *\/);\n+      ZNMethod::nmethod_oops_do_inner(nm, _cl);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,1 +215,1 @@\n-void ZNMethod::nmethod_oops_do(nmethod* nm, OopClosure* cl, bool keepalive_is_strong) {\n+void ZNMethod::nmethod_oops_do(nmethod* nm, OopClosure* cl) {\n@@ -221,1 +221,1 @@\n-  ZNMethod::nmethod_oops_do_inner(nm, cl, keepalive_is_strong);\n+  ZNMethod::nmethod_oops_do_inner(nm, cl);\n@@ -224,1 +224,1 @@\n-void ZNMethod::nmethod_oops_do_inner(nmethod* nm, OopClosure* cl, bool keepalive_is_strong) {\n+void ZNMethod::nmethod_oops_do_inner(nmethod* nm, OopClosure* cl) {\n@@ -253,7 +253,0 @@\n-\n-  if (keepalive_is_strong) {\n-    oop* obj_ptr = nm->get_keepalive();\n-    if (obj_ptr != NULL) {\n-      cl->do_oop(obj_ptr);\n-    }\n-  }\n@@ -277,1 +270,1 @@\n-void ZNMethod::nmethod_oops_barrier(nmethod* nm, bool keepalive_is_strong) {\n+void ZNMethod::nmethod_oops_barrier(nmethod* nm) {\n@@ -279,1 +272,1 @@\n-  nmethod_oops_do_inner(nm, &cl, keepalive_is_strong);\n+  nmethod_oops_do_inner(nm, &cl);\n@@ -346,1 +339,1 @@\n-      ZNMethod::nmethod_oops_barrier(nm, false \/* keepalive_is_strong *\/);\n+      ZNMethod::nmethod_oops_barrier(nm);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,2 @@\n-  static void nmethod_oops_do(nmethod* nm, OopClosure* cl, bool keepalive_is_strong);\n-  static void nmethod_oops_do_inner(nmethod* nm, OopClosure* cl, bool keepalive_is_strong);\n+  static void nmethod_oops_do(nmethod* nm, OopClosure* cl);\n+  static void nmethod_oops_do_inner(nmethod* nm, OopClosure* cl);\n@@ -55,1 +55,1 @@\n-  static void nmethod_oops_barrier(nmethod* nm, bool keepalive_is_strong);\n+  static void nmethod_oops_barrier(nmethod* nm);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    ZNMethod::nmethod_oops_do_inner(nm, &cl, false \/* keepalive_is_strong *\/);\n+    ZNMethod::nmethod_oops_do_inner(nm, &cl);\n","filename":"src\/hotspot\/share\/gc\/z\/zUnload.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-    ZNMethod::nmethod_oops_do(nm, _cl, true \/* keepalive_is_strong *\/);\n+    ZNMethod::nmethod_oops_do(nm, _cl);\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-    nm->oops_do_keepalive(_cl, _keepalive_nmethods \/* keepalive_is_strong *\/);\n+    nm->oops_do(_cl);\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,0 @@\n-class OopStorage;\n@@ -64,2 +63,0 @@\n-private:\n-  static OopStorage* _weak_handles;\n@@ -69,2 +66,0 @@\n-  static OopStorage* weak_storage() { return _weak_handles; }\n-\n@@ -143,1 +138,1 @@\n-public: \n+public:\n@@ -172,1 +167,1 @@\n-  \n+\n","filename":"src\/hotspot\/share\/runtime\/continuation.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}