{"files":[{"patch":"@@ -32,0 +32,14 @@\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.locks.LockSupport;\n+import java.util.stream.Collectors;\n+import java.lang.management.ManagementFactory;\n+\n+import jdk.jfr.EventType;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.consumer.RecordingFile;\n+\n@@ -85,7 +99,19 @@\n-        Object lock = new Object();\n-        try {\n-            var completed = new AtomicBoolean();\n-            Thread thread = Thread.startVirtualThread(() -> {\n-                synchronized (lock) {\n-                    LockSupport.park();\n-                    completed.set(true);\n+        try (Recording recording = new Recording()) {\n+            recording.enable(\"jdk.VirtualThreadPinned\");\n+            recording.start();\n+\n+            Object lock = new Object();\n+            try {\n+                var completed = new AtomicBoolean();\n+                Thread thread = Thread.startVirtualThread(() -> {\n+                    synchronized (lock) {\n+                        LockSupport.park();\n+                        completed.set(true);\n+                    }\n+                });\n+\n+                \/\/ wait for thread to park\n+                Thread.State state;\n+                while ((state = thread.getState()) != Thread.State.WAITING) {\n+                    assertTrue(state != Thread.State.TERMINATED);\n+                    Thread.sleep(10);\n@@ -93,1 +119,0 @@\n-            });\n@@ -95,5 +120,6 @@\n-            \/\/ wait for thread to park\n-            Thread.State state;\n-            while ((state = thread.getState()) != Thread.State.WAITING) {\n-                assertTrue(state != Thread.State.TERMINATED);\n-                Thread.sleep(10);\n+                \/\/ unpark and check that thread completed without exception\n+                LockSupport.unpark(thread);\n+                thread.join();\n+                assertTrue(completed.get());\n+            } finally {\n+                Reference.reachabilityFence(lock);\n@@ -102,6 +128,30 @@\n-            \/\/ unpark and check that thread completed without exception\n-            LockSupport.unpark(thread);\n-            thread.join();\n-            assertTrue(completed.get());\n-        } finally {\n-            Reference.reachabilityFence(lock);\n+            recording.stop();\n+\n+            Map<String, Integer> events = sumEvents(recording);\n+            int virtualThreadPinnedEventCount = events.getOrDefault(\"jdk.VirtualThreadPinned\", 0);\n+            assertEquals(0, virtualThreadPinnedEventCount);\n+        }\n+    }\n+\n+    \/**\n+     * Read the events from the recording and return a map of event name to count.\n+     *\/\n+    private static Map<String, Integer> sumEvents(Recording recording) throws IOException {\n+        Path recordingFile = recordingFile(recording);\n+        List<RecordedEvent> events = RecordingFile.readAllEvents(recordingFile);\n+        return events.stream()\n+                .map(RecordedEvent::getEventType)\n+                .collect(Collectors.groupingBy(EventType::getName,\n+                        Collectors.summingInt(x -> 1)));\n+    }\n+\n+    \/**\n+     * Return the file path to the recording file.\n+     *\/\n+    private static Path recordingFile(Recording recording) throws IOException {\n+        Path recordingFile = recording.getDestination();\n+        if (recordingFile == null) {\n+            File directory = new File(\".\");\n+            String pid = ManagementFactory.getRuntimeMXBean().getName().split(\"@\")[0];\n+            recordingFile = new File(directory.getAbsolutePath(), \"recording-\" + recording.getId() + \"-pid\" + pid + \".jfr\").toPath();\n+            recording.dump(recordingFile);\n@@ -109,0 +159,1 @@\n+        return recordingFile;\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/VirtualThreadPinnedEventThrows.java","additions":70,"deletions":19,"binary":false,"changes":89,"status":"modified"}]}