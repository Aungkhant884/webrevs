{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"oops\/stackChunkOop.inline.hpp\"\n@@ -247,1 +248,1 @@\n-  return (stackChunkOop)ref->obj_field(_tail_offset);\n+  return stackChunkOopDesc::cast(ref->obj_field(_tail_offset));\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  stackChunkOop chunk = (stackChunkOop)obj;\n+  stackChunkOop chunk = stackChunkOopDesc::cast(obj);\n@@ -46,1 +46,1 @@\n-  stackChunkOop chunk = (stackChunkOop)obj;\n+  stackChunkOop chunk = stackChunkOopDesc::cast(obj);\n","filename":"src\/hotspot\/share\/gc\/shared\/continuationGCSupport.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  stackChunkOop to_chunk = (stackChunkOop) cast_to_oop(to_addr);\n+  stackChunkOop to_chunk = stackChunkOopDesc::cast(cast_to_oop(to_addr));\n@@ -116,1 +116,1 @@\n-  print_chunk((stackChunkOop)obj, false, st);\n+  print_chunk(stackChunkOopDesc::cast(obj), false, st);\n@@ -127,1 +127,1 @@\n-    if (base == (oop)nullptr) {\n+    if (base == nullptr) {\n@@ -172,1 +172,1 @@\n-    if (base != (oop)nullptr) {\n+    if (base != nullptr) {\n@@ -297,2 +297,0 @@\n-  assert(chunk->is_stackChunk(), \"\");\n-\n@@ -693,1 +691,0 @@\n-  assert(obj->is_stackChunk(), \"\");\n@@ -695,1 +692,1 @@\n-  stackChunkOop chunk = (stackChunkOop)obj;\n+  stackChunkOop chunk = stackChunkOopDesc::cast(obj);\n@@ -697,1 +694,0 @@\n-  assert(chunk->is_stackChunk(), \"\");\n@@ -863,1 +859,1 @@\n-  if (c == (oop)nullptr) {\n+  if (c == nullptr) {\n@@ -867,2 +863,0 @@\n-  assert(c->is_stackChunk(), \"\");\n-\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-  assert (obj->is_stackChunk(), \"\");\n-  stackChunkOop chunk = (stackChunkOop)obj;\n+  stackChunkOop chunk = stackChunkOopDesc::cast(obj);\n@@ -100,1 +99,0 @@\n-  assert (obj->is_stackChunk(), \"\");\n@@ -102,1 +100,1 @@\n-  stackChunkOop chunk = (stackChunkOop)obj;\n+  stackChunkOop chunk = stackChunkOopDesc::cast(obj);\n@@ -109,2 +107,1 @@\n-  assert (obj->is_stackChunk(), \"\");\n-  stackChunkOop chunk = (stackChunkOop)obj;\n+  stackChunkOop chunk = stackChunkOopDesc::cast(obj);\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.inline.hpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  if (parent() != (oop)nullptr) {\n+  if (parent() != nullptr) {\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,2 +53,4 @@\n-  inline stackChunkOopDesc* parent() const;\n-  inline void set_parent(stackChunkOopDesc* value);\n+  static inline stackChunkOop cast(oop obj);\n+\n+  inline stackChunkOop parent() const;\n+  inline void set_parent(stackChunkOop value);\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"memory\/universe.hpp\"\n@@ -40,1 +42,6 @@\n-inline stackChunkOopDesc* stackChunkOopDesc::parent() const         { return (stackChunkOopDesc*)(oopDesc*)jdk_internal_vm_StackChunk::parent(as_oop()); }\n+inline stackChunkOop stackChunkOopDesc::cast(oop obj) {\n+  assert(obj->is_stackChunk(), \"Wrong type\");\n+  return stackChunkOop(obj);\n+}\n+\n+inline stackChunkOop stackChunkOopDesc::parent() const         { return stackChunkOopDesc::cast(jdk_internal_vm_StackChunk::parent(as_oop())); }\n@@ -42,2 +49,2 @@\n-inline bool stackChunkOopDesc::is_parent_null() const               { return jdk_internal_vm_StackChunk::is_parent_null<P>(as_oop()); }\n-inline void stackChunkOopDesc::set_parent(stackChunkOopDesc* value) { jdk_internal_vm_StackChunk::set_parent(this, (oop)value); }\n+inline bool stackChunkOopDesc::is_parent_null() const          { return jdk_internal_vm_StackChunk::is_parent_null<P>(as_oop()); }\n+inline void stackChunkOopDesc::set_parent(stackChunkOop value) { jdk_internal_vm_StackChunk::set_parent(this, value); }\n@@ -45,1 +52,1 @@\n-inline void stackChunkOopDesc::set_parent_raw(oop value)            { jdk_internal_vm_StackChunk::set_parent_raw<P>(this, value); }\n+inline void stackChunkOopDesc::set_parent_raw(oop value)       { jdk_internal_vm_StackChunk::set_parent_raw<P>(this, value); }\n@@ -99,1 +106,0 @@\n-  assert(is_stackChunk(), \"\");\n@@ -104,1 +110,0 @@\n-  assert(is_stackChunk(), \"\");\n@@ -111,1 +116,0 @@\n-  assert(is_stackChunk(), \"\");\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-  _tail  = (stackChunkOop)jdk_internal_vm_Continuation::tail(_cont);\n+  _tail = jdk_internal_vm_Continuation::tail(_cont);\n@@ -455,2 +455,2 @@\n-  if (_tail != (oop)nullptr) {\n-    _tail = (stackChunkOop)jdk_internal_vm_Continuation::tail(_cont);\n+  if (_tail != nullptr) {\n+    _tail = jdk_internal_vm_Continuation::tail(_cont);\n@@ -505,1 +505,1 @@\n-  if (_tail == (oop)nullptr) {\n+  if (_tail == nullptr) {\n@@ -508,1 +508,1 @@\n-  assert(_tail->is_stackChunk(), \"\");\n+\n@@ -510,1 +510,1 @@\n-  for (stackChunkOop chunk = _tail->parent(); chunk != (oop)nullptr; chunk = chunk->parent()) {\n+  for (stackChunkOop chunk = _tail->parent(); chunk != nullptr; chunk = chunk->parent()) {\n@@ -527,1 +527,1 @@\n-  for (stackChunkOop chunk = cont.tail(); chunk != (oop)nullptr; chunk = chunk->parent()) {\n+  for (stackChunkOop chunk = cont.tail(); chunk != nullptr; chunk = chunk->parent()) {\n@@ -669,1 +669,1 @@\n-  if (thread == nullptr || cont == (oop)nullptr) {\n+  if (thread == nullptr || cont == nullptr) {\n@@ -972,1 +972,1 @@\n-  assert(contOop != (oop)nullptr, \"\");\n+  assert(contOop != nullptr, \"\");\n@@ -1010,1 +1010,1 @@\n-  for (stackChunkOop chunk = cont.tail(); chunk != (oop)nullptr; chunk = chunk->parent()) {\n+  for (stackChunkOop chunk = cont.tail(); chunk != nullptr; chunk = chunk->parent()) {\n@@ -1288,1 +1288,0 @@\n-  assert(chunk->is_stackChunk(), \"\");\n@@ -1568,1 +1567,1 @@\n-    if (chunk == (oop)nullptr) {\n+    if (chunk == nullptr) {\n@@ -1887,1 +1886,1 @@\n-    chunk = (stackChunkOop)allocator.initialize(start);\n+      chunk = stackChunkOopDesc::cast(allocator.initialize(start));\n@@ -1891,1 +1890,1 @@\n-    chunk = (stackChunkOop)allocator.allocate(); \/\/ can safepoint\n+      chunk = stackChunkOopDesc::cast(allocator.allocate()); \/\/ can safepoint\n@@ -1915,1 +1914,1 @@\n-  if (chunk0 != (oop)nullptr && chunk0->is_empty()) {\n+  if (chunk0 !=nullptr && chunk0->is_empty()) {\n@@ -1917,1 +1916,1 @@\n-    assert(chunk0 == (oop)nullptr || !chunk0->is_empty(), \"\");\n+    assert(chunk0 == nullptr || !chunk0->is_empty(), \"\");\n@@ -1922,1 +1921,1 @@\n-  assert(chunk->parent() == (oop)nullptr || chunk->parent()->is_stackChunk(), \"\");\n+  assert(chunk->parent() == nullptr || chunk->parent()->is_stackChunk(), \"\");\n@@ -2534,1 +2533,1 @@\n-    ls.print_cr(\"thaw slow return_barrier: %d \" INTPTR_FORMAT, return_barrier, p2i((stackChunkOopDesc*)chunk));\n+    ls.print_cr(\"thaw slow return_barrier: %d \" INTPTR_FORMAT, return_barrier, p2i(chunk));\n@@ -3053,1 +3052,1 @@\n-    if (o == (oop)nullptr || is_good_oop(o)) {\n+    if (o == nullptr || is_good_oop(o)) {\n@@ -3061,1 +3060,1 @@\n-    if (o == (oop)nullptr || is_good_oop(o)) {\n+    if (o == nullptr || is_good_oop(o)) {\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -139,1 +139,0 @@\n-  assert(chunk == NULL || chunk->is_stackChunk(), \"\");\n@@ -1614,2 +1613,0 @@\n-  assert(chunk->is_stackChunk(), \"\");\n-\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}