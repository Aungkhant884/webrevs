{"files":[{"patch":"@@ -444,1 +444,2 @@\n-        \/\/ This could be made more efficient by not creating the Carrier instance.\n+        \/\/ This could be made more efficient by not creating the Carrier instance,\n+        \/\/ but there isn't much in it.\n@@ -457,0 +458,2 @@\n+        \/\/ This could be made more efficient by not creating the Carrier instance,\n+        \/\/ but there isn't much in it.\n@@ -460,24 +463,0 @@\n-    \/**\n-     * Runs a value-returning operation with a snapshot of inheritable\n-     * scoped variables.\n-     *\n-     * @param op the operation to run\n-     * @param s the Snapshot. May be null.\n-     * @param <R> the type of the result of the function\n-     * @return the result\n-     * @throws Exception if the operation completes with an exception\n-     *\/\n-    public static <R> R callWithSnapshot(Callable<R> op, Snapshot s) throws Exception {\n-        return s.call(op);\n-    }\n-\n-    \/**\n-     * Runs an operation with this snapshot of inheritable scoped variables.\n-     *\n-     * @param op the operation to run\n-     * @param s the Snapshot. May be null.\n-     *\/\n-    public static void runWithSnapshot(Runnable op, Snapshot s) {\n-        s.run(op);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopeLocal.java","additions":4,"deletions":25,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -490,1 +490,1 @@\n-                ScopeLocal.runWithSnapshot(() -> tryFire(ASYNC), snapshot);\n+                snapshot.run(() -> tryFire(ASYNC));\n@@ -1834,1 +1834,1 @@\n-                ScopeLocal.runWithSnapshot(this::doRun, snapshot);\n+                snapshot.run(this::doRun);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -757,1 +757,1 @@\n-            ScopeLocal.runWithSnapshot(this::compute, snapshot);\n+            snapshot.run(this::compute);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CountedCompleter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n-            return ScopeLocal.callWithSnapshot(c, snapshot);\n+            return snapshot.call(c);\n","filename":"test\/jdk\/java\/lang\/ScopeLocal\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    public int sixValues_ScopeLocal(Blackhole bh) throws Exception {\n+    public int sixValues_ScopeLocal() throws Exception {\n@@ -79,1 +79,1 @@\n-            result = combine(result, tl1.get(), tl2.get(), tl3.get(), tl4.get(), tl5.get(), tl6.get());\n+            result = combine(result, sl1.get(), sl2.get(), sl3.get(), sl4.get(), sl5.get(), sl6.get());\n@@ -85,1 +85,1 @@\n-    public int sixValues_ThreadLocal(Blackhole bh) throws Exception {\n+    public int sixValues_ThreadLocal() throws Exception {\n@@ -174,1 +174,1 @@\n-        \/\/ Very slow\n+        \/\/ Very slow:\n@@ -196,2 +196,1 @@\n-    public Object\n-    callWithSnapshot_ScopeLocal() throws Exception{\n+    public Object callWithSnapshot_ScopeLocal() throws Exception{\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ScopeLocals.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -62,0 +62,4 @@\n+    static final ScopeLocal.Carrier VALUES = ScopeLocal\n+            .where(sl1, 42).where(sl2, 2).where(sl3, 3)\n+            .where(sl4, 4).where(sl5, 5).where(sl6, 6);\n+\n@@ -66,5 +70,3 @@\n-            ScopeLocal.where(sl1, 42).where(sl2, 2).where(sl3, 3)\n-                    .where(sl4, 4).where(sl5, 5).where(sl6, 6)\n-                    .where(sl_atomicInt, new AtomicInteger())\n-                    .where(sl_atomicRef, new AtomicReference<>())\n-                    .run(action);\n+            VALUES.where(sl_atomicInt, new AtomicInteger())\n+                  .where(sl_atomicRef, new AtomicReference<>())\n+                  .run(action);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ScopeLocalsData.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}