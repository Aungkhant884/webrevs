{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,8 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+static inline void relativize_one(intptr_t* const vfp, intptr_t* const hfp, int offset) {\n+  assert (*(hfp + offset) == *(vfp + offset), \"\");\n+  intptr_t* addr = hfp + offset;\n+  intptr_t value = *(intptr_t**)addr - vfp;\n+  *addr = value;\n+}\n+\n+inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, frame& hf) {\n@@ -127,1 +134,1 @@\n-  assert ((f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset) != 0)\n+  assert ((f.at(frame::interpreter_frame_last_sp_offset) != 0)\n@@ -129,1 +136,1 @@\n-  assert (f.fp() > (intptr_t*)f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert (f.fp() > (intptr_t*)f.at(frame::interpreter_frame_initial_sp_offset), \"\");\n@@ -140,1 +147,1 @@\n-  relativize(vfp, hfp, frame::interpreter_frame_initial_sp_offset); \/\/ == block_top == block_bottom\n+  relativize_one(vfp, hfp, frame::interpreter_frame_initial_sp_offset); \/\/ == block_top == block_bottom\n@@ -143,4 +150,4 @@\n-  assert (hf.unextended_sp() == (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_last_sp_offset), \"\");\n-  assert (hf.unextended_sp() <= (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_initial_sp_offset), \"\");\n-  assert (hf.fp()            >  (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_initial_sp_offset), \"\");\n-  assert (hf.fp()            <= (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_locals_offset), \"\");\n+  assert (hf.unextended_sp() == (intptr_t*)hf.at(frame::interpreter_frame_last_sp_offset), \"\");\n+  assert (hf.unextended_sp() <= (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert (hf.fp()            >  (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert (hf.fp()            <= (intptr_t*)hf.at(frame::interpreter_frame_locals_offset), \"\");\n@@ -167,1 +174,1 @@\n-    || caller.unextended_sp() == (intptr_t*)caller.at<frame::addressing::RELATIVE>(frame::interpreter_frame_last_sp_offset), \"\");\n+    || caller.unextended_sp() == (intptr_t*)caller.at(frame::interpreter_frame_last_sp_offset), \"\");\n@@ -171,2 +178,2 @@\n-    assert ((intptr_t*)f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset) == nullptr\n-      || f.unextended_sp() == (intptr_t*)f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset), \"\");\n+    assert ((intptr_t*)f.at(frame::interpreter_frame_last_sp_offset) == nullptr\n+      || f.unextended_sp() == (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset), \"\");\n@@ -218,1 +225,6 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+static inline void derelativize_one(intptr_t* const fp, int offset) {\n+  intptr_t* addr = fp + offset;\n+  *addr = (intptr_t)(fp + *addr);\n+}\n+\n+inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, frame& f) {\n@@ -221,2 +233,2 @@\n-  derelativize(vfp, frame::interpreter_frame_last_sp_offset);\n-  derelativize(vfp, frame::interpreter_frame_initial_sp_offset);\n+  derelativize_one(vfp, frame::interpreter_frame_last_sp_offset);\n+  derelativize_one(vfp, frame::interpreter_frame_initial_sp_offset);\n@@ -241,1 +253,1 @@\n-    const int fsize = Interpreted::frame_bottom<frame::addressing::RELATIVE>(hf) - hf.unextended_sp();\n+    const int fsize = Interpreted::frame_bottom(hf) - hf.unextended_sp();\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -327,4 +327,0 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n-\n-template <frame::addressing pointers>\n@@ -332,1 +328,1 @@\n-  BasicObjectLock* result = (BasicObjectLock*) at<pointers>(interpreter_frame_monitor_block_top_offset);\n+  BasicObjectLock* result = (BasicObjectLock*) at(interpreter_frame_monitor_block_top_offset);\n@@ -564,4 +560,0 @@\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n-\n-template <frame::addressing pointers>\n@@ -570,1 +562,1 @@\n-  return &interpreter_frame_tos_address<pointers>()[index];\n+  return &interpreter_frame_tos_address()[index];\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -172,1 +172,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -62,0 +63,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -103,0 +105,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -116,0 +119,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -120,1 +124,1 @@\n-inline frame::frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map, bool dummy) {\n+inline frame::frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map, bool relative) {\n@@ -129,0 +133,2 @@\n+  _pointers = relative ? addressing::RELATIVE : addressing::ABSOLUTE;\n+  assert(relative || !is_interpreted_frame(), \"these interpreter frames are heap frames\");\n@@ -149,0 +155,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -185,0 +192,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -269,1 +277,0 @@\n-template <frame::addressing pointers>\n@@ -271,1 +278,1 @@\n-  return (intptr_t*)at<pointers>(interpreter_frame_last_sp_offset);\n+  return (intptr_t*)at(interpreter_frame_last_sp_offset);\n@@ -302,1 +309,0 @@\n-template <frame::addressing pointers>\n@@ -304,1 +310,1 @@\n-  intptr_t* last_sp = interpreter_frame_last_sp<pointers>();\n+  intptr_t* last_sp = interpreter_frame_last_sp();\n@@ -311,1 +317,1 @@\n-    assert(last_sp <= (intptr_t*) interpreter_frame_monitor_end<pointers>(), \"bad tos\");\n+    assert(last_sp <= (intptr_t*) interpreter_frame_monitor_end(), \"bad tos\");\n@@ -328,1 +334,0 @@\n-template <frame::addressing pointers>\n@@ -330,1 +335,1 @@\n-  intptr_t* monitor_end = (intptr_t*) interpreter_frame_monitor_end<pointers>();\n+  intptr_t* monitor_end = (intptr_t*) interpreter_frame_monitor_end();\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-template <frame::addressing pointers>\n@@ -56,1 +55,1 @@\n-  *la = pointers == frame::addressing::RELATIVE ? (intptr_t)(sp - f.fp()) : (intptr_t)sp;\n+  *la = _pointers == frame::addressing::RELATIVE ? (intptr_t)(sp - f.fp()) : (intptr_t)sp;\n@@ -87,1 +86,0 @@\n-template <frame::addressing pointers>\n@@ -89,1 +87,1 @@\n-  return (intptr_t*)f.at<pointers>(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n+  return (intptr_t*)f.at(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_helpers_aarch64.inline.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-            - (intptr_t*)f.interpreter_frame_monitor_end<frame::addressing::RELATIVE>())\/BasicObjectLock::size();\n+            - (intptr_t*)f.interpreter_frame_monitor_end())\/BasicObjectLock::size();\n","filename":"src\/hotspot\/cpu\/aarch64\/instanceStackChunkKlass_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -278,4 +278,0 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n-\n-template <frame::addressing pointers>\n@@ -500,4 +496,0 @@\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n-\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -126,1 +126,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -64,0 +65,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -88,0 +90,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -108,0 +111,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -177,1 +181,0 @@\n-template <frame::addressing pointers>\n@@ -203,1 +206,0 @@\n-template <frame::addressing pointers>\n@@ -249,1 +251,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-template <frame::addressing pointers>\n@@ -76,1 +75,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/arm\/frame_helpers_arm.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-template <frame::addressing pointers>\n@@ -76,1 +75,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/ppc\/frame_helpers_ppc.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -390,1 +390,2 @@\n-frame::frame(void* sp, void* fp, void* pc) : _sp((intptr_t*)sp), _unextended_sp((intptr_t*)sp) {\n+frame::frame(void* sp, void* fp, void* pc) : _sp((intptr_t*)sp), _unextended_sp((intptr_t*)sp),\n+                                             _pointers(addressing::ABSOLUTE) {\n@@ -397,4 +398,0 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n-\n-template <frame::addressing pointers>\n@@ -405,4 +402,0 @@\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n-\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -404,1 +404,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n-inline frame::frame() : _sp(NULL), _pc(NULL), _cb(NULL),  _deopt_state(unknown), _unextended_sp(NULL), _fp(NULL) {}\n+inline frame::frame() : _sp(NULL), _pc(NULL), _cb(NULL),  _deopt_state(unknown), _unextended_sp(NULL), _fp(NULL),\n+                        _pointers(addressing::ABSOLUTE) {}\n@@ -60,1 +61,1 @@\n-inline frame::frame(intptr_t* sp) : _sp(sp), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp) : _sp(sp), _unextended_sp(sp), _pointers(addressing::ABSOLUTE) {\n@@ -64,1 +65,1 @@\n-inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _unextended_sp(sp), _pointers(addressing::ABSOLUTE) {\n@@ -68,1 +69,2 @@\n-inline frame::frame(intptr_t* sp, address pc, intptr_t* unextended_sp) : _sp(sp), _unextended_sp(unextended_sp) {\n+inline frame::frame(intptr_t* sp, address pc, intptr_t* unextended_sp) : _sp(sp), _unextended_sp(unextended_sp),\n+                    _pointers(addressing::ABSOLUTE) {\n@@ -174,1 +176,0 @@\n-template <frame::addressing pointers>\n@@ -180,1 +181,0 @@\n-template <frame::addressing pointers>\n@@ -231,1 +231,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-template <frame::addressing pointers>\n@@ -76,1 +75,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/s390\/frame_helpers_s390.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -647,4 +647,0 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n-\n-template <frame::addressing pointers>\n@@ -655,4 +651,0 @@\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n-\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -489,1 +489,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,2 @@\n-inline frame::frame() : _sp(NULL), _pc(NULL), _cb(NULL), _deopt_state(unknown), _unextended_sp(NULL), _fp(NULL) {}\n+inline frame::frame() : _sp(NULL), _pc(NULL), _cb(NULL), _deopt_state(unknown), _unextended_sp(NULL), _fp(NULL),\n+                        _pointers(addressing::ABSOLUTE) { }\n@@ -59,1 +60,1 @@\n-inline frame::frame(intptr_t* sp) : _sp(sp), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp) : _sp(sp), _unextended_sp(sp), _pointers(addressing::ABSOLUTE) {\n@@ -63,1 +64,1 @@\n-inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _unextended_sp(sp), _pointers(addressing::ABSOLUTE) {\n@@ -67,1 +68,2 @@\n-inline frame::frame(intptr_t* sp, address pc, intptr_t* unextended_sp) : _sp(sp), _unextended_sp(unextended_sp) {\n+inline frame::frame(intptr_t* sp, address pc, intptr_t* unextended_sp) : _sp(sp), _unextended_sp(unextended_sp),\n+                                                                         _pointers(addressing::ABSOLUTE) {\n@@ -74,1 +76,1 @@\n-  _sp((intptr_t*)sp), _pc(NULL), _cb(NULL), _unextended_sp((intptr_t*)unextended_sp) {\n+  _sp((intptr_t*)sp), _pc(NULL), _cb(NULL), _unextended_sp((intptr_t*)unextended_sp), _pointers(addressing::ABSOLUTE) {\n@@ -171,1 +173,0 @@\n-template <frame::addressing pointers>\n@@ -205,1 +206,0 @@\n-template <frame::addressing pointers>\n@@ -298,1 +298,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,8 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+static inline void relativize_one(intptr_t* const vfp, intptr_t* const hfp, int offset) {\n+  assert (*(hfp + offset) == *(vfp + offset), \"\");\n+  intptr_t* addr = hfp + offset;\n+  intptr_t value = *(intptr_t**)addr - vfp;\n+  *addr = value;\n+}\n+\n+inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, frame& hf) {\n@@ -127,1 +134,1 @@\n-  assert ((f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset) != 0)\n+  assert ((f.at(frame::interpreter_frame_last_sp_offset) != 0)\n@@ -129,1 +136,1 @@\n-  assert (f.fp() > (intptr_t*)f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert (f.fp() > (intptr_t*)f.at(frame::interpreter_frame_initial_sp_offset), \"\");\n@@ -138,1 +145,1 @@\n-  relativize(vfp, hfp, frame::interpreter_frame_initial_sp_offset); \/\/ == block_top == block_bottom\n+  relativize_one(vfp, hfp, frame::interpreter_frame_initial_sp_offset); \/\/ == block_top == block_bottom\n@@ -141,4 +148,4 @@\n-  assert (hf.unextended_sp() == (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_last_sp_offset), \"\");\n-  assert (hf.unextended_sp() <= (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_initial_sp_offset), \"\");\n-  assert (hf.fp()            >  (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_initial_sp_offset), \"\");\n-  assert (hf.fp()            <= (intptr_t*)hf.at<frame::addressing::RELATIVE>(frame::interpreter_frame_locals_offset), \"\");\n+  assert (hf.unextended_sp() == (intptr_t*)hf.at(frame::interpreter_frame_last_sp_offset), \"\");\n+  assert (hf.unextended_sp() <= (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert (hf.fp()            >  (intptr_t*)hf.at(frame::interpreter_frame_initial_sp_offset), \"\");\n+  assert (hf.fp()            <= (intptr_t*)hf.at(frame::interpreter_frame_locals_offset), \"\");\n@@ -165,1 +172,1 @@\n-    || caller.unextended_sp() == (intptr_t*)caller.at<frame::addressing::RELATIVE>(frame::interpreter_frame_last_sp_offset), \"\");\n+    || caller.unextended_sp() == (intptr_t*)caller.at(frame::interpreter_frame_last_sp_offset), \"\");\n@@ -169,2 +176,2 @@\n-    assert ((intptr_t*)f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset) == nullptr\n-      || f.unextended_sp() == (intptr_t*)f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset), \"\");\n+    assert ((intptr_t*)f.at(frame::interpreter_frame_last_sp_offset) == nullptr\n+      || f.unextended_sp() == (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset), \"\");\n@@ -180,1 +187,1 @@\n-    frame hf(sp, sp, fp, f.pc(), nullptr, nullptr, false);\n+    frame hf(sp, sp, fp, f.pc(), nullptr, nullptr, true \/* relative *\/);\n@@ -216,1 +223,6 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+static inline void derelativize_one(intptr_t* const fp, int offset) {\n+  intptr_t* addr = fp + offset;\n+  *addr = (intptr_t)(fp + *addr);\n+}\n+\n+inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, frame& f) {\n@@ -219,2 +231,2 @@\n-  derelativize(vfp, frame::interpreter_frame_last_sp_offset);\n-  derelativize(vfp, frame::interpreter_frame_initial_sp_offset);\n+  derelativize_one(vfp, frame::interpreter_frame_last_sp_offset);\n+  derelativize_one(vfp, frame::interpreter_frame_initial_sp_offset);\n@@ -239,1 +251,1 @@\n-    const int fsize = Interpreted::frame_bottom<frame::addressing::RELATIVE>(hf) - hf.unextended_sp();\n+    const int fsize = Interpreted::frame_bottom(hf) - hf.unextended_sp();\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":29,"deletions":17,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-template <frame::addressing pointers>\n@@ -56,1 +55,1 @@\n-  *la = pointers == frame::addressing::RELATIVE ? (intptr_t)(sp - f.fp()) : (intptr_t)sp;\n+  *la = f._pointers == frame::addressing::RELATIVE ? (intptr_t)(sp - f.fp()) : (intptr_t)sp;\n@@ -87,1 +86,0 @@\n-template <frame::addressing pointers>\n@@ -89,1 +87,1 @@\n-  return (intptr_t*)f.at<pointers>(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n+  return (intptr_t*)f.at(frame::interpreter_frame_locals_offset) + 1; \/\/ exclusive, so we add 1 word\n","filename":"src\/hotspot\/cpu\/x86\/frame_helpers_x86.inline.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -329,4 +329,0 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n-\n-template <frame::addressing pointers>\n@@ -334,1 +330,1 @@\n-  BasicObjectLock* result = (BasicObjectLock*) at<pointers>(interpreter_frame_monitor_block_top_offset);\n+  BasicObjectLock* result = (BasicObjectLock*) at(interpreter_frame_monitor_block_top_offset);\n@@ -596,4 +592,0 @@\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n-\n-template <frame::addressing pointers>\n@@ -602,1 +594,1 @@\n-  return &interpreter_frame_tos_address<pointers>()[index];\n+  return &interpreter_frame_tos_address()[index];\n@@ -655,0 +647,21 @@\n+void frame::print_raw() const {\n+  tty->print_cr(\"pc_return \" INTPTR_FORMAT, *addr_at(pc_return_offset));\n+  tty->print_cr(\"link \" INTPTR_FORMAT, *addr_at(link_offset));\n+  tty->print_cr(\"return_addr \" INTPTR_FORMAT, *addr_at(return_addr_offset));\n+  tty->print_cr(\"sender_sp \" INTPTR_FORMAT, *addr_at(sender_sp_offset));\n+  tty->print_cr(\"interpreter_frame_result_handler \" INTPTR_FORMAT, *addr_at(interpreter_frame_result_handler_offset));\n+  tty->print_cr(\"interpreter_frame_oop_temp \" INTPTR_FORMAT, *addr_at(interpreter_frame_oop_temp_offset));\n+  tty->print_cr(\"interpreter_frame_sender_sp \" INTPTR_FORMAT, *addr_at(interpreter_frame_sender_sp_offset));\n+  tty->print_cr(\"interpreter_frame_last_sp \" INTPTR_FORMAT, *addr_at(interpreter_frame_last_sp_offset));\n+  tty->print_cr(\"interpreter_frame_method \" INTPTR_FORMAT, *addr_at(interpreter_frame_method_offset));\n+  tty->print_cr(\"interpreter_frame_mirror \" INTPTR_FORMAT, *addr_at(interpreter_frame_mirror_offset));\n+  tty->print_cr(\"interpreter_frame_mdp \" INTPTR_FORMAT, *addr_at(interpreter_frame_mdp_offset));\n+  tty->print_cr(\"interpreter_frame_cache \" INTPTR_FORMAT, *addr_at(interpreter_frame_cache_offset));\n+  tty->print_cr(\"interpreter_frame_locals \" INTPTR_FORMAT, *addr_at(interpreter_frame_locals_offset));\n+  tty->print_cr(\"interpreter_frame_bcp \" INTPTR_FORMAT, *addr_at(interpreter_frame_bcp_offset));\n+  tty->print_cr(\"interpreter_frame_initial_sp \" INTPTR_FORMAT, *addr_at(interpreter_frame_initial_sp_offset));\n+  tty->print_cr(\"interpreter_frame_monitor_block_top \" INTPTR_FORMAT, *addr_at(interpreter_frame_monitor_block_top_offset));\n+  tty->print_cr(\"interpreter_frame_monitor_block_bottom \" INTPTR_FORMAT, *addr_at(interpreter_frame_monitor_block_bottom_offset));\n+  tty->print_cr(\"address::%s\", _pointers == addressing::RELATIVE ? \"relative\" : \"absolute\");\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":23,"deletions":10,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map, bool dummy); \/\/ used for fast frame construction by continuations\n+  frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map, bool relative); \/\/ used for fast frame construction by continuations\n@@ -162,1 +162,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -61,0 +62,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -94,0 +96,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -107,0 +110,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -111,1 +115,1 @@\n-inline frame::frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map, bool dummy) {\n+inline frame::frame(intptr_t* sp, intptr_t* unextended_sp, intptr_t* fp, address pc, CodeBlob* cb, const ImmutableOopMap* oop_map, bool relative) {\n@@ -119,0 +123,2 @@\n+  _pointers = relative ? addressing::RELATIVE : addressing::ABSOLUTE;\n+  assert(relative || !is_interpreted_frame(), \"these interpreter frames are heap frames\");\n@@ -138,0 +144,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -149,0 +156,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -255,1 +263,0 @@\n-template <frame::addressing pointers>\n@@ -257,1 +264,1 @@\n-  return (intptr_t*)at<pointers>(interpreter_frame_last_sp_offset);\n+  return (intptr_t*)at(interpreter_frame_last_sp_offset);\n@@ -289,1 +296,0 @@\n-template <frame::addressing pointers>\n@@ -291,1 +297,1 @@\n-  intptr_t* last_sp = interpreter_frame_last_sp<pointers>();\n+  intptr_t* last_sp = interpreter_frame_last_sp();\n@@ -298,1 +304,1 @@\n-    assert(last_sp <= (intptr_t*) interpreter_frame_monitor_end<pointers>(), \"bad tos\");\n+    assert(last_sp <= (intptr_t*) interpreter_frame_monitor_end(), \"bad tos\");\n@@ -315,1 +321,0 @@\n-template <frame::addressing pointers>\n@@ -317,1 +322,1 @@\n-  intptr_t* monitor_end = (intptr_t*) interpreter_frame_monitor_end<pointers>();\n+  intptr_t* monitor_end = (intptr_t*) interpreter_frame_monitor_end();\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-            - (intptr_t*)f.interpreter_frame_monitor_end<frame::addressing::RELATIVE>())\/BasicObjectLock::size();\n+            - (intptr_t*)f.interpreter_frame_monitor_end())\/BasicObjectLock::size();\n","filename":"src\/hotspot\/cpu\/x86\/instanceStackChunkKlass_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n-template <frame::addressing pointers>\n@@ -76,1 +75,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/zero\/frame_helpers_zero.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,4 +86,0 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n-\n-template <frame::addressing pointers>\n@@ -227,4 +223,0 @@\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n-\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -50,0 +51,1 @@\n+  _pointers = addressing::ABSOLUTE;\n@@ -118,1 +120,0 @@\n-template <frame::addressing pointers>\n@@ -132,1 +133,0 @@\n-template <frame::addressing pointers>\n@@ -186,1 +186,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -794,1 +794,1 @@\n-    fr.template describe<frame::addressing::RELATIVE>(_values, _frame_no++, get_map(map, f.sp()));\n+    fr.describe(_values, _frame_no++, get_map(map, f.sp()));\n@@ -829,1 +829,1 @@\n-    f.print_on<frame::addressing::RELATIVE>(_st);\n+    f.print_on(_st);\n@@ -881,1 +881,1 @@\n-  to_frame().template print_on<frame::addressing::RELATIVE>(st);\n+  to_frame().print_on(st);\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -325,1 +325,1 @@\n-    f.oops_interpreted_do<frame::addressing::RELATIVE>(closure, nullptr, true);\n+    f.oops_interpreted_do(closure, nullptr, true);\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -202,1 +202,3 @@\n-  return derelativize(fr).interpreter_frame_expression_stack_at<frame::addressing::RELATIVE>(index);\n+  frame heap_frame = derelativize(fr);\n+  assert(heap_frame.is_interpreted_heap_frame(), \"must be\");\n+  return heap_frame.interpreter_frame_expression_stack_at(index);\n@@ -206,1 +208,3 @@\n-  return derelativize(fr).interpreter_frame_local_at<frame::addressing::RELATIVE>(index);\n+  frame heap_frame = derelativize(fr);\n+  assert(heap_frame.is_interpreted_heap_frame(), \"must be\");\n+  return heap_frame.interpreter_frame_local_at(index);\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -188,1 +188,0 @@\n-template <frame::addressing pointers>\n@@ -1006,1 +1005,1 @@\n-  static inline void relativize_interpreted_frame_metadata(const frame& f, const frame& hf);\n+  static inline void relativize_interpreted_frame_metadata(const frame& f, frame& hf);\n@@ -1008,7 +1007,0 @@\n-\n-  static inline void relativize(intptr_t* const vfp, intptr_t* const hfp, int offset) {\n-    assert (*(hfp + offset) == *(vfp + offset), \"\");\n-    intptr_t* addr = hfp + offset;\n-    intptr_t value = *(intptr_t**)addr - vfp;\n-    *addr = value;\n-  }\n@@ -1427,1 +1419,2 @@\n-      DEBUG_ONLY(print_frame_layout<frame::addressing::RELATIVE>(hf, &ls);)\n+      assert(hf.is_interpreted_heap_frame(), \"should be\");\n+      DEBUG_ONLY(print_frame_layout(hf, &ls);)\n@@ -1430,1 +1423,1 @@\n-        hf.print_on<frame::addressing::RELATIVE>(&ls);\n+        hf.print_on(&ls);\n@@ -1554,1 +1547,2 @@\n-      caller.print_on<frame::addressing::RELATIVE>(&ls);\n+      assert(caller.is_interpreted_heap_frame(), \"should be\");\n+      caller.print_on(&ls);\n@@ -1582,1 +1576,2 @@\n-      Interpreted::patch_sender_sp<frame::addressing::RELATIVE>(hf, caller.unextended_sp());\n+      assert(hf.is_interpreted_heap_frame(), \"should be\");\n+      Interpreted::patch_sender_sp(hf, caller.unextended_sp());\n@@ -1600,2 +1595,2 @@\n-      assert ((f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset) != 0) || (f.unextended_sp() == f.sp()), \"\");\n-      intptr_t* real_unextended_sp = (intptr_t*)f.at<frame::addressing::ABSOLUTE>(frame::interpreter_frame_last_sp_offset);\n+      assert ((f.at(frame::interpreter_frame_last_sp_offset) != 0) || (f.unextended_sp() == f.sp()), \"\");\n+      intptr_t* real_unextended_sp = (intptr_t*)f.at(frame::interpreter_frame_last_sp_offset);\n@@ -1611,1 +1606,1 @@\n-    assert (Interpreted::frame_bottom<frame::addressing::ABSOLUTE>(f) >= f.fp() + ContinuationHelper::frame_metadata + locals, \"\");\/\/ = on x86\n+    assert (Interpreted::frame_bottom(f) >= f.fp() + ContinuationHelper::frame_metadata + locals, \"\");\/\/ = on x86\n@@ -1640,1 +1635,1 @@\n-    assert (Interpreted::frame_bottom<frame::addressing::RELATIVE>(hf) == hsp + fsize, \"\");\n+    assert (Interpreted::frame_bottom(hf) == hsp + fsize, \"\");\n@@ -1643,2 +1638,2 @@\n-    copy_to_chunk<copy_alignment::WORD_ALIGNED>(Interpreted::frame_bottom<frame::addressing::ABSOLUTE>(f) - locals,\n-                                             Interpreted::frame_bottom<frame::addressing::RELATIVE>(hf) - locals, locals); \/\/ copy locals\n+    copy_to_chunk<copy_alignment::WORD_ALIGNED>(Interpreted::frame_bottom(f) - locals,\n+                                             Interpreted::frame_bottom(hf) - locals, locals); \/\/ copy locals\n@@ -1742,1 +1737,2 @@\n-      top.print_on<frame::addressing::RELATIVE>(&ls);\n+      assert(top.is_interpreted_heap_frame(), \"should be\");\n+      top.print_on(&ls);\n@@ -1764,1 +1760,2 @@\n-      _cont.last_frame().template print_on<frame::addressing::RELATIVE>(&ls);\n+      assert(_cont.last_frame().is_interpreted_heap_frame(), \"should be\");\n+      _cont.last_frame().print_on(&ls);\n@@ -2181,1 +2178,1 @@\n-  static inline void derelativize_interpreted_frame_metadata(const frame& hf, const frame& f);\n+  static inline void derelativize_interpreted_frame_metadata(const frame& hf, frame& f);\n@@ -2183,5 +2180,0 @@\n-\n-  static inline void derelativize(intptr_t* const fp, int offset) {\n-    intptr_t* addr = fp + offset;\n-    *addr = (intptr_t)(fp + *addr);\n-  }\n@@ -2419,1 +2411,2 @@\n-      hf.print_on<frame::addressing::RELATIVE>(&ls);\n+      assert(hf.is_interpreted_heap_frame(), \"should have created a relative frame\");\n+      hf.print_on(&ls);\n@@ -2534,1 +2527,2 @@\n-      hf.print_on<frame::addressing::RELATIVE>(&ls);\n+      assert(hf.is_interpreted_heap_frame(), \"should be\");\n+      hf.print_on(&ls);\n@@ -2557,1 +2551,1 @@\n-      Interpreted::patch_sender_sp<frame::addressing::ABSOLUTE>(f, caller.unextended_sp());\n+      Interpreted::patch_sender_sp(f, caller.unextended_sp());\n@@ -2580,0 +2574,1 @@\n+\n@@ -2582,1 +2577,1 @@\n-    intptr_t* const frame_bottom = Interpreted::frame_bottom<frame::addressing::ABSOLUTE>(f);\n+    intptr_t* const frame_bottom = Interpreted::frame_bottom(f);\n@@ -2584,1 +2579,2 @@\n-    const int fsize = Interpreted::frame_bottom<frame::addressing::RELATIVE>(hf) - hsp;\n+    assert(hf.is_interpreted_heap_frame(), \"should be\");\n+    const int fsize = Interpreted::frame_bottom(hf) - hsp;\n@@ -2589,1 +2585,1 @@\n-    assert (Interpreted::frame_bottom<frame::addressing::ABSOLUTE>(f) == vsp + fsize, \"\");\n+    assert (Interpreted::frame_bottom(f) == vsp + fsize, \"\");\n@@ -2593,2 +2589,5 @@\n-    copy_from_chunk<copy_alignment::WORD_ALIGNED>(Interpreted::frame_bottom<frame::addressing::RELATIVE>(hf) - locals,\n-                                          Interpreted::frame_bottom<frame::addressing::ABSOLUTE>(f) - locals, locals); \/\/ copy locals\n+    assert(hf.is_interpreted_heap_frame(), \"should be\");\n+    assert(!f.is_interpreted_heap_frame(), \"should not be\");\n+\n+    copy_from_chunk<copy_alignment::WORD_ALIGNED>(Interpreted::frame_bottom(hf) - locals,\n+                                          Interpreted::frame_bottom(f) - locals, locals); \/\/ copy locals\n@@ -2605,1 +2604,1 @@\n-      print_frame_layout<frame::addressing::ABSOLUTE>(f, &ls);\n+      print_frame_layout(f, &ls);\n@@ -2610,1 +2609,1 @@\n-    assert(Interpreted::frame_bottom<frame::addressing::ABSOLUTE>(f) <= Frame::frame_top(caller), \"\");\n+    assert(Interpreted::frame_bottom(f) <= Frame::frame_top(caller), \"\");\n@@ -2620,1 +2619,2 @@\n-      clear_bitmap_bits(Interpreted::frame_bottom<frame::addressing::RELATIVE>(hf) - locals, locals);\n+      assert(hf.is_interpreted_heap_frame(), \"should be\");\n+      clear_bitmap_bits(Interpreted::frame_bottom(hf) - locals, locals);\n@@ -2764,1 +2764,2 @@\n-      _cont.last_frame().template print_on<frame::addressing::RELATIVE>(&ls);\n+      assert(_cont.last_frame().is_interpreted_heap_frame(), \"should be\");\n+      _cont.last_frame().print_on(&ls);\n@@ -3011,1 +3012,0 @@\n-template <frame::addressing pointers>\n@@ -3016,1 +3016,3 @@\n-  RegisterMap map(pointers == frame::addressing::RELATIVE ? (JavaThread*)nullptr : JavaThread::current(), true, false, false);\n+  RegisterMap map(f._pointers == frame::addressing::RELATIVE ?\n+                     (JavaThread*)nullptr :\n+                     JavaThread::current(), true, false, false);\n@@ -3020,1 +3022,1 @@\n-  const_cast<frame&>(f).describe<pointers>(values, 0, &map);\n+  const_cast<frame&>(f).describe(values, 0, &map);\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":44,"deletions":42,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -444,4 +444,0 @@\n-template BasicObjectLock* frame::next_monitor_in_interpreter_frame<frame::addressing::ABSOLUTE>(BasicObjectLock* current) const;\n-template BasicObjectLock* frame::next_monitor_in_interpreter_frame<frame::addressing::RELATIVE>(BasicObjectLock* current) const;\n-\n-template <frame::addressing pointers>\n@@ -451,1 +447,1 @@\n-  interpreter_frame_verify_monitor<pointers>(current);\n+  interpreter_frame_verify_monitor(current);\n@@ -469,4 +465,0 @@\n-template intptr_t* frame::interpreter_frame_local_at<frame::addressing::ABSOLUTE>(int index) const;\n-template intptr_t* frame::interpreter_frame_local_at<frame::addressing::RELATIVE>(int index) const;\n-\n-template <frame::addressing pointers>\n@@ -475,1 +467,1 @@\n-  intptr_t* first = pointers == addressing::RELATIVE\n+  intptr_t* first = _pointers == addressing::RELATIVE\n@@ -481,4 +473,0 @@\n-template intptr_t* frame::interpreter_frame_expression_stack_at<frame::addressing::ABSOLUTE>(jint index) const;\n-template intptr_t* frame::interpreter_frame_expression_stack_at<frame::addressing::RELATIVE>(jint index) const;\n-\n-template <frame::addressing pointers>\n@@ -488,1 +476,1 @@\n-  return &(interpreter_frame_expression_stack<pointers>()[n]);\n+  return &(interpreter_frame_expression_stack()[n]);\n@@ -491,4 +479,0 @@\n-template jint frame::interpreter_frame_expression_stack_size<frame::addressing::ABSOLUTE>() const;\n-template jint frame::interpreter_frame_expression_stack_size<frame::addressing::RELATIVE>() const;\n-\n-template <frame::addressing pointers>\n@@ -501,2 +485,2 @@\n-    stack_size = (interpreter_frame_expression_stack<pointers>() -\n-                  interpreter_frame_tos_address<pointers>() + 1)\/element_size;\n+    stack_size = (interpreter_frame_expression_stack() -\n+                  interpreter_frame_tos_address() + 1)\/element_size;\n@@ -504,2 +488,2 @@\n-    stack_size = (interpreter_frame_tos_address<pointers>() -\n-                  interpreter_frame_expression_stack<pointers>() + 1)\/element_size;\n+    stack_size = (interpreter_frame_tos_address() -\n+                  interpreter_frame_expression_stack() + 1)\/element_size;\n@@ -563,5 +547,0 @@\n-\n-template void frame::print_on<frame::addressing::ABSOLUTE>(outputStream* st) const;\n-template void frame::print_on<frame::addressing::RELATIVE>(outputStream* st) const;\n-\n-template <frame::addressing pointers>\n@@ -571,1 +550,1 @@\n-    interpreter_frame_print_on<pointers>(st);\n+    interpreter_frame_print_on(st);\n@@ -575,1 +554,0 @@\n-template <frame::addressing pointers>\n@@ -581,1 +559,1 @@\n-    intptr_t x = *interpreter_frame_local_at<pointers>(i);\n+    intptr_t x = *interpreter_frame_local_at(i);\n@@ -586,2 +564,2 @@\n-  for (i = interpreter_frame_expression_stack_size<pointers>() - 1; i >= 0; --i ) {\n-    intptr_t x = *interpreter_frame_expression_stack_at<pointers>(i);\n+  for (i = interpreter_frame_expression_stack_size() - 1; i >= 0; --i ) {\n+    intptr_t x = *interpreter_frame_expression_stack_at(i);\n@@ -593,1 +571,1 @@\n-  for (BasicObjectLock* current = interpreter_frame_monitor_end<pointers>();\n+  for (BasicObjectLock* current = interpreter_frame_monitor_end();\n@@ -595,1 +573,1 @@\n-       current = next_monitor_in_interpreter_frame<pointers>(current)) {\n+       current = next_monitor_in_interpreter_frame(current)) {\n@@ -610,1 +588,1 @@\n-  st->print_cr(\" - locals [\" INTPTR_FORMAT \"]\", p2i(interpreter_frame_local_at<pointers>(0)));\n+  st->print_cr(\" - locals [\" INTPTR_FORMAT \"]\", p2i(interpreter_frame_local_at(0)));\n@@ -762,1 +740,0 @@\n-template <frame::addressing pointers>\n@@ -782,1 +759,1 @@\n-      addr = (oop*) _fr->interpreter_frame_local_at<pointers>(offset);\n+      addr = (oop*) _fr->interpreter_frame_local_at(offset);\n@@ -786,1 +763,1 @@\n-      addr = (oop*) _fr->interpreter_frame_expression_stack_at<pointers>((offset - _max_locals));\n+      addr = (oop*) _fr->interpreter_frame_expression_stack_at((offset - _max_locals));\n@@ -791,1 +768,1 @@\n-        in_stack = (intptr_t*)addr <= _fr->interpreter_frame_tos_address<pointers>();\n+        in_stack = (intptr_t*)addr <= _fr->interpreter_frame_tos_address();\n@@ -793,1 +770,1 @@\n-        in_stack = (intptr_t*)addr >= _fr->interpreter_frame_tos_address<pointers>();\n+        in_stack = (intptr_t*)addr >= _fr->interpreter_frame_tos_address();\n@@ -906,1 +883,0 @@\n-template <frame::addressing pointers>\n@@ -920,1 +896,1 @@\n-  oops_interpreted_do0<pointers>(f, map, m, bci, mask);\n+  oops_interpreted_do0(f, map, m, bci, mask);\n@@ -923,6 +899,0 @@\n-\/\/ Initialize explicitly so that these can be used only with definitions.\n-\/\/ TODO: Rectify as Loom stabilizes...\n-template void frame::oops_interpreted_do<frame::addressing::ABSOLUTE>(OopClosure* f, const RegisterMap* map, bool query_oop_map_cache) const;\n-template void frame::oops_interpreted_do<frame::addressing::RELATIVE>(OopClosure* f, const RegisterMap* map, bool query_oop_map_cache) const;\n-\n-template <frame::addressing pointers>\n@@ -940,1 +910,1 @@\n-    BasicObjectLock* current = interpreter_frame_monitor_end<pointers>();\n+    BasicObjectLock* current = interpreter_frame_monitor_end();\n@@ -942,1 +912,1 @@\n-    current = next_monitor_in_interpreter_frame<pointers>(current)\n+    current = next_monitor_in_interpreter_frame(current)\n@@ -945,1 +915,1 @@\n-    interpreter_frame_verify_monitor<pointers>(current);\n+    interpreter_frame_verify_monitor(current);\n@@ -975,1 +945,1 @@\n-          interpreter_frame_expression_stack_size<pointers>() > 0) {\n+          interpreter_frame_expression_stack_size() > 0) {\n@@ -992,1 +962,1 @@\n-  InterpreterFrameClosure<pointers> blk(this, max_locals, m->max_stack(), f);\n+  InterpreterFrameClosure blk(this, max_locals, m->max_stack(), f);\n@@ -1182,2 +1152,2 @@\n-    !map->in_cont() ? oops_interpreted_do<addressing::ABSOLUTE>(f, map, use_interpreter_oop_map_cache)\n-                    : oops_interpreted_do<addressing::RELATIVE>(f, map, use_interpreter_oop_map_cache);\n+    !map->in_cont() != NULL ? oops_interpreted_do(f, map, use_interpreter_oop_map_cache)\n+                            : oops_interpreted_do(f, map, use_interpreter_oop_map_cache);\n@@ -1261,1 +1231,0 @@\n-template <frame::addressing pointers>\n@@ -1265,1 +1234,1 @@\n-  address low_mark  = (address) interpreter_frame_monitor_end<pointers>();\n+  address low_mark  = (address) interpreter_frame_monitor_end();\n@@ -1363,3 +1332,0 @@\n-template void frame::describe<frame::addressing::ABSOLUTE>(FrameValues& values, int frame_no, const RegisterMap* reg_map);\n-template void frame::describe<frame::addressing::RELATIVE>(FrameValues& values, int frame_no, const RegisterMap* reg_map);\n-\n@@ -1368,1 +1334,0 @@\n-template <frame::addressing pointers>\n@@ -1406,2 +1371,2 @@\n-      intptr_t* l0 = interpreter_frame_local_at<pointers>(0);\n-      intptr_t* ln = interpreter_frame_local_at<pointers>(m->max_locals() - 1);\n+      intptr_t* l0 = interpreter_frame_local_at(0);\n+      intptr_t* ln = interpreter_frame_local_at(m->max_locals() - 1);\n@@ -1411,1 +1376,1 @@\n-        intptr_t* l0 = interpreter_frame_local_at<pointers>(l);\n+        intptr_t* l0 = interpreter_frame_local_at(l);\n@@ -1416,1 +1381,1 @@\n-    if (interpreter_frame_monitor_begin() != interpreter_frame_monitor_end<pointers>()) {\n+    if (interpreter_frame_monitor_begin() != interpreter_frame_monitor_end()) {\n@@ -1418,1 +1383,1 @@\n-      values.describe(frame_no, (intptr_t*)interpreter_frame_monitor_end<pointers>(), \"monitors end\");\n+      values.describe(frame_no, (intptr_t*)interpreter_frame_monitor_end(), \"monitors end\");\n@@ -1427,2 +1392,2 @@\n-      tos = MAX2(tos, interpreter_frame_expression_stack_at<pointers>(e));\n-      values.describe(frame_no, interpreter_frame_expression_stack_at<pointers>(e),\n+      tos = MAX2(tos, interpreter_frame_expression_stack_at(e));\n+      values.describe(frame_no, interpreter_frame_expression_stack_at(e),\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":34,"deletions":69,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -93,0 +93,2 @@\n+  addressing _pointers;\n+\n@@ -122,0 +124,2 @@\n+  bool has_relative_pointers() const { return _pointers == addressing::RELATIVE; }\n+\n@@ -126,1 +130,4 @@\n-  intptr_t* sp() const           { return _sp; }\n+  intptr_t* sp() const           {\n+    \/\/ assert !relative to StackChunk start\n+    return _sp;\n+  }\n@@ -129,1 +136,5 @@\n-  int offset_sp() const { return _offset_sp; }\n+  int offset_sp() const {\n+    \/\/ assert relative to StackChunk start\n+    return _offset_sp;\n+  }\n+\n@@ -131,1 +142,1 @@\n-  int frame_index() const { return _frame_index; }\n+  int frame_index() const           { return _frame_index; }\n@@ -180,1 +191,2 @@\n-  bool is_optimized_entry_frame()         const;\n+  bool is_optimized_entry_frame()  const;\n+  bool is_interpreted_heap_frame() const { return is_interpreted_frame() && _pointers == addressing::RELATIVE; }\n@@ -240,1 +252,1 @@\n-  intptr_t  at(int index) const                  { return *addr_at(index); }\n+  intptr_t  at_absolute(int index) const         { return *addr_at(index); }\n@@ -243,2 +255,4 @@\n-  template <addressing pointers>\n-  intptr_t at(int index) const                   { return pointers == addressing::RELATIVE ? at_relative(index) : at(index); }\n+\n+  intptr_t at(int index) const                   {\n+    return _pointers == addressing::RELATIVE ? at_relative(index) : at_absolute(index);\n+  }\n@@ -306,1 +320,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -341,1 +354,1 @@\n-  template <addressing pointers = addressing::ABSOLUTE> intptr_t* interpreter_frame_expression_stack() const;\n+  intptr_t* interpreter_frame_expression_stack() const;\n@@ -344,1 +357,1 @@\n-  template <addressing pointers = addressing::ABSOLUTE> intptr_t* interpreter_frame_expression_stack_at(jint offset) const;\n+  intptr_t* interpreter_frame_expression_stack_at(jint offset) const;\n@@ -347,2 +360,2 @@\n-  template <addressing pointers = addressing::ABSOLUTE> intptr_t* interpreter_frame_tos_at(jint offset) const;\n-  template <addressing pointers = addressing::ABSOLUTE> intptr_t* interpreter_frame_tos_address() const;\n+  intptr_t* interpreter_frame_tos_at(jint offset) const;\n+  intptr_t* interpreter_frame_tos_address() const;\n@@ -351,1 +364,1 @@\n-  template <addressing pointers = addressing::ABSOLUTE> jint  interpreter_frame_expression_stack_size() const;\n+  jint  interpreter_frame_expression_stack_size() const;\n@@ -372,1 +385,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -374,1 +386,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -379,1 +390,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -426,1 +436,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -428,1 +437,1 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n+  void print_raw() const;\n@@ -434,1 +443,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -445,1 +453,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -450,1 +457,0 @@\n-  template <addressing pointers = addressing::ABSOLUTE>\n@@ -521,1 +527,2 @@\n-  void print_on(outputStream* out, int min_index, int max_index, intptr_t* v0, intptr_t* v1, frame::addressing pointers = frame::addressing::ABSOLUTE);\n+  void print_on(outputStream* out, int min_index, int max_index, intptr_t* v0, intptr_t* v1,\n+                frame::addressing pointers = frame::addressing::ABSOLUTE);\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":29,"deletions":22,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-  template <frame::addressing pointers = frame::addressing::ABSOLUTE>\n@@ -78,1 +77,0 @@\n-  template <frame::addressing pointers = frame::addressing::ABSOLUTE>\n@@ -80,1 +78,0 @@\n-  template <frame::addressing pointers = frame::addressing::ABSOLUTE>\n@@ -85,1 +82,0 @@\n-  template <frame::addressing pointers>\n@@ -209,1 +205,1 @@\n-  return Interpreted::frame_bottom<frame::addressing::RELATIVE>(f) - Interpreted::frame_top(f);\n+  return Interpreted::frame_bottom(f) - Interpreted::frame_top(f);\n@@ -212,1 +208,0 @@\n-template <frame::addressing pointers>\n","filename":"src\/hotspot\/share\/runtime\/frame_helpers.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}