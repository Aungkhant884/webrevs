{"files":[{"patch":"@@ -144,1 +144,1 @@\n-      if (obj->is_instance() && InstanceKlass::cast(obj->klass())->is_reference_instance_klass()) {\n+      if (obj->is_instanceRef()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,0 @@\n-  nonstatic_field(InstanceKlass,               _kind,                                         u1)                                    \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  InstanceClassLoaderKlass(const ClassFileParser& parser) : InstanceKlass(parser, InstanceKlass::_kind_class_loader, ID) {}\n+  InstanceClassLoaderKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -450,1 +450,1 @@\n-      ik = new (loader_data, size, THREAD) InstanceKlass(parser, InstanceKlass::_kind_other);\n+      ik = new (loader_data, size, THREAD) InstanceKlass(parser);\n@@ -487,1 +487,1 @@\n-InstanceKlass::InstanceKlass(const ClassFileParser& parser, unsigned kind, KlassID id) :\n+InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassID id) :\n@@ -502,1 +502,0 @@\n-  set_kind(kind);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  InstanceKlass(const ClassFileParser& parser, unsigned kind, KlassID id = ID);\n+  InstanceKlass(const ClassFileParser& parser, KlassID id = ID);\n@@ -232,9 +232,0 @@\n-  \/\/ This can be used to quickly discriminate among the four kinds of\n-  \/\/ InstanceKlass. This should be an enum (?)\n-  static const unsigned _kind_other             = 0; \/\/ concrete InstanceKlass\n-  static const unsigned _kind_reference         = 1; \/\/ InstanceRefKlass\n-  static const unsigned _kind_class_loader      = 2; \/\/ InstanceClassLoaderKlass\n-  static const unsigned _kind_mirror            = 3; \/\/ InstanceMirrorKlass\n-  static const unsigned _misc_kind_stack_chunk  = 4; \/\/ InstanceStackChunk\n-  static const unsigned _misc_kind_last         = _misc_kind_stack_chunk;\n-\n@@ -242,1 +233,0 @@\n-  u1              _kind;                          \/\/ kind of InstanceKlass\n@@ -792,10 +782,0 @@\n-private:\n-\n-  void set_kind(unsigned kind) {\n-    assert(kind <= _misc_kind_last, \"Invalid InstanceKlass kind\");\n-    _kind = (u1)kind;\n-  }\n-\n-  bool is_kind(unsigned desired) const {\n-    return _kind == (u1)desired;\n-  }\n@@ -804,8 +784,0 @@\n-\n-  \/\/ Other is anything that is not one of the more specialized kinds of InstanceKlass.\n-  bool is_other_instance_klass() const        { return is_kind(_kind_other); }\n-  bool is_reference_instance_klass() const    { return is_kind(_kind_reference); }\n-  bool is_mirror_instance_klass() const       { return is_kind(_kind_mirror); }\n-  bool is_class_loader_instance_klass() const { return is_kind(_kind_class_loader); }\n-  bool is_stack_chunk_instance_klass() const  { return is_kind(_misc_kind_stack_chunk); }\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  InstanceMirrorKlass(const ClassFileParser& parser) : InstanceKlass(parser, InstanceKlass::_kind_mirror, ID) {}\n+  InstanceMirrorKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n@@ -63,1 +63,1 @@\n-    assert(InstanceKlass::cast(k)->is_mirror_instance_klass(), \"cast to InstanceMirrorKlass\");\n+    assert(k->is_mirror_instance_klass(), \"cast to InstanceMirrorKlass\");\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-    guarantee(next->is_instance(), \"next field should be an instance\");\n-    guarantee(InstanceKlass::cast(next->klass())->is_reference_instance_klass(), \"next field verify failed\");\n+    guarantee(next->is_instanceRef(), \"next field verify failed\");\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, InstanceKlass::_kind_reference, ID) {}\n+  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  : InstanceKlass(parser, InstanceKlass::_misc_kind_stack_chunk, ID) {\n+  : InstanceKlass(parser, ID) {\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-    assert(InstanceKlass::cast(k)->is_stack_chunk_instance_klass(), \"\");\n+    assert(k->is_stack_chunk_instance_klass(), \"cast to InstanceStackChunkKlass\");\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -621,12 +621,11 @@\n-  inline  bool is_instance_klass()            const { return assert_same_query(\n-                                                      layout_helper_is_instance(layout_helper()),\n-                                                      is_instance_klass_slow()); }\n-  inline  bool is_array_klass()               const { return assert_same_query(\n-                                                    layout_helper_is_array(layout_helper()),\n-                                                    is_array_klass_slow()); }\n-  inline  bool is_objArray_klass()            const { return assert_same_query(\n-                                                    layout_helper_is_objArray(layout_helper()),\n-                                                    is_objArray_klass_slow()); }\n-  inline  bool is_typeArray_klass()           const { return assert_same_query(\n-                                                    layout_helper_is_typeArray(layout_helper()),\n-                                                    is_typeArray_klass_slow()); }\n+\n+  bool is_instance_klass()              const { return assert_same_query(_id <= InstanceStackChunkKlassID, is_instance_klass_slow()); }\n+  \/\/ Other is anything that is not one of the more specialized kinds of InstanceKlass.\n+  bool is_other_instance_klass()        const { return _id == InstanceKlassID; }\n+  bool is_reference_instance_klass()    const { return _id == InstanceRefKlassID; }\n+  bool is_mirror_instance_klass()       const { return _id == InstanceMirrorKlassID; }\n+  bool is_class_loader_instance_klass() const { return _id == InstanceClassLoaderKlassID; }\n+  bool is_stack_chunk_instance_klass()  const { return _id == InstanceStackChunkKlassID; }\n+  bool is_array_klass()                 const { return assert_same_query( _id >= TypeArrayKlassID, is_array_klass_slow()); }\n+  bool is_objArray_klass()              const { return assert_same_query( _id == ObjArrayKlassID,  is_objArray_klass_slow()); }\n+  bool is_typeArray_klass()             const { return assert_same_query( _id == TypeArrayKlassID, is_typeArray_klass_slow()); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -149,5 +149,6 @@\n-bool oopDesc::is_instance_noinline()          const { return is_instance();            }\n-bool oopDesc::is_array_noinline()             const { return is_array();               }\n-bool oopDesc::is_objArray_noinline()          const { return is_objArray();            }\n-bool oopDesc::is_typeArray_noinline()         const { return is_typeArray();           }\n-bool oopDesc::is_stackChunk_noinline()        const { return is_stackChunk();          }\n+bool oopDesc::is_instance_noinline()    const { return is_instance();    }\n+bool oopDesc::is_instanceRef_noinline() const { return is_instanceRef(); }\n+bool oopDesc::is_stackChunk_noinline()  const { return is_stackChunk();  }\n+bool oopDesc::is_array_noinline()       const { return is_array();       }\n+bool oopDesc::is_objArray_noinline()    const { return is_objArray();    }\n+bool oopDesc::is_typeArray_noinline()   const { return is_typeArray();   }\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -114,5 +114,6 @@\n-  inline bool is_instance()            const;\n-  inline bool is_array()               const;\n-  inline bool is_objArray()            const;\n-  inline bool is_typeArray()           const;\n-  inline bool is_stackChunk()          const;\n+  inline bool is_instance()    const;\n+  inline bool is_instanceRef() const;\n+  inline bool is_stackChunk()  const;\n+  inline bool is_array()       const;\n+  inline bool is_objArray()    const;\n+  inline bool is_typeArray()   const;\n@@ -121,5 +122,6 @@\n-  bool is_instance_noinline()          const;\n-  bool is_array_noinline()             const;\n-  bool is_objArray_noinline()          const;\n-  bool is_typeArray_noinline()         const;\n-  bool is_stackChunk_noinline()        const;\n+  bool is_instance_noinline()    const;\n+  bool is_instanceRef_noinline() const;\n+  bool is_stackChunk_noinline()  const;\n+  bool is_array_noinline()       const;\n+  bool is_objArray_noinline()    const;\n+  bool is_typeArray_noinline()   const;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -202,5 +202,6 @@\n-bool oopDesc::is_instance()   const { return klass()->is_instance_klass();  }\n-bool oopDesc::is_array()      const { return klass()->is_array_klass();     }\n-bool oopDesc::is_objArray()   const { return klass()->is_objArray_klass();  }\n-bool oopDesc::is_typeArray()  const { return klass()->is_typeArray_klass(); }\n-bool oopDesc::is_stackChunk() const { return klass()->is_instance_klass() && InstanceKlass::cast(klass())->is_stack_chunk_instance_klass(); }\n+bool oopDesc::is_instance()    const { return klass()->is_instance_klass();             }\n+bool oopDesc::is_instanceRef() const { return klass()->is_reference_instance_klass();   }\n+bool oopDesc::is_stackChunk()  const { return klass()->is_stack_chunk_instance_klass(); }\n+bool oopDesc::is_array()       const { return klass()->is_array_klass();                }\n+bool oopDesc::is_objArray()    const { return klass()->is_objArray_klass();             }\n+bool oopDesc::is_typeArray()   const { return klass()->is_typeArray_klass();            }\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -240,1 +240,0 @@\n-  nonstatic_field(InstanceKlass,               _kind,                                         u1)                                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}