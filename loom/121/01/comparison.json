{"files":[{"patch":"@@ -96,2 +96,2 @@\n-void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n-  anchor->set_last_Java_fp(cont->entry_fp());\n+void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* entry) {\n+  anchor->set_last_Java_fp(entry->entry_fp());\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -94,2 +94,2 @@\n-void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n-  anchor->set_last_Java_fp(cont->entry_fp());\n+void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* entry) {\n+  anchor->set_last_Java_fp(entry->entry_fp());\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2774,1 +2774,1 @@\n-  ContinuationEntry* cont = thread->last_continuation();\n+  ContinuationEntry* cont_entry = thread->last_continuation();\n@@ -2789,2 +2789,2 @@\n-        assert(cont == Continuation::get_continuation_entry_for_entry_frame(thread, fr), \"\");\n-        if (!show_carrier && cont->is_virtual_thread()) {\n+        assert(cont_entry == Continuation::get_continuation_entry_for_entry_frame(thread, fr), \"\");\n+        if (!show_carrier && cont_entry->is_virtual_thread()) {\n@@ -2793,1 +2793,1 @@\n-        cont = cont->parent();\n+        cont_entry = cont_entry->parent();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-  const ContinuationEntry* _cont;\n+  const ContinuationEntry* _cont_entry;\n@@ -151,1 +151,1 @@\n-  vframeStreamCommon(RegisterMap(jt, false, false, true)), _cont(JfrThreadLocal::is_vthread(jt) ? jt->last_continuation() : nullptr),\n+  vframeStreamCommon(RegisterMap(jt, false, false, true)), _cont_entry(JfrThreadLocal::is_vthread(jt) ? jt->last_continuation() : nullptr),\n@@ -153,1 +153,1 @@\n-  assert(!_vthread || _cont != nullptr, \"invariant\");\n+  assert(!_vthread || _cont_entry != nullptr, \"invariant\");\n@@ -174,1 +174,1 @@\n-      if (_cont->is_virtual_thread()) {\n+      if (_cont_entry->is_virtual_thread()) {\n@@ -179,1 +179,1 @@\n-      _cont = _cont->parent();\n+      _cont_entry = _cont_entry->parent();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1286,1 +1286,1 @@\n-  const ContinuationEntry* cont = NULL;\n+  const ContinuationEntry* cont_entry = NULL;\n@@ -1288,1 +1288,1 @@\n-    cont = jt->vthread_continuation();\n+    cont_entry = jt->vthread_continuation();\n@@ -1290,1 +1290,1 @@\n-  return (cont != NULL && cthread_with_mounted_vthread(jt));\n+  return (cont_entry != NULL && cthread_with_mounted_vthread(jt));\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,1 @@\n-      _cont = thread->last_continuation();\n+      _cont_entry = thread->last_continuation();\n@@ -99,1 +99,1 @@\n-      _cont = NULL;\n+      _cont_entry = NULL;\n@@ -119,1 +119,1 @@\n-    _cont = _cont->parent();\n+    _cont_entry = _cont_entry->parent();\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-  ContinuationEntry* _cont;\n+  ContinuationEntry*  _cont_entry;\n@@ -136,1 +136,1 @@\n-  oop cont() override { return continuation() != NULL ? continuation(): _cont->cont_oop(); }\n+  oop cont() override { return continuation() != NULL ? continuation(): _cont_entry->cont_oop(); }\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-NOINLINE static bool verify_continuation(oop cont) { return Continuation::debug_verify_continuation(cont); }\n+NOINLINE static bool verify_continuation(oop continuation) { return Continuation::debug_verify_continuation(continuation); }\n@@ -263,2 +263,2 @@\n-  static void set_anchor_to_entry(JavaThread* thread, ContinuationEntry* cont);\n-  static void set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont);\n+  static void set_anchor_to_entry(JavaThread* thread, ContinuationEntry* entry);\n+  static void set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* entry);\n@@ -312,1 +312,1 @@\n-void ContinuationHelper::set_anchor_to_entry(JavaThread* thread, ContinuationEntry* cont) {\n+void ContinuationHelper::set_anchor_to_entry(JavaThread* thread, ContinuationEntry* entry) {\n@@ -314,3 +314,3 @@\n-  anchor->set_last_Java_sp(cont->entry_sp());\n-  anchor->set_last_Java_pc(cont->entry_pc());\n-  set_anchor_to_entry_pd(anchor, cont);\n+  anchor->set_last_Java_sp(entry->entry_sp());\n+  anchor->set_last_Java_pc(entry->entry_pc());\n+  set_anchor_to_entry_pd(anchor, entry);\n@@ -345,4 +345,4 @@\n-\/\/ Mirrors the Java continuation objects.\n-\/\/ This object is created when we begin am operation for a continuation, and is destroyed when the operation completes.\n-\/\/ Contents are read from the Java object at the entry points of this module, and written at exist or calls into Java\n-class ContMirror {\n+\/\/ Intermediary to the jdk.internal.vm.Continuation objects and ContinuationEntry\n+\/\/ This object is created when we begin a operation for a continuation, and is destroyed when the operation completes.\n+\/\/ Contents are read from the Java object at the entry points of this module, and written at exit or calls into Java\n+class ContinuationWrapper : public StackObj {\n@@ -350,1 +350,1 @@\n-  JavaThread* const _thread;   \/\/ Thread being frozen\/thawed\n+  JavaThread* const  _thread;   \/\/ Thread being frozen\/thawed\n@@ -352,2 +352,2 @@\n-  oop _cont;\n-  stackChunkOop _tail;\n+  oop                _continuation;  \/\/ jdk.internal.vm.Continuation instance\n+  stackChunkOop      _tail;\n@@ -360,1 +360,1 @@\n-  ContMirror(const ContMirror& cont); \/\/ no copy constructor\n+  ContinuationWrapper(const ContinuationWrapper& cont); \/\/ no copy constructor\n@@ -363,3 +363,3 @@\n-  ContMirror(JavaThread* thread, oop cont);\n-  ContMirror(oop cont);\n-  ContMirror(const RegisterMap* map);\n+  ContinuationWrapper(JavaThread* thread, oop continuation);\n+  ContinuationWrapper(oop continuation);\n+  ContinuationWrapper(const RegisterMap* map);\n@@ -367,2 +367,0 @@\n-  inline void read();\n-  inline void write();\n@@ -372,1 +370,1 @@\n-  oop mirror()                       { return _cont; }\n+  oop continuation()                 { return _continuation; }\n@@ -376,4 +374,7 @@\n-  oop parent() { return jdk_internal_vm_Continuation::parent(_cont); }\n-  bool is_preempted() { return jdk_internal_vm_Continuation::is_preempted(_cont); }\n-  void set_preempted(bool value) { jdk_internal_vm_Continuation::set_preempted(_cont, value); }\n-  NOT_PRODUCT(intptr_t hash() { return Thread::current()->is_Java_thread() ? _cont->identity_hash() : -1; })\n+  oop parent()                   { return jdk_internal_vm_Continuation::parent(_continuation); }\n+  bool is_preempted()            { return jdk_internal_vm_Continuation::is_preempted(_continuation); }\n+  void set_preempted(bool value) { jdk_internal_vm_Continuation::set_preempted(_continuation, value); }\n+  void read()                    { _tail  = jdk_internal_vm_Continuation::tail(_continuation); }\n+  void write()                   { jdk_internal_vm_Continuation::set_tail(_continuation, _tail); }\n+\n+  NOT_PRODUCT(intptr_t hash()    { return Thread::current()->is_Java_thread() ? _continuation->identity_hash() : -1; })\n@@ -408,2 +409,2 @@\n-ContMirror::ContMirror(JavaThread* thread, oop cont)\n-  : _thread(thread), _entry(thread->last_continuation()), _cont(cont)\n+ContinuationWrapper::ContinuationWrapper(JavaThread* thread, oop continuation)\n+  : _thread(thread), _entry(thread->last_continuation()), _continuation(continuation)\n@@ -414,3 +415,4 @@\n-  assert(_cont != nullptr && oopDesc::is_oop_or_null(_cont), \"Invalid cont: \" INTPTR_FORMAT, p2i((void*)_cont));\n-  assert(_cont == _entry->cont_oop(), \"mirror: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \"\n-         INTPTR_FORMAT, p2i((oopDesc*)_cont), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n+  assert(oopDesc::is_oop(_continuation),\n+         \"Invalid continuation object: \" INTPTR_FORMAT, p2i((void*)_continuation));\n+  assert(_continuation == _entry->cont_oop(), \"cont: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \"\n+         INTPTR_FORMAT, p2i((oopDesc*)_continuation), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n@@ -420,2 +422,2 @@\n-ContMirror::ContMirror(oop cont)\n-  : _thread(nullptr), _entry(nullptr), _cont(cont)\n+ContinuationWrapper::ContinuationWrapper(oop continuation)\n+  : _thread(nullptr), _entry(nullptr), _continuation(continuation)\n@@ -426,1 +428,2 @@\n-  assert(_cont != nullptr && oopDesc::is_oop_or_null(_cont), \"Invalid cont: \" INTPTR_FORMAT, p2i((void*)_cont));\n+  assert(oopDesc::is_oop(_continuation),\n+         \"Invalid continuation object: \" INTPTR_FORMAT, p2i((void*)_continuation));\n@@ -430,1 +433,1 @@\n-ContMirror::ContMirror(const RegisterMap* map)\n+ContinuationWrapper::ContinuationWrapper(const RegisterMap* map)\n@@ -433,1 +436,1 @@\n-    _cont(map->stack_chunk()->cont())\n+    _continuation(map->stack_chunk()->cont())\n@@ -438,4 +441,4 @@\n-  assert(_cont != nullptr && oopDesc::is_oop_or_null(_cont), \"Invalid cont: \" INTPTR_FORMAT, p2i((void*)_cont));\n-  assert(_entry == nullptr || _cont == _entry->cont_oop(),\n-    \"mirror: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \" INTPTR_FORMAT,\n-    p2i( (oopDesc*)_cont), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n+  assert(oopDesc::is_oop(_continuation),\"Invalid cont: \" INTPTR_FORMAT, p2i((void*)_continuation));\n+  assert(_entry == nullptr || _continuation == _entry->cont_oop(),\n+    \"cont: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \" INTPTR_FORMAT,\n+    p2i( (oopDesc*)_continuation), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n@@ -445,12 +448,4 @@\n-inline void ContMirror::read() {\n-  _tail = jdk_internal_vm_Continuation::tail(_cont);\n-}\n-\n-inline void ContMirror::write() {\n-  jdk_internal_vm_Continuation::set_tail(_cont, _tail);\n-}\n-\n-inline void ContMirror::post_safepoint(Handle conth) {\n-  _cont = conth(); \/\/ reload oop\n-  if (_tail != nullptr) {\n-    _tail = jdk_internal_vm_Continuation::tail(_cont);\n+inline void ContinuationWrapper::post_safepoint(Handle conth) {\n+  _continuation = conth(); \/\/ reload oop\n+  if (_tail != (oop)nullptr) {\n+    _tail = (stackChunkOop)jdk_internal_vm_Continuation::tail(_continuation);\n@@ -460,1 +455,1 @@\n-const frame ContMirror::last_frame() {\n+const frame ContinuationWrapper::last_frame() {\n@@ -468,1 +463,1 @@\n-inline stackChunkOop ContMirror::nonempty_chunk(stackChunkOop chunk) const {\n+inline stackChunkOop ContinuationWrapper::nonempty_chunk(stackChunkOop chunk) const {\n@@ -475,1 +470,1 @@\n-stackChunkOop ContMirror::find_chunk_by_address(void* p) const {\n+stackChunkOop ContinuationWrapper::find_chunk_by_address(void* p) const {\n@@ -486,1 +481,1 @@\n-template<typename Event> void ContMirror::post_jfr_event(Event* e, JavaThread* jt) {\n+template<typename Event> void ContinuationWrapper::post_jfr_event(Event* e, JavaThread* jt) {\n@@ -490,1 +485,1 @@\n-    e->set_contClass(_cont->klass());\n+    e->set_contClass(_continuation->klass());\n@@ -499,1 +494,1 @@\n-inline bool ContMirror::is_entry_frame(const frame& f) {\n+inline bool ContinuationWrapper::is_entry_frame(const frame& f) {\n@@ -503,1 +498,1 @@\n-bool ContMirror::chunk_invariant(outputStream* st) {\n+bool ContinuationWrapper::chunk_invariant(outputStream* st) {\n@@ -524,1 +519,1 @@\n-static int num_java_frames(ContMirror& cont) {\n+static int num_java_frames(ContinuationWrapper& cont) {\n@@ -554,1 +549,1 @@\n-int Continuation::try_force_yield(JavaThread* target, const oop cont) {\n+int Continuation::try_force_yield(JavaThread* target, const oop continuation) {\n@@ -559,1 +554,1 @@\n-  while (ce != nullptr && ce->continuation() != cont) {\n+  while (ce != nullptr && ce->continuation() != continuation) {\n@@ -577,2 +572,2 @@\n-  const oop scope = jdk_internal_vm_Continuation::scope(cont);\n-  if (innermost != cont) { \/\/ we have nested continuations\n+  const oop scope = jdk_internal_vm_Continuation::scope(continuation);\n+  if (innermost != continuation) { \/\/ we have nested continuations\n@@ -585,1 +580,1 @@\n-    jdk_internal_vm_Continuation::set_yieldInfo(cont, scope);\n+    jdk_internal_vm_Continuation::set_yieldInfo(continuation, scope);\n@@ -668,2 +663,2 @@\n-ContinuationEntry* Continuation::get_continuation_entry_for_continuation(JavaThread* thread, oop cont) {\n-  if (thread == nullptr || cont == nullptr) {\n+ContinuationEntry* Continuation::get_continuation_entry_for_continuation(JavaThread* thread, oop continuation) {\n+  if (thread == nullptr || continuation == nullptr) {\n@@ -674,1 +669,1 @@\n-    if (cont == entry->continuation()) {\n+    if (continuation == entry->continuation()) {\n@@ -681,2 +676,2 @@\n-static bool is_on_stack(JavaThread* thread, const ContinuationEntry* cont) {\n-  if (cont == nullptr) {\n+static bool is_on_stack(JavaThread* thread, const ContinuationEntry* entry) {\n+  if (entry == nullptr) {\n@@ -686,1 +681,1 @@\n-  assert(thread->is_in_full_stack((address)cont), \"\");\n+  assert(thread->is_in_full_stack((address)entry), \"\");\n@@ -692,2 +687,2 @@\n-bool Continuation::is_continuation_mounted(JavaThread* thread, oop cont) {\n-  return is_on_stack(thread, get_continuation_entry_for_continuation(thread, cont));\n+bool Continuation::is_continuation_mounted(JavaThread* thread, oop continuation) {\n+  return is_on_stack(thread, get_continuation_entry_for_continuation(thread, continuation));\n@@ -729,2 +724,2 @@\n-static inline bool is_sp_in_continuation(const ContinuationEntry* cont, intptr_t* const sp) {\n-  return cont->entry_sp() > sp;\n+static inline bool is_sp_in_continuation(const ContinuationEntry* entry, intptr_t* const sp) {\n+  return entry->entry_sp() > sp;\n@@ -733,2 +728,2 @@\n-bool Continuation::is_frame_in_continuation(const ContinuationEntry* cont, const frame& f) {\n-  return is_sp_in_continuation(cont, f.unextended_sp());\n+bool Continuation::is_frame_in_continuation(const ContinuationEntry* entry, const frame& f) {\n+  return is_sp_in_continuation(entry, f.unextended_sp());\n@@ -739,3 +734,3 @@\n-  ContinuationEntry* cont = thread->last_continuation();\n-  while (cont != nullptr && !is_sp_in_continuation(cont, sp)) {\n-    cont = cont->parent();\n+  ContinuationEntry* entry = thread->last_continuation();\n+  while (entry != nullptr && !is_sp_in_continuation(entry, sp)) {\n+    entry = entry->parent();\n@@ -743,1 +738,1 @@\n-  return cont;\n+  return entry;\n@@ -750,6 +745,2 @@\n-bool Continuation::has_last_Java_frame(oop continuation) {\n-  return !ContMirror(continuation).is_empty();\n-}\n-\n-static frame continuation_top_frame(oop contOop, RegisterMap* map) {\n-  stackChunkOop chunk = ContMirror(contOop).last_nonempty_chunk();\n+static frame continuation_top_frame(const ContinuationWrapper& cont, RegisterMap* map) {\n+  stackChunkOop chunk = cont.last_nonempty_chunk();\n@@ -760,0 +751,10 @@\n+bool Continuation::has_last_Java_frame(oop continuation, frame* frame, RegisterMap* map) {\n+  ContinuationWrapper cont(continuation);\n+  if (!cont.is_empty()) {\n+    *frame = continuation_top_frame(cont, map);\n+    return true;\n+  } else {\n+    return false;\n+  }\n+}\n+\n@@ -762,1 +763,1 @@\n-  return continuation_top_frame(continuation, map);\n+  return continuation_top_frame(ContinuationWrapper(continuation), map);\n@@ -767,1 +768,3 @@\n-  return continuation_top_frame(get_continuation_entry_for_sp(map->thread(), callee.sp())->cont_oop(), map);\n+  oop continuation = get_continuation_entry_for_sp(map->thread(), callee.sp())->cont_oop();\n+  ContinuationWrapper cont(continuation);\n+  return continuation_top_frame(cont, map);\n@@ -772,1 +775,1 @@\n-  if (!ContMirror(continuation()).is_empty()) {\n+  if (!ContinuationWrapper(continuation()).is_empty()) {\n@@ -785,1 +788,1 @@\n-  ContMirror cont(map);\n+  ContinuationWrapper cont(map);\n@@ -799,2 +802,2 @@\n-    oop parent = jdk_internal_vm_Continuation::parent(cont.mirror());\n-    stackChunkOop chunk = parent != nullptr ? ContMirror(parent).last_nonempty_chunk() : nullptr;\n+    oop parent = jdk_internal_vm_Continuation::parent(cont.continuation());\n+    stackChunkOop chunk = parent != nullptr ? ContinuationWrapper(parent).last_nonempty_chunk() : nullptr;\n@@ -821,2 +824,2 @@\n-oop Continuation::continuation_scope(oop cont) {\n-  return cont != nullptr ? jdk_internal_vm_Continuation::scope(cont) : nullptr;\n+oop Continuation::continuation_scope(oop continuation) {\n+  return continuation != nullptr ? jdk_internal_vm_Continuation::scope(continuation) : nullptr;\n@@ -830,2 +833,2 @@\n-  oop cont = get_continuation_entry_for_sp(map->thread(), f.sp())->cont_oop();\n-  if (cont == nullptr) {\n+  oop continuation = get_continuation_entry_for_sp(map->thread(), f.sp())->cont_oop();\n+  if (continuation == nullptr) {\n@@ -835,1 +838,1 @@\n-  oop sc = continuation_scope(cont);\n+  oop sc = continuation_scope(continuation);\n@@ -841,1 +844,1 @@\n-  ContMirror cont(map);\n+  ContinuationWrapper cont(map);\n@@ -852,3 +855,3 @@\n-  oop cont = ce->cont_oop();\n-  assert(cont != nullptr, \"\");\n-  assert(cont == ContinuationHelper::get_continuation(current), \"\");\n+  oop continuation = ce->cont_oop();\n+  assert(continuation != nullptr, \"\");\n+  assert(continuation == ContinuationHelper::get_continuation(current), \"\");\n@@ -856,1 +859,1 @@\n-  jshort value = jdk_internal_vm_Continuation::critical_section(cont);\n+  jshort value = jdk_internal_vm_Continuation::critical_section(continuation);\n@@ -858,1 +861,1 @@\n-    jdk_internal_vm_Continuation::set_critical_section(cont, value + 1);\n+    jdk_internal_vm_Continuation::set_critical_section(continuation, value + 1);\n@@ -870,3 +873,3 @@\n-  oop cont = ce->cont_oop();\n-  assert(cont != nullptr, \"\");\n-  assert(cont == ContinuationHelper::get_continuation(current), \"\");\n+  oop continuation = ce->cont_oop();\n+  assert(continuation != nullptr, \"\");\n+  assert(continuation == ContinuationHelper::get_continuation(current), \"\");\n@@ -874,1 +877,1 @@\n-  jshort value = jdk_internal_vm_Continuation::critical_section(cont);\n+  jshort value = jdk_internal_vm_Continuation::critical_section(continuation);\n@@ -876,1 +879,1 @@\n-    jdk_internal_vm_Continuation::set_critical_section(cont, value - 1);\n+    jdk_internal_vm_Continuation::set_critical_section(continuation, value - 1);\n@@ -885,1 +888,1 @@\n-    ContinuationEntry* cont = get_continuation_entry_for_sp(thread,\n+    ContinuationEntry* ce = get_continuation_entry_for_sp(thread,\n@@ -887,1 +890,1 @@\n-    assert(cont != nullptr, \"callee.unextended_sp(): \" INTPTR_FORMAT, p2i(callee.unextended_sp()));\n+    assert(ce != nullptr, \"callee.unextended_sp(): \" INTPTR_FORMAT, p2i(callee.unextended_sp()));\n@@ -891,2 +894,2 @@\n-    log_develop_trace(jvmcont)(\"sender_pc: \" INTPTR_FORMAT \" -> \" INTPTR_FORMAT, p2i(*sender_pc), p2i(cont->entry_pc()));\n-    log_develop_trace(jvmcont)(\"sender_sp: \" INTPTR_FORMAT \" -> \" INTPTR_FORMAT, p2i(*sender_sp), p2i(cont->entry_sp()));\n+    log_develop_trace(jvmcont)(\"sender_pc: \" INTPTR_FORMAT \" -> \" INTPTR_FORMAT, p2i(*sender_pc), p2i(ce->entry_pc()));\n+    log_develop_trace(jvmcont)(\"sender_sp: \" INTPTR_FORMAT \" -> \" INTPTR_FORMAT, p2i(*sender_sp), p2i(ce->entry_sp()));\n@@ -894,2 +897,2 @@\n-    *sender_pc = cont->entry_pc();\n-    *sender_sp = cont->entry_sp();\n+    *sender_pc = ce->entry_pc();\n+    *sender_sp = ce->entry_sp();\n@@ -904,3 +907,3 @@\n-  ContinuationEntry* cont;\n-  if (thread != nullptr && is_return_barrier_entry(pc) && (cont = thread->last_continuation()) != nullptr) {\n-    pc = cont->entry_pc();\n+  ContinuationEntry* ce;\n+  if (thread != nullptr && is_return_barrier_entry(pc) && (ce = thread->last_continuation()) != nullptr) {\n+    pc = ce->entry_pc();\n@@ -918,1 +921,1 @@\n-  ContinuationEntry* cont = thread->last_continuation();\n+  ContinuationEntry* entry = thread->last_continuation();\n@@ -920,1 +923,1 @@\n-  if (cont == nullptr) {\n+  if (entry == nullptr) {\n@@ -924,1 +927,1 @@\n-  if (is_sp_in_continuation(cont, sp)) {\n+  if (is_sp_in_continuation(entry, sp)) {\n@@ -931,3 +934,3 @@\n-    prev = cont;\n-    cont = cont->parent();\n-  } while (cont != nullptr && !is_sp_in_continuation(cont, sp));\n+    prev = entry;\n+    entry = entry->parent();\n+  } while (entry != nullptr && !is_sp_in_continuation(entry, sp));\n@@ -935,1 +938,1 @@\n-  if (cont == nullptr) {\n+  if (entry == nullptr) {\n@@ -938,1 +941,1 @@\n-  assert(is_sp_in_continuation(cont, sp), \"\");\n+  assert(is_sp_in_continuation(entry, sp), \"\");\n@@ -948,2 +951,2 @@\n-    for (ContinuationEntry* cont = thread->last_continuation(); cont != nullptr; cont = cont->parent()) {\n-      intptr_t* bottom = cont->entry_sp();\n+    for (ContinuationEntry* ce = thread->last_continuation(); ce != nullptr; ce = ce->parent()) {\n+      intptr_t* bottom = ce->entry_sp();\n@@ -974,1 +977,1 @@\n-  ContMirror cont(contOop);\n+  ContinuationWrapper cont(contOop);\n@@ -1005,1 +1008,1 @@\n-  ContMirror cont(contOop);\n+  ContinuationWrapper cont(contOop);\n@@ -1019,1 +1022,1 @@\n-class FreezeBase {\n+class FreezeBase : public StackObj {\n@@ -1022,1 +1025,1 @@\n-  ContMirror& _cont;\n+  ContinuationWrapper& _cont;\n@@ -1034,1 +1037,1 @@\n-  inline FreezeBase(JavaThread* thread, ContMirror& mirror, bool preempt);\n+  inline FreezeBase(JavaThread* thread, ContinuationWrapper& cont, bool preempt);\n@@ -1087,2 +1090,2 @@\n-  inline Freeze(JavaThread* thread, ContMirror& mirror, bool preempt)\n-    : FreezeBase(thread, mirror, preempt) {}\n+  inline Freeze(JavaThread* thread, ContinuationWrapper& cont, bool preempt)\n+    : FreezeBase(thread, cont, preempt) {}\n@@ -1103,2 +1106,2 @@\n-FreezeBase::FreezeBase(JavaThread* thread, ContMirror& mirror, bool preempt) :\n-    _thread(thread), _cont(mirror), _barriers(false), _preempt(preempt) {\n+FreezeBase::FreezeBase(JavaThread* thread, ContinuationWrapper& cont, bool preempt) :\n+    _thread(thread), _cont(cont), _barriers(false), _preempt(preempt) {\n@@ -1168,1 +1171,1 @@\n-    e.set_id(cast_from_oop<u8>(_cont.mirror()));\n+    e.set_id(cast_from_oop<u8>(_cont.continuation()));\n@@ -1883,1 +1886,1 @@\n-    Handle conth(current, _cont.mirror());\n+    Handle conth(current, _cont.continuation());\n@@ -1914,1 +1917,1 @@\n-  chunk->set_cont_raw<typename ConfigT::OopT>(_cont.mirror());\n+  chunk->set_cont_raw<typename ConfigT::OopT>(_cont.continuation());\n@@ -1937,1 +1940,1 @@\n-static void JVMTI_yield_cleanup(JavaThread* thread, ContMirror& cont) {\n+static void JVMTI_yield_cleanup(JavaThread* thread, ContinuationWrapper& cont) {\n@@ -1943,1 +1946,1 @@\n-    Handle conth(Thread::current(), cont.mirror());\n+    Handle conth(Thread::current(), cont.continuation());\n@@ -1965,1 +1968,1 @@\n-  ContinuationEntry* cont = thread->last_continuation();\n+  ContinuationEntry* ce = thread->last_continuation();\n@@ -1968,1 +1971,1 @@\n-  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(cont, f); f = f.sender(&map)) {\n+  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n@@ -1977,1 +1980,1 @@\n-  ContinuationEntry* cont = thread->last_continuation();\n+  ContinuationEntry* ce = thread->last_continuation();\n@@ -1980,1 +1983,1 @@\n-  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(cont, f); f = f.sender(&map)) {\n+  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n@@ -1982,1 +1985,0 @@\n-      \/\/ tty->print_cr(\"interpreted_native_or_deoptimized_on_stack\"); f.print_on(tty);\n@@ -2009,2 +2011,2 @@\n-static inline int freeze_epilog(JavaThread* thread, ContMirror& cont) {\n-  assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n+static inline int freeze_epilog(JavaThread* thread, ContinuationWrapper& cont) {\n+  assert(VERIFY_CONTINUATION(cont.continuation()), \"\");\n@@ -2019,1 +2021,1 @@\n-static int freeze_epilog(JavaThread* thread, ContMirror& cont, freeze_result res) {\n+static int freeze_epilog(JavaThread* thread, ContinuationWrapper& cont, freeze_result res) {\n@@ -2021,1 +2023,1 @@\n-    assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n+    assert(VERIFY_CONTINUATION(cont.continuation()), \"\");\n@@ -2057,1 +2059,1 @@\n-  ContMirror cont(current, oopCont);\n+  ContinuationWrapper cont(current, oopCont);\n@@ -2064,1 +2066,1 @@\n-    assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n+    assert(VERIFY_CONTINUATION(cont.continuation()), \"\");\n@@ -2107,2 +2109,2 @@\n-  ContinuationEntry* cont = thread->last_continuation();\n-  if (cont == nullptr) {\n+  ContinuationEntry* entry = thread->last_continuation();\n+  if (entry == nullptr) {\n@@ -2111,1 +2113,1 @@\n-  if (jdk_internal_vm_Continuation::critical_section(cont->continuation()) > 0) {\n+  if (jdk_internal_vm_Continuation::critical_section(entry->continuation()) > 0) {\n@@ -2123,1 +2125,1 @@\n-    f.set_fp(f.real_fp()); \/\/ Instead of this, maybe in ContMirror::set_last_frame always use the real_fp?\n+    f.set_fp(f.real_fp()); \/\/ Instead of this, maybe in ContinuationWrapper::set_last_frame always use the real_fp?\n@@ -2141,2 +2143,2 @@\n-    if (!Continuation::is_frame_in_continuation(cont, f)) {\n-      oop scope = jdk_internal_vm_Continuation::scope(cont->continuation());\n+    if (!Continuation::is_frame_in_continuation(entry, f)) {\n+      oop scope = jdk_internal_vm_Continuation::scope(entry->continuation());\n@@ -2146,2 +2148,2 @@\n-      cont = cont->parent();\n-      if (cont == nullptr) {\n+      entry = entry->parent();\n+      if (entry == nullptr) {\n@@ -2150,1 +2152,1 @@\n-      if (jdk_internal_vm_Continuation::critical_section(cont->continuation()) > 0) {\n+      if (jdk_internal_vm_Continuation::critical_section(entry->continuation()) > 0) {\n@@ -2242,3 +2244,3 @@\n-  oop cont = thread->last_continuation()->cont_oop();\n-  assert(cont == ContinuationHelper::get_continuation(thread), \"\");\n-  assert(VERIFY_CONTINUATION(cont), \"\");\n+  oop continuation = thread->last_continuation()->cont_oop();\n+  assert(continuation == ContinuationHelper::get_continuation(thread), \"\");\n+  assert(VERIFY_CONTINUATION(continuation), \"\");\n@@ -2246,1 +2248,1 @@\n-  stackChunkOop chunk = jdk_internal_vm_Continuation::tail(cont);\n+  stackChunkOop chunk = jdk_internal_vm_Continuation::tail(continuation);\n@@ -2250,1 +2252,1 @@\n-    jdk_internal_vm_Continuation::set_tail(cont, chunk);\n+    jdk_internal_vm_Continuation::set_tail(continuation, chunk);\n@@ -2273,1 +2275,1 @@\n-class ThawBase {\n+class ThawBase : public StackObj {\n@@ -2276,1 +2278,1 @@\n-  ContMirror& _cont;\n+  ContinuationWrapper& _cont;\n@@ -2295,1 +2297,1 @@\n-  ThawBase(JavaThread* thread, ContMirror& cont) :\n+  ThawBase(JavaThread* thread, ContinuationWrapper& cont) :\n@@ -2345,1 +2347,1 @@\n-  Thaw(JavaThread* thread, ContMirror& cont) : ThawBase(thread, cont) {}\n+  Thaw(JavaThread* thread, ContinuationWrapper& cont) : ThawBase(thread, cont) {}\n@@ -2361,2 +2363,2 @@\n-  assert(VERIFY_CONTINUATION(_cont.mirror()), \"\");\n-  assert(!jdk_internal_vm_Continuation::done(_cont.mirror()), \"\");\n+  assert(VERIFY_CONTINUATION(_cont.continuation()), \"\");\n+  assert(!jdk_internal_vm_Continuation::done(_cont.continuation()), \"\");\n@@ -2530,1 +2532,1 @@\n-    e.set_id(cast_from_oop<u8>(_cont.mirror()));\n+    e.set_id(cast_from_oop<u8>(_cont.continuation()));\n@@ -2963,1 +2965,1 @@\n-  ContMirror cont(thread, oopCont);\n+  ContinuationWrapper cont(thread, oopCont);\n@@ -2979,1 +2981,1 @@\n-  assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n+  assert(VERIFY_CONTINUATION(cont.continuation()), \"\");\n@@ -3005,1 +3007,1 @@\n-  assert(VERIFY_CONTINUATION(cont.mirror()), \"\");\n+  assert(VERIFY_CONTINUATION(cont.continuation()), \"\");\n@@ -3151,1 +3153,1 @@\n-  ContinuationEntry* cont =\n+  ContinuationEntry* entry =\n@@ -3153,1 +3155,1 @@\n-  assert(cont != nullptr, \"\");\n+  assert(entry != nullptr, \"\");\n@@ -3155,1 +3157,1 @@\n-  intptr_t* unextended_sp = cont->entry_sp();\n+  intptr_t* unextended_sp = entry->entry_sp();\n@@ -3157,2 +3159,2 @@\n-  if (cont->argsize() > 0) {\n-    sp = cont->bottom_sender_sp();\n+  if (entry->argsize() > 0) {\n+    sp = entry->bottom_sender_sp();\n@@ -3170,1 +3172,1 @@\n-    sp = interpreted_bottom ? f.sp() : cont->bottom_sender_sp();\n+    sp = interpreted_bottom ? f.sp() : entry->bottom_sender_sp();\n@@ -3173,1 +3175,1 @@\n-  assert(sp != nullptr && sp <= cont->entry_sp(), \"\");\n+  assert(sp != nullptr && sp <= entry->entry_sp(), \"\");\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":185,"deletions":183,"binary":false,"changes":368,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  static int try_force_yield(JavaThread* thread, oop cont);\n+  static int try_force_yield(JavaThread* thread, oop continuation);\n@@ -61,1 +61,1 @@\n-  static ContinuationEntry* get_continuation_entry_for_continuation(JavaThread* thread, oop cont);\n+  static ContinuationEntry* get_continuation_entry_for_continuation(JavaThread* thread, oop continuation);\n@@ -66,3 +66,3 @@\n-    ContinuationEntry* cont = (ContinuationEntry*)f.unextended_sp();\n-    assert(cont == get_continuation_entry_for_sp(thread, f.sp()-2), \"mismatched entry\");\n-    return cont;\n+    ContinuationEntry* entry = (ContinuationEntry*)f.unextended_sp();\n+    assert(entry == get_continuation_entry_for_sp(thread, f.sp()-2), \"mismatched entry\");\n+    return entry;\n@@ -71,1 +71,1 @@\n-  static bool is_continuation_mounted(JavaThread* thread, oop cont);\n+  static bool is_continuation_mounted(JavaThread* thread, oop continuation);\n@@ -79,1 +79,1 @@\n-  static bool is_frame_in_continuation(const ContinuationEntry* cont, const frame& f);\n+  static bool is_frame_in_continuation(const ContinuationEntry* entry, const frame& f);\n@@ -82,1 +82,1 @@\n-  static bool has_last_Java_frame(oop continuation);\n+  static bool has_last_Java_frame(oop continuation, frame* frame, RegisterMap* map);\n@@ -88,1 +88,1 @@\n-  static oop continuation_scope(oop cont);\n+  static oop continuation_scope(oop continuation);\n@@ -114,2 +114,2 @@\n-  static bool debug_verify_continuation(oop cont);\n-  static void debug_print_continuation(oop cont, outputStream* st = NULL);\n+  static bool debug_verify_continuation(oop continuation);\n+  static void debug_print_continuation(oop continuation, outputStream* st = NULL);\n","filename":"src\/hotspot\/share\/runtime\/continuation.hpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1598,2 +1598,2 @@\n-  const ContinuationEntry* cont = vthread_continuation();\n-  address stack_base = cont != nullptr ? (address)cont->entry_sp() : _stack_base;\n+  const ContinuationEntry* ce = vthread_continuation();\n+  address stack_base = ce != nullptr ? (address)ce->entry_sp() : _stack_base;\n@@ -2531,3 +2531,3 @@\n-  const ContinuationEntry* cont = vthread_continuation();\n-  guarantee (cont != NULL, \"Not a carrier thread\");\n-  frame f = cont->to_frame();\n+  const ContinuationEntry* entry = vthread_continuation();\n+  guarantee (entry != NULL, \"Not a carrier thread\");\n+  frame f = entry->to_frame();\n@@ -2535,1 +2535,1 @@\n-    cont->flush_stack_processing(this);\n+    entry->flush_stack_processing(this);\n@@ -2537,1 +2537,1 @@\n-  cont->update_register_map(reg_map);\n+  entry->update_register_map(reg_map);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1198,1 +1198,0 @@\n-  const ContinuationEntry* last_continuation(oop cont_scope) const { return Continuation::last_continuation(this, cont_scope); }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,2 +214,2 @@\n-    const ContinuationEntry* cont = vthread_continuation();\n-    if (cont != nullptr && (address)cont->entry_sp() > adr) {\n+    const ContinuationEntry* entry = vthread_continuation();\n+    if (entry != nullptr && (address)entry->entry_sp() > adr) {\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -556,1 +556,1 @@\n-  _cont = _thread->last_continuation();\n+  _cont_entry = _thread->last_continuation();\n@@ -568,1 +568,1 @@\n-  if (!Continuation::has_last_Java_frame(continuation)) {\n+  if (!Continuation::has_last_Java_frame(continuation, &_frame, &_reg_map)) {\n@@ -573,1 +573,0 @@\n-  _frame = Continuation::last_frame(continuation, &_reg_map);\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,1 +293,1 @@\n-  ContinuationEntry* _cont;\n+  ContinuationEntry* _cont_entry;\n","filename":"src\/hotspot\/share\/runtime\/vframe.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-inline vframeStreamCommon::vframeStreamCommon(RegisterMap reg_map) : _reg_map(reg_map), _cont(NULL) {\n+inline vframeStreamCommon::vframeStreamCommon(RegisterMap reg_map) : _reg_map(reg_map), _cont_entry(NULL) {\n@@ -41,3 +41,7 @@\n-  if (_reg_map.cont() != NULL) return _reg_map.cont();\n-  if (_cont != NULL)           return _cont->continuation();\n-  return NULL;\n+  if (_reg_map.cont() != NULL) {\n+    return _reg_map.cont();\n+  } else if (_cont_entry != NULL) {\n+    return _cont_entry->continuation();\n+  } else {\n+    return NULL;\n+  }\n@@ -68,1 +72,1 @@\n-    bool cont_entry = false;\n+    bool is_enterSpecial_frame  = false;\n@@ -71,3 +75,3 @@\n-      assert(_cont != NULL, \"\");\n-      assert(_cont->cont_oop() != NULL, \"_cont: \" INTPTR_FORMAT, p2i(_cont));\n-      cont_entry = true;\n+      assert(_cont_entry != NULL, \"\");\n+      assert(_cont_entry->cont_oop() != NULL, \"_cont: \" INTPTR_FORMAT, p2i(_cont_entry));\n+      is_enterSpecial_frame = true;\n@@ -76,1 +80,2 @@\n-      if (_cont->is_virtual_thread() || (_continuation_scope.not_null() && _cont->scope() == _continuation_scope())) {\n+      if (_cont_entry->is_virtual_thread() ||\n+          (_continuation_scope.not_null() && _cont_entry->scope() == _continuation_scope())) {\n@@ -83,1 +88,2 @@\n-      if (scope == java_lang_VirtualThread::vthread_scope() || (_continuation_scope.not_null() && scope == _continuation_scope())) {\n+      if (scope == java_lang_VirtualThread::vthread_scope() ||\n+          (_continuation_scope.not_null() && scope == _continuation_scope())) {\n@@ -91,2 +97,2 @@\n-    if (cont_entry) {\n-      _cont = _cont->parent();\n+    if (is_enterSpecial_frame) {\n+      _cont_entry = _cont_entry->parent();\n@@ -107,1 +113,1 @@\n-  _cont = _thread->last_continuation();\n+  _cont_entry = _thread->last_continuation();\n","filename":"src\/hotspot\/share\/runtime\/vframe.inline.hpp","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"}]}