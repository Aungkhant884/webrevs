{"files":[{"patch":"@@ -2460,1 +2460,1 @@\n-static jboolean vthread_notify_jvmti_events = JNI_FALSE;\n+static bool vthread_notify_jvmti_events = JNI_FALSE;\n@@ -2489,1 +2489,1 @@\n-jshort java_lang_VirtualThread::state(oop vthread) {\n+u2 java_lang_VirtualThread::state(oop vthread) {\n@@ -2493,1 +2493,1 @@\n-JavaThreadStatus java_lang_VirtualThread::map_state_to_thread_status(jint state) {\n+JavaThreadStatus java_lang_VirtualThread::map_state_to_thread_status(int state) {\n@@ -2531,1 +2531,1 @@\n-void java_lang_VirtualThread::set_notify_jvmti_events(jboolean enable) {\n+void java_lang_VirtualThread::set_notify_jvmti_events(bool enable) {\n@@ -5121,7 +5121,1 @@\n-  macro(_pc_offset,        k, vmSymbols::pc_name(),        long_signature,       false); \\\n-  macro(_argsize_offset,   k, vmSymbols::argsize_name(),   int_signature,        false); \\\n-  macro(_flags_offset,     k, \"flags\",                     byte_signature,       false); \\\n-  macro(_gcSP_offset,      k, \"gcSP\",                      int_signature,        false); \\\n-  macro(_markCycle_offset, k, \"markCycle\",                 long_signature,       false); \\\n-  macro(_maxSize_offset,   k, vmSymbols::maxSize_name(),   int_signature,        false); \\\n-  macro(_cont_offset,      k, \"cont\",                      continuation_signature, false);\n+  macro(_argsize_offset,   k, vmSymbols::argsize_name(),   int_signature,        false);\n@@ -5132,0 +5126,1 @@\n+  STACKCHUNK_INJECTED_FIELDS(INJECTED_FIELD_COMPUTE_OFFSET);\n@@ -5137,0 +5132,1 @@\n+  STACKCHUNK_INJECTED_FIELDS(INJECTED_FIELD_SERIALIZE_OFFSET);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -634,2 +634,2 @@\n-  static jshort state(oop vthread);\n-  static JavaThreadStatus map_state_to_thread_status(jint state);\n+  static u2 state(oop vthread);\n+  static JavaThreadStatus map_state_to_thread_status(int state);\n@@ -637,1 +637,1 @@\n-  static void set_notify_jvmti_events(jboolean enable);\n+  static void set_notify_jvmti_events(bool enable);\n@@ -639,1 +639,1 @@\n-  static jlong set_jfrTraceId(oop vthread, jlong id);\n+  static int64_t set_jfrTraceId(oop vthread, int64_t id);\n@@ -1139,0 +1139,8 @@\n+#define STACKCHUNK_INJECTED_FIELDS(macro)                               \\\n+  macro(jdk_internal_vm_StackChunk, cont,      continuation_signature, false)   \\\n+  macro(jdk_internal_vm_StackChunk, flags,     byte_signature, false)   \\\n+  macro(jdk_internal_vm_StackChunk, pc,        intptr_signature, false) \\\n+  macro(jdk_internal_vm_StackChunk, gcSP,      int_signature, false)    \\\n+  macro(jdk_internal_vm_StackChunk, maxSize,   int_signature, false)    \\\n+  macro(jdk_internal_vm_StackChunk, markCycle, long_signature, false)\n+\n@@ -1153,0 +1161,1 @@\n+\n@@ -1167,8 +1176,10 @@\n-  static inline jint size(oop ref);\n-  static inline void set_size(HeapWord* ref, jint value);\n-  static inline jint sp(oop ref);\n-  static inline void set_sp(oop ref, jint value);\n-  static inline jlong pc(oop ref);\n-  static inline void set_pc(oop ref, jlong value);\n-  static inline jint argsize(oop ref);\n-  static inline void set_argsize(oop ref, jint value);\n+\n+  static inline int size(oop ref);\n+  static inline void set_size(HeapWord* ref, int value);\n+\n+  static inline int sp(oop ref);\n+  static inline void set_sp(oop ref, int value);\n+  static inline intptr_t pc(oop ref);\n+  static inline void set_pc(oop ref, intptr_t value);\n+  static inline int argsize(oop ref);\n+  static inline void set_argsize(oop ref, int value);\n@@ -1177,6 +1188,10 @@\n-  static inline jint gc_sp(oop ref);\n-  static inline void set_gc_sp(oop ref, jint value);\n-  static inline jlong mark_cycle(oop ref);\n-  static inline void set_mark_cycle(oop ref, jlong value);\n-  static inline jint maxSize(oop ref);\n-  static inline void set_maxSize(oop ref, jint value);\n+\n+  static inline int gc_sp(oop ref);\n+  static inline void set_gc_sp(oop ref, int value);\n+  static inline int64_t mark_cycle(oop ref);\n+  static inline void set_mark_cycle(oop ref, int64_t value);\n+\n+  static inline int maxSize(oop ref);\n+  static inline void set_maxSize(oop ref, int value);\n+\n+ \/\/ cont oop's processing is essential for the chunk's GC protocol\n@@ -2011,1 +2026,2 @@\n-  INTERNALERROR_INJECTED_FIELDS(macro)\n+  INTERNALERROR_INJECTED_FIELDS(macro)      \\\n+  STACKCHUNK_INJECTED_FIELDS(macro)\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":35,"deletions":19,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -496,0 +496,3 @@\n+  template(cont_name,                                 \"cont\")                                     \\\n+  template(gcSP_name,                                 \"gcSP\")                                     \\\n+  template(markCycle_name,                            \"markCycle\")                                \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-    public static final byte FLAG_HAS_INTERPRETED_FRAMES = 1 << 2;\n-\n-    private Continuation cont; \/\/ must not be accessed by Java code, as this oop's processing is essential for the chunk's GC protocol\n@@ -38,7 +35,0 @@\n-    private byte flags;\n-    private long pc;\n-\n-    private int gcSP;\n-    private long markCycle;\n-\n-    private int maxSize; \/\/ size when fully thawed on stack\n@@ -46,1 +36,1 @@\n-   \/\/ the stack itself is appended here by the VM\n+    \/\/ The stack itself is appended here by the VM\n@@ -49,4 +39,0 @@\n-    public int size()          { return size; }\n-    public int sp()            { return sp; }\n-    public int argsize()       { return argsize; }\n-    public int maxSize()       { return maxSize; }\n@@ -54,2 +40,1 @@\n-    public boolean isFlag(byte flag) { return (flags & flag) != 0; }\n- }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/StackChunk.java","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"}]}