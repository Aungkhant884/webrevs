{"files":[{"patch":"@@ -39,1 +39,1 @@\n-    static native void enableEvents(Thread thread, Class contClass);\n+    static native void enableEvents(Thread thread, Class contClass, Class testClass);\n@@ -45,0 +45,4 @@\n+    static void qPut(String msg) throws InterruptedException {\n+        QUEUE.put(msg);\n+    }\n+\n@@ -48,2 +52,2 @@\n-                QUEUE.put(\"msg\"+i);\n-                QUEUE.put(\"msg\"+i);\n+                qPut(\"msg\"+i);\n+                qPut(\"msg\"+i);\n@@ -53,1 +57,2 @@\n-                    enableEvents(Thread.currentThread(), java.lang.Continuation.class);\n+                    enableEvents(Thread.currentThread(), java.lang.Continuation.class,\n+                                 DoContinueSingleStepTest.class);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/DoContinueSingleStepTest\/DoContinueSingleStepTest.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,1 +59,3 @@\n-static jboolean passed = JNI_FALSE;\n+static jboolean passed = JNI_TRUE;\n+static jboolean received_vthread_singlestep = JNI_FALSE;\n+\n@@ -65,0 +67,4 @@\n+static jmethodID *test_methods = NULL;\n+jint test_method_count = 0;\n+jclass test_class = NULL;\n+\n@@ -175,1 +181,2 @@\n-setOrClearBreakpoint(JNIEnv *jni, const char *methodName, jboolean set)\n+setOrClearBreakpoint(JNIEnv *jni, jboolean set, const char *methodName,\n+                     jclass klass, jmethodID methods[], int method_count)\n@@ -180,1 +187,0 @@\n-  jint method_count = java_lang_Continuation_method_count;\n@@ -184,1 +190,1 @@\n-    jmethodID meth = java_lang_Continuation_methods[method_count];\n+    jmethodID meth = methods[method_count];\n@@ -211,1 +217,2 @@\n-setBreakpoint(JNIEnv *jni, const char *methodName)\n+setBreakpoint(JNIEnv *jni, const char *methodName,\n+              jclass klass, jmethodID methods[], int method_count)\n@@ -213,1 +220,1 @@\n-    setOrClearBreakpoint(jni, methodName, JNI_TRUE);\n+  setOrClearBreakpoint(jni, JNI_TRUE, methodName, klass, methods, method_count);\n@@ -217,1 +224,2 @@\n-clearBreakpoint(JNIEnv *jni, const char *methodName)\n+clearBreakpoint(JNIEnv *jni, const char *methodName,\n+                jclass klass, jmethodID methods[], int method_count)\n@@ -219,1 +227,1 @@\n-    setOrClearBreakpoint(jni, methodName, JNI_FALSE);\n+  setOrClearBreakpoint(jni, JNI_FALSE, methodName, klass, methods, method_count);\n@@ -224,0 +232,1 @@\n+static int qPutBreakpointHit = 0;\n@@ -245,2 +254,4 @@\n-      clearBreakpoint(jni, \"run\");\n-      setBreakpoint(jni, \"isStarted\");\n+      clearBreakpoint(jni, \"run\", java_lang_Continuation_class,\n+                      java_lang_Continuation_methods, java_lang_Continuation_method_count);\n+      setBreakpoint(jni, \"isStarted\", java_lang_Continuation_class,\n+                    java_lang_Continuation_methods, java_lang_Continuation_method_count);\n@@ -259,1 +270,28 @@\n-      clearBreakpoint(jni, \"isStarted\");\n+      clearBreakpoint(jni, \"isStarted\", java_lang_Continuation_class,\n+                      java_lang_Continuation_methods, java_lang_Continuation_method_count);\n+      err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n+      check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI SetEventNotificationMode: enable SINGLE_STEP\");\n+      err = jvmti->NotifyFramePop(thread, 0);\n+      check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI NotifyFramePop0\");\n+  } else if (strcmp(mname, \"qPut\") == 0) {\n+    \/\/ This part of the test is checking to make sure we don't get a SingleStep event when\n+    \/\/ SingleStep is enabled on a cthread and is excuting on a vthread. It coordinates\n+    \/\/ with the \"qPut\" code in SingleStep().\n+    jthread cthread;\n+    qPutBreakpointHit++;\n+    print_frame_event_info(jvmti, jni, thread, method,\n+                           \"Breakpoint\", ++breakpoint_count);\n+    err = jvmti->GetCarrierThread(thread, &cthread);\n+    check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI GetCarrierThread\");\n+    if (qPutBreakpointHit == 1) {\n+      \/\/ We hit our 1st DoContinueSingleStepTest.qPut() breakpoint. Now setup single stepping\n+      \/\/ on the carrier thread. We should not get a single step event before hitting this breakpoint\n+      \/\/ again because we are currently executing on the virtual thread.\n+      err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_SINGLE_STEP, cthread);\n+      check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI SetEventNotificationMode: enable SINGLE_STEP\");\n+      err = jvmti->NotifyFramePop(thread, 0);\n+      check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI NotifyFramePop0\");\n+    } else if (qPutBreakpointHit == 2) {\n+      \/\/ We hit our 2nd qPut breakpoint. Enable single stepping on the vthread. It has already\n+      \/\/ been disabled on the cthread. This should result in a SingleStep event before we\n+      \/\/ hit this breakpoint again.\n@@ -262,2 +300,0 @@\n-      err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_BREAKPOINT, NULL);\n-      check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI SetEventNotificationMode: enable BREAKPOINT\");\n@@ -266,0 +302,14 @@\n+    } else if (qPutBreakpointHit == 3) {\n+      clearBreakpoint(jni, \"qPut\", test_class, test_methods, test_method_count);\n+      err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_BREAKPOINT, NULL);\n+      check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI SetEventNotificationMode: disable BREAKPOINT\");\n+      err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n+      check_jvmti_status(jni, err, \"Breakpoint: error in JVMTI SetEventNotificationMode: disable SINGLE_STEP\");\n+      if (!received_vthread_singlestep) {\n+        printf(\"FAILED: Breakpoint: failed to get SingleStep event on vthread before 3rd breakpoint.\\n\");\n+        passed = JNI_FALSE;\n+      }\n+    } else {\n+      printf(\"FAILED: Breakpoint: too many qPut breakpoints.\\n\");\n+      passed = JNI_FALSE;\n+    }\n@@ -287,7 +337,33 @@\n-      \/\/ We single stepped into yield0 within 50 steps. Turn off single stepping and let the test complete.\n-      printf(\"SingleStep: entered yield0()\\n\");\n-      print_frame_event_info(jvmti, jni, thread, method,\n-                             \"SingleStep Passed\", single_step_count);\n-      err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n-      check_jvmti_status(jni, err, \"SingleStep: error in JVMTI SetEventNotificationMode: enable SINGLE_STEP\");\n-      passed = JNI_TRUE;\n+    \/\/ We single stepped into yield0 within 50 steps, so this part of the test passed.\n+    \/\/ Turn off single stepping.\n+    printf(\"SingleStep: entered yield0()\\n\");\n+    err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n+    check_jvmti_status(jni, err, \"SingleStep: error in JVMTI SetEventNotificationMode: enable SINGLE_STEP\");\n+    \/\/ Next part of the test is to make sure that when we enable SingleStep on a cthread, we\n+    \/\/ don't get a SingleStep event while executing the vthread. It coordinates with \"qPut\"\n+    \/\/ code in BreakPoint(). Start this part of the test  by setting up a breakpoint\n+    \/\/ in doContinueSingleStepTest.qput().\n+    single_step_count = 0;\n+    setBreakpoint(jni, \"qPut\", test_class, test_methods, test_method_count);\n+  } else if (strcmp(mname, \"qPut\") == 0) {\n+    \/\/ We single stepped into qPut. Verify that we got this event when it was enabled\n+    \/\/ on the vthread and not when enabled on the cthread..\n+    printf(\"SingleStep: qPut event received on %s thread\\n\",\n+           jni->IsVirtualThread(thread) ? \"virtual\" : \"carrier\");\n+    err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n+    check_jvmti_status(jni, err, \"SingleStep: error in JVMTI SetEventNotificationMode: enable SINGLE_STEP\");\n+    if (qPutBreakpointHit == 1) {\n+      \/\/ If we got a SingleStep event after the first qPut breakpoint, that's a failure\n+      \/\/ because we setup single stepping on the cthread, and therefore should not\n+      \/\/ have received one while executing the vthread in qPut.\n+      printf(\"FAILED: SingleStep: qPut event received while enabled on cthread\\n\");\n+      \/\/passed = JNI_FALSE;  \/\/ uncomment this line to cause test to fail\n+    } else if (qPutBreakpointHit == 2) {\n+      \/\/ If we got a SingleStep event after the 2nd qPut breakpoint, that's a pass\n+      \/\/ because we setup single stepping on the vthread.\n+      printf(\"SingleStep: qPut event received while enabled on vthread\\n\");\n+      received_vthread_singlestep = JNI_TRUE;\n+    } else if (qPutBreakpointHit >= 2) {\n+      printf(\"FAILED SingleStep: unexpected qPut single step event received\\n\");\n+      passed = JNI_FALSE;\n+    }\n@@ -295,6 +371,5 @@\n-      \/\/ We didn't enter Continuation.yield0() within 50 single steps. The test has failed.\n-      printf(\"FAILED: SingleStep: never entered method yield0()\\n\");\n-      print_frame_event_info(jvmti, jni, thread, method,\n-                             \"SingleStep 50\", single_step_count);\n-      err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n-      check_jvmti_status(jni, err, \"SingleStep: error in JVMTI SetEventNotificationMode: enable SINGLE_STEP\");\n+    \/\/ We didn't enter Continuation.yield0() within 50 single steps. The test has failed.\n+    printf(\"FAILED: SingleStep: never entered method yield0()\\n\");\n+    passed = JNI_FALSE;\n+    err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n+    check_jvmti_status(jni, err, \"SingleStep: error in JVMTI SetEventNotificationMode: enable SINGLE_STEP\");\n@@ -458,1 +533,2 @@\n-Java_DoContinueSingleStepTest_enableEvents(JNIEnv *jni, jclass klass, jthread thread, jclass contKlass) {\n+Java_DoContinueSingleStepTest_enableEvents(JNIEnv *jni, jclass klass, jthread thread,\n+                                           jclass contKlass, jclass testKlass) {\n@@ -465,1 +541,5 @@\n-  check_jvmti_status(jni, err, \"enableEvents: error in JVMTI GetClassMethods\");\n+  check_jvmti_status(jni, err, \"enableEvents: error in JVMTI GetClassMethods for contKlass\");\n+\n+  test_class = (jclass)jni->NewGlobalRef(testKlass);\n+  err = jvmti->GetClassMethods(testKlass, &test_method_count, &test_methods);\n+  check_jvmti_status(jni, err, \"enableEvents: error in JVMTI GetClassMethods for testKlass\");\n@@ -467,1 +547,1 @@\n-  setBreakpoint(jni, \"run\");\n+  setBreakpoint(jni, \"run\", java_lang_Continuation_class, java_lang_Continuation_methods, java_lang_Continuation_method_count);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/vthread\/DoContinueSingleStepTest\/libDoContinueSingleStepTest.cpp","additions":109,"deletions":29,"binary":false,"changes":138,"status":"modified"}]}