{"files":[{"patch":"@@ -1196,1 +1196,1 @@\n-    if (nm->is_marked_for_deoptimization()) {\n+    if (nm->is_marked_for_deoptimization() && !nm->has_been_deoptimized()) {\n@@ -1202,1 +1202,4 @@\n-      marked->append(nm);\n+      \/\/ Native methods won't be deoptimized but I suppose need to be marked not entrant.\n+      if (nm->can_be_deoptimized()) {\n+        marked->append(nm);\n+      }\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+    _has_been_deoptimized(false),\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  enum MarkForDeoptimizationStatus {\n+  enum MarkForDeoptimizationStatus : u1 {\n@@ -154,0 +154,1 @@\n+  unsigned int _has_been_deoptimized:1;\n@@ -247,0 +248,3 @@\n+  bool  has_been_deoptimized() const { assert(is_marked_for_deoptimization(), \"sanity\"); return _has_been_deoptimized; }\n+  void  mark_deoptimized() { _has_been_deoptimized = true; \/* done *\/ }\n+\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1163,0 +1163,2 @@\n+  \/\/ Don't deopt this again.\n+  mark_deoptimized();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}