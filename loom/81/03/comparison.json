{"files":[{"patch":"@@ -1196,1 +1196,1 @@\n-    if (nm->is_marked_for_deoptimization()) {\n+    if (nm->is_marked_for_deoptimization() && !nm->has_been_deoptimized()) {\n@@ -1202,1 +1202,4 @@\n-      marked->append(nm);\n+      \/\/ Native methods won't be deoptimized but I suppose need to be marked not entrant.\n+      if (nm->can_be_deoptimized()) {\n+        marked->append(nm);\n+      }\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -124,1 +124,3 @@\n-  _mark_for_deoptimization_status = (inc_recompile_counts ? deoptimize : deoptimize_noupdate);\n+  if (_mark_for_deoptimization_status != deoptimize_done) { \/\/ can't go backwards\n+     _mark_for_deoptimization_status = (inc_recompile_counts ? deoptimize : deoptimize_noupdate);\n+  }\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  enum MarkForDeoptimizationStatus {\n+  enum MarkForDeoptimizationStatus : u1 {\n@@ -150,1 +150,2 @@\n-    deoptimize_noupdate\n+    deoptimize_noupdate,\n+    deoptimize_done\n@@ -247,0 +248,3 @@\n+  bool  has_been_deoptimized() const { return _mark_for_deoptimization_status == deoptimize_done; }\n+  void  mark_deoptimized() { _mark_for_deoptimization_status = deoptimize_done; }\n+\n@@ -253,1 +257,2 @@\n-    return _mark_for_deoptimization_status != deoptimize_noupdate;\n+    return _mark_for_deoptimization_status != deoptimize_noupdate &&\n+           _mark_for_deoptimization_status != deoptimize_done;\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1163,0 +1163,2 @@\n+  \/\/ Don't deopt this again.\n+  mark_deoptimized();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}