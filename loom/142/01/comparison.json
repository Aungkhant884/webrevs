{"files":[{"patch":"@@ -64,1 +64,1 @@\n-  * method to close the task scope. The API is intended to be used with the {@code\n+ * method to close the task scope. The API is intended to be used with the {@code\n@@ -93,1 +93,1 @@\n- * <h2>Sub-classes with policies for common cases<\/h2>\n+ * <h2>Subclasses with policies for common cases<\/h2>\n@@ -95,1 +95,1 @@\n- * Two sub-classes of StructuredTaskScope are defined to implement policy for common cases:\n+ * Two subclasses of StructuredTaskScope are defined to implement policy for common cases:\n@@ -168,1 +168,1 @@\n- * down and caus {@link #join() join} to wakeup when some condition arises.\n+ * down and cause {@link #join() join} to wakeup when some condition arises.\n@@ -170,2 +170,2 @@\n- * <p> A sub-class will typically define methods to make available results, state, or\n- * other outcome to code that executes after the {@code join} method. A sub-class that collects\n+ * <p> A subclass will typically define methods to make available results, state, or\n+ * other outcome to code that executes after the {@code join} method. A subclass that collects\n@@ -173,1 +173,1 @@\n- * results. A sub-class that implements a policy to shut down when a task fails may define\n+ * results. A subclass that implements a policy to shut down when a task fails may define\n@@ -210,1 +210,1 @@\n- *   its own task scope. A thread started in task scope \"A\" opens task scope \"B\" establishes\n+ *   its own task scope. A thread started in task scope \"A\" that opens task scope \"B\" establishes\n@@ -213,1 +213,1 @@\n- *   \"B\", then open task scope \"C\" (before it closes \"B\"), then the enclosing task scope \"B\"\n+ *   \"B\", then opens task scope \"C\" (before it closes \"B\"), then the enclosing task scope \"B\"\n@@ -272,1 +272,2 @@\n-    \/\/ the set of \"tracked\" Future objects, created lazily\n+    \/\/ the set of \"tracked\" Future objects waiting to be returned by Future.get, created lazily\n+    \/\/ assigned to non-null value in method track, read by any thread\n@@ -276,0 +277,1 @@\n+    \/\/ accessed only by owner thread\n@@ -282,1 +284,3 @@\n-    private volatile int state;\n+    \/\/ read from any thread\n+    \/\/ write is guarded by shutdownLock (-> SHUTDOWN) or by owner thread (-> CLOSED)\n+    private volatile int state; \/\/ = OPEN;\n@@ -365,1 +369,1 @@\n-     * Invoked when a task completes before the scope is shutdown.\n+     * Invoked when a task completes before the scope is shut down.\n@@ -387,1 +391,1 @@\n-     * the cancel a task before the task scope is shutdown, then the {@code handleComplete}\n+     * the cancel a task before the task scope is shut down, then the {@code handleComplete}\n@@ -400,1 +404,2 @@\n-     * invoked from another thread.\n+     * invoked from another thread. All other methods on the returned {@code Future} object,\n+     * such as {@link Future#get() get}, are not restricted.\n@@ -417,3 +422,1 @@\n-        @SuppressWarnings(\"unchecked\")\n-        Callable<T> t = (Callable<T>) task;\n-        var future = new FutureImpl<T>(this, t);\n+        var future = new FutureImpl<U>(this, task);\n@@ -426,1 +429,1 @@\n-            if (thread == null)\n+            if (thread == null) {\n@@ -428,0 +431,1 @@\n+            }\n@@ -451,3 +455,1 @@\n-        @SuppressWarnings(\"unchecked\")\n-        var f = (Future<U>) future;\n-        return f;\n+        return future;\n@@ -480,1 +482,1 @@\n-     * Wait for all threads to finish or the task scope to shutdown. This method waits\n+     * Wait for all threads to finish or the task scope to shut down. This method waits\n@@ -482,1 +484,1 @@\n-     * {@link #handleComplete(Future) handleComplete} method), the {@link #shutdown()\n+     * {@link #handleComplete(Future) handleComplete} method), or the {@link #shutdown()\n@@ -503,1 +505,1 @@\n-     * Wait for all threads to finish or the task scope to shutdown, up to the given\n+     * Wait for all threads to finish or the task scope to shut down, up to the given\n@@ -591,1 +593,1 @@\n-     * Shutdown the task scope without closing it. Shutting down a task scope prevents new\n+     * Shut down the task scope without closing it. Shutting down a task scope prevents new\n@@ -696,1 +698,1 @@\n-    private static class FutureImpl<V> extends FutureTask<V> {\n+    private static final class FutureImpl<V> extends FutureTask<V> {\n@@ -699,3 +701,4 @@\n-        FutureImpl(StructuredTaskScope<V> scope, Callable<V> task) {\n-            super(task);\n-            this.scope = scope;\n+        @SuppressWarnings(\"unchecked\")\n+        FutureImpl(StructuredTaskScope<? super V> scope, Callable<? extends V> task) {\n+            super((Callable<V>) task);\n+            this.scope = (StructuredTaskScope<V>) scope;\n@@ -855,1 +858,1 @@\n-         * Shutdown the given task scope when invoked for the first time with a task\n+         * Shut down the given task scope when invoked for the first time with a task\n@@ -1036,1 +1039,1 @@\n-         * Shutdown the given task scope when invoked for the first time with a task\n+         * Shut down the given task scope when invoked for the first time with a task\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/jdk\/incubator\/concurrent\/StructuredTaskScope.java","additions":34,"deletions":31,"binary":false,"changes":65,"status":"modified"}]}