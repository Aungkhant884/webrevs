{"files":[{"patch":"@@ -100,0 +100,1 @@\n+#ifdef ASSERT\n@@ -105,1 +106,0 @@\n-#ifdef ASSERT\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -39,1 +39,1 @@\n-  *(vsp - frame::sender_sp_offset) = *(hsp - frame::sender_sp_offset);\n+  *(frame_sp - frame::sender_sp_offset) = *(heap_sp - frame::sender_sp_offset);\n@@ -66,1 +66,1 @@\n-frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -89,1 +89,4 @@\n-    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset); \/\/ we need to re-read fp because it may be an oop and we might have had a safepoint in finalize_freeze, after constructing f.\n+    \/\/ We need to re-read fp out of the frame because it may be an oop and we might have\n+    \/\/ had a safepoint in finalize_freeze, after constructing f.\n+    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset);\n+\n@@ -188,1 +191,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -192,1 +195,1 @@\n-    intptr_t* hsp = hf.unextended_sp();\n+    intptr_t* heap_sp = hf.unextended_sp();\n@@ -195,2 +198,2 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n-    intptr_t* fp = vsp + (hf.fp() - hsp);\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n+    intptr_t* fp = frame_sp + (hf.fp() - heap_sp);\n@@ -199,1 +202,1 @@\n-      vsp--;\n+      frame_sp--;\n@@ -202,1 +205,1 @@\n-    assert(vsp == unextended_sp, \"\");\n+    assert(frame_sp == unextended_sp, \"\");\n@@ -204,1 +207,1 @@\n-    frame f(vsp, vsp, fp, hf.pc());\n+    frame f(frame_sp, frame_sp, fp, hf.pc());\n@@ -213,1 +216,1 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n@@ -218,1 +221,1 @@\n-      vsp   -= argsize;\n+      frame_sp   -= argsize;\n@@ -220,1 +223,1 @@\n-      assert(caller.sp() == vsp + (fsize-argsize), \"\");\n+      assert(caller.sp() == frame_sp + (fsize-argsize), \"\");\n@@ -222,1 +225,1 @@\n-      vsp = align(hf, vsp, caller, bottom);\n+      frame_sp = align(hf, frame_sp, caller, bottom);\n@@ -230,1 +233,1 @@\n-      fp = vsp + FKind::size(hf) - frame::sender_sp_offset;\n+      fp = frame_sp + FKind::size(hf) - frame::sender_sp_offset;\n@@ -233,1 +236,1 @@\n-        ? vsp + fsize - frame::sender_sp_offset \/\/ on AArch64, this value is used for the safepoint stub\n+        ? frame_sp + fsize - frame::sender_sp_offset \/\/ on AArch64, this value is used for the safepoint stub\n@@ -236,1 +239,1 @@\n-    return frame(vsp, vsp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n+    return frame(frame_sp, frame_sp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n@@ -240,1 +243,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -242,1 +245,1 @@\n-  if (((intptr_t)vsp & 0xf) != 0) {\n+  if (((intptr_t)frame_sp & 0xf) != 0) {\n@@ -244,1 +247,1 @@\n-    vsp--;\n+    frame_sp--;\n@@ -247,1 +250,1 @@\n-  assert(is_aligned(vsp, frame::frame_alignment), \"\");\n+  assert(is_aligned(frame_sp, frame::frame_alignment), \"\");\n@@ -250,1 +253,1 @@\n-  return vsp;\n+  return frame_sp;\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -242,6 +242,0 @@\n-inline int frame::num_oops() const {\n-  assert(!is_interpreted_frame(), \"interpreted\");\n-  assert(oop_map() != NULL, \"\");\n-  return oop_map()->num_oops() ;\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,14 @@\n+frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n@@ -65,0 +79,3 @@\n+void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n+  Unimplemented();\n+}\n@@ -67,0 +84,4 @@\n+void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/continuationHelper_arm.inline.hpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,17 +32,0 @@\n-frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n-  Unimplemented();\n-}\n-\n@@ -59,1 +42,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -64,0 +47,4 @@\n+void FreezeBase::adjust_interpreted_frame_unextended_sp(frame& f) {\n+  Unimplemented();\n+}\n+\n@@ -72,1 +59,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -81,1 +68,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -94,1 +81,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -103,5 +90,0 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -57,1 +57,5 @@\n-    entry_frame_call_wrapper_offset                  =  0\n+    entry_frame_call_wrapper_offset                  =  0,\n+    metadata_words                                   = sender_sp_offset,\n+    frame_alignment                                  = 16,\n+    \/\/ size, in words, of maximum shift in frame position due to alignment\n+    align_wiggle                                     =  1\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+  DEBUG_ONLY(_frame_index = -1;)\n@@ -57,0 +58,1 @@\n+  DEBUG_ONLY(_frame_index = -1;)\n@@ -80,0 +82,1 @@\n+  DEBUG_ONLY(_frame_index = -1;)\n@@ -103,0 +106,1 @@\n+  DEBUG_ONLY(_frame_index = -1;)\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,14 @@\n+frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n@@ -66,0 +80,4 @@\n+void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n+  Unimplemented();\n+}\n+\n@@ -67,0 +85,4 @@\n+void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,16 +32,0 @@\n-frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n-  Unimplemented();\n-}\n@@ -59,1 +43,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -64,0 +48,4 @@\n+void FreezeBase::adjust_interpreted_frame_unextended_sp(frame& f) {\n+  Unimplemented();\n+}\n+\n@@ -72,1 +60,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -81,1 +69,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -94,1 +82,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -103,5 +91,0 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":8,"deletions":25,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -422,1 +422,5 @@\n-    pc_return_offset = 0\n+    pc_return_offset = 0,\n+    metadata_words   = 0,\n+    frame_alignment  = 16,\n+    \/\/ size, in words, of maximum shift in frame position due to alignment\n+    align_wiggle     =  1\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+#ifdef ASSERT\n+                        _frame_index(-1),\n+#endif\n@@ -61,1 +64,5 @@\n-inline frame::frame(intptr_t* sp) : _sp(sp), _on_heap(false), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp) : _sp(sp), _on_heap(false),\n+#ifdef ASSERT\n+                        _frame_index(-1),\n+#endif\n+                        _unextended_sp(sp) {\n@@ -65,1 +72,5 @@\n-inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _on_heap(false), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _on_heap(false),\n+#ifdef ASSERT\n+                         _frame_index(-1),\n+#endif\n+                        _unextended_sp(sp) {\n@@ -70,0 +81,3 @@\n+#ifdef ASSERT\n+                    _frame_index(-1),\n+#endif\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,0 +36,14 @@\n+frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n@@ -65,0 +79,3 @@\n+void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n+  Unimplemented();\n+}\n@@ -67,0 +84,4 @@\n+void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,17 +32,0 @@\n-frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n-  Unimplemented();\n-}\n-\n@@ -59,1 +42,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -64,0 +47,4 @@\n+void FreezeBase::adjust_interpreted_frame_unextended_sp(frame& f) {\n+  Unimplemented();\n+}\n+\n@@ -72,1 +59,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -81,1 +68,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -94,1 +81,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -103,5 +90,0 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -557,0 +557,4 @@\n+    metadata_words   = 0,\n+    frame_alignment  = 16,\n+    \/\/ size, in words, of maximum shift in frame position due to alignment\n+    align_wiggle     =  1\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+#ifdef ASSERT\n+                        _frame_index(-1),\n+#endif\n@@ -60,1 +63,5 @@\n-inline frame::frame(intptr_t* sp) : _sp(sp), _on_heap(false), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp) : _sp(sp), _on_heap(false),\n+#ifdef ASSERT\n+                        _frame_index(-1),\n+#endif\n+                        _unextended_sp(sp) {\n@@ -64,1 +71,5 @@\n-inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _on_heap(false), _unextended_sp(sp) {\n+inline frame::frame(intptr_t* sp, address pc) : _sp(sp), _on_heap(false),\n+#ifdef ASSERT\n+                        _frame_index(-1),\n+#endif\n+                        _unextended_sp(sp) {\n@@ -69,0 +80,3 @@\n+#ifdef ASSERT\n+                                                                         _frame_index(-1),\n+#endif\n@@ -77,0 +91,3 @@\n+#ifdef ASSERT\n+  _frame_index(-1),\n+#endif\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+#ifdef ASSERT\n@@ -88,1 +89,0 @@\n-#ifdef ASSERT\n","filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -54,1 +54,1 @@\n-  *(vsp - frame::sender_sp_offset) = *(hsp - frame::sender_sp_offset);\n+  *(frame_sp - frame::sender_sp_offset) = *(heap_sp - frame::sender_sp_offset);\n@@ -80,1 +80,1 @@\n-frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -91,1 +91,1 @@\n-    fp = caller.unextended_sp() - (locals + frame::sender_sp_offset) + (overlap_caller ? ContinuationHelper::InterpretedFrame::stack_argsize(f) : 0);\n+    fp = caller.unextended_sp() - (locals + frame::sender_sp_offset) + (overlap_caller ?  ContinuationHelper::InterpretedFrame::stack_argsize(f) : 0);\n@@ -103,1 +103,4 @@\n-    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset); \/\/ we need to re-read fp because it may be an oop and we might have had a safepoint in finalize_freeze, after constructing f.\n+    \/\/ We need to re-read fp out of the frame because it may be an oop and we might have\n+    \/\/ had a safepoint in finalize_freeze, after constructing f.\n+    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset);\n+\n@@ -203,1 +206,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -207,1 +210,1 @@\n-    intptr_t* hsp = hf.unextended_sp();\n+    intptr_t* heap_sp = hf.unextended_sp();\n@@ -210,2 +213,2 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n-    intptr_t* fp = vsp + (hf.fp() - hsp);\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n+    intptr_t* fp = frame_sp + (hf.fp() - heap_sp);\n@@ -213,1 +216,1 @@\n-    assert(vsp == unextended_sp, \"\");\n+    assert(frame_sp == unextended_sp, \"\");\n@@ -215,1 +218,1 @@\n-    frame f(vsp, vsp, fp, hf.pc());\n+    frame f(frame_sp, frame_sp, fp, hf.pc());\n@@ -223,1 +226,1 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n@@ -228,1 +231,1 @@\n-      vsp   -= argsize;\n+      frame_sp   -= argsize;\n@@ -230,1 +233,1 @@\n-      assert(caller.sp() == vsp + (fsize-argsize), \"\");\n+      assert(caller.sp() == frame_sp + (fsize-argsize), \"\");\n@@ -232,1 +235,1 @@\n-      vsp = align(hf, vsp, caller, bottom);\n+      frame_sp = align(hf, frame_sp, caller, bottom);\n@@ -240,1 +243,1 @@\n-      fp = vsp + FKind::size(hf) - frame::sender_sp_offset;\n+      fp = frame_sp + FKind::size(hf) - frame::sender_sp_offset;\n@@ -245,1 +248,1 @@\n-    return frame(vsp, vsp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n+    return frame(frame_sp, frame_sp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n@@ -249,1 +252,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -251,1 +254,1 @@\n-  if (((intptr_t)vsp & 0xf) != 0) {\n+  if (((intptr_t)frame_sp & 0xf) != 0) {\n@@ -253,1 +256,1 @@\n-    vsp--;\n+    frame_sp--;\n@@ -256,1 +259,1 @@\n-  assert(is_aligned(vsp, frame::frame_alignment), \"\");\n+  assert(is_aligned(frame_sp, frame::frame_alignment), \"\");\n@@ -259,1 +262,1 @@\n-  return vsp;\n+  return frame_sp;\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":25,"deletions":22,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -231,6 +231,0 @@\n-inline int frame::num_oops() const {\n-  assert(!is_interpreted_frame(), \"interpreted\");\n-  assert(oop_map() != NULL, \"\");\n-  return oop_map()->num_oops() ;\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,14 @@\n+frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n@@ -65,0 +79,4 @@\n+void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n+  Unimplemented();\n+}\n+\n@@ -66,0 +84,4 @@\n+void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,17 +32,0 @@\n-frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_to_entry_pd(JavaFrameAnchor* anchor, ContinuationEntry* cont) {\n-  Unimplemented();\n-}\n-\n-void ContinuationHelper::set_anchor_pd(JavaFrameAnchor* anchor, intptr_t* sp) {\n-  Unimplemented();\n-}\n-\n@@ -59,1 +42,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -64,0 +47,4 @@\n+void FreezeBase::adjust_interpreted_frame_unextended_sp(frame& f) {\n+  Unimplemented();\n+}\n+\n@@ -72,1 +59,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -81,1 +68,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -94,1 +81,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -103,5 +90,0 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":8,"deletions":26,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -33,1 +33,5 @@\n-    pc_return_offset = 0\n+    pc_return_offset = 0,\n+    metadata_words   = 0,\n+    frame_alignment  = 16,\n+    \/\/ size, in words, of maximum shift in frame position due to alignment\n+    align_wiggle     =  1\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+  DEBUG_ONLY(_frame_index = -1;)\n@@ -52,0 +53,1 @@\n+  DEBUG_ONLY(_frame_index = -1;)\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-template<typename ConfigT> static inline int freeze0(JavaThread* current, intptr_t* const sp);\n+template<typename ConfigT> static inline int freeze_internal(JavaThread* current, intptr_t* const sp);\n@@ -211,2 +211,2 @@\n-static inline int prepare_thaw0(JavaThread* thread, bool return_barrier);\n-template<typename ConfigT> static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind);\n+static inline int prepare_thaw_internal(JavaThread* thread, bool return_barrier);\n+template<typename ConfigT> static inline intptr_t* thaw_internal(JavaThread* thread, const thaw_kind kind);\n@@ -224,1 +224,1 @@\n-    return freeze0<SelfT>(thread, sp);\n+    return freeze_internal<SelfT>(thread, sp);\n@@ -228,1 +228,1 @@\n-    return thaw0<SelfT>(thread, kind);\n+    return thaw_internal<SelfT>(thread, kind);\n@@ -539,1 +539,1 @@\n-  return prepare_thaw0(thread, return_barrier);\n+  return prepare_thaw_internal(thread, return_barrier);\n@@ -955,1 +955,1 @@\n-  inline void patch_chunk_pd(intptr_t* vsp, intptr_t* hsp);\n+  inline void patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp);\n@@ -979,1 +979,1 @@\n-  template<typename FKind> frame new_hframe(frame& f, frame& caller);\n+  template<typename FKind> frame new_heap_frame(frame& f, frame& caller);\n@@ -998,1 +998,1 @@\n-  inline bool is_chunk_available(intptr_t* top_sp\n+  inline bool is_chunk_available(intptr_t* frame_sp\n@@ -1004,1 +1004,1 @@\n-  template <bool chunk_available> bool freeze_fast(intptr_t* top_sp);\n+  template <bool chunk_available> bool freeze_fast(intptr_t* frame_sp);\n@@ -1087,1 +1087,1 @@\n-bool Freeze<ConfigT>::is_chunk_available(intptr_t* top_sp\n+bool Freeze<ConfigT>::is_chunk_available(intptr_t* frame_sp\n@@ -1098,1 +1098,1 @@\n-  \/\/ assert(CodeCache::find_blob(*(address*)(top_sp - SENDER_SP_RET_ADDRESS_OFFSET)) == StubRoutines::cont_doYield_stub(), \"\"); -- fails on Windows\n+  \/\/ assert(CodeCache::find_blob(*(address*)(frame_sp - SENDER_SP_RET_ADDRESS_OFFSET)) == StubRoutines::cont_doYield_stub(), \"\"); -- fails on Windows\n@@ -1100,1 +1100,1 @@\n-  intptr_t* const stack_top     = top_sp + frame::metadata_words;\n+  intptr_t* const stack_top     = frame_sp + frame::metadata_words;\n@@ -1120,1 +1120,1 @@\n-bool Freeze<ConfigT>::freeze_fast(intptr_t* top_sp) {\n+bool Freeze<ConfigT>::freeze_fast(intptr_t* frame_sp) {\n@@ -1126,1 +1126,1 @@\n-  intptr_t* const cont_stack_top    = top_sp + frame::metadata_words;\n+  intptr_t* const cont_stack_top    = frame_sp + frame::metadata_words;\n@@ -1138,1 +1138,1 @@\n-  bool is_chunk_available0 = is_chunk_available(top_sp, &is_chunk_available_size);\n+  bool is_chunk_available0 = is_chunk_available(frame_sp, &is_chunk_available_size);\n@@ -1179,1 +1179,1 @@\n-    assert(!is_chunk_available(top_sp), \"\");\n+    assert(!is_chunk_available(frame_sp), \"\");\n@@ -1569,1 +1569,14 @@\n-NOINLINE freeze_result FreezeBase::recurse_freeze_interpreted_frame(frame& f, frame& caller, int callee_argsize, bool callee_interpreted) {\n+#ifdef ASSERT\n+static void verify_frame_top(const frame& f, intptr_t* top) {\n+  ResourceMark rm;\n+  InterpreterOopMap mask;\n+  f.interpreted_frame_oop_map(&mask);\n+  assert(top <= ContinuationHelper::InterpretedFrame::frame_top(f, &mask),\n+         \"frame_sp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n+           p2i(top), p2i(ContinuationHelper::InterpretedFrame::frame_top(f, &mask)));\n+}\n+#endif \/\/ ASSERT\n+\n+NOINLINE freeze_result FreezeBase::recurse_freeze_interpreted_frame(frame& f, frame& caller,\n+                                                                    int callee_argsize,\n+                                                                    bool callee_interpreted) {\n@@ -1572,1 +1585,1 @@\n-  intptr_t* const vsp = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const frame_sp = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n@@ -1576,1 +1589,1 @@\n-  const int fsize = f.fp() + frame::metadata_words + locals - vsp;\n+  const int fsize = f.fp() + frame::metadata_words + locals - frame_sp;\n@@ -1578,9 +1591,1 @@\n-#ifdef ASSERT\n-  {\n-    ResourceMark rm;\n-    InterpreterOopMap mask;\n-    f.interpreted_frame_oop_map(&mask);\n-    assert(vsp <= ContinuationHelper::InterpretedFrame::frame_top(f, &mask), \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n-           p2i(vsp), p2i(ContinuationHelper::InterpretedFrame::frame_top(f, &mask)));\n-  }\n-#endif\n+  DEBUG_ONLY(verify_frame_top(f, frame_sp));\n@@ -1604,1 +1609,1 @@\n-  frame hf = new_hframe<ContinuationHelper::InterpretedFrame>(f, caller);\n+  frame hf = new_heap_frame<ContinuationHelper::InterpretedFrame>(f, caller);\n@@ -1606,2 +1611,2 @@\n-  intptr_t* hsp = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(hf) == hsp + fsize, \"\");\n+  intptr_t* heap_sp = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  assert(ContinuationHelper::InterpretedFrame::frame_bottom(hf) == heap_sp + fsize, \"\");\n@@ -1612,2 +1617,2 @@\n-  copy_to_chunk(vsp, hsp, fsize - locals); \/\/ copy rest\n-  assert(!bottom || !caller.is_interpreted_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(frame_sp, heap_sp, fsize - locals); \/\/ copy rest\n+  assert(!bottom || !caller.is_interpreted_frame() || (heap_sp + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1630,1 +1635,1 @@\n-  intptr_t* const vsp = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const frame_sp = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n@@ -1632,1 +1637,1 @@\n-  const int fsize = ContinuationHelper::CompiledFrame::frame_bottom(f) + argsize - vsp;\n+  const int fsize = ContinuationHelper::CompiledFrame::frame_bottom(f) + argsize - frame_sp;\n@@ -1650,1 +1655,1 @@\n-  frame hf = new_hframe<ContinuationHelper::CompiledFrame>(f, caller);\n+  frame hf = new_heap_frame<ContinuationHelper::CompiledFrame>(f, caller);\n@@ -1652,1 +1657,1 @@\n-  intptr_t* hsp = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  intptr_t* heap_sp = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n@@ -1654,2 +1659,2 @@\n-  copy_to_chunk(vsp, hsp, fsize);\n-  assert(!bottom || !caller.is_compiled_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(frame_sp, heap_sp, fsize);\n+  assert(!bottom || !caller.is_compiled_frame() || (heap_sp + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1671,1 +1676,1 @@\n-  intptr_t* const vsp = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n+  intptr_t* const frame_sp = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n@@ -1675,1 +1680,1 @@\n-    f.cb()->name(), _size, fsize, p2i(vsp), p2i(vsp+fsize));\n+    f.cb()->name(), _size, fsize, p2i(frame_sp), p2i(frame_sp+fsize));\n@@ -1705,3 +1710,3 @@\n-  frame hf = new_hframe<ContinuationHelper::StubFrame>(f, caller);\n-  intptr_t* hsp = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n-  copy_to_chunk(vsp, hsp, fsize);\n+  frame hf = new_heap_frame<ContinuationHelper::StubFrame>(f, caller);\n+  intptr_t* heap_sp = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n+  copy_to_chunk(frame_sp, heap_sp, fsize);\n@@ -1943,1 +1948,1 @@\n-static inline int freeze0(JavaThread* current, intptr_t* const sp) {\n+static inline int freeze_internal(JavaThread* current, intptr_t* const sp) {\n@@ -1945,2 +1950,0 @@\n-  \/\/ This was a bug once?\n-  \/\/ assert(current->deferred_updates() == nullptr || current->deferred_updates()->count() == 0, \"\");\n@@ -1974,3 +1977,0 @@\n-  bool fast = can_freeze_fast(current);\n-  assert(!fast || current->held_monitor_count() == 0, \"\");\n-\n@@ -1979,0 +1979,1 @@\n+  bool fast = can_freeze_fast(current);\n@@ -2061,1 +2062,1 @@\n-static inline int prepare_thaw0(JavaThread* thread, bool return_barrier) {\n+static inline int prepare_thaw_internal(JavaThread* thread, bool return_barrier) {\n@@ -2075,0 +2076,1 @@\n+  \/\/ Comment needed: Why would the tail chunk be empty? Why do you get the parent?\n@@ -2085,0 +2087,1 @@\n+  \/\/ Only make space for the topmost chunk.\n@@ -2094,0 +2097,2 @@\n+  \/\/ 300 is an estimate for stack size taken for this native code, in addition to StackShadowPages\n+  \/\/ for the Java frames in the check below.\n@@ -2141,1 +2146,1 @@\n-  void thaw(const frame& hf, frame& caller, int num_frames, bool top);\n+  void thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top);\n@@ -2157,1 +2162,1 @@\n-  template<typename FKind> frame new_frame(const frame& hf, frame& caller, bool bottom);\n+  template<typename FKind> frame new_stack_frame(const frame& hf, frame& caller, bool bottom);\n@@ -2159,1 +2164,1 @@\n-  inline intptr_t* align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom);\n+  inline intptr_t* align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom);\n@@ -2185,0 +2190,1 @@\n+  \/\/ Comment in assert needed: is entryPC in the heap? or enterSpecial stub frame?\n@@ -2195,0 +2201,1 @@\n+  \/\/ I have no idea what config does in this function.\n@@ -2202,1 +2209,0 @@\n-  assert(chunk != nullptr, \"\");\n@@ -2204,1 +2210,0 @@\n-  assert(!chunk->is_empty(), \"\");\n@@ -2219,0 +2224,1 @@\n+  \/\/ Below this heuristic, we thaw the whole chunk, above it we thaw just one frame.\n@@ -2337,3 +2343,0 @@\n-  assert(!_cont.is_empty(), \"\");\n-  assert(chunk != nullptr, \"\");\n-  assert(!chunk->is_empty(), \"\");\n@@ -2348,0 +2351,1 @@\n+  \/\/ Does this need ifdef JFR around it? Or can we remove all the conditional JFR inclusions (better)?\n@@ -2362,1 +2366,1 @@\n-  frame hf = _stream.to_frame();\n+  frame heap_frame = _stream.to_frame();\n@@ -2366,2 +2370,2 @@\n-    assert(hf.is_heap_frame(), \"should have created a relative frame\");\n-    hf.print_on(&ls);\n+    assert(heap_frame.is_heap_frame(), \"should have created a relative frame\");\n+    heap_frame.print_on(&ls);\n@@ -2370,3 +2374,3 @@\n-  frame f;\n-  thaw(hf, f, num_frames, true);\n-  finish_thaw(f); \/\/ f is now the topmost thawed frame\n+  frame caller;\n+  thaw_one_frame(heap_frame, caller, num_frames, true);\n+  finish_thaw(caller); \/\/ caller is now the topmost thawed frame\n@@ -2381,1 +2385,1 @@\n-  intptr_t* sp = f.sp();\n+  intptr_t* sp = caller.sp();\n@@ -2398,1 +2402,1 @@\n-void ThawBase::thaw(const frame& hf, frame& caller, int num_frames, bool top) {\n+void ThawBase::thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top) {\n@@ -2402,1 +2406,1 @@\n-  assert(!hf.is_empty(), \"\");\n+  assert(!heap_frame.is_empty(), \"\");\n@@ -2404,5 +2408,5 @@\n-  if (top && hf.is_safepoint_blob_frame()) {\n-    assert(ContinuationHelper::Frame::is_stub(hf.cb()), \"cb: %s\", hf.cb()->name());\n-    recurse_thaw_stub_frame(hf, caller, num_frames);\n-  } else if (!hf.is_interpreted_frame()) {\n-    recurse_thaw_compiled_frame(hf, caller, num_frames, false);\n+  if (top && heap_frame.is_safepoint_blob_frame()) {\n+    assert(ContinuationHelper::Frame::is_stub(heap_frame.cb()), \"cb: %s\", heap_frame.cb()->name());\n+    recurse_thaw_stub_frame(heap_frame, caller, num_frames);\n+  } else if (!heap_frame.is_interpreted_frame()) {\n+    recurse_thaw_compiled_frame(heap_frame, caller, num_frames, false);\n@@ -2410,1 +2414,1 @@\n-    recurse_thaw_interpreted_frame(hf, caller, num_frames);\n+    recurse_thaw_interpreted_frame(heap_frame, caller, num_frames);\n@@ -2436,1 +2440,1 @@\n-    thaw(_stream.to_frame(), caller, num_frames - 1, false);\n+    thaw_one_frame(_stream.to_frame(), caller, num_frames - 1, false);\n@@ -2522,1 +2526,1 @@\n-  frame f = new_frame<ContinuationHelper::InterpretedFrame>(hf, caller, bottom);\n+  frame f = new_stack_frame<ContinuationHelper::InterpretedFrame>(hf, caller, bottom);\n@@ -2524,2 +2528,2 @@\n-  intptr_t* const vsp = f.sp();\n-  intptr_t* const hsp = hf.unextended_sp();\n+  intptr_t* const frame_sp = f.sp();\n+  intptr_t* const heap_sp = hf.unextended_sp();\n@@ -2529,1 +2533,1 @@\n-  const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - hsp;\n+  const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - heap_sp;\n@@ -2531,2 +2535,2 @@\n-  assert(!bottom || vsp + fsize >= _cont.entrySP() - 2, \"\");\n-  assert(!bottom || vsp + fsize <= _cont.entrySP(), \"\");\n+  assert(!bottom || frame_sp + fsize >= _cont.entrySP() - 2, \"\");\n+  assert(!bottom || frame_sp + fsize <= _cont.entrySP(), \"\");\n@@ -2534,1 +2538,1 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) == vsp + fsize, \"\");\n+  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) == frame_sp + fsize, \"\");\n@@ -2543,1 +2547,1 @@\n-  copy_from_chunk(hsp, vsp, fsize - locals); \/\/ copy rest\n+  copy_from_chunk(heap_sp, frame_sp, fsize - locals); \/\/ copy rest\n@@ -2594,3 +2598,3 @@\n-  frame f = new_frame<ContinuationHelper::CompiledFrame>(hf, caller, bottom);\n-  intptr_t* const vsp = f.sp();\n-  intptr_t* const hsp = hf.unextended_sp();\n+  frame f = new_stack_frame<ContinuationHelper::CompiledFrame>(hf, caller, bottom);\n+  intptr_t* const frame_sp = f.sp();\n+  intptr_t* const heap_sp = hf.unextended_sp();\n@@ -2602,2 +2606,2 @@\n-  intptr_t* from = hsp - frame::metadata_words;\n-  intptr_t* to   = vsp - frame::metadata_words;\n+  intptr_t* from = heap_sp - frame::metadata_words;\n+  intptr_t* to   = frame_sp - frame::metadata_words;\n@@ -2639,1 +2643,1 @@\n-    clear_bitmap_bits(hsp + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n+    clear_bitmap_bits(heap_sp + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n@@ -2670,3 +2674,3 @@\n-  frame f = new_frame<ContinuationHelper::StubFrame>(hf, caller, false);\n-  intptr_t* vsp = f.sp();\n-  intptr_t* hsp = hf.sp();\n+  frame f = new_stack_frame<ContinuationHelper::StubFrame>(hf, caller, false);\n+  intptr_t* frame_sp = f.sp();\n+  intptr_t* heap_sp = hf.sp();\n@@ -2674,1 +2678,1 @@\n-  copy_from_chunk(hsp - frame::metadata_words, vsp - frame::metadata_words,\n+  copy_from_chunk(heap_sp - frame::metadata_words, frame_sp - frame::metadata_words,\n@@ -2747,1 +2751,1 @@\n-static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind) {\n+static inline intptr_t* thaw_internal(JavaThread* thread, const thaw_kind kind) {\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":99,"deletions":95,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -107,0 +107,7 @@\n+inline int frame::num_oops() const {\n+  assert(!is_interpreted_frame(), \"interpreted\");\n+  assert(oop_map() != NULL, \"\");\n+  return oop_map()->num_oops() ;\n+}\n+\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1050,1 +1050,0 @@\n-  _carrier_thread_suspended(false),\n@@ -1052,0 +1051,1 @@\n+  _carrier_thread_suspended(false),\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}