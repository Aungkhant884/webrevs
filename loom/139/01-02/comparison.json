{"files":[{"patch":"@@ -1560,1 +1560,14 @@\n-NOINLINE freeze_result FreezeBase::recurse_freeze_interpreted_frame(frame& f, frame& caller, int callee_argsize, bool callee_interpreted) {\n+#ifdef ASSERT\n+static void verify_frame_top(const frame& f, intptr_t* top) {\n+  ResourceMark rm;\n+  InterpreterOopMap mask;\n+  f.interpreted_frame_oop_map(&mask);\n+  assert(top <= ContinuationHelper::InterpretedFrame::frame_top(f, &mask),\n+         \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n+           p2i(top), p2i(ContinuationHelper::InterpretedFrame::frame_top(f, &mask)));\n+}\n+#endif \/\/ ASSERT\n+\n+NOINLINE freeze_result FreezeBase::recurse_freeze_interpreted_frame(frame& f, frame& caller,\n+                                                                    int callee_argsize,\n+                                                                    bool callee_interpreted) {\n@@ -1563,0 +1576,2 @@\n+    \/\/ yes.\n+    \/\/ ContinuationHelper::InterpretedFrame::adjust_unextended_sp(f)  ?? but why?\n@@ -1567,0 +1582,1 @@\n+                 \/\/ is this ever at safepoint? maybe was for preempt?\n@@ -1573,0 +1589,1 @@\n+  \/\/ Why 'vsp' what is 'v' ?  isn't this the sp on the real stack?\n@@ -1579,9 +1596,1 @@\n-#ifdef ASSERT\n-  {\n-    ResourceMark rm;\n-    InterpreterOopMap mask;\n-    f.interpreted_frame_oop_map(&mask);\n-    assert(vsp <= ContinuationHelper::InterpretedFrame::frame_top(f, &mask), \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n-           p2i(vsp), p2i(ContinuationHelper::InterpretedFrame::frame_top(f, &mask)));\n-  }\n-#endif\n+  DEBUG_ONLY(verify_frame_top(f, vsp));\n@@ -2216,1 +2225,0 @@\n-  \/\/ LogTarget might generate some test code\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"}]}