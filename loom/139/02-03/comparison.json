{"files":[{"patch":"@@ -37,2 +37,2 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n-  *(vsp - frame::sender_sp_offset) = *(hsp - frame::sender_sp_offset);\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n+  *(frame_sp - frame::sender_sp_offset) = *(heap_sp - frame::sender_sp_offset);\n@@ -186,1 +186,1 @@\n-    intptr_t* hsp = hf.unextended_sp();\n+    intptr_t* heap_sp = hf.unextended_sp();\n@@ -189,2 +189,2 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n-    intptr_t* fp = vsp + (hf.fp() - hsp);\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n+    intptr_t* fp = frame_sp + (hf.fp() - heap_sp);\n@@ -193,1 +193,1 @@\n-      vsp--;\n+      frame_sp--;\n@@ -196,1 +196,1 @@\n-    assert(vsp == unextended_sp, \"\");\n+    assert(frame_sp == unextended_sp, \"\");\n@@ -198,1 +198,1 @@\n-    frame f(vsp, vsp, fp, hf.pc());\n+    frame f(frame_sp, frame_sp, fp, hf.pc());\n@@ -207,1 +207,1 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n@@ -212,1 +212,1 @@\n-      vsp   -= argsize;\n+      frame_sp   -= argsize;\n@@ -214,1 +214,1 @@\n-      assert(caller.sp() == vsp + (fsize-argsize), \"\");\n+      assert(caller.sp() == frame_sp + (fsize-argsize), \"\");\n@@ -216,1 +216,1 @@\n-      vsp = align(hf, vsp, caller, bottom);\n+      frame_sp = align(hf, frame_sp, caller, bottom);\n@@ -222,1 +222,1 @@\n-      ? vsp + fsize - frame::sender_sp_offset \/\/ on AArch64, this value is used for the safepoint stub\n+      ? frame_sp + fsize - frame::sender_sp_offset \/\/ on AArch64, this value is used for the safepoint stub\n@@ -224,1 +224,1 @@\n-    return frame(vsp, vsp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n+    return frame(frame_sp, frame_sp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n@@ -228,1 +228,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -230,1 +230,1 @@\n-  if (((intptr_t)vsp & 0xf) != 0) {\n+  if (((intptr_t)frame_sp & 0xf) != 0) {\n@@ -232,1 +232,1 @@\n-    vsp--;\n+    frame_sp--;\n@@ -235,1 +235,1 @@\n-  assert(is_aligned(vsp, frame::frame_alignment), \"\");\n+  assert(is_aligned(frame_sp, frame::frame_alignment), \"\");\n@@ -238,1 +238,1 @@\n-  return vsp;\n+  return frame_sp;\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -94,1 +94,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -94,1 +94,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -94,1 +94,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n-  *(vsp - frame::sender_sp_offset) = *(hsp - frame::sender_sp_offset);\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n+  *(frame_sp - frame::sender_sp_offset) = *(heap_sp - frame::sender_sp_offset);\n@@ -201,1 +201,1 @@\n-    intptr_t* hsp = hf.unextended_sp();\n+    intptr_t* heap_sp = hf.unextended_sp();\n@@ -204,2 +204,2 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n-    intptr_t* fp = vsp + (hf.fp() - hsp);\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n+    intptr_t* fp = frame_sp + (hf.fp() - heap_sp);\n@@ -207,1 +207,1 @@\n-    assert(vsp == unextended_sp, \"\");\n+    assert(frame_sp == unextended_sp, \"\");\n@@ -209,1 +209,1 @@\n-    frame f(vsp, vsp, fp, hf.pc());\n+    frame f(frame_sp, frame_sp, fp, hf.pc());\n@@ -217,1 +217,1 @@\n-    intptr_t* vsp = caller.unextended_sp() - fsize;\n+    intptr_t* frame_sp = caller.unextended_sp() - fsize;\n@@ -222,1 +222,1 @@\n-      vsp   -= argsize;\n+      frame_sp   -= argsize;\n@@ -224,1 +224,1 @@\n-      assert(caller.sp() == vsp + (fsize-argsize), \"\");\n+      assert(caller.sp() == frame_sp + (fsize-argsize), \"\");\n@@ -226,1 +226,1 @@\n-      vsp = align(hf, vsp, caller, bottom);\n+      frame_sp = align(hf, frame_sp, caller, bottom);\n@@ -233,1 +233,1 @@\n-    return frame(vsp, vsp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n+    return frame(frame_sp, frame_sp, fp, hf.pc(), hf.cb(), hf.oop_map(), false); \/\/ TODO PERF : this computes deopt state; is it necessary?\n@@ -237,1 +237,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n@@ -239,1 +239,1 @@\n-  if (((intptr_t)vsp & 0xf) != 0) {\n+  if (((intptr_t)frame_sp & 0xf) != 0) {\n@@ -241,1 +241,1 @@\n-    vsp--;\n+    frame_sp--;\n@@ -244,1 +244,1 @@\n-  assert(is_aligned(vsp, frame::frame_alignment), \"\");\n+  assert(is_aligned(frame_sp, frame::frame_alignment), \"\");\n@@ -247,1 +247,1 @@\n-  return vsp;\n+  return frame_sp;\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void FreezeBase::patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n@@ -94,1 +94,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -953,1 +953,1 @@\n-  inline void patch_chunk_pd(intptr_t* vsp, intptr_t* hsp);\n+  inline void patch_chunk_pd(intptr_t* frame_sp, intptr_t* heap_sp);\n@@ -995,1 +995,1 @@\n-  inline bool is_chunk_available(intptr_t* top_sp\n+  inline bool is_chunk_available(intptr_t* frame_sp\n@@ -1001,1 +1001,1 @@\n-  template <bool chunk_available> bool freeze_fast(intptr_t* top_sp);\n+  template <bool chunk_available> bool freeze_fast(intptr_t* frame_sp);\n@@ -1083,1 +1083,1 @@\n-bool Freeze<ConfigT>::is_chunk_available(intptr_t* top_sp\n+bool Freeze<ConfigT>::is_chunk_available(intptr_t* frame_sp\n@@ -1094,1 +1094,1 @@\n-  \/\/ assert(CodeCache::find_blob(*(address*)(top_sp - SENDER_SP_RET_ADDRESS_OFFSET)) == StubRoutines::cont_doYield_stub(), \"\"); -- fails on Windows\n+  \/\/ assert(CodeCache::find_blob(*(address*)(frame_sp - SENDER_SP_RET_ADDRESS_OFFSET)) == StubRoutines::cont_doYield_stub(), \"\"); -- fails on Windows\n@@ -1096,1 +1096,1 @@\n-  intptr_t* const stack_top     = top_sp + frame::metadata_words;\n+  intptr_t* const stack_top     = frame_sp + frame::metadata_words;\n@@ -1116,1 +1116,1 @@\n-bool Freeze<ConfigT>::freeze_fast(intptr_t* top_sp) {\n+bool Freeze<ConfigT>::freeze_fast(intptr_t* frame_sp) {\n@@ -1122,1 +1122,1 @@\n-  intptr_t* const cont_stack_top    = top_sp + frame::metadata_words;\n+  intptr_t* const cont_stack_top    = frame_sp + frame::metadata_words;\n@@ -1134,1 +1134,1 @@\n-  bool is_chunk_available0 = is_chunk_available(top_sp, &is_chunk_available_size);\n+  bool is_chunk_available0 = is_chunk_available(frame_sp, &is_chunk_available_size);\n@@ -1170,1 +1170,1 @@\n-    assert(!is_chunk_available(top_sp), \"\");\n+    assert(!is_chunk_available(frame_sp), \"\");\n@@ -1566,1 +1566,1 @@\n-         \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n+         \"frame_sp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n@@ -1589,2 +1589,1 @@\n-  \/\/ Why 'vsp' what is 'v' ?  isn't this the sp on the real stack?\n-  intptr_t* const vsp = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const frame_sp = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n@@ -1594,1 +1593,1 @@\n-  const int fsize = f.fp() + frame::metadata_words + locals - vsp;\n+  const int fsize = f.fp() + frame::metadata_words + locals - frame_sp;\n@@ -1596,1 +1595,1 @@\n-  DEBUG_ONLY(verify_frame_top(f, vsp));\n+  DEBUG_ONLY(verify_frame_top(f, frame_sp));\n@@ -1616,2 +1615,2 @@\n-  intptr_t* hsp = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(hf) == hsp + fsize, \"\");\n+  intptr_t* heap_sp = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  assert(ContinuationHelper::InterpretedFrame::frame_bottom(hf) == heap_sp + fsize, \"\");\n@@ -1622,2 +1621,2 @@\n-  copy_to_chunk(vsp, hsp, fsize - locals); \/\/ copy rest\n-  assert(!bottom || !caller.is_interpreted_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(frame_sp, heap_sp, fsize - locals); \/\/ copy rest\n+  assert(!bottom || !caller.is_interpreted_frame() || (heap_sp + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1640,1 +1639,1 @@\n-  intptr_t* const vsp = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const frame_sp = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n@@ -1642,1 +1641,1 @@\n-  const int fsize = ContinuationHelper::CompiledFrame::frame_bottom(f) + argsize - vsp;\n+  const int fsize = ContinuationHelper::CompiledFrame::frame_bottom(f) + argsize - frame_sp;\n@@ -1662,1 +1661,1 @@\n-  intptr_t* hsp = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  intptr_t* heap_sp = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n@@ -1664,2 +1663,2 @@\n-  copy_to_chunk(vsp, hsp, fsize);\n-  assert(!bottom || !caller.is_compiled_frame() || (hsp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(frame_sp, heap_sp, fsize);\n+  assert(!bottom || !caller.is_compiled_frame() || (heap_sp + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1681,1 +1680,1 @@\n-  intptr_t* const vsp = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n+  intptr_t* const frame_sp = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n@@ -1685,1 +1684,1 @@\n-    f.cb()->name(), _size, fsize, p2i(vsp), p2i(vsp+fsize));\n+    f.cb()->name(), _size, fsize, p2i(frame_sp), p2i(frame_sp+fsize));\n@@ -1716,2 +1715,2 @@\n-  intptr_t* hsp = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n-  copy_to_chunk(vsp, hsp, fsize);\n+  intptr_t* heap_sp = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n+  copy_to_chunk(frame_sp, heap_sp, fsize);\n@@ -2096,2 +2095,1 @@\n-  \/\/ Comment needed: Just the size for the first chunk? Isn't there a linked list of chunks?\n-  \/\/ Don't you need the sum of their sizes?\n+  \/\/ Only make space for the topmost chunk.\n@@ -2107,1 +2105,2 @@\n-  \/\/ Comment needed: 300 ?\n+  \/\/ 300 is an estimate for stack size taken for this native code, in addition to StackShadowPages\n+  \/\/ for the Java frames in the check below.\n@@ -2173,1 +2172,1 @@\n-  inline intptr_t* align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom);\n+  inline intptr_t* align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom);\n@@ -2232,1 +2231,1 @@\n-  \/\/ Comment needed: why is 500? Related to 300 in can_thaw_fast?\n+  \/\/ Below this heuristic, we thaw the whole chunk, above it we thaw just one frame.\n@@ -2536,2 +2535,2 @@\n-  intptr_t* const vsp = f.sp();\n-  intptr_t* const hsp = hf.unextended_sp();\n+  intptr_t* const frame_sp = f.sp();\n+  intptr_t* const heap_sp = hf.unextended_sp();\n@@ -2541,1 +2540,1 @@\n-  const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - hsp;\n+  const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - heap_sp;\n@@ -2543,2 +2542,2 @@\n-  assert(!bottom || vsp + fsize >= _cont.entrySP() - 2, \"\");\n-  assert(!bottom || vsp + fsize <= _cont.entrySP(), \"\");\n+  assert(!bottom || frame_sp + fsize >= _cont.entrySP() - 2, \"\");\n+  assert(!bottom || frame_sp + fsize <= _cont.entrySP(), \"\");\n@@ -2546,1 +2545,1 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) == vsp + fsize, \"\");\n+  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) == frame_sp + fsize, \"\");\n@@ -2555,1 +2554,1 @@\n-  copy_from_chunk(hsp, vsp, fsize - locals); \/\/ copy rest\n+  copy_from_chunk(heap_sp, frame_sp, fsize - locals); \/\/ copy rest\n@@ -2607,2 +2606,2 @@\n-  intptr_t* const vsp = f.sp();\n-  intptr_t* const hsp = hf.unextended_sp();\n+  intptr_t* const frame_sp = f.sp();\n+  intptr_t* const heap_sp = hf.unextended_sp();\n@@ -2614,2 +2613,2 @@\n-  intptr_t* from = hsp - frame::metadata_words;\n-  intptr_t* to   = vsp - frame::metadata_words;\n+  intptr_t* from = heap_sp - frame::metadata_words;\n+  intptr_t* to   = frame_sp - frame::metadata_words;\n@@ -2650,1 +2649,1 @@\n-    clear_bitmap_bits(hsp + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n+    clear_bitmap_bits(heap_sp + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n@@ -2682,2 +2681,2 @@\n-  intptr_t* vsp = f.sp();\n-  intptr_t* hsp = hf.sp();\n+  intptr_t* frame_sp = f.sp();\n+  intptr_t* heap_sp = hf.sp();\n@@ -2685,1 +2684,1 @@\n-  copy_from_chunk(hsp - frame::metadata_words, vsp - frame::metadata_words,\n+  copy_from_chunk(heap_sp - frame::metadata_words, frame_sp - frame::metadata_words,\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":47,"deletions":48,"binary":false,"changes":95,"status":"modified"}]}