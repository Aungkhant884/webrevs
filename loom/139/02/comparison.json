{"files":[{"patch":"@@ -65,1 +65,1 @@\n-frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -88,1 +88,4 @@\n-    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset); \/\/ we need to re-read fp because it may be an oop and we might have had a safepoint in finalize_freeze, after constructing f.\n+    \/\/ We need to re-read fp out of the frame because it may be an oop and we might have\n+    \/\/ had a safepoint in finalize_freeze, after constructing f.\n+    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset);\n+\n@@ -179,1 +182,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -81,1 +81,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -81,1 +81,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -81,1 +81,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -90,1 +90,1 @@\n-    fp = caller.unextended_sp() - (locals + frame::sender_sp_offset) + (overlap_caller ? ContinuationHelper::InterpretedFrame::stack_argsize(f) : 0);\n+    fp = caller.unextended_sp() - (locals + frame::sender_sp_offset) + (overlap_caller ?  ContinuationHelper::InterpretedFrame::stack_argsize(f) : 0);\n@@ -102,1 +102,4 @@\n-    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset); \/\/ we need to re-read fp because it may be an oop and we might have had a safepoint in finalize_freeze, after constructing f.\n+    \/\/ We need to re-read fp out of the frame because it may be an oop and we might have\n+    \/\/ had a safepoint in finalize_freeze, after constructing f.\n+    fp = *(intptr_t**)(f.sp() - frame::sender_sp_offset);\n+\n@@ -194,1 +197,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -228,1 +231,2 @@\n-    intptr_t* fp = *(intptr_t**)(hf.sp() - frame::sender_sp_offset); \/\/ we need to re-read fp because it may be an oop and we might have fixed the frame.\n+    \/\/ we need to re-read fp because it may be an oop and we might have fixed the frame.\n+    intptr_t* fp = *(intptr_t**)(hf.sp() - frame::sender_sp_offset);\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n@@ -81,1 +81,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-template<typename ConfigT> static inline int freeze0(JavaThread* current, intptr_t* const sp);\n+template<typename ConfigT> static inline int freeze_internal(JavaThread* current, intptr_t* const sp);\n@@ -212,2 +212,2 @@\n-static inline int prepare_thaw0(JavaThread* thread, bool return_barrier);\n-template<typename ConfigT> static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind);\n+static inline int prepare_thaw_internal(JavaThread* thread, bool return_barrier);\n+template<typename ConfigT> static inline intptr_t* thaw_internal(JavaThread* thread, const thaw_kind kind);\n@@ -225,1 +225,1 @@\n-    return freeze0<SelfT>(thread, sp);\n+    return freeze_internal<SelfT>(thread, sp);\n@@ -229,1 +229,1 @@\n-    return thaw0<SelfT>(thread, kind);\n+    return thaw_internal<SelfT>(thread, kind);\n@@ -540,1 +540,1 @@\n-  return prepare_thaw0(thread, return_barrier);\n+  return prepare_thaw_internal(thread, return_barrier);\n@@ -977,1 +977,1 @@\n-  template<typename FKind> frame new_hframe(frame& f, frame& caller);\n+  template<typename FKind> frame new_heap_frame(frame& f, frame& caller);\n@@ -1560,1 +1560,14 @@\n-NOINLINE freeze_result FreezeBase::recurse_freeze_interpreted_frame(frame& f, frame& caller, int callee_argsize, bool callee_interpreted) {\n+#ifdef ASSERT\n+static void verify_frame_top(const frame& f, intptr_t* top) {\n+  ResourceMark rm;\n+  InterpreterOopMap mask;\n+  f.interpreted_frame_oop_map(&mask);\n+  assert(top <= ContinuationHelper::InterpretedFrame::frame_top(f, &mask),\n+         \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n+           p2i(top), p2i(ContinuationHelper::InterpretedFrame::frame_top(f, &mask)));\n+}\n+#endif \/\/ ASSERT\n+\n+NOINLINE freeze_result FreezeBase::recurse_freeze_interpreted_frame(frame& f, frame& caller,\n+                                                                    int callee_argsize,\n+                                                                    bool callee_interpreted) {\n@@ -1563,0 +1576,2 @@\n+    \/\/ yes.\n+    \/\/ ContinuationHelper::InterpretedFrame::adjust_unextended_sp(f)  ?? but why?\n@@ -1567,0 +1582,1 @@\n+                 \/\/ is this ever at safepoint? maybe was for preempt?\n@@ -1573,0 +1589,1 @@\n+  \/\/ Why 'vsp' what is 'v' ?  isn't this the sp on the real stack?\n@@ -1579,9 +1596,1 @@\n-#ifdef ASSERT\n-  {\n-    ResourceMark rm;\n-    InterpreterOopMap mask;\n-    f.interpreted_frame_oop_map(&mask);\n-    assert(vsp <= ContinuationHelper::InterpretedFrame::frame_top(f, &mask), \"vsp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n-           p2i(vsp), p2i(ContinuationHelper::InterpretedFrame::frame_top(f, &mask)));\n-  }\n-#endif\n+  DEBUG_ONLY(verify_frame_top(f, vsp));\n@@ -1605,1 +1614,1 @@\n-  frame hf = new_hframe<ContinuationHelper::InterpretedFrame>(f, caller);\n+  frame hf = new_heap_frame<ContinuationHelper::InterpretedFrame>(f, caller);\n@@ -1651,1 +1660,1 @@\n-  frame hf = new_hframe<ContinuationHelper::CompiledFrame>(f, caller);\n+  frame hf = new_heap_frame<ContinuationHelper::CompiledFrame>(f, caller);\n@@ -1706,1 +1715,1 @@\n-  frame hf = new_hframe<ContinuationHelper::StubFrame>(f, caller);\n+  frame hf = new_heap_frame<ContinuationHelper::StubFrame>(f, caller);\n@@ -1952,1 +1961,1 @@\n-static inline int freeze0(JavaThread* current, intptr_t* const sp) {\n+static inline int freeze_internal(JavaThread* current, intptr_t* const sp) {\n@@ -1954,2 +1963,0 @@\n-  \/\/ This was a bug once?\n-  \/\/ assert(current->deferred_updates() == nullptr || current->deferred_updates()->count() == 0, \"\");\n@@ -1983,3 +1990,0 @@\n-  bool fast = can_freeze_fast(current);\n-  assert(!fast || current->held_monitor_count() == 0, \"\");\n-\n@@ -1988,0 +1992,1 @@\n+  bool fast = can_freeze_fast(current);\n@@ -2066,1 +2071,1 @@\n-static inline int prepare_thaw0(JavaThread* thread, bool return_barrier) {\n+static inline int prepare_thaw_internal(JavaThread* thread, bool return_barrier) {\n@@ -2080,0 +2085,1 @@\n+  \/\/ Comment needed: Why would the tail chunk be empty? Why do you get the parent?\n@@ -2090,0 +2096,2 @@\n+  \/\/ Comment needed: Just the size for the first chunk? Isn't there a linked list of chunks?\n+  \/\/ Don't you need the sum of their sizes?\n@@ -2099,0 +2107,1 @@\n+  \/\/ Comment needed: 300 ?\n@@ -2146,1 +2155,1 @@\n-  void thaw(const frame& hf, frame& caller, int num_frames, bool top);\n+  void thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top);\n@@ -2162,1 +2171,1 @@\n-  template<typename FKind> frame new_frame(const frame& hf, frame& caller, bool bottom);\n+  template<typename FKind> frame new_stack_frame(const frame& hf, frame& caller, bool bottom);\n@@ -2189,0 +2198,1 @@\n+  \/\/ Comment in assert needed: is entryPC in the heap? or enterSpecial stub frame?\n@@ -2199,0 +2209,1 @@\n+  \/\/ I have no idea what config does in this function.\n@@ -2206,1 +2217,0 @@\n-  assert(chunk != nullptr, \"\");\n@@ -2208,1 +2218,0 @@\n-  assert(!chunk->is_empty(), \"\");\n@@ -2223,0 +2232,1 @@\n+  \/\/ Comment needed: why is 500? Related to 300 in can_thaw_fast?\n@@ -2341,3 +2351,0 @@\n-  assert(!_cont.is_empty(), \"\");\n-  assert(chunk != nullptr, \"\");\n-  assert(!chunk->is_empty(), \"\");\n@@ -2352,0 +2359,1 @@\n+  \/\/ Does this need ifdef JFR around it? Or can we remove all the conditional JFR inclusions (better)?\n@@ -2366,1 +2374,1 @@\n-  frame hf = _stream.to_frame();\n+  frame heap_frame = _stream.to_frame();\n@@ -2370,2 +2378,2 @@\n-    assert(hf.is_heap_frame(), \"should have created a relative frame\");\n-    hf.print_on(&ls);\n+    assert(heap_frame.is_heap_frame(), \"should have created a relative frame\");\n+    heap_frame.print_on(&ls);\n@@ -2374,3 +2382,3 @@\n-  frame f;\n-  thaw(hf, f, num_frames, true);\n-  finish_thaw(f); \/\/ f is now the topmost thawed frame\n+  frame caller;\n+  thaw_one_frame(heap_frame, caller, num_frames, true);\n+  finish_thaw(caller); \/\/ caller is now the topmost thawed frame\n@@ -2385,1 +2393,1 @@\n-  intptr_t* sp = f.sp();\n+  intptr_t* sp = caller.sp();\n@@ -2402,1 +2410,1 @@\n-void ThawBase::thaw(const frame& hf, frame& caller, int num_frames, bool top) {\n+void ThawBase::thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top) {\n@@ -2406,1 +2414,1 @@\n-  assert(!hf.is_empty(), \"\");\n+  assert(!heap_frame.is_empty(), \"\");\n@@ -2408,5 +2416,5 @@\n-  if (top && hf.is_safepoint_blob_frame()) {\n-    assert(ContinuationHelper::Frame::is_stub(hf.cb()), \"cb: %s\", hf.cb()->name());\n-    recurse_thaw_stub_frame(hf, caller, num_frames);\n-  } else if (!hf.is_interpreted_frame()) {\n-    recurse_thaw_compiled_frame(hf, caller, num_frames, false);\n+  if (top && heap_frame.is_safepoint_blob_frame()) {\n+    assert(ContinuationHelper::Frame::is_stub(heap_frame.cb()), \"cb: %s\", heap_frame.cb()->name());\n+    recurse_thaw_stub_frame(heap_frame, caller, num_frames);\n+  } else if (!heap_frame.is_interpreted_frame()) {\n+    recurse_thaw_compiled_frame(heap_frame, caller, num_frames, false);\n@@ -2414,1 +2422,1 @@\n-    recurse_thaw_interpreted_frame(hf, caller, num_frames);\n+    recurse_thaw_interpreted_frame(heap_frame, caller, num_frames);\n@@ -2440,1 +2448,1 @@\n-    thaw(_stream.to_frame(), caller, num_frames - 1, false);\n+    thaw_one_frame(_stream.to_frame(), caller, num_frames - 1, false);\n@@ -2526,1 +2534,1 @@\n-  frame f = new_frame<ContinuationHelper::InterpretedFrame>(hf, caller, bottom);\n+  frame f = new_stack_frame<ContinuationHelper::InterpretedFrame>(hf, caller, bottom);\n@@ -2598,1 +2606,1 @@\n-  frame f = new_frame<ContinuationHelper::CompiledFrame>(hf, caller, bottom);\n+  frame f = new_stack_frame<ContinuationHelper::CompiledFrame>(hf, caller, bottom);\n@@ -2673,1 +2681,1 @@\n-  frame f = new_frame<ContinuationHelper::StubFrame>(hf, caller, false);\n+  frame f = new_stack_frame<ContinuationHelper::StubFrame>(hf, caller, false);\n@@ -2750,1 +2758,1 @@\n-static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind) {\n+static inline intptr_t* thaw_internal(JavaThread* thread, const thaw_kind kind) {\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":62,"deletions":54,"binary":false,"changes":116,"status":"modified"}]}