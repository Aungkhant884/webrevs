{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"code\/codeBlob.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"code\/codeBlob.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"code\/codeBlob.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"code\/codeBlob.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-\n@@ -434,0 +433,1 @@\n+\n","filename":"src\/hotspot\/share\/c1\/c1_LIR.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -672,1 +672,0 @@\n-\n","filename":"src\/hotspot\/share\/c1\/c1_LIRAssembler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-#include \"runtime\/continuation.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -202,6 +202,6 @@\n-  bool caller_sensitive()       const { return get_Method()->caller_sensitive();      }\n-  bool force_inline()           const { return get_Method()->force_inline();          }\n-  bool dont_inline()            const { return get_Method()->dont_inline();           }\n-  bool intrinsic_candidate()    const { return get_Method()->intrinsic_candidate();   }\n-  bool is_static_initializer()  const { return get_Method()->is_static_initializer(); }\n-  bool changes_current_thread() const { return get_Method()->changes_current_thread();}\n+  bool caller_sensitive()       const { return get_Method()->caller_sensitive();       }\n+  bool force_inline()           const { return get_Method()->force_inline();           }\n+  bool dont_inline()            const { return get_Method()->dont_inline();            }\n+  bool intrinsic_candidate()    const { return get_Method()->intrinsic_candidate();    }\n+  bool is_static_initializer()  const { return get_Method()->is_static_initializer();  }\n+  bool changes_current_thread() const { return get_Method()->changes_current_thread(); }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"runtime\/handshake.hpp\"\n@@ -77,0 +78,1 @@\n+#include \"runtime\/threadSMR.hpp\"\n@@ -80,0 +82,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -2135,0 +2138,1 @@\n+\n@@ -2211,1 +2215,1 @@\n-      HandshakeClosure(\"GetStackTraceClosure\"), _java_thread(java_thread), _depth(0) {\n+        HandshakeClosure(\"GetStackTraceClosure\"), _java_thread(java_thread), _depth(0) {\n@@ -2787,1 +2791,3 @@\n-        if (!show_carrier && cont->is_virtual_thread()) break;\n+        if (!show_carrier && cont->is_virtual_thread()) {\n+          break;\n+        }\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-#define THREAD_INJECTED_FIELDS(macro)                            \\\n+#define THREAD_INJECTED_FIELDS(macro)                                   \\\n@@ -500,0 +500,1 @@\n+\n@@ -531,0 +532,1 @@\n+\n@@ -582,1 +584,1 @@\n-#define VTHREAD_INJECTED_FIELDS(macro)                             \\\n+#define VTHREAD_INJECTED_FIELDS(macro)                                       \\\n@@ -1129,5 +1131,5 @@\n-#define STACKCHUNK_INJECTED_FIELDS(macro)                               \\\n-  macro(jdk_internal_vm_StackChunk, cont,      continuation_signature, false)   \\\n-  macro(jdk_internal_vm_StackChunk, flags,     byte_signature, false)   \\\n-  macro(jdk_internal_vm_StackChunk, pc,        intptr_signature, false) \\\n-  macro(jdk_internal_vm_StackChunk, maxSize,   int_signature, false)    \\\n+#define STACKCHUNK_INJECTED_FIELDS(macro)                                      \\\n+  macro(jdk_internal_vm_StackChunk, cont,      continuation_signature, false)  \\\n+  macro(jdk_internal_vm_StackChunk, flags,     byte_signature, false)          \\\n+  macro(jdk_internal_vm_StackChunk, pc,        intptr_signature, false)        \\\n+  macro(jdk_internal_vm_StackChunk, maxSize,   int_signature, false)           \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -228,0 +228,1 @@\n+\n@@ -231,0 +232,1 @@\n+\n@@ -234,0 +236,1 @@\n+\n@@ -237,0 +240,1 @@\n+\n@@ -240,0 +244,1 @@\n+\n@@ -243,0 +248,1 @@\n+\n@@ -246,0 +252,1 @@\n+\n@@ -249,0 +256,1 @@\n+\n@@ -256,0 +264,1 @@\n+\n@@ -259,0 +268,1 @@\n+\n@@ -266,0 +276,1 @@\n+\n@@ -279,0 +290,1 @@\n+\n@@ -282,0 +294,1 @@\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"compiler\/oopMap.inline.hpp\"\n+#include \"compiler\/oopMap.hpp\"\n@@ -152,0 +152,1 @@\n+  virtual bool is_optimized_entry_blob() const        { return false; }\n@@ -154,1 +155,0 @@\n-  virtual bool is_optimized_entry_blob() const                  { return false; }\n@@ -224,6 +224,1 @@\n-  const ImmutableOopMap* oop_map_for_slot(int slot, address return_address) const {\n-    assert(_oop_maps != NULL, \"nope\");\n-    return _oop_maps->find_map_at_slot(slot, (intptr_t) return_address - (intptr_t) code_begin());\n-  }\n-\n-  \/\/const ImmutableOopMap* oop_map_for_slot(int slot, address return_address) const;\n+  const ImmutableOopMap* oop_map_for_slot(int slot, address return_address) const;\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_CODE_CODEBLOB_INLINE_HPP\n+#define SHARE_CODE_CODEBLOB_INLINE_HPP\n+\n+#include \"code\/codeBlob.hpp\"\n+\n+#include \"compiler\/oopMap.inline.hpp\"\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+inline const ImmutableOopMap* CodeBlob::oop_map_for_slot(int slot, address return_address) const {\n+  assert(_oop_maps != NULL, \"nope\");\n+  return _oop_maps->find_map_at_slot(slot, (intptr_t) return_address - (intptr_t) code_begin());\n+}\n+\n+#endif \/\/ SHARE_CODE_CODEBLOB_INLINE_HPP\n","filename":"src\/hotspot\/share\/code\/codeBlob.inline.hpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -676,1 +676,4 @@\n-  if (cb->is_zombie()) return cb; \/\/ might be called during GC traversal\n+  if (cb->is_zombie()) {\n+    \/\/ might be called during GC traversal\n+    return cb;\n+  }\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -63,1 +64,1 @@\n-#endif\n+#endif \/\/ SHARE_VM_COMPILER_CODECACHE_INLINE_HPP\n","filename":"src\/hotspot\/share\/code\/codeCache.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -367,8 +367,3 @@\n-  if (method() != NULL) {\n-    \/\/ handle the case of an anchor explicitly set in continuation code that doesn't have a callee\n-    JavaThread* thread = reg_map->thread();\n-    if (thread->has_last_Java_frame() && fr.sp() == thread->last_Java_sp()) {\n-      \/\/ if (!method()->is_native()) fr.print_on(tty);\n-      \/\/ assert (method()->is_native(), \"\");\n-      return;\n-    }\n+  if (method() == NULL) {\n+    return;\n+  }\n@@ -376,19 +371,25 @@\n-    if (!method()->is_native()) {\n-      address pc = fr.pc();\n-      bool has_receiver, has_appendix;\n-      Symbol* signature;\n-\n-      \/\/ The method attached by JIT-compilers should be used, if present.\n-      \/\/ Bytecode can be inaccurate in such case.\n-      Method* callee = attached_method_before_pc(pc);\n-      if (callee != NULL) {\n-        has_receiver = !(callee->access_flags().is_static());\n-        has_appendix = false;\n-        signature    = callee->signature();\n-      } else {\n-        SimpleScopeDesc ssd(this, pc);\n-        if (ssd.is_optimized_linkToNative()) return; \/\/ call was replaced\n-        Bytecode_invoke call(methodHandle(Thread::current(), ssd.method()), ssd.bci());\n-        has_receiver = call.has_receiver();\n-        has_appendix = call.has_appendix();\n-        signature    = call.signature();\n+  \/\/ handle the case of an anchor explicitly set in continuation code that doesn't have a callee\n+  JavaThread* thread = reg_map->thread();\n+  if (thread->has_last_Java_frame() && fr.sp() == thread->last_Java_sp()) {\n+    \/\/ if (!method()->is_native()) fr.print_on(tty);\n+    \/\/ assert (method()->is_native(), \"\");\n+    return;\n+  }\n+\n+  if (!method()->is_native()) {\n+    address pc = fr.pc();\n+    bool has_receiver, has_appendix;\n+    Symbol* signature;\n+\n+    \/\/ The method attached by JIT-compilers should be used, if present.\n+    \/\/ Bytecode can be inaccurate in such case.\n+    Method* callee = attached_method_before_pc(pc);\n+    if (callee != NULL) {\n+      has_receiver = !(callee->access_flags().is_static());\n+      has_appendix = false;\n+      signature    = callee->signature();\n+    } else {\n+      SimpleScopeDesc ssd(this, pc);\n+      if (ssd.is_optimized_linkToNative()) {\n+        \/\/ call was replaced\n+        return;\n@@ -397,5 +398,4 @@\n-      fr.oops_compiled_arguments_do(signature, has_receiver, has_appendix, reg_map, f);\n-    } else if (method()->is_continuation_enter_intrinsic()) {\n-      \/\/ This method only calls Continuation.enter()\n-      Symbol* signature = vmSymbols::continuationEnter_signature();\n-      fr.oops_compiled_arguments_do(signature, false, false, reg_map, f);\n+      Bytecode_invoke call(methodHandle(Thread::current(), ssd.method()), ssd.bci());\n+      has_receiver = call.has_receiver();\n+      has_appendix = call.has_appendix();\n+      signature    = call.signature();\n@@ -403,0 +403,6 @@\n+\n+    fr.oops_compiled_arguments_do(signature, has_receiver, has_appendix, reg_map, f);\n+  } else if (method()->is_continuation_enter_intrinsic()) {\n+    \/\/ This method only calls Continuation.enter()\n+    Symbol* signature = vmSymbols::continuationEnter_signature();\n+    fr.oops_compiled_arguments_do(signature, false, false, reg_map, f);\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":38,"deletions":32,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -330,1 +330,1 @@\n-  address* deopt_handler_begin_addr()        { return &_deopt_handler_begin; }\n+  address* deopt_handler_begin_addr() { return &_deopt_handler_begin; }\n@@ -342,0 +342,1 @@\n+\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,1 @@\n+\n@@ -87,0 +88,1 @@\n+\n","filename":"src\/hotspot\/share\/code\/compiledMethod.inline.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-#include \"compiler\/oopMap.hpp\"\n+#include \"compiler\/oopMap.inline.hpp\"\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,2 +231,0 @@\n- private:\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"compiler\/oopMap.hpp\"\n@@ -414,0 +413,1 @@\n+\n@@ -436,0 +436,1 @@\n+\n@@ -438,1 +439,1 @@\n-        SkipNull = true, NeedsLock = true\n+    SkipNull = true, NeedsLock = true\n@@ -768,1 +769,0 @@\n-\n","filename":"src\/hotspot\/share\/compiler\/oopMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+class ImmutableOopMap;\n@@ -176,1 +177,0 @@\n- private:\n@@ -218,2 +218,0 @@\n-class ImmutableOopMap;\n-\n@@ -246,4 +244,8 @@\n-  static void oops_do            (const frame* fr, const RegisterMap* reg_map,\n-                                  OopClosure* f, DerivedOopClosure* df);\n-  static void oops_do            (const frame* fr, const RegisterMap* reg_map,\n-                                  OopClosure* f, DerivedPointerIterationMode mode);\n+  static void oops_do            (const frame* fr,\n+                                  const RegisterMap* reg_map,\n+                                  OopClosure* f,\n+                                  DerivedOopClosure* df);\n+  static void oops_do            (const frame* fr,\n+                                  const RegisterMap* reg_map,\n+                                  OopClosure* f,\n+                                  DerivedPointerIterationMode mode);\n@@ -388,1 +390,0 @@\n-\n","filename":"src\/hotspot\/share\/compiler\/oopMap.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,3 +28,2 @@\n-#include \"gc\/shared\/collectedHeap.hpp\"\n-#include \"gc\/shared\/gc_globals.hpp\"\n-#include \"memory\/universe.hpp\"\n+#include \"compiler\/oopMap.hpp\"\n+\n@@ -32,0 +31,3 @@\n+#include \"runtime\/frame.inline.hpp\"\n+#include \"runtime\/globals.hpp\"\n+#include \"utilities\/ostream.hpp\"\n@@ -154,1 +156,1 @@\n-#endif\n+#endif \/\/ SHARE_VM_COMPILER_OOPMAP_INLINE_HPP\n","filename":"src\/hotspot\/share\/compiler\/oopMap.inline.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeBlobClosure.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/g1\/g1CardSetContainers.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/g1\/g1BarrierSet.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,3 +57,1 @@\n-    _weak_codeblobs(pss->worker_id(), &_oops_in_nmethod, should_mark, false)\n-\n-    {}\n+    _weak_codeblobs(pss->worker_id(), &_oops_in_nmethod, should_mark, false) {}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SharedClosures.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"memory\/iterator.hpp\"\n@@ -32,0 +33,1 @@\n+#include \"oops\/method.hpp\"\n@@ -88,1 +90,1 @@\n-    _disarm_value(disarm_value) { }\n+    _disarm_value(disarm_value) {}\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  BarrierSetNMethod() : _current_phase(1) { }\n+  BarrierSetNMethod() : _current_phase(1) {}\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -281,0 +281,1 @@\n+    case GCCause::_codecache_GC_threshold:\n@@ -283,1 +284,0 @@\n-    case GCCause::_codecache_GC_threshold:\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/allStatic.hpp\"\n@@ -29,1 +30,0 @@\n-#include \"memory\/allocation.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/continuationGCSupport.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -31,0 +32,1 @@\n+#include \"oops\/stackChunkOop.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/continuationGCSupport.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#include \"code\/compiledMethod.inline.hpp\"\n+#include \"code\/compiledMethod.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/gcBehaviours.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,3 +78,0 @@\n-    case _metadata_GC_threshold:\n-      return \"Metadata GC Threshold\";\n-\n@@ -84,0 +81,3 @@\n+    case _metadata_GC_threshold:\n+      return \"Metadata GC Threshold\";\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gcCause.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include \"gc\/shared\/continuationGCSupport.inline.hpp\"\n@@ -40,0 +39,1 @@\n+#include \"gc\/shared\/continuationGCSupport.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"code\/compiledMethod.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"utilities\/copy.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUtils.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1144,1 +1144,2 @@\n-\/* Virtual thread support.\n+\/*\n+ * Virtual thread support.\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -173,1 +173,4 @@\n-  if (_closure == NULL) return;\n+  if (_closure == NULL) {\n+    return;\n+  }\n+\n@@ -193,1 +196,4 @@\n-  if (_closure == NULL) return;\n+  if (_closure == NULL) {\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-#include \"runtime\/signature.hpp\"\n@@ -61,0 +60,1 @@\n+#include \"runtime\/signature.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,3 +180,3 @@\n-#define method_entry(kind)                                              \\\n-  { CodeletMark cm(_masm, \"method entry point (kind = \" #kind \")\", InterpreterCodelet::codelet_method_entry); \\\n-    Interpreter::_entry_table[Interpreter::kind] = generate_method_entry(Interpreter::kind); \\\n+#define method_entry(kind)                                                                                     \\\n+  { CodeletMark cm(_masm, \"method entry point (kind = \" #kind \")\", InterpreterCodelet::codelet_method_entry);  \\\n+    Interpreter::_entry_table[Interpreter::kind] = generate_method_entry(Interpreter::kind);                   \\\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrOopTraceId.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceId.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"jfr\/support\/jfrThreadId.hpp\"\n+\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadId.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -174,2 +174,2 @@\n-  nonstatic_field(JavaThread,                  _threadObj,                                    OopHandle)                                   \\\n-  nonstatic_field(JavaThread,                  _vthread,                                      OopHandle)                                   \\\n+  nonstatic_field(JavaThread,                  _threadObj,                                    OopHandle)                             \\\n+  nonstatic_field(JavaThread,                  _vthread,                                      OopHandle)                             \\\n@@ -195,1 +195,1 @@\n-  nonstatic_field(JavaThread,                  _held_monitor_count,                           int)                               \\\n+  nonstatic_field(JavaThread,                  _held_monitor_count,                           int)                                   \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"code\/nmethod.hpp\"\n","filename":"src\/hotspot\/share\/memory\/iterator.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+  \/\/ The InstanceClassLoaderKlass iterators also visit the CLD pointer\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -234,4 +234,4 @@\n-  static const unsigned _kind_other        = 0; \/\/ concrete InstanceKlass\n-  static const unsigned _kind_reference    = 1; \/\/ InstanceRefKlass\n-  static const unsigned _kind_class_loader = 2; \/\/ InstanceClassLoaderKlass\n-  static const unsigned _kind_mirror       = 3; \/\/ InstanceMirrorKlass\n+  static const unsigned _kind_other             = 0; \/\/ concrete InstanceKlass\n+  static const unsigned _kind_reference         = 1; \/\/ InstanceRefKlass\n+  static const unsigned _kind_class_loader      = 2; \/\/ InstanceClassLoaderKlass\n+  static const unsigned _kind_mirror            = 3; \/\/ InstanceMirrorKlass\n@@ -239,1 +239,1 @@\n-  static const unsigned _misc_kind_last  = _misc_kind_stack_chunk;\n+  static const unsigned _misc_kind_last         = _misc_kind_stack_chunk;\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,6 +26,0 @@\n-#include \"compiler\/compiler_globals.hpp\"\n-#include \"compiler\/oopMap.inline.hpp\"\n-#include \"oops\/instanceStackChunkKlass.hpp\"\n-#include \"memory\/resourceArea.hpp\"\n-#include \"oops\/oopsHierarchy.hpp\"\n-#include \"oops\/stackChunkOop.hpp\"\n@@ -35,0 +29,2 @@\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"compiler\/oopMap.inline.hpp\"\n@@ -36,1 +32,0 @@\n-#include \"jfr\/jfrEvents.hpp\"\n@@ -39,0 +34,3 @@\n+#include \"memory\/resourceArea.hpp\"\n+#include \"jfr\/jfrEvents.hpp\"\n+#include \"oops\/compressedOops.hpp\"\n@@ -40,1 +38,0 @@\n-#include \"oops\/instanceStackChunkKlass.inline.hpp\"\n@@ -42,0 +39,2 @@\n+#include \"oops\/instanceStackChunkKlass.inline.hpp\"\n+#include \"oops\/klass.hpp\"\n@@ -43,0 +42,2 @@\n+#include \"oops\/oopsHierarchy.hpp\"\n+#include \"oops\/stackChunkOop.inline.hpp\"\n@@ -44,0 +45,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -46,0 +48,1 @@\n+#include \"runtime\/orderAccess.hpp\"\n@@ -47,0 +50,1 @@\n+#include \"utilities\/copy.hpp\"\n@@ -49,0 +53,7 @@\n+#include \"utilities\/ostream.hpp\"\n+#if INCLUDE_SHENANDOAHGC\n+#include \"gc\/shenandoah\/shenandoahHeap.inline.hpp\"\n+#endif\n+#if INCLUDE_ZGC\n+#include \"gc\/z\/zAddress.inline.hpp\"\n+#endif\n@@ -59,1 +70,1 @@\n- : InstanceKlass(parser, InstanceKlass::_misc_kind_stack_chunk, ID) {\n+  : InstanceKlass(parser, InstanceKlass::_misc_kind_stack_chunk, ID) {\n@@ -99,1 +110,3 @@\n-  for (StackChunkFrameStream<frame_kind> f(chunk); !f.is_done(); f.next(SmallRegisterMap::instance)) frames++;\n+  for (StackChunkFrameStream<frame_kind> f(chunk); !f.is_done(); f.next(SmallRegisterMap::instance)) {\n+    frames++;\n+  }\n@@ -113,2 +126,0 @@\n-  RelativizeDerivedPointers() {}\n-\n@@ -184,0 +195,1 @@\n+\n@@ -192,1 +204,3 @@\n-    if (barrier == InstanceStackChunkKlass::barrier_type::STORE) HeapAccess<>::oop_store(p, value);\n+    if (barrier == InstanceStackChunkKlass::barrier_type::STORE) {\n+      HeapAccess<>::oop_store(p, value);\n+    }\n@@ -205,0 +219,2 @@\n+  int _num_oops;\n+\n@@ -214,2 +230,0 @@\n-  int _num_oops;\n-\n@@ -232,1 +246,3 @@\n-  int _num_frames, _num_oops;\n+  int _num_frames;\n+  int _num_oops;\n+\n@@ -320,1 +336,3 @@\n-  if (f.is_done()) return;\n+  if (f.is_done()) {\n+    return;\n+  }\n@@ -360,0 +378,1 @@\n+\n@@ -378,0 +397,1 @@\n+\n@@ -440,0 +460,1 @@\n+\n@@ -472,0 +493,1 @@\n+\n@@ -537,0 +559,1 @@\n+\n@@ -561,0 +584,1 @@\n+\n@@ -564,1 +588,1 @@\n-  int count() { return _count; }\n+\n@@ -579,0 +603,2 @@\n+\n+  int count() const { return _count; }\n@@ -584,1 +610,0 @@\n-public:\n@@ -586,0 +611,1 @@\n+public:\n@@ -590,1 +616,3 @@\n-    if (SafepointSynchronize::is_at_safepoint()) return;\n+    if (SafepointSynchronize::is_at_safepoint()) {\n+      return;\n+    }\n@@ -613,0 +641,1 @@\n+\n@@ -619,1 +648,5 @@\n-  int _num_oops, _num_frames, _num_interpreted_frames, _num_i2c;\n+  int _num_oops;\n+  int _num_frames;\n+  int _num_interpreted_frames;\n+  int _num_i2c;\n+\n@@ -698,1 +731,1 @@\n-    if (JavaThread::cast(Thread::current())->cont_fastpath_thread_state())\n+    if (JavaThread::cast(Thread::current())->cont_fastpath_thread_state()) {\n@@ -700,0 +733,1 @@\n+    }\n@@ -783,0 +817,1 @@\n+\n@@ -825,0 +860,1 @@\n+\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":58,"deletions":22,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -104,0 +104,1 @@\n+\n@@ -248,1 +249,1 @@\n- private:\n+private:\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-#include \"classfile\/javaClasses.hpp\"\n-#include \"code\/codeBlob.hpp\"\n+#include \"classfile\/javaClasses.inline.hpp\"\n+#include \"code\/codeBlob.inline.hpp\"\n@@ -46,1 +46,0 @@\n-#include \"utilities\/bitMap.hpp\"\n@@ -51,1 +50,0 @@\n-\n@@ -158,2 +156,6 @@\n-  if (is_interpreted()) return interpreter_frame_stack_argsize();\n-  if (is_stub()) return 0;\n+  if (is_interpreted()) {\n+    return interpreter_frame_stack_argsize();\n+  }\n+  if (is_stub()) {\n+    return 0;\n+  }\n@@ -182,2 +184,3 @@\n-    if (is_interpreted()) next_for_interpreter_frame();\n-    else {\n+    if (is_interpreted()) {\n+      next_for_interpreter_frame();\n+    } else {\n@@ -198,1 +201,4 @@\n-  if (safepoint && cb() != nullptr) _oopmap = cb()->oop_map_for_return_address(pc()); \/\/ there's no post-call nop and no fast oopmap lookup\n+  if (safepoint && cb() != nullptr) {\n+    \/\/ there's no post-call nop and no fast oopmap lookup\n+    _oopmap = cb()->oop_map_for_return_address(pc());\n+  }\n@@ -225,1 +231,3 @@\n-  if (is_interpreted()) return;\n+  if (is_interpreted()) {\n+    return;\n+  }\n@@ -281,1 +289,3 @@\n-  if (is_interpreted() || is_stub()) return pc1;\n+  if (is_interpreted() || is_stub()) {\n+    return pc1;\n+  }\n@@ -305,2 +315,6 @@\n-  if (_oopmap != nullptr) return;\n-  if (is_interpreted()) return;\n+  if (_oopmap != nullptr) {\n+    return;\n+  }\n+  if (is_interpreted()) {\n+    return;\n+  }\n@@ -330,1 +344,1 @@\n-      if (omv.type() != OopMapValue::oop_value && omv.type() != OopMapValue::narrowoop_value)\n+      if (omv.type() != OopMapValue::oop_value && omv.type() != OopMapValue::narrowoop_value) {\n@@ -332,0 +346,1 @@\n+      }\n@@ -341,2 +356,2 @@\n-        omv.type() == OopMapValue::narrowoop_value, omv.reg()->name(), p2i(p), (intptr_t*)p - sp());\n-        omv.type() == OopMapValue::narrowoop_value ? Devirtualizer::do_oop(closure, (narrowOop*)p) : Devirtualizer::do_oop(closure, (oop*)p);\n+          omv.type() == OopMapValue::narrowoop_value, omv.reg()->name(), p2i(p), (intptr_t*)p - sp());\n+          omv.type() == OopMapValue::narrowoop_value ? Devirtualizer::do_oop(closure, (narrowOop*)p) : Devirtualizer::do_oop(closure, (oop*)p);\n@@ -351,1 +366,3 @@\n-  if (is_interpreted()) return;\n+  if (is_interpreted()) {\n+    return;\n+  }\n@@ -355,1 +372,1 @@\n-    if (omv.type() != OopMapValue::derived_oop_value)\n+    if (omv.type() != OopMapValue::derived_oop_value) {\n@@ -357,0 +374,1 @@\n+    }\n@@ -379,1 +397,1 @@\n-    if (oms.current().type() != OopMapValue::oop_value)\n+    if (oms.current().type() != OopMapValue::oop_value) {\n@@ -381,1 +399,2 @@\n-    if (reg_to_loc(oms.current().reg(), map) == p)\n+    }\n+    if (reg_to_loc(oms.current().reg(), map) == p) {\n@@ -383,0 +402,1 @@\n+    }\n@@ -403,1 +423,3 @@\n-  if (!UseChunkBitmaps) return 0;\n+  if (!UseChunkBitmaps) {\n+    return 0;\n+  }\n@@ -420,1 +442,4 @@\n-  if (frame_kind == chunk_frames::MIXED) f.handle_deopted(); \/\/ we could freeze deopted frames in slow mode.\n+  if (frame_kind == chunk_frames::MIXED) {\n+    \/\/ we could freeze deopted frames in slow mode.\n+    f.handle_deopted();\n+  }\n@@ -487,2 +512,6 @@\n-    if ((intptr_t*)mr.start() > start) start = (intptr_t*)mr.start();\n-    if ((intptr_t*)mr.end()   < end)   end   = (intptr_t*)mr.end();\n+    if ((intptr_t*)mr.start() > start) {\n+      start = (intptr_t*)mr.start();\n+    }\n+    if ((intptr_t*)mr.end() < end) {\n+      end = (intptr_t*)mr.end();\n+    }\n@@ -508,0 +537,1 @@\n+\n@@ -510,0 +540,1 @@\n+\n@@ -558,1 +589,4 @@\n-    if (frame_kind == chunk_frames::MIXED) f.handle_deopted(); \/\/ in slow mode we might freeze deoptimized frames\n+    if (frame_kind == chunk_frames::MIXED) {\n+      \/\/ in slow mode we might freeze deoptimized frames\n+      f.handle_deopted();\n+    }\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.inline.hpp","additions":59,"deletions":25,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"utilities\/copy.hpp\"\n","filename":"src\/hotspot\/share\/oops\/klass.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -576,3 +576,0 @@\n-  \/\/ the size of the object in memory after possible compression during GC promotion\/compaction\n-  virtual size_t compact_oop_size(oop obj) const { return oop_size(obj); }\n-\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,5 +48,0 @@\n-public:\n-  template <class T> T* obj_at_address(int index) const {\n-    return obj_at_addr<T>(index);\n-  }\n-\n@@ -97,2 +92,0 @@\n-  template <DecoratorSet ds>\n-  void obj_at_put_access(int index, oop value);\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,6 +54,0 @@\n-template <DecoratorSet ds>\n-inline void objArrayOopDesc::obj_at_put_access(int index, oop value) {\n-  ptrdiff_t offset = UseCompressedOops ? obj_at_offset<narrowOop>(index) : obj_at_offset<oop>(index);\n-  HeapAccess<IS_ARRAY | ds>::oop_store_at(as_oop(), offset, value);\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/objArrayOop.inline.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -202,5 +202,5 @@\n-bool oopDesc::is_instance()  const { return klass()->is_instance_klass();  }\n-bool oopDesc::is_array()     const { return klass()->is_array_klass();     }\n-bool oopDesc::is_objArray()  const { return klass()->is_objArray_klass();  }\n-bool oopDesc::is_typeArray() const { return klass()->is_typeArray_klass(); }\n-bool oopDesc::is_stackChunk()const { return klass()->is_instance_klass() && InstanceKlass::cast(klass())->is_stack_chunk_instance_klass(); }\n+bool oopDesc::is_instance()   const { return klass()->is_instance_klass();  }\n+bool oopDesc::is_array()      const { return klass()->is_array_klass();     }\n+bool oopDesc::is_objArray()   const { return klass()->is_objArray_klass();  }\n+bool oopDesc::is_typeArray()  const { return klass()->is_typeArray_klass(); }\n+bool oopDesc::is_stackChunk() const { return klass()->is_instance_klass() && InstanceKlass::cast(klass())->is_stack_chunk_instance_klass(); }\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-typedef class   stackChunkOopDesc*          stackChunkOop;\n+typedef class     stackChunkOopDesc*          stackChunkOop;\n@@ -147,0 +147,1 @@\n+DEF_OOP(stackChunk);\n@@ -150,1 +151,0 @@\n-DEF_OOP(stackChunk);\n","filename":"src\/hotspot\/share\/oops\/oopsHierarchy.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-  for (ScopeDesc* scope = cm->scope_desc_at(pc); scope != nullptr; scope = scope->sender())\n+  for (ScopeDesc* scope = cm->scope_desc_at(pc); scope != nullptr; scope = scope->sender()) {\n@@ -110,0 +110,1 @@\n+  }\n@@ -123,1 +124,3 @@\n-    if (!f.is_stub()) n += ::num_java_frames(f);\n+    if (!f.is_stub()) {\n+      n += ::num_java_frames(f);\n+    }\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -115,3 +115,0 @@\n-  static size_t object_size(TypeArrayKlass* kls, int length) {\n-    return object_size(kls->layout_helper(), length);\n-  }\n","filename":"src\/hotspot\/share\/oops\/typeArrayOop.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-    if (omv.type() == OopMapValue::oop_value || omv.type() == OopMapValue::narrowoop_value)\n+    if (omv.type() == OopMapValue::oop_value || omv.type() == OopMapValue::narrowoop_value) {\n@@ -398,0 +398,1 @@\n+    }\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -865,1 +865,1 @@\n-      if (offset == offsets[i])\n+      if (offset == offsets[i]) {\n@@ -867,0 +867,1 @@\n+      }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"prims\/jvmtiThreadState.inline.hpp\"\n@@ -33,1 +32,1 @@\n-#include \"runtime\/handles.hpp\"\n+#include \"prims\/jvmtiThreadState.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"prims\/jvmtiThreadState.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"prims\/jvmtiThreadState.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiExtensions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-#include \"runtime\/vframe.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"prims\/jvmtiEnvBase.hpp\"\n@@ -38,1 +39,0 @@\n-#include \"prims\/jvmtiEnvBase.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#include \"prims\/jvmtiThreadState.hpp\"\n+\n@@ -30,2 +32,0 @@\n-\n-#include \"prims\/jvmtiThreadState.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiThreadState.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,5 +26,0 @@\n-#include \"classfile\/javaClasses.hpp\"\n-#include \"gc\/shared\/gc_globals.hpp\"\n-#include \"oops\/instanceStackChunkKlass.hpp\"\n-#include \"oops\/oopsHierarchy.hpp\"\n-#include \"oops\/stackChunkOop.hpp\"\n@@ -37,1 +32,0 @@\n-#include \"compiler\/oopMap.hpp\"\n@@ -39,1 +33,1 @@\n-#include \"jfr\/jfrEvents.hpp\"\n+#include \"gc\/shared\/gc_globals.hpp\"\n@@ -47,0 +41,1 @@\n+#include \"jfr\/jfrEvents.hpp\"\n@@ -52,0 +47,1 @@\n+#include \"oops\/oopsHierarchy.hpp\"\n@@ -53,1 +49,1 @@\n-#include \"oops\/weakHandle.hpp\"\n+#include \"oops\/stackChunkOop.hpp\"\n@@ -59,1 +55,0 @@\n-#include \"runtime\/frame.hpp\"\n@@ -70,1 +65,0 @@\n-#include \"runtime\/stackWatermarkSet.inline.hpp\"\n@@ -72,0 +66,1 @@\n+#include \"runtime\/stackWatermarkSet.inline.hpp\"\n@@ -341,1 +336,1 @@\n-  for (StackFrameStream fst(thread, true, true); fst.current()->sp() <= sp; fst.next())\n+  for (StackFrameStream fst(thread, true, true); fst.current()->sp() <= sp; fst.next()) {\n@@ -343,0 +338,1 @@\n+  }\n@@ -362,1 +358,0 @@\n-private:\n@@ -412,1 +407,1 @@\n- : _thread(thread), _entry(thread->last_continuation()), _cont(cont)\n+  : _thread(thread), _entry(thread->last_continuation()), _cont(cont)\n@@ -424,1 +419,1 @@\n- : _thread(nullptr), _entry(nullptr), _cont(cont)\n+  : _thread(nullptr), _entry(nullptr), _cont(cont)\n@@ -434,3 +429,3 @@\n- : _thread(map->thread()),\n-   _entry(Continuation::get_continuation_entry_for_continuation(_thread, map->stack_chunk()->cont())),\n-   _cont(map->stack_chunk()->cont())\n+  : _thread(map->thread()),\n+    _entry(Continuation::get_continuation_entry_for_continuation(_thread, map->stack_chunk()->cont())),\n+    _cont(map->stack_chunk()->cont())\n@@ -470,1 +465,3 @@\n-  while (chunk != nullptr && chunk->is_empty()) chunk = chunk->parent();\n+  while (chunk != nullptr && chunk->is_empty()) {\n+    chunk = chunk->parent();\n+  }\n@@ -504,1 +501,1 @@\n-  if (_tail == (oop)nullptr)\n+  if (_tail == (oop)nullptr) {\n@@ -506,0 +503,1 @@\n+  }\n@@ -658,1 +656,1 @@\n-    if (cont_scope == jdk_internal_vm_Continuation::scope(entry->continuation()))\n+    if (cont_scope == jdk_internal_vm_Continuation::scope(entry->continuation())) {\n@@ -660,0 +658,1 @@\n+    }\n@@ -665,1 +664,3 @@\n-  if (thread == nullptr || cont == (oop)nullptr) return nullptr;\n+  if (thread == nullptr || cont == (oop)nullptr) {\n+    return nullptr;\n+  }\n@@ -679,1 +680,4 @@\n-  if (cont == nullptr) return false;\n+  if (cont == nullptr) {\n+    return false;\n+  }\n+\n@@ -708,1 +712,3 @@\n-  if (f.cb() == nullptr || !f.cb()->is_compiled()) return false;\n+  if (f.cb() == nullptr || !f.cb()->is_compiled()) {\n+    return false;\n+  }\n@@ -816,1 +822,1 @@\n-  if (cont_scope == nullptr || !is_continuation_entry_frame(f, map))\n+  if (cont_scope == nullptr || !is_continuation_entry_frame(f, map)) {\n@@ -818,0 +824,1 @@\n+  }\n@@ -820,1 +827,1 @@\n-  if (cont == nullptr)\n+  if (cont == nullptr) {\n@@ -822,0 +829,1 @@\n+  }\n@@ -836,1 +844,1 @@\n-  if (ce == nullptr)\n+  if (ce == nullptr) {\n@@ -838,0 +846,1 @@\n+  }\n@@ -853,1 +862,1 @@\n-  if (ce == nullptr)\n+  if (ce == nullptr) {\n@@ -855,0 +864,1 @@\n+  }\n@@ -906,1 +916,3 @@\n-  if (cont == nullptr) return;\n+  if (cont == nullptr) {\n+    return;\n+  }\n@@ -921,2 +933,3 @@\n-  if (sp > prev->parent_cont_fastpath())\n-      prev->set_parent_cont_fastpath(sp);\n+  if (sp > prev->parent_cont_fastpath()) {\n+    prev->set_parent_cont_fastpath(sp);\n+  }\n@@ -931,1 +944,1 @@\n-      if (bottom != nullptr)\n+      if (bottom != nullptr) {\n@@ -933,0 +946,1 @@\n+      }\n@@ -969,1 +983,3 @@\n-    if (!chunk->is_empty()) nonempty_chunk = true;\n+    if (!chunk->is_empty()) {\n+      nonempty_chunk = true;\n+    }\n@@ -1028,1 +1044,1 @@\n-    _thread(thread), _cont(mirror), _barriers(false), _preempt(preempt) {\n+      _thread(thread), _cont(mirror), _barriers(false), _preempt(preempt) {\n@@ -1359,1 +1375,3 @@\n-    if (stack_overflow()) return freeze_exception;\n+    if (stack_overflow()) {\n+      return freeze_exception;\n+    }\n@@ -1362,2 +1380,7 @@\n-      if (UNLIKELY(f.oop_map() == nullptr)) return freeze_pinned_native; \/\/ special native frame\n-      if (UNLIKELY(Compiled::is_owning_locks(_cont.thread(), SmallRegisterMap::instance, f))) return freeze_pinned_monitor;\n+      if (UNLIKELY(f.oop_map() == nullptr)) {\n+        \/\/ special native frame\n+        return freeze_pinned_native;\n+      }\n+      if (UNLIKELY(Compiled::is_owning_locks(_cont.thread(), SmallRegisterMap::instance, f))) {\n+        return freeze_pinned_monitor;\n+      }\n@@ -1368,2 +1391,7 @@\n-      if (Interpreted::is_owning_locks(f)) return freeze_pinned_monitor;\n-      if (_preempt && top && f.interpreter_frame_method()->is_native()) return freeze_pinned_native; \/\/ int native entry\n+      if (Interpreted::is_owning_locks(f)) {\n+        return freeze_pinned_monitor;\n+      }\n+      if (_preempt && top && f.interpreter_frame_method()->is_native()) {\n+        \/\/ int native entry\n+        return freeze_pinned_native;\n+      }\n@@ -1498,1 +1526,3 @@\n-      if (_barriers) { log_develop_trace(jvmcont)(\"allocation requires barriers\"); }\n+      if (_barriers) {\n+        log_develop_trace(jvmcont)(\"allocation requires barriers\");\n+      }\n@@ -1621,1 +1651,4 @@\n-    if (UNLIKELY(result > freeze_ok_bottom)) return result;\n+    if (UNLIKELY(result > freeze_ok_bottom)) {\n+      return result;\n+    }\n+\n@@ -1662,1 +1695,4 @@\n-    if (UNLIKELY(result > freeze_ok_bottom)) return result;\n+    if (UNLIKELY(result > freeze_ok_bottom)) {\n+      return result;\n+    }\n+\n@@ -1706,2 +1742,7 @@\n-    if (UNLIKELY(senderf.oop_map() == nullptr)) return freeze_pinned_native; \/\/ native frame\n-    if (UNLIKELY(Compiled::is_owning_locks(_cont.thread(), &map, senderf))) return freeze_pinned_monitor;\n+    if (UNLIKELY(senderf.oop_map() == nullptr)) {\n+      \/\/ native frame\n+      return freeze_pinned_native;\n+    }\n+    if (UNLIKELY(Compiled::is_owning_locks(_cont.thread(), &map, senderf))) {\n+      return freeze_pinned_monitor;\n+    }\n@@ -1885,1 +1926,3 @@\n-    if (is_pinned(f, &map) == freeze_pinned_monitor) return true;\n+    if (is_pinned(f, &map) == freeze_pinned_monitor) {\n+      return true;\n+    }\n@@ -2025,1 +2068,1 @@\n-  if (jdk_internal_vm_Continuation::critical_section(cont->continuation()) > 0)\n+  if (jdk_internal_vm_Continuation::critical_section(cont->continuation()) > 0) {\n@@ -2027,0 +2070,1 @@\n+  }\n@@ -2049,1 +2093,1 @@\n-    if (res != freeze_ok)\n+    if (res != freeze_ok) {\n@@ -2051,0 +2095,1 @@\n+    }\n@@ -2055,1 +2100,1 @@\n-      if (scope == cont_scope)\n+      if (scope == cont_scope) {\n@@ -2057,0 +2102,1 @@\n+      }\n@@ -2058,1 +2104,1 @@\n-      if (cont == nullptr)\n+      if (cont == nullptr) {\n@@ -2060,1 +2106,2 @@\n-      if (jdk_internal_vm_Continuation::critical_section(cont->continuation()) > 0)\n+      }\n+      if (jdk_internal_vm_Continuation::critical_section(cont->continuation()) > 0) {\n@@ -2062,0 +2109,1 @@\n+      }\n@@ -2075,2 +2123,5 @@\n-    if (++i > 5) break; \/\/ annotations are never deep\n-    if (st.method()->jvmti_mount_transition())\n+    if (++i > 5) {\n+      \/\/ annotations are never deep\n+      break;\n+    }\n+    if (st.method()->jvmti_mount_transition()) {\n@@ -2078,0 +2129,1 @@\n+    }\n@@ -2129,2 +2181,6 @@\n-  if (!is_safe_pc_to_preempt(thread->last_Java_pc())) return false;\n-  if (!is_safe_frame_to_preempt(thread)) return false;\n+  if (!is_safe_pc_to_preempt(thread->last_Java_pc())) {\n+    return false;\n+  }\n+  if (!is_safe_frame_to_preempt(thread)) {\n+    return false;\n+  }\n@@ -2209,4 +2265,4 @@\n-    _thread(thread), _cont(cont),\n-    _fastpath(nullptr) {\n-      DEBUG_ONLY(_top_unextended_sp = nullptr;)\n-      DEBUG_ONLY(_mode = 0;)\n+      _thread(thread), _cont(cont),\n+      _fastpath(nullptr) {\n+    DEBUG_ONLY(_top_unextended_sp = nullptr;)\n+    DEBUG_ONLY(_mode = 0;)\n@@ -2811,1 +2867,3 @@\n-  if (kind != thaw_top) { log_develop_trace(jvmcont)(\"== RETURN BARRIER\"); }\n+  if (kind != thaw_top) {\n+    log_develop_trace(jvmcont)(\"== RETURN BARRIER\");\n+  }\n@@ -2850,1 +2908,3 @@\n-  if (lt.develop_is_enabled()) print_frames(thread, &ls);\n+  if (lt.develop_is_enabled()) {\n+    print_frames(thread, &ls);\n+  }\n@@ -2880,1 +2940,1 @@\n-      if (!cm->method()->is_continuation_enter_intrinsic())\n+      if (!cm->method()->is_continuation_enter_intrinsic()) {\n@@ -2882,0 +2942,1 @@\n+      }\n@@ -2900,1 +2961,3 @@\n-    if (o == (oop)nullptr || is_good_oop(o)) return;\n+    if (o == (oop)nullptr || is_good_oop(o)) {\n+      return;\n+    }\n@@ -2906,1 +2969,3 @@\n-    if (o == (oop)nullptr || is_good_oop(o)) return;\n+    if (o == (oop)nullptr || is_good_oop(o)) {\n+      return;\n+    }\n@@ -2939,1 +3004,3 @@\n-      if (reg != nullptr) st->print_cr(\"Reg %s %d\", reg->name(), reg->is_stack() ? (int)reg->reg2stack() : -99);\n+      if (reg != nullptr) {\n+        st->print_cr(\"Reg %s %d\", reg->name(), reg->is_stack() ? (int)reg->reg2stack() : -99);\n+      }\n@@ -3041,1 +3108,3 @@\n-    for (frame f = thread->last_frame(); !f.is_entry_frame(); f = f.sender(&map)) f.print_on(st);\n+    for (frame f = thread->last_frame(); !f.is_entry_frame(); f = f.sender(&map)) {\n+      f.print_on(st);\n+    }\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":133,"deletions":64,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+#include \"utilities\/growableArray.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1023,1 +1023,1 @@\n-      if (_reg_map->should_skip_missing())\n+      if (_reg_map->should_skip_missing()) {\n@@ -1025,0 +1025,1 @@\n+      }\n@@ -1258,0 +1259,1 @@\n+\n@@ -1271,0 +1273,12 @@\n+\n+  virtual void do_oop(oop* p) override { _oops->push(p); }\n+  virtual void do_oop(narrowOop* p) override { _narrow_oops->push(p); }\n+  virtual void do_derived_oop(oop* base_loc, derived_pointer* derived_loc) override {\n+    \/\/ oop base = *base_loc;\n+    \/\/ intptr_t offset = *(intptr_t*)derived_loc - cast_from_oop<intptr_t>(base);\n+    \/\/ assert (offset >= 0 && offset <= (intptr_t)(base->size() << LogHeapWordSize), \"offset: %ld base->size: %zu relative: %d\", offset, base->size() << LogHeapWordSize, *(intptr_t*)derived_loc <= 0);\n+\n+    _base->push(base_loc);\n+    _derived->push(derived_loc);\n+  }\n+\n@@ -1291,10 +1305,0 @@\n-  virtual void do_oop(oop* p) override { _oops->push(p); }\n-  virtual void do_oop(narrowOop* p) override { _narrow_oops->push(p); }\n-  virtual void do_derived_oop(oop* base_loc, derived_pointer* derived_loc) override {\n-    \/\/ oop base = *base_loc;\n-    \/\/ intptr_t offset = *(intptr_t*)derived_loc - cast_from_oop<intptr_t>(base);\n-    \/\/ assert (offset >= 0 && offset <= (intptr_t)(base->size() << LogHeapWordSize), \"offset: %ld base->size: %zu relative: %d\", offset, base->size() << LogHeapWordSize, *(intptr_t*)derived_loc <= 0);\n-\n-    _base->push(base_loc);\n-    _derived->push(derived_loc);\n-  }\n@@ -1309,0 +1313,1 @@\n+\n@@ -1325,1 +1330,1 @@\n-      if (type_name != NULL)\n+      if (type_name != NULL) {\n@@ -1327,0 +1332,1 @@\n+      }\n@@ -1429,1 +1435,3 @@\n-        if (!m->is_static()) sig_bt[sig_index++] = T_OBJECT; \/\/ 'this'\n+        if (!m->is_static()) {\n+          sig_bt[sig_index++] = T_OBJECT; \/\/ 'this'\n+        }\n@@ -1434,1 +1442,3 @@\n-          if (type2size[t] == 2) sig_bt[sig_index++] = T_VOID;\n+          if (type2size[t] == 2) {\n+            sig_bt[sig_index++] = T_VOID;\n+          }\n@@ -1452,1 +1462,1 @@\n-          if (at_this)\n+          if (at_this) {\n@@ -1454,1 +1464,1 @@\n-          else\n+          } else {\n@@ -1456,0 +1466,1 @@\n+          }\n@@ -1459,1 +1470,3 @@\n-        if (!at_this) ss.next();\n+        if (!at_this) {\n+          ss.next();\n+        }\n@@ -1475,1 +1488,1 @@\n-            if (stack_address != NULL)\n+            if (stack_address != NULL) {\n@@ -1477,0 +1490,1 @@\n+            }\n@@ -1484,1 +1498,1 @@\n-            if (stack_address != NULL)\n+            if (stack_address != NULL) {\n@@ -1486,0 +1500,1 @@\n+            }\n@@ -1530,0 +1545,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":35,"deletions":19,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-class vframeArray;\n+class InterpreterOopMap;\n@@ -53,1 +53,1 @@\n-class InterpreterOopMap;\n+class vframeArray;\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"code\/codeBlob.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/frame.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+\/\/ No frame_helpers.hpp\n+\n@@ -31,1 +33,0 @@\n-#include \"runtime\/frame.hpp\"\n@@ -71,2 +72,0 @@\n-public:\n-\n@@ -220,1 +219,1 @@\n-  if (f.interpreter_frame_monitor_end() == f.interpreter_frame_monitor_begin())\n+  if (f.interpreter_frame_monitor_end() == f.interpreter_frame_monitor_begin()) {\n@@ -222,0 +221,1 @@\n+  }\n@@ -282,1 +282,3 @@\n-  if (!cm->has_monitors()) return false;\n+  if (!cm->has_monitors()) {\n+    return false;\n+  }\n@@ -288,1 +290,1 @@\n-    if (mons == nullptr || mons->is_empty())\n+    if (mons == nullptr || mons->is_empty()) {\n@@ -290,0 +292,1 @@\n+    }\n@@ -293,1 +296,1 @@\n-      if (mon->eliminated())\n+      if (mon->eliminated()) {\n@@ -295,0 +298,1 @@\n+      }\n","filename":"src\/hotspot\/share\/runtime\/frame_helpers.inline.hpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  intptr_t*    _location[reg_count];    \/\/ Location of registers (intptr_t* looks better than address in the debugger)\n+  intptr_t*         _location[reg_count];     \/\/ Location of registers (intptr_t* looks better than address in the debugger)\n@@ -76,3 +76,3 @@\n-  bool        _include_argument_oops;   \/\/ Should include argument_oop marked locations for compiler\n-  JavaThread* _thread;                  \/\/ Reference to current thread\n-  stackChunkHandle _chunk;              \/\/ The current continuation stack chunk, if any\n+  bool              _include_argument_oops;   \/\/ Should include argument_oop marked locations for compiler\n+  JavaThread*       _thread;                  \/\/ Reference to current thread\n+  stackChunkHandle  _chunk;                   \/\/ The current continuation stack chunk, if any\n@@ -80,4 +80,4 @@\n-  bool        _update_map;              \/\/ Tells if the register map need to be\n-                                        \/\/ updated when traversing the stack\n-  bool        _process_frames;          \/\/ Should frames be processed by stack watermark barriers?\n-  bool        _walk_cont;               \/\/ whether to walk frames on a continuation stack\n+  bool              _update_map;              \/\/ Tells if the register map need to be\n+                                              \/\/ updated when traversing the stack\n+  bool              _process_frames;          \/\/ Should frames be processed by stack watermark barriers?\n+  bool              _walk_cont;               \/\/ whether to walk frames on a continuation stack\n","filename":"src\/hotspot\/share\/runtime\/registerMap.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-#include \"runtime\/continuation.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3342,1 +3342,1 @@\n-    if (!fr.is_java_frame())\n+    if (!fr.is_java_frame()) {\n@@ -3344,0 +3344,1 @@\n+    }\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -427,1 +427,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"asm\/assembler.hpp\"\n@@ -40,0 +41,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n@@ -123,1 +125,3 @@\n-  if (!is_static) sig_bt[sig_index++] = T_OBJECT; \/\/ 'this'\n+  if (!is_static) {\n+    sig_bt[sig_index++] = T_OBJECT; \/\/ 'this'\n+  }\n@@ -128,1 +132,3 @@\n-    if (type2size[t] == 2) sig_bt[sig_index++] = T_VOID;\n+    if (type2size[t] == 2) {\n+      sig_bt[sig_index++] = T_VOID;\n+    }\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"oops\/access.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"oops\/access.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackValue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -344,1 +344,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-#include \"runtime\/vframe.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1098,0 +1098,1 @@\n+\n@@ -1104,0 +1105,1 @@\n+\n@@ -1584,1 +1586,1 @@\n-  if (stack_base > adr && adr >= stack_end)\n+  if (stack_base > adr && adr >= stack_end) {\n@@ -1586,0 +1588,1 @@\n+  }\n@@ -2223,0 +2226,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -204,1 +204,1 @@\n-    if (cont != nullptr && (address)cont->entry_sp() > adr)\n+    if (cont != nullptr && (address)cont->entry_sp() > adr) {\n@@ -206,1 +206,2 @@\n-    if (_stack_base > adr)\n+    }\n+    if (_stack_base > adr) {\n@@ -208,0 +209,1 @@\n+    }\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"memory\/allStatic.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/threadIdentifiers.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"oops\/stackChunkOop.hpp\"\n@@ -41,0 +40,1 @@\n+#include \"oops\/stackChunkOop.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"runtime\/handles.inline.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"runtime\/handles.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/vframe.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-* Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+* Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/services\/threadIdTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -673,1 +673,2 @@\n-      if (maxDepth >= 0 && count == maxDepth) \/\/ Skip frames if more than maxDepth\n+      if (maxDepth >= 0 && count == maxDepth) {\n+        \/\/ Skip frames if more than maxDepth\n@@ -675,1 +676,2 @@\n-      if (!full && f->is_vthread_entry())\n+      }\n+      if (!full && f->is_vthread_entry()) {\n@@ -677,0 +679,1 @@\n+      }\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -348,1 +348,3 @@\n-  if (t != NULL) st->print_cr(\"Thread \" INTPTR_FORMAT \" [%ld]\", p2i(t), (long) t->osthread()->thread_id());\n+  if (t != NULL) {\n+    st->print_cr(\"Thread \" INTPTR_FORMAT \" [%ld]\", p2i(t), (long) t->osthread()->thread_id());\n+  }\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}