{"files":[{"patch":"@@ -111,0 +111,18 @@\n+    static final boolean PRESERVE_SCOPE_LOCAL_CACHE\n+            = ! \"false\".equalsIgnoreCase(System.getProperty(\"java.lang.ScopeLocal.PRESERVE_SCOPE_LOCAL_CACHE\"));\n+\n+    \/**\n+     * The interface for a ScopeLocal try-with-resources binding.\n+     *\/\n+    @PreviewFeature(feature = SCOPE_LOCALS)\n+    public sealed interface Binder extends AutoCloseable permits BinderImpl {\n+\n+        \/**\n+         * Closes this {@link ScopeLocal} binding. If this binding was not the most recent binding\n+         * created by {@code Carrier.bind()}, throws a {@link StructureViolationException}.\n+         * This method is invoked automatically on objects managed by the try-with-resources statement.\n+         *\n+         * @throws StructureViolationException if the bindings were not closed in the correct order.\n+         *\/\n+        public void close();\n+    }\n@@ -152,1 +170,3 @@\n-     static final class EmptySnapshot extends Snapshot {\n+\n+\n+    static final class EmptySnapshot extends Snapshot {\n@@ -352,1 +372,1 @@\n-         * @return a {@link ScopeLocalBinder}.\n+         * @return a {@link ScopeLocal.Binder}.\n@@ -354,1 +374,1 @@\n-        public ScopeLocalBinder bind() {\n+        public ScopeLocal.Binder bind() {\n@@ -356,1 +376,1 @@\n-            return (ScopeLocalBinder)new Binder(this).push();\n+            return (Binder)new BinderImpl(this).push();\n@@ -363,2 +383,2 @@\n-    static final class Binder\n-            extends ScopeLocalContainer implements ScopeLocalBinder {\n+    static final class BinderImpl\n+            extends ScopeLocalContainer implements ScopeLocal.Binder {\n@@ -367,1 +387,1 @@\n-        final Binder prevBinder;\n+        final BinderImpl prevBinder;\n@@ -370,1 +390,1 @@\n-        Binder(Carrier bindings) {\n+        BinderImpl(Carrier bindings) {\n@@ -377,1 +397,1 @@\n-        static Binder innermostBinder() {\n+        static BinderImpl innermostBinder() {\n@@ -379,1 +399,1 @@\n-            if (container instanceof Binder binder) {\n+            if (container instanceof BinderImpl binder) {\n@@ -397,1 +417,1 @@\n-                Cache.invalidate(bindings.primaryBits|bindings.secondaryBits);\n+                Cache.invalidate(bindings.primaryBits | bindings.secondaryBits);\n@@ -415,1 +435,0 @@\n-\n@@ -419,1 +438,1 @@\n-            for (Binder b = innermostBinder(); b != null; b = b.prevBinder) {\n+            for (BinderImpl b = innermostBinder(); b != null; b = b.prevBinder) {\n@@ -450,0 +469,13 @@\n+\n+    \/**\n+     * Create a try-with-resources ScopeLocal binding to be used within\n+     * a try-with-resources block.\n+     * <p>If this {@link ScopeLocal} is already bound in an outer context,\n+     * throw a {@link RuntimeException}.<\/p>\n+     * @param t The value to bind this to\n+     * @return a {@link ScopeLocal.Binder}.\n+     *\/\n+    public ScopeLocal.Binder bind(T t) {\n+        return where(this, t).bind();\n+    }\n+\n@@ -544,1 +576,1 @@\n-        return Binder.find(this);\n+        return BinderImpl.find(this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopeLocal.java","additions":46,"deletions":14,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package java.lang;\n-\n-import jdk.internal.javac.PreviewFeature;\n-import static jdk.internal.javac.PreviewFeature.Feature.SCOPE_LOCALS;\n-\n-\/**\n- * The interface for a ScopeLocal try-with-resources binding.\n- *\/\n-@PreviewFeature(feature=SCOPE_LOCALS)\n-public sealed interface ScopeLocalBinder extends AutoCloseable permits ScopeLocal.Binder {\n-\n-    \/**\n-     * Closes this {@link ScopeLocal} binding. If this binding was not the most recent binding\n-     * created by {@code Carrier.bind()}, throws a {@link StructureViolationException}.\n-     * This method is invoked automatically on objects managed by the try-with-resources statement.\n-     * @throws StructureViolationException if the bindings were not closed in the correct order.\n-     *\/\n-    public void close();\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopeLocalBinder.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -2550,1 +2550,5 @@\n-                return Thread.scopeLocalCache();\n+                if (! ScopeLocal.PRESERVE_SCOPE_LOCAL_CACHE) {\n+                    return Thread.scopeLocalCache();\n+                } else {\n+                    return null;\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2540,1 +2540,1 @@\n-                        if (! \"java.lang.ScopeLocalBinder\".equals(resVarType)) {\n+                        if (! \"java.lang.ScopeLocal.Binder\".equals(resVarType)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}