{"files":[{"patch":"@@ -81,0 +81,1 @@\n+  int parent_held_monitor_count() const { return _parent_held_monitor_count; }\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -755,4 +755,0 @@\n-    if (UNLIKELY(ContinuationHelper::CompiledFrame::is_owning_locks(_cont.thread(), SmallRegisterMap::instance, f))) {\n-      return freeze_pinned_monitor;\n-    }\n-\n@@ -762,3 +758,0 @@\n-    if (ContinuationHelper::InterpretedFrame::is_owning_locks(f)) {\n-      return freeze_pinned_monitor;\n-    }\n@@ -1112,3 +1105,0 @@\n-  if (UNLIKELY(ContinuationHelper::CompiledFrame::is_owning_locks(_cont.thread(), &map, senderf))) {\n-    return freeze_pinned_monitor;\n-  }\n@@ -1282,18 +1272,0 @@\n-static freeze_result is_pinned(const frame& f, RegisterMap* map) {\n-  if (f.is_interpreted_frame()) {\n-    if (ContinuationHelper::InterpretedFrame::is_owning_locks(f)) {\n-      return freeze_pinned_monitor;\n-    }\n-    if (f.interpreter_frame_method()->is_native()) {\n-      return freeze_pinned_native; \/\/ interpreter native entry\n-    }\n-  } else if (f.is_compiled_frame()) {\n-    if (ContinuationHelper::CompiledFrame::is_owning_locks(map->thread(), map, f)) {\n-      return freeze_pinned_monitor;\n-    }\n-  } else {\n-    return freeze_pinned_native;\n-  }\n-  return freeze_ok;\n-}\n-\n@@ -1306,1 +1278,2 @@\n-    if (is_pinned(f, &map) == freeze_pinned_monitor) {\n+    if (f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f) ||\n+        f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f)) {\n@@ -1326,13 +1299,0 @@\n-static inline bool can_freeze_fast(JavaThread* thread) {\n-  \/\/ There are no interpreted frames if we're not called from the interpreter and we haven't ancountered an i2c adapter or called Deoptimization::unpack_frames\n-  \/\/ Calls from native frames also go through the interpreter (see JavaCalls::call_helper)\n-  assert(!thread->cont_fastpath()\n-         || (thread->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(thread)), \"\");\n-\n-  \/\/ We also clear thread->cont_fastpath on deoptimization (notify_deopt) and when we thaw interpreted frames\n-  bool fast = thread->cont_fastpath() && UseContinuationFastPath;\n-  assert(!fast || monitors_on_stack(thread) == (thread->held_monitor_count() > 0), \"\");\n-  fast = fast && thread->held_monitor_count() == 0;\n-  return fast;\n-}\n-\n@@ -1382,2 +1342,4 @@\n-  if (entry->is_pinned()) {\n-    log_develop_debug(continuations)(\"PINNED due to critical section\");\n+  assert(monitors_on_stack(current) == (current->held_monitor_count() > 0), \"\");\n+\n+  if (entry->is_pinned() || current->held_monitor_count() > 0) {\n+    log_develop_debug(continuations)(\"PINNED due to critical section\/hold monitor\");\n@@ -1385,2 +1347,3 @@\n-    log_develop_trace(continuations)(\"=== end of freeze (fail %d)\", freeze_pinned_cs);\n-    return freeze_pinned_cs;\n+    freeze_result res = entry->is_pinned() ? freeze_pinned_cs : freeze_pinned_monitor;\n+    log_develop_trace(continuations)(\"=== end of freeze (fail %d)\", res);\n+    return res;\n@@ -1391,1 +1354,6 @@\n-  bool fast = can_freeze_fast(current);\n+  \/\/ There are no interpreted frames if we're not called from the interpreter and we haven't ancountered an i2c\n+  \/\/ adapter or called Deoptimization::unpack_frames. Calls from native frames also go through the interpreter\n+  \/\/ (see JavaCalls::call_helper).\n+  assert(!current->cont_fastpath()\n+         || (current->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(current)), \"\");\n+  bool fast = UseContinuationFastPath && current->cont_fastpath();\n@@ -1425,0 +1393,2 @@\n+  } else if (thread->held_monitor_count() > 0) {\n+    return freeze_pinned_monitor;\n@@ -1447,3 +1417,2 @@\n-    freeze_result res = is_pinned(f, &map);\n-    if (res != freeze_ok) {\n-      return res;\n+    if (f.is_interpreted_frame() && f.interpreter_frame_method()->is_native() || f.is_native_frame()) {\n+      return freeze_pinned_native;\n@@ -1458,0 +1427,1 @@\n+      int monitor_count = entry->parent_held_monitor_count();\n@@ -1464,0 +1434,2 @@\n+      } else if (monitor_count > 0) {\n+        return freeze_pinned_monitor;\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":22,"deletions":50,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -103,0 +103,2 @@\n+\n+#ifdef ASSERT\n@@ -104,0 +106,1 @@\n+#endif\n@@ -132,0 +135,1 @@\n+#ifdef ASSERT\n@@ -134,0 +138,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+#ifdef ASSERT\n@@ -126,0 +127,1 @@\n+#endif\n@@ -170,0 +172,1 @@\n+#ifdef ASSERT\n@@ -206,0 +209,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}