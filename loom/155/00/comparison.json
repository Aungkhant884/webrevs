{"files":[{"patch":"@@ -755,4 +755,0 @@\n-    if (UNLIKELY(ContinuationHelper::CompiledFrame::is_owning_locks(_cont.thread(), SmallRegisterMap::instance, f))) {\n-      return freeze_pinned_monitor;\n-    }\n-\n@@ -762,3 +758,0 @@\n-    if (ContinuationHelper::InterpretedFrame::is_owning_locks(f)) {\n-      return freeze_pinned_monitor;\n-    }\n@@ -1112,3 +1105,0 @@\n-  if (UNLIKELY(ContinuationHelper::CompiledFrame::is_owning_locks(_cont.thread(), &map, senderf))) {\n-    return freeze_pinned_monitor;\n-  }\n@@ -1326,13 +1316,0 @@\n-static inline bool can_freeze_fast(JavaThread* thread) {\n-  \/\/ There are no interpreted frames if we're not called from the interpreter and we haven't ancountered an i2c adapter or called Deoptimization::unpack_frames\n-  \/\/ Calls from native frames also go through the interpreter (see JavaCalls::call_helper)\n-  assert(!thread->cont_fastpath()\n-         || (thread->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(thread)), \"\");\n-\n-  \/\/ We also clear thread->cont_fastpath on deoptimization (notify_deopt) and when we thaw interpreted frames\n-  bool fast = thread->cont_fastpath() && UseContinuationFastPath;\n-  assert(!fast || monitors_on_stack(thread) == (thread->held_monitor_count() > 0), \"\");\n-  fast = fast && thread->held_monitor_count() == 0;\n-  return fast;\n-}\n-\n@@ -1382,2 +1359,4 @@\n-  if (entry->is_pinned()) {\n-    log_develop_debug(continuations)(\"PINNED due to critical section\");\n+  assert(monitors_on_stack(current) == (current->held_monitor_count() > 0), \"\");\n+\n+  if (entry->is_pinned() || current->held_monitor_count() > 0) {\n+    log_develop_debug(continuations)(\"PINNED due to critical section\/hold monitor\");\n@@ -1385,2 +1364,3 @@\n-    log_develop_trace(continuations)(\"=== end of freeze (fail %d)\", freeze_pinned_cs);\n-    return freeze_pinned_cs;\n+    freeze_result res = entry->is_pinned() ? freeze_pinned_cs : freeze_pinned_monitor;\n+    log_develop_trace(continuations)(\"=== end of freeze (fail %d)\", res);\n+    return res;\n@@ -1391,1 +1371,6 @@\n-  bool fast = can_freeze_fast(current);\n+  \/\/ There are no interpreted frames if we're not called from the interpreter and we haven't ancountered an i2c\n+  \/\/ adapter or called Deoptimization::unpack_frames. Calls from native frames also go through the interpreter\n+  \/\/ (see JavaCalls::call_helper).\n+  assert(!current->cont_fastpath()\n+         || (current->cont_fastpath_thread_state() && !interpreted_native_or_deoptimized_on_stack(current)), \"\");\n+  bool fast = UseContinuationFastPath && current->cont_fastpath();\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":13,"deletions":28,"binary":false,"changes":41,"status":"modified"}]}