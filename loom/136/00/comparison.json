{"files":[{"patch":"@@ -30,1 +30,0 @@\n-#include \"code\/scopeDesc.hpp\"\n@@ -36,1 +35,0 @@\n-#include \"gc\/shared\/oopStorage.hpp\"\n@@ -39,2 +37,0 @@\n-#include \"interpreter\/linkResolver.hpp\"\n-#include \"interpreter\/oopMapCache.hpp\"\n@@ -49,2 +45,0 @@\n-#include \"oops\/weakHandle.inline.hpp\"\n-#include \"prims\/jvmtiDeferredUpdates.hpp\"\n@@ -55,1 +49,0 @@\n-#include \"runtime\/deoptimization.hpp\"\n@@ -58,1 +51,0 @@\n-#include \"runtime\/javaCalls.hpp\"\n@@ -62,0 +54,1 @@\n+#include \"runtime\/osThread.hpp\"\n@@ -63,1 +56,0 @@\n-#include \"runtime\/sharedRuntime.hpp\"\n@@ -71,1 +63,0 @@\n-#include \"utilities\/copy.hpp\"\n@@ -242,1 +233,1 @@\n-oop ContinuationHelper::get_continuation(JavaThread* thread) {\n+static oop get_continuation(JavaThread* thread) {\n@@ -248,1 +239,1 @@\n-bool ContinuationHelper::stack_overflow_check(JavaThread* thread, int size, address sp) {\n+static bool stack_overflow_check(JavaThread* thread, int size, address sp) {\n@@ -258,1 +249,2 @@\n-inline void ContinuationHelper::clear_anchor(JavaThread* thread) {\n+#ifdef ASSERT\n+inline void clear_anchor(JavaThread* thread) {\n@@ -262,1 +254,1 @@\n-void ContinuationHelper::set_anchor(JavaThread* thread, intptr_t* sp) {\n+static void set_anchor(JavaThread* thread, intptr_t* sp) {\n@@ -269,1 +261,1 @@\n-  set_anchor_pd(anchor, sp);\n+  ContinuationHelper::set_anchor_pd(anchor, sp);\n@@ -274,0 +266,1 @@\n+#endif \/\/ ASSERT\n@@ -275,1 +268,1 @@\n-void ContinuationHelper::set_anchor_to_entry(JavaThread* thread, ContinuationEntry* entry) {\n+static void set_anchor_to_entry(JavaThread* thread, ContinuationEntry* entry) {\n@@ -279,1 +272,1 @@\n-  set_anchor_to_entry_pd(anchor, entry);\n+  ContinuationHelper::set_anchor_to_entry_pd(anchor, entry);\n@@ -285,2 +278,5 @@\n-inline void ContinuationHelper::maybe_flush_stack_processing(JavaThread* thread, const ContinuationEntry* entry) {\n-  maybe_flush_stack_processing(thread, (intptr_t*)((uintptr_t)entry->entry_sp() + ContinuationEntry::size()));\n+NOINLINE static void flush_stack_processing(JavaThread* thread, intptr_t* sp) {\n+  log_develop_trace(continuations)(\"flush_stack_processing\");\n+  for (StackFrameStream fst(thread, true, true); fst.current()->sp() <= sp; fst.next()) {\n+    ;\n+  }\n@@ -289,1 +285,1 @@\n-inline void ContinuationHelper::maybe_flush_stack_processing(JavaThread* thread, intptr_t* sp) {\n+inline void maybe_flush_stack_processing(JavaThread* thread, intptr_t* sp) {\n@@ -299,5 +295,2 @@\n-NOINLINE void ContinuationHelper::flush_stack_processing(JavaThread* thread, intptr_t* sp) {\n-  log_develop_trace(continuations)(\"flush_stack_processing\");\n-  for (StackFrameStream fst(thread, true, true); fst.current()->sp() <= sp; fst.next()) {\n-    ;\n-  }\n+inline void maybe_flush_stack_processing(JavaThread* thread, const ContinuationEntry* entry) {\n+  maybe_flush_stack_processing(thread, (intptr_t*)((uintptr_t)entry->entry_sp() + ContinuationEntry::size()));\n@@ -306,0 +299,1 @@\n+\n@@ -528,12 +522,1 @@\n-#endif\n-\n-#if INCLUDE_JVMTI\n-static int num_java_frames(ContinuationWrapper& cont) {\n-  ResourceMark rm; \/\/ used for scope traversal in num_java_frames(CompiledMethod*, address)\n-  int count = 0;\n-  for (stackChunkOop chunk = cont.tail(); chunk != nullptr; chunk = chunk->parent()) {\n-    count += chunk->num_java_frames();\n-  }\n-  return count;\n-}\n-#endif \/\/ INCLUDE_JVMTI\n+#endif \/\/ ASSERT\n@@ -544,0 +527,1 @@\n+\/\/ Called from generate_cont_doYield() in stubGenerator_<cpu>.cpp through Continuation::freeze_entry();\n@@ -1075,1 +1059,1 @@\n-\/\/ Called _after_ the last possible sfepoint during the freeze operation (chunk allocation)\n+\/\/ Called _after_ the last possible safepoint during the freeze operation (chunk allocation)\n@@ -1078,2 +1062,2 @@\n-  ContinuationHelper::maybe_flush_stack_processing(_thread, entry);\n-  ContinuationHelper::set_anchor_to_entry(_thread, entry);\n+  maybe_flush_stack_processing(_thread, entry);\n+  set_anchor_to_entry(_thread, entry);\n@@ -1868,1 +1852,10 @@\n-static void invalidate_JVMTI_stack(JavaThread* thread) {\n+static int num_java_frames(ContinuationWrapper& cont) {\n+  ResourceMark rm; \/\/ used for scope traversal in num_java_frames(CompiledMethod*, address)\n+  int count = 0;\n+  for (stackChunkOop chunk = cont.tail(); chunk != nullptr; chunk = chunk->parent()) {\n+    count += chunk->num_java_frames();\n+  }\n+  return count;\n+}\n+\n+static void invalidate_jvmti_stack(JavaThread* thread) {\n@@ -1875,1 +1868,0 @@\n-#endif \/\/ INCLUDE_JVMTI\n@@ -1877,2 +1869,1 @@\n-static void JVMTI_yield_cleanup(JavaThread* thread, ContinuationWrapper& cont) {\n-#if INCLUDE_JVMTI\n+static void jvmti_yield_cleanup(JavaThread* thread, ContinuationWrapper& cont) {\n@@ -1885,2 +1876,1 @@\n-  invalidate_JVMTI_stack(thread);\n-#endif\n+  invalidate_jvmti_stack(thread);\n@@ -1888,0 +1878,1 @@\n+#endif \/\/ INCLUDE_JVMTI\n@@ -1931,1 +1922,1 @@\n-#endif\n+#endif \/\/ ASSERT\n@@ -1946,5 +1937,0 @@\n-static int early_return(int res, JavaThread* thread) {\n-  log_develop_trace(continuations)(\"=== end of freeze (fail %d)\", res);\n-  return res;\n-}\n-\n@@ -1963,1 +1949,2 @@\n-    return early_return(res, thread);\n+    log_develop_trace(continuations)(\"=== end of freeze (fail %d)\", res);\n+    return res;\n@@ -1966,1 +1953,1 @@\n-  JVMTI_yield_cleanup(thread, cont); \/\/ can safepoint\n+  JVMTI_ONLY(jvmti_yield_cleanup(thread, cont)); \/\/ can safepoint\n@@ -1973,1 +1960,2 @@\n-  assert(current->deferred_updates() == nullptr || current->deferred_updates()->count() == 0, \"\");\n+  \/\/ This was a bug once?\n+  \/\/ assert(current->deferred_updates() == nullptr || current->deferred_updates()->count() == 0, \"\");\n@@ -1984,1 +1972,1 @@\n-  oop oopCont = ContinuationHelper::get_continuation(current);\n+  oop oopCont = get_continuation(current);\n@@ -1997,1 +1985,2 @@\n-    return early_return(freeze_pinned_cs, current);\n+    log_develop_trace(continuations)(\"=== end of freeze (fail %d)\", freeze_pinned_cs);\n+    return freeze_pinned_cs;\n@@ -2091,1 +2080,1 @@\n-  assert(continuation == ContinuationHelper::get_continuation(thread), \"\");\n+  assert(continuation == get_continuation(thread), \"\");\n@@ -2116,1 +2105,1 @@\n-  if (!ContinuationHelper::stack_overflow_check(thread, size + 300, bottom)) {\n+  if (!stack_overflow_check(thread, size + 300, bottom)) {\n@@ -2187,1 +2176,0 @@\n-  static void JVMTI_continue_cleanup(JavaThread* thread);\n@@ -2332,1 +2320,1 @@\n-  ContinuationHelper::set_anchor(_thread, stack_sp);\n+  set_anchor(_thread, stack_sp);\n@@ -2337,1 +2325,1 @@\n-  ContinuationHelper::clear_anchor(_thread);\n+  clear_anchor(_thread);\n@@ -2399,3 +2387,1 @@\n-  if (!return_barrier) {\n-    JVMTI_continue_cleanup(_thread);\n-  }\n+  JVMTI_ONLY(if (!return_barrier) invalidate_jvmti_stack(_thread));\n@@ -2767,6 +2753,0 @@\n-void ThawBase::JVMTI_continue_cleanup(JavaThread* thread) {\n-#if INCLUDE_JVMTI\n-  invalidate_JVMTI_stack(thread);\n-#endif \/\/ INCLUDE_JVMTI\n-}\n-\n@@ -2788,1 +2768,1 @@\n-  assert(oopCont == ContinuationHelper::get_continuation(thread), \"\");\n+  assert(oopCont == get_continuation(thread), \"\");\n@@ -2797,1 +2777,1 @@\n-  ContinuationHelper::set_anchor_to_entry(thread, cont.entry());\n+  set_anchor_to_entry(thread, cont.entry());\n@@ -2799,1 +2779,1 @@\n-  ContinuationHelper::clear_anchor(thread);\n+  clear_anchor(thread);\n@@ -2813,1 +2793,1 @@\n-  ContinuationHelper::set_anchor(thread, sp0);\n+  set_anchor(thread, sp0);\n@@ -2819,1 +2799,1 @@\n-  ContinuationHelper::clear_anchor(thread);\n+  clear_anchor(thread);\n@@ -2959,1 +2939,1 @@\n-#endif\n+#endif \/\/ ASSERT\n@@ -2981,1 +2961,1 @@\n-  ContinuationHelper::maybe_flush_stack_processing(thread, this);\n+  maybe_flush_stack_processing(thread, this);\n@@ -2991,1 +2971,1 @@\n-    Continuation::get_continuation_entry_for_continuation(thread, ContinuationHelper::get_continuation(thread));\n+    Continuation::get_continuation_entry_for_continuation(thread, get_continuation(thread));\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":59,"deletions":79,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -38,5 +38,0 @@\n-  static oop get_continuation(JavaThread* thread);\n-  static bool stack_overflow_check(JavaThread* thread, int size, address sp);\n-\n-  static inline void clear_anchor(JavaThread* thread);\n-  static void set_anchor(JavaThread* thread, intptr_t* sp);\n@@ -44,1 +39,0 @@\n-  static void set_anchor_to_entry(JavaThread* thread, ContinuationEntry* entry);\n@@ -52,4 +46,0 @@\n-  static inline void maybe_flush_stack_processing(JavaThread* thread, const ContinuationEntry* entry);\n-  static inline void maybe_flush_stack_processing(JavaThread* thread, intptr_t* sp);\n-  static NOINLINE void flush_stack_processing(JavaThread* thread, intptr_t* sp);\n-\n","filename":"src\/hotspot\/share\/runtime\/continuationHelper.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}