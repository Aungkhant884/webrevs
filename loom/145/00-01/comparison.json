{"files":[{"patch":"@@ -30,1 +30,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n@@ -35,15 +35,0 @@\n-inline frame ContinuationEntry::to_frame() const {\n-  static CodeBlob* cb = CodeCache::find_blob(entry_pc());\n-  return frame(entry_sp(), entry_sp(), entry_fp(), entry_pc(), cb);\n-}\n-\n-inline intptr_t* ContinuationEntry::entry_fp() const {\n-  return (intptr_t*)((address)this + size());\n-}\n-\n-inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  intptr_t** fp = (intptr_t**)(bottom_sender_sp() - frame::sender_sp_offset);\n-  frame::update_map_with_saved_link(map, fp);\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationHelper_aarch64.inline.hpp","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,5 +30,0 @@\n-#include \"runtime\/continuationEntry.hpp\"\n-#include \"runtime\/frame.inline.hpp\"\n-#include \"runtime\/registerMap.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n@@ -37,14 +32,0 @@\n-inline frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-inline intptr_t* ContinuationEntry::entry_fp() const {\n-  Unimplemented();\n-  return nullptr;\n-}\n-\n-inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/continuationHelper_arm.inline.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,21 +30,0 @@\n-#include \"runtime\/continuationEntry.hpp\"\n-#include \"runtime\/frame.inline.hpp\"\n-#include \"runtime\/registerMap.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-\/\/ TODO: Implement\n-\n-inline frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-inline intptr_t* ContinuationEntry::entry_fp() const {\n-  Unimplemented();\n-  return nullptr;\n-}\n-\n-inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/continuationHelper_ppc.inline.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -30,5 +30,0 @@\n-#include \"runtime\/continuationEntry.hpp\"\n-#include \"runtime\/frame.inline.hpp\"\n-#include \"runtime\/registerMap.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n@@ -37,14 +32,0 @@\n-inline frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-inline intptr_t* ContinuationEntry::entry_fp() const {\n-  Unimplemented();\n-  return nullptr;\n-}\n-\n-inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/continuationHelper_s390.inline.hpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n@@ -35,16 +35,0 @@\n-inline frame ContinuationEntry::to_frame() const {\n-  static CodeBlob* cb = CodeCache::find_blob(entry_pc());\n-  return frame(entry_sp(), entry_sp(), entry_fp(), entry_pc(), cb);\n-}\n-\n-\n-inline intptr_t* ContinuationEntry::entry_fp() const {\n-  return (intptr_t*)((address)this + size());\n-}\n-\n-inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  intptr_t** fp = (intptr_t**)(bottom_sender_sp() - frame::sender_sp_offset);\n-  frame::update_map_with_saved_link(map, fp);\n-}\n-\n-\n","filename":"src\/hotspot\/cpu\/x86\/continuationHelper_x86.inline.hpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-#include \"runtime\/continuationEntry.hpp\"\n@@ -50,0 +49,1 @@\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,21 +30,0 @@\n-#include \"runtime\/continuationEntry.hpp\"\n-#include \"runtime\/frame.inline.hpp\"\n-#include \"runtime\/registerMap.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-\/\/ TODO: Implement\n-\n-inline frame ContinuationEntry::to_frame() const {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-inline intptr_t* ContinuationEntry::entry_fp() const {\n-  Unimplemented();\n-  return nullptr;\n-}\n-\n-inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/continuationHelper_zero.inline.hpp","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,2 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuation.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n@@ -28,1 +29,0 @@\n-#include \"runtime\/continuationWrapper.inline.hpp\"\n@@ -30,0 +30,1 @@\n+#include \"runtime\/continuationWrapper.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"oops\/access.hpp\"\n@@ -117,4 +116,1 @@\n-  oop cont_oop() const {\n-    oop snapshot = _cont;\n-    return NativeAccess<>::oop_load(&snapshot);\n-  }\n+  inline oop cont_oop() const;\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n@@ -72,0 +72,24 @@\n+#if CONT_JFR\n+class FreezeThawJfrInfo : public StackObj {\n+  short _e_size;\n+  short _e_num_interpreted_frames;\n+ public:\n+\n+  FreezeThawJfrInfo() : _e_size(0), _e_num_interpreted_frames(0) {}\n+  inline void record_interpreted_frame() { _e_num_interpreted_frames++; }\n+  inline void record_size_copied(int size) { _e_size += size << LogBytesPerWord; }\n+  template<typename Event> void post_jfr_event(Event *e, oop continuation, JavaThread* jt);\n+};\n+\n+template<typename Event> void FreezeThawJfrInfo::post_jfr_event(Event* e, oop continuation, JavaThread* jt) {\n+  if (e->should_commit()) {\n+    log_develop_trace(continuations)(\"JFR event: iframes: %d size: %d\", _e_num_interpreted_frames, _e_size);\n+    e->set_carrierThread(JFR_JVM_THREAD_ID(jt));\n+    e->set_contClass(continuation->klass());\n+    e->set_numIFrames(_e_num_interpreted_frames);\n+    e->set_size(_e_size);\n+    e->commit();\n+  }\n+}\n+#endif \/\/ CONT_JFR\n+\n@@ -312,0 +336,1 @@\n+  CONT_JFR_ONLY(FreezeThawJfrInfo _jfr_info;)\n@@ -330,0 +355,1 @@\n+  CONT_JFR_ONLY(FreezeThawJfrInfo& jfr_info() { return _jfr_info; })\n@@ -430,1 +456,1 @@\n-  CONT_JFR_ONLY(_cont.record_size_copied(size);)\n+  CONT_JFR_ONLY(_jfr_info.record_size_copied(size);)\n@@ -525,0 +551,1 @@\n+  CONT_JFR_ONLY(bool chunk_is_allocated = false;)\n@@ -582,0 +609,1 @@\n+    DEBUG_ONLY(CONT_JFR_ONLY(chunk_is_allocated = true;))\n@@ -642,2 +670,2 @@\n-    DEBUG_ONLY(e.set_allocate(allocated);)\n-    e.set_size(size << LogBytesPerWord);\n+    DEBUG_ONLY(e.set_allocate(chunk_is_allocated);)\n+    e.set_size(cont_size << LogBytesPerWord);\n@@ -1011,1 +1039,1 @@\n-  CONT_JFR_ONLY(_cont.record_interpreted_frame();)\n+  CONT_JFR_ONLY(_jfr_info.record_interpreted_frame();)\n@@ -1378,1 +1406,1 @@\n-    CONT_JFR_ONLY(cont.post_jfr_event(&event, current);)\n+    CONT_JFR_ONLY(fr.jfr_info().post_jfr_event(&event, oopCont, current);)\n@@ -1393,1 +1421,1 @@\n-    CONT_JFR_ONLY(cont.post_jfr_event(&event, current);)\n+    CONT_JFR_ONLY(fr.jfr_info().post_jfr_event(&event, oopCont, current);)\n@@ -1510,0 +1538,1 @@\n+  CONT_JFR_ONLY(FreezeThawJfrInfo _jfr_info;)\n@@ -1571,0 +1600,3 @@\n+\n+ public:\n+  CONT_JFR_ONLY(FreezeThawJfrInfo& jfr_info() { return _jfr_info; })\n@@ -1714,1 +1746,1 @@\n-    e.set_size(size << LogBytesPerWord);\n+    e.set_size(thaw_size << LogBytesPerWord);\n@@ -1735,1 +1767,1 @@\n-  CONT_JFR_ONLY(_cont.record_size_copied(size);)\n+  CONT_JFR_ONLY(_jfr_info.record_size_copied(size);)\n@@ -1952,1 +1984,1 @@\n-  CONT_JFR_ONLY(_cont.record_interpreted_frame();)\n+  CONT_JFR_ONLY(_jfr_info.record_interpreted_frame();)\n@@ -2192,1 +2224,1 @@\n-  CONT_JFR_ONLY(cont.post_jfr_event(&event, thread);)\n+  CONT_JFR_ONLY(thw.jfr_info().post_jfr_event(&event, cont.continuation(), thread);)\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":43,"deletions":11,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n@@ -40,22 +40,0 @@\n-ContinuationWrapper::ContinuationWrapper(JavaThread* thread, oop continuation)\n-  : _thread(thread), _entry(thread->last_continuation()), _continuation(continuation),\n-    _e_size(0), _e_num_interpreted_frames(0)\n-  {\n-  assert(oopDesc::is_oop(_continuation),\n-         \"Invalid continuation object: \" INTPTR_FORMAT, p2i((void*)_continuation));\n-  assert(_continuation == _entry->cont_oop(), \"cont: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \"\n-         INTPTR_FORMAT, p2i((oopDesc*)_continuation), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n-  disallow_safepoint();\n-  read();\n-}\n-\n-ContinuationWrapper::ContinuationWrapper(oop continuation)\n-  : _thread(nullptr), _entry(nullptr), _continuation(continuation),\n-    _e_size(0), _e_num_interpreted_frames(0)\n-  {\n-  assert(oopDesc::is_oop(_continuation),\n-         \"Invalid continuation object: \" INTPTR_FORMAT, p2i((void*)_continuation));\n-  disallow_safepoint();\n-  read();\n-}\n-\n@@ -65,2 +43,1 @@\n-    _continuation(map->stack_chunk()->cont()),\n-    _e_size(0), _e_num_interpreted_frames(0)\n+    _continuation(map->stack_chunk()->cont())\n@@ -94,11 +71,0 @@\n-template<typename Event> void ContinuationWrapper::post_jfr_event(Event* e, JavaThread* jt) {\n-  if (e->should_commit()) {\n-    log_develop_trace(continuations)(\"JFR event: iframes: %d size: %d\", _e_num_interpreted_frames, _e_size);\n-    e->set_carrierThread(JFR_JVM_THREAD_ID(jt));\n-    e->set_contClass(_continuation->klass());\n-    e->set_numIFrames(_e_num_interpreted_frames);\n-    e->set_size(_e_size);\n-    e->commit();\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/continuationWrapper.cpp","additions":2,"deletions":36,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n@@ -50,3 +50,0 @@\n-  short _e_size;\n-  short _e_num_interpreted_frames;\n-\n@@ -137,4 +134,0 @@\n-  inline void record_interpreted_frame() { _e_num_interpreted_frames++; }\n-  inline void record_size_copied(int size) { _e_size += size << LogBytesPerWord; }\n-  template<typename Event> void post_jfr_event(Event *e, JavaThread* jt);\n-\n@@ -147,0 +140,20 @@\n+inline ContinuationWrapper::ContinuationWrapper(JavaThread* thread, oop continuation)\n+  : _thread(thread), _entry(thread->last_continuation()), _continuation(continuation)\n+  {\n+  assert(oopDesc::is_oop(_continuation),\n+         \"Invalid continuation object: \" INTPTR_FORMAT, p2i((void*)_continuation));\n+  assert(_continuation == _entry->cont_oop(), \"cont: \" INTPTR_FORMAT \" entry: \" INTPTR_FORMAT \" entry_sp: \"\n+         INTPTR_FORMAT, p2i((oopDesc*)_continuation), p2i((oopDesc*)_entry->cont_oop()), p2i(entrySP()));\n+  disallow_safepoint();\n+  read();\n+}\n+\n+inline ContinuationWrapper::ContinuationWrapper(oop continuation)\n+  : _thread(nullptr), _entry(nullptr), _continuation(continuation)\n+  {\n+  assert(oopDesc::is_oop(_continuation),\n+         \"Invalid continuation object: \" INTPTR_FORMAT, p2i((void*)_continuation));\n+  disallow_safepoint();\n+  read();\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/continuationWrapper.inline.hpp","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-#include \"runtime\/continuationEntry.hpp\"\n+#include \"runtime\/continuationEntry.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}