{"files":[{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_AARCH64_CONTINUATIONENTRY_AARCH64_INLINE_HPP\n+#define CPU_AARCH64_CONTINUATIONENTRY_AARCH64_INLINE_HPP\n+\n+#include \"runtime\/continuationEntry.hpp\"\n+\n+#include \"code\/codeCache.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n+#include \"runtime\/registerMap.hpp\"\n+\n+inline frame ContinuationEntry::to_frame() const {\n+  static CodeBlob* cb = CodeCache::find_blob(entry_pc());\n+  return frame(entry_sp(), entry_sp(), entry_fp(), entry_pc(), cb);\n+}\n+\n+inline intptr_t* ContinuationEntry::entry_fp() const {\n+  return (intptr_t*)((address)this + size());\n+}\n+\n+inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  intptr_t** fp = (intptr_t**)(bottom_sender_sp() - frame::sender_sp_offset);\n+  frame::update_map_with_saved_link(map, fp);\n+}\n+\n+\n+#endif \/\/  CPU_AARCH64_CONTINUATIONENTRY_AARCH64_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationEntry_aarch64.inline.hpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ARM_CONTINUATIONENTRY_ARM_INLINE_HPP\n+#define CPU_ARM_CONTINUATIONENTRY_ARM_INLINE_HPP\n+\n+\n+#include \"runtime\/continuationEntry.hpp\"\n+\n+\/\/ TODO: Implement\n+\n+inline frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+inline intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n+#endif \/\/ CPU_ARM_CONTINUATIONENTRY_ARM_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/arm\/continuationEntry_arm.inline.hpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_PPC_CONTINUATIONENTRY_PPC_INLINE_HPP\n+#define CPU_PPC_CONTINUATIONENTRY_PPC_INLINE_HPP\n+\n+#include \"runtime\/continuationEntry.hpp\"\n+\n+\/\/ TODO: Implement\n+\n+inline frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+inline intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n+#endif \/\/ CPU_PPC_CONTINUATIONENTRY_PPC_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/ppc\/continuationEntry_ppc.inline.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_PPC_CONTINUATION_PPC_INLINE_HPP\n+#define CPU_PPC_CONTINUATION_PPC_INLINE_HPP\n+\n+#include \"oops\/stackChunkOop.inline.hpp\"\n+#include \"runtime\/frame.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n+\n+\n+inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+  Unimplemented();\n+}\n+\n+template<typename FKind>\n+inline frame FreezeBase::sender(const frame& f) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+void FreezeBase::adjust_interpreted_frame_unextended_sp(frame& f) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::patch_stack_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n+  Unimplemented();\n+}\n+\n+inline frame ThawBase::new_entry_frame() {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+  Unimplemented();\n+}\n+\n+inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+  Unimplemented();\n+}\n+\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+  Unimplemented();\n+}\n+\n+void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n+inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+  Unimplemented();\n+}\n+\n+#endif \/\/ CPU_PPC_CONTINUATION_PPC_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/ppc\/continuationFreezeThaw_ppc.inline.hpp","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_S390_CONTINUATIONENTRY_S390_INLINE_HPP\n+#define CPU_S390_CONTINUATIONENTRY_S390_INLINE_HPP\n+\n+#include \"runtime\/continuationEntry.hpp\"\n+\n+\/\/ TODO: Implement\n+\n+inline frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+inline intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n+#endif \/\/ CPU_S390_CONTINUATIONENTRY_S390_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/s390\/continuationEntry_s390.inline.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_S390_CONTINUATION_S390_INLINE_HPP\n+#define CPU_S390_CONTINUATION_S390_INLINE_HPP\n+\n+#include \"oops\/stackChunkOop.inline.hpp\"\n+#include \"runtime\/frame.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n+\n+inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+  Unimplemented();\n+}\n+\n+template<typename FKind>\n+inline frame FreezeBase::sender(const frame& f) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+void FreezeBase::adjust_interpreted_frame_unextended_sp(frame& f) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::patch_stack_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n+  Unimplemented();\n+}\n+\n+inline frame ThawBase::new_entry_frame() {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+  Unimplemented();\n+}\n+\n+inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+  Unimplemented();\n+}\n+\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+  Unimplemented();\n+}\n+\n+void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n+inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+  Unimplemented();\n+}\n+\n+#endif \/\/ CPU_S390_CONTINUATION_S390_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/s390\/continuationFreezeThaw_s390.inline.hpp","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_X86_CONTINUATIONENTRY_X86_INLINE_HPP\n+#define CPU_X86_CONTINUATIONENTRY_X86_INLINE_HPP\n+\n+#include \"runtime\/continuationEntry.hpp\"\n+\n+#include \"runtime\/frame.inline.hpp\"\n+#include \"runtime\/registerMap.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+inline frame ContinuationEntry::to_frame() const {\n+  static CodeBlob* cb = CodeCache::find_blob(entry_pc());\n+  return frame(entry_sp(), entry_sp(), entry_fp(), entry_pc(), cb);\n+}\n+\n+inline intptr_t* ContinuationEntry::entry_fp() const {\n+  return (intptr_t*)((address)this + size());\n+}\n+\n+inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  intptr_t** fp = (intptr_t**)(bottom_sender_sp() - frame::sender_sp_offset);\n+  frame::update_map_with_saved_link(map, fp);\n+}\n+\n+#endif \/\/ CPU_X86_CONTINUATIONENTRY_X86_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/x86\/continuationEntry_x86.inline.hpp","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_CONTINUATIONENTRY_ZERO_INLINE_HPP\n+#define CPU_ZERO_CONTINUATIONENTRY_ZERO_INLINE_HPP\n+\n+#include \"runtime\/continuationEntry.hpp\"\n+\n+\/\/ TODO: Implement\n+\n+inline frame ContinuationEntry::to_frame() const {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+inline intptr_t* ContinuationEntry::entry_fp() const {\n+  Unimplemented();\n+  return nullptr;\n+}\n+\n+inline void ContinuationEntry::update_register_map(RegisterMap* map) const {\n+  Unimplemented();\n+}\n+\n+#endif \/\/ CPU_ZERO_CONTINUATIONENTRY_ZERO_INLINE_HPP\n+\n","filename":"src\/hotspot\/cpu\/zero\/continuationEntry_zero.inline.hpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_CONTINUATION_ZERO_INLINE_HPP\n+#define CPU_ZERO_CONTINUATION_ZERO_INLINE_HPP\n+\n+#include \"oops\/stackChunkOop.inline.hpp\"\n+#include \"runtime\/frame.hpp\"\n+#include \"runtime\/frame.inline.hpp\"\n+\n+inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+  Unimplemented();\n+}\n+\n+template<typename FKind>\n+inline frame FreezeBase::sender(const frame& f) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+template<typename FKind> frame FreezeBase::new_heap_frame(frame& f, frame& caller) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+void FreezeBase::adjust_interpreted_frame_unextended_sp(frame& f) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+  Unimplemented();\n+}\n+\n+inline void FreezeBase::patch_stack_pd(intptr_t* frame_sp, intptr_t* heap_sp) {\n+  Unimplemented();\n+}\n+\n+inline frame ThawBase::new_entry_frame() {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+template<typename FKind> frame ThawBase::new_stack_frame(const frame& hf, frame& caller, bool bottom) {\n+  Unimplemented();\n+  return frame();\n+}\n+\n+inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+  Unimplemented();\n+}\n+\n+inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+  Unimplemented();\n+}\n+\n+inline intptr_t* ThawBase::align(const frame& hf, intptr_t* frame_sp, frame& caller, bool bottom) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+  Unimplemented();\n+}\n+\n+void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n+inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+  Unimplemented();\n+}\n+\n+#endif \/\/ CPU_ZERO_CONTINUATION_ZERO_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/zero\/continuationFreezeThaw_zero.inline.hpp","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_VM_RUNTIME_CONTINUATIONENTRY_INLINE_HPP\n+#define SHARE_VM_RUNTIME_CONTINUATIONENTRY_INLINE_HPP\n+\n+#include \"runtime\/continuationEntry.hpp\"\n+\n+#include \"oops\/access.hpp\"\n+\n+#include CPU_HEADER_INLINE(continuationEntry)\n+\n+inline oop ContinuationEntry::cont_oop() const {\n+  oop snapshot = _cont;\n+  return NativeAccess<>::oop_load(&snapshot);\n+}\n+\n+\n+#endif \/\/ SHARE_VM_RUNTIME_CONTINUATIONENTRY_INLINE_HPP\n","filename":"src\/hotspot\/share\/runtime\/continuationEntry.inline.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"}]}