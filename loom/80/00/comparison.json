{"files":[{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @compile --enable-preview -source ${jdk.version} VTCompensate.java\n+ * @run testng\/othervm --enable-preview -Djdk.defaultScheduler.parallelism=1 -Djdk.tracePinnedThreads=full VTCompensate\n+ * @summary Basic test for ForkJoinPool to compensate when all threads are pinned.\n+ *\/\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.locks.ReentrantLock;\n+import static org.testng.Assert.*;\n+import org.testng.annotations.Test;\n+\n+public class VTCompensate {\n+    @Test\n+    public static void test() throws Exception {\n+        ThreadFactory tf = Thread.ofVirtual().name(\"vt\", 0).factory();\n+        \/\/ VT0, VT1, main\n+        \/\/ 1. main acquire lock\n+        \/\/ 2. VT0 start, acquire lock and park\n+        \/\/ 3. VT1 start, acquire lock and pin\n+        \/\/ 4. main release lock and unpack VT0\n+        \/\/ 5. dead in VT1 and VT0, no VT can run\n+        ReentrantLock lock = new ReentrantLock();\n+        Runnable vt0_r = new Runnable() {\n+            @Override\n+            public void run() {\n+                lock.lock();\n+                System.out.println(\"vt0 get lock \" + Thread.currentThread());\n+                lock.unlock();\n+            }\n+        };\n+        Runnable vt1_r = new Runnable() {\n+            @Override\n+            public void run() {\n+                synchronized (this) {\n+                    lock.lock();\n+                }\n+                System.out.println(\"vt1 get lock \" + Thread.currentThread());\n+                lock.unlock();\n+            }\n+        };\n+        Thread vt0 = Thread.ofVirtual().name(\"vt0\").unstarted(vt0_r);\n+        Thread vt1 = Thread.ofVirtual().name(\"vt1\").unstarted(vt1_r);\n+        lock.lock();\n+        System.out.println(\"main lock\");\n+        vt0.start();\n+        Thread.sleep(1000);\n+        vt1.start();\n+        \/\/ wait vt1 pin and unlock\n+        while (true) {\n+            if (vt1.getState() == Thread.State.WAITING) {\n+                break;\n+            }\n+        }\n+        lock.unlock();\n+        System.out.println(\"main release\");\n+        vt0.join();\n+        assertEquals(vt0.getState(),  Thread.State.TERMINATED);\n+        vt1.join();\n+        assertEquals(vt1.getState(),  Thread.State.TERMINATED);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/VTCompensate.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}