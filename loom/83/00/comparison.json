{"files":[{"patch":"@@ -435,0 +435,1 @@\n+                ForkJoinPool.updateRC(false, Thread.currentCarrierThread());\n@@ -442,0 +443,1 @@\n+            ForkJoinPool.updateRC(true, Thread.currentCarrierThread());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1802,0 +1802,15 @@\n+    \/**\n+     * Adjust RC of ForkJoinPool.\n+     *\n+     * @param add determine increase or decrease of RC_UNIT\n+     * @param carrier current carrier thread\n+     *\/\n+    public static void updateRC(boolean add, Thread carrier) {\n+        ForkJoinPool p;\n+        if (Thread.currentThread().isVirtual() &&\n+            carrier instanceof ForkJoinWorkerThread &&\n+            (p = ((ForkJoinWorkerThread)carrier).pool) != null) {\n+            p.getAndAddCtl(add ? RC_UNIT : -RC_UNIT);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @compile --enable-preview -source ${jdk.version} VTCompensate.java\n+ * @run testng\/othervm --enable-preview -Djdk.defaultScheduler.parallelism=1 -Djdk.tracePinnedThreads=full VTCompensate\n+ * @summary Basic test for compensate of ForkJoinPool.\n+ *\/\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.locks.ReentrantLock;\n+import static org.testng.Assert.*;\n+import org.testng.annotations.Test;\n+\n+public class VTCompensate {\n+    @Test\n+    public static void pinCompensate() throws Exception {\n+        ReentrantLock lock = new ReentrantLock();\n+        Runnable vt0_r = new Runnable() {\n+            @Override\n+            public void run() {\n+                System.out.println(\"enter vt0\");\n+                lock.lock();\n+                lock.unlock();\n+            }\n+        };\n+\n+        Runnable vt1_r = new Runnable() {\n+            @Override\n+            public void run() {\n+                synchronized (this) {\n+                    lock.lock();\n+                }\n+                lock.unlock();\n+            }\n+        };\n+\n+        lock.lock();\n+\n+        Thread vt0 = Thread.ofVirtual().name(\"vt0\").start(vt0_r);\n+        Thread.sleep(1000);\n+\n+        Thread vt1 = Thread.ofVirtual().name(\"vt1\").start(vt1_r);\n+        Thread.sleep(5000);\n+\n+        lock.unlock();\n+        vt0.join();\n+        vt1.join();\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/VTCompensate.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}