{"files":[{"patch":"@@ -212,1 +212,1 @@\n-template <typename FKind, bool bottom>\n+template <typename FKind>\n@@ -311,1 +311,1 @@\n-template<typename FKind, bool bottom>\n+template<typename FKind>\n@@ -313,1 +313,0 @@\n-  assert (!bottom || caller.fp() == _cont.entryFP(), \"\");\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-template <typename FKind, bool bottom>\n+template <typename FKind>\n@@ -142,1 +142,1 @@\n-template<typename FKind, bool bottom>\n+template<typename FKind>\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-template <typename FKind, bool bottom>\n+template <typename FKind>\n@@ -142,1 +142,1 @@\n-template<typename FKind, bool bottom>\n+template<typename FKind>\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-template <typename FKind, bool bottom>\n+template <typename FKind>\n@@ -142,1 +142,1 @@\n-template<typename FKind, bool bottom>\n+template<typename FKind>\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-template <typename FKind, bool bottom>\n+template <typename FKind>\n@@ -301,1 +301,1 @@\n-template<typename FKind, bool bottom>\n+template<typename FKind>\n@@ -303,1 +303,0 @@\n-  assert(!bottom || caller.fp() == _cont.entryFP(), \"\");\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-template <typename FKind, bool bottom>\n+template <typename FKind>\n@@ -142,1 +142,1 @@\n-template<typename FKind, bool bottom>\n+template<typename FKind>\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,4 +177,4 @@\n-template<int x> NOINLINE static bool verify_continuation(oop cont) { return Continuation::debug_verify_continuation(cont); }\n-#define VERIFY_CONTINUATION(cont) verify_continuation<__LINE__>((cont))\n-template<int x> NOINLINE static bool verify_stack_chunk(oop chunk) { return InstanceStackChunkKlass::verify(chunk); }\n-#define VERIFY_STACK_CHUNK(chunk) verify_stack_chunk<__LINE__>((chunk))\n+NOINLINE static bool verify_continuation(oop cont) { return Continuation::debug_verify_continuation(cont); }\n+#define VERIFY_CONTINUATION(cont) verify_continuation((cont))\n+NOINLINE static bool verify_stack_chunk(oop chunk) { return InstanceStackChunkKlass::verify(chunk); }\n+#define VERIFY_STACK_CHUNK(chunk) verify_stack_chunk((chunk))\n@@ -252,2 +252,0 @@\n-class SmallRegisterMap;\n-\n@@ -464,1 +462,3 @@\n-  if (chunk == nullptr) return frame();\n+  if (chunk == nullptr) {\n+    return frame();\n+  }\n@@ -674,1 +674,3 @@\n-    if (cont == entry->continuation()) return entry;\n+    if (cont == entry->continuation()) {\n+      return entry;\n+    }\n@@ -773,1 +775,3 @@\n-      if (vf->is_java_frame()) return javaVFrame::cast(vf);\n+      if (vf->is_java_frame()) {\n+        return javaVFrame::cast(vf);\n+      }\n@@ -931,1 +935,3 @@\n-  if (cont == nullptr) return;\n+  if (cont == nullptr) {\n+    return;\n+  }\n@@ -1028,1 +1034,0 @@\n-  intptr_t *_top_address;\n@@ -1037,1 +1042,1 @@\n-  template <typename FKind, bool bottom> inline void patch_pd(frame& callee, const frame& caller);\n+  template <typename FKind> inline void patch_pd(frame& callee, const frame& caller);\n@@ -1046,1 +1051,2 @@\n-    assert(thread->last_continuation()->entry_sp() == _cont.entrySP(), \"\");\n+    assert(_thread != nullptr, \"\");\n+    assert(_thread->last_continuation()->entry_sp() == _cont.entrySP(), \"\");\n@@ -1048,2 +1054,1 @@\n-    int argsize = _cont.argsize();\n-    _bottom_address = _cont.entrySP() - argsize;\n+    _bottom_address = _cont.entrySP() - _cont.argsize();\n@@ -1091,1 +1096,0 @@\n-    JavaThread* thread = _thread;\n@@ -1093,2 +1097,2 @@\n-    ContinuationHelper::maybe_flush_stack_processing(thread, entry);\n-    ContinuationHelper::set_anchor_to_entry(thread, entry);\n+    ContinuationHelper::maybe_flush_stack_processing(_thread, entry);\n+    ContinuationHelper::set_anchor_to_entry(_thread, entry);\n@@ -1102,1 +1106,1 @@\n-    if (_thread != nullptr && _thread->has_pending_exception()) {\n+    if (_thread->has_pending_exception()) {\n@@ -1133,2 +1137,1 @@\n-    const int       stack_argsize = _cont.argsize();\n-    intptr_t* const stack_bottom  = _cont.entrySP() - ContinuationHelper::frame_align_words(stack_argsize);\n+    intptr_t* const stack_bottom  = _cont.entrySP() - ContinuationHelper::frame_align_words(_cont.argsize());\n@@ -1140,1 +1143,1 @@\n-      size -= stack_argsize;\n+      size -= _cont.argsize();\n@@ -1146,1 +1149,1 @@\n-      available, stack_argsize, size, p2i(stack_top), p2i(stack_bottom));\n+      available, _cont.argsize(), size, p2i(stack_top), p2i(stack_bottom));\n@@ -1153,1 +1156,0 @@\n-    assert(_thread != nullptr, \"\");\n@@ -1159,3 +1161,2 @@\n-    intptr_t* const stack_top     = top_sp + ContinuationHelper::frame_metadata;\n-    const int       stack_argsize = _cont.argsize();\n-    intptr_t* const stack_bottom  = _cont.entrySP() - ContinuationHelper::frame_align_words(stack_argsize); \/\/ see alignment in thaw\n+    intptr_t* const cont_stack_top    = top_sp + ContinuationHelper::frame_metadata;\n+    intptr_t* const cont_stack_bottom = _cont.entrySP() - ContinuationHelper::frame_align_words(_cont.argsize()); \/\/ see alignment in thaw\n@@ -1163,1 +1164,1 @@\n-    const int size = stack_bottom - stack_top;\n+    const int cont_size = cont_stack_bottom - cont_stack_top;\n@@ -1166,2 +1167,2 @@\n-      size, stack_argsize, p2i(stack_top), p2i(stack_bottom));\n-    assert(size > 0, \"\");\n+      cont_size, _cont.argsize(), p2i(cont_stack_top), p2i(cont_stack_bottom));\n+    assert(cont_size > 0, \"\");\n@@ -1170,1 +1171,1 @@\n-    bool allocated, empty;\n+    bool empty = true;\n@@ -1177,1 +1178,1 @@\n-    int sp_before; \/\/ the chunk's sp before the freeze, adjusted to point beyond the stack-passed arguments in the topmost frame\n+    int chunk_start_sp; \/\/ the chunk's sp before the freeze, adjusted to point beyond the stack-passed arguments in the topmost frame\n@@ -1179,1 +1180,0 @@\n-      DEBUG_ONLY(allocated = false;)\n@@ -1184,3 +1184,1 @@\n-      sp_before = chunk->sp();\n-\n-      if (sp_before < chunk->stack_size()) { \/\/ we are copying into a non-empty chunk\n+      if (chunk->sp() < chunk->stack_size()) { \/\/ we are copying into a non-empty chunk\n@@ -1188,1 +1186,1 @@\n-        assert(sp_before < (chunk->stack_size() - chunk->argsize()), \"\");\n+        assert(chunk->sp() < (chunk->stack_size() - chunk->argsize()), \"\");\n@@ -1191,2 +1189,2 @@\n-        sp_before += stack_argsize; \/\/ we overlap; we'll overwrite the chunk's top frame's callee arguments\n-        assert(sp_before <= chunk->stack_size(), \"\");\n+        chunk_start_sp = chunk->sp() + _cont.argsize(); \/\/ we overlap; we'll overwrite the chunk's top frame's callee arguments\n+        assert(chunk_start_sp <= chunk->stack_size(), \"\");\n@@ -1194,1 +1192,1 @@\n-        chunk->set_max_size(chunk->max_size() + size - stack_argsize);\n+        chunk->set_max_size(chunk->max_size() + cont_size - _cont.argsize());\n@@ -1196,1 +1194,1 @@\n-        intptr_t* const bottom_sp = stack_bottom - stack_argsize;\n+        intptr_t* const bottom_sp = cont_stack_bottom - _cont.argsize();\n@@ -1202,2 +1200,3 @@\n-        DEBUG_ONLY(empty = true;)\n-        assert(sp_before == chunk->stack_size(), \"\");\n+        chunk_start_sp = chunk->sp();\n+\n+        assert(chunk_start_sp == chunk->stack_size(), \"\");\n@@ -1205,2 +1204,2 @@\n-        chunk->set_max_size(size);\n-        chunk->set_argsize(stack_argsize);\n+        chunk->set_max_size(cont_size);\n+        chunk->set_argsize(_cont.argsize());\n@@ -1209,2 +1208,0 @@\n-      DEBUG_ONLY(empty = true; allocated = true;)\n-\n@@ -1215,4 +1212,2 @@\n-      chunk = allocate_chunk(size + ContinuationHelper::frame_metadata);\n-      if (UNLIKELY(chunk == nullptr)) return false; \/\/ OOME\n-      if (UNLIKELY(!_thread->cont_fastpath()\n-                  || _barriers)) { \/\/ probably humongous\n+      chunk = allocate_chunk(cont_size + ContinuationHelper::frame_metadata);\n+      if (UNLIKELY(chunk == nullptr || !_thread->cont_fastpath() || _barriers)) { \/\/ OOME\/probably humongous\n@@ -1220,1 +1215,0 @@\n-        init_empty_chunk(chunk);\n@@ -1224,2 +1218,2 @@\n-      chunk->set_max_size(size);\n-      chunk->set_argsize(stack_argsize);\n+      chunk->set_max_size(cont_size);\n+      chunk->set_argsize(_cont.argsize());\n@@ -1229,2 +1223,2 @@\n-      sp_before = size + ContinuationHelper::frame_metadata;\n-      assert(sp_before == chunk->stack_size(), \"\");\n+      chunk_start_sp = cont_size + ContinuationHelper::frame_metadata;\n+      assert(chunk_start_sp == chunk->stack_size(), \"\");\n@@ -1232,1 +1226,1 @@\n-      DEBUG_ONLY(orig_chunk_sp = chunk->start_address() + sp_before;)\n+      DEBUG_ONLY(orig_chunk_sp = chunk->start_address() + chunk_start_sp;)\n@@ -1252,3 +1246,3 @@\n-      p2i((oopDesc*)chunk), chunk->stack_size(), sp_before, stack_argsize);\n-    assert(sp_before <= chunk->stack_size(), \"\");\n-    assert(sp_before >= size, \"\");\n+      p2i((oopDesc*)chunk), chunk->stack_size(), chunk_start_sp, _cont.argsize());\n+    assert(chunk_start_sp <= chunk->stack_size(), \"\");\n+    assert(chunk_start_sp >= cont_size, \"\");\n@@ -1256,2 +1250,2 @@\n-    const int sp_after = sp_before - size; \/\/ the chunk's new sp, after freeze\n-    assert(!is_chunk_available0 || orig_chunk_sp - (chunk->start_address() + sp_after) == is_chunk_available_size, \"\");\n+    const int chunk_new_sp = chunk_start_sp - cont_size; \/\/ the chunk's new sp, after freeze\n+    assert (!is_chunk_available0 || orig_chunk_sp - (chunk->start_address() + chunk_new_sp) == is_chunk_available_size, \"\");\n@@ -1259,1 +1253,1 @@\n-    intptr_t* chunk_top = chunk->start_address() + sp_after;\n+    intptr_t* chunk_top = chunk->start_address() + chunk_new_sp;\n@@ -1263,2 +1257,2 @@\n-                                p2i(chunk->start_address()), sp_after, p2i(chunk_top));\n-    intptr_t* from = stack_top - ContinuationHelper::frame_metadata;\n+                                p2i(chunk->start_address()), chunk_new_sp, p2i(chunk_top));\n+    intptr_t* from = cont_stack_top - ContinuationHelper::frame_metadata;\n@@ -1266,1 +1260,1 @@\n-    copy_to_chunk(from, to, size + ContinuationHelper::frame_metadata);\n+    copy_to_chunk(from, to, cont_size + ContinuationHelper::frame_metadata);\n@@ -1270,1 +1264,1 @@\n-    intptr_t* chunk_bottom_sp = chunk_top + size - stack_argsize;\n+    intptr_t* chunk_bottom_sp = chunk_top + cont_size - _cont.argsize();\n@@ -1276,1 +1270,1 @@\n-    chunk->set_sp(sp_after);\n+    chunk->set_sp(chunk_new_sp);\n@@ -1278,1 +1272,1 @@\n-    chunk->set_pc(*(address*)(stack_top - frame::sender_sp_ret_address_offset()));\n+    chunk->set_pc(*(address*)(cont_stack_top - frame::sender_sp_ret_address_offset()));\n@@ -1325,1 +1319,0 @@\n-    _top_address = f.sp();\n@@ -1594,1 +1587,0 @@\n-      patch_pd<FKind, true>(hf, caller);\n@@ -1597,1 +1589,0 @@\n-      patch_pd<FKind, false>(hf, caller);\n@@ -1599,0 +1590,3 @@\n+\n+    patch_pd<FKind>(hf, caller);\n+\n@@ -1812,1 +1806,4 @@\n-  void init_empty_chunk(stackChunkOop chunk) {\n+  void init_chunk(stackChunkOop chunk) {\n+    chunk->clear_flags();\n+    chunk->set_gc_mode(false);\n+    chunk->set_max_size(0);\n@@ -1850,6 +1847,1 @@\n-    \/\/ TODO PERF: maybe just memset 0, and only set non-zero fields.\n-    chunk->clear_flags();\n-    chunk->set_gc_mode(false);\n-    chunk->set_max_size(0);\n-    \/\/ chunk->set_pc(nullptr);\n-    \/\/ chunk->set_argsize(0);\n+    init_chunk(chunk);\n@@ -2253,1 +2245,1 @@\n-  template<typename FKind, bool bottom> inline void patch_pd(frame& f, const frame& sender);\n+  template<typename FKind> inline void patch_pd(frame& f, const frame& sender);\n@@ -2312,2 +2304,2 @@\n-    int sp = chunk->sp();\n-    int size = chunk->stack_size() - sp; \/\/ this initial size could be reduced if it's a partial thaw\n+    int chunk_start_sp = chunk->sp();\n+    int size = chunk->stack_size() - chunk_start_sp; \/\/ this initial size could be reduced if it's a partial thaw\n@@ -2316,1 +2308,1 @@\n-    intptr_t* const chunk_sp = chunk->start_address() + sp;\n+    intptr_t* const chunk_sp = chunk->start_address() + chunk_start_sp;\n@@ -2403,10 +2395,10 @@\n-  intptr_t* sp0 = stack_sp;\n-  ContinuationHelper::set_anchor(_thread, sp0);\n-  if (lt.develop_is_enabled()) {\n-    LogStream ls(lt);\n-    print_frames(_thread, &ls);\n-  }\n-  if (LoomDeoptAfterThaw) {\n-    do_deopt_after_thaw(_thread);\n-  }\n-  ContinuationHelper::clear_anchor(_thread);\n+    intptr_t* sp0 = stack_sp;\n+    ContinuationHelper::set_anchor(_thread, sp0);\n+    if (lt.develop_is_enabled()) {\n+      LogStream ls(lt);\n+      print_frames(_thread, &ls);\n+    }\n+    if (LoomDeoptAfterThaw) {\n+      do_deopt_after_thaw(_thread);\n+    }\n+    ContinuationHelper::clear_anchor(_thread);\n@@ -2476,1 +2468,3 @@\n-    if (!return_barrier) JVMTI_continue_cleanup(_thread);\n+    if (!return_barrier) {\n+      JVMTI_continue_cleanup(_thread);\n+    }\n@@ -2592,2 +2586,3 @@\n-  template<typename FKind, bool bottom>\n-  inline void patch(frame& f, const frame& caller) {\n+  template<typename FKind>\n+  inline void patch(frame& f, const frame& caller, bool bottom) {\n+    assert(!bottom || caller.fp() == _cont.entryFP(), \"\");\n@@ -2598,1 +2593,1 @@\n-    patch_pd<FKind, bottom>(f, caller); \/\/ TODO: reevaluate if and when this is necessary -only bottom & interpreted caller?\n+    patch_pd<FKind>(f, caller); \/\/ TODO: reevaluate if and when this is necessary -only bottom & interpreted caller?\n@@ -2652,1 +2647,1 @@\n-    bottom ? patch<Interpreted, true>(f, caller) : patch<Interpreted, false>(f, caller);\n+    patch<Interpreted>(f, caller, bottom);\n@@ -2703,1 +2698,0 @@\n-    int fsize = Compiled::size(hf);\n@@ -2705,1 +2699,1 @@\n-    fsize += added_argsize;\n+    int fsize = Compiled::size(hf) + added_argsize;\n@@ -2717,1 +2711,1 @@\n-    bottom ? patch<Compiled, true>(f, caller) : patch<Compiled, false>(f, caller);\n+    patch<Compiled>(f, caller, bottom);\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":95,"deletions":101,"binary":false,"changes":196,"status":"modified"}]}