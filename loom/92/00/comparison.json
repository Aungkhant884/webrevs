{"files":[{"patch":"@@ -42,0 +42,10 @@\n+inline int ContinuationHelper::frame_align_words(int size) {\n+  Unimplemented();\n+  return 0;\n+}\n+\n+inline intptr_t* ContinuationHelper::frame_align_pointer(intptr_t* sp) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n@@ -43,1 +53,1 @@\n-inline void ContinuationHelper::update_register_map(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map(const frame& f, RegisterMapT* map) {\n@@ -48,1 +58,1 @@\n-inline void ContinuationHelper::update_register_map_with_callee(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map_with_callee(const frame& f, RegisterMapT* map) {\n@@ -84,6 +94,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Freeze<ConfigT>::align_bottom(intptr_t* bottom, int argsize) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -169,6 +173,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align_chunk(intptr_t* vsp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,2 +278,2 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<true>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<false>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n@@ -281,1 +281,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -402,51 +402,0 @@\n-template <bool stub>\n-frame frame::sender_for_compiled_frame(RegisterMap* map) const {\n-  assert(map != NULL, \"map must be set\");\n-\n-  \/\/ frame owned by optimizing compiler\n-  assert(_cb->frame_size() >= 0, \"must have non-zero frame size\");\n-  intptr_t* sender_sp = unextended_sp() + _cb->frame_size();\n-  intptr_t* unextended_sp = sender_sp;\n-\n-  address sender_pc = (address) *(sender_sp - sender_sp_offset + return_addr_offset);\n-\n-  \/\/ This is the saved value of FP which may or may not really be an FP.\n-  \/\/ It is only an FP if the sender is an interpreter frame (or C1?).\n-  intptr_t** saved_fp_addr = (intptr_t**) (sender_sp - sender_sp_offset + link_offset);\n-\n-  if (map->update_map()) {\n-    \/\/ Tell GC to use argument oopmaps for some runtime stubs that need it.\n-    \/\/ For C1, the runtime stub might not have oop maps, so set this flag\n-    \/\/ outside of update_register_map.\n-    map->set_include_argument_oops(_cb->caller_must_gc_arguments(map->thread()));\n-    if (_cb->oop_maps() != NULL) {\n-      OopMapSet::update_register_map(this, map);\n-    }\n-\n-    \/\/ Since the prolog does the save and restore of FP there is no oopmap\n-    \/\/ for it so we must fill in its location as if there was an oopmap entry\n-    \/\/ since if our caller was compiled code there could be live jvm state in it.\n-    update_map_with_saved_link(map, saved_fp_addr);\n-  }\n-\n-  assert(sender_sp != sp(), \"must have changed\");\n-  return frame(sender_sp, unextended_sp, *saved_fp_addr, sender_pc);\n-}\n-\n-frame frame::sender(RegisterMap* map) const {\n-  \/\/ Default is we done have to follow them. The sender_for_xxx will\n-  \/\/ update it accordingly\n-  map->set_include_argument_oops(false);\n-\n-  if (is_entry_frame())       return sender_for_entry_frame(map);\n-  if (is_interpreted_frame()) return sender_for_interpreter_frame(map);\n-  assert(_cb == CodeCache::find_blob(pc()),\"Must be the same\");\n-\n-  if (_cb != NULL) {\n-    return sender_for_compiled_frame<false>(map);\n-  }\n-\n-  assert(false, \"should not be called for a C frame\");\n-  return frame();\n-}\n-\n@@ -551,2 +500,2 @@\n-template intptr_t* frame::interpreter_frame_tos_at<false>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<true >(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n@@ -554,1 +503,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.cpp","additions":7,"deletions":58,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-  template <bool relative = false>\n+  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -203,1 +203,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -249,1 +249,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -260,5 +260,0 @@\n-template <typename RegisterMapT>\n-void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n-  Unimplemented();\n-}\n-\n@@ -278,0 +273,56 @@\n+\/\/------------------------------------------------------------------------------\n+\/\/ frame::sender\n+\n+inline frame frame::sender(RegisterMap* map) const {\n+  \/\/ Default is we done have to follow them. The sender_for_xxx will\n+  \/\/ update it accordingly\n+  map->set_include_argument_oops(false);\n+\n+  if (is_entry_frame())       return sender_for_entry_frame(map);\n+  if (is_interpreted_frame()) return sender_for_interpreter_frame(map);\n+  assert(_cb == CodeCache::find_blob(pc()),\"Must be the same\");\n+\n+  if (_cb != NULL) return sender_for_compiled_frame(map);\n+\n+  assert(false, \"should not be called for a C frame\");\n+  return frame();\n+}\n+\n+inline frame frame::sender_for_compiled_frame(RegisterMap* map) const {\n+  assert(map != NULL, \"map must be set\");\n+\n+  \/\/ frame owned by optimizing compiler\n+  assert(_cb->frame_size() >= 0, \"must have non-zero frame size\");\n+  intptr_t* sender_sp = unextended_sp() + _cb->frame_size();\n+  intptr_t* unextended_sp = sender_sp;\n+\n+  address sender_pc = (address) *(sender_sp - sender_sp_offset + return_addr_offset);\n+\n+  \/\/ This is the saved value of FP which may or may not really be an FP.\n+  \/\/ It is only an FP if the sender is an interpreter frame (or C1?).\n+  intptr_t** saved_fp_addr = (intptr_t**) (sender_sp - sender_sp_offset + link_offset);\n+\n+  if (map->update_map()) {\n+    \/\/ Tell GC to use argument oopmaps for some runtime stubs that need it.\n+    \/\/ For C1, the runtime stub might not have oop maps, so set this flag\n+    \/\/ outside of update_register_map.\n+    map->set_include_argument_oops(_cb->caller_must_gc_arguments(map->thread()));\n+    if (_cb->oop_maps() != NULL) {\n+      OopMapSet::update_register_map(this, map);\n+    }\n+\n+    \/\/ Since the prolog does the save and restore of FP there is no oopmap\n+    \/\/ for it so we must fill in its location as if there was an oopmap entry\n+    \/\/ since if our caller was compiled code there could be live jvm state in it.\n+    update_map_with_saved_link(map, saved_fp_addr);\n+  }\n+\n+  assert(sender_sp != sp(), \"must have changed\");\n+  return frame(sender_sp, unextended_sp, *saved_fp_addr, sender_pc);\n+}\n+\n+template <typename RegisterMapT>\n+void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":59,"deletions":8,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -76,1 +76,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/arm\/frame_helpers_arm.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-template <bool mixed>\n-inline bool StackChunkFrameStream<mixed>::is_in_frame(void* p0) const {\n+template <chunk_frames frame_kind>\n+inline bool StackChunkFrameStream<frame_kind>::is_in_frame(void* p0) const {\n@@ -50,2 +50,2 @@\n-template <bool mixed>\n-inline frame StackChunkFrameStream<mixed>::to_frame() const {\n+template <chunk_frames frame_kind>\n+inline frame StackChunkFrameStream<frame_kind>::to_frame() const {\n@@ -56,2 +56,2 @@\n-template <bool mixed>\n-inline address StackChunkFrameStream<mixed>::get_pc() const {\n+template <chunk_frames frame_kind>\n+inline address StackChunkFrameStream<frame_kind>::get_pc() const {\n@@ -62,2 +62,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::fp() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::fp() const {\n@@ -68,2 +68,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::derelativize(int offset) const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::derelativize(int offset) const {\n@@ -74,2 +74,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::unextended_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::unextended_sp_for_interpreter_frame() const {\n@@ -80,2 +80,2 @@\n-template <bool mixed>\n-intptr_t* StackChunkFrameStream<mixed>::next_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+intptr_t* StackChunkFrameStream<frame_kind>::next_sp_for_interpreter_frame() const {\n@@ -86,2 +86,2 @@\n-template <bool mixed>\n-inline void StackChunkFrameStream<mixed>::next_for_interpreter_frame() {\n+template <chunk_frames frame_kind>\n+inline void StackChunkFrameStream<frame_kind>::next_for_interpreter_frame() {\n@@ -91,2 +91,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_size() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_size() const {\n@@ -97,2 +97,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_stack_argsize() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_stack_argsize() const {\n@@ -103,2 +103,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_num_oops() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_num_oops() const {\n@@ -119,1 +119,1 @@\n-inline void StackChunkFrameStream<true>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::MIXED>::update_reg_map_pd(RegisterMap* map) {\n@@ -125,1 +125,1 @@\n-inline void StackChunkFrameStream<false>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::COMPILED_ONLY>::update_reg_map_pd(RegisterMap* map) {\n@@ -129,1 +129,1 @@\n-template <bool mixed>\n+template <chunk_frames frame_kind>\n@@ -131,1 +131,1 @@\n-inline void StackChunkFrameStream<mixed>::update_reg_map_pd(RegisterMapT* map) {}\n+inline void StackChunkFrameStream<frame_kind>::update_reg_map_pd(RegisterMapT* map) {}\n","filename":"src\/hotspot\/cpu\/arm\/instanceStackChunkKlass_arm.inline.hpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -42,0 +42,10 @@\n+inline int ContinuationHelper::frame_align_words(int size) {\n+  Unimplemented();\n+  return 0;\n+}\n+\n+inline intptr_t* ContinuationHelper::frame_align_pointer(intptr_t* sp) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n@@ -43,1 +53,1 @@\n-inline void ContinuationHelper::update_register_map(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map(const frame& f, RegisterMapT* map) {\n@@ -48,1 +58,1 @@\n-inline void ContinuationHelper::update_register_map_with_callee(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map_with_callee(const frame& f, RegisterMapT* map) {\n@@ -84,6 +94,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Freeze<ConfigT>::align_bottom(intptr_t* bottom, int argsize) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -169,6 +173,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align_chunk(intptr_t* vsp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -76,1 +76,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/ppc\/frame_helpers_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -222,22 +222,0 @@\n-template <bool stub>\n-frame frame::sender_for_compiled_frame(RegisterMap *map) const {\n-  assert(map != NULL, \"map must be set\");\n-\n-  \/\/ Frame owned by compiler.\n-  address pc = *compiled_sender_pc_addr(_cb);\n-  frame caller(compiled_sender_sp(_cb), pc);\n-\n-  \/\/ Now adjust the map.\n-\n-  \/\/ Get the rest.\n-  if (map->update_map()) {\n-    \/\/ Tell GC to use argument oopmaps for some runtime stubs that need it.\n-    map->set_include_argument_oops(_cb->caller_must_gc_arguments(map->thread()));\n-    if (_cb->oop_maps() != NULL) {\n-      OopMapSet::update_register_map(this, map);\n-    }\n-  }\n-\n-  return caller;\n-}\n-\n@@ -252,27 +230,0 @@\n-frame frame::sender_raw(RegisterMap* map) const {\n-  \/\/ Default is we do have to follow them. The sender_for_xxx will\n-  \/\/ update it accordingly.\n-  map->set_include_argument_oops(false);\n-\n-  if (is_entry_frame())       return sender_for_entry_frame(map);\n-  if (is_interpreted_frame()) return sender_for_interpreter_frame(map);\n-  assert(_cb == CodeCache::find_blob(pc()),\"Must be the same\");\n-\n-  if (_cb != NULL) {\n-    return sender_for_compiled_frame<false>(map);\n-  }\n-  \/\/ Must be native-compiled frame, i.e. the marshaling code for native\n-  \/\/ methods that exists in the core system.\n-  return frame(sender_sp(), sender_pc());\n-}\n-\n-frame frame::sender(RegisterMap* map) const {\n-  frame result = sender_raw(map);\n-\n-  if (map->process_frames()) {\n-    StackWatermarkSet::on_iteration(map->thread(), result);\n-  }\n-\n-  return result;\n-}\n-\n@@ -446,2 +397,2 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<true>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<false>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n@@ -449,1 +400,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -454,2 +405,2 @@\n-template intptr_t* frame::interpreter_frame_tos_at<false>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<true >(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n@@ -457,1 +408,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":6,"deletions":55,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -404,1 +404,1 @@\n-  template <bool relative = false>\n+  template <addressing pointers = addressing::ABSOLUTE>\n@@ -429,1 +429,1 @@\n-  frame sender_raw(RegisterMap* map) const;\n+  inline frame sender_raw(RegisterMap* map) const;\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -180,1 +180,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -231,1 +231,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -242,5 +242,0 @@\n-template <typename RegisterMapT>\n-void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n-  Unimplemented();\n-}\n-\n@@ -260,0 +255,55 @@\n+\/\/------------------------------------------------------------------------------\n+\/\/ frame::sender\n+\n+frame frame::sender(RegisterMap* map) const {\n+  frame result = sender_raw(map);\n+\n+  if (map->process_frames()) {\n+    StackWatermarkSet::on_iteration(map->thread(), result);\n+  }\n+\n+  return result;\n+}\n+\n+inline frame frame::sender_raw(RegisterMap* map) const {\n+  \/\/ Default is we do have to follow them. The sender_for_xxx will\n+  \/\/ update it accordingly.\n+  map->set_include_argument_oops(false);\n+\n+  if (is_entry_frame())       return sender_for_entry_frame(map);\n+  if (is_interpreted_frame()) return sender_for_interpreter_frame(map);\n+  assert(_cb == CodeCache::find_blob(pc()),\"Must be the same\");\n+\n+  if (_cb != NULL) return sender_for_compiled_frame(map);\n+\n+  \/\/ Must be native-compiled frame, i.e. the marshaling code for native\n+  \/\/ methods that exists in the core system.\n+  return frame(sender_sp(), sender_pc());\n+}\n+\n+inline frame frame::sender_for_compiled_frame(RegisterMap *map) const {\n+  assert(map != NULL, \"map must be set\");\n+\n+  \/\/ Frame owned by compiler.\n+  address pc = *compiled_sender_pc_addr(_cb);\n+  frame caller(compiled_sender_sp(_cb), pc);\n+\n+  \/\/ Now adjust the map.\n+\n+  \/\/ Get the rest.\n+  if (map->update_map()) {\n+    \/\/ Tell GC to use argument oopmaps for some runtime stubs that need it.\n+    map->set_include_argument_oops(_cb->caller_must_gc_arguments(map->thread()));\n+    if (_cb->oop_maps() != NULL) {\n+      OopMapSet::update_register_map(this, map);\n+    }\n+  }\n+\n+  return caller;\n+}\n+\n+template <typename RegisterMapT>\n+void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":58,"deletions":8,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-template <bool mixed>\n-inline bool StackChunkFrameStream<mixed>::is_in_frame(void* p0) const {\n+template <chunk_frames frame_kind>\n+inline bool StackChunkFrameStream<frame_kind>::is_in_frame(void* p0) const {\n@@ -50,2 +50,2 @@\n-template <bool mixed>\n-inline frame StackChunkFrameStream<mixed>::to_frame() const {\n+template <chunk_frames frame_kind>\n+inline frame StackChunkFrameStream<frame_kind>::to_frame() const {\n@@ -56,2 +56,2 @@\n-template <bool mixed>\n-inline address StackChunkFrameStream<mixed>::get_pc() const {\n+template <chunk_frames frame_kind>\n+inline address StackChunkFrameStream<frame_kind>::get_pc() const {\n@@ -62,2 +62,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::fp() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::fp() const {\n@@ -68,2 +68,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::derelativize(int offset) const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::derelativize(int offset) const {\n@@ -74,2 +74,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::unextended_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::unextended_sp_for_interpreter_frame() const {\n@@ -80,2 +80,2 @@\n-template <bool mixed>\n-intptr_t* StackChunkFrameStream<mixed>::next_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+intptr_t* StackChunkFrameStream<frame_kind>::next_sp_for_interpreter_frame() const {\n@@ -86,2 +86,2 @@\n-template <bool mixed>\n-inline void StackChunkFrameStream<mixed>::next_for_interpreter_frame() {\n+template <chunk_frames frame_kind>\n+inline void StackChunkFrameStream<frame_kind>::next_for_interpreter_frame() {\n@@ -91,2 +91,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_size() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_size() const {\n@@ -97,2 +97,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_stack_argsize() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_stack_argsize() const {\n@@ -103,2 +103,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_num_oops() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_num_oops() const {\n@@ -119,1 +119,1 @@\n-inline void StackChunkFrameStream<true>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::MIXED>::update_reg_map_pd(RegisterMap* map) {\n@@ -125,1 +125,1 @@\n-inline void StackChunkFrameStream<false>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::COMPILED_ONLY>::update_reg_map_pd(RegisterMap* map) {\n@@ -129,1 +129,1 @@\n-template <bool mixed>\n+template <chunk_frames frame_kind>\n@@ -131,1 +131,1 @@\n-inline void StackChunkFrameStream<mixed>::update_reg_map_pd(RegisterMapT* map) {}\n+inline void StackChunkFrameStream<frame_kind>::update_reg_map_pd(RegisterMapT* map) {}\n","filename":"src\/hotspot\/cpu\/ppc\/instanceStackChunkKlass_ppc.inline.hpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -42,0 +42,10 @@\n+inline int ContinuationHelper::frame_align_words(int size) {\n+  Unimplemented();\n+  return 0;\n+}\n+\n+inline intptr_t* ContinuationHelper::frame_align_pointer(intptr_t* sp) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n@@ -43,1 +53,1 @@\n-inline void ContinuationHelper::update_register_map(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map(const frame& f, RegisterMapT* map) {\n@@ -48,1 +58,1 @@\n-inline void ContinuationHelper::update_register_map_with_callee(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map_with_callee(const frame& f, RegisterMapT* map) {\n@@ -84,6 +94,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Freeze<ConfigT>::align_bottom(intptr_t* bottom, int argsize) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -169,6 +173,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align_chunk(intptr_t* vsp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -76,1 +76,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/s390\/frame_helpers_s390.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -233,22 +233,0 @@\n-template <bool stub>\n-frame frame::sender_for_compiled_frame(RegisterMap *map) const {\n-  assert(map != NULL, \"map must be set\");\n-  \/\/ Frame owned by compiler.\n-\n-  address pc = *compiled_sender_pc_addr(_cb);\n-  frame caller(compiled_sender_sp(_cb), pc);\n-\n-  \/\/ Now adjust the map.\n-\n-  \/\/ Get the rest.\n-  if (map->update_map()) {\n-    \/\/ Tell GC to use argument oopmaps for some runtime stubs that need it.\n-    map->set_include_argument_oops(_cb->caller_must_gc_arguments(map->thread()));\n-    if (_cb->oop_maps() != NULL) {\n-      OopMapSet::update_register_map(this, map);\n-    }\n-  }\n-\n-  return caller;\n-}\n-\n@@ -263,20 +241,0 @@\n-frame frame::sender(RegisterMap* map) const {\n-  \/\/ Default is we don't have to follow them. The sender_for_xxx will\n-  \/\/ update it accordingly.\n-  map->set_include_argument_oops(false);\n-\n-  if (is_entry_frame()) {\n-    return sender_for_entry_frame(map);\n-  }\n-  if (is_interpreted_frame()) {\n-    return sender_for_interpreter_frame(map);\n-  }\n-  assert(_cb == CodeCache::find_blob(pc()),\"Must be the same\");\n-  if (_cb != NULL) {\n-    return sender_for_compiled_frame<false>(map);\n-  }\n-  \/\/ Must be native-compiled frame, i.e. the marshaling code for native\n-  \/\/ methods that exists in the core system.\n-  return frame(sender_sp(), sender_pc());\n-}\n-\n@@ -689,2 +647,2 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<true>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<false>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n@@ -692,1 +650,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -697,2 +655,2 @@\n-template intptr_t* frame::interpreter_frame_tos_at<false>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<true >(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n@@ -700,1 +658,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":6,"deletions":48,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -489,1 +489,1 @@\n-  template <bool relative = false>\n+  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -205,1 +205,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -298,1 +298,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -309,5 +309,0 @@\n-template <typename RegisterMapT>\n-void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n-  Unimplemented();\n-}\n-\n@@ -327,0 +322,48 @@\n+\/\/------------------------------------------------------------------------------\n+\/\/ frame::sender\n+\n+inline frame frame::sender(RegisterMap* map) const {\n+  \/\/ Default is we don't have to follow them. The sender_for_xxx will\n+  \/\/ update it accordingly.\n+  map->set_include_argument_oops(false);\n+\n+  if (is_entry_frame()) {\n+    return sender_for_entry_frame(map);\n+  }\n+  if (is_interpreted_frame()) {\n+    return sender_for_interpreter_frame(map);\n+  }\n+  assert(_cb == CodeCache::find_blob(pc()),\"Must be the same\");\n+  if (_cb != NULL) return sender_for_compiled_frame(map);\n+\n+  \/\/ Must be native-compiled frame, i.e. the marshaling code for native\n+  \/\/ methods that exists in the core system.\n+  return frame(sender_sp(), sender_pc());\n+}\n+\n+inline frame frame::sender_for_compiled_frame(RegisterMap *map) const {\n+  assert(map != NULL, \"map must be set\");\n+  \/\/ Frame owned by compiler.\n+\n+  address pc = *compiled_sender_pc_addr(_cb);\n+  frame caller(compiled_sender_sp(_cb), pc);\n+\n+  \/\/ Now adjust the map.\n+\n+  \/\/ Get the rest.\n+  if (map->update_map()) {\n+    \/\/ Tell GC to use argument oopmaps for some runtime stubs that need it.\n+    map->set_include_argument_oops(_cb->caller_must_gc_arguments(map->thread()));\n+    if (_cb->oop_maps() != NULL) {\n+      OopMapSet::update_register_map(this, map);\n+    }\n+  }\n+\n+  return caller;\n+}\n+\n+template <typename RegisterMapT>\n+void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":51,"deletions":8,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-template <bool mixed>\n-inline bool StackChunkFrameStream<mixed>::is_in_frame(void* p0) const {\n+template <chunk_frames frame_kind>\n+inline bool StackChunkFrameStream<frame_kind>::is_in_frame(void* p0) const {\n@@ -50,2 +50,2 @@\n-template <bool mixed>\n-inline frame StackChunkFrameStream<mixed>::to_frame() const {\n+template <chunk_frames frame_kind>\n+inline frame StackChunkFrameStream<frame_kind>::to_frame() const {\n@@ -56,2 +56,2 @@\n-template <bool mixed>\n-inline address StackChunkFrameStream<mixed>::get_pc() const {\n+template <chunk_frames frame_kind>\n+inline address StackChunkFrameStream<frame_kind>::get_pc() const {\n@@ -62,2 +62,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::fp() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::fp() const {\n@@ -68,2 +68,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::derelativize(int offset) const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::derelativize(int offset) const {\n@@ -74,2 +74,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::unextended_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::unextended_sp_for_interpreter_frame() const {\n@@ -80,2 +80,2 @@\n-template <bool mixed>\n-intptr_t* StackChunkFrameStream<mixed>::next_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+intptr_t* StackChunkFrameStream<frame_kind>::next_sp_for_interpreter_frame() const {\n@@ -86,2 +86,2 @@\n-template <bool mixed>\n-inline void StackChunkFrameStream<mixed>::next_for_interpreter_frame() {\n+template <chunk_frames frame_kind>\n+inline void StackChunkFrameStream<frame_kind>::next_for_interpreter_frame() {\n@@ -91,2 +91,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_size() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_size() const {\n@@ -97,2 +97,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_stack_argsize() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_stack_argsize() const {\n@@ -103,2 +103,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_num_oops() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_num_oops() const {\n@@ -119,1 +119,1 @@\n-inline void StackChunkFrameStream<true>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::MIXED>::update_reg_map_pd(RegisterMap* map) {\n@@ -125,1 +125,1 @@\n-inline void StackChunkFrameStream<false>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::COMPILED_ONLY>::update_reg_map_pd(RegisterMap* map) {\n@@ -129,1 +129,1 @@\n-template <bool mixed>\n+template <chunk_frames frame_kind>\n@@ -131,1 +131,1 @@\n-inline void StackChunkFrameStream<mixed>::update_reg_map_pd(RegisterMapT* map) {}\n+inline void StackChunkFrameStream<frame_kind>::update_reg_map_pd(RegisterMapT* map) {}\n","filename":"src\/hotspot\/cpu\/s390\/instanceStackChunkKlass_s390.inline.hpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -42,0 +42,10 @@\n+inline int ContinuationHelper::frame_align_words(int size) {\n+  Unimplemented();\n+  return 0;\n+}\n+\n+inline intptr_t* ContinuationHelper::frame_align_pointer(intptr_t* sp) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n@@ -43,1 +53,1 @@\n-inline void ContinuationHelper::update_register_map(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map(const frame& f, RegisterMapT* map) {\n@@ -48,1 +58,1 @@\n-inline void ContinuationHelper::update_register_map_with_callee(RegisterMapT* map, const frame& f) {\n+inline void ContinuationHelper::update_register_map_with_callee(const frame& f, RegisterMapT* map) {\n@@ -84,6 +94,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Freeze<ConfigT>::align_bottom(intptr_t* bottom, int argsize) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -169,6 +173,0 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align_chunk(intptr_t* vsp) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -76,1 +76,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/zero\/frame_helpers_zero.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,16 +81,0 @@\n-frame frame::sender(RegisterMap* map) const {\n-  \/\/ Default is not to follow arguments; the various\n-  \/\/ sender_for_xxx methods update this accordingly.\n-  map->set_include_argument_oops(false);\n-\n-  frame result = zeroframe()->is_entry_frame() ?\n-                 sender_for_entry_frame(map) :\n-                 sender_for_nonentry_frame(map);\n-\n-  if (map->process_frames()) {\n-    StackWatermarkSet::on_iteration(map->thread(), result);\n-  }\n-\n-  return result;\n-}\n-\n@@ -102,2 +86,2 @@\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<true>() const;\n-template BasicObjectLock* frame::interpreter_frame_monitor_end<false>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::ABSOLUTE>() const;\n+template BasicObjectLock* frame::interpreter_frame_monitor_end<frame::addressing::RELATIVE>() const;\n@@ -105,1 +89,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -243,2 +227,2 @@\n-template intptr_t* frame::interpreter_frame_tos_at<false>(jint offset) const;\n-template intptr_t* frame::interpreter_frame_tos_at<true >(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::ABSOLUTE>(jint offset) const;\n+template intptr_t* frame::interpreter_frame_tos_at<frame::addressing::RELATIVE>(jint offset) const;\n@@ -246,1 +230,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-  template <bool relative = false>\n+  template <addressing pointers = addressing::ABSOLUTE>\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -132,1 +132,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -186,1 +186,1 @@\n-template <bool relative>\n+template <frame::addressing pointers>\n@@ -197,5 +197,0 @@\n-template <typename RegisterMapT>\n-void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n-  Unimplemented();\n-}\n-\n@@ -227,0 +222,24 @@\n+\/\/------------------------------------------------------------------------------\n+\/\/ frame::sender\n+\n+inline frame frame::sender(RegisterMap* map) const {\n+  \/\/ Default is not to follow arguments; the various\n+  \/\/ sender_for_xxx methods update this accordingly.\n+  map->set_include_argument_oops(false);\n+\n+  frame result = zeroframe()->is_entry_frame() ?\n+                 sender_for_entry_frame(map) :\n+                 sender_for_nonentry_frame(map);\n+\n+  if (map->process_frames()) {\n+    StackWatermarkSet::on_iteration(map->thread(), result);\n+  }\n+\n+  return result;\n+}\n+\n+template <typename RegisterMapT>\n+void frame::update_map_with_saved_link(RegisterMapT* map, intptr_t** link_addr) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.inline.hpp","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-template <bool mixed>\n-inline bool StackChunkFrameStream<mixed>::is_in_frame(void* p0) const {\n+template <chunk_frames frame_kind>\n+inline bool StackChunkFrameStream<frame_kind>::is_in_frame(void* p0) const {\n@@ -50,2 +50,2 @@\n-template <bool mixed>\n-inline frame StackChunkFrameStream<mixed>::to_frame() const {\n+template <chunk_frames frame_kind>\n+inline frame StackChunkFrameStream<frame_kind>::to_frame() const {\n@@ -56,2 +56,2 @@\n-template <bool mixed>\n-inline address StackChunkFrameStream<mixed>::get_pc() const {\n+template <chunk_frames frame_kind>\n+inline address StackChunkFrameStream<frame_kind>::get_pc() const {\n@@ -62,2 +62,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::fp() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::fp() const {\n@@ -68,2 +68,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::derelativize(int offset) const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::derelativize(int offset) const {\n@@ -74,2 +74,2 @@\n-template <bool mixed>\n-inline intptr_t* StackChunkFrameStream<mixed>::unextended_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+inline intptr_t* StackChunkFrameStream<frame_kind>::unextended_sp_for_interpreter_frame() const {\n@@ -80,2 +80,2 @@\n-template <bool mixed>\n-intptr_t* StackChunkFrameStream<mixed>::next_sp_for_interpreter_frame() const {\n+template <chunk_frames frame_kind>\n+intptr_t* StackChunkFrameStream<frame_kind>::next_sp_for_interpreter_frame() const {\n@@ -86,2 +86,2 @@\n-template <bool mixed>\n-inline void StackChunkFrameStream<mixed>::next_for_interpreter_frame() {\n+template <chunk_frames frame_kind>\n+inline void StackChunkFrameStream<frame_kind>::next_for_interpreter_frame() {\n@@ -91,2 +91,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_size() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_size() const {\n@@ -97,2 +97,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_stack_argsize() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_stack_argsize() const {\n@@ -103,2 +103,2 @@\n-template <bool mixed>\n-inline int StackChunkFrameStream<mixed>::interpreter_frame_num_oops() const {\n+template <chunk_frames frame_kind>\n+inline int StackChunkFrameStream<frame_kind>::interpreter_frame_num_oops() const {\n@@ -119,1 +119,1 @@\n-inline void StackChunkFrameStream<true>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::MIXED>::update_reg_map_pd(RegisterMap* map) {\n@@ -125,1 +125,1 @@\n-inline void StackChunkFrameStream<false>::update_reg_map_pd(RegisterMap* map) {\n+inline void StackChunkFrameStream<chunk_frames::COMPILED_ONLY>::update_reg_map_pd(RegisterMap* map) {\n@@ -129,1 +129,1 @@\n-template <bool mixed>\n+template <chunk_frames frame_kind>\n@@ -131,1 +131,1 @@\n-inline void StackChunkFrameStream<mixed>::update_reg_map_pd(RegisterMapT* map) {}\n+inline void StackChunkFrameStream<frame_kind>::update_reg_map_pd(RegisterMapT* map) {}\n","filename":"src\/hotspot\/cpu\/zero\/instanceStackChunkKlass_zero.inline.hpp","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"}]}