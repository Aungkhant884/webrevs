{"files":[{"patch":"@@ -50,1 +50,0 @@\n-import java.util.concurrent.ThreadPoolExecutor;\n@@ -261,21 +260,0 @@\n-\n-    final private void ScheduleContinuation() {\n-        Thread carrier = Thread.currentCarrierThread();\n-        Thread current = Thread.currentThread();\n-        boolean switchToCarrier = Thread.currentThread().isVirtual() && (scheduler instanceof ThreadPoolExecutor);\n-\n-        if (switchToCarrier) {\n-            \/\/switch to carrier thread\n-            carrier.setCurrentThread(carrier);\n-        }\n-\n-        try {\n-            scheduler.execute(runContinuation);\n-        } finally {\n-            if (switchToCarrier) {\n-               \/\/ switch back to virtual thread\n-               carrier.setCurrentThread(current);\n-            }\n-        }\n-    }\n-\n@@ -292,1 +270,1 @@\n-                ScheduleContinuation();\n+                scheduler.execute(runContinuation);\n@@ -685,1 +663,11 @@\n-                submitRunContinuation(tryPush);\n+                if (Thread.currentThread() instanceof VirtualThread vthread) {\n+                    Thread carrier = vthread.carrierThread;\n+                    carrier.setCurrentThread(carrier);\n+                    try {\n+                        submitRunContinuation(tryPush);\n+                    } finally {\n+                        carrier.setCurrentThread(vthread);\n+                    }\n+                } else {\n+                    submitRunContinuation(tryPush);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -37,10 +37,11 @@\n-        ExecutorService executor = Executors.newFixedThreadPool(8);\n-        int vt_count = 300;\n-        Thread[] vts = new Thread[vt_count];\n-        Runnable target = new Runnable() {\n-            public void run() {\n-                int myIndex = -1;\n-                for (int i = 0; i < vt_count; i++) {\n-                    if (vts[i] == Thread.currentThread()) {\n-                        myIndex = i;\n-                        break;\n+        try (ExecutorService scheduler = Executors.newFixedThreadPool(8)) {\n+            int vt_count = 300;\n+            Thread[] vts = new Thread[vt_count];\n+            Runnable target = new Runnable() {\n+                public void run() {\n+                    int myIndex = -1;\n+                    for (int i = 0; i < vt_count; i++) {\n+                        if (vts[i] == Thread.currentThread()) {\n+                            myIndex = i;\n+                            break;\n+                        }\n@@ -48,1 +49,0 @@\n-                }\n@@ -50,3 +50,3 @@\n-                if (myIndex > 0) {\n-                    LockSupport.unpark(vts[myIndex - 1]);\n-                }\n+                    if (myIndex > 0) {\n+                        LockSupport.unpark(vts[myIndex - 1]);\n+                    }\n@@ -54,2 +54,3 @@\n-                if (myIndex != (vt_count - 1)) {\n-                    LockSupport.park();\n+                    if (myIndex != (vt_count - 1)) {\n+                        LockSupport.park();\n+                    }\n@@ -57,0 +58,8 @@\n+            };\n+\n+            ThreadFactory f = Thread.ofVirtual().scheduler(scheduler).name(\"vt\", 0).factory();\n+            for (int i = 0; i < vt_count; i++) {\n+                vts[i] = f.newThread(target);\n+            }\n+            for (int i = 0; i < vt_count; i++) {\n+                vts[i].start();\n@@ -58,8 +67,0 @@\n-        };\n-        ThreadFactory f = Thread.ofVirtual().scheduler(executor).name(\"vt\", 0).factory();\n-        for (int i = 0; i < vt_count; i++) {\n-            vts[i] = f.newThread(target);\n-        }\n-        for (int i = 0; i < vt_count; i++) {\n-            vts[i].start();\n-        }\n@@ -67,2 +68,3 @@\n-        for (int i = 0; i < vt_count; i++) {\n-            vts[i].join();\n+            for (int i = 0; i < vt_count; i++) {\n+                vts[i].join();\n+            }\n@@ -70,2 +72,0 @@\n-        executor.shutdown();\n-        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n","filename":"test\/jdk\/java\/lang\/Thread\/virtual\/ParkWithFixedThreadPool.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"}]}