{"files":[{"patch":"@@ -64,1 +64,1 @@\n-static void setBP(jvmtiEnv *jvmti, JNIEnv *env, jclass klass) {\n+static void setBP(jvmtiEnv *jvmti, JNIEnv *jni, jclass klass) {\n@@ -70,1 +70,1 @@\n-    mid = env->GetMethodID(klass, METHODS[i][0], METHODS[i][1]);\n+    mid = jni->GetMethodID(klass, METHODS[i][0], METHODS[i][1]);\n@@ -72,1 +72,1 @@\n-      env->FatalError(\"failed to get ID for the java method\\n\");\n+      jni->FatalError(\"failed to get ID for the java method\\n\");\n@@ -77,1 +77,1 @@\n-      env->FatalError(\"failed to set breakpoint\\n\");\n+      jni->FatalError(\"failed to set breakpoint\\n\");\n@@ -84,1 +84,1 @@\n-ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jclass klass) {\n@@ -94,1 +94,1 @@\n-      env->FatalError(\"failed to obtain a class signature\\n\");\n+      jni->FatalError(\"failed to obtain a class signature\\n\");\n@@ -99,1 +99,1 @@\n-      setBP(jvmti, env, klass);\n+      setBP(jvmti, jni, klass);\n@@ -107,1 +107,1 @@\n-Breakpoint(jvmtiEnv *jvmti, JNIEnv *jni_env, jthread thread,\n+Breakpoint(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread,\n@@ -203,1 +203,1 @@\n-VMStart(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+VMStart(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -212,1 +212,1 @@\n-VMDeath(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -222,1 +222,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n@@ -251,1 +251,1 @@\n-  \/* create JVMTI environment *\/\n+  \/* create JVMTI jniironment *\/\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Breakpoint\/breakpoint001\/libbreakpoint.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -97,1 +97,1 @@\n-    jni_env->FatalError(\"failed to enter a raw monitor\\n\");\n+    jni->FatalError(\"failed to enter a raw monitor\\n\");\n@@ -101,1 +101,1 @@\n-static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -103,1 +103,1 @@\n-    jni_env->FatalError(\"failed to exit a raw monitor\\n\");\n+    jni->FatalError(\"failed to exit a raw monitor\\n\");\n@@ -109,1 +109,1 @@\n-ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jclass klass) {\n@@ -114,1 +114,1 @@\n-  lock(jvmti, env);\n+  lock(jvmti, jni);\n@@ -120,1 +120,1 @@\n-    unlock(jvmti, env);\n+    unlock(jvmti, jni);\n@@ -142,1 +142,1 @@\n-  unlock(jvmti, env);\n+  unlock(jvmti, jni);\n@@ -148,1 +148,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n@@ -180,1 +180,1 @@\n-  \/* create JVMTI environment *\/\n+  \/* create JVMTI jniironment *\/\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassLoad\/classload001\/libclassload.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-void JNICALL ClassPrepare(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL ClassPrepare(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -270,1 +270,1 @@\n-Java_classprep001_getReady(JNIEnv *env, jclass cls) {\n+Java_classprep001_getReady(JNIEnv *jni, jclass cls) {\n@@ -298,1 +298,1 @@\n-Java_classprep001_check(JNIEnv *env, jclass cls) {\n+Java_classprep001_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassPrepare\/classprep001\/libclassprep.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-Exception(jvmtiEnv *jvmti, JNIEnv *env, jthread thr,\n+Exception(jvmtiEnv *jvmti, JNIEnv *jni, jthread thr,\n@@ -91,1 +91,1 @@\n-  cls = env->GetObjectClass(exception);\n+  cls = jni->GetObjectClass(exception);\n@@ -243,1 +243,1 @@\n-Java_exception001_check(JNIEnv *env, jclass cls) {\n+Java_exception001_check(JNIEnv *jni, jclass cls) {\n@@ -258,1 +258,1 @@\n-  clz = env->FindClass(\"exception001c\");\n+  clz = jni->FindClass(\"exception001c\");\n@@ -263,1 +263,1 @@\n-  clz = env->FindClass(\"exception001b\");\n+  clz = jni->FindClass(\"exception001b\");\n@@ -268,1 +268,1 @@\n-  clz = env->FindClass(\"exception001a\");\n+  clz = jni->FindClass(\"exception001a\");\n@@ -273,1 +273,1 @@\n-  mid = env->GetStaticMethodID(clz, \"run\", \"()V\");\n+  mid = jni->GetStaticMethodID(clz, \"run\", \"()V\");\n@@ -296,1 +296,1 @@\n-  env->CallStaticVoidMethod(clz, mid);\n+  jni->CallStaticVoidMethod(clz, mid);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Exception\/exception001\/libexception.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-ExceptionCatch(jvmtiEnv *jvmti, JNIEnv *env, jthread thr,\n+ExceptionCatch(jvmtiEnv *jvmti, JNIEnv *jni, jthread thr,\n@@ -79,1 +79,1 @@\n-    cls = env->GetObjectClass(exception);\n+    cls = jni->GetObjectClass(exception);\n@@ -199,1 +199,1 @@\n-Java_excatch001_check(JNIEnv *env, jclass cls) {\n+Java_excatch001_check(JNIEnv *jni, jclass cls) {\n@@ -213,1 +213,1 @@\n-    clz = env->FindClass(\"excatch001c\");\n+    clz = jni->FindClass(\"excatch001c\");\n@@ -218,1 +218,1 @@\n-    clz = env->FindClass(\"excatch001b\");\n+    clz = jni->FindClass(\"excatch001b\");\n@@ -223,1 +223,1 @@\n-    clz = env->FindClass(\"excatch001a\");\n+    clz = jni->FindClass(\"excatch001a\");\n@@ -228,1 +228,1 @@\n-    mid = env->GetStaticMethodID(clz, \"run\", \"()V\");\n+    mid = jni->GetStaticMethodID(clz, \"run\", \"()V\");\n@@ -244,1 +244,1 @@\n-    env->CallStaticVoidMethod(clz, mid);\n+    jni->CallStaticVoidMethod(clz, mid);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ExceptionCatch\/excatch001\/libexcatch.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -304,1 +304,1 @@\n-Java_fieldacc001_getReady(JNIEnv *env, jclass klass) {\n+Java_fieldacc001_getReady(JNIEnv *jni, jclass klass) {\n@@ -316,1 +316,1 @@\n-  cls = env->FindClass(\"fieldacc001a\");\n+  cls = jni->FindClass(\"fieldacc001a\");\n@@ -324,1 +324,1 @@\n-      watches[i].fid = env->GetStaticFieldID(\n+      watches[i].fid = jni->GetStaticFieldID(\n@@ -327,1 +327,1 @@\n-      watches[i].fid = env->GetFieldID(\n+      watches[i].fid = jni->GetFieldID(\n@@ -350,1 +350,1 @@\n-Java_fieldacc001_check(JNIEnv *env, jclass cls) {\n+Java_fieldacc001_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc001\/libfieldacc01.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -301,1 +301,1 @@\n-JNIEXPORT void JNICALL Java_fieldacc002_getReady(JNIEnv *env, jclass clz) {\n+JNIEXPORT void JNICALL Java_fieldacc002_getReady(JNIEnv *jni, jclass clz) {\n@@ -314,1 +314,1 @@\n-  cls = env->FindClass(\"fieldacc002a\");\n+  cls = jni->FindClass(\"fieldacc002a\");\n@@ -322,1 +322,1 @@\n-      watches[i].fid = env->GetStaticFieldID(\n+      watches[i].fid = jni->GetStaticFieldID(\n@@ -325,1 +325,1 @@\n-      watches[i].fid = env->GetFieldID(\n+      watches[i].fid = jni->GetFieldID(\n@@ -349,1 +349,1 @@\n-Java_fieldacc002_check(JNIEnv *env, jclass clz, jobject obj) {\n+Java_fieldacc002_check(JNIEnv *jni, jclass clz, jobject obj) {\n@@ -360,1 +360,1 @@\n-  cls = env->FindClass(\"fieldacc002a\");\n+  cls = jni->FindClass(\"fieldacc002a\");\n@@ -366,21 +366,21 @@\n-  env->GetStaticBooleanField(cls, watches[0].fid);\n-  env->GetStaticByteField(cls, watches[1].fid);\n-  env->GetStaticShortField(cls, watches[2].fid);\n-  env->GetStaticIntField(cls, watches[3].fid);\n-  env->GetStaticLongField(cls, watches[4].fid);\n-  env->GetStaticFloatField(cls, watches[5].fid);\n-  env->GetStaticDoubleField(cls, watches[6].fid);\n-  env->GetStaticCharField(cls, watches[7].fid);\n-  env->GetStaticObjectField(cls, watches[8].fid);\n-  env->GetStaticObjectField(cls, watches[9].fid);\n-\n-  env->GetBooleanField(obj, watches[10].fid);\n-  env->GetByteField(obj, watches[11].fid);\n-  env->GetShortField(obj, watches[12].fid);\n-  env->GetIntField(obj, watches[13].fid);\n-  env->GetLongField(obj, watches[14].fid);\n-  env->GetFloatField(obj, watches[15].fid);\n-  env->GetDoubleField(obj, watches[16].fid);\n-  env->GetCharField(obj, watches[17].fid);\n-  env->GetObjectField(obj, watches[18].fid);\n-  env->GetObjectField(obj, watches[19].fid);\n+  jni->GetStaticBooleanField(cls, watches[0].fid);\n+  jni->GetStaticByteField(cls, watches[1].fid);\n+  jni->GetStaticShortField(cls, watches[2].fid);\n+  jni->GetStaticIntField(cls, watches[3].fid);\n+  jni->GetStaticLongField(cls, watches[4].fid);\n+  jni->GetStaticFloatField(cls, watches[5].fid);\n+  jni->GetStaticDoubleField(cls, watches[6].fid);\n+  jni->GetStaticCharField(cls, watches[7].fid);\n+  jni->GetStaticObjectField(cls, watches[8].fid);\n+  jni->GetStaticObjectField(cls, watches[9].fid);\n+\n+  jni->GetBooleanField(obj, watches[10].fid);\n+  jni->GetByteField(obj, watches[11].fid);\n+  jni->GetShortField(obj, watches[12].fid);\n+  jni->GetIntField(obj, watches[13].fid);\n+  jni->GetLongField(obj, watches[14].fid);\n+  jni->GetFloatField(obj, watches[15].fid);\n+  jni->GetDoubleField(obj, watches[16].fid);\n+  jni->GetCharField(obj, watches[17].fid);\n+  jni->GetObjectField(obj, watches[18].fid);\n+  jni->GetObjectField(obj, watches[19].fid);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc002\/libfieldacc02.cpp","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -282,1 +282,1 @@\n-Java_fieldacc003_getReady(JNIEnv *env, jclass klass) {\n+Java_fieldacc003_getReady(JNIEnv *jni, jclass klass) {\n@@ -295,1 +295,1 @@\n-    cls = env->FindClass(watches[i].f_cls);\n+    cls = jni->FindClass(watches[i].f_cls);\n@@ -302,1 +302,1 @@\n-      watches[i].fid = env->GetStaticFieldID(\n+      watches[i].fid = jni->GetStaticFieldID(\n@@ -305,1 +305,1 @@\n-      watches[i].fid = env->GetFieldID(\n+      watches[i].fid = jni->GetFieldID(\n@@ -329,1 +329,1 @@\n-Java_fieldacc003_check(JNIEnv *env, jclass cls) {\n+Java_fieldacc003_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc003\/libfieldacc03.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -268,1 +268,1 @@\n-Java_fieldacc004_getReady(JNIEnv *env, jclass klass) {\n+Java_fieldacc004_getReady(JNIEnv *jni, jclass klass) {\n@@ -281,1 +281,1 @@\n-    cls = env->FindClass(watches[i].f_cls);\n+    cls = jni->FindClass(watches[i].f_cls);\n@@ -288,1 +288,1 @@\n-      watches[i].fid = env->GetStaticFieldID(\n+      watches[i].fid = jni->GetStaticFieldID(\n@@ -291,1 +291,1 @@\n-      watches[i].fid = env->GetFieldID(\n+      watches[i].fid = jni->GetFieldID(\n@@ -315,1 +315,1 @@\n-Java_fieldacc004_check(JNIEnv *env, jclass cls) {\n+Java_fieldacc004_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc004\/libfieldacc04.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-int isEqual(JNIEnv *env, char *sig, jvalue v1, jvalue v2) {\n+int isEqual(JNIEnv *jni, char *sig, jvalue v1, jvalue v2) {\n@@ -159,1 +159,1 @@\n-      return env->IsSameObject(v1.l, v2.l);\n+      return jni->IsSameObject(v1.l, v2.l);\n@@ -175,1 +175,1 @@\n-void JNICALL FieldModification(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FieldModification(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -294,1 +294,1 @@\n-      if (!isEqual((JNIEnv *)env, watch.f_sig, watch.val, watches[i].val)) {\n+      if (!isEqual((JNIEnv *)jni, watch.f_sig, watch.val, watches[i].val)) {\n@@ -379,1 +379,1 @@\n-Java_fieldmod001_getReady(JNIEnv *env, jclass klass,\n+Java_fieldmod001_getReady(JNIEnv *jni, jclass klass,\n@@ -392,1 +392,1 @@\n-  cls = env->FindClass(\"fieldmod001a\");\n+  cls = jni->FindClass(\"fieldmod001a\");\n@@ -400,1 +400,1 @@\n-      watches[i].fid = env->GetStaticFieldID(\n+      watches[i].fid = jni->GetStaticFieldID(\n@@ -403,1 +403,1 @@\n-      watches[i].fid = env->GetFieldID(\n+      watches[i].fid = jni->GetFieldID(\n@@ -430,2 +430,2 @@\n-  watches[8].val.l = env->NewGlobalRef(obj1);\n-  watches[9].val.l = env->NewGlobalRef(arr1);\n+  watches[8].val.l = jni->NewGlobalRef(obj1);\n+  watches[9].val.l = jni->NewGlobalRef(arr1);\n@@ -441,2 +441,2 @@\n-  watches[18].val.l = env->NewGlobalRef(obj2);\n-  watches[19].val.l = env->NewGlobalRef(arr2);\n+  watches[18].val.l = jni->NewGlobalRef(obj2);\n+  watches[19].val.l = jni->NewGlobalRef(arr2);\n@@ -450,1 +450,1 @@\n-Java_fieldmod001_check(JNIEnv *env, jclass cls) {\n+Java_fieldmod001_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod001\/libfieldmod01.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-int isEqual(JNIEnv *env, char *sig, jvalue v1, jvalue v2) {\n+int isEqual(JNIEnv *jni, char *sig, jvalue v1, jvalue v2) {\n@@ -159,1 +159,1 @@\n-      return env->IsSameObject(v1.l, v2.l);\n+      return jni->IsSameObject(v1.l, v2.l);\n@@ -175,1 +175,1 @@\n-void JNICALL FieldModification(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FieldModification(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -293,1 +293,1 @@\n-      if (!isEqual((JNIEnv *)env, watch.f_sig, watch.val, watches[i].val)) {\n+      if (!isEqual((JNIEnv *)jni, watch.f_sig, watch.val, watches[i].val)) {\n@@ -378,1 +378,1 @@\n-Java_fieldmod002_getReady(JNIEnv *env, jclass clz) {\n+Java_fieldmod002_getReady(JNIEnv *jni, jclass clz) {\n@@ -393,1 +393,1 @@\n-  cls = env->FindClass(\"fieldmod002a\");\n+  cls = jni->FindClass(\"fieldmod002a\");\n@@ -401,1 +401,1 @@\n-      watches[i].fid = env->GetStaticFieldID(\n+      watches[i].fid = jni->GetStaticFieldID(\n@@ -404,1 +404,1 @@\n-      watches[i].fid = env->GetFieldID(\n+      watches[i].fid = jni->GetFieldID(\n@@ -423,5 +423,5 @@\n-  ctor = env->GetMethodID(cls, \"<init>\", \"()V\");\n-  obj1 = env->NewGlobalRef(env->NewObject(cls, ctor));\n-  obj2 = env->NewGlobalRef(env->NewObject(cls, ctor));\n-  arr1 = (jintArray) env->NewGlobalRef(env->NewIntArray((jsize) 1));\n-  arr2 = (jintArray) env->NewGlobalRef(env->NewIntArray((jsize) 1));\n+  ctor = jni->GetMethodID(cls, \"<init>\", \"()V\");\n+  obj1 = jni->NewGlobalRef(jni->NewObject(cls, ctor));\n+  obj2 = jni->NewGlobalRef(jni->NewObject(cls, ctor));\n+  arr1 = (jintArray) jni->NewGlobalRef(jni->NewIntArray((jsize) 1));\n+  arr2 = (jintArray) jni->NewGlobalRef(jni->NewIntArray((jsize) 1));\n@@ -457,1 +457,1 @@\n-Java_fieldmod002_check(JNIEnv *env,\n+Java_fieldmod002_check(JNIEnv *jni,\n@@ -469,1 +469,1 @@\n-  cls = env->FindClass(\"fieldmod002a\");\n+  cls = jni->FindClass(\"fieldmod002a\");\n@@ -475,21 +475,21 @@\n-  env->SetStaticBooleanField(cls, watches[0].fid, watches[0].val.z);\n-  env->SetStaticByteField(cls, watches[1].fid, watches[1].val.b);\n-  env->SetStaticShortField(cls, watches[2].fid, watches[2].val.s);\n-  env->SetStaticIntField(cls, watches[3].fid, watches[3].val.i);\n-  env->SetStaticLongField(cls, watches[4].fid, watches[4].val.j);\n-  env->SetStaticFloatField(cls, watches[5].fid, watches[5].val.f);\n-  env->SetStaticDoubleField(cls, watches[6].fid, watches[6].val.d);\n-  env->SetStaticCharField(cls, watches[7].fid, watches[7].val.c);\n-  env->SetStaticObjectField(cls, watches[8].fid, watches[8].val.l);\n-  env->SetStaticObjectField(cls, watches[9].fid, watches[9].val.l);\n-\n-  env->SetBooleanField(obj, watches[10].fid, watches[10].val.z);\n-  env->SetByteField(obj, watches[11].fid, watches[11].val.b);\n-  env->SetShortField(obj, watches[12].fid, watches[12].val.s);\n-  env->SetIntField(obj, watches[13].fid, watches[13].val.i);\n-  env->SetLongField(obj, watches[14].fid, watches[14].val.j);\n-  env->SetFloatField(obj, watches[15].fid, watches[15].val.f);\n-  env->SetDoubleField(obj, watches[16].fid, watches[16].val.d);\n-  env->SetCharField(obj, watches[17].fid, watches[17].val.c);\n-  env->SetObjectField(obj, watches[18].fid, watches[18].val.l);\n-  env->SetObjectField(obj, watches[19].fid, watches[19].val.l);\n+  jni->SetStaticBooleanField(cls, watches[0].fid, watches[0].val.z);\n+  jni->SetStaticByteField(cls, watches[1].fid, watches[1].val.b);\n+  jni->SetStaticShortField(cls, watches[2].fid, watches[2].val.s);\n+  jni->SetStaticIntField(cls, watches[3].fid, watches[3].val.i);\n+  jni->SetStaticLongField(cls, watches[4].fid, watches[4].val.j);\n+  jni->SetStaticFloatField(cls, watches[5].fid, watches[5].val.f);\n+  jni->SetStaticDoubleField(cls, watches[6].fid, watches[6].val.d);\n+  jni->SetStaticCharField(cls, watches[7].fid, watches[7].val.c);\n+  jni->SetStaticObjectField(cls, watches[8].fid, watches[8].val.l);\n+  jni->SetStaticObjectField(cls, watches[9].fid, watches[9].val.l);\n+\n+  jni->SetBooleanField(obj, watches[10].fid, watches[10].val.z);\n+  jni->SetByteField(obj, watches[11].fid, watches[11].val.b);\n+  jni->SetShortField(obj, watches[12].fid, watches[12].val.s);\n+  jni->SetIntField(obj, watches[13].fid, watches[13].val.i);\n+  jni->SetLongField(obj, watches[14].fid, watches[14].val.j);\n+  jni->SetFloatField(obj, watches[15].fid, watches[15].val.f);\n+  jni->SetDoubleField(obj, watches[16].fid, watches[16].val.d);\n+  jni->SetCharField(obj, watches[17].fid, watches[17].val.c);\n+  jni->SetObjectField(obj, watches[18].fid, watches[18].val.l);\n+  jni->SetObjectField(obj, watches[19].fid, watches[19].val.l);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod002\/libfieldmod02.cpp","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-void JNICALL Breakpoint(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL Breakpoint(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -78,1 +78,1 @@\n-void JNICALL FramePop(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FramePop(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -225,1 +225,1 @@\n-Java_framepop001_check(JNIEnv *env, jclass cls) {\n+Java_framepop001_check(JNIEnv *jni, jclass cls) {\n@@ -240,1 +240,1 @@\n-  mid = env->GetStaticMethodID(cls, \"chain\", \"()V\");\n+  mid = jni->GetStaticMethodID(cls, \"chain\", \"()V\");\n@@ -266,1 +266,1 @@\n-  clz = env->FindClass(\"framepop001a\");\n+  clz = jni->FindClass(\"framepop001a\");\n@@ -272,1 +272,1 @@\n-  mid = env->GetStaticMethodID(clz, \"dummy\", \"()V\");\n+  mid = jni->GetStaticMethodID(clz, \"dummy\", \"()V\");\n@@ -277,1 +277,1 @@\n-  env->CallStaticVoidMethod(clz, mid);\n+  jni->CallStaticVoidMethod(clz, mid);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop001\/libframepop01.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-void pop(jvmtiEnv *jvmti, JNIEnv *env, jthread thr, jmethodID method, int depth) {\n+void pop(jvmtiEnv *jvmti, JNIEnv *jni, jthread thr, jmethodID method, int depth) {\n@@ -134,1 +134,1 @@\n-    if (env->IsSameObject(threads[i].thread, thr)) {\n+    if (jni->IsSameObject(threads[i].thread, thr)) {\n@@ -173,1 +173,1 @@\n-void push(JNIEnv *env, jthread thr, jmethodID method, int depth) {\n+void push(JNIEnv *jni, jthread thr, jmethodID method, int depth) {\n@@ -178,1 +178,1 @@\n-    if (env->IsSameObject(threads[i].thread, thr)) {\n+    if (jni->IsSameObject(threads[i].thread, thr)) {\n@@ -191,1 +191,1 @@\n-    threads[i].thread = env->NewGlobalRef(thr);\n+    threads[i].thread = jni->NewGlobalRef(thr);\n@@ -211,1 +211,1 @@\n-void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -258,1 +258,1 @@\n-      push((JNIEnv *)env, thr, method, frameCount);\n+      push((JNIEnv *)jni, thr, method, frameCount);\n@@ -279,1 +279,1 @@\n-void JNICALL VMStart(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n+void JNICALL VMStart(jvmtiEnv *jvmti, JNIEnv* jni) {\n@@ -288,1 +288,1 @@\n-void JNICALL VMDeath(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n+void JNICALL VMDeath(jvmtiEnv *jvmti, JNIEnv* jni) {\n@@ -296,1 +296,1 @@\n-void JNICALL FramePop(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL FramePop(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -329,1 +329,1 @@\n-    pop(jvmti, (JNIEnv *)env, thr, method, frameCount);\n+    pop(jvmti, (JNIEnv *)jni, thr, method, frameCount);\n@@ -428,1 +428,1 @@\n-JNIEXPORT void JNICALL Java_framepop002_getReady(JNIEnv *env, jclass cls) {\n+JNIEXPORT void JNICALL Java_framepop002_getReady(JNIEnv *jni, jclass cls) {\n@@ -453,1 +453,1 @@\n-JNIEXPORT jint JNICALL Java_framepop002_check(JNIEnv *env, jclass cls) {\n+JNIEXPORT jint JNICALL Java_framepop002_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop002\/libframepop02.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -205,1 +205,1 @@\n-Java_mentry001_enable(JNIEnv *env, jclass cls) {\n+Java_mentry001_enable(JNIEnv *jni, jclass cls) {\n@@ -228,1 +228,1 @@\n-Java_mentry001_check(JNIEnv *env, jclass cls) {\n+Java_mentry001_check(JNIEnv *jni, jclass cls) {\n@@ -231,1 +231,1 @@\n-  mid = env->GetStaticMethodID(cls, \"dummy\", \"()V\");\n+  mid = jni->GetStaticMethodID(cls, \"dummy\", \"()V\");\n@@ -237,1 +237,1 @@\n-  env->CallStaticVoidMethod(cls, mid);\n+  jni->CallStaticVoidMethod(cls, mid);\n@@ -247,1 +247,1 @@\n-Java_mentry001_chain(JNIEnv *env, jclass cls) {\n+Java_mentry001_chain(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry001\/libmentry01.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -53,1 +53,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -125,1 +125,1 @@\n-Java_mentry002_getReady(JNIEnv *env, jclass cls, jint i) {\n+Java_mentry002_getReady(JNIEnv *jni, jclass cls, jint i) {\n@@ -138,1 +138,1 @@\n-  mid = env->GetStaticMethodID(cls, \"emptyMethod\", \"()V\");\n+  mid = jni->GetStaticMethodID(cls, \"emptyMethod\", \"()V\");\n@@ -167,1 +167,1 @@\n-Java_mentry002_check(JNIEnv *env, jclass cls) {\n+Java_mentry002_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry002\/libmentry02.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -207,1 +207,1 @@\n-Java_mexit001_init0(JNIEnv *env, jclass cls) {\n+Java_mexit001_init0(JNIEnv *jni, jclass cls) {\n@@ -229,1 +229,1 @@\n-Java_mexit001_check(JNIEnv *env, jclass cls) {\n+Java_mexit001_check(JNIEnv *jni, jclass cls) {\n@@ -243,1 +243,1 @@\n-  clz = env->FindClass(\"mexit001a\");\n+  clz = jni->FindClass(\"mexit001a\");\n@@ -249,1 +249,1 @@\n-  mid = env->GetStaticMethodID(clz, \"dummy\", \"()V\");\n+  mid = jni->GetStaticMethodID(clz, \"dummy\", \"()V\");\n@@ -255,1 +255,1 @@\n-  env->CallStaticVoidMethod(clz, mid);\n+  jni->CallStaticVoidMethod(clz, mid);\n@@ -274,1 +274,1 @@\n-Java_mexit001a_chain(JNIEnv *env, jclass cls) {\n+Java_mexit001a_chain(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit001\/libmexit01.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -207,1 +207,1 @@\n-Java_mexit002_check(JNIEnv *env, jclass cls) {\n+Java_mexit002_check(JNIEnv *jni, jclass cls) {\n@@ -221,1 +221,1 @@\n-  clz = env->FindClass(\"mexit002a\");\n+  clz = jni->FindClass(\"mexit002a\");\n@@ -227,1 +227,1 @@\n-  mid = env->GetStaticMethodID(clz, \"dummy\", \"()V\");\n+  mid = jni->GetStaticMethodID(clz, \"dummy\", \"()V\");\n@@ -243,1 +243,1 @@\n-  env->CallStaticVoidMethod(clz, mid);\n+  jni->CallStaticVoidMethod(clz, mid);\n@@ -262,1 +262,1 @@\n-Java_mexit002a_chain(JNIEnv *env, jclass cls) {\n+Java_mexit002a_chain(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit002\/libmexit02.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *jni,\n@@ -186,1 +186,1 @@\n-Java_MethodExitVThreadTest_init0(JNIEnv *env, jclass cls) {\n+Java_MethodExitVThreadTest_init0(JNIEnv *jni, jclass cls) {\n@@ -190,1 +190,1 @@\n-    env->FatalError(\"JVMTI client was not properly loaded!\");\n+    jni->FatalError(\"JVMTI client was not properly loaded!\");\n@@ -196,1 +196,1 @@\n-    env->FatalError(\"Error in GetCurrentThread.\");\n+    jni->FatalError(\"Error in GetCurrentThread.\");\n@@ -205,1 +205,1 @@\n-    env->FatalError(\"Failed to enable JVMTI_EVENT_METHOD_EXIT event.\");\n+    jni->FatalError(\"Failed to enable JVMTI_EVENT_METHOD_EXIT event.\");\n@@ -213,1 +213,1 @@\n-Java_MethodExitVThreadTest_check(JNIEnv *env, jclass cls) {\n+Java_MethodExitVThreadTest_check(JNIEnv *jni, jclass cls) {\n@@ -218,1 +218,1 @@\n-    env->FatalError(\"JVMTI client was not properly loaded!\");\n+    jni->FatalError(\"JVMTI client was not properly loaded!\");\n@@ -222,1 +222,1 @@\n-    env->FatalError(\"Error method exit is not supported.\");\n+    jni->FatalError(\"Error method exit is not supported.\");\n@@ -227,1 +227,1 @@\n-    env->FatalError(\"Error in GetCurrentThread.\");\n+    jni->FatalError(\"Error in GetCurrentThread.\");\n@@ -236,1 +236,1 @@\n-    env->FatalError(\"Failed to disable JVMTI_EVENT_METHOD_EXIT event.\");\n+    jni->FatalError(\"Failed to disable JVMTI_EVENT_METHOD_EXIT event.\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/vthread\/libMethodExitVThread.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -291,1 +291,1 @@\n-    (JNIEnv *env, jobject obj) {\n+    (JNIEnv *jni, jobject obj) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEnter\/mcontenter001\/libmcontenter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- *         MonitorContendedEnter(jni_env, thread, object).\n+ *         MonitorContendedEnter(jni, thread, object).\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEnter\/mcontenter001\/mcontenter001.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-    (JNIEnv *env, jobject obj) {\n+    (JNIEnv *jni, jobject obj) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEntered\/mcontentered001\/libmcontentered.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- *         MonitorContendedEntered(jni_env, thread, object).\n+ *         MonitorContendedEntered(jni, thread, object).\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorContendedEntered\/mcontentered001\/mcontentered001.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- *         MonitorWait(jni_env, thread, object, timeout).\n+ *         MonitorWait(jni, thread, object, timeout).\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorWait\/monitorwait001\/monitorwait001.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- *         MonitorWaited(jni_env, thread, object, timed_out).\n+ *         MonitorWaited(jni, thread, object, timed_out).\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MonitorWaited\/monitorwaited001\/monitorwaited001.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -60,1 +60,1 @@\n-    jni_env->FatalError(\"failed to enter a raw monitor\\n\");\n+    jni->FatalError(\"failed to enter a raw monitor\\n\");\n@@ -64,1 +64,1 @@\n-static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -68,1 +68,1 @@\n-    jni_env->FatalError(\"failed to exit a raw monitor\\n\");\n+    jni->FatalError(\"failed to exit a raw monitor\\n\");\n@@ -74,1 +74,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n@@ -81,1 +81,1 @@\n-  lock(jvmti, jni_env);\n+  lock(jvmti, jni);\n@@ -89,1 +89,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -94,1 +94,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -102,1 +102,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -134,1 +134,1 @@\n-  unlock(jvmti, jni_env);\n+  unlock(jvmti, jni);\n@@ -140,1 +140,1 @@\n-anotherNativeMethod(JNIEnv *env, jobject obj) {\n+anotherNativeMethod(JNIEnv *jni, jobject obj) {\n@@ -147,1 +147,1 @@\n-    JNIEnv *env, jobject obj, jboolean registerNative) {\n+    JNIEnv *jni, jobject obj, jboolean registerNative) {\n@@ -155,1 +155,1 @@\n-    testedCls = env->FindClass(CLASS_SIG);\n+    testedCls = jni->FindClass(CLASS_SIG);\n@@ -170,1 +170,1 @@\n-    if (env->RegisterNatives(testedCls, &meth, 1) != 0) {\n+    if (jni->RegisterNatives(testedCls, &meth, 1) != 0) {\n@@ -180,1 +180,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind001\/libnativemethbind01.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -47,1 +47,1 @@\n-    jni_env->FatalError(\"failed to enter a raw monitor\\n\");\n+    jni->FatalError(\"failed to enter a raw monitor\\n\");\n@@ -51,1 +51,1 @@\n-static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -55,1 +55,1 @@\n-      jni_env->FatalError(\"failed to exit a raw monitor\\n\");\n+      jni->FatalError(\"failed to exit a raw monitor\\n\");\n@@ -61,1 +61,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n@@ -67,1 +67,1 @@\n-  lock(jvmti, jni_env);\n+  lock(jvmti, jni);\n@@ -72,1 +72,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -77,1 +77,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -86,1 +86,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -109,1 +109,1 @@\n-  unlock(jvmti, jni_env);\n+  unlock(jvmti, jni);\n@@ -113,1 +113,1 @@\n-VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -131,1 +131,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind002\/libnativemethbind02.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -57,1 +57,1 @@\n-    jni_env->FatalError(\"failed to enter a raw monitor\\n\");\n+    jni->FatalError(\"failed to enter a raw monitor\\n\");\n@@ -61,1 +61,1 @@\n-static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -65,1 +65,1 @@\n-    jni_env->FatalError(\"failed to exit a raw monitor\\n\");\n+    jni->FatalError(\"failed to exit a raw monitor\\n\");\n@@ -71,1 +71,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti, JNIEnv *jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread,\n@@ -77,1 +77,1 @@\n-  lock(jvmti, jni_env);\n+  lock(jvmti, jni);\n@@ -85,1 +85,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -90,1 +90,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -98,1 +98,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -127,1 +127,1 @@\n-  unlock(jvmti, jni_env);\n+  unlock(jvmti, jni);\n@@ -131,1 +131,1 @@\n-VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -156,1 +156,1 @@\n-nativeMethod(JNIEnv *env, jobject obj) {\n+nativeMethod(JNIEnv *jni, jobject obj) {\n@@ -163,1 +163,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n@@ -170,1 +170,1 @@\n-  testedCls = env->FindClass(CLASS_SIG);\n+  testedCls = jni->FindClass(CLASS_SIG);\n@@ -186,1 +186,1 @@\n-  if (env->RegisterNatives(testedCls, &meth, 1) != 0) {\n+  if (jni->RegisterNatives(testedCls, &meth, 1) != 0) {\n@@ -194,1 +194,1 @@\n-  if (env->UnregisterNatives(testedCls) != 0) {\n+  if (jni->UnregisterNatives(testedCls) != 0) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind003\/libnativemethbind03.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n@@ -62,1 +62,1 @@\n-redirNativeMethod(JNIEnv *env, jobject obj) {\n+redirNativeMethod(JNIEnv *jni, jobject obj) {\n@@ -68,1 +68,1 @@\n-static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -72,1 +72,1 @@\n-    jni_env->FatalError(\"failed to enter a raw monitor\\n\");\n+    jni->FatalError(\"failed to enter a raw monitor\\n\");\n@@ -76,1 +76,1 @@\n-static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -80,1 +80,1 @@\n-    jni_env->FatalError(\"failed to exit a raw monitor\\n\");\n+    jni->FatalError(\"failed to exit a raw monitor\\n\");\n@@ -86,1 +86,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n@@ -92,1 +92,1 @@\n-lock(jvmti, jni_env);\n+lock(jvmti, jni);\n@@ -100,1 +100,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -105,1 +105,1 @@\n-unlock(jvmti, jni_env);\n+unlock(jvmti, jni);\n@@ -113,1 +113,1 @@\n-    unlock(jvmti, jni_env);\n+    unlock(jvmti, jni);\n@@ -142,1 +142,1 @@\n-unlock(jvmti, jni_env);\n+unlock(jvmti, jni);\n@@ -148,1 +148,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind004\/libnativemethbind04.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-static void setBP(jvmtiEnv *jvmti, JNIEnv *env, jclass klass) {\n+static void setBP(jvmtiEnv *jvmti, JNIEnv *jni, jclass klass) {\n@@ -62,1 +62,1 @@\n-  mid = env->GetMethodID(klass, METHODS[0], METHOD_SIGS[0]);\n+  mid = jni->GetMethodID(klass, METHODS[0], METHOD_SIGS[0]);\n@@ -64,1 +64,1 @@\n-    env->FatalError(\"failed to get ID for the java method\\n\");\n+    jni->FatalError(\"failed to get ID for the java method\\n\");\n@@ -70,1 +70,1 @@\n-    env->FatalError(\"failed to set breakpoint\\n\");\n+    jni->FatalError(\"failed to set breakpoint\\n\");\n@@ -76,1 +76,1 @@\n-ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jclass klass) {\n@@ -85,1 +85,1 @@\n-      env->FatalError(\"failed to obtain a class signature\\n\");\n+      jni->FatalError(\"failed to obtain a class signature\\n\");\n@@ -92,1 +92,1 @@\n-      setBP(jvmti, env, klass);\n+      setBP(jvmti, jni, klass);\n@@ -100,1 +100,1 @@\n-Breakpoint(jvmtiEnv *jvmti, JNIEnv *env, jthread thr, jmethodID method,\n+Breakpoint(jvmtiEnv *jvmti, JNIEnv *jni, jthread thr, jmethodID method,\n@@ -121,1 +121,1 @@\n-    env->FatalError(\"Breakpoint: failed to obtain a class signature\\n\");\n+    jni->FatalError(\"Breakpoint: failed to obtain a class signature\\n\");\n@@ -140,1 +140,1 @@\n-SingleStep(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n+SingleStep(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n@@ -222,1 +222,1 @@\n-VMStart(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n+VMStart(jvmtiEnv *jvmti, JNIEnv* jni) {\n@@ -231,1 +231,1 @@\n-VMDeath(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv* jni) {\n@@ -242,1 +242,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep001\/libsinglestep01.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-SingleStep(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n+SingleStep(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n@@ -66,1 +66,1 @@\n-VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *jni) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep002\/libsinglestep02.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-static void setBP(jvmtiEnv *jvmti, JNIEnv *env, jclass klass) {\n+static void setBP(jvmtiEnv *jvmti, JNIEnv *jni, jclass klass) {\n@@ -66,1 +66,1 @@\n-  mid = env->GetMethodID(klass, METHODS[0][0], METHODS[0][1]);\n+  mid = jni->GetMethodID(klass, METHODS[0][0], METHODS[0][1]);\n@@ -68,1 +68,1 @@\n-    env->FatalError(\"failed to get ID for the java method\\n\");\n+    jni->FatalError(\"failed to get ID for the java method\\n\");\n@@ -73,1 +73,1 @@\n-    env->FatalError(\"failed to set breakpoint\\n\");\n+    jni->FatalError(\"failed to set breakpoint\\n\");\n@@ -79,1 +79,1 @@\n-ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jclass klass) {\n@@ -92,1 +92,1 @@\n-    env->FatalError(\"failed to obtain a class signature\\n\");\n+    jni->FatalError(\"failed to obtain a class signature\\n\");\n@@ -100,1 +100,1 @@\n-    setBP(jvmti, env, klass);\n+    setBP(jvmti, jni, klass);\n@@ -107,1 +107,1 @@\n-VMStart(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n+VMStart(jvmtiEnv *jvmti, JNIEnv* jni) {\n@@ -117,1 +117,1 @@\n-VMDeath(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv* jni) {\n@@ -126,1 +126,1 @@\n-Breakpoint(jvmtiEnv *jvmti, JNIEnv *env, jthread thr, jmethodID method,\n+Breakpoint(jvmtiEnv *jvmti, JNIEnv *jni, jthread thr, jmethodID method,\n@@ -147,1 +147,1 @@\n-    env->FatalError(\"Breakpoint: failed to obtain a class signature\\n\");\n+    jni->FatalError(\"Breakpoint: failed to obtain a class signature\\n\");\n@@ -169,1 +169,1 @@\n-SingleStep(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n+SingleStep(jvmtiEnv *jvmti, JNIEnv* jni, jthread thread,\n@@ -261,1 +261,1 @@\n-    JNIEnv *env, jobject obj, jint i) {\n+    JNIEnv *jni, jobject obj, jint i) {\n@@ -268,1 +268,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n@@ -274,1 +274,1 @@\n-  Java_singlestep003_anotherNativeMethod(env, obj, i);\n+  Java_singlestep003_anotherNativeMethod(jni, obj, i);\n@@ -278,1 +278,1 @@\n-    JNIEnv *env, jobject obj) {\n+    JNIEnv *jni, jobject obj) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep003\/libsinglestep03.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-void JNICALL ThreadEnd(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadEnd(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread) {\n@@ -108,1 +108,1 @@\n-Java_threadend001_getReady(JNIEnv *env,\n+Java_threadend001_getReady(JNIEnv *jni,\n@@ -117,1 +117,1 @@\n-  prefix = env->GetStringUTFChars(name, NULL);\n+  prefix = jni->GetStringUTFChars(name, NULL);\n@@ -136,1 +136,1 @@\n-Java_threadend001_check(JNIEnv *env, jclass cls) {\n+Java_threadend001_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadEnd\/threadend001\/libthreadend01.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-cbThreadEnd(jvmtiEnv* jvmti, JNIEnv* jni_env, jthread thread) {\n+cbThreadEnd(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadEnd\/threadend002\/libthreadend02.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread) {\n@@ -108,1 +108,1 @@\n-Java_threadstart001_getReady(JNIEnv *env,\n+Java_threadstart001_getReady(JNIEnv *jni,\n@@ -117,1 +117,1 @@\n-  prefix = env->GetStringUTFChars(name, NULL);\n+  prefix = jni->GetStringUTFChars(name, NULL);\n@@ -136,1 +136,1 @@\n-Java_threadstart001_check(JNIEnv *env, jclass cls) {\n+Java_threadstart001_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadStart\/threadstart001\/libthreadstart01.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-JNIEnv *env = jni;\n+\/\/JNIEnv *jni = jni;\n@@ -171,2 +171,2 @@\n-temp = env->NewGlobalRef(next_thread);\n-env->DeleteGlobalRef(temp);\n+temp = jni->NewGlobalRef(next_thread);\n+  jni->DeleteGlobalRef(temp);\n@@ -191,1 +191,1 @@\n-env->FatalError(\"[agent] could not recover\");\n+  jni->FatalError(\"[agent] could not recover\");\n@@ -194,1 +194,1 @@\n-env->DeleteGlobalRef(next_thread);\n+  jni->DeleteGlobalRef(next_thread);\n@@ -229,1 +229,1 @@\n-void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread) {\n@@ -236,1 +236,1 @@\n-if (env->IsSameObject(agent_thread, thread) == JNI_TRUE) {\n+if (jni->IsSameObject(agent_thread, thread) == JNI_TRUE) {\n@@ -309,1 +309,1 @@\n-next_thread = env->NewGlobalRef(thread);\n+next_thread = jni->NewGlobalRef(thread);\n@@ -331,1 +331,1 @@\n-env->FatalError(\"[ThreadStart hook] could not recover\");\n+  jni->FatalError(\"[ThreadStart hook] could not recover\");\n@@ -351,1 +351,1 @@\n-env->FatalError(\"[ThreadStart hook] could not recover\");\n+  jni->FatalError(\"[ThreadStart hook] could not recover\");\n@@ -365,1 +365,1 @@\n-void JNICALL VMInit(jvmtiEnv *jvmti, JNIEnv *env, jthread thr) {\n+void JNICALL VMInit(jvmtiEnv *jvmti, JNIEnv *jni, jthread thr) {\n@@ -377,1 +377,1 @@\n-cls = env->FindClass(\"java\/lang\/Thread\");\n+cls = jni->FindClass(\"java\/lang\/Thread\");\n@@ -384,1 +384,1 @@\n-mid = env->GetMethodID(cls, \"<init>\", \"()V\");\n+mid = jni->GetMethodID(cls, \"<init>\", \"()V\");\n@@ -391,1 +391,1 @@\n-agent_thread = env->NewObject(cls, mid);\n+agent_thread = jni->NewObject(cls, mid);\n@@ -398,1 +398,1 @@\n-agent_thread = (jthread) env->NewGlobalRef(agent_thread);\n+agent_thread = (jthread) jni->NewGlobalRef(agent_thread);\n@@ -433,1 +433,1 @@\n-void JNICALL VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n+void JNICALL VMDeath(jvmtiEnv *jvmti, JNIEnv *jni) {\n@@ -523,1 +523,1 @@\n-Java_threadstart002_check(JNIEnv *env, jclass cls) {\n+Java_threadstart002_check(JNIEnv *jni, jclass cls) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadStart\/threadstart002\/libthreadstart02.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread) {\n@@ -67,1 +67,1 @@\n-void JNICALL ThreadEnd(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadEnd(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread) {\n@@ -147,1 +147,1 @@\n-Java_threadstart003_check(JNIEnv *env,\n+Java_threadstart003_check(JNIEnv *jni,\n@@ -156,1 +156,1 @@\n-  threadName = env->GetStringUTFChars(name, NULL);\n+  threadName = jni->GetStringUTFChars(name, NULL);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadStart\/threadstart003\/libthreadstart03.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}