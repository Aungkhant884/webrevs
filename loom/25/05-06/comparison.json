{"files":[{"patch":"@@ -64,1 +64,1 @@\n-static void setBP(jvmtiEnv *jvmti_env, JNIEnv *env, jclass klass) {\n+static void setBP(jvmtiEnv *jvmti, JNIEnv *env, jclass klass) {\n@@ -75,1 +75,1 @@\n-    err = jvmti_env->SetBreakpoint(mid, 0);\n+    err = jvmti->SetBreakpoint(mid, 0);\n@@ -84,1 +84,1 @@\n-ClassLoad(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n@@ -92,1 +92,1 @@\n-    err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+    err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -99,1 +99,1 @@\n-      setBP(jvmti_env, env, klass);\n+      setBP(jvmti, env, klass);\n@@ -107,1 +107,1 @@\n-Breakpoint(jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread,\n+Breakpoint(jvmtiEnv *jvmti, JNIEnv *jni_env, jthread thread,\n@@ -119,1 +119,1 @@\n-  err = jvmti_env->GetThreadInfo(thread, &thr_info);\n+  err = jvmti->GetThreadInfo(thread, &thr_info);\n@@ -148,1 +148,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &klass);\n+  err = jvmti->GetMethodDeclaringClass(method, &klass);\n@@ -154,1 +154,1 @@\n-  err = jvmti_env->GetClassSignature(klass, &clsSig, &generic);\n+  err = jvmti->GetClassSignature(klass, &clsSig, &generic);\n@@ -171,1 +171,1 @@\n-  err = jvmti_env->GetMethodName(method, &methNam, &methSig, NULL);\n+  err = jvmti->GetMethodName(method, &methNam, &methSig, NULL);\n@@ -187,1 +187,1 @@\n-  err = jvmti_env->Deallocate((unsigned char *) methNam);\n+  err = jvmti->Deallocate((unsigned char *) methNam);\n@@ -193,1 +193,1 @@\n-  err = jvmti_env->Deallocate((unsigned char *) methSig);\n+  err = jvmti->Deallocate((unsigned char *) methSig);\n@@ -203,1 +203,1 @@\n-VMStart(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+VMStart(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -212,1 +212,1 @@\n-VMDeath(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Breakpoint\/breakpoint001\/libbreakpoint.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-static void lock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n-  if (jvmti_env->RawMonitorEnter(countLock) != JVMTI_ERROR_NONE) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+  if (jvmti->RawMonitorEnter(countLock) != JVMTI_ERROR_NONE) {\n@@ -101,2 +101,2 @@\n-static void unlock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n-  if (jvmti_env->RawMonitorExit(countLock) != JVMTI_ERROR_NONE) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n+  if (jvmti->RawMonitorExit(countLock) != JVMTI_ERROR_NONE) {\n@@ -109,1 +109,1 @@\n-ClassLoad(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n@@ -114,1 +114,1 @@\n-  lock(jvmti_env, env);\n+  lock(jvmti, env);\n@@ -116,1 +116,1 @@\n-  err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+  err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -120,1 +120,1 @@\n-    unlock(jvmti_env, env);\n+    unlock(jvmti, env);\n@@ -142,1 +142,1 @@\n-  unlock(jvmti_env, env);\n+  unlock(jvmti, env);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassLoad\/classload001\/libclassload.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-void JNICALL ClassPrepare(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL ClassPrepare(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -101,1 +101,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &inf.sig, &generic);\n+  err = jvmti->GetClassSignature(cls, &inf.sig, &generic);\n@@ -108,1 +108,1 @@\n-  err = jvmti_env->GetClassStatus(cls, &inf.status);\n+  err = jvmti->GetClassStatus(cls, &inf.status);\n@@ -114,1 +114,1 @@\n-  err = jvmti_env->GetClassMethods(cls, &inf.mcount, &methods);\n+  err = jvmti->GetClassMethods(cls, &inf.mcount, &methods);\n@@ -121,1 +121,1 @@\n-  err = jvmti_env->GetClassFields(cls, &inf.fcount, &fields);\n+  err = jvmti->GetClassFields(cls, &inf.fcount, &fields);\n@@ -128,1 +128,1 @@\n-  err = jvmti_env->GetImplementedInterfaces(cls,\n+  err = jvmti->GetImplementedInterfaces(cls,\n@@ -148,1 +148,1 @@\n-        err = jvmti_env->GetMethodName(methods[i],\n+        err = jvmti->GetMethodName(methods[i],\n@@ -164,1 +164,1 @@\n-        err = jvmti_env->GetFieldName(cls, fields[i],\n+        err = jvmti->GetFieldName(cls, fields[i],\n@@ -180,1 +180,1 @@\n-        err = jvmti_env->GetClassSignature(\n+        err = jvmti->GetClassSignature(\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ClassPrepare\/classprep001\/libclassprep.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-Exception(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr,\n+Exception(jvmtiEnv *jvmti, JNIEnv *env, jthread thr,\n@@ -92,1 +92,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &ex.name, &generic);\n+  err = jvmti->GetClassSignature(cls, &ex.name, &generic);\n@@ -99,1 +99,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -106,1 +106,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &ex.t_cls, &generic);\n+  err = jvmti->GetClassSignature(cls, &ex.t_cls, &generic);\n@@ -113,1 +113,1 @@\n-  err = jvmti_env->GetMethodName(method,\n+  err = jvmti->GetMethodName(method,\n@@ -122,1 +122,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(catch_method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(catch_method, &cls);\n@@ -129,1 +129,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &ex.c_cls, &generic);\n+  err = jvmti->GetClassSignature(cls, &ex.c_cls, &generic);\n@@ -136,1 +136,1 @@\n-  err = jvmti_env->GetMethodName(catch_method,\n+  err = jvmti->GetMethodName(catch_method,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/Exception\/exception001\/libexception.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-ExceptionCatch(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr,\n+ExceptionCatch(jvmtiEnv *jvmti, JNIEnv *env, jthread thr,\n@@ -80,1 +80,1 @@\n-    err = jvmti_env->GetClassSignature(cls, &ex.name, &generic);\n+    err = jvmti->GetClassSignature(cls, &ex.name, &generic);\n@@ -87,1 +87,1 @@\n-    err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+    err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -94,1 +94,1 @@\n-    err = jvmti_env->GetClassSignature(cls, &ex.c_cls, &generic);\n+    err = jvmti->GetClassSignature(cls, &ex.c_cls, &generic);\n@@ -101,1 +101,1 @@\n-    err = jvmti_env->GetMethodName(method,\n+    err = jvmti->GetMethodName(method,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ExceptionCatch\/excatch001\/libexcatch.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -127,1 +127,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -134,1 +134,1 @@\n-  err = jvmti_env->GetClassSignature(cls,\n+  err = jvmti->GetClassSignature(cls,\n@@ -142,1 +142,1 @@\n-  err = jvmti_env->GetMethodName(method,\n+  err = jvmti->GetMethodName(method,\n@@ -150,1 +150,1 @@\n-  err = jvmti_env->GetClassSignature(field_klass,\n+  err = jvmti->GetClassSignature(field_klass,\n@@ -158,1 +158,1 @@\n-  err = jvmti_env->GetFieldName(field_klass, field,\n+  err = jvmti->GetFieldName(field_klass, field,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc001\/libfieldacc01.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -127,1 +127,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -134,1 +134,1 @@\n-  err = jvmti_env->GetClassSignature(cls,\n+  err = jvmti->GetClassSignature(cls,\n@@ -142,1 +142,1 @@\n-  err = jvmti_env->GetMethodName(method,\n+  err = jvmti->GetMethodName(method,\n@@ -150,1 +150,1 @@\n-  err = jvmti_env->GetClassSignature(field_klass,\n+  err = jvmti->GetClassSignature(field_klass,\n@@ -158,1 +158,1 @@\n-  err = jvmti_env->GetFieldName(field_klass, field,\n+  err = jvmti->GetFieldName(field_klass, field,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc002\/libfieldacc02.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -106,1 +106,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -113,1 +113,1 @@\n-  err = jvmti_env->GetClassSignature(cls,\n+  err = jvmti->GetClassSignature(cls,\n@@ -121,1 +121,1 @@\n-  err = jvmti_env->GetMethodName(method,\n+  err = jvmti->GetMethodName(method,\n@@ -129,1 +129,1 @@\n-  err = jvmti_env->GetClassSignature(field_klass,\n+  err = jvmti->GetClassSignature(field_klass,\n@@ -137,1 +137,1 @@\n-  err = jvmti_env->GetFieldName(field_klass, field,\n+  err = jvmti->GetFieldName(field_klass, field,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc003\/libfieldacc03.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-void JNICALL FieldAccess(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FieldAccess(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -92,1 +92,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -99,1 +99,1 @@\n-  err = jvmti_env->GetClassSignature(cls,\n+  err = jvmti->GetClassSignature(cls,\n@@ -107,1 +107,1 @@\n-  err = jvmti_env->GetMethodName(method,\n+  err = jvmti->GetMethodName(method,\n@@ -115,1 +115,1 @@\n-  err = jvmti_env->GetClassSignature(field_klass,\n+  err = jvmti->GetClassSignature(field_klass,\n@@ -123,1 +123,1 @@\n-  err = jvmti_env->GetFieldName(field_klass, field,\n+  err = jvmti->GetFieldName(field_klass, field,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/fieldacc004\/libfieldacc04.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-void JNICALL FieldModification(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FieldModification(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -193,1 +193,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -200,1 +200,1 @@\n-  err = jvmti_env->GetClassSignature(cls,\n+  err = jvmti->GetClassSignature(cls,\n@@ -208,1 +208,1 @@\n-  err = jvmti_env->GetMethodName(method,\n+  err = jvmti->GetMethodName(method,\n@@ -216,1 +216,1 @@\n-  err = jvmti_env->GetClassSignature(field_klass,\n+  err = jvmti->GetClassSignature(field_klass,\n@@ -224,1 +224,1 @@\n-  err = jvmti_env->GetFieldName(field_klass, field,\n+  err = jvmti->GetFieldName(field_klass, field,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod001\/libfieldmod01.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-void JNICALL FieldModification(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FieldModification(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -193,1 +193,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -200,1 +200,1 @@\n-  err = jvmti_env->GetClassSignature(cls,\n+  err = jvmti->GetClassSignature(cls,\n@@ -208,1 +208,1 @@\n-  err = jvmti_env->GetMethodName(method, &watch.m_name, &watch.m_sig, &generic);\n+  err = jvmti->GetMethodName(method, &watch.m_name, &watch.m_sig, &generic);\n@@ -215,1 +215,1 @@\n-  err = jvmti_env->GetClassSignature(field_klass,\n+  err = jvmti->GetClassSignature(field_klass,\n@@ -223,1 +223,1 @@\n-  err = jvmti_env->GetFieldName(field_klass, field,\n+  err = jvmti->GetFieldName(field_klass, field,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldModification\/fieldmod002\/libfieldmod02.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-void JNICALL Breakpoint(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL Breakpoint(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -59,1 +59,1 @@\n-  err = jvmti_env->NotifyFramePop(thr, 0);\n+  err = jvmti->NotifyFramePop(thr, 0);\n@@ -68,1 +68,1 @@\n-  err = jvmti_env->NotifyFramePop(thr, 1);\n+  err = jvmti->NotifyFramePop(thr, 1);\n@@ -78,1 +78,1 @@\n-void JNICALL FramePop(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FramePop(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -89,1 +89,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -96,1 +96,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &cls_sig, &generic);\n+  err = jvmti->GetClassSignature(cls, &cls_sig, &generic);\n@@ -103,1 +103,1 @@\n-  err = jvmti_env->GetMethodName(method, &name, &sig, &generic);\n+  err = jvmti->GetMethodName(method, &name, &sig, &generic);\n@@ -110,1 +110,1 @@\n-  err = jvmti_env->GetFrameLocation(thr, 0, &mid, &loc);\n+  err = jvmti->GetFrameLocation(thr, 0, &mid, &loc);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop001\/libframepop01.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-int isTestThread(jvmtiEnv *jvmti_env, jthread thr) {\n+int isTestThread(jvmtiEnv *jvmti, jthread thr) {\n@@ -73,1 +73,1 @@\n-  err = jvmti_env->GetThreadInfo(thr, &inf);\n+  err = jvmti->GetThreadInfo(thr, &inf);\n@@ -83,1 +83,1 @@\n-void printInfo(jvmtiEnv *jvmti_env, jthread thr, jmethodID method, int depth) {\n+void printInfo(jvmtiEnv *jvmti, jthread thr, jmethodID method, int depth) {\n@@ -89,1 +89,1 @@\n-  err = jvmti_env->GetThreadInfo(thr, &inf);\n+  err = jvmti->GetThreadInfo(thr, &inf);\n@@ -96,1 +96,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -104,1 +104,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &clsig, &generic);\n+  err = jvmti->GetClassSignature(cls, &clsig, &generic);\n@@ -112,1 +112,1 @@\n-  err = jvmti_env->GetMethodName(method, &name, &sig, &generic);\n+  err = jvmti->GetMethodName(method, &name, &sig, &generic);\n@@ -122,4 +122,4 @@\n-  jvmti_env->Deallocate((unsigned char *)sig);\n-  jvmti_env->Deallocate((unsigned char *)name);\n-  jvmti_env->Deallocate((unsigned char *)clsig);\n-  jvmti_env->Deallocate((unsigned char *)inf.name);\n+  jvmti->Deallocate((unsigned char *)sig);\n+  jvmti->Deallocate((unsigned char *)name);\n+  jvmti->Deallocate((unsigned char *)clsig);\n+  jvmti->Deallocate((unsigned char *)inf.name);\n@@ -129,1 +129,1 @@\n-void pop(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr, jmethodID method, int depth) {\n+void pop(jvmtiEnv *jvmti, JNIEnv *env, jthread thr, jmethodID method, int depth) {\n@@ -142,1 +142,1 @@\n-    printInfo(jvmti_env, thr, method, depth);\n+    printInfo(jvmti, thr, method, depth);\n@@ -150,1 +150,1 @@\n-    printInfo(jvmti_env, thr, method, depth);\n+    printInfo(jvmti, thr, method, depth);\n@@ -168,1 +168,1 @@\n-  printInfo(jvmti_env, thr, method, depth);\n+  printInfo(jvmti, thr, method, depth);\n@@ -211,1 +211,1 @@\n-void JNICALL MethodEntry(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -226,1 +226,1 @@\n-  err = jvmti_env->GetFrameCount(thr, &frameCount);\n+  err = jvmti->GetFrameCount(thr, &frameCount);\n@@ -230,1 +230,1 @@\n-    printInfo(jvmti_env, thr, method, frameCount);\n+    printInfo(jvmti, thr, method, frameCount);\n@@ -236,1 +236,1 @@\n-  err = jvmti_env->IsMethodNative(method, &isNative);\n+  err = jvmti->IsMethodNative(method, &isNative);\n@@ -240,1 +240,1 @@\n-    printInfo(jvmti_env, thr, method, frameCount);\n+    printInfo(jvmti, thr, method, frameCount);\n@@ -244,1 +244,1 @@\n-  if (isTestThread(jvmti_env, thr)) {\n+  if (isTestThread(jvmti, thr)) {\n@@ -248,1 +248,1 @@\n-      printInfo(jvmti_env, thr, method, frameCount);\n+      printInfo(jvmti, thr, method, frameCount);\n@@ -251,1 +251,1 @@\n-      err = jvmti_env->RawMonitorEnter(event_lock);\n+      err = jvmti->RawMonitorEnter(event_lock);\n@@ -255,1 +255,1 @@\n-        printInfo(jvmti_env, thr, method, frameCount);\n+        printInfo(jvmti, thr, method, frameCount);\n@@ -259,1 +259,1 @@\n-      err = jvmti_env->RawMonitorExit(event_lock);\n+      err = jvmti->RawMonitorExit(event_lock);\n@@ -263,1 +263,1 @@\n-        printInfo(jvmti_env, thr, method, frameCount);\n+        printInfo(jvmti, thr, method, frameCount);\n@@ -266,1 +266,1 @@\n-      err = jvmti_env->NotifyFramePop(thr, 0);\n+      err = jvmti->NotifyFramePop(thr, 0);\n@@ -270,1 +270,1 @@\n-        printInfo(jvmti_env, thr, method, frameCount);\n+        printInfo(jvmti, thr, method, frameCount);\n@@ -279,1 +279,1 @@\n-void JNICALL VMStart(jvmtiEnv *jvmti_env, JNIEnv* jni_env) {\n+void JNICALL VMStart(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n@@ -288,1 +288,1 @@\n-void JNICALL VMDeath(jvmtiEnv *jvmti_env, JNIEnv* jni_env) {\n+void JNICALL VMDeath(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n@@ -296,1 +296,1 @@\n-void JNICALL FramePop(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL FramePop(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -307,1 +307,1 @@\n-  err = jvmti_env->GetFrameCount(thr, &frameCount);\n+  err = jvmti->GetFrameCount(thr, &frameCount);\n@@ -311,1 +311,1 @@\n-    printInfo(jvmti_env, thr, method, frameCount);\n+    printInfo(jvmti, thr, method, frameCount);\n@@ -317,1 +317,1 @@\n-  if (isTestThread(jvmti_env, thr)) {\n+  if (isTestThread(jvmti, thr)) {\n@@ -320,1 +320,1 @@\n-      printInfo(jvmti_env, thr, method, frameCount);\n+      printInfo(jvmti, thr, method, frameCount);\n@@ -322,1 +322,1 @@\n-    err = jvmti_env->RawMonitorEnter(event_lock);\n+    err = jvmti->RawMonitorEnter(event_lock);\n@@ -326,1 +326,1 @@\n-      printInfo(jvmti_env, thr, method, frameCount);\n+      printInfo(jvmti, thr, method, frameCount);\n@@ -329,2 +329,2 @@\n-    pop(jvmti_env, (JNIEnv *)env, thr, method, frameCount);\n-    err = jvmti_env->RawMonitorExit(event_lock);\n+    pop(jvmti, (JNIEnv *)env, thr, method, frameCount);\n+    err = jvmti->RawMonitorExit(event_lock);\n@@ -334,1 +334,1 @@\n-      printInfo(jvmti_env, thr, method, frameCount);\n+      printInfo(jvmti, thr, method, frameCount);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop002\/libframepop02.cpp","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-void JNICALL MethodEntry(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -70,1 +70,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -77,1 +77,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &cls_sig, &generic);\n+  err = jvmti->GetClassSignature(cls, &cls_sig, &generic);\n@@ -89,1 +89,1 @@\n-    err = jvmti_env->GetMethodName(method,\n+    err = jvmti->GetMethodName(method,\n@@ -97,1 +97,1 @@\n-    err = jvmti_env->GetFrameLocation(thr, 0, &mid, &entry.loc);\n+    err = jvmti->GetFrameLocation(thr, 0, &mid, &entry.loc);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry001\/libmentry01.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-void JNICALL MethodEntry(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL MethodEntry(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -53,1 +53,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodEntry\/mentry002\/libmentry02.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -65,1 +65,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -72,1 +72,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &cls_sig, &generic);\n+  err = jvmti->GetClassSignature(cls, &cls_sig, &generic);\n@@ -84,1 +84,1 @@\n-    err = jvmti_env->GetMethodName(method,\n+    err = jvmti->GetMethodName(method,\n@@ -92,1 +92,1 @@\n-    err = jvmti_env->GetFrameLocation(thr, 0, &mid, &loc);\n+    err = jvmti->GetFrameLocation(thr, 0, &mid, &loc);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit001\/libmexit01.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -65,1 +65,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -72,1 +72,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &cls_sig, &generic);\n+  err = jvmti->GetClassSignature(cls, &cls_sig, &generic);\n@@ -84,1 +84,1 @@\n-    err = jvmti_env->GetMethodName(method,\n+    err = jvmti->GetMethodName(method,\n@@ -92,1 +92,1 @@\n-    err = jvmti_env->GetFrameLocation(thr, 0, &mid, &loc);\n+    err = jvmti->GetFrameLocation(thr, 0, &mid, &loc);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/mexit002\/libmexit02.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-void JNICALL MethodExit(jvmtiEnv *jvmti_env, JNIEnv *env,\n+void JNICALL MethodExit(jvmtiEnv *jvmti, JNIEnv *env,\n@@ -66,1 +66,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &cls);\n+  err = jvmti->GetMethodDeclaringClass(method, &cls);\n@@ -73,1 +73,1 @@\n-  err = jvmti_env->GetClassSignature(cls, &cls_sig, &generic);\n+  err = jvmti->GetClassSignature(cls, &cls_sig, &generic);\n@@ -84,1 +84,1 @@\n-    err = jvmti_env->GetMethodName(method,\n+    err = jvmti->GetMethodName(method,\n@@ -92,1 +92,1 @@\n-    err = jvmti_env->GetFrameLocation(thr, 0, &mid, &loc);\n+    err = jvmti->GetFrameLocation(thr, 0, &mid, &loc);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/MethodExit\/vthread\/libMethodExitVThread.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-static void lock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -58,1 +58,1 @@\n-  err = jvmti_env->RawMonitorEnter(countLock);\n+  err = jvmti->RawMonitorEnter(countLock);\n@@ -64,1 +64,1 @@\n-static void unlock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -66,1 +66,1 @@\n-  err = jvmti_env->RawMonitorExit(countLock);\n+  err = jvmti->RawMonitorExit(countLock);\n@@ -74,1 +74,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n@@ -81,1 +81,1 @@\n-  lock(jvmti_env, jni_env);\n+  lock(jvmti, jni_env);\n@@ -85,1 +85,1 @@\n-  err = jvmti_env->GetPhase(&phase);\n+  err = jvmti->GetPhase(&phase);\n@@ -89,1 +89,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -94,1 +94,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -98,1 +98,1 @@\n-  err = jvmti_env->GetMethodName(method, &methNam, &methSig, NULL);\n+  err = jvmti->GetMethodName(method, &methNam, &methSig, NULL);\n@@ -102,1 +102,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -121,1 +121,1 @@\n-  err = jvmti_env->Deallocate((unsigned char*) methNam);\n+  err = jvmti->Deallocate((unsigned char*) methNam);\n@@ -126,1 +126,1 @@\n-  err =  jvmti_env->Deallocate((unsigned char*) methSig);\n+  err =  jvmti->Deallocate((unsigned char*) methSig);\n@@ -134,1 +134,1 @@\n-  unlock(jvmti_env, jni_env);\n+  unlock(jvmti, jni_env);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind001\/libnativemethbind01.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-static void lock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -45,1 +45,1 @@\n-  err = jvmti_env->RawMonitorEnter(countLock);\n+  err = jvmti->RawMonitorEnter(countLock);\n@@ -51,1 +51,1 @@\n-static void unlock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -53,1 +53,1 @@\n-  err = jvmti_env->RawMonitorExit(countLock);\n+  err = jvmti->RawMonitorExit(countLock);\n@@ -61,1 +61,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n@@ -67,2 +67,2 @@\n-  lock(jvmti_env, jni_env);\n-  err = jvmti_env->GetPhase(&phase);\n+  lock(jvmti, jni_env);\n+  err = jvmti->GetPhase(&phase);\n@@ -72,1 +72,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -77,1 +77,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -81,1 +81,1 @@\n-  err = jvmti_env->GetMethodName(method, &methNam, &methSig, NULL);\n+  err = jvmti->GetMethodName(method, &methNam, &methSig, NULL);\n@@ -86,1 +86,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -94,1 +94,1 @@\n-    err = jvmti_env->Deallocate((unsigned char *) methNam);\n+    err = jvmti->Deallocate((unsigned char *) methNam);\n@@ -102,1 +102,1 @@\n-    err = jvmti_env->Deallocate((unsigned char *) methSig);\n+    err = jvmti->Deallocate((unsigned char *) methSig);\n@@ -109,1 +109,1 @@\n-  unlock(jvmti_env, jni_env);\n+  unlock(jvmti, jni_env);\n@@ -113,1 +113,1 @@\n-VMDeath(jvmtiEnv *jvmti_env, JNIEnv *env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind002\/libnativemethbind02.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-static void lock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -55,1 +55,1 @@\n-  err = jvmti_env->RawMonitorEnter(countLock);\n+  err = jvmti->RawMonitorEnter(countLock);\n@@ -61,1 +61,1 @@\n-static void unlock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -63,1 +63,1 @@\n-  err = jvmti_env->RawMonitorExit(countLock);\n+  err = jvmti->RawMonitorExit(countLock);\n@@ -71,1 +71,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti_env, JNIEnv *jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv *jni_env, jthread thread,\n@@ -77,1 +77,1 @@\n-  lock(jvmti_env, jni_env);\n+  lock(jvmti, jni_env);\n@@ -81,1 +81,1 @@\n-  err = jvmti_env->GetPhase(&phase);\n+  err = jvmti->GetPhase(&phase);\n@@ -85,1 +85,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -90,1 +90,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -94,1 +94,1 @@\n-  err = jvmti_env->GetMethodName(method, &methNam, &methSig, NULL);\n+  err = jvmti->GetMethodName(method, &methNam, &methSig, NULL);\n@@ -98,1 +98,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -110,1 +110,1 @@\n-    err = jvmti_env->Deallocate((unsigned char *) methNam);\n+    err = jvmti->Deallocate((unsigned char *) methNam);\n@@ -118,1 +118,1 @@\n-    err = jvmti_env->Deallocate((unsigned char *) methSig);\n+    err = jvmti->Deallocate((unsigned char *) methSig);\n@@ -127,1 +127,1 @@\n-  unlock(jvmti_env, jni_env);\n+  unlock(jvmti, jni_env);\n@@ -131,1 +131,1 @@\n-VMDeath(jvmtiEnv *jvmti_env, JNIEnv *env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind003\/libnativemethbind03.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-static void lock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void lock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -70,1 +70,1 @@\n-  err = jvmti_env->RawMonitorEnter(countLock);\n+  err = jvmti->RawMonitorEnter(countLock);\n@@ -76,1 +76,1 @@\n-static void unlock(jvmtiEnv *jvmti_env, JNIEnv *jni_env) {\n+static void unlock(jvmtiEnv *jvmti, JNIEnv *jni_env) {\n@@ -78,1 +78,1 @@\n-  err = jvmti_env->RawMonitorExit(countLock);\n+  err = jvmti->RawMonitorExit(countLock);\n@@ -86,1 +86,1 @@\n-NativeMethodBind(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread thread,\n+NativeMethodBind(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n@@ -92,1 +92,1 @@\n-lock(jvmti_env, jni_env);\n+lock(jvmti, jni_env);\n@@ -96,1 +96,1 @@\n-  err = jvmti_env->GetPhase(&phase);\n+  err = jvmti->GetPhase(&phase);\n@@ -100,1 +100,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -105,1 +105,1 @@\n-unlock(jvmti_env, jni_env);\n+unlock(jvmti, jni_env);\n@@ -109,1 +109,1 @@\n-  err = jvmti_env->GetMethodName(method, &methNam, &methSig, NULL);\n+  err = jvmti->GetMethodName(method, &methNam, &methSig, NULL);\n@@ -113,1 +113,1 @@\n-    unlock(jvmti_env, jni_env);\n+    unlock(jvmti, jni_env);\n@@ -126,1 +126,1 @@\n-    err = jvmti_env->Deallocate((unsigned char *) methNam);\n+    err = jvmti->Deallocate((unsigned char *) methNam);\n@@ -134,1 +134,1 @@\n-    err = jvmti_env->Deallocate((unsigned char *) methSig);\n+    err = jvmti->Deallocate((unsigned char *) methSig);\n@@ -142,1 +142,1 @@\n-unlock(jvmti_env, jni_env);\n+unlock(jvmti, jni_env);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/NativeMethodBind\/nativemethbind004\/libnativemethbind04.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-static void setBP(jvmtiEnv *jvmti_env, JNIEnv *env, jclass klass) {\n+static void setBP(jvmtiEnv *jvmti, JNIEnv *env, jclass klass) {\n@@ -68,1 +68,1 @@\n-  err = jvmti_env->SetBreakpoint(mid, 0);\n+  err = jvmti->SetBreakpoint(mid, 0);\n@@ -76,1 +76,1 @@\n-ClassLoad(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n@@ -83,1 +83,1 @@\n-    err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+    err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -92,1 +92,1 @@\n-      setBP(jvmti_env, env, klass);\n+      setBP(jvmti, env, klass);\n@@ -100,1 +100,1 @@\n-Breakpoint(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr, jmethodID method,\n+Breakpoint(jvmtiEnv *jvmti, JNIEnv *env, jthread thr, jmethodID method,\n@@ -114,1 +114,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &klass);\n+  err = jvmti->GetMethodDeclaringClass(method, &klass);\n@@ -119,1 +119,1 @@\n-  err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+  err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -126,1 +126,1 @@\n-    err = jvmti_env->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_SINGLE_STEP, thr);\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_SINGLE_STEP, thr);\n@@ -140,1 +140,1 @@\n-SingleStep(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread thread,\n+SingleStep(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n@@ -152,1 +152,1 @@\n-  err = jvmti_env->GetMethodName(method, &methNam, &methSig, NULL);\n+  err = jvmti->GetMethodName(method, &methNam, &methSig, NULL);\n@@ -159,1 +159,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &klass);\n+  err = jvmti->GetMethodDeclaringClass(method, &klass);\n@@ -166,1 +166,1 @@\n-  err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+  err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -199,1 +199,1 @@\n-      err = jvmti_env->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n+      err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n@@ -207,1 +207,1 @@\n-  err = jvmti_env->Deallocate((unsigned char*) methNam);\n+  err = jvmti->Deallocate((unsigned char*) methNam);\n@@ -212,1 +212,1 @@\n-  err = jvmti_env->Deallocate((unsigned char*) methSig);\n+  err = jvmti->Deallocate((unsigned char*) methSig);\n@@ -222,1 +222,1 @@\n-VMStart(jvmtiEnv *jvmti_env, JNIEnv* jni_env) {\n+VMStart(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n@@ -231,1 +231,1 @@\n-VMDeath(jvmtiEnv *jvmti_env, JNIEnv* jni_env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep001\/libsinglestep01.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-SingleStep(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread thread,\n+SingleStep(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n@@ -50,1 +50,1 @@\n-  err = jvmti_env->GetPhase(&phase);\n+  err = jvmti->GetPhase(&phase);\n@@ -66,1 +66,1 @@\n-VMDeath(jvmtiEnv *jvmti_env, JNIEnv *env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep002\/libsinglestep02.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-static void setBP(jvmtiEnv *jvmti_env, JNIEnv *env, jclass klass) {\n+static void setBP(jvmtiEnv *jvmti, JNIEnv *env, jclass klass) {\n@@ -71,1 +71,1 @@\n-  err = jvmti_env->SetBreakpoint(mid, 0);\n+  err = jvmti->SetBreakpoint(mid, 0);\n@@ -79,1 +79,1 @@\n-ClassLoad(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread, jclass klass) {\n+ClassLoad(jvmtiEnv *jvmti, JNIEnv *env, jthread thread, jclass klass) {\n@@ -90,1 +90,1 @@\n-  err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+  err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -100,1 +100,1 @@\n-    setBP(jvmti_env, env, klass);\n+    setBP(jvmti, env, klass);\n@@ -107,1 +107,1 @@\n-VMStart(jvmtiEnv *jvmti_env, JNIEnv* jni_env) {\n+VMStart(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n@@ -117,1 +117,1 @@\n-VMDeath(jvmtiEnv *jvmti_env, JNIEnv* jni_env) {\n+VMDeath(jvmtiEnv *jvmti, JNIEnv* jni_env) {\n@@ -126,1 +126,1 @@\n-Breakpoint(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr, jmethodID method,\n+Breakpoint(jvmtiEnv *jvmti, JNIEnv *env, jthread thr, jmethodID method,\n@@ -140,1 +140,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &klass);\n+  err = jvmti->GetMethodDeclaringClass(method, &klass);\n@@ -145,1 +145,1 @@\n-  err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+  err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -154,1 +154,1 @@\n-    err = jvmti_env->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_SINGLE_STEP, thr);\n+    err = jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_SINGLE_STEP, thr);\n@@ -169,1 +169,1 @@\n-SingleStep(jvmtiEnv *jvmti_env, JNIEnv* jni_env, jthread thread,\n+SingleStep(jvmtiEnv *jvmti, JNIEnv* jni_env, jthread thread,\n@@ -182,1 +182,1 @@\n-  err = jvmti_env->GetMethodName(method, &methNam, &methSig, NULL);\n+  err = jvmti->GetMethodName(method, &methNam, &methSig, NULL);\n@@ -189,1 +189,1 @@\n-  err = jvmti_env->GetMethodDeclaringClass(method, &klass);\n+  err = jvmti->GetMethodDeclaringClass(method, &klass);\n@@ -196,1 +196,1 @@\n-  err = jvmti_env->GetClassSignature(klass, &sig, &generic);\n+  err = jvmti->GetClassSignature(klass, &sig, &generic);\n@@ -233,1 +233,1 @@\n-          err = jvmti_env->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n+          err = jvmti->SetEventNotificationMode(JVMTI_DISABLE, JVMTI_EVENT_SINGLE_STEP, thread);\n@@ -243,1 +243,1 @@\n-  err = jvmti_env->Deallocate((unsigned char*) methNam);\n+  err = jvmti->Deallocate((unsigned char*) methNam);\n@@ -248,1 +248,1 @@\n-  err = jvmti_env->Deallocate((unsigned char*) methSig);\n+  err = jvmti->Deallocate((unsigned char*) methSig);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/SingleStep\/singlestep003\/libsinglestep03.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-void JNICALL ThreadEnd(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadEnd(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n@@ -50,1 +50,1 @@\n-  err = jvmti_env->GetThreadInfo(thread, &inf);\n+  err = jvmti->GetThreadInfo(thread, &inf);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadEnd\/threadend001\/libthreadend01.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,0 +158,6 @@\n+\n+  err = init_agent_data(jvmti, &agent_data);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadEnd\/threadend002\/libthreadend02.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-void JNICALL ThreadStart(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n@@ -50,1 +50,1 @@\n-  err = jvmti_env->GetThreadInfo(thread, &inf);\n+  err = jvmti->GetThreadInfo(thread, &inf);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadStart\/threadstart001\/libthreadstart01.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-void JNICALL ThreadStart(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n@@ -246,1 +246,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorEnter(agent_start_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorEnter(agent_start_lock))) {\n@@ -254,1 +254,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorWait(agent_start_lock, (jlong)WAIT_TIME))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorWait(agent_start_lock, (jlong)WAIT_TIME))) {\n@@ -260,1 +260,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorExit(agent_start_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorExit(agent_start_lock))) {\n@@ -268,1 +268,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->GetPhase(&phase))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->GetPhase(&phase))) {\n@@ -276,1 +276,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorEnter(thr_event_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorEnter(thr_event_lock))) {\n@@ -286,1 +286,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->GetThreadInfo(thread, &inf))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->GetThreadInfo(thread, &inf))) {\n@@ -295,1 +295,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorEnter(thr_start_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorEnter(thr_start_lock))) {\n@@ -303,1 +303,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorEnter(thr_resume_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorEnter(thr_resume_lock))) {\n@@ -313,1 +313,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorNotify(thr_start_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorNotify(thr_start_lock))) {\n@@ -318,1 +318,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorExit(thr_start_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorExit(thr_start_lock))) {\n@@ -324,1 +324,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorWait(thr_resume_lock, (jlong)WAIT_TIME))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorWait(thr_resume_lock, (jlong)WAIT_TIME))) {\n@@ -335,1 +335,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorExit(thr_resume_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorExit(thr_resume_lock))) {\n@@ -341,1 +341,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->GetThreadState(thread, &thrStat))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->GetThreadState(thread, &thrStat))) {\n@@ -357,1 +357,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorExit(thr_event_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorExit(thr_event_lock))) {\n@@ -365,1 +365,1 @@\n-void JNICALL VMInit(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thr) {\n+void JNICALL VMInit(jvmtiEnv *jvmti, JNIEnv *env, jthread thr) {\n@@ -371,1 +371,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_THREAD_START, NULL))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_THREAD_START, NULL))) {\n@@ -410,1 +410,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorEnter(agent_start_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorEnter(agent_start_lock))) {\n@@ -415,1 +415,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RunAgentThread(agent_thread, debug_agent, NULL, JVMTI_THREAD_NORM_PRIORITY))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RunAgentThread(agent_thread, debug_agent, NULL, JVMTI_THREAD_NORM_PRIORITY))) {\n@@ -420,1 +420,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorWait(agent_start_lock, (jlong)0))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorWait(agent_start_lock, (jlong)0))) {\n@@ -425,1 +425,1 @@\n-if (!NSK_JVMTI_VERIFY(jvmti_env->RawMonitorExit(agent_start_lock))) {\n+if (!NSK_JVMTI_VERIFY(jvmti->RawMonitorExit(agent_start_lock))) {\n@@ -433,1 +433,1 @@\n-void JNICALL VMDeath(jvmtiEnv *jvmti_env, JNIEnv *env) {\n+void JNICALL VMDeath(jvmtiEnv *jvmti, JNIEnv *env) {\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadStart\/threadstart002\/libthreadstart02.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-void JNICALL ThreadStart(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadStart(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n@@ -53,1 +53,1 @@\n-  err = jvmti_env->GetThreadInfo(thread, &inf);\n+  err = jvmti->GetThreadInfo(thread, &inf);\n@@ -67,1 +67,1 @@\n-void JNICALL ThreadEnd(jvmtiEnv *jvmti_env, JNIEnv *env, jthread thread) {\n+void JNICALL ThreadEnd(jvmtiEnv *jvmti, JNIEnv *env, jthread thread) {\n@@ -71,1 +71,1 @@\n-  err = jvmti_env->GetThreadInfo(thread, &inf);\n+  err = jvmti->GetThreadInfo(thread, &inf);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/ThreadStart\/threadstart003\/libthreadstart03.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}