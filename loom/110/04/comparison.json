{"files":[{"patch":"@@ -108,1 +108,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -115,1 +115,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -136,1 +136,1 @@\n-frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -180,1 +180,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -206,1 +206,1 @@\n-inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -218,1 +218,1 @@\n-inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -231,1 +231,1 @@\n-inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n@@ -237,1 +237,1 @@\n-void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -244,1 +244,1 @@\n-inline frame ThawBase::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -249,1 +249,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -294,1 +294,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -307,1 +307,1 @@\n-inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -311,1 +311,1 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -332,1 +332,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -339,1 +339,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -87,1 +87,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -92,1 +92,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -97,1 +97,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -101,1 +101,1 @@\n-inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -105,1 +105,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -109,1 +109,1 @@\n-inline frame ThawBase::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -114,1 +114,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -119,1 +119,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -123,1 +123,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -127,1 +127,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -132,1 +132,1 @@\n-inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -136,1 +136,1 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -141,1 +141,1 @@\n-void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -145,1 +145,1 @@\n-inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -87,1 +87,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -92,1 +92,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -97,1 +97,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -101,1 +101,1 @@\n-inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -105,1 +105,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -109,1 +109,1 @@\n-inline frame ThawBase::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -114,1 +114,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -119,1 +119,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -123,1 +123,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -127,1 +127,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -132,1 +132,1 @@\n-inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -136,1 +136,1 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -141,1 +141,1 @@\n-void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -145,1 +145,1 @@\n-inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -87,1 +87,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -92,1 +92,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -97,1 +97,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -101,1 +101,1 @@\n-inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -105,1 +105,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -109,1 +109,1 @@\n-inline frame ThawBase::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -114,1 +114,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -119,1 +119,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -123,1 +123,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -127,1 +127,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -132,1 +132,1 @@\n-inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -136,1 +136,1 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -141,1 +141,1 @@\n-void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -145,1 +145,1 @@\n-inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -113,1 +113,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -133,1 +133,1 @@\n-frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -177,1 +177,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -201,1 +201,1 @@\n-inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -216,1 +216,1 @@\n-inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -229,1 +229,1 @@\n-inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n@@ -235,1 +235,1 @@\n-void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -242,1 +242,1 @@\n-inline frame ThawBase::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -247,1 +247,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -285,1 +285,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -298,1 +298,1 @@\n-inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -302,1 +302,1 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -320,1 +320,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -327,1 +327,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-inline void FreezeBase::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -87,1 +87,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -92,1 +92,1 @@\n-template<typename FKind> frame FreezeBase::new_hframe(frame& f, frame& caller) {\n+template<typename FKind> frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -97,1 +97,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -101,1 +101,1 @@\n-inline void FreezeBase::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -105,1 +105,1 @@\n-inline void FreezeBase::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -109,1 +109,1 @@\n-inline frame ThawBase::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -114,1 +114,1 @@\n-template<typename FKind> frame ThawBase::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -119,1 +119,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -123,1 +123,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -127,1 +127,1 @@\n-inline intptr_t* ThawBase::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -132,1 +132,1 @@\n-inline void ThawBase::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -136,1 +136,1 @@\n-intptr_t* ThawBase::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -141,1 +141,1 @@\n-void ThawBase::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -145,1 +145,1 @@\n-inline void ThawBase::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1157,1 +1157,0 @@\n-  template<typename P>\n@@ -1159,1 +1158,0 @@\n-  template<typename P>\n@@ -1180,1 +1178,0 @@\n-  template<typename P>\n@@ -1182,1 +1179,0 @@\n-  template<typename P>\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"logging\/log.hpp\"\n@@ -275,1 +276,0 @@\n-template<typename P>\n@@ -277,1 +277,1 @@\n-  return (oop)RawAccess<>::oop_load(ref->field_addr<P>(_parent_offset)) == NULL;\n+  return (oop)RawAccess<>::oop_load_at(ref, _parent_offset) == NULL;\n@@ -280,1 +280,0 @@\n-template<typename P>\n@@ -282,1 +281,1 @@\n-  RawAccess<IS_DEST_UNINITIALIZED>::oop_store(ref->field_addr<P>(_parent_offset), value);\n+  RawAccess<IS_DEST_UNINITIALIZED>::oop_store_at(ref, _parent_offset, value);\n@@ -293,1 +292,0 @@\n-template<typename P>\n@@ -295,1 +293,1 @@\n-  return (oop)RawAccess<>::oop_load(ref->field_addr<P>(_cont_offset));\n+  return (oop)RawAccess<>::oop_load_at(ref, _cont_offset);\n@@ -298,1 +296,0 @@\n-template<typename P>\n@@ -300,1 +297,1 @@\n-  RawAccess<IS_DEST_UNINITIALIZED>::oop_store(ref->field_addr<P>(_cont_offset), value);\n+  RawAccess<IS_DEST_UNINITIALIZED>::oop_store_at(ref, _cont_offset, value);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"logging\/logStream.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,3 +61,2 @@\n-  inline stackChunkOop parent() const;\n-  inline void set_parent(stackChunkOop value);\n-  template<typename P>\n+  inline stackChunkOopDesc* parent() const;\n+  inline void set_parent(stackChunkOopDesc* value);\n@@ -65,1 +64,0 @@\n-  template<typename P>\n@@ -86,1 +84,0 @@\n-  template<typename P> inline oop cont() const;\n@@ -88,1 +85,0 @@\n-  template<typename P>\n@@ -100,1 +96,0 @@\n-\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,6 +48,4 @@\n-inline stackChunkOop stackChunkOopDesc::parent() const         { return stackChunkOopDesc::cast(jdk_internal_vm_StackChunk::parent(as_oop())); }\n-template<typename P>\n-inline bool stackChunkOopDesc::is_parent_null() const          { return jdk_internal_vm_StackChunk::is_parent_null<P>(as_oop()); }\n-inline void stackChunkOopDesc::set_parent(stackChunkOop value) { jdk_internal_vm_StackChunk::set_parent(this, value); }\n-template<typename P>\n-inline void stackChunkOopDesc::set_parent_raw(oop value)       { jdk_internal_vm_StackChunk::set_parent_raw<P>(this, value); }\n+inline stackChunkOopDesc* stackChunkOopDesc::parent() const         { return (stackChunkOopDesc*)(oopDesc*)jdk_internal_vm_StackChunk::parent(as_oop()); }\n+inline bool stackChunkOopDesc::is_parent_null() const               { return jdk_internal_vm_StackChunk::is_parent_null(as_oop()); }\n+inline void stackChunkOopDesc::set_parent(stackChunkOopDesc* value) { jdk_internal_vm_StackChunk::set_parent(this, (oop)value); }\n+inline void stackChunkOopDesc::set_parent_raw(oop value)            { jdk_internal_vm_StackChunk::set_parent_raw(this, value); }\n@@ -72,7 +70,1 @@\n-inline oop stackChunkOopDesc::cont() const              { return UseCompressedOops ? cont<narrowOop>() : cont<oop>(); \/* jdk_internal_vm_StackChunk::cont(as_oop()); *\/ }\n-template<typename P>\n-inline oop stackChunkOopDesc::cont() const              {\n-  oop obj = jdk_internal_vm_StackChunk::cont_raw<P>(as_oop());\n-  obj = (oop)NativeAccess<>::oop_load(&obj);\n-  return obj;\n-}\n+inline oop stackChunkOopDesc::cont() const              { return jdk_internal_vm_StackChunk::cont(as_oop()); }\n@@ -80,2 +72,1 @@\n-template<typename P>\n-inline void stackChunkOopDesc::set_cont_raw(oop value)  {  jdk_internal_vm_StackChunk::set_cont_raw<P>(this, value); }\n+inline void stackChunkOopDesc::set_cont_raw(oop value)  { jdk_internal_vm_StackChunk::set_cont_raw(this, value); }\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-template<typename ConfigT> static inline int freeze0(JavaThread* current, intptr_t* const sp);\n+static inline int freeze0(JavaThread* current, intptr_t* const sp, bool preempt);\n@@ -221,1 +221,1 @@\n-template<typename ConfigT> static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind);\n+static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind);\n@@ -226,21 +226,0 @@\n-enum class oop_kind { NARROW, WIDE };\n-template <oop_kind oops, typename BarrierSetT>\n-class Config {\n-public:\n-  typedef Config<oops, BarrierSetT> SelfT;\n-  typedef typename Conditional<oops == oop_kind::NARROW, narrowOop, oop>::type OopT;\n-\n-  static int freeze(JavaThread* thread, intptr_t* const sp) {\n-    return freeze0<SelfT, false>(thread, sp);\n-  }\n-\n-  __COLD\n-  static int freeze_preempt(JavaThread* thread, intptr_t* const sp) {\n-    return freeze0<SelfT, true>(thread, sp);\n-  }\n-\n-  static intptr_t* thaw(JavaThread* thread, thaw_kind kind) {\n-    return thaw0<SelfT>(thread, kind);\n-  }\n-};\n-\n@@ -527,1 +506,0 @@\n-template<typename ConfigT>\n@@ -535,1 +513,1 @@\n-  return ConfigT::freeze(current, sp);\n+  return freeze0(current, sp, false);\n@@ -538,3 +516,0 @@\n-typedef int (*FreezeContFnT)(JavaThread*, intptr_t*);\n-static FreezeContFnT preempt_freeze = nullptr;\n-\n@@ -579,1 +554,1 @@\n-  int res = preempt_freeze(target, target->last_Java_sp());\n+  int res = freeze0(target, target->last_Java_sp(), true);\n@@ -596,1 +571,0 @@\n-template<typename ConfigT>\n@@ -603,1 +577,1 @@\n-  return ConfigT::thaw(thread, (thaw_kind)kind);\n+  return thaw0(thread, (thaw_kind)kind);\n@@ -1012,2 +986,2 @@\n-class FreezeBase : public StackObj {\n-protected:\n+class Freeze : public StackObj {\n+ private:\n@@ -1027,3 +1001,2 @@\n-  inline FreezeBase(JavaThread* thread, ContinuationWrapper& cont, bool preempt);\n-\n-public:\n+ public:\n+  inline Freeze(JavaThread* thread, ContinuationWrapper& cont, bool preempt);\n@@ -1031,0 +1004,7 @@\n+  inline bool is_chunk_available(intptr_t* top_sp\n+#ifdef ASSERT\n+    , int* out_size = nullptr\n+#endif\n+  );\n+  template <bool chunk_available> freeze_result try_freeze_fast(intptr_t* sp);\n+  template <bool chunk_available> bool freeze_fast(intptr_t* top_sp);\n@@ -1032,1 +1012,1 @@\n-protected:\n+ private:\n@@ -1035,0 +1015,1 @@\n+  stackChunkOop allocate_chunk(size_t stack_size);\n@@ -1042,1 +1023,0 @@\n-private:\n@@ -1068,23 +1048,1 @@\n-protected:\n-  virtual stackChunkOop allocate_chunk_slow(size_t stack_size) = 0;\n-};\n-\n-template <typename ConfigT>\n-class Freeze : public FreezeBase {\n-private:\n-  stackChunkOop allocate_chunk(size_t stack_size);\n-\n-public:\n-  inline Freeze(JavaThread* thread, ContinuationWrapper& cont, bool preempt)\n-    : FreezeBase(thread, cont, preempt) {}\n-\n-  inline bool is_chunk_available(intptr_t* top_sp\n-#ifdef ASSERT\n-    , int* out_size = nullptr\n-#endif\n-  );\n-  template <bool chunk_available> freeze_result try_freeze_fast(intptr_t* sp);\n-  template <bool chunk_available> bool freeze_fast(intptr_t* top_sp);\n-\n-protected:\n-  virtual stackChunkOop allocate_chunk_slow(size_t stack_size) override { return allocate_chunk(stack_size); }\n+  stackChunkOop allocate_chunk_slow(size_t stack_size) { return allocate_chunk(stack_size); }\n@@ -1093,1 +1051,1 @@\n-FreezeBase::FreezeBase(JavaThread* thread, ContinuationWrapper& cont, bool preempt) :\n+Freeze::Freeze(JavaThread* thread, ContinuationWrapper& cont, bool preempt) :\n@@ -1117,1 +1075,1 @@\n-void FreezeBase::init_rest() { \/\/ we want to postpone some initialization after chunk handling\n+void Freeze::init_rest() { \/\/ we want to postpone some initialization after chunk handling\n@@ -1123,1 +1081,1 @@\n-void FreezeBase::copy_to_chunk(intptr_t* from, intptr_t* to, int size) {\n+void Freeze::copy_to_chunk(intptr_t* from, intptr_t* to, int size) {\n@@ -1139,1 +1097,1 @@\n-void FreezeBase::unwind_frames() {\n+void Freeze::unwind_frames() {\n@@ -1145,1 +1103,0 @@\n-template <typename ConfigT>\n@@ -1147,1 +1104,1 @@\n-freeze_result Freeze<ConfigT>::try_freeze_fast(intptr_t* sp) {\n+freeze_result Freeze::try_freeze_fast(intptr_t* sp) {\n@@ -1167,2 +1124,1 @@\n-template <typename ConfigT>\n-bool Freeze<ConfigT>::is_chunk_available(intptr_t* top_sp\n+bool Freeze::is_chunk_available(intptr_t* top_sp\n@@ -1199,1 +1155,0 @@\n-template <typename ConfigT>\n@@ -1201,1 +1156,1 @@\n-bool Freeze<ConfigT>::freeze_fast(intptr_t* top_sp) {\n+bool Freeze::freeze_fast(intptr_t* top_sp) {\n@@ -1344,1 +1299,1 @@\n-NOINLINE freeze_result FreezeBase::freeze_slow() {\n+NOINLINE freeze_result Freeze::freeze_slow() {\n@@ -1375,1 +1330,1 @@\n-frame FreezeBase::freeze_start_frame() {\n+frame Freeze::freeze_start_frame() {\n@@ -1385,1 +1340,1 @@\n-frame FreezeBase::freeze_start_frame_yield_stub(frame f) {\n+frame Freeze::freeze_start_frame_yield_stub(frame f) {\n@@ -1392,1 +1347,1 @@\n-frame FreezeBase::freeze_start_frame_safepoint_stub(frame f) {\n+frame Freeze::freeze_start_frame_safepoint_stub(frame f) {\n@@ -1409,1 +1364,1 @@\n-NOINLINE freeze_result FreezeBase::freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top) {\n+NOINLINE freeze_result Freeze::freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top) {\n@@ -1446,1 +1401,1 @@\n-inline freeze_result FreezeBase::recurse_freeze_java_frame(const frame& f, frame& caller, int fsize, int argsize) {\n+inline freeze_result Freeze::recurse_freeze_java_frame(const frame& f, frame& caller, int fsize, int argsize) {\n@@ -1463,1 +1418,1 @@\n-inline void FreezeBase::before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool bottom) {\n+inline void Freeze::before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool bottom) {\n@@ -1474,1 +1429,1 @@\n-inline void FreezeBase::after_freeze_java_frame(const frame& hf, bool bottom) {\n+inline void Freeze::after_freeze_java_frame(const frame& hf, bool bottom) {\n@@ -1488,1 +1443,1 @@\n-freeze_result FreezeBase::finalize_freeze(const frame& callee, frame& caller, int argsize) {\n+freeze_result Freeze::finalize_freeze(const frame& callee, frame& caller, int argsize) {\n@@ -1624,1 +1579,1 @@\n-void FreezeBase::patch(const frame& f, frame& hf, const frame& caller, bool bottom) {\n+void Freeze::patch(const frame& f, frame& hf, const frame& caller, bool bottom) {\n@@ -1651,1 +1606,1 @@\n-NOINLINE freeze_result FreezeBase::recurse_freeze_interpreted_frame(frame& f, frame& caller, int callee_argsize, bool callee_interpreted) {\n+NOINLINE freeze_result Freeze::recurse_freeze_interpreted_frame(frame& f, frame& caller, int callee_argsize, bool callee_interpreted) {\n@@ -1721,1 +1676,1 @@\n-freeze_result FreezeBase::recurse_freeze_compiled_frame(frame& f, frame& caller, int callee_argsize, bool callee_interpreted) {\n+freeze_result Freeze::recurse_freeze_compiled_frame(frame& f, frame& caller, int callee_argsize, bool callee_interpreted) {\n@@ -1760,1 +1715,1 @@\n-NOINLINE freeze_result FreezeBase::recurse_freeze_stub_frame(frame& f, frame& caller) {\n+NOINLINE freeze_result Freeze::recurse_freeze_stub_frame(frame& f, frame& caller) {\n@@ -1804,1 +1759,1 @@\n-NOINLINE void FreezeBase::finish_freeze(const frame& f, const frame& top) {\n+NOINLINE void Freeze::finish_freeze(const frame& f, const frame& top) {\n@@ -1840,1 +1795,1 @@\n-inline bool FreezeBase::stack_overflow() { \/\/ detect stack overflow in recursive native code\n+inline bool Freeze::stack_overflow() { \/\/ detect stack overflow in recursive native code\n@@ -1850,1 +1805,1 @@\n-void FreezeBase::init_chunk(stackChunkOop chunk) {\n+void Freeze::init_chunk(stackChunkOop chunk) {\n@@ -1859,2 +1814,1 @@\n-template <typename ConfigT>\n-stackChunkOop Freeze<ConfigT>::allocate_chunk(size_t stack_size) {\n+stackChunkOop Freeze::allocate_chunk(size_t stack_size) {\n@@ -1906,2 +1860,2 @@\n-  chunk->set_parent_raw<typename ConfigT::OopT>(chunk0);\n-  chunk->set_cont_raw<typename ConfigT::OopT>(_cont.continuation());\n+  chunk->set_parent_raw(chunk0);\n+  chunk->set_cont_raw(_cont.continuation());\n@@ -2021,2 +1975,1 @@\n-template<typename ConfigT, bool preempt>\n-static inline int freeze0(JavaThread* current, intptr_t* const sp) {\n+static inline int freeze0(JavaThread* current, intptr_t* const sp, bool preempt) {\n@@ -2060,1 +2013,1 @@\n-  Freeze<ConfigT> fr(current, cont, preempt);\n+  Freeze fr(current, cont, preempt);\n@@ -2248,2 +2201,2 @@\n-class ThawBase : public StackObj {\n-protected:\n+class Thaw : StackObj {\n+ private:\n@@ -2262,13 +2215,0 @@\n-#ifdef ASSERT\n-  public:\n-    bool barriers() { return _barriers; }\n-  protected:\n-#endif\n-\n-protected:\n-  ThawBase(JavaThread* thread, ContinuationWrapper& cont) :\n-      _thread(thread), _cont(cont),\n-      _fastpath(nullptr) {\n-    DEBUG_ONLY(_top_unextended_sp = nullptr;)\n-  }\n-\n@@ -2285,1 +2225,0 @@\n-private:\n@@ -2312,1 +2251,6 @@\n-};\n+ public:\n+  Thaw(JavaThread* thread, ContinuationWrapper& cont) :\n+      _thread(thread), _cont(cont),\n+      _fastpath(nullptr) {\n+    DEBUG_ONLY(_top_unextended_sp = nullptr;)\n+  }\n@@ -2314,4 +2258,3 @@\n-template <typename ConfigT>\n-class Thaw : public ThawBase {\n-public:\n-  Thaw(JavaThread* thread, ContinuationWrapper& cont) : ThawBase(thread, cont) {}\n+#ifdef ASSERT\n+  bool barriers() { return _barriers; }\n+#endif\n@@ -2329,2 +2272,1 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::thaw(thaw_kind kind) {\n+inline intptr_t* Thaw::thaw(thaw_kind kind) {\n@@ -2345,2 +2287,1 @@\n-template <typename ConfigT>\n-NOINLINE intptr_t* Thaw<ConfigT>::thaw_fast(stackChunkOop chunk) {\n+NOINLINE intptr_t* Thaw::thaw_fast(stackChunkOop chunk) {\n@@ -2413,1 +2354,1 @@\n-  const bool is_last = empty && chunk->is_parent_null<typename ConfigT::OopT>();\n+  const bool is_last = empty && chunk->is_parent_null();\n@@ -2465,1 +2406,1 @@\n-void ThawBase::copy_from_chunk(intptr_t* from, intptr_t* to, int size) {\n+void Thaw::copy_from_chunk(intptr_t* from, intptr_t* to, int size) {\n@@ -2471,1 +2412,1 @@\n-void ThawBase::patch_chunk(intptr_t* sp, bool is_last) {\n+void Thaw::patch_chunk(intptr_t* sp, bool is_last) {\n@@ -2480,1 +2421,1 @@\n-NOINLINE intptr_t* ThawBase::thaw_slow(stackChunkOop chunk, bool return_barrier) {\n+NOINLINE intptr_t* Thaw::thaw_slow(stackChunkOop chunk, bool return_barrier) {\n@@ -2550,1 +2491,1 @@\n-void ThawBase::thaw(const frame& hf, frame& caller, int num_frames, bool top) {\n+void Thaw::thaw(const frame& hf, frame& caller, int num_frames, bool top) {\n@@ -2566,1 +2507,1 @@\n-bool ThawBase::recurse_thaw_java_frame(frame& caller, int num_frames) {\n+bool Thaw::recurse_thaw_java_frame(frame& caller, int num_frames) {\n@@ -2592,1 +2533,1 @@\n-void ThawBase::finalize_thaw(frame& entry, int argsize) {\n+void Thaw::finalize_thaw(frame& entry, int argsize) {\n@@ -2618,1 +2559,1 @@\n-inline void ThawBase::before_thaw_java_frame(const frame& hf, const frame& caller, bool bottom, int num_frame) {\n+inline void Thaw::before_thaw_java_frame(const frame& hf, const frame& caller, bool bottom, int num_frame) {\n@@ -2629,1 +2570,1 @@\n-inline void ThawBase::after_thaw_java_frame(const frame& f, bool bottom) {\n+inline void Thaw::after_thaw_java_frame(const frame& f, bool bottom) {\n@@ -2638,1 +2579,1 @@\n-inline void ThawBase::patch(frame& f, const frame& caller, bool bottom) {\n+inline void Thaw::patch(frame& f, const frame& caller, bool bottom) {\n@@ -2654,7 +2595,7 @@\n-  void ThawBase::clear_bitmap_bits(intptr_t* start, int range) {\n-    \/\/ we need to clear the bits that correspond to arguments as they reside in the caller frame\n-    log_develop_trace(jvmcont)(\"clearing bitmap for \" INTPTR_FORMAT \" - \" INTPTR_FORMAT, p2i(start), p2i(start+range));\n-    stackChunkOop chunk = _cont.tail();\n-    chunk->bitmap().clear_range(chunk->bit_index_for(start),\n-                                chunk->bit_index_for(start+range));\n-  }\n+void Thaw::clear_bitmap_bits(intptr_t* start, int range) {\n+  \/\/ we need to clear the bits that correspond to arguments as they reside in the caller frame\n+  log_develop_trace(jvmcont)(\"clearing bitmap for \" INTPTR_FORMAT \" - \" INTPTR_FORMAT, p2i(start), p2i(start+range));\n+  stackChunkOop chunk = _cont.tail();\n+  chunk->bitmap().clear_range(chunk->bit_index_for(start),\n+                              chunk->bit_index_for(start+range));\n+}\n@@ -2662,1 +2603,1 @@\n-NOINLINE void ThawBase::recurse_thaw_interpreted_frame(const frame& hf, frame& caller, int num_frames) {\n+NOINLINE void Thaw::recurse_thaw_interpreted_frame(const frame& hf, frame& caller, int num_frames) {\n@@ -2727,1 +2668,1 @@\n-void ThawBase::recurse_thaw_compiled_frame(const frame& hf, frame& caller, int num_frames, bool stub_caller) {\n+void Thaw::recurse_thaw_compiled_frame(const frame& hf, frame& caller, int num_frames, bool stub_caller) {\n@@ -2795,1 +2736,1 @@\n-void ThawBase::recurse_thaw_stub_frame(const frame& hf, frame& caller, int num_frames) {\n+void Thaw::recurse_thaw_stub_frame(const frame& hf, frame& caller, int num_frames) {\n@@ -2838,1 +2779,1 @@\n-void ThawBase::finish_thaw(frame& f) {\n+void Thaw::finish_thaw(frame& f) {\n@@ -2873,1 +2814,1 @@\n-void ThawBase::push_return_frame(frame& f) { \/\/ see generate_cont_thaw\n+void Thaw::push_return_frame(frame& f) { \/\/ see generate_cont_thaw\n@@ -2893,1 +2834,1 @@\n-void ThawBase::JVMTI_continue_cleanup(JavaThread* thread) {\n+void Thaw::JVMTI_continue_cleanup(JavaThread* thread) {\n@@ -2901,1 +2842,0 @@\n-template<typename ConfigT>\n@@ -2927,1 +2867,1 @@\n-  Thaw<ConfigT> thw(thread, cont);\n+  Thaw thw(thread, cont);\n@@ -3168,3 +3108,0 @@\n-static address thaw_entry   = nullptr;\n-static address freeze_entry = nullptr;\n-\n@@ -3172,1 +3109,1 @@\n-  return ::thaw_entry;\n+  return (address)&thaw;    \n@@ -3176,1 +3113,1 @@\n-  return ::freeze_entry;\n+  return (address)&freeze;\n@@ -3179,40 +3116,0 @@\n-class ConfigResolve {\n-public:\n-  static void resolve() { resolve_compressed(); }\n-\n-  static void resolve_compressed() {\n-    UseCompressedOops ? resolve_gc<true>()\n-                      : resolve_gc<false>();\n-  }\n-\n-private:\n-  template <bool use_compressed>\n-  static void resolve_gc() {\n-    BarrierSet* bs = BarrierSet::barrier_set();\n-    assert(bs != NULL, \"freeze\/thaw invoked before BarrierSet is set\");\n-    switch (bs->kind()) {\n-#define BARRIER_SET_RESOLVE_BARRIER_CLOSURE(bs_name)                    \\\n-      case BarrierSet::bs_name: {                                       \\\n-        resolve<use_compressed, typename BarrierSet::GetType<BarrierSet::bs_name>::type>(); \\\n-      }                                                                 \\\n-        break;\n-      FOR_EACH_CONCRETE_BARRIER_SET_DO(BARRIER_SET_RESOLVE_BARRIER_CLOSURE)\n-#undef BARRIER_SET_RESOLVE_BARRIER_CLOSURE\n-\n-    default:\n-      fatal(\"BarrierSet resolving not implemented\");\n-    };\n-  }\n-\n-  template <bool use_compressed, typename BarrierSetT>\n-  static void resolve() {\n-    typedef Config<use_compressed ? oop_kind::NARROW : oop_kind::WIDE, BarrierSetT> SelectedConfigT;\n-\n-    freeze_entry = (address)freeze<SelectedConfigT>;\n-    preempt_freeze = SelectedConfigT::freeze_preempt;\n-\n-    \/\/ if we want, we could templatize by king and have three different that entries\n-    thaw_entry   = (address)thaw<SelectedConfigT>;\n-  }\n-};\n-\n@@ -3232,1 +3129,0 @@\n-  ConfigResolve::resolve();\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":86,"deletions":190,"binary":false,"changes":276,"status":"modified"}]}