{"files":[{"patch":"@@ -106,1 +106,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -133,1 +133,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -159,2 +159,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -172,1 +171,0 @@\n-template <typename ConfigT>\n@@ -174,1 +172,1 @@\n-frame Freeze<ConfigT>::new_hframe(frame& f, frame& caller) {\n+frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -211,1 +209,0 @@\n-template <typename ConfigT>\n@@ -213,1 +210,1 @@\n-inline void Freeze<ConfigT>::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -222,2 +219,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -233,1 +229,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -240,1 +236,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -244,2 +240,1 @@\n-template <typename ConfigT>\n-inline frame Thaw<ConfigT>::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -250,2 +245,1 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Thaw<ConfigT>::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -296,2 +290,1 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -310,1 +303,0 @@\n-template <typename ConfigT>\n@@ -312,1 +304,1 @@\n-inline void Thaw<ConfigT>::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -317,2 +309,1 @@\n-template <typename ConfigT>\n-intptr_t* Thaw<ConfigT>::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -334,2 +325,1 @@\n-template <typename ConfigT>\n-void Thaw<ConfigT>::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -340,2 +330,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":15,"deletions":26,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -94,1 +93,0 @@\n-template <typename ConfigT>\n@@ -96,1 +94,1 @@\n-inline frame Freeze<ConfigT>::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -101,2 +99,2 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Freeze<ConfigT>::new_hframe(frame& f, frame& caller) {\n+template<typename FKind>\n+frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -107,1 +105,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -111,1 +109,0 @@\n-template <typename ConfigT>\n@@ -113,1 +110,1 @@\n-inline void Freeze<ConfigT>::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -117,2 +114,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -122,2 +118,1 @@\n-template <typename ConfigT>\n-inline frame Thaw<ConfigT>::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -128,2 +123,2 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Thaw<ConfigT>::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame\n+Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -134,2 +129,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -139,1 +133,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -143,2 +137,1 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -149,1 +142,0 @@\n-template <typename ConfigT>\n@@ -151,1 +143,1 @@\n-inline void Thaw<ConfigT>::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -155,2 +147,1 @@\n-template <typename ConfigT>\n-intptr_t* Thaw<ConfigT>::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -161,2 +152,1 @@\n-template <typename ConfigT>\n-void Thaw<ConfigT>::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -166,2 +156,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -94,1 +93,0 @@\n-template <typename ConfigT>\n@@ -96,1 +94,1 @@\n-inline frame Freeze<ConfigT>::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -101,2 +99,2 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Freeze<ConfigT>::new_hframe(frame& f, frame& caller) {\n+template<typename FKind>\n+frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -107,1 +105,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -111,1 +109,0 @@\n-template <typename ConfigT>\n@@ -113,1 +110,1 @@\n-inline void Freeze<ConfigT>::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -117,2 +114,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -122,2 +118,1 @@\n-template <typename ConfigT>\n-inline frame Thaw<ConfigT>::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -128,2 +123,2 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Thaw<ConfigT>::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind>\n+frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -134,2 +129,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -139,1 +133,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -143,2 +137,1 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -149,1 +142,0 @@\n-template <typename ConfigT>\n@@ -151,1 +143,1 @@\n-inline void Thaw<ConfigT>::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -155,2 +147,1 @@\n-template <typename ConfigT>\n-intptr_t* Thaw<ConfigT>::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -161,2 +152,1 @@\n-template <typename ConfigT>\n-void Thaw<ConfigT>::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -166,2 +156,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -94,1 +93,0 @@\n-template <typename ConfigT>\n@@ -96,1 +94,1 @@\n-inline frame Freeze<ConfigT>::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -101,2 +99,2 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Freeze<ConfigT>::new_hframe(frame& f, frame& caller) {\n+template<typename FKind>\n+frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -107,1 +105,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -111,1 +109,0 @@\n-template <typename ConfigT>\n@@ -113,1 +110,1 @@\n-inline void Freeze<ConfigT>::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -117,2 +114,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -122,2 +118,1 @@\n-template <typename ConfigT>\n-inline frame Thaw<ConfigT>::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -128,2 +123,2 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Thaw<ConfigT>::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind>\n+frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -134,2 +129,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -139,1 +133,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -143,2 +137,1 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -149,1 +142,0 @@\n-template <typename ConfigT>\n@@ -151,1 +143,1 @@\n-inline void Thaw<ConfigT>::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -155,2 +147,1 @@\n-template <typename ConfigT>\n-intptr_t* Thaw<ConfigT>::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -161,2 +152,1 @@\n-template <typename ConfigT>\n-void Thaw<ConfigT>::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -166,2 +156,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-inline frame FreezeBase::sender(const frame& f) {\n+inline frame Freeze::sender(const frame& f) {\n@@ -132,1 +132,1 @@\n-inline void FreezeBase::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n+inline void Freeze::relativize_interpreted_frame_metadata(const frame& f, const frame& hf) {\n@@ -156,2 +156,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::set_top_frame_metadata_pd(const frame& hf) {\n+inline void Freeze::set_top_frame_metadata_pd(const frame& hf) {\n@@ -169,1 +168,0 @@\n-template <typename ConfigT>\n@@ -171,1 +169,1 @@\n-frame Freeze<ConfigT>::new_hframe(frame& f, frame& caller) {\n+frame Freeze::new_hframe(frame& f, frame& caller) {\n@@ -208,1 +206,0 @@\n-template <typename ConfigT>\n@@ -210,1 +207,1 @@\n-inline void Freeze<ConfigT>::patch_pd(frame& hf, const frame& caller) {\n+inline void Freeze::patch_pd(frame& hf, const frame& caller) {\n@@ -219,2 +216,1 @@\n-template <typename ConfigT>\n-inline void Freeze<ConfigT>::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n+inline void Freeze::patch_chunk_pd(intptr_t* vsp, intptr_t* hsp) {\n@@ -230,1 +226,1 @@\n-inline void ThawBase::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n+inline void Thaw::derelativize_interpreted_frame_metadata(const frame& hf, const frame& f) {\n@@ -237,1 +233,1 @@\n-inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void Thaw::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n@@ -241,2 +237,1 @@\n-template <typename ConfigT>\n-inline frame Thaw<ConfigT>::new_entry_frame() {\n+inline frame Thaw::new_entry_frame() {\n@@ -247,2 +242,1 @@\n-template <typename ConfigT>\n-template<typename FKind> frame Thaw<ConfigT>::new_frame(const frame& hf, frame& caller, bool bottom) {\n+template<typename FKind> frame Thaw::new_frame(const frame& hf, frame& caller, bool bottom) {\n@@ -286,2 +280,1 @@\n-template <typename ConfigT>\n-inline intptr_t* Thaw<ConfigT>::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n+inline intptr_t* Thaw::align(const frame& hf, intptr_t* vsp, frame& caller, bool bottom) {\n@@ -300,1 +293,0 @@\n-template <typename ConfigT>\n@@ -302,1 +294,1 @@\n-inline void Thaw<ConfigT>::patch_pd(frame& f, const frame& caller) {\n+inline void Thaw::patch_pd(frame& f, const frame& caller) {\n@@ -307,2 +299,1 @@\n-template <typename ConfigT>\n-intptr_t* Thaw<ConfigT>::push_interpreter_return_frame(intptr_t* sp) {\n+intptr_t* Thaw::push_interpreter_return_frame(intptr_t* sp) {\n@@ -321,2 +312,1 @@\n-template <typename ConfigT>\n-void Thaw<ConfigT>::patch_chunk_pd(intptr_t* sp) {\n+void Thaw::patch_chunk_pd(intptr_t* sp) {\n@@ -327,2 +317,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::prefetch_chunk_pd(void* start, int size) {\n+inline void Thaw::prefetch_chunk_pd(void* start, int size) {\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":15,"deletions":26,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1160,1 +1160,0 @@\n-  template<typename P>\n@@ -1162,1 +1161,0 @@\n-  template<typename P>\n@@ -1183,1 +1181,0 @@\n-  template<typename P>\n@@ -1185,1 +1182,0 @@\n-  template<typename P>\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"logging\/log.hpp\"\n@@ -282,1 +283,0 @@\n-template<typename P>\n@@ -284,1 +284,1 @@\n-  return (oop)RawAccess<>::oop_load(ref->field_addr<P>(_parent_offset)) == NULL;\n+  return (oop)RawAccess<>::oop_load_at(ref, _parent_offset) == NULL;\n@@ -287,1 +287,0 @@\n-template<typename P>\n@@ -289,1 +288,1 @@\n-  RawAccess<IS_DEST_UNINITIALIZED>::oop_store(ref->field_addr<P>(_parent_offset), value);\n+  RawAccess<IS_DEST_UNINITIALIZED>::oop_store_at(ref, _parent_offset, value);\n@@ -300,1 +299,0 @@\n-template<typename P>\n@@ -302,1 +300,1 @@\n-  return (oop)RawAccess<>::oop_load(ref->field_addr<P>(_cont_offset));\n+  return (oop)RawAccess<>::oop_load_at(ref, _cont_offset);\n@@ -305,1 +303,0 @@\n-template<typename P>\n@@ -307,1 +304,1 @@\n-  RawAccess<IS_DEST_UNINITIALIZED>::oop_store(ref->field_addr<P>(_cont_offset), value);\n+  RawAccess<IS_DEST_UNINITIALIZED>::oop_store_at(ref, _cont_offset, value);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"logging\/logStream.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-  template<typename P>\n@@ -57,1 +56,0 @@\n-  template<typename P>\n@@ -80,1 +78,0 @@\n-  template<typename P>\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,2 +41,1 @@\n-template<typename P>\n-inline bool stackChunkOopDesc::is_parent_null() const               { return jdk_internal_vm_StackChunk::is_parent_null<P>(as_oop()); }\n+inline bool stackChunkOopDesc::is_parent_null() const               { return jdk_internal_vm_StackChunk::is_parent_null(as_oop()); }\n@@ -44,2 +43,1 @@\n-template<typename P>\n-inline void stackChunkOopDesc::set_parent_raw(oop value)            { jdk_internal_vm_StackChunk::set_parent_raw<P>(this, value); }\n+inline void stackChunkOopDesc::set_parent_raw(oop value)            { jdk_internal_vm_StackChunk::set_parent_raw(this, value); }\n@@ -64,7 +62,1 @@\n-inline oop stackChunkOopDesc::cont() const              { return UseCompressedOops ? cont<narrowOop>() : cont<oop>(); \/* jdk_internal_vm_StackChunk::cont(as_oop()); *\/ }\n-template<typename P>\n-inline oop stackChunkOopDesc::cont() const              {\n-  oop obj = jdk_internal_vm_StackChunk::cont_raw<P>(as_oop());\n-  obj = (oop)NativeAccess<>::oop_load(&obj);\n-  return obj;\n-}\n+inline oop stackChunkOopDesc::cont() const              { return jdk_internal_vm_StackChunk::cont(as_oop()); }\n@@ -72,2 +64,1 @@\n-template<typename P>\n-inline void stackChunkOopDesc::set_cont_raw(oop value)  {  jdk_internal_vm_StackChunk::set_cont_raw<P>(this, value); }\n+inline void stackChunkOopDesc::set_cont_raw(oop value)  { jdk_internal_vm_StackChunk::set_cont_raw(this, value); }\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-template<typename ConfigT> static inline int freeze0(JavaThread* current, intptr_t* const sp);\n+static inline int freeze0(JavaThread* current, intptr_t* const sp, bool preempt);\n@@ -222,1 +222,1 @@\n-template<typename ConfigT> static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind);\n+static inline intptr_t* thaw0(JavaThread* thread, const thaw_kind kind);\n@@ -227,25 +227,0 @@\n-enum class oop_kind { NARROW, WIDE };\n-template <oop_kind oops, typename BarrierSetT>\n-class Config {\n-public:\n-  typedef Config<oops, BarrierSetT> SelfT;\n-  typedef typename Conditional<oops == oop_kind::NARROW, narrowOop, oop>::type OopT;\n-\n-  static int freeze(JavaThread* thread, intptr_t* const sp) {\n-    return freeze0<SelfT, false>(thread, sp);\n-  }\n-\n-  __COLD\n-  static int freeze_preempt(JavaThread* thread, intptr_t* const sp) {\n-    return freeze0<SelfT, true>(thread, sp);\n-  }\n-\n-  static intptr_t* thaw(JavaThread* thread, thaw_kind kind) {\n-    return thaw0<SelfT>(thread, kind);\n-  }\n-\n-  static bool requires_barriers(stackChunkOop obj) {\n-    return obj->requires_barriers();\n-  }\n-};\n-\n@@ -537,1 +512,0 @@\n-template<typename ConfigT>\n@@ -545,1 +519,1 @@\n-  return ConfigT::freeze(current, sp);\n+  return freeze0(current, sp, false);\n@@ -548,3 +522,0 @@\n-typedef int (*FreezeContFnT)(JavaThread*, intptr_t*);\n-static FreezeContFnT preempt_freeze = nullptr;\n-\n@@ -589,1 +560,1 @@\n-  int res = preempt_freeze(target, target->last_Java_sp());\n+  int res = freeze0(target, target->last_Java_sp(), true);\n@@ -606,1 +577,0 @@\n-template<typename ConfigT>\n@@ -613,1 +583,1 @@\n-  return ConfigT::thaw(thread, (thaw_kind)kind);\n+  return thaw0(thread, (thaw_kind)kind);\n@@ -1013,9 +983,2 @@\n-class FreezeBase { \/\/ avoids the template of the Freeze class\n-protected:\n-  static inline void relativize_interpreted_frame_metadata(const frame& f, const frame& hf);\n-  template<typename FKind> static inline frame sender(const frame& f);\n-};\n-\n-template <typename ConfigT>\n-class Freeze : public FreezeBase {\n-private:\n+class Freeze {\n+ private:\n@@ -1036,0 +999,2 @@\n+  static inline void relativize_interpreted_frame_metadata(const frame& f, const frame& hf);\n+  template<typename FKind> static inline frame sender(const frame& f);\n@@ -1125,1 +1090,1 @@\n-    if (chunk == nullptr || chunk->is_gc_mode() || ConfigT::requires_barriers(chunk) || chunk->has_mixed_frames()) {\n+    if (chunk == nullptr || chunk->is_gc_mode() || chunk->requires_barriers() || chunk->has_mixed_frames()) {\n@@ -1500,1 +1465,1 @@\n-    if (unextended_sp < _size || chunk->is_gc_mode() || (!_barriers && ConfigT::requires_barriers(chunk))) {\n+    if (unextended_sp < _size || chunk->is_gc_mode() || (!_barriers && chunk->requires_barriers())) {\n@@ -1843,1 +1808,1 @@\n-      _barriers = ConfigT::requires_barriers(chunk);\n+      _barriers = chunk->requires_barriers();\n@@ -1869,2 +1834,2 @@\n-    chunk->set_parent_raw<typename ConfigT::OopT>(chunk0);\n-    chunk->set_cont_raw<typename ConfigT::OopT>(_cont.mirror());\n+    chunk->set_parent_raw(chunk0);\n+    chunk->set_cont_raw(_cont.mirror());\n@@ -1874,1 +1839,1 @@\n-      assert(!ConfigT::requires_barriers(chunk), \"Unfamiliar GC requires barriers on TLAB allocation\");\n+      assert(!chunk->requires_barriers(), \"Unfamiliar GC requires barriers on TLAB allocation\");\n@@ -1876,1 +1841,1 @@\n-      _barriers = ConfigT::requires_barriers(chunk);\n+      _barriers = chunk->requires_barriers();\n@@ -1986,2 +1951,1 @@\n-template<typename ConfigT, bool preempt>\n-static inline int freeze0(JavaThread* current, intptr_t* const sp) {\n+static inline int freeze0(JavaThread* current, intptr_t* const sp, bool preempt) {\n@@ -2029,1 +1993,1 @@\n-  Freeze<ConfigT> fr(current, cont, preempt);\n+  Freeze fr(current, cont, preempt);\n@@ -2230,9 +2194,2 @@\n-class ThawBase { \/\/ avoids the template of the Thaw class\n-protected:\n-  static inline void derelativize_interpreted_frame_metadata(const frame& hf, const frame& f);\n-  static inline void set_interpreter_frame_bottom(const frame& f, intptr_t* bottom);\n-};\n-\n-template <typename ConfigT>\n-class Thaw : public ThawBase {\n-private:\n+class Thaw {\n+ private:\n@@ -2260,0 +2217,3 @@\n+  static inline void derelativize_interpreted_frame_metadata(const frame& hf, const frame& f);\n+  static inline void set_interpreter_frame_bottom(const frame& f, intptr_t* bottom);\n+\n@@ -2287,1 +2247,1 @@\n-    _barriers = ConfigT::requires_barriers(chunk);\n+    _barriers =  chunk->requires_barriers();\n@@ -2362,1 +2322,1 @@\n-    const bool is_last = empty && chunk->is_parent_null<typename ConfigT::OopT>();\n+    const bool is_last = empty && chunk->is_parent_null();\n@@ -2612,2 +2572,2 @@\n-    chunk->bitmap().clear_range(chunk->bit_index_for((typename ConfigT::OopT*)start),\n-                                chunk->bit_index_for((typename ConfigT::OopT*)(start+range)));\n+    chunk->bitmap().clear_range(chunk->bit_index_for(start),\n+                                chunk->bit_index_for((start+range)));\n@@ -2858,1 +2818,0 @@\n-template<typename ConfigT>\n@@ -2893,1 +2852,1 @@\n-  Thaw<ConfigT> thw(thread, cont);\n+  Thaw thw(thread, cont);\n@@ -3127,3 +3086,0 @@\n-static address thaw_entry   = nullptr;\n-static address freeze_entry = nullptr;\n-\n@@ -3131,2 +3087,1 @@\n-  assert(::thaw_entry != nullptr,  \"\");\n-  return ::thaw_entry;\n+  return (address)thaw;\n@@ -3136,2 +3091,1 @@\n-  assert(::freeze_entry != nullptr, \"\");\n-  return ::freeze_entry;\n+  return (address)freeze;\n@@ -3140,40 +3094,0 @@\n-class ConfigResolve {\n-public:\n-  static void resolve() { resolve_compressed(); }\n-\n-  static void resolve_compressed() {\n-    UseCompressedOops ? resolve_gc<true>()\n-                      : resolve_gc<false>();\n-  }\n-\n-private:\n-  template <bool use_compressed>\n-  static void resolve_gc() {\n-    BarrierSet* bs = BarrierSet::barrier_set();\n-    assert(bs != NULL, \"freeze\/thaw invoked before BarrierSet is set\");\n-    switch (bs->kind()) {\n-#define BARRIER_SET_RESOLVE_BARRIER_CLOSURE(bs_name)                    \\\n-      case BarrierSet::bs_name: {                                       \\\n-        resolve<use_compressed, typename BarrierSet::GetType<BarrierSet::bs_name>::type>(); \\\n-      }                                                                 \\\n-        break;\n-      FOR_EACH_CONCRETE_BARRIER_SET_DO(BARRIER_SET_RESOLVE_BARRIER_CLOSURE)\n-#undef BARRIER_SET_RESOLVE_BARRIER_CLOSURE\n-\n-    default:\n-      fatal(\"BarrierSet resolving not implemented\");\n-    };\n-  }\n-\n-  template <bool use_compressed, typename BarrierSetT>\n-  static void resolve() {\n-    typedef Config<use_compressed ? oop_kind::NARROW : oop_kind::WIDE, BarrierSetT> SelectedConfigT;\n-\n-    freeze_entry = (address)freeze<SelectedConfigT>;\n-    preempt_freeze = SelectedConfigT::freeze_preempt;\n-\n-    \/\/ if we want, we could templatize by king and have three different that entries\n-    thaw_entry   = (address)thaw<SelectedConfigT>;\n-  }\n-};\n-\n@@ -3193,1 +3107,0 @@\n-  ConfigResolve::resolve();\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":30,"deletions":117,"binary":false,"changes":147,"status":"modified"}]}