{"files":[{"patch":"@@ -66,2 +66,1 @@\n-\/\/ creates the yield stub frame faster than JavaThread::last_frame\n-inline frame ContinuationHelper::last_frame(JavaThread* thread) {\n+frame ContinuationEntry::to_frame() const {\n@@ -72,6 +71,1 @@\n-frame ContinuationEntry::to_frame() {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) {\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n@@ -94,1 +88,0 @@\n-template <typename ConfigT>\n@@ -96,1 +89,1 @@\n-inline frame Freeze<ConfigT>::sender(const frame& f) {\n+inline frame FreezeBase::sender(const frame& f) {\n@@ -134,2 +127,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-inline BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n+BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n@@ -496,1 +496,1 @@\n-inline intptr_t* frame::interpreter_frame_tos_at(jint offset) const {\n+intptr_t* frame::interpreter_frame_tos_at(jint offset) const {\n@@ -523,4 +523,0 @@\n-\n-void frame::describe_top_pd(FrameValues& values) {\n-  Unimplemented();\n-}\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-\/\/ creates the yield stub frame faster than JavaThread::last_frame\n-inline frame ContinuationHelper::last_frame(JavaThread* thread) {\n+frame ContinuationEntry::to_frame() const {\n@@ -72,6 +71,1 @@\n-frame ContinuationEntry::to_frame() {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) {\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n@@ -94,1 +88,0 @@\n-template <typename ConfigT>\n@@ -96,1 +89,1 @@\n-inline frame Freeze<ConfigT>::sender(const frame& f) {\n+inline frame FreezeBase::sender(const frame& f) {\n@@ -134,2 +127,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -377,4 +377,0 @@\n-\n-void frame::describe_top_pd(FrameValues& values) {\n-  Unimplemented();\n-}\n@@ -399,1 +395,1 @@\n-inline BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n+BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n@@ -403,1 +399,1 @@\n-inline intptr_t* frame::interpreter_frame_tos_at(jint offset) const {\n+intptr_t* frame::interpreter_frame_tos_at(jint offset) const {\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-\/\/ creates the yield stub frame faster than JavaThread::last_frame\n-inline frame ContinuationHelper::last_frame(JavaThread* thread) {\n+frame ContinuationEntry::to_frame() const {\n@@ -72,6 +71,1 @@\n-frame ContinuationEntry::to_frame() {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) {\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n@@ -94,1 +88,0 @@\n-template <typename ConfigT>\n@@ -96,1 +89,1 @@\n-inline frame Freeze<ConfigT>::sender(const frame& f) {\n+inline frame FreezeBase::sender(const frame& f) {\n@@ -134,2 +127,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -635,4 +635,0 @@\n-\n-void frame::describe_top_pd(FrameValues& values) {\n-  Unimplemented();\n-}\n@@ -647,1 +643,1 @@\n-inline BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n+BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n@@ -651,1 +647,1 @@\n-inline intptr_t* frame::interpreter_frame_tos_at(jint offset) const {\n+intptr_t* frame::interpreter_frame_tos_at(jint offset) const {\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-\/\/ creates the yield stub frame faster than JavaThread::last_frame\n-inline frame ContinuationHelper::last_frame(JavaThread* thread) {\n+frame ContinuationEntry::to_frame() const {\n@@ -72,6 +71,1 @@\n-frame ContinuationEntry::to_frame() {\n-  Unimplemented();\n-  return frame();\n-}\n-\n-void ContinuationEntry::update_register_map(RegisterMap* map) {\n+void ContinuationEntry::update_register_map(RegisterMap* map) const {\n@@ -94,1 +88,0 @@\n-template <typename ConfigT>\n@@ -96,1 +89,1 @@\n-inline frame Freeze<ConfigT>::sender(const frame& f) {\n+inline frame FreezeBase::sender(const frame& f) {\n@@ -134,2 +127,1 @@\n-template <typename ConfigT>\n-inline void Thaw<ConfigT>::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n+inline void ThawBase::set_interpreter_frame_bottom(const frame& f, intptr_t* bottom) {\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-inline BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n+BasicObjectLock* frame::interpreter_frame_monitor_end() const {\n@@ -417,5 +417,0 @@\n-\n-void frame::describe_top_pd(FrameValues& values) {\n-\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/frame_zero.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,0 @@\n-\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/atomic_linux_arm.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/atomic_linux_x86.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -263,0 +263,4 @@\n+#if !defined(AMD64) || !defined(AARCH64) || defined(ZERO)\n+  \/\/ Suppress compilation error from dummy function (somewhere).\n+  if (to != nullptr)\n+#endif\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+#include \"runtime\/sharedRuntime.hpp\"\n@@ -218,0 +219,1 @@\n+#if (defined(AMD64) || defined(AARCH64)) && !defined(ZERO)\n@@ -248,0 +250,1 @@\n+#endif \/\/ x64 or aarch64\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-static volatile int64_t next_thread_id = 2; \/\/ starting at 2, excluding the primordial thread id\n+static volatile intptr_t next_thread_id = 2; \/\/ starting at 2, excluding the primordial thread id\n","filename":"src\/hotspot\/share\/runtime\/threadIdentifiers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,5 +177,0 @@\n-  if (_frame.is_empty()) {\n-    _mode = at_end_mode;\n-    return true;\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/vframe.inline.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}