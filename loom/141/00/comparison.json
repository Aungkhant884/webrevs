{"files":[{"patch":"@@ -1114,11 +1114,11 @@\n-  static inline oop scope(oop ref);\n-  static inline oop target(oop ref);\n-  static inline oop parent(oop ref);\n-  static inline oop yieldInfo(oop ref);\n-  static inline void set_yieldInfo(oop ref, oop value);\n-  static inline stackChunkOop tail(oop ref);\n-  static inline void set_tail(oop ref, stackChunkOop value);\n-  static inline bool on_local_stack(oop ref, address adr);\n-  static inline bool done(oop ref);\n-  static inline bool is_preempted(oop ref);\n-  static inline void set_preempted(oop ref, bool value);\n+  static inline oop scope(oop continuation);\n+  static inline oop target(oop continuation);\n+  static inline oop parent(oop continuation);\n+  static inline oop yieldInfo(oop continuation);\n+  static inline void set_yieldInfo(oop continuation, oop value);\n+  static inline stackChunkOop tail(oop continuation);\n+  static inline void set_tail(oop continuation, stackChunkOop value);\n+  static inline bool on_local_stack(oop continuation, address adr);\n+  static inline bool done(oop continuation);\n+  static inline bool is_preempted(oop continuation);\n+  static inline void set_preempted(oop continuation, bool value);\n@@ -1155,2 +1155,2 @@\n-  static inline oop parent(oop ref);\n-  static inline void set_parent(oop ref, oop value);\n+  static inline oop parent(oop chunk);\n+  static inline void set_parent(oop chunk, oop value);\n@@ -1158,1 +1158,1 @@\n-  static inline bool is_parent_null(oop ref); \/\/ bypasses barriers for a faster test\n+  static inline bool is_parent_null(oop chunk); \/\/ bypasses barriers for a faster test\n@@ -1160,1 +1160,1 @@\n-  static inline void set_parent_raw(oop ref, oop value);\n+  static inline void set_parent_raw(oop chunk, oop value);\n@@ -1162,2 +1162,2 @@\n-  static inline int size(oop ref);\n-  static inline void set_size(HeapWord* ref, int value);\n+  static inline int size(oop chunk);\n+  static inline void set_size(HeapWord* chunk, int value);\n@@ -1165,9 +1165,9 @@\n-  static inline int sp(oop ref);\n-  static inline void set_sp(oop ref, int value);\n-  static inline void set_sp(HeapWord* ref, int value); \/\/ used while allocating\n-  static inline intptr_t pc(oop ref);\n-  static inline void set_pc(oop ref, intptr_t value);\n-  static inline int argsize(oop ref);\n-  static inline void set_argsize(oop ref, int value);\n-  static inline uint8_t flags(oop ref);\n-  static inline void set_flags(oop ref, uint8_t value);\n+  static inline int sp(oop chunk);\n+  static inline void set_sp(oop chunk, int value);\n+  static inline void set_sp(HeapWord* chunk, int value); \/\/ used while allocating\n+  static inline intptr_t pc(oop chunk);\n+  static inline void set_pc(oop chunk, intptr_t value);\n+  static inline int argsize(oop chunk);\n+  static inline void set_argsize(oop chunk, int value);\n+  static inline uint8_t flags(oop chunk);\n+  static inline void set_flags(oop chunk, uint8_t value);\n@@ -1175,2 +1175,2 @@\n-  static inline int maxSize(oop ref);\n-  static inline void set_maxSize(oop ref, int value);\n+  static inline int maxSize(oop chunk);\n+  static inline void set_maxSize(oop chunk, int value);\n@@ -1179,2 +1179,2 @@\n-  static inline oop cont(oop ref);\n-  static inline void set_cont(oop ref, oop value);\n+  static inline oop cont(oop chunk);\n+  static inline void set_cont(oop chunk, oop value);\n@@ -1182,1 +1182,1 @@\n-  static inline oop cont_raw(oop ref);\n+  static inline oop cont_raw(oop chunk);\n@@ -1184,1 +1184,1 @@\n-  static inline void set_cont_raw(oop ref, oop value);\n+  static inline void set_cont_raw(oop chunk, oop value);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -227,2 +227,2 @@\n-inline oop jdk_internal_vm_Continuation::scope(oop ref) {\n-  return ref->obj_field(_scope_offset);\n+inline oop jdk_internal_vm_Continuation::scope(oop continuation) {\n+  return continuation->obj_field(_scope_offset);\n@@ -231,2 +231,2 @@\n-inline oop jdk_internal_vm_Continuation::target(oop ref) {\n-  return ref->obj_field(_target_offset);\n+inline oop jdk_internal_vm_Continuation::target(oop continuation) {\n+  return continuation->obj_field(_target_offset);\n@@ -235,2 +235,2 @@\n-inline oop jdk_internal_vm_Continuation::parent(oop ref) {\n-  return ref->obj_field(_parent_offset);\n+inline oop jdk_internal_vm_Continuation::parent(oop continuation) {\n+  return continuation->obj_field(_parent_offset);\n@@ -239,2 +239,2 @@\n-inline oop jdk_internal_vm_Continuation::yieldInfo(oop ref) {\n-  return ref->obj_field(_yieldInfo_offset);\n+inline oop jdk_internal_vm_Continuation::yieldInfo(oop continuation) {\n+  return continuation->obj_field(_yieldInfo_offset);\n@@ -243,2 +243,2 @@\n-inline void jdk_internal_vm_Continuation::set_yieldInfo(oop ref, oop value) {\n-  ref->obj_field_put(_yieldInfo_offset, value);\n+inline void jdk_internal_vm_Continuation::set_yieldInfo(oop continuation, oop value) {\n+  continuation->obj_field_put(_yieldInfo_offset, value);\n@@ -247,2 +247,2 @@\n-inline stackChunkOop jdk_internal_vm_Continuation::tail(oop ref) {\n-  return stackChunkOopDesc::cast(ref->obj_field(_tail_offset));\n+inline stackChunkOop jdk_internal_vm_Continuation::tail(oop continuation) {\n+  return stackChunkOopDesc::cast(continuation->obj_field(_tail_offset));\n@@ -251,2 +251,2 @@\n-inline void jdk_internal_vm_Continuation::set_tail(oop ref, stackChunkOop value) {\n-  ref->obj_field_put(_tail_offset, value);\n+inline void jdk_internal_vm_Continuation::set_tail(oop continuation, stackChunkOop value) {\n+  continuation->obj_field_put(_tail_offset, value);\n@@ -255,2 +255,2 @@\n-inline bool jdk_internal_vm_Continuation::done(oop ref) {\n-  return ref->bool_field(_done_offset);\n+inline bool jdk_internal_vm_Continuation::done(oop continuation) {\n+  return continuation->bool_field(_done_offset);\n@@ -259,2 +259,2 @@\n-inline bool jdk_internal_vm_Continuation::is_preempted(oop ref) {\n-  return ref->bool_field(_preempted_offset);\n+inline bool jdk_internal_vm_Continuation::is_preempted(oop continuation) {\n+  return continuation->bool_field(_preempted_offset);\n@@ -263,2 +263,2 @@\n-inline void jdk_internal_vm_Continuation::set_preempted(oop ref, bool value) {\n-  ref->bool_field_put(_preempted_offset, (jboolean)value);\n+inline void jdk_internal_vm_Continuation::set_preempted(oop continuation, bool value) {\n+  continuation->bool_field_put(_preempted_offset, (jboolean)value);\n@@ -267,2 +267,2 @@\n-inline oop jdk_internal_vm_StackChunk::parent(oop ref) {\n-  return ref->obj_field(_parent_offset);\n+inline oop jdk_internal_vm_StackChunk::parent(oop chunk) {\n+  return chunk->obj_field(_parent_offset);\n@@ -271,2 +271,2 @@\n-inline void jdk_internal_vm_StackChunk::set_parent(oop ref, oop value) {\n-  ref->obj_field_put(_parent_offset, value);\n+inline void jdk_internal_vm_StackChunk::set_parent(oop chunk, oop value) {\n+  chunk->obj_field_put(_parent_offset, value);\n@@ -276,2 +276,2 @@\n-inline bool jdk_internal_vm_StackChunk::is_parent_null(oop ref) {\n-  return (oop)RawAccess<>::oop_load(ref->field_addr<P>(_parent_offset)) == NULL;\n+inline bool jdk_internal_vm_StackChunk::is_parent_null(oop chunk) {\n+  return (oop)RawAccess<>::oop_load(chunk->field_addr<P>(_parent_offset)) == NULL;\n@@ -281,2 +281,2 @@\n-inline void jdk_internal_vm_StackChunk::set_parent_raw(oop ref, oop value) {\n-  RawAccess<>::oop_store(ref->field_addr<P>(_parent_offset), value);\n+inline void jdk_internal_vm_StackChunk::set_parent_raw(oop chunk, oop value) {\n+  RawAccess<>::oop_store(chunk->field_addr<P>(_parent_offset), value);\n@@ -285,2 +285,2 @@\n-inline oop jdk_internal_vm_StackChunk::cont(oop ref) {\n-  return ref->obj_field(_cont_offset);\n+inline oop jdk_internal_vm_StackChunk::cont(oop chunk) {\n+  return chunk->obj_field(_cont_offset);\n@@ -289,2 +289,2 @@\n-inline void jdk_internal_vm_StackChunk::set_cont(oop ref, oop value) {\n-  ref->obj_field_put(_cont_offset, value);\n+inline void jdk_internal_vm_StackChunk::set_cont(oop chunk, oop value) {\n+  chunk->obj_field_put(_cont_offset, value);\n@@ -294,2 +294,2 @@\n-inline oop jdk_internal_vm_StackChunk::cont_raw(oop ref) {\n-  return (oop)RawAccess<>::oop_load(ref->field_addr<P>(_cont_offset));\n+inline oop jdk_internal_vm_StackChunk::cont_raw(oop chunk) {\n+  return (oop)RawAccess<>::oop_load(chunk->field_addr<P>(_cont_offset));\n@@ -299,2 +299,2 @@\n-inline void jdk_internal_vm_StackChunk::set_cont_raw(oop ref, oop value) {\n-  RawAccess<>::oop_store(ref->field_addr<P>(_cont_offset), value);\n+inline void jdk_internal_vm_StackChunk::set_cont_raw(oop chunk, oop value) {\n+  RawAccess<>::oop_store(chunk->field_addr<P>(_cont_offset), value);\n@@ -303,2 +303,2 @@\n-inline int jdk_internal_vm_StackChunk::size(oop ref) {\n-  return ref->int_field(_size_offset);\n+inline int jdk_internal_vm_StackChunk::size(oop chunk) {\n+  return chunk->int_field(_size_offset);\n@@ -307,2 +307,5 @@\n-inline void jdk_internal_vm_StackChunk::set_size(HeapWord* ref, int value) {\n-  *(cast_to_oop(ref))->field_addr<jint>(_size_offset) = value;\n+inline void jdk_internal_vm_StackChunk::set_size(HeapWord* chunk, int value) {\n+  \/\/ Used by StackChunkAllocator before the Object has been finished,\n+  \/\/ so don't cast too oop and use int_field_put in this function.\n+  assert(_size_offset != 0, \"must be set\");\n+  *(int*)(((char*)chunk) + _size_offset) = (int)value;\n@@ -311,2 +314,2 @@\n-inline int jdk_internal_vm_StackChunk::sp(oop ref) {\n-  return ref->int_field(_sp_offset);\n+inline int jdk_internal_vm_StackChunk::sp(oop chunk) {\n+  return chunk->int_field(_sp_offset);\n@@ -315,2 +318,2 @@\n-inline void jdk_internal_vm_StackChunk::set_sp(oop ref, int value) {\n-  ref->int_field_put(_sp_offset, value);\n+inline void jdk_internal_vm_StackChunk::set_sp(oop chunk, int value) {\n+  chunk->int_field_put(_sp_offset, value);\n@@ -319,2 +322,5 @@\n-inline void jdk_internal_vm_StackChunk::set_sp(HeapWord* ref, int value) {\n-  *(cast_to_oop(ref))->field_addr<jint>(_sp_offset) = value;\n+inline void jdk_internal_vm_StackChunk::set_sp(HeapWord* chunk, int value) {\n+  \/\/ Used by StackChunkAllocator before the Object has been finished,\n+  \/\/ so don't cast too oop and use int_field_put in this function.\n+  assert(_sp_offset != 0, \"must be set\");\n+  *(int*)(((char*)chunk) + _sp_offset) = (int)value;\n@@ -323,2 +329,2 @@\n-inline intptr_t jdk_internal_vm_StackChunk::pc(oop ref) {\n-  return ref->long_field(_pc_offset);\n+inline intptr_t jdk_internal_vm_StackChunk::pc(oop chunk) {\n+  return chunk->long_field(_pc_offset);\n@@ -327,2 +333,2 @@\n-inline void jdk_internal_vm_StackChunk::set_pc(oop ref, intptr_t value) {\n-  ref->long_field_put(_pc_offset, value);\n+inline void jdk_internal_vm_StackChunk::set_pc(oop chunk, intptr_t value) {\n+  chunk->long_field_put(_pc_offset, value);\n@@ -331,2 +337,2 @@\n-inline int jdk_internal_vm_StackChunk::argsize(oop ref) {\n-  return ref->int_field(_argsize_offset);\n+inline int jdk_internal_vm_StackChunk::argsize(oop chunk) {\n+  return chunk->int_field(_argsize_offset);\n@@ -335,2 +341,2 @@\n-inline void jdk_internal_vm_StackChunk::set_argsize(oop ref, int value) {\n-  ref->int_field_put(_argsize_offset, value);\n+inline void jdk_internal_vm_StackChunk::set_argsize(oop chunk, int value) {\n+  chunk->int_field_put(_argsize_offset, value);\n@@ -339,2 +345,2 @@\n-inline uint8_t jdk_internal_vm_StackChunk::flags(oop ref) {\n-  return Atomic::load(ref->field_addr<uint8_t>(_flags_offset));\n+inline uint8_t jdk_internal_vm_StackChunk::flags(oop chunk) {\n+  return Atomic::load(chunk->field_addr<uint8_t>(_flags_offset));\n@@ -343,2 +349,2 @@\n-inline void jdk_internal_vm_StackChunk::set_flags(oop ref, uint8_t value) {\n-  Atomic::store(ref->field_addr<uint8_t>(_flags_offset), value);\n+inline void jdk_internal_vm_StackChunk::set_flags(oop chunk, uint8_t value) {\n+  Atomic::store(chunk->field_addr<uint8_t>(_flags_offset), value);\n@@ -347,2 +353,2 @@\n-inline int jdk_internal_vm_StackChunk::maxSize(oop ref) {\n-  return ref->int_field(_maxSize_offset);\n+inline int jdk_internal_vm_StackChunk::maxSize(oop chunk) {\n+  return chunk->int_field(_maxSize_offset);\n@@ -351,1 +357,1 @@\n-inline void jdk_internal_vm_StackChunk::set_maxSize(oop ref, int value) {\n+inline void jdk_internal_vm_StackChunk::set_maxSize(oop chunk, int value) {\n@@ -353,1 +359,1 @@\n-  jint old = maxSize(ref);\n+  jint old = maxSize(chunk);\n@@ -356,1 +362,1 @@\n-  ref->int_field_put(_maxSize_offset, value);\n+  chunk->int_field_put(_maxSize_offset, value);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.inline.hpp","additions":69,"deletions":63,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -1998,0 +1998,1 @@\n+  \/\/ Process oops in the nmethod\n@@ -1999,0 +2000,2 @@\n+\n+  \/\/ CodeCache sweeper support\n@@ -2000,0 +2003,1 @@\n+\n@@ -2002,0 +2006,3 @@\n+\n+  \/\/ There's an assumption made that this function is not used by GCs that\n+  \/\/ relocate objects, and therefore we don't call fix_oop_relocations.\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -79,0 +79,4 @@\n+\n+  \/\/ Evacuate objects pointed to by the nmethod\n+  nm->oops_do(&_oc);\n+\n@@ -80,0 +84,1 @@\n+    \/\/ CodeCache sweeper support\n@@ -81,0 +86,1 @@\n+\n@@ -86,1 +92,1 @@\n-  nm->oops_do(&_oc);\n+\n@@ -91,0 +97,1 @@\n+  \/\/ Mark through oops in the nmethod\n@@ -92,0 +99,2 @@\n+\n+  \/\/ CodeCache sweeper support\n@@ -93,0 +102,1 @@\n+\n@@ -97,0 +107,2 @@\n+\n+  \/\/ The oops were only marked, no need to update oop relocations.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeBlobClosure.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -69,1 +69,3 @@\n-  nm->mark_as_maybe_on_continuation();\n+  \/\/ If the nmethod is the only thing pointing to the oops, and we are using a\n+  \/\/ SATB GC, then it is important that this code marks them live. This is done\n+  \/\/ by the phantom load.\n@@ -72,0 +74,4 @@\n+\n+  \/\/ CodeCache sweeper support\n+  nm->mark_as_maybe_on_continuation();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  \/\/ Class redefinition support\n+  \/\/ CodeCache sweeper support\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -703,0 +703,2 @@\n+\n+      \/\/ CodeCache sweeper support\n@@ -704,0 +706,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+    \/\/ Process the oops in the nmethod\n@@ -62,3 +63,1 @@\n-    if (_fix_relocations) {\n-      nm->fix_oop_relocations();\n-    }\n+\n@@ -66,0 +65,1 @@\n+      \/\/ CodeCache sweeper support\n@@ -67,0 +67,1 @@\n+\n@@ -72,0 +73,4 @@\n+\n+    if (_fix_relocations) {\n+      nm->fix_oop_relocations();\n+    }\n","filename":"src\/hotspot\/share\/memory\/iterator.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -102,0 +102,2 @@\n+  \/\/\n+  \/\/ Used to determine metadata liveness for class unloading GCs.\n@@ -106,0 +108,2 @@\n+\n+  \/\/ Class redefinition needs to get notified about methods from stackChunkOops\n@@ -107,0 +111,1 @@\n+  \/\/ The code cache sweeper needs to get notified about methods from stackChunkOops\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  \/\/ Mark interpreted frames for marking_cycle\n+  \/\/ Mark interpreted frames for class redefinition\n","filename":"src\/hotspot\/share\/memory\/iterator.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,0 +113,5 @@\n+\/\/ The high-order bit tagging has only been verified to work on these platforms.\n+#if (defined(X86) && defined(_LP64)) || defined(AARCH64)\n+#define HIGH_ORDER_BIT_TAGGING_SUPPORTED\n+#endif\n+\n@@ -120,1 +125,1 @@\n-#if defined(X86) || defined(AARCH64)\n+#ifdef HIGH_ORDER_BIT_TAGGING_SUPPORTED\n@@ -126,1 +131,1 @@\n-#if defined(X86) || defined(AARCH64)\n+#ifdef HIGH_ORDER_BIT_TAGGING_SUPPORTED\n@@ -138,1 +143,1 @@\n-#if defined(X86) || defined(AARCH64)\n+#ifdef HIGH_ORDER_BIT_TAGGING_SUPPORTED\n@@ -372,0 +377,1 @@\n+    \/\/ Class redefinition support\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -691,1 +691,1 @@\n-  assert (ce != nullptr, \"\");\n+  assert(ce != nullptr, \"\");\n@@ -1619,1 +1619,1 @@\n-  \/\/ Mark frame_method's marking cycle for GC and redefinition on_stack calculation.\n+  \/\/ Mark frame_method's GC epoch for class redefinition on_stack calculation.\n@@ -2063,1 +2063,1 @@\n-  assert (ce != nullptr, \"\");\n+  assert(ce != nullptr, \"\");\n@@ -2750,1 +2750,1 @@\n-  assert (entry != nullptr, \"\");\n+  assert(entry != nullptr, \"\");\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}