{"files":[{"patch":"@@ -3538,5 +3538,0 @@\n-  __ bind(*op->stub()->continuation());\n-  \n-  NOT_LP64(Register scratch = op->scratch_opr()->as_register();)\n-  Register thread = LP64_ONLY(r15_thread) NOT_LP64(scratch);\n-  NOT_LP64(__ get_thread(thread);)\n@@ -3544,0 +3539,7 @@\n+    \/\/ If deoptimization happens in Runtime1::monitorenter, inc_held_monitor_count after backing from slowpath\n+    \/\/ will be skipped. Solution is\n+    \/\/ 1. Increase only in fastpath\n+    \/\/ 2. Runtime1::monitorenter increase count after locking\n+    NOT_LP64(Register scratch = op->scratch_opr()->as_register();)\n+    Register thread = LP64_ONLY(r15_thread) NOT_LP64(scratch);\n+    NOT_LP64(__ get_thread(thread);)\n@@ -3545,1 +3547,7 @@\n-  } else if (op->code() == lir_unlock) {\n+  }\n+  __ bind(*op->stub()->continuation());\n+  if (op->code() == lir_unlock) {\n+    \/\/ unlock in slowpath is JRT_Leaf stub, no deoptimization can happen\n+    NOT_LP64(Register scratch = op->scratch_opr()->as_register();)\n+    Register thread = LP64_ONLY(r15_thread) NOT_LP64(scratch);\n+    NOT_LP64(__ get_thread(thread);)\n@@ -3547,2 +3555,0 @@\n-  } else {\n-    Unimplemented();\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1173,0 +1173,2 @@\n+      NOT_LP64(get_thread(rthread);)\n+      dec_held_monitor_count(rthread);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1245,0 +1245,2 @@\n+      NOT_LP64(__ get_thread(thread);)\n+      __ dec_held_monitor_count(thread);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -710,0 +710,1 @@\n+  current->inc_held_monitor_count();\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2389,2 +2389,0 @@\n-  mem_phi->init_req(1, memproj );\n-  transform_later(mem_phi);\n@@ -2392,0 +2390,2 @@\n+  \/\/ held_monitor_count increased in slowpath (complete_monitor_locking_C_inc_held_monitor_count), need compensate a decreament here\n+  \/\/ this minimizes control flow changes here and add redundant count updates only in slowpath\n@@ -2393,3 +2393,10 @@\n-  Node* count = make_load(region, mem_phi, thread, in_bytes(JavaThread::held_monitor_count_offset()), TypeInt::INT, TypeInt::INT->basic_type());\n-  Node* newcount = transform_later(new AddINode(count, intcon(1)));\n-  Node *store = make_store(region, mem_phi, thread, in_bytes(JavaThread::held_monitor_count_offset()), newcount, T_INT);\n+  Node* dec_count = make_load(slow_ctrl, memproj, thread, in_bytes(JavaThread::held_monitor_count_offset()), TypeInt::INT, TypeInt::INT->basic_type());\n+  Node* new_dec_count = transform_later(new SubINode(dec_count, intcon(1)));\n+  Node *compensate_dec = make_store(slow_ctrl, memproj, thread, in_bytes(JavaThread::held_monitor_count_offset()), new_dec_count, T_INT);\n+  mem_phi->init_req(1, compensate_dec);\n+  transform_later(mem_phi);\n+\n+  \/\/ held_monitor_count increases in all path's post-dominate\n+  Node* inc_count = make_load(region, mem_phi, thread, in_bytes(JavaThread::held_monitor_count_offset()), TypeInt::INT, TypeInt::INT->basic_type());\n+  Node* new_inc_count = transform_later(new AddINode(inc_count, intcon(1)));\n+  Node *store = make_store(region, mem_phi, thread, in_bytes(JavaThread::held_monitor_count_offset()), new_inc_count, T_INT);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-  gen(env, _complete_monitor_locking_Java  , complete_monitor_enter_Type  , SharedRuntime::complete_monitor_locking_C, 0, false, false);\n+  gen(env, _complete_monitor_locking_Java  , complete_monitor_enter_Type  , SharedRuntime::complete_monitor_locking_C_inc_held_monitor_count, 0, false, false);\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1512,1 +1512,1 @@\n-        thread->inc_held_monitor_count();\n+        deoptee_thread->inc_held_monitor_count();\n@@ -1622,1 +1622,0 @@\n-          thread->dec_held_monitor_count();\n@@ -1624,0 +1623,1 @@\n+          thread->dec_held_monitor_count();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2150,0 +2150,5 @@\n+JRT_BLOCK_ENTRY(void, SharedRuntime::complete_monitor_locking_C_inc_held_monitor_count(oopDesc* obj, BasicLock* lock, JavaThread* current))\n+  SharedRuntime::monitor_enter_helper(obj, lock, current);\n+  current->inc_held_monitor_count();\n+JRT_END\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -495,0 +495,1 @@\n+  static void complete_monitor_locking_C_inc_held_monitor_count(oopDesc* obj, BasicLock* lock, JavaThread* current);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1470,0 +1470,2 @@\n+  assert(this->held_monitor_count() == 0, \"held monitor count should be zero\");\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1189,2 +1189,1 @@\n-  void dec_held_monitor_count() { \/* assert (_held_monitor_count > 0, \"\"); -- TODO LOOM: currently this does not hold because we don't handle nesting well *\/\n-                                  _held_monitor_count--; }\n+  void dec_held_monitor_count() { assert (_held_monitor_count > 0, \"\"); _held_monitor_count--; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}