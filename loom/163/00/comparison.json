{"files":[{"patch":"@@ -167,0 +167,6 @@\n+static inline bool is_stack_chunk_class(const Symbol* class_name,\n+                                        const ClassLoaderData* loader_data) {\n+  return (class_name == vmSymbols::jdk_internal_vm_StackChunk() &&\n+          loader_data->is_the_null_class_loader_data());\n+}\n+\n@@ -446,1 +452,1 @@\n-    } else if (class_name == vmSymbols::jdk_internal_vm_StackChunk()) {\n+    } else if (is_stack_chunk_class(class_name, loader_data)) {\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.internal.vm;\n+\n+public class StackChunk {\n+    int i;\n+    int j;\n+    String myName;\n+    public StackChunk() {\n+        System.out.println(\"Constructor called\");\n+        myName = \"StackChunk\";\n+        i = 55;\n+        j = 66;\n+    }\n+    public void print() {\n+        System.out.println(\"My name is \" + myName);\n+    }\n+    public int getI() { return i; }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/vthread\/StackChunk.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test StackChunkClassLoaderTest\n+ * @summary Test that a different jdk.internal.vm.StackChunk can be loaded by non-null class loader\n+ * @library \/test\/lib\n+ * @compile StackChunk.java\n+ * @run main\/othervm StackChunkClassLoaderTest\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.io.FileInputStream;\n+import java.io.File;\n+\n+public class StackChunkClassLoaderTest extends ClassLoader {\n+\n+    public String loaderName;\n+\n+    StackChunkClassLoaderTest(String name) {\n+        this.loaderName = name;\n+    }\n+\n+    \/\/ Get data for pre-compiled class file to load.\n+    public byte[] getClassData(String name) {\n+        try {\n+            String classDir = System.getProperty(\"test.classes\");\n+            String tempName = name.replaceAll(\"\\\\.\", \"\/\");\n+            return new FileInputStream(classDir + File.separator + tempName + \".class\").readAllBytes();\n+        } catch (Exception e) {\n+              return null;\n+        }\n+    }\n+\n+    public Class loadClass(String name) throws ClassNotFoundException {\n+        if (!name.contains(\"StackChunk\")) {\n+            return super.loadClass(name);\n+        }\n+\n+        byte[] data = getClassData(name);\n+        System.out.println(\"name is \" + name);\n+        return defineClass(name, data, 0, data.length);\n+    }\n+\n+  public static void main(java.lang.String[] unused) throws Exception {\n+      ClassLoader cl = new StackChunkClassLoaderTest(\"StackChunkClassLoaderTest\");\n+      Class<?> c = Class.forName(\"jdk.internal.vm.StackChunk\", true, cl);\n+      Object obj = c.getDeclaredConstructor().newInstance();\n+      System.gc();\n+      java.lang.reflect.Method m = c.getMethod(\"print\");\n+      m.invoke(obj);\n+      Method mi = c.getMethod(\"getI\");\n+      Object val = mi.invoke(obj);\n+      if (((Integer)val).intValue() != 55) {\n+          throw new RuntimeException(\"Test failed, StackChunk object corrupt\");\n+      }\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/vthread\/StackChunkClassLoaderTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}