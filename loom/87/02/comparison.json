{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,18 +36,0 @@\n-#ifdef ASSERT\n-bool Frame::assert_frame_laid_out(frame f) {\n-  Unimplemented();\n-  return false;\n-}\n-#endif\n-\n-inline intptr_t** Frame::callee_link_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template<typename FKind>\n-static inline intptr_t* real_fp(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -60,40 +42,0 @@\n-inline address* Interpreted::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n-  Unimplemented();\n-}\n-\n-inline address* Frame::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline address Frame::real_pc(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline void Frame::patch_pc(const frame& f, address pc) {\n-  Unimplemented();\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/continuation_arm.inline.hpp","additions":1,"deletions":59,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ARM_FRAME_HELPERS_ARM_INLINE_HPP\n+#define CPU_ARM_FRAME_HELPERS_ARM_INLINE_HPP\n+\n+\n+#ifdef ASSERT\n+bool Frame::assert_frame_laid_out(frame f) {\n+  Unimplemented();\n+  return false;\n+}\n+#endif\n+\n+inline intptr_t** Frame::callee_link_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template<typename FKind>\n+static inline intptr_t* real_fp(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address* Interpreted::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n+inline address* Frame::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address Frame::real_pc(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline void Frame::patch_pc(const frame& f, address pc) {\n+  Unimplemented();\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+#endif \/\/ CPU_ARM_FRAME_HELPERS_ARM_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/arm\/frame_helpers_arm.inline.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,18 +36,0 @@\n-#ifdef ASSERT\n-bool Frame::assert_frame_laid_out(frame f) {\n-  Unimplemented();\n-  return false;\n-}\n-#endif\n-\n-inline intptr_t** Frame::callee_link_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template<typename FKind>\n-static inline intptr_t* real_fp(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -60,40 +42,0 @@\n-inline address* Interpreted::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n-  Unimplemented();\n-}\n-\n-inline address* Frame::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline address Frame::real_pc(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline void Frame::patch_pc(const frame& f, address pc) {\n-  Unimplemented();\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/continuation_ppc.inline.hpp","additions":1,"deletions":59,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_PPC_FRAME_HELPERS_PPC_INLINE_HPP\n+#define CPU_PPC_FRAME_HELPERS_PPC_INLINE_HPP\n+\n+\n+#ifdef ASSERT\n+bool Frame::assert_frame_laid_out(frame f) {\n+  Unimplemented();\n+  return false;\n+}\n+#endif\n+\n+inline intptr_t** Frame::callee_link_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template<typename FKind>\n+static inline intptr_t* real_fp(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address* Interpreted::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n+inline address* Frame::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address Frame::real_pc(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline void Frame::patch_pc(const frame& f, address pc) {\n+  Unimplemented();\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+#endif \/\/ CPU_PPC_FRAME_HELPERS_PPC_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/ppc\/frame_helpers_ppc.inline.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,0 +124,4 @@\n+void BarrierSetNMethod::arm(nmethod* nm, int arm_value) {\n+  Unimplemented();\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shared\/barrierSetNMethod_ppc.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,18 +36,0 @@\n-#ifdef ASSERT\n-bool Frame::assert_frame_laid_out(frame f) {\n-  Unimplemented();\n-  return false;\n-}\n-#endif\n-\n-inline intptr_t** Frame::callee_link_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template<typename FKind>\n-static inline intptr_t* real_fp(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -60,40 +42,0 @@\n-inline address* Interpreted::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n-  Unimplemented();\n-}\n-\n-inline address* Frame::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline address Frame::real_pc(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline void Frame::patch_pc(const frame& f, address pc) {\n-  Unimplemented();\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/continuation_s390.inline.hpp","additions":1,"deletions":59,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_S390_FRAME_HELPERS_S390_INLINE_HPP\n+#define CPU_S390_FRAME_HELPERS_S390_INLINE_HPP\n+\n+\n+#ifdef ASSERT\n+bool Frame::assert_frame_laid_out(frame f) {\n+  Unimplemented();\n+  return false;\n+}\n+#endif\n+\n+inline intptr_t** Frame::callee_link_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template<typename FKind>\n+static inline intptr_t* real_fp(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address* Interpreted::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n+inline address* Frame::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address Frame::real_pc(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline void Frame::patch_pc(const frame& f, address pc) {\n+  Unimplemented();\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+#endif \/\/ CPU_S390_FRAME_HELPERS_S390_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/s390\/frame_helpers_s390.inline.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,18 +36,0 @@\n-#ifdef ASSERT\n-bool Frame::assert_frame_laid_out(frame f) {\n-  Unimplemented();\n-  return false;\n-}\n-#endif\n-\n-inline intptr_t** Frame::callee_link_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template<typename FKind>\n-static inline intptr_t* real_fp(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n@@ -60,40 +42,0 @@\n-inline address* Interpreted::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n-  Unimplemented();\n-}\n-\n-inline address* Frame::return_pc_address(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline address Frame::real_pc(const frame& f) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline void Frame::patch_pc(const frame& f, address pc) {\n-  Unimplemented();\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-template <bool relative>\n-inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n-  Unimplemented();\n-  return NULL;\n-}\n-\n-inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n-  Unimplemented();\n-  return NULL;\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/continuation_zero.inline.hpp","additions":1,"deletions":59,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_FRAME_HELPERS_ZERO_INLINE_HPP\n+#define CPU_ZERO_FRAME_HELPERS_ZERO_INLINE_HPP\n+\n+\n+#ifdef ASSERT\n+bool Frame::assert_frame_laid_out(frame f) {\n+  Unimplemented();\n+  return false;\n+}\n+#endif\n+\n+inline intptr_t** Frame::callee_link_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template<typename FKind>\n+static inline intptr_t* real_fp(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address* Interpreted::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+void Interpreted::patch_sender_sp(frame& f, intptr_t* sp) {\n+  Unimplemented();\n+}\n+\n+inline address* Frame::return_pc_address(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline address Frame::real_pc(const frame& f) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline void Frame::patch_pc(const frame& f, address pc) {\n+  Unimplemented();\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, InterpreterOopMap* mask) { \/\/ inclusive; this will be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+template <bool relative>\n+inline intptr_t* Interpreted::frame_bottom(const frame& f) { \/\/ exclusive; this will not be copied with the frame\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+inline intptr_t* Interpreted::frame_top(const frame& f, int callee_argsize, bool callee_interpreted) {\n+  Unimplemented();\n+  return NULL;\n+}\n+\n+#endif \/\/ CPU_ZERO_FRAME_HELPERS_ZERO_INLINE_HPP\n","filename":"src\/hotspot\/cpu\/zero\/frame_helpers_zero.inline.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -282,1 +282,1 @@\n-      assert (offset >= 0, \"Derived pointer offset is %ld\", offset);\n+      assert (offset >= 0, \"Derived pointer offset is \" INTPTR_FORMAT, offset);\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}