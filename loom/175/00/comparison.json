{"files":[{"patch":"@@ -2535,1 +2535,1 @@\n-  void set_has_hidden_top_frame(TRAPS) {\n+  void set_has_hidden_top_frame() {\n@@ -2891,1 +2891,1 @@\n-          bt.set_has_hidden_top_frame(CHECK);\n+          bt.set_has_hidden_top_frame();\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include \"oops\/instanceStackChunkKlass.hpp\"\n@@ -215,0 +216,2 @@\n+\n+  InstanceStackChunkKlass::init_offset_of_stack();\n","filename":"src\/hotspot\/share\/classfile\/vmClasses.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-  _is_compiled(compiled),\n@@ -97,0 +96,1 @@\n+  _is_compiled(compiled),\n@@ -123,1 +123,0 @@\n-  _is_compiled(compiled),\n@@ -125,0 +124,1 @@\n+  _is_compiled(compiled),\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,2 +110,0 @@\n-  bool       _is_compiled;\n-\n@@ -115,0 +113,2 @@\n+  bool                _is_compiled;\n+\n@@ -128,2 +128,6 @@\n-  CodeBlob(const char* name, CompilerType type, const CodeBlobLayout& layout, int frame_complete_offset, int frame_size, ImmutableOopMapSet* oop_maps, bool caller_must_gc_arguments, bool compiled = false);\n-  CodeBlob(const char* name, CompilerType type, const CodeBlobLayout& layout, CodeBuffer* cb, int frame_complete_offset, int frame_size, OopMapSet* oop_maps, bool caller_must_gc_arguments, bool compiled = false);\n+  CodeBlob(const char* name, CompilerType type, const CodeBlobLayout& layout, int frame_complete_offset,\n+           int frame_size, ImmutableOopMapSet* oop_maps,\n+           bool caller_must_gc_arguments, bool compiled = false);\n+  CodeBlob(const char* name, CompilerType type, const CodeBlobLayout& layout, CodeBuffer* cb, int frame_complete_offset,\n+           int frame_size, OopMapSet* oop_maps,\n+           bool caller_must_gc_arguments, bool compiled = false);\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -60,1 +60,0 @@\n-#include \"oops\/instanceStackChunkKlass.hpp\"\n@@ -367,2 +366,0 @@\n-\n-    InstanceStackChunkKlass::init_offset_of_stack();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -611,1 +611,0 @@\n-  \/\/ if (Continuation::is_cont_barrier_frame(deoptee)) tty->print_cr(\"WOWEE Continuation::is_cont_barrier_frame(deoptee)\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1142,1 +1142,3 @@\n-void frame::oops_do_internal(OopClosure* f, CodeBlobClosure* cf, DerivedOopClosure* df, DerivedPointerIterationMode derived_mode, const RegisterMap* map, bool use_interpreter_oop_map_cache) const {\n+void frame::oops_do_internal(OopClosure* f, CodeBlobClosure* cf,\n+                             DerivedOopClosure* df, DerivedPointerIterationMode derived_mode,\n+                             const RegisterMap* map, bool use_interpreter_oop_map_cache) const {\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -462,1 +462,3 @@\n-  void oops_do_internal(OopClosure* f, CodeBlobClosure* cf, DerivedOopClosure* df, DerivedPointerIterationMode derived_mode, const RegisterMap* map, bool use_interpreter_oop_map_cache) const;\n+  void oops_do_internal(OopClosure* f, CodeBlobClosure* cf,\n+                        DerivedOopClosure* df, DerivedPointerIterationMode derived_mode,\n+                        const RegisterMap* map, bool use_interpreter_oop_map_cache) const;\n@@ -465,1 +467,3 @@\n-  void oops_code_blob_do(OopClosure* f, CodeBlobClosure* cf, DerivedOopClosure* df, DerivedPointerIterationMode derived_mode, const RegisterMap* map) const;\n+  void oops_code_blob_do(OopClosure* f, CodeBlobClosure* cf,\n+                         DerivedOopClosure* df, DerivedPointerIterationMode derived_mode,\n+                         const RegisterMap* map) const;\n@@ -479,2 +483,10 @@\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf, DerivedOopClosure* df, const RegisterMap* map) { oops_do_internal(f, cf, df, DerivedPointerIterationMode::_ignore, map, true); }\n-  void oops_do(OopClosure* f, CodeBlobClosure* cf, const RegisterMap* map, DerivedPointerIterationMode derived_mode) const { oops_do_internal(f, cf, NULL, derived_mode, map, true); }\n+\n+  void oops_do(OopClosure* f, CodeBlobClosure* cf, DerivedOopClosure* df, const RegisterMap* map) {\n+    oops_do_internal(f, cf, df, DerivedPointerIterationMode::_ignore, map, true);\n+  }\n+\n+  void oops_do(OopClosure* f, CodeBlobClosure* cf, const RegisterMap* map,\n+               DerivedPointerIterationMode derived_mode) const {\n+    oops_do_internal(f, cf, NULL, derived_mode, map, true);\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/frame.hpp","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -467,7 +467,0 @@\n-bool HandshakeState::non_self_queue_filter(HandshakeOperation* op) {\n-  if (op->_handshake_cl->can_be_processed_by(Thread::current())) {\n-    return !op->is_async();\n-  }\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-  virtual bool can_be_processed_by(Thread* thread) { return true; }\n@@ -97,1 +96,0 @@\n-\n@@ -114,1 +112,0 @@\n-  static bool non_self_queue_filter(HandshakeOperation* op);\n@@ -179,1 +176,0 @@\n-\n@@ -184,1 +180,1 @@\n-  bool is_suspended() const                 { return Atomic::load(&_suspended); }\n+  bool is_suspended()                       { return Atomic::load(&_suspended); }\n","filename":"src\/hotspot\/share\/runtime\/handshake.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1929,15 +1929,0 @@\n-void JavaThread::deoptimize_marked_methods_only_anchors() {\n-  if (!has_last_Java_frame()) return;\n-  bool java_callee = false;\n-  StackFrameStream fst(this, false \/* update *\/, true \/* process_frames *\/);\n-  for (; !fst.is_done(); fst.next()) {\n-    if (fst.current()->should_be_deoptimized()) {\n-      if (!java_callee) {\n-        Deoptimization::deoptimize(this, *fst.current());\n-      }\n-    }\n-    java_callee = fst.current()->is_compiled_frame();\n-  }\n-}\n-\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1206,3 +1206,0 @@\n-  enum class CarrierOrVirtual { NONE, CARRIER, VIRTUAL };\n-  inline CarrierOrVirtual which_stack(address adr) const;\n-\n@@ -1556,1 +1553,0 @@\n-  void deoptimize_marked_methods_only_anchors();\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -249,14 +249,0 @@\n-JavaThread::CarrierOrVirtual JavaThread::which_stack(address adr) const {\n-  address stack_end = _stack_base - _stack_size;\n-  if (adr >= stack_end) {\n-    const ContinuationEntry* entry = vthread_continuation();\n-    if (entry != nullptr && (address)entry->entry_sp() > adr) {\n-      return CarrierOrVirtual::VIRTUAL;\n-    }\n-    if (_stack_base > adr) {\n-      return CarrierOrVirtual::CARRIER;\n-    }\n-  }\n-  return CarrierOrVirtual::NONE;\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}