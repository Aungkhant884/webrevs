{"files":[{"patch":"@@ -405,1 +405,1 @@\n-  NOINLINE freeze_result freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top);\n+  NOINLINE freeze_result recurse_freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top);\n@@ -409,2 +409,2 @@\n-  inline void before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool bottom);\n-  inline void after_freeze_java_frame(const frame& hf, bool bottom);\n+  inline void before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool is_bottom_frame);\n+  inline void after_freeze_java_frame(const frame& hf, bool is_bottom_frame);\n@@ -412,1 +412,1 @@\n-  void patch(const frame& f, frame& hf, const frame& caller, bool bottom);\n+  void patch(const frame& f, frame& hf, const frame& caller, bool is_bottom_frame);\n@@ -737,1 +737,1 @@\n-  freeze_result res = freeze(f, caller, 0, false, true);\n+  freeze_result res = recurse_freeze(f, caller, 0, false, true);\n@@ -780,1 +780,1 @@\n-NOINLINE freeze_result FreezeBase::freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top) {\n+NOINLINE freeze_result FreezeBase::recurse_freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top) {\n@@ -827,1 +827,1 @@\n-    freeze_result result = freeze(senderf, caller, argsize, FKind::interpreted, false); \/\/ recursive call\n+    freeze_result result = recurse_freeze(senderf, caller, argsize, FKind::interpreted, false); \/\/ recursive call\n@@ -832,1 +832,1 @@\n-inline void FreezeBase::before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool bottom) {\n+inline void FreezeBase::before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool is_bottom_frame) {\n@@ -836,1 +836,1 @@\n-    ls.print_cr(\"======== FREEZING FRAME interpreted: %d bottom: %d\", f.is_interpreted_frame(), bottom);\n+    ls.print_cr(\"======== FREEZING FRAME interpreted: %d bottom: %d\", f.is_interpreted_frame(), is_bottom_frame);\n@@ -843,1 +843,1 @@\n-inline void FreezeBase::after_freeze_java_frame(const frame& hf, bool bottom) {\n+inline void FreezeBase::after_freeze_java_frame(const frame& hf, bool is_bottom_frame) {\n@@ -850,1 +850,1 @@\n-    if (bottom) {\n+    if (is_bottom_frame) {\n@@ -996,2 +996,2 @@\n-void FreezeBase::patch(const frame& f, frame& hf, const frame& caller, bool bottom) {\n-  if (bottom) {\n+void FreezeBase::patch(const frame& f, frame& hf, const frame& caller, bool is_bottom_frame) {\n+  if (is_bottom_frame) {\n@@ -1031,1 +1031,1 @@\n-         \"frame_sp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n+         \"frame_top: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n@@ -1042,2 +1042,1 @@\n-  intptr_t* const frame_top = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n-  const int argsize = ContinuationHelper::InterpretedFrame::stack_argsize(f);\n+  intptr_t* const stack_frame_top = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n@@ -1045,2 +1044,1 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) >= f.fp() + frame::metadata_words + locals, \"\");\/\/ = on x86\n-  const int fsize = f.fp() + frame::metadata_words + locals - frame_top;\n+  const int fsize = f.fp() + frame::metadata_words + locals - stack_frame_top;\n@@ -1048,1 +1046,4 @@\n-  DEBUG_ONLY(verify_frame_top(f, frame_top));\n+  intptr_t* const stack_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(f);\n+  assert(stack_frame_bottom - stack_frame_top >= fsize, \"\"); \/\/ == on x86\n+\n+  DEBUG_ONLY(verify_frame_top(f, stack_frame_top));\n@@ -1051,0 +1052,1 @@\n+  const int argsize = ContinuationHelper::InterpretedFrame::stack_argsize(f);\n@@ -1062,2 +1064,2 @@\n-  bool bottom = result == freeze_ok_bottom;\n-  assert(!caller.is_empty() || bottom, \"\");\n+  bool is_bottom_frame = result == freeze_ok_bottom;\n+  assert(!caller.is_empty() || is_bottom_frame, \"\");\n@@ -1065,1 +1067,1 @@\n-  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, 0, bottom);)\n+  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, 0, is_bottom_frame);)\n@@ -1070,2 +1072,3 @@\n-  intptr_t* heap_top = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(hf) == heap_top + fsize, \"\");\n+  intptr_t* heap_frame_top = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  intptr_t* heap_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(hf);\n+  assert(heap_frame_bottom == heap_frame_top + fsize, \"\");\n@@ -1074,4 +1077,3 @@\n-  copy_to_chunk(ContinuationHelper::InterpretedFrame::frame_bottom(f) - locals,\n-                ContinuationHelper::InterpretedFrame::frame_bottom(hf) - locals, locals); \/\/ copy locals\n-  copy_to_chunk(frame_top, heap_top, fsize - locals); \/\/ copy rest\n-  assert(!bottom || !caller.is_interpreted_frame() || (heap_top + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(stack_frame_bottom - locals, heap_frame_bottom - locals, locals); \/\/ copy locals\n+  copy_to_chunk(stack_frame_top, heap_frame_top, fsize - locals);                 \/\/ copy rest\n+  assert(!is_bottom_frame || !caller.is_interpreted_frame() || (heap_frame_top + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1081,1 +1083,1 @@\n-  patch(f, hf, caller, bottom);\n+  patch(f, hf, caller, is_bottom_frame);\n@@ -1084,1 +1086,1 @@\n-  DEBUG_ONLY(after_freeze_java_frame(hf, bottom);)\n+  DEBUG_ONLY(after_freeze_java_frame(hf, is_bottom_frame);)\n@@ -1095,1 +1097,2 @@\n-  intptr_t* const frame_top = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const stack_frame_top = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const stack_frame_bottom = ContinuationHelper::CompiledFrame::frame_bottom(f);\n@@ -1097,1 +1100,1 @@\n-  const int fsize = ContinuationHelper::CompiledFrame::frame_bottom(f) + argsize - frame_top;\n+  const int fsize = stack_frame_bottom + argsize - stack_frame_top;\n@@ -1111,2 +1114,2 @@\n-  bool bottom = result == freeze_ok_bottom;\n-  assert(!caller.is_empty() || bottom, \"\");\n+  bool is_bottom_frame = result == freeze_ok_bottom;\n+  assert(!caller.is_empty() || is_bottom_frame, \"\");\n@@ -1114,1 +1117,1 @@\n-  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, argsize, bottom);)\n+  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, argsize, is_bottom_frame);)\n@@ -1118,1 +1121,1 @@\n-  intptr_t* heap_top = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  intptr_t* heap_frame_top = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n@@ -1120,2 +1123,2 @@\n-  copy_to_chunk(frame_top, heap_top, fsize);\n-  assert(!bottom || !caller.is_compiled_frame() || (heap_top + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(stack_frame_top, heap_frame_top, fsize);\n+  assert(!is_bottom_frame || !caller.is_compiled_frame() || (heap_frame_top + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1127,1 +1130,1 @@\n-  patch(f, hf, caller, bottom);\n+  patch(f, hf, caller, is_bottom_frame);\n@@ -1129,1 +1132,1 @@\n-  assert(bottom || Interpreter::contains(ContinuationHelper::CompiledFrame::real_pc(caller)) == caller.is_interpreted_frame(), \"\");\n+  assert(is_bottom_frame || Interpreter::contains(ContinuationHelper::CompiledFrame::real_pc(caller)) == caller.is_interpreted_frame(), \"\");\n@@ -1131,1 +1134,1 @@\n-  DEBUG_ONLY(after_freeze_java_frame(hf, bottom);)\n+  DEBUG_ONLY(after_freeze_java_frame(hf, is_bottom_frame);)\n@@ -1137,1 +1140,1 @@\n-  intptr_t* const frame_top = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n+  intptr_t* const stack_frame_top = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n@@ -1141,1 +1144,1 @@\n-    f.cb()->name(), _freeze_size, fsize, p2i(frame_top), p2i(frame_top+fsize));\n+    f.cb()->name(), _freeze_size, fsize, p2i(stack_frame_top), p2i(stack_frame_top+fsize));\n@@ -1169,2 +1172,2 @@\n-  intptr_t* heap_top = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n-  copy_to_chunk(frame_top, heap_top, fsize);\n+  intptr_t* heap_frame_top = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n+  copy_to_chunk(stack_frame_top, heap_frame_top, fsize);\n@@ -1594,1 +1597,1 @@\n-  void thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top);\n+  void recurse_thaw(const frame& heap_frame, frame& caller, int num_frames, bool top);\n@@ -1857,1 +1860,1 @@\n-  thaw_one_frame(heap_frame, caller, num_frames, true);\n+  recurse_thaw(heap_frame, caller, num_frames, true);\n@@ -1871,1 +1874,1 @@\n-void ThawBase::thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top) {\n+void ThawBase::recurse_thaw(const frame& heap_frame, frame& caller, int num_frames, bool top) {\n@@ -1909,1 +1912,1 @@\n-    thaw_one_frame(_stream.to_frame(), caller, num_frames - 1, false);\n+    recurse_thaw(_stream.to_frame(), caller, num_frames - 1, false);\n@@ -1994,1 +1997,1 @@\n-  const bool bottom = recurse_thaw_java_frame<ContinuationHelper::InterpretedFrame>(caller, num_frames);\n+  const bool is_bottom_frame = recurse_thaw_java_frame<ContinuationHelper::InterpretedFrame>(caller, num_frames);\n@@ -1996,1 +1999,1 @@\n-  DEBUG_ONLY(before_thaw_java_frame(hf, caller, bottom, num_frames);)\n+  DEBUG_ONLY(before_thaw_java_frame(hf, caller, is_bottom_frame, num_frames);)\n@@ -2000,1 +2003,1 @@\n-  frame f = new_stack_frame<ContinuationHelper::InterpretedFrame>(hf, caller, bottom);\n+  frame f = new_stack_frame<ContinuationHelper::InterpretedFrame>(hf, caller, is_bottom_frame);\n@@ -2002,3 +2005,4 @@\n-  intptr_t* const frame_sp = f.sp();\n-  intptr_t* const heap_sp = hf.unextended_sp();\n-  intptr_t* const frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(f);\n+  intptr_t* const stack_frame_top = f.sp();\n+  intptr_t* const stack_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(f);\n+  intptr_t* const heap_frame_top = hf.unextended_sp();\n+  intptr_t* const heap_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(hf);\n@@ -2007,1 +2011,1 @@\n-  const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - heap_sp;\n+  const int fsize = heap_frame_bottom - heap_frame_top;\n@@ -2009,2 +2013,2 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) >= frame_sp + fsize\n-    && ContinuationHelper::InterpretedFrame::frame_bottom(f) <= frame_sp + fsize + 1, \"\"); \/\/ internal alignment on aarch64\n+  assert((stack_frame_bottom >= stack_frame_top + fsize) &&\n+         (stack_frame_bottom <= stack_frame_top + fsize + 1), \"\"); \/\/ internal alignment on aarch64\n@@ -2017,3 +2021,2 @@\n-  copy_from_chunk(ContinuationHelper::InterpretedFrame::frame_bottom(hf) - locals,\n-                  ContinuationHelper::InterpretedFrame::frame_bottom(f) - locals, locals); \/\/ copy locals\n-  copy_from_chunk(heap_sp, frame_sp, fsize - locals); \/\/ copy rest\n+  copy_from_chunk(heap_frame_bottom - locals, stack_frame_bottom - locals, locals); \/\/ copy locals\n+  copy_from_chunk(heap_frame_top, stack_frame_top, fsize - locals);                 \/\/ copy rest\n@@ -2021,1 +2024,1 @@\n-  set_interpreter_frame_bottom(f, frame_bottom); \/\/ the copy overwrites the metadata\n+  set_interpreter_frame_bottom(f, stack_frame_bottom); \/\/ the copy overwrites the metadata\n@@ -2023,1 +2026,1 @@\n-  patch(f, caller, bottom);\n+  patch(f, caller, is_bottom_frame);\n@@ -2026,1 +2029,1 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) <= ContinuationHelper::Frame::frame_top(caller), \"\");\n+  assert(stack_frame_bottom <= ContinuationHelper::Frame::frame_top(caller), \"\");\n@@ -2032,1 +2035,1 @@\n-  if (!bottom) {\n+  if (!is_bottom_frame) {\n@@ -2037,1 +2040,1 @@\n-    clear_bitmap_bits(ContinuationHelper::InterpretedFrame::frame_bottom(hf) - locals, locals);\n+    clear_bitmap_bits(heap_frame_bottom - locals, locals);\n@@ -2040,1 +2043,1 @@\n-  DEBUG_ONLY(after_thaw_java_frame(f, bottom);)\n+  DEBUG_ONLY(after_thaw_java_frame(f, is_bottom_frame);)\n@@ -2052,1 +2055,1 @@\n-  const bool bottom = recurse_thaw_java_frame<ContinuationHelper::CompiledFrame>(caller, num_frames);\n+  const bool is_bottom_frame = recurse_thaw_java_frame<ContinuationHelper::CompiledFrame>(caller, num_frames);\n@@ -2054,1 +2057,1 @@\n-  DEBUG_ONLY(before_thaw_java_frame(hf, caller, bottom, num_frames);)\n+  DEBUG_ONLY(before_thaw_java_frame(hf, caller, is_bottom_frame, num_frames);)\n@@ -2058,1 +2061,1 @@\n-  if ((!bottom && caller.is_interpreted_frame()) || (bottom && Interpreter::contains(_cont.tail()->pc()))) {\n+  if ((!is_bottom_frame && caller.is_interpreted_frame()) || (is_bottom_frame && Interpreter::contains(_cont.tail()->pc()))) {\n@@ -2062,3 +2065,3 @@\n-  frame f = new_stack_frame<ContinuationHelper::CompiledFrame>(hf, caller, bottom);\n-  intptr_t* const frame_sp = f.sp();\n-  intptr_t* const heap_sp = hf.unextended_sp();\n+  frame f = new_stack_frame<ContinuationHelper::CompiledFrame>(hf, caller, is_bottom_frame);\n+  intptr_t* const stack_frame_top = f.sp();\n+  intptr_t* const heap_frame_top = hf.unextended_sp();\n@@ -2066,1 +2069,1 @@\n-  const int added_argsize = (bottom || caller.is_interpreted_frame()) ? hf.compiled_frame_stack_argsize() : 0;\n+  const int added_argsize = (is_bottom_frame || caller.is_interpreted_frame()) ? hf.compiled_frame_stack_argsize() : 0;\n@@ -2070,2 +2073,2 @@\n-  intptr_t* from = heap_sp - frame::metadata_words;\n-  intptr_t* to   = frame_sp - frame::metadata_words;\n+  intptr_t* from = heap_frame_top - frame::metadata_words;\n+  intptr_t* to   = stack_frame_top - frame::metadata_words;\n@@ -2076,2 +2079,2 @@\n-  assert(!bottom || (_cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP()), \"\");\n-  assert(!bottom || hf.compiled_frame_stack_argsize() != 0 || (to + sz && to + sz == _cont.entrySP()), \"\");\n+  assert(!is_bottom_frame || (_cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP()), \"\");\n+  assert(!is_bottom_frame || hf.compiled_frame_stack_argsize() != 0 || (to + sz && to + sz == _cont.entrySP()), \"\");\n@@ -2081,1 +2084,1 @@\n-  patch(f, caller, bottom);\n+  patch(f, caller, is_bottom_frame);\n@@ -2100,1 +2103,1 @@\n-  if (!bottom) {\n+  if (!is_bottom_frame) {\n@@ -2104,1 +2107,1 @@\n-    clear_bitmap_bits(heap_sp + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n+    clear_bitmap_bits(heap_frame_top + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n@@ -2107,1 +2110,1 @@\n-  DEBUG_ONLY(after_thaw_java_frame(f, bottom);)\n+  DEBUG_ONLY(after_thaw_java_frame(f, is_bottom_frame);)\n@@ -2136,2 +2139,2 @@\n-  intptr_t* frame_sp = f.sp();\n-  intptr_t* heap_sp = hf.sp();\n+  intptr_t* stack_frame_top = f.sp();\n+  intptr_t* heap_frame_top = hf.sp();\n@@ -2139,1 +2142,1 @@\n-  copy_from_chunk(heap_sp - frame::metadata_words, frame_sp - frame::metadata_words,\n+  copy_from_chunk(heap_frame_top - frame::metadata_words, stack_frame_top - frame::metadata_words,\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":88,"deletions":85,"binary":false,"changes":173,"status":"modified"}]}