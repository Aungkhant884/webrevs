{"files":[{"patch":"@@ -392,1 +392,1 @@\n-  NOINLINE freeze_result freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top);\n+  NOINLINE freeze_result recurse_freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top);\n@@ -396,2 +396,2 @@\n-  inline void before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool bottom);\n-  inline void after_freeze_java_frame(const frame& hf, bool bottom);\n+  inline void before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool is_bottom_frame);\n+  inline void after_freeze_java_frame(const frame& hf, bool is_bottom_frame);\n@@ -399,1 +399,1 @@\n-  void patch(const frame& f, frame& hf, const frame& caller, bool bottom);\n+  void patch(const frame& f, frame& hf, const frame& caller, bool is_bottom_frame);\n@@ -708,1 +708,1 @@\n-  freeze_result res = freeze(f, caller, 0, false, true);\n+  freeze_result res = recurse_freeze(f, caller, 0, false, true);\n@@ -751,1 +751,1 @@\n-NOINLINE freeze_result FreezeBase::freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top) {\n+NOINLINE freeze_result FreezeBase::recurse_freeze(frame& f, frame& caller, int callee_argsize, bool callee_interpreted, bool top) {\n@@ -794,1 +794,1 @@\n-    freeze_result result = freeze(senderf, caller, argsize, FKind::interpreted, false); \/\/ recursive call\n+    freeze_result result = recurse_freeze(senderf, caller, argsize, FKind::interpreted, false); \/\/ recursive call\n@@ -799,1 +799,1 @@\n-inline void FreezeBase::before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool bottom) {\n+inline void FreezeBase::before_freeze_java_frame(const frame& f, const frame& caller, int fsize, int argsize, bool is_bottom_frame) {\n@@ -803,1 +803,1 @@\n-    ls.print_cr(\"======== FREEZING FRAME interpreted: %d bottom: %d\", f.is_interpreted_frame(), bottom);\n+    ls.print_cr(\"======== FREEZING FRAME interpreted: %d bottom: %d\", f.is_interpreted_frame(), is_bottom_frame);\n@@ -810,1 +810,1 @@\n-inline void FreezeBase::after_freeze_java_frame(const frame& hf, bool bottom) {\n+inline void FreezeBase::after_freeze_java_frame(const frame& hf, bool is_bottom_frame) {\n@@ -817,1 +817,1 @@\n-    if (bottom) {\n+    if (is_bottom_frame) {\n@@ -960,2 +960,2 @@\n-void FreezeBase::patch(const frame& f, frame& hf, const frame& caller, bool bottom) {\n-  if (bottom) {\n+void FreezeBase::patch(const frame& f, frame& hf, const frame& caller, bool is_bottom_frame) {\n+  if (is_bottom_frame) {\n@@ -993,1 +993,1 @@\n-         \"frame_sp: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n+         \"frame_top: \" INTPTR_FORMAT \" Interpreted::frame_top: \" INTPTR_FORMAT,\n@@ -1003,2 +1003,1 @@\n-  intptr_t* const frame_sp = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n-  const int argsize = ContinuationHelper::InterpretedFrame::stack_argsize(f);\n+  intptr_t* const stack_frame_top = ContinuationHelper::InterpretedFrame::frame_top(f, callee_argsize, callee_interpreted);\n@@ -1006,2 +1005,1 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) >= f.fp() + frame::metadata_words + locals, \"\");\/\/ = on x86\n-  const int fsize = f.fp() + frame::metadata_words + locals - frame_sp;\n+  const int fsize = f.fp() + frame::metadata_words + locals - stack_frame_top;\n@@ -1009,1 +1007,4 @@\n-  DEBUG_ONLY(verify_frame_top(f, frame_sp));\n+  intptr_t* const stack_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(f);\n+  assert(stack_frame_bottom - stack_frame_top >= fsize, \"\"); \/\/ == on x86\n+\n+  DEBUG_ONLY(verify_frame_top(f, stack_frame_top));\n@@ -1012,0 +1013,1 @@\n+  const int argsize = ContinuationHelper::InterpretedFrame::stack_argsize(f);\n@@ -1023,1 +1025,1 @@\n-  bool bottom = result == freeze_ok_bottom;\n+  bool is_bottom_frame = result == freeze_ok_bottom;\n@@ -1025,1 +1027,1 @@\n-  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, 0, bottom);)\n+  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, 0, is_bottom_frame);)\n@@ -1030,2 +1032,3 @@\n-  intptr_t* heap_sp = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(hf) == heap_sp + fsize, \"\");\n+  intptr_t* heap_frame_top = ContinuationHelper::InterpretedFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  intptr_t* heap_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(hf);\n+  assert(heap_frame_bottom == heap_frame_top + fsize, \"\");\n@@ -1034,4 +1037,3 @@\n-  copy_to_chunk(ContinuationHelper::InterpretedFrame::frame_bottom(f) - locals,\n-                ContinuationHelper::InterpretedFrame::frame_bottom(hf) - locals, locals); \/\/ copy locals\n-  copy_to_chunk(frame_sp, heap_sp, fsize - locals); \/\/ copy rest\n-  assert(!bottom || !caller.is_interpreted_frame() || (heap_sp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(stack_frame_bottom - locals, heap_frame_bottom - locals, locals); \/\/ copy locals\n+  copy_to_chunk(stack_frame_top, heap_frame_top, fsize - locals);                 \/\/ copy rest\n+  assert(!is_bottom_frame || !caller.is_interpreted_frame() || (heap_frame_top + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1041,1 +1043,1 @@\n-  patch(f, hf, caller, bottom);\n+  patch(f, hf, caller, is_bottom_frame);\n@@ -1044,1 +1046,1 @@\n-  DEBUG_ONLY(after_freeze_java_frame(hf, bottom);)\n+  DEBUG_ONLY(after_freeze_java_frame(hf, is_bottom_frame);)\n@@ -1054,1 +1056,2 @@\n-  intptr_t* const frame_sp = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const stack_frame_top = ContinuationHelper::CompiledFrame::frame_top(f, callee_argsize, callee_interpreted);\n+  intptr_t* const stack_frame_bottom = ContinuationHelper::CompiledFrame::frame_bottom(f);\n@@ -1056,1 +1059,1 @@\n-  const int fsize = ContinuationHelper::CompiledFrame::frame_bottom(f) + argsize - frame_sp;\n+  const int fsize = stack_frame_bottom + argsize - stack_frame_top;\n@@ -1070,1 +1073,1 @@\n-  bool bottom = result == freeze_ok_bottom;\n+  bool is_bottom_frame = result == freeze_ok_bottom;\n@@ -1072,1 +1075,1 @@\n-  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, argsize, bottom);)\n+  DEBUG_ONLY(before_freeze_java_frame(f, caller, fsize, argsize, is_bottom_frame);)\n@@ -1076,1 +1079,1 @@\n-  intptr_t* heap_sp = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n+  intptr_t* heap_frame_top = ContinuationHelper::CompiledFrame::frame_top(hf, callee_argsize, callee_interpreted);\n@@ -1078,2 +1081,2 @@\n-  copy_to_chunk(frame_sp, heap_sp, fsize);\n-  assert(!bottom || !caller.is_compiled_frame() || (heap_sp + fsize) == (caller.unextended_sp() + argsize), \"\");\n+  copy_to_chunk(stack_frame_top, heap_frame_top, fsize);\n+  assert(!is_bottom_frame || !caller.is_compiled_frame() || (heap_frame_top + fsize) == (caller.unextended_sp() + argsize), \"\");\n@@ -1085,1 +1088,1 @@\n-  patch(f, hf, caller, bottom);\n+  patch(f, hf, caller, is_bottom_frame);\n@@ -1087,1 +1090,1 @@\n-  assert(bottom || Interpreter::contains(ContinuationHelper::CompiledFrame::real_pc(caller)) == caller.is_interpreted_frame(), \"\");\n+  assert(is_bottom_frame || Interpreter::contains(ContinuationHelper::CompiledFrame::real_pc(caller)) == caller.is_interpreted_frame(), \"\");\n@@ -1089,1 +1092,1 @@\n-  DEBUG_ONLY(after_freeze_java_frame(hf, bottom);)\n+  DEBUG_ONLY(after_freeze_java_frame(hf, is_bottom_frame);)\n@@ -1095,1 +1098,1 @@\n-  intptr_t* const frame_sp = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n+  intptr_t* const stack_frame_top = ContinuationHelper::StubFrame::frame_top(f, 0, 0);\n@@ -1099,1 +1102,1 @@\n-    f.cb()->name(), _freeze_size, fsize, p2i(frame_sp), p2i(frame_sp+fsize));\n+    f.cb()->name(), _freeze_size, fsize, p2i(stack_frame_top), p2i(stack_frame_top+fsize));\n@@ -1127,2 +1130,2 @@\n-  intptr_t* heap_sp = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n-  copy_to_chunk(frame_sp, heap_sp, fsize);\n+  intptr_t* heap_frame_top = ContinuationHelper::StubFrame::frame_top(hf, 0, 0);\n+  copy_to_chunk(stack_frame_top, heap_frame_top, fsize);\n@@ -1547,1 +1550,1 @@\n-  void thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top);\n+  void recurse_thaw(const frame& heap_frame, frame& caller, int num_frames, bool top);\n@@ -1795,1 +1798,1 @@\n-  thaw_one_frame(heap_frame, caller, num_frames, true);\n+  recurse_thaw(heap_frame, caller, num_frames, true);\n@@ -1809,1 +1812,1 @@\n-void ThawBase::thaw_one_frame(const frame& heap_frame, frame& caller, int num_frames, bool top) {\n+void ThawBase::recurse_thaw(const frame& heap_frame, frame& caller, int num_frames, bool top) {\n@@ -1847,1 +1850,1 @@\n-    thaw_one_frame(_stream.to_frame(), caller, num_frames - 1, false);\n+    recurse_thaw(_stream.to_frame(), caller, num_frames - 1, false);\n@@ -1931,1 +1934,1 @@\n-  const bool bottom = recurse_thaw_java_frame<ContinuationHelper::InterpretedFrame>(caller, num_frames);\n+  const bool is_bottom_frame = recurse_thaw_java_frame<ContinuationHelper::InterpretedFrame>(caller, num_frames);\n@@ -1933,1 +1936,1 @@\n-  DEBUG_ONLY(before_thaw_java_frame(hf, caller, bottom, num_frames);)\n+  DEBUG_ONLY(before_thaw_java_frame(hf, caller, is_bottom_frame, num_frames);)\n@@ -1937,1 +1940,1 @@\n-  frame f = new_stack_frame<ContinuationHelper::InterpretedFrame>(hf, caller, bottom);\n+  frame f = new_stack_frame<ContinuationHelper::InterpretedFrame>(hf, caller, is_bottom_frame);\n@@ -1939,3 +1942,4 @@\n-  intptr_t* const frame_sp = f.sp();\n-  intptr_t* const heap_sp = hf.unextended_sp();\n-  intptr_t* const frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(f);\n+  intptr_t* const stack_frame_top = f.sp();\n+  intptr_t* const stack_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(f);\n+  intptr_t* const heap_frame_top = hf.unextended_sp();\n+  intptr_t* const heap_frame_bottom = ContinuationHelper::InterpretedFrame::frame_bottom(hf);\n@@ -1944,1 +1948,1 @@\n-  const int fsize = ContinuationHelper::InterpretedFrame::frame_bottom(hf) - heap_sp;\n+  const int fsize = heap_frame_bottom - heap_frame_top;\n@@ -1946,2 +1950,2 @@\n-  assert(!bottom || frame_sp + fsize >= _cont.entrySP() - 2, \"\");\n-  assert(!bottom || frame_sp + fsize <= _cont.entrySP(), \"\");\n+  assert(!is_bottom_frame || stack_frame_top + fsize >= _cont.entrySP() - 2, \"\");\n+  assert(!is_bottom_frame || stack_frame_top + fsize <= _cont.entrySP(), \"\");\n@@ -1949,1 +1953,1 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) == frame_sp + fsize, \"\");\n+  assert(stack_frame_bottom == stack_frame_top + fsize, \"\");\n@@ -1956,3 +1960,2 @@\n-  copy_from_chunk(ContinuationHelper::InterpretedFrame::frame_bottom(hf) - locals,\n-                  ContinuationHelper::InterpretedFrame::frame_bottom(f) - locals, locals); \/\/ copy locals\n-  copy_from_chunk(heap_sp, frame_sp, fsize - locals); \/\/ copy rest\n+  copy_from_chunk(heap_frame_bottom - locals, stack_frame_bottom - locals, locals); \/\/ copy locals\n+  copy_from_chunk(heap_frame_top, stack_frame_top, fsize - locals);                 \/\/ copy rest\n@@ -1960,1 +1963,1 @@\n-  set_interpreter_frame_bottom(f, frame_bottom); \/\/ the copy overwrites the metadata\n+  set_interpreter_frame_bottom(f, stack_frame_bottom); \/\/ the copy overwrites the metadata\n@@ -1962,1 +1965,1 @@\n-  patch(f, caller, bottom);\n+  patch(f, caller, is_bottom_frame);\n@@ -1965,1 +1968,1 @@\n-  assert(ContinuationHelper::InterpretedFrame::frame_bottom(f) <= ContinuationHelper::Frame::frame_top(caller), \"\");\n+  assert(stack_frame_bottom <= ContinuationHelper::Frame::frame_top(caller), \"\");\n@@ -1971,1 +1974,1 @@\n-  if (!bottom) {\n+  if (!is_bottom_frame) {\n@@ -1976,1 +1979,1 @@\n-    clear_bitmap_bits(ContinuationHelper::InterpretedFrame::frame_bottom(hf) - locals, locals);\n+    clear_bitmap_bits(heap_frame_bottom - locals, locals);\n@@ -1979,1 +1982,1 @@\n-  DEBUG_ONLY(after_thaw_java_frame(f, bottom);)\n+  DEBUG_ONLY(after_thaw_java_frame(f, is_bottom_frame);)\n@@ -1991,1 +1994,1 @@\n-  const bool bottom = recurse_thaw_java_frame<ContinuationHelper::CompiledFrame>(caller, num_frames);\n+  const bool is_bottom_frame = recurse_thaw_java_frame<ContinuationHelper::CompiledFrame>(caller, num_frames);\n@@ -1993,1 +1996,1 @@\n-  DEBUG_ONLY(before_thaw_java_frame(hf, caller, bottom, num_frames);)\n+  DEBUG_ONLY(before_thaw_java_frame(hf, caller, is_bottom_frame, num_frames);)\n@@ -1997,1 +2000,1 @@\n-  if ((!bottom && caller.is_interpreted_frame()) || (bottom && Interpreter::contains(_cont.tail()->pc()))) {\n+  if ((!is_bottom_frame && caller.is_interpreted_frame()) || (is_bottom_frame && Interpreter::contains(_cont.tail()->pc()))) {\n@@ -2001,3 +2004,3 @@\n-  frame f = new_stack_frame<ContinuationHelper::CompiledFrame>(hf, caller, bottom);\n-  intptr_t* const frame_sp = f.sp();\n-  intptr_t* const heap_sp = hf.unextended_sp();\n+  frame f = new_stack_frame<ContinuationHelper::CompiledFrame>(hf, caller, is_bottom_frame);\n+  intptr_t* const stack_frame_top = f.sp();\n+  intptr_t* const heap_frame_top = hf.unextended_sp();\n@@ -2005,1 +2008,1 @@\n-  const int added_argsize = (bottom || caller.is_interpreted_frame()) ? hf.compiled_frame_stack_argsize() : 0;\n+  const int added_argsize = (is_bottom_frame || caller.is_interpreted_frame()) ? hf.compiled_frame_stack_argsize() : 0;\n@@ -2009,2 +2012,2 @@\n-  intptr_t* from = heap_sp - frame::metadata_words;\n-  intptr_t* to   = frame_sp - frame::metadata_words;\n+  intptr_t* from = heap_frame_top - frame::metadata_words;\n+  intptr_t* to   = stack_frame_top - frame::metadata_words;\n@@ -2013,2 +2016,2 @@\n-  assert(!bottom || (_cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP()), \"\");\n-  assert(!bottom || hf.compiled_frame_stack_argsize() != 0 || (to + sz && to + sz == _cont.entrySP()), \"\");\n+  assert(!is_bottom_frame || (_cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP()), \"\");\n+  assert(!is_bottom_frame || hf.compiled_frame_stack_argsize() != 0 || (to + sz && to + sz == _cont.entrySP()), \"\");\n@@ -2018,1 +2021,1 @@\n-  patch(f, caller, bottom);\n+  patch(f, caller, is_bottom_frame);\n@@ -2041,1 +2044,1 @@\n-  if (!bottom) {\n+  if (!is_bottom_frame) {\n@@ -2045,1 +2048,1 @@\n-    clear_bitmap_bits(heap_sp + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n+    clear_bitmap_bits(heap_frame_top + ContinuationHelper::CompiledFrame::size(hf), added_argsize);\n@@ -2048,1 +2051,1 @@\n-  DEBUG_ONLY(after_thaw_java_frame(f, bottom);)\n+  DEBUG_ONLY(after_thaw_java_frame(f, is_bottom_frame);)\n@@ -2077,2 +2080,2 @@\n-  intptr_t* frame_sp = f.sp();\n-  intptr_t* heap_sp = hf.sp();\n+  intptr_t* stack_frame_top = f.sp();\n+  intptr_t* heap_frame_top = hf.sp();\n@@ -2080,1 +2083,1 @@\n-  copy_from_chunk(heap_sp - frame::metadata_words, frame_sp - frame::metadata_words,\n+  copy_from_chunk(heap_frame_top - frame::metadata_words, stack_frame_top - frame::metadata_words,\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":87,"deletions":84,"binary":false,"changes":171,"status":"modified"}]}