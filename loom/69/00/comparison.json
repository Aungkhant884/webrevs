{"files":[{"patch":"@@ -173,1 +173,1 @@\n-  static void assert_is_rbp(VMReg r) PRODUCT_RETURN \n+  static void assert_is_rbp(VMReg r) NOT_DEBUG({ return; })\n","filename":"src\/hotspot\/cpu\/x86\/instanceStackChunkKlass_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-  DEBUG_ONLY(intptr_t* _sp;)\n+  NOT_PRODUCT(intptr_t* _sp;)\n@@ -337,1 +337,1 @@\n-  BarrierClosure(intptr_t* sp) DEBUG_ONLY(: _sp(sp)) {}\n+  BarrierClosure(intptr_t* sp) NOT_PRODUCT(: _sp(sp)) {}\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -206,1 +206,1 @@\n-#ifdef ASSERT\n+#ifndef PRODUCT\n@@ -213,1 +213,1 @@\n-  StackChunkFrameStream() { DEBUG_ONLY(_chunk = nullptr; _index = -1; _has_stub = false;) }\n+  StackChunkFrameStream() { NOT_PRODUCT(_chunk = nullptr; _index = -1; _has_stub = false;) }\n@@ -230,1 +230,1 @@\n-  DEBUG_ONLY(int index() { return _index; })\n+  NOT_PRODUCT(int index() { return _index; })\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#ifndef PRODUCT\n+#ifdef ASSERT\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-#ifdef ASSERT\n+#ifndef PRODUCT\n@@ -2245,1 +2245,1 @@\n-  DEBUG_ONLY(int _frames;)\n+  NOT_PRODUCT(int _frames;)\n@@ -3488,0 +3488,1 @@\n+#ifdef ASSERT\n@@ -3568,0 +3569,1 @@\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1302,1 +1302,1 @@\n-    bool good = *p == nullptr || (dbg_is_safe(*p, -1) && dbg_is_safe((*p)->klass(), -1) && Universe::heap()->is_in_or_null(*p) && oopDesc::is_oop_or_null(*p));\n+    bool good = *p == nullptr || (dbg_is_safe(*p, -1) && dbg_is_safe((*p)->klass(), -1) && oopDesc::is_oop_or_null(*p));\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  DEBUG_ONLY(bool  _skip_missing;)\n+  NOT_PRODUCT(bool  _skip_missing;)\n@@ -94,1 +94,1 @@\n-  DEBUG_ONLY(intptr_t* _update_for_id;) \/\/ Assert that RegisterMap is not updated twice for same frame\n+  NOT_PRODUCT(intptr_t* _update_for_id;) \/\/ Assert that RegisterMap is not updated twice for same frame\n@@ -160,1 +160,1 @@\n-#ifdef ASSERT\n+#ifndef PRODUCT\n","filename":"src\/hotspot\/share\/runtime\/registerMap.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}