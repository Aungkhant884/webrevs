{"files":[{"patch":"@@ -173,1 +173,1 @@\n-  static void assert_is_rbp(VMReg r) NOT_DEBUG({ return; })\n+  static void assert_is_rbp(VMReg r) NOT_DEBUG_RETURN\n","filename":"src\/hotspot\/cpu\/x86\/instanceStackChunkKlass_x86.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-  static bool verify(oop obj, size_t* out_size = NULL, int* out_oops = NULL, int* out_frames = NULL, int* out_interpreted_frames = NULL);\n@@ -107,1 +106,3 @@\n-  \n+\n+  static bool verify(oop obj, size_t* out_size = NULL, int* out_oops = NULL, int* out_frames = NULL, int* out_interpreted_frames = NULL) NOT_DEBUG({ return true; });\n+\n@@ -209,0 +210,3 @@\n+#endif\n+\n+#ifdef ASSERT\n@@ -212,2 +216,2 @@\n- public:\n-  StackChunkFrameStream() { NOT_PRODUCT(_chunk = nullptr; _index = -1; _has_stub = false;) }\n+public:\n+  StackChunkFrameStream() { NOT_PRODUCT(_chunk = nullptr; _index = -1;) DEBUG_ONLY(_has_stub = false;) }\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-  bool verify(size_t* out_size = NULL, int* out_oops = NULL, int* out_frames = NULL, int* out_interpreted_frames = NULL) PRODUCT_RETURN_(return true;);\n+  bool verify(size_t* out_size = NULL, int* out_oops = NULL, int* out_frames = NULL, int* out_interpreted_frames = NULL) NOT_DEBUG({ return true; });\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  NOT_PRODUCT(intptr_t* _update_for_id;) \/\/ Assert that RegisterMap is not updated twice for same frame\n+  DEBUG_ONLY(intptr_t* _update_for_id;) \/\/ Assert that RegisterMap is not updated twice for same frame\n","filename":"src\/hotspot\/share\/runtime\/registerMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}