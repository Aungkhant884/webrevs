{"files":[{"patch":"@@ -324,3 +324,3 @@\n-    private int forkRound;         \/\/ incremented when the first subtask is forked after join\n-    private int lastJoinAttempted; \/\/ set to the current fork round when join is attempted\n-    private int lastJoinCompleted; \/\/ set to the current fork round when join completes\n+    int forkRound;         \/\/ incremented when the first subtask is forked after join\n+    int lastJoinAttempted; \/\/ set to the current fork round when join is attempted\n+    int lastJoinCompleted; \/\/ set to the current fork round when join completes\n@@ -1389,5 +1389,1 @@\n-            private int taskCount;\n-\n-            private SubTaskSpliterator(int taskCount) {\n-                this.taskCount = taskCount;\n-            }\n+            private boolean finished;\n@@ -1398,1 +1394,1 @@\n-                    if (taskCount == 0) {\n+                    if (isShutdown()) {\n@@ -1401,11 +1397,10 @@\n-                    Subtask<T> subtask;\n-                    queueLock.lock();\n-                    try {\n-                        while(queue.isEmpty()) {\n-                            try {\n-                                queueCondition.await();\n-                            } catch (InterruptedException e) {\n-                                Thread.currentThread().interrupt();\n-                                taskCount = 0;\n-                                return false;\n-                            }\n+                    if (queue.isEmpty()) {\n+                        if (finished) {\n+                            return false;\n+                        }\n+                        try {\n+                            finished = flock.awaitAll();\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            finished = true;\n+                            return false;\n@@ -1413,3 +1408,0 @@\n-                        subtask = queue.removeFirst();\n-                    } finally {\n-                        queueLock.unlock();\n@@ -1417,1 +1409,4 @@\n-                    taskCount--;\n+                    if (queue.isEmpty()) {\n+                      continue;  \/\/ awaken by shutdown or finished\n+                    }\n+                    Subtask<T> subtask = queue.remove();\n@@ -1422,1 +1417,1 @@\n-                    return taskCount != 0;\n+                    return true;\n@@ -1442,4 +1437,1 @@\n-        private final ArrayDeque<PlainSubTask<T>> queue = new ArrayDeque<>();\n-        private final ReentrantLock queueLock = new ReentrantLock();\n-        private final Condition queueCondition = queueLock.newCondition();\n-        private int taskCounter;  \/\/ only the owner thread can mutate this field\n+        private final ConcurrentLinkedQueue<PlainSubTask<T>> queue = new ConcurrentLinkedQueue<>();\n@@ -1477,8 +1469,0 @@\n-        @Override\n-        public <U extends T> Subtask<U> fork(Callable<? extends U> task) {\n-            ensureOwner();\n-            Subtask<U> subtask = super.fork(task);\n-            taskCounter++;\n-            return subtask;\n-        }\n-\n@@ -1492,7 +1476,2 @@\n-            queueLock.lock();\n-            try {\n-                queue.add(newTask);\n-                queueCondition.signal();\n-            } finally {\n-                queueLock.unlock();\n-            }\n+            queue.add(newTask);\n+            flock.wakeup();\n@@ -1512,5 +1491,0 @@\n-            ensureOwner();\n-            int open = ensureOpen();\n-            if (open != OPEN) {\n-                throw new IllegalStateException(\"Task scope is shutdown\");\n-            }\n@@ -1518,1 +1492,3 @@\n-            flock.shutdown();\n+            ensureOwner();\n+            lastJoinAttempted = forkRound;\n+            ensureOpen();  \/\/ throws ISE if closed\n@@ -1520,2 +1496,1 @@\n-            int taskCount = taskCounter;\n-            Stream<Subtask<T>> stream = StreamSupport.stream(new SubTaskSpliterator(taskCount), false);\n+            Stream<Subtask<T>> stream = StreamSupport.stream(new SubTaskSpliterator(), false);\n@@ -1524,0 +1499,2 @@\n+            lastJoinCompleted = forkRound;\n+\n@@ -1525,1 +1502,1 @@\n-            super.join();\n+            \/\/super.join();\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":30,"deletions":53,"binary":false,"changes":83,"status":"modified"}]}