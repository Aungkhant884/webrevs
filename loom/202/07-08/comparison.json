{"files":[{"patch":"@@ -333,1 +333,1 @@\n-    public sealed interface Subtask<T> extends Supplier<T> permits SubtaskImpl, Streamable.PlainSubTask {\n+    public sealed interface Subtask<T> extends Supplier<T> permits SubtaskImpl, Streamable.PlainSubtask {\n@@ -1355,1 +1355,3 @@\n-        private record PlainSubTask<T>(State state, T result, Throwable exception) implements Subtask<T> {\n+        private record PlainSubtask<T>(State state, T result, Throwable exception) implements Subtask<T> {\n+            private final static PlainSubtask<?> STOP = new PlainSubtask<>(null, null, null);\n+\n@@ -1412,20 +1414,3 @@\n-                    if (isShutdown()) {\n-                        return false;\n-                    }\n-                    if (queue.isEmpty()) {\n-                        if (finished) {\n-                            return false;\n-                        }\n-                        try {\n-                            \/\/ wait for all threads, wakeup, interrupt, or timeout\n-                            if (deadline != null) {\n-                                Duration timeout = Duration.between(Instant.now(), deadline);\n-                                finished = flock.awaitAll(timeout);\n-                            } else {\n-                                finished = flock.awaitAll();\n-                            }\n-                        } catch(TimeoutException e) {\n-                            throw new UncheckedTimeoutException(e);\n-                        } catch (InterruptedException e) {\n-                            Thread.currentThread().interrupt();\n-                            finished = true;\n+                    if (!queue.isEmpty()) {\n+                        PlainSubtask<?> subtaskOrStop = queue.remove();\n+                        if (subtaskOrStop == PlainSubtask.STOP) {\n@@ -1434,0 +1419,4 @@\n+                        @SuppressWarnings(\"unchecked\")\n+                        PlainSubtask<T> subtask = (PlainSubtask<T>) subtaskOrStop;\n+                        action.accept(subtask);\n+                        return true;\n@@ -1435,2 +1424,2 @@\n-                    if (queue.isEmpty()) {\n-                      continue;  \/\/ awaken by shutdown or finished\n+                    if (finished) {\n+                        return false;\n@@ -1438,3 +1427,13 @@\n-                    Subtask<T> subtask = queue.remove();\n-                    if (subtask.state() == Subtask.State.UNAVAILABLE) {\n-                        continue;\n+                    try {\n+                        \/\/ wait for all threads, wakeup, interrupt, or timeout\n+                        if (deadline != null) {\n+                            Duration timeout = Duration.between(Instant.now(), deadline);\n+                            finished = flock.awaitAll(timeout);\n+                        } else {\n+                            finished = flock.awaitAll();\n+                        }\n+                    } catch (TimeoutException e) {\n+                        throw new UncheckedTimeoutException(e);\n+                    } catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();\n+                        return false;\n@@ -1442,2 +1441,0 @@\n-                    action.accept(subtask);\n-                    return true;\n@@ -1463,1 +1460,1 @@\n-        private final ConcurrentLinkedQueue<PlainSubTask<T>> queue = new ConcurrentLinkedQueue<>();\n+        private final ConcurrentLinkedQueue<PlainSubtask<?>> queue = new ConcurrentLinkedQueue<>();\n@@ -1497,3 +1494,3 @@\n-            PlainSubTask<T> newTask = switch (subtask.state()) {\n-                case FAILED -> new PlainSubTask<>(Subtask.State.FAILED, null, subtask.exception());\n-                case SUCCESS -> new PlainSubTask<>(Subtask.State.SUCCESS, subtask.get(), null);\n+            PlainSubtask<T> newTask = switch (subtask.state()) {\n+                case FAILED -> new PlainSubtask<>(Subtask.State.FAILED, null, subtask.exception());\n+                case SUCCESS -> new PlainSubtask<>(Subtask.State.SUCCESS, subtask.get(), null);\n@@ -1506,0 +1503,8 @@\n+        @Override\n+        public void shutdown() {\n+            if (ensureOpen() == OPEN) {\n+                queue.add(PlainSubtask.STOP);\n+            }\n+            super.shutdown();\n+        }\n+\n@@ -1577,1 +1582,2 @@\n-            Stream<Subtask<T>> stream = StreamSupport.stream(new SubTaskSpliterator(deadline), false);\n+            SubTaskSpliterator spliterator = new SubTaskSpliterator(deadline);\n+            Stream<Subtask<T>> stream = StreamSupport.stream(spliterator, false);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":40,"deletions":34,"binary":false,"changes":74,"status":"modified"}]}