{"files":[{"patch":"@@ -1476,0 +1476,3 @@\n+         * Wait for each subtask in this task scope to finish, push it into the stream,\n+         * until either the stream final operation ends, there is no more subtasks or\n+         * the scope is shutdown.\n@@ -1477,1 +1480,7 @@\n-         * TODO\n+         * <p> This method waits for each subtask by waiting for each thread {@linkplain\n+         * #fork(Callable) started} in this task scope to finish its execution.\n+         * It stops waiting when the stream is short-circuited, all threads finish,\n+         * the task scope is {@linkplain #shutdown() shut down}, or the current thread is\n+         * {@linkplain Thread#interrupt() interrupted}.\n+         *\n+         * <p> This method may only be invoked by the task scope owner.\n@@ -1480,0 +1489,1 @@\n+         * @param <U>    the type of the return value\n@@ -1481,2 +1491,3 @@\n-         * @param <U> the type of the return value\n-         * @throws InterruptedException if an IO exception occurs\n+         * @throws IllegalStateException if this task scope is closed\n+         * @throws WrongThreadException  if the current thread is not the task scope owner\n+         * @throws InterruptedException  if interrupted while waiting\n@@ -1506,1 +1517,1 @@\n-            throw new UnsupportedOperationException();\n+            super.shutdown();\n@@ -1511,1 +1522,2 @@\n-            throw new UnsupportedOperationException();\n+            super.join();\n+            return this;\n@@ -1516,2 +1528,4 @@\n-                throws InterruptedException, TimeoutException {\n-            throw new UnsupportedOperationException();\n+                throws InterruptedException, TimeoutException\n+        {\n+            super.joinUntil(deadline);\n+            return this;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"}]}