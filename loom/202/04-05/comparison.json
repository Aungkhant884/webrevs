{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.io.Serial;\n@@ -1382,0 +1383,18 @@\n+        \/**\n+         * Used to tunnel a TimeoutException from {@link SubTaskSpliterator#tryAdvance(Consumer)}\n+         * to {@link #joinUntilWhile(Instant, Function)}.\n+         *\/\n+        private static final class UncheckedTimeoutException extends RuntimeException {\n+            @Serial\n+            private static final long serialVersionUID = -4311199705453810913L;\n+\n+            private UncheckedTimeoutException(TimeoutException cause) {\n+                super(cause);\n+            }\n+\n+            @Override\n+            public TimeoutException getCause() {\n+                return (TimeoutException) super.getCause();\n+            }\n+        }\n+\n@@ -1383,0 +1402,1 @@\n+            private final Instant deadline;\n@@ -1385,0 +1405,4 @@\n+            private SubTaskSpliterator(Instant deadline) {\n+                this.deadline = deadline;\n+            }\n+\n@@ -1396,1 +1420,9 @@\n-                            finished = flock.awaitAll();\n+                            \/\/ wait for all threads, wakeup, interrupt, or timeout\n+                            if (deadline != null) {\n+                                Duration timeout = Duration.between(Instant.now(), deadline);\n+                                finished = flock.awaitAll(timeout);\n+                            } else {\n+                                finished = flock.awaitAll();\n+                            }\n+                        } catch(TimeoutException e) {\n+                            throw new UncheckedTimeoutException(e);\n@@ -1494,1 +1526,36 @@\n-        public <U> U joinWhen(Function<? super Stream<Subtask<T>>, ? extends U> mapper) throws InterruptedException {\n+        public <U> U joinWhile(Function<? super Stream<Subtask<T>>, ? extends U> mapper) throws InterruptedException {\n+            Objects.requireNonNull(mapper, \"mapper is null\");\n+\n+            try {\n+                return implJoinWhile(null, mapper);\n+            } catch (UncheckedTimeoutException e) {\n+                throw new InternalError();\n+            }\n+        }\n+\n+        \/**\n+         * Wait for each subtask in this task scope to finish, push it into the stream,\n+         * until either the stream final operation ends, there is no more subtasks,\n+         * the scope is shutdown up to a given deadline.\n+         *\n+         * <p> This method waits for each subtask by waiting for each thread {@linkplain\n+         * #fork(Callable) started} in this task scope to finish its execution.\n+         * It stops waiting when the stream is short-circuited, all threads finish,\n+         * the task scope is {@linkplain #shutdown() shut down}, the deadline is\n+         * reached or the current thread is {@linkplain Thread#interrupt() interrupted}.\n+         *\n+         * <p> This method may only be invoked by the task scope owner.\n+         *\n+         * @param deadline the deadline\n+         * @param mapper   a function that takes a stream and return a value\n+         * @param <U>      the type of the return value\n+         * @return the value returned by the mapper function\n+         * @throws IllegalStateException if this task scope is closed\n+         * @throws WrongThreadException  if the current thread is not the task scope owner\n+         * @throws InterruptedException  if interrupted while waiting\n+         * @throws TimeoutException      if the deadline is reached while waiting\n+         *\/\n+        public <U> U joinUntilWhile(Instant deadline, Function<? super Stream<Subtask<T>>, ? extends U> mapper)\n+                throws InterruptedException, TimeoutException\n+        {\n+            Objects.requireNonNull(deadline, \"deadline is null\");\n@@ -1497,0 +1564,10 @@\n+            try {\n+                return implJoinWhile(deadline, mapper);\n+            } catch (UncheckedTimeoutException e) {\n+                throw e.getCause();\n+            }\n+        }\n+\n+        private <U> U implJoinWhile(Instant deadline, Function<? super Stream<Subtask<T>>, ? extends U> mapper)\n+                throws InterruptedException, UncheckedTimeoutException\n+        {\n@@ -1500,4 +1577,2 @@\n-\n-            Stream<Subtask<T>> stream = StreamSupport.stream(new SubTaskSpliterator(), false);\n-            U result = mapper.apply(stream);\n-\n+            Stream<Subtask<T>> stream = StreamSupport.stream(new SubTaskSpliterator(deadline), false);\n+            U result= mapper.apply(stream);\n@@ -1505,1 +1580,0 @@\n-\n@@ -1507,1 +1581,0 @@\n-\n@@ -1514,5 +1587,0 @@\n-        @Override\n-        public void shutdown() {\n-            super.shutdown();\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/StructuredTaskScope.java","additions":81,"deletions":13,"binary":false,"changes":94,"status":"modified"}]}