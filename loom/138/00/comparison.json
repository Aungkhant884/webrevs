{"files":[{"patch":"@@ -45,0 +45,1 @@\n+#include \"runtime\/continuation.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include \"runtime\/continuation.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+#include \"runtime\/continuation.hpp\"\n@@ -1084,1 +1085,0 @@\n-  _cont_fastpath_thread_state(1),\n@@ -1086,0 +1086,1 @@\n+  _cont_fastpath_thread_state(1),\n@@ -2505,0 +2506,15 @@\n+void JavaThread::inc_held_monitor_count() {\n+  if (!Continuations::enabled()) {\n+    return;\n+  }\n+  _held_monitor_count++;\n+}\n+\n+void JavaThread::dec_held_monitor_count() {\n+  if (!Continuations::enabled()) {\n+    return;\n+  }\n+  assert(_held_monitor_count > 0, \"\");\n+  _held_monitor_count--;\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"runtime\/continuation.hpp\"\n@@ -88,0 +87,2 @@\n+class ContinuationEntry;\n+\n@@ -812,4 +813,4 @@\n-    _has_async_exception      = 0x00000001U, \/\/ there is a pending async exception\n-    _async_delivery_disabled  = 0x00000002U, \/\/ async exception delivery is disabled\n-    _trace_flag               = 0x00000004U, \/\/ call tracing backend\n-    _obj_deopt                = 0x00000008U  \/\/ suspend for object reallocation and relocking for JVMTI agent\n+    _has_async_exception     = 0x00000001U, \/\/ there is a pending async exception\n+    _async_delivery_disabled = 0x00000002U, \/\/ async exception delivery is disabled\n+    _trace_flag              = 0x00000004U, \/\/ call tracing backend\n+    _obj_deopt               = 0x00000008U  \/\/ suspend for object reallocation and relocking for JVMTI agent\n@@ -1056,0 +1057,2 @@\n+  intptr_t* _cont_fastpath; \/\/ the sp of the oldest known interpreted\/call_stub frame inside the\n+                            \/\/ continuation that we know about\n@@ -1057,2 +1060,1 @@\n-  intptr_t* _cont_fastpath; \/\/ the sp of the oldest known interpreted\/call_stub frame inside the continuation that we know about\n-  int _held_monitor_count; \/\/ used by continuations for fast lock detection\n+  int _held_monitor_count;  \/\/ used by continuations for fast lock detection\n@@ -1196,8 +1198,8 @@\n-  void set_cont_fastpath(intptr_t* x) { _cont_fastpath = x; }\n-  void push_cont_fastpath(intptr_t* sp) { if (sp > _cont_fastpath) _cont_fastpath = sp; }\n-  void set_cont_fastpath_thread_state(bool x) { _cont_fastpath_thread_state = (int)x; }\n-  intptr_t* raw_cont_fastpath() { return _cont_fastpath; }\n-  bool cont_fastpath() { return ((_cont_fastpath == NULL) & _cont_fastpath_thread_state) != 0; }\n-  bool cont_fastpath_thread_state() { return _cont_fastpath_thread_state != 0; }\n-\n-  int held_monitor_count() { return _held_monitor_count; }\n+  void set_cont_fastpath(intptr_t* x)          { _cont_fastpath = x; }\n+  void push_cont_fastpath(intptr_t* sp)        { if (sp > _cont_fastpath) _cont_fastpath = sp; }\n+  void set_cont_fastpath_thread_state(bool x)  { _cont_fastpath_thread_state = (int)x; }\n+  intptr_t* raw_cont_fastpath() const          { return _cont_fastpath; }\n+  bool cont_fastpath() const                   { return ((_cont_fastpath == NULL) & _cont_fastpath_thread_state) != 0; }\n+  bool cont_fastpath_thread_state() const      { return _cont_fastpath_thread_state != 0; }\n+\n+  int held_monitor_count()        { return _held_monitor_count; }\n@@ -1205,13 +1207,2 @@\n-  void inc_held_monitor_count() {\n-    if (!Continuations::enabled()) {\n-      return;\n-    }\n-    _held_monitor_count++;\n-  }\n-  void dec_held_monitor_count() {\n-    if (!Continuations::enabled()) {\n-      return;\n-    }\n-    assert(_held_monitor_count > 0, \"\");\n-    _held_monitor_count--;\n-  }\n+  void inc_held_monitor_count();\n+  void dec_held_monitor_count();\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":19,"deletions":28,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"runtime\/continuation.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}