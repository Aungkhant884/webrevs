{"files":[{"patch":"@@ -149,1 +149,2 @@\n-    assert(sp <= fp && fp <= caller.unextended_sp(), \"\");\n+    assert(sp <= fp, \"\");\n+    assert(fp <= caller.unextended_sp(), \"\");\n@@ -286,1 +287,2 @@\n-    assert(hf.cb() != nullptr && hf.oop_map() != nullptr, \"\");\n+    assert(hf.cb() != nullptr, \"\");\n+    assert(hf.oop_map() != nullptr, \"\");\n","filename":"src\/hotspot\/cpu\/aarch64\/continuation_aarch64.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -90,1 +90,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -96,1 +96,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -109,1 +109,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -121,1 +121,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -128,1 +128,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n","filename":"src\/hotspot\/cpu\/aarch64\/stackChunkFrameStream_aarch64.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -146,1 +146,2 @@\n-    assert(sp <= fp && fp <= caller.unextended_sp(), \"\");\n+    assert(sp <= fp, \"\");\n+    assert(fp <= caller.unextended_sp(), \"\");\n@@ -279,1 +280,2 @@\n-    assert(hf.cb() != nullptr && hf.oop_map() != nullptr, \"\");\n+    assert(hf.cb() != nullptr, \"\");\n+    assert(hf.oop_map() != nullptr, \"\");\n","filename":"src\/hotspot\/cpu\/x86\/continuation_x86.inline.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -90,1 +90,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -96,1 +96,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -109,1 +109,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -121,1 +121,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n@@ -128,1 +128,1 @@\n-  assert(frame_kind == chunk_frames::MIXED && is_interpreted(), \"\");\n+  assert_is_interpreted_and_frame_type_mixed();\n","filename":"src\/hotspot\/cpu\/x86\/stackChunkFrameStream_x86.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -714,1 +714,4 @@\n-    assert(out_size == nullptr && out_oops == nullptr && out_frames == nullptr && out_interpreted_frames == nullptr, \"\");\n+    assert(out_size == nullptr, \"\");\n+    assert(out_oops == nullptr, \"\");\n+    assert(out_frames == nullptr, \"\");\n+    assert(out_interpreted_frames == nullptr, \"\");\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -261,1 +261,2 @@\n-  assert(map != nullptr && map->stack_chunk() == as_oop(), \"\");\n+  assert(map != nullptr, \"\");\n+  assert(map->stack_chunk() == as_oop(), \"\");\n@@ -327,2 +328,2 @@\n-  \/\/ tty->print_cr(\">>> derelativize_address: %d -> %p (base: %p)\", offset, p, base);\n-  assert(start_address() <= p && p <= base, \"\");\n+  assert(start_address() <= p && p <= base, \"start_address: \" PTR_FORMAT \" p: \" PTR_FORMAT \" base: \" PTR_FORMAT,\n+         p2i(start_address()), p2i(p), p2i(base));\n@@ -335,3 +336,3 @@\n-  \/\/ tty->print_cr(\">>> relativize_address: %p -> %ld (base: %p)\", p, offset, base);\n-  assert(start_address() <= p && p <= base, \"\");\n-  assert(0 <= offset && offset <= std::numeric_limits<int>::max(), \"\");\n+  assert(start_address() <= p && p <= base, \"start_address: \" PTR_FORMAT \" p: \" PTR_FORMAT \" base: \" PTR_FORMAT,\n+         p2i(start_address()), p2i(p), p2i(base));\n+  assert(0 <= offset && offset <= std::numeric_limits<int>::max(), \"offset: \" PTR_FORMAT, offset);\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1111,1 +1111,2 @@\n-  assert(_bottom_address != nullptr && _bottom_address <= _cont.entrySP(), \"\");\n+  assert(_bottom_address != nullptr, \"\");\n+  assert(_bottom_address <= _cont.entrySP(), \"\");\n@@ -1448,1 +1449,2 @@\n-  assert(fsize > 0 && argsize >= 0, \"\");\n+  assert(fsize > 0, \"\");\n+  assert(argsize >= 0, \"\");\n@@ -2348,1 +2350,2 @@\n-  assert(chunk != nullptr && !chunk->is_empty(), \"\"); \/\/ guaranteed by prepare_thaw\n+  assert(chunk != nullptr, \"guaranteed by prepare_thaw\");\n+  assert(!chunk->is_empty(), \"guaranteed by prepare_thaw\");\n@@ -2400,1 +2403,2 @@\n-    assert(chunk_sp == f.sp() && chunk_sp == f.unextended_sp(), \"\");\n+    assert(chunk_sp == f.sp(), \"\");\n+    assert(chunk_sp == f.unextended_sp(), \"\");\n@@ -2438,2 +2442,2 @@\n-  assert(_cont.entrySP() - 1 <= to + thaw_size + ContinuationHelper::frame_metadata\n-            && to + thaw_size + ContinuationHelper::frame_metadata <= _cont.entrySP(), \"\");\n+  assert(_cont.entrySP() - 1 <= to + thaw_size + ContinuationHelper::frame_metadata, \"\");\n+  assert(to + thaw_size + ContinuationHelper::frame_metadata <= _cont.entrySP(), \"\");\n@@ -2563,1 +2567,2 @@\n-  assert(num_frames > 0 && !hf.is_empty(), \"\");\n+  assert(num_frames > 0, \"\");\n+  assert(!hf.is_empty(), \"\");\n@@ -2766,2 +2771,2 @@\n-  assert(!bottom || _cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP(), \"\");\n-  assert(!bottom || hf.compiled_frame_stack_argsize() != 0 || to + sz && to + sz == _cont.entrySP(), \"\");\n+  assert(!bottom || (_cont.entrySP() - 1 <= to + sz && to + sz <= _cont.entrySP()), \"\");\n+  assert(!bottom || hf.compiled_frame_stack_argsize() != 0 || (to + sz && to + sz == _cont.entrySP()), \"\");\n@@ -2789,1 +2794,2 @@\n-    assert(f.is_deoptimized_frame() && Frame::is_deopt_return(f.raw_pc(), f), \"\");\n+    assert(f.is_deoptimized_frame(), \"\");\n+    assert(Frame::is_deopt_return(f.raw_pc(), f), \"\");\n@@ -3145,1 +3151,2 @@\n-  assert(sp != nullptr && sp <= entry->entry_sp(), \"\");\n+  assert(sp != nullptr, \"\");\n+  assert(sp <= entry->entry_sp(), \"\");\n@@ -3259,1 +3266,2 @@\n-    guarantee(status == JNI_OK && !env->ExceptionOccurred(), \"register jdk.internal.vm.Continuation natives\");\n+    guarantee(status == JNI_OK, \"register jdk.internal.vm.Continuation natives\");\n+    guarantee(!env->ExceptionOccurred(), \"register jdk.internal.vm.Continuation natives\");\n","filename":"src\/hotspot\/share\/runtime\/continuation.cpp","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -262,1 +262,2 @@\n-  assert(!f.is_interpreted_frame() && Self::is_instance(f), \"\");\n+  assert(!f.is_interpreted_frame(), \"\");\n+  assert(Self::is_instance(f), \"\");\n@@ -273,1 +274,2 @@\n-  assert(!f.is_interpreted_frame() && Self::is_instance(f), \"\");\n+  assert(!f.is_interpreted_frame(), \"\");\n+  assert(Self::is_instance(f), \"\");\n@@ -279,1 +281,2 @@\n-  assert(!f.is_interpreted_frame() && Compiled::is_instance(f), \"\");\n+  assert(!f.is_interpreted_frame(), \"\");\n+  assert(Compiled::is_instance(f), \"\");\n","filename":"src\/hotspot\/share\/runtime\/frame_helpers.inline.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -779,2 +779,2 @@\n-  assert(is_blocked() && caller_thread() == caller,\n-         \"this is the only thread that can continue this thread\");\n+  assert(is_blocked(), \"should be blocked\");\n+  assert(caller_thread() == caller, \"this is the only thread that can continue this thread\");\n","filename":"src\/hotspot\/share\/runtime\/handshake.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,0 +128,2 @@\n+  void assert_is_interpreted_and_frame_type_mixed() const NOT_DEBUG_RETURN;\n+\n","filename":"src\/hotspot\/share\/runtime\/stackChunkFrameStream.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,2 @@\n-  assert(_sp >= chunk->start_address() && _sp <= chunk->end_address() + InstanceStackChunkKlass::metadata_words(), \"\");\n+  assert(_sp >= chunk->start_address(), \"\");\n+  assert(_sp <= chunk->end_address() + InstanceStackChunkKlass::metadata_words(), \"\");\n@@ -137,1 +138,2 @@\n-  assert(cb() != nullptr && cb()->is_compiled(), \"\");\n+  assert(cb() != nullptr, \"\");\n+  assert(cb()->is_compiled(), \"\");\n@@ -195,1 +197,2 @@\n-  assert(pc() != nullptr && dbg_is_safe(pc(), -1), \"\");\n+  assert(pc() != nullptr, \"\");\n+  assert(dbg_is_safe(pc(), -1), \"\");\n@@ -251,1 +254,2 @@\n-  assert(map->in_cont() && map->stack_chunk()() == _chunk, \"\");\n+  assert(map->in_cont(), \"\");\n+  assert(map->stack_chunk()() == _chunk, \"\");\n@@ -273,1 +277,2 @@\n-  assert(pc1 != nullptr && !cm->is_deopt_pc(pc1), \"\");\n+  assert(pc1 != nullptr, \"\");\n+  assert(!cm->is_deopt_pc(pc1), \"\");\n@@ -388,0 +393,7 @@\n+\n+template <chunk_frames frame_kind>\n+void StackChunkFrameStream<frame_kind>::assert_is_interpreted_and_frame_type_mixed() const {\n+  assert(is_interpreted(), \"\");\n+  assert(frame_kind == chunk_frames::MIXED, \"\");\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/stackChunkFrameStream.inline.hpp","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"}]}