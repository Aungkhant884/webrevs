{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-  return \n+  return\n@@ -78,1 +78,1 @@\n-  f.set_frame_index(0);  \n+  f.set_frame_index(0);\n@@ -193,1 +193,1 @@\n-template <bool disjoint> \n+template <bool disjoint>\n@@ -267,1 +267,1 @@\n-  \n+\n@@ -270,1 +270,1 @@\n-  \n+\n@@ -285,1 +285,1 @@\n-      \n+\n@@ -318,1 +318,1 @@\n- \n+\n@@ -325,1 +325,1 @@\n-  \n+\n@@ -363,1 +363,1 @@\n-        if (ZAddress::is_good(cast_from_oop<uintptr_t>(base))) \n+        if (ZAddress::is_good(cast_from_oop<uintptr_t>(base)))\n@@ -414,1 +414,1 @@\n-  #ifdef ASSERT \n+  #ifdef ASSERT\n@@ -456,1 +456,1 @@\n-  \n+\n@@ -474,2 +474,2 @@\n-  OopOopIterateStackClosure(stackChunkOop chunk, bool do_destructive_processing, OopClosureType* closure) \n-    : _chunk(chunk), _do_destructive_processing(do_destructive_processing), _closure(closure), \n+  OopOopIterateStackClosure(stackChunkOop chunk, bool do_destructive_processing, OopClosureType* closure)\n+    : _chunk(chunk), _do_destructive_processing(do_destructive_processing), _closure(closure),\n@@ -478,1 +478,1 @@\n-  template <bool mixed, typename RegisterMapT> \n+  template <bool mixed, typename RegisterMapT>\n@@ -503,1 +503,1 @@\n-    \n+\n@@ -575,1 +575,1 @@\n-  template <bool mixed, typename RegisterMapT> \n+  template <bool mixed, typename RegisterMapT>\n@@ -751,1 +751,1 @@\n-  \n+\n@@ -758,1 +758,1 @@\n-\/\/   template <bool mixed, typename RegisterMapT> \n+\/\/   template <bool mixed, typename RegisterMapT>\n@@ -848,1 +848,1 @@\n-  } \n+  }\n@@ -865,1 +865,1 @@\n-    \n+\n@@ -884,2 +884,2 @@\n-    oop base = (_chunk->has_bitmap() && UseCompressedOops) ? CompressedOops::decode(*(narrowOop*)base_loc) : *base_loc; \n-    \/\/ (oop)NativeAccess<>::oop_load((oop*)base_loc); \/\/ \n+    oop base = (_chunk->has_bitmap() && UseCompressedOops) ? CompressedOops::decode(*(narrowOop*)base_loc) : *base_loc;\n+    \/\/ (oop)NativeAccess<>::oop_load((oop*)base_loc); \/\/\n@@ -912,1 +912,1 @@\n-    : _chunk(chunk), _sp(nullptr), _cb(nullptr), _callee_interpreted(false), \n+    : _chunk(chunk), _sp(nullptr), _cb(nullptr), _callee_interpreted(false),\n@@ -915,1 +915,1 @@\n-  template <bool mixed, typename RegisterMapT> \n+  template <bool mixed, typename RegisterMapT>\n@@ -935,2 +935,2 @@\n-    assert (f.pc() != nullptr, \n-      \"young: %d chunk->numFrames(): %d num_frames: %d sp: \" INTPTR_FORMAT \" start: \" INTPTR_FORMAT \" end: \" INTPTR_FORMAT, \n+    assert (f.pc() != nullptr,\n+      \"young: %d chunk->numFrames(): %d num_frames: %d sp: \" INTPTR_FORMAT \" start: \" INTPTR_FORMAT \" end: \" INTPTR_FORMAT,\n@@ -938,1 +938,1 @@\n-    \n+\n@@ -971,1 +971,1 @@\n-bool InstanceStackChunkKlass::verify(oop obj, size_t* out_size, int* out_oops, int* out_frames, int* out_interpreted_frames) {  \n+bool InstanceStackChunkKlass::verify(oop obj, size_t* out_size, int* out_oops, int* out_frames, int* out_interpreted_frames) {\n@@ -1024,1 +1024,1 @@\n-    assert (chunk->argsize() == (closure._cb->as_compiled_method()->method()->num_stack_arg_slots() * VMRegImpl::stack_slot_size) >> LogBytesPerWord, \n+    assert (chunk->argsize() == (closure._cb->as_compiled_method()->method()->num_stack_arg_slots() * VMRegImpl::stack_slot_size) >> LogBytesPerWord,\n@@ -1034,1 +1034,1 @@\n-    \n+\n@@ -1082,1 +1082,1 @@\n-  template <bool mixed, typename RegisterMapT> \n+  template <bool mixed, typename RegisterMapT>\n@@ -1119,1 +1119,1 @@\n-  template <bool mixed, typename RegisterMapT> \n+  template <bool mixed, typename RegisterMapT>\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":33,"deletions":33,"binary":false,"changes":66,"status":"modified"}]}