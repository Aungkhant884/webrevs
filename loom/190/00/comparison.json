{"files":[{"patch":"@@ -33,0 +33,1 @@\n+JVM_EnsureMaterializedForStackWalk_func\n@@ -34,0 +35,1 @@\n+JVM_FindExtentLocalBindings\n","filename":"make\/data\/hotspot-symbols\/symbols-shared","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2159,1 +2159,0 @@\n-    $$$emit8$primary;\n@@ -2162,0 +2161,1 @@\n+      $$$emit8$primary;\n@@ -2165,0 +2165,2 @@\n+    } else if (_method->intrinsic_id() == vmIntrinsicID::_ensureMaterializedForStackWalk) {\n+      __ block_comment(\"call JVM_EnsureMaterializedForStackWalk (elided)\");\n@@ -2166,0 +2168,1 @@\n+      $$$emit8$primary;\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-                                                                                                                       \\\n+                                                                                                                        \\\n@@ -280,6 +280,9 @@\n-  do_intrinsic(_extentLocalCache,          java_lang_Thread,       extentLocalCache_name, extentLocalCache_signature, F_SN) \\\n-   do_name(     extentLocalCache_name,                            \"extentLocalCache\")                                     \\\n-   do_signature(extentLocalCache_signature,                       \"()[Ljava\/lang\/Object;\")                               \\\n-  do_intrinsic(_setExtentLocalCache,       java_lang_Thread,       setExtentLocalCache_name, setExtentLocalCache_signature, F_SN) \\\n-   do_name(     setExtentLocalCache_name,                         \"setExtentLocalCache\")                                  \\\n-   do_signature(setExtentLocalCache_signature,                    \"([Ljava\/lang\/Object;)V\")                              \\\n+  do_intrinsic(_extentLocalCache,         java_lang_Thread,       extentLocalCache_name, extentLocalCache_signature, F_SN) \\\n+   do_name(     extentLocalCache_name,                           \"extentLocalCache\")                                    \\\n+   do_signature(extentLocalCache_signature,                      \"()[Ljava\/lang\/Object;\")                               \\\n+  do_intrinsic(_setExtentLocalCache,      java_lang_Thread,       setExtentLocalCache_name, setExtentLocalCache_signature, F_SN) \\\n+   do_name(     setExtentLocalCache_name,                        \"setExtentLocalCache\")                                 \\\n+   do_signature(setExtentLocalCache_signature,                   \"([Ljava\/lang\/Object;)V\")                              \\\n+  do_intrinsic(_findExtentLocalBindings,  java_lang_Thread,       findExtentLocalBindings_name, void_object_signature, F_SN) \\\n+   do_name(     findExtentLocalBindings_name,                    \"findExtentLocalBindings\")                             \\\n+                                                                                                                        \\\n@@ -325,0 +328,3 @@\n+  do_intrinsic(_ensureMaterializedForStackWalk, java_lang_Thread, ensureMaterializedForStackWalk_name, object_void_signature, F_SN)  \\\n+   do_name(     ensureMaterializedForStackWalk_name,              \"ensureMaterializedForStackWalk\")                     \\\n+                                                                                                                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -160,0 +160,2 @@\n+  template(jdk_incubator_concurrent_ExtentLocal,      \"jdk\/incubator\/concurrent\/ExtentLocal\")     \\\n+  template(jdk_incubator_concurrent_ExtentLocal_Carrier, \"jdk\/incubator\/concurrent\/ExtentLocal$Carrier\") \\\n@@ -401,0 +403,1 @@\n+  template(call_method_name,                          \"call\")                                     \\\n@@ -610,0 +613,1 @@\n+  template(runnable_void_signature,                   \"(Ljava\/lang\/Runnable;)V\")                                    \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -327,0 +327,3 @@\n+JNIEXPORT jobject JNICALL\n+JVM_FindExtentLocalBindings(JNIEnv *env, jclass threadClass);\n+\n@@ -754,0 +757,2 @@\n+JNIEXPORT void JNICALL\n+JVM_EnsureMaterializedForStackWalk_func(JNIEnv* env, jobject vthread, jobject value);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -374,0 +374,6 @@\n+  \/\/ Remove the ExtentLocal cache in case we got a StackOverflowError\n+  \/\/ while we were trying to remove ExtentLocal bindings.\n+  current->set_extentLocalCache(NULL);\n+  \/\/ And the ExtentLocal bindings too.\n+  oop threadObj = current->vthread();\n+  java_lang_Thread::clear_extentLocalBindings(threadObj);\n@@ -385,0 +391,6 @@\n+  \/\/ Remove the ExtentLocal cache in case we got a StackOverflowError\n+  \/\/ while we were trying to remove ExtentLocal bindings.\n+  current->set_extentLocalCache(NULL);\n+  \/\/ And the ExtentLocal bindings too.\n+  oop threadObj = current->vthread();\n+  java_lang_Thread::clear_extentLocalBindings(threadObj);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1366,0 +1366,61 @@\n+class ExtentLocalBindingsResolver {\n+public:\n+  InstanceKlass* Carrier_klass;\n+  Method *vthread_run_runnable_method;\n+  Method *thread_run_method;\n+\n+  ExtentLocalBindingsResolver(JavaThread* THREAD) {\n+    Klass *k = SystemDictionary::resolve_or_fail(vmSymbols::jdk_incubator_concurrent_ExtentLocal_Carrier(), true, THREAD);\n+    Carrier_klass = InstanceKlass::cast(k);\n+\n+    vthread_run_runnable_method = vmClasses::VirtualThread_klass()->find_instance_method\n+      (vmSymbols::run_method_name(), vmSymbols::runnable_void_signature(), Klass::PrivateLookupMode::find);\n+    guarantee(vthread_run_runnable_method != NULL, \"must be\");\n+\n+    thread_run_method = vmClasses::Thread_klass()->find_instance_method\n+      (vmSymbols::run_method_name(), vmSymbols::void_method_signature(), Klass::PrivateLookupMode::find);\n+    guarantee(thread_run_method != NULL, \"must be\");\n+  }\n+};\n+\n+JVM_ENTRY(jobject, JVM_FindExtentLocalBindings(JNIEnv *env, jclass cls))\n+  ResourceMark rm(THREAD);\n+  GrowableArray<Handle>* local_array = new GrowableArray<Handle>(12);\n+  JvmtiVMObjectAllocEventCollector oam;\n+\n+  bool found = false;\n+\n+  static ExtentLocalBindingsResolver resolver(THREAD);\n+\n+  \/\/ Iterate through Java frames\n+  vframeStream vfst(thread);\n+  for(; !vfst.at_end(); vfst.next()) {\n+    int loc = 0;\n+    \/\/ get method of frame\n+    Method* method = vfst.method();\n+\n+    Symbol *name = method->name();\n+\n+    if (method->method_holder() == resolver.Carrier_klass &&\n+        (name == vmSymbols::run_method_name() || name == vmSymbols::call_method_name())) {\n+      loc = 2;\n+    } else if (method == resolver.vthread_run_runnable_method) {\n+      loc = 3;\n+    } else if (method == resolver.thread_run_method) {\n+      loc = 2;\n+    }\n+\n+    if (loc != 0) {\n+      javaVFrame *frame = vfst.asJavaVFrame();\n+      StackValueCollection* locals = frame->locals();\n+      StackValue* head_sv = locals->at(loc); \/\/ jdk\/incubator\/concurrent\/ExtentLocal$Snapshot\n+      Handle result = head_sv->get_obj();\n+      assert(!head_sv->obj_is_scalar_replaced(), \"found scalar-replaced object\");\n+      if (result() != NULL) {\n+        return JNIHandles::make_local(THREAD, result());\n+      }\n+    }\n+  }\n+\n+  return NULL;\n+JVM_END\n@@ -4062,0 +4123,10 @@\n+\n+\/*\n+ * Ensure that code doing a stackwalk and using javaVFrame::locals() to\n+ * get the value will see a materialized value and not a scalar-replaced\n+ * null value.\n+ *\/\n+JVM_ENTRY(void, JVM_EnsureMaterializedForStackWalk_func(JNIEnv* env, jobject vthread, jobject value))\n+  asm(\"nop\");\n+  JVM_EnsureMaterializedForStackWalk(env, value);\n+JVM_END\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1070,6 +1070,1 @@\n-  \/\/ Only overwrite an already pending exception if it is not a ThreadDeath.\n-  if (!has_pending_exception() || !pending_exception()->is_a(vmClasses::ThreadDeath_klass())) {\n-\n-    \/\/ We cannot call Exceptions::_throw(...) here because we cannot block\n-    set_pending_exception(java_throwable, __FILE__, __LINE__);\n-\n+  if (java_throwable->is_a(vmClasses::ThreadDeath_klass())) {\n@@ -1081,0 +1076,6 @@\n+  }\n+\n+  \/\/ Only overwrite an already pending exception if it is not a ThreadDeath.\n+  if (!has_pending_exception() || !pending_exception()->is_a(vmClasses::ThreadDeath_klass())) {\n+    \/\/ We cannot call Exceptions::_throw(...) here because we cannot block\n+    set_pending_exception(java_throwable, __FILE__, __LINE__);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -812,0 +812,3 @@\n+  \/\/ And the ExtentLocal bindings too.\n+  oop threadObj = current->vthread();\n+  java_lang_Thread::clear_extentLocalBindings(threadObj);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -164,2 +164,11 @@\n-  if (h_exception->is_a(vmClasses::OutOfMemoryError_klass())) {\n-    count_out_of_memory_exceptions(h_exception);\n+  if (h_exception->is_a(vmClasses::VirtualMachineError_klass())) {\n+    \/\/ Remove the ExtentLocal cache in case we got a virtual machine\n+    \/\/ Error while we were trying to manipulate ExtentLocal bindings.\n+    thread->set_extentLocalCache(NULL);\n+    \/\/ And the ExtentLocal bindings too.\n+    oop threadObj = thread->vthread();\n+    java_lang_Thread::clear_extentLocalBindings(threadObj);\n+\n+    if (h_exception->is_a(vmClasses::OutOfMemoryError_klass())) {\n+      count_out_of_memory_exceptions(h_exception);\n+    }\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -89,0 +89,2 @@\n+import jdk.internal.vm.annotation.ForceInline;\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n@@ -2587,0 +2589,4 @@\n+            public Object findExtentLocalBindings() {\n+                return Thread.findExtentLocalBindings();\n+            }\n+\n@@ -2591,0 +2597,5 @@\n+            @ForceInline\n+            public void ensureMaterializedForStackWalk(Object value) {\n+                Thread.ensureMaterializedForStackWalk(value);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -291,0 +291,6 @@\n+    \/**\n+     * Search the stack for the most recent extent-local bindings.\n+     *\/\n+    @IntrinsicCandidate\n+    static native Object findExtentLocalBindings();\n+\n@@ -401,0 +407,3 @@\n+    @IntrinsicCandidate\n+    static native void ensureMaterializedForStackWalk(Object o);\n+\n@@ -728,0 +737,1 @@\n+        this.extentLocalBindings = Thread.class;\n@@ -775,0 +785,1 @@\n+        this.extentLocalBindings = Thread.class;\n@@ -1589,0 +1600,2 @@\n+            var snapshot = extentLocalBindings();\n+            ensureMaterializedForStackWalk(snapshot);\n@@ -1590,0 +1603,1 @@\n+            java.lang.ref.Reference.reachabilityFence(snapshot);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -286,0 +286,2 @@\n+        var snapshot = extentLocalBindings();\n+        ensureMaterializedForStackWalk(snapshot);\n@@ -291,0 +293,1 @@\n+            java.lang.ref.Reference.reachabilityFence(snapshot);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -497,0 +497,4 @@\n+    Object findExtentLocalBindings();\n+\n+    void ensureMaterializedForStackWalk(Object value);\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    {\"extentLocalCache\",  \"()[\" OBJ,    (void *)&JVM_ExtentLocalCache},\n+    {\"extentLocalCache\", \"()[\" OBJ,    (void *)&JVM_ExtentLocalCache},\n@@ -58,1 +58,4 @@\n-    {\"getNextThreadIdOffset\", \"()J\",     (void *)&JVM_GetNextThreadIdOffset}\n+    {\"getNextThreadIdOffset\", \"()J\",   (void *)&JVM_GetNextThreadIdOffset},\n+    {\"findExtentLocalBindings\", \"()\" OBJ, (void *)&JVM_FindExtentLocalBindings},\n+    {\"ensureMaterializedForStackWalk\",\n+                         \"(\" OBJ \")V\", (void*)&JVM_EnsureMaterializedForStackWalk_func},\n","filename":"src\/java.base\/share\/native\/libjava\/Thread.c","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.lang.ref.Reference;\n@@ -329,1 +330,3 @@\n-            var prevBindings = addExtentLocalBindings(this);\n+            var prevSnapshot = extentLocalBindings();\n+            var newSnapshot = new Snapshot(this, prevSnapshot);\n+            R result;\n@@ -331,4 +334,3 @@\n-                return ExtentLocalContainer.call(op);\n-            } catch (Throwable t) {\n-                setExtentLocalCache(null); \/\/ Cache.invalidate();\n-                throw t;\n+                JLA.setExtentLocalBindings(newSnapshot);\n+                JLA.ensureMaterializedForStackWalk(newSnapshot);\n+                result = ExtentLocalContainer.call(op);\n@@ -336,1 +338,2 @@\n-                setExtentLocalBindings(prevBindings);\n+                Reference.reachabilityFence(newSnapshot);\n+                JLA.setExtentLocalBindings(prevSnapshot);\n@@ -339,0 +342,1 @@\n+            return result;\n@@ -358,1 +362,4 @@\n-            var prevBindings = addExtentLocalBindings(this);\n+            Snapshot newSnapshot = null;\n+            JLA.ensureMaterializedForStackWalk(newSnapshot);\n+            var prevSnapshot = extentLocalBindings();\n+            newSnapshot = new Snapshot(this, prevSnapshot);\n@@ -360,0 +367,2 @@\n+                JLA.setExtentLocalBindings(newSnapshot);\n+                JLA.ensureMaterializedForStackWalk(newSnapshot);\n@@ -361,3 +370,0 @@\n-            } catch (Throwable t) {\n-                setExtentLocalCache(null); \/\/ Cache.invalidate();\n-                throw t;\n@@ -365,1 +371,2 @@\n-                setExtentLocalBindings(prevBindings);\n+                Reference.reachabilityFence(newSnapshot);\n+                JLA.setExtentLocalBindings(prevSnapshot);\n@@ -369,10 +376,0 @@\n-\n-        \/*\n-         * Add a list of bindings to the current Thread's set of bound values.\n-         *\/\n-        private static final Snapshot addExtentLocalBindings(Carrier bindings) {\n-            Snapshot prev = extentLocalBindings();\n-            var b = new Snapshot(bindings, prev);\n-            ExtentLocal.setExtentLocalBindings(b);\n-            return prev;\n-        }\n@@ -540,0 +537,11 @@\n+        \/\/ Bindings can be in one of four states:\n+        \/\/\n+        \/\/ 1: class Thread: this is a new Thread instance, and no\n+        \/\/ extent locals have ever been bound in this Thread.\n+        \/\/ 2: EmptySnapshot.SINGLETON: This is effectively an empty binding.\n+        \/\/ 3: A Snapshot instance: this contains one or more extent local\n+        \/\/ bindings.\n+        \/\/ 4: null: there may be some bindings in this Thread, but we don't know\n+        \/\/ where they are. We must invoke JLA.findExtentLocalBindings() to walk\n+        \/\/ the stack to find them.\n+\n@@ -541,4 +549,11 @@\n-        if (bindings != null) {\n-            return (Snapshot) bindings;\n-        } else {\n-            return EmptySnapshot.getInstance();\n+        if (bindings == Thread.class) {\n+            \/\/ This must be a new thread\n+           return EmptySnapshot.getInstance();\n+        }\n+        if (bindings == null) {\n+            \/\/ Search the stack\n+            bindings = JLA.findExtentLocalBindings();\n+            if (bindings == null) {\n+                \/\/ Nothing on the stack.\n+                return EmptySnapshot.getInstance();\n+            }\n@@ -546,4 +561,2 @@\n-    }\n-\n-    private static void setExtentLocalBindings(Snapshot bindings) {\n-        JLA.setExtentLocalBindings(bindings);\n+        assert (bindings != null);\n+        return (Snapshot) bindings;\n@@ -666,0 +679,5 @@\n+        private static void setKeyAndObjectAt(Object[] cache, int n, Object key, Object value) {\n+            cache[n * 2] = key;\n+            cache[n * 2 + 1] = value;\n+        }\n+\n@@ -699,1 +717,1 @@\n-                    setKeyAndObjectAt(index & SLOT_MASK, null, null);\n+                    setKeyAndObjectAt(objects, index & SLOT_MASK, null, null);\n","filename":"src\/jdk.incubator.concurrent\/share\/classes\/jdk\/incubator\/concurrent\/ExtentLocal.java","additions":48,"deletions":30,"binary":false,"changes":78,"status":"modified"}]}